00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic051.p2asm"
00000                 | con
00000                 | 	_clkfreq = 338695652
00000                 | 	_clkmode = 28773115
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 49
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_cogstop = 207
00000                 | 	token_memlo = 208
00000                 | 	token_memtop = 209
00000                 | 	token_setcolor = 210
00000                 | 	token_getcolor = 211
00000                 | 	token_restorepalette = 212
00000                 | 	token_pads = 213
00000                 | 	token_padw = 214
00000                 | 	token_findfirst = 215
00000                 | 	token_findnext = 216
00000                 | 	token_defchar = 217
00000                 | 	token_setamode = 218
00000                 | 	token_getrealfreq = 219
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 338695652
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1b70afb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 7A 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 03 90 5D |  if_ne	jmp	#spininit
0040c 002 3C F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 02 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 85 DB 80 FF 
00420 007 00 F0 65 FD | 	hubset	##28773112
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 85 DB 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##28773115
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 0A 18 8A FF 
00440 00f 14 C8 6F FC | 	wrlong	##338695652, #20
00444 010 BC 02 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
006fc 0be 00 00 00 00 
00700 0bf 00 00 00 00 | 	orgf	192
00704 0c0             | skip_clock_set_
00704 0c0 9C 0D A2 FD | 	call	#_program
00708 0c1             | cogexit
00708 0c1 38 01 80 FF 
0070c 0c2 1F 00 66 FD | 	waitx	##160000
00710 0c3 01 92 62 FD | 	cogid	arg01
00714 0c4 03 92 62 FD | 	cogstop	arg01
00718 0c5             | spininit
00718 0c5 61 65 06 FB | 	rdlong	objptr, ptra++
0071c 0c6 61 7B 06 FB | 	rdlong	result1, ptra++
00720 0c7 28 06 64 FD | 	setq	#3
00724 0c8 00 93 06 FB | 	rdlong	arg01, ptra
00728 0c9 04 F0 87 F1 | 	sub	ptra, #4
0072c 0ca 2D 7A 62 FD | 	call	result1
00730 0cb D4 FF 9F FD | 	jmp	#cogexit
00734 0cc             | FCACHE_LOAD_
00734 0cc F9 AD 01 F6 |     mov	fcache_tmpb_,ptrb
00738 0cd 2B F2 63 FD |     pop	ptrb
0073c 0ce D5 EC 8B F9 |     altd	pa,ret_instr_
00740 0cf D5 00 00 F6 |     mov	 0-0, ret_instr_
00744 0d0 28 EC 63 FD |     setq	pa
00748 0d1 E1 01 04 FB |     rdlong	$0, ptrb++
0074c 0d2 2A F2 63 FD |     push	ptrb
00750 0d3 D6 F2 03 F6 |     mov ptrb,fcache_tmpb_
00754 0d4 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00758 0d5             | ret_instr_
00758 0d5 00 FE 07 02 |     _ret_ cmp inb,#0
0075c 0d6             | fcache_tmpb_
0075c 0d6 00 00 00 00 |     long 0
00760 0d7             | fcache_load_ptr_
00760 0d7 CC 00 00 00 |     long FCACHE_LOAD_
00764 0d8             | builtin_bytefill_
00764 0d8 01 96 56 F0 |         shr	arg03, #1 wc
00768 0d9 49 95 42 CC |  if_c   wrbyte	arg02, arg01
0076c 0da 01 92 06 C1 |  if_c   add	arg01, #1
00770 0db 00 94 FE F9 |         movbyts	arg02, #0
00774 0dc             | builtin_wordfill_
00774 0dc 01 96 56 F0 |         shr	arg03, #1 wc
00778 0dd 49 95 52 CC |  if_c   wrword	arg02, arg01
0077c 0de 02 92 06 C1 |  if_c   add	arg01, #2
00780 0df 4A 95 2A F9 |         setword	arg02, arg02, #1
00784 0e0             | builtin_longfill_
00784 0e0 49 01 88 FC |         wrfast	#0,arg01
00788 0e1 00 96 0E F2 |         cmp	arg03, #0 wz
0078c 0e2 4B 03 D8 5C |  if_nz  rep	#1, arg03
00790 0e3 17 94 62 5D |  if_nz  wflong	arg02
00794 0e4 2D 00 64 FD |         ret
00798 0e5             | COUNT_
00798 0e5 00 00 00 00 |     long 0
0079c 0e6             | RETADDR_
0079c 0e6 00 00 00 00 |     long 0
007a0 0e7             | fp
007a0 0e7 00 00 00 00 |     long 0
007a4 0e8             | pushregs_
007a4 0e8 2B EC 63 FD |     pop  pa
007a8 0e9 2B CC 61 FD |     pop  RETADDR_
007ac 0ea 03 CA 95 FB |     tjz  COUNT_, #pushregs_done_
007b0 0eb FF CB 8D F9 |     altd  COUNT_, #511
007b4 0ec 28 00 64 FD |     setq #0-0
007b8 0ed 61 A7 66 FC |     wrlong local01, ptra++
007bc 0ee             | pushregs_done_
007bc 0ee 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
007c0 0ef 61 CB 65 FC |     wrlong COUNT_, ptra++
007c4 0f0 F8 CF 01 F6 |     mov    fp, ptra
007c8 0f1 2C EC 63 FD |     jmp  pa
007cc 0f2             |  popregs_
007cc 0f2 2B EC 63 FD |     pop    pa
007d0 0f3 28 04 64 FD |     setq   #2
007d4 0f4 5F CB 05 FB |     rdlong COUNT_, --ptra
007d8 0f5 02 CA 75 FB |     djf    COUNT_, #popregs__ret
007dc 0f6 28 CA 61 FD |     setq   COUNT_
007e0 0f7 5F A7 06 FB |     rdlong local01, --ptra
007e4 0f8             | popregs__ret
007e4 0f8 2A CC 61 FD |     push   RETADDR_
007e8 0f9 2C EC 63 FD |     jmp    pa
007ec 0fa             | 
007ec 0fa             | divide_
007ec 0fa 88 11 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
007f0 0fb 6C 62 62 FD |        wrc     itmp2_                         'store sign of y
007f4 0fc 87 0F 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
007f8 0fd 88 0F 13 FD |        qdiv    muldiva_, muldivb_             'queue divide
007fc 0fe 01 62 66 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00800 0ff 18 10 63 FD |        getqx   muldivb_                       'get quotient
00804 100 19 0E 63 FD |        getqy   muldiva_                       'get remainder
00808 101 87 0F 83 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0080c 102 00 62 16 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00810 103 88 11 83 06 |  _ret_ negc    muldivb_,muldivb_     
00814 104             | __pc long 0
00814 104 00 00 00 00 
00818 105             | __setjmp
00818 105 2B 08 62 FD |     pop __pc
0081c 106 00 7A 06 F6 |     mov result1, #0
00820 107 00 7C 06 F6 |     mov result2, #0
00824 108 49 5D 02 F6 |     mov abortchain, arg01
00828 109 49 CF 61 FC |     wrlong fp, arg01
0082c 10a 04 92 06 F1 |     add arg01, #4
00830 10b 49 F1 63 FC |     wrlong ptra, arg01
00834 10c 04 92 06 F1 |     add arg01, #4
00838 10d 49 65 62 FC |     wrlong objptr, arg01
0083c 10e 04 92 06 F1 |     add arg01, #4
00840 10f 49 09 62 FC |     wrlong __pc, arg01
00844 110 2C 08 62 FD |     jmp __pc
00848 111             | __unwind_pc long 0
00848 111 00 00 00 00 
0084c 112             | __unwind_stack
0084c 112 2B 22 62 FD |    pop  __unwind_pc
00850 113             | __unwind_loop
00850 113 4A 93 0A F2 |    cmp  arg01, arg02 wz
00854 114 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00858 115 49 F1 03 F6 |    mov   ptra, arg01
0085c 116 6C FF BF FD |    call  #popregs_
00860 117 E7 92 02 F6 |    mov   arg01, fp
00864 118 E8 FF 9F FD |    jmp   #__unwind_loop
00868 119             | __unwind_stack_ret
00868 119 2C 22 62 FD |    jmp  __unwind_pc
0086c 11a             | __longjmp
0086c 11a 2B 08 62 FD |     pop __pc
00870 11b 00 92 0E F2 |     cmp    arg01, #0 wz
00874 11c 30 00 90 AD |  if_z jmp #nocatch
00878 11d 4A 7B 02 F6 |     mov result1, arg02
0087c 11e 01 7C 06 F6 |     mov result2, #1
00880 11f 49 95 02 FB |     rdlong arg02, arg01
00884 120 04 92 06 F1 |     add arg01, #4
00888 121 49 F1 03 FB |     rdlong ptra, arg01
0088c 122 04 92 06 F1 |     add arg01, #4
00890 123 49 65 02 FB |     rdlong objptr, arg01
00894 124 04 92 06 F1 |     add arg01, #4
00898 125 49 09 02 FB |     rdlong __pc, arg01
0089c 126 E7 92 02 F6 |     mov arg01, fp
008a0 127 A8 FF BF FD |     call #__unwind_stack
008a4 128             | __longjmp_ret
008a4 128 2C 08 62 FD |     jmp  __pc
008a8 129             | nocatch
008a8 129 00 96 0E F2 |     cmp arg03, #0 wz
008ac 12a 58 FE 9F AD |  if_z jmp #cogexit
008b0 12b F0 FF 9F FD |     jmp #__longjmp_ret
008b4 12c             | 
008b4 12c             | __heap_ptr
008b4 12c 90 F4 03 00 | 	long	@__heap_base
008b8 12d             | __methods__
008b8 12d 2C F1 03 00 | 	long	@__methodtable__
008bc 12e             | abortchain
008bc 12e 00 00 00 00 | 	long	0
008c0 12f             | entryptr__
008c0 12f 04 04 00 00 | 	long	@entry
008c4 130             | itmp1_
008c4 130 00 00 00 00 | 	long	0
008c8 131             | itmp2_
008c8 131 00 00 00 00 | 	long	0
008cc 132             | objptr
008cc 132 98 6B 05 00 | 	long	@objmem
008d0 133             | ptr__Audio2_004_spin2_dat__
008d0 133 58 E0 03 00 | 	long	@_Audio2_004_spin2_dat_
008d4 134             | ptr___system__dat__
008d4 134 54 E4 03 00 | 	long	@__system__dat_
008d8 135             | ptr__dat__
008d8 135 28 35 03 00 | 	long	@_dat_
008dc 136             | ptr__fatfs_cc_dat__
008dc 136 9C EB 03 00 | 	long	@_fatfs_cc_dat_
008e0 137             | ptr__hg010b_spin2_dat__
008e0 137 90 66 03 00 | 	long	@_hg010b_spin2_dat_
008e4 138             | ptr__housekeeper_
008e4 138 E4 15 00 00 | 	long	@_housekeeper
008e8 139             | ptr__psram16drv_spin2_dat__
008e8 139 40 A6 03 00 | 	long	@_psram16drv_spin2_dat_
008ec 13a             | ptr__psram_spin2_dat__
008ec 13a F8 A3 03 00 | 	long	@_psram_spin2_dat_
008f0 13b             | ptr__usbnew_spin2_dat__
008f0 13b D0 B5 03 00 | 	long	@_usbnew_spin2_dat_
008f4 13c             | ptr_stackspace_
008f4 13c 94 14 06 00 | 	long	@stackspace
008f8 13d             | result1
008f8 13d 00 00 00 00 | 	long	0
008fc 13e             | result2
008fc 13e 01 00 00 00 | 	long	1
00900 13f             | result3
00900 13f 02 00 00 00 | 	long	2
00904 140             | COG_BSS_START
00904 140             | 	fit	480
00904                 | 	orgh
00904                 | hubentry
00904                 | 
00904                 | ' 
00904                 | ' '-------------------------------------------------------------------------------------------------------- 
00904                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00904                 | ' '--------------------------------------------------------------------------------------------------------
00904                 | ' 
00904                 | ' ''-------------------------------------------------------------------------------------------------------
00904                 | ' '                     A full screen editor for programming and entering data
00904                 | ' ''-------------------------------------------------------------------------------------------------------
00904                 | ' 
00904                 | ' function edit() as string
00904                 | _edit
00904     1B CA 05 F6 | 	mov	COUNT_, #27
00908     E8 00 A0 FD | 	call	#pushregs_
0090c     00 A6 06 F6 | 	mov	local01, #0
00910     00 A8 06 F6 | 	mov	local02, #0
00914     00 AA 06 F6 | 	mov	local03, #0
00918     00 AC 06 F6 | 	mov	local04, #0
0091c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0091c                 | ' do
0091c                 | LR__0001
0091c     01 92 06 F6 | 	mov	arg01, #1
00920     CC 1D B2 FD | 	call	#_hg010b_spin2_waitvbl
00924     54 32 B2 FD | 	call	#_usbnew_spin2_get_key
00928     3D AF 02 F6 | 	mov	local05, result1
0092c                 | '   return hkbd_led_rep
0092c     13 00 00 FF 
00930     E0 77 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10208
00934     3B 7B C2 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00938     13 00 00 FF 
0093c     E0 77 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10208
00940     54 00 00 FF 
00944     BC 64 06 F1 | 	add	objptr, ##43196
00948     32 7B 62 FC | 	wrlong	result1, objptr
0094c     54 00 00 FF 
00950     BC 64 86 F1 | 	sub	objptr, ##43196
00954                 | ' if key>0 andalso key<4 andalso keyclick=1 then audio.play16(7,@atari2_spl,43,4096,1758,0,300) : audio.stop(7)
00954     01 AE 16 F2 | 	cmp	local05, #1 wc
00958     88 00 90 CD |  if_b	jmp	#LR__0002
0095c     04 AE 16 F2 | 	cmp	local05, #4 wc
00960     80 00 90 3D |  if_ae	jmp	#LR__0002
00964     52 00 00 FF 
00968     E0 64 06 F1 | 	add	objptr, ##42208
0096c     32 B1 02 FB | 	rdlong	local06, objptr
00970     52 00 00 FF 
00974     E0 64 86 F1 | 	sub	objptr, ##42208
00978     01 B0 0E F2 | 	cmp	local06, #1 wz
0097c     64 00 90 5D |  if_ne	jmp	#LR__0002
00980     35 95 02 F6 | 	mov	arg02, ptr__dat__
00984     04 00 00 FF 
00988     A4 94 06 F1 | 	add	arg02, ##2212
0098c     2B B2 06 F6 | 	mov	local07, #43
00990     0C B4 C6 F9 | 	decod	local08, #12
00994     03 00 00 FF 
00998     DE B6 06 F6 | 	mov	local09, ##1758
0099c     00 B8 06 F6 | 	mov	local10, #0
009a0     2C BB 06 F6 | 	mov	local11, #300
009a4     07 92 06 F6 | 	mov	arg01, #7
009a8     2B 96 06 F6 | 	mov	arg03, #43
009ac     0C 98 C6 F9 | 	decod	arg04, #12
009b0     03 00 00 FF 
009b4     DE 9A 06 F6 | 	mov	arg05, ##1758
009b8     00 9C 06 F6 | 	mov	arg06, #0
009bc     2C 9F 06 F6 | 	mov	arg07, #300
009c0     0B 00 00 FF 
009c4     CC 64 06 F1 | 	add	objptr, ##5836
009c8     BC 39 B2 FD | 	call	#_Audio2_004_spin2_play16
009cc     07 B0 06 F6 | 	mov	local06, #7
009d0                 | ' 
009d0                 | ' base2:=@channel0[0]+64*channel
009d0     32 BD 02 F6 | 	mov	local12, objptr
009d4                 | ' word[base2+32]:=0
009d4     EC BD 06 F1 | 	add	local12, #492
009d8     5E 01 58 FC | 	wrword	#0, local12
009dc     0B 00 00 FF 
009e0     CC 64 86 F1 | 	sub	objptr, ##5836
009e4                 | LR__0002
009e4                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
009e4     04 AE 16 F2 | 	cmp	local05, #4 wc
009e8     20 00 90 CD |  if_b	jmp	#LR__0003
009ec     00 00 40 FF 
009f0     00 AE 16 F2 | 	cmp	local05, ##-2147483648 wc
009f4     57 B1 02 C6 |  if_b	mov	local06, local05
009f8     58 B1 E2 C8 |  if_b	getbyte	local06, local06, #0
009fc     E0 B0 16 C2 |  if_b	cmp	local06, #224 wc
00a00     57 AB 02 C6 |  if_b	mov	local03, local05
00a04     01 A6 06 C6 |  if_b	mov	local01, #1
00a08     55 AD 02 C6 |  if_b	mov	local04, local03
00a0c                 | LR__0003
00a0c                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00a0c     00 00 40 FF 
00a10     01 AE 16 F2 | 	cmp	local05, ##-2147483647 wc
00a14     00 A8 06 36 |  if_ae	mov	local02, #0
00a18     00 A6 06 36 |  if_ae	mov	local01, #0
00a1c                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00a1c     00 AE 0E F2 | 	cmp	local05, #0 wz
00a20     01 A6 0E A2 |  if_e	cmp	local01, #1 wz
00a24     01 A8 06 A1 |  if_e	add	local02, #1
00a28                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00a28     00 00 40 FF 
00a2c     00 AE 16 F2 | 	cmp	local05, ##-2147483648 wc
00a30     19 A8 0E C2 |  if_b	cmp	local02, #25 wz
00a34     55 AD 02 86 |  if_c_and_z	mov	local04, local03
00a38     15 A8 06 86 |  if_c_and_z	mov	local02, #21
00a3c                 | ' 
00a3c                 | ' '' there is a key pressed and it needs to be processed
00a3c                 | ' 
00a3c                 | ' if key3<>0 then
00a3c     00 AC 0E F2 | 	cmp	local04, #0 wz
00a40     D8 FE 9F AD |  if_e	jmp	#LR__0001
00a44                 | '   if keyclick=1 then audio.play16(7,keyclick_spl,43,4096,spl_len,spl_len,0) ' make a click
00a44     52 00 00 FF 
00a48     E0 64 06 F1 | 	add	objptr, ##42208
00a4c     32 B1 02 FB | 	rdlong	local06, objptr
00a50     52 00 00 FF 
00a54     E0 64 86 F1 | 	sub	objptr, ##42208
00a58     01 B0 0E F2 | 	cmp	local06, #1 wz
00a5c     50 00 90 5D |  if_ne	jmp	#LR__0004
00a60     54 00 00 FF 
00a64     80 64 06 F1 | 	add	objptr, ##43136
00a68     32 95 02 FB | 	rdlong	arg02, objptr
00a6c     2B B2 06 F6 | 	mov	local07, #43
00a70     0C B4 C6 F9 | 	decod	local08, #12
00a74     04 64 86 F1 | 	sub	objptr, #4
00a78     32 B9 02 FB | 	rdlong	local10, objptr
00a7c     5C B7 02 F6 | 	mov	local09, local10
00a80     00 BA 06 F6 | 	mov	local11, #0
00a84     07 92 06 F6 | 	mov	arg01, #7
00a88     2B 96 06 F6 | 	mov	arg03, #43
00a8c     0C 98 C6 F9 | 	decod	arg04, #12
00a90     5B 9B 02 F6 | 	mov	arg05, local09
00a94     5C 9D 02 F6 | 	mov	arg06, local10
00a98     00 9E 06 F6 | 	mov	arg07, #0
00a9c     48 00 00 FF 
00aa0     B0 65 86 F1 | 	sub	objptr, ##37296
00aa4     E0 38 B2 FD | 	call	#_Audio2_004_spin2_play16
00aa8     0B 00 00 FF 
00aac     CC 64 86 F1 | 	sub	objptr, ##5836
00ab0                 | LR__0004
00ab0     56 93 02 F6 | 	mov	arg01, local04
00ab4     40 02 B2 FD | 	call	#_scantochar
00ab8     3D BF 02 F6 | 	mov	local13, result1
00abc                 | '   if leds and 2 = 2 then 						' caps lock
00abc     54 00 00 FF 
00ac0     BC 64 06 F1 | 	add	objptr, ##43196
00ac4     32 C1 02 FB | 	rdlong	local14, objptr
00ac8     54 00 00 FF 
00acc     BC 64 86 F1 | 	sub	objptr, ##43196
00ad0     60 B1 0A F6 | 	mov	local06, local14 wz
00ad4     4C 00 90 AD |  if_e	jmp	#LR__0012
00ad8                 | '     if key4>96 andalso key4<123 then                 
00ad8     61 BE 16 F2 | 	cmp	local13, #97 wc
00adc     0C 00 90 CD |  if_b	jmp	#LR__0005
00ae0     7B BE 16 F2 | 	cmp	local13, #123 wc
00ae4     20 BE 86 C1 |  if_b	sub	local13, #32
00ae8     38 00 90 CD |  if_b	jmp	#LR__0011
00aec                 | LR__0005
00aec     41 BE 16 F2 | 	cmp	local13, #65 wc
00af0     0C 00 90 CD |  if_b	jmp	#LR__0006
00af4     5B BE 16 F2 | 	cmp	local13, #91 wc
00af8     20 BE 06 C1 |  if_b	add	local13, #32
00afc     24 00 90 CD |  if_b	jmp	#LR__0010
00b00                 | LR__0006
00b00     17 BE 16 F2 | 	cmp	local13, #23 wc
00b04     0C 00 90 CD |  if_b	jmp	#LR__0007
00b08     20 BE 16 F2 | 	cmp	local13, #32 wc
00b0c     09 BE 86 C1 |  if_b	sub	local13, #9
00b10     10 00 90 CD |  if_b	jmp	#LR__0009
00b14                 | LR__0007
00b14     0E BE 16 F2 | 	cmp	local13, #14 wc
00b18     08 00 90 CD |  if_b	jmp	#LR__0008
00b1c     17 BE 16 F2 | 	cmp	local13, #23 wc
00b20     27 BE 06 C1 |  if_b	add	local13, #39
00b24                 | LR__0008
00b24                 | LR__0009
00b24                 | LR__0010
00b24                 | LR__0011
00b24                 | LR__0012
00b24                 | '  
00b24                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00b24     01 BE 16 F2 | 	cmp	local13, #1 wc
00b28     BC 01 90 CD |  if_b	jmp	#LR__0017
00b2c     7F BE 16 F2 | 	cmp	local13, #127 wc
00b30     3C 64 06 C1 |  if_b	add	objptr, #60
00b34     32 B1 E2 CA |  if_b	rdword	local06, objptr
00b38     3C 64 86 C1 |  if_b	sub	objptr, #60
00b3c     FE B0 16 C2 |  if_b	cmp	local06, #254 wc
00b40     A4 01 90 3D |  if_ae	jmp	#LR__0017
00b44                 | '     if do_insert then							' move the characters right
00b44     54 00 00 FF 
00b48     A4 64 06 F1 | 	add	objptr, ##43172
00b4c     32 B1 0A FB | 	rdlong	local06, objptr wz
00b50     54 00 00 FF 
00b54     A4 64 86 F1 | 	sub	objptr, ##43172
00b58     84 01 90 AD |  if_e	jmp	#LR__0016
00b5c                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00b5c     3E 64 06 F1 | 	add	objptr, #62
00b60     32 B3 C2 FA | 	rdbyte	local07, objptr
00b64     59 B5 E2 F8 | 	getbyte	local08, local07, #0
00b68     07 B4 66 F0 | 	shl	local08, #7
00b6c     3A 64 86 F1 | 	sub	objptr, #58
00b70     32 C3 02 FB | 	rdlong	local15, objptr
00b74     61 C5 02 F6 | 	mov	local16, local15
00b78     5A C5 02 F1 | 	add	local16, local08
00b7c     7F C4 06 F1 | 	add	local16, #127
00b80     59 B3 E2 F8 | 	getbyte	local07, local07, #0
00b84     07 B2 66 F0 | 	shl	local07, #7
00b88     59 C3 02 F1 | 	add	local15, local07
00b8c     38 64 06 F1 | 	add	objptr, #56
00b90     32 B7 E2 FA | 	rdword	local09, objptr
00b94     3C 64 86 F1 | 	sub	objptr, #60
00b98     5B BB 52 F6 | 	abs	local11, local09 wc
00b9c     01 BA 46 F0 | 	shr	local11, #1
00ba0     5D C3 82 F3 | 	sumc	local15, local11
00ba4     01 C2 06 F1 | 	add	local15, #1
00ba8                 | LR__0013
00ba8     62 C7 02 F6 | 	mov	local17, local16
00bac     01 C6 86 F1 | 	sub	local17, #1
00bb0     63 93 02 F6 | 	mov	arg01, local17
00bb4     5C 00 B2 FD | 	call	#_pspeek
00bb8     3D C9 02 F6 | 	mov	local18, result1
00bbc     64 CB E2 F8 | 	getbyte	local19, local18, #0
00bc0     65 CD 02 F6 | 	mov	local20, local19
00bc4     62 93 02 F6 | 	mov	arg01, local16
00bc8     66 95 02 F6 | 	mov	arg02, local20
00bcc     F8 FF B1 FD | 	call	#_pspoke
00bd0     01 C4 86 F1 | 	sub	local16, #1
00bd4     61 C5 52 F2 | 	cmps	local16, local15 wc
00bd8     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00bdc     54 00 00 FF 
00be0     C4 64 06 F1 | 	add	objptr, ##43204
00be4     32 01 68 FC | 	wrlong	#0, objptr
00be8     54 00 00 FF 
00bec     86 64 86 F1 | 	sub	objptr, ##43142
00bf0     32 B3 C2 FA | 	rdbyte	local07, objptr
00bf4     59 B5 E2 F8 | 	getbyte	local08, local07, #0
00bf8     07 B4 66 F0 | 	shl	local08, #7
00bfc     3A 64 86 F1 | 	sub	objptr, #58
00c00     32 B7 02 FB | 	rdlong	local09, objptr
00c04     5B C5 02 F6 | 	mov	local16, local09
00c08     5A C5 02 F1 | 	add	local16, local08
00c0c     38 64 06 F1 | 	add	objptr, #56
00c10     32 BB E2 FA | 	rdword	local11, objptr
00c14     5D B9 32 F9 | 	getword	local10, local11, #0
00c18     5C CF 52 F6 | 	abs	local21, local10 wc
00c1c     01 CE 46 F0 | 	shr	local21, #1
00c20     67 CF 82 F6 | 	negc	local21, local21
00c24     67 C5 02 F1 | 	add	local16, local21
00c28     59 B3 E2 F8 | 	getbyte	local07, local07, #0
00c2c     07 B2 66 F0 | 	shl	local07, #7
00c30     5B B5 02 F6 | 	mov	local08, local09
00c34     3C 64 86 F1 | 	sub	objptr, #60
00c38     5A D1 02 F6 | 	mov	local22, local08
00c3c     59 D1 02 F1 | 	add	local22, local07
00c40     80 D0 06 F1 | 	add	local22, #128
00c44                 | LR__0014
00c44     68 C5 52 F2 | 	cmps	local16, local22 wc
00c48     94 00 90 3D |  if_ae	jmp	#LR__0015
00c4c     3C 64 06 F1 | 	add	objptr, #60
00c50     32 B1 E2 FA | 	rdword	local06, objptr
00c54     54 00 00 FF 
00c58     88 64 06 F1 | 	add	objptr, ##43144
00c5c     32 B5 02 FB | 	rdlong	local08, objptr
00c60     01 B4 66 F0 | 	shl	local08, #1
00c64     5A B1 02 F1 | 	add	local06, local08
00c68     54 00 00 FF 
00c6c     86 64 86 F1 | 	sub	objptr, ##43142
00c70     32 C1 C2 FA | 	rdbyte	local14, objptr
00c74     3E 64 86 F1 | 	sub	objptr, #62
00c78     04 C0 66 F0 | 	shl	local14, #4
00c7c     04 C0 06 F1 | 	add	local14, #4
00c80     62 93 02 F6 | 	mov	arg01, local16
00c84     8C FF B1 FD | 	call	#_pspeek
00c88     3D B3 E2 F8 | 	getbyte	local07, result1, #0
00c8c     41 64 06 F1 | 	add	objptr, #65
00c90     32 B5 02 FB | 	rdlong	local08, objptr
00c94     04 64 06 F1 | 	add	objptr, #4
00c98     32 B9 02 FB | 	rdlong	local10, objptr
00c9c     45 64 86 F1 | 	sub	objptr, #69
00ca0     5C B7 02 F6 | 	mov	local09, local10
00ca4     58 93 02 F6 | 	mov	arg01, local06
00ca8     60 95 02 F6 | 	mov	arg02, local14
00cac     59 97 02 F6 | 	mov	arg03, local07
00cb0     5A 99 02 F6 | 	mov	arg04, local08
00cb4     5B 9B 02 F6 | 	mov	arg05, local09
00cb8     E8 17 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00cbc     54 00 00 FF 
00cc0     C4 64 06 F1 | 	add	objptr, ##43204
00cc4     32 B1 02 FB | 	rdlong	local06, objptr
00cc8     01 B0 06 F1 | 	add	local06, #1
00ccc     32 B1 62 FC | 	wrlong	local06, objptr
00cd0     54 00 00 FF 
00cd4     C4 64 86 F1 | 	sub	objptr, ##43204
00cd8     01 C4 06 F1 | 	add	local16, #1
00cdc     64 FF 9F FD | 	jmp	#LR__0014
00ce0                 | LR__0015
00ce0                 | LR__0016
00ce0     5F 93 02 F6 | 	mov	arg01, local13
00ce4     70 1B B2 FD | 	call	#_hg010b_spin2_putchar
00ce8                 | LR__0017
00ce8                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then
00ce8     01 BE 16 F2 | 	cmp	local13, #1 wc
00cec     9C 00 90 CD |  if_b	jmp	#LR__0018
00cf0     7F BE 16 F2 | 	cmp	local13, #127 wc
00cf4     94 00 90 3D |  if_ae	jmp	#LR__0018
00cf8     3C 64 06 F1 | 	add	objptr, #60
00cfc     32 B1 E2 FA | 	rdword	local06, objptr
00d00     3C 64 86 F1 | 	sub	objptr, #60
00d04     FE B0 0E F2 | 	cmp	local06, #254 wz
00d08     52 00 00 AF 
00d0c     E0 64 06 A1 |  if_e	add	objptr, ##42208
00d10     32 B5 02 AB |  if_e	rdlong	local08, objptr
00d14     52 00 00 AF 
00d18     E0 64 86 A1 |  if_e	sub	objptr, ##42208
00d1c     5A B3 02 A6 |  if_e	mov	local07, local08
00d20     01 B2 0E A2 |  if_e	cmp	local07, #1 wz
00d24     64 00 90 5D |  if_ne	jmp	#LR__0018
00d28     35 95 02 F6 | 	mov	arg02, ptr__dat__
00d2c     04 00 00 FF 
00d30     A4 94 06 F1 | 	add	arg02, ##2212
00d34     2B B2 06 F6 | 	mov	local07, #43
00d38     0C B4 C6 F9 | 	decod	local08, #12
00d3c     03 00 00 FF 
00d40     DE B6 06 F6 | 	mov	local09, ##1758
00d44     00 B8 06 F6 | 	mov	local10, #0
00d48     2C BB 06 F6 | 	mov	local11, #300
00d4c     07 92 06 F6 | 	mov	arg01, #7
00d50     2B 96 06 F6 | 	mov	arg03, #43
00d54     0C 98 C6 F9 | 	decod	arg04, #12
00d58     03 00 00 FF 
00d5c     DE 9A 06 F6 | 	mov	arg05, ##1758
00d60     00 9C 06 F6 | 	mov	arg06, #0
00d64     2C 9F 06 F6 | 	mov	arg07, #300
00d68     0B 00 00 FF 
00d6c     CC 64 06 F1 | 	add	objptr, ##5836
00d70     14 36 B2 FD | 	call	#_Audio2_004_spin2_play16
00d74                 | ' 
00d74                 | ' base2:=@channel0[0]+64*channel
00d74     32 BD 02 F6 | 	mov	local12, objptr
00d78     C0 93 06 F6 | 	mov	arg01, #448
00d7c                 | ' word[base2+32]:=0
00d7c     EC BD 06 F1 | 	add	local12, #492
00d80     5E 01 58 FC | 	wrword	#0, local12
00d84     0B 00 00 FF 
00d88     CC 64 86 F1 | 	sub	objptr, ##5836
00d8c                 | LR__0018
00d8c                 | '     
00d8c                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00d8c     8D BE 0E F2 | 	cmp	local13, #141 wz
00d90     B0 00 90 5D |  if_ne	jmp	#LR__0022
00d94     91 01 00 FF 
00d98     FA D2 06 F6 | 	mov	local23, ##@LR__5477
00d9c                 | '     line$="" 
00d9c                 | '     for i=editor_spaces to 127
00d9c     38 00 00 FF 
00da0     D8 65 06 F1 | 	add	objptr, ##29144
00da4     32 C5 02 FB | 	rdlong	local16, objptr
00da8     38 00 00 FF 
00dac     D8 65 86 F1 | 	sub	objptr, ##29144
00db0                 | LR__0019
00db0     80 C4 56 F2 | 	cmps	local16, #128 wc
00db4     44 00 90 3D |  if_ae	jmp	#LR__0020
00db8     3E 64 06 F1 | 	add	objptr, #62
00dbc     32 BB C2 FA | 	rdbyte	local11, objptr
00dc0     07 BA 66 F0 | 	shl	local11, #7
00dc4     3A 64 86 F1 | 	sub	objptr, #58
00dc8     32 93 02 FB | 	rdlong	arg01, objptr
00dcc     04 64 86 F1 | 	sub	objptr, #4
00dd0     5D 93 02 F1 | 	add	arg01, local11
00dd4     62 93 02 F1 | 	add	arg01, local16
00dd8     38 FE B1 FD | 	call	#_pspeek
00ddc     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
00de0     18 54 B2 FD | 	call	#__system__Chr_S
00de4     3D 95 02 F6 | 	mov	arg02, result1
00de8     69 93 02 F6 | 	mov	arg01, local23
00dec     FC 39 B2 FD | 	call	#__system___string_concat
00df0     3D D3 02 F6 | 	mov	local23, result1
00df4     01 C4 06 F1 | 	add	local16, #1
00df8     B4 FF 9F FD | 	jmp	#LR__0019
00dfc                 | LR__0020
00dfc                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00dfc     54 00 00 FF 
00e00     A4 64 06 F1 | 	add	objptr, ##43172
00e04     32 B1 0A FB | 	rdlong	local06, objptr wz
00e08     54 00 00 FF 
00e0c     A4 64 86 F1 | 	sub	objptr, ##43172
00e10     24 00 90 AD |  if_e	jmp	#LR__0021
00e14     3E 64 06 F1 | 	add	objptr, #62
00e18     32 B3 C2 FA | 	rdbyte	local07, objptr
00e1c     3E 64 86 F1 | 	sub	objptr, #62
00e20     23 B2 16 F2 | 	cmp	local07, #35 wc
00e24     3E 64 06 C1 |  if_b	add	objptr, #62
00e28     32 93 C2 CA |  if_b	rdbyte	arg01, objptr
00e2c     3E 64 86 C1 |  if_b	sub	objptr, #62
00e30     01 92 06 C1 |  if_b	add	arg01, #1
00e34     A8 1F B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00e38                 | LR__0021
00e38     A8 21 B2 FD | 	call	#_hg010b_spin2_crlf
00e3c                 | '     v.crlf() 
00e3c                 | '     return  line$
00e3c     69 7B 02 F6 | 	mov	result1, local23
00e40     94 07 90 FD | 	jmp	#LR__0049
00e44                 | LR__0022
00e44     56 BF E2 F8 | 	getbyte	local13, local04, #0
00e48                 | '   
00e48                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then audio.play16(7,@atari2_spl,43,4096,1758,0,300) : audio.stop(7)  			' tab
00e48     2B BE 0E F2 | 	cmp	local13, #43 wz
00e4c     98 00 90 5D |  if_ne	jmp	#LR__0023
00e50     3C 64 06 F1 | 	add	objptr, #60
00e54     32 B1 E2 FA | 	rdword	local06, objptr
00e58     3C 64 86 F1 | 	sub	objptr, #60
00e5c     F0 B0 16 F2 | 	cmp	local06, #240 wc
00e60     84 00 90 CD |  if_b	jmp	#LR__0023
00e64     52 00 00 FF 
00e68     E0 64 06 F1 | 	add	objptr, ##42208
00e6c     32 B5 02 FB | 	rdlong	local08, objptr
00e70     52 00 00 FF 
00e74     E0 64 86 F1 | 	sub	objptr, ##42208
00e78     5A B3 02 F6 | 	mov	local07, local08
00e7c     01 B2 0E F2 | 	cmp	local07, #1 wz
00e80     64 00 90 5D |  if_ne	jmp	#LR__0023
00e84     35 95 02 F6 | 	mov	arg02, ptr__dat__
00e88     04 00 00 FF 
00e8c     A4 94 06 F1 | 	add	arg02, ##2212
00e90     2B B2 06 F6 | 	mov	local07, #43
00e94     0C B4 C6 F9 | 	decod	local08, #12
00e98     03 00 00 FF 
00e9c     DE B6 06 F6 | 	mov	local09, ##1758
00ea0     00 B8 06 F6 | 	mov	local10, #0
00ea4     2C BB 06 F6 | 	mov	local11, #300
00ea8     07 92 06 F6 | 	mov	arg01, #7
00eac     2B 96 06 F6 | 	mov	arg03, #43
00eb0     0C 98 C6 F9 | 	decod	arg04, #12
00eb4     03 00 00 FF 
00eb8     DE 9A 06 F6 | 	mov	arg05, ##1758
00ebc     00 9C 06 F6 | 	mov	arg06, #0
00ec0     2C 9F 06 F6 | 	mov	arg07, #300
00ec4     0B 00 00 FF 
00ec8     CC 64 06 F1 | 	add	objptr, ##5836
00ecc     B8 34 B2 FD | 	call	#_Audio2_004_spin2_play16
00ed0                 | ' 
00ed0                 | ' base2:=@channel0[0]+64*channel
00ed0     32 BD 02 F6 | 	mov	local12, objptr
00ed4     C0 93 06 F6 | 	mov	arg01, #448
00ed8                 | ' word[base2+32]:=0
00ed8     EC BD 06 F1 | 	add	local12, #492
00edc     5E 01 58 FC | 	wrword	#0, local12
00ee0     0B 00 00 FF 
00ee4     CC 64 86 F1 | 	sub	objptr, ##5836
00ee8                 | LR__0023
00ee8                 | '   if key4=77 then i=127 : do: 															' end
00ee8     4D BE 0E F2 | 	cmp	local13, #77 wz
00eec     90 00 90 5D |  if_ne	jmp	#LR__0028
00ef0     7F C4 06 F6 | 	mov	local16, #127
00ef4                 | LR__0024
00ef4                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00ef4     3E 64 06 F1 | 	add	objptr, #62
00ef8     32 B7 C2 FA | 	rdbyte	local09, objptr
00efc     5B B5 E2 F8 | 	getbyte	local08, local09, #0
00f00     5A B9 02 F6 | 	mov	local10, local08
00f04     07 B8 66 F0 | 	shl	local10, #7
00f08     3A 64 86 F1 | 	sub	objptr, #58
00f0c     32 BB 02 FB | 	rdlong	local11, objptr
00f10     04 64 86 F1 | 	sub	objptr, #4
00f14     5D B3 02 F6 | 	mov	local07, local11
00f18     5C B3 02 F1 | 	add	local07, local10
00f1c     62 B3 02 F1 | 	add	local07, local16
00f20     59 93 02 F6 | 	mov	arg01, local07
00f24     EC FC B1 FD | 	call	#_pspeek
00f28     3D B1 E2 F8 | 	getbyte	local06, result1, #0
00f2c     20 B0 0E F2 | 	cmp	local06, #32 wz
00f30     2C 00 90 AD |  if_e	jmp	#LR__0026
00f34                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00f34     7F C4 56 F2 | 	cmps	local16, #127 wc
00f38     18 00 90 3D |  if_ae	jmp	#LR__0025
00f3c     62 B3 02 F6 | 	mov	local07, local16
00f40     01 B2 66 F0 | 	shl	local07, #1
00f44     59 93 02 F6 | 	mov	arg01, local07
00f48     02 92 06 F1 | 	add	arg01, #2
00f4c     40 17 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f50     2C 00 90 FD | 	jmp	#LR__0027
00f54                 | LR__0025
00f54     FE 92 06 F6 | 	mov	arg01, #254
00f58     34 17 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f5c     20 00 90 FD | 	jmp	#LR__0027
00f60                 | LR__0026
00f60     01 C4 86 F1 | 	sub	local16, #1
00f64     38 00 00 FF 
00f68     D8 65 06 F1 | 	add	objptr, ##29144
00f6c     32 B1 02 FB | 	rdlong	local06, objptr
00f70     38 00 00 FF 
00f74     D8 65 86 F1 | 	sub	objptr, ##29144
00f78     58 C5 0A F2 | 	cmp	local16, local06 wz
00f7c     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00f80                 | LR__0027
00f80                 | LR__0028
00f80                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00f80     38 00 00 FF 
00f84     D8 65 06 F1 | 	add	objptr, ##29144
00f88     32 C1 02 FB | 	rdlong	local14, objptr
00f8c     38 00 00 FF 
00f90     D8 65 86 F1 | 	sub	objptr, ##29144
00f94     60 B1 02 F6 | 	mov	local06, local14
00f98     58 C5 0A F2 | 	cmp	local16, local06 wz
00f9c     2C 00 90 5D |  if_ne	jmp	#LR__0029
00fa0     38 00 00 FF 
00fa4     D8 65 06 F1 | 	add	objptr, ##29144
00fa8     32 B5 02 FB | 	rdlong	local08, objptr
00fac     38 00 00 FF 
00fb0     D8 65 86 F1 | 	sub	objptr, ##29144
00fb4     5A B3 02 F6 | 	mov	local07, local08
00fb8     59 C1 02 F6 | 	mov	local14, local07
00fbc     01 C0 66 F0 | 	shl	local14, #1
00fc0     60 B1 02 F6 | 	mov	local06, local14
00fc4     58 93 02 F6 | 	mov	arg01, local06
00fc8     C4 16 B2 FD | 	call	#_hg010b_spin2_setcursorx
00fcc                 | LR__0029
00fcc                 | '     
00fcc                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00fcc     4A BE 0E F2 | 	cmp	local13, #74 wz
00fd0     2C 00 90 5D |  if_ne	jmp	#LR__0030
00fd4     38 00 00 FF 
00fd8     D8 65 06 F1 | 	add	objptr, ##29144
00fdc     32 B5 02 FB | 	rdlong	local08, objptr
00fe0     38 00 00 FF 
00fe4     D8 65 86 F1 | 	sub	objptr, ##29144
00fe8     5A B3 02 F6 | 	mov	local07, local08
00fec     59 C1 02 F6 | 	mov	local14, local07
00ff0     01 C0 66 F0 | 	shl	local14, #1
00ff4     60 B1 02 F6 | 	mov	local06, local14
00ff8     58 93 02 F6 | 	mov	arg01, local06
00ffc     90 16 B2 FD | 	call	#_hg010b_spin2_setcursorx
01000                 | LR__0030
01000                 | '   if key4=75 then v.setcursory(0)														' pgup
01000     4B BE 0E F2 | 	cmp	local13, #75 wz
01004     00 B0 06 A6 |  if_e	mov	local06, #0
01008     00 92 06 A6 |  if_e	mov	arg01, #0
0100c     B0 16 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
01010                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
01010     4E BE 0E F2 | 	cmp	local13, #78 wz
01014     24 B0 06 A6 |  if_e	mov	local06, #36
01018     24 92 06 A6 |  if_e	mov	arg01, #36
0101c     A0 16 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
01020                 | '   if key4=76 then 																' del
01020     4C BE 0E F2 | 	cmp	local13, #76 wz
01024     AC 01 90 5D |  if_ne	jmp	#LR__0035
01028                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01028     3E 64 06 F1 | 	add	objptr, #62
0102c     32 B3 C2 FA | 	rdbyte	local07, objptr
01030     59 B5 E2 F8 | 	getbyte	local08, local07, #0
01034     07 B4 66 F0 | 	shl	local08, #7
01038     3A 64 86 F1 | 	sub	objptr, #58
0103c     32 D5 02 FB | 	rdlong	local24, objptr
01040     6A C5 02 F6 | 	mov	local16, local24
01044     5A C5 02 F1 | 	add	local16, local08
01048     38 64 06 F1 | 	add	objptr, #56
0104c     32 B9 E2 FA | 	rdword	local10, objptr
01050     5C CF 52 F6 | 	abs	local21, local10 wc
01054     01 CE 46 F0 | 	shr	local21, #1
01058     67 C5 82 F3 | 	sumc	local16, local21
0105c     59 B3 E2 F8 | 	getbyte	local07, local07, #0
01060     07 B2 66 F0 | 	shl	local07, #7
01064     3C 64 86 F1 | 	sub	objptr, #60
01068     59 D5 02 F1 | 	add	local24, local07
0106c     80 D4 06 F1 | 	add	local24, #128
01070                 | LR__0031
01070     6A C5 52 F2 | 	cmps	local16, local24 wc
01074     20 00 90 3D |  if_ae	jmp	#LR__0032
01078     62 93 02 F6 | 	mov	arg01, local16
0107c     01 92 06 F1 | 	add	arg01, #1
01080     90 FB B1 FD | 	call	#_pspeek
01084     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
01088     62 93 02 F6 | 	mov	arg01, local16
0108c     38 FB B1 FD | 	call	#_pspoke
01090     01 C4 06 F1 | 	add	local16, #1
01094     D8 FF 9F FD | 	jmp	#LR__0031
01098                 | LR__0032
01098     3E 64 06 F1 | 	add	objptr, #62
0109c     32 B7 C2 FA | 	rdbyte	local09, objptr
010a0     07 B6 66 F0 | 	shl	local09, #7
010a4     3A 64 86 F1 | 	sub	objptr, #58
010a8     32 93 02 FB | 	rdlong	arg01, objptr
010ac     04 64 86 F1 | 	sub	objptr, #4
010b0     5B 93 02 F1 | 	add	arg01, local09
010b4     7F 92 06 F1 | 	add	arg01, #127
010b8     20 94 06 F6 | 	mov	arg02, #32
010bc     08 FB B1 FD | 	call	#_pspoke
010c0     54 00 00 FF 
010c4     C4 64 06 F1 | 	add	objptr, ##43204
010c8     32 01 68 FC | 	wrlong	#0, objptr
010cc     54 00 00 FF 
010d0     86 64 86 F1 | 	sub	objptr, ##43142
010d4     32 C1 C2 FA | 	rdbyte	local14, objptr
010d8     60 B5 E2 F8 | 	getbyte	local08, local14, #0
010dc     07 B4 66 F0 | 	shl	local08, #7
010e0     3A 64 86 F1 | 	sub	objptr, #58
010e4     32 B7 02 FB | 	rdlong	local09, objptr
010e8     5B C5 02 F6 | 	mov	local16, local09
010ec     5A C5 02 F1 | 	add	local16, local08
010f0     38 64 06 F1 | 	add	objptr, #56
010f4     32 BB E2 FA | 	rdword	local11, objptr
010f8     5D B9 32 F9 | 	getword	local10, local11, #0
010fc     5C CF 52 F6 | 	abs	local21, local10 wc
01100     01 CE 46 F0 | 	shr	local21, #1
01104     67 CF 82 F6 | 	negc	local21, local21
01108     67 C5 02 F1 | 	add	local16, local21
0110c     60 B1 E2 F8 | 	getbyte	local06, local14, #0
01110     58 B3 02 F6 | 	mov	local07, local06
01114     07 B2 66 F0 | 	shl	local07, #7
01118     5B B5 02 F6 | 	mov	local08, local09
0111c     3C 64 86 F1 | 	sub	objptr, #60
01120     5A D7 02 F6 | 	mov	local25, local08
01124     59 D7 02 F1 | 	add	local25, local07
01128     80 D6 06 F1 | 	add	local25, #128
0112c                 | LR__0033
0112c     6B C5 52 F2 | 	cmps	local16, local25 wc
01130     A0 00 90 3D |  if_ae	jmp	#LR__0034
01134     3C 64 06 F1 | 	add	objptr, #60
01138     32 B1 E2 FA | 	rdword	local06, objptr
0113c     54 00 00 FF 
01140     88 64 06 F1 | 	add	objptr, ##43144
01144     32 B5 02 FB | 	rdlong	local08, objptr
01148     01 B4 66 F0 | 	shl	local08, #1
0114c     5A B1 02 F1 | 	add	local06, local08
01150     54 00 00 FF 
01154     86 64 86 F1 | 	sub	objptr, ##43142
01158     32 C1 C2 FA | 	rdbyte	local14, objptr
0115c     3E 64 86 F1 | 	sub	objptr, #62
01160     04 C0 66 F0 | 	shl	local14, #4
01164     04 C0 06 F1 | 	add	local14, #4
01168     62 93 02 F6 | 	mov	arg01, local16
0116c     A4 FA B1 FD | 	call	#_pspeek
01170     3D B3 E2 F8 | 	getbyte	local07, result1, #0
01174     41 64 06 F1 | 	add	objptr, #65
01178     32 B5 02 FB | 	rdlong	local08, objptr
0117c     04 64 06 F1 | 	add	objptr, #4
01180     32 B9 02 FB | 	rdlong	local10, objptr
01184     45 64 86 F1 | 	sub	objptr, #69
01188     5C B7 02 F6 | 	mov	local09, local10
0118c     58 93 02 F6 | 	mov	arg01, local06
01190     60 95 02 F6 | 	mov	arg02, local14
01194     59 97 02 F6 | 	mov	arg03, local07
01198     5A 99 02 F6 | 	mov	arg04, local08
0119c     5B 9B 02 F6 | 	mov	arg05, local09
011a0     00 13 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
011a4     54 00 00 FF 
011a8     C4 64 06 F1 | 	add	objptr, ##43204
011ac     32 B1 02 FB | 	rdlong	local06, objptr
011b0     01 B0 06 F1 | 	add	local06, #1
011b4     32 B1 62 FC | 	wrlong	local06, objptr
011b8     54 00 00 FF 
011bc     C4 64 86 F1 | 	sub	objptr, ##43204
011c0     62 B1 02 F6 | 	mov	local06, local16
011c4     62 C1 02 F6 | 	mov	local14, local16
011c8     01 C0 06 F1 | 	add	local14, #1
011cc     60 C5 02 F6 | 	mov	local16, local14
011d0     58 FF 9F FD | 	jmp	#LR__0033
011d4                 | LR__0034
011d4                 | LR__0035
011d4                 | ' 
011d4                 | '   if key4 = 42 then  'backspace
011d4     2A BE 0E F2 | 	cmp	local13, #42 wz
011d8     14 02 90 5D |  if_ne	jmp	#LR__0041
011dc                 | '     if v.cursor_x>editor_spaces*2 then 
011dc     3C 64 06 F1 | 	add	objptr, #60
011e0     32 C1 E2 FA | 	rdword	local14, objptr
011e4     60 B1 32 F9 | 	getword	local06, local14, #0
011e8     38 00 00 FF 
011ec     9C 65 06 F1 | 	add	objptr, ##29084
011f0     32 B7 02 FB | 	rdlong	local09, objptr
011f4     38 00 00 FF 
011f8     D8 65 86 F1 | 	sub	objptr, ##29144
011fc     5B B5 02 F6 | 	mov	local08, local09
01200     5A B3 02 F6 | 	mov	local07, local08
01204     01 B2 66 F0 | 	shl	local07, #1
01208     59 B1 5A F2 | 	cmps	local06, local07 wcz
0120c     C8 01 90 ED |  if_be	jmp	#LR__0039
01210     3C 64 06 F1 | 	add	objptr, #60
01214     32 93 E2 FA | 	rdword	arg01, objptr
01218     02 92 86 F1 | 	sub	arg01, #2
0121c     02 64 06 F1 | 	add	objptr, #2
01220     32 95 C2 FA | 	rdbyte	arg02, objptr
01224     3E 64 86 F1 | 	sub	objptr, #62
01228     18 14 B2 FD | 	call	#_hg010b_spin2_setcursorpos
0122c                 | '       position v.cursor_x-2,v.cursor_y
0122c                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
0122c     3E 64 06 F1 | 	add	objptr, #62
01230     32 B3 C2 FA | 	rdbyte	local07, objptr
01234     59 B5 E2 F8 | 	getbyte	local08, local07, #0
01238     07 B4 66 F0 | 	shl	local08, #7
0123c     3A 64 86 F1 | 	sub	objptr, #58
01240     32 D9 02 FB | 	rdlong	local26, objptr
01244     6C C5 02 F6 | 	mov	local16, local26
01248     5A C5 02 F1 | 	add	local16, local08
0124c     38 64 06 F1 | 	add	objptr, #56
01250     32 B9 E2 FA | 	rdword	local10, objptr
01254     5C CF 52 F6 | 	abs	local21, local10 wc
01258     01 CE 46 F0 | 	shr	local21, #1
0125c     67 C5 82 F3 | 	sumc	local16, local21
01260     59 B3 E2 F8 | 	getbyte	local07, local07, #0
01264     07 B2 66 F0 | 	shl	local07, #7
01268     3C 64 86 F1 | 	sub	objptr, #60
0126c     59 D9 02 F1 | 	add	local26, local07
01270     80 D8 06 F1 | 	add	local26, #128
01274                 | LR__0036
01274     6C C5 52 F2 | 	cmps	local16, local26 wc
01278     20 00 90 3D |  if_ae	jmp	#LR__0037
0127c     62 93 02 F6 | 	mov	arg01, local16
01280     01 92 06 F1 | 	add	arg01, #1
01284     8C F9 B1 FD | 	call	#_pspeek
01288     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
0128c     62 93 02 F6 | 	mov	arg01, local16
01290     34 F9 B1 FD | 	call	#_pspoke
01294     01 C4 06 F1 | 	add	local16, #1
01298     D8 FF 9F FD | 	jmp	#LR__0036
0129c                 | LR__0037
0129c     3E 64 06 F1 | 	add	objptr, #62
012a0     32 B7 C2 FA | 	rdbyte	local09, objptr
012a4     07 B6 66 F0 | 	shl	local09, #7
012a8     3A 64 86 F1 | 	sub	objptr, #58
012ac     32 93 02 FB | 	rdlong	arg01, objptr
012b0     04 64 86 F1 | 	sub	objptr, #4
012b4     5B 93 02 F1 | 	add	arg01, local09
012b8     7F 92 06 F1 | 	add	arg01, #127
012bc     20 94 06 F6 | 	mov	arg02, #32
012c0     04 F9 B1 FD | 	call	#_pspoke
012c4     54 00 00 FF 
012c8     C4 64 06 F1 | 	add	objptr, ##43204
012cc     32 01 68 FC | 	wrlong	#0, objptr
012d0     54 00 00 FF 
012d4     86 64 86 F1 | 	sub	objptr, ##43142
012d8     32 C1 C2 FA | 	rdbyte	local14, objptr
012dc     60 B5 E2 F8 | 	getbyte	local08, local14, #0
012e0     07 B4 66 F0 | 	shl	local08, #7
012e4     3A 64 86 F1 | 	sub	objptr, #58
012e8     32 B7 02 FB | 	rdlong	local09, objptr
012ec     5B C5 02 F6 | 	mov	local16, local09
012f0     5A C5 02 F1 | 	add	local16, local08
012f4     38 64 06 F1 | 	add	objptr, #56
012f8     32 BB E2 FA | 	rdword	local11, objptr
012fc     5D B9 32 F9 | 	getword	local10, local11, #0
01300     5C CF 52 F6 | 	abs	local21, local10 wc
01304     01 CE 46 F0 | 	shr	local21, #1
01308     67 CF 82 F6 | 	negc	local21, local21
0130c     67 C5 02 F1 | 	add	local16, local21
01310     60 B1 E2 F8 | 	getbyte	local06, local14, #0
01314     58 B3 02 F6 | 	mov	local07, local06
01318     07 B2 66 F0 | 	shl	local07, #7
0131c     5B B5 02 F6 | 	mov	local08, local09
01320     3C 64 86 F1 | 	sub	objptr, #60
01324     5A DB 02 F6 | 	mov	local27, local08
01328     59 DB 02 F1 | 	add	local27, local07
0132c     80 DA 06 F1 | 	add	local27, #128
01330                 | LR__0038
01330     6D C5 52 F2 | 	cmps	local16, local27 wc
01334     B8 00 90 3D |  if_ae	jmp	#LR__0040
01338     3C 64 06 F1 | 	add	objptr, #60
0133c     32 B1 E2 FA | 	rdword	local06, objptr
01340     54 00 00 FF 
01344     88 64 06 F1 | 	add	objptr, ##43144
01348     32 B5 02 FB | 	rdlong	local08, objptr
0134c     01 B4 66 F0 | 	shl	local08, #1
01350     5A B1 02 F1 | 	add	local06, local08
01354     54 00 00 FF 
01358     86 64 86 F1 | 	sub	objptr, ##43142
0135c     32 C1 C2 FA | 	rdbyte	local14, objptr
01360     3E 64 86 F1 | 	sub	objptr, #62
01364     04 C0 66 F0 | 	shl	local14, #4
01368     04 C0 06 F1 | 	add	local14, #4
0136c     62 93 02 F6 | 	mov	arg01, local16
01370     A0 F8 B1 FD | 	call	#_pspeek
01374     3D B3 E2 F8 | 	getbyte	local07, result1, #0
01378     41 64 06 F1 | 	add	objptr, #65
0137c     32 B5 02 FB | 	rdlong	local08, objptr
01380     04 64 06 F1 | 	add	objptr, #4
01384     32 B9 02 FB | 	rdlong	local10, objptr
01388     45 64 86 F1 | 	sub	objptr, #69
0138c     5C B7 02 F6 | 	mov	local09, local10
01390     58 93 02 F6 | 	mov	arg01, local06
01394     60 95 02 F6 | 	mov	arg02, local14
01398     59 97 02 F6 | 	mov	arg03, local07
0139c     5A 99 02 F6 | 	mov	arg04, local08
013a0     5B 9B 02 F6 | 	mov	arg05, local09
013a4     FC 10 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
013a8     54 00 00 FF 
013ac     C4 64 06 F1 | 	add	objptr, ##43204
013b0     32 B1 02 FB | 	rdlong	local06, objptr
013b4     01 B0 06 F1 | 	add	local06, #1
013b8     32 B1 62 FC | 	wrlong	local06, objptr
013bc     54 00 00 FF 
013c0     C4 64 86 F1 | 	sub	objptr, ##43204
013c4     62 B1 02 F6 | 	mov	local06, local16
013c8     62 C1 02 F6 | 	mov	local14, local16
013cc     01 C0 06 F1 | 	add	local14, #1
013d0     60 C5 02 F6 | 	mov	local16, local14
013d4     58 FF 9F FD | 	jmp	#LR__0038
013d8                 | LR__0039
013d8     91 01 00 FF 
013dc     FB D2 06 F6 | 	mov	local23, ##@LR__5478
013e0     04 B0 06 F6 | 	mov	local06, #4
013e4     3C 64 06 F1 | 	add	objptr, #60
013e8     32 09 58 FC | 	wrword	#4, objptr
013ec     3C 64 86 F1 | 	sub	objptr, #60
013f0                 | LR__0040
013f0                 | LR__0041
013f0                 | ' 
013f0                 | '   if key4=82 then 						' arrow up
013f0     52 BE 0E F2 | 	cmp	local13, #82 wz
013f4     58 00 90 5D |  if_ne	jmp	#LR__0042
013f8                 | ' return cursor_y
013f8     3E 64 06 F1 | 	add	objptr, #62
013fc     32 7B C2 FA | 	rdbyte	result1, objptr
01400     01 7A 86 F1 | 	sub	result1, #1
01404     54 00 00 FF 
01408     6A 64 06 F1 | 	add	objptr, ##43114
0140c     32 7B 62 FC | 	wrlong	result1, objptr
01410                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
01410     54 00 00 FF 
01414     A8 64 86 F1 | 	sub	objptr, ##43176
01418     00 7A 56 F2 | 	cmps	result1, #0 wc
0141c     54 00 00 CF 
01420     A8 64 06 C1 |  if_b	add	objptr, ##43176
01424     32 01 68 CC |  if_b	wrlong	#0, objptr
01428     54 00 00 CF 
0142c     A8 64 86 C1 |  if_b	sub	objptr, ##43176
01430     54 00 00 FF 
01434     A8 64 06 F1 | 	add	objptr, ##43176
01438     32 C1 02 FB | 	rdlong	local14, objptr
0143c     54 00 00 FF 
01440     A8 64 86 F1 | 	sub	objptr, ##43176
01444     60 B1 02 F6 | 	mov	local06, local14
01448     58 93 02 F6 | 	mov	arg01, local06
0144c     70 12 B2 FD | 	call	#_hg010b_spin2_setcursory
01450                 | LR__0042
01450                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
01450     51 BE 0E F2 | 	cmp	local13, #81 wz
01454     58 00 90 5D |  if_ne	jmp	#LR__0043
01458                 | ' return cursor_y
01458     3E 64 06 F1 | 	add	objptr, #62
0145c     32 7B C2 FA | 	rdbyte	result1, objptr
01460     01 7A 06 F1 | 	add	result1, #1
01464     54 00 00 FF 
01468     6A 64 06 F1 | 	add	objptr, ##43114
0146c     32 7B 62 FC | 	wrlong	result1, objptr
01470                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
01470     54 00 00 FF 
01474     A8 64 86 F1 | 	sub	objptr, ##43176
01478     25 7A 56 F2 | 	cmps	result1, #37 wc
0147c     54 00 00 3F 
01480     A8 64 06 31 |  if_ae	add	objptr, ##43176
01484     32 49 68 3C |  if_ae	wrlong	#36, objptr
01488     54 00 00 3F 
0148c     A8 64 86 31 |  if_ae	sub	objptr, ##43176
01490     54 00 00 FF 
01494     A8 64 06 F1 | 	add	objptr, ##43176
01498     32 C1 02 FB | 	rdlong	local14, objptr
0149c     54 00 00 FF 
014a0     A8 64 86 F1 | 	sub	objptr, ##43176
014a4     60 B1 02 F6 | 	mov	local06, local14
014a8     58 93 02 F6 | 	mov	arg01, local06
014ac     10 12 B2 FD | 	call	#_hg010b_spin2_setcursory
014b0                 | LR__0043
014b0                 | '   if key4=80 then
014b0     50 BE 0E F2 | 	cmp	local13, #80 wz
014b4     74 00 90 5D |  if_ne	jmp	#LR__0044
014b8                 | ' return cursor_x
014b8     3C 64 06 F1 | 	add	objptr, #60
014bc     32 B1 E2 FA | 	rdword	local06, objptr
014c0     02 B0 86 F1 | 	sub	local06, #2
014c4     54 00 00 FF 
014c8     70 64 06 F1 | 	add	objptr, ##43120
014cc     32 B1 62 FC | 	wrlong	local06, objptr
014d0                 | '     cx=v.getcursorx()-2 					' arrow left
014d0                 | '     if cx<editor_spaces then cx=editor_spaces			
014d0     1B 00 00 FF 
014d4     D4 64 86 F1 | 	sub	objptr, ##14036
014d8     32 B5 02 FB | 	rdlong	local08, objptr
014dc     38 00 00 FF 
014e0     D8 65 86 F1 | 	sub	objptr, ##29144
014e4     5A B3 02 F6 | 	mov	local07, local08
014e8     59 B1 52 F2 | 	cmps	local06, local07 wc
014ec     38 00 00 CF 
014f0     D8 65 06 C1 |  if_b	add	objptr, ##29144
014f4     32 B1 02 CB |  if_b	rdlong	local06, objptr
014f8     1B 00 00 CF 
014fc     D4 64 06 C1 |  if_b	add	objptr, ##14036
01500     32 B1 62 CC |  if_b	wrlong	local06, objptr
01504     54 00 00 CF 
01508     AC 64 86 C1 |  if_b	sub	objptr, ##43180
0150c     54 00 00 FF 
01510     AC 64 06 F1 | 	add	objptr, ##43180
01514     32 C1 02 FB | 	rdlong	local14, objptr
01518     54 00 00 FF 
0151c     AC 64 86 F1 | 	sub	objptr, ##43180
01520     60 B1 02 F6 | 	mov	local06, local14
01524     58 93 02 F6 | 	mov	arg01, local06
01528     64 11 B2 FD | 	call	#_hg010b_spin2_setcursorx
0152c                 | LR__0044
0152c                 | '   if key4=79 then						' arrow right
0152c     4F BE 0E F2 | 	cmp	local13, #79 wz
01530     54 00 90 5D |  if_ne	jmp	#LR__0045
01534                 | ' return cursor_x
01534     3C 64 06 F1 | 	add	objptr, #60
01538     32 7B E2 FA | 	rdword	result1, objptr
0153c     02 7A 06 F1 | 	add	result1, #2
01540     54 00 00 FF 
01544     70 64 06 F1 | 	add	objptr, ##43120
01548     32 7B 62 FC | 	wrlong	result1, objptr
0154c                 | '     cx=v.getcursorx()+2 
0154c                 | '     if cx>254  then cx=254 
0154c     54 00 00 FF 
01550     AC 64 86 F1 | 	sub	objptr, ##43180
01554     FF 7A 56 F2 | 	cmps	result1, #255 wc
01558     54 00 00 3F 
0155c     AC 64 06 31 |  if_ae	add	objptr, ##43180
01560     32 FD 69 3C |  if_ae	wrlong	#254, objptr
01564     54 00 00 3F 
01568     AC 64 86 31 |  if_ae	sub	objptr, ##43180
0156c     54 00 00 FF 
01570     AC 64 06 F1 | 	add	objptr, ##43180
01574     32 B1 02 FB | 	rdlong	local06, objptr
01578     54 00 00 FF 
0157c     AC 64 86 F1 | 	sub	objptr, ##43180
01580     58 93 02 F6 | 	mov	arg01, local06
01584     08 11 B2 FD | 	call	#_hg010b_spin2_setcursorx
01588                 | LR__0045
01588                 | ' 
01588                 | '   if key4=73 then 						' ins
01588     49 BE 0E F2 | 	cmp	local13, #73 wz
0158c     40 00 90 5D |  if_ne	jmp	#LR__0048
01590     54 00 00 FF 
01594     A4 64 06 F1 | 	add	objptr, ##43172
01598     32 B1 02 FB | 	rdlong	local06, objptr
0159c     58 C1 22 F6 | 	not	local14, local06
015a0     32 C1 62 FC | 	wrlong	local14, objptr
015a4                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
015a4     54 00 00 FF 
015a8     A4 64 86 F1 | 	sub	objptr, ##43172
015ac     00 C0 0E F2 | 	cmp	local14, #0 wz
015b0     10 00 90 AD |  if_e	jmp	#LR__0046
015b4     0E B0 06 F6 | 	mov	local06, #14
015b8     0E 92 06 F6 | 	mov	arg01, #14
015bc     28 FF B1 FD | 	call	#_hg010b_spin2_setcursorshape
015c0     0C 00 90 FD | 	jmp	#LR__0047
015c4                 | LR__0046
015c4     00 B0 06 F6 | 	mov	local06, #0
015c8     00 92 06 F6 | 	mov	arg01, #0
015cc     18 FF B1 FD | 	call	#_hg010b_spin2_setcursorshape
015d0                 | LR__0047
015d0                 | LR__0048
015d0     00 AC 06 F6 | 	mov	local04, #0
015d4     44 F3 9F FD | 	jmp	#LR__0001
015d8                 | LR__0049
015d8     E7 F0 03 F6 | 	mov	ptra, fp
015dc     F2 00 A0 FD | 	call	#popregs_
015e0                 | _edit_ret
015e0     2D 00 64 FD | 	ret
015e4                 | 
015e4                 | ' 
015e4                 | ' ''-----------------------------------------------------------------------------------------------------------
015e4                 | ' ' 					A housekeepeer.
015e4                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
015e4                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
015e4                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
015e4                 | ' ''-----------------------------------------------------------------------------------------------------------
015e4                 | ' 
015e4                 | ' sub housekeeper
015e4                 | _housekeeper
015e4                 | ' 
015e4                 | ' do
015e4                 | LR__0050
015e4                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
015e4     49 64 06 F1 | 	add	objptr, #73
015e8                 | LR__0051
015e8     32 93 02 FB | 	rdlong	arg01, objptr
015ec     01 92 0E F2 | 	cmp	arg01, #1 wz
015f0     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
015f4     54 00 00 FF 
015f8     27 64 06 F1 | 	add	objptr, ##43047
015fc     32 93 02 FB | 	rdlong	arg01, objptr
01600     01 92 06 F1 | 	add	arg01, #1
01604     32 93 62 FC | 	wrlong	arg01, objptr
01608     54 00 00 FF 
0160c     70 64 86 F1 | 	sub	objptr, ##43120
01610     80 00 B0 FD | 	call	#_gethdi
01614     05 92 06 F6 | 	mov	arg01, #5
01618     68 34 B2 FD | 	call	#__system___waitms
0161c     54 00 00 FF 
01620     70 64 06 F1 | 	add	objptr, ##43120
01624     32 93 02 FB | 	rdlong	arg01, objptr
01628     01 92 06 F1 | 	add	arg01, #1
0162c     32 93 62 FC | 	wrlong	arg01, objptr
01630     54 00 00 FF 
01634     70 64 86 F1 | 	sub	objptr, ##43120
01638     58 00 B0 FD | 	call	#_gethdi
0163c     05 92 06 F6 | 	mov	arg01, #5
01640     40 34 B2 FD | 	call	#__system___waitms
01644     54 00 00 FF 
01648     70 64 06 F1 | 	add	objptr, ##43120
0164c     32 93 02 FB | 	rdlong	arg01, objptr
01650     01 92 06 F1 | 	add	arg01, #1
01654     32 93 62 FC | 	wrlong	arg01, objptr
01658     54 00 00 FF 
0165c     70 64 86 F1 | 	sub	objptr, ##43120
01660     30 00 B0 FD | 	call	#_gethdi
01664     05 92 06 F6 | 	mov	arg01, #5
01668     18 34 B2 FD | 	call	#__system___waitms
0166c     54 00 00 FF 
01670     70 64 06 F1 | 	add	objptr, ##43120
01674     32 93 02 FB | 	rdlong	arg01, objptr
01678     01 92 06 F1 | 	add	arg01, #1
0167c     32 93 62 FC | 	wrlong	arg01, objptr
01680     54 00 00 FF 
01684     70 64 86 F1 | 	sub	objptr, ##43120
01688     08 00 B0 FD | 	call	#_gethdi
0168c     54 FF 9F FD | 	jmp	#LR__0050
01690                 | _housekeeper_ret
01690     2D 00 64 FD | 	ret
01694                 | 
01694                 | ' 
01694                 | ' '----------------------------------------------------------------------------------------------------------
01694                 | ' ' gethdi is called from the houseekeeper to read HDI related values
01694                 | ' '----------------------------------------------------------------------------------------------------------
01694                 | ' 
01694                 | ' sub gethdi
01694                 | _gethdi
01694     0A CA 05 F6 | 	mov	COUNT_, #10
01698     E8 00 A0 FD | 	call	#pushregs_
0169c                 | '   x := mouse_xacc
0169c     14 00 00 FF 
016a0     E1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
016a4     3B 95 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
016a8                 | '   y := mouse_yacc
016a8     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
016ac     3B 93 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
016b0     53 00 00 FF 
016b4     EC 64 06 F1 | 	add	objptr, ##42732
016b8     32 95 62 FC | 	wrlong	arg02, objptr
016bc     04 64 06 F1 | 	add	objptr, #4
016c0     32 93 62 FC | 	wrlong	arg01, objptr
016c4                 | '   x := 0
016c4                 | '   y := mouse_zacc
016c4     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
016c8     3B 7B 02 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
016cc     08 64 06 F1 | 	add	objptr, #8
016d0     32 7B 62 FC | 	wrlong	result1, objptr
016d4                 | '   return mouse_bstate
016d4     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
016d8     3B 7B C2 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
016dc     14 00 00 FF 
016e0     ED 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10477
016e4     04 64 86 F1 | 	sub	objptr, #4
016e8     32 7B 62 FC | 	wrlong	result1, objptr
016ec     53 00 00 FF 
016f0     F4 64 86 F1 | 	sub	objptr, ##42740
016f4     00 A6 06 F6 | 	mov	local01, #0
016f8                 | ' 
016f8                 | ' mousex,mousey=kbm.mouse_xy()
016f8                 | ' dummy,mousew=kbm.mouse_scroll()
016f8                 | ' mousek=kbm.mouse_buttons()
016f8                 | ' i=0
016f8                 | ' for j=0 to 6
016f8     00 A8 06 F6 | 	mov	local02, #0
016fc                 | LR__0060
016fc                 | '   if kbm.hidpad_id(j)>0 then
016fc     54 93 02 F6 | 	mov	arg01, local02
01700                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
01700     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
01704     13 00 00 FF 
01708     F8 7B 06 F1 | 	add	result1, ##10232
0170c     05 92 66 F0 | 	shl	arg01, #5
01710     49 7B 02 F1 | 	add	result1, arg01
01714     3D 7B 02 FB | 	rdlong	result1, result1
01718     01 7A 56 F2 | 	cmps	result1, #1 wc
0171c     C8 01 90 CD |  if_b	jmp	#LR__0061
01720     54 93 02 F6 | 	mov	arg01, local02
01724     00 94 06 F6 | 	mov	arg02, #0
01728     54 25 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0172c     3D AB 02 F6 | 	mov	local03, result1
01730     54 93 02 F6 | 	mov	arg01, local02
01734     01 94 06 F6 | 	mov	arg02, #1
01738     44 25 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0173c     3D AD 02 F6 | 	mov	local04, result1
01740     54 93 02 F6 | 	mov	arg01, local02
01744     02 94 06 F6 | 	mov	arg02, #2
01748     34 25 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0174c     3D AF 02 F6 | 	mov	local05, result1
01750     54 93 02 F6 | 	mov	arg01, local02
01754     00 94 06 F6 | 	mov	arg02, #0
01758     60 25 B2 FD | 	call	#_usbnew_spin2_hidpad_hat
0175c     3D B1 02 F6 | 	mov	local06, result1
01760     54 93 02 F6 | 	mov	arg01, local02
01764     03 94 06 F6 | 	mov	arg02, #3
01768     14 25 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0176c     3D B3 02 F6 | 	mov	local07, result1
01770     54 93 02 F6 | 	mov	arg01, local02
01774     04 94 06 F6 | 	mov	arg02, #4
01778     04 25 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0177c     3D B5 02 F6 | 	mov	local08, result1
01780     54 93 02 F6 | 	mov	arg01, local02
01784     05 94 06 F6 | 	mov	arg02, #5
01788     F4 24 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0178c     3D B7 02 F6 | 	mov	local09, result1
01790     54 93 02 F6 | 	mov	arg01, local02
01794     06 94 06 F6 | 	mov	arg02, #6
01798     E4 24 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
0179c     3D B9 02 F6 | 	mov	local10, result1
017a0     54 93 02 F6 | 	mov	arg01, local02
017a4     07 94 06 F6 | 	mov	arg02, #7
017a8     D4 24 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
017ac     53 93 02 F6 | 	mov	arg01, local01
017b0     02 92 66 F0 | 	shl	arg01, #2
017b4     53 00 00 FF 
017b8     FC 64 06 F1 | 	add	objptr, ##42748
017bc     32 93 02 F1 | 	add	arg01, objptr
017c0     49 AB 62 FC | 	wrlong	local03, arg01
017c4     53 93 02 F6 | 	mov	arg01, local01
017c8     02 92 66 F0 | 	shl	arg01, #2
017cc     1C 64 06 F1 | 	add	objptr, #28
017d0     32 93 02 F1 | 	add	arg01, objptr
017d4     49 AD 62 FC | 	wrlong	local04, arg01
017d8     53 93 02 F6 | 	mov	arg01, local01
017dc     02 92 66 F0 | 	shl	arg01, #2
017e0     1C 64 06 F1 | 	add	objptr, #28
017e4     32 93 02 F1 | 	add	arg01, objptr
017e8     49 AF 62 FC | 	wrlong	local05, arg01
017ec     53 AF 02 F6 | 	mov	local05, local01
017f0     02 AE 66 F0 | 	shl	local05, #2
017f4     1C 64 06 F1 | 	add	objptr, #28
017f8     32 AF 02 F1 | 	add	local05, objptr
017fc     57 B1 62 FC | 	wrlong	local06, local05
01800     53 B1 02 F6 | 	mov	local06, local01
01804     02 B0 66 F0 | 	shl	local06, #2
01808     1C 64 06 F1 | 	add	objptr, #28
0180c     32 B1 02 F1 | 	add	local06, objptr
01810     58 B3 62 FC | 	wrlong	local07, local06
01814     53 B3 02 F6 | 	mov	local07, local01
01818     02 B2 66 F0 | 	shl	local07, #2
0181c     1C 64 06 F1 | 	add	objptr, #28
01820     32 B3 02 F1 | 	add	local07, objptr
01824     59 B5 62 FC | 	wrlong	local08, local07
01828     53 B5 02 F6 | 	mov	local08, local01
0182c     02 B4 66 F0 | 	shl	local08, #2
01830     1C 64 06 F1 | 	add	objptr, #28
01834     32 B5 02 F1 | 	add	local08, objptr
01838     5A B7 62 FC | 	wrlong	local09, local08
0183c     53 B7 02 F6 | 	mov	local09, local01
01840     02 B6 66 F0 | 	shl	local09, #2
01844     1C 64 06 F1 | 	add	objptr, #28
01848     32 B7 02 F1 | 	add	local09, objptr
0184c     5B B9 62 FC | 	wrlong	local10, local09
01850     53 B9 02 F6 | 	mov	local10, local01
01854     02 B8 66 F0 | 	shl	local10, #2
01858     1C 64 06 F1 | 	add	objptr, #28
0185c     32 B9 02 F1 | 	add	local10, objptr
01860     5C 7B 62 FC | 	wrlong	result1, local10
01864     60 00 00 FF 
01868     00 AA 06 F1 | 	add	local03, ##49152
0186c     0F AA 46 F0 | 	shr	local03, #15
01870     01 B8 06 F6 | 	mov	local10, #1
01874     55 B9 02 F1 | 	add	local10, local03
01878     60 00 00 FF 
0187c     00 AC 06 F1 | 	add	local04, ##49152
01880     0F AC 46 F0 | 	shr	local04, #15
01884     01 B6 06 F6 | 	mov	local09, #1
01888     56 B7 02 F1 | 	add	local09, local04
0188c     53 B5 02 F6 | 	mov	local08, local01
01890     02 B4 66 F0 | 	shl	local08, #2
01894     1C 64 06 F1 | 	add	objptr, #28
01898     32 B5 02 F1 | 	add	local08, objptr
0189c     02 B6 66 F0 | 	shl	local09, #2
018a0     5B B9 02 F1 | 	add	local10, local09
018a4     5A B9 62 FC | 	wrlong	local10, local08
018a8     53 B9 02 F6 | 	mov	local10, local01
018ac     02 B8 66 F0 | 	shl	local10, #2
018b0     1C 64 06 F1 | 	add	objptr, #28
018b4     32 B9 02 F1 | 	add	local10, objptr
018b8     54 93 02 F6 | 	mov	arg01, local02
018bc     54 00 00 FF 
018c0     14 64 86 F1 | 	sub	objptr, ##43028
018c4                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6]
018c4     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
018c8     13 00 00 FF 
018cc     F8 7B 06 F1 | 	add	result1, ##10232
018d0     05 92 66 F0 | 	shl	arg01, #5
018d4     49 7B 02 F1 | 	add	result1, arg01
018d8     18 7A 06 F1 | 	add	result1, #24
018dc     3D 7B 02 FB | 	rdlong	result1, result1
018e0     5C 7B 62 FC | 	wrlong	result1, local10
018e4     01 A6 06 F1 | 	add	local01, #1
018e8                 | LR__0061
018e8     01 A8 06 F1 | 	add	local02, #1
018ec     07 A8 16 F2 | 	cmp	local02, #7 wc
018f0     08 FE 9F CD |  if_b	jmp	#LR__0060
018f4     D7 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
018f8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
018f8                 | LR__0062
018f8     07 A6 16 F2 | 	cmp	local01, #7 wc
018fc     3C 00 90 3D |  if_ae	jmp	#LR__0064
01900     53 B9 02 F6 | 	mov	local10, local01
01904     02 B8 66 F0 | 	shl	local10, #2
01908     53 00 00 FF 
0190c     F8 65 06 F1 | 	add	objptr, ##43000
01910     32 B9 02 F1 | 	add	local10, objptr
01914     5C 01 68 FC | 	wrlong	#0, local10
01918     53 B9 02 F6 | 	mov	local10, local01
0191c     02 B8 66 F0 | 	shl	local10, #2
01920     1C 64 06 F1 | 	add	objptr, #28
01924     32 B9 02 F1 | 	add	local10, objptr
01928     5C 01 68 FC | 	wrlong	#0, local10
0192c     01 A6 06 F1 | 	add	local01, #1
01930     54 00 00 FF 
01934     14 64 86 F1 | 	sub	objptr, ##43028
01938     BC FF 9F FD | 	jmp	#LR__0062
0193c                 | LR__0063
0193c                 | LR__0064
0193c     E7 F0 03 F6 | 	mov	ptra, fp
01940     F2 00 A0 FD | 	call	#popregs_
01944                 | _gethdi_ret
01944     2D 00 64 FD | 	ret
01948                 | 
01948                 | ' 
01948                 | ' '-------------------------------------------------------------------------------------------------------------
01948                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01948                 | ' '-------------------------------------------------------------------------------------------------------------
01948                 | ' 
01948                 | ' '-------------------------------------------------------------------------------------------------------------
01948                 | ' '
01948                 | ' '                                     LINE INTERPRETER/TOKENIZER
01948                 | ' '
01948                 | ' '-------------------------------------------------------------------------------------------------------------
01948                 | ' 
01948                 | ' 
01948                 | ' sub interpret
01948                 | _interpret
01948     34 CA 05 F6 | 	mov	COUNT_, #52
0194c     E8 00 A0 FD | 	call	#pushregs_
01950     01 00 00 FF 
01954     80 F0 07 F1 | 	add	ptra, ##640
01958     38 00 00 FF 
0195c     C0 65 06 F1 | 	add	objptr, ##29120
01960     32 93 02 FB | 	rdlong	arg01, objptr
01964     38 00 00 FF 
01968     C0 65 86 F1 | 	sub	objptr, ##29120
0196c     58 4B B2 FD | 	call	#__system__RTrim_S
01970     3D 93 02 F6 | 	mov	arg01, result1
01974     90 4A B2 FD | 	call	#__system__LTrim_S
01978     38 00 00 FF 
0197c     C4 65 06 F1 | 	add	objptr, ##29124
01980     32 7B 62 FC | 	wrlong	result1, objptr
01984     04 64 06 F1 | 	add	objptr, #4
01988     FF FF FF FF 
0198c     32 FF 6B FC | 	wrlong	##-1, objptr
01990     1B 00 00 FF 
01994     C4 64 06 F1 | 	add	objptr, ##14020
01998     32 01 68 FC | 	wrlong	#0, objptr
0199c     08 00 00 FF 
019a0     6C 64 86 F1 | 	sub	objptr, ##4204
019a4     32 01 68 FC | 	wrlong	#0, objptr
019a8     4C 00 00 FF 
019ac     20 64 86 F1 | 	sub	objptr, ##38944
019b0     00 A6 06 F6 | 	mov	local01, #0
019b4                 | LR__0070
019b4                 | ' 
019b4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
019b4                 | ' 
019b4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
019b4                 | ' 
019b4                 | ' 108 
019b4                 | ' for i=0 to 125: separators(i)=0 :next i
019b4     00 A8 06 F6 | 	mov	local02, #0
019b8     38 CE 05 F1 | 	add	fp, #56
019bc     D7 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
019c0                 | LR__0071
019c0     54 AB 02 F6 | 	mov	local03, local02
019c4     02 AA 66 F0 | 	shl	local03, #2
019c8     E7 AA 02 F1 | 	add	local03, fp
019cc     55 01 68 FC | 	wrlong	#0, local03
019d0     01 A8 06 F1 | 	add	local02, #1
019d4     7E A8 56 F2 | 	cmps	local02, #126 wc
019d8     E4 FF 9F CD |  if_b	jmp	#LR__0071
019dc                 | LR__0072
019dc     38 CE 85 F1 | 	sub	fp, #56
019e0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
019e0     00 A8 06 F6 | 	mov	local02, #0
019e4     36 00 00 FF 
019e8     B0 65 06 F1 | 	add	objptr, ##28080
019ec     D7 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
019f0                 | LR__0073
019f0     54 AD 02 F6 | 	mov	local04, local02
019f4     03 AC 66 F0 | 	shl	local04, #3
019f8     32 AD 02 F1 | 	add	local04, objptr
019fc     91 01 00 FF 
01a00     FC 96 06 F6 | 	mov	arg03, ##@LR__5479
01a04     56 97 62 FC | 	wrlong	arg03, local04
01a08     54 AD 02 F6 | 	mov	local04, local02
01a0c     03 AC 66 F0 | 	shl	local04, #3
01a10     32 AF 02 F6 | 	mov	local05, objptr
01a14     32 AD 02 F1 | 	add	local04, objptr
01a18     00 B0 06 F6 | 	mov	local06, #0
01a1c     04 AC 06 F1 | 	add	local04, #4
01a20     56 01 68 FC | 	wrlong	#0, local04
01a24     01 A8 06 F1 | 	add	local02, #1
01a28     7E A8 56 F2 | 	cmps	local02, #126 wc
01a2c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01a30                 | LR__0074
01a30     02 00 00 FF 
01a34     10 64 06 F1 | 	add	objptr, ##1040
01a38     32 93 02 FB | 	rdlong	arg01, objptr
01a3c     38 00 00 FF 
01a40     C0 65 86 F1 | 	sub	objptr, ##29120
01a44     80 4A B2 FD | 	call	#__system__RTrim_S
01a48     3D 93 02 F6 | 	mov	arg01, result1
01a4c     B8 49 B2 FD | 	call	#__system__LTrim_S
01a50     38 00 00 FF 
01a54     C0 65 06 F1 | 	add	objptr, ##29120
01a58     32 7B 62 FC | 	wrlong	result1, objptr
01a5c     91 01 00 FF 
01a60     FD AC 06 F6 | 	mov	local04, ##@LR__5480
01a64     1B 00 00 FF 
01a68     08 65 06 F1 | 	add	objptr, ##14088
01a6c     32 AD 62 FC | 	wrlong	local04, objptr
01a70     1B 00 00 FF 
01a74     08 65 86 F1 | 	sub	objptr, ##14088
01a78     32 93 02 FB | 	rdlong	arg01, objptr
01a7c     38 00 00 FF 
01a80     C0 65 86 F1 | 	sub	objptr, ##29120
01a84     49 B3 02 F6 | 	mov	local07, arg01
01a88     D7 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
01a8c                 | LR__0075
01a8c     59 7B CA FA | 	rdbyte	result1, local07 wz
01a90     01 B2 06 51 |  if_ne	add	local07, #1
01a94     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01a98                 | LR__0076
01a98     49 B3 8A F1 | 	sub	local07, arg01 wz
01a9c     54 00 00 FF 
01aa0     CC 64 06 F1 | 	add	objptr, ##43212
01aa4     32 B3 62 FC | 	wrlong	local07, objptr
01aa8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
01aa8     54 00 00 FF 
01aac     CC 64 86 F1 | 	sub	objptr, ##43212
01ab0     E4 28 90 AD |  if_e	jmp	#LR__0210
01ab4     00 B4 06 F6 | 	mov	local08, #0
01ab8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
01ab8                 | ' for i=1 to len(line$)
01ab8     01 A8 06 F6 | 	mov	local02, #1
01abc     38 00 00 FF 
01ac0     C0 65 06 F1 | 	add	objptr, ##29120
01ac4     32 93 02 FB | 	rdlong	arg01, objptr
01ac8     38 00 00 FF 
01acc     C0 65 86 F1 | 	sub	objptr, ##29120
01ad0     49 B3 02 F6 | 	mov	local07, arg01
01ad4     D7 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
01ad8                 | LR__0077
01ad8     59 7B CA FA | 	rdbyte	result1, local07 wz
01adc     01 B2 06 51 |  if_ne	add	local07, #1
01ae0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
01ae4                 | LR__0078
01ae4     49 B3 82 F1 | 	sub	local07, arg01
01ae8     59 B7 02 F6 | 	mov	local09, local07
01aec     01 B6 06 F1 | 	add	local09, #1
01af0                 | LR__0079
01af0     5B A9 52 F2 | 	cmps	local02, local09 wc
01af4     A4 00 90 3D |  if_ae	jmp	#LR__0081
01af8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
01af8     38 00 00 FF 
01afc     C0 65 06 F1 | 	add	objptr, ##29120
01b00     32 93 02 FB | 	rdlong	arg01, objptr
01b04     38 00 00 FF 
01b08     C0 65 86 F1 | 	sub	objptr, ##29120
01b0c     54 95 02 F6 | 	mov	arg02, local02
01b10     01 96 06 F6 | 	mov	arg03, #1
01b14     38 46 B2 FD | 	call	#__system__Mid_S
01b18     3D 93 02 F6 | 	mov	arg01, result1
01b1c     91 01 00 FF 
01b20     FE 94 06 F6 | 	mov	arg02, ##@LR__5481
01b24     90 2C B2 FD | 	call	#__system___string_cmp
01b28     00 7A 0E F2 | 	cmp	result1, #0 wz
01b2c     00 B4 0E A2 |  if_e	cmp	local08, #0 wz
01b30     01 B4 06 A6 |  if_e	mov	local08, #1
01b34     3C 00 90 AD |  if_e	jmp	#LR__0080
01b38     38 00 00 FF 
01b3c     C0 65 06 F1 | 	add	objptr, ##29120
01b40     32 93 02 FB | 	rdlong	arg01, objptr
01b44     38 00 00 FF 
01b48     C0 65 86 F1 | 	sub	objptr, ##29120
01b4c     54 95 02 F6 | 	mov	arg02, local02
01b50     01 96 06 F6 | 	mov	arg03, #1
01b54     F8 45 B2 FD | 	call	#__system__Mid_S
01b58     3D 93 02 F6 | 	mov	arg01, result1
01b5c     91 01 00 FF 
01b60     00 95 06 F6 | 	mov	arg02, ##@LR__5482
01b64     50 2C B2 FD | 	call	#__system___string_cmp
01b68     00 7A 0E F2 | 	cmp	result1, #0 wz
01b6c     01 B4 0E A2 |  if_e	cmp	local08, #1 wz
01b70     00 B4 06 A6 |  if_e	mov	local08, #0
01b74                 | LR__0080
01b74     54 AD 02 F6 | 	mov	local04, local02
01b78     03 AC 66 F0 | 	shl	local04, #3
01b7c     32 AF 02 F6 | 	mov	local05, objptr
01b80     36 00 00 FF 
01b84     B0 AF 06 F1 | 	add	local05, ##28080
01b88     57 AD 02 F1 | 	add	local04, local05
01b8c     04 AC 06 F1 | 	add	local04, #4
01b90     56 B5 62 FC | 	wrlong	local08, local04
01b94     01 A8 06 F1 | 	add	local02, #1
01b98     54 FF 9F FD | 	jmp	#LR__0079
01b9c                 | LR__0081
01b9c     01 A8 06 F6 | 	mov	local02, #1
01ba0                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01ba0                 | LR__0082
01ba0     38 00 00 FF 
01ba4     C0 65 06 F1 | 	add	objptr, ##29120
01ba8     32 93 02 FB | 	rdlong	arg01, objptr
01bac     38 00 00 FF 
01bb0     C0 65 86 F1 | 	sub	objptr, ##29120
01bb4     54 95 02 F6 | 	mov	arg02, local02
01bb8     01 96 06 F6 | 	mov	arg03, #1
01bbc     90 45 B2 FD | 	call	#__system__Mid_S
01bc0     3D 93 02 F6 | 	mov	arg01, result1
01bc4     91 01 00 FF 
01bc8     02 B9 06 F6 | 	mov	local10, ##@LR__5483
01bcc     5C 95 02 F6 | 	mov	arg02, local10
01bd0     E4 2B B2 FD | 	call	#__system___string_cmp
01bd4     00 7A 0E F2 | 	cmp	result1, #0 wz
01bd8     2C 00 90 5D |  if_ne	jmp	#LR__0083
01bdc     54 AF 02 F6 | 	mov	local05, local02
01be0     03 AE 66 F0 | 	shl	local05, #3
01be4     32 B1 02 F6 | 	mov	local06, objptr
01be8     36 00 00 FF 
01bec     B0 B1 06 F1 | 	add	local06, ##28080
01bf0     58 AF 02 F1 | 	add	local05, local06
01bf4     04 AE 06 F1 | 	add	local05, #4
01bf8     57 BB 02 FB | 	rdlong	local11, local05
01bfc     04 AE 86 F1 | 	sub	local05, #4
01c00     5D BD 0A F6 | 	mov	local12, local11 wz
01c04     24 00 90 AD |  if_e	jmp	#LR__0084
01c08                 | LR__0083
01c08     54 00 00 FF 
01c0c     CC 64 06 F1 | 	add	objptr, ##43212
01c10     32 BF 02 FB | 	rdlong	local13, objptr
01c14     54 00 00 FF 
01c18     CC 64 86 F1 | 	sub	objptr, ##43212
01c1c     5F C1 02 F6 | 	mov	local14, local13
01c20     60 A9 52 F2 | 	cmps	local02, local14 wc
01c24     01 A8 06 C1 |  if_b	add	local02, #1
01c28     74 FF 9F CD |  if_b	jmp	#LR__0082
01c2c                 | LR__0084
01c2c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01c2c     54 00 00 FF 
01c30     CC 64 06 F1 | 	add	objptr, ##43212
01c34     32 AD 02 FB | 	rdlong	local04, objptr
01c38     54 00 00 FF 
01c3c     CC 64 86 F1 | 	sub	objptr, ##43212
01c40     56 A9 52 F2 | 	cmps	local02, local04 wc
01c44     A8 00 90 3D |  if_ae	jmp	#LR__0087
01c48     38 00 00 FF 
01c4c     C0 65 06 F1 | 	add	objptr, ##29120
01c50     32 B1 02 FB | 	rdlong	local06, objptr
01c54     38 00 00 FF 
01c58     C0 65 86 F1 | 	sub	objptr, ##29120
01c5c     58 93 02 F6 | 	mov	arg01, local06
01c60     49 B3 02 F6 | 	mov	local07, arg01
01c64     D7 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01c68                 | LR__0085
01c68     59 7B CA FA | 	rdbyte	result1, local07 wz
01c6c     01 B2 06 51 |  if_ne	add	local07, #1
01c70     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01c74                 | LR__0086
01c74     49 B3 82 F1 | 	sub	local07, arg01
01c78     59 AF 02 F6 | 	mov	local05, local07
01c7c     57 95 02 F6 | 	mov	arg02, local05
01c80     54 95 82 F1 | 	sub	arg02, local02
01c84     58 93 02 F6 | 	mov	arg01, local06
01c88     34 44 B2 FD | 	call	#__system__Right_S
01c8c     3D 93 02 F6 | 	mov	arg01, result1
01c90     34 48 B2 FD | 	call	#__system__RTrim_S
01c94     3D 93 02 F6 | 	mov	arg01, result1
01c98     6C 47 B2 FD | 	call	#__system__LTrim_S
01c9c     54 00 00 FF 
01ca0     D0 64 06 F1 | 	add	objptr, ##43216
01ca4     32 7B 62 FC | 	wrlong	result1, objptr
01ca8     1B 00 00 FF 
01cac     10 65 86 F1 | 	sub	objptr, ##14096
01cb0     32 93 02 FB | 	rdlong	arg01, objptr
01cb4     38 00 00 FF 
01cb8     C0 65 86 F1 | 	sub	objptr, ##29120
01cbc     01 A8 86 F1 | 	sub	local02, #1
01cc0     54 95 02 F6 | 	mov	arg02, local02
01cc4     70 43 B2 FD | 	call	#__system__Left_S
01cc8     3D 93 02 F6 | 	mov	arg01, result1
01ccc     F8 47 B2 FD | 	call	#__system__RTrim_S
01cd0     3D 93 02 F6 | 	mov	arg01, result1
01cd4     30 47 B2 FD | 	call	#__system__LTrim_S
01cd8     38 00 00 FF 
01cdc     C0 65 06 F1 | 	add	objptr, ##29120
01ce0     32 7B 62 FC | 	wrlong	result1, objptr
01ce4     38 00 00 FF 
01ce8     C0 65 86 F1 | 	sub	objptr, ##29120
01cec     1C 00 90 FD | 	jmp	#LR__0088
01cf0                 | LR__0087
01cf0     91 01 00 FF 
01cf4     04 AD 06 F6 | 	mov	local04, ##@LR__5484
01cf8     54 00 00 FF 
01cfc     D0 64 06 F1 | 	add	objptr, ##43216
01d00     32 AD 62 FC | 	wrlong	local04, objptr
01d04     54 00 00 FF 
01d08     D0 64 86 F1 | 	sub	objptr, ##43216
01d0c                 | LR__0088
01d0c                 | ' 
01d0c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01d0c     38 00 00 FF 
01d10     C8 65 06 F1 | 	add	objptr, ##29128
01d14     32 AD 02 FB | 	rdlong	local04, objptr
01d18     38 00 00 FF 
01d1c     C8 65 86 F1 | 	sub	objptr, ##29128
01d20     FF FF 7F FF 
01d24     FF AD 0E F2 | 	cmp	local04, ##-1 wz
01d28     40 00 90 5D |  if_ne	jmp	#LR__0089
01d2c     54 00 00 FF 
01d30     D0 64 06 F1 | 	add	objptr, ##43216
01d34     32 93 02 FB | 	rdlong	arg01, objptr
01d38     54 00 00 FF 
01d3c     D0 64 86 F1 | 	sub	objptr, ##43216
01d40     91 01 00 FF 
01d44     05 B1 06 F6 | 	mov	local06, ##@LR__5485
01d48     58 95 02 F6 | 	mov	arg02, local06
01d4c     68 2A B2 FD | 	call	#__system___string_cmp
01d50     00 7A 0E F2 | 	cmp	result1, #0 wz
01d54     38 00 00 5F 
01d58     C8 65 06 51 |  if_ne	add	objptr, ##29128
01d5c     32 01 68 5C |  if_ne	wrlong	#0, objptr
01d60     38 00 00 5F 
01d64     C8 65 86 51 |  if_ne	sub	objptr, ##29128
01d68     08 01 90 5D |  if_ne	jmp	#LR__0093
01d6c                 | LR__0089
01d6c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01d6c     38 00 00 FF 
01d70     C8 65 06 F1 | 	add	objptr, ##29128
01d74     32 AD 02 FB | 	rdlong	local04, objptr
01d78     38 00 00 FF 
01d7c     C8 65 86 F1 | 	sub	objptr, ##29128
01d80     FF FF 7F FF 
01d84     FF AD 0E F2 | 	cmp	local04, ##-1 wz
01d88     3C 00 90 5D |  if_ne	jmp	#LR__0090
01d8c     54 00 00 FF 
01d90     D0 64 06 F1 | 	add	objptr, ##43216
01d94     32 93 02 FB | 	rdlong	arg01, objptr
01d98     54 00 00 FF 
01d9c     D0 64 86 F1 | 	sub	objptr, ##43216
01da0     91 01 00 FF 
01da4     06 95 06 F6 | 	mov	arg02, ##@LR__5486
01da8     0C 2A B2 FD | 	call	#__system___string_cmp
01dac     00 7A 0E F2 | 	cmp	result1, #0 wz
01db0     38 00 00 AF 
01db4     C8 65 06 A1 |  if_e	add	objptr, ##29128
01db8     32 07 68 AC |  if_e	wrlong	#3, objptr
01dbc     38 00 00 AF 
01dc0     C8 65 86 A1 |  if_e	sub	objptr, ##29128
01dc4     AC 00 90 AD |  if_e	jmp	#LR__0093
01dc8                 | LR__0090
01dc8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01dc8     38 00 00 FF 
01dcc     C8 65 06 F1 | 	add	objptr, ##29128
01dd0     32 AD 02 FB | 	rdlong	local04, objptr
01dd4     38 00 00 FF 
01dd8     C8 65 86 F1 | 	sub	objptr, ##29128
01ddc     04 AC 0E F2 | 	cmp	local04, #4 wz
01de0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01de4     54 00 00 FF 
01de8     D0 64 06 F1 | 	add	objptr, ##43216
01dec     32 93 02 FB | 	rdlong	arg01, objptr
01df0     54 00 00 FF 
01df4     D0 64 86 F1 | 	sub	objptr, ##43216
01df8     91 01 00 FF 
01dfc     07 95 06 F6 | 	mov	arg02, ##@LR__5487
01e00     B4 29 B2 FD | 	call	#__system___string_cmp
01e04     00 7A 0E F2 | 	cmp	result1, #0 wz
01e08     38 00 00 5F 
01e0c     C8 65 06 51 |  if_ne	add	objptr, ##29128
01e10     32 03 68 5C |  if_ne	wrlong	#1, objptr
01e14     38 00 00 5F 
01e18     C8 65 86 51 |  if_ne	sub	objptr, ##29128
01e1c     54 00 90 5D |  if_ne	jmp	#LR__0093
01e20                 | LR__0091
01e20                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01e20     38 00 00 FF 
01e24     C8 65 06 F1 | 	add	objptr, ##29128
01e28     32 AD 02 FB | 	rdlong	local04, objptr
01e2c     38 00 00 FF 
01e30     C8 65 86 F1 | 	sub	objptr, ##29128
01e34     04 AC 0E F2 | 	cmp	local04, #4 wz
01e38     38 00 90 5D |  if_ne	jmp	#LR__0092
01e3c     54 00 00 FF 
01e40     D0 64 06 F1 | 	add	objptr, ##43216
01e44     32 93 02 FB | 	rdlong	arg01, objptr
01e48     54 00 00 FF 
01e4c     D0 64 86 F1 | 	sub	objptr, ##43216
01e50     91 01 00 FF 
01e54     08 95 06 F6 | 	mov	arg02, ##@LR__5488
01e58     5C 29 B2 FD | 	call	#__system___string_cmp
01e5c     00 7A 0E F2 | 	cmp	result1, #0 wz
01e60     38 00 00 AF 
01e64     C8 65 06 A1 |  if_e	add	objptr, ##29128
01e68     32 05 68 AC |  if_e	wrlong	#2, objptr
01e6c     38 00 00 AF 
01e70     C8 65 86 A1 |  if_e	sub	objptr, ##29128
01e74                 | LR__0092
01e74                 | LR__0093
01e74     38 CE 05 F1 | 	add	fp, #56
01e78     E7 00 68 FC | 	wrlong	#0, fp
01e7c     38 CE 85 F1 | 	sub	fp, #56
01e80     00 A8 06 F6 | 	mov	local02, #0
01e84     01 C2 06 F6 | 	mov	local15, #1
01e88                 | ' 
01e88                 | ' ' 1b: find separators
01e88                 | ' 
01e88                 | ' 107
01e88                 | ' separators(0)=0
01e88                 | ' i=0: j=1
01e88                 | ' do: 
01e88                 | LR__0094
01e88     01 A8 06 F1 | 	add	local02, #1
01e8c     38 00 00 FF 
01e90     C0 65 06 F1 | 	add	objptr, ##29120
01e94     32 93 02 FB | 	rdlong	arg01, objptr
01e98     38 00 00 FF 
01e9c     C0 65 86 F1 | 	sub	objptr, ##29120
01ea0     54 95 02 F6 | 	mov	arg02, local02
01ea4     01 96 06 F6 | 	mov	arg03, #1
01ea8     A4 42 B2 FD | 	call	#__system__Mid_S
01eac     3D C5 02 F6 | 	mov	local16, result1
01eb0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01eb0     62 93 02 F6 | 	mov	arg01, local16
01eb4     48 2D B0 FD | 	call	#_isseparator
01eb8     00 7A 0E F2 | 	cmp	result1, #0 wz
01ebc     1C 00 90 AD |  if_e	jmp	#LR__0095
01ec0     61 AB 02 F6 | 	mov	local03, local15
01ec4     02 AA 66 F0 | 	shl	local03, #2
01ec8     E7 B8 02 F6 | 	mov	local10, fp
01ecc     38 B8 06 F1 | 	add	local10, #56
01ed0     5C AB 02 F1 | 	add	local03, local10
01ed4     55 A9 62 FC | 	wrlong	local02, local03
01ed8     01 C2 06 F1 | 	add	local15, #1
01edc                 | LR__0095
01edc     54 00 00 FF 
01ee0     CC 64 06 F1 | 	add	objptr, ##43212
01ee4     32 AD 02 FB | 	rdlong	local04, objptr
01ee8     54 00 00 FF 
01eec     CC 64 86 F1 | 	sub	objptr, ##43212
01ef0     56 A9 5A F2 | 	cmps	local02, local04 wcz
01ef4     90 FF 9F ED |  if_be	jmp	#LR__0094
01ef8     61 AB 02 F6 | 	mov	local03, local15
01efc     02 AA 66 F0 | 	shl	local03, #2
01f00     E7 B8 02 F6 | 	mov	local10, fp
01f04     38 B8 06 F1 | 	add	local10, #56
01f08     5C AB 02 F1 | 	add	local03, local10
01f0c     55 A9 62 FC | 	wrlong	local02, local03
01f10     00 C6 06 F6 | 	mov	local17, #0
01f14                 | ' for i=0 to j-1 
01f14     00 A8 06 F6 | 	mov	local02, #0
01f18     61 C9 02 F6 | 	mov	local18, local15
01f1c                 | LR__0096
01f1c     64 A9 52 F2 | 	cmps	local02, local18 wc
01f20     48 01 90 3D |  if_ae	jmp	#LR__0100
01f24     54 AB 02 F6 | 	mov	local03, local02
01f28     02 AA 66 F0 | 	shl	local03, #2
01f2c     38 CE 05 F1 | 	add	fp, #56
01f30     E7 AA 02 F1 | 	add	local03, fp
01f34     55 AF 02 FB | 	rdlong	local05, local03
01f38     54 00 00 FF 
01f3c     D8 64 06 F1 | 	add	objptr, ##43224
01f40     32 AF 62 FC | 	wrlong	local05, objptr
01f44     54 AB 02 F6 | 	mov	local03, local02
01f48     01 AA 06 F1 | 	add	local03, #1
01f4c     02 AA 66 F0 | 	shl	local03, #2
01f50     E7 B8 02 F6 | 	mov	local10, fp
01f54     E7 AA 02 F1 | 	add	local03, fp
01f58     55 AF 02 FB | 	rdlong	local05, local03
01f5c     04 64 06 F1 | 	add	objptr, #4
01f60     32 AF 62 FC | 	wrlong	local05, objptr
01f64                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f64     04 64 86 F1 | 	sub	objptr, #4
01f68     32 AD 02 FB | 	rdlong	local04, objptr
01f6c     54 00 00 FF 
01f70     D8 64 86 F1 | 	sub	objptr, ##43224
01f74     01 AC 56 F2 | 	cmps	local04, #1 wc
01f78     38 CE 85 F1 | 	sub	fp, #56
01f7c     64 00 90 CD |  if_b	jmp	#LR__0098
01f80     38 00 00 FF 
01f84     C0 65 06 F1 | 	add	objptr, ##29120
01f88     32 93 02 FB | 	rdlong	arg01, objptr
01f8c     1B 00 00 FF 
01f90     18 65 06 F1 | 	add	objptr, ##14104
01f94     32 95 02 FB | 	rdlong	arg02, objptr
01f98     54 00 00 FF 
01f9c     D8 64 86 F1 | 	sub	objptr, ##43224
01fa0     01 96 06 F6 | 	mov	arg03, #1
01fa4     A8 41 B2 FD | 	call	#__system__Mid_S
01fa8     3D CB 02 F6 | 	mov	local19, result1
01fac     91 01 00 FF 
01fb0     09 95 06 F6 | 	mov	arg02, ##@LR__5489
01fb4     65 93 02 F6 | 	mov	arg01, local19
01fb8     FC 27 B2 FD | 	call	#__system___string_cmp
01fbc     00 7A 0E F2 | 	cmp	result1, #0 wz
01fc0     20 00 90 AD |  if_e	jmp	#LR__0097
01fc4     63 B9 02 F6 | 	mov	local10, local17
01fc8     03 B8 66 F0 | 	shl	local10, #3
01fcc     32 AF 02 F6 | 	mov	local05, objptr
01fd0     36 00 00 FF 
01fd4     B0 AF 06 F1 | 	add	local05, ##28080
01fd8     57 B9 02 F1 | 	add	local10, local05
01fdc     5C CB 62 FC | 	wrlong	local19, local10
01fe0     01 C6 06 F1 | 	add	local17, #1
01fe4                 | LR__0097
01fe4                 | LR__0098
01fe4     38 00 00 FF 
01fe8     C0 65 06 F1 | 	add	objptr, ##29120
01fec     32 93 02 FB | 	rdlong	arg01, objptr
01ff0     1B 00 00 FF 
01ff4     18 65 06 F1 | 	add	objptr, ##14104
01ff8     32 95 02 FB | 	rdlong	arg02, objptr
01ffc     01 94 06 F1 | 	add	arg02, #1
02000     04 64 06 F1 | 	add	objptr, #4
02004     32 97 02 FB | 	rdlong	arg03, objptr
02008     04 64 86 F1 | 	sub	objptr, #4
0200c     32 BB 02 FB | 	rdlong	local11, objptr
02010     54 00 00 FF 
02014     D8 64 86 F1 | 	sub	objptr, ##43224
02018     5D BD 02 F6 | 	mov	local12, local11
0201c     5E 97 82 F1 | 	sub	arg03, local12
02020     01 96 86 F1 | 	sub	arg03, #1
02024     28 41 B2 FD | 	call	#__system__Mid_S
02028     3D CB 02 F6 | 	mov	local19, result1
0202c                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
0202c     91 01 00 FF 
02030     0A 95 06 F6 | 	mov	arg02, ##@LR__5490
02034     65 93 02 F6 | 	mov	arg01, local19
02038     7C 27 B2 FD | 	call	#__system___string_cmp
0203c     00 7A 0E F2 | 	cmp	result1, #0 wz
02040     20 00 90 AD |  if_e	jmp	#LR__0099
02044     63 B9 02 F6 | 	mov	local10, local17
02048     03 B8 66 F0 | 	shl	local10, #3
0204c     32 AF 02 F6 | 	mov	local05, objptr
02050     36 00 00 FF 
02054     B0 AF 06 F1 | 	add	local05, ##28080
02058     57 B9 02 F1 | 	add	local10, local05
0205c     5C CB 62 FC | 	wrlong	local19, local10
02060     01 C6 06 F1 | 	add	local17, #1
02064                 | LR__0099
02064     01 A8 06 F1 | 	add	local02, #1
02068     B0 FE 9F FD | 	jmp	#LR__0096
0206c                 | LR__0100
0206c                 | ' 
0206c                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
0206c                 | ' 
0206c                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
0206c     38 00 00 FF 
02070     C8 65 06 F1 | 	add	objptr, ##29128
02074     32 AD 0A FB | 	rdlong	local04, objptr wz
02078     38 00 00 FF 
0207c     C8 65 86 F1 | 	sub	objptr, ##29128
02080     38 00 00 5F 
02084     C8 65 06 51 |  if_ne	add	objptr, ##29128
02088     32 B9 02 5B |  if_ne	rdlong	local10, objptr
0208c     38 00 00 5F 
02090     C8 65 86 51 |  if_ne	sub	objptr, ##29128
02094     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
02098     C0 00 90 5D |  if_ne	jmp	#LR__0103
0209c     36 00 00 FF 
020a0     B0 65 06 F1 | 	add	objptr, ##28080
020a4     32 BB 02 FB | 	rdlong	local11, objptr
020a8     36 00 00 FF 
020ac     B0 65 86 F1 | 	sub	objptr, ##28080
020b0     5D 93 02 F6 | 	mov	arg01, local11
020b4     2C 50 B0 FD | 	call	#_isdec
020b8     3D BD 02 F6 | 	mov	local12, result1
020bc     5E B1 02 F6 | 	mov	local06, local12
020c0     07 B0 66 F7 | 	signx	local06, #7
020c4     58 B1 22 F6 | 	not	local06, local06
020c8     00 B0 0E F2 | 	cmp	local06, #0 wz
020cc     8C 00 90 AD |  if_e	jmp	#LR__0103
020d0     63 A9 02 F6 | 	mov	local02, local17
020d4     36 00 00 FF 
020d8     B0 65 06 F1 | 	add	objptr, ##28080
020dc     D7 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
020e0                 | LR__0101
020e0     54 AF 02 F6 | 	mov	local05, local02
020e4     01 AE 86 F1 | 	sub	local05, #1
020e8     03 AE 66 F0 | 	shl	local05, #3
020ec     32 AF 02 F1 | 	add	local05, objptr
020f0     57 AD 02 FB | 	rdlong	local04, local05
020f4     54 B1 02 F6 | 	mov	local06, local02
020f8     01 B0 86 F1 | 	sub	local06, #1
020fc     03 B0 66 F0 | 	shl	local06, #3
02100     32 B1 02 F1 | 	add	local06, objptr
02104     04 B0 06 F1 | 	add	local06, #4
02108     58 AB 02 FB | 	rdlong	local03, local06
0210c     54 B1 02 F6 | 	mov	local06, local02
02110     03 B0 66 F0 | 	shl	local06, #3
02114     32 BD 02 F6 | 	mov	local12, objptr
02118     32 B1 02 F1 | 	add	local06, objptr
0211c     58 AD 62 FC | 	wrlong	local04, local06
02120     54 BB 02 F6 | 	mov	local11, local02
02124     5D BF 02 F6 | 	mov	local13, local11
02128     03 BE 66 F0 | 	shl	local13, #3
0212c     32 BF 02 F1 | 	add	local13, objptr
02130     04 BE 06 F1 | 	add	local13, #4
02134     5F AB 62 FC | 	wrlong	local03, local13
02138     01 A8 86 F1 | 	sub	local02, #1
0213c     01 A8 56 F2 | 	cmps	local02, #1 wc
02140     9C FF 9F 3D |  if_ae	jmp	#LR__0101
02144                 | LR__0102
02144     91 01 00 FF 
02148     0B AD 06 F6 | 	mov	local04, ##@LR__5491
0214c     32 AD 62 FC | 	wrlong	local04, objptr
02150     36 00 00 FF 
02154     B0 65 86 F1 | 	sub	objptr, ##28080
02158     01 C6 06 F1 | 	add	local17, #1
0215c                 | LR__0103
0215c     00 A8 06 F6 | 	mov	local02, #0
02160                 | ' 
02160                 | ' ' 1e : find strings
02160                 | ' 
02160                 | ' i=0
02160                 | ' do
02160                 | LR__0104
02160                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
02160     54 AF 02 F6 | 	mov	local05, local02
02164     03 AE 66 F0 | 	shl	local05, #3
02168     32 B1 02 F6 | 	mov	local06, objptr
0216c     36 00 00 FF 
02170     B0 B1 06 F1 | 	add	local06, ##28080
02174     58 AF 02 F1 | 	add	local05, local06
02178     57 93 02 FB | 	rdlong	arg01, local05
0217c     91 01 00 FF 
02180     0D 95 06 F6 | 	mov	arg02, ##@LR__5492
02184     30 26 B2 FD | 	call	#__system___string_cmp
02188     00 7A 0E F2 | 	cmp	result1, #0 wz
0218c     01 A8 06 51 |  if_ne	add	local02, #1
02190     20 01 90 5D |  if_ne	jmp	#LR__0109
02194     54 CD 02 F6 | 	mov	local20, local02
02198                 | LR__0105
02198     54 B9 02 F6 | 	mov	local10, local02
0219c     01 B8 06 F1 | 	add	local10, #1
021a0     03 B8 66 F0 | 	shl	local10, #3
021a4     36 00 00 FF 
021a8     B0 65 06 F1 | 	add	objptr, ##28080
021ac     32 B9 02 F1 | 	add	local10, objptr
021b0     5C CB 02 FB | 	rdlong	local19, local10
021b4     66 B9 02 F6 | 	mov	local10, local20
021b8     03 B8 66 F0 | 	shl	local10, #3
021bc     32 B9 02 F1 | 	add	local10, objptr
021c0     66 BB 02 F6 | 	mov	local11, local20
021c4     5D C1 02 F6 | 	mov	local14, local11
021c8     03 C0 66 F0 | 	shl	local14, #3
021cc     32 C1 02 F1 | 	add	local14, objptr
021d0     60 93 02 FB | 	rdlong	arg01, local14
021d4     65 BD 02 F6 | 	mov	local12, local19
021d8     5E 95 02 F6 | 	mov	arg02, local12
021dc     36 00 00 FF 
021e0     B0 65 86 F1 | 	sub	objptr, ##28080
021e4     04 26 B2 FD | 	call	#__system___string_concat
021e8     5C 7B 62 FC | 	wrlong	result1, local10
021ec     54 C3 02 F6 | 	mov	local15, local02
021f0     01 C2 06 F1 | 	add	local15, #1
021f4     63 CF 02 F6 | 	mov	local21, local17
021f8     01 CE 06 F1 | 	add	local21, #1
021fc     D7 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02200                 | LR__0106
02200     67 C3 52 F2 | 	cmps	local15, local21 wc
02204     70 00 90 3D |  if_ae	jmp	#LR__0108
02208     61 AF 02 F6 | 	mov	local05, local15
0220c     01 AE 06 F1 | 	add	local05, #1
02210     03 AE 66 F0 | 	shl	local05, #3
02214     36 00 00 FF 
02218     B0 65 06 F1 | 	add	objptr, ##28080
0221c     32 AF 02 F1 | 	add	local05, objptr
02220     57 AD 02 FB | 	rdlong	local04, local05
02224     61 B1 02 F6 | 	mov	local06, local15
02228     01 B0 06 F1 | 	add	local06, #1
0222c     03 B0 66 F0 | 	shl	local06, #3
02230     32 B1 02 F1 | 	add	local06, objptr
02234     04 B0 06 F1 | 	add	local06, #4
02238     58 AB 02 FB | 	rdlong	local03, local06
0223c     61 B1 02 F6 | 	mov	local06, local15
02240     03 B0 66 F0 | 	shl	local06, #3
02244     32 BD 02 F6 | 	mov	local12, objptr
02248     32 B1 02 F1 | 	add	local06, objptr
0224c     58 AD 62 FC | 	wrlong	local04, local06
02250     61 BB 02 F6 | 	mov	local11, local15
02254     5D BF 02 F6 | 	mov	local13, local11
02258     03 BE 66 F0 | 	shl	local13, #3
0225c     32 BF 02 F1 | 	add	local13, objptr
02260     04 BE 06 F1 | 	add	local13, #4
02264     5F AB 62 FC | 	wrlong	local03, local13
02268     01 C2 06 F1 | 	add	local15, #1
0226c     36 00 00 FF 
02270     B0 65 86 F1 | 	sub	objptr, ##28080
02274     88 FF 9F FD | 	jmp	#LR__0106
02278                 | LR__0107
02278                 | LR__0108
02278     01 C6 86 F1 | 	sub	local17, #1
0227c     91 01 00 FF 
02280     0F 95 06 F6 | 	mov	arg02, ##@LR__5493
02284     65 93 02 F6 | 	mov	arg01, local19
02288     2C 25 B2 FD | 	call	#__system___string_cmp
0228c     00 7A 0E F2 | 	cmp	result1, #0 wz
02290     63 A9 52 52 |  if_ne	cmps	local02, local17 wc
02294     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
02298                 | '   if p$<>"""" then k+=1:i+=1
02298     91 01 00 FF 
0229c     11 95 06 F6 | 	mov	arg02, ##@LR__5494
022a0     65 93 02 F6 | 	mov	arg01, local19
022a4     10 25 B2 FD | 	call	#__system___string_cmp
022a8     00 7A 0E F2 | 	cmp	result1, #0 wz
022ac     01 C6 06 51 |  if_ne	add	local17, #1
022b0     01 A8 06 51 |  if_ne	add	local02, #1
022b4                 | LR__0109
022b4     63 A9 52 F2 | 	cmps	local02, local17 wc
022b8     A4 FE 9F CD |  if_b	jmp	#LR__0104
022bc     00 A8 06 F6 | 	mov	local02, #0
022c0                 | ' 
022c0                 | ' ' 1f : concatenate strings if "" detected between
022c0                 | '  
022c0                 | ' i=0
022c0                 | ' do
022c0                 | LR__0110
022c0                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
022c0     54 AF 02 F6 | 	mov	local05, local02
022c4     03 AE 66 F0 | 	shl	local05, #3
022c8     32 B1 02 F6 | 	mov	local06, objptr
022cc     36 00 00 FF 
022d0     B0 B1 06 F1 | 	add	local06, ##28080
022d4     58 AF 02 F1 | 	add	local05, local06
022d8     57 93 02 FB | 	rdlong	arg01, local05
022dc     01 94 06 F6 | 	mov	arg02, #1
022e0     DC 3D B2 FD | 	call	#__system__Right_S
022e4     3D 93 02 F6 | 	mov	arg01, result1
022e8     91 01 00 FF 
022ec     13 95 06 F6 | 	mov	arg02, ##@LR__5495
022f0     C4 24 B2 FD | 	call	#__system___string_cmp
022f4     00 7A 0E F2 | 	cmp	result1, #0 wz
022f8     74 01 90 5D |  if_ne	jmp	#LR__0116
022fc     54 B1 02 F6 | 	mov	local06, local02
02300     01 B0 06 F1 | 	add	local06, #1
02304     03 B0 66 F0 | 	shl	local06, #3
02308     32 BD 02 F6 | 	mov	local12, objptr
0230c     36 00 00 FF 
02310     B0 BD 06 F1 | 	add	local12, ##28080
02314     5E B1 02 F1 | 	add	local06, local12
02318     58 93 02 FB | 	rdlong	arg01, local06
0231c     01 94 06 F6 | 	mov	arg02, #1
02320     14 3D B2 FD | 	call	#__system__Left_S
02324     3D 93 02 F6 | 	mov	arg01, result1
02328     91 01 00 FF 
0232c     15 95 06 F6 | 	mov	arg02, ##@LR__5496
02330     84 24 B2 FD | 	call	#__system___string_cmp
02334     00 7A 0E F2 | 	cmp	result1, #0 wz
02338     34 01 90 5D |  if_ne	jmp	#LR__0116
0233c     54 B9 02 F6 | 	mov	local10, local02
02340     03 B8 66 F0 | 	shl	local10, #3
02344     36 00 00 FF 
02348     B0 65 06 F1 | 	add	objptr, ##28080
0234c     32 B9 02 F1 | 	add	local10, objptr
02350     54 C1 02 F6 | 	mov	local14, local02
02354     03 C0 66 F0 | 	shl	local14, #3
02358     32 C1 02 F1 | 	add	local14, objptr
0235c     60 B1 02 FB | 	rdlong	local06, local14
02360     54 BF 02 F6 | 	mov	local13, local02
02364     01 BE 06 F1 | 	add	local13, #1
02368     03 BE 66 F0 | 	shl	local13, #3
0236c     32 BF 02 F1 | 	add	local13, objptr
02370     5F BD 02 FB | 	rdlong	local12, local13
02374     54 D1 02 F6 | 	mov	local22, local02
02378     01 D0 06 F1 | 	add	local22, #1
0237c     68 D3 02 F6 | 	mov	local23, local22
02380     03 D2 66 F0 | 	shl	local23, #3
02384     32 D5 02 F6 | 	mov	local24, objptr
02388     32 D3 02 F1 | 	add	local23, objptr
0238c     69 93 02 FB | 	rdlong	arg01, local23
02390     36 00 00 FF 
02394     B0 65 86 F1 | 	sub	objptr, ##28080
02398     49 B3 02 F6 | 	mov	local07, arg01
0239c     D7 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
023a0                 | LR__0111
023a0     59 7B CA FA | 	rdbyte	result1, local07 wz
023a4     01 B2 06 51 |  if_ne	add	local07, #1
023a8     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
023ac                 | LR__0112
023ac     49 B3 82 F1 | 	sub	local07, arg01
023b0     59 BB 02 F6 | 	mov	local11, local07
023b4     01 BA 86 F1 | 	sub	local11, #1
023b8     5E 93 02 F6 | 	mov	arg01, local12
023bc     5D 95 02 F6 | 	mov	arg02, local11
023c0     FC 3C B2 FD | 	call	#__system__Right_S
023c4     3D BD 02 F6 | 	mov	local12, result1
023c8     58 93 02 F6 | 	mov	arg01, local06
023cc     5E 95 02 F6 | 	mov	arg02, local12
023d0     18 24 B2 FD | 	call	#__system___string_concat
023d4     3D B1 02 F6 | 	mov	local06, result1
023d8     5C B1 62 FC | 	wrlong	local06, local10
023dc                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
023dc     54 C3 02 F6 | 	mov	local15, local02
023e0     01 C2 06 F1 | 	add	local15, #1
023e4     63 D7 02 F6 | 	mov	local25, local17
023e8     01 D6 06 F1 | 	add	local25, #1
023ec     D7 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
023f0                 | LR__0113
023f0     6B C3 52 F2 | 	cmps	local15, local25 wc
023f4     70 00 90 3D |  if_ae	jmp	#LR__0115
023f8     61 AF 02 F6 | 	mov	local05, local15
023fc     01 AE 06 F1 | 	add	local05, #1
02400     03 AE 66 F0 | 	shl	local05, #3
02404     36 00 00 FF 
02408     B0 65 06 F1 | 	add	objptr, ##28080
0240c     32 AF 02 F1 | 	add	local05, objptr
02410     57 AD 02 FB | 	rdlong	local04, local05
02414     61 B1 02 F6 | 	mov	local06, local15
02418     01 B0 06 F1 | 	add	local06, #1
0241c     03 B0 66 F0 | 	shl	local06, #3
02420     32 B1 02 F1 | 	add	local06, objptr
02424     04 B0 06 F1 | 	add	local06, #4
02428     58 AB 02 FB | 	rdlong	local03, local06
0242c     61 B1 02 F6 | 	mov	local06, local15
02430     03 B0 66 F0 | 	shl	local06, #3
02434     32 BD 02 F6 | 	mov	local12, objptr
02438     32 B1 02 F1 | 	add	local06, objptr
0243c     58 AD 62 FC | 	wrlong	local04, local06
02440     61 BB 02 F6 | 	mov	local11, local15
02444     5D BF 02 F6 | 	mov	local13, local11
02448     03 BE 66 F0 | 	shl	local13, #3
0244c     32 BF 02 F1 | 	add	local13, objptr
02450     04 BE 06 F1 | 	add	local13, #4
02454     5F AB 62 FC | 	wrlong	local03, local13
02458     01 C2 06 F1 | 	add	local15, #1
0245c     36 00 00 FF 
02460     B0 65 86 F1 | 	sub	objptr, ##28080
02464     88 FF 9F FD | 	jmp	#LR__0113
02468                 | LR__0114
02468                 | LR__0115
02468     01 A8 86 F1 | 	sub	local02, #1
0246c     01 C6 86 F1 | 	sub	local17, #1
02470                 | LR__0116
02470     01 A8 06 F1 | 	add	local02, #1
02474     63 A9 52 F2 | 	cmps	local02, local17 wc
02478     44 FE 9F CD |  if_b	jmp	#LR__0110
0247c     00 A8 06 F6 | 	mov	local02, #0
02480                 | '  
02480                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
02480                 | '  
02480                 | ' i=0 
02480                 | ' do
02480                 | LR__0117
02480     54 B9 02 F6 | 	mov	local10, local02
02484     03 B8 66 F0 | 	shl	local10, #3
02488     36 00 00 FF 
0248c     B0 65 06 F1 | 	add	objptr, ##28080
02490     32 B9 02 F1 | 	add	local10, objptr
02494     5C D9 02 FB | 	rdlong	local26, local10
02498     54 B9 02 F6 | 	mov	local10, local02
0249c     01 B8 06 F1 | 	add	local10, #1
024a0     03 B8 66 F0 | 	shl	local10, #3
024a4     32 B9 02 F1 | 	add	local10, objptr
024a8     5C DB 02 FB | 	rdlong	local27, local10
024ac                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
024ac                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
024ac     91 01 00 FF 
024b0     17 95 06 F6 | 	mov	arg02, ##@LR__5497
024b4     6C 93 02 F6 | 	mov	arg01, local26
024b8     36 00 00 FF 
024bc     B0 65 86 F1 | 	sub	objptr, ##28080
024c0     F4 22 B2 FD | 	call	#__system___string_cmp
024c4     00 7A 0E F2 | 	cmp	result1, #0 wz
024c8     A8 00 90 AD |  if_e	jmp	#LR__0118
024cc     91 01 00 FF 
024d0     19 95 06 F6 | 	mov	arg02, ##@LR__5498
024d4     6C 93 02 F6 | 	mov	arg01, local26
024d8     DC 22 B2 FD | 	call	#__system___string_cmp
024dc     3D AB 0A F6 | 	mov	local03, result1 wz
024e0     90 00 90 AD |  if_e	jmp	#LR__0118
024e4     91 01 00 FF 
024e8     1B B1 06 F6 | 	mov	local06, ##@LR__5499
024ec     6C 93 02 F6 | 	mov	arg01, local26
024f0     58 95 02 F6 | 	mov	arg02, local06
024f4     C0 22 B2 FD | 	call	#__system___string_cmp
024f8     00 7A 0E F2 | 	cmp	result1, #0 wz
024fc     74 00 90 AD |  if_e	jmp	#LR__0118
02500     91 01 00 FF 
02504     1D BD 06 F6 | 	mov	local12, ##@LR__5500
02508     6C 93 02 F6 | 	mov	arg01, local26
0250c     5E 95 02 F6 | 	mov	arg02, local12
02510     A4 22 B2 FD | 	call	#__system___string_cmp
02514     00 7A 0E F2 | 	cmp	result1, #0 wz
02518     58 00 90 AD |  if_e	jmp	#LR__0118
0251c     91 01 00 FF 
02520     1F BB 06 F6 | 	mov	local11, ##@LR__5501
02524     5D BD 02 F6 | 	mov	local12, local11
02528     6C 93 02 F6 | 	mov	arg01, local26
0252c     5E 95 02 F6 | 	mov	arg02, local12
02530     84 22 B2 FD | 	call	#__system___string_cmp
02534     3D B1 0A F6 | 	mov	local06, result1 wz
02538     38 00 90 AD |  if_e	jmp	#LR__0118
0253c     91 01 00 FF 
02540     21 BB 06 F6 | 	mov	local11, ##@LR__5502
02544     6C 93 02 F6 | 	mov	arg01, local26
02548     5D 95 02 F6 | 	mov	arg02, local11
0254c     68 22 B2 FD | 	call	#__system___string_cmp
02550     3D BD 0A F6 | 	mov	local12, result1 wz
02554     1C 00 90 AD |  if_e	jmp	#LR__0118
02558     91 01 00 FF 
0255c     23 C1 06 F6 | 	mov	local14, ##@LR__5503
02560     6C 93 02 F6 | 	mov	arg01, local26
02564     60 95 02 F6 | 	mov	arg02, local14
02568     4C 22 B2 FD | 	call	#__system___string_cmp
0256c     3D BB 0A F6 | 	mov	local11, result1 wz
02570     20 00 90 5D |  if_ne	jmp	#LR__0119
02574                 | LR__0118
02574     91 01 00 FF 
02578     25 DD 06 F6 | 	mov	local28, ##@LR__5504
0257c     6E BF 02 F6 | 	mov	local13, local28
02580     6D 93 02 F6 | 	mov	arg01, local27
02584     5F 95 02 F6 | 	mov	arg02, local13
02588     2C 22 B2 FD | 	call	#__system___string_cmp
0258c     3D C1 0A F6 | 	mov	local14, result1 wz
02590     B8 00 90 AD |  if_e	jmp	#LR__0122
02594                 | LR__0119
02594     91 01 00 FF 
02598     27 DD 06 F6 | 	mov	local28, ##@LR__5505
0259c     6C 93 02 F6 | 	mov	arg01, local26
025a0     6E 95 02 F6 | 	mov	arg02, local28
025a4     10 22 B2 FD | 	call	#__system___string_cmp
025a8     3D BF 0A F6 | 	mov	local13, result1 wz
025ac     20 00 90 5D |  if_ne	jmp	#LR__0120
025b0     91 01 00 FF 
025b4     29 D3 06 F6 | 	mov	local23, ##@LR__5506
025b8     69 D1 02 F6 | 	mov	local22, local23
025bc     6D 93 02 F6 | 	mov	arg01, local27
025c0     68 95 02 F6 | 	mov	arg02, local22
025c4     F0 21 B2 FD | 	call	#__system___string_cmp
025c8     3D DD 0A F6 | 	mov	local28, result1 wz
025cc     7C 00 90 AD |  if_e	jmp	#LR__0122
025d0                 | LR__0120
025d0     91 01 00 FF 
025d4     2B D3 06 F6 | 	mov	local23, ##@LR__5507
025d8     6C 93 02 F6 | 	mov	arg01, local26
025dc     69 95 02 F6 | 	mov	arg02, local23
025e0     D4 21 B2 FD | 	call	#__system___string_cmp
025e4     3D D1 0A F6 | 	mov	local22, result1 wz
025e8     20 00 90 5D |  if_ne	jmp	#LR__0121
025ec     91 01 00 FF 
025f0     2D DF 06 F6 | 	mov	local29, ##@LR__5508
025f4     6F D5 02 F6 | 	mov	local24, local29
025f8     6D 93 02 F6 | 	mov	arg01, local27
025fc     6A 95 02 F6 | 	mov	arg02, local24
02600     B4 21 B2 FD | 	call	#__system___string_cmp
02604     3D D3 0A F6 | 	mov	local23, result1 wz
02608     40 00 90 AD |  if_e	jmp	#LR__0122
0260c                 | LR__0121
0260c     91 01 00 FF 
02610     2F E1 06 F6 | 	mov	local30, ##@LR__5509
02614     70 DF 02 F6 | 	mov	local29, local30
02618     6C 93 02 F6 | 	mov	arg01, local26
0261c     6F 95 02 F6 | 	mov	arg02, local29
02620     94 21 B2 FD | 	call	#__system___string_cmp
02624     3D D5 0A F6 | 	mov	local24, result1 wz
02628     EC 00 90 5D |  if_ne	jmp	#LR__0126
0262c     91 01 00 FF 
02630     31 E3 06 F6 | 	mov	local31, ##@LR__5510
02634     71 E1 02 F6 | 	mov	local30, local31
02638     6D 93 02 F6 | 	mov	arg01, local27
0263c     70 95 02 F6 | 	mov	arg02, local30
02640     74 21 B2 FD | 	call	#__system___string_cmp
02644     3D DF 0A F6 | 	mov	local29, result1 wz
02648     CC 00 90 5D |  if_ne	jmp	#LR__0126
0264c                 | LR__0122
0264c     54 B9 02 F6 | 	mov	local10, local02
02650     03 B8 66 F0 | 	shl	local10, #3
02654     32 AF 02 F6 | 	mov	local05, objptr
02658     36 00 00 FF 
0265c     B0 AF 06 F1 | 	add	local05, ##28080
02660     57 B9 02 F1 | 	add	local10, local05
02664     6D BD 02 F6 | 	mov	local12, local27
02668     6C 93 02 F6 | 	mov	arg01, local26
0266c     5E 95 02 F6 | 	mov	arg02, local12
02670     78 21 B2 FD | 	call	#__system___string_concat
02674     5C 7B 62 FC | 	wrlong	result1, local10
02678                 | '     lparts(i).part$=s1$+s2$
02678                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02678     54 C3 02 F6 | 	mov	local15, local02
0267c     01 C2 06 F1 | 	add	local15, #1
02680     63 E5 02 F6 | 	mov	local32, local17
02684     01 E4 06 F1 | 	add	local32, #1
02688     D7 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
0268c                 | LR__0123
0268c     72 C3 52 F2 | 	cmps	local15, local32 wc
02690     7C 00 90 3D |  if_ae	jmp	#LR__0125
02694     61 AF 02 F6 | 	mov	local05, local15
02698     01 AE 06 F1 | 	add	local05, #1
0269c     03 AE 66 F0 | 	shl	local05, #3
026a0     36 00 00 FF 
026a4     B0 65 06 F1 | 	add	objptr, ##28080
026a8     32 AF 02 F1 | 	add	local05, objptr
026ac     57 AD 02 FB | 	rdlong	local04, local05
026b0     61 B1 02 F6 | 	mov	local06, local15
026b4     01 B0 06 F1 | 	add	local06, #1
026b8     03 B0 66 F0 | 	shl	local06, #3
026bc     32 B1 02 F1 | 	add	local06, objptr
026c0     04 B0 06 F1 | 	add	local06, #4
026c4     58 AB 02 FB | 	rdlong	local03, local06
026c8     61 B1 02 F6 | 	mov	local06, local15
026cc     03 B0 66 F0 | 	shl	local06, #3
026d0     32 BD 02 F6 | 	mov	local12, objptr
026d4     32 B1 02 F1 | 	add	local06, objptr
026d8     58 AD 62 FC | 	wrlong	local04, local06
026dc     61 BB 02 F6 | 	mov	local11, local15
026e0     5D C1 02 F6 | 	mov	local14, local11
026e4     60 BF 02 F6 | 	mov	local13, local14
026e8     03 BE 66 F0 | 	shl	local13, #3
026ec     32 DD 02 F6 | 	mov	local28, objptr
026f0     32 BF 02 F1 | 	add	local13, objptr
026f4     04 BE 06 F1 | 	add	local13, #4
026f8     5F AB 62 FC | 	wrlong	local03, local13
026fc     04 BE 86 F1 | 	sub	local13, #4
02700     01 C2 06 F1 | 	add	local15, #1
02704     36 00 00 FF 
02708     B0 65 86 F1 | 	sub	objptr, ##28080
0270c     7C FF 9F FD | 	jmp	#LR__0123
02710                 | LR__0124
02710                 | LR__0125
02710     01 A8 86 F1 | 	sub	local02, #1
02714     01 C6 86 F1 | 	sub	local17, #1
02718                 | LR__0126
02718     01 A8 06 F1 | 	add	local02, #1
0271c     63 A9 52 F2 | 	cmps	local02, local17 wc
02720     5C FD 9F CD |  if_b	jmp	#LR__0117
02724                 | '  
02724                 | ' ' 1h : now remove parts that are spaces
02724                 | ' 
02724                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02724     00 A8 06 F6 | 	mov	local02, #0
02728     63 E7 02 F6 | 	mov	local33, local17
0272c     01 E6 06 F1 | 	add	local33, #1
02730                 | LR__0127
02730     73 A9 52 F2 | 	cmps	local02, local33 wc
02734     50 00 90 3D |  if_ae	jmp	#LR__0128
02738     54 B9 02 F6 | 	mov	local10, local02
0273c     03 B8 66 F0 | 	shl	local10, #3
02740     36 00 00 FF 
02744     B0 65 06 F1 | 	add	objptr, ##28080
02748     32 B9 02 F1 | 	add	local10, objptr
0274c     54 BD 02 F6 | 	mov	local12, local02
02750     5E BB 02 F6 | 	mov	local11, local12
02754     5D C1 02 F6 | 	mov	local14, local11
02758     03 C0 66 F0 | 	shl	local14, #3
0275c     32 BF 02 F6 | 	mov	local13, objptr
02760     32 C1 02 F1 | 	add	local14, objptr
02764     60 93 02 FB | 	rdlong	arg01, local14
02768     36 00 00 FF 
0276c     B0 65 86 F1 | 	sub	objptr, ##28080
02770     54 3D B2 FD | 	call	#__system__RTrim_S
02774     3D 93 02 F6 | 	mov	arg01, result1
02778     8C 3C B2 FD | 	call	#__system__LTrim_S
0277c     5C 7B 62 FC | 	wrlong	result1, local10
02780     01 A8 06 F1 | 	add	local02, #1
02784     A8 FF 9F FD | 	jmp	#LR__0127
02788                 | LR__0128
02788     00 A8 06 F6 | 	mov	local02, #0
0278c     D7 86 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
02790                 | ' i=0
02790                 | ' do 
02790                 | LR__0129
02790                 | '   if len(lparts(i).part$)=0 then 
02790     54 AF 02 F6 | 	mov	local05, local02
02794     03 AE 66 F0 | 	shl	local05, #3
02798     32 B1 02 F6 | 	mov	local06, objptr
0279c     36 00 00 FF 
027a0     B0 B1 06 F1 | 	add	local06, ##28080
027a4     58 AF 02 F1 | 	add	local05, local06
027a8     57 93 02 FB | 	rdlong	arg01, local05
027ac     49 B3 02 F6 | 	mov	local07, arg01
027b0                 | LR__0130
027b0     59 7B CA FA | 	rdbyte	result1, local07 wz
027b4     01 B2 06 51 |  if_ne	add	local07, #1
027b8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
027bc     49 B3 8A F1 | 	sub	local07, arg01 wz
027c0     C4 00 90 5D |  if_ne	jmp	#LR__0134
027c4                 | '     if i=k-1 then k-=1  :  exit
027c4     63 AD 02 F6 | 	mov	local04, local17
027c8     01 AC 86 F1 | 	sub	local04, #1
027cc     56 A9 0A F2 | 	cmp	local02, local04 wz
027d0     01 C6 86 A1 |  if_e	sub	local17, #1
027d4     C4 00 90 AD |  if_e	jmp	#LR__0136
027d8                 | '     if i<k-1 then 
027d8     63 AD 02 F6 | 	mov	local04, local17
027dc     01 AC 86 F1 | 	sub	local04, #1
027e0     56 A9 52 F2 | 	cmps	local02, local04 wc
027e4     A0 00 90 3D |  if_ae	jmp	#LR__0133
027e8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
027e8     54 C3 02 F6 | 	mov	local15, local02
027ec     63 E9 02 F6 | 	mov	local34, local17
027f0     01 E8 86 F1 | 	sub	local34, #1
027f4                 | LR__0131
027f4     74 C3 52 F2 | 	cmps	local15, local34 wc
027f8     80 00 90 3D |  if_ae	jmp	#LR__0132
027fc     61 AF 02 F6 | 	mov	local05, local15
02800     01 AE 06 F1 | 	add	local05, #1
02804     03 AE 66 F0 | 	shl	local05, #3
02808     36 00 00 FF 
0280c     B0 65 06 F1 | 	add	objptr, ##28080
02810     32 AF 02 F1 | 	add	local05, objptr
02814     57 AD 02 FB | 	rdlong	local04, local05
02818     61 B1 02 F6 | 	mov	local06, local15
0281c     01 B0 06 F1 | 	add	local06, #1
02820     03 B0 66 F0 | 	shl	local06, #3
02824     32 B1 02 F1 | 	add	local06, objptr
02828     04 B0 06 F1 | 	add	local06, #4
0282c     58 AB 02 FB | 	rdlong	local03, local06
02830     61 B9 02 F6 | 	mov	local10, local15
02834     5C B1 02 F6 | 	mov	local06, local10
02838     03 B0 66 F0 | 	shl	local06, #3
0283c     32 BD 02 F6 | 	mov	local12, objptr
02840     32 B1 02 F1 | 	add	local06, objptr
02844     58 AD 62 FC | 	wrlong	local04, local06
02848     61 BB 02 F6 | 	mov	local11, local15
0284c     5D C1 02 F6 | 	mov	local14, local11
02850     60 BF 02 F6 | 	mov	local13, local14
02854     03 BE 66 F0 | 	shl	local13, #3
02858     32 DD 02 F6 | 	mov	local28, objptr
0285c     32 BF 02 F1 | 	add	local13, objptr
02860     04 BE 06 F1 | 	add	local13, #4
02864     5F AB 62 FC | 	wrlong	local03, local13
02868     04 BE 86 F1 | 	sub	local13, #4
0286c     01 C2 06 F1 | 	add	local15, #1
02870     36 00 00 FF 
02874     B0 65 86 F1 | 	sub	objptr, ##28080
02878     78 FF 9F FD | 	jmp	#LR__0131
0287c                 | LR__0132
0287c     01 C6 86 F1 | 	sub	local17, #1
02880                 | '       if i>0 then i-=1 
02880     01 A8 56 F2 | 	cmps	local02, #1 wc
02884     01 A8 86 31 |  if_ae	sub	local02, #1
02888                 | LR__0133
02888                 | LR__0134
02888     01 A8 06 F1 | 	add	local02, #1
0288c     63 AD 02 F6 | 	mov	local04, local17
02890     01 AC 86 F1 | 	sub	local04, #1
02894     56 A9 5A F2 | 	cmps	local02, local04 wcz
02898     F4 FE 9F ED |  if_be	jmp	#LR__0129
0289c                 | LR__0135
0289c                 | LR__0136
0289c                 | ' 
0289c                 | ' ' 1i: lowercase all that is not a string
0289c                 | ' 
0289c                 | ' for j=0 to k-1
0289c     00 C2 06 F6 | 	mov	local15, #0
028a0     63 EB 02 F6 | 	mov	local35, local17
028a4                 | LR__0137
028a4     75 C3 52 F2 | 	cmps	local15, local35 wc
028a8     C0 00 90 3D |  if_ae	jmp	#LR__0140
028ac                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
028ac     61 AF 02 F6 | 	mov	local05, local15
028b0     03 AE 66 F0 | 	shl	local05, #3
028b4     32 B1 02 F6 | 	mov	local06, objptr
028b8     36 00 00 FF 
028bc     B0 B1 06 F1 | 	add	local06, ##28080
028c0     58 AF 02 F1 | 	add	local05, local06
028c4     57 93 02 FB | 	rdlong	arg01, local05
028c8     01 94 06 F6 | 	mov	arg02, #1
028cc     68 37 B2 FD | 	call	#__system__Left_S
028d0     3D 93 02 F6 | 	mov	arg01, result1
028d4     91 01 00 FF 
028d8     33 95 06 F6 | 	mov	arg02, ##@LR__5511
028dc     D8 1E B2 FD | 	call	#__system___string_cmp
028e0     00 7A 0E F2 | 	cmp	result1, #0 wz
028e4     3C 00 90 5D |  if_ne	jmp	#LR__0138
028e8     61 B1 02 F6 | 	mov	local06, local15
028ec     03 B0 66 F0 | 	shl	local06, #3
028f0     32 BD 02 F6 | 	mov	local12, objptr
028f4     36 00 00 FF 
028f8     B0 BD 06 F1 | 	add	local12, ##28080
028fc     5E B1 02 F1 | 	add	local06, local12
02900     58 93 02 FB | 	rdlong	arg01, local06
02904     01 94 06 F6 | 	mov	arg02, #1
02908     B4 37 B2 FD | 	call	#__system__Right_S
0290c     3D 93 02 F6 | 	mov	arg01, result1
02910     91 01 00 FF 
02914     35 95 06 F6 | 	mov	arg02, ##@LR__5512
02918     9C 1E B2 FD | 	call	#__system___string_cmp
0291c     00 7A 0E F2 | 	cmp	result1, #0 wz
02920     40 00 90 AD |  if_e	jmp	#LR__0139
02924                 | LR__0138
02924     61 B9 02 F6 | 	mov	local10, local15
02928     03 B8 66 F0 | 	shl	local10, #3
0292c     36 00 00 FF 
02930     B0 65 06 F1 | 	add	objptr, ##28080
02934     32 B9 02 F1 | 	add	local10, objptr
02938     61 BD 02 F6 | 	mov	local12, local15
0293c     5E BB 02 F6 | 	mov	local11, local12
02940     5D C1 02 F6 | 	mov	local14, local11
02944     03 C0 66 F0 | 	shl	local14, #3
02948     32 BF 02 F6 | 	mov	local13, objptr
0294c     32 C1 02 F1 | 	add	local14, objptr
02950     60 93 02 FB | 	rdlong	arg01, local14
02954     36 00 00 FF 
02958     B0 65 86 F1 | 	sub	objptr, ##28080
0295c     E8 39 B2 FD | 	call	#__system__LCase_S
02960     5C 7B 62 FC | 	wrlong	result1, local10
02964                 | LR__0139
02964     01 C2 06 F1 | 	add	local15, #1
02968     38 FF 9F FD | 	jmp	#LR__0137
0296c                 | LR__0140
0296c                 | ' 
0296c                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
0296c                 | ' 
0296c                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
0296c     00 A8 06 F6 | 	mov	local02, #0
02970     63 ED 02 F6 | 	mov	local36, local17
02974     01 EC 06 F1 | 	add	local36, #1
02978     D7 1A 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
0297c                 | LR__0141
0297c     76 A9 52 F2 | 	cmps	local02, local36 wc
02980     2C 00 90 3D |  if_ae	jmp	#LR__0143
02984     54 B9 02 F6 | 	mov	local10, local02
02988     03 B8 66 F0 | 	shl	local10, #3
0298c     32 AF 02 F6 | 	mov	local05, objptr
02990     36 00 00 FF 
02994     B0 AF 06 F1 | 	add	local05, ##28080
02998     57 B9 02 F1 | 	add	local10, local05
0299c     04 B8 06 F1 | 	add	local10, #4
029a0     FF FF FF FF 
029a4     5C FF 6B FC | 	wrlong	##-1, local10
029a8     01 A8 06 F1 | 	add	local02, #1
029ac     CC FF 9F FD | 	jmp	#LR__0141
029b0                 | LR__0142
029b0                 | LR__0143
029b0                 | ' 
029b0                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
029b0     36 00 00 FF 
029b4     B0 65 06 F1 | 	add	objptr, ##28080
029b8     32 93 02 FB | 	rdlong	arg01, objptr
029bc     36 00 00 FF 
029c0     B0 65 86 F1 | 	sub	objptr, ##28080
029c4     1C 47 B0 FD | 	call	#_isdec
029c8     00 7A 0E F2 | 	cmp	result1, #0 wz
029cc     01 EE 06 56 |  if_ne	mov	local37, #1
029d0     00 EE 06 A6 |  if_e	mov	local37, #0
029d4                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
029d4     36 00 00 FF 
029d8     B0 65 06 F1 | 	add	objptr, ##28080
029dc     32 93 02 FB | 	rdlong	arg01, objptr
029e0     36 00 00 FF 
029e4     B0 65 86 F1 | 	sub	objptr, ##28080
029e8     91 01 00 FF 
029ec     37 95 06 F6 | 	mov	arg02, ##@LR__5513
029f0     C4 1D B2 FD | 	call	#__system___string_cmp
029f4     00 7A 0E F2 | 	cmp	result1, #0 wz
029f8     01 EE 06 A6 |  if_e	mov	local37, #1
029fc     00 A8 06 F6 | 	mov	local02, #0
02a00                 | ' i=0 : do 
02a00                 | LR__0144
02a00                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02a00     54 AF 02 F6 | 	mov	local05, local02
02a04     03 AE 66 F0 | 	shl	local05, #3
02a08     32 B1 02 F6 | 	mov	local06, objptr
02a0c     36 00 00 FF 
02a10     B0 B1 06 F1 | 	add	local06, ##28080
02a14     58 AF 02 F1 | 	add	local05, local06
02a18     57 93 02 FB | 	rdlong	arg01, local05
02a1c     91 01 00 FF 
02a20     3C 95 06 F6 | 	mov	arg02, ##@LR__5514
02a24     90 1D B2 FD | 	call	#__system___string_cmp
02a28     00 7A 0E F2 | 	cmp	result1, #0 wz
02a2c     0C 00 90 AD |  if_e	jmp	#LR__0145
02a30     01 A8 06 F1 | 	add	local02, #1
02a34     63 A9 5A F2 | 	cmps	local02, local17 wcz
02a38     C4 FF 9F ED |  if_be	jmp	#LR__0144
02a3c                 | LR__0145
02a3c                 | ' if i<k then addptr=i+1	 							' then found
02a3c     63 A9 52 F2 | 	cmps	local02, local17 wc
02a40     54 EF 02 C6 |  if_b	mov	local37, local02
02a44     01 EE 06 C1 |  if_b	add	local37, #1
02a48     36 00 00 FF 
02a4c     B0 65 06 F1 | 	add	objptr, ##28080
02a50                 | ' lp$=lparts(addptr).part$ 
02a50                 | ' 
02a50                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a50     77 AF 02 F6 | 	mov	local05, local37
02a54     03 AE 66 F0 | 	shl	local05, #3
02a58     32 AF 02 F1 | 	add	local05, objptr
02a5c     57 93 02 FB | 	rdlong	arg01, local05
02a60     01 94 06 F6 | 	mov	arg02, #1
02a64     36 00 00 FF 
02a68     B0 65 86 F1 | 	sub	objptr, ##28080
02a6c     C8 35 B2 FD | 	call	#__system__Left_S
02a70     3D 93 02 F6 | 	mov	arg01, result1
02a74     91 01 00 FF 
02a78     41 95 06 F6 | 	mov	arg02, ##@LR__5515
02a7c     38 1D B2 FD | 	call	#__system___string_cmp
02a80     00 7A 0E F2 | 	cmp	result1, #0 wz
02a84     58 01 90 5D |  if_ne	jmp	#LR__0152
02a88     77 B1 02 F6 | 	mov	local06, local37
02a8c     03 B0 66 F0 | 	shl	local06, #3
02a90     32 BD 02 F6 | 	mov	local12, objptr
02a94     36 00 00 FF 
02a98     B0 BD 06 F1 | 	add	local12, ##28080
02a9c     5E B1 02 F1 | 	add	local06, local12
02aa0     58 93 02 FB | 	rdlong	arg01, local06
02aa4     49 B3 02 F6 | 	mov	local07, arg01
02aa8     D7 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
02aac                 | LR__0146
02aac     59 7B CA FA | 	rdbyte	result1, local07 wz
02ab0     01 B2 06 51 |  if_ne	add	local07, #1
02ab4     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
02ab8                 | LR__0147
02ab8     49 B3 82 F1 | 	sub	local07, arg01
02abc     02 B2 56 F2 | 	cmps	local07, #2 wc
02ac0     1C 01 90 CD |  if_b	jmp	#LR__0152
02ac4     01 C6 06 F1 | 	add	local17, #1
02ac8                 | '   k+=1
02ac8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02ac8     63 A9 02 F6 | 	mov	local02, local17
02acc     77 F1 02 F6 | 	mov	local38, local37
02ad0     01 F0 06 F1 | 	add	local38, #1
02ad4     36 00 00 FF 
02ad8     B0 65 06 F1 | 	add	objptr, ##28080
02adc     D7 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02ae0                 | LR__0148
02ae0     54 AF 02 F6 | 	mov	local05, local02
02ae4     01 AE 86 F1 | 	sub	local05, #1
02ae8     03 AE 66 F0 | 	shl	local05, #3
02aec     32 AF 02 F1 | 	add	local05, objptr
02af0     57 AD 02 FB | 	rdlong	local04, local05
02af4     54 B1 02 F6 | 	mov	local06, local02
02af8     01 B0 86 F1 | 	sub	local06, #1
02afc     03 B0 66 F0 | 	shl	local06, #3
02b00     32 B1 02 F1 | 	add	local06, objptr
02b04     04 B0 06 F1 | 	add	local06, #4
02b08     58 AB 02 FB | 	rdlong	local03, local06
02b0c     54 B1 02 F6 | 	mov	local06, local02
02b10     03 B0 66 F0 | 	shl	local06, #3
02b14     32 B1 02 F1 | 	add	local06, objptr
02b18     58 AD 62 FC | 	wrlong	local04, local06
02b1c     54 BF 02 F6 | 	mov	local13, local02
02b20     03 BE 66 F0 | 	shl	local13, #3
02b24     32 BF 02 F1 | 	add	local13, objptr
02b28     04 BE 06 F1 | 	add	local13, #4
02b2c     5F AB 62 FC | 	wrlong	local03, local13
02b30     01 A8 86 F1 | 	sub	local02, #1
02b34     78 A9 52 F2 | 	cmps	local02, local38 wc
02b38     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02b3c                 | LR__0149
02b3c     77 B9 02 F6 | 	mov	local10, local37
02b40     01 B8 06 F1 | 	add	local10, #1
02b44     03 B8 66 F0 | 	shl	local10, #3
02b48     32 B9 02 F1 | 	add	local10, objptr
02b4c     77 C1 02 F6 | 	mov	local14, local37
02b50     03 C0 66 F0 | 	shl	local14, #3
02b54     32 C1 02 F1 | 	add	local14, objptr
02b58     60 B1 02 FB | 	rdlong	local06, local14
02b5c     77 BF 02 F6 | 	mov	local13, local37
02b60     5F DD 02 F6 | 	mov	local28, local13
02b64     6E D1 02 F6 | 	mov	local22, local28
02b68     03 D0 66 F0 | 	shl	local22, #3
02b6c     32 D3 02 F6 | 	mov	local23, objptr
02b70     32 D1 02 F1 | 	add	local22, objptr
02b74     68 93 02 FB | 	rdlong	arg01, local22
02b78     36 00 00 FF 
02b7c     B0 65 86 F1 | 	sub	objptr, ##28080
02b80     49 B3 02 F6 | 	mov	local07, arg01
02b84     D7 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02b88                 | LR__0150
02b88     59 7B CA FA | 	rdbyte	result1, local07 wz
02b8c     01 B2 06 51 |  if_ne	add	local07, #1
02b90     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02b94                 | LR__0151
02b94     49 B3 82 F1 | 	sub	local07, arg01
02b98     59 C1 02 F6 | 	mov	local14, local07
02b9c     60 BB 02 F6 | 	mov	local11, local14
02ba0     01 BA 86 F1 | 	sub	local11, #1
02ba4     5D BD 02 F6 | 	mov	local12, local11
02ba8     58 93 02 F6 | 	mov	arg01, local06
02bac     5E 95 02 F6 | 	mov	arg02, local12
02bb0     0C 35 B2 FD | 	call	#__system__Right_S
02bb4     5C 7B 62 FC | 	wrlong	result1, local10
02bb8     77 B9 02 F6 | 	mov	local10, local37
02bbc     03 B8 66 F0 | 	shl	local10, #3
02bc0     32 AF 02 F6 | 	mov	local05, objptr
02bc4     36 00 00 FF 
02bc8     B0 AF 06 F1 | 	add	local05, ##28080
02bcc     57 B9 02 F1 | 	add	local10, local05
02bd0     91 01 00 FF 
02bd4     43 B1 06 F6 | 	mov	local06, ##@LR__5516
02bd8     5C B1 62 FC | 	wrlong	local06, local10
02bdc     9C 01 90 FD | 	jmp	#LR__0160
02be0                 | LR__0152
02be0     77 B1 02 F6 | 	mov	local06, local37
02be4     03 B0 66 F0 | 	shl	local06, #3
02be8     32 BD 02 F6 | 	mov	local12, objptr
02bec     36 00 00 FF 
02bf0     B0 BD 06 F1 | 	add	local12, ##28080
02bf4     5E B1 02 F1 | 	add	local06, local12
02bf8     58 95 02 FB | 	rdlong	arg02, local06
02bfc     91 01 00 FF 
02c00     45 97 06 F6 | 	mov	arg03, ##@LR__5517
02c04     01 92 06 F6 | 	mov	arg01, #1
02c08     74 39 B2 FD | 	call	#__system__Instr
02c0c     3D F3 02 F6 | 	mov	local39, result1
02c10                 | ' 
02c10                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02c10                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02c10     01 F2 56 F2 | 	cmps	local39, #1 wc
02c14     64 01 90 CD |  if_b	jmp	#LR__0159
02c18     77 AF 02 F6 | 	mov	local05, local37
02c1c     03 AE 66 F0 | 	shl	local05, #3
02c20     32 B1 02 F6 | 	mov	local06, objptr
02c24     36 00 00 FF 
02c28     B0 B1 06 F1 | 	add	local06, ##28080
02c2c     58 AF 02 F1 | 	add	local05, local06
02c30     57 93 02 FB | 	rdlong	arg01, local05
02c34     49 B3 02 F6 | 	mov	local07, arg01
02c38     D7 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02c3c                 | LR__0153
02c3c     59 7B CA FA | 	rdbyte	result1, local07 wz
02c40     01 B2 06 51 |  if_ne	add	local07, #1
02c44     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02c48                 | LR__0154
02c48     49 B3 82 F1 | 	sub	local07, arg01
02c4c     59 F3 52 F2 | 	cmps	local39, local07 wc
02c50     28 01 90 3D |  if_ae	jmp	#LR__0159
02c54     01 C6 06 F1 | 	add	local17, #1
02c58                 | '   k+=1
02c58                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02c58     63 A9 02 F6 | 	mov	local02, local17
02c5c     77 F5 02 F6 | 	mov	local40, local37
02c60     01 F4 06 F1 | 	add	local40, #1
02c64     36 00 00 FF 
02c68     B0 65 06 F1 | 	add	objptr, ##28080
02c6c     D7 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02c70                 | LR__0155
02c70     54 AF 02 F6 | 	mov	local05, local02
02c74     01 AE 86 F1 | 	sub	local05, #1
02c78     03 AE 66 F0 | 	shl	local05, #3
02c7c     32 AF 02 F1 | 	add	local05, objptr
02c80     57 AD 02 FB | 	rdlong	local04, local05
02c84     54 B1 02 F6 | 	mov	local06, local02
02c88     01 B0 86 F1 | 	sub	local06, #1
02c8c     03 B0 66 F0 | 	shl	local06, #3
02c90     32 B1 02 F1 | 	add	local06, objptr
02c94     04 B0 06 F1 | 	add	local06, #4
02c98     58 AB 02 FB | 	rdlong	local03, local06
02c9c     54 B1 02 F6 | 	mov	local06, local02
02ca0     03 B0 66 F0 | 	shl	local06, #3
02ca4     32 B1 02 F1 | 	add	local06, objptr
02ca8     58 AD 62 FC | 	wrlong	local04, local06
02cac     54 BF 02 F6 | 	mov	local13, local02
02cb0     03 BE 66 F0 | 	shl	local13, #3
02cb4     32 BF 02 F1 | 	add	local13, objptr
02cb8     04 BE 06 F1 | 	add	local13, #4
02cbc     5F AB 62 FC | 	wrlong	local03, local13
02cc0     01 A8 86 F1 | 	sub	local02, #1
02cc4     7A A9 52 F2 | 	cmps	local02, local40 wc
02cc8     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02ccc                 | LR__0156
02ccc     77 B9 02 F6 | 	mov	local10, local37
02cd0     01 B8 06 F1 | 	add	local10, #1
02cd4     03 B8 66 F0 | 	shl	local10, #3
02cd8     32 B9 02 F1 | 	add	local10, objptr
02cdc     77 C1 02 F6 | 	mov	local14, local37
02ce0     03 C0 66 F0 | 	shl	local14, #3
02ce4     32 C1 02 F1 | 	add	local14, objptr
02ce8     60 B1 02 FB | 	rdlong	local06, local14
02cec     77 DD 02 F6 | 	mov	local28, local37
02cf0     6E D1 02 F6 | 	mov	local22, local28
02cf4     03 D0 66 F0 | 	shl	local22, #3
02cf8     32 D3 02 F6 | 	mov	local23, objptr
02cfc     32 D1 02 F1 | 	add	local22, objptr
02d00     68 93 02 FB | 	rdlong	arg01, local22
02d04     36 00 00 FF 
02d08     B0 65 86 F1 | 	sub	objptr, ##28080
02d0c     49 B3 02 F6 | 	mov	local07, arg01
02d10     D7 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02d14                 | LR__0157
02d14     59 7B CA FA | 	rdbyte	result1, local07 wz
02d18     01 B2 06 51 |  if_ne	add	local07, #1
02d1c     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02d20                 | LR__0158
02d20     49 B3 82 F1 | 	sub	local07, arg01
02d24     59 95 02 F6 | 	mov	arg02, local07
02d28     79 95 82 F1 | 	sub	arg02, local39
02d2c     58 93 02 F6 | 	mov	arg01, local06
02d30     8C 33 B2 FD | 	call	#__system__Right_S
02d34     5C 7B 62 FC | 	wrlong	result1, local10
02d38     77 B9 02 F6 | 	mov	local10, local37
02d3c     03 B8 66 F0 | 	shl	local10, #3
02d40     36 00 00 FF 
02d44     B0 65 06 F1 | 	add	objptr, ##28080
02d48     32 B9 02 F1 | 	add	local10, objptr
02d4c     77 BB 02 F6 | 	mov	local11, local37
02d50     5D C1 02 F6 | 	mov	local14, local11
02d54     03 C0 66 F0 | 	shl	local14, #3
02d58     32 BF 02 F6 | 	mov	local13, objptr
02d5c     32 C1 02 F1 | 	add	local14, objptr
02d60     60 93 02 FB | 	rdlong	arg01, local14
02d64     79 BD 02 F6 | 	mov	local12, local39
02d68     5E 95 02 F6 | 	mov	arg02, local12
02d6c     36 00 00 FF 
02d70     B0 65 86 F1 | 	sub	objptr, ##28080
02d74     C0 32 B2 FD | 	call	#__system__Left_S
02d78     5C 7B 62 FC | 	wrlong	result1, local10
02d7c                 | LR__0159
02d7c                 | LR__0160
02d7c     77 B9 02 F6 | 	mov	local10, local37
02d80     03 B8 66 F0 | 	shl	local10, #3
02d84     32 AF 02 F6 | 	mov	local05, objptr
02d88     36 00 00 FF 
02d8c     B0 AF 06 F1 | 	add	local05, ##28080
02d90     57 B9 02 F1 | 	add	local10, local05
02d94     5C F7 02 FB | 	rdlong	local41, local10
02d98                 | ' 
02d98                 | ' 825
02d98                 | ' lp$=lparts(addptr).part$ 
02d98                 | ' 
02d98                 | ' ' process mouse/cursor/click on/off
02d98                 | ' 
02d98                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02d98     91 01 00 FF 
02d9c     47 95 06 F6 | 	mov	arg02, ##@LR__5518
02da0     7B 93 02 F6 | 	mov	arg01, local41
02da4     10 1A B2 FD | 	call	#__system___string_cmp
02da8     00 7A 0E F2 | 	cmp	result1, #0 wz
02dac     30 00 90 AD |  if_e	jmp	#LR__0161
02db0     91 01 00 FF 
02db4     4D 95 06 F6 | 	mov	arg02, ##@LR__5519
02db8     7B 93 02 F6 | 	mov	arg01, local41
02dbc     F8 19 B2 FD | 	call	#__system___string_cmp
02dc0     00 7A 0E F2 | 	cmp	result1, #0 wz
02dc4     18 00 90 AD |  if_e	jmp	#LR__0161
02dc8     91 01 00 FF 
02dcc     54 95 06 F6 | 	mov	arg02, ##@LR__5520
02dd0     7B 93 02 F6 | 	mov	arg01, local41
02dd4     E0 19 B2 FD | 	call	#__system___string_cmp
02dd8     00 7A 0E F2 | 	cmp	result1, #0 wz
02ddc     D8 00 90 5D |  if_ne	jmp	#LR__0164
02de0                 | LR__0161
02de0                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02de0     77 AF 02 F6 | 	mov	local05, local37
02de4     01 AE 06 F1 | 	add	local05, #1
02de8     03 AE 66 F0 | 	shl	local05, #3
02dec     32 B1 02 F6 | 	mov	local06, objptr
02df0     36 00 00 FF 
02df4     B0 B1 06 F1 | 	add	local06, ##28080
02df8     58 AF 02 F1 | 	add	local05, local06
02dfc     57 93 02 FB | 	rdlong	arg01, local05
02e00     91 01 00 FF 
02e04     5A 95 06 F6 | 	mov	arg02, ##@LR__5521
02e08     AC 19 B2 FD | 	call	#__system___string_cmp
02e0c     00 7A 0E F2 | 	cmp	result1, #0 wz
02e10     38 00 90 5D |  if_ne	jmp	#LR__0162
02e14     77 B9 02 F6 | 	mov	local10, local37
02e18     01 B8 06 F1 | 	add	local10, #1
02e1c     03 B8 66 F0 | 	shl	local10, #3
02e20     36 00 00 FF 
02e24     B0 65 06 F1 | 	add	objptr, ##28080
02e28     32 B9 02 F1 | 	add	local10, objptr
02e2c     91 01 00 FF 
02e30     5D B1 06 F6 | 	mov	local06, ##@LR__5522
02e34     5C B1 62 FC | 	wrlong	local06, local10
02e38     14 64 06 F1 | 	add	objptr, #20
02e3c     01 00 80 FF 
02e40     32 01 68 FC | 	wrlong	##512, objptr
02e44     36 00 00 FF 
02e48     C4 65 86 F1 | 	sub	objptr, ##28100
02e4c                 | LR__0162
02e4c                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02e4c     77 AF 02 F6 | 	mov	local05, local37
02e50     01 AE 06 F1 | 	add	local05, #1
02e54     03 AE 66 F0 | 	shl	local05, #3
02e58     32 B1 02 F6 | 	mov	local06, objptr
02e5c     36 00 00 FF 
02e60     B0 B1 06 F1 | 	add	local06, ##28080
02e64     58 AF 02 F1 | 	add	local05, local06
02e68     57 93 02 FB | 	rdlong	arg01, local05
02e6c     91 01 00 FF 
02e70     5F 95 06 F6 | 	mov	arg02, ##@LR__5523
02e74     40 19 B2 FD | 	call	#__system___string_cmp
02e78     00 7A 0E F2 | 	cmp	result1, #0 wz
02e7c     38 00 90 5D |  if_ne	jmp	#LR__0163
02e80     77 B9 02 F6 | 	mov	local10, local37
02e84     01 B8 06 F1 | 	add	local10, #1
02e88     03 B8 66 F0 | 	shl	local10, #3
02e8c     36 00 00 FF 
02e90     B0 65 06 F1 | 	add	objptr, ##28080
02e94     32 B9 02 F1 | 	add	local10, objptr
02e98     91 01 00 FF 
02e9c     63 B1 06 F6 | 	mov	local06, ##@LR__5524
02ea0     5C B1 62 FC | 	wrlong	local06, local10
02ea4     14 64 06 F1 | 	add	objptr, #20
02ea8     01 00 80 FF 
02eac     32 01 68 FC | 	wrlong	##512, objptr
02eb0     36 00 00 FF 
02eb4     C4 65 86 F1 | 	sub	objptr, ##28100
02eb8                 | LR__0163
02eb8                 | LR__0164
02eb8                 | ' 		
02eb8                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02eb8                 | ' 
02eb8                 | ' if (lp$="mode" orelse lp$="m.") then 
02eb8     91 01 00 FF 
02ebc     65 95 06 F6 | 	mov	arg02, ##@LR__5525
02ec0     7B 93 02 F6 | 	mov	arg01, local41
02ec4     F0 18 B2 FD | 	call	#__system___string_cmp
02ec8     00 7A 0E F2 | 	cmp	result1, #0 wz
02ecc     18 00 90 AD |  if_e	jmp	#LR__0165
02ed0     91 01 00 FF 
02ed4     6A 95 06 F6 | 	mov	arg02, ##@LR__5526
02ed8     7B 93 02 F6 | 	mov	arg01, local41
02edc     D8 18 B2 FD | 	call	#__system___string_cmp
02ee0     00 7A 0E F2 | 	cmp	result1, #0 wz
02ee4     28 02 90 5D |  if_ne	jmp	#LR__0172
02ee8                 | LR__0165
02ee8                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02ee8     77 AF 02 F6 | 	mov	local05, local37
02eec     01 AE 06 F1 | 	add	local05, #1
02ef0     03 AE 66 F0 | 	shl	local05, #3
02ef4     32 B1 02 F6 | 	mov	local06, objptr
02ef8     36 00 00 FF 
02efc     B0 B1 06 F1 | 	add	local06, ##28080
02f00     58 AF 02 F1 | 	add	local05, local06
02f04     57 93 02 FB | 	rdlong	arg01, local05
02f08     91 01 00 FF 
02f0c     6D 95 06 F6 | 	mov	arg02, ##@LR__5527
02f10     A4 18 B2 FD | 	call	#__system___string_cmp
02f14     00 7A 0E F2 | 	cmp	result1, #0 wz
02f18     28 00 90 5D |  if_ne	jmp	#LR__0166
02f1c     77 B9 02 F6 | 	mov	local10, local37
02f20     01 B8 06 F1 | 	add	local10, #1
02f24     03 B8 66 F0 | 	shl	local10, #3
02f28     32 AF 02 F6 | 	mov	local05, objptr
02f2c     36 00 00 FF 
02f30     B0 AF 06 F1 | 	add	local05, ##28080
02f34     57 B9 02 F1 | 	add	local10, local05
02f38     91 01 00 FF 
02f3c     73 B1 06 F6 | 	mov	local06, ##@LR__5528
02f40     5C B1 62 FC | 	wrlong	local06, local10
02f44                 | LR__0166
02f44                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02f44     77 AF 02 F6 | 	mov	local05, local37
02f48     01 AE 06 F1 | 	add	local05, #1
02f4c     03 AE 66 F0 | 	shl	local05, #3
02f50     32 B1 02 F6 | 	mov	local06, objptr
02f54     36 00 00 FF 
02f58     B0 B1 06 F1 | 	add	local06, ##28080
02f5c     58 AF 02 F1 | 	add	local05, local06
02f60     57 93 02 FB | 	rdlong	arg01, local05
02f64     91 01 00 FF 
02f68     75 95 06 F6 | 	mov	arg02, ##@LR__5529
02f6c     48 18 B2 FD | 	call	#__system___string_cmp
02f70     00 7A 0E F2 | 	cmp	result1, #0 wz
02f74     28 00 90 5D |  if_ne	jmp	#LR__0167
02f78     77 B9 02 F6 | 	mov	local10, local37
02f7c     01 B8 06 F1 | 	add	local10, #1
02f80     03 B8 66 F0 | 	shl	local10, #3
02f84     32 AF 02 F6 | 	mov	local05, objptr
02f88     36 00 00 FF 
02f8c     B0 AF 06 F1 | 	add	local05, ##28080
02f90     57 B9 02 F1 | 	add	local10, local05
02f94     91 01 00 FF 
02f98     7E B1 06 F6 | 	mov	local06, ##@LR__5530
02f9c     5C B1 62 FC | 	wrlong	local06, local10
02fa0                 | LR__0167
02fa0                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02fa0     77 AF 02 F6 | 	mov	local05, local37
02fa4     01 AE 06 F1 | 	add	local05, #1
02fa8     03 AE 66 F0 | 	shl	local05, #3
02fac     32 B1 02 F6 | 	mov	local06, objptr
02fb0     36 00 00 FF 
02fb4     B0 B1 06 F1 | 	add	local06, ##28080
02fb8     58 AF 02 F1 | 	add	local05, local06
02fbc     57 93 02 FB | 	rdlong	arg01, local05
02fc0     91 01 00 FF 
02fc4     80 95 06 F6 | 	mov	arg02, ##@LR__5531
02fc8     EC 17 B2 FD | 	call	#__system___string_cmp
02fcc     00 7A 0E F2 | 	cmp	result1, #0 wz
02fd0     28 00 90 5D |  if_ne	jmp	#LR__0168
02fd4     77 B9 02 F6 | 	mov	local10, local37
02fd8     01 B8 06 F1 | 	add	local10, #1
02fdc     03 B8 66 F0 | 	shl	local10, #3
02fe0     32 AF 02 F6 | 	mov	local05, objptr
02fe4     36 00 00 FF 
02fe8     B0 AF 06 F1 | 	add	local05, ##28080
02fec     57 B9 02 F1 | 	add	local10, local05
02ff0     91 01 00 FF 
02ff4     89 B1 06 F6 | 	mov	local06, ##@LR__5532
02ff8     5C B1 62 FC | 	wrlong	local06, local10
02ffc                 | LR__0168
02ffc                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02ffc     77 AF 02 F6 | 	mov	local05, local37
03000     01 AE 06 F1 | 	add	local05, #1
03004     03 AE 66 F0 | 	shl	local05, #3
03008     32 B1 02 F6 | 	mov	local06, objptr
0300c     36 00 00 FF 
03010     B0 B1 06 F1 | 	add	local06, ##28080
03014     58 AF 02 F1 | 	add	local05, local06
03018     57 93 02 FB | 	rdlong	arg01, local05
0301c     91 01 00 FF 
03020     8B 95 06 F6 | 	mov	arg02, ##@LR__5533
03024     90 17 B2 FD | 	call	#__system___string_cmp
03028     00 7A 0E F2 | 	cmp	result1, #0 wz
0302c     28 00 90 5D |  if_ne	jmp	#LR__0169
03030     77 B9 02 F6 | 	mov	local10, local37
03034     01 B8 06 F1 | 	add	local10, #1
03038     03 B8 66 F0 | 	shl	local10, #3
0303c     32 AF 02 F6 | 	mov	local05, objptr
03040     36 00 00 FF 
03044     B0 AF 06 F1 | 	add	local05, ##28080
03048     57 B9 02 F1 | 	add	local10, local05
0304c     91 01 00 FF 
03050     94 B1 06 F6 | 	mov	local06, ##@LR__5534
03054     5C B1 62 FC | 	wrlong	local06, local10
03058                 | LR__0169
03058                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
03058     77 AF 02 F6 | 	mov	local05, local37
0305c     01 AE 06 F1 | 	add	local05, #1
03060     03 AE 66 F0 | 	shl	local05, #3
03064     32 B1 02 F6 | 	mov	local06, objptr
03068     36 00 00 FF 
0306c     B0 B1 06 F1 | 	add	local06, ##28080
03070     58 AF 02 F1 | 	add	local05, local06
03074     57 93 02 FB | 	rdlong	arg01, local05
03078     91 01 00 FF 
0307c     96 95 06 F6 | 	mov	arg02, ##@LR__5535
03080     34 17 B2 FD | 	call	#__system___string_cmp
03084     00 7A 0E F2 | 	cmp	result1, #0 wz
03088     28 00 90 5D |  if_ne	jmp	#LR__0170
0308c     77 B9 02 F6 | 	mov	local10, local37
03090     01 B8 06 F1 | 	add	local10, #1
03094     03 B8 66 F0 | 	shl	local10, #3
03098     32 AF 02 F6 | 	mov	local05, objptr
0309c     36 00 00 FF 
030a0     B0 AF 06 F1 | 	add	local05, ##28080
030a4     57 B9 02 F1 | 	add	local10, local05
030a8     91 01 00 FF 
030ac     99 B1 06 F6 | 	mov	local06, ##@LR__5536
030b0     5C B1 62 FC | 	wrlong	local06, local10
030b4                 | LR__0170
030b4                 | '   if lparts(addptr+1).part$="amiga" then lparts(addptr+1).part$="5"  
030b4     77 AF 02 F6 | 	mov	local05, local37
030b8     01 AE 06 F1 | 	add	local05, #1
030bc     03 AE 66 F0 | 	shl	local05, #3
030c0     32 B1 02 F6 | 	mov	local06, objptr
030c4     36 00 00 FF 
030c8     B0 B1 06 F1 | 	add	local06, ##28080
030cc     58 AF 02 F1 | 	add	local05, local06
030d0     57 93 02 FB | 	rdlong	arg01, local05
030d4     91 01 00 FF 
030d8     9B 95 06 F6 | 	mov	arg02, ##@LR__5537
030dc     D8 16 B2 FD | 	call	#__system___string_cmp
030e0     00 7A 0E F2 | 	cmp	result1, #0 wz
030e4     28 00 90 5D |  if_ne	jmp	#LR__0171
030e8     77 B9 02 F6 | 	mov	local10, local37
030ec     01 B8 06 F1 | 	add	local10, #1
030f0     03 B8 66 F0 | 	shl	local10, #3
030f4     32 AF 02 F6 | 	mov	local05, objptr
030f8     36 00 00 FF 
030fc     B0 AF 06 F1 | 	add	local05, ##28080
03100     57 B9 02 F1 | 	add	local10, local05
03104     91 01 00 FF 
03108     A1 B1 06 F6 | 	mov	local06, ##@LR__5538
0310c     5C B1 62 FC | 	wrlong	local06, local10
03110                 | LR__0171
03110                 | LR__0172
03110                 | ' 
03110                 | ' ' find part types 
03110                 | ' 
03110                 | ' for i=0 to k-1
03110     00 A8 06 F6 | 	mov	local02, #0
03114     63 F9 02 F6 | 	mov	local42, local17
03118                 | LR__0173
03118     7C A9 52 F2 | 	cmps	local02, local42 wc
0311c     58 07 90 3D |  if_ae	jmp	#LR__0185
03120     54 B9 02 F6 | 	mov	local10, local02
03124     03 B8 66 F0 | 	shl	local10, #3
03128     36 00 00 FF 
0312c     B0 65 06 F1 | 	add	objptr, ##28080
03130     32 B9 02 F1 | 	add	local10, objptr
03134     54 BB 02 F6 | 	mov	local11, local02
03138     5D C1 02 F6 | 	mov	local14, local11
0313c     60 BF 02 F6 | 	mov	local13, local14
03140     03 BE 66 F0 | 	shl	local13, #3
03144     32 BF 02 F1 | 	add	local13, objptr
03148     5F 93 02 FB | 	rdlong	arg01, local13
0314c     36 00 00 FF 
03150     B0 65 86 F1 | 	sub	objptr, ##28080
03154     A8 1A B0 FD | 	call	#_isseparator
03158     3D 7B E2 F8 | 	getbyte	result1, result1, #0
0315c     04 B8 06 F1 | 	add	local10, #4
03160     5C 7B 62 FC | 	wrlong	result1, local10
03164                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03164     54 B9 02 F6 | 	mov	local10, local02
03168     03 B8 66 F0 | 	shl	local10, #3
0316c     32 AF 02 F6 | 	mov	local05, objptr
03170     36 00 00 FF 
03174     B0 AF 06 F1 | 	add	local05, ##28080
03178     57 B9 02 F1 | 	add	local10, local05
0317c     04 B8 06 F1 | 	add	local10, #4
03180     5C BD 02 FB | 	rdlong	local12, local10
03184     01 BC 56 F2 | 	cmps	local12, #1 wc
03188     E4 06 90 3D |  if_ae	jmp	#LR__0184
0318c     54 B9 02 F6 | 	mov	local10, local02
03190     03 B8 66 F0 | 	shl	local10, #3
03194     36 00 00 FF 
03198     B0 65 06 F1 | 	add	objptr, ##28080
0319c     32 B9 02 F1 | 	add	local10, objptr
031a0     54 BB 02 F6 | 	mov	local11, local02
031a4     5D C1 02 F6 | 	mov	local14, local11
031a8     60 BF 02 F6 | 	mov	local13, local14
031ac     03 BE 66 F0 | 	shl	local13, #3
031b0     32 BF 02 F1 | 	add	local13, objptr
031b4     5F 93 02 FB | 	rdlong	arg01, local13
031b8     36 00 00 FF 
031bc     B0 65 86 F1 | 	sub	objptr, ##28080
031c0     88 12 B0 FD | 	call	#_isoperator
031c4     3D 7B E2 F8 | 	getbyte	result1, result1, #0
031c8     04 B8 06 F1 | 	add	local10, #4
031cc     5C 7B 62 FC | 	wrlong	result1, local10
031d0                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031d0     54 B9 02 F6 | 	mov	local10, local02
031d4     03 B8 66 F0 | 	shl	local10, #3
031d8     32 AF 02 F6 | 	mov	local05, objptr
031dc     36 00 00 FF 
031e0     B0 AF 06 F1 | 	add	local05, ##28080
031e4     57 B9 02 F1 | 	add	local10, local05
031e8     04 B8 06 F1 | 	add	local10, #4
031ec     5C BD 02 FB | 	rdlong	local12, local10
031f0     01 BC 56 F2 | 	cmps	local12, #1 wc
031f4     78 06 90 3D |  if_ae	jmp	#LR__0184
031f8     54 B9 02 F6 | 	mov	local10, local02
031fc     03 B8 66 F0 | 	shl	local10, #3
03200     36 00 00 FF 
03204     B0 65 06 F1 | 	add	objptr, ##28080
03208     32 B9 02 F1 | 	add	local10, objptr
0320c     54 BB 02 F6 | 	mov	local11, local02
03210     5D C1 02 F6 | 	mov	local14, local11
03214     60 BF 02 F6 | 	mov	local13, local14
03218     03 BE 66 F0 | 	shl	local13, #3
0321c     32 BF 02 F1 | 	add	local13, objptr
03220     5F 93 02 FB | 	rdlong	arg01, local13
03224     36 00 00 FF 
03228     B0 65 86 F1 | 	sub	objptr, ##28080
0322c                 | ' 
0322c                 | ' select case s
0322c     92 01 00 FF 
03230     A6 94 06 F6 | 	mov	arg02, ##@LR__5629
03234     80 15 B2 FD | 	call	#__system___string_cmp
03238     00 7A 0E F2 | 	cmp	result1, #0 wz
0323c     1B 7A 06 A6 |  if_e	mov	result1, #27
03240     00 7A 06 56 |  if_ne	mov	result1, #0
03244     3D 7B E2 F8 | 	getbyte	result1, result1, #0
03248     04 B8 06 F1 | 	add	local10, #4
0324c     5C 7B 62 FC | 	wrlong	result1, local10
03250                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03250     54 B9 02 F6 | 	mov	local10, local02
03254     03 B8 66 F0 | 	shl	local10, #3
03258     32 AF 02 F6 | 	mov	local05, objptr
0325c     36 00 00 FF 
03260     B0 AF 06 F1 | 	add	local05, ##28080
03264     57 B9 02 F1 | 	add	local10, local05
03268     04 B8 06 F1 | 	add	local10, #4
0326c     5C BD 02 FB | 	rdlong	local12, local10
03270     01 BC 56 F2 | 	cmps	local12, #1 wc
03274     F8 05 90 3D |  if_ae	jmp	#LR__0184
03278     54 B9 02 F6 | 	mov	local10, local02
0327c     03 B8 66 F0 | 	shl	local10, #3
03280     36 00 00 FF 
03284     B0 65 06 F1 | 	add	objptr, ##28080
03288     32 B9 02 F1 | 	add	local10, objptr
0328c     54 BB 02 F6 | 	mov	local11, local02
03290     5D C1 02 F6 | 	mov	local14, local11
03294     60 BF 02 F6 | 	mov	local13, local14
03298     03 BE 66 F0 | 	shl	local13, #3
0329c     32 BF 02 F1 | 	add	local13, objptr
032a0     5F 93 02 FB | 	rdlong	arg01, local13
032a4     36 00 00 FF 
032a8     B0 65 86 F1 | 	sub	objptr, ##28080
032ac     50 1B B0 FD | 	call	#_iscommand
032b0     3D 7B E2 F8 | 	getbyte	result1, result1, #0
032b4     04 B8 06 F1 | 	add	local10, #4
032b8     5C 7B 62 FC | 	wrlong	result1, local10
032bc                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
032bc     54 B9 02 F6 | 	mov	local10, local02
032c0     03 B8 66 F0 | 	shl	local10, #3
032c4     32 AF 02 F6 | 	mov	local05, objptr
032c8     36 00 00 FF 
032cc     B0 AF 06 F1 | 	add	local05, ##28080
032d0     57 B9 02 F1 | 	add	local10, local05
032d4     04 B8 06 F1 | 	add	local10, #4
032d8     5C BD 02 FB | 	rdlong	local12, local10
032dc     01 BC 56 F2 | 	cmps	local12, #1 wc
032e0     8C 05 90 3D |  if_ae	jmp	#LR__0184
032e4     54 B9 02 F6 | 	mov	local10, local02
032e8     03 B8 66 F0 | 	shl	local10, #3
032ec     36 00 00 FF 
032f0     B0 65 06 F1 | 	add	objptr, ##28080
032f4     32 B9 02 F1 | 	add	local10, objptr
032f8     54 BB 02 F6 | 	mov	local11, local02
032fc     5D C1 02 F6 | 	mov	local14, local11
03300     60 BF 02 F6 | 	mov	local13, local14
03304     03 BE 66 F0 | 	shl	local13, #3
03308     32 DD 02 F6 | 	mov	local28, objptr
0330c     32 BF 02 F1 | 	add	local13, objptr
03310     5F 93 02 FB | 	rdlong	arg01, local13
03314     36 00 00 FF 
03318     B0 65 86 F1 | 	sub	objptr, ##28080
0331c     A0 2C B0 FD | 	call	#_isfunction
03320     3D 7B E2 F8 | 	getbyte	result1, result1, #0
03324     04 B8 06 F1 | 	add	local10, #4
03328     5C 7B 62 FC | 	wrlong	result1, local10
0332c                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0332c     54 B9 02 F6 | 	mov	local10, local02
03330     03 B8 66 F0 | 	shl	local10, #3
03334     32 AF 02 F6 | 	mov	local05, objptr
03338     36 00 00 FF 
0333c     B0 AF 06 F1 | 	add	local05, ##28080
03340     57 B9 02 F1 | 	add	local10, local05
03344     04 B8 06 F1 | 	add	local10, #4
03348     5C BD 02 FB | 	rdlong	local12, local10
0334c     01 BC 56 F2 | 	cmps	local12, #1 wc
03350     1C 05 90 3D |  if_ae	jmp	#LR__0184
03354     54 B9 02 F6 | 	mov	local10, local02
03358     03 B8 66 F0 | 	shl	local10, #3
0335c     36 00 00 FF 
03360     B0 65 06 F1 | 	add	objptr, ##28080
03364     32 B9 02 F1 | 	add	local10, objptr
03368     54 BB 02 F6 | 	mov	local11, local02
0336c     5D C1 02 F6 | 	mov	local14, local11
03370     03 C0 66 F0 | 	shl	local14, #3
03374     32 BF 02 F6 | 	mov	local13, objptr
03378     32 C1 02 F1 | 	add	local14, objptr
0337c     60 93 02 FB | 	rdlong	arg01, local14
03380     36 00 00 FF 
03384     B0 65 86 F1 | 	sub	objptr, ##28080
03388     08 15 B0 FD | 	call	#_isnotename
0338c     04 B8 06 F1 | 	add	local10, #4
03390     5C 7B 62 FC | 	wrlong	result1, local10
03394                 | ' lparts(i).token=isnotename(lparts(i).part$) 
03394                 | ' if lparts(i).token>0 then 
03394     54 B9 02 F6 | 	mov	local10, local02
03398     03 B8 66 F0 | 	shl	local10, #3
0339c     32 AF 02 F6 | 	mov	local05, objptr
033a0     36 00 00 FF 
033a4     B0 AF 06 F1 | 	add	local05, ##28080
033a8     57 B9 02 F1 | 	add	local10, local05
033ac     04 B8 06 F1 | 	add	local10, #4
033b0     5C B1 02 FB | 	rdlong	local06, local10
033b4     01 B0 56 F2 | 	cmps	local06, #1 wc
033b8     80 00 90 CD |  if_b	jmp	#LR__0174
033bc     54 AF 02 F6 | 	mov	local05, local02
033c0     03 AE 66 F0 | 	shl	local05, #3
033c4     32 B1 02 F6 | 	mov	local06, objptr
033c8     36 00 00 FF 
033cc     B0 B1 06 F1 | 	add	local06, ##28080
033d0     58 AF 02 F1 | 	add	local05, local06
033d4     04 AE 06 F1 | 	add	local05, #4
033d8     57 BD 02 FB | 	rdlong	local12, local05
033dc     5E 93 02 F6 | 	mov	arg01, local12
033e0     24 3E B0 FD | 	call	#_getnoteval
033e4     3D FB 02 F6 | 	mov	local43, result1
033e8     54 B9 02 F6 | 	mov	local10, local02
033ec     03 B8 66 F0 | 	shl	local10, #3
033f0     32 AF 02 F6 | 	mov	local05, objptr
033f4     36 00 00 FF 
033f8     B0 AF 06 F1 | 	add	local05, ##28080
033fc     57 B9 02 F1 | 	add	local10, local05
03400     7D 93 02 F6 | 	mov	arg01, local43
03404     28 2E B2 FD | 	call	#__system__str_S
03408     5C 7B 62 FC | 	wrlong	result1, local10
0340c     54 AD 02 F6 | 	mov	local04, local02
03410     56 AB 02 F6 | 	mov	local03, local04
03414     55 B9 02 F6 | 	mov	local10, local03
03418     03 B8 66 F0 | 	shl	local10, #3
0341c     32 AF 02 F6 | 	mov	local05, objptr
03420     36 00 00 FF 
03424     B0 AF 06 F1 | 	add	local05, ##28080
03428     57 B9 02 F1 | 	add	local10, local05
0342c     04 B8 06 F1 | 	add	local10, #4
03430     01 00 80 FF 
03434     5C 05 68 FC | 	wrlong	##514, local10
03438     34 04 90 FD | 	jmp	#LR__0184
0343c                 | LR__0174
0343c     54 B9 02 F6 | 	mov	local10, local02
03440     03 B8 66 F0 | 	shl	local10, #3
03444     36 00 00 FF 
03448     B0 65 06 F1 | 	add	objptr, ##28080
0344c     32 B9 02 F1 | 	add	local10, objptr
03450     54 C1 02 F6 | 	mov	local14, local02
03454     03 C0 66 F0 | 	shl	local14, #3
03458     32 C1 02 F1 | 	add	local14, objptr
0345c     60 93 02 FB | 	rdlong	arg01, local14
03460     36 00 00 FF 
03464     B0 65 86 F1 | 	sub	objptr, ##28080
03468     C0 12 B0 FD | 	call	#_ischannel
0346c     04 B8 06 F1 | 	add	local10, #4
03470     5C 7B 62 FC | 	wrlong	result1, local10
03474                 | ' 
03474                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
03474                 | ' 
03474                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
03474     54 B9 02 F6 | 	mov	local10, local02
03478     03 B8 66 F0 | 	shl	local10, #3
0347c     32 AF 02 F6 | 	mov	local05, objptr
03480     36 00 00 FF 
03484     B0 AF 06 F1 | 	add	local05, ##28080
03488     57 B9 02 F1 | 	add	local10, local05
0348c     04 B8 06 F1 | 	add	local10, #4
03490     5C B1 02 FB | 	rdlong	local06, local10
03494     01 B0 56 F2 | 	cmps	local06, #1 wc
03498     70 00 90 CD |  if_b	jmp	#LR__0175
0349c     54 B9 02 F6 | 	mov	local10, local02
034a0     03 B8 66 F0 | 	shl	local10, #3
034a4     36 00 00 FF 
034a8     B0 65 06 F1 | 	add	objptr, ##28080
034ac     32 B9 02 F1 | 	add	local10, objptr
034b0     54 BB 02 F6 | 	mov	local11, local02
034b4     5D C1 02 F6 | 	mov	local14, local11
034b8     03 C0 66 F0 | 	shl	local14, #3
034bc     32 BF 02 F6 | 	mov	local13, objptr
034c0     32 C1 02 F1 | 	add	local14, objptr
034c4     60 93 02 FB | 	rdlong	arg01, local14
034c8     01 BC 06 F6 | 	mov	local12, #1
034cc     01 94 06 F6 | 	mov	arg02, #1
034d0     36 00 00 FF 
034d4     B0 65 86 F1 | 	sub	objptr, ##28080
034d8     E4 2B B2 FD | 	call	#__system__Right_S
034dc     5C 7B 62 FC | 	wrlong	result1, local10
034e0     54 AD 02 F6 | 	mov	local04, local02
034e4     56 AB 02 F6 | 	mov	local03, local04
034e8     55 B9 02 F6 | 	mov	local10, local03
034ec     03 B8 66 F0 | 	shl	local10, #3
034f0     32 AF 02 F6 | 	mov	local05, objptr
034f4     36 00 00 FF 
034f8     B0 AF 06 F1 | 	add	local05, ##28080
034fc     57 B9 02 F1 | 	add	local10, local05
03500     04 B8 06 F1 | 	add	local10, #4
03504     5C 59 68 FC | 	wrlong	#44, local10
03508     64 03 90 FD | 	jmp	#LR__0184
0350c                 | LR__0175
0350c     54 B9 02 F6 | 	mov	local10, local02
03510     03 B8 66 F0 | 	shl	local10, #3
03514     36 00 00 FF 
03518     B0 65 06 F1 | 	add	objptr, ##28080
0351c     32 B9 02 F1 | 	add	local10, objptr
03520     54 BB 02 F6 | 	mov	local11, local02
03524     5D C1 02 F6 | 	mov	local14, local11
03528     03 C0 66 F0 | 	shl	local14, #3
0352c     32 BF 02 F6 | 	mov	local13, objptr
03530     32 C1 02 F1 | 	add	local14, objptr
03534     60 93 02 FB | 	rdlong	arg01, local14
03538     36 00 00 FF 
0353c     B0 65 86 F1 | 	sub	objptr, ##28080
03540     D0 12 B0 FD | 	call	#_isconstant
03544     04 B8 06 F1 | 	add	local10, #4
03548     5C 7B 62 FC | 	wrlong	result1, local10
0354c                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
0354c     54 B9 02 F6 | 	mov	local10, local02
03550     03 B8 66 F0 | 	shl	local10, #3
03554     32 AF 02 F6 | 	mov	local05, objptr
03558     36 00 00 FF 
0355c     B0 AF 06 F1 | 	add	local05, ##28080
03560     57 B9 02 F1 | 	add	local10, local05
03564     04 B8 06 F1 | 	add	local10, #4
03568     5C B1 02 FB | 	rdlong	local06, local10
0356c     01 B0 56 F2 | 	cmps	local06, #1 wc
03570     90 00 90 CD |  if_b	jmp	#LR__0176
03574     54 B9 02 F6 | 	mov	local10, local02
03578     03 B8 66 F0 | 	shl	local10, #3
0357c     36 00 00 FF 
03580     B0 65 06 F1 | 	add	objptr, ##28080
03584     32 B9 02 F1 | 	add	local10, objptr
03588     54 BD 02 F6 | 	mov	local12, local02
0358c     5E BB 02 F6 | 	mov	local11, local12
03590     5D C1 02 F6 | 	mov	local14, local11
03594     03 C0 66 F0 | 	shl	local14, #3
03598     32 BF 02 F6 | 	mov	local13, objptr
0359c     32 C1 02 F1 | 	add	local14, objptr
035a0     04 C0 06 F1 | 	add	local14, #4
035a4     60 93 02 FB | 	rdlong	arg01, local14
035a8     04 C0 86 F1 | 	sub	local14, #4
035ac     36 00 00 FF 
035b0     B0 65 86 F1 | 	sub	objptr, ##28080
035b4     49 93 52 F6 | 	abs	arg01, arg01 wc
035b8     1F FC C6 C9 |  if_b	decod	local44, #31
035bc     00 FC 06 36 |  if_ae	mov	local44, #0
035c0     98 34 B2 FD | 	call	#__system___float_fromuns
035c4     7E 7B 62 F5 | 	xor	result1, local44
035c8     3D 93 02 F6 | 	mov	arg01, result1
035cc     60 2C B2 FD | 	call	#__system__str_S
035d0     5C 7B 62 FC | 	wrlong	result1, local10
035d4     54 AD 02 F6 | 	mov	local04, local02
035d8     56 AB 02 F6 | 	mov	local03, local04
035dc     55 B9 02 F6 | 	mov	local10, local03
035e0     03 B8 66 F0 | 	shl	local10, #3
035e4     32 AF 02 F6 | 	mov	local05, objptr
035e8     36 00 00 FF 
035ec     B0 AF 06 F1 | 	add	local05, ##28080
035f0     57 B9 02 F1 | 	add	local10, local05
035f4     04 B8 06 F1 | 	add	local10, #4
035f8     01 00 80 FF 
035fc     5C 03 68 FC | 	wrlong	##513, local10
03600     6C 02 90 FD | 	jmp	#LR__0184
03604                 | LR__0176
03604     54 B1 02 F6 | 	mov	local06, local02
03608     03 B0 66 F0 | 	shl	local06, #3
0360c     32 BD 02 F6 | 	mov	local12, objptr
03610     36 00 00 FF 
03614     B0 BD 06 F1 | 	add	local12, ##28080
03618     5E B1 02 F1 | 	add	local06, local12
0361c     58 93 02 FB | 	rdlong	arg01, local06
03620     30 34 B0 FD | 	call	#_isnum
03624     3D FF 02 F6 | 	mov	local45, result1
03628     07 FE 66 F7 | 	signx	local45, #7
0362c     54 B1 02 F6 | 	mov	local06, local02
03630     03 B0 66 F0 | 	shl	local06, #3
03634     32 BD 02 F6 | 	mov	local12, objptr
03638     36 00 00 FF 
0363c     B0 BD 06 F1 | 	add	local12, ##28080
03640     5E B1 02 F1 | 	add	local06, local12
03644     58 93 02 FB | 	rdlong	arg01, local06
03648     F4 37 B0 FD | 	call	#_isint
0364c     3D 01 03 F6 | 	mov	local46, result1
03650     07 00 67 F7 | 	signx	local46, #7
03654     54 B1 02 F6 | 	mov	local06, local02
03658     03 B0 66 F0 | 	shl	local06, #3
0365c     32 BD 02 F6 | 	mov	local12, objptr
03660     36 00 00 FF 
03664     B0 BD 06 F1 | 	add	local12, ##28080
03668     5E B1 02 F1 | 	add	local06, local12
0366c     58 93 02 FB | 	rdlong	arg01, local06
03670     70 3A B0 FD | 	call	#_isdec
03674     07 7A 66 F7 | 	signx	result1, #7
03678     3D 03 03 F6 | 	mov	local47, result1
0367c                 | ' 
0367c                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
0367c                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
0367c     00 FE 0E F2 | 	cmp	local45, #0 wz
03680     00 00 0F 52 |  if_ne	cmp	local46, #0 wz
03684     00 02 0F 52 |  if_ne	cmp	local47, #0 wz
03688     30 00 90 AD |  if_e	jmp	#LR__0177
0368c     54 AD 02 F6 | 	mov	local04, local02
03690     56 AB 02 F6 | 	mov	local03, local04
03694     55 B9 02 F6 | 	mov	local10, local03
03698     03 B8 66 F0 | 	shl	local10, #3
0369c     32 AF 02 F6 | 	mov	local05, objptr
036a0     36 00 00 FF 
036a4     B0 AF 06 F1 | 	add	local05, ##28080
036a8     57 B9 02 F1 | 	add	local10, local05
036ac     04 B8 06 F1 | 	add	local10, #4
036b0     01 00 80 FF 
036b4     5C 01 68 FC | 	wrlong	##512, local10
036b8     B4 01 90 FD | 	jmp	#LR__0184
036bc                 | LR__0177
036bc                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
036bc     00 FE 0E F2 | 	cmp	local45, #0 wz
036c0     00 00 0F 52 |  if_ne	cmp	local46, #0 wz
036c4     81 AD 22 56 |  if_ne	not	local04, local47
036c8     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
036cc     30 00 90 AD |  if_e	jmp	#LR__0178
036d0     54 AD 02 F6 | 	mov	local04, local02
036d4     56 AB 02 F6 | 	mov	local03, local04
036d8     55 B9 02 F6 | 	mov	local10, local03
036dc     03 B8 66 F0 | 	shl	local10, #3
036e0     32 AF 02 F6 | 	mov	local05, objptr
036e4     36 00 00 FF 
036e8     B0 AF 06 F1 | 	add	local05, ##28080
036ec     57 B9 02 F1 | 	add	local10, local05
036f0     04 B8 06 F1 | 	add	local10, #4
036f4     01 00 80 FF 
036f8     5C 03 68 FC | 	wrlong	##513, local10
036fc     70 01 90 FD | 	jmp	#LR__0184
03700                 | LR__0178
03700                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03700     00 FE 0E F2 | 	cmp	local45, #0 wz
03704     80 AD 22 56 |  if_ne	not	local04, local46
03708     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
0370c     81 AB 22 56 |  if_ne	not	local03, local47
03710     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
03714     30 00 90 AD |  if_e	jmp	#LR__0179
03718     54 AD 02 F6 | 	mov	local04, local02
0371c     56 AB 02 F6 | 	mov	local03, local04
03720     55 B9 02 F6 | 	mov	local10, local03
03724     03 B8 66 F0 | 	shl	local10, #3
03728     32 AF 02 F6 | 	mov	local05, objptr
0372c     36 00 00 FF 
03730     B0 AF 06 F1 | 	add	local05, ##28080
03734     57 B9 02 F1 | 	add	local10, local05
03738     04 B8 06 F1 | 	add	local10, #4
0373c     01 00 80 FF 
03740     5C 05 68 FC | 	wrlong	##514, local10
03744     28 01 90 FD | 	jmp	#LR__0184
03748                 | LR__0179
03748                 | ' 
03748                 | ' if isstring(lparts(i).part$) then 
03748     54 AF 02 F6 | 	mov	local05, local02
0374c     03 AE 66 F0 | 	shl	local05, #3
03750     32 B1 02 F6 | 	mov	local06, objptr
03754     36 00 00 FF 
03758     B0 B1 06 F1 | 	add	local06, ##28080
0375c     58 AF 02 F1 | 	add	local05, local06
03760     57 93 02 FB | 	rdlong	arg01, local05
03764     3C 3A B0 FD | 	call	#_isstring
03768     00 7A 0E F2 | 	cmp	result1, #0 wz
0376c     A8 00 90 AD |  if_e	jmp	#LR__0182
03770     54 B9 02 F6 | 	mov	local10, local02
03774     03 B8 66 F0 | 	shl	local10, #3
03778     36 00 00 FF 
0377c     B0 65 06 F1 | 	add	objptr, ##28080
03780     32 B9 02 F1 | 	add	local10, objptr
03784     04 B8 06 F1 | 	add	local10, #4
03788     01 00 80 FF 
0378c     5C 07 68 FC | 	wrlong	##515, local10
03790     54 AD 02 F6 | 	mov	local04, local02
03794     56 AB 02 F6 | 	mov	local03, local04
03798     55 B9 02 F6 | 	mov	local10, local03
0379c     03 B8 66 F0 | 	shl	local10, #3
037a0     32 B9 02 F1 | 	add	local10, objptr
037a4     54 C1 02 F6 | 	mov	local14, local02
037a8     03 C0 66 F0 | 	shl	local14, #3
037ac     32 C1 02 F1 | 	add	local14, objptr
037b0     60 B1 02 FB | 	rdlong	local06, local14
037b4     02 BC 06 F6 | 	mov	local12, #2
037b8     54 D1 02 F6 | 	mov	local22, local02
037bc     68 D3 02 F6 | 	mov	local23, local22
037c0     03 D2 66 F0 | 	shl	local23, #3
037c4     32 D5 02 F6 | 	mov	local24, objptr
037c8     32 D3 02 F1 | 	add	local23, objptr
037cc     69 93 02 FB | 	rdlong	arg01, local23
037d0     36 00 00 FF 
037d4     B0 65 86 F1 | 	sub	objptr, ##28080
037d8     49 B3 02 F6 | 	mov	local07, arg01
037dc     D7 06 48 FB | 	callpa	#(@LR__0181-@LR__0180)>>2,fcache_load_ptr_
037e0                 | LR__0180
037e0     59 7B CA FA | 	rdbyte	result1, local07 wz
037e4     01 B2 06 51 |  if_ne	add	local07, #1
037e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0180
037ec                 | LR__0181
037ec     49 B3 82 F1 | 	sub	local07, arg01
037f0     59 BF 02 F6 | 	mov	local13, local07
037f4     5F C1 02 F6 | 	mov	local14, local13
037f8     02 C0 86 F1 | 	sub	local14, #2
037fc     60 BB 02 F6 | 	mov	local11, local14
03800     58 93 02 F6 | 	mov	arg01, local06
03804     5E 95 02 F6 | 	mov	arg02, local12
03808     5D 97 02 F6 | 	mov	arg03, local11
0380c     40 29 B2 FD | 	call	#__system__Mid_S
03810     5C 7B 62 FC | 	wrlong	result1, local10
03814     58 00 90 FD | 	jmp	#LR__0184
03818                 | LR__0182
03818                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03818     54 AB 02 F6 | 	mov	local03, local02
0381c     55 AF 02 F6 | 	mov	local05, local03
03820     03 AE 66 F0 | 	shl	local05, #3
03824     32 B1 02 F6 | 	mov	local06, objptr
03828     36 00 00 FF 
0382c     B0 B1 06 F1 | 	add	local06, ##28080
03830     58 AF 02 F1 | 	add	local05, local06
03834     57 93 02 FB | 	rdlong	arg01, local05
03838     A4 2F B0 FD | 	call	#_isname
0383c     3D AD 0A F6 | 	mov	local04, result1 wz
03840     2C 00 90 AD |  if_e	jmp	#LR__0183
03844     54 AD 02 F6 | 	mov	local04, local02
03848     56 AB 02 F6 | 	mov	local03, local04
0384c     55 B9 02 F6 | 	mov	local10, local03
03850     03 B8 66 F0 | 	shl	local10, #3
03854     32 AF 02 F6 | 	mov	local05, objptr
03858     36 00 00 FF 
0385c     B0 AF 06 F1 | 	add	local05, ##28080
03860     57 B9 02 F1 | 	add	local10, local05
03864     04 B8 06 F1 | 	add	local10, #4
03868     01 00 80 FF 
0386c     5C 09 68 FC | 	wrlong	##516, local10
03870                 | LR__0183
03870                 | LR__0184
03870     01 A8 06 F1 | 	add	local02, #1
03874     A0 F8 9F FD | 	jmp	#LR__0173
03878                 | LR__0185
03878     63 B9 02 F6 | 	mov	local10, local17
0387c     03 B8 66 F0 | 	shl	local10, #3
03880     36 00 00 FF 
03884     B0 65 06 F1 | 	add	objptr, ##28080
03888     32 B9 02 F1 | 	add	local10, objptr
0388c     04 B8 06 F1 | 	add	local10, #4
03890     5C FD 6B FC | 	wrlong	#510, local10
03894     63 B9 02 F6 | 	mov	local10, local17
03898     03 B8 66 F0 | 	shl	local10, #3
0389c     32 B9 02 F1 | 	add	local10, objptr
038a0     91 01 00 FF 
038a4     A3 B1 06 F6 | 	mov	local06, ##@LR__5539
038a8     5C B1 62 FC | 	wrlong	local06, local10
038ac     10 00 00 FF 
038b0     54 64 06 F1 | 	add	objptr, ##8276
038b4     32 C7 62 FC | 	wrlong	local17, objptr
038b8     47 00 00 FF 
038bc     04 64 86 F1 | 	sub	objptr, ##36356
038c0                 | ' 
038c0                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
038c0                 | ' 
038c0                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
038c0                 | '  
038c0                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
038c0     91 01 00 FF 
038c4     A4 95 06 F6 | 	mov	arg02, ##@LR__5540
038c8     7B 93 02 F6 | 	mov	arg01, local41
038cc     E8 0E B2 FD | 	call	#__system___string_cmp
038d0     00 7A 0E F2 | 	cmp	result1, #0 wz
038d4     F0 00 90 AD |  if_e	jmp	#LR__0186
038d8     91 01 00 FF 
038dc     A9 95 06 F6 | 	mov	arg02, ##@LR__5541
038e0     7B 93 02 F6 | 	mov	arg01, local41
038e4     D0 0E B2 FD | 	call	#__system___string_cmp
038e8     00 7A 0E F2 | 	cmp	result1, #0 wz
038ec     D8 00 90 AD |  if_e	jmp	#LR__0186
038f0     91 01 00 FF 
038f4     AE B1 06 F6 | 	mov	local06, ##@LR__5542
038f8     7B 93 02 F6 | 	mov	arg01, local41
038fc     58 95 02 F6 | 	mov	arg02, local06
03900     B4 0E B2 FD | 	call	#__system___string_cmp
03904     00 7A 0E F2 | 	cmp	result1, #0 wz
03908     BC 00 90 AD |  if_e	jmp	#LR__0186
0390c     91 01 00 FF 
03910     B3 BD 06 F6 | 	mov	local12, ##@LR__5543
03914     5E B1 02 F6 | 	mov	local06, local12
03918     7B 93 02 F6 | 	mov	arg01, local41
0391c     58 95 02 F6 | 	mov	arg02, local06
03920     94 0E B2 FD | 	call	#__system___string_cmp
03924     00 7A 0E F2 | 	cmp	result1, #0 wz
03928     9C 00 90 AD |  if_e	jmp	#LR__0186
0392c     91 01 00 FF 
03930     B7 BB 06 F6 | 	mov	local11, ##@LR__5544
03934     5D BD 02 F6 | 	mov	local12, local11
03938     7B 93 02 F6 | 	mov	arg01, local41
0393c     5E 95 02 F6 | 	mov	arg02, local12
03940     74 0E B2 FD | 	call	#__system___string_cmp
03944     3D B1 0A F6 | 	mov	local06, result1 wz
03948     7C 00 90 AD |  if_e	jmp	#LR__0186
0394c     91 01 00 FF 
03950     BB C1 06 F6 | 	mov	local14, ##@LR__5545
03954     60 BB 02 F6 | 	mov	local11, local14
03958     7B 93 02 F6 | 	mov	arg01, local41
0395c     5D 95 02 F6 | 	mov	arg02, local11
03960     54 0E B2 FD | 	call	#__system___string_cmp
03964     3D BD 0A F6 | 	mov	local12, result1 wz
03968     5C 00 90 AD |  if_e	jmp	#LR__0186
0396c     91 01 00 FF 
03970     BE BF 06 F6 | 	mov	local13, ##@LR__5546
03974     5F C1 02 F6 | 	mov	local14, local13
03978     7B 93 02 F6 | 	mov	arg01, local41
0397c     60 95 02 F6 | 	mov	arg02, local14
03980     34 0E B2 FD | 	call	#__system___string_cmp
03984     3D BB 0A F6 | 	mov	local11, result1 wz
03988     3C 00 90 AD |  if_e	jmp	#LR__0186
0398c     91 01 00 FF 
03990     C2 BF 06 F6 | 	mov	local13, ##@LR__5547
03994     7B 93 02 F6 | 	mov	arg01, local41
03998     5F 95 02 F6 | 	mov	arg02, local13
0399c     18 0E B2 FD | 	call	#__system___string_cmp
039a0     3D C1 0A F6 | 	mov	local14, result1 wz
039a4     20 00 90 AD |  if_e	jmp	#LR__0186
039a8     91 01 00 FF 
039ac     C8 D1 06 F6 | 	mov	local22, ##@LR__5548
039b0     68 DD 02 F6 | 	mov	local28, local22
039b4     7B 93 02 F6 | 	mov	arg01, local41
039b8     6E 95 02 F6 | 	mov	arg02, local28
039bc     F8 0D B2 FD | 	call	#__system___string_cmp
039c0     3D BF 0A F6 | 	mov	local13, result1 wz
039c4     B8 00 90 5D |  if_ne	jmp	#LR__0187
039c8                 | LR__0186
039c8     77 DD 02 F6 | 	mov	local28, local37
039cc     01 DC 06 F1 | 	add	local28, #1
039d0     6E D1 02 F6 | 	mov	local22, local28
039d4     68 D3 02 F6 | 	mov	local23, local22
039d8     03 D2 66 F0 | 	shl	local23, #3
039dc     32 D5 02 F6 | 	mov	local24, objptr
039e0     36 00 00 FF 
039e4     B0 D5 06 F1 | 	add	local24, ##28080
039e8     6A D3 02 F1 | 	add	local23, local24
039ec     04 D2 06 F1 | 	add	local23, #4
039f0     69 E1 02 FB | 	rdlong	local30, local23
039f4     04 D2 86 F1 | 	sub	local23, #4
039f8     70 DF 02 F6 | 	mov	local29, local30
039fc     01 00 00 FF 
03a00     04 DE 0E F2 | 	cmp	local29, ##516 wz
03a04     78 00 90 5D |  if_ne	jmp	#LR__0187
03a08     77 05 03 F6 | 	mov	local48, local37
03a0c     01 04 07 F1 | 	add	local48, #1
03a10     03 04 67 F0 | 	shl	local48, #3
03a14     32 07 03 F6 | 	mov	local49, objptr
03a18     36 00 00 FF 
03a1c     B0 07 07 F1 | 	add	local49, ##28080
03a20     83 05 03 F1 | 	add	local48, local49
03a24     82 93 02 FB | 	rdlong	arg01, local48
03a28     01 94 06 F6 | 	mov	arg02, #1
03a2c     90 26 B2 FD | 	call	#__system__Right_S
03a30     3D 93 02 F6 | 	mov	arg01, result1
03a34     91 01 00 FF 
03a38     CB 09 07 F6 | 	mov	local50, ##@LR__5549
03a3c     84 0B 03 F6 | 	mov	local51, local50
03a40     85 95 02 F6 | 	mov	arg02, local51
03a44     70 0D B2 FD | 	call	#__system___string_cmp
03a48     3D E3 0A F6 | 	mov	local31, result1 wz
03a4c     30 00 90 AD |  if_e	jmp	#LR__0187
03a50     77 B9 02 F6 | 	mov	local10, local37
03a54     01 B8 06 F1 | 	add	local10, #1
03a58     03 B8 66 F0 | 	shl	local10, #3
03a5c     32 AF 02 F6 | 	mov	local05, objptr
03a60     36 00 00 FF 
03a64     B0 AF 06 F1 | 	add	local05, ##28080
03a68     57 B9 02 F1 | 	add	local10, local05
03a6c     01 00 00 FF 
03a70     03 B0 06 F6 | 	mov	local06, ##515
03a74     04 B8 06 F1 | 	add	local10, #4
03a78     01 00 80 FF 
03a7c     5C 07 68 FC | 	wrlong	##515, local10
03a80                 | LR__0187
03a80                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03a80     91 01 00 FF 
03a84     CD 95 06 F6 | 	mov	arg02, ##@LR__5550
03a88     7B 93 02 F6 | 	mov	arg01, local41
03a8c     28 0D B2 FD | 	call	#__system___string_cmp
03a90     00 7A 0E F2 | 	cmp	result1, #0 wz
03a94     1C 00 90 AD |  if_e	jmp	#LR__0188
03a98     91 01 00 FF 
03a9c     D4 AF 06 F6 | 	mov	local05, ##@LR__5551
03aa0     7B 93 02 F6 | 	mov	arg01, local41
03aa4     57 95 02 F6 | 	mov	arg02, local05
03aa8     0C 0D B2 FD | 	call	#__system___string_cmp
03aac     00 7A 0E F2 | 	cmp	result1, #0 wz
03ab0     B4 00 90 5D |  if_ne	jmp	#LR__0189
03ab4                 | LR__0188
03ab4     77 AF 02 F6 | 	mov	local05, local37
03ab8     01 AE 06 F1 | 	add	local05, #1
03abc     57 B1 02 F6 | 	mov	local06, local05
03ac0     03 B0 66 F0 | 	shl	local06, #3
03ac4     32 BD 02 F6 | 	mov	local12, objptr
03ac8     36 00 00 FF 
03acc     B0 BD 06 F1 | 	add	local12, ##28080
03ad0     5E B1 02 F1 | 	add	local06, local12
03ad4     04 B0 06 F1 | 	add	local06, #4
03ad8     58 C1 02 FB | 	rdlong	local14, local06
03adc     04 B0 86 F1 | 	sub	local06, #4
03ae0     60 BB 02 F6 | 	mov	local11, local14
03ae4     01 00 00 FF 
03ae8     04 BA 0E F2 | 	cmp	local11, ##516 wz
03aec     78 00 90 5D |  if_ne	jmp	#LR__0189
03af0     77 D3 02 F6 | 	mov	local23, local37
03af4     01 D2 06 F1 | 	add	local23, #1
03af8     03 D2 66 F0 | 	shl	local23, #3
03afc     32 D5 02 F6 | 	mov	local24, objptr
03b00     36 00 00 FF 
03b04     B0 D5 06 F1 | 	add	local24, ##28080
03b08     6A D3 02 F1 | 	add	local23, local24
03b0c     69 93 02 FB | 	rdlong	arg01, local23
03b10     01 94 06 F6 | 	mov	arg02, #1
03b14     A8 25 B2 FD | 	call	#__system__Right_S
03b18     3D 93 02 F6 | 	mov	arg01, result1
03b1c     91 01 00 FF 
03b20     DA D1 06 F6 | 	mov	local22, ##@LR__5552
03b24     68 DD 02 F6 | 	mov	local28, local22
03b28     6E 95 02 F6 | 	mov	arg02, local28
03b2c     88 0C B2 FD | 	call	#__system___string_cmp
03b30     3D BF 0A F6 | 	mov	local13, result1 wz
03b34     30 00 90 AD |  if_e	jmp	#LR__0189
03b38     77 B9 02 F6 | 	mov	local10, local37
03b3c     01 B8 06 F1 | 	add	local10, #1
03b40     03 B8 66 F0 | 	shl	local10, #3
03b44     32 AF 02 F6 | 	mov	local05, objptr
03b48     36 00 00 FF 
03b4c     B0 AF 06 F1 | 	add	local05, ##28080
03b50     57 B9 02 F1 | 	add	local10, local05
03b54     01 00 00 FF 
03b58     03 B0 06 F6 | 	mov	local06, ##515
03b5c     04 B8 06 F1 | 	add	local10, #4
03b60     01 00 80 FF 
03b64     5C 07 68 FC | 	wrlong	##515, local10
03b68                 | LR__0189
03b68                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03b68     91 01 00 FF 
03b6c     DC 95 06 F6 | 	mov	arg02, ##@LR__5553
03b70     7B 93 02 F6 | 	mov	arg01, local41
03b74     40 0C B2 FD | 	call	#__system___string_cmp
03b78     00 7A 0E F2 | 	cmp	result1, #0 wz
03b7c     B0 00 90 5D |  if_ne	jmp	#LR__0190
03b80     77 AF 02 F6 | 	mov	local05, local37
03b84     01 AE 06 F1 | 	add	local05, #1
03b88     03 AE 66 F0 | 	shl	local05, #3
03b8c     32 B1 02 F6 | 	mov	local06, objptr
03b90     36 00 00 FF 
03b94     B0 B1 06 F1 | 	add	local06, ##28080
03b98     58 AF 02 F1 | 	add	local05, local06
03b9c     04 AE 06 F1 | 	add	local05, #4
03ba0     57 BB 02 FB | 	rdlong	local11, local05
03ba4     04 AE 86 F1 | 	sub	local05, #4
03ba8     5D BD 02 F6 | 	mov	local12, local11
03bac     01 00 00 FF 
03bb0     04 BC 0E F2 | 	cmp	local12, ##516 wz
03bb4     78 00 90 5D |  if_ne	jmp	#LR__0190
03bb8     77 D1 02 F6 | 	mov	local22, local37
03bbc     01 D0 06 F1 | 	add	local22, #1
03bc0     03 D0 66 F0 | 	shl	local22, #3
03bc4     32 D3 02 F6 | 	mov	local23, objptr
03bc8     36 00 00 FF 
03bcc     B0 D3 06 F1 | 	add	local23, ##28080
03bd0     69 D1 02 F1 | 	add	local22, local23
03bd4     68 93 02 FB | 	rdlong	arg01, local22
03bd8     01 94 06 F6 | 	mov	arg02, #1
03bdc     E0 24 B2 FD | 	call	#__system__Right_S
03be0     3D 93 02 F6 | 	mov	arg01, result1
03be4     91 01 00 FF 
03be8     E1 DD 06 F6 | 	mov	local28, ##@LR__5554
03bec     6E BF 02 F6 | 	mov	local13, local28
03bf0     5F 95 02 F6 | 	mov	arg02, local13
03bf4     C0 0B B2 FD | 	call	#__system___string_cmp
03bf8     3D C1 0A F6 | 	mov	local14, result1 wz
03bfc     30 00 90 AD |  if_e	jmp	#LR__0190
03c00     77 B9 02 F6 | 	mov	local10, local37
03c04     01 B8 06 F1 | 	add	local10, #1
03c08     03 B8 66 F0 | 	shl	local10, #3
03c0c     32 AF 02 F6 | 	mov	local05, objptr
03c10     36 00 00 FF 
03c14     B0 AF 06 F1 | 	add	local05, ##28080
03c18     57 B9 02 F1 | 	add	local10, local05
03c1c     01 00 00 FF 
03c20     03 B0 06 F6 | 	mov	local06, ##515
03c24     04 B8 06 F1 | 	add	local10, #4
03c28     01 00 80 FF 
03c2c     5C 07 68 FC | 	wrlong	##515, local10
03c30                 | LR__0190
03c30                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03c30     91 01 00 FF 
03c34     E3 95 06 F6 | 	mov	arg02, ##@LR__5555
03c38     7B 93 02 F6 | 	mov	arg01, local41
03c3c     78 0B B2 FD | 	call	#__system___string_cmp
03c40     00 7A 0E F2 | 	cmp	result1, #0 wz
03c44     B0 00 90 5D |  if_ne	jmp	#LR__0191
03c48     77 AF 02 F6 | 	mov	local05, local37
03c4c     03 AE 06 F1 | 	add	local05, #3
03c50     03 AE 66 F0 | 	shl	local05, #3
03c54     32 B1 02 F6 | 	mov	local06, objptr
03c58     36 00 00 FF 
03c5c     B0 B1 06 F1 | 	add	local06, ##28080
03c60     58 AF 02 F1 | 	add	local05, local06
03c64     04 AE 06 F1 | 	add	local05, #4
03c68     57 BB 02 FB | 	rdlong	local11, local05
03c6c     04 AE 86 F1 | 	sub	local05, #4
03c70     5D BD 02 F6 | 	mov	local12, local11
03c74     01 00 00 FF 
03c78     04 BC 0E F2 | 	cmp	local12, ##516 wz
03c7c     78 00 90 5D |  if_ne	jmp	#LR__0191
03c80     77 D1 02 F6 | 	mov	local22, local37
03c84     03 D0 06 F1 | 	add	local22, #3
03c88     03 D0 66 F0 | 	shl	local22, #3
03c8c     32 D3 02 F6 | 	mov	local23, objptr
03c90     36 00 00 FF 
03c94     B0 D3 06 F1 | 	add	local23, ##28080
03c98     69 D1 02 F1 | 	add	local22, local23
03c9c     68 93 02 FB | 	rdlong	arg01, local22
03ca0     01 94 06 F6 | 	mov	arg02, #1
03ca4     18 24 B2 FD | 	call	#__system__Right_S
03ca8     3D 93 02 F6 | 	mov	arg01, result1
03cac     91 01 00 FF 
03cb0     E8 DD 06 F6 | 	mov	local28, ##@LR__5556
03cb4     6E BF 02 F6 | 	mov	local13, local28
03cb8     5F 95 02 F6 | 	mov	arg02, local13
03cbc     F8 0A B2 FD | 	call	#__system___string_cmp
03cc0     3D C1 0A F6 | 	mov	local14, result1 wz
03cc4     30 00 90 AD |  if_e	jmp	#LR__0191
03cc8     77 B9 02 F6 | 	mov	local10, local37
03ccc     03 B8 06 F1 | 	add	local10, #3
03cd0     03 B8 66 F0 | 	shl	local10, #3
03cd4     32 AF 02 F6 | 	mov	local05, objptr
03cd8     36 00 00 FF 
03cdc     B0 AF 06 F1 | 	add	local05, ##28080
03ce0     57 B9 02 F1 | 	add	local10, local05
03ce4     01 00 00 FF 
03ce8     03 B0 06 F6 | 	mov	local06, ##515
03cec     04 B8 06 F1 | 	add	local10, #4
03cf0     01 00 80 FF 
03cf4     5C 07 68 FC | 	wrlong	##515, local10
03cf8                 | LR__0191
03cf8                 | ' 
03cf8                 | ' ' cd needs special treatment..
03cf8                 | ' 
03cf8                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03cf8     91 01 00 FF 
03cfc     EA 95 06 F6 | 	mov	arg02, ##@LR__5557
03d00     7B 93 02 F6 | 	mov	arg01, local41
03d04     B0 0A B2 FD | 	call	#__system___string_cmp
03d08     00 7A 0E F2 | 	cmp	result1, #0 wz
03d0c     30 00 90 5D |  if_ne	jmp	#LR__0192
03d10     77 B9 02 F6 | 	mov	local10, local37
03d14     01 B8 06 F1 | 	add	local10, #1
03d18     03 B8 66 F0 | 	shl	local10, #3
03d1c     32 AF 02 F6 | 	mov	local05, objptr
03d20     36 00 00 FF 
03d24     B0 AF 06 F1 | 	add	local05, ##28080
03d28     57 B9 02 F1 | 	add	local10, local05
03d2c     01 00 00 FF 
03d30     03 B0 06 F6 | 	mov	local06, ##515
03d34     04 B8 06 F1 | 	add	local10, #4
03d38     01 00 80 FF 
03d3c     5C 07 68 FC | 	wrlong	##515, local10
03d40                 | LR__0192
03d40                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03d40     91 01 00 FF 
03d44     ED 95 06 F6 | 	mov	arg02, ##@LR__5558
03d48     7B 93 02 F6 | 	mov	arg01, local41
03d4c     68 0A B2 FD | 	call	#__system___string_cmp
03d50     00 7A 0E F2 | 	cmp	result1, #0 wz
03d54     9C 00 90 5D |  if_ne	jmp	#LR__0193
03d58     77 B1 02 F6 | 	mov	local06, local37
03d5c     01 B0 06 F1 | 	add	local06, #1
03d60     03 B0 66 F0 | 	shl	local06, #3
03d64     32 BD 02 F6 | 	mov	local12, objptr
03d68     36 00 00 FF 
03d6c     B0 BD 06 F1 | 	add	local12, ##28080
03d70     5E B1 02 F1 | 	add	local06, local12
03d74     58 93 02 FB | 	rdlong	arg01, local06
03d78     91 01 00 FF 
03d7c     F1 AF 06 F6 | 	mov	local05, ##@LR__5559
03d80     57 95 02 F6 | 	mov	arg02, local05
03d84     30 0A B2 FD | 	call	#__system___string_cmp
03d88     00 7A 0E F2 | 	cmp	result1, #0 wz
03d8c     64 00 90 5D |  if_ne	jmp	#LR__0193
03d90     77 B9 02 F6 | 	mov	local10, local37
03d94     01 B8 06 F1 | 	add	local10, #1
03d98     03 B8 66 F0 | 	shl	local10, #3
03d9c     36 00 00 FF 
03da0     B0 65 06 F1 | 	add	objptr, ##28080
03da4     32 B9 02 F1 | 	add	local10, objptr
03da8     04 B8 06 F1 | 	add	local10, #4
03dac     01 00 80 FF 
03db0     5C 07 68 FC | 	wrlong	##515, local10
03db4     77 B9 02 F6 | 	mov	local10, local37
03db8     01 B8 06 F1 | 	add	local10, #1
03dbc     03 B8 66 F0 | 	shl	local10, #3
03dc0     32 B9 02 F1 | 	add	local10, objptr
03dc4     91 01 00 FF 
03dc8     F3 B1 06 F6 | 	mov	local06, ##@LR__5560
03dcc     5C B1 62 FC | 	wrlong	local06, local10
03dd0     77 B9 02 F6 | 	mov	local10, local37
03dd4     03 B8 66 F0 | 	shl	local10, #3
03dd8     32 AF 02 F6 | 	mov	local05, objptr
03ddc     32 B9 02 F1 | 	add	local10, objptr
03de0     C3 B0 06 F6 | 	mov	local06, #195
03de4     04 B8 06 F1 | 	add	local10, #4
03de8     5C 87 69 FC | 	wrlong	#195, local10
03dec     36 00 00 FF 
03df0     B0 65 86 F1 | 	sub	objptr, ##28080
03df4                 | LR__0193
03df4                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03df4     91 01 00 FF 
03df8     F6 B9 06 F6 | 	mov	local10, ##@LR__5561
03dfc     7B 93 02 F6 | 	mov	arg01, local41
03e00     5C 95 02 F6 | 	mov	arg02, local10
03e04     B0 09 B2 FD | 	call	#__system___string_cmp
03e08     00 7A 0E F2 | 	cmp	result1, #0 wz
03e0c     F4 00 90 5D |  if_ne	jmp	#LR__0196
03e10     77 B1 02 F6 | 	mov	local06, local37
03e14     01 B0 06 F1 | 	add	local06, #1
03e18     03 B0 66 F0 | 	shl	local06, #3
03e1c     32 BD 02 F6 | 	mov	local12, objptr
03e20     36 00 00 FF 
03e24     B0 BD 06 F1 | 	add	local12, ##28080
03e28     5E B1 02 F1 | 	add	local06, local12
03e2c     58 93 02 FB | 	rdlong	arg01, local06
03e30     91 01 00 FF 
03e34     F9 AF 06 F6 | 	mov	local05, ##@LR__5562
03e38     57 B9 02 F6 | 	mov	local10, local05
03e3c     5C 95 02 F6 | 	mov	arg02, local10
03e40     74 09 B2 FD | 	call	#__system___string_cmp
03e44     00 7A 0E F2 | 	cmp	result1, #0 wz
03e48     B8 00 90 5D |  if_ne	jmp	#LR__0196
03e4c     77 B9 02 F6 | 	mov	local10, local37
03e50     01 B8 06 F1 | 	add	local10, #1
03e54     03 B8 66 F0 | 	shl	local10, #3
03e58     32 AF 02 F6 | 	mov	local05, objptr
03e5c     36 00 00 FF 
03e60     B0 AF 06 F1 | 	add	local05, ##28080
03e64     57 B9 02 F1 | 	add	local10, local05
03e68     01 00 00 FF 
03e6c     03 B0 06 F6 | 	mov	local06, ##515
03e70     04 B8 06 F1 | 	add	local10, #4
03e74     01 00 80 FF 
03e78     5C 07 68 FC | 	wrlong	##515, local10
03e7c     04 B8 86 F1 | 	sub	local10, #4
03e80     77 A9 02 F6 | 	mov	local02, local37
03e84     02 A8 06 F1 | 	add	local02, #2
03e88     63 0D 03 F6 | 	mov	local52, local17
03e8c     01 0C 07 F1 | 	add	local52, #1
03e90                 | LR__0194
03e90     86 A9 52 F2 | 	cmps	local02, local52 wc
03e94     6C 00 90 3D |  if_ae	jmp	#LR__0195
03e98     77 B9 02 F6 | 	mov	local10, local37
03e9c     01 B8 06 F1 | 	add	local10, #1
03ea0     03 B8 66 F0 | 	shl	local10, #3
03ea4     36 00 00 FF 
03ea8     B0 65 06 F1 | 	add	objptr, ##28080
03eac     32 AF 02 F6 | 	mov	local05, objptr
03eb0     32 B9 02 F1 | 	add	local10, objptr
03eb4     77 C1 02 F6 | 	mov	local14, local37
03eb8     01 C0 06 F1 | 	add	local14, #1
03ebc     03 C0 66 F0 | 	shl	local14, #3
03ec0     32 C1 02 F1 | 	add	local14, objptr
03ec4     60 93 02 FB | 	rdlong	arg01, local14
03ec8     54 BB 02 F6 | 	mov	local11, local02
03ecc     5D C1 02 F6 | 	mov	local14, local11
03ed0     60 BF 02 F6 | 	mov	local13, local14
03ed4     03 BE 66 F0 | 	shl	local13, #3
03ed8     32 DD 02 F6 | 	mov	local28, objptr
03edc     32 BF 02 F1 | 	add	local13, objptr
03ee0     5F BD 02 FB | 	rdlong	local12, local13
03ee4     5E 95 02 F6 | 	mov	arg02, local12
03ee8     36 00 00 FF 
03eec     B0 65 86 F1 | 	sub	objptr, ##28080
03ef0     F8 08 B2 FD | 	call	#__system___string_concat
03ef4     3D B1 02 F6 | 	mov	local06, result1
03ef8     5C B1 62 FC | 	wrlong	local06, local10
03efc     01 A8 06 F1 | 	add	local02, #1
03f00     8C FF 9F FD | 	jmp	#LR__0194
03f04                 | LR__0195
03f04                 | LR__0196
03f04                 | ' 
03f04                 | ' ' determine a type of the line and compile it
03f04                 | ' 
03f04                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03f04     36 00 00 FF 
03f08     B0 65 06 F1 | 	add	objptr, ##28080
03f0c     32 93 02 FB | 	rdlong	arg01, objptr
03f10     36 00 00 FF 
03f14     B0 65 86 F1 | 	sub	objptr, ##28080
03f18     C8 31 B0 FD | 	call	#_isdec
03f1c     00 7A 0E F2 | 	cmp	result1, #0 wz
03f20     30 00 90 AD |  if_e	jmp	#LR__0197
03f24     36 00 00 FF 
03f28     B0 65 06 F1 | 	add	objptr, ##28080
03f2c     32 93 02 FB | 	rdlong	arg01, objptr
03f30     36 00 00 FF 
03f34     B0 65 86 F1 | 	sub	objptr, ##28080
03f38     00 94 06 F6 | 	mov	arg02, #0
03f3c     A4 35 B2 FD | 	call	#__system____builtin_atoi
03f40     54 00 00 FF 
03f44     8C 64 06 F1 | 	add	objptr, ##43148
03f48     32 7B 62 FC | 	wrlong	result1, objptr
03f4c     54 00 00 FF 
03f50     8C 64 86 F1 | 	sub	objptr, ##43148
03f54                 | LR__0197
03f54                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03f54     54 00 00 FF 
03f58     8C 64 06 F1 | 	add	objptr, ##43148
03f5c     32 AD 02 FB | 	rdlong	local04, objptr
03f60     54 00 00 FF 
03f64     8C 64 86 F1 | 	sub	objptr, ##43148
03f68     01 AC 16 F2 | 	cmp	local04, #1 wc
03f6c     40 00 90 CD |  if_b	jmp	#LR__0198
03f70     01 C6 0E F2 | 	cmp	local17, #1 wz
03f74     38 00 00 AF 
03f78     C8 65 06 A1 |  if_e	add	objptr, ##29128
03f7c     32 AF 02 AB |  if_e	rdlong	local05, objptr
03f80     38 00 00 AF 
03f84     C8 65 86 A1 |  if_e	sub	objptr, ##29128
03f88     57 B9 02 A6 |  if_e	mov	local10, local05
03f8c     03 B8 0E A2 |  if_e	cmp	local10, #3 wz
03f90     1C 00 90 5D |  if_ne	jmp	#LR__0198
03f94     54 00 00 FF 
03f98     8C 64 06 F1 | 	add	objptr, ##43148
03f9c     32 93 02 FB | 	rdlong	arg01, objptr
03fa0     54 00 00 FF 
03fa4     8C 64 86 F1 | 	sub	objptr, ##43148
03fa8     E0 32 B0 FD | 	call	#_deleteline
03fac     C8 03 90 FD | 	jmp	#LR__0209
03fb0                 | LR__0198
03fb0                 | ' 
03fb0                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03fb0     38 00 00 FF 
03fb4     C8 65 06 F1 | 	add	objptr, ##29128
03fb8     32 AD 0A FB | 	rdlong	local04, objptr wz
03fbc     38 00 00 FF 
03fc0     C8 65 86 F1 | 	sub	objptr, ##29128
03fc4     20 00 90 AD |  if_e	jmp	#LR__0199
03fc8     38 00 00 FF 
03fcc     C8 65 06 F1 | 	add	objptr, ##29128
03fd0     32 AF 02 FB | 	rdlong	local05, objptr
03fd4     38 00 00 FF 
03fd8     C8 65 86 F1 | 	sub	objptr, ##29128
03fdc     57 B9 02 F6 | 	mov	local10, local05
03fe0     03 B8 0E F2 | 	cmp	local10, #3 wz
03fe4     C0 00 90 5D |  if_ne	jmp	#LR__0201
03fe8                 | LR__0199
03fe8     36 00 00 FF 
03fec     C4 65 06 F1 | 	add	objptr, ##28100
03ff0     32 BD 02 FB | 	rdlong	local12, objptr
03ff4     36 00 00 FF 
03ff8     C4 65 86 F1 | 	sub	objptr, ##28100
03ffc     1B BC 0E F2 | 	cmp	local12, #27 wz
04000     A4 00 90 AD |  if_e	jmp	#LR__0201
04004     54 00 00 FF 
04008     8C 64 06 F1 | 	add	objptr, ##43148
0400c     32 93 02 FB | 	rdlong	arg01, objptr
04010     1B 00 00 FF 
04014     C4 64 86 F1 | 	sub	objptr, ##14020
04018     32 97 02 FB | 	rdlong	arg03, objptr
0401c     38 00 00 FF 
04020     C8 65 86 F1 | 	sub	objptr, ##29128
04024     00 94 06 F6 | 	mov	arg02, #0
04028     38 46 B0 FD | 	call	#_compile
0402c     3D A7 0A F6 | 	mov	local01, result1 wz
04030                 | '   err=compile(linenum,0,cont) 
04030                 | '   if err<>0 then printerror(err,linenum): goto 101
04030     20 00 90 AD |  if_e	jmp	#LR__0200
04034     54 00 00 FF 
04038     8C 64 06 F1 | 	add	objptr, ##43148
0403c     32 95 02 FB | 	rdlong	arg02, objptr
04040     54 00 00 FF 
04044     8C 64 86 F1 | 	sub	objptr, ##43148
04048     53 93 02 F6 | 	mov	arg01, local01
0404c     48 C9 B1 FD | 	call	#_printerror
04050     44 03 90 FD | 	jmp	#LR__0210
04054                 | LR__0200
04054                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
04054     54 00 00 FF 
04058     D0 64 06 F1 | 	add	objptr, ##43216
0405c     32 93 02 FB | 	rdlong	arg01, objptr
04060     54 00 00 FF 
04064     D0 64 86 F1 | 	sub	objptr, ##43216
04068     91 01 00 FF 
0406c     FB 95 06 F6 | 	mov	arg02, ##@LR__5563
04070     44 07 B2 FD | 	call	#__system___string_cmp
04074     00 7A 0E F2 | 	cmp	result1, #0 wz
04078     FC 02 90 AD |  if_e	jmp	#LR__0209
0407c     54 00 00 FF 
04080     D0 64 06 F1 | 	add	objptr, ##43216
04084     32 AD 02 FB | 	rdlong	local04, objptr
04088     1B 00 00 FF 
0408c     10 65 86 F1 | 	sub	objptr, ##14096
04090     32 AD 62 FC | 	wrlong	local04, objptr
04094     08 64 06 F1 | 	add	objptr, #8
04098     32 09 68 FC | 	wrlong	#4, objptr
0409c     38 00 00 FF 
040a0     C8 65 86 F1 | 	sub	objptr, ##29128
040a4     0C D9 9F FD | 	jmp	#LR__0070
040a8                 | LR__0201
040a8                 | '       							
040a8                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
040a8     38 00 00 FF 
040ac     C8 65 06 F1 | 	add	objptr, ##29128
040b0     32 AD 02 FB | 	rdlong	local04, objptr
040b4     38 00 00 FF 
040b8     C8 65 86 F1 | 	sub	objptr, ##29128
040bc     01 AC 0E F2 | 	cmp	local04, #1 wz
040c0     38 00 00 5F 
040c4     C8 65 06 51 |  if_ne	add	objptr, ##29128
040c8     32 B9 02 5B |  if_ne	rdlong	local10, objptr
040cc     38 00 00 5F 
040d0     C8 65 86 51 |  if_ne	sub	objptr, ##29128
040d4     02 B8 0E 52 |  if_ne	cmp	local10, #2 wz
040d8     C0 00 90 5D |  if_ne	jmp	#LR__0203
040dc     36 00 00 FF 
040e0     BC 65 06 F1 | 	add	objptr, ##28092
040e4     32 BD 02 FB | 	rdlong	local12, objptr
040e8     36 00 00 FF 
040ec     BC 65 86 F1 | 	sub	objptr, ##28092
040f0     1B BC 0E F2 | 	cmp	local12, #27 wz
040f4     A4 00 90 AD |  if_e	jmp	#LR__0203
040f8     54 00 00 FF 
040fc     8C 64 06 F1 | 	add	objptr, ##43148
04100     32 93 02 FB | 	rdlong	arg01, objptr
04104     1B 00 00 FF 
04108     C4 64 86 F1 | 	sub	objptr, ##14020
0410c     32 97 02 FB | 	rdlong	arg03, objptr
04110     38 00 00 FF 
04114     C8 65 86 F1 | 	sub	objptr, ##29128
04118     00 94 06 F6 | 	mov	arg02, #0
0411c     44 45 B0 FD | 	call	#_compile
04120     3D A7 0A F6 | 	mov	local01, result1 wz
04124                 | '   err=compile(linenum,0,cont) 
04124                 | '   if err<>0 then printerror(err,linenum): goto 101
04124     20 00 90 AD |  if_e	jmp	#LR__0202
04128     54 00 00 FF 
0412c     8C 64 06 F1 | 	add	objptr, ##43148
04130     32 95 02 FB | 	rdlong	arg02, objptr
04134     54 00 00 FF 
04138     8C 64 86 F1 | 	sub	objptr, ##43148
0413c     53 93 02 F6 | 	mov	arg01, local01
04140     54 C8 B1 FD | 	call	#_printerror
04144     50 02 90 FD | 	jmp	#LR__0210
04148                 | LR__0202
04148                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
04148     54 00 00 FF 
0414c     D0 64 06 F1 | 	add	objptr, ##43216
04150     32 93 02 FB | 	rdlong	arg01, objptr
04154     54 00 00 FF 
04158     D0 64 86 F1 | 	sub	objptr, ##43216
0415c     91 01 00 FF 
04160     FC 95 06 F6 | 	mov	arg02, ##@LR__5564
04164     50 06 B2 FD | 	call	#__system___string_cmp
04168     00 7A 0E F2 | 	cmp	result1, #0 wz
0416c     08 02 90 AD |  if_e	jmp	#LR__0209
04170     54 00 00 FF 
04174     D0 64 06 F1 | 	add	objptr, ##43216
04178     32 AD 02 FB | 	rdlong	local04, objptr
0417c     1B 00 00 FF 
04180     10 65 86 F1 | 	sub	objptr, ##14096
04184     32 AD 62 FC | 	wrlong	local04, objptr
04188     08 64 06 F1 | 	add	objptr, #8
0418c     32 09 68 FC | 	wrlong	#4, objptr
04190     38 00 00 FF 
04194     C8 65 86 F1 | 	sub	objptr, ##29128
04198     18 D8 9F FD | 	jmp	#LR__0070
0419c                 | LR__0203
0419c                 | ' 							 
0419c                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
0419c     38 00 00 FF 
041a0     C8 65 06 F1 | 	add	objptr, ##29128
041a4     32 AD 0A FB | 	rdlong	local04, objptr wz
041a8     38 00 00 FF 
041ac     C8 65 86 F1 | 	sub	objptr, ##29128
041b0     38 00 00 5F 
041b4     C8 65 06 51 |  if_ne	add	objptr, ##29128
041b8     32 B9 02 5B |  if_ne	rdlong	local10, objptr
041bc     38 00 00 5F 
041c0     C8 65 86 51 |  if_ne	sub	objptr, ##29128
041c4     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
041c8     36 00 00 AF 
041cc     C4 65 06 A1 |  if_e	add	objptr, ##28100
041d0     32 BD 02 AB |  if_e	rdlong	local12, objptr
041d4     36 00 00 AF 
041d8     C4 65 86 A1 |  if_e	sub	objptr, ##28100
041dc     1B BC 0E A2 |  if_e	cmp	local12, #27 wz
041e0     A4 00 90 5D |  if_ne	jmp	#LR__0205
041e4     54 00 00 FF 
041e8     8C 64 06 F1 | 	add	objptr, ##43148
041ec     32 93 02 FB | 	rdlong	arg01, objptr
041f0     1B 00 00 FF 
041f4     C4 64 86 F1 | 	sub	objptr, ##14020
041f8     32 97 02 FB | 	rdlong	arg03, objptr
041fc     38 00 00 FF 
04200     C8 65 86 F1 | 	sub	objptr, ##29128
04204     00 94 06 F6 | 	mov	arg02, #0
04208     20 45 B0 FD | 	call	#_compile_assign
0420c     3D A7 0A F6 | 	mov	local01, result1 wz
04210                 | '   err=compile_assign(linenum,0,cont)
04210                 | '   if err<>0 then printerror(err,linenum): goto 101
04210     20 00 90 AD |  if_e	jmp	#LR__0204
04214     54 00 00 FF 
04218     8C 64 06 F1 | 	add	objptr, ##43148
0421c     32 95 02 FB | 	rdlong	arg02, objptr
04220     54 00 00 FF 
04224     8C 64 86 F1 | 	sub	objptr, ##43148
04228     53 93 02 F6 | 	mov	arg01, local01
0422c     68 C7 B1 FD | 	call	#_printerror
04230     64 01 90 FD | 	jmp	#LR__0210
04234                 | LR__0204
04234                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
04234     54 00 00 FF 
04238     D0 64 06 F1 | 	add	objptr, ##43216
0423c     32 93 02 FB | 	rdlong	arg01, objptr
04240     54 00 00 FF 
04244     D0 64 86 F1 | 	sub	objptr, ##43216
04248     91 01 00 FF 
0424c     FD 95 06 F6 | 	mov	arg02, ##@LR__5565
04250     64 05 B2 FD | 	call	#__system___string_cmp
04254     00 7A 0E F2 | 	cmp	result1, #0 wz
04258     1C 01 90 AD |  if_e	jmp	#LR__0209
0425c     54 00 00 FF 
04260     D0 64 06 F1 | 	add	objptr, ##43216
04264     32 AD 02 FB | 	rdlong	local04, objptr
04268     1B 00 00 FF 
0426c     10 65 86 F1 | 	sub	objptr, ##14096
04270     32 AD 62 FC | 	wrlong	local04, objptr
04274     08 64 06 F1 | 	add	objptr, #8
04278     32 09 68 FC | 	wrlong	#4, objptr
0427c     38 00 00 FF 
04280     C8 65 86 F1 | 	sub	objptr, ##29128
04284     2C D7 9F FD | 	jmp	#LR__0070
04288                 | LR__0205
04288                 | '     							 
04288                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
04288     38 00 00 FF 
0428c     C8 65 06 F1 | 	add	objptr, ##29128
04290     32 AD 02 FB | 	rdlong	local04, objptr
04294     38 00 00 FF 
04298     C8 65 86 F1 | 	sub	objptr, ##29128
0429c     01 AC 0E F2 | 	cmp	local04, #1 wz
042a0     38 00 00 5F 
042a4     C8 65 06 51 |  if_ne	add	objptr, ##29128
042a8     32 B9 02 5B |  if_ne	rdlong	local10, objptr
042ac     38 00 00 5F 
042b0     C8 65 86 51 |  if_ne	sub	objptr, ##29128
042b4     02 B8 0E 52 |  if_ne	cmp	local10, #2 wz
042b8     36 00 00 AF 
042bc     BC 65 06 A1 |  if_e	add	objptr, ##28092
042c0     32 BD 02 AB |  if_e	rdlong	local12, objptr
042c4     36 00 00 AF 
042c8     BC 65 86 A1 |  if_e	sub	objptr, ##28092
042cc     1B BC 0E A2 |  if_e	cmp	local12, #27 wz
042d0     A4 00 90 5D |  if_ne	jmp	#LR__0208
042d4     54 00 00 FF 
042d8     8C 64 06 F1 | 	add	objptr, ##43148
042dc     32 93 02 FB | 	rdlong	arg01, objptr
042e0     1B 00 00 FF 
042e4     C4 64 86 F1 | 	sub	objptr, ##14020
042e8     32 97 02 FB | 	rdlong	arg03, objptr
042ec     38 00 00 FF 
042f0     C8 65 86 F1 | 	sub	objptr, ##29128
042f4     00 94 06 F6 | 	mov	arg02, #0
042f8     30 44 B0 FD | 	call	#_compile_assign
042fc     3D A7 0A F6 | 	mov	local01, result1 wz
04300                 | '   err=compile_assign(linenum,0,cont) 
04300                 | '   if err<>0 then printerror(err,linenum): goto 101
04300     20 00 90 AD |  if_e	jmp	#LR__0206
04304     54 00 00 FF 
04308     8C 64 06 F1 | 	add	objptr, ##43148
0430c     32 95 02 FB | 	rdlong	arg02, objptr
04310     54 00 00 FF 
04314     8C 64 86 F1 | 	sub	objptr, ##43148
04318     53 93 02 F6 | 	mov	arg01, local01
0431c     78 C6 B1 FD | 	call	#_printerror
04320     74 00 90 FD | 	jmp	#LR__0210
04324                 | LR__0206
04324                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
04324     54 00 00 FF 
04328     D0 64 06 F1 | 	add	objptr, ##43216
0432c     32 93 02 FB | 	rdlong	arg01, objptr
04330     54 00 00 FF 
04334     D0 64 86 F1 | 	sub	objptr, ##43216
04338     91 01 00 FF 
0433c     FE 95 06 F6 | 	mov	arg02, ##@LR__5566
04340     74 04 B2 FD | 	call	#__system___string_cmp
04344     00 7A 4E F2 | 	cmps	result1, #0 wz
04348     2C 00 90 AD |  if_e	jmp	#LR__0207
0434c     54 00 00 FF 
04350     D0 64 06 F1 | 	add	objptr, ##43216
04354     32 AD 02 FB | 	rdlong	local04, objptr
04358     1B 00 00 FF 
0435c     10 65 86 F1 | 	sub	objptr, ##14096
04360     32 AD 62 FC | 	wrlong	local04, objptr
04364     08 64 06 F1 | 	add	objptr, #8
04368     32 09 68 FC | 	wrlong	#4, objptr
0436c     38 00 00 FF 
04370     C8 65 86 F1 | 	sub	objptr, ##29128
04374     3C D6 9F FD | 	jmp	#LR__0070
04378                 | LR__0207
04378                 | LR__0208
04378                 | LR__0209
04378                 | ' 
04378                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
04378     54 00 00 FF 
0437c     8C 64 06 F1 | 	add	objptr, ##43148
04380     32 AD 0A FB | 	rdlong	local04, objptr wz
04384     54 00 00 FF 
04388     8C 64 86 F1 | 	sub	objptr, ##43148
0438c     B0 00 90 5D |  if_ne	jmp	#LR__0213
04390     02 92 06 F6 | 	mov	arg01, #2
04394     D4 91 B0 FD | 	call	#_execute_line
04398                 | LR__0210
04398                 | '   execute_line(2)
04398                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
04398     54 00 00 FF 
0439c     B0 64 06 F1 | 	add	objptr, ##43184
043a0     32 AD 0A FB | 	rdlong	local04, objptr wz
043a4     54 00 00 FF 
043a8     B0 64 86 F1 | 	sub	objptr, ##43184
043ac     20 00 90 5D |  if_ne	jmp	#LR__0211
043b0     91 01 00 FF 
043b4     FF 93 06 F6 | 	mov	arg01, ##@LR__5567
043b8                 | ' 
043b8                 | ' write(text)
043b8     88 E7 B1 FD | 	call	#_hg010b_spin2_write
043bc                 | ' crlf
043bc     24 EC B1 FD | 	call	#_hg010b_spin2_crlf
043c0     92 01 00 FF 
043c4     00 92 06 F6 | 	mov	arg01, ##@LR__5568
043c8                 | ' 
043c8                 | ' write(text)
043c8     78 E7 B1 FD | 	call	#_hg010b_spin2_write
043cc                 | ' crlf
043cc     14 EC B1 FD | 	call	#_hg010b_spin2_crlf
043d0                 | LR__0211
043d0                 | '     if inload=1 andalso err>0 then print fullline$
043d0     54 00 00 FF 
043d4     B0 64 06 F1 | 	add	objptr, ##43184
043d8     32 AD 02 FB | 	rdlong	local04, objptr
043dc     54 00 00 FF 
043e0     B0 64 86 F1 | 	sub	objptr, ##43184
043e4     01 AC 0E F2 | 	cmp	local04, #1 wz
043e8     54 00 90 5D |  if_ne	jmp	#LR__0212
043ec     01 A6 56 F2 | 	cmps	local01, #1 wc
043f0     4C 00 90 CD |  if_b	jmp	#LR__0212
043f4     00 92 06 F6 | 	mov	arg01, #0
043f8     18 59 B2 FD | 	call	#__system___getiolock_0622
043fc     3D 93 02 F6 | 	mov	arg01, result1
04400     8C 03 B2 FD | 	call	#__system___lockmem
04404     38 00 00 FF 
04408     C4 65 06 F1 | 	add	objptr, ##29124
0440c     32 95 02 FB | 	rdlong	arg02, objptr
04410     38 00 00 FF 
04414     C4 65 86 F1 | 	sub	objptr, ##29124
04418     00 92 06 F6 | 	mov	arg01, #0
0441c     00 96 06 F6 | 	mov	arg03, #0
04420     60 10 B2 FD | 	call	#__system___basic_print_string
04424     00 92 06 F6 | 	mov	arg01, #0
04428     0A 94 06 F6 | 	mov	arg02, #10
0442c     00 96 06 F6 | 	mov	arg03, #0
04430     F8 0F B2 FD | 	call	#__system___basic_print_char
04434     00 92 06 F6 | 	mov	arg01, #0
04438     D8 58 B2 FD | 	call	#__system___getiolock_0622
0443c     3D 01 68 FC | 	wrlong	#0, result1
04440                 | LR__0212
04440                 | LR__0213
04440     E7 F0 03 F6 | 	mov	ptra, fp
04444     F2 00 A0 FD | 	call	#popregs_
04448                 | _interpret_ret
04448     2D 00 64 FD | 	ret
0444c                 | 
0444c                 | ' 
0444c                 | ' '---------------------------------------------------------------------------------------------------------------------
0444c                 | ' '
0444c                 | ' '                          END OF TOKENIZER MAIN CODE
0444c                 | ' '
0444c                 | ' '---------------------------------------------------------------------------------------------------------------------
0444c                 | ' 
0444c                 | ' '---------------------------------------------------------------------------------------------------------------------
0444c                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
0444c                 | ' '---------------------------------------------------------------------------------------------------------------------
0444c                 | ' 
0444c                 | ' ' Check if the part is an operator, return a token or 0 if not found
0444c                 | ' 
0444c                 | ' function isoperator(s as string) as ubyte
0444c                 | _isoperator
0444c     01 CA 05 F6 | 	mov	COUNT_, #1
04450     E8 00 A0 FD | 	call	#pushregs_
04454                 | ' 
04454                 | ' select case s
04454     49 A7 02 F6 | 	mov	local01, arg01
04458     92 01 00 FF 
0445c     06 94 06 F6 | 	mov	arg02, ##@LR__5569
04460     53 93 02 F6 | 	mov	arg01, local01
04464     50 03 B2 FD | 	call	#__system___string_cmp
04468     00 7A 0E F2 | 	cmp	result1, #0 wz
0446c     FC 01 90 AD |  if_e	jmp	#LR__0220
04470     92 01 00 FF 
04474     08 94 06 F6 | 	mov	arg02, ##@LR__5570
04478     53 93 02 F6 | 	mov	arg01, local01
0447c     38 03 B2 FD | 	call	#__system___string_cmp
04480     00 7A 0E F2 | 	cmp	result1, #0 wz
04484     EC 01 90 AD |  if_e	jmp	#LR__0221
04488     92 01 00 FF 
0448c     0A 94 06 F6 | 	mov	arg02, ##@LR__5571
04490     53 93 02 F6 | 	mov	arg01, local01
04494     20 03 B2 FD | 	call	#__system___string_cmp
04498     00 7A 0E F2 | 	cmp	result1, #0 wz
0449c     DC 01 90 AD |  if_e	jmp	#LR__0222
044a0     92 01 00 FF 
044a4     0D 94 06 F6 | 	mov	arg02, ##@LR__5572
044a8     53 93 02 F6 | 	mov	arg01, local01
044ac     08 03 B2 FD | 	call	#__system___string_cmp
044b0     00 7A 0E F2 | 	cmp	result1, #0 wz
044b4     CC 01 90 AD |  if_e	jmp	#LR__0223
044b8     92 01 00 FF 
044bc     11 94 06 F6 | 	mov	arg02, ##@LR__5573
044c0     53 93 02 F6 | 	mov	arg01, local01
044c4     F0 02 B2 FD | 	call	#__system___string_cmp
044c8     00 7A 0E F2 | 	cmp	result1, #0 wz
044cc     BC 01 90 AD |  if_e	jmp	#LR__0224
044d0     92 01 00 FF 
044d4     13 94 06 F6 | 	mov	arg02, ##@LR__5574
044d8     53 93 02 F6 | 	mov	arg01, local01
044dc     D8 02 B2 FD | 	call	#__system___string_cmp
044e0     00 7A 0E F2 | 	cmp	result1, #0 wz
044e4     AC 01 90 AD |  if_e	jmp	#LR__0225
044e8     92 01 00 FF 
044ec     15 94 06 F6 | 	mov	arg02, ##@LR__5575
044f0     53 93 02 F6 | 	mov	arg01, local01
044f4     C0 02 B2 FD | 	call	#__system___string_cmp
044f8     00 7A 0E F2 | 	cmp	result1, #0 wz
044fc     9C 01 90 AD |  if_e	jmp	#LR__0226
04500     92 01 00 FF 
04504     19 94 06 F6 | 	mov	arg02, ##@LR__5576
04508     53 93 02 F6 | 	mov	arg01, local01
0450c     A8 02 B2 FD | 	call	#__system___string_cmp
04510     00 7A 0E F2 | 	cmp	result1, #0 wz
04514     8C 01 90 AD |  if_e	jmp	#LR__0227
04518     92 01 00 FF 
0451c     1D 94 06 F6 | 	mov	arg02, ##@LR__5577
04520     53 93 02 F6 | 	mov	arg01, local01
04524     90 02 B2 FD | 	call	#__system___string_cmp
04528     00 7A 0E F2 | 	cmp	result1, #0 wz
0452c     7C 01 90 AD |  if_e	jmp	#LR__0228
04530     92 01 00 FF 
04534     21 94 06 F6 | 	mov	arg02, ##@LR__5578
04538     53 93 02 F6 | 	mov	arg01, local01
0453c     78 02 B2 FD | 	call	#__system___string_cmp
04540     00 7A 0E F2 | 	cmp	result1, #0 wz
04544     6C 01 90 AD |  if_e	jmp	#LR__0229
04548     92 01 00 FF 
0454c     25 94 06 F6 | 	mov	arg02, ##@LR__5579
04550     53 93 02 F6 | 	mov	arg01, local01
04554     60 02 B2 FD | 	call	#__system___string_cmp
04558     00 7A 0E F2 | 	cmp	result1, #0 wz
0455c     5C 01 90 AD |  if_e	jmp	#LR__0230
04560     92 01 00 FF 
04564     29 94 06 F6 | 	mov	arg02, ##@LR__5580
04568     53 93 02 F6 | 	mov	arg01, local01
0456c     48 02 B2 FD | 	call	#__system___string_cmp
04570     00 7A 0E F2 | 	cmp	result1, #0 wz
04574     4C 01 90 AD |  if_e	jmp	#LR__0231
04578     92 01 00 FF 
0457c     2B 94 06 F6 | 	mov	arg02, ##@LR__5581
04580     53 93 02 F6 | 	mov	arg01, local01
04584     30 02 B2 FD | 	call	#__system___string_cmp
04588     00 7A 0E F2 | 	cmp	result1, #0 wz
0458c     3C 01 90 AD |  if_e	jmp	#LR__0232
04590     92 01 00 FF 
04594     2F 94 06 F6 | 	mov	arg02, ##@LR__5582
04598     53 93 02 F6 | 	mov	arg01, local01
0459c     18 02 B2 FD | 	call	#__system___string_cmp
045a0     00 7A 0E F2 | 	cmp	result1, #0 wz
045a4     2C 01 90 AD |  if_e	jmp	#LR__0233
045a8     92 01 00 FF 
045ac     31 94 06 F6 | 	mov	arg02, ##@LR__5583
045b0     53 93 02 F6 | 	mov	arg01, local01
045b4     00 02 B2 FD | 	call	#__system___string_cmp
045b8     00 7A 0E F2 | 	cmp	result1, #0 wz
045bc     1C 01 90 AD |  if_e	jmp	#LR__0234
045c0     92 01 00 FF 
045c4     33 94 06 F6 | 	mov	arg02, ##@LR__5584
045c8     53 93 02 F6 | 	mov	arg01, local01
045cc     E8 01 B2 FD | 	call	#__system___string_cmp
045d0     00 7A 0E F2 | 	cmp	result1, #0 wz
045d4     0C 01 90 AD |  if_e	jmp	#LR__0235
045d8     92 01 00 FF 
045dc     36 94 06 F6 | 	mov	arg02, ##@LR__5585
045e0     53 93 02 F6 | 	mov	arg01, local01
045e4     D0 01 B2 FD | 	call	#__system___string_cmp
045e8     00 7A 0E F2 | 	cmp	result1, #0 wz
045ec     FC 00 90 AD |  if_e	jmp	#LR__0236
045f0     92 01 00 FF 
045f4     39 94 06 F6 | 	mov	arg02, ##@LR__5586
045f8     53 93 02 F6 | 	mov	arg01, local01
045fc     B8 01 B2 FD | 	call	#__system___string_cmp
04600     00 7A 0E F2 | 	cmp	result1, #0 wz
04604     EC 00 90 AD |  if_e	jmp	#LR__0237
04608     92 01 00 FF 
0460c     3B 94 06 F6 | 	mov	arg02, ##@LR__5587
04610     53 93 02 F6 | 	mov	arg01, local01
04614     A0 01 B2 FD | 	call	#__system___string_cmp
04618     00 7A 0E F2 | 	cmp	result1, #0 wz
0461c     DC 00 90 AD |  if_e	jmp	#LR__0238
04620     92 01 00 FF 
04624     3D 94 06 F6 | 	mov	arg02, ##@LR__5588
04628     53 93 02 F6 | 	mov	arg01, local01
0462c     88 01 B2 FD | 	call	#__system___string_cmp
04630     00 7A 0E F2 | 	cmp	result1, #0 wz
04634     CC 00 90 AD |  if_e	jmp	#LR__0239
04638     92 01 00 FF 
0463c     40 94 06 F6 | 	mov	arg02, ##@LR__5589
04640     53 93 02 F6 | 	mov	arg01, local01
04644     70 01 B2 FD | 	call	#__system___string_cmp
04648     00 7A 0E F2 | 	cmp	result1, #0 wz
0464c     BC 00 90 AD |  if_e	jmp	#LR__0240
04650     92 01 00 FF 
04654     43 94 06 F6 | 	mov	arg02, ##@LR__5590
04658     53 93 02 F6 | 	mov	arg01, local01
0465c     58 01 B2 FD | 	call	#__system___string_cmp
04660     00 7A 0E F2 | 	cmp	result1, #0 wz
04664     AC 00 90 AD |  if_e	jmp	#LR__0241
04668     B0 00 90 FD | 	jmp	#LR__0242
0466c                 | LR__0220
0466c     01 7A 06 F6 | 	mov	result1, #1
04670     AC 00 90 FD | 	jmp	#LR__0243
04674                 | LR__0221
04674     02 7A 06 F6 | 	mov	result1, #2
04678     A4 00 90 FD | 	jmp	#LR__0243
0467c                 | LR__0222
0467c     03 7A 06 F6 | 	mov	result1, #3
04680     9C 00 90 FD | 	jmp	#LR__0243
04684                 | LR__0223
04684     04 7A 06 F6 | 	mov	result1, #4
04688     94 00 90 FD | 	jmp	#LR__0243
0468c                 | LR__0224
0468c     05 7A 06 F6 | 	mov	result1, #5
04690     8C 00 90 FD | 	jmp	#LR__0243
04694                 | LR__0225
04694     06 7A 06 F6 | 	mov	result1, #6
04698     84 00 90 FD | 	jmp	#LR__0243
0469c                 | LR__0226
0469c     07 7A 06 F6 | 	mov	result1, #7
046a0     7C 00 90 FD | 	jmp	#LR__0243
046a4                 | LR__0227
046a4     08 7A 06 F6 | 	mov	result1, #8
046a8     74 00 90 FD | 	jmp	#LR__0243
046ac                 | LR__0228
046ac     09 7A 06 F6 | 	mov	result1, #9
046b0     6C 00 90 FD | 	jmp	#LR__0243
046b4                 | LR__0229
046b4     0A 7A 06 F6 | 	mov	result1, #10
046b8     64 00 90 FD | 	jmp	#LR__0243
046bc                 | LR__0230
046bc     0B 7A 06 F6 | 	mov	result1, #11
046c0     5C 00 90 FD | 	jmp	#LR__0243
046c4                 | LR__0231
046c4     0C 7A 06 F6 | 	mov	result1, #12
046c8     54 00 90 FD | 	jmp	#LR__0243
046cc                 | LR__0232
046cc     0D 7A 06 F6 | 	mov	result1, #13
046d0     4C 00 90 FD | 	jmp	#LR__0243
046d4                 | LR__0233
046d4     0E 7A 06 F6 | 	mov	result1, #14
046d8     44 00 90 FD | 	jmp	#LR__0243
046dc                 | LR__0234
046dc     1B 7A 06 F6 | 	mov	result1, #27
046e0     3C 00 90 FD | 	jmp	#LR__0243
046e4                 | LR__0235
046e4     27 7A 06 F6 | 	mov	result1, #39
046e8     34 00 90 FD | 	jmp	#LR__0243
046ec                 | LR__0236
046ec     26 7A 06 F6 | 	mov	result1, #38
046f0     2C 00 90 FD | 	jmp	#LR__0243
046f4                 | LR__0237
046f4     10 7A 06 F6 | 	mov	result1, #16
046f8     24 00 90 FD | 	jmp	#LR__0243
046fc                 | LR__0238
046fc     0F 7A 06 F6 | 	mov	result1, #15
04700     1C 00 90 FD | 	jmp	#LR__0243
04704                 | LR__0239
04704     2A 7A 06 F6 | 	mov	result1, #42
04708     14 00 90 FD | 	jmp	#LR__0243
0470c                 | LR__0240
0470c     28 7A 06 F6 | 	mov	result1, #40
04710     0C 00 90 FD | 	jmp	#LR__0243
04714                 | LR__0241
04714     29 7A 06 F6 | 	mov	result1, #41
04718     04 00 90 FD | 	jmp	#LR__0243
0471c                 | LR__0242
0471c     00 7A 06 F6 | 	mov	result1, #0
04720                 | LR__0243
04720     E7 F0 03 F6 | 	mov	ptra, fp
04724     F2 00 A0 FD | 	call	#popregs_
04728                 | _isoperator_ret
04728     2D 00 64 FD | 	ret
0472c                 | 
0472c                 | ' 
0472c                 | ' ' Check if the part is a channel#, return a token or 0 if not found
0472c                 | ' 
0472c                 | ' function ischannel(s as string) as ulong
0472c                 | _ischannel
0472c     02 CA 05 F6 | 	mov	COUNT_, #2
04730     E8 00 A0 FD | 	call	#pushregs_
04734                 | ' if left$(s,1)<>"#" then return 0
04734     49 A7 02 F6 | 	mov	local01, arg01
04738     01 94 06 F6 | 	mov	arg02, #1
0473c     F8 18 B2 FD | 	call	#__system__Left_S
04740     3D 93 02 F6 | 	mov	arg01, result1
04744     92 01 00 FF 
04748     46 94 06 F6 | 	mov	arg02, ##@LR__5591
0474c     68 00 B2 FD | 	call	#__system___string_cmp
04750     00 7A 0E F2 | 	cmp	result1, #0 wz
04754     00 7A 06 56 |  if_ne	mov	result1, #0
04758     AC 00 90 5D |  if_ne	jmp	#LR__0254
0475c                 | ' if len(s)<>2 then return 0
0475c     53 93 02 F6 | 	mov	arg01, local01
04760     49 A9 02 F6 | 	mov	local02, arg01
04764     D7 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
04768                 | LR__0250
04768     54 7B CA FA | 	rdbyte	result1, local02 wz
0476c     01 A8 06 51 |  if_ne	add	local02, #1
04770     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
04774                 | LR__0251
04774     49 A9 82 F1 | 	sub	local02, arg01
04778     54 7B 02 F6 | 	mov	result1, local02
0477c     02 7A 0E F2 | 	cmp	result1, #2 wz
04780     00 7A 06 56 |  if_ne	mov	result1, #0
04784     80 00 90 5D |  if_ne	jmp	#LR__0254
04788                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04788     53 93 02 F6 | 	mov	arg01, local01
0478c     01 94 06 F6 | 	mov	arg02, #1
04790     2C 19 B2 FD | 	call	#__system__Right_S
04794     3D 93 02 F6 | 	mov	arg01, result1
04798     92 01 00 FF 
0479c     48 94 06 F6 | 	mov	arg02, ##@LR__5592
047a0     14 00 B2 FD | 	call	#__system___string_cmp
047a4     00 7A 56 F2 | 	cmps	result1, #0 wc
047a8     24 00 90 CD |  if_b	jmp	#LR__0252
047ac     53 93 02 F6 | 	mov	arg01, local01
047b0     01 94 06 F6 | 	mov	arg02, #1
047b4     08 19 B2 FD | 	call	#__system__Right_S
047b8     3D 93 02 F6 | 	mov	arg01, result1
047bc     92 01 00 FF 
047c0     4A 94 06 F6 | 	mov	arg02, ##@LR__5593
047c4     F0 FF B1 FD | 	call	#__system___string_cmp
047c8     01 7A 56 F2 | 	cmps	result1, #1 wc
047cc     08 00 90 CD |  if_b	jmp	#LR__0253
047d0                 | LR__0252
047d0     00 7A 06 F6 | 	mov	result1, #0
047d4     30 00 90 FD | 	jmp	#LR__0254
047d8                 | LR__0253
047d8                 | ' return token_channel+val(right$(s,1))
047d8     53 93 02 F6 | 	mov	arg01, local01
047dc     01 94 06 F6 | 	mov	arg02, #1
047e0     DC 18 B2 FD | 	call	#__system__Right_S
047e4     3D 93 02 F6 | 	mov	arg01, result1
047e8     90 2E B2 FD | 	call	#__system____builtin_atof
047ec     3D 95 02 F6 | 	mov	arg02, result1
047f0     00 18 21 FF 
047f4     00 92 06 F6 | 	mov	arg01, ##1110441984
047f8     94 22 B2 FD | 	call	#__system___float_add
047fc     3D 93 02 F6 | 	mov	arg01, result1
04800     00 94 06 F6 | 	mov	arg02, #0
04804     20 2B B2 FD | 	call	#__system___float_tointeger
04808                 | LR__0254
04808     E7 F0 03 F6 | 	mov	ptra, fp
0480c     F2 00 A0 FD | 	call	#popregs_
04810                 | _ischannel_ret
04810     2D 00 64 FD | 	ret
04814                 | 
04814                 | ' 
04814                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
04814                 | ' ' todo: add spin2/pasm constants for pin control
04814                 | ' 
04814                 | ' function isconstant(s as string) as integer
04814                 | _isconstant
04814     01 CA 05 F6 | 	mov	COUNT_, #1
04818     E8 00 A0 FD | 	call	#pushregs_
0481c                 | ' 
0481c                 | ' select case s
0481c     49 A7 02 F6 | 	mov	local01, arg01
04820     92 01 00 FF 
04824     4C 94 06 F6 | 	mov	arg02, ##@LR__5594
04828     53 93 02 F6 | 	mov	arg01, local01
0482c     88 FF B1 FD | 	call	#__system___string_cmp
04830     00 7A 0E F2 | 	cmp	result1, #0 wz
04834     34 00 90 AD |  if_e	jmp	#LR__0260
04838     92 01 00 FF 
0483c     52 94 06 F6 | 	mov	arg02, ##@LR__5595
04840     53 93 02 F6 | 	mov	arg01, local01
04844     70 FF B1 FD | 	call	#__system___string_cmp
04848     00 7A 0E F2 | 	cmp	result1, #0 wz
0484c     24 00 90 AD |  if_e	jmp	#LR__0261
04850     92 01 00 FF 
04854     59 94 06 F6 | 	mov	arg02, ##@LR__5596
04858     53 93 02 F6 | 	mov	arg01, local01
0485c     58 FF B1 FD | 	call	#__system___string_cmp
04860     00 7A 0E F2 | 	cmp	result1, #0 wz
04864     14 00 90 AD |  if_e	jmp	#LR__0262
04868     18 00 90 FD | 	jmp	#LR__0263
0486c                 | LR__0260
0486c     01 7A 06 F6 | 	mov	result1, #1
04870     14 00 90 FD | 	jmp	#LR__0264
04874                 | LR__0261
04874     02 7A 06 F6 | 	mov	result1, #2
04878     0C 00 90 FD | 	jmp	#LR__0264
0487c                 | LR__0262
0487c     04 7A 06 F6 | 	mov	result1, #4
04880     04 00 90 FD | 	jmp	#LR__0264
04884                 | LR__0263
04884     00 7A 06 F6 | 	mov	result1, #0
04888                 | LR__0264
04888     E7 F0 03 F6 | 	mov	ptra, fp
0488c     F2 00 A0 FD | 	call	#popregs_
04890                 | _isconstant_ret
04890     2D 00 64 FD | 	ret
04894                 | 
04894                 | ' 
04894                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04894                 | ' 
04894                 | ' function isnotename(s as string) as ulong
04894                 | _isnotename
04894     07 CA 05 F6 | 	mov	COUNT_, #7
04898     E8 00 A0 FD | 	call	#pushregs_
0489c                 | ' if left$(s,1)<>"#" then return 0
0489c     49 A7 02 F6 | 	mov	local01, arg01
048a0     01 94 06 F6 | 	mov	arg02, #1
048a4     90 17 B2 FD | 	call	#__system__Left_S
048a8     3D 93 02 F6 | 	mov	arg01, result1
048ac     92 01 00 FF 
048b0     61 94 06 F6 | 	mov	arg02, ##@LR__5597
048b4     00 FF B1 FD | 	call	#__system___string_cmp
048b8     00 7A 0E F2 | 	cmp	result1, #0 wz
048bc     00 7A 06 56 |  if_ne	mov	result1, #0
048c0     30 03 90 5D |  if_ne	jmp	#LR__0293
048c4                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
048c4     53 93 02 F6 | 	mov	arg01, local01
048c8     03 94 06 F6 | 	mov	arg02, #3
048cc     01 96 06 F6 | 	mov	arg03, #1
048d0     7C 18 B2 FD | 	call	#__system__Mid_S
048d4     3D 93 02 F6 | 	mov	arg01, result1
048d8     92 01 00 FF 
048dc     63 94 06 F6 | 	mov	arg02, ##@LR__5598
048e0     D4 FE B1 FD | 	call	#__system___string_cmp
048e4     00 7A 0E F2 | 	cmp	result1, #0 wz
048e8     18 00 90 5D |  if_ne	jmp	#LR__0270
048ec     53 93 02 F6 | 	mov	arg01, local01
048f0     02 94 06 F6 | 	mov	arg02, #2
048f4     02 96 06 F6 | 	mov	arg03, #2
048f8     54 18 B2 FD | 	call	#__system__Mid_S
048fc     3D A9 02 F6 | 	mov	local02, result1
04900     14 00 90 FD | 	jmp	#LR__0271
04904                 | LR__0270
04904     53 93 02 F6 | 	mov	arg01, local01
04908     02 94 06 F6 | 	mov	arg02, #2
0490c     01 96 06 F6 | 	mov	arg03, #1
04910     3C 18 B2 FD | 	call	#__system__Mid_S
04914     3D A9 02 F6 | 	mov	local02, result1
04918                 | LR__0271
04918                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
04918     53 93 02 F6 | 	mov	arg01, local01
0491c     49 AB 02 F6 | 	mov	local03, arg01
04920     D7 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
04924                 | LR__0272
04924     55 7B CA FA | 	rdbyte	result1, local03 wz
04928     01 AA 06 51 |  if_ne	add	local03, #1
0492c     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
04930                 | LR__0273
04930     49 AB 82 F1 | 	sub	local03, arg01
04934     55 95 02 F6 | 	mov	arg02, local03
04938     01 94 86 F1 | 	sub	arg02, #1
0493c     53 93 02 F6 | 	mov	arg01, local01
04940     01 96 06 F6 | 	mov	arg03, #1
04944     08 18 B2 FD | 	call	#__system__Mid_S
04948     3D 93 02 F6 | 	mov	arg01, result1
0494c     92 01 00 FF 
04950     65 94 06 F6 | 	mov	arg02, ##@LR__5599
04954     60 FE B1 FD | 	call	#__system___string_cmp
04958     00 7A 0E F2 | 	cmp	result1, #0 wz
0495c     28 00 90 AD |  if_e	jmp	#LR__0274
04960     53 93 02 F6 | 	mov	arg01, local01
04964     01 94 06 F6 | 	mov	arg02, #1
04968     54 17 B2 FD | 	call	#__system__Right_S
0496c     3D 93 02 F6 | 	mov	arg01, result1
04970     08 2D B2 FD | 	call	#__system____builtin_atof
04974     3D 93 02 F6 | 	mov	arg01, result1
04978     00 94 06 F6 | 	mov	arg02, #0
0497c     A8 29 B2 FD | 	call	#__system___float_tointeger
04980     3D AD 02 F6 | 	mov	local04, result1
04984     34 00 90 FD | 	jmp	#LR__0275
04988                 | LR__0274
04988     53 93 02 F6 | 	mov	arg01, local01
0498c     01 94 06 F6 | 	mov	arg02, #1
04990     2C 17 B2 FD | 	call	#__system__Right_S
04994     3D 93 02 F6 | 	mov	arg01, result1
04998     E0 2C B2 FD | 	call	#__system____builtin_atof
0499c     3D 95 02 F6 | 	mov	arg02, result1
049a0     00 C0 5F FF 
049a4     00 92 06 F6 | 	mov	arg01, ##-1082130432
049a8     B4 24 B2 FD | 	call	#__system___float_mul
049ac     3D 93 02 F6 | 	mov	arg01, result1
049b0     00 94 06 F6 | 	mov	arg02, #0
049b4     70 29 B2 FD | 	call	#__system___float_tointeger
049b8     3D AD 02 F6 | 	mov	local04, result1
049bc                 | LR__0275
049bc                 | ' 
049bc                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
049bc     00 AC 0E F2 | 	cmp	local04, #0 wz
049c0     24 00 90 5D |  if_ne	jmp	#LR__0276
049c4     53 93 02 F6 | 	mov	arg01, local01
049c8     01 94 06 F6 | 	mov	arg02, #1
049cc     F0 16 B2 FD | 	call	#__system__Right_S
049d0     3D 93 02 F6 | 	mov	arg01, result1
049d4     92 01 00 FF 
049d8     67 94 06 F6 | 	mov	arg02, ##@LR__5600
049dc     D8 FD B1 FD | 	call	#__system___string_cmp
049e0     00 7A 0E F2 | 	cmp	result1, #0 wz
049e4     04 AC 06 56 |  if_ne	mov	local04, #4
049e8                 | LR__0276
049e8                 | ' 
049e8                 | ' select case s1
049e8     54 AF 02 F6 | 	mov	local05, local02
049ec     92 01 00 FF 
049f0     69 94 06 F6 | 	mov	arg02, ##@LR__5601
049f4     57 93 02 F6 | 	mov	arg01, local05
049f8     BC FD B1 FD | 	call	#__system___string_cmp
049fc     00 7A 0E F2 | 	cmp	result1, #0 wz
04a00     24 01 90 AD |  if_e	jmp	#LR__0277
04a04     92 01 00 FF 
04a08     6B 94 06 F6 | 	mov	arg02, ##@LR__5602
04a0c     57 93 02 F6 | 	mov	arg01, local05
04a10     A4 FD B1 FD | 	call	#__system___string_cmp
04a14     00 7A 0E F2 | 	cmp	result1, #0 wz
04a18     18 01 90 AD |  if_e	jmp	#LR__0278
04a1c     92 01 00 FF 
04a20     6E 94 06 F6 | 	mov	arg02, ##@LR__5603
04a24     57 93 02 F6 | 	mov	arg01, local05
04a28     8C FD B1 FD | 	call	#__system___string_cmp
04a2c     00 7A 0E F2 | 	cmp	result1, #0 wz
04a30     0C 01 90 AD |  if_e	jmp	#LR__0279
04a34     92 01 00 FF 
04a38     70 94 06 F6 | 	mov	arg02, ##@LR__5604
04a3c     57 93 02 F6 | 	mov	arg01, local05
04a40     74 FD B1 FD | 	call	#__system___string_cmp
04a44     00 7A 0E F2 | 	cmp	result1, #0 wz
04a48     00 01 90 AD |  if_e	jmp	#LR__0280
04a4c     92 01 00 FF 
04a50     73 94 06 F6 | 	mov	arg02, ##@LR__5605
04a54     57 93 02 F6 | 	mov	arg01, local05
04a58     5C FD B1 FD | 	call	#__system___string_cmp
04a5c     00 7A 0E F2 | 	cmp	result1, #0 wz
04a60     F4 00 90 AD |  if_e	jmp	#LR__0281
04a64     92 01 00 FF 
04a68     75 94 06 F6 | 	mov	arg02, ##@LR__5606
04a6c     57 93 02 F6 | 	mov	arg01, local05
04a70     44 FD B1 FD | 	call	#__system___string_cmp
04a74     00 7A 0E F2 | 	cmp	result1, #0 wz
04a78     E8 00 90 AD |  if_e	jmp	#LR__0282
04a7c     92 01 00 FF 
04a80     77 94 06 F6 | 	mov	arg02, ##@LR__5607
04a84     57 93 02 F6 | 	mov	arg01, local05
04a88     2C FD B1 FD | 	call	#__system___string_cmp
04a8c     00 7A 0E F2 | 	cmp	result1, #0 wz
04a90     DC 00 90 AD |  if_e	jmp	#LR__0283
04a94     92 01 00 FF 
04a98     7A 94 06 F6 | 	mov	arg02, ##@LR__5608
04a9c     57 93 02 F6 | 	mov	arg01, local05
04aa0     14 FD B1 FD | 	call	#__system___string_cmp
04aa4     00 7A 0E F2 | 	cmp	result1, #0 wz
04aa8     D0 00 90 AD |  if_e	jmp	#LR__0284
04aac     92 01 00 FF 
04ab0     7C 94 06 F6 | 	mov	arg02, ##@LR__5609
04ab4     57 93 02 F6 | 	mov	arg01, local05
04ab8     FC FC B1 FD | 	call	#__system___string_cmp
04abc     00 7A 0E F2 | 	cmp	result1, #0 wz
04ac0     C4 00 90 AD |  if_e	jmp	#LR__0285
04ac4     92 01 00 FF 
04ac8     7F 94 06 F6 | 	mov	arg02, ##@LR__5610
04acc     57 93 02 F6 | 	mov	arg01, local05
04ad0     E4 FC B1 FD | 	call	#__system___string_cmp
04ad4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ad8     B8 00 90 AD |  if_e	jmp	#LR__0286
04adc     92 01 00 FF 
04ae0     81 94 06 F6 | 	mov	arg02, ##@LR__5611
04ae4     57 93 02 F6 | 	mov	arg01, local05
04ae8     CC FC B1 FD | 	call	#__system___string_cmp
04aec     00 7A 0E F2 | 	cmp	result1, #0 wz
04af0     AC 00 90 AD |  if_e	jmp	#LR__0287
04af4     92 01 00 FF 
04af8     84 94 06 F6 | 	mov	arg02, ##@LR__5612
04afc     57 93 02 F6 | 	mov	arg01, local05
04b00     B4 FC B1 FD | 	call	#__system___string_cmp
04b04     00 7A 0E F2 | 	cmp	result1, #0 wz
04b08     A0 00 90 AD |  if_e	jmp	#LR__0288
04b0c     92 01 00 FF 
04b10     86 94 06 F6 | 	mov	arg02, ##@LR__5613
04b14     57 93 02 F6 | 	mov	arg01, local05
04b18     9C FC B1 FD | 	call	#__system___string_cmp
04b1c     00 7A 0E F2 | 	cmp	result1, #0 wz
04b20     94 00 90 AD |  if_e	jmp	#LR__0289
04b24     9C 00 90 FD | 	jmp	#LR__0290
04b28                 | LR__0277
04b28     01 00 00 FF 
04b2c     00 B1 06 F6 | 	mov	local06, ##768
04b30     98 00 90 FD | 	jmp	#LR__0291
04b34                 | LR__0278
04b34     01 00 00 FF 
04b38     01 B1 06 F6 | 	mov	local06, ##769
04b3c     8C 00 90 FD | 	jmp	#LR__0291
04b40                 | LR__0279
04b40     01 00 00 FF 
04b44     02 B1 06 F6 | 	mov	local06, ##770
04b48     80 00 90 FD | 	jmp	#LR__0291
04b4c                 | LR__0280
04b4c     01 00 00 FF 
04b50     03 B1 06 F6 | 	mov	local06, ##771
04b54     74 00 90 FD | 	jmp	#LR__0291
04b58                 | LR__0281
04b58     01 00 00 FF 
04b5c     04 B1 06 F6 | 	mov	local06, ##772
04b60     68 00 90 FD | 	jmp	#LR__0291
04b64                 | LR__0282
04b64     01 00 00 FF 
04b68     05 B1 06 F6 | 	mov	local06, ##773
04b6c     5C 00 90 FD | 	jmp	#LR__0291
04b70                 | LR__0283
04b70     01 00 00 FF 
04b74     06 B1 06 F6 | 	mov	local06, ##774
04b78     50 00 90 FD | 	jmp	#LR__0291
04b7c                 | LR__0284
04b7c     01 00 00 FF 
04b80     07 B1 06 F6 | 	mov	local06, ##775
04b84     44 00 90 FD | 	jmp	#LR__0291
04b88                 | LR__0285
04b88     01 00 00 FF 
04b8c     08 B1 06 F6 | 	mov	local06, ##776
04b90     38 00 90 FD | 	jmp	#LR__0291
04b94                 | LR__0286
04b94     01 00 00 FF 
04b98     09 B1 06 F6 | 	mov	local06, ##777
04b9c     2C 00 90 FD | 	jmp	#LR__0291
04ba0                 | LR__0287
04ba0     01 00 00 FF 
04ba4     0A B1 06 F6 | 	mov	local06, ##778
04ba8     20 00 90 FD | 	jmp	#LR__0291
04bac                 | LR__0288
04bac     01 00 00 FF 
04bb0     0B B1 06 F6 | 	mov	local06, ##779
04bb4     14 00 90 FD | 	jmp	#LR__0291
04bb8                 | LR__0289
04bb8     01 00 00 FF 
04bbc     0B B1 06 F6 | 	mov	local06, ##779
04bc0     08 00 90 FD | 	jmp	#LR__0291
04bc4                 | LR__0290
04bc4     00 7A 06 F6 | 	mov	result1, #0
04bc8     28 00 90 FD | 	jmp	#LR__0293
04bcc                 | LR__0291
04bcc                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04bcc     FF FF 7F FF 
04bd0     FF AD 56 F2 | 	cmps	local04, ##-1 wc
04bd4     18 00 90 CD |  if_b	jmp	#LR__0292
04bd8     0A AC 56 F2 | 	cmps	local04, #10 wc
04bdc     56 B3 02 C6 |  if_b	mov	local07, local04
04be0     01 B2 66 C0 |  if_b	shl	local07, #1
04be4     56 B3 02 C1 |  if_b	add	local07, local04
04be8     02 B2 66 C0 |  if_b	shl	local07, #2
04bec     59 B1 02 C1 |  if_b	add	local06, local07
04bf0                 | LR__0292
04bf0                 | ' return token
04bf0     58 7B 02 F6 | 	mov	result1, local06
04bf4                 | LR__0293
04bf4     E7 F0 03 F6 | 	mov	ptra, fp
04bf8     F2 00 A0 FD | 	call	#popregs_
04bfc                 | _isnotename_ret
04bfc     2D 00 64 FD | 	ret
04c00                 | 
04c00                 | ' 
04c00                 | ' ' Check if the part is a separator, return a token or 0 if not found
04c00                 | ' 
04c00                 | ' function isseparator(s as string) as ubyte
04c00                 | _isseparator
04c00     01 CA 05 F6 | 	mov	COUNT_, #1
04c04     E8 00 A0 FD | 	call	#pushregs_
04c08                 | ' 
04c08                 | ' select case s
04c08     49 A7 02 F6 | 	mov	local01, arg01
04c0c     92 01 00 FF 
04c10     88 94 06 F6 | 	mov	arg02, ##@LR__5614
04c14     53 93 02 F6 | 	mov	arg01, local01
04c18     9C FB B1 FD | 	call	#__system___string_cmp
04c1c     00 7A 0E F2 | 	cmp	result1, #0 wz
04c20     54 01 90 AD |  if_e	jmp	#LR__0300
04c24     92 01 00 FF 
04c28     8A 94 06 F6 | 	mov	arg02, ##@LR__5615
04c2c     53 93 02 F6 | 	mov	arg01, local01
04c30     84 FB B1 FD | 	call	#__system___string_cmp
04c34     00 7A 0E F2 | 	cmp	result1, #0 wz
04c38     44 01 90 AD |  if_e	jmp	#LR__0301
04c3c     92 01 00 FF 
04c40     8C 94 06 F6 | 	mov	arg02, ##@LR__5616
04c44     53 93 02 F6 | 	mov	arg01, local01
04c48     6C FB B1 FD | 	call	#__system___string_cmp
04c4c     00 7A 0E F2 | 	cmp	result1, #0 wz
04c50     34 01 90 AD |  if_e	jmp	#LR__0302
04c54     92 01 00 FF 
04c58     8E 94 06 F6 | 	mov	arg02, ##@LR__5617
04c5c     53 93 02 F6 | 	mov	arg01, local01
04c60     54 FB B1 FD | 	call	#__system___string_cmp
04c64     00 7A 0E F2 | 	cmp	result1, #0 wz
04c68     24 01 90 AD |  if_e	jmp	#LR__0303
04c6c     92 01 00 FF 
04c70     90 94 06 F6 | 	mov	arg02, ##@LR__5618
04c74     53 93 02 F6 | 	mov	arg01, local01
04c78     3C FB B1 FD | 	call	#__system___string_cmp
04c7c     00 7A 0E F2 | 	cmp	result1, #0 wz
04c80     14 01 90 AD |  if_e	jmp	#LR__0304
04c84     92 01 00 FF 
04c88     92 94 06 F6 | 	mov	arg02, ##@LR__5619
04c8c     53 93 02 F6 | 	mov	arg01, local01
04c90     24 FB B1 FD | 	call	#__system___string_cmp
04c94     00 7A 0E F2 | 	cmp	result1, #0 wz
04c98     04 01 90 AD |  if_e	jmp	#LR__0305
04c9c     92 01 00 FF 
04ca0     94 94 06 F6 | 	mov	arg02, ##@LR__5620
04ca4     53 93 02 F6 | 	mov	arg01, local01
04ca8     0C FB B1 FD | 	call	#__system___string_cmp
04cac     00 7A 0E F2 | 	cmp	result1, #0 wz
04cb0     F4 00 90 AD |  if_e	jmp	#LR__0306
04cb4     92 01 00 FF 
04cb8     96 94 06 F6 | 	mov	arg02, ##@LR__5621
04cbc     53 93 02 F6 | 	mov	arg01, local01
04cc0     F4 FA B1 FD | 	call	#__system___string_cmp
04cc4     00 7A 0E F2 | 	cmp	result1, #0 wz
04cc8     E4 00 90 AD |  if_e	jmp	#LR__0307
04ccc     92 01 00 FF 
04cd0     98 94 06 F6 | 	mov	arg02, ##@LR__5622
04cd4     53 93 02 F6 | 	mov	arg01, local01
04cd8     DC FA B1 FD | 	call	#__system___string_cmp
04cdc     00 7A 0E F2 | 	cmp	result1, #0 wz
04ce0     D4 00 90 AD |  if_e	jmp	#LR__0308
04ce4     92 01 00 FF 
04ce8     9A 94 06 F6 | 	mov	arg02, ##@LR__5623
04cec     53 93 02 F6 | 	mov	arg01, local01
04cf0     C4 FA B1 FD | 	call	#__system___string_cmp
04cf4     00 7A 0E F2 | 	cmp	result1, #0 wz
04cf8     C4 00 90 AD |  if_e	jmp	#LR__0309
04cfc     92 01 00 FF 
04d00     9C 94 06 F6 | 	mov	arg02, ##@LR__5624
04d04     53 93 02 F6 | 	mov	arg01, local01
04d08     AC FA B1 FD | 	call	#__system___string_cmp
04d0c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d10     B4 00 90 AD |  if_e	jmp	#LR__0310
04d14     92 01 00 FF 
04d18     9E 94 06 F6 | 	mov	arg02, ##@LR__5625
04d1c     53 93 02 F6 | 	mov	arg01, local01
04d20     94 FA B1 FD | 	call	#__system___string_cmp
04d24     00 7A 0E F2 | 	cmp	result1, #0 wz
04d28     A4 00 90 AD |  if_e	jmp	#LR__0311
04d2c     92 01 00 FF 
04d30     A0 94 06 F6 | 	mov	arg02, ##@LR__5626
04d34     53 93 02 F6 | 	mov	arg01, local01
04d38     7C FA B1 FD | 	call	#__system___string_cmp
04d3c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d40     94 00 90 AD |  if_e	jmp	#LR__0312
04d44     92 01 00 FF 
04d48     A2 94 06 F6 | 	mov	arg02, ##@LR__5627
04d4c     53 93 02 F6 | 	mov	arg01, local01
04d50     64 FA B1 FD | 	call	#__system___string_cmp
04d54     00 7A 0E F2 | 	cmp	result1, #0 wz
04d58     84 00 90 AD |  if_e	jmp	#LR__0313
04d5c     92 01 00 FF 
04d60     A4 94 06 F6 | 	mov	arg02, ##@LR__5628
04d64     53 93 02 F6 | 	mov	arg01, local01
04d68     4C FA B1 FD | 	call	#__system___string_cmp
04d6c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d70     74 00 90 AD |  if_e	jmp	#LR__0314
04d74     78 00 90 FD | 	jmp	#LR__0315
04d78                 | LR__0300
04d78     01 7A 06 F6 | 	mov	result1, #1
04d7c     74 00 90 FD | 	jmp	#LR__0316
04d80                 | LR__0301
04d80     02 7A 06 F6 | 	mov	result1, #2
04d84     6C 00 90 FD | 	jmp	#LR__0316
04d88                 | LR__0302
04d88     1B 7A 06 F6 | 	mov	result1, #27
04d8c     64 00 90 FD | 	jmp	#LR__0316
04d90                 | LR__0303
04d90     11 7A 06 F6 | 	mov	result1, #17
04d94     5C 00 90 FD | 	jmp	#LR__0316
04d98                 | LR__0304
04d98     05 7A 06 F6 | 	mov	result1, #5
04d9c     54 00 90 FD | 	jmp	#LR__0316
04da0                 | LR__0305
04da0     06 7A 06 F6 | 	mov	result1, #6
04da4     4C 00 90 FD | 	jmp	#LR__0316
04da8                 | LR__0306
04da8     12 7A 06 F6 | 	mov	result1, #18
04dac     44 00 90 FD | 	jmp	#LR__0316
04db0                 | LR__0307
04db0     13 7A 06 F6 | 	mov	result1, #19
04db4     3C 00 90 FD | 	jmp	#LR__0316
04db8                 | LR__0308
04db8     0C 7A 06 F6 | 	mov	result1, #12
04dbc     34 00 90 FD | 	jmp	#LR__0316
04dc0                 | LR__0309
04dc0     14 7A 06 F6 | 	mov	result1, #20
04dc4     2C 00 90 FD | 	jmp	#LR__0316
04dc8                 | LR__0310
04dc8     15 7A 06 F6 | 	mov	result1, #21
04dcc     24 00 90 FD | 	jmp	#LR__0316
04dd0                 | LR__0311
04dd0     16 7A 06 F6 | 	mov	result1, #22
04dd4     1C 00 90 FD | 	jmp	#LR__0316
04dd8                 | LR__0312
04dd8     FF 7B 06 F6 | 	mov	result1, #511
04ddc     14 00 90 FD | 	jmp	#LR__0316
04de0                 | LR__0313
04de0     0F 7A 06 F6 | 	mov	result1, #15
04de4     0C 00 90 FD | 	jmp	#LR__0316
04de8                 | LR__0314
04de8     10 7A 06 F6 | 	mov	result1, #16
04dec     04 00 90 FD | 	jmp	#LR__0316
04df0                 | LR__0315
04df0     00 7A 06 F6 | 	mov	result1, #0
04df4                 | LR__0316
04df4     E7 F0 03 F6 | 	mov	ptra, fp
04df8     F2 00 A0 FD | 	call	#popregs_
04dfc                 | _isseparator_ret
04dfc     2D 00 64 FD | 	ret
04e00                 | 
04e00                 | ' 
04e00                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04e00                 | ' 
04e00                 | ' function iscommand(s as string) as ubyte
04e00                 | _iscommand
04e00     01 CA 05 F6 | 	mov	COUNT_, #1
04e04     E8 00 A0 FD | 	call	#pushregs_
04e08                 | ' 
04e08                 | ' select case s
04e08     49 A7 02 F6 | 	mov	local01, arg01
04e0c     92 01 00 FF 
04e10     A8 94 06 F6 | 	mov	arg02, ##@LR__5630
04e14     53 93 02 F6 | 	mov	arg01, local01
04e18     9C F9 B1 FD | 	call	#__system___string_cmp
04e1c     00 7A 0E F2 | 	cmp	result1, #0 wz
04e20     24 0D 90 AD |  if_e	jmp	#LR__0320
04e24     92 01 00 FF 
04e28     AD 94 06 F6 | 	mov	arg02, ##@LR__5631
04e2c     53 93 02 F6 | 	mov	arg01, local01
04e30     84 F9 B1 FD | 	call	#__system___string_cmp
04e34     00 7A 0E F2 | 	cmp	result1, #0 wz
04e38     14 0D 90 AD |  if_e	jmp	#LR__0321
04e3c     92 01 00 FF 
04e40     B0 94 06 F6 | 	mov	arg02, ##@LR__5632
04e44     53 93 02 F6 | 	mov	arg01, local01
04e48     6C F9 B1 FD | 	call	#__system___string_cmp
04e4c     00 7A 0E F2 | 	cmp	result1, #0 wz
04e50     04 0D 90 AD |  if_e	jmp	#LR__0322
04e54     92 01 00 FF 
04e58     B5 94 06 F6 | 	mov	arg02, ##@LR__5633
04e5c     53 93 02 F6 | 	mov	arg01, local01
04e60     54 F9 B1 FD | 	call	#__system___string_cmp
04e64     00 7A 0E F2 | 	cmp	result1, #0 wz
04e68     F4 0C 90 AD |  if_e	jmp	#LR__0323
04e6c     92 01 00 FF 
04e70     B9 94 06 F6 | 	mov	arg02, ##@LR__5634
04e74     53 93 02 F6 | 	mov	arg01, local01
04e78     3C F9 B1 FD | 	call	#__system___string_cmp
04e7c     00 7A 0E F2 | 	cmp	result1, #0 wz
04e80     E4 0C 90 AD |  if_e	jmp	#LR__0324
04e84     92 01 00 FF 
04e88     BE 94 06 F6 | 	mov	arg02, ##@LR__5635
04e8c     53 93 02 F6 | 	mov	arg01, local01
04e90     24 F9 B1 FD | 	call	#__system___string_cmp
04e94     00 7A 0E F2 | 	cmp	result1, #0 wz
04e98     D4 0C 90 AD |  if_e	jmp	#LR__0325
04e9c     92 01 00 FF 
04ea0     C2 94 06 F6 | 	mov	arg02, ##@LR__5636
04ea4     53 93 02 F6 | 	mov	arg01, local01
04ea8     0C F9 B1 FD | 	call	#__system___string_cmp
04eac     00 7A 0E F2 | 	cmp	result1, #0 wz
04eb0     C4 0C 90 AD |  if_e	jmp	#LR__0326
04eb4     92 01 00 FF 
04eb8     C5 94 06 F6 | 	mov	arg02, ##@LR__5637
04ebc     53 93 02 F6 | 	mov	arg01, local01
04ec0     F4 F8 B1 FD | 	call	#__system___string_cmp
04ec4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ec8     B4 0C 90 AD |  if_e	jmp	#LR__0327
04ecc     92 01 00 FF 
04ed0     D0 94 06 F6 | 	mov	arg02, ##@LR__5638
04ed4     53 93 02 F6 | 	mov	arg01, local01
04ed8     DC F8 B1 FD | 	call	#__system___string_cmp
04edc     00 7A 0E F2 | 	cmp	result1, #0 wz
04ee0     A4 0C 90 AD |  if_e	jmp	#LR__0328
04ee4     92 01 00 FF 
04ee8     D4 94 06 F6 | 	mov	arg02, ##@LR__5639
04eec     53 93 02 F6 | 	mov	arg01, local01
04ef0     C4 F8 B1 FD | 	call	#__system___string_cmp
04ef4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ef8     94 0C 90 AD |  if_e	jmp	#LR__0329
04efc     92 01 00 FF 
04f00     DE 94 06 F6 | 	mov	arg02, ##@LR__5640
04f04     53 93 02 F6 | 	mov	arg01, local01
04f08     AC F8 B1 FD | 	call	#__system___string_cmp
04f0c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f10     84 0C 90 AD |  if_e	jmp	#LR__0330
04f14     92 01 00 FF 
04f18     E2 94 06 F6 | 	mov	arg02, ##@LR__5641
04f1c     53 93 02 F6 | 	mov	arg01, local01
04f20     94 F8 B1 FD | 	call	#__system___string_cmp
04f24     00 7A 0E F2 | 	cmp	result1, #0 wz
04f28     74 0C 90 AD |  if_e	jmp	#LR__0331
04f2c     92 01 00 FF 
04f30     EC 94 06 F6 | 	mov	arg02, ##@LR__5642
04f34     53 93 02 F6 | 	mov	arg01, local01
04f38     7C F8 B1 FD | 	call	#__system___string_cmp
04f3c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f40     64 0C 90 AD |  if_e	jmp	#LR__0332
04f44     92 01 00 FF 
04f48     F0 94 06 F6 | 	mov	arg02, ##@LR__5643
04f4c     53 93 02 F6 | 	mov	arg01, local01
04f50     64 F8 B1 FD | 	call	#__system___string_cmp
04f54     00 7A 0E F2 | 	cmp	result1, #0 wz
04f58     54 0C 90 AD |  if_e	jmp	#LR__0333
04f5c     92 01 00 FF 
04f60     FB 94 06 F6 | 	mov	arg02, ##@LR__5644
04f64     53 93 02 F6 | 	mov	arg01, local01
04f68     4C F8 B1 FD | 	call	#__system___string_cmp
04f6c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f70     44 0C 90 AD |  if_e	jmp	#LR__0334
04f74     92 01 00 FF 
04f78     FF 94 06 F6 | 	mov	arg02, ##@LR__5645
04f7c     53 93 02 F6 | 	mov	arg01, local01
04f80     34 F8 B1 FD | 	call	#__system___string_cmp
04f84     00 7A 0E F2 | 	cmp	result1, #0 wz
04f88     34 0C 90 AD |  if_e	jmp	#LR__0335
04f8c     92 01 00 FF 
04f90     06 95 06 F6 | 	mov	arg02, ##@LR__5646
04f94     53 93 02 F6 | 	mov	arg01, local01
04f98     1C F8 B1 FD | 	call	#__system___string_cmp
04f9c     00 7A 0E F2 | 	cmp	result1, #0 wz
04fa0     24 0C 90 AD |  if_e	jmp	#LR__0336
04fa4     92 01 00 FF 
04fa8     0A 95 06 F6 | 	mov	arg02, ##@LR__5647
04fac     53 93 02 F6 | 	mov	arg01, local01
04fb0     04 F8 B1 FD | 	call	#__system___string_cmp
04fb4     00 7A 0E F2 | 	cmp	result1, #0 wz
04fb8     14 0C 90 AD |  if_e	jmp	#LR__0337
04fbc     92 01 00 FF 
04fc0     10 95 06 F6 | 	mov	arg02, ##@LR__5648
04fc4     53 93 02 F6 | 	mov	arg01, local01
04fc8     EC F7 B1 FD | 	call	#__system___string_cmp
04fcc     00 7A 0E F2 | 	cmp	result1, #0 wz
04fd0     04 0C 90 AD |  if_e	jmp	#LR__0338
04fd4     92 01 00 FF 
04fd8     16 95 06 F6 | 	mov	arg02, ##@LR__5649
04fdc     53 93 02 F6 | 	mov	arg01, local01
04fe0     D4 F7 B1 FD | 	call	#__system___string_cmp
04fe4     00 7A 0E F2 | 	cmp	result1, #0 wz
04fe8     F4 0B 90 AD |  if_e	jmp	#LR__0339
04fec     92 01 00 FF 
04ff0     1A 95 06 F6 | 	mov	arg02, ##@LR__5650
04ff4     53 93 02 F6 | 	mov	arg01, local01
04ff8     BC F7 B1 FD | 	call	#__system___string_cmp
04ffc     00 7A 0E F2 | 	cmp	result1, #0 wz
05000     E4 0B 90 AD |  if_e	jmp	#LR__0340
05004     92 01 00 FF 
05008     22 95 06 F6 | 	mov	arg02, ##@LR__5651
0500c     53 93 02 F6 | 	mov	arg01, local01
05010     A4 F7 B1 FD | 	call	#__system___string_cmp
05014     00 7A 0E F2 | 	cmp	result1, #0 wz
05018     D4 0B 90 AD |  if_e	jmp	#LR__0341
0501c     92 01 00 FF 
05020     28 95 06 F6 | 	mov	arg02, ##@LR__5652
05024     53 93 02 F6 | 	mov	arg01, local01
05028     8C F7 B1 FD | 	call	#__system___string_cmp
0502c     00 7A 0E F2 | 	cmp	result1, #0 wz
05030     C4 0B 90 AD |  if_e	jmp	#LR__0342
05034     92 01 00 FF 
05038     2B 95 06 F6 | 	mov	arg02, ##@LR__5653
0503c     53 93 02 F6 | 	mov	arg01, local01
05040     74 F7 B1 FD | 	call	#__system___string_cmp
05044     00 7A 0E F2 | 	cmp	result1, #0 wz
05048     B4 0B 90 AD |  if_e	jmp	#LR__0343
0504c     92 01 00 FF 
05050     30 95 06 F6 | 	mov	arg02, ##@LR__5654
05054     53 93 02 F6 | 	mov	arg01, local01
05058     5C F7 B1 FD | 	call	#__system___string_cmp
0505c     00 7A 0E F2 | 	cmp	result1, #0 wz
05060     A4 0B 90 AD |  if_e	jmp	#LR__0344
05064     92 01 00 FF 
05068     37 95 06 F6 | 	mov	arg02, ##@LR__5655
0506c     53 93 02 F6 | 	mov	arg01, local01
05070     44 F7 B1 FD | 	call	#__system___string_cmp
05074     00 7A 0E F2 | 	cmp	result1, #0 wz
05078     94 0B 90 AD |  if_e	jmp	#LR__0345
0507c     92 01 00 FF 
05080     3C 95 06 F6 | 	mov	arg02, ##@LR__5656
05084     53 93 02 F6 | 	mov	arg01, local01
05088     2C F7 B1 FD | 	call	#__system___string_cmp
0508c     00 7A 0E F2 | 	cmp	result1, #0 wz
05090     84 0B 90 AD |  if_e	jmp	#LR__0346
05094     92 01 00 FF 
05098     44 95 06 F6 | 	mov	arg02, ##@LR__5657
0509c     53 93 02 F6 | 	mov	arg01, local01
050a0     14 F7 B1 FD | 	call	#__system___string_cmp
050a4     00 7A 0E F2 | 	cmp	result1, #0 wz
050a8     74 0B 90 AD |  if_e	jmp	#LR__0347
050ac     92 01 00 FF 
050b0     4B 95 06 F6 | 	mov	arg02, ##@LR__5658
050b4     53 93 02 F6 | 	mov	arg01, local01
050b8     FC F6 B1 FD | 	call	#__system___string_cmp
050bc     00 7A 0E F2 | 	cmp	result1, #0 wz
050c0     64 0B 90 AD |  if_e	jmp	#LR__0348
050c4     92 01 00 FF 
050c8     52 95 06 F6 | 	mov	arg02, ##@LR__5659
050cc     53 93 02 F6 | 	mov	arg01, local01
050d0     E4 F6 B1 FD | 	call	#__system___string_cmp
050d4     00 7A 0E F2 | 	cmp	result1, #0 wz
050d8     54 0B 90 AD |  if_e	jmp	#LR__0349
050dc     92 01 00 FF 
050e0     5C 95 06 F6 | 	mov	arg02, ##@LR__5660
050e4     53 93 02 F6 | 	mov	arg01, local01
050e8     CC F6 B1 FD | 	call	#__system___string_cmp
050ec     00 7A 0E F2 | 	cmp	result1, #0 wz
050f0     44 0B 90 AD |  if_e	jmp	#LR__0350
050f4     92 01 00 FF 
050f8     60 95 06 F6 | 	mov	arg02, ##@LR__5661
050fc     53 93 02 F6 | 	mov	arg01, local01
05100     B4 F6 B1 FD | 	call	#__system___string_cmp
05104     00 7A 0E F2 | 	cmp	result1, #0 wz
05108     34 0B 90 AD |  if_e	jmp	#LR__0351
0510c     92 01 00 FF 
05110     64 95 06 F6 | 	mov	arg02, ##@LR__5662
05114     53 93 02 F6 | 	mov	arg01, local01
05118     9C F6 B1 FD | 	call	#__system___string_cmp
0511c     00 7A 0E F2 | 	cmp	result1, #0 wz
05120     24 0B 90 AD |  if_e	jmp	#LR__0352
05124     92 01 00 FF 
05128     6B 95 06 F6 | 	mov	arg02, ##@LR__5663
0512c     53 93 02 F6 | 	mov	arg01, local01
05130     84 F6 B1 FD | 	call	#__system___string_cmp
05134     00 7A 0E F2 | 	cmp	result1, #0 wz
05138     14 0B 90 AD |  if_e	jmp	#LR__0353
0513c     92 01 00 FF 
05140     6F 95 06 F6 | 	mov	arg02, ##@LR__5664
05144     53 93 02 F6 | 	mov	arg01, local01
05148     6C F6 B1 FD | 	call	#__system___string_cmp
0514c     00 7A 0E F2 | 	cmp	result1, #0 wz
05150     04 0B 90 AD |  if_e	jmp	#LR__0354
05154     92 01 00 FF 
05158     73 95 06 F6 | 	mov	arg02, ##@LR__5665
0515c     53 93 02 F6 | 	mov	arg01, local01
05160     54 F6 B1 FD | 	call	#__system___string_cmp
05164     00 7A 0E F2 | 	cmp	result1, #0 wz
05168     F4 0A 90 AD |  if_e	jmp	#LR__0355
0516c     92 01 00 FF 
05170     79 95 06 F6 | 	mov	arg02, ##@LR__5666
05174     53 93 02 F6 | 	mov	arg01, local01
05178     3C F6 B1 FD | 	call	#__system___string_cmp
0517c     00 7A 0E F2 | 	cmp	result1, #0 wz
05180     E4 0A 90 AD |  if_e	jmp	#LR__0356
05184     92 01 00 FF 
05188     7E 95 06 F6 | 	mov	arg02, ##@LR__5667
0518c     53 93 02 F6 | 	mov	arg01, local01
05190     24 F6 B1 FD | 	call	#__system___string_cmp
05194     00 7A 0E F2 | 	cmp	result1, #0 wz
05198     D4 0A 90 AD |  if_e	jmp	#LR__0357
0519c     92 01 00 FF 
051a0     85 95 06 F6 | 	mov	arg02, ##@LR__5668
051a4     53 93 02 F6 | 	mov	arg01, local01
051a8     0C F6 B1 FD | 	call	#__system___string_cmp
051ac     00 7A 0E F2 | 	cmp	result1, #0 wz
051b0     C4 0A 90 AD |  if_e	jmp	#LR__0358
051b4     92 01 00 FF 
051b8     89 95 06 F6 | 	mov	arg02, ##@LR__5669
051bc     53 93 02 F6 | 	mov	arg01, local01
051c0     F4 F5 B1 FD | 	call	#__system___string_cmp
051c4     00 7A 0E F2 | 	cmp	result1, #0 wz
051c8     B4 0A 90 AD |  if_e	jmp	#LR__0359
051cc     92 01 00 FF 
051d0     8E 95 06 F6 | 	mov	arg02, ##@LR__5670
051d4     53 93 02 F6 | 	mov	arg01, local01
051d8     DC F5 B1 FD | 	call	#__system___string_cmp
051dc     00 7A 0E F2 | 	cmp	result1, #0 wz
051e0     A4 0A 90 AD |  if_e	jmp	#LR__0360
051e4     92 01 00 FF 
051e8     92 95 06 F6 | 	mov	arg02, ##@LR__5671
051ec     53 93 02 F6 | 	mov	arg01, local01
051f0     C4 F5 B1 FD | 	call	#__system___string_cmp
051f4     00 7A 0E F2 | 	cmp	result1, #0 wz
051f8     94 0A 90 AD |  if_e	jmp	#LR__0361
051fc     92 01 00 FF 
05200     98 95 06 F6 | 	mov	arg02, ##@LR__5672
05204     53 93 02 F6 | 	mov	arg01, local01
05208     AC F5 B1 FD | 	call	#__system___string_cmp
0520c     00 7A 0E F2 | 	cmp	result1, #0 wz
05210     84 0A 90 AD |  if_e	jmp	#LR__0362
05214     92 01 00 FF 
05218     9B 95 06 F6 | 	mov	arg02, ##@LR__5673
0521c     53 93 02 F6 | 	mov	arg01, local01
05220     94 F5 B1 FD | 	call	#__system___string_cmp
05224     00 7A 0E F2 | 	cmp	result1, #0 wz
05228     74 0A 90 AD |  if_e	jmp	#LR__0363
0522c     92 01 00 FF 
05230     A3 95 06 F6 | 	mov	arg02, ##@LR__5674
05234     53 93 02 F6 | 	mov	arg01, local01
05238     7C F5 B1 FD | 	call	#__system___string_cmp
0523c     00 7A 0E F2 | 	cmp	result1, #0 wz
05240     64 0A 90 AD |  if_e	jmp	#LR__0364
05244     92 01 00 FF 
05248     A7 95 06 F6 | 	mov	arg02, ##@LR__5675
0524c     53 93 02 F6 | 	mov	arg01, local01
05250     64 F5 B1 FD | 	call	#__system___string_cmp
05254     00 7A 0E F2 | 	cmp	result1, #0 wz
05258     54 0A 90 AD |  if_e	jmp	#LR__0365
0525c     92 01 00 FF 
05260     AC 95 06 F6 | 	mov	arg02, ##@LR__5676
05264     53 93 02 F6 | 	mov	arg01, local01
05268     4C F5 B1 FD | 	call	#__system___string_cmp
0526c     00 7A 0E F2 | 	cmp	result1, #0 wz
05270     44 0A 90 AD |  if_e	jmp	#LR__0366
05274     92 01 00 FF 
05278     B0 95 06 F6 | 	mov	arg02, ##@LR__5677
0527c     53 93 02 F6 | 	mov	arg01, local01
05280     34 F5 B1 FD | 	call	#__system___string_cmp
05284     00 7A 0E F2 | 	cmp	result1, #0 wz
05288     34 0A 90 AD |  if_e	jmp	#LR__0367
0528c     92 01 00 FF 
05290     B5 95 06 F6 | 	mov	arg02, ##@LR__5678
05294     53 93 02 F6 | 	mov	arg01, local01
05298     1C F5 B1 FD | 	call	#__system___string_cmp
0529c     00 7A 0E F2 | 	cmp	result1, #0 wz
052a0     24 0A 90 AD |  if_e	jmp	#LR__0368
052a4     92 01 00 FF 
052a8     B9 95 06 F6 | 	mov	arg02, ##@LR__5679
052ac     53 93 02 F6 | 	mov	arg01, local01
052b0     04 F5 B1 FD | 	call	#__system___string_cmp
052b4     00 7A 0E F2 | 	cmp	result1, #0 wz
052b8     14 0A 90 AD |  if_e	jmp	#LR__0369
052bc     92 01 00 FF 
052c0     BC 95 06 F6 | 	mov	arg02, ##@LR__5680
052c4     53 93 02 F6 | 	mov	arg01, local01
052c8     EC F4 B1 FD | 	call	#__system___string_cmp
052cc     00 7A 0E F2 | 	cmp	result1, #0 wz
052d0     04 0A 90 AD |  if_e	jmp	#LR__0370
052d4     92 01 00 FF 
052d8     C2 95 06 F6 | 	mov	arg02, ##@LR__5681
052dc     53 93 02 F6 | 	mov	arg01, local01
052e0     D4 F4 B1 FD | 	call	#__system___string_cmp
052e4     00 7A 0E F2 | 	cmp	result1, #0 wz
052e8     F4 09 90 AD |  if_e	jmp	#LR__0371
052ec     92 01 00 FF 
052f0     C6 95 06 F6 | 	mov	arg02, ##@LR__5682
052f4     53 93 02 F6 | 	mov	arg01, local01
052f8     BC F4 B1 FD | 	call	#__system___string_cmp
052fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05300     E4 09 90 AD |  if_e	jmp	#LR__0372
05304     92 01 00 FF 
05308     CA 95 06 F6 | 	mov	arg02, ##@LR__5683
0530c     53 93 02 F6 | 	mov	arg01, local01
05310     A4 F4 B1 FD | 	call	#__system___string_cmp
05314     00 7A 0E F2 | 	cmp	result1, #0 wz
05318     D4 09 90 AD |  if_e	jmp	#LR__0373
0531c     92 01 00 FF 
05320     D0 95 06 F6 | 	mov	arg02, ##@LR__5684
05324     53 93 02 F6 | 	mov	arg01, local01
05328     8C F4 B1 FD | 	call	#__system___string_cmp
0532c     00 7A 0E F2 | 	cmp	result1, #0 wz
05330     C4 09 90 AD |  if_e	jmp	#LR__0374
05334     92 01 00 FF 
05338     D5 95 06 F6 | 	mov	arg02, ##@LR__5685
0533c     53 93 02 F6 | 	mov	arg01, local01
05340     74 F4 B1 FD | 	call	#__system___string_cmp
05344     00 7A 0E F2 | 	cmp	result1, #0 wz
05348     B4 09 90 AD |  if_e	jmp	#LR__0375
0534c     92 01 00 FF 
05350     D8 95 06 F6 | 	mov	arg02, ##@LR__5686
05354     53 93 02 F6 | 	mov	arg01, local01
05358     5C F4 B1 FD | 	call	#__system___string_cmp
0535c     00 7A 0E F2 | 	cmp	result1, #0 wz
05360     A4 09 90 AD |  if_e	jmp	#LR__0376
05364     92 01 00 FF 
05368     DB 95 06 F6 | 	mov	arg02, ##@LR__5687
0536c     53 93 02 F6 | 	mov	arg01, local01
05370     44 F4 B1 FD | 	call	#__system___string_cmp
05374     00 7A 0E F2 | 	cmp	result1, #0 wz
05378     94 09 90 AD |  if_e	jmp	#LR__0377
0537c     92 01 00 FF 
05380     DF 95 06 F6 | 	mov	arg02, ##@LR__5688
05384     53 93 02 F6 | 	mov	arg01, local01
05388     2C F4 B1 FD | 	call	#__system___string_cmp
0538c     00 7A 0E F2 | 	cmp	result1, #0 wz
05390     84 09 90 AD |  if_e	jmp	#LR__0378
05394     92 01 00 FF 
05398     E2 95 06 F6 | 	mov	arg02, ##@LR__5689
0539c     53 93 02 F6 | 	mov	arg01, local01
053a0     14 F4 B1 FD | 	call	#__system___string_cmp
053a4     00 7A 0E F2 | 	cmp	result1, #0 wz
053a8     74 09 90 AD |  if_e	jmp	#LR__0379
053ac     92 01 00 FF 
053b0     E8 95 06 F6 | 	mov	arg02, ##@LR__5690
053b4     53 93 02 F6 | 	mov	arg01, local01
053b8     FC F3 B1 FD | 	call	#__system___string_cmp
053bc     00 7A 0E F2 | 	cmp	result1, #0 wz
053c0     64 09 90 AD |  if_e	jmp	#LR__0380
053c4     92 01 00 FF 
053c8     ED 95 06 F6 | 	mov	arg02, ##@LR__5691
053cc     53 93 02 F6 | 	mov	arg01, local01
053d0     E4 F3 B1 FD | 	call	#__system___string_cmp
053d4     00 7A 0E F2 | 	cmp	result1, #0 wz
053d8     54 09 90 AD |  if_e	jmp	#LR__0381
053dc     92 01 00 FF 
053e0     F0 95 06 F6 | 	mov	arg02, ##@LR__5692
053e4     53 93 02 F6 | 	mov	arg01, local01
053e8     CC F3 B1 FD | 	call	#__system___string_cmp
053ec     00 7A 0E F2 | 	cmp	result1, #0 wz
053f0     44 09 90 AD |  if_e	jmp	#LR__0382
053f4     92 01 00 FF 
053f8     F5 95 06 F6 | 	mov	arg02, ##@LR__5693
053fc     53 93 02 F6 | 	mov	arg01, local01
05400     B4 F3 B1 FD | 	call	#__system___string_cmp
05404     00 7A 0E F2 | 	cmp	result1, #0 wz
05408     34 09 90 AD |  if_e	jmp	#LR__0383
0540c     92 01 00 FF 
05410     F9 95 06 F6 | 	mov	arg02, ##@LR__5694
05414     53 93 02 F6 | 	mov	arg01, local01
05418     9C F3 B1 FD | 	call	#__system___string_cmp
0541c     00 7A 0E F2 | 	cmp	result1, #0 wz
05420     24 09 90 AD |  if_e	jmp	#LR__0384
05424     92 01 00 FF 
05428     FF 95 06 F6 | 	mov	arg02, ##@LR__5695
0542c     53 93 02 F6 | 	mov	arg01, local01
05430     84 F3 B1 FD | 	call	#__system___string_cmp
05434     00 7A 0E F2 | 	cmp	result1, #0 wz
05438     14 09 90 AD |  if_e	jmp	#LR__0385
0543c     93 01 00 FF 
05440     05 94 06 F6 | 	mov	arg02, ##@LR__5696
05444     53 93 02 F6 | 	mov	arg01, local01
05448     6C F3 B1 FD | 	call	#__system___string_cmp
0544c     00 7A 0E F2 | 	cmp	result1, #0 wz
05450     04 09 90 AD |  if_e	jmp	#LR__0386
05454     93 01 00 FF 
05458     0A 94 06 F6 | 	mov	arg02, ##@LR__5697
0545c     53 93 02 F6 | 	mov	arg01, local01
05460     54 F3 B1 FD | 	call	#__system___string_cmp
05464     00 7A 0E F2 | 	cmp	result1, #0 wz
05468     F4 08 90 AD |  if_e	jmp	#LR__0387
0546c     93 01 00 FF 
05470     0D 94 06 F6 | 	mov	arg02, ##@LR__5698
05474     53 93 02 F6 | 	mov	arg01, local01
05478     3C F3 B1 FD | 	call	#__system___string_cmp
0547c     00 7A 0E F2 | 	cmp	result1, #0 wz
05480     E4 08 90 AD |  if_e	jmp	#LR__0388
05484     93 01 00 FF 
05488     13 94 06 F6 | 	mov	arg02, ##@LR__5699
0548c     53 93 02 F6 | 	mov	arg01, local01
05490     24 F3 B1 FD | 	call	#__system___string_cmp
05494     00 7A 0E F2 | 	cmp	result1, #0 wz
05498     D4 08 90 AD |  if_e	jmp	#LR__0389
0549c     93 01 00 FF 
054a0     17 94 06 F6 | 	mov	arg02, ##@LR__5700
054a4     53 93 02 F6 | 	mov	arg01, local01
054a8     0C F3 B1 FD | 	call	#__system___string_cmp
054ac     00 7A 0E F2 | 	cmp	result1, #0 wz
054b0     C4 08 90 AD |  if_e	jmp	#LR__0390
054b4     93 01 00 FF 
054b8     1C 94 06 F6 | 	mov	arg02, ##@LR__5701
054bc     53 93 02 F6 | 	mov	arg01, local01
054c0     F4 F2 B1 FD | 	call	#__system___string_cmp
054c4     00 7A 0E F2 | 	cmp	result1, #0 wz
054c8     B4 08 90 AD |  if_e	jmp	#LR__0391
054cc     93 01 00 FF 
054d0     1F 94 06 F6 | 	mov	arg02, ##@LR__5702
054d4     53 93 02 F6 | 	mov	arg01, local01
054d8     DC F2 B1 FD | 	call	#__system___string_cmp
054dc     00 7A 0E F2 | 	cmp	result1, #0 wz
054e0     A4 08 90 AD |  if_e	jmp	#LR__0392
054e4     93 01 00 FF 
054e8     22 94 06 F6 | 	mov	arg02, ##@LR__5703
054ec     53 93 02 F6 | 	mov	arg01, local01
054f0     C4 F2 B1 FD | 	call	#__system___string_cmp
054f4     00 7A 0E F2 | 	cmp	result1, #0 wz
054f8     94 08 90 AD |  if_e	jmp	#LR__0393
054fc     93 01 00 FF 
05500     27 94 06 F6 | 	mov	arg02, ##@LR__5704
05504     53 93 02 F6 | 	mov	arg01, local01
05508     AC F2 B1 FD | 	call	#__system___string_cmp
0550c     00 7A 0E F2 | 	cmp	result1, #0 wz
05510     84 08 90 AD |  if_e	jmp	#LR__0394
05514     93 01 00 FF 
05518     2D 94 06 F6 | 	mov	arg02, ##@LR__5705
0551c     53 93 02 F6 | 	mov	arg01, local01
05520     94 F2 B1 FD | 	call	#__system___string_cmp
05524     00 7A 0E F2 | 	cmp	result1, #0 wz
05528     74 08 90 AD |  if_e	jmp	#LR__0395
0552c     93 01 00 FF 
05530     31 94 06 F6 | 	mov	arg02, ##@LR__5706
05534     53 93 02 F6 | 	mov	arg01, local01
05538     7C F2 B1 FD | 	call	#__system___string_cmp
0553c     00 7A 0E F2 | 	cmp	result1, #0 wz
05540     64 08 90 AD |  if_e	jmp	#LR__0396
05544     93 01 00 FF 
05548     3A 94 06 F6 | 	mov	arg02, ##@LR__5707
0554c     53 93 02 F6 | 	mov	arg01, local01
05550     64 F2 B1 FD | 	call	#__system___string_cmp
05554     00 7A 0E F2 | 	cmp	result1, #0 wz
05558     54 08 90 AD |  if_e	jmp	#LR__0397
0555c     93 01 00 FF 
05560     40 94 06 F6 | 	mov	arg02, ##@LR__5708
05564     53 93 02 F6 | 	mov	arg01, local01
05568     4C F2 B1 FD | 	call	#__system___string_cmp
0556c     00 7A 0E F2 | 	cmp	result1, #0 wz
05570     44 08 90 AD |  if_e	jmp	#LR__0398
05574     93 01 00 FF 
05578     46 94 06 F6 | 	mov	arg02, ##@LR__5709
0557c     53 93 02 F6 | 	mov	arg01, local01
05580     34 F2 B1 FD | 	call	#__system___string_cmp
05584     00 7A 0E F2 | 	cmp	result1, #0 wz
05588     34 08 90 AD |  if_e	jmp	#LR__0399
0558c     93 01 00 FF 
05590     4F 94 06 F6 | 	mov	arg02, ##@LR__5710
05594     53 93 02 F6 | 	mov	arg01, local01
05598     1C F2 B1 FD | 	call	#__system___string_cmp
0559c     00 7A 0E F2 | 	cmp	result1, #0 wz
055a0     24 08 90 AD |  if_e	jmp	#LR__0400
055a4     93 01 00 FF 
055a8     59 94 06 F6 | 	mov	arg02, ##@LR__5711
055ac     53 93 02 F6 | 	mov	arg01, local01
055b0     04 F2 B1 FD | 	call	#__system___string_cmp
055b4     00 7A 0E F2 | 	cmp	result1, #0 wz
055b8     14 08 90 AD |  if_e	jmp	#LR__0401
055bc     93 01 00 FF 
055c0     62 94 06 F6 | 	mov	arg02, ##@LR__5712
055c4     53 93 02 F6 | 	mov	arg01, local01
055c8     EC F1 B1 FD | 	call	#__system___string_cmp
055cc     00 7A 0E F2 | 	cmp	result1, #0 wz
055d0     04 08 90 AD |  if_e	jmp	#LR__0402
055d4     93 01 00 FF 
055d8     67 94 06 F6 | 	mov	arg02, ##@LR__5713
055dc     53 93 02 F6 | 	mov	arg01, local01
055e0     D4 F1 B1 FD | 	call	#__system___string_cmp
055e4     00 7A 0E F2 | 	cmp	result1, #0 wz
055e8     F4 07 90 AD |  if_e	jmp	#LR__0403
055ec     93 01 00 FF 
055f0     6A 94 06 F6 | 	mov	arg02, ##@LR__5714
055f4     53 93 02 F6 | 	mov	arg01, local01
055f8     BC F1 B1 FD | 	call	#__system___string_cmp
055fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05600     E4 07 90 AD |  if_e	jmp	#LR__0404
05604     93 01 00 FF 
05608     6F 94 06 F6 | 	mov	arg02, ##@LR__5715
0560c     53 93 02 F6 | 	mov	arg01, local01
05610     A4 F1 B1 FD | 	call	#__system___string_cmp
05614     00 7A 0E F2 | 	cmp	result1, #0 wz
05618     D4 07 90 AD |  if_e	jmp	#LR__0405
0561c     93 01 00 FF 
05620     73 94 06 F6 | 	mov	arg02, ##@LR__5716
05624     53 93 02 F6 | 	mov	arg01, local01
05628     8C F1 B1 FD | 	call	#__system___string_cmp
0562c     00 7A 0E F2 | 	cmp	result1, #0 wz
05630     C4 07 90 AD |  if_e	jmp	#LR__0406
05634     93 01 00 FF 
05638     78 94 06 F6 | 	mov	arg02, ##@LR__5717
0563c     53 93 02 F6 | 	mov	arg01, local01
05640     74 F1 B1 FD | 	call	#__system___string_cmp
05644     00 7A 0E F2 | 	cmp	result1, #0 wz
05648     B4 07 90 AD |  if_e	jmp	#LR__0407
0564c     93 01 00 FF 
05650     7C 94 06 F6 | 	mov	arg02, ##@LR__5718
05654     53 93 02 F6 | 	mov	arg01, local01
05658     5C F1 B1 FD | 	call	#__system___string_cmp
0565c     00 7A 0E F2 | 	cmp	result1, #0 wz
05660     A4 07 90 AD |  if_e	jmp	#LR__0408
05664     93 01 00 FF 
05668     85 94 06 F6 | 	mov	arg02, ##@LR__5719
0566c     53 93 02 F6 | 	mov	arg01, local01
05670     44 F1 B1 FD | 	call	#__system___string_cmp
05674     00 7A 0E F2 | 	cmp	result1, #0 wz
05678     94 07 90 AD |  if_e	jmp	#LR__0409
0567c     93 01 00 FF 
05680     8A 94 06 F6 | 	mov	arg02, ##@LR__5720
05684     53 93 02 F6 | 	mov	arg01, local01
05688     2C F1 B1 FD | 	call	#__system___string_cmp
0568c     00 7A 0E F2 | 	cmp	result1, #0 wz
05690     84 07 90 AD |  if_e	jmp	#LR__0410
05694     93 01 00 FF 
05698     90 94 06 F6 | 	mov	arg02, ##@LR__5721
0569c     53 93 02 F6 | 	mov	arg01, local01
056a0     14 F1 B1 FD | 	call	#__system___string_cmp
056a4     00 7A 0E F2 | 	cmp	result1, #0 wz
056a8     74 07 90 AD |  if_e	jmp	#LR__0411
056ac     93 01 00 FF 
056b0     92 94 06 F6 | 	mov	arg02, ##@LR__5722
056b4     53 93 02 F6 | 	mov	arg01, local01
056b8     FC F0 B1 FD | 	call	#__system___string_cmp
056bc     00 7A 0E F2 | 	cmp	result1, #0 wz
056c0     64 07 90 AD |  if_e	jmp	#LR__0412
056c4     93 01 00 FF 
056c8     96 94 06 F6 | 	mov	arg02, ##@LR__5723
056cc     53 93 02 F6 | 	mov	arg01, local01
056d0     E4 F0 B1 FD | 	call	#__system___string_cmp
056d4     00 7A 0E F2 | 	cmp	result1, #0 wz
056d8     54 07 90 AD |  if_e	jmp	#LR__0413
056dc     93 01 00 FF 
056e0     9A 94 06 F6 | 	mov	arg02, ##@LR__5724
056e4     53 93 02 F6 | 	mov	arg01, local01
056e8     CC F0 B1 FD | 	call	#__system___string_cmp
056ec     00 7A 0E F2 | 	cmp	result1, #0 wz
056f0     44 07 90 AD |  if_e	jmp	#LR__0414
056f4     93 01 00 FF 
056f8     9F 94 06 F6 | 	mov	arg02, ##@LR__5725
056fc     53 93 02 F6 | 	mov	arg01, local01
05700     B4 F0 B1 FD | 	call	#__system___string_cmp
05704     00 7A 0E F2 | 	cmp	result1, #0 wz
05708     34 07 90 AD |  if_e	jmp	#LR__0415
0570c     93 01 00 FF 
05710     A7 94 06 F6 | 	mov	arg02, ##@LR__5726
05714     53 93 02 F6 | 	mov	arg01, local01
05718     9C F0 B1 FD | 	call	#__system___string_cmp
0571c     00 7A 0E F2 | 	cmp	result1, #0 wz
05720     24 07 90 AD |  if_e	jmp	#LR__0416
05724     93 01 00 FF 
05728     AB 94 06 F6 | 	mov	arg02, ##@LR__5727
0572c     53 93 02 F6 | 	mov	arg01, local01
05730     84 F0 B1 FD | 	call	#__system___string_cmp
05734     00 7A 0E F2 | 	cmp	result1, #0 wz
05738     14 07 90 AD |  if_e	jmp	#LR__0417
0573c     93 01 00 FF 
05740     AD 94 06 F6 | 	mov	arg02, ##@LR__5728
05744     53 93 02 F6 | 	mov	arg01, local01
05748     6C F0 B1 FD | 	call	#__system___string_cmp
0574c     00 7A 0E F2 | 	cmp	result1, #0 wz
05750     04 07 90 AD |  if_e	jmp	#LR__0418
05754     93 01 00 FF 
05758     B5 94 06 F6 | 	mov	arg02, ##@LR__5729
0575c     53 93 02 F6 | 	mov	arg01, local01
05760     54 F0 B1 FD | 	call	#__system___string_cmp
05764     00 7A 0E F2 | 	cmp	result1, #0 wz
05768     F4 06 90 AD |  if_e	jmp	#LR__0419
0576c     93 01 00 FF 
05770     C4 94 06 F6 | 	mov	arg02, ##@LR__5730
05774     53 93 02 F6 | 	mov	arg01, local01
05778     3C F0 B1 FD | 	call	#__system___string_cmp
0577c     00 7A 0E F2 | 	cmp	result1, #0 wz
05780     E4 06 90 AD |  if_e	jmp	#LR__0420
05784     93 01 00 FF 
05788     C8 94 06 F6 | 	mov	arg02, ##@LR__5731
0578c     53 93 02 F6 | 	mov	arg01, local01
05790     24 F0 B1 FD | 	call	#__system___string_cmp
05794     00 7A 0E F2 | 	cmp	result1, #0 wz
05798     D4 06 90 AD |  if_e	jmp	#LR__0421
0579c     93 01 00 FF 
057a0     CF 94 06 F6 | 	mov	arg02, ##@LR__5732
057a4     53 93 02 F6 | 	mov	arg01, local01
057a8     0C F0 B1 FD | 	call	#__system___string_cmp
057ac     00 7A 0E F2 | 	cmp	result1, #0 wz
057b0     C4 06 90 AD |  if_e	jmp	#LR__0422
057b4     93 01 00 FF 
057b8     D3 94 06 F6 | 	mov	arg02, ##@LR__5733
057bc     53 93 02 F6 | 	mov	arg01, local01
057c0     F4 EF B1 FD | 	call	#__system___string_cmp
057c4     00 7A 0E F2 | 	cmp	result1, #0 wz
057c8     B4 06 90 AD |  if_e	jmp	#LR__0423
057cc     93 01 00 FF 
057d0     D6 94 06 F6 | 	mov	arg02, ##@LR__5734
057d4     53 93 02 F6 | 	mov	arg01, local01
057d8     DC EF B1 FD | 	call	#__system___string_cmp
057dc     00 7A 0E F2 | 	cmp	result1, #0 wz
057e0     A4 06 90 AD |  if_e	jmp	#LR__0424
057e4     93 01 00 FF 
057e8     DB 94 06 F6 | 	mov	arg02, ##@LR__5735
057ec     53 93 02 F6 | 	mov	arg01, local01
057f0     C4 EF B1 FD | 	call	#__system___string_cmp
057f4     00 7A 0E F2 | 	cmp	result1, #0 wz
057f8     94 06 90 AD |  if_e	jmp	#LR__0425
057fc     93 01 00 FF 
05800     DE 94 06 F6 | 	mov	arg02, ##@LR__5736
05804     53 93 02 F6 | 	mov	arg01, local01
05808     AC EF B1 FD | 	call	#__system___string_cmp
0580c     00 7A 0E F2 | 	cmp	result1, #0 wz
05810     84 06 90 AD |  if_e	jmp	#LR__0426
05814     93 01 00 FF 
05818     E7 94 06 F6 | 	mov	arg02, ##@LR__5737
0581c     53 93 02 F6 | 	mov	arg01, local01
05820     94 EF B1 FD | 	call	#__system___string_cmp
05824     00 7A 0E F2 | 	cmp	result1, #0 wz
05828     74 06 90 AD |  if_e	jmp	#LR__0427
0582c     93 01 00 FF 
05830     EB 94 06 F6 | 	mov	arg02, ##@LR__5738
05834     53 93 02 F6 | 	mov	arg01, local01
05838     7C EF B1 FD | 	call	#__system___string_cmp
0583c     00 7A 0E F2 | 	cmp	result1, #0 wz
05840     64 06 90 AD |  if_e	jmp	#LR__0428
05844     93 01 00 FF 
05848     F4 94 06 F6 | 	mov	arg02, ##@LR__5739
0584c     53 93 02 F6 | 	mov	arg01, local01
05850     64 EF B1 FD | 	call	#__system___string_cmp
05854     00 7A 0E F2 | 	cmp	result1, #0 wz
05858     54 06 90 AD |  if_e	jmp	#LR__0429
0585c     93 01 00 FF 
05860     F8 94 06 F6 | 	mov	arg02, ##@LR__5740
05864     53 93 02 F6 | 	mov	arg01, local01
05868     4C EF B1 FD | 	call	#__system___string_cmp
0586c     00 7A 0E F2 | 	cmp	result1, #0 wz
05870     44 06 90 AD |  if_e	jmp	#LR__0430
05874     93 01 00 FF 
05878     01 95 06 F6 | 	mov	arg02, ##@LR__5741
0587c     53 93 02 F6 | 	mov	arg01, local01
05880     34 EF B1 FD | 	call	#__system___string_cmp
05884     00 7A 0E F2 | 	cmp	result1, #0 wz
05888     34 06 90 AD |  if_e	jmp	#LR__0431
0588c     93 01 00 FF 
05890     05 95 06 F6 | 	mov	arg02, ##@LR__5742
05894     53 93 02 F6 | 	mov	arg01, local01
05898     1C EF B1 FD | 	call	#__system___string_cmp
0589c     00 7A 0E F2 | 	cmp	result1, #0 wz
058a0     24 06 90 AD |  if_e	jmp	#LR__0432
058a4     93 01 00 FF 
058a8     0C 95 06 F6 | 	mov	arg02, ##@LR__5743
058ac     53 93 02 F6 | 	mov	arg01, local01
058b0     04 EF B1 FD | 	call	#__system___string_cmp
058b4     00 7A 0E F2 | 	cmp	result1, #0 wz
058b8     14 06 90 AD |  if_e	jmp	#LR__0433
058bc     93 01 00 FF 
058c0     10 95 06 F6 | 	mov	arg02, ##@LR__5744
058c4     53 93 02 F6 | 	mov	arg01, local01
058c8     EC EE B1 FD | 	call	#__system___string_cmp
058cc     00 7A 0E F2 | 	cmp	result1, #0 wz
058d0     04 06 90 AD |  if_e	jmp	#LR__0434
058d4     93 01 00 FF 
058d8     17 95 06 F6 | 	mov	arg02, ##@LR__5745
058dc     53 93 02 F6 | 	mov	arg01, local01
058e0     D4 EE B1 FD | 	call	#__system___string_cmp
058e4     00 7A 0E F2 | 	cmp	result1, #0 wz
058e8     F4 05 90 AD |  if_e	jmp	#LR__0435
058ec     93 01 00 FF 
058f0     1B 95 06 F6 | 	mov	arg02, ##@LR__5746
058f4     53 93 02 F6 | 	mov	arg01, local01
058f8     BC EE B1 FD | 	call	#__system___string_cmp
058fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05900     E4 05 90 AD |  if_e	jmp	#LR__0436
05904     93 01 00 FF 
05908     22 95 06 F6 | 	mov	arg02, ##@LR__5747
0590c     53 93 02 F6 | 	mov	arg01, local01
05910     A4 EE B1 FD | 	call	#__system___string_cmp
05914     00 7A 0E F2 | 	cmp	result1, #0 wz
05918     D4 05 90 AD |  if_e	jmp	#LR__0437
0591c     93 01 00 FF 
05920     26 95 06 F6 | 	mov	arg02, ##@LR__5748
05924     53 93 02 F6 | 	mov	arg01, local01
05928     8C EE B1 FD | 	call	#__system___string_cmp
0592c     00 7A 0E F2 | 	cmp	result1, #0 wz
05930     C4 05 90 AD |  if_e	jmp	#LR__0438
05934     93 01 00 FF 
05938     31 95 06 F6 | 	mov	arg02, ##@LR__5749
0593c     53 93 02 F6 | 	mov	arg01, local01
05940     74 EE B1 FD | 	call	#__system___string_cmp
05944     00 7A 0E F2 | 	cmp	result1, #0 wz
05948     B4 05 90 AD |  if_e	jmp	#LR__0439
0594c     93 01 00 FF 
05950     35 95 06 F6 | 	mov	arg02, ##@LR__5750
05954     53 93 02 F6 | 	mov	arg01, local01
05958     5C EE B1 FD | 	call	#__system___string_cmp
0595c     00 7A 0E F2 | 	cmp	result1, #0 wz
05960     A4 05 90 AD |  if_e	jmp	#LR__0440
05964     93 01 00 FF 
05968     3C 95 06 F6 | 	mov	arg02, ##@LR__5751
0596c     53 93 02 F6 | 	mov	arg01, local01
05970     44 EE B1 FD | 	call	#__system___string_cmp
05974     00 7A 0E F2 | 	cmp	result1, #0 wz
05978     94 05 90 AD |  if_e	jmp	#LR__0441
0597c     93 01 00 FF 
05980     40 95 06 F6 | 	mov	arg02, ##@LR__5752
05984     53 93 02 F6 | 	mov	arg01, local01
05988     2C EE B1 FD | 	call	#__system___string_cmp
0598c     00 7A 0E F2 | 	cmp	result1, #0 wz
05990     84 05 90 AD |  if_e	jmp	#LR__0442
05994     93 01 00 FF 
05998     48 95 06 F6 | 	mov	arg02, ##@LR__5753
0599c     53 93 02 F6 | 	mov	arg01, local01
059a0     14 EE B1 FD | 	call	#__system___string_cmp
059a4     00 7A 0E F2 | 	cmp	result1, #0 wz
059a8     74 05 90 AD |  if_e	jmp	#LR__0443
059ac     93 01 00 FF 
059b0     4C 95 06 F6 | 	mov	arg02, ##@LR__5754
059b4     53 93 02 F6 | 	mov	arg01, local01
059b8     FC ED B1 FD | 	call	#__system___string_cmp
059bc     00 7A 0E F2 | 	cmp	result1, #0 wz
059c0     64 05 90 AD |  if_e	jmp	#LR__0444
059c4     93 01 00 FF 
059c8     53 95 06 F6 | 	mov	arg02, ##@LR__5755
059cc     53 93 02 F6 | 	mov	arg01, local01
059d0     E4 ED B1 FD | 	call	#__system___string_cmp
059d4     00 7A 0E F2 | 	cmp	result1, #0 wz
059d8     54 05 90 AD |  if_e	jmp	#LR__0445
059dc     93 01 00 FF 
059e0     5A 95 06 F6 | 	mov	arg02, ##@LR__5756
059e4     53 93 02 F6 | 	mov	arg01, local01
059e8     CC ED B1 FD | 	call	#__system___string_cmp
059ec     00 7A 0E F2 | 	cmp	result1, #0 wz
059f0     44 05 90 AD |  if_e	jmp	#LR__0446
059f4     93 01 00 FF 
059f8     5E 95 06 F6 | 	mov	arg02, ##@LR__5757
059fc     53 93 02 F6 | 	mov	arg01, local01
05a00     B4 ED B1 FD | 	call	#__system___string_cmp
05a04     00 7A 0E F2 | 	cmp	result1, #0 wz
05a08     34 05 90 AD |  if_e	jmp	#LR__0447
05a0c     93 01 00 FF 
05a10     64 95 06 F6 | 	mov	arg02, ##@LR__5758
05a14     53 93 02 F6 | 	mov	arg01, local01
05a18     9C ED B1 FD | 	call	#__system___string_cmp
05a1c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a20     24 05 90 AD |  if_e	jmp	#LR__0448
05a24     93 01 00 FF 
05a28     68 95 06 F6 | 	mov	arg02, ##@LR__5759
05a2c     53 93 02 F6 | 	mov	arg01, local01
05a30     84 ED B1 FD | 	call	#__system___string_cmp
05a34     00 7A 0E F2 | 	cmp	result1, #0 wz
05a38     14 05 90 AD |  if_e	jmp	#LR__0449
05a3c     93 01 00 FF 
05a40     6F 95 06 F6 | 	mov	arg02, ##@LR__5760
05a44     53 93 02 F6 | 	mov	arg01, local01
05a48     6C ED B1 FD | 	call	#__system___string_cmp
05a4c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a50     04 05 90 AD |  if_e	jmp	#LR__0450
05a54     93 01 00 FF 
05a58     74 95 06 F6 | 	mov	arg02, ##@LR__5761
05a5c     53 93 02 F6 | 	mov	arg01, local01
05a60     54 ED B1 FD | 	call	#__system___string_cmp
05a64     00 7A 0E F2 | 	cmp	result1, #0 wz
05a68     F4 04 90 AD |  if_e	jmp	#LR__0451
05a6c     93 01 00 FF 
05a70     79 95 06 F6 | 	mov	arg02, ##@LR__5762
05a74     53 93 02 F6 | 	mov	arg01, local01
05a78     3C ED B1 FD | 	call	#__system___string_cmp
05a7c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a80     E4 04 90 AD |  if_e	jmp	#LR__0452
05a84     93 01 00 FF 
05a88     80 95 06 F6 | 	mov	arg02, ##@LR__5763
05a8c     53 93 02 F6 | 	mov	arg01, local01
05a90     24 ED B1 FD | 	call	#__system___string_cmp
05a94     00 7A 0E F2 | 	cmp	result1, #0 wz
05a98     D4 04 90 AD |  if_e	jmp	#LR__0453
05a9c     93 01 00 FF 
05aa0     83 95 06 F6 | 	mov	arg02, ##@LR__5764
05aa4     53 93 02 F6 | 	mov	arg01, local01
05aa8     0C ED B1 FD | 	call	#__system___string_cmp
05aac     00 7A 0E F2 | 	cmp	result1, #0 wz
05ab0     C4 04 90 AD |  if_e	jmp	#LR__0454
05ab4     93 01 00 FF 
05ab8     8D 95 06 F6 | 	mov	arg02, ##@LR__5765
05abc     53 93 02 F6 | 	mov	arg01, local01
05ac0     F4 EC B1 FD | 	call	#__system___string_cmp
05ac4     00 7A 0E F2 | 	cmp	result1, #0 wz
05ac8     B4 04 90 AD |  if_e	jmp	#LR__0455
05acc     93 01 00 FF 
05ad0     91 95 06 F6 | 	mov	arg02, ##@LR__5766
05ad4     53 93 02 F6 | 	mov	arg01, local01
05ad8     DC EC B1 FD | 	call	#__system___string_cmp
05adc     00 7A 0E F2 | 	cmp	result1, #0 wz
05ae0     A4 04 90 AD |  if_e	jmp	#LR__0456
05ae4     93 01 00 FF 
05ae8     99 95 06 F6 | 	mov	arg02, ##@LR__5767
05aec     53 93 02 F6 | 	mov	arg01, local01
05af0     C4 EC B1 FD | 	call	#__system___string_cmp
05af4     00 7A 0E F2 | 	cmp	result1, #0 wz
05af8     94 04 90 AD |  if_e	jmp	#LR__0457
05afc     93 01 00 FF 
05b00     9D 95 06 F6 | 	mov	arg02, ##@LR__5768
05b04     53 93 02 F6 | 	mov	arg01, local01
05b08     AC EC B1 FD | 	call	#__system___string_cmp
05b0c     00 7A 0E F2 | 	cmp	result1, #0 wz
05b10     84 04 90 AD |  if_e	jmp	#LR__0458
05b14     93 01 00 FF 
05b18     A3 95 06 F6 | 	mov	arg02, ##@LR__5769
05b1c     53 93 02 F6 | 	mov	arg01, local01
05b20     94 EC B1 FD | 	call	#__system___string_cmp
05b24     00 7A 0E F2 | 	cmp	result1, #0 wz
05b28     74 04 90 AD |  if_e	jmp	#LR__0459
05b2c     93 01 00 FF 
05b30     A9 95 06 F6 | 	mov	arg02, ##@LR__5770
05b34     53 93 02 F6 | 	mov	arg01, local01
05b38     7C EC B1 FD | 	call	#__system___string_cmp
05b3c     00 7A 0E F2 | 	cmp	result1, #0 wz
05b40     64 04 90 AD |  if_e	jmp	#LR__0460
05b44     68 04 90 FD | 	jmp	#LR__0461
05b48                 | LR__0320
05b48     5C 7A 06 F6 | 	mov	result1, #92
05b4c     64 04 90 FD | 	jmp	#LR__0462
05b50                 | LR__0321
05b50     5C 7A 06 F6 | 	mov	result1, #92
05b54     5C 04 90 FD | 	jmp	#LR__0462
05b58                 | LR__0322
05b58     B9 7A 06 F6 | 	mov	result1, #185
05b5c     54 04 90 FD | 	jmp	#LR__0462
05b60                 | LR__0323
05b60     47 7A 06 F6 | 	mov	result1, #71
05b64     4C 04 90 FD | 	jmp	#LR__0462
05b68                 | LR__0324
05b68     59 7A 06 F6 | 	mov	result1, #89
05b6c     44 04 90 FD | 	jmp	#LR__0462
05b70                 | LR__0325
05b70     59 7A 06 F6 | 	mov	result1, #89
05b74     3C 04 90 FD | 	jmp	#LR__0462
05b78                 | LR__0326
05b78     C3 7A 06 F6 | 	mov	result1, #195
05b7c     34 04 90 FD | 	jmp	#LR__0462
05b80                 | LR__0327
05b80     AE 7A 06 F6 | 	mov	result1, #174
05b84     2C 04 90 FD | 	jmp	#LR__0462
05b88                 | LR__0328
05b88     AE 7A 06 F6 | 	mov	result1, #174
05b8c     24 04 90 FD | 	jmp	#LR__0462
05b90                 | LR__0329
05b90     B1 7A 06 F6 | 	mov	result1, #177
05b94     1C 04 90 FD | 	jmp	#LR__0462
05b98                 | LR__0330
05b98     B1 7A 06 F6 | 	mov	result1, #177
05b9c     14 04 90 FD | 	jmp	#LR__0462
05ba0                 | LR__0331
05ba0     AF 7A 06 F6 | 	mov	result1, #175
05ba4     0C 04 90 FD | 	jmp	#LR__0462
05ba8                 | LR__0332
05ba8     AF 7A 06 F6 | 	mov	result1, #175
05bac     04 04 90 FD | 	jmp	#LR__0462
05bb0                 | LR__0333
05bb0     B0 7A 06 F6 | 	mov	result1, #176
05bb4     FC 03 90 FD | 	jmp	#LR__0462
05bb8                 | LR__0334
05bb8     B0 7A 06 F6 | 	mov	result1, #176
05bbc     F4 03 90 FD | 	jmp	#LR__0462
05bc0                 | LR__0335
05bc0     45 7A 06 F6 | 	mov	result1, #69
05bc4     EC 03 90 FD | 	jmp	#LR__0462
05bc8                 | LR__0336
05bc8     45 7A 06 F6 | 	mov	result1, #69
05bcc     E4 03 90 FD | 	jmp	#LR__0462
05bd0                 | LR__0337
05bd0     69 7A 06 F6 | 	mov	result1, #105
05bd4     DC 03 90 FD | 	jmp	#LR__0462
05bd8                 | LR__0338
05bd8     B4 7A 06 F6 | 	mov	result1, #180
05bdc     D4 03 90 FD | 	jmp	#LR__0462
05be0                 | LR__0339
05be0     40 7A 06 F6 | 	mov	result1, #64
05be4     CC 03 90 FD | 	jmp	#LR__0462
05be8                 | LR__0340
05be8     CF 7A 06 F6 | 	mov	result1, #207
05bec     C4 03 90 FD | 	jmp	#LR__0462
05bf0                 | LR__0341
05bf0     49 7A 06 F6 | 	mov	result1, #73
05bf4     BC 03 90 FD | 	jmp	#LR__0462
05bf8                 | LR__0342
05bf8     49 7A 06 F6 | 	mov	result1, #73
05bfc     B4 03 90 FD | 	jmp	#LR__0462
05c00                 | LR__0343
05c00     C4 7A 06 F6 | 	mov	result1, #196
05c04     AC 03 90 FD | 	jmp	#LR__0462
05c08                 | LR__0344
05c08     68 7A 06 F6 | 	mov	result1, #104
05c0c     A4 03 90 FD | 	jmp	#LR__0462
05c10                 | LR__0345
05c10     B7 7A 06 F6 | 	mov	result1, #183
05c14     9C 03 90 FD | 	jmp	#LR__0462
05c18                 | LR__0346
05c18     D9 7A 06 F6 | 	mov	result1, #217
05c1c     94 03 90 FD | 	jmp	#LR__0462
05c20                 | LR__0347
05c20     73 7A 06 F6 | 	mov	result1, #115
05c24     8C 03 90 FD | 	jmp	#LR__0462
05c28                 | LR__0348
05c28     74 7A 06 F6 | 	mov	result1, #116
05c2c     84 03 90 FD | 	jmp	#LR__0462
05c30                 | LR__0349
05c30     6C 7A 06 F6 | 	mov	result1, #108
05c34     7C 03 90 FD | 	jmp	#LR__0462
05c38                 | LR__0350
05c38     6C 7A 06 F6 | 	mov	result1, #108
05c3c     74 03 90 FD | 	jmp	#LR__0462
05c40                 | LR__0351
05c40     89 7A 06 F6 | 	mov	result1, #137
05c44     6C 03 90 FD | 	jmp	#LR__0462
05c48                 | LR__0352
05c48     C2 7A 06 F6 | 	mov	result1, #194
05c4c     64 03 90 FD | 	jmp	#LR__0462
05c50                 | LR__0353
05c50     72 7A 06 F6 | 	mov	result1, #114
05c54     5C 03 90 FD | 	jmp	#LR__0462
05c58                 | LR__0354
05c58     5D 7A 06 F6 | 	mov	result1, #93
05c5c     54 03 90 FD | 	jmp	#LR__0462
05c60                 | LR__0355
05c60     96 7A 06 F6 | 	mov	result1, #150
05c64     4C 03 90 FD | 	jmp	#LR__0462
05c68                 | LR__0356
05c68     43 7A 06 F6 | 	mov	result1, #67
05c6c     44 03 90 FD | 	jmp	#LR__0462
05c70                 | LR__0357
05c70     43 7A 06 F6 | 	mov	result1, #67
05c74     3C 03 90 FD | 	jmp	#LR__0462
05c78                 | LR__0358
05c78     43 7A 06 F6 | 	mov	result1, #67
05c7c     34 03 90 FD | 	jmp	#LR__0462
05c80                 | LR__0359
05c80     5A 7A 06 F6 | 	mov	result1, #90
05c84     2C 03 90 FD | 	jmp	#LR__0462
05c88                 | LR__0360
05c88     AB 7A 06 F6 | 	mov	result1, #171
05c8c     24 03 90 FD | 	jmp	#LR__0462
05c90                 | LR__0361
05c90     BD 7A 06 F6 | 	mov	result1, #189
05c94     1C 03 90 FD | 	jmp	#LR__0462
05c98                 | LR__0362
05c98     BD 7A 06 F6 | 	mov	result1, #189
05c9c     14 03 90 FD | 	jmp	#LR__0462
05ca0                 | LR__0363
05ca0     46 7A 06 F6 | 	mov	result1, #70
05ca4     0C 03 90 FD | 	jmp	#LR__0462
05ca8                 | LR__0364
05ca8     46 7A 06 F6 | 	mov	result1, #70
05cac     04 03 90 FD | 	jmp	#LR__0462
05cb0                 | LR__0365
05cb0     71 7A 06 F6 | 	mov	result1, #113
05cb4     FC 02 90 FD | 	jmp	#LR__0462
05cb8                 | LR__0366
05cb8     71 7A 06 F6 | 	mov	result1, #113
05cbc     F4 02 90 FD | 	jmp	#LR__0462
05cc0                 | LR__0367
05cc0     60 7A 06 F6 | 	mov	result1, #96
05cc4     EC 02 90 FD | 	jmp	#LR__0462
05cc8                 | LR__0368
05cc8     4A 7A 06 F6 | 	mov	result1, #74
05ccc     E4 02 90 FD | 	jmp	#LR__0462
05cd0                 | LR__0369
05cd0     4A 7A 06 F6 | 	mov	result1, #74
05cd4     DC 02 90 FD | 	jmp	#LR__0462
05cd8                 | LR__0370
05cd8     48 7A 06 F6 | 	mov	result1, #72
05cdc     D4 02 90 FD | 	jmp	#LR__0462
05ce0                 | LR__0371
05ce0     48 7A 06 F6 | 	mov	result1, #72
05ce4     CC 02 90 FD | 	jmp	#LR__0462
05ce8                 | LR__0372
05ce8     BB 7A 06 F6 | 	mov	result1, #187
05cec     C4 02 90 FD | 	jmp	#LR__0462
05cf0                 | LR__0373
05cf0     A9 7A 06 F6 | 	mov	result1, #169
05cf4     BC 02 90 FD | 	jmp	#LR__0462
05cf8                 | LR__0374
05cf8     4E 7A 06 F6 | 	mov	result1, #78
05cfc     B4 02 90 FD | 	jmp	#LR__0462
05d00                 | LR__0375
05d00     4E 7A 06 F6 | 	mov	result1, #78
05d04     AC 02 90 FD | 	jmp	#LR__0462
05d08                 | LR__0376
05d08     58 7A 06 F6 | 	mov	result1, #88
05d0c     A4 02 90 FD | 	jmp	#LR__0462
05d10                 | LR__0377
05d10     5F 7A 06 F6 | 	mov	result1, #95
05d14     9C 02 90 FD | 	jmp	#LR__0462
05d18                 | LR__0378
05d18     5F 7A 06 F6 | 	mov	result1, #95
05d1c     94 02 90 FD | 	jmp	#LR__0462
05d20                 | LR__0379
05d20     B5 7A 06 F6 | 	mov	result1, #181
05d24     8C 02 90 FD | 	jmp	#LR__0462
05d28                 | LR__0380
05d28     4C 7A 06 F6 | 	mov	result1, #76
05d2c     84 02 90 FD | 	jmp	#LR__0462
05d30                 | LR__0381
05d30     4C 7A 06 F6 | 	mov	result1, #76
05d34     7C 02 90 FD | 	jmp	#LR__0462
05d38                 | LR__0382
05d38     52 7A 06 F6 | 	mov	result1, #82
05d3c     74 02 90 FD | 	jmp	#LR__0462
05d40                 | LR__0383
05d40     52 7A 06 F6 | 	mov	result1, #82
05d44     6C 02 90 FD | 	jmp	#LR__0462
05d48                 | LR__0384
05d48     97 7A 06 F6 | 	mov	result1, #151
05d4c     64 02 90 FD | 	jmp	#LR__0462
05d50                 | LR__0385
05d50     C6 7A 06 F6 | 	mov	result1, #198
05d54     5C 02 90 FD | 	jmp	#LR__0462
05d58                 | LR__0386
05d58     61 7A 06 F6 | 	mov	result1, #97
05d5c     54 02 90 FD | 	jmp	#LR__0462
05d60                 | LR__0387
05d60     61 7A 06 F6 | 	mov	result1, #97
05d64     4C 02 90 FD | 	jmp	#LR__0462
05d68                 | LR__0388
05d68     63 7A 06 F6 | 	mov	result1, #99
05d6c     44 02 90 FD | 	jmp	#LR__0462
05d70                 | LR__0389
05d70     41 7A 06 F6 | 	mov	result1, #65
05d74     3C 02 90 FD | 	jmp	#LR__0462
05d78                 | LR__0390
05d78     4B 7A 06 F6 | 	mov	result1, #75
05d7c     34 02 90 FD | 	jmp	#LR__0462
05d80                 | LR__0391
05d80     4B 7A 06 F6 | 	mov	result1, #75
05d84     2C 02 90 FD | 	jmp	#LR__0462
05d88                 | LR__0392
05d88     C1 7A 06 F6 | 	mov	result1, #193
05d8c     24 02 90 FD | 	jmp	#LR__0462
05d90                 | LR__0393
05d90     B3 7A 06 F6 | 	mov	result1, #179
05d94     1C 02 90 FD | 	jmp	#LR__0462
05d98                 | LR__0394
05d98     5E 7A 06 F6 | 	mov	result1, #94
05d9c     14 02 90 FD | 	jmp	#LR__0462
05da0                 | LR__0395
05da0     5E 7A 06 F6 | 	mov	result1, #94
05da4     0C 02 90 FD | 	jmp	#LR__0462
05da8                 | LR__0396
05da8     7C 7A 06 F6 | 	mov	result1, #124
05dac     04 02 90 FD | 	jmp	#LR__0462
05db0                 | LR__0397
05db0     7E 7A 06 F6 | 	mov	result1, #126
05db4     FC 01 90 FD | 	jmp	#LR__0462
05db8                 | LR__0398
05db8     7D 7A 06 F6 | 	mov	result1, #125
05dbc     F4 01 90 FD | 	jmp	#LR__0462
05dc0                 | LR__0399
05dc0     7F 7A 06 F6 | 	mov	result1, #127
05dc4     EC 01 90 FD | 	jmp	#LR__0462
05dc8                 | LR__0400
05dc8     80 7A 06 F6 | 	mov	result1, #128
05dcc     E4 01 90 FD | 	jmp	#LR__0462
05dd0                 | LR__0401
05dd0     55 7A 06 F6 | 	mov	result1, #85
05dd4     DC 01 90 FD | 	jmp	#LR__0462
05dd8                 | LR__0402
05dd8     75 7A 06 F6 | 	mov	result1, #117
05ddc     D4 01 90 FD | 	jmp	#LR__0462
05de0                 | LR__0403
05de0     75 7A 06 F6 | 	mov	result1, #117
05de4     CC 01 90 FD | 	jmp	#LR__0462
05de8                 | LR__0404
05de8     42 7A 06 F6 | 	mov	result1, #66
05dec     C4 01 90 FD | 	jmp	#LR__0462
05df0                 | LR__0405
05df0     42 7A 06 F6 | 	mov	result1, #66
05df4     BC 01 90 FD | 	jmp	#LR__0462
05df8                 | LR__0406
05df8     95 7A 06 F6 | 	mov	result1, #149
05dfc     B4 01 90 FD | 	jmp	#LR__0462
05e00                 | LR__0407
05e00     AC 7A 06 F6 | 	mov	result1, #172
05e04     AC 01 90 FD | 	jmp	#LR__0462
05e08                 | LR__0408
05e08     81 7A 06 F6 | 	mov	result1, #129
05e0c     A4 01 90 FD | 	jmp	#LR__0462
05e10                 | LR__0409
05e10     81 7A 06 F6 | 	mov	result1, #129
05e14     9C 01 90 FD | 	jmp	#LR__0462
05e18                 | LR__0410
05e18     44 7A 06 F6 | 	mov	result1, #68
05e1c     94 01 90 FD | 	jmp	#LR__0462
05e20                 | LR__0411
05e20     44 7A 06 F6 | 	mov	result1, #68
05e24     8C 01 90 FD | 	jmp	#LR__0462
05e28                 | LR__0412
05e28     BC 7A 06 F6 | 	mov	result1, #188
05e2c     84 01 90 FD | 	jmp	#LR__0462
05e30                 | LR__0413
05e30     88 7A 06 F6 | 	mov	result1, #136
05e34     7C 01 90 FD | 	jmp	#LR__0462
05e38                 | LR__0414
05e38     B6 7A 06 F6 | 	mov	result1, #182
05e3c     74 01 90 FD | 	jmp	#LR__0462
05e40                 | LR__0415
05e40     92 7A 06 F6 | 	mov	result1, #146
05e44     6C 01 90 FD | 	jmp	#LR__0462
05e48                 | LR__0416
05e48     BE 7A 06 F6 | 	mov	result1, #190
05e4c     64 01 90 FD | 	jmp	#LR__0462
05e50                 | LR__0417
05e50     BE 7A 06 F6 | 	mov	result1, #190
05e54     5C 01 90 FD | 	jmp	#LR__0462
05e58                 | LR__0418
05e58     C7 7A 06 F6 | 	mov	result1, #199
05e5c     54 01 90 FD | 	jmp	#LR__0462
05e60                 | LR__0419
05e60     D4 7A 06 F6 | 	mov	result1, #212
05e64     4C 01 90 FD | 	jmp	#LR__0462
05e68                 | LR__0420
05e68     D4 7A 06 F6 | 	mov	result1, #212
05e6c     44 01 90 FD | 	jmp	#LR__0462
05e70                 | LR__0421
05e70     AA 7A 06 F6 | 	mov	result1, #170
05e74     3C 01 90 FD | 	jmp	#LR__0462
05e78                 | LR__0422
05e78     4D 7A 06 F6 | 	mov	result1, #77
05e7c     34 01 90 FD | 	jmp	#LR__0462
05e80                 | LR__0423
05e80     4D 7A 06 F6 | 	mov	result1, #77
05e84     2C 01 90 FD | 	jmp	#LR__0462
05e88                 | LR__0424
05e88     51 7A 06 F6 | 	mov	result1, #81
05e8c     24 01 90 FD | 	jmp	#LR__0462
05e90                 | LR__0425
05e90     51 7A 06 F6 | 	mov	result1, #81
05e94     1C 01 90 FD | 	jmp	#LR__0462
05e98                 | LR__0426
05e98     D2 7A 06 F6 | 	mov	result1, #210
05e9c     14 01 90 FD | 	jmp	#LR__0462
05ea0                 | LR__0427
05ea0     D2 7A 06 F6 | 	mov	result1, #210
05ea4     0C 01 90 FD | 	jmp	#LR__0462
05ea8                 | LR__0428
05ea8     DA 7A 06 F6 | 	mov	result1, #218
05eac     04 01 90 FD | 	jmp	#LR__0462
05eb0                 | LR__0429
05eb0     DA 7A 06 F6 | 	mov	result1, #218
05eb4     FC 00 90 FD | 	jmp	#LR__0462
05eb8                 | LR__0430
05eb8     8E 7A 06 F6 | 	mov	result1, #142
05ebc     F4 00 90 FD | 	jmp	#LR__0462
05ec0                 | LR__0431
05ec0     8E 7A 06 F6 | 	mov	result1, #142
05ec4     EC 00 90 FD | 	jmp	#LR__0462
05ec8                 | LR__0432
05ec8     90 7A 06 F6 | 	mov	result1, #144
05ecc     E4 00 90 FD | 	jmp	#LR__0462
05ed0                 | LR__0433
05ed0     90 7A 06 F6 | 	mov	result1, #144
05ed4     DC 00 90 FD | 	jmp	#LR__0462
05ed8                 | LR__0434
05ed8     8D 7A 06 F6 | 	mov	result1, #141
05edc     D4 00 90 FD | 	jmp	#LR__0462
05ee0                 | LR__0435
05ee0     8D 7A 06 F6 | 	mov	result1, #141
05ee4     CC 00 90 FD | 	jmp	#LR__0462
05ee8                 | LR__0436
05ee8     8C 7A 06 F6 | 	mov	result1, #140
05eec     C4 00 90 FD | 	jmp	#LR__0462
05ef0                 | LR__0437
05ef0     8C 7A 06 F6 | 	mov	result1, #140
05ef4     BC 00 90 FD | 	jmp	#LR__0462
05ef8                 | LR__0438
05ef8     91 7A 06 F6 | 	mov	result1, #145
05efc     B4 00 90 FD | 	jmp	#LR__0462
05f00                 | LR__0439
05f00     91 7A 06 F6 | 	mov	result1, #145
05f04     AC 00 90 FD | 	jmp	#LR__0462
05f08                 | LR__0440
05f08     8B 7A 06 F6 | 	mov	result1, #139
05f0c     A4 00 90 FD | 	jmp	#LR__0462
05f10                 | LR__0441
05f10     8B 7A 06 F6 | 	mov	result1, #139
05f14     9C 00 90 FD | 	jmp	#LR__0462
05f18                 | LR__0442
05f18     8F 7A 06 F6 | 	mov	result1, #143
05f1c     94 00 90 FD | 	jmp	#LR__0462
05f20                 | LR__0443
05f20     8F 7A 06 F6 | 	mov	result1, #143
05f24     8C 00 90 FD | 	jmp	#LR__0462
05f28                 | LR__0444
05f28     8F 7A 06 F6 | 	mov	result1, #143
05f2c     84 00 90 FD | 	jmp	#LR__0462
05f30                 | LR__0445
05f30     B2 7A 06 F6 | 	mov	result1, #178
05f34     7C 00 90 FD | 	jmp	#LR__0462
05f38                 | LR__0446
05f38     B2 7A 06 F6 | 	mov	result1, #178
05f3c     74 00 90 FD | 	jmp	#LR__0462
05f40                 | LR__0447
05f40     75 7A 06 F6 | 	mov	result1, #117
05f44     6C 00 90 FD | 	jmp	#LR__0462
05f48                 | LR__0448
05f48     75 7A 06 F6 | 	mov	result1, #117
05f4c     64 00 90 FD | 	jmp	#LR__0462
05f50                 | LR__0449
05f50     6D 7A 06 F6 | 	mov	result1, #109
05f54     5C 00 90 FD | 	jmp	#LR__0462
05f58                 | LR__0450
05f58     6D 7A 06 F6 | 	mov	result1, #109
05f5c     54 00 90 FD | 	jmp	#LR__0462
05f60                 | LR__0451
05f60     5B 7A 06 F6 | 	mov	result1, #91
05f64     4C 00 90 FD | 	jmp	#LR__0462
05f68                 | LR__0452
05f68     56 7A 06 F6 | 	mov	result1, #86
05f6c     44 00 90 FD | 	jmp	#LR__0462
05f70                 | LR__0453
05f70     56 7A 06 F6 | 	mov	result1, #86
05f74     3C 00 90 FD | 	jmp	#LR__0462
05f78                 | LR__0454
05f78     70 7A 06 F6 | 	mov	result1, #112
05f7c     34 00 90 FD | 	jmp	#LR__0462
05f80                 | LR__0455
05f80     70 7A 06 F6 | 	mov	result1, #112
05f84     2C 00 90 FD | 	jmp	#LR__0462
05f88                 | LR__0456
05f88     57 7A 06 F6 | 	mov	result1, #87
05f8c     24 00 90 FD | 	jmp	#LR__0462
05f90                 | LR__0457
05f90     57 7A 06 F6 | 	mov	result1, #87
05f94     1C 00 90 FD | 	jmp	#LR__0462
05f98                 | LR__0458
05f98     79 7A 06 F6 | 	mov	result1, #121
05f9c     14 00 90 FD | 	jmp	#LR__0462
05fa0                 | LR__0459
05fa0     77 7A 06 F6 | 	mov	result1, #119
05fa4     0C 00 90 FD | 	jmp	#LR__0462
05fa8                 | LR__0460
05fa8     78 7A 06 F6 | 	mov	result1, #120
05fac     04 00 90 FD | 	jmp	#LR__0462
05fb0                 | LR__0461
05fb0     00 7A 06 F6 | 	mov	result1, #0
05fb4                 | LR__0462
05fb4     E7 F0 03 F6 | 	mov	ptra, fp
05fb8     F2 00 A0 FD | 	call	#popregs_
05fbc                 | _iscommand_ret
05fbc     2D 00 64 FD | 	ret
05fc0                 | 
05fc0                 | ' 
05fc0                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05fc0                 | ' 
05fc0                 | ' function isfunction(s as string) as ubyte
05fc0                 | _isfunction
05fc0     01 CA 05 F6 | 	mov	COUNT_, #1
05fc4     E8 00 A0 FD | 	call	#pushregs_
05fc8                 | ' 
05fc8                 | ' select case s
05fc8     49 A7 02 F6 | 	mov	local01, arg01
05fcc     93 01 00 FF 
05fd0     AF 95 06 F6 | 	mov	arg02, ##@LR__5771
05fd4     53 93 02 F6 | 	mov	arg01, local01
05fd8     DC E7 B1 FD | 	call	#__system___string_cmp
05fdc     00 7A 0E F2 | 	cmp	result1, #0 wz
05fe0     EC 05 90 AD |  if_e	jmp	#LR__0470
05fe4     93 01 00 FF 
05fe8     B3 95 06 F6 | 	mov	arg02, ##@LR__5772
05fec     53 93 02 F6 | 	mov	arg01, local01
05ff0     C4 E7 B1 FD | 	call	#__system___string_cmp
05ff4     00 7A 0E F2 | 	cmp	result1, #0 wz
05ff8     DC 05 90 AD |  if_e	jmp	#LR__0471
05ffc     93 01 00 FF 
06000     B8 95 06 F6 | 	mov	arg02, ##@LR__5773
06004     53 93 02 F6 | 	mov	arg01, local01
06008     AC E7 B1 FD | 	call	#__system___string_cmp
0600c     00 7A 0E F2 | 	cmp	result1, #0 wz
06010     CC 05 90 AD |  if_e	jmp	#LR__0472
06014     93 01 00 FF 
06018     BC 95 06 F6 | 	mov	arg02, ##@LR__5774
0601c     53 93 02 F6 | 	mov	arg01, local01
06020     94 E7 B1 FD | 	call	#__system___string_cmp
06024     00 7A 0E F2 | 	cmp	result1, #0 wz
06028     BC 05 90 AD |  if_e	jmp	#LR__0473
0602c     93 01 00 FF 
06030     C1 95 06 F6 | 	mov	arg02, ##@LR__5775
06034     53 93 02 F6 | 	mov	arg01, local01
06038     7C E7 B1 FD | 	call	#__system___string_cmp
0603c     00 7A 0E F2 | 	cmp	result1, #0 wz
06040     AC 05 90 AD |  if_e	jmp	#LR__0474
06044     93 01 00 FF 
06048     C5 95 06 F6 | 	mov	arg02, ##@LR__5776
0604c     53 93 02 F6 | 	mov	arg01, local01
06050     64 E7 B1 FD | 	call	#__system___string_cmp
06054     00 7A 0E F2 | 	cmp	result1, #0 wz
06058     9C 05 90 AD |  if_e	jmp	#LR__0475
0605c     93 01 00 FF 
06060     CA 95 06 F6 | 	mov	arg02, ##@LR__5777
06064     53 93 02 F6 | 	mov	arg01, local01
06068     4C E7 B1 FD | 	call	#__system___string_cmp
0606c     00 7A 0E F2 | 	cmp	result1, #0 wz
06070     8C 05 90 AD |  if_e	jmp	#LR__0476
06074     93 01 00 FF 
06078     CE 95 06 F6 | 	mov	arg02, ##@LR__5778
0607c     53 93 02 F6 | 	mov	arg01, local01
06080     34 E7 B1 FD | 	call	#__system___string_cmp
06084     00 7A 0E F2 | 	cmp	result1, #0 wz
06088     7C 05 90 AD |  if_e	jmp	#LR__0477
0608c     93 01 00 FF 
06090     D3 95 06 F6 | 	mov	arg02, ##@LR__5779
06094     53 93 02 F6 | 	mov	arg01, local01
06098     1C E7 B1 FD | 	call	#__system___string_cmp
0609c     00 7A 0E F2 | 	cmp	result1, #0 wz
060a0     6C 05 90 AD |  if_e	jmp	#LR__0478
060a4     93 01 00 FF 
060a8     D8 95 06 F6 | 	mov	arg02, ##@LR__5780
060ac     53 93 02 F6 | 	mov	arg01, local01
060b0     04 E7 B1 FD | 	call	#__system___string_cmp
060b4     00 7A 0E F2 | 	cmp	result1, #0 wz
060b8     5C 05 90 AD |  if_e	jmp	#LR__0479
060bc     93 01 00 FF 
060c0     E0 95 06 F6 | 	mov	arg02, ##@LR__5781
060c4     53 93 02 F6 | 	mov	arg01, local01
060c8     EC E6 B1 FD | 	call	#__system___string_cmp
060cc     00 7A 0E F2 | 	cmp	result1, #0 wz
060d0     4C 05 90 AD |  if_e	jmp	#LR__0480
060d4     93 01 00 FF 
060d8     E4 95 06 F6 | 	mov	arg02, ##@LR__5782
060dc     53 93 02 F6 | 	mov	arg01, local01
060e0     D4 E6 B1 FD | 	call	#__system___string_cmp
060e4     00 7A 0E F2 | 	cmp	result1, #0 wz
060e8     3C 05 90 AD |  if_e	jmp	#LR__0481
060ec     93 01 00 FF 
060f0     EA 95 06 F6 | 	mov	arg02, ##@LR__5783
060f4     53 93 02 F6 | 	mov	arg01, local01
060f8     BC E6 B1 FD | 	call	#__system___string_cmp
060fc     00 7A 0E F2 | 	cmp	result1, #0 wz
06100     2C 05 90 AD |  if_e	jmp	#LR__0482
06104     93 01 00 FF 
06108     F4 95 06 F6 | 	mov	arg02, ##@LR__5784
0610c     53 93 02 F6 | 	mov	arg01, local01
06110     A4 E6 B1 FD | 	call	#__system___string_cmp
06114     00 7A 0E F2 | 	cmp	result1, #0 wz
06118     1C 05 90 AD |  if_e	jmp	#LR__0483
0611c     93 01 00 FF 
06120     FD 95 06 F6 | 	mov	arg02, ##@LR__5785
06124     53 93 02 F6 | 	mov	arg01, local01
06128     8C E6 B1 FD | 	call	#__system___string_cmp
0612c     00 7A 0E F2 | 	cmp	result1, #0 wz
06130     0C 05 90 AD |  if_e	jmp	#LR__0484
06134     94 01 00 FF 
06138     06 94 06 F6 | 	mov	arg02, ##@LR__5786
0613c     53 93 02 F6 | 	mov	arg01, local01
06140     74 E6 B1 FD | 	call	#__system___string_cmp
06144     00 7A 0E F2 | 	cmp	result1, #0 wz
06148     FC 04 90 AD |  if_e	jmp	#LR__0485
0614c     94 01 00 FF 
06150     0A 94 06 F6 | 	mov	arg02, ##@LR__5787
06154     53 93 02 F6 | 	mov	arg01, local01
06158     5C E6 B1 FD | 	call	#__system___string_cmp
0615c     00 7A 0E F2 | 	cmp	result1, #0 wz
06160     EC 04 90 AD |  if_e	jmp	#LR__0486
06164     94 01 00 FF 
06168     0E 94 06 F6 | 	mov	arg02, ##@LR__5788
0616c     53 93 02 F6 | 	mov	arg01, local01
06170     44 E6 B1 FD | 	call	#__system___string_cmp
06174     00 7A 0E F2 | 	cmp	result1, #0 wz
06178     DC 04 90 AD |  if_e	jmp	#LR__0487
0617c     94 01 00 FF 
06180     12 94 06 F6 | 	mov	arg02, ##@LR__5789
06184     53 93 02 F6 | 	mov	arg01, local01
06188     2C E6 B1 FD | 	call	#__system___string_cmp
0618c     00 7A 0E F2 | 	cmp	result1, #0 wz
06190     CC 04 90 AD |  if_e	jmp	#LR__0488
06194     94 01 00 FF 
06198     1B 94 06 F6 | 	mov	arg02, ##@LR__5790
0619c     53 93 02 F6 | 	mov	arg01, local01
061a0     14 E6 B1 FD | 	call	#__system___string_cmp
061a4     00 7A 0E F2 | 	cmp	result1, #0 wz
061a8     BC 04 90 AD |  if_e	jmp	#LR__0489
061ac     94 01 00 FF 
061b0     24 94 06 F6 | 	mov	arg02, ##@LR__5791
061b4     53 93 02 F6 | 	mov	arg01, local01
061b8     FC E5 B1 FD | 	call	#__system___string_cmp
061bc     00 7A 0E F2 | 	cmp	result1, #0 wz
061c0     AC 04 90 AD |  if_e	jmp	#LR__0490
061c4     94 01 00 FF 
061c8     28 94 06 F6 | 	mov	arg02, ##@LR__5792
061cc     53 93 02 F6 | 	mov	arg01, local01
061d0     E4 E5 B1 FD | 	call	#__system___string_cmp
061d4     00 7A 0E F2 | 	cmp	result1, #0 wz
061d8     9C 04 90 AD |  if_e	jmp	#LR__0491
061dc     94 01 00 FF 
061e0     36 94 06 F6 | 	mov	arg02, ##@LR__5793
061e4     53 93 02 F6 | 	mov	arg01, local01
061e8     CC E5 B1 FD | 	call	#__system___string_cmp
061ec     00 7A 0E F2 | 	cmp	result1, #0 wz
061f0     8C 04 90 AD |  if_e	jmp	#LR__0492
061f4     94 01 00 FF 
061f8     43 94 06 F6 | 	mov	arg02, ##@LR__5794
061fc     53 93 02 F6 | 	mov	arg01, local01
06200     B4 E5 B1 FD | 	call	#__system___string_cmp
06204     00 7A 0E F2 | 	cmp	result1, #0 wz
06208     7C 04 90 AD |  if_e	jmp	#LR__0493
0620c     94 01 00 FF 
06210     4F 94 06 F6 | 	mov	arg02, ##@LR__5795
06214     53 93 02 F6 | 	mov	arg01, local01
06218     9C E5 B1 FD | 	call	#__system___string_cmp
0621c     00 7A 0E F2 | 	cmp	result1, #0 wz
06220     6C 04 90 AD |  if_e	jmp	#LR__0494
06224     94 01 00 FF 
06228     57 94 06 F6 | 	mov	arg02, ##@LR__5796
0622c     53 93 02 F6 | 	mov	arg01, local01
06230     84 E5 B1 FD | 	call	#__system___string_cmp
06234     00 7A 0E F2 | 	cmp	result1, #0 wz
06238     5C 04 90 AD |  if_e	jmp	#LR__0495
0623c     94 01 00 FF 
06240     5B 94 06 F6 | 	mov	arg02, ##@LR__5797
06244     53 93 02 F6 | 	mov	arg01, local01
06248     6C E5 B1 FD | 	call	#__system___string_cmp
0624c     00 7A 0E F2 | 	cmp	result1, #0 wz
06250     4C 04 90 AD |  if_e	jmp	#LR__0496
06254     94 01 00 FF 
06258     60 94 06 F6 | 	mov	arg02, ##@LR__5798
0625c     53 93 02 F6 | 	mov	arg01, local01
06260     54 E5 B1 FD | 	call	#__system___string_cmp
06264     00 7A 0E F2 | 	cmp	result1, #0 wz
06268     3C 04 90 AD |  if_e	jmp	#LR__0497
0626c     94 01 00 FF 
06270     67 94 06 F6 | 	mov	arg02, ##@LR__5799
06274     53 93 02 F6 | 	mov	arg01, local01
06278     3C E5 B1 FD | 	call	#__system___string_cmp
0627c     00 7A 0E F2 | 	cmp	result1, #0 wz
06280     2C 04 90 AD |  if_e	jmp	#LR__0498
06284     94 01 00 FF 
06288     6B 94 06 F6 | 	mov	arg02, ##@LR__5800
0628c     53 93 02 F6 | 	mov	arg01, local01
06290     24 E5 B1 FD | 	call	#__system___string_cmp
06294     00 7A 0E F2 | 	cmp	result1, #0 wz
06298     1C 04 90 AD |  if_e	jmp	#LR__0499
0629c     94 01 00 FF 
062a0     71 94 06 F6 | 	mov	arg02, ##@LR__5801
062a4     53 93 02 F6 | 	mov	arg01, local01
062a8     0C E5 B1 FD | 	call	#__system___string_cmp
062ac     00 7A 0E F2 | 	cmp	result1, #0 wz
062b0     0C 04 90 AD |  if_e	jmp	#LR__0500
062b4     94 01 00 FF 
062b8     75 94 06 F6 | 	mov	arg02, ##@LR__5802
062bc     53 93 02 F6 | 	mov	arg01, local01
062c0     F4 E4 B1 FD | 	call	#__system___string_cmp
062c4     00 7A 0E F2 | 	cmp	result1, #0 wz
062c8     FC 03 90 AD |  if_e	jmp	#LR__0501
062cc     94 01 00 FF 
062d0     79 94 06 F6 | 	mov	arg02, ##@LR__5803
062d4     53 93 02 F6 | 	mov	arg01, local01
062d8     DC E4 B1 FD | 	call	#__system___string_cmp
062dc     00 7A 0E F2 | 	cmp	result1, #0 wz
062e0     EC 03 90 AD |  if_e	jmp	#LR__0502
062e4     94 01 00 FF 
062e8     7F 94 06 F6 | 	mov	arg02, ##@LR__5804
062ec     53 93 02 F6 | 	mov	arg01, local01
062f0     C4 E4 B1 FD | 	call	#__system___string_cmp
062f4     00 7A 0E F2 | 	cmp	result1, #0 wz
062f8     DC 03 90 AD |  if_e	jmp	#LR__0503
062fc     94 01 00 FF 
06300     86 94 06 F6 | 	mov	arg02, ##@LR__5805
06304     53 93 02 F6 | 	mov	arg01, local01
06308     AC E4 B1 FD | 	call	#__system___string_cmp
0630c     00 7A 0E F2 | 	cmp	result1, #0 wz
06310     CC 03 90 AD |  if_e	jmp	#LR__0504
06314     94 01 00 FF 
06318     8C 94 06 F6 | 	mov	arg02, ##@LR__5806
0631c     53 93 02 F6 | 	mov	arg01, local01
06320     94 E4 B1 FD | 	call	#__system___string_cmp
06324     00 7A 0E F2 | 	cmp	result1, #0 wz
06328     BC 03 90 AD |  if_e	jmp	#LR__0505
0632c     94 01 00 FF 
06330     91 94 06 F6 | 	mov	arg02, ##@LR__5807
06334     53 93 02 F6 | 	mov	arg01, local01
06338     7C E4 B1 FD | 	call	#__system___string_cmp
0633c     00 7A 0E F2 | 	cmp	result1, #0 wz
06340     AC 03 90 AD |  if_e	jmp	#LR__0506
06344     94 01 00 FF 
06348     98 94 06 F6 | 	mov	arg02, ##@LR__5808
0634c     53 93 02 F6 | 	mov	arg01, local01
06350     64 E4 B1 FD | 	call	#__system___string_cmp
06354     00 7A 0E F2 | 	cmp	result1, #0 wz
06358     9C 03 90 AD |  if_e	jmp	#LR__0507
0635c     94 01 00 FF 
06360     9F 94 06 F6 | 	mov	arg02, ##@LR__5809
06364     53 93 02 F6 | 	mov	arg01, local01
06368     4C E4 B1 FD | 	call	#__system___string_cmp
0636c     00 7A 0E F2 | 	cmp	result1, #0 wz
06370     8C 03 90 AD |  if_e	jmp	#LR__0508
06374     94 01 00 FF 
06378     A6 94 06 F6 | 	mov	arg02, ##@LR__5810
0637c     53 93 02 F6 | 	mov	arg01, local01
06380     34 E4 B1 FD | 	call	#__system___string_cmp
06384     00 7A 0E F2 | 	cmp	result1, #0 wz
06388     7C 03 90 AD |  if_e	jmp	#LR__0509
0638c     94 01 00 FF 
06390     AD 94 06 F6 | 	mov	arg02, ##@LR__5811
06394     53 93 02 F6 | 	mov	arg01, local01
06398     1C E4 B1 FD | 	call	#__system___string_cmp
0639c     00 7A 0E F2 | 	cmp	result1, #0 wz
063a0     6C 03 90 AD |  if_e	jmp	#LR__0510
063a4     94 01 00 FF 
063a8     B2 94 06 F6 | 	mov	arg02, ##@LR__5812
063ac     53 93 02 F6 | 	mov	arg01, local01
063b0     04 E4 B1 FD | 	call	#__system___string_cmp
063b4     00 7A 0E F2 | 	cmp	result1, #0 wz
063b8     5C 03 90 AD |  if_e	jmp	#LR__0511
063bc     94 01 00 FF 
063c0     B7 94 06 F6 | 	mov	arg02, ##@LR__5813
063c4     53 93 02 F6 | 	mov	arg01, local01
063c8     EC E3 B1 FD | 	call	#__system___string_cmp
063cc     00 7A 0E F2 | 	cmp	result1, #0 wz
063d0     4C 03 90 AD |  if_e	jmp	#LR__0512
063d4     94 01 00 FF 
063d8     BC 94 06 F6 | 	mov	arg02, ##@LR__5814
063dc     53 93 02 F6 | 	mov	arg01, local01
063e0     D4 E3 B1 FD | 	call	#__system___string_cmp
063e4     00 7A 0E F2 | 	cmp	result1, #0 wz
063e8     3C 03 90 AD |  if_e	jmp	#LR__0513
063ec     94 01 00 FF 
063f0     C1 94 06 F6 | 	mov	arg02, ##@LR__5815
063f4     53 93 02 F6 | 	mov	arg01, local01
063f8     BC E3 B1 FD | 	call	#__system___string_cmp
063fc     00 7A 0E F2 | 	cmp	result1, #0 wz
06400     2C 03 90 AD |  if_e	jmp	#LR__0514
06404     94 01 00 FF 
06408     C6 94 06 F6 | 	mov	arg02, ##@LR__5816
0640c     53 93 02 F6 | 	mov	arg01, local01
06410     A4 E3 B1 FD | 	call	#__system___string_cmp
06414     00 7A 0E F2 | 	cmp	result1, #0 wz
06418     1C 03 90 AD |  if_e	jmp	#LR__0515
0641c     94 01 00 FF 
06420     CC 94 06 F6 | 	mov	arg02, ##@LR__5817
06424     53 93 02 F6 | 	mov	arg01, local01
06428     8C E3 B1 FD | 	call	#__system___string_cmp
0642c     00 7A 0E F2 | 	cmp	result1, #0 wz
06430     0C 03 90 AD |  if_e	jmp	#LR__0516
06434     94 01 00 FF 
06438     D2 94 06 F6 | 	mov	arg02, ##@LR__5818
0643c     53 93 02 F6 | 	mov	arg01, local01
06440     74 E3 B1 FD | 	call	#__system___string_cmp
06444     00 7A 0E F2 | 	cmp	result1, #0 wz
06448     FC 02 90 AD |  if_e	jmp	#LR__0517
0644c     94 01 00 FF 
06450     D8 94 06 F6 | 	mov	arg02, ##@LR__5819
06454     53 93 02 F6 | 	mov	arg01, local01
06458     5C E3 B1 FD | 	call	#__system___string_cmp
0645c     00 7A 0E F2 | 	cmp	result1, #0 wz
06460     EC 02 90 AD |  if_e	jmp	#LR__0518
06464     94 01 00 FF 
06468     DD 94 06 F6 | 	mov	arg02, ##@LR__5820
0646c     53 93 02 F6 | 	mov	arg01, local01
06470     44 E3 B1 FD | 	call	#__system___string_cmp
06474     00 7A 0E F2 | 	cmp	result1, #0 wz
06478     DC 02 90 AD |  if_e	jmp	#LR__0519
0647c     94 01 00 FF 
06480     E2 94 06 F6 | 	mov	arg02, ##@LR__5821
06484     53 93 02 F6 | 	mov	arg01, local01
06488     2C E3 B1 FD | 	call	#__system___string_cmp
0648c     00 7A 0E F2 | 	cmp	result1, #0 wz
06490     CC 02 90 AD |  if_e	jmp	#LR__0520
06494     94 01 00 FF 
06498     EA 94 06 F6 | 	mov	arg02, ##@LR__5822
0649c     53 93 02 F6 | 	mov	arg01, local01
064a0     14 E3 B1 FD | 	call	#__system___string_cmp
064a4     00 7A 0E F2 | 	cmp	result1, #0 wz
064a8     BC 02 90 AD |  if_e	jmp	#LR__0521
064ac     94 01 00 FF 
064b0     F0 94 06 F6 | 	mov	arg02, ##@LR__5823
064b4     53 93 02 F6 | 	mov	arg01, local01
064b8     FC E2 B1 FD | 	call	#__system___string_cmp
064bc     00 7A 0E F2 | 	cmp	result1, #0 wz
064c0     AC 02 90 AD |  if_e	jmp	#LR__0522
064c4     94 01 00 FF 
064c8     F7 94 06 F6 | 	mov	arg02, ##@LR__5824
064cc     53 93 02 F6 | 	mov	arg01, local01
064d0     E4 E2 B1 FD | 	call	#__system___string_cmp
064d4     00 7A 0E F2 | 	cmp	result1, #0 wz
064d8     9C 02 90 AD |  if_e	jmp	#LR__0523
064dc     94 01 00 FF 
064e0     FD 94 06 F6 | 	mov	arg02, ##@LR__5825
064e4     53 93 02 F6 | 	mov	arg01, local01
064e8     CC E2 B1 FD | 	call	#__system___string_cmp
064ec     00 7A 0E F2 | 	cmp	result1, #0 wz
064f0     8C 02 90 AD |  if_e	jmp	#LR__0524
064f4     94 01 00 FF 
064f8     03 95 06 F6 | 	mov	arg02, ##@LR__5826
064fc     53 93 02 F6 | 	mov	arg01, local01
06500     B4 E2 B1 FD | 	call	#__system___string_cmp
06504     00 7A 0E F2 | 	cmp	result1, #0 wz
06508     7C 02 90 AD |  if_e	jmp	#LR__0525
0650c     94 01 00 FF 
06510     07 95 06 F6 | 	mov	arg02, ##@LR__5827
06514     53 93 02 F6 | 	mov	arg01, local01
06518     9C E2 B1 FD | 	call	#__system___string_cmp
0651c     00 7A 0E F2 | 	cmp	result1, #0 wz
06520     6C 02 90 AD |  if_e	jmp	#LR__0526
06524     94 01 00 FF 
06528     0B 95 06 F6 | 	mov	arg02, ##@LR__5828
0652c     53 93 02 F6 | 	mov	arg01, local01
06530     84 E2 B1 FD | 	call	#__system___string_cmp
06534     00 7A 0E F2 | 	cmp	result1, #0 wz
06538     5C 02 90 AD |  if_e	jmp	#LR__0527
0653c     94 01 00 FF 
06540     0F 95 06 F6 | 	mov	arg02, ##@LR__5829
06544     53 93 02 F6 | 	mov	arg01, local01
06548     6C E2 B1 FD | 	call	#__system___string_cmp
0654c     00 7A 0E F2 | 	cmp	result1, #0 wz
06550     4C 02 90 AD |  if_e	jmp	#LR__0528
06554     94 01 00 FF 
06558     15 95 06 F6 | 	mov	arg02, ##@LR__5830
0655c     53 93 02 F6 | 	mov	arg01, local01
06560     54 E2 B1 FD | 	call	#__system___string_cmp
06564     00 7A 0E F2 | 	cmp	result1, #0 wz
06568     3C 02 90 AD |  if_e	jmp	#LR__0529
0656c     94 01 00 FF 
06570     1B 95 06 F6 | 	mov	arg02, ##@LR__5831
06574     53 93 02 F6 | 	mov	arg01, local01
06578     3C E2 B1 FD | 	call	#__system___string_cmp
0657c     00 7A 0E F2 | 	cmp	result1, #0 wz
06580     2C 02 90 AD |  if_e	jmp	#LR__0530
06584     94 01 00 FF 
06588     20 95 06 F6 | 	mov	arg02, ##@LR__5832
0658c     53 93 02 F6 | 	mov	arg01, local01
06590     24 E2 B1 FD | 	call	#__system___string_cmp
06594     00 7A 0E F2 | 	cmp	result1, #0 wz
06598     1C 02 90 AD |  if_e	jmp	#LR__0531
0659c     94 01 00 FF 
065a0     24 95 06 F6 | 	mov	arg02, ##@LR__5833
065a4     53 93 02 F6 | 	mov	arg01, local01
065a8     0C E2 B1 FD | 	call	#__system___string_cmp
065ac     00 7A 0E F2 | 	cmp	result1, #0 wz
065b0     0C 02 90 AD |  if_e	jmp	#LR__0532
065b4     94 01 00 FF 
065b8     28 95 06 F6 | 	mov	arg02, ##@LR__5834
065bc     53 93 02 F6 | 	mov	arg01, local01
065c0     F4 E1 B1 FD | 	call	#__system___string_cmp
065c4     00 7A 0E F2 | 	cmp	result1, #0 wz
065c8     FC 01 90 AD |  if_e	jmp	#LR__0533
065cc     00 02 90 FD | 	jmp	#LR__0534
065d0                 | LR__0470
065d0     9E 7A 06 F6 | 	mov	result1, #158
065d4     FC 01 90 FD | 	jmp	#LR__0535
065d8                 | LR__0471
065d8     85 7A 06 F6 | 	mov	result1, #133
065dc     F4 01 90 FD | 	jmp	#LR__0535
065e0                 | LR__0472
065e0     9B 7A 06 F6 | 	mov	result1, #155
065e4     EC 01 90 FD | 	jmp	#LR__0535
065e8                 | LR__0473
065e8     9B 7A 06 F6 | 	mov	result1, #155
065ec     E4 01 90 FD | 	jmp	#LR__0535
065f0                 | LR__0474
065f0     A7 7A 06 F6 | 	mov	result1, #167
065f4     DC 01 90 FD | 	jmp	#LR__0535
065f8                 | LR__0475
065f8     84 7A 06 F6 | 	mov	result1, #132
065fc     D4 01 90 FD | 	jmp	#LR__0535
06600                 | LR__0476
06600     86 7A 06 F6 | 	mov	result1, #134
06604     CC 01 90 FD | 	jmp	#LR__0535
06608                 | LR__0477
06608     A2 7A 06 F6 | 	mov	result1, #162
0660c     C4 01 90 FD | 	jmp	#LR__0535
06610                 | LR__0478
06610     9F 7A 06 F6 | 	mov	result1, #159
06614     BC 01 90 FD | 	jmp	#LR__0535
06618                 | LR__0479
06618     C0 7A 06 F6 | 	mov	result1, #192
0661c     B4 01 90 FD | 	jmp	#LR__0535
06620                 | LR__0480
06620     82 7A 06 F6 | 	mov	result1, #130
06624     AC 01 90 FD | 	jmp	#LR__0535
06628                 | LR__0481
06628     99 7A 06 F6 | 	mov	result1, #153
0662c     A4 01 90 FD | 	jmp	#LR__0535
06630                 | LR__0482
06630     D7 7A 06 F6 | 	mov	result1, #215
06634     9C 01 90 FD | 	jmp	#LR__0535
06638                 | LR__0483
06638     D8 7A 06 F6 | 	mov	result1, #216
0663c     94 01 90 FD | 	jmp	#LR__0535
06640                 | LR__0484
06640     C5 7A 06 F6 | 	mov	result1, #197
06644     8C 01 90 FD | 	jmp	#LR__0535
06648                 | LR__0485
06648     C5 7A 06 F6 | 	mov	result1, #197
0664c     84 01 90 FD | 	jmp	#LR__0535
06650                 | LR__0486
06650     9C 7A 06 F6 | 	mov	result1, #156
06654     7C 01 90 FD | 	jmp	#LR__0535
06658                 | LR__0487
06658     D3 7A 06 F6 | 	mov	result1, #211
0665c     74 01 90 FD | 	jmp	#LR__0535
06660                 | LR__0488
06660     D3 7A 06 F6 | 	mov	result1, #211
06664     6C 01 90 FD | 	jmp	#LR__0535
06668                 | LR__0489
06668     6F 7A 06 F6 | 	mov	result1, #111
0666c     64 01 90 FD | 	jmp	#LR__0535
06670                 | LR__0490
06670     6F 7A 06 F6 | 	mov	result1, #111
06674     5C 01 90 FD | 	jmp	#LR__0535
06678                 | LR__0491
06678     93 7A 06 F6 | 	mov	result1, #147
0667c     54 01 90 FD | 	jmp	#LR__0535
06680                 | LR__0492
06680     94 7A 06 F6 | 	mov	result1, #148
06684     4C 01 90 FD | 	jmp	#LR__0535
06688                 | LR__0493
06688     DB 7A 06 F6 | 	mov	result1, #219
0668c     44 01 90 FD | 	jmp	#LR__0535
06690                 | LR__0494
06690     62 7A 06 F6 | 	mov	result1, #98
06694     3C 01 90 FD | 	jmp	#LR__0535
06698                 | LR__0495
06698     62 7A 06 F6 | 	mov	result1, #98
0669c     34 01 90 FD | 	jmp	#LR__0535
066a0                 | LR__0496
066a0     A3 7A 06 F6 | 	mov	result1, #163
066a4     2C 01 90 FD | 	jmp	#LR__0535
066a8                 | LR__0497
066a8     9D 7A 06 F6 | 	mov	result1, #157
066ac     24 01 90 FD | 	jmp	#LR__0535
066b0                 | LR__0498
066b0     8A 7A 06 F6 | 	mov	result1, #138
066b4     1C 01 90 FD | 	jmp	#LR__0535
066b8                 | LR__0499
066b8     A4 7A 06 F6 | 	mov	result1, #164
066bc     14 01 90 FD | 	jmp	#LR__0535
066c0                 | LR__0500
066c0     A8 7A 06 F6 | 	mov	result1, #168
066c4     0C 01 90 FD | 	jmp	#LR__0535
066c8                 | LR__0501
066c8     AD 7A 06 F6 | 	mov	result1, #173
066cc     04 01 90 FD | 	jmp	#LR__0535
066d0                 | LR__0502
066d0     9A 7A 06 F6 | 	mov	result1, #154
066d4     FC 00 90 FD | 	jmp	#LR__0535
066d8                 | LR__0503
066d8     D1 7A 06 F6 | 	mov	result1, #209
066dc     F4 00 90 FD | 	jmp	#LR__0535
066e0                 | LR__0504
066e0     D0 7A 06 F6 | 	mov	result1, #208
066e4     EC 00 90 FD | 	jmp	#LR__0535
066e8                 | LR__0505
066e8     A6 7A 06 F6 | 	mov	result1, #166
066ec     E4 00 90 FD | 	jmp	#LR__0535
066f0                 | LR__0506
066f0     66 7A 06 F6 | 	mov	result1, #102
066f4     DC 00 90 FD | 	jmp	#LR__0535
066f8                 | LR__0507
066f8     67 7A 06 F6 | 	mov	result1, #103
066fc     D4 00 90 FD | 	jmp	#LR__0535
06700                 | LR__0508
06700     64 7A 06 F6 | 	mov	result1, #100
06704     CC 00 90 FD | 	jmp	#LR__0535
06708                 | LR__0509
06708     65 7A 06 F6 | 	mov	result1, #101
0670c     C4 00 90 FD | 	jmp	#LR__0535
06710                 | LR__0510
06710     D5 7A 06 F6 | 	mov	result1, #213
06714     BC 00 90 FD | 	jmp	#LR__0535
06718                 | LR__0511
06718     D6 7A 06 F6 | 	mov	result1, #214
0671c     B4 00 90 FD | 	jmp	#LR__0535
06720                 | LR__0512
06720     C8 7A 06 F6 | 	mov	result1, #200
06724     AC 00 90 FD | 	jmp	#LR__0535
06728                 | LR__0513
06728     C9 7A 06 F6 | 	mov	result1, #201
0672c     A4 00 90 FD | 	jmp	#LR__0535
06730                 | LR__0514
06730     CA 7A 06 F6 | 	mov	result1, #202
06734     9C 00 90 FD | 	jmp	#LR__0535
06738                 | LR__0515
06738     CC 7A 06 F6 | 	mov	result1, #204
0673c     94 00 90 FD | 	jmp	#LR__0535
06740                 | LR__0516
06740     CD 7A 06 F6 | 	mov	result1, #205
06744     8C 00 90 FD | 	jmp	#LR__0535
06748                 | LR__0517
06748     CE 7A 06 F6 | 	mov	result1, #206
0674c     84 00 90 FD | 	jmp	#LR__0535
06750                 | LR__0518
06750     CB 7A 06 F6 | 	mov	result1, #203
06754     7C 00 90 FD | 	jmp	#LR__0535
06758                 | LR__0519
06758     98 7A 06 F6 | 	mov	result1, #152
0675c     74 00 90 FD | 	jmp	#LR__0535
06760                 | LR__0520
06760     7B 7A 06 F6 | 	mov	result1, #123
06764     6C 00 90 FD | 	jmp	#LR__0535
06768                 | LR__0521
06768     76 7A 06 F6 | 	mov	result1, #118
0676c     64 00 90 FD | 	jmp	#LR__0535
06770                 | LR__0522
06770     A5 7A 06 F6 | 	mov	result1, #165
06774     5C 00 90 FD | 	jmp	#LR__0535
06778                 | LR__0523
06778     7A 7A 06 F6 | 	mov	result1, #122
0677c     54 00 90 FD | 	jmp	#LR__0535
06780                 | LR__0524
06780     BF 7A 06 F6 | 	mov	result1, #191
06784     4C 00 90 FD | 	jmp	#LR__0535
06788                 | LR__0525
06788     54 7A 06 F6 | 	mov	result1, #84
0678c     44 00 90 FD | 	jmp	#LR__0535
06790                 | LR__0526
06790     6B 7A 06 F6 | 	mov	result1, #107
06794     3C 00 90 FD | 	jmp	#LR__0535
06798                 | LR__0527
06798     87 7A 06 F6 | 	mov	result1, #135
0679c     34 00 90 FD | 	jmp	#LR__0535
067a0                 | LR__0528
067a0     6A 7A 06 F6 | 	mov	result1, #106
067a4     2C 00 90 FD | 	jmp	#LR__0535
067a8                 | LR__0529
067a8     6E 7A 06 F6 | 	mov	result1, #110
067ac     24 00 90 FD | 	jmp	#LR__0535
067b0                 | LR__0530
067b0     A1 7A 06 F6 | 	mov	result1, #161
067b4     1C 00 90 FD | 	jmp	#LR__0535
067b8                 | LR__0531
067b8     83 7A 06 F6 | 	mov	result1, #131
067bc     14 00 90 FD | 	jmp	#LR__0535
067c0                 | LR__0532
067c0     A0 7A 06 F6 | 	mov	result1, #160
067c4     0C 00 90 FD | 	jmp	#LR__0535
067c8                 | LR__0533
067c8     9B 7A 06 F6 | 	mov	result1, #155
067cc     04 00 90 FD | 	jmp	#LR__0535
067d0                 | LR__0534
067d0     00 7A 06 F6 | 	mov	result1, #0
067d4                 | LR__0535
067d4     E7 F0 03 F6 | 	mov	ptra, fp
067d8     F2 00 A0 FD | 	call	#popregs_
067dc                 | _isfunction_ret
067dc     2D 00 64 FD | 	ret
067e0                 | 
067e0                 | ' 
067e0                 | ' ' Check if the part is a name
067e0                 | ' 
067e0                 | ' function isname(s as string) as boolean
067e0                 | _isname
067e0     0D CA 05 F6 | 	mov	COUNT_, #13
067e4     E8 00 A0 FD | 	call	#pushregs_
067e8     49 A7 02 F6 | 	mov	local01, arg01
067ec     49 A9 02 F6 | 	mov	local02, arg01
067f0     D7 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
067f4                 | LR__0540
067f4     54 7B CA FA | 	rdbyte	result1, local02 wz
067f8     01 A8 06 51 |  if_ne	add	local02, #1
067fc     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06800                 | LR__0541
06800     49 A9 82 F1 | 	sub	local02, arg01
06804     54 7B 02 F6 | 	mov	result1, local02
06808     3D AB 0A F6 | 	mov	local03, result1 wz
0680c     00 7A 06 A6 |  if_e	mov	result1, #0
06810     34 02 90 AD |  if_e	jmp	#LR__0553
06814     53 93 02 F6 | 	mov	arg01, local01
06818     01 94 06 F6 | 	mov	arg02, #1
0681c     01 96 06 F6 | 	mov	arg03, #1
06820     2C F9 B1 FD | 	call	#__system__Mid_S
06824     3D AD 02 F6 | 	mov	local04, result1
06828                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
06828     94 01 00 FF 
0682c     2F 95 06 F6 | 	mov	arg02, ##@LR__5835
06830     56 93 02 F6 | 	mov	arg01, local04
06834     80 DF B1 FD | 	call	#__system___string_cmp
06838     00 7A 56 F2 | 	cmps	result1, #0 wc
0683c     18 00 90 CD |  if_b	jmp	#LR__0542
06840     94 01 00 FF 
06844     31 95 06 F6 | 	mov	arg02, ##@LR__5836
06848     56 93 02 F6 | 	mov	arg01, local04
0684c     68 DF B1 FD | 	call	#__system___string_cmp
06850     01 7A 56 F2 | 	cmps	result1, #1 wc
06854     1C 00 90 CD |  if_b	jmp	#LR__0543
06858                 | LR__0542
06858     94 01 00 FF 
0685c     33 95 06 F6 | 	mov	arg02, ##@LR__5837
06860     56 93 02 F6 | 	mov	arg01, local04
06864     50 DF B1 FD | 	call	#__system___string_cmp
06868     00 7A 0E F2 | 	cmp	result1, #0 wz
0686c     00 7A 06 56 |  if_ne	mov	result1, #0
06870     D4 01 90 5D |  if_ne	jmp	#LR__0553
06874                 | LR__0543
06874                 | ' if l>2 then 
06874     03 AA 56 F2 | 	cmps	local03, #3 wc
06878     C8 01 90 CD |  if_b	jmp	#LR__0552
0687c                 | '   for i=2 to l
0687c     02 AE 06 F6 | 	mov	local05, #2
06880     55 B1 02 F6 | 	mov	local06, local03
06884     01 B0 06 F1 | 	add	local06, #1
06888                 | LR__0544
06888     58 AF 52 F2 | 	cmps	local05, local06 wc
0688c     B4 01 90 3D |  if_ae	jmp	#LR__0551
06890     53 93 02 F6 | 	mov	arg01, local01
06894     57 95 02 F6 | 	mov	arg02, local05
06898     01 96 06 F6 | 	mov	arg03, #1
0689c     B0 F8 B1 FD | 	call	#__system__Mid_S
068a0     3D AD 02 F6 | 	mov	local04, result1
068a4                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
068a4     55 AF 52 F2 | 	cmps	local05, local03 wc
068a8     9C 00 90 3D |  if_ae	jmp	#LR__0547
068ac     94 01 00 FF 
068b0     35 95 06 F6 | 	mov	arg02, ##@LR__5838
068b4     56 93 02 F6 | 	mov	arg01, local04
068b8     FC DE B1 FD | 	call	#__system___string_cmp
068bc     00 7A 56 F2 | 	cmps	result1, #0 wc
068c0     18 00 90 CD |  if_b	jmp	#LR__0545
068c4     94 01 00 FF 
068c8     37 95 06 F6 | 	mov	arg02, ##@LR__5839
068cc     56 93 02 F6 | 	mov	arg01, local04
068d0     E4 DE B1 FD | 	call	#__system___string_cmp
068d4     01 7A 56 F2 | 	cmps	result1, #1 wc
068d8     6C 00 90 CD |  if_b	jmp	#LR__0547
068dc                 | LR__0545
068dc     94 01 00 FF 
068e0     39 95 06 F6 | 	mov	arg02, ##@LR__5840
068e4     56 93 02 F6 | 	mov	arg01, local04
068e8     CC DE B1 FD | 	call	#__system___string_cmp
068ec     00 7A 56 F2 | 	cmps	result1, #0 wc
068f0     18 00 90 CD |  if_b	jmp	#LR__0546
068f4     94 01 00 FF 
068f8     3B 95 06 F6 | 	mov	arg02, ##@LR__5841
068fc     56 93 02 F6 | 	mov	arg01, local04
06900     B4 DE B1 FD | 	call	#__system___string_cmp
06904     01 7A 56 F2 | 	cmps	result1, #1 wc
06908     3C 00 90 CD |  if_b	jmp	#LR__0547
0690c                 | LR__0546
0690c     94 01 00 FF 
06910     3D B3 06 F6 | 	mov	local07, ##@LR__5842
06914     56 93 02 F6 | 	mov	arg01, local04
06918     59 95 02 F6 | 	mov	arg02, local07
0691c     98 DE B1 FD | 	call	#__system___string_cmp
06920     00 7A 0E F2 | 	cmp	result1, #0 wz
06924     20 00 90 AD |  if_e	jmp	#LR__0547
06928     94 01 00 FF 
0692c     3F B5 06 F6 | 	mov	local08, ##@LR__5843
06930     56 93 02 F6 | 	mov	arg01, local04
06934     5A 95 02 F6 | 	mov	arg02, local08
06938     7C DE B1 FD | 	call	#__system___string_cmp
0693c     3D B7 0A F6 | 	mov	local09, result1 wz
06940     00 7A 06 56 |  if_ne	mov	result1, #0
06944     00 01 90 5D |  if_ne	jmp	#LR__0553
06948                 | LR__0547
06948                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06948     55 AF 0A F2 | 	cmp	local05, local03 wz
0694c     EC 00 90 5D |  if_ne	jmp	#LR__0550
06950     94 01 00 FF 
06954     41 B9 06 F6 | 	mov	local10, ##@LR__5844
06958     56 93 02 F6 | 	mov	arg01, local04
0695c     5C 95 02 F6 | 	mov	arg02, local10
06960     54 DE B1 FD | 	call	#__system___string_cmp
06964     3D BB 02 F6 | 	mov	local11, result1
06968     00 BA 56 F2 | 	cmps	local11, #0 wc
0696c     1C 00 90 CD |  if_b	jmp	#LR__0548
06970     94 01 00 FF 
06974     43 95 06 F6 | 	mov	arg02, ##@LR__5845
06978     56 93 02 F6 | 	mov	arg01, local04
0697c     38 DE B1 FD | 	call	#__system___string_cmp
06980     3D B9 02 F6 | 	mov	local10, result1
06984     01 B8 56 F2 | 	cmps	local10, #1 wc
06988     B0 00 90 CD |  if_b	jmp	#LR__0550
0698c                 | LR__0548
0698c     94 01 00 FF 
06990     45 95 06 F6 | 	mov	arg02, ##@LR__5846
06994     56 93 02 F6 | 	mov	arg01, local04
06998     1C DE B1 FD | 	call	#__system___string_cmp
0699c     00 7A 56 F2 | 	cmps	result1, #0 wc
069a0     1C 00 90 CD |  if_b	jmp	#LR__0549
069a4     94 01 00 FF 
069a8     47 B7 06 F6 | 	mov	local09, ##@LR__5847
069ac     56 93 02 F6 | 	mov	arg01, local04
069b0     5B 95 02 F6 | 	mov	arg02, local09
069b4     00 DE B1 FD | 	call	#__system___string_cmp
069b8     01 7A 56 F2 | 	cmps	result1, #1 wc
069bc     7C 00 90 CD |  if_b	jmp	#LR__0550
069c0                 | LR__0549
069c0     94 01 00 FF 
069c4     49 B7 06 F6 | 	mov	local09, ##@LR__5848
069c8     56 93 02 F6 | 	mov	arg01, local04
069cc     5B 95 02 F6 | 	mov	arg02, local09
069d0     E4 DD B1 FD | 	call	#__system___string_cmp
069d4     00 7A 4E F2 | 	cmps	result1, #0 wz
069d8     60 00 90 AD |  if_e	jmp	#LR__0550
069dc     94 01 00 FF 
069e0     4B B5 06 F6 | 	mov	local08, ##@LR__5849
069e4     56 93 02 F6 | 	mov	arg01, local04
069e8     5A 95 02 F6 | 	mov	arg02, local08
069ec     C8 DD B1 FD | 	call	#__system___string_cmp
069f0     3D B7 0A F6 | 	mov	local09, result1 wz
069f4     44 00 90 AD |  if_e	jmp	#LR__0550
069f8     94 01 00 FF 
069fc     4D BD 06 F6 | 	mov	local12, ##@LR__5850
06a00     5E B5 02 F6 | 	mov	local08, local12
06a04     56 93 02 F6 | 	mov	arg01, local04
06a08     5A 95 02 F6 | 	mov	arg02, local08
06a0c     A8 DD B1 FD | 	call	#__system___string_cmp
06a10     3D B3 0A F6 | 	mov	local07, result1 wz
06a14     24 00 90 AD |  if_e	jmp	#LR__0550
06a18     94 01 00 FF 
06a1c     4F BF 06 F6 | 	mov	local13, ##@LR__5851
06a20     5F BD 02 F6 | 	mov	local12, local13
06a24     56 93 02 F6 | 	mov	arg01, local04
06a28     5E 95 02 F6 | 	mov	arg02, local12
06a2c     88 DD B1 FD | 	call	#__system___string_cmp
06a30     3D B5 0A F6 | 	mov	local08, result1 wz
06a34     00 7A 06 56 |  if_ne	mov	result1, #0
06a38     0C 00 90 5D |  if_ne	jmp	#LR__0553
06a3c                 | LR__0550
06a3c     01 AE 06 F1 | 	add	local05, #1
06a40     44 FE 9F FD | 	jmp	#LR__0544
06a44                 | LR__0551
06a44                 | LR__0552
06a44                 | ' return true
06a44     01 7A 66 F6 | 	neg	result1, #1
06a48                 | LR__0553
06a48     E7 F0 03 F6 | 	mov	ptra, fp
06a4c     F2 00 A0 FD | 	call	#popregs_
06a50                 | _isname_ret
06a50     2D 00 64 FD | 	ret
06a54                 | 
06a54                 | ' 
06a54                 | ' ' Check if the part is a number.  
06a54                 | ' 
06a54                 | ' function isnum(s as string) as boolean 
06a54                 | _isnum
06a54     13 CA 05 F6 | 	mov	COUNT_, #19
06a58     E8 00 A0 FD | 	call	#pushregs_
06a5c     49 A7 02 F6 | 	mov	local01, arg01
06a60     00 A8 06 F6 | 	mov	local02, #0
06a64     00 AA 06 F6 | 	mov	local03, #0
06a68     53 93 02 F6 | 	mov	arg01, local01
06a6c     49 AD 02 F6 | 	mov	local04, arg01
06a70     D7 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
06a74                 | LR__0560
06a74     56 7B CA FA | 	rdbyte	result1, local04 wz
06a78     01 AC 06 51 |  if_ne	add	local04, #1
06a7c     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
06a80                 | LR__0561
06a80     49 AD 82 F1 | 	sub	local04, arg01
06a84     56 7B 02 F6 | 	mov	result1, local04
06a88     3D AF 0A F6 | 	mov	local05, result1 wz
06a8c     00 7A 06 A6 |  if_e	mov	result1, #0
06a90     A0 03 90 AD |  if_e	jmp	#LR__0576
06a94     53 93 02 F6 | 	mov	arg01, local01
06a98     01 94 06 F6 | 	mov	arg02, #1
06a9c     01 96 06 F6 | 	mov	arg03, #1
06aa0     AC F6 B1 FD | 	call	#__system__Mid_S
06aa4     3D B1 02 F6 | 	mov	local06, result1
06aa8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06aa8     94 01 00 FF 
06aac     51 95 06 F6 | 	mov	arg02, ##@LR__5852
06ab0     58 93 02 F6 | 	mov	arg01, local06
06ab4     00 DD B1 FD | 	call	#__system___string_cmp
06ab8     00 7A 56 F2 | 	cmps	result1, #0 wc
06abc     1C 00 90 CD |  if_b	jmp	#LR__0562
06ac0     94 01 00 FF 
06ac4     53 B3 06 F6 | 	mov	local07, ##@LR__5853
06ac8     58 93 02 F6 | 	mov	arg01, local06
06acc     59 95 02 F6 | 	mov	arg02, local07
06ad0     E4 DC B1 FD | 	call	#__system___string_cmp
06ad4     01 7A 56 F2 | 	cmps	result1, #1 wc
06ad8     84 00 90 CD |  if_b	jmp	#LR__0563
06adc                 | LR__0562
06adc     94 01 00 FF 
06ae0     55 B5 06 F6 | 	mov	local08, ##@LR__5854
06ae4     5A B3 02 F6 | 	mov	local07, local08
06ae8     58 93 02 F6 | 	mov	arg01, local06
06aec     59 95 02 F6 | 	mov	arg02, local07
06af0     C4 DC B1 FD | 	call	#__system___string_cmp
06af4     00 7A 0E F2 | 	cmp	result1, #0 wz
06af8     64 00 90 AD |  if_e	jmp	#LR__0563
06afc     94 01 00 FF 
06b00     57 B7 06 F6 | 	mov	local09, ##@LR__5855
06b04     5B B5 02 F6 | 	mov	local08, local09
06b08     58 93 02 F6 | 	mov	arg01, local06
06b0c     5A 95 02 F6 | 	mov	arg02, local08
06b10     A4 DC B1 FD | 	call	#__system___string_cmp
06b14     3D B3 0A F6 | 	mov	local07, result1 wz
06b18     44 00 90 AD |  if_e	jmp	#LR__0563
06b1c     94 01 00 FF 
06b20     59 B9 06 F6 | 	mov	local10, ##@LR__5856
06b24     5C B7 02 F6 | 	mov	local09, local10
06b28     58 93 02 F6 | 	mov	arg01, local06
06b2c     5B 95 02 F6 | 	mov	arg02, local09
06b30     84 DC B1 FD | 	call	#__system___string_cmp
06b34     3D B5 0A F6 | 	mov	local08, result1 wz
06b38     24 00 90 AD |  if_e	jmp	#LR__0563
06b3c     94 01 00 FF 
06b40     5B BB 06 F6 | 	mov	local11, ##@LR__5857
06b44     5D B9 02 F6 | 	mov	local10, local11
06b48     58 93 02 F6 | 	mov	arg01, local06
06b4c     5C 95 02 F6 | 	mov	arg02, local10
06b50     64 DC B1 FD | 	call	#__system___string_cmp
06b54     3D B7 0A F6 | 	mov	local09, result1 wz
06b58     00 7A 06 56 |  if_ne	mov	result1, #0
06b5c     D4 02 90 5D |  if_ne	jmp	#LR__0576
06b60                 | LR__0563
06b60                 | ' if m$="." then ds=1
06b60     94 01 00 FF 
06b64     5D 95 06 F6 | 	mov	arg02, ##@LR__5858
06b68     58 93 02 F6 | 	mov	arg01, local06
06b6c     48 DC B1 FD | 	call	#__system___string_cmp
06b70     00 7A 0E F2 | 	cmp	result1, #0 wz
06b74     01 A8 06 A6 |  if_e	mov	local02, #1
06b78                 | ' if m$="$" then hex=1 else hex=0
06b78     94 01 00 FF 
06b7c     5F 95 06 F6 | 	mov	arg02, ##@LR__5859
06b80     58 93 02 F6 | 	mov	arg01, local06
06b84     30 DC B1 FD | 	call	#__system___string_cmp
06b88     00 7A 0E F2 | 	cmp	result1, #0 wz
06b8c     01 BC 06 A6 |  if_e	mov	local12, #1
06b90     00 BC 06 56 |  if_ne	mov	local12, #0
06b94                 | ' if m$="%" then bin=1 else bin=0
06b94     94 01 00 FF 
06b98     61 95 06 F6 | 	mov	arg02, ##@LR__5860
06b9c     58 93 02 F6 | 	mov	arg01, local06
06ba0     14 DC B1 FD | 	call	#__system___string_cmp
06ba4     00 7A 0E F2 | 	cmp	result1, #0 wz
06ba8     01 BE 06 A6 |  if_e	mov	local13, #1
06bac     00 BE 06 56 |  if_ne	mov	local13, #0
06bb0                 | ' if l>1 then 
06bb0     02 AE 56 F2 | 	cmps	local05, #2 wc
06bb4     78 02 90 CD |  if_b	jmp	#LR__0575
06bb8                 | '   for i=2 to l
06bb8     02 C0 06 F6 | 	mov	local14, #2
06bbc     57 C3 02 F6 | 	mov	local15, local05
06bc0     01 C2 06 F1 | 	add	local15, #1
06bc4                 | LR__0564
06bc4     61 C1 52 F2 | 	cmps	local14, local15 wc
06bc8     64 02 90 3D |  if_ae	jmp	#LR__0574
06bcc     53 93 02 F6 | 	mov	arg01, local01
06bd0     60 95 02 F6 | 	mov	arg02, local14
06bd4     01 96 06 F6 | 	mov	arg03, #1
06bd8     74 F5 B1 FD | 	call	#__system__Mid_S
06bdc     3D B1 02 F6 | 	mov	local06, result1
06be0     00 C4 06 F6 | 	mov	local16, #0
06be4                 | '     m$=mid$(s,i,1) : b=false
06be4                 | '     if m$>="0" andalso m$<="9" then b=true  
06be4     94 01 00 FF 
06be8     63 95 06 F6 | 	mov	arg02, ##@LR__5861
06bec     58 93 02 F6 | 	mov	arg01, local06
06bf0     C4 DB B1 FD | 	call	#__system___string_cmp
06bf4     00 7A 56 F2 | 	cmps	result1, #0 wc
06bf8     1C 00 90 CD |  if_b	jmp	#LR__0565
06bfc     94 01 00 FF 
06c00     65 B3 06 F6 | 	mov	local07, ##@LR__5862
06c04     58 93 02 F6 | 	mov	arg01, local06
06c08     59 95 02 F6 | 	mov	arg02, local07
06c0c     A8 DB B1 FD | 	call	#__system___string_cmp
06c10     01 7A 56 F2 | 	cmps	result1, #1 wc
06c14     01 C4 66 C6 |  if_b	neg	local16, #1
06c18                 | LR__0565
06c18                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06c18     94 01 00 FF 
06c1c     67 95 06 F6 | 	mov	arg02, ##@LR__5863
06c20     58 93 02 F6 | 	mov	arg01, local06
06c24     90 DB B1 FD | 	call	#__system___string_cmp
06c28     00 7A 0E F2 | 	cmp	result1, #0 wz
06c2c     7C 00 90 AD |  if_e	jmp	#LR__0566
06c30     94 01 00 FF 
06c34     69 B3 06 F6 | 	mov	local07, ##@LR__5864
06c38     58 93 02 F6 | 	mov	arg01, local06
06c3c     59 95 02 F6 | 	mov	arg02, local07
06c40     74 DB B1 FD | 	call	#__system___string_cmp
06c44     00 7A 0E F2 | 	cmp	result1, #0 wz
06c48     60 00 90 AD |  if_e	jmp	#LR__0566
06c4c     94 01 00 FF 
06c50     6B B5 06 F6 | 	mov	local08, ##@LR__5865
06c54     5A B3 02 F6 | 	mov	local07, local08
06c58     58 93 02 F6 | 	mov	arg01, local06
06c5c     59 95 02 F6 | 	mov	arg02, local07
06c60     54 DB B1 FD | 	call	#__system___string_cmp
06c64     00 7A 0E F2 | 	cmp	result1, #0 wz
06c68     40 00 90 AD |  if_e	jmp	#LR__0566
06c6c     94 01 00 FF 
06c70     6D B7 06 F6 | 	mov	local09, ##@LR__5866
06c74     5B B5 02 F6 | 	mov	local08, local09
06c78     58 93 02 F6 | 	mov	arg01, local06
06c7c     5A 95 02 F6 | 	mov	arg02, local08
06c80     34 DB B1 FD | 	call	#__system___string_cmp
06c84     3D B3 0A F6 | 	mov	local07, result1 wz
06c88     20 00 90 AD |  if_e	jmp	#LR__0566
06c8c     94 01 00 FF 
06c90     6F B9 06 F6 | 	mov	local10, ##@LR__5867
06c94     5C B7 02 F6 | 	mov	local09, local10
06c98     58 93 02 F6 | 	mov	arg01, local06
06c9c     5B 95 02 F6 | 	mov	arg02, local09
06ca0     14 DB B1 FD | 	call	#__system___string_cmp
06ca4     3D B5 0A F6 | 	mov	local08, result1 wz
06ca8     04 00 90 5D |  if_ne	jmp	#LR__0567
06cac                 | LR__0566
06cac     01 C4 66 F6 | 	neg	local16, #1
06cb0                 | LR__0567
06cb0                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06cb0     01 BC 0E F2 | 	cmp	local12, #1 wz
06cb4     34 00 90 5D |  if_ne	jmp	#LR__0568
06cb8     94 01 00 FF 
06cbc     71 95 06 F6 | 	mov	arg02, ##@LR__5868
06cc0     58 93 02 F6 | 	mov	arg01, local06
06cc4     F0 DA B1 FD | 	call	#__system___string_cmp
06cc8     00 7A 56 F2 | 	cmps	result1, #0 wc
06ccc     1C 00 90 CD |  if_b	jmp	#LR__0568
06cd0     94 01 00 FF 
06cd4     73 B3 06 F6 | 	mov	local07, ##@LR__5869
06cd8     58 93 02 F6 | 	mov	arg01, local06
06cdc     59 95 02 F6 | 	mov	arg02, local07
06ce0     D4 DA B1 FD | 	call	#__system___string_cmp
06ce4     01 7A 56 F2 | 	cmps	result1, #1 wc
06ce8     01 C4 66 C6 |  if_b	neg	local16, #1
06cec                 | LR__0568
06cec                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06cec     01 BE 0E F2 | 	cmp	local13, #1 wz
06cf0     58 00 90 5D |  if_ne	jmp	#LR__0570
06cf4     94 01 00 FF 
06cf8     75 95 06 F6 | 	mov	arg02, ##@LR__5870
06cfc     58 93 02 F6 | 	mov	arg01, local06
06d00     B4 DA B1 FD | 	call	#__system___string_cmp
06d04     00 7A 56 F2 | 	cmps	result1, #0 wc
06d08     1C 00 90 CD |  if_b	jmp	#LR__0569
06d0c     94 01 00 FF 
06d10     77 B3 06 F6 | 	mov	local07, ##@LR__5871
06d14     58 93 02 F6 | 	mov	arg01, local06
06d18     59 95 02 F6 | 	mov	arg02, local07
06d1c     98 DA B1 FD | 	call	#__system___string_cmp
06d20     01 7A 56 F2 | 	cmps	result1, #1 wc
06d24     24 00 90 CD |  if_b	jmp	#LR__0570
06d28                 | LR__0569
06d28     94 01 00 FF 
06d2c     79 B5 06 F6 | 	mov	local08, ##@LR__5872
06d30     5A B3 02 F6 | 	mov	local07, local08
06d34     58 93 02 F6 | 	mov	arg01, local06
06d38     59 95 02 F6 | 	mov	arg02, local07
06d3c     78 DA B1 FD | 	call	#__system___string_cmp
06d40     00 7A 0E F2 | 	cmp	result1, #0 wz
06d44     00 7A 06 56 |  if_ne	mov	result1, #0
06d48     E8 00 90 5D |  if_ne	jmp	#LR__0576
06d4c                 | LR__0570
06d4c                 | '     if not b then return false
06d4c     62 C5 22 F6 | 	not	local16, local16
06d50     00 C4 0E F2 | 	cmp	local16, #0 wz
06d54     00 7A 06 56 |  if_ne	mov	result1, #0
06d58     D8 00 90 5D |  if_ne	jmp	#LR__0576
06d5c                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06d5c     94 01 00 FF 
06d60     7B 95 06 F6 | 	mov	arg02, ##@LR__5873
06d64     58 93 02 F6 | 	mov	arg01, local06
06d68     4C DA B1 FD | 	call	#__system___string_cmp
06d6c     00 7A 0E F2 | 	cmp	result1, #0 wz
06d70     3C 00 90 5D |  if_ne	jmp	#LR__0571
06d74     60 95 02 F6 | 	mov	arg02, local14
06d78     01 94 86 F1 | 	sub	arg02, #1
06d7c     53 93 02 F6 | 	mov	arg01, local01
06d80     01 96 06 F6 | 	mov	arg03, #1
06d84     C8 F3 B1 FD | 	call	#__system__Mid_S
06d88     3D 93 02 F6 | 	mov	arg01, result1
06d8c     B8 F5 B1 FD | 	call	#__system__LCase_S
06d90     3D 93 02 F6 | 	mov	arg01, result1
06d94     94 01 00 FF 
06d98     7D B3 06 F6 | 	mov	local07, ##@LR__5874
06d9c     59 95 02 F6 | 	mov	arg02, local07
06da0     14 DA B1 FD | 	call	#__system___string_cmp
06da4     00 7A 0E F2 | 	cmp	result1, #0 wz
06da8     00 7A 06 56 |  if_ne	mov	result1, #0
06dac     84 00 90 5D |  if_ne	jmp	#LR__0576
06db0                 | LR__0571
06db0                 | '     if m$="." then ds+=1: if ds>1 then return false
06db0     94 01 00 FF 
06db4     7F 95 06 F6 | 	mov	arg02, ##@LR__5875
06db8     58 93 02 F6 | 	mov	arg01, local06
06dbc     F8 D9 B1 FD | 	call	#__system___string_cmp
06dc0     00 7A 0E F2 | 	cmp	result1, #0 wz
06dc4     01 A8 06 A1 |  if_e	add	local02, #1
06dc8     02 A8 56 A2 |  if_e	cmps	local02, #2 wc
06dcc     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
06dd0     60 00 90 2D |  if_nc_and_z	jmp	#LR__0576
06dd4                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06dd4     94 01 00 FF 
06dd8     81 C7 06 F6 | 	mov	local17, ##@LR__5876
06ddc     63 C9 02 F6 | 	mov	local18, local17
06de0     58 93 02 F6 | 	mov	arg01, local06
06de4     64 95 02 F6 | 	mov	arg02, local18
06de8     CC D9 B1 FD | 	call	#__system___string_cmp
06dec     3D CB 0A F6 | 	mov	local19, result1 wz
06df0     20 00 90 AD |  if_e	jmp	#LR__0572
06df4     94 01 00 FF 
06df8     83 B3 06 F6 | 	mov	local07, ##@LR__5877
06dfc     59 C7 02 F6 | 	mov	local17, local07
06e00     58 93 02 F6 | 	mov	arg01, local06
06e04     63 95 02 F6 | 	mov	arg02, local17
06e08     AC D9 B1 FD | 	call	#__system___string_cmp
06e0c     3D C9 0A F6 | 	mov	local18, result1 wz
06e10     14 00 90 5D |  if_ne	jmp	#LR__0573
06e14                 | LR__0572
06e14     01 AA 06 F1 | 	add	local03, #1
06e18     00 BC 0E F2 | 	cmp	local12, #0 wz
06e1c     02 AA 56 A2 |  if_e	cmps	local03, #2 wc
06e20     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
06e24     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0576
06e28                 | LR__0573
06e28     01 C0 06 F1 | 	add	local14, #1
06e2c     94 FD 9F FD | 	jmp	#LR__0564
06e30                 | LR__0574
06e30                 | LR__0575
06e30                 | ' return true
06e30     01 7A 66 F6 | 	neg	result1, #1
06e34                 | LR__0576
06e34     E7 F0 03 F6 | 	mov	ptra, fp
06e38     F2 00 A0 FD | 	call	#popregs_
06e3c                 | _isnum_ret
06e3c     2D 00 64 FD | 	ret
06e40                 | 
06e40                 | '   
06e40                 | ' ' Check if the part is an integer number.    
06e40                 | '   
06e40                 | ' function isint(s as string) as boolean
06e40                 | _isint
06e40     0E CA 05 F6 | 	mov	COUNT_, #14
06e44     E8 00 A0 FD | 	call	#pushregs_
06e48     49 A7 02 F6 | 	mov	local01, arg01
06e4c     49 A9 02 F6 | 	mov	local02, arg01
06e50     D7 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06e54                 | LR__0580
06e54     54 7B CA FA | 	rdbyte	result1, local02 wz
06e58     01 A8 06 51 |  if_ne	add	local02, #1
06e5c     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06e60                 | LR__0581
06e60     49 A9 82 F1 | 	sub	local02, arg01
06e64     54 7B 02 F6 | 	mov	result1, local02
06e68     3D AB 0A F6 | 	mov	local03, result1 wz
06e6c     00 7A 06 A6 |  if_e	mov	result1, #0
06e70     64 02 90 AD |  if_e	jmp	#LR__0594
06e74     53 93 02 F6 | 	mov	arg01, local01
06e78     01 94 06 F6 | 	mov	arg02, #1
06e7c     01 96 06 F6 | 	mov	arg03, #1
06e80     CC F2 B1 FD | 	call	#__system__Mid_S
06e84     3D AD 02 F6 | 	mov	local04, result1
06e88                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06e88     94 01 00 FF 
06e8c     85 95 06 F6 | 	mov	arg02, ##@LR__5878
06e90     56 93 02 F6 | 	mov	arg01, local04
06e94     20 D9 B1 FD | 	call	#__system___string_cmp
06e98     00 7A 56 F2 | 	cmps	result1, #0 wc
06e9c     1C 00 90 CD |  if_b	jmp	#LR__0582
06ea0     94 01 00 FF 
06ea4     87 AF 06 F6 | 	mov	local05, ##@LR__5879
06ea8     56 93 02 F6 | 	mov	arg01, local04
06eac     57 95 02 F6 | 	mov	arg02, local05
06eb0     04 D9 B1 FD | 	call	#__system___string_cmp
06eb4     01 7A 56 F2 | 	cmps	result1, #1 wc
06eb8     64 00 90 CD |  if_b	jmp	#LR__0583
06ebc                 | LR__0582
06ebc     94 01 00 FF 
06ec0     89 B1 06 F6 | 	mov	local06, ##@LR__5880
06ec4     58 AF 02 F6 | 	mov	local05, local06
06ec8     56 93 02 F6 | 	mov	arg01, local04
06ecc     57 95 02 F6 | 	mov	arg02, local05
06ed0     E4 D8 B1 FD | 	call	#__system___string_cmp
06ed4     00 7A 0E F2 | 	cmp	result1, #0 wz
06ed8     44 00 90 AD |  if_e	jmp	#LR__0583
06edc     94 01 00 FF 
06ee0     8B B3 06 F6 | 	mov	local07, ##@LR__5881
06ee4     59 B1 02 F6 | 	mov	local06, local07
06ee8     56 93 02 F6 | 	mov	arg01, local04
06eec     58 95 02 F6 | 	mov	arg02, local06
06ef0     C4 D8 B1 FD | 	call	#__system___string_cmp
06ef4     3D AF 0A F6 | 	mov	local05, result1 wz
06ef8     24 00 90 AD |  if_e	jmp	#LR__0583
06efc     94 01 00 FF 
06f00     8D B5 06 F6 | 	mov	local08, ##@LR__5882
06f04     5A B3 02 F6 | 	mov	local07, local08
06f08     56 93 02 F6 | 	mov	arg01, local04
06f0c     59 95 02 F6 | 	mov	arg02, local07
06f10     A4 D8 B1 FD | 	call	#__system___string_cmp
06f14     3D B1 0A F6 | 	mov	local06, result1 wz
06f18     00 7A 06 56 |  if_ne	mov	result1, #0
06f1c     B8 01 90 5D |  if_ne	jmp	#LR__0594
06f20                 | LR__0583
06f20                 | ' if m$="$" then hex=1 else hex=0
06f20     94 01 00 FF 
06f24     8F 95 06 F6 | 	mov	arg02, ##@LR__5883
06f28     56 93 02 F6 | 	mov	arg01, local04
06f2c     88 D8 B1 FD | 	call	#__system___string_cmp
06f30     00 7A 0E F2 | 	cmp	result1, #0 wz
06f34     01 B6 06 A6 |  if_e	mov	local09, #1
06f38     00 B6 06 56 |  if_ne	mov	local09, #0
06f3c                 | ' if m$="%" then bin=1 else bin=0
06f3c     94 01 00 FF 
06f40     91 95 06 F6 | 	mov	arg02, ##@LR__5884
06f44     56 93 02 F6 | 	mov	arg01, local04
06f48     6C D8 B1 FD | 	call	#__system___string_cmp
06f4c     00 7A 0E F2 | 	cmp	result1, #0 wz
06f50     01 B8 06 A6 |  if_e	mov	local10, #1
06f54     00 B8 06 56 |  if_ne	mov	local10, #0
06f58                 | ' if l>1 then 
06f58     02 AA 56 F2 | 	cmps	local03, #2 wc
06f5c     74 01 90 CD |  if_b	jmp	#LR__0593
06f60                 | '   for i=2 to l
06f60     02 BA 06 F6 | 	mov	local11, #2
06f64     55 BD 02 F6 | 	mov	local12, local03
06f68     01 BC 06 F1 | 	add	local12, #1
06f6c                 | LR__0584
06f6c     5E BB 52 F2 | 	cmps	local11, local12 wc
06f70     60 01 90 3D |  if_ae	jmp	#LR__0592
06f74     53 93 02 F6 | 	mov	arg01, local01
06f78     5D 95 02 F6 | 	mov	arg02, local11
06f7c     01 96 06 F6 | 	mov	arg03, #1
06f80     CC F1 B1 FD | 	call	#__system__Mid_S
06f84     3D AD 02 F6 | 	mov	local04, result1
06f88                 | '     m$=mid$(s,i,1) 
06f88                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06f88     00 B6 0E F2 | 	cmp	local09, #0 wz
06f8c     50 00 90 5D |  if_ne	jmp	#LR__0586
06f90     94 01 00 FF 
06f94     93 95 06 F6 | 	mov	arg02, ##@LR__5885
06f98     56 93 02 F6 | 	mov	arg01, local04
06f9c     18 D8 B1 FD | 	call	#__system___string_cmp
06fa0     00 7A 56 F2 | 	cmps	result1, #0 wc
06fa4     18 00 90 CD |  if_b	jmp	#LR__0585
06fa8     94 01 00 FF 
06fac     95 95 06 F6 | 	mov	arg02, ##@LR__5886
06fb0     56 93 02 F6 | 	mov	arg01, local04
06fb4     00 D8 B1 FD | 	call	#__system___string_cmp
06fb8     01 7A 56 F2 | 	cmps	result1, #1 wc
06fbc     20 00 90 CD |  if_b	jmp	#LR__0586
06fc0                 | LR__0585
06fc0     94 01 00 FF 
06fc4     97 B1 06 F6 | 	mov	local06, ##@LR__5887
06fc8     56 93 02 F6 | 	mov	arg01, local04
06fcc     58 95 02 F6 | 	mov	arg02, local06
06fd0     E4 D7 B1 FD | 	call	#__system___string_cmp
06fd4     00 7A 0E F2 | 	cmp	result1, #0 wz
06fd8     00 7A 06 56 |  if_ne	mov	result1, #0
06fdc     F8 00 90 5D |  if_ne	jmp	#LR__0594
06fe0                 | LR__0586
06fe0                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06fe0     01 B6 0E F2 | 	cmp	local09, #1 wz
06fe4     90 00 90 5D |  if_ne	jmp	#LR__0589
06fe8     94 01 00 FF 
06fec     99 95 06 F6 | 	mov	arg02, ##@LR__5888
06ff0     56 93 02 F6 | 	mov	arg01, local04
06ff4     C0 D7 B1 FD | 	call	#__system___string_cmp
06ff8     00 7A 56 F2 | 	cmps	result1, #0 wc
06ffc     1C 00 90 CD |  if_b	jmp	#LR__0587
07000     94 01 00 FF 
07004     9B 95 06 F6 | 	mov	arg02, ##@LR__5889
07008     56 93 02 F6 | 	mov	arg01, local04
0700c     A8 D7 B1 FD | 	call	#__system___string_cmp
07010     3D BF 02 F6 | 	mov	local13, result1
07014     01 BE 56 F2 | 	cmps	local13, #1 wc
07018     5C 00 90 CD |  if_b	jmp	#LR__0589
0701c                 | LR__0587
0701c     94 01 00 FF 
07020     9D AF 06 F6 | 	mov	local05, ##@LR__5890
07024     56 93 02 F6 | 	mov	arg01, local04
07028     57 95 02 F6 | 	mov	arg02, local05
0702c     88 D7 B1 FD | 	call	#__system___string_cmp
07030     3D C1 02 F6 | 	mov	local14, result1
07034     00 C0 56 F2 | 	cmps	local14, #0 wc
07038     1C 00 90 CD |  if_b	jmp	#LR__0588
0703c     94 01 00 FF 
07040     9F B3 06 F6 | 	mov	local07, ##@LR__5891
07044     56 93 02 F6 | 	mov	arg01, local04
07048     59 95 02 F6 | 	mov	arg02, local07
0704c     68 D7 B1 FD | 	call	#__system___string_cmp
07050     01 7A 56 F2 | 	cmps	result1, #1 wc
07054     20 00 90 CD |  if_b	jmp	#LR__0589
07058                 | LR__0588
07058     94 01 00 FF 
0705c     A1 B5 06 F6 | 	mov	local08, ##@LR__5892
07060     56 93 02 F6 | 	mov	arg01, local04
07064     5A 95 02 F6 | 	mov	arg02, local08
07068     4C D7 B1 FD | 	call	#__system___string_cmp
0706c     00 7A 0E F2 | 	cmp	result1, #0 wz
07070     00 7A 06 56 |  if_ne	mov	result1, #0
07074     60 00 90 5D |  if_ne	jmp	#LR__0594
07078                 | LR__0589
07078                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
07078     01 B8 0E F2 | 	cmp	local10, #1 wz
0707c     4C 00 90 5D |  if_ne	jmp	#LR__0591
07080     94 01 00 FF 
07084     A3 95 06 F6 | 	mov	arg02, ##@LR__5893
07088     56 93 02 F6 | 	mov	arg01, local04
0708c     28 D7 B1 FD | 	call	#__system___string_cmp
07090     00 7A 56 F2 | 	cmps	result1, #0 wc
07094     18 00 90 CD |  if_b	jmp	#LR__0590
07098     94 01 00 FF 
0709c     A5 95 06 F6 | 	mov	arg02, ##@LR__5894
070a0     56 93 02 F6 | 	mov	arg01, local04
070a4     10 D7 B1 FD | 	call	#__system___string_cmp
070a8     01 7A 56 F2 | 	cmps	result1, #1 wc
070ac     1C 00 90 CD |  if_b	jmp	#LR__0591
070b0                 | LR__0590
070b0     94 01 00 FF 
070b4     A7 95 06 F6 | 	mov	arg02, ##@LR__5895
070b8     56 93 02 F6 | 	mov	arg01, local04
070bc     F8 D6 B1 FD | 	call	#__system___string_cmp
070c0     00 7A 0E F2 | 	cmp	result1, #0 wz
070c4     00 7A 06 56 |  if_ne	mov	result1, #0
070c8     0C 00 90 5D |  if_ne	jmp	#LR__0594
070cc                 | LR__0591
070cc     01 BA 06 F1 | 	add	local11, #1
070d0     98 FE 9F FD | 	jmp	#LR__0584
070d4                 | LR__0592
070d4                 | LR__0593
070d4                 | ' return true
070d4     01 7A 66 F6 | 	neg	result1, #1
070d8                 | LR__0594
070d8     E7 F0 03 F6 | 	mov	ptra, fp
070dc     F2 00 A0 FD | 	call	#popregs_
070e0                 | _isint_ret
070e0     2D 00 64 FD | 	ret
070e4                 | 
070e4                 | ' 
070e4                 | ' ' Check if the part is a positive decimal number.  
070e4                 | ' 
070e4                 | ' function isdec(s as string) as boolean
070e4                 | _isdec
070e4     05 CA 05 F6 | 	mov	COUNT_, #5
070e8     E8 00 A0 FD | 	call	#pushregs_
070ec     49 A7 02 F6 | 	mov	local01, arg01
070f0     49 A9 02 F6 | 	mov	local02, arg01
070f4     D7 06 48 FB | 	callpa	#(@LR__0601-@LR__0600)>>2,fcache_load_ptr_
070f8                 | LR__0600
070f8     54 7B CA FA | 	rdbyte	result1, local02 wz
070fc     01 A8 06 51 |  if_ne	add	local02, #1
07100     F4 FF 9F 5D |  if_ne	jmp	#LR__0600
07104                 | LR__0601
07104     49 A9 82 F1 | 	sub	local02, arg01
07108     54 7B 02 F6 | 	mov	result1, local02
0710c     3D A9 0A F6 | 	mov	local02, result1 wz
07110     00 7A 06 A6 |  if_e	mov	result1, #0
07114     80 00 90 AD |  if_e	jmp	#LR__0606
07118                 | ' for i=1 to l
07118     01 AA 06 F6 | 	mov	local03, #1
0711c     54 AD 02 F6 | 	mov	local04, local02
07120     01 AC 06 F1 | 	add	local04, #1
07124                 | LR__0602
07124     56 AB 52 F2 | 	cmps	local03, local04 wc
07128     68 00 90 3D |  if_ae	jmp	#LR__0605
0712c     53 93 02 F6 | 	mov	arg01, local01
07130     55 95 02 F6 | 	mov	arg02, local03
07134     01 96 06 F6 | 	mov	arg03, #1
07138     14 F0 B1 FD | 	call	#__system__Mid_S
0713c     3D AF 02 F6 | 	mov	local05, result1
07140                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
07140     94 01 00 FF 
07144     A9 95 06 F6 | 	mov	arg02, ##@LR__5896
07148     57 93 02 F6 | 	mov	arg01, local05
0714c     68 D6 B1 FD | 	call	#__system___string_cmp
07150     00 7A 56 F2 | 	cmps	result1, #0 wc
07154     18 00 90 CD |  if_b	jmp	#LR__0603
07158     94 01 00 FF 
0715c     AB 95 06 F6 | 	mov	arg02, ##@LR__5897
07160     57 93 02 F6 | 	mov	arg01, local05
07164     50 D6 B1 FD | 	call	#__system___string_cmp
07168     01 7A 56 F2 | 	cmps	result1, #1 wc
0716c     1C 00 90 CD |  if_b	jmp	#LR__0604
07170                 | LR__0603
07170     94 01 00 FF 
07174     AD 95 06 F6 | 	mov	arg02, ##@LR__5898
07178     57 93 02 F6 | 	mov	arg01, local05
0717c     38 D6 B1 FD | 	call	#__system___string_cmp
07180     00 7A 0E F2 | 	cmp	result1, #0 wz
07184     00 7A 06 56 |  if_ne	mov	result1, #0
07188     0C 00 90 5D |  if_ne	jmp	#LR__0606
0718c                 | LR__0604
0718c     01 AA 06 F1 | 	add	local03, #1
07190     90 FF 9F FD | 	jmp	#LR__0602
07194                 | LR__0605
07194                 | ' return true
07194     01 7A 66 F6 | 	neg	result1, #1
07198                 | LR__0606
07198     E7 F0 03 F6 | 	mov	ptra, fp
0719c     F2 00 A0 FD | 	call	#popregs_
071a0                 | _isdec_ret
071a0     2D 00 64 FD | 	ret
071a4                 | 
071a4                 | ' 
071a4                 | ' ' Check if the part is a string.  
071a4                 | ' 
071a4                 | ' function isstring(s as string) as boolean
071a4                 | _isstring
071a4     01 CA 05 F6 | 	mov	COUNT_, #1
071a8     E8 00 A0 FD | 	call	#pushregs_
071ac                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
071ac     49 A7 02 F6 | 	mov	local01, arg01
071b0     01 94 06 F6 | 	mov	arg02, #1
071b4     80 EE B1 FD | 	call	#__system__Left_S
071b8     3D 93 02 F6 | 	mov	arg01, result1
071bc     94 01 00 FF 
071c0     AF 95 06 F6 | 	mov	arg02, ##@LR__5899
071c4     F0 D5 B1 FD | 	call	#__system___string_cmp
071c8     00 7A 4E F2 | 	cmps	result1, #0 wz
071cc     28 00 90 5D |  if_ne	jmp	#LR__0610
071d0     53 93 02 F6 | 	mov	arg01, local01
071d4     01 94 06 F6 | 	mov	arg02, #1
071d8     E4 EE B1 FD | 	call	#__system__Right_S
071dc     3D 93 02 F6 | 	mov	arg01, result1
071e0     94 01 00 FF 
071e4     B1 95 06 F6 | 	mov	arg02, ##@LR__5900
071e8     CC D5 B1 FD | 	call	#__system___string_cmp
071ec     00 7A 4E F2 | 	cmps	result1, #0 wz
071f0     01 7A 66 A6 |  if_e	neg	result1, #1
071f4     04 00 90 AD |  if_e	jmp	#LR__0611
071f8                 | LR__0610
071f8     00 7A 06 F6 | 	mov	result1, #0
071fc                 | LR__0611
071fc     E7 F0 03 F6 | 	mov	ptra, fp
07200     F2 00 A0 FD | 	call	#popregs_
07204                 | _isstring_ret
07204     2D 00 64 FD | 	ret
07208                 | 
07208                 | ' 
07208                 | ' ' getnoteval. Returns the frequency of note token
07208                 | ' 
07208                 | ' function getnoteval(token) as single
07208                 | _getnoteval
07208     02 CA 05 F6 | 	mov	COUNT_, #2
0720c     E8 00 A0 FD | 	call	#pushregs_
07210     01 00 00 FF 
07214     00 93 86 F1 | 	sub	arg01, ##768
07218     49 95 52 F6 | 	abs	arg02, arg01 wc
0721c     0C 94 16 FD | 	qdiv	arg02, #12
07220     32 95 02 F6 | 	mov	arg02, objptr
07224     16 00 00 FF 
07228     38 94 06 F1 | 	add	arg02, ##11320
0722c     19 7A 62 FD | 	getqy	result1
07230     3D 7B 82 F6 | 	negc	result1, result1
07234     02 7A 66 F0 | 	shl	result1, #2
07238     4A 7B 02 F1 | 	add	result1, arg02
0723c     49 95 52 F6 | 	abs	arg02, arg01 wc
07240     0C 94 16 FD | 	qdiv	arg02, #12
07244     3D A7 02 FB | 	rdlong	local01, result1
07248     01 92 06 F6 | 	mov	arg01, #1
0724c                 | ' noteexp=1+(note/12) 
0724c                 | ' return (2.0^noteexp)*notebase
0724c     18 94 62 FD | 	getqx	arg02
07250     4A 93 82 F3 | 	sumc	arg01, arg02
07254     49 93 52 F6 | 	abs	arg01, arg01 wc
07258     1F A8 C6 C9 |  if_b	decod	local02, #31
0725c     00 A8 06 36 |  if_ae	mov	local02, #0
07260     F8 F7 B1 FD | 	call	#__system___float_fromuns
07264     54 7B 62 F5 | 	xor	result1, local02
07268     3D 95 02 F6 | 	mov	arg02, result1
0726c     1E 92 C6 F9 | 	decod	arg01, #30
07270     04 0B B2 FD | 	call	#__system____builtin_powf
07274     3D 93 02 F6 | 	mov	arg01, result1
07278     53 95 02 F6 | 	mov	arg02, local01
0727c     E0 FB B1 FD | 	call	#__system___float_mul
07280     E7 F0 03 F6 | 	mov	ptra, fp
07284     F2 00 A0 FD | 	call	#popregs_
07288                 | _getnoteval_ret
07288     2D 00 64 FD | 	ret
0728c                 | 
0728c                 | ' 
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' 
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' '
0728c                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
0728c                 | ' '
0728c                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
0728c                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
0728c                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
0728c                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
0728c                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
0728c                 | ' ' 
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' 
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' ' Helper functions to manage program lines
0728c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0728c                 | ' 
0728c                 | ' '----- delete a line from a program
0728c                 | ' 
0728c                 | ' function deleteline(aline as ulong) as integer
0728c                 | _deleteline
0728c     05 CA 05 F6 | 	mov	COUNT_, #5
07290     E8 00 A0 FD | 	call	#pushregs_
07294     2C F0 07 F1 | 	add	ptra, #44
07298     49 A7 02 F6 | 	mov	local01, arg01
0729c     4C 00 00 FF 
072a0     2C 64 06 F1 | 	add	objptr, ##38956
072a4     32 A9 02 FB | 	rdlong	local02, objptr
072a8                 | ' 
072a8                 | ' searchptr=programstart
072a8                 | ' do
072a8     40 00 00 FF 
072ac     60 65 86 F1 | 	sub	objptr, ##33120
072b0                 | LR__0620
072b0     E7 92 02 F6 | 	mov	arg01, fp
072b4     14 92 06 F1 | 	add	arg01, #20
072b8     54 95 02 F6 | 	mov	arg02, local02
072bc     18 96 06 F6 | 	mov	arg03, #24
072c0     94 C4 B1 FD | 	call	#_psram_spin2_read1
072c4     54 97 02 F6 | 	mov	arg03, local02
072c8     28 CE 05 F1 | 	add	fp, #40
072cc     E7 A8 02 FB | 	rdlong	local02, fp
072d0     14 CE 85 F1 | 	sub	fp, #20
072d4     E7 94 02 FB | 	rdlong	arg02, fp
072d8     14 CE 85 F1 | 	sub	fp, #20
072dc     53 95 12 F2 | 	cmp	arg02, local01 wc
072e0     28 CE 05 C1 |  if_b	add	fp, #40
072e4     E7 AA 02 CB |  if_b	rdlong	local03, fp
072e8     28 CE 85 C1 |  if_b	sub	fp, #40
072ec     FF FF 3F CF 
072f0     FF AB 0E C2 |  if_b	cmp	local03, ##2147483647 wz
072f4     B8 FF 9F 4D |  if_c_and_nz	jmp	#LR__0620
072f8     0B 00 00 FF 
072fc     CC 64 86 F1 | 	sub	objptr, ##5836
07300                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
07300     14 CE 05 F1 | 	add	fp, #20
07304     E7 AA 02 FB | 	rdlong	local03, fp
07308     14 CE 85 F1 | 	sub	fp, #20
0730c     53 AB 0A F2 | 	cmp	local03, local01 wz
07310     01 7A 66 56 |  if_ne	neg	result1, #1
07314     2C 02 90 5D |  if_ne	jmp	#LR__0625
07318     4B 93 02 F6 | 	mov	arg01, arg03
0731c     01 94 66 F6 | 	neg	arg02, #1
07320     0C 98 B1 FD | 	call	#_pslpoke
07324                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
07324                 | ' 
07324                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
07324     28 CE 05 F1 | 	add	fp, #40
07328     E7 96 02 FB | 	rdlong	arg03, fp
0732c     28 CE 85 F1 | 	sub	fp, #40
07330     FF FF 3F FF 
07334     FF 97 0E F2 | 	cmp	arg03, ##2147483647 wz
07338     24 CE 05 A1 |  if_e	add	fp, #36
0733c     E7 AC 02 AB |  if_e	rdlong	local04, fp
07340     24 CE 85 A1 |  if_e	sub	fp, #36
07344     FF FF 7F AF 
07348     FF AD 0E A2 |  if_e	cmp	local04, ##-1 wz
0734c     88 00 90 5D |  if_ne	jmp	#LR__0621
07350     4C 00 00 FF 
07354     2C 64 06 F1 | 	add	objptr, ##38956
07358     00 04 80 FF 
0735c     32 01 68 FC | 	wrlong	##524288, objptr
07360     07 00 00 FF 
07364     2C 64 86 F1 | 	sub	objptr, ##3628
07368     00 04 80 FF 
0736c     32 01 68 FC | 	wrlong	##524288, objptr
07370     07 00 00 FF 
07374     30 64 06 F1 | 	add	objptr, ##3632
07378     32 01 68 FC | 	wrlong	#0, objptr
0737c     04 64 06 F1 | 	add	objptr, #4
07380     FF FF FF FF 
07384     32 FF 6B FC | 	wrlong	##-1, objptr
07388     4C 00 00 FF 
0738c     34 64 86 F1 | 	sub	objptr, ##38964
07390     00 92 06 F6 | 	mov	arg01, #0
07394     01 94 66 F6 | 	neg	arg02, #1
07398     94 97 B1 FD | 	call	#_pslpoke
0739c     10 92 06 F6 | 	mov	arg01, #16
073a0     01 94 66 F6 | 	neg	arg02, #1
073a4     88 97 B1 FD | 	call	#_pslpoke
073a8     14 92 06 F6 | 	mov	arg01, #20
073ac     1E 94 CE F9 | 	bmask	arg02, #30
073b0     7C 97 B1 FD | 	call	#_pslpoke
073b4     52 00 00 FF 
073b8     5C 64 06 F1 | 	add	objptr, ##42076
073bc     00 04 80 FF 
073c0     32 01 68 FC | 	wrlong	##524288, objptr
073c4     04 64 06 F1 | 	add	objptr, #4
073c8     00 04 80 FF 
073cc     32 01 68 FC | 	wrlong	##524288, objptr
073d0     52 00 00 FF 
073d4     60 64 86 F1 | 	sub	objptr, ##42080
073d8                 | LR__0621
073d8                 | ' 
073d8                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
073d8     28 CE 05 F1 | 	add	fp, #40
073dc     E7 AE 02 FB | 	rdlong	local05, fp
073e0     28 CE 85 F1 | 	sub	fp, #40
073e4     FF FF 3F FF 
073e8     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
073ec     74 00 90 5D |  if_ne	jmp	#LR__0622
073f0     24 CE 05 F1 | 	add	fp, #36
073f4     E7 AC 02 FB | 	rdlong	local04, fp
073f8     24 CE 85 F1 | 	sub	fp, #36
073fc     FF FF 7F FF 
07400     FF AD 0E F2 | 	cmp	local04, ##-1 wz
07404     5C 00 90 AD |  if_e	jmp	#LR__0622
07408     24 CE 05 F1 | 	add	fp, #36
0740c     E7 92 02 FB | 	rdlong	arg01, fp
07410     24 CE 85 F1 | 	sub	fp, #36
07414     14 92 06 F1 | 	add	arg01, #20
07418     1E 94 CE F9 | 	bmask	arg02, #30
0741c     10 97 B1 FD | 	call	#_pslpoke
07420     24 CE 05 F1 | 	add	fp, #36
07424     E7 AE 02 FB | 	rdlong	local05, fp
07428     4C 00 00 FF 
0742c     34 64 06 F1 | 	add	objptr, ##38964
07430     32 AF 62 FC | 	wrlong	local05, objptr
07434     4C 00 00 FF 
07438     34 64 86 F1 | 	sub	objptr, ##38964
0743c     E7 92 02 FB | 	rdlong	arg01, fp
07440     24 CE 85 F1 | 	sub	fp, #36
07444     18 98 B1 FD | 	call	#_pslpeek
07448     4C 00 00 FF 
0744c     30 64 06 F1 | 	add	objptr, ##38960
07450     32 7B 62 FC | 	wrlong	result1, objptr
07454     4C 00 00 FF 
07458     30 64 86 F1 | 	sub	objptr, ##38960
0745c                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
0745c                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
0745c                 | '   lastline=pslpeek(header(4))
0745c                 | '   return 0
0745c     00 7A 06 F6 | 	mov	result1, #0
07460     E0 00 90 FD | 	jmp	#LR__0625
07464                 | LR__0622
07464                 | ' 
07464                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
07464     28 CE 05 F1 | 	add	fp, #40
07468     E7 AE 02 FB | 	rdlong	local05, fp
0746c     28 CE 85 F1 | 	sub	fp, #40
07470     FF FF 3F FF 
07474     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
07478     58 00 90 AD |  if_e	jmp	#LR__0623
0747c     24 CE 05 F1 | 	add	fp, #36
07480     E7 AC 02 FB | 	rdlong	local04, fp
07484     24 CE 85 F1 | 	sub	fp, #36
07488     FF FF 7F FF 
0748c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
07490     40 00 90 5D |  if_ne	jmp	#LR__0623
07494     28 CE 05 F1 | 	add	fp, #40
07498     E7 92 02 FB | 	rdlong	arg01, fp
0749c     28 CE 85 F1 | 	sub	fp, #40
074a0     10 92 06 F1 | 	add	arg01, #16
074a4     01 94 66 F6 | 	neg	arg02, #1
074a8     84 96 B1 FD | 	call	#_pslpoke
074ac     28 CE 05 F1 | 	add	fp, #40
074b0     E7 AE 02 FB | 	rdlong	local05, fp
074b4     28 CE 85 F1 | 	sub	fp, #40
074b8     4C 00 00 FF 
074bc     2C 64 06 F1 | 	add	objptr, ##38956
074c0     32 AF 62 FC | 	wrlong	local05, objptr
074c4     4C 00 00 FF 
074c8     2C 64 86 F1 | 	sub	objptr, ##38956
074cc                 | ' '   print "deleted first line"
074cc                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
074cc                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
074cc                 | '   return 0
074cc     00 7A 06 F6 | 	mov	result1, #0
074d0     70 00 90 FD | 	jmp	#LR__0625
074d4                 | LR__0623
074d4                 | ' 
074d4                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
074d4     28 CE 05 F1 | 	add	fp, #40
074d8     E7 AE 02 FB | 	rdlong	local05, fp
074dc     28 CE 85 F1 | 	sub	fp, #40
074e0     FF FF 3F FF 
074e4     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
074e8     24 CE 05 51 |  if_ne	add	fp, #36
074ec     E7 AC 02 5B |  if_ne	rdlong	local04, fp
074f0     24 CE 85 51 |  if_ne	sub	fp, #36
074f4     FF FF 7F 5F 
074f8     FF AD 0E 52 |  if_ne	cmp	local04, ##-1 wz
074fc     40 00 90 AD |  if_e	jmp	#LR__0624
07500     28 CE 05 F1 | 	add	fp, #40
07504     E7 92 02 FB | 	rdlong	arg01, fp
07508     10 92 06 F1 | 	add	arg01, #16
0750c     04 CE 85 F1 | 	sub	fp, #4
07510     E7 94 02 FB | 	rdlong	arg02, fp
07514     24 CE 85 F1 | 	sub	fp, #36
07518     14 96 B1 FD | 	call	#_pslpoke
0751c     24 CE 05 F1 | 	add	fp, #36
07520     E7 92 02 FB | 	rdlong	arg01, fp
07524     14 92 06 F1 | 	add	arg01, #20
07528     04 CE 05 F1 | 	add	fp, #4
0752c     E7 94 02 FB | 	rdlong	arg02, fp
07530     28 CE 85 F1 | 	sub	fp, #40
07534     F8 95 B1 FD | 	call	#_pslpoke
07538                 | '    pslpoke(header(5)+16,header(4))  
07538                 | '    pslpoke(header(4)+20, header(5))
07538                 | '    return 0
07538     00 7A 06 F6 | 	mov	result1, #0
0753c     04 00 90 FD | 	jmp	#LR__0625
07540                 | LR__0624
07540     00 7A 06 F6 | 	mov	result1, #0
07544                 | LR__0625
07544     E7 F0 03 F6 | 	mov	ptra, fp
07548     F2 00 A0 FD | 	call	#popregs_
0754c                 | _deleteline_ret
0754c     2D 00 64 FD | 	ret
07550                 | 
07550                 | ' 
07550                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
07550                 | ' 
07550                 | ' sub save_line
07550                 | _save_line
07550     03 CA 05 F6 | 	mov	COUNT_, #3
07554     E8 00 A0 FD | 	call	#pushregs_
07558     4C 00 00 FF 
0755c     20 64 06 F1 | 	add	objptr, ##38944
07560     32 97 02 FB | 	rdlong	arg03, objptr
07564     01 96 06 F1 | 	add	arg03, #1
07568     05 00 00 FF 
0756c     18 64 86 F1 | 	sub	objptr, ##2584
07570     32 95 02 FB | 	rdlong	arg02, objptr
07574     4B 95 02 FD | 	qmul	arg02, arg03
07578     0E 00 00 FF 
0757c     44 64 86 F1 | 	sub	objptr, ##7236
07580     32 93 02 FB | 	rdlong	arg01, objptr
07584     38 00 00 FF 
07588     C4 65 86 F1 | 	sub	objptr, ##29124
0758c     49 A7 02 F6 | 	mov	local01, arg01
07590     18 A8 62 FD | 	getqx	local02
07594     D7 06 48 FB | 	callpa	#(@LR__0631-@LR__0630)>>2,fcache_load_ptr_
07598                 | LR__0630
07598     53 7B CA FA | 	rdbyte	result1, local01 wz
0759c     01 A6 06 51 |  if_ne	add	local01, #1
075a0     F4 FF 9F 5D |  if_ne	jmp	#LR__0630
075a4                 | LR__0631
075a4     49 A7 82 F1 | 	sub	local01, arg01
075a8     03 A6 CE F7 | 	test	local01, #3 wz
075ac     02 A6 46 50 |  if_ne	shr	local01, #2
075b0     01 A6 06 51 |  if_ne	add	local01, #1
075b4     02 A6 66 50 |  if_ne	shl	local01, #2
075b8     54 AB 02 F6 | 	mov	local03, local02
075bc     53 AB 02 F1 | 	add	local03, local01
075c0     45 00 00 FF 
075c4     00 64 06 F1 | 	add	objptr, ##35328
075c8     32 97 02 FB | 	rdlong	arg03, objptr
075cc     54 97 02 F1 | 	add	arg03, local02
075d0     04 00 00 FF 
075d4     28 64 06 F1 | 	add	objptr, ##2088
075d8     32 97 62 FC | 	wrlong	arg03, objptr
075dc     04 64 06 F1 | 	add	objptr, #4
075e0     32 A7 62 FC | 	wrlong	local01, objptr
075e4     0C 64 86 F1 | 	sub	objptr, #12
075e8     32 93 02 F6 | 	mov	arg01, objptr
075ec     04 00 00 FF 
075f0     20 64 86 F1 | 	sub	objptr, ##2080
075f4     32 95 02 FB | 	rdlong	arg02, objptr
075f8     54 97 02 F6 | 	mov	arg03, local02
075fc     39 00 00 FF 
07600     34 65 86 F1 | 	sub	objptr, ##29492
07604     EC C1 B1 FD | 	call	#_psram_spin2_write
07608     2D 00 00 FF 
0760c     F8 64 06 F1 | 	add	objptr, ##23288
07610     32 93 02 FB | 	rdlong	arg01, objptr
07614     0C 00 00 FF 
07618     3C 64 06 F1 | 	add	objptr, ##6204
0761c     32 95 02 FB | 	rdlong	arg02, objptr
07620     54 95 02 F1 | 	add	arg02, local02
07624     53 97 02 F6 | 	mov	arg03, local01
07628     39 00 00 FF 
0762c     34 65 86 F1 | 	sub	objptr, ##29492
07630     C0 C1 B1 FD | 	call	#_psram_spin2_write
07634     39 00 00 FF 
07638     34 65 06 F1 | 	add	objptr, ##29492
0763c     32 A7 02 FB | 	rdlong	local01, objptr
07640     55 A7 02 F1 | 	add	local01, local03
07644     32 A7 62 FC | 	wrlong	local01, objptr
07648     45 00 00 FF 
0764c     00 64 86 F1 | 	sub	objptr, ##35328
07650     E7 F0 03 F6 | 	mov	ptra, fp
07654     F2 00 A0 FD | 	call	#popregs_
07658                 | _save_line_ret
07658     2D 00 64 FD | 	ret
0765c                 | 
0765c                 | ' 
0765c                 | ' '----- Insert a new line into the middle of the program
0765c                 | ' 
0765c                 | ' function insertline(aline as ulong) as integer
0765c                 | _insertline
0765c     04 CA 05 F6 | 	mov	COUNT_, #4
07660     E8 00 A0 FD | 	call	#pushregs_
07664     28 F0 07 F1 | 	add	ptra, #40
07668     49 A7 02 F6 | 	mov	local01, arg01
0766c     4C 00 00 FF 
07670     2C 64 06 F1 | 	add	objptr, ##38956
07674     32 A9 02 FB | 	rdlong	local02, objptr
07678                 | ' 
07678                 | ' do
07678     40 00 00 FF 
0767c     60 65 86 F1 | 	sub	objptr, ##33120
07680                 | LR__0640
07680     E7 92 02 F6 | 	mov	arg01, fp
07684     10 92 06 F1 | 	add	arg01, #16
07688     54 95 02 F6 | 	mov	arg02, local02
0768c     18 96 06 F6 | 	mov	arg03, #24
07690     C4 C0 B1 FD | 	call	#_psram_spin2_read1
07694     54 AB 02 F6 | 	mov	local03, local02
07698     24 CE 05 F1 | 	add	fp, #36
0769c     E7 A8 02 FB | 	rdlong	local02, fp
076a0     14 CE 85 F1 | 	sub	fp, #20
076a4     E7 96 02 FB | 	rdlong	arg03, fp
076a8     10 CE 85 F1 | 	sub	fp, #16
076ac     53 97 12 F2 | 	cmp	arg03, local01 wc
076b0     24 CE 05 C1 |  if_b	add	fp, #36
076b4     E7 AC 02 CB |  if_b	rdlong	local04, fp
076b8     24 CE 85 C1 |  if_b	sub	fp, #36
076bc     FF FF 3F CF 
076c0     FF AD 0E C2 |  if_b	cmp	local04, ##2147483647 wz
076c4     B8 FF 9F 4D |  if_c_and_nz	jmp	#LR__0640
076c8     0B 00 00 FF 
076cc     CC 64 86 F1 | 	sub	objptr, ##5836
076d0                 | ' 
076d0                 | ' if header(0)=aline then return -1 				' delete it first
076d0     10 CE 05 F1 | 	add	fp, #16
076d4     E7 AC 02 FB | 	rdlong	local04, fp
076d8     10 CE 85 F1 | 	sub	fp, #16
076dc     53 AD 0A F2 | 	cmp	local04, local01 wz
076e0     01 7A 66 A6 |  if_e	neg	result1, #1
076e4     24 01 90 AD |  if_e	jmp	#LR__0643
076e8                 | ' if header(0)<aline then return -2 				' end of program reached
076e8     10 CE 05 F1 | 	add	fp, #16
076ec     E7 AC 02 FB | 	rdlong	local04, fp
076f0     10 CE 85 F1 | 	sub	fp, #16
076f4     53 AD 12 F2 | 	cmp	local04, local01 wc
076f8     02 7A 66 C6 |  if_b	neg	result1, #2
076fc     0C 01 90 CD |  if_b	jmp	#LR__0643
07700                 | ' 
07700                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
07700     20 CE 05 F1 | 	add	fp, #32
07704     E7 AC 02 FB | 	rdlong	local04, fp
07708     20 CE 85 F1 | 	sub	fp, #32
0770c     FF FF 7F FF 
07710     FF AD 0E F2 | 	cmp	local04, ##-1 wz
07714     64 00 90 5D |  if_ne	jmp	#LR__0641
07718     45 00 00 FF 
0771c     00 64 06 F1 | 	add	objptr, ##35328
07720     32 AD 02 FB | 	rdlong	local04, objptr
07724     07 00 00 FF 
07728     2C 64 06 F1 | 	add	objptr, ##3628
0772c     32 AD 62 FC | 	wrlong	local04, objptr
07730     55 93 02 F6 | 	mov	arg01, local03
07734     10 92 06 F1 | 	add	arg01, #16
07738     07 00 00 FF 
0773c     2C 64 86 F1 | 	sub	objptr, ##3628
07740     32 95 02 FB | 	rdlong	arg02, objptr
07744     45 00 00 FF 
07748     00 64 86 F1 | 	sub	objptr, ##35328
0774c     E0 93 B1 FD | 	call	#_pslpoke
07750     49 00 00 FF 
07754     30 64 06 F1 | 	add	objptr, ##37424
07758     FF FF FF FF 
0775c     32 FF 6B FC | 	wrlong	##-1, objptr
07760     04 64 06 F1 | 	add	objptr, #4
07764     32 AB 62 FC | 	wrlong	local03, objptr
07768     49 00 00 FF 
0776c     34 64 86 F1 | 	sub	objptr, ##37428
07770     DC FD BF FD | 	call	#_save_line
07774                 | '   programstart=programptr
07774                 | '   pslpoke(lineptr2+16,programptr)
07774                 | '   ucompiledline(4)=$FFFF_FFFF
07774                 | '   ucompiledline(5)=lineptr2
07774                 | '   save_line
07774                 | '   return 0
07774     00 7A 06 F6 | 	mov	result1, #0
07778     90 00 90 FD | 	jmp	#LR__0643
0777c                 | LR__0641
0777c                 | ' 
0777c                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
0777c     20 CE 05 F1 | 	add	fp, #32
07780     E7 AC 02 FB | 	rdlong	local04, fp
07784     20 CE 85 F1 | 	sub	fp, #32
07788     FF FF 7F FF 
0778c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
07790     74 00 90 AD |  if_e	jmp	#LR__0642
07794     20 CE 05 F1 | 	add	fp, #32
07798     E7 AC 02 FB | 	rdlong	local04, fp
0779c     20 CE 85 F1 | 	sub	fp, #32
077a0     49 00 00 FF 
077a4     30 64 06 F1 | 	add	objptr, ##37424
077a8     32 AD 62 FC | 	wrlong	local04, objptr
077ac     04 64 06 F1 | 	add	objptr, #4
077b0     32 AB 62 FC | 	wrlong	local03, objptr
077b4     10 AA 06 F1 | 	add	local03, #16
077b8     04 00 00 FF 
077bc     34 64 86 F1 | 	sub	objptr, ##2100
077c0     32 95 02 FB | 	rdlong	arg02, objptr
077c4     45 00 00 FF 
077c8     00 64 86 F1 | 	sub	objptr, ##35328
077cc     55 93 02 F6 | 	mov	arg01, local03
077d0     5C 93 B1 FD | 	call	#_pslpoke
077d4     20 CE 05 F1 | 	add	fp, #32
077d8     E7 92 02 FB | 	rdlong	arg01, fp
077dc     20 CE 85 F1 | 	sub	fp, #32
077e0     14 92 06 F1 | 	add	arg01, #20
077e4     45 00 00 FF 
077e8     00 64 06 F1 | 	add	objptr, ##35328
077ec     32 95 02 FB | 	rdlong	arg02, objptr
077f0     45 00 00 FF 
077f4     00 64 86 F1 | 	sub	objptr, ##35328
077f8     34 93 B1 FD | 	call	#_pslpoke
077fc     50 FD BF FD | 	call	#_save_line
07800                 | '   ucompiledline(4)=header(4)
07800                 | '   ucompiledline(5)=lineptr2
07800                 | '   pslpoke(lineptr2+16,programptr)
07800                 | '   pslpoke(header(4)+20,programptr)
07800                 | '   save_line
07800                 | '   return 0
07800     00 7A 06 F6 | 	mov	result1, #0
07804     04 00 90 FD | 	jmp	#LR__0643
07808                 | LR__0642
07808     00 7A 06 F6 | 	mov	result1, #0
0780c                 | LR__0643
0780c     E7 F0 03 F6 | 	mov	ptra, fp
07810     F2 00 A0 FD | 	call	#popregs_
07814                 | _insertline_ret
07814     2D 00 64 FD | 	ret
07818                 | 
07818                 | ' 
07818                 | ' '----- Adds a new line at the end of the program
07818                 | ' 
07818                 | ' sub add_line_at_end(aline) 
07818                 | _add_line_at_end
07818     4C 00 00 FF 
0781c     30 64 06 F1 | 	add	objptr, ##38960
07820     32 93 62 FC | 	wrlong	arg01, objptr
07824     04 64 06 F1 | 	add	objptr, #4
07828     32 95 02 FB | 	rdlong	arg02, objptr
0782c     03 00 00 FF 
07830     04 64 86 F1 | 	sub	objptr, ##1540
07834     32 95 62 FC | 	wrlong	arg02, objptr
07838     03 00 00 FF 
0783c     04 64 06 F1 | 	add	objptr, ##1540
07840     32 93 02 FB | 	rdlong	arg01, objptr
07844     14 92 06 F1 | 	add	arg01, #20
07848     07 00 00 FF 
0784c     34 64 86 F1 | 	sub	objptr, ##3636
07850     32 95 02 FB | 	rdlong	arg02, objptr
07854     45 00 00 FF 
07858     00 64 86 F1 | 	sub	objptr, ##35328
0785c     D0 92 B1 FD | 	call	#_pslpoke
07860     45 00 00 FF 
07864     00 64 06 F1 | 	add	objptr, ##35328
07868     32 95 02 FB | 	rdlong	arg02, objptr
0786c     07 00 00 FF 
07870     34 64 06 F1 | 	add	objptr, ##3636
07874     32 95 62 FC | 	wrlong	arg02, objptr
07878     03 00 00 FF 
0787c     00 64 86 F1 | 	sub	objptr, ##1536
07880     FF FF BF FF 
07884     32 FF 6B FC | 	wrlong	##2147483647, objptr
07888                 | ' 
07888                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07888                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07888     04 00 00 FF 
0788c     34 64 86 F1 | 	sub	objptr, ##2100
07890     32 95 02 FB | 	rdlong	arg02, objptr
07894     45 00 00 FF 
07898     00 64 86 F1 | 	sub	objptr, ##35328
0789c     00 04 00 FF 
078a0     00 94 0E F2 | 	cmp	arg02, ##524288 wz
078a4     49 00 00 AF 
078a8     30 64 06 A1 |  if_e	add	objptr, ##37424
078ac     FF FF FF AF 
078b0     32 FF 6B AC |  if_e	wrlong	##-1, objptr
078b4     49 00 00 AF 
078b8     30 64 86 A1 |  if_e	sub	objptr, ##37424
078bc     90 FC BF FD | 	call	#_save_line
078c0     45 00 00 FF 
078c4     00 64 06 F1 | 	add	objptr, ##35328
078c8     32 93 02 FB | 	rdlong	arg01, objptr
078cc     45 00 00 FF 
078d0     00 64 86 F1 | 	sub	objptr, ##35328
078d4     01 94 66 F6 | 	neg	arg02, #1
078d8     54 92 B1 FD | 	call	#_pslpoke
078dc                 | _add_line_at_end_ret
078dc     2D 00 64 FD | 	ret
078e0                 | 
078e0                 | ' 
078e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
078e0                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
078e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
078e0                 | ' 
078e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
078e0                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
078e0                 | ' '--------------------------------------------------------------------------------------------------------------------------
078e0                 | ' 
078e0                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
078e0                 | ' 
078e0                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
078e0                 | _compile_immediate
078e0     0A CA 05 F6 | 	mov	COUNT_, #10
078e4     E8 00 A0 FD | 	call	#pushregs_
078e8                 | _compile_immediate_enter
078e8     49 AD 02 F6 | 	mov	local04, arg01
078ec     4A AF 02 F6 | 	mov	local05, arg02
078f0     00 B0 06 F6 | 	mov	local06, #0
078f4     00 B2 06 F6 | 	mov	local07, #0
078f8     00 B4 06 F6 | 	mov	local08, #0
078fc                 | ' 
078fc                 | ' ' linetype=cont+1
078fc                 | ' ' 1 : this is the first part of the line that will continue
078fc                 | ' ' 2 - this is the continuation of the line
078fc                 | ' ' 3 - this is the last continued line
078fc                 | ' ' 4 - this is the one and only part
078fc                 | ' ' 5 - continued after if/else
078fc                 | ' 
078fc                 | ' err=0
078fc                 | ' cmd=0
078fc                 | ' vars=0
078fc                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
078fc     02 AC 0E F2 | 	cmp	local04, #2 wz
07900     03 AC 0E 52 |  if_ne	cmp	local04, #3 wz
07904     36 00 00 AF 
07908     B4 65 06 A1 |  if_e	add	objptr, ##28084
0790c     32 B3 02 AB |  if_e	rdlong	local07, objptr
07910     02 00 00 AF 
07914     34 64 06 A1 |  if_e	add	objptr, ##1076
07918     32 03 68 AC |  if_e	wrlong	#1, objptr
0791c     38 00 00 AF 
07920     E8 65 86 A1 |  if_e	sub	objptr, ##29160
07924                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
07924     04 AC 0E F2 | 	cmp	local04, #4 wz
07928     01 AC 0E 52 |  if_ne	cmp	local04, #1 wz
0792c     2C 00 90 5D |  if_ne	jmp	#LR__0650
07930     36 00 00 FF 
07934     BC 65 06 F1 | 	add	objptr, ##28092
07938     32 B3 02 FB | 	rdlong	local07, objptr
0793c     02 00 00 FF 
07940     2C 64 06 F1 | 	add	objptr, ##1068
07944     32 05 68 FC | 	wrlong	#2, objptr
07948     13 00 00 FF 
0794c     38 64 06 F1 | 	add	objptr, ##9784
07950     32 05 68 FC | 	wrlong	#2, objptr
07954     4C 00 00 FF 
07958     20 64 86 F1 | 	sub	objptr, ##38944
0795c                 | LR__0650
0795c                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
0795c     05 AC 0E F2 | 	cmp	local04, #5 wz
07960     40 00 90 5D |  if_ne	jmp	#LR__0651
07964     38 00 00 FF 
07968     E8 65 06 F1 | 	add	objptr, ##29160
0796c     32 7D 02 FB | 	rdlong	result2, objptr
07970     3E B7 02 F6 | 	mov	local09, result2
07974     03 B6 66 F0 | 	shl	local09, #3
07978     02 00 00 FF 
0797c     38 64 86 F1 | 	sub	objptr, ##1080
07980     32 B7 02 F1 | 	add	local09, objptr
07984     04 B6 06 F1 | 	add	local09, #4
07988     5B B3 02 FB | 	rdlong	local07, local09
0798c     01 7C 06 F1 | 	add	result2, #1
07990     02 00 00 FF 
07994     38 64 06 F1 | 	add	objptr, ##1080
07998     32 7D 62 FC | 	wrlong	result2, objptr
0799c     38 00 00 FF 
079a0     E8 65 86 F1 | 	sub	objptr, ##29160
079a4                 | LR__0651
079a4                 | ' 
079a4                 | ' 'print  "In compile_immediate cmd=:", cmd
079a4                 | ' 451 select case cmd
079a4     5C B2 0E F2 | 	cmp	local07, #92 wz
079a8     E8 02 90 AD |  if_e	jmp	#LR__0652
079ac     B9 B2 0E F2 | 	cmp	local07, #185 wz
079b0     EC 02 90 AD |  if_e	jmp	#LR__0653
079b4     47 B2 0E F2 | 	cmp	local07, #71 wz
079b8     F4 02 90 AD |  if_e	jmp	#LR__0654
079bc     59 B2 0E F2 | 	cmp	local07, #89 wz
079c0     FC 02 90 AD |  if_e	jmp	#LR__0655
079c4     C3 B2 0E F2 | 	cmp	local07, #195 wz
079c8     04 03 90 AD |  if_e	jmp	#LR__0656
079cc     45 B2 0E F2 | 	cmp	local07, #69 wz
079d0     08 03 90 AD |  if_e	jmp	#LR__0657
079d4     69 B2 0E F2 | 	cmp	local07, #105 wz
079d8     10 03 90 AD |  if_e	jmp	#LR__0658
079dc     40 B2 0E F2 | 	cmp	local07, #64 wz
079e0     18 07 90 AD |  if_e	jmp	#LR__0735
079e4     B4 B2 0E F2 | 	cmp	local07, #180 wz
079e8     0C 03 90 AD |  if_e	jmp	#LR__0659
079ec     49 B2 0E F2 | 	cmp	local07, #73 wz
079f0     10 03 90 AD |  if_e	jmp	#LR__0660
079f4     C4 B2 0E F2 | 	cmp	local07, #196 wz
079f8     14 03 90 AD |  if_e	jmp	#LR__0661
079fc     AE B2 0E F2 | 	cmp	local07, #174 wz
07a00     18 03 90 AD |  if_e	jmp	#LR__0662
07a04     B0 B2 0E F2 | 	cmp	local07, #176 wz
07a08     1C 03 90 AD |  if_e	jmp	#LR__0663
07a0c     AF B2 0E F2 | 	cmp	local07, #175 wz
07a10     20 03 90 AD |  if_e	jmp	#LR__0664
07a14     B1 B2 0E F2 | 	cmp	local07, #177 wz
07a18     24 03 90 AD |  if_e	jmp	#LR__0665
07a1c     CF B2 0E F2 | 	cmp	local07, #207 wz
07a20     28 03 90 AD |  if_e	jmp	#LR__0666
07a24     68 B2 0E F2 | 	cmp	local07, #104 wz
07a28     2C 03 90 AD |  if_e	jmp	#LR__0667
07a2c     B7 B2 0E F2 | 	cmp	local07, #183 wz
07a30     C8 06 90 AD |  if_e	jmp	#LR__0735
07a34     D9 B2 0E F2 | 	cmp	local07, #217 wz
07a38     28 03 90 AD |  if_e	jmp	#LR__0668
07a3c     74 B2 0E F2 | 	cmp	local07, #116 wz
07a40     2C 03 90 AD |  if_e	jmp	#LR__0669
07a44     73 B2 0E F2 | 	cmp	local07, #115 wz
07a48     34 03 90 AD |  if_e	jmp	#LR__0670
07a4c     6C B2 0E F2 | 	cmp	local07, #108 wz
07a50     3C 03 90 AD |  if_e	jmp	#LR__0671
07a54     89 B2 0E F2 | 	cmp	local07, #137 wz
07a58     A0 06 90 AD |  if_e	jmp	#LR__0735
07a5c     C2 B2 0E F2 | 	cmp	local07, #194 wz
07a60     3C 03 90 AD |  if_e	jmp	#LR__0672
07a64     72 B2 0E F2 | 	cmp	local07, #114 wz
07a68     40 03 90 AD |  if_e	jmp	#LR__0673
07a6c     5D B2 0E F2 | 	cmp	local07, #93 wz
07a70     44 03 90 AD |  if_e	jmp	#LR__0674
07a74     96 B2 0E F2 | 	cmp	local07, #150 wz
07a78     4C 03 90 AD |  if_e	jmp	#LR__0675
07a7c     43 B2 0E F2 | 	cmp	local07, #67 wz
07a80     50 03 90 AD |  if_e	jmp	#LR__0676
07a84     5A B2 0E F2 | 	cmp	local07, #90 wz
07a88     58 03 90 AD |  if_e	jmp	#LR__0677
07a8c     AB B2 0E F2 | 	cmp	local07, #171 wz
07a90     68 06 90 AD |  if_e	jmp	#LR__0735
07a94     BD B2 0E F2 | 	cmp	local07, #189 wz
07a98     58 03 90 AD |  if_e	jmp	#LR__0678
07a9c     BB B2 0E F2 | 	cmp	local07, #187 wz
07aa0     60 03 90 AD |  if_e	jmp	#LR__0679
07aa4     4E B2 0E F2 | 	cmp	local07, #78 wz
07aa8     68 03 90 AD |  if_e	jmp	#LR__0680
07aac     A9 B2 0E F2 | 	cmp	local07, #169 wz
07ab0     80 03 90 AD |  if_e	jmp	#LR__0682
07ab4     46 B2 0E F2 | 	cmp	local07, #70 wz
07ab8     98 03 90 AD |  if_e	jmp	#LR__0684
07abc     71 B2 0E F2 | 	cmp	local07, #113 wz
07ac0     A0 03 90 AD |  if_e	jmp	#LR__0685
07ac4     60 B2 0E F2 | 	cmp	local07, #96 wz
07ac8     A4 03 90 AD |  if_e	jmp	#LR__0686
07acc     4A B2 0E F2 | 	cmp	local07, #74 wz
07ad0     A8 03 90 AD |  if_e	jmp	#LR__0687
07ad4     48 B2 0E F2 | 	cmp	local07, #72 wz
07ad8     AC 03 90 AD |  if_e	jmp	#LR__0688
07adc     58 B2 0E F2 | 	cmp	local07, #88 wz
07ae0     B4 03 90 AD |  if_e	jmp	#LR__0689
07ae4     5F B2 0E F2 | 	cmp	local07, #95 wz
07ae8     BC 03 90 AD |  if_e	jmp	#LR__0690
07aec     B5 B2 0E F2 | 	cmp	local07, #181 wz
07af0     C0 03 90 AD |  if_e	jmp	#LR__0691
07af4     8A B2 0E F2 | 	cmp	local07, #138 wz
07af8     C8 03 90 AD |  if_e	jmp	#LR__0692
07afc     4C B2 0E F2 | 	cmp	local07, #76 wz
07b00     CC 03 90 AD |  if_e	jmp	#LR__0693
07b04     52 B2 0E F2 | 	cmp	local07, #82 wz
07b08     D4 03 90 AD |  if_e	jmp	#LR__0694
07b0c     97 B2 0E F2 | 	cmp	local07, #151 wz
07b10     DC 03 90 AD |  if_e	jmp	#LR__0695
07b14     C6 B2 0E F2 | 	cmp	local07, #198 wz
07b18     E0 03 90 AD |  if_e	jmp	#LR__0696
07b1c     61 B2 0E F2 | 	cmp	local07, #97 wz
07b20     E4 03 90 AD |  if_e	jmp	#LR__0697
07b24     63 B2 0E F2 | 	cmp	local07, #99 wz
07b28     E8 03 90 AD |  if_e	jmp	#LR__0698
07b2c     41 B2 0E F2 | 	cmp	local07, #65 wz
07b30     C8 05 90 AD |  if_e	jmp	#LR__0735
07b34     4B B2 0E F2 | 	cmp	local07, #75 wz
07b38     E4 03 90 AD |  if_e	jmp	#LR__0699
07b3c     C1 B2 0E F2 | 	cmp	local07, #193 wz
07b40     E8 03 90 AD |  if_e	jmp	#LR__0700
07b44     B3 B2 0E F2 | 	cmp	local07, #179 wz
07b48     EC 03 90 AD |  if_e	jmp	#LR__0701
07b4c     5E B2 0E F2 | 	cmp	local07, #94 wz
07b50     F0 03 90 AD |  if_e	jmp	#LR__0702
07b54     7C B2 0E F2 | 	cmp	local07, #124 wz
07b58     F4 03 90 AD |  if_e	jmp	#LR__0703
07b5c     7D B2 0E F2 | 	cmp	local07, #125 wz
07b60     F8 03 90 AD |  if_e	jmp	#LR__0704
07b64     7E B2 0E F2 | 	cmp	local07, #126 wz
07b68     FC 03 90 AD |  if_e	jmp	#LR__0705
07b6c     7F B2 0E F2 | 	cmp	local07, #127 wz
07b70     00 04 90 AD |  if_e	jmp	#LR__0706
07b74     80 B2 0E F2 | 	cmp	local07, #128 wz
07b78     04 04 90 AD |  if_e	jmp	#LR__0707
07b7c     55 B2 0E F2 | 	cmp	local07, #85 wz
07b80     08 04 90 AD |  if_e	jmp	#LR__0708
07b84     75 B2 0E F2 | 	cmp	local07, #117 wz
07b88     0C 04 90 AD |  if_e	jmp	#LR__0709
07b8c     42 B2 0E F2 | 	cmp	local07, #66 wz
07b90     14 04 90 AD |  if_e	jmp	#LR__0710
07b94     95 B2 0E F2 | 	cmp	local07, #149 wz
07b98     1C 04 90 AD |  if_e	jmp	#LR__0711
07b9c     AC B2 0E F2 | 	cmp	local07, #172 wz
07ba0     58 05 90 AD |  if_e	jmp	#LR__0735
07ba4     81 B2 0E F2 | 	cmp	local07, #129 wz
07ba8     18 04 90 AD |  if_e	jmp	#LR__0712
07bac     44 B2 0E F2 | 	cmp	local07, #68 wz
07bb0     1C 04 90 AD |  if_e	jmp	#LR__0713
07bb4     BC B2 0E F2 | 	cmp	local07, #188 wz
07bb8     20 04 90 AD |  if_e	jmp	#LR__0714
07bbc     88 B2 0E F2 | 	cmp	local07, #136 wz
07bc0     38 05 90 AD |  if_e	jmp	#LR__0735
07bc4     B6 B2 0E F2 | 	cmp	local07, #182 wz
07bc8     20 04 90 AD |  if_e	jmp	#LR__0715
07bcc     92 B2 0E F2 | 	cmp	local07, #146 wz
07bd0     28 04 90 AD |  if_e	jmp	#LR__0716
07bd4     BE B2 0E F2 | 	cmp	local07, #190 wz
07bd8     DC 05 90 AD |  if_e	jmp	#LR__0736
07bdc     C7 B2 0E F2 | 	cmp	local07, #199 wz
07be0     D4 B2 0E 52 |  if_ne	cmp	local07, #212 wz
07be4     AA B2 0E 52 |  if_ne	cmp	local07, #170 wz
07be8     10 05 90 AD |  if_e	jmp	#LR__0735
07bec     4D B2 0E F2 | 	cmp	local07, #77 wz
07bf0     14 04 90 AD |  if_e	jmp	#LR__0717
07bf4     51 B2 0E F2 | 	cmp	local07, #81 wz
07bf8     1C 04 90 AD |  if_e	jmp	#LR__0718
07bfc     DA B2 0E F2 | 	cmp	local07, #218 wz
07c00     24 04 90 AD |  if_e	jmp	#LR__0719
07c04     D2 B2 0E F2 | 	cmp	local07, #210 wz
07c08     28 04 90 AD |  if_e	jmp	#LR__0720
07c0c     8E B2 0E F2 | 	cmp	local07, #142 wz
07c10     30 04 90 AD |  if_e	jmp	#LR__0721
07c14     90 B2 0E F2 | 	cmp	local07, #144 wz
07c18     34 04 90 AD |  if_e	jmp	#LR__0722
07c1c     8D B2 0E F2 | 	cmp	local07, #141 wz
07c20     38 04 90 AD |  if_e	jmp	#LR__0723
07c24     8C B2 0E F2 | 	cmp	local07, #140 wz
07c28     3C 04 90 AD |  if_e	jmp	#LR__0724
07c2c     91 B2 0E F2 | 	cmp	local07, #145 wz
07c30     40 04 90 AD |  if_e	jmp	#LR__0725
07c34     8B B2 0E F2 | 	cmp	local07, #139 wz
07c38     44 04 90 AD |  if_e	jmp	#LR__0726
07c3c     8F B2 0E F2 | 	cmp	local07, #143 wz
07c40     48 04 90 AD |  if_e	jmp	#LR__0727
07c44     B2 B2 0E F2 | 	cmp	local07, #178 wz
07c48     4C 04 90 AD |  if_e	jmp	#LR__0728
07c4c     6D B2 0E F2 | 	cmp	local07, #109 wz
07c50     54 04 90 AD |  if_e	jmp	#LR__0729
07c54     70 B2 0E F2 | 	cmp	local07, #112 wz
07c58     A0 04 90 AD |  if_e	jmp	#LR__0735
07c5c     56 B2 0E F2 | 	cmp	local07, #86 wz
07c60     50 04 90 AD |  if_e	jmp	#LR__0730
07c64     57 B2 0E F2 | 	cmp	local07, #87 wz
07c68     90 04 90 AD |  if_e	jmp	#LR__0735
07c6c     79 B2 0E F2 | 	cmp	local07, #121 wz
07c70     4C 04 90 AD |  if_e	jmp	#LR__0731
07c74     77 B2 0E F2 | 	cmp	local07, #119 wz
07c78     50 04 90 AD |  if_e	jmp	#LR__0732
07c7c     78 B2 0E F2 | 	cmp	local07, #120 wz
07c80     54 04 90 AD |  if_e	jmp	#LR__0733
07c84     01 00 00 FF 
07c88     04 B2 0E F2 | 	cmp	local07, ##516 wz
07c8c     54 04 90 AD |  if_e	jmp	#LR__0734
07c90     24 05 90 FD | 	jmp	#LR__0736
07c94                 | LR__0652
07c94     54 0B B0 FD | 	call	#_compile_fun_2p
07c98     3D B1 02 F6 | 	mov	local06, result1
07c9c     5C 04 90 FD | 	jmp	#LR__0735
07ca0                 | LR__0653
07ca0     18 0E B0 FD | 	call	#_compile_fun_varp
07ca4     3D B5 02 F6 | 	mov	local08, result1
07ca8     3E B1 02 F6 | 	mov	local06, result2
07cac     4C 04 90 FD | 	jmp	#LR__0735
07cb0                 | LR__0654
07cb0     08 0E B0 FD | 	call	#_compile_fun_varp
07cb4     3D B5 02 F6 | 	mov	local08, result1
07cb8     3E B1 02 F6 | 	mov	local06, result2
07cbc     3C 04 90 FD | 	jmp	#LR__0735
07cc0                 | LR__0655
07cc0     F8 0D B0 FD | 	call	#_compile_fun_varp
07cc4     3D B5 02 F6 | 	mov	local08, result1
07cc8     3E B1 02 F6 | 	mov	local06, result2
07ccc     2C 04 90 FD | 	jmp	#LR__0735
07cd0                 | LR__0656
07cd0                 | ' return expr()
07cd0     84 41 B0 FD | 	call	#_expr
07cd4     3D B1 02 F6 | 	mov	local06, result1
07cd8     20 04 90 FD | 	jmp	#LR__0735
07cdc                 | LR__0657
07cdc     DC 0D B0 FD | 	call	#_compile_fun_varp
07ce0     3D B5 02 F6 | 	mov	local08, result1
07ce4     3E B1 02 F6 | 	mov	local06, result2
07ce8     10 04 90 FD | 	jmp	#LR__0735
07cec                 | LR__0658
07cec                 | ' return expr()
07cec     68 41 B0 FD | 	call	#_expr
07cf0     3D B1 02 F6 | 	mov	local06, result1
07cf4     04 04 90 FD | 	jmp	#LR__0735
07cf8                 | LR__0659
07cf8                 | ' return expr()
07cf8     5C 41 B0 FD | 	call	#_expr
07cfc     3D B1 02 F6 | 	mov	local06, result1
07d00     F8 03 90 FD | 	jmp	#LR__0735
07d04                 | LR__0660
07d04                 | ' return expr()
07d04     50 41 B0 FD | 	call	#_expr
07d08     3D B1 02 F6 | 	mov	local06, result1
07d0c     EC 03 90 FD | 	jmp	#LR__0735
07d10                 | LR__0661
07d10     D8 0A B0 FD | 	call	#_compile_fun_2p
07d14     3D B1 02 F6 | 	mov	local06, result1
07d18     E0 03 90 FD | 	jmp	#LR__0735
07d1c                 | LR__0662
07d1c     CC 0A B0 FD | 	call	#_compile_fun_2p
07d20     3D B1 02 F6 | 	mov	local06, result1
07d24     D4 03 90 FD | 	jmp	#LR__0735
07d28                 | LR__0663
07d28     C0 0A B0 FD | 	call	#_compile_fun_2p
07d2c     3D B1 02 F6 | 	mov	local06, result1
07d30     C8 03 90 FD | 	jmp	#LR__0735
07d34                 | LR__0664
07d34     B4 0A B0 FD | 	call	#_compile_fun_2p
07d38     3D B1 02 F6 | 	mov	local06, result1
07d3c     BC 03 90 FD | 	jmp	#LR__0735
07d40                 | LR__0665
07d40     A8 0A B0 FD | 	call	#_compile_fun_2p
07d44     3D B1 02 F6 | 	mov	local06, result1
07d48     B0 03 90 FD | 	jmp	#LR__0735
07d4c                 | LR__0666
07d4c                 | ' return expr()
07d4c     08 41 B0 FD | 	call	#_expr
07d50     3D B1 02 F6 | 	mov	local06, result1
07d54     A4 03 90 FD | 	jmp	#LR__0735
07d58                 | LR__0667
07d58                 | ' return expr()
07d58     FC 40 B0 FD | 	call	#_expr
07d5c     3D B1 02 F6 | 	mov	local06, result1
07d60     98 03 90 FD | 	jmp	#LR__0735
07d64                 | LR__0668
07d64     84 0A B0 FD | 	call	#_compile_fun_2p
07d68     3D B1 02 F6 | 	mov	local06, result1
07d6c     8C 03 90 FD | 	jmp	#LR__0735
07d70                 | LR__0669
07d70     48 0D B0 FD | 	call	#_compile_fun_varp
07d74     3D B5 02 F6 | 	mov	local08, result1
07d78     3E B1 02 F6 | 	mov	local06, result2
07d7c     7C 03 90 FD | 	jmp	#LR__0735
07d80                 | LR__0670
07d80     38 0D B0 FD | 	call	#_compile_fun_varp
07d84     3D B5 02 F6 | 	mov	local08, result1
07d88     3E B1 02 F6 | 	mov	local06, result2
07d8c     6C 03 90 FD | 	jmp	#LR__0735
07d90                 | LR__0671
07d90     28 0D B0 FD | 	call	#_compile_fun_varp
07d94     3D B5 02 F6 | 	mov	local08, result1
07d98     3E B1 02 F6 | 	mov	local06, result2
07d9c     5C 03 90 FD | 	jmp	#LR__0735
07da0                 | LR__0672
07da0                 | ' return expr()
07da0     B4 40 B0 FD | 	call	#_expr
07da4     3D B1 02 F6 | 	mov	local06, result1
07da8     50 03 90 FD | 	jmp	#LR__0735
07dac                 | LR__0673
07dac     2C 22 B0 FD | 	call	#_compile_dim
07db0     3D B1 02 F6 | 	mov	local06, result1
07db4     00 04 90 FD | 	jmp	#LR__0736
07db8                 | LR__0674
07db8     00 0D B0 FD | 	call	#_compile_fun_varp
07dbc     3D B5 02 F6 | 	mov	local08, result1
07dc0     3E B1 02 F6 | 	mov	local06, result2
07dc4     34 03 90 FD | 	jmp	#LR__0735
07dc8                 | LR__0675
07dc8     20 0A B0 FD | 	call	#_compile_fun_2p
07dcc     3D B1 02 F6 | 	mov	local06, result1
07dd0     28 03 90 FD | 	jmp	#LR__0735
07dd4                 | LR__0676
07dd4     E4 0C B0 FD | 	call	#_compile_fun_varp
07dd8     3D B5 02 F6 | 	mov	local08, result1
07ddc     3E B1 02 F6 | 	mov	local06, result2
07de0     18 03 90 FD | 	jmp	#LR__0735
07de4                 | LR__0677
07de4     57 93 02 F6 | 	mov	arg01, local05
07de8     B8 20 B0 FD | 	call	#_compile_else
07dec     3D B1 02 F6 | 	mov	local06, result1
07df0     C4 03 90 FD | 	jmp	#LR__0736
07df4                 | LR__0678
07df4     C4 0C B0 FD | 	call	#_compile_fun_varp
07df8     3D B5 02 F6 | 	mov	local08, result1
07dfc     3E B1 02 F6 | 	mov	local06, result2
07e00     F8 02 90 FD | 	jmp	#LR__0735
07e04                 | LR__0679
07e04     B4 0C B0 FD | 	call	#_compile_fun_varp
07e08     3D B5 02 F6 | 	mov	local08, result1
07e0c     3E B1 02 F6 | 	mov	local06, result2
07e10     E8 02 90 FD | 	jmp	#LR__0735
07e14                 | LR__0680
07e14     01 AE 16 F2 | 	cmp	local05, #1 wc
07e18     08 00 90 CD |  if_b	jmp	#LR__0681
07e1c     40 33 B0 FD | 	call	#_compile_goto
07e20     94 03 90 FD | 	jmp	#LR__0736
07e24                 | LR__0681
07e24     19 92 06 F6 | 	mov	arg01, #25
07e28     00 94 06 F6 | 	mov	arg02, #0
07e2c     68 8B B1 FD | 	call	#_printerror
07e30     84 03 90 FD | 	jmp	#LR__0736
07e34                 | LR__0682
07e34     01 AE 16 F2 | 	cmp	local05, #1 wc
07e38     08 00 90 CD |  if_b	jmp	#LR__0683
07e3c     BC 32 B0 FD | 	call	#_compile_gosub
07e40     74 03 90 FD | 	jmp	#LR__0736
07e44                 | LR__0683
07e44     19 92 06 F6 | 	mov	arg01, #25
07e48     00 94 06 F6 | 	mov	arg02, #0
07e4c     48 8B B1 FD | 	call	#_printerror
07e50     64 03 90 FD | 	jmp	#LR__0736
07e54                 | LR__0684
07e54     64 0C B0 FD | 	call	#_compile_fun_varp
07e58     3D B5 02 F6 | 	mov	local08, result1
07e5c     3E B1 02 F6 | 	mov	local06, result2
07e60     98 02 90 FD | 	jmp	#LR__0735
07e64                 | LR__0685
07e64     FC 0A B0 FD | 	call	#_compile_fun_4p
07e68     3D B1 02 F6 | 	mov	local06, result1
07e6c     8C 02 90 FD | 	jmp	#LR__0735
07e70                 | LR__0686
07e70                 | ' return expr()
07e70     E4 3F B0 FD | 	call	#_expr
07e74     3D B1 02 F6 | 	mov	local06, result1
07e78     80 02 90 FD | 	jmp	#LR__0735
07e7c                 | LR__0687
07e7c     10 28 B0 FD | 	call	#_compile_for
07e80     3D B1 02 F6 | 	mov	local06, result1
07e84     30 03 90 FD | 	jmp	#LR__0736
07e88                 | LR__0688
07e88     30 0C B0 FD | 	call	#_compile_fun_varp
07e8c     3D B5 02 F6 | 	mov	local08, result1
07e90     3E B1 02 F6 | 	mov	local06, result2
07e94     64 02 90 FD | 	jmp	#LR__0735
07e98                 | LR__0689
07e98     57 93 02 F6 | 	mov	arg01, local05
07e9c     7C 1E B0 FD | 	call	#_compile_if
07ea0     3D B1 02 F6 | 	mov	local06, result1
07ea4     10 03 90 FD | 	jmp	#LR__0736
07ea8                 | LR__0690
07ea8                 | ' return expr()
07ea8     AC 3F B0 FD | 	call	#_expr
07eac     3D B1 02 F6 | 	mov	local06, result1
07eb0     48 02 90 FD | 	jmp	#LR__0735
07eb4                 | LR__0691
07eb4     D0 0D B0 FD | 	call	#_compile_input
07eb8     3D B5 02 F6 | 	mov	local08, result1
07ebc     3E B1 02 F6 | 	mov	local06, result2
07ec0     38 02 90 FD | 	jmp	#LR__0735
07ec4                 | LR__0692
07ec4                 | ' return expr()
07ec4     90 3F B0 FD | 	call	#_expr
07ec8     3D B1 02 F6 | 	mov	local06, result1
07ecc     2C 02 90 FD | 	jmp	#LR__0735
07ed0                 | LR__0693
07ed0     E8 0B B0 FD | 	call	#_compile_fun_varp
07ed4     3D B5 02 F6 | 	mov	local08, result1
07ed8     3E B1 02 F6 | 	mov	local06, result2
07edc     1C 02 90 FD | 	jmp	#LR__0735
07ee0                 | LR__0694
07ee0     D8 0B B0 FD | 	call	#_compile_fun_varp
07ee4     3D B5 02 F6 | 	mov	local08, result1
07ee8     3E B1 02 F6 | 	mov	local06, result2
07eec     0C 02 90 FD | 	jmp	#LR__0735
07ef0                 | LR__0695
07ef0     F8 08 B0 FD | 	call	#_compile_fun_2p
07ef4     3D B1 02 F6 | 	mov	local06, result1
07ef8     00 02 90 FD | 	jmp	#LR__0735
07efc                 | LR__0696
07efc                 | ' return expr()
07efc     58 3F B0 FD | 	call	#_expr
07f00     3D B1 02 F6 | 	mov	local06, result1
07f04     F4 01 90 FD | 	jmp	#LR__0735
07f08                 | LR__0697
07f08                 | ' return expr()
07f08     4C 3F B0 FD | 	call	#_expr
07f0c     3D B1 02 F6 | 	mov	local06, result1
07f10     E8 01 90 FD | 	jmp	#LR__0735
07f14                 | LR__0698
07f14                 | ' return expr()
07f14     40 3F B0 FD | 	call	#_expr
07f18     3D B1 02 F6 | 	mov	local06, result1
07f1c     DC 01 90 FD | 	jmp	#LR__0735
07f20                 | LR__0699
07f20     44 30 B0 FD | 	call	#_compile_next
07f24     3D B1 02 F6 | 	mov	local06, result1
07f28     8C 02 90 FD | 	jmp	#LR__0736
07f2c                 | LR__0700
07f2c     A4 35 B0 FD | 	call	#_compile_on
07f30     3D B1 02 F6 | 	mov	local06, result1
07f34     80 02 90 FD | 	jmp	#LR__0736
07f38                 | LR__0701
07f38     38 09 B0 FD | 	call	#_compile_fun_3p
07f3c     3D B1 02 F6 | 	mov	local06, result1
07f40     B8 01 90 FD | 	jmp	#LR__0735
07f44                 | LR__0702
07f44                 | ' return expr()
07f44     10 3F B0 FD | 	call	#_expr
07f48     3D B1 02 F6 | 	mov	local06, result1
07f4c     AC 01 90 FD | 	jmp	#LR__0735
07f50                 | LR__0703
07f50                 | ' return expr()
07f50     04 3F B0 FD | 	call	#_expr
07f54     3D B1 02 F6 | 	mov	local06, result1
07f58     A0 01 90 FD | 	jmp	#LR__0735
07f5c                 | LR__0704
07f5c                 | ' return expr()
07f5c     F8 3E B0 FD | 	call	#_expr
07f60     3D B1 02 F6 | 	mov	local06, result1
07f64     94 01 90 FD | 	jmp	#LR__0735
07f68                 | LR__0705
07f68                 | ' return expr()
07f68     EC 3E B0 FD | 	call	#_expr
07f6c     3D B1 02 F6 | 	mov	local06, result1
07f70     88 01 90 FD | 	jmp	#LR__0735
07f74                 | LR__0706
07f74     EC 09 B0 FD | 	call	#_compile_fun_4p
07f78     3D B1 02 F6 | 	mov	local06, result1
07f7c     7C 01 90 FD | 	jmp	#LR__0735
07f80                 | LR__0707
07f80                 | ' return expr()
07f80     D4 3E B0 FD | 	call	#_expr
07f84     3D B1 02 F6 | 	mov	local06, result1
07f88     70 01 90 FD | 	jmp	#LR__0735
07f8c                 | LR__0708
07f8c     5C 08 B0 FD | 	call	#_compile_fun_2p
07f90     3D B1 02 F6 | 	mov	local06, result1
07f94     64 01 90 FD | 	jmp	#LR__0735
07f98                 | LR__0709
07f98     20 0B B0 FD | 	call	#_compile_fun_varp
07f9c     3D B5 02 F6 | 	mov	local08, result1
07fa0     3E B1 02 F6 | 	mov	local06, result2
07fa4     54 01 90 FD | 	jmp	#LR__0735
07fa8                 | LR__0710
07fa8     10 0B B0 FD | 	call	#_compile_fun_varp
07fac     3D B5 02 F6 | 	mov	local08, result1
07fb0     3E B1 02 F6 | 	mov	local06, result2
07fb4     44 01 90 FD | 	jmp	#LR__0735
07fb8                 | LR__0711
07fb8     30 08 B0 FD | 	call	#_compile_fun_2p
07fbc     3D B1 02 F6 | 	mov	local06, result1
07fc0     38 01 90 FD | 	jmp	#LR__0735
07fc4                 | LR__0712
07fc4     24 08 B0 FD | 	call	#_compile_fun_2p
07fc8     3D B1 02 F6 | 	mov	local06, result1
07fcc     2C 01 90 FD | 	jmp	#LR__0735
07fd0                 | LR__0713
07fd0     70 16 B0 FD | 	call	#_compile_print
07fd4     3D B1 02 F6 | 	mov	local06, result1
07fd8     DC 01 90 FD | 	jmp	#LR__0736
07fdc                 | LR__0714
07fdc     DC 0A B0 FD | 	call	#_compile_fun_varp
07fe0     3D B5 02 F6 | 	mov	local08, result1
07fe4     3E B1 02 F6 | 	mov	local06, result2
07fe8     10 01 90 FD | 	jmp	#LR__0735
07fec                 | LR__0715
07fec     A8 0B B0 FD | 	call	#_compile_read
07ff0     3D B5 02 F6 | 	mov	local08, result1
07ff4     3E B1 02 F6 | 	mov	local06, result2
07ff8     00 01 90 FD | 	jmp	#LR__0735
07ffc                 | LR__0716
07ffc                 | ' return expr()
07ffc     58 3E B0 FD | 	call	#_expr
08000     3D B1 02 F6 | 	mov	local06, result1
08004     F4 00 90 FD | 	jmp	#LR__0735
08008                 | LR__0717
08008     B0 0A B0 FD | 	call	#_compile_fun_varp
0800c     3D B5 02 F6 | 	mov	local08, result1
08010     3E B1 02 F6 | 	mov	local06, result2
08014     E4 00 90 FD | 	jmp	#LR__0735
08018                 | LR__0718
08018     A0 0A B0 FD | 	call	#_compile_fun_varp
0801c     3D B5 02 F6 | 	mov	local08, result1
08020     3E B1 02 F6 | 	mov	local06, result2
08024     D4 00 90 FD | 	jmp	#LR__0735
08028                 | LR__0719
08028     C0 07 B0 FD | 	call	#_compile_fun_2p
0802c     3D B1 02 F6 | 	mov	local06, result1
08030     C8 00 90 FD | 	jmp	#LR__0735
08034                 | LR__0720
08034     84 0A B0 FD | 	call	#_compile_fun_varp
08038     3D B5 02 F6 | 	mov	local08, result1
0803c     3E B1 02 F6 | 	mov	local06, result2
08040     B8 00 90 FD | 	jmp	#LR__0735
08044                 | LR__0721
08044     A4 07 B0 FD | 	call	#_compile_fun_2p
08048     3D B1 02 F6 | 	mov	local06, result1
0804c     AC 00 90 FD | 	jmp	#LR__0735
08050                 | LR__0722
08050     98 07 B0 FD | 	call	#_compile_fun_2p
08054     3D B1 02 F6 | 	mov	local06, result1
08058     A0 00 90 FD | 	jmp	#LR__0735
0805c                 | LR__0723
0805c     8C 07 B0 FD | 	call	#_compile_fun_2p
08060     3D B1 02 F6 | 	mov	local06, result1
08064     94 00 90 FD | 	jmp	#LR__0735
08068                 | LR__0724
08068     80 07 B0 FD | 	call	#_compile_fun_2p
0806c     3D B1 02 F6 | 	mov	local06, result1
08070     88 00 90 FD | 	jmp	#LR__0735
08074                 | LR__0725
08074     74 07 B0 FD | 	call	#_compile_fun_2p
08078     3D B1 02 F6 | 	mov	local06, result1
0807c     7C 00 90 FD | 	jmp	#LR__0735
08080                 | LR__0726
08080     68 07 B0 FD | 	call	#_compile_fun_2p
08084     3D B1 02 F6 | 	mov	local06, result1
08088     70 00 90 FD | 	jmp	#LR__0735
0808c                 | LR__0727
0808c     5C 07 B0 FD | 	call	#_compile_fun_2p
08090     3D B1 02 F6 | 	mov	local06, result1
08094     64 00 90 FD | 	jmp	#LR__0735
08098                 | LR__0728
08098     20 0A B0 FD | 	call	#_compile_fun_varp
0809c     3D B5 02 F6 | 	mov	local08, result1
080a0     3E B1 02 F6 | 	mov	local06, result2
080a4     54 00 90 FD | 	jmp	#LR__0735
080a8                 | LR__0729
080a8     C8 07 B0 FD | 	call	#_compile_fun_3p
080ac     3D B1 02 F6 | 	mov	local06, result1
080b0     48 00 90 FD | 	jmp	#LR__0735
080b4                 | LR__0730
080b4                 | ' return expr()
080b4     A0 3D B0 FD | 	call	#_expr
080b8     3D B1 02 F6 | 	mov	local06, result1
080bc     3C 00 90 FD | 	jmp	#LR__0735
080c0                 | LR__0731
080c0     28 07 B0 FD | 	call	#_compile_fun_2p
080c4     3D B1 02 F6 | 	mov	local06, result1
080c8     30 00 90 FD | 	jmp	#LR__0735
080cc                 | LR__0732
080cc     1C 07 B0 FD | 	call	#_compile_fun_2p
080d0     3D B1 02 F6 | 	mov	local06, result1
080d4     24 00 90 FD | 	jmp	#LR__0735
080d8                 | LR__0733
080d8     10 07 B0 FD | 	call	#_compile_fun_2p
080dc     3D B1 02 F6 | 	mov	local06, result1
080e0     18 00 90 FD | 	jmp	#LR__0735
080e4                 | LR__0734
080e4     00 13 B0 FD | 	call	#_compile_array_assign
080e8     3D B1 02 F6 | 	mov	local06, result1
080ec     0E B0 0E F2 | 	cmp	local06, #14 wz
080f0     C4 00 90 5D |  if_ne	jmp	#LR__0736
080f4                 | ' return 23
080f4     17 B0 06 F6 | 	mov	local06, #23
080f8     BC 00 90 FD | 	jmp	#LR__0736
080fc                 | ' return 23
080fc                 | LR__0735
080fc     59 AB 02 F6 | 	mov	local03, local07
08100     5A A7 02 F6 | 	mov	local01, local08
08104     53 B7 02 F6 | 	mov	local09, local01
08108     54 B9 02 F6 | 	mov	local10, local02
0810c     55 B3 02 F6 | 	mov	local07, local03
08110     4C 00 00 FF 
08114     20 64 06 F1 | 	add	objptr, ##38944
08118     32 A7 02 FB | 	rdlong	local01, objptr
0811c     53 B5 02 F6 | 	mov	local08, local01
08120     01 B4 66 F0 | 	shl	local08, #1
08124     53 B5 02 F1 | 	add	local08, local01
08128     02 B4 66 F0 | 	shl	local08, #2
0812c     03 00 00 FF 
08130     00 64 86 F1 | 	sub	objptr, ##1536
08134     32 B5 02 F1 | 	add	local08, objptr
08138     5A B7 62 FC | 	wrlong	local09, local08
0813c     03 00 00 FF 
08140     00 64 06 F1 | 	add	objptr, ##1536
08144     32 A7 02 FB | 	rdlong	local01, objptr
08148     53 B7 02 F6 | 	mov	local09, local01
0814c     01 B6 66 F0 | 	shl	local09, #1
08150     53 B7 02 F1 | 	add	local09, local01
08154     02 B6 66 F0 | 	shl	local09, #2
08158     03 00 00 FF 
0815c     00 64 86 F1 | 	sub	objptr, ##1536
08160     32 B7 02 F1 | 	add	local09, objptr
08164     04 B6 06 F1 | 	add	local09, #4
08168     5B B9 62 FC | 	wrlong	local10, local09
0816c     03 00 00 FF 
08170     00 64 06 F1 | 	add	objptr, ##1536
08174     32 A7 02 FB | 	rdlong	local01, objptr
08178     53 B9 02 F6 | 	mov	local10, local01
0817c     01 B8 66 F0 | 	shl	local10, #1
08180     53 B9 02 F1 | 	add	local10, local01
08184     02 B8 66 F0 | 	shl	local10, #2
08188     03 00 00 FF 
0818c     00 64 86 F1 | 	sub	objptr, ##1536
08190     32 B9 02 F1 | 	add	local10, objptr
08194     08 B8 06 F1 | 	add	local10, #8
08198     5C B3 62 FC | 	wrlong	local07, local10
0819c     03 00 00 FF 
081a0     00 64 06 F1 | 	add	objptr, ##1536
081a4     32 B7 02 FB | 	rdlong	local09, objptr
081a8     01 B6 06 F1 | 	add	local09, #1
081ac     32 B7 62 FC | 	wrlong	local09, objptr
081b0     4C 00 00 FF 
081b4     20 64 86 F1 | 	sub	objptr, ##38944
081b8                 | LR__0736
081b8                 | ' 
081b8                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
081b8                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
081b8     03 AC 0E F2 | 	cmp	local04, #3 wz
081bc     04 AC 0E 52 |  if_ne	cmp	local04, #4 wz
081c0     38 00 90 5D |  if_ne	jmp	#LR__0737
081c4     4C 00 00 FF 
081c8     20 64 06 F1 | 	add	objptr, ##38944
081cc     32 B9 02 FB | 	rdlong	local10, objptr
081d0     5C A7 02 F6 | 	mov	local01, local10
081d4     01 A6 66 F0 | 	shl	local01, #1
081d8     5C A7 02 F1 | 	add	local01, local10
081dc     02 A6 66 F0 | 	shl	local01, #2
081e0     03 00 00 FF 
081e4     00 64 86 F1 | 	sub	objptr, ##1536
081e8     32 A7 02 F1 | 	add	local01, objptr
081ec     08 A6 06 F1 | 	add	local01, #8
081f0     53 FD 6B FC | 	wrlong	#510, local01
081f4     49 00 00 FF 
081f8     20 64 86 F1 | 	sub	objptr, ##37408
081fc                 | LR__0737
081fc                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
081fc                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
081fc     4C 00 00 FF 
08200     20 64 06 F1 | 	add	objptr, ##38944
08204     32 A7 02 FB | 	rdlong	local01, objptr
08208     4C 00 00 FF 
0820c     20 64 86 F1 | 	sub	objptr, ##38944
08210     D7 52 48 FB | 	callpa	#(@LR__0740-@LR__0738)>>2,fcache_load_ptr_
08214                 | LR__0738
08214     53 B7 02 F6 | 	mov	local09, local01
08218     01 B6 66 F0 | 	shl	local09, #1
0821c     53 B7 02 F1 | 	add	local09, local01
08220     02 B6 66 F0 | 	shl	local09, #2
08224     32 B9 02 F6 | 	mov	local10, objptr
08228     49 00 00 FF 
0822c     20 B8 06 F1 | 	add	local10, ##37408
08230     5C B7 02 F1 | 	add	local09, local10
08234     08 B6 06 F1 | 	add	local09, #8
08238     5B B7 02 FB | 	rdlong	local09, local09
0823c     9B B6 0E F2 | 	cmp	local09, #155 wz
08240     68 00 90 5D |  if_ne	jmp	#LR__0739
08244     53 B7 02 F6 | 	mov	local09, local01
08248     01 B6 86 F1 | 	sub	local09, #1
0824c     5B B9 02 F6 | 	mov	local10, local09
08250     01 B8 66 F0 | 	shl	local10, #1
08254     5B B9 02 F1 | 	add	local10, local09
08258     02 B8 66 F0 | 	shl	local10, #2
0825c     32 B7 02 F6 | 	mov	local09, objptr
08260     49 00 00 FF 
08264     20 B6 06 F1 | 	add	local09, ##37408
08268     5B B9 02 F1 | 	add	local10, local09
0826c     08 B8 06 F1 | 	add	local10, #8
08270     5C B9 02 FB | 	rdlong	local10, local10
08274     11 B8 0E F2 | 	cmp	local10, #17 wz
08278     30 00 90 5D |  if_ne	jmp	#LR__0739
0827c     53 B7 02 F6 | 	mov	local09, local01
08280     01 B6 86 F1 | 	sub	local09, #1
08284     5B B9 02 F6 | 	mov	local10, local09
08288     01 B8 66 F0 | 	shl	local10, #1
0828c     5B B9 02 F1 | 	add	local10, local09
08290     02 B8 66 F0 | 	shl	local10, #2
08294     32 B7 02 F6 | 	mov	local09, objptr
08298     49 00 00 FF 
0829c     20 B6 06 F1 | 	add	local09, ##37408
082a0     5B B9 02 F1 | 	add	local10, local09
082a4     08 B8 06 F1 | 	add	local10, #8
082a8     5C 25 68 FC | 	wrlong	#18, local10
082ac                 | LR__0739
082ac     01 A6 86 F1 | 	sub	local01, #1
082b0     01 A6 56 F2 | 	cmps	local01, #1 wc
082b4     5C FF 9F 3D |  if_ae	jmp	#LR__0738
082b8                 | LR__0740
082b8                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
082b8                 | ' return err
082b8     58 7B 02 F6 | 	mov	result1, local06
082bc     E7 F0 03 F6 | 	mov	ptra, fp
082c0     F2 00 A0 FD | 	call	#popregs_
082c4                 | _compile_immediate_ret
082c4     2D 00 64 FD | 	ret
082c8                 | 
082c8                 | ' 
082c8                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
082c8                 | ' 
082c8                 | ' function compile_immediate_assign(linetype as ulong) as ulong
082c8                 | _compile_immediate_assign
082c8     0C CA 05 F6 | 	mov	COUNT_, #12
082cc     E8 00 A0 FD | 	call	#pushregs_
082d0     49 AD 02 F6 | 	mov	local04, arg01
082d4     FF AA 06 F6 | 	mov	local03, #255
082d8     01 AE 66 F6 | 	neg	local05, #1
082dc     00 B0 06 F6 | 	mov	local06, #0
082e0                 | ' 
082e0                 | ' t1.result_type=result_error : t1.result.uresult=0
082e0                 | ' i=-1: j=-1 : err=0
082e0                 | ' 
082e0                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
082e0     02 AC 0E F2 | 	cmp	local04, #2 wz
082e4     03 AC 0E 52 |  if_ne	cmp	local04, #3 wz
082e8     36 00 00 AF 
082ec     B0 65 06 A1 |  if_e	add	objptr, ##28080
082f0     32 B3 02 AB |  if_e	rdlong	local07, objptr
082f4     02 00 00 AF 
082f8     38 64 06 A1 |  if_e	add	objptr, ##1080
082fc     32 05 68 AC |  if_e	wrlong	#2, objptr
08300     38 00 00 AF 
08304     E8 65 86 A1 |  if_e	sub	objptr, ##29160
08308                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
08308     04 AC 0E F2 | 	cmp	local04, #4 wz
0830c     01 AC 0E 52 |  if_ne	cmp	local04, #1 wz
08310     2C 00 90 5D |  if_ne	jmp	#LR__0750
08314     36 00 00 FF 
08318     B8 65 06 F1 | 	add	objptr, ##28088
0831c     32 B3 02 FB | 	rdlong	local07, objptr
08320     02 00 00 FF 
08324     30 64 06 F1 | 	add	objptr, ##1072
08328     32 07 68 FC | 	wrlong	#3, objptr
0832c     13 00 00 FF 
08330     38 64 06 F1 | 	add	objptr, ##9784
08334     32 05 68 FC | 	wrlong	#2, objptr
08338     4C 00 00 FF 
0833c     20 64 86 F1 | 	sub	objptr, ##38944
08340                 | LR__0750
08340                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
08340     05 AC 0E F2 | 	cmp	local04, #5 wz
08344     3C 00 90 5D |  if_ne	jmp	#LR__0751
08348     38 00 00 FF 
0834c     E8 65 06 F1 | 	add	objptr, ##29160
08350     32 7B 02 FB | 	rdlong	result1, objptr
08354     3D B3 02 F6 | 	mov	local07, result1
08358     03 B2 66 F0 | 	shl	local07, #3
0835c     02 00 00 FF 
08360     38 64 86 F1 | 	sub	objptr, ##1080
08364     32 B3 02 F1 | 	add	local07, objptr
08368     59 B3 02 FB | 	rdlong	local07, local07
0836c     02 7A 06 F1 | 	add	result1, #2
08370     02 00 00 FF 
08374     38 64 06 F1 | 	add	objptr, ##1080
08378     32 7B 62 FC | 	wrlong	result1, objptr
0837c     38 00 00 FF 
08380     E8 65 86 F1 | 	sub	objptr, ##29160
08384                 | LR__0751
08384     59 93 02 F6 | 	mov	arg01, local07
08388     01 94 06 F6 | 	mov	arg02, #1
0838c     30 DD B1 FD | 	call	#__system__Right_S
08390     3D B5 02 F6 | 	mov	local08, result1
08394     C0 3A B0 FD | 	call	#_expr
08398                 | ' 
08398                 | ' suffix2$=right$(varname2$,1)
08398                 | ' expr()
08398                 | ' if varnum>0 then					' try to find a variable
08398     36 00 00 FF 
0839c     AC 65 06 F1 | 	add	objptr, ##28076
083a0     32 B7 02 FB | 	rdlong	local09, objptr
083a4     36 00 00 FF 
083a8     AC 65 86 F1 | 	sub	objptr, ##28076
083ac     01 B6 56 F2 | 	cmps	local09, #1 wc
083b0     54 00 90 CD |  if_b	jmp	#LR__0754
083b4                 | '   for i=0 to varnum-1
083b4     00 B8 06 F6 | 	mov	local10, #0
083b8     36 00 00 FF 
083bc     AC 65 06 F1 | 	add	objptr, ##28076
083c0     32 BB 02 FB | 	rdlong	local11, objptr
083c4     36 00 00 FF 
083c8     AC 65 86 F1 | 	sub	objptr, ##28076
083cc                 | LR__0752
083cc     5D B9 52 F2 | 	cmps	local10, local11 wc
083d0     34 00 90 3D |  if_ae	jmp	#LR__0753
083d4                 | '     if variables(i).name=varname2$ then j=i : exit
083d4     5C B7 02 F6 | 	mov	local09, local10
083d8     04 B6 66 F0 | 	shl	local09, #4
083dc     32 95 02 F6 | 	mov	arg02, objptr
083e0     16 00 00 FF 
083e4     9C 95 06 F1 | 	add	arg02, ##11676
083e8     4A B7 02 F1 | 	add	local09, arg02
083ec     5B 93 02 FB | 	rdlong	arg01, local09
083f0     59 95 02 F6 | 	mov	arg02, local07
083f4     C0 C3 B1 FD | 	call	#__system___string_cmp
083f8     00 7A 0E F2 | 	cmp	result1, #0 wz
083fc     5C AF 02 A6 |  if_e	mov	local05, local10
08400     01 B8 06 51 |  if_ne	add	local10, #1
08404     C4 FF 9F 5D |  if_ne	jmp	#LR__0752
08408                 | LR__0753
08408                 | LR__0754
08408                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
08408     FF FF 7F FF 
0840c     FF AF 0E F2 | 	cmp	local05, ##-1 wz
08410     60 00 90 5D |  if_ne	jmp	#LR__0755
08414     36 00 00 FF 
08418     AC 65 06 F1 | 	add	objptr, ##28076
0841c     32 B7 02 FB | 	rdlong	local09, objptr
08420     36 00 00 FF 
08424     AC 65 86 F1 | 	sub	objptr, ##28076
08428     02 00 00 FF 
0842c     00 B6 56 F2 | 	cmps	local09, ##1024 wc
08430     40 00 90 3D |  if_ae	jmp	#LR__0755
08434     36 00 00 FF 
08438     AC 65 06 F1 | 	add	objptr, ##28076
0843c     32 BB 02 FB | 	rdlong	local11, objptr
08440     04 BA 66 F0 | 	shl	local11, #4
08444     20 00 00 FF 
08448     10 64 86 F1 | 	sub	objptr, ##16400
0844c     32 BB 02 F1 | 	add	local11, objptr
08450     5D B3 62 FC | 	wrlong	local07, local11
08454     20 00 00 FF 
08458     10 64 06 F1 | 	add	objptr, ##16400
0845c     32 B7 02 FB | 	rdlong	local09, objptr
08460     5B AF 02 F6 | 	mov	local05, local09
08464     01 B6 06 F1 | 	add	local09, #1
08468     32 B7 62 FC | 	wrlong	local09, objptr
0846c     36 00 00 FF 
08470     AC 65 86 F1 | 	sub	objptr, ##28076
08474                 | LR__0755
08474                 | ' if varnum>=maxvars then
08474     36 00 00 FF 
08478     AC 65 06 F1 | 	add	objptr, ##28076
0847c     32 B7 02 FB | 	rdlong	local09, objptr
08480     36 00 00 FF 
08484     AC 65 86 F1 | 	sub	objptr, ##28076
08488     02 00 00 FF 
0848c     00 B6 56 F2 | 	cmps	local09, ##1024 wc
08490     2D B0 06 36 |  if_ae	mov	local06, #45
08494     BC 01 90 3D |  if_ae	jmp	#LR__0760
08498     57 A7 02 F6 | 	mov	local01, local05
0849c     17 AA 06 F6 | 	mov	local03, #23
084a0     53 B7 02 F6 | 	mov	local09, local01
084a4     54 BD 02 F6 | 	mov	local12, local02
084a8     55 A7 02 F6 | 	mov	local01, local03
084ac     4C 00 00 FF 
084b0     20 64 06 F1 | 	add	objptr, ##38944
084b4     32 BB 02 FB | 	rdlong	local11, objptr
084b8     5D B9 02 F6 | 	mov	local10, local11
084bc     01 B8 66 F0 | 	shl	local10, #1
084c0     5D B9 02 F1 | 	add	local10, local11
084c4     02 B8 66 F0 | 	shl	local10, #2
084c8     03 00 00 FF 
084cc     00 64 86 F1 | 	sub	objptr, ##1536
084d0     32 B9 02 F1 | 	add	local10, objptr
084d4     5C B7 62 FC | 	wrlong	local09, local10
084d8     03 00 00 FF 
084dc     00 64 06 F1 | 	add	objptr, ##1536
084e0     32 B7 02 FB | 	rdlong	local09, objptr
084e4     5B BB 02 F6 | 	mov	local11, local09
084e8     01 BA 66 F0 | 	shl	local11, #1
084ec     5B BB 02 F1 | 	add	local11, local09
084f0     02 BA 66 F0 | 	shl	local11, #2
084f4     03 00 00 FF 
084f8     00 64 86 F1 | 	sub	objptr, ##1536
084fc     32 BB 02 F1 | 	add	local11, objptr
08500     04 BA 06 F1 | 	add	local11, #4
08504     5D BD 62 FC | 	wrlong	local12, local11
08508     03 00 00 FF 
0850c     00 64 06 F1 | 	add	objptr, ##1536
08510     32 B7 02 FB | 	rdlong	local09, objptr
08514     5B BD 02 F6 | 	mov	local12, local09
08518     01 BC 66 F0 | 	shl	local12, #1
0851c     5B BD 02 F1 | 	add	local12, local09
08520     02 BC 66 F0 | 	shl	local12, #2
08524     03 00 00 FF 
08528     00 64 86 F1 | 	sub	objptr, ##1536
0852c     32 BD 02 F1 | 	add	local12, objptr
08530     08 BC 06 F1 | 	add	local12, #8
08534     5E A7 62 FC | 	wrlong	local01, local12
08538     03 00 00 FF 
0853c     00 64 06 F1 | 	add	objptr, ##1536
08540     32 B7 02 FB | 	rdlong	local09, objptr
08544     01 B6 06 F1 | 	add	local09, #1
08548     32 B7 62 FC | 	wrlong	local09, objptr
0854c     4C 00 00 FF 
08550     20 64 86 F1 | 	sub	objptr, ##38944
08554                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
08554                 | '   compiledline(lineptr)=t1:  lineptr+=1 
08554                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
08554     03 AC 0E F2 | 	cmp	local04, #3 wz
08558     04 AC 0E 52 |  if_ne	cmp	local04, #4 wz
0855c     38 00 90 5D |  if_ne	jmp	#LR__0756
08560     4C 00 00 FF 
08564     20 64 06 F1 | 	add	objptr, ##38944
08568     32 BD 02 FB | 	rdlong	local12, objptr
0856c     5E A7 02 F6 | 	mov	local01, local12
08570     01 A6 66 F0 | 	shl	local01, #1
08574     5E A7 02 F1 | 	add	local01, local12
08578     02 A6 66 F0 | 	shl	local01, #2
0857c     03 00 00 FF 
08580     00 64 86 F1 | 	sub	objptr, ##1536
08584     32 A7 02 F1 | 	add	local01, objptr
08588     08 A6 06 F1 | 	add	local01, #8
0858c     53 FD 6B FC | 	wrlong	#510, local01
08590     49 00 00 FF 
08594     20 64 86 F1 | 	sub	objptr, ##37408
08598                 | LR__0756
08598                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08598     4C 00 00 FF 
0859c     20 64 06 F1 | 	add	objptr, ##38944
085a0     32 B9 02 FB | 	rdlong	local10, objptr
085a4     4C 00 00 FF 
085a8     20 64 86 F1 | 	sub	objptr, ##38944
085ac     D7 52 48 FB | 	callpa	#(@LR__0759-@LR__0757)>>2,fcache_load_ptr_
085b0                 | LR__0757
085b0     5C BD 02 F6 | 	mov	local12, local10
085b4     01 BC 66 F0 | 	shl	local12, #1
085b8     5C BD 02 F1 | 	add	local12, local10
085bc     02 BC 66 F0 | 	shl	local12, #2
085c0     32 A7 02 F6 | 	mov	local01, objptr
085c4     49 00 00 FF 
085c8     20 A6 06 F1 | 	add	local01, ##37408
085cc     53 BD 02 F1 | 	add	local12, local01
085d0     08 BC 06 F1 | 	add	local12, #8
085d4     5E BD 02 FB | 	rdlong	local12, local12
085d8     9B BC 0E F2 | 	cmp	local12, #155 wz
085dc     68 00 90 5D |  if_ne	jmp	#LR__0758
085e0     5C BD 02 F6 | 	mov	local12, local10
085e4     01 BC 86 F1 | 	sub	local12, #1
085e8     5E A7 02 F6 | 	mov	local01, local12
085ec     01 A6 66 F0 | 	shl	local01, #1
085f0     5E A7 02 F1 | 	add	local01, local12
085f4     02 A6 66 F0 | 	shl	local01, #2
085f8     32 BD 02 F6 | 	mov	local12, objptr
085fc     49 00 00 FF 
08600     20 BC 06 F1 | 	add	local12, ##37408
08604     5E A7 02 F1 | 	add	local01, local12
08608     08 A6 06 F1 | 	add	local01, #8
0860c     53 A7 02 FB | 	rdlong	local01, local01
08610     11 A6 0E F2 | 	cmp	local01, #17 wz
08614     30 00 90 5D |  if_ne	jmp	#LR__0758
08618     5C BD 02 F6 | 	mov	local12, local10
0861c     01 BC 86 F1 | 	sub	local12, #1
08620     5E A7 02 F6 | 	mov	local01, local12
08624     01 A6 66 F0 | 	shl	local01, #1
08628     5E A7 02 F1 | 	add	local01, local12
0862c     02 A6 66 F0 | 	shl	local01, #2
08630     32 BD 02 F6 | 	mov	local12, objptr
08634     49 00 00 FF 
08638     20 BC 06 F1 | 	add	local12, ##37408
0863c     5E A7 02 F1 | 	add	local01, local12
08640     08 A6 06 F1 | 	add	local01, #8
08644     53 25 68 FC | 	wrlong	#18, local01
08648                 | LR__0758
08648     01 B8 86 F1 | 	sub	local10, #1
0864c     01 B8 56 F2 | 	cmps	local10, #1 wc
08650     5C FF 9F 3D |  if_ae	jmp	#LR__0757
08654                 | LR__0759
08654                 | LR__0760
08654                 | ' return err
08654     58 7B 02 F6 | 	mov	result1, local06
08658     E7 F0 03 F6 | 	mov	ptra, fp
0865c     F2 00 A0 FD | 	call	#popregs_
08660                 | _compile_immediate_assign_ret
08660     2D 00 64 FD | 	ret
08664                 | 
08664                 | ' 
08664                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
08664                 | ' 
08664                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
08664                 | _compile
08664     03 CA 05 F6 | 	mov	COUNT_, #3
08668     E8 00 A0 FD | 	call	#pushregs_
0866c     49 A7 02 F6 | 	mov	local01, arg01
08670     4B A9 02 F6 | 	mov	local02, arg03
08674     49 00 00 FF 
08678     20 64 06 F1 | 	add	objptr, ##37408
0867c     32 A7 62 FC | 	wrlong	local01, objptr
08680     04 64 06 F1 | 	add	objptr, #4
08684     32 95 62 FC | 	wrlong	arg02, objptr
08688     49 00 00 FF 
0868c     24 64 86 F1 | 	sub	objptr, ##37412
08690     54 93 02 F6 | 	mov	arg01, local02
08694     01 92 06 F1 | 	add	arg01, #1
08698     53 95 02 F6 | 	mov	arg02, local01
0869c     40 F2 BF FD | 	call	#_compile_immediate
086a0     3D AB 0A F6 | 	mov	local03, result1 wz
086a4                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
086a4                 | ' ucompiledline(0)=alinemajor
086a4                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
086a4                 | ' 
086a4                 | ' ' cont: 
086a4                 | ' ' 0 - this is the first part of the line that will continue
086a4                 | ' ' 1 - this is the continuation of the line
086a4                 | ' ' 2 - this is the last continued line
086a4                 | ' ' 3 - this is the one and only part
086a4                 | ' 
086a4                 | ' err=compile_immediate(cont+1,alinemajor) 
086a4                 | ' if err=0 andalso alinemajor>0 then
086a4     74 00 90 5D |  if_ne	jmp	#LR__0775
086a8     01 A6 16 F2 | 	cmp	local01, #1 wc
086ac     6C 00 90 CD |  if_b	jmp	#LR__0775
086b0                 | '   if cont=3 orelse cont=2 then 
086b0     03 A8 0E F2 | 	cmp	local02, #3 wz
086b4     02 A8 0E 52 |  if_ne	cmp	local02, #2 wz
086b8     60 00 90 5D |  if_ne	jmp	#LR__0774
086bc                 | '     if alinemajor >lastline then 
086bc     4C 00 00 FF 
086c0     30 64 06 F1 | 	add	objptr, ##38960
086c4     32 95 02 FB | 	rdlong	arg02, objptr
086c8     4C 00 00 FF 
086cc     30 64 86 F1 | 	sub	objptr, ##38960
086d0     4A A7 1A F2 | 	cmp	local01, arg02 wcz
086d4     0C 00 90 ED |  if_be	jmp	#LR__0770
086d8     53 93 02 F6 | 	mov	arg01, local01
086dc     38 F1 BF FD | 	call	#_add_line_at_end
086e0     38 00 90 FD | 	jmp	#LR__0773
086e4                 | LR__0770
086e4     53 93 02 F6 | 	mov	arg01, local01
086e8     A0 EB BF FD | 	call	#_deleteline
086ec                 | '       deleteline(alinemajor)  
086ec                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
086ec     4C 00 00 FF 
086f0     30 64 06 F1 | 	add	objptr, ##38960
086f4     32 95 02 FB | 	rdlong	arg02, objptr
086f8     4C 00 00 FF 
086fc     30 64 86 F1 | 	sub	objptr, ##38960
08700     4A A7 1A F2 | 	cmp	local01, arg02 wcz
08704     0C 00 90 ED |  if_be	jmp	#LR__0771
08708     53 93 02 F6 | 	mov	arg01, local01
0870c     08 F1 BF FD | 	call	#_add_line_at_end
08710     08 00 90 FD | 	jmp	#LR__0772
08714                 | LR__0771
08714     53 93 02 F6 | 	mov	arg01, local01
08718     40 EF BF FD | 	call	#_insertline
0871c                 | LR__0772
0871c                 | LR__0773
0871c                 | LR__0774
0871c                 | LR__0775
0871c                 | ' return err
0871c     55 7B 02 F6 | 	mov	result1, local03
08720     E7 F0 03 F6 | 	mov	ptra, fp
08724     F2 00 A0 FD | 	call	#popregs_
08728                 | _compile_ret
08728     2D 00 64 FD | 	ret
0872c                 | 
0872c                 | ' 
0872c                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
0872c                 | ' 
0872c                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
0872c                 | _compile_assign
0872c     03 CA 05 F6 | 	mov	COUNT_, #3
08730     E8 00 A0 FD | 	call	#pushregs_
08734     49 A7 02 F6 | 	mov	local01, arg01
08738     4B A9 02 F6 | 	mov	local02, arg03
0873c     49 00 00 FF 
08740     20 64 06 F1 | 	add	objptr, ##37408
08744     32 A7 62 FC | 	wrlong	local01, objptr
08748     04 64 06 F1 | 	add	objptr, #4
0874c     32 95 62 FC | 	wrlong	arg02, objptr
08750     49 00 00 FF 
08754     24 64 86 F1 | 	sub	objptr, ##37412
08758     54 93 02 F6 | 	mov	arg01, local02
0875c     01 92 06 F1 | 	add	arg01, #1
08760     64 FB BF FD | 	call	#_compile_immediate_assign
08764     3D AB 02 F6 | 	mov	local03, result1
08768                 | ' 
08768                 | ' ucompiledline(0)=alinemajor
08768                 | ' ucompiledline(1)=alineminor
08768                 | ' 
08768                 | ' err=compile_immediate_assign(cont+1) 
08768                 | ' if alinemajor>0 then
08768     01 A6 16 F2 | 	cmp	local01, #1 wc
0876c     6C 00 90 CD |  if_b	jmp	#LR__0785
08770                 | '   if cont=3 orelse cont=2 then 
08770     03 A8 0E F2 | 	cmp	local02, #3 wz
08774     02 A8 0E 52 |  if_ne	cmp	local02, #2 wz
08778     60 00 90 5D |  if_ne	jmp	#LR__0784
0877c                 | '     if alinemajor >lastline then 
0877c     4C 00 00 FF 
08780     30 64 06 F1 | 	add	objptr, ##38960
08784     32 95 02 FB | 	rdlong	arg02, objptr
08788     4C 00 00 FF 
0878c     30 64 86 F1 | 	sub	objptr, ##38960
08790     4A A7 1A F2 | 	cmp	local01, arg02 wcz
08794     0C 00 90 ED |  if_be	jmp	#LR__0780
08798     53 93 02 F6 | 	mov	arg01, local01
0879c     78 F0 BF FD | 	call	#_add_line_at_end
087a0     38 00 90 FD | 	jmp	#LR__0783
087a4                 | LR__0780
087a4     53 93 02 F6 | 	mov	arg01, local01
087a8     E0 EA BF FD | 	call	#_deleteline
087ac                 | '       deleteline(alinemajor)  
087ac                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
087ac     4C 00 00 FF 
087b0     30 64 06 F1 | 	add	objptr, ##38960
087b4     32 95 02 FB | 	rdlong	arg02, objptr
087b8     4C 00 00 FF 
087bc     30 64 86 F1 | 	sub	objptr, ##38960
087c0     4A A7 1A F2 | 	cmp	local01, arg02 wcz
087c4     0C 00 90 ED |  if_be	jmp	#LR__0781
087c8     53 93 02 F6 | 	mov	arg01, local01
087cc     48 F0 BF FD | 	call	#_add_line_at_end
087d0     08 00 90 FD | 	jmp	#LR__0782
087d4                 | LR__0781
087d4     53 93 02 F6 | 	mov	arg01, local01
087d8     80 EE BF FD | 	call	#_insertline
087dc                 | LR__0782
087dc                 | LR__0783
087dc                 | LR__0784
087dc                 | LR__0785
087dc                 | ' return err
087dc     55 7B 02 F6 | 	mov	result1, local03
087e0     E7 F0 03 F6 | 	mov	ptra, fp
087e4     F2 00 A0 FD | 	call	#popregs_
087e8                 | _compile_assign_ret
087e8     2D 00 64 FD | 	ret
087ec                 | 
087ec                 | ' 
087ec                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
087ec                 | ' 
087ec                 | ' function compile_fun_2p() as ulong
087ec                 | _compile_fun_2p
087ec     01 CA 05 F6 | 	mov	COUNT_, #1
087f0     E8 00 A0 FD | 	call	#pushregs_
087f4     60 36 B0 FD | 	call	#_expr
087f8     3D A7 02 F6 | 	mov	local01, result1
087fc                 | ' err=expr() : if err>0 then return err
087fc     01 A6 16 F2 | 	cmp	local01, #1 wc
08800     53 7B 02 36 |  if_ae	mov	result1, local01
08804     60 00 90 3D |  if_ae	jmp	#LR__0790
08808                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08808     38 00 00 FF 
0880c     E8 65 06 F1 | 	add	objptr, ##29160
08810     32 A7 02 FB | 	rdlong	local01, objptr
08814     03 A6 66 F0 | 	shl	local01, #3
08818     02 00 00 FF 
0881c     38 64 86 F1 | 	sub	objptr, ##1080
08820     32 A7 02 F1 | 	add	local01, objptr
08824     04 A6 06 F1 | 	add	local01, #4
08828     53 A7 02 FB | 	rdlong	local01, local01
0882c     11 A6 0E F2 | 	cmp	local01, #17 wz
08830     36 00 00 FF 
08834     B0 65 86 F1 | 	sub	objptr, ##28080
08838     15 7A 06 56 |  if_ne	mov	result1, #21
0883c     28 00 90 5D |  if_ne	jmp	#LR__0790
08840     38 00 00 FF 
08844     E8 65 06 F1 | 	add	objptr, ##29160
08848     32 A7 02 FB | 	rdlong	local01, objptr
0884c     01 A6 06 F1 | 	add	local01, #1
08850     32 A7 62 FC | 	wrlong	local01, objptr
08854     38 00 00 FF 
08858     E8 65 86 F1 | 	sub	objptr, ##29160
0885c     F8 35 B0 FD | 	call	#_expr
08860                 | ' err=expr() : if err>0 then return err
08860     01 7A 16 F2 | 	cmp	result1, #1 wc
08864                 | ' return 0
08864     00 7A 06 C6 |  if_b	mov	result1, #0
08868                 | LR__0790
08868     E7 F0 03 F6 | 	mov	ptra, fp
0886c     F2 00 A0 FD | 	call	#popregs_
08870                 | _compile_fun_2p_ret
08870     2D 00 64 FD | 	ret
08874                 | 
08874                 | ' 
08874                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08874                 | ' 
08874                 | ' function compile_fun_3p() as ulong
08874                 | _compile_fun_3p
08874     01 CA 05 F6 | 	mov	COUNT_, #1
08878     E8 00 A0 FD | 	call	#pushregs_
0887c     D8 35 B0 FD | 	call	#_expr
08880     3D A7 02 F6 | 	mov	local01, result1
08884                 | ' err=expr() : if err>0 then return err
08884     01 A6 16 F2 | 	cmp	local01, #1 wc
08888     53 7B 02 36 |  if_ae	mov	result1, local01
0888c     C8 00 90 3D |  if_ae	jmp	#LR__0800
08890                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08890     38 00 00 FF 
08894     E8 65 06 F1 | 	add	objptr, ##29160
08898     32 A7 02 FB | 	rdlong	local01, objptr
0889c     03 A6 66 F0 | 	shl	local01, #3
088a0     02 00 00 FF 
088a4     38 64 86 F1 | 	sub	objptr, ##1080
088a8     32 A7 02 F1 | 	add	local01, objptr
088ac     04 A6 06 F1 | 	add	local01, #4
088b0     53 A7 02 FB | 	rdlong	local01, local01
088b4     11 A6 0E F2 | 	cmp	local01, #17 wz
088b8     36 00 00 FF 
088bc     B0 65 86 F1 | 	sub	objptr, ##28080
088c0     15 7A 06 56 |  if_ne	mov	result1, #21
088c4     90 00 90 5D |  if_ne	jmp	#LR__0800
088c8     38 00 00 FF 
088cc     E8 65 06 F1 | 	add	objptr, ##29160
088d0     32 A7 02 FB | 	rdlong	local01, objptr
088d4     01 A6 06 F1 | 	add	local01, #1
088d8     32 A7 62 FC | 	wrlong	local01, objptr
088dc     38 00 00 FF 
088e0     E8 65 86 F1 | 	sub	objptr, ##29160
088e4     70 35 B0 FD | 	call	#_expr
088e8     3D A7 02 F6 | 	mov	local01, result1
088ec                 | ' err=expr() : if err>0 then return err
088ec     01 A6 16 F2 | 	cmp	local01, #1 wc
088f0     53 7B 02 36 |  if_ae	mov	result1, local01
088f4     60 00 90 3D |  if_ae	jmp	#LR__0800
088f8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
088f8     38 00 00 FF 
088fc     E8 65 06 F1 | 	add	objptr, ##29160
08900     32 A7 02 FB | 	rdlong	local01, objptr
08904     03 A6 66 F0 | 	shl	local01, #3
08908     02 00 00 FF 
0890c     38 64 86 F1 | 	sub	objptr, ##1080
08910     32 A7 02 F1 | 	add	local01, objptr
08914     04 A6 06 F1 | 	add	local01, #4
08918     53 A7 02 FB | 	rdlong	local01, local01
0891c     11 A6 0E F2 | 	cmp	local01, #17 wz
08920     36 00 00 FF 
08924     B0 65 86 F1 | 	sub	objptr, ##28080
08928     15 7A 06 56 |  if_ne	mov	result1, #21
0892c     28 00 90 5D |  if_ne	jmp	#LR__0800
08930     38 00 00 FF 
08934     E8 65 06 F1 | 	add	objptr, ##29160
08938     32 A7 02 FB | 	rdlong	local01, objptr
0893c     01 A6 06 F1 | 	add	local01, #1
08940     32 A7 62 FC | 	wrlong	local01, objptr
08944     38 00 00 FF 
08948     E8 65 86 F1 | 	sub	objptr, ##29160
0894c     08 35 B0 FD | 	call	#_expr
08950                 | ' err=expr() : if err>0 then return err
08950     01 7A 16 F2 | 	cmp	result1, #1 wc
08954                 | ' return 0
08954     00 7A 06 C6 |  if_b	mov	result1, #0
08958                 | LR__0800
08958     E7 F0 03 F6 | 	mov	ptra, fp
0895c     F2 00 A0 FD | 	call	#popregs_
08960                 | _compile_fun_3p_ret
08960     2D 00 64 FD | 	ret
08964                 | 
08964                 | ' 
08964                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08964                 | ' 
08964                 | ' function compile_fun_4p() as ulong
08964                 | _compile_fun_4p
08964     01 CA 05 F6 | 	mov	COUNT_, #1
08968     E8 00 A0 FD | 	call	#pushregs_
0896c     E8 34 B0 FD | 	call	#_expr
08970     3D A7 02 F6 | 	mov	local01, result1
08974                 | ' err=expr() : if err>0 then return err
08974     01 A6 16 F2 | 	cmp	local01, #1 wc
08978     53 7B 02 36 |  if_ae	mov	result1, local01
0897c     30 01 90 3D |  if_ae	jmp	#LR__0810
08980                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08980     38 00 00 FF 
08984     E8 65 06 F1 | 	add	objptr, ##29160
08988     32 A7 02 FB | 	rdlong	local01, objptr
0898c     03 A6 66 F0 | 	shl	local01, #3
08990     02 00 00 FF 
08994     38 64 86 F1 | 	sub	objptr, ##1080
08998     32 A7 02 F1 | 	add	local01, objptr
0899c     04 A6 06 F1 | 	add	local01, #4
089a0     53 A7 02 FB | 	rdlong	local01, local01
089a4     11 A6 0E F2 | 	cmp	local01, #17 wz
089a8     36 00 00 FF 
089ac     B0 65 86 F1 | 	sub	objptr, ##28080
089b0     15 7A 06 56 |  if_ne	mov	result1, #21
089b4     F8 00 90 5D |  if_ne	jmp	#LR__0810
089b8     38 00 00 FF 
089bc     E8 65 06 F1 | 	add	objptr, ##29160
089c0     32 A7 02 FB | 	rdlong	local01, objptr
089c4     01 A6 06 F1 | 	add	local01, #1
089c8     32 A7 62 FC | 	wrlong	local01, objptr
089cc     38 00 00 FF 
089d0     E8 65 86 F1 | 	sub	objptr, ##29160
089d4     80 34 B0 FD | 	call	#_expr
089d8     3D A7 02 F6 | 	mov	local01, result1
089dc                 | ' err=expr() : if err>0 then return err
089dc     01 A6 16 F2 | 	cmp	local01, #1 wc
089e0     53 7B 02 36 |  if_ae	mov	result1, local01
089e4     C8 00 90 3D |  if_ae	jmp	#LR__0810
089e8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
089e8     38 00 00 FF 
089ec     E8 65 06 F1 | 	add	objptr, ##29160
089f0     32 A7 02 FB | 	rdlong	local01, objptr
089f4     03 A6 66 F0 | 	shl	local01, #3
089f8     02 00 00 FF 
089fc     38 64 86 F1 | 	sub	objptr, ##1080
08a00     32 A7 02 F1 | 	add	local01, objptr
08a04     04 A6 06 F1 | 	add	local01, #4
08a08     53 A7 02 FB | 	rdlong	local01, local01
08a0c     11 A6 0E F2 | 	cmp	local01, #17 wz
08a10     36 00 00 FF 
08a14     B0 65 86 F1 | 	sub	objptr, ##28080
08a18     15 7A 06 56 |  if_ne	mov	result1, #21
08a1c     90 00 90 5D |  if_ne	jmp	#LR__0810
08a20     38 00 00 FF 
08a24     E8 65 06 F1 | 	add	objptr, ##29160
08a28     32 A7 02 FB | 	rdlong	local01, objptr
08a2c     01 A6 06 F1 | 	add	local01, #1
08a30     32 A7 62 FC | 	wrlong	local01, objptr
08a34     38 00 00 FF 
08a38     E8 65 86 F1 | 	sub	objptr, ##29160
08a3c     18 34 B0 FD | 	call	#_expr
08a40     3D A7 02 F6 | 	mov	local01, result1
08a44                 | ' err=expr() : if err>0 then return err
08a44     01 A6 16 F2 | 	cmp	local01, #1 wc
08a48     53 7B 02 36 |  if_ae	mov	result1, local01
08a4c     60 00 90 3D |  if_ae	jmp	#LR__0810
08a50                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08a50     38 00 00 FF 
08a54     E8 65 06 F1 | 	add	objptr, ##29160
08a58     32 A7 02 FB | 	rdlong	local01, objptr
08a5c     03 A6 66 F0 | 	shl	local01, #3
08a60     02 00 00 FF 
08a64     38 64 86 F1 | 	sub	objptr, ##1080
08a68     32 A7 02 F1 | 	add	local01, objptr
08a6c     04 A6 06 F1 | 	add	local01, #4
08a70     53 A7 02 FB | 	rdlong	local01, local01
08a74     11 A6 0E F2 | 	cmp	local01, #17 wz
08a78     36 00 00 FF 
08a7c     B0 65 86 F1 | 	sub	objptr, ##28080
08a80     15 7A 06 56 |  if_ne	mov	result1, #21
08a84     28 00 90 5D |  if_ne	jmp	#LR__0810
08a88     38 00 00 FF 
08a8c     E8 65 06 F1 | 	add	objptr, ##29160
08a90     32 A7 02 FB | 	rdlong	local01, objptr
08a94     01 A6 06 F1 | 	add	local01, #1
08a98     32 A7 62 FC | 	wrlong	local01, objptr
08a9c     38 00 00 FF 
08aa0     E8 65 86 F1 | 	sub	objptr, ##29160
08aa4     B0 33 B0 FD | 	call	#_expr
08aa8                 | ' err=expr() : if err>0 then return err
08aa8     01 7A 16 F2 | 	cmp	result1, #1 wc
08aac                 | ' return 0
08aac     00 7A 06 C6 |  if_b	mov	result1, #0
08ab0                 | LR__0810
08ab0     E7 F0 03 F6 | 	mov	ptra, fp
08ab4     F2 00 A0 FD | 	call	#popregs_
08ab8                 | _compile_fun_4p_ret
08ab8     2D 00 64 FD | 	ret
08abc                 | 
08abc                 | ' 
08abc                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08abc                 | ' 
08abc                 | ' function compile_fun_varp() as ulong,ulong 
08abc                 | _compile_fun_varp
08abc     03 CA 05 F6 | 	mov	COUNT_, #3
08ac0     E8 00 A0 FD | 	call	#pushregs_
08ac4     00 A6 06 F6 | 	mov	local01, #0
08ac8                 | ' 
08ac8                 | ' i=0 : err=0
08ac8                 | ' if lparts(ct).token<>token_end then
08ac8     38 00 00 FF 
08acc     E8 65 06 F1 | 	add	objptr, ##29160
08ad0     32 A9 02 FB | 	rdlong	local02, objptr
08ad4     03 A8 66 F0 | 	shl	local02, #3
08ad8     02 00 00 FF 
08adc     38 64 86 F1 | 	sub	objptr, ##1080
08ae0     32 A9 02 F1 | 	add	local02, objptr
08ae4     04 A8 06 F1 | 	add	local02, #4
08ae8     54 A9 02 FB | 	rdlong	local02, local02
08aec     FE A9 0E F2 | 	cmp	local02, #510 wz
08af0     36 00 00 FF 
08af4     B0 65 86 F1 | 	sub	objptr, ##28080
08af8     88 00 90 AD |  if_e	jmp	#LR__0821
08afc                 | '   do
08afc                 | LR__0820
08afc     58 33 B0 FD | 	call	#_expr
08b00     01 A6 06 F1 | 	add	local01, #1
08b04                 | '     expr()
08b04                 | '     i+=1
08b04                 | '     if lparts(ct).token=token_comma then ct+=1
08b04     38 00 00 FF 
08b08     E8 65 06 F1 | 	add	objptr, ##29160
08b0c     32 A9 02 FB | 	rdlong	local02, objptr
08b10     03 A8 66 F0 | 	shl	local02, #3
08b14     02 00 00 FF 
08b18     38 64 86 F1 | 	sub	objptr, ##1080
08b1c     32 A9 02 F1 | 	add	local02, objptr
08b20     04 A8 06 F1 | 	add	local02, #4
08b24     54 A9 02 FB | 	rdlong	local02, local02
08b28     11 A8 0E F2 | 	cmp	local02, #17 wz
08b2c     36 00 00 FF 
08b30     B0 65 86 F1 | 	sub	objptr, ##28080
08b34     38 00 00 AF 
08b38     E8 65 06 A1 |  if_e	add	objptr, ##29160
08b3c     32 AB 02 AB |  if_e	rdlong	local03, objptr
08b40     01 AA 06 A1 |  if_e	add	local03, #1
08b44     32 AB 62 AC |  if_e	wrlong	local03, objptr
08b48     38 00 00 AF 
08b4c     E8 65 86 A1 |  if_e	sub	objptr, ##29160
08b50                 | '     if lparts(ct).token=token_end then exit loop
08b50     38 00 00 FF 
08b54     E8 65 06 F1 | 	add	objptr, ##29160
08b58     32 A9 02 FB | 	rdlong	local02, objptr
08b5c     03 A8 66 F0 | 	shl	local02, #3
08b60     02 00 00 FF 
08b64     38 64 86 F1 | 	sub	objptr, ##1080
08b68     32 A9 02 F1 | 	add	local02, objptr
08b6c     04 A8 06 F1 | 	add	local02, #4
08b70     54 A9 02 FB | 	rdlong	local02, local02
08b74     FE A9 0E F2 | 	cmp	local02, #510 wz
08b78     36 00 00 FF 
08b7c     B0 65 86 F1 | 	sub	objptr, ##28080
08b80     78 FF 9F 5D |  if_ne	jmp	#LR__0820
08b84                 | LR__0821
08b84                 | ' return i,err
08b84     53 7B 02 F6 | 	mov	result1, local01
08b88     00 7C 06 F6 | 	mov	result2, #0
08b8c     E7 F0 03 F6 | 	mov	ptra, fp
08b90     F2 00 A0 FD | 	call	#popregs_
08b94                 | _compile_fun_varp_ret
08b94     2D 00 64 FD | 	ret
08b98                 | 
08b98                 | ' 
08b98                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08b98                 | ' 
08b98                 | ' function compile_read() as ulong,ulong 
08b98                 | _compile_read
08b98     04 CA 05 F6 | 	mov	COUNT_, #4
08b9c     E8 00 A0 FD | 	call	#pushregs_
08ba0     00 A6 06 F6 | 	mov	local01, #0
08ba4                 | ' 
08ba4                 | ' i=0 : err=0
08ba4                 | ' if lparts(ct).token<>token_end then
08ba4     38 00 00 FF 
08ba8     E8 65 06 F1 | 	add	objptr, ##29160
08bac     32 A9 02 FB | 	rdlong	local02, objptr
08bb0     03 A8 66 F0 | 	shl	local02, #3
08bb4     02 00 00 FF 
08bb8     38 64 86 F1 | 	sub	objptr, ##1080
08bbc     32 A9 02 F1 | 	add	local02, objptr
08bc0     04 A8 06 F1 | 	add	local02, #4
08bc4     54 A9 02 FB | 	rdlong	local02, local02
08bc8     FE A9 0E F2 | 	cmp	local02, #510 wz
08bcc     36 00 00 FF 
08bd0     B0 65 86 F1 | 	sub	objptr, ##28080
08bd4     98 00 90 AD |  if_e	jmp	#LR__0831
08bd8                 | '   do
08bd8                 | LR__0830
08bd8     EC 2E B0 FD | 	call	#_getaddr
08bdc     3D AB 02 F6 | 	mov	local03, result1
08be0     38 00 00 FF 
08be4     E8 65 06 F1 | 	add	objptr, ##29160
08be8     32 A9 02 FB | 	rdlong	local02, objptr
08bec     01 A8 06 F1 | 	add	local02, #1
08bf0     32 A9 62 FC | 	wrlong	local02, objptr
08bf4     01 A6 06 F1 | 	add	local01, #1
08bf8                 | '     err=getaddr() :ct+=1
08bf8                 | '     i+=1 
08bf8                 | '     if lparts(ct).token=token_comma then ct+=1 
08bf8     03 A8 66 F0 | 	shl	local02, #3
08bfc     02 00 00 FF 
08c00     38 64 86 F1 | 	sub	objptr, ##1080
08c04     32 A9 02 F1 | 	add	local02, objptr
08c08     04 A8 06 F1 | 	add	local02, #4
08c0c     54 A9 02 FB | 	rdlong	local02, local02
08c10     11 A8 0E F2 | 	cmp	local02, #17 wz
08c14     36 00 00 FF 
08c18     B0 65 86 F1 | 	sub	objptr, ##28080
08c1c     38 00 00 AF 
08c20     E8 65 06 A1 |  if_e	add	objptr, ##29160
08c24     32 AD 02 AB |  if_e	rdlong	local04, objptr
08c28     01 AC 06 A1 |  if_e	add	local04, #1
08c2c     32 AD 62 AC |  if_e	wrlong	local04, objptr
08c30     38 00 00 AF 
08c34     E8 65 86 A1 |  if_e	sub	objptr, ##29160
08c38                 | '     if lparts(ct).token=token_end then exit loop
08c38     38 00 00 FF 
08c3c     E8 65 06 F1 | 	add	objptr, ##29160
08c40     32 A9 02 FB | 	rdlong	local02, objptr
08c44     03 A8 66 F0 | 	shl	local02, #3
08c48     02 00 00 FF 
08c4c     38 64 86 F1 | 	sub	objptr, ##1080
08c50     32 A9 02 F1 | 	add	local02, objptr
08c54     04 A8 06 F1 | 	add	local02, #4
08c58     54 A9 02 FB | 	rdlong	local02, local02
08c5c     FE A9 0E F2 | 	cmp	local02, #510 wz
08c60     36 00 00 FF 
08c64     B0 65 86 F1 | 	sub	objptr, ##28080
08c68     08 00 90 AD |  if_e	jmp	#LR__0832
08c6c     68 FF 9F FD | 	jmp	#LR__0830
08c70                 | LR__0831
08c70     36 AA 06 F6 | 	mov	local03, #54
08c74                 | LR__0832
08c74                 | ' return i,err
08c74     53 7B 02 F6 | 	mov	result1, local01
08c78     55 7D 02 F6 | 	mov	result2, local03
08c7c     E7 F0 03 F6 | 	mov	ptra, fp
08c80     F2 00 A0 FD | 	call	#popregs_
08c84                 | _compile_read_ret
08c84     2D 00 64 FD | 	ret
08c88                 | 
08c88                 | ' 
08c88                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08c88                 | ' 
08c88                 | ' function compile_input() as ulong,ulong 
08c88                 | _compile_input
08c88     0F CA 05 F6 | 	mov	COUNT_, #15
08c8c     E8 00 A0 FD | 	call	#pushregs_
08c90                 | ' 
08c90                 | ' if lparts(ct).token=token_string then
08c90     38 00 00 FF 
08c94     E8 65 06 F1 | 	add	objptr, ##29160
08c98     32 97 02 FB | 	rdlong	arg03, objptr
08c9c     03 96 66 F0 | 	shl	arg03, #3
08ca0     02 00 00 FF 
08ca4     38 64 86 F1 | 	sub	objptr, ##1080
08ca8     32 97 02 F1 | 	add	arg03, objptr
08cac     04 96 06 F1 | 	add	arg03, #4
08cb0     4B 7D 02 FB | 	rdlong	result2, arg03
08cb4     01 00 00 FF 
08cb8     03 7C 0E F2 | 	cmp	result2, ##515 wz
08cbc     36 00 00 FF 
08cc0     B0 65 86 F1 | 	sub	objptr, ##28080
08cc4     38 06 90 5D |  if_ne	jmp	#LR__0847
08cc8     38 00 00 FF 
08ccc     E8 65 06 F1 | 	add	objptr, ##29160
08cd0     32 95 02 FB | 	rdlong	arg02, objptr
08cd4     03 94 66 F0 | 	shl	arg02, #3
08cd8     02 00 00 FF 
08cdc     38 64 86 F1 | 	sub	objptr, ##1080
08ce0     32 95 02 F1 | 	add	arg02, objptr
08ce4     4A 93 02 FB | 	rdlong	arg01, arg02
08ce8     36 00 00 FF 
08cec     B0 65 86 F1 | 	sub	objptr, ##28080
08cf0     49 AD 02 F6 | 	mov	local04, arg01
08cf4     D7 06 48 FB | 	callpa	#(@LR__0841-@LR__0840)>>2,fcache_load_ptr_
08cf8                 | LR__0840
08cf8     56 7B CA FA | 	rdbyte	result1, local04 wz
08cfc     01 AC 06 51 |  if_ne	add	local04, #1
08d00     F4 FF 9F 5D |  if_ne	jmp	#LR__0840
08d04                 | LR__0841
08d04     49 AD 82 F1 | 	sub	local04, arg01
08d08     56 7B 02 F6 | 	mov	result1, local04
08d0c     54 00 00 FF 
08d10     CC 64 06 F1 | 	add	objptr, ##43212
08d14     32 7B 62 FC | 	wrlong	result1, objptr
08d18     58 64 86 F1 | 	sub	objptr, #88
08d1c     32 93 02 FB | 	rdlong	arg01, objptr
08d20     3D 93 82 F1 | 	sub	arg01, result1
08d24     04 92 86 F1 | 	sub	arg01, #4
08d28     03 92 26 F5 | 	andn	arg01, #3
08d2c     32 93 62 FC | 	wrlong	arg01, objptr
08d30     58 64 06 F1 | 	add	objptr, #88
08d34     32 95 02 FB | 	rdlong	arg02, objptr
08d38     54 00 00 FF 
08d3c     CC 64 86 F1 | 	sub	objptr, ##43212
08d40     EC 7D B1 FD | 	call	#_pslpoke
08d44                 | '   pslpoke memtop,l
08d44                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08d44     01 AE 06 F6 | 	mov	local05, #1
08d48     54 00 00 FF 
08d4c     CC 64 06 F1 | 	add	objptr, ##43212
08d50     32 B1 02 FB | 	rdlong	local06, objptr
08d54     54 00 00 FF 
08d58     CC 64 86 F1 | 	sub	objptr, ##43212
08d5c     01 B0 06 F1 | 	add	local06, #1
08d60                 | LR__0842
08d60     58 AF 52 F2 | 	cmps	local05, local06 wc
08d64     5C 00 90 3D |  if_ae	jmp	#LR__0843
08d68     54 00 00 FF 
08d6c     74 64 06 F1 | 	add	objptr, ##43124
08d70     32 B3 02 FB | 	rdlong	local07, objptr
08d74     03 B2 06 F1 | 	add	local07, #3
08d78     57 B3 02 F1 | 	add	local07, local05
08d7c     1B 00 00 FF 
08d80     8C 64 86 F1 | 	sub	objptr, ##13964
08d84     32 95 02 FB | 	rdlong	arg02, objptr
08d88     03 94 66 F0 | 	shl	arg02, #3
08d8c     02 00 00 FF 
08d90     38 64 86 F1 | 	sub	objptr, ##1080
08d94     32 95 02 F1 | 	add	arg02, objptr
08d98     4A 93 02 FB | 	rdlong	arg01, arg02
08d9c     57 95 02 F6 | 	mov	arg02, local05
08da0     01 96 06 F6 | 	mov	arg03, #1
08da4     36 00 00 FF 
08da8     B0 65 86 F1 | 	sub	objptr, ##28080
08dac     A0 D3 B1 FD | 	call	#__system__Mid_S
08db0     3D 95 C2 FA | 	rdbyte	arg02, result1
08db4     59 93 02 F6 | 	mov	arg01, local07
08db8     0C 7E B1 FD | 	call	#_pspoke
08dbc     01 AE 06 F1 | 	add	local05, #1
08dc0     9C FF 9F FD | 	jmp	#LR__0842
08dc4                 | LR__0843
08dc4     54 00 00 FF 
08dc8     74 64 06 F1 | 	add	objptr, ##43124
08dcc     32 A7 02 FB | 	rdlong	local01, objptr
08dd0     2B AA 06 F6 | 	mov	local03, #43
08dd4     53 B5 02 F6 | 	mov	local08, local01
08dd8     54 B3 02 F6 | 	mov	local07, local02
08ddc     55 B7 02 F6 | 	mov	local09, local03
08de0     08 00 00 FF 
08de4     54 64 86 F1 | 	sub	objptr, ##4180
08de8     32 B1 02 FB | 	rdlong	local06, objptr
08dec     58 AF 02 F6 | 	mov	local05, local06
08df0     01 AE 66 F0 | 	shl	local05, #1
08df4     58 AF 02 F1 | 	add	local05, local06
08df8     02 AE 66 F0 | 	shl	local05, #2
08dfc     03 00 00 FF 
08e00     00 64 86 F1 | 	sub	objptr, ##1536
08e04     32 AF 02 F1 | 	add	local05, objptr
08e08     57 B5 62 FC | 	wrlong	local08, local05
08e0c     03 00 00 FF 
08e10     00 64 06 F1 | 	add	objptr, ##1536
08e14     32 B5 02 FB | 	rdlong	local08, objptr
08e18     5A B1 02 F6 | 	mov	local06, local08
08e1c     01 B0 66 F0 | 	shl	local06, #1
08e20     5A B1 02 F1 | 	add	local06, local08
08e24     02 B0 66 F0 | 	shl	local06, #2
08e28     03 00 00 FF 
08e2c     00 64 86 F1 | 	sub	objptr, ##1536
08e30     32 B1 02 F1 | 	add	local06, objptr
08e34     04 B0 06 F1 | 	add	local06, #4
08e38     58 B3 62 FC | 	wrlong	local07, local06
08e3c     03 00 00 FF 
08e40     00 64 06 F1 | 	add	objptr, ##1536
08e44     32 B5 02 FB | 	rdlong	local08, objptr
08e48     5A B3 02 F6 | 	mov	local07, local08
08e4c     01 B2 66 F0 | 	shl	local07, #1
08e50     5A B3 02 F1 | 	add	local07, local08
08e54     02 B2 66 F0 | 	shl	local07, #2
08e58     03 00 00 FF 
08e5c     00 64 86 F1 | 	sub	objptr, ##1536
08e60     32 B3 02 F1 | 	add	local07, objptr
08e64     08 B2 06 F1 | 	add	local07, #8
08e68     59 B7 62 FC | 	wrlong	local09, local07
08e6c     03 00 00 FF 
08e70     00 64 06 F1 | 	add	objptr, ##1536
08e74     32 B5 02 FB | 	rdlong	local08, objptr
08e78     01 B4 06 F1 | 	add	local08, #1
08e7c     32 B5 62 FC | 	wrlong	local08, objptr
08e80     13 00 00 FF 
08e84     38 64 86 F1 | 	sub	objptr, ##9784
08e88     32 B5 02 FB | 	rdlong	local08, objptr
08e8c     01 B4 06 F1 | 	add	local08, #1
08e90     32 B5 62 FC | 	wrlong	local08, objptr
08e94                 | '   t1.result.uresult=memtop
08e94                 | '   t1.result_type=result_string2  
08e94                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08e94                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08e94     03 B4 66 F0 | 	shl	local08, #3
08e98     02 00 00 FF 
08e9c     38 64 86 F1 | 	sub	objptr, ##1080
08ea0     32 B5 02 F1 | 	add	local08, objptr
08ea4     04 B4 06 F1 | 	add	local08, #4
08ea8     5A B5 02 FB | 	rdlong	local08, local08
08eac     11 B4 0E F2 | 	cmp	local08, #17 wz
08eb0     36 00 00 FF 
08eb4     B0 65 86 F1 | 	sub	objptr, ##28080
08eb8     60 01 90 5D |  if_ne	jmp	#LR__0844
08ebc     21 AA 06 F6 | 	mov	local03, #33
08ec0     53 B5 02 F6 | 	mov	local08, local01
08ec4     54 B3 02 F6 | 	mov	local07, local02
08ec8     55 B9 02 F6 | 	mov	local10, local03
08ecc     4C 00 00 FF 
08ed0     20 64 06 F1 | 	add	objptr, ##38944
08ed4     32 BB 02 FB | 	rdlong	local11, objptr
08ed8     5D BD 02 F6 | 	mov	local12, local11
08edc     01 BC 66 F0 | 	shl	local12, #1
08ee0     5D BD 02 F1 | 	add	local12, local11
08ee4     02 BC 66 F0 | 	shl	local12, #2
08ee8     03 00 00 FF 
08eec     00 64 86 F1 | 	sub	objptr, ##1536
08ef0     32 BD 02 F1 | 	add	local12, objptr
08ef4     5E B5 62 FC | 	wrlong	local08, local12
08ef8     03 00 00 FF 
08efc     00 64 06 F1 | 	add	objptr, ##1536
08f00     32 BF 02 FB | 	rdlong	local13, objptr
08f04     5F B5 02 F6 | 	mov	local08, local13
08f08     01 B4 66 F0 | 	shl	local08, #1
08f0c     5F B5 02 F1 | 	add	local08, local13
08f10     02 B4 66 F0 | 	shl	local08, #2
08f14     03 00 00 FF 
08f18     00 64 86 F1 | 	sub	objptr, ##1536
08f1c     32 B5 02 F1 | 	add	local08, objptr
08f20     04 B4 06 F1 | 	add	local08, #4
08f24     5A B3 62 FC | 	wrlong	local07, local08
08f28     03 00 00 FF 
08f2c     00 64 06 F1 | 	add	objptr, ##1536
08f30     32 B5 02 FB | 	rdlong	local08, objptr
08f34     5A C1 02 F6 | 	mov	local14, local08
08f38     01 C0 66 F0 | 	shl	local14, #1
08f3c     5A C1 02 F1 | 	add	local14, local08
08f40     02 C0 66 F0 | 	shl	local14, #2
08f44     03 00 00 FF 
08f48     00 64 86 F1 | 	sub	objptr, ##1536
08f4c     32 C1 02 F1 | 	add	local14, objptr
08f50     08 C0 06 F1 | 	add	local14, #8
08f54     60 B9 62 FC | 	wrlong	local10, local14
08f58     03 00 00 FF 
08f5c     00 64 06 F1 | 	add	objptr, ##1536
08f60     32 B5 02 FB | 	rdlong	local08, objptr
08f64     01 B4 06 F1 | 	add	local08, #1
08f68     32 B5 62 FC | 	wrlong	local08, objptr
08f6c     44 AA 06 F6 | 	mov	local03, #68
08f70     53 B5 02 F6 | 	mov	local08, local01
08f74     54 B3 02 F6 | 	mov	local07, local02
08f78     55 B9 02 F6 | 	mov	local10, local03
08f7c     32 C1 02 FB | 	rdlong	local14, objptr
08f80     60 BF 02 F6 | 	mov	local13, local14
08f84     01 BE 66 F0 | 	shl	local13, #1
08f88     60 BF 02 F1 | 	add	local13, local14
08f8c     02 BE 66 F0 | 	shl	local13, #2
08f90     03 00 00 FF 
08f94     00 64 86 F1 | 	sub	objptr, ##1536
08f98     32 BF 02 F1 | 	add	local13, objptr
08f9c     5F B5 62 FC | 	wrlong	local08, local13
08fa0     03 00 00 FF 
08fa4     00 64 06 F1 | 	add	objptr, ##1536
08fa8     32 C1 02 FB | 	rdlong	local14, objptr
08fac     60 BF 02 F6 | 	mov	local13, local14
08fb0     01 BE 66 F0 | 	shl	local13, #1
08fb4     60 BF 02 F1 | 	add	local13, local14
08fb8     02 BE 66 F0 | 	shl	local13, #2
08fbc     03 00 00 FF 
08fc0     00 64 86 F1 | 	sub	objptr, ##1536
08fc4     32 BF 02 F1 | 	add	local13, objptr
08fc8     04 BE 06 F1 | 	add	local13, #4
08fcc     5F B3 62 FC | 	wrlong	local07, local13
08fd0     03 00 00 FF 
08fd4     00 64 06 F1 | 	add	objptr, ##1536
08fd8     32 BF 02 FB | 	rdlong	local13, objptr
08fdc     5F C1 02 F6 | 	mov	local14, local13
08fe0     01 C0 66 F0 | 	shl	local14, #1
08fe4     5F C1 02 F1 | 	add	local14, local13
08fe8     02 C0 66 F0 | 	shl	local14, #2
08fec     03 00 00 FF 
08ff0     00 64 86 F1 | 	sub	objptr, ##1536
08ff4     32 C1 02 F1 | 	add	local14, objptr
08ff8     08 C0 06 F1 | 	add	local14, #8
08ffc     60 B9 62 FC | 	wrlong	local10, local14
09000     03 00 00 FF 
09004     00 64 06 F1 | 	add	objptr, ##1536
09008     32 B5 02 FB | 	rdlong	local08, objptr
0900c     01 B4 06 F1 | 	add	local08, #1
09010     32 B5 62 FC | 	wrlong	local08, objptr
09014     4C 00 00 FF 
09018     20 64 86 F1 | 	sub	objptr, ##38944
0901c                 | LR__0844
0901c                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0901c     38 00 00 FF 
09020     E8 65 06 F1 | 	add	objptr, ##29160
09024     32 B5 02 FB | 	rdlong	local08, objptr
09028     03 B4 66 F0 | 	shl	local08, #3
0902c     02 00 00 FF 
09030     38 64 86 F1 | 	sub	objptr, ##1080
09034     32 B5 02 F1 | 	add	local08, objptr
09038     04 B4 06 F1 | 	add	local08, #4
0903c     5A C1 02 FB | 	rdlong	local14, local08
09040     12 C0 0E F2 | 	cmp	local14, #18 wz
09044     36 00 00 FF 
09048     B0 65 86 F1 | 	sub	objptr, ##28080
0904c     60 01 90 5D |  if_ne	jmp	#LR__0845
09050     22 AA 06 F6 | 	mov	local03, #34
09054     53 B5 02 F6 | 	mov	local08, local01
09058     54 B3 02 F6 | 	mov	local07, local02
0905c     55 B9 02 F6 | 	mov	local10, local03
09060     4C 00 00 FF 
09064     20 64 06 F1 | 	add	objptr, ##38944
09068     32 C1 02 FB | 	rdlong	local14, objptr
0906c     60 BF 02 F6 | 	mov	local13, local14
09070     01 BE 66 F0 | 	shl	local13, #1
09074     60 BF 02 F1 | 	add	local13, local14
09078     02 BE 66 F0 | 	shl	local13, #2
0907c     03 00 00 FF 
09080     00 64 86 F1 | 	sub	objptr, ##1536
09084     32 BF 02 F1 | 	add	local13, objptr
09088     5F B5 62 FC | 	wrlong	local08, local13
0908c     03 00 00 FF 
09090     00 64 06 F1 | 	add	objptr, ##1536
09094     32 C1 02 FB | 	rdlong	local14, objptr
09098     60 B5 02 F6 | 	mov	local08, local14
0909c     01 B4 66 F0 | 	shl	local08, #1
090a0     60 B5 02 F1 | 	add	local08, local14
090a4     02 B4 66 F0 | 	shl	local08, #2
090a8     03 00 00 FF 
090ac     00 64 86 F1 | 	sub	objptr, ##1536
090b0     32 B5 02 F1 | 	add	local08, objptr
090b4     04 B4 06 F1 | 	add	local08, #4
090b8     5A B3 62 FC | 	wrlong	local07, local08
090bc     03 00 00 FF 
090c0     00 64 06 F1 | 	add	objptr, ##1536
090c4     32 B5 02 FB | 	rdlong	local08, objptr
090c8     5A C1 02 F6 | 	mov	local14, local08
090cc     01 C0 66 F0 | 	shl	local14, #1
090d0     5A C1 02 F1 | 	add	local14, local08
090d4     02 C0 66 F0 | 	shl	local14, #2
090d8     03 00 00 FF 
090dc     00 64 86 F1 | 	sub	objptr, ##1536
090e0     32 C1 02 F1 | 	add	local14, objptr
090e4     08 C0 06 F1 | 	add	local14, #8
090e8     60 B9 62 FC | 	wrlong	local10, local14
090ec     03 00 00 FF 
090f0     00 64 06 F1 | 	add	objptr, ##1536
090f4     32 B5 02 FB | 	rdlong	local08, objptr
090f8     01 B4 06 F1 | 	add	local08, #1
090fc     32 B5 62 FC | 	wrlong	local08, objptr
09100     44 AA 06 F6 | 	mov	local03, #68
09104     53 B5 02 F6 | 	mov	local08, local01
09108     54 B3 02 F6 | 	mov	local07, local02
0910c     55 B9 02 F6 | 	mov	local10, local03
09110     32 C1 02 FB | 	rdlong	local14, objptr
09114     60 BF 02 F6 | 	mov	local13, local14
09118     01 BE 66 F0 | 	shl	local13, #1
0911c     60 BF 02 F1 | 	add	local13, local14
09120     02 BE 66 F0 | 	shl	local13, #2
09124     03 00 00 FF 
09128     00 64 86 F1 | 	sub	objptr, ##1536
0912c     32 BF 02 F1 | 	add	local13, objptr
09130     5F B5 62 FC | 	wrlong	local08, local13
09134     03 00 00 FF 
09138     00 64 06 F1 | 	add	objptr, ##1536
0913c     32 C1 02 FB | 	rdlong	local14, objptr
09140     60 BF 02 F6 | 	mov	local13, local14
09144     01 BE 66 F0 | 	shl	local13, #1
09148     60 BF 02 F1 | 	add	local13, local14
0914c     02 BE 66 F0 | 	shl	local13, #2
09150     03 00 00 FF 
09154     00 64 86 F1 | 	sub	objptr, ##1536
09158     32 BF 02 F1 | 	add	local13, objptr
0915c     04 BE 06 F1 | 	add	local13, #4
09160     5F B3 62 FC | 	wrlong	local07, local13
09164     03 00 00 FF 
09168     00 64 06 F1 | 	add	objptr, ##1536
0916c     32 BF 02 FB | 	rdlong	local13, objptr
09170     5F C1 02 F6 | 	mov	local14, local13
09174     01 C0 66 F0 | 	shl	local14, #1
09178     5F C1 02 F1 | 	add	local14, local13
0917c     02 C0 66 F0 | 	shl	local14, #2
09180     03 00 00 FF 
09184     00 64 86 F1 | 	sub	objptr, ##1536
09188     32 C1 02 F1 | 	add	local14, objptr
0918c     08 C0 06 F1 | 	add	local14, #8
09190     60 B9 62 FC | 	wrlong	local10, local14
09194     03 00 00 FF 
09198     00 64 06 F1 | 	add	objptr, ##1536
0919c     32 B5 02 FB | 	rdlong	local08, objptr
091a0     01 B4 06 F1 | 	add	local08, #1
091a4     32 B5 62 FC | 	wrlong	local08, objptr
091a8     4C 00 00 FF 
091ac     20 64 86 F1 | 	sub	objptr, ##38944
091b0                 | LR__0845
091b0                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
091b0     38 00 00 FF 
091b4     E8 65 06 F1 | 	add	objptr, ##29160
091b8     32 B5 02 FB | 	rdlong	local08, objptr
091bc     03 B4 66 F0 | 	shl	local08, #3
091c0     02 00 00 FF 
091c4     38 64 86 F1 | 	sub	objptr, ##1080
091c8     32 B5 02 F1 | 	add	local08, objptr
091cc     04 B4 06 F1 | 	add	local08, #4
091d0     5A C1 02 FB | 	rdlong	local14, local08
091d4     12 C0 0E F2 | 	cmp	local14, #18 wz
091d8     36 00 00 FF 
091dc     B0 65 86 F1 | 	sub	objptr, ##28080
091e0     00 01 90 AD |  if_e	jmp	#LR__0846
091e4     38 00 00 FF 
091e8     E8 65 06 F1 | 	add	objptr, ##29160
091ec     32 B5 02 FB | 	rdlong	local08, objptr
091f0     03 B4 66 F0 | 	shl	local08, #3
091f4     02 00 00 FF 
091f8     38 64 86 F1 | 	sub	objptr, ##1080
091fc     32 B5 02 F1 | 	add	local08, objptr
09200     04 B4 06 F1 | 	add	local08, #4
09204     5A C1 02 FB | 	rdlong	local14, local08
09208     11 C0 0E F2 | 	cmp	local14, #17 wz
0920c     36 00 00 FF 
09210     B0 65 86 F1 | 	sub	objptr, ##28080
09214     CC 00 90 AD |  if_e	jmp	#LR__0846
09218     44 AA 06 F6 | 	mov	local03, #68
0921c     53 B5 02 F6 | 	mov	local08, local01
09220     54 B3 02 F6 | 	mov	local07, local02
09224     55 B9 02 F6 | 	mov	local10, local03
09228     4C 00 00 FF 
0922c     20 64 06 F1 | 	add	objptr, ##38944
09230     32 C1 02 FB | 	rdlong	local14, objptr
09234     60 BF 02 F6 | 	mov	local13, local14
09238     01 BE 66 F0 | 	shl	local13, #1
0923c     60 BF 02 F1 | 	add	local13, local14
09240     02 BE 66 F0 | 	shl	local13, #2
09244     03 00 00 FF 
09248     00 64 86 F1 | 	sub	objptr, ##1536
0924c     32 BF 02 F1 | 	add	local13, objptr
09250     5F B5 62 FC | 	wrlong	local08, local13
09254     03 00 00 FF 
09258     00 64 06 F1 | 	add	objptr, ##1536
0925c     32 C1 02 FB | 	rdlong	local14, objptr
09260     60 BF 02 F6 | 	mov	local13, local14
09264     01 BE 66 F0 | 	shl	local13, #1
09268     60 BF 02 F1 | 	add	local13, local14
0926c     02 BE 66 F0 | 	shl	local13, #2
09270     03 00 00 FF 
09274     00 64 86 F1 | 	sub	objptr, ##1536
09278     32 BF 02 F1 | 	add	local13, objptr
0927c     04 BE 06 F1 | 	add	local13, #4
09280     5F B3 62 FC | 	wrlong	local07, local13
09284     03 00 00 FF 
09288     00 64 06 F1 | 	add	objptr, ##1536
0928c     32 BF 02 FB | 	rdlong	local13, objptr
09290     5F C1 02 F6 | 	mov	local14, local13
09294     01 C0 66 F0 | 	shl	local14, #1
09298     5F C1 02 F1 | 	add	local14, local13
0929c     02 C0 66 F0 | 	shl	local14, #2
092a0     03 00 00 FF 
092a4     00 64 86 F1 | 	sub	objptr, ##1536
092a8     32 C1 02 F1 | 	add	local14, objptr
092ac     08 C0 06 F1 | 	add	local14, #8
092b0     60 B9 62 FC | 	wrlong	local10, local14
092b4     03 00 00 FF 
092b8     00 64 06 F1 | 	add	objptr, ##1536
092bc     32 B5 02 FB | 	rdlong	local08, objptr
092c0     01 B4 06 F1 | 	add	local08, #1
092c4     32 B5 62 FC | 	wrlong	local08, objptr
092c8     13 00 00 FF 
092cc     38 64 86 F1 | 	sub	objptr, ##9784
092d0     32 B5 02 FB | 	rdlong	local08, objptr
092d4     01 B4 86 F1 | 	sub	local08, #1
092d8     32 B5 62 FC | 	wrlong	local08, objptr
092dc     38 00 00 FF 
092e0     E8 65 86 F1 | 	sub	objptr, ##29160
092e4                 | LR__0846
092e4     38 00 00 FF 
092e8     E8 65 06 F1 | 	add	objptr, ##29160
092ec     32 B5 02 FB | 	rdlong	local08, objptr
092f0     01 B4 06 F1 | 	add	local08, #1
092f4     32 B5 62 FC | 	wrlong	local08, objptr
092f8     38 00 00 FF 
092fc     E8 65 86 F1 | 	sub	objptr, ##29160
09300                 | LR__0847
09300     00 AE 06 F6 | 	mov	local05, #0
09304                 | ' i=0 : err=0
09304                 | ' if lparts(ct).token<>token_end then
09304     38 00 00 FF 
09308     E8 65 06 F1 | 	add	objptr, ##29160
0930c     32 C1 02 FB | 	rdlong	local14, objptr
09310     03 C0 66 F0 | 	shl	local14, #3
09314     02 00 00 FF 
09318     38 64 86 F1 | 	sub	objptr, ##1080
0931c     32 C1 02 F1 | 	add	local14, objptr
09320     04 C0 06 F1 | 	add	local14, #4
09324     60 C1 02 FB | 	rdlong	local14, local14
09328     FE C1 0E F2 | 	cmp	local14, #510 wz
0932c     36 00 00 FF 
09330     B0 65 86 F1 | 	sub	objptr, ##28080
09334     98 00 90 AD |  if_e	jmp	#LR__0849
09338                 | '   do
09338                 | LR__0848
09338     8C 27 B0 FD | 	call	#_getaddr
0933c     3D C3 02 F6 | 	mov	local15, result1
09340     38 00 00 FF 
09344     E8 65 06 F1 | 	add	objptr, ##29160
09348     32 C1 02 FB | 	rdlong	local14, objptr
0934c     01 C0 06 F1 | 	add	local14, #1
09350     32 C1 62 FC | 	wrlong	local14, objptr
09354     01 AE 06 F1 | 	add	local05, #1
09358                 | '     err=getaddr() :ct+=1
09358                 | '     i+=1 
09358                 | '     if lparts(ct).token=token_comma then ct+=1 
09358     03 C0 66 F0 | 	shl	local14, #3
0935c     02 00 00 FF 
09360     38 64 86 F1 | 	sub	objptr, ##1080
09364     32 C1 02 F1 | 	add	local14, objptr
09368     04 C0 06 F1 | 	add	local14, #4
0936c     60 C1 02 FB | 	rdlong	local14, local14
09370     11 C0 0E F2 | 	cmp	local14, #17 wz
09374     36 00 00 FF 
09378     B0 65 86 F1 | 	sub	objptr, ##28080
0937c     38 00 00 AF 
09380     E8 65 06 A1 |  if_e	add	objptr, ##29160
09384     32 B5 02 AB |  if_e	rdlong	local08, objptr
09388     01 B4 06 A1 |  if_e	add	local08, #1
0938c     32 B5 62 AC |  if_e	wrlong	local08, objptr
09390     38 00 00 AF 
09394     E8 65 86 A1 |  if_e	sub	objptr, ##29160
09398                 | '     if lparts(ct).token=token_end then exit loop
09398     38 00 00 FF 
0939c     E8 65 06 F1 | 	add	objptr, ##29160
093a0     32 C1 02 FB | 	rdlong	local14, objptr
093a4     03 C0 66 F0 | 	shl	local14, #3
093a8     02 00 00 FF 
093ac     38 64 86 F1 | 	sub	objptr, ##1080
093b0     32 C1 02 F1 | 	add	local14, objptr
093b4     04 C0 06 F1 | 	add	local14, #4
093b8     60 C1 02 FB | 	rdlong	local14, local14
093bc     FE C1 0E F2 | 	cmp	local14, #510 wz
093c0     36 00 00 FF 
093c4     B0 65 86 F1 | 	sub	objptr, ##28080
093c8     08 00 90 AD |  if_e	jmp	#LR__0850
093cc     68 FF 9F FD | 	jmp	#LR__0848
093d0                 | LR__0849
093d0     36 C2 06 F6 | 	mov	local15, #54
093d4                 | LR__0850
093d4                 | ' return i,err
093d4     57 7B 02 F6 | 	mov	result1, local05
093d8     61 7D 02 F6 | 	mov	result2, local15
093dc     E7 F0 03 F6 | 	mov	ptra, fp
093e0     F2 00 A0 FD | 	call	#popregs_
093e4                 | _compile_input_ret
093e4     2D 00 64 FD | 	ret
093e8                 | 
093e8                 | ' 
093e8                 | ' '----- compile assign to an array element
093e8                 | ' 
093e8                 | ' function compile_array_assign() as ulong 
093e8                 | _compile_array_assign
093e8     0B CA 05 F6 | 	mov	COUNT_, #11
093ec     E8 00 A0 FD | 	call	#pushregs_
093f0     00 AC 06 F6 | 	mov	local04, #0
093f4     00 AE 06 F6 | 	mov	local05, #0
093f8     38 00 00 FF 
093fc     E8 65 06 F1 | 	add	objptr, ##29160
09400     32 B1 02 FB | 	rdlong	local06, objptr
09404     58 7B 02 F6 | 	mov	result1, local06
09408     01 7A 86 F1 | 	sub	result1, #1
0940c     03 7A 66 F0 | 	shl	result1, #3
09410     02 00 00 FF 
09414     38 64 86 F1 | 	sub	objptr, ##1080
09418     32 7B 02 F1 | 	add	result1, objptr
0941c     3D B3 02 FB | 	rdlong	local07, result1
09420                 | ' numpar=0 : err=0
09420                 | ' varname$=lparts(ct-1).part$
09420                 | ' if lparts(ct).token=token_lpar then
09420     03 B0 66 F0 | 	shl	local06, #3
09424     32 B1 02 F1 | 	add	local06, objptr
09428     04 B0 06 F1 | 	add	local06, #4
0942c     58 B1 02 FB | 	rdlong	local06, local06
09430     15 B0 0E F2 | 	cmp	local06, #21 wz
09434     36 00 00 FF 
09438     B0 65 86 F1 | 	sub	objptr, ##28080
0943c     F0 01 90 5D |  if_ne	jmp	#LR__0864
09440     38 00 00 FF 
09444     E8 65 06 F1 | 	add	objptr, ##29160
09448     32 B5 02 FB | 	rdlong	local08, objptr
0944c     01 B4 06 F1 | 	add	local08, #1
09450     32 B5 62 FC | 	wrlong	local08, objptr
09454     38 00 00 FF 
09458     E8 65 86 F1 | 	sub	objptr, ##29160
0945c                 | '   ct+=1 											' omit this lpar, this is for expr list
0945c                 | '   do
0945c                 | LR__0860
0945c     F8 29 B0 FD | 	call	#_expr
09460     38 00 00 FF 
09464     E8 65 06 F1 | 	add	objptr, ##29160
09468     32 B1 02 FB | 	rdlong	local06, objptr
0946c     01 B0 06 F1 | 	add	local06, #1
09470     32 B1 62 FC | 	wrlong	local06, objptr
09474     01 AC 06 F1 | 	add	local04, #1
09478     01 B0 86 F1 | 	sub	local06, #1
0947c     03 B0 66 F0 | 	shl	local06, #3
09480     02 00 00 FF 
09484     38 64 86 F1 | 	sub	objptr, ##1080
09488     32 B1 02 F1 | 	add	local06, objptr
0948c     04 B0 06 F1 | 	add	local06, #4
09490     58 B5 02 FB | 	rdlong	local08, local06
09494     14 B4 0E F2 | 	cmp	local08, #20 wz
09498     36 00 00 FF 
0949c     B0 65 86 F1 | 	sub	objptr, ##28080
094a0     34 00 90 AD |  if_e	jmp	#LR__0861
094a4     38 00 00 FF 
094a8     E8 65 06 F1 | 	add	objptr, ##29160
094ac     32 B5 02 FB | 	rdlong	local08, objptr
094b0     03 B4 66 F0 | 	shl	local08, #3
094b4     02 00 00 FF 
094b8     38 64 86 F1 | 	sub	objptr, ##1080
094bc     32 B5 02 F1 | 	add	local08, objptr
094c0     04 B4 06 F1 | 	add	local08, #4
094c4     5A B5 02 FB | 	rdlong	local08, local08
094c8     FE B5 0E F2 | 	cmp	local08, #510 wz
094cc     36 00 00 FF 
094d0     B0 65 86 F1 | 	sub	objptr, ##28080
094d4     84 FF 9F 5D |  if_ne	jmp	#LR__0860
094d8                 | LR__0861
094d8     38 00 00 FF 
094dc     E8 65 06 F1 | 	add	objptr, ##29160
094e0     32 B5 02 FB | 	rdlong	local08, objptr
094e4     01 B4 06 F1 | 	add	local08, #1
094e8     32 B5 62 FC | 	wrlong	local08, objptr
094ec     38 00 00 FF 
094f0     E8 65 86 F1 | 	sub	objptr, ##29160
094f4     60 29 B0 FD | 	call	#_expr
094f8     01 B6 66 F6 | 	neg	local09, #1
094fc     00 B8 06 F6 | 	mov	local10, #0
09500                 | '   ct+=1 : expr()
09500                 | '   j=-1 : i=0 
09500                 | '   do 
09500                 | LR__0862
09500                 | '     if variables(i).name=varname$ then j=i: exit loop
09500     5C B1 02 F6 | 	mov	local06, local10
09504     04 B0 66 F0 | 	shl	local06, #4
09508     32 B5 02 F6 | 	mov	local08, objptr
0950c     16 00 00 FF 
09510     9C B5 06 F1 | 	add	local08, ##11676
09514     5A B1 02 F1 | 	add	local06, local08
09518     58 93 02 FB | 	rdlong	arg01, local06
0951c     59 95 02 F6 | 	mov	arg02, local07
09520     94 B2 B1 FD | 	call	#__system___string_cmp
09524     00 7A 0E F2 | 	cmp	result1, #0 wz
09528     5C B7 02 A6 |  if_e	mov	local09, local10
0952c     20 00 90 AD |  if_e	jmp	#LR__0863
09530     01 B8 06 F1 | 	add	local10, #1
09534     36 00 00 FF 
09538     AC 65 06 F1 | 	add	objptr, ##28076
0953c     32 B5 02 FB | 	rdlong	local08, objptr
09540     36 00 00 FF 
09544     AC 65 86 F1 | 	sub	objptr, ##28076
09548     5A B9 5A F2 | 	cmps	local10, local08 wcz
0954c     B0 FF 9F ED |  if_be	jmp	#LR__0862
09550                 | LR__0863
09550     5B A7 02 F6 | 	mov	local01, local09
09554     56 A9 02 F6 | 	mov	local02, local04
09558     17 AA 06 F6 | 	mov	local03, #23
0955c     53 B5 02 F6 | 	mov	local08, local01
09560     54 BB 02 F6 | 	mov	local11, local02
09564     55 B3 02 F6 | 	mov	local07, local03
09568     4C 00 00 FF 
0956c     20 64 06 F1 | 	add	objptr, ##38944
09570     32 A7 02 FB | 	rdlong	local01, objptr
09574     53 B7 02 F6 | 	mov	local09, local01
09578     01 B6 66 F0 | 	shl	local09, #1
0957c     53 B7 02 F1 | 	add	local09, local01
09580     02 B6 66 F0 | 	shl	local09, #2
09584     03 00 00 FF 
09588     00 64 86 F1 | 	sub	objptr, ##1536
0958c     32 B7 02 F1 | 	add	local09, objptr
09590     5B B5 62 FC | 	wrlong	local08, local09
09594     03 00 00 FF 
09598     00 64 06 F1 | 	add	objptr, ##1536
0959c     32 A7 02 FB | 	rdlong	local01, objptr
095a0     53 B7 02 F6 | 	mov	local09, local01
095a4     01 B6 66 F0 | 	shl	local09, #1
095a8     53 B7 02 F1 | 	add	local09, local01
095ac     02 B6 66 F0 | 	shl	local09, #2
095b0     03 00 00 FF 
095b4     00 64 86 F1 | 	sub	objptr, ##1536
095b8     32 B7 02 F1 | 	add	local09, objptr
095bc     04 B6 06 F1 | 	add	local09, #4
095c0     5B BB 62 FC | 	wrlong	local11, local09
095c4     03 00 00 FF 
095c8     00 64 06 F1 | 	add	objptr, ##1536
095cc     32 BB 02 FB | 	rdlong	local11, objptr
095d0     5D A7 02 F6 | 	mov	local01, local11
095d4     01 A6 66 F0 | 	shl	local01, #1
095d8     5D A7 02 F1 | 	add	local01, local11
095dc     02 A6 66 F0 | 	shl	local01, #2
095e0     03 00 00 FF 
095e4     00 64 86 F1 | 	sub	objptr, ##1536
095e8     32 A7 02 F1 | 	add	local01, objptr
095ec     08 A6 06 F1 | 	add	local01, #8
095f0     53 B3 62 FC | 	wrlong	local07, local01
095f4     03 00 00 FF 
095f8     00 64 06 F1 | 	add	objptr, ##1536
095fc     32 B5 02 FB | 	rdlong	local08, objptr
09600     01 B4 06 F1 | 	add	local08, #1
09604     32 B5 62 FC | 	wrlong	local08, objptr
09608                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
09608                 | '   if numpar>3 then err=45
09608     04 AC 16 F2 | 	cmp	local04, #4 wc
0960c     2D AE 06 36 |  if_ae	mov	local05, #45
09610                 | '   if i>varnum then err=20
09610     15 00 00 FF 
09614     74 64 86 F1 | 	sub	objptr, ##10868
09618     32 B5 02 FB | 	rdlong	local08, objptr
0961c     36 00 00 FF 
09620     AC 65 86 F1 | 	sub	objptr, ##28076
09624     5A B9 5A F2 | 	cmps	local10, local08 wcz
09628     14 AE 06 16 |  if_a	mov	local05, #20
0962c     04 00 90 FD | 	jmp	#LR__0865
09630                 | LR__0864
09630     0E AE 06 F6 | 	mov	local05, #14
09634                 | LR__0865
09634                 | ' return err
09634     57 7B 02 F6 | 	mov	result1, local05
09638     E7 F0 03 F6 | 	mov	ptra, fp
0963c     F2 00 A0 FD | 	call	#popregs_
09640                 | _compile_array_assign_ret
09640     2D 00 64 FD | 	ret
09644                 | 
09644                 | ' 
09644                 | ' '----- compile print command with its ";" and "," modifiers
09644                 | ' 
09644                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
09644                 | _compile_print
09644     0B CA 05 F6 | 	mov	COUNT_, #11
09648     E8 00 A0 FD | 	call	#pushregs_
0964c     00 A6 06 F6 | 	mov	local01, #0
09650     1D AA 06 F6 | 	mov	local03, #29
09654                 | ' t1.result.uresult=0 : t1.result_type=result_uint
09654                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
09654     38 00 00 FF 
09658     E8 65 06 F1 | 	add	objptr, ##29160
0965c     32 AD 02 FB | 	rdlong	local04, objptr
09660     03 AC 66 F0 | 	shl	local04, #3
09664     02 00 00 FF 
09668     38 64 86 F1 | 	sub	objptr, ##1080
0966c     32 AD 02 F1 | 	add	local04, objptr
09670     04 AC 06 F1 | 	add	local04, #4
09674     56 AD 02 FB | 	rdlong	local04, local04
09678     FE AD 0E F2 | 	cmp	local04, #510 wz
0967c     36 00 00 FF 
09680     B0 65 86 F1 | 	sub	objptr, ##28080
09684     68 01 90 5D |  if_ne	jmp	#LR__0870
09688     20 AA 06 F6 | 	mov	local03, #32
0968c     53 AF 02 F6 | 	mov	local05, local01
09690     54 B1 02 F6 | 	mov	local06, local02
09694     55 B3 02 F6 | 	mov	local07, local03
09698     4C 00 00 FF 
0969c     20 64 06 F1 | 	add	objptr, ##38944
096a0     32 B5 02 FB | 	rdlong	local08, objptr
096a4     5A B7 02 F6 | 	mov	local09, local08
096a8     01 B6 66 F0 | 	shl	local09, #1
096ac     5A B7 02 F1 | 	add	local09, local08
096b0     02 B6 66 F0 | 	shl	local09, #2
096b4     03 00 00 FF 
096b8     00 64 86 F1 | 	sub	objptr, ##1536
096bc     32 B7 02 F1 | 	add	local09, objptr
096c0     5B AF 62 FC | 	wrlong	local05, local09
096c4     03 00 00 FF 
096c8     00 64 06 F1 | 	add	objptr, ##1536
096cc     32 AF 02 FB | 	rdlong	local05, objptr
096d0     57 B9 02 F6 | 	mov	local10, local05
096d4     01 B8 66 F0 | 	shl	local10, #1
096d8     57 B9 02 F1 | 	add	local10, local05
096dc     02 B8 66 F0 | 	shl	local10, #2
096e0     03 00 00 FF 
096e4     00 64 86 F1 | 	sub	objptr, ##1536
096e8     32 B9 02 F1 | 	add	local10, objptr
096ec     04 B8 06 F1 | 	add	local10, #4
096f0     5C B1 62 FC | 	wrlong	local06, local10
096f4     03 00 00 FF 
096f8     00 64 06 F1 | 	add	objptr, ##1536
096fc     32 AF 02 FB | 	rdlong	local05, objptr
09700     57 BB 02 F6 | 	mov	local11, local05
09704     01 BA 66 F0 | 	shl	local11, #1
09708     57 BB 02 F1 | 	add	local11, local05
0970c     02 BA 66 F0 | 	shl	local11, #2
09710     03 00 00 FF 
09714     00 64 86 F1 | 	sub	objptr, ##1536
09718     32 BB 02 F1 | 	add	local11, objptr
0971c     08 BA 06 F1 | 	add	local11, #8
09720     5D B3 62 FC | 	wrlong	local07, local11
09724     03 00 00 FF 
09728     00 64 06 F1 | 	add	objptr, ##1536
0972c     32 AF 02 FB | 	rdlong	local05, objptr
09730     01 AE 06 F1 | 	add	local05, #1
09734     32 AF 62 FC | 	wrlong	local05, objptr
09738     44 AA 06 F6 | 	mov	local03, #68
0973c     53 AF 02 F6 | 	mov	local05, local01
09740     54 B1 02 F6 | 	mov	local06, local02
09744     55 B3 02 F6 | 	mov	local07, local03
09748     32 B5 02 FB | 	rdlong	local08, objptr
0974c     5A B7 02 F6 | 	mov	local09, local08
09750     01 B6 66 F0 | 	shl	local09, #1
09754     5A B7 02 F1 | 	add	local09, local08
09758     02 B6 66 F0 | 	shl	local09, #2
0975c     03 00 00 FF 
09760     00 64 86 F1 | 	sub	objptr, ##1536
09764     32 B7 02 F1 | 	add	local09, objptr
09768     5B AF 62 FC | 	wrlong	local05, local09
0976c     03 00 00 FF 
09770     00 64 06 F1 | 	add	objptr, ##1536
09774     32 BB 02 FB | 	rdlong	local11, objptr
09778     5D B9 02 F6 | 	mov	local10, local11
0977c     01 B8 66 F0 | 	shl	local10, #1
09780     5D B9 02 F1 | 	add	local10, local11
09784     02 B8 66 F0 | 	shl	local10, #2
09788     03 00 00 FF 
0978c     00 64 86 F1 | 	sub	objptr, ##1536
09790     32 B9 02 F1 | 	add	local10, objptr
09794     04 B8 06 F1 | 	add	local10, #4
09798     5C B1 62 FC | 	wrlong	local06, local10
0979c     03 00 00 FF 
097a0     00 64 06 F1 | 	add	objptr, ##1536
097a4     32 B9 02 FB | 	rdlong	local10, objptr
097a8     5C BB 02 F6 | 	mov	local11, local10
097ac     01 BA 66 F0 | 	shl	local11, #1
097b0     5C BB 02 F1 | 	add	local11, local10
097b4     02 BA 66 F0 | 	shl	local11, #2
097b8     03 00 00 FF 
097bc     00 64 86 F1 | 	sub	objptr, ##1536
097c0     32 BB 02 F1 | 	add	local11, objptr
097c4     08 BA 06 F1 | 	add	local11, #8
097c8     5D B3 62 FC | 	wrlong	local07, local11
097cc     03 00 00 FF 
097d0     00 64 06 F1 | 	add	objptr, ##1536
097d4     32 AF 02 FB | 	rdlong	local05, objptr
097d8     01 AE 06 F1 | 	add	local05, #1
097dc     32 AF 62 FC | 	wrlong	local05, objptr
097e0     4C 00 00 FF 
097e4     20 64 86 F1 | 	sub	objptr, ##38944
097e8     00 7A 06 F6 | 	mov	result1, #0
097ec     20 05 90 FD | 	jmp	#LR__0877
097f0                 | LR__0870
097f0                 | ' do
097f0                 | LR__0871
097f0     64 26 B0 FD | 	call	#_expr
097f4                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
097f4                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
097f4     38 00 00 FF 
097f8     E8 65 06 F1 | 	add	objptr, ##29160
097fc     32 AD 02 FB | 	rdlong	local04, objptr
09800     03 AC 66 F0 | 	shl	local04, #3
09804     02 00 00 FF 
09808     38 64 86 F1 | 	sub	objptr, ##1080
0980c     32 AD 02 F1 | 	add	local04, objptr
09810     04 AC 06 F1 | 	add	local04, #4
09814     56 B5 02 FB | 	rdlong	local08, local04
09818     11 B4 0E F2 | 	cmp	local08, #17 wz
0981c     36 00 00 FF 
09820     B0 65 86 F1 | 	sub	objptr, ##28080
09824     60 01 90 5D |  if_ne	jmp	#LR__0872
09828     21 AA 06 F6 | 	mov	local03, #33
0982c     53 AF 02 F6 | 	mov	local05, local01
09830     54 B1 02 F6 | 	mov	local06, local02
09834     55 B3 02 F6 | 	mov	local07, local03
09838     4C 00 00 FF 
0983c     20 64 06 F1 | 	add	objptr, ##38944
09840     32 B5 02 FB | 	rdlong	local08, objptr
09844     5A B7 02 F6 | 	mov	local09, local08
09848     01 B6 66 F0 | 	shl	local09, #1
0984c     5A B7 02 F1 | 	add	local09, local08
09850     02 B6 66 F0 | 	shl	local09, #2
09854     03 00 00 FF 
09858     00 64 86 F1 | 	sub	objptr, ##1536
0985c     32 B7 02 F1 | 	add	local09, objptr
09860     5B AF 62 FC | 	wrlong	local05, local09
09864     03 00 00 FF 
09868     00 64 06 F1 | 	add	objptr, ##1536
0986c     32 BB 02 FB | 	rdlong	local11, objptr
09870     5D B9 02 F6 | 	mov	local10, local11
09874     01 B8 66 F0 | 	shl	local10, #1
09878     5D B9 02 F1 | 	add	local10, local11
0987c     02 B8 66 F0 | 	shl	local10, #2
09880     03 00 00 FF 
09884     00 64 86 F1 | 	sub	objptr, ##1536
09888     32 B9 02 F1 | 	add	local10, objptr
0988c     04 B8 06 F1 | 	add	local10, #4
09890     5C B1 62 FC | 	wrlong	local06, local10
09894     03 00 00 FF 
09898     00 64 06 F1 | 	add	objptr, ##1536
0989c     32 AF 02 FB | 	rdlong	local05, objptr
098a0     57 BB 02 F6 | 	mov	local11, local05
098a4     01 BA 66 F0 | 	shl	local11, #1
098a8     57 BB 02 F1 | 	add	local11, local05
098ac     02 BA 66 F0 | 	shl	local11, #2
098b0     03 00 00 FF 
098b4     00 64 86 F1 | 	sub	objptr, ##1536
098b8     32 BB 02 F1 | 	add	local11, objptr
098bc     08 BA 06 F1 | 	add	local11, #8
098c0     5D B3 62 FC | 	wrlong	local07, local11
098c4     03 00 00 FF 
098c8     00 64 06 F1 | 	add	objptr, ##1536
098cc     32 AF 02 FB | 	rdlong	local05, objptr
098d0     01 AE 06 F1 | 	add	local05, #1
098d4     32 AF 62 FC | 	wrlong	local05, objptr
098d8     44 AA 06 F6 | 	mov	local03, #68
098dc     53 AF 02 F6 | 	mov	local05, local01
098e0     54 B1 02 F6 | 	mov	local06, local02
098e4     55 B3 02 F6 | 	mov	local07, local03
098e8     32 B5 02 FB | 	rdlong	local08, objptr
098ec     5A B7 02 F6 | 	mov	local09, local08
098f0     01 B6 66 F0 | 	shl	local09, #1
098f4     5A B7 02 F1 | 	add	local09, local08
098f8     02 B6 66 F0 | 	shl	local09, #2
098fc     03 00 00 FF 
09900     00 64 86 F1 | 	sub	objptr, ##1536
09904     32 B7 02 F1 | 	add	local09, objptr
09908     5B AF 62 FC | 	wrlong	local05, local09
0990c     03 00 00 FF 
09910     00 64 06 F1 | 	add	objptr, ##1536
09914     32 BB 02 FB | 	rdlong	local11, objptr
09918     5D B9 02 F6 | 	mov	local10, local11
0991c     01 B8 66 F0 | 	shl	local10, #1
09920     5D B9 02 F1 | 	add	local10, local11
09924     02 B8 66 F0 | 	shl	local10, #2
09928     03 00 00 FF 
0992c     00 64 86 F1 | 	sub	objptr, ##1536
09930     32 B9 02 F1 | 	add	local10, objptr
09934     04 B8 06 F1 | 	add	local10, #4
09938     5C B1 62 FC | 	wrlong	local06, local10
0993c     03 00 00 FF 
09940     00 64 06 F1 | 	add	objptr, ##1536
09944     32 B9 02 FB | 	rdlong	local10, objptr
09948     5C BB 02 F6 | 	mov	local11, local10
0994c     01 BA 66 F0 | 	shl	local11, #1
09950     5C BB 02 F1 | 	add	local11, local10
09954     02 BA 66 F0 | 	shl	local11, #2
09958     03 00 00 FF 
0995c     00 64 86 F1 | 	sub	objptr, ##1536
09960     32 BB 02 F1 | 	add	local11, objptr
09964     08 BA 06 F1 | 	add	local11, #8
09968     5D B3 62 FC | 	wrlong	local07, local11
0996c     03 00 00 FF 
09970     00 64 06 F1 | 	add	objptr, ##1536
09974     32 AF 02 FB | 	rdlong	local05, objptr
09978     01 AE 06 F1 | 	add	local05, #1
0997c     32 AF 62 FC | 	wrlong	local05, objptr
09980     4C 00 00 FF 
09984     20 64 86 F1 | 	sub	objptr, ##38944
09988                 | LR__0872
09988                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09988     38 00 00 FF 
0998c     E8 65 06 F1 | 	add	objptr, ##29160
09990     32 AD 02 FB | 	rdlong	local04, objptr
09994     03 AC 66 F0 | 	shl	local04, #3
09998     02 00 00 FF 
0999c     38 64 86 F1 | 	sub	objptr, ##1080
099a0     32 AD 02 F1 | 	add	local04, objptr
099a4     04 AC 06 F1 | 	add	local04, #4
099a8     56 B5 02 FB | 	rdlong	local08, local04
099ac     12 B4 0E F2 | 	cmp	local08, #18 wz
099b0     36 00 00 FF 
099b4     B0 65 86 F1 | 	sub	objptr, ##28080
099b8     60 01 90 5D |  if_ne	jmp	#LR__0873
099bc     22 AA 06 F6 | 	mov	local03, #34
099c0     53 AF 02 F6 | 	mov	local05, local01
099c4     54 B1 02 F6 | 	mov	local06, local02
099c8     55 B3 02 F6 | 	mov	local07, local03
099cc     4C 00 00 FF 
099d0     20 64 06 F1 | 	add	objptr, ##38944
099d4     32 B5 02 FB | 	rdlong	local08, objptr
099d8     5A B7 02 F6 | 	mov	local09, local08
099dc     01 B6 66 F0 | 	shl	local09, #1
099e0     5A B7 02 F1 | 	add	local09, local08
099e4     02 B6 66 F0 | 	shl	local09, #2
099e8     03 00 00 FF 
099ec     00 64 86 F1 | 	sub	objptr, ##1536
099f0     32 B7 02 F1 | 	add	local09, objptr
099f4     5B AF 62 FC | 	wrlong	local05, local09
099f8     03 00 00 FF 
099fc     00 64 06 F1 | 	add	objptr, ##1536
09a00     32 BB 02 FB | 	rdlong	local11, objptr
09a04     5D B9 02 F6 | 	mov	local10, local11
09a08     01 B8 66 F0 | 	shl	local10, #1
09a0c     5D B9 02 F1 | 	add	local10, local11
09a10     02 B8 66 F0 | 	shl	local10, #2
09a14     03 00 00 FF 
09a18     00 64 86 F1 | 	sub	objptr, ##1536
09a1c     32 B9 02 F1 | 	add	local10, objptr
09a20     04 B8 06 F1 | 	add	local10, #4
09a24     5C B1 62 FC | 	wrlong	local06, local10
09a28     03 00 00 FF 
09a2c     00 64 06 F1 | 	add	objptr, ##1536
09a30     32 AF 02 FB | 	rdlong	local05, objptr
09a34     57 BB 02 F6 | 	mov	local11, local05
09a38     01 BA 66 F0 | 	shl	local11, #1
09a3c     57 BB 02 F1 | 	add	local11, local05
09a40     02 BA 66 F0 | 	shl	local11, #2
09a44     03 00 00 FF 
09a48     00 64 86 F1 | 	sub	objptr, ##1536
09a4c     32 BB 02 F1 | 	add	local11, objptr
09a50     08 BA 06 F1 | 	add	local11, #8
09a54     5D B3 62 FC | 	wrlong	local07, local11
09a58     03 00 00 FF 
09a5c     00 64 06 F1 | 	add	objptr, ##1536
09a60     32 AF 02 FB | 	rdlong	local05, objptr
09a64     01 AE 06 F1 | 	add	local05, #1
09a68     32 AF 62 FC | 	wrlong	local05, objptr
09a6c     44 AA 06 F6 | 	mov	local03, #68
09a70     53 AF 02 F6 | 	mov	local05, local01
09a74     54 B1 02 F6 | 	mov	local06, local02
09a78     55 B3 02 F6 | 	mov	local07, local03
09a7c     32 B5 02 FB | 	rdlong	local08, objptr
09a80     5A B7 02 F6 | 	mov	local09, local08
09a84     01 B6 66 F0 | 	shl	local09, #1
09a88     5A B7 02 F1 | 	add	local09, local08
09a8c     02 B6 66 F0 | 	shl	local09, #2
09a90     03 00 00 FF 
09a94     00 64 86 F1 | 	sub	objptr, ##1536
09a98     32 B7 02 F1 | 	add	local09, objptr
09a9c     5B AF 62 FC | 	wrlong	local05, local09
09aa0     03 00 00 FF 
09aa4     00 64 06 F1 | 	add	objptr, ##1536
09aa8     32 BB 02 FB | 	rdlong	local11, objptr
09aac     5D B9 02 F6 | 	mov	local10, local11
09ab0     01 B8 66 F0 | 	shl	local10, #1
09ab4     5D B9 02 F1 | 	add	local10, local11
09ab8     02 B8 66 F0 | 	shl	local10, #2
09abc     03 00 00 FF 
09ac0     00 64 86 F1 | 	sub	objptr, ##1536
09ac4     32 B9 02 F1 | 	add	local10, objptr
09ac8     04 B8 06 F1 | 	add	local10, #4
09acc     5C B1 62 FC | 	wrlong	local06, local10
09ad0     03 00 00 FF 
09ad4     00 64 06 F1 | 	add	objptr, ##1536
09ad8     32 B9 02 FB | 	rdlong	local10, objptr
09adc     5C BB 02 F6 | 	mov	local11, local10
09ae0     01 BA 66 F0 | 	shl	local11, #1
09ae4     5C BB 02 F1 | 	add	local11, local10
09ae8     02 BA 66 F0 | 	shl	local11, #2
09aec     03 00 00 FF 
09af0     00 64 86 F1 | 	sub	objptr, ##1536
09af4     32 BB 02 F1 | 	add	local11, objptr
09af8     08 BA 06 F1 | 	add	local11, #8
09afc     5D B3 62 FC | 	wrlong	local07, local11
09b00     03 00 00 FF 
09b04     00 64 06 F1 | 	add	objptr, ##1536
09b08     32 AF 02 FB | 	rdlong	local05, objptr
09b0c     01 AE 06 F1 | 	add	local05, #1
09b10     32 AF 62 FC | 	wrlong	local05, objptr
09b14     4C 00 00 FF 
09b18     20 64 86 F1 | 	sub	objptr, ##38944
09b1c                 | LR__0873
09b1c                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09b1c     38 00 00 FF 
09b20     E8 65 06 F1 | 	add	objptr, ##29160
09b24     32 AD 02 FB | 	rdlong	local04, objptr
09b28     03 AC 66 F0 | 	shl	local04, #3
09b2c     02 00 00 FF 
09b30     38 64 86 F1 | 	sub	objptr, ##1080
09b34     32 AD 02 F1 | 	add	local04, objptr
09b38     04 AC 06 F1 | 	add	local04, #4
09b3c     56 B5 02 FB | 	rdlong	local08, local04
09b40     FE B5 0E F2 | 	cmp	local08, #510 wz
09b44     36 00 00 FF 
09b48     B0 65 86 F1 | 	sub	objptr, ##28080
09b4c     B8 00 90 5D |  if_ne	jmp	#LR__0874
09b50     44 AA 06 F6 | 	mov	local03, #68
09b54     53 AF 02 F6 | 	mov	local05, local01
09b58     54 B1 02 F6 | 	mov	local06, local02
09b5c     55 B3 02 F6 | 	mov	local07, local03
09b60     4C 00 00 FF 
09b64     20 64 06 F1 | 	add	objptr, ##38944
09b68     32 B5 02 FB | 	rdlong	local08, objptr
09b6c     5A B7 02 F6 | 	mov	local09, local08
09b70     01 B6 66 F0 | 	shl	local09, #1
09b74     5A B7 02 F1 | 	add	local09, local08
09b78     02 B6 66 F0 | 	shl	local09, #2
09b7c     03 00 00 FF 
09b80     00 64 86 F1 | 	sub	objptr, ##1536
09b84     32 B7 02 F1 | 	add	local09, objptr
09b88     5B AF 62 FC | 	wrlong	local05, local09
09b8c     03 00 00 FF 
09b90     00 64 06 F1 | 	add	objptr, ##1536
09b94     32 BB 02 FB | 	rdlong	local11, objptr
09b98     5D B9 02 F6 | 	mov	local10, local11
09b9c     01 B8 66 F0 | 	shl	local10, #1
09ba0     5D B9 02 F1 | 	add	local10, local11
09ba4     02 B8 66 F0 | 	shl	local10, #2
09ba8     03 00 00 FF 
09bac     00 64 86 F1 | 	sub	objptr, ##1536
09bb0     32 B9 02 F1 | 	add	local10, objptr
09bb4     04 B8 06 F1 | 	add	local10, #4
09bb8     5C B1 62 FC | 	wrlong	local06, local10
09bbc     03 00 00 FF 
09bc0     00 64 06 F1 | 	add	objptr, ##1536
09bc4     32 B9 02 FB | 	rdlong	local10, objptr
09bc8     5C BB 02 F6 | 	mov	local11, local10
09bcc     01 BA 66 F0 | 	shl	local11, #1
09bd0     5C BB 02 F1 | 	add	local11, local10
09bd4     02 BA 66 F0 | 	shl	local11, #2
09bd8     03 00 00 FF 
09bdc     00 64 86 F1 | 	sub	objptr, ##1536
09be0     32 BB 02 F1 | 	add	local11, objptr
09be4     08 BA 06 F1 | 	add	local11, #8
09be8     5D B3 62 FC | 	wrlong	local07, local11
09bec     03 00 00 FF 
09bf0     00 64 06 F1 | 	add	objptr, ##1536
09bf4     32 AF 02 FB | 	rdlong	local05, objptr
09bf8     01 AE 06 F1 | 	add	local05, #1
09bfc     32 AF 62 FC | 	wrlong	local05, objptr
09c00     4C 00 00 FF 
09c04     20 64 86 F1 | 	sub	objptr, ##38944
09c08                 | LR__0874
09c08                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09c08     38 00 00 FF 
09c0c     E8 65 06 F1 | 	add	objptr, ##29160
09c10     32 AD 02 FB | 	rdlong	local04, objptr
09c14     03 AC 66 F0 | 	shl	local04, #3
09c18     02 00 00 FF 
09c1c     38 64 86 F1 | 	sub	objptr, ##1080
09c20     32 AD 02 F1 | 	add	local04, objptr
09c24     04 AC 06 F1 | 	add	local04, #4
09c28     56 B5 02 FB | 	rdlong	local08, local04
09c2c     11 B4 0E F2 | 	cmp	local08, #17 wz
09c30     36 00 00 FF 
09c34     B0 65 86 F1 | 	sub	objptr, ##28080
09c38     6C 00 90 AD |  if_e	jmp	#LR__0875
09c3c     38 00 00 FF 
09c40     E8 65 06 F1 | 	add	objptr, ##29160
09c44     32 B5 02 FB | 	rdlong	local08, objptr
09c48     03 B4 66 F0 | 	shl	local08, #3
09c4c     02 00 00 FF 
09c50     38 64 86 F1 | 	sub	objptr, ##1080
09c54     32 B5 02 F1 | 	add	local08, objptr
09c58     04 B4 06 F1 | 	add	local08, #4
09c5c     5A B5 02 FB | 	rdlong	local08, local08
09c60     12 B4 0E F2 | 	cmp	local08, #18 wz
09c64     36 00 00 FF 
09c68     B0 65 86 F1 | 	sub	objptr, ##28080
09c6c     38 00 90 AD |  if_e	jmp	#LR__0875
09c70     38 00 00 FF 
09c74     E8 65 06 F1 | 	add	objptr, ##29160
09c78     32 BB 02 FB | 	rdlong	local11, objptr
09c7c     03 BA 66 F0 | 	shl	local11, #3
09c80     02 00 00 FF 
09c84     38 64 86 F1 | 	sub	objptr, ##1080
09c88     32 BB 02 F1 | 	add	local11, objptr
09c8c     04 BA 06 F1 | 	add	local11, #4
09c90     5D BB 02 FB | 	rdlong	local11, local11
09c94     FE BB 0E F2 | 	cmp	local11, #510 wz
09c98     36 00 00 FF 
09c9c     B0 65 86 F1 | 	sub	objptr, ##28080
09ca0     16 7A 06 56 |  if_ne	mov	result1, #22
09ca4     68 00 90 5D |  if_ne	jmp	#LR__0877
09ca8                 | LR__0875
09ca8     38 00 00 FF 
09cac     E8 65 06 F1 | 	add	objptr, ##29160
09cb0     32 AD 02 FB | 	rdlong	local04, objptr
09cb4     01 AC 06 F1 | 	add	local04, #1
09cb8     32 AD 62 FC | 	wrlong	local04, objptr
09cbc     03 AC 66 F0 | 	shl	local04, #3
09cc0     02 00 00 FF 
09cc4     38 64 86 F1 | 	sub	objptr, ##1080
09cc8     32 AD 02 F1 | 	add	local04, objptr
09ccc     04 AC 06 F1 | 	add	local04, #4
09cd0     56 B5 02 FB | 	rdlong	local08, local04
09cd4     FE B5 0E F2 | 	cmp	local08, #510 wz
09cd8     36 00 00 FF 
09cdc     B0 65 86 F1 | 	sub	objptr, ##28080
09ce0     28 00 90 AD |  if_e	jmp	#LR__0876
09ce4     38 00 00 FF 
09ce8     E8 65 06 F1 | 	add	objptr, ##29160
09cec     32 BB 02 FB | 	rdlong	local11, objptr
09cf0     0E 00 00 FF 
09cf4     1C 64 06 F1 | 	add	objptr, ##7196
09cf8     32 B9 02 FB | 	rdlong	local10, objptr
09cfc     47 00 00 FF 
09d00     04 64 86 F1 | 	sub	objptr, ##36356
09d04     5C BB 52 F2 | 	cmps	local11, local10 wc
09d08     E4 FA 9F CD |  if_b	jmp	#LR__0871
09d0c                 | LR__0876
09d0c                 | ' return 0
09d0c     00 7A 06 F6 | 	mov	result1, #0
09d10                 | LR__0877
09d10     E7 F0 03 F6 | 	mov	ptra, fp
09d14     F2 00 A0 FD | 	call	#popregs_
09d18                 | _compile_print_ret
09d18     2D 00 64 FD | 	ret
09d1c                 | 
09d1c                 | ' 
09d1c                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09d1c                 | ' 
09d1c                 | ' function compile_if(aline as ulong) as ulong  
09d1c                 | _compile_if
09d1c     09 CA 05 F6 | 	mov	COUNT_, #9
09d20     E8 00 A0 FD | 	call	#pushregs_
09d24                 | _compile_if_enter
09d24     49 AD 02 F6 | 	mov	local04, arg01
09d28                 | ' return expr()
09d28     2C 21 B0 FD | 	call	#_expr
09d2c     38 00 00 FF 
09d30     E8 65 06 F1 | 	add	objptr, ##29160
09d34     32 95 02 FB | 	rdlong	arg02, objptr
09d38     4A AF 02 F6 | 	mov	local05, arg02
09d3c     03 AE 66 F0 | 	shl	local05, #3
09d40     02 00 00 FF 
09d44     38 64 86 F1 | 	sub	objptr, ##1080
09d48     32 AF 02 F1 | 	add	local05, objptr
09d4c     04 AE 06 F1 | 	add	local05, #4
09d50     57 AF 02 FB | 	rdlong	local05, local05
09d54     01 94 06 F1 | 	add	arg02, #1
09d58     02 00 00 FF 
09d5c     38 64 06 F1 | 	add	objptr, ##1080
09d60     32 95 62 FC | 	wrlong	arg02, objptr
09d64     38 00 00 FF 
09d68     E8 65 86 F1 | 	sub	objptr, ##29160
09d6c                 | ' 
09d6c                 | ' err=compile_fun_1p()
09d6c                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09d6c     5B AE 0E F2 | 	cmp	local05, #91 wz
09d70     34 7A 06 56 |  if_ne	mov	result1, #52
09d74     20 01 90 5D |  if_ne	jmp	#LR__0882
09d78     58 AA 06 F6 | 	mov	local03, #88
09d7c     53 B1 02 F6 | 	mov	local06, local01
09d80     54 B3 02 F6 | 	mov	local07, local02
09d84     55 95 02 F6 | 	mov	arg02, local03
09d88     4C 00 00 FF 
09d8c     20 64 06 F1 | 	add	objptr, ##38944
09d90     32 93 02 FB | 	rdlong	arg01, objptr
09d94     49 B5 02 F6 | 	mov	local08, arg01
09d98     01 B4 66 F0 | 	shl	local08, #1
09d9c     49 B5 02 F1 | 	add	local08, arg01
09da0     02 B4 66 F0 | 	shl	local08, #2
09da4     03 00 00 FF 
09da8     00 64 86 F1 | 	sub	objptr, ##1536
09dac     32 B5 02 F1 | 	add	local08, objptr
09db0     5A B1 62 FC | 	wrlong	local06, local08
09db4     03 00 00 FF 
09db8     00 64 06 F1 | 	add	objptr, ##1536
09dbc     32 B1 02 FB | 	rdlong	local06, objptr
09dc0     58 93 02 F6 | 	mov	arg01, local06
09dc4     01 92 66 F0 | 	shl	arg01, #1
09dc8     58 93 02 F1 | 	add	arg01, local06
09dcc     02 92 66 F0 | 	shl	arg01, #2
09dd0     03 00 00 FF 
09dd4     00 64 86 F1 | 	sub	objptr, ##1536
09dd8     32 93 02 F1 | 	add	arg01, objptr
09ddc     04 92 06 F1 | 	add	arg01, #4
09de0     49 B3 62 FC | 	wrlong	local07, arg01
09de4     03 00 00 FF 
09de8     00 64 06 F1 | 	add	objptr, ##1536
09dec     32 B1 02 FB | 	rdlong	local06, objptr
09df0     58 93 02 F6 | 	mov	arg01, local06
09df4     01 92 66 F0 | 	shl	arg01, #1
09df8     58 93 02 F1 | 	add	arg01, local06
09dfc     02 92 66 F0 | 	shl	arg01, #2
09e00     03 00 00 FF 
09e04     00 64 86 F1 | 	sub	objptr, ##1536
09e08     32 93 02 F1 | 	add	arg01, objptr
09e0c     08 92 06 F1 | 	add	arg01, #8
09e10     49 95 62 FC | 	wrlong	arg02, arg01
09e14     03 00 00 FF 
09e18     00 64 06 F1 | 	add	objptr, ##1536
09e1c     32 B1 02 FB | 	rdlong	local06, objptr
09e20     01 B0 06 F1 | 	add	local06, #1
09e24     32 B1 62 FC | 	wrlong	local06, objptr
09e28                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09e28                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09e28     13 00 00 FF 
09e2c     38 64 86 F1 | 	sub	objptr, ##9784
09e30     32 95 02 FB | 	rdlong	arg02, objptr
09e34     01 94 06 F1 | 	add	arg02, #1
09e38     03 94 66 F0 | 	shl	arg02, #3
09e3c     02 00 00 FF 
09e40     38 64 86 F1 | 	sub	objptr, ##1080
09e44     32 95 02 F1 | 	add	arg02, objptr
09e48     4A 93 02 FB | 	rdlong	arg01, arg02
09e4c     36 00 00 FF 
09e50     B0 65 86 F1 | 	sub	objptr, ##28080
09e54                 | ' 
09e54                 | ' select case s
09e54     92 01 00 FF 
09e58     A6 94 06 F6 | 	mov	arg02, ##@LR__5629
09e5c     58 A9 B1 FD | 	call	#__system___string_cmp
09e60     00 7A 0E F2 | 	cmp	result1, #0 wz
09e64     1B 7A 06 A6 |  if_e	mov	result1, #27
09e68     00 7A 06 56 |  if_ne	mov	result1, #0
09e6c     00 7A 0E F2 | 	cmp	result1, #0 wz
09e70     10 00 90 AD |  if_e	jmp	#LR__0880
09e74     05 92 06 F6 | 	mov	arg01, #5
09e78     4C E4 BF FD | 	call	#_compile_immediate_assign
09e7c     3D B7 02 F6 | 	mov	local09, result1
09e80     10 00 90 FD | 	jmp	#LR__0881
09e84                 | LR__0880
09e84     05 92 06 F6 | 	mov	arg01, #5
09e88     56 95 02 F6 | 	mov	arg02, local04
09e8c     50 DA BF FD | 	call	#_compile_immediate
09e90     3D B7 02 F6 | 	mov	local09, result1
09e94                 | LR__0881
09e94                 | ' return err
09e94     5B 7B 02 F6 | 	mov	result1, local09
09e98                 | LR__0882
09e98     E7 F0 03 F6 | 	mov	ptra, fp
09e9c     F2 00 A0 FD | 	call	#popregs_
09ea0                 | _compile_if_ret
09ea0     2D 00 64 FD | 	ret
09ea4                 | 
09ea4                 | ' 
09ea4                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09ea4                 | ' 
09ea4                 | ' function compile_else(aline as ulong) as ulong  
09ea4                 | _compile_else
09ea4     07 CA 05 F6 | 	mov	COUNT_, #7
09ea8     E8 00 A0 FD | 	call	#pushregs_
09eac                 | _compile_else_enter
09eac     49 AD 02 F6 | 	mov	local04, arg01
09eb0     5A AA 06 F6 | 	mov	local03, #90
09eb4     53 AF 02 F6 | 	mov	local05, local01
09eb8     54 B1 02 F6 | 	mov	local06, local02
09ebc     55 A7 02 F6 | 	mov	local01, local03
09ec0     4C 00 00 FF 
09ec4     20 64 06 F1 | 	add	objptr, ##38944
09ec8     32 95 02 FB | 	rdlong	arg02, objptr
09ecc     4A 93 02 F6 | 	mov	arg01, arg02
09ed0     01 92 66 F0 | 	shl	arg01, #1
09ed4     4A 93 02 F1 | 	add	arg01, arg02
09ed8     02 92 66 F0 | 	shl	arg01, #2
09edc     03 00 00 FF 
09ee0     00 64 86 F1 | 	sub	objptr, ##1536
09ee4     32 93 02 F1 | 	add	arg01, objptr
09ee8     49 AF 62 FC | 	wrlong	local05, arg01
09eec     03 00 00 FF 
09ef0     00 64 06 F1 | 	add	objptr, ##1536
09ef4     32 AF 02 FB | 	rdlong	local05, objptr
09ef8     57 95 02 F6 | 	mov	arg02, local05
09efc     01 94 66 F0 | 	shl	arg02, #1
09f00     57 95 02 F1 | 	add	arg02, local05
09f04     02 94 66 F0 | 	shl	arg02, #2
09f08     03 00 00 FF 
09f0c     00 64 86 F1 | 	sub	objptr, ##1536
09f10     32 95 02 F1 | 	add	arg02, objptr
09f14     04 94 06 F1 | 	add	arg02, #4
09f18     4A B1 62 FC | 	wrlong	local06, arg02
09f1c     03 00 00 FF 
09f20     00 64 06 F1 | 	add	objptr, ##1536
09f24     32 B1 02 FB | 	rdlong	local06, objptr
09f28     58 AF 02 F6 | 	mov	local05, local06
09f2c     01 AE 66 F0 | 	shl	local05, #1
09f30     58 AF 02 F1 | 	add	local05, local06
09f34     02 AE 66 F0 | 	shl	local05, #2
09f38     03 00 00 FF 
09f3c     00 64 86 F1 | 	sub	objptr, ##1536
09f40     32 AF 02 F1 | 	add	local05, objptr
09f44     08 AE 06 F1 | 	add	local05, #8
09f48     57 A7 62 FC | 	wrlong	local01, local05
09f4c     03 00 00 FF 
09f50     00 64 06 F1 | 	add	objptr, ##1536
09f54     32 AF 02 FB | 	rdlong	local05, objptr
09f58     01 AE 06 F1 | 	add	local05, #1
09f5c     32 AF 62 FC | 	wrlong	local05, objptr
09f60                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09f60                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09f60     13 00 00 FF 
09f64     38 64 86 F1 | 	sub	objptr, ##9784
09f68     32 B1 02 FB | 	rdlong	local06, objptr
09f6c     01 B0 06 F1 | 	add	local06, #1
09f70     03 B0 66 F0 | 	shl	local06, #3
09f74     02 00 00 FF 
09f78     38 64 86 F1 | 	sub	objptr, ##1080
09f7c     32 B1 02 F1 | 	add	local06, objptr
09f80     58 93 02 FB | 	rdlong	arg01, local06
09f84     36 00 00 FF 
09f88     B0 65 86 F1 | 	sub	objptr, ##28080
09f8c                 | ' 
09f8c                 | ' select case s
09f8c     92 01 00 FF 
09f90     A6 94 06 F6 | 	mov	arg02, ##@LR__5629
09f94     20 A8 B1 FD | 	call	#__system___string_cmp
09f98     00 7A 0E F2 | 	cmp	result1, #0 wz
09f9c     1B 7A 06 A6 |  if_e	mov	result1, #27
09fa0     00 7A 06 56 |  if_ne	mov	result1, #0
09fa4     00 7A 0E F2 | 	cmp	result1, #0 wz
09fa8     10 00 90 AD |  if_e	jmp	#LR__0890
09fac     05 92 06 F6 | 	mov	arg01, #5
09fb0     14 E3 BF FD | 	call	#_compile_immediate_assign
09fb4     3D B3 02 F6 | 	mov	local07, result1
09fb8     10 00 90 FD | 	jmp	#LR__0891
09fbc                 | LR__0890
09fbc     05 92 06 F6 | 	mov	arg01, #5
09fc0     56 95 02 F6 | 	mov	arg02, local04
09fc4     18 D9 BF FD | 	call	#_compile_immediate
09fc8     3D B3 02 F6 | 	mov	local07, result1
09fcc                 | LR__0891
09fcc                 | ' return err
09fcc     59 7B 02 F6 | 	mov	result1, local07
09fd0     E7 F0 03 F6 | 	mov	ptra, fp
09fd4     F2 00 A0 FD | 	call	#popregs_
09fd8                 | _compile_else_ret
09fd8     2D 00 64 FD | 	ret
09fdc                 | 
09fdc                 | ' 
09fdc                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09fdc                 | ' 
09fdc                 | ' function compile_dim() as ulong  
09fdc                 | _compile_dim
09fdc     11 CA 05 F6 | 	mov	COUNT_, #17
09fe0     E8 00 A0 FD | 	call	#pushregs_
09fe4     01 A6 06 F6 | 	mov	local01, #1
09fe8     01 A8 06 F6 | 	mov	local02, #1
09fec     01 AA 06 F6 | 	mov	local03, #1
09ff0                 | ' 
09ff0                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09ff0                 | ' if isname(lparts(ct).part$) then 
09ff0     38 00 00 FF 
09ff4     E8 65 06 F1 | 	add	objptr, ##29160
09ff8     32 99 02 FB | 	rdlong	arg04, objptr
09ffc     03 98 66 F0 | 	shl	arg04, #3
0a000     02 00 00 FF 
0a004     38 64 86 F1 | 	sub	objptr, ##1080
0a008     32 99 02 F1 | 	add	arg04, objptr
0a00c     4C 93 02 FB | 	rdlong	arg01, arg04
0a010     36 00 00 FF 
0a014     B0 65 86 F1 | 	sub	objptr, ##28080
0a018     C4 C7 BF FD | 	call	#_isname
0a01c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a020     58 05 90 AD |  if_e	jmp	#LR__0923
0a024     38 00 00 FF 
0a028     E8 65 06 F1 | 	add	objptr, ##29160
0a02c     32 AD 02 FB | 	rdlong	local04, objptr
0a030     03 AC 66 F0 | 	shl	local04, #3
0a034     02 00 00 FF 
0a038     38 64 86 F1 | 	sub	objptr, ##1080
0a03c     32 AD 02 F1 | 	add	local04, objptr
0a040     56 AF 02 FB | 	rdlong	local05, local04
0a044     01 B0 66 F6 | 	neg	local06, #1
0a048                 | '   varname2$=lparts(ct).part$ 
0a048                 | '   j=-1
0a048                 | '   if varnum>0 then
0a048     04 64 86 F1 | 	sub	objptr, #4
0a04c     32 B3 02 FB | 	rdlong	local07, objptr
0a050     36 00 00 FF 
0a054     AC 65 86 F1 | 	sub	objptr, ##28076
0a058     01 B2 56 F2 | 	cmps	local07, #1 wc
0a05c     54 00 90 CD |  if_b	jmp	#LR__0902
0a060                 | '     for i=0 to varnum-1
0a060     00 B4 06 F6 | 	mov	local08, #0
0a064     36 00 00 FF 
0a068     AC 65 06 F1 | 	add	objptr, ##28076
0a06c     32 B7 02 FB | 	rdlong	local09, objptr
0a070     36 00 00 FF 
0a074     AC 65 86 F1 | 	sub	objptr, ##28076
0a078                 | LR__0900
0a078     5B B5 52 F2 | 	cmps	local08, local09 wc
0a07c     34 00 90 3D |  if_ae	jmp	#LR__0901
0a080                 | '       if variables(i).name=varname2$ then j=i : exit
0a080     5A AD 02 F6 | 	mov	local04, local08
0a084     04 AC 66 F0 | 	shl	local04, #4
0a088     32 95 02 F6 | 	mov	arg02, objptr
0a08c     16 00 00 FF 
0a090     9C 95 06 F1 | 	add	arg02, ##11676
0a094     4A AD 02 F1 | 	add	local04, arg02
0a098     56 93 02 FB | 	rdlong	arg01, local04
0a09c     57 95 02 F6 | 	mov	arg02, local05
0a0a0     14 A7 B1 FD | 	call	#__system___string_cmp
0a0a4     00 7A 0E F2 | 	cmp	result1, #0 wz
0a0a8     5A B1 02 A6 |  if_e	mov	local06, local08
0a0ac     01 B4 06 51 |  if_ne	add	local08, #1
0a0b0     C4 FF 9F 5D |  if_ne	jmp	#LR__0900
0a0b4                 | LR__0901
0a0b4                 | LR__0902
0a0b4                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
0a0b4     FF FF 7F FF 
0a0b8     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0a0bc     36 00 00 AF 
0a0c0     AC 65 06 A1 |  if_e	add	objptr, ##28076
0a0c4     32 B1 02 AB |  if_e	rdlong	local06, objptr
0a0c8     36 00 00 AF 
0a0cc     AC 65 86 A1 |  if_e	sub	objptr, ##28076
0a0d0     78 00 90 AD |  if_e	jmp	#LR__0903
0a0d4     00 92 06 F6 | 	mov	arg01, #0
0a0d8     38 FC B1 FD | 	call	#__system___getiolock_0622
0a0dc     3D 93 02 F6 | 	mov	arg01, result1
0a0e0     AC A6 B1 FD | 	call	#__system___lockmem
0a0e4     94 01 00 FF 
0a0e8     B3 95 06 F6 | 	mov	arg02, ##@LR__5901
0a0ec     00 92 06 F6 | 	mov	arg01, #0
0a0f0     00 96 06 F6 | 	mov	arg03, #0
0a0f4     8C B3 B1 FD | 	call	#__system___basic_print_string
0a0f8     54 00 00 FF 
0a0fc     8C 64 06 F1 | 	add	objptr, ##43148
0a100     32 95 02 FB | 	rdlong	arg02, objptr
0a104     54 00 00 FF 
0a108     8C 64 86 F1 | 	sub	objptr, ##43148
0a10c     00 92 06 F6 | 	mov	arg01, #0
0a110     00 96 06 F6 | 	mov	arg03, #0
0a114     0A 98 06 F6 | 	mov	arg04, #10
0a118     EC B3 B1 FD | 	call	#__system___basic_print_unsigned
0a11c     94 01 00 FF 
0a120     C1 95 06 F6 | 	mov	arg02, ##@LR__5902
0a124     00 92 06 F6 | 	mov	arg01, #0
0a128     00 96 06 F6 | 	mov	arg03, #0
0a12c     54 B3 B1 FD | 	call	#__system___basic_print_string
0a130     00 92 06 F6 | 	mov	arg01, #0
0a134     0A 94 06 F6 | 	mov	arg02, #10
0a138     00 96 06 F6 | 	mov	arg03, #0
0a13c     EC B2 B1 FD | 	call	#__system___basic_print_char
0a140     00 92 06 F6 | 	mov	arg01, #0
0a144     CC FB B1 FD | 	call	#__system___getiolock_0622
0a148     3D 01 68 FC | 	wrlong	#0, result1
0a14c                 | LR__0903
0a14c                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
0a14c     38 00 00 FF 
0a150     E8 65 06 F1 | 	add	objptr, ##29160
0a154     32 95 02 FB | 	rdlong	arg02, objptr
0a158     01 94 06 F1 | 	add	arg02, #1
0a15c     03 94 66 F0 | 	shl	arg02, #3
0a160     02 00 00 FF 
0a164     38 64 86 F1 | 	sub	objptr, ##1080
0a168     32 95 02 F1 | 	add	arg02, objptr
0a16c     4A 93 02 FB | 	rdlong	arg01, arg02
0a170     94 01 00 FF 
0a174     E2 95 06 F6 | 	mov	arg02, ##@LR__5903
0a178     36 00 00 FF 
0a17c     B0 65 86 F1 | 	sub	objptr, ##28080
0a180     34 A6 B1 FD | 	call	#__system___string_cmp
0a184     00 7A 0E F2 | 	cmp	result1, #0 wz
0a188     44 00 90 AD |  if_e	jmp	#LR__0904
0a18c     38 00 00 FF 
0a190     E8 65 06 F1 | 	add	objptr, ##29160
0a194     32 B7 02 FB | 	rdlong	local09, objptr
0a198     01 B6 06 F1 | 	add	local09, #1
0a19c     03 B6 66 F0 | 	shl	local09, #3
0a1a0     02 00 00 FF 
0a1a4     38 64 86 F1 | 	sub	objptr, ##1080
0a1a8     32 B7 02 F1 | 	add	local09, objptr
0a1ac     5B 93 02 FB | 	rdlong	arg01, local09
0a1b0     94 01 00 FF 
0a1b4     E4 95 06 F6 | 	mov	arg02, ##@LR__5904
0a1b8     36 00 00 FF 
0a1bc     B0 65 86 F1 | 	sub	objptr, ##28080
0a1c0     F4 A5 B1 FD | 	call	#__system___string_cmp
0a1c4     00 7A 0E F2 | 	cmp	result1, #0 wz
0a1c8     2B 7A 06 56 |  if_ne	mov	result1, #43
0a1cc     B4 04 90 5D |  if_ne	jmp	#LR__0925
0a1d0                 | LR__0904
0a1d0                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
0a1d0     38 00 00 FF 
0a1d4     E8 65 06 F1 | 	add	objptr, ##29160
0a1d8     32 95 02 FB | 	rdlong	arg02, objptr
0a1dc     01 94 06 F1 | 	add	arg02, #1
0a1e0     03 94 66 F0 | 	shl	arg02, #3
0a1e4     02 00 00 FF 
0a1e8     38 64 86 F1 | 	sub	objptr, ##1080
0a1ec     32 95 02 F1 | 	add	arg02, objptr
0a1f0     4A 93 02 FB | 	rdlong	arg01, arg02
0a1f4     94 01 00 FF 
0a1f8     E7 95 06 F6 | 	mov	arg02, ##@LR__5905
0a1fc     36 00 00 FF 
0a200     B0 65 86 F1 | 	sub	objptr, ##28080
0a204     B0 A5 B1 FD | 	call	#__system___string_cmp
0a208     00 7A 0E F2 | 	cmp	result1, #0 wz
0a20c     38 00 00 AF 
0a210     E8 65 06 A1 |  if_e	add	objptr, ##29160
0a214     32 B9 02 AB |  if_e	rdlong	local10, objptr
0a218     38 00 00 AF 
0a21c     E8 65 86 A1 |  if_e	sub	objptr, ##29160
0a220     01 B8 06 A1 |  if_e	add	local10, #1
0a224     48 01 90 AD |  if_e	jmp	#LR__0909
0a228     38 00 00 FF 
0a22c     E8 65 06 F1 | 	add	objptr, ##29160
0a230     32 B9 02 FB | 	rdlong	local10, objptr
0a234     38 00 00 FF 
0a238     E8 65 86 F1 | 	sub	objptr, ##29160
0a23c     02 B8 06 F1 | 	add	local10, #2
0a240     00 BA 06 F6 | 	mov	local11, #0
0a244                 | '   l=ct+2 : m=0 : do
0a244                 | LR__0905
0a244                 | '   if isdec(lparts(l).part$) then 
0a244     5C AD 02 F6 | 	mov	local04, local10
0a248     03 AC 66 F0 | 	shl	local04, #3
0a24c     32 B7 02 F6 | 	mov	local09, objptr
0a250     36 00 00 FF 
0a254     B0 B7 06 F1 | 	add	local09, ##28080
0a258     5B AD 02 F1 | 	add	local04, local09
0a25c     56 93 02 FB | 	rdlong	arg01, local04
0a260     80 CE BF FD | 	call	#_isdec
0a264     00 7A 0E F2 | 	cmp	result1, #0 wz
0a268     40 00 90 AD |  if_e	jmp	#LR__0906
0a26c     5D BD 02 F6 | 	mov	local12, local11
0a270     53 BD 06 F1 | 	add	local12, #local01
0a274     5C B7 02 F6 | 	mov	local09, local10
0a278     03 B6 66 F0 | 	shl	local09, #3
0a27c     32 B5 02 F6 | 	mov	local08, objptr
0a280     36 00 00 FF 
0a284     B0 B5 06 F1 | 	add	local08, ##28080
0a288     5A B7 02 F1 | 	add	local09, local08
0a28c     5B 93 02 FB | 	rdlong	arg01, local09
0a290     00 94 06 F6 | 	mov	arg02, #0
0a294     4C D2 B1 FD | 	call	#__system____builtin_atoi
0a298     3D BF 02 F6 | 	mov	local13, result1
0a29c                 | 	'.live	local13
0a29c                 | 	'.live	local12
0a29c     00 BC 8E F9 | 	altd	local12, #0
0a2a0     5F BD 02 F6 | 	mov	local12, local13
0a2a4     01 BA 06 F1 | 	add	local11, #1
0a2a8     08 00 90 FD | 	jmp	#LR__0907
0a2ac                 | LR__0906
0a2ac                 | '     return(17)
0a2ac     11 7A 06 F6 | 	mov	result1, #17
0a2b0     D0 03 90 FD | 	jmp	#LR__0925
0a2b4                 | LR__0907
0a2b4                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a2b4     5C AD 02 F6 | 	mov	local04, local10
0a2b8     01 AC 06 F1 | 	add	local04, #1
0a2bc     03 AC 66 F0 | 	shl	local04, #3
0a2c0     32 BF 02 F6 | 	mov	local13, objptr
0a2c4     36 00 00 FF 
0a2c8     B0 BF 06 F1 | 	add	local13, ##28080
0a2cc     5F AD 02 F1 | 	add	local04, local13
0a2d0     56 93 02 FB | 	rdlong	arg01, local04
0a2d4     94 01 00 FF 
0a2d8     EA 95 06 F6 | 	mov	arg02, ##@LR__5906
0a2dc     D8 A4 B1 FD | 	call	#__system___string_cmp
0a2e0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a2e4     38 00 90 AD |  if_e	jmp	#LR__0908
0a2e8     5C BF 02 F6 | 	mov	local13, local10
0a2ec     01 BE 06 F1 | 	add	local13, #1
0a2f0     03 BE 66 F0 | 	shl	local13, #3
0a2f4     32 BD 02 F6 | 	mov	local12, objptr
0a2f8     36 00 00 FF 
0a2fc     B0 BD 06 F1 | 	add	local12, ##28080
0a300     5E BF 02 F1 | 	add	local13, local12
0a304     5F 93 02 FB | 	rdlong	arg01, local13
0a308     94 01 00 FF 
0a30c     EC 95 06 F6 | 	mov	arg02, ##@LR__5907
0a310     A4 A4 B1 FD | 	call	#__system___string_cmp
0a314     00 7A 0E F2 | 	cmp	result1, #0 wz
0a318     2C 7A 06 56 |  if_ne	mov	result1, #44
0a31c     64 03 90 5D |  if_ne	jmp	#LR__0925
0a320                 | LR__0908
0a320     02 B8 06 F1 | 	add	local10, #2
0a324     5C AD 02 F6 | 	mov	local04, local10
0a328     01 AC 86 F1 | 	sub	local04, #1
0a32c     03 AC 66 F0 | 	shl	local04, #3
0a330     32 BF 02 F6 | 	mov	local13, objptr
0a334     36 00 00 FF 
0a338     B0 BF 06 F1 | 	add	local13, ##28080
0a33c     5F AD 02 F1 | 	add	local04, local13
0a340     56 93 02 FB | 	rdlong	arg01, local04
0a344     94 01 00 FF 
0a348     EE 95 06 F6 | 	mov	arg02, ##@LR__5908
0a34c     68 A4 B1 FD | 	call	#__system___string_cmp
0a350     00 7A 0E F2 | 	cmp	result1, #0 wz
0a354     03 BA 56 52 |  if_ne	cmps	local11, #3 wc
0a358     E8 FE 9F 4D |  if_c_and_nz	jmp	#LR__0905
0a35c                 | '   if m>3 then return 45
0a35c     04 BA 56 F2 | 	cmps	local11, #4 wc
0a360     2D 7A 06 36 |  if_ae	mov	result1, #45
0a364     1C 03 90 3D |  if_ae	jmp	#LR__0925
0a368     00 C1 06 F6 | 	mov	local14, #256
0a36c     0C C2 06 F6 | 	mov	local15, #12
0a370                 | LR__0909
0a370                 | '   arraytype=array_no_type : esize=12
0a370                 | ' 1350 
0a370                 | '   if lparts(l).part$="as" then
0a370     5C AD 02 F6 | 	mov	local04, local10
0a374     03 AC 66 F0 | 	shl	local04, #3
0a378     32 BF 02 F6 | 	mov	local13, objptr
0a37c     36 00 00 FF 
0a380     B0 BF 06 F1 | 	add	local13, ##28080
0a384     5F AD 02 F1 | 	add	local04, local13
0a388     56 93 02 FB | 	rdlong	arg01, local04
0a38c     94 01 00 FF 
0a390     F0 95 06 F6 | 	mov	arg02, ##@LR__5909
0a394     20 A4 B1 FD | 	call	#__system___string_cmp
0a398     00 7A 0E F2 | 	cmp	result1, #0 wz
0a39c     E4 01 90 5D |  if_ne	jmp	#LR__0924
0a3a0                 | '     select case lparts(l+1).part$
0a3a0     5C BD 02 F6 | 	mov	local12, local10
0a3a4     01 BC 06 F1 | 	add	local12, #1
0a3a8     03 BC 66 F0 | 	shl	local12, #3
0a3ac     32 AD 02 F6 | 	mov	local04, objptr
0a3b0     36 00 00 FF 
0a3b4     B0 AD 06 F1 | 	add	local04, ##28080
0a3b8     56 BD 02 F1 | 	add	local12, local04
0a3bc     5E C5 02 FB | 	rdlong	local16, local12
0a3c0     94 01 00 FF 
0a3c4     F3 95 06 F6 | 	mov	arg02, ##@LR__5910
0a3c8     62 93 02 F6 | 	mov	arg01, local16
0a3cc     E8 A3 B1 FD | 	call	#__system___string_cmp
0a3d0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a3d4     0C 01 90 AD |  if_e	jmp	#LR__0910
0a3d8     94 01 00 FF 
0a3dc     F8 95 06 F6 | 	mov	arg02, ##@LR__5911
0a3e0     62 93 02 F6 | 	mov	arg01, local16
0a3e4     D0 A3 B1 FD | 	call	#__system___string_cmp
0a3e8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a3ec     00 01 90 AD |  if_e	jmp	#LR__0911
0a3f0     94 01 00 FF 
0a3f4     FE 95 06 F6 | 	mov	arg02, ##@LR__5912
0a3f8     62 93 02 F6 | 	mov	arg01, local16
0a3fc     B8 A3 B1 FD | 	call	#__system___string_cmp
0a400     00 7A 0E F2 | 	cmp	result1, #0 wz
0a404     F4 00 90 AD |  if_e	jmp	#LR__0912
0a408     95 01 00 FF 
0a40c     04 94 06 F6 | 	mov	arg02, ##@LR__5913
0a410     62 93 02 F6 | 	mov	arg01, local16
0a414     A0 A3 B1 FD | 	call	#__system___string_cmp
0a418     00 7A 0E F2 | 	cmp	result1, #0 wz
0a41c     E8 00 90 AD |  if_e	jmp	#LR__0913
0a420     95 01 00 FF 
0a424     0B 94 06 F6 | 	mov	arg02, ##@LR__5914
0a428     62 93 02 F6 | 	mov	arg01, local16
0a42c     88 A3 B1 FD | 	call	#__system___string_cmp
0a430     00 7A 0E F2 | 	cmp	result1, #0 wz
0a434     DC 00 90 AD |  if_e	jmp	#LR__0914
0a438     95 01 00 FF 
0a43c     10 94 06 F6 | 	mov	arg02, ##@LR__5915
0a440     62 93 02 F6 | 	mov	arg01, local16
0a444     70 A3 B1 FD | 	call	#__system___string_cmp
0a448     00 7A 0E F2 | 	cmp	result1, #0 wz
0a44c     D0 00 90 AD |  if_e	jmp	#LR__0915
0a450     95 01 00 FF 
0a454     18 94 06 F6 | 	mov	arg02, ##@LR__5916
0a458     62 93 02 F6 | 	mov	arg01, local16
0a45c     58 A3 B1 FD | 	call	#__system___string_cmp
0a460     00 7A 0E F2 | 	cmp	result1, #0 wz
0a464     C4 00 90 AD |  if_e	jmp	#LR__0916
0a468     95 01 00 FF 
0a46c     1E 94 06 F6 | 	mov	arg02, ##@LR__5917
0a470     62 93 02 F6 | 	mov	arg01, local16
0a474     40 A3 B1 FD | 	call	#__system___string_cmp
0a478     00 7A 0E F2 | 	cmp	result1, #0 wz
0a47c     B8 00 90 AD |  if_e	jmp	#LR__0917
0a480     95 01 00 FF 
0a484     24 94 06 F6 | 	mov	arg02, ##@LR__5918
0a488     62 93 02 F6 | 	mov	arg01, local16
0a48c     28 A3 B1 FD | 	call	#__system___string_cmp
0a490     00 7A 0E F2 | 	cmp	result1, #0 wz
0a494     AC 00 90 AD |  if_e	jmp	#LR__0918
0a498     95 01 00 FF 
0a49c     2B 94 06 F6 | 	mov	arg02, ##@LR__5919
0a4a0     62 93 02 F6 | 	mov	arg01, local16
0a4a4     10 A3 B1 FD | 	call	#__system___string_cmp
0a4a8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4ac     A0 00 90 AD |  if_e	jmp	#LR__0919
0a4b0     95 01 00 FF 
0a4b4     32 94 06 F6 | 	mov	arg02, ##@LR__5920
0a4b8     62 93 02 F6 | 	mov	arg01, local16
0a4bc     F8 A2 B1 FD | 	call	#__system___string_cmp
0a4c0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4c4     94 00 90 AD |  if_e	jmp	#LR__0920
0a4c8     95 01 00 FF 
0a4cc     39 94 06 F6 | 	mov	arg02, ##@LR__5921
0a4d0     62 93 02 F6 | 	mov	arg01, local16
0a4d4     E0 A2 B1 FD | 	call	#__system___string_cmp
0a4d8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4dc     88 00 90 AD |  if_e	jmp	#LR__0921
0a4e0     90 00 90 FD | 	jmp	#LR__0922
0a4e4                 | LR__0910
0a4e4     01 C1 06 F6 | 	mov	local14, #257
0a4e8     01 C2 06 F6 | 	mov	local15, #1
0a4ec     94 00 90 FD | 	jmp	#LR__0924
0a4f0                 | LR__0911
0a4f0     02 C1 06 F6 | 	mov	local14, #258
0a4f4     01 C2 06 F6 | 	mov	local15, #1
0a4f8     88 00 90 FD | 	jmp	#LR__0924
0a4fc                 | LR__0912
0a4fc     03 C1 06 F6 | 	mov	local14, #259
0a500     02 C2 06 F6 | 	mov	local15, #2
0a504     7C 00 90 FD | 	jmp	#LR__0924
0a508                 | LR__0913
0a508     04 C1 06 F6 | 	mov	local14, #260
0a50c     02 C2 06 F6 | 	mov	local15, #2
0a510     70 00 90 FD | 	jmp	#LR__0924
0a514                 | LR__0914
0a514     05 C1 06 F6 | 	mov	local14, #261
0a518     04 C2 06 F6 | 	mov	local15, #4
0a51c     64 00 90 FD | 	jmp	#LR__0924
0a520                 | LR__0915
0a520     05 C1 06 F6 | 	mov	local14, #261
0a524     04 C2 06 F6 | 	mov	local15, #4
0a528     58 00 90 FD | 	jmp	#LR__0924
0a52c                 | LR__0916
0a52c     06 C1 06 F6 | 	mov	local14, #262
0a530     04 C2 06 F6 | 	mov	local15, #4
0a534     4C 00 90 FD | 	jmp	#LR__0924
0a538                 | LR__0917
0a538     07 C1 06 F6 | 	mov	local14, #263
0a53c     08 C2 06 F6 | 	mov	local15, #8
0a540     40 00 90 FD | 	jmp	#LR__0924
0a544                 | LR__0918
0a544     08 C1 06 F6 | 	mov	local14, #264
0a548     08 C2 06 F6 | 	mov	local15, #8
0a54c     34 00 90 FD | 	jmp	#LR__0924
0a550                 | LR__0919
0a550     09 C1 06 F6 | 	mov	local14, #265
0a554     04 C2 06 F6 | 	mov	local15, #4
0a558     28 00 90 FD | 	jmp	#LR__0924
0a55c                 | LR__0920
0a55c     0A C1 06 F6 | 	mov	local14, #266
0a560     08 C2 06 F6 | 	mov	local15, #8
0a564     1C 00 90 FD | 	jmp	#LR__0924
0a568                 | LR__0921
0a568     0B C1 06 F6 | 	mov	local14, #267
0a56c     04 C2 06 F6 | 	mov	local15, #4
0a570     10 00 90 FD | 	jmp	#LR__0924
0a574                 | LR__0922
0a574     2F 7A 06 F6 | 	mov	result1, #47
0a578     08 01 90 FD | 	jmp	#LR__0925
0a57c                 | LR__0923
0a57c                 | '   return 46
0a57c     2E 7A 06 F6 | 	mov	result1, #46
0a580     00 01 90 FD | 	jmp	#LR__0925
0a584                 | LR__0924
0a584     53 C3 02 FD | 	qmul	local15, local01
0a588     18 B2 62 FD | 	getqx	local07
0a58c     54 B3 02 FD | 	qmul	local07, local02
0a590     18 C4 62 FD | 	getqx	local16
0a594     55 C5 02 FD | 	qmul	local16, local03
0a598     54 00 00 FF 
0a59c     74 64 06 F1 | 	add	objptr, ##43124
0a5a0     32 C7 02 FB | 	rdlong	local17, objptr
0a5a4     60 95 02 F6 | 	mov	arg02, local14
0a5a8     18 C4 62 FD | 	getqx	local16
0a5ac     62 C7 82 F1 | 	sub	local17, local16
0a5b0     10 C6 86 F1 | 	sub	local17, #16
0a5b4     0F C6 26 F5 | 	andn	local17, #15
0a5b8     32 C7 62 FC | 	wrlong	local17, objptr
0a5bc     54 00 00 FF 
0a5c0     74 64 86 F1 | 	sub	objptr, ##43124
0a5c4     63 93 02 F6 | 	mov	arg01, local17
0a5c8     B0 65 B1 FD | 	call	#_psdpoke
0a5cc     63 93 02 F6 | 	mov	arg01, local17
0a5d0     02 92 06 F1 | 	add	arg01, #2
0a5d4     61 95 02 F6 | 	mov	arg02, local15
0a5d8     A0 65 B1 FD | 	call	#_psdpoke
0a5dc     63 93 02 F6 | 	mov	arg01, local17
0a5e0     04 92 06 F1 | 	add	arg01, #4
0a5e4     53 95 02 F6 | 	mov	arg02, local01
0a5e8     44 65 B1 FD | 	call	#_pslpoke
0a5ec     63 93 02 F6 | 	mov	arg01, local17
0a5f0     08 92 06 F1 | 	add	arg01, #8
0a5f4     54 95 02 F6 | 	mov	arg02, local02
0a5f8     34 65 B1 FD | 	call	#_pslpoke
0a5fc     63 93 02 F6 | 	mov	arg01, local17
0a600     0C 92 06 F1 | 	add	arg01, #12
0a604     55 95 02 F6 | 	mov	arg02, local03
0a608     24 65 B1 FD | 	call	#_pslpoke
0a60c     58 BD 02 F6 | 	mov	local12, local06
0a610     04 BC 66 F0 | 	shl	local12, #4
0a614     16 00 00 FF 
0a618     9C 65 06 F1 | 	add	objptr, ##11676
0a61c     32 BD 02 F1 | 	add	local12, objptr
0a620     5E AF 62 FC | 	wrlong	local05, local12
0a624     58 BD 02 F6 | 	mov	local12, local06
0a628     04 BC 66 F0 | 	shl	local12, #4
0a62c     32 BD 02 F1 | 	add	local12, objptr
0a630     04 BC 06 F1 | 	add	local12, #4
0a634     5E C7 62 FC | 	wrlong	local17, local12
0a638     58 BD 02 F6 | 	mov	local12, local06
0a63c     04 BC 66 F0 | 	shl	local12, #4
0a640     32 BD 02 F1 | 	add	local12, objptr
0a644     0C BC 06 F1 | 	add	local12, #12
0a648     5E C1 62 FC | 	wrlong	local14, local12
0a64c                 | ' memtop=arrayptr
0a64c                 | ' psdpoke arrayptr,arraytype 
0a64c                 | ' psdpoke arrayptr+2,esize 
0a64c                 | ' pslpoke arrayptr+4,dims(0)
0a64c                 | ' pslpoke arrayptr+8,dims(1)
0a64c                 | ' pslpoke arrayptr+12,dims(2)
0a64c                 | ' variables(j).name=varname2$
0a64c                 | ' variables(j).value.uresult=arrayptr
0a64c                 | ' variables(j).vartype=arraytype
0a64c                 | ' if j=varnum then varnum+=1
0a64c     20 00 00 FF 
0a650     10 64 06 F1 | 	add	objptr, ##16400
0a654     32 B3 02 FB | 	rdlong	local07, objptr
0a658     36 00 00 FF 
0a65c     AC 65 86 F1 | 	sub	objptr, ##28076
0a660     59 B1 0A F2 | 	cmp	local06, local07 wz
0a664     36 00 00 AF 
0a668     AC 65 06 A1 |  if_e	add	objptr, ##28076
0a66c     32 B3 02 AB |  if_e	rdlong	local07, objptr
0a670     01 B2 06 A1 |  if_e	add	local07, #1
0a674     32 B3 62 AC |  if_e	wrlong	local07, objptr
0a678     36 00 00 AF 
0a67c     AC 65 86 A1 |  if_e	sub	objptr, ##28076
0a680                 | ' return 0
0a680     00 7A 06 F6 | 	mov	result1, #0
0a684                 | LR__0925
0a684     E7 F0 03 F6 | 	mov	ptra, fp
0a688     F2 00 A0 FD | 	call	#popregs_
0a68c                 | _compile_dim_ret
0a68c     2D 00 64 FD | 	ret
0a690                 | 
0a690                 | ' 
0a690                 | ' '----- compile 'for' command. 
0a690                 | ' 
0a690                 | ' function compile_for() as ulong  
0a690                 | _compile_for
0a690     0F CA 05 F6 | 	mov	COUNT_, #15
0a694     E8 00 A0 FD | 	call	#pushregs_
0a698                 | ' 
0a698                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a698     38 00 00 FF 
0a69c     E8 65 06 F1 | 	add	objptr, ##29160
0a6a0     32 95 02 FB | 	rdlong	arg02, objptr
0a6a4     01 94 06 F1 | 	add	arg02, #1
0a6a8     03 94 66 F0 | 	shl	arg02, #3
0a6ac     02 00 00 FF 
0a6b0     38 64 86 F1 | 	sub	objptr, ##1080
0a6b4     32 95 02 F1 | 	add	arg02, objptr
0a6b8     4A 93 02 FB | 	rdlong	arg01, arg02
0a6bc     36 00 00 FF 
0a6c0     B0 65 86 F1 | 	sub	objptr, ##28080
0a6c4                 | ' 
0a6c4                 | ' select case s
0a6c4     92 01 00 FF 
0a6c8     A6 94 06 F6 | 	mov	arg02, ##@LR__5629
0a6cc     E8 A0 B1 FD | 	call	#__system___string_cmp
0a6d0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a6d4     1B 7A 06 A6 |  if_e	mov	result1, #27
0a6d8     00 7A 06 56 |  if_ne	mov	result1, #0
0a6dc     00 7A 0E F2 | 	cmp	result1, #0 wz
0a6e0     0C 00 90 AD |  if_e	jmp	#LR__0930
0a6e4     05 92 06 F6 | 	mov	arg01, #5
0a6e8     DC DB BF FD | 	call	#_compile_immediate_assign
0a6ec     08 00 90 FD | 	jmp	#LR__0931
0a6f0                 | LR__0930
0a6f0     20 7A 06 F6 | 	mov	result1, #32
0a6f4     64 08 90 FD | 	jmp	#LR__0947
0a6f8                 | LR__0931
0a6f8     4C 00 00 FF 
0a6fc     20 64 06 F1 | 	add	objptr, ##38944
0a700     32 95 02 FB | 	rdlong	arg02, objptr
0a704     4A 93 02 F6 | 	mov	arg01, arg02
0a708     01 92 86 F1 | 	sub	arg01, #1
0a70c     49 AD 02 F6 | 	mov	local04, arg01
0a710     01 AC 66 F0 | 	shl	local04, #1
0a714     49 AD 02 F1 | 	add	local04, arg01
0a718     02 AC 66 F0 | 	shl	local04, #2
0a71c     03 00 00 FF 
0a720     00 64 86 F1 | 	sub	objptr, ##1536
0a724     32 AD 02 F1 | 	add	local04, objptr
0a728     56 A7 02 FB | 	rdlong	local01, local04
0a72c     04 AC 06 F1 | 	add	local04, #4
0a730     56 AF 02 FB | 	rdlong	local05, local04
0a734     01 94 86 F1 | 	sub	arg02, #1
0a738     4A B1 02 F6 | 	mov	local06, arg02
0a73c     01 B0 66 F0 | 	shl	local06, #1
0a740     4A B1 02 F1 | 	add	local06, arg02
0a744     02 B0 66 F0 | 	shl	local06, #2
0a748     32 B3 02 F6 | 	mov	local07, objptr
0a74c     32 B1 02 F1 | 	add	local06, objptr
0a750     08 B0 06 F1 | 	add	local06, #8
0a754     58 AD 02 FB | 	rdlong	local04, local06
0a758     57 A9 02 F6 | 	mov	local02, local05
0a75c     56 AB 02 F6 | 	mov	local03, local04
0a760                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a760     17 AA 0E F2 | 	cmp	local03, #23 wz
0a764     49 00 00 FF 
0a768     20 64 86 F1 | 	sub	objptr, ##37408
0a76c     22 7A 06 56 |  if_ne	mov	result1, #34
0a770     E8 07 90 5D |  if_ne	jmp	#LR__0947
0a774     53 B5 02 F6 | 	mov	local08, local01
0a778                 | ' varnum=t1.result.uresult
0a778                 | ' if lparts(ct).part$<>"to" then return 33
0a778     38 00 00 FF 
0a77c     E8 65 06 F1 | 	add	objptr, ##29160
0a780     32 AD 02 FB | 	rdlong	local04, objptr
0a784     03 AC 66 F0 | 	shl	local04, #3
0a788     02 00 00 FF 
0a78c     38 64 86 F1 | 	sub	objptr, ##1080
0a790     32 AD 02 F1 | 	add	local04, objptr
0a794     56 93 02 FB | 	rdlong	arg01, local04
0a798     95 01 00 FF 
0a79c     40 94 06 F6 | 	mov	arg02, ##@LR__5922
0a7a0     36 00 00 FF 
0a7a4     B0 65 86 F1 | 	sub	objptr, ##28080
0a7a8     0C A0 B1 FD | 	call	#__system___string_cmp
0a7ac     00 7A 0E F2 | 	cmp	result1, #0 wz
0a7b0     21 7A 06 56 |  if_ne	mov	result1, #33
0a7b4     A4 07 90 5D |  if_ne	jmp	#LR__0947
0a7b8     38 00 00 FF 
0a7bc     E8 65 06 F1 | 	add	objptr, ##29160
0a7c0     32 B7 02 FB | 	rdlong	local09, objptr
0a7c4     01 B6 06 F1 | 	add	local09, #1
0a7c8     32 B7 62 FC | 	wrlong	local09, objptr
0a7cc     38 00 00 FF 
0a7d0     E8 65 86 F1 | 	sub	objptr, ##29160
0a7d4     80 16 B0 FD | 	call	#_expr
0a7d8                 | ' ct+=1
0a7d8                 | ' expr()  										' there is "to" value pushed on the stack
0a7d8                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a7d8     38 00 00 FF 
0a7dc     E8 65 06 F1 | 	add	objptr, ##29160
0a7e0     32 AD 02 FB | 	rdlong	local04, objptr
0a7e4     03 AC 66 F0 | 	shl	local04, #3
0a7e8     02 00 00 FF 
0a7ec     38 64 86 F1 | 	sub	objptr, ##1080
0a7f0     32 AD 02 F1 | 	add	local04, objptr
0a7f4     56 93 02 FB | 	rdlong	arg01, local04
0a7f8     95 01 00 FF 
0a7fc     43 94 06 F6 | 	mov	arg02, ##@LR__5923
0a800     36 00 00 FF 
0a804     B0 65 86 F1 | 	sub	objptr, ##28080
0a808     AC 9F B1 FD | 	call	#__system___string_cmp
0a80c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a810     48 00 90 AD |  if_e	jmp	#LR__0932
0a814     38 00 00 FF 
0a818     E8 65 06 F1 | 	add	objptr, ##29160
0a81c     32 AD 02 FB | 	rdlong	local04, objptr
0a820     03 AC 66 F0 | 	shl	local04, #3
0a824     02 00 00 FF 
0a828     38 64 86 F1 | 	sub	objptr, ##1080
0a82c     32 AD 02 F1 | 	add	local04, objptr
0a830     56 93 02 FB | 	rdlong	arg01, local04
0a834     02 94 06 F6 | 	mov	arg02, #2
0a838     36 00 00 FF 
0a83c     B0 65 86 F1 | 	sub	objptr, ##28080
0a840     F4 B7 B1 FD | 	call	#__system__Left_S
0a844     3D 93 02 F6 | 	mov	arg01, result1
0a848     95 01 00 FF 
0a84c     48 94 06 F6 | 	mov	arg02, ##@LR__5924
0a850     64 9F B1 FD | 	call	#__system___string_cmp
0a854     00 7A 0E F2 | 	cmp	result1, #0 wz
0a858     A8 05 90 5D |  if_ne	jmp	#LR__0945
0a85c                 | LR__0932
0a85c                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a85c     38 00 00 FF 
0a860     E8 65 06 F1 | 	add	objptr, ##29160
0a864     32 AD 02 FB | 	rdlong	local04, objptr
0a868     03 AC 66 F0 | 	shl	local04, #3
0a86c     02 00 00 FF 
0a870     38 64 86 F1 | 	sub	objptr, ##1080
0a874     32 AD 02 F1 | 	add	local04, objptr
0a878     56 93 02 FB | 	rdlong	arg01, local04
0a87c     02 94 06 F6 | 	mov	arg02, #2
0a880     36 00 00 FF 
0a884     B0 65 86 F1 | 	sub	objptr, ##28080
0a888     AC B7 B1 FD | 	call	#__system__Left_S
0a88c     3D 93 02 F6 | 	mov	arg01, result1
0a890     95 01 00 FF 
0a894     4B 94 06 F6 | 	mov	arg02, ##@LR__5925
0a898     1C 9F B1 FD | 	call	#__system___string_cmp
0a89c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a8a0     3C 05 90 5D |  if_ne	jmp	#LR__0944
0a8a4     38 00 00 FF 
0a8a8     E8 65 06 F1 | 	add	objptr, ##29160
0a8ac     32 AD 02 FB | 	rdlong	local04, objptr
0a8b0     03 AC 66 F0 | 	shl	local04, #3
0a8b4     02 00 00 FF 
0a8b8     38 64 86 F1 | 	sub	objptr, ##1080
0a8bc     32 AD 02 F1 | 	add	local04, objptr
0a8c0     56 93 02 FB | 	rdlong	arg01, local04
0a8c4     36 00 00 FF 
0a8c8     B0 65 86 F1 | 	sub	objptr, ##28080
0a8cc     49 B9 02 F6 | 	mov	local10, arg01
0a8d0     D7 06 48 FB | 	callpa	#(@LR__0934-@LR__0933)>>2,fcache_load_ptr_
0a8d4                 | LR__0933
0a8d4     5C 7B CA FA | 	rdbyte	result1, local10 wz
0a8d8     01 B8 06 51 |  if_ne	add	local10, #1
0a8dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0933
0a8e0                 | LR__0934
0a8e0     49 B9 82 F1 | 	sub	local10, arg01
0a8e4     03 B8 56 F2 | 	cmps	local10, #3 wc
0a8e8     F4 04 90 CD |  if_b	jmp	#LR__0944
0a8ec     38 00 00 FF 
0a8f0     E8 65 06 F1 | 	add	objptr, ##29160
0a8f4     32 AD 02 FB | 	rdlong	local04, objptr
0a8f8     56 BB 02 F6 | 	mov	local11, local04
0a8fc     03 BA 66 F0 | 	shl	local11, #3
0a900     02 00 00 FF 
0a904     38 64 86 F1 | 	sub	objptr, ##1080
0a908     32 BB 02 F1 | 	add	local11, objptr
0a90c     03 AC 66 F0 | 	shl	local04, #3
0a910     32 AD 02 F1 | 	add	local04, objptr
0a914     56 AD 02 FB | 	rdlong	local04, local04
0a918     02 00 00 FF 
0a91c     38 64 06 F1 | 	add	objptr, ##1080
0a920     32 93 02 FB | 	rdlong	arg01, objptr
0a924     03 92 66 F0 | 	shl	arg01, #3
0a928     02 00 00 FF 
0a92c     38 64 86 F1 | 	sub	objptr, ##1080
0a930     32 93 02 F1 | 	add	arg01, objptr
0a934     49 93 02 FB | 	rdlong	arg01, arg01
0a938     36 00 00 FF 
0a93c     B0 65 86 F1 | 	sub	objptr, ##28080
0a940     49 B9 02 F6 | 	mov	local10, arg01
0a944     D7 06 48 FB | 	callpa	#(@LR__0936-@LR__0935)>>2,fcache_load_ptr_
0a948                 | LR__0935
0a948     5C 7B CA FA | 	rdbyte	result1, local10 wz
0a94c     01 B8 06 51 |  if_ne	add	local10, #1
0a950     F4 FF 9F 5D |  if_ne	jmp	#LR__0935
0a954                 | LR__0936
0a954     49 B9 82 F1 | 	sub	local10, arg01
0a958     5C 95 02 F6 | 	mov	arg02, local10
0a95c     02 94 86 F1 | 	sub	arg02, #2
0a960     56 93 02 F6 | 	mov	arg01, local04
0a964     58 B7 B1 FD | 	call	#__system__Right_S
0a968     5D 7B 62 FC | 	wrlong	result1, local11
0a96c     38 00 00 FF 
0a970     E8 65 06 F1 | 	add	objptr, ##29160
0a974     32 AD 02 FB | 	rdlong	local04, objptr
0a978     56 BB 02 F6 | 	mov	local11, local04
0a97c     03 BA 66 F0 | 	shl	local11, #3
0a980     02 00 00 FF 
0a984     38 64 86 F1 | 	sub	objptr, ##1080
0a988     32 BB 02 F1 | 	add	local11, objptr
0a98c     03 AC 66 F0 | 	shl	local04, #3
0a990     32 AD 02 F1 | 	add	local04, objptr
0a994     56 93 02 FB | 	rdlong	arg01, local04
0a998     36 00 00 FF 
0a99c     B0 65 86 F1 | 	sub	objptr, ##28080
0a9a0     1C B6 BF FD | 	call	#_isfunction
0a9a4     3D 7B E2 F8 | 	getbyte	result1, result1, #0
0a9a8     04 BA 06 F1 | 	add	local11, #4
0a9ac     5D 7B 62 FC | 	wrlong	result1, local11
0a9b0                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0a9b0     38 00 00 FF 
0a9b4     E8 65 06 F1 | 	add	objptr, ##29160
0a9b8     32 BB 02 FB | 	rdlong	local11, objptr
0a9bc     03 BA 66 F0 | 	shl	local11, #3
0a9c0     02 00 00 FF 
0a9c4     38 64 86 F1 | 	sub	objptr, ##1080
0a9c8     32 BB 02 F1 | 	add	local11, objptr
0a9cc     04 BA 06 F1 | 	add	local11, #4
0a9d0     5D AD 02 FB | 	rdlong	local04, local11
0a9d4     01 AC 56 F2 | 	cmps	local04, #1 wc
0a9d8     36 00 00 FF 
0a9dc     B0 65 86 F1 | 	sub	objptr, ##28080
0a9e0     E0 03 90 3D |  if_ae	jmp	#LR__0943
0a9e4     38 00 00 FF 
0a9e8     E8 65 06 F1 | 	add	objptr, ##29160
0a9ec     32 AD 02 FB | 	rdlong	local04, objptr
0a9f0     56 BB 02 F6 | 	mov	local11, local04
0a9f4     03 BA 66 F0 | 	shl	local11, #3
0a9f8     02 00 00 FF 
0a9fc     38 64 86 F1 | 	sub	objptr, ##1080
0aa00     32 BB 02 F1 | 	add	local11, objptr
0aa04     03 AC 66 F0 | 	shl	local04, #3
0aa08     32 AD 02 F1 | 	add	local04, objptr
0aa0c     56 93 02 FB | 	rdlong	arg01, local04
0aa10     36 00 00 FF 
0aa14     B0 65 86 F1 | 	sub	objptr, ##28080
0aa18     78 9E BF FD | 	call	#_isnotename
0aa1c     04 BA 06 F1 | 	add	local11, #4
0aa20     5D 7B 62 FC | 	wrlong	result1, local11
0aa24                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0aa24                 | '     if lparts(ct).token>0 then 
0aa24     38 00 00 FF 
0aa28     E8 65 06 F1 | 	add	objptr, ##29160
0aa2c     32 BB 02 FB | 	rdlong	local11, objptr
0aa30     03 BA 66 F0 | 	shl	local11, #3
0aa34     02 00 00 FF 
0aa38     38 64 86 F1 | 	sub	objptr, ##1080
0aa3c     32 BB 02 F1 | 	add	local11, objptr
0aa40     04 BA 06 F1 | 	add	local11, #4
0aa44     5D AD 02 FB | 	rdlong	local04, local11
0aa48     01 AC 56 F2 | 	cmps	local04, #1 wc
0aa4c     36 00 00 FF 
0aa50     B0 65 86 F1 | 	sub	objptr, ##28080
0aa54     94 00 90 CD |  if_b	jmp	#LR__0937
0aa58     38 00 00 FF 
0aa5c     E8 65 06 F1 | 	add	objptr, ##29160
0aa60     32 BB 02 FB | 	rdlong	local11, objptr
0aa64     03 BA 66 F0 | 	shl	local11, #3
0aa68     02 00 00 FF 
0aa6c     38 64 86 F1 | 	sub	objptr, ##1080
0aa70     32 BB 02 F1 | 	add	local11, objptr
0aa74     04 BA 06 F1 | 	add	local11, #4
0aa78     5D 93 02 FB | 	rdlong	arg01, local11
0aa7c     36 00 00 FF 
0aa80     B0 65 86 F1 | 	sub	objptr, ##28080
0aa84     80 C7 BF FD | 	call	#_getnoteval
0aa88     3D 93 02 F6 | 	mov	arg01, result1
0aa8c     38 00 00 FF 
0aa90     E8 65 06 F1 | 	add	objptr, ##29160
0aa94     32 BB 02 FB | 	rdlong	local11, objptr
0aa98     03 BA 66 F0 | 	shl	local11, #3
0aa9c     02 00 00 FF 
0aaa0     38 64 86 F1 | 	sub	objptr, ##1080
0aaa4     32 BB 02 F1 | 	add	local11, objptr
0aaa8     36 00 00 FF 
0aaac     B0 65 86 F1 | 	sub	objptr, ##28080
0aab0     7C B7 B1 FD | 	call	#__system__str_S
0aab4     5D 7B 62 FC | 	wrlong	result1, local11
0aab8     38 00 00 FF 
0aabc     E8 65 06 F1 | 	add	objptr, ##29160
0aac0     32 BB 02 FB | 	rdlong	local11, objptr
0aac4     03 BA 66 F0 | 	shl	local11, #3
0aac8     02 00 00 FF 
0aacc     38 64 86 F1 | 	sub	objptr, ##1080
0aad0     32 BB 02 F1 | 	add	local11, objptr
0aad4     04 BA 06 F1 | 	add	local11, #4
0aad8     01 00 80 FF 
0aadc     5D 05 68 FC | 	wrlong	##514, local11
0aae0     36 00 00 FF 
0aae4     B0 65 86 F1 | 	sub	objptr, ##28080
0aae8     D8 02 90 FD | 	jmp	#LR__0943
0aaec                 | LR__0937
0aaec     38 00 00 FF 
0aaf0     E8 65 06 F1 | 	add	objptr, ##29160
0aaf4     32 AD 02 FB | 	rdlong	local04, objptr
0aaf8     56 BB 02 F6 | 	mov	local11, local04
0aafc     03 BA 66 F0 | 	shl	local11, #3
0ab00     02 00 00 FF 
0ab04     38 64 86 F1 | 	sub	objptr, ##1080
0ab08     32 BB 02 F1 | 	add	local11, objptr
0ab0c     03 AC 66 F0 | 	shl	local04, #3
0ab10     32 AD 02 F1 | 	add	local04, objptr
0ab14     56 93 02 FB | 	rdlong	arg01, local04
0ab18     36 00 00 FF 
0ab1c     B0 65 86 F1 | 	sub	objptr, ##28080
0ab20     F0 9C BF FD | 	call	#_isconstant
0ab24     04 BA 06 F1 | 	add	local11, #4
0ab28     5D 7B 62 FC | 	wrlong	result1, local11
0ab2c                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0ab2c     38 00 00 FF 
0ab30     E8 65 06 F1 | 	add	objptr, ##29160
0ab34     32 BB 02 FB | 	rdlong	local11, objptr
0ab38     03 BA 66 F0 | 	shl	local11, #3
0ab3c     02 00 00 FF 
0ab40     38 64 86 F1 | 	sub	objptr, ##1080
0ab44     32 BB 02 F1 | 	add	local11, objptr
0ab48     04 BA 06 F1 | 	add	local11, #4
0ab4c     5D AD 02 FB | 	rdlong	local04, local11
0ab50     01 AC 56 F2 | 	cmps	local04, #1 wc
0ab54     36 00 00 FF 
0ab58     B0 65 86 F1 | 	sub	objptr, ##28080
0ab5c     8C 00 90 CD |  if_b	jmp	#LR__0938
0ab60     38 00 00 FF 
0ab64     E8 65 06 F1 | 	add	objptr, ##29160
0ab68     32 B7 02 FB | 	rdlong	local09, objptr
0ab6c     5B BB 02 F6 | 	mov	local11, local09
0ab70     03 BA 66 F0 | 	shl	local11, #3
0ab74     02 00 00 FF 
0ab78     38 64 86 F1 | 	sub	objptr, ##1080
0ab7c     32 BB 02 F1 | 	add	local11, objptr
0ab80     03 B6 66 F0 | 	shl	local09, #3
0ab84     32 B7 02 F1 | 	add	local09, objptr
0ab88     04 B6 06 F1 | 	add	local09, #4
0ab8c     5B 93 02 FB | 	rdlong	arg01, local09
0ab90     36 00 00 FF 
0ab94     B0 65 86 F1 | 	sub	objptr, ##28080
0ab98     49 93 52 F6 | 	abs	arg01, arg01 wc
0ab9c     1F BC C6 C9 |  if_b	decod	local12, #31
0aba0     00 BC 06 36 |  if_ae	mov	local12, #0
0aba4     B4 BE B1 FD | 	call	#__system___float_fromuns
0aba8     5E 7B 62 F5 | 	xor	result1, local12
0abac     3D 93 02 F6 | 	mov	arg01, result1
0abb0     7C B6 B1 FD | 	call	#__system__str_S
0abb4     5D 7B 62 FC | 	wrlong	result1, local11
0abb8     38 00 00 FF 
0abbc     E8 65 06 F1 | 	add	objptr, ##29160
0abc0     32 BB 02 FB | 	rdlong	local11, objptr
0abc4     03 BA 66 F0 | 	shl	local11, #3
0abc8     02 00 00 FF 
0abcc     38 64 86 F1 | 	sub	objptr, ##1080
0abd0     32 BB 02 F1 | 	add	local11, objptr
0abd4     04 BA 06 F1 | 	add	local11, #4
0abd8     01 00 80 FF 
0abdc     5D 03 68 FC | 	wrlong	##513, local11
0abe0     36 00 00 FF 
0abe4     B0 65 86 F1 | 	sub	objptr, ##28080
0abe8     D8 01 90 FD | 	jmp	#LR__0943
0abec                 | LR__0938
0abec     38 00 00 FF 
0abf0     E8 65 06 F1 | 	add	objptr, ##29160
0abf4     32 AD 02 FB | 	rdlong	local04, objptr
0abf8     03 AC 66 F0 | 	shl	local04, #3
0abfc     02 00 00 FF 
0ac00     38 64 86 F1 | 	sub	objptr, ##1080
0ac04     32 AD 02 F1 | 	add	local04, objptr
0ac08     56 93 02 FB | 	rdlong	arg01, local04
0ac0c     36 00 00 FF 
0ac10     B0 65 86 F1 | 	sub	objptr, ##28080
0ac14     3C BE BF FD | 	call	#_isnum
0ac18     3D BF 02 F6 | 	mov	local13, result1
0ac1c     07 BE 66 F7 | 	signx	local13, #7
0ac20     38 00 00 FF 
0ac24     E8 65 06 F1 | 	add	objptr, ##29160
0ac28     32 AD 02 FB | 	rdlong	local04, objptr
0ac2c     03 AC 66 F0 | 	shl	local04, #3
0ac30     02 00 00 FF 
0ac34     38 64 86 F1 | 	sub	objptr, ##1080
0ac38     32 AD 02 F1 | 	add	local04, objptr
0ac3c     56 93 02 FB | 	rdlong	arg01, local04
0ac40     36 00 00 FF 
0ac44     B0 65 86 F1 | 	sub	objptr, ##28080
0ac48     F4 C1 BF FD | 	call	#_isint
0ac4c     3D C1 02 F6 | 	mov	local14, result1
0ac50     07 C0 66 F7 | 	signx	local14, #7
0ac54     38 00 00 FF 
0ac58     E8 65 06 F1 | 	add	objptr, ##29160
0ac5c     32 AD 02 FB | 	rdlong	local04, objptr
0ac60     03 AC 66 F0 | 	shl	local04, #3
0ac64     02 00 00 FF 
0ac68     38 64 86 F1 | 	sub	objptr, ##1080
0ac6c     32 AD 02 F1 | 	add	local04, objptr
0ac70     56 93 02 FB | 	rdlong	arg01, local04
0ac74     36 00 00 FF 
0ac78     B0 65 86 F1 | 	sub	objptr, ##28080
0ac7c     64 C4 BF FD | 	call	#_isdec
0ac80     07 7A 66 F7 | 	signx	result1, #7
0ac84     3D C3 02 F6 | 	mov	local15, result1
0ac88                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0ac88                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0ac88     00 BE 0E F2 | 	cmp	local13, #0 wz
0ac8c     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0ac90     00 C2 0E 52 |  if_ne	cmp	local15, #0 wz
0ac94     34 00 90 AD |  if_e	jmp	#LR__0939
0ac98     38 00 00 FF 
0ac9c     E8 65 06 F1 | 	add	objptr, ##29160
0aca0     32 BB 02 FB | 	rdlong	local11, objptr
0aca4     03 BA 66 F0 | 	shl	local11, #3
0aca8     02 00 00 FF 
0acac     38 64 86 F1 | 	sub	objptr, ##1080
0acb0     32 BB 02 F1 | 	add	local11, objptr
0acb4     04 BA 06 F1 | 	add	local11, #4
0acb8     01 00 80 FF 
0acbc     5D 01 68 FC | 	wrlong	##512, local11
0acc0     36 00 00 FF 
0acc4     B0 65 86 F1 | 	sub	objptr, ##28080
0acc8     F8 00 90 FD | 	jmp	#LR__0943
0accc                 | LR__0939
0accc                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0accc     00 BE 0E F2 | 	cmp	local13, #0 wz
0acd0     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0acd4     61 B7 22 56 |  if_ne	not	local09, local15
0acd8     00 B6 0E 52 |  if_ne	cmp	local09, #0 wz
0acdc     34 00 90 AD |  if_e	jmp	#LR__0940
0ace0     38 00 00 FF 
0ace4     E8 65 06 F1 | 	add	objptr, ##29160
0ace8     32 BB 02 FB | 	rdlong	local11, objptr
0acec     03 BA 66 F0 | 	shl	local11, #3
0acf0     02 00 00 FF 
0acf4     38 64 86 F1 | 	sub	objptr, ##1080
0acf8     32 BB 02 F1 | 	add	local11, objptr
0acfc     04 BA 06 F1 | 	add	local11, #4
0ad00     01 00 80 FF 
0ad04     5D 03 68 FC | 	wrlong	##513, local11
0ad08     36 00 00 FF 
0ad0c     B0 65 86 F1 | 	sub	objptr, ##28080
0ad10     B0 00 90 FD | 	jmp	#LR__0943
0ad14                 | LR__0940
0ad14                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0ad14     00 BE 0E F2 | 	cmp	local13, #0 wz
0ad18     60 C1 22 56 |  if_ne	not	local14, local14
0ad1c     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0ad20     61 C3 22 56 |  if_ne	not	local15, local15
0ad24     00 C2 0E 52 |  if_ne	cmp	local15, #0 wz
0ad28     34 00 90 AD |  if_e	jmp	#LR__0941
0ad2c     38 00 00 FF 
0ad30     E8 65 06 F1 | 	add	objptr, ##29160
0ad34     32 BB 02 FB | 	rdlong	local11, objptr
0ad38     03 BA 66 F0 | 	shl	local11, #3
0ad3c     02 00 00 FF 
0ad40     38 64 86 F1 | 	sub	objptr, ##1080
0ad44     32 BB 02 F1 | 	add	local11, objptr
0ad48     04 BA 06 F1 | 	add	local11, #4
0ad4c     01 00 80 FF 
0ad50     5D 05 68 FC | 	wrlong	##514, local11
0ad54     36 00 00 FF 
0ad58     B0 65 86 F1 | 	sub	objptr, ##28080
0ad5c     64 00 90 FD | 	jmp	#LR__0943
0ad60                 | LR__0941
0ad60                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0ad60     38 00 00 FF 
0ad64     E8 65 06 F1 | 	add	objptr, ##29160
0ad68     32 BB 02 FB | 	rdlong	local11, objptr
0ad6c     03 BA 66 F0 | 	shl	local11, #3
0ad70     02 00 00 FF 
0ad74     38 64 86 F1 | 	sub	objptr, ##1080
0ad78     32 BB 02 F1 | 	add	local11, objptr
0ad7c     5D 93 02 FB | 	rdlong	arg01, local11
0ad80     36 00 00 FF 
0ad84     B0 65 86 F1 | 	sub	objptr, ##28080
0ad88     54 BA BF FD | 	call	#_isname
0ad8c     00 7A 0E F2 | 	cmp	result1, #0 wz
0ad90     30 00 90 AD |  if_e	jmp	#LR__0942
0ad94     38 00 00 FF 
0ad98     E8 65 06 F1 | 	add	objptr, ##29160
0ad9c     32 BB 02 FB | 	rdlong	local11, objptr
0ada0     03 BA 66 F0 | 	shl	local11, #3
0ada4     02 00 00 FF 
0ada8     38 64 86 F1 | 	sub	objptr, ##1080
0adac     32 BB 02 F1 | 	add	local11, objptr
0adb0     04 BA 06 F1 | 	add	local11, #4
0adb4     01 00 80 FF 
0adb8     5D 09 68 FC | 	wrlong	##516, local11
0adbc     36 00 00 FF 
0adc0     B0 65 86 F1 | 	sub	objptr, ##28080
0adc4                 | LR__0942
0adc4                 | LR__0943
0adc4     38 00 00 FF 
0adc8     E8 65 06 F1 | 	add	objptr, ##29160
0adcc     32 B7 02 FB | 	rdlong	local09, objptr
0add0     01 B6 86 F1 | 	sub	local09, #1
0add4     32 B7 62 FC | 	wrlong	local09, objptr
0add8     38 00 00 FF 
0addc     E8 65 86 F1 | 	sub	objptr, ##29160
0ade0                 | LR__0944
0ade0     38 00 00 FF 
0ade4     E8 65 06 F1 | 	add	objptr, ##29160
0ade8     32 B7 02 FB | 	rdlong	local09, objptr
0adec     01 B6 06 F1 | 	add	local09, #1
0adf0     32 B7 62 FC | 	wrlong	local09, objptr
0adf4     38 00 00 FF 
0adf8     E8 65 86 F1 | 	sub	objptr, ##29160
0adfc     58 10 B0 FD | 	call	#_expr
0ae00     78 00 90 FD | 	jmp	#LR__0946
0ae04                 | LR__0945
0ae04     4C 00 00 FF 
0ae08     20 64 06 F1 | 	add	objptr, ##38944
0ae0c     32 C3 02 FB | 	rdlong	local15, objptr
0ae10     61 BB 02 F6 | 	mov	local11, local15
0ae14     01 BA 66 F0 | 	shl	local11, #1
0ae18     61 BB 02 F1 | 	add	local11, local15
0ae1c     02 BA 66 F0 | 	shl	local11, #2
0ae20     03 00 00 FF 
0ae24     00 64 86 F1 | 	sub	objptr, ##1536
0ae28     32 BB 02 F1 | 	add	local11, objptr
0ae2c     08 BA 06 F1 | 	add	local11, #8
0ae30     5D 39 68 FC | 	wrlong	#28, local11
0ae34     03 00 00 FF 
0ae38     00 64 06 F1 | 	add	objptr, ##1536
0ae3c     32 C3 02 FB | 	rdlong	local15, objptr
0ae40     61 BB 02 F6 | 	mov	local11, local15
0ae44     01 BA 66 F0 | 	shl	local11, #1
0ae48     61 BB 02 F1 | 	add	local11, local15
0ae4c     02 BA 66 F0 | 	shl	local11, #2
0ae50     03 00 00 FF 
0ae54     00 64 86 F1 | 	sub	objptr, ##1536
0ae58     32 BB 02 F1 | 	add	local11, objptr
0ae5c     5D 03 68 FC | 	wrlong	#1, local11
0ae60     03 00 00 FF 
0ae64     00 64 06 F1 | 	add	objptr, ##1536
0ae68     32 B7 02 FB | 	rdlong	local09, objptr
0ae6c     01 B6 06 F1 | 	add	local09, #1
0ae70     32 B7 62 FC | 	wrlong	local09, objptr
0ae74     4C 00 00 FF 
0ae78     20 64 86 F1 | 	sub	objptr, ##38944
0ae7c                 | LR__0946
0ae7c     4C 00 00 FF 
0ae80     20 64 06 F1 | 	add	objptr, ##38944
0ae84     32 C3 02 FB | 	rdlong	local15, objptr
0ae88     61 BB 02 F6 | 	mov	local11, local15
0ae8c     01 BA 66 F0 | 	shl	local11, #1
0ae90     61 BB 02 F1 | 	add	local11, local15
0ae94     02 BA 66 F0 | 	shl	local11, #2
0ae98     03 00 00 FF 
0ae9c     00 64 86 F1 | 	sub	objptr, ##1536
0aea0     32 BB 02 F1 | 	add	local11, objptr
0aea4     08 BA 06 F1 | 	add	local11, #8
0aea8     5D 39 68 FC | 	wrlong	#28, local11
0aeac     03 00 00 FF 
0aeb0     00 64 06 F1 | 	add	objptr, ##1536
0aeb4     32 C3 02 FB | 	rdlong	local15, objptr
0aeb8     61 BB 02 F6 | 	mov	local11, local15
0aebc     01 BA 66 F0 | 	shl	local11, #1
0aec0     61 BB 02 F1 | 	add	local11, local15
0aec4     02 BA 66 F0 | 	shl	local11, #2
0aec8     03 00 00 FF 
0aecc     00 64 86 F1 | 	sub	objptr, ##1536
0aed0     32 BB 02 F1 | 	add	local11, objptr
0aed4     5D B5 62 FC | 	wrlong	local08, local11
0aed8     03 00 00 FF 
0aedc     00 64 06 F1 | 	add	objptr, ##1536
0aee0     32 C3 02 FB | 	rdlong	local15, objptr
0aee4     01 C2 06 F1 | 	add	local15, #1
0aee8     32 C3 62 FC | 	wrlong	local15, objptr
0aeec     61 BB 02 F6 | 	mov	local11, local15
0aef0     01 BA 66 F0 | 	shl	local11, #1
0aef4     61 BB 02 F1 | 	add	local11, local15
0aef8     02 BA 66 F0 | 	shl	local11, #2
0aefc     03 00 00 FF 
0af00     00 64 86 F1 | 	sub	objptr, ##1536
0af04     32 BB 02 F1 | 	add	local11, objptr
0af08     08 BA 06 F1 | 	add	local11, #8
0af0c     5D 95 68 FC | 	wrlong	#74, local11
0af10     03 00 00 FF 
0af14     00 64 06 F1 | 	add	objptr, ##1536
0af18     32 C3 02 FB | 	rdlong	local15, objptr
0af1c     61 BB 02 F6 | 	mov	local11, local15
0af20     01 BA 66 F0 | 	shl	local11, #1
0af24     61 BB 02 F1 | 	add	local11, local15
0af28     02 BA 66 F0 | 	shl	local11, #2
0af2c     03 00 00 FF 
0af30     00 64 86 F1 | 	sub	objptr, ##1536
0af34     32 BB 02 F1 | 	add	local11, objptr
0af38     5D 01 68 FC | 	wrlong	#0, local11
0af3c     03 00 00 FF 
0af40     00 64 06 F1 | 	add	objptr, ##1536
0af44     32 B7 02 FB | 	rdlong	local09, objptr
0af48     01 B6 06 F1 | 	add	local09, #1
0af4c     32 B7 62 FC | 	wrlong	local09, objptr
0af50     4C 00 00 FF 
0af54     20 64 86 F1 | 	sub	objptr, ##38944
0af58                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0af58                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0af58                 | ' return 0
0af58     00 7A 06 F6 | 	mov	result1, #0
0af5c                 | LR__0947
0af5c     E7 F0 03 F6 | 	mov	ptra, fp
0af60     F2 00 A0 FD | 	call	#popregs_
0af64                 | _compile_for_ret
0af64     2D 00 64 FD | 	ret
0af68                 | 
0af68                 | ' 
0af68                 | ' '----- compile 'next' command. 
0af68                 | ' 
0af68                 | ' function compile_next() as ulong
0af68                 | _compile_next
0af68     04 CA 05 F6 | 	mov	COUNT_, #4
0af6c     E8 00 A0 FD | 	call	#pushregs_
0af70     38 00 00 FF 
0af74     E8 65 06 F1 | 	add	objptr, ##29160
0af78     32 93 02 FB | 	rdlong	arg01, objptr
0af7c     03 92 66 F0 | 	shl	arg01, #3
0af80     02 00 00 FF 
0af84     38 64 86 F1 | 	sub	objptr, ##1080
0af88     32 93 02 F1 | 	add	arg01, objptr
0af8c     49 A7 02 FB | 	rdlong	local01, arg01
0af90                 | ' 
0af90                 | ' varname$=lparts(ct).part$ 
0af90                 | ' if varnum=0 then return 35
0af90     04 64 86 F1 | 	sub	objptr, #4
0af94     32 93 0A FB | 	rdlong	arg01, objptr wz
0af98     36 00 00 FF 
0af9c     AC 65 86 F1 | 	sub	objptr, ##28076
0afa0     23 7A 06 A6 |  if_e	mov	result1, #35
0afa4     48 01 90 AD |  if_e	jmp	#LR__0952
0afa8     01 A8 66 F6 | 	neg	local02, #1
0afac                 | ' j=-1
0afac                 | ' for i=0 to varnum-1
0afac     00 AA 06 F6 | 	mov	local03, #0
0afb0     36 00 00 FF 
0afb4     AC 65 06 F1 | 	add	objptr, ##28076
0afb8     32 AD 02 FB | 	rdlong	local04, objptr
0afbc     36 00 00 FF 
0afc0     AC 65 86 F1 | 	sub	objptr, ##28076
0afc4                 | LR__0950
0afc4     56 AB 12 F2 | 	cmp	local03, local04 wc
0afc8     34 00 90 3D |  if_ae	jmp	#LR__0951
0afcc                 | '   if variables(i).name=varname$ then j=i : exit
0afcc     55 93 02 F6 | 	mov	arg01, local03
0afd0     04 92 66 F0 | 	shl	arg01, #4
0afd4     32 95 02 F6 | 	mov	arg02, objptr
0afd8     16 00 00 FF 
0afdc     9C 95 06 F1 | 	add	arg02, ##11676
0afe0     4A 93 02 F1 | 	add	arg01, arg02
0afe4     49 93 02 FB | 	rdlong	arg01, arg01
0afe8     53 95 02 F6 | 	mov	arg02, local01
0afec     C8 97 B1 FD | 	call	#__system___string_cmp
0aff0     00 7A 0E F2 | 	cmp	result1, #0 wz
0aff4     55 A9 02 A6 |  if_e	mov	local02, local03
0aff8     01 AA 06 51 |  if_ne	add	local03, #1
0affc     C4 FF 9F 5D |  if_ne	jmp	#LR__0950
0b000                 | LR__0951
0b000                 | ' if j=-1 then return 35
0b000     FF FF 7F FF 
0b004     FF A9 0E F2 | 	cmp	local02, ##-1 wz
0b008     23 7A 06 A6 |  if_e	mov	result1, #35
0b00c     E0 00 90 AD |  if_e	jmp	#LR__0952
0b010     4C 00 00 FF 
0b014     20 64 06 F1 | 	add	objptr, ##38944
0b018     32 AD 02 FB | 	rdlong	local04, objptr
0b01c     56 AB 02 F6 | 	mov	local03, local04
0b020     01 AA 66 F0 | 	shl	local03, #1
0b024     56 AB 02 F1 | 	add	local03, local04
0b028     02 AA 66 F0 | 	shl	local03, #2
0b02c     03 00 00 FF 
0b030     00 64 86 F1 | 	sub	objptr, ##1536
0b034     32 AB 02 F1 | 	add	local03, objptr
0b038     08 AA 06 F1 | 	add	local03, #8
0b03c     55 39 68 FC | 	wrlong	#28, local03
0b040     03 00 00 FF 
0b044     00 64 06 F1 | 	add	objptr, ##1536
0b048     32 AD 02 FB | 	rdlong	local04, objptr
0b04c     56 AB 02 F6 | 	mov	local03, local04
0b050     01 AA 66 F0 | 	shl	local03, #1
0b054     56 AB 02 F1 | 	add	local03, local04
0b058     02 AA 66 F0 | 	shl	local03, #2
0b05c     03 00 00 FF 
0b060     00 64 86 F1 | 	sub	objptr, ##1536
0b064     32 AB 02 F1 | 	add	local03, objptr
0b068     55 A9 62 FC | 	wrlong	local02, local03
0b06c     03 00 00 FF 
0b070     00 64 06 F1 | 	add	objptr, ##1536
0b074     32 AD 02 FB | 	rdlong	local04, objptr
0b078     01 AC 06 F1 | 	add	local04, #1
0b07c     32 AD 62 FC | 	wrlong	local04, objptr
0b080     56 AB 02 F6 | 	mov	local03, local04
0b084     01 AA 66 F0 | 	shl	local03, #1
0b088     56 AB 02 F1 | 	add	local03, local04
0b08c     02 AA 66 F0 | 	shl	local03, #2
0b090     03 00 00 FF 
0b094     00 64 86 F1 | 	sub	objptr, ##1536
0b098     32 AB 02 F1 | 	add	local03, objptr
0b09c     08 AA 06 F1 | 	add	local03, #8
0b0a0     55 97 68 FC | 	wrlong	#75, local03
0b0a4     03 00 00 FF 
0b0a8     00 64 06 F1 | 	add	objptr, ##1536
0b0ac     32 AD 02 FB | 	rdlong	local04, objptr
0b0b0     56 AB 02 F6 | 	mov	local03, local04
0b0b4     01 AA 66 F0 | 	shl	local03, #1
0b0b8     56 AB 02 F1 | 	add	local03, local04
0b0bc     02 AA 66 F0 | 	shl	local03, #2
0b0c0     03 00 00 FF 
0b0c4     00 64 86 F1 | 	sub	objptr, ##1536
0b0c8     32 AB 02 F1 | 	add	local03, objptr
0b0cc     55 01 68 FC | 	wrlong	#0, local03
0b0d0     03 00 00 FF 
0b0d4     00 64 06 F1 | 	add	objptr, ##1536
0b0d8     32 AD 02 FB | 	rdlong	local04, objptr
0b0dc     01 AC 06 F1 | 	add	local04, #1
0b0e0     32 AD 62 FC | 	wrlong	local04, objptr
0b0e4     4C 00 00 FF 
0b0e8     20 64 86 F1 | 	sub	objptr, ##38944
0b0ec                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0b0ec                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0b0ec                 | ' return 0
0b0ec     00 7A 06 F6 | 	mov	result1, #0
0b0f0                 | LR__0952
0b0f0     E7 F0 03 F6 | 	mov	ptra, fp
0b0f4     F2 00 A0 FD | 	call	#popregs_
0b0f8                 | _compile_next_ret
0b0f8     2D 00 64 FD | 	ret
0b0fc                 | 
0b0fc                 | ' 
0b0fc                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0b0fc                 | ' 
0b0fc                 | ' function compile_gosub() as ulong
0b0fc                 | _compile_gosub
0b0fc     02 CA 05 F6 | 	mov	COUNT_, #2
0b100     E8 00 A0 FD | 	call	#pushregs_
0b104     4C 00 00 FF 
0b108     20 64 06 F1 | 	add	objptr, ##38944
0b10c     32 A7 02 FB | 	rdlong	local01, objptr
0b110     53 A9 02 F6 | 	mov	local02, local01
0b114     01 A8 66 F0 | 	shl	local02, #1
0b118     53 A9 02 F1 | 	add	local02, local01
0b11c     02 A8 66 F0 | 	shl	local02, #2
0b120     03 00 00 FF 
0b124     00 64 86 F1 | 	sub	objptr, ##1536
0b128     32 A9 02 F1 | 	add	local02, objptr
0b12c     08 A8 06 F1 | 	add	local02, #8
0b130     54 53 69 FC | 	wrlong	#169, local02
0b134     03 00 00 FF 
0b138     00 64 06 F1 | 	add	objptr, ##1536
0b13c     32 A9 02 FB | 	rdlong	local02, objptr
0b140     01 A8 06 F1 | 	add	local02, #1
0b144     32 A9 62 FC | 	wrlong	local02, objptr
0b148     4C 00 00 FF 
0b14c     20 64 86 F1 | 	sub	objptr, ##38944
0b150     0C 00 B0 FD | 	call	#_compile_goto
0b154                 | ' compiledline(lineptr).result_type=token_gosub
0b154                 | ' lineptr+=1
0b154                 | ' err=compile_goto()
0b154                 | ' return err
0b154     E7 F0 03 F6 | 	mov	ptra, fp
0b158     F2 00 A0 FD | 	call	#popregs_
0b15c                 | _compile_gosub_ret
0b15c     2D 00 64 FD | 	ret
0b160                 | 
0b160                 | ' 
0b160                 | ' '----- compile 'goto' 
0b160                 | ' 
0b160                 | ' function compile_goto() as ulong
0b160                 | _compile_goto
0b160     0A CA 05 F6 | 	mov	COUNT_, #10
0b164     E8 00 A0 FD | 	call	#pushregs_
0b168     34 F0 07 F1 | 	add	ptra, #52
0b16c                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0b16c     38 00 00 FF 
0b170     E8 65 06 F1 | 	add	objptr, ##29160
0b174     32 97 02 FB | 	rdlong	arg03, objptr
0b178     03 96 66 F0 | 	shl	arg03, #3
0b17c     02 00 00 FF 
0b180     38 64 86 F1 | 	sub	objptr, ##1080
0b184     32 97 02 F1 | 	add	arg03, objptr
0b188     04 96 06 F1 | 	add	arg03, #4
0b18c     4B 97 02 FB | 	rdlong	arg03, arg03
0b190     01 00 00 FF 
0b194     00 96 0E F2 | 	cmp	arg03, ##512 wz
0b198     36 00 00 FF 
0b19c     B0 65 86 F1 | 	sub	objptr, ##28080
0b1a0     64 02 90 5D |  if_ne	jmp	#LR__0963
0b1a4     38 00 00 FF 
0b1a8     E8 65 06 F1 | 	add	objptr, ##29160
0b1ac     32 97 02 FB | 	rdlong	arg03, objptr
0b1b0     01 96 06 F1 | 	add	arg03, #1
0b1b4     03 96 66 F0 | 	shl	arg03, #3
0b1b8     02 00 00 FF 
0b1bc     38 64 86 F1 | 	sub	objptr, ##1080
0b1c0     32 97 02 F1 | 	add	arg03, objptr
0b1c4     04 96 06 F1 | 	add	arg03, #4
0b1c8     4B 97 02 FB | 	rdlong	arg03, arg03
0b1cc     FE 97 0E F2 | 	cmp	arg03, #510 wz
0b1d0     36 00 00 FF 
0b1d4     B0 65 86 F1 | 	sub	objptr, ##28080
0b1d8     2C 02 90 5D |  if_ne	jmp	#LR__0963
0b1dc     38 00 00 FF 
0b1e0     E8 65 06 F1 | 	add	objptr, ##29160
0b1e4     32 97 02 FB | 	rdlong	arg03, objptr
0b1e8     03 96 66 F0 | 	shl	arg03, #3
0b1ec     02 00 00 FF 
0b1f0     38 64 86 F1 | 	sub	objptr, ##1080
0b1f4     32 97 02 F1 | 	add	arg03, objptr
0b1f8     4B 93 02 FB | 	rdlong	arg01, arg03
0b1fc     00 94 06 F6 | 	mov	arg02, #0
0b200     36 00 00 FF 
0b204     B0 65 86 F1 | 	sub	objptr, ##28080
0b208     D8 C2 B1 FD | 	call	#__system____builtin_atoi
0b20c     3D AD 02 F6 | 	mov	local04, result1
0b210     4C 00 00 FF 
0b214     20 64 06 F1 | 	add	objptr, ##38944
0b218     32 AF 02 FB | 	rdlong	local05, objptr
0b21c     57 B1 02 F6 | 	mov	local06, local05
0b220     01 B0 66 F0 | 	shl	local06, #1
0b224     57 B1 02 F1 | 	add	local06, local05
0b228     02 B0 66 F0 | 	shl	local06, #2
0b22c     03 00 00 FF 
0b230     00 64 86 F1 | 	sub	objptr, ##1536
0b234     32 B3 02 F6 | 	mov	local07, objptr
0b238     32 B1 02 F1 | 	add	local06, objptr
0b23c     08 B0 06 F1 | 	add	local06, #8
0b240     58 9D 68 FC | 	wrlong	#78, local06
0b244     03 00 00 FF 
0b248     0C 64 06 F1 | 	add	objptr, ##1548
0b24c     32 B5 02 FB | 	rdlong	local08, objptr
0b250                 | '   gotoline=val%(lparts(ct).part$) 
0b250                 | '   compiledline(lineptr).result_type=token_fast_goto
0b250                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b250                 | '   do
0b250     40 00 00 FF 
0b254     60 65 86 F1 | 	sub	objptr, ##33120
0b258                 | LR__0960
0b258     E7 92 02 F6 | 	mov	arg01, fp
0b25c     10 92 06 F1 | 	add	arg01, #16
0b260     5A 95 02 F6 | 	mov	arg02, local08
0b264     18 96 06 F6 | 	mov	arg03, #24
0b268     EC 84 B1 FD | 	call	#_psram_spin2_read1
0b26c                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b26c                 | '     if gotoheader(0)<>$FFFFFFFF then
0b26c     10 CE 05 F1 | 	add	fp, #16
0b270     E7 B0 02 FB | 	rdlong	local06, fp
0b274     10 CE 85 F1 | 	sub	fp, #16
0b278     FF FF 7F FF 
0b27c     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0b280     5A B7 02 56 |  if_ne	mov	local09, local08
0b284     24 CE 05 51 |  if_ne	add	fp, #36
0b288     E7 B4 02 5B |  if_ne	rdlong	local08, fp
0b28c     24 CE 85 51 |  if_ne	sub	fp, #36
0b290     24 CE 05 F1 | 	add	fp, #36
0b294     E7 B0 02 FB | 	rdlong	local06, fp
0b298     24 CE 85 F1 | 	sub	fp, #36
0b29c     FF FF 3F FF 
0b2a0     FF B1 0E F2 | 	cmp	local06, ##2147483647 wz
0b2a4     10 CE 05 51 |  if_ne	add	fp, #16
0b2a8     E7 AE 02 5B |  if_ne	rdlong	local05, fp
0b2ac     10 CE 85 51 |  if_ne	sub	fp, #16
0b2b0     FF FF 7F 5F 
0b2b4     FF AF 0E 52 |  if_ne	cmp	local05, ##-1 wz
0b2b8     10 CE 05 51 |  if_ne	add	fp, #16
0b2bc     57 B3 02 56 |  if_ne	mov	local07, local05
0b2c0     10 CE 85 51 |  if_ne	sub	fp, #16
0b2c4     56 B3 0A 52 |  if_ne	cmp	local07, local04 wz
0b2c8     8C FF 9F 5D |  if_ne	jmp	#LR__0960
0b2cc     0B 00 00 FF 
0b2d0     CC 64 86 F1 | 	sub	objptr, ##5836
0b2d4                 | '   if gotoheader(0)=gotoline then
0b2d4     10 CE 05 F1 | 	add	fp, #16
0b2d8     E7 B0 02 FB | 	rdlong	local06, fp
0b2dc     10 CE 85 F1 | 	sub	fp, #16
0b2e0     56 B1 0A F2 | 	cmp	local06, local04 wz
0b2e4     68 00 90 5D |  if_ne	jmp	#LR__0961
0b2e8     4C 00 00 FF 
0b2ec     20 64 06 F1 | 	add	objptr, ##38944
0b2f0     32 AF 02 FB | 	rdlong	local05, objptr
0b2f4     57 B1 02 F6 | 	mov	local06, local05
0b2f8     01 B0 66 F0 | 	shl	local06, #1
0b2fc     57 B1 02 F1 | 	add	local06, local05
0b300     02 B0 66 F0 | 	shl	local06, #2
0b304     03 00 00 FF 
0b308     00 64 86 F1 | 	sub	objptr, ##1536
0b30c     32 B1 02 F1 | 	add	local06, objptr
0b310     58 B7 62 FC | 	wrlong	local09, local06
0b314     03 00 00 FF 
0b318     00 64 06 F1 | 	add	objptr, ##1536
0b31c     32 AF 02 FB | 	rdlong	local05, objptr
0b320     57 B1 02 F6 | 	mov	local06, local05
0b324     01 B0 66 F0 | 	shl	local06, #1
0b328     57 B1 02 F1 | 	add	local06, local05
0b32c     02 B0 66 F0 | 	shl	local06, #2
0b330     03 00 00 FF 
0b334     00 64 86 F1 | 	sub	objptr, ##1536
0b338     32 B1 02 F1 | 	add	local06, objptr
0b33c     04 B0 06 F1 | 	add	local06, #4
0b340     58 AD 62 FC | 	wrlong	local04, local06
0b344     49 00 00 FF 
0b348     20 64 86 F1 | 	sub	objptr, ##37408
0b34c     98 00 90 FD | 	jmp	#LR__0962
0b350                 | LR__0961
0b350     4C 00 00 FF 
0b354     20 64 06 F1 | 	add	objptr, ##38944
0b358     32 AF 02 FB | 	rdlong	local05, objptr
0b35c     57 B1 02 F6 | 	mov	local06, local05
0b360     01 B0 66 F0 | 	shl	local06, #1
0b364     57 B1 02 F1 | 	add	local06, local05
0b368     02 B0 66 F0 | 	shl	local06, #2
0b36c     03 00 00 FF 
0b370     00 64 86 F1 | 	sub	objptr, ##1536
0b374     32 B1 02 F1 | 	add	local06, objptr
0b378     00 00 C0 FF 
0b37c     58 01 68 FC | 	wrlong	##-2147483648, local06
0b380     03 00 00 FF 
0b384     00 64 06 F1 | 	add	objptr, ##1536
0b388     32 AF 02 FB | 	rdlong	local05, objptr
0b38c     57 B1 02 F6 | 	mov	local06, local05
0b390     01 B0 66 F0 | 	shl	local06, #1
0b394     57 B1 02 F1 | 	add	local06, local05
0b398     02 B0 66 F0 | 	shl	local06, #2
0b39c     03 00 00 FF 
0b3a0     00 64 86 F1 | 	sub	objptr, ##1536
0b3a4     32 B1 02 F1 | 	add	local06, objptr
0b3a8     04 B0 06 F1 | 	add	local06, #4
0b3ac     58 AD 62 FC | 	wrlong	local04, local06
0b3b0     03 00 00 FF 
0b3b4     00 64 06 F1 | 	add	objptr, ##1536
0b3b8     32 AF 02 FB | 	rdlong	local05, objptr
0b3bc     57 B1 02 F6 | 	mov	local06, local05
0b3c0     01 B0 66 F0 | 	shl	local06, #1
0b3c4     57 B1 02 F1 | 	add	local06, local05
0b3c8     02 B0 66 F0 | 	shl	local06, #2
0b3cc     03 00 00 FF 
0b3d0     00 64 86 F1 | 	sub	objptr, ##1536
0b3d4     32 B1 02 F1 | 	add	local06, objptr
0b3d8     08 B0 06 F1 | 	add	local06, #8
0b3dc     58 A7 68 FC | 	wrlong	#83, local06
0b3e0     49 00 00 FF 
0b3e4     20 64 86 F1 | 	sub	objptr, ##37408
0b3e8                 | LR__0962
0b3e8     4C 00 00 FF 
0b3ec     20 64 06 F1 | 	add	objptr, ##38944
0b3f0     32 B7 02 FB | 	rdlong	local09, objptr
0b3f4     01 B6 06 F1 | 	add	local09, #1
0b3f8     32 B7 62 FC | 	wrlong	local09, objptr
0b3fc     4C 00 00 FF 
0b400     20 64 86 F1 | 	sub	objptr, ##38944
0b404     BC 00 90 FD | 	jmp	#LR__0964
0b408                 | LR__0963
0b408     4C 0A B0 FD | 	call	#_expr
0b40c     4F AA 06 F6 | 	mov	local03, #79
0b410     00 A6 06 F6 | 	mov	local01, #0
0b414     54 B9 02 F6 | 	mov	local10, local02
0b418     55 AF 02 F6 | 	mov	local05, local03
0b41c     4C 00 00 FF 
0b420     20 64 06 F1 | 	add	objptr, ##38944
0b424     32 A7 02 FB | 	rdlong	local01, objptr
0b428     53 B7 02 F6 | 	mov	local09, local01
0b42c     01 B6 66 F0 | 	shl	local09, #1
0b430     53 B7 02 F1 | 	add	local09, local01
0b434     02 B6 66 F0 | 	shl	local09, #2
0b438     03 00 00 FF 
0b43c     00 64 86 F1 | 	sub	objptr, ##1536
0b440     32 B7 02 F1 | 	add	local09, objptr
0b444     5B 01 68 FC | 	wrlong	#0, local09
0b448     03 00 00 FF 
0b44c     00 64 06 F1 | 	add	objptr, ##1536
0b450     32 A7 02 FB | 	rdlong	local01, objptr
0b454     53 B7 02 F6 | 	mov	local09, local01
0b458     01 B6 66 F0 | 	shl	local09, #1
0b45c     53 B7 02 F1 | 	add	local09, local01
0b460     02 B6 66 F0 | 	shl	local09, #2
0b464     03 00 00 FF 
0b468     00 64 86 F1 | 	sub	objptr, ##1536
0b46c     32 B7 02 F1 | 	add	local09, objptr
0b470     04 B6 06 F1 | 	add	local09, #4
0b474     5B B9 62 FC | 	wrlong	local10, local09
0b478     03 00 00 FF 
0b47c     00 64 06 F1 | 	add	objptr, ##1536
0b480     32 B9 02 FB | 	rdlong	local10, objptr
0b484     5C A7 02 F6 | 	mov	local01, local10
0b488     01 A6 66 F0 | 	shl	local01, #1
0b48c     5C A7 02 F1 | 	add	local01, local10
0b490     02 A6 66 F0 | 	shl	local01, #2
0b494     03 00 00 FF 
0b498     00 64 86 F1 | 	sub	objptr, ##1536
0b49c     32 A7 02 F1 | 	add	local01, objptr
0b4a0     08 A6 06 F1 | 	add	local01, #8
0b4a4     53 AF 62 FC | 	wrlong	local05, local01
0b4a8     03 00 00 FF 
0b4ac     00 64 06 F1 | 	add	objptr, ##1536
0b4b0     32 B9 02 FB | 	rdlong	local10, objptr
0b4b4     01 B8 06 F1 | 	add	local10, #1
0b4b8     32 B9 62 FC | 	wrlong	local10, objptr
0b4bc     4C 00 00 FF 
0b4c0     20 64 86 F1 | 	sub	objptr, ##38944
0b4c4                 | LR__0964
0b4c4                 | ' return 0
0b4c4     00 7A 06 F6 | 	mov	result1, #0
0b4c8     E7 F0 03 F6 | 	mov	ptra, fp
0b4cc     F2 00 A0 FD | 	call	#popregs_
0b4d0                 | _compile_goto_ret
0b4d0     2D 00 64 FD | 	ret
0b4d4                 | 
0b4d4                 | ' 
0b4d4                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b4d4                 | ' 
0b4d4                 | ' function compile_on() as ulong
0b4d4                 | _compile_on
0b4d4     04 CA 05 F6 | 	mov	COUNT_, #4
0b4d8     E8 00 A0 FD | 	call	#pushregs_
0b4dc     78 09 B0 FD | 	call	#_expr
0b4e0     00 A6 06 F6 | 	mov	local01, #0
0b4e4     4C 00 00 FF 
0b4e8     20 64 06 F1 | 	add	objptr, ##38944
0b4ec     32 95 02 FB | 	rdlong	arg02, objptr
0b4f0     4A 93 02 F6 | 	mov	arg01, arg02
0b4f4     01 92 66 F0 | 	shl	arg01, #1
0b4f8     4A 93 02 F1 | 	add	arg01, arg02
0b4fc     02 92 66 F0 | 	shl	arg01, #2
0b500     03 00 00 FF 
0b504     00 64 86 F1 | 	sub	objptr, ##1536
0b508     32 93 02 F1 | 	add	arg01, objptr
0b50c     08 92 06 F1 | 	add	arg01, #8
0b510     49 83 69 FC | 	wrlong	#193, arg01
0b514     03 00 00 FF 
0b518     00 64 06 F1 | 	add	objptr, ##1536
0b51c     32 95 02 FB | 	rdlong	arg02, objptr
0b520     4A A9 02 F6 | 	mov	local02, arg02
0b524     01 94 06 F1 | 	add	arg02, #1
0b528     32 95 62 FC | 	wrlong	arg02, objptr
0b52c                 | ' expr()
0b52c                 | ' 'print lparts(ct).part$ 'ok
0b52c                 | ' numpar=0
0b52c                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b52c                 | ' if lparts(ct).part$="goto" then
0b52c     13 00 00 FF 
0b530     38 64 86 F1 | 	sub	objptr, ##9784
0b534     32 95 02 FB | 	rdlong	arg02, objptr
0b538     03 94 66 F0 | 	shl	arg02, #3
0b53c     02 00 00 FF 
0b540     38 64 86 F1 | 	sub	objptr, ##1080
0b544     32 95 02 F1 | 	add	arg02, objptr
0b548     4A 93 02 FB | 	rdlong	arg01, arg02
0b54c     95 01 00 FF 
0b550     4E 94 06 F6 | 	mov	arg02, ##@LR__5926
0b554     36 00 00 FF 
0b558     B0 65 86 F1 | 	sub	objptr, ##28080
0b55c     58 92 B1 FD | 	call	#__system___string_cmp
0b560     00 7A 0E F2 | 	cmp	result1, #0 wz
0b564     FC 01 90 5D |  if_ne	jmp	#LR__0975
0b568     38 00 00 FF 
0b56c     E8 65 06 F1 | 	add	objptr, ##29160
0b570     32 AB 02 FB | 	rdlong	local03, objptr
0b574     38 00 00 FF 
0b578     E8 65 86 F1 | 	sub	objptr, ##29160
0b57c     01 AA 06 F1 | 	add	local03, #1
0b580                 | '   i=ct+1
0b580                 | '   do
0b580                 | LR__0970
0b580                 | '     if lparts(i).token=token_decimal then
0b580     55 7B 02 F6 | 	mov	result1, local03
0b584     03 7A 66 F0 | 	shl	result1, #3
0b588     32 95 02 F6 | 	mov	arg02, objptr
0b58c     36 00 00 FF 
0b590     B0 95 06 F1 | 	add	arg02, ##28080
0b594     4A 7B 02 F1 | 	add	result1, arg02
0b598     04 7A 06 F1 | 	add	result1, #4
0b59c     3D 7B 02 FB | 	rdlong	result1, result1
0b5a0     01 00 00 FF 
0b5a4     00 7A 0E F2 | 	cmp	result1, ##512 wz
0b5a8     DC 00 90 5D |  if_ne	jmp	#LR__0971
0b5ac     4C 00 00 FF 
0b5b0     20 64 06 F1 | 	add	objptr, ##38944
0b5b4     32 7B 02 FB | 	rdlong	result1, objptr
0b5b8     3D 95 02 F6 | 	mov	arg02, result1
0b5bc     01 94 66 F0 | 	shl	arg02, #1
0b5c0     3D 95 02 F1 | 	add	arg02, result1
0b5c4     02 94 66 F0 | 	shl	arg02, #2
0b5c8     03 00 00 FF 
0b5cc     00 64 86 F1 | 	sub	objptr, ##1536
0b5d0     32 95 02 F1 | 	add	arg02, objptr
0b5d4     00 00 C0 FF 
0b5d8     4A 01 68 FC | 	wrlong	##-2147483648, arg02
0b5dc     03 00 00 FF 
0b5e0     00 64 06 F1 | 	add	objptr, ##1536
0b5e4     32 95 02 FB | 	rdlong	arg02, objptr
0b5e8     4A AD 02 F6 | 	mov	local04, arg02
0b5ec     01 AC 66 F0 | 	shl	local04, #1
0b5f0     4A AD 02 F1 | 	add	local04, arg02
0b5f4     02 AC 66 F0 | 	shl	local04, #2
0b5f8     03 00 00 FF 
0b5fc     00 64 86 F1 | 	sub	objptr, ##1536
0b600     32 AD 02 F1 | 	add	local04, objptr
0b604     55 95 02 F6 | 	mov	arg02, local03
0b608     03 94 66 F0 | 	shl	arg02, #3
0b60c     12 00 00 FF 
0b610     70 64 86 F1 | 	sub	objptr, ##9328
0b614     32 95 02 F1 | 	add	arg02, objptr
0b618     4A 93 02 FB | 	rdlong	arg01, arg02
0b61c     00 94 06 F6 | 	mov	arg02, #0
0b620     36 00 00 FF 
0b624     B0 65 86 F1 | 	sub	objptr, ##28080
0b628     B8 BE B1 FD | 	call	#__system____builtin_atoi
0b62c     04 AC 06 F1 | 	add	local04, #4
0b630     56 7B 62 FC | 	wrlong	result1, local04
0b634     4C 00 00 FF 
0b638     20 64 06 F1 | 	add	objptr, ##38944
0b63c     32 95 02 FB | 	rdlong	arg02, objptr
0b640     4A AD 02 F6 | 	mov	local04, arg02
0b644     01 AC 66 F0 | 	shl	local04, #1
0b648     4A AD 02 F1 | 	add	local04, arg02
0b64c     02 AC 66 F0 | 	shl	local04, #2
0b650     03 00 00 FF 
0b654     00 64 86 F1 | 	sub	objptr, ##1536
0b658     32 AD 02 F1 | 	add	local04, objptr
0b65c     08 AC 06 F1 | 	add	local04, #8
0b660     56 A7 68 FC | 	wrlong	#83, local04
0b664     03 00 00 FF 
0b668     00 64 06 F1 | 	add	objptr, ##1536
0b66c     32 AD 02 FB | 	rdlong	local04, objptr
0b670     01 AC 06 F1 | 	add	local04, #1
0b674     32 AD 62 FC | 	wrlong	local04, objptr
0b678     4C 00 00 FF 
0b67c     20 64 86 F1 | 	sub	objptr, ##38944
0b680     01 A6 06 F1 | 	add	local01, #1
0b684     08 00 90 FD | 	jmp	#LR__0972
0b688                 | LR__0971
0b688                 | '       return 17
0b688     11 7A 06 F6 | 	mov	result1, #17
0b68c     2C 04 90 FD | 	jmp	#LR__0985
0b690                 | LR__0972
0b690     01 AA 06 F1 | 	add	local03, #1
0b694                 | '     i+=1
0b694                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b694     55 93 02 F6 | 	mov	arg01, local03
0b698     03 92 66 F0 | 	shl	arg01, #3
0b69c     32 AD 02 F6 | 	mov	local04, objptr
0b6a0     36 00 00 FF 
0b6a4     B0 AD 06 F1 | 	add	local04, ##28080
0b6a8     56 93 02 F1 | 	add	arg01, local04
0b6ac     04 92 06 F1 | 	add	arg01, #4
0b6b0     49 93 02 FB | 	rdlong	arg01, arg01
0b6b4     11 92 0E F2 | 	cmp	arg01, #17 wz
0b6b8     2C 00 90 AD |  if_e	jmp	#LR__0973
0b6bc     55 93 02 F6 | 	mov	arg01, local03
0b6c0     03 92 66 F0 | 	shl	arg01, #3
0b6c4     32 AD 02 F6 | 	mov	local04, objptr
0b6c8     36 00 00 FF 
0b6cc     B0 AD 06 F1 | 	add	local04, ##28080
0b6d0     56 93 02 F1 | 	add	arg01, local04
0b6d4     04 92 06 F1 | 	add	arg01, #4
0b6d8     49 AD 02 FB | 	rdlong	local04, arg01
0b6dc     FE AD 0E F2 | 	cmp	local04, #510 wz
0b6e0     15 7A 06 56 |  if_ne	mov	result1, #21
0b6e4     D4 03 90 5D |  if_ne	jmp	#LR__0985
0b6e8                 | LR__0973
0b6e8                 | '     if lparts(i).token=token_end then exit loop
0b6e8     55 7B 02 F6 | 	mov	result1, local03
0b6ec     03 7A 66 F0 | 	shl	result1, #3
0b6f0     32 AD 02 F6 | 	mov	local04, objptr
0b6f4     36 00 00 FF 
0b6f8     B0 AD 06 F1 | 	add	local04, ##28080
0b6fc     56 7B 02 F1 | 	add	result1, local04
0b700     04 7A 06 F1 | 	add	result1, #4
0b704     3D 7B 02 FB | 	rdlong	result1, result1
0b708     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b70c     2C 00 90 AD |  if_e	jmp	#LR__0974
0b710     01 AA 06 F1 | 	add	local03, #1
0b714     55 7B 02 F6 | 	mov	result1, local03
0b718     03 7A 66 F0 | 	shl	result1, #3
0b71c     32 AD 02 F6 | 	mov	local04, objptr
0b720     36 00 00 FF 
0b724     B0 AD 06 F1 | 	add	local04, ##28080
0b728     56 7B 02 F1 | 	add	result1, local04
0b72c     04 7A 06 F1 | 	add	result1, #4
0b730     3D 7B 02 FB | 	rdlong	result1, result1
0b734     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b738     44 FE 9F 5D |  if_ne	jmp	#LR__0970
0b73c                 | LR__0974
0b73c     54 AB 02 F6 | 	mov	local03, local02
0b740     01 AA 66 F0 | 	shl	local03, #1
0b744     54 AB 02 F1 | 	add	local03, local02
0b748     02 AA 66 F0 | 	shl	local03, #2
0b74c     32 AD 02 F6 | 	mov	local04, objptr
0b750     49 00 00 FF 
0b754     20 AC 06 F1 | 	add	local04, ##37408
0b758     56 AB 02 F1 | 	add	local03, local04
0b75c     04 AA 06 F1 | 	add	local03, #4
0b760     55 03 68 FC | 	wrlong	#1, local03
0b764                 | LR__0975
0b764                 | ' 
0b764                 | ' if lparts(ct).part$="gosub" then
0b764     38 00 00 FF 
0b768     E8 65 06 F1 | 	add	objptr, ##29160
0b76c     32 AB 02 FB | 	rdlong	local03, objptr
0b770     03 AA 66 F0 | 	shl	local03, #3
0b774     02 00 00 FF 
0b778     38 64 86 F1 | 	sub	objptr, ##1080
0b77c     32 AB 02 F1 | 	add	local03, objptr
0b780     55 93 02 FB | 	rdlong	arg01, local03
0b784     95 01 00 FF 
0b788     53 94 06 F6 | 	mov	arg02, ##@LR__5927
0b78c     36 00 00 FF 
0b790     B0 65 86 F1 | 	sub	objptr, ##28080
0b794     20 90 B1 FD | 	call	#__system___string_cmp
0b798     00 7A 0E F2 | 	cmp	result1, #0 wz
0b79c     6C 02 90 5D |  if_ne	jmp	#LR__0981
0b7a0     38 00 00 FF 
0b7a4     E8 65 06 F1 | 	add	objptr, ##29160
0b7a8     32 AB 02 FB | 	rdlong	local03, objptr
0b7ac     38 00 00 FF 
0b7b0     E8 65 86 F1 | 	sub	objptr, ##29160
0b7b4     01 AA 06 F1 | 	add	local03, #1
0b7b8                 | '   i=ct+1
0b7b8                 | '   do
0b7b8                 | LR__0976
0b7b8                 | '     if lparts(i).token=token_decimal then
0b7b8     55 7B 02 F6 | 	mov	result1, local03
0b7bc     03 7A 66 F0 | 	shl	result1, #3
0b7c0     32 AD 02 F6 | 	mov	local04, objptr
0b7c4     36 00 00 FF 
0b7c8     B0 AD 06 F1 | 	add	local04, ##28080
0b7cc     56 7B 02 F1 | 	add	result1, local04
0b7d0     04 7A 06 F1 | 	add	result1, #4
0b7d4     3D 7B 02 FB | 	rdlong	result1, result1
0b7d8     01 00 00 FF 
0b7dc     00 7A 0E F2 | 	cmp	result1, ##512 wz
0b7e0     4C 01 90 5D |  if_ne	jmp	#LR__0977
0b7e4     4C 00 00 FF 
0b7e8     20 64 06 F1 | 	add	objptr, ##38944
0b7ec     32 7B 02 FB | 	rdlong	result1, objptr
0b7f0     3D AD 02 F6 | 	mov	local04, result1
0b7f4     01 AC 66 F0 | 	shl	local04, #1
0b7f8     3D AD 02 F1 | 	add	local04, result1
0b7fc     02 AC 66 F0 | 	shl	local04, #2
0b800     03 00 00 FF 
0b804     00 64 86 F1 | 	sub	objptr, ##1536
0b808     32 AD 02 F1 | 	add	local04, objptr
0b80c     08 AC 06 F1 | 	add	local04, #8
0b810     56 53 69 FC | 	wrlong	#169, local04
0b814     03 00 00 FF 
0b818     00 64 06 F1 | 	add	objptr, ##1536
0b81c     32 7B 02 FB | 	rdlong	result1, objptr
0b820     01 7A 06 F1 | 	add	result1, #1
0b824     32 7B 62 FC | 	wrlong	result1, objptr
0b828     3D AD 02 F6 | 	mov	local04, result1
0b82c     01 AC 66 F0 | 	shl	local04, #1
0b830     3D AD 02 F1 | 	add	local04, result1
0b834     02 AC 66 F0 | 	shl	local04, #2
0b838     03 00 00 FF 
0b83c     00 64 86 F1 | 	sub	objptr, ##1536
0b840     32 AD 02 F1 | 	add	local04, objptr
0b844     00 00 C0 FF 
0b848     56 01 68 FC | 	wrlong	##-2147483648, local04
0b84c     03 00 00 FF 
0b850     00 64 06 F1 | 	add	objptr, ##1536
0b854     32 7B 02 FB | 	rdlong	result1, objptr
0b858     3D AD 02 F6 | 	mov	local04, result1
0b85c     01 AC 66 F0 | 	shl	local04, #1
0b860     3D AD 02 F1 | 	add	local04, result1
0b864     02 AC 66 F0 | 	shl	local04, #2
0b868     03 00 00 FF 
0b86c     00 64 86 F1 | 	sub	objptr, ##1536
0b870     32 AD 02 F1 | 	add	local04, objptr
0b874     55 93 02 F6 | 	mov	arg01, local03
0b878     03 92 66 F0 | 	shl	arg01, #3
0b87c     12 00 00 FF 
0b880     70 64 86 F1 | 	sub	objptr, ##9328
0b884     32 93 02 F1 | 	add	arg01, objptr
0b888     49 93 02 FB | 	rdlong	arg01, arg01
0b88c     00 94 06 F6 | 	mov	arg02, #0
0b890     36 00 00 FF 
0b894     B0 65 86 F1 | 	sub	objptr, ##28080
0b898     48 BC B1 FD | 	call	#__system____builtin_atoi
0b89c     04 AC 06 F1 | 	add	local04, #4
0b8a0     56 7B 62 FC | 	wrlong	result1, local04
0b8a4     4C 00 00 FF 
0b8a8     20 64 06 F1 | 	add	objptr, ##38944
0b8ac     32 93 02 FB | 	rdlong	arg01, objptr
0b8b0     49 AD 02 F6 | 	mov	local04, arg01
0b8b4     01 AC 66 F0 | 	shl	local04, #1
0b8b8     49 AD 02 F1 | 	add	local04, arg01
0b8bc     02 AC 66 F0 | 	shl	local04, #2
0b8c0     03 00 00 FF 
0b8c4     00 64 86 F1 | 	sub	objptr, ##1536
0b8c8     32 AD 02 F1 | 	add	local04, objptr
0b8cc     08 AC 06 F1 | 	add	local04, #8
0b8d0     56 A7 68 FC | 	wrlong	#83, local04
0b8d4     03 00 00 FF 
0b8d8     00 64 06 F1 | 	add	objptr, ##1536
0b8dc     32 93 02 FB | 	rdlong	arg01, objptr
0b8e0     01 92 06 F1 | 	add	arg01, #1
0b8e4     32 93 62 FC | 	wrlong	arg01, objptr
0b8e8     01 A6 06 F1 | 	add	local01, #1
0b8ec     49 AD 02 F6 | 	mov	local04, arg01
0b8f0     01 AC 66 F0 | 	shl	local04, #1
0b8f4     49 AD 02 F1 | 	add	local04, arg01
0b8f8     02 AC 66 F0 | 	shl	local04, #2
0b8fc     03 00 00 FF 
0b900     00 64 86 F1 | 	sub	objptr, ##1536
0b904     32 AD 02 F1 | 	add	local04, objptr
0b908     08 AC 06 F1 | 	add	local04, #8
0b90c     56 5B 68 FC | 	wrlong	#45, local04
0b910     03 00 00 FF 
0b914     00 64 06 F1 | 	add	objptr, ##1536
0b918     32 AD 02 FB | 	rdlong	local04, objptr
0b91c     01 AC 06 F1 | 	add	local04, #1
0b920     32 AD 62 FC | 	wrlong	local04, objptr
0b924     4C 00 00 FF 
0b928     20 64 86 F1 | 	sub	objptr, ##38944
0b92c     08 00 90 FD | 	jmp	#LR__0978
0b930                 | LR__0977
0b930                 | '       return 17
0b930     11 7A 06 F6 | 	mov	result1, #17
0b934     84 01 90 FD | 	jmp	#LR__0985
0b938                 | LR__0978
0b938     01 AA 06 F1 | 	add	local03, #1
0b93c                 | '     i+=1
0b93c                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b93c     55 93 02 F6 | 	mov	arg01, local03
0b940     03 92 66 F0 | 	shl	arg01, #3
0b944     32 AD 02 F6 | 	mov	local04, objptr
0b948     36 00 00 FF 
0b94c     B0 AD 06 F1 | 	add	local04, ##28080
0b950     56 93 02 F1 | 	add	arg01, local04
0b954     04 92 06 F1 | 	add	arg01, #4
0b958     49 93 02 FB | 	rdlong	arg01, arg01
0b95c     11 92 0E F2 | 	cmp	arg01, #17 wz
0b960     2C 00 90 AD |  if_e	jmp	#LR__0979
0b964     55 93 02 F6 | 	mov	arg01, local03
0b968     03 92 66 F0 | 	shl	arg01, #3
0b96c     32 AD 02 F6 | 	mov	local04, objptr
0b970     36 00 00 FF 
0b974     B0 AD 06 F1 | 	add	local04, ##28080
0b978     56 93 02 F1 | 	add	arg01, local04
0b97c     04 92 06 F1 | 	add	arg01, #4
0b980     49 93 02 FB | 	rdlong	arg01, arg01
0b984     FE 93 0E F2 | 	cmp	arg01, #510 wz
0b988     15 7A 06 56 |  if_ne	mov	result1, #21
0b98c     2C 01 90 5D |  if_ne	jmp	#LR__0985
0b990                 | LR__0979
0b990                 | '     if lparts(i).token=token_end then exit loop
0b990     55 7B 02 F6 | 	mov	result1, local03
0b994     03 7A 66 F0 | 	shl	result1, #3
0b998     32 AD 02 F6 | 	mov	local04, objptr
0b99c     36 00 00 FF 
0b9a0     B0 AD 06 F1 | 	add	local04, ##28080
0b9a4     56 7B 02 F1 | 	add	result1, local04
0b9a8     04 7A 06 F1 | 	add	result1, #4
0b9ac     3D 7B 02 FB | 	rdlong	result1, result1
0b9b0     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b9b4     2C 00 90 AD |  if_e	jmp	#LR__0980
0b9b8     01 AA 06 F1 | 	add	local03, #1
0b9bc     55 7B 02 F6 | 	mov	result1, local03
0b9c0     03 7A 66 F0 | 	shl	result1, #3
0b9c4     32 AD 02 F6 | 	mov	local04, objptr
0b9c8     36 00 00 FF 
0b9cc     B0 AD 06 F1 | 	add	local04, ##28080
0b9d0     56 7B 02 F1 | 	add	result1, local04
0b9d4     04 7A 06 F1 | 	add	result1, #4
0b9d8     3D 7B 02 FB | 	rdlong	result1, result1
0b9dc     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b9e0     D4 FD 9F 5D |  if_ne	jmp	#LR__0976
0b9e4                 | LR__0980
0b9e4     54 AB 02 F6 | 	mov	local03, local02
0b9e8     01 AA 66 F0 | 	shl	local03, #1
0b9ec     54 AB 02 F1 | 	add	local03, local02
0b9f0     02 AA 66 F0 | 	shl	local03, #2
0b9f4     32 AD 02 F6 | 	mov	local04, objptr
0b9f8     49 00 00 FF 
0b9fc     20 AC 06 F1 | 	add	local04, ##37408
0ba00     56 AB 02 F1 | 	add	local03, local04
0ba04     04 AA 06 F1 | 	add	local03, #4
0ba08     55 07 68 FC | 	wrlong	#3, local03
0ba0c                 | LR__0981
0ba0c     54 AB 02 F6 | 	mov	local03, local02
0ba10     01 AA 66 F0 | 	shl	local03, #1
0ba14     54 AB 02 F1 | 	add	local03, local02
0ba18     02 AA 66 F0 | 	shl	local03, #2
0ba1c     49 00 00 FF 
0ba20     20 64 06 F1 | 	add	objptr, ##37408
0ba24     32 AB 02 F1 | 	add	local03, objptr
0ba28     55 A7 62 FC | 	wrlong	local01, local03
0ba2c                 | ' compiledline(onlineptr).result.uresult=numpar
0ba2c                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0ba2c     03 00 00 FF 
0ba30     00 64 06 F1 | 	add	objptr, ##1536
0ba34     32 AB 02 FB | 	rdlong	local03, objptr
0ba38     4C 00 00 FF 
0ba3c     20 64 86 F1 | 	sub	objptr, ##38944
0ba40     D7 3A 48 FB | 	callpa	#(@LR__0984-@LR__0982)>>2,fcache_load_ptr_
0ba44                 | LR__0982
0ba44     55 AD 02 F6 | 	mov	local04, local03
0ba48     01 AC 66 F0 | 	shl	local04, #1
0ba4c     55 AD 02 F1 | 	add	local04, local03
0ba50     02 AC 66 F0 | 	shl	local04, #2
0ba54     32 A7 02 F6 | 	mov	local01, objptr
0ba58     49 00 00 FF 
0ba5c     20 A6 06 F1 | 	add	local01, ##37408
0ba60     53 AD 02 F1 | 	add	local04, local01
0ba64     08 AC 06 F1 | 	add	local04, #8
0ba68     56 AD 02 FB | 	rdlong	local04, local04
0ba6c     2D AC 0E F2 | 	cmp	local04, #45 wz
0ba70     38 00 90 5D |  if_ne	jmp	#LR__0983
0ba74     55 AD 02 F6 | 	mov	local04, local03
0ba78     01 AC 66 F0 | 	shl	local04, #1
0ba7c     55 AD 02 F1 | 	add	local04, local03
0ba80     02 AC 66 F0 | 	shl	local04, #2
0ba84     49 00 00 FF 
0ba88     20 64 06 F1 | 	add	objptr, ##37408
0ba8c     32 AD 02 F1 | 	add	local04, objptr
0ba90     03 00 00 FF 
0ba94     00 64 06 F1 | 	add	objptr, ##1536
0ba98     32 A7 02 FB | 	rdlong	local01, objptr
0ba9c     4C 00 00 FF 
0baa0     20 64 86 F1 | 	sub	objptr, ##38944
0baa4     02 A6 86 F1 | 	sub	local01, #2
0baa8     56 A7 62 FC | 	wrlong	local01, local04
0baac                 | LR__0983
0baac     01 AA 86 F1 | 	sub	local03, #1
0bab0     54 AB 52 F2 | 	cmps	local03, local02 wc
0bab4     8C FF 9F 3D |  if_ae	jmp	#LR__0982
0bab8                 | LR__0984
0bab8                 | ' return 0
0bab8     00 7A 06 F6 | 	mov	result1, #0
0babc                 | LR__0985
0babc     E7 F0 03 F6 | 	mov	ptra, fp
0bac0     F2 00 A0 FD | 	call	#popregs_
0bac4                 | _compile_on_ret
0bac4     2D 00 64 FD | 	ret
0bac8                 | 
0bac8                 | ' 
0bac8                 | ' '----- A helper for compile_input and compile_read
0bac8                 | '  
0bac8                 | ' function getaddr() as ulong
0bac8                 | _getaddr
0bac8     0B CA 05 F6 | 	mov	COUNT_, #11
0bacc     E8 00 A0 FD | 	call	#pushregs_
0bad0     38 00 00 FF 
0bad4     E8 65 06 F1 | 	add	objptr, ##29160
0bad8     32 AD 02 FB | 	rdlong	local04, objptr
0badc     03 AC 66 F0 | 	shl	local04, #3
0bae0     02 00 00 FF 
0bae4     38 64 86 F1 | 	sub	objptr, ##1080
0bae8     32 AD 02 F1 | 	add	local04, objptr
0baec     56 AF 02 FB | 	rdlong	local05, local04
0baf0     01 B0 66 F6 | 	neg	local06, #1
0baf4                 | ' 
0baf4                 | ' varname$=lparts(ct).part$
0baf4                 | ' j=-1
0baf4                 | ' 
0baf4                 | ' for i=0 to varnum-1
0baf4     00 B2 06 F6 | 	mov	local07, #0
0baf8     04 64 86 F1 | 	sub	objptr, #4
0bafc     32 B5 02 FB | 	rdlong	local08, objptr
0bb00     36 00 00 FF 
0bb04     AC 65 86 F1 | 	sub	objptr, ##28076
0bb08                 | LR__0990
0bb08     5A B3 52 F2 | 	cmps	local07, local08 wc
0bb0c     34 00 90 3D |  if_ae	jmp	#LR__0991
0bb10                 | '   if variables(i).name=varname$ then j=i : exit
0bb10     59 AD 02 F6 | 	mov	local04, local07
0bb14     04 AC 66 F0 | 	shl	local04, #4
0bb18     32 95 02 F6 | 	mov	arg02, objptr
0bb1c     16 00 00 FF 
0bb20     9C 95 06 F1 | 	add	arg02, ##11676
0bb24     4A AD 02 F1 | 	add	local04, arg02
0bb28     56 93 02 FB | 	rdlong	arg01, local04
0bb2c     57 95 02 F6 | 	mov	arg02, local05
0bb30     84 8C B1 FD | 	call	#__system___string_cmp
0bb34     00 7A 0E F2 | 	cmp	result1, #0 wz
0bb38     59 B1 02 A6 |  if_e	mov	local06, local07
0bb3c     01 B2 06 51 |  if_ne	add	local07, #1
0bb40     C4 FF 9F 5D |  if_ne	jmp	#LR__0990
0bb44                 | LR__0991
0bb44                 | ' if  j=-1 andalso varnum<maxvars then   
0bb44     FF FF 7F FF 
0bb48     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0bb4c     A8 00 90 5D |  if_ne	jmp	#LR__0992
0bb50     36 00 00 FF 
0bb54     AC 65 06 F1 | 	add	objptr, ##28076
0bb58     32 B5 02 FB | 	rdlong	local08, objptr
0bb5c     36 00 00 FF 
0bb60     AC 65 86 F1 | 	sub	objptr, ##28076
0bb64     02 00 00 FF 
0bb68     00 B4 56 F2 | 	cmps	local08, ##1024 wc
0bb6c     88 00 90 3D |  if_ae	jmp	#LR__0992
0bb70     36 00 00 FF 
0bb74     AC 65 06 F1 | 	add	objptr, ##28076
0bb78     32 AD 02 FB | 	rdlong	local04, objptr
0bb7c     04 AC 66 F0 | 	shl	local04, #4
0bb80     20 00 00 FF 
0bb84     10 64 86 F1 | 	sub	objptr, ##16400
0bb88     32 AD 02 F1 | 	add	local04, objptr
0bb8c     56 AF 62 FC | 	wrlong	local05, local04
0bb90     20 00 00 FF 
0bb94     10 64 06 F1 | 	add	objptr, ##16400
0bb98     32 AD 02 FB | 	rdlong	local04, objptr
0bb9c     04 AC 66 F0 | 	shl	local04, #4
0bba0     20 00 00 FF 
0bba4     10 64 86 F1 | 	sub	objptr, ##16400
0bba8     32 AD 02 F1 | 	add	local04, objptr
0bbac     04 AC 06 F1 | 	add	local04, #4
0bbb0     56 01 68 FC | 	wrlong	#0, local04
0bbb4     20 00 00 FF 
0bbb8     10 64 06 F1 | 	add	objptr, ##16400
0bbbc     32 AD 02 FB | 	rdlong	local04, objptr
0bbc0     04 AC 66 F0 | 	shl	local04, #4
0bbc4     20 00 00 FF 
0bbc8     10 64 86 F1 | 	sub	objptr, ##16400
0bbcc     32 AD 02 F1 | 	add	local04, objptr
0bbd0     0C AC 06 F1 | 	add	local04, #12
0bbd4     56 39 68 FC | 	wrlong	#28, local04
0bbd8     20 00 00 FF 
0bbdc     10 64 06 F1 | 	add	objptr, ##16400
0bbe0     32 B5 02 FB | 	rdlong	local08, objptr
0bbe4     5A B1 02 F6 | 	mov	local06, local08
0bbe8     01 B4 06 F1 | 	add	local08, #1
0bbec     32 B5 62 FC | 	wrlong	local08, objptr
0bbf0     36 00 00 FF 
0bbf4     AC 65 86 F1 | 	sub	objptr, ##28076
0bbf8                 | LR__0992
0bbf8     00 B2 06 F6 | 	mov	local07, #0
0bbfc                 | ' numpar=0
0bbfc                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0bbfc     38 00 00 FF 
0bc00     E8 65 06 F1 | 	add	objptr, ##29160
0bc04     32 AD 02 FB | 	rdlong	local04, objptr
0bc08     01 AC 06 F1 | 	add	local04, #1
0bc0c     03 AC 66 F0 | 	shl	local04, #3
0bc10     02 00 00 FF 
0bc14     38 64 86 F1 | 	sub	objptr, ##1080
0bc18     32 AD 02 F1 | 	add	local04, objptr
0bc1c     04 AC 06 F1 | 	add	local04, #4
0bc20     56 B5 02 FB | 	rdlong	local08, local04
0bc24     15 B4 0E F2 | 	cmp	local08, #21 wz
0bc28     36 00 00 FF 
0bc2c     B0 65 86 F1 | 	sub	objptr, ##28080
0bc30     54 01 90 5D |  if_ne	jmp	#LR__0997
0bc34     38 00 00 FF 
0bc38     E8 65 06 F1 | 	add	objptr, ##29160
0bc3c     32 B7 02 FB | 	rdlong	local09, objptr
0bc40     01 B6 06 F1 | 	add	local09, #1
0bc44     32 B7 62 FC | 	wrlong	local09, objptr
0bc48     38 00 00 FF 
0bc4c     E8 65 86 F1 | 	sub	objptr, ##29160
0bc50                 | '   ct+=1 											' omit this lpar, this is for expr list
0bc50                 | '   do
0bc50                 | LR__0993
0bc50     38 00 00 FF 
0bc54     E8 65 06 F1 | 	add	objptr, ##29160
0bc58     32 AD 02 FB | 	rdlong	local04, objptr
0bc5c     01 AC 06 F1 | 	add	local04, #1
0bc60     32 AD 62 FC | 	wrlong	local04, objptr
0bc64                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0bc64                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0bc64     03 AC 66 F0 | 	shl	local04, #3
0bc68     02 00 00 FF 
0bc6c     38 64 86 F1 | 	sub	objptr, ##1080
0bc70     32 AD 02 F1 | 	add	local04, objptr
0bc74     04 AC 06 F1 | 	add	local04, #4
0bc78     56 B7 02 FB | 	rdlong	local09, local04
0bc7c     15 B6 0E F2 | 	cmp	local09, #21 wz
0bc80     36 00 00 FF 
0bc84     B0 65 86 F1 | 	sub	objptr, ##28080
0bc88     44 00 90 5D |  if_ne	jmp	#LR__0994
0bc8c     38 00 00 FF 
0bc90     E8 65 06 F1 | 	add	objptr, ##29160
0bc94     32 B7 02 FB | 	rdlong	local09, objptr
0bc98     01 B6 06 F1 | 	add	local09, #1
0bc9c     32 B7 62 FC | 	wrlong	local09, objptr
0bca0     38 00 00 FF 
0bca4     E8 65 86 F1 | 	sub	objptr, ##29160
0bca8     AC 01 B0 FD | 	call	#_expr
0bcac     3D B9 02 F6 | 	mov	local10, result1
0bcb0     38 00 00 FF 
0bcb4     E8 65 06 F1 | 	add	objptr, ##29160
0bcb8     32 B7 02 FB | 	rdlong	local09, objptr
0bcbc     01 B6 06 F1 | 	add	local09, #1
0bcc0     32 B7 62 FC | 	wrlong	local09, objptr
0bcc4     38 00 00 FF 
0bcc8     E8 65 86 F1 | 	sub	objptr, ##29160
0bccc     08 00 90 FD | 	jmp	#LR__0995
0bcd0                 | LR__0994
0bcd0     84 01 B0 FD | 	call	#_expr
0bcd4     3D B9 02 F6 | 	mov	local10, result1
0bcd8                 | LR__0995
0bcd8                 | '     if err>0 then return err
0bcd8     01 B8 56 F2 | 	cmps	local10, #1 wc
0bcdc     5C 7B 02 36 |  if_ae	mov	result1, local10
0bce0     68 01 90 3D |  if_ae	jmp	#LR__0998
0bce4     01 B2 06 F1 | 	add	local07, #1
0bce8     38 00 00 FF 
0bcec     E8 65 06 F1 | 	add	objptr, ##29160
0bcf0     32 AD 02 FB | 	rdlong	local04, objptr
0bcf4     03 AC 66 F0 | 	shl	local04, #3
0bcf8     02 00 00 FF 
0bcfc     38 64 86 F1 | 	sub	objptr, ##1080
0bd00     32 AD 02 F1 | 	add	local04, objptr
0bd04     04 AC 06 F1 | 	add	local04, #4
0bd08     56 B9 02 FB | 	rdlong	local10, local04
0bd0c     14 B8 0E F2 | 	cmp	local10, #20 wz
0bd10     36 00 00 FF 
0bd14     B0 65 86 F1 | 	sub	objptr, ##28080
0bd18     34 00 90 AD |  if_e	jmp	#LR__0996
0bd1c     38 00 00 FF 
0bd20     E8 65 06 F1 | 	add	objptr, ##29160
0bd24     32 B9 02 FB | 	rdlong	local10, objptr
0bd28     03 B8 66 F0 | 	shl	local10, #3
0bd2c     02 00 00 FF 
0bd30     38 64 86 F1 | 	sub	objptr, ##1080
0bd34     32 B9 02 F1 | 	add	local10, objptr
0bd38     04 B8 06 F1 | 	add	local10, #4
0bd3c     5C B9 02 FB | 	rdlong	local10, local10
0bd40     FE B9 0E F2 | 	cmp	local10, #510 wz
0bd44     36 00 00 FF 
0bd48     B0 65 86 F1 | 	sub	objptr, ##28080
0bd4c     00 FF 9F 5D |  if_ne	jmp	#LR__0993
0bd50                 | LR__0996
0bd50                 | '     if lparts(ct).token=token_end then return 14
0bd50     38 00 00 FF 
0bd54     E8 65 06 F1 | 	add	objptr, ##29160
0bd58     32 AD 02 FB | 	rdlong	local04, objptr
0bd5c     03 AC 66 F0 | 	shl	local04, #3
0bd60     02 00 00 FF 
0bd64     38 64 86 F1 | 	sub	objptr, ##1080
0bd68     32 AD 02 F1 | 	add	local04, objptr
0bd6c     04 AC 06 F1 | 	add	local04, #4
0bd70     56 B9 02 FB | 	rdlong	local10, local04
0bd74     FE B9 0E F2 | 	cmp	local10, #510 wz
0bd78     36 00 00 FF 
0bd7c     B0 65 86 F1 | 	sub	objptr, ##28080
0bd80     0E 7A 06 A6 |  if_e	mov	result1, #14
0bd84     C4 00 90 AD |  if_e	jmp	#LR__0998
0bd88                 | LR__0997
0bd88     59 A9 02 F6 | 	mov	local02, local07
0bd8c     12 AA 06 F6 | 	mov	local03, #18
0bd90     58 A7 02 F6 | 	mov	local01, local06
0bd94     53 B7 02 F6 | 	mov	local09, local01
0bd98     54 BB 02 F6 | 	mov	local11, local02
0bd9c     55 A7 02 F6 | 	mov	local01, local03
0bda0     4C 00 00 FF 
0bda4     20 64 06 F1 | 	add	objptr, ##38944
0bda8     32 B9 02 FB | 	rdlong	local10, objptr
0bdac     5C B3 02 F6 | 	mov	local07, local10
0bdb0     01 B2 66 F0 | 	shl	local07, #1
0bdb4     5C B3 02 F1 | 	add	local07, local10
0bdb8     02 B2 66 F0 | 	shl	local07, #2
0bdbc     03 00 00 FF 
0bdc0     00 64 86 F1 | 	sub	objptr, ##1536
0bdc4     32 B3 02 F1 | 	add	local07, objptr
0bdc8     59 B7 62 FC | 	wrlong	local09, local07
0bdcc     03 00 00 FF 
0bdd0     00 64 06 F1 | 	add	objptr, ##1536
0bdd4     32 B9 02 FB | 	rdlong	local10, objptr
0bdd8     5C B7 02 F6 | 	mov	local09, local10
0bddc     01 B6 66 F0 | 	shl	local09, #1
0bde0     5C B7 02 F1 | 	add	local09, local10
0bde4     02 B6 66 F0 | 	shl	local09, #2
0bde8     03 00 00 FF 
0bdec     00 64 86 F1 | 	sub	objptr, ##1536
0bdf0     32 B7 02 F1 | 	add	local09, objptr
0bdf4     04 B6 06 F1 | 	add	local09, #4
0bdf8     5B BB 62 FC | 	wrlong	local11, local09
0bdfc     03 00 00 FF 
0be00     00 64 06 F1 | 	add	objptr, ##1536
0be04     32 BB 02 FB | 	rdlong	local11, objptr
0be08     5D B9 02 F6 | 	mov	local10, local11
0be0c     01 B8 66 F0 | 	shl	local10, #1
0be10     5D B9 02 F1 | 	add	local10, local11
0be14     02 B8 66 F0 | 	shl	local10, #2
0be18     03 00 00 FF 
0be1c     00 64 86 F1 | 	sub	objptr, ##1536
0be20     32 B9 02 F1 | 	add	local10, objptr
0be24     08 B8 06 F1 | 	add	local10, #8
0be28     5C A7 62 FC | 	wrlong	local01, local10
0be2c     03 00 00 FF 
0be30     00 64 06 F1 | 	add	objptr, ##1536
0be34     32 B7 02 FB | 	rdlong	local09, objptr
0be38     01 B6 06 F1 | 	add	local09, #1
0be3c     32 B7 62 FC | 	wrlong	local09, objptr
0be40     4C 00 00 FF 
0be44     20 64 86 F1 | 	sub	objptr, ##38944
0be48                 | ' t2.result.twowords(1)=numpar
0be48                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0be48                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0be48                 | ' return 0
0be48     00 7A 06 F6 | 	mov	result1, #0
0be4c                 | LR__0998
0be4c     E7 F0 03 F6 | 	mov	ptra, fp
0be50     F2 00 A0 FD | 	call	#popregs_
0be54                 | _getaddr_ret
0be54     2D 00 64 FD | 	ret
0be58                 | 
0be58                 | ' 
0be58                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' '--------------------------------------------- 
0be58                 | ' 
0be58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0be58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' 
0be58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' '
0be58                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0be58                 | ' '
0be58                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be58                 | ' 
0be58                 | ' function expr() as ulong 
0be58                 | _expr
0be58     07 CA 05 F6 | 	mov	COUNT_, #7
0be5c     E8 00 A0 FD | 	call	#pushregs_
0be60                 | _expr_enter
0be60     38 00 00 FF 
0be64     E8 65 06 F1 | 	add	objptr, ##29160
0be68     32 AD 02 FB | 	rdlong	local04, objptr
0be6c     03 AC 66 F0 | 	shl	local04, #3
0be70     02 00 00 FF 
0be74     38 64 86 F1 | 	sub	objptr, ##1080
0be78     32 AD 02 F1 | 	add	local04, objptr
0be7c     04 AC 06 F1 | 	add	local04, #4
0be80     56 AF 02 FB | 	rdlong	local05, local04
0be84                 | ' 
0be84                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0be84     FE AF 0E F2 | 	cmp	local05, #510 wz
0be88     36 00 00 FF 
0be8c     B0 65 86 F1 | 	sub	objptr, ##28080
0be90     C4 00 90 5D |  if_ne	jmp	#LR__1000
0be94     1D A6 06 F6 | 	mov	local01, #29
0be98     FF AA 06 F6 | 	mov	local03, #255
0be9c     53 B1 02 F6 | 	mov	local06, local01
0bea0     54 B3 02 F6 | 	mov	local07, local02
0bea4     55 A7 02 F6 | 	mov	local01, local03
0bea8     4C 00 00 FF 
0beac     20 64 06 F1 | 	add	objptr, ##38944
0beb0     32 AF 02 FB | 	rdlong	local05, objptr
0beb4     57 AD 02 F6 | 	mov	local04, local05
0beb8     01 AC 66 F0 | 	shl	local04, #1
0bebc     57 AD 02 F1 | 	add	local04, local05
0bec0     02 AC 66 F0 | 	shl	local04, #2
0bec4     03 00 00 FF 
0bec8     00 64 86 F1 | 	sub	objptr, ##1536
0becc     32 AD 02 F1 | 	add	local04, objptr
0bed0     56 B1 62 FC | 	wrlong	local06, local04
0bed4     03 00 00 FF 
0bed8     00 64 06 F1 | 	add	objptr, ##1536
0bedc     32 B1 02 FB | 	rdlong	local06, objptr
0bee0     58 AF 02 F6 | 	mov	local05, local06
0bee4     01 AE 66 F0 | 	shl	local05, #1
0bee8     58 AF 02 F1 | 	add	local05, local06
0beec     02 AE 66 F0 | 	shl	local05, #2
0bef0     03 00 00 FF 
0bef4     00 64 86 F1 | 	sub	objptr, ##1536
0bef8     32 AF 02 F1 | 	add	local05, objptr
0befc     04 AE 06 F1 | 	add	local05, #4
0bf00     57 B3 62 FC | 	wrlong	local07, local05
0bf04     03 00 00 FF 
0bf08     00 64 06 F1 | 	add	objptr, ##1536
0bf0c     32 B3 02 FB | 	rdlong	local07, objptr
0bf10     59 B1 02 F6 | 	mov	local06, local07
0bf14     01 B0 66 F0 | 	shl	local06, #1
0bf18     59 B1 02 F1 | 	add	local06, local07
0bf1c     02 B0 66 F0 | 	shl	local06, #2
0bf20     03 00 00 FF 
0bf24     00 64 86 F1 | 	sub	objptr, ##1536
0bf28     32 B1 02 F1 | 	add	local06, objptr
0bf2c     08 B0 06 F1 | 	add	local06, #8
0bf30     58 A7 62 FC | 	wrlong	local01, local06
0bf34     03 00 00 FF 
0bf38     00 64 06 F1 | 	add	objptr, ##1536
0bf3c     32 B1 02 FB | 	rdlong	local06, objptr
0bf40     01 B0 06 F1 | 	add	local06, #1
0bf44     32 B1 62 FC | 	wrlong	local06, objptr
0bf48     4C 00 00 FF 
0bf4c     20 64 86 F1 | 	sub	objptr, ##38944
0bf50     1D 7A 06 F6 | 	mov	result1, #29
0bf54     64 01 90 FD | 	jmp	#LR__1003
0bf58                 | LR__1000
0bf58     00 A6 06 F6 | 	mov	local01, #0
0bf5c     68 01 B0 FD | 	call	#_addsub
0bf60                 | ' t3.result.uresult=0
0bf60                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0bf60                 | ' if err>0 then return err
0bf60     01 7A 16 F2 | 	cmp	result1, #1 wc
0bf64     54 01 90 3D |  if_ae	jmp	#LR__1003
0bf68     38 00 00 FF 
0bf6c     E8 65 06 F1 | 	add	objptr, ##29160
0bf70     32 AD 02 FB | 	rdlong	local04, objptr
0bf74     03 AC 66 F0 | 	shl	local04, #3
0bf78     02 00 00 FF 
0bf7c     38 64 86 F1 | 	sub	objptr, ##1080
0bf80     32 AD 02 F1 | 	add	local04, objptr
0bf84     04 AC 06 F1 | 	add	local04, #4
0bf88     56 AF 02 FB | 	rdlong	local05, local04
0bf8c                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0bf8c                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0bf8c     36 00 00 FF 
0bf90     B0 65 86 F1 | 	sub	objptr, ##28080
0bf94                 | LR__1001
0bf94     1B AE 0E F2 | 	cmp	local05, #27 wz
0bf98     0F AE 0E 52 |  if_ne	cmp	local05, #15 wz
0bf9c     10 AE 0E 52 |  if_ne	cmp	local05, #16 wz
0bfa0     27 AE 0E 52 |  if_ne	cmp	local05, #39 wz
0bfa4     26 AE 0E 52 |  if_ne	cmp	local05, #38 wz
0bfa8     2A AE 0E 52 |  if_ne	cmp	local05, #42 wz
0bfac     08 01 90 5D |  if_ne	jmp	#LR__1002
0bfb0     38 00 00 FF 
0bfb4     E8 65 06 F1 | 	add	objptr, ##29160
0bfb8     32 B1 02 FB | 	rdlong	local06, objptr
0bfbc     01 B0 06 F1 | 	add	local06, #1
0bfc0     32 B1 62 FC | 	wrlong	local06, objptr
0bfc4     38 00 00 FF 
0bfc8     E8 65 86 F1 | 	sub	objptr, ##29160
0bfcc     F8 00 B0 FD | 	call	#_addsub
0bfd0                 | '   ct+=1
0bfd0                 | '   err=addsub() : if err>0 then return err
0bfd0     01 7A 16 F2 | 	cmp	result1, #1 wc
0bfd4     E4 00 90 3D |  if_ae	jmp	#LR__1003
0bfd8     57 AB 02 F6 | 	mov	local03, local05
0bfdc     53 B1 02 F6 | 	mov	local06, local01
0bfe0     54 B3 02 F6 | 	mov	local07, local02
0bfe4     55 AF 02 F6 | 	mov	local05, local03
0bfe8     4C 00 00 FF 
0bfec     20 64 06 F1 | 	add	objptr, ##38944
0bff0     32 AD 02 FB | 	rdlong	local04, objptr
0bff4     56 7B 02 F6 | 	mov	result1, local04
0bff8     01 7A 66 F0 | 	shl	result1, #1
0bffc     56 7B 02 F1 | 	add	result1, local04
0c000     02 7A 66 F0 | 	shl	result1, #2
0c004     03 00 00 FF 
0c008     00 64 86 F1 | 	sub	objptr, ##1536
0c00c     32 7B 02 F1 | 	add	result1, objptr
0c010     3D B1 62 FC | 	wrlong	local06, result1
0c014     03 00 00 FF 
0c018     00 64 06 F1 | 	add	objptr, ##1536
0c01c     32 B1 02 FB | 	rdlong	local06, objptr
0c020     58 AD 02 F6 | 	mov	local04, local06
0c024     01 AC 66 F0 | 	shl	local04, #1
0c028     58 AD 02 F1 | 	add	local04, local06
0c02c     02 AC 66 F0 | 	shl	local04, #2
0c030     03 00 00 FF 
0c034     00 64 86 F1 | 	sub	objptr, ##1536
0c038     32 AD 02 F1 | 	add	local04, objptr
0c03c     04 AC 06 F1 | 	add	local04, #4
0c040     56 B3 62 FC | 	wrlong	local07, local04
0c044     03 00 00 FF 
0c048     00 64 06 F1 | 	add	objptr, ##1536
0c04c     32 B3 02 FB | 	rdlong	local07, objptr
0c050     59 B1 02 F6 | 	mov	local06, local07
0c054     01 B0 66 F0 | 	shl	local06, #1
0c058     59 B1 02 F1 | 	add	local06, local07
0c05c     02 B0 66 F0 | 	shl	local06, #2
0c060     03 00 00 FF 
0c064     00 64 86 F1 | 	sub	objptr, ##1536
0c068     32 B1 02 F1 | 	add	local06, objptr
0c06c     08 B0 06 F1 | 	add	local06, #8
0c070     58 AF 62 FC | 	wrlong	local05, local06
0c074     03 00 00 FF 
0c078     00 64 06 F1 | 	add	objptr, ##1536
0c07c     32 B1 02 FB | 	rdlong	local06, objptr
0c080     01 B0 06 F1 | 	add	local06, #1
0c084     32 B1 62 FC | 	wrlong	local06, objptr
0c088     13 00 00 FF 
0c08c     38 64 86 F1 | 	sub	objptr, ##9784
0c090     32 AD 02 FB | 	rdlong	local04, objptr
0c094     03 AC 66 F0 | 	shl	local04, #3
0c098     02 00 00 FF 
0c09c     38 64 86 F1 | 	sub	objptr, ##1080
0c0a0     32 AD 02 F1 | 	add	local04, objptr
0c0a4     04 AC 06 F1 | 	add	local04, #4
0c0a8     56 AF 02 FB | 	rdlong	local05, local04
0c0ac     36 00 00 FF 
0c0b0     B0 65 86 F1 | 	sub	objptr, ##28080
0c0b4     DC FE 9F FD | 	jmp	#LR__1001
0c0b8                 | LR__1002
0c0b8                 | ' return 0  
0c0b8     00 7A 06 F6 | 	mov	result1, #0
0c0bc                 | LR__1003
0c0bc     E7 F0 03 F6 | 	mov	ptra, fp
0c0c0     F2 00 A0 FD | 	call	#popregs_
0c0c4                 | _expr_ret
0c0c4     2D 00 64 FD | 	ret
0c0c8                 | 
0c0c8                 | ' 
0c0c8                 | ' ' Second level operators : add, sub, logic
0c0c8                 | ' 
0c0c8                 | ' function addsub() as ulong
0c0c8                 | _addsub
0c0c8     07 CA 05 F6 | 	mov	COUNT_, #7
0c0cc     E8 00 A0 FD | 	call	#pushregs_
0c0d0                 | _addsub_enter
0c0d0     00 A6 06 F6 | 	mov	local01, #0
0c0d4     60 01 B0 FD | 	call	#_muldiv
0c0d8                 | ' 
0c0d8                 | ' t3.result.uresult=0
0c0d8                 | ' err=muldiv() : if err>0 then return err           			 
0c0d8     01 7A 16 F2 | 	cmp	result1, #1 wc
0c0dc     4C 01 90 3D |  if_ae	jmp	#LR__1012
0c0e0     38 00 00 FF 
0c0e4     E8 65 06 F1 | 	add	objptr, ##29160
0c0e8     32 AD 02 FB | 	rdlong	local04, objptr
0c0ec     03 AC 66 F0 | 	shl	local04, #3
0c0f0     02 00 00 FF 
0c0f4     38 64 86 F1 | 	sub	objptr, ##1080
0c0f8     32 AD 02 F1 | 	add	local04, objptr
0c0fc     04 AC 06 F1 | 	add	local04, #4
0c100     56 AF 02 FB | 	rdlong	local05, local04
0c104                 | ' op = lparts(ct).token				 
0c104                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0c104     36 00 00 FF 
0c108     B0 65 86 F1 | 	sub	objptr, ##28080
0c10c                 | LR__1010
0c10c     01 AE 0E F2 | 	cmp	local05, #1 wz
0c110     02 AE 0E 52 |  if_ne	cmp	local05, #2 wz
0c114     07 AE 0E 52 |  if_ne	cmp	local05, #7 wz
0c118     03 AE 0E 52 |  if_ne	cmp	local05, #3 wz
0c11c     08 01 90 5D |  if_ne	jmp	#LR__1011
0c120     38 00 00 FF 
0c124     E8 65 06 F1 | 	add	objptr, ##29160
0c128     32 AD 02 FB | 	rdlong	local04, objptr
0c12c     01 AC 06 F1 | 	add	local04, #1
0c130     32 AD 62 FC | 	wrlong	local04, objptr
0c134     38 00 00 FF 
0c138     E8 65 86 F1 | 	sub	objptr, ##29160
0c13c     F8 00 B0 FD | 	call	#_muldiv
0c140                 | '   ct+=1
0c140                 | '   err=muldiv() : if err>0 then return err   
0c140     01 7A 16 F2 | 	cmp	result1, #1 wc
0c144     E4 00 90 3D |  if_ae	jmp	#LR__1012
0c148     57 AB 02 F6 | 	mov	local03, local05
0c14c     53 B1 02 F6 | 	mov	local06, local01
0c150     54 B3 02 F6 | 	mov	local07, local02
0c154     55 AF 02 F6 | 	mov	local05, local03
0c158     4C 00 00 FF 
0c15c     20 64 06 F1 | 	add	objptr, ##38944
0c160     32 AD 02 FB | 	rdlong	local04, objptr
0c164     56 7B 02 F6 | 	mov	result1, local04
0c168     01 7A 66 F0 | 	shl	result1, #1
0c16c     56 7B 02 F1 | 	add	result1, local04
0c170     02 7A 66 F0 | 	shl	result1, #2
0c174     03 00 00 FF 
0c178     00 64 86 F1 | 	sub	objptr, ##1536
0c17c     32 7B 02 F1 | 	add	result1, objptr
0c180     3D B1 62 FC | 	wrlong	local06, result1
0c184     03 00 00 FF 
0c188     00 64 06 F1 | 	add	objptr, ##1536
0c18c     32 B1 02 FB | 	rdlong	local06, objptr
0c190     58 AD 02 F6 | 	mov	local04, local06
0c194     01 AC 66 F0 | 	shl	local04, #1
0c198     58 AD 02 F1 | 	add	local04, local06
0c19c     02 AC 66 F0 | 	shl	local04, #2
0c1a0     03 00 00 FF 
0c1a4     00 64 86 F1 | 	sub	objptr, ##1536
0c1a8     32 AD 02 F1 | 	add	local04, objptr
0c1ac     04 AC 06 F1 | 	add	local04, #4
0c1b0     56 B3 62 FC | 	wrlong	local07, local04
0c1b4     03 00 00 FF 
0c1b8     00 64 06 F1 | 	add	objptr, ##1536
0c1bc     32 B3 02 FB | 	rdlong	local07, objptr
0c1c0     59 B1 02 F6 | 	mov	local06, local07
0c1c4     01 B0 66 F0 | 	shl	local06, #1
0c1c8     59 B1 02 F1 | 	add	local06, local07
0c1cc     02 B0 66 F0 | 	shl	local06, #2
0c1d0     03 00 00 FF 
0c1d4     00 64 86 F1 | 	sub	objptr, ##1536
0c1d8     32 B1 02 F1 | 	add	local06, objptr
0c1dc     08 B0 06 F1 | 	add	local06, #8
0c1e0     58 AF 62 FC | 	wrlong	local05, local06
0c1e4     03 00 00 FF 
0c1e8     00 64 06 F1 | 	add	objptr, ##1536
0c1ec     32 B1 02 FB | 	rdlong	local06, objptr
0c1f0     01 B0 06 F1 | 	add	local06, #1
0c1f4     32 B1 62 FC | 	wrlong	local06, objptr
0c1f8     13 00 00 FF 
0c1fc     38 64 86 F1 | 	sub	objptr, ##9784
0c200     32 AD 02 FB | 	rdlong	local04, objptr
0c204     03 AC 66 F0 | 	shl	local04, #3
0c208     02 00 00 FF 
0c20c     38 64 86 F1 | 	sub	objptr, ##1080
0c210     32 AD 02 F1 | 	add	local04, objptr
0c214     04 AC 06 F1 | 	add	local04, #4
0c218     56 AF 02 FB | 	rdlong	local05, local04
0c21c     36 00 00 FF 
0c220     B0 65 86 F1 | 	sub	objptr, ##28080
0c224     E4 FE 9F FD | 	jmp	#LR__1010
0c228                 | LR__1011
0c228                 | ' return 0
0c228     00 7A 06 F6 | 	mov	result1, #0
0c22c                 | LR__1012
0c22c     E7 F0 03 F6 | 	mov	ptra, fp
0c230     F2 00 A0 FD | 	call	#popregs_
0c234                 | _addsub_ret
0c234     2D 00 64 FD | 	ret
0c238                 | 
0c238                 | ' 
0c238                 | ' ' Third level operators : mul,div,shift,power
0c238                 | ' 
0c238                 | ' function muldiv() as ulong
0c238                 | _muldiv
0c238     07 CA 05 F6 | 	mov	COUNT_, #7
0c23c     E8 00 A0 FD | 	call	#pushregs_
0c240                 | _muldiv_enter
0c240     00 A6 06 F6 | 	mov	local01, #0
0c244     6C 01 B0 FD | 	call	#_getvalue
0c248                 | ' 
0c248                 | ' t3.result.uresult=0
0c248                 | ' err=getvalue() : if err>0 then return err     
0c248     01 7A 16 F2 | 	cmp	result1, #1 wc
0c24c     58 01 90 3D |  if_ae	jmp	#LR__1022
0c250     38 00 00 FF 
0c254     E8 65 06 F1 | 	add	objptr, ##29160
0c258     32 AD 02 FB | 	rdlong	local04, objptr
0c25c     03 AC 66 F0 | 	shl	local04, #3
0c260     02 00 00 FF 
0c264     38 64 86 F1 | 	sub	objptr, ##1080
0c268     32 AD 02 F1 | 	add	local04, objptr
0c26c     04 AC 06 F1 | 	add	local04, #4
0c270     56 AF 02 FB | 	rdlong	local05, local04
0c274                 | ' op = lparts(ct).token
0c274                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c274     36 00 00 FF 
0c278     B0 65 86 F1 | 	sub	objptr, ##28080
0c27c                 | LR__1020
0c27c     05 AE 0E F2 | 	cmp	local05, #5 wz
0c280     08 AE 0E 52 |  if_ne	cmp	local05, #8 wz
0c284     06 AE 0E 52 |  if_ne	cmp	local05, #6 wz
0c288     09 AE 0E 52 |  if_ne	cmp	local05, #9 wz
0c28c     0A AE 0E 52 |  if_ne	cmp	local05, #10 wz
0c290     0B AE 0E 52 |  if_ne	cmp	local05, #11 wz
0c294     0C AE 0E 52 |  if_ne	cmp	local05, #12 wz
0c298     08 01 90 5D |  if_ne	jmp	#LR__1021
0c29c     38 00 00 FF 
0c2a0     E8 65 06 F1 | 	add	objptr, ##29160
0c2a4     32 AD 02 FB | 	rdlong	local04, objptr
0c2a8     01 AC 06 F1 | 	add	local04, #1
0c2ac     32 AD 62 FC | 	wrlong	local04, objptr
0c2b0     38 00 00 FF 
0c2b4     E8 65 86 F1 | 	sub	objptr, ##29160
0c2b8     F8 00 B0 FD | 	call	#_getvalue
0c2bc                 | '   ct+=1
0c2bc                 | '   err=getvalue() :if err>0 then return err   
0c2bc     01 7A 16 F2 | 	cmp	result1, #1 wc
0c2c0     E4 00 90 3D |  if_ae	jmp	#LR__1022
0c2c4     57 AB 02 F6 | 	mov	local03, local05
0c2c8     53 B1 02 F6 | 	mov	local06, local01
0c2cc     54 B3 02 F6 | 	mov	local07, local02
0c2d0     55 AF 02 F6 | 	mov	local05, local03
0c2d4     4C 00 00 FF 
0c2d8     20 64 06 F1 | 	add	objptr, ##38944
0c2dc     32 AD 02 FB | 	rdlong	local04, objptr
0c2e0     56 7B 02 F6 | 	mov	result1, local04
0c2e4     01 7A 66 F0 | 	shl	result1, #1
0c2e8     56 7B 02 F1 | 	add	result1, local04
0c2ec     02 7A 66 F0 | 	shl	result1, #2
0c2f0     03 00 00 FF 
0c2f4     00 64 86 F1 | 	sub	objptr, ##1536
0c2f8     32 7B 02 F1 | 	add	result1, objptr
0c2fc     3D B1 62 FC | 	wrlong	local06, result1
0c300     03 00 00 FF 
0c304     00 64 06 F1 | 	add	objptr, ##1536
0c308     32 B1 02 FB | 	rdlong	local06, objptr
0c30c     58 AD 02 F6 | 	mov	local04, local06
0c310     01 AC 66 F0 | 	shl	local04, #1
0c314     58 AD 02 F1 | 	add	local04, local06
0c318     02 AC 66 F0 | 	shl	local04, #2
0c31c     03 00 00 FF 
0c320     00 64 86 F1 | 	sub	objptr, ##1536
0c324     32 AD 02 F1 | 	add	local04, objptr
0c328     04 AC 06 F1 | 	add	local04, #4
0c32c     56 B3 62 FC | 	wrlong	local07, local04
0c330     03 00 00 FF 
0c334     00 64 06 F1 | 	add	objptr, ##1536
0c338     32 B3 02 FB | 	rdlong	local07, objptr
0c33c     59 B1 02 F6 | 	mov	local06, local07
0c340     01 B0 66 F0 | 	shl	local06, #1
0c344     59 B1 02 F1 | 	add	local06, local07
0c348     02 B0 66 F0 | 	shl	local06, #2
0c34c     03 00 00 FF 
0c350     00 64 86 F1 | 	sub	objptr, ##1536
0c354     32 B1 02 F1 | 	add	local06, objptr
0c358     08 B0 06 F1 | 	add	local06, #8
0c35c     58 AF 62 FC | 	wrlong	local05, local06
0c360     03 00 00 FF 
0c364     00 64 06 F1 | 	add	objptr, ##1536
0c368     32 B1 02 FB | 	rdlong	local06, objptr
0c36c     01 B0 06 F1 | 	add	local06, #1
0c370     32 B1 62 FC | 	wrlong	local06, objptr
0c374     13 00 00 FF 
0c378     38 64 86 F1 | 	sub	objptr, ##9784
0c37c     32 AD 02 FB | 	rdlong	local04, objptr
0c380     03 AC 66 F0 | 	shl	local04, #3
0c384     02 00 00 FF 
0c388     38 64 86 F1 | 	sub	objptr, ##1080
0c38c     32 AD 02 F1 | 	add	local04, objptr
0c390     04 AC 06 F1 | 	add	local04, #4
0c394     56 AF 02 FB | 	rdlong	local05, local04
0c398     36 00 00 FF 
0c39c     B0 65 86 F1 | 	sub	objptr, ##28080
0c3a0     D8 FE 9F FD | 	jmp	#LR__1020
0c3a4                 | LR__1021
0c3a4                 | ' return 0
0c3a4     00 7A 06 F6 | 	mov	result1, #0
0c3a8                 | LR__1022
0c3a8     E7 F0 03 F6 | 	mov	ptra, fp
0c3ac     F2 00 A0 FD | 	call	#popregs_
0c3b0                 | _muldiv_ret
0c3b0     2D 00 64 FD | 	ret
0c3b4                 | 
0c3b4                 | ' 
0c3b4                 | ' ' Get a value for operations
0c3b4                 | ' 
0c3b4                 | ' function getvalue()  as ulong
0c3b4                 | _getvalue
0c3b4     0B CA 05 F6 | 	mov	COUNT_, #11
0c3b8     E8 00 A0 FD | 	call	#pushregs_
0c3bc                 | _getvalue_enter
0c3bc     01 AC 06 F6 | 	mov	local04, #1
0c3c0     00 A6 06 F6 | 	mov	local01, #0
0c3c4     1D AA 06 F6 | 	mov	local03, #29
0c3c8     38 00 00 FF 
0c3cc     E8 65 06 F1 | 	add	objptr, ##29160
0c3d0     32 97 02 FB | 	rdlong	arg03, objptr
0c3d4     03 96 66 F0 | 	shl	arg03, #3
0c3d8     02 00 00 FF 
0c3dc     38 64 86 F1 | 	sub	objptr, ##1080
0c3e0     32 97 02 F1 | 	add	arg03, objptr
0c3e4     04 96 06 F1 | 	add	arg03, #4
0c3e8     4B AF 02 FB | 	rdlong	local05, arg03
0c3ec                 | ' 
0c3ec                 | ' m=1											' for negative numbers
0c3ec                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c3ec                 | ' op=lparts(ct).token
0c3ec                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c3ec     02 AE 0E F2 | 	cmp	local05, #2 wz
0c3f0     36 00 00 FF 
0c3f4     B0 65 86 F1 | 	sub	objptr, ##28080
0c3f8     38 00 90 5D |  if_ne	jmp	#LR__1030
0c3fc     01 AC 66 F6 | 	neg	local04, #1
0c400     38 00 00 FF 
0c404     E8 65 06 F1 | 	add	objptr, ##29160
0c408     32 AF 02 FB | 	rdlong	local05, objptr
0c40c     01 AE 06 F1 | 	add	local05, #1
0c410     32 AF 62 FC | 	wrlong	local05, objptr
0c414     03 AE 66 F0 | 	shl	local05, #3
0c418     02 00 00 FF 
0c41c     38 64 86 F1 | 	sub	objptr, ##1080
0c420     32 AF 02 F1 | 	add	local05, objptr
0c424     04 AE 06 F1 | 	add	local05, #4
0c428     57 AF 02 FB | 	rdlong	local05, local05
0c42c     36 00 00 FF 
0c430     B0 65 86 F1 | 	sub	objptr, ##28080
0c434                 | LR__1030
0c434                 | ' select case op
0c434     01 00 00 FF 
0c438     00 AE 0E F2 | 	cmp	local05, ##512 wz
0c43c     44 00 90 AD |  if_e	jmp	#LR__1031
0c440     01 00 00 FF 
0c444     01 AE 0E F2 | 	cmp	local05, ##513 wz
0c448     90 01 90 AD |  if_e	jmp	#LR__1034
0c44c     01 00 00 FF 
0c450     02 AE 0E F2 | 	cmp	local05, ##514 wz
0c454     44 04 90 AD |  if_e	jmp	#LR__1041
0c458     01 00 00 FF 
0c45c     03 AE 0E F2 | 	cmp	local05, ##515 wz
0c460     A8 05 90 AD |  if_e	jmp	#LR__1044
0c464     2C AE 0E F2 | 	cmp	local05, #44 wz
0c468     78 07 90 AD |  if_e	jmp	#LR__1049
0c46c     01 00 00 FF 
0c470     04 AE 0E F2 | 	cmp	local05, ##516 wz
0c474     70 08 90 AD |  if_e	jmp	#LR__1050
0c478     15 AE 0E F2 | 	cmp	local05, #21 wz
0c47c     98 08 90 AD |  if_e	jmp	#LR__1051
0c480     10 09 90 FD | 	jmp	#LR__1052
0c484                 | LR__1031
0c484                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c484     01 AC 0E F2 | 	cmp	local04, #1 wz
0c488     3C 00 90 5D |  if_ne	jmp	#LR__1032
0c48c     38 00 00 FF 
0c490     E8 65 06 F1 | 	add	objptr, ##29160
0c494     32 AF 02 FB | 	rdlong	local05, objptr
0c498     03 AE 66 F0 | 	shl	local05, #3
0c49c     02 00 00 FF 
0c4a0     38 64 86 F1 | 	sub	objptr, ##1080
0c4a4     32 AF 02 F1 | 	add	local05, objptr
0c4a8     57 93 02 FB | 	rdlong	arg01, local05
0c4ac     00 94 06 F6 | 	mov	arg02, #0
0c4b0     36 00 00 FF 
0c4b4     B0 65 86 F1 | 	sub	objptr, ##28080
0c4b8     28 B0 B1 FD | 	call	#__system____builtin_atoi
0c4bc     3D AD 02 FD | 	qmul	local04, result1
0c4c0     18 A6 62 FD | 	getqx	local01
0c4c4     1C AA 06 F6 | 	mov	local03, #28
0c4c8                 | LR__1032
0c4c8                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c4c8     FF FF 7F FF 
0c4cc     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0c4d0     3C 00 90 5D |  if_ne	jmp	#LR__1033
0c4d4     38 00 00 FF 
0c4d8     E8 65 06 F1 | 	add	objptr, ##29160
0c4dc     32 AF 02 FB | 	rdlong	local05, objptr
0c4e0     03 AE 66 F0 | 	shl	local05, #3
0c4e4     02 00 00 FF 
0c4e8     38 64 86 F1 | 	sub	objptr, ##1080
0c4ec     32 AF 02 F1 | 	add	local05, objptr
0c4f0     57 93 02 FB | 	rdlong	arg01, local05
0c4f4     00 94 06 F6 | 	mov	arg02, #0
0c4f8     36 00 00 FF 
0c4fc     B0 65 86 F1 | 	sub	objptr, ##28080
0c500     E0 AF B1 FD | 	call	#__system____builtin_atoi
0c504     3D AD 02 FD | 	qmul	local04, result1
0c508     18 A6 62 FD | 	getqx	local01
0c50c     1C AA 06 F6 | 	mov	local03, #28
0c510                 | LR__1033
0c510     53 B1 02 F6 | 	mov	local06, local01
0c514     54 B3 02 F6 | 	mov	local07, local02
0c518     55 AF 02 F6 | 	mov	local05, local03
0c51c     4C 00 00 FF 
0c520     20 64 06 F1 | 	add	objptr, ##38944
0c524     32 A7 02 FB | 	rdlong	local01, objptr
0c528     53 AD 02 F6 | 	mov	local04, local01
0c52c     01 AC 66 F0 | 	shl	local04, #1
0c530     53 AD 02 F1 | 	add	local04, local01
0c534     02 AC 66 F0 | 	shl	local04, #2
0c538     03 00 00 FF 
0c53c     00 64 86 F1 | 	sub	objptr, ##1536
0c540     32 AD 02 F1 | 	add	local04, objptr
0c544     56 B1 62 FC | 	wrlong	local06, local04
0c548     03 00 00 FF 
0c54c     00 64 06 F1 | 	add	objptr, ##1536
0c550     32 B1 02 FB | 	rdlong	local06, objptr
0c554     58 A7 02 F6 | 	mov	local01, local06
0c558     01 A6 66 F0 | 	shl	local01, #1
0c55c     58 A7 02 F1 | 	add	local01, local06
0c560     02 A6 66 F0 | 	shl	local01, #2
0c564     03 00 00 FF 
0c568     00 64 86 F1 | 	sub	objptr, ##1536
0c56c     32 A7 02 F1 | 	add	local01, objptr
0c570     04 A6 06 F1 | 	add	local01, #4
0c574     53 B3 62 FC | 	wrlong	local07, local01
0c578     03 00 00 FF 
0c57c     00 64 06 F1 | 	add	objptr, ##1536
0c580     32 B3 02 FB | 	rdlong	local07, objptr
0c584     59 B1 02 F6 | 	mov	local06, local07
0c588     01 B0 66 F0 | 	shl	local06, #1
0c58c     59 B1 02 F1 | 	add	local06, local07
0c590     02 B0 66 F0 | 	shl	local06, #2
0c594     03 00 00 FF 
0c598     00 64 86 F1 | 	sub	objptr, ##1536
0c59c     32 B1 02 F1 | 	add	local06, objptr
0c5a0     08 B0 06 F1 | 	add	local06, #8
0c5a4     58 AF 62 FC | 	wrlong	local05, local06
0c5a8     03 00 00 FF 
0c5ac     00 64 06 F1 | 	add	objptr, ##1536
0c5b0     32 B1 02 FB | 	rdlong	local06, objptr
0c5b4     01 B0 06 F1 | 	add	local06, #1
0c5b8     32 B1 62 FC | 	wrlong	local06, objptr
0c5bc     13 00 00 FF 
0c5c0     38 64 86 F1 | 	sub	objptr, ##9784
0c5c4     32 B1 02 FB | 	rdlong	local06, objptr
0c5c8     01 B0 06 F1 | 	add	local06, #1
0c5cc     32 B1 62 FC | 	wrlong	local06, objptr
0c5d0     38 00 00 FF 
0c5d4     E8 65 86 F1 | 	sub	objptr, ##29160
0c5d8     E4 07 90 FD | 	jmp	#LR__1053
0c5dc                 | LR__1034
0c5dc                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c5dc     38 00 00 FF 
0c5e0     E8 65 06 F1 | 	add	objptr, ##29160
0c5e4     32 97 02 FB | 	rdlong	arg03, objptr
0c5e8     03 96 66 F0 | 	shl	arg03, #3
0c5ec     02 00 00 FF 
0c5f0     38 64 86 F1 | 	sub	objptr, ##1080
0c5f4     32 97 02 F1 | 	add	arg03, objptr
0c5f8     4B 93 02 FB | 	rdlong	arg01, arg03
0c5fc     01 94 06 F6 | 	mov	arg02, #1
0c600     36 00 00 FF 
0c604     B0 65 86 F1 | 	sub	objptr, ##28080
0c608     2C 9A B1 FD | 	call	#__system__Left_S
0c60c     3D 93 02 F6 | 	mov	arg01, result1
0c610     95 01 00 FF 
0c614     59 94 06 F6 | 	mov	arg02, ##@LR__5928
0c618     9C 81 B1 FD | 	call	#__system___string_cmp
0c61c     00 7A 0E F2 | 	cmp	result1, #0 wz
0c620     94 00 90 5D |  if_ne	jmp	#LR__1037
0c624     38 00 00 FF 
0c628     E8 65 06 F1 | 	add	objptr, ##29160
0c62c     32 B3 02 FB | 	rdlong	local07, objptr
0c630     59 B1 02 F6 | 	mov	local06, local07
0c634     03 B0 66 F0 | 	shl	local06, #3
0c638     02 00 00 FF 
0c63c     38 64 86 F1 | 	sub	objptr, ##1080
0c640     32 B1 02 F1 | 	add	local06, objptr
0c644     95 01 00 FF 
0c648     5B AE 06 F6 | 	mov	local05, ##@LR__5929
0c64c     03 B2 66 F0 | 	shl	local07, #3
0c650     32 B3 02 F1 | 	add	local07, objptr
0c654     59 B3 02 FB | 	rdlong	local07, local07
0c658     02 00 00 FF 
0c65c     38 64 06 F1 | 	add	objptr, ##1080
0c660     32 A7 02 FB | 	rdlong	local01, objptr
0c664     03 A6 66 F0 | 	shl	local01, #3
0c668     02 00 00 FF 
0c66c     38 64 86 F1 | 	sub	objptr, ##1080
0c670     32 A7 02 F1 | 	add	local01, objptr
0c674     53 93 02 FB | 	rdlong	arg01, local01
0c678     36 00 00 FF 
0c67c     B0 65 86 F1 | 	sub	objptr, ##28080
0c680     49 B5 02 F6 | 	mov	local08, arg01
0c684     D7 06 48 FB | 	callpa	#(@LR__1036-@LR__1035)>>2,fcache_load_ptr_
0c688                 | LR__1035
0c688     5A 7B CA FA | 	rdbyte	result1, local08 wz
0c68c     01 B4 06 51 |  if_ne	add	local08, #1
0c690     F4 FF 9F 5D |  if_ne	jmp	#LR__1035
0c694                 | LR__1036
0c694     49 B5 82 F1 | 	sub	local08, arg01
0c698     5A 95 02 F6 | 	mov	arg02, local08
0c69c     01 94 86 F1 | 	sub	arg02, #1
0c6a0     59 93 02 F6 | 	mov	arg01, local07
0c6a4     18 9A B1 FD | 	call	#__system__Right_S
0c6a8     3D 95 02 F6 | 	mov	arg02, result1
0c6ac     57 93 02 F6 | 	mov	arg01, local05
0c6b0     38 81 B1 FD | 	call	#__system___string_concat
0c6b4     58 7B 62 FC | 	wrlong	result1, local06
0c6b8                 | LR__1037
0c6b8                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c6b8     38 00 00 FF 
0c6bc     E8 65 06 F1 | 	add	objptr, ##29160
0c6c0     32 97 02 FB | 	rdlong	arg03, objptr
0c6c4     03 96 66 F0 | 	shl	arg03, #3
0c6c8     02 00 00 FF 
0c6cc     38 64 86 F1 | 	sub	objptr, ##1080
0c6d0     32 97 02 F1 | 	add	arg03, objptr
0c6d4     4B 93 02 FB | 	rdlong	arg01, arg03
0c6d8     01 94 06 F6 | 	mov	arg02, #1
0c6dc     36 00 00 FF 
0c6e0     B0 65 86 F1 | 	sub	objptr, ##28080
0c6e4     50 99 B1 FD | 	call	#__system__Left_S
0c6e8     3D 93 02 F6 | 	mov	arg01, result1
0c6ec     95 01 00 FF 
0c6f0     5E 94 06 F6 | 	mov	arg02, ##@LR__5930
0c6f4     C0 80 B1 FD | 	call	#__system___string_cmp
0c6f8     00 7A 0E F2 | 	cmp	result1, #0 wz
0c6fc     94 00 90 5D |  if_ne	jmp	#LR__1040
0c700     38 00 00 FF 
0c704     E8 65 06 F1 | 	add	objptr, ##29160
0c708     32 B3 02 FB | 	rdlong	local07, objptr
0c70c     59 B1 02 F6 | 	mov	local06, local07
0c710     03 B0 66 F0 | 	shl	local06, #3
0c714     02 00 00 FF 
0c718     38 64 86 F1 | 	sub	objptr, ##1080
0c71c     32 B1 02 F1 | 	add	local06, objptr
0c720     95 01 00 FF 
0c724     60 AE 06 F6 | 	mov	local05, ##@LR__5931
0c728     03 B2 66 F0 | 	shl	local07, #3
0c72c     32 B3 02 F1 | 	add	local07, objptr
0c730     59 B3 02 FB | 	rdlong	local07, local07
0c734     02 00 00 FF 
0c738     38 64 06 F1 | 	add	objptr, ##1080
0c73c     32 A7 02 FB | 	rdlong	local01, objptr
0c740     03 A6 66 F0 | 	shl	local01, #3
0c744     02 00 00 FF 
0c748     38 64 86 F1 | 	sub	objptr, ##1080
0c74c     32 A7 02 F1 | 	add	local01, objptr
0c750     53 93 02 FB | 	rdlong	arg01, local01
0c754     36 00 00 FF 
0c758     B0 65 86 F1 | 	sub	objptr, ##28080
0c75c     49 B5 02 F6 | 	mov	local08, arg01
0c760     D7 06 48 FB | 	callpa	#(@LR__1039-@LR__1038)>>2,fcache_load_ptr_
0c764                 | LR__1038
0c764     5A 7B CA FA | 	rdbyte	result1, local08 wz
0c768     01 B4 06 51 |  if_ne	add	local08, #1
0c76c     F4 FF 9F 5D |  if_ne	jmp	#LR__1038
0c770                 | LR__1039
0c770     49 B5 82 F1 | 	sub	local08, arg01
0c774     5A 95 02 F6 | 	mov	arg02, local08
0c778     01 94 86 F1 | 	sub	arg02, #1
0c77c     59 93 02 F6 | 	mov	arg01, local07
0c780     3C 99 B1 FD | 	call	#__system__Right_S
0c784     3D 95 02 F6 | 	mov	arg02, result1
0c788     57 93 02 F6 | 	mov	arg01, local05
0c78c     5C 80 B1 FD | 	call	#__system___string_concat
0c790     58 7B 62 FC | 	wrlong	result1, local06
0c794                 | LR__1040
0c794     38 00 00 FF 
0c798     E8 65 06 F1 | 	add	objptr, ##29160
0c79c     32 B1 02 FB | 	rdlong	local06, objptr
0c7a0     03 B0 66 F0 | 	shl	local06, #3
0c7a4     02 00 00 FF 
0c7a8     38 64 86 F1 | 	sub	objptr, ##1080
0c7ac     32 B1 02 F1 | 	add	local06, objptr
0c7b0     58 93 02 FB | 	rdlong	arg01, local06
0c7b4     00 94 06 F6 | 	mov	arg02, #0
0c7b8     36 00 00 FF 
0c7bc     B0 65 86 F1 | 	sub	objptr, ##28080
0c7c0     20 AD B1 FD | 	call	#__system____builtin_atoi
0c7c4     3D AD 02 FD | 	qmul	local04, result1
0c7c8     4C 00 00 FF 
0c7cc     20 64 06 F1 | 	add	objptr, ##38944
0c7d0     32 B1 02 FB | 	rdlong	local06, objptr
0c7d4     58 B7 02 F6 | 	mov	local09, local06
0c7d8     01 B6 66 F0 | 	shl	local09, #1
0c7dc     58 B7 02 F1 | 	add	local09, local06
0c7e0     02 B6 66 F0 | 	shl	local09, #2
0c7e4     03 00 00 FF 
0c7e8     00 64 86 F1 | 	sub	objptr, ##1536
0c7ec     32 B7 02 F1 | 	add	local09, objptr
0c7f0     03 00 00 FF 
0c7f4     00 64 06 F1 | 	add	objptr, ##1536
0c7f8     18 A6 62 FD | 	getqx	local01
0c7fc     1C AA 06 F6 | 	mov	local03, #28
0c800     53 B1 02 F6 | 	mov	local06, local01
0c804     54 B3 02 F6 | 	mov	local07, local02
0c808     5B B1 62 FC | 	wrlong	local06, local09
0c80c     55 B7 02 F6 | 	mov	local09, local03
0c810     32 B1 02 FB | 	rdlong	local06, objptr
0c814     58 AF 02 F6 | 	mov	local05, local06
0c818     01 AE 66 F0 | 	shl	local05, #1
0c81c     58 AF 02 F1 | 	add	local05, local06
0c820     02 AE 66 F0 | 	shl	local05, #2
0c824     03 00 00 FF 
0c828     00 64 86 F1 | 	sub	objptr, ##1536
0c82c     32 AF 02 F1 | 	add	local05, objptr
0c830     04 AE 06 F1 | 	add	local05, #4
0c834     57 B3 62 FC | 	wrlong	local07, local05
0c838     03 00 00 FF 
0c83c     00 64 06 F1 | 	add	objptr, ##1536
0c840     32 B3 02 FB | 	rdlong	local07, objptr
0c844     59 B1 02 F6 | 	mov	local06, local07
0c848     01 B0 66 F0 | 	shl	local06, #1
0c84c     59 B1 02 F1 | 	add	local06, local07
0c850     02 B0 66 F0 | 	shl	local06, #2
0c854     03 00 00 FF 
0c858     00 64 86 F1 | 	sub	objptr, ##1536
0c85c     32 B1 02 F1 | 	add	local06, objptr
0c860     08 B0 06 F1 | 	add	local06, #8
0c864     58 B7 62 FC | 	wrlong	local09, local06
0c868     03 00 00 FF 
0c86c     00 64 06 F1 | 	add	objptr, ##1536
0c870     32 B1 02 FB | 	rdlong	local06, objptr
0c874     01 B0 06 F1 | 	add	local06, #1
0c878     32 B1 62 FC | 	wrlong	local06, objptr
0c87c     13 00 00 FF 
0c880     38 64 86 F1 | 	sub	objptr, ##9784
0c884     32 B1 02 FB | 	rdlong	local06, objptr
0c888     01 B0 06 F1 | 	add	local06, #1
0c88c     32 B1 62 FC | 	wrlong	local06, objptr
0c890     38 00 00 FF 
0c894     E8 65 86 F1 | 	sub	objptr, ##29160
0c898     24 05 90 FD | 	jmp	#LR__1053
0c89c                 | LR__1041
0c89c                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0c89c     01 AC 0E F2 | 	cmp	local04, #1 wz
0c8a0     48 00 90 5D |  if_ne	jmp	#LR__1042
0c8a4     00 C0 1F FF 
0c8a8     00 B0 06 F6 | 	mov	local06, ##1065353216
0c8ac     38 00 00 FF 
0c8b0     E8 65 06 F1 | 	add	objptr, ##29160
0c8b4     32 B7 02 FB | 	rdlong	local09, objptr
0c8b8     03 B6 66 F0 | 	shl	local09, #3
0c8bc     02 00 00 FF 
0c8c0     38 64 86 F1 | 	sub	objptr, ##1080
0c8c4     32 B7 02 F1 | 	add	local09, objptr
0c8c8     5B 93 02 FB | 	rdlong	arg01, local09
0c8cc     36 00 00 FF 
0c8d0     B0 65 86 F1 | 	sub	objptr, ##28080
0c8d4     A4 AD B1 FD | 	call	#__system____builtin_atof
0c8d8     3D 95 02 F6 | 	mov	arg02, result1
0c8dc     58 93 02 F6 | 	mov	arg01, local06
0c8e0     7C A5 B1 FD | 	call	#__system___float_mul
0c8e4     3D A7 02 F6 | 	mov	local01, result1
0c8e8     1E AA 06 F6 | 	mov	local03, #30
0c8ec                 | LR__1042
0c8ec                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0c8ec     FF FF 7F FF 
0c8f0     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0c8f4     48 00 90 5D |  if_ne	jmp	#LR__1043
0c8f8     00 C0 5F FF 
0c8fc     00 B0 06 F6 | 	mov	local06, ##-1082130432
0c900     38 00 00 FF 
0c904     E8 65 06 F1 | 	add	objptr, ##29160
0c908     32 B7 02 FB | 	rdlong	local09, objptr
0c90c     03 B6 66 F0 | 	shl	local09, #3
0c910     02 00 00 FF 
0c914     38 64 86 F1 | 	sub	objptr, ##1080
0c918     32 B7 02 F1 | 	add	local09, objptr
0c91c     5B 93 02 FB | 	rdlong	arg01, local09
0c920     36 00 00 FF 
0c924     B0 65 86 F1 | 	sub	objptr, ##28080
0c928     50 AD B1 FD | 	call	#__system____builtin_atof
0c92c     3D 95 02 F6 | 	mov	arg02, result1
0c930     58 93 02 F6 | 	mov	arg01, local06
0c934     28 A5 B1 FD | 	call	#__system___float_mul
0c938     3D A7 02 F6 | 	mov	local01, result1
0c93c     1E AA 06 F6 | 	mov	local03, #30
0c940                 | LR__1043
0c940     53 B1 02 F6 | 	mov	local06, local01
0c944     54 B3 02 F6 | 	mov	local07, local02
0c948     55 AF 02 F6 | 	mov	local05, local03
0c94c     4C 00 00 FF 
0c950     20 64 06 F1 | 	add	objptr, ##38944
0c954     32 A7 02 FB | 	rdlong	local01, objptr
0c958     53 B7 02 F6 | 	mov	local09, local01
0c95c     01 B6 66 F0 | 	shl	local09, #1
0c960     53 B7 02 F1 | 	add	local09, local01
0c964     02 B6 66 F0 | 	shl	local09, #2
0c968     03 00 00 FF 
0c96c     00 64 86 F1 | 	sub	objptr, ##1536
0c970     32 B7 02 F1 | 	add	local09, objptr
0c974     5B B1 62 FC | 	wrlong	local06, local09
0c978     03 00 00 FF 
0c97c     00 64 06 F1 | 	add	objptr, ##1536
0c980     32 B7 02 FB | 	rdlong	local09, objptr
0c984     5B B1 02 F6 | 	mov	local06, local09
0c988     01 B0 66 F0 | 	shl	local06, #1
0c98c     5B B1 02 F1 | 	add	local06, local09
0c990     02 B0 66 F0 | 	shl	local06, #2
0c994     03 00 00 FF 
0c998     00 64 86 F1 | 	sub	objptr, ##1536
0c99c     32 B1 02 F1 | 	add	local06, objptr
0c9a0     04 B0 06 F1 | 	add	local06, #4
0c9a4     58 B3 62 FC | 	wrlong	local07, local06
0c9a8     03 00 00 FF 
0c9ac     00 64 06 F1 | 	add	objptr, ##1536
0c9b0     32 B7 02 FB | 	rdlong	local09, objptr
0c9b4     5B B3 02 F6 | 	mov	local07, local09
0c9b8     01 B2 66 F0 | 	shl	local07, #1
0c9bc     5B B3 02 F1 | 	add	local07, local09
0c9c0     02 B2 66 F0 | 	shl	local07, #2
0c9c4     03 00 00 FF 
0c9c8     00 64 86 F1 | 	sub	objptr, ##1536
0c9cc     32 B3 02 F1 | 	add	local07, objptr
0c9d0     08 B2 06 F1 | 	add	local07, #8
0c9d4     59 AF 62 FC | 	wrlong	local05, local07
0c9d8     03 00 00 FF 
0c9dc     00 64 06 F1 | 	add	objptr, ##1536
0c9e0     32 B1 02 FB | 	rdlong	local06, objptr
0c9e4     01 B0 06 F1 | 	add	local06, #1
0c9e8     32 B1 62 FC | 	wrlong	local06, objptr
0c9ec     13 00 00 FF 
0c9f0     38 64 86 F1 | 	sub	objptr, ##9784
0c9f4     32 B1 02 FB | 	rdlong	local06, objptr
0c9f8     01 B0 06 F1 | 	add	local06, #1
0c9fc     32 B1 62 FC | 	wrlong	local06, objptr
0ca00     38 00 00 FF 
0ca04     E8 65 86 F1 | 	sub	objptr, ##29160
0ca08     B4 03 90 FD | 	jmp	#LR__1053
0ca0c                 | LR__1044
0ca0c     38 00 00 FF 
0ca10     E8 65 06 F1 | 	add	objptr, ##29160
0ca14     32 97 02 FB | 	rdlong	arg03, objptr
0ca18     03 96 66 F0 | 	shl	arg03, #3
0ca1c     02 00 00 FF 
0ca20     38 64 86 F1 | 	sub	objptr, ##1080
0ca24     32 97 02 F1 | 	add	arg03, objptr
0ca28     4B 93 02 FB | 	rdlong	arg01, arg03
0ca2c     36 00 00 FF 
0ca30     B0 65 86 F1 | 	sub	objptr, ##28080
0ca34     49 B5 02 F6 | 	mov	local08, arg01
0ca38     D7 06 48 FB | 	callpa	#(@LR__1046-@LR__1045)>>2,fcache_load_ptr_
0ca3c                 | LR__1045
0ca3c     5A 7B CA FA | 	rdbyte	result1, local08 wz
0ca40     01 B4 06 51 |  if_ne	add	local08, #1
0ca44     F4 FF 9F 5D |  if_ne	jmp	#LR__1045
0ca48                 | LR__1046
0ca48     49 B5 82 F1 | 	sub	local08, arg01
0ca4c     5A 7B 02 F6 | 	mov	result1, local08
0ca50     54 00 00 FF 
0ca54     CC 64 06 F1 | 	add	objptr, ##43212
0ca58     32 7B 62 FC | 	wrlong	result1, objptr
0ca5c     58 64 86 F1 | 	sub	objptr, #88
0ca60     32 93 02 FB | 	rdlong	arg01, objptr
0ca64     3D 93 82 F1 | 	sub	arg01, result1
0ca68     04 92 86 F1 | 	sub	arg01, #4
0ca6c     03 92 26 F5 | 	andn	arg01, #3
0ca70     32 93 62 FC | 	wrlong	arg01, objptr
0ca74     58 64 06 F1 | 	add	objptr, #88
0ca78     32 95 02 FB | 	rdlong	arg02, objptr
0ca7c     54 00 00 FF 
0ca80     CC 64 86 F1 | 	sub	objptr, ##43212
0ca84     A8 40 B1 FD | 	call	#_pslpoke
0ca88                 | '     pslpoke memtop,l
0ca88                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0ca88     01 B8 06 F6 | 	mov	local10, #1
0ca8c     54 00 00 FF 
0ca90     CC 64 06 F1 | 	add	objptr, ##43212
0ca94     32 BB 02 FB | 	rdlong	local11, objptr
0ca98     54 00 00 FF 
0ca9c     CC 64 86 F1 | 	sub	objptr, ##43212
0caa0     01 BA 06 F1 | 	add	local11, #1
0caa4                 | LR__1047
0caa4     5D B9 52 F2 | 	cmps	local10, local11 wc
0caa8     5C 00 90 3D |  if_ae	jmp	#LR__1048
0caac     54 00 00 FF 
0cab0     74 64 06 F1 | 	add	objptr, ##43124
0cab4     32 B3 02 FB | 	rdlong	local07, objptr
0cab8     03 B2 06 F1 | 	add	local07, #3
0cabc     5C B3 02 F1 | 	add	local07, local10
0cac0     1B 00 00 FF 
0cac4     8C 64 86 F1 | 	sub	objptr, ##13964
0cac8     32 B7 02 FB | 	rdlong	local09, objptr
0cacc     03 B6 66 F0 | 	shl	local09, #3
0cad0     02 00 00 FF 
0cad4     38 64 86 F1 | 	sub	objptr, ##1080
0cad8     32 B7 02 F1 | 	add	local09, objptr
0cadc     5B 93 02 FB | 	rdlong	arg01, local09
0cae0     5C 95 02 F6 | 	mov	arg02, local10
0cae4     01 96 06 F6 | 	mov	arg03, #1
0cae8     36 00 00 FF 
0caec     B0 65 86 F1 | 	sub	objptr, ##28080
0caf0     5C 96 B1 FD | 	call	#__system__Mid_S
0caf4     3D 95 C2 FA | 	rdbyte	arg02, result1
0caf8     59 93 02 F6 | 	mov	arg01, local07
0cafc     C8 40 B1 FD | 	call	#_pspoke
0cb00     01 B8 06 F1 | 	add	local10, #1
0cb04     9C FF 9F FD | 	jmp	#LR__1047
0cb08                 | LR__1048
0cb08     54 00 00 FF 
0cb0c     74 64 06 F1 | 	add	objptr, ##43124
0cb10     32 A7 02 FB | 	rdlong	local01, objptr
0cb14     2B AA 06 F6 | 	mov	local03, #43
0cb18     53 B1 02 F6 | 	mov	local06, local01
0cb1c     54 B3 02 F6 | 	mov	local07, local02
0cb20     55 BB 02 F6 | 	mov	local11, local03
0cb24     08 00 00 FF 
0cb28     54 64 86 F1 | 	sub	objptr, ##4180
0cb2c     32 B9 02 FB | 	rdlong	local10, objptr
0cb30     5C B7 02 F6 | 	mov	local09, local10
0cb34     01 B6 66 F0 | 	shl	local09, #1
0cb38     5C B7 02 F1 | 	add	local09, local10
0cb3c     02 B6 66 F0 | 	shl	local09, #2
0cb40     03 00 00 FF 
0cb44     00 64 86 F1 | 	sub	objptr, ##1536
0cb48     32 B7 02 F1 | 	add	local09, objptr
0cb4c     5B B1 62 FC | 	wrlong	local06, local09
0cb50     03 00 00 FF 
0cb54     00 64 06 F1 | 	add	objptr, ##1536
0cb58     32 B9 02 FB | 	rdlong	local10, objptr
0cb5c     5C B7 02 F6 | 	mov	local09, local10
0cb60     01 B6 66 F0 | 	shl	local09, #1
0cb64     5C B7 02 F1 | 	add	local09, local10
0cb68     02 B6 66 F0 | 	shl	local09, #2
0cb6c     03 00 00 FF 
0cb70     00 64 86 F1 | 	sub	objptr, ##1536
0cb74     32 B7 02 F1 | 	add	local09, objptr
0cb78     04 B6 06 F1 | 	add	local09, #4
0cb7c     5B B3 62 FC | 	wrlong	local07, local09
0cb80     03 00 00 FF 
0cb84     00 64 06 F1 | 	add	objptr, ##1536
0cb88     32 B9 02 FB | 	rdlong	local10, objptr
0cb8c     5C B7 02 F6 | 	mov	local09, local10
0cb90     01 B6 66 F0 | 	shl	local09, #1
0cb94     5C B7 02 F1 | 	add	local09, local10
0cb98     02 B6 66 F0 | 	shl	local09, #2
0cb9c     03 00 00 FF 
0cba0     00 64 86 F1 | 	sub	objptr, ##1536
0cba4     32 B7 02 F1 | 	add	local09, objptr
0cba8     08 B6 06 F1 | 	add	local09, #8
0cbac     5B BB 62 FC | 	wrlong	local11, local09
0cbb0     03 00 00 FF 
0cbb4     00 64 06 F1 | 	add	objptr, ##1536
0cbb8     32 B1 02 FB | 	rdlong	local06, objptr
0cbbc     01 B0 06 F1 | 	add	local06, #1
0cbc0     32 B1 62 FC | 	wrlong	local06, objptr
0cbc4     13 00 00 FF 
0cbc8     38 64 86 F1 | 	sub	objptr, ##9784
0cbcc     32 B1 02 FB | 	rdlong	local06, objptr
0cbd0     01 B0 06 F1 | 	add	local06, #1
0cbd4     32 B1 62 FC | 	wrlong	local06, objptr
0cbd8     38 00 00 FF 
0cbdc     E8 65 86 F1 | 	sub	objptr, ##29160
0cbe0     DC 01 90 FD | 	jmp	#LR__1053
0cbe4                 | LR__1049
0cbe4     2C AA 06 F6 | 	mov	local03, #44
0cbe8     38 00 00 FF 
0cbec     E8 65 06 F1 | 	add	objptr, ##29160
0cbf0     32 B1 02 FB | 	rdlong	local06, objptr
0cbf4     03 B0 66 F0 | 	shl	local06, #3
0cbf8     02 00 00 FF 
0cbfc     38 64 86 F1 | 	sub	objptr, ##1080
0cc00     32 B1 02 F1 | 	add	local06, objptr
0cc04     58 93 02 FB | 	rdlong	arg01, local06
0cc08     00 94 06 F6 | 	mov	arg02, #0
0cc0c     36 00 00 FF 
0cc10     B0 65 86 F1 | 	sub	objptr, ##28080
0cc14     CC A8 B1 FD | 	call	#__system____builtin_atoi
0cc18     3D A7 02 F6 | 	mov	local01, result1
0cc1c     53 B1 02 F6 | 	mov	local06, local01
0cc20     54 B3 02 F6 | 	mov	local07, local02
0cc24     55 BB 02 F6 | 	mov	local11, local03
0cc28     4C 00 00 FF 
0cc2c     20 64 06 F1 | 	add	objptr, ##38944
0cc30     32 B9 02 FB | 	rdlong	local10, objptr
0cc34     5C B7 02 F6 | 	mov	local09, local10
0cc38     01 B6 66 F0 | 	shl	local09, #1
0cc3c     5C B7 02 F1 | 	add	local09, local10
0cc40     02 B6 66 F0 | 	shl	local09, #2
0cc44     03 00 00 FF 
0cc48     00 64 86 F1 | 	sub	objptr, ##1536
0cc4c     32 B7 02 F1 | 	add	local09, objptr
0cc50     5B B1 62 FC | 	wrlong	local06, local09
0cc54     03 00 00 FF 
0cc58     00 64 06 F1 | 	add	objptr, ##1536
0cc5c     32 B9 02 FB | 	rdlong	local10, objptr
0cc60     5C B7 02 F6 | 	mov	local09, local10
0cc64     01 B6 66 F0 | 	shl	local09, #1
0cc68     5C B7 02 F1 | 	add	local09, local10
0cc6c     02 B6 66 F0 | 	shl	local09, #2
0cc70     03 00 00 FF 
0cc74     00 64 86 F1 | 	sub	objptr, ##1536
0cc78     32 B7 02 F1 | 	add	local09, objptr
0cc7c     04 B6 06 F1 | 	add	local09, #4
0cc80     5B B3 62 FC | 	wrlong	local07, local09
0cc84     03 00 00 FF 
0cc88     00 64 06 F1 | 	add	objptr, ##1536
0cc8c     32 B9 02 FB | 	rdlong	local10, objptr
0cc90     5C B7 02 F6 | 	mov	local09, local10
0cc94     01 B6 66 F0 | 	shl	local09, #1
0cc98     5C B7 02 F1 | 	add	local09, local10
0cc9c     02 B6 66 F0 | 	shl	local09, #2
0cca0     03 00 00 FF 
0cca4     00 64 86 F1 | 	sub	objptr, ##1536
0cca8     32 B7 02 F1 | 	add	local09, objptr
0ccac     08 B6 06 F1 | 	add	local09, #8
0ccb0     5B BB 62 FC | 	wrlong	local11, local09
0ccb4     03 00 00 FF 
0ccb8     00 64 06 F1 | 	add	objptr, ##1536
0ccbc     32 B1 02 FB | 	rdlong	local06, objptr
0ccc0     01 B0 06 F1 | 	add	local06, #1
0ccc4     32 B1 62 FC | 	wrlong	local06, objptr
0ccc8     13 00 00 FF 
0cccc     38 64 86 F1 | 	sub	objptr, ##9784
0ccd0     32 B1 02 FB | 	rdlong	local06, objptr
0ccd4     01 B0 06 F1 | 	add	local06, #1
0ccd8     32 B1 62 FC | 	wrlong	local06, objptr
0ccdc     38 00 00 FF 
0cce0     E8 65 86 F1 | 	sub	objptr, ##29160
0cce4     D8 00 90 FD | 	jmp	#LR__1053
0cce8                 | LR__1050
0cce8     56 93 02 F6 | 	mov	arg01, local04
0ccec     24 04 B0 FD | 	call	#_getvar
0ccf0     38 00 00 FF 
0ccf4     E8 65 06 F1 | 	add	objptr, ##29160
0ccf8     32 B1 02 FB | 	rdlong	local06, objptr
0ccfc     01 B0 06 F1 | 	add	local06, #1
0cd00     32 B1 62 FC | 	wrlong	local06, objptr
0cd04     38 00 00 FF 
0cd08     E8 65 86 F1 | 	sub	objptr, ##29160
0cd0c                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0cd0c     01 7A 56 F2 | 	cmps	result1, #1 wc
0cd10     B0 00 90 3D |  if_ae	jmp	#LR__1054
0cd14     A8 00 90 FD | 	jmp	#LR__1053
0cd18                 | LR__1051
0cd18     38 00 00 FF 
0cd1c     E8 65 06 F1 | 	add	objptr, ##29160
0cd20     32 B1 02 FB | 	rdlong	local06, objptr
0cd24     01 B0 06 F1 | 	add	local06, #1
0cd28     32 B1 62 FC | 	wrlong	local06, objptr
0cd2c     38 00 00 FF 
0cd30     E8 65 86 F1 | 	sub	objptr, ##29160
0cd34     20 F1 BF FD | 	call	#_expr
0cd38                 | '     ct+=1
0cd38                 | '     err=expr() : if err>0 then return err 
0cd38     01 7A 56 F2 | 	cmps	result1, #1 wc
0cd3c     84 00 90 3D |  if_ae	jmp	#LR__1054
0cd40                 | '     if lparts(ct).token=token_rpar then ct+=1
0cd40     38 00 00 FF 
0cd44     E8 65 06 F1 | 	add	objptr, ##29160
0cd48     32 BB 02 FB | 	rdlong	local11, objptr
0cd4c     03 BA 66 F0 | 	shl	local11, #3
0cd50     02 00 00 FF 
0cd54     38 64 86 F1 | 	sub	objptr, ##1080
0cd58     32 BB 02 F1 | 	add	local11, objptr
0cd5c     04 BA 06 F1 | 	add	local11, #4
0cd60     5D BB 02 FB | 	rdlong	local11, local11
0cd64     14 BA 0E F2 | 	cmp	local11, #20 wz
0cd68     36 00 00 FF 
0cd6c     B0 65 86 F1 | 	sub	objptr, ##28080
0cd70     4C 00 90 5D |  if_ne	jmp	#LR__1053
0cd74     38 00 00 FF 
0cd78     E8 65 06 F1 | 	add	objptr, ##29160
0cd7c     32 B1 02 FB | 	rdlong	local06, objptr
0cd80     01 B0 06 F1 | 	add	local06, #1
0cd84     32 B1 62 FC | 	wrlong	local06, objptr
0cd88     38 00 00 FF 
0cd8c     E8 65 86 F1 | 	sub	objptr, ##29160
0cd90     2C 00 90 FD | 	jmp	#LR__1053
0cd94                 | LR__1052
0cd94     56 93 02 F6 | 	mov	arg01, local04
0cd98     34 00 B0 FD | 	call	#_getfun
0cd9c     38 00 00 FF 
0cda0     E8 65 06 F1 | 	add	objptr, ##29160
0cda4     32 B1 02 FB | 	rdlong	local06, objptr
0cda8     01 B0 06 F1 | 	add	local06, #1
0cdac     32 B1 62 FC | 	wrlong	local06, objptr
0cdb0     38 00 00 FF 
0cdb4     E8 65 86 F1 | 	sub	objptr, ##29160
0cdb8                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0cdb8     01 7A 56 F2 | 	cmps	result1, #1 wc
0cdbc     04 00 90 3D |  if_ae	jmp	#LR__1054
0cdc0                 | LR__1053
0cdc0                 | ' return 0  
0cdc0     00 7A 06 F6 | 	mov	result1, #0
0cdc4                 | LR__1054
0cdc4     E7 F0 03 F6 | 	mov	ptra, fp
0cdc8     F2 00 A0 FD | 	call	#popregs_
0cdcc                 | _getvalue_ret
0cdcc     2D 00 64 FD | 	ret
0cdd0                 | 
0cdd0                 | ' 
0cdd0                 | ' ' Get a function result 
0cdd0                 | ' 
0cdd0                 | ' function getfun(m as integer) as ulong
0cdd0                 | _getfun
0cdd0     0F CA 05 F6 | 	mov	COUNT_, #15
0cdd4     E8 00 A0 FD | 	call	#pushregs_
0cdd8                 | _getfun_enter
0cdd8     49 AD 02 F6 | 	mov	local04, arg01
0cddc     38 00 00 FF 
0cde0     E8 65 06 F1 | 	add	objptr, ##29160
0cde4     32 AF 02 FB | 	rdlong	local05, objptr
0cde8     57 B1 02 F6 | 	mov	local06, local05
0cdec     00 B2 06 F6 | 	mov	local07, #0
0cdf0                 | ' oldct=ct
0cdf0                 | ' numpar=0
0cdf0                 | ' if lparts(ct+1).token=token_lpar then
0cdf0     01 AE 06 F1 | 	add	local05, #1
0cdf4     03 AE 66 F0 | 	shl	local05, #3
0cdf8     02 00 00 FF 
0cdfc     38 64 86 F1 | 	sub	objptr, ##1080
0ce00     32 AF 02 F1 | 	add	local05, objptr
0ce04     04 AE 06 F1 | 	add	local05, #4
0ce08     57 AF 02 FB | 	rdlong	local05, local05
0ce0c     15 AE 0E F2 | 	cmp	local05, #21 wz
0ce10     36 00 00 FF 
0ce14     B0 65 86 F1 | 	sub	objptr, ##28080
0ce18     54 01 90 5D |  if_ne	jmp	#LR__1064
0ce1c     38 00 00 FF 
0ce20     E8 65 06 F1 | 	add	objptr, ##29160
0ce24     32 B5 02 FB | 	rdlong	local08, objptr
0ce28     01 B4 06 F1 | 	add	local08, #1
0ce2c     32 B5 62 FC | 	wrlong	local08, objptr
0ce30     38 00 00 FF 
0ce34     E8 65 86 F1 | 	sub	objptr, ##29160
0ce38                 | '   ct+=1 											' omit this lpar, this is for expr list
0ce38                 | '   do
0ce38                 | LR__1060
0ce38     38 00 00 FF 
0ce3c     E8 65 06 F1 | 	add	objptr, ##29160
0ce40     32 AF 02 FB | 	rdlong	local05, objptr
0ce44     01 AE 06 F1 | 	add	local05, #1
0ce48     32 AF 62 FC | 	wrlong	local05, objptr
0ce4c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0ce4c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0ce4c     03 AE 66 F0 | 	shl	local05, #3
0ce50     02 00 00 FF 
0ce54     38 64 86 F1 | 	sub	objptr, ##1080
0ce58     32 AF 02 F1 | 	add	local05, objptr
0ce5c     04 AE 06 F1 | 	add	local05, #4
0ce60     57 B5 02 FB | 	rdlong	local08, local05
0ce64     15 B4 0E F2 | 	cmp	local08, #21 wz
0ce68     36 00 00 FF 
0ce6c     B0 65 86 F1 | 	sub	objptr, ##28080
0ce70     44 00 90 5D |  if_ne	jmp	#LR__1061
0ce74     38 00 00 FF 
0ce78     E8 65 06 F1 | 	add	objptr, ##29160
0ce7c     32 B5 02 FB | 	rdlong	local08, objptr
0ce80     01 B4 06 F1 | 	add	local08, #1
0ce84     32 B5 62 FC | 	wrlong	local08, objptr
0ce88     38 00 00 FF 
0ce8c     E8 65 86 F1 | 	sub	objptr, ##29160
0ce90     C4 EF BF FD | 	call	#_expr
0ce94     3D B7 02 F6 | 	mov	local09, result1
0ce98     38 00 00 FF 
0ce9c     E8 65 06 F1 | 	add	objptr, ##29160
0cea0     32 B5 02 FB | 	rdlong	local08, objptr
0cea4     01 B4 06 F1 | 	add	local08, #1
0cea8     32 B5 62 FC | 	wrlong	local08, objptr
0ceac     38 00 00 FF 
0ceb0     E8 65 86 F1 | 	sub	objptr, ##29160
0ceb4     08 00 90 FD | 	jmp	#LR__1062
0ceb8                 | LR__1061
0ceb8     9C EF BF FD | 	call	#_expr
0cebc     3D B7 02 F6 | 	mov	local09, result1
0cec0                 | LR__1062
0cec0                 | '     if err>0 then return err
0cec0     01 B6 16 F2 | 	cmp	local09, #1 wc
0cec4     5B 7B 02 36 |  if_ae	mov	result1, local09
0cec8     3C 02 90 3D |  if_ae	jmp	#LR__1066
0cecc     01 B2 06 F1 | 	add	local07, #1
0ced0     38 00 00 FF 
0ced4     E8 65 06 F1 | 	add	objptr, ##29160
0ced8     32 AF 02 FB | 	rdlong	local05, objptr
0cedc     03 AE 66 F0 | 	shl	local05, #3
0cee0     02 00 00 FF 
0cee4     38 64 86 F1 | 	sub	objptr, ##1080
0cee8     32 AF 02 F1 | 	add	local05, objptr
0ceec     04 AE 06 F1 | 	add	local05, #4
0cef0     57 B7 02 FB | 	rdlong	local09, local05
0cef4     14 B6 0E F2 | 	cmp	local09, #20 wz
0cef8     36 00 00 FF 
0cefc     B0 65 86 F1 | 	sub	objptr, ##28080
0cf00     34 00 90 AD |  if_e	jmp	#LR__1063
0cf04     38 00 00 FF 
0cf08     E8 65 06 F1 | 	add	objptr, ##29160
0cf0c     32 B7 02 FB | 	rdlong	local09, objptr
0cf10     03 B6 66 F0 | 	shl	local09, #3
0cf14     02 00 00 FF 
0cf18     38 64 86 F1 | 	sub	objptr, ##1080
0cf1c     32 B7 02 F1 | 	add	local09, objptr
0cf20     04 B6 06 F1 | 	add	local09, #4
0cf24     5B B7 02 FB | 	rdlong	local09, local09
0cf28     FE B7 0E F2 | 	cmp	local09, #510 wz
0cf2c     36 00 00 FF 
0cf30     B0 65 86 F1 | 	sub	objptr, ##28080
0cf34     00 FF 9F 5D |  if_ne	jmp	#LR__1060
0cf38                 | LR__1063
0cf38                 | '   if lparts(ct).token=token_end then return 14
0cf38     38 00 00 FF 
0cf3c     E8 65 06 F1 | 	add	objptr, ##29160
0cf40     32 AF 02 FB | 	rdlong	local05, objptr
0cf44     03 AE 66 F0 | 	shl	local05, #3
0cf48     02 00 00 FF 
0cf4c     38 64 86 F1 | 	sub	objptr, ##1080
0cf50     32 AF 02 F1 | 	add	local05, objptr
0cf54     04 AE 06 F1 | 	add	local05, #4
0cf58     57 B7 02 FB | 	rdlong	local09, local05
0cf5c     FE B7 0E F2 | 	cmp	local09, #510 wz
0cf60     36 00 00 FF 
0cf64     B0 65 86 F1 | 	sub	objptr, ##28080
0cf68     0E 7A 06 A6 |  if_e	mov	result1, #14
0cf6c     98 01 90 AD |  if_e	jmp	#LR__1066
0cf70                 | LR__1064
0cf70     59 A7 02 F6 | 	mov	local01, local07
0cf74     03 B0 66 F0 | 	shl	local06, #3
0cf78     36 00 00 FF 
0cf7c     B0 65 06 F1 | 	add	objptr, ##28080
0cf80     32 B1 02 F1 | 	add	local06, objptr
0cf84     04 B0 06 F1 | 	add	local06, #4
0cf88     58 AB 02 FB | 	rdlong	local03, local06
0cf8c     53 B5 02 F6 | 	mov	local08, local01
0cf90     54 B9 02 F6 | 	mov	local10, local02
0cf94     55 BB 02 F6 | 	mov	local11, local03
0cf98     15 00 00 FF 
0cf9c     70 64 06 F1 | 	add	objptr, ##10864
0cfa0     32 BD 02 FB | 	rdlong	local12, objptr
0cfa4     5E BF 02 F6 | 	mov	local13, local12
0cfa8     01 BE 66 F0 | 	shl	local13, #1
0cfac     5E BF 02 F1 | 	add	local13, local12
0cfb0     02 BE 66 F0 | 	shl	local13, #2
0cfb4     03 00 00 FF 
0cfb8     00 64 86 F1 | 	sub	objptr, ##1536
0cfbc     32 BF 02 F1 | 	add	local13, objptr
0cfc0     5F B5 62 FC | 	wrlong	local08, local13
0cfc4     03 00 00 FF 
0cfc8     00 64 06 F1 | 	add	objptr, ##1536
0cfcc     32 B5 02 FB | 	rdlong	local08, objptr
0cfd0     5A C1 02 F6 | 	mov	local14, local08
0cfd4     01 C0 66 F0 | 	shl	local14, #1
0cfd8     5A C1 02 F1 | 	add	local14, local08
0cfdc     02 C0 66 F0 | 	shl	local14, #2
0cfe0     03 00 00 FF 
0cfe4     00 64 86 F1 | 	sub	objptr, ##1536
0cfe8     32 C1 02 F1 | 	add	local14, objptr
0cfec     04 C0 06 F1 | 	add	local14, #4
0cff0     60 B9 62 FC | 	wrlong	local10, local14
0cff4     03 00 00 FF 
0cff8     00 64 06 F1 | 	add	objptr, ##1536
0cffc     32 B5 02 FB | 	rdlong	local08, objptr
0d000     5A C3 02 F6 | 	mov	local15, local08
0d004     01 C2 66 F0 | 	shl	local15, #1
0d008     5A C3 02 F1 | 	add	local15, local08
0d00c     02 C2 66 F0 | 	shl	local15, #2
0d010     03 00 00 FF 
0d014     00 64 86 F1 | 	sub	objptr, ##1536
0d018     32 C3 02 F1 | 	add	local15, objptr
0d01c     08 C2 06 F1 | 	add	local15, #8
0d020     61 BB 62 FC | 	wrlong	local11, local15
0d024     03 00 00 FF 
0d028     00 64 06 F1 | 	add	objptr, ##1536
0d02c     32 B5 02 FB | 	rdlong	local08, objptr
0d030     01 B4 06 F1 | 	add	local08, #1
0d034     32 B5 62 FC | 	wrlong	local08, objptr
0d038     4C 00 00 FF 
0d03c     20 64 86 F1 | 	sub	objptr, ##38944
0d040                 | ' t2.result.uresult=numpar
0d040                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0d040                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d040                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d040     FF FF 7F FF 
0d044     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0d048     B8 00 90 5D |  if_ne	jmp	#LR__1065
0d04c     15 AA 06 F6 | 	mov	local03, #21
0d050     53 B5 02 F6 | 	mov	local08, local01
0d054     54 B9 02 F6 | 	mov	local10, local02
0d058     55 BB 02 F6 | 	mov	local11, local03
0d05c     4C 00 00 FF 
0d060     20 64 06 F1 | 	add	objptr, ##38944
0d064     32 BD 02 FB | 	rdlong	local12, objptr
0d068     5E BF 02 F6 | 	mov	local13, local12
0d06c     01 BE 66 F0 | 	shl	local13, #1
0d070     5E BF 02 F1 | 	add	local13, local12
0d074     02 BE 66 F0 | 	shl	local13, #2
0d078     03 00 00 FF 
0d07c     00 64 86 F1 | 	sub	objptr, ##1536
0d080     32 BF 02 F1 | 	add	local13, objptr
0d084     5F B5 62 FC | 	wrlong	local08, local13
0d088     03 00 00 FF 
0d08c     00 64 06 F1 | 	add	objptr, ##1536
0d090     32 C3 02 FB | 	rdlong	local15, objptr
0d094     61 C1 02 F6 | 	mov	local14, local15
0d098     01 C0 66 F0 | 	shl	local14, #1
0d09c     61 C1 02 F1 | 	add	local14, local15
0d0a0     02 C0 66 F0 | 	shl	local14, #2
0d0a4     03 00 00 FF 
0d0a8     00 64 86 F1 | 	sub	objptr, ##1536
0d0ac     32 C1 02 F1 | 	add	local14, objptr
0d0b0     04 C0 06 F1 | 	add	local14, #4
0d0b4     60 B9 62 FC | 	wrlong	local10, local14
0d0b8     03 00 00 FF 
0d0bc     00 64 06 F1 | 	add	objptr, ##1536
0d0c0     32 C1 02 FB | 	rdlong	local14, objptr
0d0c4     60 C3 02 F6 | 	mov	local15, local14
0d0c8     01 C2 66 F0 | 	shl	local15, #1
0d0cc     60 C3 02 F1 | 	add	local15, local14
0d0d0     02 C2 66 F0 | 	shl	local15, #2
0d0d4     03 00 00 FF 
0d0d8     00 64 86 F1 | 	sub	objptr, ##1536
0d0dc     32 C3 02 F1 | 	add	local15, objptr
0d0e0     08 C2 06 F1 | 	add	local15, #8
0d0e4     61 BB 62 FC | 	wrlong	local11, local15
0d0e8     03 00 00 FF 
0d0ec     00 64 06 F1 | 	add	objptr, ##1536
0d0f0     32 B5 02 FB | 	rdlong	local08, objptr
0d0f4     01 B4 06 F1 | 	add	local08, #1
0d0f8     32 B5 62 FC | 	wrlong	local08, objptr
0d0fc     4C 00 00 FF 
0d100     20 64 86 F1 | 	sub	objptr, ##38944
0d104                 | LR__1065
0d104                 | ' return 0
0d104     00 7A 06 F6 | 	mov	result1, #0
0d108                 | LR__1066
0d108     E7 F0 03 F6 | 	mov	ptra, fp
0d10c     F2 00 A0 FD | 	call	#popregs_
0d110                 | _getfun_ret
0d110     2D 00 64 FD | 	ret
0d114                 | 
0d114                 | '   
0d114                 | '   
0d114                 | ' function getvar(m as integer) as ulong
0d114                 | _getvar
0d114     11 CA 05 F6 | 	mov	COUNT_, #17
0d118     E8 00 A0 FD | 	call	#pushregs_
0d11c                 | _getvar_enter
0d11c     49 AD 02 F6 | 	mov	local04, arg01
0d120     38 00 00 FF 
0d124     E8 65 06 F1 | 	add	objptr, ##29160
0d128     32 AF 02 FB | 	rdlong	local05, objptr
0d12c     03 AE 66 F0 | 	shl	local05, #3
0d130     02 00 00 FF 
0d134     38 64 86 F1 | 	sub	objptr, ##1080
0d138     32 AF 02 F1 | 	add	local05, objptr
0d13c     57 B1 02 FB | 	rdlong	local06, local05
0d140     01 B2 66 F6 | 	neg	local07, #1
0d144                 | ' 
0d144                 | ' varname$=lparts(ct).part$
0d144                 | ' j=-1
0d144                 | ' 
0d144                 | ' for i=0 to varnum-1
0d144     00 B4 06 F6 | 	mov	local08, #0
0d148     04 64 86 F1 | 	sub	objptr, #4
0d14c     32 B7 02 FB | 	rdlong	local09, objptr
0d150     36 00 00 FF 
0d154     AC 65 86 F1 | 	sub	objptr, ##28076
0d158                 | LR__1070
0d158     5B B5 52 F2 | 	cmps	local08, local09 wc
0d15c     34 00 90 3D |  if_ae	jmp	#LR__1071
0d160                 | '   if variables(i).name=varname$ then j=i : exit
0d160     5A AF 02 F6 | 	mov	local05, local08
0d164     04 AE 66 F0 | 	shl	local05, #4
0d168     32 95 02 F6 | 	mov	arg02, objptr
0d16c     16 00 00 FF 
0d170     9C 95 06 F1 | 	add	arg02, ##11676
0d174     4A AF 02 F1 | 	add	local05, arg02
0d178     57 93 02 FB | 	rdlong	arg01, local05
0d17c     58 95 02 F6 | 	mov	arg02, local06
0d180     34 76 B1 FD | 	call	#__system___string_cmp
0d184     00 7A 0E F2 | 	cmp	result1, #0 wz
0d188     5A B3 02 A6 |  if_e	mov	local07, local08
0d18c     01 B4 06 51 |  if_ne	add	local08, #1
0d190     C4 FF 9F 5D |  if_ne	jmp	#LR__1070
0d194                 | LR__1071
0d194                 | ' if  j=-1 andalso varnum<maxvars then   
0d194     FF FF 7F FF 
0d198     FF B3 0E F2 | 	cmp	local07, ##-1 wz
0d19c     A8 00 90 5D |  if_ne	jmp	#LR__1072
0d1a0     36 00 00 FF 
0d1a4     AC 65 06 F1 | 	add	objptr, ##28076
0d1a8     32 B7 02 FB | 	rdlong	local09, objptr
0d1ac     36 00 00 FF 
0d1b0     AC 65 86 F1 | 	sub	objptr, ##28076
0d1b4     02 00 00 FF 
0d1b8     00 B6 56 F2 | 	cmps	local09, ##1024 wc
0d1bc     88 00 90 3D |  if_ae	jmp	#LR__1072
0d1c0     36 00 00 FF 
0d1c4     AC 65 06 F1 | 	add	objptr, ##28076
0d1c8     32 AF 02 FB | 	rdlong	local05, objptr
0d1cc     04 AE 66 F0 | 	shl	local05, #4
0d1d0     20 00 00 FF 
0d1d4     10 64 86 F1 | 	sub	objptr, ##16400
0d1d8     32 AF 02 F1 | 	add	local05, objptr
0d1dc     57 B1 62 FC | 	wrlong	local06, local05
0d1e0     20 00 00 FF 
0d1e4     10 64 06 F1 | 	add	objptr, ##16400
0d1e8     32 AF 02 FB | 	rdlong	local05, objptr
0d1ec     04 AE 66 F0 | 	shl	local05, #4
0d1f0     20 00 00 FF 
0d1f4     10 64 86 F1 | 	sub	objptr, ##16400
0d1f8     32 AF 02 F1 | 	add	local05, objptr
0d1fc     04 AE 06 F1 | 	add	local05, #4
0d200     57 01 68 FC | 	wrlong	#0, local05
0d204     20 00 00 FF 
0d208     10 64 06 F1 | 	add	objptr, ##16400
0d20c     32 AF 02 FB | 	rdlong	local05, objptr
0d210     04 AE 66 F0 | 	shl	local05, #4
0d214     20 00 00 FF 
0d218     10 64 86 F1 | 	sub	objptr, ##16400
0d21c     32 AF 02 F1 | 	add	local05, objptr
0d220     0C AE 06 F1 | 	add	local05, #12
0d224     57 39 68 FC | 	wrlong	#28, local05
0d228     20 00 00 FF 
0d22c     10 64 06 F1 | 	add	objptr, ##16400
0d230     32 B7 02 FB | 	rdlong	local09, objptr
0d234     5B B3 02 F6 | 	mov	local07, local09
0d238     01 B6 06 F1 | 	add	local09, #1
0d23c     32 B7 62 FC | 	wrlong	local09, objptr
0d240     36 00 00 FF 
0d244     AC 65 86 F1 | 	sub	objptr, ##28076
0d248                 | LR__1072
0d248     00 B4 06 F6 | 	mov	local08, #0
0d24c                 | ' numpar=0
0d24c                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d24c     38 00 00 FF 
0d250     E8 65 06 F1 | 	add	objptr, ##29160
0d254     32 AF 02 FB | 	rdlong	local05, objptr
0d258     01 AE 06 F1 | 	add	local05, #1
0d25c     03 AE 66 F0 | 	shl	local05, #3
0d260     02 00 00 FF 
0d264     38 64 86 F1 | 	sub	objptr, ##1080
0d268     32 AF 02 F1 | 	add	local05, objptr
0d26c     04 AE 06 F1 | 	add	local05, #4
0d270     57 B7 02 FB | 	rdlong	local09, local05
0d274     15 B6 0E F2 | 	cmp	local09, #21 wz
0d278     36 00 00 FF 
0d27c     B0 65 86 F1 | 	sub	objptr, ##28080
0d280     54 01 90 5D |  if_ne	jmp	#LR__1077
0d284     38 00 00 FF 
0d288     E8 65 06 F1 | 	add	objptr, ##29160
0d28c     32 B9 02 FB | 	rdlong	local10, objptr
0d290     01 B8 06 F1 | 	add	local10, #1
0d294     32 B9 62 FC | 	wrlong	local10, objptr
0d298     38 00 00 FF 
0d29c     E8 65 86 F1 | 	sub	objptr, ##29160
0d2a0                 | '   ct+=1 											' omit this lpar, this is for expr list
0d2a0                 | '   do
0d2a0                 | LR__1073
0d2a0     38 00 00 FF 
0d2a4     E8 65 06 F1 | 	add	objptr, ##29160
0d2a8     32 AF 02 FB | 	rdlong	local05, objptr
0d2ac     01 AE 06 F1 | 	add	local05, #1
0d2b0     32 AF 62 FC | 	wrlong	local05, objptr
0d2b4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d2b4                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d2b4     03 AE 66 F0 | 	shl	local05, #3
0d2b8     02 00 00 FF 
0d2bc     38 64 86 F1 | 	sub	objptr, ##1080
0d2c0     32 AF 02 F1 | 	add	local05, objptr
0d2c4     04 AE 06 F1 | 	add	local05, #4
0d2c8     57 B9 02 FB | 	rdlong	local10, local05
0d2cc     15 B8 0E F2 | 	cmp	local10, #21 wz
0d2d0     36 00 00 FF 
0d2d4     B0 65 86 F1 | 	sub	objptr, ##28080
0d2d8     44 00 90 5D |  if_ne	jmp	#LR__1074
0d2dc     38 00 00 FF 
0d2e0     E8 65 06 F1 | 	add	objptr, ##29160
0d2e4     32 B9 02 FB | 	rdlong	local10, objptr
0d2e8     01 B8 06 F1 | 	add	local10, #1
0d2ec     32 B9 62 FC | 	wrlong	local10, objptr
0d2f0     38 00 00 FF 
0d2f4     E8 65 86 F1 | 	sub	objptr, ##29160
0d2f8     5C EB BF FD | 	call	#_expr
0d2fc     3D BB 02 F6 | 	mov	local11, result1
0d300     38 00 00 FF 
0d304     E8 65 06 F1 | 	add	objptr, ##29160
0d308     32 B9 02 FB | 	rdlong	local10, objptr
0d30c     01 B8 06 F1 | 	add	local10, #1
0d310     32 B9 62 FC | 	wrlong	local10, objptr
0d314     38 00 00 FF 
0d318     E8 65 86 F1 | 	sub	objptr, ##29160
0d31c     08 00 90 FD | 	jmp	#LR__1075
0d320                 | LR__1074
0d320     34 EB BF FD | 	call	#_expr
0d324     3D BB 02 F6 | 	mov	local11, result1
0d328                 | LR__1075
0d328                 | '     if err>0 then return err
0d328     01 BA 56 F2 | 	cmps	local11, #1 wc
0d32c     5D 7B 02 36 |  if_ae	mov	result1, local11
0d330     2C 02 90 3D |  if_ae	jmp	#LR__1079
0d334     01 B4 06 F1 | 	add	local08, #1
0d338     38 00 00 FF 
0d33c     E8 65 06 F1 | 	add	objptr, ##29160
0d340     32 AF 02 FB | 	rdlong	local05, objptr
0d344     03 AE 66 F0 | 	shl	local05, #3
0d348     02 00 00 FF 
0d34c     38 64 86 F1 | 	sub	objptr, ##1080
0d350     32 AF 02 F1 | 	add	local05, objptr
0d354     04 AE 06 F1 | 	add	local05, #4
0d358     57 BB 02 FB | 	rdlong	local11, local05
0d35c     14 BA 0E F2 | 	cmp	local11, #20 wz
0d360     36 00 00 FF 
0d364     B0 65 86 F1 | 	sub	objptr, ##28080
0d368     34 00 90 AD |  if_e	jmp	#LR__1076
0d36c     38 00 00 FF 
0d370     E8 65 06 F1 | 	add	objptr, ##29160
0d374     32 BB 02 FB | 	rdlong	local11, objptr
0d378     03 BA 66 F0 | 	shl	local11, #3
0d37c     02 00 00 FF 
0d380     38 64 86 F1 | 	sub	objptr, ##1080
0d384     32 BB 02 F1 | 	add	local11, objptr
0d388     04 BA 06 F1 | 	add	local11, #4
0d38c     5D BB 02 FB | 	rdlong	local11, local11
0d390     FE BB 0E F2 | 	cmp	local11, #510 wz
0d394     36 00 00 FF 
0d398     B0 65 86 F1 | 	sub	objptr, ##28080
0d39c     00 FF 9F 5D |  if_ne	jmp	#LR__1073
0d3a0                 | LR__1076
0d3a0                 | '     if lparts(ct).token=token_end then return 14
0d3a0     38 00 00 FF 
0d3a4     E8 65 06 F1 | 	add	objptr, ##29160
0d3a8     32 AF 02 FB | 	rdlong	local05, objptr
0d3ac     03 AE 66 F0 | 	shl	local05, #3
0d3b0     02 00 00 FF 
0d3b4     38 64 86 F1 | 	sub	objptr, ##1080
0d3b8     32 AF 02 F1 | 	add	local05, objptr
0d3bc     04 AE 06 F1 | 	add	local05, #4
0d3c0     57 BB 02 FB | 	rdlong	local11, local05
0d3c4     FE BB 0E F2 | 	cmp	local11, #510 wz
0d3c8     36 00 00 FF 
0d3cc     B0 65 86 F1 | 	sub	objptr, ##28080
0d3d0     0E 7A 06 A6 |  if_e	mov	result1, #14
0d3d4     88 01 90 AD |  if_e	jmp	#LR__1079
0d3d8                 | LR__1077
0d3d8     5A A9 02 F6 | 	mov	local02, local08
0d3dc     11 AA 06 F6 | 	mov	local03, #17
0d3e0     59 A7 02 F6 | 	mov	local01, local07
0d3e4     53 B9 02 F6 | 	mov	local10, local01
0d3e8     54 BD 02 F6 | 	mov	local12, local02
0d3ec     55 BF 02 F6 | 	mov	local13, local03
0d3f0     4C 00 00 FF 
0d3f4     20 64 06 F1 | 	add	objptr, ##38944
0d3f8     32 C1 02 FB | 	rdlong	local14, objptr
0d3fc     60 C3 02 F6 | 	mov	local15, local14
0d400     01 C2 66 F0 | 	shl	local15, #1
0d404     60 C3 02 F1 | 	add	local15, local14
0d408     02 C2 66 F0 | 	shl	local15, #2
0d40c     03 00 00 FF 
0d410     00 64 86 F1 | 	sub	objptr, ##1536
0d414     32 C3 02 F1 | 	add	local15, objptr
0d418     61 B9 62 FC | 	wrlong	local10, local15
0d41c     03 00 00 FF 
0d420     00 64 06 F1 | 	add	objptr, ##1536
0d424     32 B9 02 FB | 	rdlong	local10, objptr
0d428     5C C5 02 F6 | 	mov	local16, local10
0d42c     01 C4 66 F0 | 	shl	local16, #1
0d430     5C C5 02 F1 | 	add	local16, local10
0d434     02 C4 66 F0 | 	shl	local16, #2
0d438     03 00 00 FF 
0d43c     00 64 86 F1 | 	sub	objptr, ##1536
0d440     32 C5 02 F1 | 	add	local16, objptr
0d444     04 C4 06 F1 | 	add	local16, #4
0d448     62 BD 62 FC | 	wrlong	local12, local16
0d44c     03 00 00 FF 
0d450     00 64 06 F1 | 	add	objptr, ##1536
0d454     32 B9 02 FB | 	rdlong	local10, objptr
0d458     5C C7 02 F6 | 	mov	local17, local10
0d45c     01 C6 66 F0 | 	shl	local17, #1
0d460     5C C7 02 F1 | 	add	local17, local10
0d464     02 C6 66 F0 | 	shl	local17, #2
0d468     03 00 00 FF 
0d46c     00 64 86 F1 | 	sub	objptr, ##1536
0d470     32 C7 02 F1 | 	add	local17, objptr
0d474     08 C6 06 F1 | 	add	local17, #8
0d478     63 BF 62 FC | 	wrlong	local13, local17
0d47c     03 00 00 FF 
0d480     00 64 06 F1 | 	add	objptr, ##1536
0d484     32 B9 02 FB | 	rdlong	local10, objptr
0d488     01 B8 06 F1 | 	add	local10, #1
0d48c     32 B9 62 FC | 	wrlong	local10, objptr
0d490     4C 00 00 FF 
0d494     20 64 86 F1 | 	sub	objptr, ##38944
0d498                 | ' t2.result.twowords(1)=numpar
0d498                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d498                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d498                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d498     FF FF 7F FF 
0d49c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0d4a0     B8 00 90 5D |  if_ne	jmp	#LR__1078
0d4a4     15 AA 06 F6 | 	mov	local03, #21
0d4a8     53 B9 02 F6 | 	mov	local10, local01
0d4ac     54 BD 02 F6 | 	mov	local12, local02
0d4b0     55 BF 02 F6 | 	mov	local13, local03
0d4b4     4C 00 00 FF 
0d4b8     20 64 06 F1 | 	add	objptr, ##38944
0d4bc     32 C1 02 FB | 	rdlong	local14, objptr
0d4c0     60 C3 02 F6 | 	mov	local15, local14
0d4c4     01 C2 66 F0 | 	shl	local15, #1
0d4c8     60 C3 02 F1 | 	add	local15, local14
0d4cc     02 C2 66 F0 | 	shl	local15, #2
0d4d0     03 00 00 FF 
0d4d4     00 64 86 F1 | 	sub	objptr, ##1536
0d4d8     32 C3 02 F1 | 	add	local15, objptr
0d4dc     61 B9 62 FC | 	wrlong	local10, local15
0d4e0     03 00 00 FF 
0d4e4     00 64 06 F1 | 	add	objptr, ##1536
0d4e8     32 C7 02 FB | 	rdlong	local17, objptr
0d4ec     63 C5 02 F6 | 	mov	local16, local17
0d4f0     01 C4 66 F0 | 	shl	local16, #1
0d4f4     63 C5 02 F1 | 	add	local16, local17
0d4f8     02 C4 66 F0 | 	shl	local16, #2
0d4fc     03 00 00 FF 
0d500     00 64 86 F1 | 	sub	objptr, ##1536
0d504     32 C5 02 F1 | 	add	local16, objptr
0d508     04 C4 06 F1 | 	add	local16, #4
0d50c     62 BD 62 FC | 	wrlong	local12, local16
0d510     03 00 00 FF 
0d514     00 64 06 F1 | 	add	objptr, ##1536
0d518     32 C5 02 FB | 	rdlong	local16, objptr
0d51c     62 C7 02 F6 | 	mov	local17, local16
0d520     01 C6 66 F0 | 	shl	local17, #1
0d524     62 C7 02 F1 | 	add	local17, local16
0d528     02 C6 66 F0 | 	shl	local17, #2
0d52c     03 00 00 FF 
0d530     00 64 86 F1 | 	sub	objptr, ##1536
0d534     32 C7 02 F1 | 	add	local17, objptr
0d538     08 C6 06 F1 | 	add	local17, #8
0d53c     63 BF 62 FC | 	wrlong	local13, local17
0d540     03 00 00 FF 
0d544     00 64 06 F1 | 	add	objptr, ##1536
0d548     32 B9 02 FB | 	rdlong	local10, objptr
0d54c     01 B8 06 F1 | 	add	local10, #1
0d550     32 B9 62 FC | 	wrlong	local10, objptr
0d554     4C 00 00 FF 
0d558     20 64 86 F1 | 	sub	objptr, ##38944
0d55c                 | LR__1078
0d55c                 | ' return 0
0d55c     00 7A 06 F6 | 	mov	result1, #0
0d560                 | LR__1079
0d560     E7 F0 03 F6 | 	mov	ptra, fp
0d564     F2 00 A0 FD | 	call	#popregs_
0d568                 | _getvar_ret
0d568     2D 00 64 FD | 	ret
0d56c                 | 
0d56c                 | ' 
0d56c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d56c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' 
0d56c                 | ' 
0d56c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' '                                                                                                                                       -
0d56c                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d56c                 | ' '                                                                                                                                       -
0d56c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' 
0d56c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d56c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d56c                 | ' 
0d56c                 | ' function execute_line (astart=0 as integer) as integer
0d56c                 | _execute_line
0d56c     04 CA 05 F6 | 	mov	COUNT_, #4
0d570     E8 00 A0 FD | 	call	#pushregs_
0d574     52 00 00 FF 
0d578     60 64 06 F1 | 	add	objptr, ##42080
0d57c     32 01 68 FC | 	wrlong	#0, objptr
0d580                 | ' 
0d580                 | ' runptr2=0
0d580                 | ' for lineptr_e=astart to lineptr-1
0d580     06 00 00 FF 
0d584     3C 64 86 F1 | 	sub	objptr, ##3132
0d588     32 93 62 FC | 	wrlong	arg01, objptr
0d58c     04 64 86 F1 | 	sub	objptr, #4
0d590     32 A7 02 FB | 	rdlong	local01, objptr
0d594     4C 00 00 FF 
0d598     20 64 86 F1 | 	sub	objptr, ##38944
0d59c                 | LR__1080
0d59c     4C 00 00 FF 
0d5a0     24 64 06 F1 | 	add	objptr, ##38948
0d5a4     32 7B 02 FB | 	rdlong	result1, objptr
0d5a8     4C 00 00 FF 
0d5ac     24 64 86 F1 | 	sub	objptr, ##38948
0d5b0     53 7B 52 F2 | 	cmps	result1, local01 wc
0d5b4     98 00 90 3D |  if_ae	jmp	#LR__1081
0d5b8     4C 00 00 FF 
0d5bc     24 64 06 F1 | 	add	objptr, ##38948
0d5c0     32 7B 02 FB | 	rdlong	result1, objptr
0d5c4     3D A9 02 F6 | 	mov	local02, result1
0d5c8     01 A8 66 F0 | 	shl	local02, #1
0d5cc     3D A9 02 F1 | 	add	local02, result1
0d5d0     02 A8 66 F0 | 	shl	local02, #2
0d5d4     03 00 00 FF 
0d5d8     04 64 86 F1 | 	sub	objptr, ##1540
0d5dc     32 A9 02 F1 | 	add	local02, objptr
0d5e0     08 A8 06 F1 | 	add	local02, #8
0d5e4     54 A9 02 FB | 	rdlong	local02, local02
0d5e8     54 A9 E2 F8 | 	getbyte	local02, local02, #0
0d5ec     02 A8 66 F0 | 	shl	local02, #2
0d5f0     04 00 00 FF 
0d5f4     1C 64 86 F1 | 	sub	objptr, ##2076
0d5f8     32 A9 02 F1 | 	add	local02, objptr
0d5fc     54 A9 02 FB | 	rdlong	local02, local02
0d600     54 AB 02 F6 | 	mov	local03, local02
0d604     13 A8 46 F7 | 	zerox	local02, #19
0d608     14 AA 46 F0 | 	shr	local03, #20
0d60c     02 AA 66 F0 | 	shl	local03, #2
0d610     2D AB 02 F1 | 	add	local03, __methods__
0d614     55 AB 02 FB | 	rdlong	local03, local03
0d618     45 00 00 FF 
0d61c     04 64 86 F1 | 	sub	objptr, ##35332
0d620     32 AD 02 F6 | 	mov	local04, objptr
0d624     54 65 02 F6 | 	mov	objptr, local02
0d628     2D AA 62 FD | 	call	local03
0d62c     56 65 02 F6 | 	mov	objptr, local04
0d630     4C 00 00 FF 
0d634     24 64 06 F1 | 	add	objptr, ##38948
0d638     32 AD 02 FB | 	rdlong	local04, objptr
0d63c     01 AC 06 F1 | 	add	local04, #1
0d640     32 AD 62 FC | 	wrlong	local04, objptr
0d644     4C 00 00 FF 
0d648     24 64 86 F1 | 	sub	objptr, ##38948
0d64c     4C FF 9F FD | 	jmp	#LR__1080
0d650                 | LR__1081
0d650                 | ' return runptr2
0d650     52 00 00 FF 
0d654     60 64 06 F1 | 	add	objptr, ##42080
0d658     32 7B 02 FB | 	rdlong	result1, objptr
0d65c     52 00 00 FF 
0d660     60 64 86 F1 | 	sub	objptr, ##42080
0d664     E7 F0 03 F6 | 	mov	ptra, fp
0d668     F2 00 A0 FD | 	call	#popregs_
0d66c                 | _execute_line_ret
0d66c     2D 00 64 FD | 	ret
0d670                 | 
0d670                 | ' 
0d670                 | ' 
0d670                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d670                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d670                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d670                 | ' 
0d670                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d670                 | ' 
0d670                 | ' function pop() as expr_result
0d670                 | _pop
0d670                 | ' if stackpointer=0 then
0d670     44 00 00 FF 
0d674     FC 65 06 F1 | 	add	objptr, ##35324
0d678     32 7B 0A FB | 	rdlong	result1, objptr wz
0d67c     44 00 00 FF 
0d680     FC 65 86 F1 | 	sub	objptr, ##35324
0d684     FF 84 06 A6 |  if_e	mov	_var03, #255
0d688     18 80 06 A6 |  if_e	mov	_var01, #24
0d68c     60 00 90 AD |  if_e	jmp	#LR__1090
0d690     44 00 00 FF 
0d694     FC 65 06 F1 | 	add	objptr, ##35324
0d698     32 7B 02 FB | 	rdlong	result1, objptr
0d69c     01 7A 86 F1 | 	sub	result1, #1
0d6a0     32 7B 62 FC | 	wrlong	result1, objptr
0d6a4     3D 7F 02 F6 | 	mov	result3, result1
0d6a8     01 7E 66 F0 | 	shl	result3, #1
0d6ac     3D 7F 02 F1 | 	add	result3, result1
0d6b0     02 7E 66 F0 | 	shl	result3, #2
0d6b4     0C 00 00 FF 
0d6b8     0C 64 86 F1 | 	sub	objptr, ##6156
0d6bc     32 7F 02 F1 | 	add	result3, objptr
0d6c0     3F 81 02 FB | 	rdlong	_var01, result3
0d6c4     04 7E 06 F1 | 	add	result3, #4
0d6c8     3F 83 02 FB | 	rdlong	_var02, result3
0d6cc     3D 7D 02 F6 | 	mov	result2, result1
0d6d0     01 7C 66 F0 | 	shl	result2, #1
0d6d4     3D 7D 02 F1 | 	add	result2, result1
0d6d8     02 7C 66 F0 | 	shl	result2, #2
0d6dc     32 7D 02 F1 | 	add	result2, objptr
0d6e0     08 7C 06 F1 | 	add	result2, #8
0d6e4     3E 85 02 FB | 	rdlong	_var03, result2
0d6e8     38 00 00 FF 
0d6ec     F0 65 86 F1 | 	sub	objptr, ##29168
0d6f0                 | LR__1090
0d6f0                 | ' return t1
0d6f0     41 7D 02 F6 | 	mov	result2, _var02
0d6f4     42 7F 02 F6 | 	mov	result3, _var03
0d6f8     40 7B 02 F6 | 	mov	result1, _var01
0d6fc                 | _pop_ret
0d6fc     2D 00 64 FD | 	ret
0d700                 | 
0d700                 | ' 
0d700                 | ' sub push(t1 as expr_result )
0d700                 | _push
0d700                 | ' if stackpointer<maxstack then 
0d700     44 00 00 FF 
0d704     FC 65 06 F1 | 	add	objptr, ##35324
0d708     32 81 02 FB | 	rdlong	_var01, objptr
0d70c     44 00 00 FF 
0d710     FC 65 86 F1 | 	sub	objptr, ##35324
0d714     01 00 00 FF 
0d718     00 80 56 F2 | 	cmps	_var01, ##512 wc
0d71c     BC 00 90 3D |  if_ae	jmp	#LR__1100
0d720     49 81 02 FB | 	rdlong	_var01, arg01
0d724     04 92 06 F1 | 	add	arg01, #4
0d728     49 83 02 FB | 	rdlong	_var02, arg01
0d72c     04 92 06 F1 | 	add	arg01, #4
0d730     49 93 02 FB | 	rdlong	arg01, arg01
0d734     44 00 00 FF 
0d738     FC 65 06 F1 | 	add	objptr, ##35324
0d73c     32 85 02 FB | 	rdlong	_var03, objptr
0d740     42 87 02 F6 | 	mov	_var04, _var03
0d744     01 86 66 F0 | 	shl	_var04, #1
0d748     42 87 02 F1 | 	add	_var04, _var03
0d74c     02 86 66 F0 | 	shl	_var04, #2
0d750     0C 00 00 FF 
0d754     0C 64 86 F1 | 	sub	objptr, ##6156
0d758     32 87 02 F1 | 	add	_var04, objptr
0d75c     43 81 62 FC | 	wrlong	_var01, _var04
0d760     0C 00 00 FF 
0d764     0C 64 06 F1 | 	add	objptr, ##6156
0d768     32 87 02 FB | 	rdlong	_var04, objptr
0d76c     43 85 02 F6 | 	mov	_var03, _var04
0d770     01 84 66 F0 | 	shl	_var03, #1
0d774     43 85 02 F1 | 	add	_var03, _var04
0d778     02 84 66 F0 | 	shl	_var03, #2
0d77c     0C 00 00 FF 
0d780     0C 64 86 F1 | 	sub	objptr, ##6156
0d784     32 85 02 F1 | 	add	_var03, objptr
0d788     04 84 06 F1 | 	add	_var03, #4
0d78c     42 83 62 FC | 	wrlong	_var02, _var03
0d790     0C 00 00 FF 
0d794     0C 64 06 F1 | 	add	objptr, ##6156
0d798     32 87 02 FB | 	rdlong	_var04, objptr
0d79c     43 85 02 F6 | 	mov	_var03, _var04
0d7a0     01 84 66 F0 | 	shl	_var03, #1
0d7a4     43 85 02 F1 | 	add	_var03, _var04
0d7a8     02 84 66 F0 | 	shl	_var03, #2
0d7ac     0C 00 00 FF 
0d7b0     0C 64 86 F1 | 	sub	objptr, ##6156
0d7b4     32 85 02 F1 | 	add	_var03, objptr
0d7b8     08 84 06 F1 | 	add	_var03, #8
0d7bc     42 93 62 FC | 	wrlong	arg01, _var03
0d7c0     0C 00 00 FF 
0d7c4     0C 64 06 F1 | 	add	objptr, ##6156
0d7c8     32 81 02 FB | 	rdlong	_var01, objptr
0d7cc     01 80 06 F1 | 	add	_var01, #1
0d7d0     32 81 62 FC | 	wrlong	_var01, objptr
0d7d4     44 00 00 FF 
0d7d8     FC 65 86 F1 | 	sub	objptr, ##35324
0d7dc                 | LR__1100
0d7dc                 | _push_ret
0d7dc     2D 00 64 FD | 	ret
0d7e0                 | 
0d7e0                 | ' 
0d7e0                 | ' ' -------------------------------- Runtime converting functions
0d7e0                 | ' 
0d7e0                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d7e0                 | ' 
0d7e0                 | ' function  convertstring(psaddr as ulong) as string
0d7e0                 | _convertstring
0d7e0     04 CA 05 F6 | 	mov	COUNT_, #4
0d7e4     E8 00 A0 FD | 	call	#pushregs_
0d7e8     49 A7 02 F6 | 	mov	local01, arg01
0d7ec     70 34 B1 FD | 	call	#_pslpeek
0d7f0     3D A9 02 F6 | 	mov	local02, result1
0d7f4     95 01 00 FF 
0d7f8     63 AA 06 F6 | 	mov	local03, ##@LR__5932
0d7fc                 | ' l=pslpeek(psaddr) 
0d7fc                 | ' s="" 
0d7fc                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d7fc     01 AC 06 F6 | 	mov	local04, #1
0d800     01 A8 06 F1 | 	add	local02, #1
0d804                 | LR__1110
0d804     54 AD 52 F2 | 	cmps	local04, local02 wc
0d808     30 00 90 3D |  if_ae	jmp	#LR__1111
0d80c     53 93 02 F6 | 	mov	arg01, local01
0d810     03 92 06 F1 | 	add	arg01, #3
0d814     56 93 02 F1 | 	add	arg01, local04
0d818     F8 33 B1 FD | 	call	#_pspeek
0d81c     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
0d820     D8 89 B1 FD | 	call	#__system__Chr_S
0d824     3D 95 02 F6 | 	mov	arg02, result1
0d828     55 93 02 F6 | 	mov	arg01, local03
0d82c     BC 6F B1 FD | 	call	#__system___string_concat
0d830     3D AB 02 F6 | 	mov	local03, result1
0d834     01 AC 06 F1 | 	add	local04, #1
0d838     C8 FF 9F FD | 	jmp	#LR__1110
0d83c                 | LR__1111
0d83c                 | ' return s
0d83c     55 7B 02 F6 | 	mov	result1, local03
0d840     E7 F0 03 F6 | 	mov	ptra, fp
0d844     F2 00 A0 FD | 	call	#popregs_
0d848                 | _convertstring_ret
0d848     2D 00 64 FD | 	ret
0d84c                 | 
0d84c                 | ' 
0d84c                 | ' ' converts a variable to an integer
0d84c                 | ' 
0d84c                 | ' function converttoint (t1 as expr_result) as integer 
0d84c                 | _converttoint
0d84c     02 CA 05 F6 | 	mov	COUNT_, #2
0d850     E8 00 A0 FD | 	call	#pushregs_
0d854     49 A7 02 F6 | 	mov	local01, arg01
0d858                 | ' 
0d858                 | ' select case t1.result_type
0d858     08 A6 06 F1 | 	add	local01, #8
0d85c     53 A9 02 FB | 	rdlong	local02, local01
0d860     08 A6 86 F1 | 	sub	local01, #8
0d864     1C A8 0E F2 | 	cmp	local02, #28 wz
0d868     2C 00 90 AD |  if_e	jmp	#LR__1120
0d86c     1D A8 0E F2 | 	cmp	local02, #29 wz
0d870     2C 00 90 AD |  if_e	jmp	#LR__1121
0d874     1E A8 0E F2 | 	cmp	local02, #30 wz
0d878     2C 00 90 AD |  if_e	jmp	#LR__1122
0d87c     1F A8 0E F2 | 	cmp	local02, #31 wz
0d880     34 00 90 AD |  if_e	jmp	#LR__1123
0d884     2B A8 0E F2 | 	cmp	local02, #43 wz
0d888     44 00 90 AD |  if_e	jmp	#LR__1124
0d88c     2C A8 0E F2 | 	cmp	local02, #44 wz
0d890     5C 00 90 AD |  if_e	jmp	#LR__1125
0d894     60 00 90 FD | 	jmp	#LR__1126
0d898                 | LR__1120
0d898     53 7B 02 FB | 	rdlong	result1, local01
0d89c     5C 00 90 FD | 	jmp	#LR__1127
0d8a0                 | LR__1121
0d8a0     53 7B 02 FB | 	rdlong	result1, local01
0d8a4     54 00 90 FD | 	jmp	#LR__1127
0d8a8                 | LR__1122
0d8a8     53 93 02 FB | 	rdlong	arg01, local01
0d8ac     01 94 06 F6 | 	mov	arg02, #1
0d8b0     74 9A B1 FD | 	call	#__system___float_tointeger
0d8b4     44 00 90 FD | 	jmp	#LR__1127
0d8b8                 | LR__1123
0d8b8     53 93 02 FB | 	rdlong	arg01, local01
0d8bc     BC 9D B1 FD | 	call	#__system____builtin_atof
0d8c0     3D 93 02 F6 | 	mov	arg01, result1
0d8c4     01 94 06 F6 | 	mov	arg02, #1
0d8c8     5C 9A B1 FD | 	call	#__system___float_tointeger
0d8cc     2C 00 90 FD | 	jmp	#LR__1127
0d8d0                 | LR__1124
0d8d0     53 93 02 FB | 	rdlong	arg01, local01
0d8d4     08 FF BF FD | 	call	#_convertstring
0d8d8     3D 93 02 F6 | 	mov	arg01, result1
0d8dc     9C 9D B1 FD | 	call	#__system____builtin_atof
0d8e0     3D 93 02 F6 | 	mov	arg01, result1
0d8e4     01 94 06 F6 | 	mov	arg02, #1
0d8e8     3C 9A B1 FD | 	call	#__system___float_tointeger
0d8ec     0C 00 90 FD | 	jmp	#LR__1127
0d8f0                 | LR__1125
0d8f0     53 7B 02 FB | 	rdlong	result1, local01
0d8f4     04 00 90 FD | 	jmp	#LR__1127
0d8f8                 | LR__1126
0d8f8     00 7A 06 F6 | 	mov	result1, #0
0d8fc                 | LR__1127
0d8fc     E7 F0 03 F6 | 	mov	ptra, fp
0d900     F2 00 A0 FD | 	call	#popregs_
0d904                 | _converttoint_ret
0d904     2D 00 64 FD | 	ret
0d908                 | 
0d908                 | ' 
0d908                 | ' ' converts a variable to float
0d908                 | ' 
0d908                 | ' function converttofloat (t1 as expr_result) as single
0d908                 | _converttofloat
0d908     03 CA 05 F6 | 	mov	COUNT_, #3
0d90c     E8 00 A0 FD | 	call	#pushregs_
0d910     49 A7 02 F6 | 	mov	local01, arg01
0d914                 | ' 
0d914                 | ' select case t1.result_type
0d914     08 A6 06 F1 | 	add	local01, #8
0d918     53 A9 02 FB | 	rdlong	local02, local01
0d91c     08 A6 86 F1 | 	sub	local01, #8
0d920     1C A8 0E F2 | 	cmp	local02, #28 wz
0d924     24 00 90 AD |  if_e	jmp	#LR__1130
0d928     1D A8 0E F2 | 	cmp	local02, #29 wz
0d92c     38 00 90 AD |  if_e	jmp	#LR__1131
0d930     1E A8 0E F2 | 	cmp	local02, #30 wz
0d934     3C 00 90 AD |  if_e	jmp	#LR__1132
0d938     1F A8 0E F2 | 	cmp	local02, #31 wz
0d93c     3C 00 90 AD |  if_e	jmp	#LR__1133
0d940     2B A8 0E F2 | 	cmp	local02, #43 wz
0d944     40 00 90 AD |  if_e	jmp	#LR__1134
0d948     50 00 90 FD | 	jmp	#LR__1135
0d94c                 | LR__1130
0d94c     53 93 02 FB | 	rdlong	arg01, local01
0d950     49 93 52 F6 | 	abs	arg01, arg01 wc
0d954     1F AA C6 C9 |  if_b	decod	local03, #31
0d958     00 AA 06 36 |  if_ae	mov	local03, #0
0d95c     FC 90 B1 FD | 	call	#__system___float_fromuns
0d960     55 7B 62 F5 | 	xor	result1, local03
0d964     38 00 90 FD | 	jmp	#LR__1136
0d968                 | LR__1131
0d968     53 93 02 FB | 	rdlong	arg01, local01
0d96c     EC 90 B1 FD | 	call	#__system___float_fromuns
0d970     2C 00 90 FD | 	jmp	#LR__1136
0d974                 | LR__1132
0d974     53 7B 02 FB | 	rdlong	result1, local01
0d978     24 00 90 FD | 	jmp	#LR__1136
0d97c                 | LR__1133
0d97c     53 93 02 FB | 	rdlong	arg01, local01
0d980     F8 9C B1 FD | 	call	#__system____builtin_atof
0d984     18 00 90 FD | 	jmp	#LR__1136
0d988                 | LR__1134
0d988     53 93 02 FB | 	rdlong	arg01, local01
0d98c     50 FE BF FD | 	call	#_convertstring
0d990     3D 93 02 F6 | 	mov	arg01, result1
0d994     E4 9C B1 FD | 	call	#__system____builtin_atof
0d998     04 00 90 FD | 	jmp	#LR__1136
0d99c                 | LR__1135
0d99c     00 7A 06 F6 | 	mov	result1, #0
0d9a0                 | LR__1136
0d9a0     E7 F0 03 F6 | 	mov	ptra, fp
0d9a4     F2 00 A0 FD | 	call	#popregs_
0d9a8                 | _converttofloat_ret
0d9a8     2D 00 64 FD | 	ret
0d9ac                 | 
0d9ac                 | ' 
0d9ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9ac                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d9ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9ac                 | ' 
0d9ac                 | ' 
0d9ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9ac                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d9ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9ac                 | ' 
0d9ac                 | ' '-------------------- abs
0d9ac                 | ' 
0d9ac                 | ' sub do_abs
0d9ac                 | _do_abs
0d9ac     01 CA 05 F6 | 	mov	COUNT_, #1
0d9b0     E8 00 A0 FD | 	call	#pushregs_
0d9b4     0C F0 07 F1 | 	add	ptra, #12
0d9b8     B4 FC BF FD | 	call	#_pop
0d9bc     3F A7 02 F6 | 	mov	local01, result3
0d9c0     E7 7A 62 FC | 	wrlong	result1, fp
0d9c4     04 CE 05 F1 | 	add	fp, #4
0d9c8     E7 7C 62 FC | 	wrlong	result2, fp
0d9cc     04 CE 05 F1 | 	add	fp, #4
0d9d0     E7 A6 62 FC | 	wrlong	local01, fp
0d9d4                 | ' 
0d9d4                 | ' t1=pop()
0d9d4                 | ' if t1.result_type=result_int then 
0d9d4     08 CE 85 F1 | 	sub	fp, #8
0d9d8     1C A6 0E F2 | 	cmp	local01, #28 wz
0d9dc     E7 92 02 AB |  if_e	rdlong	arg01, fp
0d9e0     49 A7 42 A6 |  if_e	abs	local01, arg01
0d9e4     E7 A6 62 AC |  if_e	wrlong	local01, fp
0d9e8     2C 00 90 AD |  if_e	jmp	#LR__1140
0d9ec     08 CE 05 F1 | 	add	fp, #8
0d9f0     E7 A6 02 FB | 	rdlong	local01, fp
0d9f4     08 CE 85 F1 | 	sub	fp, #8
0d9f8     1E A6 0E F2 | 	cmp	local01, #30 wz
0d9fc     E7 7A 02 AB |  if_e	rdlong	result1, fp
0da00     1F 7A 06 A4 |  if_e	bitl	result1, #31
0da04     E7 7A 62 AC |  if_e	wrlong	result1, fp
0da08     08 CE 05 51 |  if_ne	add	fp, #8
0da0c     E7 FE 69 5C |  if_ne	wrlong	#255, fp
0da10     08 CE 85 51 |  if_ne	sub	fp, #8
0da14     E7 50 68 5C |  if_ne	wrlong	#40, fp
0da18                 | LR__1140
0da18     E7 92 02 F6 | 	mov	arg01, fp
0da1c     E0 FC BF FD | 	call	#_push
0da20     E7 F0 03 F6 | 	mov	ptra, fp
0da24     F2 00 A0 FD | 	call	#popregs_
0da28                 | _do_abs_ret
0da28     2D 00 64 FD | 	ret
0da2c                 | 
0da2c                 | ' 
0da2c                 | ' '-------------------- acos
0da2c                 | ' 
0da2c                 | ' sub do_acos
0da2c                 | _do_acos
0da2c     00 CA 05 F6 | 	mov	COUNT_, #0
0da30     E8 00 A0 FD | 	call	#pushregs_
0da34     10 F0 07 F1 | 	add	ptra, #16
0da38     4C 00 00 FF 
0da3c     24 64 06 F1 | 	add	objptr, ##38948
0da40     32 97 02 FB | 	rdlong	arg03, objptr
0da44     4B 95 02 F6 | 	mov	arg02, arg03
0da48     01 94 66 F0 | 	shl	arg02, #1
0da4c     4B 95 02 F1 | 	add	arg02, arg03
0da50     02 94 66 F0 | 	shl	arg02, #2
0da54     03 00 00 FF 
0da58     04 64 86 F1 | 	sub	objptr, ##1540
0da5c     32 95 02 F1 | 	add	arg02, objptr
0da60     4A 97 02 FB | 	rdlong	arg03, arg02
0da64                 | ' 
0da64                 | ' numpar=compiledline(lineptr_e).result.uresult
0da64                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0da64     02 96 16 F2 | 	cmp	arg03, #2 wc
0da68     49 00 00 FF 
0da6c     20 64 86 F1 | 	sub	objptr, ##37408
0da70     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0da74     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0da78     00 92 06 F6 | 	mov	arg01, #0
0da7c     94 C2 B1 FD | 	call	#__system___getiolock_0622
0da80     3D 93 02 F6 | 	mov	arg01, result1
0da84     08 6D B1 FD | 	call	#__system___lockmem
0da88     95 01 00 FF 
0da8c     64 94 06 F6 | 	mov	arg02, ##@LR__5933
0da90     00 92 06 F6 | 	mov	arg01, #0
0da94     00 96 06 F6 | 	mov	arg03, #0
0da98     E8 79 B1 FD | 	call	#__system___basic_print_string
0da9c     00 92 06 F6 | 	mov	arg01, #0
0daa0     70 C2 B1 FD | 	call	#__system___getiolock_0622
0daa4     3D 01 68 FC | 	wrlong	#0, result1
0daa8     27 92 06 F6 | 	mov	arg01, #39
0daac     00 94 06 F6 | 	mov	arg02, #0
0dab0     E4 2E B1 FD | 	call	#_printerror
0dab4     64 00 90 FD | 	jmp	#LR__1151
0dab8                 | LR__1150
0dab8     B4 FB BF FD | 	call	#_pop
0dabc     3F 97 02 F6 | 	mov	arg03, result3
0dac0     E7 7A 62 FC | 	wrlong	result1, fp
0dac4     04 CE 05 F1 | 	add	fp, #4
0dac8     E7 7C 62 FC | 	wrlong	result2, fp
0dacc     04 CE 05 F1 | 	add	fp, #4
0dad0     E7 96 62 FC | 	wrlong	arg03, fp
0dad4     08 CE 85 F1 | 	sub	fp, #8
0dad8     E7 92 02 F6 | 	mov	arg01, fp
0dadc     28 FE BF FD | 	call	#_converttofloat
0dae0     3D 93 02 F6 | 	mov	arg01, result1
0dae4     C8 9E B1 FD | 	call	#__system____builtin_acosf
0dae8     3D 93 02 F6 | 	mov	arg01, result1
0daec     54 00 00 FF 
0daf0     88 64 06 F1 | 	add	objptr, ##43144
0daf4     32 95 02 FB | 	rdlong	arg02, objptr
0daf8     54 00 00 FF 
0dafc     88 64 86 F1 | 	sub	objptr, ##43144
0db00     5C 93 B1 FD | 	call	#__system___float_mul
0db04     E7 7A 62 FC | 	wrlong	result1, fp
0db08     08 CE 05 F1 | 	add	fp, #8
0db0c     E7 3C 68 FC | 	wrlong	#30, fp
0db10     08 CE 85 F1 | 	sub	fp, #8
0db14     E7 92 02 F6 | 	mov	arg01, fp
0db18     E4 FB BF FD | 	call	#_push
0db1c                 | LR__1151
0db1c     E7 F0 03 F6 | 	mov	ptra, fp
0db20     F2 00 A0 FD | 	call	#popregs_
0db24                 | _do_acos_ret
0db24     2D 00 64 FD | 	ret
0db28                 | 
0db28                 | ' 
0db28                 | ' '-------------------- asc
0db28                 | ' 
0db28                 | ' sub do_asc
0db28                 | _do_asc
0db28     00 CA 05 F6 | 	mov	COUNT_, #0
0db2c     E8 00 A0 FD | 	call	#pushregs_
0db30     14 F0 07 F1 | 	add	ptra, #20
0db34     4C 00 00 FF 
0db38     24 64 06 F1 | 	add	objptr, ##38948
0db3c     32 97 02 FB | 	rdlong	arg03, objptr
0db40     4B 95 02 F6 | 	mov	arg02, arg03
0db44     01 94 66 F0 | 	shl	arg02, #1
0db48     4B 95 02 F1 | 	add	arg02, arg03
0db4c     02 94 66 F0 | 	shl	arg02, #2
0db50     03 00 00 FF 
0db54     04 64 86 F1 | 	sub	objptr, ##1540
0db58     32 95 02 F1 | 	add	arg02, objptr
0db5c     4A 97 02 FB | 	rdlong	arg03, arg02
0db60                 | ' 
0db60                 | ' numpar=compiledline(lineptr_e).result.uresult
0db60                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0db60     02 96 16 F2 | 	cmp	arg03, #2 wc
0db64     49 00 00 FF 
0db68     20 64 86 F1 | 	sub	objptr, ##37408
0db6c     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0db70     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0db74     00 92 06 F6 | 	mov	arg01, #0
0db78     98 C1 B1 FD | 	call	#__system___getiolock_0622
0db7c     3D 93 02 F6 | 	mov	arg01, result1
0db80     0C 6C B1 FD | 	call	#__system___lockmem
0db84     95 01 00 FF 
0db88     6B 94 06 F6 | 	mov	arg02, ##@LR__5934
0db8c     00 92 06 F6 | 	mov	arg01, #0
0db90     00 96 06 F6 | 	mov	arg03, #0
0db94     EC 78 B1 FD | 	call	#__system___basic_print_string
0db98     00 92 06 F6 | 	mov	arg01, #0
0db9c     74 C1 B1 FD | 	call	#__system___getiolock_0622
0dba0     3D 01 68 FC | 	wrlong	#0, result1
0dba4     27 92 06 F6 | 	mov	arg01, #39
0dba8     00 94 06 F6 | 	mov	arg02, #0
0dbac     E8 2D B1 FD | 	call	#_printerror
0dbb0     B4 00 90 FD | 	jmp	#LR__1163
0dbb4                 | LR__1160
0dbb4     B8 FA BF FD | 	call	#_pop
0dbb8     3F 97 02 F6 | 	mov	arg03, result3
0dbbc     E7 7A 62 FC | 	wrlong	result1, fp
0dbc0     04 CE 05 F1 | 	add	fp, #4
0dbc4     E7 7C 62 FC | 	wrlong	result2, fp
0dbc8     04 CE 05 F1 | 	add	fp, #4
0dbcc     E7 96 62 FC | 	wrlong	arg03, fp
0dbd0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0dbd0     08 CE 85 F1 | 	sub	fp, #8
0dbd4     2B 96 0E F2 | 	cmp	arg03, #43 wz
0dbd8     18 00 90 5D |  if_ne	jmp	#LR__1161
0dbdc     E7 92 02 FB | 	rdlong	arg01, fp
0dbe0     FC FB BF FD | 	call	#_convertstring
0dbe4     E7 7A 62 FC | 	wrlong	result1, fp
0dbe8     08 CE 05 F1 | 	add	fp, #8
0dbec     E7 3E 68 FC | 	wrlong	#31, fp
0dbf0     08 CE 85 F1 | 	sub	fp, #8
0dbf4                 | LR__1161
0dbf4                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0dbf4     08 CE 05 F1 | 	add	fp, #8
0dbf8     E7 96 02 FB | 	rdlong	arg03, fp
0dbfc     08 CE 85 F1 | 	sub	fp, #8
0dc00     1F 96 0E F2 | 	cmp	arg03, #31 wz
0dc04     40 00 90 AD |  if_e	jmp	#LR__1162
0dc08     00 92 06 F6 | 	mov	arg01, #0
0dc0c     04 C1 B1 FD | 	call	#__system___getiolock_0622
0dc10     3D 93 02 F6 | 	mov	arg01, result1
0dc14     78 6B B1 FD | 	call	#__system___lockmem
0dc18     95 01 00 FF 
0dc1c     71 94 06 F6 | 	mov	arg02, ##@LR__5935
0dc20     00 92 06 F6 | 	mov	arg01, #0
0dc24     00 96 06 F6 | 	mov	arg03, #0
0dc28     58 78 B1 FD | 	call	#__system___basic_print_string
0dc2c     00 92 06 F6 | 	mov	arg01, #0
0dc30     E0 C0 B1 FD | 	call	#__system___getiolock_0622
0dc34     3D 01 68 FC | 	wrlong	#0, result1
0dc38     0F 92 06 F6 | 	mov	arg01, #15
0dc3c     00 94 06 F6 | 	mov	arg02, #0
0dc40     54 2D B1 FD | 	call	#_printerror
0dc44     20 00 90 FD | 	jmp	#LR__1163
0dc48                 | LR__1162
0dc48     E7 7C 02 FB | 	rdlong	result2, fp
0dc4c     3E 7D C2 FA | 	rdbyte	result2, result2
0dc50     E7 7C 62 FC | 	wrlong	result2, fp
0dc54     08 CE 05 F1 | 	add	fp, #8
0dc58     E7 38 68 FC | 	wrlong	#28, fp
0dc5c     08 CE 85 F1 | 	sub	fp, #8
0dc60     E7 92 02 F6 | 	mov	arg01, fp
0dc64     98 FA BF FD | 	call	#_push
0dc68                 | LR__1163
0dc68     E7 F0 03 F6 | 	mov	ptra, fp
0dc6c     F2 00 A0 FD | 	call	#popregs_
0dc70                 | _do_asc_ret
0dc70     2D 00 64 FD | 	ret
0dc74                 | 
0dc74                 | ' 
0dc74                 | ' '-------------------- asin
0dc74                 | ' 
0dc74                 | ' sub do_asin
0dc74                 | _do_asin
0dc74     00 CA 05 F6 | 	mov	COUNT_, #0
0dc78     E8 00 A0 FD | 	call	#pushregs_
0dc7c     10 F0 07 F1 | 	add	ptra, #16
0dc80     4C 00 00 FF 
0dc84     24 64 06 F1 | 	add	objptr, ##38948
0dc88     32 97 02 FB | 	rdlong	arg03, objptr
0dc8c     4B 95 02 F6 | 	mov	arg02, arg03
0dc90     01 94 66 F0 | 	shl	arg02, #1
0dc94     4B 95 02 F1 | 	add	arg02, arg03
0dc98     02 94 66 F0 | 	shl	arg02, #2
0dc9c     03 00 00 FF 
0dca0     04 64 86 F1 | 	sub	objptr, ##1540
0dca4     32 95 02 F1 | 	add	arg02, objptr
0dca8     4A 97 02 FB | 	rdlong	arg03, arg02
0dcac                 | ' 
0dcac                 | ' numpar=compiledline(lineptr_e).result.uresult
0dcac                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0dcac     02 96 16 F2 | 	cmp	arg03, #2 wc
0dcb0     49 00 00 FF 
0dcb4     20 64 86 F1 | 	sub	objptr, ##37408
0dcb8     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0dcbc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0dcc0     00 92 06 F6 | 	mov	arg01, #0
0dcc4     4C C0 B1 FD | 	call	#__system___getiolock_0622
0dcc8     3D 93 02 F6 | 	mov	arg01, result1
0dccc     C0 6A B1 FD | 	call	#__system___lockmem
0dcd0     95 01 00 FF 
0dcd4     77 94 06 F6 | 	mov	arg02, ##@LR__5936
0dcd8     00 92 06 F6 | 	mov	arg01, #0
0dcdc     00 96 06 F6 | 	mov	arg03, #0
0dce0     A0 77 B1 FD | 	call	#__system___basic_print_string
0dce4     00 92 06 F6 | 	mov	arg01, #0
0dce8     28 C0 B1 FD | 	call	#__system___getiolock_0622
0dcec     3D 01 68 FC | 	wrlong	#0, result1
0dcf0     27 92 06 F6 | 	mov	arg01, #39
0dcf4     00 94 06 F6 | 	mov	arg02, #0
0dcf8     9C 2C B1 FD | 	call	#_printerror
0dcfc     64 00 90 FD | 	jmp	#LR__1171
0dd00                 | LR__1170
0dd00     6C F9 BF FD | 	call	#_pop
0dd04     3F 97 02 F6 | 	mov	arg03, result3
0dd08     E7 7A 62 FC | 	wrlong	result1, fp
0dd0c     04 CE 05 F1 | 	add	fp, #4
0dd10     E7 7C 62 FC | 	wrlong	result2, fp
0dd14     04 CE 05 F1 | 	add	fp, #4
0dd18     E7 96 62 FC | 	wrlong	arg03, fp
0dd1c     08 CE 85 F1 | 	sub	fp, #8
0dd20     E7 92 02 F6 | 	mov	arg01, fp
0dd24     E0 FB BF FD | 	call	#_converttofloat
0dd28     3D 93 02 F6 | 	mov	arg01, result1
0dd2c     34 9C B1 FD | 	call	#__system____builtin_asinf
0dd30     3D 93 02 F6 | 	mov	arg01, result1
0dd34     54 00 00 FF 
0dd38     88 64 06 F1 | 	add	objptr, ##43144
0dd3c     32 95 02 FB | 	rdlong	arg02, objptr
0dd40     54 00 00 FF 
0dd44     88 64 86 F1 | 	sub	objptr, ##43144
0dd48     14 91 B1 FD | 	call	#__system___float_mul
0dd4c     E7 7A 62 FC | 	wrlong	result1, fp
0dd50     08 CE 05 F1 | 	add	fp, #8
0dd54     E7 3C 68 FC | 	wrlong	#30, fp
0dd58     08 CE 85 F1 | 	sub	fp, #8
0dd5c     E7 92 02 F6 | 	mov	arg01, fp
0dd60     9C F9 BF FD | 	call	#_push
0dd64                 | LR__1171
0dd64     E7 F0 03 F6 | 	mov	ptra, fp
0dd68     F2 00 A0 FD | 	call	#popregs_
0dd6c                 | _do_asin_ret
0dd6c     2D 00 64 FD | 	ret
0dd70                 | 
0dd70                 | ' 
0dd70                 | ' '-------------------- atn
0dd70                 | ' 
0dd70                 | ' sub do_atn
0dd70                 | _do_atn
0dd70     00 CA 05 F6 | 	mov	COUNT_, #0
0dd74     E8 00 A0 FD | 	call	#pushregs_
0dd78     10 F0 07 F1 | 	add	ptra, #16
0dd7c     4C 00 00 FF 
0dd80     24 64 06 F1 | 	add	objptr, ##38948
0dd84     32 97 02 FB | 	rdlong	arg03, objptr
0dd88     4B 95 02 F6 | 	mov	arg02, arg03
0dd8c     01 94 66 F0 | 	shl	arg02, #1
0dd90     4B 95 02 F1 | 	add	arg02, arg03
0dd94     02 94 66 F0 | 	shl	arg02, #2
0dd98     03 00 00 FF 
0dd9c     04 64 86 F1 | 	sub	objptr, ##1540
0dda0     32 95 02 F1 | 	add	arg02, objptr
0dda4     4A 97 02 FB | 	rdlong	arg03, arg02
0dda8                 | ' 
0dda8                 | ' numpar=compiledline(lineptr_e).result.uresult
0dda8                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0dda8     02 96 16 F2 | 	cmp	arg03, #2 wc
0ddac     49 00 00 FF 
0ddb0     20 64 86 F1 | 	sub	objptr, ##37408
0ddb4     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0ddb8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1180
0ddbc     00 92 06 F6 | 	mov	arg01, #0
0ddc0     50 BF B1 FD | 	call	#__system___getiolock_0622
0ddc4     3D 93 02 F6 | 	mov	arg01, result1
0ddc8     C4 69 B1 FD | 	call	#__system___lockmem
0ddcc     95 01 00 FF 
0ddd0     7E 94 06 F6 | 	mov	arg02, ##@LR__5937
0ddd4     00 92 06 F6 | 	mov	arg01, #0
0ddd8     00 96 06 F6 | 	mov	arg03, #0
0dddc     A4 76 B1 FD | 	call	#__system___basic_print_string
0dde0     00 92 06 F6 | 	mov	arg01, #0
0dde4     2C BF B1 FD | 	call	#__system___getiolock_0622
0dde8     3D 01 68 FC | 	wrlong	#0, result1
0ddec     27 92 06 F6 | 	mov	arg01, #39
0ddf0     00 94 06 F6 | 	mov	arg02, #0
0ddf4     A0 2B B1 FD | 	call	#_printerror
0ddf8     6C 00 90 FD | 	jmp	#LR__1181
0ddfc                 | LR__1180
0ddfc     70 F8 BF FD | 	call	#_pop
0de00     3F 97 02 F6 | 	mov	arg03, result3
0de04     E7 7A 62 FC | 	wrlong	result1, fp
0de08     04 CE 05 F1 | 	add	fp, #4
0de0c     E7 7C 62 FC | 	wrlong	result2, fp
0de10     04 CE 05 F1 | 	add	fp, #4
0de14     E7 96 62 FC | 	wrlong	arg03, fp
0de18     08 CE 85 F1 | 	sub	fp, #8
0de1c     E7 92 02 F6 | 	mov	arg01, fp
0de20     E4 FA BF FD | 	call	#_converttofloat
0de24     3D 93 02 F6 | 	mov	arg01, result1
0de28     00 C0 1F FF 
0de2c     00 94 06 F6 | 	mov	arg02, ##1065353216
0de30     C8 9B B1 FD | 	call	#__system____builtin_atan2f
0de34     3D 93 02 F6 | 	mov	arg01, result1
0de38     54 00 00 FF 
0de3c     88 64 06 F1 | 	add	objptr, ##43144
0de40     32 95 02 FB | 	rdlong	arg02, objptr
0de44     54 00 00 FF 
0de48     88 64 86 F1 | 	sub	objptr, ##43144
0de4c     10 90 B1 FD | 	call	#__system___float_mul
0de50     E7 7A 62 FC | 	wrlong	result1, fp
0de54     08 CE 05 F1 | 	add	fp, #8
0de58     E7 3C 68 FC | 	wrlong	#30, fp
0de5c     08 CE 85 F1 | 	sub	fp, #8
0de60     E7 92 02 F6 | 	mov	arg01, fp
0de64     98 F8 BF FD | 	call	#_push
0de68                 | LR__1181
0de68     E7 F0 03 F6 | 	mov	ptra, fp
0de6c     F2 00 A0 FD | 	call	#popregs_
0de70                 | _do_atn_ret
0de70     2D 00 64 FD | 	ret
0de74                 | 
0de74                 | ' 
0de74                 | ' '-------------------- beep
0de74                 | ' 
0de74                 | ' sub do_beep
0de74                 | _do_beep
0de74     02 CA 05 F6 | 	mov	COUNT_, #2
0de78     E8 00 A0 FD | 	call	#pushregs_
0de7c     1C F0 07 F1 | 	add	ptra, #28
0de80     EC F7 BF FD | 	call	#_pop
0de84     3D 9F 02 F6 | 	mov	arg07, result1
0de88     3E 9D 02 F6 | 	mov	arg06, result2
0de8c     3F A7 02 F6 | 	mov	local01, result3
0de90     0C CE 05 F1 | 	add	fp, #12
0de94     E7 9E 62 FC | 	wrlong	arg07, fp
0de98     04 CE 05 F1 | 	add	fp, #4
0de9c     E7 9C 62 FC | 	wrlong	arg06, fp
0dea0     04 CE 05 F1 | 	add	fp, #4
0dea4     E7 A6 62 FC | 	wrlong	local01, fp
0dea8     14 CE 85 F1 | 	sub	fp, #20
0deac     C0 F7 BF FD | 	call	#_pop
0deb0     E7 7A 62 FC | 	wrlong	result1, fp
0deb4     04 CE 05 F1 | 	add	fp, #4
0deb8     E7 7C 62 FC | 	wrlong	result2, fp
0debc     04 CE 05 F1 | 	add	fp, #4
0dec0     E7 7E 62 FC | 	wrlong	result3, fp
0dec4                 | ' 
0dec4                 | ' 
0dec4                 | ' t2=pop()
0dec4                 | ' t1=pop()
0dec4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0dec4     3F 9F 02 F6 | 	mov	arg07, result3
0dec8     08 CE 85 F1 | 	sub	fp, #8
0decc     1C 9E 0E F2 | 	cmp	arg07, #28 wz
0ded0     08 CE 05 51 |  if_ne	add	fp, #8
0ded4     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0ded8     08 CE 85 51 |  if_ne	sub	fp, #8
0dedc     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0dee0     E7 A8 02 AB |  if_e	rdlong	local02, fp
0dee4     0C 00 90 AD |  if_e	jmp	#LR__1190
0dee8     E7 92 02 F6 | 	mov	arg01, fp
0deec     5C F9 BF FD | 	call	#_converttoint
0def0     3D A9 02 F6 | 	mov	local02, result1
0def4                 | LR__1190
0def4     32 95 02 F6 | 	mov	arg02, objptr
0def8     16 00 00 FF 
0defc     98 94 06 F1 | 	add	arg02, ##11416
0df00     07 92 06 F6 | 	mov	arg01, #7
0df04     54 97 02 F6 | 	mov	arg03, local02
0df08     0C 98 C6 F9 | 	decod	arg04, #12
0df0c     08 9A 06 F6 | 	mov	arg05, #8
0df10     00 9C 06 F6 | 	mov	arg06, #0
0df14     00 9E 06 F6 | 	mov	arg07, #0
0df18     0B 00 00 FF 
0df1c     CC 64 06 F1 | 	add	objptr, ##5836
0df20     CC 64 B1 FD | 	call	#_Audio2_004_spin2_beep
0df24     0B 00 00 FF 
0df28     CC 64 86 F1 | 	sub	objptr, ##5836
0df2c     E7 92 02 F6 | 	mov	arg01, fp
0df30     0C 92 06 F1 | 	add	arg01, #12
0df34     C8 F7 BF FD | 	call	#_push
0df38     40 D1 B0 FD | 	call	#_do_waitms
0df3c     0B 00 00 FF 
0df40     CC 64 06 F1 | 	add	objptr, ##5836
0df44                 | ' 
0df44                 | ' base2:=@channel0[0]+64*channel
0df44     32 A9 02 F6 | 	mov	local02, objptr
0df48                 | ' word[base2+32]:=0
0df48     EC A9 06 F1 | 	add	local02, #492
0df4c     54 01 58 FC | 	wrword	#0, local02
0df50     0B 00 00 FF 
0df54     CC 64 86 F1 | 	sub	objptr, ##5836
0df58     E7 F0 03 F6 | 	mov	ptra, fp
0df5c     F2 00 A0 FD | 	call	#popregs_
0df60                 | _do_beep_ret
0df60     2D 00 64 FD | 	ret
0df64                 | 
0df64                 | ' 
0df64                 | ' '-------------------- blit
0df64                 | ' 
0df64                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0df64                 | ' sub do_blit
0df64                 | _do_blit
0df64     03 CA 05 F6 | 	mov	COUNT_, #3
0df68     E8 00 A0 FD | 	call	#pushregs_
0df6c     3C F0 07 F1 | 	add	ptra, #60
0df70     4C 00 00 FF 
0df74     24 64 06 F1 | 	add	objptr, ##38948
0df78     32 A5 02 FB | 	rdlong	arg10, objptr
0df7c     52 A3 02 F6 | 	mov	arg09, arg10
0df80     01 A2 66 F0 | 	shl	arg09, #1
0df84     52 A3 02 F1 | 	add	arg09, arg10
0df88     02 A2 66 F0 | 	shl	arg09, #2
0df8c     03 00 00 FF 
0df90     04 64 86 F1 | 	sub	objptr, ##1540
0df94     32 A3 02 F1 | 	add	arg09, objptr
0df98     51 A7 02 FB | 	rdlong	local01, arg09
0df9c                 | ' 
0df9c                 | ' numpar=compiledline(lineptr_e).result.uresult
0df9c                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0df9c     0A A6 0E F2 | 	cmp	local01, #10 wz
0dfa0     49 00 00 FF 
0dfa4     20 64 86 F1 | 	sub	objptr, ##37408
0dfa8     06 A6 0E 52 |  if_ne	cmp	local01, #6 wz
0dfac     50 00 90 AD |  if_e	jmp	#LR__1200
0dfb0     00 92 06 F6 | 	mov	arg01, #0
0dfb4     5C BD B1 FD | 	call	#__system___getiolock_0622
0dfb8     3D 93 02 F6 | 	mov	arg01, result1
0dfbc     D0 67 B1 FD | 	call	#__system___lockmem
0dfc0     95 01 00 FF 
0dfc4     84 94 06 F6 | 	mov	arg02, ##@LR__5938
0dfc8     00 92 06 F6 | 	mov	arg01, #0
0dfcc     00 96 06 F6 | 	mov	arg03, #0
0dfd0     B0 74 B1 FD | 	call	#__system___basic_print_string
0dfd4     00 92 06 F6 | 	mov	arg01, #0
0dfd8     38 BD B1 FD | 	call	#__system___getiolock_0622
0dfdc     3D 01 68 FC | 	wrlong	#0, result1
0dfe0     52 00 00 FF 
0dfe4     94 64 06 F1 | 	add	objptr, ##42132
0dfe8     32 95 02 FB | 	rdlong	arg02, objptr
0dfec     52 00 00 FF 
0dff0     94 64 86 F1 | 	sub	objptr, ##42132
0dff4     27 92 06 F6 | 	mov	arg01, #39
0dff8     9C 29 B1 FD | 	call	#_printerror
0dffc     04 01 90 FD | 	jmp	#LR__1205
0e000                 | LR__1200
0e000                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0e000     53 A9 02 F6 | 	mov	local02, local01
0e004     01 A8 86 F1 | 	sub	local02, #1
0e008                 | LR__1201
0e008     53 A5 02 F6 | 	mov	arg10, local01
0e00c     01 A4 86 F1 | 	sub	arg10, #1
0e010     52 A9 1A F2 | 	cmp	local02, arg10 wcz
0e014     40 00 90 1D |  if_a	jmp	#LR__1202
0e018     54 F6 BF FD | 	call	#_pop
0e01c     E7 7A 62 FC | 	wrlong	result1, fp
0e020     04 CE 05 F1 | 	add	fp, #4
0e024     E7 7C 62 FC | 	wrlong	result2, fp
0e028     04 CE 05 F1 | 	add	fp, #4
0e02c     E7 7E 62 FC | 	wrlong	result3, fp
0e030     54 AB 02 F6 | 	mov	local03, local02
0e034     02 AA 66 F0 | 	shl	local03, #2
0e038     04 CE 05 F1 | 	add	fp, #4
0e03c     E7 AA 02 F1 | 	add	local03, fp
0e040     0C CE 85 F1 | 	sub	fp, #12
0e044     E7 92 02 F6 | 	mov	arg01, fp
0e048     00 F8 BF FD | 	call	#_converttoint
0e04c     55 7B 62 FC | 	wrlong	result1, local03
0e050     01 A8 86 F1 | 	sub	local02, #1
0e054     B0 FF 9F FD | 	jmp	#LR__1201
0e058                 | LR__1202
0e058                 | ' if numpar=10 then 
0e058     0A A6 0E F2 | 	cmp	local01, #10 wz
0e05c     5C 00 90 5D |  if_ne	jmp	#LR__1203
0e060     0C CE 05 F1 | 	add	fp, #12
0e064     E7 92 02 FB | 	rdlong	arg01, fp
0e068     04 CE 05 F1 | 	add	fp, #4
0e06c     E7 94 02 FB | 	rdlong	arg02, fp
0e070     04 CE 05 F1 | 	add	fp, #4
0e074     E7 96 02 FB | 	rdlong	arg03, fp
0e078     04 CE 05 F1 | 	add	fp, #4
0e07c     E7 98 02 FB | 	rdlong	arg04, fp
0e080     04 CE 05 F1 | 	add	fp, #4
0e084     E7 9A 02 FB | 	rdlong	arg05, fp
0e088     04 CE 05 F1 | 	add	fp, #4
0e08c     E7 9C 02 FB | 	rdlong	arg06, fp
0e090     04 CE 05 F1 | 	add	fp, #4
0e094     E7 9E 02 FB | 	rdlong	arg07, fp
0e098     04 CE 05 F1 | 	add	fp, #4
0e09c     E7 A0 02 FB | 	rdlong	arg08, fp
0e0a0     04 CE 05 F1 | 	add	fp, #4
0e0a4     E7 A2 02 FB | 	rdlong	arg09, fp
0e0a8     04 CE 05 F1 | 	add	fp, #4
0e0ac     E7 A4 02 FB | 	rdlong	arg10, fp
0e0b0     30 CE 85 F1 | 	sub	fp, #48
0e0b4     D8 50 B1 FD | 	call	#_hg010b_spin2_blit
0e0b8     48 00 90 FD | 	jmp	#LR__1204
0e0bc                 | LR__1203
0e0bc     32 9F 02 FB | 	rdlong	arg07, objptr
0e0c0     0C CE 05 F1 | 	add	fp, #12
0e0c4     E7 94 02 FB | 	rdlong	arg02, fp
0e0c8     04 CE 05 F1 | 	add	fp, #4
0e0cc     E7 96 02 FB | 	rdlong	arg03, fp
0e0d0     04 CE 05 F1 | 	add	fp, #4
0e0d4     E7 98 02 FB | 	rdlong	arg04, fp
0e0d8     04 CE 05 F1 | 	add	fp, #4
0e0dc     E7 9A 02 FB | 	rdlong	arg05, fp
0e0e0     04 CE 05 F1 | 	add	fp, #4
0e0e4     E7 A0 02 FB | 	rdlong	arg08, fp
0e0e8     04 CE 05 F1 | 	add	fp, #4
0e0ec     E7 A2 02 FB | 	rdlong	arg09, fp
0e0f0     20 CE 85 F1 | 	sub	fp, #32
0e0f4     4F 93 02 F6 | 	mov	arg01, arg07
0e0f8     0A 9C C6 F9 | 	decod	arg06, #10
0e0fc     0A A4 C6 F9 | 	decod	arg10, #10
0e100     8C 50 B1 FD | 	call	#_hg010b_spin2_blit
0e104                 | LR__1204
0e104                 | LR__1205
0e104     E7 F0 03 F6 | 	mov	ptra, fp
0e108     F2 00 A0 FD | 	call	#popregs_
0e10c                 | _do_blit_ret
0e10c     2D 00 64 FD | 	ret
0e110                 | 
0e110                 | ' 
0e110                 | ' 
0e110                 | ' '-------------------- bin$
0e110                 | ' 
0e110                 | ' sub do_bin
0e110                 | _do_bin
0e110     02 CA 05 F6 | 	mov	COUNT_, #2
0e114     E8 00 A0 FD | 	call	#pushregs_
0e118     18 F0 07 F1 | 	add	ptra, #24
0e11c     4C 00 00 FF 
0e120     24 64 06 F1 | 	add	objptr, ##38948
0e124     32 97 02 FB | 	rdlong	arg03, objptr
0e128     4B 95 02 F6 | 	mov	arg02, arg03
0e12c     01 94 66 F0 | 	shl	arg02, #1
0e130     4B 95 02 F1 | 	add	arg02, arg03
0e134     02 94 66 F0 | 	shl	arg02, #2
0e138     03 00 00 FF 
0e13c     04 64 86 F1 | 	sub	objptr, ##1540
0e140     32 95 02 F1 | 	add	arg02, objptr
0e144     4A A7 02 FB | 	rdlong	local01, arg02
0e148                 | ' 
0e148                 | ' numpar=compiledline(lineptr_e).result.uresult
0e148                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e148     03 A6 16 F2 | 	cmp	local01, #3 wc
0e14c     49 00 00 FF 
0e150     20 64 86 F1 | 	sub	objptr, ##37408
0e154     00 A6 0E C2 |  if_b	cmp	local01, #0 wz
0e158     40 00 90 4D |  if_c_and_nz	jmp	#LR__1210
0e15c     00 92 06 F6 | 	mov	arg01, #0
0e160     B0 BB B1 FD | 	call	#__system___getiolock_0622
0e164     3D 93 02 F6 | 	mov	arg01, result1
0e168     24 66 B1 FD | 	call	#__system___lockmem
0e16c     95 01 00 FF 
0e170     8B 94 06 F6 | 	mov	arg02, ##@LR__5939
0e174     00 92 06 F6 | 	mov	arg01, #0
0e178     00 96 06 F6 | 	mov	arg03, #0
0e17c     04 73 B1 FD | 	call	#__system___basic_print_string
0e180     00 92 06 F6 | 	mov	arg01, #0
0e184     8C BB B1 FD | 	call	#__system___getiolock_0622
0e188     3D 01 68 FC | 	wrlong	#0, result1
0e18c     27 92 06 F6 | 	mov	arg01, #39
0e190     00 94 06 F6 | 	mov	arg02, #0
0e194     00 28 B1 FD | 	call	#_printerror
0e198     8C 00 90 FD | 	jmp	#LR__1213
0e19c                 | LR__1210
0e19c                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e19c     02 A6 0E F2 | 	cmp	local01, #2 wz
0e1a0     30 00 90 5D |  if_ne	jmp	#LR__1211
0e1a4     C8 F4 BF FD | 	call	#_pop
0e1a8     3F A7 02 F6 | 	mov	local01, result3
0e1ac     E7 7A 62 FC | 	wrlong	result1, fp
0e1b0     04 CE 05 F1 | 	add	fp, #4
0e1b4     E7 7C 62 FC | 	wrlong	result2, fp
0e1b8     04 CE 05 F1 | 	add	fp, #4
0e1bc     E7 A6 62 FC | 	wrlong	local01, fp
0e1c0     08 CE 85 F1 | 	sub	fp, #8
0e1c4     E7 92 02 F6 | 	mov	arg01, fp
0e1c8     80 F6 BF FD | 	call	#_converttoint
0e1cc     3D A9 02 F6 | 	mov	local02, result1
0e1d0     04 00 90 FD | 	jmp	#LR__1212
0e1d4                 | LR__1211
0e1d4     00 A8 06 F6 | 	mov	local02, #0
0e1d8                 | LR__1212
0e1d8     94 F4 BF FD | 	call	#_pop
0e1dc     3F A7 02 F6 | 	mov	local01, result3
0e1e0     E7 7A 62 FC | 	wrlong	result1, fp
0e1e4     04 CE 05 F1 | 	add	fp, #4
0e1e8     E7 7C 62 FC | 	wrlong	result2, fp
0e1ec     04 CE 05 F1 | 	add	fp, #4
0e1f0     E7 A6 62 FC | 	wrlong	local01, fp
0e1f4     08 CE 85 F1 | 	sub	fp, #8
0e1f8     E7 92 02 F6 | 	mov	arg01, fp
0e1fc     4C F6 BF FD | 	call	#_converttoint
0e200     3D 93 02 F6 | 	mov	arg01, result1
0e204     54 95 02 F6 | 	mov	arg02, local02
0e208     02 96 06 F6 | 	mov	arg03, #2
0e20c     7C 80 B1 FD | 	call	#__system__Number_S
0e210     E7 7A 62 FC | 	wrlong	result1, fp
0e214     08 CE 05 F1 | 	add	fp, #8
0e218     E7 3E 68 FC | 	wrlong	#31, fp
0e21c     08 CE 85 F1 | 	sub	fp, #8
0e220     E7 92 02 F6 | 	mov	arg01, fp
0e224     D8 F4 BF FD | 	call	#_push
0e228                 | LR__1213
0e228     E7 F0 03 F6 | 	mov	ptra, fp
0e22c     F2 00 A0 FD | 	call	#popregs_
0e230                 | _do_bin_ret
0e230     2D 00 64 FD | 	ret
0e234                 | 
0e234                 | ' 
0e234                 | ' '-------------------- box
0e234                 | ' 
0e234                 | ' sub do_box
0e234                 | _do_box
0e234     03 CA 05 F6 | 	mov	COUNT_, #3
0e238     E8 00 A0 FD | 	call	#pushregs_
0e23c     30 F0 07 F1 | 	add	ptra, #48
0e240     2C F4 BF FD | 	call	#_pop
0e244     3D 9B 02 F6 | 	mov	arg05, result1
0e248     3E 99 02 F6 | 	mov	arg04, result2
0e24c     3F 97 02 F6 | 	mov	arg03, result3
0e250     24 CE 05 F1 | 	add	fp, #36
0e254     E7 9A 62 FC | 	wrlong	arg05, fp
0e258     04 CE 05 F1 | 	add	fp, #4
0e25c     E7 98 62 FC | 	wrlong	arg04, fp
0e260     04 CE 05 F1 | 	add	fp, #4
0e264     E7 96 62 FC | 	wrlong	arg03, fp
0e268     2C CE 85 F1 | 	sub	fp, #44
0e26c     00 F4 BF FD | 	call	#_pop
0e270     3D 9B 02 F6 | 	mov	arg05, result1
0e274     3E 99 02 F6 | 	mov	arg04, result2
0e278     3F 97 02 F6 | 	mov	arg03, result3
0e27c     18 CE 05 F1 | 	add	fp, #24
0e280     E7 9A 62 FC | 	wrlong	arg05, fp
0e284     04 CE 05 F1 | 	add	fp, #4
0e288     E7 98 62 FC | 	wrlong	arg04, fp
0e28c     04 CE 05 F1 | 	add	fp, #4
0e290     E7 96 62 FC | 	wrlong	arg03, fp
0e294     20 CE 85 F1 | 	sub	fp, #32
0e298     D4 F3 BF FD | 	call	#_pop
0e29c     3D 9B 02 F6 | 	mov	arg05, result1
0e2a0     3E 99 02 F6 | 	mov	arg04, result2
0e2a4     3F A7 02 F6 | 	mov	local01, result3
0e2a8     0C CE 05 F1 | 	add	fp, #12
0e2ac     E7 9A 62 FC | 	wrlong	arg05, fp
0e2b0     04 CE 05 F1 | 	add	fp, #4
0e2b4     E7 98 62 FC | 	wrlong	arg04, fp
0e2b8     04 CE 05 F1 | 	add	fp, #4
0e2bc     E7 A6 62 FC | 	wrlong	local01, fp
0e2c0     14 CE 85 F1 | 	sub	fp, #20
0e2c4     A8 F3 BF FD | 	call	#_pop
0e2c8     E7 7A 62 FC | 	wrlong	result1, fp
0e2cc     04 CE 05 F1 | 	add	fp, #4
0e2d0     E7 7C 62 FC | 	wrlong	result2, fp
0e2d4     04 CE 05 F1 | 	add	fp, #4
0e2d8     E7 7E 62 FC | 	wrlong	result3, fp
0e2dc                 | ' 
0e2dc                 | ' t4=pop()
0e2dc                 | ' t3=pop()
0e2dc                 | ' t2=pop()
0e2dc                 | ' t1=pop()
0e2dc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e2dc     3F 9B 02 F6 | 	mov	arg05, result3
0e2e0     08 CE 85 F1 | 	sub	fp, #8
0e2e4     1C 9A 0E F2 | 	cmp	arg05, #28 wz
0e2e8     08 CE 05 51 |  if_ne	add	fp, #8
0e2ec     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0e2f0     08 CE 85 51 |  if_ne	sub	fp, #8
0e2f4     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0e2f8     A8 00 90 5D |  if_ne	jmp	#LR__1220
0e2fc     14 CE 05 F1 | 	add	fp, #20
0e300     E7 A6 02 FB | 	rdlong	local01, fp
0e304     14 CE 85 F1 | 	sub	fp, #20
0e308     1C A6 0E F2 | 	cmp	local01, #28 wz
0e30c     14 CE 05 51 |  if_ne	add	fp, #20
0e310     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e314     14 CE 85 51 |  if_ne	sub	fp, #20
0e318     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e31c     84 00 90 5D |  if_ne	jmp	#LR__1220
0e320     20 CE 05 F1 | 	add	fp, #32
0e324     E7 A6 02 FB | 	rdlong	local01, fp
0e328     20 CE 85 F1 | 	sub	fp, #32
0e32c     1C A6 0E F2 | 	cmp	local01, #28 wz
0e330     20 CE 05 51 |  if_ne	add	fp, #32
0e334     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e338     20 CE 85 51 |  if_ne	sub	fp, #32
0e33c     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e340     60 00 90 5D |  if_ne	jmp	#LR__1220
0e344     2C CE 05 F1 | 	add	fp, #44
0e348     E7 A6 02 FB | 	rdlong	local01, fp
0e34c     2C CE 85 F1 | 	sub	fp, #44
0e350     1C A6 0E F2 | 	cmp	local01, #28 wz
0e354     2C CE 05 51 |  if_ne	add	fp, #44
0e358     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e35c     2C CE 85 51 |  if_ne	sub	fp, #44
0e360     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e364     3C 00 90 5D |  if_ne	jmp	#LR__1220
0e368     E7 92 02 FB | 	rdlong	arg01, fp
0e36c     0C CE 05 F1 | 	add	fp, #12
0e370     E7 94 02 FB | 	rdlong	arg02, fp
0e374     0C CE 05 F1 | 	add	fp, #12
0e378     E7 96 02 FB | 	rdlong	arg03, fp
0e37c     0C CE 05 F1 | 	add	fp, #12
0e380     E7 98 02 FB | 	rdlong	arg04, fp
0e384     24 CE 85 F1 | 	sub	fp, #36
0e388     38 00 00 FF 
0e38c     CC 65 06 F1 | 	add	objptr, ##29132
0e390     32 9B 02 FB | 	rdlong	arg05, objptr
0e394     38 00 00 FF 
0e398     CC 65 86 F1 | 	sub	objptr, ##29132
0e39c     B0 40 B1 FD | 	call	#_hg010b_spin2_box
0e3a0                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e3a0     60 00 90 FD | 	jmp	#LR__1221
0e3a4                 | LR__1220
0e3a4     E7 92 02 F6 | 	mov	arg01, fp
0e3a8     A0 F4 BF FD | 	call	#_converttoint
0e3ac     3D A9 02 F6 | 	mov	local02, result1
0e3b0     E7 92 02 F6 | 	mov	arg01, fp
0e3b4     0C 92 06 F1 | 	add	arg01, #12
0e3b8     90 F4 BF FD | 	call	#_converttoint
0e3bc     3D AB 02 F6 | 	mov	local03, result1
0e3c0     E7 92 02 F6 | 	mov	arg01, fp
0e3c4     18 92 06 F1 | 	add	arg01, #24
0e3c8     80 F4 BF FD | 	call	#_converttoint
0e3cc     3D A7 02 F6 | 	mov	local01, result1
0e3d0     E7 92 02 F6 | 	mov	arg01, fp
0e3d4     24 92 06 F1 | 	add	arg01, #36
0e3d8     70 F4 BF FD | 	call	#_converttoint
0e3dc     3D 99 02 F6 | 	mov	arg04, result1
0e3e0     38 00 00 FF 
0e3e4     CC 65 06 F1 | 	add	objptr, ##29132
0e3e8     32 9B 02 FB | 	rdlong	arg05, objptr
0e3ec     38 00 00 FF 
0e3f0     CC 65 86 F1 | 	sub	objptr, ##29132
0e3f4     54 93 02 F6 | 	mov	arg01, local02
0e3f8     55 95 02 F6 | 	mov	arg02, local03
0e3fc     53 97 02 F6 | 	mov	arg03, local01
0e400     4C 40 B1 FD | 	call	#_hg010b_spin2_box
0e404                 | LR__1221
0e404     E7 F0 03 F6 | 	mov	ptra, fp
0e408     F2 00 A0 FD | 	call	#popregs_
0e40c                 | _do_box_ret
0e40c     2D 00 64 FD | 	ret
0e410                 | 
0e410                 | ' 
0e410                 | ' '-------------------- brun
0e410                 | ' 
0e410                 | ' sub do_brun
0e410                 | _do_brun
0e410     08 CA 05 F6 | 	mov	COUNT_, #8
0e414     E8 00 A0 FD | 	call	#pushregs_
0e418     54 F2 BF FD | 	call	#_pop
0e41c     3E 9B 02 F6 | 	mov	arg05, result2
0e420     3F 99 02 F6 | 	mov	arg04, result3
0e424     3D A7 02 F6 | 	mov	local01, result1
0e428     4D A9 02 F6 | 	mov	local02, arg05
0e42c     4C AB 02 F6 | 	mov	local03, arg04
0e430                 | ' 
0e430                 | ' t1=pop() 
0e430                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e430     2B AA 0E F2 | 	cmp	local03, #43 wz
0e434     10 00 90 5D |  if_ne	jmp	#LR__1230
0e438     53 93 02 F6 | 	mov	arg01, local01
0e43c     A0 F3 BF FD | 	call	#_convertstring
0e440     3D A7 02 F6 | 	mov	local01, result1
0e444     1F AA 06 F6 | 	mov	local03, #31
0e448                 | LR__1230
0e448                 | ' if t1.result_type=result_string then
0e448     1F AA 0E F2 | 	cmp	local03, #31 wz
0e44c     EC 01 90 5D |  if_ne	jmp	#LR__1234
0e450     53 AD 02 F6 | 	mov	local04, local01
0e454                 | '   filename=t1.result.sresult
0e454                 | '   if left$(filename,1)="/" then 
0e454     56 93 02 F6 | 	mov	arg01, local04
0e458     01 94 06 F6 | 	mov	arg02, #1
0e45c     D8 7B B1 FD | 	call	#__system__Left_S
0e460     3D 93 02 F6 | 	mov	arg01, result1
0e464     95 01 00 FF 
0e468     92 94 06 F6 | 	mov	arg02, ##@LR__5940
0e46c     48 63 B1 FD | 	call	#__system___string_cmp
0e470     00 7A 0E F2 | 	cmp	result1, #0 wz
0e474     56 AF 02 A6 |  if_e	mov	local05, local04
0e478     14 00 90 AD |  if_e	jmp	#LR__1231
0e47c     95 01 00 FF 
0e480     94 92 06 F6 | 	mov	arg01, ##@LR__5941
0e484     56 95 02 F6 | 	mov	arg02, local04
0e488     60 63 B1 FD | 	call	#__system___string_concat
0e48c     3D AF 02 F6 | 	mov	local05, result1
0e490                 | LR__1231
0e490                 | '   open fullfilename for input as #9
0e490     09 92 06 F6 | 	mov	arg01, #9
0e494     57 95 02 F6 | 	mov	arg02, local05
0e498     00 96 06 F6 | 	mov	arg03, #0
0e49c     A0 6E B1 FD | 	call	#__system___basic_open_string
0e4a0     20 68 06 F1 | 	add	ptr___system__dat__, #32
0e4a4     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e4a8     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e4ac     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0e4b0     3D B1 0A F6 | 	mov	local06, result1 wz
0e4b4                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e4b4     8C 00 90 AD |  if_e	jmp	#LR__1232
0e4b8     00 92 06 F6 | 	mov	arg01, #0
0e4bc     54 B8 B1 FD | 	call	#__system___getiolock_0622
0e4c0     3D 93 02 F6 | 	mov	arg01, result1
0e4c4     C8 62 B1 FD | 	call	#__system___lockmem
0e4c8     95 01 00 FF 
0e4cc     9D 94 06 F6 | 	mov	arg02, ##@LR__5942
0e4d0     00 92 06 F6 | 	mov	arg01, #0
0e4d4     00 96 06 F6 | 	mov	arg03, #0
0e4d8     A8 6F B1 FD | 	call	#__system___basic_print_string
0e4dc     00 92 06 F6 | 	mov	arg01, #0
0e4e0     58 95 02 F6 | 	mov	arg02, local06
0e4e4     00 96 06 F6 | 	mov	arg03, #0
0e4e8     0A 98 06 F6 | 	mov	arg04, #10
0e4ec     D8 6F B1 FD | 	call	#__system___basic_print_integer
0e4f0     95 01 00 FF 
0e4f4     AB 94 06 F6 | 	mov	arg02, ##@LR__5943
0e4f8     00 92 06 F6 | 	mov	arg01, #0
0e4fc     00 96 06 F6 | 	mov	arg03, #0
0e500     80 6F B1 FD | 	call	#__system___basic_print_string
0e504     58 93 02 F6 | 	mov	arg01, local06
0e508     34 84 B1 FD | 	call	#__system___strerror
0e50c     3D 95 02 F6 | 	mov	arg02, result1
0e510     00 92 06 F6 | 	mov	arg01, #0
0e514     00 96 06 F6 | 	mov	arg03, #0
0e518     68 6F B1 FD | 	call	#__system___basic_print_string
0e51c     00 92 06 F6 | 	mov	arg01, #0
0e520     0A 94 06 F6 | 	mov	arg02, #10
0e524     00 96 06 F6 | 	mov	arg03, #0
0e528     00 6F B1 FD | 	call	#__system___basic_print_char
0e52c     00 92 06 F6 | 	mov	arg01, #0
0e530     E0 B7 B1 FD | 	call	#__system___getiolock_0622
0e534     3D 01 68 FC | 	wrlong	#0, result1
0e538     09 92 06 F6 | 	mov	arg01, #9
0e53c     2C AE B1 FD | 	call	#__system__close
0e540     F8 00 90 FD | 	jmp	#LR__1235
0e544                 | LR__1232
0e544     01 B2 06 F6 | 	mov	local07, #1
0e548     00 B4 06 F6 | 	mov	local08, #0
0e54c                 | '   do
0e54c                 | LR__1233
0e54c                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e54c     32 97 02 F6 | 	mov	arg03, objptr
0e550     50 00 00 FF 
0e554     58 96 06 F1 | 	add	arg03, ##41048
0e558     09 92 06 F6 | 	mov	arg01, #9
0e55c     59 95 02 F6 | 	mov	arg02, local07
0e560     0A 98 C6 F9 | 	decod	arg04, #10
0e564     01 9A 06 F6 | 	mov	arg05, #1
0e568     A0 70 B1 FD | 	call	#__system___basic_get
0e56c     3D B1 02 F6 | 	mov	local06, result1
0e570     3D B3 02 F1 | 	add	local07, result1
0e574     32 93 02 F6 | 	mov	arg01, objptr
0e578     50 00 00 FF 
0e57c     58 92 06 F1 | 	add	arg01, ##41048
0e580     5A 95 02 F6 | 	mov	arg02, local08
0e584     0A 96 C6 F9 | 	decod	arg03, #10
0e588     0B 00 00 FF 
0e58c     CC 64 06 F1 | 	add	objptr, ##5836
0e590     60 52 B1 FD | 	call	#_psram_spin2_write
0e594     0B 00 00 FF 
0e598     CC 64 86 F1 | 	sub	objptr, ##5836
0e59c     58 B5 02 F1 | 	add	local08, local06
0e5a0     02 00 00 FF 
0e5a4     00 B0 0E F2 | 	cmp	local06, ##1024 wz
0e5a8     E0 03 00 AF 
0e5ac     00 B4 56 A2 |  if_e	cmps	local08, ##507904 wc
0e5b0     98 FF 9F 8D |  if_c_and_z	jmp	#LR__1233
0e5b4     38 00 00 FF 
0e5b8     A0 65 06 F1 | 	add	objptr, ##29088
0e5bc     32 93 02 FB | 	rdlong	arg01, objptr
0e5c0     03 92 62 FD | 	cogstop	arg01
0e5c4     04 64 06 F1 | 	add	objptr, #4
0e5c8     32 93 02 FB | 	rdlong	arg01, objptr
0e5cc     03 92 62 FD | 	cogstop	arg01
0e5d0     04 64 06 F1 | 	add	objptr, #4
0e5d4     32 93 02 FB | 	rdlong	arg01, objptr
0e5d8     03 92 62 FD | 	cogstop	arg01
0e5dc     19 00 00 FF 
0e5e0     3C 65 06 F1 | 	add	objptr, ##13116
0e5e4     32 93 02 FB | 	rdlong	arg01, objptr
0e5e8     52 00 00 FF 
0e5ec     E4 64 86 F1 | 	sub	objptr, ##42212
0e5f0     03 92 62 FD | 	cogstop	arg01
0e5f4     35 95 02 F6 | 	mov	arg02, ptr__dat__
0e5f8     18 00 00 FF 
0e5fc     CC 94 06 F1 | 	add	arg02, ##12492
0e600     32 97 02 F6 | 	mov	arg03, objptr
0e604     38 00 00 FF 
0e608     B0 97 06 F1 | 	add	arg03, ##29104
0e60c     1E B4 06 F6 | 	mov	local08, #30
0e610     28 96 62 FD | 	setq	arg03
0e614     4A B5 F2 FC | 	coginit	local08, arg02 wc
0e618     01 B4 66 C6 |  if_b	neg	local08, #1
0e61c     54 00 00 FF 
0e620     F4 64 06 F1 | 	add	objptr, ##43252
0e624     32 B5 62 FC | 	wrlong	local08, objptr
0e628     54 00 00 FF 
0e62c     F4 64 86 F1 | 	sub	objptr, ##43252
0e630     00 92 06 F6 | 	mov	arg01, #0
0e634     01 92 62 FD | 	cogid	arg01
0e638     03 92 62 FD | 	cogstop	arg01
0e63c                 | LR__1234
0e63c                 | LR__1235
0e63c     E7 F0 03 F6 | 	mov	ptra, fp
0e640     F2 00 A0 FD | 	call	#popregs_
0e644                 | _do_brun_ret
0e644     2D 00 64 FD | 	ret
0e648                 | 
0e648                 | ' 
0e648                 | ' '-------------------- cd
0e648                 | ' 
0e648                 | ' sub do_cd
0e648                 | _do_cd
0e648     06 CA 05 F6 | 	mov	COUNT_, #6
0e64c     E8 00 A0 FD | 	call	#pushregs_
0e650     95 01 00 FF 
0e654     AE 92 06 F6 | 	mov	arg01, ##@LR__5944
0e658     31 94 06 F6 | 	mov	arg02, #49
0e65c     6C B8 B1 FD | 	call	#__system___basic_dir
0e660     0C F0 BF FD | 	call	#_pop
0e664     3E 99 02 F6 | 	mov	arg04, result2
0e668     3F 97 02 F6 | 	mov	arg03, result3
0e66c     3D A7 02 F6 | 	mov	local01, result1
0e670     4C A9 02 F6 | 	mov	local02, arg04
0e674     4B AB 02 F6 | 	mov	local03, arg03
0e678                 | ' t1=pop()
0e678                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e678     2B AA 0E F2 | 	cmp	local03, #43 wz
0e67c     10 00 90 5D |  if_ne	jmp	#LR__1240
0e680     53 93 02 F6 | 	mov	arg01, local01
0e684     58 F1 BF FD | 	call	#_convertstring
0e688     3D A7 02 F6 | 	mov	local01, result1
0e68c     1F AA 06 F6 | 	mov	local03, #31
0e690                 | LR__1240
0e690                 | ' if t1.result_type<>result_string then printerror(15): return
0e690     1F AA 0E F2 | 	cmp	local03, #31 wz
0e694     10 00 90 AD |  if_e	jmp	#LR__1241
0e698     0F 92 06 F6 | 	mov	arg01, #15
0e69c     00 94 06 F6 | 	mov	arg02, #0
0e6a0     F4 22 B1 FD | 	call	#_printerror
0e6a4     54 05 90 FD | 	jmp	#LR__1259
0e6a8                 | LR__1241
0e6a8     53 AD 02 F6 | 	mov	local04, local01
0e6ac                 | ' newdir$=t1.result.sresult
0e6ac                 | ' if newdir$=".." then 
0e6ac     95 01 00 FF 
0e6b0     B0 94 06 F6 | 	mov	arg02, ##@LR__5945
0e6b4     56 93 02 F6 | 	mov	arg01, local04
0e6b8     FC 60 B1 FD | 	call	#__system___string_cmp
0e6bc     00 7A 0E F2 | 	cmp	result1, #0 wz
0e6c0     C8 01 90 5D |  if_ne	jmp	#LR__1248
0e6c4     4C 00 00 FF 
0e6c8     38 64 06 F1 | 	add	objptr, ##38968
0e6cc     32 93 02 FB | 	rdlong	arg01, objptr
0e6d0     4C 00 00 FF 
0e6d4     38 64 86 F1 | 	sub	objptr, ##38968
0e6d8     49 AF 02 F6 | 	mov	local05, arg01
0e6dc     D7 06 48 FB | 	callpa	#(@LR__1243-@LR__1242)>>2,fcache_load_ptr_
0e6e0                 | LR__1242
0e6e0     57 7B CA FA | 	rdbyte	result1, local05 wz
0e6e4     01 AE 06 51 |  if_ne	add	local05, #1
0e6e8     F4 FF 9F 5D |  if_ne	jmp	#LR__1242
0e6ec                 | LR__1243
0e6ec     57 93 C2 F2 | 	subr	arg01, local05
0e6f0     4C 00 00 FF 
0e6f4     38 64 06 F1 | 	add	objptr, ##38968
0e6f8     32 95 02 FB | 	rdlong	arg02, objptr
0e6fc     4C 00 00 FF 
0e700     38 64 86 F1 | 	sub	objptr, ##38968
0e704     95 01 00 FF 
0e708     B3 96 06 F6 | 	mov	arg03, ##@LR__5946
0e70c     74 7F B1 FD | 	call	#__system__InstrRev
0e710     3D AD 02 F6 | 	mov	local04, result1
0e714                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e714     02 AC 56 F2 | 	cmps	local04, #2 wc
0e718     28 00 90 CD |  if_b	jmp	#LR__1244
0e71c     4C 00 00 FF 
0e720     38 64 06 F1 | 	add	objptr, ##38968
0e724     32 93 02 FB | 	rdlong	arg01, objptr
0e728     4C 00 00 FF 
0e72c     38 64 86 F1 | 	sub	objptr, ##38968
0e730     01 AC 86 F1 | 	sub	local04, #1
0e734     56 95 02 F6 | 	mov	arg02, local04
0e738     FC 78 B1 FD | 	call	#__system__Left_S
0e73c     3D AD 02 F6 | 	mov	local04, result1
0e740     08 00 90 FD | 	jmp	#LR__1245
0e744                 | LR__1244
0e744     95 01 00 FF 
0e748     B5 AC 06 F6 | 	mov	local04, ##@LR__5947
0e74c                 | LR__1245
0e74c     56 93 02 F6 | 	mov	arg01, local04
0e750     CC 66 B1 FD | 	call	#__system___chdir
0e754     20 68 06 F1 | 	add	ptr___system__dat__, #32
0e758     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e75c     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e760     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0e764     3D B1 0A F6 | 	mov	local06, result1 wz
0e768                 | '   chdir newdir$
0e768                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e768     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0e76c     A4 00 90 AD |  if_e	jmp	#LR__1246
0e770     00 92 06 F6 | 	mov	arg01, #0
0e774     9C B5 B1 FD | 	call	#__system___getiolock_0622
0e778     3D 93 02 F6 | 	mov	arg01, result1
0e77c     10 60 B1 FD | 	call	#__system___lockmem
0e780     95 01 00 FF 
0e784     B7 94 06 F6 | 	mov	arg02, ##@LR__5948
0e788     00 92 06 F6 | 	mov	arg01, #0
0e78c     00 96 06 F6 | 	mov	arg03, #0
0e790     F0 6C B1 FD | 	call	#__system___basic_print_string
0e794     00 92 06 F6 | 	mov	arg01, #0
0e798     58 95 02 F6 | 	mov	arg02, local06
0e79c     00 96 06 F6 | 	mov	arg03, #0
0e7a0     0A 98 06 F6 | 	mov	arg04, #10
0e7a4     20 6D B1 FD | 	call	#__system___basic_print_integer
0e7a8     95 01 00 FF 
0e7ac     C5 94 06 F6 | 	mov	arg02, ##@LR__5949
0e7b0     00 92 06 F6 | 	mov	arg01, #0
0e7b4     00 96 06 F6 | 	mov	arg03, #0
0e7b8     C8 6C B1 FD | 	call	#__system___basic_print_string
0e7bc     47 00 00 FF 
0e7c0     F4 64 06 F1 | 	add	objptr, ##36596
0e7c4     32 95 02 FB | 	rdlong	arg02, objptr
0e7c8     47 00 00 FF 
0e7cc     F4 64 86 F1 | 	sub	objptr, ##36596
0e7d0     00 92 06 F6 | 	mov	arg01, #0
0e7d4     00 96 06 F6 | 	mov	arg03, #0
0e7d8     A8 6C B1 FD | 	call	#__system___basic_print_string
0e7dc     00 92 06 F6 | 	mov	arg01, #0
0e7e0     0A 94 06 F6 | 	mov	arg02, #10
0e7e4     00 96 06 F6 | 	mov	arg03, #0
0e7e8     40 6C B1 FD | 	call	#__system___basic_print_char
0e7ec     00 92 06 F6 | 	mov	arg01, #0
0e7f0     20 B5 B1 FD | 	call	#__system___getiolock_0622
0e7f4     3D 01 68 FC | 	wrlong	#0, result1
0e7f8     4C 00 00 FF 
0e7fc     38 64 06 F1 | 	add	objptr, ##38968
0e800     32 93 02 FB | 	rdlong	arg01, objptr
0e804     4C 00 00 FF 
0e808     38 64 86 F1 | 	sub	objptr, ##38968
0e80c     10 66 B1 FD | 	call	#__system___chdir
0e810     14 00 90 FD | 	jmp	#LR__1247
0e814                 | LR__1246
0e814     4C 00 00 FF 
0e818     38 64 06 F1 | 	add	objptr, ##38968
0e81c     32 AD 62 FC | 	wrlong	local04, objptr
0e820     4C 00 00 FF 
0e824     38 64 86 F1 | 	sub	objptr, ##38968
0e828                 | LR__1247
0e828                 | '   print "Current directory: ";currentdir$
0e828     00 92 06 F6 | 	mov	arg01, #0
0e82c     E4 B4 B1 FD | 	call	#__system___getiolock_0622
0e830     3D 93 02 F6 | 	mov	arg01, result1
0e834     58 5F B1 FD | 	call	#__system___lockmem
0e838     95 01 00 FF 
0e83c     C8 94 06 F6 | 	mov	arg02, ##@LR__5950
0e840     00 92 06 F6 | 	mov	arg01, #0
0e844     00 96 06 F6 | 	mov	arg03, #0
0e848     38 6C B1 FD | 	call	#__system___basic_print_string
0e84c     4C 00 00 FF 
0e850     38 64 06 F1 | 	add	objptr, ##38968
0e854     32 95 02 FB | 	rdlong	arg02, objptr
0e858     4C 00 00 FF 
0e85c     38 64 86 F1 | 	sub	objptr, ##38968
0e860     00 92 06 F6 | 	mov	arg01, #0
0e864     00 96 06 F6 | 	mov	arg03, #0
0e868     18 6C B1 FD | 	call	#__system___basic_print_string
0e86c     00 92 06 F6 | 	mov	arg01, #0
0e870     0A 94 06 F6 | 	mov	arg02, #10
0e874     00 96 06 F6 | 	mov	arg03, #0
0e878     B0 6B B1 FD | 	call	#__system___basic_print_char
0e87c     00 92 06 F6 | 	mov	arg01, #0
0e880     90 B4 B1 FD | 	call	#__system___getiolock_0622
0e884     3D 01 68 FC | 	wrlong	#0, result1
0e888                 | '   return
0e888     70 03 90 FD | 	jmp	#LR__1259
0e88c                 | LR__1248
0e88c                 | ' if left$(newdir$,1)="/" then 
0e88c     56 93 02 F6 | 	mov	arg01, local04
0e890     01 94 06 F6 | 	mov	arg02, #1
0e894     A0 77 B1 FD | 	call	#__system__Left_S
0e898     3D 93 02 F6 | 	mov	arg01, result1
0e89c     95 01 00 FF 
0e8a0     DC 94 06 F6 | 	mov	arg02, ##@LR__5951
0e8a4     10 5F B1 FD | 	call	#__system___string_cmp
0e8a8     00 7A 0E F2 | 	cmp	result1, #0 wz
0e8ac     40 01 90 5D |  if_ne	jmp	#LR__1251
0e8b0     56 93 02 F6 | 	mov	arg01, local04
0e8b4     68 65 B1 FD | 	call	#__system___chdir
0e8b8     20 68 06 F1 | 	add	ptr___system__dat__, #32
0e8bc     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e8c0     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e8c4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0e8c8     3D B1 0A F6 | 	mov	local06, result1 wz
0e8cc                 | '   chdir(newdir$)
0e8cc                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e8cc     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0e8d0     A4 00 90 AD |  if_e	jmp	#LR__1249
0e8d4     00 92 06 F6 | 	mov	arg01, #0
0e8d8     38 B4 B1 FD | 	call	#__system___getiolock_0622
0e8dc     3D 93 02 F6 | 	mov	arg01, result1
0e8e0     AC 5E B1 FD | 	call	#__system___lockmem
0e8e4     95 01 00 FF 
0e8e8     DE 94 06 F6 | 	mov	arg02, ##@LR__5952
0e8ec     00 92 06 F6 | 	mov	arg01, #0
0e8f0     00 96 06 F6 | 	mov	arg03, #0
0e8f4     8C 6B B1 FD | 	call	#__system___basic_print_string
0e8f8     00 92 06 F6 | 	mov	arg01, #0
0e8fc     58 95 02 F6 | 	mov	arg02, local06
0e900     00 96 06 F6 | 	mov	arg03, #0
0e904     0A 98 06 F6 | 	mov	arg04, #10
0e908     BC 6B B1 FD | 	call	#__system___basic_print_integer
0e90c     95 01 00 FF 
0e910     EC 94 06 F6 | 	mov	arg02, ##@LR__5953
0e914     00 92 06 F6 | 	mov	arg01, #0
0e918     00 96 06 F6 | 	mov	arg03, #0
0e91c     64 6B B1 FD | 	call	#__system___basic_print_string
0e920     47 00 00 FF 
0e924     F4 64 06 F1 | 	add	objptr, ##36596
0e928     32 95 02 FB | 	rdlong	arg02, objptr
0e92c     47 00 00 FF 
0e930     F4 64 86 F1 | 	sub	objptr, ##36596
0e934     00 92 06 F6 | 	mov	arg01, #0
0e938     00 96 06 F6 | 	mov	arg03, #0
0e93c     44 6B B1 FD | 	call	#__system___basic_print_string
0e940     00 92 06 F6 | 	mov	arg01, #0
0e944     0A 94 06 F6 | 	mov	arg02, #10
0e948     00 96 06 F6 | 	mov	arg03, #0
0e94c     DC 6A B1 FD | 	call	#__system___basic_print_char
0e950     00 92 06 F6 | 	mov	arg01, #0
0e954     BC B3 B1 FD | 	call	#__system___getiolock_0622
0e958     3D 01 68 FC | 	wrlong	#0, result1
0e95c     4C 00 00 FF 
0e960     38 64 06 F1 | 	add	objptr, ##38968
0e964     32 93 02 FB | 	rdlong	arg01, objptr
0e968     4C 00 00 FF 
0e96c     38 64 86 F1 | 	sub	objptr, ##38968
0e970     AC 64 B1 FD | 	call	#__system___chdir
0e974     14 00 90 FD | 	jmp	#LR__1250
0e978                 | LR__1249
0e978     4C 00 00 FF 
0e97c     38 64 06 F1 | 	add	objptr, ##38968
0e980     32 AD 62 FC | 	wrlong	local04, objptr
0e984     4C 00 00 FF 
0e988     38 64 86 F1 | 	sub	objptr, ##38968
0e98c                 | LR__1250
0e98c                 | '   print "Current directory: ";currentdir$
0e98c     00 92 06 F6 | 	mov	arg01, #0
0e990     80 B3 B1 FD | 	call	#__system___getiolock_0622
0e994     3D 93 02 F6 | 	mov	arg01, result1
0e998     F4 5D B1 FD | 	call	#__system___lockmem
0e99c     95 01 00 FF 
0e9a0     EF 94 06 F6 | 	mov	arg02, ##@LR__5954
0e9a4     00 92 06 F6 | 	mov	arg01, #0
0e9a8     00 96 06 F6 | 	mov	arg03, #0
0e9ac     D4 6A B1 FD | 	call	#__system___basic_print_string
0e9b0     4C 00 00 FF 
0e9b4     38 64 06 F1 | 	add	objptr, ##38968
0e9b8     32 95 02 FB | 	rdlong	arg02, objptr
0e9bc     4C 00 00 FF 
0e9c0     38 64 86 F1 | 	sub	objptr, ##38968
0e9c4     00 92 06 F6 | 	mov	arg01, #0
0e9c8     00 96 06 F6 | 	mov	arg03, #0
0e9cc     B4 6A B1 FD | 	call	#__system___basic_print_string
0e9d0     00 92 06 F6 | 	mov	arg01, #0
0e9d4     0A 94 06 F6 | 	mov	arg02, #10
0e9d8     00 96 06 F6 | 	mov	arg03, #0
0e9dc     4C 6A B1 FD | 	call	#__system___basic_print_char
0e9e0     00 92 06 F6 | 	mov	arg01, #0
0e9e4     2C B3 B1 FD | 	call	#__system___getiolock_0622
0e9e8     3D 01 68 FC | 	wrlong	#0, result1
0e9ec                 | '   return
0e9ec     0C 02 90 FD | 	jmp	#LR__1259
0e9f0                 | LR__1251
0e9f0                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0e9f0     4C 00 00 FF 
0e9f4     38 64 06 F1 | 	add	objptr, ##38968
0e9f8     32 93 02 FB | 	rdlong	arg01, objptr
0e9fc     4C 00 00 FF 
0ea00     38 64 86 F1 | 	sub	objptr, ##38968
0ea04     95 01 00 FF 
0ea08     03 95 06 F6 | 	mov	arg02, ##@LR__5955
0ea0c     A8 5D B1 FD | 	call	#__system___string_cmp
0ea10     00 7A 0E F2 | 	cmp	result1, #0 wz
0ea14     34 00 90 AD |  if_e	jmp	#LR__1252
0ea18     4C 00 00 FF 
0ea1c     38 64 06 F1 | 	add	objptr, ##38968
0ea20     32 93 02 FB | 	rdlong	arg01, objptr
0ea24     4C 00 00 FF 
0ea28     38 64 86 F1 | 	sub	objptr, ##38968
0ea2c     95 01 00 FF 
0ea30     05 95 06 F6 | 	mov	arg02, ##@LR__5956
0ea34     B4 5D B1 FD | 	call	#__system___string_concat
0ea38     3D 93 02 F6 | 	mov	arg01, result1
0ea3c     56 95 02 F6 | 	mov	arg02, local04
0ea40     A8 5D B1 FD | 	call	#__system___string_concat
0ea44     3D AD 02 F6 | 	mov	local04, result1
0ea48     20 00 90 FD | 	jmp	#LR__1253
0ea4c                 | LR__1252
0ea4c     4C 00 00 FF 
0ea50     38 64 06 F1 | 	add	objptr, ##38968
0ea54     32 93 02 FB | 	rdlong	arg01, objptr
0ea58     4C 00 00 FF 
0ea5c     38 64 86 F1 | 	sub	objptr, ##38968
0ea60     56 95 02 F6 | 	mov	arg02, local04
0ea64     84 5D B1 FD | 	call	#__system___string_concat
0ea68     3D AD 02 F6 | 	mov	local04, result1
0ea6c                 | LR__1253
0ea6c                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0ea6c     56 93 02 F6 | 	mov	arg01, local04
0ea70     01 94 06 F6 | 	mov	arg02, #1
0ea74     48 76 B1 FD | 	call	#__system__Right_S
0ea78     3D 93 02 F6 | 	mov	arg01, result1
0ea7c     95 01 00 FF 
0ea80     07 95 06 F6 | 	mov	arg02, ##@LR__5957
0ea84     30 5D B1 FD | 	call	#__system___string_cmp
0ea88     00 7A 0E F2 | 	cmp	result1, #0 wz
0ea8c     30 00 90 5D |  if_ne	jmp	#LR__1256
0ea90     56 93 02 F6 | 	mov	arg01, local04
0ea94     49 AF 02 F6 | 	mov	local05, arg01
0ea98     D7 06 48 FB | 	callpa	#(@LR__1255-@LR__1254)>>2,fcache_load_ptr_
0ea9c                 | LR__1254
0ea9c     57 7B CA FA | 	rdbyte	result1, local05 wz
0eaa0     01 AE 06 51 |  if_ne	add	local05, #1
0eaa4     F4 FF 9F 5D |  if_ne	jmp	#LR__1254
0eaa8                 | LR__1255
0eaa8     49 AF 82 F1 | 	sub	local05, arg01
0eaac     57 95 02 F6 | 	mov	arg02, local05
0eab0     01 94 86 F1 | 	sub	arg02, #1
0eab4     56 93 02 F6 | 	mov	arg01, local04
0eab8     7C 75 B1 FD | 	call	#__system__Left_S
0eabc     3D AD 02 F6 | 	mov	local04, result1
0eac0                 | LR__1256
0eac0     56 93 02 F6 | 	mov	arg01, local04
0eac4     58 63 B1 FD | 	call	#__system___chdir
0eac8     20 68 06 F1 | 	add	ptr___system__dat__, #32
0eacc     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0ead0     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0ead4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0ead8     3D B1 0A F6 | 	mov	local06, result1 wz
0eadc                 | '   chdir(newdir$)
0eadc                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0eadc     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0eae0     A4 00 90 AD |  if_e	jmp	#LR__1257
0eae4     00 92 06 F6 | 	mov	arg01, #0
0eae8     28 B2 B1 FD | 	call	#__system___getiolock_0622
0eaec     3D 93 02 F6 | 	mov	arg01, result1
0eaf0     9C 5C B1 FD | 	call	#__system___lockmem
0eaf4     95 01 00 FF 
0eaf8     09 95 06 F6 | 	mov	arg02, ##@LR__5958
0eafc     00 92 06 F6 | 	mov	arg01, #0
0eb00     00 96 06 F6 | 	mov	arg03, #0
0eb04     7C 69 B1 FD | 	call	#__system___basic_print_string
0eb08     00 92 06 F6 | 	mov	arg01, #0
0eb0c     58 95 02 F6 | 	mov	arg02, local06
0eb10     00 96 06 F6 | 	mov	arg03, #0
0eb14     0A 98 06 F6 | 	mov	arg04, #10
0eb18     AC 69 B1 FD | 	call	#__system___basic_print_integer
0eb1c     95 01 00 FF 
0eb20     17 95 06 F6 | 	mov	arg02, ##@LR__5959
0eb24     00 92 06 F6 | 	mov	arg01, #0
0eb28     00 96 06 F6 | 	mov	arg03, #0
0eb2c     54 69 B1 FD | 	call	#__system___basic_print_string
0eb30     47 00 00 FF 
0eb34     F4 64 06 F1 | 	add	objptr, ##36596
0eb38     32 95 02 FB | 	rdlong	arg02, objptr
0eb3c     47 00 00 FF 
0eb40     F4 64 86 F1 | 	sub	objptr, ##36596
0eb44     00 92 06 F6 | 	mov	arg01, #0
0eb48     00 96 06 F6 | 	mov	arg03, #0
0eb4c     34 69 B1 FD | 	call	#__system___basic_print_string
0eb50     00 92 06 F6 | 	mov	arg01, #0
0eb54     0A 94 06 F6 | 	mov	arg02, #10
0eb58     00 96 06 F6 | 	mov	arg03, #0
0eb5c     CC 68 B1 FD | 	call	#__system___basic_print_char
0eb60     00 92 06 F6 | 	mov	arg01, #0
0eb64     AC B1 B1 FD | 	call	#__system___getiolock_0622
0eb68     3D 01 68 FC | 	wrlong	#0, result1
0eb6c     4C 00 00 FF 
0eb70     38 64 06 F1 | 	add	objptr, ##38968
0eb74     32 93 02 FB | 	rdlong	arg01, objptr
0eb78     4C 00 00 FF 
0eb7c     38 64 86 F1 | 	sub	objptr, ##38968
0eb80     9C 62 B1 FD | 	call	#__system___chdir
0eb84     14 00 90 FD | 	jmp	#LR__1258
0eb88                 | LR__1257
0eb88     4C 00 00 FF 
0eb8c     38 64 06 F1 | 	add	objptr, ##38968
0eb90     32 AD 62 FC | 	wrlong	local04, objptr
0eb94     4C 00 00 FF 
0eb98     38 64 86 F1 | 	sub	objptr, ##38968
0eb9c                 | LR__1258
0eb9c                 | '   print "Current directory: ";currentdir$
0eb9c     00 92 06 F6 | 	mov	arg01, #0
0eba0     70 B1 B1 FD | 	call	#__system___getiolock_0622
0eba4     3D 93 02 F6 | 	mov	arg01, result1
0eba8     E4 5B B1 FD | 	call	#__system___lockmem
0ebac     95 01 00 FF 
0ebb0     1A 95 06 F6 | 	mov	arg02, ##@LR__5960
0ebb4     00 92 06 F6 | 	mov	arg01, #0
0ebb8     00 96 06 F6 | 	mov	arg03, #0
0ebbc     C4 68 B1 FD | 	call	#__system___basic_print_string
0ebc0     4C 00 00 FF 
0ebc4     38 64 06 F1 | 	add	objptr, ##38968
0ebc8     32 95 02 FB | 	rdlong	arg02, objptr
0ebcc     4C 00 00 FF 
0ebd0     38 64 86 F1 | 	sub	objptr, ##38968
0ebd4     00 92 06 F6 | 	mov	arg01, #0
0ebd8     00 96 06 F6 | 	mov	arg03, #0
0ebdc     A4 68 B1 FD | 	call	#__system___basic_print_string
0ebe0     00 92 06 F6 | 	mov	arg01, #0
0ebe4     0A 94 06 F6 | 	mov	arg02, #10
0ebe8     00 96 06 F6 | 	mov	arg03, #0
0ebec     3C 68 B1 FD | 	call	#__system___basic_print_char
0ebf0     00 92 06 F6 | 	mov	arg01, #0
0ebf4     1C B1 B1 FD | 	call	#__system___getiolock_0622
0ebf8     3D 01 68 FC | 	wrlong	#0, result1
0ebfc                 | LR__1259
0ebfc     E7 F0 03 F6 | 	mov	ptra, fp
0ec00     F2 00 A0 FD | 	call	#popregs_
0ec04                 | _do_cd_ret
0ec04     2D 00 64 FD | 	ret
0ec08                 | 
0ec08                 | ' 
0ec08                 | ' '-------------------- changefreq
0ec08                 | ' 
0ec08                 | ' sub do_changefreq
0ec08                 | _do_changefreq
0ec08     02 CA 05 F6 | 	mov	COUNT_, #2
0ec0c     E8 00 A0 FD | 	call	#pushregs_
0ec10     2C F0 07 F1 | 	add	ptra, #44
0ec14     58 EA BF FD | 	call	#_pop
0ec18     3F 95 02 F6 | 	mov	arg02, result3
0ec1c     E7 7A 62 FC | 	wrlong	result1, fp
0ec20     04 CE 05 F1 | 	add	fp, #4
0ec24     E7 7C 62 FC | 	wrlong	result2, fp
0ec28     04 CE 05 F1 | 	add	fp, #4
0ec2c     E7 94 62 FC | 	wrlong	arg02, fp
0ec30     08 CE 85 F1 | 	sub	fp, #8
0ec34     E7 92 02 F6 | 	mov	arg01, fp
0ec38     CC EC BF FD | 	call	#_converttofloat
0ec3c     3D A7 02 F6 | 	mov	local01, result1
0ec40     2C EA BF FD | 	call	#_pop
0ec44     3F 95 02 F6 | 	mov	arg02, result3
0ec48     E7 7A 62 FC | 	wrlong	result1, fp
0ec4c     04 CE 05 F1 | 	add	fp, #4
0ec50     E7 7C 62 FC | 	wrlong	result2, fp
0ec54     04 CE 05 F1 | 	add	fp, #4
0ec58     E7 94 62 FC | 	wrlong	arg02, fp
0ec5c     08 CE 85 F1 | 	sub	fp, #8
0ec60     E7 92 02 F6 | 	mov	arg01, fp
0ec64     E4 EB BF FD | 	call	#_converttoint
0ec68     3D 95 52 F6 | 	abs	arg02, result1 wc
0ec6c     4A 95 42 F8 | 	getnib	arg02, arg02, #0
0ec70     4A A9 82 F6 | 	negc	local02, arg02
0ec74     00 3D 22 FF 
0ec78     00 92 06 F6 | 	mov	arg01, ##1148846080
0ec7c     53 95 02 F6 | 	mov	arg02, local01
0ec80     DC 81 B1 FD | 	call	#__system___float_mul
0ec84     3D 93 02 F6 | 	mov	arg01, result1
0ec88     01 94 06 F6 | 	mov	arg02, #1
0ec8c     98 86 B1 FD | 	call	#__system___float_tointeger
0ec90     3D 95 02 F6 | 	mov	arg02, result1
0ec94     54 93 02 F6 | 	mov	arg01, local02
0ec98     0B 00 00 FF 
0ec9c     CC 64 06 F1 | 	add	objptr, ##5836
0eca0     34 56 B1 FD | 	call	#_Audio2_004_spin2_changefreq
0eca4     0B 00 00 FF 
0eca8     CC 64 86 F1 | 	sub	objptr, ##5836
0ecac     E7 F0 03 F6 | 	mov	ptra, fp
0ecb0     F2 00 A0 FD | 	call	#popregs_
0ecb4                 | _do_changefreq_ret
0ecb4     2D 00 64 FD | 	ret
0ecb8                 | 
0ecb8                 | ' 
0ecb8                 | ' '-------------------- changepan
0ecb8                 | ' 
0ecb8                 | ' sub do_changepan
0ecb8                 | _do_changepan
0ecb8     02 CA 05 F6 | 	mov	COUNT_, #2
0ecbc     E8 00 A0 FD | 	call	#pushregs_
0ecc0     14 F0 07 F1 | 	add	ptra, #20
0ecc4     A8 E9 BF FD | 	call	#_pop
0ecc8     E7 7A 62 FC | 	wrlong	result1, fp
0eccc     04 CE 05 F1 | 	add	fp, #4
0ecd0     E7 7C 62 FC | 	wrlong	result2, fp
0ecd4     04 CE 05 F1 | 	add	fp, #4
0ecd8     E7 7E 62 FC | 	wrlong	result3, fp
0ecdc     08 CE 85 F1 | 	sub	fp, #8
0ece0     00 00 23 FF 
0ece4     00 A6 06 F6 | 	mov	local01, ##1174405120
0ece8     E7 92 02 F6 | 	mov	arg01, fp
0ecec     18 EC BF FD | 	call	#_converttofloat
0ecf0     3D 95 02 F6 | 	mov	arg02, result1
0ecf4     53 93 02 F6 | 	mov	arg01, local01
0ecf8     64 81 B1 FD | 	call	#__system___float_mul
0ecfc     3D 93 02 F6 | 	mov	arg01, result1
0ed00     01 94 06 F6 | 	mov	arg02, #1
0ed04     20 86 B1 FD | 	call	#__system___float_tointeger
0ed08     3D A7 02 F6 | 	mov	local01, result1
0ed0c     0D A8 C6 F9 | 	decod	local02, #13
0ed10     53 A9 02 F1 | 	add	local02, local01
0ed14                 | ' 
0ed14                 | ' t1=pop()
0ed14                 | ' pan=8192+round(8192*converttofloat(t1)) 
0ed14                 | ' if pan<0 then pan=0
0ed14     00 A8 56 F2 | 	cmps	local02, #0 wc
0ed18     00 A8 06 C6 |  if_b	mov	local02, #0
0ed1c                 | ' if pan>16384 then pan=16384
0ed1c     20 00 00 FF 
0ed20     01 A8 56 F2 | 	cmps	local02, ##16385 wc
0ed24     0E A8 C6 39 |  if_ae	decod	local02, #14
0ed28     44 E9 BF FD | 	call	#_pop
0ed2c     3F A7 02 F6 | 	mov	local01, result3
0ed30     E7 7A 62 FC | 	wrlong	result1, fp
0ed34     04 CE 05 F1 | 	add	fp, #4
0ed38     E7 7C 62 FC | 	wrlong	result2, fp
0ed3c     04 CE 05 F1 | 	add	fp, #4
0ed40     E7 A6 62 FC | 	wrlong	local01, fp
0ed44     08 CE 85 F1 | 	sub	fp, #8
0ed48     E7 92 02 F6 | 	mov	arg01, fp
0ed4c     FC EA BF FD | 	call	#_converttoint
0ed50     3D A7 52 F6 | 	abs	local01, result1 wc
0ed54     07 A6 06 F5 | 	and	local01, #7
0ed58     53 A7 82 F6 | 	negc	local01, local01
0ed5c     38 00 00 FF 
0ed60     B4 65 06 F1 | 	add	objptr, ##29108
0ed64     32 93 02 FB | 	rdlong	arg01, objptr
0ed68     38 00 00 FF 
0ed6c     B4 65 86 F1 | 	sub	objptr, ##29108
0ed70     06 A6 66 F0 | 	shl	local01, #6
0ed74     53 93 02 F1 | 	add	arg01, local01
0ed78     16 92 06 F1 | 	add	arg01, #22
0ed7c     49 A9 52 FC | 	wrword	local02, arg01
0ed80     E7 F0 03 F6 | 	mov	ptra, fp
0ed84     F2 00 A0 FD | 	call	#popregs_
0ed88                 | _do_changepan_ret
0ed88     2D 00 64 FD | 	ret
0ed8c                 | 
0ed8c                 | ' 
0ed8c                 | ' '-------------------- changevol
0ed8c                 | ' 
0ed8c                 | ' sub do_changevol
0ed8c                 | _do_changevol
0ed8c     01 CA 05 F6 | 	mov	COUNT_, #1
0ed90     E8 00 A0 FD | 	call	#pushregs_
0ed94     14 F0 07 F1 | 	add	ptra, #20
0ed98     D4 E8 BF FD | 	call	#_pop
0ed9c     3F 95 02 F6 | 	mov	arg02, result3
0eda0     E7 7A 62 FC | 	wrlong	result1, fp
0eda4     04 CE 05 F1 | 	add	fp, #4
0eda8     E7 7C 62 FC | 	wrlong	result2, fp
0edac     04 CE 05 F1 | 	add	fp, #4
0edb0     E7 94 62 FC | 	wrlong	arg02, fp
0edb4     08 CE 85 F1 | 	sub	fp, #8
0edb8     E7 92 02 F6 | 	mov	arg01, fp
0edbc     48 EB BF FD | 	call	#_converttofloat
0edc0     3D 93 02 F6 | 	mov	arg01, result1
0edc4     00 3D 22 FF 
0edc8     00 94 06 F6 | 	mov	arg02, ##1148846080
0edcc     90 80 B1 FD | 	call	#__system___float_mul
0edd0     3D 93 02 F6 | 	mov	arg01, result1
0edd4     01 94 06 F6 | 	mov	arg02, #1
0edd8     4C 85 B1 FD | 	call	#__system___float_tointeger
0eddc     3D 95 52 F6 | 	abs	arg02, result1 wc
0ede0     0D 94 46 F7 | 	zerox	arg02, #13
0ede4     4A A7 82 F6 | 	negc	local01, arg02
0ede8     84 E8 BF FD | 	call	#_pop
0edec     3F 95 02 F6 | 	mov	arg02, result3
0edf0     E7 7A 62 FC | 	wrlong	result1, fp
0edf4     04 CE 05 F1 | 	add	fp, #4
0edf8     E7 7C 62 FC | 	wrlong	result2, fp
0edfc     04 CE 05 F1 | 	add	fp, #4
0ee00     E7 94 62 FC | 	wrlong	arg02, fp
0ee04     08 CE 85 F1 | 	sub	fp, #8
0ee08     E7 92 02 F6 | 	mov	arg01, fp
0ee0c     3C EA BF FD | 	call	#_converttoint
0ee10     3D 95 52 F6 | 	abs	arg02, result1 wc
0ee14     4A 95 42 F8 | 	getnib	arg02, arg02, #0
0ee18     4A 95 82 F6 | 	negc	arg02, arg02
0ee1c     38 00 00 FF 
0ee20     B4 65 06 F1 | 	add	objptr, ##29108
0ee24     32 93 02 FB | 	rdlong	arg01, objptr
0ee28     38 00 00 FF 
0ee2c     B4 65 86 F1 | 	sub	objptr, ##29108
0ee30     06 94 66 F0 | 	shl	arg02, #6
0ee34     4A 93 02 F1 | 	add	arg01, arg02
0ee38     14 92 06 F1 | 	add	arg01, #20
0ee3c     49 A7 52 FC | 	wrword	local01, arg01
0ee40     E7 F0 03 F6 | 	mov	ptra, fp
0ee44     F2 00 A0 FD | 	call	#popregs_
0ee48                 | _do_changevol_ret
0ee48     2D 00 64 FD | 	ret
0ee4c                 | 
0ee4c                 | ' 
0ee4c                 | ' '-------------------- changewav
0ee4c                 | ' 
0ee4c                 | ' sub do_changewav
0ee4c                 | _do_changewav
0ee4c     02 CA 05 F6 | 	mov	COUNT_, #2
0ee50     E8 00 A0 FD | 	call	#pushregs_
0ee54     14 F0 07 F1 | 	add	ptra, #20
0ee58     14 E8 BF FD | 	call	#_pop
0ee5c     3F 95 02 F6 | 	mov	arg02, result3
0ee60     E7 7A 62 FC | 	wrlong	result1, fp
0ee64     04 CE 05 F1 | 	add	fp, #4
0ee68     E7 7C 62 FC | 	wrlong	result2, fp
0ee6c     04 CE 05 F1 | 	add	fp, #4
0ee70     E7 94 62 FC | 	wrlong	arg02, fp
0ee74     08 CE 85 F1 | 	sub	fp, #8
0ee78     E7 92 02 F6 | 	mov	arg01, fp
0ee7c     CC E9 BF FD | 	call	#_converttoint
0ee80     3D A7 02 F6 | 	mov	local01, result1
0ee84                 | ' 
0ee84                 | ' t1=pop()
0ee84                 | ' wave=converttoint(t1)
0ee84                 | ' if wave<0 then wave=0
0ee84     00 A6 56 F2 | 	cmps	local01, #0 wc
0ee88     00 A6 06 C6 |  if_b	mov	local01, #0
0ee8c     E0 E7 BF FD | 	call	#_pop
0ee90     3F 95 02 F6 | 	mov	arg02, result3
0ee94     E7 7A 62 FC | 	wrlong	result1, fp
0ee98     04 CE 05 F1 | 	add	fp, #4
0ee9c     E7 7C 62 FC | 	wrlong	result2, fp
0eea0     04 CE 05 F1 | 	add	fp, #4
0eea4     E7 94 62 FC | 	wrlong	arg02, fp
0eea8     08 CE 85 F1 | 	sub	fp, #8
0eeac     E7 92 02 F6 | 	mov	arg01, fp
0eeb0     98 E9 BF FD | 	call	#_converttoint
0eeb4     3D A9 52 F6 | 	abs	local02, result1 wc
0eeb8     54 A9 42 F8 | 	getnib	local02, local02, #0
0eebc     54 A9 82 F6 | 	negc	local02, local02
0eec0                 | ' if wave <32 then 
0eec0     20 A6 56 F2 | 	cmps	local01, #32 wc
0eec4     28 00 90 3D |  if_ae	jmp	#LR__1260
0eec8     0B A6 66 F0 | 	shl	local01, #11
0eecc     19 94 C6 F9 | 	decod	arg02, #25
0eed0     53 95 02 F1 | 	add	arg02, local01
0eed4     54 93 02 F6 | 	mov	arg01, local02
0eed8     0B 00 00 FF 
0eedc     CC 64 06 F1 | 	add	objptr, ##5836
0eee0     5C 54 B1 FD | 	call	#_Audio2_004_spin2_changewav
0eee4     0B 00 00 FF 
0eee8     CC 64 86 F1 | 	sub	objptr, ##5836
0eeec     1C 00 90 FD | 	jmp	#LR__1261
0eef0                 | LR__1260
0eef0     54 93 02 F6 | 	mov	arg01, local02
0eef4     1B 94 C6 F9 | 	decod	arg02, #27
0eef8     0B 00 00 FF 
0eefc     CC 64 06 F1 | 	add	objptr, ##5836
0ef00     3C 54 B1 FD | 	call	#_Audio2_004_spin2_changewav
0ef04     0B 00 00 FF 
0ef08     CC 64 86 F1 | 	sub	objptr, ##5836
0ef0c                 | LR__1261
0ef0c     E7 F0 03 F6 | 	mov	ptra, fp
0ef10     F2 00 A0 FD | 	call	#popregs_
0ef14                 | _do_changewav_ret
0ef14     2D 00 64 FD | 	ret
0ef18                 | 
0ef18                 | ' 
0ef18                 | ' '-------------------- chr$
0ef18                 | ' 
0ef18                 | ' sub do_chr
0ef18                 | _do_chr
0ef18     00 CA 05 F6 | 	mov	COUNT_, #0
0ef1c     E8 00 A0 FD | 	call	#pushregs_
0ef20     14 F0 07 F1 | 	add	ptra, #20
0ef24     4C 00 00 FF 
0ef28     24 64 06 F1 | 	add	objptr, ##38948
0ef2c     32 97 02 FB | 	rdlong	arg03, objptr
0ef30     4B 95 02 F6 | 	mov	arg02, arg03
0ef34     01 94 66 F0 | 	shl	arg02, #1
0ef38     4B 95 02 F1 | 	add	arg02, arg03
0ef3c     02 94 66 F0 | 	shl	arg02, #2
0ef40     03 00 00 FF 
0ef44     04 64 86 F1 | 	sub	objptr, ##1540
0ef48     32 95 02 F1 | 	add	arg02, objptr
0ef4c     4A 97 02 FB | 	rdlong	arg03, arg02
0ef50                 | ' 
0ef50                 | ' numpar=compiledline(lineptr_e).result.uresult
0ef50                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0ef50     02 96 16 F2 | 	cmp	arg03, #2 wc
0ef54     49 00 00 FF 
0ef58     20 64 86 F1 | 	sub	objptr, ##37408
0ef5c     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0ef60     40 00 90 4D |  if_c_and_nz	jmp	#LR__1270
0ef64     00 92 06 F6 | 	mov	arg01, #0
0ef68     A8 AD B1 FD | 	call	#__system___getiolock_0622
0ef6c     3D 93 02 F6 | 	mov	arg01, result1
0ef70     1C 58 B1 FD | 	call	#__system___lockmem
0ef74     95 01 00 FF 
0ef78     2E 95 06 F6 | 	mov	arg02, ##@LR__5961
0ef7c     00 92 06 F6 | 	mov	arg01, #0
0ef80     00 96 06 F6 | 	mov	arg03, #0
0ef84     FC 64 B1 FD | 	call	#__system___basic_print_string
0ef88     00 92 06 F6 | 	mov	arg01, #0
0ef8c     84 AD B1 FD | 	call	#__system___getiolock_0622
0ef90     3D 01 68 FC | 	wrlong	#0, result1
0ef94     27 92 06 F6 | 	mov	arg01, #39
0ef98     00 94 06 F6 | 	mov	arg02, #0
0ef9c     F8 19 B1 FD | 	call	#_printerror
0efa0     48 00 90 FD | 	jmp	#LR__1271
0efa4                 | LR__1270
0efa4     C8 E6 BF FD | 	call	#_pop
0efa8     3F 97 02 F6 | 	mov	arg03, result3
0efac     E7 7A 62 FC | 	wrlong	result1, fp
0efb0     04 CE 05 F1 | 	add	fp, #4
0efb4     E7 7C 62 FC | 	wrlong	result2, fp
0efb8     04 CE 05 F1 | 	add	fp, #4
0efbc     E7 96 62 FC | 	wrlong	arg03, fp
0efc0     08 CE 85 F1 | 	sub	fp, #8
0efc4     E7 92 02 F6 | 	mov	arg01, fp
0efc8     80 E8 BF FD | 	call	#_converttoint
0efcc     3D 93 02 F6 | 	mov	arg01, result1
0efd0     28 72 B1 FD | 	call	#__system__Chr_S
0efd4     E7 7A 62 FC | 	wrlong	result1, fp
0efd8     08 CE 05 F1 | 	add	fp, #8
0efdc     E7 3E 68 FC | 	wrlong	#31, fp
0efe0     08 CE 85 F1 | 	sub	fp, #8
0efe4     E7 92 02 F6 | 	mov	arg01, fp
0efe8     14 E7 BF FD | 	call	#_push
0efec                 | LR__1271
0efec     E7 F0 03 F6 | 	mov	ptra, fp
0eff0     F2 00 A0 FD | 	call	#popregs_
0eff4                 | _do_chr_ret
0eff4     2D 00 64 FD | 	ret
0eff8                 | 
0eff8                 | ' 
0eff8                 | ' '-------------------- circle
0eff8                 | ' 
0eff8                 | ' sub do_circle
0eff8                 | _do_circle
0eff8     02 CA 05 F6 | 	mov	COUNT_, #2
0effc     E8 00 A0 FD | 	call	#pushregs_
0f000     24 F0 07 F1 | 	add	ptra, #36
0f004     68 E6 BF FD | 	call	#_pop
0f008     3D 99 02 F6 | 	mov	arg04, result1
0f00c     3E 97 02 F6 | 	mov	arg03, result2
0f010     3F 95 02 F6 | 	mov	arg02, result3
0f014     18 CE 05 F1 | 	add	fp, #24
0f018     E7 98 62 FC | 	wrlong	arg04, fp
0f01c     04 CE 05 F1 | 	add	fp, #4
0f020     E7 96 62 FC | 	wrlong	arg03, fp
0f024     04 CE 05 F1 | 	add	fp, #4
0f028     E7 94 62 FC | 	wrlong	arg02, fp
0f02c     20 CE 85 F1 | 	sub	fp, #32
0f030     3C E6 BF FD | 	call	#_pop
0f034     3D 99 02 F6 | 	mov	arg04, result1
0f038     3E 97 02 F6 | 	mov	arg03, result2
0f03c     3F A7 02 F6 | 	mov	local01, result3
0f040     0C CE 05 F1 | 	add	fp, #12
0f044     E7 98 62 FC | 	wrlong	arg04, fp
0f048     04 CE 05 F1 | 	add	fp, #4
0f04c     E7 96 62 FC | 	wrlong	arg03, fp
0f050     04 CE 05 F1 | 	add	fp, #4
0f054     E7 A6 62 FC | 	wrlong	local01, fp
0f058     14 CE 85 F1 | 	sub	fp, #20
0f05c     10 E6 BF FD | 	call	#_pop
0f060     E7 7A 62 FC | 	wrlong	result1, fp
0f064     04 CE 05 F1 | 	add	fp, #4
0f068     E7 7C 62 FC | 	wrlong	result2, fp
0f06c     04 CE 05 F1 | 	add	fp, #4
0f070     E7 7E 62 FC | 	wrlong	result3, fp
0f074                 | ' 
0f074                 | ' t3=pop()
0f074                 | ' t2=pop()
0f074                 | ' t1=pop()
0f074                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f074     3F 99 02 F6 | 	mov	arg04, result3
0f078     08 CE 85 F1 | 	sub	fp, #8
0f07c     1C 98 0E F2 | 	cmp	arg04, #28 wz
0f080     08 CE 05 51 |  if_ne	add	fp, #8
0f084     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0f088     08 CE 85 51 |  if_ne	sub	fp, #8
0f08c     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0f090     7C 00 90 5D |  if_ne	jmp	#LR__1280
0f094     14 CE 05 F1 | 	add	fp, #20
0f098     E7 A6 02 FB | 	rdlong	local01, fp
0f09c     14 CE 85 F1 | 	sub	fp, #20
0f0a0     1C A6 0E F2 | 	cmp	local01, #28 wz
0f0a4     14 CE 05 51 |  if_ne	add	fp, #20
0f0a8     E7 98 02 5B |  if_ne	rdlong	arg04, fp
0f0ac     14 CE 85 51 |  if_ne	sub	fp, #20
0f0b0     1D 98 0E 52 |  if_ne	cmp	arg04, #29 wz
0f0b4     58 00 90 5D |  if_ne	jmp	#LR__1280
0f0b8     20 CE 05 F1 | 	add	fp, #32
0f0bc     E7 A6 02 FB | 	rdlong	local01, fp
0f0c0     20 CE 85 F1 | 	sub	fp, #32
0f0c4     1C A6 0E F2 | 	cmp	local01, #28 wz
0f0c8     20 CE 05 51 |  if_ne	add	fp, #32
0f0cc     E7 98 02 5B |  if_ne	rdlong	arg04, fp
0f0d0     20 CE 85 51 |  if_ne	sub	fp, #32
0f0d4     1D 98 0E 52 |  if_ne	cmp	arg04, #29 wz
0f0d8     34 00 90 5D |  if_ne	jmp	#LR__1280
0f0dc     E7 92 02 FB | 	rdlong	arg01, fp
0f0e0     0C CE 05 F1 | 	add	fp, #12
0f0e4     E7 94 02 FB | 	rdlong	arg02, fp
0f0e8     0C CE 05 F1 | 	add	fp, #12
0f0ec     E7 96 02 FB | 	rdlong	arg03, fp
0f0f0     18 CE 85 F1 | 	sub	fp, #24
0f0f4     38 00 00 FF 
0f0f8     CC 65 06 F1 | 	add	objptr, ##29132
0f0fc     32 99 02 FB | 	rdlong	arg04, objptr
0f100     38 00 00 FF 
0f104     CC 65 86 F1 | 	sub	objptr, ##29132
0f108     78 31 B1 FD | 	call	#_hg010b_spin2_circle
0f10c                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f10c     4C 00 90 FD | 	jmp	#LR__1281
0f110                 | LR__1280
0f110     E7 92 02 F6 | 	mov	arg01, fp
0f114     34 E7 BF FD | 	call	#_converttoint
0f118     3D A7 02 F6 | 	mov	local01, result1
0f11c     E7 92 02 F6 | 	mov	arg01, fp
0f120     0C 92 06 F1 | 	add	arg01, #12
0f124     24 E7 BF FD | 	call	#_converttoint
0f128     3D A9 02 F6 | 	mov	local02, result1
0f12c     E7 92 02 F6 | 	mov	arg01, fp
0f130     18 92 06 F1 | 	add	arg01, #24
0f134     14 E7 BF FD | 	call	#_converttoint
0f138     3D 97 02 F6 | 	mov	arg03, result1
0f13c     38 00 00 FF 
0f140     CC 65 06 F1 | 	add	objptr, ##29132
0f144     32 99 02 FB | 	rdlong	arg04, objptr
0f148     38 00 00 FF 
0f14c     CC 65 86 F1 | 	sub	objptr, ##29132
0f150     53 93 02 F6 | 	mov	arg01, local01
0f154     54 95 02 F6 | 	mov	arg02, local02
0f158     28 31 B1 FD | 	call	#_hg010b_spin2_circle
0f15c                 | LR__1281
0f15c     E7 F0 03 F6 | 	mov	ptra, fp
0f160     F2 00 A0 FD | 	call	#popregs_
0f164                 | _do_circle_ret
0f164     2D 00 64 FD | 	ret
0f168                 | 
0f168                 | ' 
0f168                 | ' '-------------------- click
0f168                 | ' 
0f168                 | ' sub do_click
0f168                 | _do_click
0f168     04 E5 BF FD | 	call	#_pop
0f16c     00 7A 4E F2 | 	cmps	result1, #0 wz
0f170                 | ' 
0f170                 | ' t1=pop()
0f170                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f170     52 00 00 AF 
0f174     E0 64 06 A1 |  if_e	add	objptr, ##42208
0f178     32 01 68 AC |  if_e	wrlong	#0, objptr
0f17c     52 00 00 FF 
0f180     E0 64 C6 F3 | 	sumz	objptr, ##42208
0f184     32 03 68 5C |  if_ne	wrlong	#1, objptr
0f188     52 00 00 5F 
0f18c     E0 64 86 51 |  if_ne	sub	objptr, ##42208
0f190                 | _do_click_ret
0f190     2D 00 64 FD | 	ret
0f194                 | 
0f194                 | ' 
0f194                 | ' '-------------------- close
0f194                 | ' 
0f194                 | ' sub do_close
0f194                 | _do_close
0f194     03 CA 05 F6 | 	mov	COUNT_, #3
0f198     E8 00 A0 FD | 	call	#pushregs_
0f19c     D0 E4 BF FD | 	call	#_pop
0f1a0     3D A7 02 F6 | 	mov	local01, result1
0f1a4     3F 97 02 F6 | 	mov	arg03, result3
0f1a8     3E A9 02 F6 | 	mov	local02, result2
0f1ac     4B AB 02 F6 | 	mov	local03, arg03
0f1b0                 | ' 
0f1b0                 | ' numpar=compiledline(lineptr_e).result.uresult
0f1b0                 | ' t1=pop()
0f1b0                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f1b0     2C AA 0E F2 | 	cmp	local03, #44 wz
0f1b4     44 00 90 AD |  if_e	jmp	#LR__1290
0f1b8     00 92 06 F6 | 	mov	arg01, #0
0f1bc     54 AB B1 FD | 	call	#__system___getiolock_0622
0f1c0     3D 93 02 F6 | 	mov	arg01, result1
0f1c4     C8 55 B1 FD | 	call	#__system___lockmem
0f1c8     95 01 00 FF 
0f1cc     35 95 06 F6 | 	mov	arg02, ##@LR__5962
0f1d0     00 92 06 F6 | 	mov	arg01, #0
0f1d4     00 96 06 F6 | 	mov	arg03, #0
0f1d8     A8 62 B1 FD | 	call	#__system___basic_print_string
0f1dc     00 92 06 F6 | 	mov	arg01, #0
0f1e0     0A 94 06 F6 | 	mov	arg02, #10
0f1e4     00 96 06 F6 | 	mov	arg03, #0
0f1e8     40 62 B1 FD | 	call	#__system___basic_print_char
0f1ec     00 92 06 F6 | 	mov	arg01, #0
0f1f0     20 AB B1 FD | 	call	#__system___getiolock_0622
0f1f4     3D 01 68 FC | 	wrlong	#0, result1
0f1f8     08 00 90 FD | 	jmp	#LR__1291
0f1fc                 | LR__1290
0f1fc                 | ' channel  = t1.result.iresult
0f1fc                 | ' close #channel
0f1fc     53 93 02 F6 | 	mov	arg01, local01
0f200     68 A1 B1 FD | 	call	#__system__close
0f204                 | LR__1291
0f204     E7 F0 03 F6 | 	mov	ptra, fp
0f208     F2 00 A0 FD | 	call	#popregs_
0f20c                 | _do_close_ret
0f20c     2D 00 64 FD | 	ret
0f210                 | 
0f210                 | ' 
0f210                 | ' '-------------------- cls
0f210                 | ' 
0f210                 | ' sub do_cls
0f210                 | _do_cls
0f210     38 00 00 FF 
0f214     E0 65 06 F1 | 	add	objptr, ##29152
0f218     32 93 02 FB | 	rdlong	arg01, objptr
0f21c     04 64 86 F1 | 	sub	objptr, #4
0f220     32 95 02 FB | 	rdlong	arg02, objptr
0f224     38 00 00 FF 
0f228     DC 65 86 F1 | 	sub	objptr, ##29148
0f22c     60 35 B1 FD | 	call	#_hg010b_spin2_cls
0f230     38 00 00 FF 
0f234     E0 65 06 F1 | 	add	objptr, ##29152
0f238     32 95 02 FB | 	rdlong	arg02, objptr
0f23c     14 64 86 F1 | 	sub	objptr, #20
0f240     32 95 62 FC | 	wrlong	arg02, objptr
0f244     38 00 00 FF 
0f248     CC 65 86 F1 | 	sub	objptr, ##29132
0f24c                 | _do_cls_ret
0f24c     2D 00 64 FD | 	ret
0f250                 | 
0f250                 | ' 
0f250                 | ' sub do_coginit
0f250                 | _do_coginit
0f250     05 CA 05 F6 | 	mov	COUNT_, #5
0f254     E8 00 A0 FD | 	call	#pushregs_
0f258     08 00 00 FF 
0f25c     1C F0 07 F1 | 	add	ptra, ##4124
0f260     4C 00 00 FF 
0f264     24 64 06 F1 | 	add	objptr, ##38948
0f268     32 A7 02 FB | 	rdlong	local01, objptr
0f26c     53 A9 02 F6 | 	mov	local02, local01
0f270     01 A8 66 F0 | 	shl	local02, #1
0f274     53 A9 02 F1 | 	add	local02, local01
0f278     02 A8 66 F0 | 	shl	local02, #2
0f27c     03 00 00 FF 
0f280     04 64 86 F1 | 	sub	objptr, ##1540
0f284     32 A9 02 F1 | 	add	local02, objptr
0f288     54 A9 02 FB | 	rdlong	local02, local02
0f28c                 | ' numpar=compiledline(lineptr_e).result.uresult
0f28c                 | ' if numpar<2 orelse numpar>3 then print "coginit: "; : printerror(39) : return
0f28c     02 A8 56 F2 | 	cmps	local02, #2 wc
0f290     49 00 00 FF 
0f294     20 64 86 F1 | 	sub	objptr, ##37408
0f298     08 00 90 CD |  if_b	jmp	#LR__1300
0f29c     04 A8 56 F2 | 	cmps	local02, #4 wc
0f2a0     40 00 90 CD |  if_b	jmp	#LR__1301
0f2a4                 | LR__1300
0f2a4     00 92 06 F6 | 	mov	arg01, #0
0f2a8     68 AA B1 FD | 	call	#__system___getiolock_0622
0f2ac     3D 93 02 F6 | 	mov	arg01, result1
0f2b0     DC 54 B1 FD | 	call	#__system___lockmem
0f2b4     95 01 00 FF 
0f2b8     47 95 06 F6 | 	mov	arg02, ##@LR__5963
0f2bc     00 92 06 F6 | 	mov	arg01, #0
0f2c0     00 96 06 F6 | 	mov	arg03, #0
0f2c4     BC 61 B1 FD | 	call	#__system___basic_print_string
0f2c8     00 92 06 F6 | 	mov	arg01, #0
0f2cc     44 AA B1 FD | 	call	#__system___getiolock_0622
0f2d0     3D 01 68 FC | 	wrlong	#0, result1
0f2d4     27 92 06 F6 | 	mov	arg01, #39
0f2d8     00 94 06 F6 | 	mov	arg02, #0
0f2dc     B8 16 B1 FD | 	call	#_printerror
0f2e0     2C 01 90 FD | 	jmp	#LR__1305
0f2e4                 | LR__1301
0f2e4     88 E3 BF FD | 	call	#_pop
0f2e8     3F A7 02 F6 | 	mov	local01, result3
0f2ec     08 00 00 FF 
0f2f0     10 CE 05 F1 | 	add	fp, ##4112
0f2f4     E7 7A 62 FC | 	wrlong	result1, fp
0f2f8     04 CE 05 F1 | 	add	fp, #4
0f2fc     E7 7C 62 FC | 	wrlong	result2, fp
0f300     04 CE 05 F1 | 	add	fp, #4
0f304     E7 A6 62 FC | 	wrlong	local01, fp
0f308     08 CE 85 F1 | 	sub	fp, #8
0f30c     E7 92 02 F6 | 	mov	arg01, fp
0f310     08 00 00 FF 
0f314     10 CE 85 F1 | 	sub	fp, ##4112
0f318     30 E5 BF FD | 	call	#_converttoint
0f31c     3D AB 02 F6 | 	mov	local03, result1
0f320     4C E3 BF FD | 	call	#_pop
0f324     3F A7 02 F6 | 	mov	local01, result3
0f328     08 00 00 FF 
0f32c     10 CE 05 F1 | 	add	fp, ##4112
0f330     E7 7A 62 FC | 	wrlong	result1, fp
0f334     04 CE 05 F1 | 	add	fp, #4
0f338     E7 7C 62 FC | 	wrlong	result2, fp
0f33c     04 CE 05 F1 | 	add	fp, #4
0f340     E7 A6 62 FC | 	wrlong	local01, fp
0f344     08 CE 85 F1 | 	sub	fp, #8
0f348     E7 92 02 F6 | 	mov	arg01, fp
0f34c     08 00 00 FF 
0f350     10 CE 85 F1 | 	sub	fp, ##4112
0f354     F4 E4 BF FD | 	call	#_converttoint
0f358     3D AD 02 F6 | 	mov	local04, result1
0f35c                 | ' t1=pop()
0f35c                 | ' ptra_val=converttoint(t1)
0f35c                 | ' t1=pop()
0f35c                 | ' addrval=converttoint(t1)
0f35c                 | ' if numpar=3 then 
0f35c     03 A8 0E F2 | 	cmp	local02, #3 wz
0f360     40 00 90 5D |  if_ne	jmp	#LR__1302
0f364     08 E3 BF FD | 	call	#_pop
0f368     3F A7 02 F6 | 	mov	local01, result3
0f36c     08 00 00 FF 
0f370     10 CE 05 F1 | 	add	fp, ##4112
0f374     E7 7A 62 FC | 	wrlong	result1, fp
0f378     04 CE 05 F1 | 	add	fp, #4
0f37c     E7 7C 62 FC | 	wrlong	result2, fp
0f380     04 CE 05 F1 | 	add	fp, #4
0f384     E7 A6 62 FC | 	wrlong	local01, fp
0f388     08 CE 85 F1 | 	sub	fp, #8
0f38c     E7 92 02 F6 | 	mov	arg01, fp
0f390     08 00 00 FF 
0f394     10 CE 85 F1 | 	sub	fp, ##4112
0f398     B0 E4 BF FD | 	call	#_converttoint
0f39c     3D AF 02 F6 | 	mov	local05, result1
0f3a0     04 00 90 FD | 	jmp	#LR__1303
0f3a4                 | LR__1302
0f3a4     10 AE 06 F6 | 	mov	local05, #16
0f3a8                 | LR__1303
0f3a8                 | '     
0f3a8                 | ' if addrval>$80000 then psram.read1(varptr(tempbuf(0)),addrval,4096) : addrval=varptr(tempbuf(0))
0f3a8     00 04 00 FF 
0f3ac     01 AC 56 F2 | 	cmps	local04, ##524289 wc
0f3b0     2C 00 90 CD |  if_b	jmp	#LR__1304
0f3b4     E7 92 02 F6 | 	mov	arg01, fp
0f3b8     10 92 06 F1 | 	add	arg01, #16
0f3bc     56 95 02 F6 | 	mov	arg02, local04
0f3c0     0C 96 C6 F9 | 	decod	arg03, #12
0f3c4     0B 00 00 FF 
0f3c8     CC 64 06 F1 | 	add	objptr, ##5836
0f3cc     88 43 B1 FD | 	call	#_psram_spin2_read1
0f3d0     0B 00 00 FF 
0f3d4     CC 64 86 F1 | 	sub	objptr, ##5836
0f3d8     E7 AC 02 F6 | 	mov	local04, fp
0f3dc     10 AC 06 F1 | 	add	local04, #16
0f3e0                 | LR__1304
0f3e0                 | ' 
0f3e0                 | '  asm
0f3e0     28 AA 62 FD | 	setq	local03
0f3e4     56 AF F2 FC | 	coginit	local05, local04 wc
0f3e8                 | '  
0f3e8                 | ' return cog 
0f3e8     08 00 00 FF 
0f3ec     10 CE 05 F1 | 	add	fp, ##4112
0f3f0     E7 AE 62 FC | 	wrlong	local05, fp
0f3f4     08 CE 05 F1 | 	add	fp, #8
0f3f8     E7 38 68 FC | 	wrlong	#28, fp
0f3fc     08 CE 85 F1 | 	sub	fp, #8
0f400     E7 92 02 F6 | 	mov	arg01, fp
0f404     08 00 00 FF 
0f408     10 CE 85 F1 | 	sub	fp, ##4112
0f40c     F0 E2 BF FD | 	call	#_push
0f410                 | LR__1305
0f410     E7 F0 03 F6 | 	mov	ptra, fp
0f414     F2 00 A0 FD | 	call	#popregs_
0f418                 | _do_coginit_ret
0f418     2D 00 64 FD | 	ret
0f41c                 | 
0f41c                 | ' 
0f41c                 | ' '-------------------- cogstop
0f41c                 | ' 
0f41c                 | ' sub do_cogstop
0f41c                 | _do_cogstop
0f41c     00 CA 05 F6 | 	mov	COUNT_, #0
0f420     E8 00 A0 FD | 	call	#pushregs_
0f424     0C F0 07 F1 | 	add	ptra, #12
0f428     44 E2 BF FD | 	call	#_pop
0f42c     E7 7A 62 FC | 	wrlong	result1, fp
0f430     04 CE 05 F1 | 	add	fp, #4
0f434     E7 7C 62 FC | 	wrlong	result2, fp
0f438     04 CE 05 F1 | 	add	fp, #4
0f43c     E7 7E 62 FC | 	wrlong	result3, fp
0f440     08 CE 85 F1 | 	sub	fp, #8
0f444     E7 92 02 F6 | 	mov	arg01, fp
0f448     00 E4 BF FD | 	call	#_converttoint
0f44c     03 7A 62 FD | 	cogstop	result1
0f450     E7 F0 03 F6 | 	mov	ptra, fp
0f454     F2 00 A0 FD | 	call	#popregs_
0f458                 | _do_cogstop_ret
0f458     2D 00 64 FD | 	ret
0f45c                 | 
0f45c                 | ' 
0f45c                 | ' '-------------------- color
0f45c                 | ' 
0f45c                 | ' sub do_color
0f45c                 | _do_color
0f45c     03 CA 05 F6 | 	mov	COUNT_, #3
0f460     E8 00 A0 FD | 	call	#pushregs_
0f464     08 E2 BF FD | 	call	#_pop
0f468     3D A7 02 F6 | 	mov	local01, result1
0f46c     3E A9 02 F6 | 	mov	local02, result2
0f470     3F AB 02 F6 | 	mov	local03, result3
0f474     38 00 00 FF 
0f478     CC 65 06 F1 | 	add	objptr, ##29132
0f47c     32 A7 62 FC | 	wrlong	local01, objptr
0f480     38 00 00 FF 
0f484     CC 65 86 F1 | 	sub	objptr, ##29132
0f488     E7 F0 03 F6 | 	mov	ptra, fp
0f48c     F2 00 A0 FD | 	call	#popregs_
0f490                 | _do_color_ret
0f490     2D 00 64 FD | 	ret
0f494                 | 
0f494                 | ' 
0f494                 | ' '-------------------- copy
0f494                 | ' 
0f494                 | ' sub do_copy
0f494                 | _do_copy
0f494     08 CA 05 F6 | 	mov	COUNT_, #8
0f498     E8 00 A0 FD | 	call	#pushregs_
0f49c     D0 E1 BF FD | 	call	#_pop
0f4a0     3D A7 02 F6 | 	mov	local01, result1
0f4a4     3E 9B 02 F6 | 	mov	arg05, result2
0f4a8     3F 99 02 F6 | 	mov	arg04, result3
0f4ac     4D A9 02 F6 | 	mov	local02, arg05
0f4b0     4C AB 02 F6 | 	mov	local03, arg04
0f4b4     B8 E1 BF FD | 	call	#_pop
0f4b8     3E 9B 02 F6 | 	mov	arg05, result2
0f4bc     3F 99 02 F6 | 	mov	arg04, result3
0f4c0     3D AD 02 F6 | 	mov	local04, result1
0f4c4     4D AF 02 F6 | 	mov	local05, arg05
0f4c8     4C B1 02 F6 | 	mov	local06, arg04
0f4cc                 | ' 
0f4cc                 | ' t1=pop()
0f4cc                 | ' t2=pop()
0f4cc                 | ' if t2.result_type=result_string2 then 
0f4cc     2B B0 0E F2 | 	cmp	local06, #43 wz
0f4d0     10 00 90 5D |  if_ne	jmp	#LR__1310
0f4d4     56 93 02 F6 | 	mov	arg01, local04
0f4d8     04 E3 BF FD | 	call	#_convertstring
0f4dc     3D B3 02 F6 | 	mov	local07, result1
0f4e0     2C 00 90 FD | 	jmp	#LR__1312
0f4e4                 | LR__1310
0f4e4     1F B0 0E F2 | 	cmp	local06, #31 wz
0f4e8     56 B3 02 A6 |  if_e	mov	local07, local04
0f4ec     20 00 90 AD |  if_e	jmp	#LR__1311
0f4f0     52 00 00 FF 
0f4f4     94 64 06 F1 | 	add	objptr, ##42132
0f4f8     32 95 02 FB | 	rdlong	arg02, objptr
0f4fc     52 00 00 FF 
0f500     94 64 86 F1 | 	sub	objptr, ##42132
0f504     0F 92 06 F6 | 	mov	arg01, #15
0f508     8C 14 B1 FD | 	call	#_printerror
0f50c                 | '   printerror(15,runheader(0)) : return
0f50c     50 03 90 FD | 	jmp	#LR__1319
0f510                 | LR__1311
0f510                 | LR__1312
0f510                 | ' if t1.result_type=result_string2 then 
0f510     2B AA 0E F2 | 	cmp	local03, #43 wz
0f514     10 00 90 5D |  if_ne	jmp	#LR__1313
0f518     53 93 02 F6 | 	mov	arg01, local01
0f51c     C0 E2 BF FD | 	call	#_convertstring
0f520     3D B5 02 F6 | 	mov	local08, result1
0f524     2C 00 90 FD | 	jmp	#LR__1315
0f528                 | LR__1313
0f528     1F AA 0E F2 | 	cmp	local03, #31 wz
0f52c     53 B5 02 A6 |  if_e	mov	local08, local01
0f530     20 00 90 AD |  if_e	jmp	#LR__1314
0f534     52 00 00 FF 
0f538     94 64 06 F1 | 	add	objptr, ##42132
0f53c     32 95 02 FB | 	rdlong	arg02, objptr
0f540     52 00 00 FF 
0f544     94 64 86 F1 | 	sub	objptr, ##42132
0f548     0F 92 06 F6 | 	mov	arg01, #15
0f54c     48 14 B1 FD | 	call	#_printerror
0f550                 | '   printerror(15,runheader(0)) : return
0f550     0C 03 90 FD | 	jmp	#LR__1319
0f554                 | LR__1314
0f554                 | LR__1315
0f554                 | ' 
0f554                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0f554     09 92 06 F6 | 	mov	arg01, #9
0f558     59 95 02 F6 | 	mov	arg02, local07
0f55c     00 96 06 F6 | 	mov	arg03, #0
0f560     DC 5D B1 FD | 	call	#__system___basic_open_string
0f564     20 68 06 F1 | 	add	ptr___system__dat__, #32
0f568     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
0f56c     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0f570     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0f574     54 00 00 FF 
0f578     B4 64 06 F1 | 	add	objptr, ##43188
0f57c     32 7B 62 FC | 	wrlong	result1, objptr
0f580     54 00 00 FF 
0f584     B4 64 86 F1 | 	sub	objptr, ##43188
0f588     0C 01 90 AD |  if_e	jmp	#LR__1316
0f58c     00 92 06 F6 | 	mov	arg01, #0
0f590     80 A7 B1 FD | 	call	#__system___getiolock_0622
0f594     3D 93 02 F6 | 	mov	arg01, result1
0f598     F4 51 B1 FD | 	call	#__system___lockmem
0f59c     95 01 00 FF 
0f5a0     51 95 06 F6 | 	mov	arg02, ##@LR__5964
0f5a4     00 92 06 F6 | 	mov	arg01, #0
0f5a8     00 96 06 F6 | 	mov	arg03, #0
0f5ac     D4 5E B1 FD | 	call	#__system___basic_print_string
0f5b0     54 00 00 FF 
0f5b4     B4 64 06 F1 | 	add	objptr, ##43188
0f5b8     32 95 02 FB | 	rdlong	arg02, objptr
0f5bc     54 00 00 FF 
0f5c0     B4 64 86 F1 | 	sub	objptr, ##43188
0f5c4     00 92 06 F6 | 	mov	arg01, #0
0f5c8     00 96 06 F6 | 	mov	arg03, #0
0f5cc     0A 98 06 F6 | 	mov	arg04, #10
0f5d0     F4 5E B1 FD | 	call	#__system___basic_print_integer
0f5d4     95 01 00 FF 
0f5d8     61 95 06 F6 | 	mov	arg02, ##@LR__5965
0f5dc     00 92 06 F6 | 	mov	arg01, #0
0f5e0     00 96 06 F6 | 	mov	arg03, #0
0f5e4     9C 5E B1 FD | 	call	#__system___basic_print_string
0f5e8     52 00 00 FF 
0f5ec     94 64 06 F1 | 	add	objptr, ##42132
0f5f0     32 95 02 FB | 	rdlong	arg02, objptr
0f5f4     52 00 00 FF 
0f5f8     94 64 86 F1 | 	sub	objptr, ##42132
0f5fc     00 92 06 F6 | 	mov	arg01, #0
0f600     00 96 06 F6 | 	mov	arg03, #0
0f604     0A 98 06 F6 | 	mov	arg04, #10
0f608     FC 5E B1 FD | 	call	#__system___basic_print_unsigned
0f60c     95 01 00 FF 
0f610     6B 95 06 F6 | 	mov	arg02, ##@LR__5966
0f614     00 92 06 F6 | 	mov	arg01, #0
0f618     00 96 06 F6 | 	mov	arg03, #0
0f61c     64 5E B1 FD | 	call	#__system___basic_print_string
0f620     00 B4 06 F6 | 	mov	local08, #0
0f624     54 00 00 FF 
0f628     B4 64 06 F1 | 	add	objptr, ##43188
0f62c     32 93 02 FB | 	rdlong	arg01, objptr
0f630     54 00 00 FF 
0f634     B4 64 86 F1 | 	sub	objptr, ##43188
0f638     04 73 B1 FD | 	call	#__system___strerror
0f63c     3D 95 02 F6 | 	mov	arg02, result1
0f640     5A 93 02 F6 | 	mov	arg01, local08
0f644     00 96 06 F6 | 	mov	arg03, #0
0f648     38 5E B1 FD | 	call	#__system___basic_print_string
0f64c     95 01 00 FF 
0f650     6E 95 06 F6 | 	mov	arg02, ##@LR__5967
0f654     00 92 06 F6 | 	mov	arg01, #0
0f658     00 96 06 F6 | 	mov	arg03, #0
0f65c     24 5E B1 FD | 	call	#__system___basic_print_string
0f660     00 92 06 F6 | 	mov	arg01, #0
0f664     59 95 02 F6 | 	mov	arg02, local07
0f668     00 96 06 F6 | 	mov	arg03, #0
0f66c     14 5E B1 FD | 	call	#__system___basic_print_string
0f670     00 92 06 F6 | 	mov	arg01, #0
0f674     0A 94 06 F6 | 	mov	arg02, #10
0f678     00 96 06 F6 | 	mov	arg03, #0
0f67c     AC 5D B1 FD | 	call	#__system___basic_print_char
0f680     00 92 06 F6 | 	mov	arg01, #0
0f684     8C A6 B1 FD | 	call	#__system___getiolock_0622
0f688     3D 01 68 FC | 	wrlong	#0, result1
0f68c     09 92 06 F6 | 	mov	arg01, #9
0f690     D8 9C B1 FD | 	call	#__system__close
0f694     C8 01 90 FD | 	jmp	#LR__1319
0f698                 | LR__1316
0f698                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0f698     08 92 06 F6 | 	mov	arg01, #8
0f69c     5A 95 02 F6 | 	mov	arg02, local08
0f6a0     0D 96 06 F6 | 	mov	arg03, #13
0f6a4     98 5C B1 FD | 	call	#__system___basic_open_string
0f6a8     20 68 06 F1 | 	add	ptr___system__dat__, #32
0f6ac     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
0f6b0     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0f6b4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0f6b8     54 00 00 FF 
0f6bc     B4 64 06 F1 | 	add	objptr, ##43188
0f6c0     32 7B 62 FC | 	wrlong	result1, objptr
0f6c4     54 00 00 FF 
0f6c8     B4 64 86 F1 | 	sub	objptr, ##43188
0f6cc     0C 01 90 AD |  if_e	jmp	#LR__1317
0f6d0     00 92 06 F6 | 	mov	arg01, #0
0f6d4     3C A6 B1 FD | 	call	#__system___getiolock_0622
0f6d8     3D 93 02 F6 | 	mov	arg01, result1
0f6dc     B0 50 B1 FD | 	call	#__system___lockmem
0f6e0     95 01 00 FF 
0f6e4     7C 95 06 F6 | 	mov	arg02, ##@LR__5968
0f6e8     00 92 06 F6 | 	mov	arg01, #0
0f6ec     00 96 06 F6 | 	mov	arg03, #0
0f6f0     90 5D B1 FD | 	call	#__system___basic_print_string
0f6f4     54 00 00 FF 
0f6f8     B4 64 06 F1 | 	add	objptr, ##43188
0f6fc     32 95 02 FB | 	rdlong	arg02, objptr
0f700     54 00 00 FF 
0f704     B4 64 86 F1 | 	sub	objptr, ##43188
0f708     00 92 06 F6 | 	mov	arg01, #0
0f70c     00 96 06 F6 | 	mov	arg03, #0
0f710     0A 98 06 F6 | 	mov	arg04, #10
0f714     B0 5D B1 FD | 	call	#__system___basic_print_integer
0f718     95 01 00 FF 
0f71c     8C 95 06 F6 | 	mov	arg02, ##@LR__5969
0f720     00 92 06 F6 | 	mov	arg01, #0
0f724     00 96 06 F6 | 	mov	arg03, #0
0f728     58 5D B1 FD | 	call	#__system___basic_print_string
0f72c     52 00 00 FF 
0f730     94 64 06 F1 | 	add	objptr, ##42132
0f734     32 95 02 FB | 	rdlong	arg02, objptr
0f738     52 00 00 FF 
0f73c     94 64 86 F1 | 	sub	objptr, ##42132
0f740     00 92 06 F6 | 	mov	arg01, #0
0f744     00 96 06 F6 | 	mov	arg03, #0
0f748     0A 98 06 F6 | 	mov	arg04, #10
0f74c     B8 5D B1 FD | 	call	#__system___basic_print_unsigned
0f750     95 01 00 FF 
0f754     96 95 06 F6 | 	mov	arg02, ##@LR__5970
0f758     00 92 06 F6 | 	mov	arg01, #0
0f75c     00 96 06 F6 | 	mov	arg03, #0
0f760     20 5D B1 FD | 	call	#__system___basic_print_string
0f764     00 B2 06 F6 | 	mov	local07, #0
0f768     54 00 00 FF 
0f76c     B4 64 06 F1 | 	add	objptr, ##43188
0f770     32 93 02 FB | 	rdlong	arg01, objptr
0f774     54 00 00 FF 
0f778     B4 64 86 F1 | 	sub	objptr, ##43188
0f77c     C0 71 B1 FD | 	call	#__system___strerror
0f780     3D 95 02 F6 | 	mov	arg02, result1
0f784     59 93 02 F6 | 	mov	arg01, local07
0f788     00 96 06 F6 | 	mov	arg03, #0
0f78c     F4 5C B1 FD | 	call	#__system___basic_print_string
0f790     95 01 00 FF 
0f794     99 95 06 F6 | 	mov	arg02, ##@LR__5971
0f798     00 92 06 F6 | 	mov	arg01, #0
0f79c     00 96 06 F6 | 	mov	arg03, #0
0f7a0     E0 5C B1 FD | 	call	#__system___basic_print_string
0f7a4     00 92 06 F6 | 	mov	arg01, #0
0f7a8     5A 95 02 F6 | 	mov	arg02, local08
0f7ac     00 96 06 F6 | 	mov	arg03, #0
0f7b0     D0 5C B1 FD | 	call	#__system___basic_print_string
0f7b4     00 92 06 F6 | 	mov	arg01, #0
0f7b8     0A 94 06 F6 | 	mov	arg02, #10
0f7bc     00 96 06 F6 | 	mov	arg03, #0
0f7c0     68 5C B1 FD | 	call	#__system___basic_print_char
0f7c4     00 92 06 F6 | 	mov	arg01, #0
0f7c8     48 A5 B1 FD | 	call	#__system___getiolock_0622
0f7cc     3D 01 68 FC | 	wrlong	#0, result1
0f7d0     08 92 06 F6 | 	mov	arg01, #8
0f7d4     94 9B B1 FD | 	call	#__system__close
0f7d8     84 00 90 FD | 	jmp	#LR__1319
0f7dc                 | LR__1317
0f7dc                 | ' 
0f7dc                 | ' do
0f7dc                 | LR__1318
0f7dc                 | '   get #9,,block(0),1024,r
0f7dc     32 97 02 F6 | 	mov	arg03, objptr
0f7e0     50 00 00 FF 
0f7e4     58 96 06 F1 | 	add	arg03, ##41048
0f7e8     09 92 06 F6 | 	mov	arg01, #9
0f7ec     00 94 06 F6 | 	mov	arg02, #0
0f7f0     0A 98 C6 F9 | 	decod	arg04, #10
0f7f4     01 9A 06 F6 | 	mov	arg05, #1
0f7f8     10 5E B1 FD | 	call	#__system___basic_get
0f7fc     54 00 00 FF 
0f800     EC 64 06 F1 | 	add	objptr, ##43244
0f804     32 7B 62 FC | 	wrlong	result1, objptr
0f808                 | '   put #8,,block(0),r
0f808     04 00 00 FF 
0f80c     94 64 86 F1 | 	sub	objptr, ##2196
0f810     32 97 02 F6 | 	mov	arg03, objptr
0f814     3D 99 02 F6 | 	mov	arg04, result1
0f818     50 00 00 FF 
0f81c     58 64 86 F1 | 	sub	objptr, ##41048
0f820     08 92 06 F6 | 	mov	arg01, #8
0f824     00 94 06 F6 | 	mov	arg02, #0
0f828     01 9A 06 F6 | 	mov	arg05, #1
0f82c     64 5D B1 FD | 	call	#__system___basic_put
0f830     54 00 00 FF 
0f834     EC 64 06 F1 | 	add	objptr, ##43244
0f838     32 B5 02 FB | 	rdlong	local08, objptr
0f83c     54 00 00 FF 
0f840     EC 64 86 F1 | 	sub	objptr, ##43244
0f844     02 00 00 FF 
0f848     00 B4 0E F2 | 	cmp	local08, ##1024 wz
0f84c     8C FF 9F AD |  if_e	jmp	#LR__1318
0f850                 | ' close #8
0f850     08 92 06 F6 | 	mov	arg01, #8
0f854     14 9B B1 FD | 	call	#__system__close
0f858                 | ' close #9
0f858     09 92 06 F6 | 	mov	arg01, #9
0f85c     0C 9B B1 FD | 	call	#__system__close
0f860                 | LR__1319
0f860     E7 F0 03 F6 | 	mov	ptra, fp
0f864     F2 00 A0 FD | 	call	#popregs_
0f868                 | _do_copy_ret
0f868     2D 00 64 FD | 	ret
0f86c                 | 
0f86c                 | ' 
0f86c                 | ' '-------------------- cos
0f86c                 | ' 
0f86c                 | ' sub do_cos
0f86c                 | _do_cos
0f86c     01 CA 05 F6 | 	mov	COUNT_, #1
0f870     E8 00 A0 FD | 	call	#pushregs_
0f874     10 F0 07 F1 | 	add	ptra, #16
0f878     4C 00 00 FF 
0f87c     24 64 06 F1 | 	add	objptr, ##38948
0f880     32 97 02 FB | 	rdlong	arg03, objptr
0f884     4B 95 02 F6 | 	mov	arg02, arg03
0f888     01 94 66 F0 | 	shl	arg02, #1
0f88c     4B 95 02 F1 | 	add	arg02, arg03
0f890     02 94 66 F0 | 	shl	arg02, #2
0f894     03 00 00 FF 
0f898     04 64 86 F1 | 	sub	objptr, ##1540
0f89c     32 95 02 F1 | 	add	arg02, objptr
0f8a0     4A 97 02 FB | 	rdlong	arg03, arg02
0f8a4                 | ' 
0f8a4                 | ' numpar=compiledline(lineptr_e).result.uresult
0f8a4                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0f8a4     02 96 16 F2 | 	cmp	arg03, #2 wc
0f8a8     49 00 00 FF 
0f8ac     20 64 86 F1 | 	sub	objptr, ##37408
0f8b0     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0f8b4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1320
0f8b8     00 92 06 F6 | 	mov	arg01, #0
0f8bc     54 A4 B1 FD | 	call	#__system___getiolock_0622
0f8c0     3D 93 02 F6 | 	mov	arg01, result1
0f8c4     C8 4E B1 FD | 	call	#__system___lockmem
0f8c8     95 01 00 FF 
0f8cc     A7 95 06 F6 | 	mov	arg02, ##@LR__5972
0f8d0     00 92 06 F6 | 	mov	arg01, #0
0f8d4     00 96 06 F6 | 	mov	arg03, #0
0f8d8     A8 5B B1 FD | 	call	#__system___basic_print_string
0f8dc     00 92 06 F6 | 	mov	arg01, #0
0f8e0     30 A4 B1 FD | 	call	#__system___getiolock_0622
0f8e4     3D 01 68 FC | 	wrlong	#0, result1
0f8e8     27 92 06 F6 | 	mov	arg01, #39
0f8ec     00 94 06 F6 | 	mov	arg02, #0
0f8f0     A4 10 B1 FD | 	call	#_printerror
0f8f4     78 00 90 FD | 	jmp	#LR__1321
0f8f8                 | LR__1320
0f8f8     74 DD BF FD | 	call	#_pop
0f8fc     E7 7A 62 FC | 	wrlong	result1, fp
0f900     04 CE 05 F1 | 	add	fp, #4
0f904     E7 7C 62 FC | 	wrlong	result2, fp
0f908     04 CE 05 F1 | 	add	fp, #4
0f90c     E7 7E 62 FC | 	wrlong	result3, fp
0f910     08 CE 85 F1 | 	sub	fp, #8
0f914     54 00 00 FF 
0f918     84 64 06 F1 | 	add	objptr, ##43140
0f91c     32 A7 02 FB | 	rdlong	local01, objptr
0f920     54 00 00 FF 
0f924     84 64 86 F1 | 	sub	objptr, ##43140
0f928     E7 92 02 F6 | 	mov	arg01, fp
0f92c     D8 DF BF FD | 	call	#_converttofloat
0f930     3D 95 02 F6 | 	mov	arg02, result1
0f934     53 93 02 F6 | 	mov	arg01, local01
0f938     24 75 B1 FD | 	call	#__system___float_mul
0f93c     3D 95 02 F6 | 	mov	arg02, result1
0f940     87 E4 1F FF 
0f944     DB 93 06 F6 | 	mov	arg01, ##1070141403
0f948     1F 94 E6 F4 | 	bitnot	arg02, #31
0f94c     40 71 B1 FD | 	call	#__system___float_add
0f950     3D 93 02 F6 | 	mov	arg01, result1
0f954     78 7E B1 FD | 	call	#__system____builtin_sinf
0f958     E7 7A 62 FC | 	wrlong	result1, fp
0f95c     08 CE 05 F1 | 	add	fp, #8
0f960     E7 3C 68 FC | 	wrlong	#30, fp
0f964     08 CE 85 F1 | 	sub	fp, #8
0f968     E7 92 02 F6 | 	mov	arg01, fp
0f96c     90 DD BF FD | 	call	#_push
0f970                 | LR__1321
0f970     E7 F0 03 F6 | 	mov	ptra, fp
0f974     F2 00 A0 FD | 	call	#popregs_
0f978                 | _do_cos_ret
0f978     2D 00 64 FD | 	ret
0f97c                 | 
0f97c                 | ' 
0f97c                 | ' '-------------------- cursor
0f97c                 | ' 
0f97c                 | ' sub do_cursor
0f97c                 | _do_cursor
0f97c     F0 DC BF FD | 	call	#_pop
0f980     00 7A 4E F2 | 	cmps	result1, #0 wz
0f984                 | ' t1=pop()
0f984                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0f984     14 00 90 5D |  if_ne	jmp	#LR__1330
0f988     11 92 06 F6 | 	mov	arg01, #17
0f98c     00 94 06 F6 | 	mov	arg02, #0
0f990     00 96 06 F6 | 	mov	arg03, #0
0f994     60 20 B1 FD | 	call	#_hg010b_spin2_setspritesize
0f998     10 00 90 FD | 	jmp	#LR__1331
0f99c                 | LR__1330
0f99c     11 92 06 F6 | 	mov	arg01, #17
0f9a0     08 94 06 F6 | 	mov	arg02, #8
0f9a4     10 96 06 F6 | 	mov	arg03, #16
0f9a8     4C 20 B1 FD | 	call	#_hg010b_spin2_setspritesize
0f9ac                 | LR__1331
0f9ac                 | _do_cursor_ret
0f9ac     2D 00 64 FD | 	ret
0f9b0                 | 
0f9b0                 | ' 
0f9b0                 | ' '-------------------- defchar
0f9b0                 | ' 
0f9b0                 | ' sub do_defchar
0f9b0                 | _do_defchar
0f9b0     04 CA 05 F6 | 	mov	COUNT_, #4
0f9b4     E8 00 A0 FD | 	call	#pushregs_
0f9b8     28 F0 07 F1 | 	add	ptra, #40
0f9bc     B0 DC BF FD | 	call	#_pop
0f9c0     3F 95 02 F6 | 	mov	arg02, result3
0f9c4     E7 7A 62 FC | 	wrlong	result1, fp
0f9c8     04 CE 05 F1 | 	add	fp, #4
0f9cc     E7 7C 62 FC | 	wrlong	result2, fp
0f9d0     04 CE 05 F1 | 	add	fp, #4
0f9d4     E7 94 62 FC | 	wrlong	arg02, fp
0f9d8     08 CE 85 F1 | 	sub	fp, #8
0f9dc     E7 92 02 F6 | 	mov	arg01, fp
0f9e0     68 DE BF FD | 	call	#_converttoint
0f9e4     3D A7 02 F6 | 	mov	local01, result1
0f9e8     84 DC BF FD | 	call	#_pop
0f9ec     3F 95 02 F6 | 	mov	arg02, result3
0f9f0     E7 7A 62 FC | 	wrlong	result1, fp
0f9f4     04 CE 05 F1 | 	add	fp, #4
0f9f8     E7 7C 62 FC | 	wrlong	result2, fp
0f9fc     04 CE 05 F1 | 	add	fp, #4
0fa00     E7 94 62 FC | 	wrlong	arg02, fp
0fa04     08 CE 85 F1 | 	sub	fp, #8
0fa08     E7 92 02 F6 | 	mov	arg01, fp
0fa0c     3C DE BF FD | 	call	#_converttoint
0fa10     3D A9 02 F6 | 	mov	local02, result1
0fa14                 | ' 
0fa14                 | ' t1=pop() : cptr=converttoint(t1)
0fa14                 | ' t1=pop() : c=converttoint(t1)
0fa14                 | ' if cptr<$80000 then 
0fa14     00 04 00 FF 
0fa18     00 A6 16 F2 | 	cmp	local01, ##524288 wc
0fa1c     10 00 90 3D |  if_ae	jmp	#LR__1340
0fa20     54 93 02 F6 | 	mov	arg01, local02
0fa24     53 95 02 F6 | 	mov	arg02, local01
0fa28     D4 2B B1 FD | 	call	#_hg010b_spin2_defchar
0fa2c     40 00 90 FD | 	jmp	#LR__1342
0fa30                 | LR__1340
0fa30                 | '   for i=0 to 15: buf(i)=pspeek(cptr+i): next i
0fa30     00 AA 06 F6 | 	mov	local03, #0
0fa34                 | LR__1341
0fa34     55 AD 02 F6 | 	mov	local04, local03
0fa38     E7 94 02 F6 | 	mov	arg02, fp
0fa3c     14 94 06 F1 | 	add	arg02, #20
0fa40     4A AD 02 F1 | 	add	local04, arg02
0fa44     53 93 02 F6 | 	mov	arg01, local01
0fa48     55 93 02 F1 | 	add	arg01, local03
0fa4c     C4 11 B1 FD | 	call	#_pspeek
0fa50     56 7B 42 FC | 	wrbyte	result1, local04
0fa54     01 AA 06 F1 | 	add	local03, #1
0fa58     10 AA 56 F2 | 	cmps	local03, #16 wc
0fa5c     D4 FF 9F CD |  if_b	jmp	#LR__1341
0fa60     E7 94 02 F6 | 	mov	arg02, fp
0fa64     14 94 06 F1 | 	add	arg02, #20
0fa68     54 93 02 F6 | 	mov	arg01, local02
0fa6c     90 2B B1 FD | 	call	#_hg010b_spin2_defchar
0fa70                 | LR__1342
0fa70     E7 F0 03 F6 | 	mov	ptra, fp
0fa74     F2 00 A0 FD | 	call	#popregs_
0fa78                 | _do_defchar_ret
0fa78     2D 00 64 FD | 	ret
0fa7c                 | 
0fa7c                 | ' 
0fa7c                 | ' '-------------------- defenv
0fa7c                 | ' 
0fa7c                 | ' sub do_defenv
0fa7c                 | _do_defenv
0fa7c     14 CA 05 F6 | 	mov	COUNT_, #20
0fa80     E8 00 A0 FD | 	call	#pushregs_
0fa84     58 F0 07 F1 | 	add	ptra, #88
0fa88     4C 00 00 FF 
0fa8c     24 64 06 F1 | 	add	objptr, ##38948
0fa90     32 9B 02 FB | 	rdlong	arg05, objptr
0fa94     4D 99 02 F6 | 	mov	arg04, arg05
0fa98     01 98 66 F0 | 	shl	arg04, #1
0fa9c     4D 99 02 F1 | 	add	arg04, arg05
0faa0     02 98 66 F0 | 	shl	arg04, #2
0faa4     03 00 00 FF 
0faa8     04 64 86 F1 | 	sub	objptr, ##1540
0faac     32 99 02 F1 | 	add	arg04, objptr
0fab0     4C A7 02 FB | 	rdlong	local01, arg04
0fab4                 | ' 
0fab4                 | ' numpar=compiledline(lineptr_e).result.uresult
0fab4                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0fab4     02 A6 0E F2 | 	cmp	local01, #2 wz
0fab8     49 00 00 FF 
0fabc     20 64 86 F1 | 	sub	objptr, ##37408
0fac0     05 A6 0E 52 |  if_ne	cmp	local01, #5 wz
0fac4     50 07 90 5D |  if_ne	jmp	#LR__1370
0fac8                 | ' 
0fac8                 | ' if numpar=2 then						' env from .h2 or from a pointer
0fac8     02 A6 0E F2 | 	cmp	local01, #2 wz
0facc     1C 03 90 5D |  if_ne	jmp	#LR__1362
0fad0     9C DB BF FD | 	call	#_pop
0fad4     3F 9B 02 F6 | 	mov	arg05, result3
0fad8     40 CE 05 F1 | 	add	fp, #64
0fadc     E7 7A 62 FC | 	wrlong	result1, fp
0fae0     04 CE 05 F1 | 	add	fp, #4
0fae4     E7 7C 62 FC | 	wrlong	result2, fp
0fae8     04 CE 05 F1 | 	add	fp, #4
0faec     E7 9A 62 FC | 	wrlong	arg05, fp
0faf0                 | '   t1=pop()
0faf0                 | '   if t1.result_type=result_string2 then 
0faf0     48 CE 85 F1 | 	sub	fp, #72
0faf4     2B 9A 0E F2 | 	cmp	arg05, #43 wz
0faf8     18 00 90 5D |  if_ne	jmp	#LR__1350
0fafc     40 CE 05 F1 | 	add	fp, #64
0fb00     E7 92 02 FB | 	rdlong	arg01, fp
0fb04     40 CE 85 F1 | 	sub	fp, #64
0fb08     D4 DC BF FD | 	call	#_convertstring
0fb0c     3D A9 02 F6 | 	mov	local02, result1
0fb10     38 00 90 FD | 	jmp	#LR__1352
0fb14                 | LR__1350
0fb14     48 CE 05 F1 | 	add	fp, #72
0fb18     E7 9A 02 FB | 	rdlong	arg05, fp
0fb1c     48 CE 85 F1 | 	sub	fp, #72
0fb20     1F 9A 0E F2 | 	cmp	arg05, #31 wz
0fb24     40 CE 05 A1 |  if_e	add	fp, #64
0fb28     E7 A8 02 AB |  if_e	rdlong	local02, fp
0fb2c     40 CE 85 A1 |  if_e	sub	fp, #64
0fb30     18 00 90 AD |  if_e	jmp	#LR__1351
0fb34     95 01 00 FF 
0fb38     AD A9 06 F6 | 	mov	local02, ##@LR__5973
0fb3c     E7 92 02 F6 | 	mov	arg01, fp
0fb40     40 92 06 F1 | 	add	arg01, #64
0fb44     04 DD BF FD | 	call	#_converttoint
0fb48     3D AB 02 F6 | 	mov	local03, result1
0fb4c                 | LR__1351
0fb4c                 | LR__1352
0fb4c                 | '   if s1<>"" then 
0fb4c     95 01 00 FF 
0fb50     AE 95 06 F6 | 	mov	arg02, ##@LR__5974
0fb54     54 93 02 F6 | 	mov	arg01, local02
0fb58     5C 4C B1 FD | 	call	#__system___string_cmp
0fb5c     00 7A 0E F2 | 	cmp	result1, #0 wz
0fb60     BC 01 90 AD |  if_e	jmp	#LR__1356
0fb64     08 DB BF FD | 	call	#_pop
0fb68     3F 9B 02 F6 | 	mov	arg05, result3
0fb6c     40 CE 05 F1 | 	add	fp, #64
0fb70     E7 7A 62 FC | 	wrlong	result1, fp
0fb74     04 CE 05 F1 | 	add	fp, #4
0fb78     E7 7C 62 FC | 	wrlong	result2, fp
0fb7c     04 CE 05 F1 | 	add	fp, #4
0fb80     E7 9A 62 FC | 	wrlong	arg05, fp
0fb84     08 CE 85 F1 | 	sub	fp, #8
0fb88     E7 92 02 F6 | 	mov	arg01, fp
0fb8c     40 CE 85 F1 | 	sub	fp, #64
0fb90     B8 DC BF FD | 	call	#_converttoint
0fb94     3D AD 02 F6 | 	mov	local04, result1
0fb98                 | '     t1=pop()
0fb98                 | '     channel=converttoint(t1) 
0fb98                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0fb98     09 92 06 F6 | 	mov	arg01, #9
0fb9c     CC 97 B1 FD | 	call	#__system__close
0fba0     09 AE 06 F6 | 	mov	local05, #9
0fba4     95 01 00 FF 
0fba8     AF 93 06 F6 | 	mov	arg01, ##@LR__5975
0fbac     54 95 02 F6 | 	mov	arg02, local02
0fbb0     38 4C B1 FD | 	call	#__system___string_concat
0fbb4     3D 95 02 F6 | 	mov	arg02, result1
0fbb8     57 93 02 F6 | 	mov	arg01, local05
0fbbc     00 96 06 F6 | 	mov	arg03, #0
0fbc0     7C 57 B1 FD | 	call	#__system___basic_open_string
0fbc4     20 68 06 F1 | 	add	ptr___system__dat__, #32
0fbc8     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0fbcc     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0fbd0     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0fbd4     3D B1 0A F6 | 	mov	local06, result1 wz
0fbd8                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0fbd8     8C 00 90 AD |  if_e	jmp	#LR__1353
0fbdc     00 92 06 F6 | 	mov	arg01, #0
0fbe0     30 A1 B1 FD | 	call	#__system___getiolock_0622
0fbe4     3D 93 02 F6 | 	mov	arg01, result1
0fbe8     A4 4B B1 FD | 	call	#__system___lockmem
0fbec     95 01 00 FF 
0fbf0     BC 95 06 F6 | 	mov	arg02, ##@LR__5976
0fbf4     00 92 06 F6 | 	mov	arg01, #0
0fbf8     00 96 06 F6 | 	mov	arg03, #0
0fbfc     84 58 B1 FD | 	call	#__system___basic_print_string
0fc00     00 92 06 F6 | 	mov	arg01, #0
0fc04     58 95 02 F6 | 	mov	arg02, local06
0fc08     00 96 06 F6 | 	mov	arg03, #0
0fc0c     0A 98 06 F6 | 	mov	arg04, #10
0fc10     B4 58 B1 FD | 	call	#__system___basic_print_integer
0fc14     95 01 00 FF 
0fc18     CA 95 06 F6 | 	mov	arg02, ##@LR__5977
0fc1c     00 92 06 F6 | 	mov	arg01, #0
0fc20     00 96 06 F6 | 	mov	arg03, #0
0fc24     5C 58 B1 FD | 	call	#__system___basic_print_string
0fc28     58 93 02 F6 | 	mov	arg01, local06
0fc2c     10 6D B1 FD | 	call	#__system___strerror
0fc30     3D 95 02 F6 | 	mov	arg02, result1
0fc34     00 92 06 F6 | 	mov	arg01, #0
0fc38     00 96 06 F6 | 	mov	arg03, #0
0fc3c     44 58 B1 FD | 	call	#__system___basic_print_string
0fc40     00 92 06 F6 | 	mov	arg01, #0
0fc44     0A 94 06 F6 | 	mov	arg02, #10
0fc48     00 96 06 F6 | 	mov	arg03, #0
0fc4c     DC 57 B1 FD | 	call	#__system___basic_print_char
0fc50     00 92 06 F6 | 	mov	arg01, #0
0fc54     BC A0 B1 FD | 	call	#__system___getiolock_0622
0fc58     3D 01 68 FC | 	wrlong	#0, result1
0fc5c     09 92 06 F6 | 	mov	arg01, #9
0fc60     08 97 B1 FD | 	call	#__system__close
0fc64     B0 05 90 FD | 	jmp	#LR__1370
0fc68                 | LR__1353
0fc68                 | '     get #9,17,envbuf8(channel,0),256
0fc68     56 97 02 F6 | 	mov	arg03, local04
0fc6c     09 96 66 F0 | 	shl	arg03, #9
0fc70     56 97 02 F1 | 	add	arg03, local04
0fc74     32 9B 02 F6 | 	mov	arg05, objptr
0fc78     0E 00 00 FF 
0fc7c     38 9A 06 F1 | 	add	arg05, ##7224
0fc80     4D 97 02 F1 | 	add	arg03, arg05
0fc84     09 92 06 F6 | 	mov	arg01, #9
0fc88     11 94 06 F6 | 	mov	arg02, #17
0fc8c     00 99 06 F6 | 	mov	arg04, #256
0fc90     01 9A 06 F6 | 	mov	arg05, #1
0fc94     74 59 B1 FD | 	call	#__system___basic_get
0fc98                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0fc98     FF B2 06 F6 | 	mov	local07, #255
0fc9c     0E 00 00 FF 
0fca0     38 64 06 F1 | 	add	objptr, ##7224
0fca4     D7 24 48 FB | 	callpa	#(@LR__1355-@LR__1354)>>2,fcache_load_ptr_
0fca8                 | LR__1354
0fca8     56 B1 02 F6 | 	mov	local06, local04
0fcac     09 B0 66 F0 | 	shl	local06, #9
0fcb0     32 B1 02 F1 | 	add	local06, objptr
0fcb4     59 AF 02 F6 | 	mov	local05, local07
0fcb8     01 AE 66 F0 | 	shl	local05, #1
0fcbc     58 AF 02 F1 | 	add	local05, local06
0fcc0     56 AB 02 F6 | 	mov	local03, local04
0fcc4     09 AA 66 F0 | 	shl	local03, #9
0fcc8     56 AB 02 F1 | 	add	local03, local04
0fccc     32 AB 02 F1 | 	add	local03, objptr
0fcd0     59 B1 02 F6 | 	mov	local06, local07
0fcd4     55 B1 02 F1 | 	add	local06, local03
0fcd8     58 B1 C2 FA | 	rdbyte	local06, local06
0fcdc     08 B0 66 F0 | 	shl	local06, #8
0fce0     57 B1 52 FC | 	wrword	local06, local05
0fce4     01 B2 86 F1 | 	sub	local07, #1
0fce8     00 B2 56 F2 | 	cmps	local07, #0 wc
0fcec     B8 FF 9F 3D |  if_ae	jmp	#LR__1354
0fcf0                 | LR__1355
0fcf0     0E 00 00 FF 
0fcf4     38 64 86 F1 | 	sub	objptr, ##7224
0fcf8                 | '     close #9
0fcf8     09 92 06 F6 | 	mov	arg01, #9
0fcfc     6C 96 B1 FD | 	call	#__system__close
0fd00     09 AC 66 F0 | 	shl	local04, #9
0fd04     32 B3 02 F6 | 	mov	local07, objptr
0fd08     0E 00 00 FF 
0fd0c     38 B2 06 F1 | 	add	local07, ##7224
0fd10     59 AD 02 F1 | 	add	local04, local07
0fd14     FE AD 06 F1 | 	add	local04, #510
0fd18     56 01 58 FC | 	wrword	#0, local04
0fd1c                 | '     envbuf(channel,255)=0                                                              
0fd1c                 | '     return
0fd1c     F8 04 90 FD | 	jmp	#LR__1370
0fd20                 | LR__1356
0fd20                 | '     if wptr < $80000 then 
0fd20     00 04 00 FF 
0fd24     00 AA 56 F2 | 	cmps	local03, ##524288 wc
0fd28     54 00 90 3D |  if_ae	jmp	#LR__1359
0fd2c                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0fd2c     00 B2 06 F6 | 	mov	local07, #0
0fd30     D7 24 48 FB | 	callpa	#(@LR__1358-@LR__1357)>>2,fcache_load_ptr_
0fd34                 | LR__1357
0fd34     56 B1 02 F6 | 	mov	local06, local04
0fd38     09 B0 66 F0 | 	shl	local06, #9
0fd3c     32 AF 02 F6 | 	mov	local05, objptr
0fd40     0E 00 00 FF 
0fd44     38 AE 06 F1 | 	add	local05, ##7224
0fd48     57 B1 02 F1 | 	add	local06, local05
0fd4c     59 AF 02 F6 | 	mov	local05, local07
0fd50     01 AE 66 F0 | 	shl	local05, #1
0fd54     58 AF 02 F1 | 	add	local05, local06
0fd58     55 93 02 F6 | 	mov	arg01, local03
0fd5c     59 B1 02 F6 | 	mov	local06, local07
0fd60     01 B0 66 F0 | 	shl	local06, #1
0fd64     58 93 02 F1 | 	add	arg01, local06
0fd68     49 7B E2 FA | 	rdword	result1, arg01
0fd6c     57 7B 52 FC | 	wrword	result1, local05
0fd70     01 B2 06 F1 | 	add	local07, #1
0fd74     00 B3 56 F2 | 	cmps	local07, #256 wc
0fd78     B8 FF 9F CD |  if_b	jmp	#LR__1357
0fd7c                 | LR__1358
0fd7c     4C 00 90 FD | 	jmp	#LR__1361
0fd80                 | LR__1359
0fd80                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0fd80     00 B2 06 F6 | 	mov	local07, #0
0fd84                 | LR__1360
0fd84     56 B1 02 F6 | 	mov	local06, local04
0fd88     09 B0 66 F0 | 	shl	local06, #9
0fd8c     32 AF 02 F6 | 	mov	local05, objptr
0fd90     0E 00 00 FF 
0fd94     38 AE 06 F1 | 	add	local05, ##7224
0fd98     57 B1 02 F1 | 	add	local06, local05
0fd9c     59 AF 02 F6 | 	mov	local05, local07
0fda0     01 AE 66 F0 | 	shl	local05, #1
0fda4     58 AF 02 F1 | 	add	local05, local06
0fda8     55 93 02 F6 | 	mov	arg01, local03
0fdac     59 B1 02 F6 | 	mov	local06, local07
0fdb0     01 B0 66 F0 | 	shl	local06, #1
0fdb4     58 93 02 F1 | 	add	arg01, local06
0fdb8     F0 0E B1 FD | 	call	#_psdpeek
0fdbc     57 7B 52 FC | 	wrword	result1, local05
0fdc0     01 B2 06 F1 | 	add	local07, #1
0fdc4     00 B3 56 F2 | 	cmps	local07, #256 wc
0fdc8     B8 FF 9F CD |  if_b	jmp	#LR__1360
0fdcc                 | LR__1361
0fdcc     09 AC 66 F0 | 	shl	local04, #9
0fdd0     32 B3 02 F6 | 	mov	local07, objptr
0fdd4     0E 00 00 FF 
0fdd8     38 B2 06 F1 | 	add	local07, ##7224
0fddc     59 AD 02 F1 | 	add	local04, local07
0fde0     FE AD 06 F1 | 	add	local04, #510
0fde4     56 01 58 FC | 	wrword	#0, local04
0fde8                 | '     envbuf(channel,255)=0
0fde8                 | '     return   
0fde8     2C 04 90 FD | 	jmp	#LR__1370
0fdec                 | LR__1362
0fdec                 | ' 
0fdec                 | ' if numpar=5 then   						 'simple adsr
0fdec     05 A6 0E F2 | 	cmp	local01, #5 wz
0fdf0     08 04 90 5D |  if_ne	jmp	#LR__1369
0fdf4     78 D8 BF FD | 	call	#_pop
0fdf8     3F B3 02 F6 | 	mov	local07, result3
0fdfc     40 CE 05 F1 | 	add	fp, #64
0fe00     E7 7A 62 FC | 	wrlong	result1, fp
0fe04     04 CE 05 F1 | 	add	fp, #4
0fe08     E7 7C 62 FC | 	wrlong	result2, fp
0fe0c     04 CE 05 F1 | 	add	fp, #4
0fe10     E7 B2 62 FC | 	wrlong	local07, fp
0fe14     08 CE 85 F1 | 	sub	fp, #8
0fe18     E7 92 02 F6 | 	mov	arg01, fp
0fe1c     40 CE 85 F1 | 	sub	fp, #64
0fe20     E4 DA BF FD | 	call	#_converttofloat
0fe24     3D B3 02 F6 | 	mov	local07, result1
0fe28     44 D8 BF FD | 	call	#_pop
0fe2c     3F B1 02 F6 | 	mov	local06, result3
0fe30     40 CE 05 F1 | 	add	fp, #64
0fe34     E7 7A 62 FC | 	wrlong	result1, fp
0fe38     04 CE 05 F1 | 	add	fp, #4
0fe3c     E7 7C 62 FC | 	wrlong	result2, fp
0fe40     04 CE 05 F1 | 	add	fp, #4
0fe44     E7 B0 62 FC | 	wrlong	local06, fp
0fe48     08 CE 85 F1 | 	sub	fp, #8
0fe4c     E7 92 02 F6 | 	mov	arg01, fp
0fe50     40 CE 85 F1 | 	sub	fp, #64
0fe54     B0 DA BF FD | 	call	#_converttofloat
0fe58     3D B5 02 F6 | 	mov	local08, result1
0fe5c     10 D8 BF FD | 	call	#_pop
0fe60     3F B1 02 F6 | 	mov	local06, result3
0fe64     40 CE 05 F1 | 	add	fp, #64
0fe68     E7 7A 62 FC | 	wrlong	result1, fp
0fe6c     04 CE 05 F1 | 	add	fp, #4
0fe70     E7 7C 62 FC | 	wrlong	result2, fp
0fe74     04 CE 05 F1 | 	add	fp, #4
0fe78     E7 B0 62 FC | 	wrlong	local06, fp
0fe7c     08 CE 85 F1 | 	sub	fp, #8
0fe80     E7 92 02 F6 | 	mov	arg01, fp
0fe84     40 CE 85 F1 | 	sub	fp, #64
0fe88     7C DA BF FD | 	call	#_converttofloat
0fe8c     3D B1 02 F6 | 	mov	local06, result1
0fe90     DC D7 BF FD | 	call	#_pop
0fe94     3F AF 02 F6 | 	mov	local05, result3
0fe98     40 CE 05 F1 | 	add	fp, #64
0fe9c     E7 7A 62 FC | 	wrlong	result1, fp
0fea0     04 CE 05 F1 | 	add	fp, #4
0fea4     E7 7C 62 FC | 	wrlong	result2, fp
0fea8     04 CE 05 F1 | 	add	fp, #4
0feac     E7 AE 62 FC | 	wrlong	local05, fp
0feb0     08 CE 85 F1 | 	sub	fp, #8
0feb4     E7 92 02 F6 | 	mov	arg01, fp
0feb8     40 CE 85 F1 | 	sub	fp, #64
0febc     48 DA BF FD | 	call	#_converttofloat
0fec0     3D AF 02 F6 | 	mov	local05, result1
0fec4     A8 D7 BF FD | 	call	#_pop
0fec8     3F AD 02 F6 | 	mov	local04, result3
0fecc     40 CE 05 F1 | 	add	fp, #64
0fed0     E7 7A 62 FC | 	wrlong	result1, fp
0fed4     04 CE 05 F1 | 	add	fp, #4
0fed8     E7 7C 62 FC | 	wrlong	result2, fp
0fedc     04 CE 05 F1 | 	add	fp, #4
0fee0     E7 AC 62 FC | 	wrlong	local04, fp
0fee4     08 CE 85 F1 | 	sub	fp, #8
0fee8     E7 92 02 F6 | 	mov	arg01, fp
0feec     40 CE 85 F1 | 	sub	fp, #64
0fef0     58 D9 BF FD | 	call	#_converttoint
0fef4     3D AD 02 F6 | 	mov	local04, result1
0fef8                 | '   t1=pop() : rr=converttofloat(t1)
0fef8                 | '   t1=pop() : ss=converttofloat(t1) 
0fef8                 | '   t1=pop() : dd=converttofloat(t1)
0fef8                 | '   t1=pop() : aa=converttofloat(t1)
0fef8                 | '   t1=pop() : channel=converttoint(t1)
0fef8                 | '   if ss<0.0 then ss=0.0 
0fef8     5A 93 02 F6 | 	mov	arg01, local08
0fefc     00 94 06 F6 | 	mov	arg02, #0
0ff00     01 96 06 F6 | 	mov	arg03, #1
0ff04     8C 73 B1 FD | 	call	#__system___float_cmp
0ff08     00 7A 56 F2 | 	cmps	result1, #0 wc
0ff0c     00 B4 06 C6 |  if_b	mov	local08, #0
0ff10                 | '   if ss>1.0 then ss=1.0
0ff10     5A 93 02 F6 | 	mov	arg01, local08
0ff14     00 C0 1F FF 
0ff18     00 94 06 F6 | 	mov	arg02, ##1065353216
0ff1c     01 96 66 F6 | 	neg	arg03, #1
0ff20     70 73 B1 FD | 	call	#__system___float_cmp
0ff24     01 7A 56 F2 | 	cmps	result1, #1 wc
0ff28     00 C0 1F 3F 
0ff2c     00 B4 06 36 |  if_ae	mov	local08, ##1065353216
0ff30     57 93 02 F6 | 	mov	arg01, local05
0ff34     58 95 02 F6 | 	mov	arg02, local06
0ff38     54 6B B1 FD | 	call	#__system___float_add
0ff3c     3D 93 02 F6 | 	mov	arg01, result1
0ff40     59 95 02 F6 | 	mov	arg02, local07
0ff44     48 6B B1 FD | 	call	#__system___float_add
0ff48     3D 95 02 F6 | 	mov	arg02, result1
0ff4c     00 C0 21 FF 
0ff50     00 92 06 F6 | 	mov	arg01, ##1132462080
0ff54     0C 71 B1 FD | 	call	#__system___float_div
0ff58     3D B7 02 F6 | 	mov	local09, result1
0ff5c     57 93 02 F6 | 	mov	arg01, local05
0ff60     5B 95 02 F6 | 	mov	arg02, local09
0ff64     F8 6E B1 FD | 	call	#__system___float_mul
0ff68     3D 93 02 F6 | 	mov	arg01, result1
0ff6c     01 94 06 F6 | 	mov	arg02, #1
0ff70     B4 73 B1 FD | 	call	#__system___float_tointeger
0ff74     3D B9 02 F6 | 	mov	local10, result1
0ff78     58 93 02 F6 | 	mov	arg01, local06
0ff7c     5B 95 02 F6 | 	mov	arg02, local09
0ff80     DC 6E B1 FD | 	call	#__system___float_mul
0ff84     3D 93 02 F6 | 	mov	arg01, result1
0ff88     01 94 06 F6 | 	mov	arg02, #1
0ff8c     98 73 B1 FD | 	call	#__system___float_tointeger
0ff90     3D BB 02 F6 | 	mov	local11, result1
0ff94     59 93 02 F6 | 	mov	arg01, local07
0ff98     5B 95 02 F6 | 	mov	arg02, local09
0ff9c     C0 6E B1 FD | 	call	#__system___float_mul
0ffa0     3D 93 02 F6 | 	mov	arg01, result1
0ffa4     01 94 06 F6 | 	mov	arg02, #1
0ffa8     7C 73 B1 FD | 	call	#__system___float_tointeger
0ffac     3D B1 02 F6 | 	mov	local06, result1
0ffb0     F8 BF 23 FF 
0ffb4     00 AE 06 F6 | 	mov	local05, ##1199566848
0ffb8     5C 93 52 F6 | 	abs	arg01, local10 wc
0ffbc     1F BC C6 C9 |  if_b	decod	local12, #31
0ffc0     00 BC 06 36 |  if_ae	mov	local12, #0
0ffc4     94 6A B1 FD | 	call	#__system___float_fromuns
0ffc8     5E 7B 62 F5 | 	xor	result1, local12
0ffcc     3D 95 02 F6 | 	mov	arg02, result1
0ffd0     57 93 02 F6 | 	mov	arg01, local05
0ffd4     8C 70 B1 FD | 	call	#__system___float_div
0ffd8     3D BF 02 F6 | 	mov	local13, result1
0ffdc     F8 BF 23 FF 
0ffe0     00 AE 06 F6 | 	mov	local05, ##1199566848
0ffe4     F8 BF 23 FF 
0ffe8     00 92 06 F6 | 	mov	arg01, ##1199566848
0ffec     5A 95 02 F6 | 	mov	arg02, local08
0fff0     6C 6E B1 FD | 	call	#__system___float_mul
0fff4     3D 95 02 F6 | 	mov	arg02, result1
0fff8     57 93 02 F6 | 	mov	arg01, local05
0fffc     1F 94 E6 F4 | 	bitnot	arg02, #31
10000     8C 6A B1 FD | 	call	#__system___float_add
10004     3D AF 02 F6 | 	mov	local05, result1
10008     5D 93 52 F6 | 	abs	arg01, local11 wc
1000c     1F BC C6 C9 |  if_b	decod	local12, #31
10010     00 BC 06 36 |  if_ae	mov	local12, #0
10014     44 6A B1 FD | 	call	#__system___float_fromuns
10018     5E 7B 62 F5 | 	xor	result1, local12
1001c     3D 95 02 F6 | 	mov	arg02, result1
10020     57 93 02 F6 | 	mov	arg01, local05
10024     3C 70 B1 FD | 	call	#__system___float_div
10028     3D C1 02 F6 | 	mov	local14, result1
1002c     F8 BF 23 FF 
10030     00 92 06 F6 | 	mov	arg01, ##1199566848
10034     5A 95 02 F6 | 	mov	arg02, local08
10038     24 6E B1 FD | 	call	#__system___float_mul
1003c     3D AF 02 F6 | 	mov	local05, result1
10040     58 93 52 F6 | 	abs	arg01, local06 wc
10044     1F BC C6 C9 |  if_b	decod	local12, #31
10048     00 BC 06 36 |  if_ae	mov	local12, #0
1004c     0C 6A B1 FD | 	call	#__system___float_fromuns
10050     5E 7B 62 F5 | 	xor	result1, local12
10054     3D 95 02 F6 | 	mov	arg02, result1
10058     57 93 02 F6 | 	mov	arg01, local05
1005c     04 70 B1 FD | 	call	#__system___float_div
10060     3D C3 02 F6 | 	mov	local15, result1
10064     56 B3 02 F6 | 	mov	local07, local04
10068     01 B2 66 F0 | 	shl	local07, #1
1006c     32 C5 02 F6 | 	mov	local16, objptr
10070     54 00 00 FF 
10074     90 C4 06 F1 | 	add	local16, ##43152
10078     62 B3 02 F1 | 	add	local07, local16
1007c     5C C7 02 F6 | 	mov	local17, local10
10080     5D C7 02 F1 | 	add	local17, local11
10084     59 C7 52 FC | 	wrword	local17, local07
10088     00 C8 06 F6 | 	mov	local18, #0
1008c                 | '   fulltime=aa+dd+rr
1008c                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
1008c                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
1008c                 | '   suspoints(channel)=a+d
1008c                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
1008c     00 B2 06 F6 | 	mov	local07, #0
10090     5C CB 02 F6 | 	mov	local19, local10
10094                 | LR__1363
10094     65 B3 52 F2 | 	cmps	local07, local19 wc
10098     4C 00 90 3D |  if_ae	jmp	#LR__1364
1009c     56 C7 02 F6 | 	mov	local17, local04
100a0     09 C6 66 F0 | 	shl	local17, #9
100a4     32 C5 02 F6 | 	mov	local16, objptr
100a8     0E 00 00 FF 
100ac     38 C4 06 F1 | 	add	local16, ##7224
100b0     62 C7 02 F1 | 	add	local17, local16
100b4     59 C5 02 F6 | 	mov	local16, local07
100b8     01 C4 66 F0 | 	shl	local16, #1
100bc     63 C5 02 F1 | 	add	local16, local17
100c0     64 93 02 F6 | 	mov	arg01, local18
100c4     01 94 06 F6 | 	mov	arg02, #1
100c8     5C 72 B1 FD | 	call	#__system___float_tointeger
100cc     62 7B 52 FC | 	wrword	result1, local16
100d0     5F 95 02 F6 | 	mov	arg02, local13
100d4     64 93 02 F6 | 	mov	arg01, local18
100d8     B4 69 B1 FD | 	call	#__system___float_add
100dc     3D C9 02 F6 | 	mov	local18, result1
100e0     01 B2 06 F1 | 	add	local07, #1
100e4     AC FF 9F FD | 	jmp	#LR__1363
100e8                 | LR__1364
100e8                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
100e8     5C B3 02 F6 | 	mov	local07, local10
100ec     5C CD 02 F6 | 	mov	local20, local10
100f0     5D CD 02 F1 | 	add	local20, local11
100f4                 | LR__1365
100f4     66 B3 52 F2 | 	cmps	local07, local20 wc
100f8     68 00 90 3D |  if_ae	jmp	#LR__1366
100fc     56 CB 02 F6 | 	mov	local19, local04
10100     09 CA 66 F0 | 	shl	local19, #9
10104     32 C5 02 F6 | 	mov	local16, objptr
10108     0E 00 00 FF 
1010c     38 C4 06 F1 | 	add	local16, ##7224
10110     62 CB 02 F1 | 	add	local19, local16
10114     59 C7 02 F6 | 	mov	local17, local07
10118     01 C6 66 F0 | 	shl	local17, #1
1011c     65 C7 02 F1 | 	add	local17, local19
10120     64 93 02 F6 | 	mov	arg01, local18
10124     01 94 06 F6 | 	mov	arg02, #1
10128     FC 71 B1 FD | 	call	#__system___float_tointeger
1012c     63 7B 52 FC | 	wrword	result1, local17
10130     64 93 02 F6 | 	mov	arg01, local18
10134     60 95 02 F6 | 	mov	arg02, local14
10138     1F 94 E6 F4 | 	bitnot	arg02, #31
1013c     50 69 B1 FD | 	call	#__system___float_add
10140     3D C9 02 F6 | 	mov	local18, result1
10144     64 93 02 F6 | 	mov	arg01, local18
10148     00 94 06 F6 | 	mov	arg02, #0
1014c     01 96 06 F6 | 	mov	arg03, #1
10150     40 71 B1 FD | 	call	#__system___float_cmp
10154     00 7A 56 F2 | 	cmps	result1, #0 wc
10158     00 C8 06 C6 |  if_b	mov	local18, #0
1015c     01 B2 06 F1 | 	add	local07, #1
10160     90 FF 9F FD | 	jmp	#LR__1365
10164                 | LR__1366
10164                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
10164     5C B3 02 F6 | 	mov	local07, local10
10168     5D B3 02 F1 | 	add	local07, local11
1016c                 | LR__1367
1016c     00 B3 56 F2 | 	cmps	local07, #256 wc
10170     68 00 90 3D |  if_ae	jmp	#LR__1368
10174     56 CD 02 F6 | 	mov	local20, local04
10178     09 CC 66 F0 | 	shl	local20, #9
1017c     32 C7 02 F6 | 	mov	local17, objptr
10180     0E 00 00 FF 
10184     38 C6 06 F1 | 	add	local17, ##7224
10188     63 CD 02 F1 | 	add	local20, local17
1018c     59 CB 02 F6 | 	mov	local19, local07
10190     01 CA 66 F0 | 	shl	local19, #1
10194     66 CB 02 F1 | 	add	local19, local20
10198     64 93 02 F6 | 	mov	arg01, local18
1019c     01 94 06 F6 | 	mov	arg02, #1
101a0     84 71 B1 FD | 	call	#__system___float_tointeger
101a4     65 7B 52 FC | 	wrword	result1, local19
101a8     64 93 02 F6 | 	mov	arg01, local18
101ac     61 95 02 F6 | 	mov	arg02, local15
101b0     1F 94 E6 F4 | 	bitnot	arg02, #31
101b4     D8 68 B1 FD | 	call	#__system___float_add
101b8     3D C9 02 F6 | 	mov	local18, result1
101bc     64 93 02 F6 | 	mov	arg01, local18
101c0     00 94 06 F6 | 	mov	arg02, #0
101c4     01 96 06 F6 | 	mov	arg03, #1
101c8     C8 70 B1 FD | 	call	#__system___float_cmp
101cc     00 7A 56 F2 | 	cmps	result1, #0 wc
101d0     00 C8 06 C6 |  if_b	mov	local18, #0
101d4     01 B2 06 F1 | 	add	local07, #1
101d8     90 FF 9F FD | 	jmp	#LR__1367
101dc                 | LR__1368
101dc     56 CD 02 F6 | 	mov	local20, local04
101e0     09 CC 66 F0 | 	shl	local20, #9
101e4     32 C5 02 F6 | 	mov	local16, objptr
101e8     0E 00 00 FF 
101ec     38 C4 06 F1 | 	add	local16, ##7224
101f0     62 CD 02 F1 | 	add	local20, local16
101f4     FE CD 06 F1 | 	add	local20, #510
101f8     66 01 58 FC | 	wrword	#0, local20
101fc                 | LR__1369
101fc     09 AC 66 F0 | 	shl	local04, #9
10200     32 C5 02 F6 | 	mov	local16, objptr
10204     0E 00 00 FF 
10208     38 C4 06 F1 | 	add	local16, ##7224
1020c     62 AD 02 F1 | 	add	local04, local16
10210     FE AD 06 F1 | 	add	local04, #510
10214     56 01 58 FC | 	wrword	#0, local04
10218                 | LR__1370
10218     E7 F0 03 F6 | 	mov	ptra, fp
1021c     F2 00 A0 FD | 	call	#popregs_
10220                 | _do_defenv_ret
10220     2D 00 64 FD | 	ret
10224                 | 
10224                 | ' 
10224                 | ' '-------------------- defsnd
10224                 | ' 
10224                 | ' sub do_defsnd
10224                 | _do_defsnd
10224     0D CA 05 F6 | 	mov	COUNT_, #13
10228     E8 00 A0 FD | 	call	#pushregs_
1022c     80 F0 07 F1 | 	add	ptra, #128
10230     4C 00 00 FF 
10234     24 64 06 F1 | 	add	objptr, ##38948
10238     32 9B 02 FB | 	rdlong	arg05, objptr
1023c     4D 99 02 F6 | 	mov	arg04, arg05
10240     01 98 66 F0 | 	shl	arg04, #1
10244     4D 99 02 F1 | 	add	arg04, arg05
10248     02 98 66 F0 | 	shl	arg04, #2
1024c     03 00 00 FF 
10250     04 64 86 F1 | 	sub	objptr, ##1540
10254     32 99 02 F1 | 	add	arg04, objptr
10258     4C A7 02 FB | 	rdlong	local01, arg04
1025c                 | ' 
1025c                 | ' numpar=compiledline(lineptr_e).result.uresult
1025c                 | ' 
1025c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
1025c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
1025c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
1025c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
1025c                 | ' 
1025c                 | ' if numpar<2 then return
1025c     02 A6 56 F2 | 	cmps	local01, #2 wc
10260     49 00 00 FF 
10264     20 64 86 F1 | 	sub	objptr, ##37408
10268     88 06 90 CD |  if_b	jmp	#LR__1401
1026c                 | '  
1026c                 | ' if numpar=2 then
1026c     02 A6 0E F2 | 	cmp	local01, #2 wz
10270     E4 02 90 5D |  if_ne	jmp	#LR__1389
10274     F8 D3 BF FD | 	call	#_pop
10278     3F 9B 02 F6 | 	mov	arg05, result3
1027c     2C CE 05 F1 | 	add	fp, #44
10280     E7 7A 62 FC | 	wrlong	result1, fp
10284     04 CE 05 F1 | 	add	fp, #4
10288     E7 7C 62 FC | 	wrlong	result2, fp
1028c     04 CE 05 F1 | 	add	fp, #4
10290     E7 9A 62 FC | 	wrlong	arg05, fp
10294                 | '   t1=pop()
10294                 | '   if t1.result_type=result_string2 then 
10294     34 CE 85 F1 | 	sub	fp, #52
10298     2B 9A 0E F2 | 	cmp	arg05, #43 wz
1029c     18 00 90 5D |  if_ne	jmp	#LR__1380
102a0     2C CE 05 F1 | 	add	fp, #44
102a4     E7 92 02 FB | 	rdlong	arg01, fp
102a8     2C CE 85 F1 | 	sub	fp, #44
102ac     30 D5 BF FD | 	call	#_convertstring
102b0     3D A9 02 F6 | 	mov	local02, result1
102b4     38 00 90 FD | 	jmp	#LR__1382
102b8                 | LR__1380
102b8     34 CE 05 F1 | 	add	fp, #52
102bc     E7 9A 02 FB | 	rdlong	arg05, fp
102c0     34 CE 85 F1 | 	sub	fp, #52
102c4     1F 9A 0E F2 | 	cmp	arg05, #31 wz
102c8     2C CE 05 A1 |  if_e	add	fp, #44
102cc     E7 A8 02 AB |  if_e	rdlong	local02, fp
102d0     2C CE 85 A1 |  if_e	sub	fp, #44
102d4     18 00 90 AD |  if_e	jmp	#LR__1381
102d8     95 01 00 FF 
102dc     CD A9 06 F6 | 	mov	local02, ##@LR__5978
102e0     E7 92 02 F6 | 	mov	arg01, fp
102e4     2C 92 06 F1 | 	add	arg01, #44
102e8     60 D5 BF FD | 	call	#_converttoint
102ec     3D AB 02 F6 | 	mov	local03, result1
102f0                 | LR__1381
102f0                 | LR__1382
102f0                 | '   if s<>"" then 
102f0     95 01 00 FF 
102f4     CE 95 06 F6 | 	mov	arg02, ##@LR__5979
102f8     54 93 02 F6 | 	mov	arg01, local02
102fc     B8 44 B1 FD | 	call	#__system___string_cmp
10300     00 7A 0E F2 | 	cmp	result1, #0 wz
10304     B0 01 90 AD |  if_e	jmp	#LR__1385
10308     64 D3 BF FD | 	call	#_pop
1030c     3F 9B 02 F6 | 	mov	arg05, result3
10310     2C CE 05 F1 | 	add	fp, #44
10314     E7 7A 62 FC | 	wrlong	result1, fp
10318     04 CE 05 F1 | 	add	fp, #4
1031c     E7 7C 62 FC | 	wrlong	result2, fp
10320     04 CE 05 F1 | 	add	fp, #4
10324     E7 9A 62 FC | 	wrlong	arg05, fp
10328     08 CE 85 F1 | 	sub	fp, #8
1032c     E7 92 02 F6 | 	mov	arg01, fp
10330     2C CE 85 F1 | 	sub	fp, #44
10334     14 D5 BF FD | 	call	#_converttoint
10338     3D AD 02 F6 | 	mov	local04, result1
1033c                 | '     t1=pop()
1033c                 | '     channel=converttoint(t1) : if channel>31 then return
1033c     20 AC 56 F2 | 	cmps	local04, #32 wc
10340     B0 05 90 3D |  if_ae	jmp	#LR__1401
10344                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10344     09 92 06 F6 | 	mov	arg01, #9
10348     20 90 B1 FD | 	call	#__system__close
1034c     09 AA 06 F6 | 	mov	local03, #9
10350     95 01 00 FF 
10354     CF 93 06 F6 | 	mov	arg01, ##@LR__5980
10358     54 95 02 F6 | 	mov	arg02, local02
1035c     8C 44 B1 FD | 	call	#__system___string_concat
10360     3D 95 02 F6 | 	mov	arg02, result1
10364     55 93 02 F6 | 	mov	arg01, local03
10368     00 96 06 F6 | 	mov	arg03, #0
1036c     D0 4F B1 FD | 	call	#__system___basic_open_string
10370     20 68 06 F1 | 	add	ptr___system__dat__, #32
10374     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
10378     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
1037c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
10380     54 00 00 FF 
10384     EC 64 06 F1 | 	add	objptr, ##43244
10388     32 7B 62 FC | 	wrlong	result1, objptr
1038c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
1038c     54 00 00 FF 
10390     EC 64 86 F1 | 	sub	objptr, ##43244
10394     B0 00 90 AD |  if_e	jmp	#LR__1383
10398     00 92 06 F6 | 	mov	arg01, #0
1039c     74 99 B1 FD | 	call	#__system___getiolock_0622
103a0     3D 93 02 F6 | 	mov	arg01, result1
103a4     E8 43 B1 FD | 	call	#__system___lockmem
103a8     95 01 00 FF 
103ac     DC 95 06 F6 | 	mov	arg02, ##@LR__5981
103b0     00 92 06 F6 | 	mov	arg01, #0
103b4     00 96 06 F6 | 	mov	arg03, #0
103b8     C8 50 B1 FD | 	call	#__system___basic_print_string
103bc     54 00 00 FF 
103c0     EC 64 06 F1 | 	add	objptr, ##43244
103c4     32 95 02 FB | 	rdlong	arg02, objptr
103c8     54 00 00 FF 
103cc     EC 64 86 F1 | 	sub	objptr, ##43244
103d0     00 92 06 F6 | 	mov	arg01, #0
103d4     00 96 06 F6 | 	mov	arg03, #0
103d8     0A 98 06 F6 | 	mov	arg04, #10
103dc     E8 50 B1 FD | 	call	#__system___basic_print_integer
103e0     95 01 00 FF 
103e4     EA 95 06 F6 | 	mov	arg02, ##@LR__5982
103e8     00 92 06 F6 | 	mov	arg01, #0
103ec     00 96 06 F6 | 	mov	arg03, #0
103f0     90 50 B1 FD | 	call	#__system___basic_print_string
103f4     00 AC 06 F6 | 	mov	local04, #0
103f8     54 00 00 FF 
103fc     EC 64 06 F1 | 	add	objptr, ##43244
10400     32 93 02 FB | 	rdlong	arg01, objptr
10404     54 00 00 FF 
10408     EC 64 86 F1 | 	sub	objptr, ##43244
1040c     30 65 B1 FD | 	call	#__system___strerror
10410     3D 95 02 F6 | 	mov	arg02, result1
10414     56 93 02 F6 | 	mov	arg01, local04
10418     00 96 06 F6 | 	mov	arg03, #0
1041c     64 50 B1 FD | 	call	#__system___basic_print_string
10420     00 92 06 F6 | 	mov	arg01, #0
10424     0A 94 06 F6 | 	mov	arg02, #10
10428     00 96 06 F6 | 	mov	arg03, #0
1042c     FC 4F B1 FD | 	call	#__system___basic_print_char
10430     00 92 06 F6 | 	mov	arg01, #0
10434     DC 98 B1 FD | 	call	#__system___getiolock_0622
10438     3D 01 68 FC | 	wrlong	#0, result1
1043c     09 92 06 F6 | 	mov	arg01, #9
10440     28 8F B1 FD | 	call	#__system__close
10444     AC 04 90 FD | 	jmp	#LR__1401
10448                 | LR__1383
10448                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
10448     00 AE 06 F6 | 	mov	local05, #0
1044c                 | LR__1384
1044c     57 AB 02 F6 | 	mov	local03, local05
10450     01 AA 66 F0 | 	shl	local03, #1
10454     11 94 06 F6 | 	mov	arg02, #17
10458     55 95 02 F1 | 	add	arg02, local03
1045c     E7 96 02 F6 | 	mov	arg03, fp
10460     7C 96 06 F1 | 	add	arg03, #124
10464     09 92 06 F6 | 	mov	arg01, #9
10468     01 98 06 F6 | 	mov	arg04, #1
1046c     02 9A 06 F6 | 	mov	arg05, #2
10470     98 51 B1 FD | 	call	#__system___basic_get
10474     56 93 02 F6 | 	mov	arg01, local04
10478     0B 92 66 F0 | 	shl	arg01, #11
1047c     57 AB 02 F6 | 	mov	local03, local05
10480     01 AA 66 F0 | 	shl	local03, #1
10484     55 93 02 F1 | 	add	arg01, local03
10488     7C CE 05 F1 | 	add	fp, #124
1048c     E7 94 E2 FA | 	rdword	arg02, fp
10490     7C CE 85 F1 | 	sub	fp, #124
10494     0F 94 66 F7 | 	signx	arg02, #15
10498     E0 06 B1 FD | 	call	#_psdpoke
1049c     01 AE 06 F1 | 	add	local05, #1
104a0     02 00 00 FF 
104a4     01 AE 56 F2 | 	cmps	local05, ##1025 wc
104a8     A0 FF 9F CD |  if_b	jmp	#LR__1384
104ac                 | '     close #9
104ac     09 92 06 F6 | 	mov	arg01, #9
104b0     B8 8E B1 FD | 	call	#__system__close
104b4                 | '     return
104b4     3C 04 90 FD | 	jmp	#LR__1401
104b8                 | LR__1385
104b8                 | '     if wptr < ($80000 - 2048) then 
104b8     FC 03 00 FF 
104bc     00 AA 56 F2 | 	cmps	local03, ##522240 wc
104c0     48 00 90 3D |  if_ae	jmp	#LR__1387
104c4                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
104c4     00 AE 06 F6 | 	mov	local05, #0
104c8                 | LR__1386
104c8     56 A7 02 F6 | 	mov	local01, local04
104cc     0B A6 66 F0 | 	shl	local01, #11
104d0     57 A9 02 F6 | 	mov	local02, local05
104d4     01 A8 66 F0 | 	shl	local02, #1
104d8     54 A7 02 F1 | 	add	local01, local02
104dc     55 93 02 F6 | 	mov	arg01, local03
104e0     57 A9 02 F6 | 	mov	local02, local05
104e4     01 A8 66 F0 | 	shl	local02, #1
104e8     54 93 02 F1 | 	add	arg01, local02
104ec     49 95 E2 FA | 	rdword	arg02, arg01
104f0     53 93 02 F6 | 	mov	arg01, local01
104f4     84 06 B1 FD | 	call	#_psdpoke
104f8     01 AE 06 F1 | 	add	local05, #1
104fc     02 00 00 FF 
10500     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10504     C0 FF 9F CD |  if_b	jmp	#LR__1386
10508     E8 03 90 FD | 	jmp	#LR__1401
1050c                 | LR__1387
1050c                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
1050c     00 AE 06 F6 | 	mov	local05, #0
10510                 | LR__1388
10510     56 A7 02 F6 | 	mov	local01, local04
10514     0B A6 66 F0 | 	shl	local01, #11
10518     57 A9 02 F6 | 	mov	local02, local05
1051c     01 A8 66 F0 | 	shl	local02, #1
10520     54 A7 02 F1 | 	add	local01, local02
10524     55 93 02 F6 | 	mov	arg01, local03
10528     57 A9 02 F6 | 	mov	local02, local05
1052c     01 A8 66 F0 | 	shl	local02, #1
10530     54 93 02 F1 | 	add	arg01, local02
10534     74 07 B1 FD | 	call	#_psdpeek
10538     3D 95 02 F6 | 	mov	arg02, result1
1053c     53 93 02 F6 | 	mov	arg01, local01
10540     38 06 B1 FD | 	call	#_psdpoke
10544     01 AE 06 F1 | 	add	local05, #1
10548     02 00 00 FF 
1054c     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10550     BC FF 9F CD |  if_b	jmp	#LR__1388
10554                 | '     return 
10554     9C 03 90 FD | 	jmp	#LR__1401
10558                 | '   return
10558                 | LR__1389
10558                 | ' for i=0 to 15 : harm(i)=0: next i  
10558     00 AE 06 F6 | 	mov	local05, #0
1055c     3C CE 05 F1 | 	add	fp, #60
10560     D7 0E 48 FB | 	callpa	#(@LR__1391-@LR__1390)>>2,fcache_load_ptr_
10564                 | LR__1390
10564     57 B1 02 F6 | 	mov	local06, local05
10568     02 B0 66 F0 | 	shl	local06, #2
1056c     E7 B0 02 F1 | 	add	local06, fp
10570     58 01 68 FC | 	wrlong	#0, local06
10574     01 AE 06 F1 | 	add	local05, #1
10578     10 AE 56 F2 | 	cmps	local05, #16 wc
1057c     E4 FF 9F CD |  if_b	jmp	#LR__1390
10580                 | LR__1391
10580     3C CE 85 F1 | 	sub	fp, #60
10584                 | ' for i=numpar to 2 step -1 
10584     53 AF 02 F6 | 	mov	local05, local01
10588                 | LR__1392
10588     E4 D0 BF FD | 	call	#_pop
1058c     2C CE 05 F1 | 	add	fp, #44
10590     E7 7A 62 FC | 	wrlong	result1, fp
10594     04 CE 05 F1 | 	add	fp, #4
10598     E7 7C 62 FC | 	wrlong	result2, fp
1059c     04 CE 05 F1 | 	add	fp, #4
105a0     E7 7E 62 FC | 	wrlong	result3, fp
105a4     57 B1 02 F6 | 	mov	local06, local05
105a8     02 B0 86 F1 | 	sub	local06, #2
105ac     02 B0 66 F0 | 	shl	local06, #2
105b0     08 CE 05 F1 | 	add	fp, #8
105b4     E7 B0 02 F1 | 	add	local06, fp
105b8     10 CE 85 F1 | 	sub	fp, #16
105bc     E7 92 02 F6 | 	mov	arg01, fp
105c0     2C CE 85 F1 | 	sub	fp, #44
105c4     40 D3 BF FD | 	call	#_converttofloat
105c8     58 7B 62 FC | 	wrlong	result1, local06
105cc     01 AE 86 F1 | 	sub	local05, #1
105d0     02 AE 56 F2 | 	cmps	local05, #2 wc
105d4     B0 FF 9F 3D |  if_ae	jmp	#LR__1392
105d8     94 D0 BF FD | 	call	#_pop
105dc     3F AF 02 F6 | 	mov	local05, result3
105e0     2C CE 05 F1 | 	add	fp, #44
105e4     E7 7A 62 FC | 	wrlong	result1, fp
105e8     04 CE 05 F1 | 	add	fp, #4
105ec     E7 7C 62 FC | 	wrlong	result2, fp
105f0     04 CE 05 F1 | 	add	fp, #4
105f4     E7 AE 62 FC | 	wrlong	local05, fp
105f8     08 CE 85 F1 | 	sub	fp, #8
105fc     E7 92 02 F6 | 	mov	arg01, fp
10600     2C CE 85 F1 | 	sub	fp, #44
10604     44 D2 BF FD | 	call	#_converttoint
10608     3D AD 02 F6 | 	mov	local04, result1
1060c                 | ' t1=pop()
1060c                 | ' channel=converttoint(t1) : : if channel>31 then return
1060c     20 AC 56 F2 | 	cmps	local04, #32 wc
10610     E0 02 90 3D |  if_ae	jmp	#LR__1401
10614     00 B2 06 F6 | 	mov	local07, #0
10618                 | ' max=0
10618                 | ' if harm(0)<0 then
10618     3C CE 05 F1 | 	add	fp, #60
1061c     E7 92 02 FB | 	rdlong	arg01, fp
10620     3C CE 85 F1 | 	sub	fp, #60
10624     00 94 06 F6 | 	mov	arg02, #0
10628     01 96 06 F6 | 	mov	arg03, #1
1062c     64 6C B1 FD | 	call	#__system___float_cmp
10630     00 7A 56 F2 | 	cmps	result1, #0 wc
10634     C0 00 90 3D |  if_ae	jmp	#LR__1395
10638     3C CE 05 F1 | 	add	fp, #60
1063c     E7 B4 02 FB | 	rdlong	local08, fp
10640     1F B4 06 F4 | 	bitl	local08, #31
10644     04 CE 05 F1 | 	add	fp, #4
10648     E7 B6 02 FB | 	rdlong	local09, fp
1064c     1F B6 06 F4 | 	bitl	local09, #31
10650     04 CE 85 F1 | 	sub	fp, #4
10654     00 C0 9F FF 
10658     E7 00 68 FC | 	wrlong	##1065353216, fp
1065c     04 CE 05 F1 | 	add	fp, #4
10660     E7 B4 62 FC | 	wrlong	local08, fp
10664     04 CE 05 F1 | 	add	fp, #4
10668     E7 B6 62 FC | 	wrlong	local09, fp
1066c     44 CE 85 F1 | 	sub	fp, #68
10670                 | '   harm(0)=1
10670                 | '   harm(1)=even
10670                 | '   harm(2)=odd
10670                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
10670     03 AE 06 F6 | 	mov	local05, #3
10674                 | LR__1393
10674     57 B1 02 F6 | 	mov	local06, local05
10678     02 B0 66 F0 | 	shl	local06, #2
1067c     3C CE 05 F1 | 	add	fp, #60
10680     E7 B0 02 F1 | 	add	local06, fp
10684     57 9B 02 F6 | 	mov	arg05, local05
10688     02 9A 86 F1 | 	sub	arg05, #2
1068c     02 9A 66 F0 | 	shl	arg05, #2
10690     E7 9A 02 F1 | 	add	arg05, fp
10694     4D 93 02 FB | 	rdlong	arg01, arg05
10698     5A 95 02 F6 | 	mov	arg02, local08
1069c     3C CE 85 F1 | 	sub	fp, #60
106a0     BC 67 B1 FD | 	call	#__system___float_mul
106a4     58 7B 62 FC | 	wrlong	result1, local06
106a8     02 AE 06 F1 | 	add	local05, #2
106ac     10 AE 56 F2 | 	cmps	local05, #16 wc
106b0     C0 FF 9F CD |  if_b	jmp	#LR__1393
106b4                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
106b4     04 AE 06 F6 | 	mov	local05, #4
106b8                 | LR__1394
106b8     57 B1 02 F6 | 	mov	local06, local05
106bc     02 B0 66 F0 | 	shl	local06, #2
106c0     3C CE 05 F1 | 	add	fp, #60
106c4     E7 B0 02 F1 | 	add	local06, fp
106c8     57 B5 02 F6 | 	mov	local08, local05
106cc     02 B4 86 F1 | 	sub	local08, #2
106d0     02 B4 66 F0 | 	shl	local08, #2
106d4     E7 B4 02 F1 | 	add	local08, fp
106d8     5A 93 02 FB | 	rdlong	arg01, local08
106dc     5B 95 02 F6 | 	mov	arg02, local09
106e0     3C CE 85 F1 | 	sub	fp, #60
106e4     78 67 B1 FD | 	call	#__system___float_mul
106e8     58 7B 62 FC | 	wrlong	result1, local06
106ec     02 AE 06 F1 | 	add	local05, #2
106f0     0F AE 56 F2 | 	cmps	local05, #15 wc
106f4     C0 FF 9F CD |  if_b	jmp	#LR__1394
106f8                 | LR__1395
106f8                 | ' if harm(0)>=0 then ' synthesize with harmonics
106f8     3C CE 05 F1 | 	add	fp, #60
106fc     E7 92 02 FB | 	rdlong	arg01, fp
10700     3C CE 85 F1 | 	sub	fp, #60
10704     00 94 06 F6 | 	mov	arg02, #0
10708     01 96 66 F6 | 	neg	arg03, #1
1070c     84 6B B1 FD | 	call	#__system___float_cmp
10710     00 7A 56 F2 | 	cmps	result1, #0 wc
10714     DC 01 90 CD |  if_b	jmp	#LR__1400
10718                 | '   for i=0 to 1023
10718     00 AE 06 F6 | 	mov	local05, #0
1071c                 | LR__1396
1071c     00 B8 06 F6 | 	mov	local10, #0
10720                 | '     spl=0
10720                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
10720     00 BA 06 F6 | 	mov	local11, #0
10724                 | LR__1397
10724     5D B1 02 F6 | 	mov	local06, local11
10728     02 B0 66 F0 | 	shl	local06, #2
1072c     E7 9A 02 F6 | 	mov	arg05, fp
10730     3C 9A 06 F1 | 	add	arg05, #60
10734     4D B1 02 F1 | 	add	local06, arg05
10738     58 B1 02 FB | 	rdlong	local06, local06
1073c     87 E4 1D FF 
10740     DB B7 06 F6 | 	mov	local09, ##1003032539
10744     57 93 52 F6 | 	abs	arg01, local05 wc
10748     1F BC C6 C9 |  if_b	decod	local12, #31
1074c     00 BC 06 36 |  if_ae	mov	local12, #0
10750     08 63 B1 FD | 	call	#__system___float_fromuns
10754     5E 7B 62 F5 | 	xor	result1, local12
10758     3D 95 02 F6 | 	mov	arg02, result1
1075c     5B 93 02 F6 | 	mov	arg01, local09
10760     FC 66 B1 FD | 	call	#__system___float_mul
10764     3D BF 02 F6 | 	mov	local13, result1
10768     5D 93 02 F6 | 	mov	arg01, local11
1076c     01 92 06 F1 | 	add	arg01, #1
10770     49 93 52 F6 | 	abs	arg01, arg01 wc
10774     1F BC C6 C9 |  if_b	decod	local12, #31
10778     00 BC 06 36 |  if_ae	mov	local12, #0
1077c     DC 62 B1 FD | 	call	#__system___float_fromuns
10780     5E 7B 62 F5 | 	xor	result1, local12
10784     3D 95 02 F6 | 	mov	arg02, result1
10788     5F 93 02 F6 | 	mov	arg01, local13
1078c     D0 66 B1 FD | 	call	#__system___float_mul
10790     3D 93 02 F6 | 	mov	arg01, result1
10794     38 70 B1 FD | 	call	#__system____builtin_sinf
10798     3D 95 02 F6 | 	mov	arg02, result1
1079c     58 93 02 F6 | 	mov	arg01, local06
107a0     BC 66 B1 FD | 	call	#__system___float_mul
107a4     3D 95 02 F6 | 	mov	arg02, result1
107a8     5C 93 02 F6 | 	mov	arg01, local10
107ac     E0 62 B1 FD | 	call	#__system___float_add
107b0     3D B9 02 F6 | 	mov	local10, result1
107b4     01 BA 06 F1 | 	add	local11, #1
107b8     10 BA 56 F2 | 	cmps	local11, #16 wc
107bc     64 FF 9F CD |  if_b	jmp	#LR__1397
107c0                 | '     if abs(spl)>max then max=abs(spl)  
107c0     5C 93 02 F6 | 	mov	arg01, local10
107c4     1F 92 06 F4 | 	bitl	arg01, #31
107c8     59 95 02 F6 | 	mov	arg02, local07
107cc     01 96 66 F6 | 	neg	arg03, #1
107d0     C0 6A B1 FD | 	call	#__system___float_cmp
107d4     01 7A 56 F2 | 	cmps	result1, #1 wc
107d8     1F B8 06 34 |  if_ae	bitl	local10, #31
107dc     5C B3 02 36 |  if_ae	mov	local07, local10
107e0     01 AE 06 F1 | 	add	local05, #1
107e4     02 00 00 FF 
107e8     00 AE 56 F2 | 	cmps	local05, ##1024 wc
107ec     2C FF 9F CD |  if_b	jmp	#LR__1396
107f0                 | '   for i=0 to 1023
107f0     00 AE 06 F6 | 	mov	local05, #0
107f4                 | LR__1398
107f4     00 B8 06 F6 | 	mov	local10, #0
107f8                 | '     spl=0
107f8                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
107f8     00 BA 06 F6 | 	mov	local11, #0
107fc                 | LR__1399
107fc     5D BF 02 F6 | 	mov	local13, local11
10800     02 BE 66 F0 | 	shl	local13, #2
10804     E7 B6 02 F6 | 	mov	local09, fp
10808     3C B6 06 F1 | 	add	local09, #60
1080c     5B BF 02 F1 | 	add	local13, local09
10810     5F B1 02 FB | 	rdlong	local06, local13
10814     58 7F 23 FF 
10818     00 92 06 F6 | 	mov	arg01, ##1191096320
1081c     59 95 02 F6 | 	mov	arg02, local07
10820     40 68 B1 FD | 	call	#__system___float_div
10824     3D 95 02 F6 | 	mov	arg02, result1
10828     58 93 02 F6 | 	mov	arg01, local06
1082c     30 66 B1 FD | 	call	#__system___float_mul
10830     3D B1 02 F6 | 	mov	local06, result1
10834     87 E4 1D FF 
10838     DB BF 06 F6 | 	mov	local13, ##1003032539
1083c     57 93 52 F6 | 	abs	arg01, local05 wc
10840     1F BC C6 C9 |  if_b	decod	local12, #31
10844     00 BC 06 36 |  if_ae	mov	local12, #0
10848     10 62 B1 FD | 	call	#__system___float_fromuns
1084c     5E 7B 62 F5 | 	xor	result1, local12
10850     3D 95 02 F6 | 	mov	arg02, result1
10854     5F 93 02 F6 | 	mov	arg01, local13
10858     04 66 B1 FD | 	call	#__system___float_mul
1085c     3D BF 02 F6 | 	mov	local13, result1
10860     5D 93 02 F6 | 	mov	arg01, local11
10864     01 92 06 F1 | 	add	arg01, #1
10868     49 93 52 F6 | 	abs	arg01, arg01 wc
1086c     1F BC C6 C9 |  if_b	decod	local12, #31
10870     00 BC 06 36 |  if_ae	mov	local12, #0
10874     E4 61 B1 FD | 	call	#__system___float_fromuns
10878     5E 7B 62 F5 | 	xor	result1, local12
1087c     3D 95 02 F6 | 	mov	arg02, result1
10880     5F 93 02 F6 | 	mov	arg01, local13
10884     D8 65 B1 FD | 	call	#__system___float_mul
10888     3D 93 02 F6 | 	mov	arg01, result1
1088c     40 6F B1 FD | 	call	#__system____builtin_sinf
10890     3D 95 02 F6 | 	mov	arg02, result1
10894     58 93 02 F6 | 	mov	arg01, local06
10898     C4 65 B1 FD | 	call	#__system___float_mul
1089c     3D 95 02 F6 | 	mov	arg02, result1
108a0     5C 93 02 F6 | 	mov	arg01, local10
108a4     E8 61 B1 FD | 	call	#__system___float_add
108a8     3D B9 02 F6 | 	mov	local10, result1
108ac     01 BA 06 F1 | 	add	local11, #1
108b0     10 BA 56 F2 | 	cmps	local11, #16 wc
108b4     44 FF 9F CD |  if_b	jmp	#LR__1399
108b8     56 BB 02 F6 | 	mov	local11, local04
108bc     0B BA 66 F0 | 	shl	local11, #11
108c0     57 BF 02 F6 | 	mov	local13, local05
108c4     01 BE 66 F0 | 	shl	local13, #1
108c8     5F BB 02 F1 | 	add	local11, local13
108cc     5C 93 02 F6 | 	mov	arg01, local10
108d0     01 94 06 F6 | 	mov	arg02, #1
108d4     50 6A B1 FD | 	call	#__system___float_tointeger
108d8     3D 95 02 F6 | 	mov	arg02, result1
108dc     5D 93 02 F6 | 	mov	arg01, local11
108e0     98 02 B1 FD | 	call	#_psdpoke
108e4     01 AE 06 F1 | 	add	local05, #1
108e8     02 00 00 FF 
108ec     00 AE 56 F2 | 	cmps	local05, ##1024 wc
108f0     00 FF 9F CD |  if_b	jmp	#LR__1398
108f4                 | LR__1400
108f4                 | LR__1401
108f4     E7 F0 03 F6 | 	mov	ptra, fp
108f8     F2 00 A0 FD | 	call	#popregs_
108fc                 | _do_defsnd_ret
108fc     2D 00 64 FD | 	ret
10900                 | 
10900                 | ' 
10900                 | ' '-------------------- defsprite
10900                 | ' 
10900                 | ' sub do_defsprite
10900                 | _do_defsprite
10900     0B CA 05 F6 | 	mov	COUNT_, #11
10904     E8 00 A0 FD | 	call	#pushregs_
10908     60 F0 07 F1 | 	add	ptra, #96
1090c     60 CD BF FD | 	call	#_pop
10910     3D 97 02 F6 | 	mov	arg03, result1
10914     3E 95 02 F6 | 	mov	arg02, result2
10918     3F 93 02 F6 | 	mov	arg01, result3
1091c     30 CE 05 F1 | 	add	fp, #48
10920     E7 96 62 FC | 	wrlong	arg03, fp
10924     04 CE 05 F1 | 	add	fp, #4
10928     E7 94 62 FC | 	wrlong	arg02, fp
1092c     04 CE 05 F1 | 	add	fp, #4
10930     E7 92 62 FC | 	wrlong	arg01, fp
10934     38 CE 85 F1 | 	sub	fp, #56
10938     34 CD BF FD | 	call	#_pop
1093c     3D 97 02 F6 | 	mov	arg03, result1
10940     3E 95 02 F6 | 	mov	arg02, result2
10944     3F 93 02 F6 | 	mov	arg01, result3
10948     24 CE 05 F1 | 	add	fp, #36
1094c     E7 96 62 FC | 	wrlong	arg03, fp
10950     04 CE 05 F1 | 	add	fp, #4
10954     E7 94 62 FC | 	wrlong	arg02, fp
10958     04 CE 05 F1 | 	add	fp, #4
1095c     E7 92 62 FC | 	wrlong	arg01, fp
10960     2C CE 85 F1 | 	sub	fp, #44
10964     08 CD BF FD | 	call	#_pop
10968     3D 97 02 F6 | 	mov	arg03, result1
1096c     3E 95 02 F6 | 	mov	arg02, result2
10970     3F 93 02 F6 | 	mov	arg01, result3
10974     18 CE 05 F1 | 	add	fp, #24
10978     E7 96 62 FC | 	wrlong	arg03, fp
1097c     04 CE 05 F1 | 	add	fp, #4
10980     E7 94 62 FC | 	wrlong	arg02, fp
10984     04 CE 05 F1 | 	add	fp, #4
10988     E7 92 62 FC | 	wrlong	arg01, fp
1098c     20 CE 85 F1 | 	sub	fp, #32
10990     DC CC BF FD | 	call	#_pop
10994     3D 97 02 F6 | 	mov	arg03, result1
10998     3E 95 02 F6 | 	mov	arg02, result2
1099c     3F 93 02 F6 | 	mov	arg01, result3
109a0     0C CE 05 F1 | 	add	fp, #12
109a4     E7 96 62 FC | 	wrlong	arg03, fp
109a8     04 CE 05 F1 | 	add	fp, #4
109ac     E7 94 62 FC | 	wrlong	arg02, fp
109b0     04 CE 05 F1 | 	add	fp, #4
109b4     E7 92 62 FC | 	wrlong	arg01, fp
109b8     14 CE 85 F1 | 	sub	fp, #20
109bc     B0 CC BF FD | 	call	#_pop
109c0     3F 97 02 F6 | 	mov	arg03, result3
109c4     E7 7A 62 FC | 	wrlong	result1, fp
109c8     04 CE 05 F1 | 	add	fp, #4
109cc     E7 7C 62 FC | 	wrlong	result2, fp
109d0     04 CE 05 F1 | 	add	fp, #4
109d4     E7 96 62 FC | 	wrlong	arg03, fp
109d8     08 CE 85 F1 | 	sub	fp, #8
109dc     E7 92 02 F6 | 	mov	arg01, fp
109e0     68 CE BF FD | 	call	#_converttoint
109e4     3D A7 02 F6 | 	mov	local01, result1
109e8     E7 92 02 F6 | 	mov	arg01, fp
109ec     0C 92 06 F1 | 	add	arg01, #12
109f0     58 CE BF FD | 	call	#_converttoint
109f4     3D A9 02 F6 | 	mov	local02, result1
109f8     E7 92 02 F6 | 	mov	arg01, fp
109fc     18 92 06 F1 | 	add	arg01, #24
10a00     48 CE BF FD | 	call	#_converttoint
10a04     3D AB 02 F6 | 	mov	local03, result1
10a08     E7 92 02 F6 | 	mov	arg01, fp
10a0c     24 92 06 F1 | 	add	arg01, #36
10a10     38 CE BF FD | 	call	#_converttoint
10a14     3D AD 02 F6 | 	mov	local04, result1
10a18     E7 92 02 F6 | 	mov	arg01, fp
10a1c     30 92 06 F1 | 	add	arg01, #48
10a20     28 CE BF FD | 	call	#_converttoint
10a24     3D AF 02 F6 | 	mov	local05, result1
10a28                 | ' 
10a28                 | ' t5=pop()
10a28                 | ' t4=pop()
10a28                 | ' t3=pop()
10a28                 | ' t2=pop()
10a28                 | ' t1=pop()
10a28                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
10a28                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
10a28     53 97 02 F6 | 	mov	arg03, local01
10a2c     02 96 66 F0 | 	shl	arg03, #2
10a30     32 95 02 F6 | 	mov	arg02, objptr
10a34     54 00 00 FF 
10a38     30 94 06 F1 | 	add	arg02, ##43056
10a3c     4A 97 02 F1 | 	add	arg03, arg02
10a40     4B 97 0A FB | 	rdlong	arg03, arg03 wz
10a44     20 00 90 AD |  if_e	jmp	#LR__1410
10a48     53 97 02 F6 | 	mov	arg03, local01
10a4c     02 96 66 F0 | 	shl	arg03, #2
10a50     32 95 02 F6 | 	mov	arg02, objptr
10a54     54 00 00 FF 
10a58     30 94 06 F1 | 	add	arg02, ##43056
10a5c     4A 97 02 F1 | 	add	arg03, arg02
10a60     4B 93 02 FB | 	rdlong	arg01, arg03
10a64     64 78 B1 FD | 	call	#__system___gc_free
10a68                 | LR__1410
10a68     57 AD 02 FD | 	qmul	local04, local05
10a6c     53 B1 02 F6 | 	mov	local06, local01
10a70     02 B0 66 F0 | 	shl	local06, #2
10a74     32 97 02 F6 | 	mov	arg03, objptr
10a78     54 00 00 FF 
10a7c     30 96 06 F1 | 	add	arg03, ##43056
10a80     4B B1 02 F1 | 	add	local06, arg03
10a84     18 92 62 FD | 	getqx	arg01
10a88     0C 77 B1 FD | 	call	#__system___gc_alloc_managed
10a8c     58 7B 62 FC | 	wrlong	result1, local06
10a90                 | ' for y=a3 to a3+a5-1
10a90     55 B3 02 F6 | 	mov	local07, local03
10a94     55 B5 02 F6 | 	mov	local08, local03
10a98     57 B5 02 F1 | 	add	local08, local05
10a9c                 | LR__1411
10a9c     5A B3 52 F2 | 	cmps	local07, local08 wc
10aa0     7C 00 90 3D |  if_ae	jmp	#LR__1414
10aa4                 | '   for x=a2 to a4+a2-1
10aa4     54 B7 02 F6 | 	mov	local09, local02
10aa8     56 B9 02 F6 | 	mov	local10, local04
10aac     54 B9 02 F1 | 	add	local10, local02
10ab0                 | LR__1412
10ab0     5C B7 52 F2 | 	cmps	local09, local10 wc
10ab4     60 00 90 3D |  if_ae	jmp	#LR__1413
10ab8     59 B1 02 F6 | 	mov	local06, local07
10abc     55 B1 82 F1 | 	sub	local06, local03
10ac0     56 B1 02 FD | 	qmul	local06, local04
10ac4     53 B1 02 F6 | 	mov	local06, local01
10ac8     02 B0 66 F0 | 	shl	local06, #2
10acc     32 97 02 F6 | 	mov	arg03, objptr
10ad0     54 00 00 FF 
10ad4     30 96 06 F1 | 	add	arg03, ##43056
10ad8     4B B1 02 F1 | 	add	local06, arg03
10adc     58 B1 02 FB | 	rdlong	local06, local06
10ae0     5B BB 02 F6 | 	mov	local11, local09
10ae4     54 BB 82 F1 | 	sub	local11, local02
10ae8     32 93 02 FB | 	rdlong	arg01, objptr
10aec     5B 93 02 F1 | 	add	arg01, local09
10af0     59 97 02 F6 | 	mov	arg03, local07
10af4     0A 96 66 F0 | 	shl	arg03, #10
10af8     4B 93 02 F1 | 	add	arg01, arg03
10afc     18 96 62 FD | 	getqx	arg03
10b00     4B BB 02 F1 | 	add	local11, arg03
10b04     58 BB 02 F1 | 	add	local11, local06
10b08     08 01 B1 FD | 	call	#_pspeek
10b0c     5D 7B 42 FC | 	wrbyte	result1, local11
10b10     01 B6 06 F1 | 	add	local09, #1
10b14     98 FF 9F FD | 	jmp	#LR__1412
10b18                 | LR__1413
10b18     01 B2 06 F1 | 	add	local07, #1
10b1c     7C FF 9F FD | 	jmp	#LR__1411
10b20                 | LR__1414
10b20     53 BB 02 F6 | 	mov	local11, local01
10b24     02 BA 66 F0 | 	shl	local11, #2
10b28     32 B9 02 F6 | 	mov	local10, objptr
10b2c     54 00 00 FF 
10b30     30 B8 06 F1 | 	add	local10, ##43056
10b34     5C BB 02 F1 | 	add	local11, local10
10b38     5D 95 02 FB | 	rdlong	arg02, local11
10b3c     53 93 02 F6 | 	mov	arg01, local01
10b40     28 0E B1 FD | 	call	#_hg010b_spin2_setspriteptr
10b44     53 93 02 F6 | 	mov	arg01, local01
10b48     56 95 02 F6 | 	mov	arg02, local04
10b4c     57 97 02 F6 | 	mov	arg03, local05
10b50     A4 0E B1 FD | 	call	#_hg010b_spin2_setspritesize
10b54     E7 F0 03 F6 | 	mov	ptra, fp
10b58     F2 00 A0 FD | 	call	#popregs_
10b5c                 | _do_defsprite_ret
10b5c     2D 00 64 FD | 	ret
10b60                 | 
10b60                 | ' 
10b60                 | ' '-------------------- deg
10b60                 | ' 
10b60                 | ' sub do_deg
10b60                 | _do_deg
10b60     54 00 00 FF 
10b64     84 64 06 F1 | 	add	objptr, ##43140
10b68     7D 47 9E FF 
10b6c     32 6B 68 FC | 	wrlong	##1016003125, objptr
10b70     04 64 06 F1 | 	add	objptr, #4
10b74     97 32 A1 FF 
10b78     32 C3 69 FC | 	wrlong	##1113927393, objptr
10b7c     54 00 00 FF 
10b80     88 64 86 F1 | 	sub	objptr, ##43144
10b84                 | _do_deg_ret
10b84     2D 00 64 FD | 	ret
10b88                 | 
10b88                 | ' 
10b88                 | ' '-------------------- delete
10b88                 | ' 
10b88                 | ' sub do_delete
10b88                 | _do_delete
10b88     05 CA 05 F6 | 	mov	COUNT_, #5
10b8c     E8 00 A0 FD | 	call	#pushregs_
10b90     DC CA BF FD | 	call	#_pop
10b94     3E 99 02 F6 | 	mov	arg04, result2
10b98     3F 97 02 F6 | 	mov	arg03, result3
10b9c     3D A7 02 F6 | 	mov	local01, result1
10ba0     4C A9 02 F6 | 	mov	local02, arg04
10ba4     4B AB 02 F6 | 	mov	local03, arg03
10ba8                 | ' 
10ba8                 | ' t1=pop()
10ba8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10ba8     2B AA 0E F2 | 	cmp	local03, #43 wz
10bac     10 00 90 5D |  if_ne	jmp	#LR__1420
10bb0     53 93 02 F6 | 	mov	arg01, local01
10bb4     28 CC BF FD | 	call	#_convertstring
10bb8     3D A7 02 F6 | 	mov	local01, result1
10bbc     1F AA 06 F6 | 	mov	local03, #31
10bc0                 | LR__1420
10bc0                 | ' if t1.result_type<>result_string then printerror(15): return
10bc0     1F AA 0E F2 | 	cmp	local03, #31 wz
10bc4     10 00 90 AD |  if_e	jmp	#LR__1421
10bc8     0F 92 06 F6 | 	mov	arg01, #15
10bcc     00 94 06 F6 | 	mov	arg02, #0
10bd0     C4 FD B0 FD | 	call	#_printerror
10bd4     E4 00 90 FD | 	jmp	#LR__1425
10bd8                 | LR__1421
10bd8                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
10bd8     4C 00 00 FF 
10bdc     38 64 06 F1 | 	add	objptr, ##38968
10be0     32 93 02 FB | 	rdlong	arg01, objptr
10be4     4C 00 00 FF 
10be8     38 64 86 F1 | 	sub	objptr, ##38968
10bec     95 01 00 FF 
10bf0     ED 95 06 F6 | 	mov	arg02, ##@LR__5983
10bf4     C0 3B B1 FD | 	call	#__system___string_cmp
10bf8     00 7A 0E F2 | 	cmp	result1, #0 wz
10bfc     34 00 90 AD |  if_e	jmp	#LR__1422
10c00     4C 00 00 FF 
10c04     38 64 06 F1 | 	add	objptr, ##38968
10c08     32 93 02 FB | 	rdlong	arg01, objptr
10c0c     4C 00 00 FF 
10c10     38 64 86 F1 | 	sub	objptr, ##38968
10c14     95 01 00 FF 
10c18     EF 95 06 F6 | 	mov	arg02, ##@LR__5984
10c1c     CC 3B B1 FD | 	call	#__system___string_concat
10c20     3D 93 02 F6 | 	mov	arg01, result1
10c24     53 95 02 F6 | 	mov	arg02, local01
10c28     C0 3B B1 FD | 	call	#__system___string_concat
10c2c     3D AD 02 F6 | 	mov	local04, result1
10c30     14 00 90 FD | 	jmp	#LR__1423
10c34                 | LR__1422
10c34     95 01 00 FF 
10c38     F1 93 06 F6 | 	mov	arg01, ##@LR__5985
10c3c     53 95 02 F6 | 	mov	arg02, local01
10c40     A8 3B B1 FD | 	call	#__system___string_concat
10c44     3D AD 02 F6 | 	mov	local04, result1
10c48                 | LR__1423
10c48     56 93 02 F6 | 	mov	arg01, local04
10c4c     38 5B B1 FD | 	call	#__system___remove
10c50     20 68 06 F1 | 	add	ptr___system__dat__, #32
10c54     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
10c58     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
10c5c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
10c60     3D AF 0A F6 | 	mov	local05, result1 wz
10c64                 | ' kill filename$
10c64                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
10c64     54 00 90 AD |  if_e	jmp	#LR__1424
10c68     00 92 06 F6 | 	mov	arg01, #0
10c6c     A4 90 B1 FD | 	call	#__system___getiolock_0622
10c70     3D 93 02 F6 | 	mov	arg01, result1
10c74     18 3B B1 FD | 	call	#__system___lockmem
10c78     95 01 00 FF 
10c7c     F3 95 06 F6 | 	mov	arg02, ##@LR__5986
10c80     00 92 06 F6 | 	mov	arg01, #0
10c84     00 96 06 F6 | 	mov	arg03, #0
10c88     F8 47 B1 FD | 	call	#__system___basic_print_string
10c8c     00 92 06 F6 | 	mov	arg01, #0
10c90     57 95 02 F6 | 	mov	arg02, local05
10c94     00 96 06 F6 | 	mov	arg03, #0
10c98     0A 98 06 F6 | 	mov	arg04, #10
10c9c     28 48 B1 FD | 	call	#__system___basic_print_integer
10ca0     00 92 06 F6 | 	mov	arg01, #0
10ca4     0A 94 06 F6 | 	mov	arg02, #10
10ca8     00 96 06 F6 | 	mov	arg03, #0
10cac     7C 47 B1 FD | 	call	#__system___basic_print_char
10cb0     00 92 06 F6 | 	mov	arg01, #0
10cb4     5C 90 B1 FD | 	call	#__system___getiolock_0622
10cb8     3D 01 68 FC | 	wrlong	#0, result1
10cbc                 | LR__1424
10cbc                 | LR__1425
10cbc     E7 F0 03 F6 | 	mov	ptra, fp
10cc0     F2 00 A0 FD | 	call	#popregs_
10cc4                 | _do_delete_ret
10cc4     2D 00 64 FD | 	ret
10cc8                 | 
10cc8                 | ' 
10cc8                 | ' '-------------------- dir
10cc8                 | ' 
10cc8                 | ' sub do_dir
10cc8                 | _do_dir
10cc8     13 CA 05 F6 | 	mov	COUNT_, #19
10ccc     E8 00 A0 FD | 	call	#pushregs_
10cd0     01 00 00 FF 
10cd4     38 F0 07 F1 | 	add	ptra, ##568
10cd8                 | ' 
10cd8                 | ' print "Current directory: "; currentdir$ 
10cd8     00 92 06 F6 | 	mov	arg01, #0
10cdc     34 90 B1 FD | 	call	#__system___getiolock_0622
10ce0     3D 93 02 F6 | 	mov	arg01, result1
10ce4     A8 3A B1 FD | 	call	#__system___lockmem
10ce8     96 01 00 FF 
10cec     2B 94 06 F6 | 	mov	arg02, ##@LR__5987
10cf0     00 92 06 F6 | 	mov	arg01, #0
10cf4     00 96 06 F6 | 	mov	arg03, #0
10cf8     88 47 B1 FD | 	call	#__system___basic_print_string
10cfc     4C 00 00 FF 
10d00     38 64 06 F1 | 	add	objptr, ##38968
10d04     32 95 02 FB | 	rdlong	arg02, objptr
10d08     4C 00 00 FF 
10d0c     38 64 86 F1 | 	sub	objptr, ##38968
10d10     00 92 06 F6 | 	mov	arg01, #0
10d14     00 96 06 F6 | 	mov	arg03, #0
10d18     68 47 B1 FD | 	call	#__system___basic_print_string
10d1c     00 92 06 F6 | 	mov	arg01, #0
10d20     0A 94 06 F6 | 	mov	arg02, #10
10d24     00 96 06 F6 | 	mov	arg03, #0
10d28     00 47 B1 FD | 	call	#__system___basic_print_char
10d2c     01 A6 06 F6 | 	mov	local01, #1
10d30     00 92 06 F6 | 	mov	arg01, #0
10d34     DC 8F B1 FD | 	call	#__system___getiolock_0622
10d38     3D 01 68 FC | 	wrlong	#0, result1
10d3c     00 A8 06 F6 | 	mov	local02, #0
10d40     00 AA 06 F6 | 	mov	local03, #0
10d44                 | ' px=0
10d44                 | ' for i=0 to 127: filelist(i)="" : next i
10d44     00 AC 06 F6 | 	mov	local04, #0
10d48     1C CE 05 F1 | 	add	fp, #28
10d4c     D7 12 48 FB | 	callpa	#(@LR__1431-@LR__1430)>>2,fcache_load_ptr_
10d50                 | LR__1430
10d50     56 AF 02 F6 | 	mov	local05, local04
10d54     02 AE 66 F0 | 	shl	local05, #2
10d58     E7 AE 02 F1 | 	add	local05, fp
10d5c     96 01 00 FF 
10d60     3F B0 06 F6 | 	mov	local06, ##@LR__5988
10d64     57 B1 62 FC | 	wrlong	local06, local05
10d68     01 AC 06 F1 | 	add	local04, #1
10d6c     80 AC 56 F2 | 	cmps	local04, #128 wc
10d70     DC FF 9F CD |  if_b	jmp	#LR__1430
10d74                 | LR__1431
10d74     1C CE 85 F1 | 	sub	fp, #28
10d78     96 01 00 FF 
10d7c     40 92 06 F6 | 	mov	arg01, ##@LR__5989
10d80     10 94 06 F6 | 	mov	arg02, #16
10d84     44 91 B1 FD | 	call	#__system___basic_dir
10d88     3D B3 02 F6 | 	mov	local07, result1
10d8c     00 B4 06 F6 | 	mov	local08, #0
10d90                 | ' filename=dir$("*", fbDirectory)
10d90                 | ' n=0
10d90                 | ' while filename <> "" andalso filename <> nil andalso n<128
10d90                 | LR__1432
10d90     96 01 00 FF 
10d94     42 B6 06 F6 | 	mov	local09, ##@LR__5990
10d98     59 93 02 F6 | 	mov	arg01, local07
10d9c     5B 95 02 F6 | 	mov	arg02, local09
10da0     14 3A B1 FD | 	call	#__system___string_cmp
10da4     00 7A 0E F2 | 	cmp	result1, #0 wz
10da8     68 00 90 AD |  if_e	jmp	#LR__1433
10dac     00 B6 06 F6 | 	mov	local09, #0
10db0     59 93 02 F6 | 	mov	arg01, local07
10db4     00 94 06 F6 | 	mov	arg02, #0
10db8     FC 39 B1 FD | 	call	#__system___string_cmp
10dbc     00 7A 0E F2 | 	cmp	result1, #0 wz
10dc0     50 00 90 AD |  if_e	jmp	#LR__1433
10dc4     80 B4 56 F2 | 	cmps	local08, #128 wc
10dc8     48 00 90 3D |  if_ae	jmp	#LR__1433
10dcc     96 01 00 FF 
10dd0     43 92 06 F6 | 	mov	arg01, ##@LR__5991
10dd4     59 95 02 F6 | 	mov	arg02, local07
10dd8     10 3A B1 FD | 	call	#__system___string_concat
10ddc     3D B3 02 F6 | 	mov	local07, result1
10de0     5A AF 02 F6 | 	mov	local05, local08
10de4     02 AE 66 F0 | 	shl	local05, #2
10de8     E7 B6 02 F6 | 	mov	local09, fp
10dec     1C B6 06 F1 | 	add	local09, #28
10df0     5B AF 02 F1 | 	add	local05, local09
10df4     57 B3 62 FC | 	wrlong	local07, local05
10df8     01 B4 06 F1 | 	add	local08, #1
10dfc     00 AE 06 F6 | 	mov	local05, #0
10e00     00 92 06 F6 | 	mov	arg01, #0
10e04     00 94 06 F6 | 	mov	arg02, #0
10e08     C0 90 B1 FD | 	call	#__system___basic_dir
10e0c     3D B3 02 F6 | 	mov	local07, result1
10e10     7C FF 9F FD | 	jmp	#LR__1432
10e14                 | LR__1433
10e14                 | ' for i=0 to n-1			' now sort this
10e14     00 AC 06 F6 | 	mov	local04, #0
10e18     5A B9 02 F6 | 	mov	local10, local08
10e1c                 | LR__1434
10e1c     5C AD 52 F2 | 	cmps	local04, local10 wc
10e20     DC 00 90 3D |  if_ae	jmp	#LR__1438
10e24     00 BA 06 F6 | 	mov	local11, #0
10e28                 | '   swapped=false
10e28                 | '   for j=0 to n-i-2
10e28     00 BC 06 F6 | 	mov	local12, #0
10e2c     5A BF 02 F6 | 	mov	local13, local08
10e30     56 BF 82 F1 | 	sub	local13, local04
10e34     01 BE 86 F1 | 	sub	local13, #1
10e38                 | LR__1435
10e38     5F BD 52 F2 | 	cmps	local12, local13 wc
10e3c     B0 00 90 3D |  if_ae	jmp	#LR__1437
10e40                 | '     if filelist(j) > filelist(j+1) then
10e40     5E B7 02 F6 | 	mov	local09, local12
10e44     02 B6 66 F0 | 	shl	local09, #2
10e48     1C CE 05 F1 | 	add	fp, #28
10e4c     E7 B6 02 F1 | 	add	local09, fp
10e50     5B 93 02 FB | 	rdlong	arg01, local09
10e54     5E B7 02 F6 | 	mov	local09, local12
10e58     01 B6 06 F1 | 	add	local09, #1
10e5c     5B B1 02 F6 | 	mov	local06, local09
10e60     02 B0 66 F0 | 	shl	local06, #2
10e64     E7 A6 02 F6 | 	mov	local01, fp
10e68     E7 B0 02 F1 | 	add	local06, fp
10e6c     58 AF 02 FB | 	rdlong	local05, local06
10e70     57 95 02 F6 | 	mov	arg02, local05
10e74     1C CE 85 F1 | 	sub	fp, #28
10e78     3C 39 B1 FD | 	call	#__system___string_cmp
10e7c     01 7A 56 F2 | 	cmps	result1, #1 wc
10e80     64 00 90 CD |  if_b	jmp	#LR__1436
10e84     5E B7 02 F6 | 	mov	local09, local12
10e88     01 B6 06 F1 | 	add	local09, #1
10e8c     02 B6 66 F0 | 	shl	local09, #2
10e90     1C CE 05 F1 | 	add	fp, #28
10e94     E7 B6 02 F1 | 	add	local09, fp
10e98     5B BB 02 FB | 	rdlong	local11, local09
10e9c     5E B1 02 F6 | 	mov	local06, local12
10ea0     02 B0 66 F0 | 	shl	local06, #2
10ea4     E7 B0 02 F1 | 	add	local06, fp
10ea8     58 AF 02 FB | 	rdlong	local05, local06
10eac     5E B7 02 F6 | 	mov	local09, local12
10eb0     5B B1 02 F6 | 	mov	local06, local09
10eb4     02 B0 66 F0 | 	shl	local06, #2
10eb8     E7 A6 02 F6 | 	mov	local01, fp
10ebc     E7 B0 02 F1 | 	add	local06, fp
10ec0     58 BB 62 FC | 	wrlong	local11, local06
10ec4     5E A9 02 F6 | 	mov	local02, local12
10ec8     01 A8 06 F1 | 	add	local02, #1
10ecc     54 C1 02 F6 | 	mov	local14, local02
10ed0     02 C0 66 F0 | 	shl	local14, #2
10ed4     E7 C2 02 F6 | 	mov	local15, fp
10ed8     E7 C0 02 F1 | 	add	local14, fp
10edc     60 AF 62 FC | 	wrlong	local05, local14
10ee0     01 BA 66 F6 | 	neg	local11, #1
10ee4     1C CE 85 F1 | 	sub	fp, #28
10ee8                 | LR__1436
10ee8     01 BC 06 F1 | 	add	local12, #1
10eec     48 FF 9F FD | 	jmp	#LR__1435
10ef0                 | LR__1437
10ef0                 | ' if not swapped then exit for
10ef0     5D C5 22 F6 | 	not	local16, local11
10ef4     00 C4 0E F2 | 	cmp	local16, #0 wz
10ef8     01 AC 06 A1 |  if_e	add	local04, #1
10efc     1C FF 9F AD |  if_e	jmp	#LR__1434
10f00                 | LR__1438
10f00                 | ' for i=0 to n-1
10f00     00 AC 06 F6 | 	mov	local04, #0
10f04     5A C7 02 F6 | 	mov	local17, local08
10f08                 | LR__1439
10f08     63 AD 52 F2 | 	cmps	local04, local17 wc
10f0c     90 00 90 3D |  if_ae	jmp	#LR__1441
10f10                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
10f10     00 92 06 F6 | 	mov	arg01, #0
10f14     FC 8D B1 FD | 	call	#__system___getiolock_0622
10f18     3D 93 02 F6 | 	mov	arg01, result1
10f1c     70 38 B1 FD | 	call	#__system___lockmem
10f20     56 A9 02 F6 | 	mov	local02, local04
10f24     02 A8 66 F0 | 	shl	local02, #2
10f28     E7 C0 02 F6 | 	mov	local14, fp
10f2c     1C C0 06 F1 | 	add	local14, #28
10f30     60 A9 02 F1 | 	add	local02, local14
10f34     54 95 02 FB | 	rdlong	arg02, local02
10f38     00 A6 06 F6 | 	mov	local01, #0
10f3c     00 92 06 F6 | 	mov	arg01, #0
10f40     00 96 06 F6 | 	mov	arg03, #0
10f44     3C 45 B1 FD | 	call	#__system___basic_print_string
10f48     00 92 06 F6 | 	mov	arg01, #0
10f4c     C4 8D B1 FD | 	call	#__system___getiolock_0622
10f50     3D 01 68 FC | 	wrlong	#0, result1
10f54     40 AA 06 F1 | 	add	local03, #64
10f58     55 93 02 F6 | 	mov	arg01, local03
10f5c     30 17 B1 FD | 	call	#_hg010b_spin2_setcursorx
10f60     00 AB 56 F2 | 	cmps	local03, #256 wc
10f64     30 00 90 CD |  if_b	jmp	#LR__1440
10f68     00 AA 06 F6 | 	mov	local03, #0
10f6c     00 92 06 F6 | 	mov	arg01, #0
10f70     A0 8D B1 FD | 	call	#__system___getiolock_0622
10f74     3D 93 02 F6 | 	mov	arg01, result1
10f78     14 38 B1 FD | 	call	#__system___lockmem
10f7c     00 92 06 F6 | 	mov	arg01, #0
10f80     0A 94 06 F6 | 	mov	arg02, #10
10f84     00 96 06 F6 | 	mov	arg03, #0
10f88     A0 44 B1 FD | 	call	#__system___basic_print_char
10f8c     00 92 06 F6 | 	mov	arg01, #0
10f90     80 8D B1 FD | 	call	#__system___getiolock_0622
10f94     3D 01 68 FC | 	wrlong	#0, result1
10f98                 | LR__1440
10f98     01 AC 06 F1 | 	add	local04, #1
10f9c     68 FF 9F FD | 	jmp	#LR__1439
10fa0                 | LR__1441
10fa0                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
10fa0     80 B4 56 F2 | 	cmps	local08, #128 wc
10fa4     44 00 90 CD |  if_b	jmp	#LR__1442
10fa8     00 92 06 F6 | 	mov	arg01, #0
10fac     64 8D B1 FD | 	call	#__system___getiolock_0622
10fb0     3D 93 02 F6 | 	mov	arg01, result1
10fb4     D8 37 B1 FD | 	call	#__system___lockmem
10fb8     96 01 00 FF 
10fbc     4A 94 06 F6 | 	mov	arg02, ##@LR__5992
10fc0     00 92 06 F6 | 	mov	arg01, #0
10fc4     00 96 06 F6 | 	mov	arg03, #0
10fc8     B8 44 B1 FD | 	call	#__system___basic_print_string
10fcc     00 92 06 F6 | 	mov	arg01, #0
10fd0     0A 94 06 F6 | 	mov	arg02, #10
10fd4     00 96 06 F6 | 	mov	arg03, #0
10fd8     50 44 B1 FD | 	call	#__system___basic_print_char
10fdc     00 92 06 F6 | 	mov	arg01, #0
10fe0     30 8D B1 FD | 	call	#__system___getiolock_0622
10fe4     3D 01 68 FC | 	wrlong	#0, result1
10fe8     00 A6 06 F6 | 	mov	local01, #0
10fec                 | LR__1442
10fec                 | ' print
10fec     00 92 06 F6 | 	mov	arg01, #0
10ff0     20 8D B1 FD | 	call	#__system___getiolock_0622
10ff4     3D 93 02 F6 | 	mov	arg01, result1
10ff8     94 37 B1 FD | 	call	#__system___lockmem
10ffc     00 92 06 F6 | 	mov	arg01, #0
11000     0A 94 06 F6 | 	mov	arg02, #10
11004     00 96 06 F6 | 	mov	arg03, #0
11008     20 44 B1 FD | 	call	#__system___basic_print_char
1100c     00 92 06 F6 | 	mov	arg01, #0
11010     00 8D B1 FD | 	call	#__system___getiolock_0622
11014     3D 01 68 FC | 	wrlong	#0, result1
11018     00 B0 06 F6 | 	mov	local06, #0
1101c     00 B4 06 F6 | 	mov	local08, #0
11020     00 AA 06 F6 | 	mov	local03, #0
11024                 | ' return cursor_y
11024     3E 64 06 F1 | 	add	objptr, #62
11028     32 C9 C2 FA | 	rdbyte	local18, objptr
1102c     3E 64 86 F1 | 	sub	objptr, #62
11030     96 01 00 FF 
11034     7C 92 06 F6 | 	mov	arg01, ##@LR__5993
11038     21 94 06 F6 | 	mov	arg02, #33
1103c     8C 8E B1 FD | 	call	#__system___basic_dir
11040     3D B3 02 F6 | 	mov	local07, result1
11044                 | ' n=0
11044                 | ' px=0: py=v.getcursory()
11044                 | ' filename = dir$("*", fbNormal )   
11044                 | ' do while filename <> "" andalso filename <> nil andalso n<128
11044                 | LR__1443
11044     96 01 00 FF 
11048     7E B6 06 F6 | 	mov	local09, ##@LR__5994
1104c     59 93 02 F6 | 	mov	arg01, local07
11050     5B 95 02 F6 | 	mov	arg02, local09
11054     60 37 B1 FD | 	call	#__system___string_cmp
11058     00 7A 0E F2 | 	cmp	result1, #0 wz
1105c     54 00 90 AD |  if_e	jmp	#LR__1444
11060     00 B6 06 F6 | 	mov	local09, #0
11064     59 93 02 F6 | 	mov	arg01, local07
11068     00 94 06 F6 | 	mov	arg02, #0
1106c     48 37 B1 FD | 	call	#__system___string_cmp
11070     00 7A 0E F2 | 	cmp	result1, #0 wz
11074     3C 00 90 AD |  if_e	jmp	#LR__1444
11078     80 B4 56 F2 | 	cmps	local08, #128 wc
1107c     34 00 90 3D |  if_ae	jmp	#LR__1444
11080     5A AF 02 F6 | 	mov	local05, local08
11084     02 AE 66 F0 | 	shl	local05, #2
11088     E7 B6 02 F6 | 	mov	local09, fp
1108c     1C B6 06 F1 | 	add	local09, #28
11090     5B AF 02 F1 | 	add	local05, local09
11094     57 B3 62 FC | 	wrlong	local07, local05
11098     01 B4 06 F1 | 	add	local08, #1
1109c     00 AE 06 F6 | 	mov	local05, #0
110a0     00 92 06 F6 | 	mov	arg01, #0
110a4     00 94 06 F6 | 	mov	arg02, #0
110a8     20 8E B1 FD | 	call	#__system___basic_dir
110ac     3D B3 02 F6 | 	mov	local07, result1
110b0     90 FF 9F FD | 	jmp	#LR__1443
110b4                 | LR__1444
110b4                 | ' for i =0 to n-1
110b4     00 AC 06 F6 | 	mov	local04, #0
110b8                 | LR__1445
110b8     5A AD 52 F2 | 	cmps	local04, local08 wc
110bc     D8 00 90 3D |  if_ae	jmp	#LR__1449
110c0     00 BA 06 F6 | 	mov	local11, #0
110c4                 | '   swapped=false
110c4                 | '   for j=0 to n-i-2
110c4     00 BC 06 F6 | 	mov	local12, #0
110c8     5A CB 02 F6 | 	mov	local19, local08
110cc     56 CB 82 F1 | 	sub	local19, local04
110d0     01 CA 86 F1 | 	sub	local19, #1
110d4                 | LR__1446
110d4     65 BD 52 F2 | 	cmps	local12, local19 wc
110d8     AC 00 90 3D |  if_ae	jmp	#LR__1448
110dc                 | '     if filelist(j) > filelist(j+1) then
110dc     5E B7 02 F6 | 	mov	local09, local12
110e0     02 B6 66 F0 | 	shl	local09, #2
110e4     1C CE 05 F1 | 	add	fp, #28
110e8     E7 B6 02 F1 | 	add	local09, fp
110ec     5B 93 02 FB | 	rdlong	arg01, local09
110f0     5E B7 02 F6 | 	mov	local09, local12
110f4     01 B6 06 F1 | 	add	local09, #1
110f8     5B B1 02 F6 | 	mov	local06, local09
110fc     02 B0 66 F0 | 	shl	local06, #2
11100     E7 A6 02 F6 | 	mov	local01, fp
11104     E7 B0 02 F1 | 	add	local06, fp
11108     58 AF 02 FB | 	rdlong	local05, local06
1110c     57 95 02 F6 | 	mov	arg02, local05
11110     1C CE 85 F1 | 	sub	fp, #28
11114     A0 36 B1 FD | 	call	#__system___string_cmp
11118     01 7A 56 F2 | 	cmps	result1, #1 wc
1111c     60 00 90 CD |  if_b	jmp	#LR__1447
11120     5E B7 02 F6 | 	mov	local09, local12
11124     01 B6 06 F1 | 	add	local09, #1
11128     02 B6 66 F0 | 	shl	local09, #2
1112c     1C CE 05 F1 | 	add	fp, #28
11130     E7 B6 02 F1 | 	add	local09, fp
11134     5B C5 02 FB | 	rdlong	local16, local09
11138     5E B1 02 F6 | 	mov	local06, local12
1113c     02 B0 66 F0 | 	shl	local06, #2
11140     E7 B0 02 F1 | 	add	local06, fp
11144     58 AF 02 FB | 	rdlong	local05, local06
11148     5E B7 02 F6 | 	mov	local09, local12
1114c     5B B1 02 F6 | 	mov	local06, local09
11150     02 B0 66 F0 | 	shl	local06, #2
11154     E7 A6 02 F6 | 	mov	local01, fp
11158     E7 B0 02 F1 | 	add	local06, fp
1115c     58 C5 62 FC | 	wrlong	local16, local06
11160     5E C1 02 F6 | 	mov	local14, local12
11164     01 C0 06 F1 | 	add	local14, #1
11168     02 C0 66 F0 | 	shl	local14, #2
1116c     E7 C2 02 F6 | 	mov	local15, fp
11170     E7 C0 02 F1 | 	add	local14, fp
11174     60 AF 62 FC | 	wrlong	local05, local14
11178     01 BA 66 F6 | 	neg	local11, #1
1117c     1C CE 85 F1 | 	sub	fp, #28
11180                 | LR__1447
11180     01 BC 06 F1 | 	add	local12, #1
11184     4C FF 9F FD | 	jmp	#LR__1446
11188                 | LR__1448
11188                 | ' if not swapped then exit for
11188     5D C5 22 F6 | 	not	local16, local11
1118c     00 C4 0E F2 | 	cmp	local16, #0 wz
11190     01 AC 06 A1 |  if_e	add	local04, #1
11194     20 FF 9F AD |  if_e	jmp	#LR__1445
11198                 | LR__1449
11198                 | ' for i=0 to n-1
11198     00 AC 06 F6 | 	mov	local04, #0
1119c                 | LR__1450
1119c     5A AD 52 F2 | 	cmps	local04, local08 wc
111a0     8C 00 90 3D |  if_ae	jmp	#LR__1452
111a4                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
111a4     00 92 06 F6 | 	mov	arg01, #0
111a8     68 8B B1 FD | 	call	#__system___getiolock_0622
111ac     3D 93 02 F6 | 	mov	arg01, result1
111b0     DC 35 B1 FD | 	call	#__system___lockmem
111b4     56 A9 02 F6 | 	mov	local02, local04
111b8     02 A8 66 F0 | 	shl	local02, #2
111bc     E7 C0 02 F6 | 	mov	local14, fp
111c0     1C C0 06 F1 | 	add	local14, #28
111c4     60 A9 02 F1 | 	add	local02, local14
111c8     54 95 02 FB | 	rdlong	arg02, local02
111cc     00 92 06 F6 | 	mov	arg01, #0
111d0     00 96 06 F6 | 	mov	arg03, #0
111d4     AC 42 B1 FD | 	call	#__system___basic_print_string
111d8     00 92 06 F6 | 	mov	arg01, #0
111dc     34 8B B1 FD | 	call	#__system___getiolock_0622
111e0     3D 01 68 FC | 	wrlong	#0, result1
111e4     40 AA 06 F1 | 	add	local03, #64
111e8     55 93 02 F6 | 	mov	arg01, local03
111ec     A0 14 B1 FD | 	call	#_hg010b_spin2_setcursorx
111f0     00 AB 56 F2 | 	cmps	local03, #256 wc
111f4     30 00 90 CD |  if_b	jmp	#LR__1451
111f8     00 AA 06 F6 | 	mov	local03, #0
111fc     00 92 06 F6 | 	mov	arg01, #0
11200     10 8B B1 FD | 	call	#__system___getiolock_0622
11204     3D 93 02 F6 | 	mov	arg01, result1
11208     84 35 B1 FD | 	call	#__system___lockmem
1120c     00 92 06 F6 | 	mov	arg01, #0
11210     0A 94 06 F6 | 	mov	arg02, #10
11214     00 96 06 F6 | 	mov	arg03, #0
11218     10 42 B1 FD | 	call	#__system___basic_print_char
1121c     00 92 06 F6 | 	mov	arg01, #0
11220     F0 8A B1 FD | 	call	#__system___getiolock_0622
11224     3D 01 68 FC | 	wrlong	#0, result1
11228                 | LR__1451
11228     01 AC 06 F1 | 	add	local04, #1
1122c     6C FF 9F FD | 	jmp	#LR__1450
11230                 | LR__1452
11230                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11230     80 B4 56 F2 | 	cmps	local08, #128 wc
11234     40 00 90 CD |  if_b	jmp	#LR__1453
11238     00 92 06 F6 | 	mov	arg01, #0
1123c     D4 8A B1 FD | 	call	#__system___getiolock_0622
11240     3D 93 02 F6 | 	mov	arg01, result1
11244     48 35 B1 FD | 	call	#__system___lockmem
11248     96 01 00 FF 
1124c     7F 94 06 F6 | 	mov	arg02, ##@LR__5995
11250     00 92 06 F6 | 	mov	arg01, #0
11254     00 96 06 F6 | 	mov	arg03, #0
11258     28 42 B1 FD | 	call	#__system___basic_print_string
1125c     00 92 06 F6 | 	mov	arg01, #0
11260     0A 94 06 F6 | 	mov	arg02, #10
11264     00 96 06 F6 | 	mov	arg03, #0
11268     C0 41 B1 FD | 	call	#__system___basic_print_char
1126c     00 92 06 F6 | 	mov	arg01, #0
11270     A0 8A B1 FD | 	call	#__system___getiolock_0622
11274     3D 01 68 FC | 	wrlong	#0, result1
11278                 | LR__1453
11278                 | ' print
11278     00 92 06 F6 | 	mov	arg01, #0
1127c     94 8A B1 FD | 	call	#__system___getiolock_0622
11280     3D 93 02 F6 | 	mov	arg01, result1
11284     08 35 B1 FD | 	call	#__system___lockmem
11288     00 92 06 F6 | 	mov	arg01, #0
1128c     0A 94 06 F6 | 	mov	arg02, #10
11290     00 96 06 F6 | 	mov	arg03, #0
11294     94 41 B1 FD | 	call	#__system___basic_print_char
11298     00 92 06 F6 | 	mov	arg01, #0
1129c     74 8A B1 FD | 	call	#__system___getiolock_0622
112a0     3D 01 68 FC | 	wrlong	#0, result1
112a4     E7 F0 03 F6 | 	mov	ptra, fp
112a8     F2 00 A0 FD | 	call	#popregs_
112ac                 | _do_dir_ret
112ac     2D 00 64 FD | 	ret
112b0                 | 
112b0                 | ' 
112b0                 | ' '-------------------- dpeek
112b0                 | ' 
112b0                 | ' sub do_dpeek
112b0                 | _do_dpeek
112b0     01 CA 05 F6 | 	mov	COUNT_, #1
112b4     E8 00 A0 FD | 	call	#pushregs_
112b8     14 F0 07 F1 | 	add	ptra, #20
112bc     B0 C3 BF FD | 	call	#_pop
112c0     E7 7A 62 FC | 	wrlong	result1, fp
112c4     04 CE 05 F1 | 	add	fp, #4
112c8     E7 7C 62 FC | 	wrlong	result2, fp
112cc     04 CE 05 F1 | 	add	fp, #4
112d0     E7 7E 62 FC | 	wrlong	result3, fp
112d4     08 CE 85 F1 | 	sub	fp, #8
112d8     E7 92 02 F6 | 	mov	arg01, fp
112dc     6C C5 BF FD | 	call	#_converttoint
112e0     3D 93 02 F6 | 	mov	arg01, result1
112e4                 | ' 
112e4                 | ' t1=pop()
112e4                 | ' a=converttoint(t1)
112e4                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
112e4     00 04 00 FF 
112e8     00 92 16 F2 | 	cmp	arg01, ##524288 wc
112ec     49 A7 E2 CA |  if_b	rdword	local01, arg01
112f0     08 00 90 CD |  if_b	jmp	#LR__1460
112f4     B4 F9 B0 FD | 	call	#_psdpeek
112f8     3D A7 02 F6 | 	mov	local01, result1
112fc                 | LR__1460
112fc     08 CE 05 F1 | 	add	fp, #8
11300     E7 3A 68 FC | 	wrlong	#29, fp
11304     08 CE 85 F1 | 	sub	fp, #8
11308     E7 A6 62 FC | 	wrlong	local01, fp
1130c     E7 92 02 F6 | 	mov	arg01, fp
11310     EC C3 BF FD | 	call	#_push
11314     E7 F0 03 F6 | 	mov	ptra, fp
11318     F2 00 A0 FD | 	call	#popregs_
1131c                 | _do_dpeek_ret
1131c     2D 00 64 FD | 	ret
11320                 | 
11320                 | ' 
11320                 | ' '-------------------- dpoke
11320                 | ' 
11320                 | ' sub do_dpoke
11320                 | _do_dpoke
11320     02 CA 05 F6 | 	mov	COUNT_, #2
11324     E8 00 A0 FD | 	call	#pushregs_
11328     20 F0 07 F1 | 	add	ptra, #32
1132c     40 C3 BF FD | 	call	#_pop
11330     3D 95 02 F6 | 	mov	arg02, result1
11334     3E 93 02 F6 | 	mov	arg01, result2
11338     3F A7 02 F6 | 	mov	local01, result3
1133c     E7 94 62 FC | 	wrlong	arg02, fp
11340     04 CE 05 F1 | 	add	fp, #4
11344     E7 92 62 FC | 	wrlong	arg01, fp
11348     04 CE 05 F1 | 	add	fp, #4
1134c     E7 A6 62 FC | 	wrlong	local01, fp
11350     08 CE 85 F1 | 	sub	fp, #8
11354     18 C3 BF FD | 	call	#_pop
11358     3F A7 02 F6 | 	mov	local01, result3
1135c     0C CE 05 F1 | 	add	fp, #12
11360     E7 7A 62 FC | 	wrlong	result1, fp
11364     04 CE 05 F1 | 	add	fp, #4
11368     E7 7C 62 FC | 	wrlong	result2, fp
1136c     04 CE 05 F1 | 	add	fp, #4
11370     E7 A6 62 FC | 	wrlong	local01, fp
11374     08 CE 85 F1 | 	sub	fp, #8
11378     E7 92 02 F6 | 	mov	arg01, fp
1137c     0C CE 85 F1 | 	sub	fp, #12
11380     C8 C4 BF FD | 	call	#_converttoint
11384     3D A7 02 F6 | 	mov	local01, result1
11388     E7 92 02 F6 | 	mov	arg01, fp
1138c     BC C4 BF FD | 	call	#_converttoint
11390     3D A9 02 F6 | 	mov	local02, result1
11394                 | ' 
11394                 | ' t1=pop() 'value
11394                 | ' t2=pop() 
11394                 | ' a=converttoint(t2) : v=converttoint(t1)
11394                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
11394     00 04 00 FF 
11398     00 A6 16 F2 | 	cmp	local01, ##524288 wc
1139c     53 A9 52 CC |  if_b	wrword	local02, local01
113a0     53 93 02 36 |  if_ae	mov	arg01, local01
113a4     54 95 02 36 |  if_ae	mov	arg02, local02
113a8     D0 F7 B0 3D |  if_ae	call	#_psdpoke
113ac     E7 F0 03 F6 | 	mov	ptra, fp
113b0     F2 00 A0 FD | 	call	#popregs_
113b4                 | _do_dpoke_ret
113b4     2D 00 64 FD | 	ret
113b8                 | 
113b8                 | ' '-------------------- draw
113b8                 | ' 
113b8                 | ' sub do_draw
113b8                 | _do_draw
113b8     02 CA 05 F6 | 	mov	COUNT_, #2
113bc     E8 00 A0 FD | 	call	#pushregs_
113c0     20 F0 07 F1 | 	add	ptra, #32
113c4     A8 C2 BF FD | 	call	#_pop
113c8     3D 99 02 F6 | 	mov	arg04, result1
113cc     3E 97 02 F6 | 	mov	arg03, result2
113d0     3F 9B 02 F6 | 	mov	arg05, result3
113d4     0C CE 05 F1 | 	add	fp, #12
113d8     E7 98 62 FC | 	wrlong	arg04, fp
113dc     04 CE 05 F1 | 	add	fp, #4
113e0     E7 96 62 FC | 	wrlong	arg03, fp
113e4     04 CE 05 F1 | 	add	fp, #4
113e8     E7 9A 62 FC | 	wrlong	arg05, fp
113ec     14 CE 85 F1 | 	sub	fp, #20
113f0     7C C2 BF FD | 	call	#_pop
113f4     3F 99 02 F6 | 	mov	arg04, result3
113f8     E7 7A 62 FC | 	wrlong	result1, fp
113fc     04 CE 05 F1 | 	add	fp, #4
11400     E7 7C 62 FC | 	wrlong	result2, fp
11404     04 CE 05 F1 | 	add	fp, #4
11408     E7 98 62 FC | 	wrlong	arg04, fp
1140c     08 CE 85 F1 | 	sub	fp, #8
11410     E7 92 02 F6 | 	mov	arg01, fp
11414     34 C4 BF FD | 	call	#_converttoint
11418     3D A7 02 F6 | 	mov	local01, result1
1141c     E7 92 02 F6 | 	mov	arg01, fp
11420     0C 92 06 F1 | 	add	arg01, #12
11424     24 C4 BF FD | 	call	#_converttoint
11428     3D A9 02 F6 | 	mov	local02, result1
1142c     38 00 00 FF 
11430     D0 65 06 F1 | 	add	objptr, ##29136
11434     32 93 02 FB | 	rdlong	arg01, objptr
11438     04 64 06 F1 | 	add	objptr, #4
1143c     32 95 02 FB | 	rdlong	arg02, objptr
11440     08 64 86 F1 | 	sub	objptr, #8
11444     32 9B 02 FB | 	rdlong	arg05, objptr
11448     38 00 00 FF 
1144c     CC 65 86 F1 | 	sub	objptr, ##29132
11450     53 97 02 F6 | 	mov	arg03, local01
11454     54 99 02 F6 | 	mov	arg04, local02
11458     98 08 B1 FD | 	call	#_hg010b_spin2_draw
1145c     38 00 00 FF 
11460     D0 65 06 F1 | 	add	objptr, ##29136
11464     32 A7 62 FC | 	wrlong	local01, objptr
11468     04 64 06 F1 | 	add	objptr, #4
1146c     32 A9 62 FC | 	wrlong	local02, objptr
11470     38 00 00 FF 
11474     D4 65 86 F1 | 	sub	objptr, ##29140
11478     E7 F0 03 F6 | 	mov	ptra, fp
1147c     F2 00 A0 FD | 	call	#popregs_
11480                 | _do_draw_ret
11480     2D 00 64 FD | 	ret
11484                 | 
11484                 | ' 
11484                 | ' '-------------------- else
11484                 | ' 
11484                 | ' sub do_else
11484                 | _do_else
11484     4C 00 00 FF 
11488     20 64 06 F1 | 	add	objptr, ##38944
1148c     32 81 02 FB | 	rdlong	_var01, objptr
11490     01 80 86 F1 | 	sub	_var01, #1
11494     04 64 06 F1 | 	add	objptr, #4
11498     32 81 62 FC | 	wrlong	_var01, objptr
1149c     4C 00 00 FF 
114a0     24 64 86 F1 | 	sub	objptr, ##38948
114a4                 | _do_else_ret
114a4     2D 00 64 FD | 	ret
114a8                 | 
114a8                 | ' 
114a8                 | ' '-------------------- end
114a8                 | ' 
114a8                 | ' sub do_end
114a8                 | _do_end
114a8     4C 00 00 FF 
114ac     20 64 06 F1 | 	add	objptr, ##38944
114b0     32 81 02 FB | 	rdlong	_var01, objptr
114b4     01 80 86 F1 | 	sub	_var01, #1
114b8     04 64 06 F1 | 	add	objptr, #4
114bc     32 81 62 FC | 	wrlong	_var01, objptr
114c0     06 00 00 FF 
114c4     38 64 06 F1 | 	add	objptr, ##3128
114c8     FF FF BF FF 
114cc     32 FF 6B FC | 	wrlong	##2147483647, objptr
114d0     52 00 00 FF 
114d4     5C 64 86 F1 | 	sub	objptr, ##42076
114d8                 | _do_end_ret
114d8     2D 00 64 FD | 	ret
114dc                 | 
114dc                 | ' 
114dc                 | ' '-------------------- enter
114dc                 | ' 
114dc                 | ' sub do_enter
114dc                 | _do_enter
114dc     02 00 00 FF 
114e0     D2 92 06 F6 | 	mov	arg01, ##1234
114e4     A4 2D B0 FD | 	call	#_do_load
114e8                 | _do_enter_ret
114e8     2D 00 64 FD | 	ret
114ec                 | 
114ec                 | ' 
114ec                 | ' '------------------- error processing
114ec                 | ' 
114ec                 | ' sub do_error
114ec                 | _do_error
114ec     01 CA 05 F6 | 	mov	COUNT_, #1
114f0     E8 00 A0 FD | 	call	#pushregs_
114f4     4C 00 00 FF 
114f8     24 64 06 F1 | 	add	objptr, ##38948
114fc     32 99 02 FB | 	rdlong	arg04, objptr
11500     4C 97 02 F6 | 	mov	arg03, arg04
11504     01 96 66 F0 | 	shl	arg03, #1
11508     4C 97 02 F1 | 	add	arg03, arg04
1150c     02 96 66 F0 | 	shl	arg03, #2
11510     03 00 00 FF 
11514     04 64 86 F1 | 	sub	objptr, ##1540
11518     32 97 02 F1 | 	add	arg03, objptr
1151c     4B A7 02 FB | 	rdlong	local01, arg03
11520                 | ' r=compiledline(lineptr_e).result.uresult
11520                 | ' print "Error ";r;": ";errors$(r)
11520     00 92 06 F6 | 	mov	arg01, #0
11524     49 00 00 FF 
11528     20 64 86 F1 | 	sub	objptr, ##37408
1152c     E4 87 B1 FD | 	call	#__system___getiolock_0622
11530     3D 93 02 F6 | 	mov	arg01, result1
11534     58 32 B1 FD | 	call	#__system___lockmem
11538     96 01 00 FF 
1153c     B1 94 06 F6 | 	mov	arg02, ##@LR__5996
11540     00 92 06 F6 | 	mov	arg01, #0
11544     00 96 06 F6 | 	mov	arg03, #0
11548     38 3F B1 FD | 	call	#__system___basic_print_string
1154c     00 92 06 F6 | 	mov	arg01, #0
11550     53 95 02 F6 | 	mov	arg02, local01
11554     00 96 06 F6 | 	mov	arg03, #0
11558     0A 98 06 F6 | 	mov	arg04, #10
1155c     A8 3F B1 FD | 	call	#__system___basic_print_unsigned
11560     96 01 00 FF 
11564     B8 94 06 F6 | 	mov	arg02, ##@LR__5997
11568     00 92 06 F6 | 	mov	arg01, #0
1156c     00 96 06 F6 | 	mov	arg03, #0
11570     10 3F B1 FD | 	call	#__system___basic_print_string
11574     02 A6 66 F0 | 	shl	local01, #2
11578     32 99 02 F6 | 	mov	arg04, objptr
1157c     47 00 00 FF 
11580     20 98 06 F1 | 	add	arg04, ##36384
11584     4C A7 02 F1 | 	add	local01, arg04
11588     53 95 02 FB | 	rdlong	arg02, local01
1158c     00 92 06 F6 | 	mov	arg01, #0
11590     00 96 06 F6 | 	mov	arg03, #0
11594     EC 3E B1 FD | 	call	#__system___basic_print_string
11598     00 92 06 F6 | 	mov	arg01, #0
1159c     0A 94 06 F6 | 	mov	arg02, #10
115a0     00 96 06 F6 | 	mov	arg03, #0
115a4     84 3E B1 FD | 	call	#__system___basic_print_char
115a8     00 92 06 F6 | 	mov	arg01, #0
115ac     64 87 B1 FD | 	call	#__system___getiolock_0622
115b0     3D 01 68 FC | 	wrlong	#0, result1
115b4     E7 F0 03 F6 | 	mov	ptra, fp
115b8     F2 00 A0 FD | 	call	#popregs_
115bc                 | _do_error_ret
115bc     2D 00 64 FD | 	ret
115c0                 | 
115c0                 | ' 
115c0                 | ' '-------------------- fcircle
115c0                 | ' 
115c0                 | ' sub do_fcircle
115c0                 | _do_fcircle
115c0     02 CA 05 F6 | 	mov	COUNT_, #2
115c4     E8 00 A0 FD | 	call	#pushregs_
115c8     24 F0 07 F1 | 	add	ptra, #36
115cc     A0 C0 BF FD | 	call	#_pop
115d0     3D 95 02 F6 | 	mov	arg02, result1
115d4     3E 99 02 F6 | 	mov	arg04, result2
115d8     3F 97 02 F6 | 	mov	arg03, result3
115dc     18 CE 05 F1 | 	add	fp, #24
115e0     E7 94 62 FC | 	wrlong	arg02, fp
115e4     04 CE 05 F1 | 	add	fp, #4
115e8     E7 98 62 FC | 	wrlong	arg04, fp
115ec     04 CE 05 F1 | 	add	fp, #4
115f0     E7 96 62 FC | 	wrlong	arg03, fp
115f4     20 CE 85 F1 | 	sub	fp, #32
115f8     74 C0 BF FD | 	call	#_pop
115fc     3D 95 02 F6 | 	mov	arg02, result1
11600     3E 99 02 F6 | 	mov	arg04, result2
11604     3F 97 02 F6 | 	mov	arg03, result3
11608     0C CE 05 F1 | 	add	fp, #12
1160c     E7 94 62 FC | 	wrlong	arg02, fp
11610     04 CE 05 F1 | 	add	fp, #4
11614     E7 98 62 FC | 	wrlong	arg04, fp
11618     04 CE 05 F1 | 	add	fp, #4
1161c     E7 96 62 FC | 	wrlong	arg03, fp
11620     14 CE 85 F1 | 	sub	fp, #20
11624     48 C0 BF FD | 	call	#_pop
11628     3F 95 02 F6 | 	mov	arg02, result3
1162c     E7 7A 62 FC | 	wrlong	result1, fp
11630     04 CE 05 F1 | 	add	fp, #4
11634     E7 7C 62 FC | 	wrlong	result2, fp
11638     04 CE 05 F1 | 	add	fp, #4
1163c     E7 94 62 FC | 	wrlong	arg02, fp
11640     08 CE 85 F1 | 	sub	fp, #8
11644     E7 92 02 F6 | 	mov	arg01, fp
11648     00 C2 BF FD | 	call	#_converttoint
1164c     3D A7 02 F6 | 	mov	local01, result1
11650     E7 92 02 F6 | 	mov	arg01, fp
11654     0C 92 06 F1 | 	add	arg01, #12
11658     F0 C1 BF FD | 	call	#_converttoint
1165c     3D A9 02 F6 | 	mov	local02, result1
11660     E7 92 02 F6 | 	mov	arg01, fp
11664     18 92 06 F1 | 	add	arg01, #24
11668     E0 C1 BF FD | 	call	#_converttoint
1166c     3D 97 02 F6 | 	mov	arg03, result1
11670     38 00 00 FF 
11674     CC 65 06 F1 | 	add	objptr, ##29132
11678     32 99 02 FB | 	rdlong	arg04, objptr
1167c     38 00 00 FF 
11680     CC 65 86 F1 | 	sub	objptr, ##29132
11684     53 93 02 F6 | 	mov	arg01, local01
11688     54 95 02 F6 | 	mov	arg02, local02
1168c     E8 0A B1 FD | 	call	#_hg010b_spin2_fcircle
11690     E7 F0 03 F6 | 	mov	ptra, fp
11694     F2 00 A0 FD | 	call	#popregs_
11698                 | _do_fcircle_ret
11698     2D 00 64 FD | 	ret
1169c                 | 
1169c                 | ' 
1169c                 | ' '-------------------- fill
1169c                 | ' 
1169c                 | ' sub do_fill
1169c                 | _do_fill
1169c     03 CA 05 F6 | 	mov	COUNT_, #3
116a0     E8 00 A0 FD | 	call	#pushregs_
116a4     30 F0 07 F1 | 	add	ptra, #48
116a8     C4 BF BF FD | 	call	#_pop
116ac     3D 97 02 F6 | 	mov	arg03, result1
116b0     3E 95 02 F6 | 	mov	arg02, result2
116b4     3F 99 02 F6 | 	mov	arg04, result3
116b8     24 CE 05 F1 | 	add	fp, #36
116bc     E7 96 62 FC | 	wrlong	arg03, fp
116c0     04 CE 05 F1 | 	add	fp, #4
116c4     E7 94 62 FC | 	wrlong	arg02, fp
116c8     04 CE 05 F1 | 	add	fp, #4
116cc     E7 98 62 FC | 	wrlong	arg04, fp
116d0     2C CE 85 F1 | 	sub	fp, #44
116d4     98 BF BF FD | 	call	#_pop
116d8     3D 97 02 F6 | 	mov	arg03, result1
116dc     3E 95 02 F6 | 	mov	arg02, result2
116e0     3F 99 02 F6 | 	mov	arg04, result3
116e4     18 CE 05 F1 | 	add	fp, #24
116e8     E7 96 62 FC | 	wrlong	arg03, fp
116ec     04 CE 05 F1 | 	add	fp, #4
116f0     E7 94 62 FC | 	wrlong	arg02, fp
116f4     04 CE 05 F1 | 	add	fp, #4
116f8     E7 98 62 FC | 	wrlong	arg04, fp
116fc     20 CE 85 F1 | 	sub	fp, #32
11700     6C BF BF FD | 	call	#_pop
11704     3D 97 02 F6 | 	mov	arg03, result1
11708     3E 95 02 F6 | 	mov	arg02, result2
1170c     3F 99 02 F6 | 	mov	arg04, result3
11710     0C CE 05 F1 | 	add	fp, #12
11714     E7 96 62 FC | 	wrlong	arg03, fp
11718     04 CE 05 F1 | 	add	fp, #4
1171c     E7 94 62 FC | 	wrlong	arg02, fp
11720     04 CE 05 F1 | 	add	fp, #4
11724     E7 98 62 FC | 	wrlong	arg04, fp
11728     14 CE 85 F1 | 	sub	fp, #20
1172c     40 BF BF FD | 	call	#_pop
11730     3F 97 02 F6 | 	mov	arg03, result3
11734     E7 7A 62 FC | 	wrlong	result1, fp
11738     04 CE 05 F1 | 	add	fp, #4
1173c     E7 7C 62 FC | 	wrlong	result2, fp
11740     04 CE 05 F1 | 	add	fp, #4
11744     E7 96 62 FC | 	wrlong	arg03, fp
11748     08 CE 85 F1 | 	sub	fp, #8
1174c     E7 92 02 F6 | 	mov	arg01, fp
11750     F8 C0 BF FD | 	call	#_converttoint
11754     3D A7 02 F6 | 	mov	local01, result1
11758     E7 92 02 F6 | 	mov	arg01, fp
1175c     0C 92 06 F1 | 	add	arg01, #12
11760     E8 C0 BF FD | 	call	#_converttoint
11764     3D A9 02 F6 | 	mov	local02, result1
11768     E7 92 02 F6 | 	mov	arg01, fp
1176c     18 92 06 F1 | 	add	arg01, #24
11770     D8 C0 BF FD | 	call	#_converttoint
11774     3D AB 02 F6 | 	mov	local03, result1
11778     E7 92 02 F6 | 	mov	arg01, fp
1177c     24 92 06 F1 | 	add	arg01, #36
11780     C8 C0 BF FD | 	call	#_converttoint
11784     3D 99 02 F6 | 	mov	arg04, result1
11788     53 93 02 F6 | 	mov	arg01, local01
1178c     54 95 02 F6 | 	mov	arg02, local02
11790     55 97 02 F6 | 	mov	arg03, local03
11794     4C 07 B1 FD | 	call	#_hg010b_spin2_fill
11798     E7 F0 03 F6 | 	mov	ptra, fp
1179c     F2 00 A0 FD | 	call	#popregs_
117a0                 | _do_fill_ret
117a0     2D 00 64 FD | 	ret
117a4                 | 
117a4                 | ' 
117a4                 | ' '-------------------- findfirst
117a4                 | ' 
117a4                 | ' sub do_findfirst
117a4                 | _do_findfirst
117a4     04 CA 05 F6 | 	mov	COUNT_, #4
117a8     E8 00 A0 FD | 	call	#pushregs_
117ac     1C F0 07 F1 | 	add	ptra, #28
117b0     4C 00 00 FF 
117b4     24 64 06 F1 | 	add	objptr, ##38948
117b8     32 97 02 FB | 	rdlong	arg03, objptr
117bc     4B 95 02 F6 | 	mov	arg02, arg03
117c0     01 94 66 F0 | 	shl	arg02, #1
117c4     4B 95 02 F1 | 	add	arg02, arg03
117c8     02 94 66 F0 | 	shl	arg02, #2
117cc     03 00 00 FF 
117d0     04 64 86 F1 | 	sub	objptr, ##1540
117d4     32 95 02 F1 | 	add	arg02, objptr
117d8     4A A7 02 FB | 	rdlong	local01, arg02
117dc                 | ' 
117dc                 | ' numpar=compiledline(lineptr_e).result.uresult
117dc                 | ' if numpar=2 then
117dc     02 A6 0E F2 | 	cmp	local01, #2 wz
117e0     49 00 00 FF 
117e4     20 64 86 F1 | 	sub	objptr, ##37408
117e8     48 01 90 5D |  if_ne	jmp	#LR__1474
117ec     80 BE BF FD | 	call	#_pop
117f0     3F 97 02 F6 | 	mov	arg03, result3
117f4     08 CE 05 F1 | 	add	fp, #8
117f8     E7 7A 62 FC | 	wrlong	result1, fp
117fc     04 CE 05 F1 | 	add	fp, #4
11800     E7 7C 62 FC | 	wrlong	result2, fp
11804     04 CE 05 F1 | 	add	fp, #4
11808     E7 96 62 FC | 	wrlong	arg03, fp
1180c                 | '   t1=pop()
1180c                 | '   if t1.result_type=result_string2 then 
1180c     10 CE 85 F1 | 	sub	fp, #16
11810     2B 96 0E F2 | 	cmp	arg03, #43 wz
11814     18 00 90 5D |  if_ne	jmp	#LR__1470
11818     08 CE 05 F1 | 	add	fp, #8
1181c     E7 92 02 FB | 	rdlong	arg01, fp
11820     08 CE 85 F1 | 	sub	fp, #8
11824     B8 BF BF FD | 	call	#_convertstring
11828     3D A9 02 F6 | 	mov	local02, result1
1182c     60 00 90 FD | 	jmp	#LR__1472
11830                 | LR__1470
11830     10 CE 05 F1 | 	add	fp, #16
11834     E7 96 02 FB | 	rdlong	arg03, fp
11838     10 CE 85 F1 | 	sub	fp, #16
1183c     1F 96 0E F2 | 	cmp	arg03, #31 wz
11840     08 CE 05 A1 |  if_e	add	fp, #8
11844     E7 A8 02 AB |  if_e	rdlong	local02, fp
11848     08 CE 85 A1 |  if_e	sub	fp, #8
1184c     40 00 90 AD |  if_e	jmp	#LR__1471
11850                 | '     print "findfirst: "; : printerror(30) : return  
11850     00 92 06 F6 | 	mov	arg01, #0
11854     BC 84 B1 FD | 	call	#__system___getiolock_0622
11858     3D 93 02 F6 | 	mov	arg01, result1
1185c     30 2F B1 FD | 	call	#__system___lockmem
11860     96 01 00 FF 
11864     BB 94 06 F6 | 	mov	arg02, ##@LR__5998
11868     00 92 06 F6 | 	mov	arg01, #0
1186c     00 96 06 F6 | 	mov	arg03, #0
11870     10 3C B1 FD | 	call	#__system___basic_print_string
11874     00 92 06 F6 | 	mov	arg01, #0
11878     98 84 B1 FD | 	call	#__system___getiolock_0622
1187c     3D 01 68 FC | 	wrlong	#0, result1
11880     1E 92 06 F6 | 	mov	arg01, #30
11884     00 94 06 F6 | 	mov	arg02, #0
11888     0C F1 B0 FD | 	call	#_printerror
1188c     08 02 90 FD | 	jmp	#LR__1482
11890                 | LR__1471
11890                 | LR__1472
11890     DC BD BF FD | 	call	#_pop
11894     3F 97 02 F6 | 	mov	arg03, result3
11898     08 CE 05 F1 | 	add	fp, #8
1189c     E7 7A 62 FC | 	wrlong	result1, fp
118a0     04 CE 05 F1 | 	add	fp, #4
118a4     E7 7C 62 FC | 	wrlong	result2, fp
118a8     04 CE 05 F1 | 	add	fp, #4
118ac     E7 96 62 FC | 	wrlong	arg03, fp
118b0                 | '   t1=pop()
118b0                 | '   if t1.result_type=result_string2 then 
118b0     10 CE 85 F1 | 	sub	fp, #16
118b4     2B 96 0E F2 | 	cmp	arg03, #43 wz
118b8     18 00 90 5D |  if_ne	jmp	#LR__1473
118bc     08 CE 05 F1 | 	add	fp, #8
118c0     E7 92 02 FB | 	rdlong	arg01, fp
118c4     08 CE 85 F1 | 	sub	fp, #8
118c8     14 BF BF FD | 	call	#_convertstring
118cc     3D AB 02 F6 | 	mov	local03, result1
118d0     58 01 90 FD | 	jmp	#LR__1480
118d4                 | LR__1473
118d4     10 CE 05 F1 | 	add	fp, #16
118d8     E7 A6 02 FB | 	rdlong	local01, fp
118dc     10 CE 85 F1 | 	sub	fp, #16
118e0     1F A6 0E F2 | 	cmp	local01, #31 wz
118e4     08 CE 05 A1 |  if_e	add	fp, #8
118e8     E7 AA 02 AB |  if_e	rdlong	local03, fp
118ec     08 CE 85 A1 |  if_e	sub	fp, #8
118f0     38 01 90 AD |  if_e	jmp	#LR__1480
118f4                 | '     print "findfirst: "; : printerror(30) : return  
118f4     00 92 06 F6 | 	mov	arg01, #0
118f8     18 84 B1 FD | 	call	#__system___getiolock_0622
118fc     3D 93 02 F6 | 	mov	arg01, result1
11900     8C 2E B1 FD | 	call	#__system___lockmem
11904     96 01 00 FF 
11908     C7 94 06 F6 | 	mov	arg02, ##@LR__5999
1190c     00 92 06 F6 | 	mov	arg01, #0
11910     00 96 06 F6 | 	mov	arg03, #0
11914     6C 3B B1 FD | 	call	#__system___basic_print_string
11918     00 92 06 F6 | 	mov	arg01, #0
1191c     F4 83 B1 FD | 	call	#__system___getiolock_0622
11920     3D 01 68 FC | 	wrlong	#0, result1
11924     1E 92 06 F6 | 	mov	arg01, #30
11928     00 94 06 F6 | 	mov	arg02, #0
1192c     68 F0 B0 FD | 	call	#_printerror
11930     64 01 90 FD | 	jmp	#LR__1482
11934                 | LR__1474
11934     01 A6 0E F2 | 	cmp	local01, #1 wz
11938     B0 00 90 5D |  if_ne	jmp	#LR__1478
1193c     30 BD BF FD | 	call	#_pop
11940     3F 97 02 F6 | 	mov	arg03, result3
11944     08 CE 05 F1 | 	add	fp, #8
11948     E7 7A 62 FC | 	wrlong	result1, fp
1194c     04 CE 05 F1 | 	add	fp, #4
11950     E7 7C 62 FC | 	wrlong	result2, fp
11954     04 CE 05 F1 | 	add	fp, #4
11958     E7 96 62 FC | 	wrlong	arg03, fp
1195c                 | '   t1=pop()
1195c                 | '   if t1.result_type=result_string2 then 
1195c     10 CE 85 F1 | 	sub	fp, #16
11960     2B 96 0E F2 | 	cmp	arg03, #43 wz
11964     18 00 90 5D |  if_ne	jmp	#LR__1475
11968     08 CE 05 F1 | 	add	fp, #8
1196c     E7 92 02 FB | 	rdlong	arg01, fp
11970     08 CE 85 F1 | 	sub	fp, #8
11974     68 BE BF FD | 	call	#_convertstring
11978     3D AB 02 F6 | 	mov	local03, result1
1197c     60 00 90 FD | 	jmp	#LR__1477
11980                 | LR__1475
11980     10 CE 05 F1 | 	add	fp, #16
11984     E7 96 02 FB | 	rdlong	arg03, fp
11988     10 CE 85 F1 | 	sub	fp, #16
1198c     1F 96 0E F2 | 	cmp	arg03, #31 wz
11990     08 CE 05 A1 |  if_e	add	fp, #8
11994     E7 AA 02 AB |  if_e	rdlong	local03, fp
11998     08 CE 85 A1 |  if_e	sub	fp, #8
1199c     40 00 90 AD |  if_e	jmp	#LR__1476
119a0                 | '     print "findfirst: "; : printerror(30) : return  
119a0     00 92 06 F6 | 	mov	arg01, #0
119a4     6C 83 B1 FD | 	call	#__system___getiolock_0622
119a8     3D 93 02 F6 | 	mov	arg01, result1
119ac     E0 2D B1 FD | 	call	#__system___lockmem
119b0     96 01 00 FF 
119b4     D3 94 06 F6 | 	mov	arg02, ##@LR__6000
119b8     00 92 06 F6 | 	mov	arg01, #0
119bc     00 96 06 F6 | 	mov	arg03, #0
119c0     C0 3A B1 FD | 	call	#__system___basic_print_string
119c4     00 92 06 F6 | 	mov	arg01, #0
119c8     48 83 B1 FD | 	call	#__system___getiolock_0622
119cc     3D 01 68 FC | 	wrlong	#0, result1
119d0     1E 92 06 F6 | 	mov	arg01, #30
119d4     00 94 06 F6 | 	mov	arg02, #0
119d8     BC EF B0 FD | 	call	#_printerror
119dc     B8 00 90 FD | 	jmp	#LR__1482
119e0                 | LR__1476
119e0                 | LR__1477
119e0     96 01 00 FF 
119e4     DF A8 06 F6 | 	mov	local02, ##@LR__6001
119e8     40 00 90 FD | 	jmp	#LR__1479
119ec                 | LR__1478
119ec                 | '   print "findfirst: "; : printerror(39) : return     
119ec     00 92 06 F6 | 	mov	arg01, #0
119f0     20 83 B1 FD | 	call	#__system___getiolock_0622
119f4     3D 93 02 F6 | 	mov	arg01, result1
119f8     94 2D B1 FD | 	call	#__system___lockmem
119fc     96 01 00 FF 
11a00     E0 94 06 F6 | 	mov	arg02, ##@LR__6002
11a04     00 92 06 F6 | 	mov	arg01, #0
11a08     00 96 06 F6 | 	mov	arg03, #0
11a0c     74 3A B1 FD | 	call	#__system___basic_print_string
11a10     00 92 06 F6 | 	mov	arg01, #0
11a14     FC 82 B1 FD | 	call	#__system___getiolock_0622
11a18     3D 01 68 FC | 	wrlong	#0, result1
11a1c     27 92 06 F6 | 	mov	arg01, #39
11a20     00 94 06 F6 | 	mov	arg02, #0
11a24     70 EF B0 FD | 	call	#_printerror
11a28     6C 00 90 FD | 	jmp	#LR__1482
11a2c                 | LR__1479
11a2c                 | LR__1480
11a2c                 | ' 
11a2c                 | ' if s2="" then
11a2c     96 01 00 FF 
11a30     EC 94 06 F6 | 	mov	arg02, ##@LR__6003
11a34     54 93 02 F6 | 	mov	arg01, local02
11a38     7C 2D B1 FD | 	call	#__system___string_cmp
11a3c     00 7A 0E F2 | 	cmp	result1, #0 wz
11a40     31 AC 06 A6 |  if_e	mov	local04, #49
11a44     24 00 90 AD |  if_e	jmp	#LR__1481
11a48     54 93 02 F6 | 	mov	arg01, local02
11a4c     F8 48 B1 FD | 	call	#__system__LCase_S
11a50     3D 93 02 F6 | 	mov	arg01, result1
11a54     96 01 00 FF 
11a58     ED 94 06 F6 | 	mov	arg02, ##@LR__6004
11a5c     58 2D B1 FD | 	call	#__system___string_cmp
11a60     00 7A 0E F2 | 	cmp	result1, #0 wz
11a64     10 AC 06 A6 |  if_e	mov	local04, #16
11a68     21 AC 06 56 |  if_ne	mov	local04, #33
11a6c                 | LR__1481
11a6c     55 93 02 F6 | 	mov	arg01, local03
11a70     56 95 02 F6 | 	mov	arg02, local04
11a74     54 84 B1 FD | 	call	#__system___basic_dir
11a78     3D A9 02 F6 | 	mov	local02, result1
11a7c     10 CE 05 F1 | 	add	fp, #16
11a80     E7 3E 68 FC | 	wrlong	#31, fp
11a84     08 CE 85 F1 | 	sub	fp, #8
11a88     E7 A8 62 FC | 	wrlong	local02, fp
11a8c     E7 92 02 F6 | 	mov	arg01, fp
11a90     08 CE 85 F1 | 	sub	fp, #8
11a94     68 BC BF FD | 	call	#_push
11a98                 | LR__1482
11a98     E7 F0 03 F6 | 	mov	ptra, fp
11a9c     F2 00 A0 FD | 	call	#popregs_
11aa0                 | _do_findfirst_ret
11aa0     2D 00 64 FD | 	ret
11aa4                 | 
11aa4                 | ' 
11aa4                 | ' '-------------------- findnext
11aa4                 | ' 
11aa4                 | ' sub do_findnext
11aa4                 | _do_findnext
11aa4     00 CA 05 F6 | 	mov	COUNT_, #0
11aa8     E8 00 A0 FD | 	call	#pushregs_
11aac     10 F0 07 F1 | 	add	ptra, #16
11ab0                 | ' 
11ab0                 | ' if compiledline(lineptr_e).result.uresult>0 then print "findnext: "; : printerror(39) : return    
11ab0     4C 00 00 FF 
11ab4     24 64 06 F1 | 	add	objptr, ##38948
11ab8     32 97 02 FB | 	rdlong	arg03, objptr
11abc     4B 95 02 F6 | 	mov	arg02, arg03
11ac0     01 94 66 F0 | 	shl	arg02, #1
11ac4     4B 95 02 F1 | 	add	arg02, arg03
11ac8     02 94 66 F0 | 	shl	arg02, #2
11acc     03 00 00 FF 
11ad0     04 64 86 F1 | 	sub	objptr, ##1540
11ad4     32 95 02 F1 | 	add	arg02, objptr
11ad8     4A 7B 02 FB | 	rdlong	result1, arg02
11adc     01 7A 16 F2 | 	cmp	result1, #1 wc
11ae0     49 00 00 FF 
11ae4     20 64 86 F1 | 	sub	objptr, ##37408
11ae8     40 00 90 CD |  if_b	jmp	#LR__1490
11aec     00 92 06 F6 | 	mov	arg01, #0
11af0     20 82 B1 FD | 	call	#__system___getiolock_0622
11af4     3D 93 02 F6 | 	mov	arg01, result1
11af8     94 2C B1 FD | 	call	#__system___lockmem
11afc     96 01 00 FF 
11b00     F1 94 06 F6 | 	mov	arg02, ##@LR__6005
11b04     00 92 06 F6 | 	mov	arg01, #0
11b08     00 96 06 F6 | 	mov	arg03, #0
11b0c     74 39 B1 FD | 	call	#__system___basic_print_string
11b10     00 92 06 F6 | 	mov	arg01, #0
11b14     FC 81 B1 FD | 	call	#__system___getiolock_0622
11b18     3D 01 68 FC | 	wrlong	#0, result1
11b1c     27 92 06 F6 | 	mov	arg01, #39
11b20     00 94 06 F6 | 	mov	arg02, #0
11b24     70 EE B0 FD | 	call	#_printerror
11b28     28 00 90 FD | 	jmp	#LR__1491
11b2c                 | LR__1490
11b2c     00 92 06 F6 | 	mov	arg01, #0
11b30     00 94 06 F6 | 	mov	arg02, #0
11b34     94 83 B1 FD | 	call	#__system___basic_dir
11b38     3D 97 02 F6 | 	mov	arg03, result1
11b3c     08 CE 05 F1 | 	add	fp, #8
11b40     E7 3E 68 FC | 	wrlong	#31, fp
11b44     08 CE 85 F1 | 	sub	fp, #8
11b48     E7 96 62 FC | 	wrlong	arg03, fp
11b4c     E7 92 02 F6 | 	mov	arg01, fp
11b50     AC BB BF FD | 	call	#_push
11b54                 | LR__1491
11b54     E7 F0 03 F6 | 	mov	ptra, fp
11b58     F2 00 A0 FD | 	call	#popregs_
11b5c                 | _do_findnext_ret
11b5c     2D 00 64 FD | 	ret
11b60                 | 
11b60                 | ' 
11b60                 | ' '-------------------- font
11b60                 | ' 
11b60                 | ' sub do_font
11b60                 | _do_font
11b60     03 CA 05 F6 | 	mov	COUNT_, #3
11b64     E8 00 A0 FD | 	call	#pushregs_
11b68     04 BB BF FD | 	call	#_pop
11b6c     3D A7 02 F6 | 	mov	local01, result1
11b70     3E A9 02 F6 | 	mov	local02, result2
11b74     3F AB 02 F6 | 	mov	local03, result3
11b78                 | ' 
11b78                 | ' t1=pop() 
11b78                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
11b78     1E AA 0E F2 | 	cmp	local03, #30 wz
11b7c     10 00 90 5D |  if_ne	jmp	#LR__1500
11b80     53 93 02 F6 | 	mov	arg01, local01
11b84     00 94 06 F6 | 	mov	arg02, #0
11b88     9C 57 B1 FD | 	call	#__system___float_tointeger
11b8c     3D A7 02 F6 | 	mov	local01, result1
11b90                 | LR__1500
11b90                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
11b90     1F AA 0E F2 | 	cmp	local03, #31 wz
11b94     18 00 90 5D |  if_ne	jmp	#LR__1501
11b98     53 93 02 F6 | 	mov	arg01, local01
11b9c     DC 5A B1 FD | 	call	#__system____builtin_atof
11ba0     3D 93 02 F6 | 	mov	arg01, result1
11ba4     00 94 06 F6 | 	mov	arg02, #0
11ba8     7C 57 B1 FD | 	call	#__system___float_tointeger
11bac     3D A7 02 F6 | 	mov	local01, result1
11bb0                 | LR__1501
11bb0     38 00 00 FF 
11bb4     E4 65 06 F1 | 	add	objptr, ##29156
11bb8     32 A7 62 FC | 	wrlong	local01, objptr
11bbc     38 00 00 FF 
11bc0     E4 65 86 F1 | 	sub	objptr, ##29156
11bc4     02 A6 66 F0 | 	shl	local01, #2
11bc8     53 93 02 F6 | 	mov	arg01, local01
11bcc     F4 09 B1 FD | 	call	#_hg010b_spin2_setfontfamily
11bd0     E7 F0 03 F6 | 	mov	ptra, fp
11bd4     F2 00 A0 FD | 	call	#popregs_
11bd8                 | _do_font_ret
11bd8     2D 00 64 FD | 	ret
11bdc                 | 
11bdc                 | ' 
11bdc                 | ' '-------------------- for
11bdc                 | ' 
11bdc                 | ' sub do_for()
11bdc                 | _do_for
11bdc     01 CA 05 F6 | 	mov	COUNT_, #1
11be0     E8 00 A0 FD | 	call	#pushregs_
11be4     10 F0 07 F1 | 	add	ptra, #16
11be8     52 00 00 FF 
11bec     D4 64 06 F1 | 	add	objptr, ##42196
11bf0     32 93 02 FB | 	rdlong	arg01, objptr
11bf4     01 92 06 F1 | 	add	arg01, #1
11bf8     32 93 62 FC | 	wrlong	arg01, objptr
11bfc     52 00 00 FF 
11c00     D4 64 86 F1 | 	sub	objptr, ##42196
11c04     68 BA BF FD | 	call	#_pop
11c08     E7 7A 62 FC | 	wrlong	result1, fp
11c0c     04 CE 05 F1 | 	add	fp, #4
11c10     E7 7C 62 FC | 	wrlong	result2, fp
11c14     04 CE 05 F1 | 	add	fp, #4
11c18     E7 7E 62 FC | 	wrlong	result3, fp
11c1c     08 CE 85 F1 | 	sub	fp, #8
11c20     52 00 00 FF 
11c24     D4 64 06 F1 | 	add	objptr, ##42196
11c28     32 93 02 FB | 	rdlong	arg01, objptr
11c2c     49 A7 02 F6 | 	mov	local01, arg01
11c30     02 A6 66 F0 | 	shl	local01, #2
11c34     49 A7 02 F1 | 	add	local01, arg01
11c38     02 A6 66 F0 | 	shl	local01, #2
11c3c     06 00 00 FF 
11c40     98 64 86 F1 | 	sub	objptr, ##3224
11c44     32 A7 02 F1 | 	add	local01, objptr
11c48     E7 92 02 FB | 	rdlong	arg01, fp
11c4c     08 A6 06 F1 | 	add	local01, #8
11c50     53 93 62 FC | 	wrlong	arg01, local01
11c54     4C 00 00 FF 
11c58     3C 64 86 F1 | 	sub	objptr, ##38972
11c5c     10 BA BF FD | 	call	#_pop
11c60     E7 7A 62 FC | 	wrlong	result1, fp
11c64     04 CE 05 F1 | 	add	fp, #4
11c68     E7 7C 62 FC | 	wrlong	result2, fp
11c6c     04 CE 05 F1 | 	add	fp, #4
11c70     E7 7E 62 FC | 	wrlong	result3, fp
11c74     08 CE 85 F1 | 	sub	fp, #8
11c78     52 00 00 FF 
11c7c     D4 64 06 F1 | 	add	objptr, ##42196
11c80     32 93 02 FB | 	rdlong	arg01, objptr
11c84     49 A7 02 F6 | 	mov	local01, arg01
11c88     02 A6 66 F0 | 	shl	local01, #2
11c8c     49 A7 02 F1 | 	add	local01, arg01
11c90     02 A6 66 F0 | 	shl	local01, #2
11c94     06 00 00 FF 
11c98     98 64 86 F1 | 	sub	objptr, ##3224
11c9c     32 A7 02 F1 | 	add	local01, objptr
11ca0     E7 92 02 F6 | 	mov	arg01, fp
11ca4     4C 00 00 FF 
11ca8     3C 64 86 F1 | 	sub	objptr, ##38972
11cac     9C BB BF FD | 	call	#_converttoint
11cb0     3D 93 02 F6 | 	mov	arg01, result1
11cb4     0C A6 06 F1 | 	add	local01, #12
11cb8     53 93 62 FC | 	wrlong	arg01, local01
11cbc     B0 B9 BF FD | 	call	#_pop
11cc0     E7 7A 62 FC | 	wrlong	result1, fp
11cc4     04 CE 05 F1 | 	add	fp, #4
11cc8     E7 7C 62 FC | 	wrlong	result2, fp
11ccc     04 CE 05 F1 | 	add	fp, #4
11cd0     E7 7E 62 FC | 	wrlong	result3, fp
11cd4     08 CE 85 F1 | 	sub	fp, #8
11cd8     52 00 00 FF 
11cdc     D4 64 06 F1 | 	add	objptr, ##42196
11ce0     32 93 02 FB | 	rdlong	arg01, objptr
11ce4     49 A7 02 F6 | 	mov	local01, arg01
11ce8     02 A6 66 F0 | 	shl	local01, #2
11cec     49 A7 02 F1 | 	add	local01, arg01
11cf0     02 A6 66 F0 | 	shl	local01, #2
11cf4     06 00 00 FF 
11cf8     98 64 86 F1 | 	sub	objptr, ##3224
11cfc     32 A7 02 F1 | 	add	local01, objptr
11d00     E7 92 02 F6 | 	mov	arg01, fp
11d04     4C 00 00 FF 
11d08     3C 64 86 F1 | 	sub	objptr, ##38972
11d0c     3C BB BF FD | 	call	#_converttoint
11d10     10 A6 06 F1 | 	add	local01, #16
11d14     53 7B 62 FC | 	wrlong	result1, local01
11d18                 | ' fortop+=1
11d18                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
11d18                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
11d18                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
11d18                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
11d18     4C 00 00 FF 
11d1c     24 64 06 F1 | 	add	objptr, ##38948
11d20     32 93 02 FB | 	rdlong	arg01, objptr
11d24     49 A7 02 F6 | 	mov	local01, arg01
11d28     01 A6 66 F0 | 	shl	local01, #1
11d2c     49 A7 02 F1 | 	add	local01, arg01
11d30     02 A6 66 F0 | 	shl	local01, #2
11d34     03 00 00 FF 
11d38     04 64 86 F1 | 	sub	objptr, ##1540
11d3c     32 A7 02 F1 | 	add	local01, objptr
11d40     08 A6 06 F1 | 	add	local01, #8
11d44     53 A7 02 FB | 	rdlong	local01, local01
11d48     FE A7 0E F2 | 	cmp	local01, #510 wz
11d4c     49 00 00 FF 
11d50     20 64 86 F1 | 	sub	objptr, ##37408
11d54     70 00 90 5D |  if_ne	jmp	#LR__1510
11d58     52 00 00 FF 
11d5c     D4 64 06 F1 | 	add	objptr, ##42196
11d60     32 93 02 FB | 	rdlong	arg01, objptr
11d64     49 A7 02 F6 | 	mov	local01, arg01
11d68     02 A6 66 F0 | 	shl	local01, #2
11d6c     49 A7 02 F1 | 	add	local01, arg01
11d70     02 A6 66 F0 | 	shl	local01, #2
11d74     06 00 00 FF 
11d78     98 64 86 F1 | 	sub	objptr, ##3224
11d7c     32 A7 02 F1 | 	add	local01, objptr
11d80     06 00 00 FF 
11d84     20 64 06 F1 | 	add	objptr, ##3104
11d88     32 93 02 FB | 	rdlong	arg01, objptr
11d8c     53 93 62 FC | 	wrlong	arg01, local01
11d90     78 64 06 F1 | 	add	objptr, #120
11d94     32 93 02 FB | 	rdlong	arg01, objptr
11d98     49 A7 02 F6 | 	mov	local01, arg01
11d9c     02 A6 66 F0 | 	shl	local01, #2
11da0     49 A7 02 F1 | 	add	local01, arg01
11da4     02 A6 66 F0 | 	shl	local01, #2
11da8     06 00 00 FF 
11dac     98 64 86 F1 | 	sub	objptr, ##3224
11db0     32 A7 02 F1 | 	add	local01, objptr
11db4     04 A6 06 F1 | 	add	local01, #4
11db8     53 01 68 FC | 	wrlong	#0, local01
11dbc     4C 00 00 FF 
11dc0     3C 64 86 F1 | 	sub	objptr, ##38972
11dc4     78 00 90 FD | 	jmp	#LR__1511
11dc8                 | LR__1510
11dc8     52 00 00 FF 
11dcc     D4 64 06 F1 | 	add	objptr, ##42196
11dd0     32 93 02 FB | 	rdlong	arg01, objptr
11dd4     49 A7 02 F6 | 	mov	local01, arg01
11dd8     02 A6 66 F0 | 	shl	local01, #2
11ddc     49 A7 02 F1 | 	add	local01, arg01
11de0     02 A6 66 F0 | 	shl	local01, #2
11de4     06 00 00 FF 
11de8     98 64 86 F1 | 	sub	objptr, ##3224
11dec     32 A7 02 F1 | 	add	local01, objptr
11df0     06 00 00 FF 
11df4     28 64 06 F1 | 	add	objptr, ##3112
11df8     32 93 02 FB | 	rdlong	arg01, objptr
11dfc     53 93 62 FC | 	wrlong	arg01, local01
11e00     70 64 06 F1 | 	add	objptr, #112
11e04     32 93 02 FB | 	rdlong	arg01, objptr
11e08     49 A7 02 F6 | 	mov	local01, arg01
11e0c     02 A6 66 F0 | 	shl	local01, #2
11e10     49 A7 02 F1 | 	add	local01, arg01
11e14     02 A6 66 F0 | 	shl	local01, #2
11e18     06 00 00 FF 
11e1c     98 64 86 F1 | 	sub	objptr, ##3224
11e20     32 A7 02 F1 | 	add	local01, objptr
11e24     18 64 86 F1 | 	sub	objptr, #24
11e28     32 93 02 FB | 	rdlong	arg01, objptr
11e2c     4C 00 00 FF 
11e30     24 64 86 F1 | 	sub	objptr, ##38948
11e34     01 92 06 F1 | 	add	arg01, #1
11e38     04 A6 06 F1 | 	add	local01, #4
11e3c     53 93 62 FC | 	wrlong	arg01, local01
11e40                 | LR__1511
11e40     E7 F0 03 F6 | 	mov	ptra, fp
11e44     F2 00 A0 FD | 	call	#popregs_
11e48                 | _do_for_ret
11e48     2D 00 64 FD | 	ret
11e4c                 | 
11e4c                 | ' 
11e4c                 | ' '-------------------- frame
11e4c                 | ' 
11e4c                 | ' sub do_frame
11e4c                 | _do_frame
11e4c     03 CA 05 F6 | 	mov	COUNT_, #3
11e50     E8 00 A0 FD | 	call	#pushregs_
11e54     30 F0 07 F1 | 	add	ptra, #48
11e58     14 B8 BF FD | 	call	#_pop
11e5c     3D 97 02 F6 | 	mov	arg03, result1
11e60     3E 95 02 F6 | 	mov	arg02, result2
11e64     3F 9B 02 F6 | 	mov	arg05, result3
11e68     24 CE 05 F1 | 	add	fp, #36
11e6c     E7 96 62 FC | 	wrlong	arg03, fp
11e70     04 CE 05 F1 | 	add	fp, #4
11e74     E7 94 62 FC | 	wrlong	arg02, fp
11e78     04 CE 05 F1 | 	add	fp, #4
11e7c     E7 9A 62 FC | 	wrlong	arg05, fp
11e80     2C CE 85 F1 | 	sub	fp, #44
11e84     E8 B7 BF FD | 	call	#_pop
11e88     3D 97 02 F6 | 	mov	arg03, result1
11e8c     3E 95 02 F6 | 	mov	arg02, result2
11e90     3F 9B 02 F6 | 	mov	arg05, result3
11e94     18 CE 05 F1 | 	add	fp, #24
11e98     E7 96 62 FC | 	wrlong	arg03, fp
11e9c     04 CE 05 F1 | 	add	fp, #4
11ea0     E7 94 62 FC | 	wrlong	arg02, fp
11ea4     04 CE 05 F1 | 	add	fp, #4
11ea8     E7 9A 62 FC | 	wrlong	arg05, fp
11eac     20 CE 85 F1 | 	sub	fp, #32
11eb0     BC B7 BF FD | 	call	#_pop
11eb4     3D 97 02 F6 | 	mov	arg03, result1
11eb8     3E 95 02 F6 | 	mov	arg02, result2
11ebc     3F 9B 02 F6 | 	mov	arg05, result3
11ec0     0C CE 05 F1 | 	add	fp, #12
11ec4     E7 96 62 FC | 	wrlong	arg03, fp
11ec8     04 CE 05 F1 | 	add	fp, #4
11ecc     E7 94 62 FC | 	wrlong	arg02, fp
11ed0     04 CE 05 F1 | 	add	fp, #4
11ed4     E7 9A 62 FC | 	wrlong	arg05, fp
11ed8     14 CE 85 F1 | 	sub	fp, #20
11edc     90 B7 BF FD | 	call	#_pop
11ee0     3F 97 02 F6 | 	mov	arg03, result3
11ee4     E7 7A 62 FC | 	wrlong	result1, fp
11ee8     04 CE 05 F1 | 	add	fp, #4
11eec     E7 7C 62 FC | 	wrlong	result2, fp
11ef0     04 CE 05 F1 | 	add	fp, #4
11ef4     E7 96 62 FC | 	wrlong	arg03, fp
11ef8     08 CE 85 F1 | 	sub	fp, #8
11efc     E7 92 02 F6 | 	mov	arg01, fp
11f00     48 B9 BF FD | 	call	#_converttoint
11f04     3D A7 02 F6 | 	mov	local01, result1
11f08     E7 92 02 F6 | 	mov	arg01, fp
11f0c     0C 92 06 F1 | 	add	arg01, #12
11f10     38 B9 BF FD | 	call	#_converttoint
11f14     3D A9 02 F6 | 	mov	local02, result1
11f18     E7 92 02 F6 | 	mov	arg01, fp
11f1c     18 92 06 F1 | 	add	arg01, #24
11f20     28 B9 BF FD | 	call	#_converttoint
11f24     3D AB 02 F6 | 	mov	local03, result1
11f28     E7 92 02 F6 | 	mov	arg01, fp
11f2c     24 92 06 F1 | 	add	arg01, #36
11f30     18 B9 BF FD | 	call	#_converttoint
11f34     3D 99 02 F6 | 	mov	arg04, result1
11f38     38 00 00 FF 
11f3c     CC 65 06 F1 | 	add	objptr, ##29132
11f40     32 9B 02 FB | 	rdlong	arg05, objptr
11f44     38 00 00 FF 
11f48     CC 65 86 F1 | 	sub	objptr, ##29132
11f4c     53 93 02 F6 | 	mov	arg01, local01
11f50     54 95 02 F6 | 	mov	arg02, local02
11f54     55 97 02 F6 | 	mov	arg03, local03
11f58     74 04 B1 FD | 	call	#_hg010b_spin2_frame
11f5c     E7 F0 03 F6 | 	mov	ptra, fp
11f60     F2 00 A0 FD | 	call	#popregs_
11f64                 | _do_frame_ret
11f64     2D 00 64 FD | 	ret
11f68                 | 
11f68                 | ' 
11f68                 | ' '-------------------- framebuf
11f68                 | ' 
11f68                 | ' sub do_framebuf
11f68                 | _do_framebuf
11f68     00 CA 05 F6 | 	mov	COUNT_, #0
11f6c     E8 00 A0 FD | 	call	#pushregs_
11f70     0C F0 07 F1 | 	add	ptra, #12
11f74     08 CE 05 F1 | 	add	fp, #8
11f78     E7 3A 68 FC | 	wrlong	#29, fp
11f7c     32 93 02 FB | 	rdlong	arg01, objptr
11f80     08 CE 85 F1 | 	sub	fp, #8
11f84     E7 92 62 FC | 	wrlong	arg01, fp
11f88     E7 92 02 F6 | 	mov	arg01, fp
11f8c     70 B7 BF FD | 	call	#_push
11f90     E7 F0 03 F6 | 	mov	ptra, fp
11f94     F2 00 A0 FD | 	call	#popregs_
11f98                 | _do_framebuf_ret
11f98     2D 00 64 FD | 	ret
11f9c                 | 
11f9c                 | ' '-------------------- fre
11f9c                 | ' 
11f9c                 | ' sub do_fre
11f9c                 | _do_fre
11f9c     01 CA 05 F6 | 	mov	COUNT_, #1
11fa0     E8 00 A0 FD | 	call	#pushregs_
11fa4     0C F0 07 F1 | 	add	ptra, #12
11fa8     54 00 00 FF 
11fac     74 64 06 F1 | 	add	objptr, ##43124
11fb0     32 93 02 FB | 	rdlong	arg01, objptr
11fb4     0F 00 00 FF 
11fb8     74 64 86 F1 | 	sub	objptr, ##7796
11fbc     32 A7 02 FB | 	rdlong	local01, objptr
11fc0     53 93 82 F1 | 	sub	arg01, local01
11fc4     0F 00 00 FF 
11fc8     EC 64 06 F1 | 	add	objptr, ##7916
11fcc     32 93 62 FC | 	wrlong	arg01, objptr
11fd0     08 CE 05 F1 | 	add	fp, #8
11fd4     E7 3A 68 FC | 	wrlong	#29, fp
11fd8     08 CE 85 F1 | 	sub	fp, #8
11fdc     32 A7 02 FB | 	rdlong	local01, objptr
11fe0     54 00 00 FF 
11fe4     EC 64 86 F1 | 	sub	objptr, ##43244
11fe8     E7 A6 62 FC | 	wrlong	local01, fp
11fec     E7 92 02 F6 | 	mov	arg01, fp
11ff0     0C B7 BF FD | 	call	#_push
11ff4     E7 F0 03 F6 | 	mov	ptra, fp
11ff8     F2 00 A0 FD | 	call	#popregs_
11ffc                 | _do_fre_ret
11ffc     2D 00 64 FD | 	ret
12000                 | 
12000                 | ' 
12000                 | ' '-------------------- get
12000                 | ' 
12000                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
12000                 | _do_get
12000     10 CA 05 F6 | 	mov	COUNT_, #16
12004     E8 00 A0 FD | 	call	#pushregs_
12008     40 F0 07 F1 | 	add	ptra, #64
1200c     4C 00 00 FF 
12010     24 64 06 F1 | 	add	objptr, ##38948
12014     32 9B 02 FB | 	rdlong	arg05, objptr
12018     4D A7 02 F6 | 	mov	local01, arg05
1201c     01 A6 66 F0 | 	shl	local01, #1
12020     4D A7 02 F1 | 	add	local01, arg05
12024     02 A6 66 F0 | 	shl	local01, #2
12028     03 00 00 FF 
1202c     04 64 86 F1 | 	sub	objptr, ##1540
12030     32 A9 02 F6 | 	mov	local02, objptr
12034     32 A7 02 F1 | 	add	local01, objptr
12038     53 AB 02 FB | 	rdlong	local03, local01
1203c                 | ' 
1203c                 | ' numpar=compiledline(lineptr_e).result.uresult
1203c                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
1203c     04 AA 0E F2 | 	cmp	local03, #4 wz
12040     49 00 00 FF 
12044     20 64 86 F1 | 	sub	objptr, ##37408
12048     48 00 90 5D |  if_ne	jmp	#LR__1520
1204c     20 B6 BF FD | 	call	#_pop
12050     3F 9B 02 F6 | 	mov	arg05, result3
12054     1C CE 05 F1 | 	add	fp, #28
12058     E7 7A 62 FC | 	wrlong	result1, fp
1205c     04 CE 05 F1 | 	add	fp, #4
12060     E7 7C 62 FC | 	wrlong	result2, fp
12064     04 CE 05 F1 | 	add	fp, #4
12068     E7 9A 62 FC | 	wrlong	arg05, fp
1206c     08 CE 85 F1 | 	sub	fp, #8
12070     E7 92 02 F6 | 	mov	arg01, fp
12074     1C CE 85 F1 | 	sub	fp, #28
12078     D0 B7 BF FD | 	call	#_converttoint
1207c     54 00 00 FF 
12080     E8 64 06 F1 | 	add	objptr, ##43240
12084     32 7B 62 FC | 	wrlong	result1, objptr
12088     54 00 00 FF 
1208c     E8 64 86 F1 | 	sub	objptr, ##43240
12090     18 00 90 FD | 	jmp	#LR__1521
12094                 | LR__1520
12094     54 00 00 FF 
12098     E8 64 06 F1 | 	add	objptr, ##43240
1209c     FF FF FF FF 
120a0     32 FF 6B FC | 	wrlong	##-1, objptr
120a4     54 00 00 FF 
120a8     E8 64 86 F1 | 	sub	objptr, ##43240
120ac                 | LR__1521
120ac                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
120ac     03 AA 56 F2 | 	cmps	local03, #3 wc
120b0     38 00 90 CD |  if_b	jmp	#LR__1522
120b4     B8 B5 BF FD | 	call	#_pop
120b8     3F A7 02 F6 | 	mov	local01, result3
120bc     1C CE 05 F1 | 	add	fp, #28
120c0     E7 7A 62 FC | 	wrlong	result1, fp
120c4     04 CE 05 F1 | 	add	fp, #4
120c8     E7 7C 62 FC | 	wrlong	result2, fp
120cc     04 CE 05 F1 | 	add	fp, #4
120d0     E7 A6 62 FC | 	wrlong	local01, fp
120d4     08 CE 85 F1 | 	sub	fp, #8
120d8     E7 92 02 F6 | 	mov	arg01, fp
120dc     1C CE 85 F1 | 	sub	fp, #28
120e0     68 B7 BF FD | 	call	#_converttoint
120e4     3D AD 02 F6 | 	mov	local04, result1
120e8     04 00 90 FD | 	jmp	#LR__1523
120ec                 | LR__1522
120ec     01 AC 06 F6 | 	mov	local04, #1
120f0                 | LR__1523
120f0                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
120f0     02 AA 56 F2 | 	cmps	local03, #2 wc
120f4     34 00 90 CD |  if_b	jmp	#LR__1524
120f8     74 B5 BF FD | 	call	#_pop
120fc     3F A9 02 F6 | 	mov	local02, result3
12100     1C CE 05 F1 | 	add	fp, #28
12104     E7 7A 62 FC | 	wrlong	result1, fp
12108     04 CE 05 F1 | 	add	fp, #4
1210c     E7 7C 62 FC | 	wrlong	result2, fp
12110     04 CE 05 F1 | 	add	fp, #4
12114     E7 A8 62 FC | 	wrlong	local02, fp
12118     08 CE 85 F1 | 	sub	fp, #8
1211c     E7 92 02 F6 | 	mov	arg01, fp
12120     1C CE 85 F1 | 	sub	fp, #28
12124     24 B7 BF FD | 	call	#_converttoint
12128     3D AF 02 F6 | 	mov	local05, result1
1212c                 | LR__1524
1212c     40 B5 BF FD | 	call	#_pop
12130     3F 9B 02 F6 | 	mov	arg05, result3
12134     1C CE 05 F1 | 	add	fp, #28
12138     E7 7A 62 FC | 	wrlong	result1, fp
1213c     04 CE 05 F1 | 	add	fp, #4
12140     E7 7C 62 FC | 	wrlong	result2, fp
12144     04 CE 05 F1 | 	add	fp, #4
12148     E7 9A 62 FC | 	wrlong	arg05, fp
1214c     08 CE 85 F1 | 	sub	fp, #8
12150     E7 92 02 F6 | 	mov	arg01, fp
12154     1C CE 85 F1 | 	sub	fp, #28
12158     F0 B6 BF FD | 	call	#_converttoint
1215c     3D B1 02 F6 | 	mov	local06, result1
12160     02 B2 66 F0 | 	shl	local07, #2
12164     52 00 00 FF 
12168     68 64 06 F1 | 	add	objptr, ##42088
1216c     32 B3 02 F1 | 	add	local07, objptr
12170     59 01 68 FC | 	wrlong	#0, local07
12174                 | ' t1=pop() : channel=converttoint(t1)
12174                 | ' getres(j)=0
12174                 | ' if pos>=0 then
12174     02 00 00 FF 
12178     80 64 06 F1 | 	add	objptr, ##1152
1217c     32 B5 02 FB | 	rdlong	local08, objptr
12180     54 00 00 FF 
12184     E8 64 86 F1 | 	sub	objptr, ##43240
12188     00 B4 56 F2 | 	cmps	local08, #0 wc
1218c     28 01 90 CD |  if_b	jmp	#LR__1531
12190                 | '   for i=0 to  amount/1024
12190     00 B6 06 F6 | 	mov	local09, #0
12194     56 B9 52 F6 | 	abs	local10, local04 wc
12198     0A B8 46 F0 | 	shr	local10, #10
1219c     5C B9 82 F6 | 	negc	local10, local10
121a0     01 B8 06 F1 | 	add	local10, #1
121a4                 | LR__1525
121a4     5C B7 52 F2 | 	cmps	local09, local10 wc
121a8     20 02 90 3D |  if_ae	jmp	#LR__1539
121ac                 | '     get #channel,pos+1,block(0),amount,r
121ac     54 00 00 FF 
121b0     E8 64 06 F1 | 	add	objptr, ##43240
121b4     32 95 02 FB | 	rdlong	arg02, objptr
121b8     01 94 06 F1 | 	add	arg02, #1
121bc     04 00 00 FF 
121c0     90 64 86 F1 | 	sub	objptr, ##2192
121c4     32 97 02 F6 | 	mov	arg03, objptr
121c8     50 00 00 FF 
121cc     58 64 86 F1 | 	sub	objptr, ##41048
121d0     56 99 02 F6 | 	mov	arg04, local04
121d4     58 93 02 F6 | 	mov	arg01, local06
121d8     01 9A 06 F6 | 	mov	arg05, #1
121dc     2C 34 B1 FD | 	call	#__system___basic_get
121e0     3D BB 02 F6 | 	mov	local11, result1
121e4                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
121e4     00 04 00 FF 
121e8     00 AE 56 F2 | 	cmps	local05, ##524288 wc
121ec     48 00 90 3D |  if_ae	jmp	#LR__1527
121f0     00 B2 06 F6 | 	mov	local07, #0
121f4     5D BD 02 F6 | 	mov	local12, local11
121f8                 | LR__1526
121f8     5E B3 52 F2 | 	cmps	local07, local12 wc
121fc     80 00 90 3D |  if_ae	jmp	#LR__1530
12200     57 93 02 F6 | 	mov	arg01, local05
12204     5B B5 02 F6 | 	mov	local08, local09
12208     0A B4 66 F0 | 	shl	local08, #10
1220c     5A 93 02 F1 | 	add	arg01, local08
12210     59 93 02 F1 | 	add	arg01, local07
12214     59 A9 02 F6 | 	mov	local02, local07
12218     32 B5 02 F6 | 	mov	local08, objptr
1221c     50 00 00 FF 
12220     58 B4 06 F1 | 	add	local08, ##41048
12224     5A A9 02 F1 | 	add	local02, local08
12228     54 95 C2 FA | 	rdbyte	arg02, local02
1222c     49 95 42 FC | 	wrbyte	arg02, arg01
12230     01 B2 06 F1 | 	add	local07, #1
12234     C0 FF 9F FD | 	jmp	#LR__1526
12238                 | LR__1527
12238     00 B2 06 F6 | 	mov	local07, #0
1223c     5D BF 02 F6 | 	mov	local13, local11
12240                 | LR__1528
12240     5F B3 52 F2 | 	cmps	local07, local13 wc
12244     38 00 90 3D |  if_ae	jmp	#LR__1529
12248     57 93 02 F6 | 	mov	arg01, local05
1224c     5B BD 02 F6 | 	mov	local12, local09
12250     0A BC 66 F0 | 	shl	local12, #10
12254     5E 93 02 F1 | 	add	arg01, local12
12258     59 93 02 F1 | 	add	arg01, local07
1225c     59 A9 02 F6 | 	mov	local02, local07
12260     32 BD 02 F6 | 	mov	local12, objptr
12264     50 00 00 FF 
12268     58 BC 06 F1 | 	add	local12, ##41048
1226c     5E A9 02 F1 | 	add	local02, local12
12270     54 95 C2 FA | 	rdbyte	arg02, local02
12274     50 E9 B0 FD | 	call	#_pspoke
12278     01 B2 06 F1 | 	add	local07, #1
1227c     C0 FF 9F FD | 	jmp	#LR__1528
12280                 | LR__1529
12280                 | LR__1530
12280     59 BF 02 F6 | 	mov	local13, local07
12284     02 BE 66 F0 | 	shl	local13, #2
12288     52 00 00 FF 
1228c     68 64 06 F1 | 	add	objptr, ##42088
12290     32 BF 02 F1 | 	add	local13, objptr
12294     02 B2 66 F0 | 	shl	local07, #2
12298     32 B3 02 F1 | 	add	local07, objptr
1229c     59 A7 02 FB | 	rdlong	local01, local07
122a0     5D A7 02 F1 | 	add	local01, local11
122a4     5F A7 62 FC | 	wrlong	local01, local13
122a8     01 B6 06 F1 | 	add	local09, #1
122ac     52 00 00 FF 
122b0     68 64 86 F1 | 	sub	objptr, ##42088
122b4     EC FE 9F FD | 	jmp	#LR__1525
122b8                 | LR__1531
122b8                 | '   for i=0 to  amount/1024
122b8     00 B6 06 F6 | 	mov	local09, #0
122bc     56 C1 52 F6 | 	abs	local14, local04 wc
122c0     0A C0 46 F0 | 	shr	local14, #10
122c4     60 C1 82 F6 | 	negc	local14, local14
122c8     01 C0 06 F1 | 	add	local14, #1
122cc                 | LR__1532
122cc     60 B7 52 F2 | 	cmps	local09, local14 wc
122d0     F8 00 90 3D |  if_ae	jmp	#LR__1538
122d4                 | '     get #channel,,block(0),amount,r
122d4     32 97 02 F6 | 	mov	arg03, objptr
122d8     50 00 00 FF 
122dc     58 96 06 F1 | 	add	arg03, ##41048
122e0     56 99 02 F6 | 	mov	arg04, local04
122e4     58 93 02 F6 | 	mov	arg01, local06
122e8     00 94 06 F6 | 	mov	arg02, #0
122ec     01 9A 06 F6 | 	mov	arg05, #1
122f0     18 33 B1 FD | 	call	#__system___basic_get
122f4     3D BB 02 F6 | 	mov	local11, result1
122f8                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
122f8     00 04 00 FF 
122fc     00 AE 56 F2 | 	cmps	local05, ##524288 wc
12300     48 00 90 3D |  if_ae	jmp	#LR__1534
12304     00 B2 06 F6 | 	mov	local07, #0
12308     5D C3 02 F6 | 	mov	local15, local11
1230c                 | LR__1533
1230c     61 B3 52 F2 | 	cmps	local07, local15 wc
12310     80 00 90 3D |  if_ae	jmp	#LR__1537
12314     57 93 02 F6 | 	mov	arg01, local05
12318     5B BF 02 F6 | 	mov	local13, local09
1231c     0A BE 66 F0 | 	shl	local13, #10
12320     5F 93 02 F1 | 	add	arg01, local13
12324     59 93 02 F1 | 	add	arg01, local07
12328     59 A9 02 F6 | 	mov	local02, local07
1232c     32 BF 02 F6 | 	mov	local13, objptr
12330     50 00 00 FF 
12334     58 BE 06 F1 | 	add	local13, ##41048
12338     5F A9 02 F1 | 	add	local02, local13
1233c     54 95 C2 FA | 	rdbyte	arg02, local02
12340     49 95 42 FC | 	wrbyte	arg02, arg01
12344     01 B2 06 F1 | 	add	local07, #1
12348     C0 FF 9F FD | 	jmp	#LR__1533
1234c                 | LR__1534
1234c     00 B2 06 F6 | 	mov	local07, #0
12350     5D C5 02 F6 | 	mov	local16, local11
12354                 | LR__1535
12354     62 B3 52 F2 | 	cmps	local07, local16 wc
12358     38 00 90 3D |  if_ae	jmp	#LR__1536
1235c     57 93 02 F6 | 	mov	arg01, local05
12360     5B C3 02 F6 | 	mov	local15, local09
12364     0A C2 66 F0 | 	shl	local15, #10
12368     61 93 02 F1 | 	add	arg01, local15
1236c     59 93 02 F1 | 	add	arg01, local07
12370     59 A9 02 F6 | 	mov	local02, local07
12374     32 C3 02 F6 | 	mov	local15, objptr
12378     50 00 00 FF 
1237c     58 C2 06 F1 | 	add	local15, ##41048
12380     61 A9 02 F1 | 	add	local02, local15
12384     54 95 C2 FA | 	rdbyte	arg02, local02
12388     3C E8 B0 FD | 	call	#_pspoke
1238c     01 B2 06 F1 | 	add	local07, #1
12390     C0 FF 9F FD | 	jmp	#LR__1535
12394                 | LR__1536
12394                 | LR__1537
12394     59 C5 02 F6 | 	mov	local16, local07
12398     02 C4 66 F0 | 	shl	local16, #2
1239c     52 00 00 FF 
123a0     68 64 06 F1 | 	add	objptr, ##42088
123a4     32 C5 02 F1 | 	add	local16, objptr
123a8     02 B2 66 F0 | 	shl	local07, #2
123ac     32 B3 02 F1 | 	add	local07, objptr
123b0     59 A7 02 FB | 	rdlong	local01, local07
123b4     5D A7 02 F1 | 	add	local01, local11
123b8     62 A7 62 FC | 	wrlong	local01, local16
123bc     01 B6 06 F1 | 	add	local09, #1
123c0     52 00 00 FF 
123c4     68 64 86 F1 | 	sub	objptr, ##42088
123c8     00 FF 9F FD | 	jmp	#LR__1532
123cc                 | LR__1538
123cc                 | LR__1539
123cc     E7 F0 03 F6 | 	mov	ptra, fp
123d0     F2 00 A0 FD | 	call	#popregs_
123d4                 | _do_get_ret
123d4     2D 00 64 FD | 	ret
123d8                 | 
123d8                 | ' 
123d8                 | ' '-------------------- getcolor
123d8                 | ' 
123d8                 | ' sub do_getcolor
123d8                 | _do_getcolor
123d8     00 CA 05 F6 | 	mov	COUNT_, #0
123dc     E8 00 A0 FD | 	call	#pushregs_
123e0     10 F0 07 F1 | 	add	ptra, #16
123e4     4C 00 00 FF 
123e8     24 64 06 F1 | 	add	objptr, ##38948
123ec     32 97 02 FB | 	rdlong	arg03, objptr
123f0     4B 95 02 F6 | 	mov	arg02, arg03
123f4     01 94 66 F0 | 	shl	arg02, #1
123f8     4B 95 02 F1 | 	add	arg02, arg03
123fc     02 94 66 F0 | 	shl	arg02, #2
12400     03 00 00 FF 
12404     04 64 86 F1 | 	sub	objptr, ##1540
12408     32 95 02 F1 | 	add	arg02, objptr
1240c     4A 97 02 FB | 	rdlong	arg03, arg02
12410                 | ' 
12410                 | ' numpar=compiledline(lineptr_e).result.uresult
12410                 | ' if numpar>1 orelse numpar=0 then print "getcolor "; : printerror(39) : return
12410     02 96 16 F2 | 	cmp	arg03, #2 wc
12414     49 00 00 FF 
12418     20 64 86 F1 | 	sub	objptr, ##37408
1241c     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
12420     40 00 90 4D |  if_c_and_nz	jmp	#LR__1540
12424     00 92 06 F6 | 	mov	arg01, #0
12428     E8 78 B1 FD | 	call	#__system___getiolock_0622
1242c     3D 93 02 F6 | 	mov	arg01, result1
12430     5C 23 B1 FD | 	call	#__system___lockmem
12434     96 01 00 FF 
12438     FC 94 06 F6 | 	mov	arg02, ##@LR__6006
1243c     00 92 06 F6 | 	mov	arg01, #0
12440     00 96 06 F6 | 	mov	arg03, #0
12444     3C 30 B1 FD | 	call	#__system___basic_print_string
12448     00 92 06 F6 | 	mov	arg01, #0
1244c     C4 78 B1 FD | 	call	#__system___getiolock_0622
12450     3D 01 68 FC | 	wrlong	#0, result1
12454     27 92 06 F6 | 	mov	arg01, #39
12458     00 94 06 F6 | 	mov	arg02, #0
1245c     38 E5 B0 FD | 	call	#_printerror
12460     60 00 90 FD | 	jmp	#LR__1541
12464                 | LR__1540
12464     08 B2 BF FD | 	call	#_pop
12468     E7 7A 62 FC | 	wrlong	result1, fp
1246c     04 CE 05 F1 | 	add	fp, #4
12470     E7 7C 62 FC | 	wrlong	result2, fp
12474     04 CE 05 F1 | 	add	fp, #4
12478     E7 7E 62 FC | 	wrlong	result3, fp
1247c     08 CE 85 F1 | 	sub	fp, #8
12480     E7 92 02 F6 | 	mov	arg01, fp
12484     C4 B3 BF FD | 	call	#_converttoint
12488     3D 93 02 F6 | 	mov	arg01, result1
1248c                 | ' 
1248c                 | ' return long[palette_ptr+4*color]
1248c     1C 64 06 F1 | 	add	objptr, #28
12490     32 7B 02 FB | 	rdlong	result1, objptr
12494     1C 64 86 F1 | 	sub	objptr, #28
12498     02 92 66 F0 | 	shl	arg01, #2
1249c     49 7B 02 F1 | 	add	result1, arg01
124a0     3D 7B 02 FB | 	rdlong	result1, result1
124a4     08 7A C6 F0 | 	sar	result1, #8
124a8     F8 7A 06 F4 | 	bitl	result1, #248
124ac     E7 7A 62 FC | 	wrlong	result1, fp
124b0     08 CE 05 F1 | 	add	fp, #8
124b4     E7 3A 68 FC | 	wrlong	#29, fp
124b8     08 CE 85 F1 | 	sub	fp, #8
124bc     E7 92 02 F6 | 	mov	arg01, fp
124c0     3C B2 BF FD | 	call	#_push
124c4                 | LR__1541
124c4     E7 F0 03 F6 | 	mov	ptra, fp
124c8     F2 00 A0 FD | 	call	#popregs_
124cc                 | _do_getcolor_ret
124cc     2D 00 64 FD | 	ret
124d0                 | 
124d0                 | ' 
124d0                 | ' '-------------------- getenvsustain
124d0                 | ' 
124d0                 | ' sub do_getenvsustain
124d0                 | _do_getenvsustain
124d0     00 CA 05 F6 | 	mov	COUNT_, #0
124d4     E8 00 A0 FD | 	call	#pushregs_
124d8     10 F0 07 F1 | 	add	ptra, #16
124dc     4C 00 00 FF 
124e0     24 64 06 F1 | 	add	objptr, ##38948
124e4     32 97 02 FB | 	rdlong	arg03, objptr
124e8     4B 95 02 F6 | 	mov	arg02, arg03
124ec     01 94 66 F0 | 	shl	arg02, #1
124f0     4B 95 02 F1 | 	add	arg02, arg03
124f4     02 94 66 F0 | 	shl	arg02, #2
124f8     03 00 00 FF 
124fc     04 64 86 F1 | 	sub	objptr, ##1540
12500     32 95 02 F1 | 	add	arg02, objptr
12504     4A 97 02 FB | 	rdlong	arg03, arg02
12508                 | ' 
12508                 | ' numpar=compiledline(lineptr_e).result.uresult
12508                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12508     02 96 16 F2 | 	cmp	arg03, #2 wc
1250c     49 00 00 FF 
12510     20 64 86 F1 | 	sub	objptr, ##37408
12514     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
12518     40 00 90 4D |  if_c_and_nz	jmp	#LR__1550
1251c     00 92 06 F6 | 	mov	arg01, #0
12520     F0 77 B1 FD | 	call	#__system___getiolock_0622
12524     3D 93 02 F6 | 	mov	arg01, result1
12528     64 22 B1 FD | 	call	#__system___lockmem
1252c     96 01 00 FF 
12530     06 95 06 F6 | 	mov	arg02, ##@LR__6007
12534     00 92 06 F6 | 	mov	arg01, #0
12538     00 96 06 F6 | 	mov	arg03, #0
1253c     44 2F B1 FD | 	call	#__system___basic_print_string
12540     00 92 06 F6 | 	mov	arg01, #0
12544     CC 77 B1 FD | 	call	#__system___getiolock_0622
12548     3D 01 68 FC | 	wrlong	#0, result1
1254c     27 92 06 F6 | 	mov	arg01, #39
12550     00 94 06 F6 | 	mov	arg02, #0
12554     40 E4 B0 FD | 	call	#_printerror
12558     60 00 90 FD | 	jmp	#LR__1551
1255c                 | LR__1550
1255c     10 B1 BF FD | 	call	#_pop
12560     3D 97 02 F6 | 	mov	arg03, result1
12564     3E 95 02 F6 | 	mov	arg02, result2
12568     E7 96 62 FC | 	wrlong	arg03, fp
1256c     04 CE 05 F1 | 	add	fp, #4
12570     E7 94 62 FC | 	wrlong	arg02, fp
12574     04 CE 05 F1 | 	add	fp, #4
12578     E7 7E 62 FC | 	wrlong	result3, fp
1257c     08 CE 85 F1 | 	sub	fp, #8
12580     E7 92 02 F6 | 	mov	arg01, fp
12584     C4 B2 BF FD | 	call	#_converttoint
12588     3D 97 02 F6 | 	mov	arg03, result1
1258c     01 96 66 F0 | 	shl	arg03, #1
12590     32 95 02 F6 | 	mov	arg02, objptr
12594     54 00 00 FF 
12598     90 94 06 F1 | 	add	arg02, ##43152
1259c     4A 97 02 F1 | 	add	arg03, arg02
125a0     4B 7F E2 FA | 	rdword	result3, arg03
125a4     E7 7E 62 FC | 	wrlong	result3, fp
125a8     08 CE 05 F1 | 	add	fp, #8
125ac     E7 38 68 FC | 	wrlong	#28, fp
125b0     08 CE 85 F1 | 	sub	fp, #8
125b4     E7 92 02 F6 | 	mov	arg01, fp
125b8     44 B1 BF FD | 	call	#_push
125bc                 | LR__1551
125bc     E7 F0 03 F6 | 	mov	ptra, fp
125c0     F2 00 A0 FD | 	call	#popregs_
125c4                 | _do_getenvsustain_ret
125c4     2D 00 64 FD | 	ret
125c8                 | 
125c8                 | ' 
125c8                 | ' '-------------------- getnotevalue
125c8                 | ' 
125c8                 | ' sub do_getnotevalue
125c8                 | _do_getnotevalue
125c8     02 CA 05 F6 | 	mov	COUNT_, #2
125cc     E8 00 A0 FD | 	call	#pushregs_
125d0     1C F0 07 F1 | 	add	ptra, #28
125d4     98 B0 BF FD | 	call	#_pop
125d8     3F 95 02 F6 | 	mov	arg02, result3
125dc     10 CE 05 F1 | 	add	fp, #16
125e0     E7 7A 62 FC | 	wrlong	result1, fp
125e4     04 CE 05 F1 | 	add	fp, #4
125e8     E7 7C 62 FC | 	wrlong	result2, fp
125ec     04 CE 05 F1 | 	add	fp, #4
125f0     E7 94 62 FC | 	wrlong	arg02, fp
125f4     08 CE 85 F1 | 	sub	fp, #8
125f8     E7 92 02 F6 | 	mov	arg01, fp
125fc     10 CE 85 F1 | 	sub	fp, #16
12600     48 B2 BF FD | 	call	#_converttoint
12604     3D 93 52 F6 | 	abs	arg01, result1 wc
12608     0C 92 16 FD | 	qdiv	arg01, #12
1260c     32 93 02 F6 | 	mov	arg01, objptr
12610     16 00 00 FF 
12614     38 92 06 F1 | 	add	arg01, ##11320
12618     19 7C 62 FD | 	getqy	result2
1261c     3E 7D 82 F6 | 	negc	result2, result2
12620     3D 7B 52 F6 | 	abs	result1, result1 wc
12624     0C 7A 16 FD | 	qdiv	result1, #12
12628     02 7C 66 F0 | 	shl	result2, #2
1262c     49 7D 02 F1 | 	add	result2, arg01
12630     3E A7 02 FB | 	rdlong	local01, result2
12634     18 94 62 FD | 	getqx	arg02
12638     4A 93 82 F6 | 	negc	arg01, arg02
1263c     49 93 52 F6 | 	abs	arg01, arg01 wc
12640     1F A8 C6 C9 |  if_b	decod	local02, #31
12644     00 A8 06 36 |  if_ae	mov	local02, #0
12648     10 44 B1 FD | 	call	#__system___float_fromuns
1264c     54 7B 62 F5 | 	xor	result1, local02
12650     3D 95 02 F6 | 	mov	arg02, result1
12654     1E 92 C6 F9 | 	decod	arg01, #30
12658     1C 57 B1 FD | 	call	#__system____builtin_powf
1265c     3D 93 02 F6 | 	mov	arg01, result1
12660     53 95 02 F6 | 	mov	arg02, local01
12664     F8 47 B1 FD | 	call	#__system___float_mul
12668     3D A7 02 F6 | 	mov	local01, result1
1266c     10 CE 05 F1 | 	add	fp, #16
12670     E7 A6 62 FC | 	wrlong	local01, fp
12674     08 CE 05 F1 | 	add	fp, #8
12678     E7 3C 68 FC | 	wrlong	#30, fp
1267c     08 CE 85 F1 | 	sub	fp, #8
12680     E7 92 02 F6 | 	mov	arg01, fp
12684     10 CE 85 F1 | 	sub	fp, #16
12688     74 B0 BF FD | 	call	#_push
1268c     E7 F0 03 F6 | 	mov	ptra, fp
12690     F2 00 A0 FD | 	call	#popregs_
12694                 | _do_getnotevalue_ret
12694     2D 00 64 FD | 	ret
12698                 | 
12698                 | ' 
12698                 | ' '-------------------- getpixel
12698                 | ' 
12698                 | ' sub do_getpixel
12698                 | _do_getpixel
12698     01 CA 05 F6 | 	mov	COUNT_, #1
1269c     E8 00 A0 FD | 	call	#pushregs_
126a0     24 F0 07 F1 | 	add	ptra, #36
126a4     4C 00 00 FF 
126a8     24 64 06 F1 | 	add	objptr, ##38948
126ac     32 97 02 FB | 	rdlong	arg03, objptr
126b0     4B 95 02 F6 | 	mov	arg02, arg03
126b4     01 94 66 F0 | 	shl	arg02, #1
126b8     4B 95 02 F1 | 	add	arg02, arg03
126bc     02 94 66 F0 | 	shl	arg02, #2
126c0     03 00 00 FF 
126c4     04 64 86 F1 | 	sub	objptr, ##1540
126c8     32 95 02 F1 | 	add	arg02, objptr
126cc     4A 97 02 FB | 	rdlong	arg03, arg02
126d0                 | ' 
126d0                 | ' numpar=compiledline(lineptr_e).result.uresult
126d0                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
126d0     02 96 0E F2 | 	cmp	arg03, #2 wz
126d4     49 00 00 FF 
126d8     20 64 86 F1 | 	sub	objptr, ##37408
126dc     40 00 90 AD |  if_e	jmp	#LR__1560
126e0     00 92 06 F6 | 	mov	arg01, #0
126e4     2C 76 B1 FD | 	call	#__system___getiolock_0622
126e8     3D 93 02 F6 | 	mov	arg01, result1
126ec     A0 20 B1 FD | 	call	#__system___lockmem
126f0     96 01 00 FF 
126f4     16 95 06 F6 | 	mov	arg02, ##@LR__6008
126f8     00 92 06 F6 | 	mov	arg01, #0
126fc     00 96 06 F6 | 	mov	arg03, #0
12700     80 2D B1 FD | 	call	#__system___basic_print_string
12704     00 92 06 F6 | 	mov	arg01, #0
12708     08 76 B1 FD | 	call	#__system___getiolock_0622
1270c     3D 01 68 FC | 	wrlong	#0, result1
12710     27 92 06 F6 | 	mov	arg01, #39
12714     00 94 06 F6 | 	mov	arg02, #0
12718     7C E2 B0 FD | 	call	#_printerror
1271c     98 00 90 FD | 	jmp	#LR__1561
12720                 | LR__1560
12720     4C AF BF FD | 	call	#_pop
12724     3D 97 02 F6 | 	mov	arg03, result1
12728     3E 95 02 F6 | 	mov	arg02, result2
1272c     3F 93 02 F6 | 	mov	arg01, result3
12730     0C CE 05 F1 | 	add	fp, #12
12734     E7 96 62 FC | 	wrlong	arg03, fp
12738     04 CE 05 F1 | 	add	fp, #4
1273c     E7 94 62 FC | 	wrlong	arg02, fp
12740     04 CE 05 F1 | 	add	fp, #4
12744     E7 92 62 FC | 	wrlong	arg01, fp
12748     14 CE 85 F1 | 	sub	fp, #20
1274c     20 AF BF FD | 	call	#_pop
12750     3F 97 02 F6 | 	mov	arg03, result3
12754     E7 7A 62 FC | 	wrlong	result1, fp
12758     04 CE 05 F1 | 	add	fp, #4
1275c     E7 7C 62 FC | 	wrlong	result2, fp
12760     04 CE 05 F1 | 	add	fp, #4
12764     E7 96 62 FC | 	wrlong	arg03, fp
12768     08 CE 85 F1 | 	sub	fp, #8
1276c     E7 92 02 F6 | 	mov	arg01, fp
12770     D8 B0 BF FD | 	call	#_converttoint
12774     3D A7 02 F6 | 	mov	local01, result1
12778     E7 92 02 F6 | 	mov	arg01, fp
1277c     0C 92 06 F1 | 	add	arg01, #12
12780     C8 B0 BF FD | 	call	#_converttoint
12784     3D 97 02 F6 | 	mov	arg03, result1
12788     32 93 02 FB | 	rdlong	arg01, objptr
1278c     53 93 02 F1 | 	add	arg01, local01
12790     0A 96 66 F0 | 	shl	arg03, #10
12794     4B 93 02 F1 | 	add	arg01, arg03
12798     78 E4 B0 FD | 	call	#_pspeek
1279c     3D 7B E2 F8 | 	getbyte	result1, result1, #0
127a0     E7 7A 62 FC | 	wrlong	result1, fp
127a4     08 CE 05 F1 | 	add	fp, #8
127a8     E7 3A 68 FC | 	wrlong	#29, fp
127ac     08 CE 85 F1 | 	sub	fp, #8
127b0     E7 92 02 F6 | 	mov	arg01, fp
127b4     48 AF BF FD | 	call	#_push
127b8                 | LR__1561
127b8     E7 F0 03 F6 | 	mov	ptra, fp
127bc     F2 00 A0 FD | 	call	#popregs_
127c0                 | _do_getpixel_ret
127c0     2D 00 64 FD | 	ret
127c4                 | 
127c4                 | ' 
127c4                 | ' 
127c4                 | ' sub do_getrealfreq
127c4                 | _do_getrealfreq
127c4     00 CA 05 F6 | 	mov	COUNT_, #0
127c8     E8 00 A0 FD | 	call	#pushregs_
127cc     14 F0 07 F1 | 	add	ptra, #20
127d0     4C 00 00 FF 
127d4     24 64 06 F1 | 	add	objptr, ##38948
127d8     32 97 02 FB | 	rdlong	arg03, objptr
127dc     4B 95 02 F6 | 	mov	arg02, arg03
127e0     01 94 66 F0 | 	shl	arg02, #1
127e4     4B 95 02 F1 | 	add	arg02, arg03
127e8     02 94 66 F0 | 	shl	arg02, #2
127ec     03 00 00 FF 
127f0     04 64 86 F1 | 	sub	objptr, ##1540
127f4     32 95 02 F1 | 	add	arg02, objptr
127f8     4A 97 02 FB | 	rdlong	arg03, arg02
127fc                 | ' 
127fc                 | ' numpar=compiledline(lineptr_e).result.uresult
127fc                 | ' if numpar<>1 then print "getrealfreq: "; : printerror(39) : return
127fc     01 96 0E F2 | 	cmp	arg03, #1 wz
12800     49 00 00 FF 
12804     20 64 86 F1 | 	sub	objptr, ##37408
12808     40 00 90 AD |  if_e	jmp	#LR__1570
1280c     00 92 06 F6 | 	mov	arg01, #0
12810     00 75 B1 FD | 	call	#__system___getiolock_0622
12814     3D 93 02 F6 | 	mov	arg01, result1
12818     74 1F B1 FD | 	call	#__system___lockmem
1281c     96 01 00 FF 
12820     21 95 06 F6 | 	mov	arg02, ##@LR__6009
12824     00 92 06 F6 | 	mov	arg01, #0
12828     00 96 06 F6 | 	mov	arg03, #0
1282c     54 2C B1 FD | 	call	#__system___basic_print_string
12830     00 92 06 F6 | 	mov	arg01, #0
12834     DC 74 B1 FD | 	call	#__system___getiolock_0622
12838     3D 01 68 FC | 	wrlong	#0, result1
1283c     27 92 06 F6 | 	mov	arg01, #39
12840     00 94 06 F6 | 	mov	arg02, #0
12844     50 E1 B0 FD | 	call	#_printerror
12848     78 00 90 FD | 	jmp	#LR__1571
1284c                 | LR__1570
1284c     20 AE BF FD | 	call	#_pop
12850     3D 97 02 F6 | 	mov	arg03, result1
12854     04 CE 05 F1 | 	add	fp, #4
12858     E7 96 62 FC | 	wrlong	arg03, fp
1285c     04 CE 05 F1 | 	add	fp, #4
12860     E7 7C 62 FC | 	wrlong	result2, fp
12864     04 CE 05 F1 | 	add	fp, #4
12868     E7 7E 62 FC | 	wrlong	result3, fp
1286c     08 CE 85 F1 | 	sub	fp, #8
12870     E7 92 02 F6 | 	mov	arg01, fp
12874     04 CE 85 F1 | 	sub	fp, #4
12878     D0 AF BF FD | 	call	#_converttoint
1287c     3D 95 02 F6 | 	mov	arg02, result1
12880     03 94 66 F0 | 	shl	arg02, #3
12884     3D 95 82 F1 | 	sub	arg02, result1
12888     02 94 66 F0 | 	shl	arg02, #2
1288c     32 97 02 F6 | 	mov	arg03, objptr
12890     16 00 00 FF 
12894     BC 96 06 F1 | 	add	arg03, ##11452
12898     4B 95 02 F1 | 	add	arg02, arg03
1289c     18 94 06 F1 | 	add	arg02, #24
128a0     4A 97 02 FB | 	rdlong	arg03, arg02
128a4     04 CE 05 F1 | 	add	fp, #4
128a8     E7 96 62 FC | 	wrlong	arg03, fp
128ac     08 CE 05 F1 | 	add	fp, #8
128b0     E7 3C 68 FC | 	wrlong	#30, fp
128b4     08 CE 85 F1 | 	sub	fp, #8
128b8     E7 92 02 F6 | 	mov	arg01, fp
128bc     04 CE 85 F1 | 	sub	fp, #4
128c0     3C AE BF FD | 	call	#_push
128c4                 | LR__1571
128c4     E7 F0 03 F6 | 	mov	ptra, fp
128c8     F2 00 A0 FD | 	call	#popregs_
128cc                 | _do_getrealfreq_ret
128cc     2D 00 64 FD | 	ret
128d0                 | 
128d0                 | ' 
128d0                 | ' 
128d0                 | ' '-------------------- gettime
128d0                 | ' 
128d0                 | ' sub do_gettime
128d0                 | _do_gettime
128d0     02 CA 05 F6 | 	mov	COUNT_, #2
128d4     E8 00 A0 FD | 	call	#pushregs_
128d8     14 F0 07 F1 | 	add	ptra, #20
128dc                 | ' 
128dc                 | ' const asm 
128dc     1A A6 72 FD | 	getct	local01 wc
128e0     1A A8 62 FD | 	getct	local02
128e4                 | ' return hi1, lo1
128e4     54 7D 02 F6 | 	mov	result2, local02
128e8     53 7B 02 F6 | 	mov	result1, local01
128ec     10 CE 05 F1 | 	add	fp, #16
128f0     E7 3A 68 FC | 	wrlong	#29, fp
128f4     08 CE 85 F1 | 	sub	fp, #8
128f8     E7 7C 62 FC | 	wrlong	result2, fp
128fc     04 CE 05 F1 | 	add	fp, #4
12900     E7 7A 62 FC | 	wrlong	result1, fp
12904     04 CE 85 F1 | 	sub	fp, #4
12908     E7 92 02 F6 | 	mov	arg01, fp
1290c     08 CE 85 F1 | 	sub	fp, #8
12910     EC AD BF FD | 	call	#_push
12914     E7 F0 03 F6 | 	mov	ptra, fp
12918     F2 00 A0 FD | 	call	#popregs_
1291c                 | _do_gettime_ret
1291c     2D 00 64 FD | 	ret
12920                 | 
12920                 | ' 
12920                 | ' '-------------------- gosub
12920                 | ' 
12920                 | ' sub do_gosub()
12920                 | _do_gosub
12920     52 00 00 FF 
12924     D8 64 06 F1 | 	add	objptr, ##42200
12928     32 81 02 FB | 	rdlong	_var01, objptr
1292c     01 80 06 F1 | 	add	_var01, #1
12930     32 81 62 FC | 	wrlong	_var01, objptr
12934                 | ' gosubtop+=1
12934                 | ' if compiledline(lineptr_e+1).result_type=token_end then
12934     06 00 00 FF 
12938     B4 64 86 F1 | 	sub	objptr, ##3252
1293c     32 81 02 FB | 	rdlong	_var01, objptr
12940     01 80 06 F1 | 	add	_var01, #1
12944     40 83 02 F6 | 	mov	_var02, _var01
12948     01 82 66 F0 | 	shl	_var02, #1
1294c     40 83 02 F1 | 	add	_var02, _var01
12950     02 82 66 F0 | 	shl	_var02, #2
12954     03 00 00 FF 
12958     04 64 86 F1 | 	sub	objptr, ##1540
1295c     32 83 02 F1 | 	add	_var02, objptr
12960     08 82 06 F1 | 	add	_var02, #8
12964     41 83 02 FB | 	rdlong	_var02, _var02
12968     FE 83 0E F2 | 	cmp	_var02, #510 wz
1296c     49 00 00 FF 
12970     20 64 86 F1 | 	sub	objptr, ##37408
12974     58 00 90 5D |  if_ne	jmp	#LR__1580
12978     52 00 00 FF 
1297c     D8 64 06 F1 | 	add	objptr, ##42200
12980     32 83 02 FB | 	rdlong	_var02, objptr
12984     03 82 66 F0 | 	shl	_var02, #3
12988     03 00 00 FF 
1298c     88 65 86 F1 | 	sub	objptr, ##1928
12990     32 83 02 F1 | 	add	_var02, objptr
12994     03 00 00 FF 
12998     0C 65 06 F1 | 	add	objptr, ##1804
1299c     32 81 02 FB | 	rdlong	_var01, objptr
129a0     41 81 62 FC | 	wrlong	_var01, _var02
129a4     7C 64 06 F1 | 	add	objptr, #124
129a8     32 83 02 FB | 	rdlong	_var02, objptr
129ac     03 82 66 F0 | 	shl	_var02, #3
129b0     03 00 00 FF 
129b4     88 65 86 F1 | 	sub	objptr, ##1928
129b8     32 83 02 F1 | 	add	_var02, objptr
129bc     04 82 06 F1 | 	add	_var02, #4
129c0     41 01 68 FC | 	wrlong	#0, _var02
129c4     4E 00 00 FF 
129c8     50 65 86 F1 | 	sub	objptr, ##40272
129cc     64 00 90 FD | 	jmp	#LR__1581
129d0                 | LR__1580
129d0     52 00 00 FF 
129d4     D8 64 06 F1 | 	add	objptr, ##42200
129d8     32 83 02 FB | 	rdlong	_var02, objptr
129dc     03 82 66 F0 | 	shl	_var02, #3
129e0     03 00 00 FF 
129e4     88 65 86 F1 | 	sub	objptr, ##1928
129e8     32 83 02 F1 | 	add	_var02, objptr
129ec     03 00 00 FF 
129f0     14 65 06 F1 | 	add	objptr, ##1812
129f4     32 81 02 FB | 	rdlong	_var01, objptr
129f8     41 81 62 FC | 	wrlong	_var01, _var02
129fc     74 64 06 F1 | 	add	objptr, #116
12a00     32 83 02 FB | 	rdlong	_var02, objptr
12a04     03 82 66 F0 | 	shl	_var02, #3
12a08     03 00 00 FF 
12a0c     88 65 86 F1 | 	sub	objptr, ##1928
12a10     32 83 02 F1 | 	add	_var02, objptr
12a14     02 00 00 FF 
12a18     2C 65 86 F1 | 	sub	objptr, ##1324
12a1c     32 81 02 FB | 	rdlong	_var01, objptr
12a20     4C 00 00 FF 
12a24     24 64 86 F1 | 	sub	objptr, ##38948
12a28     02 80 06 F1 | 	add	_var01, #2
12a2c     04 82 06 F1 | 	add	_var02, #4
12a30     41 81 62 FC | 	wrlong	_var01, _var02
12a34                 | LR__1581
12a34                 | _do_gosub_ret
12a34     2D 00 64 FD | 	ret
12a38                 | 
12a38                 | ' 
12a38                 | ' '--------------------- goto
12a38                 | ' 
12a38                 | ' '------- fast goto
12a38                 | ' 
12a38                 | ' sub do_fast_goto
12a38                 | _do_fast_goto
12a38     02 CA 05 F6 | 	mov	COUNT_, #2
12a3c     E8 00 A0 FD | 	call	#pushregs_
12a40                 | _do_fast_goto_enter
12a40     4C 00 00 FF 
12a44     24 64 06 F1 | 	add	objptr, ##38948
12a48     32 93 02 FB | 	rdlong	arg01, objptr
12a4c     49 A7 02 F6 | 	mov	local01, arg01
12a50     01 A6 66 F0 | 	shl	local01, #1
12a54     49 A7 02 F1 | 	add	local01, arg01
12a58     02 A6 66 F0 | 	shl	local01, #2
12a5c     03 00 00 FF 
12a60     04 64 86 F1 | 	sub	objptr, ##1540
12a64     32 A7 02 F1 | 	add	local01, objptr
12a68     53 A9 02 FB | 	rdlong	local02, local01
12a6c     54 93 02 F6 | 	mov	arg01, local02
12a70     49 00 00 FF 
12a74     20 64 86 F1 | 	sub	objptr, ##37408
12a78     E4 E1 B0 FD | 	call	#_pslpeek
12a7c     3D 93 02 F6 | 	mov	arg01, result1
12a80                 | ' 
12a80                 | ' testptr=compiledline(lineptr_e).result.uresult
12a80                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
12a80                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
12a80     4C 00 00 FF 
12a84     24 64 06 F1 | 	add	objptr, ##38948
12a88     32 7B 02 FB | 	rdlong	result1, objptr
12a8c     3D A7 02 F6 | 	mov	local01, result1
12a90     01 A6 66 F0 | 	shl	local01, #1
12a94     3D A7 02 F1 | 	add	local01, result1
12a98     02 A6 66 F0 | 	shl	local01, #2
12a9c     03 00 00 FF 
12aa0     04 64 86 F1 | 	sub	objptr, ##1540
12aa4     32 A7 02 F1 | 	add	local01, objptr
12aa8     04 A6 06 F1 | 	add	local01, #4
12aac     53 A7 02 FB | 	rdlong	local01, local01
12ab0     53 93 0A F2 | 	cmp	arg01, local01 wz
12ab4     49 00 00 FF 
12ab8     20 64 86 F1 | 	sub	objptr, ##37408
12abc     58 00 90 5D |  if_ne	jmp	#LR__1590
12ac0     52 00 00 FF 
12ac4     5C 64 06 F1 | 	add	objptr, ##42076
12ac8     32 A9 62 FC | 	wrlong	local02, objptr
12acc     06 00 00 FF 
12ad0     3C 64 86 F1 | 	sub	objptr, ##3132
12ad4     32 A9 02 FB | 	rdlong	local02, objptr
12ad8     01 A8 86 F1 | 	sub	local02, #1
12adc     04 64 06 F1 | 	add	objptr, #4
12ae0     32 A9 62 FC | 	wrlong	local02, objptr
12ae4                 | '   runptr=testptr
12ae4                 | '   lineptr_e=lineptr-1
12ae4                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
12ae4     06 00 00 FF 
12ae8     84 64 06 F1 | 	add	objptr, ##3204
12aec     32 A9 02 FB | 	rdlong	local02, objptr
12af0     52 00 00 FF 
12af4     A8 64 86 F1 | 	sub	objptr, ##42152
12af8     FF FF 3F FF 
12afc     FF A9 0E F2 | 	cmp	local02, ##2147483647 wz
12b00     52 00 00 AF 
12b04     A8 64 06 A1 |  if_e	add	objptr, ##42152
12b08     32 01 68 AC |  if_e	wrlong	#0, objptr
12b0c     52 00 00 AF 
12b10     A8 64 86 A1 |  if_e	sub	objptr, ##42152
12b14     04 00 90 FD | 	jmp	#LR__1591
12b18                 | LR__1590
12b18     0C 00 B0 FD | 	call	#_do_find_goto
12b1c                 | LR__1591
12b1c     E7 F0 03 F6 | 	mov	ptra, fp
12b20     F2 00 A0 FD | 	call	#popregs_
12b24                 | _do_fast_goto_ret
12b24     2D 00 64 FD | 	ret
12b28                 | 
12b28                 | ' 
12b28                 | ' '------- find goto  
12b28                 | ' 
12b28                 | ' sub do_find_goto
12b28                 | _do_find_goto
12b28     06 CA 05 F6 | 	mov	COUNT_, #6
12b2c     E8 00 A0 FD | 	call	#pushregs_
12b30     24 F0 07 F1 | 	add	ptra, #36
12b34                 | _do_find_goto_enter
12b34     4C 00 00 FF 
12b38     24 64 06 F1 | 	add	objptr, ##38948
12b3c     32 A7 02 FB | 	rdlong	local01, objptr
12b40     53 A9 02 F6 | 	mov	local02, local01
12b44     01 A8 66 F0 | 	shl	local02, #1
12b48     53 A9 02 F1 | 	add	local02, local01
12b4c     02 A8 66 F0 | 	shl	local02, #2
12b50     03 00 00 FF 
12b54     04 64 86 F1 | 	sub	objptr, ##1540
12b58     32 AB 02 F6 | 	mov	local03, objptr
12b5c     32 A9 02 F1 | 	add	local02, objptr
12b60     04 A8 06 F1 | 	add	local02, #4
12b64     54 AD 02 FB | 	rdlong	local04, local02
12b68     03 00 00 FF 
12b6c     0C 64 06 F1 | 	add	objptr, ##1548
12b70     32 AF 02 FB | 	rdlong	local05, objptr
12b74                 | ' 
12b74                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
12b74                 | ' gotoptr=programstart
12b74                 | ' do
12b74     40 00 00 FF 
12b78     60 65 86 F1 | 	sub	objptr, ##33120
12b7c                 | LR__1600
12b7c     E7 92 02 F6 | 	mov	arg01, fp
12b80     0C 92 06 F1 | 	add	arg01, #12
12b84     57 95 02 F6 | 	mov	arg02, local05
12b88     18 96 06 F6 | 	mov	arg03, #24
12b8c     C8 0B B1 FD | 	call	#_psram_spin2_read1
12b90                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12b90                 | '   if gotoheader(0)<>$FFFFFFFF then
12b90     0C CE 05 F1 | 	add	fp, #12
12b94     E7 A8 02 FB | 	rdlong	local02, fp
12b98     0C CE 85 F1 | 	sub	fp, #12
12b9c     FF FF 7F FF 
12ba0     FF A9 0E F2 | 	cmp	local02, ##-1 wz
12ba4     57 B1 02 56 |  if_ne	mov	local06, local05
12ba8     20 CE 05 51 |  if_ne	add	fp, #32
12bac     E7 AE 02 5B |  if_ne	rdlong	local05, fp
12bb0     20 CE 85 51 |  if_ne	sub	fp, #32
12bb4     20 CE 05 F1 | 	add	fp, #32
12bb8     E7 A8 02 FB | 	rdlong	local02, fp
12bbc     20 CE 85 F1 | 	sub	fp, #32
12bc0     FF FF 3F FF 
12bc4     FF A9 0E F2 | 	cmp	local02, ##2147483647 wz
12bc8     0C CE 05 51 |  if_ne	add	fp, #12
12bcc     E7 A6 02 5B |  if_ne	rdlong	local01, fp
12bd0     0C CE 85 51 |  if_ne	sub	fp, #12
12bd4     FF FF 7F 5F 
12bd8     FF A7 0E 52 |  if_ne	cmp	local01, ##-1 wz
12bdc     0C CE 05 51 |  if_ne	add	fp, #12
12be0     53 AB 02 56 |  if_ne	mov	local03, local01
12be4     0C CE 85 51 |  if_ne	sub	fp, #12
12be8     56 AB 0A 52 |  if_ne	cmp	local03, local04 wz
12bec     8C FF 9F 5D |  if_ne	jmp	#LR__1600
12bf0     0B 00 00 FF 
12bf4     CC 64 86 F1 | 	sub	objptr, ##5836
12bf8                 | ' 
12bf8                 | ' if gotoheader(0)=gotoline then
12bf8     0C CE 05 F1 | 	add	fp, #12
12bfc     E7 AE 02 FB | 	rdlong	local05, fp
12c00     0C CE 85 F1 | 	sub	fp, #12
12c04     56 AF 0A F2 | 	cmp	local05, local04 wz
12c08     CC 00 90 5D |  if_ne	jmp	#LR__1601
12c0c     4C 00 00 FF 
12c10     24 64 06 F1 | 	add	objptr, ##38948
12c14     32 A7 02 FB | 	rdlong	local01, objptr
12c18     53 A9 02 F6 | 	mov	local02, local01
12c1c     01 A8 66 F0 | 	shl	local02, #1
12c20     53 A9 02 F1 | 	add	local02, local01
12c24     02 A8 66 F0 | 	shl	local02, #2
12c28     03 00 00 FF 
12c2c     04 64 86 F1 | 	sub	objptr, ##1540
12c30     32 A9 02 F1 | 	add	local02, objptr
12c34     54 B1 62 FC | 	wrlong	local06, local02
12c38     03 00 00 FF 
12c3c     04 64 06 F1 | 	add	objptr, ##1540
12c40     32 A7 02 FB | 	rdlong	local01, objptr
12c44     53 A9 02 F6 | 	mov	local02, local01
12c48     01 A8 66 F0 | 	shl	local02, #1
12c4c     53 A9 02 F1 | 	add	local02, local01
12c50     02 A8 66 F0 | 	shl	local02, #2
12c54     03 00 00 FF 
12c58     04 64 86 F1 | 	sub	objptr, ##1540
12c5c     32 A9 02 F1 | 	add	local02, objptr
12c60     08 A8 06 F1 | 	add	local02, #8
12c64     54 9D 68 FC | 	wrlong	#78, local02
12c68     03 00 00 FF 
12c6c     04 64 06 F1 | 	add	objptr, ##1540
12c70     32 B1 02 FB | 	rdlong	local06, objptr
12c74     58 93 02 F6 | 	mov	arg01, local06
12c78     01 92 66 F0 | 	shl	arg01, #1
12c7c     58 93 02 F1 | 	add	arg01, local06
12c80     02 92 66 F0 | 	shl	arg01, #2
12c84     03 00 00 FF 
12c88     04 64 86 F1 | 	sub	objptr, ##1540
12c8c     32 93 02 F1 | 	add	arg01, objptr
12c90     09 00 00 FF 
12c94     44 64 06 F1 | 	add	objptr, ##4676
12c98     32 95 02 FB | 	rdlong	arg02, objptr
12c9c     02 AA 06 F6 | 	mov	local03, #2
12ca0     58 AB 02 F1 | 	add	local03, local06
12ca4     0B 00 00 FF 
12ca8     5C 64 86 F1 | 	sub	objptr, ##5724
12cac     32 97 02 FB | 	rdlong	arg03, objptr
12cb0     4B AB 02 FD | 	qmul	local03, arg03
12cb4     3B 00 00 FF 
12cb8     3C 65 86 F1 | 	sub	objptr, ##30524
12cbc     18 B0 62 FD | 	getqx	local06
12cc0     58 95 02 F1 | 	add	arg02, local06
12cc4     2C 0B B1 FD | 	call	#_psram_spin2_write
12cc8     0B 00 00 FF 
12ccc     CC 64 86 F1 | 	sub	objptr, ##5836
12cd0     64 FD BF FD | 	call	#_do_fast_goto
12cd4     0C 00 90 FD | 	jmp	#LR__1602
12cd8                 | LR__1601
12cd8     26 92 06 F6 | 	mov	arg01, #38
12cdc     00 94 06 F6 | 	mov	arg02, #0
12ce0     B4 DC B0 FD | 	call	#_printerror
12ce4                 | LR__1602
12ce4     E7 F0 03 F6 | 	mov	ptra, fp
12ce8     F2 00 A0 FD | 	call	#popregs_
12cec                 | _do_find_goto_ret
12cec     2D 00 64 FD | 	ret
12cf0                 | 
12cf0                 | ' 
12cf0                 | ' '------- slow goto  
12cf0                 | ' 
12cf0                 | ' sub do_slow_goto
12cf0                 | _do_slow_goto
12cf0     05 CA 05 F6 | 	mov	COUNT_, #5
12cf4     E8 00 A0 FD | 	call	#pushregs_
12cf8     30 F0 07 F1 | 	add	ptra, #48
12cfc     70 A9 BF FD | 	call	#_pop
12d00     3F A7 02 F6 | 	mov	local01, result3
12d04     24 CE 05 F1 | 	add	fp, #36
12d08     E7 7A 62 FC | 	wrlong	result1, fp
12d0c     04 CE 05 F1 | 	add	fp, #4
12d10     E7 7C 62 FC | 	wrlong	result2, fp
12d14     04 CE 05 F1 | 	add	fp, #4
12d18     E7 A6 62 FC | 	wrlong	local01, fp
12d1c     08 CE 85 F1 | 	sub	fp, #8
12d20     E7 92 02 F6 | 	mov	arg01, fp
12d24     24 CE 85 F1 | 	sub	fp, #36
12d28     20 AB BF FD | 	call	#_converttoint
12d2c     3D A9 02 F6 | 	mov	local02, result1
12d30     4C 00 00 FF 
12d34     2C 64 06 F1 | 	add	objptr, ##38956
12d38     32 AB 02 FB | 	rdlong	local03, objptr
12d3c                 | ' 
12d3c                 | ' t1=pop() : gotoline=converttoint(t1)
12d3c                 | ' gotoptr=programstart
12d3c                 | ' do
12d3c     40 00 00 FF 
12d40     60 65 86 F1 | 	sub	objptr, ##33120
12d44                 | LR__1610
12d44     E7 92 02 F6 | 	mov	arg01, fp
12d48     0C 92 06 F1 | 	add	arg01, #12
12d4c     55 95 02 F6 | 	mov	arg02, local03
12d50     18 96 06 F6 | 	mov	arg03, #24
12d54     00 0A B1 FD | 	call	#_psram_spin2_read1
12d58                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12d58                 | '   if gotoheader(0)<>$FFFFFFFF then
12d58     0C CE 05 F1 | 	add	fp, #12
12d5c     E7 96 02 FB | 	rdlong	arg03, fp
12d60     0C CE 85 F1 | 	sub	fp, #12
12d64     FF FF 7F FF 
12d68     FF 97 0E F2 | 	cmp	arg03, ##-1 wz
12d6c     55 AD 02 56 |  if_ne	mov	local04, local03
12d70     20 CE 05 51 |  if_ne	add	fp, #32
12d74     E7 AA 02 5B |  if_ne	rdlong	local03, fp
12d78     20 CE 85 51 |  if_ne	sub	fp, #32
12d7c     20 CE 05 F1 | 	add	fp, #32
12d80     E7 96 02 FB | 	rdlong	arg03, fp
12d84     20 CE 85 F1 | 	sub	fp, #32
12d88     FF FF 3F FF 
12d8c     FF 97 0E F2 | 	cmp	arg03, ##2147483647 wz
12d90     0C CE 05 51 |  if_ne	add	fp, #12
12d94     E7 A6 02 5B |  if_ne	rdlong	local01, fp
12d98     0C CE 85 51 |  if_ne	sub	fp, #12
12d9c     FF FF 7F 5F 
12da0     FF A7 0E 52 |  if_ne	cmp	local01, ##-1 wz
12da4     0C CE 05 51 |  if_ne	add	fp, #12
12da8     53 AF 02 56 |  if_ne	mov	local05, local01
12dac     0C CE 85 51 |  if_ne	sub	fp, #12
12db0     54 AF 0A 52 |  if_ne	cmp	local05, local02 wz
12db4     8C FF 9F 5D |  if_ne	jmp	#LR__1610
12db8     0B 00 00 FF 
12dbc     CC 64 86 F1 | 	sub	objptr, ##5836
12dc0                 | ' if gotoheader(0)=gotoline then  
12dc0     0C CE 05 F1 | 	add	fp, #12
12dc4     E7 AE 02 FB | 	rdlong	local05, fp
12dc8     0C CE 85 F1 | 	sub	fp, #12
12dcc     54 AF 0A F2 | 	cmp	local05, local02 wz
12dd0     54 00 90 5D |  if_ne	jmp	#LR__1611
12dd4     52 00 00 FF 
12dd8     5C 64 06 F1 | 	add	objptr, ##42076
12ddc     32 AD 62 FC | 	wrlong	local04, objptr
12de0     06 00 00 FF 
12de4     3C 64 86 F1 | 	sub	objptr, ##3132
12de8     32 AF 02 FB | 	rdlong	local05, objptr
12dec     01 AE 86 F1 | 	sub	local05, #1
12df0     04 64 06 F1 | 	add	objptr, #4
12df4     32 AF 62 FC | 	wrlong	local05, objptr
12df8                 | '    runptr=oldgotoptr
12df8                 | '    lineptr_e=lineptr-1
12df8                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
12df8     06 00 00 FF 
12dfc     84 64 06 F1 | 	add	objptr, ##3204
12e00     32 AF 02 FB | 	rdlong	local05, objptr
12e04     52 00 00 FF 
12e08     A8 64 86 F1 | 	sub	objptr, ##42152
12e0c     FF FF 3F FF 
12e10     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
12e14     52 00 00 AF 
12e18     A8 64 06 A1 |  if_e	add	objptr, ##42152
12e1c     32 01 68 AC |  if_e	wrlong	#0, objptr
12e20     52 00 00 AF 
12e24     A8 64 86 A1 |  if_e	sub	objptr, ##42152
12e28                 | LR__1611
12e28     E7 F0 03 F6 | 	mov	ptra, fp
12e2c     F2 00 A0 FD | 	call	#popregs_
12e30                 | _do_slow_goto_ret
12e30     2D 00 64 FD | 	ret
12e34                 | 
12e34                 | ' 
12e34                 | ' ' ----------------  hex$
12e34                 | ' 
12e34                 | ' sub do_hex
12e34                 | _do_hex
12e34     02 CA 05 F6 | 	mov	COUNT_, #2
12e38     E8 00 A0 FD | 	call	#pushregs_
12e3c     18 F0 07 F1 | 	add	ptra, #24
12e40     4C 00 00 FF 
12e44     24 64 06 F1 | 	add	objptr, ##38948
12e48     32 97 02 FB | 	rdlong	arg03, objptr
12e4c     4B 95 02 F6 | 	mov	arg02, arg03
12e50     01 94 66 F0 | 	shl	arg02, #1
12e54     4B 95 02 F1 | 	add	arg02, arg03
12e58     02 94 66 F0 | 	shl	arg02, #2
12e5c     03 00 00 FF 
12e60     04 64 86 F1 | 	sub	objptr, ##1540
12e64     32 95 02 F1 | 	add	arg02, objptr
12e68     4A A7 02 FB | 	rdlong	local01, arg02
12e6c                 | ' 
12e6c                 | ' numpar=compiledline(lineptr_e).result.uresult
12e6c                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
12e6c     03 A6 16 F2 | 	cmp	local01, #3 wc
12e70     49 00 00 FF 
12e74     20 64 86 F1 | 	sub	objptr, ##37408
12e78     00 A6 0E C2 |  if_b	cmp	local01, #0 wz
12e7c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1620
12e80     00 92 06 F6 | 	mov	arg01, #0
12e84     8C 6E B1 FD | 	call	#__system___getiolock_0622
12e88     3D 93 02 F6 | 	mov	arg01, result1
12e8c     00 19 B1 FD | 	call	#__system___lockmem
12e90     96 01 00 FF 
12e94     2F 95 06 F6 | 	mov	arg02, ##@LR__6010
12e98     00 92 06 F6 | 	mov	arg01, #0
12e9c     00 96 06 F6 | 	mov	arg03, #0
12ea0     E0 25 B1 FD | 	call	#__system___basic_print_string
12ea4     00 92 06 F6 | 	mov	arg01, #0
12ea8     68 6E B1 FD | 	call	#__system___getiolock_0622
12eac     3D 01 68 FC | 	wrlong	#0, result1
12eb0     27 92 06 F6 | 	mov	arg01, #39
12eb4     00 94 06 F6 | 	mov	arg02, #0
12eb8     DC DA B0 FD | 	call	#_printerror
12ebc     8C 00 90 FD | 	jmp	#LR__1623
12ec0                 | LR__1620
12ec0                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
12ec0     02 A6 0E F2 | 	cmp	local01, #2 wz
12ec4     30 00 90 5D |  if_ne	jmp	#LR__1621
12ec8     A4 A7 BF FD | 	call	#_pop
12ecc     3F A7 02 F6 | 	mov	local01, result3
12ed0     E7 7A 62 FC | 	wrlong	result1, fp
12ed4     04 CE 05 F1 | 	add	fp, #4
12ed8     E7 7C 62 FC | 	wrlong	result2, fp
12edc     04 CE 05 F1 | 	add	fp, #4
12ee0     E7 A6 62 FC | 	wrlong	local01, fp
12ee4     08 CE 85 F1 | 	sub	fp, #8
12ee8     E7 92 02 F6 | 	mov	arg01, fp
12eec     5C A9 BF FD | 	call	#_converttoint
12ef0     3D A9 02 F6 | 	mov	local02, result1
12ef4     04 00 90 FD | 	jmp	#LR__1622
12ef8                 | LR__1621
12ef8     08 A8 06 F6 | 	mov	local02, #8
12efc                 | LR__1622
12efc     70 A7 BF FD | 	call	#_pop
12f00     3F A7 02 F6 | 	mov	local01, result3
12f04     E7 7A 62 FC | 	wrlong	result1, fp
12f08     04 CE 05 F1 | 	add	fp, #4
12f0c     E7 7C 62 FC | 	wrlong	result2, fp
12f10     04 CE 05 F1 | 	add	fp, #4
12f14     E7 A6 62 FC | 	wrlong	local01, fp
12f18     08 CE 85 F1 | 	sub	fp, #8
12f1c     E7 92 02 F6 | 	mov	arg01, fp
12f20     28 A9 BF FD | 	call	#_converttoint
12f24     3D 93 02 F6 | 	mov	arg01, result1
12f28     54 95 02 F6 | 	mov	arg02, local02
12f2c     10 96 06 F6 | 	mov	arg03, #16
12f30     58 33 B1 FD | 	call	#__system__Number_S
12f34     E7 7A 62 FC | 	wrlong	result1, fp
12f38     08 CE 05 F1 | 	add	fp, #8
12f3c     E7 3E 68 FC | 	wrlong	#31, fp
12f40     08 CE 85 F1 | 	sub	fp, #8
12f44     E7 92 02 F6 | 	mov	arg01, fp
12f48     B4 A7 BF FD | 	call	#_push
12f4c                 | LR__1623
12f4c     E7 F0 03 F6 | 	mov	ptra, fp
12f50     F2 00 A0 FD | 	call	#popregs_
12f54                 | _do_hex_ret
12f54     2D 00 64 FD | 	ret
12f58                 | 
12f58                 | ' 
12f58                 | ' ' ----------------  if
12f58                 | ' 
12f58                 | ' sub do_if
12f58                 | _do_if
12f58     05 CA 05 F6 | 	mov	COUNT_, #5
12f5c     E8 00 A0 FD | 	call	#pushregs_
12f60     0C A7 BF FD | 	call	#_pop
12f64     3D A7 0A F6 | 	mov	local01, result1 wz
12f68     3E A9 02 F6 | 	mov	local02, result2
12f6c     3F AB 02 F6 | 	mov	local03, result3
12f70                 | ' t1=pop()
12f70                 | ' ' if uresult=0, jump over else
12f70                 | ' if t1.result.uresult = 0 then 
12f70     BC 00 90 5D |  if_ne	jmp	#LR__1632
12f74                 | '   for i=lineptr_e to lineptr-1
12f74     4C 00 00 FF 
12f78     24 64 06 F1 | 	add	objptr, ##38948
12f7c     32 AD 02 FB | 	rdlong	local04, objptr
12f80     04 64 86 F1 | 	sub	objptr, #4
12f84     32 AF 02 FB | 	rdlong	local05, objptr
12f88     4C 00 00 FF 
12f8c     20 64 86 F1 | 	sub	objptr, ##38944
12f90                 | LR__1630
12f90     57 AD 52 F2 | 	cmps	local04, local05 wc
12f94     78 00 90 3D |  if_ae	jmp	#LR__1631
12f98     56 7F 02 F6 | 	mov	result3, local04
12f9c     01 7E 66 F0 | 	shl	result3, #1
12fa0     56 7F 02 F1 | 	add	result3, local04
12fa4     02 7E 66 F0 | 	shl	result3, #2
12fa8     49 00 00 FF 
12fac     20 64 06 F1 | 	add	objptr, ##37408
12fb0     32 7F 02 F1 | 	add	result3, objptr
12fb4     3F A7 02 FB | 	rdlong	local01, result3
12fb8     04 7E 06 F1 | 	add	result3, #4
12fbc     3F 7D 02 FB | 	rdlong	result2, result3
12fc0     56 7F 02 F6 | 	mov	result3, local04
12fc4     01 7E 66 F0 | 	shl	result3, #1
12fc8     56 7F 02 F1 | 	add	result3, local04
12fcc     02 7E 66 F0 | 	shl	result3, #2
12fd0     32 7F 02 F1 | 	add	result3, objptr
12fd4     08 7E 06 F1 | 	add	result3, #8
12fd8     3F 7F 02 FB | 	rdlong	result3, result3
12fdc     3E A9 02 F6 | 	mov	local02, result2
12fe0     3F AB 02 F6 | 	mov	local03, result3
12fe4                 | '     t1=compiledline(i)
12fe4                 | '     if t1.result_type=token_else then lineptr_e=i : return
12fe4     5A AA 0E F2 | 	cmp	local03, #90 wz
12fe8     49 00 00 FF 
12fec     20 64 86 F1 | 	sub	objptr, ##37408
12ff0     4C 00 00 AF 
12ff4     24 64 06 A1 |  if_e	add	objptr, ##38948
12ff8     32 AD 62 AC |  if_e	wrlong	local04, objptr
12ffc     4C 00 00 AF 
13000     24 64 86 A1 |  if_e	sub	objptr, ##38948
13004     28 00 90 AD |  if_e	jmp	#LR__1633
13008     01 AC 06 F1 | 	add	local04, #1
1300c     80 FF 9F FD | 	jmp	#LR__1630
13010                 | LR__1631
13010     4C 00 00 FF 
13014     20 64 06 F1 | 	add	objptr, ##38944
13018     32 AF 02 FB | 	rdlong	local05, objptr
1301c     01 AE 86 F1 | 	sub	local05, #1
13020     04 64 06 F1 | 	add	objptr, #4
13024     32 AF 62 FC | 	wrlong	local05, objptr
13028     4C 00 00 FF 
1302c     24 64 86 F1 | 	sub	objptr, ##38948
13030                 | LR__1632
13030                 | LR__1633
13030     E7 F0 03 F6 | 	mov	ptra, fp
13034     F2 00 A0 FD | 	call	#popregs_
13038                 | _do_if_ret
13038     2D 00 64 FD | 	ret
1303c                 | 
1303c                 | ' 
1303c                 | ' ' ----------------  inkey$
1303c                 | ' 
1303c                 | ' sub do_inkey
1303c                 | _do_inkey
1303c     02 CA 05 F6 | 	mov	COUNT_, #2
13040     E8 00 A0 FD | 	call	#pushregs_
13044     0C F0 07 F1 | 	add	ptra, #12
13048     30 0B B1 FD | 	call	#_usbnew_spin2_get_key
1304c     47 00 00 FF 
13050     18 64 06 F1 | 	add	objptr, ##36376
13054     32 7B 62 FC | 	wrlong	result1, objptr
13058                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
13058     47 00 00 FF 
1305c     18 64 86 F1 | 	sub	objptr, ##36376
13060     00 7A 0E F2 | 	cmp	result1, #0 wz
13064     A0 00 90 AD |  if_e	jmp	#LR__1641
13068     47 00 00 FF 
1306c     18 64 06 F1 | 	add	objptr, ##36376
13070     32 A3 02 FB | 	rdlong	arg09, objptr
13074     47 00 00 FF 
13078     18 64 86 F1 | 	sub	objptr, ##36376
1307c     00 00 40 FF 
13080     00 A2 16 F2 | 	cmp	arg09, ##-2147483648 wc
13084     47 00 00 CF 
13088     18 64 06 C1 |  if_b	add	objptr, ##36376
1308c     32 A7 02 CB |  if_b	rdlong	local01, objptr
13090     47 00 00 CF 
13094     18 64 86 C1 |  if_b	sub	objptr, ##36376
13098     53 A7 E2 C8 |  if_b	getbyte	local01, local01, #0
1309c     E0 A6 16 C2 |  if_b	cmp	local01, #224 wc
130a0     64 00 90 3D |  if_ae	jmp	#LR__1641
130a4                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len) 
130a4     52 00 00 FF 
130a8     E0 64 06 F1 | 	add	objptr, ##42208
130ac     32 A3 02 FB | 	rdlong	arg09, objptr
130b0     52 00 00 FF 
130b4     E0 64 86 F1 | 	sub	objptr, ##42208
130b8     01 A2 0E F2 | 	cmp	arg09, #1 wz
130bc     48 00 90 5D |  if_ne	jmp	#LR__1640
130c0     54 00 00 FF 
130c4     80 64 06 F1 | 	add	objptr, ##43136
130c8     32 95 02 FB | 	rdlong	arg02, objptr
130cc     04 64 86 F1 | 	sub	objptr, #4
130d0     32 9B 02 FB | 	rdlong	arg05, objptr
130d4     07 92 06 F6 | 	mov	arg01, #7
130d8     56 00 00 FF 
130dc     44 96 06 F6 | 	mov	arg03, ##44100
130e0     0C 98 C6 F9 | 	decod	arg04, #12
130e4     01 9C 66 F6 | 	neg	arg06, #1
130e8     01 9E 66 F6 | 	neg	arg07, #1
130ec     01 A0 66 F6 | 	neg	arg08, #1
130f0     01 A2 66 F6 | 	neg	arg09, #1
130f4     48 00 00 FF 
130f8     B0 65 86 F1 | 	sub	objptr, ##37296
130fc     8C 0E B1 FD | 	call	#_Audio2_004_spin2_play
13100     0B 00 00 FF 
13104     CC 64 86 F1 | 	sub	objptr, ##5836
13108                 | LR__1640
13108                 | LR__1641
13108                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
13108     47 00 00 FF 
1310c     18 64 06 F1 | 	add	objptr, ##36376
13110     32 A3 0A FB | 	rdlong	arg09, objptr wz
13114     47 00 00 FF 
13118     18 64 86 F1 | 	sub	objptr, ##36376
1311c     D4 01 90 AD |  if_e	jmp	#LR__1650
13120     47 00 00 FF 
13124     18 64 06 F1 | 	add	objptr, ##36376
13128     32 A3 02 FB | 	rdlong	arg09, objptr
1312c     47 00 00 FF 
13130     18 64 86 F1 | 	sub	objptr, ##36376
13134     00 00 40 FF 
13138     00 A2 16 F2 | 	cmp	arg09, ##-2147483648 wc
1313c     47 00 00 CF 
13140     18 64 06 C1 |  if_b	add	objptr, ##36376
13144     32 A7 02 CB |  if_b	rdlong	local01, objptr
13148     47 00 00 CF 
1314c     18 64 86 C1 |  if_b	sub	objptr, ##36376
13150     53 A7 E2 C8 |  if_b	getbyte	local01, local01, #0
13154     E0 A6 16 C2 |  if_b	cmp	local01, #224 wc
13158     98 01 90 3D |  if_ae	jmp	#LR__1650
1315c                 | '   if leds and 2 = 2 then 
1315c     54 00 00 FF 
13160     BC 64 06 F1 | 	add	objptr, ##43196
13164     32 A7 0A FB | 	rdlong	local01, objptr wz
13168     54 00 00 FF 
1316c     BC 64 86 F1 | 	sub	objptr, ##43196
13170     58 01 90 AD |  if_e	jmp	#LR__1649
13174                 | '     if key>96 andalso key<123 then
13174     47 00 00 FF 
13178     18 64 06 F1 | 	add	objptr, ##36376
1317c     32 A7 02 FB | 	rdlong	local01, objptr
13180     47 00 00 FF 
13184     18 64 86 F1 | 	sub	objptr, ##36376
13188     61 A6 16 F2 | 	cmp	local01, #97 wc
1318c     3C 00 90 CD |  if_b	jmp	#LR__1642
13190     47 00 00 FF 
13194     18 64 06 F1 | 	add	objptr, ##36376
13198     32 A7 02 FB | 	rdlong	local01, objptr
1319c     47 00 00 FF 
131a0     18 64 86 F1 | 	sub	objptr, ##36376
131a4     7B A6 16 F2 | 	cmp	local01, #123 wc
131a8     20 00 90 3D |  if_ae	jmp	#LR__1642
131ac     47 00 00 FF 
131b0     18 64 06 F1 | 	add	objptr, ##36376
131b4     32 A7 02 FB | 	rdlong	local01, objptr
131b8     20 A6 86 F1 | 	sub	local01, #32
131bc     32 A7 62 FC | 	wrlong	local01, objptr
131c0     47 00 00 FF 
131c4     18 64 86 F1 | 	sub	objptr, ##36376
131c8     00 01 90 FD | 	jmp	#LR__1648
131cc                 | LR__1642
131cc     47 00 00 FF 
131d0     18 64 06 F1 | 	add	objptr, ##36376
131d4     32 A7 02 FB | 	rdlong	local01, objptr
131d8     47 00 00 FF 
131dc     18 64 86 F1 | 	sub	objptr, ##36376
131e0     41 A6 16 F2 | 	cmp	local01, #65 wc
131e4     3C 00 90 CD |  if_b	jmp	#LR__1643
131e8     47 00 00 FF 
131ec     18 64 06 F1 | 	add	objptr, ##36376
131f0     32 A7 02 FB | 	rdlong	local01, objptr
131f4     47 00 00 FF 
131f8     18 64 86 F1 | 	sub	objptr, ##36376
131fc     5B A6 16 F2 | 	cmp	local01, #91 wc
13200     20 00 90 3D |  if_ae	jmp	#LR__1643
13204     47 00 00 FF 
13208     18 64 06 F1 | 	add	objptr, ##36376
1320c     32 A7 02 FB | 	rdlong	local01, objptr
13210     20 A6 06 F1 | 	add	local01, #32
13214     32 A7 62 FC | 	wrlong	local01, objptr
13218     47 00 00 FF 
1321c     18 64 86 F1 | 	sub	objptr, ##36376
13220     A8 00 90 FD | 	jmp	#LR__1647
13224                 | LR__1643
13224     47 00 00 FF 
13228     18 64 06 F1 | 	add	objptr, ##36376
1322c     32 A7 02 FB | 	rdlong	local01, objptr
13230     47 00 00 FF 
13234     18 64 86 F1 | 	sub	objptr, ##36376
13238     17 A6 16 F2 | 	cmp	local01, #23 wc
1323c     3C 00 90 CD |  if_b	jmp	#LR__1644
13240     47 00 00 FF 
13244     18 64 06 F1 | 	add	objptr, ##36376
13248     32 A7 02 FB | 	rdlong	local01, objptr
1324c     47 00 00 FF 
13250     18 64 86 F1 | 	sub	objptr, ##36376
13254     20 A6 16 F2 | 	cmp	local01, #32 wc
13258     20 00 90 3D |  if_ae	jmp	#LR__1644
1325c     47 00 00 FF 
13260     18 64 06 F1 | 	add	objptr, ##36376
13264     32 A7 02 FB | 	rdlong	local01, objptr
13268     09 A6 86 F1 | 	sub	local01, #9
1326c     32 A7 62 FC | 	wrlong	local01, objptr
13270     47 00 00 FF 
13274     18 64 86 F1 | 	sub	objptr, ##36376
13278     50 00 90 FD | 	jmp	#LR__1646
1327c                 | LR__1644
1327c     47 00 00 FF 
13280     18 64 06 F1 | 	add	objptr, ##36376
13284     32 A9 02 FB | 	rdlong	local02, objptr
13288     47 00 00 FF 
1328c     18 64 86 F1 | 	sub	objptr, ##36376
13290     0E A8 16 F2 | 	cmp	local02, #14 wc
13294     34 00 90 CD |  if_b	jmp	#LR__1645
13298     47 00 00 FF 
1329c     18 64 06 F1 | 	add	objptr, ##36376
132a0     32 A7 02 FB | 	rdlong	local01, objptr
132a4     47 00 00 FF 
132a8     18 64 86 F1 | 	sub	objptr, ##36376
132ac     17 A6 16 F2 | 	cmp	local01, #23 wc
132b0     54 00 00 CF 
132b4     C0 64 06 C1 |  if_b	add	objptr, ##43200
132b8     32 A9 02 CB |  if_b	rdlong	local02, objptr
132bc     27 A8 06 C1 |  if_b	add	local02, #39
132c0     32 A9 62 CC |  if_b	wrlong	local02, objptr
132c4     54 00 00 CF 
132c8     C0 64 86 C1 |  if_b	sub	objptr, ##43200
132cc                 | LR__1645
132cc                 | LR__1646
132cc                 | LR__1647
132cc                 | LR__1648
132cc                 | LR__1649
132cc     47 00 00 FF 
132d0     18 64 06 F1 | 	add	objptr, ##36376
132d4     32 93 02 FB | 	rdlong	arg01, objptr
132d8     47 00 00 FF 
132dc     18 64 86 F1 | 	sub	objptr, ##36376
132e0     14 DA B0 FD | 	call	#_scantochar
132e4     3D 93 02 F6 | 	mov	arg01, result1
132e8     10 2F B1 FD | 	call	#__system__Chr_S
132ec     E7 7A 62 FC | 	wrlong	result1, fp
132f0     0C 00 90 FD | 	jmp	#LR__1651
132f4                 | LR__1650
132f4     96 01 00 FF 
132f8     36 A9 06 F6 | 	mov	local02, ##@LR__6011
132fc     E7 A8 62 FC | 	wrlong	local02, fp
13300                 | LR__1651
13300     08 CE 05 F1 | 	add	fp, #8
13304     E7 3E 68 FC | 	wrlong	#31, fp
13308     08 CE 85 F1 | 	sub	fp, #8
1330c     E7 92 02 F6 | 	mov	arg01, fp
13310     EC A3 BF FD | 	call	#_push
13314     E7 F0 03 F6 | 	mov	ptra, fp
13318     F2 00 A0 FD | 	call	#popregs_
1331c                 | _do_inkey_ret
1331c     2D 00 64 FD | 	ret
13320                 | 
13320                 | ' 
13320                 | ' ' ----------------  ink
13320                 | ' 
13320                 | ' sub do_ink
13320                 | _do_ink
13320     00 CA 05 F6 | 	mov	COUNT_, #0
13324     E8 00 A0 FD | 	call	#pushregs_
13328     0C F0 07 F1 | 	add	ptra, #12
1332c     40 A3 BF FD | 	call	#_pop
13330     3F 95 02 F6 | 	mov	arg02, result3
13334     E7 7A 62 FC | 	wrlong	result1, fp
13338     04 CE 05 F1 | 	add	fp, #4
1333c     E7 7C 62 FC | 	wrlong	result2, fp
13340     04 CE 05 F1 | 	add	fp, #4
13344     E7 94 62 FC | 	wrlong	arg02, fp
13348     08 CE 85 F1 | 	sub	fp, #8
1334c     E7 92 02 F6 | 	mov	arg01, fp
13350     F8 A4 BF FD | 	call	#_converttoint
13354     38 00 00 FF 
13358     E0 65 06 F1 | 	add	objptr, ##29152
1335c     32 7B 62 FC | 	wrlong	result1, objptr
13360     04 64 86 F1 | 	sub	objptr, #4
13364     32 95 02 FB | 	rdlong	arg02, objptr
13368                 | ' 
13368                 | ' write_color:=ff
13368     38 00 00 FF 
1336c     9B 65 86 F1 | 	sub	objptr, ##29083
13370     32 7B 62 FC | 	wrlong	result1, objptr
13374                 | ' write_background:=bb
13374     04 64 06 F1 | 	add	objptr, #4
13378     32 95 62 FC | 	wrlong	arg02, objptr
1337c     38 00 00 FF 
13380     9B 65 06 F1 | 	add	objptr, ##29083
13384     32 93 02 FB | 	rdlong	arg01, objptr
13388     38 00 00 FF 
1338c     E0 65 86 F1 | 	sub	objptr, ##29152
13390     10 E2 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
13394     E7 F0 03 F6 | 	mov	ptra, fp
13398     F2 00 A0 FD | 	call	#popregs_
1339c                 | _do_ink_ret
1339c     2D 00 64 FD | 	ret
133a0                 | 
133a0                 | ' 
133a0                 | ' ' ----------------  int
133a0                 | ' 
133a0                 | ' sub do_int
133a0                 | _do_int
133a0     02 CA 05 F6 | 	mov	COUNT_, #2
133a4     E8 00 A0 FD | 	call	#pushregs_
133a8     10 F0 07 F1 | 	add	ptra, #16
133ac     C0 A2 BF FD | 	call	#_pop
133b0     3E A7 02 F6 | 	mov	local01, result2
133b4     3F A9 02 F6 | 	mov	local02, result3
133b8     E7 7A 62 FC | 	wrlong	result1, fp
133bc     04 CE 05 F1 | 	add	fp, #4
133c0     E7 A6 62 FC | 	wrlong	local01, fp
133c4     04 CE 05 F1 | 	add	fp, #4
133c8     E7 A8 62 FC | 	wrlong	local02, fp
133cc                 | ' 
133cc                 | ' t1=pop()
133cc                 | ' select case t1.result_type
133cc     08 CE 85 F1 | 	sub	fp, #8
133d0     1E A8 0E F2 | 	cmp	local02, #30 wz
133d4     14 00 90 AD |  if_e	jmp	#LR__1660
133d8     1F A8 0E F2 | 	cmp	local02, #31 wz
133dc     20 00 90 AD |  if_e	jmp	#LR__1661
133e0     2B A8 0E F2 | 	cmp	local02, #43 wz
133e4     34 00 90 AD |  if_e	jmp	#LR__1662
133e8     50 00 90 FD | 	jmp	#LR__1663
133ec                 | LR__1660
133ec     E7 92 02 FB | 	rdlong	arg01, fp
133f0     00 94 06 F6 | 	mov	arg02, #0
133f4     30 3F B1 FD | 	call	#__system___float_tointeger
133f8     E7 7A 62 FC | 	wrlong	result1, fp
133fc     3C 00 90 FD | 	jmp	#LR__1663
13400                 | LR__1661
13400     E7 92 02 FB | 	rdlong	arg01, fp
13404     74 42 B1 FD | 	call	#__system____builtin_atof
13408     3D 93 02 F6 | 	mov	arg01, result1
1340c     00 94 06 F6 | 	mov	arg02, #0
13410     14 3F B1 FD | 	call	#__system___float_tointeger
13414     E7 7A 62 FC | 	wrlong	result1, fp
13418     20 00 90 FD | 	jmp	#LR__1663
1341c                 | LR__1662
1341c     E7 92 02 FB | 	rdlong	arg01, fp
13420     BC A3 BF FD | 	call	#_convertstring
13424     3D 93 02 F6 | 	mov	arg01, result1
13428     50 42 B1 FD | 	call	#__system____builtin_atof
1342c     3D 93 02 F6 | 	mov	arg01, result1
13430     00 94 06 F6 | 	mov	arg02, #0
13434     F0 3E B1 FD | 	call	#__system___float_tointeger
13438     E7 7A 62 FC | 	wrlong	result1, fp
1343c                 | LR__1663
1343c     08 CE 05 F1 | 	add	fp, #8
13440     E7 38 68 FC | 	wrlong	#28, fp
13444     08 CE 85 F1 | 	sub	fp, #8
13448     E7 92 02 F6 | 	mov	arg01, fp
1344c     B0 A2 BF FD | 	call	#_push
13450     E7 F0 03 F6 | 	mov	ptra, fp
13454     F2 00 A0 FD | 	call	#popregs_
13458                 | _do_int_ret
13458     2D 00 64 FD | 	ret
1345c                 | 
1345c                 | ' 
1345c                 | ' ' ----------------  input
1345c                 | ' 
1345c                 | ' sub do_input
1345c                 | _do_input
1345c     1A CA 05 F6 | 	mov	COUNT_, #26
13460     E8 00 A0 FD | 	call	#pushregs_
13464     50 F1 07 F1 | 	add	ptra, #336
13468     4C 00 00 FF 
1346c     24 64 06 F1 | 	add	objptr, ##38948
13470     32 AD 02 FB | 	rdlong	local04, objptr
13474     56 AF 02 F6 | 	mov	local05, local04
13478     01 AE 66 F0 | 	shl	local05, #1
1347c     56 AF 02 F1 | 	add	local05, local04
13480     02 AE 66 F0 | 	shl	local05, #2
13484     03 00 00 FF 
13488     04 64 86 F1 | 	sub	objptr, ##1540
1348c     32 B1 02 F6 | 	mov	local06, objptr
13490     32 AF 02 F1 | 	add	local05, objptr
13494     57 B3 02 FB | 	rdlong	local07, local05
13498                 | ' 
13498                 | ' numpar=compiledline(lineptr_e).result.uresult
13498                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
13498     01 B2 16 F2 | 	cmp	local07, #1 wc
1349c     49 00 00 FF 
134a0     20 64 86 F1 | 	sub	objptr, ##37408
134a4     08 00 90 CD |  if_b	jmp	#LR__1670
134a8     41 B2 16 F2 | 	cmp	local07, #65 wc
134ac     50 00 90 CD |  if_b	jmp	#LR__1671
134b0                 | LR__1670
134b0     00 92 06 F6 | 	mov	arg01, #0
134b4     5C 68 B1 FD | 	call	#__system___getiolock_0622
134b8     3D 93 02 F6 | 	mov	arg01, result1
134bc     D0 12 B1 FD | 	call	#__system___lockmem
134c0     96 01 00 FF 
134c4     37 95 06 F6 | 	mov	arg02, ##@LR__6012
134c8     00 92 06 F6 | 	mov	arg01, #0
134cc     00 96 06 F6 | 	mov	arg03, #0
134d0     B0 1F B1 FD | 	call	#__system___basic_print_string
134d4     00 92 06 F6 | 	mov	arg01, #0
134d8     38 68 B1 FD | 	call	#__system___getiolock_0622
134dc     3D 01 68 FC | 	wrlong	#0, result1
134e0     52 00 00 FF 
134e4     94 64 06 F1 | 	add	objptr, ##42132
134e8     32 95 02 FB | 	rdlong	arg02, objptr
134ec     52 00 00 FF 
134f0     94 64 86 F1 | 	sub	objptr, ##42132
134f4     27 92 06 F6 | 	mov	arg01, #39
134f8     9C D4 B0 FD | 	call	#_printerror
134fc     5C 08 90 FD | 	jmp	#LR__1717
13500                 | LR__1671
13500     59 B5 02 F6 | 	mov	local08, local07
13504     01 B4 86 F1 | 	sub	local08, #1
13508     3C 64 06 F1 | 	add	objptr, #60
1350c     32 AD E2 FA | 	rdword	local04, objptr
13510     56 B7 52 F6 | 	abs	local09, local04 wc
13514     01 B6 46 F0 | 	shr	local09, #1
13518     5B B7 82 F6 | 	negc	local09, local09
1351c     02 64 06 F1 | 	add	objptr, #2
13520     32 B9 C2 FA | 	rdbyte	local10, objptr
13524     3E 64 86 F1 | 	sub	objptr, #62
13528                 | ' i=numpar-1
13528                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13528                 | ' do
13528                 | LR__1672
13528     D8 D3 BE FD | 	call	#_edit
1352c     3D BB 02 F6 | 	mov	local11, result1
13530                 | ' 
13530                 | '   line$=edit()
13530                 | ' 
13530                 | '   if v.cursor_y=cpy+1 then
13530     3E 64 06 F1 | 	add	objptr, #62
13534     32 97 C2 FA | 	rdbyte	arg03, objptr
13538     3E 64 86 F1 | 	sub	objptr, #62
1353c     5C AD 02 F6 | 	mov	local04, local10
13540     01 AC 06 F1 | 	add	local04, #1
13544     56 97 0A F2 | 	cmp	arg03, local04 wz
13548     5C 00 90 5D |  if_ne	jmp	#LR__1675
1354c     5D 93 02 F6 | 	mov	arg01, local11
13550     49 BD 02 F6 | 	mov	local12, arg01
13554     D7 06 48 FB | 	callpa	#(@LR__1674-@LR__1673)>>2,fcache_load_ptr_
13558                 | LR__1673
13558     5E 7B CA FA | 	rdbyte	result1, local12 wz
1355c     01 BC 06 51 |  if_ne	add	local12, #1
13560     F4 FF 9F 5D |  if_ne	jmp	#LR__1673
13564                 | LR__1674
13564     49 BD 82 F1 | 	sub	local12, arg01
13568     5E 95 02 F6 | 	mov	arg02, local12
1356c     5B 95 82 F1 | 	sub	arg02, local09
13570     38 00 00 FF 
13574     D8 65 06 F1 | 	add	objptr, ##29144
13578     32 AD 02 FB | 	rdlong	local04, objptr
1357c     38 00 00 FF 
13580     D8 65 86 F1 | 	sub	objptr, ##29144
13584     56 95 02 F1 | 	add	arg02, local04
13588     5D 93 02 F6 | 	mov	arg01, local11
1358c     30 2B B1 FD | 	call	#__system__Right_S
13590     3D 93 02 F6 | 	mov	arg01, result1
13594     30 2F B1 FD | 	call	#__system__RTrim_S
13598     3D 93 02 F6 | 	mov	arg01, result1
1359c     68 2E B1 FD | 	call	#__system__LTrim_S
135a0     3D BB 02 F6 | 	mov	local11, result1
135a4     14 00 90 FD | 	jmp	#LR__1676
135a8                 | LR__1675
135a8     5D 93 02 F6 | 	mov	arg01, local11
135ac     18 2F B1 FD | 	call	#__system__RTrim_S
135b0     3D 93 02 F6 | 	mov	arg01, result1
135b4     50 2E B1 FD | 	call	#__system__LTrim_S
135b8     3D BB 02 F6 | 	mov	local11, result1
135bc                 | LR__1676
135bc                 | '   do
135bc                 | LR__1677
135bc     96 01 00 FF 
135c0     42 97 06 F6 | 	mov	arg03, ##@LR__6013
135c4     01 92 06 F6 | 	mov	arg01, #1
135c8     5D 95 02 F6 | 	mov	arg02, local11
135cc     B0 2F B1 FD | 	call	#__system__Instr
135d0     3D BF 02 F6 | 	mov	local13, result1
135d4                 | '    comma=instr(1,line$,",")  
135d4                 | '    if comma>0  then 
135d4     01 BE 16 F2 | 	cmp	local13, #1 wc
135d8     48 00 90 CD |  if_b	jmp	#LR__1680
135dc     5F 95 02 F6 | 	mov	arg02, local13
135e0     01 94 86 F1 | 	sub	arg02, #1
135e4     5D 93 02 F6 | 	mov	arg01, local11
135e8     4C 2A B1 FD | 	call	#__system__Left_S
135ec     3D C1 02 F6 | 	mov	local14, result1
135f0     5D 93 02 F6 | 	mov	arg01, local11
135f4     49 BD 02 F6 | 	mov	local12, arg01
135f8     D7 06 48 FB | 	callpa	#(@LR__1679-@LR__1678)>>2,fcache_load_ptr_
135fc                 | LR__1678
135fc     5E 7B CA FA | 	rdbyte	result1, local12 wz
13600     01 BC 06 51 |  if_ne	add	local12, #1
13604     F4 FF 9F 5D |  if_ne	jmp	#LR__1678
13608                 | LR__1679
13608     49 BD 82 F1 | 	sub	local12, arg01
1360c     5E 95 02 F6 | 	mov	arg02, local12
13610     5F 95 82 F1 | 	sub	arg02, local13
13614     5D 93 02 F6 | 	mov	arg01, local11
13618     A4 2A B1 FD | 	call	#__system__Right_S
1361c     3D BB 02 F6 | 	mov	local11, result1
13620     1C 00 90 FD | 	jmp	#LR__1681
13624                 | LR__1680
13624     5D 93 02 F6 | 	mov	arg01, local11
13628     9C 2E B1 FD | 	call	#__system__RTrim_S
1362c     3D 93 02 F6 | 	mov	arg01, result1
13630     D4 2D B1 FD | 	call	#__system__LTrim_S
13634     3D C1 02 F6 | 	mov	local14, result1
13638     96 01 00 FF 
1363c     44 BB 06 F6 | 	mov	local11, ##@LR__6014
13640                 | LR__1681
13640     5A 95 02 F6 | 	mov	arg02, local08
13644     02 94 66 F0 | 	shl	arg02, #2
13648     E7 AC 02 F6 | 	mov	local04, fp
1364c     2C AC 06 F1 | 	add	local04, #44
13650     56 95 02 F1 | 	add	arg02, local04
13654     4A C1 62 FC | 	wrlong	local14, arg02
13658     01 B4 86 F1 | 	sub	local08, #1
1365c     00 B4 56 F2 | 	cmps	local08, #0 wc
13660     18 00 90 CD |  if_b	jmp	#LR__1682
13664     96 01 00 FF 
13668     45 95 06 F6 | 	mov	arg02, ##@LR__6015
1366c     5D 93 02 F6 | 	mov	arg01, local11
13670     44 11 B1 FD | 	call	#__system___string_cmp
13674     00 7A 0E F2 | 	cmp	result1, #0 wz
13678     40 FF 9F 5D |  if_ne	jmp	#LR__1677
1367c                 | LR__1682
1367c     00 B4 56 F2 | 	cmps	local08, #0 wc
13680     A4 FE 9F 3D |  if_ae	jmp	#LR__1672
13684                 | ' 
13684                 | ' for i=0 to numpar-1
13684     00 B4 06 F6 | 	mov	local08, #0
13688     59 C3 02 F6 | 	mov	local15, local07
1368c                 | LR__1683
1368c     61 B5 52 F2 | 	cmps	local08, local15 wc
13690     C8 06 90 3D |  if_ae	jmp	#LR__1716
13694                 | ' 
13694                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
13694     5A AF 02 F6 | 	mov	local05, local08
13698     02 AE 66 F0 | 	shl	local05, #2
1369c     E7 B0 02 F6 | 	mov	local06, fp
136a0     2C B0 06 F1 | 	add	local06, #44
136a4     58 AF 02 F1 | 	add	local05, local06
136a8     57 93 02 FB | 	rdlong	arg01, local05
136ac     A4 33 BF FD | 	call	#_isnum
136b0     3D B1 02 F6 | 	mov	local06, result1
136b4     5A C5 02 F6 | 	mov	local16, local08
136b8     02 C4 66 F0 | 	shl	local16, #2
136bc     E7 C6 02 F6 | 	mov	local17, fp
136c0     2C C6 06 F1 | 	add	local17, #44
136c4     63 C5 02 F1 | 	add	local16, local17
136c8     62 93 02 FB | 	rdlong	arg01, local16
136cc     70 37 BF FD | 	call	#_isint
136d0     07 7A 66 F7 | 	signx	result1, #7
136d4     3D B1 2A F5 | 	andn	local06, result1 wz
136d8     54 00 00 5F 
136dc     EC 64 06 51 |  if_ne	add	objptr, ##43244
136e0     32 3D 68 5C |  if_ne	wrlong	#30, objptr
136e4     54 00 00 5F 
136e8     EC 64 86 51 |  if_ne	sub	objptr, ##43244
136ec                 | '   if isint(args(i)) then r=result_int 
136ec     5A AD 02 F6 | 	mov	local04, local08
136f0     02 AC 66 F0 | 	shl	local04, #2
136f4     E7 AE 02 F6 | 	mov	local05, fp
136f8     2C AE 06 F1 | 	add	local05, #44
136fc     57 AD 02 F1 | 	add	local04, local05
13700     56 93 02 FB | 	rdlong	arg01, local04
13704     38 37 BF FD | 	call	#_isint
13708     00 7A 0E F2 | 	cmp	result1, #0 wz
1370c     54 00 00 5F 
13710     EC 64 06 51 |  if_ne	add	objptr, ##43244
13714     32 39 68 5C |  if_ne	wrlong	#28, objptr
13718     54 00 00 5F 
1371c     EC 64 86 51 |  if_ne	sub	objptr, ##43244
13720                 | '   if isdec(args(i)) then r=result_uint 
13720     5A AD 02 F6 | 	mov	local04, local08
13724     02 AC 66 F0 | 	shl	local04, #2
13728     E7 AE 02 F6 | 	mov	local05, fp
1372c     2C AE 06 F1 | 	add	local05, #44
13730     57 AD 02 F1 | 	add	local04, local05
13734     56 93 02 FB | 	rdlong	arg01, local04
13738     A8 39 BF FD | 	call	#_isdec
1373c     00 7A 0E F2 | 	cmp	result1, #0 wz
13740     54 00 00 5F 
13744     EC 64 06 51 |  if_ne	add	objptr, ##43244
13748     32 3B 68 5C |  if_ne	wrlong	#29, objptr
1374c     54 00 00 5F 
13750     EC 64 86 51 |  if_ne	sub	objptr, ##43244
13754                 | '   if not isnum(args(i)) then 
13754     5A AF 02 F6 | 	mov	local05, local08
13758     02 AE 66 F0 | 	shl	local05, #2
1375c     E7 B0 02 F6 | 	mov	local06, fp
13760     2C B0 06 F1 | 	add	local06, #44
13764     58 AF 02 F1 | 	add	local05, local06
13768     57 93 02 FB | 	rdlong	arg01, local05
1376c     E4 32 BF FD | 	call	#_isnum
13770     07 7A 66 F7 | 	signx	result1, #7
13774     3D 7B 22 F6 | 	not	result1, result1
13778     00 7A 0E F2 | 	cmp	result1, #0 wz
1377c     E8 00 90 AD |  if_e	jmp	#LR__1688
13780     54 00 00 FF 
13784     EC 64 06 F1 | 	add	objptr, ##43244
13788     32 57 68 FC | 	wrlong	#43, objptr
1378c     54 00 00 FF 
13790     EC 64 86 F1 | 	sub	objptr, ##43244
13794     60 93 02 F6 | 	mov	arg01, local14
13798     49 BD 02 F6 | 	mov	local12, arg01
1379c     D7 06 48 FB | 	callpa	#(@LR__1685-@LR__1684)>>2,fcache_load_ptr_
137a0                 | LR__1684
137a0     5E 7B CA FA | 	rdbyte	result1, local12 wz
137a4     01 BC 06 51 |  if_ne	add	local12, #1
137a8     F4 FF 9F 5D |  if_ne	jmp	#LR__1684
137ac                 | LR__1685
137ac     49 BD 82 F1 | 	sub	local12, arg01
137b0     5E C9 02 F6 | 	mov	local18, local12
137b4     54 00 00 FF 
137b8     74 64 06 F1 | 	add	objptr, ##43124
137bc     32 93 02 FB | 	rdlong	arg01, objptr
137c0     64 93 82 F1 | 	sub	arg01, local18
137c4     04 92 86 F1 | 	sub	arg01, #4
137c8     03 92 26 F5 | 	andn	arg01, #3
137cc     32 93 62 FC | 	wrlong	arg01, objptr
137d0     54 00 00 FF 
137d4     74 64 86 F1 | 	sub	objptr, ##43124
137d8     64 95 02 F6 | 	mov	arg02, local18
137dc     50 D3 B0 FD | 	call	#_pslpoke
137e0                 | '     pslpoke memtop,l
137e0                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
137e0     01 CA 06 F6 | 	mov	local19, #1
137e4     64 CD 02 F6 | 	mov	local20, local18
137e8     01 CC 06 F1 | 	add	local20, #1
137ec                 | LR__1686
137ec     66 CB 52 F2 | 	cmps	local19, local20 wc
137f0     60 00 90 3D |  if_ae	jmp	#LR__1687
137f4     54 00 00 FF 
137f8     74 64 06 F1 | 	add	objptr, ##43124
137fc     32 AD 02 FB | 	rdlong	local04, objptr
13800     54 00 00 FF 
13804     74 64 86 F1 | 	sub	objptr, ##43124
13808     03 AC 06 F1 | 	add	local04, #3
1380c     65 AD 02 F1 | 	add	local04, local19
13810     5A C5 02 F6 | 	mov	local16, local08
13814     02 C4 66 F0 | 	shl	local16, #2
13818     E7 C6 02 F6 | 	mov	local17, fp
1381c     2C C6 06 F1 | 	add	local17, #44
13820     63 C5 02 F1 | 	add	local16, local17
13824     62 93 02 FB | 	rdlong	arg01, local16
13828     65 B1 02 F6 | 	mov	local06, local19
1382c     01 C4 06 F6 | 	mov	local16, #1
13830     58 95 02 F6 | 	mov	arg02, local06
13834     01 96 06 F6 | 	mov	arg03, #1
13838     14 29 B1 FD | 	call	#__system__Mid_S
1383c     3D AF 02 F6 | 	mov	local05, result1
13840     57 95 C2 FA | 	rdbyte	arg02, local05
13844     56 93 02 F6 | 	mov	arg01, local04
13848     7C D3 B0 FD | 	call	#_pspoke
1384c     01 CA 06 F1 | 	add	local19, #1
13850     98 FF 9F FD | 	jmp	#LR__1686
13854                 | LR__1687
13854     54 00 00 FF 
13858     74 64 06 F1 | 	add	objptr, ##43124
1385c     32 CF 02 FB | 	rdlong	local21, objptr
13860     54 00 00 FF 
13864     74 64 86 F1 | 	sub	objptr, ##43124
13868                 | LR__1688
13868     04 9E BF FD | 	call	#_pop
1386c     3D D1 02 F6 | 	mov	local22, result1
13870     3E D3 02 F6 | 	mov	local23, result2
13874     3F AD 02 F6 | 	mov	local04, result3
13878     68 A7 02 F6 | 	mov	local01, local22
1387c     69 A9 02 F6 | 	mov	local02, local23
13880     56 AB 02 F6 | 	mov	local03, local04
13884     54 D5 02 F6 | 	mov	local24, local02
13888                 | '   t1=pop() : vartype=t1.result.twowords(1)
13888                 | '   select case vartype
13888     6A D7 0A F6 | 	mov	local25, local24 wz
1388c     64 00 90 AD |  if_e	jmp	#LR__1689
13890     00 D7 0E F2 | 	cmp	local25, #256 wz
13894     64 00 90 AD |  if_e	jmp	#LR__1690
13898     01 D7 0E F2 | 	cmp	local25, #257 wz
1389c     64 00 90 AD |  if_e	jmp	#LR__1691
138a0     02 D7 0E F2 | 	cmp	local25, #258 wz
138a4     64 00 90 AD |  if_e	jmp	#LR__1692
138a8     03 D7 0E F2 | 	cmp	local25, #259 wz
138ac     64 00 90 AD |  if_e	jmp	#LR__1693
138b0     04 D7 0E F2 | 	cmp	local25, #260 wz
138b4     64 00 90 AD |  if_e	jmp	#LR__1694
138b8     05 D7 0E F2 | 	cmp	local25, #261 wz
138bc     64 00 90 AD |  if_e	jmp	#LR__1695
138c0     06 D7 0E F2 | 	cmp	local25, #262 wz
138c4     64 00 90 AD |  if_e	jmp	#LR__1696
138c8     07 D7 0E F2 | 	cmp	local25, #263 wz
138cc     64 00 90 AD |  if_e	jmp	#LR__1697
138d0     08 D7 0E F2 | 	cmp	local25, #264 wz
138d4     64 00 90 AD |  if_e	jmp	#LR__1698
138d8     09 D7 0E F2 | 	cmp	local25, #265 wz
138dc     64 00 90 AD |  if_e	jmp	#LR__1699
138e0     0A D7 0E F2 | 	cmp	local25, #266 wz
138e4     64 00 90 AD |  if_e	jmp	#LR__1700
138e8     0B D7 0E F2 | 	cmp	local25, #267 wz
138ec     64 00 90 AD |  if_e	jmp	#LR__1701
138f0     68 00 90 FD | 	jmp	#LR__1702
138f4                 | LR__1689
138f4     0C D8 06 F6 | 	mov	local26, #12
138f8     64 00 90 FD | 	jmp	#LR__1703
138fc                 | LR__1690
138fc     0C D8 06 F6 | 	mov	local26, #12
13900     5C 00 90 FD | 	jmp	#LR__1703
13904                 | LR__1691
13904     01 D8 06 F6 | 	mov	local26, #1
13908     54 00 90 FD | 	jmp	#LR__1703
1390c                 | LR__1692
1390c     01 D8 06 F6 | 	mov	local26, #1
13910     4C 00 90 FD | 	jmp	#LR__1703
13914                 | LR__1693
13914     02 D8 06 F6 | 	mov	local26, #2
13918     44 00 90 FD | 	jmp	#LR__1703
1391c                 | LR__1694
1391c     02 D8 06 F6 | 	mov	local26, #2
13920     3C 00 90 FD | 	jmp	#LR__1703
13924                 | LR__1695
13924     04 D8 06 F6 | 	mov	local26, #4
13928     34 00 90 FD | 	jmp	#LR__1703
1392c                 | LR__1696
1392c     04 D8 06 F6 | 	mov	local26, #4
13930     2C 00 90 FD | 	jmp	#LR__1703
13934                 | LR__1697
13934     08 D8 06 F6 | 	mov	local26, #8
13938     24 00 90 FD | 	jmp	#LR__1703
1393c                 | LR__1698
1393c     08 D8 06 F6 | 	mov	local26, #8
13940     1C 00 90 FD | 	jmp	#LR__1703
13944                 | LR__1699
13944     06 D8 06 F6 | 	mov	local26, #6
13948     14 00 90 FD | 	jmp	#LR__1703
1394c                 | LR__1700
1394c     08 D8 06 F6 | 	mov	local26, #8
13950     0C 00 90 FD | 	jmp	#LR__1703
13954                 | LR__1701
13954     05 D8 06 F6 | 	mov	local26, #5
13958     04 00 90 FD | 	jmp	#LR__1703
1395c                 | LR__1702
1395c     0C D8 06 F6 | 	mov	local26, #12
13960                 | LR__1703
13960                 | '   if esize=12 andalso t1.result.uresult<$80000 then
13960     0C D8 0E F2 | 	cmp	local26, #12 wz
13964     34 01 90 5D |  if_ne	jmp	#LR__1707
13968     00 04 00 FF 
1396c     00 A6 16 F2 | 	cmp	local01, ##524288 wc
13970     28 01 90 3D |  if_ae	jmp	#LR__1707
13974                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
13974     54 00 00 FF 
13978     EC 64 06 F1 | 	add	objptr, ##43244
1397c     32 D1 02 FB | 	rdlong	local22, objptr
13980     54 00 00 FF 
13984     EC 64 86 F1 | 	sub	objptr, ##43244
13988     1C D0 0E F2 | 	cmp	local22, #28 wz
1398c     2C 00 90 5D |  if_ne	jmp	#LR__1704
13990     5A AF 02 F6 | 	mov	local05, local08
13994     02 AE 66 F0 | 	shl	local05, #2
13998     E7 B0 02 F6 | 	mov	local06, fp
1399c     2C B0 06 F1 | 	add	local06, #44
139a0     58 AF 02 F1 | 	add	local05, local06
139a4     57 93 02 FB | 	rdlong	arg01, local05
139a8     00 94 06 F6 | 	mov	arg02, #0
139ac     34 3B B1 FD | 	call	#__system____builtin_atoi
139b0     3D 95 02 F6 | 	mov	arg02, result1
139b4     53 93 02 F6 | 	mov	arg01, local01
139b8     49 95 62 FC | 	wrlong	arg02, arg01
139bc                 | LR__1704
139bc                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
139bc     54 00 00 FF 
139c0     EC 64 06 F1 | 	add	objptr, ##43244
139c4     32 D1 02 FB | 	rdlong	local22, objptr
139c8     54 00 00 FF 
139cc     EC 64 86 F1 | 	sub	objptr, ##43244
139d0     1D D0 0E F2 | 	cmp	local22, #29 wz
139d4     2C 00 90 5D |  if_ne	jmp	#LR__1705
139d8     5A AF 02 F6 | 	mov	local05, local08
139dc     02 AE 66 F0 | 	shl	local05, #2
139e0     E7 B0 02 F6 | 	mov	local06, fp
139e4     2C B0 06 F1 | 	add	local06, #44
139e8     58 AF 02 F1 | 	add	local05, local06
139ec     57 93 02 FB | 	rdlong	arg01, local05
139f0     00 94 06 F6 | 	mov	arg02, #0
139f4     EC 3A B1 FD | 	call	#__system____builtin_atoi
139f8     3D 95 02 F6 | 	mov	arg02, result1
139fc     53 93 02 F6 | 	mov	arg01, local01
13a00     49 95 62 FC | 	wrlong	arg02, arg01
13a04                 | LR__1705
13a04                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
13a04     54 00 00 FF 
13a08     EC 64 06 F1 | 	add	objptr, ##43244
13a0c     32 D1 02 FB | 	rdlong	local22, objptr
13a10     54 00 00 FF 
13a14     EC 64 86 F1 | 	sub	objptr, ##43244
13a18     1E D0 0E F2 | 	cmp	local22, #30 wz
13a1c     3C 00 90 5D |  if_ne	jmp	#LR__1706
13a20     5A AD 02 F6 | 	mov	local04, local08
13a24     02 AC 66 F0 | 	shl	local04, #2
13a28     E7 AE 02 F6 | 	mov	local05, fp
13a2c     2C AE 06 F1 | 	add	local05, #44
13a30     57 AD 02 F1 | 	add	local04, local05
13a34     56 93 02 FB | 	rdlong	arg01, local04
13a38     40 3C B1 FD | 	call	#__system____builtin_atof
13a3c     28 CE 05 F1 | 	add	fp, #40
13a40     E7 7A 62 FC | 	wrlong	result1, fp
13a44     E7 92 02 F6 | 	mov	arg01, fp
13a48     28 CE 85 F1 | 	sub	fp, #40
13a4c     49 7B 02 FB | 	rdlong	result1, arg01
13a50     3D 95 02 F6 | 	mov	arg02, result1
13a54     53 93 02 F6 | 	mov	arg01, local01
13a58     49 95 62 FC | 	wrlong	arg02, arg01
13a5c                 | LR__1706
13a5c                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
13a5c     54 00 00 FF 
13a60     EC 64 06 F1 | 	add	objptr, ##43244
13a64     32 D1 02 FB | 	rdlong	local22, objptr
13a68     2B D0 0E F2 | 	cmp	local22, #43 wz
13a6c     53 93 02 A6 |  if_e	mov	arg01, local01
13a70     67 95 02 A6 |  if_e	mov	arg02, local21
13a74     49 95 62 AC |  if_e	wrlong	arg02, arg01
13a78     53 D1 02 F6 | 	mov	local22, local01
13a7c     08 D0 06 F1 | 	add	local22, #8
13a80     32 AD 02 FB | 	rdlong	local04, objptr
13a84     54 00 00 FF 
13a88     EC 64 86 F1 | 	sub	objptr, ##43244
13a8c     56 D3 02 F6 | 	mov	local23, local04
13a90     68 93 02 F6 | 	mov	arg01, local22
13a94     69 95 02 F6 | 	mov	arg02, local23
13a98     49 95 62 FC | 	wrlong	arg02, arg01
13a9c                 | LR__1707
13a9c                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
13a9c     0C D8 0E F2 | 	cmp	local26, #12 wz
13aa0     38 01 90 5D |  if_ne	jmp	#LR__1711
13aa4     00 04 00 FF 
13aa8     00 A6 16 F2 | 	cmp	local01, ##524288 wc
13aac     2C 01 90 CD |  if_b	jmp	#LR__1711
13ab0                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
13ab0     54 00 00 FF 
13ab4     EC 64 06 F1 | 	add	objptr, ##43244
13ab8     32 D1 02 FB | 	rdlong	local22, objptr
13abc     54 00 00 FF 
13ac0     EC 64 86 F1 | 	sub	objptr, ##43244
13ac4     1C D0 0E F2 | 	cmp	local22, #28 wz
13ac8     2C 00 90 5D |  if_ne	jmp	#LR__1708
13acc     5A AF 02 F6 | 	mov	local05, local08
13ad0     02 AE 66 F0 | 	shl	local05, #2
13ad4     E7 B0 02 F6 | 	mov	local06, fp
13ad8     2C B0 06 F1 | 	add	local06, #44
13adc     58 AF 02 F1 | 	add	local05, local06
13ae0     57 93 02 FB | 	rdlong	arg01, local05
13ae4     00 94 06 F6 | 	mov	arg02, #0
13ae8     F8 39 B1 FD | 	call	#__system____builtin_atoi
13aec     3D 95 02 F6 | 	mov	arg02, result1
13af0     53 93 02 F6 | 	mov	arg01, local01
13af4     38 D0 B0 FD | 	call	#_pslpoke
13af8                 | LR__1708
13af8                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
13af8     54 00 00 FF 
13afc     EC 64 06 F1 | 	add	objptr, ##43244
13b00     32 D1 02 FB | 	rdlong	local22, objptr
13b04     54 00 00 FF 
13b08     EC 64 86 F1 | 	sub	objptr, ##43244
13b0c     1D D0 0E F2 | 	cmp	local22, #29 wz
13b10     2C 00 90 5D |  if_ne	jmp	#LR__1709
13b14     5A AF 02 F6 | 	mov	local05, local08
13b18     02 AE 66 F0 | 	shl	local05, #2
13b1c     E7 B0 02 F6 | 	mov	local06, fp
13b20     2C B0 06 F1 | 	add	local06, #44
13b24     58 AF 02 F1 | 	add	local05, local06
13b28     57 93 02 FB | 	rdlong	arg01, local05
13b2c     00 94 06 F6 | 	mov	arg02, #0
13b30     B0 39 B1 FD | 	call	#__system____builtin_atoi
13b34     3D 95 02 F6 | 	mov	arg02, result1
13b38     53 93 02 F6 | 	mov	arg01, local01
13b3c     F0 CF B0 FD | 	call	#_pslpoke
13b40                 | LR__1709
13b40                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13b40     54 00 00 FF 
13b44     EC 64 06 F1 | 	add	objptr, ##43244
13b48     32 D1 02 FB | 	rdlong	local22, objptr
13b4c     54 00 00 FF 
13b50     EC 64 86 F1 | 	sub	objptr, ##43244
13b54     1E D0 0E F2 | 	cmp	local22, #30 wz
13b58     38 00 90 5D |  if_ne	jmp	#LR__1710
13b5c     5A AD 02 F6 | 	mov	local04, local08
13b60     02 AC 66 F0 | 	shl	local04, #2
13b64     E7 AE 02 F6 | 	mov	local05, fp
13b68     2C AE 06 F1 | 	add	local05, #44
13b6c     57 AD 02 F1 | 	add	local04, local05
13b70     56 93 02 FB | 	rdlong	arg01, local04
13b74     04 3B B1 FD | 	call	#__system____builtin_atof
13b78     28 CE 05 F1 | 	add	fp, #40
13b7c     E7 7A 62 FC | 	wrlong	result1, fp
13b80     E7 92 02 F6 | 	mov	arg01, fp
13b84     28 CE 85 F1 | 	sub	fp, #40
13b88     49 95 02 FB | 	rdlong	arg02, arg01
13b8c     53 93 02 F6 | 	mov	arg01, local01
13b90     9C CF B0 FD | 	call	#_pslpoke
13b94                 | LR__1710
13b94                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
13b94     54 00 00 FF 
13b98     EC 64 06 F1 | 	add	objptr, ##43244
13b9c     32 D1 02 FB | 	rdlong	local22, objptr
13ba0     54 00 00 FF 
13ba4     EC 64 86 F1 | 	sub	objptr, ##43244
13ba8     2B D0 0E F2 | 	cmp	local22, #43 wz
13bac     53 93 02 A6 |  if_e	mov	arg01, local01
13bb0     67 95 02 A6 |  if_e	mov	arg02, local21
13bb4     78 CF B0 AD |  if_e	call	#_pslpoke
13bb8     53 93 02 F6 | 	mov	arg01, local01
13bbc     08 92 06 F1 | 	add	arg01, #8
13bc0     54 00 00 FF 
13bc4     EC 64 06 F1 | 	add	objptr, ##43244
13bc8     32 D3 02 FB | 	rdlong	local23, objptr
13bcc     54 00 00 FF 
13bd0     EC 64 86 F1 | 	sub	objptr, ##43244
13bd4     69 95 02 F6 | 	mov	arg02, local23
13bd8     54 CF B0 FD | 	call	#_pslpoke
13bdc                 | LR__1711
13bdc                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
13bdc     05 D8 0E F2 | 	cmp	local26, #5 wz
13be0     54 00 00 AF 
13be4     EC 64 06 A1 |  if_e	add	objptr, ##43244
13be8     32 D3 02 AB |  if_e	rdlong	local23, objptr
13bec     54 00 00 AF 
13bf0     EC 64 86 A1 |  if_e	sub	objptr, ##43244
13bf4     2B D2 0E A2 |  if_e	cmp	local23, #43 wz
13bf8     67 D3 02 A6 |  if_e	mov	local23, local21
13bfc     53 93 02 A6 |  if_e	mov	arg01, local01
13c00     69 95 02 A6 |  if_e	mov	arg02, local23
13c04     28 CF B0 AD |  if_e	call	#_pslpoke
13c08                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
13c08     04 D8 0E F2 | 	cmp	local26, #4 wz
13c0c     48 00 90 5D |  if_ne	jmp	#LR__1712
13c10     54 00 00 FF 
13c14     EC 64 06 F1 | 	add	objptr, ##43244
13c18     32 D3 02 FB | 	rdlong	local23, objptr
13c1c     54 00 00 FF 
13c20     EC 64 86 F1 | 	sub	objptr, ##43244
13c24     2B D2 0E F2 | 	cmp	local23, #43 wz
13c28     2C 00 90 AD |  if_e	jmp	#LR__1712
13c2c     5A AF 02 F6 | 	mov	local05, local08
13c30     02 AE 66 F0 | 	shl	local05, #2
13c34     E7 B0 02 F6 | 	mov	local06, fp
13c38     2C B0 06 F1 | 	add	local06, #44
13c3c     58 AF 02 F1 | 	add	local05, local06
13c40     57 93 02 FB | 	rdlong	arg01, local05
13c44     00 94 06 F6 | 	mov	arg02, #0
13c48     98 38 B1 FD | 	call	#__system____builtin_atoi
13c4c     3D 95 02 F6 | 	mov	arg02, result1
13c50     53 93 02 F6 | 	mov	arg01, local01
13c54     D8 CE B0 FD | 	call	#_pslpoke
13c58                 | LR__1712
13c58                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
13c58     02 D8 0E F2 | 	cmp	local26, #2 wz
13c5c     48 00 90 5D |  if_ne	jmp	#LR__1713
13c60     54 00 00 FF 
13c64     EC 64 06 F1 | 	add	objptr, ##43244
13c68     32 D3 02 FB | 	rdlong	local23, objptr
13c6c     54 00 00 FF 
13c70     EC 64 86 F1 | 	sub	objptr, ##43244
13c74     2B D2 0E F2 | 	cmp	local23, #43 wz
13c78     2C 00 90 AD |  if_e	jmp	#LR__1713
13c7c     5A AF 02 F6 | 	mov	local05, local08
13c80     02 AE 66 F0 | 	shl	local05, #2
13c84     E7 B0 02 F6 | 	mov	local06, fp
13c88     2C B0 06 F1 | 	add	local06, #44
13c8c     58 AF 02 F1 | 	add	local05, local06
13c90     57 93 02 FB | 	rdlong	arg01, local05
13c94     00 94 06 F6 | 	mov	arg02, #0
13c98     48 38 B1 FD | 	call	#__system____builtin_atoi
13c9c     3D 95 02 F6 | 	mov	arg02, result1
13ca0     53 93 02 F6 | 	mov	arg01, local01
13ca4     D4 CE B0 FD | 	call	#_psdpoke
13ca8                 | LR__1713
13ca8                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
13ca8     01 D8 0E F2 | 	cmp	local26, #1 wz
13cac     48 00 90 5D |  if_ne	jmp	#LR__1714
13cb0     54 00 00 FF 
13cb4     EC 64 06 F1 | 	add	objptr, ##43244
13cb8     32 D3 02 FB | 	rdlong	local23, objptr
13cbc     54 00 00 FF 
13cc0     EC 64 86 F1 | 	sub	objptr, ##43244
13cc4     2B D2 0E F2 | 	cmp	local23, #43 wz
13cc8     2C 00 90 AD |  if_e	jmp	#LR__1714
13ccc     5A AF 02 F6 | 	mov	local05, local08
13cd0     02 AE 66 F0 | 	shl	local05, #2
13cd4     E7 B0 02 F6 | 	mov	local06, fp
13cd8     2C B0 06 F1 | 	add	local06, #44
13cdc     58 AF 02 F1 | 	add	local05, local06
13ce0     57 93 02 FB | 	rdlong	arg01, local05
13ce4     00 94 06 F6 | 	mov	arg02, #0
13ce8     F8 37 B1 FD | 	call	#__system____builtin_atoi
13cec     3D 95 02 F6 | 	mov	arg02, result1
13cf0     53 93 02 F6 | 	mov	arg01, local01
13cf4     D0 CE B0 FD | 	call	#_pspoke
13cf8                 | LR__1714
13cf8                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13cf8     06 D8 0E F2 | 	cmp	local26, #6 wz
13cfc     54 00 90 5D |  if_ne	jmp	#LR__1715
13d00     54 00 00 FF 
13d04     EC 64 06 F1 | 	add	objptr, ##43244
13d08     32 D3 02 FB | 	rdlong	local23, objptr
13d0c     54 00 00 FF 
13d10     EC 64 86 F1 | 	sub	objptr, ##43244
13d14     2B D2 0E F2 | 	cmp	local23, #43 wz
13d18     38 00 90 AD |  if_e	jmp	#LR__1715
13d1c     5A AD 02 F6 | 	mov	local04, local08
13d20     02 AC 66 F0 | 	shl	local04, #2
13d24     E7 AE 02 F6 | 	mov	local05, fp
13d28     2C AE 06 F1 | 	add	local05, #44
13d2c     57 AD 02 F1 | 	add	local04, local05
13d30     56 93 02 FB | 	rdlong	arg01, local04
13d34     44 39 B1 FD | 	call	#__system____builtin_atof
13d38     28 CE 05 F1 | 	add	fp, #40
13d3c     E7 7A 62 FC | 	wrlong	result1, fp
13d40     E7 92 02 F6 | 	mov	arg01, fp
13d44     28 CE 85 F1 | 	sub	fp, #40
13d48     49 95 02 FB | 	rdlong	arg02, arg01
13d4c     53 93 02 F6 | 	mov	arg01, local01
13d50     DC CD B0 FD | 	call	#_pslpoke
13d54                 | LR__1715
13d54     01 B4 06 F1 | 	add	local08, #1
13d58     30 F9 9F FD | 	jmp	#LR__1683
13d5c                 | LR__1716
13d5c                 | LR__1717
13d5c     E7 F0 03 F6 | 	mov	ptra, fp
13d60     F2 00 A0 FD | 	call	#popregs_
13d64                 | _do_input_ret
13d64     2D 00 64 FD | 	ret
13d68                 | 
13d68                 | ' 
13d68                 | ' ' ----------------  left$
13d68                 | ' 
13d68                 | ' sub do_left
13d68                 | _do_left
13d68     01 CA 05 F6 | 	mov	COUNT_, #1
13d6c     E8 00 A0 FD | 	call	#pushregs_
13d70     14 F0 07 F1 | 	add	ptra, #20
13d74     4C 00 00 FF 
13d78     24 64 06 F1 | 	add	objptr, ##38948
13d7c     32 97 02 FB | 	rdlong	arg03, objptr
13d80     4B 95 02 F6 | 	mov	arg02, arg03
13d84     01 94 66 F0 | 	shl	arg02, #1
13d88     4B 95 02 F1 | 	add	arg02, arg03
13d8c     02 94 66 F0 | 	shl	arg02, #2
13d90     03 00 00 FF 
13d94     04 64 86 F1 | 	sub	objptr, ##1540
13d98     32 95 02 F1 | 	add	arg02, objptr
13d9c     4A 97 02 FB | 	rdlong	arg03, arg02
13da0                 | ' 
13da0                 | ' numpar=compiledline(lineptr_e).result.uresult
13da0                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
13da0     02 96 0E F2 | 	cmp	arg03, #2 wz
13da4     49 00 00 FF 
13da8     20 64 86 F1 | 	sub	objptr, ##37408
13dac     40 00 90 AD |  if_e	jmp	#LR__1720
13db0     00 92 06 F6 | 	mov	arg01, #0
13db4     5C 5F B1 FD | 	call	#__system___getiolock_0622
13db8     3D 93 02 F6 | 	mov	arg01, result1
13dbc     D0 09 B1 FD | 	call	#__system___lockmem
13dc0     96 01 00 FF 
13dc4     46 95 06 F6 | 	mov	arg02, ##@LR__6016
13dc8     00 92 06 F6 | 	mov	arg01, #0
13dcc     00 96 06 F6 | 	mov	arg03, #0
13dd0     B0 16 B1 FD | 	call	#__system___basic_print_string
13dd4     00 92 06 F6 | 	mov	arg01, #0
13dd8     38 5F B1 FD | 	call	#__system___getiolock_0622
13ddc     3D 01 68 FC | 	wrlong	#0, result1
13de0     27 92 06 F6 | 	mov	arg01, #39
13de4     00 94 06 F6 | 	mov	arg02, #0
13de8     AC CB B0 FD | 	call	#_printerror
13dec     D8 00 90 FD | 	jmp	#LR__1723
13df0                 | LR__1720
13df0     7C 98 BF FD | 	call	#_pop
13df4     3F 97 02 F6 | 	mov	arg03, result3
13df8     E7 7A 62 FC | 	wrlong	result1, fp
13dfc     04 CE 05 F1 | 	add	fp, #4
13e00     E7 7C 62 FC | 	wrlong	result2, fp
13e04     04 CE 05 F1 | 	add	fp, #4
13e08     E7 96 62 FC | 	wrlong	arg03, fp
13e0c     08 CE 85 F1 | 	sub	fp, #8
13e10     E7 92 02 F6 | 	mov	arg01, fp
13e14     34 9A BF FD | 	call	#_converttoint
13e18     3D A7 02 F6 | 	mov	local01, result1
13e1c     50 98 BF FD | 	call	#_pop
13e20     3F 97 02 F6 | 	mov	arg03, result3
13e24     E7 7A 62 FC | 	wrlong	result1, fp
13e28     04 CE 05 F1 | 	add	fp, #4
13e2c     E7 7C 62 FC | 	wrlong	result2, fp
13e30     04 CE 05 F1 | 	add	fp, #4
13e34     E7 96 62 FC | 	wrlong	arg03, fp
13e38                 | ' t1=pop() : arg=converttoint(t1)
13e38                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13e38     08 CE 85 F1 | 	sub	fp, #8
13e3c     2B 96 0E F2 | 	cmp	arg03, #43 wz
13e40     18 00 90 5D |  if_ne	jmp	#LR__1721
13e44     E7 92 02 FB | 	rdlong	arg01, fp
13e48     94 99 BF FD | 	call	#_convertstring
13e4c     E7 7A 62 FC | 	wrlong	result1, fp
13e50     08 CE 05 F1 | 	add	fp, #8
13e54     E7 3E 68 FC | 	wrlong	#31, fp
13e58     08 CE 85 F1 | 	sub	fp, #8
13e5c                 | LR__1721
13e5c                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
13e5c     08 CE 05 F1 | 	add	fp, #8
13e60     E7 96 02 FB | 	rdlong	arg03, fp
13e64     08 CE 85 F1 | 	sub	fp, #8
13e68     1F 96 0E F2 | 	cmp	arg03, #31 wz
13e6c     40 00 90 AD |  if_e	jmp	#LR__1722
13e70     00 92 06 F6 | 	mov	arg01, #0
13e74     9C 5E B1 FD | 	call	#__system___getiolock_0622
13e78     3D 93 02 F6 | 	mov	arg01, result1
13e7c     10 09 B1 FD | 	call	#__system___lockmem
13e80     96 01 00 FF 
13e84     4E 95 06 F6 | 	mov	arg02, ##@LR__6017
13e88     00 92 06 F6 | 	mov	arg01, #0
13e8c     00 96 06 F6 | 	mov	arg03, #0
13e90     F0 15 B1 FD | 	call	#__system___basic_print_string
13e94     00 92 06 F6 | 	mov	arg01, #0
13e98     78 5E B1 FD | 	call	#__system___getiolock_0622
13e9c     3D 01 68 FC | 	wrlong	#0, result1
13ea0     0F 92 06 F6 | 	mov	arg01, #15
13ea4     00 94 06 F6 | 	mov	arg02, #0
13ea8     EC CA B0 FD | 	call	#_printerror
13eac     18 00 90 FD | 	jmp	#LR__1723
13eb0                 | LR__1722
13eb0     E7 92 02 FB | 	rdlong	arg01, fp
13eb4     53 95 02 F6 | 	mov	arg02, local01
13eb8     7C 21 B1 FD | 	call	#__system__Left_S
13ebc     E7 7A 62 FC | 	wrlong	result1, fp
13ec0     E7 92 02 F6 | 	mov	arg01, fp
13ec4     38 98 BF FD | 	call	#_push
13ec8                 | LR__1723
13ec8     E7 F0 03 F6 | 	mov	ptra, fp
13ecc     F2 00 A0 FD | 	call	#popregs_
13ed0                 | _do_left_ret
13ed0     2D 00 64 FD | 	ret
13ed4                 | 
13ed4                 | ' 
13ed4                 | ' ' ----------------  len
13ed4                 | ' 
13ed4                 | ' sub do_len
13ed4                 | _do_len
13ed4     01 CA 05 F6 | 	mov	COUNT_, #1
13ed8     E8 00 A0 FD | 	call	#pushregs_
13edc     14 F0 07 F1 | 	add	ptra, #20
13ee0     4C 00 00 FF 
13ee4     24 64 06 F1 | 	add	objptr, ##38948
13ee8     32 97 02 FB | 	rdlong	arg03, objptr
13eec     4B 95 02 F6 | 	mov	arg02, arg03
13ef0     01 94 66 F0 | 	shl	arg02, #1
13ef4     4B 95 02 F1 | 	add	arg02, arg03
13ef8     02 94 66 F0 | 	shl	arg02, #2
13efc     03 00 00 FF 
13f00     04 64 86 F1 | 	sub	objptr, ##1540
13f04     32 95 02 F1 | 	add	arg02, objptr
13f08     4A 97 02 FB | 	rdlong	arg03, arg02
13f0c                 | ' 
13f0c                 | ' numpar=compiledline(lineptr_e).result.uresult
13f0c                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
13f0c     02 96 16 F2 | 	cmp	arg03, #2 wc
13f10     49 00 00 FF 
13f14     20 64 86 F1 | 	sub	objptr, ##37408
13f18     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
13f1c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1730
13f20     00 92 06 F6 | 	mov	arg01, #0
13f24     EC 5D B1 FD | 	call	#__system___getiolock_0622
13f28     3D 93 02 F6 | 	mov	arg01, result1
13f2c     60 08 B1 FD | 	call	#__system___lockmem
13f30     96 01 00 FF 
13f34     56 95 06 F6 | 	mov	arg02, ##@LR__6018
13f38     00 92 06 F6 | 	mov	arg01, #0
13f3c     00 96 06 F6 | 	mov	arg03, #0
13f40     40 15 B1 FD | 	call	#__system___basic_print_string
13f44     00 92 06 F6 | 	mov	arg01, #0
13f48     C8 5D B1 FD | 	call	#__system___getiolock_0622
13f4c     3D 01 68 FC | 	wrlong	#0, result1
13f50     27 92 06 F6 | 	mov	arg01, #39
13f54     00 94 06 F6 | 	mov	arg02, #0
13f58     3C CA B0 FD | 	call	#_printerror
13f5c     C8 00 90 FD | 	jmp	#LR__1735
13f60                 | LR__1730
13f60     0C 97 BF FD | 	call	#_pop
13f64     3F 97 02 F6 | 	mov	arg03, result3
13f68     E7 7A 62 FC | 	wrlong	result1, fp
13f6c     04 CE 05 F1 | 	add	fp, #4
13f70     E7 7C 62 FC | 	wrlong	result2, fp
13f74     04 CE 05 F1 | 	add	fp, #4
13f78     E7 96 62 FC | 	wrlong	arg03, fp
13f7c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13f7c     08 CE 85 F1 | 	sub	fp, #8
13f80     2B 96 0E F2 | 	cmp	arg03, #43 wz
13f84     18 00 90 5D |  if_ne	jmp	#LR__1731
13f88     E7 92 02 FB | 	rdlong	arg01, fp
13f8c     50 98 BF FD | 	call	#_convertstring
13f90     E7 7A 62 FC | 	wrlong	result1, fp
13f94     08 CE 05 F1 | 	add	fp, #8
13f98     E7 3E 68 FC | 	wrlong	#31, fp
13f9c     08 CE 85 F1 | 	sub	fp, #8
13fa0                 | LR__1731
13fa0                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
13fa0     08 CE 05 F1 | 	add	fp, #8
13fa4     E7 96 02 FB | 	rdlong	arg03, fp
13fa8     08 CE 85 F1 | 	sub	fp, #8
13fac     1F 96 0E F2 | 	cmp	arg03, #31 wz
13fb0     40 00 90 AD |  if_e	jmp	#LR__1732
13fb4     00 92 06 F6 | 	mov	arg01, #0
13fb8     58 5D B1 FD | 	call	#__system___getiolock_0622
13fbc     3D 93 02 F6 | 	mov	arg01, result1
13fc0     CC 07 B1 FD | 	call	#__system___lockmem
13fc4     96 01 00 FF 
13fc8     5C 95 06 F6 | 	mov	arg02, ##@LR__6019
13fcc     00 92 06 F6 | 	mov	arg01, #0
13fd0     00 96 06 F6 | 	mov	arg03, #0
13fd4     AC 14 B1 FD | 	call	#__system___basic_print_string
13fd8     00 92 06 F6 | 	mov	arg01, #0
13fdc     34 5D B1 FD | 	call	#__system___getiolock_0622
13fe0     3D 01 68 FC | 	wrlong	#0, result1
13fe4     0F 92 06 F6 | 	mov	arg01, #15
13fe8     00 94 06 F6 | 	mov	arg02, #0
13fec     A8 C9 B0 FD | 	call	#_printerror
13ff0     34 00 90 FD | 	jmp	#LR__1735
13ff4                 | LR__1732
13ff4     E7 92 02 FB | 	rdlong	arg01, fp
13ff8     49 A7 02 F6 | 	mov	local01, arg01
13ffc     D7 06 48 FB | 	callpa	#(@LR__1734-@LR__1733)>>2,fcache_load_ptr_
14000                 | LR__1733
14000     53 7B CA FA | 	rdbyte	result1, local01 wz
14004     01 A6 06 51 |  if_ne	add	local01, #1
14008     F4 FF 9F 5D |  if_ne	jmp	#LR__1733
1400c                 | LR__1734
1400c     49 A7 82 F1 | 	sub	local01, arg01
14010     E7 A6 62 FC | 	wrlong	local01, fp
14014     08 CE 05 F1 | 	add	fp, #8
14018     E7 38 68 FC | 	wrlong	#28, fp
1401c     08 CE 85 F1 | 	sub	fp, #8
14020     E7 92 02 F6 | 	mov	arg01, fp
14024     D8 96 BF FD | 	call	#_push
14028                 | LR__1735
14028     E7 F0 03 F6 | 	mov	ptra, fp
1402c     F2 00 A0 FD | 	call	#popregs_
14030                 | _do_len_ret
14030     2D 00 64 FD | 	ret
14034                 | 
14034                 | ' 
14034                 | ' ' ----------------  list
14034                 | ' 
14034                 | ' sub do_list
14034                 | _do_list
14034     04 CA 05 F6 | 	mov	COUNT_, #4
14038     E8 00 A0 FD | 	call	#pushregs_
1403c     B8 F0 07 F1 | 	add	ptra, #184
14040     00 A6 06 F6 | 	mov	local01, #0
14044     1E A8 CE F9 | 	bmask	local02, #30
14048     4C 00 00 FF 
1404c     24 64 06 F1 | 	add	objptr, ##38948
14050     32 AB 02 FB | 	rdlong	local03, objptr
14054     55 97 02 F6 | 	mov	arg03, local03
14058     01 96 66 F0 | 	shl	arg03, #1
1405c     55 97 02 F1 | 	add	arg03, local03
14060     02 96 66 F0 | 	shl	arg03, #2
14064     03 00 00 FF 
14068     04 64 86 F1 | 	sub	objptr, ##1540
1406c     32 97 02 F1 | 	add	arg03, objptr
14070     4B AD 02 FB | 	rdlong	local04, arg03
14074                 | ' 
14074                 | ' startline=0 : endline=$7FFFFFFF
14074                 | ' numpar=compiledline(lineptr_e).result.uresult
14074                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
14074     01 AC 0E F2 | 	cmp	local04, #1 wz
14078     49 00 00 FF 
1407c     20 64 86 F1 | 	sub	objptr, ##37408
14080     34 00 90 5D |  if_ne	jmp	#LR__1740
14084     E8 95 BF FD | 	call	#_pop
14088     3F AB 02 F6 | 	mov	local03, result3
1408c     0C CE 05 F1 | 	add	fp, #12
14090     E7 7A 62 FC | 	wrlong	result1, fp
14094     04 CE 05 F1 | 	add	fp, #4
14098     E7 7C 62 FC | 	wrlong	result2, fp
1409c     04 CE 05 F1 | 	add	fp, #4
140a0     E7 AA 62 FC | 	wrlong	local03, fp
140a4     08 CE 85 F1 | 	sub	fp, #8
140a8     E7 92 02 F6 | 	mov	arg01, fp
140ac     0C CE 85 F1 | 	sub	fp, #12
140b0     98 97 BF FD | 	call	#_converttoint
140b4     3D A7 02 F6 | 	mov	local01, result1
140b8                 | LR__1740
140b8                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
140b8     02 AC 0E F2 | 	cmp	local04, #2 wz
140bc     68 00 90 5D |  if_ne	jmp	#LR__1741
140c0     AC 95 BF FD | 	call	#_pop
140c4     3F AB 02 F6 | 	mov	local03, result3
140c8     0C CE 05 F1 | 	add	fp, #12
140cc     E7 7A 62 FC | 	wrlong	result1, fp
140d0     04 CE 05 F1 | 	add	fp, #4
140d4     E7 7C 62 FC | 	wrlong	result2, fp
140d8     04 CE 05 F1 | 	add	fp, #4
140dc     E7 AA 62 FC | 	wrlong	local03, fp
140e0     08 CE 85 F1 | 	sub	fp, #8
140e4     E7 92 02 F6 | 	mov	arg01, fp
140e8     0C CE 85 F1 | 	sub	fp, #12
140ec     5C 97 BF FD | 	call	#_converttoint
140f0     3D A9 02 F6 | 	mov	local02, result1
140f4     78 95 BF FD | 	call	#_pop
140f8     3F AB 02 F6 | 	mov	local03, result3
140fc     0C CE 05 F1 | 	add	fp, #12
14100     E7 7A 62 FC | 	wrlong	result1, fp
14104     04 CE 05 F1 | 	add	fp, #4
14108     E7 7C 62 FC | 	wrlong	result2, fp
1410c     04 CE 05 F1 | 	add	fp, #4
14110     E7 AA 62 FC | 	wrlong	local03, fp
14114     08 CE 85 F1 | 	sub	fp, #8
14118     E7 92 02 F6 | 	mov	arg01, fp
1411c     0C CE 85 F1 | 	sub	fp, #12
14120     28 97 BF FD | 	call	#_converttoint
14124     3D A7 02 F6 | 	mov	local01, result1
14128                 | LR__1741
14128                 | ' 
14128                 | ' 
14128                 | ' print
14128     00 92 06 F6 | 	mov	arg01, #0
1412c     E4 5B B1 FD | 	call	#__system___getiolock_0622
14130     3D 93 02 F6 | 	mov	arg01, result1
14134     58 06 B1 FD | 	call	#__system___lockmem
14138     00 92 06 F6 | 	mov	arg01, #0
1413c     0A 94 06 F6 | 	mov	arg02, #10
14140     00 96 06 F6 | 	mov	arg03, #0
14144     E4 12 B1 FD | 	call	#__system___basic_print_char
14148     00 92 06 F6 | 	mov	arg01, #0
1414c     C4 5B B1 FD | 	call	#__system___getiolock_0622
14150     3D 01 68 FC | 	wrlong	#0, result1
14154     4C 00 00 FF 
14158     2C 64 06 F1 | 	add	objptr, ##38956
1415c     32 AD 02 FB | 	rdlong	local04, objptr
14160     08 00 00 FF 
14164     CC 64 06 F1 | 	add	objptr, ##4300
14168     32 AD 62 FC | 	wrlong	local04, objptr
1416c     54 00 00 FF 
14170     F8 64 86 F1 | 	sub	objptr, ##43256
14174                 | ' do 
14174                 | LR__1742
14174     E7 92 02 F6 | 	mov	arg01, fp
14178     20 92 06 F1 | 	add	arg01, #32
1417c     54 00 00 FF 
14180     F8 64 06 F1 | 	add	objptr, ##43256
14184     32 95 02 FB | 	rdlong	arg02, objptr
14188     18 96 06 F6 | 	mov	arg03, #24
1418c     49 00 00 FF 
14190     2C 64 86 F1 | 	sub	objptr, ##37420
14194     C0 F5 B0 FD | 	call	#_psram_spin2_read1
14198     0B 00 00 FF 
1419c     CC 64 86 F1 | 	sub	objptr, ##5836
141a0                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
141a0                 | '   
141a0                 | '   if header(0)<> $FFFFFFFF then
141a0     20 CE 05 F1 | 	add	fp, #32
141a4     E7 AC 02 FB | 	rdlong	local04, fp
141a8     20 CE 85 F1 | 	sub	fp, #32
141ac     FF FF 7F FF 
141b0     FF AD 0E F2 | 	cmp	local04, ##-1 wz
141b4     9C 00 90 AD |  if_e	jmp	#LR__1744
141b8     E7 92 02 F6 | 	mov	arg01, fp
141bc     38 92 06 F1 | 	add	arg01, #56
141c0     3F 96 06 F6 | 	mov	arg03, #63
141c4     28 96 62 FD | 	setq	arg03
141c8     49 01 68 FC | 	wrlong	#0, arg01
141cc     E7 92 02 F6 | 	mov	arg01, fp
141d0     38 92 06 F1 | 	add	arg01, #56
141d4     28 CE 05 F1 | 	add	fp, #40
141d8     E7 94 02 FB | 	rdlong	arg02, fp
141dc     04 CE 05 F1 | 	add	fp, #4
141e0     E7 96 02 FB | 	rdlong	arg03, fp
141e4     2C CE 85 F1 | 	sub	fp, #44
141e8     0B 00 00 FF 
141ec     CC 64 06 F1 | 	add	objptr, ##5836
141f0     64 F5 B0 FD | 	call	#_psram_spin2_read1
141f4     0B 00 00 FF 
141f8     CC 64 86 F1 | 	sub	objptr, ##5836
141fc                 | '     longfill(linebuf,0,64)
141fc                 | '     psram.read1(varptr(linebuf),header(2),header(3))
141fc                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
141fc     20 CE 05 F1 | 	add	fp, #32
14200     E7 AC 02 FB | 	rdlong	local04, fp
14204     20 CE 85 F1 | 	sub	fp, #32
14208     53 AD 52 F2 | 	cmps	local04, local01 wc
1420c     24 00 90 CD |  if_b	jmp	#LR__1743
14210     20 CE 05 F1 | 	add	fp, #32
14214     E7 AA 02 FB | 	rdlong	local03, fp
14218     20 CE 85 F1 | 	sub	fp, #32
1421c     54 AB 5A F2 | 	cmps	local03, local02 wcz
14220     10 00 90 1D |  if_a	jmp	#LR__1743
14224     E7 92 02 F6 | 	mov	arg01, fp
14228     38 92 06 F1 | 	add	arg01, #56
1422c                 | ' 
1422c                 | ' write(text)
1422c     14 E9 B0 FD | 	call	#_hg010b_spin2_write
14230                 | ' crlf
14230     B0 ED B0 FD | 	call	#_hg010b_spin2_crlf
14234                 | LR__1743
14234     34 CE 05 F1 | 	add	fp, #52
14238     E7 AC 02 FB | 	rdlong	local04, fp
1423c     34 CE 85 F1 | 	sub	fp, #52
14240     54 00 00 FF 
14244     F8 64 06 F1 | 	add	objptr, ##43256
14248     32 AD 62 FC | 	wrlong	local04, objptr
1424c     54 00 00 FF 
14250     F8 64 86 F1 | 	sub	objptr, ##43256
14254                 | LR__1744
14254     34 CE 05 F1 | 	add	fp, #52
14258     E7 AC 02 FB | 	rdlong	local04, fp
1425c     34 CE 85 F1 | 	sub	fp, #52
14260     FF FF 3F FF 
14264     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
14268     20 CE 05 51 |  if_ne	add	fp, #32
1426c     E7 AA 02 5B |  if_ne	rdlong	local03, fp
14270     20 CE 85 51 |  if_ne	sub	fp, #32
14274     FF FF 7F 5F 
14278     FF AB 0E 52 |  if_ne	cmp	local03, ##-1 wz
1427c     F4 FE 9F 5D |  if_ne	jmp	#LR__1742
14280     E7 F0 03 F6 | 	mov	ptra, fp
14284     F2 00 A0 FD | 	call	#popregs_
14288                 | _do_list_ret
14288     2D 00 64 FD | 	ret
1428c                 | 
1428c                 | ' 
1428c                 | ' '-------------------- load
1428c                 | ' 
1428c                 | ' sub do_load(amode=0 as integer)  
1428c                 | _do_load
1428c     07 CA 05 F6 | 	mov	COUNT_, #7
14290     E8 00 A0 FD | 	call	#pushregs_
14294     AC F0 07 F1 | 	add	ptra, #172
14298     49 AD 02 F6 | 	mov	local04, arg01
1429c     54 00 00 FF 
142a0     B0 64 06 F1 | 	add	objptr, ##43184
142a4     32 03 68 FC | 	wrlong	#1, objptr
142a8     08 00 00 FF 
142ac     8C 64 86 F1 | 	sub	objptr, ##4236
142b0     32 95 02 FB | 	rdlong	arg02, objptr
142b4     4A 93 02 F6 | 	mov	arg01, arg02
142b8     01 92 66 F0 | 	shl	arg01, #1
142bc     4A 93 02 F1 | 	add	arg01, arg02
142c0     02 92 66 F0 | 	shl	arg01, #2
142c4     03 00 00 FF 
142c8     04 64 86 F1 | 	sub	objptr, ##1540
142cc     32 93 02 F1 | 	add	arg01, objptr
142d0     49 AF 02 FB | 	rdlong	local05, arg01
142d4     E7 92 02 F6 | 	mov	arg01, fp
142d8     A8 92 06 F1 | 	add	arg01, #168
142dc     49 00 00 FF 
142e0     20 64 86 F1 | 	sub	objptr, ##37408
142e4     E7 94 02 F6 | 	mov	arg02, fp
142e8     28 94 06 F1 | 	add	arg02, #40
142ec     49 95 62 FC | 	wrlong	arg02, arg01
142f0                 | ' 
142f0                 | ' inload=1
142f0                 | ' numpar=compiledline(lineptr_e).result.uresult
142f0                 | ' lpoke varptr(line2$),varptr(line2)
142f0                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
142f0     01 AE 56 F2 | 	cmps	local05, #1 wc
142f4     14 00 90 CD |  if_b	jmp	#LR__1750
142f8     74 93 BF FD | 	call	#_pop
142fc     3D A7 02 F6 | 	mov	local01, result1
14300     3E A9 02 F6 | 	mov	local02, result2
14304     3F AB 02 F6 | 	mov	local03, result3
14308     18 00 90 FD | 	jmp	#LR__1751
1430c                 | LR__1750
1430c     54 00 00 FF 
14310     A0 64 06 F1 | 	add	objptr, ##43168
14314     32 A7 02 FB | 	rdlong	local01, objptr
14318     54 00 00 FF 
1431c     A0 64 86 F1 | 	sub	objptr, ##43168
14320     1F AA 06 F6 | 	mov	local03, #31
14324                 | LR__1751
14324                 | ' 'print "popped "; t1.result.uresult, t1.result_type
14324                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
14324     2B AA 0E F2 | 	cmp	local03, #43 wz
14328     10 00 90 5D |  if_ne	jmp	#LR__1752
1432c     53 93 02 F6 | 	mov	arg01, local01
14330     AC 94 BF FD | 	call	#_convertstring
14334     3D A7 02 F6 | 	mov	local01, result1
14338     1F AA 06 F6 | 	mov	local03, #31
1433c                 | LR__1752
1433c                 | ' if t1.result_type=result_string then
1433c     1F AA 0E F2 | 	cmp	local03, #31 wz
14340     7C 02 90 5D |  if_ne	jmp	#LR__1756
14344                 | '   if amode<>1234 then do_new
14344     02 00 00 FF 
14348     D2 AC 0E F2 | 	cmp	local04, ##1234 wz
1434c     D8 0D B0 5D |  if_ne	call	#_do_new
14350                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
14350     96 01 00 FF 
14354     62 95 06 F6 | 	mov	arg02, ##@LR__6020
14358     53 93 02 F6 | 	mov	arg01, local01
1435c     58 04 B1 FD | 	call	#__system___string_cmp
14360     00 7A 0E F2 | 	cmp	result1, #0 wz
14364     54 00 00 AF 
14368     A0 64 06 A1 |  if_e	add	objptr, ##43168
1436c     32 A7 02 AB |  if_e	rdlong	local01, objptr
14370     54 00 00 FF 
14374     A0 64 C6 F3 | 	sumz	objptr, ##43168
14378     32 A7 62 5C |  if_ne	wrlong	local01, objptr
1437c     54 00 00 5F 
14380     A0 64 86 51 |  if_ne	sub	objptr, ##43168
14384                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
14384     09 92 06 F6 | 	mov	arg01, #9
14388     E0 4F B1 FD | 	call	#__system__close
1438c     09 AE 06 F6 | 	mov	local05, #9
14390     4C 00 00 FF 
14394     38 64 06 F1 | 	add	objptr, ##38968
14398     32 93 02 FB | 	rdlong	arg01, objptr
1439c     4C 00 00 FF 
143a0     38 64 86 F1 | 	sub	objptr, ##38968
143a4     96 01 00 FF 
143a8     63 95 06 F6 | 	mov	arg02, ##@LR__6021
143ac     3C 04 B1 FD | 	call	#__system___string_concat
143b0     3D 93 02 F6 | 	mov	arg01, result1
143b4     53 95 02 F6 | 	mov	arg02, local01
143b8     30 04 B1 FD | 	call	#__system___string_concat
143bc     3D 95 02 F6 | 	mov	arg02, result1
143c0     57 93 02 F6 | 	mov	arg01, local05
143c4     00 96 06 F6 | 	mov	arg03, #0
143c8     74 0F B1 FD | 	call	#__system___basic_open_string
143cc     20 68 06 F1 | 	add	ptr___system__dat__, #32
143d0     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
143d4     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
143d8     20 68 86 F1 | 	sub	ptr___system__dat__, #32
143dc                 | '   r=geterr() 
143dc                 | '   if r then 
143dc     30 01 90 AD |  if_e	jmp	#LR__1754
143e0                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
143e0     09 92 06 F6 | 	mov	arg01, #9
143e4     84 4F B1 FD | 	call	#__system__close
143e8     09 B0 06 F6 | 	mov	local06, #9
143ec     4C 00 00 FF 
143f0     38 64 06 F1 | 	add	objptr, ##38968
143f4     32 93 02 FB | 	rdlong	arg01, objptr
143f8     4C 00 00 FF 
143fc     38 64 86 F1 | 	sub	objptr, ##38968
14400     96 01 00 FF 
14404     65 95 06 F6 | 	mov	arg02, ##@LR__6022
14408     E0 03 B1 FD | 	call	#__system___string_concat
1440c     3D 93 02 F6 | 	mov	arg01, result1
14410     53 95 02 F6 | 	mov	arg02, local01
14414     D4 03 B1 FD | 	call	#__system___string_concat
14418     3D 93 02 F6 | 	mov	arg01, result1
1441c     96 01 00 FF 
14420     67 95 06 F6 | 	mov	arg02, ##@LR__6023
14424     C4 03 B1 FD | 	call	#__system___string_concat
14428     3D 95 02 F6 | 	mov	arg02, result1
1442c     58 93 02 F6 | 	mov	arg01, local06
14430     00 96 06 F6 | 	mov	arg03, #0
14434     08 0F B1 FD | 	call	#__system___basic_open_string
14438     20 68 06 F1 | 	add	ptr___system__dat__, #32
1443c     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
14440     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
14444     20 68 86 F1 | 	sub	ptr___system__dat__, #32
14448     3D B3 0A F6 | 	mov	local07, result1 wz
1444c                 | '     r=geterr() 
1444c                 | '     if r then 
1444c     8C 00 90 AD |  if_e	jmp	#LR__1753
14450                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
14450     00 92 06 F6 | 	mov	arg01, #0
14454     BC 58 B1 FD | 	call	#__system___getiolock_0622
14458     3D 93 02 F6 | 	mov	arg01, result1
1445c     30 03 B1 FD | 	call	#__system___lockmem
14460     96 01 00 FF 
14464     6C 95 06 F6 | 	mov	arg02, ##@LR__6024
14468     00 92 06 F6 | 	mov	arg01, #0
1446c     00 96 06 F6 | 	mov	arg03, #0
14470     10 10 B1 FD | 	call	#__system___basic_print_string
14474     00 92 06 F6 | 	mov	arg01, #0
14478     59 95 02 F6 | 	mov	arg02, local07
1447c     00 96 06 F6 | 	mov	arg03, #0
14480     0A 98 06 F6 | 	mov	arg04, #10
14484     40 10 B1 FD | 	call	#__system___basic_print_integer
14488     96 01 00 FF 
1448c     7A 95 06 F6 | 	mov	arg02, ##@LR__6025
14490     00 92 06 F6 | 	mov	arg01, #0
14494     00 96 06 F6 | 	mov	arg03, #0
14498     E8 0F B1 FD | 	call	#__system___basic_print_string
1449c     59 93 02 F6 | 	mov	arg01, local07
144a0     9C 24 B1 FD | 	call	#__system___strerror
144a4     3D 95 02 F6 | 	mov	arg02, result1
144a8     00 92 06 F6 | 	mov	arg01, #0
144ac     00 96 06 F6 | 	mov	arg03, #0
144b0     D0 0F B1 FD | 	call	#__system___basic_print_string
144b4     00 92 06 F6 | 	mov	arg01, #0
144b8     0A 94 06 F6 | 	mov	arg02, #10
144bc     00 96 06 F6 | 	mov	arg03, #0
144c0     68 0F B1 FD | 	call	#__system___basic_print_char
144c4     00 92 06 F6 | 	mov	arg01, #0
144c8     48 58 B1 FD | 	call	#__system___getiolock_0622
144cc     3D 01 68 FC | 	wrlong	#0, result1
144d0     09 92 06 F6 | 	mov	arg01, #9
144d4     94 4E B1 FD | 	call	#__system__close
144d8     94 01 90 FD | 	jmp	#LR__1758
144dc                 | LR__1753
144dc     54 00 00 FF 
144e0     A0 64 06 F1 | 	add	objptr, ##43168
144e4     32 93 02 FB | 	rdlong	arg01, objptr
144e8     54 00 00 FF 
144ec     A0 64 86 F1 | 	sub	objptr, ##43168
144f0     96 01 00 FF 
144f4     7D 95 06 F6 | 	mov	arg02, ##@LR__6026
144f8     F0 02 B1 FD | 	call	#__system___string_concat
144fc     54 00 00 FF 
14500     A0 64 06 F1 | 	add	objptr, ##43168
14504     32 7B 62 FC | 	wrlong	result1, objptr
14508     54 00 00 FF 
1450c     A0 64 86 F1 | 	sub	objptr, ##43168
14510                 | LR__1754
14510                 | '   close #9: open currentdir$+"/"+loadname for input as #9
14510     09 92 06 F6 | 	mov	arg01, #9
14514     54 4E B1 FD | 	call	#__system__close
14518     09 B0 06 F6 | 	mov	local06, #9
1451c     4C 00 00 FF 
14520     38 64 06 F1 | 	add	objptr, ##38968
14524     32 93 02 FB | 	rdlong	arg01, objptr
14528     4C 00 00 FF 
1452c     38 64 86 F1 | 	sub	objptr, ##38968
14530     96 01 00 FF 
14534     82 95 06 F6 | 	mov	arg02, ##@LR__6027
14538     B0 02 B1 FD | 	call	#__system___string_concat
1453c     3D 93 02 F6 | 	mov	arg01, result1
14540     54 00 00 FF 
14544     A0 64 06 F1 | 	add	objptr, ##43168
14548     32 95 02 FB | 	rdlong	arg02, objptr
1454c     54 00 00 FF 
14550     A0 64 86 F1 | 	sub	objptr, ##43168
14554     94 02 B1 FD | 	call	#__system___string_concat
14558     3D 95 02 F6 | 	mov	arg02, result1
1455c     58 93 02 F6 | 	mov	arg01, local06
14560     00 96 06 F6 | 	mov	arg03, #0
14564     D8 0D B1 FD | 	call	#__system___basic_open_string
14568                 | '   do
14568                 | LR__1755
14568     09 92 06 F6 | 	mov	arg01, #9
1456c     2C 04 B1 FD | 	call	#__system___basic_read_line
14570     3D B1 02 F6 | 	mov	local06, result1
14574     38 00 00 FF 
14578     C0 65 06 F1 | 	add	objptr, ##29120
1457c     32 B1 62 FC | 	wrlong	local06, objptr
14580     38 00 00 FF 
14584     C0 65 86 F1 | 	sub	objptr, ##29120
14588     BC D3 BE FD | 	call	#_interpret
1458c     38 00 00 FF 
14590     C0 65 06 F1 | 	add	objptr, ##29120
14594     32 93 02 FB | 	rdlong	arg01, objptr
14598     38 00 00 FF 
1459c     C0 65 86 F1 | 	sub	objptr, ##29120
145a0     96 01 00 FF 
145a4     84 95 06 F6 | 	mov	arg02, ##@LR__6028
145a8     0C 02 B1 FD | 	call	#__system___string_cmp
145ac     00 7A 0E F2 | 	cmp	result1, #0 wz
145b0     B4 FF 9F 5D |  if_ne	jmp	#LR__1755
145b4                 | '   close #9   
145b4     09 92 06 F6 | 	mov	arg01, #9
145b8     B0 4D B1 FD | 	call	#__system__close
145bc     0C 00 90 FD | 	jmp	#LR__1757
145c0                 | LR__1756
145c0     1E 92 06 F6 | 	mov	arg01, #30
145c4     00 94 06 F6 | 	mov	arg02, #0
145c8     CC C3 B0 FD | 	call	#_printerror
145cc                 | LR__1757
145cc                 | ' print "Loaded ";currentdir$+"/"+loadname
145cc     00 92 06 F6 | 	mov	arg01, #0
145d0     40 57 B1 FD | 	call	#__system___getiolock_0622
145d4     3D 93 02 F6 | 	mov	arg01, result1
145d8     B4 01 B1 FD | 	call	#__system___lockmem
145dc     96 01 00 FF 
145e0     85 95 06 F6 | 	mov	arg02, ##@LR__6029
145e4     00 92 06 F6 | 	mov	arg01, #0
145e8     00 96 06 F6 | 	mov	arg03, #0
145ec     94 0E B1 FD | 	call	#__system___basic_print_string
145f0     00 B2 06 F6 | 	mov	local07, #0
145f4     4C 00 00 FF 
145f8     38 64 06 F1 | 	add	objptr, ##38968
145fc     32 93 02 FB | 	rdlong	arg01, objptr
14600     4C 00 00 FF 
14604     38 64 86 F1 | 	sub	objptr, ##38968
14608     96 01 00 FF 
1460c     8D 95 06 F6 | 	mov	arg02, ##@LR__6030
14610     D8 01 B1 FD | 	call	#__system___string_concat
14614     3D 93 02 F6 | 	mov	arg01, result1
14618     54 00 00 FF 
1461c     A0 64 06 F1 | 	add	objptr, ##43168
14620     32 95 02 FB | 	rdlong	arg02, objptr
14624     54 00 00 FF 
14628     A0 64 86 F1 | 	sub	objptr, ##43168
1462c     BC 01 B1 FD | 	call	#__system___string_concat
14630     3D 95 02 F6 | 	mov	arg02, result1
14634     59 93 02 F6 | 	mov	arg01, local07
14638     00 96 06 F6 | 	mov	arg03, #0
1463c     44 0E B1 FD | 	call	#__system___basic_print_string
14640     00 92 06 F6 | 	mov	arg01, #0
14644     0A 94 06 F6 | 	mov	arg02, #10
14648     00 96 06 F6 | 	mov	arg03, #0
1464c     DC 0D B1 FD | 	call	#__system___basic_print_char
14650     00 92 06 F6 | 	mov	arg01, #0
14654     BC 56 B1 FD | 	call	#__system___getiolock_0622
14658     3D 01 68 FC | 	wrlong	#0, result1
1465c     54 00 00 FF 
14660     B0 64 06 F1 | 	add	objptr, ##43184
14664     32 01 68 FC | 	wrlong	#0, objptr
14668     54 00 00 FF 
1466c     B0 64 86 F1 | 	sub	objptr, ##43184
14670                 | LR__1758
14670     E7 F0 03 F6 | 	mov	ptra, fp
14674     F2 00 A0 FD | 	call	#popregs_
14678                 | _do_load_ret
14678     2D 00 64 FD | 	ret
1467c                 | 
1467c                 | ' 
1467c                 | ' '-------------------- log
1467c                 | ' 
1467c                 | ' sub do_log
1467c                 | _do_log
1467c     02 CA 05 F6 | 	mov	COUNT_, #2
14680     E8 00 A0 FD | 	call	#pushregs_
14684     14 F0 07 F1 | 	add	ptra, #20
14688     4C 00 00 FF 
1468c     24 64 06 F1 | 	add	objptr, ##38948
14690     32 97 02 FB | 	rdlong	arg03, objptr
14694     4B 95 02 F6 | 	mov	arg02, arg03
14698     01 94 66 F0 | 	shl	arg02, #1
1469c     4B 95 02 F1 | 	add	arg02, arg03
146a0     02 94 66 F0 | 	shl	arg02, #2
146a4     03 00 00 FF 
146a8     04 64 86 F1 | 	sub	objptr, ##1540
146ac     32 95 02 F1 | 	add	arg02, objptr
146b0     4A A7 0A FB | 	rdlong	local01, arg02 wz
146b4                 | ' 
146b4                 | ' numpar=compiledline(lineptr_e).result.uresult
146b4                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
146b4     49 00 00 FF 
146b8     20 64 86 F1 | 	sub	objptr, ##37408
146bc     03 A6 16 52 |  if_ne	cmp	local01, #3 wc
146c0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1760
146c4     00 92 06 F6 | 	mov	arg01, #0
146c8     48 56 B1 FD | 	call	#__system___getiolock_0622
146cc     3D 93 02 F6 | 	mov	arg01, result1
146d0     BC 00 B1 FD | 	call	#__system___lockmem
146d4     96 01 00 FF 
146d8     8F 95 06 F6 | 	mov	arg02, ##@LR__6031
146dc     00 92 06 F6 | 	mov	arg01, #0
146e0     00 96 06 F6 | 	mov	arg03, #0
146e4     9C 0D B1 FD | 	call	#__system___basic_print_string
146e8     00 92 06 F6 | 	mov	arg01, #0
146ec     24 56 B1 FD | 	call	#__system___getiolock_0622
146f0     3D 01 68 FC | 	wrlong	#0, result1
146f4     27 92 06 F6 | 	mov	arg01, #39
146f8     00 94 06 F6 | 	mov	arg02, #0
146fc     98 C2 B0 FD | 	call	#_printerror
14700     AC 00 90 FD | 	jmp	#LR__1763
14704                 | LR__1760
14704                 | ' if numpar=2 then 
14704     02 A6 0E F2 | 	cmp	local01, #2 wz
14708     40 00 90 5D |  if_ne	jmp	#LR__1761
1470c     60 8F BF FD | 	call	#_pop
14710     3F A7 02 F6 | 	mov	local01, result3
14714     E7 7A 62 FC | 	wrlong	result1, fp
14718     04 CE 05 F1 | 	add	fp, #4
1471c     E7 7C 62 FC | 	wrlong	result2, fp
14720     04 CE 05 F1 | 	add	fp, #4
14724     E7 A6 62 FC | 	wrlong	local01, fp
14728     08 CE 85 F1 | 	sub	fp, #8
1472c     E7 92 02 F6 | 	mov	arg01, fp
14730     D4 91 BF FD | 	call	#_converttofloat
14734     3D 95 02 F6 | 	mov	arg02, result1
14738     FC 16 20 FF 
1473c     54 92 06 F6 | 	mov	arg01, ##1076754516
14740     FC 36 B1 FD | 	call	#__system____builtin_logbase
14744     3D A9 02 F6 | 	mov	local02, result1
14748     08 00 90 FD | 	jmp	#LR__1762
1474c                 | LR__1761
1474c     00 C0 1F FF 
14750     00 A8 06 F6 | 	mov	local02, ##1065353216
14754                 | LR__1762
14754     18 8F BF FD | 	call	#_pop
14758     3F A7 02 F6 | 	mov	local01, result3
1475c     E7 7A 62 FC | 	wrlong	result1, fp
14760     04 CE 05 F1 | 	add	fp, #4
14764     E7 7C 62 FC | 	wrlong	result2, fp
14768     04 CE 05 F1 | 	add	fp, #4
1476c     E7 A6 62 FC | 	wrlong	local01, fp
14770     08 CE 85 F1 | 	sub	fp, #8
14774     E7 92 02 F6 | 	mov	arg01, fp
14778     8C 91 BF FD | 	call	#_converttofloat
1477c     3D 95 02 F6 | 	mov	arg02, result1
14780     FC 16 20 FF 
14784     54 92 06 F6 | 	mov	arg01, ##1076754516
14788     B4 36 B1 FD | 	call	#__system____builtin_logbase
1478c     3D 93 02 F6 | 	mov	arg01, result1
14790     54 95 02 F6 | 	mov	arg02, local02
14794     CC 28 B1 FD | 	call	#__system___float_div
14798     E7 7A 62 FC | 	wrlong	result1, fp
1479c     08 CE 05 F1 | 	add	fp, #8
147a0     E7 3C 68 FC | 	wrlong	#30, fp
147a4     08 CE 85 F1 | 	sub	fp, #8
147a8     E7 92 02 F6 | 	mov	arg01, fp
147ac     50 8F BF FD | 	call	#_push
147b0                 | LR__1763
147b0     E7 F0 03 F6 | 	mov	ptra, fp
147b4     F2 00 A0 FD | 	call	#popregs_
147b8                 | _do_log_ret
147b8     2D 00 64 FD | 	ret
147bc                 | 
147bc                 | ' 
147bc                 | ' '-------------------- lpeek
147bc                 | ' 
147bc                 | ' sub do_lpeek
147bc                 | _do_lpeek
147bc     01 CA 05 F6 | 	mov	COUNT_, #1
147c0     E8 00 A0 FD | 	call	#pushregs_
147c4     14 F0 07 F1 | 	add	ptra, #20
147c8     A4 8E BF FD | 	call	#_pop
147cc     E7 7A 62 FC | 	wrlong	result1, fp
147d0     04 CE 05 F1 | 	add	fp, #4
147d4     E7 7C 62 FC | 	wrlong	result2, fp
147d8     04 CE 05 F1 | 	add	fp, #4
147dc     E7 7E 62 FC | 	wrlong	result3, fp
147e0     08 CE 85 F1 | 	sub	fp, #8
147e4     E7 92 02 F6 | 	mov	arg01, fp
147e8     60 90 BF FD | 	call	#_converttoint
147ec     3D 93 02 F6 | 	mov	arg01, result1
147f0                 | ' 
147f0                 | ' t1=pop()
147f0                 | ' a=converttoint(t1)
147f0                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
147f0     00 04 00 FF 
147f4     00 92 16 F2 | 	cmp	arg01, ##524288 wc
147f8     49 A7 02 CB |  if_b	rdlong	local01, arg01
147fc     08 00 90 CD |  if_b	jmp	#LR__1770
14800     5C C4 B0 FD | 	call	#_pslpeek
14804     3D A7 02 F6 | 	mov	local01, result1
14808                 | LR__1770
14808     08 CE 05 F1 | 	add	fp, #8
1480c     E7 3A 68 FC | 	wrlong	#29, fp
14810     08 CE 85 F1 | 	sub	fp, #8
14814     E7 A6 62 FC | 	wrlong	local01, fp
14818     E7 92 02 F6 | 	mov	arg01, fp
1481c     E0 8E BF FD | 	call	#_push
14820     E7 F0 03 F6 | 	mov	ptra, fp
14824     F2 00 A0 FD | 	call	#popregs_
14828                 | _do_lpeek_ret
14828     2D 00 64 FD | 	ret
1482c                 | 
1482c                 | ' 
1482c                 | ' '-------------------- lpoke
1482c                 | ' 
1482c                 | ' sub do_lpoke
1482c                 | _do_lpoke
1482c     02 CA 05 F6 | 	mov	COUNT_, #2
14830     E8 00 A0 FD | 	call	#pushregs_
14834     20 F0 07 F1 | 	add	ptra, #32
14838     34 8E BF FD | 	call	#_pop
1483c     3D 95 02 F6 | 	mov	arg02, result1
14840     3E 93 02 F6 | 	mov	arg01, result2
14844     3F A7 02 F6 | 	mov	local01, result3
14848     E7 94 62 FC | 	wrlong	arg02, fp
1484c     04 CE 05 F1 | 	add	fp, #4
14850     E7 92 62 FC | 	wrlong	arg01, fp
14854     04 CE 05 F1 | 	add	fp, #4
14858     E7 A6 62 FC | 	wrlong	local01, fp
1485c     08 CE 85 F1 | 	sub	fp, #8
14860     0C 8E BF FD | 	call	#_pop
14864     3F A7 02 F6 | 	mov	local01, result3
14868     0C CE 05 F1 | 	add	fp, #12
1486c     E7 7A 62 FC | 	wrlong	result1, fp
14870     04 CE 05 F1 | 	add	fp, #4
14874     E7 7C 62 FC | 	wrlong	result2, fp
14878     04 CE 05 F1 | 	add	fp, #4
1487c     E7 A6 62 FC | 	wrlong	local01, fp
14880     08 CE 85 F1 | 	sub	fp, #8
14884     E7 92 02 F6 | 	mov	arg01, fp
14888     0C CE 85 F1 | 	sub	fp, #12
1488c     BC 8F BF FD | 	call	#_converttoint
14890     3D A7 02 F6 | 	mov	local01, result1
14894     E7 92 02 F6 | 	mov	arg01, fp
14898     B0 8F BF FD | 	call	#_converttoint
1489c     3D A9 02 F6 | 	mov	local02, result1
148a0                 | ' 
148a0                 | ' t1=pop() 'value
148a0                 | ' t2=pop() 
148a0                 | ' a=converttoint(t2) : v=converttoint(t1)
148a0                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
148a0     00 04 00 FF 
148a4     00 A6 16 F2 | 	cmp	local01, ##524288 wc
148a8     53 A9 62 CC |  if_b	wrlong	local02, local01
148ac     53 93 02 36 |  if_ae	mov	arg01, local01
148b0     54 95 02 36 |  if_ae	mov	arg02, local02
148b4     78 C2 B0 3D |  if_ae	call	#_pslpoke
148b8     E7 F0 03 F6 | 	mov	ptra, fp
148bc     F2 00 A0 FD | 	call	#popregs_
148c0                 | _do_lpoke_ret
148c0     2D 00 64 FD | 	ret
148c4                 | 
148c4                 | ' 
148c4                 | ' '-------------------- memlo
148c4                 | ' 
148c4                 | ' sub do_memlo
148c4                 | _do_memlo
148c4     00 CA 05 F6 | 	mov	COUNT_, #0
148c8     E8 00 A0 FD | 	call	#pushregs_
148cc     0C F0 07 F1 | 	add	ptra, #12
148d0     45 00 00 FF 
148d4     00 64 06 F1 | 	add	objptr, ##35328
148d8     32 93 02 FB | 	rdlong	arg01, objptr
148dc     45 00 00 FF 
148e0     00 64 86 F1 | 	sub	objptr, ##35328
148e4     E7 92 62 FC | 	wrlong	arg01, fp
148e8     08 CE 05 F1 | 	add	fp, #8
148ec     E7 3A 68 FC | 	wrlong	#29, fp
148f0     08 CE 85 F1 | 	sub	fp, #8
148f4     E7 92 02 F6 | 	mov	arg01, fp
148f8     04 8E BF FD | 	call	#_push
148fc     E7 F0 03 F6 | 	mov	ptra, fp
14900     F2 00 A0 FD | 	call	#popregs_
14904                 | _do_memlo_ret
14904     2D 00 64 FD | 	ret
14908                 | 
14908                 | ' 
14908                 | ' '-------------------- memtop
14908                 | ' 
14908                 | ' sub do_memtop
14908                 | _do_memtop
14908     00 CA 05 F6 | 	mov	COUNT_, #0
1490c     E8 00 A0 FD | 	call	#pushregs_
14910     0C F0 07 F1 | 	add	ptra, #12
14914     54 00 00 FF 
14918     74 64 06 F1 | 	add	objptr, ##43124
1491c     32 93 02 FB | 	rdlong	arg01, objptr
14920     54 00 00 FF 
14924     74 64 86 F1 | 	sub	objptr, ##43124
14928     E7 92 62 FC | 	wrlong	arg01, fp
1492c     08 CE 05 F1 | 	add	fp, #8
14930     E7 3A 68 FC | 	wrlong	#29, fp
14934     08 CE 85 F1 | 	sub	fp, #8
14938     E7 92 02 F6 | 	mov	arg01, fp
1493c     C0 8D BF FD | 	call	#_push
14940     E7 F0 03 F6 | 	mov	ptra, fp
14944     F2 00 A0 FD | 	call	#popregs_
14948                 | _do_memtop_ret
14948     2D 00 64 FD | 	ret
1494c                 | 
1494c                 | ' 
1494c                 | ' '-------------------- mid$
1494c                 | ' 
1494c                 | ' sub do_mid
1494c                 | _do_mid
1494c     02 CA 05 F6 | 	mov	COUNT_, #2
14950     E8 00 A0 FD | 	call	#pushregs_
14954     18 F0 07 F1 | 	add	ptra, #24
14958     4C 00 00 FF 
1495c     24 64 06 F1 | 	add	objptr, ##38948
14960     32 97 02 FB | 	rdlong	arg03, objptr
14964     4B 95 02 F6 | 	mov	arg02, arg03
14968     01 94 66 F0 | 	shl	arg02, #1
1496c     4B 95 02 F1 | 	add	arg02, arg03
14970     02 94 66 F0 | 	shl	arg02, #2
14974     03 00 00 FF 
14978     04 64 86 F1 | 	sub	objptr, ##1540
1497c     32 95 02 F1 | 	add	arg02, objptr
14980     4A 97 02 FB | 	rdlong	arg03, arg02
14984                 | ' 
14984                 | ' numpar=compiledline(lineptr_e).result.uresult
14984                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
14984     03 96 0E F2 | 	cmp	arg03, #3 wz
14988     49 00 00 FF 
1498c     20 64 86 F1 | 	sub	objptr, ##37408
14990     40 00 90 AD |  if_e	jmp	#LR__1780
14994     00 92 06 F6 | 	mov	arg01, #0
14998     78 53 B1 FD | 	call	#__system___getiolock_0622
1499c     3D 93 02 F6 | 	mov	arg01, result1
149a0     EC FD B0 FD | 	call	#__system___lockmem
149a4     96 01 00 FF 
149a8     95 95 06 F6 | 	mov	arg02, ##@LR__6032
149ac     00 92 06 F6 | 	mov	arg01, #0
149b0     00 96 06 F6 | 	mov	arg03, #0
149b4     CC 0A B1 FD | 	call	#__system___basic_print_string
149b8     00 92 06 F6 | 	mov	arg01, #0
149bc     54 53 B1 FD | 	call	#__system___getiolock_0622
149c0     3D 01 68 FC | 	wrlong	#0, result1
149c4     27 92 06 F6 | 	mov	arg01, #39
149c8     00 94 06 F6 | 	mov	arg02, #0
149cc     C8 BF B0 FD | 	call	#_printerror
149d0     08 01 90 FD | 	jmp	#LR__1783
149d4                 | LR__1780
149d4     98 8C BF FD | 	call	#_pop
149d8     3F 97 02 F6 | 	mov	arg03, result3
149dc     E7 7A 62 FC | 	wrlong	result1, fp
149e0     04 CE 05 F1 | 	add	fp, #4
149e4     E7 7C 62 FC | 	wrlong	result2, fp
149e8     04 CE 05 F1 | 	add	fp, #4
149ec     E7 96 62 FC | 	wrlong	arg03, fp
149f0     08 CE 85 F1 | 	sub	fp, #8
149f4     E7 92 02 F6 | 	mov	arg01, fp
149f8     50 8E BF FD | 	call	#_converttoint
149fc     3D A7 02 F6 | 	mov	local01, result1
14a00     6C 8C BF FD | 	call	#_pop
14a04     3F 97 02 F6 | 	mov	arg03, result3
14a08     E7 7A 62 FC | 	wrlong	result1, fp
14a0c     04 CE 05 F1 | 	add	fp, #4
14a10     E7 7C 62 FC | 	wrlong	result2, fp
14a14     04 CE 05 F1 | 	add	fp, #4
14a18     E7 96 62 FC | 	wrlong	arg03, fp
14a1c     08 CE 85 F1 | 	sub	fp, #8
14a20     E7 92 02 F6 | 	mov	arg01, fp
14a24     24 8E BF FD | 	call	#_converttoint
14a28     3D A9 02 F6 | 	mov	local02, result1
14a2c     40 8C BF FD | 	call	#_pop
14a30     3F 97 02 F6 | 	mov	arg03, result3
14a34     E7 7A 62 FC | 	wrlong	result1, fp
14a38     04 CE 05 F1 | 	add	fp, #4
14a3c     E7 7C 62 FC | 	wrlong	result2, fp
14a40     04 CE 05 F1 | 	add	fp, #4
14a44     E7 96 62 FC | 	wrlong	arg03, fp
14a48                 | ' t1=pop() : arg2=converttoint(t1)
14a48                 | ' t1=pop() : arg1=converttoint(t1)
14a48                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14a48     08 CE 85 F1 | 	sub	fp, #8
14a4c     2B 96 0E F2 | 	cmp	arg03, #43 wz
14a50     18 00 90 5D |  if_ne	jmp	#LR__1781
14a54     E7 92 02 FB | 	rdlong	arg01, fp
14a58     84 8D BF FD | 	call	#_convertstring
14a5c     E7 7A 62 FC | 	wrlong	result1, fp
14a60     08 CE 05 F1 | 	add	fp, #8
14a64     E7 3E 68 FC | 	wrlong	#31, fp
14a68     08 CE 85 F1 | 	sub	fp, #8
14a6c                 | LR__1781
14a6c                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
14a6c     08 CE 05 F1 | 	add	fp, #8
14a70     E7 96 02 FB | 	rdlong	arg03, fp
14a74     08 CE 85 F1 | 	sub	fp, #8
14a78     1F 96 0E F2 | 	cmp	arg03, #31 wz
14a7c     40 00 90 AD |  if_e	jmp	#LR__1782
14a80     00 92 06 F6 | 	mov	arg01, #0
14a84     8C 52 B1 FD | 	call	#__system___getiolock_0622
14a88     3D 93 02 F6 | 	mov	arg01, result1
14a8c     00 FD B0 FD | 	call	#__system___lockmem
14a90     96 01 00 FF 
14a94     9C 95 06 F6 | 	mov	arg02, ##@LR__6033
14a98     00 92 06 F6 | 	mov	arg01, #0
14a9c     00 96 06 F6 | 	mov	arg03, #0
14aa0     E0 09 B1 FD | 	call	#__system___basic_print_string
14aa4     00 92 06 F6 | 	mov	arg01, #0
14aa8     68 52 B1 FD | 	call	#__system___getiolock_0622
14aac     3D 01 68 FC | 	wrlong	#0, result1
14ab0     0F 92 06 F6 | 	mov	arg01, #15
14ab4     00 94 06 F6 | 	mov	arg02, #0
14ab8     DC BE B0 FD | 	call	#_printerror
14abc     1C 00 90 FD | 	jmp	#LR__1783
14ac0                 | LR__1782
14ac0     E7 92 02 FB | 	rdlong	arg01, fp
14ac4     54 95 02 F6 | 	mov	arg02, local02
14ac8     53 97 02 F6 | 	mov	arg03, local01
14acc     80 16 B1 FD | 	call	#__system__Mid_S
14ad0     E7 7A 62 FC | 	wrlong	result1, fp
14ad4     E7 92 02 F6 | 	mov	arg01, fp
14ad8     24 8C BF FD | 	call	#_push
14adc                 | LR__1783
14adc     E7 F0 03 F6 | 	mov	ptra, fp
14ae0     F2 00 A0 FD | 	call	#popregs_
14ae4                 | _do_mid_ret
14ae4     2D 00 64 FD | 	ret
14ae8                 | 
14ae8                 | ' 
14ae8                 | ' '-------------------- mkdir
14ae8                 | ' 
14ae8                 | ' sub do_mkdir
14ae8                 | _do_mkdir
14ae8     04 CA 05 F6 | 	mov	COUNT_, #4
14aec     E8 00 A0 FD | 	call	#pushregs_
14af0     7C 8B BF FD | 	call	#_pop
14af4     3E 99 02 F6 | 	mov	arg04, result2
14af8     3F 97 02 F6 | 	mov	arg03, result3
14afc     3D A7 02 F6 | 	mov	local01, result1
14b00     4C A9 02 F6 | 	mov	local02, arg04
14b04     4B AB 02 F6 | 	mov	local03, arg03
14b08                 | ' 
14b08                 | ' t1=pop()
14b08                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14b08     2B AA 0E F2 | 	cmp	local03, #43 wz
14b0c     10 00 90 5D |  if_ne	jmp	#LR__1790
14b10     53 93 02 F6 | 	mov	arg01, local01
14b14     C8 8C BF FD | 	call	#_convertstring
14b18     3D A7 02 F6 | 	mov	local01, result1
14b1c     1F AA 06 F6 | 	mov	local03, #31
14b20                 | LR__1790
14b20                 | ' if t1.result_type<>result_string then printerror(15): return
14b20     1F AA 0E F2 | 	cmp	local03, #31 wz
14b24     10 00 90 AD |  if_e	jmp	#LR__1791
14b28     0F 92 06 F6 | 	mov	arg01, #15
14b2c     00 94 06 F6 | 	mov	arg02, #0
14b30     64 BE B0 FD | 	call	#_printerror
14b34     64 00 90 FD | 	jmp	#LR__1793
14b38                 | LR__1791
14b38     53 93 02 F6 | 	mov	arg01, local01
14b3c     48 1D B1 FD | 	call	#__system___mkdir
14b40     3D AD 0A F6 | 	mov	local04, result1 wz
14b44                 | ' filename$=t1.result.sresult
14b44                 | ' err=mkdir(filename$)
14b44                 | ' 'err=geterr() : 
14b44                 | ' if err<>0 then print "Cannot create a directory: system error "; err
14b44     54 00 90 AD |  if_e	jmp	#LR__1792
14b48     00 92 06 F6 | 	mov	arg01, #0
14b4c     C4 51 B1 FD | 	call	#__system___getiolock_0622
14b50     3D 93 02 F6 | 	mov	arg01, result1
14b54     38 FC B0 FD | 	call	#__system___lockmem
14b58     96 01 00 FF 
14b5c     A3 95 06 F6 | 	mov	arg02, ##@LR__6034
14b60     00 92 06 F6 | 	mov	arg01, #0
14b64     00 96 06 F6 | 	mov	arg03, #0
14b68     18 09 B1 FD | 	call	#__system___basic_print_string
14b6c     00 92 06 F6 | 	mov	arg01, #0
14b70     56 95 02 F6 | 	mov	arg02, local04
14b74     00 96 06 F6 | 	mov	arg03, #0
14b78     0A 98 06 F6 | 	mov	arg04, #10
14b7c     48 09 B1 FD | 	call	#__system___basic_print_integer
14b80     00 92 06 F6 | 	mov	arg01, #0
14b84     0A 94 06 F6 | 	mov	arg02, #10
14b88     00 96 06 F6 | 	mov	arg03, #0
14b8c     9C 08 B1 FD | 	call	#__system___basic_print_char
14b90     00 92 06 F6 | 	mov	arg01, #0
14b94     7C 51 B1 FD | 	call	#__system___getiolock_0622
14b98     3D 01 68 FC | 	wrlong	#0, result1
14b9c                 | LR__1792
14b9c                 | LR__1793
14b9c     E7 F0 03 F6 | 	mov	ptra, fp
14ba0     F2 00 A0 FD | 	call	#popregs_
14ba4                 | _do_mkdir_ret
14ba4     2D 00 64 FD | 	ret
14ba8                 | 
14ba8                 | ' 
14ba8                 | ' '-------------------- mode
14ba8                 | ' 
14ba8                 | ' sub do_mode
14ba8                 | _do_mode
14ba8     05 CA 05 F6 | 	mov	COUNT_, #5
14bac     E8 00 A0 FD | 	call	#pushregs_
14bb0     BC 8A BF FD | 	call	#_pop
14bb4     3D A7 02 F6 | 	mov	local01, result1
14bb8     3E A9 02 F6 | 	mov	local02, result2
14bbc     3F AB 02 F6 | 	mov	local03, result3
14bc0                 | ' t1=pop() 
14bc0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
14bc0     1E AA 0E F2 | 	cmp	local03, #30 wz
14bc4     10 00 90 5D |  if_ne	jmp	#LR__1800
14bc8     53 93 02 F6 | 	mov	arg01, local01
14bcc     00 94 06 F6 | 	mov	arg02, #0
14bd0     54 27 B1 FD | 	call	#__system___float_tointeger
14bd4     3D A7 02 F6 | 	mov	local01, result1
14bd8                 | LR__1800
14bd8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
14bd8     1F AA 0E F2 | 	cmp	local03, #31 wz
14bdc     18 00 90 5D |  if_ne	jmp	#LR__1801
14be0     53 93 02 F6 | 	mov	arg01, local01
14be4     94 2A B1 FD | 	call	#__system____builtin_atof
14be8     3D 93 02 F6 | 	mov	arg01, result1
14bec     00 94 06 F6 | 	mov	arg02, #0
14bf0     34 27 B1 FD | 	call	#__system___float_tointeger
14bf4     3D A7 02 F6 | 	mov	local01, result1
14bf8                 | LR__1801
14bf8                 | ' select case t1.result.iresult
14bf8     53 AD 02 F6 | 	mov	local04, local01
14bfc     06 AC 26 F3 | 	fle	local04, #6
14c00     30 AC 62 FD | 	jmprel	local04
14c04                 | LR__1802
14c04     18 00 90 FD | 	jmp	#LR__1803
14c08     A8 00 90 FD | 	jmp	#LR__1804
14c0c     10 01 90 FD | 	jmp	#LR__1805
14c10     78 01 90 FD | 	jmp	#LR__1806
14c14     E0 01 90 FD | 	jmp	#LR__1807
14c18     70 02 90 FD | 	jmp	#LR__1808
14c1c     FC 02 90 FD | 	jmp	#LR__1809
14c20                 | LR__1803
14c20     38 00 00 FF 
14c24     E4 65 06 F1 | 	add	objptr, ##29156
14c28     32 03 68 FC | 	wrlong	#1, objptr
14c2c     04 64 86 F1 | 	sub	objptr, #4
14c30     32 35 69 FC | 	wrlong	#154, objptr
14c34     19 00 00 FF 
14c38     00 65 06 F1 | 	add	objptr, ##13056
14c3c     32 03 68 FC | 	wrlong	#1, objptr
14c40     19 00 00 FF 
14c44     04 65 86 F1 | 	sub	objptr, ##13060
14c48     32 27 69 FC | 	wrlong	#147, objptr
14c4c     38 00 00 FF 
14c50     DC 65 86 F1 | 	sub	objptr, ##29148
14c54     04 92 06 F6 | 	mov	arg01, #4
14c58     68 D9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
14c5c     38 00 00 FF 
14c60     E0 65 06 F1 | 	add	objptr, ##29152
14c64     32 93 02 FB | 	rdlong	arg01, objptr
14c68     04 64 86 F1 | 	sub	objptr, #4
14c6c     32 95 02 FB | 	rdlong	arg02, objptr
14c70                 | ' 
14c70                 | ' write_color:=ff
14c70     38 00 00 FF 
14c74     9B 65 86 F1 | 	sub	objptr, ##29083
14c78     32 93 62 FC | 	wrlong	arg01, objptr
14c7c                 | ' write_background:=bb
14c7c     04 64 06 F1 | 	add	objptr, #4
14c80     32 95 62 FC | 	wrlong	arg02, objptr
14c84     35 AD 02 F6 | 	mov	local04, ptr__dat__
14c88     01 00 00 FF 
14c8c     00 AC 06 F1 | 	add	local04, ##512
14c90     54 00 00 FF 
14c94     3B 64 06 F1 | 	add	objptr, ##43067
14c98     32 AD 62 FC | 	wrlong	local04, objptr
14c9c     04 64 86 F1 | 	sub	objptr, #4
14ca0     03 00 80 FF 
14ca4     32 31 69 FC | 	wrlong	##1688, objptr
14ca8     54 00 00 FF 
14cac     7C 64 86 F1 | 	sub	objptr, ##43132
14cb0     68 02 90 FD | 	jmp	#LR__1809
14cb4                 | LR__1804
14cb4     38 00 00 FF 
14cb8     E4 65 06 F1 | 	add	objptr, ##29156
14cbc     32 01 68 FC | 	wrlong	#0, objptr
14cc0     04 64 86 F1 | 	sub	objptr, #4
14cc4     32 2F 68 FC | 	wrlong	#23, objptr
14cc8     19 00 00 FF 
14ccc     00 65 06 F1 | 	add	objptr, ##13056
14cd0     32 01 68 FC | 	wrlong	#0, objptr
14cd4     19 00 00 FF 
14cd8     04 65 86 F1 | 	sub	objptr, ##13060
14cdc     32 01 68 FC | 	wrlong	#0, objptr
14ce0     38 00 00 FF 
14ce4     DC 65 86 F1 | 	sub	objptr, ##29148
14ce8     00 92 06 F6 | 	mov	arg01, #0
14cec     D4 D8 B0 FD | 	call	#_hg010b_spin2_setfontfamily
14cf0     38 00 00 FF 
14cf4     E0 65 06 F1 | 	add	objptr, ##29152
14cf8     32 93 02 FB | 	rdlong	arg01, objptr
14cfc     04 64 86 F1 | 	sub	objptr, #4
14d00     32 95 02 FB | 	rdlong	arg02, objptr
14d04                 | ' 
14d04                 | ' write_color:=ff
14d04     38 00 00 FF 
14d08     9B 65 86 F1 | 	sub	objptr, ##29083
14d0c     32 93 62 FC | 	wrlong	arg01, objptr
14d10                 | ' write_background:=bb
14d10     04 64 06 F1 | 	add	objptr, #4
14d14     32 95 62 FC | 	wrlong	arg02, objptr
14d18     45 64 86 F1 | 	sub	objptr, #69
14d1c     FC 01 90 FD | 	jmp	#LR__1809
14d20                 | LR__1805
14d20     38 00 00 FF 
14d24     E4 65 06 F1 | 	add	objptr, ##29156
14d28     32 01 68 FC | 	wrlong	#0, objptr
14d2c     04 64 86 F1 | 	sub	objptr, #4
14d30     32 6B 69 FC | 	wrlong	#181, objptr
14d34     19 00 00 FF 
14d38     00 65 06 F1 | 	add	objptr, ##13056
14d3c     32 01 68 FC | 	wrlong	#0, objptr
14d40     19 00 00 FF 
14d44     04 65 86 F1 | 	sub	objptr, ##13060
14d48     32 01 68 FC | 	wrlong	#0, objptr
14d4c     38 00 00 FF 
14d50     DC 65 86 F1 | 	sub	objptr, ##29148
14d54     00 92 06 F6 | 	mov	arg01, #0
14d58     68 D8 B0 FD | 	call	#_hg010b_spin2_setfontfamily
14d5c     38 00 00 FF 
14d60     E0 65 06 F1 | 	add	objptr, ##29152
14d64     32 93 02 FB | 	rdlong	arg01, objptr
14d68     04 64 86 F1 | 	sub	objptr, #4
14d6c     32 95 02 FB | 	rdlong	arg02, objptr
14d70                 | ' 
14d70                 | ' write_color:=ff
14d70     38 00 00 FF 
14d74     9B 65 86 F1 | 	sub	objptr, ##29083
14d78     32 93 62 FC | 	wrlong	arg01, objptr
14d7c                 | ' write_background:=bb
14d7c     04 64 06 F1 | 	add	objptr, #4
14d80     32 95 62 FC | 	wrlong	arg02, objptr
14d84     45 64 86 F1 | 	sub	objptr, #69
14d88     90 01 90 FD | 	jmp	#LR__1809
14d8c                 | LR__1806
14d8c     38 00 00 FF 
14d90     E4 65 06 F1 | 	add	objptr, ##29156
14d94     32 01 68 FC | 	wrlong	#0, objptr
14d98     04 64 86 F1 | 	sub	objptr, #4
14d9c     32 1F 68 FC | 	wrlong	#15, objptr
14da0     19 00 00 FF 
14da4     00 65 06 F1 | 	add	objptr, ##13056
14da8     32 01 68 FC | 	wrlong	#0, objptr
14dac     19 00 00 FF 
14db0     04 65 86 F1 | 	sub	objptr, ##13060
14db4     32 01 68 FC | 	wrlong	#0, objptr
14db8     38 00 00 FF 
14dbc     DC 65 86 F1 | 	sub	objptr, ##29148
14dc0     00 92 06 F6 | 	mov	arg01, #0
14dc4     FC D7 B0 FD | 	call	#_hg010b_spin2_setfontfamily
14dc8     38 00 00 FF 
14dcc     E0 65 06 F1 | 	add	objptr, ##29152
14dd0     32 93 02 FB | 	rdlong	arg01, objptr
14dd4     04 64 86 F1 | 	sub	objptr, #4
14dd8     32 95 02 FB | 	rdlong	arg02, objptr
14ddc                 | ' 
14ddc                 | ' write_color:=ff
14ddc     38 00 00 FF 
14de0     9B 65 86 F1 | 	sub	objptr, ##29083
14de4     32 93 62 FC | 	wrlong	arg01, objptr
14de8                 | ' write_background:=bb
14de8     04 64 06 F1 | 	add	objptr, #4
14dec     32 95 62 FC | 	wrlong	arg02, objptr
14df0     45 64 86 F1 | 	sub	objptr, #69
14df4     24 01 90 FD | 	jmp	#LR__1809
14df8                 | LR__1807
14df8     38 00 00 FF 
14dfc     E4 65 06 F1 | 	add	objptr, ##29156
14e00     32 03 68 FC | 	wrlong	#1, objptr
14e04     04 64 86 F1 | 	sub	objptr, #4
14e08     32 03 68 FC | 	wrlong	#1, objptr
14e0c     19 00 00 FF 
14e10     00 65 06 F1 | 	add	objptr, ##13056
14e14     32 03 68 FC | 	wrlong	#1, objptr
14e18     19 00 00 FF 
14e1c     04 65 86 F1 | 	sub	objptr, ##13060
14e20     32 1D 68 FC | 	wrlong	#14, objptr
14e24     38 00 00 FF 
14e28     DC 65 86 F1 | 	sub	objptr, ##29148
14e2c     04 92 06 F6 | 	mov	arg01, #4
14e30     90 D7 B0 FD | 	call	#_hg010b_spin2_setfontfamily
14e34     38 00 00 FF 
14e38     E0 65 06 F1 | 	add	objptr, ##29152
14e3c     32 93 02 FB | 	rdlong	arg01, objptr
14e40     04 64 86 F1 | 	sub	objptr, #4
14e44     32 95 02 FB | 	rdlong	arg02, objptr
14e48                 | ' 
14e48                 | ' write_color:=ff
14e48     38 00 00 FF 
14e4c     9B 65 86 F1 | 	sub	objptr, ##29083
14e50     32 93 62 FC | 	wrlong	arg01, objptr
14e54                 | ' write_background:=bb
14e54     04 64 06 F1 | 	add	objptr, #4
14e58     32 95 62 FC | 	wrlong	arg02, objptr
14e5c     35 AF 02 F6 | 	mov	local05, ptr__dat__
14e60     07 00 00 FF 
14e64     82 AF 06 F1 | 	add	local05, ##3970
14e68     54 00 00 FF 
14e6c     3B 64 06 F1 | 	add	objptr, ##43067
14e70     32 AF 62 FC | 	wrlong	local05, objptr
14e74     04 64 86 F1 | 	sub	objptr, #4
14e78     03 00 80 FF 
14e7c     32 31 69 FC | 	wrlong	##1688, objptr
14e80     54 00 00 FF 
14e84     7C 64 86 F1 | 	sub	objptr, ##43132
14e88     90 00 90 FD | 	jmp	#LR__1809
14e8c                 | LR__1808
14e8c     38 00 00 FF 
14e90     E4 65 06 F1 | 	add	objptr, ##29156
14e94     32 05 68 FC | 	wrlong	#2, objptr
14e98     04 64 86 F1 | 	sub	objptr, #4
14e9c     32 03 68 FC | 	wrlong	#1, objptr
14ea0     19 00 00 FF 
14ea4     00 65 06 F1 | 	add	objptr, ##13056
14ea8     32 03 68 FC | 	wrlong	#1, objptr
14eac     19 00 00 FF 
14eb0     04 65 86 F1 | 	sub	objptr, ##13060
14eb4     32 0F 68 FC | 	wrlong	#7, objptr
14eb8     38 00 00 FF 
14ebc     DC 65 86 F1 | 	sub	objptr, ##29148
14ec0     08 92 06 F6 | 	mov	arg01, #8
14ec4     FC D6 B0 FD | 	call	#_hg010b_spin2_setfontfamily
14ec8     38 00 00 FF 
14ecc     E0 65 06 F1 | 	add	objptr, ##29152
14ed0     32 93 02 FB | 	rdlong	arg01, objptr
14ed4     04 64 86 F1 | 	sub	objptr, #4
14ed8     32 95 02 FB | 	rdlong	arg02, objptr
14edc                 | ' 
14edc                 | ' write_color:=ff
14edc     38 00 00 FF 
14ee0     9B 65 86 F1 | 	sub	objptr, ##29083
14ee4     32 93 62 FC | 	wrlong	arg01, objptr
14ee8                 | ' write_background:=bb
14ee8     04 64 06 F1 | 	add	objptr, #4
14eec     32 95 62 FC | 	wrlong	arg02, objptr
14ef0     35 AF 02 F6 | 	mov	local05, ptr__dat__
14ef4     07 00 00 FF 
14ef8     82 AF 06 F1 | 	add	local05, ##3970
14efc     54 00 00 FF 
14f00     3B 64 06 F1 | 	add	objptr, ##43067
14f04     32 AF 62 FC | 	wrlong	local05, objptr
14f08     04 64 86 F1 | 	sub	objptr, #4
14f0c     03 00 80 FF 
14f10     32 31 69 FC | 	wrlong	##1688, objptr
14f14     54 00 00 FF 
14f18     7C 64 86 F1 | 	sub	objptr, ##43132
14f1c                 | LR__1809
14f1c     54 00 00 FF 
14f20     78 64 06 F1 | 	add	objptr, ##43128
14f24     32 A7 62 FC | 	wrlong	local01, objptr
14f28     04 64 86 F1 | 	sub	objptr, #4
14f2c     32 93 02 FB | 	rdlong	arg01, objptr
14f30     0F 00 00 FF 
14f34     74 64 86 F1 | 	sub	objptr, ##7796
14f38     32 AF 02 FB | 	rdlong	local05, objptr
14f3c     45 00 00 FF 
14f40     00 64 86 F1 | 	sub	objptr, ##35328
14f44     57 93 82 F1 | 	sub	arg01, local05
14f48     00 94 06 F6 | 	mov	arg02, #0
14f4c     0A 96 06 F6 | 	mov	arg03, #10
14f50     38 13 B1 FD | 	call	#__system__Number_S
14f54     3D 93 02 F6 | 	mov	arg01, result1
14f58     96 01 00 FF 
14f5c     CC 95 06 F6 | 	mov	arg02, ##@LR__6035
14f60     88 F8 B0 FD | 	call	#__system___string_concat
14f64     52 00 00 FF 
14f68     DC 64 06 F1 | 	add	objptr, ##42204
14f6c     32 7B 62 FC | 	wrlong	result1, objptr
14f70     19 00 00 FF 
14f74     FC 64 86 F1 | 	sub	objptr, ##13052
14f78     32 93 02 FB | 	rdlong	arg01, objptr
14f7c     04 64 86 F1 | 	sub	objptr, #4
14f80     32 95 02 FB | 	rdlong	arg02, objptr
14f84     38 00 00 FF 
14f88     DC 65 86 F1 | 	sub	objptr, ##29148
14f8c     00 D8 B0 FD | 	call	#_hg010b_spin2_cls
14f90     96 01 00 FF 
14f94     DE 93 06 F6 | 	mov	arg01, ##@LR__6036
14f98                 | ' 
14f98                 | ' write(text)
14f98     A8 DB B0 FD | 	call	#_hg010b_spin2_write
14f9c                 | ' crlf
14f9c     44 E0 B0 FD | 	call	#_hg010b_spin2_crlf
14fa0     18 00 00 FF 
14fa4     40 6B 06 F1 | 	add	ptr__dat__, ##12608
14fa8     35 93 02 FB | 	rdlong	arg01, ptr__dat__
14fac     18 00 00 FF 
14fb0     40 6B 86 F1 | 	sub	ptr__dat__, ##12608
14fb4                 | ' 
14fb4                 | ' write(text)
14fb4     8C DB B0 FD | 	call	#_hg010b_spin2_write
14fb8                 | ' crlf
14fb8     28 E0 B0 FD | 	call	#_hg010b_spin2_crlf
14fbc     52 00 00 FF 
14fc0     DC 64 06 F1 | 	add	objptr, ##42204
14fc4     32 93 02 FB | 	rdlong	arg01, objptr
14fc8     52 00 00 FF 
14fcc     DC 64 86 F1 | 	sub	objptr, ##42204
14fd0                 | ' 
14fd0                 | ' write(text)
14fd0     70 DB B0 FD | 	call	#_hg010b_spin2_write
14fd4                 | ' crlf
14fd4     0C E0 B0 FD | 	call	#_hg010b_spin2_crlf
14fd8     E7 F0 03 F6 | 	mov	ptra, fp
14fdc     F2 00 A0 FD | 	call	#popregs_
14fe0                 | _do_mode_ret
14fe0     2D 00 64 FD | 	ret
14fe4                 | 
14fe4                 | ' 
14fe4                 | ' '-------------------- mouse
14fe4                 | ' 
14fe4                 | ' sub do_mouse
14fe4                 | _do_mouse
14fe4     88 86 BF FD | 	call	#_pop
14fe8     00 7A 4E F2 | 	cmps	result1, #0 wz
14fec                 | ' 
14fec                 | ' t1=pop()
14fec                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
14fec     14 00 90 5D |  if_ne	jmp	#LR__1810
14ff0     10 92 06 F6 | 	mov	arg01, #16
14ff4     00 94 06 F6 | 	mov	arg02, #0
14ff8     00 96 06 F6 | 	mov	arg03, #0
14ffc     F8 C9 B0 FD | 	call	#_hg010b_spin2_setspritesize
15000     10 00 90 FD | 	jmp	#LR__1811
15004                 | LR__1810
15004     10 92 06 F6 | 	mov	arg01, #16
15008     20 94 06 F6 | 	mov	arg02, #32
1500c     20 96 06 F6 | 	mov	arg03, #32
15010     E4 C9 B0 FD | 	call	#_hg010b_spin2_setspritesize
15014                 | LR__1811
15014                 | _do_mouse_ret
15014     2D 00 64 FD | 	ret
15018                 | 
15018                 | ' 
15018                 | ' '-------------------- mousek
15018                 | ' 
15018                 | ' sub do_mousek
15018                 | _do_mousek
15018     00 CA 05 F6 | 	mov	COUNT_, #0
1501c     E8 00 A0 FD | 	call	#pushregs_
15020     0C F0 07 F1 | 	add	ptra, #12
15024     08 CE 05 F1 | 	add	fp, #8
15028     E7 3A 68 FC | 	wrlong	#29, fp
1502c     08 CE 85 F1 | 	sub	fp, #8
15030     53 00 00 FF 
15034     F4 64 06 F1 | 	add	objptr, ##42740
15038     32 93 02 FB | 	rdlong	arg01, objptr
1503c     53 00 00 FF 
15040     F4 64 86 F1 | 	sub	objptr, ##42740
15044     E7 92 62 FC | 	wrlong	arg01, fp
15048     E7 92 02 F6 | 	mov	arg01, fp
1504c     B0 86 BF FD | 	call	#_push
15050     E7 F0 03 F6 | 	mov	ptra, fp
15054     F2 00 A0 FD | 	call	#popregs_
15058                 | _do_mousek_ret
15058     2D 00 64 FD | 	ret
1505c                 | 
1505c                 | ' 
1505c                 | ' '-------------------- mousew
1505c                 | ' 
1505c                 | ' sub do_mousew
1505c                 | _do_mousew
1505c     00 CA 05 F6 | 	mov	COUNT_, #0
15060     E8 00 A0 FD | 	call	#pushregs_
15064     0C F0 07 F1 | 	add	ptra, #12
15068     08 CE 05 F1 | 	add	fp, #8
1506c     E7 38 68 FC | 	wrlong	#28, fp
15070     08 CE 85 F1 | 	sub	fp, #8
15074     53 00 00 FF 
15078     F8 64 06 F1 | 	add	objptr, ##42744
1507c     32 93 02 FB | 	rdlong	arg01, objptr
15080     53 00 00 FF 
15084     F8 64 86 F1 | 	sub	objptr, ##42744
15088     E7 92 62 FC | 	wrlong	arg01, fp
1508c     E7 92 02 F6 | 	mov	arg01, fp
15090     6C 86 BF FD | 	call	#_push
15094     E7 F0 03 F6 | 	mov	ptra, fp
15098     F2 00 A0 FD | 	call	#popregs_
1509c                 | _do_mousew_ret
1509c     2D 00 64 FD | 	ret
150a0                 | 
150a0                 | ' 
150a0                 | ' '-------------------- mousex
150a0                 | ' 
150a0                 | ' sub do_mousex
150a0                 | _do_mousex
150a0     00 CA 05 F6 | 	mov	COUNT_, #0
150a4     E8 00 A0 FD | 	call	#pushregs_
150a8     0C F0 07 F1 | 	add	ptra, #12
150ac     08 CE 05 F1 | 	add	fp, #8
150b0     E7 3A 68 FC | 	wrlong	#29, fp
150b4     08 CE 85 F1 | 	sub	fp, #8
150b8     53 00 00 FF 
150bc     EC 64 06 F1 | 	add	objptr, ##42732
150c0     32 93 02 FB | 	rdlong	arg01, objptr
150c4     53 00 00 FF 
150c8     EC 64 86 F1 | 	sub	objptr, ##42732
150cc     E7 92 62 FC | 	wrlong	arg01, fp
150d0     E7 92 02 F6 | 	mov	arg01, fp
150d4     28 86 BF FD | 	call	#_push
150d8     E7 F0 03 F6 | 	mov	ptra, fp
150dc     F2 00 A0 FD | 	call	#popregs_
150e0                 | _do_mousex_ret
150e0     2D 00 64 FD | 	ret
150e4                 | 
150e4                 | ' 
150e4                 | ' '-------------------- mousey
150e4                 | ' 
150e4                 | ' sub do_mousey
150e4                 | _do_mousey
150e4     00 CA 05 F6 | 	mov	COUNT_, #0
150e8     E8 00 A0 FD | 	call	#pushregs_
150ec     0C F0 07 F1 | 	add	ptra, #12
150f0     08 CE 05 F1 | 	add	fp, #8
150f4     E7 3A 68 FC | 	wrlong	#29, fp
150f8     08 CE 85 F1 | 	sub	fp, #8
150fc     53 00 00 FF 
15100     F0 64 06 F1 | 	add	objptr, ##42736
15104     32 93 02 FB | 	rdlong	arg01, objptr
15108     53 00 00 FF 
1510c     F0 64 86 F1 | 	sub	objptr, ##42736
15110     E7 92 62 FC | 	wrlong	arg01, fp
15114     E7 92 02 F6 | 	mov	arg01, fp
15118     E4 85 BF FD | 	call	#_push
1511c     E7 F0 03 F6 | 	mov	ptra, fp
15120     F2 00 A0 FD | 	call	#popregs_
15124                 | _do_mousey_ret
15124     2D 00 64 FD | 	ret
15128                 | 
15128                 | ' 
15128                 | ' '------------------ new
15128                 | ' 
15128                 | ' sub do_new
15128                 | _do_new
15128     03 CA 05 F6 | 	mov	COUNT_, #3
1512c     E8 00 A0 FD | 	call	#pushregs_
15130                 | ' 
15130                 | ' if inrun=1 then inrun=2
15130     52 00 00 FF 
15134     90 64 06 F1 | 	add	objptr, ##42128
15138     32 97 02 FB | 	rdlong	arg03, objptr
1513c     52 00 00 FF 
15140     90 64 86 F1 | 	sub	objptr, ##42128
15144     01 96 0E F2 | 	cmp	arg03, #1 wz
15148     52 00 00 AF 
1514c     90 64 06 A1 |  if_e	add	objptr, ##42128
15150     32 05 68 AC |  if_e	wrlong	#2, objptr
15154     52 00 00 AF 
15158     90 64 86 A1 |  if_e	sub	objptr, ##42128
1515c     13 92 C6 F9 | 	decod	arg01, #19
15160     01 94 66 F6 | 	neg	arg02, #1
15164     C8 B9 B0 FD | 	call	#_pslpoke
15168     36 00 00 FF 
1516c     AC 65 06 F1 | 	add	objptr, ##28076
15170     32 01 68 FC | 	wrlong	#0, objptr
15174                 | ' pslpoke(memlo,$FFFFFFFF)
15174                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
15174     00 A6 06 F6 | 	mov	local01, #0
15178     20 00 00 FF 
1517c     10 64 86 F1 | 	sub	objptr, ##16400
15180     D7 1E 48 FB | 	callpa	#(@LR__1821-@LR__1820)>>2,fcache_load_ptr_
15184                 | LR__1820
15184     53 97 02 F6 | 	mov	arg03, local01
15188     04 96 66 F0 | 	shl	arg03, #4
1518c     32 97 02 F1 | 	add	arg03, objptr
15190     96 01 00 FF 
15194     DF 95 06 F6 | 	mov	arg02, ##@LR__6037
15198     4B 95 62 FC | 	wrlong	arg02, arg03
1519c     53 A9 02 F6 | 	mov	local02, local01
151a0     04 A8 66 F0 | 	shl	local02, #4
151a4     32 A9 02 F1 | 	add	local02, objptr
151a8     0C A8 06 F1 | 	add	local02, #12
151ac     54 01 68 FC | 	wrlong	#0, local02
151b0     01 A6 06 F1 | 	add	local01, #1
151b4     02 00 00 FF 
151b8     01 A6 56 F2 | 	cmps	local01, ##1025 wc
151bc     C4 FF 9F CD |  if_b	jmp	#LR__1820
151c0                 | LR__1821
151c0     35 00 00 FF 
151c4     90 64 06 F1 | 	add	objptr, ##27280
151c8     00 04 80 FF 
151cc     32 01 68 FC | 	wrlong	##524288, objptr
151d0     06 00 00 FF 
151d4     30 64 06 F1 | 	add	objptr, ##3120
151d8     00 04 80 FF 
151dc     32 01 68 FC | 	wrlong	##524288, objptr
151e0     04 64 06 F1 | 	add	objptr, #4
151e4     00 04 80 FF 
151e8     32 01 68 FC | 	wrlong	##524288, objptr
151ec     0D 00 00 FF 
151f0     64 64 86 F1 | 	sub	objptr, ##6756
151f4     32 01 68 FC | 	wrlong	#0, objptr
151f8     07 00 00 FF 
151fc     24 64 06 F1 | 	add	objptr, ##3620
15200     32 01 68 FC | 	wrlong	#0, objptr
15204     07 00 00 FF 
15208     20 64 86 F1 | 	sub	objptr, ##3616
1520c     00 04 80 FF 
15210     32 01 68 FC | 	wrlong	##524288, objptr
15214     0D 00 00 FF 
15218     D0 64 06 F1 | 	add	objptr, ##6864
1521c     32 01 68 FC | 	wrlong	#0, objptr
15220     96 01 00 FF 
15224     E0 AB 06 F6 | 	mov	local03, ##@LR__6038
15228     01 00 00 FF 
1522c     E8 65 06 F1 | 	add	objptr, ##1000
15230     32 AB 62 FC | 	wrlong	local03, objptr
15234     08 00 00 FF 
15238     88 64 86 F1 | 	sub	objptr, ##4232
1523c     32 01 68 FC | 	wrlong	#0, objptr
15240     04 64 06 F1 | 	add	objptr, #4
15244     FF FF FF FF 
15248     32 FF 6B FC | 	wrlong	##-1, objptr
1524c     06 00 00 FF 
15250     A0 64 06 F1 | 	add	objptr, ##3232
15254     32 01 68 FC | 	wrlong	#0, objptr
15258     04 64 06 F1 | 	add	objptr, #4
1525c     32 01 68 FC | 	wrlong	#0, objptr
15260                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
15260                 | ' stackpointer=0
15260                 | ' lineptr=0 
15260                 | ' programptr=memlo ': stringptr=0
15260                 | ' dataptr=0 : readline=""
15260                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
15260                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
15260     00 A6 06 F6 | 	mov	local01, #0
15264     06 00 00 FF 
15268     9C 64 86 F1 | 	sub	objptr, ##3228
1526c     D7 16 48 FB | 	callpa	#(@LR__1823-@LR__1822)>>2,fcache_load_ptr_
15270                 | LR__1822
15270     53 A9 02 F6 | 	mov	local02, local01
15274     02 A8 66 F0 | 	shl	local02, #2
15278     53 A9 02 F1 | 	add	local02, local01
1527c     02 A8 66 F0 | 	shl	local02, #2
15280     32 A9 02 F1 | 	add	local02, objptr
15284     08 A8 06 F1 | 	add	local02, #8
15288     FF FF FF FF 
1528c     54 FF 6B FC | 	wrlong	##-1, local02
15290     01 A6 06 F1 | 	add	local01, #1
15294     41 A6 56 F2 | 	cmps	local01, #65 wc
15298     D4 FF 9F CD |  if_b	jmp	#LR__1822
1529c                 | LR__1823
1529c     4C 00 00 FF 
152a0     3C 64 86 F1 | 	sub	objptr, ##38972
152a4                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
152a4     00 A6 06 F6 | 	mov	local01, #0
152a8                 | LR__1824
152a8     53 97 02 F6 | 	mov	arg03, local01
152ac     02 96 66 F0 | 	shl	arg03, #2
152b0     32 A9 02 F6 | 	mov	local02, objptr
152b4     54 00 00 FF 
152b8     30 A8 06 F1 | 	add	local02, ##43056
152bc     54 97 02 F1 | 	add	arg03, local02
152c0     4B AB 0A FB | 	rdlong	local03, arg03 wz
152c4     30 00 90 AD |  if_e	jmp	#LR__1825
152c8     53 93 02 F6 | 	mov	arg01, local01
152cc     00 94 06 F6 | 	mov	arg02, #0
152d0     00 96 06 F6 | 	mov	arg03, #0
152d4     20 C7 B0 FD | 	call	#_hg010b_spin2_setspritesize
152d8     53 A9 02 F6 | 	mov	local02, local01
152dc     02 A8 66 F0 | 	shl	local02, #2
152e0     32 AB 02 F6 | 	mov	local03, objptr
152e4     54 00 00 FF 
152e8     30 AA 06 F1 | 	add	local03, ##43056
152ec     55 A9 02 F1 | 	add	local02, local03
152f0     54 93 02 FB | 	rdlong	arg01, local02
152f4     D4 2F B1 FD | 	call	#__system___gc_free
152f8                 | LR__1825
152f8     01 A6 06 F1 | 	add	local01, #1
152fc     10 A6 56 F2 | 	cmps	local01, #16 wc
15300     A4 FF 9F CD |  if_b	jmp	#LR__1824
15304     54 00 00 FF 
15308     84 64 06 F1 | 	add	objptr, ##43140
1530c     00 C0 9F FF 
15310     32 01 68 FC | 	wrlong	##1065353216, objptr
15314     04 64 06 F1 | 	add	objptr, #4
15318     00 C0 9F FF 
1531c     32 01 68 FC | 	wrlong	##1065353216, objptr
15320     54 00 00 FF 
15324     84 64 86 F1 | 	sub	objptr, ##43140
15328     32 AB 02 FB | 	rdlong	local03, objptr
1532c     54 00 00 FF 
15330     70 64 06 F1 | 	add	objptr, ##43120
15334     32 AB 62 FC | 	wrlong	local03, objptr
15338     54 00 00 FF 
1533c     74 64 86 F1 | 	sub	objptr, ##43124
15340     11 92 06 F6 | 	mov	arg01, #17
15344     08 94 06 F6 | 	mov	arg02, #8
15348     10 96 06 F6 | 	mov	arg03, #16
1534c     A8 C6 B0 FD | 	call	#_hg010b_spin2_setspritesize
15350     10 92 06 F6 | 	mov	arg01, #16
15354     20 94 06 F6 | 	mov	arg02, #32
15358     20 96 06 F6 | 	mov	arg03, #32
1535c     98 C6 B0 FD | 	call	#_hg010b_spin2_setspritesize
15360     96 01 00 FF 
15364     E1 AB 06 F6 | 	mov	local03, ##@LR__6039
15368     54 00 00 FF 
1536c     A0 64 06 F1 | 	add	objptr, ##43168
15370     32 AB 62 FC | 	wrlong	local03, objptr
15374     54 00 00 FF 
15378     A0 64 86 F1 | 	sub	objptr, ##43168
1537c     F4 A9 B0 FD | 	call	#_init_audio
15380     E7 F0 03 F6 | 	mov	ptra, fp
15384     F2 00 A0 FD | 	call	#popregs_
15388                 | _do_new_ret
15388     2D 00 64 FD | 	ret
1538c                 | 
1538c                 | ' 
1538c                 | ' '-------------------- next
1538c                 | ' 
1538c                 | ' sub do_next()
1538c                 | _do_next
1538c     04 CA 05 F6 | 	mov	COUNT_, #4
15390     E8 00 A0 FD | 	call	#pushregs_
15394     D8 82 BF FD | 	call	#_pop
15398     3D A7 02 F6 | 	mov	local01, result1
1539c     3E A9 02 F6 | 	mov	local02, result2
153a0     3F AB 02 F6 | 	mov	local03, result3
153a4                 | ' t1=pop() :varnum=t1.result.uresult
153a4                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
153a4     52 00 00 FF 
153a8     D4 64 06 F1 | 	add	objptr, ##42196
153ac     32 95 02 FB | 	rdlong	arg02, objptr
153b0     4A 93 02 F6 | 	mov	arg01, arg02
153b4     02 92 66 F0 | 	shl	arg01, #2
153b8     4A 93 02 F1 | 	add	arg01, arg02
153bc     02 92 66 F0 | 	shl	arg01, #2
153c0     06 00 00 FF 
153c4     98 64 86 F1 | 	sub	objptr, ##3224
153c8     32 93 02 F1 | 	add	arg01, objptr
153cc     08 92 06 F1 | 	add	arg01, #8
153d0     49 95 02 FB | 	rdlong	arg02, arg01
153d4     53 95 0A F2 | 	cmp	arg02, local01 wz
153d8     4C 00 00 FF 
153dc     3C 64 86 F1 | 	sub	objptr, ##38972
153e0     10 00 90 AD |  if_e	jmp	#LR__1830
153e4     25 92 06 F6 | 	mov	arg01, #37
153e8     00 94 06 F6 | 	mov	arg02, #0
153ec     A8 B5 B0 FD | 	call	#_printerror
153f0     50 03 90 FD | 	jmp	#LR__1837
153f4                 | LR__1830
153f4                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
153f4     53 95 02 F6 | 	mov	arg02, local01
153f8     04 94 66 F0 | 	shl	arg02, #4
153fc     32 93 02 F6 | 	mov	arg01, objptr
15400     16 00 00 FF 
15404     9C 93 06 F1 | 	add	arg01, ##11676
15408     49 95 02 F1 | 	add	arg02, arg01
1540c     0C 94 06 F1 | 	add	arg02, #12
15410     4A 95 02 FB | 	rdlong	arg02, arg02
15414     1E 94 0E F2 | 	cmp	arg02, #30 wz
15418     54 00 90 5D |  if_ne	jmp	#LR__1831
1541c     53 95 02 F6 | 	mov	arg02, local01
15420     04 94 66 F0 | 	shl	arg02, #4
15424     16 00 00 FF 
15428     9C 65 06 F1 | 	add	objptr, ##11676
1542c     32 95 02 F1 | 	add	arg02, objptr
15430     0C 94 06 F1 | 	add	arg02, #12
15434     4A 39 68 FC | 	wrlong	#28, arg02
15438     53 AD 02 F6 | 	mov	local04, local01
1543c     04 AC 66 F0 | 	shl	local04, #4
15440     32 AD 02 F1 | 	add	local04, objptr
15444     53 95 02 F6 | 	mov	arg02, local01
15448     04 94 66 F0 | 	shl	arg02, #4
1544c     32 95 02 F1 | 	add	arg02, objptr
15450     04 94 06 F1 | 	add	arg02, #4
15454     4A 93 02 FB | 	rdlong	arg01, arg02
15458     16 00 00 FF 
1545c     9C 65 86 F1 | 	sub	objptr, ##11676
15460     01 94 06 F6 | 	mov	arg02, #1
15464     C0 1E B1 FD | 	call	#__system___float_tointeger
15468     04 AC 06 F1 | 	add	local04, #4
1546c     56 7B 62 FC | 	wrlong	result1, local04
15470                 | LR__1831
15470     53 AD 02 F6 | 	mov	local04, local01
15474     04 AC 66 F0 | 	shl	local04, #4
15478     16 00 00 FF 
1547c     9C 65 06 F1 | 	add	objptr, ##11676
15480     32 AD 02 F1 | 	add	local04, objptr
15484     53 95 02 F6 | 	mov	arg02, local01
15488     04 94 66 F0 | 	shl	arg02, #4
1548c     32 95 02 F1 | 	add	arg02, objptr
15490     3B 00 00 FF 
15494     38 65 06 F1 | 	add	objptr, ##30520
15498     32 93 02 FB | 	rdlong	arg01, objptr
1549c     49 7F 02 F6 | 	mov	result3, arg01
154a0     02 7E 66 F0 | 	shl	result3, #2
154a4     49 7F 02 F1 | 	add	result3, arg01
154a8     02 7E 66 F0 | 	shl	result3, #2
154ac     06 00 00 FF 
154b0     98 64 86 F1 | 	sub	objptr, ##3224
154b4     32 7F 02 F1 | 	add	result3, objptr
154b8     04 94 06 F1 | 	add	arg02, #4
154bc     4A 93 02 FB | 	rdlong	arg01, arg02
154c0     0C 7E 06 F1 | 	add	result3, #12
154c4     3F 7F 02 FB | 	rdlong	result3, result3
154c8     3F 93 02 F1 | 	add	arg01, result3
154cc     04 AC 06 F1 | 	add	local04, #4
154d0     56 93 62 FC | 	wrlong	arg01, local04
154d4                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
154d4                 | ' if fortable(fortop).stepval>=0 then
154d4     06 00 00 FF 
154d8     98 64 06 F1 | 	add	objptr, ##3224
154dc     32 AD 02 FB | 	rdlong	local04, objptr
154e0     56 93 02 F6 | 	mov	arg01, local04
154e4     02 92 66 F0 | 	shl	arg01, #2
154e8     56 93 02 F1 | 	add	arg01, local04
154ec     02 92 66 F0 | 	shl	arg01, #2
154f0     06 00 00 FF 
154f4     98 64 86 F1 | 	sub	objptr, ##3224
154f8     32 93 02 F1 | 	add	arg01, objptr
154fc     0C 92 06 F1 | 	add	arg01, #12
15500     49 93 02 FB | 	rdlong	arg01, arg01
15504     00 92 56 F2 | 	cmps	arg01, #0 wc
15508     4C 00 00 FF 
1550c     3C 64 86 F1 | 	sub	objptr, ##38972
15510     78 00 90 CD |  if_b	jmp	#LR__1832
15514                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
15514     04 A6 66 F0 | 	shl	local01, #4
15518     16 00 00 FF 
1551c     9C 65 06 F1 | 	add	objptr, ##11676
15520     32 A7 02 F1 | 	add	local01, objptr
15524     3B 00 00 FF 
15528     38 65 06 F1 | 	add	objptr, ##30520
1552c     32 93 02 FB | 	rdlong	arg01, objptr
15530     49 AD 02 F6 | 	mov	local04, arg01
15534     02 AC 66 F0 | 	shl	local04, #2
15538     49 AD 02 F1 | 	add	local04, arg01
1553c     02 AC 66 F0 | 	shl	local04, #2
15540     06 00 00 FF 
15544     98 64 86 F1 | 	sub	objptr, ##3224
15548     32 AD 02 F1 | 	add	local04, objptr
1554c     04 A6 06 F1 | 	add	local01, #4
15550     53 A7 02 FB | 	rdlong	local01, local01
15554     10 AC 06 F1 | 	add	local04, #16
15558     56 AD 02 FB | 	rdlong	local04, local04
1555c     56 A7 5A F2 | 	cmps	local01, local04 wcz
15560     4C 00 00 FF 
15564     3C 64 86 F1 | 	sub	objptr, ##38972
15568     9C 00 90 ED |  if_be	jmp	#LR__1834
1556c     52 00 00 FF 
15570     D4 64 06 F1 | 	add	objptr, ##42196
15574     32 AD 02 FB | 	rdlong	local04, objptr
15578     01 AC 86 F1 | 	sub	local04, #1
1557c     32 AD 62 FC | 	wrlong	local04, objptr
15580     52 00 00 FF 
15584     D4 64 86 F1 | 	sub	objptr, ##42196
15588     B8 01 90 FD | 	jmp	#LR__1837
1558c                 | LR__1832
1558c                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
1558c     53 AD 02 F6 | 	mov	local04, local01
15590     04 AC 66 F0 | 	shl	local04, #4
15594     16 00 00 FF 
15598     9C 65 06 F1 | 	add	objptr, ##11676
1559c     32 AD 02 F1 | 	add	local04, objptr
155a0     3B 00 00 FF 
155a4     38 65 06 F1 | 	add	objptr, ##30520
155a8     32 A7 02 FB | 	rdlong	local01, objptr
155ac     53 93 02 F6 | 	mov	arg01, local01
155b0     02 92 66 F0 | 	shl	arg01, #2
155b4     53 93 02 F1 | 	add	arg01, local01
155b8     02 92 66 F0 | 	shl	arg01, #2
155bc     06 00 00 FF 
155c0     98 64 86 F1 | 	sub	objptr, ##3224
155c4     32 93 02 F1 | 	add	arg01, objptr
155c8     04 AC 06 F1 | 	add	local04, #4
155cc     56 AD 02 FB | 	rdlong	local04, local04
155d0     10 92 06 F1 | 	add	arg01, #16
155d4     49 93 02 FB | 	rdlong	arg01, arg01
155d8     49 AD 52 F2 | 	cmps	local04, arg01 wc
155dc     4C 00 00 FF 
155e0     3C 64 86 F1 | 	sub	objptr, ##38972
155e4     20 00 90 3D |  if_ae	jmp	#LR__1833
155e8     52 00 00 FF 
155ec     D4 64 06 F1 | 	add	objptr, ##42196
155f0     32 AD 02 FB | 	rdlong	local04, objptr
155f4     01 AC 86 F1 | 	sub	local04, #1
155f8     32 AD 62 FC | 	wrlong	local04, objptr
155fc     52 00 00 FF 
15600     D4 64 86 F1 | 	sub	objptr, ##42196
15604     3C 01 90 FD | 	jmp	#LR__1837
15608                 | LR__1833
15608                 | LR__1834
15608                 | ' ' if not returned, goto pointer 
15608                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
15608     52 00 00 FF 
1560c     90 64 06 F1 | 	add	objptr, ##42128
15610     32 AD 02 FB | 	rdlong	local04, objptr
15614     52 00 00 FF 
15618     90 64 86 F1 | 	sub	objptr, ##42128
1561c     01 AC 16 F2 | 	cmp	local04, #1 wc
15620     DC 00 90 CD |  if_b	jmp	#LR__1835
15624     52 00 00 FF 
15628     D4 64 06 F1 | 	add	objptr, ##42196
1562c     32 AD 02 FB | 	rdlong	local04, objptr
15630     56 A7 02 F6 | 	mov	local01, local04
15634     02 A6 66 F0 | 	shl	local01, #2
15638     56 A7 02 F1 | 	add	local01, local04
1563c     02 A6 66 F0 | 	shl	local01, #2
15640     06 00 00 FF 
15644     98 64 86 F1 | 	sub	objptr, ##3224
15648     32 A7 02 F1 | 	add	local01, objptr
1564c     06 00 00 FF 
15650     20 64 06 F1 | 	add	objptr, ##3104
15654     32 AD 02 FB | 	rdlong	local04, objptr
15658     52 00 00 FF 
1565c     5C 64 86 F1 | 	sub	objptr, ##42076
15660     53 A7 02 FB | 	rdlong	local01, local01
15664     53 AD 0A F2 | 	cmp	local04, local01 wz
15668     94 00 90 AD |  if_e	jmp	#LR__1835
1566c     52 00 00 FF 
15670     D4 64 06 F1 | 	add	objptr, ##42196
15674     32 AD 02 FB | 	rdlong	local04, objptr
15678     56 A7 02 F6 | 	mov	local01, local04
1567c     02 A6 66 F0 | 	shl	local01, #2
15680     56 A7 02 F1 | 	add	local01, local04
15684     02 A6 66 F0 | 	shl	local01, #2
15688     06 00 00 FF 
1568c     98 64 86 F1 | 	sub	objptr, ##3224
15690     32 A7 02 F1 | 	add	local01, objptr
15694     53 A7 02 FB | 	rdlong	local01, local01
15698     06 00 00 FF 
1569c     20 64 06 F1 | 	add	objptr, ##3104
156a0     32 A7 62 FC | 	wrlong	local01, objptr
156a4     78 64 06 F1 | 	add	objptr, #120
156a8     32 AD 02 FB | 	rdlong	local04, objptr
156ac     56 A7 02 F6 | 	mov	local01, local04
156b0     02 A6 66 F0 | 	shl	local01, #2
156b4     56 A7 02 F1 | 	add	local01, local04
156b8     02 A6 66 F0 | 	shl	local01, #2
156bc     06 00 00 FF 
156c0     98 64 86 F1 | 	sub	objptr, ##3224
156c4     32 A7 02 F1 | 	add	local01, objptr
156c8     04 A6 06 F1 | 	add	local01, #4
156cc     53 A7 02 FB | 	rdlong	local01, local01
156d0     06 00 00 FF 
156d4     24 64 06 F1 | 	add	objptr, ##3108
156d8     32 A7 62 FC | 	wrlong	local01, objptr
156dc     06 00 00 FF 
156e0     40 64 86 F1 | 	sub	objptr, ##3136
156e4     32 AD 02 FB | 	rdlong	local04, objptr
156e8     01 AC 86 F1 | 	sub	local04, #1
156ec     04 64 06 F1 | 	add	objptr, #4
156f0     32 AD 62 FC | 	wrlong	local04, objptr
156f4     4C 00 00 FF 
156f8     24 64 86 F1 | 	sub	objptr, ##38948
156fc     44 00 90 FD | 	jmp	#LR__1836
15700                 | LR__1835
15700     52 00 00 FF 
15704     D4 64 06 F1 | 	add	objptr, ##42196
15708     32 AD 02 FB | 	rdlong	local04, objptr
1570c     56 A7 02 F6 | 	mov	local01, local04
15710     02 A6 66 F0 | 	shl	local01, #2
15714     56 A7 02 F1 | 	add	local01, local04
15718     02 A6 66 F0 | 	shl	local01, #2
1571c     06 00 00 FF 
15720     98 64 86 F1 | 	sub	objptr, ##3224
15724     32 A7 02 F1 | 	add	local01, objptr
15728     04 A6 06 F1 | 	add	local01, #4
1572c     53 A7 02 FB | 	rdlong	local01, local01
15730     01 A6 86 F1 | 	sub	local01, #1
15734     18 64 86 F1 | 	sub	objptr, #24
15738     32 A7 62 FC | 	wrlong	local01, objptr
1573c     4C 00 00 FF 
15740     24 64 86 F1 | 	sub	objptr, ##38948
15744                 | LR__1836
15744                 | LR__1837
15744     E7 F0 03 F6 | 	mov	ptra, fp
15748     F2 00 A0 FD | 	call	#popregs_
1574c                 | _do_next_ret
1574c     2D 00 64 FD | 	ret
15750                 | 
15750                 | ' 
15750                 | ' '-------------------- no command (print "Unknown command")
15750                 | ' 
15750                 | ' sub do_no_command
15750                 | _do_no_command
15750     52 00 00 FF 
15754     94 64 06 F1 | 	add	objptr, ##42132
15758     32 95 02 FB | 	rdlong	arg02, objptr
1575c     52 00 00 FF 
15760     94 64 86 F1 | 	sub	objptr, ##42132
15764     17 92 06 F6 | 	mov	arg01, #23
15768     2C B2 B0 FD | 	call	#_printerror
1576c                 | _do_no_command_ret
1576c     2D 00 64 FD | 	ret
15770                 | 
15770                 | ' 
15770                 | ' '-------------------- nothing
15770                 | ' 
15770                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
15770                 | _do_nothing
15770                 | _do_nothing_ret
15770     2D 00 64 FD | 	ret
15774                 | 
15774                 | ' 
15774                 | ' '-------------------- on
15774                 | ' 
15774                 | ' sub do_on
15774                 | _do_on
15774     02 CA 05 F6 | 	mov	COUNT_, #2
15778     E8 00 A0 FD | 	call	#pushregs_
1577c     18 F0 07 F1 | 	add	ptra, #24
15780     4C 00 00 FF 
15784     24 64 06 F1 | 	add	objptr, ##38948
15788     32 93 02 FB | 	rdlong	arg01, objptr
1578c     49 7D 02 F6 | 	mov	result2, arg01
15790     01 7C 66 F0 | 	shl	result2, #1
15794     49 7D 02 F1 | 	add	result2, arg01
15798     02 7C 66 F0 | 	shl	result2, #2
1579c     03 00 00 FF 
157a0     04 64 86 F1 | 	sub	objptr, ##1540
157a4     32 7D 02 F1 | 	add	result2, objptr
157a8     3E A7 02 FB | 	rdlong	local01, result2
157ac     49 A9 02 F6 | 	mov	local02, arg01
157b0     01 A8 66 F0 | 	shl	local02, #1
157b4     49 A9 02 F1 | 	add	local02, arg01
157b8     02 A8 66 F0 | 	shl	local02, #2
157bc     32 A9 02 F1 | 	add	local02, objptr
157c0     04 A8 06 F1 | 	add	local02, #4
157c4     54 A9 02 FB | 	rdlong	local02, local02
157c8     49 00 00 FF 
157cc     20 64 86 F1 | 	sub	objptr, ##37408
157d0     9C 7E BF FD | 	call	#_pop
157d4     E7 7A 62 FC | 	wrlong	result1, fp
157d8     04 CE 05 F1 | 	add	fp, #4
157dc     E7 7C 62 FC | 	wrlong	result2, fp
157e0     04 CE 05 F1 | 	add	fp, #4
157e4     E7 7E 62 FC | 	wrlong	result3, fp
157e8     08 CE 85 F1 | 	sub	fp, #8
157ec     E7 92 02 F6 | 	mov	arg01, fp
157f0     58 80 BF FD | 	call	#_converttoint
157f4                 | ' 
157f4                 | ' numpar=compiledline(lineptr_e).result.uresult
157f4                 | ' skip=compiledline(lineptr_e).result.twowords(1)
157f4                 | ' t1=pop()
157f4                 | ' t=converttoint(t1)
157f4                 | ' if t<1 orelse t>numpar then return
157f4     01 7A 56 F2 | 	cmps	result1, #1 wc
157f8     30 00 90 CD |  if_b	jmp	#LR__1840
157fc     53 7B 5A F2 | 	cmps	result1, local01 wcz
15800     28 00 90 1D |  if_a	jmp	#LR__1840
15804     01 7A 86 F1 | 	sub	result1, #1
15808     3D A9 02 FD | 	qmul	local02, result1
1580c     4C 00 00 FF 
15810     24 64 06 F1 | 	add	objptr, ##38948
15814     32 A7 02 FB | 	rdlong	local01, objptr
15818     18 A8 62 FD | 	getqx	local02
1581c     54 A7 02 F1 | 	add	local01, local02
15820     32 A7 62 FC | 	wrlong	local01, objptr
15824     4C 00 00 FF 
15828     24 64 86 F1 | 	sub	objptr, ##38948
1582c                 | LR__1840
1582c     E7 F0 03 F6 | 	mov	ptra, fp
15830     F2 00 A0 FD | 	call	#popregs_
15834                 | _do_on_ret
15834     2D 00 64 FD | 	ret
15838                 | 
15838                 | ' 
15838                 | ' '-------------------- open
15838                 | ' 
15838                 | ' sub do_open
15838                 | _do_open
15838     04 CA 05 F6 | 	mov	COUNT_, #4
1583c     E8 00 A0 FD | 	call	#pushregs_
15840     20 F0 07 F1 | 	add	ptra, #32
15844     28 7E BF FD | 	call	#_pop
15848     3F 97 02 F6 | 	mov	arg03, result3
1584c     E7 7A 62 FC | 	wrlong	result1, fp
15850     04 CE 05 F1 | 	add	fp, #4
15854     E7 7C 62 FC | 	wrlong	result2, fp
15858     04 CE 05 F1 | 	add	fp, #4
1585c     E7 96 62 FC | 	wrlong	arg03, fp
15860                 | ' 
15860                 | ' numpar=compiledline(lineptr_e).result.uresult
15860                 | ' 
15860                 | ' t1=pop()
15860                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15860     08 CE 85 F1 | 	sub	fp, #8
15864     2B 96 0E F2 | 	cmp	arg03, #43 wz
15868     18 00 90 5D |  if_ne	jmp	#LR__1850
1586c     E7 92 02 FB | 	rdlong	arg01, fp
15870     6C 7F BF FD | 	call	#_convertstring
15874     E7 7A 62 FC | 	wrlong	result1, fp
15878     08 CE 05 F1 | 	add	fp, #8
1587c     E7 3E 68 FC | 	wrlong	#31, fp
15880     08 CE 85 F1 | 	sub	fp, #8
15884                 | LR__1850
15884                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
15884     08 CE 05 F1 | 	add	fp, #8
15888     E7 96 02 FB | 	rdlong	arg03, fp
1588c     08 CE 85 F1 | 	sub	fp, #8
15890     1F 96 0E F2 | 	cmp	arg03, #31 wz
15894     44 00 90 AD |  if_e	jmp	#LR__1851
15898     00 92 06 F6 | 	mov	arg01, #0
1589c     74 44 B1 FD | 	call	#__system___getiolock_0622
158a0     3D 93 02 F6 | 	mov	arg01, result1
158a4     E8 EE B0 FD | 	call	#__system___lockmem
158a8     96 01 00 FF 
158ac     EC 95 06 F6 | 	mov	arg02, ##@LR__6040
158b0     00 92 06 F6 | 	mov	arg01, #0
158b4     00 96 06 F6 | 	mov	arg03, #0
158b8     C8 FB B0 FD | 	call	#__system___basic_print_string
158bc     00 92 06 F6 | 	mov	arg01, #0
158c0     0A 94 06 F6 | 	mov	arg02, #10
158c4     00 96 06 F6 | 	mov	arg03, #0
158c8     60 FB B0 FD | 	call	#__system___basic_print_char
158cc     00 92 06 F6 | 	mov	arg01, #0
158d0     40 44 B1 FD | 	call	#__system___getiolock_0622
158d4     3D 01 68 FC | 	wrlong	#0, result1
158d8     C4 01 90 FD | 	jmp	#LR__1862
158dc                 | LR__1851
158dc     E7 A6 02 FB | 	rdlong	local01, fp
158e0     8C 7D BF FD | 	call	#_pop
158e4     3F 97 02 F6 | 	mov	arg03, result3
158e8     E7 7A 62 FC | 	wrlong	result1, fp
158ec     04 CE 05 F1 | 	add	fp, #4
158f0     E7 7C 62 FC | 	wrlong	result2, fp
158f4     04 CE 05 F1 | 	add	fp, #4
158f8     E7 96 62 FC | 	wrlong	arg03, fp
158fc                 | ' filename=t1.result.sresult
158fc                 | ' t1=pop()
158fc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
158fc     08 CE 85 F1 | 	sub	fp, #8
15900     2B 96 0E F2 | 	cmp	arg03, #43 wz
15904     18 00 90 5D |  if_ne	jmp	#LR__1852
15908     E7 92 02 FB | 	rdlong	arg01, fp
1590c     D0 7E BF FD | 	call	#_convertstring
15910     E7 7A 62 FC | 	wrlong	result1, fp
15914     08 CE 05 F1 | 	add	fp, #8
15918     E7 3E 68 FC | 	wrlong	#31, fp
1591c     08 CE 85 F1 | 	sub	fp, #8
15920                 | LR__1852
15920     00 A8 06 F6 | 	mov	local02, #0
15924                 | ' mode=0
15924                 | ' if t1.result_type=result_string then
15924     08 CE 05 F1 | 	add	fp, #8
15928     E7 94 02 FB | 	rdlong	arg02, fp
1592c     08 CE 85 F1 | 	sub	fp, #8
15930     1F 94 0E F2 | 	cmp	arg02, #31 wz
15934     4C 00 90 5D |  if_ne	jmp	#LR__1853
15938                 | '   if t1.result.sresult="read" then mode=1
15938     E7 92 02 FB | 	rdlong	arg01, fp
1593c     96 01 00 FF 
15940     FE 95 06 F6 | 	mov	arg02, ##@LR__6041
15944     70 EE B0 FD | 	call	#__system___string_cmp
15948     00 7A 0E F2 | 	cmp	result1, #0 wz
1594c     01 A8 06 A6 |  if_e	mov	local02, #1
15950                 | '   if t1.result.sresult="write" then mode=2
15950     E7 92 02 FB | 	rdlong	arg01, fp
15954     97 01 00 FF 
15958     03 94 06 F6 | 	mov	arg02, ##@LR__6042
1595c     58 EE B0 FD | 	call	#__system___string_cmp
15960     00 7A 0E F2 | 	cmp	result1, #0 wz
15964     02 A8 06 A6 |  if_e	mov	local02, #2
15968                 | '   if t1.result.sresult="append" then mode=4
15968     E7 92 02 FB | 	rdlong	arg01, fp
1596c     97 01 00 FF 
15970     09 94 06 F6 | 	mov	arg02, ##@LR__6043
15974     40 EE B0 FD | 	call	#__system___string_cmp
15978     00 7A 0E F2 | 	cmp	result1, #0 wz
1597c     04 A8 06 A6 |  if_e	mov	local02, #4
15980     0C 00 90 FD | 	jmp	#LR__1854
15984                 | LR__1853
15984     E7 92 02 F6 | 	mov	arg01, fp
15988     C0 7E BF FD | 	call	#_converttoint
1598c     3D A9 02 F6 | 	mov	local02, result1
15990                 | LR__1854
15990     DC 7C BF FD | 	call	#_pop
15994     3F 97 02 F6 | 	mov	arg03, result3
15998     E7 7A 62 FC | 	wrlong	result1, fp
1599c     04 CE 05 F1 | 	add	fp, #4
159a0     E7 7C 62 FC | 	wrlong	result2, fp
159a4     04 CE 05 F1 | 	add	fp, #4
159a8     E7 96 62 FC | 	wrlong	arg03, fp
159ac                 | ' t1=pop()
159ac                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
159ac     08 CE 85 F1 | 	sub	fp, #8
159b0     2C 96 0E F2 | 	cmp	arg03, #44 wz
159b4     44 00 90 AD |  if_e	jmp	#LR__1855
159b8     00 92 06 F6 | 	mov	arg01, #0
159bc     54 43 B1 FD | 	call	#__system___getiolock_0622
159c0     3D 93 02 F6 | 	mov	arg01, result1
159c4     C8 ED B0 FD | 	call	#__system___lockmem
159c8     97 01 00 FF 
159cc     10 94 06 F6 | 	mov	arg02, ##@LR__6044
159d0     00 92 06 F6 | 	mov	arg01, #0
159d4     00 96 06 F6 | 	mov	arg03, #0
159d8     A8 FA B0 FD | 	call	#__system___basic_print_string
159dc     00 92 06 F6 | 	mov	arg01, #0
159e0     0A 94 06 F6 | 	mov	arg02, #10
159e4     00 96 06 F6 | 	mov	arg03, #0
159e8     40 FA B0 FD | 	call	#__system___basic_print_char
159ec     00 92 06 F6 | 	mov	arg01, #0
159f0     20 43 B1 FD | 	call	#__system___getiolock_0622
159f4     3D 01 68 FC | 	wrlong	#0, result1
159f8     A4 00 90 FD | 	jmp	#LR__1862
159fc                 | LR__1855
159fc     E7 AA 02 FB | 	rdlong	local03, fp
15a00                 | ' channel  = t1.result.iresult
15a00                 | ' select case  mode
15a00     54 AD 02 F6 | 	mov	local04, local02
15a04     01 AC 86 F1 | 	sub	local04, #1
15a08     04 AC 26 F3 | 	fle	local04, #4
15a0c     30 AC 62 FD | 	jmprel	local04
15a10                 | LR__1856
15a10     10 00 90 FD | 	jmp	#LR__1857
15a14     20 00 90 FD | 	jmp	#LR__1858
15a18     44 00 90 FD | 	jmp	#LR__1860
15a1c     2C 00 90 FD | 	jmp	#LR__1859
15a20     3C 00 90 FD | 	jmp	#LR__1860
15a24                 | LR__1857
15a24     55 93 02 F6 | 	mov	arg01, local03
15a28     53 95 02 F6 | 	mov	arg02, local01
15a2c     00 96 06 F6 | 	mov	arg03, #0
15a30     0C F9 B0 FD | 	call	#__system___basic_open_string
15a34     68 00 90 FD | 	jmp	#LR__1861
15a38                 | LR__1858
15a38     55 93 02 F6 | 	mov	arg01, local03
15a3c     53 95 02 F6 | 	mov	arg02, local01
15a40     0D 96 06 F6 | 	mov	arg03, #13
15a44     F8 F8 B0 FD | 	call	#__system___basic_open_string
15a48     54 00 90 FD | 	jmp	#LR__1861
15a4c                 | LR__1859
15a4c     55 93 02 F6 | 	mov	arg01, local03
15a50     53 95 02 F6 | 	mov	arg02, local01
15a54     25 96 06 F6 | 	mov	arg03, #37
15a58     E4 F8 B0 FD | 	call	#__system___basic_open_string
15a5c     40 00 90 FD | 	jmp	#LR__1861
15a60                 | LR__1860
15a60     00 92 06 F6 | 	mov	arg01, #0
15a64     AC 42 B1 FD | 	call	#__system___getiolock_0622
15a68     3D 93 02 F6 | 	mov	arg01, result1
15a6c     20 ED B0 FD | 	call	#__system___lockmem
15a70     97 01 00 FF 
15a74     22 94 06 F6 | 	mov	arg02, ##@LR__6045
15a78     00 92 06 F6 | 	mov	arg01, #0
15a7c     00 96 06 F6 | 	mov	arg03, #0
15a80     00 FA B0 FD | 	call	#__system___basic_print_string
15a84     00 92 06 F6 | 	mov	arg01, #0
15a88     0A 94 06 F6 | 	mov	arg02, #10
15a8c     00 96 06 F6 | 	mov	arg03, #0
15a90     98 F9 B0 FD | 	call	#__system___basic_print_char
15a94     00 92 06 F6 | 	mov	arg01, #0
15a98     78 42 B1 FD | 	call	#__system___getiolock_0622
15a9c     3D 01 68 FC | 	wrlong	#0, result1
15aa0                 | LR__1861
15aa0                 | LR__1862
15aa0     E7 F0 03 F6 | 	mov	ptra, fp
15aa4     F2 00 A0 FD | 	call	#popregs_
15aa8                 | _do_open_ret
15aa8     2D 00 64 FD | 	ret
15aac                 | 
15aac                 | ' 
15aac                 | ' ' ------------------ padrx
15aac                 | ' 
15aac                 | ' sub do_padrx
15aac                 | _do_padrx
15aac     04 CA 05 F6 | 	mov	COUNT_, #4
15ab0     E8 00 A0 FD | 	call	#pushregs_
15ab4     14 F0 07 F1 | 	add	ptra, #20
15ab8     4C 00 00 FF 
15abc     24 64 06 F1 | 	add	objptr, ##38948
15ac0     32 A7 02 FB | 	rdlong	local01, objptr
15ac4     53 97 02 F6 | 	mov	arg03, local01
15ac8     01 96 66 F0 | 	shl	arg03, #1
15acc     53 97 02 F1 | 	add	arg03, local01
15ad0     02 96 66 F0 | 	shl	arg03, #2
15ad4     03 00 00 FF 
15ad8     04 64 86 F1 | 	sub	objptr, ##1540
15adc     32 97 02 F1 | 	add	arg03, objptr
15ae0     4B A9 02 FB | 	rdlong	local02, arg03
15ae4                 | ' 
15ae4                 | ' numpar=compiledline(lineptr_e).result.uresult
15ae4                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
15ae4     02 A8 16 F2 | 	cmp	local02, #2 wc
15ae8     49 00 00 FF 
15aec     20 64 86 F1 | 	sub	objptr, ##37408
15af0     40 00 90 CD |  if_b	jmp	#LR__1870
15af4     00 92 06 F6 | 	mov	arg01, #0
15af8     18 42 B1 FD | 	call	#__system___getiolock_0622
15afc     3D 93 02 F6 | 	mov	arg01, result1
15b00     8C EC B0 FD | 	call	#__system___lockmem
15b04     97 01 00 FF 
15b08     35 94 06 F6 | 	mov	arg02, ##@LR__6046
15b0c     00 92 06 F6 | 	mov	arg01, #0
15b10     00 96 06 F6 | 	mov	arg03, #0
15b14     6C F9 B0 FD | 	call	#__system___basic_print_string
15b18     00 92 06 F6 | 	mov	arg01, #0
15b1c     F4 41 B1 FD | 	call	#__system___getiolock_0622
15b20     3D 01 68 FC | 	wrlong	#0, result1
15b24     27 92 06 F6 | 	mov	arg01, #39
15b28     00 94 06 F6 | 	mov	arg02, #0
15b2c     68 AE B0 FD | 	call	#_printerror
15b30     A0 01 90 FD | 	jmp	#LR__1874
15b34                 | LR__1870
15b34                 | ' if numpar=0 then 
15b34     00 A8 0E F2 | 	cmp	local02, #0 wz
15b38     8C 00 90 5D |  if_ne	jmp	#LR__1871
15b3c     00 C0 1B FF 
15b40     00 A8 06 F6 | 	mov	local02, ##931135488
15b44     53 00 00 FF 
15b48     6C 65 06 F1 | 	add	objptr, ##42860
15b4c     32 93 02 FB | 	rdlong	arg01, objptr
15b50     53 00 00 FF 
15b54     6C 65 86 F1 | 	sub	objptr, ##42860
15b58     49 93 52 F6 | 	abs	arg01, arg01 wc
15b5c     1F AA C6 C9 |  if_b	decod	local03, #31
15b60     00 AA 06 36 |  if_ae	mov	local03, #0
15b64     F4 0E B1 FD | 	call	#__system___float_fromuns
15b68     55 7B 62 F5 | 	xor	result1, local03
15b6c     3D 93 02 F6 | 	mov	arg01, result1
15b70     FF 7F 23 FF 
15b74     00 94 06 F6 | 	mov	arg02, ##1191181824
15b78     E8 14 B1 FD | 	call	#__system___float_div
15b7c     3D 95 02 F6 | 	mov	arg02, result1
15b80     54 93 02 F6 | 	mov	arg01, local02
15b84     08 0F B1 FD | 	call	#__system___float_add
15b88     3D AD 02 F6 | 	mov	local04, result1
15b8c                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
15b8c     56 93 02 F6 | 	mov	arg01, local04
15b90     1F 92 06 F4 | 	bitl	arg01, #31
15b94     89 41 1D FF 
15b98     6F 94 06 F6 | 	mov	arg02, ##981668463
15b9c     01 96 06 F6 | 	mov	arg03, #1
15ba0     F0 16 B1 FD | 	call	#__system___float_cmp
15ba4     00 7A 56 F2 | 	cmps	result1, #0 wc
15ba8     00 AC 06 C6 |  if_b	mov	local04, #0
15bac     E7 AC 62 FC | 	wrlong	local04, fp
15bb0     08 CE 05 F1 | 	add	fp, #8
15bb4     E7 3C 68 FC | 	wrlong	#30, fp
15bb8     08 CE 85 F1 | 	sub	fp, #8
15bbc     E7 92 02 F6 | 	mov	arg01, fp
15bc0     3C 7B BF FD | 	call	#_push
15bc4                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
15bc4     0C 01 90 FD | 	jmp	#LR__1874
15bc8                 | LR__1871
15bc8     A4 7A BF FD | 	call	#_pop
15bcc     E7 7A 62 FC | 	wrlong	result1, fp
15bd0     04 CE 05 F1 | 	add	fp, #4
15bd4     E7 7C 62 FC | 	wrlong	result2, fp
15bd8     04 CE 05 F1 | 	add	fp, #4
15bdc     E7 7E 62 FC | 	wrlong	result3, fp
15be0                 | ' t1=pop()
15be0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
15be0     08 CE 85 F1 | 	sub	fp, #8
15be4     1C 7E 0E F2 | 	cmp	result3, #28 wz
15be8     08 CE 05 51 |  if_ne	add	fp, #8
15bec     E7 A6 02 5B |  if_ne	rdlong	local01, fp
15bf0     08 CE 85 51 |  if_ne	sub	fp, #8
15bf4     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
15bf8     CC 00 90 5D |  if_ne	jmp	#LR__1873
15bfc     E7 AC 02 FB | 	rdlong	local04, fp
15c00     54 00 00 FF 
15c04     E4 64 06 F1 | 	add	objptr, ##43236
15c08     32 AD 62 FC | 	wrlong	local04, objptr
15c0c                 | '   q=t1.result.uresult
15c0c                 | '   if q<7 then 
15c0c     54 00 00 FF 
15c10     E4 64 86 F1 | 	sub	objptr, ##43236
15c14     07 AC 56 F2 | 	cmps	local04, #7 wc
15c18     9C 00 90 3D |  if_ae	jmp	#LR__1872
15c1c     00 C0 1B FF 
15c20     00 AC 06 F6 | 	mov	local04, ##931135488
15c24     54 00 00 FF 
15c28     E4 64 06 F1 | 	add	objptr, ##43236
15c2c     32 A9 02 FB | 	rdlong	local02, objptr
15c30     02 A8 66 F0 | 	shl	local02, #2
15c34     78 65 86 F1 | 	sub	objptr, #376
15c38     32 A9 02 F1 | 	add	local02, objptr
15c3c     54 93 02 FB | 	rdlong	arg01, local02
15c40     53 00 00 FF 
15c44     6C 65 86 F1 | 	sub	objptr, ##42860
15c48     49 93 52 F6 | 	abs	arg01, arg01 wc
15c4c     1F AA C6 C9 |  if_b	decod	local03, #31
15c50     00 AA 06 36 |  if_ae	mov	local03, #0
15c54     04 0E B1 FD | 	call	#__system___float_fromuns
15c58     55 7B 62 F5 | 	xor	result1, local03
15c5c     3D 93 02 F6 | 	mov	arg01, result1
15c60     FF 7F 23 FF 
15c64     00 94 06 F6 | 	mov	arg02, ##1191181824
15c68     F8 13 B1 FD | 	call	#__system___float_div
15c6c     3D 95 02 F6 | 	mov	arg02, result1
15c70     56 93 02 F6 | 	mov	arg01, local04
15c74     18 0E B1 FD | 	call	#__system___float_add
15c78     3D AD 02 F6 | 	mov	local04, result1
15c7c                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
15c7c     56 93 02 F6 | 	mov	arg01, local04
15c80     1F 92 06 F4 | 	bitl	arg01, #31
15c84     89 41 1D FF 
15c88     6F 94 06 F6 | 	mov	arg02, ##981668463
15c8c     01 96 06 F6 | 	mov	arg03, #1
15c90     00 16 B1 FD | 	call	#__system___float_cmp
15c94     00 7A 56 F2 | 	cmps	result1, #0 wc
15c98     00 AC 06 C6 |  if_b	mov	local04, #0
15c9c     E7 AC 62 FC | 	wrlong	local04, fp
15ca0     08 CE 05 F1 | 	add	fp, #8
15ca4     E7 3C 68 FC | 	wrlong	#30, fp
15ca8     08 CE 85 F1 | 	sub	fp, #8
15cac     E7 92 02 F6 | 	mov	arg01, fp
15cb0     4C 7A BF FD | 	call	#_push
15cb4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
15cb4     1C 00 90 FD | 	jmp	#LR__1874
15cb8                 | LR__1872
15cb8     29 92 06 F6 | 	mov	arg01, #41
15cbc     00 94 06 F6 | 	mov	arg02, #0
15cc0     D4 AC B0 FD | 	call	#_printerror
15cc4                 | '      printerror(41) : return
15cc4     0C 00 90 FD | 	jmp	#LR__1874
15cc8                 | LR__1873
15cc8     29 92 06 F6 | 	mov	arg01, #41
15ccc     00 94 06 F6 | 	mov	arg02, #0
15cd0     C4 AC B0 FD | 	call	#_printerror
15cd4                 | LR__1874
15cd4     E7 F0 03 F6 | 	mov	ptra, fp
15cd8     F2 00 A0 FD | 	call	#popregs_
15cdc                 | _do_padrx_ret
15cdc     2D 00 64 FD | 	ret
15ce0                 | 
15ce0                 | ' 
15ce0                 | ' ' ------------------ padry
15ce0                 | ' 
15ce0                 | ' sub do_padry
15ce0                 | _do_padry
15ce0     04 CA 05 F6 | 	mov	COUNT_, #4
15ce4     E8 00 A0 FD | 	call	#pushregs_
15ce8     14 F0 07 F1 | 	add	ptra, #20
15cec     4C 00 00 FF 
15cf0     24 64 06 F1 | 	add	objptr, ##38948
15cf4     32 A7 02 FB | 	rdlong	local01, objptr
15cf8     53 97 02 F6 | 	mov	arg03, local01
15cfc     01 96 66 F0 | 	shl	arg03, #1
15d00     53 97 02 F1 | 	add	arg03, local01
15d04     02 96 66 F0 | 	shl	arg03, #2
15d08     03 00 00 FF 
15d0c     04 64 86 F1 | 	sub	objptr, ##1540
15d10     32 97 02 F1 | 	add	arg03, objptr
15d14     4B A9 02 FB | 	rdlong	local02, arg03
15d18                 | ' 
15d18                 | ' numpar=compiledline(lineptr_e).result.uresult
15d18                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
15d18     02 A8 16 F2 | 	cmp	local02, #2 wc
15d1c     49 00 00 FF 
15d20     20 64 86 F1 | 	sub	objptr, ##37408
15d24     40 00 90 CD |  if_b	jmp	#LR__1880
15d28     00 92 06 F6 | 	mov	arg01, #0
15d2c     E4 3F B1 FD | 	call	#__system___getiolock_0622
15d30     3D 93 02 F6 | 	mov	arg01, result1
15d34     58 EA B0 FD | 	call	#__system___lockmem
15d38     97 01 00 FF 
15d3c     3D 94 06 F6 | 	mov	arg02, ##@LR__6047
15d40     00 92 06 F6 | 	mov	arg01, #0
15d44     00 96 06 F6 | 	mov	arg03, #0
15d48     38 F7 B0 FD | 	call	#__system___basic_print_string
15d4c     00 92 06 F6 | 	mov	arg01, #0
15d50     C0 3F B1 FD | 	call	#__system___getiolock_0622
15d54     3D 01 68 FC | 	wrlong	#0, result1
15d58     27 92 06 F6 | 	mov	arg01, #39
15d5c     00 94 06 F6 | 	mov	arg02, #0
15d60     34 AC B0 FD | 	call	#_printerror
15d64     A0 01 90 FD | 	jmp	#LR__1884
15d68                 | LR__1880
15d68                 | ' if numpar=0 then 
15d68     00 A8 0E F2 | 	cmp	local02, #0 wz
15d6c     8C 00 90 5D |  if_ne	jmp	#LR__1881
15d70     00 C0 1B FF 
15d74     00 A8 06 F6 | 	mov	local02, ##931135488
15d78     53 00 00 FF 
15d7c     88 65 06 F1 | 	add	objptr, ##42888
15d80     32 93 02 FB | 	rdlong	arg01, objptr
15d84     53 00 00 FF 
15d88     88 65 86 F1 | 	sub	objptr, ##42888
15d8c     49 93 52 F6 | 	abs	arg01, arg01 wc
15d90     1F AA C6 C9 |  if_b	decod	local03, #31
15d94     00 AA 06 36 |  if_ae	mov	local03, #0
15d98     C0 0C B1 FD | 	call	#__system___float_fromuns
15d9c     55 7B 62 F5 | 	xor	result1, local03
15da0     3D 93 02 F6 | 	mov	arg01, result1
15da4     FF 7F 23 FF 
15da8     00 94 06 F6 | 	mov	arg02, ##1191181824
15dac     B4 12 B1 FD | 	call	#__system___float_div
15db0     3D 95 02 F6 | 	mov	arg02, result1
15db4     54 93 02 F6 | 	mov	arg01, local02
15db8     D4 0C B1 FD | 	call	#__system___float_add
15dbc     3D AD 02 F6 | 	mov	local04, result1
15dc0                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
15dc0     56 93 02 F6 | 	mov	arg01, local04
15dc4     1F 92 06 F4 | 	bitl	arg01, #31
15dc8     89 41 1D FF 
15dcc     6F 94 06 F6 | 	mov	arg02, ##981668463
15dd0     01 96 06 F6 | 	mov	arg03, #1
15dd4     BC 14 B1 FD | 	call	#__system___float_cmp
15dd8     00 7A 56 F2 | 	cmps	result1, #0 wc
15ddc     00 AC 06 C6 |  if_b	mov	local04, #0
15de0     E7 AC 62 FC | 	wrlong	local04, fp
15de4     08 CE 05 F1 | 	add	fp, #8
15de8     E7 3C 68 FC | 	wrlong	#30, fp
15dec     08 CE 85 F1 | 	sub	fp, #8
15df0     E7 92 02 F6 | 	mov	arg01, fp
15df4     08 79 BF FD | 	call	#_push
15df8                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
15df8     0C 01 90 FD | 	jmp	#LR__1884
15dfc                 | LR__1881
15dfc     70 78 BF FD | 	call	#_pop
15e00     E7 7A 62 FC | 	wrlong	result1, fp
15e04     04 CE 05 F1 | 	add	fp, #4
15e08     E7 7C 62 FC | 	wrlong	result2, fp
15e0c     04 CE 05 F1 | 	add	fp, #4
15e10     E7 7E 62 FC | 	wrlong	result3, fp
15e14                 | ' t1=pop()
15e14                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
15e14     08 CE 85 F1 | 	sub	fp, #8
15e18     1C 7E 0E F2 | 	cmp	result3, #28 wz
15e1c     08 CE 05 51 |  if_ne	add	fp, #8
15e20     E7 A6 02 5B |  if_ne	rdlong	local01, fp
15e24     08 CE 85 51 |  if_ne	sub	fp, #8
15e28     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
15e2c     CC 00 90 5D |  if_ne	jmp	#LR__1883
15e30     E7 AC 02 FB | 	rdlong	local04, fp
15e34     54 00 00 FF 
15e38     E4 64 06 F1 | 	add	objptr, ##43236
15e3c     32 AD 62 FC | 	wrlong	local04, objptr
15e40                 | '   q=t1.result.uresult
15e40                 | '   if q<7 then 
15e40     54 00 00 FF 
15e44     E4 64 86 F1 | 	sub	objptr, ##43236
15e48     07 AC 56 F2 | 	cmps	local04, #7 wc
15e4c     9C 00 90 3D |  if_ae	jmp	#LR__1882
15e50     00 C0 1B FF 
15e54     00 AC 06 F6 | 	mov	local04, ##931135488
15e58     54 00 00 FF 
15e5c     E4 64 06 F1 | 	add	objptr, ##43236
15e60     32 A9 02 FB | 	rdlong	local02, objptr
15e64     02 A8 66 F0 | 	shl	local02, #2
15e68     5C 65 86 F1 | 	sub	objptr, #348
15e6c     32 A9 02 F1 | 	add	local02, objptr
15e70     54 93 02 FB | 	rdlong	arg01, local02
15e74     53 00 00 FF 
15e78     88 65 86 F1 | 	sub	objptr, ##42888
15e7c     49 93 52 F6 | 	abs	arg01, arg01 wc
15e80     1F AA C6 C9 |  if_b	decod	local03, #31
15e84     00 AA 06 36 |  if_ae	mov	local03, #0
15e88     D0 0B B1 FD | 	call	#__system___float_fromuns
15e8c     55 7B 62 F5 | 	xor	result1, local03
15e90     3D 93 02 F6 | 	mov	arg01, result1
15e94     FF 7F 23 FF 
15e98     00 94 06 F6 | 	mov	arg02, ##1191181824
15e9c     C4 11 B1 FD | 	call	#__system___float_div
15ea0     3D 95 02 F6 | 	mov	arg02, result1
15ea4     56 93 02 F6 | 	mov	arg01, local04
15ea8     E4 0B B1 FD | 	call	#__system___float_add
15eac     3D AD 02 F6 | 	mov	local04, result1
15eb0                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
15eb0     56 93 02 F6 | 	mov	arg01, local04
15eb4     1F 92 06 F4 | 	bitl	arg01, #31
15eb8     89 41 1D FF 
15ebc     6F 94 06 F6 | 	mov	arg02, ##981668463
15ec0     01 96 06 F6 | 	mov	arg03, #1
15ec4     CC 13 B1 FD | 	call	#__system___float_cmp
15ec8     00 7A 56 F2 | 	cmps	result1, #0 wc
15ecc     00 AC 06 C6 |  if_b	mov	local04, #0
15ed0     E7 AC 62 FC | 	wrlong	local04, fp
15ed4     08 CE 05 F1 | 	add	fp, #8
15ed8     E7 3C 68 FC | 	wrlong	#30, fp
15edc     08 CE 85 F1 | 	sub	fp, #8
15ee0     E7 92 02 F6 | 	mov	arg01, fp
15ee4     18 78 BF FD | 	call	#_push
15ee8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
15ee8     1C 00 90 FD | 	jmp	#LR__1884
15eec                 | LR__1882
15eec     29 92 06 F6 | 	mov	arg01, #41
15ef0     00 94 06 F6 | 	mov	arg02, #0
15ef4     A0 AA B0 FD | 	call	#_printerror
15ef8                 | '      printerror(41) : return
15ef8     0C 00 90 FD | 	jmp	#LR__1884
15efc                 | LR__1883
15efc     29 92 06 F6 | 	mov	arg01, #41
15f00     00 94 06 F6 | 	mov	arg02, #0
15f04     90 AA B0 FD | 	call	#_printerror
15f08                 | LR__1884
15f08     E7 F0 03 F6 | 	mov	ptra, fp
15f0c     F2 00 A0 FD | 	call	#popregs_
15f10                 | _do_padry_ret
15f10     2D 00 64 FD | 	ret
15f14                 | 
15f14                 | ' 
15f14                 | ' ' ------------------ padrz
15f14                 | ' 
15f14                 | ' sub do_padrz
15f14                 | _do_padrz
15f14     04 CA 05 F6 | 	mov	COUNT_, #4
15f18     E8 00 A0 FD | 	call	#pushregs_
15f1c     14 F0 07 F1 | 	add	ptra, #20
15f20     4C 00 00 FF 
15f24     24 64 06 F1 | 	add	objptr, ##38948
15f28     32 A7 02 FB | 	rdlong	local01, objptr
15f2c     53 97 02 F6 | 	mov	arg03, local01
15f30     01 96 66 F0 | 	shl	arg03, #1
15f34     53 97 02 F1 | 	add	arg03, local01
15f38     02 96 66 F0 | 	shl	arg03, #2
15f3c     03 00 00 FF 
15f40     04 64 86 F1 | 	sub	objptr, ##1540
15f44     32 97 02 F1 | 	add	arg03, objptr
15f48     4B A9 02 FB | 	rdlong	local02, arg03
15f4c                 | ' 
15f4c                 | ' numpar=compiledline(lineptr_e).result.uresult
15f4c                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
15f4c     02 A8 16 F2 | 	cmp	local02, #2 wc
15f50     49 00 00 FF 
15f54     20 64 86 F1 | 	sub	objptr, ##37408
15f58     40 00 90 CD |  if_b	jmp	#LR__1890
15f5c     00 92 06 F6 | 	mov	arg01, #0
15f60     B0 3D B1 FD | 	call	#__system___getiolock_0622
15f64     3D 93 02 F6 | 	mov	arg01, result1
15f68     24 E8 B0 FD | 	call	#__system___lockmem
15f6c     97 01 00 FF 
15f70     45 94 06 F6 | 	mov	arg02, ##@LR__6048
15f74     00 92 06 F6 | 	mov	arg01, #0
15f78     00 96 06 F6 | 	mov	arg03, #0
15f7c     04 F5 B0 FD | 	call	#__system___basic_print_string
15f80     00 92 06 F6 | 	mov	arg01, #0
15f84     8C 3D B1 FD | 	call	#__system___getiolock_0622
15f88     3D 01 68 FC | 	wrlong	#0, result1
15f8c     27 92 06 F6 | 	mov	arg01, #39
15f90     00 94 06 F6 | 	mov	arg02, #0
15f94     00 AA B0 FD | 	call	#_printerror
15f98     A0 01 90 FD | 	jmp	#LR__1894
15f9c                 | LR__1890
15f9c                 | ' if numpar=0 then 
15f9c     00 A8 0E F2 | 	cmp	local02, #0 wz
15fa0     8C 00 90 5D |  if_ne	jmp	#LR__1891
15fa4     00 C0 1B FF 
15fa8     00 A8 06 F6 | 	mov	local02, ##931135488
15fac     53 00 00 FF 
15fb0     A4 65 06 F1 | 	add	objptr, ##42916
15fb4     32 93 02 FB | 	rdlong	arg01, objptr
15fb8     53 00 00 FF 
15fbc     A4 65 86 F1 | 	sub	objptr, ##42916
15fc0     49 93 52 F6 | 	abs	arg01, arg01 wc
15fc4     1F AA C6 C9 |  if_b	decod	local03, #31
15fc8     00 AA 06 36 |  if_ae	mov	local03, #0
15fcc     8C 0A B1 FD | 	call	#__system___float_fromuns
15fd0     55 7B 62 F5 | 	xor	result1, local03
15fd4     3D 93 02 F6 | 	mov	arg01, result1
15fd8     FF 7F 23 FF 
15fdc     00 94 06 F6 | 	mov	arg02, ##1191181824
15fe0     80 10 B1 FD | 	call	#__system___float_div
15fe4     3D 95 02 F6 | 	mov	arg02, result1
15fe8     54 93 02 F6 | 	mov	arg01, local02
15fec     A0 0A B1 FD | 	call	#__system___float_add
15ff0     3D AD 02 F6 | 	mov	local04, result1
15ff4                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
15ff4     56 93 02 F6 | 	mov	arg01, local04
15ff8     1F 92 06 F4 | 	bitl	arg01, #31
15ffc     89 41 1D FF 
16000     6F 94 06 F6 | 	mov	arg02, ##981668463
16004     01 96 06 F6 | 	mov	arg03, #1
16008     88 12 B1 FD | 	call	#__system___float_cmp
1600c     00 7A 56 F2 | 	cmps	result1, #0 wc
16010     00 AC 06 C6 |  if_b	mov	local04, #0
16014     E7 AC 62 FC | 	wrlong	local04, fp
16018     08 CE 05 F1 | 	add	fp, #8
1601c     E7 3C 68 FC | 	wrlong	#30, fp
16020     08 CE 85 F1 | 	sub	fp, #8
16024     E7 92 02 F6 | 	mov	arg01, fp
16028     D4 76 BF FD | 	call	#_push
1602c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
1602c     0C 01 90 FD | 	jmp	#LR__1894
16030                 | LR__1891
16030     3C 76 BF FD | 	call	#_pop
16034     E7 7A 62 FC | 	wrlong	result1, fp
16038     04 CE 05 F1 | 	add	fp, #4
1603c     E7 7C 62 FC | 	wrlong	result2, fp
16040     04 CE 05 F1 | 	add	fp, #4
16044     E7 7E 62 FC | 	wrlong	result3, fp
16048                 | ' t1=pop()
16048                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16048     08 CE 85 F1 | 	sub	fp, #8
1604c     1C 7E 0E F2 | 	cmp	result3, #28 wz
16050     08 CE 05 51 |  if_ne	add	fp, #8
16054     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16058     08 CE 85 51 |  if_ne	sub	fp, #8
1605c     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16060     CC 00 90 5D |  if_ne	jmp	#LR__1893
16064     E7 AC 02 FB | 	rdlong	local04, fp
16068     54 00 00 FF 
1606c     E4 64 06 F1 | 	add	objptr, ##43236
16070     32 AD 62 FC | 	wrlong	local04, objptr
16074                 | '   q=t1.result.uresult
16074                 | '   if q<7 then 
16074     54 00 00 FF 
16078     E4 64 86 F1 | 	sub	objptr, ##43236
1607c     07 AC 56 F2 | 	cmps	local04, #7 wc
16080     9C 00 90 3D |  if_ae	jmp	#LR__1892
16084     00 C0 1B FF 
16088     00 AC 06 F6 | 	mov	local04, ##931135488
1608c     54 00 00 FF 
16090     E4 64 06 F1 | 	add	objptr, ##43236
16094     32 A9 02 FB | 	rdlong	local02, objptr
16098     02 A8 66 F0 | 	shl	local02, #2
1609c     40 65 86 F1 | 	sub	objptr, #320
160a0     32 A9 02 F1 | 	add	local02, objptr
160a4     54 93 02 FB | 	rdlong	arg01, local02
160a8     53 00 00 FF 
160ac     A4 65 86 F1 | 	sub	objptr, ##42916
160b0     49 93 52 F6 | 	abs	arg01, arg01 wc
160b4     1F AA C6 C9 |  if_b	decod	local03, #31
160b8     00 AA 06 36 |  if_ae	mov	local03, #0
160bc     9C 09 B1 FD | 	call	#__system___float_fromuns
160c0     55 7B 62 F5 | 	xor	result1, local03
160c4     3D 93 02 F6 | 	mov	arg01, result1
160c8     FF 7F 23 FF 
160cc     00 94 06 F6 | 	mov	arg02, ##1191181824
160d0     90 0F B1 FD | 	call	#__system___float_div
160d4     3D 95 02 F6 | 	mov	arg02, result1
160d8     56 93 02 F6 | 	mov	arg01, local04
160dc     B0 09 B1 FD | 	call	#__system___float_add
160e0     3D AD 02 F6 | 	mov	local04, result1
160e4                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
160e4     56 93 02 F6 | 	mov	arg01, local04
160e8     1F 92 06 F4 | 	bitl	arg01, #31
160ec     89 41 1D FF 
160f0     6F 94 06 F6 | 	mov	arg02, ##981668463
160f4     01 96 06 F6 | 	mov	arg03, #1
160f8     98 11 B1 FD | 	call	#__system___float_cmp
160fc     00 7A 56 F2 | 	cmps	result1, #0 wc
16100     00 AC 06 C6 |  if_b	mov	local04, #0
16104     E7 AC 62 FC | 	wrlong	local04, fp
16108     08 CE 05 F1 | 	add	fp, #8
1610c     E7 3C 68 FC | 	wrlong	#30, fp
16110     08 CE 85 F1 | 	sub	fp, #8
16114     E7 92 02 F6 | 	mov	arg01, fp
16118     E4 75 BF FD | 	call	#_push
1611c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
1611c     1C 00 90 FD | 	jmp	#LR__1894
16120                 | LR__1892
16120     29 92 06 F6 | 	mov	arg01, #41
16124     00 94 06 F6 | 	mov	arg02, #0
16128     6C A8 B0 FD | 	call	#_printerror
1612c                 | '      printerror(41) : return
1612c     0C 00 90 FD | 	jmp	#LR__1894
16130                 | LR__1893
16130     29 92 06 F6 | 	mov	arg01, #41
16134     00 94 06 F6 | 	mov	arg02, #0
16138     5C A8 B0 FD | 	call	#_printerror
1613c                 | LR__1894
1613c     E7 F0 03 F6 | 	mov	ptra, fp
16140     F2 00 A0 FD | 	call	#popregs_
16144                 | _do_padrz_ret
16144     2D 00 64 FD | 	ret
16148                 | 
16148                 | ' 
16148                 | ' ' ------------------ pads
16148                 | ' 
16148                 | ' sub do_pads
16148                 | _do_pads
16148     04 CA 05 F6 | 	mov	COUNT_, #4
1614c     E8 00 A0 FD | 	call	#pushregs_
16150     14 F0 07 F1 | 	add	ptra, #20
16154     4C 00 00 FF 
16158     24 64 06 F1 | 	add	objptr, ##38948
1615c     32 A7 02 FB | 	rdlong	local01, objptr
16160     53 97 02 F6 | 	mov	arg03, local01
16164     01 96 66 F0 | 	shl	arg03, #1
16168     53 97 02 F1 | 	add	arg03, local01
1616c     02 96 66 F0 | 	shl	arg03, #2
16170     03 00 00 FF 
16174     04 64 86 F1 | 	sub	objptr, ##1540
16178     32 97 02 F1 | 	add	arg03, objptr
1617c     4B A9 02 FB | 	rdlong	local02, arg03
16180                 | ' 
16180                 | ' numpar=compiledline(lineptr_e).result.uresult
16180                 | ' if numpar>1 then print "pads: "; : printerror(39) : return
16180     02 A8 16 F2 | 	cmp	local02, #2 wc
16184     49 00 00 FF 
16188     20 64 86 F1 | 	sub	objptr, ##37408
1618c     40 00 90 CD |  if_b	jmp	#LR__1900
16190     00 92 06 F6 | 	mov	arg01, #0
16194     7C 3B B1 FD | 	call	#__system___getiolock_0622
16198     3D 93 02 F6 | 	mov	arg01, result1
1619c     F0 E5 B0 FD | 	call	#__system___lockmem
161a0     97 01 00 FF 
161a4     4D 94 06 F6 | 	mov	arg02, ##@LR__6049
161a8     00 92 06 F6 | 	mov	arg01, #0
161ac     00 96 06 F6 | 	mov	arg03, #0
161b0     D0 F2 B0 FD | 	call	#__system___basic_print_string
161b4     00 92 06 F6 | 	mov	arg01, #0
161b8     58 3B B1 FD | 	call	#__system___getiolock_0622
161bc     3D 01 68 FC | 	wrlong	#0, result1
161c0     27 92 06 F6 | 	mov	arg01, #39
161c4     00 94 06 F6 | 	mov	arg02, #0
161c8     CC A7 B0 FD | 	call	#_printerror
161cc     A0 01 90 FD | 	jmp	#LR__1904
161d0                 | LR__1900
161d0                 | ' if numpar=0 then 
161d0     00 A8 0E F2 | 	cmp	local02, #0 wz
161d4     8C 00 90 5D |  if_ne	jmp	#LR__1901
161d8     00 C0 1B FF 
161dc     00 A8 06 F6 | 	mov	local02, ##931135488
161e0     53 00 00 FF 
161e4     C0 65 06 F1 | 	add	objptr, ##42944
161e8     32 93 02 FB | 	rdlong	arg01, objptr
161ec     53 00 00 FF 
161f0     C0 65 86 F1 | 	sub	objptr, ##42944
161f4     49 93 52 F6 | 	abs	arg01, arg01 wc
161f8     1F AA C6 C9 |  if_b	decod	local03, #31
161fc     00 AA 06 36 |  if_ae	mov	local03, #0
16200     58 08 B1 FD | 	call	#__system___float_fromuns
16204     55 7B 62 F5 | 	xor	result1, local03
16208     3D 93 02 F6 | 	mov	arg01, result1
1620c     FF 7F 23 FF 
16210     00 94 06 F6 | 	mov	arg02, ##1191181824
16214     4C 0E B1 FD | 	call	#__system___float_div
16218     3D 95 02 F6 | 	mov	arg02, result1
1621c     54 93 02 F6 | 	mov	arg01, local02
16220     6C 08 B1 FD | 	call	#__system___float_add
16224     3D AD 02 F6 | 	mov	local04, result1
16228                 | '   fpad=(1.0/65536.0)+pads(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16228     56 93 02 F6 | 	mov	arg01, local04
1622c     1F 92 06 F4 | 	bitl	arg01, #31
16230     89 41 1D FF 
16234     6F 94 06 F6 | 	mov	arg02, ##981668463
16238     01 96 06 F6 | 	mov	arg03, #1
1623c     54 10 B1 FD | 	call	#__system___float_cmp
16240     00 7A 56 F2 | 	cmps	result1, #0 wc
16244     00 AC 06 C6 |  if_b	mov	local04, #0
16248     E7 AC 62 FC | 	wrlong	local04, fp
1624c     08 CE 05 F1 | 	add	fp, #8
16250     E7 3C 68 FC | 	wrlong	#30, fp
16254     08 CE 85 F1 | 	sub	fp, #8
16258     E7 92 02 F6 | 	mov	arg01, fp
1625c     A0 74 BF FD | 	call	#_push
16260                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16260     0C 01 90 FD | 	jmp	#LR__1904
16264                 | LR__1901
16264     08 74 BF FD | 	call	#_pop
16268     E7 7A 62 FC | 	wrlong	result1, fp
1626c     04 CE 05 F1 | 	add	fp, #4
16270     E7 7C 62 FC | 	wrlong	result2, fp
16274     04 CE 05 F1 | 	add	fp, #4
16278     E7 7E 62 FC | 	wrlong	result3, fp
1627c                 | ' t1=pop()
1627c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1627c     08 CE 85 F1 | 	sub	fp, #8
16280     1C 7E 0E F2 | 	cmp	result3, #28 wz
16284     08 CE 05 51 |  if_ne	add	fp, #8
16288     E7 A6 02 5B |  if_ne	rdlong	local01, fp
1628c     08 CE 85 51 |  if_ne	sub	fp, #8
16290     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16294     CC 00 90 5D |  if_ne	jmp	#LR__1903
16298     E7 AC 02 FB | 	rdlong	local04, fp
1629c     54 00 00 FF 
162a0     E4 64 06 F1 | 	add	objptr, ##43236
162a4     32 AD 62 FC | 	wrlong	local04, objptr
162a8                 | '   q=t1.result.uresult
162a8                 | '   if q<7 then 
162a8     54 00 00 FF 
162ac     E4 64 86 F1 | 	sub	objptr, ##43236
162b0     07 AC 56 F2 | 	cmps	local04, #7 wc
162b4     9C 00 90 3D |  if_ae	jmp	#LR__1902
162b8     00 C0 1B FF 
162bc     00 AC 06 F6 | 	mov	local04, ##931135488
162c0     54 00 00 FF 
162c4     E4 64 06 F1 | 	add	objptr, ##43236
162c8     32 A9 02 FB | 	rdlong	local02, objptr
162cc     02 A8 66 F0 | 	shl	local02, #2
162d0     24 65 86 F1 | 	sub	objptr, #292
162d4     32 A9 02 F1 | 	add	local02, objptr
162d8     54 93 02 FB | 	rdlong	arg01, local02
162dc     53 00 00 FF 
162e0     C0 65 86 F1 | 	sub	objptr, ##42944
162e4     49 93 52 F6 | 	abs	arg01, arg01 wc
162e8     1F AA C6 C9 |  if_b	decod	local03, #31
162ec     00 AA 06 36 |  if_ae	mov	local03, #0
162f0     68 07 B1 FD | 	call	#__system___float_fromuns
162f4     55 7B 62 F5 | 	xor	result1, local03
162f8     3D 93 02 F6 | 	mov	arg01, result1
162fc     FF 7F 23 FF 
16300     00 94 06 F6 | 	mov	arg02, ##1191181824
16304     5C 0D B1 FD | 	call	#__system___float_div
16308     3D 95 02 F6 | 	mov	arg02, result1
1630c     56 93 02 F6 | 	mov	arg01, local04
16310     7C 07 B1 FD | 	call	#__system___float_add
16314     3D AD 02 F6 | 	mov	local04, result1
16318                 | '     fpad=(1.0/65536.0)+pads(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16318     56 93 02 F6 | 	mov	arg01, local04
1631c     1F 92 06 F4 | 	bitl	arg01, #31
16320     89 41 1D FF 
16324     6F 94 06 F6 | 	mov	arg02, ##981668463
16328     01 96 06 F6 | 	mov	arg03, #1
1632c     64 0F B1 FD | 	call	#__system___float_cmp
16330     00 7A 56 F2 | 	cmps	result1, #0 wc
16334     00 AC 06 C6 |  if_b	mov	local04, #0
16338     E7 AC 62 FC | 	wrlong	local04, fp
1633c     08 CE 05 F1 | 	add	fp, #8
16340     E7 3C 68 FC | 	wrlong	#30, fp
16344     08 CE 85 F1 | 	sub	fp, #8
16348     E7 92 02 F6 | 	mov	arg01, fp
1634c     B0 73 BF FD | 	call	#_push
16350                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16350     1C 00 90 FD | 	jmp	#LR__1904
16354                 | LR__1902
16354     29 92 06 F6 | 	mov	arg01, #41
16358     00 94 06 F6 | 	mov	arg02, #0
1635c     38 A6 B0 FD | 	call	#_printerror
16360                 | '      printerror(41) : return
16360     0C 00 90 FD | 	jmp	#LR__1904
16364                 | LR__1903
16364     29 92 06 F6 | 	mov	arg01, #41
16368     00 94 06 F6 | 	mov	arg02, #0
1636c     28 A6 B0 FD | 	call	#_printerror
16370                 | LR__1904
16370     E7 F0 03 F6 | 	mov	ptra, fp
16374     F2 00 A0 FD | 	call	#popregs_
16378                 | _do_pads_ret
16378     2D 00 64 FD | 	ret
1637c                 | 
1637c                 | ' 
1637c                 | ' ' ------------------ padw
1637c                 | ' 
1637c                 | ' sub do_padw
1637c                 | _do_padw
1637c     04 CA 05 F6 | 	mov	COUNT_, #4
16380     E8 00 A0 FD | 	call	#pushregs_
16384     14 F0 07 F1 | 	add	ptra, #20
16388     4C 00 00 FF 
1638c     24 64 06 F1 | 	add	objptr, ##38948
16390     32 A7 02 FB | 	rdlong	local01, objptr
16394     53 97 02 F6 | 	mov	arg03, local01
16398     01 96 66 F0 | 	shl	arg03, #1
1639c     53 97 02 F1 | 	add	arg03, local01
163a0     02 96 66 F0 | 	shl	arg03, #2
163a4     03 00 00 FF 
163a8     04 64 86 F1 | 	sub	objptr, ##1540
163ac     32 97 02 F1 | 	add	arg03, objptr
163b0     4B A9 02 FB | 	rdlong	local02, arg03
163b4                 | ' 
163b4                 | ' numpar=compiledline(lineptr_e).result.uresult
163b4                 | ' if numpar>1 then print "padw: "; : printerror(39) : return
163b4     02 A8 16 F2 | 	cmp	local02, #2 wc
163b8     49 00 00 FF 
163bc     20 64 86 F1 | 	sub	objptr, ##37408
163c0     40 00 90 CD |  if_b	jmp	#LR__1910
163c4     00 92 06 F6 | 	mov	arg01, #0
163c8     48 39 B1 FD | 	call	#__system___getiolock_0622
163cc     3D 93 02 F6 | 	mov	arg01, result1
163d0     BC E3 B0 FD | 	call	#__system___lockmem
163d4     97 01 00 FF 
163d8     54 94 06 F6 | 	mov	arg02, ##@LR__6050
163dc     00 92 06 F6 | 	mov	arg01, #0
163e0     00 96 06 F6 | 	mov	arg03, #0
163e4     9C F0 B0 FD | 	call	#__system___basic_print_string
163e8     00 92 06 F6 | 	mov	arg01, #0
163ec     24 39 B1 FD | 	call	#__system___getiolock_0622
163f0     3D 01 68 FC | 	wrlong	#0, result1
163f4     27 92 06 F6 | 	mov	arg01, #39
163f8     00 94 06 F6 | 	mov	arg02, #0
163fc     98 A5 B0 FD | 	call	#_printerror
16400     A0 01 90 FD | 	jmp	#LR__1914
16404                 | LR__1910
16404                 | ' if numpar=0 then 
16404     00 A8 0E F2 | 	cmp	local02, #0 wz
16408     8C 00 90 5D |  if_ne	jmp	#LR__1911
1640c     00 C0 1B FF 
16410     00 A8 06 F6 | 	mov	local02, ##931135488
16414     53 00 00 FF 
16418     DC 65 06 F1 | 	add	objptr, ##42972
1641c     32 93 02 FB | 	rdlong	arg01, objptr
16420     53 00 00 FF 
16424     DC 65 86 F1 | 	sub	objptr, ##42972
16428     49 93 52 F6 | 	abs	arg01, arg01 wc
1642c     1F AA C6 C9 |  if_b	decod	local03, #31
16430     00 AA 06 36 |  if_ae	mov	local03, #0
16434     24 06 B1 FD | 	call	#__system___float_fromuns
16438     55 7B 62 F5 | 	xor	result1, local03
1643c     3D 93 02 F6 | 	mov	arg01, result1
16440     FF 7F 23 FF 
16444     00 94 06 F6 | 	mov	arg02, ##1191181824
16448     18 0C B1 FD | 	call	#__system___float_div
1644c     3D 95 02 F6 | 	mov	arg02, result1
16450     54 93 02 F6 | 	mov	arg01, local02
16454     38 06 B1 FD | 	call	#__system___float_add
16458     3D AD 02 F6 | 	mov	local04, result1
1645c                 | '   fpad=(1.0/65536.0)+padw(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1645c     56 93 02 F6 | 	mov	arg01, local04
16460     1F 92 06 F4 | 	bitl	arg01, #31
16464     89 41 1D FF 
16468     6F 94 06 F6 | 	mov	arg02, ##981668463
1646c     01 96 06 F6 | 	mov	arg03, #1
16470     20 0E B1 FD | 	call	#__system___float_cmp
16474     00 7A 56 F2 | 	cmps	result1, #0 wc
16478     00 AC 06 C6 |  if_b	mov	local04, #0
1647c     E7 AC 62 FC | 	wrlong	local04, fp
16480     08 CE 05 F1 | 	add	fp, #8
16484     E7 3C 68 FC | 	wrlong	#30, fp
16488     08 CE 85 F1 | 	sub	fp, #8
1648c     E7 92 02 F6 | 	mov	arg01, fp
16490     6C 72 BF FD | 	call	#_push
16494                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16494     0C 01 90 FD | 	jmp	#LR__1914
16498                 | LR__1911
16498     D4 71 BF FD | 	call	#_pop
1649c     E7 7A 62 FC | 	wrlong	result1, fp
164a0     04 CE 05 F1 | 	add	fp, #4
164a4     E7 7C 62 FC | 	wrlong	result2, fp
164a8     04 CE 05 F1 | 	add	fp, #4
164ac     E7 7E 62 FC | 	wrlong	result3, fp
164b0                 | ' t1=pop()
164b0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
164b0     08 CE 85 F1 | 	sub	fp, #8
164b4     1C 7E 0E F2 | 	cmp	result3, #28 wz
164b8     08 CE 05 51 |  if_ne	add	fp, #8
164bc     E7 A6 02 5B |  if_ne	rdlong	local01, fp
164c0     08 CE 85 51 |  if_ne	sub	fp, #8
164c4     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
164c8     CC 00 90 5D |  if_ne	jmp	#LR__1913
164cc     E7 AC 02 FB | 	rdlong	local04, fp
164d0     54 00 00 FF 
164d4     E4 64 06 F1 | 	add	objptr, ##43236
164d8     32 AD 62 FC | 	wrlong	local04, objptr
164dc                 | '   q=t1.result.uresult
164dc                 | '   if q<7 then 
164dc     54 00 00 FF 
164e0     E4 64 86 F1 | 	sub	objptr, ##43236
164e4     07 AC 56 F2 | 	cmps	local04, #7 wc
164e8     9C 00 90 3D |  if_ae	jmp	#LR__1912
164ec     00 C0 1B FF 
164f0     00 AC 06 F6 | 	mov	local04, ##931135488
164f4     54 00 00 FF 
164f8     E4 64 06 F1 | 	add	objptr, ##43236
164fc     32 A9 02 FB | 	rdlong	local02, objptr
16500     02 A8 66 F0 | 	shl	local02, #2
16504     08 65 86 F1 | 	sub	objptr, #264
16508     32 A9 02 F1 | 	add	local02, objptr
1650c     54 93 02 FB | 	rdlong	arg01, local02
16510     53 00 00 FF 
16514     DC 65 86 F1 | 	sub	objptr, ##42972
16518     49 93 52 F6 | 	abs	arg01, arg01 wc
1651c     1F AA C6 C9 |  if_b	decod	local03, #31
16520     00 AA 06 36 |  if_ae	mov	local03, #0
16524     34 05 B1 FD | 	call	#__system___float_fromuns
16528     55 7B 62 F5 | 	xor	result1, local03
1652c     3D 93 02 F6 | 	mov	arg01, result1
16530     FF 7F 23 FF 
16534     00 94 06 F6 | 	mov	arg02, ##1191181824
16538     28 0B B1 FD | 	call	#__system___float_div
1653c     3D 95 02 F6 | 	mov	arg02, result1
16540     56 93 02 F6 | 	mov	arg01, local04
16544     48 05 B1 FD | 	call	#__system___float_add
16548     3D AD 02 F6 | 	mov	local04, result1
1654c                 | '     fpad=(1.0/65536.0)+padw(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1654c     56 93 02 F6 | 	mov	arg01, local04
16550     1F 92 06 F4 | 	bitl	arg01, #31
16554     89 41 1D FF 
16558     6F 94 06 F6 | 	mov	arg02, ##981668463
1655c     01 96 06 F6 | 	mov	arg03, #1
16560     30 0D B1 FD | 	call	#__system___float_cmp
16564     00 7A 56 F2 | 	cmps	result1, #0 wc
16568     00 AC 06 C6 |  if_b	mov	local04, #0
1656c     E7 AC 62 FC | 	wrlong	local04, fp
16570     08 CE 05 F1 | 	add	fp, #8
16574     E7 3C 68 FC | 	wrlong	#30, fp
16578     08 CE 85 F1 | 	sub	fp, #8
1657c     E7 92 02 F6 | 	mov	arg01, fp
16580     7C 71 BF FD | 	call	#_push
16584                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16584     1C 00 90 FD | 	jmp	#LR__1914
16588                 | LR__1912
16588     29 92 06 F6 | 	mov	arg01, #41
1658c     00 94 06 F6 | 	mov	arg02, #0
16590     04 A4 B0 FD | 	call	#_printerror
16594                 | '      printerror(41) : return
16594     0C 00 90 FD | 	jmp	#LR__1914
16598                 | LR__1913
16598     29 92 06 F6 | 	mov	arg01, #41
1659c     00 94 06 F6 | 	mov	arg02, #0
165a0     F4 A3 B0 FD | 	call	#_printerror
165a4                 | LR__1914
165a4     E7 F0 03 F6 | 	mov	ptra, fp
165a8     F2 00 A0 FD | 	call	#popregs_
165ac                 | _do_padw_ret
165ac     2D 00 64 FD | 	ret
165b0                 | 
165b0                 | ' 
165b0                 | ' ' ------------------ padx
165b0                 | ' 
165b0                 | ' sub do_padx
165b0                 | _do_padx
165b0     04 CA 05 F6 | 	mov	COUNT_, #4
165b4     E8 00 A0 FD | 	call	#pushregs_
165b8     14 F0 07 F1 | 	add	ptra, #20
165bc     4C 00 00 FF 
165c0     24 64 06 F1 | 	add	objptr, ##38948
165c4     32 A7 02 FB | 	rdlong	local01, objptr
165c8     53 97 02 F6 | 	mov	arg03, local01
165cc     01 96 66 F0 | 	shl	arg03, #1
165d0     53 97 02 F1 | 	add	arg03, local01
165d4     02 96 66 F0 | 	shl	arg03, #2
165d8     03 00 00 FF 
165dc     04 64 86 F1 | 	sub	objptr, ##1540
165e0     32 97 02 F1 | 	add	arg03, objptr
165e4     4B A9 02 FB | 	rdlong	local02, arg03
165e8                 | ' 
165e8                 | ' numpar=compiledline(lineptr_e).result.uresult
165e8                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
165e8     02 A8 16 F2 | 	cmp	local02, #2 wc
165ec     49 00 00 FF 
165f0     20 64 86 F1 | 	sub	objptr, ##37408
165f4     40 00 90 CD |  if_b	jmp	#LR__1920
165f8     00 92 06 F6 | 	mov	arg01, #0
165fc     14 37 B1 FD | 	call	#__system___getiolock_0622
16600     3D 93 02 F6 | 	mov	arg01, result1
16604     88 E1 B0 FD | 	call	#__system___lockmem
16608     97 01 00 FF 
1660c     5B 94 06 F6 | 	mov	arg02, ##@LR__6051
16610     00 92 06 F6 | 	mov	arg01, #0
16614     00 96 06 F6 | 	mov	arg03, #0
16618     68 EE B0 FD | 	call	#__system___basic_print_string
1661c     00 92 06 F6 | 	mov	arg01, #0
16620     F0 36 B1 FD | 	call	#__system___getiolock_0622
16624     3D 01 68 FC | 	wrlong	#0, result1
16628     27 92 06 F6 | 	mov	arg01, #39
1662c     00 94 06 F6 | 	mov	arg02, #0
16630     64 A3 B0 FD | 	call	#_printerror
16634     A0 01 90 FD | 	jmp	#LR__1924
16638                 | LR__1920
16638                 | ' if numpar=0 then 
16638     00 A8 0E F2 | 	cmp	local02, #0 wz
1663c     8C 00 90 5D |  if_ne	jmp	#LR__1921
16640     00 C0 1B FF 
16644     00 A8 06 F6 | 	mov	local02, ##931135488
16648     53 00 00 FF 
1664c     FC 64 06 F1 | 	add	objptr, ##42748
16650     32 93 02 FB | 	rdlong	arg01, objptr
16654     53 00 00 FF 
16658     FC 64 86 F1 | 	sub	objptr, ##42748
1665c     49 93 52 F6 | 	abs	arg01, arg01 wc
16660     1F AA C6 C9 |  if_b	decod	local03, #31
16664     00 AA 06 36 |  if_ae	mov	local03, #0
16668     F0 03 B1 FD | 	call	#__system___float_fromuns
1666c     55 7B 62 F5 | 	xor	result1, local03
16670     3D 93 02 F6 | 	mov	arg01, result1
16674     FF 7F 23 FF 
16678     00 94 06 F6 | 	mov	arg02, ##1191181824
1667c     E4 09 B1 FD | 	call	#__system___float_div
16680     3D 95 02 F6 | 	mov	arg02, result1
16684     54 93 02 F6 | 	mov	arg01, local02
16688     04 04 B1 FD | 	call	#__system___float_add
1668c     3D AD 02 F6 | 	mov	local04, result1
16690                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16690     56 93 02 F6 | 	mov	arg01, local04
16694     1F 92 06 F4 | 	bitl	arg01, #31
16698     89 41 1D FF 
1669c     6F 94 06 F6 | 	mov	arg02, ##981668463
166a0     01 96 06 F6 | 	mov	arg03, #1
166a4     EC 0B B1 FD | 	call	#__system___float_cmp
166a8     00 7A 56 F2 | 	cmps	result1, #0 wc
166ac     00 AC 06 C6 |  if_b	mov	local04, #0
166b0     E7 AC 62 FC | 	wrlong	local04, fp
166b4     08 CE 05 F1 | 	add	fp, #8
166b8     E7 3C 68 FC | 	wrlong	#30, fp
166bc     08 CE 85 F1 | 	sub	fp, #8
166c0     E7 92 02 F6 | 	mov	arg01, fp
166c4     38 70 BF FD | 	call	#_push
166c8                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
166c8     0C 01 90 FD | 	jmp	#LR__1924
166cc                 | LR__1921
166cc     A0 6F BF FD | 	call	#_pop
166d0     E7 7A 62 FC | 	wrlong	result1, fp
166d4     04 CE 05 F1 | 	add	fp, #4
166d8     E7 7C 62 FC | 	wrlong	result2, fp
166dc     04 CE 05 F1 | 	add	fp, #4
166e0     E7 7E 62 FC | 	wrlong	result3, fp
166e4                 | ' t1=pop()
166e4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
166e4     08 CE 85 F1 | 	sub	fp, #8
166e8     1C 7E 0E F2 | 	cmp	result3, #28 wz
166ec     08 CE 05 51 |  if_ne	add	fp, #8
166f0     E7 A6 02 5B |  if_ne	rdlong	local01, fp
166f4     08 CE 85 51 |  if_ne	sub	fp, #8
166f8     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
166fc     CC 00 90 5D |  if_ne	jmp	#LR__1923
16700     E7 AC 02 FB | 	rdlong	local04, fp
16704     54 00 00 FF 
16708     E4 64 06 F1 | 	add	objptr, ##43236
1670c     32 AD 62 FC | 	wrlong	local04, objptr
16710                 | '   q=t1.result.uresult
16710                 | '   if q<7 then 
16710     54 00 00 FF 
16714     E4 64 86 F1 | 	sub	objptr, ##43236
16718     07 AC 56 F2 | 	cmps	local04, #7 wc
1671c     9C 00 90 3D |  if_ae	jmp	#LR__1922
16720     00 C0 1B FF 
16724     00 AC 06 F6 | 	mov	local04, ##931135488
16728     54 00 00 FF 
1672c     E4 64 06 F1 | 	add	objptr, ##43236
16730     32 A9 02 FB | 	rdlong	local02, objptr
16734     02 A8 66 F0 | 	shl	local02, #2
16738     E8 65 86 F1 | 	sub	objptr, #488
1673c     32 A9 02 F1 | 	add	local02, objptr
16740     54 93 02 FB | 	rdlong	arg01, local02
16744     53 00 00 FF 
16748     FC 64 86 F1 | 	sub	objptr, ##42748
1674c     49 93 52 F6 | 	abs	arg01, arg01 wc
16750     1F AA C6 C9 |  if_b	decod	local03, #31
16754     00 AA 06 36 |  if_ae	mov	local03, #0
16758     00 03 B1 FD | 	call	#__system___float_fromuns
1675c     55 7B 62 F5 | 	xor	result1, local03
16760     3D 93 02 F6 | 	mov	arg01, result1
16764     FF 7F 23 FF 
16768     00 94 06 F6 | 	mov	arg02, ##1191181824
1676c     F4 08 B1 FD | 	call	#__system___float_div
16770     3D 95 02 F6 | 	mov	arg02, result1
16774     56 93 02 F6 | 	mov	arg01, local04
16778     14 03 B1 FD | 	call	#__system___float_add
1677c     3D AD 02 F6 | 	mov	local04, result1
16780                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16780     56 93 02 F6 | 	mov	arg01, local04
16784     1F 92 06 F4 | 	bitl	arg01, #31
16788     89 41 1D FF 
1678c     6F 94 06 F6 | 	mov	arg02, ##981668463
16790     01 96 06 F6 | 	mov	arg03, #1
16794     FC 0A B1 FD | 	call	#__system___float_cmp
16798     00 7A 56 F2 | 	cmps	result1, #0 wc
1679c     00 AC 06 C6 |  if_b	mov	local04, #0
167a0     E7 AC 62 FC | 	wrlong	local04, fp
167a4     08 CE 05 F1 | 	add	fp, #8
167a8     E7 3C 68 FC | 	wrlong	#30, fp
167ac     08 CE 85 F1 | 	sub	fp, #8
167b0     E7 92 02 F6 | 	mov	arg01, fp
167b4     48 6F BF FD | 	call	#_push
167b8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
167b8     1C 00 90 FD | 	jmp	#LR__1924
167bc                 | LR__1922
167bc     29 92 06 F6 | 	mov	arg01, #41
167c0     00 94 06 F6 | 	mov	arg02, #0
167c4     D0 A1 B0 FD | 	call	#_printerror
167c8                 | '      printerror(41) : return
167c8     0C 00 90 FD | 	jmp	#LR__1924
167cc                 | LR__1923
167cc     29 92 06 F6 | 	mov	arg01, #41
167d0     00 94 06 F6 | 	mov	arg02, #0
167d4     C0 A1 B0 FD | 	call	#_printerror
167d8                 | LR__1924
167d8     E7 F0 03 F6 | 	mov	ptra, fp
167dc     F2 00 A0 FD | 	call	#popregs_
167e0                 | _do_padx_ret
167e0     2D 00 64 FD | 	ret
167e4                 | 
167e4                 | ' 
167e4                 | ' ' ------------------ pady
167e4                 | ' 
167e4                 | ' sub do_pady
167e4                 | _do_pady
167e4     04 CA 05 F6 | 	mov	COUNT_, #4
167e8     E8 00 A0 FD | 	call	#pushregs_
167ec     14 F0 07 F1 | 	add	ptra, #20
167f0     4C 00 00 FF 
167f4     24 64 06 F1 | 	add	objptr, ##38948
167f8     32 A7 02 FB | 	rdlong	local01, objptr
167fc     53 97 02 F6 | 	mov	arg03, local01
16800     01 96 66 F0 | 	shl	arg03, #1
16804     53 97 02 F1 | 	add	arg03, local01
16808     02 96 66 F0 | 	shl	arg03, #2
1680c     03 00 00 FF 
16810     04 64 86 F1 | 	sub	objptr, ##1540
16814     32 97 02 F1 | 	add	arg03, objptr
16818     4B A9 02 FB | 	rdlong	local02, arg03
1681c                 | ' 
1681c                 | ' numpar=compiledline(lineptr_e).result.uresult
1681c                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
1681c     02 A8 16 F2 | 	cmp	local02, #2 wc
16820     49 00 00 FF 
16824     20 64 86 F1 | 	sub	objptr, ##37408
16828     40 00 90 CD |  if_b	jmp	#LR__1930
1682c     00 92 06 F6 | 	mov	arg01, #0
16830     E0 34 B1 FD | 	call	#__system___getiolock_0622
16834     3D 93 02 F6 | 	mov	arg01, result1
16838     54 DF B0 FD | 	call	#__system___lockmem
1683c     97 01 00 FF 
16840     62 94 06 F6 | 	mov	arg02, ##@LR__6052
16844     00 92 06 F6 | 	mov	arg01, #0
16848     00 96 06 F6 | 	mov	arg03, #0
1684c     34 EC B0 FD | 	call	#__system___basic_print_string
16850     00 92 06 F6 | 	mov	arg01, #0
16854     BC 34 B1 FD | 	call	#__system___getiolock_0622
16858     3D 01 68 FC | 	wrlong	#0, result1
1685c     27 92 06 F6 | 	mov	arg01, #39
16860     00 94 06 F6 | 	mov	arg02, #0
16864     30 A1 B0 FD | 	call	#_printerror
16868     A0 01 90 FD | 	jmp	#LR__1934
1686c                 | LR__1930
1686c                 | ' if numpar=0 then 
1686c     00 A8 0E F2 | 	cmp	local02, #0 wz
16870     8C 00 90 5D |  if_ne	jmp	#LR__1931
16874     00 C0 1B FF 
16878     00 A8 06 F6 | 	mov	local02, ##931135488
1687c     53 00 00 FF 
16880     18 65 06 F1 | 	add	objptr, ##42776
16884     32 93 02 FB | 	rdlong	arg01, objptr
16888     53 00 00 FF 
1688c     18 65 86 F1 | 	sub	objptr, ##42776
16890     49 93 52 F6 | 	abs	arg01, arg01 wc
16894     1F AA C6 C9 |  if_b	decod	local03, #31
16898     00 AA 06 36 |  if_ae	mov	local03, #0
1689c     BC 01 B1 FD | 	call	#__system___float_fromuns
168a0     55 7B 62 F5 | 	xor	result1, local03
168a4     3D 93 02 F6 | 	mov	arg01, result1
168a8     FF 7F 23 FF 
168ac     00 94 06 F6 | 	mov	arg02, ##1191181824
168b0     B0 07 B1 FD | 	call	#__system___float_div
168b4     3D 95 02 F6 | 	mov	arg02, result1
168b8     54 93 02 F6 | 	mov	arg01, local02
168bc     D0 01 B1 FD | 	call	#__system___float_add
168c0     3D AD 02 F6 | 	mov	local04, result1
168c4                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
168c4     56 93 02 F6 | 	mov	arg01, local04
168c8     1F 92 06 F4 | 	bitl	arg01, #31
168cc     89 41 1D FF 
168d0     6F 94 06 F6 | 	mov	arg02, ##981668463
168d4     01 96 06 F6 | 	mov	arg03, #1
168d8     B8 09 B1 FD | 	call	#__system___float_cmp
168dc     00 7A 56 F2 | 	cmps	result1, #0 wc
168e0     00 AC 06 C6 |  if_b	mov	local04, #0
168e4     E7 AC 62 FC | 	wrlong	local04, fp
168e8     08 CE 05 F1 | 	add	fp, #8
168ec     E7 3C 68 FC | 	wrlong	#30, fp
168f0     08 CE 85 F1 | 	sub	fp, #8
168f4     E7 92 02 F6 | 	mov	arg01, fp
168f8     04 6E BF FD | 	call	#_push
168fc                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
168fc     0C 01 90 FD | 	jmp	#LR__1934
16900                 | LR__1931
16900     6C 6D BF FD | 	call	#_pop
16904     E7 7A 62 FC | 	wrlong	result1, fp
16908     04 CE 05 F1 | 	add	fp, #4
1690c     E7 7C 62 FC | 	wrlong	result2, fp
16910     04 CE 05 F1 | 	add	fp, #4
16914     E7 7E 62 FC | 	wrlong	result3, fp
16918                 | ' t1=pop()
16918                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16918     08 CE 85 F1 | 	sub	fp, #8
1691c     1C 7E 0E F2 | 	cmp	result3, #28 wz
16920     08 CE 05 51 |  if_ne	add	fp, #8
16924     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16928     08 CE 85 51 |  if_ne	sub	fp, #8
1692c     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16930     CC 00 90 5D |  if_ne	jmp	#LR__1933
16934     E7 AC 02 FB | 	rdlong	local04, fp
16938     54 00 00 FF 
1693c     E4 64 06 F1 | 	add	objptr, ##43236
16940     32 AD 62 FC | 	wrlong	local04, objptr
16944                 | '   q=t1.result.uresult
16944                 | '   if q<7 then 
16944     54 00 00 FF 
16948     E4 64 86 F1 | 	sub	objptr, ##43236
1694c     07 AC 56 F2 | 	cmps	local04, #7 wc
16950     9C 00 90 3D |  if_ae	jmp	#LR__1932
16954     00 C0 1B FF 
16958     00 AC 06 F6 | 	mov	local04, ##931135488
1695c     54 00 00 FF 
16960     E4 64 06 F1 | 	add	objptr, ##43236
16964     32 A9 02 FB | 	rdlong	local02, objptr
16968     02 A8 66 F0 | 	shl	local02, #2
1696c     CC 65 86 F1 | 	sub	objptr, #460
16970     32 A9 02 F1 | 	add	local02, objptr
16974     54 93 02 FB | 	rdlong	arg01, local02
16978     53 00 00 FF 
1697c     18 65 86 F1 | 	sub	objptr, ##42776
16980     49 93 52 F6 | 	abs	arg01, arg01 wc
16984     1F AA C6 C9 |  if_b	decod	local03, #31
16988     00 AA 06 36 |  if_ae	mov	local03, #0
1698c     CC 00 B1 FD | 	call	#__system___float_fromuns
16990     55 7B 62 F5 | 	xor	result1, local03
16994     3D 93 02 F6 | 	mov	arg01, result1
16998     FF 7F 23 FF 
1699c     00 94 06 F6 | 	mov	arg02, ##1191181824
169a0     C0 06 B1 FD | 	call	#__system___float_div
169a4     3D 95 02 F6 | 	mov	arg02, result1
169a8     56 93 02 F6 | 	mov	arg01, local04
169ac     E0 00 B1 FD | 	call	#__system___float_add
169b0     3D AD 02 F6 | 	mov	local04, result1
169b4                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
169b4     56 93 02 F6 | 	mov	arg01, local04
169b8     1F 92 06 F4 | 	bitl	arg01, #31
169bc     89 41 1D FF 
169c0     6F 94 06 F6 | 	mov	arg02, ##981668463
169c4     01 96 06 F6 | 	mov	arg03, #1
169c8     C8 08 B1 FD | 	call	#__system___float_cmp
169cc     00 7A 56 F2 | 	cmps	result1, #0 wc
169d0     00 AC 06 C6 |  if_b	mov	local04, #0
169d4     E7 AC 62 FC | 	wrlong	local04, fp
169d8     08 CE 05 F1 | 	add	fp, #8
169dc     E7 3C 68 FC | 	wrlong	#30, fp
169e0     08 CE 85 F1 | 	sub	fp, #8
169e4     E7 92 02 F6 | 	mov	arg01, fp
169e8     14 6D BF FD | 	call	#_push
169ec                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
169ec     1C 00 90 FD | 	jmp	#LR__1934
169f0                 | LR__1932
169f0     29 92 06 F6 | 	mov	arg01, #41
169f4     00 94 06 F6 | 	mov	arg02, #0
169f8     9C 9F B0 FD | 	call	#_printerror
169fc                 | '      printerror(41) : return
169fc     0C 00 90 FD | 	jmp	#LR__1934
16a00                 | LR__1933
16a00     29 92 06 F6 | 	mov	arg01, #41
16a04     00 94 06 F6 | 	mov	arg02, #0
16a08     8C 9F B0 FD | 	call	#_printerror
16a0c                 | LR__1934
16a0c     E7 F0 03 F6 | 	mov	ptra, fp
16a10     F2 00 A0 FD | 	call	#popregs_
16a14                 | _do_pady_ret
16a14     2D 00 64 FD | 	ret
16a18                 | 
16a18                 | ' 
16a18                 | ' ' ------------------ padz
16a18                 | ' 
16a18                 | ' sub do_padz
16a18                 | _do_padz
16a18     04 CA 05 F6 | 	mov	COUNT_, #4
16a1c     E8 00 A0 FD | 	call	#pushregs_
16a20     14 F0 07 F1 | 	add	ptra, #20
16a24     4C 00 00 FF 
16a28     24 64 06 F1 | 	add	objptr, ##38948
16a2c     32 A7 02 FB | 	rdlong	local01, objptr
16a30     53 97 02 F6 | 	mov	arg03, local01
16a34     01 96 66 F0 | 	shl	arg03, #1
16a38     53 97 02 F1 | 	add	arg03, local01
16a3c     02 96 66 F0 | 	shl	arg03, #2
16a40     03 00 00 FF 
16a44     04 64 86 F1 | 	sub	objptr, ##1540
16a48     32 97 02 F1 | 	add	arg03, objptr
16a4c     4B A9 02 FB | 	rdlong	local02, arg03
16a50                 | ' 
16a50                 | ' numpar=compiledline(lineptr_e).result.uresult
16a50                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
16a50     02 A8 16 F2 | 	cmp	local02, #2 wc
16a54     49 00 00 FF 
16a58     20 64 86 F1 | 	sub	objptr, ##37408
16a5c     40 00 90 CD |  if_b	jmp	#LR__1940
16a60     00 92 06 F6 | 	mov	arg01, #0
16a64     AC 32 B1 FD | 	call	#__system___getiolock_0622
16a68     3D 93 02 F6 | 	mov	arg01, result1
16a6c     20 DD B0 FD | 	call	#__system___lockmem
16a70     97 01 00 FF 
16a74     69 94 06 F6 | 	mov	arg02, ##@LR__6053
16a78     00 92 06 F6 | 	mov	arg01, #0
16a7c     00 96 06 F6 | 	mov	arg03, #0
16a80     00 EA B0 FD | 	call	#__system___basic_print_string
16a84     00 92 06 F6 | 	mov	arg01, #0
16a88     88 32 B1 FD | 	call	#__system___getiolock_0622
16a8c     3D 01 68 FC | 	wrlong	#0, result1
16a90     27 92 06 F6 | 	mov	arg01, #39
16a94     00 94 06 F6 | 	mov	arg02, #0
16a98     FC 9E B0 FD | 	call	#_printerror
16a9c     A0 01 90 FD | 	jmp	#LR__1944
16aa0                 | LR__1940
16aa0                 | ' if numpar=0 then 
16aa0     00 A8 0E F2 | 	cmp	local02, #0 wz
16aa4     8C 00 90 5D |  if_ne	jmp	#LR__1941
16aa8     00 C0 1B FF 
16aac     00 A8 06 F6 | 	mov	local02, ##931135488
16ab0     53 00 00 FF 
16ab4     34 65 06 F1 | 	add	objptr, ##42804
16ab8     32 93 02 FB | 	rdlong	arg01, objptr
16abc     53 00 00 FF 
16ac0     34 65 86 F1 | 	sub	objptr, ##42804
16ac4     49 93 52 F6 | 	abs	arg01, arg01 wc
16ac8     1F AA C6 C9 |  if_b	decod	local03, #31
16acc     00 AA 06 36 |  if_ae	mov	local03, #0
16ad0     88 FF B0 FD | 	call	#__system___float_fromuns
16ad4     55 7B 62 F5 | 	xor	result1, local03
16ad8     3D 93 02 F6 | 	mov	arg01, result1
16adc     FF 7F 23 FF 
16ae0     00 94 06 F6 | 	mov	arg02, ##1191181824
16ae4     7C 05 B1 FD | 	call	#__system___float_div
16ae8     3D 95 02 F6 | 	mov	arg02, result1
16aec     54 93 02 F6 | 	mov	arg01, local02
16af0     9C FF B0 FD | 	call	#__system___float_add
16af4     3D AD 02 F6 | 	mov	local04, result1
16af8                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16af8     56 93 02 F6 | 	mov	arg01, local04
16afc     1F 92 06 F4 | 	bitl	arg01, #31
16b00     89 41 1D FF 
16b04     6F 94 06 F6 | 	mov	arg02, ##981668463
16b08     01 96 06 F6 | 	mov	arg03, #1
16b0c     84 07 B1 FD | 	call	#__system___float_cmp
16b10     00 7A 56 F2 | 	cmps	result1, #0 wc
16b14     00 AC 06 C6 |  if_b	mov	local04, #0
16b18     E7 AC 62 FC | 	wrlong	local04, fp
16b1c     08 CE 05 F1 | 	add	fp, #8
16b20     E7 3C 68 FC | 	wrlong	#30, fp
16b24     08 CE 85 F1 | 	sub	fp, #8
16b28     E7 92 02 F6 | 	mov	arg01, fp
16b2c     D0 6B BF FD | 	call	#_push
16b30                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16b30     0C 01 90 FD | 	jmp	#LR__1944
16b34                 | LR__1941
16b34     38 6B BF FD | 	call	#_pop
16b38     E7 7A 62 FC | 	wrlong	result1, fp
16b3c     04 CE 05 F1 | 	add	fp, #4
16b40     E7 7C 62 FC | 	wrlong	result2, fp
16b44     04 CE 05 F1 | 	add	fp, #4
16b48     E7 7E 62 FC | 	wrlong	result3, fp
16b4c                 | ' t1=pop()
16b4c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16b4c     08 CE 85 F1 | 	sub	fp, #8
16b50     1C 7E 0E F2 | 	cmp	result3, #28 wz
16b54     08 CE 05 51 |  if_ne	add	fp, #8
16b58     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16b5c     08 CE 85 51 |  if_ne	sub	fp, #8
16b60     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16b64     CC 00 90 5D |  if_ne	jmp	#LR__1943
16b68     E7 AC 02 FB | 	rdlong	local04, fp
16b6c     54 00 00 FF 
16b70     E4 64 06 F1 | 	add	objptr, ##43236
16b74     32 AD 62 FC | 	wrlong	local04, objptr
16b78                 | '   q=t1.result.uresult
16b78                 | '   if q<7 then 
16b78     54 00 00 FF 
16b7c     E4 64 86 F1 | 	sub	objptr, ##43236
16b80     07 AC 56 F2 | 	cmps	local04, #7 wc
16b84     9C 00 90 3D |  if_ae	jmp	#LR__1942
16b88     00 C0 1B FF 
16b8c     00 AC 06 F6 | 	mov	local04, ##931135488
16b90     54 00 00 FF 
16b94     E4 64 06 F1 | 	add	objptr, ##43236
16b98     32 A9 02 FB | 	rdlong	local02, objptr
16b9c     02 A8 66 F0 | 	shl	local02, #2
16ba0     B0 65 86 F1 | 	sub	objptr, #432
16ba4     32 A9 02 F1 | 	add	local02, objptr
16ba8     54 93 02 FB | 	rdlong	arg01, local02
16bac     53 00 00 FF 
16bb0     34 65 86 F1 | 	sub	objptr, ##42804
16bb4     49 93 52 F6 | 	abs	arg01, arg01 wc
16bb8     1F AA C6 C9 |  if_b	decod	local03, #31
16bbc     00 AA 06 36 |  if_ae	mov	local03, #0
16bc0     98 FE B0 FD | 	call	#__system___float_fromuns
16bc4     55 7B 62 F5 | 	xor	result1, local03
16bc8     3D 93 02 F6 | 	mov	arg01, result1
16bcc     FF 7F 23 FF 
16bd0     00 94 06 F6 | 	mov	arg02, ##1191181824
16bd4     8C 04 B1 FD | 	call	#__system___float_div
16bd8     3D 95 02 F6 | 	mov	arg02, result1
16bdc     56 93 02 F6 | 	mov	arg01, local04
16be0     AC FE B0 FD | 	call	#__system___float_add
16be4     3D AD 02 F6 | 	mov	local04, result1
16be8                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16be8     56 93 02 F6 | 	mov	arg01, local04
16bec     1F 92 06 F4 | 	bitl	arg01, #31
16bf0     89 41 1D FF 
16bf4     6F 94 06 F6 | 	mov	arg02, ##981668463
16bf8     01 96 06 F6 | 	mov	arg03, #1
16bfc     94 06 B1 FD | 	call	#__system___float_cmp
16c00     00 7A 56 F2 | 	cmps	result1, #0 wc
16c04     00 AC 06 C6 |  if_b	mov	local04, #0
16c08     E7 AC 62 FC | 	wrlong	local04, fp
16c0c     08 CE 05 F1 | 	add	fp, #8
16c10     E7 3C 68 FC | 	wrlong	#30, fp
16c14     08 CE 85 F1 | 	sub	fp, #8
16c18     E7 92 02 F6 | 	mov	arg01, fp
16c1c     E0 6A BF FD | 	call	#_push
16c20                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16c20     1C 00 90 FD | 	jmp	#LR__1944
16c24                 | LR__1942
16c24     29 92 06 F6 | 	mov	arg01, #41
16c28     00 94 06 F6 | 	mov	arg02, #0
16c2c     68 9D B0 FD | 	call	#_printerror
16c30                 | '      printerror(41) : return
16c30     0C 00 90 FD | 	jmp	#LR__1944
16c34                 | LR__1943
16c34     29 92 06 F6 | 	mov	arg01, #41
16c38     00 94 06 F6 | 	mov	arg02, #0
16c3c     58 9D B0 FD | 	call	#_printerror
16c40                 | LR__1944
16c40     E7 F0 03 F6 | 	mov	ptra, fp
16c44     F2 00 A0 FD | 	call	#popregs_
16c48                 | _do_padz_ret
16c48     2D 00 64 FD | 	ret
16c4c                 | 
16c4c                 | ' 
16c4c                 | ' '-------------------- paper
16c4c                 | ' 
16c4c                 | ' sub do_paper
16c4c                 | _do_paper
16c4c     03 CA 05 F6 | 	mov	COUNT_, #3
16c50     E8 00 A0 FD | 	call	#pushregs_
16c54     18 6A BF FD | 	call	#_pop
16c58     3D A7 02 F6 | 	mov	local01, result1
16c5c     3E A9 02 F6 | 	mov	local02, result2
16c60     3F AB 02 F6 | 	mov	local03, result3
16c64                 | ' t1=pop() 
16c64                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16c64     1E AA 0E F2 | 	cmp	local03, #30 wz
16c68     10 00 90 5D |  if_ne	jmp	#LR__1950
16c6c     53 93 02 F6 | 	mov	arg01, local01
16c70     00 94 06 F6 | 	mov	arg02, #0
16c74     B0 06 B1 FD | 	call	#__system___float_tointeger
16c78     3D A7 02 F6 | 	mov	local01, result1
16c7c                 | LR__1950
16c7c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16c7c     1F AA 0E F2 | 	cmp	local03, #31 wz
16c80     18 00 90 5D |  if_ne	jmp	#LR__1951
16c84     53 93 02 F6 | 	mov	arg01, local01
16c88     F0 09 B1 FD | 	call	#__system____builtin_atof
16c8c     3D 93 02 F6 | 	mov	arg01, result1
16c90     00 94 06 F6 | 	mov	arg02, #0
16c94     90 06 B1 FD | 	call	#__system___float_tointeger
16c98     3D A7 02 F6 | 	mov	local01, result1
16c9c                 | LR__1951
16c9c     38 00 00 FF 
16ca0     DC 65 06 F1 | 	add	objptr, ##29148
16ca4     32 A7 62 FC | 	wrlong	local01, objptr
16ca8     04 64 06 F1 | 	add	objptr, #4
16cac     32 93 02 FB | 	rdlong	arg01, objptr
16cb0                 | ' 
16cb0                 | ' write_color:=ff
16cb0     38 00 00 FF 
16cb4     9F 65 86 F1 | 	sub	objptr, ##29087
16cb8     32 93 62 FC | 	wrlong	arg01, objptr
16cbc                 | ' write_background:=bb
16cbc     04 64 06 F1 | 	add	objptr, #4
16cc0     32 A7 62 FC | 	wrlong	local01, objptr
16cc4     45 64 86 F1 | 	sub	objptr, #69
16cc8     E7 F0 03 F6 | 	mov	ptra, fp
16ccc     F2 00 A0 FD | 	call	#popregs_
16cd0                 | _do_paper_ret
16cd0     2D 00 64 FD | 	ret
16cd4                 | 
16cd4                 | ' 
16cd4                 | ' '-------------------- peek
16cd4                 | ' 
16cd4                 | ' sub do_peek
16cd4                 | _do_peek
16cd4     01 CA 05 F6 | 	mov	COUNT_, #1
16cd8     E8 00 A0 FD | 	call	#pushregs_
16cdc     14 F0 07 F1 | 	add	ptra, #20
16ce0     8C 69 BF FD | 	call	#_pop
16ce4     E7 7A 62 FC | 	wrlong	result1, fp
16ce8     04 CE 05 F1 | 	add	fp, #4
16cec     E7 7C 62 FC | 	wrlong	result2, fp
16cf0     04 CE 05 F1 | 	add	fp, #4
16cf4     E7 7E 62 FC | 	wrlong	result3, fp
16cf8     08 CE 85 F1 | 	sub	fp, #8
16cfc     E7 92 02 F6 | 	mov	arg01, fp
16d00     48 6B BF FD | 	call	#_converttoint
16d04     3D 93 02 F6 | 	mov	arg01, result1
16d08                 | ' 
16d08                 | ' t1=pop()
16d08                 | ' a=converttoint(t1)
16d08                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
16d08     00 04 00 FF 
16d0c     00 92 16 F2 | 	cmp	arg01, ##524288 wc
16d10     49 A7 C2 CA |  if_b	rdbyte	local01, arg01
16d14     08 00 90 CD |  if_b	jmp	#LR__1960
16d18     F8 9E B0 FD | 	call	#_pspeek
16d1c     3D A7 E2 F8 | 	getbyte	local01, result1, #0
16d20                 | LR__1960
16d20     08 CE 05 F1 | 	add	fp, #8
16d24     E7 3A 68 FC | 	wrlong	#29, fp
16d28     08 CE 85 F1 | 	sub	fp, #8
16d2c     E7 A6 62 FC | 	wrlong	local01, fp
16d30     E7 92 02 F6 | 	mov	arg01, fp
16d34     C8 69 BF FD | 	call	#_push
16d38     E7 F0 03 F6 | 	mov	ptra, fp
16d3c     F2 00 A0 FD | 	call	#popregs_
16d40                 | _do_peek_ret
16d40     2D 00 64 FD | 	ret
16d44                 | 
16d44                 | ' 
16d44                 | ' '-------------------- pinfloat
16d44                 | ' 
16d44                 | ' sub do_pinfloat
16d44                 | _do_pinfloat
16d44     00 CA 05 F6 | 	mov	COUNT_, #0
16d48     E8 00 A0 FD | 	call	#pushregs_
16d4c     0C F0 07 F1 | 	add	ptra, #12
16d50     1C 69 BF FD | 	call	#_pop
16d54     E7 7A 62 FC | 	wrlong	result1, fp
16d58     04 CE 05 F1 | 	add	fp, #4
16d5c     E7 7C 62 FC | 	wrlong	result2, fp
16d60     04 CE 05 F1 | 	add	fp, #4
16d64     E7 7E 62 FC | 	wrlong	result3, fp
16d68     08 CE 85 F1 | 	sub	fp, #8
16d6c     E7 92 02 F6 | 	mov	arg01, fp
16d70     D8 6A BF FD | 	call	#_converttoint
16d74     50 7A 62 FD | 	fltl	result1
16d78     E7 F0 03 F6 | 	mov	ptra, fp
16d7c     F2 00 A0 FD | 	call	#popregs_
16d80                 | _do_pinfloat_ret
16d80     2D 00 64 FD | 	ret
16d84                 | 
16d84                 | ' 
16d84                 | ' '-------------------- pinhi
16d84                 | ' 
16d84                 | ' sub do_pinhi
16d84                 | _do_pinhi
16d84     00 CA 05 F6 | 	mov	COUNT_, #0
16d88     E8 00 A0 FD | 	call	#pushregs_
16d8c     0C F0 07 F1 | 	add	ptra, #12
16d90     DC 68 BF FD | 	call	#_pop
16d94     E7 7A 62 FC | 	wrlong	result1, fp
16d98     04 CE 05 F1 | 	add	fp, #4
16d9c     E7 7C 62 FC | 	wrlong	result2, fp
16da0     04 CE 05 F1 | 	add	fp, #4
16da4     E7 7E 62 FC | 	wrlong	result3, fp
16da8     08 CE 85 F1 | 	sub	fp, #8
16dac     E7 92 02 F6 | 	mov	arg01, fp
16db0     98 6A BF FD | 	call	#_converttoint
16db4     59 7A 62 FD | 	drvh	result1
16db8     E7 F0 03 F6 | 	mov	ptra, fp
16dbc     F2 00 A0 FD | 	call	#popregs_
16dc0                 | _do_pinhi_ret
16dc0     2D 00 64 FD | 	ret
16dc4                 | 
16dc4                 | ' 
16dc4                 | ' '-------------------- pinlo
16dc4                 | ' 
16dc4                 | ' sub do_pinlo
16dc4                 | _do_pinlo
16dc4     00 CA 05 F6 | 	mov	COUNT_, #0
16dc8     E8 00 A0 FD | 	call	#pushregs_
16dcc     0C F0 07 F1 | 	add	ptra, #12
16dd0     9C 68 BF FD | 	call	#_pop
16dd4     E7 7A 62 FC | 	wrlong	result1, fp
16dd8     04 CE 05 F1 | 	add	fp, #4
16ddc     E7 7C 62 FC | 	wrlong	result2, fp
16de0     04 CE 05 F1 | 	add	fp, #4
16de4     E7 7E 62 FC | 	wrlong	result3, fp
16de8     08 CE 85 F1 | 	sub	fp, #8
16dec     E7 92 02 F6 | 	mov	arg01, fp
16df0     58 6A BF FD | 	call	#_converttoint
16df4     58 7A 62 FD | 	drvl	result1
16df8     E7 F0 03 F6 | 	mov	ptra, fp
16dfc     F2 00 A0 FD | 	call	#popregs_
16e00                 | _do_pinlo_ret
16e00     2D 00 64 FD | 	ret
16e04                 | 
16e04                 | ' 
16e04                 | ' '-------------------- pinread
16e04                 | ' 
16e04                 | ' sub do_pinread
16e04                 | _do_pinread
16e04     00 CA 05 F6 | 	mov	COUNT_, #0
16e08     E8 00 A0 FD | 	call	#pushregs_
16e0c     0C F0 07 F1 | 	add	ptra, #12
16e10     5C 68 BF FD | 	call	#_pop
16e14     E7 7A 62 FC | 	wrlong	result1, fp
16e18     04 CE 05 F1 | 	add	fp, #4
16e1c     E7 7C 62 FC | 	wrlong	result2, fp
16e20     04 CE 05 F1 | 	add	fp, #4
16e24     E7 7E 62 FC | 	wrlong	result3, fp
16e28     08 CE 85 F1 | 	sub	fp, #8
16e2c     E7 92 02 F6 | 	mov	arg01, fp
16e30     18 6A BF FD | 	call	#_converttoint
16e34     3D 93 02 F6 | 	mov	arg01, result1
16e38     20 92 CE F7 | 	test	arg01, #32 wz
16e3c     FF 7B 02 56 |  if_ne	mov	result1, inb
16e40     FE 7B 02 A6 |  if_e	mov	result1, ina
16e44     49 7B 42 F0 | 	shr	result1, arg01
16e48     06 92 46 F0 | 	shr	arg01, #6
16e4c     49 7B 42 F7 | 	zerox	result1, arg01
16e50     54 00 00 FF 
16e54     EC 64 06 F1 | 	add	objptr, ##43244
16e58     32 7B 62 FC | 	wrlong	result1, objptr
16e5c     54 00 00 FF 
16e60     EC 64 86 F1 | 	sub	objptr, ##43244
16e64     08 CE 05 F1 | 	add	fp, #8
16e68     E7 3A 68 FC | 	wrlong	#29, fp
16e6c     08 CE 85 F1 | 	sub	fp, #8
16e70     E7 08 68 FC | 	wrlong	#4, fp
16e74     E7 92 02 F6 | 	mov	arg01, fp
16e78     84 68 BF FD | 	call	#_push
16e7c     E7 F0 03 F6 | 	mov	ptra, fp
16e80     F2 00 A0 FD | 	call	#popregs_
16e84                 | _do_pinread_ret
16e84     2D 00 64 FD | 	ret
16e88                 | 
16e88                 | ' 
16e88                 | ' '-------------------- pinstart
16e88                 | ' 
16e88                 | ' sub do_pinstart
16e88                 | _do_pinstart
16e88     03 CA 05 F6 | 	mov	COUNT_, #3
16e8c     E8 00 A0 FD | 	call	#pushregs_
16e90     30 F0 07 F1 | 	add	ptra, #48
16e94     D8 67 BF FD | 	call	#_pop
16e98     3D 97 02 F6 | 	mov	arg03, result1
16e9c     3E 95 02 F6 | 	mov	arg02, result2
16ea0     3F 99 02 F6 | 	mov	arg04, result3
16ea4     E7 96 62 FC | 	wrlong	arg03, fp
16ea8     04 CE 05 F1 | 	add	fp, #4
16eac     E7 94 62 FC | 	wrlong	arg02, fp
16eb0     04 CE 05 F1 | 	add	fp, #4
16eb4     E7 98 62 FC | 	wrlong	arg04, fp
16eb8     08 CE 85 F1 | 	sub	fp, #8
16ebc     B0 67 BF FD | 	call	#_pop
16ec0     3D 97 02 F6 | 	mov	arg03, result1
16ec4     3E 95 02 F6 | 	mov	arg02, result2
16ec8     3F 99 02 F6 | 	mov	arg04, result3
16ecc     0C CE 05 F1 | 	add	fp, #12
16ed0     E7 96 62 FC | 	wrlong	arg03, fp
16ed4     04 CE 05 F1 | 	add	fp, #4
16ed8     E7 94 62 FC | 	wrlong	arg02, fp
16edc     04 CE 05 F1 | 	add	fp, #4
16ee0     E7 98 62 FC | 	wrlong	arg04, fp
16ee4     14 CE 85 F1 | 	sub	fp, #20
16ee8     84 67 BF FD | 	call	#_pop
16eec     3D 97 02 F6 | 	mov	arg03, result1
16ef0     3E 95 02 F6 | 	mov	arg02, result2
16ef4     3F 99 02 F6 | 	mov	arg04, result3
16ef8     18 CE 05 F1 | 	add	fp, #24
16efc     E7 96 62 FC | 	wrlong	arg03, fp
16f00     04 CE 05 F1 | 	add	fp, #4
16f04     E7 94 62 FC | 	wrlong	arg02, fp
16f08     04 CE 05 F1 | 	add	fp, #4
16f0c     E7 98 62 FC | 	wrlong	arg04, fp
16f10     20 CE 85 F1 | 	sub	fp, #32
16f14     58 67 BF FD | 	call	#_pop
16f18     3F 97 02 F6 | 	mov	arg03, result3
16f1c     24 CE 05 F1 | 	add	fp, #36
16f20     E7 7A 62 FC | 	wrlong	result1, fp
16f24     04 CE 05 F1 | 	add	fp, #4
16f28     E7 7C 62 FC | 	wrlong	result2, fp
16f2c     04 CE 05 F1 | 	add	fp, #4
16f30     E7 96 62 FC | 	wrlong	arg03, fp
16f34     08 CE 85 F1 | 	sub	fp, #8
16f38     E7 92 02 F6 | 	mov	arg01, fp
16f3c     24 CE 85 F1 | 	sub	fp, #36
16f40     08 69 BF FD | 	call	#_converttoint
16f44     3D A7 02 F6 | 	mov	local01, result1
16f48     E7 92 02 F6 | 	mov	arg01, fp
16f4c     18 92 06 F1 | 	add	arg01, #24
16f50     F8 68 BF FD | 	call	#_converttoint
16f54     3D A9 02 F6 | 	mov	local02, result1
16f58     E7 92 02 F6 | 	mov	arg01, fp
16f5c     0C 92 06 F1 | 	add	arg01, #12
16f60     E8 68 BF FD | 	call	#_converttoint
16f64     3D AB 02 F6 | 	mov	local03, result1
16f68     E7 92 02 F6 | 	mov	arg01, fp
16f6c     DC 68 BF FD | 	call	#_converttoint
16f70     40 A6 62 FD | 	dirl	local01
16f74     53 A9 02 FC | 	wrpin	local02, local01
16f78     53 AB 12 FC | 	wxpin	local03, local01
16f7c     53 7B 22 FC | 	wypin	result1, local01
16f80     41 A6 62 FD | 	dirh	local01
16f84     E7 F0 03 F6 | 	mov	ptra, fp
16f88     F2 00 A0 FD | 	call	#popregs_
16f8c                 | _do_pinstart_ret
16f8c     2D 00 64 FD | 	ret
16f90                 | 
16f90                 | ' 
16f90                 | ' '-------------------- pintoggle
16f90                 | ' 
16f90                 | ' sub do_pintoggle
16f90                 | _do_pintoggle
16f90     00 CA 05 F6 | 	mov	COUNT_, #0
16f94     E8 00 A0 FD | 	call	#pushregs_
16f98     0C F0 07 F1 | 	add	ptra, #12
16f9c     D0 66 BF FD | 	call	#_pop
16fa0     E7 7A 62 FC | 	wrlong	result1, fp
16fa4     04 CE 05 F1 | 	add	fp, #4
16fa8     E7 7C 62 FC | 	wrlong	result2, fp
16fac     04 CE 05 F1 | 	add	fp, #4
16fb0     E7 7E 62 FC | 	wrlong	result3, fp
16fb4     08 CE 85 F1 | 	sub	fp, #8
16fb8     E7 92 02 F6 | 	mov	arg01, fp
16fbc     8C 68 BF FD | 	call	#_converttoint
16fc0     5F 7A 62 FD | 	drvnot	result1
16fc4     E7 F0 03 F6 | 	mov	ptra, fp
16fc8     F2 00 A0 FD | 	call	#popregs_
16fcc                 | _do_pintoggle_ret
16fcc     2D 00 64 FD | 	ret
16fd0                 | 
16fd0                 | ' 
16fd0                 | ' '-------------------- pinwrite
16fd0                 | ' 
16fd0                 | ' sub do_pinwrite
16fd0                 | _do_pinwrite
16fd0     01 CA 05 F6 | 	mov	COUNT_, #1
16fd4     E8 00 A0 FD | 	call	#pushregs_
16fd8     18 F0 07 F1 | 	add	ptra, #24
16fdc     90 66 BF FD | 	call	#_pop
16fe0     3D 95 02 F6 | 	mov	arg02, result1
16fe4     3E 93 02 F6 | 	mov	arg01, result2
16fe8     3F A7 02 F6 | 	mov	local01, result3
16fec     E7 94 62 FC | 	wrlong	arg02, fp
16ff0     04 CE 05 F1 | 	add	fp, #4
16ff4     E7 92 62 FC | 	wrlong	arg01, fp
16ff8     04 CE 05 F1 | 	add	fp, #4
16ffc     E7 A6 62 FC | 	wrlong	local01, fp
17000     08 CE 85 F1 | 	sub	fp, #8
17004     68 66 BF FD | 	call	#_pop
17008     3F A7 02 F6 | 	mov	local01, result3
1700c     0C CE 05 F1 | 	add	fp, #12
17010     E7 7A 62 FC | 	wrlong	result1, fp
17014     04 CE 05 F1 | 	add	fp, #4
17018     E7 7C 62 FC | 	wrlong	result2, fp
1701c     04 CE 05 F1 | 	add	fp, #4
17020     E7 A6 62 FC | 	wrlong	local01, fp
17024     08 CE 85 F1 | 	sub	fp, #8
17028     E7 92 02 F6 | 	mov	arg01, fp
1702c     0C CE 85 F1 | 	sub	fp, #12
17030     18 68 BF FD | 	call	#_converttoint
17034     3D A7 02 F6 | 	mov	local01, result1
17038     E7 92 02 F6 | 	mov	arg01, fp
1703c     0C 68 BF FD | 	call	#_converttoint
17040     3D 95 02 F6 | 	mov	arg02, result1
17044     53 93 02 F6 | 	mov	arg01, local01
17048     F8 D8 B0 FD | 	call	#__system___pinwrite
1704c     E7 F0 03 F6 | 	mov	ptra, fp
17050     F2 00 A0 FD | 	call	#popregs_
17054                 | _do_pinwrite_ret
17054     2D 00 64 FD | 	ret
17058                 | 
17058                 | ' 
17058                 | ' '-------------------- play
17058                 | ' 
17058                 | ' sub do_play
17058                 | _do_play
17058     10 CA 05 F6 | 	mov	COUNT_, #16
1705c     E8 00 A0 FD | 	call	#pushregs_
17060     88 F0 07 F1 | 	add	ptra, #136
17064     77 CC 21 FF 
17068     BE A7 06 F6 | 	mov	local01, ##1134096318
1706c                 | ' speed_coeff=305.873
1706c                 | ' 
1706c                 | ' for i=0 to 9 : params(i)=-2.0 : next i
1706c     00 A8 06 F6 | 	mov	local02, #0
17070     40 CE 05 F1 | 	add	fp, #64
17074     D7 10 48 FB | 	callpa	#(@LR__1971-@LR__1970)>>2,fcache_load_ptr_
17078                 | LR__1970
17078     54 AB 02 F6 | 	mov	local03, local02
1707c     02 AA 66 F0 | 	shl	local03, #2
17080     E7 AA 02 F1 | 	add	local03, fp
17084     00 00 E0 FF 
17088     55 01 68 FC | 	wrlong	##-1073741824, local03
1708c     01 A8 06 F1 | 	add	local02, #1
17090     0A A8 56 F2 | 	cmps	local02, #10 wc
17094     E0 FF 9F CD |  if_b	jmp	#LR__1970
17098                 | LR__1971
17098     40 CE 85 F1 | 	sub	fp, #64
1709c     4C 00 00 FF 
170a0     24 64 06 F1 | 	add	objptr, ##38948
170a4     32 A9 02 FB | 	rdlong	local02, objptr
170a8     54 AD 02 F6 | 	mov	local04, local02
170ac     01 AC 66 F0 | 	shl	local04, #1
170b0     54 AD 02 F1 | 	add	local04, local02
170b4     02 AC 66 F0 | 	shl	local04, #2
170b8     03 00 00 FF 
170bc     04 64 86 F1 | 	sub	objptr, ##1540
170c0     32 AD 02 F1 | 	add	local04, objptr
170c4     56 AF 02 FB | 	rdlong	local05, local04
170c8                 | ' numpar=compiledline(lineptr_e).result.uresult
170c8                 | ' for i=numpar to 1 step -1 
170c8     57 A9 02 F6 | 	mov	local02, local05
170cc     49 00 00 FF 
170d0     20 64 86 F1 | 	sub	objptr, ##37408
170d4                 | LR__1972
170d4     98 65 BF FD | 	call	#_pop
170d8     68 CE 05 F1 | 	add	fp, #104
170dc     E7 7A 62 FC | 	wrlong	result1, fp
170e0     04 CE 05 F1 | 	add	fp, #4
170e4     E7 7C 62 FC | 	wrlong	result2, fp
170e8     04 CE 05 F1 | 	add	fp, #4
170ec     E7 7E 62 FC | 	wrlong	result3, fp
170f0     54 AB 02 F6 | 	mov	local03, local02
170f4     01 AA 86 F1 | 	sub	local03, #1
170f8     02 AA 66 F0 | 	shl	local03, #2
170fc     30 CE 85 F1 | 	sub	fp, #48
17100     E7 AA 02 F1 | 	add	local03, fp
17104     28 CE 05 F1 | 	add	fp, #40
17108     E7 B0 02 F6 | 	mov	local06, fp
1710c     58 93 02 F6 | 	mov	arg01, local06
17110     68 CE 85 F1 | 	sub	fp, #104
17114     F0 67 BF FD | 	call	#_converttofloat
17118     55 7B 62 FC | 	wrlong	result1, local03
1711c     01 A8 86 F1 | 	sub	local02, #1
17120     01 A8 56 F2 | 	cmps	local02, #1 wc
17124     AC FF 9F 3D |  if_ae	jmp	#LR__1972
17128                 | ' 
17128                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
17128     40 CE 05 F1 | 	add	fp, #64
1712c     E7 92 02 FB | 	rdlong	arg01, fp
17130     40 CE 85 F1 | 	sub	fp, #64
17134     00 94 06 F6 | 	mov	arg02, #0
17138     01 96 06 F6 | 	mov	arg03, #1
1713c     54 01 B1 FD | 	call	#__system___float_cmp
17140     00 7A 56 F2 | 	cmps	result1, #0 wc
17144     00 B2 06 C6 |  if_b	mov	local07, #0
17148     20 00 90 CD |  if_b	jmp	#LR__1973
1714c     40 CE 05 F1 | 	add	fp, #64
17150     E7 92 02 FB | 	rdlong	arg01, fp
17154     40 CE 85 F1 | 	sub	fp, #64
17158     01 94 06 F6 | 	mov	arg02, #1
1715c     C8 01 B1 FD | 	call	#__system___float_tointeger
17160     3D B3 52 F6 | 	abs	local07, result1 wc
17164     07 B2 06 F5 | 	and	local07, #7
17168     59 B3 82 F6 | 	negc	local07, local07
1716c                 | LR__1973
1716c                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
1716c     44 CE 05 F1 | 	add	fp, #68
17170     E7 92 02 FB | 	rdlong	arg01, fp
17174     44 CE 85 F1 | 	sub	fp, #68
17178     00 94 06 F6 | 	mov	arg02, #0
1717c     01 96 06 F6 | 	mov	arg03, #1
17180     10 01 B1 FD | 	call	#__system___float_cmp
17184     00 7A 56 F2 | 	cmps	result1, #0 wc
17188     28 00 90 3D |  if_ae	jmp	#LR__1974
1718c     59 97 02 F6 | 	mov	arg03, local07
17190     03 96 66 F0 | 	shl	arg03, #3
17194     59 97 82 F1 | 	sub	arg03, local07
17198     02 96 66 F0 | 	shl	arg03, #2
1719c     32 AD 02 F6 | 	mov	local04, objptr
171a0     16 00 00 FF 
171a4     BC AC 06 F1 | 	add	local04, ##11452
171a8     56 97 02 F1 | 	add	arg03, local04
171ac     4B B5 02 FB | 	rdlong	local08, arg03
171b0     30 00 90 FD | 	jmp	#LR__1975
171b4                 | LR__1974
171b4     44 CE 05 F1 | 	add	fp, #68
171b8     E7 B4 02 FB | 	rdlong	local08, fp
171bc     44 CE 85 F1 | 	sub	fp, #68
171c0     59 97 02 F6 | 	mov	arg03, local07
171c4     03 96 66 F0 | 	shl	arg03, #3
171c8     59 97 82 F1 | 	sub	arg03, local07
171cc     02 96 66 F0 | 	shl	arg03, #2
171d0     32 AD 02 F6 | 	mov	local04, objptr
171d4     16 00 00 FF 
171d8     BC AC 06 F1 | 	add	local04, ##11452
171dc     56 97 02 F1 | 	add	arg03, local04
171e0     4B B5 62 FC | 	wrlong	local08, arg03
171e4                 | LR__1975
171e4                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
171e4     48 CE 05 F1 | 	add	fp, #72
171e8     E7 92 02 FB | 	rdlong	arg01, fp
171ec     48 CE 85 F1 | 	sub	fp, #72
171f0     00 94 06 F6 | 	mov	arg02, #0
171f4     01 96 06 F6 | 	mov	arg03, #1
171f8     98 00 B1 FD | 	call	#__system___float_cmp
171fc     00 7A 56 F2 | 	cmps	result1, #0 wc
17200     24 00 90 CD |  if_b	jmp	#LR__1976
17204     48 CE 05 F1 | 	add	fp, #72
17208     E7 92 02 FB | 	rdlong	arg01, fp
1720c     48 CE 85 F1 | 	sub	fp, #72
17210     20 0E 23 FF 
17214     00 94 06 F6 | 	mov	arg02, ##1176256512
17218     01 96 66 F6 | 	neg	arg03, #1
1721c     74 00 B1 FD | 	call	#__system___float_cmp
17220     01 7A 56 F2 | 	cmps	result1, #1 wc
17224     30 00 90 CD |  if_b	jmp	#LR__1977
17228                 | LR__1976
17228     59 AD 02 F6 | 	mov	local04, local07
1722c     03 AC 66 F0 | 	shl	local04, #3
17230     59 AD 82 F1 | 	sub	local04, local07
17234     02 AC 66 F0 | 	shl	local04, #2
17238     32 B1 02 F6 | 	mov	local06, objptr
1723c     16 00 00 FF 
17240     BC B0 06 F1 | 	add	local06, ##11452
17244     58 AD 02 F1 | 	add	local04, local06
17248     06 AC 06 F1 | 	add	local04, #6
1724c     56 B7 E2 FA | 	rdword	local09, local04
17250     5B B9 32 F9 | 	getword	local10, local09, #0
17254     40 00 90 FD | 	jmp	#LR__1978
17258                 | LR__1977
17258     48 CE 05 F1 | 	add	fp, #72
1725c     E7 92 02 FB | 	rdlong	arg01, fp
17260     48 CE 85 F1 | 	sub	fp, #72
17264     01 94 06 F6 | 	mov	arg02, #1
17268     BC 00 B1 FD | 	call	#__system___float_tointeger
1726c     3D B9 02 F6 | 	mov	local10, result1
17270     59 97 02 F6 | 	mov	arg03, local07
17274     03 96 66 F0 | 	shl	arg03, #3
17278     59 97 82 F1 | 	sub	arg03, local07
1727c     02 96 66 F0 | 	shl	arg03, #2
17280     32 AD 02 F6 | 	mov	local04, objptr
17284     16 00 00 FF 
17288     BC AC 06 F1 | 	add	local04, ##11452
1728c     56 97 02 F1 | 	add	arg03, local04
17290     06 96 06 F1 | 	add	arg03, #6
17294     4B B9 52 FC | 	wrword	local10, arg03
17298                 | LR__1978
17298                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
17298     4C CE 05 F1 | 	add	fp, #76
1729c     E7 92 02 FB | 	rdlong	arg01, fp
172a0     4C CE 85 F1 | 	sub	fp, #76
172a4     00 94 06 F6 | 	mov	arg02, #0
172a8     01 96 06 F6 | 	mov	arg03, #1
172ac     E4 FF B0 FD | 	call	#__system___float_cmp
172b0     00 7A 56 F2 | 	cmps	result1, #0 wc
172b4     24 00 90 CD |  if_b	jmp	#LR__1979
172b8     4C CE 05 F1 | 	add	fp, #76
172bc     E7 92 02 FB | 	rdlong	arg01, fp
172c0     4C CE 85 F1 | 	sub	fp, #76
172c4     89 C1 20 FF 
172c8     6F 94 06 F6 | 	mov	arg02, ##1099108975
172cc     01 96 66 F6 | 	neg	arg03, #1
172d0     C0 FF B0 FD | 	call	#__system___float_cmp
172d4     01 7A 56 F2 | 	cmps	result1, #1 wc
172d8     30 00 90 CD |  if_b	jmp	#LR__1980
172dc                 | LR__1979
172dc     59 B1 02 F6 | 	mov	local06, local07
172e0     03 B0 66 F0 | 	shl	local06, #3
172e4     59 B1 82 F1 | 	sub	local06, local07
172e8     02 B0 66 F0 | 	shl	local06, #2
172ec     32 AD 02 F6 | 	mov	local04, objptr
172f0     16 00 00 FF 
172f4     BC AC 06 F1 | 	add	local04, ##11452
172f8     56 B1 02 F1 | 	add	local06, local04
172fc     0C B0 06 F1 | 	add	local06, #12
17300     58 B1 02 FB | 	rdlong	local06, local06
17304     58 BB 02 F6 | 	mov	local11, local06
17308     34 00 90 FD | 	jmp	#LR__1981
1730c                 | LR__1980
1730c     4C CE 05 F1 | 	add	fp, #76
17310     E7 BA 02 FB | 	rdlong	local11, fp
17314     4C CE 85 F1 | 	sub	fp, #76
17318     59 97 02 F6 | 	mov	arg03, local07
1731c     03 96 66 F0 | 	shl	arg03, #3
17320     59 97 82 F1 | 	sub	arg03, local07
17324     02 96 66 F0 | 	shl	arg03, #2
17328     32 AD 02 F6 | 	mov	local04, objptr
1732c     16 00 00 FF 
17330     BC AC 06 F1 | 	add	local04, ##11452
17334     56 97 02 F1 | 	add	arg03, local04
17338     0C 96 06 F1 | 	add	arg03, #12
1733c     4B BB 62 FC | 	wrlong	local11, arg03
17340                 | LR__1981
17340                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
17340     50 CE 05 F1 | 	add	fp, #80
17344     E7 92 02 FB | 	rdlong	arg01, fp
17348     50 CE 85 F1 | 	sub	fp, #80
1734c     00 94 06 F6 | 	mov	arg02, #0
17350     01 96 06 F6 | 	mov	arg03, #1
17354     3C FF B0 FD | 	call	#__system___float_cmp
17358     00 7A 56 F2 | 	cmps	result1, #0 wc
1735c     24 00 90 CD |  if_b	jmp	#LR__1982
17360     50 CE 05 F1 | 	add	fp, #80
17364     E7 92 02 FB | 	rdlong	arg01, fp
17368     50 CE 85 F1 | 	sub	fp, #80
1736c     00 00 21 FF 
17370     00 94 06 F6 | 	mov	arg02, ##1107296256
17374     01 96 66 F6 | 	neg	arg03, #1
17378     18 FF B0 FD | 	call	#__system___float_cmp
1737c     01 7A 56 F2 | 	cmps	result1, #1 wc
17380     30 00 90 CD |  if_b	jmp	#LR__1983
17384                 | LR__1982
17384     59 AD 02 F6 | 	mov	local04, local07
17388     03 AC 66 F0 | 	shl	local04, #3
1738c     59 AD 82 F1 | 	sub	local04, local07
17390     02 AC 66 F0 | 	shl	local04, #2
17394     32 B1 02 F6 | 	mov	local06, objptr
17398     16 00 00 FF 
1739c     BC B0 06 F1 | 	add	local06, ##11452
173a0     58 AD 02 F1 | 	add	local04, local06
173a4     04 AC 06 F1 | 	add	local04, #4
173a8     56 B7 C2 FA | 	rdbyte	local09, local04
173ac     5B BD E2 F8 | 	getbyte	local12, local09, #0
173b0     40 00 90 FD | 	jmp	#LR__1984
173b4                 | LR__1983
173b4     50 CE 05 F1 | 	add	fp, #80
173b8     E7 92 02 FB | 	rdlong	arg01, fp
173bc     50 CE 85 F1 | 	sub	fp, #80
173c0     01 94 06 F6 | 	mov	arg02, #1
173c4     60 FF B0 FD | 	call	#__system___float_tointeger
173c8     3D BD 02 F6 | 	mov	local12, result1
173cc     59 97 02 F6 | 	mov	arg03, local07
173d0     03 96 66 F0 | 	shl	arg03, #3
173d4     59 97 82 F1 | 	sub	arg03, local07
173d8     02 96 66 F0 | 	shl	arg03, #2
173dc     32 AD 02 F6 | 	mov	local04, objptr
173e0     16 00 00 FF 
173e4     BC AC 06 F1 | 	add	local04, ##11452
173e8     56 97 02 F1 | 	add	arg03, local04
173ec     04 96 06 F1 | 	add	arg03, #4
173f0     4B BD 42 FC | 	wrbyte	local12, arg03
173f4                 | LR__1984
173f4                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
173f4     54 CE 05 F1 | 	add	fp, #84
173f8     E7 92 02 FB | 	rdlong	arg01, fp
173fc     54 CE 85 F1 | 	sub	fp, #84
17400     00 94 06 F6 | 	mov	arg02, #0
17404     01 96 06 F6 | 	mov	arg03, #1
17408     88 FE B0 FD | 	call	#__system___float_cmp
1740c     00 7A 56 F2 | 	cmps	result1, #0 wc
17410     24 00 90 CD |  if_b	jmp	#LR__1985
17414     54 CE 05 F1 | 	add	fp, #84
17418     E7 92 02 FB | 	rdlong	arg01, fp
1741c     54 CE 85 F1 | 	sub	fp, #84
17420     00 80 20 FF 
17424     00 94 06 F6 | 	mov	arg02, ##1090519040
17428     01 96 66 F6 | 	neg	arg03, #1
1742c     64 FE B0 FD | 	call	#__system___float_cmp
17430     01 7A 56 F2 | 	cmps	result1, #1 wc
17434     30 00 90 CD |  if_b	jmp	#LR__1986
17438                 | LR__1985
17438     59 AD 02 F6 | 	mov	local04, local07
1743c     03 AC 66 F0 | 	shl	local04, #3
17440     59 AD 82 F1 | 	sub	local04, local07
17444     02 AC 66 F0 | 	shl	local04, #2
17448     32 B1 02 F6 | 	mov	local06, objptr
1744c     16 00 00 FF 
17450     BC B0 06 F1 | 	add	local06, ##11452
17454     58 AD 02 F1 | 	add	local04, local06
17458     05 AC 06 F1 | 	add	local04, #5
1745c     56 B7 C2 FA | 	rdbyte	local09, local04
17460     5B BF E2 F8 | 	getbyte	local13, local09, #0
17464     40 00 90 FD | 	jmp	#LR__1987
17468                 | LR__1986
17468     54 CE 05 F1 | 	add	fp, #84
1746c     E7 92 02 FB | 	rdlong	arg01, fp
17470     54 CE 85 F1 | 	sub	fp, #84
17474     01 94 06 F6 | 	mov	arg02, #1
17478     AC FE B0 FD | 	call	#__system___float_tointeger
1747c     3D BF 02 F6 | 	mov	local13, result1
17480     59 97 02 F6 | 	mov	arg03, local07
17484     03 96 66 F0 | 	shl	arg03, #3
17488     59 97 82 F1 | 	sub	arg03, local07
1748c     02 96 66 F0 | 	shl	arg03, #2
17490     32 AD 02 F6 | 	mov	local04, objptr
17494     16 00 00 FF 
17498     BC AC 06 F1 | 	add	local04, ##11452
1749c     56 97 02 F1 | 	add	arg03, local04
174a0     05 96 06 F1 | 	add	arg03, #5
174a4     4B BF 42 FC | 	wrbyte	local13, arg03
174a8                 | LR__1987
174a8                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
174a8     58 CE 05 F1 | 	add	fp, #88
174ac     E7 92 02 FB | 	rdlong	arg01, fp
174b0     58 CE 85 F1 | 	sub	fp, #88
174b4     00 94 06 F6 | 	mov	arg02, #0
174b8     01 96 06 F6 | 	mov	arg03, #1
174bc     D4 FD B0 FD | 	call	#__system___float_cmp
174c0     00 7A 56 F2 | 	cmps	result1, #0 wc
174c4     24 00 90 CD |  if_b	jmp	#LR__1988
174c8     58 CE 05 F1 | 	add	fp, #88
174cc     E7 92 02 FB | 	rdlong	arg01, fp
174d0     58 CE 85 F1 | 	sub	fp, #88
174d4     00 3D 22 FF 
174d8     00 94 06 F6 | 	mov	arg02, ##1148846080
174dc     01 96 66 F6 | 	neg	arg03, #1
174e0     B0 FD B0 FD | 	call	#__system___float_cmp
174e4     01 7A 56 F2 | 	cmps	result1, #1 wc
174e8     2C 00 90 CD |  if_b	jmp	#LR__1989
174ec                 | LR__1988
174ec     59 B1 02 F6 | 	mov	local06, local07
174f0     03 B0 66 F0 | 	shl	local06, #3
174f4     59 B1 82 F1 | 	sub	local06, local07
174f8     02 B0 66 F0 | 	shl	local06, #2
174fc     32 AD 02 F6 | 	mov	local04, objptr
17500     16 00 00 FF 
17504     BC AC 06 F1 | 	add	local04, ##11452
17508     56 B1 02 F1 | 	add	local06, local04
1750c     08 B0 06 F1 | 	add	local06, #8
17510     58 C1 02 FB | 	rdlong	local14, local06
17514     34 00 90 FD | 	jmp	#LR__1990
17518                 | LR__1989
17518     58 CE 05 F1 | 	add	fp, #88
1751c     E7 C0 02 FB | 	rdlong	local14, fp
17520     58 CE 85 F1 | 	sub	fp, #88
17524     59 B7 02 F6 | 	mov	local09, local07
17528     03 B6 66 F0 | 	shl	local09, #3
1752c     59 B7 82 F1 | 	sub	local09, local07
17530     02 B6 66 F0 | 	shl	local09, #2
17534     32 AD 02 F6 | 	mov	local04, objptr
17538     16 00 00 FF 
1753c     BC AC 06 F1 | 	add	local04, ##11452
17540     56 B7 02 F1 | 	add	local09, local04
17544     08 B6 06 F1 | 	add	local09, #8
17548     5B C1 62 FC | 	wrlong	local14, local09
1754c                 | LR__1990
1754c                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
1754c     5C CE 05 F1 | 	add	fp, #92
17550     E7 92 02 FB | 	rdlong	arg01, fp
17554     5C CE 85 F1 | 	sub	fp, #92
17558     00 C0 5F FF 
1755c     00 94 06 F6 | 	mov	arg02, ##-1082130432
17560     01 96 06 F6 | 	mov	arg03, #1
17564     2C FD B0 FD | 	call	#__system___float_cmp
17568     00 7A 56 F2 | 	cmps	result1, #0 wc
1756c     24 00 90 CD |  if_b	jmp	#LR__1991
17570     5C CE 05 F1 | 	add	fp, #92
17574     E7 92 02 FB | 	rdlong	arg01, fp
17578     5C CE 85 F1 | 	sub	fp, #92
1757c     00 C0 1F FF 
17580     00 94 06 F6 | 	mov	arg02, ##1065353216
17584     01 96 66 F6 | 	neg	arg03, #1
17588     08 FD B0 FD | 	call	#__system___float_cmp
1758c     01 7A 56 F2 | 	cmps	result1, #1 wc
17590     2C 00 90 CD |  if_b	jmp	#LR__1992
17594                 | LR__1991
17594     59 B7 02 F6 | 	mov	local09, local07
17598     03 B6 66 F0 | 	shl	local09, #3
1759c     59 B7 82 F1 | 	sub	local09, local07
175a0     02 B6 66 F0 | 	shl	local09, #2
175a4     32 AD 02 F6 | 	mov	local04, objptr
175a8     16 00 00 FF 
175ac     BC AC 06 F1 | 	add	local04, ##11452
175b0     56 B7 02 F1 | 	add	local09, local04
175b4     10 B6 06 F1 | 	add	local09, #16
175b8     5B C3 02 FB | 	rdlong	local15, local09
175bc     34 00 90 FD | 	jmp	#LR__1993
175c0                 | LR__1992
175c0     5C CE 05 F1 | 	add	fp, #92
175c4     E7 C2 02 FB | 	rdlong	local15, fp
175c8     5C CE 85 F1 | 	sub	fp, #92
175cc     59 B7 02 F6 | 	mov	local09, local07
175d0     03 B6 66 F0 | 	shl	local09, #3
175d4     59 B7 82 F1 | 	sub	local09, local07
175d8     02 B6 66 F0 | 	shl	local09, #2
175dc     32 AD 02 F6 | 	mov	local04, objptr
175e0     16 00 00 FF 
175e4     BC AC 06 F1 | 	add	local04, ##11452
175e8     56 B7 02 F1 | 	add	local09, local04
175ec     10 B6 06 F1 | 	add	local09, #16
175f0     5B C3 62 FC | 	wrlong	local15, local09
175f4                 | LR__1993
175f4                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
175f4     60 CE 05 F1 | 	add	fp, #96
175f8     E7 92 02 FB | 	rdlong	arg01, fp
175fc     60 CE 85 F1 | 	sub	fp, #96
17600     00 94 06 F6 | 	mov	arg02, #0
17604     01 96 06 F6 | 	mov	arg03, #1
17608     88 FC B0 FD | 	call	#__system___float_cmp
1760c     00 7A 56 F2 | 	cmps	result1, #0 wc
17610     24 00 90 CD |  if_b	jmp	#LR__1994
17614     60 CE 05 F1 | 	add	fp, #96
17618     E7 92 02 FB | 	rdlong	arg01, fp
1761c     60 CE 85 F1 | 	sub	fp, #96
17620     80 BF 21 FF 
17624     00 94 06 F6 | 	mov	arg02, ##1132396544
17628     01 96 66 F6 | 	neg	arg03, #1
1762c     64 FC B0 FD | 	call	#__system___float_cmp
17630     01 7A 56 F2 | 	cmps	result1, #1 wc
17634     2C 00 90 CD |  if_b	jmp	#LR__1995
17638                 | LR__1994
17638     59 AD 02 F6 | 	mov	local04, local07
1763c     03 AC 66 F0 | 	shl	local04, #3
17640     59 AD 82 F1 | 	sub	local04, local07
17644     02 AC 66 F0 | 	shl	local04, #2
17648     32 B1 02 F6 | 	mov	local06, objptr
1764c     16 00 00 FF 
17650     BC B0 06 F1 | 	add	local06, ##11452
17654     58 AD 02 F1 | 	add	local04, local06
17658     14 AC 06 F1 | 	add	local04, #20
1765c     56 C5 E2 FA | 	rdword	local16, local04
17660     40 00 90 FD | 	jmp	#LR__1996
17664                 | LR__1995
17664     60 CE 05 F1 | 	add	fp, #96
17668     E7 92 02 FB | 	rdlong	arg01, fp
1766c     60 CE 85 F1 | 	sub	fp, #96
17670     01 94 06 F6 | 	mov	arg02, #1
17674     B0 FC B0 FD | 	call	#__system___float_tointeger
17678     3D C5 02 F6 | 	mov	local16, result1
1767c     59 B7 02 F6 | 	mov	local09, local07
17680     03 B6 66 F0 | 	shl	local09, #3
17684     59 B7 82 F1 | 	sub	local09, local07
17688     02 B6 66 F0 | 	shl	local09, #2
1768c     32 AD 02 F6 | 	mov	local04, objptr
17690     16 00 00 FF 
17694     BC AC 06 F1 | 	add	local04, ##11452
17698     56 B7 02 F1 | 	add	local09, local04
1769c     14 B6 06 F1 | 	add	local09, #20
176a0     5B C5 52 FC | 	wrword	local16, local09
176a4                 | LR__1996
176a4                 | ' if params(9)<0 orelse params(9)>255 then amode=channels(channel).amode else amode= round(params(9)) : channels(channel).amode=amode
176a4     64 CE 05 F1 | 	add	fp, #100
176a8     E7 92 02 FB | 	rdlong	arg01, fp
176ac     64 CE 85 F1 | 	sub	fp, #100
176b0     00 94 06 F6 | 	mov	arg02, #0
176b4     01 96 06 F6 | 	mov	arg03, #1
176b8     D8 FB B0 FD | 	call	#__system___float_cmp
176bc     00 7A 56 F2 | 	cmps	result1, #0 wc
176c0     60 00 90 CD |  if_b	jmp	#LR__1997
176c4     64 CE 05 F1 | 	add	fp, #100
176c8     E7 92 02 FB | 	rdlong	arg01, fp
176cc     64 CE 85 F1 | 	sub	fp, #100
176d0     80 BF 21 FF 
176d4     00 94 06 F6 | 	mov	arg02, ##1132396544
176d8     01 96 66 F6 | 	neg	arg03, #1
176dc     B4 FB B0 FD | 	call	#__system___float_cmp
176e0     01 7A 56 F2 | 	cmps	result1, #1 wc
176e4     3C 00 90 3D |  if_ae	jmp	#LR__1997
176e8     64 CE 05 F1 | 	add	fp, #100
176ec     E7 92 02 FB | 	rdlong	arg01, fp
176f0     64 CE 85 F1 | 	sub	fp, #100
176f4     01 94 06 F6 | 	mov	arg02, #1
176f8     2C FC B0 FD | 	call	#__system___float_tointeger
176fc     59 B7 02 F6 | 	mov	local09, local07
17700     03 B6 66 F0 | 	shl	local09, #3
17704     59 B7 82 F1 | 	sub	local09, local07
17708     02 B6 66 F0 | 	shl	local09, #2
1770c     32 AD 02 F6 | 	mov	local04, objptr
17710     16 00 00 FF 
17714     BC AC 06 F1 | 	add	local04, ##11452
17718     56 B7 02 F1 | 	add	local09, local04
1771c     16 B6 06 F1 | 	add	local09, #22
17720     5B 7B 52 FC | 	wrword	result1, local09
17724                 | LR__1997
17724     5A 93 02 F6 | 	mov	arg01, local08
17728     00 3D 22 FF 
1772c     00 94 06 F6 | 	mov	arg02, ##1148846080
17730     2C F7 B0 FD | 	call	#__system___float_mul
17734     3D 93 02 F6 | 	mov	arg01, result1
17738     01 94 06 F6 | 	mov	arg02, #1
1773c     E8 FB B0 FD | 	call	#__system___float_tointeger
17740     3D B7 02 F6 | 	mov	local09, result1
17744                 | ' 'print wave
17744                 | ' 
17744                 | ' ifreq=round(freq*1000)
17744                 | ' if wave <32 then 
17744     20 BC 56 F2 | 	cmps	local12, #32 wc
17748     0B BC 66 C0 |  if_b	shl	local12, #11
1774c     00 00 01 CF 
17750     00 BC 06 C1 |  if_b	add	local12, ##33554432
17754     00 00 64 3F 
17758     00 BC 06 36 |  if_ae	mov	local12, ##-939524096
1775c                 | ' if env=8 then env=0 else env=varptr(envbuf(env,0))
1775c     08 BE 0E F2 | 	cmp	local13, #8 wz
17760     00 BE 06 A6 |  if_e	mov	local13, #0
17764     09 BE 66 50 |  if_ne	shl	local13, #9
17768     32 B1 02 56 |  if_ne	mov	local06, objptr
1776c     0E 00 00 5F 
17770     38 B0 06 51 |  if_ne	add	local06, ##7224
17774     58 BF 02 51 |  if_ne	add	local13, local06
17778     77 CC 21 FF 
1777c     BE 93 06 F6 | 	mov	arg01, ##1134096318
17780     60 95 02 F6 | 	mov	arg02, local14
17784     DC F8 B0 FD | 	call	#__system___float_div
17788     3D 93 02 F6 | 	mov	arg01, result1
1778c     01 94 06 F6 | 	mov	arg02, #1
17790     94 FB B0 FD | 	call	#__system___float_tointeger
17794     00 00 23 FF 
17798     00 92 06 F6 | 	mov	arg01, ##1174405120
1779c     61 95 02 F6 | 	mov	arg02, local15
177a0     BC F6 B0 FD | 	call	#__system___float_mul
177a4     3D 93 02 F6 | 	mov	arg01, result1
177a8     01 94 06 F6 | 	mov	arg02, #1
177ac     78 FB B0 FD | 	call	#__system___float_tointeger
177b0     0D C2 C6 F9 | 	decod	local15, #13
177b4     3D C3 02 F1 | 	add	local15, result1
177b8     00 3D 22 FF 
177bc     00 92 06 F6 | 	mov	arg01, ##1148846080
177c0     5D 95 02 F6 | 	mov	arg02, local11
177c4     98 F6 B0 FD | 	call	#__system___float_mul
177c8     3D 93 02 F6 | 	mov	arg01, result1
177cc     01 94 06 F6 | 	mov	arg02, #1
177d0     54 FB B0 FD | 	call	#__system___float_tointeger
177d4     3D AD 02 F6 | 	mov	local04, result1
177d8     60 93 02 F6 | 	mov	arg01, local14
177dc     00 3D 22 FF 
177e0     00 94 06 F6 | 	mov	arg02, ##1148846080
177e4     78 F6 B0 FD | 	call	#__system___float_mul
177e8     3D 93 02 F6 | 	mov	arg01, result1
177ec     01 94 06 F6 | 	mov	arg02, #1
177f0     34 FB B0 FD | 	call	#__system___float_tointeger
177f4     3D 9F 02 F6 | 	mov	arg07, result1
177f8     59 93 02 F6 | 	mov	arg01, local07
177fc     5B 95 02 F6 | 	mov	arg02, local09
17800     5C 97 02 F6 | 	mov	arg03, local10
17804     56 99 02 F6 | 	mov	arg04, local04
17808     5E 9B 02 F6 | 	mov	arg05, local12
1780c     5F 9D 02 F6 | 	mov	arg06, local13
17810     61 A1 02 F6 | 	mov	arg08, local15
17814     62 A3 02 F6 | 	mov	arg09, local16
17818     0B 00 00 FF 
1781c     CC 64 06 F1 | 	add	objptr, ##5836
17820     68 C7 B0 FD | 	call	#_Audio2_004_spin2_play
17824     0B 00 00 FF 
17828     CC 64 86 F1 | 	sub	objptr, ##5836
1782c     E7 F0 03 F6 | 	mov	ptra, fp
17830     F2 00 A0 FD | 	call	#popregs_
17834                 | _do_play_ret
17834     2D 00 64 FD | 	ret
17838                 | 
17838                 | ' 
17838                 | ' '-------------------- plot
17838                 | ' 
17838                 | ' sub do_plot
17838                 | _do_plot
17838     01 CA 05 F6 | 	mov	COUNT_, #1
1783c     E8 00 A0 FD | 	call	#pushregs_
17840     20 F0 07 F1 | 	add	ptra, #32
17844     28 5E BF FD | 	call	#_pop
17848     3D 97 02 F6 | 	mov	arg03, result1
1784c     3E 95 02 F6 | 	mov	arg02, result2
17850     3F 93 02 F6 | 	mov	arg01, result3
17854     0C CE 05 F1 | 	add	fp, #12
17858     E7 96 62 FC | 	wrlong	arg03, fp
1785c     04 CE 05 F1 | 	add	fp, #4
17860     E7 94 62 FC | 	wrlong	arg02, fp
17864     04 CE 05 F1 | 	add	fp, #4
17868     E7 92 62 FC | 	wrlong	arg01, fp
1786c     14 CE 85 F1 | 	sub	fp, #20
17870     FC 5D BF FD | 	call	#_pop
17874     3F 97 02 F6 | 	mov	arg03, result3
17878     E7 7A 62 FC | 	wrlong	result1, fp
1787c     04 CE 05 F1 | 	add	fp, #4
17880     E7 7C 62 FC | 	wrlong	result2, fp
17884     04 CE 05 F1 | 	add	fp, #4
17888     E7 96 62 FC | 	wrlong	arg03, fp
1788c     08 CE 85 F1 | 	sub	fp, #8
17890     E7 92 02 F6 | 	mov	arg01, fp
17894     B4 5F BF FD | 	call	#_converttoint
17898     3D A7 02 F6 | 	mov	local01, result1
1789c     E7 92 02 F6 | 	mov	arg01, fp
178a0     0C 92 06 F1 | 	add	arg01, #12
178a4     A4 5F BF FD | 	call	#_converttoint
178a8     3D 95 02 F6 | 	mov	arg02, result1
178ac     38 00 00 FF 
178b0     D0 65 06 F1 | 	add	objptr, ##29136
178b4     32 A7 62 FC | 	wrlong	local01, objptr
178b8     04 64 06 F1 | 	add	objptr, #4
178bc     32 95 62 FC | 	wrlong	arg02, objptr
178c0     04 64 86 F1 | 	sub	objptr, #4
178c4     32 93 02 FB | 	rdlong	arg01, objptr
178c8     04 64 86 F1 | 	sub	objptr, #4
178cc     32 97 02 FB | 	rdlong	arg03, objptr
178d0     38 00 00 FF 
178d4     CC 65 86 F1 | 	sub	objptr, ##29132
178d8     68 A1 B0 FD | 	call	#_hg010b_spin2_putpixel
178dc     E7 F0 03 F6 | 	mov	ptra, fp
178e0     F2 00 A0 FD | 	call	#popregs_
178e4                 | _do_plot_ret
178e4     2D 00 64 FD | 	ret
178e8                 | 
178e8                 | ' 
178e8                 | ' '-------------------- poke
178e8                 | ' 
178e8                 | ' sub do_poke
178e8                 | _do_poke
178e8     02 CA 05 F6 | 	mov	COUNT_, #2
178ec     E8 00 A0 FD | 	call	#pushregs_
178f0     20 F0 07 F1 | 	add	ptra, #32
178f4     78 5D BF FD | 	call	#_pop
178f8     3D 95 02 F6 | 	mov	arg02, result1
178fc     3E 93 02 F6 | 	mov	arg01, result2
17900     3F A7 02 F6 | 	mov	local01, result3
17904     E7 94 62 FC | 	wrlong	arg02, fp
17908     04 CE 05 F1 | 	add	fp, #4
1790c     E7 92 62 FC | 	wrlong	arg01, fp
17910     04 CE 05 F1 | 	add	fp, #4
17914     E7 A6 62 FC | 	wrlong	local01, fp
17918     08 CE 85 F1 | 	sub	fp, #8
1791c     50 5D BF FD | 	call	#_pop
17920     3F A7 02 F6 | 	mov	local01, result3
17924     0C CE 05 F1 | 	add	fp, #12
17928     E7 7A 62 FC | 	wrlong	result1, fp
1792c     04 CE 05 F1 | 	add	fp, #4
17930     E7 7C 62 FC | 	wrlong	result2, fp
17934     04 CE 05 F1 | 	add	fp, #4
17938     E7 A6 62 FC | 	wrlong	local01, fp
1793c     08 CE 85 F1 | 	sub	fp, #8
17940     E7 92 02 F6 | 	mov	arg01, fp
17944     0C CE 85 F1 | 	sub	fp, #12
17948     00 5F BF FD | 	call	#_converttoint
1794c     3D A7 02 F6 | 	mov	local01, result1
17950     E7 92 02 F6 | 	mov	arg01, fp
17954     F4 5E BF FD | 	call	#_converttoint
17958     3D A9 02 F6 | 	mov	local02, result1
1795c                 | ' t1=pop() 'value
1795c                 | ' t2=pop() 
1795c                 | ' a=converttoint(t2) : v=converttoint(t1)
1795c                 | ' if a<$80000 then poke a,v else pspoke a,v
1795c     00 04 00 FF 
17960     00 A6 16 F2 | 	cmp	local01, ##524288 wc
17964     53 A9 42 CC |  if_b	wrbyte	local02, local01
17968     53 93 02 36 |  if_ae	mov	arg01, local01
1796c     54 95 02 36 |  if_ae	mov	arg02, local02
17970     54 92 B0 3D |  if_ae	call	#_pspoke
17974     E7 F0 03 F6 | 	mov	ptra, fp
17978     F2 00 A0 FD | 	call	#popregs_
1797c                 | _do_poke_ret
1797c     2D 00 64 FD | 	ret
17980                 | 
17980                 | ' 
17980                 | ' '-------------------- pop
17980                 | ' 
17980                 | ' sub do_pop()
17980                 | _do_pop
17980                 | ' if gosubtop>0 then  gosubtop -=1 
17980     52 00 00 FF 
17984     D8 64 06 F1 | 	add	objptr, ##42200
17988     32 81 02 FB | 	rdlong	_var01, objptr
1798c     52 00 00 FF 
17990     D8 64 86 F1 | 	sub	objptr, ##42200
17994     01 80 56 F2 | 	cmps	_var01, #1 wc
17998     52 00 00 3F 
1799c     D8 64 06 31 |  if_ae	add	objptr, ##42200
179a0     32 81 02 3B |  if_ae	rdlong	_var01, objptr
179a4     01 80 86 31 |  if_ae	sub	_var01, #1
179a8     32 81 62 3C |  if_ae	wrlong	_var01, objptr
179ac     52 00 00 3F 
179b0     D8 64 86 31 |  if_ae	sub	objptr, ##42200
179b4                 | _do_pop_ret
179b4     2D 00 64 FD | 	ret
179b8                 | 
179b8                 | ' 
179b8                 | ' '-------------------- position
179b8                 | ' 
179b8                 | ' sub do_position
179b8                 | _do_position
179b8     01 CA 05 F6 | 	mov	COUNT_, #1
179bc     E8 00 A0 FD | 	call	#pushregs_
179c0     18 F0 07 F1 | 	add	ptra, #24
179c4     A8 5C BF FD | 	call	#_pop
179c8     3D 95 02 F6 | 	mov	arg02, result1
179cc     3E 93 02 F6 | 	mov	arg01, result2
179d0     3F A7 02 F6 | 	mov	local01, result3
179d4     E7 94 62 FC | 	wrlong	arg02, fp
179d8     04 CE 05 F1 | 	add	fp, #4
179dc     E7 92 62 FC | 	wrlong	arg01, fp
179e0     04 CE 05 F1 | 	add	fp, #4
179e4     E7 A6 62 FC | 	wrlong	local01, fp
179e8     08 CE 85 F1 | 	sub	fp, #8
179ec     80 5C BF FD | 	call	#_pop
179f0     3F A7 02 F6 | 	mov	local01, result3
179f4     0C CE 05 F1 | 	add	fp, #12
179f8     E7 7A 62 FC | 	wrlong	result1, fp
179fc     04 CE 05 F1 | 	add	fp, #4
17a00     E7 7C 62 FC | 	wrlong	result2, fp
17a04     04 CE 05 F1 | 	add	fp, #4
17a08     E7 A6 62 FC | 	wrlong	local01, fp
17a0c     08 CE 85 F1 | 	sub	fp, #8
17a10     E7 92 02 F6 | 	mov	arg01, fp
17a14     0C CE 85 F1 | 	sub	fp, #12
17a18     30 5E BF FD | 	call	#_converttoint
17a1c     3D A7 02 F6 | 	mov	local01, result1
17a20     E7 92 02 F6 | 	mov	arg01, fp
17a24     24 5E BF FD | 	call	#_converttoint
17a28     3D 95 02 F6 | 	mov	arg02, result1
17a2c     53 93 02 F6 | 	mov	arg01, local01
17a30     10 AC B0 FD | 	call	#_hg010b_spin2_setcursorpos
17a34     E7 F0 03 F6 | 	mov	ptra, fp
17a38     F2 00 A0 FD | 	call	#popregs_
17a3c                 | _do_position_ret
17a3c     2D 00 64 FD | 	ret
17a40                 | 
17a40                 | ' 
17a40                 | ' '-------------------- print
17a40                 | ' 
17a40                 | ' sub do_print  
17a40                 | _do_print
17a40     0B CA 05 F6 | 	mov	COUNT_, #11
17a44     E8 00 A0 FD | 	call	#pushregs_
17a48     00 AC 06 F6 | 	mov	local04, #0
17a4c     20 5C BF FD | 	call	#_pop
17a50     3D AF 02 F6 | 	mov	local05, result1
17a54     3E B1 02 F6 | 	mov	local06, result2
17a58     3F B3 02 F6 | 	mov	local07, result3
17a5c     57 A7 02 F6 | 	mov	local01, local05
17a60     58 A9 02 F6 | 	mov	local02, local06
17a64     59 AB 02 F6 | 	mov	local03, local07
17a68                 | '  
17a68                 | ' r=0
17a68                 | ' t1=pop() 
17a68                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
17a68     21 AA 0E F2 | 	cmp	local03, #33 wz
17a6c     22 AA 0E 52 |  if_ne	cmp	local03, #34 wz
17a70     20 00 90 5D |  if_ne	jmp	#LR__2000
17a74     55 AD 02 F6 | 	mov	local04, local03
17a78     F4 5B BF FD | 	call	#_pop
17a7c     3D AF 02 F6 | 	mov	local05, result1
17a80     3E B1 02 F6 | 	mov	local06, result2
17a84     3F B3 02 F6 | 	mov	local07, result3
17a88     57 A7 02 F6 | 	mov	local01, local05
17a8c     58 A9 02 F6 | 	mov	local02, local06
17a90     59 AB 02 F6 | 	mov	local03, local07
17a94                 | LR__2000
17a94                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
17a94     20 AA 0E F2 | 	cmp	local03, #32 wz
17a98     55 AD 02 A6 |  if_e	mov	local04, local03
17a9c                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
17a9c     FF AA 0E F2 | 	cmp	local03, #255 wz
17aa0     10 00 90 5D |  if_ne	jmp	#LR__2001
17aa4     53 93 02 F6 | 	mov	arg01, local01
17aa8     00 94 06 F6 | 	mov	arg02, #0
17aac     E8 8E B0 FD | 	call	#_printerror
17ab0     D4 04 90 FD | 	jmp	#LR__2020
17ab4                 | LR__2001
17ab4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
17ab4     2B AA 0E F2 | 	cmp	local03, #43 wz
17ab8     14 00 90 5D |  if_ne	jmp	#LR__2002
17abc     53 93 02 F6 | 	mov	arg01, local01
17ac0     1C 5D BF FD | 	call	#_convertstring
17ac4     3D AF 02 F6 | 	mov	local05, result1
17ac8     57 A7 02 F6 | 	mov	local01, local05
17acc     1F AA 06 F6 | 	mov	local03, #31
17ad0                 | LR__2002
17ad0                 | ' 
17ad0                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
17ad0     2C AA 0E F2 | 	cmp	local03, #44 wz
17ad4     80 00 90 5D |  if_ne	jmp	#LR__2003
17ad8     00 92 06 F6 | 	mov	arg01, #0
17adc     34 22 B1 FD | 	call	#__system___getiolock_0622
17ae0     3D 93 02 F6 | 	mov	arg01, result1
17ae4     A8 CC B0 FD | 	call	#__system___lockmem
17ae8     97 01 00 FF 
17aec     70 94 06 F6 | 	mov	arg02, ##@LR__6054
17af0     00 92 06 F6 | 	mov	arg01, #0
17af4     00 96 06 F6 | 	mov	arg03, #0
17af8     88 D9 B0 FD | 	call	#__system___basic_print_string
17afc     0A B4 06 F6 | 	mov	local08, #10
17b00     00 92 06 F6 | 	mov	arg01, #0
17b04     53 95 02 F6 | 	mov	arg02, local01
17b08     00 96 06 F6 | 	mov	arg03, #0
17b0c     0A 98 06 F6 | 	mov	arg04, #10
17b10     B4 D9 B0 FD | 	call	#__system___basic_print_integer
17b14     3D B7 02 F6 | 	mov	local09, result1
17b18     00 92 06 F6 | 	mov	arg01, #0
17b1c     0A 94 06 F6 | 	mov	arg02, #10
17b20     00 96 06 F6 | 	mov	arg03, #0
17b24     04 D9 B0 FD | 	call	#__system___basic_print_char
17b28     01 B8 06 F6 | 	mov	local10, #1
17b2c     00 92 06 F6 | 	mov	arg01, #0
17b30     E0 21 B1 FD | 	call	#__system___getiolock_0622
17b34     3D 01 68 FC | 	wrlong	#0, result1
17b38     00 BA 06 F6 | 	mov	local11, #0
17b3c     30 5B BF FD | 	call	#_pop
17b40     3D AF 02 F6 | 	mov	local05, result1
17b44     3E B1 02 F6 | 	mov	local06, result2
17b48     3F B3 02 F6 | 	mov	local07, result3
17b4c     57 A7 02 F6 | 	mov	local01, local05
17b50     58 A9 02 F6 | 	mov	local02, local06
17b54     59 AB 02 F6 | 	mov	local03, local07
17b58                 | LR__2003
17b58                 | ' 
17b58                 | ' if r=print_mod_comma  then
17b58     21 AC 0E F2 | 	cmp	local04, #33 wz
17b5c     AC 01 90 5D |  if_ne	jmp	#LR__2008
17b60                 | '   if t1.result_type=result_int then print t1.result.iresult,
17b60     1C AA 0E F2 | 	cmp	local03, #28 wz
17b64     64 00 90 5D |  if_ne	jmp	#LR__2004
17b68     00 92 06 F6 | 	mov	arg01, #0
17b6c     A4 21 B1 FD | 	call	#__system___getiolock_0622
17b70     3D 93 02 F6 | 	mov	arg01, result1
17b74     18 CC B0 FD | 	call	#__system___lockmem
17b78     00 B0 06 F6 | 	mov	local06, #0
17b7c     00 92 06 F6 | 	mov	arg01, #0
17b80     53 95 02 F6 | 	mov	arg02, local01
17b84     00 96 06 F6 | 	mov	arg03, #0
17b88     0A 98 06 F6 | 	mov	arg04, #10
17b8c     38 D9 B0 FD | 	call	#__system___basic_print_integer
17b90     3D B3 02 F6 | 	mov	local07, result1
17b94     58 AF 02 F6 | 	mov	local05, local06
17b98     59 AF 02 F1 | 	add	local05, local07
17b9c     00 BA 06 F6 | 	mov	local11, #0
17ba0     00 92 06 F6 | 	mov	arg01, #0
17ba4     09 94 06 F6 | 	mov	arg02, #9
17ba8     00 96 06 F6 | 	mov	arg03, #0
17bac     7C D8 B0 FD | 	call	#__system___basic_print_char
17bb0     3D B7 02 F6 | 	mov	local09, result1
17bb4     3D AF 02 F1 | 	add	local05, result1
17bb8     00 92 06 F6 | 	mov	arg01, #0
17bbc     54 21 B1 FD | 	call	#__system___getiolock_0622
17bc0     3D 01 68 FC | 	wrlong	#0, result1
17bc4     00 7A 06 F6 | 	mov	result1, #0
17bc8     00 B8 06 F6 | 	mov	local10, #0
17bcc                 | LR__2004
17bcc                 | '   if t1.result_type=result_uint then print t1.result.uresult,
17bcc     1D AA 0E F2 | 	cmp	local03, #29 wz
17bd0     64 00 90 5D |  if_ne	jmp	#LR__2005
17bd4     00 92 06 F6 | 	mov	arg01, #0
17bd8     38 21 B1 FD | 	call	#__system___getiolock_0622
17bdc     3D 93 02 F6 | 	mov	arg01, result1
17be0     AC CB B0 FD | 	call	#__system___lockmem
17be4     00 B0 06 F6 | 	mov	local06, #0
17be8     00 92 06 F6 | 	mov	arg01, #0
17bec     53 95 02 F6 | 	mov	arg02, local01
17bf0     00 96 06 F6 | 	mov	arg03, #0
17bf4     0A 98 06 F6 | 	mov	arg04, #10
17bf8     0C D9 B0 FD | 	call	#__system___basic_print_unsigned
17bfc     3D B3 02 F6 | 	mov	local07, result1
17c00     58 AF 02 F6 | 	mov	local05, local06
17c04     59 AF 02 F1 | 	add	local05, local07
17c08     00 BA 06 F6 | 	mov	local11, #0
17c0c     00 92 06 F6 | 	mov	arg01, #0
17c10     09 94 06 F6 | 	mov	arg02, #9
17c14     00 96 06 F6 | 	mov	arg03, #0
17c18     10 D8 B0 FD | 	call	#__system___basic_print_char
17c1c     3D B7 02 F6 | 	mov	local09, result1
17c20     3D AF 02 F1 | 	add	local05, result1
17c24     00 92 06 F6 | 	mov	arg01, #0
17c28     E8 20 B1 FD | 	call	#__system___getiolock_0622
17c2c     3D 01 68 FC | 	wrlong	#0, result1
17c30     00 7A 06 F6 | 	mov	result1, #0
17c34     00 B8 06 F6 | 	mov	local10, #0
17c38                 | LR__2005
17c38                 | '   if t1.result_type=result_float then print t1.result.fresult,
17c38     1E AA 0E F2 | 	cmp	local03, #30 wz
17c3c     64 00 90 5D |  if_ne	jmp	#LR__2006
17c40     00 92 06 F6 | 	mov	arg01, #0
17c44     CC 20 B1 FD | 	call	#__system___getiolock_0622
17c48     3D 93 02 F6 | 	mov	arg01, result1
17c4c     40 CB B0 FD | 	call	#__system___lockmem
17c50     00 B0 06 F6 | 	mov	local06, #0
17c54     00 92 06 F6 | 	mov	arg01, #0
17c58     53 95 02 F6 | 	mov	arg02, local01
17c5c     00 96 06 F6 | 	mov	arg03, #0
17c60     23 98 06 F6 | 	mov	arg04, #35
17c64     1C F8 B0 FD | 	call	#__system___basic_print_float
17c68     3D B3 02 F6 | 	mov	local07, result1
17c6c     58 AF 02 F6 | 	mov	local05, local06
17c70     59 AF 02 F1 | 	add	local05, local07
17c74     00 BA 06 F6 | 	mov	local11, #0
17c78     00 92 06 F6 | 	mov	arg01, #0
17c7c     09 94 06 F6 | 	mov	arg02, #9
17c80     00 96 06 F6 | 	mov	arg03, #0
17c84     A4 D7 B0 FD | 	call	#__system___basic_print_char
17c88     3D B7 02 F6 | 	mov	local09, result1
17c8c     3D AF 02 F1 | 	add	local05, result1
17c90     00 92 06 F6 | 	mov	arg01, #0
17c94     7C 20 B1 FD | 	call	#__system___getiolock_0622
17c98     3D 01 68 FC | 	wrlong	#0, result1
17c9c     00 7A 06 F6 | 	mov	result1, #0
17ca0     00 B8 06 F6 | 	mov	local10, #0
17ca4                 | LR__2006
17ca4                 | '   if t1.result_type=result_string then print t1.result.sresult,
17ca4     1F AA 0E F2 | 	cmp	local03, #31 wz
17ca8     60 00 90 5D |  if_ne	jmp	#LR__2007
17cac     00 92 06 F6 | 	mov	arg01, #0
17cb0     60 20 B1 FD | 	call	#__system___getiolock_0622
17cb4     3D 93 02 F6 | 	mov	arg01, result1
17cb8     D4 CA B0 FD | 	call	#__system___lockmem
17cbc     00 B0 06 F6 | 	mov	local06, #0
17cc0     00 92 06 F6 | 	mov	arg01, #0
17cc4     53 95 02 F6 | 	mov	arg02, local01
17cc8     00 96 06 F6 | 	mov	arg03, #0
17ccc     B4 D7 B0 FD | 	call	#__system___basic_print_string
17cd0     3D B3 02 F6 | 	mov	local07, result1
17cd4     58 AF 02 F6 | 	mov	local05, local06
17cd8     59 AF 02 F1 | 	add	local05, local07
17cdc     00 BA 06 F6 | 	mov	local11, #0
17ce0     00 92 06 F6 | 	mov	arg01, #0
17ce4     09 94 06 F6 | 	mov	arg02, #9
17ce8     00 96 06 F6 | 	mov	arg03, #0
17cec     3C D7 B0 FD | 	call	#__system___basic_print_char
17cf0     3D B7 02 F6 | 	mov	local09, result1
17cf4     3D AF 02 F1 | 	add	local05, result1
17cf8     00 92 06 F6 | 	mov	arg01, #0
17cfc     14 20 B1 FD | 	call	#__system___getiolock_0622
17d00     3D 01 68 FC | 	wrlong	#0, result1
17d04     00 7A 06 F6 | 	mov	result1, #0
17d08     00 B8 06 F6 | 	mov	local10, #0
17d0c                 | LR__2007
17d0c                 | LR__2008
17d0c                 | ' if r=print_mod_semicolon then 
17d0c     22 AC 0E F2 | 	cmp	local04, #34 wz
17d10     1C 01 90 5D |  if_ne	jmp	#LR__2013
17d14                 | '   if t1.result_type=result_int then print t1.result.iresult;
17d14     1C AA 0E F2 | 	cmp	local03, #28 wz
17d18     50 00 90 5D |  if_ne	jmp	#LR__2009
17d1c     00 92 06 F6 | 	mov	arg01, #0
17d20     F0 1F B1 FD | 	call	#__system___getiolock_0622
17d24     3D 93 02 F6 | 	mov	arg01, result1
17d28     64 CA B0 FD | 	call	#__system___lockmem
17d2c     00 B0 06 F6 | 	mov	local06, #0
17d30     00 B8 06 F6 | 	mov	local10, #0
17d34     0A BA 06 F6 | 	mov	local11, #10
17d38     00 92 06 F6 | 	mov	arg01, #0
17d3c     53 95 02 F6 | 	mov	arg02, local01
17d40     00 96 06 F6 | 	mov	arg03, #0
17d44     0A 98 06 F6 | 	mov	arg04, #10
17d48     7C D7 B0 FD | 	call	#__system___basic_print_integer
17d4c     3D B3 02 F6 | 	mov	local07, result1
17d50     58 AF 02 F6 | 	mov	local05, local06
17d54     59 AF 02 F1 | 	add	local05, local07
17d58     00 92 06 F6 | 	mov	arg01, #0
17d5c     B4 1F B1 FD | 	call	#__system___getiolock_0622
17d60     3D 01 68 FC | 	wrlong	#0, result1
17d64     00 7A 06 F6 | 	mov	result1, #0
17d68     00 B6 06 F6 | 	mov	local09, #0
17d6c                 | LR__2009
17d6c                 | '   if t1.result_type=result_uint then print t1.result.uresult;
17d6c     1D AA 0E F2 | 	cmp	local03, #29 wz
17d70     50 00 90 5D |  if_ne	jmp	#LR__2010
17d74     00 92 06 F6 | 	mov	arg01, #0
17d78     98 1F B1 FD | 	call	#__system___getiolock_0622
17d7c     3D 93 02 F6 | 	mov	arg01, result1
17d80     0C CA B0 FD | 	call	#__system___lockmem
17d84     00 B0 06 F6 | 	mov	local06, #0
17d88     00 B8 06 F6 | 	mov	local10, #0
17d8c     0A BA 06 F6 | 	mov	local11, #10
17d90     00 92 06 F6 | 	mov	arg01, #0
17d94     53 95 02 F6 | 	mov	arg02, local01
17d98     00 96 06 F6 | 	mov	arg03, #0
17d9c     0A 98 06 F6 | 	mov	arg04, #10
17da0     64 D7 B0 FD | 	call	#__system___basic_print_unsigned
17da4     3D B3 02 F6 | 	mov	local07, result1
17da8     58 AF 02 F6 | 	mov	local05, local06
17dac     59 AF 02 F1 | 	add	local05, local07
17db0     00 92 06 F6 | 	mov	arg01, #0
17db4     5C 1F B1 FD | 	call	#__system___getiolock_0622
17db8     3D 01 68 FC | 	wrlong	#0, result1
17dbc     00 7A 06 F6 | 	mov	result1, #0
17dc0     00 B6 06 F6 | 	mov	local09, #0
17dc4                 | LR__2010
17dc4                 | '   if t1.result_type=result_float then print t1.result.fresult;
17dc4     1E AA 0E F2 | 	cmp	local03, #30 wz
17dc8     30 00 90 5D |  if_ne	jmp	#LR__2011
17dcc     00 92 06 F6 | 	mov	arg01, #0
17dd0     40 1F B1 FD | 	call	#__system___getiolock_0622
17dd4     3D 93 02 F6 | 	mov	arg01, result1
17dd8     B4 C9 B0 FD | 	call	#__system___lockmem
17ddc     00 92 06 F6 | 	mov	arg01, #0
17de0     53 95 02 F6 | 	mov	arg02, local01
17de4     00 96 06 F6 | 	mov	arg03, #0
17de8     23 98 06 F6 | 	mov	arg04, #35
17dec     94 F6 B0 FD | 	call	#__system___basic_print_float
17df0     00 92 06 F6 | 	mov	arg01, #0
17df4     1C 1F B1 FD | 	call	#__system___getiolock_0622
17df8     3D 01 68 FC | 	wrlong	#0, result1
17dfc                 | LR__2011
17dfc                 | '   if t1.result_type=result_string then print t1.result.sresult;
17dfc     1F AA 0E F2 | 	cmp	local03, #31 wz
17e00     2C 00 90 5D |  if_ne	jmp	#LR__2012
17e04     00 92 06 F6 | 	mov	arg01, #0
17e08     08 1F B1 FD | 	call	#__system___getiolock_0622
17e0c     3D 93 02 F6 | 	mov	arg01, result1
17e10     7C C9 B0 FD | 	call	#__system___lockmem
17e14     00 92 06 F6 | 	mov	arg01, #0
17e18     53 95 02 F6 | 	mov	arg02, local01
17e1c     00 96 06 F6 | 	mov	arg03, #0
17e20     60 D6 B0 FD | 	call	#__system___basic_print_string
17e24     00 92 06 F6 | 	mov	arg01, #0
17e28     E8 1E B1 FD | 	call	#__system___getiolock_0622
17e2c     3D 01 68 FC | 	wrlong	#0, result1
17e30                 | LR__2012
17e30                 | LR__2013
17e30                 | ' if r=0 then 
17e30     00 AC 0E F2 | 	cmp	local04, #0 wz
17e34     1C 01 90 5D |  if_ne	jmp	#LR__2018
17e38                 | '   if t1.result_type=result_int then print t1.result.iresult
17e38     1C AA 0E F2 | 	cmp	local03, #28 wz
17e3c     40 00 90 5D |  if_ne	jmp	#LR__2014
17e40     00 92 06 F6 | 	mov	arg01, #0
17e44     CC 1E B1 FD | 	call	#__system___getiolock_0622
17e48     3D 93 02 F6 | 	mov	arg01, result1
17e4c     40 C9 B0 FD | 	call	#__system___lockmem
17e50     00 92 06 F6 | 	mov	arg01, #0
17e54     53 95 02 F6 | 	mov	arg02, local01
17e58     00 96 06 F6 | 	mov	arg03, #0
17e5c     0A 98 06 F6 | 	mov	arg04, #10
17e60     64 D6 B0 FD | 	call	#__system___basic_print_integer
17e64     00 92 06 F6 | 	mov	arg01, #0
17e68     0A 94 06 F6 | 	mov	arg02, #10
17e6c     00 96 06 F6 | 	mov	arg03, #0
17e70     B8 D5 B0 FD | 	call	#__system___basic_print_char
17e74     00 92 06 F6 | 	mov	arg01, #0
17e78     98 1E B1 FD | 	call	#__system___getiolock_0622
17e7c     3D 01 68 FC | 	wrlong	#0, result1
17e80                 | LR__2014
17e80                 | '   if t1.result_type=result_uint then print t1.result.uresult
17e80     1D AA 0E F2 | 	cmp	local03, #29 wz
17e84     40 00 90 5D |  if_ne	jmp	#LR__2015
17e88     00 92 06 F6 | 	mov	arg01, #0
17e8c     84 1E B1 FD | 	call	#__system___getiolock_0622
17e90     3D 93 02 F6 | 	mov	arg01, result1
17e94     F8 C8 B0 FD | 	call	#__system___lockmem
17e98     00 92 06 F6 | 	mov	arg01, #0
17e9c     53 95 02 F6 | 	mov	arg02, local01
17ea0     00 96 06 F6 | 	mov	arg03, #0
17ea4     0A 98 06 F6 | 	mov	arg04, #10
17ea8     5C D6 B0 FD | 	call	#__system___basic_print_unsigned
17eac     00 92 06 F6 | 	mov	arg01, #0
17eb0     0A 94 06 F6 | 	mov	arg02, #10
17eb4     00 96 06 F6 | 	mov	arg03, #0
17eb8     70 D5 B0 FD | 	call	#__system___basic_print_char
17ebc     00 92 06 F6 | 	mov	arg01, #0
17ec0     50 1E B1 FD | 	call	#__system___getiolock_0622
17ec4     3D 01 68 FC | 	wrlong	#0, result1
17ec8                 | LR__2015
17ec8                 | '   if t1.result_type=result_float then print t1.result.fresult
17ec8     1E AA 0E F2 | 	cmp	local03, #30 wz
17ecc     40 00 90 5D |  if_ne	jmp	#LR__2016
17ed0     00 92 06 F6 | 	mov	arg01, #0
17ed4     3C 1E B1 FD | 	call	#__system___getiolock_0622
17ed8     3D 93 02 F6 | 	mov	arg01, result1
17edc     B0 C8 B0 FD | 	call	#__system___lockmem
17ee0     00 92 06 F6 | 	mov	arg01, #0
17ee4     53 95 02 F6 | 	mov	arg02, local01
17ee8     00 96 06 F6 | 	mov	arg03, #0
17eec     23 98 06 F6 | 	mov	arg04, #35
17ef0     90 F5 B0 FD | 	call	#__system___basic_print_float
17ef4     00 92 06 F6 | 	mov	arg01, #0
17ef8     0A 94 06 F6 | 	mov	arg02, #10
17efc     00 96 06 F6 | 	mov	arg03, #0
17f00     28 D5 B0 FD | 	call	#__system___basic_print_char
17f04     00 92 06 F6 | 	mov	arg01, #0
17f08     08 1E B1 FD | 	call	#__system___getiolock_0622
17f0c     3D 01 68 FC | 	wrlong	#0, result1
17f10                 | LR__2016
17f10                 | '   if t1.result_type=result_string then print t1.result.sresult
17f10     1F AA 0E F2 | 	cmp	local03, #31 wz
17f14     3C 00 90 5D |  if_ne	jmp	#LR__2017
17f18     00 92 06 F6 | 	mov	arg01, #0
17f1c     F4 1D B1 FD | 	call	#__system___getiolock_0622
17f20     3D 93 02 F6 | 	mov	arg01, result1
17f24     68 C8 B0 FD | 	call	#__system___lockmem
17f28     00 92 06 F6 | 	mov	arg01, #0
17f2c     53 95 02 F6 | 	mov	arg02, local01
17f30     00 96 06 F6 | 	mov	arg03, #0
17f34     4C D5 B0 FD | 	call	#__system___basic_print_string
17f38     00 92 06 F6 | 	mov	arg01, #0
17f3c     0A 94 06 F6 | 	mov	arg02, #10
17f40     00 96 06 F6 | 	mov	arg03, #0
17f44     E4 D4 B0 FD | 	call	#__system___basic_print_char
17f48     00 92 06 F6 | 	mov	arg01, #0
17f4c     C4 1D B1 FD | 	call	#__system___getiolock_0622
17f50     3D 01 68 FC | 	wrlong	#0, result1
17f54                 | LR__2017
17f54                 | LR__2018
17f54                 | ' if r=print_mod_empty then print
17f54     20 AC 0E F2 | 	cmp	local04, #32 wz
17f58     2C 00 90 5D |  if_ne	jmp	#LR__2019
17f5c     00 92 06 F6 | 	mov	arg01, #0
17f60     B0 1D B1 FD | 	call	#__system___getiolock_0622
17f64     3D 93 02 F6 | 	mov	arg01, result1
17f68     24 C8 B0 FD | 	call	#__system___lockmem
17f6c     00 92 06 F6 | 	mov	arg01, #0
17f70     0A 94 06 F6 | 	mov	arg02, #10
17f74     00 96 06 F6 | 	mov	arg03, #0
17f78     B0 D4 B0 FD | 	call	#__system___basic_print_char
17f7c     00 92 06 F6 | 	mov	arg01, #0
17f80     90 1D B1 FD | 	call	#__system___getiolock_0622
17f84     3D 01 68 FC | 	wrlong	#0, result1
17f88                 | LR__2019
17f88                 | LR__2020
17f88     E7 F0 03 F6 | 	mov	ptra, fp
17f8c     F2 00 A0 FD | 	call	#popregs_
17f90                 | _do_print_ret
17f90     2D 00 64 FD | 	ret
17f94                 | 
17f94                 | ' 
17f94                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
17f94                 | ' 
17f94                 | ' sub do_push
17f94                 | _do_push
17f94                 | ' if stackpointer<maxstack then 
17f94     44 00 00 FF 
17f98     FC 65 06 F1 | 	add	objptr, ##35324
17f9c     32 81 02 FB | 	rdlong	_var01, objptr
17fa0     44 00 00 FF 
17fa4     FC 65 86 F1 | 	sub	objptr, ##35324
17fa8     01 00 00 FF 
17fac     00 80 56 F2 | 	cmps	_var01, ##512 wc
17fb0     F8 00 90 3D |  if_ae	jmp	#LR__2030
17fb4     4C 00 00 FF 
17fb8     24 64 06 F1 | 	add	objptr, ##38948
17fbc     32 83 02 FB | 	rdlong	_var02, objptr
17fc0     41 85 02 F6 | 	mov	_var03, _var02
17fc4     01 84 66 F0 | 	shl	_var03, #1
17fc8     41 85 02 F1 | 	add	_var03, _var02
17fcc     02 84 66 F0 | 	shl	_var03, #2
17fd0     03 00 00 FF 
17fd4     04 64 86 F1 | 	sub	objptr, ##1540
17fd8     32 85 02 F1 | 	add	_var03, objptr
17fdc     42 81 02 FB | 	rdlong	_var01, _var03
17fe0     04 84 06 F1 | 	add	_var03, #4
17fe4     42 87 02 FB | 	rdlong	_var04, _var03
17fe8     41 85 02 F6 | 	mov	_var03, _var02
17fec     01 84 66 F0 | 	shl	_var03, #1
17ff0     41 85 02 F1 | 	add	_var03, _var02
17ff4     02 84 66 F0 | 	shl	_var03, #2
17ff8     32 85 02 F1 | 	add	_var03, objptr
17ffc     08 84 06 F1 | 	add	_var03, #8
18000     42 83 02 FB | 	rdlong	_var02, _var03
18004     04 00 00 FF 
18008     24 64 86 F1 | 	sub	objptr, ##2084
1800c     32 85 02 FB | 	rdlong	_var03, objptr
18010     42 89 02 F6 | 	mov	_var05, _var03
18014     01 88 66 F0 | 	shl	_var05, #1
18018     42 89 02 F1 | 	add	_var05, _var03
1801c     02 88 66 F0 | 	shl	_var05, #2
18020     0C 00 00 FF 
18024     0C 64 86 F1 | 	sub	objptr, ##6156
18028     32 89 02 F1 | 	add	_var05, objptr
1802c     44 81 62 FC | 	wrlong	_var01, _var05
18030     0C 00 00 FF 
18034     0C 64 06 F1 | 	add	objptr, ##6156
18038     32 89 02 FB | 	rdlong	_var05, objptr
1803c     44 85 02 F6 | 	mov	_var03, _var05
18040     01 84 66 F0 | 	shl	_var03, #1
18044     44 85 02 F1 | 	add	_var03, _var05
18048     02 84 66 F0 | 	shl	_var03, #2
1804c     0C 00 00 FF 
18050     0C 64 86 F1 | 	sub	objptr, ##6156
18054     32 85 02 F1 | 	add	_var03, objptr
18058     04 84 06 F1 | 	add	_var03, #4
1805c     42 87 62 FC | 	wrlong	_var04, _var03
18060     0C 00 00 FF 
18064     0C 64 06 F1 | 	add	objptr, ##6156
18068     32 89 02 FB | 	rdlong	_var05, objptr
1806c     44 87 02 F6 | 	mov	_var04, _var05
18070     01 86 66 F0 | 	shl	_var04, #1
18074     44 87 02 F1 | 	add	_var04, _var05
18078     02 86 66 F0 | 	shl	_var04, #2
1807c     0C 00 00 FF 
18080     0C 64 86 F1 | 	sub	objptr, ##6156
18084     32 87 02 F1 | 	add	_var04, objptr
18088     08 86 06 F1 | 	add	_var04, #8
1808c     43 83 62 FC | 	wrlong	_var02, _var04
18090     0C 00 00 FF 
18094     0C 64 06 F1 | 	add	objptr, ##6156
18098     32 81 02 FB | 	rdlong	_var01, objptr
1809c     01 80 06 F1 | 	add	_var01, #1
180a0     32 81 62 FC | 	wrlong	_var01, objptr
180a4     44 00 00 FF 
180a8     FC 65 86 F1 | 	sub	objptr, ##35324
180ac                 | LR__2030
180ac                 | _do_push_ret
180ac     2D 00 64 FD | 	ret
180b0                 | 
180b0                 | ' 
180b0                 | ' '-------------------- put
180b0                 | ' 
180b0                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
180b0                 | _do_put
180b0     07 CA 05 F6 | 	mov	COUNT_, #7
180b4     E8 00 A0 FD | 	call	#pushregs_
180b8     28 F0 07 F1 | 	add	ptra, #40
180bc     4C 00 00 FF 
180c0     24 64 06 F1 | 	add	objptr, ##38948
180c4     32 9B 02 FB | 	rdlong	arg05, objptr
180c8     4D 99 02 F6 | 	mov	arg04, arg05
180cc     01 98 66 F0 | 	shl	arg04, #1
180d0     4D 99 02 F1 | 	add	arg04, arg05
180d4     02 98 66 F0 | 	shl	arg04, #2
180d8     03 00 00 FF 
180dc     04 64 86 F1 | 	sub	objptr, ##1540
180e0     32 99 02 F1 | 	add	arg04, objptr
180e4     4C A7 02 FB | 	rdlong	local01, arg04
180e8                 | ' 
180e8                 | ' numpar=compiledline(lineptr_e).result.uresult
180e8                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
180e8     04 A6 0E F2 | 	cmp	local01, #4 wz
180ec     49 00 00 FF 
180f0     20 64 86 F1 | 	sub	objptr, ##37408
180f4     48 00 90 5D |  if_ne	jmp	#LR__2040
180f8     74 55 BF FD | 	call	#_pop
180fc     3F 9B 02 F6 | 	mov	arg05, result3
18100     1C CE 05 F1 | 	add	fp, #28
18104     E7 7A 62 FC | 	wrlong	result1, fp
18108     04 CE 05 F1 | 	add	fp, #4
1810c     E7 7C 62 FC | 	wrlong	result2, fp
18110     04 CE 05 F1 | 	add	fp, #4
18114     E7 9A 62 FC | 	wrlong	arg05, fp
18118     08 CE 85 F1 | 	sub	fp, #8
1811c     E7 92 02 F6 | 	mov	arg01, fp
18120     1C CE 85 F1 | 	sub	fp, #28
18124     24 57 BF FD | 	call	#_converttoint
18128     54 00 00 FF 
1812c     E8 64 06 F1 | 	add	objptr, ##43240
18130     32 7B 62 FC | 	wrlong	result1, objptr
18134     54 00 00 FF 
18138     E8 64 86 F1 | 	sub	objptr, ##43240
1813c     18 00 90 FD | 	jmp	#LR__2041
18140                 | LR__2040
18140     54 00 00 FF 
18144     E8 64 06 F1 | 	add	objptr, ##43240
18148     FF FF FF FF 
1814c     32 FF 6B FC | 	wrlong	##-1, objptr
18150     54 00 00 FF 
18154     E8 64 86 F1 | 	sub	objptr, ##43240
18158                 | LR__2041
18158                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
18158     03 A6 56 F2 | 	cmps	local01, #3 wc
1815c     38 00 90 CD |  if_b	jmp	#LR__2042
18160     0C 55 BF FD | 	call	#_pop
18164     3F 9B 02 F6 | 	mov	arg05, result3
18168     1C CE 05 F1 | 	add	fp, #28
1816c     E7 7A 62 FC | 	wrlong	result1, fp
18170     04 CE 05 F1 | 	add	fp, #4
18174     E7 7C 62 FC | 	wrlong	result2, fp
18178     04 CE 05 F1 | 	add	fp, #4
1817c     E7 9A 62 FC | 	wrlong	arg05, fp
18180     08 CE 85 F1 | 	sub	fp, #8
18184     E7 92 02 F6 | 	mov	arg01, fp
18188     1C CE 85 F1 | 	sub	fp, #28
1818c     BC 56 BF FD | 	call	#_converttoint
18190     3D A9 02 F6 | 	mov	local02, result1
18194     04 00 90 FD | 	jmp	#LR__2043
18198                 | LR__2042
18198     01 A8 06 F6 | 	mov	local02, #1
1819c                 | LR__2043
1819c                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
1819c     02 A6 56 F2 | 	cmps	local01, #2 wc
181a0     34 00 90 CD |  if_b	jmp	#LR__2044
181a4     C8 54 BF FD | 	call	#_pop
181a8     3F A7 02 F6 | 	mov	local01, result3
181ac     1C CE 05 F1 | 	add	fp, #28
181b0     E7 7A 62 FC | 	wrlong	result1, fp
181b4     04 CE 05 F1 | 	add	fp, #4
181b8     E7 7C 62 FC | 	wrlong	result2, fp
181bc     04 CE 05 F1 | 	add	fp, #4
181c0     E7 A6 62 FC | 	wrlong	local01, fp
181c4     08 CE 85 F1 | 	sub	fp, #8
181c8     E7 92 02 F6 | 	mov	arg01, fp
181cc     1C CE 85 F1 | 	sub	fp, #28
181d0     78 56 BF FD | 	call	#_converttoint
181d4     3D AB 02 F6 | 	mov	local03, result1
181d8                 | LR__2044
181d8     94 54 BF FD | 	call	#_pop
181dc     3F A7 02 F6 | 	mov	local01, result3
181e0     1C CE 05 F1 | 	add	fp, #28
181e4     E7 7A 62 FC | 	wrlong	result1, fp
181e8     04 CE 05 F1 | 	add	fp, #4
181ec     E7 7C 62 FC | 	wrlong	result2, fp
181f0     04 CE 05 F1 | 	add	fp, #4
181f4     E7 A6 62 FC | 	wrlong	local01, fp
181f8     08 CE 85 F1 | 	sub	fp, #8
181fc     E7 92 02 F6 | 	mov	arg01, fp
18200     1C CE 85 F1 | 	sub	fp, #28
18204     44 56 BF FD | 	call	#_converttoint
18208     3D AD 02 F6 | 	mov	local04, result1
1820c     02 AE 66 F0 | 	shl	local05, #2
18210     52 00 00 FF 
18214     68 64 06 F1 | 	add	objptr, ##42088
18218     32 AF 02 F1 | 	add	local05, objptr
1821c     57 01 68 FC | 	wrlong	#0, local05
18220                 | ' t1=pop() : channel=converttoint(t1)
18220                 | ' getres(j)=0
18220                 | ' if pos>=0 then
18220     02 00 00 FF 
18224     80 64 06 F1 | 	add	objptr, ##1152
18228     32 B1 02 FB | 	rdlong	local06, objptr
1822c     54 00 00 FF 
18230     E8 64 86 F1 | 	sub	objptr, ##43240
18234     00 B0 56 F2 | 	cmps	local06, #0 wc
18238     08 01 90 CD |  if_b	jmp	#LR__2050
1823c     00 B2 06 F6 | 	mov	local07, #0
18240                 | '    i=0: do
18240                 | LR__2045
18240     00 AE 06 F6 | 	mov	local05, #0
18244                 | '    j=0: do    
18244                 | LR__2046
18244                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
18244     00 04 00 FF 
18248     00 AA 56 F2 | 	cmps	local03, ##524288 wc
1824c     34 00 90 3D |  if_ae	jmp	#LR__2047
18250     57 B1 02 F6 | 	mov	local06, local05
18254     32 A7 02 F6 | 	mov	local01, objptr
18258     50 00 00 FF 
1825c     58 A6 06 F1 | 	add	local01, ##41048
18260     53 B1 02 F1 | 	add	local06, local01
18264     55 93 02 F6 | 	mov	arg01, local03
18268     59 A7 02 F6 | 	mov	local01, local07
1826c     0A A6 66 F0 | 	shl	local01, #10
18270     53 93 02 F1 | 	add	arg01, local01
18274     57 93 02 F1 | 	add	arg01, local05
18278     49 7B C2 FA | 	rdbyte	result1, arg01
1827c     58 7B 42 FC | 	wrbyte	result1, local06
18280     30 00 90 FD | 	jmp	#LR__2048
18284                 | LR__2047
18284     57 B1 02 F6 | 	mov	local06, local05
18288     32 A7 02 F6 | 	mov	local01, objptr
1828c     50 00 00 FF 
18290     58 A6 06 F1 | 	add	local01, ##41048
18294     53 B1 02 F1 | 	add	local06, local01
18298     55 93 02 F6 | 	mov	arg01, local03
1829c     59 A7 02 F6 | 	mov	local01, local07
182a0     0A A6 66 F0 | 	shl	local01, #10
182a4     53 93 02 F1 | 	add	arg01, local01
182a8     57 93 02 F1 | 	add	arg01, local05
182ac     64 89 B0 FD | 	call	#_pspeek
182b0     58 7B 42 FC | 	wrbyte	result1, local06
182b4                 | LR__2048
182b4     01 AE 06 F1 | 	add	local05, #1
182b8     02 00 00 FF 
182bc     00 AE 56 F2 | 	cmps	local05, ##1024 wc
182c0     14 00 90 3D |  if_ae	jmp	#LR__2049
182c4     59 B1 02 F6 | 	mov	local06, local07
182c8     0A B0 66 F0 | 	shl	local06, #10
182cc     57 B1 02 F1 | 	add	local06, local05
182d0     54 B1 5A F2 | 	cmps	local06, local02 wcz
182d4     6C FF 9F ED |  if_be	jmp	#LR__2046
182d8                 | LR__2049
182d8                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
182d8     54 00 00 FF 
182dc     E8 64 06 F1 | 	add	objptr, ##43240
182e0     32 95 02 FB | 	rdlong	arg02, objptr
182e4     01 94 06 F1 | 	add	arg02, #1
182e8     04 00 00 FF 
182ec     90 64 86 F1 | 	sub	objptr, ##2192
182f0     32 97 02 F6 | 	mov	arg03, objptr
182f4     50 00 00 FF 
182f8     58 64 86 F1 | 	sub	objptr, ##41048
182fc     54 99 02 F6 | 	mov	arg04, local02
18300     56 93 02 F6 | 	mov	arg01, local04
18304     01 9A 06 F6 | 	mov	arg05, #1
18308     88 D2 B0 FD | 	call	#__system___basic_put
1830c     56 B1 02 F6 | 	mov	local06, local04
18310     02 B0 66 F0 | 	shl	local06, #2
18314     32 A7 02 F6 | 	mov	local01, objptr
18318     52 00 00 FF 
1831c     68 A6 06 F1 | 	add	local01, ##42088
18320     53 B1 02 F1 | 	add	local06, local01
18324     58 7B 62 FC | 	wrlong	result1, local06
18328                 | '    if 1024*i+j>amount then exit loop
18328     59 B1 02 F6 | 	mov	local06, local07
1832c     0A B0 66 F0 | 	shl	local06, #10
18330     57 B1 02 F1 | 	add	local06, local05
18334     54 B1 5A F2 | 	cmps	local06, local02 wcz
18338     F8 00 90 1D |  if_a	jmp	#LR__2056
1833c     01 B2 06 F1 | 	add	local07, #1
18340     FC FE 9F FD | 	jmp	#LR__2045
18344                 | LR__2050
18344     00 B2 06 F6 | 	mov	local07, #0
18348                 | '    i=0: do
18348                 | LR__2051
18348     00 AE 06 F6 | 	mov	local05, #0
1834c                 | '    j=0: do  
1834c                 | LR__2052
1834c                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
1834c     00 04 00 FF 
18350     00 AA 56 F2 | 	cmps	local03, ##524288 wc
18354     34 00 90 3D |  if_ae	jmp	#LR__2053
18358     57 B1 02 F6 | 	mov	local06, local05
1835c     32 A7 02 F6 | 	mov	local01, objptr
18360     50 00 00 FF 
18364     58 A6 06 F1 | 	add	local01, ##41048
18368     53 B1 02 F1 | 	add	local06, local01
1836c     55 93 02 F6 | 	mov	arg01, local03
18370     59 A7 02 F6 | 	mov	local01, local07
18374     0A A6 66 F0 | 	shl	local01, #10
18378     53 93 02 F1 | 	add	arg01, local01
1837c     57 93 02 F1 | 	add	arg01, local05
18380     49 7B C2 FA | 	rdbyte	result1, arg01
18384     58 7B 42 FC | 	wrbyte	result1, local06
18388     30 00 90 FD | 	jmp	#LR__2054
1838c                 | LR__2053
1838c     57 B1 02 F6 | 	mov	local06, local05
18390     32 A7 02 F6 | 	mov	local01, objptr
18394     50 00 00 FF 
18398     58 A6 06 F1 | 	add	local01, ##41048
1839c     53 B1 02 F1 | 	add	local06, local01
183a0     55 93 02 F6 | 	mov	arg01, local03
183a4     59 A7 02 F6 | 	mov	local01, local07
183a8     0A A6 66 F0 | 	shl	local01, #10
183ac     53 93 02 F1 | 	add	arg01, local01
183b0     57 93 02 F1 | 	add	arg01, local05
183b4     5C 88 B0 FD | 	call	#_pspeek
183b8     58 7B 42 FC | 	wrbyte	result1, local06
183bc                 | LR__2054
183bc     01 AE 06 F1 | 	add	local05, #1
183c0     02 00 00 FF 
183c4     00 AE 56 F2 | 	cmps	local05, ##1024 wc
183c8     14 00 90 3D |  if_ae	jmp	#LR__2055
183cc     59 B1 02 F6 | 	mov	local06, local07
183d0     0A B0 66 F0 | 	shl	local06, #10
183d4     57 B1 02 F1 | 	add	local06, local05
183d8     54 B1 5A F2 | 	cmps	local06, local02 wcz
183dc     6C FF 9F ED |  if_be	jmp	#LR__2052
183e0                 | LR__2055
183e0                 | '    put #channel,,block(0),amount, r : getres(channel)=r
183e0     32 97 02 F6 | 	mov	arg03, objptr
183e4     50 00 00 FF 
183e8     58 96 06 F1 | 	add	arg03, ##41048
183ec     54 99 02 F6 | 	mov	arg04, local02
183f0     56 93 02 F6 | 	mov	arg01, local04
183f4     00 94 06 F6 | 	mov	arg02, #0
183f8     01 9A 06 F6 | 	mov	arg05, #1
183fc     94 D1 B0 FD | 	call	#__system___basic_put
18400     56 B1 02 F6 | 	mov	local06, local04
18404     02 B0 66 F0 | 	shl	local06, #2
18408     32 A7 02 F6 | 	mov	local01, objptr
1840c     52 00 00 FF 
18410     68 A6 06 F1 | 	add	local01, ##42088
18414     53 B1 02 F1 | 	add	local06, local01
18418     58 7B 62 FC | 	wrlong	result1, local06
1841c                 | '    if 1024*i+j>amount then exit loop
1841c     59 B1 02 F6 | 	mov	local06, local07
18420     0A B0 66 F0 | 	shl	local06, #10
18424     57 B1 02 F1 | 	add	local06, local05
18428     54 B1 5A F2 | 	cmps	local06, local02 wcz
1842c     01 B2 06 E1 |  if_be	add	local07, #1
18430     14 FF 9F ED |  if_be	jmp	#LR__2051
18434                 | LR__2056
18434     E7 F0 03 F6 | 	mov	ptra, fp
18438     F2 00 A0 FD | 	call	#popregs_
1843c                 | _do_put_ret
1843c     2D 00 64 FD | 	ret
18440                 | 
18440                 | ' 
18440                 | ' '-------------------- rad
18440                 | ' 
18440                 | ' sub do_rad
18440                 | _do_rad
18440     54 00 00 FF 
18444     84 64 06 F1 | 	add	objptr, ##43140
18448     00 C0 9F FF 
1844c     32 01 68 FC | 	wrlong	##1065353216, objptr
18450     04 64 06 F1 | 	add	objptr, #4
18454     00 C0 9F FF 
18458     32 01 68 FC | 	wrlong	##1065353216, objptr
1845c     54 00 00 FF 
18460     88 64 86 F1 | 	sub	objptr, ##43144
18464                 | _do_rad_ret
18464     2D 00 64 FD | 	ret
18468                 | 
18468                 | ' 
18468                 | ' '-------------------- rdpin
18468                 | ' 
18468                 | ' sub do_rdpin
18468                 | _do_rdpin
18468     00 CA 05 F6 | 	mov	COUNT_, #0
1846c     E8 00 A0 FD | 	call	#pushregs_
18470     0C F0 07 F1 | 	add	ptra, #12
18474     F8 51 BF FD | 	call	#_pop
18478     E7 7A 62 FC | 	wrlong	result1, fp
1847c     04 CE 05 F1 | 	add	fp, #4
18480     E7 7C 62 FC | 	wrlong	result2, fp
18484     04 CE 05 F1 | 	add	fp, #4
18488     E7 7E 62 FC | 	wrlong	result3, fp
1848c     08 CE 85 F1 | 	sub	fp, #8
18490     E7 92 02 F6 | 	mov	arg01, fp
18494     B4 53 BF FD | 	call	#_converttoint
18498     3D 7B 8A FA | 	rdpin	result1, result1
1849c     54 00 00 FF 
184a0     EC 64 06 F1 | 	add	objptr, ##43244
184a4     32 7B 62 FC | 	wrlong	result1, objptr
184a8     54 00 00 FF 
184ac     EC 64 86 F1 | 	sub	objptr, ##43244
184b0     08 CE 05 F1 | 	add	fp, #8
184b4     E7 3A 68 FC | 	wrlong	#29, fp
184b8     08 CE 85 F1 | 	sub	fp, #8
184bc     E7 08 68 FC | 	wrlong	#4, fp
184c0     E7 92 02 F6 | 	mov	arg01, fp
184c4     38 52 BF FD | 	call	#_push
184c8     E7 F0 03 F6 | 	mov	ptra, fp
184cc     F2 00 A0 FD | 	call	#popregs_
184d0                 | _do_rdpin_ret
184d0     2D 00 64 FD | 	ret
184d4                 | 
184d4                 | ' 
184d4                 | ' ' ----------------  read
184d4                 | ' 
184d4                 | ' function read_next_line() as string
184d4                 | _read_next_line
184d4     07 CA 05 F6 | 	mov	COUNT_, #7
184d8     E8 00 A0 FD | 	call	#pushregs_
184dc                 | ' if dataptr=$7FFFFFFF then return("")
184dc     52 00 00 FF 
184e0     D0 64 06 F1 | 	add	objptr, ##42192
184e4     32 A7 02 FB | 	rdlong	local01, objptr
184e8     52 00 00 FF 
184ec     D0 64 86 F1 | 	sub	objptr, ##42192
184f0     FF FF 3F FF 
184f4     FF A7 0E F2 | 	cmp	local01, ##2147483647 wz
184f8     97 01 00 AF 
184fc     97 7A 06 A6 |  if_e	mov	result1, ##@LR__6055
18500     C0 01 90 AD |  if_e	jmp	#LR__2067
18504                 | ' do
18504                 | LR__2060
18504     32 93 02 F6 | 	mov	arg01, objptr
18508     52 00 00 FF 
1850c     AC 92 06 F1 | 	add	arg01, ##42156
18510     52 00 00 FF 
18514     D0 64 06 F1 | 	add	objptr, ##42192
18518     32 95 02 FB | 	rdlong	arg02, objptr
1851c     24 96 06 F6 | 	mov	arg03, #36
18520     47 00 00 FF 
18524     04 64 86 F1 | 	sub	objptr, ##36356
18528     2C B2 B0 FD | 	call	#_psram_spin2_read1
1852c                 | '  ' print dataptr
1852c                 | '   psram.read1(varptr(dataheader),dataptr,36) 
1852c                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
1852c     46 00 00 FF 
18530     E0 65 06 F1 | 	add	objptr, ##36320
18534     32 A7 02 FB | 	rdlong	local01, objptr
18538     52 00 00 FF 
1853c     AC 64 86 F1 | 	sub	objptr, ##42156
18540     FF FF 7F FF 
18544     FF A7 0E F2 | 	cmp	local01, ##-1 wz
18548     52 00 00 5F 
1854c     C0 64 06 51 |  if_ne	add	objptr, ##42176
18550     32 A7 02 5B |  if_ne	rdlong	local01, objptr
18554     10 64 06 51 |  if_ne	add	objptr, #16
18558     32 A7 62 5C |  if_ne	wrlong	local01, objptr
1855c     52 00 00 5F 
18560     D0 64 86 51 |  if_ne	sub	objptr, ##42192
18564     52 00 00 FF 
18568     C0 64 06 F1 | 	add	objptr, ##42176
1856c     32 A7 02 FB | 	rdlong	local01, objptr
18570     52 00 00 FF 
18574     C0 64 86 F1 | 	sub	objptr, ##42176
18578     FF FF 3F FF 
1857c     FF A7 0E F2 | 	cmp	local01, ##2147483647 wz
18580     52 00 00 5F 
18584     AC 64 06 51 |  if_ne	add	objptr, ##42156
18588     32 A9 02 5B |  if_ne	rdlong	local02, objptr
1858c     52 00 00 5F 
18590     AC 64 86 51 |  if_ne	sub	objptr, ##42156
18594     FF FF 7F 5F 
18598     FF A9 0E 52 |  if_ne	cmp	local02, ##-1 wz
1859c     52 00 00 5F 
185a0     CC 64 06 51 |  if_ne	add	objptr, ##42188
185a4     32 AB 02 5B |  if_ne	rdlong	local03, objptr
185a8     52 00 00 5F 
185ac     CC 64 86 51 |  if_ne	sub	objptr, ##42188
185b0     B7 AA 0E 52 |  if_ne	cmp	local03, #183 wz
185b4     4C FF 9F 5D |  if_ne	jmp	#LR__2060
185b8                 | ' if dataheader(8)=token_data then 
185b8     52 00 00 FF 
185bc     CC 64 06 F1 | 	add	objptr, ##42188
185c0     32 A7 02 FB | 	rdlong	local01, objptr
185c4     52 00 00 FF 
185c8     CC 64 86 F1 | 	sub	objptr, ##42188
185cc     B7 A6 0E F2 | 	cmp	local01, #183 wz
185d0     E0 00 90 5D |  if_ne	jmp	#LR__2065
185d4     52 00 00 FF 
185d8     B4 64 06 F1 | 	add	objptr, ##42164
185dc     32 A7 02 FB | 	rdlong	local01, objptr
185e0     02 00 00 FF 
185e4     18 64 06 F1 | 	add	objptr, ##1048
185e8     32 A7 62 FC | 	wrlong	local01, objptr
185ec     02 00 00 FF 
185f0     14 64 86 F1 | 	sub	objptr, ##1044
185f4     32 AD 02 FB | 	rdlong	local04, objptr
185f8     02 00 00 FF 
185fc     0C 64 06 F1 | 	add	objptr, ##1036
18600     32 AD 62 FC | 	wrlong	local04, objptr
18604                 | '  'print "data found at line "; dataheader(0)
18604                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
18604     00 AE 06 F6 | 	mov	local05, #0
18608     54 00 00 FF 
1860c     C4 64 86 F1 | 	sub	objptr, ##43204
18610                 | LR__2061
18610     56 AF 52 F2 | 	cmps	local05, local04 wc
18614     3C 00 90 3D |  if_ae	jmp	#LR__2062
18618     54 00 00 FF 
1861c     CC 64 06 F1 | 	add	objptr, ##43212
18620     32 93 02 FB | 	rdlong	arg01, objptr
18624     54 00 00 FF 
18628     CC 64 86 F1 | 	sub	objptr, ##43212
1862c     57 93 02 F1 | 	add	arg01, local05
18630     E0 85 B0 FD | 	call	#_pspeek
18634     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
18638     C0 DB B0 FD | 	call	#__system__Chr_S
1863c     3D 95 02 F6 | 	mov	arg02, result1
18640     58 93 02 F6 | 	mov	arg01, local06
18644     A4 C1 B0 FD | 	call	#__system___string_concat
18648     3D B1 02 F6 | 	mov	local06, result1
1864c     01 AE 06 F1 | 	add	local05, #1
18650     BC FF 9F FD | 	jmp	#LR__2061
18654                 | LR__2062
18654     97 01 00 FF 
18658     98 96 06 F6 | 	mov	arg03, ##@LR__6056
1865c     01 92 06 F6 | 	mov	arg01, #1
18660     58 95 02 F6 | 	mov	arg02, local06
18664     18 DF B0 FD | 	call	#__system__Instr
18668     3D AF 02 F6 | 	mov	local05, result1
1866c     58 93 02 F6 | 	mov	arg01, local06
18670     49 B3 02 F6 | 	mov	local07, arg01
18674     D7 06 48 FB | 	callpa	#(@LR__2064-@LR__2063)>>2,fcache_load_ptr_
18678                 | LR__2063
18678     59 7B CA FA | 	rdbyte	result1, local07 wz
1867c     01 B2 06 51 |  if_ne	add	local07, #1
18680     F4 FF 9F 5D |  if_ne	jmp	#LR__2063
18684                 | LR__2064
18684     49 B3 82 F1 | 	sub	local07, arg01
18688     59 95 02 F6 | 	mov	arg02, local07
1868c     57 95 82 F1 | 	sub	arg02, local05
18690     04 94 86 F1 | 	sub	arg02, #4
18694     58 93 02 F6 | 	mov	arg01, local06
18698     24 DA B0 FD | 	call	#__system__Right_S
1869c     3D 93 02 F6 | 	mov	arg01, result1
186a0     24 DE B0 FD | 	call	#__system__RTrim_S
186a4     3D 93 02 F6 | 	mov	arg01, result1
186a8     5C DD B0 FD | 	call	#__system__LTrim_S
186ac     3D B1 02 F6 | 	mov	local06, result1
186b0     0C 00 90 FD | 	jmp	#LR__2066
186b4                 | LR__2065
186b4                 | '   return ("") 'todo proper err
186b4     97 01 00 FF 
186b8     9D 7A 06 F6 | 	mov	result1, ##@LR__6057
186bc     04 00 90 FD | 	jmp	#LR__2067
186c0                 | LR__2066
186c0                 | ' return readline
186c0     58 7B 02 F6 | 	mov	result1, local06
186c4                 | LR__2067
186c4     E7 F0 03 F6 | 	mov	ptra, fp
186c8     F2 00 A0 FD | 	call	#popregs_
186cc                 | _read_next_line_ret
186cc     2D 00 64 FD | 	ret
186d0                 | 
186d0                 | ' 
186d0                 | ' sub do_read
186d0                 | _do_read
186d0     17 CA 05 F6 | 	mov	COUNT_, #23
186d4     E8 00 A0 FD | 	call	#pushregs_
186d8     58 F1 07 F1 | 	add	ptra, #344
186dc     4C 00 00 FF 
186e0     24 64 06 F1 | 	add	objptr, ##38948
186e4     32 AD 02 FB | 	rdlong	local04, objptr
186e8     56 AF 02 F6 | 	mov	local05, local04
186ec     01 AE 66 F0 | 	shl	local05, #1
186f0     56 AF 02 F1 | 	add	local05, local04
186f4     02 AE 66 F0 | 	shl	local05, #2
186f8     03 00 00 FF 
186fc     04 64 86 F1 | 	sub	objptr, ##1540
18700     32 B1 02 F6 | 	mov	local06, objptr
18704     32 AF 02 F1 | 	add	local05, objptr
18708     57 B3 02 FB | 	rdlong	local07, local05
1870c                 | ' 
1870c                 | ' 
1870c                 | ' numpar=compiledline(lineptr_e).result.uresult
1870c                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
1870c     01 B2 16 F2 | 	cmp	local07, #1 wc
18710     49 00 00 FF 
18714     20 64 86 F1 | 	sub	objptr, ##37408
18718     08 00 90 CD |  if_b	jmp	#LR__2070
1871c     41 B2 16 F2 | 	cmp	local07, #65 wc
18720     50 00 90 CD |  if_b	jmp	#LR__2071
18724                 | LR__2070
18724     00 92 06 F6 | 	mov	arg01, #0
18728     E8 15 B1 FD | 	call	#__system___getiolock_0622
1872c     3D 93 02 F6 | 	mov	arg01, result1
18730     5C C0 B0 FD | 	call	#__system___lockmem
18734     97 01 00 FF 
18738     9E 94 06 F6 | 	mov	arg02, ##@LR__6058
1873c     00 92 06 F6 | 	mov	arg01, #0
18740     00 96 06 F6 | 	mov	arg03, #0
18744     3C CD B0 FD | 	call	#__system___basic_print_string
18748     00 92 06 F6 | 	mov	arg01, #0
1874c     C4 15 B1 FD | 	call	#__system___getiolock_0622
18750     3D 01 68 FC | 	wrlong	#0, result1
18754     52 00 00 FF 
18758     94 64 06 F1 | 	add	objptr, ##42132
1875c     32 95 02 FB | 	rdlong	arg02, objptr
18760     52 00 00 FF 
18764     94 64 86 F1 | 	sub	objptr, ##42132
18768     27 92 06 F6 | 	mov	arg01, #39
1876c     28 82 B0 FD | 	call	#_printerror
18770     A8 09 90 FD | 	jmp	#LR__2118
18774                 | LR__2071
18774                 | ' i=numpar-1
18774                 | ' if readline="" then readline=read_next_line() ': print readline
18774     54 00 00 FF 
18778     B8 64 06 F1 | 	add	objptr, ##43192
1877c     32 93 02 FB | 	rdlong	arg01, objptr
18780     54 00 00 FF 
18784     B8 64 86 F1 | 	sub	objptr, ##43192
18788     97 01 00 FF 
1878c     A8 94 06 F6 | 	mov	arg02, ##@LR__6059
18790     24 C0 B0 FD | 	call	#__system___string_cmp
18794     00 7A 0E F2 | 	cmp	result1, #0 wz
18798     18 00 90 5D |  if_ne	jmp	#LR__2072
1879c     34 FD BF FD | 	call	#_read_next_line
187a0     54 00 00 FF 
187a4     B8 64 06 F1 | 	add	objptr, ##43192
187a8     32 7B 62 FC | 	wrlong	result1, objptr
187ac     54 00 00 FF 
187b0     B8 64 86 F1 | 	sub	objptr, ##43192
187b4                 | LR__2072
187b4                 | ' if readline="" then printerror(55,runheader(0)) :return
187b4     54 00 00 FF 
187b8     B8 64 06 F1 | 	add	objptr, ##43192
187bc     32 93 02 FB | 	rdlong	arg01, objptr
187c0     54 00 00 FF 
187c4     B8 64 86 F1 | 	sub	objptr, ##43192
187c8     97 01 00 FF 
187cc     A9 94 06 F6 | 	mov	arg02, ##@LR__6060
187d0     E4 BF B0 FD | 	call	#__system___string_cmp
187d4     00 7A 0E F2 | 	cmp	result1, #0 wz
187d8     20 00 90 5D |  if_ne	jmp	#LR__2073
187dc     52 00 00 FF 
187e0     94 64 06 F1 | 	add	objptr, ##42132
187e4     32 95 02 FB | 	rdlong	arg02, objptr
187e8     52 00 00 FF 
187ec     94 64 86 F1 | 	sub	objptr, ##42132
187f0     37 92 06 F6 | 	mov	arg01, #55
187f4     A0 81 B0 FD | 	call	#_printerror
187f8     20 09 90 FD | 	jmp	#LR__2118
187fc                 | LR__2073
187fc     00 B4 06 F6 | 	mov	local08, #0
18800     59 B7 02 F6 | 	mov	local09, local07
18804     01 B6 86 F1 | 	sub	local09, #1
18808                 | ' j=0
18808                 | ' i=numpar-1
18808                 | ' do
18808                 | LR__2074
18808                 | '   do
18808                 | LR__2075
18808     54 00 00 FF 
1880c     B8 64 06 F1 | 	add	objptr, ##43192
18810     32 95 02 FB | 	rdlong	arg02, objptr
18814     54 00 00 FF 
18818     B8 64 86 F1 | 	sub	objptr, ##43192
1881c     97 01 00 FF 
18820     AA 96 06 F6 | 	mov	arg03, ##@LR__6061
18824     01 92 06 F6 | 	mov	arg01, #1
18828     54 DD B0 FD | 	call	#__system__Instr
1882c     3D 97 02 F6 | 	mov	arg03, result1
18830                 | '     comma=instr(1,readline,"'") : if comma>0 then readline=left$(readline,comma-1) ' allows comments in data
18830     01 96 16 F2 | 	cmp	arg03, #1 wc
18834     34 00 90 CD |  if_b	jmp	#LR__2076
18838     54 00 00 FF 
1883c     B8 64 06 F1 | 	add	objptr, ##43192
18840     32 93 02 FB | 	rdlong	arg01, objptr
18844     54 00 00 FF 
18848     B8 64 86 F1 | 	sub	objptr, ##43192
1884c     01 96 86 F1 | 	sub	arg03, #1
18850     4B 95 02 F6 | 	mov	arg02, arg03
18854     E0 D7 B0 FD | 	call	#__system__Left_S
18858     54 00 00 FF 
1885c     B8 64 06 F1 | 	add	objptr, ##43192
18860     32 7B 62 FC | 	wrlong	result1, objptr
18864     54 00 00 FF 
18868     B8 64 86 F1 | 	sub	objptr, ##43192
1886c                 | LR__2076
1886c     54 00 00 FF 
18870     B8 64 06 F1 | 	add	objptr, ##43192
18874     32 95 02 FB | 	rdlong	arg02, objptr
18878     54 00 00 FF 
1887c     B8 64 86 F1 | 	sub	objptr, ##43192
18880     97 01 00 FF 
18884     AC 96 06 F6 | 	mov	arg03, ##@LR__6062
18888     01 92 06 F6 | 	mov	arg01, #1
1888c     F0 DC B0 FD | 	call	#__system__Instr
18890     3D B9 02 F6 | 	mov	local10, result1
18894                 | '     comma=instr(1,readline,",")  
18894                 | '       if comma>0  then 
18894     01 B8 16 F2 | 	cmp	local10, #1 wc
18898     7C 00 90 CD |  if_b	jmp	#LR__2079
1889c     54 00 00 FF 
188a0     B8 64 06 F1 | 	add	objptr, ##43192
188a4     32 93 02 FB | 	rdlong	arg01, objptr
188a8     54 00 00 FF 
188ac     B8 64 86 F1 | 	sub	objptr, ##43192
188b0     5C 95 02 F6 | 	mov	arg02, local10
188b4     01 94 86 F1 | 	sub	arg02, #1
188b8     7C D7 B0 FD | 	call	#__system__Left_S
188bc     3D BB 02 F6 | 	mov	local11, result1
188c0     54 00 00 FF 
188c4     B8 64 06 F1 | 	add	objptr, ##43192
188c8     32 B1 02 FB | 	rdlong	local06, objptr
188cc     54 00 00 FF 
188d0     B8 64 86 F1 | 	sub	objptr, ##43192
188d4     58 93 02 F6 | 	mov	arg01, local06
188d8     49 BD 02 F6 | 	mov	local12, arg01
188dc     D7 06 48 FB | 	callpa	#(@LR__2078-@LR__2077)>>2,fcache_load_ptr_
188e0                 | LR__2077
188e0     5E 7B CA FA | 	rdbyte	result1, local12 wz
188e4     01 BC 06 51 |  if_ne	add	local12, #1
188e8     F4 FF 9F 5D |  if_ne	jmp	#LR__2077
188ec                 | LR__2078
188ec     49 BD 82 F1 | 	sub	local12, arg01
188f0     5E 95 02 F6 | 	mov	arg02, local12
188f4     5C 95 82 F1 | 	sub	arg02, local10
188f8     58 93 02 F6 | 	mov	arg01, local06
188fc     C0 D7 B0 FD | 	call	#__system__Right_S
18900     54 00 00 FF 
18904     B8 64 06 F1 | 	add	objptr, ##43192
18908     32 7B 62 FC | 	wrlong	result1, objptr
1890c     54 00 00 FF 
18910     B8 64 86 F1 | 	sub	objptr, ##43192
18914     40 00 90 FD | 	jmp	#LR__2080
18918                 | LR__2079
18918     54 00 00 FF 
1891c     B8 64 06 F1 | 	add	objptr, ##43192
18920     32 93 02 FB | 	rdlong	arg01, objptr
18924     54 00 00 FF 
18928     B8 64 86 F1 | 	sub	objptr, ##43192
1892c     98 DB B0 FD | 	call	#__system__RTrim_S
18930     3D 93 02 F6 | 	mov	arg01, result1
18934     D0 DA B0 FD | 	call	#__system__LTrim_S
18938     3D BB 02 F6 | 	mov	local11, result1
1893c     97 01 00 FF 
18940     AE BE 06 F6 | 	mov	local13, ##@LR__6063
18944     54 00 00 FF 
18948     B8 64 06 F1 | 	add	objptr, ##43192
1894c     32 BF 62 FC | 	wrlong	local13, objptr
18950     54 00 00 FF 
18954     B8 64 86 F1 | 	sub	objptr, ##43192
18958                 | LR__2080
18958                 | '      
18958                 | '      if part$<>"" then j=j+1
18958     97 01 00 FF 
1895c     AF 94 06 F6 | 	mov	arg02, ##@LR__6064
18960     5D 93 02 F6 | 	mov	arg01, local11
18964     50 BE B0 FD | 	call	#__system___string_cmp
18968     00 7A 0E F2 | 	cmp	result1, #0 wz
1896c     01 B4 06 51 |  if_ne	add	local08, #1
18970     5B 97 02 F6 | 	mov	arg03, local09
18974     02 96 66 F0 | 	shl	arg03, #2
18978     E7 AC 02 F6 | 	mov	local04, fp
1897c     2C AC 06 F1 | 	add	local04, #44
18980     56 97 02 F1 | 	add	arg03, local04
18984     4B BB 62 FC | 	wrlong	local11, arg03
18988     01 B6 86 F1 | 	sub	local09, #1
1898c                 | '      args(i)=part$  
1898c                 | '      i=i-1
1898c                 | '     if readline="" then readline=read_next_line() 
1898c     54 00 00 FF 
18990     B8 64 06 F1 | 	add	objptr, ##43192
18994     32 93 02 FB | 	rdlong	arg01, objptr
18998     54 00 00 FF 
1899c     B8 64 86 F1 | 	sub	objptr, ##43192
189a0     97 01 00 FF 
189a4     B0 94 06 F6 | 	mov	arg02, ##@LR__6065
189a8     0C BE B0 FD | 	call	#__system___string_cmp
189ac     00 7A 0E F2 | 	cmp	result1, #0 wz
189b0     18 00 90 5D |  if_ne	jmp	#LR__2081
189b4     1C FB BF FD | 	call	#_read_next_line
189b8     54 00 00 FF 
189bc     B8 64 06 F1 | 	add	objptr, ##43192
189c0     32 7B 62 FC | 	wrlong	result1, objptr
189c4     54 00 00 FF 
189c8     B8 64 86 F1 | 	sub	objptr, ##43192
189cc                 | LR__2081
189cc     00 B6 56 F2 | 	cmps	local09, #0 wc
189d0     28 00 90 CD |  if_b	jmp	#LR__2082
189d4     54 00 00 FF 
189d8     B8 64 06 F1 | 	add	objptr, ##43192
189dc     32 93 02 FB | 	rdlong	arg01, objptr
189e0     54 00 00 FF 
189e4     B8 64 86 F1 | 	sub	objptr, ##43192
189e8     97 01 00 FF 
189ec     B1 94 06 F6 | 	mov	arg02, ##@LR__6066
189f0     C4 BD B0 FD | 	call	#__system___string_cmp
189f4     00 7A 0E F2 | 	cmp	result1, #0 wz
189f8     0C FE 9F 5D |  if_ne	jmp	#LR__2075
189fc                 | LR__2082
189fc     00 B6 56 F2 | 	cmps	local09, #0 wc
18a00     04 FE 9F 3D |  if_ae	jmp	#LR__2074
18a04                 | ' if j<numpar then printerror(55,runheader(0))
18a04     59 B5 52 F2 | 	cmps	local08, local07 wc
18a08     52 00 00 CF 
18a0c     94 64 06 C1 |  if_b	add	objptr, ##42132
18a10     32 95 02 CB |  if_b	rdlong	arg02, objptr
18a14     52 00 00 CF 
18a18     94 64 86 C1 |  if_b	sub	objptr, ##42132
18a1c     37 92 06 C6 |  if_b	mov	arg01, #55
18a20     74 7F B0 CD |  if_b	call	#_printerror
18a24                 | ' 
18a24                 | ' for i=0 to numpar-1
18a24     00 B6 06 F6 | 	mov	local09, #0
18a28     59 C1 02 F6 | 	mov	local14, local07
18a2c                 | LR__2083
18a2c     60 B7 52 F2 | 	cmps	local09, local14 wc
18a30     E8 06 90 3D |  if_ae	jmp	#LR__2117
18a34                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
18a34     5B AF 02 F6 | 	mov	local05, local09
18a38     02 AE 66 F0 | 	shl	local05, #2
18a3c     E7 B0 02 F6 | 	mov	local06, fp
18a40     2C B0 06 F1 | 	add	local06, #44
18a44     58 AF 02 F1 | 	add	local05, local06
18a48     57 93 02 FB | 	rdlong	arg01, local05
18a4c     04 E0 BE FD | 	call	#_isnum
18a50     3D BF 02 F6 | 	mov	local13, result1
18a54     5B C3 02 F6 | 	mov	local15, local09
18a58     02 C2 66 F0 | 	shl	local15, #2
18a5c     E7 C4 02 F6 | 	mov	local16, fp
18a60     2C C4 06 F1 | 	add	local16, #44
18a64     62 C3 02 F1 | 	add	local15, local16
18a68     61 93 02 FB | 	rdlong	arg01, local15
18a6c     D0 E3 BE FD | 	call	#_isint
18a70     07 7A 66 F7 | 	signx	result1, #7
18a74     3D BF 2A F5 | 	andn	local13, result1 wz
18a78     54 00 00 5F 
18a7c     EC 64 06 51 |  if_ne	add	objptr, ##43244
18a80     32 3D 68 5C |  if_ne	wrlong	#30, objptr
18a84     54 00 00 5F 
18a88     EC 64 86 51 |  if_ne	sub	objptr, ##43244
18a8c                 | '   if isint(args(i)) then r=result_int 
18a8c     5B AD 02 F6 | 	mov	local04, local09
18a90     02 AC 66 F0 | 	shl	local04, #2
18a94     E7 AE 02 F6 | 	mov	local05, fp
18a98     2C AE 06 F1 | 	add	local05, #44
18a9c     57 AD 02 F1 | 	add	local04, local05
18aa0     56 93 02 FB | 	rdlong	arg01, local04
18aa4     98 E3 BE FD | 	call	#_isint
18aa8     00 7A 0E F2 | 	cmp	result1, #0 wz
18aac     54 00 00 5F 
18ab0     EC 64 06 51 |  if_ne	add	objptr, ##43244
18ab4     32 39 68 5C |  if_ne	wrlong	#28, objptr
18ab8     54 00 00 5F 
18abc     EC 64 86 51 |  if_ne	sub	objptr, ##43244
18ac0                 | '   if isdec(args(i)) then r=result_uint 
18ac0     5B AD 02 F6 | 	mov	local04, local09
18ac4     02 AC 66 F0 | 	shl	local04, #2
18ac8     E7 AE 02 F6 | 	mov	local05, fp
18acc     2C AE 06 F1 | 	add	local05, #44
18ad0     57 AD 02 F1 | 	add	local04, local05
18ad4     56 93 02 FB | 	rdlong	arg01, local04
18ad8     08 E6 BE FD | 	call	#_isdec
18adc     00 7A 0E F2 | 	cmp	result1, #0 wz
18ae0     54 00 00 5F 
18ae4     EC 64 06 51 |  if_ne	add	objptr, ##43244
18ae8     32 3B 68 5C |  if_ne	wrlong	#29, objptr
18aec     54 00 00 5F 
18af0     EC 64 86 51 |  if_ne	sub	objptr, ##43244
18af4                 | '   if not isnum(args(i)) then 
18af4     5B AF 02 F6 | 	mov	local05, local09
18af8     02 AE 66 F0 | 	shl	local05, #2
18afc     E7 B0 02 F6 | 	mov	local06, fp
18b00     2C B0 06 F1 | 	add	local06, #44
18b04     58 AF 02 F1 | 	add	local05, local06
18b08     57 93 02 FB | 	rdlong	arg01, local05
18b0c     44 DF BE FD | 	call	#_isnum
18b10     07 7A 66 F7 | 	signx	result1, #7
18b14     3D 7B 22 F6 | 	not	result1, result1
18b18     00 7A 0E F2 | 	cmp	result1, #0 wz
18b1c     FC 00 90 AD |  if_e	jmp	#LR__2088
18b20     54 00 00 FF 
18b24     EC 64 06 F1 | 	add	objptr, ##43244
18b28     32 57 68 FC | 	wrlong	#43, objptr
18b2c     54 00 00 FF 
18b30     EC 64 86 F1 | 	sub	objptr, ##43244
18b34     5B AD 02 F6 | 	mov	local04, local09
18b38     02 AC 66 F0 | 	shl	local04, #2
18b3c     E7 AE 02 F6 | 	mov	local05, fp
18b40     2C AE 06 F1 | 	add	local05, #44
18b44     57 AD 02 F1 | 	add	local04, local05
18b48     56 93 02 FB | 	rdlong	arg01, local04
18b4c     49 BD 02 F6 | 	mov	local12, arg01
18b50     D7 06 48 FB | 	callpa	#(@LR__2085-@LR__2084)>>2,fcache_load_ptr_
18b54                 | LR__2084
18b54     5E 7B CA FA | 	rdbyte	result1, local12 wz
18b58     01 BC 06 51 |  if_ne	add	local12, #1
18b5c     F4 FF 9F 5D |  if_ne	jmp	#LR__2084
18b60                 | LR__2085
18b60     49 BD 82 F1 | 	sub	local12, arg01
18b64     5E C7 02 F6 | 	mov	local17, local12
18b68     54 00 00 FF 
18b6c     74 64 06 F1 | 	add	objptr, ##43124
18b70     32 93 02 FB | 	rdlong	arg01, objptr
18b74     63 93 82 F1 | 	sub	arg01, local17
18b78     04 92 86 F1 | 	sub	arg01, #4
18b7c     03 92 26 F5 | 	andn	arg01, #3
18b80     32 93 62 FC | 	wrlong	arg01, objptr
18b84     54 00 00 FF 
18b88     74 64 86 F1 | 	sub	objptr, ##43124
18b8c     63 95 02 F6 | 	mov	arg02, local17
18b90     9C 7F B0 FD | 	call	#_pslpoke
18b94                 | '     pslpoke memtop,l
18b94                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
18b94     01 B4 06 F6 | 	mov	local08, #1
18b98     63 C9 02 F6 | 	mov	local18, local17
18b9c     01 C8 06 F1 | 	add	local18, #1
18ba0                 | LR__2086
18ba0     64 B5 52 F2 | 	cmps	local08, local18 wc
18ba4     60 00 90 3D |  if_ae	jmp	#LR__2087
18ba8     54 00 00 FF 
18bac     74 64 06 F1 | 	add	objptr, ##43124
18bb0     32 BF 02 FB | 	rdlong	local13, objptr
18bb4     54 00 00 FF 
18bb8     74 64 86 F1 | 	sub	objptr, ##43124
18bbc     03 BE 06 F1 | 	add	local13, #3
18bc0     5A BF 02 F1 | 	add	local13, local08
18bc4     5B C3 02 F6 | 	mov	local15, local09
18bc8     02 C2 66 F0 | 	shl	local15, #2
18bcc     E7 C4 02 F6 | 	mov	local16, fp
18bd0     2C C4 06 F1 | 	add	local16, #44
18bd4     62 C3 02 F1 | 	add	local15, local16
18bd8     61 93 02 FB | 	rdlong	arg01, local15
18bdc     5A B1 02 F6 | 	mov	local06, local08
18be0     01 C2 06 F6 | 	mov	local15, #1
18be4     58 95 02 F6 | 	mov	arg02, local06
18be8     01 96 06 F6 | 	mov	arg03, #1
18bec     60 D5 B0 FD | 	call	#__system__Mid_S
18bf0     3D AF 02 F6 | 	mov	local05, result1
18bf4     57 95 C2 FA | 	rdbyte	arg02, local05
18bf8     5F 93 02 F6 | 	mov	arg01, local13
18bfc     C8 7F B0 FD | 	call	#_pspoke
18c00     01 B4 06 F1 | 	add	local08, #1
18c04     98 FF 9F FD | 	jmp	#LR__2086
18c08                 | LR__2087
18c08     54 00 00 FF 
18c0c     74 64 06 F1 | 	add	objptr, ##43124
18c10     32 CB 02 FB | 	rdlong	local19, objptr
18c14     54 00 00 FF 
18c18     74 64 86 F1 | 	sub	objptr, ##43124
18c1c                 | LR__2088
18c1c     50 4A BF FD | 	call	#_pop
18c20     3E CD 02 F6 | 	mov	local20, result2
18c24     3F AD 02 F6 | 	mov	local04, result3
18c28     3D A7 02 F6 | 	mov	local01, result1
18c2c     66 A9 02 F6 | 	mov	local02, local20
18c30     56 AB 02 F6 | 	mov	local03, local04
18c34                 | '   t1=pop() 
18c34                 | '   if i>=numpar-j then
18c34     59 BF 02 F6 | 	mov	local13, local07
18c38     5A BF 82 F1 | 	sub	local13, local08
18c3c     5F B7 52 F2 | 	cmps	local09, local13 wc
18c40     D0 04 90 CD |  if_b	jmp	#LR__2116
18c44     54 CF 02 F6 | 	mov	local21, local02
18c48                 | '     vartype=t1.result.twowords(1)
18c48                 | '     select case vartype
18c48     67 D1 0A F6 | 	mov	local22, local21 wz
18c4c     64 00 90 AD |  if_e	jmp	#LR__2089
18c50     00 D1 0E F2 | 	cmp	local22, #256 wz
18c54     64 00 90 AD |  if_e	jmp	#LR__2090
18c58     01 D1 0E F2 | 	cmp	local22, #257 wz
18c5c     64 00 90 AD |  if_e	jmp	#LR__2091
18c60     02 D1 0E F2 | 	cmp	local22, #258 wz
18c64     64 00 90 AD |  if_e	jmp	#LR__2092
18c68     03 D1 0E F2 | 	cmp	local22, #259 wz
18c6c     64 00 90 AD |  if_e	jmp	#LR__2093
18c70     04 D1 0E F2 | 	cmp	local22, #260 wz
18c74     64 00 90 AD |  if_e	jmp	#LR__2094
18c78     05 D1 0E F2 | 	cmp	local22, #261 wz
18c7c     64 00 90 AD |  if_e	jmp	#LR__2095
18c80     06 D1 0E F2 | 	cmp	local22, #262 wz
18c84     64 00 90 AD |  if_e	jmp	#LR__2096
18c88     07 D1 0E F2 | 	cmp	local22, #263 wz
18c8c     64 00 90 AD |  if_e	jmp	#LR__2097
18c90     08 D1 0E F2 | 	cmp	local22, #264 wz
18c94     64 00 90 AD |  if_e	jmp	#LR__2098
18c98     09 D1 0E F2 | 	cmp	local22, #265 wz
18c9c     64 00 90 AD |  if_e	jmp	#LR__2099
18ca0     0A D1 0E F2 | 	cmp	local22, #266 wz
18ca4     64 00 90 AD |  if_e	jmp	#LR__2100
18ca8     0B D1 0E F2 | 	cmp	local22, #267 wz
18cac     64 00 90 AD |  if_e	jmp	#LR__2101
18cb0     68 00 90 FD | 	jmp	#LR__2102
18cb4                 | LR__2089
18cb4     0C D2 06 F6 | 	mov	local23, #12
18cb8     64 00 90 FD | 	jmp	#LR__2103
18cbc                 | LR__2090
18cbc     0C D2 06 F6 | 	mov	local23, #12
18cc0     5C 00 90 FD | 	jmp	#LR__2103
18cc4                 | LR__2091
18cc4     01 D2 06 F6 | 	mov	local23, #1
18cc8     54 00 90 FD | 	jmp	#LR__2103
18ccc                 | LR__2092
18ccc     01 D2 06 F6 | 	mov	local23, #1
18cd0     4C 00 90 FD | 	jmp	#LR__2103
18cd4                 | LR__2093
18cd4     02 D2 06 F6 | 	mov	local23, #2
18cd8     44 00 90 FD | 	jmp	#LR__2103
18cdc                 | LR__2094
18cdc     02 D2 06 F6 | 	mov	local23, #2
18ce0     3C 00 90 FD | 	jmp	#LR__2103
18ce4                 | LR__2095
18ce4     04 D2 06 F6 | 	mov	local23, #4
18ce8     34 00 90 FD | 	jmp	#LR__2103
18cec                 | LR__2096
18cec     04 D2 06 F6 | 	mov	local23, #4
18cf0     2C 00 90 FD | 	jmp	#LR__2103
18cf4                 | LR__2097
18cf4     08 D2 06 F6 | 	mov	local23, #8
18cf8     24 00 90 FD | 	jmp	#LR__2103
18cfc                 | LR__2098
18cfc     08 D2 06 F6 | 	mov	local23, #8
18d00     1C 00 90 FD | 	jmp	#LR__2103
18d04                 | LR__2099
18d04     06 D2 06 F6 | 	mov	local23, #6
18d08     14 00 90 FD | 	jmp	#LR__2103
18d0c                 | LR__2100
18d0c     08 D2 06 F6 | 	mov	local23, #8
18d10     0C 00 90 FD | 	jmp	#LR__2103
18d14                 | LR__2101
18d14     05 D2 06 F6 | 	mov	local23, #5
18d18     04 00 90 FD | 	jmp	#LR__2103
18d1c                 | LR__2102
18d1c     0C D2 06 F6 | 	mov	local23, #12
18d20                 | LR__2103
18d20                 | '     if esize=12 andalso t1.result.uresult<$80000 then
18d20     0C D2 0E F2 | 	cmp	local23, #12 wz
18d24     34 01 90 5D |  if_ne	jmp	#LR__2107
18d28     00 04 00 FF 
18d2c     00 A6 16 F2 | 	cmp	local01, ##524288 wc
18d30     28 01 90 3D |  if_ae	jmp	#LR__2107
18d34                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
18d34     54 00 00 FF 
18d38     EC 64 06 F1 | 	add	objptr, ##43244
18d3c     32 BF 02 FB | 	rdlong	local13, objptr
18d40     54 00 00 FF 
18d44     EC 64 86 F1 | 	sub	objptr, ##43244
18d48     1C BE 0E F2 | 	cmp	local13, #28 wz
18d4c     2C 00 90 5D |  if_ne	jmp	#LR__2104
18d50     5B AF 02 F6 | 	mov	local05, local09
18d54     02 AE 66 F0 | 	shl	local05, #2
18d58     E7 B0 02 F6 | 	mov	local06, fp
18d5c     2C B0 06 F1 | 	add	local06, #44
18d60     58 AF 02 F1 | 	add	local05, local06
18d64     57 93 02 FB | 	rdlong	arg01, local05
18d68     00 94 06 F6 | 	mov	arg02, #0
18d6c     74 E7 B0 FD | 	call	#__system____builtin_atoi
18d70     3D 95 02 F6 | 	mov	arg02, result1
18d74     53 93 02 F6 | 	mov	arg01, local01
18d78     49 95 62 FC | 	wrlong	arg02, arg01
18d7c                 | LR__2104
18d7c                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
18d7c     54 00 00 FF 
18d80     EC 64 06 F1 | 	add	objptr, ##43244
18d84     32 BF 02 FB | 	rdlong	local13, objptr
18d88     54 00 00 FF 
18d8c     EC 64 86 F1 | 	sub	objptr, ##43244
18d90     1D BE 0E F2 | 	cmp	local13, #29 wz
18d94     2C 00 90 5D |  if_ne	jmp	#LR__2105
18d98     5B AF 02 F6 | 	mov	local05, local09
18d9c     02 AE 66 F0 | 	shl	local05, #2
18da0     E7 B0 02 F6 | 	mov	local06, fp
18da4     2C B0 06 F1 | 	add	local06, #44
18da8     58 AF 02 F1 | 	add	local05, local06
18dac     57 93 02 FB | 	rdlong	arg01, local05
18db0     00 94 06 F6 | 	mov	arg02, #0
18db4     2C E7 B0 FD | 	call	#__system____builtin_atoi
18db8     3D 95 02 F6 | 	mov	arg02, result1
18dbc     53 93 02 F6 | 	mov	arg01, local01
18dc0     49 95 62 FC | 	wrlong	arg02, arg01
18dc4                 | LR__2105
18dc4                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
18dc4     54 00 00 FF 
18dc8     EC 64 06 F1 | 	add	objptr, ##43244
18dcc     32 BF 02 FB | 	rdlong	local13, objptr
18dd0     54 00 00 FF 
18dd4     EC 64 86 F1 | 	sub	objptr, ##43244
18dd8     1E BE 0E F2 | 	cmp	local13, #30 wz
18ddc     3C 00 90 5D |  if_ne	jmp	#LR__2106
18de0     5B AD 02 F6 | 	mov	local04, local09
18de4     02 AC 66 F0 | 	shl	local04, #2
18de8     E7 AE 02 F6 | 	mov	local05, fp
18dec     2C AE 06 F1 | 	add	local05, #44
18df0     57 AD 02 F1 | 	add	local04, local05
18df4     56 93 02 FB | 	rdlong	arg01, local04
18df8     80 E8 B0 FD | 	call	#__system____builtin_atof
18dfc     28 CE 05 F1 | 	add	fp, #40
18e00     E7 7A 62 FC | 	wrlong	result1, fp
18e04     E7 92 02 F6 | 	mov	arg01, fp
18e08     28 CE 85 F1 | 	sub	fp, #40
18e0c     49 7B 02 FB | 	rdlong	result1, arg01
18e10     3D 95 02 F6 | 	mov	arg02, result1
18e14     53 93 02 F6 | 	mov	arg01, local01
18e18     49 95 62 FC | 	wrlong	arg02, arg01
18e1c                 | LR__2106
18e1c                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
18e1c     54 00 00 FF 
18e20     EC 64 06 F1 | 	add	objptr, ##43244
18e24     32 BF 02 FB | 	rdlong	local13, objptr
18e28     2B BE 0E F2 | 	cmp	local13, #43 wz
18e2c     53 93 02 A6 |  if_e	mov	arg01, local01
18e30     65 95 02 A6 |  if_e	mov	arg02, local19
18e34     49 95 62 AC |  if_e	wrlong	arg02, arg01
18e38     53 BF 02 F6 | 	mov	local13, local01
18e3c     08 BE 06 F1 | 	add	local13, #8
18e40     32 AD 02 FB | 	rdlong	local04, objptr
18e44     54 00 00 FF 
18e48     EC 64 86 F1 | 	sub	objptr, ##43244
18e4c     56 CD 02 F6 | 	mov	local20, local04
18e50     5F 93 02 F6 | 	mov	arg01, local13
18e54     66 95 02 F6 | 	mov	arg02, local20
18e58     49 95 62 FC | 	wrlong	arg02, arg01
18e5c                 | LR__2107
18e5c                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
18e5c     0C D2 0E F2 | 	cmp	local23, #12 wz
18e60     38 01 90 5D |  if_ne	jmp	#LR__2111
18e64     00 04 00 FF 
18e68     00 A6 16 F2 | 	cmp	local01, ##524288 wc
18e6c     2C 01 90 CD |  if_b	jmp	#LR__2111
18e70                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
18e70     54 00 00 FF 
18e74     EC 64 06 F1 | 	add	objptr, ##43244
18e78     32 BF 02 FB | 	rdlong	local13, objptr
18e7c     54 00 00 FF 
18e80     EC 64 86 F1 | 	sub	objptr, ##43244
18e84     1C BE 0E F2 | 	cmp	local13, #28 wz
18e88     2C 00 90 5D |  if_ne	jmp	#LR__2108
18e8c     5B AF 02 F6 | 	mov	local05, local09
18e90     02 AE 66 F0 | 	shl	local05, #2
18e94     E7 B0 02 F6 | 	mov	local06, fp
18e98     2C B0 06 F1 | 	add	local06, #44
18e9c     58 AF 02 F1 | 	add	local05, local06
18ea0     57 93 02 FB | 	rdlong	arg01, local05
18ea4     00 94 06 F6 | 	mov	arg02, #0
18ea8     38 E6 B0 FD | 	call	#__system____builtin_atoi
18eac     3D 95 02 F6 | 	mov	arg02, result1
18eb0     53 93 02 F6 | 	mov	arg01, local01
18eb4     78 7C B0 FD | 	call	#_pslpoke
18eb8                 | LR__2108
18eb8                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
18eb8     54 00 00 FF 
18ebc     EC 64 06 F1 | 	add	objptr, ##43244
18ec0     32 BF 02 FB | 	rdlong	local13, objptr
18ec4     54 00 00 FF 
18ec8     EC 64 86 F1 | 	sub	objptr, ##43244
18ecc     1D BE 0E F2 | 	cmp	local13, #29 wz
18ed0     2C 00 90 5D |  if_ne	jmp	#LR__2109
18ed4     5B AF 02 F6 | 	mov	local05, local09
18ed8     02 AE 66 F0 | 	shl	local05, #2
18edc     E7 B0 02 F6 | 	mov	local06, fp
18ee0     2C B0 06 F1 | 	add	local06, #44
18ee4     58 AF 02 F1 | 	add	local05, local06
18ee8     57 93 02 FB | 	rdlong	arg01, local05
18eec     00 94 06 F6 | 	mov	arg02, #0
18ef0     F0 E5 B0 FD | 	call	#__system____builtin_atoi
18ef4     3D 95 02 F6 | 	mov	arg02, result1
18ef8     53 93 02 F6 | 	mov	arg01, local01
18efc     30 7C B0 FD | 	call	#_pslpoke
18f00                 | LR__2109
18f00                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
18f00     54 00 00 FF 
18f04     EC 64 06 F1 | 	add	objptr, ##43244
18f08     32 BF 02 FB | 	rdlong	local13, objptr
18f0c     54 00 00 FF 
18f10     EC 64 86 F1 | 	sub	objptr, ##43244
18f14     1E BE 0E F2 | 	cmp	local13, #30 wz
18f18     38 00 90 5D |  if_ne	jmp	#LR__2110
18f1c     5B AD 02 F6 | 	mov	local04, local09
18f20     02 AC 66 F0 | 	shl	local04, #2
18f24     E7 AE 02 F6 | 	mov	local05, fp
18f28     2C AE 06 F1 | 	add	local05, #44
18f2c     57 AD 02 F1 | 	add	local04, local05
18f30     56 93 02 FB | 	rdlong	arg01, local04
18f34     44 E7 B0 FD | 	call	#__system____builtin_atof
18f38     28 CE 05 F1 | 	add	fp, #40
18f3c     E7 7A 62 FC | 	wrlong	result1, fp
18f40     E7 92 02 F6 | 	mov	arg01, fp
18f44     28 CE 85 F1 | 	sub	fp, #40
18f48     49 95 02 FB | 	rdlong	arg02, arg01
18f4c     53 93 02 F6 | 	mov	arg01, local01
18f50     DC 7B B0 FD | 	call	#_pslpoke
18f54                 | LR__2110
18f54                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
18f54     54 00 00 FF 
18f58     EC 64 06 F1 | 	add	objptr, ##43244
18f5c     32 BF 02 FB | 	rdlong	local13, objptr
18f60     54 00 00 FF 
18f64     EC 64 86 F1 | 	sub	objptr, ##43244
18f68     2B BE 0E F2 | 	cmp	local13, #43 wz
18f6c     53 93 02 A6 |  if_e	mov	arg01, local01
18f70     65 95 02 A6 |  if_e	mov	arg02, local19
18f74     B8 7B B0 AD |  if_e	call	#_pslpoke
18f78     53 93 02 F6 | 	mov	arg01, local01
18f7c     08 92 06 F1 | 	add	arg01, #8
18f80     54 00 00 FF 
18f84     EC 64 06 F1 | 	add	objptr, ##43244
18f88     32 CD 02 FB | 	rdlong	local20, objptr
18f8c     54 00 00 FF 
18f90     EC 64 86 F1 | 	sub	objptr, ##43244
18f94     66 95 02 F6 | 	mov	arg02, local20
18f98     94 7B B0 FD | 	call	#_pslpoke
18f9c                 | LR__2111
18f9c                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
18f9c     05 D2 0E F2 | 	cmp	local23, #5 wz
18fa0     54 00 00 AF 
18fa4     EC 64 06 A1 |  if_e	add	objptr, ##43244
18fa8     32 CD 02 AB |  if_e	rdlong	local20, objptr
18fac     54 00 00 AF 
18fb0     EC 64 86 A1 |  if_e	sub	objptr, ##43244
18fb4     2B CC 0E A2 |  if_e	cmp	local20, #43 wz
18fb8     65 CD 02 A6 |  if_e	mov	local20, local19
18fbc     53 93 02 A6 |  if_e	mov	arg01, local01
18fc0     66 95 02 A6 |  if_e	mov	arg02, local20
18fc4     68 7B B0 AD |  if_e	call	#_pslpoke
18fc8                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
18fc8     04 D2 0E F2 | 	cmp	local23, #4 wz
18fcc     48 00 90 5D |  if_ne	jmp	#LR__2112
18fd0     54 00 00 FF 
18fd4     EC 64 06 F1 | 	add	objptr, ##43244
18fd8     32 CD 02 FB | 	rdlong	local20, objptr
18fdc     54 00 00 FF 
18fe0     EC 64 86 F1 | 	sub	objptr, ##43244
18fe4     2B CC 0E F2 | 	cmp	local20, #43 wz
18fe8     2C 00 90 AD |  if_e	jmp	#LR__2112
18fec     5B AF 02 F6 | 	mov	local05, local09
18ff0     02 AE 66 F0 | 	shl	local05, #2
18ff4     E7 B0 02 F6 | 	mov	local06, fp
18ff8     2C B0 06 F1 | 	add	local06, #44
18ffc     58 AF 02 F1 | 	add	local05, local06
19000     57 93 02 FB | 	rdlong	arg01, local05
19004     00 94 06 F6 | 	mov	arg02, #0
19008     D8 E4 B0 FD | 	call	#__system____builtin_atoi
1900c     3D 95 02 F6 | 	mov	arg02, result1
19010     53 93 02 F6 | 	mov	arg01, local01
19014     18 7B B0 FD | 	call	#_pslpoke
19018                 | LR__2112
19018                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
19018     02 D2 0E F2 | 	cmp	local23, #2 wz
1901c     48 00 90 5D |  if_ne	jmp	#LR__2113
19020     54 00 00 FF 
19024     EC 64 06 F1 | 	add	objptr, ##43244
19028     32 CD 02 FB | 	rdlong	local20, objptr
1902c     54 00 00 FF 
19030     EC 64 86 F1 | 	sub	objptr, ##43244
19034     2B CC 0E F2 | 	cmp	local20, #43 wz
19038     2C 00 90 AD |  if_e	jmp	#LR__2113
1903c     5B AF 02 F6 | 	mov	local05, local09
19040     02 AE 66 F0 | 	shl	local05, #2
19044     E7 B0 02 F6 | 	mov	local06, fp
19048     2C B0 06 F1 | 	add	local06, #44
1904c     58 AF 02 F1 | 	add	local05, local06
19050     57 93 02 FB | 	rdlong	arg01, local05
19054     00 94 06 F6 | 	mov	arg02, #0
19058     88 E4 B0 FD | 	call	#__system____builtin_atoi
1905c     3D 95 02 F6 | 	mov	arg02, result1
19060     53 93 02 F6 | 	mov	arg01, local01
19064     14 7B B0 FD | 	call	#_psdpoke
19068                 | LR__2113
19068                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
19068     01 D2 0E F2 | 	cmp	local23, #1 wz
1906c     48 00 90 5D |  if_ne	jmp	#LR__2114
19070     54 00 00 FF 
19074     EC 64 06 F1 | 	add	objptr, ##43244
19078     32 CD 02 FB | 	rdlong	local20, objptr
1907c     54 00 00 FF 
19080     EC 64 86 F1 | 	sub	objptr, ##43244
19084     2B CC 0E F2 | 	cmp	local20, #43 wz
19088     2C 00 90 AD |  if_e	jmp	#LR__2114
1908c     5B AF 02 F6 | 	mov	local05, local09
19090     02 AE 66 F0 | 	shl	local05, #2
19094     E7 B0 02 F6 | 	mov	local06, fp
19098     2C B0 06 F1 | 	add	local06, #44
1909c     58 AF 02 F1 | 	add	local05, local06
190a0     57 93 02 FB | 	rdlong	arg01, local05
190a4     00 94 06 F6 | 	mov	arg02, #0
190a8     38 E4 B0 FD | 	call	#__system____builtin_atoi
190ac     3D 95 02 F6 | 	mov	arg02, result1
190b0     53 93 02 F6 | 	mov	arg01, local01
190b4     10 7B B0 FD | 	call	#_pspoke
190b8                 | LR__2114
190b8                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
190b8     06 D2 0E F2 | 	cmp	local23, #6 wz
190bc     54 00 90 5D |  if_ne	jmp	#LR__2115
190c0     54 00 00 FF 
190c4     EC 64 06 F1 | 	add	objptr, ##43244
190c8     32 CD 02 FB | 	rdlong	local20, objptr
190cc     54 00 00 FF 
190d0     EC 64 86 F1 | 	sub	objptr, ##43244
190d4     2B CC 0E F2 | 	cmp	local20, #43 wz
190d8     38 00 90 AD |  if_e	jmp	#LR__2115
190dc     5B AD 02 F6 | 	mov	local04, local09
190e0     02 AC 66 F0 | 	shl	local04, #2
190e4     E7 AE 02 F6 | 	mov	local05, fp
190e8     2C AE 06 F1 | 	add	local05, #44
190ec     57 AD 02 F1 | 	add	local04, local05
190f0     56 93 02 FB | 	rdlong	arg01, local04
190f4     84 E5 B0 FD | 	call	#__system____builtin_atof
190f8     28 CE 05 F1 | 	add	fp, #40
190fc     E7 7A 62 FC | 	wrlong	result1, fp
19100     E7 92 02 F6 | 	mov	arg01, fp
19104     28 CE 85 F1 | 	sub	fp, #40
19108     49 95 02 FB | 	rdlong	arg02, arg01
1910c     53 93 02 F6 | 	mov	arg01, local01
19110     1C 7A B0 FD | 	call	#_pslpoke
19114                 | LR__2115
19114                 | LR__2116
19114     01 B6 06 F1 | 	add	local09, #1
19118     10 F9 9F FD | 	jmp	#LR__2083
1911c                 | LR__2117
1911c                 | LR__2118
1911c     E7 F0 03 F6 | 	mov	ptra, fp
19120     F2 00 A0 FD | 	call	#popregs_
19124                 | _do_read_ret
19124     2D 00 64 FD | 	ret
19128                 | 
19128                 | ' 
19128                 | ' '------------------- release
19128                 | ' 
19128                 | ' sub do_release
19128                 | _do_release
19128     00 CA 05 F6 | 	mov	COUNT_, #0
1912c     E8 00 A0 FD | 	call	#pushregs_
19130     10 F0 07 F1 | 	add	ptra, #16
19134     38 45 BF FD | 	call	#_pop
19138     3F 95 02 F6 | 	mov	arg02, result3
1913c     E7 7A 62 FC | 	wrlong	result1, fp
19140     04 CE 05 F1 | 	add	fp, #4
19144     E7 7C 62 FC | 	wrlong	result2, fp
19148     04 CE 05 F1 | 	add	fp, #4
1914c     E7 94 62 FC | 	wrlong	arg02, fp
19150     08 CE 85 F1 | 	sub	fp, #8
19154     E7 92 02 F6 | 	mov	arg01, fp
19158     F0 46 BF FD | 	call	#_converttoint
1915c                 | ' 
1915c                 | ' t1=pop()
1915c                 | ' channel=converttoint(t1)
1915c                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
1915c     00 7A 56 F2 | 	cmps	result1, #0 wc
19160     2C 00 90 CD |  if_b	jmp	#LR__2120
19164     08 7A 56 F2 | 	cmps	result1, #8 wc
19168     24 00 90 3D |  if_ae	jmp	#LR__2120
1916c     38 00 00 FF 
19170     B4 65 06 F1 | 	add	objptr, ##29108
19174     32 93 02 FB | 	rdlong	arg01, objptr
19178     38 00 00 FF 
1917c     B4 65 86 F1 | 	sub	objptr, ##29108
19180     06 7A 66 F0 | 	shl	result1, #6
19184     3D 93 02 F1 | 	add	arg01, result1
19188     2C 92 06 F1 | 	add	arg01, #44
1918c     49 FF 69 FC | 	wrlong	#255, arg01
19190                 | LR__2120
19190     E7 F0 03 F6 | 	mov	ptra, fp
19194     F2 00 A0 FD | 	call	#popregs_
19198                 | _do_release_ret
19198     2D 00 64 FD | 	ret
1919c                 | 
1919c                 | ' 
1919c                 | ' '------------------- restore
1919c                 | ' 
1919c                 | ' sub do_restore()
1919c                 | _do_restore
1919c     4C 00 00 FF 
191a0     2C 64 06 F1 | 	add	objptr, ##38956
191a4     32 81 02 FB | 	rdlong	_var01, objptr
191a8     06 00 00 FF 
191ac     A4 64 06 F1 | 	add	objptr, ##3236
191b0     32 81 62 FC | 	wrlong	_var01, objptr
191b4     97 01 00 FF 
191b8     B2 80 06 F6 | 	mov	_var01, ##@LR__6067
191bc     01 00 00 FF 
191c0     E8 65 06 F1 | 	add	objptr, ##1000
191c4     32 81 62 FC | 	wrlong	_var01, objptr
191c8     54 00 00 FF 
191cc     B8 64 86 F1 | 	sub	objptr, ##43192
191d0                 | _do_restore_ret
191d0     2D 00 64 FD | 	ret
191d4                 | 
191d4                 | ' 
191d4                 | ' '------------------- restorepalette
191d4                 | ' 
191d4                 | ' sub do_restorepalette()
191d4                 | _do_restorepalette
191d4     20 82 B0 FD | 	call	#_hg010b_spin2_restorepalette
191d8                 | _do_restorepalette_ret
191d8     2D 00 64 FD | 	ret
191dc                 | 
191dc                 | ' '------------------- return
191dc                 | ' 
191dc                 | ' sub do_return()
191dc                 | _do_return
191dc                 | ' if gosubtop>0 then
191dc     52 00 00 FF 
191e0     D8 64 06 F1 | 	add	objptr, ##42200
191e4     32 81 02 FB | 	rdlong	_var01, objptr
191e8     52 00 00 FF 
191ec     D8 64 86 F1 | 	sub	objptr, ##42200
191f0     01 80 56 F2 | 	cmps	_var01, #1 wc
191f4     8C 00 90 CD |  if_b	jmp	#LR__2130
191f8     52 00 00 FF 
191fc     D8 64 06 F1 | 	add	objptr, ##42200
19200     32 81 02 FB | 	rdlong	_var01, objptr
19204     03 80 66 F0 | 	shl	_var01, #3
19208     03 00 00 FF 
1920c     88 65 86 F1 | 	sub	objptr, ##1928
19210     32 81 02 F1 | 	add	_var01, objptr
19214     40 81 02 FB | 	rdlong	_var01, _var01
19218     03 00 00 FF 
1921c     0C 65 06 F1 | 	add	objptr, ##1804
19220     32 81 62 FC | 	wrlong	_var01, objptr
19224     7C 64 06 F1 | 	add	objptr, #124
19228     32 81 02 FB | 	rdlong	_var01, objptr
1922c     03 80 66 F0 | 	shl	_var01, #3
19230     03 00 00 FF 
19234     88 65 86 F1 | 	sub	objptr, ##1928
19238     32 81 02 F1 | 	add	_var01, objptr
1923c     04 80 06 F1 | 	add	_var01, #4
19240     40 81 02 FB | 	rdlong	_var01, _var01
19244     03 00 00 FF 
19248     10 65 06 F1 | 	add	objptr, ##1808
1924c     32 81 62 FC | 	wrlong	_var01, objptr
19250     06 00 00 FF 
19254     40 64 86 F1 | 	sub	objptr, ##3136
19258     32 81 02 FB | 	rdlong	_var01, objptr
1925c     01 80 86 F1 | 	sub	_var01, #1
19260     04 64 06 F1 | 	add	objptr, #4
19264     32 81 62 FC | 	wrlong	_var01, objptr
19268     06 00 00 FF 
1926c     B4 64 06 F1 | 	add	objptr, ##3252
19270     32 81 02 FB | 	rdlong	_var01, objptr
19274     01 80 86 F1 | 	sub	_var01, #1
19278     32 81 62 FC | 	wrlong	_var01, objptr
1927c     52 00 00 FF 
19280     D8 64 86 F1 | 	sub	objptr, ##42200
19284                 | LR__2130
19284                 | _do_return_ret
19284     2D 00 64 FD | 	ret
19288                 | 
19288                 | ' 
19288                 | ' '------------------- right$
19288                 | ' 
19288                 | ' sub do_right
19288                 | _do_right
19288     01 CA 05 F6 | 	mov	COUNT_, #1
1928c     E8 00 A0 FD | 	call	#pushregs_
19290     14 F0 07 F1 | 	add	ptra, #20
19294     4C 00 00 FF 
19298     24 64 06 F1 | 	add	objptr, ##38948
1929c     32 97 02 FB | 	rdlong	arg03, objptr
192a0     4B 95 02 F6 | 	mov	arg02, arg03
192a4     01 94 66 F0 | 	shl	arg02, #1
192a8     4B 95 02 F1 | 	add	arg02, arg03
192ac     02 94 66 F0 | 	shl	arg02, #2
192b0     03 00 00 FF 
192b4     04 64 86 F1 | 	sub	objptr, ##1540
192b8     32 95 02 F1 | 	add	arg02, objptr
192bc     4A 97 02 FB | 	rdlong	arg03, arg02
192c0                 | ' 
192c0                 | ' numpar=compiledline(lineptr_e).result.uresult
192c0                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
192c0     02 96 0E F2 | 	cmp	arg03, #2 wz
192c4     49 00 00 FF 
192c8     20 64 86 F1 | 	sub	objptr, ##37408
192cc     40 00 90 AD |  if_e	jmp	#LR__2140
192d0     00 92 06 F6 | 	mov	arg01, #0
192d4     3C 0A B1 FD | 	call	#__system___getiolock_0622
192d8     3D 93 02 F6 | 	mov	arg01, result1
192dc     B0 B4 B0 FD | 	call	#__system___lockmem
192e0     97 01 00 FF 
192e4     B3 94 06 F6 | 	mov	arg02, ##@LR__6068
192e8     00 92 06 F6 | 	mov	arg01, #0
192ec     00 96 06 F6 | 	mov	arg03, #0
192f0     90 C1 B0 FD | 	call	#__system___basic_print_string
192f4     00 92 06 F6 | 	mov	arg01, #0
192f8     18 0A B1 FD | 	call	#__system___getiolock_0622
192fc     3D 01 68 FC | 	wrlong	#0, result1
19300     27 92 06 F6 | 	mov	arg01, #39
19304     00 94 06 F6 | 	mov	arg02, #0
19308     8C 76 B0 FD | 	call	#_printerror
1930c     D8 00 90 FD | 	jmp	#LR__2143
19310                 | LR__2140
19310     5C 43 BF FD | 	call	#_pop
19314     3F 97 02 F6 | 	mov	arg03, result3
19318     E7 7A 62 FC | 	wrlong	result1, fp
1931c     04 CE 05 F1 | 	add	fp, #4
19320     E7 7C 62 FC | 	wrlong	result2, fp
19324     04 CE 05 F1 | 	add	fp, #4
19328     E7 96 62 FC | 	wrlong	arg03, fp
1932c     08 CE 85 F1 | 	sub	fp, #8
19330     E7 92 02 F6 | 	mov	arg01, fp
19334     14 45 BF FD | 	call	#_converttoint
19338     3D A7 02 F6 | 	mov	local01, result1
1933c     30 43 BF FD | 	call	#_pop
19340     3F 97 02 F6 | 	mov	arg03, result3
19344     E7 7A 62 FC | 	wrlong	result1, fp
19348     04 CE 05 F1 | 	add	fp, #4
1934c     E7 7C 62 FC | 	wrlong	result2, fp
19350     04 CE 05 F1 | 	add	fp, #4
19354     E7 96 62 FC | 	wrlong	arg03, fp
19358                 | ' t1=pop() : arg=converttoint(t1)
19358                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
19358     08 CE 85 F1 | 	sub	fp, #8
1935c     2B 96 0E F2 | 	cmp	arg03, #43 wz
19360     18 00 90 5D |  if_ne	jmp	#LR__2141
19364     E7 92 02 FB | 	rdlong	arg01, fp
19368     74 44 BF FD | 	call	#_convertstring
1936c     E7 7A 62 FC | 	wrlong	result1, fp
19370     08 CE 05 F1 | 	add	fp, #8
19374     E7 3E 68 FC | 	wrlong	#31, fp
19378     08 CE 85 F1 | 	sub	fp, #8
1937c                 | LR__2141
1937c                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1937c     08 CE 05 F1 | 	add	fp, #8
19380     E7 96 02 FB | 	rdlong	arg03, fp
19384     08 CE 85 F1 | 	sub	fp, #8
19388     1F 96 0E F2 | 	cmp	arg03, #31 wz
1938c     40 00 90 AD |  if_e	jmp	#LR__2142
19390     00 92 06 F6 | 	mov	arg01, #0
19394     7C 09 B1 FD | 	call	#__system___getiolock_0622
19398     3D 93 02 F6 | 	mov	arg01, result1
1939c     F0 B3 B0 FD | 	call	#__system___lockmem
193a0     97 01 00 FF 
193a4     BC 94 06 F6 | 	mov	arg02, ##@LR__6069
193a8     00 92 06 F6 | 	mov	arg01, #0
193ac     00 96 06 F6 | 	mov	arg03, #0
193b0     D0 C0 B0 FD | 	call	#__system___basic_print_string
193b4     00 92 06 F6 | 	mov	arg01, #0
193b8     58 09 B1 FD | 	call	#__system___getiolock_0622
193bc     3D 01 68 FC | 	wrlong	#0, result1
193c0     0F 92 06 F6 | 	mov	arg01, #15
193c4     00 94 06 F6 | 	mov	arg02, #0
193c8     CC 75 B0 FD | 	call	#_printerror
193cc     18 00 90 FD | 	jmp	#LR__2143
193d0                 | LR__2142
193d0     E7 92 02 FB | 	rdlong	arg01, fp
193d4     53 95 02 F6 | 	mov	arg02, local01
193d8     E4 CC B0 FD | 	call	#__system__Right_S
193dc     E7 7A 62 FC | 	wrlong	result1, fp
193e0     E7 92 02 F6 | 	mov	arg01, fp
193e4     18 43 BF FD | 	call	#_push
193e8                 | LR__2143
193e8     E7 F0 03 F6 | 	mov	ptra, fp
193ec     F2 00 A0 FD | 	call	#popregs_
193f0                 | _do_right_ret
193f0     2D 00 64 FD | 	ret
193f4                 | 
193f4                 | ' 
193f4                 | ' '------------------- rnd
193f4                 | ' 
193f4                 | ' sub do_rnd
193f4                 | _do_rnd
193f4     02 CA 05 F6 | 	mov	COUNT_, #2
193f8     E8 00 A0 FD | 	call	#pushregs_
193fc     10 F0 07 F1 | 	add	ptra, #16
19400     4C 00 00 FF 
19404     24 64 06 F1 | 	add	objptr, ##38948
19408     32 A7 02 FB | 	rdlong	local01, objptr
1940c     53 97 02 F6 | 	mov	arg03, local01
19410     01 96 66 F0 | 	shl	arg03, #1
19414     53 97 02 F1 | 	add	arg03, local01
19418     02 96 66 F0 | 	shl	arg03, #2
1941c     03 00 00 FF 
19420     04 64 86 F1 | 	sub	objptr, ##1540
19424     32 97 02 F1 | 	add	arg03, objptr
19428     4B A9 02 FB | 	rdlong	local02, arg03
1942c                 | ' 
1942c                 | ' numpar=compiledline(lineptr_e).result.uresult
1942c                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1942c     02 A8 16 F2 | 	cmp	local02, #2 wc
19430     49 00 00 FF 
19434     20 64 86 F1 | 	sub	objptr, ##37408
19438     40 00 90 CD |  if_b	jmp	#LR__2150
1943c     00 92 06 F6 | 	mov	arg01, #0
19440     D0 08 B1 FD | 	call	#__system___getiolock_0622
19444     3D 93 02 F6 | 	mov	arg01, result1
19448     44 B3 B0 FD | 	call	#__system___lockmem
1944c     97 01 00 FF 
19450     C5 94 06 F6 | 	mov	arg02, ##@LR__6070
19454     00 92 06 F6 | 	mov	arg01, #0
19458     00 96 06 F6 | 	mov	arg03, #0
1945c     24 C0 B0 FD | 	call	#__system___basic_print_string
19460     00 92 06 F6 | 	mov	arg01, #0
19464     AC 08 B1 FD | 	call	#__system___getiolock_0622
19468     3D 01 68 FC | 	wrlong	#0, result1
1946c     27 92 06 F6 | 	mov	arg01, #39
19470     00 94 06 F6 | 	mov	arg02, #0
19474     20 75 B0 FD | 	call	#_printerror
19478     28 01 90 FD | 	jmp	#LR__2157
1947c                 | LR__2150
1947c                 | ' if numpar=0 then
1947c     00 A8 0E F2 | 	cmp	local02, #0 wz
19480     20 00 90 5D |  if_ne	jmp	#LR__2151
19484     08 CE 05 F1 | 	add	fp, #8
19488     E7 3A 68 FC | 	wrlong	#29, fp
1948c     08 CE 85 F1 | 	sub	fp, #8
19490     1B 7A 62 FD | 	getrnd	result1
19494     E7 7A 62 FC | 	wrlong	result1, fp
19498     E7 92 02 F6 | 	mov	arg01, fp
1949c     60 42 BF FD | 	call	#_push
194a0     00 01 90 FD | 	jmp	#LR__2156
194a4                 | LR__2151
194a4     C8 41 BF FD | 	call	#_pop
194a8     E7 7A 62 FC | 	wrlong	result1, fp
194ac     04 CE 05 F1 | 	add	fp, #4
194b0     E7 7C 62 FC | 	wrlong	result2, fp
194b4     04 CE 05 F1 | 	add	fp, #4
194b8     E7 7E 62 FC | 	wrlong	result3, fp
194bc                 | '   t1=pop()
194bc                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
194bc     08 CE 85 F1 | 	sub	fp, #8
194c0     1C 7E 0E F2 | 	cmp	result3, #28 wz
194c4     08 CE 05 51 |  if_ne	add	fp, #8
194c8     E7 A6 02 5B |  if_ne	rdlong	local01, fp
194cc     08 CE 85 51 |  if_ne	sub	fp, #8
194d0     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
194d4     2C 00 90 5D |  if_ne	jmp	#LR__2152
194d8     1B 7A 62 FD | 	getrnd	result1
194dc     E7 A6 02 FB | 	rdlong	local01, fp
194e0     53 7B 12 FD | 	qdiv	result1, local01
194e4     E7 92 02 F6 | 	mov	arg01, fp
194e8     19 A8 62 FD | 	getqy	local02
194ec     E7 A8 62 FC | 	wrlong	local02, fp
194f0     08 CE 05 F1 | 	add	fp, #8
194f4     E7 3A 68 FC | 	wrlong	#29, fp
194f8     08 CE 85 F1 | 	sub	fp, #8
194fc     00 42 BF FD | 	call	#_push
19500     A0 00 90 FD | 	jmp	#LR__2155
19504                 | LR__2152
19504     08 CE 05 F1 | 	add	fp, #8
19508     E7 A8 02 FB | 	rdlong	local02, fp
1950c     08 CE 85 F1 | 	sub	fp, #8
19510     1E A8 0E F2 | 	cmp	local02, #30 wz
19514     48 00 90 5D |  if_ne	jmp	#LR__2153
19518     E7 92 02 FB | 	rdlong	arg01, fp
1951c     00 C0 24 FF 
19520     00 94 06 F6 | 	mov	arg02, ##1233125376
19524     3C DB B0 FD | 	call	#__system___float_div
19528     3D A9 02 F6 | 	mov	local02, result1
1952c     1B 92 62 FD | 	getrnd	arg01
19530     74 93 06 F4 | 	bitl	arg01, #372
19534     24 D5 B0 FD | 	call	#__system___float_fromuns
19538     3D 95 02 F6 | 	mov	arg02, result1
1953c     54 93 02 F6 | 	mov	arg01, local02
19540     1C D9 B0 FD | 	call	#__system___float_mul
19544     E7 7A 62 FC | 	wrlong	result1, fp
19548     08 CE 05 F1 | 	add	fp, #8
1954c     E7 3C 68 FC | 	wrlong	#30, fp
19550     08 CE 85 F1 | 	sub	fp, #8
19554     E7 92 02 F6 | 	mov	arg01, fp
19558     A4 41 BF FD | 	call	#_push
1955c     44 00 90 FD | 	jmp	#LR__2154
19560                 | LR__2153
19560                 | '     print "rnd: "; : printerror(40) 
19560     00 92 06 F6 | 	mov	arg01, #0
19564     AC 07 B1 FD | 	call	#__system___getiolock_0622
19568     3D 93 02 F6 | 	mov	arg01, result1
1956c     20 B2 B0 FD | 	call	#__system___lockmem
19570     97 01 00 FF 
19574     CB 94 06 F6 | 	mov	arg02, ##@LR__6071
19578     00 92 06 F6 | 	mov	arg01, #0
1957c     00 96 06 F6 | 	mov	arg03, #0
19580     00 BF B0 FD | 	call	#__system___basic_print_string
19584     00 92 06 F6 | 	mov	arg01, #0
19588     88 07 B1 FD | 	call	#__system___getiolock_0622
1958c     3D 01 68 FC | 	wrlong	#0, result1
19590     28 92 06 F6 | 	mov	arg01, #40
19594     00 94 06 F6 | 	mov	arg02, #0
19598     FC 73 B0 FD | 	call	#_printerror
1959c     E7 92 02 F6 | 	mov	arg01, fp
195a0     5C 41 BF FD | 	call	#_push
195a4                 | LR__2154
195a4                 | LR__2155
195a4                 | LR__2156
195a4                 | LR__2157
195a4     E7 F0 03 F6 | 	mov	ptra, fp
195a8     F2 00 A0 FD | 	call	#popregs_
195ac                 | _do_rnd_ret
195ac     2D 00 64 FD | 	ret
195b0                 | 
195b0                 | ' 
195b0                 | ' '-------------------- round
195b0                 | ' 
195b0                 | ' sub do_round
195b0                 | _do_round
195b0     00 CA 05 F6 | 	mov	COUNT_, #0
195b4     E8 00 A0 FD | 	call	#pushregs_
195b8     0C F0 07 F1 | 	add	ptra, #12
195bc     B0 40 BF FD | 	call	#_pop
195c0     E7 7A 62 FC | 	wrlong	result1, fp
195c4     04 CE 05 F1 | 	add	fp, #4
195c8     E7 7C 62 FC | 	wrlong	result2, fp
195cc     04 CE 05 F1 | 	add	fp, #4
195d0     E7 7E 62 FC | 	wrlong	result3, fp
195d4     08 CE 85 F1 | 	sub	fp, #8
195d8     E7 92 02 F6 | 	mov	arg01, fp
195dc     6C 42 BF FD | 	call	#_converttoint
195e0     E7 7A 62 FC | 	wrlong	result1, fp
195e4     08 CE 05 F1 | 	add	fp, #8
195e8     E7 38 68 FC | 	wrlong	#28, fp
195ec     08 CE 85 F1 | 	sub	fp, #8
195f0     E7 92 02 F6 | 	mov	arg01, fp
195f4     08 41 BF FD | 	call	#_push
195f8     E7 F0 03 F6 | 	mov	ptra, fp
195fc     F2 00 A0 FD | 	call	#popregs_
19600                 | _do_round_ret
19600     2D 00 64 FD | 	ret
19604                 | 
19604                 | ' 
19604                 | ' '-------------------- rqpin
19604                 | ' 
19604                 | ' sub do_rqpin
19604                 | _do_rqpin
19604     00 CA 05 F6 | 	mov	COUNT_, #0
19608     E8 00 A0 FD | 	call	#pushregs_
1960c     0C F0 07 F1 | 	add	ptra, #12
19610     5C 40 BF FD | 	call	#_pop
19614     E7 7A 62 FC | 	wrlong	result1, fp
19618     04 CE 05 F1 | 	add	fp, #4
1961c     E7 7C 62 FC | 	wrlong	result2, fp
19620     04 CE 05 F1 | 	add	fp, #4
19624     E7 7E 62 FC | 	wrlong	result3, fp
19628     08 CE 85 F1 | 	sub	fp, #8
1962c     E7 92 02 F6 | 	mov	arg01, fp
19630     18 42 BF FD | 	call	#_converttoint
19634     3D 93 02 F6 | 	mov	arg01, result1
19638     00 7A 06 F6 | 	mov	result1, #0
1963c     49 7B 82 FA | 	rqpin	result1, arg01
19640     54 00 00 FF 
19644     EC 64 06 F1 | 	add	objptr, ##43244
19648     32 7B 62 FC | 	wrlong	result1, objptr
1964c     54 00 00 FF 
19650     EC 64 86 F1 | 	sub	objptr, ##43244
19654     08 CE 05 F1 | 	add	fp, #8
19658     E7 3A 68 FC | 	wrlong	#29, fp
1965c     08 CE 85 F1 | 	sub	fp, #8
19660     E7 08 68 FC | 	wrlong	#4, fp
19664     E7 92 02 F6 | 	mov	arg01, fp
19668     94 40 BF FD | 	call	#_push
1966c     E7 F0 03 F6 | 	mov	ptra, fp
19670     F2 00 A0 FD | 	call	#popregs_
19674                 | _do_rqpin_ret
19674     2D 00 64 FD | 	ret
19678                 | 
19678                 | ' 
19678                 | ' ' ------------------ run
19678                 | ' 
19678                 | ' sub do_run
19678                 | _do_run
19678     04 CA 05 F6 | 	mov	COUNT_, #4
1967c     E8 00 A0 FD | 	call	#pushregs_
19680     4C 00 00 FF 
19684     24 64 06 F1 | 	add	objptr, ##38948
19688     32 A7 02 FB | 	rdlong	local01, objptr
1968c     06 00 00 FF 
19690     38 64 06 F1 | 	add	objptr, ##3128
19694     32 A9 02 FB | 	rdlong	local02, objptr
19698     04 64 06 F1 | 	add	objptr, #4
1969c     32 AB 02 FB | 	rdlong	local03, objptr
196a0     53 99 02 F6 | 	mov	arg04, local01
196a4     4C 97 02 F6 | 	mov	arg03, arg04
196a8     01 96 66 F0 | 	shl	arg03, #1
196ac     4C 97 02 F1 | 	add	arg03, arg04
196b0     02 96 66 F0 | 	shl	arg03, #2
196b4     09 00 00 FF 
196b8     40 64 86 F1 | 	sub	objptr, ##4672
196bc     32 97 02 F1 | 	add	arg03, objptr
196c0     4B 95 02 FB | 	rdlong	arg02, arg03
196c4                 | ' 
196c4                 | ' r_lineptr_e=lineptr_e
196c4                 | ' r_runptr=runptr
196c4                 | ' r_runptr2=runptr2
196c4                 | ' 
196c4                 | ' numpar=compiledline(lineptr_e).result.uresult
196c4                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
196c4     01 94 0E F2 | 	cmp	arg02, #1 wz
196c8     49 00 00 FF 
196cc     20 64 86 F1 | 	sub	objptr, ##37408
196d0     00 92 06 A6 |  if_e	mov	arg01, #0
196d4     B4 AB BF AD |  if_e	call	#_do_load
196d8     4C 00 00 FF 
196dc     2C 64 06 F1 | 	add	objptr, ##38956
196e0     32 99 02 FB | 	rdlong	arg04, objptr
196e4     06 00 00 FF 
196e8     30 64 06 F1 | 	add	objptr, ##3120
196ec     32 99 62 FC | 	wrlong	arg04, objptr
196f0     04 64 06 F1 | 	add	objptr, #4
196f4     32 01 68 FC | 	wrlong	#0, objptr
196f8     04 64 06 F1 | 	add	objptr, #4
196fc     FF FF FF FF 
19700     32 FF 6B FC | 	wrlong	##-1, objptr
19704     06 00 00 FF 
19708     38 64 86 F1 | 	sub	objptr, ##3128
1970c     32 99 02 FB | 	rdlong	arg04, objptr
19710     06 00 00 FF 
19714     A4 64 06 F1 | 	add	objptr, ##3236
19718     32 99 62 FC | 	wrlong	arg04, objptr
1971c     97 01 00 FF 
19720     D1 98 06 F6 | 	mov	arg04, ##@LR__6072
19724     01 00 00 FF 
19728     E8 65 06 F1 | 	add	objptr, ##1000
1972c     32 99 62 FC | 	wrlong	arg04, objptr
19730                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
19730                 | ' dataptr=programstart : readline="" ' reset the data pointer
19730                 | ' if inrun>0 then 
19730     02 00 00 FF 
19734     28 64 86 F1 | 	sub	objptr, ##1064
19738     32 99 02 FB | 	rdlong	arg04, objptr
1973c     52 00 00 FF 
19740     90 64 86 F1 | 	sub	objptr, ##42128
19744     01 98 16 F2 | 	cmp	arg04, #1 wc
19748     34 00 90 CD |  if_b	jmp	#LR__2160
1974c     32 93 02 F6 | 	mov	arg01, objptr
19750     52 00 00 FF 
19754     94 92 06 F1 | 	add	arg01, ##42132
19758     52 00 00 FF 
1975c     5C 64 06 F1 | 	add	objptr, ##42076
19760     32 95 02 FB | 	rdlong	arg02, objptr
19764     18 96 06 F6 | 	mov	arg03, #24
19768     46 00 00 FF 
1976c     90 65 86 F1 | 	sub	objptr, ##36240
19770     E4 9F B0 FD | 	call	#_psram_spin2_read1
19774     0B 00 00 FF 
19778     CC 64 86 F1 | 	sub	objptr, ##5836
1977c                 | '   psram.read1(varptr(runheader),runptr,24)  
1977c                 | '   return
1977c     10 03 90 FD | 	jmp	#LR__2167
19780                 | LR__2160
19780     52 00 00 FF 
19784     90 64 06 F1 | 	add	objptr, ##42128
19788     32 03 68 FC | 	wrlong	#1, objptr
1978c     04 64 06 F1 | 	add	objptr, #4
19790     32 93 02 F6 | 	mov	arg01, objptr
19794     38 64 86 F1 | 	sub	objptr, #56
19798     32 95 02 FB | 	rdlong	arg02, objptr
1979c     18 96 06 F6 | 	mov	arg03, #24
197a0     46 00 00 FF 
197a4     90 65 86 F1 | 	sub	objptr, ##36240
197a8     AC 9F B0 FD | 	call	#_psram_spin2_read1
197ac                 | ' inrun=1
197ac                 | ' psram.read1(varptr(runheader),runptr,24) 
197ac                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
197ac     46 00 00 FF 
197b0     C8 65 06 F1 | 	add	objptr, ##36296
197b4     32 AD 02 FB | 	rdlong	local04, objptr
197b8     52 00 00 FF 
197bc     94 64 86 F1 | 	sub	objptr, ##42132
197c0     FF FF 7F FF 
197c4     FF AD 0E F2 | 	cmp	local04, ##-1 wz
197c8     52 00 00 AF 
197cc     90 64 06 A1 |  if_e	add	objptr, ##42128
197d0     32 01 68 AC |  if_e	wrlong	#0, objptr
197d4     52 00 00 AF 
197d8     90 64 86 A1 |  if_e	sub	objptr, ##42128
197dc     B0 02 90 AD |  if_e	jmp	#LR__2167
197e0                 | ' do 
197e0                 | LR__2161
197e0                 | '   if runptr<>oldrunptr then
197e0     52 00 00 FF 
197e4     5C 64 06 F1 | 	add	objptr, ##42076
197e8     32 AD 02 FB | 	rdlong	local04, objptr
197ec     08 64 06 F1 | 	add	objptr, #8
197f0     32 99 02 FB | 	rdlong	arg04, objptr
197f4     52 00 00 FF 
197f8     64 64 86 F1 | 	sub	objptr, ##42084
197fc     4C AD 0A F2 | 	cmp	local04, arg04 wz
19800     D0 00 90 AD |  if_e	jmp	#LR__2162
19804     32 93 02 F6 | 	mov	arg01, objptr
19808     52 00 00 FF 
1980c     94 92 06 F1 | 	add	arg01, ##42132
19810     52 00 00 FF 
19814     5C 64 06 F1 | 	add	objptr, ##42076
19818     32 95 02 FB | 	rdlong	arg02, objptr
1981c     18 96 06 F6 | 	mov	arg03, #24
19820     46 00 00 FF 
19824     90 65 86 F1 | 	sub	objptr, ##36240
19828     2C 9F B0 FD | 	call	#_psram_spin2_read1
1982c     3D 00 00 FF 
19830     54 65 06 F1 | 	add	objptr, ##31572
19834     32 93 02 F6 | 	mov	arg01, objptr
19838     09 00 00 FF 
1983c     3C 64 06 F1 | 	add	objptr, ##4668
19840     32 95 02 FB | 	rdlong	arg02, objptr
19844     0B 00 00 FF 
19848     54 64 86 F1 | 	sub	objptr, ##5716
1984c     32 AD 02 FB | 	rdlong	local04, objptr
19850     01 AC 66 F0 | 	shl	local04, #1
19854     56 95 02 F1 | 	add	arg02, local04
19858     0B 00 00 FF 
1985c     94 64 06 F1 | 	add	objptr, ##5780
19860     32 97 02 FB | 	rdlong	arg03, objptr
19864     40 64 86 F1 | 	sub	objptr, #64
19868     32 AD 02 FB | 	rdlong	local04, objptr
1986c     56 97 82 F1 | 	sub	arg03, local04
19870     46 00 00 FF 
19874     90 65 86 F1 | 	sub	objptr, ##36240
19878     DC 9E B0 FD | 	call	#_psram_spin2_read1
1987c     46 00 00 FF 
19880     D0 65 06 F1 | 	add	objptr, ##36304
19884     32 AD 02 FB | 	rdlong	local04, objptr
19888     40 64 86 F1 | 	sub	objptr, #64
1988c     32 95 02 FB | 	rdlong	arg02, objptr
19890     4A AD 82 F1 | 	sub	local04, arg02
19894     0B 00 00 FF 
19898     54 64 86 F1 | 	sub	objptr, ##5716
1989c     32 95 02 FB | 	rdlong	arg02, objptr
198a0     4A AD 12 FD | 	qdiv	local04, arg02
198a4     05 00 00 FF 
198a8     18 64 06 F1 | 	add	objptr, ##2584
198ac     18 AC 62 FD | 	getqx	local04
198b0     03 AC 86 F1 | 	sub	local04, #3
198b4     32 AD 62 FC | 	wrlong	local04, objptr
198b8     06 00 00 FF 
198bc     3C 64 06 F1 | 	add	objptr, ##3132
198c0     32 AD 02 FB | 	rdlong	local04, objptr
198c4     08 64 06 F1 | 	add	objptr, #8
198c8     32 AD 62 FC | 	wrlong	local04, objptr
198cc     52 00 00 FF 
198d0     64 64 86 F1 | 	sub	objptr, ##42084
198d4                 | LR__2162
198d4     52 00 00 FF 
198d8     A8 64 06 F1 | 	add	objptr, ##42152
198dc     32 AD 02 FB | 	rdlong	local04, objptr
198e0     4C 64 86 F1 | 	sub	objptr, #76
198e4     32 AD 62 FC | 	wrlong	local04, objptr
198e8     04 64 06 F1 | 	add	objptr, #4
198ec     32 93 02 FB | 	rdlong	arg01, objptr
198f0     52 00 00 FF 
198f4     60 64 86 F1 | 	sub	objptr, ##42080
198f8     70 3C BF FD | 	call	#_execute_line
198fc     52 00 00 FF 
19900     60 64 06 F1 | 	add	objptr, ##42080
19904     32 7B 62 FC | 	wrlong	result1, objptr
19908     04 64 86 F1 | 	sub	objptr, #4
1990c     32 AD 02 FB | 	rdlong	local04, objptr
19910     52 00 00 FF 
19914     5C 64 86 F1 | 	sub	objptr, ##42076
19918     FF FF 3F FF 
1991c     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
19920     4C 00 90 AD |  if_e	jmp	#LR__2165
19924     E0 92 06 F6 | 	mov	arg01, #224
19928     C0 A1 B0 FD | 	call	#_usbnew_spin2_keystate
1992c     00 7A 0E F2 | 	cmp	result1, #0 wz
19930     10 00 90 5D |  if_ne	jmp	#LR__2163
19934     E4 92 06 F6 | 	mov	arg01, #228
19938     B0 A1 B0 FD | 	call	#_usbnew_spin2_keystate
1993c     00 7A 0E F2 | 	cmp	result1, #0 wz
19940     10 00 90 AD |  if_e	jmp	#LR__2164
19944                 | LR__2163
19944     06 92 06 F6 | 	mov	arg01, #6
19948     A0 A1 B0 FD | 	call	#_usbnew_spin2_keystate
1994c     00 7A 0E F2 | 	cmp	result1, #0 wz
19950     1C 00 90 5D |  if_ne	jmp	#LR__2165
19954                 | LR__2164
19954     52 00 00 FF 
19958     90 64 06 F1 | 	add	objptr, ##42128
1995c     32 AD 02 FB | 	rdlong	local04, objptr
19960     52 00 00 FF 
19964     90 64 86 F1 | 	sub	objptr, ##42128
19968     02 AC 0E F2 | 	cmp	local04, #2 wz
1996c     70 FE 9F 5D |  if_ne	jmp	#LR__2161
19970                 | LR__2165
19970                 | '   ''do whatever kbm.peek_latest_key()=$106 
19970                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
19970     52 00 00 FF 
19974     5C 64 06 F1 | 	add	objptr, ##42076
19978     32 AD 02 FB | 	rdlong	local04, objptr
1997c     52 00 00 FF 
19980     5C 64 86 F1 | 	sub	objptr, ##42076
19984     FF FF 3F FF 
19988     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
1998c     AC 00 90 AD |  if_e	jmp	#LR__2166
19990     52 00 00 FF 
19994     90 64 06 F1 | 	add	objptr, ##42128
19998     32 AD 02 FB | 	rdlong	local04, objptr
1999c     52 00 00 FF 
199a0     90 64 86 F1 | 	sub	objptr, ##42128
199a4     01 AC 0E F2 | 	cmp	local04, #1 wz
199a8     90 00 90 5D |  if_ne	jmp	#LR__2166
199ac                 | '   print: print "Stopped at line ";runheader(0) 
199ac     00 92 06 F6 | 	mov	arg01, #0
199b0     60 03 B1 FD | 	call	#__system___getiolock_0622
199b4     3D 93 02 F6 | 	mov	arg01, result1
199b8     D4 AD B0 FD | 	call	#__system___lockmem
199bc     00 92 06 F6 | 	mov	arg01, #0
199c0     0A 94 06 F6 | 	mov	arg02, #10
199c4     00 96 06 F6 | 	mov	arg03, #0
199c8     60 BA B0 FD | 	call	#__system___basic_print_char
199cc     00 92 06 F6 | 	mov	arg01, #0
199d0     40 03 B1 FD | 	call	#__system___getiolock_0622
199d4     3D 01 68 FC | 	wrlong	#0, result1
199d8     00 92 06 F6 | 	mov	arg01, #0
199dc     34 03 B1 FD | 	call	#__system___getiolock_0622
199e0     3D 93 02 F6 | 	mov	arg01, result1
199e4     A8 AD B0 FD | 	call	#__system___lockmem
199e8     97 01 00 FF 
199ec     D2 94 06 F6 | 	mov	arg02, ##@LR__6073
199f0     00 92 06 F6 | 	mov	arg01, #0
199f4     00 96 06 F6 | 	mov	arg03, #0
199f8     88 BA B0 FD | 	call	#__system___basic_print_string
199fc     52 00 00 FF 
19a00     94 64 06 F1 | 	add	objptr, ##42132
19a04     32 95 02 FB | 	rdlong	arg02, objptr
19a08     52 00 00 FF 
19a0c     94 64 86 F1 | 	sub	objptr, ##42132
19a10     00 92 06 F6 | 	mov	arg01, #0
19a14     00 96 06 F6 | 	mov	arg03, #0
19a18     0A 98 06 F6 | 	mov	arg04, #10
19a1c     E8 BA B0 FD | 	call	#__system___basic_print_unsigned
19a20     00 92 06 F6 | 	mov	arg01, #0
19a24     0A 94 06 F6 | 	mov	arg02, #10
19a28     00 96 06 F6 | 	mov	arg03, #0
19a2c     FC B9 B0 FD | 	call	#__system___basic_print_char
19a30     00 92 06 F6 | 	mov	arg01, #0
19a34     DC 02 B1 FD | 	call	#__system___getiolock_0622
19a38     3D 01 68 FC | 	wrlong	#0, result1
19a3c                 | LR__2166
19a3c     52 00 00 FF 
19a40     90 64 06 F1 | 	add	objptr, ##42128
19a44     32 01 68 FC | 	wrlong	#0, objptr
19a48     06 00 00 FF 
19a4c     6C 64 86 F1 | 	sub	objptr, ##3180
19a50     32 A7 62 FC | 	wrlong	local01, objptr
19a54     06 00 00 FF 
19a58     38 64 06 F1 | 	add	objptr, ##3128
19a5c     32 A9 62 FC | 	wrlong	local02, objptr
19a60     04 64 06 F1 | 	add	objptr, #4
19a64     32 AB 62 FC | 	wrlong	local03, objptr
19a68     52 00 00 FF 
19a6c     60 64 86 F1 | 	sub	objptr, ##42080
19a70     11 92 06 F6 | 	mov	arg01, #17
19a74     08 94 06 F6 | 	mov	arg02, #8
19a78     10 96 06 F6 | 	mov	arg03, #16
19a7c     78 7F B0 FD | 	call	#_hg010b_spin2_setspritesize
19a80     10 92 06 F6 | 	mov	arg01, #16
19a84     20 94 06 F6 | 	mov	arg02, #32
19a88     20 96 06 F6 | 	mov	arg03, #32
19a8c     68 7F B0 FD | 	call	#_hg010b_spin2_setspritesize
19a90                 | LR__2167
19a90     E7 F0 03 F6 | 	mov	ptra, fp
19a94     F2 00 A0 FD | 	call	#popregs_
19a98                 | _do_run_ret
19a98     2D 00 64 FD | 	ret
19a9c                 | 
19a9c                 | ' 
19a9c                 | ' ' ------------------ save
19a9c                 | ' 
19a9c                 | ' sub do_save                        
19a9c                 | _do_save
19a9c     0A CA 05 F6 | 	mov	COUNT_, #10
19aa0     E8 00 A0 FD | 	call	#pushregs_
19aa4     B8 F0 07 F1 | 	add	ptra, #184
19aa8     4C 00 00 FF 
19aac     24 64 06 F1 | 	add	objptr, ##38948
19ab0     32 97 02 FB | 	rdlong	arg03, objptr
19ab4     4B AD 02 F6 | 	mov	local04, arg03
19ab8     01 AC 66 F0 | 	shl	local04, #1
19abc     4B AD 02 F1 | 	add	local04, arg03
19ac0     02 AC 66 F0 | 	shl	local04, #2
19ac4     03 00 00 FF 
19ac8     04 64 86 F1 | 	sub	objptr, ##1540
19acc     32 AD 02 F1 | 	add	local04, objptr
19ad0     56 AF 02 FB | 	rdlong	local05, local04
19ad4                 | ' 
19ad4                 | ' numpar=compiledline(lineptr_e).result.uresult
19ad4                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
19ad4     01 AE 56 F2 | 	cmps	local05, #1 wc
19ad8     49 00 00 FF 
19adc     20 64 86 F1 | 	sub	objptr, ##37408
19ae0     14 00 90 CD |  if_b	jmp	#LR__2170
19ae4     88 3B BF FD | 	call	#_pop
19ae8     3D A7 02 F6 | 	mov	local01, result1
19aec     3E A9 02 F6 | 	mov	local02, result2
19af0     3F AB 02 F6 | 	mov	local03, result3
19af4     18 00 90 FD | 	jmp	#LR__2171
19af8                 | LR__2170
19af8     54 00 00 FF 
19afc     A0 64 06 F1 | 	add	objptr, ##43168
19b00     32 A7 02 FB | 	rdlong	local01, objptr
19b04     54 00 00 FF 
19b08     A0 64 86 F1 | 	sub	objptr, ##43168
19b0c     1F AA 06 F6 | 	mov	local03, #31
19b10                 | LR__2171
19b10                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
19b10     4C 00 00 FF 
19b14     2C 64 06 F1 | 	add	objptr, ##38956
19b18     32 93 02 FB | 	rdlong	arg01, objptr
19b1c     4C 00 00 FF 
19b20     2C 64 86 F1 | 	sub	objptr, ##38956
19b24     38 71 B0 FD | 	call	#_pslpeek
19b28     FF FF 7F FF 
19b2c     FF 7B 0E F2 | 	cmp	result1, ##-1 wz
19b30     10 00 90 5D |  if_ne	jmp	#LR__2172
19b34     1B 92 06 F6 | 	mov	arg01, #27
19b38     00 94 06 F6 | 	mov	arg02, #0
19b3c     58 6E B0 FD | 	call	#_printerror
19b40     3C 02 90 FD | 	jmp	#LR__2178
19b44                 | LR__2172
19b44                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
19b44     2B AA 0E F2 | 	cmp	local03, #43 wz
19b48     10 00 90 5D |  if_ne	jmp	#LR__2173
19b4c     53 93 02 F6 | 	mov	arg01, local01
19b50     8C 3C BF FD | 	call	#_convertstring
19b54     3D A7 02 F6 | 	mov	local01, result1
19b58     1F AA 06 F6 | 	mov	local03, #31
19b5c                 | LR__2173
19b5c                 | ' if t1.result_type=result_string then
19b5c     1F AA 0E F2 | 	cmp	local03, #31 wz
19b60     1C 02 90 5D |  if_ne	jmp	#LR__2177
19b64                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
19b64     97 01 00 FF 
19b68     E3 94 06 F6 | 	mov	arg02, ##@LR__6074
19b6c     53 93 02 F6 | 	mov	arg01, local01
19b70     44 AC B0 FD | 	call	#__system___string_cmp
19b74     00 7A 0E F2 | 	cmp	result1, #0 wz
19b78     54 00 00 AF 
19b7c     A0 64 06 A1 |  if_e	add	objptr, ##43168
19b80     32 A7 02 AB |  if_e	rdlong	local01, objptr
19b84     54 00 00 FF 
19b88     A0 64 C6 F3 | 	sumz	objptr, ##43168
19b8c     32 A7 62 5C |  if_ne	wrlong	local01, objptr
19b90     54 00 00 5F 
19b94     A0 64 86 51 |  if_ne	sub	objptr, ##43168
19b98                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
19b98     09 92 06 F6 | 	mov	arg01, #9
19b9c     CC F7 B0 FD | 	call	#__system__close
19ba0     09 B0 06 F6 | 	mov	local06, #9
19ba4     4C 00 00 FF 
19ba8     38 64 06 F1 | 	add	objptr, ##38968
19bac     32 93 02 FB | 	rdlong	arg01, objptr
19bb0     4C 00 00 FF 
19bb4     38 64 86 F1 | 	sub	objptr, ##38968
19bb8     97 01 00 FF 
19bbc     E4 94 06 F6 | 	mov	arg02, ##@LR__6075
19bc0     28 AC B0 FD | 	call	#__system___string_concat
19bc4     3D 93 02 F6 | 	mov	arg01, result1
19bc8     53 95 02 F6 | 	mov	arg02, local01
19bcc     1C AC B0 FD | 	call	#__system___string_concat
19bd0     3D 95 02 F6 | 	mov	arg02, result1
19bd4     58 93 02 F6 | 	mov	arg01, local06
19bd8     0D 96 06 F6 | 	mov	arg03, #13
19bdc     60 B7 B0 FD | 	call	#__system___basic_open_string
19be0     4C 00 00 FF 
19be4     2C 64 06 F1 | 	add	objptr, ##38956
19be8     32 B3 02 FB | 	rdlong	local07, objptr
19bec     4C 00 00 FF 
19bf0     2C 64 86 F1 | 	sub	objptr, ##38956
19bf4                 | '   saveptr=programstart
19bf4                 | '   do
19bf4                 | LR__2174
19bf4     E7 92 02 F6 | 	mov	arg01, fp
19bf8     14 92 06 F1 | 	add	arg01, #20
19bfc     59 95 02 F6 | 	mov	arg02, local07
19c00     18 96 06 F6 | 	mov	arg03, #24
19c04     0B 00 00 FF 
19c08     CC 64 06 F1 | 	add	objptr, ##5836
19c0c     48 9B B0 FD | 	call	#_psram_spin2_read1
19c10     E7 92 02 F6 | 	mov	arg01, fp
19c14     2C 92 06 F1 | 	add	arg01, #44
19c18     1C CE 05 F1 | 	add	fp, #28
19c1c     E7 94 02 FB | 	rdlong	arg02, fp
19c20     04 CE 05 F1 | 	add	fp, #4
19c24     E7 96 02 FB | 	rdlong	arg03, fp
19c28     20 CE 85 F1 | 	sub	fp, #32
19c2c     28 9B B0 FD | 	call	#_psram_spin2_read1
19c30     0B 00 00 FF 
19c34     CC 64 86 F1 | 	sub	objptr, ##5836
19c38     97 01 00 FF 
19c3c     E6 B4 06 F6 | 	mov	local08, ##@LR__6076
19c40                 | '     psram.read1(varptr(header(0)),saveptr,24)
19c40                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
19c40                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
19c40     01 B6 06 F6 | 	mov	local09, #1
19c44     20 CE 05 F1 | 	add	fp, #32
19c48     E7 B8 02 FB | 	rdlong	local10, fp
19c4c     20 CE 85 F1 | 	sub	fp, #32
19c50     01 B8 06 F1 | 	add	local10, #1
19c54                 | LR__2175
19c54     5C B7 52 F2 | 	cmps	local09, local10 wc
19c58     34 00 90 3D |  if_ae	jmp	#LR__2176
19c5c     5B B3 02 F6 | 	mov	local07, local09
19c60     01 B2 86 F1 | 	sub	local07, #1
19c64     E7 B0 02 F6 | 	mov	local06, fp
19c68     2C B0 06 F1 | 	add	local06, #44
19c6c     58 B3 02 F1 | 	add	local07, local06
19c70     59 93 C2 FA | 	rdbyte	arg01, local07
19c74     84 C5 B0 FD | 	call	#__system__Chr_S
19c78     3D 95 02 F6 | 	mov	arg02, result1
19c7c     5A 93 02 F6 | 	mov	arg01, local08
19c80     68 AB B0 FD | 	call	#__system___string_concat
19c84     3D B5 02 F6 | 	mov	local08, result1
19c88     01 B6 06 F1 | 	add	local09, #1
19c8c     C4 FF 9F FD | 	jmp	#LR__2175
19c90                 | LR__2176
19c90                 | '     print #9, saveline$
19c90     09 92 06 F6 | 	mov	arg01, #9
19c94     7C 00 B1 FD | 	call	#__system___getiolock_0622
19c98     3D 93 02 F6 | 	mov	arg01, result1
19c9c     F0 AA B0 FD | 	call	#__system___lockmem
19ca0     09 92 06 F6 | 	mov	arg01, #9
19ca4     5A 95 02 F6 | 	mov	arg02, local08
19ca8     00 96 06 F6 | 	mov	arg03, #0
19cac     D4 B7 B0 FD | 	call	#__system___basic_print_string
19cb0     09 92 06 F6 | 	mov	arg01, #9
19cb4     0A 94 06 F6 | 	mov	arg02, #10
19cb8     00 96 06 F6 | 	mov	arg03, #0
19cbc     6C B7 B0 FD | 	call	#__system___basic_print_char
19cc0     09 92 06 F6 | 	mov	arg01, #9
19cc4     4C 00 B1 FD | 	call	#__system___getiolock_0622
19cc8     3D 01 68 FC | 	wrlong	#0, result1
19ccc     28 CE 05 F1 | 	add	fp, #40
19cd0     E7 B0 02 FB | 	rdlong	local06, fp
19cd4     58 B3 02 F6 | 	mov	local07, local06
19cd8     28 CE 85 F1 | 	sub	fp, #40
19cdc     FF FF 3F FF 
19ce0     FF B1 0E F2 | 	cmp	local06, ##2147483647 wz
19ce4     0C FF 9F 5D |  if_ne	jmp	#LR__2174
19ce8                 | '   close #9  
19ce8     09 92 06 F6 | 	mov	arg01, #9
19cec     7C F6 B0 FD | 	call	#__system__close
19cf0                 | '   print "Saved as ";currentdir$+"/"+loadname
19cf0     00 92 06 F6 | 	mov	arg01, #0
19cf4     1C 00 B1 FD | 	call	#__system___getiolock_0622
19cf8     3D 93 02 F6 | 	mov	arg01, result1
19cfc     90 AA B0 FD | 	call	#__system___lockmem
19d00     97 01 00 FF 
19d04     E7 94 06 F6 | 	mov	arg02, ##@LR__6077
19d08     00 92 06 F6 | 	mov	arg01, #0
19d0c     00 96 06 F6 | 	mov	arg03, #0
19d10     70 B7 B0 FD | 	call	#__system___basic_print_string
19d14     00 AC 06 F6 | 	mov	local04, #0
19d18     4C 00 00 FF 
19d1c     38 64 06 F1 | 	add	objptr, ##38968
19d20     32 93 02 FB | 	rdlong	arg01, objptr
19d24     4C 00 00 FF 
19d28     38 64 86 F1 | 	sub	objptr, ##38968
19d2c     97 01 00 FF 
19d30     F1 94 06 F6 | 	mov	arg02, ##@LR__6078
19d34     B4 AA B0 FD | 	call	#__system___string_concat
19d38     3D 93 02 F6 | 	mov	arg01, result1
19d3c     54 00 00 FF 
19d40     A0 64 06 F1 | 	add	objptr, ##43168
19d44     32 95 02 FB | 	rdlong	arg02, objptr
19d48     54 00 00 FF 
19d4c     A0 64 86 F1 | 	sub	objptr, ##43168
19d50     98 AA B0 FD | 	call	#__system___string_concat
19d54     3D 95 02 F6 | 	mov	arg02, result1
19d58     56 93 02 F6 | 	mov	arg01, local04
19d5c     00 96 06 F6 | 	mov	arg03, #0
19d60     20 B7 B0 FD | 	call	#__system___basic_print_string
19d64     00 92 06 F6 | 	mov	arg01, #0
19d68     0A 94 06 F6 | 	mov	arg02, #10
19d6c     00 96 06 F6 | 	mov	arg03, #0
19d70     B8 B6 B0 FD | 	call	#__system___basic_print_char
19d74     00 92 06 F6 | 	mov	arg01, #0
19d78     98 FF B0 FD | 	call	#__system___getiolock_0622
19d7c     3D 01 68 FC | 	wrlong	#0, result1
19d80                 | LR__2177
19d80                 | LR__2178
19d80     E7 F0 03 F6 | 	mov	ptra, fp
19d84     F2 00 A0 FD | 	call	#popregs_
19d88                 | _do_save_ret
19d88     2D 00 64 FD | 	ret
19d8c                 | 
19d8c                 | ' 
19d8c                 | ' ' ------------------ setamode
19d8c                 | ' 
19d8c                 | ' sub do_setamode
19d8c                 | _do_setamode
19d8c     02 CA 05 F6 | 	mov	COUNT_, #2
19d90     E8 00 A0 FD | 	call	#pushregs_
19d94     18 F0 07 F1 | 	add	ptra, #24
19d98     D4 38 BF FD | 	call	#_pop
19d9c     3D 93 02 F6 | 	mov	arg01, result1
19da0     3E A7 02 F6 | 	mov	local01, result2
19da4     3F A9 02 F6 | 	mov	local02, result3
19da8     E7 92 62 FC | 	wrlong	arg01, fp
19dac     04 CE 05 F1 | 	add	fp, #4
19db0     E7 A6 62 FC | 	wrlong	local01, fp
19db4     04 CE 05 F1 | 	add	fp, #4
19db8     E7 A8 62 FC | 	wrlong	local02, fp
19dbc     08 CE 85 F1 | 	sub	fp, #8
19dc0     AC 38 BF FD | 	call	#_pop
19dc4     3D A9 02 F6 | 	mov	local02, result1
19dc8     0C CE 05 F1 | 	add	fp, #12
19dcc     E7 A8 62 FC | 	wrlong	local02, fp
19dd0     04 CE 05 F1 | 	add	fp, #4
19dd4     E7 7C 62 FC | 	wrlong	result2, fp
19dd8     04 CE 05 F1 | 	add	fp, #4
19ddc     E7 7E 62 FC | 	wrlong	result3, fp
19de0     08 CE 85 F1 | 	sub	fp, #8
19de4     E7 92 02 F6 | 	mov	arg01, fp
19de8     0C CE 85 F1 | 	sub	fp, #12
19dec     5C 3A BF FD | 	call	#_converttoint
19df0     3D A7 02 F6 | 	mov	local01, result1
19df4     03 A6 66 F0 | 	shl	local01, #3
19df8     3D A7 82 F1 | 	sub	local01, result1
19dfc     02 A6 66 F0 | 	shl	local01, #2
19e00     32 A9 02 F6 | 	mov	local02, objptr
19e04     16 00 00 FF 
19e08     BC A8 06 F1 | 	add	local02, ##11452
19e0c     54 A7 02 F1 | 	add	local01, local02
19e10     E7 92 02 F6 | 	mov	arg01, fp
19e14     34 3A BF FD | 	call	#_converttoint
19e18     16 A6 06 F1 | 	add	local01, #22
19e1c     53 7B 52 FC | 	wrword	result1, local01
19e20     E7 F0 03 F6 | 	mov	ptra, fp
19e24     F2 00 A0 FD | 	call	#popregs_
19e28                 | _do_setamode_ret
19e28     2D 00 64 FD | 	ret
19e2c                 | 
19e2c                 | ' 
19e2c                 | ' 
19e2c                 | ' ' ------------------ setcolor
19e2c                 | ' 
19e2c                 | ' sub do_setcolor
19e2c                 | _do_setcolor
19e2c     05 CA 05 F6 | 	mov	COUNT_, #5
19e30     E8 00 A0 FD | 	call	#pushregs_
19e34     20 F0 07 F1 | 	add	ptra, #32
19e38     4C 00 00 FF 
19e3c     24 64 06 F1 | 	add	objptr, ##38948
19e40     32 99 02 FB | 	rdlong	arg04, objptr
19e44     4C 97 02 F6 | 	mov	arg03, arg04
19e48     01 96 66 F0 | 	shl	arg03, #1
19e4c     4C 97 02 F1 | 	add	arg03, arg04
19e50     02 96 66 F0 | 	shl	arg03, #2
19e54     03 00 00 FF 
19e58     04 64 86 F1 | 	sub	objptr, ##1540
19e5c     32 97 02 F1 | 	add	arg03, objptr
19e60     4B A7 02 FB | 	rdlong	local01, arg03
19e64                 | ' 
19e64                 | ' numpar=compiledline(lineptr_e).result.uresult
19e64                 | ' 
19e64                 | ' if numpar=4 then
19e64     04 A6 0E F2 | 	cmp	local01, #4 wz
19e68     49 00 00 FF 
19e6c     20 64 86 F1 | 	sub	objptr, ##37408
19e70     B4 00 90 5D |  if_ne	jmp	#LR__2180
19e74     F8 37 BF FD | 	call	#_pop
19e78     3F A7 02 F6 | 	mov	local01, result3
19e7c     E7 7A 62 FC | 	wrlong	result1, fp
19e80     04 CE 05 F1 | 	add	fp, #4
19e84     E7 7C 62 FC | 	wrlong	result2, fp
19e88     04 CE 05 F1 | 	add	fp, #4
19e8c     E7 A6 62 FC | 	wrlong	local01, fp
19e90     08 CE 85 F1 | 	sub	fp, #8
19e94     E7 92 02 F6 | 	mov	arg01, fp
19e98     B0 39 BF FD | 	call	#_converttoint
19e9c     3D A9 02 F6 | 	mov	local02, result1
19ea0     CC 37 BF FD | 	call	#_pop
19ea4     3F A7 02 F6 | 	mov	local01, result3
19ea8     E7 7A 62 FC | 	wrlong	result1, fp
19eac     04 CE 05 F1 | 	add	fp, #4
19eb0     E7 7C 62 FC | 	wrlong	result2, fp
19eb4     04 CE 05 F1 | 	add	fp, #4
19eb8     E7 A6 62 FC | 	wrlong	local01, fp
19ebc     08 CE 85 F1 | 	sub	fp, #8
19ec0     E7 92 02 F6 | 	mov	arg01, fp
19ec4     84 39 BF FD | 	call	#_converttoint
19ec8     3D AB 02 F6 | 	mov	local03, result1
19ecc     A0 37 BF FD | 	call	#_pop
19ed0     3F A7 02 F6 | 	mov	local01, result3
19ed4     E7 7A 62 FC | 	wrlong	result1, fp
19ed8     04 CE 05 F1 | 	add	fp, #4
19edc     E7 7C 62 FC | 	wrlong	result2, fp
19ee0     04 CE 05 F1 | 	add	fp, #4
19ee4     E7 A6 62 FC | 	wrlong	local01, fp
19ee8     08 CE 85 F1 | 	sub	fp, #8
19eec     E7 92 02 F6 | 	mov	arg01, fp
19ef0     58 39 BF FD | 	call	#_converttoint
19ef4     3D AD 02 F6 | 	mov	local04, result1
19ef8     74 37 BF FD | 	call	#_pop
19efc     3F A7 02 F6 | 	mov	local01, result3
19f00     E7 7A 62 FC | 	wrlong	result1, fp
19f04     04 CE 05 F1 | 	add	fp, #4
19f08     E7 7C 62 FC | 	wrlong	result2, fp
19f0c     04 CE 05 F1 | 	add	fp, #4
19f10     E7 A6 62 FC | 	wrlong	local01, fp
19f14     08 CE 85 F1 | 	sub	fp, #8
19f18     E7 92 02 F6 | 	mov	arg01, fp
19f1c     2C 39 BF FD | 	call	#_converttoint
19f20     3D AF 02 F6 | 	mov	local05, result1
19f24     C0 00 90 FD | 	jmp	#LR__2183
19f28                 | LR__2180
19f28     02 A6 0E F2 | 	cmp	local01, #2 wz
19f2c     68 00 90 5D |  if_ne	jmp	#LR__2181
19f30     3C 37 BF FD | 	call	#_pop
19f34     3F AF 02 F6 | 	mov	local05, result3
19f38     E7 7A 62 FC | 	wrlong	result1, fp
19f3c     04 CE 05 F1 | 	add	fp, #4
19f40     E7 7C 62 FC | 	wrlong	result2, fp
19f44     04 CE 05 F1 | 	add	fp, #4
19f48     E7 AE 62 FC | 	wrlong	local05, fp
19f4c     08 CE 85 F1 | 	sub	fp, #8
19f50     E7 92 02 F6 | 	mov	arg01, fp
19f54     F4 38 BF FD | 	call	#_converttoint
19f58     3D AD 02 F6 | 	mov	local04, result1
19f5c     56 A9 E2 F8 | 	getbyte	local02, local04, #0
19f60     56 AB EA F8 | 	getbyte	local03, local04, #1
19f64     56 AD F2 F8 | 	getbyte	local04, local04, #2
19f68     04 37 BF FD | 	call	#_pop
19f6c     3F AF 02 F6 | 	mov	local05, result3
19f70     E7 7A 62 FC | 	wrlong	result1, fp
19f74     04 CE 05 F1 | 	add	fp, #4
19f78     E7 7C 62 FC | 	wrlong	result2, fp
19f7c     04 CE 05 F1 | 	add	fp, #4
19f80     E7 AE 62 FC | 	wrlong	local05, fp
19f84     08 CE 85 F1 | 	sub	fp, #8
19f88     E7 92 02 F6 | 	mov	arg01, fp
19f8c     BC 38 BF FD | 	call	#_converttoint
19f90     3D AF 02 F6 | 	mov	local05, result1
19f94     50 00 90 FD | 	jmp	#LR__2182
19f98                 | LR__2181
19f98                 | '   print "setcolor: "; : printerror(39,runheader(0)) : return  
19f98     00 92 06 F6 | 	mov	arg01, #0
19f9c     74 FD B0 FD | 	call	#__system___getiolock_0622
19fa0     3D 93 02 F6 | 	mov	arg01, result1
19fa4     E8 A7 B0 FD | 	call	#__system___lockmem
19fa8     97 01 00 FF 
19fac     F3 94 06 F6 | 	mov	arg02, ##@LR__6079
19fb0     00 92 06 F6 | 	mov	arg01, #0
19fb4     00 96 06 F6 | 	mov	arg03, #0
19fb8     C8 B4 B0 FD | 	call	#__system___basic_print_string
19fbc     00 92 06 F6 | 	mov	arg01, #0
19fc0     50 FD B0 FD | 	call	#__system___getiolock_0622
19fc4     3D 01 68 FC | 	wrlong	#0, result1
19fc8     52 00 00 FF 
19fcc     94 64 06 F1 | 	add	objptr, ##42132
19fd0     32 95 02 FB | 	rdlong	arg02, objptr
19fd4     52 00 00 FF 
19fd8     94 64 86 F1 | 	sub	objptr, ##42132
19fdc     27 92 06 F6 | 	mov	arg01, #39
19fe0     B4 69 B0 FD | 	call	#_printerror
19fe4     14 00 90 FD | 	jmp	#LR__2184
19fe8                 | LR__2182
19fe8                 | LR__2183
19fe8     57 93 02 F6 | 	mov	arg01, local05
19fec     56 95 02 F6 | 	mov	arg02, local04
19ff0     55 97 02 F6 | 	mov	arg03, local03
19ff4     54 99 02 F6 | 	mov	arg04, local02
19ff8     64 87 B0 FD | 	call	#_hg010b_spin2_setcolor
19ffc                 | LR__2184
19ffc     E7 F0 03 F6 | 	mov	ptra, fp
1a000     F2 00 A0 FD | 	call	#popregs_
1a004                 | _do_setcolor_ret
1a004     2D 00 64 FD | 	ret
1a008                 | 
1a008                 | ' 
1a008                 | ' ' ------------------ setdelay
1a008                 | ' 
1a008                 | ' sub do_setdelay
1a008                 | _do_setdelay
1a008     02 CA 05 F6 | 	mov	COUNT_, #2
1a00c     E8 00 A0 FD | 	call	#pushregs_
1a010     18 F0 07 F1 | 	add	ptra, #24
1a014     58 36 BF FD | 	call	#_pop
1a018     3D 93 02 F6 | 	mov	arg01, result1
1a01c     3E A7 02 F6 | 	mov	local01, result2
1a020     3F A9 02 F6 | 	mov	local02, result3
1a024     E7 92 62 FC | 	wrlong	arg01, fp
1a028     04 CE 05 F1 | 	add	fp, #4
1a02c     E7 A6 62 FC | 	wrlong	local01, fp
1a030     04 CE 05 F1 | 	add	fp, #4
1a034     E7 A8 62 FC | 	wrlong	local02, fp
1a038     08 CE 85 F1 | 	sub	fp, #8
1a03c     30 36 BF FD | 	call	#_pop
1a040     3D A9 02 F6 | 	mov	local02, result1
1a044     0C CE 05 F1 | 	add	fp, #12
1a048     E7 A8 62 FC | 	wrlong	local02, fp
1a04c     04 CE 05 F1 | 	add	fp, #4
1a050     E7 7C 62 FC | 	wrlong	result2, fp
1a054     04 CE 05 F1 | 	add	fp, #4
1a058     E7 7E 62 FC | 	wrlong	result3, fp
1a05c     08 CE 85 F1 | 	sub	fp, #8
1a060     E7 92 02 F6 | 	mov	arg01, fp
1a064     0C CE 85 F1 | 	sub	fp, #12
1a068     E0 37 BF FD | 	call	#_converttoint
1a06c     3D A7 02 F6 | 	mov	local01, result1
1a070     03 A6 66 F0 | 	shl	local01, #3
1a074     3D A7 82 F1 | 	sub	local01, result1
1a078     02 A6 66 F0 | 	shl	local01, #2
1a07c     32 A9 02 F6 | 	mov	local02, objptr
1a080     16 00 00 FF 
1a084     BC A8 06 F1 | 	add	local02, ##11452
1a088     54 A7 02 F1 | 	add	local01, local02
1a08c     E7 92 02 F6 | 	mov	arg01, fp
1a090     B8 37 BF FD | 	call	#_converttoint
1a094     06 A6 06 F1 | 	add	local01, #6
1a098     53 7B 52 FC | 	wrword	result1, local01
1a09c     E7 F0 03 F6 | 	mov	ptra, fp
1a0a0     F2 00 A0 FD | 	call	#popregs_
1a0a4                 | _do_setdelay_ret
1a0a4     2D 00 64 FD | 	ret
1a0a8                 | 
1a0a8                 | ' 
1a0a8                 | ' ' ------------------ setenv
1a0a8                 | ' 
1a0a8                 | ' sub do_setenv
1a0a8                 | _do_setenv
1a0a8     02 CA 05 F6 | 	mov	COUNT_, #2
1a0ac     E8 00 A0 FD | 	call	#pushregs_
1a0b0     18 F0 07 F1 | 	add	ptra, #24
1a0b4     B8 35 BF FD | 	call	#_pop
1a0b8     3D 93 02 F6 | 	mov	arg01, result1
1a0bc     3E A7 02 F6 | 	mov	local01, result2
1a0c0     3F A9 02 F6 | 	mov	local02, result3
1a0c4     E7 92 62 FC | 	wrlong	arg01, fp
1a0c8     04 CE 05 F1 | 	add	fp, #4
1a0cc     E7 A6 62 FC | 	wrlong	local01, fp
1a0d0     04 CE 05 F1 | 	add	fp, #4
1a0d4     E7 A8 62 FC | 	wrlong	local02, fp
1a0d8     08 CE 85 F1 | 	sub	fp, #8
1a0dc     90 35 BF FD | 	call	#_pop
1a0e0     3D A9 02 F6 | 	mov	local02, result1
1a0e4     0C CE 05 F1 | 	add	fp, #12
1a0e8     E7 A8 62 FC | 	wrlong	local02, fp
1a0ec     04 CE 05 F1 | 	add	fp, #4
1a0f0     E7 7C 62 FC | 	wrlong	result2, fp
1a0f4     04 CE 05 F1 | 	add	fp, #4
1a0f8     E7 7E 62 FC | 	wrlong	result3, fp
1a0fc     08 CE 85 F1 | 	sub	fp, #8
1a100     E7 92 02 F6 | 	mov	arg01, fp
1a104     0C CE 85 F1 | 	sub	fp, #12
1a108     40 37 BF FD | 	call	#_converttoint
1a10c     3D A7 02 F6 | 	mov	local01, result1
1a110     03 A6 66 F0 | 	shl	local01, #3
1a114     3D A7 82 F1 | 	sub	local01, result1
1a118     02 A6 66 F0 | 	shl	local01, #2
1a11c     32 A9 02 F6 | 	mov	local02, objptr
1a120     16 00 00 FF 
1a124     BC A8 06 F1 | 	add	local02, ##11452
1a128     54 A7 02 F1 | 	add	local01, local02
1a12c     E7 92 02 F6 | 	mov	arg01, fp
1a130     18 37 BF FD | 	call	#_converttoint
1a134     05 A6 06 F1 | 	add	local01, #5
1a138     53 7B 42 FC | 	wrbyte	result1, local01
1a13c     E7 F0 03 F6 | 	mov	ptra, fp
1a140     F2 00 A0 FD | 	call	#popregs_
1a144                 | _do_setenv_ret
1a144     2D 00 64 FD | 	ret
1a148                 | 
1a148                 | ' 
1a148                 | ' ' ------------------ setlen
1a148                 | ' 
1a148                 | ' sub do_setlen
1a148                 | _do_setlen
1a148     02 CA 05 F6 | 	mov	COUNT_, #2
1a14c     E8 00 A0 FD | 	call	#pushregs_
1a150     18 F0 07 F1 | 	add	ptra, #24
1a154     18 35 BF FD | 	call	#_pop
1a158     3D 93 02 F6 | 	mov	arg01, result1
1a15c     3E A7 02 F6 | 	mov	local01, result2
1a160     3F A9 02 F6 | 	mov	local02, result3
1a164     E7 92 62 FC | 	wrlong	arg01, fp
1a168     04 CE 05 F1 | 	add	fp, #4
1a16c     E7 A6 62 FC | 	wrlong	local01, fp
1a170     04 CE 05 F1 | 	add	fp, #4
1a174     E7 A8 62 FC | 	wrlong	local02, fp
1a178     08 CE 85 F1 | 	sub	fp, #8
1a17c     F0 34 BF FD | 	call	#_pop
1a180     3D A9 02 F6 | 	mov	local02, result1
1a184     0C CE 05 F1 | 	add	fp, #12
1a188     E7 A8 62 FC | 	wrlong	local02, fp
1a18c     04 CE 05 F1 | 	add	fp, #4
1a190     E7 7C 62 FC | 	wrlong	result2, fp
1a194     04 CE 05 F1 | 	add	fp, #4
1a198     E7 7E 62 FC | 	wrlong	result3, fp
1a19c     08 CE 85 F1 | 	sub	fp, #8
1a1a0     E7 92 02 F6 | 	mov	arg01, fp
1a1a4     0C CE 85 F1 | 	sub	fp, #12
1a1a8     A0 36 BF FD | 	call	#_converttoint
1a1ac     3D A7 02 F6 | 	mov	local01, result1
1a1b0     03 A6 66 F0 | 	shl	local01, #3
1a1b4     3D A7 82 F1 | 	sub	local01, result1
1a1b8     02 A6 66 F0 | 	shl	local01, #2
1a1bc     32 A9 02 F6 | 	mov	local02, objptr
1a1c0     16 00 00 FF 
1a1c4     BC A8 06 F1 | 	add	local02, ##11452
1a1c8     54 A7 02 F1 | 	add	local01, local02
1a1cc     E7 92 02 F6 | 	mov	arg01, fp
1a1d0     34 37 BF FD | 	call	#_converttofloat
1a1d4     08 A6 06 F1 | 	add	local01, #8
1a1d8     53 7B 62 FC | 	wrlong	result1, local01
1a1dc     E7 F0 03 F6 | 	mov	ptra, fp
1a1e0     F2 00 A0 FD | 	call	#popregs_
1a1e4                 | _do_setlen_ret
1a1e4     2D 00 64 FD | 	ret
1a1e8                 | 
1a1e8                 | ' 
1a1e8                 | ' ' ------------------ setpan
1a1e8                 | ' 
1a1e8                 | ' sub do_setpan
1a1e8                 | _do_setpan
1a1e8     02 CA 05 F6 | 	mov	COUNT_, #2
1a1ec     E8 00 A0 FD | 	call	#pushregs_
1a1f0     18 F0 07 F1 | 	add	ptra, #24
1a1f4     78 34 BF FD | 	call	#_pop
1a1f8     3D 93 02 F6 | 	mov	arg01, result1
1a1fc     3E A7 02 F6 | 	mov	local01, result2
1a200     3F A9 02 F6 | 	mov	local02, result3
1a204     E7 92 62 FC | 	wrlong	arg01, fp
1a208     04 CE 05 F1 | 	add	fp, #4
1a20c     E7 A6 62 FC | 	wrlong	local01, fp
1a210     04 CE 05 F1 | 	add	fp, #4
1a214     E7 A8 62 FC | 	wrlong	local02, fp
1a218     08 CE 85 F1 | 	sub	fp, #8
1a21c     50 34 BF FD | 	call	#_pop
1a220     3D A9 02 F6 | 	mov	local02, result1
1a224     0C CE 05 F1 | 	add	fp, #12
1a228     E7 A8 62 FC | 	wrlong	local02, fp
1a22c     04 CE 05 F1 | 	add	fp, #4
1a230     E7 7C 62 FC | 	wrlong	result2, fp
1a234     04 CE 05 F1 | 	add	fp, #4
1a238     E7 7E 62 FC | 	wrlong	result3, fp
1a23c     08 CE 85 F1 | 	sub	fp, #8
1a240     E7 92 02 F6 | 	mov	arg01, fp
1a244     0C CE 85 F1 | 	sub	fp, #12
1a248     00 36 BF FD | 	call	#_converttoint
1a24c     3D A7 02 F6 | 	mov	local01, result1
1a250     03 A6 66 F0 | 	shl	local01, #3
1a254     3D A7 82 F1 | 	sub	local01, result1
1a258     02 A6 66 F0 | 	shl	local01, #2
1a25c     32 A9 02 F6 | 	mov	local02, objptr
1a260     16 00 00 FF 
1a264     BC A8 06 F1 | 	add	local02, ##11452
1a268     54 A7 02 F1 | 	add	local01, local02
1a26c     E7 92 02 F6 | 	mov	arg01, fp
1a270     94 36 BF FD | 	call	#_converttofloat
1a274     10 A6 06 F1 | 	add	local01, #16
1a278     53 7B 62 FC | 	wrlong	result1, local01
1a27c     E7 F0 03 F6 | 	mov	ptra, fp
1a280     F2 00 A0 FD | 	call	#popregs_
1a284                 | _do_setpan_ret
1a284     2D 00 64 FD | 	ret
1a288                 | 
1a288                 | ' 
1a288                 | ' ' ------------------ setsustain
1a288                 | ' 
1a288                 | ' sub do_setsustain
1a288                 | _do_setsustain
1a288     02 CA 05 F6 | 	mov	COUNT_, #2
1a28c     E8 00 A0 FD | 	call	#pushregs_
1a290     18 F0 07 F1 | 	add	ptra, #24
1a294     D8 33 BF FD | 	call	#_pop
1a298     3D 93 02 F6 | 	mov	arg01, result1
1a29c     3E A7 02 F6 | 	mov	local01, result2
1a2a0     3F A9 02 F6 | 	mov	local02, result3
1a2a4     E7 92 62 FC | 	wrlong	arg01, fp
1a2a8     04 CE 05 F1 | 	add	fp, #4
1a2ac     E7 A6 62 FC | 	wrlong	local01, fp
1a2b0     04 CE 05 F1 | 	add	fp, #4
1a2b4     E7 A8 62 FC | 	wrlong	local02, fp
1a2b8     08 CE 85 F1 | 	sub	fp, #8
1a2bc     B0 33 BF FD | 	call	#_pop
1a2c0     3D A9 02 F6 | 	mov	local02, result1
1a2c4     0C CE 05 F1 | 	add	fp, #12
1a2c8     E7 A8 62 FC | 	wrlong	local02, fp
1a2cc     04 CE 05 F1 | 	add	fp, #4
1a2d0     E7 7C 62 FC | 	wrlong	result2, fp
1a2d4     04 CE 05 F1 | 	add	fp, #4
1a2d8     E7 7E 62 FC | 	wrlong	result3, fp
1a2dc     08 CE 85 F1 | 	sub	fp, #8
1a2e0     E7 92 02 F6 | 	mov	arg01, fp
1a2e4     0C CE 85 F1 | 	sub	fp, #12
1a2e8     60 35 BF FD | 	call	#_converttoint
1a2ec     3D A7 02 F6 | 	mov	local01, result1
1a2f0     03 A6 66 F0 | 	shl	local01, #3
1a2f4     3D A7 82 F1 | 	sub	local01, result1
1a2f8     02 A6 66 F0 | 	shl	local01, #2
1a2fc     32 A9 02 F6 | 	mov	local02, objptr
1a300     16 00 00 FF 
1a304     BC A8 06 F1 | 	add	local02, ##11452
1a308     54 A7 02 F1 | 	add	local01, local02
1a30c     E7 92 02 F6 | 	mov	arg01, fp
1a310     38 35 BF FD | 	call	#_converttoint
1a314     14 A6 06 F1 | 	add	local01, #20
1a318     53 7B 52 FC | 	wrword	result1, local01
1a31c     E7 F0 03 F6 | 	mov	ptra, fp
1a320     F2 00 A0 FD | 	call	#popregs_
1a324                 | _do_setsustain_ret
1a324     2D 00 64 FD | 	ret
1a328                 | 
1a328                 | ' 
1a328                 | ' ' ------------------ setvol
1a328                 | ' 
1a328                 | ' sub do_setvol
1a328                 | _do_setvol
1a328     02 CA 05 F6 | 	mov	COUNT_, #2
1a32c     E8 00 A0 FD | 	call	#pushregs_
1a330     18 F0 07 F1 | 	add	ptra, #24
1a334     38 33 BF FD | 	call	#_pop
1a338     3D 93 02 F6 | 	mov	arg01, result1
1a33c     3E A7 02 F6 | 	mov	local01, result2
1a340     3F A9 02 F6 | 	mov	local02, result3
1a344     E7 92 62 FC | 	wrlong	arg01, fp
1a348     04 CE 05 F1 | 	add	fp, #4
1a34c     E7 A6 62 FC | 	wrlong	local01, fp
1a350     04 CE 05 F1 | 	add	fp, #4
1a354     E7 A8 62 FC | 	wrlong	local02, fp
1a358     08 CE 85 F1 | 	sub	fp, #8
1a35c     10 33 BF FD | 	call	#_pop
1a360     3D A9 02 F6 | 	mov	local02, result1
1a364     0C CE 05 F1 | 	add	fp, #12
1a368     E7 A8 62 FC | 	wrlong	local02, fp
1a36c     04 CE 05 F1 | 	add	fp, #4
1a370     E7 7C 62 FC | 	wrlong	result2, fp
1a374     04 CE 05 F1 | 	add	fp, #4
1a378     E7 7E 62 FC | 	wrlong	result3, fp
1a37c     08 CE 85 F1 | 	sub	fp, #8
1a380     E7 92 02 F6 | 	mov	arg01, fp
1a384     0C CE 85 F1 | 	sub	fp, #12
1a388     C0 34 BF FD | 	call	#_converttoint
1a38c     3D A7 02 F6 | 	mov	local01, result1
1a390     03 A6 66 F0 | 	shl	local01, #3
1a394     3D A7 82 F1 | 	sub	local01, result1
1a398     02 A6 66 F0 | 	shl	local01, #2
1a39c     32 A9 02 F6 | 	mov	local02, objptr
1a3a0     16 00 00 FF 
1a3a4     BC A8 06 F1 | 	add	local02, ##11452
1a3a8     54 A7 02 F1 | 	add	local01, local02
1a3ac     E7 92 02 F6 | 	mov	arg01, fp
1a3b0     54 35 BF FD | 	call	#_converttofloat
1a3b4     0C A6 06 F1 | 	add	local01, #12
1a3b8     53 7B 62 FC | 	wrlong	result1, local01
1a3bc     E7 F0 03 F6 | 	mov	ptra, fp
1a3c0     F2 00 A0 FD | 	call	#popregs_
1a3c4                 | _do_setvol_ret
1a3c4     2D 00 64 FD | 	ret
1a3c8                 | 
1a3c8                 | ' 
1a3c8                 | ' ' ------------------ setwave
1a3c8                 | ' 
1a3c8                 | ' sub do_setwave
1a3c8                 | _do_setwave
1a3c8     02 CA 05 F6 | 	mov	COUNT_, #2
1a3cc     E8 00 A0 FD | 	call	#pushregs_
1a3d0     18 F0 07 F1 | 	add	ptra, #24
1a3d4     98 32 BF FD | 	call	#_pop
1a3d8     3D 93 02 F6 | 	mov	arg01, result1
1a3dc     3E A7 02 F6 | 	mov	local01, result2
1a3e0     3F A9 02 F6 | 	mov	local02, result3
1a3e4     E7 92 62 FC | 	wrlong	arg01, fp
1a3e8     04 CE 05 F1 | 	add	fp, #4
1a3ec     E7 A6 62 FC | 	wrlong	local01, fp
1a3f0     04 CE 05 F1 | 	add	fp, #4
1a3f4     E7 A8 62 FC | 	wrlong	local02, fp
1a3f8     08 CE 85 F1 | 	sub	fp, #8
1a3fc     70 32 BF FD | 	call	#_pop
1a400     3D A9 02 F6 | 	mov	local02, result1
1a404     0C CE 05 F1 | 	add	fp, #12
1a408     E7 A8 62 FC | 	wrlong	local02, fp
1a40c     04 CE 05 F1 | 	add	fp, #4
1a410     E7 7C 62 FC | 	wrlong	result2, fp
1a414     04 CE 05 F1 | 	add	fp, #4
1a418     E7 7E 62 FC | 	wrlong	result3, fp
1a41c     08 CE 85 F1 | 	sub	fp, #8
1a420     E7 92 02 F6 | 	mov	arg01, fp
1a424     0C CE 85 F1 | 	sub	fp, #12
1a428     20 34 BF FD | 	call	#_converttoint
1a42c     3D A7 02 F6 | 	mov	local01, result1
1a430     03 A6 66 F0 | 	shl	local01, #3
1a434     3D A7 82 F1 | 	sub	local01, result1
1a438     02 A6 66 F0 | 	shl	local01, #2
1a43c     32 A9 02 F6 | 	mov	local02, objptr
1a440     16 00 00 FF 
1a444     BC A8 06 F1 | 	add	local02, ##11452
1a448     54 A7 02 F1 | 	add	local01, local02
1a44c     E7 92 02 F6 | 	mov	arg01, fp
1a450     F8 33 BF FD | 	call	#_converttoint
1a454     04 A6 06 F1 | 	add	local01, #4
1a458     53 7B 42 FC | 	wrbyte	result1, local01
1a45c     E7 F0 03 F6 | 	mov	ptra, fp
1a460     F2 00 A0 FD | 	call	#popregs_
1a464                 | _do_setwave_ret
1a464     2D 00 64 FD | 	ret
1a468                 | 
1a468                 | ' 
1a468                 | ' ' ------------------ shutup
1a468                 | ' 
1a468                 | ' sub do_shutup
1a468                 | _do_shutup
1a468     03 CA 05 F6 | 	mov	COUNT_, #3
1a46c     E8 00 A0 FD | 	call	#pushregs_
1a470     18 F0 07 F1 | 	add	ptra, #24
1a474     4C 00 00 FF 
1a478     24 64 06 F1 | 	add	objptr, ##38948
1a47c     32 A7 02 FB | 	rdlong	local01, objptr
1a480     53 A9 02 F6 | 	mov	local02, local01
1a484     01 A8 66 F0 | 	shl	local02, #1
1a488     53 A9 02 F1 | 	add	local02, local01
1a48c     02 A8 66 F0 | 	shl	local02, #2
1a490     03 00 00 FF 
1a494     04 64 86 F1 | 	sub	objptr, ##1540
1a498     32 A9 02 F1 | 	add	local02, objptr
1a49c     54 A9 0A FB | 	rdlong	local02, local02 wz
1a4a0                 | ' 
1a4a0                 | ' numpar=compiledline(lineptr_e).result.uresult
1a4a0                 | ' if numpar=0 then
1a4a0     49 00 00 FF 
1a4a4     20 64 86 F1 | 	sub	objptr, ##37408
1a4a8     40 00 90 5D |  if_ne	jmp	#LR__2192
1a4ac                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1a4ac     00 AA 06 F6 | 	mov	local03, #0
1a4b0     38 00 00 FF 
1a4b4     B4 65 06 F1 | 	add	objptr, ##29108
1a4b8     D7 12 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
1a4bc                 | LR__2190
1a4bc     32 93 02 FB | 	rdlong	arg01, objptr
1a4c0     55 A9 02 F6 | 	mov	local02, local03
1a4c4     06 A8 66 F0 | 	shl	local02, #6
1a4c8     54 93 02 F1 | 	add	arg01, local02
1a4cc     14 92 06 F1 | 	add	arg01, #20
1a4d0     49 01 58 FC | 	wrword	#0, arg01
1a4d4     01 AA 06 F1 | 	add	local03, #1
1a4d8     08 AA 56 F2 | 	cmps	local03, #8 wc
1a4dc     DC FF 9F CD |  if_b	jmp	#LR__2190
1a4e0                 | LR__2191
1a4e0     38 00 00 FF 
1a4e4     B4 65 86 F1 | 	sub	objptr, ##29108
1a4e8     58 00 90 FD | 	jmp	#LR__2193
1a4ec                 | LR__2192
1a4ec     80 31 BF FD | 	call	#_pop
1a4f0     3F A7 02 F6 | 	mov	local01, result3
1a4f4     E7 7A 62 FC | 	wrlong	result1, fp
1a4f8     04 CE 05 F1 | 	add	fp, #4
1a4fc     E7 7C 62 FC | 	wrlong	result2, fp
1a500     04 CE 05 F1 | 	add	fp, #4
1a504     E7 A6 62 FC | 	wrlong	local01, fp
1a508     08 CE 85 F1 | 	sub	fp, #8
1a50c     E7 92 02 F6 | 	mov	arg01, fp
1a510     38 33 BF FD | 	call	#_converttoint
1a514     3D AB 52 F6 | 	abs	local03, result1 wc
1a518     07 AA 06 F5 | 	and	local03, #7
1a51c     55 A9 82 F6 | 	negc	local02, local03
1a520     38 00 00 FF 
1a524     B4 65 06 F1 | 	add	objptr, ##29108
1a528     32 93 02 FB | 	rdlong	arg01, objptr
1a52c     38 00 00 FF 
1a530     B4 65 86 F1 | 	sub	objptr, ##29108
1a534     06 A8 66 F0 | 	shl	local02, #6
1a538     54 93 02 F1 | 	add	arg01, local02
1a53c     14 92 06 F1 | 	add	arg01, #20
1a540     49 01 58 FC | 	wrword	#0, arg01
1a544                 | LR__2193
1a544     E7 F0 03 F6 | 	mov	ptra, fp
1a548     F2 00 A0 FD | 	call	#popregs_
1a54c                 | _do_shutup_ret
1a54c     2D 00 64 FD | 	ret
1a550                 | 
1a550                 | ' 
1a550                 | ' ' ------------------ sin
1a550                 | ' 
1a550                 | ' sub do_sin
1a550                 | _do_sin
1a550     01 CA 05 F6 | 	mov	COUNT_, #1
1a554     E8 00 A0 FD | 	call	#pushregs_
1a558     10 F0 07 F1 | 	add	ptra, #16
1a55c     4C 00 00 FF 
1a560     24 64 06 F1 | 	add	objptr, ##38948
1a564     32 97 02 FB | 	rdlong	arg03, objptr
1a568     4B 95 02 F6 | 	mov	arg02, arg03
1a56c     01 94 66 F0 | 	shl	arg02, #1
1a570     4B 95 02 F1 | 	add	arg02, arg03
1a574     02 94 66 F0 | 	shl	arg02, #2
1a578     03 00 00 FF 
1a57c     04 64 86 F1 | 	sub	objptr, ##1540
1a580     32 95 02 F1 | 	add	arg02, objptr
1a584     4A 97 02 FB | 	rdlong	arg03, arg02
1a588                 | ' 
1a588                 | ' numpar=compiledline(lineptr_e).result.uresult
1a588                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1a588     02 96 16 F2 | 	cmp	arg03, #2 wc
1a58c     49 00 00 FF 
1a590     20 64 86 F1 | 	sub	objptr, ##37408
1a594     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1a598     40 00 90 4D |  if_c_and_nz	jmp	#LR__2200
1a59c     00 92 06 F6 | 	mov	arg01, #0
1a5a0     70 F7 B0 FD | 	call	#__system___getiolock_0622
1a5a4     3D 93 02 F6 | 	mov	arg01, result1
1a5a8     E4 A1 B0 FD | 	call	#__system___lockmem
1a5ac     97 01 00 FF 
1a5b0     FE 94 06 F6 | 	mov	arg02, ##@LR__6080
1a5b4     00 92 06 F6 | 	mov	arg01, #0
1a5b8     00 96 06 F6 | 	mov	arg03, #0
1a5bc     C4 AE B0 FD | 	call	#__system___basic_print_string
1a5c0     00 92 06 F6 | 	mov	arg01, #0
1a5c4     4C F7 B0 FD | 	call	#__system___getiolock_0622
1a5c8     3D 01 68 FC | 	wrlong	#0, result1
1a5cc     27 92 06 F6 | 	mov	arg01, #39
1a5d0     00 94 06 F6 | 	mov	arg02, #0
1a5d4     C0 63 B0 FD | 	call	#_printerror
1a5d8     64 00 90 FD | 	jmp	#LR__2201
1a5dc                 | LR__2200
1a5dc     90 30 BF FD | 	call	#_pop
1a5e0     E7 7A 62 FC | 	wrlong	result1, fp
1a5e4     04 CE 05 F1 | 	add	fp, #4
1a5e8     E7 7C 62 FC | 	wrlong	result2, fp
1a5ec     04 CE 05 F1 | 	add	fp, #4
1a5f0     E7 7E 62 FC | 	wrlong	result3, fp
1a5f4     08 CE 85 F1 | 	sub	fp, #8
1a5f8     54 00 00 FF 
1a5fc     84 64 06 F1 | 	add	objptr, ##43140
1a600     32 A7 02 FB | 	rdlong	local01, objptr
1a604     54 00 00 FF 
1a608     84 64 86 F1 | 	sub	objptr, ##43140
1a60c     E7 92 02 F6 | 	mov	arg01, fp
1a610     F4 32 BF FD | 	call	#_converttofloat
1a614     3D 95 02 F6 | 	mov	arg02, result1
1a618     53 93 02 F6 | 	mov	arg01, local01
1a61c     40 C8 B0 FD | 	call	#__system___float_mul
1a620     3D 93 02 F6 | 	mov	arg01, result1
1a624     A8 D1 B0 FD | 	call	#__system____builtin_sinf
1a628     E7 7A 62 FC | 	wrlong	result1, fp
1a62c     08 CE 05 F1 | 	add	fp, #8
1a630     E7 3C 68 FC | 	wrlong	#30, fp
1a634     08 CE 85 F1 | 	sub	fp, #8
1a638     E7 92 02 F6 | 	mov	arg01, fp
1a63c     C0 30 BF FD | 	call	#_push
1a640                 | LR__2201
1a640     E7 F0 03 F6 | 	mov	ptra, fp
1a644     F2 00 A0 FD | 	call	#popregs_
1a648                 | _do_sin_ret
1a648     2D 00 64 FD | 	ret
1a64c                 | 
1a64c                 | ' 
1a64c                 | ' ' ------------------ skip
1a64c                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1a64c                 | ' 
1a64c                 | ' sub do_skip
1a64c                 | _do_skip
1a64c     4C 00 00 FF 
1a650     24 64 06 F1 | 	add	objptr, ##38948
1a654     32 81 02 FB | 	rdlong	_var01, objptr
1a658     40 83 02 F6 | 	mov	_var02, _var01
1a65c     01 82 66 F0 | 	shl	_var02, #1
1a660     40 83 02 F1 | 	add	_var02, _var01
1a664     02 82 66 F0 | 	shl	_var02, #2
1a668     03 00 00 FF 
1a66c     04 64 86 F1 | 	sub	objptr, ##1540
1a670     32 83 02 F1 | 	add	_var02, objptr
1a674     41 83 02 FB | 	rdlong	_var02, _var02
1a678     01 82 86 F1 | 	sub	_var02, #1
1a67c     03 00 00 FF 
1a680     04 64 06 F1 | 	add	objptr, ##1540
1a684     32 83 62 FC | 	wrlong	_var02, objptr
1a688     4C 00 00 FF 
1a68c     24 64 86 F1 | 	sub	objptr, ##38948
1a690                 | _do_skip_ret
1a690     2D 00 64 FD | 	ret
1a694                 | 
1a694                 | ' 
1a694                 | ' ' ------------------ sprite
1a694                 | ' 
1a694                 | ' sub do_sprite
1a694                 | _do_sprite
1a694     02 CA 05 F6 | 	mov	COUNT_, #2
1a698     E8 00 A0 FD | 	call	#pushregs_
1a69c     30 F0 07 F1 | 	add	ptra, #48
1a6a0     CC 2F BF FD | 	call	#_pop
1a6a4     3D 95 02 F6 | 	mov	arg02, result1
1a6a8     3E 97 02 F6 | 	mov	arg03, result2
1a6ac     3F 93 02 F6 | 	mov	arg01, result3
1a6b0     18 CE 05 F1 | 	add	fp, #24
1a6b4     E7 94 62 FC | 	wrlong	arg02, fp
1a6b8     04 CE 05 F1 | 	add	fp, #4
1a6bc     E7 96 62 FC | 	wrlong	arg03, fp
1a6c0     04 CE 05 F1 | 	add	fp, #4
1a6c4     E7 92 62 FC | 	wrlong	arg01, fp
1a6c8     20 CE 85 F1 | 	sub	fp, #32
1a6cc     A0 2F BF FD | 	call	#_pop
1a6d0     3D 95 02 F6 | 	mov	arg02, result1
1a6d4     3E 97 02 F6 | 	mov	arg03, result2
1a6d8     3F 93 02 F6 | 	mov	arg01, result3
1a6dc     0C CE 05 F1 | 	add	fp, #12
1a6e0     E7 94 62 FC | 	wrlong	arg02, fp
1a6e4     04 CE 05 F1 | 	add	fp, #4
1a6e8     E7 96 62 FC | 	wrlong	arg03, fp
1a6ec     04 CE 05 F1 | 	add	fp, #4
1a6f0     E7 92 62 FC | 	wrlong	arg01, fp
1a6f4     14 CE 85 F1 | 	sub	fp, #20
1a6f8     74 2F BF FD | 	call	#_pop
1a6fc     3F 95 02 F6 | 	mov	arg02, result3
1a700     E7 7A 62 FC | 	wrlong	result1, fp
1a704     04 CE 05 F1 | 	add	fp, #4
1a708     E7 7C 62 FC | 	wrlong	result2, fp
1a70c     04 CE 05 F1 | 	add	fp, #4
1a710     E7 94 62 FC | 	wrlong	arg02, fp
1a714     08 CE 85 F1 | 	sub	fp, #8
1a718     E7 92 02 F6 | 	mov	arg01, fp
1a71c     2C 31 BF FD | 	call	#_converttoint
1a720     3D A7 02 F6 | 	mov	local01, result1
1a724     E7 92 02 F6 | 	mov	arg01, fp
1a728     0C 92 06 F1 | 	add	arg01, #12
1a72c     1C 31 BF FD | 	call	#_converttoint
1a730     3D A9 02 F6 | 	mov	local02, result1
1a734     E7 92 02 F6 | 	mov	arg01, fp
1a738     18 92 06 F1 | 	add	arg01, #24
1a73c     0C 31 BF FD | 	call	#_converttoint
1a740     3D 97 02 F6 | 	mov	arg03, result1
1a744     53 93 02 F6 | 	mov	arg01, local01
1a748     54 95 02 F6 | 	mov	arg02, local02
1a74c     40 72 B0 FD | 	call	#_hg010b_spin2_setspritepos
1a750     E7 F0 03 F6 | 	mov	ptra, fp
1a754     F2 00 A0 FD | 	call	#popregs_
1a758                 | _do_sprite_ret
1a758     2D 00 64 FD | 	ret
1a75c                 | 
1a75c                 | ' 
1a75c                 | ' ' ------------------ sqr
1a75c                 | ' 
1a75c                 | ' sub do_sqr
1a75c                 | _do_sqr
1a75c     00 CA 05 F6 | 	mov	COUNT_, #0
1a760     E8 00 A0 FD | 	call	#pushregs_
1a764     10 F0 07 F1 | 	add	ptra, #16
1a768     4C 00 00 FF 
1a76c     24 64 06 F1 | 	add	objptr, ##38948
1a770     32 97 02 FB | 	rdlong	arg03, objptr
1a774     4B 95 02 F6 | 	mov	arg02, arg03
1a778     01 94 66 F0 | 	shl	arg02, #1
1a77c     4B 95 02 F1 | 	add	arg02, arg03
1a780     02 94 66 F0 | 	shl	arg02, #2
1a784     03 00 00 FF 
1a788     04 64 86 F1 | 	sub	objptr, ##1540
1a78c     32 95 02 F1 | 	add	arg02, objptr
1a790     4A 97 02 FB | 	rdlong	arg03, arg02
1a794                 | ' 
1a794                 | ' numpar=compiledline(lineptr_e).result.uresult
1a794                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1a794     02 96 16 F2 | 	cmp	arg03, #2 wc
1a798     49 00 00 FF 
1a79c     20 64 86 F1 | 	sub	objptr, ##37408
1a7a0     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1a7a4     40 00 90 4D |  if_c_and_nz	jmp	#LR__2210
1a7a8     00 92 06 F6 | 	mov	arg01, #0
1a7ac     64 F5 B0 FD | 	call	#__system___getiolock_0622
1a7b0     3D 93 02 F6 | 	mov	arg01, result1
1a7b4     D8 9F B0 FD | 	call	#__system___lockmem
1a7b8     97 01 00 FF 
1a7bc     04 95 06 F6 | 	mov	arg02, ##@LR__6081
1a7c0     00 92 06 F6 | 	mov	arg01, #0
1a7c4     00 96 06 F6 | 	mov	arg03, #0
1a7c8     B8 AC B0 FD | 	call	#__system___basic_print_string
1a7cc     00 92 06 F6 | 	mov	arg01, #0
1a7d0     40 F5 B0 FD | 	call	#__system___getiolock_0622
1a7d4     3D 01 68 FC | 	wrlong	#0, result1
1a7d8     27 92 06 F6 | 	mov	arg01, #39
1a7dc     00 94 06 F6 | 	mov	arg02, #0
1a7e0     B4 61 B0 FD | 	call	#_printerror
1a7e4     48 00 90 FD | 	jmp	#LR__2211
1a7e8                 | LR__2210
1a7e8     84 2E BF FD | 	call	#_pop
1a7ec     3F 97 02 F6 | 	mov	arg03, result3
1a7f0     E7 7A 62 FC | 	wrlong	result1, fp
1a7f4     04 CE 05 F1 | 	add	fp, #4
1a7f8     E7 7C 62 FC | 	wrlong	result2, fp
1a7fc     04 CE 05 F1 | 	add	fp, #4
1a800     E7 96 62 FC | 	wrlong	arg03, fp
1a804     08 CE 85 F1 | 	sub	fp, #8
1a808     E7 92 02 F6 | 	mov	arg01, fp
1a80c     F8 30 BF FD | 	call	#_converttofloat
1a810     3D 93 02 F6 | 	mov	arg01, result1
1a814     70 C5 B0 FD | 	call	#__system___float_sqrt
1a818     E7 7A 62 FC | 	wrlong	result1, fp
1a81c     08 CE 05 F1 | 	add	fp, #8
1a820     E7 3C 68 FC | 	wrlong	#30, fp
1a824     08 CE 85 F1 | 	sub	fp, #8
1a828     E7 92 02 F6 | 	mov	arg01, fp
1a82c     D0 2E BF FD | 	call	#_push
1a830                 | LR__2211
1a830     E7 F0 03 F6 | 	mov	ptra, fp
1a834     F2 00 A0 FD | 	call	#popregs_
1a838                 | _do_sqr_ret
1a838     2D 00 64 FD | 	ret
1a83c                 | 
1a83c                 | ' 
1a83c                 | ' ' ------------------ stick
1a83c                 | ' 
1a83c                 | ' sub do_stick
1a83c                 | _do_stick
1a83c     02 CA 05 F6 | 	mov	COUNT_, #2
1a840     E8 00 A0 FD | 	call	#pushregs_
1a844     10 F0 07 F1 | 	add	ptra, #16
1a848     4C 00 00 FF 
1a84c     24 64 06 F1 | 	add	objptr, ##38948
1a850     32 A7 02 FB | 	rdlong	local01, objptr
1a854     53 97 02 F6 | 	mov	arg03, local01
1a858     01 96 66 F0 | 	shl	arg03, #1
1a85c     53 97 02 F1 | 	add	arg03, local01
1a860     02 96 66 F0 | 	shl	arg03, #2
1a864     03 00 00 FF 
1a868     04 64 86 F1 | 	sub	objptr, ##1540
1a86c     32 97 02 F1 | 	add	arg03, objptr
1a870     4B A9 02 FB | 	rdlong	local02, arg03
1a874                 | ' 
1a874                 | ' numpar=compiledline(lineptr_e).result.uresult
1a874                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1a874     02 A8 16 F2 | 	cmp	local02, #2 wc
1a878     49 00 00 FF 
1a87c     20 64 86 F1 | 	sub	objptr, ##37408
1a880     40 00 90 CD |  if_b	jmp	#LR__2220
1a884     00 92 06 F6 | 	mov	arg01, #0
1a888     88 F4 B0 FD | 	call	#__system___getiolock_0622
1a88c     3D 93 02 F6 | 	mov	arg01, result1
1a890     FC 9E B0 FD | 	call	#__system___lockmem
1a894     97 01 00 FF 
1a898     0A 95 06 F6 | 	mov	arg02, ##@LR__6082
1a89c     00 92 06 F6 | 	mov	arg01, #0
1a8a0     00 96 06 F6 | 	mov	arg03, #0
1a8a4     DC AB B0 FD | 	call	#__system___basic_print_string
1a8a8     00 92 06 F6 | 	mov	arg01, #0
1a8ac     64 F4 B0 FD | 	call	#__system___getiolock_0622
1a8b0     3D 01 68 FC | 	wrlong	#0, result1
1a8b4     27 92 06 F6 | 	mov	arg01, #39
1a8b8     00 94 06 F6 | 	mov	arg02, #0
1a8bc     D8 60 B0 FD | 	call	#_printerror
1a8c0     E8 00 90 FD | 	jmp	#LR__2224
1a8c4                 | LR__2220
1a8c4                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1a8c4     00 A8 0E F2 | 	cmp	local02, #0 wz
1a8c8     30 00 90 5D |  if_ne	jmp	#LR__2221
1a8cc     53 00 00 FF 
1a8d0     F8 65 06 F1 | 	add	objptr, ##43000
1a8d4     32 A9 02 FB | 	rdlong	local02, objptr
1a8d8     53 00 00 FF 
1a8dc     F8 65 86 F1 | 	sub	objptr, ##43000
1a8e0     E7 A8 62 FC | 	wrlong	local02, fp
1a8e4     08 CE 05 F1 | 	add	fp, #8
1a8e8     E7 3A 68 FC | 	wrlong	#29, fp
1a8ec     08 CE 85 F1 | 	sub	fp, #8
1a8f0     E7 92 02 F6 | 	mov	arg01, fp
1a8f4     08 2E BF FD | 	call	#_push
1a8f8     B0 00 90 FD | 	jmp	#LR__2224
1a8fc                 | LR__2221
1a8fc     70 2D BF FD | 	call	#_pop
1a900     E7 7A 62 FC | 	wrlong	result1, fp
1a904     04 CE 05 F1 | 	add	fp, #4
1a908     E7 7C 62 FC | 	wrlong	result2, fp
1a90c     04 CE 05 F1 | 	add	fp, #4
1a910     E7 7E 62 FC | 	wrlong	result3, fp
1a914                 | ' t1=pop()
1a914                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1a914     08 CE 85 F1 | 	sub	fp, #8
1a918     1C 7E 0E F2 | 	cmp	result3, #28 wz
1a91c     08 CE 05 51 |  if_ne	add	fp, #8
1a920     E7 A6 02 5B |  if_ne	rdlong	local01, fp
1a924     08 CE 85 51 |  if_ne	sub	fp, #8
1a928     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
1a92c     70 00 90 5D |  if_ne	jmp	#LR__2223
1a930     E7 A6 02 FB | 	rdlong	local01, fp
1a934     54 00 00 FF 
1a938     E4 64 06 F1 | 	add	objptr, ##43236
1a93c     32 A7 62 FC | 	wrlong	local01, objptr
1a940                 | '   q=t1.result.uresult
1a940                 | '   if q<7 then 
1a940     54 00 00 FF 
1a944     E4 64 86 F1 | 	sub	objptr, ##43236
1a948     07 A6 56 F2 | 	cmps	local01, #7 wc
1a94c     40 00 90 3D |  if_ae	jmp	#LR__2222
1a950     54 00 00 FF 
1a954     E4 64 06 F1 | 	add	objptr, ##43236
1a958     32 A7 02 FB | 	rdlong	local01, objptr
1a95c     02 A6 66 F0 | 	shl	local01, #2
1a960     EC 64 86 F1 | 	sub	objptr, #236
1a964     32 A7 02 F1 | 	add	local01, objptr
1a968     53 A9 02 FB | 	rdlong	local02, local01
1a96c     E7 A8 62 FC | 	wrlong	local02, fp
1a970     08 CE 05 F1 | 	add	fp, #8
1a974     E7 3A 68 FC | 	wrlong	#29, fp
1a978     08 CE 85 F1 | 	sub	fp, #8
1a97c     E7 92 02 F6 | 	mov	arg01, fp
1a980     53 00 00 FF 
1a984     F8 65 86 F1 | 	sub	objptr, ##43000
1a988     74 2D BF FD | 	call	#_push
1a98c                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1a98c     1C 00 90 FD | 	jmp	#LR__2224
1a990                 | LR__2222
1a990     29 92 06 F6 | 	mov	arg01, #41
1a994     00 94 06 F6 | 	mov	arg02, #0
1a998     FC 5F B0 FD | 	call	#_printerror
1a99c                 | '      printerror(41) : return
1a99c     0C 00 90 FD | 	jmp	#LR__2224
1a9a0                 | LR__2223
1a9a0     29 92 06 F6 | 	mov	arg01, #41
1a9a4     00 94 06 F6 | 	mov	arg02, #0
1a9a8     EC 5F B0 FD | 	call	#_printerror
1a9ac                 | LR__2224
1a9ac     E7 F0 03 F6 | 	mov	ptra, fp
1a9b0     F2 00 A0 FD | 	call	#popregs_
1a9b4                 | _do_stick_ret
1a9b4     2D 00 64 FD | 	ret
1a9b8                 | 
1a9b8                 | ' 
1a9b8                 | ' 
1a9b8                 | ' sub do_str
1a9b8                 | _do_str
1a9b8     02 CA 05 F6 | 	mov	COUNT_, #2
1a9bc     E8 00 A0 FD | 	call	#pushregs_
1a9c0     14 F0 07 F1 | 	add	ptra, #20
1a9c4     4C 00 00 FF 
1a9c8     24 64 06 F1 | 	add	objptr, ##38948
1a9cc     32 97 02 FB | 	rdlong	arg03, objptr
1a9d0     4B 95 02 F6 | 	mov	arg02, arg03
1a9d4     01 94 66 F0 | 	shl	arg02, #1
1a9d8     4B 95 02 F1 | 	add	arg02, arg03
1a9dc     02 94 66 F0 | 	shl	arg02, #2
1a9e0     03 00 00 FF 
1a9e4     04 64 86 F1 | 	sub	objptr, ##1540
1a9e8     32 95 02 F1 | 	add	arg02, objptr
1a9ec     4A 97 02 FB | 	rdlong	arg03, arg02
1a9f0                 | ' 
1a9f0                 | ' numpar=compiledline(lineptr_e).result.uresult
1a9f0                 | ' if numpar<>1 then print "str$: "; : printerror(39) : return
1a9f0     01 96 0E F2 | 	cmp	arg03, #1 wz
1a9f4     49 00 00 FF 
1a9f8     20 64 86 F1 | 	sub	objptr, ##37408
1a9fc     40 00 90 AD |  if_e	jmp	#LR__2230
1aa00     00 92 06 F6 | 	mov	arg01, #0
1aa04     0C F3 B0 FD | 	call	#__system___getiolock_0622
1aa08     3D 93 02 F6 | 	mov	arg01, result1
1aa0c     80 9D B0 FD | 	call	#__system___lockmem
1aa10     97 01 00 FF 
1aa14     12 95 06 F6 | 	mov	arg02, ##@LR__6083
1aa18     00 92 06 F6 | 	mov	arg01, #0
1aa1c     00 96 06 F6 | 	mov	arg03, #0
1aa20     60 AA B0 FD | 	call	#__system___basic_print_string
1aa24     00 92 06 F6 | 	mov	arg01, #0
1aa28     E8 F2 B0 FD | 	call	#__system___getiolock_0622
1aa2c     3D 01 68 FC | 	wrlong	#0, result1
1aa30     27 92 06 F6 | 	mov	arg01, #39
1aa34     00 94 06 F6 | 	mov	arg02, #0
1aa38     5C 5F B0 FD | 	call	#_printerror
1aa3c     F0 00 90 FD | 	jmp	#LR__2239
1aa40                 | LR__2230
1aa40     2C 2C BF FD | 	call	#_pop
1aa44     3F 97 02 F6 | 	mov	arg03, result3
1aa48     E7 7A 62 FC | 	wrlong	result1, fp
1aa4c     04 CE 05 F1 | 	add	fp, #4
1aa50     E7 7C 62 FC | 	wrlong	result2, fp
1aa54     04 CE 05 F1 | 	add	fp, #4
1aa58     E7 96 62 FC | 	wrlong	arg03, fp
1aa5c                 | ' 
1aa5c                 | ' t1=pop()
1aa5c                 | ' if t1.result_type=result_int then 
1aa5c     08 CE 85 F1 | 	sub	fp, #8
1aa60     1C 96 0E F2 | 	cmp	arg03, #28 wz
1aa64     28 00 90 5D |  if_ne	jmp	#LR__2231
1aa68     E7 92 02 FB | 	rdlong	arg01, fp
1aa6c     49 93 52 F6 | 	abs	arg01, arg01 wc
1aa70     1F A6 C6 C9 |  if_b	decod	local01, #31
1aa74     00 A6 06 36 |  if_ae	mov	local01, #0
1aa78     E0 BF B0 FD | 	call	#__system___float_fromuns
1aa7c     53 7B 62 F5 | 	xor	result1, local01
1aa80     3D 93 02 F6 | 	mov	arg01, result1
1aa84     A8 B7 B0 FD | 	call	#__system__str_S
1aa88     3D A9 02 F6 | 	mov	local02, result1
1aa8c     88 00 90 FD | 	jmp	#LR__2238
1aa90                 | LR__2231
1aa90     08 CE 05 F1 | 	add	fp, #8
1aa94     E7 96 02 FB | 	rdlong	arg03, fp
1aa98     08 CE 85 F1 | 	sub	fp, #8
1aa9c     1D 96 0E F2 | 	cmp	arg03, #29 wz
1aaa0     18 00 90 5D |  if_ne	jmp	#LR__2232
1aaa4     E7 92 02 FB | 	rdlong	arg01, fp
1aaa8     B0 BF B0 FD | 	call	#__system___float_fromuns
1aaac     3D 93 02 F6 | 	mov	arg01, result1
1aab0     7C B7 B0 FD | 	call	#__system__str_S
1aab4     3D A9 02 F6 | 	mov	local02, result1
1aab8     5C 00 90 FD | 	jmp	#LR__2237
1aabc                 | LR__2232
1aabc     08 CE 05 F1 | 	add	fp, #8
1aac0     E7 96 02 FB | 	rdlong	arg03, fp
1aac4     08 CE 85 F1 | 	sub	fp, #8
1aac8     1E 96 0E F2 | 	cmp	arg03, #30 wz
1aacc     10 00 90 5D |  if_ne	jmp	#LR__2233
1aad0     E7 92 02 FB | 	rdlong	arg01, fp
1aad4     58 B7 B0 FD | 	call	#__system__str_S
1aad8     3D A9 02 F6 | 	mov	local02, result1
1aadc     38 00 90 FD | 	jmp	#LR__2236
1aae0                 | LR__2233
1aae0     08 CE 05 F1 | 	add	fp, #8
1aae4     E7 96 02 FB | 	rdlong	arg03, fp
1aae8     08 CE 85 F1 | 	sub	fp, #8
1aaec     2B 96 0E F2 | 	cmp	arg03, #43 wz
1aaf0     10 00 90 5D |  if_ne	jmp	#LR__2234
1aaf4     E7 92 02 FB | 	rdlong	arg01, fp
1aaf8     E4 2C BF FD | 	call	#_convertstring
1aafc     3D A9 02 F6 | 	mov	local02, result1
1ab00     14 00 90 FD | 	jmp	#LR__2235
1ab04                 | LR__2234
1ab04     08 CE 05 F1 | 	add	fp, #8
1ab08     E7 7C 02 FB | 	rdlong	result2, fp
1ab0c     08 CE 85 F1 | 	sub	fp, #8
1ab10     1F 7C 0E F2 | 	cmp	result2, #31 wz
1ab14     E7 A8 02 AB |  if_e	rdlong	local02, fp
1ab18                 | LR__2235
1ab18                 | LR__2236
1ab18                 | LR__2237
1ab18                 | LR__2238
1ab18     E7 A8 62 FC | 	wrlong	local02, fp
1ab1c     08 CE 05 F1 | 	add	fp, #8
1ab20     E7 3E 68 FC | 	wrlong	#31, fp
1ab24     08 CE 85 F1 | 	sub	fp, #8
1ab28     E7 92 02 F6 | 	mov	arg01, fp
1ab2c     D0 2B BF FD | 	call	#_push
1ab30                 | '     t1.result.sresult=s : t1.result_type=result_string : push t1 : return 
1ab30                 | LR__2239
1ab30     E7 F0 03 F6 | 	mov	ptra, fp
1ab34     F2 00 A0 FD | 	call	#popregs_
1ab38                 | _do_str_ret
1ab38     2D 00 64 FD | 	ret
1ab3c                 | 
1ab3c                 | ' ' ------------------ strig
1ab3c                 | ' 
1ab3c                 | ' sub do_strig
1ab3c                 | _do_strig
1ab3c     02 CA 05 F6 | 	mov	COUNT_, #2
1ab40     E8 00 A0 FD | 	call	#pushregs_
1ab44     10 F0 07 F1 | 	add	ptra, #16
1ab48     4C 00 00 FF 
1ab4c     24 64 06 F1 | 	add	objptr, ##38948
1ab50     32 A7 02 FB | 	rdlong	local01, objptr
1ab54     53 97 02 F6 | 	mov	arg03, local01
1ab58     01 96 66 F0 | 	shl	arg03, #1
1ab5c     53 97 02 F1 | 	add	arg03, local01
1ab60     02 96 66 F0 | 	shl	arg03, #2
1ab64     03 00 00 FF 
1ab68     04 64 86 F1 | 	sub	objptr, ##1540
1ab6c     32 97 02 F1 | 	add	arg03, objptr
1ab70     4B A9 02 FB | 	rdlong	local02, arg03
1ab74                 | ' 
1ab74                 | ' numpar=compiledline(lineptr_e).result.uresult
1ab74                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1ab74     02 A8 16 F2 | 	cmp	local02, #2 wc
1ab78     49 00 00 FF 
1ab7c     20 64 86 F1 | 	sub	objptr, ##37408
1ab80     40 00 90 CD |  if_b	jmp	#LR__2240
1ab84     00 92 06 F6 | 	mov	arg01, #0
1ab88     88 F1 B0 FD | 	call	#__system___getiolock_0622
1ab8c     3D 93 02 F6 | 	mov	arg01, result1
1ab90     FC 9B B0 FD | 	call	#__system___lockmem
1ab94     97 01 00 FF 
1ab98     19 95 06 F6 | 	mov	arg02, ##@LR__6084
1ab9c     00 92 06 F6 | 	mov	arg01, #0
1aba0     00 96 06 F6 | 	mov	arg03, #0
1aba4     DC A8 B0 FD | 	call	#__system___basic_print_string
1aba8     00 92 06 F6 | 	mov	arg01, #0
1abac     64 F1 B0 FD | 	call	#__system___getiolock_0622
1abb0     3D 01 68 FC | 	wrlong	#0, result1
1abb4     27 92 06 F6 | 	mov	arg01, #39
1abb8     00 94 06 F6 | 	mov	arg02, #0
1abbc     D8 5D B0 FD | 	call	#_printerror
1abc0     E8 00 90 FD | 	jmp	#LR__2244
1abc4                 | LR__2240
1abc4                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1abc4     00 A8 0E F2 | 	cmp	local02, #0 wz
1abc8     30 00 90 5D |  if_ne	jmp	#LR__2241
1abcc     54 00 00 FF 
1abd0     14 64 06 F1 | 	add	objptr, ##43028
1abd4     32 A9 02 FB | 	rdlong	local02, objptr
1abd8     54 00 00 FF 
1abdc     14 64 86 F1 | 	sub	objptr, ##43028
1abe0     E7 A8 62 FC | 	wrlong	local02, fp
1abe4     08 CE 05 F1 | 	add	fp, #8
1abe8     E7 3A 68 FC | 	wrlong	#29, fp
1abec     08 CE 85 F1 | 	sub	fp, #8
1abf0     E7 92 02 F6 | 	mov	arg01, fp
1abf4     08 2B BF FD | 	call	#_push
1abf8     B0 00 90 FD | 	jmp	#LR__2244
1abfc                 | LR__2241
1abfc     70 2A BF FD | 	call	#_pop
1ac00     E7 7A 62 FC | 	wrlong	result1, fp
1ac04     04 CE 05 F1 | 	add	fp, #4
1ac08     E7 7C 62 FC | 	wrlong	result2, fp
1ac0c     04 CE 05 F1 | 	add	fp, #4
1ac10     E7 7E 62 FC | 	wrlong	result3, fp
1ac14                 | ' t1=pop()
1ac14                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1ac14     08 CE 85 F1 | 	sub	fp, #8
1ac18     1C 7E 0E F2 | 	cmp	result3, #28 wz
1ac1c     08 CE 05 51 |  if_ne	add	fp, #8
1ac20     E7 A6 02 5B |  if_ne	rdlong	local01, fp
1ac24     08 CE 85 51 |  if_ne	sub	fp, #8
1ac28     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
1ac2c     70 00 90 5D |  if_ne	jmp	#LR__2243
1ac30     E7 A6 02 FB | 	rdlong	local01, fp
1ac34     54 00 00 FF 
1ac38     E4 64 06 F1 | 	add	objptr, ##43236
1ac3c     32 A7 62 FC | 	wrlong	local01, objptr
1ac40                 | '   q=t1.result.uresult
1ac40                 | '   if q<7 then 
1ac40     54 00 00 FF 
1ac44     E4 64 86 F1 | 	sub	objptr, ##43236
1ac48     07 A6 56 F2 | 	cmps	local01, #7 wc
1ac4c     40 00 90 3D |  if_ae	jmp	#LR__2242
1ac50     54 00 00 FF 
1ac54     E4 64 06 F1 | 	add	objptr, ##43236
1ac58     32 A7 02 FB | 	rdlong	local01, objptr
1ac5c     02 A6 66 F0 | 	shl	local01, #2
1ac60     D0 64 86 F1 | 	sub	objptr, #208
1ac64     32 A7 02 F1 | 	add	local01, objptr
1ac68     53 A9 02 FB | 	rdlong	local02, local01
1ac6c     E7 A8 62 FC | 	wrlong	local02, fp
1ac70     08 CE 05 F1 | 	add	fp, #8
1ac74     E7 3A 68 FC | 	wrlong	#29, fp
1ac78     08 CE 85 F1 | 	sub	fp, #8
1ac7c     E7 92 02 F6 | 	mov	arg01, fp
1ac80     54 00 00 FF 
1ac84     14 64 86 F1 | 	sub	objptr, ##43028
1ac88     74 2A BF FD | 	call	#_push
1ac8c                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1ac8c     1C 00 90 FD | 	jmp	#LR__2244
1ac90                 | LR__2242
1ac90     29 92 06 F6 | 	mov	arg01, #41
1ac94     00 94 06 F6 | 	mov	arg02, #0
1ac98     FC 5C B0 FD | 	call	#_printerror
1ac9c                 | '      printerror(41) : return
1ac9c     0C 00 90 FD | 	jmp	#LR__2244
1aca0                 | LR__2243
1aca0     29 92 06 F6 | 	mov	arg01, #41
1aca4     00 94 06 F6 | 	mov	arg02, #0
1aca8     EC 5C B0 FD | 	call	#_printerror
1acac                 | LR__2244
1acac     E7 F0 03 F6 | 	mov	ptra, fp
1acb0     F2 00 A0 FD | 	call	#popregs_
1acb4                 | _do_strig_ret
1acb4     2D 00 64 FD | 	ret
1acb8                 | 
1acb8                 | ' 
1acb8                 | ' ' ------------------ tan
1acb8                 | ' 
1acb8                 | ' sub do_tan
1acb8                 | _do_tan
1acb8     01 CA 05 F6 | 	mov	COUNT_, #1
1acbc     E8 00 A0 FD | 	call	#pushregs_
1acc0     10 F0 07 F1 | 	add	ptra, #16
1acc4     4C 00 00 FF 
1acc8     24 64 06 F1 | 	add	objptr, ##38948
1accc     32 97 02 FB | 	rdlong	arg03, objptr
1acd0     4B 95 02 F6 | 	mov	arg02, arg03
1acd4     01 94 66 F0 | 	shl	arg02, #1
1acd8     4B 95 02 F1 | 	add	arg02, arg03
1acdc     02 94 66 F0 | 	shl	arg02, #2
1ace0     03 00 00 FF 
1ace4     04 64 86 F1 | 	sub	objptr, ##1540
1ace8     32 95 02 F1 | 	add	arg02, objptr
1acec     4A 97 02 FB | 	rdlong	arg03, arg02
1acf0                 | ' 
1acf0                 | ' numpar=compiledline(lineptr_e).result.uresult
1acf0                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1acf0     02 96 16 F2 | 	cmp	arg03, #2 wc
1acf4     49 00 00 FF 
1acf8     20 64 86 F1 | 	sub	objptr, ##37408
1acfc     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1ad00     40 00 90 4D |  if_c_and_nz	jmp	#LR__2250
1ad04     00 92 06 F6 | 	mov	arg01, #0
1ad08     08 F0 B0 FD | 	call	#__system___getiolock_0622
1ad0c     3D 93 02 F6 | 	mov	arg01, result1
1ad10     7C 9A B0 FD | 	call	#__system___lockmem
1ad14     97 01 00 FF 
1ad18     21 95 06 F6 | 	mov	arg02, ##@LR__6085
1ad1c     00 92 06 F6 | 	mov	arg01, #0
1ad20     00 96 06 F6 | 	mov	arg03, #0
1ad24     5C A7 B0 FD | 	call	#__system___basic_print_string
1ad28     00 92 06 F6 | 	mov	arg01, #0
1ad2c     E4 EF B0 FD | 	call	#__system___getiolock_0622
1ad30     3D 01 68 FC | 	wrlong	#0, result1
1ad34     27 92 06 F6 | 	mov	arg01, #39
1ad38     00 94 06 F6 | 	mov	arg02, #0
1ad3c     58 5C B0 FD | 	call	#_printerror
1ad40     64 00 90 FD | 	jmp	#LR__2251
1ad44                 | LR__2250
1ad44     28 29 BF FD | 	call	#_pop
1ad48     E7 7A 62 FC | 	wrlong	result1, fp
1ad4c     04 CE 05 F1 | 	add	fp, #4
1ad50     E7 7C 62 FC | 	wrlong	result2, fp
1ad54     04 CE 05 F1 | 	add	fp, #4
1ad58     E7 7E 62 FC | 	wrlong	result3, fp
1ad5c     08 CE 85 F1 | 	sub	fp, #8
1ad60     54 00 00 FF 
1ad64     84 64 06 F1 | 	add	objptr, ##43140
1ad68     32 A7 02 FB | 	rdlong	local01, objptr
1ad6c     54 00 00 FF 
1ad70     84 64 86 F1 | 	sub	objptr, ##43140
1ad74     E7 92 02 F6 | 	mov	arg01, fp
1ad78     8C 2B BF FD | 	call	#_converttofloat
1ad7c     3D 95 02 F6 | 	mov	arg02, result1
1ad80     53 93 02 F6 | 	mov	arg01, local01
1ad84     D8 C0 B0 FD | 	call	#__system___float_mul
1ad88     3D 93 02 F6 | 	mov	arg01, result1
1ad8c     8C CB B0 FD | 	call	#__system____builtin_tanf
1ad90     E7 7A 62 FC | 	wrlong	result1, fp
1ad94     08 CE 05 F1 | 	add	fp, #8
1ad98     E7 3C 68 FC | 	wrlong	#30, fp
1ad9c     08 CE 85 F1 | 	sub	fp, #8
1ada0     E7 92 02 F6 | 	mov	arg01, fp
1ada4     58 29 BF FD | 	call	#_push
1ada8                 | LR__2251
1ada8     E7 F0 03 F6 | 	mov	ptra, fp
1adac     F2 00 A0 FD | 	call	#popregs_
1adb0                 | _do_tan_ret
1adb0     2D 00 64 FD | 	ret
1adb4                 | 
1adb4                 | ' 
1adb4                 | ' ' ------------------ val
1adb4                 | ' 
1adb4                 | ' sub do_val
1adb4                 | _do_val
1adb4     05 CA 05 F6 | 	mov	COUNT_, #5
1adb8     E8 00 A0 FD | 	call	#pushregs_
1adbc     20 F0 07 F1 | 	add	ptra, #32
1adc0     4C 00 00 FF 
1adc4     24 64 06 F1 | 	add	objptr, ##38948
1adc8     32 97 02 FB | 	rdlong	arg03, objptr
1adcc     4B 95 02 F6 | 	mov	arg02, arg03
1add0     01 94 66 F0 | 	shl	arg02, #1
1add4     4B 95 02 F1 | 	add	arg02, arg03
1add8     02 94 66 F0 | 	shl	arg02, #2
1addc     03 00 00 FF 
1ade0     04 64 86 F1 | 	sub	objptr, ##1540
1ade4     32 95 02 F1 | 	add	arg02, objptr
1ade8     4A 97 02 FB | 	rdlong	arg03, arg02
1adec                 | ' 
1adec                 | ' numpar=compiledline(lineptr_e).result.uresult
1adec                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1adec     02 96 16 F2 | 	cmp	arg03, #2 wc
1adf0     49 00 00 FF 
1adf4     20 64 86 F1 | 	sub	objptr, ##37408
1adf8     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1adfc     40 00 90 4D |  if_c_and_nz	jmp	#LR__2260
1ae00     00 92 06 F6 | 	mov	arg01, #0
1ae04     0C EF B0 FD | 	call	#__system___getiolock_0622
1ae08     3D 93 02 F6 | 	mov	arg01, result1
1ae0c     80 99 B0 FD | 	call	#__system___lockmem
1ae10     97 01 00 FF 
1ae14     27 95 06 F6 | 	mov	arg02, ##@LR__6086
1ae18     00 92 06 F6 | 	mov	arg01, #0
1ae1c     00 96 06 F6 | 	mov	arg03, #0
1ae20     60 A6 B0 FD | 	call	#__system___basic_print_string
1ae24     00 92 06 F6 | 	mov	arg01, #0
1ae28     E8 EE B0 FD | 	call	#__system___getiolock_0622
1ae2c     3D 01 68 FC | 	wrlong	#0, result1
1ae30     27 92 06 F6 | 	mov	arg01, #39
1ae34     00 94 06 F6 | 	mov	arg02, #0
1ae38     5C 5B B0 FD | 	call	#_printerror
1ae3c     0C 02 90 FD | 	jmp	#LR__2272
1ae40                 | LR__2260
1ae40     2C 28 BF FD | 	call	#_pop
1ae44     3F 97 02 F6 | 	mov	arg03, result3
1ae48     E7 7A 62 FC | 	wrlong	result1, fp
1ae4c     04 CE 05 F1 | 	add	fp, #4
1ae50     E7 7C 62 FC | 	wrlong	result2, fp
1ae54     04 CE 05 F1 | 	add	fp, #4
1ae58     E7 96 62 FC | 	wrlong	arg03, fp
1ae5c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1ae5c     08 CE 85 F1 | 	sub	fp, #8
1ae60     2B 96 0E F2 | 	cmp	arg03, #43 wz
1ae64     18 00 90 5D |  if_ne	jmp	#LR__2261
1ae68     E7 92 02 FB | 	rdlong	arg01, fp
1ae6c     70 29 BF FD | 	call	#_convertstring
1ae70     E7 7A 62 FC | 	wrlong	result1, fp
1ae74     08 CE 05 F1 | 	add	fp, #8
1ae78     E7 3E 68 FC | 	wrlong	#31, fp
1ae7c     08 CE 85 F1 | 	sub	fp, #8
1ae80                 | LR__2261
1ae80                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1ae80     08 CE 05 F1 | 	add	fp, #8
1ae84     E7 96 02 FB | 	rdlong	arg03, fp
1ae88     08 CE 85 F1 | 	sub	fp, #8
1ae8c     1F 96 0E F2 | 	cmp	arg03, #31 wz
1ae90     40 00 90 AD |  if_e	jmp	#LR__2262
1ae94     00 92 06 F6 | 	mov	arg01, #0
1ae98     78 EE B0 FD | 	call	#__system___getiolock_0622
1ae9c     3D 93 02 F6 | 	mov	arg01, result1
1aea0     EC 98 B0 FD | 	call	#__system___lockmem
1aea4     97 01 00 FF 
1aea8     2D 95 06 F6 | 	mov	arg02, ##@LR__6087
1aeac     00 92 06 F6 | 	mov	arg01, #0
1aeb0     00 96 06 F6 | 	mov	arg03, #0
1aeb4     CC A5 B0 FD | 	call	#__system___basic_print_string
1aeb8     00 92 06 F6 | 	mov	arg01, #0
1aebc     54 EE B0 FD | 	call	#__system___getiolock_0622
1aec0     3D 01 68 FC | 	wrlong	#0, result1
1aec4     0F 92 06 F6 | 	mov	arg01, #15
1aec8     00 94 06 F6 | 	mov	arg02, #0
1aecc     C8 5A B0 FD | 	call	#_printerror
1aed0     78 01 90 FD | 	jmp	#LR__2272
1aed4                 | LR__2262
1aed4                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1aed4     E7 92 02 FB | 	rdlong	arg01, fp
1aed8     01 94 06 F6 | 	mov	arg02, #1
1aedc     58 B1 B0 FD | 	call	#__system__Left_S
1aee0     3D 93 02 F6 | 	mov	arg01, result1
1aee4     97 01 00 FF 
1aee8     33 95 06 F6 | 	mov	arg02, ##@LR__6088
1aeec     C8 98 B0 FD | 	call	#__system___string_cmp
1aef0     00 7A 0E F2 | 	cmp	result1, #0 wz
1aef4     48 00 90 5D |  if_ne	jmp	#LR__2265
1aef8     97 01 00 FF 
1aefc     35 A7 06 F6 | 	mov	local01, ##@LR__6089
1af00     E7 96 02 FB | 	rdlong	arg03, fp
1af04     4B 93 02 F6 | 	mov	arg01, arg03
1af08     49 A9 02 F6 | 	mov	local02, arg01
1af0c     D7 06 48 FB | 	callpa	#(@LR__2264-@LR__2263)>>2,fcache_load_ptr_
1af10                 | LR__2263
1af10     54 7B CA FA | 	rdbyte	result1, local02 wz
1af14     01 A8 06 51 |  if_ne	add	local02, #1
1af18     F4 FF 9F 5D |  if_ne	jmp	#LR__2263
1af1c                 | LR__2264
1af1c     49 A9 82 F1 | 	sub	local02, arg01
1af20     54 95 02 F6 | 	mov	arg02, local02
1af24     01 94 86 F1 | 	sub	arg02, #1
1af28     4B 93 02 F6 | 	mov	arg01, arg03
1af2c     90 B1 B0 FD | 	call	#__system__Right_S
1af30     3D 95 02 F6 | 	mov	arg02, result1
1af34     53 93 02 F6 | 	mov	arg01, local01
1af38     B0 98 B0 FD | 	call	#__system___string_concat
1af3c     E7 7A 62 FC | 	wrlong	result1, fp
1af40                 | LR__2265
1af40                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1af40     E7 92 02 FB | 	rdlong	arg01, fp
1af44     01 94 06 F6 | 	mov	arg02, #1
1af48     EC B0 B0 FD | 	call	#__system__Left_S
1af4c     3D 93 02 F6 | 	mov	arg01, result1
1af50     97 01 00 FF 
1af54     38 95 06 F6 | 	mov	arg02, ##@LR__6090
1af58     5C 98 B0 FD | 	call	#__system___string_cmp
1af5c     00 7A 0E F2 | 	cmp	result1, #0 wz
1af60     48 00 90 5D |  if_ne	jmp	#LR__2268
1af64     97 01 00 FF 
1af68     3A A7 06 F6 | 	mov	local01, ##@LR__6091
1af6c     E7 96 02 FB | 	rdlong	arg03, fp
1af70     4B 93 02 F6 | 	mov	arg01, arg03
1af74     49 A9 02 F6 | 	mov	local02, arg01
1af78     D7 06 48 FB | 	callpa	#(@LR__2267-@LR__2266)>>2,fcache_load_ptr_
1af7c                 | LR__2266
1af7c     54 7B CA FA | 	rdbyte	result1, local02 wz
1af80     01 A8 06 51 |  if_ne	add	local02, #1
1af84     F4 FF 9F 5D |  if_ne	jmp	#LR__2266
1af88                 | LR__2267
1af88     49 A9 82 F1 | 	sub	local02, arg01
1af8c     54 95 02 F6 | 	mov	arg02, local02
1af90     01 94 86 F1 | 	sub	arg02, #1
1af94     4B 93 02 F6 | 	mov	arg01, arg03
1af98     24 B1 B0 FD | 	call	#__system__Right_S
1af9c     3D 95 02 F6 | 	mov	arg02, result1
1afa0     53 93 02 F6 | 	mov	arg01, local01
1afa4     44 98 B0 FD | 	call	#__system___string_concat
1afa8     E7 7A 62 FC | 	wrlong	result1, fp
1afac                 | LR__2268
1afac     E7 92 02 FB | 	rdlong	arg01, fp
1afb0     C8 C6 B0 FD | 	call	#__system____builtin_atof
1afb4     3D AB 02 F6 | 	mov	local03, result1
1afb8     E7 92 02 FB | 	rdlong	arg01, fp
1afbc     00 94 06 F6 | 	mov	arg02, #0
1afc0     20 C5 B0 FD | 	call	#__system____builtin_atoi
1afc4     3D AD 02 F6 | 	mov	local04, result1
1afc8                 | ' fval=val(t1.result.sresult)
1afc8                 | ' ival=val%(t1.result.sresult)
1afc8                 | ' if fval=ival then
1afc8     56 93 52 F6 | 	abs	arg01, local04 wc
1afcc     1F AE C6 C9 |  if_b	decod	local05, #31
1afd0     00 AE 06 36 |  if_ae	mov	local05, #0
1afd4     84 BA B0 FD | 	call	#__system___float_fromuns
1afd8     57 7B 62 F5 | 	xor	result1, local05
1afdc     3D 95 02 F6 | 	mov	arg02, result1
1afe0     55 93 02 F6 | 	mov	arg01, local03
1afe4     01 96 06 F6 | 	mov	arg03, #1
1afe8     A8 C2 B0 FD | 	call	#__system___float_cmp
1afec     00 7A 0E F2 | 	cmp	result1, #0 wz
1aff0     E7 AC 62 AC |  if_e	wrlong	local04, fp
1aff4     08 CE 05 A1 |  if_e	add	fp, #8
1aff8     E7 38 68 AC |  if_e	wrlong	#28, fp
1affc     08 CE 85 A1 |  if_e	sub	fp, #8
1b000     40 00 90 AD |  if_e	jmp	#LR__2271
1b004                 | '   if fval=0 andalso ival<>0 then
1b004     55 93 02 F6 | 	mov	arg01, local03
1b008     00 94 06 F6 | 	mov	arg02, #0
1b00c     01 96 06 F6 | 	mov	arg03, #1
1b010     80 C2 B0 FD | 	call	#__system___float_cmp
1b014     00 7A 0E F2 | 	cmp	result1, #0 wz
1b018     18 00 90 5D |  if_ne	jmp	#LR__2269
1b01c     00 AC 0E F2 | 	cmp	local04, #0 wz
1b020     E7 AC 62 5C |  if_ne	wrlong	local04, fp
1b024     08 CE 05 51 |  if_ne	add	fp, #8
1b028     E7 38 68 5C |  if_ne	wrlong	#28, fp
1b02c     08 CE 85 51 |  if_ne	sub	fp, #8
1b030     10 00 90 5D |  if_ne	jmp	#LR__2270
1b034                 | LR__2269
1b034     E7 AA 62 FC | 	wrlong	local03, fp
1b038     08 CE 05 F1 | 	add	fp, #8
1b03c     E7 3C 68 FC | 	wrlong	#30, fp
1b040     08 CE 85 F1 | 	sub	fp, #8
1b044                 | LR__2270
1b044                 | LR__2271
1b044     E7 92 02 F6 | 	mov	arg01, fp
1b048     B4 26 BF FD | 	call	#_push
1b04c                 | LR__2272
1b04c     E7 F0 03 F6 | 	mov	ptra, fp
1b050     F2 00 A0 FD | 	call	#popregs_
1b054                 | _do_val_ret
1b054     2D 00 64 FD | 	ret
1b058                 | 
1b058                 | ' 
1b058                 | ' ' ------------------ waitclock
1b058                 | ' 
1b058                 | ' sub do_waitclock
1b058                 | _do_waitclock
1b058     54 00 00 FF 
1b05c     70 64 06 F1 | 	add	objptr, ##43120
1b060     32 81 02 FB | 	rdlong	_var01, objptr
1b064                 | ' c=hkcnt
1b064                 | ' do: loop until hkcnt<>c
1b064                 | LR__2280
1b064     32 83 02 FB | 	rdlong	_var02, objptr
1b068     40 83 0A F2 | 	cmp	_var02, _var01 wz
1b06c     F4 FF 9F AD |  if_e	jmp	#LR__2280
1b070     54 00 00 FF 
1b074     70 64 86 F1 | 	sub	objptr, ##43120
1b078                 | _do_waitclock_ret
1b078     2D 00 64 FD | 	ret
1b07c                 | 
1b07c                 | ' 
1b07c                 | ' ' ------------------ waitms
1b07c                 | ' 
1b07c                 | ' sub do_waitms
1b07c                 | _do_waitms
1b07c     03 CA 05 F6 | 	mov	COUNT_, #3
1b080     E8 00 A0 FD | 	call	#pushregs_
1b084     18 F0 07 F1 | 	add	ptra, #24
1b088     E4 25 BF FD | 	call	#_pop
1b08c     E7 7A 62 FC | 	wrlong	result1, fp
1b090     04 CE 05 F1 | 	add	fp, #4
1b094     E7 7C 62 FC | 	wrlong	result2, fp
1b098     04 CE 05 F1 | 	add	fp, #4
1b09c     E7 7E 62 FC | 	wrlong	result3, fp
1b0a0     08 CE 85 F1 | 	sub	fp, #8
1b0a4     E7 92 02 F6 | 	mov	arg01, fp
1b0a8     A0 27 BF FD | 	call	#_converttoint
1b0ac     3D A7 02 F6 | 	mov	local01, result1
1b0b0                 | ' 
1b0b0                 | ' t1=pop()  
1b0b0                 | ' t=converttoint(t1)
1b0b0                 | ' if t<0 then return
1b0b0     00 A6 56 F2 | 	cmps	local01, #0 wc
1b0b4     98 00 90 CD |  if_b	jmp	#LR__2296
1b0b8                 | ' if t < 1000 then 
1b0b8     01 00 00 FF 
1b0bc     E8 A7 56 F2 | 	cmps	local01, ##1000 wc
1b0c0     0C 00 90 3D |  if_ae	jmp	#LR__2290
1b0c4     53 93 02 F6 | 	mov	arg01, local01
1b0c8     B8 99 B0 FD | 	call	#__system___waitms
1b0cc     80 00 90 FD | 	jmp	#LR__2295
1b0d0                 | LR__2290
1b0d0     53 93 52 F6 | 	abs	arg01, local01 wc
1b0d4     01 00 00 FF 
1b0d8     E8 93 16 FD | 	qdiv	arg01, ##1000
1b0dc                 | '   for i=1 to t/1000
1b0dc     01 A8 06 F6 | 	mov	local02, #1
1b0e0     18 AA 62 FD | 	getqx	local03
1b0e4     55 AB 82 F6 | 	negc	local03, local03
1b0e8     01 AA 06 F1 | 	add	local03, #1
1b0ec                 | LR__2291
1b0ec     55 A9 52 F2 | 	cmps	local02, local03 wc
1b0f0     44 00 90 3D |  if_ae	jmp	#LR__2294
1b0f4     01 00 00 FF 
1b0f8     E8 93 06 F6 | 	mov	arg01, ##1000
1b0fc     84 99 B0 FD | 	call	#__system___waitms
1b100                 | '     waitms(1000)
1b100                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1b100     E0 92 06 F6 | 	mov	arg01, #224
1b104     E4 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b108     00 7A 0E F2 | 	cmp	result1, #0 wz
1b10c     10 00 90 5D |  if_ne	jmp	#LR__2292
1b110     E4 92 06 F6 | 	mov	arg01, #228
1b114     D4 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b118     00 7A 0E F2 | 	cmp	result1, #0 wz
1b11c     10 00 90 AD |  if_e	jmp	#LR__2293
1b120                 | LR__2292
1b120     06 92 06 F6 | 	mov	arg01, #6
1b124     C4 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b128     00 7A 0E F2 | 	cmp	result1, #0 wz
1b12c     20 00 90 5D |  if_ne	jmp	#LR__2296
1b130                 | LR__2293
1b130     01 A8 06 F1 | 	add	local02, #1
1b134     B4 FF 9F FD | 	jmp	#LR__2291
1b138                 | LR__2294
1b138     53 AB 52 F6 | 	abs	local03, local01 wc
1b13c     01 00 00 FF 
1b140     E8 AB 16 FD | 	qdiv	local03, ##1000
1b144     19 AA 62 FD | 	getqy	local03
1b148     55 93 82 F6 | 	negc	arg01, local03
1b14c     34 99 B0 FD | 	call	#__system___waitms
1b150                 | LR__2295
1b150                 | LR__2296
1b150     E7 F0 03 F6 | 	mov	ptra, fp
1b154     F2 00 A0 FD | 	call	#popregs_
1b158                 | _do_waitms_ret
1b158     2D 00 64 FD | 	ret
1b15c                 | 
1b15c                 | ' 
1b15c                 | ' ' ------------------ waitvbl
1b15c                 | ' 
1b15c                 | ' sub do_waitvbl
1b15c                 | _do_waitvbl
1b15c     01 92 06 F6 | 	mov	arg01, #1
1b160     8C 75 B0 FD | 	call	#_hg010b_spin2_waitvbl
1b164                 | _do_waitvbl_ret
1b164     2D 00 64 FD | 	ret
1b168                 | 
1b168                 | ' 
1b168                 | ' ' ------------------ wrpin
1b168                 | ' 
1b168                 | ' sub do_wrpin
1b168                 | _do_wrpin
1b168     01 CA 05 F6 | 	mov	COUNT_, #1
1b16c     E8 00 A0 FD | 	call	#pushregs_
1b170     18 F0 07 F1 | 	add	ptra, #24
1b174     F8 24 BF FD | 	call	#_pop
1b178     3D 95 02 F6 | 	mov	arg02, result1
1b17c     3E 93 02 F6 | 	mov	arg01, result2
1b180     3F A7 02 F6 | 	mov	local01, result3
1b184     E7 94 62 FC | 	wrlong	arg02, fp
1b188     04 CE 05 F1 | 	add	fp, #4
1b18c     E7 92 62 FC | 	wrlong	arg01, fp
1b190     04 CE 05 F1 | 	add	fp, #4
1b194     E7 A6 62 FC | 	wrlong	local01, fp
1b198     08 CE 85 F1 | 	sub	fp, #8
1b19c     D0 24 BF FD | 	call	#_pop
1b1a0     3F A7 02 F6 | 	mov	local01, result3
1b1a4     0C CE 05 F1 | 	add	fp, #12
1b1a8     E7 7A 62 FC | 	wrlong	result1, fp
1b1ac     04 CE 05 F1 | 	add	fp, #4
1b1b0     E7 7C 62 FC | 	wrlong	result2, fp
1b1b4     04 CE 05 F1 | 	add	fp, #4
1b1b8     E7 A6 62 FC | 	wrlong	local01, fp
1b1bc     08 CE 85 F1 | 	sub	fp, #8
1b1c0     E7 92 02 F6 | 	mov	arg01, fp
1b1c4     0C CE 85 F1 | 	sub	fp, #12
1b1c8     80 26 BF FD | 	call	#_converttoint
1b1cc     3D A7 02 F6 | 	mov	local01, result1
1b1d0     E7 92 02 F6 | 	mov	arg01, fp
1b1d4     74 26 BF FD | 	call	#_converttoint
1b1d8     53 7B 02 FC | 	wrpin	result1, local01
1b1dc     E7 F0 03 F6 | 	mov	ptra, fp
1b1e0     F2 00 A0 FD | 	call	#popregs_
1b1e4                 | _do_wrpin_ret
1b1e4     2D 00 64 FD | 	ret
1b1e8                 | 
1b1e8                 | ' 
1b1e8                 | ' ' ------------------ wxpin
1b1e8                 | ' 
1b1e8                 | ' sub do_wxpin
1b1e8                 | _do_wxpin
1b1e8     01 CA 05 F6 | 	mov	COUNT_, #1
1b1ec     E8 00 A0 FD | 	call	#pushregs_
1b1f0     18 F0 07 F1 | 	add	ptra, #24
1b1f4     78 24 BF FD | 	call	#_pop
1b1f8     3D 95 02 F6 | 	mov	arg02, result1
1b1fc     3E 93 02 F6 | 	mov	arg01, result2
1b200     3F A7 02 F6 | 	mov	local01, result3
1b204     E7 94 62 FC | 	wrlong	arg02, fp
1b208     04 CE 05 F1 | 	add	fp, #4
1b20c     E7 92 62 FC | 	wrlong	arg01, fp
1b210     04 CE 05 F1 | 	add	fp, #4
1b214     E7 A6 62 FC | 	wrlong	local01, fp
1b218     08 CE 85 F1 | 	sub	fp, #8
1b21c     50 24 BF FD | 	call	#_pop
1b220     3F A7 02 F6 | 	mov	local01, result3
1b224     0C CE 05 F1 | 	add	fp, #12
1b228     E7 7A 62 FC | 	wrlong	result1, fp
1b22c     04 CE 05 F1 | 	add	fp, #4
1b230     E7 7C 62 FC | 	wrlong	result2, fp
1b234     04 CE 05 F1 | 	add	fp, #4
1b238     E7 A6 62 FC | 	wrlong	local01, fp
1b23c     08 CE 85 F1 | 	sub	fp, #8
1b240     E7 92 02 F6 | 	mov	arg01, fp
1b244     0C CE 85 F1 | 	sub	fp, #12
1b248     00 26 BF FD | 	call	#_converttoint
1b24c     3D A7 02 F6 | 	mov	local01, result1
1b250     E7 92 02 F6 | 	mov	arg01, fp
1b254     F4 25 BF FD | 	call	#_converttoint
1b258     53 7B 12 FC | 	wxpin	result1, local01
1b25c     E7 F0 03 F6 | 	mov	ptra, fp
1b260     F2 00 A0 FD | 	call	#popregs_
1b264                 | _do_wxpin_ret
1b264     2D 00 64 FD | 	ret
1b268                 | 
1b268                 | ' 
1b268                 | ' ' ------------------ wypin
1b268                 | ' 
1b268                 | ' sub do_wypin
1b268                 | _do_wypin
1b268     01 CA 05 F6 | 	mov	COUNT_, #1
1b26c     E8 00 A0 FD | 	call	#pushregs_
1b270     18 F0 07 F1 | 	add	ptra, #24
1b274     F8 23 BF FD | 	call	#_pop
1b278     3D 95 02 F6 | 	mov	arg02, result1
1b27c     3E 93 02 F6 | 	mov	arg01, result2
1b280     3F A7 02 F6 | 	mov	local01, result3
1b284     E7 94 62 FC | 	wrlong	arg02, fp
1b288     04 CE 05 F1 | 	add	fp, #4
1b28c     E7 92 62 FC | 	wrlong	arg01, fp
1b290     04 CE 05 F1 | 	add	fp, #4
1b294     E7 A6 62 FC | 	wrlong	local01, fp
1b298     08 CE 85 F1 | 	sub	fp, #8
1b29c     D0 23 BF FD | 	call	#_pop
1b2a0     3F A7 02 F6 | 	mov	local01, result3
1b2a4     0C CE 05 F1 | 	add	fp, #12
1b2a8     E7 7A 62 FC | 	wrlong	result1, fp
1b2ac     04 CE 05 F1 | 	add	fp, #4
1b2b0     E7 7C 62 FC | 	wrlong	result2, fp
1b2b4     04 CE 05 F1 | 	add	fp, #4
1b2b8     E7 A6 62 FC | 	wrlong	local01, fp
1b2bc     08 CE 85 F1 | 	sub	fp, #8
1b2c0     E7 92 02 F6 | 	mov	arg01, fp
1b2c4     0C CE 85 F1 | 	sub	fp, #12
1b2c8     80 25 BF FD | 	call	#_converttoint
1b2cc     3D A7 02 F6 | 	mov	local01, result1
1b2d0     E7 92 02 F6 | 	mov	arg01, fp
1b2d4     74 25 BF FD | 	call	#_converttoint
1b2d8     53 7B 22 FC | 	wypin	result1, local01
1b2dc     E7 F0 03 F6 | 	mov	ptra, fp
1b2e0     F2 00 A0 FD | 	call	#popregs_
1b2e4                 | _do_wypin_ret
1b2e4     2D 00 64 FD | 	ret
1b2e8                 | 
1b2e8                 | ' 
1b2e8                 | ' 
1b2e8                 | ' 
1b2e8                 | ' 
1b2e8                 | ' 
1b2e8                 | ' 
1b2e8                 | ' 
1b2e8                 | ' 
1b2e8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1b2e8                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1b2e8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1b2e8                 | ' 
1b2e8                 | ' 
1b2e8                 | ' '------------------ Assign
1b2e8                 | ' 
1b2e8                 | ' sub do_assign
1b2e8                 | _do_assign
1b2e8     0E CA 05 F6 | 	mov	COUNT_, #14
1b2ec     E8 00 A0 FD | 	call	#pushregs_
1b2f0     44 F0 07 F1 | 	add	ptra, #68
1b2f4     4C 00 00 FF 
1b2f8     24 64 06 F1 | 	add	objptr, ##38948
1b2fc     32 97 02 FB | 	rdlong	arg03, objptr
1b300     4B 95 02 F6 | 	mov	arg02, arg03
1b304     01 94 66 F0 | 	shl	arg02, #1
1b308     4B 95 02 F1 | 	add	arg02, arg03
1b30c     02 94 66 F0 | 	shl	arg02, #2
1b310     03 00 00 FF 
1b314     04 64 86 F1 | 	sub	objptr, ##1540
1b318     32 95 02 F1 | 	add	arg02, objptr
1b31c     4A AD 02 FB | 	rdlong	local04, arg02
1b320                 | ' 
1b320                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1b320                 | ' if variables(varnum).vartype<array_no_type then 
1b320     56 97 02 F6 | 	mov	arg03, local04
1b324     04 96 66 F0 | 	shl	arg03, #4
1b328     32 00 00 FF 
1b32c     84 64 86 F1 | 	sub	objptr, ##25732
1b330     32 97 02 F1 | 	add	arg03, objptr
1b334     0C 96 06 F1 | 	add	arg03, #12
1b338     4B 97 02 FB | 	rdlong	arg03, arg03
1b33c     00 97 16 F2 | 	cmp	arg03, #256 wc
1b340     16 00 00 FF 
1b344     9C 65 86 F1 | 	sub	objptr, ##11676
1b348     F8 00 90 3D |  if_ae	jmp	#LR__2300
1b34c     20 23 BF FD | 	call	#_pop
1b350     E7 7A 62 FC | 	wrlong	result1, fp
1b354     04 CE 05 F1 | 	add	fp, #4
1b358     E7 7C 62 FC | 	wrlong	result2, fp
1b35c     04 CE 05 F1 | 	add	fp, #4
1b360     E7 7E 62 FC | 	wrlong	result3, fp
1b364     08 CE 85 F1 | 	sub	fp, #8
1b368     E7 96 02 FB | 	rdlong	arg03, fp
1b36c     04 CE 05 F1 | 	add	fp, #4
1b370     E7 94 02 FB | 	rdlong	arg02, fp
1b374     56 93 02 F6 | 	mov	arg01, local04
1b378     04 92 66 F0 | 	shl	arg01, #4
1b37c     16 00 00 FF 
1b380     9C 65 06 F1 | 	add	objptr, ##11676
1b384     32 93 02 F1 | 	add	arg01, objptr
1b388     04 92 06 F1 | 	add	arg01, #4
1b38c     49 97 62 FC | 	wrlong	arg03, arg01
1b390     56 97 02 F6 | 	mov	arg03, local04
1b394     04 96 66 F0 | 	shl	arg03, #4
1b398     32 97 02 F1 | 	add	arg03, objptr
1b39c     08 96 06 F1 | 	add	arg03, #8
1b3a0     4B 95 62 FC | 	wrlong	arg02, arg03
1b3a4     56 97 02 F6 | 	mov	arg03, local04
1b3a8     04 96 66 F0 | 	shl	arg03, #4
1b3ac     32 97 02 F1 | 	add	arg03, objptr
1b3b0     04 CE 05 F1 | 	add	fp, #4
1b3b4     E7 94 02 FB | 	rdlong	arg02, fp
1b3b8     08 CE 85 F1 | 	sub	fp, #8
1b3bc     0C 96 06 F1 | 	add	arg03, #12
1b3c0     4B 95 62 FC | 	wrlong	arg02, arg03
1b3c4                 | '   t1=pop() 
1b3c4                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1b3c4                 | '   if variables(varnum).vartype<>result_string2 then return
1b3c4     56 97 02 F6 | 	mov	arg03, local04
1b3c8     04 96 66 F0 | 	shl	arg03, #4
1b3cc     32 97 02 F1 | 	add	arg03, objptr
1b3d0     0C 96 06 F1 | 	add	arg03, #12
1b3d4     4B 97 02 FB | 	rdlong	arg03, arg03
1b3d8     2B 96 0E F2 | 	cmp	arg03, #43 wz
1b3dc     16 00 00 FF 
1b3e0     9C 65 86 F1 | 	sub	objptr, ##11676
1b3e4     68 03 90 5D |  if_ne	jmp	#LR__2322
1b3e8     56 AF 02 F6 | 	mov	local05, local04
1b3ec     04 AE 66 F0 | 	shl	local05, #4
1b3f0     16 00 00 FF 
1b3f4     9C 65 06 F1 | 	add	objptr, ##11676
1b3f8     32 AF 02 F1 | 	add	local05, objptr
1b3fc     56 97 02 F6 | 	mov	arg03, local04
1b400     04 96 66 F0 | 	shl	arg03, #4
1b404     32 97 02 F1 | 	add	arg03, objptr
1b408     04 96 06 F1 | 	add	arg03, #4
1b40c     4B 93 02 FB | 	rdlong	arg01, arg03
1b410     16 00 00 FF 
1b414     9C 65 86 F1 | 	sub	objptr, ##11676
1b418     C4 23 BF FD | 	call	#_convertstring
1b41c     04 AE 06 F1 | 	add	local05, #4
1b420     57 7B 62 FC | 	wrlong	result1, local05
1b424     04 AC 66 F0 | 	shl	local04, #4
1b428     32 AF 02 F6 | 	mov	local05, objptr
1b42c     16 00 00 FF 
1b430     9C AF 06 F1 | 	add	local05, ##11676
1b434     57 AD 02 F1 | 	add	local04, local05
1b438     0C AC 06 F1 | 	add	local04, #12
1b43c     56 3F 68 FC | 	wrlong	#31, local04
1b440                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1b440                 | '   variables(varnum).vartype=result_string
1b440                 | '   return
1b440     0C 03 90 FD | 	jmp	#LR__2322
1b444                 | LR__2300
1b444                 | ' for i=0 to 2 : arrid(i)=0 : next i
1b444     00 B0 06 F6 | 	mov	local06, #0
1b448                 | LR__2301
1b448     58 AF 02 F6 | 	mov	local05, local06
1b44c     53 AF 06 F1 | 	add	local05, #local01
1b450     00 B2 06 F6 | 	mov	local07, #0
1b454                 | 	'.live	local07
1b454                 | 	'.live	local05
1b454     00 AE 8E F9 | 	altd	local05, #0
1b458     59 AF 02 F6 | 	mov	local05, local07
1b45c     01 B0 06 F1 | 	add	local06, #1
1b460     03 B0 16 F2 | 	cmp	local06, #3 wc
1b464     E0 FF 9F CD |  if_b	jmp	#LR__2301
1b468     4C 00 00 FF 
1b46c     24 64 06 F1 | 	add	objptr, ##38948
1b470     32 AF 02 FB | 	rdlong	local05, objptr
1b474     57 B1 02 F6 | 	mov	local06, local05
1b478     01 B0 66 F0 | 	shl	local06, #1
1b47c     57 B1 02 F1 | 	add	local06, local05
1b480     02 B0 66 F0 | 	shl	local06, #2
1b484     03 00 00 FF 
1b488     04 64 86 F1 | 	sub	objptr, ##1540
1b48c     32 B1 02 F1 | 	add	local06, objptr
1b490     04 B0 06 F1 | 	add	local06, #4
1b494     58 B1 02 FB | 	rdlong	local06, local06
1b498     49 00 00 FF 
1b49c     20 64 86 F1 | 	sub	objptr, ##37408
1b4a0     CC 21 BF FD | 	call	#_pop
1b4a4     3D B5 02 F6 | 	mov	local08, result1
1b4a8     3E B7 02 F6 | 	mov	local09, result2
1b4ac     3F AF 02 F6 | 	mov	local05, result3
1b4b0     E7 B4 62 FC | 	wrlong	local08, fp
1b4b4     04 CE 05 F1 | 	add	fp, #4
1b4b8     E7 B6 62 FC | 	wrlong	local09, fp
1b4bc     04 CE 05 F1 | 	add	fp, #4
1b4c0     E7 AE 62 FC | 	wrlong	local05, fp
1b4c4     08 CE 85 F1 | 	sub	fp, #8
1b4c8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1b4c8                 | ' t1=pop() ' var value
1b4c8                 | ' if numpar>0 then
1b4c8     01 B0 16 F2 | 	cmp	local06, #1 wc
1b4cc     50 00 90 CD |  if_b	jmp	#LR__2304
1b4d0                 | '   for i=numpar to 1 step -1
1b4d0     00 B0 4E F2 | 	cmps	local06, #0 wz
1b4d4     48 00 90 AD |  if_e	jmp	#LR__2303
1b4d8                 | LR__2302
1b4d8     94 21 BF FD | 	call	#_pop
1b4dc     0C CE 05 F1 | 	add	fp, #12
1b4e0     E7 7A 62 FC | 	wrlong	result1, fp
1b4e4     04 CE 05 F1 | 	add	fp, #4
1b4e8     E7 7C 62 FC | 	wrlong	result2, fp
1b4ec     04 CE 05 F1 | 	add	fp, #4
1b4f0     E7 7E 62 FC | 	wrlong	result3, fp
1b4f4     58 AF 02 F6 | 	mov	local05, local06
1b4f8     01 AE 86 F1 | 	sub	local05, #1
1b4fc     53 AF 06 F1 | 	add	local05, #local01
1b500     08 CE 85 F1 | 	sub	fp, #8
1b504     E7 92 02 F6 | 	mov	arg01, fp
1b508     0C CE 85 F1 | 	sub	fp, #12
1b50c     3C 23 BF FD | 	call	#_converttoint
1b510     3D B3 02 F6 | 	mov	local07, result1
1b514                 | 	'.live	local07
1b514                 | 	'.live	local05
1b514     00 AE 8E F9 | 	altd	local05, #0
1b518     59 AF 02 F6 | 	mov	local05, local07
1b51c     EE B1 6E FB | 	djnz	local06, #LR__2302
1b520                 | LR__2303
1b520                 | LR__2304
1b520     04 AC 66 F0 | 	shl	local04, #4
1b524     32 97 02 F6 | 	mov	arg03, objptr
1b528     16 00 00 FF 
1b52c     9C 97 06 F1 | 	add	arg03, ##11676
1b530     4B AD 02 F1 | 	add	local04, arg03
1b534     04 AC 06 F1 | 	add	local04, #4
1b538     56 B9 02 FB | 	rdlong	local10, local04
1b53c     5C 93 02 F6 | 	mov	arg01, local10
1b540     1C 57 B0 FD | 	call	#_pslpeek
1b544     3D BB 32 F9 | 	getword	local11, result1, #0
1b548     5C 93 02 F6 | 	mov	arg01, local10
1b54c     02 92 06 F1 | 	add	arg01, #2
1b550     C0 56 B0 FD | 	call	#_pspeek
1b554     3D BD E2 F8 | 	getbyte	local12, result1, #0
1b558                 | ' esize=pspeek(arrptr+2)
1b558                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1b558     5C 93 02 F6 | 	mov	arg01, local10
1b55c     04 92 06 F1 | 	add	arg01, #4
1b560     FC 56 B0 FD | 	call	#_pslpeek
1b564     3D A7 12 F2 | 	cmp	local01, result1 wc
1b568     28 00 90 3D |  if_ae	jmp	#LR__2305
1b56c     5C 93 02 F6 | 	mov	arg01, local10
1b570     08 92 06 F1 | 	add	arg01, #8
1b574     E8 56 B0 FD | 	call	#_pslpeek
1b578     3D A9 12 F2 | 	cmp	local02, result1 wc
1b57c     14 00 90 3D |  if_ae	jmp	#LR__2305
1b580     5C 93 02 F6 | 	mov	arg01, local10
1b584     0C 92 06 F1 | 	add	arg01, #12
1b588     D4 56 B0 FD | 	call	#_pslpeek
1b58c     3D AB 12 F2 | 	cmp	local03, result1 wc
1b590     10 00 90 CD |  if_b	jmp	#LR__2306
1b594                 | LR__2305
1b594     31 92 06 F6 | 	mov	arg01, #49
1b598     00 94 06 F6 | 	mov	arg02, #0
1b59c     F8 53 B0 FD | 	call	#_printerror
1b5a0     AC 01 90 FD | 	jmp	#LR__2322
1b5a4                 | LR__2306
1b5a4     5C BF 02 F6 | 	mov	local13, local10
1b5a8     10 BE 06 F1 | 	add	local13, #16
1b5ac     5C 93 02 F6 | 	mov	arg01, local10
1b5b0     04 92 06 F1 | 	add	arg01, #4
1b5b4     A8 56 B0 FD | 	call	#_pslpeek
1b5b8     54 7B 02 FD | 	qmul	result1, local02
1b5bc     53 B7 02 F6 | 	mov	local09, local01
1b5c0     5C 93 02 F6 | 	mov	arg01, local10
1b5c4     08 92 06 F1 | 	add	arg01, #8
1b5c8     18 B4 62 FD | 	getqx	local08
1b5cc     5A B7 02 F1 | 	add	local09, local08
1b5d0     8C 56 B0 FD | 	call	#_pslpeek
1b5d4     3D B3 02 F6 | 	mov	local07, result1
1b5d8     04 B8 06 F1 | 	add	local10, #4
1b5dc     5C 93 02 F6 | 	mov	arg01, local10
1b5e0     7C 56 B0 FD | 	call	#_pslpeek
1b5e4     3D B3 02 FD | 	qmul	local07, result1
1b5e8     18 B8 62 FD | 	getqx	local10
1b5ec     55 B9 02 FD | 	qmul	local10, local03
1b5f0     18 A6 62 FD | 	getqx	local01
1b5f4     53 B7 02 F1 | 	add	local09, local01
1b5f8     5B BD 02 FD | 	qmul	local12, local09
1b5fc                 | ' 
1b5fc                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1b5fc                 | ' select case arrtype
1b5fc     5D C1 02 F6 | 	mov	local14, local11
1b600     00 C1 86 F1 | 	sub	local14, #256
1b604     0C C0 26 F3 | 	fle	local14, #12
1b608     18 A6 62 FD | 	getqx	local01
1b60c     53 BF 02 F1 | 	add	local13, local01
1b610     30 C0 62 FD | 	jmprel	local14
1b614                 | LR__2307
1b614     30 00 90 FD | 	jmp	#LR__2308
1b618     50 00 90 FD | 	jmp	#LR__2309
1b61c     5C 00 90 FD | 	jmp	#LR__2310
1b620     68 00 90 FD | 	jmp	#LR__2311
1b624     88 00 90 FD | 	jmp	#LR__2312
1b628     A8 00 90 FD | 	jmp	#LR__2313
1b62c     B4 00 90 FD | 	jmp	#LR__2314
1b630     C0 00 90 FD | 	jmp	#LR__2315
1b634     CC 00 90 FD | 	jmp	#LR__2316
1b638     D8 00 90 FD | 	jmp	#LR__2317
1b63c     E4 00 90 FD | 	jmp	#LR__2318
1b640     F0 00 90 FD | 	jmp	#LR__2319
1b644     FC 00 90 FD | 	jmp	#LR__2320
1b648                 | LR__2308
1b648     E7 92 02 F6 | 	mov	arg01, fp
1b64c     5F 95 02 F6 | 	mov	arg02, local13
1b650     0C 96 06 F6 | 	mov	arg03, #12
1b654     0B 00 00 FF 
1b658     CC 64 06 F1 | 	add	objptr, ##5836
1b65c     94 81 B0 FD | 	call	#_psram_spin2_write
1b660     0B 00 00 FF 
1b664     CC 64 86 F1 | 	sub	objptr, ##5836
1b668     E4 00 90 FD | 	jmp	#LR__2321
1b66c                 | LR__2309
1b66c     E7 94 02 FB | 	rdlong	arg02, fp
1b670     5F 93 02 F6 | 	mov	arg01, local13
1b674     50 55 B0 FD | 	call	#_pspoke
1b678     D4 00 90 FD | 	jmp	#LR__2321
1b67c                 | LR__2310
1b67c     E7 94 02 FB | 	rdlong	arg02, fp
1b680     5F 93 02 F6 | 	mov	arg01, local13
1b684     40 55 B0 FD | 	call	#_pspoke
1b688     C4 00 90 FD | 	jmp	#LR__2321
1b68c                 | LR__2311
1b68c     E7 94 02 FB | 	rdlong	arg02, fp
1b690     5F 93 02 F6 | 	mov	arg01, local13
1b694     30 55 B0 FD | 	call	#_pspoke
1b698     01 BE 06 F1 | 	add	local13, #1
1b69c     E7 94 02 FB | 	rdlong	arg02, fp
1b6a0     08 94 46 F0 | 	shr	arg02, #8
1b6a4     5F 93 02 F6 | 	mov	arg01, local13
1b6a8     1C 55 B0 FD | 	call	#_pspoke
1b6ac     A0 00 90 FD | 	jmp	#LR__2321
1b6b0                 | LR__2312
1b6b0     E7 94 02 FB | 	rdlong	arg02, fp
1b6b4     5F 93 02 F6 | 	mov	arg01, local13
1b6b8     0C 55 B0 FD | 	call	#_pspoke
1b6bc     01 BE 06 F1 | 	add	local13, #1
1b6c0     E7 94 02 FB | 	rdlong	arg02, fp
1b6c4     08 94 46 F0 | 	shr	arg02, #8
1b6c8     5F 93 02 F6 | 	mov	arg01, local13
1b6cc     F8 54 B0 FD | 	call	#_pspoke
1b6d0     7C 00 90 FD | 	jmp	#LR__2321
1b6d4                 | LR__2313
1b6d4     E7 94 02 FB | 	rdlong	arg02, fp
1b6d8     5F 93 02 F6 | 	mov	arg01, local13
1b6dc     50 54 B0 FD | 	call	#_pslpoke
1b6e0     6C 00 90 FD | 	jmp	#LR__2321
1b6e4                 | LR__2314
1b6e4     E7 94 02 FB | 	rdlong	arg02, fp
1b6e8     5F 93 02 F6 | 	mov	arg01, local13
1b6ec     40 54 B0 FD | 	call	#_pslpoke
1b6f0     5C 00 90 FD | 	jmp	#LR__2321
1b6f4                 | LR__2315
1b6f4     E7 94 02 FB | 	rdlong	arg02, fp
1b6f8     5F 93 02 F6 | 	mov	arg01, local13
1b6fc     30 54 B0 FD | 	call	#_pslpoke
1b700     4C 00 90 FD | 	jmp	#LR__2321
1b704                 | LR__2316
1b704     E7 94 02 FB | 	rdlong	arg02, fp
1b708     5F 93 02 F6 | 	mov	arg01, local13
1b70c     20 54 B0 FD | 	call	#_pslpoke
1b710     3C 00 90 FD | 	jmp	#LR__2321
1b714                 | LR__2317
1b714     E7 94 02 FB | 	rdlong	arg02, fp
1b718     5F 93 02 F6 | 	mov	arg01, local13
1b71c     10 54 B0 FD | 	call	#_pslpoke
1b720     2C 00 90 FD | 	jmp	#LR__2321
1b724                 | LR__2318
1b724     E7 94 02 FB | 	rdlong	arg02, fp
1b728     5F 93 02 F6 | 	mov	arg01, local13
1b72c     00 54 B0 FD | 	call	#_pslpoke
1b730     1C 00 90 FD | 	jmp	#LR__2321
1b734                 | LR__2319
1b734     E7 94 02 FB | 	rdlong	arg02, fp
1b738     5F 93 02 F6 | 	mov	arg01, local13
1b73c     F0 53 B0 FD | 	call	#_pslpoke
1b740     0C 00 90 FD | 	jmp	#LR__2321
1b744                 | LR__2320
1b744     32 92 06 F6 | 	mov	arg01, #50
1b748     00 94 06 F6 | 	mov	arg02, #0
1b74c     48 52 B0 FD | 	call	#_printerror
1b750                 | LR__2321
1b750                 | LR__2322
1b750     E7 F0 03 F6 | 	mov	ptra, fp
1b754     F2 00 A0 FD | 	call	#popregs_
1b758                 | _do_assign_ret
1b758     2D 00 64 FD | 	ret
1b75c                 | 
1b75c                 | ' 
1b75c                 | ' 
1b75c                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1b75c                 | ' 
1b75c                 | ' sub do_getvar
1b75c                 | _do_getvar
1b75c     0D CA 05 F6 | 	mov	COUNT_, #13
1b760     E8 00 A0 FD | 	call	#pushregs_
1b764     3C F0 07 F1 | 	add	ptra, #60
1b768                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1b768     4C 00 00 FF 
1b76c     24 64 06 F1 | 	add	objptr, ##38948
1b770     32 A7 02 FB | 	rdlong	local01, objptr
1b774     53 97 02 F6 | 	mov	arg03, local01
1b778     01 96 66 F0 | 	shl	arg03, #1
1b77c     53 97 02 F1 | 	add	arg03, local01
1b780     02 96 66 F0 | 	shl	arg03, #2
1b784     03 00 00 FF 
1b788     04 64 86 F1 | 	sub	objptr, ##1540
1b78c     32 97 02 F1 | 	add	arg03, objptr
1b790     04 96 06 F1 | 	add	arg03, #4
1b794     4B 97 0A FB | 	rdlong	arg03, arg03 wz
1b798     49 00 00 FF 
1b79c     20 64 86 F1 | 	sub	objptr, ##37408
1b7a0     C4 00 90 5D |  if_ne	jmp	#LR__2331
1b7a4     4C 00 00 FF 
1b7a8     24 64 06 F1 | 	add	objptr, ##38948
1b7ac     32 A7 02 FB | 	rdlong	local01, objptr
1b7b0     53 93 02 F6 | 	mov	arg01, local01
1b7b4     01 92 66 F0 | 	shl	arg01, #1
1b7b8     53 93 02 F1 | 	add	arg01, local01
1b7bc     02 92 66 F0 | 	shl	arg01, #2
1b7c0     03 00 00 FF 
1b7c4     04 64 86 F1 | 	sub	objptr, ##1540
1b7c8     32 93 02 F1 | 	add	arg01, objptr
1b7cc     49 A7 02 FB | 	rdlong	local01, arg01
1b7d0     04 A6 66 F0 | 	shl	local01, #4
1b7d4     32 00 00 FF 
1b7d8     84 64 86 F1 | 	sub	objptr, ##25732
1b7dc     32 A7 02 F1 | 	add	local01, objptr
1b7e0     04 A6 06 F1 | 	add	local01, #4
1b7e4     53 93 02 FB | 	rdlong	arg01, local01
1b7e8     04 A6 06 F1 | 	add	local01, #4
1b7ec     53 A7 02 FB | 	rdlong	local01, local01
1b7f0     E7 92 62 FC | 	wrlong	arg01, fp
1b7f4     04 CE 05 F1 | 	add	fp, #4
1b7f8     E7 A6 62 FC | 	wrlong	local01, fp
1b7fc     35 00 00 FF 
1b800     88 64 06 F1 | 	add	objptr, ##27272
1b804     32 A7 02 FB | 	rdlong	local01, objptr
1b808     53 93 02 F6 | 	mov	arg01, local01
1b80c     01 92 66 F0 | 	shl	arg01, #1
1b810     53 93 02 F1 | 	add	arg01, local01
1b814     02 92 66 F0 | 	shl	arg01, #2
1b818     03 00 00 FF 
1b81c     04 64 86 F1 | 	sub	objptr, ##1540
1b820     32 93 02 F1 | 	add	arg01, objptr
1b824     49 A7 02 FB | 	rdlong	local01, arg01
1b828     04 A6 66 F0 | 	shl	local01, #4
1b82c     32 00 00 FF 
1b830     84 64 86 F1 | 	sub	objptr, ##25732
1b834     32 A7 02 F1 | 	add	local01, objptr
1b838     0C A6 06 F1 | 	add	local01, #12
1b83c     53 A7 02 FB | 	rdlong	local01, local01
1b840     04 CE 05 F1 | 	add	fp, #4
1b844     E7 A6 62 FC | 	wrlong	local01, fp
1b848                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1b848                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1b848                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1b848     08 CE 85 F1 | 	sub	fp, #8
1b84c     00 A7 16 F2 | 	cmp	local01, #256 wc
1b850     16 00 00 FF 
1b854     9C 65 86 F1 | 	sub	objptr, ##11676
1b858     0C 00 90 3D |  if_ae	jmp	#LR__2330
1b85c     E7 92 02 F6 | 	mov	arg01, fp
1b860     9C 1E BF FD | 	call	#_push
1b864     94 03 90 FD | 	jmp	#LR__2352
1b868                 | LR__2330
1b868                 | LR__2331
1b868     4C 00 00 FF 
1b86c     24 64 06 F1 | 	add	objptr, ##38948
1b870     32 97 02 FB | 	rdlong	arg03, objptr
1b874     4B 95 02 F6 | 	mov	arg02, arg03
1b878     01 94 66 F0 | 	shl	arg02, #1
1b87c     4B 95 02 F1 | 	add	arg02, arg03
1b880     02 94 66 F0 | 	shl	arg02, #2
1b884     03 00 00 FF 
1b888     04 64 86 F1 | 	sub	objptr, ##1540
1b88c     32 95 02 F1 | 	add	arg02, objptr
1b890     4A 97 02 FB | 	rdlong	arg03, arg02
1b894     04 96 66 F0 | 	shl	arg03, #4
1b898     32 00 00 FF 
1b89c     84 64 86 F1 | 	sub	objptr, ##25732
1b8a0     32 97 02 F1 | 	add	arg03, objptr
1b8a4     04 96 06 F1 | 	add	arg03, #4
1b8a8     4B A9 02 FB | 	rdlong	local02, arg03
1b8ac     54 93 02 F6 | 	mov	arg01, local02
1b8b0     16 00 00 FF 
1b8b4     9C 65 86 F1 | 	sub	objptr, ##11676
1b8b8     A4 53 B0 FD | 	call	#_pslpeek
1b8bc     3D AB 32 F9 | 	getword	local03, result1, #0
1b8c0     4C 00 00 FF 
1b8c4     24 64 06 F1 | 	add	objptr, ##38948
1b8c8     32 97 02 FB | 	rdlong	arg03, objptr
1b8cc     4B 95 02 F6 | 	mov	arg02, arg03
1b8d0     01 94 66 F0 | 	shl	arg02, #1
1b8d4     4B 95 02 F1 | 	add	arg02, arg03
1b8d8     02 94 66 F0 | 	shl	arg02, #2
1b8dc     03 00 00 FF 
1b8e0     04 64 86 F1 | 	sub	objptr, ##1540
1b8e4     32 95 02 F1 | 	add	arg02, objptr
1b8e8     04 94 06 F1 | 	add	arg02, #4
1b8ec     4A AD 02 FB | 	rdlong	local04, arg02
1b8f0     54 93 02 F6 | 	mov	arg01, local02
1b8f4     02 92 06 F1 | 	add	arg01, #2
1b8f8     49 00 00 FF 
1b8fc     20 64 86 F1 | 	sub	objptr, ##37408
1b900     10 53 B0 FD | 	call	#_pspeek
1b904     3D AF E2 F8 | 	getbyte	local05, result1, #0
1b908     54 93 02 F6 | 	mov	arg01, local02
1b90c     04 92 06 F1 | 	add	arg01, #4
1b910     4C 53 B0 FD | 	call	#_pslpeek
1b914     3D B1 02 F6 | 	mov	local06, result1
1b918     54 93 02 F6 | 	mov	arg01, local02
1b91c     08 92 06 F1 | 	add	arg01, #8
1b920     3C 53 B0 FD | 	call	#_pslpeek
1b924     3D B3 02 F6 | 	mov	local07, result1
1b928     54 93 02 F6 | 	mov	arg01, local02
1b92c     0C 92 06 F1 | 	add	arg01, #12
1b930     2C 53 B0 FD | 	call	#_pslpeek
1b934                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1b934                 | ' esize=pspeek(arrptr+2)
1b934                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1b934                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1b934                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1b934                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1b934     03 AC 16 F2 | 	cmp	local04, #3 wc
1b938     30 00 90 CD |  if_b	jmp	#LR__2332
1b93c     30 1D BF FD | 	call	#_pop
1b940     3F 97 02 F6 | 	mov	arg03, result3
1b944     E7 7A 62 FC | 	wrlong	result1, fp
1b948     04 CE 05 F1 | 	add	fp, #4
1b94c     E7 7C 62 FC | 	wrlong	result2, fp
1b950     04 CE 05 F1 | 	add	fp, #4
1b954     E7 96 62 FC | 	wrlong	arg03, fp
1b958     08 CE 85 F1 | 	sub	fp, #8
1b95c     E7 92 02 F6 | 	mov	arg01, fp
1b960     E8 1E BF FD | 	call	#_converttoint
1b964     3D B5 02 F6 | 	mov	local08, result1
1b968     04 00 90 FD | 	jmp	#LR__2333
1b96c                 | LR__2332
1b96c     00 B4 06 F6 | 	mov	local08, #0
1b970                 | LR__2333
1b970                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1b970     02 AC 16 F2 | 	cmp	local04, #2 wc
1b974     30 00 90 CD |  if_b	jmp	#LR__2334
1b978     F4 1C BF FD | 	call	#_pop
1b97c     3F 97 02 F6 | 	mov	arg03, result3
1b980     E7 7A 62 FC | 	wrlong	result1, fp
1b984     04 CE 05 F1 | 	add	fp, #4
1b988     E7 7C 62 FC | 	wrlong	result2, fp
1b98c     04 CE 05 F1 | 	add	fp, #4
1b990     E7 96 62 FC | 	wrlong	arg03, fp
1b994     08 CE 85 F1 | 	sub	fp, #8
1b998     E7 92 02 F6 | 	mov	arg01, fp
1b99c     AC 1E BF FD | 	call	#_converttoint
1b9a0     3D B7 02 F6 | 	mov	local09, result1
1b9a4     04 00 90 FD | 	jmp	#LR__2335
1b9a8                 | LR__2334
1b9a8     00 B6 06 F6 | 	mov	local09, #0
1b9ac                 | LR__2335
1b9ac                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1b9ac     01 AC 16 F2 | 	cmp	local04, #1 wc
1b9b0     30 00 90 CD |  if_b	jmp	#LR__2336
1b9b4     B8 1C BF FD | 	call	#_pop
1b9b8     3F AD 02 F6 | 	mov	local04, result3
1b9bc     E7 7A 62 FC | 	wrlong	result1, fp
1b9c0     04 CE 05 F1 | 	add	fp, #4
1b9c4     E7 7C 62 FC | 	wrlong	result2, fp
1b9c8     04 CE 05 F1 | 	add	fp, #4
1b9cc     E7 AC 62 FC | 	wrlong	local04, fp
1b9d0     08 CE 85 F1 | 	sub	fp, #8
1b9d4     E7 92 02 F6 | 	mov	arg01, fp
1b9d8     70 1E BF FD | 	call	#_converttoint
1b9dc     3D B9 02 F6 | 	mov	local10, result1
1b9e0     04 00 90 FD | 	jmp	#LR__2337
1b9e4                 | LR__2336
1b9e4     00 B8 06 F6 | 	mov	local10, #0
1b9e8                 | LR__2337
1b9e8     58 B7 02 FD | 	qmul	local09, local06
1b9ec     54 BB 02 F6 | 	mov	local11, local02
1b9f0     10 BA 06 F1 | 	add	local11, #16
1b9f4     5C BD 02 F6 | 	mov	local12, local10
1b9f8     18 B8 62 FD | 	getqx	local10
1b9fc     58 B5 02 FD | 	qmul	local08, local06
1ba00     5C BD 02 F1 | 	add	local12, local10
1ba04     18 B8 62 FD | 	getqx	local10
1ba08     59 B9 02 FD | 	qmul	local10, local07
1ba0c     18 B8 62 FD | 	getqx	local10
1ba10     5C BD 02 F1 | 	add	local12, local10
1ba14     57 BD 02 FD | 	qmul	local12, local05
1ba18                 | ' 
1ba18                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1ba18                 | ' 
1ba18                 | ' select case vartype
1ba18     55 BF 02 F6 | 	mov	local13, local03
1ba1c     00 BF 86 F1 | 	sub	local13, #256
1ba20     0C BE 26 F3 | 	fle	local13, #12
1ba24     18 B8 62 FD | 	getqx	local10
1ba28     5C BB 02 F1 | 	add	local11, local10
1ba2c     30 BE 62 FD | 	jmprel	local13
1ba30                 | LR__2338
1ba30     30 00 90 FD | 	jmp	#LR__2339
1ba34     50 00 90 FD | 	jmp	#LR__2340
1ba38     80 00 90 FD | 	jmp	#LR__2341
1ba3c     9C 00 90 FD | 	jmp	#LR__2342
1ba40     D4 00 90 FD | 	jmp	#LR__2343
1ba44     F0 00 90 FD | 	jmp	#LR__2344
1ba48     08 01 90 FD | 	jmp	#LR__2345
1ba4c     20 01 90 FD | 	jmp	#LR__2346
1ba50     30 01 90 FD | 	jmp	#LR__2347
1ba54     40 01 90 FD | 	jmp	#LR__2348
1ba58     58 01 90 FD | 	jmp	#LR__2349
1ba5c     68 01 90 FD | 	jmp	#LR__2350
1ba60     90 01 90 FD | 	jmp	#LR__2351
1ba64                 | LR__2339
1ba64     E7 92 02 F6 | 	mov	arg01, fp
1ba68     5D 95 02 F6 | 	mov	arg02, local11
1ba6c     0C 96 06 F6 | 	mov	arg03, #12
1ba70     0B 00 00 FF 
1ba74     CC 64 06 F1 | 	add	objptr, ##5836
1ba78     DC 7C B0 FD | 	call	#_psram_spin2_read1
1ba7c     0B 00 00 FF 
1ba80     CC 64 86 F1 | 	sub	objptr, ##5836
1ba84     6C 01 90 FD | 	jmp	#LR__2351
1ba88                 | LR__2340
1ba88     08 CE 05 F1 | 	add	fp, #8
1ba8c     E7 38 68 FC | 	wrlong	#28, fp
1ba90     08 CE 85 F1 | 	sub	fp, #8
1ba94     5D 93 02 F6 | 	mov	arg01, local11
1ba98     78 51 B0 FD | 	call	#_pspeek
1ba9c     3D 7B E2 F8 | 	getbyte	result1, result1, #0
1baa0     E7 7A 62 FC | 	wrlong	result1, fp
1baa4     80 7A 16 F2 | 	cmp	result1, #128 wc
1baa8     00 A7 66 36 |  if_ae	neg	local01, #256
1baac     3D BD 02 36 |  if_ae	mov	local12, result1
1bab0     5E A7 42 35 |  if_ae	or	local01, local12
1bab4     E7 A6 62 3C |  if_ae	wrlong	local01, fp
1bab8     38 01 90 FD | 	jmp	#LR__2351
1babc                 | LR__2341
1babc     08 CE 05 F1 | 	add	fp, #8
1bac0     E7 3A 68 FC | 	wrlong	#29, fp
1bac4     08 CE 85 F1 | 	sub	fp, #8
1bac8     5D 93 02 F6 | 	mov	arg01, local11
1bacc     44 51 B0 FD | 	call	#_pspeek
1bad0     3D 7B E2 F8 | 	getbyte	result1, result1, #0
1bad4     E7 7A 62 FC | 	wrlong	result1, fp
1bad8     18 01 90 FD | 	jmp	#LR__2351
1badc                 | LR__2342
1badc     08 CE 05 F1 | 	add	fp, #8
1bae0     E7 38 68 FC | 	wrlong	#28, fp
1bae4     08 CE 85 F1 | 	sub	fp, #8
1bae8     5D 93 02 F6 | 	mov	arg01, local11
1baec     70 51 B0 FD | 	call	#_pslpeek
1baf0     3D 7B 32 F9 | 	getword	result1, result1, #0
1baf4     E7 7A 62 FC | 	wrlong	result1, fp
1baf8     40 00 00 FF 
1bafc     00 7A 16 F2 | 	cmp	result1, ##32768 wc
1bb00     FF 7F 00 3F 
1bb04     00 A7 06 36 |  if_ae	mov	local01, ##16776960
1bb08     3D BD 02 36 |  if_ae	mov	local12, result1
1bb0c     5E A7 42 35 |  if_ae	or	local01, local12
1bb10     E7 A6 62 3C |  if_ae	wrlong	local01, fp
1bb14     DC 00 90 FD | 	jmp	#LR__2351
1bb18                 | LR__2343
1bb18     08 CE 05 F1 | 	add	fp, #8
1bb1c     E7 3A 68 FC | 	wrlong	#29, fp
1bb20     08 CE 85 F1 | 	sub	fp, #8
1bb24     5D 93 02 F6 | 	mov	arg01, local11
1bb28     34 51 B0 FD | 	call	#_pslpeek
1bb2c     3D 7B 32 F9 | 	getword	result1, result1, #0
1bb30     E7 7A 62 FC | 	wrlong	result1, fp
1bb34     BC 00 90 FD | 	jmp	#LR__2351
1bb38                 | LR__2344
1bb38     08 CE 05 F1 | 	add	fp, #8
1bb3c     E7 38 68 FC | 	wrlong	#28, fp
1bb40     08 CE 85 F1 | 	sub	fp, #8
1bb44     5D 93 02 F6 | 	mov	arg01, local11
1bb48     14 51 B0 FD | 	call	#_pslpeek
1bb4c     E7 7A 62 FC | 	wrlong	result1, fp
1bb50     A0 00 90 FD | 	jmp	#LR__2351
1bb54                 | LR__2345
1bb54     08 CE 05 F1 | 	add	fp, #8
1bb58     E7 3A 68 FC | 	wrlong	#29, fp
1bb5c     08 CE 85 F1 | 	sub	fp, #8
1bb60     5D 93 02 F6 | 	mov	arg01, local11
1bb64     F8 50 B0 FD | 	call	#_pslpeek
1bb68     E7 7A 62 FC | 	wrlong	result1, fp
1bb6c     84 00 90 FD | 	jmp	#LR__2351
1bb70                 | LR__2346
1bb70     08 CE 05 F1 | 	add	fp, #8
1bb74     E7 FE 69 FC | 	wrlong	#255, fp
1bb78     08 CE 85 F1 | 	sub	fp, #8
1bb7c     E7 60 68 FC | 	wrlong	#48, fp
1bb80     70 00 90 FD | 	jmp	#LR__2351
1bb84                 | LR__2347
1bb84     08 CE 05 F1 | 	add	fp, #8
1bb88     E7 FE 69 FC | 	wrlong	#255, fp
1bb8c     08 CE 85 F1 | 	sub	fp, #8
1bb90     E7 60 68 FC | 	wrlong	#48, fp
1bb94     5C 00 90 FD | 	jmp	#LR__2351
1bb98                 | LR__2348
1bb98     08 CE 05 F1 | 	add	fp, #8
1bb9c     E7 3C 68 FC | 	wrlong	#30, fp
1bba0     08 CE 85 F1 | 	sub	fp, #8
1bba4     5D 93 02 F6 | 	mov	arg01, local11
1bba8     B4 50 B0 FD | 	call	#_pslpeek
1bbac     E7 7A 62 FC | 	wrlong	result1, fp
1bbb0     40 00 90 FD | 	jmp	#LR__2351
1bbb4                 | LR__2349
1bbb4     08 CE 05 F1 | 	add	fp, #8
1bbb8     E7 FE 69 FC | 	wrlong	#255, fp
1bbbc     08 CE 85 F1 | 	sub	fp, #8
1bbc0     E7 60 68 FC | 	wrlong	#48, fp
1bbc4     2C 00 90 FD | 	jmp	#LR__2351
1bbc8                 | LR__2350
1bbc8     08 CE 05 F1 | 	add	fp, #8
1bbcc     E7 3E 68 FC | 	wrlong	#31, fp
1bbd0     08 CE 85 F1 | 	sub	fp, #8
1bbd4     5D 93 02 F6 | 	mov	arg01, local11
1bbd8     84 50 B0 FD | 	call	#_pslpeek
1bbdc     E7 7A 62 FC | 	wrlong	result1, fp
1bbe0     00 04 00 FF 
1bbe4     00 7A 16 F2 | 	cmp	result1, ##524288 wc
1bbe8     08 CE 05 31 |  if_ae	add	fp, #8
1bbec     E7 56 68 3C |  if_ae	wrlong	#43, fp
1bbf0     08 CE 85 31 |  if_ae	sub	fp, #8
1bbf4                 | LR__2351
1bbf4     E7 92 02 F6 | 	mov	arg01, fp
1bbf8     04 1B BF FD | 	call	#_push
1bbfc                 | LR__2352
1bbfc     E7 F0 03 F6 | 	mov	ptra, fp
1bc00     F2 00 A0 FD | 	call	#popregs_
1bc04                 | _do_getvar_ret
1bc04     2D 00 64 FD | 	ret
1bc08                 | 
1bc08                 | ' 
1bc08                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1bc08                 | ' 
1bc08                 | ' sub do_getaddr
1bc08                 | _do_getaddr
1bc08     09 CA 05 F6 | 	mov	COUNT_, #9
1bc0c     E8 00 A0 FD | 	call	#pushregs_
1bc10     38 F0 07 F1 | 	add	ptra, #56
1bc14                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1bc14                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1bc14     4C 00 00 FF 
1bc18     24 64 06 F1 | 	add	objptr, ##38948
1bc1c     32 93 02 FB | 	rdlong	arg01, objptr
1bc20     49 7D 02 F6 | 	mov	result2, arg01
1bc24     01 7C 66 F0 | 	shl	result2, #1
1bc28     49 7D 02 F1 | 	add	result2, arg01
1bc2c     02 7C 66 F0 | 	shl	result2, #2
1bc30     03 00 00 FF 
1bc34     04 64 86 F1 | 	sub	objptr, ##1540
1bc38     32 7D 02 F1 | 	add	result2, objptr
1bc3c     04 7C 06 F1 | 	add	result2, #4
1bc40     3E 7D 0A FB | 	rdlong	result2, result2 wz
1bc44     49 00 00 FF 
1bc48     20 64 86 F1 | 	sub	objptr, ##37408
1bc4c     10 01 90 5D |  if_ne	jmp	#LR__2360
1bc50     4C 00 00 FF 
1bc54     24 64 06 F1 | 	add	objptr, ##38948
1bc58     32 93 02 FB | 	rdlong	arg01, objptr
1bc5c     49 7D 02 F6 | 	mov	result2, arg01
1bc60     01 7C 66 F0 | 	shl	result2, #1
1bc64     49 7D 02 F1 | 	add	result2, arg01
1bc68     02 7C 66 F0 | 	shl	result2, #2
1bc6c     03 00 00 FF 
1bc70     04 64 86 F1 | 	sub	objptr, ##1540
1bc74     32 7D 02 F1 | 	add	result2, objptr
1bc78     3E 93 02 FB | 	rdlong	arg01, result2
1bc7c     04 92 66 F0 | 	shl	arg01, #4
1bc80     32 00 00 FF 
1bc84     84 64 86 F1 | 	sub	objptr, ##25732
1bc88     32 93 02 F1 | 	add	arg01, objptr
1bc8c     0C 92 06 F1 | 	add	arg01, #12
1bc90     49 93 02 FB | 	rdlong	arg01, arg01
1bc94     08 CE 05 F1 | 	add	fp, #8
1bc98     E7 92 62 FC | 	wrlong	arg01, fp
1bc9c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1bc9c                 | '    if t1.result_type>=array_no_type then goto 2200
1bc9c     08 CE 85 F1 | 	sub	fp, #8
1bca0     00 93 16 F2 | 	cmp	arg01, #256 wc
1bca4     16 00 00 FF 
1bca8     9C 65 86 F1 | 	sub	objptr, ##11676
1bcac     B0 00 90 3D |  if_ae	jmp	#LR__2361
1bcb0     4C 00 00 FF 
1bcb4     24 64 06 F1 | 	add	objptr, ##38948
1bcb8     32 93 02 FB | 	rdlong	arg01, objptr
1bcbc     49 7F 02 F6 | 	mov	result3, arg01
1bcc0     01 7E 66 F0 | 	shl	result3, #1
1bcc4     49 7F 02 F1 | 	add	result3, arg01
1bcc8     02 7E 66 F0 | 	shl	result3, #2
1bccc     03 00 00 FF 
1bcd0     04 64 86 F1 | 	sub	objptr, ##1540
1bcd4     32 7F 02 F1 | 	add	result3, objptr
1bcd8     3F 7B 02 FB | 	rdlong	result1, result3
1bcdc     04 7A 66 F0 | 	shl	result1, #4
1bce0     32 00 00 FF 
1bce4     84 64 86 F1 | 	sub	objptr, ##25732
1bce8     32 7B 02 F1 | 	add	result1, objptr
1bcec     04 7A 06 F1 | 	add	result1, #4
1bcf0     E7 7A 62 FC | 	wrlong	result1, fp
1bcf4     35 00 00 FF 
1bcf8     88 64 06 F1 | 	add	objptr, ##27272
1bcfc     32 7F 02 FB | 	rdlong	result3, objptr
1bd00     3F 93 02 F6 | 	mov	arg01, result3
1bd04     01 92 66 F0 | 	shl	arg01, #1
1bd08     3F 93 02 F1 | 	add	arg01, result3
1bd0c     02 92 66 F0 | 	shl	arg01, #2
1bd10     03 00 00 FF 
1bd14     04 64 86 F1 | 	sub	objptr, ##1540
1bd18     32 93 02 F1 | 	add	arg01, objptr
1bd1c     49 93 02 FB | 	rdlong	arg01, arg01
1bd20     04 92 66 F0 | 	shl	arg01, #4
1bd24     32 00 00 FF 
1bd28     84 64 86 F1 | 	sub	objptr, ##25732
1bd2c     32 93 02 F1 | 	add	arg01, objptr
1bd30     0C 92 06 F1 | 	add	arg01, #12
1bd34     49 93 02 FB | 	rdlong	arg01, arg01
1bd38     04 CE 05 F1 | 	add	fp, #4
1bd3c     E7 92 62 FC | 	wrlong	arg01, fp
1bd40     04 CE 05 F1 | 	add	fp, #4
1bd44     E7 3A 68 FC | 	wrlong	#29, fp
1bd48     08 CE 85 F1 | 	sub	fp, #8
1bd4c     E7 92 02 F6 | 	mov	arg01, fp
1bd50     16 00 00 FF 
1bd54     9C 65 86 F1 | 	sub	objptr, ##11676
1bd58     A4 19 BF FD | 	call	#_push
1bd5c                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1bd5c                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1bd5c                 | '   t1.result_type=result_uint
1bd5c                 | '   push t1 : return
1bd5c     24 02 90 FD | 	jmp	#LR__2370
1bd60                 | LR__2360
1bd60                 | LR__2361
1bd60     4C 00 00 FF 
1bd64     24 64 06 F1 | 	add	objptr, ##38948
1bd68     32 A7 02 FB | 	rdlong	local01, objptr
1bd6c     53 7D 02 F6 | 	mov	result2, local01
1bd70     01 7C 66 F0 | 	shl	result2, #1
1bd74     53 7D 02 F1 | 	add	result2, local01
1bd78     02 7C 66 F0 | 	shl	result2, #2
1bd7c     03 00 00 FF 
1bd80     04 64 86 F1 | 	sub	objptr, ##1540
1bd84     32 7D 02 F1 | 	add	result2, objptr
1bd88     3E 7D 02 FB | 	rdlong	result2, result2
1bd8c     04 7C 66 F0 | 	shl	result2, #4
1bd90     32 00 00 FF 
1bd94     84 64 86 F1 | 	sub	objptr, ##25732
1bd98     32 7D 02 F1 | 	add	result2, objptr
1bd9c     04 7C 06 F1 | 	add	result2, #4
1bda0     3E A9 02 FB | 	rdlong	local02, result2
1bda4     53 93 02 F6 | 	mov	arg01, local01
1bda8     01 92 66 F0 | 	shl	arg01, #1
1bdac     53 93 02 F1 | 	add	arg01, local01
1bdb0     02 92 66 F0 | 	shl	arg01, #2
1bdb4     32 00 00 FF 
1bdb8     84 64 06 F1 | 	add	objptr, ##25732
1bdbc     32 93 02 F1 | 	add	arg01, objptr
1bdc0     49 93 02 FB | 	rdlong	arg01, arg01
1bdc4     04 92 66 F0 | 	shl	arg01, #4
1bdc8     32 00 00 FF 
1bdcc     84 64 86 F1 | 	sub	objptr, ##25732
1bdd0     32 93 02 F1 | 	add	arg01, objptr
1bdd4     0C 92 06 F1 | 	add	arg01, #12
1bdd8     49 93 02 FB | 	rdlong	arg01, arg01
1bddc     04 CE 05 F1 | 	add	fp, #4
1bde0     E7 92 62 FC | 	wrlong	arg01, fp
1bde4     04 CE 85 F1 | 	sub	fp, #4
1bde8     54 93 02 F6 | 	mov	arg01, local02
1bdec     16 00 00 FF 
1bdf0     9C 65 86 F1 | 	sub	objptr, ##11676
1bdf4     68 4E B0 FD | 	call	#_pslpeek
1bdf8     4C 00 00 FF 
1bdfc     24 64 06 F1 | 	add	objptr, ##38948
1be00     32 A7 02 FB | 	rdlong	local01, objptr
1be04     53 93 02 F6 | 	mov	arg01, local01
1be08     01 92 66 F0 | 	shl	arg01, #1
1be0c     53 93 02 F1 | 	add	arg01, local01
1be10     02 92 66 F0 | 	shl	arg01, #2
1be14     03 00 00 FF 
1be18     04 64 86 F1 | 	sub	objptr, ##1540
1be1c     32 93 02 F1 | 	add	arg01, objptr
1be20     04 92 06 F1 | 	add	arg01, #4
1be24     49 AB 02 FB | 	rdlong	local03, arg01
1be28     54 93 02 F6 | 	mov	arg01, local02
1be2c     02 92 06 F1 | 	add	arg01, #2
1be30     49 00 00 FF 
1be34     20 64 86 F1 | 	sub	objptr, ##37408
1be38     D8 4D B0 FD | 	call	#_pspeek
1be3c     3D AD E2 F8 | 	getbyte	local04, result1, #0
1be40     54 93 02 F6 | 	mov	arg01, local02
1be44     04 92 06 F1 | 	add	arg01, #4
1be48     14 4E B0 FD | 	call	#_pslpeek
1be4c     3D AF 02 F6 | 	mov	local05, result1
1be50     54 93 02 F6 | 	mov	arg01, local02
1be54     08 92 06 F1 | 	add	arg01, #8
1be58     04 4E B0 FD | 	call	#_pslpeek
1be5c     3D B1 02 F6 | 	mov	local06, result1
1be60     54 93 02 F6 | 	mov	arg01, local02
1be64     0C 92 06 F1 | 	add	arg01, #12
1be68     F4 4D B0 FD | 	call	#_pslpeek
1be6c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1be6c                 | ' esize=pspeek(arrptr+2)
1be6c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1be6c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1be6c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1be6c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1be6c     03 AA 16 F2 | 	cmp	local03, #3 wc
1be70     30 00 90 CD |  if_b	jmp	#LR__2362
1be74     F8 17 BF FD | 	call	#_pop
1be78     3F A7 02 F6 | 	mov	local01, result3
1be7c     E7 7A 62 FC | 	wrlong	result1, fp
1be80     04 CE 05 F1 | 	add	fp, #4
1be84     E7 7C 62 FC | 	wrlong	result2, fp
1be88     04 CE 05 F1 | 	add	fp, #4
1be8c     E7 A6 62 FC | 	wrlong	local01, fp
1be90     08 CE 85 F1 | 	sub	fp, #8
1be94     E7 92 02 F6 | 	mov	arg01, fp
1be98     B0 19 BF FD | 	call	#_converttoint
1be9c     3D B3 02 F6 | 	mov	local07, result1
1bea0     04 00 90 FD | 	jmp	#LR__2363
1bea4                 | LR__2362
1bea4     00 B2 06 F6 | 	mov	local07, #0
1bea8                 | LR__2363
1bea8                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1bea8     02 AA 16 F2 | 	cmp	local03, #2 wc
1beac     30 00 90 CD |  if_b	jmp	#LR__2364
1beb0     BC 17 BF FD | 	call	#_pop
1beb4     3F A7 02 F6 | 	mov	local01, result3
1beb8     E7 7A 62 FC | 	wrlong	result1, fp
1bebc     04 CE 05 F1 | 	add	fp, #4
1bec0     E7 7C 62 FC | 	wrlong	result2, fp
1bec4     04 CE 05 F1 | 	add	fp, #4
1bec8     E7 A6 62 FC | 	wrlong	local01, fp
1becc     08 CE 85 F1 | 	sub	fp, #8
1bed0     E7 92 02 F6 | 	mov	arg01, fp
1bed4     74 19 BF FD | 	call	#_converttoint
1bed8     3D B5 02 F6 | 	mov	local08, result1
1bedc     04 00 90 FD | 	jmp	#LR__2365
1bee0                 | LR__2364
1bee0     00 B4 06 F6 | 	mov	local08, #0
1bee4                 | LR__2365
1bee4                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1bee4     01 AA 16 F2 | 	cmp	local03, #1 wc
1bee8     30 00 90 CD |  if_b	jmp	#LR__2366
1beec     80 17 BF FD | 	call	#_pop
1bef0     3F A7 02 F6 | 	mov	local01, result3
1bef4     E7 7A 62 FC | 	wrlong	result1, fp
1bef8     04 CE 05 F1 | 	add	fp, #4
1befc     E7 7C 62 FC | 	wrlong	result2, fp
1bf00     04 CE 05 F1 | 	add	fp, #4
1bf04     E7 A6 62 FC | 	wrlong	local01, fp
1bf08     08 CE 85 F1 | 	sub	fp, #8
1bf0c     E7 92 02 F6 | 	mov	arg01, fp
1bf10     38 19 BF FD | 	call	#_converttoint
1bf14     3D B7 02 F6 | 	mov	local09, result1
1bf18     04 00 90 FD | 	jmp	#LR__2367
1bf1c                 | LR__2366
1bf1c     00 B6 06 F6 | 	mov	local09, #0
1bf20                 | LR__2367
1bf20                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1bf20                 | ' if numpar>0 then
1bf20     01 AA 16 F2 | 	cmp	local03, #1 wc
1bf24     44 00 90 CD |  if_b	jmp	#LR__2368
1bf28     57 B5 02 FD | 	qmul	local08, local05
1bf2c     10 A8 06 F1 | 	add	local02, #16
1bf30     18 B4 62 FD | 	getqx	local08
1bf34     57 B3 02 FD | 	qmul	local07, local05
1bf38     5A B7 02 F1 | 	add	local09, local08
1bf3c     18 B4 62 FD | 	getqx	local08
1bf40     58 B5 02 FD | 	qmul	local08, local06
1bf44     18 B4 62 FD | 	getqx	local08
1bf48     5A B7 02 F1 | 	add	local09, local08
1bf4c     56 B7 02 FD | 	qmul	local09, local04
1bf50     08 CE 05 F1 | 	add	fp, #8
1bf54     E7 3A 68 FC | 	wrlong	#29, fp
1bf58     08 CE 85 F1 | 	sub	fp, #8
1bf5c     18 A6 62 FD | 	getqx	local01
1bf60     53 A9 02 F1 | 	add	local02, local01
1bf64     E7 A8 62 FC | 	wrlong	local02, fp
1bf68     10 00 90 FD | 	jmp	#LR__2369
1bf6c                 | LR__2368
1bf6c     08 CE 05 F1 | 	add	fp, #8
1bf70     E7 3A 68 FC | 	wrlong	#29, fp
1bf74     08 CE 85 F1 | 	sub	fp, #8
1bf78     E7 A8 62 FC | 	wrlong	local02, fp
1bf7c                 | LR__2369
1bf7c     E7 92 02 F6 | 	mov	arg01, fp
1bf80     7C 17 BF FD | 	call	#_push
1bf84                 | LR__2370
1bf84     E7 F0 03 F6 | 	mov	ptra, fp
1bf88     F2 00 A0 FD | 	call	#popregs_
1bf8c                 | _do_getaddr_ret
1bf8c     2D 00 64 FD | 	ret
1bf90                 | 
1bf90                 | ' 
1bf90                 | ' 
1bf90                 | ' 
1bf90                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1bf90                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1bf90                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1bf90                 | ' 
1bf90                 | ' '--------------------------------- AND 
1bf90                 | ' 
1bf90                 | ' sub do_and 
1bf90                 | _do_and
1bf90     05 CA 05 F6 | 	mov	COUNT_, #5
1bf94     E8 00 A0 FD | 	call	#pushregs_
1bf98     18 F0 07 F1 | 	add	ptra, #24
1bf9c     D0 16 BF FD | 	call	#_pop
1bfa0     3D A7 02 F6 | 	mov	local01, result1
1bfa4     3E 93 02 F6 | 	mov	arg01, result2
1bfa8     3F AD 02 F6 | 	mov	local04, result3
1bfac     49 A9 02 F6 | 	mov	local02, arg01
1bfb0     56 AB 02 F6 | 	mov	local03, local04
1bfb4     B8 16 BF FD | 	call	#_pop
1bfb8     3F AF 02 F6 | 	mov	local05, result3
1bfbc     E7 7A 62 FC | 	wrlong	result1, fp
1bfc0     04 CE 05 F1 | 	add	fp, #4
1bfc4     E7 7C 62 FC | 	wrlong	result2, fp
1bfc8     04 CE 05 F1 | 	add	fp, #4
1bfcc     E7 AE 62 FC | 	wrlong	local05, fp
1bfd0                 | ' 
1bfd0                 | ' t2=pop()
1bfd0                 | ' t1=pop()
1bfd0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1bfd0     08 CE 85 F1 | 	sub	fp, #8
1bfd4     1C AE 0E F2 | 	cmp	local05, #28 wz
1bfd8     E7 AE 02 AB |  if_e	rdlong	local05, fp
1bfdc     E7 AE 62 AC |  if_e	wrlong	local05, fp
1bfe0     08 CE 05 A1 |  if_e	add	fp, #8
1bfe4     E7 3A 68 AC |  if_e	wrlong	#29, fp
1bfe8     08 CE 85 A1 |  if_e	sub	fp, #8
1bfec                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1bfec     1C AA 0E F2 | 	cmp	local03, #28 wz
1bff0     1D AA 06 A6 |  if_e	mov	local03, #29
1bff4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1bff4     08 CE 05 F1 | 	add	fp, #8
1bff8     E7 AE 02 FB | 	rdlong	local05, fp
1bffc     08 CE 85 F1 | 	sub	fp, #8
1c000     1F AE 0E F2 | 	cmp	local05, #31 wz
1c004     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1c008     08 CE 05 51 |  if_ne	add	fp, #8
1c00c     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1c010     08 CE 85 51 |  if_ne	sub	fp, #8
1c014     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1c018     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1c01c     E7 0C 68 AC |  if_e	wrlong	#6, fp
1c020     08 CE 05 A1 |  if_e	add	fp, #8
1c024     E7 FE 69 AC |  if_e	wrlong	#255, fp
1c028     08 CE 85 A1 |  if_e	sub	fp, #8
1c02c     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1c030     53 AF 02 55 |  if_ne	and	local05, local01
1c034     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1c038     E7 92 02 F6 | 	mov	arg01, fp
1c03c     C0 16 BF FD | 	call	#_push
1c040     E7 F0 03 F6 | 	mov	ptra, fp
1c044     F2 00 A0 FD | 	call	#popregs_
1c048                 | _do_and_ret
1c048     2D 00 64 FD | 	ret
1c04c                 | 
1c04c                 | ' 
1c04c                 | ' '--------------------------------- DIV (integer divide)
1c04c                 | ' 
1c04c                 | ' sub do_div 
1c04c                 | _do_div
1c04c     04 CA 05 F6 | 	mov	COUNT_, #4
1c050     E8 00 A0 FD | 	call	#pushregs_
1c054     18 F0 07 F1 | 	add	ptra, #24
1c058     14 16 BF FD | 	call	#_pop
1c05c     3D A7 02 F6 | 	mov	local01, result1
1c060     3E 11 03 F6 | 	mov	muldivb_, result2
1c064     3F 0F 03 F6 | 	mov	muldiva_, result3
1c068     88 A9 02 F6 | 	mov	local02, muldivb_
1c06c     87 AB 02 F6 | 	mov	local03, muldiva_
1c070     FC 15 BF FD | 	call	#_pop
1c074     E7 7A 62 FC | 	wrlong	result1, fp
1c078     04 CE 05 F1 | 	add	fp, #4
1c07c     E7 7C 62 FC | 	wrlong	result2, fp
1c080     04 CE 05 F1 | 	add	fp, #4
1c084     E7 7E 62 FC | 	wrlong	result3, fp
1c088                 | ' 
1c088                 | ' t2=pop()
1c088                 | ' t1=pop()
1c088                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1c088     08 CE 85 F1 | 	sub	fp, #8
1c08c     1F 7E 0E F2 | 	cmp	result3, #31 wz
1c090     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1c094     E7 14 68 AC |  if_e	wrlong	#10, fp
1c098     08 CE 05 A1 |  if_e	add	fp, #8
1c09c     E7 FE 69 AC |  if_e	wrlong	#255, fp
1c0a0     08 CE 85 A1 |  if_e	sub	fp, #8
1c0a4     14 01 90 AD |  if_e	jmp	#LR__2385
1c0a8                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1c0a8     08 CE 05 F1 | 	add	fp, #8
1c0ac     E7 10 03 FB | 	rdlong	muldivb_, fp
1c0b0     08 CE 85 F1 | 	sub	fp, #8
1c0b4     1E 10 0F F2 | 	cmp	muldivb_, #30 wz
1c0b8     1C 00 90 5D |  if_ne	jmp	#LR__2380
1c0bc     08 CE 05 F1 | 	add	fp, #8
1c0c0     E7 38 68 FC | 	wrlong	#28, fp
1c0c4     08 CE 85 F1 | 	sub	fp, #8
1c0c8     E7 92 02 FB | 	rdlong	arg01, fp
1c0cc     00 94 06 F6 | 	mov	arg02, #0
1c0d0     54 B2 B0 FD | 	call	#__system___float_tointeger
1c0d4     E7 7A 62 FC | 	wrlong	result1, fp
1c0d8                 | LR__2380
1c0d8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1c0d8     1E AA 0E F2 | 	cmp	local03, #30 wz
1c0dc     14 00 90 5D |  if_ne	jmp	#LR__2381
1c0e0     1C AA 06 F6 | 	mov	local03, #28
1c0e4     53 93 02 F6 | 	mov	arg01, local01
1c0e8     00 94 06 F6 | 	mov	arg02, #0
1c0ec     38 B2 B0 FD | 	call	#__system___float_tointeger
1c0f0     3D A7 02 F6 | 	mov	local01, result1
1c0f4                 | LR__2381
1c0f4     08 CE 05 F1 | 	add	fp, #8
1c0f8     E7 AC 02 FB | 	rdlong	local04, fp
1c0fc     08 CE 85 F1 | 	sub	fp, #8
1c100     1D AC 0E F2 | 	cmp	local04, #29 wz
1c104     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c108     E7 AC 02 AB |  if_e	rdlong	local04, fp
1c10c     53 AD 12 AD |  if_e	qdiv	local04, local01
1c110                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1c110     18 AC 62 AD |  if_e	getqx	local04
1c114     E7 AC 62 AC |  if_e	wrlong	local04, fp
1c118     A0 00 90 AD |  if_e	jmp	#LR__2385
1c11c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1c11c     08 CE 05 F1 | 	add	fp, #8
1c120     E7 AC 02 FB | 	rdlong	local04, fp
1c124     08 CE 85 F1 | 	sub	fp, #8
1c128     1D AC 0E F2 | 	cmp	local04, #29 wz
1c12c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c130     20 00 90 5D |  if_ne	jmp	#LR__2382
1c134     E7 AC 02 FB | 	rdlong	local04, fp
1c138     53 AD 12 FD | 	qdiv	local04, local01
1c13c     18 AC 62 FD | 	getqx	local04
1c140     E7 AC 62 FC | 	wrlong	local04, fp
1c144     08 CE 05 F1 | 	add	fp, #8
1c148     E7 38 68 FC | 	wrlong	#28, fp
1c14c     08 CE 85 F1 | 	sub	fp, #8
1c150     68 00 90 FD | 	jmp	#LR__2385
1c154                 | LR__2382
1c154                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1c154     08 CE 05 F1 | 	add	fp, #8
1c158     E7 AC 02 FB | 	rdlong	local04, fp
1c15c     08 CE 85 F1 | 	sub	fp, #8
1c160     1C AC 0E F2 | 	cmp	local04, #28 wz
1c164     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c168     14 00 90 5D |  if_ne	jmp	#LR__2383
1c16c     E7 0E 03 FB | 	rdlong	muldiva_, fp
1c170     53 11 03 F6 | 	mov	muldivb_, local01
1c174     FA 00 A0 FD | 	call	#divide_
1c178     E7 10 63 FC | 	wrlong	muldivb_, fp
1c17c     3C 00 90 FD | 	jmp	#LR__2385
1c180                 | LR__2383
1c180                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1c180     08 CE 05 F1 | 	add	fp, #8
1c184     E7 AC 02 FB | 	rdlong	local04, fp
1c188     08 CE 85 F1 | 	sub	fp, #8
1c18c     1C AC 0E F2 | 	cmp	local04, #28 wz
1c190     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c194     14 00 90 5D |  if_ne	jmp	#LR__2384
1c198     E7 0E 03 FB | 	rdlong	muldiva_, fp
1c19c     53 11 03 F6 | 	mov	muldivb_, local01
1c1a0     FA 00 A0 FD | 	call	#divide_
1c1a4     E7 10 63 FC | 	wrlong	muldivb_, fp
1c1a8     10 00 90 FD | 	jmp	#LR__2385
1c1ac                 | LR__2384
1c1ac     E7 16 68 FC | 	wrlong	#11, fp
1c1b0     08 CE 05 F1 | 	add	fp, #8
1c1b4     E7 FE 69 FC | 	wrlong	#255, fp
1c1b8     08 CE 85 F1 | 	sub	fp, #8
1c1bc                 | LR__2385
1c1bc     E7 92 02 F6 | 	mov	arg01, fp
1c1c0     3C 15 BF FD | 	call	#_push
1c1c4     E7 F0 03 F6 | 	mov	ptra, fp
1c1c8     F2 00 A0 FD | 	call	#popregs_
1c1cc                 | _do_div_ret
1c1cc     2D 00 64 FD | 	ret
1c1d0                 | 
1c1d0                 | ' 
1c1d0                 | ' '--------------------------------- equal (=)
1c1d0                 | ' 
1c1d0                 | ' sub do_eq
1c1d0                 | _do_eq
1c1d0     07 CA 05 F6 | 	mov	COUNT_, #7
1c1d4     E8 00 A0 FD | 	call	#pushregs_
1c1d8     18 F0 07 F1 | 	add	ptra, #24
1c1dc     90 14 BF FD | 	call	#_pop
1c1e0     3D A7 02 F6 | 	mov	local01, result1
1c1e4     3E AD 02 F6 | 	mov	local04, result2
1c1e8     3F AF 02 F6 | 	mov	local05, result3
1c1ec     56 A9 02 F6 | 	mov	local02, local04
1c1f0     57 AB 02 F6 | 	mov	local03, local05
1c1f4     78 14 BF FD | 	call	#_pop
1c1f8     3F AF 02 F6 | 	mov	local05, result3
1c1fc     E7 7A 62 FC | 	wrlong	result1, fp
1c200     04 CE 05 F1 | 	add	fp, #4
1c204     E7 7C 62 FC | 	wrlong	result2, fp
1c208     04 CE 05 F1 | 	add	fp, #4
1c20c     E7 AE 62 FC | 	wrlong	local05, fp
1c210                 | ' 
1c210                 | ' t2=pop()
1c210                 | ' t1=pop()
1c210                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1c210     08 CE 85 F1 | 	sub	fp, #8
1c214     1F AE 0E F2 | 	cmp	local05, #31 wz
1c218     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1c21c     20 00 90 5D |  if_ne	jmp	#LR__2390
1c220     00 B0 06 F6 | 	mov	local06, #0
1c224     E7 92 02 FB | 	rdlong	arg01, fp
1c228     53 95 02 F6 | 	mov	arg02, local01
1c22c     88 85 B0 FD | 	call	#__system___string_cmp
1c230     00 7A 0E F2 | 	cmp	result1, #0 wz
1c234     00 B0 26 A6 |  if_e	not	local06, #0
1c238     E7 B0 62 FC | 	wrlong	local06, fp
1c23c     04 03 90 FD | 	jmp	#LR__2403
1c240                 | LR__2390
1c240                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1c240     08 CE 05 F1 | 	add	fp, #8
1c244     E7 B0 02 FB | 	rdlong	local06, fp
1c248     08 CE 85 F1 | 	sub	fp, #8
1c24c     1E B0 0E F2 | 	cmp	local06, #30 wz
1c250     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c254     24 00 90 5D |  if_ne	jmp	#LR__2391
1c258     00 B0 06 F6 | 	mov	local06, #0
1c25c     E7 92 02 FB | 	rdlong	arg01, fp
1c260     53 95 02 F6 | 	mov	arg02, local01
1c264     01 96 06 F6 | 	mov	arg03, #1
1c268     28 B0 B0 FD | 	call	#__system___float_cmp
1c26c     00 7A 0E F2 | 	cmp	result1, #0 wz
1c270     00 B0 26 A6 |  if_e	not	local06, #0
1c274     E7 B0 62 FC | 	wrlong	local06, fp
1c278     C8 02 90 FD | 	jmp	#LR__2403
1c27c                 | LR__2391
1c27c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1c27c     08 CE 05 F1 | 	add	fp, #8
1c280     E7 B0 02 FB | 	rdlong	local06, fp
1c284     08 CE 85 F1 | 	sub	fp, #8
1c288     1E B0 0E F2 | 	cmp	local06, #30 wz
1c28c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c290     3C 00 90 5D |  if_ne	jmp	#LR__2392
1c294     00 B0 06 F6 | 	mov	local06, #0
1c298     E7 AC 02 FB | 	rdlong	local04, fp
1c29c     53 93 52 F6 | 	abs	arg01, local01 wc
1c2a0     1F B2 C6 C9 |  if_b	decod	local07, #31
1c2a4     00 B2 06 36 |  if_ae	mov	local07, #0
1c2a8     B0 A7 B0 FD | 	call	#__system___float_fromuns
1c2ac     59 7B 62 F5 | 	xor	result1, local07
1c2b0     3D 95 02 F6 | 	mov	arg02, result1
1c2b4     56 93 02 F6 | 	mov	arg01, local04
1c2b8     01 96 06 F6 | 	mov	arg03, #1
1c2bc     D4 AF B0 FD | 	call	#__system___float_cmp
1c2c0     00 7A 0E F2 | 	cmp	result1, #0 wz
1c2c4     00 B0 26 A6 |  if_e	not	local06, #0
1c2c8     E7 B0 62 FC | 	wrlong	local06, fp
1c2cc     74 02 90 FD | 	jmp	#LR__2403
1c2d0                 | LR__2392
1c2d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1c2d0     08 CE 05 F1 | 	add	fp, #8
1c2d4     E7 B0 02 FB | 	rdlong	local06, fp
1c2d8     08 CE 85 F1 | 	sub	fp, #8
1c2dc     1E B0 0E F2 | 	cmp	local06, #30 wz
1c2e0     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c2e4     30 00 90 5D |  if_ne	jmp	#LR__2393
1c2e8     00 B0 06 F6 | 	mov	local06, #0
1c2ec     E7 AC 02 FB | 	rdlong	local04, fp
1c2f0     53 93 02 F6 | 	mov	arg01, local01
1c2f4     64 A7 B0 FD | 	call	#__system___float_fromuns
1c2f8     3D 95 02 F6 | 	mov	arg02, result1
1c2fc     56 93 02 F6 | 	mov	arg01, local04
1c300     01 96 06 F6 | 	mov	arg03, #1
1c304     8C AF B0 FD | 	call	#__system___float_cmp
1c308     00 7A 0E F2 | 	cmp	result1, #0 wz
1c30c     00 B0 26 A6 |  if_e	not	local06, #0
1c310     E7 B0 62 FC | 	wrlong	local06, fp
1c314     2C 02 90 FD | 	jmp	#LR__2403
1c318                 | LR__2393
1c318                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1c318     08 CE 05 F1 | 	add	fp, #8
1c31c     E7 B0 02 FB | 	rdlong	local06, fp
1c320     08 CE 85 F1 | 	sub	fp, #8
1c324     1C B0 0E F2 | 	cmp	local06, #28 wz
1c328     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c32c     3C 00 90 5D |  if_ne	jmp	#LR__2394
1c330     00 B0 06 F6 | 	mov	local06, #0
1c334     E7 92 02 FB | 	rdlong	arg01, fp
1c338     49 93 52 F6 | 	abs	arg01, arg01 wc
1c33c     1F B2 C6 C9 |  if_b	decod	local07, #31
1c340     00 B2 06 36 |  if_ae	mov	local07, #0
1c344     14 A7 B0 FD | 	call	#__system___float_fromuns
1c348     59 7B 62 F5 | 	xor	result1, local07
1c34c     3D 93 02 F6 | 	mov	arg01, result1
1c350     53 95 02 F6 | 	mov	arg02, local01
1c354     01 96 06 F6 | 	mov	arg03, #1
1c358     38 AF B0 FD | 	call	#__system___float_cmp
1c35c     00 7A 0E F2 | 	cmp	result1, #0 wz
1c360     00 B0 26 A6 |  if_e	not	local06, #0
1c364     E7 B0 62 FC | 	wrlong	local06, fp
1c368     D8 01 90 FD | 	jmp	#LR__2403
1c36c                 | LR__2394
1c36c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1c36c     08 CE 05 F1 | 	add	fp, #8
1c370     E7 B0 02 FB | 	rdlong	local06, fp
1c374     08 CE 85 F1 | 	sub	fp, #8
1c378     1C B0 0E F2 | 	cmp	local06, #28 wz
1c37c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c380     18 00 90 5D |  if_ne	jmp	#LR__2395
1c384     00 B0 06 F6 | 	mov	local06, #0
1c388     E7 AC 02 FB | 	rdlong	local04, fp
1c38c     53 AD 0A F2 | 	cmp	local04, local01 wz
1c390     01 B0 66 A6 |  if_e	neg	local06, #1
1c394     E7 B0 62 FC | 	wrlong	local06, fp
1c398     A8 01 90 FD | 	jmp	#LR__2403
1c39c                 | LR__2395
1c39c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1c39c     08 CE 05 F1 | 	add	fp, #8
1c3a0     E7 B0 02 FB | 	rdlong	local06, fp
1c3a4     08 CE 85 F1 | 	sub	fp, #8
1c3a8     1C B0 0E F2 | 	cmp	local06, #28 wz
1c3ac     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c3b0     18 00 90 5D |  if_ne	jmp	#LR__2396
1c3b4     00 B0 06 F6 | 	mov	local06, #0
1c3b8     E7 AC 02 FB | 	rdlong	local04, fp
1c3bc     53 AD 0A F2 | 	cmp	local04, local01 wz
1c3c0     01 B0 66 A6 |  if_e	neg	local06, #1
1c3c4     E7 B0 62 FC | 	wrlong	local06, fp
1c3c8     78 01 90 FD | 	jmp	#LR__2403
1c3cc                 | LR__2396
1c3cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1c3cc     08 CE 05 F1 | 	add	fp, #8
1c3d0     E7 B0 02 FB | 	rdlong	local06, fp
1c3d4     08 CE 85 F1 | 	sub	fp, #8
1c3d8     1D B0 0E F2 | 	cmp	local06, #29 wz
1c3dc     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c3e0     2C 00 90 5D |  if_ne	jmp	#LR__2397
1c3e4     00 B0 06 F6 | 	mov	local06, #0
1c3e8     E7 92 02 FB | 	rdlong	arg01, fp
1c3ec     6C A6 B0 FD | 	call	#__system___float_fromuns
1c3f0     3D 93 02 F6 | 	mov	arg01, result1
1c3f4     53 95 02 F6 | 	mov	arg02, local01
1c3f8     01 96 06 F6 | 	mov	arg03, #1
1c3fc     94 AE B0 FD | 	call	#__system___float_cmp
1c400     00 7A 0E F2 | 	cmp	result1, #0 wz
1c404     00 B0 26 A6 |  if_e	not	local06, #0
1c408     E7 B0 62 FC | 	wrlong	local06, fp
1c40c     34 01 90 FD | 	jmp	#LR__2403
1c410                 | LR__2397
1c410                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1c410     08 CE 05 F1 | 	add	fp, #8
1c414     E7 B0 02 FB | 	rdlong	local06, fp
1c418     08 CE 85 F1 | 	sub	fp, #8
1c41c     1D B0 0E F2 | 	cmp	local06, #29 wz
1c420     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c424     18 00 90 5D |  if_ne	jmp	#LR__2398
1c428     00 B0 06 F6 | 	mov	local06, #0
1c42c     E7 AC 02 FB | 	rdlong	local04, fp
1c430     53 AD 0A F2 | 	cmp	local04, local01 wz
1c434     01 B0 66 A6 |  if_e	neg	local06, #1
1c438     E7 B0 62 FC | 	wrlong	local06, fp
1c43c     04 01 90 FD | 	jmp	#LR__2403
1c440                 | LR__2398
1c440                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1c440     08 CE 05 F1 | 	add	fp, #8
1c444     E7 B0 02 FB | 	rdlong	local06, fp
1c448     08 CE 85 F1 | 	sub	fp, #8
1c44c     1D B0 0E F2 | 	cmp	local06, #29 wz
1c450     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c454     18 00 90 5D |  if_ne	jmp	#LR__2399
1c458     00 B0 06 F6 | 	mov	local06, #0
1c45c     E7 AC 02 FB | 	rdlong	local04, fp
1c460     53 AD 0A F2 | 	cmp	local04, local01 wz
1c464     01 B0 66 A6 |  if_e	neg	local06, #1
1c468     E7 B0 62 FC | 	wrlong	local06, fp
1c46c     D4 00 90 FD | 	jmp	#LR__2403
1c470                 | LR__2399
1c470                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1c470     08 CE 05 F1 | 	add	fp, #8
1c474     E7 B0 02 FB | 	rdlong	local06, fp
1c478     08 CE 85 F1 | 	sub	fp, #8
1c47c     2B B0 0E F2 | 	cmp	local06, #43 wz
1c480     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1c484     28 00 90 5D |  if_ne	jmp	#LR__2400
1c488     00 B0 06 F6 | 	mov	local06, #0
1c48c     E7 92 02 FB | 	rdlong	arg01, fp
1c490     4C 13 BF FD | 	call	#_convertstring
1c494     3D 93 02 F6 | 	mov	arg01, result1
1c498     53 95 02 F6 | 	mov	arg02, local01
1c49c     18 83 B0 FD | 	call	#__system___string_cmp
1c4a0     00 7A 0E F2 | 	cmp	result1, #0 wz
1c4a4     00 B0 26 A6 |  if_e	not	local06, #0
1c4a8     E7 B0 62 FC | 	wrlong	local06, fp
1c4ac     94 00 90 FD | 	jmp	#LR__2403
1c4b0                 | LR__2400
1c4b0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1c4b0     08 CE 05 F1 | 	add	fp, #8
1c4b4     E7 B0 02 FB | 	rdlong	local06, fp
1c4b8     08 CE 85 F1 | 	sub	fp, #8
1c4bc     1F B0 0E F2 | 	cmp	local06, #31 wz
1c4c0     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1c4c4     2C 00 90 5D |  if_ne	jmp	#LR__2401
1c4c8     00 B0 06 F6 | 	mov	local06, #0
1c4cc     E7 AC 02 FB | 	rdlong	local04, fp
1c4d0     53 93 02 F6 | 	mov	arg01, local01
1c4d4     08 13 BF FD | 	call	#_convertstring
1c4d8     3D 95 02 F6 | 	mov	arg02, result1
1c4dc     56 93 02 F6 | 	mov	arg01, local04
1c4e0     D4 82 B0 FD | 	call	#__system___string_cmp
1c4e4     00 7A 0E F2 | 	cmp	result1, #0 wz
1c4e8     00 B0 26 A6 |  if_e	not	local06, #0
1c4ec     E7 B0 62 FC | 	wrlong	local06, fp
1c4f0     50 00 90 FD | 	jmp	#LR__2403
1c4f4                 | LR__2401
1c4f4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1c4f4     08 CE 05 F1 | 	add	fp, #8
1c4f8     E7 B0 02 FB | 	rdlong	local06, fp
1c4fc     08 CE 85 F1 | 	sub	fp, #8
1c500     2B B0 0E F2 | 	cmp	local06, #43 wz
1c504     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1c508     34 00 90 5D |  if_ne	jmp	#LR__2402
1c50c     00 B0 06 F6 | 	mov	local06, #0
1c510     E7 92 02 FB | 	rdlong	arg01, fp
1c514     C8 12 BF FD | 	call	#_convertstring
1c518     3D AD 02 F6 | 	mov	local04, result1
1c51c     53 93 02 F6 | 	mov	arg01, local01
1c520     BC 12 BF FD | 	call	#_convertstring
1c524     3D 95 02 F6 | 	mov	arg02, result1
1c528     56 93 02 F6 | 	mov	arg01, local04
1c52c     88 82 B0 FD | 	call	#__system___string_cmp
1c530     00 7A 0E F2 | 	cmp	result1, #0 wz
1c534     00 B0 26 A6 |  if_e	not	local06, #0
1c538     E7 B0 62 FC | 	wrlong	local06, fp
1c53c     04 00 90 FD | 	jmp	#LR__2403
1c540                 | LR__2402
1c540     E7 00 68 FC | 	wrlong	#0, fp
1c544                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1c544                 | LR__2403
1c544     08 CE 05 F1 | 	add	fp, #8
1c548     E7 38 68 FC | 	wrlong	#28, fp
1c54c     08 CE 85 F1 | 	sub	fp, #8
1c550     E7 92 02 F6 | 	mov	arg01, fp
1c554     A8 11 BF FD | 	call	#_push
1c558     E7 F0 03 F6 | 	mov	ptra, fp
1c55c     F2 00 A0 FD | 	call	#popregs_
1c560                 | _do_eq_ret
1c560     2D 00 64 FD | 	ret
1c564                 | 
1c564                 | ' 
1c564                 | ' '--------------------------------- fdiv (/) - float divide
1c564                 | ' 
1c564                 | ' sub do_fdiv 
1c564                 | _do_fdiv
1c564     04 CA 05 F6 | 	mov	COUNT_, #4
1c568     E8 00 A0 FD | 	call	#pushregs_
1c56c     18 F0 07 F1 | 	add	ptra, #24
1c570     FC 10 BF FD | 	call	#_pop
1c574     3D A7 02 F6 | 	mov	local01, result1
1c578     3E 95 02 F6 | 	mov	arg02, result2
1c57c     3F 93 02 F6 | 	mov	arg01, result3
1c580     4A A9 02 F6 | 	mov	local02, arg02
1c584     49 AB 02 F6 | 	mov	local03, arg01
1c588     E4 10 BF FD | 	call	#_pop
1c58c     E7 7A 62 FC | 	wrlong	result1, fp
1c590     04 CE 05 F1 | 	add	fp, #4
1c594     E7 7C 62 FC | 	wrlong	result2, fp
1c598     04 CE 05 F1 | 	add	fp, #4
1c59c     E7 7E 62 FC | 	wrlong	result3, fp
1c5a0                 | ' 
1c5a0                 | ' t2=pop()
1c5a0                 | ' t1=pop()
1c5a0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1c5a0     08 CE 85 F1 | 	sub	fp, #8
1c5a4     1F 7E 0E F2 | 	cmp	result3, #31 wz
1c5a8     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1c5ac     E7 14 68 AC |  if_e	wrlong	#10, fp
1c5b0     08 CE 05 A1 |  if_e	add	fp, #8
1c5b4     E7 FE 69 AC |  if_e	wrlong	#255, fp
1c5b8     08 CE 85 A1 |  if_e	sub	fp, #8
1c5bc     E0 00 90 AD |  if_e	jmp	#LR__2415
1c5c0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1c5c0     08 CE 05 F1 | 	add	fp, #8
1c5c4     E7 94 02 FB | 	rdlong	arg02, fp
1c5c8     08 CE 85 F1 | 	sub	fp, #8
1c5cc     1C 94 0E F2 | 	cmp	arg02, #28 wz
1c5d0     28 00 90 5D |  if_ne	jmp	#LR__2410
1c5d4     08 CE 05 F1 | 	add	fp, #8
1c5d8     E7 3C 68 FC | 	wrlong	#30, fp
1c5dc     08 CE 85 F1 | 	sub	fp, #8
1c5e0     E7 92 02 FB | 	rdlong	arg01, fp
1c5e4     49 93 52 F6 | 	abs	arg01, arg01 wc
1c5e8     1F AC C6 C9 |  if_b	decod	local04, #31
1c5ec     00 AC 06 36 |  if_ae	mov	local04, #0
1c5f0     68 A4 B0 FD | 	call	#__system___float_fromuns
1c5f4     56 7B 62 F5 | 	xor	result1, local04
1c5f8     E7 7A 62 FC | 	wrlong	result1, fp
1c5fc                 | LR__2410
1c5fc                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1c5fc     08 CE 05 F1 | 	add	fp, #8
1c600     E7 94 02 FB | 	rdlong	arg02, fp
1c604     08 CE 85 F1 | 	sub	fp, #8
1c608     1D 94 0E F2 | 	cmp	arg02, #29 wz
1c60c     18 00 90 5D |  if_ne	jmp	#LR__2411
1c610     08 CE 05 F1 | 	add	fp, #8
1c614     E7 3C 68 FC | 	wrlong	#30, fp
1c618     08 CE 85 F1 | 	sub	fp, #8
1c61c     E7 92 02 FB | 	rdlong	arg01, fp
1c620     38 A4 B0 FD | 	call	#__system___float_fromuns
1c624     E7 7A 62 FC | 	wrlong	result1, fp
1c628                 | LR__2411
1c628                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1c628     1C AA 0E F2 | 	cmp	local03, #28 wz
1c62c     1C 00 90 5D |  if_ne	jmp	#LR__2412
1c630     1E AA 06 F6 | 	mov	local03, #30
1c634     53 93 52 F6 | 	abs	arg01, local01 wc
1c638     1F AC C6 C9 |  if_b	decod	local04, #31
1c63c     00 AC 06 36 |  if_ae	mov	local04, #0
1c640     18 A4 B0 FD | 	call	#__system___float_fromuns
1c644     56 7B 62 F5 | 	xor	result1, local04
1c648     3D A7 02 F6 | 	mov	local01, result1
1c64c                 | LR__2412
1c64c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1c64c     1D AA 0E F2 | 	cmp	local03, #29 wz
1c650     10 00 90 5D |  if_ne	jmp	#LR__2413
1c654     1E AA 06 F6 | 	mov	local03, #30
1c658     53 93 02 F6 | 	mov	arg01, local01
1c65c     FC A3 B0 FD | 	call	#__system___float_fromuns
1c660     3D A7 02 F6 | 	mov	local01, result1
1c664                 | LR__2413
1c664                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1c664     08 CE 05 F1 | 	add	fp, #8
1c668     E7 94 02 FB | 	rdlong	arg02, fp
1c66c     08 CE 85 F1 | 	sub	fp, #8
1c670     1E 94 0E F2 | 	cmp	arg02, #30 wz
1c674     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c678     14 00 90 5D |  if_ne	jmp	#LR__2414
1c67c     E7 92 02 FB | 	rdlong	arg01, fp
1c680     53 95 02 F6 | 	mov	arg02, local01
1c684     DC A9 B0 FD | 	call	#__system___float_div
1c688     E7 7A 62 FC | 	wrlong	result1, fp
1c68c     10 00 90 FD | 	jmp	#LR__2415
1c690                 | LR__2414
1c690     E7 16 68 FC | 	wrlong	#11, fp
1c694     08 CE 05 F1 | 	add	fp, #8
1c698     E7 FE 69 FC | 	wrlong	#255, fp
1c69c     08 CE 85 F1 | 	sub	fp, #8
1c6a0                 | LR__2415
1c6a0     E7 92 02 F6 | 	mov	arg01, fp
1c6a4     58 10 BF FD | 	call	#_push
1c6a8     E7 F0 03 F6 | 	mov	ptra, fp
1c6ac     F2 00 A0 FD | 	call	#popregs_
1c6b0                 | _do_fdiv_ret
1c6b0     2D 00 64 FD | 	ret
1c6b4                 | 
1c6b4                 | ' 
1c6b4                 | ' '--------------------------------- greater or equal (>=)
1c6b4                 | ' 
1c6b4                 | ' sub do_ge
1c6b4                 | _do_ge
1c6b4     07 CA 05 F6 | 	mov	COUNT_, #7
1c6b8     E8 00 A0 FD | 	call	#pushregs_
1c6bc     18 F0 07 F1 | 	add	ptra, #24
1c6c0     AC 0F BF FD | 	call	#_pop
1c6c4     3D A7 02 F6 | 	mov	local01, result1
1c6c8     3E AD 02 F6 | 	mov	local04, result2
1c6cc     3F AF 02 F6 | 	mov	local05, result3
1c6d0     56 A9 02 F6 | 	mov	local02, local04
1c6d4     57 AB 02 F6 | 	mov	local03, local05
1c6d8     94 0F BF FD | 	call	#_pop
1c6dc     3F AF 02 F6 | 	mov	local05, result3
1c6e0     E7 7A 62 FC | 	wrlong	result1, fp
1c6e4     04 CE 05 F1 | 	add	fp, #4
1c6e8     E7 7C 62 FC | 	wrlong	result2, fp
1c6ec     04 CE 05 F1 | 	add	fp, #4
1c6f0     E7 AE 62 FC | 	wrlong	local05, fp
1c6f4                 | ' 
1c6f4                 | ' t2=pop()
1c6f4                 | ' t1=pop()
1c6f4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1c6f4     08 CE 85 F1 | 	sub	fp, #8
1c6f8     1F AE 0E F2 | 	cmp	local05, #31 wz
1c6fc     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1c700     20 00 90 5D |  if_ne	jmp	#LR__2420
1c704     00 B0 06 F6 | 	mov	local06, #0
1c708     E7 92 02 FB | 	rdlong	arg01, fp
1c70c     53 95 02 F6 | 	mov	arg02, local01
1c710     A4 80 B0 FD | 	call	#__system___string_cmp
1c714     00 7A 56 F2 | 	cmps	result1, #0 wc
1c718     00 B0 26 36 |  if_ae	not	local06, #0
1c71c     E7 B0 62 FC | 	wrlong	local06, fp
1c720     04 03 90 FD | 	jmp	#LR__2433
1c724                 | LR__2420
1c724                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1c724     08 CE 05 F1 | 	add	fp, #8
1c728     E7 B0 02 FB | 	rdlong	local06, fp
1c72c     08 CE 85 F1 | 	sub	fp, #8
1c730     1E B0 0E F2 | 	cmp	local06, #30 wz
1c734     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c738     24 00 90 5D |  if_ne	jmp	#LR__2421
1c73c     00 B0 06 F6 | 	mov	local06, #0
1c740     E7 92 02 FB | 	rdlong	arg01, fp
1c744     53 95 02 F6 | 	mov	arg02, local01
1c748     01 96 66 F6 | 	neg	arg03, #1
1c74c     44 AB B0 FD | 	call	#__system___float_cmp
1c750     00 7A 56 F2 | 	cmps	result1, #0 wc
1c754     00 B0 26 36 |  if_ae	not	local06, #0
1c758     E7 B0 62 FC | 	wrlong	local06, fp
1c75c     C8 02 90 FD | 	jmp	#LR__2433
1c760                 | LR__2421
1c760                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1c760     08 CE 05 F1 | 	add	fp, #8
1c764     E7 B0 02 FB | 	rdlong	local06, fp
1c768     08 CE 85 F1 | 	sub	fp, #8
1c76c     1E B0 0E F2 | 	cmp	local06, #30 wz
1c770     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c774     3C 00 90 5D |  if_ne	jmp	#LR__2422
1c778     00 B0 06 F6 | 	mov	local06, #0
1c77c     E7 AC 02 FB | 	rdlong	local04, fp
1c780     53 93 52 F6 | 	abs	arg01, local01 wc
1c784     1F B2 C6 C9 |  if_b	decod	local07, #31
1c788     00 B2 06 36 |  if_ae	mov	local07, #0
1c78c     CC A2 B0 FD | 	call	#__system___float_fromuns
1c790     59 7B 62 F5 | 	xor	result1, local07
1c794     3D 95 02 F6 | 	mov	arg02, result1
1c798     56 93 02 F6 | 	mov	arg01, local04
1c79c     01 96 66 F6 | 	neg	arg03, #1
1c7a0     F0 AA B0 FD | 	call	#__system___float_cmp
1c7a4     00 7A 56 F2 | 	cmps	result1, #0 wc
1c7a8     00 B0 26 36 |  if_ae	not	local06, #0
1c7ac     E7 B0 62 FC | 	wrlong	local06, fp
1c7b0     74 02 90 FD | 	jmp	#LR__2433
1c7b4                 | LR__2422
1c7b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1c7b4     08 CE 05 F1 | 	add	fp, #8
1c7b8     E7 B0 02 FB | 	rdlong	local06, fp
1c7bc     08 CE 85 F1 | 	sub	fp, #8
1c7c0     1E B0 0E F2 | 	cmp	local06, #30 wz
1c7c4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c7c8     30 00 90 5D |  if_ne	jmp	#LR__2423
1c7cc     00 B0 06 F6 | 	mov	local06, #0
1c7d0     E7 AC 02 FB | 	rdlong	local04, fp
1c7d4     53 93 02 F6 | 	mov	arg01, local01
1c7d8     80 A2 B0 FD | 	call	#__system___float_fromuns
1c7dc     3D 95 02 F6 | 	mov	arg02, result1
1c7e0     56 93 02 F6 | 	mov	arg01, local04
1c7e4     01 96 66 F6 | 	neg	arg03, #1
1c7e8     A8 AA B0 FD | 	call	#__system___float_cmp
1c7ec     00 7A 56 F2 | 	cmps	result1, #0 wc
1c7f0     00 B0 26 36 |  if_ae	not	local06, #0
1c7f4     E7 B0 62 FC | 	wrlong	local06, fp
1c7f8     2C 02 90 FD | 	jmp	#LR__2433
1c7fc                 | LR__2423
1c7fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1c7fc     08 CE 05 F1 | 	add	fp, #8
1c800     E7 B0 02 FB | 	rdlong	local06, fp
1c804     08 CE 85 F1 | 	sub	fp, #8
1c808     1C B0 0E F2 | 	cmp	local06, #28 wz
1c80c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c810     3C 00 90 5D |  if_ne	jmp	#LR__2424
1c814     00 B0 06 F6 | 	mov	local06, #0
1c818     E7 92 02 FB | 	rdlong	arg01, fp
1c81c     49 93 52 F6 | 	abs	arg01, arg01 wc
1c820     1F B2 C6 C9 |  if_b	decod	local07, #31
1c824     00 B2 06 36 |  if_ae	mov	local07, #0
1c828     30 A2 B0 FD | 	call	#__system___float_fromuns
1c82c     59 7B 62 F5 | 	xor	result1, local07
1c830     3D 93 02 F6 | 	mov	arg01, result1
1c834     53 95 02 F6 | 	mov	arg02, local01
1c838     01 96 66 F6 | 	neg	arg03, #1
1c83c     54 AA B0 FD | 	call	#__system___float_cmp
1c840     00 7A 56 F2 | 	cmps	result1, #0 wc
1c844     00 B0 26 36 |  if_ae	not	local06, #0
1c848     E7 B0 62 FC | 	wrlong	local06, fp
1c84c     D8 01 90 FD | 	jmp	#LR__2433
1c850                 | LR__2424
1c850                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1c850     08 CE 05 F1 | 	add	fp, #8
1c854     E7 B0 02 FB | 	rdlong	local06, fp
1c858     08 CE 85 F1 | 	sub	fp, #8
1c85c     1C B0 0E F2 | 	cmp	local06, #28 wz
1c860     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c864     18 00 90 5D |  if_ne	jmp	#LR__2425
1c868     00 B0 06 F6 | 	mov	local06, #0
1c86c     E7 AC 02 FB | 	rdlong	local04, fp
1c870     53 AD 52 F2 | 	cmps	local04, local01 wc
1c874     01 B0 66 36 |  if_ae	neg	local06, #1
1c878     E7 B0 62 FC | 	wrlong	local06, fp
1c87c     A8 01 90 FD | 	jmp	#LR__2433
1c880                 | LR__2425
1c880                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1c880     08 CE 05 F1 | 	add	fp, #8
1c884     E7 B0 02 FB | 	rdlong	local06, fp
1c888     08 CE 85 F1 | 	sub	fp, #8
1c88c     1C B0 0E F2 | 	cmp	local06, #28 wz
1c890     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c894     18 00 90 5D |  if_ne	jmp	#LR__2426
1c898     00 B0 06 F6 | 	mov	local06, #0
1c89c     E7 AC 02 FB | 	rdlong	local04, fp
1c8a0     53 AD 52 F2 | 	cmps	local04, local01 wc
1c8a4     01 B0 66 36 |  if_ae	neg	local06, #1
1c8a8     E7 B0 62 FC | 	wrlong	local06, fp
1c8ac     78 01 90 FD | 	jmp	#LR__2433
1c8b0                 | LR__2426
1c8b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1c8b0     08 CE 05 F1 | 	add	fp, #8
1c8b4     E7 B0 02 FB | 	rdlong	local06, fp
1c8b8     08 CE 85 F1 | 	sub	fp, #8
1c8bc     1D B0 0E F2 | 	cmp	local06, #29 wz
1c8c0     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c8c4     2C 00 90 5D |  if_ne	jmp	#LR__2427
1c8c8     00 B0 06 F6 | 	mov	local06, #0
1c8cc     E7 92 02 FB | 	rdlong	arg01, fp
1c8d0     88 A1 B0 FD | 	call	#__system___float_fromuns
1c8d4     3D 93 02 F6 | 	mov	arg01, result1
1c8d8     53 95 02 F6 | 	mov	arg02, local01
1c8dc     01 96 66 F6 | 	neg	arg03, #1
1c8e0     B0 A9 B0 FD | 	call	#__system___float_cmp
1c8e4     00 7A 56 F2 | 	cmps	result1, #0 wc
1c8e8     00 B0 26 36 |  if_ae	not	local06, #0
1c8ec     E7 B0 62 FC | 	wrlong	local06, fp
1c8f0     34 01 90 FD | 	jmp	#LR__2433
1c8f4                 | LR__2427
1c8f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1c8f4     08 CE 05 F1 | 	add	fp, #8
1c8f8     E7 B0 02 FB | 	rdlong	local06, fp
1c8fc     08 CE 85 F1 | 	sub	fp, #8
1c900     1D B0 0E F2 | 	cmp	local06, #29 wz
1c904     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c908     18 00 90 5D |  if_ne	jmp	#LR__2428
1c90c     00 B0 06 F6 | 	mov	local06, #0
1c910     E7 AC 02 FB | 	rdlong	local04, fp
1c914     53 AD 52 F2 | 	cmps	local04, local01 wc
1c918     01 B0 66 36 |  if_ae	neg	local06, #1
1c91c     E7 B0 62 FC | 	wrlong	local06, fp
1c920     04 01 90 FD | 	jmp	#LR__2433
1c924                 | LR__2428
1c924                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1c924     08 CE 05 F1 | 	add	fp, #8
1c928     E7 B0 02 FB | 	rdlong	local06, fp
1c92c     08 CE 85 F1 | 	sub	fp, #8
1c930     1D B0 0E F2 | 	cmp	local06, #29 wz
1c934     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c938     18 00 90 5D |  if_ne	jmp	#LR__2429
1c93c     00 B0 06 F6 | 	mov	local06, #0
1c940     E7 AC 02 FB | 	rdlong	local04, fp
1c944     53 AD 12 F2 | 	cmp	local04, local01 wc
1c948     01 B0 66 36 |  if_ae	neg	local06, #1
1c94c     E7 B0 62 FC | 	wrlong	local06, fp
1c950     D4 00 90 FD | 	jmp	#LR__2433
1c954                 | LR__2429
1c954                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1c954     08 CE 05 F1 | 	add	fp, #8
1c958     E7 B0 02 FB | 	rdlong	local06, fp
1c95c     08 CE 85 F1 | 	sub	fp, #8
1c960     2B B0 0E F2 | 	cmp	local06, #43 wz
1c964     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1c968     28 00 90 5D |  if_ne	jmp	#LR__2430
1c96c     00 B0 06 F6 | 	mov	local06, #0
1c970     E7 92 02 FB | 	rdlong	arg01, fp
1c974     68 0E BF FD | 	call	#_convertstring
1c978     3D 93 02 F6 | 	mov	arg01, result1
1c97c     53 95 02 F6 | 	mov	arg02, local01
1c980     34 7E B0 FD | 	call	#__system___string_cmp
1c984     00 7A 56 F2 | 	cmps	result1, #0 wc
1c988     00 B0 26 36 |  if_ae	not	local06, #0
1c98c     E7 B0 62 FC | 	wrlong	local06, fp
1c990     94 00 90 FD | 	jmp	#LR__2433
1c994                 | LR__2430
1c994                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1c994     08 CE 05 F1 | 	add	fp, #8
1c998     E7 B0 02 FB | 	rdlong	local06, fp
1c99c     08 CE 85 F1 | 	sub	fp, #8
1c9a0     1F B0 0E F2 | 	cmp	local06, #31 wz
1c9a4     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1c9a8     2C 00 90 5D |  if_ne	jmp	#LR__2431
1c9ac     00 B0 06 F6 | 	mov	local06, #0
1c9b0     E7 AC 02 FB | 	rdlong	local04, fp
1c9b4     53 93 02 F6 | 	mov	arg01, local01
1c9b8     24 0E BF FD | 	call	#_convertstring
1c9bc     3D 95 02 F6 | 	mov	arg02, result1
1c9c0     56 93 02 F6 | 	mov	arg01, local04
1c9c4     F0 7D B0 FD | 	call	#__system___string_cmp
1c9c8     00 7A 56 F2 | 	cmps	result1, #0 wc
1c9cc     00 B0 26 36 |  if_ae	not	local06, #0
1c9d0     E7 B0 62 FC | 	wrlong	local06, fp
1c9d4     50 00 90 FD | 	jmp	#LR__2433
1c9d8                 | LR__2431
1c9d8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1c9d8     08 CE 05 F1 | 	add	fp, #8
1c9dc     E7 B0 02 FB | 	rdlong	local06, fp
1c9e0     08 CE 85 F1 | 	sub	fp, #8
1c9e4     2B B0 0E F2 | 	cmp	local06, #43 wz
1c9e8     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1c9ec     34 00 90 5D |  if_ne	jmp	#LR__2432
1c9f0     00 B0 06 F6 | 	mov	local06, #0
1c9f4     E7 92 02 FB | 	rdlong	arg01, fp
1c9f8     E4 0D BF FD | 	call	#_convertstring
1c9fc     3D AD 02 F6 | 	mov	local04, result1
1ca00     53 93 02 F6 | 	mov	arg01, local01
1ca04     D8 0D BF FD | 	call	#_convertstring
1ca08     3D 95 02 F6 | 	mov	arg02, result1
1ca0c     56 93 02 F6 | 	mov	arg01, local04
1ca10     A4 7D B0 FD | 	call	#__system___string_cmp
1ca14     00 7A 56 F2 | 	cmps	result1, #0 wc
1ca18     00 B0 26 36 |  if_ae	not	local06, #0
1ca1c     E7 B0 62 FC | 	wrlong	local06, fp
1ca20     04 00 90 FD | 	jmp	#LR__2433
1ca24                 | LR__2432
1ca24     E7 00 68 FC | 	wrlong	#0, fp
1ca28                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1ca28                 | LR__2433
1ca28     08 CE 05 F1 | 	add	fp, #8
1ca2c     E7 38 68 FC | 	wrlong	#28, fp
1ca30     08 CE 85 F1 | 	sub	fp, #8
1ca34                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1ca34     E7 B0 0A FB | 	rdlong	local06, fp wz
1ca38     E7 02 68 5C |  if_ne	wrlong	#1, fp
1ca3c     E7 92 02 F6 | 	mov	arg01, fp
1ca40     BC 0C BF FD | 	call	#_push
1ca44     E7 F0 03 F6 | 	mov	ptra, fp
1ca48     F2 00 A0 FD | 	call	#popregs_
1ca4c                 | _do_ge_ret
1ca4c     2D 00 64 FD | 	ret
1ca50                 | 
1ca50                 | ' 
1ca50                 | ' '--------------------------------- greater than (>)
1ca50                 | ' 
1ca50                 | ' sub do_gt
1ca50                 | _do_gt
1ca50     07 CA 05 F6 | 	mov	COUNT_, #7
1ca54     E8 00 A0 FD | 	call	#pushregs_
1ca58     18 F0 07 F1 | 	add	ptra, #24
1ca5c     10 0C BF FD | 	call	#_pop
1ca60     3D A7 02 F6 | 	mov	local01, result1
1ca64     3E AD 02 F6 | 	mov	local04, result2
1ca68     3F AF 02 F6 | 	mov	local05, result3
1ca6c     56 A9 02 F6 | 	mov	local02, local04
1ca70     57 AB 02 F6 | 	mov	local03, local05
1ca74     F8 0B BF FD | 	call	#_pop
1ca78     3F AF 02 F6 | 	mov	local05, result3
1ca7c     E7 7A 62 FC | 	wrlong	result1, fp
1ca80     04 CE 05 F1 | 	add	fp, #4
1ca84     E7 7C 62 FC | 	wrlong	result2, fp
1ca88     04 CE 05 F1 | 	add	fp, #4
1ca8c     E7 AE 62 FC | 	wrlong	local05, fp
1ca90                 | ' 
1ca90                 | ' t2=pop()
1ca90                 | ' t1=pop()
1ca90                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1ca90     08 CE 85 F1 | 	sub	fp, #8
1ca94     1F AE 0E F2 | 	cmp	local05, #31 wz
1ca98     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1ca9c     20 00 90 5D |  if_ne	jmp	#LR__2440
1caa0     00 B0 06 F6 | 	mov	local06, #0
1caa4     E7 92 02 FB | 	rdlong	arg01, fp
1caa8     53 95 02 F6 | 	mov	arg02, local01
1caac     08 7D B0 FD | 	call	#__system___string_cmp
1cab0     01 7A 56 F2 | 	cmps	result1, #1 wc
1cab4     00 B0 26 36 |  if_ae	not	local06, #0
1cab8     E7 B0 62 FC | 	wrlong	local06, fp
1cabc     04 03 90 FD | 	jmp	#LR__2453
1cac0                 | LR__2440
1cac0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1cac0     08 CE 05 F1 | 	add	fp, #8
1cac4     E7 B0 02 FB | 	rdlong	local06, fp
1cac8     08 CE 85 F1 | 	sub	fp, #8
1cacc     1E B0 0E F2 | 	cmp	local06, #30 wz
1cad0     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cad4     24 00 90 5D |  if_ne	jmp	#LR__2441
1cad8     00 B0 06 F6 | 	mov	local06, #0
1cadc     E7 92 02 FB | 	rdlong	arg01, fp
1cae0     53 95 02 F6 | 	mov	arg02, local01
1cae4     01 96 66 F6 | 	neg	arg03, #1
1cae8     A8 A7 B0 FD | 	call	#__system___float_cmp
1caec     01 7A 56 F2 | 	cmps	result1, #1 wc
1caf0     00 B0 26 36 |  if_ae	not	local06, #0
1caf4     E7 B0 62 FC | 	wrlong	local06, fp
1caf8     C8 02 90 FD | 	jmp	#LR__2453
1cafc                 | LR__2441
1cafc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1cafc     08 CE 05 F1 | 	add	fp, #8
1cb00     E7 B0 02 FB | 	rdlong	local06, fp
1cb04     08 CE 85 F1 | 	sub	fp, #8
1cb08     1E B0 0E F2 | 	cmp	local06, #30 wz
1cb0c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cb10     3C 00 90 5D |  if_ne	jmp	#LR__2442
1cb14     00 B0 06 F6 | 	mov	local06, #0
1cb18     E7 AC 02 FB | 	rdlong	local04, fp
1cb1c     53 93 52 F6 | 	abs	arg01, local01 wc
1cb20     1F B2 C6 C9 |  if_b	decod	local07, #31
1cb24     00 B2 06 36 |  if_ae	mov	local07, #0
1cb28     30 9F B0 FD | 	call	#__system___float_fromuns
1cb2c     59 7B 62 F5 | 	xor	result1, local07
1cb30     3D 95 02 F6 | 	mov	arg02, result1
1cb34     56 93 02 F6 | 	mov	arg01, local04
1cb38     01 96 66 F6 | 	neg	arg03, #1
1cb3c     54 A7 B0 FD | 	call	#__system___float_cmp
1cb40     01 7A 56 F2 | 	cmps	result1, #1 wc
1cb44     00 B0 26 36 |  if_ae	not	local06, #0
1cb48     E7 B0 62 FC | 	wrlong	local06, fp
1cb4c     74 02 90 FD | 	jmp	#LR__2453
1cb50                 | LR__2442
1cb50                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1cb50     08 CE 05 F1 | 	add	fp, #8
1cb54     E7 B0 02 FB | 	rdlong	local06, fp
1cb58     08 CE 85 F1 | 	sub	fp, #8
1cb5c     1E B0 0E F2 | 	cmp	local06, #30 wz
1cb60     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cb64     30 00 90 5D |  if_ne	jmp	#LR__2443
1cb68     00 B0 06 F6 | 	mov	local06, #0
1cb6c     E7 AC 02 FB | 	rdlong	local04, fp
1cb70     53 93 02 F6 | 	mov	arg01, local01
1cb74     E4 9E B0 FD | 	call	#__system___float_fromuns
1cb78     3D 95 02 F6 | 	mov	arg02, result1
1cb7c     56 93 02 F6 | 	mov	arg01, local04
1cb80     01 96 66 F6 | 	neg	arg03, #1
1cb84     0C A7 B0 FD | 	call	#__system___float_cmp
1cb88     01 7A 56 F2 | 	cmps	result1, #1 wc
1cb8c     00 B0 26 36 |  if_ae	not	local06, #0
1cb90     E7 B0 62 FC | 	wrlong	local06, fp
1cb94     2C 02 90 FD | 	jmp	#LR__2453
1cb98                 | LR__2443
1cb98                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1cb98     08 CE 05 F1 | 	add	fp, #8
1cb9c     E7 B0 02 FB | 	rdlong	local06, fp
1cba0     08 CE 85 F1 | 	sub	fp, #8
1cba4     1C B0 0E F2 | 	cmp	local06, #28 wz
1cba8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cbac     3C 00 90 5D |  if_ne	jmp	#LR__2444
1cbb0     00 B0 06 F6 | 	mov	local06, #0
1cbb4     E7 92 02 FB | 	rdlong	arg01, fp
1cbb8     49 93 52 F6 | 	abs	arg01, arg01 wc
1cbbc     1F B2 C6 C9 |  if_b	decod	local07, #31
1cbc0     00 B2 06 36 |  if_ae	mov	local07, #0
1cbc4     94 9E B0 FD | 	call	#__system___float_fromuns
1cbc8     59 7B 62 F5 | 	xor	result1, local07
1cbcc     3D 93 02 F6 | 	mov	arg01, result1
1cbd0     53 95 02 F6 | 	mov	arg02, local01
1cbd4     01 96 66 F6 | 	neg	arg03, #1
1cbd8     B8 A6 B0 FD | 	call	#__system___float_cmp
1cbdc     01 7A 56 F2 | 	cmps	result1, #1 wc
1cbe0     00 B0 26 36 |  if_ae	not	local06, #0
1cbe4     E7 B0 62 FC | 	wrlong	local06, fp
1cbe8     D8 01 90 FD | 	jmp	#LR__2453
1cbec                 | LR__2444
1cbec                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1cbec     08 CE 05 F1 | 	add	fp, #8
1cbf0     E7 B0 02 FB | 	rdlong	local06, fp
1cbf4     08 CE 85 F1 | 	sub	fp, #8
1cbf8     1C B0 0E F2 | 	cmp	local06, #28 wz
1cbfc     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cc00     18 00 90 5D |  if_ne	jmp	#LR__2445
1cc04     00 B0 06 F6 | 	mov	local06, #0
1cc08     E7 AC 02 FB | 	rdlong	local04, fp
1cc0c     53 AD 5A F2 | 	cmps	local04, local01 wcz
1cc10     01 B0 66 16 |  if_a	neg	local06, #1
1cc14     E7 B0 62 FC | 	wrlong	local06, fp
1cc18     A8 01 90 FD | 	jmp	#LR__2453
1cc1c                 | LR__2445
1cc1c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1cc1c     08 CE 05 F1 | 	add	fp, #8
1cc20     E7 B0 02 FB | 	rdlong	local06, fp
1cc24     08 CE 85 F1 | 	sub	fp, #8
1cc28     1C B0 0E F2 | 	cmp	local06, #28 wz
1cc2c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cc30     18 00 90 5D |  if_ne	jmp	#LR__2446
1cc34     00 B0 06 F6 | 	mov	local06, #0
1cc38     E7 AC 02 FB | 	rdlong	local04, fp
1cc3c     53 AD 5A F2 | 	cmps	local04, local01 wcz
1cc40     01 B0 66 16 |  if_a	neg	local06, #1
1cc44     E7 B0 62 FC | 	wrlong	local06, fp
1cc48     78 01 90 FD | 	jmp	#LR__2453
1cc4c                 | LR__2446
1cc4c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1cc4c     08 CE 05 F1 | 	add	fp, #8
1cc50     E7 B0 02 FB | 	rdlong	local06, fp
1cc54     08 CE 85 F1 | 	sub	fp, #8
1cc58     1D B0 0E F2 | 	cmp	local06, #29 wz
1cc5c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cc60     2C 00 90 5D |  if_ne	jmp	#LR__2447
1cc64     00 B0 06 F6 | 	mov	local06, #0
1cc68     E7 92 02 FB | 	rdlong	arg01, fp
1cc6c     EC 9D B0 FD | 	call	#__system___float_fromuns
1cc70     3D 93 02 F6 | 	mov	arg01, result1
1cc74     53 95 02 F6 | 	mov	arg02, local01
1cc78     01 96 66 F6 | 	neg	arg03, #1
1cc7c     14 A6 B0 FD | 	call	#__system___float_cmp
1cc80     01 7A 56 F2 | 	cmps	result1, #1 wc
1cc84     00 B0 26 36 |  if_ae	not	local06, #0
1cc88     E7 B0 62 FC | 	wrlong	local06, fp
1cc8c     34 01 90 FD | 	jmp	#LR__2453
1cc90                 | LR__2447
1cc90                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1cc90     08 CE 05 F1 | 	add	fp, #8
1cc94     E7 B0 02 FB | 	rdlong	local06, fp
1cc98     08 CE 85 F1 | 	sub	fp, #8
1cc9c     1D B0 0E F2 | 	cmp	local06, #29 wz
1cca0     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cca4     18 00 90 5D |  if_ne	jmp	#LR__2448
1cca8     00 B0 06 F6 | 	mov	local06, #0
1ccac     E7 AC 02 FB | 	rdlong	local04, fp
1ccb0     53 AD 5A F2 | 	cmps	local04, local01 wcz
1ccb4     01 B0 66 16 |  if_a	neg	local06, #1
1ccb8     E7 B0 62 FC | 	wrlong	local06, fp
1ccbc     04 01 90 FD | 	jmp	#LR__2453
1ccc0                 | LR__2448
1ccc0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1ccc0     08 CE 05 F1 | 	add	fp, #8
1ccc4     E7 B0 02 FB | 	rdlong	local06, fp
1ccc8     08 CE 85 F1 | 	sub	fp, #8
1cccc     1D B0 0E F2 | 	cmp	local06, #29 wz
1ccd0     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1ccd4     18 00 90 5D |  if_ne	jmp	#LR__2449
1ccd8     00 B0 06 F6 | 	mov	local06, #0
1ccdc     E7 AC 02 FB | 	rdlong	local04, fp
1cce0     53 AD 1A F2 | 	cmp	local04, local01 wcz
1cce4     01 B0 66 16 |  if_a	neg	local06, #1
1cce8     E7 B0 62 FC | 	wrlong	local06, fp
1ccec     D4 00 90 FD | 	jmp	#LR__2453
1ccf0                 | LR__2449
1ccf0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1ccf0     08 CE 05 F1 | 	add	fp, #8
1ccf4     E7 B0 02 FB | 	rdlong	local06, fp
1ccf8     08 CE 85 F1 | 	sub	fp, #8
1ccfc     2B B0 0E F2 | 	cmp	local06, #43 wz
1cd00     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1cd04     28 00 90 5D |  if_ne	jmp	#LR__2450
1cd08     00 B0 06 F6 | 	mov	local06, #0
1cd0c     E7 92 02 FB | 	rdlong	arg01, fp
1cd10     CC 0A BF FD | 	call	#_convertstring
1cd14     3D 93 02 F6 | 	mov	arg01, result1
1cd18     53 95 02 F6 | 	mov	arg02, local01
1cd1c     98 7A B0 FD | 	call	#__system___string_cmp
1cd20     01 7A 56 F2 | 	cmps	result1, #1 wc
1cd24     00 B0 26 36 |  if_ae	not	local06, #0
1cd28     E7 B0 62 FC | 	wrlong	local06, fp
1cd2c     94 00 90 FD | 	jmp	#LR__2453
1cd30                 | LR__2450
1cd30                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1cd30     08 CE 05 F1 | 	add	fp, #8
1cd34     E7 B0 02 FB | 	rdlong	local06, fp
1cd38     08 CE 85 F1 | 	sub	fp, #8
1cd3c     1F B0 0E F2 | 	cmp	local06, #31 wz
1cd40     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1cd44     2C 00 90 5D |  if_ne	jmp	#LR__2451
1cd48     00 B0 06 F6 | 	mov	local06, #0
1cd4c     E7 AC 02 FB | 	rdlong	local04, fp
1cd50     53 93 02 F6 | 	mov	arg01, local01
1cd54     88 0A BF FD | 	call	#_convertstring
1cd58     3D 95 02 F6 | 	mov	arg02, result1
1cd5c     56 93 02 F6 | 	mov	arg01, local04
1cd60     54 7A B0 FD | 	call	#__system___string_cmp
1cd64     01 7A 56 F2 | 	cmps	result1, #1 wc
1cd68     00 B0 26 36 |  if_ae	not	local06, #0
1cd6c     E7 B0 62 FC | 	wrlong	local06, fp
1cd70     50 00 90 FD | 	jmp	#LR__2453
1cd74                 | LR__2451
1cd74                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1cd74     08 CE 05 F1 | 	add	fp, #8
1cd78     E7 B0 02 FB | 	rdlong	local06, fp
1cd7c     08 CE 85 F1 | 	sub	fp, #8
1cd80     2B B0 0E F2 | 	cmp	local06, #43 wz
1cd84     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1cd88     34 00 90 5D |  if_ne	jmp	#LR__2452
1cd8c     00 B0 06 F6 | 	mov	local06, #0
1cd90     E7 92 02 FB | 	rdlong	arg01, fp
1cd94     48 0A BF FD | 	call	#_convertstring
1cd98     3D AD 02 F6 | 	mov	local04, result1
1cd9c     53 93 02 F6 | 	mov	arg01, local01
1cda0     3C 0A BF FD | 	call	#_convertstring
1cda4     3D 95 02 F6 | 	mov	arg02, result1
1cda8     56 93 02 F6 | 	mov	arg01, local04
1cdac     08 7A B0 FD | 	call	#__system___string_cmp
1cdb0     01 7A 56 F2 | 	cmps	result1, #1 wc
1cdb4     00 B0 26 36 |  if_ae	not	local06, #0
1cdb8     E7 B0 62 FC | 	wrlong	local06, fp
1cdbc     04 00 90 FD | 	jmp	#LR__2453
1cdc0                 | LR__2452
1cdc0     E7 00 68 FC | 	wrlong	#0, fp
1cdc4                 | LR__2453
1cdc4     08 CE 05 F1 | 	add	fp, #8
1cdc8     E7 38 68 FC | 	wrlong	#28, fp
1cdcc     08 CE 85 F1 | 	sub	fp, #8
1cdd0                 | ' t1.result.uresult=0
1cdd0                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1cdd0     E7 B0 0A FB | 	rdlong	local06, fp wz
1cdd4     E7 02 68 5C |  if_ne	wrlong	#1, fp
1cdd8     E7 92 02 F6 | 	mov	arg01, fp
1cddc     20 09 BF FD | 	call	#_push
1cde0     E7 F0 03 F6 | 	mov	ptra, fp
1cde4     F2 00 A0 FD | 	call	#popregs_
1cde8                 | _do_gt_ret
1cde8     2D 00 64 FD | 	ret
1cdec                 | 
1cdec                 | ' 
1cdec                 | ' '--------------------------------- less or equal (<=)
1cdec                 | ' 
1cdec                 | ' sub do_le
1cdec                 | _do_le
1cdec     07 CA 05 F6 | 	mov	COUNT_, #7
1cdf0     E8 00 A0 FD | 	call	#pushregs_
1cdf4     18 F0 07 F1 | 	add	ptra, #24
1cdf8     74 08 BF FD | 	call	#_pop
1cdfc     3D A7 02 F6 | 	mov	local01, result1
1ce00     3E AD 02 F6 | 	mov	local04, result2
1ce04     3F AF 02 F6 | 	mov	local05, result3
1ce08     56 A9 02 F6 | 	mov	local02, local04
1ce0c     57 AB 02 F6 | 	mov	local03, local05
1ce10     5C 08 BF FD | 	call	#_pop
1ce14     3F AF 02 F6 | 	mov	local05, result3
1ce18     E7 7A 62 FC | 	wrlong	result1, fp
1ce1c     04 CE 05 F1 | 	add	fp, #4
1ce20     E7 7C 62 FC | 	wrlong	result2, fp
1ce24     04 CE 05 F1 | 	add	fp, #4
1ce28     E7 AE 62 FC | 	wrlong	local05, fp
1ce2c                 | ' 
1ce2c                 | ' t2=pop()
1ce2c                 | ' t1=pop()
1ce2c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1ce2c     08 CE 85 F1 | 	sub	fp, #8
1ce30     1F AE 0E F2 | 	cmp	local05, #31 wz
1ce34     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1ce38     20 00 90 5D |  if_ne	jmp	#LR__2460
1ce3c     00 B0 06 F6 | 	mov	local06, #0
1ce40     E7 92 02 FB | 	rdlong	arg01, fp
1ce44     53 95 02 F6 | 	mov	arg02, local01
1ce48     6C 79 B0 FD | 	call	#__system___string_cmp
1ce4c     01 7A 56 F2 | 	cmps	result1, #1 wc
1ce50     00 B0 26 C6 |  if_b	not	local06, #0
1ce54     E7 B0 62 FC | 	wrlong	local06, fp
1ce58     04 03 90 FD | 	jmp	#LR__2473
1ce5c                 | LR__2460
1ce5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1ce5c     08 CE 05 F1 | 	add	fp, #8
1ce60     E7 B0 02 FB | 	rdlong	local06, fp
1ce64     08 CE 85 F1 | 	sub	fp, #8
1ce68     1E B0 0E F2 | 	cmp	local06, #30 wz
1ce6c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1ce70     24 00 90 5D |  if_ne	jmp	#LR__2461
1ce74     00 B0 06 F6 | 	mov	local06, #0
1ce78     E7 92 02 FB | 	rdlong	arg01, fp
1ce7c     53 95 02 F6 | 	mov	arg02, local01
1ce80     01 96 06 F6 | 	mov	arg03, #1
1ce84     0C A4 B0 FD | 	call	#__system___float_cmp
1ce88     01 7A 56 F2 | 	cmps	result1, #1 wc
1ce8c     00 B0 26 C6 |  if_b	not	local06, #0
1ce90     E7 B0 62 FC | 	wrlong	local06, fp
1ce94     C8 02 90 FD | 	jmp	#LR__2473
1ce98                 | LR__2461
1ce98                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1ce98     08 CE 05 F1 | 	add	fp, #8
1ce9c     E7 B0 02 FB | 	rdlong	local06, fp
1cea0     08 CE 85 F1 | 	sub	fp, #8
1cea4     1E B0 0E F2 | 	cmp	local06, #30 wz
1cea8     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1ceac     3C 00 90 5D |  if_ne	jmp	#LR__2462
1ceb0     00 B0 06 F6 | 	mov	local06, #0
1ceb4     E7 AC 02 FB | 	rdlong	local04, fp
1ceb8     53 93 52 F6 | 	abs	arg01, local01 wc
1cebc     1F B2 C6 C9 |  if_b	decod	local07, #31
1cec0     00 B2 06 36 |  if_ae	mov	local07, #0
1cec4     94 9B B0 FD | 	call	#__system___float_fromuns
1cec8     59 7B 62 F5 | 	xor	result1, local07
1cecc     3D 95 02 F6 | 	mov	arg02, result1
1ced0     56 93 02 F6 | 	mov	arg01, local04
1ced4     01 96 06 F6 | 	mov	arg03, #1
1ced8     B8 A3 B0 FD | 	call	#__system___float_cmp
1cedc     01 7A 56 F2 | 	cmps	result1, #1 wc
1cee0     00 B0 26 C6 |  if_b	not	local06, #0
1cee4     E7 B0 62 FC | 	wrlong	local06, fp
1cee8     74 02 90 FD | 	jmp	#LR__2473
1ceec                 | LR__2462
1ceec                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1ceec     08 CE 05 F1 | 	add	fp, #8
1cef0     E7 B0 02 FB | 	rdlong	local06, fp
1cef4     08 CE 85 F1 | 	sub	fp, #8
1cef8     1E B0 0E F2 | 	cmp	local06, #30 wz
1cefc     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cf00     30 00 90 5D |  if_ne	jmp	#LR__2463
1cf04     00 B0 06 F6 | 	mov	local06, #0
1cf08     E7 AC 02 FB | 	rdlong	local04, fp
1cf0c     53 93 02 F6 | 	mov	arg01, local01
1cf10     48 9B B0 FD | 	call	#__system___float_fromuns
1cf14     3D 95 02 F6 | 	mov	arg02, result1
1cf18     56 93 02 F6 | 	mov	arg01, local04
1cf1c     01 96 06 F6 | 	mov	arg03, #1
1cf20     70 A3 B0 FD | 	call	#__system___float_cmp
1cf24     01 7A 56 F2 | 	cmps	result1, #1 wc
1cf28     00 B0 26 C6 |  if_b	not	local06, #0
1cf2c     E7 B0 62 FC | 	wrlong	local06, fp
1cf30     2C 02 90 FD | 	jmp	#LR__2473
1cf34                 | LR__2463
1cf34                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1cf34     08 CE 05 F1 | 	add	fp, #8
1cf38     E7 B0 02 FB | 	rdlong	local06, fp
1cf3c     08 CE 85 F1 | 	sub	fp, #8
1cf40     1C B0 0E F2 | 	cmp	local06, #28 wz
1cf44     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cf48     3C 00 90 5D |  if_ne	jmp	#LR__2464
1cf4c     00 B0 06 F6 | 	mov	local06, #0
1cf50     E7 92 02 FB | 	rdlong	arg01, fp
1cf54     49 93 52 F6 | 	abs	arg01, arg01 wc
1cf58     1F B2 C6 C9 |  if_b	decod	local07, #31
1cf5c     00 B2 06 36 |  if_ae	mov	local07, #0
1cf60     F8 9A B0 FD | 	call	#__system___float_fromuns
1cf64     59 7B 62 F5 | 	xor	result1, local07
1cf68     3D 93 02 F6 | 	mov	arg01, result1
1cf6c     53 95 02 F6 | 	mov	arg02, local01
1cf70     01 96 06 F6 | 	mov	arg03, #1
1cf74     1C A3 B0 FD | 	call	#__system___float_cmp
1cf78     01 7A 56 F2 | 	cmps	result1, #1 wc
1cf7c     00 B0 26 C6 |  if_b	not	local06, #0
1cf80     E7 B0 62 FC | 	wrlong	local06, fp
1cf84     D8 01 90 FD | 	jmp	#LR__2473
1cf88                 | LR__2464
1cf88                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1cf88     08 CE 05 F1 | 	add	fp, #8
1cf8c     E7 B0 02 FB | 	rdlong	local06, fp
1cf90     08 CE 85 F1 | 	sub	fp, #8
1cf94     1C B0 0E F2 | 	cmp	local06, #28 wz
1cf98     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cf9c     18 00 90 5D |  if_ne	jmp	#LR__2465
1cfa0     00 B0 06 F6 | 	mov	local06, #0
1cfa4     E7 AC 02 FB | 	rdlong	local04, fp
1cfa8     53 AD 5A F2 | 	cmps	local04, local01 wcz
1cfac     01 B0 66 E6 |  if_be	neg	local06, #1
1cfb0     E7 B0 62 FC | 	wrlong	local06, fp
1cfb4     A8 01 90 FD | 	jmp	#LR__2473
1cfb8                 | LR__2465
1cfb8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1cfb8     08 CE 05 F1 | 	add	fp, #8
1cfbc     E7 B0 02 FB | 	rdlong	local06, fp
1cfc0     08 CE 85 F1 | 	sub	fp, #8
1cfc4     1C B0 0E F2 | 	cmp	local06, #28 wz
1cfc8     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cfcc     18 00 90 5D |  if_ne	jmp	#LR__2466
1cfd0     00 B0 06 F6 | 	mov	local06, #0
1cfd4     E7 AC 02 FB | 	rdlong	local04, fp
1cfd8     53 AD 5A F2 | 	cmps	local04, local01 wcz
1cfdc     01 B0 66 E6 |  if_be	neg	local06, #1
1cfe0     E7 B0 62 FC | 	wrlong	local06, fp
1cfe4     78 01 90 FD | 	jmp	#LR__2473
1cfe8                 | LR__2466
1cfe8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1cfe8     08 CE 05 F1 | 	add	fp, #8
1cfec     E7 B0 02 FB | 	rdlong	local06, fp
1cff0     08 CE 85 F1 | 	sub	fp, #8
1cff4     1D B0 0E F2 | 	cmp	local06, #29 wz
1cff8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cffc     2C 00 90 5D |  if_ne	jmp	#LR__2467
1d000     00 B0 06 F6 | 	mov	local06, #0
1d004     E7 92 02 FB | 	rdlong	arg01, fp
1d008     50 9A B0 FD | 	call	#__system___float_fromuns
1d00c     3D 93 02 F6 | 	mov	arg01, result1
1d010     53 95 02 F6 | 	mov	arg02, local01
1d014     01 96 06 F6 | 	mov	arg03, #1
1d018     78 A2 B0 FD | 	call	#__system___float_cmp
1d01c     01 7A 56 F2 | 	cmps	result1, #1 wc
1d020     00 B0 26 C6 |  if_b	not	local06, #0
1d024     E7 B0 62 FC | 	wrlong	local06, fp
1d028     34 01 90 FD | 	jmp	#LR__2473
1d02c                 | LR__2467
1d02c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1d02c     08 CE 05 F1 | 	add	fp, #8
1d030     E7 B0 02 FB | 	rdlong	local06, fp
1d034     08 CE 85 F1 | 	sub	fp, #8
1d038     1D B0 0E F2 | 	cmp	local06, #29 wz
1d03c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d040     18 00 90 5D |  if_ne	jmp	#LR__2468
1d044     00 B0 06 F6 | 	mov	local06, #0
1d048     E7 AC 02 FB | 	rdlong	local04, fp
1d04c     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d050     01 B0 66 E6 |  if_be	neg	local06, #1
1d054     E7 B0 62 FC | 	wrlong	local06, fp
1d058     04 01 90 FD | 	jmp	#LR__2473
1d05c                 | LR__2468
1d05c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1d05c     08 CE 05 F1 | 	add	fp, #8
1d060     E7 B0 02 FB | 	rdlong	local06, fp
1d064     08 CE 85 F1 | 	sub	fp, #8
1d068     1D B0 0E F2 | 	cmp	local06, #29 wz
1d06c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d070     18 00 90 5D |  if_ne	jmp	#LR__2469
1d074     00 B0 06 F6 | 	mov	local06, #0
1d078     E7 AC 02 FB | 	rdlong	local04, fp
1d07c     53 AD 1A F2 | 	cmp	local04, local01 wcz
1d080     01 B0 66 E6 |  if_be	neg	local06, #1
1d084     E7 B0 62 FC | 	wrlong	local06, fp
1d088     D4 00 90 FD | 	jmp	#LR__2473
1d08c                 | LR__2469
1d08c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1d08c     08 CE 05 F1 | 	add	fp, #8
1d090     E7 B0 02 FB | 	rdlong	local06, fp
1d094     08 CE 85 F1 | 	sub	fp, #8
1d098     2B B0 0E F2 | 	cmp	local06, #43 wz
1d09c     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d0a0     28 00 90 5D |  if_ne	jmp	#LR__2470
1d0a4     00 B0 06 F6 | 	mov	local06, #0
1d0a8     E7 92 02 FB | 	rdlong	arg01, fp
1d0ac     30 07 BF FD | 	call	#_convertstring
1d0b0     3D 93 02 F6 | 	mov	arg01, result1
1d0b4     53 95 02 F6 | 	mov	arg02, local01
1d0b8     FC 76 B0 FD | 	call	#__system___string_cmp
1d0bc     01 7A 56 F2 | 	cmps	result1, #1 wc
1d0c0     00 B0 26 C6 |  if_b	not	local06, #0
1d0c4     E7 B0 62 FC | 	wrlong	local06, fp
1d0c8     94 00 90 FD | 	jmp	#LR__2473
1d0cc                 | LR__2470
1d0cc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1d0cc     08 CE 05 F1 | 	add	fp, #8
1d0d0     E7 B0 02 FB | 	rdlong	local06, fp
1d0d4     08 CE 85 F1 | 	sub	fp, #8
1d0d8     1F B0 0E F2 | 	cmp	local06, #31 wz
1d0dc     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d0e0     2C 00 90 5D |  if_ne	jmp	#LR__2471
1d0e4     00 B0 06 F6 | 	mov	local06, #0
1d0e8     E7 AC 02 FB | 	rdlong	local04, fp
1d0ec     53 93 02 F6 | 	mov	arg01, local01
1d0f0     EC 06 BF FD | 	call	#_convertstring
1d0f4     3D 95 02 F6 | 	mov	arg02, result1
1d0f8     56 93 02 F6 | 	mov	arg01, local04
1d0fc     B8 76 B0 FD | 	call	#__system___string_cmp
1d100     01 7A 56 F2 | 	cmps	result1, #1 wc
1d104     00 B0 26 C6 |  if_b	not	local06, #0
1d108     E7 B0 62 FC | 	wrlong	local06, fp
1d10c     50 00 90 FD | 	jmp	#LR__2473
1d110                 | LR__2471
1d110                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1d110     08 CE 05 F1 | 	add	fp, #8
1d114     E7 B0 02 FB | 	rdlong	local06, fp
1d118     08 CE 85 F1 | 	sub	fp, #8
1d11c     2B B0 0E F2 | 	cmp	local06, #43 wz
1d120     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d124     34 00 90 5D |  if_ne	jmp	#LR__2472
1d128     00 B0 06 F6 | 	mov	local06, #0
1d12c     E7 92 02 FB | 	rdlong	arg01, fp
1d130     AC 06 BF FD | 	call	#_convertstring
1d134     3D AD 02 F6 | 	mov	local04, result1
1d138     53 93 02 F6 | 	mov	arg01, local01
1d13c     A0 06 BF FD | 	call	#_convertstring
1d140     3D 95 02 F6 | 	mov	arg02, result1
1d144     56 93 02 F6 | 	mov	arg01, local04
1d148     6C 76 B0 FD | 	call	#__system___string_cmp
1d14c     01 7A 56 F2 | 	cmps	result1, #1 wc
1d150     00 B0 26 C6 |  if_b	not	local06, #0
1d154     E7 B0 62 FC | 	wrlong	local06, fp
1d158     04 00 90 FD | 	jmp	#LR__2473
1d15c                 | LR__2472
1d15c     E7 00 68 FC | 	wrlong	#0, fp
1d160                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d160                 | LR__2473
1d160     08 CE 05 F1 | 	add	fp, #8
1d164     E7 38 68 FC | 	wrlong	#28, fp
1d168     08 CE 85 F1 | 	sub	fp, #8
1d16c     E7 92 02 F6 | 	mov	arg01, fp
1d170     8C 05 BF FD | 	call	#_push
1d174     E7 F0 03 F6 | 	mov	ptra, fp
1d178     F2 00 A0 FD | 	call	#popregs_
1d17c                 | _do_le_ret
1d17c     2D 00 64 FD | 	ret
1d180                 | 
1d180                 | ' 
1d180                 | ' '--------------------------------- less than (<)
1d180                 | ' 
1d180                 | ' sub do_lt
1d180                 | _do_lt
1d180     07 CA 05 F6 | 	mov	COUNT_, #7
1d184     E8 00 A0 FD | 	call	#pushregs_
1d188     18 F0 07 F1 | 	add	ptra, #24
1d18c     E0 04 BF FD | 	call	#_pop
1d190     3D A7 02 F6 | 	mov	local01, result1
1d194     3E AD 02 F6 | 	mov	local04, result2
1d198     3F AF 02 F6 | 	mov	local05, result3
1d19c     56 A9 02 F6 | 	mov	local02, local04
1d1a0     57 AB 02 F6 | 	mov	local03, local05
1d1a4     C8 04 BF FD | 	call	#_pop
1d1a8     3F AF 02 F6 | 	mov	local05, result3
1d1ac     E7 7A 62 FC | 	wrlong	result1, fp
1d1b0     04 CE 05 F1 | 	add	fp, #4
1d1b4     E7 7C 62 FC | 	wrlong	result2, fp
1d1b8     04 CE 05 F1 | 	add	fp, #4
1d1bc     E7 AE 62 FC | 	wrlong	local05, fp
1d1c0                 | ' 
1d1c0                 | ' t2=pop()
1d1c0                 | ' t1=pop()
1d1c0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1d1c0     08 CE 85 F1 | 	sub	fp, #8
1d1c4     1F AE 0E F2 | 	cmp	local05, #31 wz
1d1c8     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d1cc     20 00 90 5D |  if_ne	jmp	#LR__2480
1d1d0     00 B0 06 F6 | 	mov	local06, #0
1d1d4     E7 92 02 FB | 	rdlong	arg01, fp
1d1d8     53 95 02 F6 | 	mov	arg02, local01
1d1dc     D8 75 B0 FD | 	call	#__system___string_cmp
1d1e0     00 7A 56 F2 | 	cmps	result1, #0 wc
1d1e4     00 B0 26 C6 |  if_b	not	local06, #0
1d1e8     E7 B0 62 FC | 	wrlong	local06, fp
1d1ec     E4 02 90 FD | 	jmp	#LR__2489
1d1f0                 | LR__2480
1d1f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1d1f0     08 CE 05 F1 | 	add	fp, #8
1d1f4     E7 B0 02 FB | 	rdlong	local06, fp
1d1f8     08 CE 85 F1 | 	sub	fp, #8
1d1fc     1E B0 0E F2 | 	cmp	local06, #30 wz
1d200     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d204     24 00 90 5D |  if_ne	jmp	#LR__2481
1d208     00 B0 06 F6 | 	mov	local06, #0
1d20c     E7 92 02 FB | 	rdlong	arg01, fp
1d210     53 95 02 F6 | 	mov	arg02, local01
1d214     01 96 06 F6 | 	mov	arg03, #1
1d218     78 A0 B0 FD | 	call	#__system___float_cmp
1d21c     00 7A 56 F2 | 	cmps	result1, #0 wc
1d220     00 B0 26 C6 |  if_b	not	local06, #0
1d224     E7 B0 62 FC | 	wrlong	local06, fp
1d228     A8 02 90 FD | 	jmp	#LR__2489
1d22c                 | LR__2481
1d22c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1d22c     08 CE 05 F1 | 	add	fp, #8
1d230     E7 B0 02 FB | 	rdlong	local06, fp
1d234     08 CE 85 F1 | 	sub	fp, #8
1d238     1E B0 0E F2 | 	cmp	local06, #30 wz
1d23c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d240     3C 00 90 5D |  if_ne	jmp	#LR__2482
1d244     00 B0 06 F6 | 	mov	local06, #0
1d248     E7 AC 02 FB | 	rdlong	local04, fp
1d24c     53 93 52 F6 | 	abs	arg01, local01 wc
1d250     1F B2 C6 C9 |  if_b	decod	local07, #31
1d254     00 B2 06 36 |  if_ae	mov	local07, #0
1d258     00 98 B0 FD | 	call	#__system___float_fromuns
1d25c     59 7B 62 F5 | 	xor	result1, local07
1d260     3D 95 02 F6 | 	mov	arg02, result1
1d264     56 93 02 F6 | 	mov	arg01, local04
1d268     01 96 06 F6 | 	mov	arg03, #1
1d26c     24 A0 B0 FD | 	call	#__system___float_cmp
1d270     00 7A 56 F2 | 	cmps	result1, #0 wc
1d274     00 B0 26 C6 |  if_b	not	local06, #0
1d278     E7 B0 62 FC | 	wrlong	local06, fp
1d27c     54 02 90 FD | 	jmp	#LR__2489
1d280                 | LR__2482
1d280                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1d280     08 CE 05 F1 | 	add	fp, #8
1d284     E7 B0 02 FB | 	rdlong	local06, fp
1d288     08 CE 85 F1 | 	sub	fp, #8
1d28c     1E B0 0E F2 | 	cmp	local06, #30 wz
1d290     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d294     30 00 90 5D |  if_ne	jmp	#LR__2483
1d298     00 B0 06 F6 | 	mov	local06, #0
1d29c     E7 AC 02 FB | 	rdlong	local04, fp
1d2a0     53 93 02 F6 | 	mov	arg01, local01
1d2a4     B4 97 B0 FD | 	call	#__system___float_fromuns
1d2a8     3D 95 02 F6 | 	mov	arg02, result1
1d2ac     56 93 02 F6 | 	mov	arg01, local04
1d2b0     01 96 06 F6 | 	mov	arg03, #1
1d2b4     DC 9F B0 FD | 	call	#__system___float_cmp
1d2b8     00 7A 56 F2 | 	cmps	result1, #0 wc
1d2bc     00 B0 26 C6 |  if_b	not	local06, #0
1d2c0     E7 B0 62 FC | 	wrlong	local06, fp
1d2c4     0C 02 90 FD | 	jmp	#LR__2489
1d2c8                 | LR__2483
1d2c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1d2c8     08 CE 05 F1 | 	add	fp, #8
1d2cc     E7 B0 02 FB | 	rdlong	local06, fp
1d2d0     08 CE 85 F1 | 	sub	fp, #8
1d2d4     1C B0 0E F2 | 	cmp	local06, #28 wz
1d2d8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d2dc     3C 00 90 5D |  if_ne	jmp	#LR__2484
1d2e0     00 B0 06 F6 | 	mov	local06, #0
1d2e4     E7 92 02 FB | 	rdlong	arg01, fp
1d2e8     49 93 52 F6 | 	abs	arg01, arg01 wc
1d2ec     1F B2 C6 C9 |  if_b	decod	local07, #31
1d2f0     00 B2 06 36 |  if_ae	mov	local07, #0
1d2f4     64 97 B0 FD | 	call	#__system___float_fromuns
1d2f8     59 7B 62 F5 | 	xor	result1, local07
1d2fc     3D 93 02 F6 | 	mov	arg01, result1
1d300     53 95 02 F6 | 	mov	arg02, local01
1d304     01 96 06 F6 | 	mov	arg03, #1
1d308     88 9F B0 FD | 	call	#__system___float_cmp
1d30c     00 7A 56 F2 | 	cmps	result1, #0 wc
1d310     00 B0 26 C6 |  if_b	not	local06, #0
1d314     E7 B0 62 FC | 	wrlong	local06, fp
1d318     B8 01 90 FD | 	jmp	#LR__2489
1d31c                 | LR__2484
1d31c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1d31c     08 CE 05 F1 | 	add	fp, #8
1d320     E7 B0 02 FB | 	rdlong	local06, fp
1d324     08 CE 85 F1 | 	sub	fp, #8
1d328     1C B0 0E F2 | 	cmp	local06, #28 wz
1d32c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d330     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d334     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1d338     58 B1 A2 A1 |  if_e	subx	local06, local06
1d33c     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d340     90 01 90 AD |  if_e	jmp	#LR__2489
1d344                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1d344     08 CE 05 F1 | 	add	fp, #8
1d348     E7 B0 02 FB | 	rdlong	local06, fp
1d34c     08 CE 85 F1 | 	sub	fp, #8
1d350     1C B0 0E F2 | 	cmp	local06, #28 wz
1d354     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d358     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d35c     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1d360     58 B1 A2 A1 |  if_e	subx	local06, local06
1d364     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d368     68 01 90 AD |  if_e	jmp	#LR__2489
1d36c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1d36c     08 CE 05 F1 | 	add	fp, #8
1d370     E7 B0 02 FB | 	rdlong	local06, fp
1d374     08 CE 85 F1 | 	sub	fp, #8
1d378     1D B0 0E F2 | 	cmp	local06, #29 wz
1d37c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d380     2C 00 90 5D |  if_ne	jmp	#LR__2485
1d384     00 B0 06 F6 | 	mov	local06, #0
1d388     E7 92 02 FB | 	rdlong	arg01, fp
1d38c     CC 96 B0 FD | 	call	#__system___float_fromuns
1d390     3D 93 02 F6 | 	mov	arg01, result1
1d394     53 95 02 F6 | 	mov	arg02, local01
1d398     01 96 06 F6 | 	mov	arg03, #1
1d39c     F4 9E B0 FD | 	call	#__system___float_cmp
1d3a0     00 7A 56 F2 | 	cmps	result1, #0 wc
1d3a4     00 B0 26 C6 |  if_b	not	local06, #0
1d3a8     E7 B0 62 FC | 	wrlong	local06, fp
1d3ac     24 01 90 FD | 	jmp	#LR__2489
1d3b0                 | LR__2485
1d3b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1d3b0     08 CE 05 F1 | 	add	fp, #8
1d3b4     E7 B0 02 FB | 	rdlong	local06, fp
1d3b8     08 CE 85 F1 | 	sub	fp, #8
1d3bc     1D B0 0E F2 | 	cmp	local06, #29 wz
1d3c0     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d3c4     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d3c8     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1d3cc     58 B1 A2 A1 |  if_e	subx	local06, local06
1d3d0     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d3d4     FC 00 90 AD |  if_e	jmp	#LR__2489
1d3d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1d3d8     08 CE 05 F1 | 	add	fp, #8
1d3dc     E7 B0 02 FB | 	rdlong	local06, fp
1d3e0     08 CE 85 F1 | 	sub	fp, #8
1d3e4     1D B0 0E F2 | 	cmp	local06, #29 wz
1d3e8     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d3ec     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d3f0     53 AD 12 A2 |  if_e	cmp	local04, local01 wc
1d3f4     58 B1 A2 A1 |  if_e	subx	local06, local06
1d3f8     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d3fc     D4 00 90 AD |  if_e	jmp	#LR__2489
1d400                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1d400     08 CE 05 F1 | 	add	fp, #8
1d404     E7 B0 02 FB | 	rdlong	local06, fp
1d408     08 CE 85 F1 | 	sub	fp, #8
1d40c     2B B0 0E F2 | 	cmp	local06, #43 wz
1d410     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d414     28 00 90 5D |  if_ne	jmp	#LR__2486
1d418     00 B0 06 F6 | 	mov	local06, #0
1d41c     E7 92 02 FB | 	rdlong	arg01, fp
1d420     BC 03 BF FD | 	call	#_convertstring
1d424     3D 93 02 F6 | 	mov	arg01, result1
1d428     53 95 02 F6 | 	mov	arg02, local01
1d42c     88 73 B0 FD | 	call	#__system___string_cmp
1d430     00 7A 56 F2 | 	cmps	result1, #0 wc
1d434     00 B0 26 C6 |  if_b	not	local06, #0
1d438     E7 B0 62 FC | 	wrlong	local06, fp
1d43c     94 00 90 FD | 	jmp	#LR__2489
1d440                 | LR__2486
1d440                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1d440     08 CE 05 F1 | 	add	fp, #8
1d444     E7 B0 02 FB | 	rdlong	local06, fp
1d448     08 CE 85 F1 | 	sub	fp, #8
1d44c     1F B0 0E F2 | 	cmp	local06, #31 wz
1d450     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d454     2C 00 90 5D |  if_ne	jmp	#LR__2487
1d458     00 B0 06 F6 | 	mov	local06, #0
1d45c     E7 AC 02 FB | 	rdlong	local04, fp
1d460     53 93 02 F6 | 	mov	arg01, local01
1d464     78 03 BF FD | 	call	#_convertstring
1d468     3D 95 02 F6 | 	mov	arg02, result1
1d46c     56 93 02 F6 | 	mov	arg01, local04
1d470     44 73 B0 FD | 	call	#__system___string_cmp
1d474     00 7A 56 F2 | 	cmps	result1, #0 wc
1d478     00 B0 26 C6 |  if_b	not	local06, #0
1d47c     E7 B0 62 FC | 	wrlong	local06, fp
1d480     50 00 90 FD | 	jmp	#LR__2489
1d484                 | LR__2487
1d484                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1d484     08 CE 05 F1 | 	add	fp, #8
1d488     E7 B0 02 FB | 	rdlong	local06, fp
1d48c     08 CE 85 F1 | 	sub	fp, #8
1d490     2B B0 0E F2 | 	cmp	local06, #43 wz
1d494     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d498     34 00 90 5D |  if_ne	jmp	#LR__2488
1d49c     00 B0 06 F6 | 	mov	local06, #0
1d4a0     E7 92 02 FB | 	rdlong	arg01, fp
1d4a4     38 03 BF FD | 	call	#_convertstring
1d4a8     3D AD 02 F6 | 	mov	local04, result1
1d4ac     53 93 02 F6 | 	mov	arg01, local01
1d4b0     2C 03 BF FD | 	call	#_convertstring
1d4b4     3D 95 02 F6 | 	mov	arg02, result1
1d4b8     56 93 02 F6 | 	mov	arg01, local04
1d4bc     F8 72 B0 FD | 	call	#__system___string_cmp
1d4c0     00 7A 56 F2 | 	cmps	result1, #0 wc
1d4c4     00 B0 26 C6 |  if_b	not	local06, #0
1d4c8     E7 B0 62 FC | 	wrlong	local06, fp
1d4cc     04 00 90 FD | 	jmp	#LR__2489
1d4d0                 | LR__2488
1d4d0     E7 00 68 FC | 	wrlong	#0, fp
1d4d4                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d4d4                 | LR__2489
1d4d4     08 CE 05 F1 | 	add	fp, #8
1d4d8     E7 38 68 FC | 	wrlong	#28, fp
1d4dc     08 CE 85 F1 | 	sub	fp, #8
1d4e0     E7 92 02 F6 | 	mov	arg01, fp
1d4e4     18 02 BF FD | 	call	#_push
1d4e8     E7 F0 03 F6 | 	mov	ptra, fp
1d4ec     F2 00 A0 FD | 	call	#popregs_
1d4f0                 | _do_lt_ret
1d4f0     2D 00 64 FD | 	ret
1d4f4                 | 
1d4f4                 | ' 
1d4f4                 | ' '--------------------------------- minus (-)
1d4f4                 | ' 
1d4f4                 | ' sub do_minus
1d4f4                 | _do_minus
1d4f4     07 CA 05 F6 | 	mov	COUNT_, #7
1d4f8     E8 00 A0 FD | 	call	#pushregs_
1d4fc     18 F0 07 F1 | 	add	ptra, #24
1d500     6C 01 BF FD | 	call	#_pop
1d504     3D A7 02 F6 | 	mov	local01, result1
1d508     3E AD 02 F6 | 	mov	local04, result2
1d50c     3F AF 02 F6 | 	mov	local05, result3
1d510     56 A9 02 F6 | 	mov	local02, local04
1d514     57 AB 02 F6 | 	mov	local03, local05
1d518     54 01 BF FD | 	call	#_pop
1d51c     3F AF 02 F6 | 	mov	local05, result3
1d520     E7 7A 62 FC | 	wrlong	result1, fp
1d524     04 CE 05 F1 | 	add	fp, #4
1d528     E7 7C 62 FC | 	wrlong	result2, fp
1d52c     04 CE 05 F1 | 	add	fp, #4
1d530     E7 AE 62 FC | 	wrlong	local05, fp
1d534                 | ' 
1d534                 | ' t2=pop()
1d534                 | ' t1=pop()
1d534                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1d534     08 CE 85 F1 | 	sub	fp, #8
1d538     1D AE 0E F2 | 	cmp	local05, #29 wz
1d53c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d540     30 00 90 5D |  if_ne	jmp	#LR__2490
1d544                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1d544     E7 B0 02 FB | 	rdlong	local06, fp
1d548     58 A7 12 F2 | 	cmp	local01, local06 wc
1d54c     53 B1 82 C1 |  if_b	sub	local06, local01
1d550     E7 B0 62 CC |  if_b	wrlong	local06, fp
1d554     18 02 90 CD |  if_b	jmp	#LR__2497
1d558     E7 B0 02 FB | 	rdlong	local06, fp
1d55c     53 B1 82 F1 | 	sub	local06, local01
1d560     E7 B0 62 FC | 	wrlong	local06, fp
1d564     08 CE 05 F1 | 	add	fp, #8
1d568     E7 38 68 FC | 	wrlong	#28, fp
1d56c     08 CE 85 F1 | 	sub	fp, #8
1d570     FC 01 90 FD | 	jmp	#LR__2497
1d574                 | LR__2490
1d574                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1d574     08 CE 05 F1 | 	add	fp, #8
1d578     E7 B0 02 FB | 	rdlong	local06, fp
1d57c     08 CE 85 F1 | 	sub	fp, #8
1d580     1D B0 0E F2 | 	cmp	local06, #29 wz
1d584     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d588     1C 00 90 5D |  if_ne	jmp	#LR__2491
1d58c     E7 B0 02 FB | 	rdlong	local06, fp
1d590     53 B1 82 F1 | 	sub	local06, local01
1d594     E7 B0 62 FC | 	wrlong	local06, fp
1d598     08 CE 05 F1 | 	add	fp, #8
1d59c     E7 38 68 FC | 	wrlong	#28, fp
1d5a0     08 CE 85 F1 | 	sub	fp, #8
1d5a4     C8 01 90 FD | 	jmp	#LR__2497
1d5a8                 | LR__2491
1d5a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1d5a8     08 CE 05 F1 | 	add	fp, #8
1d5ac     E7 B0 02 FB | 	rdlong	local06, fp
1d5b0     08 CE 85 F1 | 	sub	fp, #8
1d5b4     1D B0 0E F2 | 	cmp	local06, #29 wz
1d5b8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d5bc     2C 00 90 5D |  if_ne	jmp	#LR__2492
1d5c0     E7 92 02 FB | 	rdlong	arg01, fp
1d5c4     94 94 B0 FD | 	call	#__system___float_fromuns
1d5c8     3D 93 02 F6 | 	mov	arg01, result1
1d5cc     53 95 02 F6 | 	mov	arg02, local01
1d5d0     1F 94 E6 F4 | 	bitnot	arg02, #31
1d5d4     B8 94 B0 FD | 	call	#__system___float_add
1d5d8     E7 7A 62 FC | 	wrlong	result1, fp
1d5dc     08 CE 05 F1 | 	add	fp, #8
1d5e0     E7 3C 68 FC | 	wrlong	#30, fp
1d5e4     08 CE 85 F1 | 	sub	fp, #8
1d5e8     84 01 90 FD | 	jmp	#LR__2497
1d5ec                 | LR__2492
1d5ec                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1d5ec     08 CE 05 F1 | 	add	fp, #8
1d5f0     E7 B0 02 FB | 	rdlong	local06, fp
1d5f4     08 CE 85 F1 | 	sub	fp, #8
1d5f8     1C B0 0E F2 | 	cmp	local06, #28 wz
1d5fc     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d600     E7 B0 02 AB |  if_e	rdlong	local06, fp
1d604     53 B1 82 A1 |  if_e	sub	local06, local01
1d608     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d60c     60 01 90 AD |  if_e	jmp	#LR__2497
1d610                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1d610     08 CE 05 F1 | 	add	fp, #8
1d614     E7 B0 02 FB | 	rdlong	local06, fp
1d618     08 CE 85 F1 | 	sub	fp, #8
1d61c     1C B0 0E F2 | 	cmp	local06, #28 wz
1d620     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d624     E7 B0 02 AB |  if_e	rdlong	local06, fp
1d628     53 B1 82 A1 |  if_e	sub	local06, local01
1d62c     E7 B0 62 AC |  if_e	wrlong	local06, fp
1d630     3C 01 90 AD |  if_e	jmp	#LR__2497
1d634                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1d634     08 CE 05 F1 | 	add	fp, #8
1d638     E7 B0 02 FB | 	rdlong	local06, fp
1d63c     08 CE 85 F1 | 	sub	fp, #8
1d640     1C B0 0E F2 | 	cmp	local06, #28 wz
1d644     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d648     3C 00 90 5D |  if_ne	jmp	#LR__2493
1d64c     E7 92 02 FB | 	rdlong	arg01, fp
1d650     49 93 52 F6 | 	abs	arg01, arg01 wc
1d654     1F B2 C6 C9 |  if_b	decod	local07, #31
1d658     00 B2 06 36 |  if_ae	mov	local07, #0
1d65c     FC 93 B0 FD | 	call	#__system___float_fromuns
1d660     59 7B 62 F5 | 	xor	result1, local07
1d664     3D 93 02 F6 | 	mov	arg01, result1
1d668     53 95 02 F6 | 	mov	arg02, local01
1d66c     1F 94 E6 F4 | 	bitnot	arg02, #31
1d670     1C 94 B0 FD | 	call	#__system___float_add
1d674     E7 7A 62 FC | 	wrlong	result1, fp
1d678     08 CE 05 F1 | 	add	fp, #8
1d67c     E7 3C 68 FC | 	wrlong	#30, fp
1d680     08 CE 85 F1 | 	sub	fp, #8
1d684     E8 00 90 FD | 	jmp	#LR__2497
1d688                 | LR__2493
1d688                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1d688     08 CE 05 F1 | 	add	fp, #8
1d68c     E7 B0 02 FB | 	rdlong	local06, fp
1d690     08 CE 85 F1 | 	sub	fp, #8
1d694     1E B0 0E F2 | 	cmp	local06, #30 wz
1d698     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d69c     24 00 90 5D |  if_ne	jmp	#LR__2494
1d6a0     E7 B0 02 FB | 	rdlong	local06, fp
1d6a4     53 93 02 F6 | 	mov	arg01, local01
1d6a8     B0 93 B0 FD | 	call	#__system___float_fromuns
1d6ac     3D 95 02 F6 | 	mov	arg02, result1
1d6b0     58 93 02 F6 | 	mov	arg01, local06
1d6b4     1F 94 E6 F4 | 	bitnot	arg02, #31
1d6b8     D4 93 B0 FD | 	call	#__system___float_add
1d6bc     E7 7A 62 FC | 	wrlong	result1, fp
1d6c0     AC 00 90 FD | 	jmp	#LR__2497
1d6c4                 | LR__2494
1d6c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1d6c4     08 CE 05 F1 | 	add	fp, #8
1d6c8     E7 B0 02 FB | 	rdlong	local06, fp
1d6cc     08 CE 85 F1 | 	sub	fp, #8
1d6d0     1E B0 0E F2 | 	cmp	local06, #30 wz
1d6d4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d6d8     30 00 90 5D |  if_ne	jmp	#LR__2495
1d6dc     E7 B0 02 FB | 	rdlong	local06, fp
1d6e0     53 93 52 F6 | 	abs	arg01, local01 wc
1d6e4     1F B2 C6 C9 |  if_b	decod	local07, #31
1d6e8     00 B2 06 36 |  if_ae	mov	local07, #0
1d6ec     6C 93 B0 FD | 	call	#__system___float_fromuns
1d6f0     59 7B 62 F5 | 	xor	result1, local07
1d6f4     3D 95 02 F6 | 	mov	arg02, result1
1d6f8     58 93 02 F6 | 	mov	arg01, local06
1d6fc     1F 94 E6 F4 | 	bitnot	arg02, #31
1d700     8C 93 B0 FD | 	call	#__system___float_add
1d704     E7 7A 62 FC | 	wrlong	result1, fp
1d708     64 00 90 FD | 	jmp	#LR__2497
1d70c                 | LR__2495
1d70c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1d70c     08 CE 05 F1 | 	add	fp, #8
1d710     E7 B0 02 FB | 	rdlong	local06, fp
1d714     08 CE 85 F1 | 	sub	fp, #8
1d718     1E B0 0E F2 | 	cmp	local06, #30 wz
1d71c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d720     18 00 90 5D |  if_ne	jmp	#LR__2496
1d724     E7 92 02 FB | 	rdlong	arg01, fp
1d728     53 95 02 F6 | 	mov	arg02, local01
1d72c     1F 94 E6 F4 | 	bitnot	arg02, #31
1d730     5C 93 B0 FD | 	call	#__system___float_add
1d734     E7 7A 62 FC | 	wrlong	result1, fp
1d738     34 00 90 FD | 	jmp	#LR__2497
1d73c                 | LR__2496
1d73c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1d73c     08 CE 05 F1 | 	add	fp, #8
1d740     E7 B0 02 FB | 	rdlong	local06, fp
1d744     08 CE 85 F1 | 	sub	fp, #8
1d748     1F B0 0E F2 | 	cmp	local06, #31 wz
1d74c     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1d750     E7 06 68 AC |  if_e	wrlong	#3, fp
1d754     08 CE 05 A1 |  if_e	add	fp, #8
1d758     E7 FE 69 AC |  if_e	wrlong	#255, fp
1d75c     08 CE 85 A1 |  if_e	sub	fp, #8
1d760     E7 0A 68 5C |  if_ne	wrlong	#5, fp
1d764     08 CE 05 51 |  if_ne	add	fp, #8
1d768     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1d76c     08 CE 85 51 |  if_ne	sub	fp, #8
1d770                 | LR__2497
1d770     E7 92 02 F6 | 	mov	arg01, fp
1d774     88 FF BE FD | 	call	#_push
1d778     E7 F0 03 F6 | 	mov	ptra, fp
1d77c     F2 00 A0 FD | 	call	#popregs_
1d780                 | _do_minus_ret
1d780     2D 00 64 FD | 	ret
1d784                 | 
1d784                 | ' 
1d784                 | ' '--------------------------------- negative (-), one argument negative
1d784                 | ' 
1d784                 | ' sub do_negative
1d784                 | _do_negative
1d784     02 CA 05 F6 | 	mov	COUNT_, #2
1d788     E8 00 A0 FD | 	call	#pushregs_
1d78c     0C F0 07 F1 | 	add	ptra, #12
1d790     DC FE BE FD | 	call	#_pop
1d794     3F A7 02 F6 | 	mov	local01, result3
1d798     E7 7A 62 FC | 	wrlong	result1, fp
1d79c     04 CE 05 F1 | 	add	fp, #4
1d7a0     E7 7C 62 FC | 	wrlong	result2, fp
1d7a4     04 CE 05 F1 | 	add	fp, #4
1d7a8     E7 A6 62 FC | 	wrlong	local01, fp
1d7ac                 | ' 
1d7ac                 | ' t1=pop()
1d7ac                 | ' if t1.result_type=result_int then 
1d7ac     08 CE 85 F1 | 	sub	fp, #8
1d7b0     1C A6 0E F2 | 	cmp	local01, #28 wz
1d7b4     E7 A8 02 AB |  if_e	rdlong	local02, fp
1d7b8     54 A7 62 A6 |  if_e	neg	local01, local02
1d7bc     E7 A6 62 AC |  if_e	wrlong	local01, fp
1d7c0     5C 00 90 AD |  if_e	jmp	#LR__2502
1d7c4     08 CE 05 F1 | 	add	fp, #8
1d7c8     E7 A6 02 FB | 	rdlong	local01, fp
1d7cc     08 CE 85 F1 | 	sub	fp, #8
1d7d0     1D A6 0E F2 | 	cmp	local01, #29 wz
1d7d4     1C 00 90 5D |  if_ne	jmp	#LR__2500
1d7d8     E7 A8 02 FB | 	rdlong	local02, fp
1d7dc     54 A7 62 F6 | 	neg	local01, local02
1d7e0     E7 A6 62 FC | 	wrlong	local01, fp
1d7e4     08 CE 05 F1 | 	add	fp, #8
1d7e8     E7 38 68 FC | 	wrlong	#28, fp
1d7ec     08 CE 85 F1 | 	sub	fp, #8
1d7f0     2C 00 90 FD | 	jmp	#LR__2501
1d7f4                 | LR__2500
1d7f4     08 CE 05 F1 | 	add	fp, #8
1d7f8     E7 A6 02 FB | 	rdlong	local01, fp
1d7fc     08 CE 85 F1 | 	sub	fp, #8
1d800     1E A6 0E F2 | 	cmp	local01, #30 wz
1d804     E7 7A 02 AB |  if_e	rdlong	result1, fp
1d808     1F 7A E6 A4 |  if_e	bitnot	result1, #31
1d80c     E7 7A 62 AC |  if_e	wrlong	result1, fp
1d810     08 CE 05 51 |  if_ne	add	fp, #8
1d814     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1d818     08 CE 85 51 |  if_ne	sub	fp, #8
1d81c     E7 50 68 5C |  if_ne	wrlong	#40, fp
1d820                 | LR__2501
1d820                 | LR__2502
1d820     E7 92 02 F6 | 	mov	arg01, fp
1d824     D8 FE BE FD | 	call	#_push
1d828     E7 F0 03 F6 | 	mov	ptra, fp
1d82c     F2 00 A0 FD | 	call	#popregs_
1d830                 | _do_negative_ret
1d830     2D 00 64 FD | 	ret
1d834                 | 
1d834                 | ' 
1d834                 | ' '--------------------------------- MOD (modulo)
1d834                 | ' 
1d834                 | ' sub do_mod 
1d834                 | _do_mod
1d834     04 CA 05 F6 | 	mov	COUNT_, #4
1d838     E8 00 A0 FD | 	call	#pushregs_
1d83c     18 F0 07 F1 | 	add	ptra, #24
1d840     2C FE BE FD | 	call	#_pop
1d844     3D A7 02 F6 | 	mov	local01, result1
1d848     3E 11 03 F6 | 	mov	muldivb_, result2
1d84c     3F 0F 03 F6 | 	mov	muldiva_, result3
1d850     88 A9 02 F6 | 	mov	local02, muldivb_
1d854     87 AB 02 F6 | 	mov	local03, muldiva_
1d858     14 FE BE FD | 	call	#_pop
1d85c     E7 7A 62 FC | 	wrlong	result1, fp
1d860     04 CE 05 F1 | 	add	fp, #4
1d864     E7 7C 62 FC | 	wrlong	result2, fp
1d868     04 CE 05 F1 | 	add	fp, #4
1d86c     E7 7E 62 FC | 	wrlong	result3, fp
1d870                 | ' 
1d870                 | ' t2=pop()
1d870                 | ' t1=pop()
1d870                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1d870     08 CE 85 F1 | 	sub	fp, #8
1d874     1F 7E 0E F2 | 	cmp	result3, #31 wz
1d878     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1d87c     E7 14 68 AC |  if_e	wrlong	#10, fp
1d880     08 CE 05 A1 |  if_e	add	fp, #8
1d884     E7 FE 69 AC |  if_e	wrlong	#255, fp
1d888     08 CE 85 A1 |  if_e	sub	fp, #8
1d88c     14 01 90 AD |  if_e	jmp	#LR__2515
1d890                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1d890     08 CE 05 F1 | 	add	fp, #8
1d894     E7 10 03 FB | 	rdlong	muldivb_, fp
1d898     08 CE 85 F1 | 	sub	fp, #8
1d89c     1E 10 0F F2 | 	cmp	muldivb_, #30 wz
1d8a0     1C 00 90 5D |  if_ne	jmp	#LR__2510
1d8a4     08 CE 05 F1 | 	add	fp, #8
1d8a8     E7 38 68 FC | 	wrlong	#28, fp
1d8ac     08 CE 85 F1 | 	sub	fp, #8
1d8b0     E7 92 02 FB | 	rdlong	arg01, fp
1d8b4     00 94 06 F6 | 	mov	arg02, #0
1d8b8     6C 9A B0 FD | 	call	#__system___float_tointeger
1d8bc     E7 7A 62 FC | 	wrlong	result1, fp
1d8c0                 | LR__2510
1d8c0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1d8c0     1E AA 0E F2 | 	cmp	local03, #30 wz
1d8c4     14 00 90 5D |  if_ne	jmp	#LR__2511
1d8c8     1C AA 06 F6 | 	mov	local03, #28
1d8cc     53 93 02 F6 | 	mov	arg01, local01
1d8d0     00 94 06 F6 | 	mov	arg02, #0
1d8d4     50 9A B0 FD | 	call	#__system___float_tointeger
1d8d8     3D A7 02 F6 | 	mov	local01, result1
1d8dc                 | LR__2511
1d8dc     08 CE 05 F1 | 	add	fp, #8
1d8e0     E7 AC 02 FB | 	rdlong	local04, fp
1d8e4     08 CE 85 F1 | 	sub	fp, #8
1d8e8     1D AC 0E F2 | 	cmp	local04, #29 wz
1d8ec     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d8f0     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d8f4     53 AD 12 AD |  if_e	qdiv	local04, local01
1d8f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1d8f8     19 AC 62 AD |  if_e	getqy	local04
1d8fc     E7 AC 62 AC |  if_e	wrlong	local04, fp
1d900     A0 00 90 AD |  if_e	jmp	#LR__2515
1d904                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1d904     08 CE 05 F1 | 	add	fp, #8
1d908     E7 AC 02 FB | 	rdlong	local04, fp
1d90c     08 CE 85 F1 | 	sub	fp, #8
1d910     1D AC 0E F2 | 	cmp	local04, #29 wz
1d914     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d918     20 00 90 5D |  if_ne	jmp	#LR__2512
1d91c     E7 AC 02 FB | 	rdlong	local04, fp
1d920     53 AD 12 FD | 	qdiv	local04, local01
1d924     19 AC 62 FD | 	getqy	local04
1d928     E7 AC 62 FC | 	wrlong	local04, fp
1d92c     08 CE 05 F1 | 	add	fp, #8
1d930     E7 38 68 FC | 	wrlong	#28, fp
1d934     08 CE 85 F1 | 	sub	fp, #8
1d938     68 00 90 FD | 	jmp	#LR__2515
1d93c                 | LR__2512
1d93c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1d93c     08 CE 05 F1 | 	add	fp, #8
1d940     E7 AC 02 FB | 	rdlong	local04, fp
1d944     08 CE 85 F1 | 	sub	fp, #8
1d948     1C AC 0E F2 | 	cmp	local04, #28 wz
1d94c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d950     14 00 90 5D |  if_ne	jmp	#LR__2513
1d954     E7 0E 03 FB | 	rdlong	muldiva_, fp
1d958     53 11 03 F6 | 	mov	muldivb_, local01
1d95c     FA 00 A0 FD | 	call	#divide_
1d960     E7 0E 63 FC | 	wrlong	muldiva_, fp
1d964     3C 00 90 FD | 	jmp	#LR__2515
1d968                 | LR__2513
1d968                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1d968     08 CE 05 F1 | 	add	fp, #8
1d96c     E7 AC 02 FB | 	rdlong	local04, fp
1d970     08 CE 85 F1 | 	sub	fp, #8
1d974     1C AC 0E F2 | 	cmp	local04, #28 wz
1d978     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d97c     14 00 90 5D |  if_ne	jmp	#LR__2514
1d980     E7 0E 03 FB | 	rdlong	muldiva_, fp
1d984     53 11 03 F6 | 	mov	muldivb_, local01
1d988     FA 00 A0 FD | 	call	#divide_
1d98c     E7 0E 63 FC | 	wrlong	muldiva_, fp
1d990     10 00 90 FD | 	jmp	#LR__2515
1d994                 | LR__2514
1d994     E7 16 68 FC | 	wrlong	#11, fp
1d998     08 CE 05 F1 | 	add	fp, #8
1d99c     E7 FE 69 FC | 	wrlong	#255, fp
1d9a0     08 CE 85 F1 | 	sub	fp, #8
1d9a4                 | LR__2515
1d9a4     E7 92 02 F6 | 	mov	arg01, fp
1d9a8     54 FD BE FD | 	call	#_push
1d9ac     E7 F0 03 F6 | 	mov	ptra, fp
1d9b0     F2 00 A0 FD | 	call	#popregs_
1d9b4                 | _do_mod_ret
1d9b4     2D 00 64 FD | 	ret
1d9b8                 | 
1d9b8                 | ' 
1d9b8                 | ' '--------------------------------- mul (*)
1d9b8                 | ' 
1d9b8                 | ' sub do_mul
1d9b8                 | _do_mul
1d9b8     07 CA 05 F6 | 	mov	COUNT_, #7
1d9bc     E8 00 A0 FD | 	call	#pushregs_
1d9c0     18 F0 07 F1 | 	add	ptra, #24
1d9c4     A8 FC BE FD | 	call	#_pop
1d9c8     3D A7 02 F6 | 	mov	local01, result1
1d9cc     3E AD 02 F6 | 	mov	local04, result2
1d9d0     3F 95 02 F6 | 	mov	arg02, result3
1d9d4     56 A9 02 F6 | 	mov	local02, local04
1d9d8     4A AB 02 F6 | 	mov	local03, arg02
1d9dc     90 FC BE FD | 	call	#_pop
1d9e0     3F AF 02 F6 | 	mov	local05, result3
1d9e4     E7 7A 62 FC | 	wrlong	result1, fp
1d9e8     04 CE 05 F1 | 	add	fp, #4
1d9ec     E7 7C 62 FC | 	wrlong	result2, fp
1d9f0     04 CE 05 F1 | 	add	fp, #4
1d9f4     E7 AE 62 FC | 	wrlong	local05, fp
1d9f8     08 CE 85 F1 | 	sub	fp, #8
1d9fc     1D AE 0E F2 | 	cmp	local05, #29 wz
1da00     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1da04     E7 AC 02 AB |  if_e	rdlong	local04, fp
1da08     53 AD 02 AD |  if_e	qmul	local04, local01
1da0c                 | ' 
1da0c                 | ' t2=pop()
1da0c                 | ' t1=pop()
1da0c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1da0c     18 B0 62 AD |  if_e	getqx	local06
1da10     E7 B0 62 AC |  if_e	wrlong	local06, fp
1da14     F4 01 90 AD |  if_e	jmp	#LR__2526
1da18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1da18     08 CE 05 F1 | 	add	fp, #8
1da1c     E7 B0 02 FB | 	rdlong	local06, fp
1da20     08 CE 85 F1 | 	sub	fp, #8
1da24     1D B0 0E F2 | 	cmp	local06, #29 wz
1da28     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1da2c     20 00 90 5D |  if_ne	jmp	#LR__2520
1da30     E7 AC 02 FB | 	rdlong	local04, fp
1da34     53 AD 02 FD | 	qmul	local04, local01
1da38     18 B0 62 FD | 	getqx	local06
1da3c     E7 B0 62 FC | 	wrlong	local06, fp
1da40     08 CE 05 F1 | 	add	fp, #8
1da44     E7 38 68 FC | 	wrlong	#28, fp
1da48     08 CE 85 F1 | 	sub	fp, #8
1da4c     BC 01 90 FD | 	jmp	#LR__2526
1da50                 | LR__2520
1da50                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1da50     08 CE 05 F1 | 	add	fp, #8
1da54     E7 B0 02 FB | 	rdlong	local06, fp
1da58     08 CE 85 F1 | 	sub	fp, #8
1da5c     1D B0 0E F2 | 	cmp	local06, #29 wz
1da60     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1da64     28 00 90 5D |  if_ne	jmp	#LR__2521
1da68     E7 92 02 FB | 	rdlong	arg01, fp
1da6c     EC 8F B0 FD | 	call	#__system___float_fromuns
1da70     3D 93 02 F6 | 	mov	arg01, result1
1da74     53 95 02 F6 | 	mov	arg02, local01
1da78     E4 93 B0 FD | 	call	#__system___float_mul
1da7c     E7 7A 62 FC | 	wrlong	result1, fp
1da80     08 CE 05 F1 | 	add	fp, #8
1da84     E7 3C 68 FC | 	wrlong	#30, fp
1da88     08 CE 85 F1 | 	sub	fp, #8
1da8c     7C 01 90 FD | 	jmp	#LR__2526
1da90                 | LR__2521
1da90     08 CE 05 F1 | 	add	fp, #8
1da94     E7 B0 02 FB | 	rdlong	local06, fp
1da98     08 CE 85 F1 | 	sub	fp, #8
1da9c     1C B0 0E F2 | 	cmp	local06, #28 wz
1daa0     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1daa4     E7 AC 02 AB |  if_e	rdlong	local04, fp
1daa8     53 AD 02 AD |  if_e	qmul	local04, local01
1daac                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1daac     18 B0 62 AD |  if_e	getqx	local06
1dab0     E7 B0 62 AC |  if_e	wrlong	local06, fp
1dab4     54 01 90 AD |  if_e	jmp	#LR__2526
1dab8     08 CE 05 F1 | 	add	fp, #8
1dabc     E7 B0 02 FB | 	rdlong	local06, fp
1dac0     08 CE 85 F1 | 	sub	fp, #8
1dac4     1C B0 0E F2 | 	cmp	local06, #28 wz
1dac8     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dacc     E7 AC 02 AB |  if_e	rdlong	local04, fp
1dad0     53 AD 02 AD |  if_e	qmul	local04, local01
1dad4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1dad4     18 B0 62 AD |  if_e	getqx	local06
1dad8     E7 B0 62 AC |  if_e	wrlong	local06, fp
1dadc     2C 01 90 AD |  if_e	jmp	#LR__2526
1dae0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1dae0     08 CE 05 F1 | 	add	fp, #8
1dae4     E7 B0 02 FB | 	rdlong	local06, fp
1dae8     08 CE 85 F1 | 	sub	fp, #8
1daec     1C B0 0E F2 | 	cmp	local06, #28 wz
1daf0     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1daf4     38 00 90 5D |  if_ne	jmp	#LR__2522
1daf8     E7 92 02 FB | 	rdlong	arg01, fp
1dafc     49 93 52 F6 | 	abs	arg01, arg01 wc
1db00     1F B2 C6 C9 |  if_b	decod	local07, #31
1db04     00 B2 06 36 |  if_ae	mov	local07, #0
1db08     50 8F B0 FD | 	call	#__system___float_fromuns
1db0c     59 7B 62 F5 | 	xor	result1, local07
1db10     3D 93 02 F6 | 	mov	arg01, result1
1db14     53 95 02 F6 | 	mov	arg02, local01
1db18     44 93 B0 FD | 	call	#__system___float_mul
1db1c     E7 7A 62 FC | 	wrlong	result1, fp
1db20     08 CE 05 F1 | 	add	fp, #8
1db24     E7 3C 68 FC | 	wrlong	#30, fp
1db28     08 CE 85 F1 | 	sub	fp, #8
1db2c     DC 00 90 FD | 	jmp	#LR__2526
1db30                 | LR__2522
1db30                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1db30     08 CE 05 F1 | 	add	fp, #8
1db34     E7 B0 02 FB | 	rdlong	local06, fp
1db38     08 CE 85 F1 | 	sub	fp, #8
1db3c     1E B0 0E F2 | 	cmp	local06, #30 wz
1db40     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1db44     20 00 90 5D |  if_ne	jmp	#LR__2523
1db48     E7 B0 02 FB | 	rdlong	local06, fp
1db4c     53 93 02 F6 | 	mov	arg01, local01
1db50     08 8F B0 FD | 	call	#__system___float_fromuns
1db54     3D 95 02 F6 | 	mov	arg02, result1
1db58     58 93 02 F6 | 	mov	arg01, local06
1db5c     00 93 B0 FD | 	call	#__system___float_mul
1db60     E7 7A 62 FC | 	wrlong	result1, fp
1db64     A4 00 90 FD | 	jmp	#LR__2526
1db68                 | LR__2523
1db68                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1db68     08 CE 05 F1 | 	add	fp, #8
1db6c     E7 B0 02 FB | 	rdlong	local06, fp
1db70     08 CE 85 F1 | 	sub	fp, #8
1db74     1E B0 0E F2 | 	cmp	local06, #30 wz
1db78     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1db7c     2C 00 90 5D |  if_ne	jmp	#LR__2524
1db80     E7 B0 02 FB | 	rdlong	local06, fp
1db84     53 93 52 F6 | 	abs	arg01, local01 wc
1db88     1F B2 C6 C9 |  if_b	decod	local07, #31
1db8c     00 B2 06 36 |  if_ae	mov	local07, #0
1db90     C8 8E B0 FD | 	call	#__system___float_fromuns
1db94     59 7B 62 F5 | 	xor	result1, local07
1db98     3D 95 02 F6 | 	mov	arg02, result1
1db9c     58 93 02 F6 | 	mov	arg01, local06
1dba0     BC 92 B0 FD | 	call	#__system___float_mul
1dba4     E7 7A 62 FC | 	wrlong	result1, fp
1dba8     60 00 90 FD | 	jmp	#LR__2526
1dbac                 | LR__2524
1dbac                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1dbac     08 CE 05 F1 | 	add	fp, #8
1dbb0     E7 B0 02 FB | 	rdlong	local06, fp
1dbb4     08 CE 85 F1 | 	sub	fp, #8
1dbb8     1E B0 0E F2 | 	cmp	local06, #30 wz
1dbbc     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1dbc0     14 00 90 5D |  if_ne	jmp	#LR__2525
1dbc4     E7 92 02 FB | 	rdlong	arg01, fp
1dbc8     53 95 02 F6 | 	mov	arg02, local01
1dbcc     90 92 B0 FD | 	call	#__system___float_mul
1dbd0     E7 7A 62 FC | 	wrlong	result1, fp
1dbd4     34 00 90 FD | 	jmp	#LR__2526
1dbd8                 | LR__2525
1dbd8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1dbd8     08 CE 05 F1 | 	add	fp, #8
1dbdc     E7 B0 02 FB | 	rdlong	local06, fp
1dbe0     08 CE 85 F1 | 	sub	fp, #8
1dbe4     1F B0 0E F2 | 	cmp	local06, #31 wz
1dbe8     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1dbec     E7 10 68 AC |  if_e	wrlong	#8, fp
1dbf0     08 CE 05 A1 |  if_e	add	fp, #8
1dbf4     E7 FE 69 AC |  if_e	wrlong	#255, fp
1dbf8     08 CE 85 A1 |  if_e	sub	fp, #8
1dbfc     E7 12 68 5C |  if_ne	wrlong	#9, fp
1dc00     08 CE 05 51 |  if_ne	add	fp, #8
1dc04     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1dc08     08 CE 85 51 |  if_ne	sub	fp, #8
1dc0c                 | LR__2526
1dc0c     E7 92 02 F6 | 	mov	arg01, fp
1dc10     EC FA BE FD | 	call	#_push
1dc14     E7 F0 03 F6 | 	mov	ptra, fp
1dc18     F2 00 A0 FD | 	call	#popregs_
1dc1c                 | _do_mul_ret
1dc1c     2D 00 64 FD | 	ret
1dc20                 | 
1dc20                 | ' 
1dc20                 | ' '--------------------------------- not equal (<>)
1dc20                 | ' 
1dc20                 | ' sub do_ne
1dc20                 | _do_ne
1dc20     07 CA 05 F6 | 	mov	COUNT_, #7
1dc24     E8 00 A0 FD | 	call	#pushregs_
1dc28     18 F0 07 F1 | 	add	ptra, #24
1dc2c     40 FA BE FD | 	call	#_pop
1dc30     3D A7 02 F6 | 	mov	local01, result1
1dc34     3E AD 02 F6 | 	mov	local04, result2
1dc38     3F AF 02 F6 | 	mov	local05, result3
1dc3c     56 A9 02 F6 | 	mov	local02, local04
1dc40     57 AB 02 F6 | 	mov	local03, local05
1dc44     28 FA BE FD | 	call	#_pop
1dc48     3F AF 02 F6 | 	mov	local05, result3
1dc4c     E7 7A 62 FC | 	wrlong	result1, fp
1dc50     04 CE 05 F1 | 	add	fp, #4
1dc54     E7 7C 62 FC | 	wrlong	result2, fp
1dc58     04 CE 05 F1 | 	add	fp, #4
1dc5c     E7 AE 62 FC | 	wrlong	local05, fp
1dc60                 | ' 
1dc60                 | ' t2=pop()
1dc60                 | ' t1=pop()
1dc60                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1dc60     08 CE 85 F1 | 	sub	fp, #8
1dc64     1F AE 0E F2 | 	cmp	local05, #31 wz
1dc68     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1dc6c     20 00 90 5D |  if_ne	jmp	#LR__2530
1dc70     00 B0 06 F6 | 	mov	local06, #0
1dc74     E7 92 02 FB | 	rdlong	arg01, fp
1dc78     53 95 02 F6 | 	mov	arg02, local01
1dc7c     38 6B B0 FD | 	call	#__system___string_cmp
1dc80     00 7A 0E F2 | 	cmp	result1, #0 wz
1dc84     00 B0 26 56 |  if_ne	not	local06, #0
1dc88     E7 B0 62 FC | 	wrlong	local06, fp
1dc8c     04 03 90 FD | 	jmp	#LR__2543
1dc90                 | LR__2530
1dc90                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1dc90     08 CE 05 F1 | 	add	fp, #8
1dc94     E7 B0 02 FB | 	rdlong	local06, fp
1dc98     08 CE 85 F1 | 	sub	fp, #8
1dc9c     1E B0 0E F2 | 	cmp	local06, #30 wz
1dca0     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1dca4     24 00 90 5D |  if_ne	jmp	#LR__2531
1dca8     00 B0 06 F6 | 	mov	local06, #0
1dcac     E7 92 02 FB | 	rdlong	arg01, fp
1dcb0     53 95 02 F6 | 	mov	arg02, local01
1dcb4     01 96 06 F6 | 	mov	arg03, #1
1dcb8     D8 95 B0 FD | 	call	#__system___float_cmp
1dcbc     00 7A 0E F2 | 	cmp	result1, #0 wz
1dcc0     00 B0 26 56 |  if_ne	not	local06, #0
1dcc4     E7 B0 62 FC | 	wrlong	local06, fp
1dcc8     C8 02 90 FD | 	jmp	#LR__2543
1dccc                 | LR__2531
1dccc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1dccc     08 CE 05 F1 | 	add	fp, #8
1dcd0     E7 B0 02 FB | 	rdlong	local06, fp
1dcd4     08 CE 85 F1 | 	sub	fp, #8
1dcd8     1E B0 0E F2 | 	cmp	local06, #30 wz
1dcdc     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dce0     3C 00 90 5D |  if_ne	jmp	#LR__2532
1dce4     00 B0 06 F6 | 	mov	local06, #0
1dce8     E7 AC 02 FB | 	rdlong	local04, fp
1dcec     53 93 52 F6 | 	abs	arg01, local01 wc
1dcf0     1F B2 C6 C9 |  if_b	decod	local07, #31
1dcf4     00 B2 06 36 |  if_ae	mov	local07, #0
1dcf8     60 8D B0 FD | 	call	#__system___float_fromuns
1dcfc     59 7B 62 F5 | 	xor	result1, local07
1dd00     3D 95 02 F6 | 	mov	arg02, result1
1dd04     56 93 02 F6 | 	mov	arg01, local04
1dd08     01 96 06 F6 | 	mov	arg03, #1
1dd0c     84 95 B0 FD | 	call	#__system___float_cmp
1dd10     00 7A 0E F2 | 	cmp	result1, #0 wz
1dd14     00 B0 26 56 |  if_ne	not	local06, #0
1dd18     E7 B0 62 FC | 	wrlong	local06, fp
1dd1c     74 02 90 FD | 	jmp	#LR__2543
1dd20                 | LR__2532
1dd20                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1dd20     08 CE 05 F1 | 	add	fp, #8
1dd24     E7 B0 02 FB | 	rdlong	local06, fp
1dd28     08 CE 85 F1 | 	sub	fp, #8
1dd2c     1E B0 0E F2 | 	cmp	local06, #30 wz
1dd30     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dd34     30 00 90 5D |  if_ne	jmp	#LR__2533
1dd38     00 B0 06 F6 | 	mov	local06, #0
1dd3c     E7 AC 02 FB | 	rdlong	local04, fp
1dd40     53 93 02 F6 | 	mov	arg01, local01
1dd44     14 8D B0 FD | 	call	#__system___float_fromuns
1dd48     3D 95 02 F6 | 	mov	arg02, result1
1dd4c     56 93 02 F6 | 	mov	arg01, local04
1dd50     01 96 06 F6 | 	mov	arg03, #1
1dd54     3C 95 B0 FD | 	call	#__system___float_cmp
1dd58     00 7A 0E F2 | 	cmp	result1, #0 wz
1dd5c     00 B0 26 56 |  if_ne	not	local06, #0
1dd60     E7 B0 62 FC | 	wrlong	local06, fp
1dd64     2C 02 90 FD | 	jmp	#LR__2543
1dd68                 | LR__2533
1dd68                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1dd68     08 CE 05 F1 | 	add	fp, #8
1dd6c     E7 B0 02 FB | 	rdlong	local06, fp
1dd70     08 CE 85 F1 | 	sub	fp, #8
1dd74     1C B0 0E F2 | 	cmp	local06, #28 wz
1dd78     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1dd7c     3C 00 90 5D |  if_ne	jmp	#LR__2534
1dd80     00 B0 06 F6 | 	mov	local06, #0
1dd84     E7 92 02 FB | 	rdlong	arg01, fp
1dd88     49 93 52 F6 | 	abs	arg01, arg01 wc
1dd8c     1F B2 C6 C9 |  if_b	decod	local07, #31
1dd90     00 B2 06 36 |  if_ae	mov	local07, #0
1dd94     C4 8C B0 FD | 	call	#__system___float_fromuns
1dd98     59 7B 62 F5 | 	xor	result1, local07
1dd9c     3D 93 02 F6 | 	mov	arg01, result1
1dda0     53 95 02 F6 | 	mov	arg02, local01
1dda4     01 96 06 F6 | 	mov	arg03, #1
1dda8     E8 94 B0 FD | 	call	#__system___float_cmp
1ddac     00 7A 0E F2 | 	cmp	result1, #0 wz
1ddb0     00 B0 26 56 |  if_ne	not	local06, #0
1ddb4     E7 B0 62 FC | 	wrlong	local06, fp
1ddb8     D8 01 90 FD | 	jmp	#LR__2543
1ddbc                 | LR__2534
1ddbc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1ddbc     08 CE 05 F1 | 	add	fp, #8
1ddc0     E7 B0 02 FB | 	rdlong	local06, fp
1ddc4     08 CE 85 F1 | 	sub	fp, #8
1ddc8     1C B0 0E F2 | 	cmp	local06, #28 wz
1ddcc     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1ddd0     18 00 90 5D |  if_ne	jmp	#LR__2535
1ddd4     00 B0 06 F6 | 	mov	local06, #0
1ddd8     E7 AC 02 FB | 	rdlong	local04, fp
1dddc     53 AD 0A F2 | 	cmp	local04, local01 wz
1dde0     01 B0 66 56 |  if_ne	neg	local06, #1
1dde4     E7 B0 62 FC | 	wrlong	local06, fp
1dde8     A8 01 90 FD | 	jmp	#LR__2543
1ddec                 | LR__2535
1ddec                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1ddec     08 CE 05 F1 | 	add	fp, #8
1ddf0     E7 B0 02 FB | 	rdlong	local06, fp
1ddf4     08 CE 85 F1 | 	sub	fp, #8
1ddf8     1C B0 0E F2 | 	cmp	local06, #28 wz
1ddfc     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1de00     18 00 90 5D |  if_ne	jmp	#LR__2536
1de04     00 B0 06 F6 | 	mov	local06, #0
1de08     E7 AC 02 FB | 	rdlong	local04, fp
1de0c     53 AD 0A F2 | 	cmp	local04, local01 wz
1de10     01 B0 66 56 |  if_ne	neg	local06, #1
1de14     E7 B0 62 FC | 	wrlong	local06, fp
1de18     78 01 90 FD | 	jmp	#LR__2543
1de1c                 | LR__2536
1de1c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1de1c     08 CE 05 F1 | 	add	fp, #8
1de20     E7 B0 02 FB | 	rdlong	local06, fp
1de24     08 CE 85 F1 | 	sub	fp, #8
1de28     1D B0 0E F2 | 	cmp	local06, #29 wz
1de2c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1de30     2C 00 90 5D |  if_ne	jmp	#LR__2537
1de34     00 B0 06 F6 | 	mov	local06, #0
1de38     E7 92 02 FB | 	rdlong	arg01, fp
1de3c     1C 8C B0 FD | 	call	#__system___float_fromuns
1de40     3D 93 02 F6 | 	mov	arg01, result1
1de44     53 95 02 F6 | 	mov	arg02, local01
1de48     01 96 06 F6 | 	mov	arg03, #1
1de4c     44 94 B0 FD | 	call	#__system___float_cmp
1de50     00 7A 0E F2 | 	cmp	result1, #0 wz
1de54     00 B0 26 56 |  if_ne	not	local06, #0
1de58     E7 B0 62 FC | 	wrlong	local06, fp
1de5c     34 01 90 FD | 	jmp	#LR__2543
1de60                 | LR__2537
1de60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1de60     08 CE 05 F1 | 	add	fp, #8
1de64     E7 B0 02 FB | 	rdlong	local06, fp
1de68     08 CE 85 F1 | 	sub	fp, #8
1de6c     1D B0 0E F2 | 	cmp	local06, #29 wz
1de70     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1de74     18 00 90 5D |  if_ne	jmp	#LR__2538
1de78     00 B0 06 F6 | 	mov	local06, #0
1de7c     E7 AC 02 FB | 	rdlong	local04, fp
1de80     53 AD 0A F2 | 	cmp	local04, local01 wz
1de84     01 B0 66 56 |  if_ne	neg	local06, #1
1de88     E7 B0 62 FC | 	wrlong	local06, fp
1de8c     04 01 90 FD | 	jmp	#LR__2543
1de90                 | LR__2538
1de90                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1de90     08 CE 05 F1 | 	add	fp, #8
1de94     E7 B0 02 FB | 	rdlong	local06, fp
1de98     08 CE 85 F1 | 	sub	fp, #8
1de9c     1D B0 0E F2 | 	cmp	local06, #29 wz
1dea0     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dea4     18 00 90 5D |  if_ne	jmp	#LR__2539
1dea8     00 B0 06 F6 | 	mov	local06, #0
1deac     E7 AC 02 FB | 	rdlong	local04, fp
1deb0     53 AD 0A F2 | 	cmp	local04, local01 wz
1deb4     01 B0 66 56 |  if_ne	neg	local06, #1
1deb8     E7 B0 62 FC | 	wrlong	local06, fp
1debc     D4 00 90 FD | 	jmp	#LR__2543
1dec0                 | LR__2539
1dec0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1dec0     08 CE 05 F1 | 	add	fp, #8
1dec4     E7 B0 02 FB | 	rdlong	local06, fp
1dec8     08 CE 85 F1 | 	sub	fp, #8
1decc     2B B0 0E F2 | 	cmp	local06, #43 wz
1ded0     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1ded4     28 00 90 5D |  if_ne	jmp	#LR__2540
1ded8     00 B0 06 F6 | 	mov	local06, #0
1dedc     E7 92 02 FB | 	rdlong	arg01, fp
1dee0     FC F8 BE FD | 	call	#_convertstring
1dee4     3D 93 02 F6 | 	mov	arg01, result1
1dee8     53 95 02 F6 | 	mov	arg02, local01
1deec     C8 68 B0 FD | 	call	#__system___string_cmp
1def0     00 7A 0E F2 | 	cmp	result1, #0 wz
1def4     00 B0 26 56 |  if_ne	not	local06, #0
1def8     E7 B0 62 FC | 	wrlong	local06, fp
1defc     94 00 90 FD | 	jmp	#LR__2543
1df00                 | LR__2540
1df00                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1df00     08 CE 05 F1 | 	add	fp, #8
1df04     E7 B0 02 FB | 	rdlong	local06, fp
1df08     08 CE 85 F1 | 	sub	fp, #8
1df0c     1F B0 0E F2 | 	cmp	local06, #31 wz
1df10     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1df14     2C 00 90 5D |  if_ne	jmp	#LR__2541
1df18     00 B0 06 F6 | 	mov	local06, #0
1df1c     E7 AC 02 FB | 	rdlong	local04, fp
1df20     53 93 02 F6 | 	mov	arg01, local01
1df24     B8 F8 BE FD | 	call	#_convertstring
1df28     3D 95 02 F6 | 	mov	arg02, result1
1df2c     56 93 02 F6 | 	mov	arg01, local04
1df30     84 68 B0 FD | 	call	#__system___string_cmp
1df34     00 7A 0E F2 | 	cmp	result1, #0 wz
1df38     00 B0 26 56 |  if_ne	not	local06, #0
1df3c     E7 B0 62 FC | 	wrlong	local06, fp
1df40     50 00 90 FD | 	jmp	#LR__2543
1df44                 | LR__2541
1df44                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1df44     08 CE 05 F1 | 	add	fp, #8
1df48     E7 B0 02 FB | 	rdlong	local06, fp
1df4c     08 CE 85 F1 | 	sub	fp, #8
1df50     2B B0 0E F2 | 	cmp	local06, #43 wz
1df54     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1df58     34 00 90 5D |  if_ne	jmp	#LR__2542
1df5c     00 B0 06 F6 | 	mov	local06, #0
1df60     E7 92 02 FB | 	rdlong	arg01, fp
1df64     78 F8 BE FD | 	call	#_convertstring
1df68     3D AD 02 F6 | 	mov	local04, result1
1df6c     53 93 02 F6 | 	mov	arg01, local01
1df70     6C F8 BE FD | 	call	#_convertstring
1df74     3D 95 02 F6 | 	mov	arg02, result1
1df78     56 93 02 F6 | 	mov	arg01, local04
1df7c     38 68 B0 FD | 	call	#__system___string_cmp
1df80     00 7A 0E F2 | 	cmp	result1, #0 wz
1df84     00 B0 26 56 |  if_ne	not	local06, #0
1df88     E7 B0 62 FC | 	wrlong	local06, fp
1df8c     04 00 90 FD | 	jmp	#LR__2543
1df90                 | LR__2542
1df90     E7 00 68 FC | 	wrlong	#0, fp
1df94                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1df94                 | LR__2543
1df94     08 CE 05 F1 | 	add	fp, #8
1df98     E7 38 68 FC | 	wrlong	#28, fp
1df9c     08 CE 85 F1 | 	sub	fp, #8
1dfa0     E7 92 02 F6 | 	mov	arg01, fp
1dfa4     58 F7 BE FD | 	call	#_push
1dfa8     E7 F0 03 F6 | 	mov	ptra, fp
1dfac     F2 00 A0 FD | 	call	#popregs_
1dfb0                 | _do_ne_ret
1dfb0     2D 00 64 FD | 	ret
1dfb4                 | 
1dfb4                 | ' 
1dfb4                 | ' '--------------------------------- OR
1dfb4                 | ' 
1dfb4                 | ' sub do_or 
1dfb4                 | _do_or
1dfb4     05 CA 05 F6 | 	mov	COUNT_, #5
1dfb8     E8 00 A0 FD | 	call	#pushregs_
1dfbc     18 F0 07 F1 | 	add	ptra, #24
1dfc0     AC F6 BE FD | 	call	#_pop
1dfc4     3D A7 02 F6 | 	mov	local01, result1
1dfc8     3E 93 02 F6 | 	mov	arg01, result2
1dfcc     3F AD 02 F6 | 	mov	local04, result3
1dfd0     49 A9 02 F6 | 	mov	local02, arg01
1dfd4     56 AB 02 F6 | 	mov	local03, local04
1dfd8     94 F6 BE FD | 	call	#_pop
1dfdc     3F AF 02 F6 | 	mov	local05, result3
1dfe0     E7 7A 62 FC | 	wrlong	result1, fp
1dfe4     04 CE 05 F1 | 	add	fp, #4
1dfe8     E7 7C 62 FC | 	wrlong	result2, fp
1dfec     04 CE 05 F1 | 	add	fp, #4
1dff0     E7 AE 62 FC | 	wrlong	local05, fp
1dff4                 | ' 
1dff4                 | ' t2=pop()
1dff4                 | ' t1=pop()
1dff4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1dff4     08 CE 85 F1 | 	sub	fp, #8
1dff8     1C AE 0E F2 | 	cmp	local05, #28 wz
1dffc     E7 AE 02 AB |  if_e	rdlong	local05, fp
1e000     E7 AE 62 AC |  if_e	wrlong	local05, fp
1e004     08 CE 05 A1 |  if_e	add	fp, #8
1e008     E7 3A 68 AC |  if_e	wrlong	#29, fp
1e00c     08 CE 85 A1 |  if_e	sub	fp, #8
1e010                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1e010     1C AA 0E F2 | 	cmp	local03, #28 wz
1e014     1D AA 06 A6 |  if_e	mov	local03, #29
1e018                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1e018     08 CE 05 F1 | 	add	fp, #8
1e01c     E7 AE 02 FB | 	rdlong	local05, fp
1e020     08 CE 85 F1 | 	sub	fp, #8
1e024     1F AE 0E F2 | 	cmp	local05, #31 wz
1e028     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e02c     08 CE 05 51 |  if_ne	add	fp, #8
1e030     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1e034     08 CE 85 51 |  if_ne	sub	fp, #8
1e038     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1e03c     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1e040     E7 0C 68 AC |  if_e	wrlong	#6, fp
1e044     08 CE 05 A1 |  if_e	add	fp, #8
1e048     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e04c     08 CE 85 A1 |  if_e	sub	fp, #8
1e050     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1e054     53 AF 42 55 |  if_ne	or	local05, local01
1e058     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1e05c     E7 92 02 F6 | 	mov	arg01, fp
1e060     9C F6 BE FD | 	call	#_push
1e064     E7 F0 03 F6 | 	mov	ptra, fp
1e068     F2 00 A0 FD | 	call	#popregs_
1e06c                 | _do_or_ret
1e06c     2D 00 64 FD | 	ret
1e070                 | 
1e070                 | ' 
1e070                 | ' '--------------------------------- plus (+)
1e070                 | ' 
1e070                 | ' sub do_plus 
1e070                 | _do_plus
1e070     07 CA 05 F6 | 	mov	COUNT_, #7
1e074     E8 00 A0 FD | 	call	#pushregs_
1e078     18 F0 07 F1 | 	add	ptra, #24
1e07c     F0 F5 BE FD | 	call	#_pop
1e080     3D A7 02 F6 | 	mov	local01, result1
1e084     3E AD 02 F6 | 	mov	local04, result2
1e088     3F AF 02 F6 | 	mov	local05, result3
1e08c     56 A9 02 F6 | 	mov	local02, local04
1e090     57 AB 02 F6 | 	mov	local03, local05
1e094     D8 F5 BE FD | 	call	#_pop
1e098     3F AF 02 F6 | 	mov	local05, result3
1e09c     E7 7A 62 FC | 	wrlong	result1, fp
1e0a0     04 CE 05 F1 | 	add	fp, #4
1e0a4     E7 7C 62 FC | 	wrlong	result2, fp
1e0a8     04 CE 05 F1 | 	add	fp, #4
1e0ac     E7 AE 62 FC | 	wrlong	local05, fp
1e0b0                 | ' 
1e0b0                 | ' t2=pop()
1e0b0                 | ' t1=pop()
1e0b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1e0b0     57 B1 02 F6 | 	mov	local06, local05
1e0b4     08 CE 85 F1 | 	sub	fp, #8
1e0b8     1D B0 0E F2 | 	cmp	local06, #29 wz
1e0bc     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e0c0     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e0c4     53 B1 02 A1 |  if_e	add	local06, local01
1e0c8     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e0cc     0C 03 90 AD |  if_e	jmp	#LR__2562
1e0d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1e0d0     08 CE 05 F1 | 	add	fp, #8
1e0d4     E7 B0 02 FB | 	rdlong	local06, fp
1e0d8     08 CE 85 F1 | 	sub	fp, #8
1e0dc     1D B0 0E F2 | 	cmp	local06, #29 wz
1e0e0     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e0e4     1C 00 90 5D |  if_ne	jmp	#LR__2550
1e0e8     E7 B0 02 FB | 	rdlong	local06, fp
1e0ec     53 B1 02 F1 | 	add	local06, local01
1e0f0     E7 B0 62 FC | 	wrlong	local06, fp
1e0f4     08 CE 05 F1 | 	add	fp, #8
1e0f8     E7 38 68 FC | 	wrlong	#28, fp
1e0fc     08 CE 85 F1 | 	sub	fp, #8
1e100     D8 02 90 FD | 	jmp	#LR__2562
1e104                 | LR__2550
1e104                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1e104     08 CE 05 F1 | 	add	fp, #8
1e108     E7 B0 02 FB | 	rdlong	local06, fp
1e10c     08 CE 85 F1 | 	sub	fp, #8
1e110     1D B0 0E F2 | 	cmp	local06, #29 wz
1e114     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e118     28 00 90 5D |  if_ne	jmp	#LR__2551
1e11c     E7 92 02 FB | 	rdlong	arg01, fp
1e120     38 89 B0 FD | 	call	#__system___float_fromuns
1e124     3D 93 02 F6 | 	mov	arg01, result1
1e128     53 95 02 F6 | 	mov	arg02, local01
1e12c     60 89 B0 FD | 	call	#__system___float_add
1e130     E7 7A 62 FC | 	wrlong	result1, fp
1e134     08 CE 05 F1 | 	add	fp, #8
1e138     E7 3C 68 FC | 	wrlong	#30, fp
1e13c     08 CE 85 F1 | 	sub	fp, #8
1e140     98 02 90 FD | 	jmp	#LR__2562
1e144                 | LR__2551
1e144                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1e144     08 CE 05 F1 | 	add	fp, #8
1e148     E7 B0 02 FB | 	rdlong	local06, fp
1e14c     08 CE 85 F1 | 	sub	fp, #8
1e150     1C B0 0E F2 | 	cmp	local06, #28 wz
1e154     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e158     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e15c     53 B1 02 A1 |  if_e	add	local06, local01
1e160     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e164     74 02 90 AD |  if_e	jmp	#LR__2562
1e168                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1e168     08 CE 05 F1 | 	add	fp, #8
1e16c     E7 B0 02 FB | 	rdlong	local06, fp
1e170     08 CE 85 F1 | 	sub	fp, #8
1e174     1C B0 0E F2 | 	cmp	local06, #28 wz
1e178     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e17c     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e180     53 B1 02 A1 |  if_e	add	local06, local01
1e184     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e188     50 02 90 AD |  if_e	jmp	#LR__2562
1e18c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1e18c     08 CE 05 F1 | 	add	fp, #8
1e190     E7 B0 02 FB | 	rdlong	local06, fp
1e194     08 CE 85 F1 | 	sub	fp, #8
1e198     1C B0 0E F2 | 	cmp	local06, #28 wz
1e19c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e1a0     38 00 90 5D |  if_ne	jmp	#LR__2552
1e1a4     E7 92 02 FB | 	rdlong	arg01, fp
1e1a8     49 93 52 F6 | 	abs	arg01, arg01 wc
1e1ac     1F B2 C6 C9 |  if_b	decod	local07, #31
1e1b0     00 B2 06 36 |  if_ae	mov	local07, #0
1e1b4     A4 88 B0 FD | 	call	#__system___float_fromuns
1e1b8     59 7B 62 F5 | 	xor	result1, local07
1e1bc     3D 93 02 F6 | 	mov	arg01, result1
1e1c0     53 95 02 F6 | 	mov	arg02, local01
1e1c4     C8 88 B0 FD | 	call	#__system___float_add
1e1c8     E7 7A 62 FC | 	wrlong	result1, fp
1e1cc     08 CE 05 F1 | 	add	fp, #8
1e1d0     E7 3C 68 FC | 	wrlong	#30, fp
1e1d4     08 CE 85 F1 | 	sub	fp, #8
1e1d8     00 02 90 FD | 	jmp	#LR__2562
1e1dc                 | LR__2552
1e1dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1e1dc     08 CE 05 F1 | 	add	fp, #8
1e1e0     E7 B0 02 FB | 	rdlong	local06, fp
1e1e4     08 CE 85 F1 | 	sub	fp, #8
1e1e8     1E B0 0E F2 | 	cmp	local06, #30 wz
1e1ec     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e1f0     20 00 90 5D |  if_ne	jmp	#LR__2553
1e1f4     E7 B0 02 FB | 	rdlong	local06, fp
1e1f8     53 93 02 F6 | 	mov	arg01, local01
1e1fc     5C 88 B0 FD | 	call	#__system___float_fromuns
1e200     3D 95 02 F6 | 	mov	arg02, result1
1e204     58 93 02 F6 | 	mov	arg01, local06
1e208     84 88 B0 FD | 	call	#__system___float_add
1e20c     E7 7A 62 FC | 	wrlong	result1, fp
1e210     C8 01 90 FD | 	jmp	#LR__2562
1e214                 | LR__2553
1e214                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1e214     08 CE 05 F1 | 	add	fp, #8
1e218     E7 B0 02 FB | 	rdlong	local06, fp
1e21c     08 CE 85 F1 | 	sub	fp, #8
1e220     1E B0 0E F2 | 	cmp	local06, #30 wz
1e224     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e228     2C 00 90 5D |  if_ne	jmp	#LR__2554
1e22c     E7 B0 02 FB | 	rdlong	local06, fp
1e230     53 93 52 F6 | 	abs	arg01, local01 wc
1e234     1F B2 C6 C9 |  if_b	decod	local07, #31
1e238     00 B2 06 36 |  if_ae	mov	local07, #0
1e23c     1C 88 B0 FD | 	call	#__system___float_fromuns
1e240     59 7B 62 F5 | 	xor	result1, local07
1e244     3D 95 02 F6 | 	mov	arg02, result1
1e248     58 93 02 F6 | 	mov	arg01, local06
1e24c     40 88 B0 FD | 	call	#__system___float_add
1e250     E7 7A 62 FC | 	wrlong	result1, fp
1e254     84 01 90 FD | 	jmp	#LR__2562
1e258                 | LR__2554
1e258                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1e258     08 CE 05 F1 | 	add	fp, #8
1e25c     E7 B0 02 FB | 	rdlong	local06, fp
1e260     08 CE 85 F1 | 	sub	fp, #8
1e264     1E B0 0E F2 | 	cmp	local06, #30 wz
1e268     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e26c     14 00 90 5D |  if_ne	jmp	#LR__2555
1e270     E7 92 02 FB | 	rdlong	arg01, fp
1e274     53 95 02 F6 | 	mov	arg02, local01
1e278     14 88 B0 FD | 	call	#__system___float_add
1e27c     E7 7A 62 FC | 	wrlong	result1, fp
1e280     58 01 90 FD | 	jmp	#LR__2562
1e284                 | LR__2555
1e284                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1e284     08 CE 05 F1 | 	add	fp, #8
1e288     E7 B0 02 FB | 	rdlong	local06, fp
1e28c     08 CE 85 F1 | 	sub	fp, #8
1e290     1F B0 0E F2 | 	cmp	local06, #31 wz
1e294     18 00 90 5D |  if_ne	jmp	#LR__2556
1e298     1F AA 0E F2 | 	cmp	local03, #31 wz
1e29c     E7 04 68 5C |  if_ne	wrlong	#2, fp
1e2a0     08 CE 05 51 |  if_ne	add	fp, #8
1e2a4     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1e2a8     08 CE 85 51 |  if_ne	sub	fp, #8
1e2ac     2C 01 90 5D |  if_ne	jmp	#LR__2562
1e2b0                 | LR__2556
1e2b0                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1e2b0     1F AA 0E F2 | 	cmp	local03, #31 wz
1e2b4     24 00 90 5D |  if_ne	jmp	#LR__2557
1e2b8     08 CE 05 F1 | 	add	fp, #8
1e2bc     E7 B0 02 FB | 	rdlong	local06, fp
1e2c0     08 CE 85 F1 | 	sub	fp, #8
1e2c4     1F B0 0E F2 | 	cmp	local06, #31 wz
1e2c8     E7 04 68 5C |  if_ne	wrlong	#2, fp
1e2cc     08 CE 05 51 |  if_ne	add	fp, #8
1e2d0     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1e2d4     08 CE 85 51 |  if_ne	sub	fp, #8
1e2d8     00 01 90 5D |  if_ne	jmp	#LR__2562
1e2dc                 | LR__2557
1e2dc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1e2dc     08 CE 05 F1 | 	add	fp, #8
1e2e0     E7 B0 02 FB | 	rdlong	local06, fp
1e2e4     08 CE 85 F1 | 	sub	fp, #8
1e2e8     1F B0 0E F2 | 	cmp	local06, #31 wz
1e2ec     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e2f0     14 00 90 5D |  if_ne	jmp	#LR__2558
1e2f4     E7 92 02 FB | 	rdlong	arg01, fp
1e2f8     53 95 02 F6 | 	mov	arg02, local01
1e2fc     EC 64 B0 FD | 	call	#__system___string_concat
1e300     E7 7A 62 FC | 	wrlong	result1, fp
1e304     D4 00 90 FD | 	jmp	#LR__2562
1e308                 | LR__2558
1e308                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1e308     08 CE 05 F1 | 	add	fp, #8
1e30c     E7 B0 02 FB | 	rdlong	local06, fp
1e310     08 CE 85 F1 | 	sub	fp, #8
1e314     2B B0 0E F2 | 	cmp	local06, #43 wz
1e318     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e31c     28 00 90 5D |  if_ne	jmp	#LR__2559
1e320     E7 92 02 FB | 	rdlong	arg01, fp
1e324     B8 F4 BE FD | 	call	#_convertstring
1e328     3D 93 02 F6 | 	mov	arg01, result1
1e32c     53 95 02 F6 | 	mov	arg02, local01
1e330     B8 64 B0 FD | 	call	#__system___string_concat
1e334     E7 7A 62 FC | 	wrlong	result1, fp
1e338     08 CE 05 F1 | 	add	fp, #8
1e33c     E7 3E 68 FC | 	wrlong	#31, fp
1e340     08 CE 85 F1 | 	sub	fp, #8
1e344     94 00 90 FD | 	jmp	#LR__2562
1e348                 | LR__2559
1e348                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1e348     08 CE 05 F1 | 	add	fp, #8
1e34c     E7 B0 02 FB | 	rdlong	local06, fp
1e350     08 CE 85 F1 | 	sub	fp, #8
1e354     1F B0 0E F2 | 	cmp	local06, #31 wz
1e358     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e35c     20 00 90 5D |  if_ne	jmp	#LR__2560
1e360     E7 B0 02 FB | 	rdlong	local06, fp
1e364     53 93 02 F6 | 	mov	arg01, local01
1e368     74 F4 BE FD | 	call	#_convertstring
1e36c     3D 95 02 F6 | 	mov	arg02, result1
1e370     58 93 02 F6 | 	mov	arg01, local06
1e374     74 64 B0 FD | 	call	#__system___string_concat
1e378     E7 7A 62 FC | 	wrlong	result1, fp
1e37c     5C 00 90 FD | 	jmp	#LR__2562
1e380                 | LR__2560
1e380                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1e380     08 CE 05 F1 | 	add	fp, #8
1e384     E7 B0 02 FB | 	rdlong	local06, fp
1e388     08 CE 85 F1 | 	sub	fp, #8
1e38c     2B B0 0E F2 | 	cmp	local06, #43 wz
1e390     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e394     34 00 90 5D |  if_ne	jmp	#LR__2561
1e398     E7 92 02 FB | 	rdlong	arg01, fp
1e39c     40 F4 BE FD | 	call	#_convertstring
1e3a0     3D B1 02 F6 | 	mov	local06, result1
1e3a4     53 93 02 F6 | 	mov	arg01, local01
1e3a8     34 F4 BE FD | 	call	#_convertstring
1e3ac     3D 95 02 F6 | 	mov	arg02, result1
1e3b0     58 93 02 F6 | 	mov	arg01, local06
1e3b4     34 64 B0 FD | 	call	#__system___string_concat
1e3b8     E7 7A 62 FC | 	wrlong	result1, fp
1e3bc     08 CE 05 F1 | 	add	fp, #8
1e3c0     E7 3E 68 FC | 	wrlong	#31, fp
1e3c4     08 CE 85 F1 | 	sub	fp, #8
1e3c8     10 00 90 FD | 	jmp	#LR__2562
1e3cc                 | LR__2561
1e3cc     E7 08 68 FC | 	wrlong	#4, fp
1e3d0     08 CE 05 F1 | 	add	fp, #8
1e3d4     E7 FE 69 FC | 	wrlong	#255, fp
1e3d8     08 CE 85 F1 | 	sub	fp, #8
1e3dc                 | LR__2562
1e3dc     E7 92 02 F6 | 	mov	arg01, fp
1e3e0     1C F3 BE FD | 	call	#_push
1e3e4     E7 F0 03 F6 | 	mov	ptra, fp
1e3e8     F2 00 A0 FD | 	call	#popregs_
1e3ec                 | _do_plus_ret
1e3ec     2D 00 64 FD | 	ret
1e3f0                 | 
1e3f0                 | ' 
1e3f0                 | ' '--------------------------------- power (^)
1e3f0                 | ' 
1e3f0                 | ' sub do_power 
1e3f0                 | _do_power
1e3f0     04 CA 05 F6 | 	mov	COUNT_, #4
1e3f4     E8 00 A0 FD | 	call	#pushregs_
1e3f8     18 F0 07 F1 | 	add	ptra, #24
1e3fc     70 F2 BE FD | 	call	#_pop
1e400     3D A7 02 F6 | 	mov	local01, result1
1e404     3E 95 02 F6 | 	mov	arg02, result2
1e408     3F 93 02 F6 | 	mov	arg01, result3
1e40c     4A A9 02 F6 | 	mov	local02, arg02
1e410     49 AB 02 F6 | 	mov	local03, arg01
1e414     58 F2 BE FD | 	call	#_pop
1e418     E7 7A 62 FC | 	wrlong	result1, fp
1e41c     04 CE 05 F1 | 	add	fp, #4
1e420     E7 7C 62 FC | 	wrlong	result2, fp
1e424     04 CE 05 F1 | 	add	fp, #4
1e428     E7 7E 62 FC | 	wrlong	result3, fp
1e42c                 | ' 
1e42c                 | ' t2=pop()
1e42c                 | ' t1=pop()
1e42c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1e42c     08 CE 85 F1 | 	sub	fp, #8
1e430     1F 7E 0E F2 | 	cmp	result3, #31 wz
1e434     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e438     E7 18 68 AC |  if_e	wrlong	#12, fp
1e43c     08 CE 05 A1 |  if_e	add	fp, #8
1e440     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e444     08 CE 85 A1 |  if_e	sub	fp, #8
1e448     E0 00 90 AD |  if_e	jmp	#LR__2575
1e44c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1e44c     08 CE 05 F1 | 	add	fp, #8
1e450     E7 94 02 FB | 	rdlong	arg02, fp
1e454     08 CE 85 F1 | 	sub	fp, #8
1e458     1C 94 0E F2 | 	cmp	arg02, #28 wz
1e45c     28 00 90 5D |  if_ne	jmp	#LR__2570
1e460     08 CE 05 F1 | 	add	fp, #8
1e464     E7 3C 68 FC | 	wrlong	#30, fp
1e468     08 CE 85 F1 | 	sub	fp, #8
1e46c     E7 92 02 FB | 	rdlong	arg01, fp
1e470     49 93 52 F6 | 	abs	arg01, arg01 wc
1e474     1F AC C6 C9 |  if_b	decod	local04, #31
1e478     00 AC 06 36 |  if_ae	mov	local04, #0
1e47c     DC 85 B0 FD | 	call	#__system___float_fromuns
1e480     56 7B 62 F5 | 	xor	result1, local04
1e484     E7 7A 62 FC | 	wrlong	result1, fp
1e488                 | LR__2570
1e488                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1e488     08 CE 05 F1 | 	add	fp, #8
1e48c     E7 94 02 FB | 	rdlong	arg02, fp
1e490     08 CE 85 F1 | 	sub	fp, #8
1e494     1D 94 0E F2 | 	cmp	arg02, #29 wz
1e498     18 00 90 5D |  if_ne	jmp	#LR__2571
1e49c     08 CE 05 F1 | 	add	fp, #8
1e4a0     E7 3C 68 FC | 	wrlong	#30, fp
1e4a4     08 CE 85 F1 | 	sub	fp, #8
1e4a8     E7 92 02 FB | 	rdlong	arg01, fp
1e4ac     AC 85 B0 FD | 	call	#__system___float_fromuns
1e4b0     E7 7A 62 FC | 	wrlong	result1, fp
1e4b4                 | LR__2571
1e4b4                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1e4b4     1C AA 0E F2 | 	cmp	local03, #28 wz
1e4b8     1C 00 90 5D |  if_ne	jmp	#LR__2572
1e4bc     1E AA 06 F6 | 	mov	local03, #30
1e4c0     53 93 52 F6 | 	abs	arg01, local01 wc
1e4c4     1F AC C6 C9 |  if_b	decod	local04, #31
1e4c8     00 AC 06 36 |  if_ae	mov	local04, #0
1e4cc     8C 85 B0 FD | 	call	#__system___float_fromuns
1e4d0     56 7B 62 F5 | 	xor	result1, local04
1e4d4     3D A7 02 F6 | 	mov	local01, result1
1e4d8                 | LR__2572
1e4d8                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1e4d8     1D AA 0E F2 | 	cmp	local03, #29 wz
1e4dc     10 00 90 5D |  if_ne	jmp	#LR__2573
1e4e0     1E AA 06 F6 | 	mov	local03, #30
1e4e4     53 93 02 F6 | 	mov	arg01, local01
1e4e8     70 85 B0 FD | 	call	#__system___float_fromuns
1e4ec     3D A7 02 F6 | 	mov	local01, result1
1e4f0                 | LR__2573
1e4f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1e4f0     08 CE 05 F1 | 	add	fp, #8
1e4f4     E7 94 02 FB | 	rdlong	arg02, fp
1e4f8     08 CE 85 F1 | 	sub	fp, #8
1e4fc     1E 94 0E F2 | 	cmp	arg02, #30 wz
1e500     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e504     14 00 90 5D |  if_ne	jmp	#LR__2574
1e508     E7 92 02 FB | 	rdlong	arg01, fp
1e50c     53 95 02 F6 | 	mov	arg02, local01
1e510     64 98 B0 FD | 	call	#__system____builtin_powf
1e514     E7 7A 62 FC | 	wrlong	result1, fp
1e518     10 00 90 FD | 	jmp	#LR__2575
1e51c                 | LR__2574
1e51c     E7 1A 68 FC | 	wrlong	#13, fp
1e520     08 CE 05 F1 | 	add	fp, #8
1e524     E7 FE 69 FC | 	wrlong	#255, fp
1e528     08 CE 85 F1 | 	sub	fp, #8
1e52c                 | LR__2575
1e52c     E7 92 02 F6 | 	mov	arg01, fp
1e530     CC F1 BE FD | 	call	#_push
1e534     E7 F0 03 F6 | 	mov	ptra, fp
1e538     F2 00 A0 FD | 	call	#popregs_
1e53c                 | _do_power_ret
1e53c     2D 00 64 FD | 	ret
1e540                 | 
1e540                 | ' 
1e540                 | ' '--------------------------------- SHL
1e540                 | ' 
1e540                 | ' sub do_shl 
1e540                 | _do_shl
1e540     05 CA 05 F6 | 	mov	COUNT_, #5
1e544     E8 00 A0 FD | 	call	#pushregs_
1e548     18 F0 07 F1 | 	add	ptra, #24
1e54c     20 F1 BE FD | 	call	#_pop
1e550     3D A7 02 F6 | 	mov	local01, result1
1e554     3E 93 02 F6 | 	mov	arg01, result2
1e558     3F AD 02 F6 | 	mov	local04, result3
1e55c     49 A9 02 F6 | 	mov	local02, arg01
1e560     56 AB 02 F6 | 	mov	local03, local04
1e564     08 F1 BE FD | 	call	#_pop
1e568     3F AF 02 F6 | 	mov	local05, result3
1e56c     E7 7A 62 FC | 	wrlong	result1, fp
1e570     04 CE 05 F1 | 	add	fp, #4
1e574     E7 7C 62 FC | 	wrlong	result2, fp
1e578     04 CE 05 F1 | 	add	fp, #4
1e57c     E7 AE 62 FC | 	wrlong	local05, fp
1e580                 | ' 
1e580                 | ' t2=pop()
1e580                 | ' t1=pop()
1e580                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1e580     08 CE 85 F1 | 	sub	fp, #8
1e584     1C AE 0E F2 | 	cmp	local05, #28 wz
1e588     E7 AE 02 AB |  if_e	rdlong	local05, fp
1e58c     E7 AE 62 AC |  if_e	wrlong	local05, fp
1e590     08 CE 05 A1 |  if_e	add	fp, #8
1e594     E7 3A 68 AC |  if_e	wrlong	#29, fp
1e598     08 CE 85 A1 |  if_e	sub	fp, #8
1e59c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1e59c     1C AA 0E F2 | 	cmp	local03, #28 wz
1e5a0     1D AA 06 A6 |  if_e	mov	local03, #29
1e5a4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1e5a4     08 CE 05 F1 | 	add	fp, #8
1e5a8     E7 AE 02 FB | 	rdlong	local05, fp
1e5ac     08 CE 85 F1 | 	sub	fp, #8
1e5b0     1F AE 0E F2 | 	cmp	local05, #31 wz
1e5b4     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e5b8     08 CE 05 51 |  if_ne	add	fp, #8
1e5bc     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1e5c0     08 CE 85 51 |  if_ne	sub	fp, #8
1e5c4     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1e5c8     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1e5cc     E7 0C 68 AC |  if_e	wrlong	#6, fp
1e5d0     08 CE 05 A1 |  if_e	add	fp, #8
1e5d4     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e5d8     08 CE 85 A1 |  if_e	sub	fp, #8
1e5dc     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1e5e0     53 AF 62 50 |  if_ne	shl	local05, local01
1e5e4     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1e5e8     E7 92 02 F6 | 	mov	arg01, fp
1e5ec     10 F1 BE FD | 	call	#_push
1e5f0     E7 F0 03 F6 | 	mov	ptra, fp
1e5f4     F2 00 A0 FD | 	call	#popregs_
1e5f8                 | _do_shl_ret
1e5f8     2D 00 64 FD | 	ret
1e5fc                 | 
1e5fc                 | ' 
1e5fc                 | ' '--------------------------------- SHR
1e5fc                 | ' 
1e5fc                 | ' sub do_shr 
1e5fc                 | _do_shr
1e5fc     05 CA 05 F6 | 	mov	COUNT_, #5
1e600     E8 00 A0 FD | 	call	#pushregs_
1e604     18 F0 07 F1 | 	add	ptra, #24
1e608     64 F0 BE FD | 	call	#_pop
1e60c     3D A7 02 F6 | 	mov	local01, result1
1e610     3E 93 02 F6 | 	mov	arg01, result2
1e614     3F AD 02 F6 | 	mov	local04, result3
1e618     49 A9 02 F6 | 	mov	local02, arg01
1e61c     56 AB 02 F6 | 	mov	local03, local04
1e620     4C F0 BE FD | 	call	#_pop
1e624     3F AF 02 F6 | 	mov	local05, result3
1e628     E7 7A 62 FC | 	wrlong	result1, fp
1e62c     04 CE 05 F1 | 	add	fp, #4
1e630     E7 7C 62 FC | 	wrlong	result2, fp
1e634     04 CE 05 F1 | 	add	fp, #4
1e638     E7 AE 62 FC | 	wrlong	local05, fp
1e63c                 | ' 
1e63c                 | ' t2=pop()
1e63c                 | ' t1=pop()
1e63c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1e63c     08 CE 85 F1 | 	sub	fp, #8
1e640     1C AE 0E F2 | 	cmp	local05, #28 wz
1e644     E7 AE 02 AB |  if_e	rdlong	local05, fp
1e648     E7 AE 62 AC |  if_e	wrlong	local05, fp
1e64c     08 CE 05 A1 |  if_e	add	fp, #8
1e650     E7 3A 68 AC |  if_e	wrlong	#29, fp
1e654     08 CE 85 A1 |  if_e	sub	fp, #8
1e658                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1e658     1C AA 0E F2 | 	cmp	local03, #28 wz
1e65c     1D AA 06 A6 |  if_e	mov	local03, #29
1e660                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1e660     08 CE 05 F1 | 	add	fp, #8
1e664     E7 AE 02 FB | 	rdlong	local05, fp
1e668     08 CE 85 F1 | 	sub	fp, #8
1e66c     1F AE 0E F2 | 	cmp	local05, #31 wz
1e670     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e674     08 CE 05 51 |  if_ne	add	fp, #8
1e678     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1e67c     08 CE 85 51 |  if_ne	sub	fp, #8
1e680     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1e684     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1e688     E7 0C 68 AC |  if_e	wrlong	#6, fp
1e68c     08 CE 05 A1 |  if_e	add	fp, #8
1e690     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e694     08 CE 85 A1 |  if_e	sub	fp, #8
1e698     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1e69c     53 AF 42 50 |  if_ne	shr	local05, local01
1e6a0     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1e6a4     E7 92 02 F6 | 	mov	arg01, fp
1e6a8     54 F0 BE FD | 	call	#_push
1e6ac     E7 F0 03 F6 | 	mov	ptra, fp
1e6b0     F2 00 A0 FD | 	call	#popregs_
1e6b4                 | _do_shr_ret
1e6b4     2D 00 64 FD | 	ret
1e6b8                 | 
1e6b8                 | ' 
1e6b8                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1e6b8                 | ' 
1e6b8                 | ' ''----------------------------------------------------------------------------------------------------
1e6b8                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1e6b8                 | ' ''----------------------------------------------------------------------------------------------------
1e6b8                 | ' 
1e6b8                 | ' ''--------------------------- Command function pointers
1e6b8                 | ' 
1e6b8                 | ' sub init_commands
1e6b8                 | _init_commands
1e6b8                 | ' 
1e6b8                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1e6b8     00 80 06 F6 | 	mov	_var01, #0
1e6bc     D7 14 48 FB | 	callpa	#(@LR__2581-@LR__2580)>>2,fcache_load_ptr_
1e6c0                 | LR__2580
1e6c0     40 7B 02 F6 | 	mov	result1, _var01
1e6c4     02 7A 66 F0 | 	shl	result1, #2
1e6c8     32 95 02 F6 | 	mov	arg02, objptr
1e6cc     45 00 00 FF 
1e6d0     04 94 06 F1 | 	add	arg02, ##35332
1e6d4     4A 7B 02 F1 | 	add	result1, arg02
1e6d8     3D 65 62 FC | 	wrlong	objptr, result1
1e6dc     01 80 06 F1 | 	add	_var01, #1
1e6e0     00 81 56 F2 | 	cmps	_var01, #256 wc
1e6e4     D8 FF 9F CD |  if_b	jmp	#LR__2580
1e6e8                 | LR__2581
1e6e8     32 7B 02 F6 | 	mov	result1, objptr
1e6ec     14 7A 26 F4 | 	bith	result1, #20
1e6f0     45 00 00 FF 
1e6f4     08 64 06 F1 | 	add	objptr, ##35336
1e6f8     32 7B 62 FC | 	wrlong	result1, objptr
1e6fc     45 00 00 FF 
1e700     08 64 86 F1 | 	sub	objptr, ##35336
1e704     32 7B 02 F6 | 	mov	result1, objptr
1e708     15 7A 26 F4 | 	bith	result1, #21
1e70c     45 00 00 FF 
1e710     0C 64 06 F1 | 	add	objptr, ##35340
1e714     32 7B 62 FC | 	wrlong	result1, objptr
1e718     45 00 00 FF 
1e71c     0C 64 86 F1 | 	sub	objptr, ##35340
1e720     32 7B 02 F6 | 	mov	result1, objptr
1e724     34 7A 26 F4 | 	bith	result1, #52
1e728     45 00 00 FF 
1e72c     10 64 06 F1 | 	add	objptr, ##35344
1e730     32 7B 62 FC | 	wrlong	result1, objptr
1e734     45 00 00 FF 
1e738     10 64 86 F1 | 	sub	objptr, ##35344
1e73c     32 7B 02 F6 | 	mov	result1, objptr
1e740     16 7A 26 F4 | 	bith	result1, #22
1e744     45 00 00 FF 
1e748     18 64 06 F1 | 	add	objptr, ##35352
1e74c     32 7B 62 FC | 	wrlong	result1, objptr
1e750     45 00 00 FF 
1e754     18 64 86 F1 | 	sub	objptr, ##35352
1e758     32 7B 02 F6 | 	mov	result1, objptr
1e75c     00 28 00 FF 
1e760     00 7A 46 F5 | 	or	result1, ##5242880
1e764     45 00 00 FF 
1e768     1C 64 06 F1 | 	add	objptr, ##35356
1e76c     32 7B 62 FC | 	wrlong	result1, objptr
1e770     45 00 00 FF 
1e774     1C 64 86 F1 | 	sub	objptr, ##35356
1e778     32 7B 02 F6 | 	mov	result1, objptr
1e77c     35 7A 26 F4 | 	bith	result1, #53
1e780     45 00 00 FF 
1e784     20 64 06 F1 | 	add	objptr, ##35360
1e788     32 7B 62 FC | 	wrlong	result1, objptr
1e78c     45 00 00 FF 
1e790     20 64 86 F1 | 	sub	objptr, ##35360
1e794     32 7B 02 F6 | 	mov	result1, objptr
1e798     54 7A 26 F4 | 	bith	result1, #84
1e79c     45 00 00 FF 
1e7a0     24 64 06 F1 | 	add	objptr, ##35364
1e7a4     32 7B 62 FC | 	wrlong	result1, objptr
1e7a8     45 00 00 FF 
1e7ac     24 64 86 F1 | 	sub	objptr, ##35364
1e7b0     32 7B 02 F6 | 	mov	result1, objptr
1e7b4     17 7A 26 F4 | 	bith	result1, #23
1e7b8     45 00 00 FF 
1e7bc     28 64 06 F1 | 	add	objptr, ##35368
1e7c0     32 7B 62 FC | 	wrlong	result1, objptr
1e7c4     45 00 00 FF 
1e7c8     28 64 86 F1 | 	sub	objptr, ##35368
1e7cc     32 7B 02 F6 | 	mov	result1, objptr
1e7d0     00 48 00 FF 
1e7d4     00 7A 46 F5 | 	or	result1, ##9437184
1e7d8     45 00 00 FF 
1e7dc     2C 64 06 F1 | 	add	objptr, ##35372
1e7e0     32 7B 62 FC | 	wrlong	result1, objptr
1e7e4     45 00 00 FF 
1e7e8     2C 64 86 F1 | 	sub	objptr, ##35372
1e7ec     32 7B 02 F6 | 	mov	result1, objptr
1e7f0     00 50 00 FF 
1e7f4     00 7A 46 F5 | 	or	result1, ##10485760
1e7f8     45 00 00 FF 
1e7fc     30 64 06 F1 | 	add	objptr, ##35376
1e800     32 7B 62 FC | 	wrlong	result1, objptr
1e804     45 00 00 FF 
1e808     30 64 86 F1 | 	sub	objptr, ##35376
1e80c     32 7B 02 F6 | 	mov	result1, objptr
1e810     00 58 00 FF 
1e814     00 7A 46 F5 | 	or	result1, ##11534336
1e818     45 00 00 FF 
1e81c     34 64 06 F1 | 	add	objptr, ##35380
1e820     32 7B 62 FC | 	wrlong	result1, objptr
1e824     45 00 00 FF 
1e828     34 64 86 F1 | 	sub	objptr, ##35380
1e82c     32 7B 02 F6 | 	mov	result1, objptr
1e830     36 7A 26 F4 | 	bith	result1, #54
1e834     45 00 00 FF 
1e838     48 64 06 F1 | 	add	objptr, ##35400
1e83c     32 7B 62 FC | 	wrlong	result1, objptr
1e840     45 00 00 FF 
1e844     48 64 86 F1 | 	sub	objptr, ##35400
1e848     32 7B 02 F6 | 	mov	result1, objptr
1e84c     00 68 00 FF 
1e850     00 7A 46 F5 | 	or	result1, ##13631488
1e854     45 00 00 FF 
1e858     78 64 06 F1 | 	add	objptr, ##35448
1e85c     32 7B 62 FC | 	wrlong	result1, objptr
1e860     45 00 00 FF 
1e864     78 64 86 F1 | 	sub	objptr, ##35448
1e868     32 7B 02 F6 | 	mov	result1, objptr
1e86c     00 68 00 FF 
1e870     00 7A 46 F5 | 	or	result1, ##13631488
1e874     45 00 00 FF 
1e878     74 64 06 F1 | 	add	objptr, ##35444
1e87c     32 7B 62 FC | 	wrlong	result1, objptr
1e880     45 00 00 FF 
1e884     74 64 86 F1 | 	sub	objptr, ##35444
1e888     32 7B 02 F6 | 	mov	result1, objptr
1e88c     00 68 00 FF 
1e890     00 7A 46 F5 | 	or	result1, ##13631488
1e894     45 00 00 FF 
1e898     7C 64 06 F1 | 	add	objptr, ##35452
1e89c     32 7B 62 FC | 	wrlong	result1, objptr
1e8a0     45 00 00 FF 
1e8a4     7C 64 86 F1 | 	sub	objptr, ##35452
1e8a8     32 7B 02 F6 | 	mov	result1, objptr
1e8ac     00 68 00 FF 
1e8b0     00 7A 46 F5 | 	or	result1, ##13631488
1e8b4     45 00 00 FF 
1e8b8     80 64 06 F1 | 	add	objptr, ##35456
1e8bc     32 7B 62 FC | 	wrlong	result1, objptr
1e8c0     45 00 00 FF 
1e8c4     80 64 86 F1 | 	sub	objptr, ##35456
1e8c8     32 7B 02 F6 | 	mov	result1, objptr
1e8cc     00 68 00 FF 
1e8d0     00 7A 46 F5 | 	or	result1, ##13631488
1e8d4     45 00 00 FF 
1e8d8     B0 64 06 F1 | 	add	objptr, ##35504
1e8dc     32 7B 62 FC | 	wrlong	result1, objptr
1e8e0     45 00 00 FF 
1e8e4     B0 64 86 F1 | 	sub	objptr, ##35504
1e8e8     32 7B 02 F6 | 	mov	result1, objptr
1e8ec     55 7A 26 F4 | 	bith	result1, #85
1e8f0     45 00 00 FF 
1e8f4     60 64 06 F1 | 	add	objptr, ##35424
1e8f8     32 7B 62 FC | 	wrlong	result1, objptr
1e8fc     45 00 00 FF 
1e900     60 64 86 F1 | 	sub	objptr, ##35424
1e904     32 7B 02 F6 | 	mov	result1, objptr
1e908     00 68 00 FF 
1e90c     00 7A 46 F5 | 	or	result1, ##13631488
1e910     45 00 00 FF 
1e914     B4 64 06 F1 | 	add	objptr, ##35508
1e918     32 7B 62 FC | 	wrlong	result1, objptr
1e91c     45 00 00 FF 
1e920     B4 64 86 F1 | 	sub	objptr, ##35508
1e924     32 7B 02 F6 | 	mov	result1, objptr
1e928     00 68 00 FF 
1e92c     00 7A 46 F5 | 	or	result1, ##13631488
1e930     45 00 00 FF 
1e934     84 64 06 F1 | 	add	objptr, ##35460
1e938     32 7B 62 FC | 	wrlong	result1, objptr
1e93c     45 00 00 FF 
1e940     84 64 86 F1 | 	sub	objptr, ##35460
1e944     32 7B 02 F6 | 	mov	result1, objptr
1e948     00 68 00 FF 
1e94c     00 7A 46 F5 | 	or	result1, ##13631488
1e950     45 00 00 FF 
1e954     88 64 06 F1 | 	add	objptr, ##35464
1e958     32 7B 62 FC | 	wrlong	result1, objptr
1e95c     45 00 00 FF 
1e960     88 64 86 F1 | 	sub	objptr, ##35464
1e964     32 7B 02 F6 | 	mov	result1, objptr
1e968     00 68 00 FF 
1e96c     00 7A 46 F5 | 	or	result1, ##13631488
1e970     45 00 00 FF 
1e974     8C 64 06 F1 | 	add	objptr, ##35468
1e978     32 7B 62 FC | 	wrlong	result1, objptr
1e97c     45 00 00 FF 
1e980     8C 64 86 F1 | 	sub	objptr, ##35468
1e984     32 7B 02 F6 | 	mov	result1, objptr
1e988     74 7A 26 F4 | 	bith	result1, #116
1e98c     45 00 00 FF 
1e990     04 65 06 F1 | 	add	objptr, ##35588
1e994     32 7B 62 FC | 	wrlong	result1, objptr
1e998     45 00 00 FF 
1e99c     04 65 86 F1 | 	sub	objptr, ##35588
1e9a0     32 7B 02 F6 | 	mov	result1, objptr
1e9a4     18 7A 26 F4 | 	bith	result1, #24
1e9a8     45 00 00 FF 
1e9ac     08 65 06 F1 | 	add	objptr, ##35592
1e9b0     32 7B 62 FC | 	wrlong	result1, objptr
1e9b4     45 00 00 FF 
1e9b8     08 65 86 F1 | 	sub	objptr, ##35592
1e9bc     32 7B 02 F6 | 	mov	result1, objptr
1e9c0     00 88 00 FF 
1e9c4     00 7A 46 F5 | 	or	result1, ##17825792
1e9c8     45 00 00 FF 
1e9cc     0C 65 06 F1 | 	add	objptr, ##35596
1e9d0     32 7B 62 FC | 	wrlong	result1, objptr
1e9d4     45 00 00 FF 
1e9d8     0C 65 86 F1 | 	sub	objptr, ##35596
1e9dc     32 7B 02 F6 | 	mov	result1, objptr
1e9e0     00 90 00 FF 
1e9e4     00 7A 46 F5 | 	or	result1, ##18874368
1e9e8     45 00 00 FF 
1e9ec     10 65 06 F1 | 	add	objptr, ##35600
1e9f0     32 7B 62 FC | 	wrlong	result1, objptr
1e9f4     45 00 00 FF 
1e9f8     10 65 86 F1 | 	sub	objptr, ##35600
1e9fc     32 7B 02 F6 | 	mov	result1, objptr
1ea00     00 98 00 FF 
1ea04     00 7A 46 F5 | 	or	result1, ##19922944
1ea08     45 00 00 FF 
1ea0c     14 65 06 F1 | 	add	objptr, ##35604
1ea10     32 7B 62 FC | 	wrlong	result1, objptr
1ea14     45 00 00 FF 
1ea18     14 65 86 F1 | 	sub	objptr, ##35604
1ea1c     32 7B 02 F6 | 	mov	result1, objptr
1ea20     00 A0 00 FF 
1ea24     00 7A 46 F5 | 	or	result1, ##20971520
1ea28     45 00 00 FF 
1ea2c     18 65 06 F1 | 	add	objptr, ##35608
1ea30     32 7B 62 FC | 	wrlong	result1, objptr
1ea34     45 00 00 FF 
1ea38     18 65 86 F1 | 	sub	objptr, ##35608
1ea3c     32 7B 02 F6 | 	mov	result1, objptr
1ea40     00 A8 00 FF 
1ea44     00 7A 46 F5 | 	or	result1, ##22020096
1ea48     45 00 00 FF 
1ea4c     1C 65 06 F1 | 	add	objptr, ##35612
1ea50     32 7B 62 FC | 	wrlong	result1, objptr
1ea54     45 00 00 FF 
1ea58     1C 65 86 F1 | 	sub	objptr, ##35612
1ea5c     32 7B 02 F6 | 	mov	result1, objptr
1ea60     00 B0 00 FF 
1ea64     00 7A 46 F5 | 	or	result1, ##23068672
1ea68     45 00 00 FF 
1ea6c     20 65 06 F1 | 	add	objptr, ##35616
1ea70     32 7B 62 FC | 	wrlong	result1, objptr
1ea74     45 00 00 FF 
1ea78     20 65 86 F1 | 	sub	objptr, ##35616
1ea7c     32 7B 02 F6 | 	mov	result1, objptr
1ea80     00 B8 00 FF 
1ea84     00 7A 46 F5 | 	or	result1, ##24117248
1ea88     45 00 00 FF 
1ea8c     24 65 06 F1 | 	add	objptr, ##35620
1ea90     32 7B 62 FC | 	wrlong	result1, objptr
1ea94     45 00 00 FF 
1ea98     24 65 86 F1 | 	sub	objptr, ##35620
1ea9c     32 7B 02 F6 | 	mov	result1, objptr
1eaa0     37 7A 26 F4 | 	bith	result1, #55
1eaa4     45 00 00 FF 
1eaa8     28 65 06 F1 | 	add	objptr, ##35624
1eaac     32 7B 62 FC | 	wrlong	result1, objptr
1eab0     45 00 00 FF 
1eab4     28 65 86 F1 | 	sub	objptr, ##35624
1eab8     32 7B 02 F6 | 	mov	result1, objptr
1eabc     00 C8 00 FF 
1eac0     00 7A 46 F5 | 	or	result1, ##26214400
1eac4     45 00 00 FF 
1eac8     2C 65 06 F1 | 	add	objptr, ##35628
1eacc     32 7B 62 FC | 	wrlong	result1, objptr
1ead0     45 00 00 FF 
1ead4     2C 65 86 F1 | 	sub	objptr, ##35628
1ead8     32 7B 02 F6 | 	mov	result1, objptr
1eadc     00 D0 00 FF 
1eae0     00 7A 46 F5 | 	or	result1, ##27262976
1eae4     45 00 00 FF 
1eae8     30 65 06 F1 | 	add	objptr, ##35632
1eaec     32 7B 62 FC | 	wrlong	result1, objptr
1eaf0     45 00 00 FF 
1eaf4     30 65 86 F1 | 	sub	objptr, ##35632
1eaf8     32 7B 02 F6 | 	mov	result1, objptr
1eafc     00 D8 00 FF 
1eb00     00 7A 46 F5 | 	or	result1, ##28311552
1eb04     45 00 00 FF 
1eb08     34 65 06 F1 | 	add	objptr, ##35636
1eb0c     32 7B 62 FC | 	wrlong	result1, objptr
1eb10     45 00 00 FF 
1eb14     34 65 86 F1 | 	sub	objptr, ##35636
1eb18     32 7B 02 F6 | 	mov	result1, objptr
1eb1c     56 7A 26 F4 | 	bith	result1, #86
1eb20     45 00 00 FF 
1eb24     38 65 06 F1 | 	add	objptr, ##35640
1eb28     32 7B 62 FC | 	wrlong	result1, objptr
1eb2c     45 00 00 FF 
1eb30     38 65 86 F1 | 	sub	objptr, ##35640
1eb34     32 7B 02 F6 | 	mov	result1, objptr
1eb38     00 E8 00 FF 
1eb3c     00 7A 46 F5 | 	or	result1, ##30408704
1eb40     47 00 00 FF 
1eb44     00 64 06 F1 | 	add	objptr, ##36352
1eb48     32 7B 62 FC | 	wrlong	result1, objptr
1eb4c     47 00 00 FF 
1eb50     00 64 86 F1 | 	sub	objptr, ##36352
1eb54     32 7B 02 F6 | 	mov	result1, objptr
1eb58     75 7A 26 F4 | 	bith	result1, #117
1eb5c     45 00 00 FF 
1eb60     3C 65 06 F1 | 	add	objptr, ##35644
1eb64     32 7B 62 FC | 	wrlong	result1, objptr
1eb68     45 00 00 FF 
1eb6c     3C 65 86 F1 | 	sub	objptr, ##35644
1eb70     32 7B 02 F6 | 	mov	result1, objptr
1eb74     94 7A 26 F4 | 	bith	result1, #148
1eb78     45 00 00 FF 
1eb7c     50 65 06 F1 | 	add	objptr, ##35664
1eb80     32 7B 62 FC | 	wrlong	result1, objptr
1eb84     45 00 00 FF 
1eb88     50 65 86 F1 | 	sub	objptr, ##35664
1eb8c     32 7B 02 F6 | 	mov	result1, objptr
1eb90     19 7A 26 F4 | 	bith	result1, #25
1eb94     45 00 00 FF 
1eb98     40 65 06 F1 | 	add	objptr, ##35648
1eb9c     32 7B 62 FC | 	wrlong	result1, objptr
1eba0     45 00 00 FF 
1eba4     40 65 86 F1 | 	sub	objptr, ##35648
1eba8     32 7B 02 F6 | 	mov	result1, objptr
1ebac     00 08 01 FF 
1ebb0     00 7A 46 F5 | 	or	result1, ##34603008
1ebb4     45 00 00 FF 
1ebb8     5C 64 06 F1 | 	add	objptr, ##35420
1ebbc     32 7B 62 FC | 	wrlong	result1, objptr
1ebc0     45 00 00 FF 
1ebc4     5C 64 86 F1 | 	sub	objptr, ##35420
1ebc8     32 7B 02 F6 | 	mov	result1, objptr
1ebcc     00 10 01 FF 
1ebd0     00 7A 46 F5 | 	or	result1, ##35651584
1ebd4     45 00 00 FF 
1ebd8     48 65 06 F1 | 	add	objptr, ##35656
1ebdc     32 7B 62 FC | 	wrlong	result1, objptr
1ebe0     45 00 00 FF 
1ebe4     48 65 86 F1 | 	sub	objptr, ##35656
1ebe8     32 7B 02 F6 | 	mov	result1, objptr
1ebec     00 18 01 FF 
1ebf0     00 7A 46 F5 | 	or	result1, ##36700160
1ebf4     45 00 00 FF 
1ebf8     4C 65 06 F1 | 	add	objptr, ##35660
1ebfc     32 7B 62 FC | 	wrlong	result1, objptr
1ec00     45 00 00 FF 
1ec04     4C 65 86 F1 | 	sub	objptr, ##35660
1ec08     32 7B 02 F6 | 	mov	result1, objptr
1ec0c     00 20 01 FF 
1ec10     00 7A 46 F5 | 	or	result1, ##37748736
1ec14     45 00 00 FF 
1ec18     58 65 06 F1 | 	add	objptr, ##35672
1ec1c     32 7B 62 FC | 	wrlong	result1, objptr
1ec20     45 00 00 FF 
1ec24     58 65 86 F1 | 	sub	objptr, ##35672
1ec28     32 7B 02 F6 | 	mov	result1, objptr
1ec2c     00 28 01 FF 
1ec30     00 7A 46 F5 | 	or	result1, ##38797312
1ec34     45 00 00 FF 
1ec38     5C 65 06 F1 | 	add	objptr, ##35676
1ec3c     32 7B 62 FC | 	wrlong	result1, objptr
1ec40     45 00 00 FF 
1ec44     5C 65 86 F1 | 	sub	objptr, ##35676
1ec48     32 7B 02 F6 | 	mov	result1, objptr
1ec4c     00 30 01 FF 
1ec50     00 7A 46 F5 | 	or	result1, ##39845888
1ec54     45 00 00 FF 
1ec58     60 65 06 F1 | 	add	objptr, ##35680
1ec5c     32 7B 62 FC | 	wrlong	result1, objptr
1ec60     45 00 00 FF 
1ec64     60 65 86 F1 | 	sub	objptr, ##35680
1ec68     32 7B 02 F6 | 	mov	result1, objptr
1ec6c     00 38 01 FF 
1ec70     00 7A 46 F5 | 	or	result1, ##40894464
1ec74     45 00 00 FF 
1ec78     64 65 06 F1 | 	add	objptr, ##35684
1ec7c     32 7B 62 FC | 	wrlong	result1, objptr
1ec80     45 00 00 FF 
1ec84     64 65 86 F1 | 	sub	objptr, ##35684
1ec88     32 7B 02 F6 | 	mov	result1, objptr
1ec8c     00 40 01 FF 
1ec90     00 7A 46 F5 | 	or	result1, ##41943040
1ec94     45 00 00 FF 
1ec98     6C 65 06 F1 | 	add	objptr, ##35692
1ec9c     32 7B 62 FC | 	wrlong	result1, objptr
1eca0     45 00 00 FF 
1eca4     6C 65 86 F1 | 	sub	objptr, ##35692
1eca8     32 7B 02 F6 | 	mov	result1, objptr
1ecac     00 08 01 FF 
1ecb0     00 7A 46 F5 | 	or	result1, ##34603008
1ecb4     45 00 00 FF 
1ecb8     70 65 06 F1 | 	add	objptr, ##35696
1ecbc     32 7B 62 FC | 	wrlong	result1, objptr
1ecc0     45 00 00 FF 
1ecc4     70 65 86 F1 | 	sub	objptr, ##35696
1ecc8     32 7B 02 F6 | 	mov	result1, objptr
1eccc     00 48 01 FF 
1ecd0     00 7A 46 F5 | 	or	result1, ##42991616
1ecd4     45 00 00 FF 
1ecd8     70 64 06 F1 | 	add	objptr, ##35440
1ecdc     32 7B 62 FC | 	wrlong	result1, objptr
1ece0     45 00 00 FF 
1ece4     70 64 86 F1 | 	sub	objptr, ##35440
1ece8     32 7B 02 F6 | 	mov	result1, objptr
1ecec     00 50 01 FF 
1ecf0     00 7A 46 F5 | 	or	result1, ##44040192
1ecf4     45 00 00 FF 
1ecf8     A0 64 06 F1 | 	add	objptr, ##35488
1ecfc     32 7B 62 FC | 	wrlong	result1, objptr
1ed00     45 00 00 FF 
1ed04     A0 64 86 F1 | 	sub	objptr, ##35488
1ed08     32 7B 02 F6 | 	mov	result1, objptr
1ed0c     00 58 01 FF 
1ed10     00 7A 46 F5 | 	or	result1, ##45088768
1ed14     45 00 00 FF 
1ed18     9C 64 06 F1 | 	add	objptr, ##35484
1ed1c     32 7B 62 FC | 	wrlong	result1, objptr
1ed20     45 00 00 FF 
1ed24     9C 64 86 F1 | 	sub	objptr, ##35484
1ed28     32 7B 02 F6 | 	mov	result1, objptr
1ed2c     00 60 01 FF 
1ed30     00 7A 46 F5 | 	or	result1, ##46137344
1ed34     45 00 00 FF 
1ed38     40 64 06 F1 | 	add	objptr, ##35392
1ed3c     32 7B 62 FC | 	wrlong	result1, objptr
1ed40     45 00 00 FF 
1ed44     40 64 86 F1 | 	sub	objptr, ##35392
1ed48     32 7B 02 F6 | 	mov	result1, objptr
1ed4c     00 68 01 FF 
1ed50     00 7A 46 F5 | 	or	result1, ##47185920
1ed54     45 00 00 FF 
1ed58     44 64 06 F1 | 	add	objptr, ##35396
1ed5c     32 7B 62 FC | 	wrlong	result1, objptr
1ed60     45 00 00 FF 
1ed64     44 64 86 F1 | 	sub	objptr, ##35396
1ed68     32 7B 02 F6 | 	mov	result1, objptr
1ed6c     00 70 01 FF 
1ed70     00 7A 46 F5 | 	or	result1, ##48234496
1ed74     45 00 00 FF 
1ed78     AC 64 06 F1 | 	add	objptr, ##35500
1ed7c     32 7B 62 FC | 	wrlong	result1, objptr
1ed80     45 00 00 FF 
1ed84     AC 64 86 F1 | 	sub	objptr, ##35500
1ed88     32 7B 02 F6 | 	mov	result1, objptr
1ed8c     00 78 01 FF 
1ed90     00 7A 46 F5 | 	or	result1, ##49283072
1ed94     45 00 00 FF 
1ed98     54 65 06 F1 | 	add	objptr, ##35668
1ed9c     32 7B 62 FC | 	wrlong	result1, objptr
1eda0     45 00 00 FF 
1eda4     54 65 86 F1 | 	sub	objptr, ##35668
1eda8     32 7B 02 F6 | 	mov	result1, objptr
1edac     38 7A 26 F4 | 	bith	result1, #56
1edb0     45 00 00 FF 
1edb4     68 65 06 F1 | 	add	objptr, ##35688
1edb8     32 7B 62 FC | 	wrlong	result1, objptr
1edbc     45 00 00 FF 
1edc0     68 65 86 F1 | 	sub	objptr, ##35688
1edc4     32 7B 02 F6 | 	mov	result1, objptr
1edc8     00 88 01 FF 
1edcc     00 7A 46 F5 | 	or	result1, ##51380224
1edd0     45 00 00 FF 
1edd4     74 65 06 F1 | 	add	objptr, ##35700
1edd8     32 7B 62 FC | 	wrlong	result1, objptr
1eddc     45 00 00 FF 
1ede0     74 65 86 F1 | 	sub	objptr, ##35700
1ede4     32 7B 02 F6 | 	mov	result1, objptr
1ede8     00 90 01 FF 
1edec     00 7A 46 F5 | 	or	result1, ##52428800
1edf0     45 00 00 FF 
1edf4     78 65 06 F1 | 	add	objptr, ##35704
1edf8     32 7B 62 FC | 	wrlong	result1, objptr
1edfc     45 00 00 FF 
1ee00     78 65 86 F1 | 	sub	objptr, ##35704
1ee04     32 7B 02 F6 | 	mov	result1, objptr
1ee08     00 98 01 FF 
1ee0c     00 7A 46 F5 | 	or	result1, ##53477376
1ee10     45 00 00 FF 
1ee14     7C 65 06 F1 | 	add	objptr, ##35708
1ee18     32 7B 62 FC | 	wrlong	result1, objptr
1ee1c     45 00 00 FF 
1ee20     7C 65 86 F1 | 	sub	objptr, ##35708
1ee24     32 7B 02 F6 | 	mov	result1, objptr
1ee28     00 A0 01 FF 
1ee2c     00 7A 46 F5 | 	or	result1, ##54525952
1ee30     45 00 00 FF 
1ee34     80 65 06 F1 | 	add	objptr, ##35712
1ee38     32 7B 62 FC | 	wrlong	result1, objptr
1ee3c     45 00 00 FF 
1ee40     80 65 86 F1 | 	sub	objptr, ##35712
1ee44     32 7B 02 F6 | 	mov	result1, objptr
1ee48     00 A8 01 FF 
1ee4c     00 7A 46 F5 | 	or	result1, ##55574528
1ee50     45 00 00 FF 
1ee54     84 65 06 F1 | 	add	objptr, ##35716
1ee58     32 7B 62 FC | 	wrlong	result1, objptr
1ee5c     45 00 00 FF 
1ee60     84 65 86 F1 | 	sub	objptr, ##35716
1ee64     32 7B 02 F6 | 	mov	result1, objptr
1ee68     00 B0 01 FF 
1ee6c     00 7A 46 F5 | 	or	result1, ##56623104
1ee70     45 00 00 FF 
1ee74     88 65 06 F1 | 	add	objptr, ##35720
1ee78     32 7B 62 FC | 	wrlong	result1, objptr
1ee7c     45 00 00 FF 
1ee80     88 65 86 F1 | 	sub	objptr, ##35720
1ee84     32 7B 02 F6 | 	mov	result1, objptr
1ee88     94 7A 26 F4 | 	bith	result1, #148
1ee8c     45 00 00 FF 
1ee90     50 65 06 F1 | 	add	objptr, ##35664
1ee94     32 7B 62 FC | 	wrlong	result1, objptr
1ee98     45 00 00 FF 
1ee9c     50 65 86 F1 | 	sub	objptr, ##35664
1eea0     32 7B 02 F6 | 	mov	result1, objptr
1eea4     00 B8 01 FF 
1eea8     00 7A 46 F5 | 	or	result1, ##57671680
1eeac     45 00 00 FF 
1eeb0     90 65 06 F1 | 	add	objptr, ##35728
1eeb4     32 7B 62 FC | 	wrlong	result1, objptr
1eeb8     45 00 00 FF 
1eebc     90 65 86 F1 | 	sub	objptr, ##35728
1eec0     32 7B 02 F6 | 	mov	result1, objptr
1eec4     57 7A 26 F4 | 	bith	result1, #87
1eec8     45 00 00 FF 
1eecc     8C 65 06 F1 | 	add	objptr, ##35724
1eed0     32 7B 62 FC | 	wrlong	result1, objptr
1eed4     45 00 00 FF 
1eed8     8C 65 86 F1 | 	sub	objptr, ##35724
1eedc     32 7B 02 F6 | 	mov	result1, objptr
1eee0     00 C8 01 FF 
1eee4     00 7A 46 F5 | 	or	result1, ##59768832
1eee8     45 00 00 FF 
1eeec     A4 65 06 F1 | 	add	objptr, ##35748
1eef0     32 7B 62 FC | 	wrlong	result1, objptr
1eef4     45 00 00 FF 
1eef8     A4 65 86 F1 | 	sub	objptr, ##35748
1eefc     32 7B 02 F6 | 	mov	result1, objptr
1ef00     00 D0 01 FF 
1ef04     00 7A 46 F5 | 	or	result1, ##60817408
1ef08     45 00 00 FF 
1ef0c     A8 65 06 F1 | 	add	objptr, ##35752
1ef10     32 7B 62 FC | 	wrlong	result1, objptr
1ef14     45 00 00 FF 
1ef18     A8 65 86 F1 | 	sub	objptr, ##35752
1ef1c     32 7B 02 F6 | 	mov	result1, objptr
1ef20     00 D8 01 FF 
1ef24     00 7A 46 F5 | 	or	result1, ##61865984
1ef28     45 00 00 FF 
1ef2c     94 65 06 F1 | 	add	objptr, ##35732
1ef30     32 7B 62 FC | 	wrlong	result1, objptr
1ef34     45 00 00 FF 
1ef38     94 65 86 F1 | 	sub	objptr, ##35732
1ef3c     32 7B 02 F6 | 	mov	result1, objptr
1ef40     76 7A 26 F4 | 	bith	result1, #118
1ef44     45 00 00 FF 
1ef48     98 65 06 F1 | 	add	objptr, ##35736
1ef4c     32 7B 62 FC | 	wrlong	result1, objptr
1ef50     45 00 00 FF 
1ef54     98 65 86 F1 | 	sub	objptr, ##35736
1ef58     32 7B 02 F6 | 	mov	result1, objptr
1ef5c     00 E8 01 FF 
1ef60     00 7A 46 F5 | 	or	result1, ##63963136
1ef64     45 00 00 FF 
1ef68     9C 65 06 F1 | 	add	objptr, ##35740
1ef6c     32 7B 62 FC | 	wrlong	result1, objptr
1ef70     45 00 00 FF 
1ef74     9C 65 86 F1 | 	sub	objptr, ##35740
1ef78     32 7B 02 F6 | 	mov	result1, objptr
1ef7c     95 7A 26 F4 | 	bith	result1, #149
1ef80     45 00 00 FF 
1ef84     A0 65 06 F1 | 	add	objptr, ##35744
1ef88     32 7B 62 FC | 	wrlong	result1, objptr
1ef8c     45 00 00 FF 
1ef90     A0 65 86 F1 | 	sub	objptr, ##35744
1ef94     32 7B 02 F6 | 	mov	result1, objptr
1ef98     B4 7A 26 F4 | 	bith	result1, #180
1ef9c     45 00 00 FF 
1efa0     B0 65 06 F1 | 	add	objptr, ##35760
1efa4     32 7B 62 FC | 	wrlong	result1, objptr
1efa8     45 00 00 FF 
1efac     B0 65 86 F1 | 	sub	objptr, ##35760
1efb0     32 7B 02 F6 | 	mov	result1, objptr
1efb4     1A 7A 26 F4 | 	bith	result1, #26
1efb8     45 00 00 FF 
1efbc     AC 65 06 F1 | 	add	objptr, ##35756
1efc0     32 7B 62 FC | 	wrlong	result1, objptr
1efc4     45 00 00 FF 
1efc8     AC 65 86 F1 | 	sub	objptr, ##35756
1efcc     32 7B 02 F6 | 	mov	result1, objptr
1efd0     00 08 02 FF 
1efd4     00 7A 46 F5 | 	or	result1, ##68157440
1efd8     45 00 00 FF 
1efdc     BC 65 06 F1 | 	add	objptr, ##35772
1efe0     32 7B 62 FC | 	wrlong	result1, objptr
1efe4     45 00 00 FF 
1efe8     BC 65 86 F1 | 	sub	objptr, ##35772
1efec     32 7B 02 F6 | 	mov	result1, objptr
1eff0     00 10 02 FF 
1eff4     00 7A 46 F5 | 	or	result1, ##69206016
1eff8     45 00 00 FF 
1effc     B8 65 06 F1 | 	add	objptr, ##35768
1f000     32 7B 62 FC | 	wrlong	result1, objptr
1f004     45 00 00 FF 
1f008     B8 65 86 F1 | 	sub	objptr, ##35768
1f00c     32 7B 02 F6 | 	mov	result1, objptr
1f010     00 18 02 FF 
1f014     00 7A 46 F5 | 	or	result1, ##70254592
1f018     45 00 00 FF 
1f01c     B4 65 06 F1 | 	add	objptr, ##35764
1f020     32 7B 62 FC | 	wrlong	result1, objptr
1f024     45 00 00 FF 
1f028     B4 65 86 F1 | 	sub	objptr, ##35764
1f02c     32 7B 02 F6 | 	mov	result1, objptr
1f030     00 20 02 FF 
1f034     00 7A 46 F5 | 	or	result1, ##71303168
1f038     45 00 00 FF 
1f03c     C0 65 06 F1 | 	add	objptr, ##35776
1f040     32 7B 62 FC | 	wrlong	result1, objptr
1f044     45 00 00 FF 
1f048     C0 65 86 F1 | 	sub	objptr, ##35776
1f04c     32 7B 02 F6 | 	mov	result1, objptr
1f050     00 28 02 FF 
1f054     00 7A 46 F5 | 	or	result1, ##72351744
1f058     45 00 00 FF 
1f05c     C4 65 06 F1 | 	add	objptr, ##35780
1f060     32 7B 62 FC | 	wrlong	result1, objptr
1f064     45 00 00 FF 
1f068     C4 65 86 F1 | 	sub	objptr, ##35780
1f06c     32 7B 02 F6 | 	mov	result1, objptr
1f070     00 30 02 FF 
1f074     00 7A 46 F5 | 	or	result1, ##73400320
1f078     45 00 00 FF 
1f07c     58 64 06 F1 | 	add	objptr, ##35416
1f080     32 7B 62 FC | 	wrlong	result1, objptr
1f084     45 00 00 FF 
1f088     58 64 86 F1 | 	sub	objptr, ##35416
1f08c     32 7B 02 F6 | 	mov	result1, objptr
1f090     00 38 02 FF 
1f094     00 7A 46 F5 | 	or	result1, ##74448896
1f098     45 00 00 FF 
1f09c     DC 65 06 F1 | 	add	objptr, ##35804
1f0a0     32 7B 62 FC | 	wrlong	result1, objptr
1f0a4     45 00 00 FF 
1f0a8     DC 65 86 F1 | 	sub	objptr, ##35804
1f0ac     32 7B 02 F6 | 	mov	result1, objptr
1f0b0     00 40 02 FF 
1f0b4     00 7A 46 F5 | 	or	result1, ##75497472
1f0b8     45 00 00 FF 
1f0bc     EC 65 06 F1 | 	add	objptr, ##35820
1f0c0     32 7B 62 FC | 	wrlong	result1, objptr
1f0c4     45 00 00 FF 
1f0c8     EC 65 86 F1 | 	sub	objptr, ##35820
1f0cc     32 7B 02 F6 | 	mov	result1, objptr
1f0d0     00 48 02 FF 
1f0d4     00 7A 46 F5 | 	or	result1, ##76546048
1f0d8     45 00 00 FF 
1f0dc     F0 65 06 F1 | 	add	objptr, ##35824
1f0e0     32 7B 62 FC | 	wrlong	result1, objptr
1f0e4     45 00 00 FF 
1f0e8     F0 65 86 F1 | 	sub	objptr, ##35824
1f0ec     32 7B 02 F6 | 	mov	result1, objptr
1f0f0     00 50 02 FF 
1f0f4     00 7A 46 F5 | 	or	result1, ##77594624
1f0f8     45 00 00 FF 
1f0fc     E8 65 06 F1 | 	add	objptr, ##35816
1f100     32 7B 62 FC | 	wrlong	result1, objptr
1f104     45 00 00 FF 
1f108     E8 65 86 F1 | 	sub	objptr, ##35816
1f10c     32 7B 02 F6 | 	mov	result1, objptr
1f110     00 58 02 FF 
1f114     00 7A 46 F5 | 	or	result1, ##78643200
1f118     45 00 00 FF 
1f11c     E0 65 06 F1 | 	add	objptr, ##35808
1f120     32 7B 62 FC | 	wrlong	result1, objptr
1f124     45 00 00 FF 
1f128     E0 65 86 F1 | 	sub	objptr, ##35808
1f12c     32 7B 02 F6 | 	mov	result1, objptr
1f130     00 60 02 FF 
1f134     00 7A 46 F5 | 	or	result1, ##79691776
1f138     45 00 00 FF 
1f13c     E4 65 06 F1 | 	add	objptr, ##35812
1f140     32 7B 62 FC | 	wrlong	result1, objptr
1f144     45 00 00 FF 
1f148     E4 65 86 F1 | 	sub	objptr, ##35812
1f14c     32 7B 02 F6 | 	mov	result1, objptr
1f150     00 68 02 FF 
1f154     00 7A 46 F5 | 	or	result1, ##80740352
1f158     45 00 00 FF 
1f15c     F4 65 06 F1 | 	add	objptr, ##35828
1f160     32 7B 62 FC | 	wrlong	result1, objptr
1f164     45 00 00 FF 
1f168     F4 65 86 F1 | 	sub	objptr, ##35828
1f16c     32 7B 02 F6 | 	mov	result1, objptr
1f170     00 70 02 FF 
1f174     00 7A 46 F5 | 	or	result1, ##81788928
1f178     45 00 00 FF 
1f17c     F8 65 06 F1 | 	add	objptr, ##35832
1f180     32 7B 62 FC | 	wrlong	result1, objptr
1f184     45 00 00 FF 
1f188     F8 65 86 F1 | 	sub	objptr, ##35832
1f18c     32 7B 02 F6 | 	mov	result1, objptr
1f190     00 78 02 FF 
1f194     00 7A 46 F5 | 	or	result1, ##82837504
1f198     45 00 00 FF 
1f19c     FC 65 06 F1 | 	add	objptr, ##35836
1f1a0     32 7B 62 FC | 	wrlong	result1, objptr
1f1a4     45 00 00 FF 
1f1a8     FC 65 86 F1 | 	sub	objptr, ##35836
1f1ac     32 7B 02 F6 | 	mov	result1, objptr
1f1b0     00 80 02 FF 
1f1b4     00 7A 46 F5 | 	or	result1, ##83886080
1f1b8     46 00 00 FF 
1f1bc     00 64 06 F1 | 	add	objptr, ##35840
1f1c0     32 7B 62 FC | 	wrlong	result1, objptr
1f1c4     46 00 00 FF 
1f1c8     00 64 86 F1 | 	sub	objptr, ##35840
1f1cc     32 7B 02 F6 | 	mov	result1, objptr
1f1d0     00 88 02 FF 
1f1d4     00 7A 46 F5 | 	or	result1, ##84934656
1f1d8     46 00 00 FF 
1f1dc     04 64 06 F1 | 	add	objptr, ##35844
1f1e0     32 7B 62 FC | 	wrlong	result1, objptr
1f1e4     46 00 00 FF 
1f1e8     04 64 86 F1 | 	sub	objptr, ##35844
1f1ec     32 7B 02 F6 | 	mov	result1, objptr
1f1f0     00 90 02 FF 
1f1f4     00 7A 46 F5 | 	or	result1, ##85983232
1f1f8     46 00 00 FF 
1f1fc     08 64 06 F1 | 	add	objptr, ##35848
1f200     32 7B 62 FC | 	wrlong	result1, objptr
1f204     46 00 00 FF 
1f208     08 64 86 F1 | 	sub	objptr, ##35848
1f20c     32 7B 02 F6 | 	mov	result1, objptr
1f210     00 98 02 FF 
1f214     00 7A 46 F5 | 	or	result1, ##87031808
1f218     46 00 00 FF 
1f21c     0C 64 06 F1 | 	add	objptr, ##35852
1f220     32 7B 62 FC | 	wrlong	result1, objptr
1f224     46 00 00 FF 
1f228     0C 64 86 F1 | 	sub	objptr, ##35852
1f22c     32 7B 02 F6 | 	mov	result1, objptr
1f230     00 A0 02 FF 
1f234     00 7A 46 F5 | 	or	result1, ##88080384
1f238     46 00 00 FF 
1f23c     10 64 06 F1 | 	add	objptr, ##35856
1f240     32 7B 62 FC | 	wrlong	result1, objptr
1f244     46 00 00 FF 
1f248     10 64 86 F1 | 	sub	objptr, ##35856
1f24c     32 7B 02 F6 | 	mov	result1, objptr
1f250     00 A8 02 FF 
1f254     00 7A 46 F5 | 	or	result1, ##89128960
1f258     46 00 00 FF 
1f25c     1C 64 06 F1 | 	add	objptr, ##35868
1f260     32 7B 62 FC | 	wrlong	result1, objptr
1f264     46 00 00 FF 
1f268     1C 64 86 F1 | 	sub	objptr, ##35868
1f26c     32 7B 02 F6 | 	mov	result1, objptr
1f270     00 B0 02 FF 
1f274     00 7A 46 F5 | 	or	result1, ##90177536
1f278     46 00 00 FF 
1f27c     14 64 06 F1 | 	add	objptr, ##35860
1f280     32 7B 62 FC | 	wrlong	result1, objptr
1f284     46 00 00 FF 
1f288     14 64 86 F1 | 	sub	objptr, ##35860
1f28c     32 7B 02 F6 | 	mov	result1, objptr
1f290     00 B8 02 FF 
1f294     00 7A 46 F5 | 	or	result1, ##91226112
1f298     46 00 00 FF 
1f29c     18 64 06 F1 | 	add	objptr, ##35864
1f2a0     32 7B 62 FC | 	wrlong	result1, objptr
1f2a4     46 00 00 FF 
1f2a8     18 64 86 F1 | 	sub	objptr, ##35864
1f2ac     32 7B 02 F6 | 	mov	result1, objptr
1f2b0     00 C0 02 FF 
1f2b4     00 7A 46 F5 | 	or	result1, ##92274688
1f2b8     46 00 00 FF 
1f2bc     20 64 06 F1 | 	add	objptr, ##35872
1f2c0     32 7B 62 FC | 	wrlong	result1, objptr
1f2c4     46 00 00 FF 
1f2c8     20 64 86 F1 | 	sub	objptr, ##35872
1f2cc     32 7B 02 F6 | 	mov	result1, objptr
1f2d0     00 C8 02 FF 
1f2d4     00 7A 46 F5 | 	or	result1, ##93323264
1f2d8     45 00 00 FF 
1f2dc     C8 65 06 F1 | 	add	objptr, ##35784
1f2e0     32 7B 62 FC | 	wrlong	result1, objptr
1f2e4     45 00 00 FF 
1f2e8     C8 65 86 F1 | 	sub	objptr, ##35784
1f2ec     32 7B 02 F6 | 	mov	result1, objptr
1f2f0     00 D0 02 FF 
1f2f4     00 7A 46 F5 | 	or	result1, ##94371840
1f2f8     45 00 00 FF 
1f2fc     D0 65 06 F1 | 	add	objptr, ##35792
1f300     32 7B 62 FC | 	wrlong	result1, objptr
1f304     45 00 00 FF 
1f308     D0 65 86 F1 | 	sub	objptr, ##35792
1f30c     32 7B 02 F6 | 	mov	result1, objptr
1f310     00 D8 02 FF 
1f314     00 7A 46 F5 | 	or	result1, ##95420416
1f318     45 00 00 FF 
1f31c     D4 65 06 F1 | 	add	objptr, ##35796
1f320     32 7B 62 FC | 	wrlong	result1, objptr
1f324     45 00 00 FF 
1f328     D4 65 86 F1 | 	sub	objptr, ##35796
1f32c     32 7B 02 F6 | 	mov	result1, objptr
1f330     00 E0 02 FF 
1f334     00 7A 46 F5 | 	or	result1, ##96468992
1f338     46 00 00 FF 
1f33c     24 64 06 F1 | 	add	objptr, ##35876
1f340     32 7B 62 FC | 	wrlong	result1, objptr
1f344     46 00 00 FF 
1f348     24 64 86 F1 | 	sub	objptr, ##35876
1f34c     32 7B 02 F6 | 	mov	result1, objptr
1f350     00 E8 02 FF 
1f354     00 7A 46 F5 | 	or	result1, ##97517568
1f358     46 00 00 FF 
1f35c     28 64 06 F1 | 	add	objptr, ##35880
1f360     32 7B 62 FC | 	wrlong	result1, objptr
1f364     46 00 00 FF 
1f368     28 64 86 F1 | 	sub	objptr, ##35880
1f36c     32 7B 02 F6 | 	mov	result1, objptr
1f370     00 F0 02 FF 
1f374     00 7A 46 F5 | 	or	result1, ##98566144
1f378     46 00 00 FF 
1f37c     2C 64 06 F1 | 	add	objptr, ##35884
1f380     32 7B 62 FC | 	wrlong	result1, objptr
1f384     46 00 00 FF 
1f388     2C 64 86 F1 | 	sub	objptr, ##35884
1f38c     32 7B 02 F6 | 	mov	result1, objptr
1f390     00 F8 02 FF 
1f394     00 7A 46 F5 | 	or	result1, ##99614720
1f398     45 00 00 FF 
1f39c     D8 65 06 F1 | 	add	objptr, ##35800
1f3a0     32 7B 62 FC | 	wrlong	result1, objptr
1f3a4     45 00 00 FF 
1f3a8     D8 65 86 F1 | 	sub	objptr, ##35800
1f3ac     32 7B 02 F6 | 	mov	result1, objptr
1f3b0     39 7A 26 F4 | 	bith	result1, #57
1f3b4     46 00 00 FF 
1f3b8     3C 64 06 F1 | 	add	objptr, ##35900
1f3bc     32 7B 62 FC | 	wrlong	result1, objptr
1f3c0     46 00 00 FF 
1f3c4     3C 64 86 F1 | 	sub	objptr, ##35900
1f3c8     32 7B 02 F6 | 	mov	result1, objptr
1f3cc     00 08 03 FF 
1f3d0     00 7A 46 F5 | 	or	result1, ##101711872
1f3d4     46 00 00 FF 
1f3d8     44 64 06 F1 | 	add	objptr, ##35908
1f3dc     32 7B 62 FC | 	wrlong	result1, objptr
1f3e0     46 00 00 FF 
1f3e4     44 64 86 F1 | 	sub	objptr, ##35908
1f3e8     32 7B 02 F6 | 	mov	result1, objptr
1f3ec     00 10 03 FF 
1f3f0     00 7A 46 F5 | 	or	result1, ##102760448
1f3f4     46 00 00 FF 
1f3f8     38 64 06 F1 | 	add	objptr, ##35896
1f3fc     32 7B 62 FC | 	wrlong	result1, objptr
1f400     46 00 00 FF 
1f404     38 64 86 F1 | 	sub	objptr, ##35896
1f408     32 7B 02 F6 | 	mov	result1, objptr
1f40c     00 18 03 FF 
1f410     00 7A 46 F5 | 	or	result1, ##103809024
1f414     46 00 00 FF 
1f418     34 64 06 F1 | 	add	objptr, ##35892
1f41c     32 7B 62 FC | 	wrlong	result1, objptr
1f420     46 00 00 FF 
1f424     34 64 86 F1 | 	sub	objptr, ##35892
1f428     32 7B 02 F6 | 	mov	result1, objptr
1f42c     00 20 03 FF 
1f430     00 7A 46 F5 | 	or	result1, ##104857600
1f434     46 00 00 FF 
1f438     30 64 06 F1 | 	add	objptr, ##35888
1f43c     32 7B 62 FC | 	wrlong	result1, objptr
1f440     46 00 00 FF 
1f444     30 64 86 F1 | 	sub	objptr, ##35888
1f448     32 7B 02 F6 | 	mov	result1, objptr
1f44c     00 28 03 FF 
1f450     00 7A 46 F5 | 	or	result1, ##105906176
1f454     46 00 00 FF 
1f458     40 64 06 F1 | 	add	objptr, ##35904
1f45c     32 7B 62 FC | 	wrlong	result1, objptr
1f460     46 00 00 FF 
1f464     40 64 86 F1 | 	sub	objptr, ##35904
1f468     32 7B 02 F6 | 	mov	result1, objptr
1f46c     00 30 03 FF 
1f470     00 7A 46 F5 | 	or	result1, ##106954752
1f474     46 00 00 FF 
1f478     48 64 06 F1 | 	add	objptr, ##35912
1f47c     32 7B 62 FC | 	wrlong	result1, objptr
1f480     46 00 00 FF 
1f484     48 64 86 F1 | 	sub	objptr, ##35912
1f488     32 7B 02 F6 | 	mov	result1, objptr
1f48c     00 38 03 FF 
1f490     00 7A 46 F5 | 	or	result1, ##108003328
1f494     46 00 00 FF 
1f498     4C 64 06 F1 | 	add	objptr, ##35916
1f49c     32 7B 62 FC | 	wrlong	result1, objptr
1f4a0     46 00 00 FF 
1f4a4     4C 64 86 F1 | 	sub	objptr, ##35916
1f4a8     32 7B 02 F6 | 	mov	result1, objptr
1f4ac     00 40 03 FF 
1f4b0     00 7A 46 F5 | 	or	result1, ##109051904
1f4b4     46 00 00 FF 
1f4b8     50 64 06 F1 | 	add	objptr, ##35920
1f4bc     32 7B 62 FC | 	wrlong	result1, objptr
1f4c0     46 00 00 FF 
1f4c4     50 64 86 F1 | 	sub	objptr, ##35920
1f4c8     32 7B 02 F6 | 	mov	result1, objptr
1f4cc     00 48 03 FF 
1f4d0     00 7A 46 F5 | 	or	result1, ##110100480
1f4d4     46 00 00 FF 
1f4d8     58 64 06 F1 | 	add	objptr, ##35928
1f4dc     32 7B 62 FC | 	wrlong	result1, objptr
1f4e0     46 00 00 FF 
1f4e4     58 64 86 F1 | 	sub	objptr, ##35928
1f4e8     32 7B 02 F6 | 	mov	result1, objptr
1f4ec     00 50 03 FF 
1f4f0     00 7A 46 F5 | 	or	result1, ##111149056
1f4f4     46 00 00 FF 
1f4f8     5C 64 06 F1 | 	add	objptr, ##35932
1f4fc     32 7B 62 FC | 	wrlong	result1, objptr
1f500     46 00 00 FF 
1f504     5C 64 86 F1 | 	sub	objptr, ##35932
1f508     32 7B 02 F6 | 	mov	result1, objptr
1f50c     00 58 03 FF 
1f510     00 7A 46 F5 | 	or	result1, ##112197632
1f514     46 00 00 FF 
1f518     60 64 06 F1 | 	add	objptr, ##35936
1f51c     32 7B 62 FC | 	wrlong	result1, objptr
1f520     46 00 00 FF 
1f524     60 64 86 F1 | 	sub	objptr, ##35936
1f528     32 7B 02 F6 | 	mov	result1, objptr
1f52c     00 60 03 FF 
1f530     00 7A 46 F5 | 	or	result1, ##113246208
1f534     46 00 00 FF 
1f538     64 64 06 F1 | 	add	objptr, ##35940
1f53c     32 7B 62 FC | 	wrlong	result1, objptr
1f540     46 00 00 FF 
1f544     64 64 86 F1 | 	sub	objptr, ##35940
1f548     32 7B 02 F6 | 	mov	result1, objptr
1f54c     00 68 03 FF 
1f550     00 7A 46 F5 | 	or	result1, ##114294784
1f554     46 00 00 FF 
1f558     68 64 06 F1 | 	add	objptr, ##35944
1f55c     32 7B 62 FC | 	wrlong	result1, objptr
1f560     46 00 00 FF 
1f564     68 64 86 F1 | 	sub	objptr, ##35944
1f568     32 7B 02 F6 | 	mov	result1, objptr
1f56c     00 70 03 FF 
1f570     00 7A 46 F5 | 	or	result1, ##115343360
1f574     46 00 00 FF 
1f578     6C 64 06 F1 | 	add	objptr, ##35948
1f57c     32 7B 62 FC | 	wrlong	result1, objptr
1f580     46 00 00 FF 
1f584     6C 64 86 F1 | 	sub	objptr, ##35948
1f588     32 7B 02 F6 | 	mov	result1, objptr
1f58c     00 08 01 FF 
1f590     00 7A 46 F5 | 	or	result1, ##34603008
1f594     46 00 00 FF 
1f598     70 64 06 F1 | 	add	objptr, ##35952
1f59c     32 7B 62 FC | 	wrlong	result1, objptr
1f5a0     46 00 00 FF 
1f5a4     70 64 86 F1 | 	sub	objptr, ##35952
1f5a8     32 7B 02 F6 | 	mov	result1, objptr
1f5ac     00 78 03 FF 
1f5b0     00 7A 46 F5 | 	or	result1, ##116391936
1f5b4     46 00 00 FF 
1f5b8     74 64 06 F1 | 	add	objptr, ##35956
1f5bc     32 7B 62 FC | 	wrlong	result1, objptr
1f5c0     46 00 00 FF 
1f5c4     74 64 86 F1 | 	sub	objptr, ##35956
1f5c8     32 7B 02 F6 | 	mov	result1, objptr
1f5cc     58 7A 26 F4 | 	bith	result1, #88
1f5d0     46 00 00 FF 
1f5d4     54 64 06 F1 | 	add	objptr, ##35924
1f5d8     32 7B 62 FC | 	wrlong	result1, objptr
1f5dc     46 00 00 FF 
1f5e0     54 64 86 F1 | 	sub	objptr, ##35924
1f5e4     32 7B 02 F6 | 	mov	result1, objptr
1f5e8     00 88 03 FF 
1f5ec     00 7A 46 F5 | 	or	result1, ##118489088
1f5f0     45 00 00 FF 
1f5f4     4C 64 06 F1 | 	add	objptr, ##35404
1f5f8     32 7B 62 FC | 	wrlong	result1, objptr
1f5fc     45 00 00 FF 
1f600     4C 64 86 F1 | 	sub	objptr, ##35404
1f604     32 7B 02 F6 | 	mov	result1, objptr
1f608     00 90 03 FF 
1f60c     00 7A 46 F5 | 	or	result1, ##119537664
1f610     46 00 00 FF 
1f614     78 64 06 F1 | 	add	objptr, ##35960
1f618     32 7B 62 FC | 	wrlong	result1, objptr
1f61c     46 00 00 FF 
1f620     78 64 86 F1 | 	sub	objptr, ##35960
1f624     32 7B 02 F6 | 	mov	result1, objptr
1f628     00 98 03 FF 
1f62c     00 7A 46 F5 | 	or	result1, ##120586240
1f630     46 00 00 FF 
1f634     7C 64 06 F1 | 	add	objptr, ##35964
1f638     32 7B 62 FC | 	wrlong	result1, objptr
1f63c     46 00 00 FF 
1f640     7C 64 86 F1 | 	sub	objptr, ##35964
1f644     32 7B 02 F6 | 	mov	result1, objptr
1f648     00 A0 03 FF 
1f64c     00 7A 46 F5 | 	or	result1, ##121634816
1f650     46 00 00 FF 
1f654     90 64 06 F1 | 	add	objptr, ##35984
1f658     32 7B 62 FC | 	wrlong	result1, objptr
1f65c     46 00 00 FF 
1f660     90 64 86 F1 | 	sub	objptr, ##35984
1f664     32 7B 02 F6 | 	mov	result1, objptr
1f668     00 A8 03 FF 
1f66c     00 7A 46 F5 | 	or	result1, ##122683392
1f670     46 00 00 FF 
1f674     8C 64 06 F1 | 	add	objptr, ##35980
1f678     32 7B 62 FC | 	wrlong	result1, objptr
1f67c     46 00 00 FF 
1f680     8C 64 86 F1 | 	sub	objptr, ##35980
1f684     32 7B 02 F6 | 	mov	result1, objptr
1f688     00 B0 03 FF 
1f68c     00 7A 46 F5 | 	or	result1, ##123731968
1f690     46 00 00 FF 
1f694     84 64 06 F1 | 	add	objptr, ##35972
1f698     32 7B 62 FC | 	wrlong	result1, objptr
1f69c     46 00 00 FF 
1f6a0     84 64 86 F1 | 	sub	objptr, ##35972
1f6a4     32 7B 02 F6 | 	mov	result1, objptr
1f6a8     00 B8 03 FF 
1f6ac     00 7A 46 F5 | 	or	result1, ##124780544
1f6b0     46 00 00 FF 
1f6b4     80 64 06 F1 | 	add	objptr, ##35968
1f6b8     32 7B 62 FC | 	wrlong	result1, objptr
1f6bc     46 00 00 FF 
1f6c0     80 64 86 F1 | 	sub	objptr, ##35968
1f6c4     32 7B 02 F6 | 	mov	result1, objptr
1f6c8     77 7A 26 F4 | 	bith	result1, #119
1f6cc     46 00 00 FF 
1f6d0     A0 64 06 F1 | 	add	objptr, ##36000
1f6d4     32 7B 62 FC | 	wrlong	result1, objptr
1f6d8     46 00 00 FF 
1f6dc     A0 64 86 F1 | 	sub	objptr, ##36000
1f6e0     32 7B 02 F6 | 	mov	result1, objptr
1f6e4     00 C8 03 FF 
1f6e8     00 7A 46 F5 | 	or	result1, ##126877696
1f6ec     46 00 00 FF 
1f6f0     94 64 06 F1 | 	add	objptr, ##35988
1f6f4     32 7B 62 FC | 	wrlong	result1, objptr
1f6f8     46 00 00 FF 
1f6fc     94 64 86 F1 | 	sub	objptr, ##35988
1f700     32 7B 02 F6 | 	mov	result1, objptr
1f704     00 D0 03 FF 
1f708     00 7A 46 F5 | 	or	result1, ##127926272
1f70c     46 00 00 FF 
1f710     98 64 06 F1 | 	add	objptr, ##35992
1f714     32 7B 62 FC | 	wrlong	result1, objptr
1f718     46 00 00 FF 
1f71c     98 64 86 F1 | 	sub	objptr, ##35992
1f720     32 7B 02 F6 | 	mov	result1, objptr
1f724     00 D8 03 FF 
1f728     00 7A 46 F5 | 	or	result1, ##128974848
1f72c     46 00 00 FF 
1f730     9C 64 06 F1 | 	add	objptr, ##35996
1f734     32 7B 62 FC | 	wrlong	result1, objptr
1f738     46 00 00 FF 
1f73c     9C 64 86 F1 | 	sub	objptr, ##35996
1f740     32 7B 02 F6 | 	mov	result1, objptr
1f744     96 7A 26 F4 | 	bith	result1, #150
1f748     46 00 00 FF 
1f74c     A4 64 06 F1 | 	add	objptr, ##36004
1f750     32 7B 62 FC | 	wrlong	result1, objptr
1f754     46 00 00 FF 
1f758     A4 64 86 F1 | 	sub	objptr, ##36004
1f75c     32 7B 02 F6 | 	mov	result1, objptr
1f760     00 E8 03 FF 
1f764     00 7A 46 F5 | 	or	result1, ##131072000
1f768     46 00 00 FF 
1f76c     A8 64 06 F1 | 	add	objptr, ##36008
1f770     32 7B 62 FC | 	wrlong	result1, objptr
1f774     46 00 00 FF 
1f778     A8 64 86 F1 | 	sub	objptr, ##36008
1f77c     32 7B 02 F6 | 	mov	result1, objptr
1f780     B5 7A 26 F4 | 	bith	result1, #181
1f784     46 00 00 FF 
1f788     AC 64 06 F1 | 	add	objptr, ##36012
1f78c     32 7B 62 FC | 	wrlong	result1, objptr
1f790     46 00 00 FF 
1f794     AC 64 86 F1 | 	sub	objptr, ##36012
1f798     32 7B 02 F6 | 	mov	result1, objptr
1f79c     D4 7A 26 F4 | 	bith	result1, #212
1f7a0     46 00 00 FF 
1f7a4     B0 64 06 F1 | 	add	objptr, ##36016
1f7a8     32 7B 62 FC | 	wrlong	result1, objptr
1f7ac     46 00 00 FF 
1f7b0     B0 64 86 F1 | 	sub	objptr, ##36016
1f7b4     32 7B 02 F6 | 	mov	result1, objptr
1f7b8     1B 7A 26 F4 | 	bith	result1, #27
1f7bc     46 00 00 FF 
1f7c0     B4 64 06 F1 | 	add	objptr, ##36020
1f7c4     32 7B 62 FC | 	wrlong	result1, objptr
1f7c8     46 00 00 FF 
1f7cc     B4 64 86 F1 | 	sub	objptr, ##36020
1f7d0     32 7B 02 F6 | 	mov	result1, objptr
1f7d4     00 08 04 FF 
1f7d8     00 7A 46 F5 | 	or	result1, ##135266304
1f7dc     46 00 00 FF 
1f7e0     B8 64 06 F1 | 	add	objptr, ##36024
1f7e4     32 7B 62 FC | 	wrlong	result1, objptr
1f7e8     46 00 00 FF 
1f7ec     B8 64 86 F1 | 	sub	objptr, ##36024
1f7f0     32 7B 02 F6 | 	mov	result1, objptr
1f7f4     00 10 04 FF 
1f7f8     00 7A 46 F5 | 	or	result1, ##136314880
1f7fc     46 00 00 FF 
1f800     C0 64 06 F1 | 	add	objptr, ##36032
1f804     32 7B 62 FC | 	wrlong	result1, objptr
1f808     46 00 00 FF 
1f80c     C0 64 86 F1 | 	sub	objptr, ##36032
1f810     32 7B 02 F6 | 	mov	result1, objptr
1f814     00 18 04 FF 
1f818     00 7A 46 F5 | 	or	result1, ##137363456
1f81c     46 00 00 FF 
1f820     C4 64 06 F1 | 	add	objptr, ##36036
1f824     32 7B 62 FC | 	wrlong	result1, objptr
1f828     46 00 00 FF 
1f82c     C4 64 86 F1 | 	sub	objptr, ##36036
1f830     32 7B 02 F6 | 	mov	result1, objptr
1f834     00 20 04 FF 
1f838     00 7A 46 F5 | 	or	result1, ##138412032
1f83c     46 00 00 FF 
1f840     C8 64 06 F1 | 	add	objptr, ##36040
1f844     32 7B 62 FC | 	wrlong	result1, objptr
1f848     46 00 00 FF 
1f84c     C8 64 86 F1 | 	sub	objptr, ##36040
1f850     32 7B 02 F6 | 	mov	result1, objptr
1f854     00 28 04 FF 
1f858     00 7A 46 F5 | 	or	result1, ##139460608
1f85c     46 00 00 FF 
1f860     BC 64 06 F1 | 	add	objptr, ##36028
1f864     32 7B 62 FC | 	wrlong	result1, objptr
1f868     46 00 00 FF 
1f86c     BC 64 86 F1 | 	sub	objptr, ##36028
1f870     32 7B 02 F6 | 	mov	result1, objptr
1f874     00 30 04 FF 
1f878     00 7A 46 F5 | 	or	result1, ##140509184
1f87c     46 00 00 FF 
1f880     CC 64 06 F1 | 	add	objptr, ##36044
1f884     32 7B 62 FC | 	wrlong	result1, objptr
1f888     46 00 00 FF 
1f88c     CC 64 86 F1 | 	sub	objptr, ##36044
1f890     32 7B 02 F6 | 	mov	result1, objptr
1f894     00 38 04 FF 
1f898     00 7A 46 F5 | 	or	result1, ##141557760
1f89c     46 00 00 FF 
1f8a0     00 65 06 F1 | 	add	objptr, ##36096
1f8a4     32 7B 62 FC | 	wrlong	result1, objptr
1f8a8     46 00 00 FF 
1f8ac     00 65 86 F1 | 	sub	objptr, ##36096
1f8b0     32 7B 02 F6 | 	mov	result1, objptr
1f8b4     00 40 04 FF 
1f8b8     00 7A 46 F5 | 	or	result1, ##142606336
1f8bc     46 00 00 FF 
1f8c0     F8 64 06 F1 | 	add	objptr, ##36088
1f8c4     32 7B 62 FC | 	wrlong	result1, objptr
1f8c8     46 00 00 FF 
1f8cc     F8 64 86 F1 | 	sub	objptr, ##36088
1f8d0     32 7B 02 F6 | 	mov	result1, objptr
1f8d4     00 48 04 FF 
1f8d8     00 7A 46 F5 | 	or	result1, ##143654912
1f8dc     46 00 00 FF 
1f8e0     D0 64 06 F1 | 	add	objptr, ##36048
1f8e4     32 7B 62 FC | 	wrlong	result1, objptr
1f8e8     46 00 00 FF 
1f8ec     D0 64 86 F1 | 	sub	objptr, ##36048
1f8f0     32 7B 02 F6 | 	mov	result1, objptr
1f8f4     00 50 04 FF 
1f8f8     00 7A 46 F5 | 	or	result1, ##144703488
1f8fc     46 00 00 FF 
1f900     D4 64 06 F1 | 	add	objptr, ##36052
1f904     32 7B 62 FC | 	wrlong	result1, objptr
1f908     46 00 00 FF 
1f90c     D4 64 86 F1 | 	sub	objptr, ##36052
1f910     32 7B 02 F6 | 	mov	result1, objptr
1f914     00 58 04 FF 
1f918     00 7A 46 F5 | 	or	result1, ##145752064
1f91c     46 00 00 FF 
1f920     F0 64 06 F1 | 	add	objptr, ##36080
1f924     32 7B 62 FC | 	wrlong	result1, objptr
1f928     46 00 00 FF 
1f92c     F0 64 86 F1 | 	sub	objptr, ##36080
1f930     32 7B 02 F6 | 	mov	result1, objptr
1f934     00 60 04 FF 
1f938     00 7A 46 F5 | 	or	result1, ##146800640
1f93c     46 00 00 FF 
1f940     F4 64 06 F1 | 	add	objptr, ##36084
1f944     32 7B 62 FC | 	wrlong	result1, objptr
1f948     46 00 00 FF 
1f94c     F4 64 86 F1 | 	sub	objptr, ##36084
1f950     32 7B 02 F6 | 	mov	result1, objptr
1f954     00 68 04 FF 
1f958     00 7A 46 F5 | 	or	result1, ##147849216
1f95c     46 00 00 FF 
1f960     10 65 06 F1 | 	add	objptr, ##36112
1f964     32 7B 62 FC | 	wrlong	result1, objptr
1f968     46 00 00 FF 
1f96c     10 65 86 F1 | 	sub	objptr, ##36112
1f970     32 7B 02 F6 | 	mov	result1, objptr
1f974     00 70 04 FF 
1f978     00 7A 46 F5 | 	or	result1, ##148897792
1f97c     46 00 00 FF 
1f980     0C 65 06 F1 | 	add	objptr, ##36108
1f984     32 7B 62 FC | 	wrlong	result1, objptr
1f988     46 00 00 FF 
1f98c     0C 65 86 F1 | 	sub	objptr, ##36108
1f990     32 7B 02 F6 | 	mov	result1, objptr
1f994     00 78 04 FF 
1f998     00 7A 46 F5 | 	or	result1, ##149946368
1f99c     46 00 00 FF 
1f9a0     1C 65 06 F1 | 	add	objptr, ##36124
1f9a4     32 7B 62 FC | 	wrlong	result1, objptr
1f9a8     46 00 00 FF 
1f9ac     1C 65 86 F1 | 	sub	objptr, ##36124
1f9b0     32 7B 02 F6 | 	mov	result1, objptr
1f9b4     00 80 04 FF 
1f9b8     00 7A 46 F5 | 	or	result1, ##150994944
1f9bc     46 00 00 FF 
1f9c0     E8 64 06 F1 | 	add	objptr, ##36072
1f9c4     32 7B 62 FC | 	wrlong	result1, objptr
1f9c8     46 00 00 FF 
1f9cc     E8 64 86 F1 | 	sub	objptr, ##36072
1f9d0     32 7B 02 F6 | 	mov	result1, objptr
1f9d4     00 88 04 FF 
1f9d8     00 7A 46 F5 | 	or	result1, ##152043520
1f9dc     46 00 00 FF 
1f9e0     18 65 06 F1 | 	add	objptr, ##36120
1f9e4     32 7B 62 FC | 	wrlong	result1, objptr
1f9e8     46 00 00 FF 
1f9ec     18 65 86 F1 | 	sub	objptr, ##36120
1f9f0     32 7B 02 F6 | 	mov	result1, objptr
1f9f4     00 90 04 FF 
1f9f8     00 7A 46 F5 | 	or	result1, ##153092096
1f9fc     46 00 00 FF 
1fa00     08 65 06 F1 | 	add	objptr, ##36104
1fa04     32 7B 62 FC | 	wrlong	result1, objptr
1fa08     46 00 00 FF 
1fa0c     08 65 86 F1 | 	sub	objptr, ##36104
1fa10     32 7B 02 F6 | 	mov	result1, objptr
1fa14     00 98 04 FF 
1fa18     00 7A 46 F5 | 	or	result1, ##154140672
1fa1c     45 00 00 FF 
1fa20     B8 64 06 F1 | 	add	objptr, ##35512
1fa24     32 7B 62 FC | 	wrlong	result1, objptr
1fa28     45 00 00 FF 
1fa2c     B8 64 86 F1 | 	sub	objptr, ##35512
1fa30     32 7B 02 F6 | 	mov	result1, objptr
1fa34     00 A0 04 FF 
1fa38     00 7A 46 F5 | 	or	result1, ##155189248
1fa3c     46 00 00 FF 
1fa40     D8 64 06 F1 | 	add	objptr, ##36056
1fa44     32 7B 62 FC | 	wrlong	result1, objptr
1fa48     46 00 00 FF 
1fa4c     D8 64 86 F1 | 	sub	objptr, ##36056
1fa50     32 7B 02 F6 | 	mov	result1, objptr
1fa54     00 08 01 FF 
1fa58     00 7A 46 F5 | 	or	result1, ##34603008
1fa5c     46 00 00 FF 
1fa60     E0 64 06 F1 | 	add	objptr, ##36064
1fa64     32 7B 62 FC | 	wrlong	result1, objptr
1fa68     46 00 00 FF 
1fa6c     E0 64 86 F1 | 	sub	objptr, ##36064
1fa70     32 7B 02 F6 | 	mov	result1, objptr
1fa74     00 A8 04 FF 
1fa78     00 7A 46 F5 | 	or	result1, ##156237824
1fa7c     46 00 00 FF 
1fa80     DC 64 06 F1 | 	add	objptr, ##36060
1fa84     32 7B 62 FC | 	wrlong	result1, objptr
1fa88     46 00 00 FF 
1fa8c     DC 64 86 F1 | 	sub	objptr, ##36060
1fa90     32 7B 02 F6 | 	mov	result1, objptr
1fa94     00 B0 04 FF 
1fa98     00 7A 46 F5 | 	or	result1, ##157286400
1fa9c     46 00 00 FF 
1faa0     20 65 06 F1 | 	add	objptr, ##36128
1faa4     32 7B 62 FC | 	wrlong	result1, objptr
1faa8     46 00 00 FF 
1faac     20 65 86 F1 | 	sub	objptr, ##36128
1fab0     32 7B 02 F6 | 	mov	result1, objptr
1fab4     00 B8 04 FF 
1fab8     00 7A 46 F5 | 	or	result1, ##158334976
1fabc     46 00 00 FF 
1fac0     24 65 06 F1 | 	add	objptr, ##36132
1fac4     32 7B 62 FC | 	wrlong	result1, objptr
1fac8     46 00 00 FF 
1facc     24 65 86 F1 | 	sub	objptr, ##36132
1fad0     32 7B 02 F6 | 	mov	result1, objptr
1fad4     00 C0 04 FF 
1fad8     00 7A 46 F5 | 	or	result1, ##159383552
1fadc     46 00 00 FF 
1fae0     28 65 06 F1 | 	add	objptr, ##36136
1fae4     32 7B 62 FC | 	wrlong	result1, objptr
1fae8     46 00 00 FF 
1faec     28 65 86 F1 | 	sub	objptr, ##36136
1faf0     32 7B 02 F6 | 	mov	result1, objptr
1faf4     00 C8 04 FF 
1faf8     00 7A 46 F5 | 	or	result1, ##160432128
1fafc     46 00 00 FF 
1fb00     2C 65 06 F1 | 	add	objptr, ##36140
1fb04     32 7B 62 FC | 	wrlong	result1, objptr
1fb08     46 00 00 FF 
1fb0c     2C 65 86 F1 | 	sub	objptr, ##36140
1fb10     32 7B 02 F6 | 	mov	result1, objptr
1fb14     00 D0 04 FF 
1fb18     00 7A 46 F5 | 	or	result1, ##161480704
1fb1c     46 00 00 FF 
1fb20     34 65 06 F1 | 	add	objptr, ##36148
1fb24     32 7B 62 FC | 	wrlong	result1, objptr
1fb28     46 00 00 FF 
1fb2c     34 65 86 F1 | 	sub	objptr, ##36148
1fb30     32 7B 02 F6 | 	mov	result1, objptr
1fb34     00 D8 04 FF 
1fb38     00 7A 46 F5 | 	or	result1, ##162529280
1fb3c     46 00 00 FF 
1fb40     38 65 06 F1 | 	add	objptr, ##36152
1fb44     32 7B 62 FC | 	wrlong	result1, objptr
1fb48     46 00 00 FF 
1fb4c     38 65 86 F1 | 	sub	objptr, ##36152
1fb50     32 7B 02 F6 | 	mov	result1, objptr
1fb54     00 E0 04 FF 
1fb58     00 7A 46 F5 | 	or	result1, ##163577856
1fb5c     46 00 00 FF 
1fb60     3C 65 06 F1 | 	add	objptr, ##36156
1fb64     32 7B 62 FC | 	wrlong	result1, objptr
1fb68     46 00 00 FF 
1fb6c     3C 65 86 F1 | 	sub	objptr, ##36156
1fb70     32 7B 02 F6 | 	mov	result1, objptr
1fb74     00 E8 04 FF 
1fb78     00 7A 46 F5 | 	or	result1, ##164626432
1fb7c     46 00 00 FF 
1fb80     5C 65 06 F1 | 	add	objptr, ##36188
1fb84     32 7B 62 FC | 	wrlong	result1, objptr
1fb88     46 00 00 FF 
1fb8c     5C 65 86 F1 | 	sub	objptr, ##36188
1fb90     32 7B 02 F6 | 	mov	result1, objptr
1fb94     00 F0 04 FF 
1fb98     00 7A 46 F5 | 	or	result1, ##165675008
1fb9c     46 00 00 FF 
1fba0     58 65 06 F1 | 	add	objptr, ##36184
1fba4     32 7B 62 FC | 	wrlong	result1, objptr
1fba8     46 00 00 FF 
1fbac     58 65 86 F1 | 	sub	objptr, ##36184
1fbb0     32 7B 02 F6 | 	mov	result1, objptr
1fbb4     00 F8 04 FF 
1fbb8     00 7A 46 F5 | 	or	result1, ##166723584
1fbbc     46 00 00 FF 
1fbc0     14 65 06 F1 | 	add	objptr, ##36116
1fbc4     32 7B 62 FC | 	wrlong	result1, objptr
1fbc8     46 00 00 FF 
1fbcc     14 65 86 F1 | 	sub	objptr, ##36116
1fbd0     32 7B 02 F6 | 	mov	result1, objptr
1fbd4     00 00 05 FF 
1fbd8     00 7A 46 F5 | 	or	result1, ##167772160
1fbdc     46 00 00 FF 
1fbe0     04 65 06 F1 | 	add	objptr, ##36100
1fbe4     32 7B 62 FC | 	wrlong	result1, objptr
1fbe8     46 00 00 FF 
1fbec     04 65 86 F1 | 	sub	objptr, ##36100
1fbf0     32 7B 02 F6 | 	mov	result1, objptr
1fbf4     00 08 05 FF 
1fbf8     00 7A 46 F5 | 	or	result1, ##168820736
1fbfc     46 00 00 FF 
1fc00     40 65 06 F1 | 	add	objptr, ##36160
1fc04     32 7B 62 FC | 	wrlong	result1, objptr
1fc08     46 00 00 FF 
1fc0c     40 65 86 F1 | 	sub	objptr, ##36160
1fc10     32 7B 02 F6 | 	mov	result1, objptr
1fc14     00 10 05 FF 
1fc18     00 7A 46 F5 | 	or	result1, ##169869312
1fc1c     46 00 00 FF 
1fc20     44 65 06 F1 | 	add	objptr, ##36164
1fc24     32 7B 62 FC | 	wrlong	result1, objptr
1fc28     46 00 00 FF 
1fc2c     44 65 86 F1 | 	sub	objptr, ##36164
1fc30     32 7B 02 F6 | 	mov	result1, objptr
1fc34     00 18 05 FF 
1fc38     00 7A 46 F5 | 	or	result1, ##170917888
1fc3c     46 00 00 FF 
1fc40     48 65 06 F1 | 	add	objptr, ##36168
1fc44     32 7B 62 FC | 	wrlong	result1, objptr
1fc48     46 00 00 FF 
1fc4c     48 65 86 F1 | 	sub	objptr, ##36168
1fc50     32 7B 02 F6 | 	mov	result1, objptr
1fc54     00 20 05 FF 
1fc58     00 7A 46 F5 | 	or	result1, ##171966464
1fc5c     46 00 00 FF 
1fc60     4C 65 06 F1 | 	add	objptr, ##36172
1fc64     32 7B 62 FC | 	wrlong	result1, objptr
1fc68     46 00 00 FF 
1fc6c     4C 65 86 F1 | 	sub	objptr, ##36172
1fc70     32 7B 02 F6 | 	mov	result1, objptr
1fc74     00 28 05 FF 
1fc78     00 7A 46 F5 | 	or	result1, ##173015040
1fc7c     46 00 00 FF 
1fc80     50 65 06 F1 | 	add	objptr, ##36176
1fc84     32 7B 62 FC | 	wrlong	result1, objptr
1fc88     46 00 00 FF 
1fc8c     50 65 86 F1 | 	sub	objptr, ##36176
1fc90     32 7B 02 F6 | 	mov	result1, objptr
1fc94     00 30 05 FF 
1fc98     00 7A 46 F5 | 	or	result1, ##174063616
1fc9c     46 00 00 FF 
1fca0     68 65 06 F1 | 	add	objptr, ##36200
1fca4     32 7B 62 FC | 	wrlong	result1, objptr
1fca8     46 00 00 FF 
1fcac     68 65 86 F1 | 	sub	objptr, ##36200
1fcb0     32 7B 02 F6 | 	mov	result1, objptr
1fcb4     00 38 05 FF 
1fcb8     00 7A 46 F5 | 	or	result1, ##175112192
1fcbc     46 00 00 FF 
1fcc0     54 65 06 F1 | 	add	objptr, ##36180
1fcc4     32 7B 62 FC | 	wrlong	result1, objptr
1fcc8     46 00 00 FF 
1fccc     54 65 86 F1 | 	sub	objptr, ##36180
1fcd0     32 7B 02 F6 | 	mov	result1, objptr
1fcd4     00 40 05 FF 
1fcd8     00 7A 46 F5 | 	or	result1, ##176160768
1fcdc     46 00 00 FF 
1fce0     60 65 06 F1 | 	add	objptr, ##36192
1fce4     32 7B 62 FC | 	wrlong	result1, objptr
1fce8     46 00 00 FF 
1fcec     60 65 86 F1 | 	sub	objptr, ##36192
1fcf0     32 7B 02 F6 | 	mov	result1, objptr
1fcf4     00 48 05 FF 
1fcf8     00 7A 46 F5 | 	or	result1, ##177209344
1fcfc     46 00 00 FF 
1fd00     64 65 06 F1 | 	add	objptr, ##36196
1fd04     32 7B 62 FC | 	wrlong	result1, objptr
1fd08     46 00 00 FF 
1fd0c     64 65 86 F1 | 	sub	objptr, ##36196
1fd10     32 7B 02 F6 | 	mov	result1, objptr
1fd14     00 50 05 FF 
1fd18     00 7A 46 F5 | 	or	result1, ##178257920
1fd1c     46 00 00 FF 
1fd20     6C 65 06 F1 | 	add	objptr, ##36204
1fd24     32 7B 62 FC | 	wrlong	result1, objptr
1fd28     46 00 00 FF 
1fd2c     6C 65 86 F1 | 	sub	objptr, ##36204
1fd30     32 7B 02 F6 | 	mov	result1, objptr
1fd34     00 58 05 FF 
1fd38     00 7A 46 F5 | 	or	result1, ##179306496
1fd3c     46 00 00 FF 
1fd40     70 65 06 F1 | 	add	objptr, ##36208
1fd44     32 7B 62 FC | 	wrlong	result1, objptr
1fd48     46 00 00 FF 
1fd4c     70 65 86 F1 | 	sub	objptr, ##36208
1fd50     32 7B 02 F6 | 	mov	result1, objptr
1fd54     00 60 05 FF 
1fd58     00 7A 46 F5 | 	or	result1, ##180355072
1fd5c     46 00 00 FF 
1fd60     88 64 06 F1 | 	add	objptr, ##35976
1fd64     32 7B 62 FC | 	wrlong	result1, objptr
1fd68     46 00 00 FF 
1fd6c     88 64 86 F1 | 	sub	objptr, ##35976
1fd70                 | _init_commands_ret
1fd70     2D 00 64 FD | 	ret
1fd74                 | 
1fd74                 | ' 
1fd74                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
1fd74                 | ' 
1fd74                 | ' sub init_audio
1fd74                 | _init_audio
1fd74     07 CA 05 F6 | 	mov	COUNT_, #7
1fd78     E8 00 A0 FD | 	call	#pushregs_
1fd7c     00 C0 1F FF 
1fd80     00 A6 06 F6 | 	mov	local01, ##1065353216
1fd84                 | ' 
1fd84                 | ' for i=0 to 1023 : psdpoke  2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1fd84     00 A8 06 F6 | 	mov	local02, #0
1fd88                 | LR__2590
1fd88     54 AB 02 F6 | 	mov	local03, local02
1fd8c     01 AA 66 F0 | 	shl	local03, #1
1fd90     58 7F 23 FF 
1fd94     00 AC 06 F6 | 	mov	local04, ##1191096320
1fd98     54 93 52 F6 | 	abs	arg01, local02 wc
1fd9c     1F AE C6 C9 |  if_b	decod	local05, #31
1fda0     00 AE 06 36 |  if_ae	mov	local05, #0
1fda4     B4 6C B0 FD | 	call	#__system___float_fromuns
1fda8     57 7B 62 F5 | 	xor	result1, local05
1fdac     3D 93 02 F6 | 	mov	arg01, result1
1fdb0     87 24 20 FF 
1fdb4     DB 95 06 F6 | 	mov	arg02, ##1078530011
1fdb8     A4 70 B0 FD | 	call	#__system___float_mul
1fdbc     3D 93 02 F6 | 	mov	arg01, result1
1fdc0     00 00 22 FF 
1fdc4     00 94 06 F6 | 	mov	arg02, ##1140850688
1fdc8     98 72 B0 FD | 	call	#__system___float_div
1fdcc     3D 93 02 F6 | 	mov	arg01, result1
1fdd0     FC 79 B0 FD | 	call	#__system____builtin_sinf
1fdd4     3D 95 02 F6 | 	mov	arg02, result1
1fdd8     56 93 02 F6 | 	mov	arg01, local04
1fddc     80 70 B0 FD | 	call	#__system___float_mul
1fde0     3D 93 02 F6 | 	mov	arg01, result1
1fde4     01 94 06 F6 | 	mov	arg02, #1
1fde8     3C 75 B0 FD | 	call	#__system___float_tointeger
1fdec     3D 95 02 F6 | 	mov	arg02, result1
1fdf0     55 93 02 F6 | 	mov	arg01, local03
1fdf4     84 0D B0 FD | 	call	#_psdpoke
1fdf8     01 A8 06 F1 | 	add	local02, #1
1fdfc     02 00 00 FF 
1fe00     00 A8 56 F2 | 	cmps	local02, ##1024 wc
1fe04     80 FF 9F CD |  if_b	jmp	#LR__2590
1fe08                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1fe08     00 A8 06 F6 | 	mov	local02, #0
1fe0c                 | LR__2591
1fe0c     54 95 02 F6 | 	mov	arg02, local02
1fe10     01 94 66 F0 | 	shl	arg02, #1
1fe14     0B 92 C6 F9 | 	decod	arg01, #11
1fe18     4A 93 02 F1 | 	add	arg01, arg02
1fe1c     54 AD 02 F6 | 	mov	local04, local02
1fe20     07 AC 66 F0 | 	shl	local04, #7
1fe24     54 AD 82 F1 | 	sub	local04, local02
1fe28     C0 FF 7F FF 
1fe2c     00 95 06 F6 | 	mov	arg02, ##-32512
1fe30     56 95 02 F1 | 	add	arg02, local04
1fe34     44 0D B0 FD | 	call	#_psdpoke
1fe38     09 AC C6 F9 | 	decod	local04, #9
1fe3c     54 AD 02 F1 | 	add	local04, local02
1fe40     01 AC 66 F0 | 	shl	local04, #1
1fe44     0B 92 C6 F9 | 	decod	arg01, #11
1fe48     56 93 02 F1 | 	add	arg01, local04
1fe4c     54 AF 02 F6 | 	mov	local05, local02
1fe50     07 AE 66 F0 | 	shl	local05, #7
1fe54     54 AF 82 F1 | 	sub	local05, local02
1fe58     3F 00 00 FF 
1fe5c     00 95 06 F6 | 	mov	arg02, ##32512
1fe60     57 95 82 F1 | 	sub	arg02, local05
1fe64     14 0D B0 FD | 	call	#_psdpoke
1fe68     01 A8 06 F1 | 	add	local02, #1
1fe6c     01 00 00 FF 
1fe70     00 A8 56 F2 | 	cmps	local02, ##512 wc
1fe74     94 FF 9F CD |  if_b	jmp	#LR__2591
1fe78                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1fe78     00 A8 06 F6 | 	mov	local02, #0
1fe7c                 | LR__2592
1fe7c     54 AF 02 F6 | 	mov	local05, local02
1fe80     01 AE 66 F0 | 	shl	local05, #1
1fe84     0C 92 C6 F9 | 	decod	arg01, #12
1fe88     57 93 02 F1 | 	add	arg01, local05
1fe8c     54 AF 02 F6 | 	mov	local05, local02
1fe90     06 AE 66 F0 | 	shl	local05, #6
1fe94     54 AF 82 F1 | 	sub	local05, local02
1fe98     C1 FF 7F FF 
1fe9c     00 94 06 F6 | 	mov	arg02, ##-32256
1fea0     57 95 02 F1 | 	add	arg02, local05
1fea4     D4 0C B0 FD | 	call	#_psdpoke
1fea8     01 A8 06 F1 | 	add	local02, #1
1feac     02 00 00 FF 
1feb0     00 A8 56 F2 | 	cmps	local02, ##1024 wc
1feb4     C4 FF 9F CD |  if_b	jmp	#LR__2592
1feb8                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1feb8     00 A8 06 F6 | 	mov	local02, #0
1febc                 | LR__2593
1febc     54 95 02 F6 | 	mov	arg02, local02
1fec0     01 94 66 F0 | 	shl	arg02, #1
1fec4     0C 00 00 FF 
1fec8     00 92 06 F6 | 	mov	arg01, ##6144
1fecc     4A 93 02 F1 | 	add	arg01, arg02
1fed0     C0 FF 7F FF 
1fed4     A8 94 06 F6 | 	mov	arg02, ##-32600
1fed8     A0 0C B0 FD | 	call	#_psdpoke
1fedc     01 A8 06 F1 | 	add	local02, #1
1fee0     80 A8 56 F2 | 	cmps	local02, #128 wc
1fee4     D4 FF 9F CD |  if_b	jmp	#LR__2593
1fee8     80 A8 06 F6 | 	mov	local02, #128
1feec                 | LR__2594
1feec     54 95 02 F6 | 	mov	arg02, local02
1fef0     01 94 66 F0 | 	shl	arg02, #1
1fef4     0C 00 00 FF 
1fef8     00 92 06 F6 | 	mov	arg01, ##6144
1fefc     4A 93 02 F1 | 	add	arg01, arg02
1ff00     3F 00 00 FF 
1ff04     58 95 06 F6 | 	mov	arg02, ##32600
1ff08     70 0C B0 FD | 	call	#_psdpoke
1ff0c     01 A8 06 F1 | 	add	local02, #1
1ff10     02 00 00 FF 
1ff14     00 A8 16 F2 | 	cmp	local02, ##1024 wc
1ff18     D0 FF 9F CD |  if_b	jmp	#LR__2594
1ff1c                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1ff1c     00 A8 06 F6 | 	mov	local02, #0
1ff20                 | LR__2595
1ff20     54 95 02 F6 | 	mov	arg02, local02
1ff24     01 94 66 F0 | 	shl	arg02, #1
1ff28     0D 92 C6 F9 | 	decod	arg01, #13
1ff2c     4A 93 02 F1 | 	add	arg01, arg02
1ff30     C0 FF 7F FF 
1ff34     A8 94 06 F6 | 	mov	arg02, ##-32600
1ff38     40 0C B0 FD | 	call	#_psdpoke
1ff3c     01 A8 06 F1 | 	add	local02, #1
1ff40     01 00 00 FF 
1ff44     00 A8 56 F2 | 	cmps	local02, ##512 wc
1ff48     D4 FF 9F CD |  if_b	jmp	#LR__2595
1ff4c     09 A8 C6 F9 | 	decod	local02, #9
1ff50                 | LR__2596
1ff50     54 95 02 F6 | 	mov	arg02, local02
1ff54     01 94 66 F0 | 	shl	arg02, #1
1ff58     0D 92 C6 F9 | 	decod	arg01, #13
1ff5c     4A 93 02 F1 | 	add	arg01, arg02
1ff60     3F 00 00 FF 
1ff64     58 95 06 F6 | 	mov	arg02, ##32600
1ff68     10 0C B0 FD | 	call	#_psdpoke
1ff6c     01 A8 06 F1 | 	add	local02, #1
1ff70     02 00 00 FF 
1ff74     00 A8 16 F2 | 	cmp	local02, ##1024 wc
1ff78     D4 FF 9F CD |  if_b	jmp	#LR__2596
1ff7c                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1ff7c     00 A8 06 F6 | 	mov	local02, #0
1ff80                 | LR__2597
1ff80     54 95 02 F6 | 	mov	arg02, local02
1ff84     01 94 66 F0 | 	shl	arg02, #1
1ff88     14 00 00 FF 
1ff8c     00 92 06 F6 | 	mov	arg01, ##10240
1ff90     4A 93 02 F1 | 	add	arg01, arg02
1ff94     C0 FF 7F FF 
1ff98     A8 94 06 F6 | 	mov	arg02, ##-32600
1ff9c     DC 0B B0 FD | 	call	#_psdpoke
1ffa0     01 A8 06 F1 | 	add	local02, #1
1ffa4     00 A9 56 F2 | 	cmps	local02, #256 wc
1ffa8     D4 FF 9F CD |  if_b	jmp	#LR__2597
1ffac     00 A9 06 F6 | 	mov	local02, #256
1ffb0                 | LR__2598
1ffb0     54 95 02 F6 | 	mov	arg02, local02
1ffb4     01 94 66 F0 | 	shl	arg02, #1
1ffb8     14 00 00 FF 
1ffbc     00 92 06 F6 | 	mov	arg01, ##10240
1ffc0     4A 93 02 F1 | 	add	arg01, arg02
1ffc4     3F 00 00 FF 
1ffc8     58 95 06 F6 | 	mov	arg02, ##32600
1ffcc     AC 0B B0 FD | 	call	#_psdpoke
1ffd0     01 A8 06 F1 | 	add	local02, #1
1ffd4     02 00 00 FF 
1ffd8     00 A8 16 F2 | 	cmp	local02, ##1024 wc
1ffdc     D0 FF 9F CD |  if_b	jmp	#LR__2598
1ffe0                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1ffe0     18 00 00 FF 
1ffe4     00 A8 06 F6 | 	mov	local02, ##12288
1ffe8                 | LR__2599
1ffe8     54 93 02 F6 | 	mov	arg01, local02
1ffec     00 94 06 F6 | 	mov	arg02, #0
1fff0     3C 0B B0 FD | 	call	#_pslpoke
1fff4     04 A8 06 F1 | 	add	local02, #4
1fff8     77 00 00 FF 
1fffc     FD A9 56 F2 | 	cmps	local02, ##61437 wc
20000     E4 FF 9F CD |  if_b	jmp	#LR__2599
20004                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
20004     00 A8 06 F6 | 	mov	local02, #0
20008                 | LR__2600
20008     54 95 02 F6 | 	mov	arg02, local02
2000c     01 94 66 F0 | 	shl	arg02, #1
20010     78 00 00 FF 
20014     00 AA 06 F6 | 	mov	local03, ##61440
20018     4A AB 02 F1 | 	add	local03, arg02
2001c     35 93 02 F6 | 	mov	arg01, ptr__dat__
20020     12 00 00 FF 
20024     CA 92 06 F1 | 	add	arg01, ##9418
20028     54 95 02 F6 | 	mov	arg02, local02
2002c     01 94 66 F0 | 	shl	arg02, #1
20030     4A 93 02 F1 | 	add	arg01, arg02
20034     49 95 E2 FA | 	rdword	arg02, arg01
20038     55 93 02 F6 | 	mov	arg01, local03
2003c     3C 0B B0 FD | 	call	#_psdpoke
20040     01 A8 06 F1 | 	add	local02, #1
20044     02 00 00 FF 
20048     00 A8 56 F2 | 	cmps	local02, ##1024 wc
2004c     B8 FF 9F CD |  if_b	jmp	#LR__2600
20050                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
20050     00 A8 06 F6 | 	mov	local02, #0
20054                 | LR__2601
20054     54 95 02 F6 | 	mov	arg02, local02
20058     01 94 66 F0 | 	shl	arg02, #1
2005c     7C 00 00 FF 
20060     00 AA 06 F6 | 	mov	local03, ##63488
20064     4A AB 02 F1 | 	add	local03, arg02
20068     35 93 02 F6 | 	mov	arg01, ptr__dat__
2006c     0E 00 00 FF 
20070     BA 92 06 F1 | 	add	arg01, ##7354
20074     54 95 02 F6 | 	mov	arg02, local02
20078     01 94 66 F0 | 	shl	arg02, #1
2007c     4A 93 02 F1 | 	add	arg01, arg02
20080     49 95 E2 FA | 	rdword	arg02, arg01
20084     55 93 02 F6 | 	mov	arg01, local03
20088     F0 0A B0 FD | 	call	#_psdpoke
2008c     01 A8 06 F1 | 	add	local02, #1
20090     02 00 00 FF 
20094     00 A8 56 F2 | 	cmps	local02, ##1024 wc
20098     B8 FF 9F CD |  if_b	jmp	#LR__2601
2009c                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
2009c     00 A8 06 F6 | 	mov	local02, #0
200a0     0E 00 00 FF 
200a4     38 64 06 F1 | 	add	objptr, ##7224
200a8     D7 18 48 FB | 	callpa	#(@LR__2603-@LR__2602)>>2,fcache_load_ptr_
200ac                 | LR__2602
200ac     54 AB 02 F6 | 	mov	local03, local02
200b0     01 AA 66 F0 | 	shl	local03, #1
200b4     32 AB 02 F1 | 	add	local03, objptr
200b8     54 B1 02 F6 | 	mov	local06, local02
200bc     08 B0 66 F0 | 	shl	local06, #8
200c0     7F 00 00 FF 
200c4     00 B3 06 F6 | 	mov	local07, ##65280
200c8     58 B3 82 F1 | 	sub	local07, local06
200cc     55 B3 52 FC | 	wrword	local07, local03
200d0     01 A8 06 F1 | 	add	local02, #1
200d4     00 A9 56 F2 | 	cmps	local02, #256 wc
200d8     D0 FF 9F CD |  if_b	jmp	#LR__2602
200dc                 | LR__2603
200dc     0E 00 00 FF 
200e0     38 64 86 F1 | 	sub	objptr, ##7224
200e4                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
200e4     00 A8 06 F6 | 	mov	local02, #0
200e8                 | LR__2604
200e8     54 AB 02 F6 | 	mov	local03, local02
200ec     01 AA 66 F0 | 	shl	local03, #1
200f0     32 AF 02 F6 | 	mov	local05, objptr
200f4     0F 00 00 FF 
200f8     38 AE 06 F1 | 	add	local05, ##7736
200fc     57 AB 02 F1 | 	add	local03, local05
20100     80 BF 23 FF 
20104     00 92 06 F6 | 	mov	arg01, ##1199505408
20108     53 95 02 F6 | 	mov	arg02, local01
2010c     50 6D B0 FD | 	call	#__system___float_mul
20110     3D 93 02 F6 | 	mov	arg01, result1
20114     01 94 06 F6 | 	mov	arg02, #1
20118     0C 72 B0 FD | 	call	#__system___float_tointeger
2011c     55 7B 52 FC | 	wrword	result1, local03
20120     53 93 02 F6 | 	mov	arg01, local01
20124     CC BC 1F FF 
20128     9A 95 06 F6 | 	mov	arg02, ##1064933786
2012c     30 6D B0 FD | 	call	#__system___float_mul
20130     3D A7 02 F6 | 	mov	local01, result1
20134     01 A8 06 F1 | 	add	local02, #1
20138     00 A9 56 F2 | 	cmps	local02, #256 wc
2013c     A8 FF 9F CD |  if_b	jmp	#LR__2604
20140     10 00 00 FF 
20144     36 64 06 F1 | 	add	objptr, ##8246
20148     32 01 58 FC | 	wrword	#0, objptr
2014c                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
2014c     00 A8 06 F6 | 	mov	local02, #0
20150     02 64 06 F1 | 	add	objptr, #2
20154     D7 10 48 FB | 	callpa	#(@LR__2606-@LR__2605)>>2,fcache_load_ptr_
20158                 | LR__2605
20158     54 AB 02 F6 | 	mov	local03, local02
2015c     01 AA 66 F0 | 	shl	local03, #1
20160     32 AB 02 F1 | 	add	local03, objptr
20164     7F 00 80 FF 
20168     55 01 5A FC | 	wrword	##65280, local03
2016c     01 A8 06 F1 | 	add	local02, #1
20170     FF A8 56 F2 | 	cmps	local02, #255 wc
20174     E0 FF 9F CD |  if_b	jmp	#LR__2605
20178                 | LR__2606
20178     FE 65 06 F1 | 	add	objptr, #510
2017c     32 01 58 FC | 	wrword	#0, objptr
20180                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
20180     00 A8 06 F6 | 	mov	local02, #0
20184     02 64 06 F1 | 	add	objptr, #2
20188     D7 12 48 FB | 	callpa	#(@LR__2608-@LR__2607)>>2,fcache_load_ptr_
2018c                 | LR__2607
2018c     54 AB 02 F6 | 	mov	local03, local02
20190     01 AA 66 F0 | 	shl	local03, #1
20194     32 AB 02 F1 | 	add	local03, objptr
20198     54 B3 02 F6 | 	mov	local07, local02
2019c     0C B2 66 F0 | 	shl	local07, #12
201a0     55 B3 52 FC | 	wrword	local07, local03
201a4     01 A8 06 F1 | 	add	local02, #1
201a8     10 A8 56 F2 | 	cmps	local02, #16 wc
201ac     DC FF 9F CD |  if_b	jmp	#LR__2607
201b0                 | LR__2608
201b0                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
201b0     10 A8 06 F6 | 	mov	local02, #16
201b4     D7 10 48 FB | 	callpa	#(@LR__2610-@LR__2609)>>2,fcache_load_ptr_
201b8                 | LR__2609
201b8     54 AB 02 F6 | 	mov	local03, local02
201bc     01 AA 66 F0 | 	shl	local03, #1
201c0     32 AB 02 F1 | 	add	local03, objptr
201c4     7F 00 80 FF 
201c8     55 01 5A FC | 	wrword	##65280, local03
201cc     01 A8 06 F1 | 	add	local02, #1
201d0     F0 A8 16 F2 | 	cmp	local02, #240 wc
201d4     E0 FF 9F CD |  if_b	jmp	#LR__2609
201d8                 | LR__2610
201d8                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
201d8     F0 A8 06 F6 | 	mov	local02, #240
201dc     D7 14 48 FB | 	callpa	#(@LR__2612-@LR__2611)>>2,fcache_load_ptr_
201e0                 | LR__2611
201e0     54 AB 02 F6 | 	mov	local03, local02
201e4     01 AA 66 F0 | 	shl	local03, #1
201e8     32 AB 02 F1 | 	add	local03, objptr
201ec     FF B0 06 F6 | 	mov	local06, #255
201f0     54 B1 82 F1 | 	sub	local06, local02
201f4     0C B0 66 F0 | 	shl	local06, #12
201f8     55 B1 52 FC | 	wrword	local06, local03
201fc     01 A8 06 F1 | 	add	local02, #1
20200     00 A9 16 F2 | 	cmp	local02, #256 wc
20204     D8 FF 9F CD |  if_b	jmp	#LR__2611
20208                 | LR__2612
20208                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
20208     00 A8 06 F6 | 	mov	local02, #0
2020c     01 00 00 FF 
20210     00 64 06 F1 | 	add	objptr, ##512
20214     D7 12 48 FB | 	callpa	#(@LR__2614-@LR__2613)>>2,fcache_load_ptr_
20218                 | LR__2613
20218     54 AB 02 F6 | 	mov	local03, local02
2021c     01 AA 66 F0 | 	shl	local03, #1
20220     32 AB 02 F1 | 	add	local03, objptr
20224     54 B3 02 F6 | 	mov	local07, local02
20228     08 B2 66 F0 | 	shl	local07, #8
2022c     55 B3 52 FC | 	wrword	local07, local03
20230     01 A8 06 F1 | 	add	local02, #1
20234     00 A9 56 F2 | 	cmps	local02, #256 wc
20238     DC FF 9F CD |  if_b	jmp	#LR__2613
2023c                 | LR__2614
2023c     FE 65 06 F1 | 	add	objptr, #510
20240     32 01 58 FC | 	wrword	#0, objptr
20244                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
20244     00 A8 06 F6 | 	mov	local02, #0
20248     02 64 06 F1 | 	add	objptr, #2
2024c     D7 16 48 FB | 	callpa	#(@LR__2616-@LR__2615)>>2,fcache_load_ptr_
20250                 | LR__2615
20250     54 AB 02 F6 | 	mov	local03, local02
20254     01 AA 66 F0 | 	shl	local03, #1
20258     32 AB 02 F1 | 	add	local03, objptr
2025c     54 B3 02 F6 | 	mov	local07, local02
20260     04 B2 66 F0 | 	shl	local07, #4
20264     54 B3 02 F1 | 	add	local07, local02
20268     04 B2 66 F0 | 	shl	local07, #4
2026c     55 B3 52 FC | 	wrword	local07, local03
20270     01 A8 06 F1 | 	add	local02, #1
20274     F0 A8 56 F2 | 	cmps	local02, #240 wc
20278     D4 FF 9F CD |  if_b	jmp	#LR__2615
2027c                 | LR__2616
2027c     F0 A8 06 F6 | 	mov	local02, #240
20280     D7 14 48 FB | 	callpa	#(@LR__2618-@LR__2617)>>2,fcache_load_ptr_
20284                 | LR__2617
20284     54 AB 02 F6 | 	mov	local03, local02
20288     01 AA 66 F0 | 	shl	local03, #1
2028c     32 AB 02 F1 | 	add	local03, objptr
20290     FF B0 06 F6 | 	mov	local06, #255
20294     54 B1 82 F1 | 	sub	local06, local02
20298     0C B0 66 F0 | 	shl	local06, #12
2029c     55 B1 52 FC | 	wrword	local06, local03
202a0     01 A8 06 F1 | 	add	local02, #1
202a4     00 A9 16 F2 | 	cmp	local02, #256 wc
202a8     D8 FF 9F CD |  if_b	jmp	#LR__2617
202ac                 | LR__2618
202ac                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
202ac     00 A8 06 F6 | 	mov	local02, #0
202b0     01 00 00 FF 
202b4     00 64 06 F1 | 	add	objptr, ##512
202b8     D7 20 48 FB | 	callpa	#(@LR__2620-@LR__2619)>>2,fcache_load_ptr_
202bc                 | LR__2619
202bc     54 AB 02 F6 | 	mov	local03, local02
202c0     01 AA 66 F0 | 	shl	local03, #1
202c4     32 AB 02 F1 | 	add	local03, objptr
202c8     54 B3 02 F6 | 	mov	local07, local02
202cc     09 B2 66 F0 | 	shl	local07, #9
202d0     55 B3 52 FC | 	wrword	local07, local03
202d4     FF AA 06 F6 | 	mov	local03, #255
202d8     54 AB 82 F1 | 	sub	local03, local02
202dc     01 AA 66 F0 | 	shl	local03, #1
202e0     32 AB 02 F1 | 	add	local03, objptr
202e4     54 B3 02 F6 | 	mov	local07, local02
202e8     09 B2 66 F0 | 	shl	local07, #9
202ec     55 B3 52 FC | 	wrword	local07, local03
202f0     01 A8 06 F1 | 	add	local02, #1
202f4     80 A8 56 F2 | 	cmps	local02, #128 wc
202f8     C0 FF 9F CD |  if_b	jmp	#LR__2619
202fc                 | LR__2620
202fc                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
202fc     00 A8 06 F6 | 	mov	local02, #0
20300     01 00 00 FF 
20304     00 64 06 F1 | 	add	objptr, ##512
20308     D7 12 48 FB | 	callpa	#(@LR__2622-@LR__2621)>>2,fcache_load_ptr_
2030c                 | LR__2621
2030c     54 AB 02 F6 | 	mov	local03, local02
20310     01 AA 66 F0 | 	shl	local03, #1
20314     32 AB 02 F1 | 	add	local03, objptr
20318     54 B3 02 F6 | 	mov	local07, local02
2031c     0D B2 66 F0 | 	shl	local07, #13
20320     55 B3 52 FC | 	wrword	local07, local03
20324     01 A8 06 F1 | 	add	local02, #1
20328     08 A8 56 F2 | 	cmps	local02, #8 wc
2032c     DC FF 9F CD |  if_b	jmp	#LR__2621
20330                 | LR__2622
20330                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
20330     08 A8 06 F6 | 	mov	local02, #8
20334     D7 1A 48 FB | 	callpa	#(@LR__2624-@LR__2623)>>2,fcache_load_ptr_
20338                 | LR__2623
20338     54 AB 02 F6 | 	mov	local03, local02
2033c     01 AA 66 F0 | 	shl	local03, #1
20340     32 AB 02 F1 | 	add	local03, objptr
20344     54 AF 02 F6 | 	mov	local05, local02
20348     08 AE 86 F1 | 	sub	local05, #8
2034c     0B AE 66 F0 | 	shl	local05, #11
20350     7F 00 00 FF 
20354     00 B3 06 F6 | 	mov	local07, ##65280
20358     57 B3 82 F1 | 	sub	local07, local05
2035c     55 B3 52 FC | 	wrword	local07, local03
20360     01 A8 06 F1 | 	add	local02, #1
20364     18 A8 16 F2 | 	cmp	local02, #24 wc
20368     CC FF 9F CD |  if_b	jmp	#LR__2623
2036c                 | LR__2624
2036c                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
2036c     18 A8 06 F6 | 	mov	local02, #24
20370     D7 10 48 FB | 	callpa	#(@LR__2626-@LR__2625)>>2,fcache_load_ptr_
20374                 | LR__2625
20374     54 AB 02 F6 | 	mov	local03, local02
20378     01 AA 66 F0 | 	shl	local03, #1
2037c     32 AB 02 F1 | 	add	local03, objptr
20380     40 00 80 FF 
20384     55 01 58 FC | 	wrword	##32768, local03
20388     01 A8 06 F1 | 	add	local02, #1
2038c     81 A8 16 F2 | 	cmp	local02, #129 wc
20390     E0 FF 9F CD |  if_b	jmp	#LR__2625
20394                 | LR__2626
20394                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
20394     81 A8 06 F6 | 	mov	local02, #129
20398     D7 14 48 FB | 	callpa	#(@LR__2628-@LR__2627)>>2,fcache_load_ptr_
2039c                 | LR__2627
2039c     54 AB 02 F6 | 	mov	local03, local02
203a0     01 AA 66 F0 | 	shl	local03, #1
203a4     32 AB 02 F1 | 	add	local03, objptr
203a8     FF B0 06 F6 | 	mov	local06, #255
203ac     54 B1 82 F1 | 	sub	local06, local02
203b0     08 B0 66 F0 | 	shl	local06, #8
203b4     55 B1 52 FC | 	wrword	local06, local03
203b8     01 A8 06 F1 | 	add	local02, #1
203bc     00 A9 16 F2 | 	cmp	local02, #256 wc
203c0     D8 FF 9F CD |  if_b	jmp	#LR__2627
203c4                 | LR__2628
203c4     3F 00 00 FF 
203c8     66 64 06 F1 | 	add	objptr, ##32358
203cc     32 01 59 FC | 	wrword	#128, objptr
203d0     54 00 00 FF 
203d4     9E 64 86 F1 | 	sub	objptr, ##43166
203d8                 | ' for i=0 to 7
203d8     00 A8 06 F6 | 	mov	local02, #0
203dc     D7 9C 48 FB | 	callpa	#(@LR__2630-@LR__2629)>>2,fcache_load_ptr_
203e0                 | LR__2629
203e0     54 AB 02 F6 | 	mov	local03, local02
203e4     03 AA 66 F0 | 	shl	local03, #3
203e8     54 AB 82 F1 | 	sub	local03, local02
203ec     02 AA 66 F0 | 	shl	local03, #2
203f0     16 00 00 FF 
203f4     BC 64 06 F1 | 	add	objptr, ##11452
203f8     32 AB 02 F1 | 	add	local03, objptr
203fc     00 EE A1 FF 
20400     55 01 68 FC | 	wrlong	##1138491392, local03
20404     54 AB 02 F6 | 	mov	local03, local02
20408     03 AA 66 F0 | 	shl	local03, #3
2040c     54 AB 82 F1 | 	sub	local03, local02
20410     02 AA 66 F0 | 	shl	local03, #2
20414     32 AB 02 F1 | 	add	local03, objptr
20418     04 AA 06 F1 | 	add	local03, #4
2041c     55 A9 42 FC | 	wrbyte	local02, local03
20420     54 AB 02 F6 | 	mov	local03, local02
20424     03 AA 66 F0 | 	shl	local03, #3
20428     54 AB 82 F1 | 	sub	local03, local02
2042c     02 AA 66 F0 | 	shl	local03, #2
20430     32 AB 02 F1 | 	add	local03, objptr
20434     05 AA 06 F1 | 	add	local03, #5
20438     55 A9 42 FC | 	wrbyte	local02, local03
2043c     54 AB 02 F6 | 	mov	local03, local02
20440     03 AA 66 F0 | 	shl	local03, #3
20444     54 AB 82 F1 | 	sub	local03, local02
20448     02 AA 66 F0 | 	shl	local03, #2
2044c     32 AB 02 F1 | 	add	local03, objptr
20450     06 AA 06 F1 | 	add	local03, #6
20454     55 01 58 FC | 	wrword	#0, local03
20458     54 AB 02 F6 | 	mov	local03, local02
2045c     03 AA 66 F0 | 	shl	local03, #3
20460     54 AB 82 F1 | 	sub	local03, local02
20464     02 AA 66 F0 | 	shl	local03, #2
20468     32 AB 02 F1 | 	add	local03, objptr
2046c     08 AA 06 F1 | 	add	local03, #8
20470     00 C0 9F FF 
20474     55 01 68 FC | 	wrlong	##1065353216, local03
20478     54 AB 02 F6 | 	mov	local03, local02
2047c     03 AA 66 F0 | 	shl	local03, #3
20480     54 AB 82 F1 | 	sub	local03, local02
20484     02 AA 66 F0 | 	shl	local03, #2
20488     32 AB 02 F1 | 	add	local03, objptr
2048c     0C AA 06 F1 | 	add	local03, #12
20490     00 40 A0 FF 
20494     55 01 68 FC | 	wrlong	##1082130432, local03
20498     54 AB 02 F6 | 	mov	local03, local02
2049c     03 AA 66 F0 | 	shl	local03, #3
204a0     54 AB 82 F1 | 	sub	local03, local02
204a4     02 AA 66 F0 | 	shl	local03, #2
204a8     32 AB 02 F1 | 	add	local03, objptr
204ac     10 AA 06 F1 | 	add	local03, #16
204b0     55 01 68 FC | 	wrlong	#0, local03
204b4     54 AB 02 F6 | 	mov	local03, local02
204b8     03 AA 66 F0 | 	shl	local03, #3
204bc     54 AB 82 F1 | 	sub	local03, local02
204c0     02 AA 66 F0 | 	shl	local03, #2
204c4     32 AB 02 F1 | 	add	local03, objptr
204c8     14 AA 06 F1 | 	add	local03, #20
204cc     55 FF 59 FC | 	wrword	#255, local03
204d0     54 AB 02 F6 | 	mov	local03, local02
204d4     03 AA 66 F0 | 	shl	local03, #3
204d8     54 AB 82 F1 | 	sub	local03, local02
204dc     02 AA 66 F0 | 	shl	local03, #2
204e0     32 AB 02 F1 | 	add	local03, objptr
204e4     16 AA 06 F1 | 	add	local03, #22
204e8     55 01 58 FC | 	wrword	#0, local03
204ec     54 AB 02 F6 | 	mov	local03, local02
204f0     01 AA 66 F0 | 	shl	local03, #1
204f4     3D 00 00 FF 
204f8     D4 65 06 F1 | 	add	objptr, ##31700
204fc     32 AB 02 F1 | 	add	local03, objptr
20500     55 FF 59 FC | 	wrword	#255, local03
20504     01 A8 06 F1 | 	add	local02, #1
20508     08 A8 56 F2 | 	cmps	local02, #8 wc
2050c     54 00 00 FF 
20510     90 64 86 F1 | 	sub	objptr, ##43152
20514     C8 FE 9F CD |  if_b	jmp	#LR__2629
20518                 | LR__2630
20518     00 6E 20 FF 
2051c     00 B2 06 F6 | 	mov	local07, ##1088159744
20520                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
20520     03 B0 06 F6 | 	mov	local06, #3
20524                 | LR__2631
20524     59 93 02 F6 | 	mov	arg01, local07
20528     CE C3 1F FF 
2052c     7D 94 06 F6 | 	mov	arg02, ##1065852029
20530     2C 69 B0 FD | 	call	#__system___float_mul
20534     3D B3 02 F6 | 	mov	local07, result1
20538     FA B1 6E FB | 	djnz	local06, #LR__2631
2053c     00 A8 06 F6 | 	mov	local02, #0
20540                 | LR__2632
20540     54 AD 02 F6 | 	mov	local04, local02
20544     02 AC 66 F0 | 	shl	local04, #2
20548     32 AB 02 F6 | 	mov	local03, objptr
2054c     16 00 00 FF 
20550     38 AA 06 F1 | 	add	local03, ##11320
20554     55 AD 02 F1 | 	add	local04, local03
20558     56 B3 62 FC | 	wrlong	local07, local04
2055c     59 93 02 F6 | 	mov	arg01, local07
20560     CE C3 1F FF 
20564     7D 94 06 F6 | 	mov	arg02, ##1065852029
20568     F4 68 B0 FD | 	call	#__system___float_mul
2056c     3D B3 02 F6 | 	mov	local07, result1
20570     01 A8 06 F1 | 	add	local02, #1
20574     0C A8 56 F2 | 	cmps	local02, #12 wc
20578     C4 FF 9F CD |  if_b	jmp	#LR__2632
2057c     16 00 00 FF 
20580     68 64 06 F1 | 	add	objptr, ##11368
20584     32 51 6B FC | 	wrlong	#424, objptr
20588     04 64 06 F1 | 	add	objptr, #4
2058c     32 21 6B FC | 	wrlong	#400, objptr
20590     04 64 06 F1 | 	add	objptr, #4
20594     32 F3 6A FC | 	wrlong	#377, objptr
20598     04 64 06 F1 | 	add	objptr, #4
2059c     32 C9 6A FC | 	wrlong	#356, objptr
205a0     04 64 06 F1 | 	add	objptr, #4
205a4     32 A1 6A FC | 	wrlong	#336, objptr
205a8     04 64 06 F1 | 	add	objptr, #4
205ac     32 7B 6A FC | 	wrlong	#317, objptr
205b0     04 64 06 F1 | 	add	objptr, #4
205b4     32 59 6A FC | 	wrlong	#300, objptr
205b8     04 64 06 F1 | 	add	objptr, #4
205bc     32 37 6A FC | 	wrlong	#283, objptr
205c0     04 64 06 F1 | 	add	objptr, #4
205c4     32 17 6A FC | 	wrlong	#267, objptr
205c8     04 64 06 F1 | 	add	objptr, #4
205cc     32 F9 69 FC | 	wrlong	#252, objptr
205d0     04 64 06 F1 | 	add	objptr, #4
205d4     32 DD 69 FC | 	wrlong	#238, objptr
205d8     04 64 06 F1 | 	add	objptr, #4
205dc     32 C1 69 FC | 	wrlong	#224, objptr
205e0     3E 00 00 FF 
205e4     0A 64 06 F1 | 	add	objptr, ##31754
205e8     32 01 59 FC | 	wrword	#128, objptr
205ec     02 64 86 F1 | 	sub	objptr, #2
205f0     32 01 59 FC | 	wrword	#128, objptr
205f4     54 00 00 FF 
205f8     9C 64 86 F1 | 	sub	objptr, ##43164
205fc     E7 F0 03 F6 | 	mov	ptra, fp
20600     F2 00 A0 FD | 	call	#popregs_
20604                 | _init_audio_ret
20604     2D 00 64 FD | 	ret
20608                 | 
20608                 | ' 
20608                 | ' '------------------- Error messages
20608                 | ' 
20608                 | ' sub init_error_strings
20608                 | _init_error_strings
20608     97 01 00 FF 
2060c     3D 81 06 F6 | 	mov	_var01, ##@LR__6092
20610     47 00 00 FF 
20614     20 64 06 F1 | 	add	objptr, ##36384
20618     32 81 62 FC | 	wrlong	_var01, objptr
2061c     97 01 00 FF 
20620     3E 81 06 F6 | 	mov	_var01, ##@LR__6093
20624     04 64 06 F1 | 	add	objptr, #4
20628     32 81 62 FC | 	wrlong	_var01, objptr
2062c     97 01 00 FF 
20630     62 81 06 F6 | 	mov	_var01, ##@LR__6094
20634     04 64 06 F1 | 	add	objptr, #4
20638     32 81 62 FC | 	wrlong	_var01, objptr
2063c     97 01 00 FF 
20640     82 81 06 F6 | 	mov	_var01, ##@LR__6095
20644     04 64 06 F1 | 	add	objptr, #4
20648     32 81 62 FC | 	wrlong	_var01, objptr
2064c     97 01 00 FF 
20650     9B 81 06 F6 | 	mov	_var01, ##@LR__6096
20654     04 64 06 F1 | 	add	objptr, #4
20658     32 81 62 FC | 	wrlong	_var01, objptr
2065c     97 01 00 FF 
20660     B6 81 06 F6 | 	mov	_var01, ##@LR__6097
20664     04 64 06 F1 | 	add	objptr, #4
20668     32 81 62 FC | 	wrlong	_var01, objptr
2066c     97 01 00 FF 
20670     D7 81 06 F6 | 	mov	_var01, ##@LR__6098
20674     04 64 06 F1 | 	add	objptr, #4
20678     32 81 62 FC | 	wrlong	_var01, objptr
2067c     98 01 00 FF 
20680     04 80 06 F6 | 	mov	_var01, ##@LR__6099
20684     04 64 06 F1 | 	add	objptr, #4
20688     32 81 62 FC | 	wrlong	_var01, objptr
2068c     98 01 00 FF 
20690     2E 80 06 F6 | 	mov	_var01, ##@LR__6100
20694     04 64 06 F1 | 	add	objptr, #4
20698     32 81 62 FC | 	wrlong	_var01, objptr
2069c     98 01 00 FF 
206a0     46 80 06 F6 | 	mov	_var01, ##@LR__6101
206a4     04 64 06 F1 | 	add	objptr, #4
206a8     32 81 62 FC | 	wrlong	_var01, objptr
206ac     98 01 00 FF 
206b0     66 80 06 F6 | 	mov	_var01, ##@LR__6102
206b4     04 64 06 F1 | 	add	objptr, #4
206b8     32 81 62 FC | 	wrlong	_var01, objptr
206bc     98 01 00 FF 
206c0     7C 80 06 F6 | 	mov	_var01, ##@LR__6103
206c4     04 64 06 F1 | 	add	objptr, #4
206c8     32 81 62 FC | 	wrlong	_var01, objptr
206cc     98 01 00 FF 
206d0     99 80 06 F6 | 	mov	_var01, ##@LR__6104
206d4     04 64 06 F1 | 	add	objptr, #4
206d8     32 81 62 FC | 	wrlong	_var01, objptr
206dc     98 01 00 FF 
206e0     BC 80 06 F6 | 	mov	_var01, ##@LR__6105
206e4     04 64 06 F1 | 	add	objptr, #4
206e8     32 81 62 FC | 	wrlong	_var01, objptr
206ec     98 01 00 FF 
206f0     E2 80 06 F6 | 	mov	_var01, ##@LR__6106
206f4     04 64 06 F1 | 	add	objptr, #4
206f8     32 81 62 FC | 	wrlong	_var01, objptr
206fc     98 01 00 FF 
20700     FD 80 06 F6 | 	mov	_var01, ##@LR__6107
20704     04 64 06 F1 | 	add	objptr, #4
20708     32 81 62 FC | 	wrlong	_var01, objptr
2070c     98 01 00 FF 
20710     0D 81 06 F6 | 	mov	_var01, ##@LR__6108
20714     04 64 06 F1 | 	add	objptr, #4
20718     32 81 62 FC | 	wrlong	_var01, objptr
2071c     98 01 00 FF 
20720     1C 81 06 F6 | 	mov	_var01, ##@LR__6109
20724     04 64 06 F1 | 	add	objptr, #4
20728     32 81 62 FC | 	wrlong	_var01, objptr
2072c     98 01 00 FF 
20730     36 81 06 F6 | 	mov	_var01, ##@LR__6110
20734     04 64 06 F1 | 	add	objptr, #4
20738     32 81 62 FC | 	wrlong	_var01, objptr
2073c     98 01 00 FF 
20740     47 81 06 F6 | 	mov	_var01, ##@LR__6111
20744     04 64 06 F1 | 	add	objptr, #4
20748     32 81 62 FC | 	wrlong	_var01, objptr
2074c     98 01 00 FF 
20750     5E 81 06 F6 | 	mov	_var01, ##@LR__6112
20754     04 64 06 F1 | 	add	objptr, #4
20758     32 81 62 FC | 	wrlong	_var01, objptr
2075c     98 01 00 FF 
20760     71 81 06 F6 | 	mov	_var01, ##@LR__6113
20764     04 64 06 F1 | 	add	objptr, #4
20768     32 81 62 FC | 	wrlong	_var01, objptr
2076c     98 01 00 FF 
20770     80 81 06 F6 | 	mov	_var01, ##@LR__6114
20774     04 64 06 F1 | 	add	objptr, #4
20778     32 81 62 FC | 	wrlong	_var01, objptr
2077c     98 01 00 FF 
20780     9C 81 06 F6 | 	mov	_var01, ##@LR__6115
20784     04 64 06 F1 | 	add	objptr, #4
20788     32 81 62 FC | 	wrlong	_var01, objptr
2078c     98 01 00 FF 
20790     AC 81 06 F6 | 	mov	_var01, ##@LR__6116
20794     04 64 06 F1 | 	add	objptr, #4
20798     32 81 62 FC | 	wrlong	_var01, objptr
2079c     98 01 00 FF 
207a0     BC 81 06 F6 | 	mov	_var01, ##@LR__6117
207a4     04 64 06 F1 | 	add	objptr, #4
207a8     32 81 62 FC | 	wrlong	_var01, objptr
207ac     98 01 00 FF 
207b0     EF 81 06 F6 | 	mov	_var01, ##@LR__6118
207b4     04 64 06 F1 | 	add	objptr, #4
207b8     32 81 62 FC | 	wrlong	_var01, objptr
207bc     99 01 00 FF 
207c0     0A 80 06 F6 | 	mov	_var01, ##@LR__6119
207c4     04 64 06 F1 | 	add	objptr, #4
207c8     32 81 62 FC | 	wrlong	_var01, objptr
207cc     99 01 00 FF 
207d0     1F 80 06 F6 | 	mov	_var01, ##@LR__6120
207d4     04 64 06 F1 | 	add	objptr, #4
207d8     32 81 62 FC | 	wrlong	_var01, objptr
207dc     99 01 00 FF 
207e0     2B 80 06 F6 | 	mov	_var01, ##@LR__6121
207e4     04 64 06 F1 | 	add	objptr, #4
207e8     32 81 62 FC | 	wrlong	_var01, objptr
207ec     99 01 00 FF 
207f0     3C 80 06 F6 | 	mov	_var01, ##@LR__6122
207f4     04 64 06 F1 | 	add	objptr, #4
207f8     32 81 62 FC | 	wrlong	_var01, objptr
207fc     99 01 00 FF 
20800     4C 80 06 F6 | 	mov	_var01, ##@LR__6123
20804     04 64 06 F1 | 	add	objptr, #4
20808     32 81 62 FC | 	wrlong	_var01, objptr
2080c     99 01 00 FF 
20810     67 80 06 F6 | 	mov	_var01, ##@LR__6124
20814     04 64 06 F1 | 	add	objptr, #4
20818     32 81 62 FC | 	wrlong	_var01, objptr
2081c     99 01 00 FF 
20820     77 80 06 F6 | 	mov	_var01, ##@LR__6125
20824     04 64 06 F1 | 	add	objptr, #4
20828     32 81 62 FC | 	wrlong	_var01, objptr
2082c     99 01 00 FF 
20830     85 80 06 F6 | 	mov	_var01, ##@LR__6126
20834     04 64 06 F1 | 	add	objptr, #4
20838     32 81 62 FC | 	wrlong	_var01, objptr
2083c     99 01 00 FF 
20840     9F 80 06 F6 | 	mov	_var01, ##@LR__6127
20844     04 64 06 F1 | 	add	objptr, #4
20848     32 81 62 FC | 	wrlong	_var01, objptr
2084c     99 01 00 FF 
20850     D2 80 06 F6 | 	mov	_var01, ##@LR__6128
20854     04 64 06 F1 | 	add	objptr, #4
20858     32 81 62 FC | 	wrlong	_var01, objptr
2085c     99 01 00 FF 
20860     EA 80 06 F6 | 	mov	_var01, ##@LR__6129
20864     04 64 06 F1 | 	add	objptr, #4
20868     32 81 62 FC | 	wrlong	_var01, objptr
2086c     99 01 00 FF 
20870     05 81 06 F6 | 	mov	_var01, ##@LR__6130
20874     04 64 06 F1 | 	add	objptr, #4
20878     32 81 62 FC | 	wrlong	_var01, objptr
2087c     99 01 00 FF 
20880     22 81 06 F6 | 	mov	_var01, ##@LR__6131
20884     04 64 06 F1 | 	add	objptr, #4
20888     32 81 62 FC | 	wrlong	_var01, objptr
2088c     99 01 00 FF 
20890     3B 81 06 F6 | 	mov	_var01, ##@LR__6132
20894     04 64 06 F1 | 	add	objptr, #4
20898     32 81 62 FC | 	wrlong	_var01, objptr
2089c     99 01 00 FF 
208a0     5A 81 06 F6 | 	mov	_var01, ##@LR__6133
208a4     04 64 06 F1 | 	add	objptr, #4
208a8     32 81 62 FC | 	wrlong	_var01, objptr
208ac     99 01 00 FF 
208b0     68 81 06 F6 | 	mov	_var01, ##@LR__6134
208b4     04 64 06 F1 | 	add	objptr, #4
208b8     32 81 62 FC | 	wrlong	_var01, objptr
208bc     99 01 00 FF 
208c0     95 81 06 F6 | 	mov	_var01, ##@LR__6135
208c4     04 64 06 F1 | 	add	objptr, #4
208c8     32 81 62 FC | 	wrlong	_var01, objptr
208cc     99 01 00 FF 
208d0     A2 81 06 F6 | 	mov	_var01, ##@LR__6136
208d4     04 64 06 F1 | 	add	objptr, #4
208d8     32 81 62 FC | 	wrlong	_var01, objptr
208dc     99 01 00 FF 
208e0     B6 81 06 F6 | 	mov	_var01, ##@LR__6137
208e4     04 64 06 F1 | 	add	objptr, #4
208e8     32 81 62 FC | 	wrlong	_var01, objptr
208ec     99 01 00 FF 
208f0     DA 81 06 F6 | 	mov	_var01, ##@LR__6138
208f4     04 64 06 F1 | 	add	objptr, #4
208f8     32 81 62 FC | 	wrlong	_var01, objptr
208fc     99 01 00 FF 
20900     F1 81 06 F6 | 	mov	_var01, ##@LR__6139
20904     04 64 06 F1 | 	add	objptr, #4
20908     32 81 62 FC | 	wrlong	_var01, objptr
2090c     9A 01 00 FF 
20910     04 80 06 F6 | 	mov	_var01, ##@LR__6140
20914     04 64 06 F1 | 	add	objptr, #4
20918     32 81 62 FC | 	wrlong	_var01, objptr
2091c     9A 01 00 FF 
20920     1B 80 06 F6 | 	mov	_var01, ##@LR__6141
20924     04 64 06 F1 | 	add	objptr, #4
20928     32 81 62 FC | 	wrlong	_var01, objptr
2092c     9A 01 00 FF 
20930     34 80 06 F6 | 	mov	_var01, ##@LR__6142
20934     04 64 06 F1 | 	add	objptr, #4
20938     32 81 62 FC | 	wrlong	_var01, objptr
2093c     9A 01 00 FF 
20940     56 80 06 F6 | 	mov	_var01, ##@LR__6143
20944     04 64 06 F1 | 	add	objptr, #4
20948     32 81 62 FC | 	wrlong	_var01, objptr
2094c     9A 01 00 FF 
20950     69 80 06 F6 | 	mov	_var01, ##@LR__6144
20954     04 64 06 F1 | 	add	objptr, #4
20958     32 81 62 FC | 	wrlong	_var01, objptr
2095c     9A 01 00 FF 
20960     79 80 06 F6 | 	mov	_var01, ##@LR__6145
20964     04 64 06 F1 | 	add	objptr, #4
20968     32 81 62 FC | 	wrlong	_var01, objptr
2096c     9A 01 00 FF 
20970     91 80 06 F6 | 	mov	_var01, ##@LR__6146
20974     04 64 06 F1 | 	add	objptr, #4
20978     32 81 62 FC | 	wrlong	_var01, objptr
2097c     9A 01 00 FF 
20980     A8 80 06 F6 | 	mov	_var01, ##@LR__6147
20984     04 64 06 F1 | 	add	objptr, #4
20988     32 81 62 FC | 	wrlong	_var01, objptr
2098c     47 00 00 FF 
20990     FC 64 86 F1 | 	sub	objptr, ##36604
20994                 | _init_error_strings_ret
20994     2D 00 64 FD | 	ret
20998                 | 
20998                 | '         
20998                 | ' sub printerror(err as integer, linenum=0 as integer)
20998                 | _printerror
20998     02 CA 05 F6 | 	mov	COUNT_, #2
2099c     E8 00 A0 FD | 	call	#pushregs_
209a0     49 A7 02 F6 | 	mov	local01, arg01
209a4     4A A9 02 F6 | 	mov	local02, arg02
209a8     9A 01 00 FF 
209ac     B5 92 06 F6 | 	mov	arg01, ##@LR__6148
209b0     90 21 B0 FD | 	call	#_hg010b_spin2_write
209b4     53 93 02 F6 | 	mov	arg01, local01
209b8     CC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
209bc     3D 93 02 F6 | 	mov	arg01, result1
209c0     80 21 B0 FD | 	call	#_hg010b_spin2_write
209c4     9A 01 00 FF 
209c8     BC 92 06 F6 | 	mov	arg01, ##@LR__6149
209cc     74 21 B0 FD | 	call	#_hg010b_spin2_write
209d0     02 A6 66 F0 | 	shl	local01, #2
209d4     32 95 02 F6 | 	mov	arg02, objptr
209d8     47 00 00 FF 
209dc     20 94 06 F1 | 	add	arg02, ##36384
209e0     4A A7 02 F1 | 	add	local01, arg02
209e4     53 93 02 FB | 	rdlong	arg01, local01
209e8     58 21 B0 FD | 	call	#_hg010b_spin2_write
209ec                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
209ec                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
209ec     01 A8 56 F2 | 	cmps	local02, #1 wc
209f0     24 00 90 CD |  if_b	jmp	#LR__2640
209f4     9A 01 00 FF 
209f8     C0 92 06 F6 | 	mov	arg01, ##@LR__6150
209fc     44 21 B0 FD | 	call	#_hg010b_spin2_write
20a00     54 93 02 F6 | 	mov	arg01, local02
20a04     80 26 B0 FD | 	call	#_hg010b_spin2_inttostr
20a08     3D 93 02 F6 | 	mov	arg01, result1
20a0c                 | ' 
20a0c                 | ' write(text)
20a0c     34 21 B0 FD | 	call	#_hg010b_spin2_write
20a10                 | ' crlf
20a10     D0 25 B0 FD | 	call	#_hg010b_spin2_crlf
20a14     10 00 90 FD | 	jmp	#LR__2641
20a18                 | LR__2640
20a18     9A 01 00 FF 
20a1c     CA 92 06 F6 | 	mov	arg01, ##@LR__6151
20a20                 | ' 
20a20                 | ' write(text)
20a20     20 21 B0 FD | 	call	#_hg010b_spin2_write
20a24                 | ' crlf
20a24     BC 25 B0 FD | 	call	#_hg010b_spin2_crlf
20a28                 | LR__2641
20a28     E7 F0 03 F6 | 	mov	ptra, fp
20a2c     F2 00 A0 FD | 	call	#popregs_
20a30                 | _printerror_ret
20a30     2D 00 64 FD | 	ret
20a34                 | 
20a34                 | ' 
20a34                 | ' '' ------------------------------- Hardware start/stop/initialization 
20a34                 | ' 
20a34                 | ' sub startpsram
20a34                 | _startpsram
20a34     00 92 06 F6 | 	mov	arg01, #0
20a38     0A 94 C6 F9 | 	decod	arg02, #10
20a3c     0B 96 06 F6 | 	mov	arg03, #11
20a40     07 98 06 F6 | 	mov	arg04, #7
20a44     0B 00 00 FF 
20a48     CC 64 06 F1 | 	add	objptr, ##5836
20a4c     BC 2A B0 FD | 	call	#_psram_spin2_startx
20a50     2D 00 00 FF 
20a54     E0 64 06 F1 | 	add	objptr, ##23264
20a58     32 7B 62 FC | 	wrlong	result1, objptr
20a5c     0C 64 06 F1 | 	add	objptr, #12
20a60     32 7D 62 FC | 	wrlong	result2, objptr
20a64     38 00 00 FF 
20a68     B8 65 86 F1 | 	sub	objptr, ##29112
20a6c                 | _startpsram_ret
20a6c     2D 00 64 FD | 	ret
20a70                 | 
20a70                 | ' 
20a70                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
20a70                 | _startvideo
20a70     01 CA 05 F6 | 	mov	COUNT_, #1
20a74     E8 00 A0 FD | 	call	#pushregs_
20a78     38 00 00 FF 
20a7c     B8 65 06 F1 | 	add	objptr, ##29112
20a80     32 99 02 FB | 	rdlong	arg04, objptr
20a84     38 00 00 FF 
20a88     B8 65 86 F1 | 	sub	objptr, ##29112
20a8c     4A 93 02 F6 | 	mov	arg01, arg02
20a90     4C 95 02 F6 | 	mov	arg02, arg04
20a94     2C 08 B0 FD | 	call	#_hg010b_spin2_start
20a98     38 00 00 FF 
20a9c     A4 65 06 F1 | 	add	objptr, ##29092
20aa0     32 7B 62 FC | 	wrlong	result1, objptr
20aa4                 | ' 
20aa4                 | ' videocog=v.start(pin,mbox)
20aa4                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
20aa4     00 A6 06 F6 | 	mov	local01, #0
20aa8     2D 00 00 FF 
20aac     D8 64 86 F1 | 	sub	objptr, ##23256
20ab0                 | LR__2650
20ab0     53 93 02 F6 | 	mov	arg01, local01
20ab4     00 28 00 FF 
20ab8     00 94 06 F6 | 	mov	arg02, ##5242880
20abc     CC 2E B0 FD | 	call	#_psram_spin2_setQos
20ac0     01 A6 06 F1 | 	add	local01, #1
20ac4     08 A6 56 F2 | 	cmps	local01, #8 wc
20ac8     E4 FF 9F CD |  if_b	jmp	#LR__2650
20acc     2D 00 00 FF 
20ad0     D8 64 06 F1 | 	add	objptr, ##23256
20ad4     32 93 02 FB | 	rdlong	arg01, objptr
20ad8     7A 00 02 FF 
20adc     00 94 06 F6 | 	mov	arg02, ##67171328
20ae0     2D 00 00 FF 
20ae4     D8 64 86 F1 | 	sub	objptr, ##23256
20ae8     A0 2E B0 FD | 	call	#_psram_spin2_setQos
20aec     0B 00 00 FF 
20af0     CC 64 86 F1 | 	sub	objptr, ##5836
20af4                 | ' psram.setQoS(videocog, $0400f400) 
20af4                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
20af4     32 95 02 F6 | 	mov	arg02, objptr
20af8     00 68 05 FF 
20afc     00 94 46 F5 | 	or	arg02, ##181403648
20b00     00 96 06 F6 | 	mov	arg03, #0
20b04     00 98 06 F6 | 	mov	arg04, #0
20b08     00 92 06 F6 | 	mov	arg01, #0
20b0c     D0 46 B0 FD | 	call	#__system___basic_open
20b10                 | ' return videocog
20b10     38 00 00 FF 
20b14     A4 65 06 F1 | 	add	objptr, ##29092
20b18     32 7B 02 FB | 	rdlong	result1, objptr
20b1c     38 00 00 FF 
20b20     A4 65 86 F1 | 	sub	objptr, ##29092
20b24     E7 F0 03 F6 | 	mov	ptra, fp
20b28     F2 00 A0 FD | 	call	#popregs_
20b2c                 | _startvideo_ret
20b2c     2D 00 64 FD | 	ret
20b30                 | 
20b30                 | ' 
20b30                 | ' 
20b30                 | ' 
20b30                 | ' '' ------------------------------- Convenient psram peek/poke
20b30                 | ' 
20b30                 | ' sub pslpoke(addr as ulong,value as ulong)
20b30                 | _pslpoke
20b30     00 CA 05 F6 | 	mov	COUNT_, #0
20b34     E8 00 A0 FD | 	call	#pushregs_
20b38     08 F0 07 F1 | 	add	ptra, #8
20b3c     49 97 02 F6 | 	mov	arg03, arg01
20b40     04 CE 05 F1 | 	add	fp, #4
20b44     E7 94 62 FC | 	wrlong	arg02, fp
20b48     E7 92 02 F6 | 	mov	arg01, fp
20b4c     04 CE 85 F1 | 	sub	fp, #4
20b50     D9 96 06 F4 | 	bitl	arg03, #217
20b54     4B 95 02 F6 | 	mov	arg02, arg03
20b58     04 96 06 F6 | 	mov	arg03, #4
20b5c     0B 00 00 FF 
20b60     CC 64 06 F1 | 	add	objptr, ##5836
20b64     8C 2C B0 FD | 	call	#_psram_spin2_write
20b68     0B 00 00 FF 
20b6c     CC 64 86 F1 | 	sub	objptr, ##5836
20b70     E7 F0 03 F6 | 	mov	ptra, fp
20b74     F2 00 A0 FD | 	call	#popregs_
20b78                 | _pslpoke_ret
20b78     2D 00 64 FD | 	ret
20b7c                 | 
20b7c                 | ' 
20b7c                 | ' sub psdpoke(addr as ulong,value as ulong)
20b7c                 | _psdpoke
20b7c     00 CA 05 F6 | 	mov	COUNT_, #0
20b80     E8 00 A0 FD | 	call	#pushregs_
20b84     08 F0 07 F1 | 	add	ptra, #8
20b88     49 97 02 F6 | 	mov	arg03, arg01
20b8c     04 CE 05 F1 | 	add	fp, #4
20b90     E7 94 62 FC | 	wrlong	arg02, fp
20b94     E7 92 02 F6 | 	mov	arg01, fp
20b98     04 CE 85 F1 | 	sub	fp, #4
20b9c     D9 96 06 F4 | 	bitl	arg03, #217
20ba0     4B 95 02 F6 | 	mov	arg02, arg03
20ba4     02 96 06 F6 | 	mov	arg03, #2
20ba8     0B 00 00 FF 
20bac     CC 64 06 F1 | 	add	objptr, ##5836
20bb0     40 2C B0 FD | 	call	#_psram_spin2_write
20bb4     0B 00 00 FF 
20bb8     CC 64 86 F1 | 	sub	objptr, ##5836
20bbc     E7 F0 03 F6 | 	mov	ptra, fp
20bc0     F2 00 A0 FD | 	call	#popregs_
20bc4                 | _psdpoke_ret
20bc4     2D 00 64 FD | 	ret
20bc8                 | 
20bc8                 | ' 
20bc8                 | ' sub pspoke(addr as ulong,value as ulong)
20bc8                 | _pspoke
20bc8     00 CA 05 F6 | 	mov	COUNT_, #0
20bcc     E8 00 A0 FD | 	call	#pushregs_
20bd0     08 F0 07 F1 | 	add	ptra, #8
20bd4     49 97 02 F6 | 	mov	arg03, arg01
20bd8     04 CE 05 F1 | 	add	fp, #4
20bdc     E7 94 62 FC | 	wrlong	arg02, fp
20be0     E7 92 02 F6 | 	mov	arg01, fp
20be4     04 CE 85 F1 | 	sub	fp, #4
20be8     D9 96 06 F4 | 	bitl	arg03, #217
20bec     4B 95 02 F6 | 	mov	arg02, arg03
20bf0     01 96 06 F6 | 	mov	arg03, #1
20bf4     0B 00 00 FF 
20bf8     CC 64 06 F1 | 	add	objptr, ##5836
20bfc     F4 2B B0 FD | 	call	#_psram_spin2_write
20c00     0B 00 00 FF 
20c04     CC 64 86 F1 | 	sub	objptr, ##5836
20c08     E7 F0 03 F6 | 	mov	ptra, fp
20c0c     F2 00 A0 FD | 	call	#popregs_
20c10                 | _pspoke_ret
20c10     2D 00 64 FD | 	ret
20c14                 | 
20c14                 | ' 
20c14                 | ' function pspeek(adr as ulong) as ubyte
20c14                 | _pspeek
20c14     00 CA 05 F6 | 	mov	COUNT_, #0
20c18     E8 00 A0 FD | 	call	#pushregs_
20c1c     0C F0 07 F1 | 	add	ptra, #12
20c20     49 95 02 F6 | 	mov	arg02, arg01
20c24     E7 92 02 F6 | 	mov	arg01, fp
20c28     08 92 06 F1 | 	add	arg01, #8
20c2c     D9 94 06 F4 | 	bitl	arg02, #217
20c30     01 96 06 F6 | 	mov	arg03, #1
20c34     0B 00 00 FF 
20c38     CC 64 06 F1 | 	add	objptr, ##5836
20c3c     18 2B B0 FD | 	call	#_psram_spin2_read1
20c40     0B 00 00 FF 
20c44     CC 64 86 F1 | 	sub	objptr, ##5836
20c48                 | ' return res
20c48     08 CE 05 F1 | 	add	fp, #8
20c4c     E7 7A C2 FA | 	rdbyte	result1, fp
20c50     08 CE 85 F1 | 	sub	fp, #8
20c54     E7 F0 03 F6 | 	mov	ptra, fp
20c58     F2 00 A0 FD | 	call	#popregs_
20c5c                 | _pspeek_ret
20c5c     2D 00 64 FD | 	ret
20c60                 | 
20c60                 | ' 
20c60                 | ' function pslpeek(adr as ulong) as ulong
20c60                 | _pslpeek
20c60     00 CA 05 F6 | 	mov	COUNT_, #0
20c64     E8 00 A0 FD | 	call	#pushregs_
20c68     0C F0 07 F1 | 	add	ptra, #12
20c6c     49 95 02 F6 | 	mov	arg02, arg01
20c70     E7 92 02 F6 | 	mov	arg01, fp
20c74     08 92 06 F1 | 	add	arg01, #8
20c78     D9 94 06 F4 | 	bitl	arg02, #217
20c7c     04 96 06 F6 | 	mov	arg03, #4
20c80     0B 00 00 FF 
20c84     CC 64 06 F1 | 	add	objptr, ##5836
20c88     CC 2A B0 FD | 	call	#_psram_spin2_read1
20c8c     0B 00 00 FF 
20c90     CC 64 86 F1 | 	sub	objptr, ##5836
20c94                 | ' return res
20c94     08 CE 05 F1 | 	add	fp, #8
20c98     E7 7A 02 FB | 	rdlong	result1, fp
20c9c     08 CE 85 F1 | 	sub	fp, #8
20ca0     E7 F0 03 F6 | 	mov	ptra, fp
20ca4     F2 00 A0 FD | 	call	#popregs_
20ca8                 | _pslpeek_ret
20ca8     2D 00 64 FD | 	ret
20cac                 | 
20cac                 | ' 
20cac                 | ' function psdpeek(adr as ulong) as ulong
20cac                 | _psdpeek
20cac     00 CA 05 F6 | 	mov	COUNT_, #0
20cb0     E8 00 A0 FD | 	call	#pushregs_
20cb4     0C F0 07 F1 | 	add	ptra, #12
20cb8     49 95 02 F6 | 	mov	arg02, arg01
20cbc     E7 92 02 F6 | 	mov	arg01, fp
20cc0     08 92 06 F1 | 	add	arg01, #8
20cc4     D9 94 06 F4 | 	bitl	arg02, #217
20cc8     02 96 06 F6 | 	mov	arg03, #2
20ccc     0B 00 00 FF 
20cd0     CC 64 06 F1 | 	add	objptr, ##5836
20cd4     80 2A B0 FD | 	call	#_psram_spin2_read1
20cd8     0B 00 00 FF 
20cdc     CC 64 86 F1 | 	sub	objptr, ##5836
20ce0                 | ' return res
20ce0     08 CE 05 F1 | 	add	fp, #8
20ce4     E7 7A E2 FA | 	rdword	result1, fp
20ce8     08 CE 85 F1 | 	sub	fp, #8
20cec     E7 F0 03 F6 | 	mov	ptra, fp
20cf0     F2 00 A0 FD | 	call	#popregs_
20cf4                 | _psdpeek_ret
20cf4     2D 00 64 FD | 	ret
20cf8                 | 
20cf8                 | ' 
20cf8                 | ' '' ------------------------------- USB keyboard scan to char translator
20cf8                 | ' 
20cf8                 | ' function scantochar(key)
20cf8                 | _scantochar
20cf8                 | ' 
20cf8                 | ' select case (key shr 8) and 255
20cf8     49 81 02 F6 | 	mov	_var01, arg01
20cfc     08 80 C6 F0 | 	sar	_var01, #8
20d00     FF 80 0E F5 | 	and	_var01, #255 wz
20d04     24 00 90 AD |  if_e	jmp	#LR__2660
20d08     02 80 0E F2 | 	cmp	_var01, #2 wz
20d0c     20 80 0E 52 |  if_ne	cmp	_var01, #32 wz
20d10     30 00 90 AD |  if_e	jmp	#LR__2661
20d14     40 80 0E F2 | 	cmp	_var01, #64 wz
20d18     44 00 90 AD |  if_e	jmp	#LR__2662
20d1c     42 80 0E F2 | 	cmp	_var01, #66 wz
20d20     60 80 0E 52 |  if_ne	cmp	_var01, #96 wz
20d24     70 00 90 5D |  if_ne	jmp	#LR__2664
20d28     50 00 90 FD | 	jmp	#LR__2663
20d2c                 | LR__2660
20d2c     49 7B 02 F6 | 	mov	result1, arg01
20d30     7F 7A 06 F5 | 	and	result1, #127
20d34     02 7A 66 F0 | 	shl	result1, #2
20d38     35 7B 02 F1 | 	add	result1, ptr__dat__
20d3c     3D 7B C2 FA | 	rdbyte	result1, result1
20d40     54 00 90 FD | 	jmp	#_scantochar_ret
20d44                 | LR__2661
20d44     49 7B 02 F6 | 	mov	result1, arg01
20d48     7F 7A 06 F5 | 	and	result1, #127
20d4c     02 7A 66 F0 | 	shl	result1, #2
20d50     01 7A 06 F1 | 	add	result1, #1
20d54     35 7B 02 F1 | 	add	result1, ptr__dat__
20d58     3D 7B C2 FA | 	rdbyte	result1, result1
20d5c     38 00 90 FD | 	jmp	#_scantochar_ret
20d60                 | LR__2662
20d60     49 7B 02 F6 | 	mov	result1, arg01
20d64     7F 7A 06 F5 | 	and	result1, #127
20d68     02 7A 66 F0 | 	shl	result1, #2
20d6c     02 7A 06 F1 | 	add	result1, #2
20d70     35 7B 02 F1 | 	add	result1, ptr__dat__
20d74     3D 7B C2 FA | 	rdbyte	result1, result1
20d78     1C 00 90 FD | 	jmp	#_scantochar_ret
20d7c                 | LR__2663
20d7c     49 7B 02 F6 | 	mov	result1, arg01
20d80     7F 7A 06 F5 | 	and	result1, #127
20d84     02 7A 66 F0 | 	shl	result1, #2
20d88     03 7A 06 F1 | 	add	result1, #3
20d8c     35 7B 02 F1 | 	add	result1, ptr__dat__
20d90     3D 7B C2 FA | 	rdbyte	result1, result1
20d94     00 00 90 FD | 	jmp	#_scantochar_ret
20d98                 | LR__2664
20d98                 | _scantochar_ret
20d98     2D 00 64 FD | 	ret
20d9c                 | 
20d9c                 | _program
20d9c     03 CA 05 F6 | 	mov	COUNT_, #3
20da0     E8 00 A0 FD | 	call	#pushregs_
20da4     8C FC BF FD | 	call	#_startpsram
20da8     38 00 00 FF 
20dac     B8 65 06 F1 | 	add	objptr, ##29112
20db0     32 93 02 FB | 	rdlong	arg01, objptr
20db4     00 94 06 F6 | 	mov	arg02, #0
20db8     F0 03 00 FF 
20dbc     00 96 06 F6 | 	mov	arg03, ##516096
20dc0     2D 00 00 FF 
20dc4     EC 64 86 F1 | 	sub	objptr, ##23276
20dc8     24 2F B0 FD | 	call	#_Audio2_004_spin2_start
20dcc     3E 97 02 F6 | 	mov	arg03, result2
20dd0     2D 00 00 FF 
20dd4     D4 64 06 F1 | 	add	objptr, ##23252
20dd8     32 7B 62 FC | 	wrlong	result1, objptr
20ddc     14 64 06 F1 | 	add	objptr, #20
20de0     32 97 62 FC | 	wrlong	arg03, objptr
20de4     38 00 00 FF 
20de8     B4 65 86 F1 | 	sub	objptr, ##29108
20dec     32 92 06 F6 | 	mov	arg01, #50
20df0     90 3C B0 FD | 	call	#__system___waitms
20df4     98 2C B0 FD | 	call	#_usbnew_spin2_start
20df8     38 00 00 FF 
20dfc     A8 65 06 F1 | 	add	objptr, ##29096
20e00     32 7B 62 FC | 	wrlong	result1, objptr
20e04     38 00 00 FF 
20e08     A8 65 86 F1 | 	sub	objptr, ##29096
20e0c     40 92 06 F6 | 	mov	arg01, #64
20e10     00 94 06 F6 | 	mov	arg02, #0
20e14     00 96 06 F6 | 	mov	arg03, #0
20e18     54 FC BF FD | 	call	#_startvideo
20e1c                 | '   mouse_limits[0] := xlim
20e1c     0F 00 00 FF 
20e20     C8 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7880
20e24     01 00 80 FF 
20e28     3B FF 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
20e2c                 | '   mouse_limits[1] := ylim
20e2c     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
20e30     01 00 80 FF 
20e34     3B AF 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
20e38     32 93 02 F6 | 	mov	arg01, objptr
20e3c     D5 93 06 F1 | 	add	arg01, #469
20e40                 | '   mouse_outptr := ptr
20e40     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
20e44     3B 93 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
20e48     0F 00 00 FF 
20e4c     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
20e50     35 95 02 F6 | 	mov	arg02, ptr__dat__
20e54     16 00 00 FF 
20e58     CA 94 06 F1 | 	add	arg02, ##11466
20e5c     10 92 06 F6 | 	mov	arg01, #16
20e60     08 0B B0 FD | 	call	#_hg010b_spin2_setspriteptr
20e64     10 92 06 F6 | 	mov	arg01, #16
20e68     20 94 06 F6 | 	mov	arg02, #32
20e6c     20 96 06 F6 | 	mov	arg03, #32
20e70     84 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
20e74     09 92 C6 F9 | 	decod	arg01, #9
20e78     2C 95 06 F6 | 	mov	arg02, #300
20e7c     64 2D B0 FD | 	call	#_usbnew_spin2_mouse_move
20e80     32 97 02 F6 | 	mov	arg03, objptr
20e84     52 00 00 FF 
20e88     E8 64 06 F1 | 	add	objptr, ##42216
20e8c     32 95 02 F6 | 	mov	arg02, objptr
20e90     4A 97 62 FC | 	wrlong	arg03, arg02
20e94     04 94 06 F1 | 	add	arg02, #4
20e98     4A 71 62 FC | 	wrlong	ptr__housekeeper_, arg02
20e9c     2F 95 02 F6 | 	mov	arg02, entryptr__
20ea0     1E 7A 06 F6 | 	mov	result1, #30
20ea4     28 64 62 FD | 	setq	objptr
20ea8     4A 7B F2 FC | 	coginit	result1, arg02 wc
20eac     01 7A 66 C6 |  if_b	neg	result1, #1
20eb0     04 64 86 F1 | 	sub	objptr, #4
20eb4     32 7B 62 FC | 	wrlong	result1, objptr
20eb8     01 00 00 FF 
20ebc     8C 65 06 F1 | 	add	objptr, ##908
20ec0     32 01 68 FC | 	wrlong	#0, objptr
20ec4     1B 00 00 FF 
20ec8     98 64 86 F1 | 	sub	objptr, ##13976
20ecc     32 05 68 FC | 	wrlong	#2, objptr
20ed0     04 64 06 F1 | 	add	objptr, #4
20ed4     32 27 69 FC | 	wrlong	#147, objptr
20ed8     04 64 06 F1 | 	add	objptr, #4
20edc     32 35 69 FC | 	wrlong	#154, objptr
20ee0     04 64 06 F1 | 	add	objptr, #4
20ee4     32 09 68 FC | 	wrlong	#4, objptr
20ee8     04 64 86 F1 | 	sub	objptr, #4
20eec     32 7B 02 FB | 	rdlong	result1, objptr
20ef0     14 64 86 F1 | 	sub	objptr, #20
20ef4     32 7B 62 FC | 	wrlong	result1, objptr
20ef8     04 64 06 F1 | 	add	objptr, #4
20efc     32 01 68 FC | 	wrlong	#0, objptr
20f00     04 64 06 F1 | 	add	objptr, #4
20f04     32 01 68 FC | 	wrlong	#0, objptr
20f08     19 00 00 FF 
20f0c     0C 65 06 F1 | 	add	objptr, ##13068
20f10     32 03 68 FC | 	wrlong	#1, objptr
20f14     01 00 00 FF 
20f18     98 65 06 F1 | 	add	objptr, ##920
20f1c     32 01 68 FC | 	wrlong	#0, objptr
20f20     35 97 02 F6 | 	mov	arg03, ptr__dat__
20f24     01 00 00 FF 
20f28     00 96 06 F1 | 	add	arg03, ##512
20f2c     08 64 06 F1 | 	add	objptr, #8
20f30     32 97 62 FC | 	wrlong	arg03, objptr
20f34     04 64 86 F1 | 	sub	objptr, #4
20f38     03 00 80 FF 
20f3c     32 3D 69 FC | 	wrlong	##1694, objptr
20f40     0D 00 00 FF 
20f44     74 64 86 F1 | 	sub	objptr, ##6772
20f48     32 19 68 FC | 	wrlong	#12, objptr
20f4c     47 00 00 FF 
20f50     08 64 86 F1 | 	sub	objptr, ##36360
20f54     60 D7 BF FD | 	call	#_init_commands
20f58     AC F6 BF FD | 	call	#_init_error_strings
20f5c     14 EE BF FD | 	call	#_init_audio
20f60     C4 41 BF FD | 	call	#_do_new
20f64     38 00 00 FF 
20f68     E0 65 06 F1 | 	add	objptr, ##29152
20f6c     32 93 02 FB | 	rdlong	arg01, objptr
20f70     04 64 86 F1 | 	sub	objptr, #4
20f74     32 95 02 FB | 	rdlong	arg02, objptr
20f78     38 00 00 FF 
20f7c     DC 65 86 F1 | 	sub	objptr, ##29148
20f80     0C 18 B0 FD | 	call	#_hg010b_spin2_cls
20f84     38 00 00 FF 
20f88     E4 65 06 F1 | 	add	objptr, ##29156
20f8c     32 93 02 FB | 	rdlong	arg01, objptr
20f90     38 00 00 FF 
20f94     E4 65 86 F1 | 	sub	objptr, ##29156
20f98     28 16 B0 FD | 	call	#_hg010b_spin2_setfontfamily
20f9c                 | ' 
20f9c                 | ' leading_spaces:=amount
20f9c     01 00 00 FF 
20fa0     B6 64 06 F1 | 	add	objptr, ##694
20fa4     32 05 68 FC | 	wrlong	#2, objptr
20fa8     01 00 00 FF 
20fac     B6 64 86 F1 | 	sub	objptr, ##694
20fb0     9A 01 00 FF 
20fb4     CB A6 06 F6 | 	mov	local01, ##@LR__6152
20fb8     3D 92 06 F6 | 	mov	arg01, #61
20fbc     3C 94 06 F6 | 	mov	arg02, #60
20fc0     3B 96 06 F6 | 	mov	arg03, #59
20fc4     3A 98 06 F6 | 	mov	arg04, #58
20fc8     CC 7E B0 FD | 	call	#__system___vfs_open_sdcardx
20fcc     3D 95 02 F6 | 	mov	arg02, result1
20fd0     53 93 02 F6 | 	mov	arg01, local01
20fd4     84 3B B0 FD | 	call	#__system___mount
20fd8     9A 01 00 FF 
20fdc     CF 92 06 F6 | 	mov	arg01, ##@LR__6153
20fe0     3C 3E B0 FD | 	call	#__system___chdir
20fe4     9A 01 00 FF 
20fe8     D7 A6 06 F6 | 	mov	local01, ##@LR__6154
20fec     4C 00 00 FF 
20ff0     38 64 06 F1 | 	add	objptr, ##38968
20ff4     32 A7 62 FC | 	wrlong	local01, objptr
20ff8     13 00 00 FF 
20ffc     60 64 86 F1 | 	sub	objptr, ##9824
21000     32 93 02 FB | 	rdlong	arg01, objptr
21004     38 00 00 FF 
21008     D8 65 86 F1 | 	sub	objptr, ##29144
2100c     01 92 66 F0 | 	shl	arg01, #1
21010     01 94 06 F6 | 	mov	arg02, #1
21014     2C 16 B0 FD | 	call	#_hg010b_spin2_setcursorpos
21018                 | ' init_commands
21018                 | ' init_error_strings
21018                 | ' init_audio
21018                 | ' do_new
21018                 | ' cls(ink, paper)
21018                 | ' v.setfontfamily(font) 				' use ST Mono font
21018                 | ' v.setleadingspaces(2)
21018                 | ' mount "/sd", _vfs_open_sdcard()
21018                 | ' chdir "/sd/bas"
21018                 | ' currentdir$="/sd/bas"
21018                 | ' position 2*editor_spaces,1 : print ver$
21018     00 92 06 F6 | 	mov	arg01, #0
2101c     F4 8C B0 FD | 	call	#__system___getiolock_0622
21020     3D 93 02 F6 | 	mov	arg01, result1
21024     68 37 B0 FD | 	call	#__system___lockmem
21028     18 00 00 FF 
2102c     40 6B 06 F1 | 	add	ptr__dat__, ##12608
21030     35 95 02 FB | 	rdlong	arg02, ptr__dat__
21034     18 00 00 FF 
21038     40 6B 86 F1 | 	sub	ptr__dat__, ##12608
2103c     00 92 06 F6 | 	mov	arg01, #0
21040     00 96 06 F6 | 	mov	arg03, #0
21044     3C 44 B0 FD | 	call	#__system___basic_print_string
21048     00 92 06 F6 | 	mov	arg01, #0
2104c     0A 94 06 F6 | 	mov	arg02, #10
21050     00 96 06 F6 | 	mov	arg03, #0
21054     D4 43 B0 FD | 	call	#__system___basic_print_char
21058     00 92 06 F6 | 	mov	arg01, #0
2105c     B4 8C B0 FD | 	call	#__system___getiolock_0622
21060     3D 01 68 FC | 	wrlong	#0, result1
21064     54 00 00 FF 
21068     74 64 06 F1 | 	add	objptr, ##43124
2106c     32 93 02 FB | 	rdlong	arg01, objptr
21070     0F 00 00 FF 
21074     74 64 86 F1 | 	sub	objptr, ##7796
21078     32 A7 02 FB | 	rdlong	local01, objptr
2107c     45 00 00 FF 
21080     00 64 86 F1 | 	sub	objptr, ##35328
21084     53 93 82 F1 | 	sub	arg01, local01
21088     00 94 06 F6 | 	mov	arg02, #0
2108c     0A 96 06 F6 | 	mov	arg03, #10
21090     F8 51 B0 FD | 	call	#__system__Number_S
21094     3D 93 02 F6 | 	mov	arg01, result1
21098     9A 01 00 FF 
2109c     DF 94 06 F6 | 	mov	arg02, ##@LR__6155
210a0     48 37 B0 FD | 	call	#__system___string_concat
210a4     3D A7 02 F6 | 	mov	local01, result1
210a8     52 00 00 FF 
210ac     DC 64 06 F1 | 	add	objptr, ##42204
210b0     32 A7 62 FC | 	wrlong	local01, objptr
210b4     52 00 00 FF 
210b8     DC 64 86 F1 | 	sub	objptr, ##42204
210bc                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
210bc     00 92 06 F6 | 	mov	arg01, #0
210c0     50 8C B0 FD | 	call	#__system___getiolock_0622
210c4     3D 93 02 F6 | 	mov	arg01, result1
210c8     C4 36 B0 FD | 	call	#__system___lockmem
210cc     52 00 00 FF 
210d0     DC 64 06 F1 | 	add	objptr, ##42204
210d4     32 95 02 FB | 	rdlong	arg02, objptr
210d8     52 00 00 FF 
210dc     DC 64 86 F1 | 	sub	objptr, ##42204
210e0     00 92 06 F6 | 	mov	arg01, #0
210e4     00 96 06 F6 | 	mov	arg03, #0
210e8     98 43 B0 FD | 	call	#__system___basic_print_string
210ec     00 92 06 F6 | 	mov	arg01, #0
210f0     0A 94 06 F6 | 	mov	arg02, #10
210f4     00 96 06 F6 | 	mov	arg03, #0
210f8     30 43 B0 FD | 	call	#__system___basic_print_char
210fc     00 92 06 F6 | 	mov	arg01, #0
21100     10 8C B0 FD | 	call	#__system___getiolock_0622
21104     3D 01 68 FC | 	wrlong	#0, result1
21108     38 00 00 FF 
2110c     D8 65 06 F1 | 	add	objptr, ##29144
21110     32 93 02 FB | 	rdlong	arg01, objptr
21114     38 00 00 FF 
21118     D8 65 86 F1 | 	sub	objptr, ##29144
2111c     01 92 66 F0 | 	shl	arg01, #1
21120     04 94 06 F6 | 	mov	arg02, #4
21124     1C 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
21128                 | ' position 2*editor_spaces,4 : print "Ready"
21128     00 92 06 F6 | 	mov	arg01, #0
2112c     E4 8B B0 FD | 	call	#__system___getiolock_0622
21130     3D 93 02 F6 | 	mov	arg01, result1
21134     58 36 B0 FD | 	call	#__system___lockmem
21138     9A 01 00 FF 
2113c     F1 94 06 F6 | 	mov	arg02, ##@LR__6156
21140     00 92 06 F6 | 	mov	arg01, #0
21144     00 96 06 F6 | 	mov	arg03, #0
21148     38 43 B0 FD | 	call	#__system___basic_print_string
2114c     00 92 06 F6 | 	mov	arg01, #0
21150     0A 94 06 F6 | 	mov	arg02, #10
21154     00 96 06 F6 | 	mov	arg03, #0
21158     D0 42 B0 FD | 	call	#__system___basic_print_char
2115c     00 92 06 F6 | 	mov	arg01, #0
21160     B0 8B B0 FD | 	call	#__system___getiolock_0622
21164     3D 01 68 FC | 	wrlong	#0, result1
21168     00 94 06 F6 | 	mov	arg02, #0
2116c     01 94 D6 F7 | 	test	arg02, #1 wc
21170     5A 4C 64 FD | 	drvc	#38
21174     01 94 D6 F7 | 	test	arg02, #1 wc
21178     5A 4E 64 FD | 	drvc	#39
2117c     9A 01 00 FF 
21180     F7 A6 06 F6 | 	mov	local01, ##@LR__6157
21184     54 00 00 FF 
21188     A0 64 06 F1 | 	add	objptr, ##43168
2118c     32 A7 62 FC | 	wrlong	local01, objptr
21190     04 64 06 F1 | 	add	objptr, #4
21194     FF FF FF FF 
21198     32 FF 6B FC | 	wrlong	##-1, objptr
2119c     0C 64 06 F1 | 	add	objptr, #12
211a0     32 01 68 FC | 	wrlong	#0, objptr
211a4                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
211a4                 | ' loadname="noname.bas"
211a4                 | ' do_insert=-1
211a4                 | ' inload=0
211a4                 | ' for i=0 to 1 : beepsample(i)=32767  : next i : for i=2 to 3: beepsample(i)=-32767 : next i
211a4     00 A8 06 F6 | 	mov	local02, #0
211a8     3E 00 00 FF 
211ac     18 64 86 F1 | 	sub	objptr, ##31768
211b0     D7 10 48 FB | 	callpa	#(@LR__2671-@LR__2670)>>2,fcache_load_ptr_
211b4                 | LR__2670
211b4     54 AB 02 F6 | 	mov	local03, local02
211b8     01 AA 66 F0 | 	shl	local03, #1
211bc     32 AB 02 F1 | 	add	local03, objptr
211c0     3F 00 80 FF 
211c4     55 FF 5B FC | 	wrword	##32767, local03
211c8     01 A8 06 F1 | 	add	local02, #1
211cc     02 A8 56 F2 | 	cmps	local02, #2 wc
211d0     E0 FF 9F CD |  if_b	jmp	#LR__2670
211d4                 | LR__2671
211d4     02 A8 06 F6 | 	mov	local02, #2
211d8     D7 10 48 FB | 	callpa	#(@LR__2673-@LR__2672)>>2,fcache_load_ptr_
211dc                 | LR__2672
211dc     54 AB 02 F6 | 	mov	local03, local02
211e0     01 AA 66 F0 | 	shl	local03, #1
211e4     32 AB 02 F1 | 	add	local03, objptr
211e8     40 00 80 FF 
211ec     55 03 58 FC | 	wrword	##32769, local03
211f0     01 A8 06 F1 | 	add	local02, #1
211f4     04 A8 16 F2 | 	cmp	local02, #4 wc
211f8     E0 FF 9F CD |  if_b	jmp	#LR__2672
211fc                 | LR__2673
211fc     16 00 00 FF 
21200     98 64 86 F1 | 	sub	objptr, ##11416
21204                 | ' 
21204                 | ' open "/sd/bas/autorun.bas" for input as #9
21204     9A 01 00 FF 
21208     02 95 06 F6 | 	mov	arg02, ##@LR__6158
2120c     09 92 06 F6 | 	mov	arg01, #9
21210     00 96 06 F6 | 	mov	arg03, #0
21214     28 41 B0 FD | 	call	#__system___basic_open_string
21218     20 68 06 F1 | 	add	ptr___system__dat__, #32
2121c     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
21220     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
21224     20 68 86 F1 | 	sub	ptr___system__dat__, #32
21228     54 00 00 FF 
2122c     B4 64 06 F1 | 	add	objptr, ##43188
21230     32 7B 62 FC | 	wrlong	result1, objptr
21234     54 00 00 FF 
21238     B4 64 86 F1 | 	sub	objptr, ##43188
2123c                 | ' err=geterr()
2123c                 | ' close #9
2123c     09 92 06 F6 | 	mov	arg01, #9
21240     28 81 B0 FD | 	call	#__system__close
21244                 | ' if err=0 then line$="run autorun.bas" : interpret
21244     54 00 00 FF 
21248     B4 64 06 F1 | 	add	objptr, ##43188
2124c     32 A7 0A FB | 	rdlong	local01, objptr wz
21250     54 00 00 FF 
21254     B4 64 86 F1 | 	sub	objptr, ##43188
21258     9A 01 00 AF 
2125c     16 A7 06 A6 |  if_e	mov	local01, ##@LR__6159
21260     38 00 00 AF 
21264     C0 65 06 A1 |  if_e	add	objptr, ##29120
21268     32 A7 62 AC |  if_e	wrlong	local01, objptr
2126c     38 00 00 AF 
21270     C0 65 86 A1 |  if_e	sub	objptr, ##29120
21274     D0 06 BE AD |  if_e	call	#_interpret
21278                 | ' 
21278                 | ' 
21278                 | ' '-------------------------------------------------------------------------------------------------------- 
21278                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
21278                 | ' '--------------------------------------------------------------------------------------------------------
21278                 | ' 
21278                 | ' do
21278                 | LR__2674
21278     88 F6 BD FD | 	call	#_edit
2127c     3D A7 02 F6 | 	mov	local01, result1
21280     38 00 00 FF 
21284     C0 65 06 F1 | 	add	objptr, ##29120
21288     32 A7 62 FC | 	wrlong	local01, objptr
2128c     38 00 00 FF 
21290     C0 65 86 F1 | 	sub	objptr, ##29120
21294     B0 06 BE FD | 	call	#_interpret
21298     9A 01 00 FF 
2129c     26 A7 06 F6 | 	mov	local01, ##@LR__6160
212a0     38 00 00 FF 
212a4     C0 65 06 F1 | 	add	objptr, ##29120
212a8     32 A7 62 FC | 	wrlong	local01, objptr
212ac     38 00 00 FF 
212b0     C0 65 86 F1 | 	sub	objptr, ##29120
212b4     C0 FF 9F FD | 	jmp	#LR__2674
212b8     E7 F0 03 F6 | 	mov	ptra, fp
212bc     F2 00 A0 FD | 	call	#popregs_
212c0                 | _program_ret
212c0     2D 00 64 FD | 	ret
212c4                 | 
212c4                 | ' '' this is not a main program.
212c4                 | ' 
212c4                 | ' '****************************************************************************************************************
212c4                 | ' '                                                                                                             	*
212c4                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
212c4                 | ' '                                                                                                            	*
212c4                 | ' ' base - HDMI base pin												*
212c4                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
212c4                 | ' '														*
212c4                 | ' '														*
212c4                 | ' '****************************************************************************************************************
212c4                 | ' 
212c4                 | ' pub start(base,mb):result |i
212c4                 | _hg010b_spin2_start
212c4                 | ' 
212c4                 | ' '--------------------------- initialize pointers and variables
212c4                 | ' 
212c4                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
212c4     34 64 06 F1 | 	add	objptr, #52
212c8     32 7B 02 F6 | 	mov	result1, objptr
212cc     28 64 86 F1 | 	sub	objptr, #40
212d0     32 7B 62 FC | 	wrlong	result1, objptr
212d4                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
212d4                 | ' hdmibase:=base							' HDMI base pin, 8*n
212d4     18 64 06 F1 | 	add	objptr, #24
212d8     32 93 62 FC | 	wrlong	arg01, objptr
212dc                 | ' mailbox_ptr:=mb		
212dc     04 64 06 F1 | 	add	objptr, #4
212e0     32 95 62 FC | 	wrlong	arg02, objptr
212e4                 | ' mailbox0:=mb				' PSRAM mailbox pointer
212e4     C1 65 06 F1 | 	add	objptr, #449
212e8     32 95 62 FC | 	wrlong	arg02, objptr
212ec                 | ' sprite_ptr:=@spr1ptr
212ec     D8 64 86 F1 | 	sub	objptr, #216
212f0     32 7B 02 F6 | 	mov	result1, objptr
212f4     E5 64 86 F1 | 	sub	objptr, #229
212f8     32 7B 62 FC | 	wrlong	result1, objptr
212fc                 | ' 
212fc                 | ' 		'
212fc                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
212fc     E5 64 06 F1 | 	add	objptr, #229
21300     32 7B 02 FB | 	rdlong	result1, objptr
21304     D0 7A 06 F1 | 	add	result1, #208
21308     3D 11 58 FC | 	wrword	#8, result1
2130c                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
2130c     32 97 02 FB | 	rdlong	arg03, objptr
21310     D2 96 06 F1 | 	add	arg03, #210
21314     4B 21 58 FC | 	wrword	#16, arg03
21318                 | ' leading_spaces:=0				'
21318     A5 65 06 F1 | 	add	objptr, #421
2131c     32 01 68 FC | 	wrlong	#0, objptr
21320                 | ' 
21320                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
21320     99 64 86 F1 | 	sub	objptr, #153
21324     00 00 A0 FF 
21328     32 0F 68 FC | 	wrlong	##1073741831, objptr
2132c                 | ' emptydl[1]:=0
2132c     04 64 06 F1 | 	add	objptr, #4
21330     32 01 68 FC | 	wrlong	#0, objptr
21334                 | ' 
21334                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
21334                 | ' 
21334                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
21334     28 65 86 F1 | 	sub	objptr, #296
21338     32 03 68 FC | 	wrlong	#1, objptr
2133c                 | ' if s_debug<>0
2133c                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
2133c     20 00 80 FF 
21340     32 01 68 FC | 	wrlong	##16384, objptr
21344     F9 64 86 F1 | 	sub	objptr, #249
21348                 | ' setmode()							' set the mode, see below
21348     18 03 B0 FD | 	call	#_hg010b_spin2_setmode
2134c                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
2134c     49 64 06 F1 | 	add	objptr, #73
21350     32 7B 02 F6 | 	mov	result1, objptr
21354     35 64 86 F1 | 	sub	objptr, #53
21358     32 7B 62 FC | 	wrlong	result1, objptr
2135c                 | ' cursor_ptr:=@cursor_x						
2135c     28 64 06 F1 | 	add	objptr, #40
21360     32 97 02 F6 | 	mov	arg03, objptr
21364     2C 64 86 F1 | 	sub	objptr, #44
21368     32 97 62 FC | 	wrlong	arg03, objptr
2136c                 | ' fontnum:=0  							' start with a PC type font 
2136c     55 64 06 F1 | 	add	objptr, #85
21370     32 01 68 FC | 	wrlong	#0, objptr
21374                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
21374     1C 64 06 F1 | 	add	objptr, #28
21378     32 93 02 F6 | 	mov	arg01, objptr
2137c     81 64 86 F1 | 	sub	objptr, #129
21380     37 95 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
21384     1C 00 00 FF 
21388     80 94 06 F1 | 	add	arg02, ##14464
2138c     10 96 06 F6 | 	mov	arg03, #16
21390     AC 32 B0 FD | 	call	#__system____builtin_memmove
21394                 | ' leading_spaces:=0
21394     01 00 00 FF 
21398     B6 64 06 F1 | 	add	objptr, ##694
2139c     32 01 68 FC | 	wrlong	#0, objptr
213a0     01 00 00 FF 
213a4     B6 64 86 F1 | 	sub	objptr, ##694
213a8                 | ' '---------------------------- initialize a cursor (MSDOS type)
213a8                 | ' 
213a8                 | ' initcursor(154)
213a8     9A 92 06 F6 | 	mov	arg01, #154
213ac     74 00 B0 FD | 	call	#_hg010b_spin2_initcursor
213b0                 | ' 
213b0                 | ' '---------------------------- start the cog
213b0                 | ' 
213b0                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
213b0     37 95 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
213b4     1C 00 00 FF 
213b8     90 94 06 F1 | 	add	arg02, ##14480
213bc     32 97 02 F6 | 	mov	arg03, objptr
213c0     14 96 06 F1 | 	add	arg03, #20
213c4     10 7A 06 F6 | 	mov	result1, #16
213c8     28 96 62 FD | 	setq	arg03
213cc     4A 7B F2 FC | 	coginit	result1, arg02 wc
213d0     01 7A 66 C6 |  if_b	neg	result1, #1
213d4     30 64 06 F1 | 	add	objptr, #48
213d8     32 7B 62 FC | 	wrlong	result1, objptr
213dc     30 64 86 F1 | 	sub	objptr, #48
213e0                 | ' waitms(40)							' wait for stabilize
213e0     28 92 06 F6 | 	mov	arg01, #40
213e4     9C 36 B0 FD | 	call	#__system___waitms
213e8                 | ' return cog							' return the driver's cog #
213e8     30 64 06 F1 | 	add	objptr, #48
213ec     32 7B 02 FB | 	rdlong	result1, objptr
213f0     30 64 86 F1 | 	sub	objptr, #48
213f4                 | _hg010b_spin2_start_ret
213f4     2D 00 64 FD | 	ret
213f8                 | 
213f8                 | ' 
213f8                 | ' 
213f8                 | ' '**************************************************************************************************************** 
213f8                 | ' '                                                                                                             	*
213f8                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
213f8                 | ' '  Mode number - see start() above or bits below								*
213f8                 | ' '                                                                                                             	*
213f8                 | ' '****************************************************************************************************************
213f8                 | ' 
213f8                 | ' 
213f8                 | ' pub restorepalette()
213f8                 | _hg010b_spin2_restorepalette
213f8                 | ' 
213f8                 | ' longmove(@ataripalette,@ataripalette2,256)
213f8     18 00 00 FF 
213fc     40 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##12352
21400     37 93 02 F6 | 	mov	arg01, ptr__hg010b_spin2_dat__
21404     02 00 00 FF 
21408     00 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
2140c     37 95 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
21410     1A 00 00 FF 
21414     40 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##13376
21418     00 97 06 F6 | 	mov	arg03, #256
2141c     B4 32 B0 FD | 	call	#__system__longmove
21420                 | _hg010b_spin2_restorepalette_ret
21420     2D 00 64 FD | 	ret
21424                 | 
21424                 | ' 
21424                 | ' '---------------------------- initialize a cursor (MSDOS type)
21424                 | ' pub initcursor(color) |i
21424                 | _hg010b_spin2_initcursor
21424     03 CA 05 F6 | 	mov	COUNT_, #3
21428     E8 00 A0 FD | 	call	#pushregs_
2142c     49 A7 02 F6 | 	mov	local01, arg01
21430                 | ' 
21430                 | ' cursor_x:=0							' place the cursor at 0:0
21430     3C 64 06 F1 | 	add	objptr, #60
21434     32 01 58 FC | 	wrword	#0, objptr
21438                 | ' cursor_y:=0
21438     02 64 06 F1 | 	add	objptr, #2
2143c     32 01 48 FC | 	wrbyte	#0, objptr
21440                 | ' repeat i from 0 to 111
21440     00 A8 06 F6 | 	mov	local02, #0
21444     F8 65 06 F1 | 	add	objptr, #504
21448     D7 0C 48 FB | 	callpa	#(@LR__2681-@LR__2680)>>2,fcache_load_ptr_
2144c                 | LR__2680
2144c                 | '   cursor[i]:=0
2144c     54 AB 02 F6 | 	mov	local03, local02
21450     32 AB 02 F1 | 	add	local03, objptr
21454     55 01 48 FC | 	wrbyte	#0, local03
21458     01 A8 06 F1 | 	add	local02, #1
2145c     70 A8 56 F2 | 	cmps	local02, #112 wc
21460     E8 FF 9F CD |  if_b	jmp	#LR__2680
21464                 | LR__2681
21464                 | ' repeat i from 112 to 127
21464     70 A8 06 F6 | 	mov	local02, #112
21468     D7 0C 48 FB | 	callpa	#(@LR__2683-@LR__2682)>>2,fcache_load_ptr_
2146c                 | LR__2682
2146c                 | '   cursor[i]:=color  
2146c     54 AB 02 F6 | 	mov	local03, local02
21470     32 AB 02 F1 | 	add	local03, objptr
21474     55 A7 42 FC | 	wrbyte	local01, local03
21478     01 A8 06 F1 | 	add	local02, #1
2147c     80 A8 16 F2 | 	cmp	local02, #128 wc
21480     E8 FF 9F CD |  if_b	jmp	#LR__2682
21484                 | LR__2683
21484     01 00 00 FF 
21488     36 64 86 F1 | 	sub	objptr, ##566
2148c                 | ' 'repeat i from 0 to 127
2148c                 | ' '  if ((i/8)//2)
2148c                 | ' '    cursor[i]:=15
2148c                 | ' '  else
2148c                 | ' '    cursor[i]:=0
2148c                 | ' '  if i>=120    
2148c                 | ' '    cursor[i]:=40
2148c                 | ' setspriteptr(17,@cursor)
2148c     32 95 02 F6 | 	mov	arg02, objptr
21490     01 00 00 FF 
21494     36 94 06 F1 | 	add	arg02, ##566
21498     11 92 06 F6 | 	mov	arg01, #17
2149c     CC 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
214a0                 | ' setspritesize(17,8,16)
214a0     11 92 06 F6 | 	mov	arg01, #17
214a4     08 94 06 F6 | 	mov	arg02, #8
214a8     10 96 06 F6 | 	mov	arg03, #16
214ac     48 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
214b0                 | ' setspritepos(17,0,0)
214b0     11 92 06 F6 | 	mov	arg01, #17
214b4     00 94 06 F6 | 	mov	arg02, #0
214b8     00 96 06 F6 | 	mov	arg03, #0
214bc     D0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
214c0                 | ' cursorshape:=14
214c0     0B 00 00 FF 
214c4     C6 64 06 F1 | 	add	objptr, ##5830
214c8     32 1D 68 FC | 	wrlong	#14, objptr
214cc                 | ' cursorcolor:=color
214cc     04 64 86 F1 | 	sub	objptr, #4
214d0     32 A7 62 FC | 	wrlong	local01, objptr
214d4     0B 00 00 FF 
214d8     C2 64 86 F1 | 	sub	objptr, ##5826
214dc     E7 F0 03 F6 | 	mov	ptra, fp
214e0     F2 00 A0 FD | 	call	#popregs_
214e4                 | _hg010b_spin2_initcursor_ret
214e4     2D 00 64 FD | 	ret
214e8                 | 
214e8                 | ' 
214e8                 | ' pub setcursorshape(shape) | i
214e8                 | _hg010b_spin2_setcursorshape
214e8                 | ' 
214e8                 | ' cursorshape:=shape
214e8     0B 00 00 FF 
214ec     C6 64 06 F1 | 	add	objptr, ##5830
214f0     32 93 62 FC | 	wrlong	arg01, objptr
214f4                 | ' repeat i from 0 to (8*cursorshape)-1
214f4     00 80 06 F6 | 	mov	_var01, #0
214f8     49 83 02 F6 | 	mov	_var02, arg01
214fc     03 82 66 F0 | 	shl	_var02, #3
21500     01 82 86 F1 | 	sub	_var02, #1
21504     00 82 56 F2 | 	cmps	_var02, #0 wc
21508     01 84 86 F6 | 	negc	_var03, #1
2150c     42 87 02 F6 | 	mov	_var04, _var03
21510     42 83 02 F1 | 	add	_var02, _var03
21514     0A 00 00 FF 
21518     90 64 86 F1 | 	sub	objptr, ##5264
2151c     D7 0C 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
21520                 | LR__2690
21520                 | '   cursor[i]:=0
21520     40 85 02 F6 | 	mov	_var03, _var01
21524     32 85 02 F1 | 	add	_var03, objptr
21528     42 01 48 FC | 	wrbyte	#0, _var03
2152c     43 81 02 F1 | 	add	_var01, _var04
21530     41 81 0A F2 | 	cmp	_var01, _var02 wz
21534     E8 FF 9F 5D |  if_ne	jmp	#LR__2690
21538                 | LR__2691
21538                 | ' repeat i from 8*cursorshape to 127
21538     0A 00 00 FF 
2153c     90 64 06 F1 | 	add	objptr, ##5264
21540     32 87 02 FB | 	rdlong	_var04, objptr
21544     43 81 02 F6 | 	mov	_var01, _var04
21548     03 80 66 F0 | 	shl	_var01, #3
2154c     0B 00 00 FF 
21550     C6 64 86 F1 | 	sub	objptr, ##5830
21554     03 86 66 F0 | 	shl	_var04, #3
21558     80 86 56 F2 | 	cmps	_var04, #128 wc
2155c     01 84 A6 F6 | 	negnc	_var03, #1
21560     7F 82 06 F6 | 	mov	_var02, #127
21564     42 83 02 F1 | 	add	_var02, _var03
21568     D7 1A 48 FB | 	callpa	#(@LR__2693-@LR__2692)>>2,fcache_load_ptr_
2156c                 | LR__2692
2156c                 | '   cursor[i]:=cursorcolor
2156c     40 87 02 F6 | 	mov	_var04, _var01
21570     01 00 00 FF 
21574     36 64 06 F1 | 	add	objptr, ##566
21578     32 87 02 F1 | 	add	_var04, objptr
2157c     0A 00 00 FF 
21580     8C 64 06 F1 | 	add	objptr, ##5260
21584     32 93 02 FB | 	rdlong	arg01, objptr
21588     0B 00 00 FF 
2158c     C2 64 86 F1 | 	sub	objptr, ##5826
21590     43 93 42 FC | 	wrbyte	arg01, _var04
21594     42 81 02 F1 | 	add	_var01, _var03
21598     41 81 0A F2 | 	cmp	_var01, _var02 wz
2159c     CC FF 9F 5D |  if_ne	jmp	#LR__2692
215a0                 | LR__2693
215a0                 | _hg010b_spin2_setcursorshape_ret
215a0     2D 00 64 FD | 	ret
215a4                 | 
215a4                 | ' 
215a4                 | ' pub setcursorcolor(color) | i
215a4                 | _hg010b_spin2_setcursorcolor
215a4                 | ' 
215a4                 | ' cursorcolor:=color
215a4     0B 00 00 FF 
215a8     C2 64 06 F1 | 	add	objptr, ##5826
215ac     32 93 62 FC | 	wrlong	arg01, objptr
215b0                 | ' repeat i from 0 to (8*cursorshape)-1
215b0     00 92 06 F6 | 	mov	arg01, #0
215b4     04 64 06 F1 | 	add	objptr, #4
215b8     32 81 02 FB | 	rdlong	_var01, objptr
215bc     03 80 66 F0 | 	shl	_var01, #3
215c0     01 80 86 F1 | 	sub	_var01, #1
215c4     00 80 56 F2 | 	cmps	_var01, #0 wc
215c8     01 82 86 F6 | 	negc	_var02, #1
215cc     41 85 02 F6 | 	mov	_var03, _var02
215d0     41 81 02 F1 | 	add	_var01, _var02
215d4     0A 00 00 FF 
215d8     90 64 86 F1 | 	sub	objptr, ##5264
215dc     D7 0C 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
215e0                 | LR__2700
215e0                 | '   cursor[i]:=0
215e0     49 83 02 F6 | 	mov	_var02, arg01
215e4     32 83 02 F1 | 	add	_var02, objptr
215e8     41 01 48 FC | 	wrbyte	#0, _var02
215ec     42 93 02 F1 | 	add	arg01, _var03
215f0     40 93 0A F2 | 	cmp	arg01, _var01 wz
215f4     E8 FF 9F 5D |  if_ne	jmp	#LR__2700
215f8                 | LR__2701
215f8                 | ' repeat i from 8*cursorshape to 127
215f8     0A 00 00 FF 
215fc     90 64 06 F1 | 	add	objptr, ##5264
21600     32 85 02 FB | 	rdlong	_var03, objptr
21604     42 93 02 F6 | 	mov	arg01, _var03
21608     03 92 66 F0 | 	shl	arg01, #3
2160c     0B 00 00 FF 
21610     C6 64 86 F1 | 	sub	objptr, ##5830
21614     03 84 66 F0 | 	shl	_var03, #3
21618     80 84 56 F2 | 	cmps	_var03, #128 wc
2161c     01 82 A6 F6 | 	negnc	_var02, #1
21620     7F 80 06 F6 | 	mov	_var01, #127
21624     41 81 02 F1 | 	add	_var01, _var02
21628     D7 1A 48 FB | 	callpa	#(@LR__2703-@LR__2702)>>2,fcache_load_ptr_
2162c                 | LR__2702
2162c                 | '   cursor[i]:=cursorcolor
2162c     49 85 02 F6 | 	mov	_var03, arg01
21630     01 00 00 FF 
21634     36 64 06 F1 | 	add	objptr, ##566
21638     32 85 02 F1 | 	add	_var03, objptr
2163c     0A 00 00 FF 
21640     8C 64 06 F1 | 	add	objptr, ##5260
21644     32 87 02 FB | 	rdlong	_var04, objptr
21648     0B 00 00 FF 
2164c     C2 64 86 F1 | 	sub	objptr, ##5826
21650     42 87 42 FC | 	wrbyte	_var04, _var03
21654     41 93 02 F1 | 	add	arg01, _var02
21658     40 93 0A F2 | 	cmp	arg01, _var01 wz
2165c     CC FF 9F 5D |  if_ne	jmp	#LR__2702
21660                 | LR__2703
21660                 | _hg010b_spin2_setcursorcolor_ret
21660     2D 00 64 FD | 	ret
21664                 | 
21664                 | '   
21664                 | '   
21664                 | '   
21664                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
21664                 | _hg010b_spin2_setmode
21664     02 CA 05 F6 | 	mov	COUNT_, #2
21668     E8 00 A0 FD | 	call	#pushregs_
2166c                 | ' 
2166c                 | ' 
2166c                 | ' dl_ptr:=@emptydl[0]
2166c     01 00 00 FF 
21670     1D 64 06 F1 | 	add	objptr, ##541
21674     32 9B 02 F6 | 	mov	arg05, objptr
21678     FD 65 86 F1 | 	sub	objptr, #509
2167c     32 9B 62 FC | 	wrlong	arg05, objptr
21680                 | ' 
21680                 | ' if cog>0 
21680     10 64 06 F1 | 	add	objptr, #16
21684     32 9B 02 FB | 	rdlong	arg05, objptr
21688     30 64 86 F1 | 	sub	objptr, #48
2168c     01 9A 56 F2 | 	cmps	arg05, #1 wc
21690                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
21690     01 92 06 36 |  if_ae	mov	arg01, #1
21694     58 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
21698                 | ' xres:=1024
21698     01 00 00 FF 
2169c     26 64 06 F1 | 	add	objptr, ##550
216a0     02 00 80 FF 
216a4     32 01 68 FC | 	wrlong	##1024, objptr
216a8                 | ' yres:=600
216a8     04 64 06 F1 | 	add	objptr, #4
216ac     01 00 80 FF 
216b0     32 B1 68 FC | 	wrlong	##600, objptr
216b4                 | ' ppl:=(timings[3])
216b4     1C 00 00 FF 
216b8     4C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14412
216bc     37 9B 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
216c0     51 65 86 F1 | 	sub	objptr, #337
216c4     32 9B 62 FC | 	wrlong	arg05, objptr
216c8                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
216c8     10 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, #16
216cc     37 A7 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
216d0     01 A6 66 F0 | 	shl	local01, #1
216d4     80 64 86 F1 | 	sub	objptr, #128
216d8     32 A7 62 FC | 	wrlong	local01, objptr
216dc                 | ' cpl1:=cpl '' todo remove
216dc     04 64 06 F1 | 	add	objptr, #4
216e0     32 A7 62 FC | 	wrlong	local01, objptr
216e4                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
216e4     04 00 00 FF 
216e8     1C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##2076
216ec     41 64 86 F1 | 	sub	objptr, #65
216f0     32 6F 62 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
216f4                 | ' repeat i from 0 to 3
216f4     00 A8 06 F6 | 	mov	local02, #0
216f8     04 00 00 FF 
216fc     00 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##2048
21700     08 64 06 F1 | 	add	objptr, #8
21704     D7 20 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
21708                 | LR__2710
21708                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
21708     54 A7 02 F6 | 	mov	local01, local02
2170c     02 A6 66 F0 | 	shl	local01, #2
21710     37 A7 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
21714     32 9B 02 FB | 	rdlong	arg05, objptr
21718     11 9A 66 F0 | 	shl	arg05, #17
2171c     53 A7 02 FB | 	rdlong	local01, local01
21720     4D A7 02 F1 | 	add	local01, arg05
21724     80 40 38 FF 
21728     00 A6 06 F1 | 	add	local01, ##1887502336
2172c     54 9B 02 F6 | 	mov	arg05, local02
21730     02 9A 66 F0 | 	shl	arg05, #2
21734     37 9B 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
21738     4D A7 62 FC | 	wrlong	local01, arg05
2173c     01 A8 06 F1 | 	add	local02, #1
21740     04 A8 56 F2 | 	cmps	local02, #4 wc
21744     C0 FF 9F CD |  if_b	jmp	#LR__2710
21748                 | LR__2711
21748     24 64 86 F1 | 	sub	objptr, #36
2174c     1C 00 00 FF 
21750     40 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
21754                 | ' 'clkfreq:=timings[9]					    	' set the clock frequency for the mode
21754                 | ' 'hubset(timings[10])
21754                 | ' waitms(1)                                                   	' wait for stabilization
21754     01 92 06 F6 | 	mov	arg01, #1
21758     28 33 B0 FD | 	call	#__system___waitms
2175c     1C 00 00 FF 
21760     6C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14444
21764     37 A9 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
21768     61 64 06 F1 | 	add	objptr, #97
2176c     32 A9 62 FC | 	wrlong	local02, objptr
21770     54 A7 52 F6 | 	abs	local01, local02 wc
21774     04 A6 46 F0 | 	shr	local01, #4
21778     53 A7 82 F6 | 	negc	local01, local01
2177c     9C 64 06 F1 | 	add	objptr, #156
21780     32 A7 62 FC | 	wrlong	local01, objptr
21784     A4 64 86 F1 | 	sub	objptr, #164
21788     32 A9 02 FB | 	rdlong	local02, objptr
2178c     08 64 06 F1 | 	add	objptr, #8
21790     32 A7 02 FB | 	rdlong	local01, objptr
21794     53 A9 02 FD | 	qmul	local02, local01
21798                 | ' lines:=timings[11]
21798                 | ' t_lines:=lines/16
21798                 | ' buflen:=cpl*lines						' framebuffer length in longs
21798     29 64 86 F1 | 	sub	objptr, #41
2179c     19 A6 C6 F9 | 	decod	local01, #25
217a0     10 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
217a4     18 A8 62 FD | 	getqx	local02
217a8     32 A9 62 FC | 	wrlong	local02, objptr
217ac     38 64 86 F1 | 	sub	objptr, #56
217b0     02 A8 66 F0 | 	shl	local02, #2
217b4     54 A7 82 F1 | 	sub	local01, local02
217b8     32 A7 62 FC | 	wrlong	local01, objptr
217bc     FD 64 06 F1 | 	add	objptr, #253
217c0     32 A9 02 FB | 	rdlong	local02, objptr
217c4     37 9B 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
217c8     4D A9 02 FD | 	qmul	local02, arg05
217cc                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
217cc                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
217cc     F9 64 86 F1 | 	sub	objptr, #249
217d0                 | ' mode_ptr:=@timings						' set pointers to timings
217d0     1C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
217d4                 | ' graphmode:=1024+512+192+48							' det global variable
217d4                 | ' makedl(graphmode)							' make a DL for the mode
217d4     03 00 00 FF 
217d8     F0 92 06 F6 | 	mov	arg01, ##1776
217dc     18 A8 62 FD | 	getqx	local02
217e0     54 A7 82 F1 | 	sub	local01, local02
217e4     32 A7 62 FC | 	wrlong	local01, objptr
217e8     14 64 06 F1 | 	add	objptr, #20
217ec     32 6F 62 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
217f0     79 64 06 F1 | 	add	objptr, #121
217f4     03 00 80 FF 
217f8     32 E1 69 FC | 	wrlong	##1776, objptr
217fc     91 64 86 F1 | 	sub	objptr, #145
21800     1C 00 00 FF 
21804     40 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
21808     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
2180c                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
2180c     32 A7 02 FB | 	rdlong	local01, objptr
21810     DD 64 06 F1 | 	add	objptr, #221
21814     32 A7 62 FC | 	wrlong	local01, objptr
21818                 | ' s_font_ptr:=font_ptr
21818     D5 64 86 F1 | 	sub	objptr, #213
2181c     32 A7 02 FB | 	rdlong	local01, objptr
21820     D9 64 06 F1 | 	add	objptr, #217
21824     32 A7 62 FC | 	wrlong	local01, objptr
21828                 | ' s_lines:=lines
21828     80 64 86 F1 | 	sub	objptr, #128
2182c     32 A7 02 FB | 	rdlong	local01, objptr
21830     84 64 06 F1 | 	add	objptr, #132
21834     32 A7 62 FC | 	wrlong	local01, objptr
21838                 | ' s_buflen:=buflen
21838     AD 64 86 F1 | 	sub	objptr, #173
2183c     32 A7 02 FB | 	rdlong	local01, objptr
21840     B5 64 06 F1 | 	add	objptr, #181
21844     32 A7 62 FC | 	wrlong	local01, objptr
21848                 | ' s_cpl:=cpl
21848     94 64 86 F1 | 	sub	objptr, #148
2184c     32 A7 02 FB | 	rdlong	local01, objptr
21850     90 64 06 F1 | 	add	objptr, #144
21854     32 A7 62 FC | 	wrlong	local01, objptr
21858                 | ' s_cpl1:=cpl
21858     90 64 86 F1 | 	sub	objptr, #144
2185c     32 A7 02 FB | 	rdlong	local01, objptr
21860     98 64 06 F1 | 	add	objptr, #152
21864     32 A7 62 FC | 	wrlong	local01, objptr
21868                 | ' st_lines:=t_lines
21868     0C 64 06 F1 | 	add	objptr, #12
2186c     32 A7 02 FB | 	rdlong	local01, objptr
21870     04 64 06 F1 | 	add	objptr, #4
21874     32 A7 62 FC | 	wrlong	local01, objptr
21878                 | ' ppl:=ppl/xzoom  
21878     28 64 86 F1 | 	sub	objptr, #40
2187c     32 0F 03 FB | 	rdlong	muldiva_, objptr
21880     2C 64 06 F1 | 	add	objptr, #44
21884     32 11 03 FB | 	rdlong	muldivb_, objptr
21888     05 65 86 F1 | 	sub	objptr, #261
2188c     FA 00 A0 FD | 	call	#divide_
21890     D9 64 06 F1 | 	add	objptr, #217
21894     32 11 63 FC | 	wrlong	muldivb_, objptr
21898                 | ' s_ppl:=ppl
21898     1C 64 06 F1 | 	add	objptr, #28
2189c     32 11 63 FC | 	wrlong	muldivb_, objptr
218a0     F5 64 86 F1 | 	sub	objptr, #245
218a4                 | ' waitms(20)							' wait 
218a4     14 92 06 F6 | 	mov	arg01, #20
218a8     D8 31 B0 FD | 	call	#__system___waitms
218ac                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
218ac     04 64 06 F1 | 	add	objptr, #4
218b0     32 93 02 FB | 	rdlong	arg01, objptr
218b4     04 64 86 F1 | 	sub	objptr, #4
218b8     32 97 02 FB | 	rdlong	arg03, objptr
218bc     49 97 82 F1 | 	sub	arg03, arg01
218c0     20 94 06 F6 | 	mov	arg02, #32
218c4     00 98 06 F6 | 	mov	arg04, #0
218c8     01 9A 06 F6 | 	mov	arg05, #1
218cc     0B 00 00 FF 
218d0     CC 64 06 F1 | 	add	objptr, ##5836
218d4     BC 1F B0 FD | 	call	#_psram_spin2_fill
218d8     0B 00 00 FF 
218dc     CC 64 86 F1 | 	sub	objptr, ##5836
218e0     E7 F0 03 F6 | 	mov	ptra, fp
218e4     F2 00 A0 FD | 	call	#popregs_
218e8                 | _hg010b_spin2_setmode_ret
218e8     2D 00 64 FD | 	ret
218ec                 | 
218ec                 | ' 
218ec                 | ' '****************************************************************************************************************
218ec                 | ' '                                                                                                             	*
218ec                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
218ec                 | ' '                                                                                                             	*
218ec                 | ' '****************************************************************************************************************
218ec                 | ' 
218ec                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
218ec                 | _hg010b_spin2_makedl
218ec                 | ' 
218ec                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
218ec                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
218ec                 | ' repeat i from 0 to 11                                                           ' clear DL
218ec     00 80 06 F6 | 	mov	_var01, #0
218f0     ED 65 06 F1 | 	add	objptr, #493
218f4     D7 0E 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
218f8                 | LR__2720
218f8                 | '   displaylist[i]:=0 
218f8     40 83 02 F6 | 	mov	_var02, _var01
218fc     02 82 66 F0 | 	shl	_var02, #2
21900     32 83 02 F1 | 	add	_var02, objptr
21904     41 01 68 FC | 	wrlong	#0, _var02
21908     01 80 06 F1 | 	add	_var01, #1
2190c     0C 80 56 F2 | 	cmps	_var01, #12 wc
21910     E4 FF 9F CD |  if_b	jmp	#LR__2720
21914                 | LR__2721
21914                 | '                         ' 
21914                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
21914     8C 65 86 F1 | 	sub	objptr, #396
21918     32 83 02 FB | 	rdlong	_var02, objptr
2191c     14 82 66 F0 | 	shl	_var02, #20
21920     01 82 06 F1 | 	add	_var02, #1
21924     04 64 86 F1 | 	sub	objptr, #4
21928     32 81 02 FB | 	rdlong	_var01, objptr
2192c     06 80 66 F0 | 	shl	_var01, #6
21930     40 83 02 F1 | 	add	_var02, _var01
21934     90 65 06 F1 | 	add	objptr, #400
21938     32 83 62 FC | 	wrlong	_var02, objptr
2193c     ED 65 86 F1 | 	sub	objptr, #493
21940                 | ' displaylist[1]:=buf_ptr<<4+%10  
21940     32 83 02 FB | 	rdlong	_var02, objptr
21944     04 82 66 F0 | 	shl	_var02, #4
21948     02 82 06 F1 | 	add	_var02, #2
2194c     F1 65 06 F1 | 	add	objptr, #497
21950     32 83 62 FC | 	wrlong	_var02, objptr
21954                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
21954     04 64 86 F1 | 	sub	objptr, #4
21958     32 83 02 F6 | 	mov	_var02, objptr
2195c     CD 65 86 F1 | 	sub	objptr, #461
21960     32 83 62 FC | 	wrlong	_var02, objptr
21964     20 64 86 F1 | 	sub	objptr, #32
21968                 | _hg010b_spin2_makedl_ret
21968     2D 00 64 FD | 	ret
2196c                 | 
2196c                 | ' 
2196c                 | ' 
2196c                 | ' '****************************************************************************************************************
2196c                 | ' '                                                                        					*
2196c                 | ' '  Graphic primitives                                                    					*
2196c                 | ' '                                                                        					*
2196c                 | ' '****************************************************************************************************************
2196c                 | ' 
2196c                 | ' pub setspriteptr(num,ptr)
2196c                 | _hg010b_spin2_setspriteptr
2196c                 | ' long[@spr1ptr+12*num]:=ptr
2196c     32 81 02 F6 | 	mov	_var01, objptr
21970     11 81 06 F1 | 	add	_var01, #273
21974     49 83 02 F6 | 	mov	_var02, arg01
21978     01 82 66 F0 | 	shl	_var02, #1
2197c     49 83 02 F1 | 	add	_var02, arg01
21980     02 82 66 F0 | 	shl	_var02, #2
21984     41 81 02 F1 | 	add	_var01, _var02
21988     40 95 62 FC | 	wrlong	arg02, _var01
2198c                 | _hg010b_spin2_setspriteptr_ret
2198c     2D 00 64 FD | 	ret
21990                 | 
21990                 | ' 
21990                 | ' pub setspritepos(num,x,y)
21990                 | _hg010b_spin2_setspritepos
21990                 | ' if y>601
21990     01 00 00 FF 
21994     5A 96 56 F2 | 	cmps	arg03, ##602 wc
21998                 | '   y:=601
21998     01 00 00 3F 
2199c     59 96 06 36 |  if_ae	mov	arg03, ##601
219a0                 | ' if x>1024
219a0     02 00 00 FF 
219a4     01 94 56 F2 | 	cmps	arg02, ##1025 wc
219a8                 | '   x:=1024
219a8     0A 94 C6 39 |  if_ae	decod	arg02, #10
219ac                 | ' word[@spr1ptr+12*num+4]:=x
219ac     11 65 06 F1 | 	add	objptr, #273
219b0     32 81 02 F6 | 	mov	_var01, objptr
219b4     49 83 02 F6 | 	mov	_var02, arg01
219b8     01 82 66 F0 | 	shl	_var02, #1
219bc     49 83 02 F1 | 	add	_var02, arg01
219c0     02 82 66 F0 | 	shl	_var02, #2
219c4     41 81 02 F1 | 	add	_var01, _var02
219c8     04 80 06 F1 | 	add	_var01, #4
219cc     40 95 52 FC | 	wrword	arg02, _var01
219d0                 | ' word[@spr1ptr+12*num+6]:=y
219d0     32 81 02 F6 | 	mov	_var01, objptr
219d4     49 83 02 F6 | 	mov	_var02, arg01
219d8     01 82 66 F0 | 	shl	_var02, #1
219dc     49 83 02 F1 | 	add	_var02, arg01
219e0     02 82 66 F0 | 	shl	_var02, #2
219e4     41 81 02 F1 | 	add	_var01, _var02
219e8     06 80 06 F1 | 	add	_var01, #6
219ec     40 97 52 FC | 	wrword	arg03, _var01
219f0     11 65 86 F1 | 	sub	objptr, #273
219f4                 | _hg010b_spin2_setspritepos_ret
219f4     2D 00 64 FD | 	ret
219f8                 | 
219f8                 | ' 
219f8                 | ' pub setspritesize(num,w,h)
219f8                 | _hg010b_spin2_setspritesize
219f8                 | ' word[@spr1ptr+12*num+8]:=w
219f8     11 65 06 F1 | 	add	objptr, #273
219fc     32 81 02 F6 | 	mov	_var01, objptr
21a00     49 83 02 F6 | 	mov	_var02, arg01
21a04     01 82 66 F0 | 	shl	_var02, #1
21a08     49 83 02 F1 | 	add	_var02, arg01
21a0c     02 82 66 F0 | 	shl	_var02, #2
21a10     41 81 02 F1 | 	add	_var01, _var02
21a14     08 80 06 F1 | 	add	_var01, #8
21a18     40 95 52 FC | 	wrword	arg02, _var01
21a1c                 | ' word[@spr1ptr+12*num+10]:=h
21a1c     32 81 02 F6 | 	mov	_var01, objptr
21a20     49 83 02 F6 | 	mov	_var02, arg01
21a24     01 82 66 F0 | 	shl	_var02, #1
21a28     49 83 02 F1 | 	add	_var02, arg01
21a2c     02 82 66 F0 | 	shl	_var02, #2
21a30     41 81 02 F1 | 	add	_var01, _var02
21a34     0A 80 06 F1 | 	add	_var01, #10
21a38     40 97 52 FC | 	wrword	arg03, _var01
21a3c     11 65 86 F1 | 	sub	objptr, #273
21a40                 | _hg010b_spin2_setspritesize_ret
21a40     2D 00 64 FD | 	ret
21a44                 | 
21a44                 | ' 
21a44                 | ' 
21a44                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
21a44                 | ' 
21a44                 | ' 
21a44                 | ' pub putpixel(x,y,c)
21a44                 | _hg010b_spin2_putpixel
21a44     04 CA 05 F6 | 	mov	COUNT_, #4
21a48     E8 00 A0 FD | 	call	#pushregs_
21a4c     49 A7 02 F6 | 	mov	local01, arg01
21a50                 | ' 
21a50                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
21a50     00 A8 06 F6 | 	mov	local02, #0
21a54     00 A6 56 F2 | 	cmps	local01, #0 wc
21a58     01 A8 66 36 |  if_ae	neg	local02, #1
21a5c     E9 64 06 F1 | 	add	objptr, #233
21a60     32 9B 02 FB | 	rdlong	arg05, objptr
21a64     02 9A 66 F0 | 	shl	arg05, #2
21a68     4D A7 52 F2 | 	cmps	local01, arg05 wc
21a6c     55 AB A2 F1 | 	subx	local03, local03
21a70     55 A9 02 F5 | 	and	local02, local03
21a74     00 AA 06 F6 | 	mov	local03, #0
21a78     00 94 56 F2 | 	cmps	arg02, #0 wc
21a7c     01 AA 66 36 |  if_ae	neg	local03, #1
21a80     55 A9 02 F5 | 	and	local02, local03
21a84     04 64 86 F1 | 	sub	objptr, #4
21a88     32 AB 02 FB | 	rdlong	local03, objptr
21a8c     E5 64 86 F1 | 	sub	objptr, #229
21a90     55 95 52 F2 | 	cmps	arg02, local03 wc
21a94     56 AD A2 F1 | 	subx	local04, local04
21a98     56 A9 CA F7 | 	test	local02, local04 wz
21a9c     48 00 90 AD |  if_e	jmp	#LR__2730
21aa0     DD 64 06 F1 | 	add	objptr, #221
21aa4     32 93 02 FB | 	rdlong	arg01, objptr
21aa8     14 64 06 F1 | 	add	objptr, #20
21aac     32 AD 02 FB | 	rdlong	local04, objptr
21ab0     02 AC 66 F0 | 	shl	local04, #2
21ab4     4A AD 02 FD | 	qmul	local04, arg02
21ab8                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
21ab8     4B 95 02 F6 | 	mov	arg02, arg03
21abc     01 96 06 F6 | 	mov	arg03, #1
21ac0     00 98 06 F6 | 	mov	arg04, #0
21ac4     01 9A 06 F6 | 	mov	arg05, #1
21ac8     0A 00 00 FF 
21acc     DB 65 06 F1 | 	add	objptr, ##5595
21ad0     18 AC 62 FD | 	getqx	local04
21ad4     53 AD 02 F1 | 	add	local04, local01
21ad8     56 93 02 F1 | 	add	arg01, local04
21adc     B4 1D B0 FD | 	call	#_psram_spin2_fill
21ae0     0B 00 00 FF 
21ae4     CC 64 86 F1 | 	sub	objptr, ##5836
21ae8                 | LR__2730
21ae8     E7 F0 03 F6 | 	mov	ptra, fp
21aec     F2 00 A0 FD | 	call	#popregs_
21af0                 | _hg010b_spin2_putpixel_ret
21af0     2D 00 64 FD | 	ret
21af4                 | 
21af4                 | ' 
21af4                 | ' pub putpixel2(x,y,c)
21af4                 | _hg010b_spin2_putpixel2
21af4     02 CA 05 F6 | 	mov	COUNT_, #2
21af8     E8 00 A0 FD | 	call	#pushregs_
21afc     DD 64 06 F1 | 	add	objptr, #221
21b00     32 A7 02 FB | 	rdlong	local01, objptr
21b04     14 64 06 F1 | 	add	objptr, #20
21b08     32 9B 02 FB | 	rdlong	arg05, objptr
21b0c     02 9A 66 F0 | 	shl	arg05, #2
21b10     4A 9B 02 FD | 	qmul	arg05, arg02
21b14                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
21b14     4B 95 02 F6 | 	mov	arg02, arg03
21b18     01 96 06 F6 | 	mov	arg03, #1
21b1c     00 98 06 F6 | 	mov	arg04, #0
21b20     01 9A 06 F6 | 	mov	arg05, #1
21b24     0A 00 00 FF 
21b28     DB 65 06 F1 | 	add	objptr, ##5595
21b2c     18 A8 62 FD | 	getqx	local02
21b30     49 A9 02 F1 | 	add	local02, arg01
21b34     54 A7 02 F1 | 	add	local01, local02
21b38     53 93 02 F6 | 	mov	arg01, local01
21b3c     54 1D B0 FD | 	call	#_psram_spin2_fill
21b40     0B 00 00 FF 
21b44     CC 64 86 F1 | 	sub	objptr, ##5836
21b48     E7 F0 03 F6 | 	mov	ptra, fp
21b4c     F2 00 A0 FD | 	call	#popregs_
21b50                 | _hg010b_spin2_putpixel2_ret
21b50     2D 00 64 FD | 	ret
21b54                 | 
21b54                 | ' 
21b54                 | ' pub getpixel2(x,y): c 
21b54                 | _hg010b_spin2_getpixel2
21b54     02 CA 05 F6 | 	mov	COUNT_, #2
21b58     E8 00 A0 FD | 	call	#pushregs_
21b5c     0C F0 07 F1 | 	add	ptra, #12
21b60     04 CE 05 F1 | 	add	fp, #4
21b64     E7 92 62 FC | 	wrlong	arg01, fp
21b68     04 CE 05 F1 | 	add	fp, #4
21b6c     E7 94 62 FC | 	wrlong	arg02, fp
21b70     08 CE 85 F1 | 	sub	fp, #8
21b74     E7 00 68 FC | 	wrlong	#0, fp
21b78     E7 92 02 F6 | 	mov	arg01, fp
21b7c     DD 64 06 F1 | 	add	objptr, #221
21b80     32 95 02 FB | 	rdlong	arg02, objptr
21b84     14 64 06 F1 | 	add	objptr, #20
21b88     32 97 02 FB | 	rdlong	arg03, objptr
21b8c     02 96 66 F0 | 	shl	arg03, #2
21b90     08 CE 05 F1 | 	add	fp, #8
21b94     E7 7A 02 FB | 	rdlong	result1, fp
21b98     3D 97 02 FD | 	qmul	arg03, result1
21b9c                 | ' 
21b9c                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
21b9c     04 CE 85 F1 | 	sub	fp, #4
21ba0     E7 A6 02 FB | 	rdlong	local01, fp
21ba4     04 CE 85 F1 | 	sub	fp, #4
21ba8     01 96 06 F6 | 	mov	arg03, #1
21bac     0A 00 00 FF 
21bb0     DB 65 06 F1 | 	add	objptr, ##5595
21bb4     18 A8 62 FD | 	getqx	local02
21bb8     53 A9 02 F1 | 	add	local02, local01
21bbc     54 95 02 F1 | 	add	arg02, local02
21bc0     94 1B B0 FD | 	call	#_psram_spin2_read1
21bc4     0B 00 00 FF 
21bc8     CC 64 86 F1 | 	sub	objptr, ##5836
21bcc                 | ' return c
21bcc     E7 7A 02 FB | 	rdlong	result1, fp
21bd0     E7 F0 03 F6 | 	mov	ptra, fp
21bd4     F2 00 A0 FD | 	call	#popregs_
21bd8                 | _hg010b_spin2_getpixel2_ret
21bd8     2D 00 64 FD | 	ret
21bdc                 | 
21bdc                 | '   
21bdc                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
21bdc                 | ' 
21bdc                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
21bdc                 | _hg010b_spin2_fastline
21bdc     02 CA 05 F6 | 	mov	COUNT_, #2
21be0     E8 00 A0 FD | 	call	#pushregs_
21be4     49 A7 02 F6 | 	mov	local01, arg01
21be8     4A A9 02 F6 | 	mov	local02, arg02
21bec                 | ' 
21bec                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
21bec     00 96 56 F2 | 	cmps	arg03, #0 wc
21bf0     F4 00 90 CD |  if_b	jmp	#LR__2740
21bf4     01 00 00 FF 
21bf8     2A 64 06 F1 | 	add	objptr, ##554
21bfc     32 9B 02 FB | 	rdlong	arg05, objptr
21c00     01 00 00 FF 
21c04     2A 64 86 F1 | 	sub	objptr, ##554
21c08     4D 97 52 F2 | 	cmps	arg03, arg05 wc
21c0c     D8 00 90 3D |  if_ae	jmp	#LR__2740
21c10     00 A6 56 F2 | 	cmps	local01, #0 wc
21c14     00 A8 56 C2 |  if_b	cmps	local02, #0 wc
21c18     CC 00 90 CD |  if_b	jmp	#LR__2740
21c1c     01 00 00 FF 
21c20     26 64 06 F1 | 	add	objptr, ##550
21c24     32 9B 02 FB | 	rdlong	arg05, objptr
21c28     01 00 00 FF 
21c2c     26 64 86 F1 | 	sub	objptr, ##550
21c30     4D A7 5A F2 | 	cmps	local01, arg05 wcz
21c34     01 00 00 1F 
21c38     26 64 06 11 |  if_a	add	objptr, ##550
21c3c     32 93 02 1B |  if_a	rdlong	arg01, objptr
21c40     01 00 00 1F 
21c44     26 64 86 11 |  if_a	sub	objptr, ##550
21c48     49 A9 5A 12 |  if_a	cmps	local02, arg01 wcz
21c4c                 | '   return
21c4c     98 00 90 1D |  if_a	jmp	#LR__2740
21c50     54 A7 5A F2 | 	cmps	local01, local02 wcz
21c54     53 9B 02 16 |  if_a	mov	arg05, local01
21c58     54 A7 02 16 |  if_a	mov	local01, local02
21c5c     4D A9 02 16 |  if_a	mov	local02, arg05
21c60     00 A6 56 F2 | 	cmps	local01, #0 wc
21c64     00 A6 06 C6 |  if_b	mov	local01, #0
21c68     01 00 00 FF 
21c6c     26 64 06 F1 | 	add	objptr, ##550
21c70     32 9B 02 FB | 	rdlong	arg05, objptr
21c74     01 00 00 FF 
21c78     26 64 86 F1 | 	sub	objptr, ##550
21c7c     4D A9 52 F2 | 	cmps	local02, arg05 wc
21c80     01 00 00 3F 
21c84     26 64 06 31 |  if_ae	add	objptr, ##550
21c88     32 A9 02 3B |  if_ae	rdlong	local02, objptr
21c8c     01 00 00 3F 
21c90     26 64 86 31 |  if_ae	sub	objptr, ##550
21c94     DD 64 06 F1 | 	add	objptr, #221
21c98     32 93 02 FB | 	rdlong	arg01, objptr
21c9c     14 64 06 F1 | 	add	objptr, #20
21ca0     32 9B 02 FB | 	rdlong	arg05, objptr
21ca4     02 9A 66 F0 | 	shl	arg05, #2
21ca8     4B 9B 02 FD | 	qmul	arg05, arg03
21cac                 | ' if x1>x2
21cac                 | '   x1,x2:=x2,x1
21cac                 | ' if x1<0 
21cac                 | '   x1:=0
21cac                 | ' if x2>=xres
21cac                 | '   x2:=xres-1  
21cac     01 A8 86 31 |  if_ae	sub	local02, #1
21cb0                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
21cb0     01 96 06 F6 | 	mov	arg03, #1
21cb4     54 97 02 F1 | 	add	arg03, local02
21cb8     53 97 82 F1 | 	sub	arg03, local01
21cbc     4C 95 02 F6 | 	mov	arg02, arg04
21cc0     00 98 06 F6 | 	mov	arg04, #0
21cc4     01 9A 06 F6 | 	mov	arg05, #1
21cc8     0A 00 00 FF 
21ccc     DB 65 06 F1 | 	add	objptr, ##5595
21cd0     18 A8 62 FD | 	getqx	local02
21cd4     53 A9 02 F1 | 	add	local02, local01
21cd8     54 93 02 F1 | 	add	arg01, local02
21cdc     B4 1B B0 FD | 	call	#_psram_spin2_fill
21ce0     0B 00 00 FF 
21ce4     CC 64 86 F1 | 	sub	objptr, ##5836
21ce8                 | LR__2740
21ce8     E7 F0 03 F6 | 	mov	ptra, fp
21cec     F2 00 A0 FD | 	call	#popregs_
21cf0                 | _hg010b_spin2_fastline_ret
21cf0     2D 00 64 FD | 	ret
21cf4                 | 
21cf4                 | ' 
21cf4                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
21cf4                 | _hg010b_spin2_draw
21cf4     0E CA 05 F6 | 	mov	COUNT_, #14
21cf8     E8 00 A0 FD | 	call	#pushregs_
21cfc     49 A7 02 F6 | 	mov	local01, arg01
21d00     4A A9 02 F6 | 	mov	local02, arg02
21d04     4B AB 02 F6 | 	mov	local03, arg03
21d08     4C AD 02 F6 | 	mov	local04, arg04
21d0c     4D AF 02 F6 | 	mov	local05, arg05
21d10                 | ' 
21d10                 | ' if (y1==y2)
21d10     56 A9 0A F2 | 	cmp	local02, local04 wz
21d14     18 00 90 5D |  if_ne	jmp	#LR__2750
21d18                 | '   fastline(x1,x2,y1,c)
21d18     53 93 02 F6 | 	mov	arg01, local01
21d1c     55 95 02 F6 | 	mov	arg02, local03
21d20     54 97 02 F6 | 	mov	arg03, local02
21d24     57 99 02 F6 | 	mov	arg04, local05
21d28     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
21d2c     F8 00 90 FD | 	jmp	#LR__2756
21d30                 | LR__2750
21d30                 | ' else  
21d30                 | '   x:=x1
21d30     53 B1 02 F6 | 	mov	local06, local01
21d34                 | '   y:=y1
21d34     54 B3 02 F6 | 	mov	local07, local02
21d38                 | ' 
21d38                 | '   if (x1<x2) 
21d38     55 A7 52 F2 | 	cmps	local01, local03 wc
21d3c                 | '     xi:=1
21d3c     01 B4 06 C6 |  if_b	mov	local08, #1
21d40                 | '     dx:=x2-x1
21d40     55 B7 02 C6 |  if_b	mov	local09, local03
21d44     53 B7 82 C1 |  if_b	sub	local09, local01
21d48                 | '   else
21d48                 | '     xi:=-1
21d48     01 B4 66 36 |  if_ae	neg	local08, #1
21d4c                 | '     dx:=x1-x2
21d4c     55 A7 82 31 |  if_ae	sub	local01, local03
21d50     53 B7 02 36 |  if_ae	mov	local09, local01
21d54                 | '   
21d54                 | '   if (y1<y2) 
21d54     56 A9 52 F2 | 	cmps	local02, local04 wc
21d58                 | '     yi:=1
21d58     01 B8 06 C6 |  if_b	mov	local10, #1
21d5c                 | '     dy:=y2-y1
21d5c     56 BB 02 C6 |  if_b	mov	local11, local04
21d60     54 BB 82 C1 |  if_b	sub	local11, local02
21d64                 | '   else
21d64                 | '     yi:=-1
21d64     01 B8 66 36 |  if_ae	neg	local10, #1
21d68                 | '     dy:=y1-y2
21d68     56 A9 82 31 |  if_ae	sub	local02, local04
21d6c     54 BB 02 36 |  if_ae	mov	local11, local02
21d70                 | ' 
21d70                 | '   putpixel(x,y,c)
21d70     57 97 02 F6 | 	mov	arg03, local05
21d74     58 93 02 F6 | 	mov	arg01, local06
21d78     59 95 02 F6 | 	mov	arg02, local07
21d7c     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
21d80                 | ' 
21d80                 | '   if (dx>dy)
21d80     5D B7 5A F2 | 	cmps	local09, local11 wcz
21d84     50 00 90 ED |  if_be	jmp	#LR__2752
21d88                 | '     ai:=(dy-dx)*2
21d88     5D BD 02 F6 | 	mov	local12, local11
21d8c     5B BD 82 F1 | 	sub	local12, local09
21d90     01 BC 66 F0 | 	shl	local12, #1
21d94                 | '     bi:=dy*2
21d94     01 BA 66 F0 | 	shl	local11, #1
21d98     5D BF 02 F6 | 	mov	local13, local11
21d9c                 | '     d:= bi-dx
21d9c     5F C1 02 F6 | 	mov	local14, local13
21da0     5B C1 82 F1 | 	sub	local14, local09
21da4                 | '     repeat while (x<>x2) 
21da4                 | LR__2751
21da4     55 B1 0A F2 | 	cmp	local06, local03 wz
21da8     7C 00 90 AD |  if_e	jmp	#LR__2755
21dac                 | '       if (d>=0) 
21dac     00 C0 56 F2 | 	cmps	local14, #0 wc
21db0                 | '         x+=xi
21db0     5A B1 02 31 |  if_ae	add	local06, local08
21db4                 | '         y+=yi
21db4     5C B3 02 31 |  if_ae	add	local07, local10
21db8                 | '         d+=ai
21db8     5E C1 02 31 |  if_ae	add	local14, local12
21dbc                 | '       else
21dbc                 | '         d+=bi
21dbc     5F C1 02 C1 |  if_b	add	local14, local13
21dc0                 | '         x+=xi
21dc0     5A B1 02 C1 |  if_b	add	local06, local08
21dc4                 | '       putpixel(x,y,c)
21dc4     58 93 02 F6 | 	mov	arg01, local06
21dc8     59 95 02 F6 | 	mov	arg02, local07
21dcc     57 97 02 F6 | 	mov	arg03, local05
21dd0     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
21dd4     CC FF 9F FD | 	jmp	#LR__2751
21dd8                 | LR__2752
21dd8                 | '   else
21dd8                 | '     ai:=(dx-dy)*2
21dd8     5B BD 02 F6 | 	mov	local12, local09
21ddc     5D BD 82 F1 | 	sub	local12, local11
21de0     01 BC 66 F0 | 	shl	local12, #1
21de4                 | '     bi:=dx*2
21de4     01 B6 66 F0 | 	shl	local09, #1
21de8     5B BF 02 F6 | 	mov	local13, local09
21dec                 | '     d:=bi-dy
21dec     5F C1 02 F6 | 	mov	local14, local13
21df0     5D C1 82 F1 | 	sub	local14, local11
21df4                 | '     repeat while (y<>y2)
21df4                 | LR__2753
21df4     56 B3 0A F2 | 	cmp	local07, local04 wz
21df8     2C 00 90 AD |  if_e	jmp	#LR__2754
21dfc                 | '       if (d>=0)
21dfc     00 C0 56 F2 | 	cmps	local14, #0 wc
21e00                 | '         x+=xi
21e00     5A B1 02 31 |  if_ae	add	local06, local08
21e04                 | '         y+=yi
21e04     5C B3 02 31 |  if_ae	add	local07, local10
21e08                 | '         d+=ai
21e08     5E C1 02 31 |  if_ae	add	local14, local12
21e0c                 | '       else
21e0c                 | '         d+=bi
21e0c     5F C1 02 C1 |  if_b	add	local14, local13
21e10                 | '         y+=yi
21e10     5C B3 02 C1 |  if_b	add	local07, local10
21e14                 | '       putpixel(x, y,c)
21e14     58 93 02 F6 | 	mov	arg01, local06
21e18     59 95 02 F6 | 	mov	arg02, local07
21e1c     57 97 02 F6 | 	mov	arg03, local05
21e20     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
21e24     CC FF 9F FD | 	jmp	#LR__2753
21e28                 | LR__2754
21e28                 | LR__2755
21e28                 | LR__2756
21e28     E7 F0 03 F6 | 	mov	ptra, fp
21e2c     F2 00 A0 FD | 	call	#popregs_
21e30                 | _hg010b_spin2_draw_ret
21e30     2D 00 64 FD | 	ret
21e34                 | 
21e34                 | '       
21e34                 | '       
21e34                 | '       
21e34                 | '       
21e34                 | '       
21e34                 | '       
21e34                 | '  
21e34                 | ' pub fillpush(val) 
21e34                 | _hg010b_spin2_fillpush
21e34                 | ' fillstack[fillptr]:=val
21e34     0B 00 00 FF 
21e38     BA 64 06 F1 | 	add	objptr, ##5818
21e3c     32 81 02 FB | 	rdlong	_var01, objptr
21e40     02 80 66 F0 | 	shl	_var01, #2
21e44     0A 00 00 FF 
21e48     00 64 86 F1 | 	sub	objptr, ##5120
21e4c     32 81 02 F1 | 	add	_var01, objptr
21e50     40 93 62 FC | 	wrlong	arg01, _var01
21e54                 | ' fillptr+=1   
21e54     0A 00 00 FF 
21e58     00 64 06 F1 | 	add	objptr, ##5120
21e5c     32 81 02 FB | 	rdlong	_var01, objptr
21e60     01 80 06 F1 | 	add	_var01, #1
21e64     32 81 62 FC | 	wrlong	_var01, objptr
21e68     0B 00 00 FF 
21e6c     BA 64 86 F1 | 	sub	objptr, ##5818
21e70                 | _hg010b_spin2_fillpush_ret
21e70     2D 00 64 FD | 	ret
21e74                 | 
21e74                 | ' 
21e74                 | '     
21e74                 | ' pub fillpop() : val
21e74                 | _hg010b_spin2_fillpop
21e74                 | ' 
21e74                 | ' fillptr-=1
21e74     0B 00 00 FF 
21e78     BA 64 06 F1 | 	add	objptr, ##5818
21e7c     32 7B 02 FB | 	rdlong	result1, objptr
21e80     01 7A 86 F1 | 	sub	result1, #1
21e84     32 7B 62 FC | 	wrlong	result1, objptr
21e88                 | ' if fillptr<0
21e88     0B 00 00 FF 
21e8c     BA 64 86 F1 | 	sub	objptr, ##5818
21e90     00 7A 56 F2 | 	cmps	result1, #0 wc
21e94                 | '   fillptr:=0
21e94     0B 00 00 CF 
21e98     BA 64 06 C1 |  if_b	add	objptr, ##5818
21e9c     32 01 68 CC |  if_b	wrlong	#0, objptr
21ea0     0B 00 00 CF 
21ea4     BA 64 86 C1 |  if_b	sub	objptr, ##5818
21ea8                 | '   val:=-12345
21ea8     E7 FF 7F CF 
21eac     C7 81 06 C6 |  if_b	mov	_var01, ##-12345
21eb0     28 00 90 CD |  if_b	jmp	#LR__2760
21eb4                 | ' else 
21eb4                 | '   val:=fillstack[fillptr]
21eb4     0B 00 00 FF 
21eb8     BA 64 06 F1 | 	add	objptr, ##5818
21ebc     32 81 02 FB | 	rdlong	_var01, objptr
21ec0     02 80 66 F0 | 	shl	_var01, #2
21ec4     0A 00 00 FF 
21ec8     00 64 86 F1 | 	sub	objptr, ##5120
21ecc     32 81 02 F1 | 	add	_var01, objptr
21ed0     40 81 02 FB | 	rdlong	_var01, _var01
21ed4     01 00 00 FF 
21ed8     BA 64 86 F1 | 	sub	objptr, ##698
21edc                 | LR__2760
21edc                 | ' return val
21edc     40 7B 02 F6 | 	mov	result1, _var01
21ee0                 | _hg010b_spin2_fillpop_ret
21ee0     2D 00 64 FD | 	ret
21ee4                 | 
21ee4                 | ' 
21ee4                 | '       
21ee4                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
21ee4                 | _hg010b_spin2_fill
21ee4     0B CA 05 F6 | 	mov	COUNT_, #11
21ee8     E8 00 A0 FD | 	call	#pushregs_
21eec                 | ' 
21eec                 | ' newcolor:=newcolor & 255
21eec     4B A7 E2 F8 | 	getbyte	local01, arg03, #0
21ef0                 | ' oldcolor:=oldcolor & 255
21ef0     4C A9 E2 F8 | 	getbyte	local02, arg04, #0
21ef4                 | ' 
21ef4                 | ' if (oldcolor == newcolor) 
21ef4     53 A9 0A F2 | 	cmp	local02, local01 wz
21ef8                 | '   return
21ef8     70 02 90 AD |  if_e	jmp	#LR__2779
21efc                 | ' 
21efc                 | ' fillptr:=0
21efc     0B 00 00 FF 
21f00     BA 64 06 F1 | 	add	objptr, ##5818
21f04     32 01 68 FC | 	wrlong	#0, objptr
21f08                 | ' fillmax:=0
21f08     04 64 06 F1 | 	add	objptr, #4
21f0c     32 01 68 FC | 	wrlong	#0, objptr
21f10     0B 00 00 FF 
21f14     BE 64 86 F1 | 	sub	objptr, ##5822
21f18                 | ' fillpush(x)
21f18     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
21f1c                 | ' fillpush(y)
21f1c     4A 93 02 F6 | 	mov	arg01, arg02
21f20     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
21f24                 | ' y:=fillpop()
21f24     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
21f28     3D AB 02 F6 | 	mov	local03, result1
21f2c                 | ' x:=fillpop()
21f2c     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
21f30     3D AD 02 F6 | 	mov	local04, result1
21f34                 | ' 'pinhigh(38)
21f34                 | ' repeat while (x>-1)       
21f34                 | LR__2770
21f34     00 AC 56 F2 | 	cmps	local04, #0 wc
21f38     30 02 90 CD |  if_b	jmp	#LR__2778
21f3c                 | '  ' pintoggle(39)
21f3c                 | '   x1 := x
21f3c     56 AF 02 F6 | 	mov	local05, local04
21f40                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
21f40                 | LR__2771
21f40     00 B0 06 F6 | 	mov	local06, #0
21f44     00 B2 06 F6 | 	mov	local07, #0
21f48     00 AE 56 F2 | 	cmps	local05, #0 wc
21f4c     01 B2 66 36 |  if_ae	neg	local07, #1
21f50     00 B2 0E F2 | 	cmp	local07, #0 wz
21f54     00 B0 26 56 |  if_ne	not	local06, #0
21f58     00 B4 06 F6 | 	mov	local08, #0
21f5c     00 B6 06 F6 | 	mov	local09, #0
21f60     55 95 02 F6 | 	mov	arg02, local03
21f64     57 93 02 F6 | 	mov	arg01, local05
21f68     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
21f6c     54 7B 0A F2 | 	cmp	result1, local02 wz
21f70     00 B6 26 A6 |  if_e	not	local09, #0
21f74     00 B6 0E F2 | 	cmp	local09, #0 wz
21f78     00 B4 26 56 |  if_ne	not	local08, #0
21f7c     5A B1 CA F7 | 	test	local06, local08 wz
21f80                 | '     x1--
21f80     01 AE 86 51 |  if_ne	sub	local05, #1
21f84     B8 FF 9F 5D |  if_ne	jmp	#LR__2771
21f88                 | '   x1++
21f88     01 AE 06 F1 | 	add	local05, #1
21f8c                 | '   spanabove := 0
21f8c     00 B8 06 F6 | 	mov	local10, #0
21f90                 | '   spanbelow := 0
21f90     00 BA 06 F6 | 	mov	local11, #0
21f94                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
21f94                 | LR__2772
21f94     00 B0 06 F6 | 	mov	local06, #0
21f98     02 00 00 FF 
21f9c     00 AE 56 F2 | 	cmps	local05, ##1024 wc
21fa0     00 B0 26 C6 |  if_b	not	local06, #0
21fa4     00 B4 06 F6 | 	mov	local08, #0
21fa8     00 B6 06 F6 | 	mov	local09, #0
21fac     55 95 02 F6 | 	mov	arg02, local03
21fb0     57 93 02 F6 | 	mov	arg01, local05
21fb4     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
21fb8     54 7B 0A F2 | 	cmp	result1, local02 wz
21fbc     00 B6 26 A6 |  if_e	not	local09, #0
21fc0     00 B6 0E F2 | 	cmp	local09, #0 wz
21fc4     00 B4 26 56 |  if_ne	not	local08, #0
21fc8     5A B1 CA F7 | 	test	local06, local08 wz
21fcc     88 01 90 AD |  if_e	jmp	#LR__2777
21fd0                 | '     putpixel2 (x1,y, newcolor & 255)
21fd0     53 97 E2 F8 | 	getbyte	arg03, local01, #0
21fd4     57 93 02 F6 | 	mov	arg01, local05
21fd8     55 95 02 F6 | 	mov	arg02, local03
21fdc     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
21fe0                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
21fe0     00 B0 06 F6 | 	mov	local06, #0
21fe4     00 B2 06 F6 | 	mov	local07, #0
21fe8     00 B8 0E F2 | 	cmp	local10, #0 wz
21fec     01 AA 56 A2 |  if_e	cmps	local03, #1 wc
21ff0     01 B2 66 26 |  if_nc_and_z	neg	local07, #1
21ff4     00 B2 0E F2 | 	cmp	local07, #0 wz
21ff8     00 B0 26 56 |  if_ne	not	local06, #0
21ffc     00 B4 06 F6 | 	mov	local08, #0
22000     00 B6 06 F6 | 	mov	local09, #0
22004     55 95 02 F6 | 	mov	arg02, local03
22008     01 94 86 F1 | 	sub	arg02, #1
2200c     57 93 02 F6 | 	mov	arg01, local05
22010     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
22014     54 7B 0A F2 | 	cmp	result1, local02 wz
22018     00 B6 26 A6 |  if_e	not	local09, #0
2201c     00 B6 0E F2 | 	cmp	local09, #0 wz
22020     00 B4 26 56 |  if_ne	not	local08, #0
22024     5A B1 CA F7 | 	test	local06, local08 wz
22028     1C 00 90 AD |  if_e	jmp	#LR__2773
2202c                 | '       fillpush(x1)
2202c     57 93 02 F6 | 	mov	arg01, local05
22030     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
22034                 | '       fillpush(y-1)
22034     55 93 02 F6 | 	mov	arg01, local03
22038     01 92 86 F1 | 	sub	arg01, #1
2203c     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
22040                 | '       spanabove := 1 
22040     01 B8 06 F6 | 	mov	local10, #1
22044     4C 00 90 FD | 	jmp	#LR__2774
22048                 | LR__2773
22048                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
22048     00 B0 06 F6 | 	mov	local06, #0
2204c     00 B2 06 F6 | 	mov	local07, #0
22050     00 B8 0E F2 | 	cmp	local10, #0 wz
22054     01 AA 56 52 |  if_ne	cmps	local03, #1 wc
22058     01 B2 66 16 |  if_a	neg	local07, #1
2205c     00 B2 0E F2 | 	cmp	local07, #0 wz
22060     00 B0 26 56 |  if_ne	not	local06, #0
22064     00 B4 06 F6 | 	mov	local08, #0
22068     00 B6 06 F6 | 	mov	local09, #0
2206c     55 95 02 F6 | 	mov	arg02, local03
22070     01 94 86 F1 | 	sub	arg02, #1
22074     57 93 02 F6 | 	mov	arg01, local05
22078     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
2207c     54 7B 0A F2 | 	cmp	result1, local02 wz
22080     00 B6 26 56 |  if_ne	not	local09, #0
22084     00 B6 0E F2 | 	cmp	local09, #0 wz
22088     00 B4 26 56 |  if_ne	not	local08, #0
2208c     5A B1 CA F7 | 	test	local06, local08 wz
22090                 | '       spanabove := 0 
22090     00 B8 06 56 |  if_ne	mov	local10, #0
22094                 | LR__2774
22094                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
22094     00 B0 06 F6 | 	mov	local06, #0
22098     00 B2 06 F6 | 	mov	local07, #0
2209c     00 BA 0E F2 | 	cmp	local11, #0 wz
220a0     01 00 00 AF 
220a4     3F AA 56 A2 |  if_e	cmps	local03, ##575 wc
220a8     01 B2 66 86 |  if_c_and_z	neg	local07, #1
220ac     00 B2 0E F2 | 	cmp	local07, #0 wz
220b0     00 B0 26 56 |  if_ne	not	local06, #0
220b4     00 B4 06 F6 | 	mov	local08, #0
220b8     00 B6 06 F6 | 	mov	local09, #0
220bc     55 95 02 F6 | 	mov	arg02, local03
220c0     01 94 06 F1 | 	add	arg02, #1
220c4     57 93 02 F6 | 	mov	arg01, local05
220c8     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
220cc     54 7B 0A F2 | 	cmp	result1, local02 wz
220d0     00 B6 26 A6 |  if_e	not	local09, #0
220d4     00 B6 0E F2 | 	cmp	local09, #0 wz
220d8     00 B4 26 56 |  if_ne	not	local08, #0
220dc     5A B1 CA F7 | 	test	local06, local08 wz
220e0     1C 00 90 AD |  if_e	jmp	#LR__2775
220e4                 | '       fillpush(x1)
220e4     57 93 02 F6 | 	mov	arg01, local05
220e8     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
220ec                 | '       fillpush(y + 1)
220ec     55 93 02 F6 | 	mov	arg01, local03
220f0     01 92 06 F1 | 	add	arg01, #1
220f4     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
220f8                 | '       spanBelow := 1
220f8     01 BA 06 F6 | 	mov	local11, #1
220fc     50 00 90 FD | 	jmp	#LR__2776
22100                 | LR__2775
22100                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
22100     00 B0 06 F6 | 	mov	local06, #0
22104     00 B2 06 F6 | 	mov	local07, #0
22108     00 BA 0E F2 | 	cmp	local11, #0 wz
2210c     01 00 00 5F 
22110     3F AA 56 52 |  if_ne	cmps	local03, ##575 wc
22114     01 B2 66 46 |  if_c_and_nz	neg	local07, #1
22118     00 B2 0E F2 | 	cmp	local07, #0 wz
2211c     00 B0 26 56 |  if_ne	not	local06, #0
22120     00 B4 06 F6 | 	mov	local08, #0
22124     00 B6 06 F6 | 	mov	local09, #0
22128     55 95 02 F6 | 	mov	arg02, local03
2212c     01 94 06 F1 | 	add	arg02, #1
22130     57 93 02 F6 | 	mov	arg01, local05
22134     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
22138     54 7B 0A F2 | 	cmp	result1, local02 wz
2213c     00 B6 26 56 |  if_ne	not	local09, #0
22140     00 B6 0E F2 | 	cmp	local09, #0 wz
22144     00 B4 26 56 |  if_ne	not	local08, #0
22148     5A B1 CA F7 | 	test	local06, local08 wz
2214c                 | '       spanbelow := 0
2214c     00 BA 06 56 |  if_ne	mov	local11, #0
22150                 | LR__2776
22150                 | '     x1++
22150     01 AE 06 F1 | 	add	local05, #1
22154     3C FE 9F FD | 	jmp	#LR__2772
22158                 | LR__2777
22158                 | '   y:=fillpop()
22158     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
2215c     3D AB 02 F6 | 	mov	local03, result1
22160                 | '   x:=fillpop()
22160     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
22164     3D AD 02 F6 | 	mov	local04, result1
22168     C8 FD 9F FD | 	jmp	#LR__2770
2216c                 | LR__2778
2216c                 | LR__2779
2216c     E7 F0 03 F6 | 	mov	ptra, fp
22170     F2 00 A0 FD | 	call	#popregs_
22174                 | _hg010b_spin2_fill_ret
22174     2D 00 64 FD | 	ret
22178                 | 
22178                 | ' 'pinlow(38)    
22178                 | ' 
22178                 | ' '-- A filled circle -----------------------------------------------------
22178                 | ' 
22178                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
22178                 | _hg010b_spin2_fcircle
22178     08 CA 05 F6 | 	mov	COUNT_, #8
2217c     E8 00 A0 FD | 	call	#pushregs_
22180     4B A7 02 F6 | 	mov	local01, arg03
22184     FF FF 7F FF 
22188     FE A7 06 FD | 	qmul	local01, ##-2
2218c     49 A9 02 F6 | 	mov	local02, arg01
22190     4A AB 02 F6 | 	mov	local03, arg02
22194     4C AD 02 F6 | 	mov	local04, arg04
22198                 | ' 
22198                 | ' d:=5-4*r
22198     53 99 02 F6 | 	mov	arg04, local01
2219c     02 98 66 F0 | 	shl	arg04, #2
221a0     05 AE 06 F6 | 	mov	local05, #5
221a4     4C AF 82 F1 | 	sub	local05, arg04
221a8                 | ' x:=0
221a8     00 B0 06 F6 | 	mov	local06, #0
221ac                 | ' y:=r
221ac                 | ' da:=(-2*r+5)*4
221ac                 | ' db:=3*4
221ac     0C B2 06 F6 | 	mov	local07, #12
221b0                 | ' repeat while (x<=y) 
221b0     18 B4 62 FD | 	getqx	local08
221b4     05 B4 06 F1 | 	add	local08, #5
221b8     02 B4 66 F0 | 	shl	local08, #2
221bc                 | LR__2780
221bc     53 B1 5A F2 | 	cmps	local06, local01 wcz
221c0     B4 00 90 1D |  if_a	jmp	#LR__2782
221c4                 | '   fastline(x0-x,x0+x,y0-y,c)
221c4     54 93 02 F6 | 	mov	arg01, local02
221c8     58 93 82 F1 | 	sub	arg01, local06
221cc     54 95 02 F6 | 	mov	arg02, local02
221d0     58 95 02 F1 | 	add	arg02, local06
221d4     55 97 02 F6 | 	mov	arg03, local03
221d8     53 97 82 F1 | 	sub	arg03, local01
221dc     56 99 02 F6 | 	mov	arg04, local04
221e0     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
221e4                 | '   fastline(x0-x,x0+x,y0+y,c)
221e4     54 93 02 F6 | 	mov	arg01, local02
221e8     58 93 82 F1 | 	sub	arg01, local06
221ec     54 95 02 F6 | 	mov	arg02, local02
221f0     58 95 02 F1 | 	add	arg02, local06
221f4     55 97 02 F6 | 	mov	arg03, local03
221f8     53 97 02 F1 | 	add	arg03, local01
221fc     56 99 02 F6 | 	mov	arg04, local04
22200     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
22204                 | '   fastline(x0-y,x0+y,y0-x,c)
22204     54 93 02 F6 | 	mov	arg01, local02
22208     53 93 82 F1 | 	sub	arg01, local01
2220c     54 95 02 F6 | 	mov	arg02, local02
22210     53 95 02 F1 | 	add	arg02, local01
22214     55 97 02 F6 | 	mov	arg03, local03
22218     58 97 82 F1 | 	sub	arg03, local06
2221c     56 99 02 F6 | 	mov	arg04, local04
22220     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
22224                 | '   fastline(x0-y,x0+y,y0+x,c)
22224     54 93 02 F6 | 	mov	arg01, local02
22228     53 93 82 F1 | 	sub	arg01, local01
2222c     54 95 02 F6 | 	mov	arg02, local02
22230     53 95 02 F1 | 	add	arg02, local01
22234     55 97 02 F6 | 	mov	arg03, local03
22238     58 97 02 F1 | 	add	arg03, local06
2223c     56 99 02 F6 | 	mov	arg04, local04
22240     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
22244                 | '   if d>0 
22244     01 AE 56 F2 | 	cmps	local05, #1 wc
22248     18 00 90 CD |  if_b	jmp	#LR__2781
2224c                 | '     d+=da
2224c     5A AF 02 F1 | 	add	local05, local08
22250                 | '     y-=1
22250     01 A6 86 F1 | 	sub	local01, #1
22254                 | '     x+=1
22254     01 B0 06 F1 | 	add	local06, #1
22258                 | '     da+=4*4
22258     10 B4 06 F1 | 	add	local08, #16
2225c                 | '     db+=2*4
2225c     08 B2 06 F1 | 	add	local07, #8
22260     58 FF 9F FD | 	jmp	#LR__2780
22264                 | LR__2781
22264                 | '   else
22264                 | '     d+=db
22264     59 AF 02 F1 | 	add	local05, local07
22268                 | '     x+=1
22268     01 B0 06 F1 | 	add	local06, #1
2226c                 | '     da+=2*4
2226c     08 B4 06 F1 | 	add	local08, #8
22270                 | '     db+=2*4
22270     08 B2 06 F1 | 	add	local07, #8
22274     44 FF 9F FD | 	jmp	#LR__2780
22278                 | LR__2782
22278     E7 F0 03 F6 | 	mov	ptra, fp
2227c     F2 00 A0 FD | 	call	#popregs_
22280                 | _hg010b_spin2_fcircle_ret
22280     2D 00 64 FD | 	ret
22284                 | 
22284                 | '  
22284                 | ' '-- A circle ------------------------------------------------------------ 
22284                 | '  
22284                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
22284                 | _hg010b_spin2_circle
22284     08 CA 05 F6 | 	mov	COUNT_, #8
22288     E8 00 A0 FD | 	call	#pushregs_
2228c     4B A7 02 F6 | 	mov	local01, arg03
22290     FF FF 7F FF 
22294     FE A7 06 FD | 	qmul	local01, ##-2
22298     49 A9 02 F6 | 	mov	local02, arg01
2229c     4A AB 02 F6 | 	mov	local03, arg02
222a0     4C AD 02 F6 | 	mov	local04, arg04
222a4                 | ' 
222a4                 | '  
222a4                 | ' d:=5-4*r
222a4     53 99 02 F6 | 	mov	arg04, local01
222a8     02 98 66 F0 | 	shl	arg04, #2
222ac     05 AE 06 F6 | 	mov	local05, #5
222b0     4C AF 82 F1 | 	sub	local05, arg04
222b4                 | ' x:=0
222b4     00 B0 06 F6 | 	mov	local06, #0
222b8                 | ' y:=r
222b8                 | ' da:=(-2*r+5)*4
222b8                 | ' db:=3*4
222b8     0C B2 06 F6 | 	mov	local07, #12
222bc                 | ' repeat while (x<=y) 
222bc     18 B4 62 FD | 	getqx	local08
222c0     05 B4 06 F1 | 	add	local08, #5
222c4     02 B4 66 F0 | 	shl	local08, #2
222c8                 | LR__2790
222c8     53 B1 5A F2 | 	cmps	local06, local01 wcz
222cc     F4 00 90 1D |  if_a	jmp	#LR__2792
222d0                 | '   putpixel(x0-x,y0-y,c)
222d0     54 93 02 F6 | 	mov	arg01, local02
222d4     58 93 82 F1 | 	sub	arg01, local06
222d8     55 95 02 F6 | 	mov	arg02, local03
222dc     53 95 82 F1 | 	sub	arg02, local01
222e0     56 97 02 F6 | 	mov	arg03, local04
222e4     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
222e8                 | '   putpixel(x0-x,y0+y,c)
222e8     54 93 02 F6 | 	mov	arg01, local02
222ec     58 93 82 F1 | 	sub	arg01, local06
222f0     55 95 02 F6 | 	mov	arg02, local03
222f4     53 95 02 F1 | 	add	arg02, local01
222f8     56 97 02 F6 | 	mov	arg03, local04
222fc     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
22300                 | '   putpixel(x0+x,y0-y,c)
22300     54 93 02 F6 | 	mov	arg01, local02
22304     58 93 02 F1 | 	add	arg01, local06
22308     55 95 02 F6 | 	mov	arg02, local03
2230c     53 95 82 F1 | 	sub	arg02, local01
22310     56 97 02 F6 | 	mov	arg03, local04
22314     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
22318                 | '   putpixel(x0+x,y0+y,c)
22318     54 93 02 F6 | 	mov	arg01, local02
2231c     58 93 02 F1 | 	add	arg01, local06
22320     55 95 02 F6 | 	mov	arg02, local03
22324     53 95 02 F1 | 	add	arg02, local01
22328     56 97 02 F6 | 	mov	arg03, local04
2232c     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
22330                 | '   putpixel(x0-y,y0-x,c)
22330     54 93 02 F6 | 	mov	arg01, local02
22334     53 93 82 F1 | 	sub	arg01, local01
22338     55 95 02 F6 | 	mov	arg02, local03
2233c     58 95 82 F1 | 	sub	arg02, local06
22340     56 97 02 F6 | 	mov	arg03, local04
22344     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
22348                 | '   putpixel(x0-y,y0+x,c)
22348     54 93 02 F6 | 	mov	arg01, local02
2234c     53 93 82 F1 | 	sub	arg01, local01
22350     55 95 02 F6 | 	mov	arg02, local03
22354     58 95 02 F1 | 	add	arg02, local06
22358     56 97 02 F6 | 	mov	arg03, local04
2235c     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
22360                 | '   putpixel(x0+y,y0-x,c)
22360     54 93 02 F6 | 	mov	arg01, local02
22364     53 93 02 F1 | 	add	arg01, local01
22368     55 95 02 F6 | 	mov	arg02, local03
2236c     58 95 82 F1 | 	sub	arg02, local06
22370     56 97 02 F6 | 	mov	arg03, local04
22374     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
22378                 | '   putpixel(x0+y,y0+x,c)
22378     54 93 02 F6 | 	mov	arg01, local02
2237c     53 93 02 F1 | 	add	arg01, local01
22380     55 95 02 F6 | 	mov	arg02, local03
22384     58 95 02 F1 | 	add	arg02, local06
22388     56 97 02 F6 | 	mov	arg03, local04
2238c     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
22390                 | '   if d>0 
22390     01 AE 56 F2 | 	cmps	local05, #1 wc
22394     18 00 90 CD |  if_b	jmp	#LR__2791
22398                 | '     d+=da
22398     5A AF 02 F1 | 	add	local05, local08
2239c                 | '     y-=1
2239c     01 A6 86 F1 | 	sub	local01, #1
223a0                 | '     x+=1
223a0     01 B0 06 F1 | 	add	local06, #1
223a4                 | '     da+=4*4
223a4     10 B4 06 F1 | 	add	local08, #16
223a8                 | '     db+=2*4
223a8     08 B2 06 F1 | 	add	local07, #8
223ac     18 FF 9F FD | 	jmp	#LR__2790
223b0                 | LR__2791
223b0                 | '   else
223b0                 | '     d+=db
223b0     59 AF 02 F1 | 	add	local05, local07
223b4                 | '     x+=1
223b4     01 B0 06 F1 | 	add	local06, #1
223b8                 | '     da+=2*4
223b8     08 B4 06 F1 | 	add	local08, #8
223bc                 | '     db+=2*4
223bc     08 B2 06 F1 | 	add	local07, #8
223c0     04 FF 9F FD | 	jmp	#LR__2790
223c4                 | LR__2792
223c4     E7 F0 03 F6 | 	mov	ptra, fp
223c8     F2 00 A0 FD | 	call	#popregs_
223cc                 | _hg010b_spin2_circle_ret
223cc     2D 00 64 FD | 	ret
223d0                 | 
223d0                 | '     
223d0                 | ' '-- A frame (an empty rectangle) ---------------------------------------
223d0                 | ' 
223d0                 | ' pub frame(x1,y1,x2,y2,c)
223d0                 | _hg010b_spin2_frame
223d0     05 CA 05 F6 | 	mov	COUNT_, #5
223d4     E8 00 A0 FD | 	call	#pushregs_
223d8     49 A7 02 F6 | 	mov	local01, arg01
223dc     4A A9 02 F6 | 	mov	local02, arg02
223e0     4B AB 02 F6 | 	mov	local03, arg03
223e4     4C AD 02 F6 | 	mov	local04, arg04
223e8     4D AF 02 F6 | 	mov	local05, arg05
223ec                 | ' 
223ec                 | ' fastline(x1,x2,y1,c)
223ec     53 93 02 F6 | 	mov	arg01, local01
223f0     55 95 02 F6 | 	mov	arg02, local03
223f4     54 97 02 F6 | 	mov	arg03, local02
223f8     57 99 02 F6 | 	mov	arg04, local05
223fc     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
22400                 | ' fastline(x1,x2,y2,c)
22400     53 93 02 F6 | 	mov	arg01, local01
22404     55 95 02 F6 | 	mov	arg02, local03
22408     56 97 02 F6 | 	mov	arg03, local04
2240c     57 99 02 F6 | 	mov	arg04, local05
22410     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
22414                 | ' line(x1,y1,x1,y2,c)
22414     53 93 02 F6 | 	mov	arg01, local01
22418     54 95 02 F6 | 	mov	arg02, local02
2241c     53 97 02 F6 | 	mov	arg03, local01
22420     56 99 02 F6 | 	mov	arg04, local04
22424     57 9B 02 F6 | 	mov	arg05, local05
22428                 | ' draw(x1,y1,x2,y2,c)
22428     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
2242c                 | ' line(x2,y1,x2,y2,c)
2242c     55 93 02 F6 | 	mov	arg01, local03
22430     54 95 02 F6 | 	mov	arg02, local02
22434     55 97 02 F6 | 	mov	arg03, local03
22438     56 99 02 F6 | 	mov	arg04, local04
2243c     57 9B 02 F6 | 	mov	arg05, local05
22440                 | ' draw(x1,y1,x2,y2,c)
22440     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
22444     E7 F0 03 F6 | 	mov	ptra, fp
22448     F2 00 A0 FD | 	call	#popregs_
2244c                 | _hg010b_spin2_frame_ret
2244c     2D 00 64 FD | 	ret
22450                 | 
22450                 | ' 
22450                 | ' '-- A box (a filled rectangle) ----------------------------------------
22450                 | ' 
22450                 | ' pub box(x1,y1,x2,y2,c) |yy
22450                 | _hg010b_spin2_box
22450     06 CA 05 F6 | 	mov	COUNT_, #6
22454     E8 00 A0 FD | 	call	#pushregs_
22458     49 A7 02 F6 | 	mov	local01, arg01
2245c     4A A9 02 F6 | 	mov	local02, arg02
22460     4B AB 02 F6 | 	mov	local03, arg03
22464     4C AD 02 F6 | 	mov	local04, arg04
22468     4D AF 02 F6 | 	mov	local05, arg05
2246c                 | ' 
2246c                 | ' repeat yy from y1 to y2
2246c     54 AD 52 F2 | 	cmps	local04, local02 wc
22470     01 B0 86 F6 | 	negc	local06, #1
22474     58 AD 02 F1 | 	add	local04, local06
22478                 | LR__2800
22478                 | '   fastline(x1,x2,yy,c)
22478     53 93 02 F6 | 	mov	arg01, local01
2247c     55 95 02 F6 | 	mov	arg02, local03
22480     57 99 02 F6 | 	mov	arg04, local05
22484     54 97 02 F6 | 	mov	arg03, local02
22488     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
2248c     58 A9 02 F1 | 	add	local02, local06
22490     56 A9 0A F2 | 	cmp	local02, local04 wz
22494     E0 FF 9F 5D |  if_ne	jmp	#LR__2800
22498     E7 F0 03 F6 | 	mov	ptra, fp
2249c     F2 00 A0 FD | 	call	#popregs_
224a0                 | _hg010b_spin2_box_ret
224a0     2D 00 64 FD | 	ret
224a4                 | 
224a4                 | '       
224a4                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
224a4                 | _hg010b_spin2_putcharxycgf
224a4                 | ' 
224a4                 | '  
224a4                 | ' repeat yy from 0 to 15
224a4     00 80 06 F6 | 	mov	_var01, #0
224a8     D7 8A 48 FB | 	callpa	#(@LR__2812-@LR__2810)>>2,fcache_load_ptr_
224ac                 | LR__2810
224ac                 | ' 
224ac                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
224ac     95 64 06 F1 | 	add	objptr, #149
224b0     32 83 02 FB | 	rdlong	_var02, objptr
224b4     0A 82 66 F0 | 	shl	_var02, #10
224b8     37 85 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
224bc     41 85 02 F1 | 	add	_var03, _var02
224c0     4B 83 02 F6 | 	mov	_var02, arg03
224c4     04 82 66 F0 | 	shl	_var02, #4
224c8     41 85 02 F1 | 	add	_var03, _var02
224cc     40 85 02 F1 | 	add	_var03, _var01
224d0     42 85 C2 FA | 	rdbyte	_var03, _var03
224d4                 | '   asm
224d4     00 84 0E F4 | 	testb	_var03, #0 wz
224d8     4C 87 C2 A8 |  if_e	setbyte	_var04, arg04, #0
224dc     4D 87 C2 58 |  if_ne	setbyte	_var04, arg05, #0
224e0     01 84 0E F4 | 	testb	_var03, #1 wz
224e4     4C 87 CA A8 |  if_e	setbyte	_var04, arg04, #1
224e8     4D 87 CA 58 |  if_ne	setbyte	_var04, arg05, #1
224ec     02 84 0E F4 | 	testb	_var03, #2 wz
224f0     4C 87 D2 A8 |  if_e	setbyte	_var04, arg04, #2
224f4     4D 87 D2 58 |  if_ne	setbyte	_var04, arg05, #2
224f8     03 84 0E F4 | 	testb	_var03, #3 wz
224fc     4C 87 DA A8 |  if_e	setbyte	_var04, arg04, #3
22500     4D 87 DA 58 |  if_ne	setbyte	_var04, arg05, #3
22504     04 84 0E F4 | 	testb	_var03, #4 wz
22508     4C 89 C2 A8 |  if_e	setbyte	_var05, arg04, #0
2250c     4D 89 C2 58 |  if_ne	setbyte	_var05, arg05, #0
22510     05 84 0E F4 | 	testb	_var03, #5 wz
22514     4C 89 CA A8 |  if_e	setbyte	_var05, arg04, #1
22518     4D 89 CA 58 |  if_ne	setbyte	_var05, arg05, #1
2251c     06 84 0E F4 | 	testb	_var03, #6 wz
22520     4C 89 D2 A8 |  if_e	setbyte	_var05, arg04, #2
22524     4D 89 D2 58 |  if_ne	setbyte	_var05, arg05, #2
22528     07 84 0E F4 | 	testb	_var03, #7 wz
2252c     4C 89 DA A8 |  if_e	setbyte	_var05, arg04, #3
22530     4D 89 DA 58 |  if_ne	setbyte	_var05, arg05, #3
22534                 | '   
22534                 | '   ccc[0]:=c1
22534     99 65 06 F1 | 	add	objptr, #409
22538     32 87 62 FC | 	wrlong	_var04, objptr
2253c                 | '   ccc[1]:=c2 
2253c     04 64 06 F1 | 	add	objptr, #4
22540     32 89 62 FC | 	wrlong	_var05, objptr
22544                 | '   long[mailbox0][2]:=8
22544     49 64 86 F1 | 	sub	objptr, #73
22548     32 85 02 FB | 	rdlong	_var03, objptr
2254c     08 84 06 F1 | 	add	_var03, #8
22550     42 11 68 FC | 	wrlong	#8, _var03
22554                 | '   long[mailbox0][1]:=@ccc
22554     32 85 02 F6 | 	mov	_var03, objptr
22558     45 84 06 F1 | 	add	_var03, #69
2255c     32 83 02 FB | 	rdlong	_var02, objptr
22560     04 82 06 F1 | 	add	_var02, #4
22564     41 85 62 FC | 	wrlong	_var03, _var02
22568                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
22568     0C 65 86 F1 | 	sub	objptr, #268
2256c     32 85 02 FB | 	rdlong	_var03, objptr
22570     4A 83 02 F6 | 	mov	_var02, arg02
22574     40 83 02 F1 | 	add	_var02, _var01
22578     0A 82 66 F0 | 	shl	_var02, #10
2257c     49 8B 02 F6 | 	mov	_var06, arg01
22580     02 8A 66 F0 | 	shl	_var06, #2
22584     45 83 02 F1 | 	add	_var02, _var06
22588     41 85 02 F1 | 	add	_var03, _var02
2258c     00 00 78 FF 
22590     00 84 06 F1 | 	add	_var03, ##-268435456
22594     0C 65 06 F1 | 	add	objptr, #268
22598     32 8B 02 FB | 	rdlong	_var06, objptr
2259c     45 85 62 FC | 	wrlong	_var03, _var06
225a0                 | '   repeat
225a0                 | LR__2811
225a0     32 85 02 FB | 	rdlong	_var03, objptr
225a4     42 83 02 FB | 	rdlong	_var02, _var03
225a8     00 82 56 F2 | 	cmps	_var02, #0 wc
225ac     F0 FF 9F CD |  if_b	jmp	#LR__2811
225b0     E9 65 86 F1 | 	sub	objptr, #489
225b4     01 80 06 F1 | 	add	_var01, #1
225b8     10 80 56 F2 | 	cmps	_var01, #16 wc
225bc     EC FE 9F CD |  if_b	jmp	#LR__2810
225c0                 | LR__2812
225c0                 | _hg010b_spin2_putcharxycgf_ret
225c0     2D 00 64 FD | 	ret
225c4                 | 
225c4                 | ' 
225c4                 | ' 
225c4                 | ' '**********************************************************************r***
225c4                 | ' '                                                                        *
225c4                 | ' ' Font related functions                                                 *
225c4                 | ' '                                                                        *
225c4                 | ' '*************************************************************************
225c4                 | ' 
225c4                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
225c4                 | ' 
225c4                 | ' pub setfontfamily(afontnum)
225c4                 | _hg010b_spin2_setfontfamily
225c4                 | ' 
225c4                 | ' font_family:=afontnum
225c4     95 64 06 F1 | 	add	objptr, #149
225c8     32 93 62 FC | 	wrlong	arg01, objptr
225cc     95 64 86 F1 | 	sub	objptr, #149
225d0                 | ' 'if afontnum==8
225d0                 | ' '  font_ptr:=@amiga_font
225d0                 | ' 
225d0                 | ' if afontnum==4
225d0     04 92 0E F2 | 	cmp	arg01, #4 wz
225d4                 | '   font_ptr:=@st_font
225d4     37 81 02 A6 |  if_e	mov	_var01, ptr__hg010b_spin2_dat__
225d8     08 00 00 AF 
225dc     00 80 06 A1 |  if_e	add	_var01, ##4096
225e0     08 64 06 A1 |  if_e	add	objptr, #8
225e4     32 81 62 AC |  if_e	wrlong	_var01, objptr
225e8     08 64 86 A1 |  if_e	sub	objptr, #8
225ec                 | ' if afontnum==0
225ec     00 92 0E F2 | 	cmp	arg01, #0 wz
225f0                 | '   font_ptr:=@vga_font
225f0     08 64 06 A1 |  if_e	add	objptr, #8
225f4     32 6F 62 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
225f8     08 64 86 A1 |  if_e	sub	objptr, #8
225fc                 | _hg010b_spin2_setfontfamily_ret
225fc     2D 00 64 FD | 	ret
22600                 | 
22600                 | ' 
22600                 | ' ''--------- Redefine a character
22600                 | ' 
22600                 | ' pub defchar(ch,ptr) | s,i ' 
22600                 | _hg010b_spin2_defchar
22600                 | ' 
22600                 | ' s:=font_ptr+ch*16
22600     08 64 06 F1 | 	add	objptr, #8
22604     32 81 02 FB | 	rdlong	_var01, objptr
22608     08 64 86 F1 | 	sub	objptr, #8
2260c     04 92 66 F0 | 	shl	arg01, #4
22610     49 81 02 F1 | 	add	_var01, arg01
22614                 | ' repeat i from 0 to 15
22614     00 82 06 F6 | 	mov	_var02, #0
22618     D7 12 48 FB | 	callpa	#(@LR__2821-@LR__2820)>>2,fcache_load_ptr_
2261c                 | LR__2820
2261c                 | '   byte[s+i]:=byte[ptr+i]
2261c     4A 93 02 F6 | 	mov	arg01, arg02
22620     41 93 02 F1 | 	add	arg01, _var02
22624     40 85 02 F6 | 	mov	_var03, _var01
22628     49 93 C2 FA | 	rdbyte	arg01, arg01
2262c     41 85 02 F1 | 	add	_var03, _var02
22630     42 93 42 FC | 	wrbyte	arg01, _var03
22634     01 82 06 F1 | 	add	_var02, #1
22638     10 82 56 F2 | 	cmps	_var02, #16 wc
2263c     DC FF 9F CD |  if_b	jmp	#LR__2820
22640                 | LR__2821
22640                 | _hg010b_spin2_defchar_ret
22640     2D 00 64 FD | 	ret
22644                 | 
22644                 | ' 
22644                 | ' 
22644                 | ' '*************************************************************************
22644                 | ' '                                                                        *
22644                 | ' '  Cursor functions                                                      *
22644                 | ' '                                                                        *
22644                 | ' '*************************************************************************
22644                 | ' 
22644                 | ' 
22644                 | ' pub setcursorpos(x,y)
22644                 | _hg010b_spin2_setcursorpos
22644     01 CA 05 F6 | 	mov	COUNT_, #1
22648     E8 00 A0 FD | 	call	#pushregs_
2264c                 | ' 
2264c                 | ' ''---------- Set the (x,y) position of cursor
2264c                 | ' 
2264c                 | ' cursor_x:=x
2264c     3C 64 06 F1 | 	add	objptr, #60
22650     32 93 52 FC | 	wrword	arg01, objptr
22654                 | ' cursor_y:=y
22654     02 64 06 F1 | 	add	objptr, #2
22658     32 95 42 FC | 	wrbyte	arg02, objptr
2265c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
2265c     02 64 86 F1 | 	sub	objptr, #2
22660     32 A7 E2 FA | 	rdword	local01, objptr
22664     02 A6 66 F0 | 	shl	local01, #2
22668     4A 97 E2 F8 | 	getbyte	arg03, arg02, #0
2266c     3C 64 86 F1 | 	sub	objptr, #60
22670     04 96 66 F0 | 	shl	arg03, #4
22674     04 96 06 F1 | 	add	arg03, #4
22678     11 92 06 F6 | 	mov	arg01, #17
2267c     53 95 02 F6 | 	mov	arg02, local01
22680     0C F3 BF FD | 	call	#_hg010b_spin2_setspritepos
22684     E7 F0 03 F6 | 	mov	ptra, fp
22688     F2 00 A0 FD | 	call	#popregs_
2268c                 | _hg010b_spin2_setcursorpos_ret
2268c     2D 00 64 FD | 	ret
22690                 | 
22690                 | ' 
22690                 | ' pub setcursorx(x)
22690                 | _hg010b_spin2_setcursorx
22690                 | ' cursor_x:=x
22690     3C 64 06 F1 | 	add	objptr, #60
22694     32 93 52 FC | 	wrword	arg01, objptr
22698                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22698     49 95 32 F9 | 	getword	arg02, arg01, #0
2269c     02 94 66 F0 | 	shl	arg02, #2
226a0     02 64 06 F1 | 	add	objptr, #2
226a4     32 97 C2 FA | 	rdbyte	arg03, objptr
226a8     3E 64 86 F1 | 	sub	objptr, #62
226ac     04 96 66 F0 | 	shl	arg03, #4
226b0     04 96 06 F1 | 	add	arg03, #4
226b4     11 92 06 F6 | 	mov	arg01, #17
226b8     D4 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
226bc                 | _hg010b_spin2_setcursorx_ret
226bc     2D 00 64 FD | 	ret
226c0                 | 
226c0                 | ' 
226c0                 | ' pub setcursory(y) 
226c0                 | _hg010b_spin2_setcursory
226c0                 | ' cursor_y:=y
226c0     3E 64 06 F1 | 	add	objptr, #62
226c4     32 93 42 FC | 	wrbyte	arg01, objptr
226c8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
226c8     02 64 86 F1 | 	sub	objptr, #2
226cc     32 95 E2 FA | 	rdword	arg02, objptr
226d0     02 94 66 F0 | 	shl	arg02, #2
226d4     49 97 E2 F8 | 	getbyte	arg03, arg01, #0
226d8     3C 64 86 F1 | 	sub	objptr, #60
226dc     04 96 66 F0 | 	shl	arg03, #4
226e0     04 96 06 F1 | 	add	arg03, #4
226e4     11 92 06 F6 | 	mov	arg01, #17
226e8     A4 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
226ec                 | _hg010b_spin2_setcursory_ret
226ec     2D 00 64 FD | 	ret
226f0                 | 
226f0                 | ' 
226f0                 | ' '*************************************************************************
226f0                 | ' '                                                                        *
226f0                 | ' '  VBlank functions                                                      *
226f0                 | ' '                                                                        *
226f0                 | ' '*************************************************************************
226f0                 | ' 
226f0                 | ' pub waitvbl(amount) | i
226f0                 | _hg010b_spin2_waitvbl
226f0     03 CA 05 F6 | 	mov	COUNT_, #3
226f4     E8 00 A0 FD | 	call	#pushregs_
226f8     49 A7 02 F6 | 	mov	local01, arg01
226fc                 | ' 
226fc                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
226fc                 | ' 
226fc                 | ' repeat i from 1 to amount
226fc     01 A8 06 F6 | 	mov	local02, #1
22700     01 A6 56 F2 | 	cmps	local01, #1 wc
22704     01 AA 86 F6 | 	negc	local03, #1
22708     55 A7 02 F1 | 	add	local01, local03
2270c                 | LR__2830
2270c                 | '   repeat until vblank==0
2270c                 | LR__2831
2270c     49 64 06 F1 | 	add	objptr, #73
22710     32 93 0A FB | 	rdlong	arg01, objptr wz
22714     49 64 86 F1 | 	sub	objptr, #73
22718     0C 00 90 AD |  if_e	jmp	#LR__2832
2271c                 | '     waitus(100)
2271c     64 92 06 F6 | 	mov	arg01, #100
22720     CC 23 B0 FD | 	call	#__system___waitus
22724     E4 FF 9F FD | 	jmp	#LR__2831
22728                 | LR__2832
22728                 | '   repeat until vblank==1
22728                 | LR__2833
22728     49 64 06 F1 | 	add	objptr, #73
2272c     32 93 02 FB | 	rdlong	arg01, objptr
22730     49 64 86 F1 | 	sub	objptr, #73
22734     01 92 0E F2 | 	cmp	arg01, #1 wz
22738     0C 00 90 AD |  if_e	jmp	#LR__2834
2273c                 | '     waitus(100)
2273c     64 92 06 F6 | 	mov	arg01, #100
22740     AC 23 B0 FD | 	call	#__system___waitus
22744     E0 FF 9F FD | 	jmp	#LR__2833
22748                 | LR__2834
22748     55 A9 02 F1 | 	add	local02, local03
2274c     53 A9 0A F2 | 	cmp	local02, local01 wz
22750     B8 FF 9F 5D |  if_ne	jmp	#LR__2830
22754     E7 F0 03 F6 | 	mov	ptra, fp
22758     F2 00 A0 FD | 	call	#popregs_
2275c                 | _hg010b_spin2_waitvbl_ret
2275c     2D 00 64 FD | 	ret
22760                 | 
22760                 | ' 
22760                 | ' ''---------- Set color #c in palette to r,g,b
22760                 | ' 
22760                 | ' pub setcolor(c,r,g,b)  |cc
22760                 | _hg010b_spin2_setcolor
22760                 | ' 
22760                 | ' cc:=r<<24+g<<16+b<<8
22760     18 94 66 F0 | 	shl	arg02, #24
22764     10 96 66 F0 | 	shl	arg03, #16
22768     4B 95 02 F1 | 	add	arg02, arg03
2276c     08 98 66 F0 | 	shl	arg04, #8
22770     4C 95 02 F1 | 	add	arg02, arg04
22774                 | ' long[palette_ptr+4*c]:=cc
22774     1C 64 06 F1 | 	add	objptr, #28
22778     32 99 02 FB | 	rdlong	arg04, objptr
2277c     1C 64 86 F1 | 	sub	objptr, #28
22780     02 92 66 F0 | 	shl	arg01, #2
22784     49 99 02 F1 | 	add	arg04, arg01
22788     4C 95 62 FC | 	wrlong	arg02, arg04
2278c                 | _hg010b_spin2_setcolor_ret
2278c     2D 00 64 FD | 	ret
22790                 | 
22790                 | ' 
22790                 | ' 
22790                 | ' pub cls(fc,bc)   :c,i
22790                 | _hg010b_spin2_cls
22790     02 CA 05 F6 | 	mov	COUNT_, #2
22794     E8 00 A0 FD | 	call	#pushregs_
22798     49 A7 02 F6 | 	mov	local01, arg01
2279c     4A A9 02 F6 | 	mov	local02, arg02
227a0                 | ' 
227a0                 | ' c:=bc
227a0                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
227a0     DD 64 06 F1 | 	add	objptr, #221
227a4     32 93 02 FB | 	rdlong	arg01, objptr
227a8     A5 64 86 F1 | 	sub	objptr, #165
227ac     32 97 02 FB | 	rdlong	arg03, objptr
227b0     02 96 66 F0 | 	shl	arg03, #2
227b4     54 95 02 F6 | 	mov	arg02, local02
227b8     00 98 06 F6 | 	mov	arg04, #0
227bc     01 9A 06 F6 | 	mov	arg05, #1
227c0     0B 00 00 FF 
227c4     94 64 06 F1 | 	add	objptr, ##5780
227c8     C8 10 B0 FD | 	call	#_psram_spin2_fill
227cc                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
227cc     0B 00 00 FF 
227d0     C8 64 86 F1 | 	sub	objptr, ##5832
227d4     32 93 02 FB | 	rdlong	arg01, objptr
227d8     04 64 86 F1 | 	sub	objptr, #4
227dc     32 97 02 FB | 	rdlong	arg03, objptr
227e0     49 97 82 F1 | 	sub	arg03, arg01
227e4     20 94 06 F6 | 	mov	arg02, #32
227e8     00 98 06 F6 | 	mov	arg04, #0
227ec     01 9A 06 F6 | 	mov	arg05, #1
227f0     0B 00 00 FF 
227f4     CC 64 06 F1 | 	add	objptr, ##5836
227f8     98 10 B0 FD | 	call	#_psram_spin2_fill
227fc                 | ' setwritecolors(fc,bc)
227fc                 | ' 
227fc                 | ' write_color:=ff
227fc     0B 00 00 FF 
22800     8B 64 86 F1 | 	sub	objptr, ##5771
22804     32 A7 62 FC | 	wrlong	local01, objptr
22808                 | ' write_background:=bb
22808     04 64 06 F1 | 	add	objptr, #4
2280c     32 A9 62 FC | 	wrlong	local02, objptr
22810                 | ' cursor_x:=0
22810     09 64 86 F1 | 	sub	objptr, #9
22814     32 01 58 FC | 	wrword	#0, objptr
22818                 | ' cursor_y:=0
22818     02 64 06 F1 | 	add	objptr, #2
2281c     32 01 48 FC | 	wrbyte	#0, objptr
22820                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22820     02 64 86 F1 | 	sub	objptr, #2
22824     32 95 E2 FA | 	rdword	arg02, objptr
22828     02 94 66 F0 | 	shl	arg02, #2
2282c     3C 64 86 F1 | 	sub	objptr, #60
22830     04 96 06 F6 | 	mov	arg03, #4
22834     11 92 06 F6 | 	mov	arg01, #17
22838     54 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
2283c                 | ' setcursorcolor(fc)
2283c     53 93 02 F6 | 	mov	arg01, local01
22840     60 ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
22844     54 7B 02 F6 | 	mov	result1, local02
22848     00 7C 06 F6 | 	mov	result2, #0
2284c     E7 F0 03 F6 | 	mov	ptra, fp
22850     F2 00 A0 FD | 	call	#popregs_
22854                 | _hg010b_spin2_cls_ret
22854     2D 00 64 FD | 	ret
22858                 | 
22858                 | ' 
22858                 | ' ''---------- Output a char at the cursor position, move the cursor 
22858                 | ' 
22858                 | ' pub putchar(achar) | c,x,y,l,newcpl
22858                 | _hg010b_spin2_putchar
22858     02 CA 05 F6 | 	mov	COUNT_, #2
2285c     E8 00 A0 FD | 	call	#pushregs_
22860     49 A7 02 F6 | 	mov	local01, arg01
22864                 | ' 
22864                 | ' if achar==10
22864     0A A6 0E F2 | 	cmp	local01, #10 wz
22868                 | '   crlf()
22868     78 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
2286c                 | ' if achar==9
2286c     09 A6 0E F2 | 	cmp	local01, #9 wz
22870     18 00 90 5D |  if_ne	jmp	#LR__2840
22874                 | '   cursor_x:=(cursor_x& %11110000)+16
22874     3C 64 06 F1 | 	add	objptr, #60
22878     32 97 E2 FA | 	rdword	arg03, objptr
2287c     F0 96 06 F5 | 	and	arg03, #240
22880     10 96 06 F1 | 	add	arg03, #16
22884     32 97 52 FC | 	wrword	arg03, objptr
22888     3C 64 86 F1 | 	sub	objptr, #60
2288c                 | LR__2840
2288c                 | '   
2288c                 | ' if (achar<>9) && (achar<>10) 
2288c     09 A6 0E F2 | 	cmp	local01, #9 wz
22890     0A A6 0E 52 |  if_ne	cmp	local01, #10 wz
22894     A8 00 90 AD |  if_e	jmp	#LR__2841
22898                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
22898     3C 64 06 F1 | 	add	objptr, #60
2289c     32 93 E2 FA | 	rdword	arg01, objptr
228a0     02 64 06 F1 | 	add	objptr, #2
228a4     32 95 C2 FA | 	rdbyte	arg02, objptr
228a8     04 94 66 F0 | 	shl	arg02, #4
228ac     04 94 06 F1 | 	add	arg02, #4
228b0     03 64 06 F1 | 	add	objptr, #3
228b4     32 99 02 FB | 	rdlong	arg04, objptr
228b8     04 64 06 F1 | 	add	objptr, #4
228bc     32 9B 02 FB | 	rdlong	arg05, objptr
228c0     45 64 86 F1 | 	sub	objptr, #69
228c4     53 97 02 F6 | 	mov	arg03, local01
228c8     D8 FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
228cc     04 64 06 F1 | 	add	objptr, #4
228d0     32 93 02 FB | 	rdlong	arg01, objptr
228d4     1C 00 00 FF 
228d8     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
228dc     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
228e0     3A 64 06 F1 | 	add	objptr, #58
228e4     32 9B C2 FA | 	rdbyte	arg05, objptr
228e8     4D 97 02 FD | 	qmul	arg03, arg05
228ec                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
228ec     1C 00 00 FF 
228f0     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
228f4     02 64 86 F1 | 	sub	objptr, #2
228f8     32 A9 E2 FA | 	rdword	local02, objptr
228fc     01 A8 46 F0 | 	shr	local02, #1
22900     53 95 02 F6 | 	mov	arg02, local01
22904     01 96 06 F6 | 	mov	arg03, #1
22908     00 98 06 F6 | 	mov	arg04, #0
2290c     01 9A 06 F6 | 	mov	arg05, #1
22910     0B 00 00 FF 
22914     90 64 06 F1 | 	add	objptr, ##5776
22918     18 A6 62 FD | 	getqx	local01
2291c     54 A7 02 F1 | 	add	local01, local02
22920     53 93 02 F1 | 	add	arg01, local01
22924     6C 0F B0 FD | 	call	#_psram_spin2_fill
22928                 | '   cursor_x+=2
22928     0B 00 00 FF 
2292c     90 64 86 F1 | 	sub	objptr, ##5776
22930     32 A9 E2 FA | 	rdword	local02, objptr
22934     02 A8 06 F1 | 	add	local02, #2
22938     32 A9 52 FC | 	wrword	local02, objptr
2293c     3C 64 86 F1 | 	sub	objptr, #60
22940                 | LR__2841
22940                 | ' 
22940                 | ' if cursor_x>=256
22940     3C 64 06 F1 | 	add	objptr, #60
22944     32 A9 E2 FA | 	rdword	local02, objptr
22948     3C 64 86 F1 | 	sub	objptr, #60
2294c     00 A9 56 F2 | 	cmps	local02, #256 wc
22950     64 00 90 CD |  if_b	jmp	#LR__2843
22954                 | '   cursor_x:=0
22954     3C 64 06 F1 | 	add	objptr, #60
22958     32 01 58 FC | 	wrword	#0, objptr
2295c                 | '   cursor_y+=1
2295c     02 64 06 F1 | 	add	objptr, #2
22960     32 A9 C2 FA | 	rdbyte	local02, objptr
22964     01 A8 06 F1 | 	add	local02, #1
22968     32 A9 42 FC | 	wrbyte	local02, objptr
2296c                 | '   if cursor_y>st_lines-1
2296c     C3 64 06 F1 | 	add	objptr, #195
22970     32 A9 02 FB | 	rdlong	local02, objptr
22974     01 A8 86 F1 | 	sub	local02, #1
22978     C3 64 86 F1 | 	sub	objptr, #195
2297c     32 97 C2 FA | 	rdbyte	arg03, objptr
22980     3E 64 86 F1 | 	sub	objptr, #62
22984     54 97 5A F2 | 	cmps	arg03, local02 wcz
22988     2C 00 90 ED |  if_be	jmp	#LR__2842
2298c                 | '     scrollup2()
2298c     00 92 06 F6 | 	mov	arg01, #0
22990     01 00 00 FF 
22994     58 94 06 F6 | 	mov	arg02, ##600
22998     10 96 06 F6 | 	mov	arg03, #16
2299c     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
229a0                 | '     cursor_y:=st_lines-1
229a0     01 65 06 F1 | 	add	objptr, #257
229a4     32 A9 02 FB | 	rdlong	local02, objptr
229a8     01 A8 86 F1 | 	sub	local02, #1
229ac     C3 64 86 F1 | 	sub	objptr, #195
229b0     32 A9 42 FC | 	wrbyte	local02, objptr
229b4     3E 64 86 F1 | 	sub	objptr, #62
229b8                 | LR__2842
229b8                 | LR__2843
229b8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
229b8     3C 64 06 F1 | 	add	objptr, #60
229bc     32 95 E2 FA | 	rdword	arg02, objptr
229c0     02 94 66 F0 | 	shl	arg02, #2
229c4     02 64 06 F1 | 	add	objptr, #2
229c8     32 97 C2 FA | 	rdbyte	arg03, objptr
229cc     3E 64 86 F1 | 	sub	objptr, #62
229d0     04 96 66 F0 | 	shl	arg03, #4
229d4     04 96 06 F1 | 	add	arg03, #4
229d8     11 92 06 F6 | 	mov	arg01, #17
229dc     B0 EF BF FD | 	call	#_hg010b_spin2_setspritepos
229e0     E7 F0 03 F6 | 	mov	ptra, fp
229e4     F2 00 A0 FD | 	call	#popregs_
229e8                 | _hg010b_spin2_putchar_ret
229e8     2D 00 64 FD | 	ret
229ec                 | 
229ec                 | '     
229ec                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
229ec                 | ' 
229ec                 | ' pub putchar2(achar) | c,x,y,l,newcpl
229ec                 | _hg010b_spin2_putchar2
229ec     02 CA 05 F6 | 	mov	COUNT_, #2
229f0     E8 00 A0 FD | 	call	#pushregs_
229f4     49 A7 02 F6 | 	mov	local01, arg01
229f8                 | ' 
229f8                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
229f8     3C 64 06 F1 | 	add	objptr, #60
229fc     32 93 E2 FA | 	rdword	arg01, objptr
22a00     02 64 06 F1 | 	add	objptr, #2
22a04     32 95 C2 FA | 	rdbyte	arg02, objptr
22a08     04 94 66 F0 | 	shl	arg02, #4
22a0c     04 94 06 F1 | 	add	arg02, #4
22a10     03 64 06 F1 | 	add	objptr, #3
22a14     32 99 02 FB | 	rdlong	arg04, objptr
22a18     04 64 06 F1 | 	add	objptr, #4
22a1c     32 9B 02 FB | 	rdlong	arg05, objptr
22a20     45 64 86 F1 | 	sub	objptr, #69
22a24     53 97 02 F6 | 	mov	arg03, local01
22a28     78 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
22a2c     04 64 06 F1 | 	add	objptr, #4
22a30     32 93 02 FB | 	rdlong	arg01, objptr
22a34     1C 00 00 FF 
22a38     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
22a3c     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
22a40     3A 64 06 F1 | 	add	objptr, #58
22a44     32 9B C2 FA | 	rdbyte	arg05, objptr
22a48     4D 97 02 FD | 	qmul	arg03, arg05
22a4c                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
22a4c     1C 00 00 FF 
22a50     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
22a54     02 64 86 F1 | 	sub	objptr, #2
22a58     32 A9 E2 FA | 	rdword	local02, objptr
22a5c     01 A8 46 F0 | 	shr	local02, #1
22a60     53 95 02 F6 | 	mov	arg02, local01
22a64     01 96 06 F6 | 	mov	arg03, #1
22a68     00 98 06 F6 | 	mov	arg04, #0
22a6c     01 9A 06 F6 | 	mov	arg05, #1
22a70     0B 00 00 FF 
22a74     90 64 06 F1 | 	add	objptr, ##5776
22a78     18 A6 62 FD | 	getqx	local01
22a7c     54 A7 02 F1 | 	add	local01, local02
22a80     53 93 02 F1 | 	add	arg01, local01
22a84     0C 0E B0 FD | 	call	#_psram_spin2_fill
22a88                 | ' 
22a88                 | ' cursor_x+=2
22a88     0B 00 00 FF 
22a8c     90 64 86 F1 | 	sub	objptr, ##5776
22a90     32 A9 E2 FA | 	rdword	local02, objptr
22a94     02 A8 06 F1 | 	add	local02, #2
22a98     32 A9 52 FC | 	wrword	local02, objptr
22a9c                 | ' if cursor_x>=256
22a9c     54 A9 32 F9 | 	getword	local02, local02, #0
22aa0     3C 64 86 F1 | 	sub	objptr, #60
22aa4     00 A9 56 F2 | 	cmps	local02, #256 wc
22aa8     64 00 90 CD |  if_b	jmp	#LR__2851
22aac                 | '   cursor_x:=0
22aac     3C 64 06 F1 | 	add	objptr, #60
22ab0     32 01 58 FC | 	wrword	#0, objptr
22ab4                 | '   cursor_y+=1
22ab4     02 64 06 F1 | 	add	objptr, #2
22ab8     32 A9 C2 FA | 	rdbyte	local02, objptr
22abc     01 A8 06 F1 | 	add	local02, #1
22ac0     32 A9 42 FC | 	wrbyte	local02, objptr
22ac4                 | '   if cursor_y>st_lines-1
22ac4     C3 64 06 F1 | 	add	objptr, #195
22ac8     32 A9 02 FB | 	rdlong	local02, objptr
22acc     01 A8 86 F1 | 	sub	local02, #1
22ad0     C3 64 86 F1 | 	sub	objptr, #195
22ad4     32 97 C2 FA | 	rdbyte	arg03, objptr
22ad8     3E 64 86 F1 | 	sub	objptr, #62
22adc     54 97 5A F2 | 	cmps	arg03, local02 wcz
22ae0     2C 00 90 ED |  if_be	jmp	#LR__2850
22ae4                 | '     scrollup2()
22ae4     00 92 06 F6 | 	mov	arg01, #0
22ae8     01 00 00 FF 
22aec     58 94 06 F6 | 	mov	arg02, ##600
22af0     10 96 06 F6 | 	mov	arg03, #16
22af4     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
22af8                 | '     cursor_y:=st_lines-1
22af8     01 65 06 F1 | 	add	objptr, #257
22afc     32 A9 02 FB | 	rdlong	local02, objptr
22b00     01 A8 86 F1 | 	sub	local02, #1
22b04     C3 64 86 F1 | 	sub	objptr, #195
22b08     32 A9 42 FC | 	wrbyte	local02, objptr
22b0c     3E 64 86 F1 | 	sub	objptr, #62
22b10                 | LR__2850
22b10                 | LR__2851
22b10                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
22b10     3C 64 06 F1 | 	add	objptr, #60
22b14     32 95 E2 FA | 	rdword	arg02, objptr
22b18     02 94 66 F0 | 	shl	arg02, #2
22b1c     02 64 06 F1 | 	add	objptr, #2
22b20     32 97 C2 FA | 	rdbyte	arg03, objptr
22b24     3E 64 86 F1 | 	sub	objptr, #62
22b28     04 96 66 F0 | 	shl	arg03, #4
22b2c     04 96 06 F1 | 	add	arg03, #4
22b30     11 92 06 F6 | 	mov	arg01, #17
22b34     58 EE BF FD | 	call	#_hg010b_spin2_setspritepos
22b38     E7 F0 03 F6 | 	mov	ptra, fp
22b3c     F2 00 A0 FD | 	call	#popregs_
22b40                 | _hg010b_spin2_putchar2_ret
22b40     2D 00 64 FD | 	ret
22b44                 | 
22b44                 | ' ''--------- Output a string at the cursor position, move the cursor  
22b44                 | ' 
22b44                 | ' pub write(text) | iii,c,ncx,ncy
22b44                 | _hg010b_spin2_write
22b44     04 CA 05 F6 | 	mov	COUNT_, #4
22b48     E8 00 A0 FD | 	call	#pushregs_
22b4c     49 A7 02 F6 | 	mov	local01, arg01
22b50                 | ' 
22b50                 | ' repeat iii from 0 to strsize(text)-1
22b50     00 A8 06 F6 | 	mov	local02, #0
22b54     53 93 02 F6 | 	mov	arg01, local01
22b58     49 AB 02 F6 | 	mov	local03, arg01
22b5c     D7 06 48 FB | 	callpa	#(@LR__2861-@LR__2860)>>2,fcache_load_ptr_
22b60                 | LR__2860
22b60     55 7B CA FA | 	rdbyte	result1, local03 wz
22b64     01 AA 06 51 |  if_ne	add	local03, #1
22b68     F4 FF 9F 5D |  if_ne	jmp	#LR__2860
22b6c                 | LR__2861
22b6c     49 AB 82 F1 | 	sub	local03, arg01
22b70     01 AA 86 F1 | 	sub	local03, #1
22b74     00 AA 56 F2 | 	cmps	local03, #0 wc
22b78     01 AC 86 F6 | 	negc	local04, #1
22b7c     56 AB 02 F1 | 	add	local03, local04
22b80                 | LR__2862
22b80                 | '   putchar2(byte[text+iii])
22b80     53 93 02 F6 | 	mov	arg01, local01
22b84     54 93 02 F1 | 	add	arg01, local02
22b88     49 93 C2 FA | 	rdbyte	arg01, arg01
22b8c     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
22b90     56 A9 02 F1 | 	add	local02, local04
22b94     55 A9 0A F2 | 	cmp	local02, local03 wz
22b98     E4 FF 9F 5D |  if_ne	jmp	#LR__2862
22b9c     E7 F0 03 F6 | 	mov	ptra, fp
22ba0     F2 00 A0 FD | 	call	#popregs_
22ba4                 | _hg010b_spin2_write_ret
22ba4     2D 00 64 FD | 	ret
22ba8                 | 
22ba8                 | '    
22ba8                 | ' ' a version for text scrolling in Basic shifted 4 lines down
22ba8                 | ' 
22ba8                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
22ba8                 | _hg010b_spin2_scrollup2
22ba8     03 CA 05 F6 | 	mov	COUNT_, #3
22bac     E8 00 A0 FD | 	call	#pushregs_
22bb0                 | ' 	
22bb0                 | ' repeat i from 4 to 579 
22bb0     04 A6 06 F6 | 	mov	local01, #4
22bb4                 | LR__2870
22bb4     DD 64 06 F1 | 	add	objptr, #221
22bb8     32 95 02 FB | 	rdlong	arg02, objptr
22bbc     53 9B 02 F6 | 	mov	arg05, local01
22bc0     10 9A 06 F1 | 	add	arg05, #16
22bc4     02 9A 66 F0 | 	shl	arg05, #2
22bc8     14 64 06 F1 | 	add	objptr, #20
22bcc     32 97 02 FB | 	rdlong	arg03, objptr
22bd0     4B 9B 02 FD | 	qmul	arg05, arg03
22bd4                 | '   ram.read1($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
22bd4     02 96 66 F0 | 	shl	arg03, #2
22bd8     F4 03 00 FF 
22bdc     00 92 06 F6 | 	mov	arg01, ##518144
22be0     0A 00 00 FF 
22be4     DB 65 06 F1 | 	add	objptr, ##5595
22be8     18 9A 62 FD | 	getqx	arg05
22bec     4D 95 02 F1 | 	add	arg02, arg05
22bf0     64 0B B0 FD | 	call	#_psram_spin2_read1
22bf4     0A 00 00 FF 
22bf8     EF 65 86 F1 | 	sub	objptr, ##5615
22bfc     32 95 02 FB | 	rdlong	arg02, objptr
22c00     53 9B 02 F6 | 	mov	arg05, local01
22c04     02 9A 66 F0 | 	shl	arg05, #2
22c08     14 64 06 F1 | 	add	objptr, #20
22c0c     32 97 02 FB | 	rdlong	arg03, objptr
22c10     4B 9B 02 FD | 	qmul	arg05, arg03
22c14                 | '   ram.write($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
22c14     02 96 66 F0 | 	shl	arg03, #2
22c18     F4 03 00 FF 
22c1c     00 92 06 F6 | 	mov	arg01, ##518144
22c20     0A 00 00 FF 
22c24     DB 65 06 F1 | 	add	objptr, ##5595
22c28     18 9A 62 FD | 	getqx	arg05
22c2c     4D 95 02 F1 | 	add	arg02, arg05
22c30     C0 0B B0 FD | 	call	#_psram_spin2_write
22c34     0B 00 00 FF 
22c38     CC 64 86 F1 | 	sub	objptr, ##5836
22c3c     01 A6 06 F1 | 	add	local01, #1
22c40     01 00 00 FF 
22c44     44 A6 16 F2 | 	cmp	local01, ##580 wc
22c48     68 FF 9F CD |  if_b	jmp	#LR__2870
22c4c                 | ' 
22c4c                 | ' repeat i from 580 to 599
22c4c     01 00 00 FF 
22c50     44 A6 06 F6 | 	mov	local01, ##580
22c54                 | LR__2871
22c54                 | '    fastline(0,1023,i,write_background)   
22c54     45 64 06 F1 | 	add	objptr, #69
22c58     32 99 02 FB | 	rdlong	arg04, objptr
22c5c     45 64 86 F1 | 	sub	objptr, #69
22c60     00 92 06 F6 | 	mov	arg01, #0
22c64     09 94 CE F9 | 	bmask	arg02, #9
22c68     53 97 02 F6 | 	mov	arg03, local01
22c6c     6C EF BF FD | 	call	#_hg010b_spin2_fastline
22c70     01 A6 06 F1 | 	add	local01, #1
22c74     01 00 00 FF 
22c78     58 A6 16 F2 | 	cmp	local01, ##600 wc
22c7c     D4 FF 9F CD |  if_b	jmp	#LR__2871
22c80                 | ' repeat i from 0 to 3
22c80     00 A6 06 F6 | 	mov	local01, #0
22c84                 | LR__2872
22c84                 | '    fastline(0,1023,i,write_background)      
22c84     45 64 06 F1 | 	add	objptr, #69
22c88     32 99 02 FB | 	rdlong	arg04, objptr
22c8c     45 64 86 F1 | 	sub	objptr, #69
22c90     00 92 06 F6 | 	mov	arg01, #0
22c94     09 94 CE F9 | 	bmask	arg02, #9
22c98     53 97 02 F6 | 	mov	arg03, local01
22c9c     3C EF BF FD | 	call	#_hg010b_spin2_fastline
22ca0     01 A6 06 F1 | 	add	local01, #1
22ca4     04 A6 56 F2 | 	cmps	local01, #4 wc
22ca8     D8 FF 9F CD |  if_b	jmp	#LR__2872
22cac                 | ' 
22cac                 | ' repeat i from 0 to 35
22cac     00 A6 06 F6 | 	mov	local01, #0
22cb0                 | LR__2873
22cb0     53 9B 02 F6 | 	mov	arg05, local01
22cb4     01 9A 06 F1 | 	add	arg05, #1
22cb8     1C 00 00 FF 
22cbc     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
22cc0     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
22cc4     4B 9B 02 FD | 	qmul	arg05, arg03
22cc8                 | '   ram.read1($7E800, textbuf_ptr+(i+1)*timings[7], timings[7])
22cc8     04 64 06 F1 | 	add	objptr, #4
22ccc     32 95 02 FB | 	rdlong	arg02, objptr
22cd0     1C 00 00 FF 
22cd4     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
22cd8     F4 03 00 FF 
22cdc     00 92 06 F6 | 	mov	arg01, ##518144
22ce0     0B 00 00 FF 
22ce4     C8 64 06 F1 | 	add	objptr, ##5832
22ce8     18 9A 62 FD | 	getqx	arg05
22cec     4D 95 02 F1 | 	add	arg02, arg05
22cf0     64 0A B0 FD | 	call	#_psram_spin2_read1
22cf4     1C 00 00 FF 
22cf8     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
22cfc     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
22d00     4B A7 02 FD | 	qmul	local01, arg03
22d04                 | '   ram.write($7E800, textbuf_ptr+i*timings[7], timings[7])
22d04     0B 00 00 FF 
22d08     C8 64 86 F1 | 	sub	objptr, ##5832
22d0c     32 95 02 FB | 	rdlong	arg02, objptr
22d10     1C 00 00 FF 
22d14     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
22d18     F4 03 00 FF 
22d1c     00 92 06 F6 | 	mov	arg01, ##518144
22d20     0B 00 00 FF 
22d24     C8 64 06 F1 | 	add	objptr, ##5832
22d28     18 9A 62 FD | 	getqx	arg05
22d2c     4D 95 02 F1 | 	add	arg02, arg05
22d30     C0 0A B0 FD | 	call	#_psram_spin2_write
22d34     0B 00 00 FF 
22d38     CC 64 86 F1 | 	sub	objptr, ##5836
22d3c     01 A6 06 F1 | 	add	local01, #1
22d40     24 A6 56 F2 | 	cmps	local01, #36 wc
22d44     68 FF 9F CD |  if_b	jmp	#LR__2873
22d48                 | ' repeat i from 0 to timings[7]-1
22d48     00 A6 06 F6 | 	mov	local01, #0
22d4c     1C 00 00 FF 
22d50     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
22d54     37 A9 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
22d58     1C 00 00 FF 
22d5c     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
22d60     01 A8 86 F1 | 	sub	local02, #1
22d64     00 A8 56 F2 | 	cmps	local02, #0 wc
22d68     01 AA 86 F6 | 	negc	local03, #1
22d6c     55 A9 02 F1 | 	add	local02, local03
22d70                 | LR__2874
22d70                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
22d70     04 64 06 F1 | 	add	objptr, #4
22d74     32 93 02 FB | 	rdlong	arg01, objptr
22d78     1C 00 00 FF 
22d7c     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
22d80     37 9B 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
22d84     1C 00 00 FF 
22d88     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
22d8c     4D 99 02 F6 | 	mov	arg04, arg05
22d90     03 98 66 F0 | 	shl	arg04, #3
22d94     4D 99 02 F1 | 	add	arg04, arg05
22d98     02 98 66 F0 | 	shl	arg04, #2
22d9c     53 99 02 F1 | 	add	arg04, local01
22da0     4C 93 02 F1 | 	add	arg01, arg04
22da4     20 94 06 F6 | 	mov	arg02, #32
22da8     01 96 06 F6 | 	mov	arg03, #1
22dac     00 98 06 F6 | 	mov	arg04, #0
22db0     01 9A 06 F6 | 	mov	arg05, #1
22db4     0B 00 00 FF 
22db8     C8 64 06 F1 | 	add	objptr, ##5832
22dbc     D4 0A B0 FD | 	call	#_psram_spin2_fill
22dc0     0B 00 00 FF 
22dc4     CC 64 86 F1 | 	sub	objptr, ##5836
22dc8     55 A7 02 F1 | 	add	local01, local03
22dcc     54 A7 0A F2 | 	cmp	local01, local02 wz
22dd0     9C FF 9F 5D |  if_ne	jmp	#LR__2874
22dd4     E7 F0 03 F6 | 	mov	ptra, fp
22dd8     F2 00 A0 FD | 	call	#popregs_
22ddc                 | _hg010b_spin2_scrollup2_ret
22ddc     2D 00 64 FD | 	ret
22de0                 | 
22de0                 | '  
22de0                 | ' ''----------- Scroll the screen one line down 
22de0                 | ' 
22de0                 | ' pub scrolldown(start=0) | i
22de0                 | _hg010b_spin2_scrolldown
22de0     05 CA 05 F6 | 	mov	COUNT_, #5
22de4     E8 00 A0 FD | 	call	#pushregs_
22de8     49 A7 02 F6 | 	mov	local01, arg01
22dec                 | ' 
22dec                 | ' repeat i from 579 to (start*16)+4
22dec     01 00 00 FF 
22df0     43 A8 06 F6 | 	mov	local02, ##579
22df4     53 AB 02 F6 | 	mov	local03, local01
22df8     04 AA 66 F0 | 	shl	local03, #4
22dfc     04 AA 06 F1 | 	add	local03, #4
22e00     01 00 00 FF 
22e04     43 AA 56 F2 | 	cmps	local03, ##579 wc
22e08     01 AC 86 F6 | 	negc	local04, #1
22e0c     56 AF 02 F6 | 	mov	local05, local04
22e10     56 AB 02 F1 | 	add	local03, local04
22e14                 | LR__2880
22e14     DD 64 06 F1 | 	add	objptr, #221
22e18     32 95 02 FB | 	rdlong	arg02, objptr
22e1c     54 AD 02 F6 | 	mov	local04, local02
22e20     02 AC 66 F0 | 	shl	local04, #2
22e24     14 64 06 F1 | 	add	objptr, #20
22e28     32 97 02 FB | 	rdlong	arg03, objptr
22e2c     4B AD 02 FD | 	qmul	local04, arg03
22e30                 | '   ram.read1($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
22e30     02 96 66 F0 | 	shl	arg03, #2
22e34     F4 03 00 FF 
22e38     00 92 06 F6 | 	mov	arg01, ##518144
22e3c     0A 00 00 FF 
22e40     DB 65 06 F1 | 	add	objptr, ##5595
22e44     18 AC 62 FD | 	getqx	local04
22e48     56 95 02 F1 | 	add	arg02, local04
22e4c     08 09 B0 FD | 	call	#_psram_spin2_read1
22e50     0A 00 00 FF 
22e54     EF 65 86 F1 | 	sub	objptr, ##5615
22e58     32 95 02 FB | 	rdlong	arg02, objptr
22e5c     54 AD 02 F6 | 	mov	local04, local02
22e60     10 AC 06 F1 | 	add	local04, #16
22e64     02 AC 66 F0 | 	shl	local04, #2
22e68     14 64 06 F1 | 	add	objptr, #20
22e6c     32 97 02 FB | 	rdlong	arg03, objptr
22e70     4B AD 02 FD | 	qmul	local04, arg03
22e74                 | '   ram.write($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
22e74     02 96 66 F0 | 	shl	arg03, #2
22e78     F4 03 00 FF 
22e7c     00 92 06 F6 | 	mov	arg01, ##518144
22e80     0A 00 00 FF 
22e84     DB 65 06 F1 | 	add	objptr, ##5595
22e88     18 AC 62 FD | 	getqx	local04
22e8c     56 95 02 F1 | 	add	arg02, local04
22e90     60 09 B0 FD | 	call	#_psram_spin2_write
22e94     0B 00 00 FF 
22e98     CC 64 86 F1 | 	sub	objptr, ##5836
22e9c     57 A9 02 F1 | 	add	local02, local05
22ea0     55 A9 0A F2 | 	cmp	local02, local03 wz
22ea4     6C FF 9F 5D |  if_ne	jmp	#LR__2880
22ea8                 | ' 
22ea8                 | ' repeat i from (start*16)+4 to (start*16)+19
22ea8     53 A9 02 F6 | 	mov	local02, local01
22eac     04 A8 66 F0 | 	shl	local02, #4
22eb0     04 A8 06 F1 | 	add	local02, #4
22eb4     53 AF 02 F6 | 	mov	local05, local01
22eb8     04 AE 66 F0 | 	shl	local05, #4
22ebc     13 AE 06 F1 | 	add	local05, #19
22ec0     53 AD 02 F6 | 	mov	local04, local01
22ec4     04 AC 66 F0 | 	shl	local04, #4
22ec8     04 AC 06 F1 | 	add	local04, #4
22ecc     56 AF 52 F2 | 	cmps	local05, local04 wc
22ed0     01 AC 86 F6 | 	negc	local04, #1
22ed4     56 AB 02 F6 | 	mov	local03, local04
22ed8     56 AF 02 F1 | 	add	local05, local04
22edc                 | LR__2881
22edc                 | '    fastline(0,1023,i,write_background)    
22edc     45 64 06 F1 | 	add	objptr, #69
22ee0     32 99 02 FB | 	rdlong	arg04, objptr
22ee4     45 64 86 F1 | 	sub	objptr, #69
22ee8     00 92 06 F6 | 	mov	arg01, #0
22eec     09 94 CE F9 | 	bmask	arg02, #9
22ef0     54 97 02 F6 | 	mov	arg03, local02
22ef4     E4 EC BF FD | 	call	#_hg010b_spin2_fastline
22ef8     55 A9 02 F1 | 	add	local02, local03
22efc     57 A9 0A F2 | 	cmp	local02, local05 wz
22f00     D8 FF 9F 5D |  if_ne	jmp	#LR__2881
22f04                 | '    
22f04                 | ' repeat i from 35 to start
22f04     23 A8 06 F6 | 	mov	local02, #35
22f08     23 A6 56 F2 | 	cmps	local01, #35 wc
22f0c     01 AC 86 F6 | 	negc	local04, #1
22f10     53 AF 02 F6 | 	mov	local05, local01
22f14     56 AF 02 F1 | 	add	local05, local04
22f18                 | LR__2882
22f18                 | '   ram.read1($7E800, textbuf_ptr+(i*128), 128)
22f18     04 64 06 F1 | 	add	objptr, #4
22f1c     32 95 02 FB | 	rdlong	arg02, objptr
22f20     54 AB 02 F6 | 	mov	local03, local02
22f24     07 AA 66 F0 | 	shl	local03, #7
22f28     55 95 02 F1 | 	add	arg02, local03
22f2c     F4 03 00 FF 
22f30     00 92 06 F6 | 	mov	arg01, ##518144
22f34     80 96 06 F6 | 	mov	arg03, #128
22f38     0B 00 00 FF 
22f3c     C8 64 06 F1 | 	add	objptr, ##5832
22f40     14 08 B0 FD | 	call	#_psram_spin2_read1
22f44                 | '   ram.write($7E800, textbuf_ptr+(i+1)*128,128)
22f44     0B 00 00 FF 
22f48     C8 64 86 F1 | 	sub	objptr, ##5832
22f4c     32 95 02 FB | 	rdlong	arg02, objptr
22f50     54 AB 02 F6 | 	mov	local03, local02
22f54     01 AA 06 F1 | 	add	local03, #1
22f58     07 AA 66 F0 | 	shl	local03, #7
22f5c     55 95 02 F1 | 	add	arg02, local03
22f60     F4 03 00 FF 
22f64     00 92 06 F6 | 	mov	arg01, ##518144
22f68     80 96 06 F6 | 	mov	arg03, #128
22f6c     0B 00 00 FF 
22f70     C8 64 06 F1 | 	add	objptr, ##5832
22f74     7C 08 B0 FD | 	call	#_psram_spin2_write
22f78     0B 00 00 FF 
22f7c     CC 64 86 F1 | 	sub	objptr, ##5836
22f80     56 A9 02 F1 | 	add	local02, local04
22f84     57 A9 0A F2 | 	cmp	local02, local05 wz
22f88     8C FF 9F 5D |  if_ne	jmp	#LR__2882
22f8c                 | ' repeat i from 0 to 127
22f8c     00 A8 06 F6 | 	mov	local02, #0
22f90                 | LR__2883
22f90                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
22f90     04 64 06 F1 | 	add	objptr, #4
22f94     32 93 02 FB | 	rdlong	arg01, objptr
22f98     53 AF 02 F6 | 	mov	local05, local01
22f9c     07 AE 66 F0 | 	shl	local05, #7
22fa0     57 93 02 F1 | 	add	arg01, local05
22fa4     54 93 02 F1 | 	add	arg01, local02
22fa8     20 94 06 F6 | 	mov	arg02, #32
22fac     01 96 06 F6 | 	mov	arg03, #1
22fb0     00 98 06 F6 | 	mov	arg04, #0
22fb4     01 9A 06 F6 | 	mov	arg05, #1
22fb8     0B 00 00 FF 
22fbc     C8 64 06 F1 | 	add	objptr, ##5832
22fc0     D0 08 B0 FD | 	call	#_psram_spin2_fill
22fc4     0B 00 00 FF 
22fc8     CC 64 86 F1 | 	sub	objptr, ##5836
22fcc     01 A8 06 F1 | 	add	local02, #1
22fd0     80 A8 56 F2 | 	cmps	local02, #128 wc
22fd4     B8 FF 9F CD |  if_b	jmp	#LR__2883
22fd8     E7 F0 03 F6 | 	mov	ptra, fp
22fdc     F2 00 A0 FD | 	call	#popregs_
22fe0                 | _hg010b_spin2_scrolldown_ret
22fe0     2D 00 64 FD | 	ret
22fe4                 | 
22fe4                 | ' 
22fe4                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
22fe4                 | ' 
22fe4                 | ' pub crlf()
22fe4                 | _hg010b_spin2_crlf
22fe4                 | ' 
22fe4                 | ' cursor_x:=leading_spaces*2
22fe4     01 00 00 FF 
22fe8     B6 64 06 F1 | 	add	objptr, ##694
22fec     32 97 02 FB | 	rdlong	arg03, objptr
22ff0     01 96 66 F0 | 	shl	arg03, #1
22ff4     01 00 00 FF 
22ff8     7A 64 86 F1 | 	sub	objptr, ##634
22ffc     32 97 52 FC | 	wrword	arg03, objptr
23000                 | ' cursor_y+=1
23000     02 64 06 F1 | 	add	objptr, #2
23004     32 97 C2 FA | 	rdbyte	arg03, objptr
23008     01 96 06 F1 | 	add	arg03, #1
2300c     32 97 42 FC | 	wrbyte	arg03, objptr
23010                 | ' if cursor_y>st_lines-1
23010     C3 64 06 F1 | 	add	objptr, #195
23014     32 97 02 FB | 	rdlong	arg03, objptr
23018     01 96 86 F1 | 	sub	arg03, #1
2301c     C3 64 86 F1 | 	sub	objptr, #195
23020     32 95 C2 FA | 	rdbyte	arg02, objptr
23024     3E 64 86 F1 | 	sub	objptr, #62
23028     4B 95 5A F2 | 	cmps	arg02, arg03 wcz
2302c     2C 00 90 ED |  if_be	jmp	#LR__2890
23030                 | '   scrollup2()
23030     00 92 06 F6 | 	mov	arg01, #0
23034     01 00 00 FF 
23038     58 94 06 F6 | 	mov	arg02, ##600
2303c     10 96 06 F6 | 	mov	arg03, #16
23040     64 FB BF FD | 	call	#_hg010b_spin2_scrollup2
23044                 | '   cursor_y:=st_lines-1
23044     01 65 06 F1 | 	add	objptr, #257
23048     32 97 02 FB | 	rdlong	arg03, objptr
2304c     01 96 86 F1 | 	sub	arg03, #1
23050     C3 64 86 F1 | 	sub	objptr, #195
23054     32 97 42 FC | 	wrbyte	arg03, objptr
23058     3E 64 86 F1 | 	sub	objptr, #62
2305c                 | LR__2890
2305c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
2305c     3C 64 06 F1 | 	add	objptr, #60
23060     32 95 E2 FA | 	rdword	arg02, objptr
23064     02 94 66 F0 | 	shl	arg02, #2
23068     02 64 06 F1 | 	add	objptr, #2
2306c     32 97 C2 FA | 	rdbyte	arg03, objptr
23070     3E 64 86 F1 | 	sub	objptr, #62
23074     04 96 66 F0 | 	shl	arg03, #4
23078     04 96 06 F1 | 	add	arg03, #4
2307c     11 92 06 F6 | 	mov	arg01, #17
23080     0C E9 BF FD | 	call	#_hg010b_spin2_setspritepos
23084                 | _hg010b_spin2_crlf_ret
23084     2D 00 64 FD | 	ret
23088                 | 
23088                 | ' 
23088                 | ' 
23088                 | ' '*************************************************************************
23088                 | ' '                                                                        *
23088                 | ' '  Conversions                                                           *
23088                 | ' '                                                                        *
23088                 | ' '*************************************************************************
23088                 | ' 
23088                 | ' ''---------- Convert a integer to dec string, return a pointer
23088                 | ' 
23088                 | ' pub inttostr(i):result |q,pos,k,j
23088                 | _hg010b_spin2_inttostr
23088     03 CA 05 F6 | 	mov	COUNT_, #3
2308c     E8 00 A0 FD | 	call	#pushregs_
23090     49 A7 0A F6 | 	mov	local01, arg01 wz
23094                 | ' 
23094                 | ' j:=i
23094                 | ' pos:=10
23094     0A A8 06 F6 | 	mov	local02, #10
23098                 | ' k:=0
23098     00 AA 06 F6 | 	mov	local03, #0
2309c                 | ' 
2309c                 | ' if (j==0)
2309c     18 00 90 5D |  if_ne	jmp	#LR__2900
230a0                 | '   n_string[0]:=48
230a0     4D 64 06 F1 | 	add	objptr, #77
230a4     32 61 48 FC | 	wrbyte	#48, objptr
230a8                 | '   n_string[1]:=0
230a8     01 64 06 F1 | 	add	objptr, #1
230ac     32 01 48 FC | 	wrbyte	#0, objptr
230b0     4E 64 86 F1 | 	sub	objptr, #78
230b4     C4 00 90 FD | 	jmp	#LR__2907
230b8                 | LR__2900
230b8                 | ' 
230b8                 | ' else
230b8                 | '   if (j<0)
230b8     53 A7 52 F6 | 	abs	local01, local01 wc
230bc                 | '     j:=0-j
230bc                 | '     k:=45
230bc     2D AA 06 C6 |  if_b	mov	local03, #45
230c0                 | ' 
230c0                 | '   n_string[11]:=0
230c0     58 64 06 F1 | 	add	objptr, #88
230c4     32 01 48 FC | 	wrbyte	#0, objptr
230c8     58 64 86 F1 | 	sub	objptr, #88
230cc     D7 24 48 FB | 	callpa	#(@LR__2902-@LR__2901)>>2,fcache_load_ptr_
230d0                 | '   repeat while (pos>-1)
230d0                 | LR__2901
230d0     00 A8 56 F2 | 	cmps	local02, #0 wc
230d4     40 00 90 CD |  if_b	jmp	#LR__2903
230d8     53 7B 52 F6 | 	abs	result1, local01 wc
230dc     0A 7A 16 FD | 	qdiv	result1, #10
230e0                 | '     q:=j//10
230e0     19 7A 62 FD | 	getqy	result1
230e4     3D 7B 82 F6 | 	negc	result1, result1
230e8     53 A7 52 F6 | 	abs	local01, local01 wc
230ec     0A A6 16 FD | 	qdiv	local01, #10
230f0                 | '     q:=48+q
230f0     30 7A 06 F1 | 	add	result1, #48
230f4                 | '     n_string[pos]:=q
230f4     54 A7 02 F6 | 	mov	local01, local02
230f8     32 97 02 F6 | 	mov	arg03, objptr
230fc     4D 96 06 F1 | 	add	arg03, #77
23100     4B A7 02 F1 | 	add	local01, arg03
23104     53 7B 42 FC | 	wrbyte	result1, local01
23108                 | '     j:=j/10
23108                 | '     pos-=1
23108     01 A8 86 F1 | 	sub	local02, #1
2310c     18 A6 62 FD | 	getqx	local01
23110     53 A7 82 F6 | 	negc	local01, local01
23114     B8 FF 9F FD | 	jmp	#LR__2901
23118                 | LR__2902
23118                 | LR__2903
23118                 | '   repeat while n_string[0]==48
23118                 | LR__2904
23118     4D 64 06 F1 | 	add	objptr, #77
2311c     32 97 C2 FA | 	rdbyte	arg03, objptr
23120     4D 64 86 F1 | 	sub	objptr, #77
23124     30 96 0E F2 | 	cmp	arg03, #48 wz
23128     20 00 90 5D |  if_ne	jmp	#LR__2905
2312c                 | '     bytemove(@n_string,@n_string+1,12)
2312c     4D 64 06 F1 | 	add	objptr, #77
23130     32 93 02 F6 | 	mov	arg01, objptr
23134     32 95 02 F6 | 	mov	arg02, objptr
23138     4D 64 86 F1 | 	sub	objptr, #77
2313c     01 94 06 F1 | 	add	arg02, #1
23140     0C 96 06 F6 | 	mov	arg03, #12
23144     F8 14 B0 FD | 	call	#__system____builtin_memmove
23148     CC FF 9F FD | 	jmp	#LR__2904
2314c                 | LR__2905
2314c                 | ' 
2314c                 | '   if k==45
2314c     2D AA 0E F2 | 	cmp	local03, #45 wz
23150     28 00 90 5D |  if_ne	jmp	#LR__2906
23154                 | '      bytemove(@n_string+1,@n_string,12)
23154     4D 64 06 F1 | 	add	objptr, #77
23158     32 93 02 F6 | 	mov	arg01, objptr
2315c     01 92 06 F1 | 	add	arg01, #1
23160     32 95 02 F6 | 	mov	arg02, objptr
23164     4D 64 86 F1 | 	sub	objptr, #77
23168     0C 96 06 F6 | 	mov	arg03, #12
2316c     D0 14 B0 FD | 	call	#__system____builtin_memmove
23170                 | '      n_string[0]:=k
23170     4D 64 06 F1 | 	add	objptr, #77
23174     32 AB 42 FC | 	wrbyte	local03, objptr
23178     4D 64 86 F1 | 	sub	objptr, #77
2317c                 | LR__2906
2317c                 | LR__2907
2317c                 | ' 
2317c                 | ' q:=@n_string
2317c     32 7B 02 F6 | 	mov	result1, objptr
23180     4D 7A 06 F1 | 	add	result1, #77
23184                 | ' return q
23184     E7 F0 03 F6 | 	mov	ptra, fp
23188     F2 00 A0 FD | 	call	#popregs_
2318c                 | _hg010b_spin2_inttostr_ret
2318c     2D 00 64 FD | 	ret
23190                 | 
23190                 | ' 
23190                 | ' '**********************************************************************************
23190                 | ' '
23190                 | ' '        Blitting
23190                 | ' '
23190                 | ' '**********************************************************************************
23190                 | ' 
23190                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
23190                 | _hg010b_spin2_blit
23190     18 CA 05 F6 | 	mov	COUNT_, #24
23194     E8 00 A0 FD | 	call	#pushregs_
23198     49 A7 02 F6 | 	mov	local01, arg01
2319c     4A A9 02 F6 | 	mov	local02, arg02
231a0     4B AB 02 F6 | 	mov	local03, arg03
231a4     4C AD 02 F6 | 	mov	local04, arg04
231a8     4D AF 02 F6 | 	mov	local05, arg05
231ac     4E B1 02 F6 | 	mov	local06, arg06
231b0     4F B3 02 F6 | 	mov	local07, arg07
231b4     50 B5 02 F6 | 	mov	local08, arg08
231b8     51 B7 02 F6 | 	mov	local09, arg09
231bc     52 B9 02 F6 | 	mov	local10, arg10
231c0                 | ' 
231c0                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
231c0     00 04 00 FF 
231c4     00 A6 56 F2 | 	cmps	local01, ##524288 wc
231c8     00 04 00 3F 
231cc     00 B2 56 32 |  if_ae	cmps	local07, ##524288 wc
231d0     98 01 90 CD |  if_b	jmp	#LR__2914
231d4     56 A9 5A F2 | 	cmps	local02, local04 wcz
231d8     54 BB 02 16 |  if_a	mov	local11, local02
231dc     56 A9 02 16 |  if_a	mov	local02, local04
231e0     5D AD 02 16 |  if_a	mov	local04, local11
231e4     57 AB 5A F2 | 	cmps	local03, local05 wcz
231e8     55 BB 02 16 |  if_a	mov	local11, local03
231ec     57 AB 02 16 |  if_a	mov	local03, local05
231f0     58 AB 02 FD | 	qmul	local03, local06
231f4                 | '   if x1a>x2a
231f4                 | '     x1a,x2a:=x2a,x1a
231f4                 | '   if y1a>y2a
231f4                 | '     y1a,y2a:=y2a,y1a  
231f4     5D AF 02 16 |  if_a	mov	local05, local11
231f8                 | '   if x2a-x1a>1023 
231f8     56 BB 02 F6 | 	mov	local11, local04
231fc     54 BB 82 F1 | 	sub	local11, local02
23200     02 00 00 FF 
23204     00 BA 56 F2 | 	cmps	local11, ##1024 wc
23208                 | '     x2a:=x1a+1023 ' limit the line to 1024
23208     54 AD 02 36 |  if_ae	mov	local04, local02
2320c     01 00 00 3F 
23210     FF AD 06 31 |  if_ae	add	local04, ##1023
23214                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
23214     59 BD 02 F6 | 	mov	local12, local07
23218     54 BD 02 F1 | 	add	local12, local02
2321c     18 BA 62 FD | 	getqx	local11
23220     5C B7 02 FD | 	qmul	local09, local10
23224     5D BD 02 F1 | 	add	local12, local11
23228     53 BF 02 F6 | 	mov	local13, local01
2322c     5A BF 02 F1 | 	add	local13, local08
23230     18 BA 62 FD | 	getqx	local11
23234     5D BF 02 F1 | 	add	local13, local11
23238     5F BD 5A F2 | 	cmps	local12, local13 wcz
2323c     98 00 90 ED |  if_be	jmp	#LR__2911
23240                 | '     repeat y from y1a to y2a
23240     55 C1 02 F6 | 	mov	local14, local03
23244     55 AF 52 F2 | 	cmps	local05, local03 wc
23248     01 C2 86 F6 | 	negc	local15, #1
2324c     57 C5 02 F6 | 	mov	local16, local05
23250     61 C5 02 F1 | 	add	local16, local15
23254     0B 00 00 FF 
23258     CC 64 06 F1 | 	add	objptr, ##5836
2325c                 | LR__2910
2325c     58 C1 02 FD | 	qmul	local14, local06
23260                 | '   '    writeln(string("I am here"))
23260                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
23260     53 95 02 F6 | 	mov	arg02, local01
23264     56 97 02 F6 | 	mov	arg03, local04
23268     54 97 82 F1 | 	sub	arg03, local02
2326c     01 96 06 F1 | 	add	arg03, #1
23270     F4 03 00 FF 
23274     00 92 06 F6 | 	mov	arg01, ##518144
23278     18 BE 62 FD | 	getqx	local13
2327c     5F 95 02 F1 | 	add	arg02, local13
23280     54 95 02 F1 | 	add	arg02, local02
23284     D0 04 B0 FD | 	call	#_psram_spin2_read1
23288     5B BF 02 F6 | 	mov	local13, local09
2328c     55 BF 82 F1 | 	sub	local13, local03
23290     60 BF 02 F1 | 	add	local13, local14
23294     5C BF 02 FD | 	qmul	local13, local10
23298                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
23298     59 95 02 F6 | 	mov	arg02, local07
2329c     56 97 02 F6 | 	mov	arg03, local04
232a0     54 97 82 F1 | 	sub	arg03, local02
232a4     01 96 06 F1 | 	add	arg03, #1
232a8     F4 03 00 FF 
232ac     00 92 06 F6 | 	mov	arg01, ##518144
232b0     18 BE 62 FD | 	getqx	local13
232b4     5F 95 02 F1 | 	add	arg02, local13
232b8     5A 95 02 F1 | 	add	arg02, local08
232bc     34 05 B0 FD | 	call	#_psram_spin2_write
232c0     61 C1 02 F1 | 	add	local14, local15
232c4     62 C1 0A F2 | 	cmp	local14, local16 wz
232c8     90 FF 9F 5D |  if_ne	jmp	#LR__2910
232cc     0B 00 00 FF 
232d0     CC 64 86 F1 | 	sub	objptr, ##5836
232d4     94 00 90 FD | 	jmp	#LR__2913
232d8                 | LR__2911
232d8                 | '   else
232d8                 | '     repeat y from y2a to y1a
232d8     57 C1 02 F6 | 	mov	local14, local05
232dc     57 AB 52 F2 | 	cmps	local03, local05 wc
232e0     01 C6 86 F6 | 	negc	local17, #1
232e4     55 C9 02 F6 | 	mov	local18, local03
232e8     63 C9 02 F1 | 	add	local18, local17
232ec     0B 00 00 FF 
232f0     CC 64 06 F1 | 	add	objptr, ##5836
232f4                 | LR__2912
232f4     58 C1 02 FD | 	qmul	local14, local06
232f8                 | '  '     writeln(string("I am there"))
232f8                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
232f8     53 95 02 F6 | 	mov	arg02, local01
232fc     56 97 02 F6 | 	mov	arg03, local04
23300     54 97 82 F1 | 	sub	arg03, local02
23304     01 96 06 F1 | 	add	arg03, #1
23308     F4 03 00 FF 
2330c     00 92 06 F6 | 	mov	arg01, ##518144
23310     18 C4 62 FD | 	getqx	local16
23314     62 95 02 F1 | 	add	arg02, local16
23318     54 95 02 F1 | 	add	arg02, local02
2331c     38 04 B0 FD | 	call	#_psram_spin2_read1
23320     5B C5 02 F6 | 	mov	local16, local09
23324     55 C5 82 F1 | 	sub	local16, local03
23328     60 C5 02 F1 | 	add	local16, local14
2332c     5C C5 02 FD | 	qmul	local16, local10
23330                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
23330     59 95 02 F6 | 	mov	arg02, local07
23334     56 97 02 F6 | 	mov	arg03, local04
23338     54 97 82 F1 | 	sub	arg03, local02
2333c     01 96 06 F1 | 	add	arg03, #1
23340     F4 03 00 FF 
23344     00 92 06 F6 | 	mov	arg01, ##518144
23348     18 C4 62 FD | 	getqx	local16
2334c     62 95 02 F1 | 	add	arg02, local16
23350     5A 95 02 F1 | 	add	arg02, local08
23354     9C 04 B0 FD | 	call	#_psram_spin2_write
23358     63 C1 02 F1 | 	add	local14, local17
2335c     64 C1 0A F2 | 	cmp	local14, local18 wz
23360     90 FF 9F 5D |  if_ne	jmp	#LR__2912
23364     0B 00 00 FF 
23368     CC 64 86 F1 | 	sub	objptr, ##5836
2336c                 | LR__2913
2336c                 | LR__2914
2336c                 | '     
2336c                 | ' if ((f>=$80000) && (t<$80000)) 
2336c     00 04 00 FF 
23370     00 A6 56 F2 | 	cmps	local01, ##524288 wc
23374     80 00 90 CD |  if_b	jmp	#LR__2916
23378     00 04 00 FF 
2337c     00 B2 56 F2 | 	cmps	local07, ##524288 wc
23380     74 00 90 3D |  if_ae	jmp	#LR__2916
23384                 | '   repeat y from y1a to y2a
23384     55 C1 02 F6 | 	mov	local14, local03
23388     55 AF 52 F2 | 	cmps	local05, local03 wc
2338c     01 CA 86 F6 | 	negc	local19, #1
23390     57 CD 02 F6 | 	mov	local20, local05
23394     65 CD 02 F1 | 	add	local20, local19
23398     0B 00 00 FF 
2339c     CC 64 06 F1 | 	add	objptr, ##5836
233a0                 | LR__2915
233a0     5B C9 02 F6 | 	mov	local18, local09
233a4     55 C9 82 F1 | 	sub	local18, local03
233a8     60 C9 02 F1 | 	add	local18, local14
233ac     5C C9 02 FD | 	qmul	local18, local10
233b0                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
233b0     59 93 02 F6 | 	mov	arg01, local07
233b4     18 C8 62 FD | 	getqx	local18
233b8     58 C1 02 FD | 	qmul	local14, local06
233bc     64 93 02 F1 | 	add	arg01, local18
233c0     5A 93 02 F1 | 	add	arg01, local08
233c4     53 95 02 F6 | 	mov	arg02, local01
233c8     56 97 02 F6 | 	mov	arg03, local04
233cc     54 97 82 F1 | 	sub	arg03, local02
233d0     01 96 06 F1 | 	add	arg03, #1
233d4     18 C8 62 FD | 	getqx	local18
233d8     64 95 02 F1 | 	add	arg02, local18
233dc     54 95 02 F1 | 	add	arg02, local02
233e0     74 03 B0 FD | 	call	#_psram_spin2_read1
233e4     65 C1 02 F1 | 	add	local14, local19
233e8     66 C1 0A F2 | 	cmp	local14, local20 wz
233ec     B0 FF 9F 5D |  if_ne	jmp	#LR__2915
233f0     0B 00 00 FF 
233f4     CC 64 86 F1 | 	sub	objptr, ##5836
233f8                 | LR__2916
233f8                 | '     
233f8                 | ' if ((f<$80000) && (t>=$80000)) 
233f8     00 04 00 FF 
233fc     00 A6 56 F2 | 	cmps	local01, ##524288 wc
23400     84 00 90 3D |  if_ae	jmp	#LR__2918
23404     00 04 00 FF 
23408     00 B2 56 F2 | 	cmps	local07, ##524288 wc
2340c     78 00 90 CD |  if_b	jmp	#LR__2918
23410                 | '   t:=t & $FFFFFFF
23410     7C B2 06 F4 | 	bitl	local07, #124
23414                 | '   repeat y from y1a to y2a
23414     55 C1 02 F6 | 	mov	local14, local03
23418     55 AF 52 F2 | 	cmps	local05, local03 wc
2341c     01 CE 86 F6 | 	negc	local21, #1
23420     57 D1 02 F6 | 	mov	local22, local05
23424     67 D1 02 F1 | 	add	local22, local21
23428     0B 00 00 FF 
2342c     CC 64 06 F1 | 	add	objptr, ##5836
23430                 | LR__2917
23430     58 C1 02 FD | 	qmul	local14, local06
23434                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
23434     53 93 02 F6 | 	mov	arg01, local01
23438     5B CD 02 F6 | 	mov	local20, local09
2343c     55 CD 82 F1 | 	sub	local20, local03
23440     60 CD 02 F1 | 	add	local20, local14
23444     18 CA 62 FD | 	getqx	local19
23448     5C CD 02 FD | 	qmul	local20, local10
2344c     65 93 02 F1 | 	add	arg01, local19
23450     54 93 02 F1 | 	add	arg01, local02
23454     59 95 02 F6 | 	mov	arg02, local07
23458     56 97 02 F6 | 	mov	arg03, local04
2345c     54 97 82 F1 | 	sub	arg03, local02
23460     01 96 06 F1 | 	add	arg03, #1
23464     18 CC 62 FD | 	getqx	local20
23468     66 95 02 F1 | 	add	arg02, local20
2346c     5A 95 02 F1 | 	add	arg02, local08
23470     80 03 B0 FD | 	call	#_psram_spin2_write
23474     67 C1 02 F1 | 	add	local14, local21
23478     68 C1 0A F2 | 	cmp	local14, local22 wz
2347c     B0 FF 9F 5D |  if_ne	jmp	#LR__2917
23480     0B 00 00 FF 
23484     CC 64 86 F1 | 	sub	objptr, ##5836
23488                 | LR__2918
23488                 | '     
23488                 | ' if ((f<$80000) && (t<$80000)) 
23488     00 04 00 FF 
2348c     00 A6 56 F2 | 	cmps	local01, ##524288 wc
23490     00 04 00 CF 
23494     00 B2 56 C2 |  if_b	cmps	local07, ##524288 wc
23498     64 00 90 3D |  if_ae	jmp	#LR__2920
2349c                 | '   repeat y from y1a to y2a
2349c     55 C1 02 F6 | 	mov	local14, local03
234a0     55 AF 52 F2 | 	cmps	local05, local03 wc
234a4     01 D2 86 F6 | 	negc	local23, #1
234a8     57 D5 02 F6 | 	mov	local24, local05
234ac     69 D5 02 F1 | 	add	local24, local23
234b0                 | LR__2919
234b0     58 C1 02 FD | 	qmul	local14, local06
234b4                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
234b4     53 93 02 F6 | 	mov	arg01, local01
234b8     5B D1 02 F6 | 	mov	local22, local09
234bc     55 D1 82 F1 | 	sub	local22, local03
234c0     60 D1 02 F1 | 	add	local22, local14
234c4     18 CE 62 FD | 	getqx	local21
234c8     5C D1 02 FD | 	qmul	local22, local10
234cc     67 93 02 F1 | 	add	arg01, local21
234d0     54 93 02 F1 | 	add	arg01, local02
234d4     59 95 02 F6 | 	mov	arg02, local07
234d8     56 97 02 F6 | 	mov	arg03, local04
234dc     54 97 82 F1 | 	sub	arg03, local02
234e0     01 96 06 F1 | 	add	arg03, #1
234e4     18 D0 62 FD | 	getqx	local22
234e8     68 95 02 F1 | 	add	arg02, local22
234ec     5A 95 02 F1 | 	add	arg02, local08
234f0     4C 11 B0 FD | 	call	#__system____builtin_memmove
234f4     69 C1 02 F1 | 	add	local14, local23
234f8     6A C1 0A F2 | 	cmp	local14, local24 wz
234fc     B0 FF 9F 5D |  if_ne	jmp	#LR__2919
23500                 | LR__2920
23500     E7 F0 03 F6 | 	mov	ptra, fp
23504     F2 00 A0 FD | 	call	#popregs_
23508                 | _hg010b_spin2_blit_ret
23508     2D 00 64 FD | 	ret
2350c                 | 
2350c                 | ' 
2350c                 | ' '..............................................................................
2350c                 | ' 
2350c                 | ' {{
2350c                 | ' }}
2350c                 | ' PUB startx(freq, burst, delay, desiredcog) : cog,mail | driverAddr
2350c                 | _psram_spin2_startx
2350c     04 CA 05 F6 | 	mov	COUNT_, #4
23510     E8 00 A0 FD | 	call	#pushregs_
23514     49 A7 02 F6 | 	mov	local01, arg01
23518     4B A9 02 F6 | 	mov	local02, arg03
2351c     4C AB 02 F6 | 	mov	local03, arg04
23520                 | '     stop() ' restart driver if required
23520     74 01 B0 FD | 	call	#_psram_spin2_stop
23524     00 A6 0E F2 | 	cmp	local01, #0 wz
23528     14 A6 06 AB |  if_e	rdlong	local01, #20
2352c     53 95 52 F6 | 	abs	arg02, local01 wc
23530     A1 07 00 FF 
23534     40 94 16 FD | 	qdiv	arg02, ##1000000
23538                 | ' 
23538                 | '     ' use current frequency if none specified
23538                 | ' 
23538                 | '     if freq == 0 
23538                 | '         freq := clkfreq 
23538                 | ' 
23538                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
23538                 | ' 
23538                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
23538                 | '     if burst < 0
23538                 | '         return ERR_TOO_SLOW,0 ' P2 frequency is too low for any 8us transfers
23538     18 94 62 FD | 	getqx	arg02
2353c     4A 99 82 F6 | 	negc	arg04, arg02
23540     03 98 66 F0 | 	shl	arg04, #3
23544     84 98 86 F1 | 	sub	arg04, #132
23548     04 98 46 F0 | 	shr	arg04, #4
2354c     04 98 66 F0 | 	shl	arg04, #4
23550     00 98 56 F2 | 	cmps	arg04, #0 wc
23554     00 7C 06 C6 |  if_b	mov	result2, #0
23558     0E 7A 66 C6 |  if_b	neg	result1, #14
2355c     2C 01 90 CD |  if_b	jmp	#LR__2934
23560                 | ' 
23560                 | '     ' compute the input delay
23560                 | ' 
23560                 | '     if delay <= 0
23560     01 A8 56 F2 | 	cmps	local02, #1 wc
23564     10 00 90 3D |  if_ae	jmp	#LR__2930
23568                 | '         delay := lookupDelay(freq)
23568     53 93 02 F6 | 	mov	arg01, local01
2356c     DC 04 B0 FD | 	call	#_psram_spin2_lookupDelay
23570     3D A9 02 F6 | 	mov	local02, result1
23574     04 00 90 FD | 	jmp	#LR__2931
23578                 | LR__2930
23578                 | '     else
23578                 | '         delay <#= $f ' limit to 15
23578     0F A8 66 F3 | 	fles	local02, #15
2357c                 | LR__2931
2357c                 | ' 
2357c                 | '     ' create our lock
2357c                 | ' 
2357c                 | '     driverlock := LOCKNEW()  
2357c     00 7A 06 F6 | 	mov	result1, #0
23580     04 7A 62 FD | 	locknew	result1
23584     04 75 06 F1 | 	add	ptr__psram_spin2_dat__, #260
23588     3A 7B 62 FC | 	wrlong	result1, ptr__psram_spin2_dat__
2358c                 | '     if driverlock == -1
2358c     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
23590     FF FF 7F FF 
23594     FF 7B 0E F2 | 	cmp	result1, ##-1 wz
23598                 | '         return ERR_NO_LOCK,0
23598     00 7C 06 A6 |  if_e	mov	result2, #0
2359c     1A 7A 66 A6 |  if_e	neg	result1, #26
235a0     E8 00 90 AD |  if_e	jmp	#LR__2934
235a4                 | ' 
235a4                 | '     ' patch in the proper data and HUB addresses to the startup structure
235a4                 | ' 
235a4                 | '     long[@startupData][0]:=clkfreq
235a4     14 A6 06 FB | 	rdlong	local01, #20
235a8     28 75 06 F1 | 	add	ptr__psram_spin2_dat__, #296
235ac     3A A7 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
235b0                 | ' '    long[@startupData][1]:=$1000_0000
235b0                 | '     long[@startupData][5]:=@deviceData
235b0     3A A7 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
235b4     20 A6 06 F1 | 	add	local01, #32
235b8     3A 95 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
235bc     14 94 06 F1 | 	add	arg02, #20
235c0     4A A7 62 FC | 	wrlong	local01, arg02
235c4                 | '     long[@startupData][6]:=@qosData
235c4     3A A7 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
235c8     A0 A6 06 F1 | 	add	local01, #160
235cc     3A 95 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
235d0     18 94 06 F1 | 	add	arg02, #24
235d4     4A A7 62 FC | 	wrlong	local01, arg02
235d8                 | ' 
235d8                 | ' 
235d8                 | '     long[@startupData][7]:=mailbox
235d8     3A A7 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
235dc     1C A6 06 F1 | 	add	local01, #28
235e0     DF 03 80 FF 
235e4     53 01 6A FC | 	wrlong	##507648, local01
235e8                 | '   
235e8                 | '     ' setup some default bank and QoS parameter values
235e8                 | ' 
235e8                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
235e8     20 74 06 F1 | 	add	ptr__psram_spin2_dat__, #32
235ec     3A 93 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
235f0     48 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #328
235f4     10 98 66 F0 | 	shl	arg04, #16
235f8     0C A8 66 F0 | 	shl	local02, #12
235fc     54 99 42 F5 | 	or	arg04, local02
23600     18 98 46 F5 | 	or	arg04, #24
23604     4C 95 02 F6 | 	mov	arg02, arg04
23608     02 96 06 F6 | 	mov	arg03, #2
2360c     E0 00 A0 FD | 	call	#\builtin_longfill_
23610                 | '     longfill(@qosData, $FFFF0000, 8)
23610     3A 93 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
23614     C8 93 06 F1 | 	add	arg01, #456
23618     07 96 06 F6 | 	mov	arg03, #7
2361c     28 96 62 FD | 	setq	arg03
23620     80 FF FF FF 
23624     49 01 68 FC | 	wrlong	##-65536, arg01
23628                 | ' 
23628                 | '     ' get the address of the PSRAM memory driver so we can start it
23628                 | ' 
23628                 | '     driverAddr:= driver.getDriverAddr()
23628                 | '     return @driver_start
23628     39 95 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
2362c     20 94 06 F1 | 	add	arg02, #32
23630                 | ' 
23630                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
23630                 | ' 
23630                 | '     if desiredcog < 0
23630     00 AA 56 F2 | 	cmps	local03, #0 wc
23634                 | '         desiredcog := NEWCOG
23634     10 AA 06 C6 |  if_b	mov	local03, #16
23638                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
23638     3A 97 02 F6 | 	mov	arg03, ptr__psram_spin2_dat__
2363c     28 97 06 F1 | 	add	arg03, #296
23640     55 AD 02 F6 | 	mov	local04, local03
23644     28 96 62 FD | 	setq	arg03
23648     4A AD F2 FC | 	coginit	local04, arg02 wc
2364c     01 AC 66 C6 |  if_b	neg	local04, #1
23650     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23654     3A AD 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
23658     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
2365c     D7 08 48 FB | 	callpa	#(@LR__2933-@LR__2932)>>2,fcache_load_ptr_
23660                 | '     repeat until long[@startupData] == 0 
23660                 | LR__2932
23660     3A AD 02 F6 | 	mov	local04, ptr__psram_spin2_dat__
23664     28 AD 06 F1 | 	add	local04, #296
23668     56 AD 0A FB | 	rdlong	local04, local04 wz
2366c     F0 FF 9F 5D |  if_ne	jmp	#LR__2932
23670                 | LR__2933
23670                 | ' 
23670                 | '     return drivercog,long[@startupData][7]
23670     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23674     3A 7B 02 FB | 	rdlong	result1, ptr__psram_spin2_dat__
23678     28 74 06 F1 | 	add	ptr__psram_spin2_dat__, #40
2367c     3A AD 02 F6 | 	mov	local04, ptr__psram_spin2_dat__
23680     1C AC 06 F1 | 	add	local04, #28
23684     56 7D 02 FB | 	rdlong	result2, local04
23688     28 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #296
2368c                 | LR__2934
2368c     E7 F0 03 F6 | 	mov	ptra, fp
23690     F2 00 A0 FD | 	call	#popregs_
23694                 | _psram_spin2_startx_ret
23694     2D 00 64 FD | 	ret
23698                 | 
23698                 | ' 
23698                 | ' '..............................................................................
23698                 | ' 
23698                 | ' {{
23698                 | ' }}
23698                 | ' PUB stop() : i
23698                 | _psram_spin2_stop
23698     00 80 06 F6 | 	mov	_var01, #0
2369c                 | '     if drivercog <> -1
2369c     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
236a0     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
236a4     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
236a8     FF FF 7F FF 
236ac     FF 93 0E F2 | 	cmp	arg01, ##-1 wz
236b0     70 00 90 AD |  if_e	jmp	#LR__2943
236b4                 | '         cogstop(drivercog) ' a rather brutal stop
236b4     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
236b8     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
236bc     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
236c0     03 92 62 FD | 	cogstop	arg01
236c4     D7 26 48 FB | 	callpa	#(@LR__2942-@LR__2940)>>2,fcache_load_ptr_
236c8                 | '         repeat i from 0 to 7
236c8                 | LR__2940
236c8                 | '             if long[mailbox][i*3] < 0
236c8     40 7B 02 F6 | 	mov	result1, _var01
236cc     01 7A 66 F0 | 	shl	result1, #1
236d0     40 7B 02 F1 | 	add	result1, _var01
236d4     02 7A 66 F0 | 	shl	result1, #2
236d8     DF 03 00 FF 
236dc     00 7B 06 F1 | 	add	result1, ##507648
236e0     3D 7B 02 FB | 	rdlong	result1, result1
236e4     00 7A 56 F2 | 	cmps	result1, #0 wc
236e8     1C 00 90 3D |  if_ae	jmp	#LR__2941
236ec                 | '                 long[mailbox][i*3] := -ERR_ABORTED ' abort request
236ec     40 7B 02 F6 | 	mov	result1, _var01
236f0     01 7A 66 F0 | 	shl	result1, #1
236f4     40 7B 02 F1 | 	add	result1, _var01
236f8     02 7A 66 F0 | 	shl	result1, #2
236fc     DF 03 00 FF 
23700     00 7B 06 F1 | 	add	result1, ##507648
23704     3D 21 68 FC | 	wrlong	#16, result1
23708                 | LR__2941
23708     01 80 06 F1 | 	add	_var01, #1
2370c     08 80 56 F2 | 	cmps	_var01, #8 wc
23710     B4 FF 9F CD |  if_b	jmp	#LR__2940
23714                 | LR__2942
23714                 | '         drivercog := -1
23714     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23718     FF FF FF FF 
2371c     3A FF 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
23720     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23724                 | LR__2943
23724                 | '     if driverlock <> -1
23724     04 75 06 F1 | 	add	ptr__psram_spin2_dat__, #260
23728     3A 83 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
2372c     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
23730     FF FF 7F FF 
23734     FF 83 0E F2 | 	cmp	_var02, ##-1 wz
23738                 | '         LOCKRET(driverlock)
23738     04 75 06 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
2373c     3A 93 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
23740     05 92 62 5D |  if_ne	lockret	arg01
23744                 | '         driverlock := -1
23744     FF FF FF 5F 
23748     3A FF 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
2374c     04 75 86 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
23750     40 7B 02 F6 | 	mov	result1, _var01
23754                 | _psram_spin2_stop_ret
23754     2D 00 64 FD | 	ret
23758                 | 
23758                 | ' 
23758                 | ' '..............................................................................
23758                 | ' 
23758                 | ' {{
23758                 | ' }}
23758                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox1
23758                 | _psram_spin2_read1
23758                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
23758                 | '     if drivercog == -1 ' driver must be running
23758     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
2375c     3A 81 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
23760     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23764     FF FF 7F FF 
23768     FF 81 0E F2 | 	cmp	_var01, ##-1 wz
2376c                 | '         return ERR_INACTIVE
2376c     0F 7A 66 A6 |  if_e	neg	result1, #15
23770     7C 00 90 AD |  if_e	jmp	#LR__2951
23774                 | '     if count == 0 ' don't even bother reading
23774     00 96 0E F2 | 	cmp	arg03, #0 wz
23778                 | '         return 0
23778     00 7A 06 A6 |  if_e	mov	result1, #0
2377c     70 00 90 AD |  if_e	jmp	#LR__2951
23780                 | '     mailbox1 := mailbox + cogid()*12     ' compute COG's mailbox address
23780     DF 03 00 FF 
23784     00 83 06 F6 | 	mov	_var02, ##507648
23788     00 7A 06 F6 | 	mov	result1, #0
2378c     01 7A 62 FD | 	cogid	result1
23790     3D 81 02 F6 | 	mov	_var01, result1
23794     01 80 66 F0 | 	shl	_var01, #1
23798     3D 81 02 F1 | 	add	_var01, result1
2379c     02 80 66 F0 | 	shl	_var01, #2
237a0     40 83 02 F1 | 	add	_var02, _var01
237a4                 | '     if long[mailbox1] < 0
237a4     41 81 02 FB | 	rdlong	_var01, _var02
237a8     00 80 56 F2 | 	cmps	_var01, #0 wc
237ac                 | '         return ERR_MAILBOX_BUSY
237ac     1C 7A 66 C6 |  if_b	neg	result1, #28
237b0     3C 00 90 CD |  if_b	jmp	#LR__2951
237b4                 | '     long[mailbox1][2] := count
237b4     08 82 06 F1 | 	add	_var02, #8
237b8     41 97 62 FC | 	wrlong	arg03, _var02
237bc                 | '     long[mailbox1][1] := dstHubAddr
237bc     04 82 86 F1 | 	sub	_var02, #4
237c0     41 93 62 FC | 	wrlong	arg01, _var02
237c4     04 82 86 F1 | 	sub	_var02, #4
237c8                 | '     long[mailbox1] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
237c8     4A 85 02 F6 | 	mov	_var03, arg02
237cc     D9 84 06 F4 | 	bitl	_var03, #217
237d0     00 00 58 FF 
237d4     00 80 06 F6 | 	mov	_var01, ##-1342177280
237d8     42 81 02 F1 | 	add	_var01, _var03
237dc     41 81 62 FC | 	wrlong	_var01, _var02
237e0                 | '     repeat
237e0                 | LR__2950
237e0                 | '         result := long[mailbox1]    
237e0     41 85 02 FB | 	rdlong	_var03, _var02
237e4     00 84 56 F2 | 	cmps	_var03, #0 wc
237e8     F4 FF 9F CD |  if_b	jmp	#LR__2950
237ec                 | '     while result < 0   
237ec                 | '     return -result                       'return success or error
237ec     42 7B 62 F6 | 	neg	result1, _var03
237f0                 | LR__2951
237f0                 | _psram_spin2_read1_ret
237f0     2D 00 64 FD | 	ret
237f4                 | 
237f4                 | ' 
237f4                 | ' '..............................................................................
237f4                 | ' 
237f4                 | ' {{
237f4                 | ' }}
237f4                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox1
237f4                 | _psram_spin2_write
237f4                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
237f4                 | '     if drivercog == -1 ' driver must be running
237f4     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
237f8     3A 81 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
237fc     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23800     FF FF 7F FF 
23804     FF 81 0E F2 | 	cmp	_var01, ##-1 wz
23808                 | '         return ERR_INACTIVE
23808     0F 7A 66 A6 |  if_e	neg	result1, #15
2380c     80 00 90 AD |  if_e	jmp	#LR__2961
23810                 | '     if count == 0 ' don't even bother writing
23810     00 96 0E F2 | 	cmp	arg03, #0 wz
23814                 | '         return 0
23814     00 7A 06 A6 |  if_e	mov	result1, #0
23818     74 00 90 AD |  if_e	jmp	#LR__2961
2381c                 | '     mailbox1 := mailbox + cogid()*12     ' compute COG's mailbox address
2381c     DF 03 00 FF 
23820     00 83 06 F6 | 	mov	_var02, ##507648
23824     00 7A 06 F6 | 	mov	result1, #0
23828     01 7A 62 FD | 	cogid	result1
2382c     3D 81 02 F6 | 	mov	_var01, result1
23830     01 80 66 F0 | 	shl	_var01, #1
23834     3D 81 02 F1 | 	add	_var01, result1
23838     02 80 66 F0 | 	shl	_var01, #2
2383c     40 83 02 F1 | 	add	_var02, _var01
23840                 | '     if long[mailbox] < 0
23840     DF 03 00 FF 
23844     00 81 06 FB | 	rdlong	_var01, ##507648
23848     00 80 56 F2 | 	cmps	_var01, #0 wc
2384c                 | '         return ERR_MAILBOX_BUSY
2384c     1C 7A 66 C6 |  if_b	neg	result1, #28
23850     3C 00 90 CD |  if_b	jmp	#LR__2961
23854                 | '     long[mailbox1][2] := count
23854     08 82 06 F1 | 	add	_var02, #8
23858     41 97 62 FC | 	wrlong	arg03, _var02
2385c                 | '     long[mailbox1][1] := srcHubAddr
2385c     04 82 86 F1 | 	sub	_var02, #4
23860     41 93 62 FC | 	wrlong	arg01, _var02
23864     04 82 86 F1 | 	sub	_var02, #4
23868                 | '     long[mailbox1] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
23868     4A 85 02 F6 | 	mov	_var03, arg02
2386c     D9 84 06 F4 | 	bitl	_var03, #217
23870     00 00 78 FF 
23874     00 80 06 F6 | 	mov	_var01, ##-268435456
23878     42 81 02 F1 | 	add	_var01, _var03
2387c     41 81 62 FC | 	wrlong	_var01, _var02
23880                 | '     repeat
23880                 | LR__2960
23880                 | '         result := long[mailbox1]    
23880     41 85 02 FB | 	rdlong	_var03, _var02
23884     00 84 56 F2 | 	cmps	_var03, #0 wc
23888     F4 FF 9F CD |  if_b	jmp	#LR__2960
2388c                 | '     while result < 0   
2388c                 | '     return -result                       'return success or error
2388c     42 7B 62 F6 | 	neg	result1, _var03
23890                 | LR__2961
23890                 | _psram_spin2_write_ret
23890     2D 00 64 FD | 	ret
23894                 | 
23894                 | ' 
23894                 | ' ' generalized fill
23894                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox1, req
23894                 | _psram_spin2_fill
23894     49 81 02 F6 | 	mov	_var01, arg01
23898     4A 83 02 F6 | 	mov	_var02, arg02
2389c     4B 85 02 F6 | 	mov	_var03, arg03
238a0     4D 87 02 F6 | 	mov	_var04, arg05
238a4                 | '     case datasize 
238a4     01 86 86 F1 | 	sub	_var04, #1
238a8     04 86 26 F3 | 	fle	_var04, #4
238ac     30 86 62 FD | 	jmprel	_var04
238b0                 | LR__2970
238b0     10 00 90 FD | 	jmp	#LR__2971
238b4     18 00 90 FD | 	jmp	#LR__2972
238b8     2C 00 90 FD | 	jmp	#LR__2974
238bc     1C 00 90 FD | 	jmp	#LR__2973
238c0     24 00 90 FD | 	jmp	#LR__2974
238c4                 | LR__2971
238c4                 | '         1: req := driver.R_WRITEBYTE
238c4     00 00 60 FF 
238c8     00 88 06 F6 | 	mov	_var05, ##-1073741824
238cc     20 00 90 FD | 	jmp	#LR__2975
238d0                 | LR__2972
238d0                 | '         2: req := driver.R_WRITEWORD
238d0     00 00 68 FF 
238d4     00 88 06 F6 | 	mov	_var05, ##-805306368
238d8     14 00 90 FD | 	jmp	#LR__2975
238dc                 | LR__2973
238dc                 | '         4: req := driver.R_WRITELONG
238dc     00 00 70 FF 
238e0     00 88 06 F6 | 	mov	_var05, ##-536870912
238e4     08 00 90 FD | 	jmp	#LR__2975
238e8                 | LR__2974
238e8                 | '         other : return ERR_INVALID
238e8     06 7A 66 F6 | 	neg	result1, #6
238ec     98 00 90 FD | 	jmp	#LR__2977
238f0                 | LR__2975
238f0                 | '     if count == 0   ' nothing to do
238f0     00 84 0E F2 | 	cmp	_var03, #0 wz
238f4                 | '         return 0
238f4     00 7A 06 A6 |  if_e	mov	result1, #0
238f8     8C 00 90 AD |  if_e	jmp	#LR__2977
238fc                 | '     if drivercog == -1
238fc     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23900     3A 87 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
23904     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23908     FF FF 7F FF 
2390c     FF 87 0E F2 | 	cmp	_var04, ##-1 wz
23910                 | '         return ERR_INACTIVE
23910     0F 7A 66 A6 |  if_e	neg	result1, #15
23914     70 00 90 AD |  if_e	jmp	#LR__2977
23918                 | '     mailbox1 := mailbox + 12*cogid() ' get mailbox base address for this COG
23918     DF 03 00 FF 
2391c     00 8B 06 F6 | 	mov	_var06, ##507648
23920     00 7A 06 F6 | 	mov	result1, #0
23924     01 7A 62 FD | 	cogid	result1
23928     3D 87 02 F6 | 	mov	_var04, result1
2392c     01 86 66 F0 | 	shl	_var04, #1
23930     3D 87 02 F1 | 	add	_var04, result1
23934     02 86 66 F0 | 	shl	_var04, #2
23938     43 8B 02 F1 | 	add	_var06, _var04
2393c                 | '     if long[mailbox] < 0
2393c     DF 03 00 FF 
23940     00 87 06 FB | 	rdlong	_var04, ##507648
23944     00 86 56 F2 | 	cmps	_var04, #0 wc
23948                 | '         return ERR_MAILBOX_BUSY
23948     1C 7A 66 C6 |  if_b	neg	result1, #28
2394c     38 00 90 CD |  if_b	jmp	#LR__2977
23950                 | '     long[mailbox1][2] := count
23950     08 8A 06 F1 | 	add	_var06, #8
23954     45 85 62 FC | 	wrlong	_var03, _var06
23958                 | '     long[mailbox1][1] := pattern
23958     04 8A 86 F1 | 	sub	_var06, #4
2395c     45 83 62 FC | 	wrlong	_var02, _var06
23960     04 8A 86 F1 | 	sub	_var06, #4
23964                 | '     long[mailbox1] := req + (addr & $1ffffff)
23964     44 8D 02 F6 | 	mov	_var07, _var05
23968     40 8F 02 F6 | 	mov	_var08, _var01
2396c     D9 8E 06 F4 | 	bitl	_var08, #217
23970     47 8D 02 F1 | 	add	_var07, _var08
23974     45 8D 62 FC | 	wrlong	_var07, _var06
23978                 | '     repeat
23978                 | LR__2976
23978                 | '         r := long[mailbox1]
23978     45 8F 02 FB | 	rdlong	_var08, _var06
2397c     00 8E 56 F2 | 	cmps	_var08, #0 wc
23980     F4 FF 9F CD |  if_b	jmp	#LR__2976
23984                 | '     while r < 0
23984                 | '     return -r                  ' return 0 for success or negated error code
23984     47 7B 62 F6 | 	neg	result1, _var08
23988                 | LR__2977
23988                 | _psram_spin2_fill_ret
23988     2D 00 64 FD | 	ret
2398c                 | 
2398c                 | ' 
2398c                 | ' '..............................................................................
2398c                 | ' 
2398c                 | ' {{
2398c                 | ' }}
2398c                 | ' PUB setQos(cog, qos) : result | mailbox1
2398c                 | _psram_spin2_setQos
2398c     49 81 02 F6 | 	mov	_var01, arg01
23990                 | '     if drivercog == -1 ' driver must be running
23990     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23994     3A 83 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
23998     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
2399c     FF FF 7F FF 
239a0     FF 83 0E F2 | 	cmp	_var02, ##-1 wz
239a4                 | '         return ERR_INACTIVE
239a4     0F 7A 66 A6 |  if_e	neg	result1, #15
239a8     9C 00 90 AD |  if_e	jmp	#LR__2984
239ac                 | '     if cog < 0 or cog > 7 ' enforce cog id range
239ac     00 80 56 F2 | 	cmps	_var01, #0 wc
239b0     08 00 90 CD |  if_b	jmp	#LR__2980
239b4     08 80 56 F2 | 	cmps	_var01, #8 wc
239b8     08 00 90 CD |  if_b	jmp	#LR__2981
239bc                 | LR__2980
239bc                 | '         return ERR_INVALID
239bc     06 7A 66 F6 | 	neg	result1, #6
239c0     84 00 90 FD | 	jmp	#LR__2984
239c4                 | LR__2981
239c4                 | '     long[@qosData][cog] := qos & !$1ff
239c4     FF 95 26 F5 | 	andn	arg02, #511
239c8     C8 75 06 F1 | 	add	ptr__psram_spin2_dat__, #456
239cc     02 80 66 F0 | 	shl	_var01, #2
239d0     3A 81 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
239d4     40 95 62 FC | 	wrlong	arg02, _var01
239d8                 | '     mailbox1 := mailbox + drivercog*12
239d8     DF 03 00 FF 
239dc     00 85 06 F6 | 	mov	_var03, ##507648
239e0     C8 74 86 F1 | 	sub	ptr__psram_spin2_dat__, #200
239e4     3A 87 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
239e8     43 89 02 F6 | 	mov	_var05, _var04
239ec     01 88 66 F0 | 	shl	_var05, #1
239f0     43 89 02 F1 | 	add	_var05, _var04
239f4     02 88 66 F0 | 	shl	_var05, #2
239f8     44 85 02 F1 | 	add	_var03, _var05
239fc                 | '     repeat until LOCKTRY(driverlock)
239fc     04 74 06 F1 | 	add	ptr__psram_spin2_dat__, #4
23a00                 | LR__2982
23a00     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
23a04     06 92 72 FD | 	locktry	arg01 wc
23a08     F4 FF 9F 3D |  if_ae	jmp	#LR__2982
23a0c     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
23a10                 | '     long[mailbox1] := driver.R_CONFIG + cogid()
23a10     00 88 06 F6 | 	mov	_var05, #0
23a14     01 88 62 FD | 	cogid	_var05
23a18     00 00 78 FF 
23a1c     00 82 06 F6 | 	mov	_var02, ##-268435456
23a20     44 83 02 F1 | 	add	_var02, _var05
23a24     42 83 62 FC | 	wrlong	_var02, _var03
23a28                 | '     repeat while long[mailbox1] < 0
23a28                 | LR__2983
23a28     42 83 02 FB | 	rdlong	_var02, _var03
23a2c     00 82 56 F2 | 	cmps	_var02, #0 wc
23a30     F4 FF 9F CD |  if_b	jmp	#LR__2983
23a34                 | '     LOCKREL(driverlock)
23a34     04 75 06 F1 | 	add	ptr__psram_spin2_dat__, #260
23a38     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
23a3c     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
23a40     07 92 72 FD | 	lockrel	arg01 wc
23a44     00 7A 06 F6 | 	mov	result1, #0
23a48                 | LR__2984
23a48                 | _psram_spin2_setQos_ret
23a48     2D 00 64 FD | 	ret
23a4c                 | 
23a4c                 | ' 
23a4c                 | ' '..............................................................................
23a4c                 | ' 
23a4c                 | ' {{
23a4c                 | ' }}
23a4c                 | ' PRI lookupDelay(freq) : delay | profile
23a4c                 | _psram_spin2_lookupDelay
23a4c                 | '     profile := @delayTable
23a4c     3A 81 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
23a50     08 81 06 F1 | 	add	_var01, #264
23a54                 | '     delay := long[profile][0]
23a54     40 83 02 FB | 	rdlong	_var02, _var01
23a58     D7 16 48 FB | 	callpa	#(@LR__2991-@LR__2990)>>2,fcache_load_ptr_
23a5c                 | '     repeat while long[profile][1] 
23a5c                 | LR__2990
23a5c     04 80 06 F1 | 	add	_var01, #4
23a60     40 7B 0A FB | 	rdlong	result1, _var01 wz
23a64     04 80 86 F1 | 	sub	_var01, #4
23a68     1C 00 90 AD |  if_e	jmp	#LR__2992
23a6c                 | '         if freq +< long[profile][1] 
23a6c     04 80 06 F1 | 	add	_var01, #4
23a70     40 7B 02 FB | 	rdlong	result1, _var01
23a74     04 80 86 F1 | 	sub	_var01, #4
23a78     3D 93 12 F2 | 	cmp	arg01, result1 wc
23a7c                 | '             quit
23a7c                 | '         profile += 4
23a7c     04 80 06 31 |  if_ae	add	_var01, #4
23a80                 | '         delay++
23a80     01 82 06 31 |  if_ae	add	_var02, #1
23a84     D4 FF 9F 3D |  if_ae	jmp	#LR__2990
23a88                 | LR__2991
23a88                 | LR__2992
23a88     41 7B 02 F6 | 	mov	result1, _var02
23a8c                 | _psram_spin2_lookupDelay_ret
23a8c     2D 00 64 FD | 	ret
23a90                 | 
23a90                 | ' 
23a90                 | ' PUB start() : r
23a90                 | _usbnew_spin2_start
23a90     00 80 06 F6 | 	mov	_var01, #0
23a94                 | '   ifnot driver_cog
23a94     15 00 00 FF 
23a98     87 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10887
23a9c     3B 83 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
23aa0     15 00 00 FF 
23aa4     87 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10887
23aa8     38 00 90 5D |  if_ne	jmp	#LR__3000
23aac                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
23aac     3B 95 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
23ab0     10 80 06 F6 | 	mov	_var01, #16
23ab4     00 96 06 F6 | 	mov	arg03, #0
23ab8     28 96 62 FD | 	setq	arg03
23abc     4A 81 F2 FC | 	coginit	_var01, arg02 wc
23ac0     01 80 66 C6 |  if_b	neg	_var01, #1
23ac4                 | '     if r >= 0
23ac4     00 80 56 F2 | 	cmps	_var01, #0 wc
23ac8                 | '       driver_cog := r+1
23ac8     40 83 02 36 |  if_ae	mov	_var02, _var01
23acc     01 82 06 31 |  if_ae	add	_var02, #1
23ad0     15 00 00 3F 
23ad4     87 76 06 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10887
23ad8     3B 83 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
23adc     15 00 00 3F 
23ae0     87 76 86 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10887
23ae4                 | LR__3000
23ae4     40 7B 02 F6 | 	mov	result1, _var01
23ae8                 | _usbnew_spin2_start_ret
23ae8     2D 00 64 FD | 	ret
23aec                 | 
23aec                 | '     '' (Always enabled)
23aec                 | ' 
23aec                 | ' '' Get current pressed state of a keyboard key
23aec                 | ' PUB keystate(key) : r | buf[2],tmp
23aec                 | _usbnew_spin2_keystate
23aec     00 84 06 F6 | 	mov	_var03, #0
23af0                 | '   if key >= $E0 && key < $E8
23af0     E0 92 56 F2 | 	cmps	arg01, #224 wc
23af4     30 00 90 CD |  if_b	jmp	#LR__3010
23af8     E8 92 56 F2 | 	cmps	arg01, #232 wc
23afc     28 00 90 3D |  if_ae	jmp	#LR__3010
23b00                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
23b00     00 7A 06 F6 | 	mov	result1, #0
23b04     3B 87 02 F6 | 	mov	_var04, ptr__usbnew_spin2_dat__
23b08     13 00 00 FF 
23b0c     D8 87 06 F1 | 	add	_var04, ##10200
23b10     49 89 02 F6 | 	mov	_var05, arg01
23b14     E0 88 86 F1 | 	sub	_var05, #224
23b18     43 8B C2 FA | 	rdbyte	_var06, _var04
23b1c     44 8B 4A F0 | 	shr	_var06, _var05 wz
23b20     01 7A 66 56 |  if_ne	neg	result1, #1
23b24     50 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
23b28                 | LR__3010
23b28                 | '   else
23b28                 | '     '' Do this in inline ASM to ensure atomicity
23b28                 | '     tmp := @hkbd_report
23b28     3B 8B 02 F6 | 	mov	_var06, ptr__usbnew_spin2_dat__
23b2c     13 00 00 FF 
23b30     D8 8B 06 F1 | 	add	_var06, ##10200
23b34                 | '     org
23b34     D7 1E 48 FB | 	callpa	#(@LR__3012-@LR__3011)>>2,fcache_load_ptr_
23b38                 | LR__3011
23b38 000             | 	org	0
23b38 000 28 02 64 FD | 	setq	#1
23b3c 001 45 81 02 FB | 	rdlong	_var01, _var06
23b40 002 40 8D F2 F8 | 	getbyte	_var07, _var01, #2
23b44 003 49 8D 0A F2 | 	cmp	_var07, arg01 wz
23b48 004 40 8D FA F8 | 	getbyte	_var07, _var01, #3
23b4c 005 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
23b50 006 41 8D E2 F8 | 	getbyte	_var07, _var02, #0
23b54 007 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
23b58 008 41 8D EA F8 | 	getbyte	_var07, _var02, #1
23b5c 009 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
23b60 00a 41 8D F2 F8 | 	getbyte	_var07, _var02, #2
23b64 00b 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
23b68 00c 41 8D FA F8 | 	getbyte	_var07, _var02, #3
23b6c 00d 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
23b70 00e 01 84 66 A6 |  if_e	neg	_var03, #1
23b74 00f             | 	fit	192
23b74 00f             | LR__3012
23b74                 | 	orgh
23b74     42 7B 02 F6 | 	mov	result1, _var03
23b78                 | _usbnew_spin2_keystate_ret
23b78     2D 00 64 FD | 	ret
23b7c                 | 
23b7c                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
23b7c                 | ' 
23b7c                 | ' '' Return key event from buffer if there is one
23b7c                 | ' PUB get_key() : r | tail
23b7c                 | _usbnew_spin2_get_key
23b7c                 | '   tail := keyq_tail
23b7c     0F 00 00 FF 
23b80     D5 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
23b84     3B 81 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
23b88                 | '   if keyq_head == tail
23b88     01 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
23b8c     3B 83 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
23b90     0F 00 00 FF 
23b94     D4 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7892
23b98     40 83 0A F2 | 	cmp	_var02, _var01 wz
23b9c                 | '     return 0 ' No event
23b9c     00 7A 06 A6 |  if_e	mov	result1, #0
23ba0     3C 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
23ba4                 | '   r := keyq_data[tail]
23ba4     40 83 02 F6 | 	mov	_var02, _var01
23ba8     02 82 66 F0 | 	shl	_var02, #2
23bac     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
23bb0     0F 00 00 FF 
23bb4     D6 7A 06 F1 | 	add	result1, ##7894
23bb8     3D 83 02 F1 | 	add	_var02, result1
23bbc     41 7B 02 FB | 	rdlong	result1, _var02
23bc0                 | '   if ++tail == KEYQUEUE_SIZE
23bc0     01 80 06 F1 | 	add	_var01, #1
23bc4     80 80 0E F2 | 	cmp	_var01, #128 wz
23bc8                 | '     tail := 0
23bc8     00 80 06 A6 |  if_e	mov	_var01, #0
23bcc                 | '   keyq_tail := tail
23bcc     0F 00 00 FF 
23bd0     D5 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
23bd4     3B 81 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
23bd8     0F 00 00 FF 
23bdc     D5 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7893
23be0                 | _usbnew_spin2_get_key_ret
23be0     2D 00 64 FD | 	ret
23be4                 | 
23be4                 | ' 
23be4                 | ' '' Emulate mouse movement
23be4                 | ' PUB mouse_move(x,y)
23be4                 | _usbnew_spin2_mouse_move
23be4     02 CA 05 F6 | 	mov	COUNT_, #2
23be8     E8 00 A0 FD | 	call	#pushregs_
23bec     49 A7 02 F6 | 	mov	local01, arg01
23bf0     4A A9 02 F6 | 	mov	local02, arg02
23bf4                 | '   mouse_lock := 1
23bf4     14 00 00 FF 
23bf8     F1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
23bfc     3B 03 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
23c00     14 00 00 FF 
23c04     F1 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
23c08                 | '   waitus(2) ' hope driver is now done
23c08     02 92 06 F6 | 	mov	arg01, #2
23c0c     E0 0E B0 FD | 	call	#__system___waitus
23c10                 | '   mouse_xacc := x
23c10     14 00 00 FF 
23c14     E1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
23c18     3B A7 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
23c1c                 | '   mouse_yacc := y
23c1c     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
23c20     3B A9 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
23c24                 | '   if mouse_outptr
23c24     05 00 00 FF 
23c28     15 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2581
23c2c     3B 95 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
23c30     0F 00 00 FF 
23c34     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
23c38     24 00 90 AD |  if_e	jmp	#LR__3020
23c3c                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
23c3c     10 A8 66 F0 | 	shl	local02, #16
23c40     53 A7 32 F9 | 	getword	local01, local01, #0
23c44     53 A9 42 F5 | 	or	local02, local01
23c48     0F 00 00 FF 
23c4c     D0 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7888
23c50     3B A7 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
23c54     0F 00 00 FF 
23c58     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
23c5c     53 A9 62 FC | 	wrlong	local02, local01
23c60                 | LR__3020
23c60                 | '   mouse_lock := 0
23c60     14 00 00 FF 
23c64     F1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
23c68     3B 01 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
23c6c     14 00 00 FF 
23c70     F1 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
23c74     E7 F0 03 F6 | 	mov	ptra, fp
23c78     F2 00 A0 FD | 	call	#popregs_
23c7c                 | _usbnew_spin2_mouse_move_ret
23c7c     2D 00 64 FD | 	ret
23c80                 | 
23c80                 | ' 
23c80                 | ' '' Get state of an axis (normalized between -32768 and 32767)
23c80                 | ' PUB hidpad_axis(dev,axnum) : r
23c80                 | _usbnew_spin2_hidpad_axis
23c80                 | '   if axnum +>= 8
23c80     08 94 16 F2 | 	cmp	arg02, #8 wc
23c84                 | '     return 0
23c84     00 7A 06 36 |  if_ae	mov	result1, #0
23c88     2C 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
23c8c                 | '   else 
23c8c                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
23c8c     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
23c90     13 00 00 FF 
23c94     F8 7B 06 F1 | 	add	result1, ##10232
23c98     05 92 66 F0 | 	shl	arg01, #5
23c9c     49 7B 02 F1 | 	add	result1, arg01
23ca0     04 92 06 F6 | 	mov	arg01, #4
23ca4     4A 93 02 F1 | 	add	arg01, arg02
23ca8     01 92 66 F0 | 	shl	arg01, #1
23cac     3D 93 02 F1 | 	add	arg01, result1
23cb0     49 7B E2 FA | 	rdword	result1, arg01
23cb4     0F 7A 66 F7 | 	signx	result1, #15
23cb8                 | _usbnew_spin2_hidpad_axis_ret
23cb8     2D 00 64 FD | 	ret
23cbc                 | 
23cbc                 | ' 
23cbc                 | ' '' Get state of a hat
23cbc                 | ' PUB hidpad_hat(dev,hatnum) : r
23cbc                 | _usbnew_spin2_hidpad_hat
23cbc                 | '   if hatnum +>= 4
23cbc     04 94 16 F2 | 	cmp	arg02, #4 wc
23cc0                 | '     return 0
23cc0     00 7A 06 36 |  if_ae	mov	result1, #0
23cc4     24 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
23cc8                 | '   else 
23cc8                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][7*4+hatnum]
23cc8     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
23ccc     13 00 00 FF 
23cd0     F8 7B 06 F1 | 	add	result1, ##10232
23cd4     05 92 66 F0 | 	shl	arg01, #5
23cd8     49 7B 02 F1 | 	add	result1, arg01
23cdc     1C 92 06 F6 | 	mov	arg01, #28
23ce0     4A 93 02 F1 | 	add	arg01, arg02
23ce4     3D 93 02 F1 | 	add	arg01, result1
23ce8     49 7B C2 FA | 	rdbyte	result1, arg01
23cec                 | _usbnew_spin2_hidpad_hat_ret
23cec     2D 00 64 FD | 	ret
23cf0                 | 
23cf0                 | ' 
23cf0                 | ' '--------------------------------------------------------------
23cf0                 | ' '---------- Init the variables, start the cog. ----------------
23cf0                 | ' '--------------------------------------------------------------
23cf0                 | ' 
23cf0                 | ' pub start(mbox,scope,cache) :cog,base | iii
23cf0                 | _Audio2_004_spin2_start
23cf0     04 CA 05 F6 | 	mov	COUNT_, #4
23cf4     E8 00 A0 FD | 	call	#pushregs_
23cf8     49 A7 02 F6 | 	mov	local01, arg01
23cfc                 | ' 
23cfc                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
23cfc                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
23cfc                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
23cfc                 | ' 
23cfc                 | ' mailboxaddr:=mbox 
23cfc     32 A7 62 FC | 	wrlong	local01, objptr
23d00                 | ' scope_ptr:=scope
23d00     04 64 06 F1 | 	add	objptr, #4
23d04     32 95 62 FC | 	wrlong	arg02, objptr
23d08                 | ' cache_ptr:=cache
23d08     04 64 06 F1 | 	add	objptr, #4
23d0c     32 97 62 FC | 	wrlong	arg03, objptr
23d10                 | ' base:=@channel0[0]
23d10     04 64 06 F1 | 	add	objptr, #4
23d14     32 A9 02 F6 | 	mov	local02, objptr
23d18                 | ' 
23d18                 | ' repeat iii from 0 to 15
23d18     00 AA 06 F6 | 	mov	local03, #0
23d1c     0C 64 86 F1 | 	sub	objptr, #12
23d20     D7 1A 49 FB | 	callpa	#(@LR__3031-@LR__3030)>>2,fcache_load_ptr_
23d24                 | LR__3030
23d24                 | '   long[base+64*iii]:=0
23d24     54 A7 02 F6 | 	mov	local01, local02
23d28     55 7D 02 F6 | 	mov	result2, local03
23d2c     06 7C 66 F0 | 	shl	result2, #6
23d30     3E A7 02 F1 | 	add	local01, result2
23d34     53 01 68 FC | 	wrlong	#0, local01
23d38                 | '   long[base+64*iii+4]:=0  		
23d38     54 A7 02 F6 | 	mov	local01, local02
23d3c     55 7D 02 F6 | 	mov	result2, local03
23d40     06 7C 66 F0 | 	shl	result2, #6
23d44     3E A7 02 F1 | 	add	local01, result2
23d48     04 A6 06 F1 | 	add	local01, #4
23d4c     53 01 68 FC | 	wrlong	#0, local01
23d50                 | '   long[base+64*iii+8]:=0
23d50     54 AD 02 F6 | 	mov	local04, local02
23d54     55 A7 02 F6 | 	mov	local01, local03
23d58     06 A6 66 F0 | 	shl	local01, #6
23d5c     53 AD 02 F1 | 	add	local04, local01
23d60     08 AC 06 F1 | 	add	local04, #8
23d64     56 01 68 FC | 	wrlong	#0, local04
23d68                 | '   long[base+64*iii+12]:=0
23d68     54 AD 02 F6 | 	mov	local04, local02
23d6c     55 A7 02 F6 | 	mov	local01, local03
23d70     06 A6 66 F0 | 	shl	local01, #6
23d74     53 AD 02 F1 | 	add	local04, local01
23d78     0C AC 06 F1 | 	add	local04, #12
23d7c     56 01 68 FC | 	wrlong	#0, local04
23d80                 | '   long[base+64*iii+16]:=0
23d80     54 AD 02 F6 | 	mov	local04, local02
23d84     55 A7 02 F6 | 	mov	local01, local03
23d88     06 A6 66 F0 | 	shl	local01, #6
23d8c     53 AD 02 F1 | 	add	local04, local01
23d90     10 AC 06 F1 | 	add	local04, #16
23d94     56 01 68 FC | 	wrlong	#0, local04
23d98                 | '   long[base+64*iii+20]:=0
23d98     54 AD 02 F6 | 	mov	local04, local02
23d9c     55 A7 02 F6 | 	mov	local01, local03
23da0     06 A6 66 F0 | 	shl	local01, #6
23da4     53 AD 02 F1 | 	add	local04, local01
23da8     14 AC 06 F1 | 	add	local04, #20
23dac     56 01 68 FC | 	wrlong	#0, local04
23db0                 | '   long[base+64*iii+24]:=0
23db0     54 AD 02 F6 | 	mov	local04, local02
23db4     55 A7 02 F6 | 	mov	local01, local03
23db8     06 A6 66 F0 | 	shl	local01, #6
23dbc     53 AD 02 F1 | 	add	local04, local01
23dc0     18 AC 06 F1 | 	add	local04, #24
23dc4     56 01 68 FC | 	wrlong	#0, local04
23dc8                 | '   long[base+64*iii+28]:=0
23dc8     54 AD 02 F6 | 	mov	local04, local02
23dcc     55 A7 02 F6 | 	mov	local01, local03
23dd0     06 A6 66 F0 | 	shl	local01, #6
23dd4     53 AD 02 F1 | 	add	local04, local01
23dd8     1C AC 06 F1 | 	add	local04, #28
23ddc     56 01 68 FC | 	wrlong	#0, local04
23de0                 | '   word[base+64*iii+32]:=8192
23de0     54 AD 02 F6 | 	mov	local04, local02
23de4     55 A7 02 F6 | 	mov	local01, local03
23de8     06 A6 66 F0 | 	shl	local01, #6
23dec     53 AD 02 F1 | 	add	local04, local01
23df0     20 AC 06 F1 | 	add	local04, #32
23df4     10 00 80 FF 
23df8     56 01 58 FC | 	wrword	##8192, local04
23dfc                 | '   word[base+64*iii+34]:=8192
23dfc     54 AD 02 F6 | 	mov	local04, local02
23e00     55 A7 02 F6 | 	mov	local01, local03
23e04     06 A6 66 F0 | 	shl	local01, #6
23e08     53 AD 02 F1 | 	add	local04, local01
23e0c     22 AC 06 F1 | 	add	local04, #34
23e10     10 00 80 FF 
23e14     56 01 58 FC | 	wrword	##8192, local04
23e18                 | '   long[base+64*iii+36]:=0
23e18     54 AD 02 F6 | 	mov	local04, local02
23e1c     55 A7 02 F6 | 	mov	local01, local03
23e20     06 A6 66 F0 | 	shl	local01, #6
23e24     53 AD 02 F1 | 	add	local04, local01
23e28     24 AC 06 F1 | 	add	local04, #36
23e2c     56 01 68 FC | 	wrlong	#0, local04
23e30                 | '   long[base+64*iii+40]:=0
23e30     54 AD 02 F6 | 	mov	local04, local02
23e34     55 A7 02 F6 | 	mov	local01, local03
23e38     06 A6 66 F0 | 	shl	local01, #6
23e3c     53 AD 02 F1 | 	add	local04, local01
23e40     28 AC 06 F1 | 	add	local04, #40
23e44     56 01 68 FC | 	wrlong	#0, local04
23e48                 | '   long[base+64*iii+44]:=0
23e48     54 AD 02 F6 | 	mov	local04, local02
23e4c     55 A7 02 F6 | 	mov	local01, local03
23e50     06 A6 66 F0 | 	shl	local01, #6
23e54     53 AD 02 F1 | 	add	local04, local01
23e58     2C AC 06 F1 | 	add	local04, #44
23e5c     56 01 68 FC | 	wrlong	#0, local04
23e60                 | '   long[base+64*iii+48]:=0
23e60     54 AD 02 F6 | 	mov	local04, local02
23e64     55 A7 02 F6 | 	mov	local01, local03
23e68     06 A6 66 F0 | 	shl	local01, #6
23e6c     53 AD 02 F1 | 	add	local04, local01
23e70     30 AC 06 F1 | 	add	local04, #48
23e74     56 01 68 FC | 	wrlong	#0, local04
23e78                 | '   long[base+64*iii+52]:=0
23e78     54 AD 02 F6 | 	mov	local04, local02
23e7c     55 A7 02 F6 | 	mov	local01, local03
23e80     06 A6 66 F0 | 	shl	local01, #6
23e84     53 AD 02 F1 | 	add	local04, local01
23e88     34 AC 06 F1 | 	add	local04, #52
23e8c     56 01 68 FC | 	wrlong	#0, local04
23e90                 | '   freqs[iii]:=440000
23e90     55 AD 02 F6 | 	mov	local04, local03
23e94     02 AC 66 F0 | 	shl	local04, #2
23e98     02 00 00 FF 
23e9c     0C 64 06 F1 | 	add	objptr, ##1036
23ea0     32 AD 02 F1 | 	add	local04, objptr
23ea4     5B 03 80 FF 
23ea8     56 81 69 FC | 	wrlong	##440000, local04
23eac                 | '   delays[iii]:=0
23eac     55 AD 02 F6 | 	mov	local04, local03
23eb0     01 AC 66 F0 | 	shl	local04, #1
23eb4     40 64 06 F1 | 	add	objptr, #64
23eb8     32 AD 02 F1 | 	add	local04, objptr
23ebc     56 01 58 FC | 	wrword	#0, local04
23ec0                 | '   volumes[iii]:=4096
23ec0     55 AD 02 F6 | 	mov	local04, local03
23ec4     01 AC 66 F0 | 	shl	local04, #1
23ec8     20 64 06 F1 | 	add	objptr, #32
23ecc     32 AD 02 F1 | 	add	local04, objptr
23ed0     08 00 80 FF 
23ed4     56 01 58 FC | 	wrword	##4096, local04
23ed8                 | '   waveforms[iii]:=0
23ed8     55 AD 02 F6 | 	mov	local04, local03
23edc     02 AC 66 F0 | 	shl	local04, #2
23ee0     20 64 06 F1 | 	add	objptr, #32
23ee4     32 AD 02 F1 | 	add	local04, objptr
23ee8     56 01 68 FC | 	wrlong	#0, local04
23eec                 | '   envelopes[iii]:=0
23eec     55 AD 02 F6 | 	mov	local04, local03
23ef0     02 AC 66 F0 | 	shl	local04, #2
23ef4     40 64 06 F1 | 	add	objptr, #64
23ef8     32 AD 02 F1 | 	add	local04, objptr
23efc     56 01 68 FC | 	wrlong	#0, local04
23f00                 | '   lengths[iii]:=1000
23f00     55 AD 02 F6 | 	mov	local04, local03
23f04     01 AC 66 F0 | 	shl	local04, #1
23f08     40 64 06 F1 | 	add	objptr, #64
23f0c     32 AD 02 F1 | 	add	local04, objptr
23f10     01 00 80 FF 
23f14     56 D1 5B FC | 	wrword	##1000, local04
23f18                 | '   pans[iii]:=8192
23f18     55 AD 02 F6 | 	mov	local04, local03
23f1c     01 AC 66 F0 | 	shl	local04, #1
23f20     20 64 06 F1 | 	add	objptr, #32
23f24     32 AD 02 F1 | 	add	local04, objptr
23f28     10 00 80 FF 
23f2c     56 01 58 FC | 	wrword	##8192, local04
23f30                 | '   sustains[iii]:=255
23f30     55 AD 02 F6 | 	mov	local04, local03
23f34     01 AC 66 F0 | 	shl	local04, #1
23f38     20 64 06 F1 | 	add	objptr, #32
23f3c     32 AD 02 F1 | 	add	local04, objptr
23f40     56 FF 59 FC | 	wrword	#255, local04
23f44     01 AA 06 F1 | 	add	local03, #1
23f48     10 AA 56 F2 | 	cmps	local03, #16 wc
23f4c     02 00 00 FF 
23f50     4C 65 86 F1 | 	sub	objptr, ##1356
23f54     CC FD 9F CD |  if_b	jmp	#LR__3030
23f58                 | LR__3031
23f58                 | '   
23f58                 | ' cog:=coginit(16,@audio,@mailboxaddr)
23f58     33 95 02 F6 | 	mov	arg02, ptr__Audio2_004_spin2_dat__
23f5c     32 97 02 F6 | 	mov	arg03, objptr
23f60     10 AC 06 F6 | 	mov	local04, #16
23f64     28 96 62 FD | 	setq	arg03
23f68     4A AD F2 FC | 	coginit	local04, arg02 wc
23f6c     01 AC 66 C6 |  if_b	neg	local04, #1
23f70                 | ' waitms(10)
23f70     0A 92 06 F6 | 	mov	arg01, #10
23f74     0C 0B B0 FD | 	call	#__system___waitms
23f78                 | ' return cog,base
23f78     54 7D 02 F6 | 	mov	result2, local02
23f7c     56 7B 02 F6 | 	mov	result1, local04
23f80     E7 F0 03 F6 | 	mov	ptra, fp
23f84     F2 00 A0 FD | 	call	#popregs_
23f88                 | _Audio2_004_spin2_start_ret
23f88     2D 00 64 FD | 	ret
23f8c                 | 
23f8c                 | ' 
23f8c                 | ' 
23f8c                 | ' 
23f8c                 | ' pub play (channel, frequency=-1, delay=-1, volume=-1, waveform=-1, envelope=-1, length=-1, pan=-1, sustain=-1) | base2
23f8c                 | _Audio2_004_spin2_play
23f8c     0B CA 05 F6 | 	mov	COUNT_, #11
23f90     E8 00 A0 FD | 	call	#pushregs_
23f94     49 A7 02 F6 | 	mov	local01, arg01
23f98     4A A9 02 F6 | 	mov	local02, arg02
23f9c     4B AB 02 F6 | 	mov	local03, arg03
23fa0     4C AD 02 F6 | 	mov	local04, arg04
23fa4     4D AF 02 F6 | 	mov	local05, arg05
23fa8     4E B1 02 F6 | 	mov	local06, arg06
23fac     4F B3 02 F6 | 	mov	local07, arg07
23fb0     50 B5 02 F6 | 	mov	local08, arg08
23fb4     51 B7 02 F6 | 	mov	local09, arg09
23fb8                 | ' 
23fb8                 | ' if frequency==(-1)
23fb8     FF FF 7F FF 
23fbc     FF A9 0E F2 | 	cmp	local02, ##-1 wz
23fc0     20 00 90 5D |  if_ne	jmp	#LR__3040
23fc4                 | '   frequency:=freqs[channel]
23fc4     53 A9 02 F6 | 	mov	local02, local01
23fc8     02 A8 66 F0 | 	shl	local02, #2
23fcc     32 B9 02 F6 | 	mov	local10, objptr
23fd0     02 00 00 FF 
23fd4     0C B8 06 F1 | 	add	local10, ##1036
23fd8     5C A9 02 F1 | 	add	local02, local10
23fdc     54 A9 02 FB | 	rdlong	local02, local02
23fe0     1C 00 90 FD | 	jmp	#LR__3041
23fe4                 | LR__3040
23fe4                 | ' else
23fe4                 | '   freqs[channel]:=frequency
23fe4     53 BB 02 F6 | 	mov	local11, local01
23fe8     02 BA 66 F0 | 	shl	local11, #2
23fec     32 B9 02 F6 | 	mov	local10, objptr
23ff0     02 00 00 FF 
23ff4     0C B8 06 F1 | 	add	local10, ##1036
23ff8     5C BB 02 F1 | 	add	local11, local10
23ffc     5D A9 62 FC | 	wrlong	local02, local11
24000                 | LR__3041
24000                 | '   
24000                 | ' if delay==(-1)
24000     FF FF 7F FF 
24004     FF AB 0E F2 | 	cmp	local03, ##-1 wz
24008     20 00 90 5D |  if_ne	jmp	#LR__3042
2400c                 | '   delay:=delays[channel]
2400c     53 B9 02 F6 | 	mov	local10, local01
24010     01 B8 66 F0 | 	shl	local10, #1
24014     32 BB 02 F6 | 	mov	local11, objptr
24018     02 00 00 FF 
2401c     4C BA 06 F1 | 	add	local11, ##1100
24020     5D B9 02 F1 | 	add	local10, local11
24024     5C AB E2 FA | 	rdword	local03, local10
24028     1C 00 90 FD | 	jmp	#LR__3043
2402c                 | LR__3042
2402c                 | ' else
2402c                 | '   delays[channel]:=delay
2402c     53 B9 02 F6 | 	mov	local10, local01
24030     01 B8 66 F0 | 	shl	local10, #1
24034     32 BB 02 F6 | 	mov	local11, objptr
24038     02 00 00 FF 
2403c     4C BA 06 F1 | 	add	local11, ##1100
24040     5D B9 02 F1 | 	add	local10, local11
24044     5C AB 52 FC | 	wrword	local03, local10
24048                 | LR__3043
24048                 | '   
24048                 | ' if volume==(-1)      
24048     FF FF 7F FF 
2404c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
24050     20 00 90 5D |  if_ne	jmp	#LR__3044
24054                 | '   volume:=volumes[channel]
24054     53 B9 02 F6 | 	mov	local10, local01
24058     01 B8 66 F0 | 	shl	local10, #1
2405c     32 BB 02 F6 | 	mov	local11, objptr
24060     02 00 00 FF 
24064     6C BA 06 F1 | 	add	local11, ##1132
24068     5D B9 02 F1 | 	add	local10, local11
2406c     5C AD E2 FA | 	rdword	local04, local10
24070     1C 00 90 FD | 	jmp	#LR__3045
24074                 | LR__3044
24074                 | ' else
24074                 | '   volumes[channel]:=volume
24074     53 B9 02 F6 | 	mov	local10, local01
24078     01 B8 66 F0 | 	shl	local10, #1
2407c     32 BB 02 F6 | 	mov	local11, objptr
24080     02 00 00 FF 
24084     6C BA 06 F1 | 	add	local11, ##1132
24088     5D B9 02 F1 | 	add	local10, local11
2408c     5C AD 52 FC | 	wrword	local04, local10
24090                 | LR__3045
24090                 | '   
24090                 | ' if waveform==(-1)
24090     FF FF 7F FF 
24094     FF AF 0E F2 | 	cmp	local05, ##-1 wz
24098     20 00 90 5D |  if_ne	jmp	#LR__3046
2409c                 | '   waveform:=waveforms[channel]
2409c     53 BB 02 F6 | 	mov	local11, local01
240a0     02 BA 66 F0 | 	shl	local11, #2
240a4     32 B9 02 F6 | 	mov	local10, objptr
240a8     02 00 00 FF 
240ac     8C B8 06 F1 | 	add	local10, ##1164
240b0     5C BB 02 F1 | 	add	local11, local10
240b4     5D AF 02 FB | 	rdlong	local05, local11
240b8     1C 00 90 FD | 	jmp	#LR__3047
240bc                 | LR__3046
240bc                 | ' else
240bc                 | '   waveforms[channel]:=waveform
240bc     53 BB 02 F6 | 	mov	local11, local01
240c0     02 BA 66 F0 | 	shl	local11, #2
240c4     32 B9 02 F6 | 	mov	local10, objptr
240c8     02 00 00 FF 
240cc     8C B8 06 F1 | 	add	local10, ##1164
240d0     5C BB 02 F1 | 	add	local11, local10
240d4     5D AF 62 FC | 	wrlong	local05, local11
240d8                 | LR__3047
240d8                 | '   
240d8                 | ' if envelope==(-1)
240d8     FF FF 7F FF 
240dc     FF B1 0E F2 | 	cmp	local06, ##-1 wz
240e0     20 00 90 5D |  if_ne	jmp	#LR__3048
240e4                 | '   envelope:=envelopes[channel]
240e4     53 BB 02 F6 | 	mov	local11, local01
240e8     02 BA 66 F0 | 	shl	local11, #2
240ec     32 B9 02 F6 | 	mov	local10, objptr
240f0     02 00 00 FF 
240f4     CC B8 06 F1 | 	add	local10, ##1228
240f8     5C BB 02 F1 | 	add	local11, local10
240fc     5D B1 02 FB | 	rdlong	local06, local11
24100     1C 00 90 FD | 	jmp	#LR__3049
24104                 | LR__3048
24104                 | ' else
24104                 | '   envelopes[channel]:=envelope
24104     53 BB 02 F6 | 	mov	local11, local01
24108     02 BA 66 F0 | 	shl	local11, #2
2410c     32 B9 02 F6 | 	mov	local10, objptr
24110     02 00 00 FF 
24114     CC B8 06 F1 | 	add	local10, ##1228
24118     5C BB 02 F1 | 	add	local11, local10
2411c     5D B1 62 FC | 	wrlong	local06, local11
24120                 | LR__3049
24120                 | '   
24120                 | ' if length==(-1)
24120     FF FF 7F FF 
24124     FF B3 0E F2 | 	cmp	local07, ##-1 wz
24128     20 00 90 5D |  if_ne	jmp	#LR__3050
2412c                 | '   length:=lengths[channel]
2412c     53 B9 02 F6 | 	mov	local10, local01
24130     01 B8 66 F0 | 	shl	local10, #1
24134     32 BB 02 F6 | 	mov	local11, objptr
24138     02 00 00 FF 
2413c     0C BB 06 F1 | 	add	local11, ##1292
24140     5D B9 02 F1 | 	add	local10, local11
24144     5C B3 E2 FA | 	rdword	local07, local10
24148     1C 00 90 FD | 	jmp	#LR__3051
2414c                 | LR__3050
2414c                 | ' else
2414c                 | '   lengths[channel]:=length
2414c     53 B9 02 F6 | 	mov	local10, local01
24150     01 B8 66 F0 | 	shl	local10, #1
24154     32 BB 02 F6 | 	mov	local11, objptr
24158     02 00 00 FF 
2415c     0C BB 06 F1 | 	add	local11, ##1292
24160     5D B9 02 F1 | 	add	local10, local11
24164     5C B3 52 FC | 	wrword	local07, local10
24168                 | LR__3051
24168                 | '   
24168                 | ' if pan==(-1)
24168     FF FF 7F FF 
2416c     FF B5 0E F2 | 	cmp	local08, ##-1 wz
24170     20 00 90 5D |  if_ne	jmp	#LR__3052
24174                 | '   pan:=pans[channel]
24174     53 B9 02 F6 | 	mov	local10, local01
24178     01 B8 66 F0 | 	shl	local10, #1
2417c     32 BB 02 F6 | 	mov	local11, objptr
24180     02 00 00 FF 
24184     2C BB 06 F1 | 	add	local11, ##1324
24188     5D B9 02 F1 | 	add	local10, local11
2418c     5C B5 E2 FA | 	rdword	local08, local10
24190     1C 00 90 FD | 	jmp	#LR__3053
24194                 | LR__3052
24194                 | ' else
24194                 | '   pans[channel]:=pan
24194     53 B9 02 F6 | 	mov	local10, local01
24198     01 B8 66 F0 | 	shl	local10, #1
2419c     32 BB 02 F6 | 	mov	local11, objptr
241a0     02 00 00 FF 
241a4     2C BB 06 F1 | 	add	local11, ##1324
241a8     5D B9 02 F1 | 	add	local10, local11
241ac     5C B5 52 FC | 	wrword	local08, local10
241b0                 | LR__3053
241b0                 | '  
241b0                 | ' if sustain==(-1)
241b0     FF FF 7F FF 
241b4     FF B7 0E F2 | 	cmp	local09, ##-1 wz
241b8     20 00 90 5D |  if_ne	jmp	#LR__3054
241bc                 | '   sustain:=sustains[channel]
241bc     53 B9 02 F6 | 	mov	local10, local01
241c0     01 B8 66 F0 | 	shl	local10, #1
241c4     32 BB 02 F6 | 	mov	local11, objptr
241c8     02 00 00 FF 
241cc     4C BB 06 F1 | 	add	local11, ##1356
241d0     5D B9 02 F1 | 	add	local10, local11
241d4     5C B7 E2 FA | 	rdword	local09, local10
241d8     1C 00 90 FD | 	jmp	#LR__3055
241dc                 | LR__3054
241dc                 | ' else
241dc                 | '   sustains[channel]:=sustain
241dc     53 B9 02 F6 | 	mov	local10, local01
241e0     01 B8 66 F0 | 	shl	local10, #1
241e4     32 BB 02 F6 | 	mov	local11, objptr
241e8     02 00 00 FF 
241ec     4C BB 06 F1 | 	add	local11, ##1356
241f0     5D B9 02 F1 | 	add	local10, local11
241f4     5C B7 52 FC | 	wrword	local09, local10
241f8                 | LR__3055
241f8     59 BB 52 F6 | 	abs	local11, local07 wc
241fc     C2 B9 80 FF 
24200     5D DF 19 FD | 	qdiv	##24347887, local11
24204                 | '                 
24204                 | ' length:=24347887/length  
24204     18 BA 62 FD | 	getqx	local11
24208     6D A8 06 FD | 	qmul	local02, #109
2420c     5D B3 82 F6 | 	negc	local07, local11
24210                 | ' 'debug(udec(sustain))
24210                 | ' base2:=@channel0[0]+64*(channel and $F)
24210     32 A9 02 F6 | 	mov	local02, objptr
24214     0C A8 06 F1 | 	add	local02, #12
24218     00 A2 06 F6 | 	mov	arg09, #0
2421c     00 A6 0E F2 | 	cmp	local01, #0 wz
24220     01 A2 66 56 |  if_ne	neg	arg09, #1
24224     06 A2 66 F0 | 	shl	arg09, #6
24228     51 A9 02 F1 | 	add	local02, arg09
2422c                 | ' long[base2+20]:=waveform+$C0000000 
2422c     00 00 60 FF 
24230     00 AE 06 F1 | 	add	local05, ##-1073741824
24234     54 B9 02 F6 | 	mov	local10, local02
24238     14 B8 06 F1 | 	add	local10, #20
2423c     5C AF 62 FC | 	wrlong	local05, local10
24240                 | ' long[base2+28]:= 2048
24240     54 BB 02 F6 | 	mov	local11, local02
24244     1C BA 06 F1 | 	add	local11, #28
24248     04 00 80 FF 
2424c     5D 01 68 FC | 	wrlong	##2048, local11
24250                 | ' long[base2+24]:= 0
24250     54 BB 02 F6 | 	mov	local11, local02
24254     18 BA 06 F1 | 	add	local11, #24
24258     5D 01 68 FC | 	wrlong	#0, local11
2425c                 | ' word[base2+32]:=volume
2425c     54 BB 02 F6 | 	mov	local11, local02
24260     20 BA 06 F1 | 	add	local11, #32
24264     5D AD 52 FC | 	wrword	local04, local11
24268                 | ' word[base2+32]:=pan
24268     54 BB 02 F6 | 	mov	local11, local02
2426c     20 BA 06 F1 | 	add	local11, #32
24270     5D B5 52 FC | 	wrword	local08, local11
24274                 | ' long[base2+36]:=((frequency*109)/1000)*3574 ' (frequency*389566)/1000  freq*3574*109/1000
24274     18 BA 62 FD | 	getqx	local11
24278     5D B9 52 F6 | 	abs	local10, local11 wc
2427c     01 00 00 FF 
24280     E8 B9 16 FD | 	qdiv	local10, ##1000
24284     18 B8 62 FD | 	getqx	local10
24288     5C B9 82 F6 | 	negc	local10, local10
2428c     06 00 00 FF 
24290     F6 B9 06 FD | 	qmul	local10, ##3574
24294     54 B9 02 F6 | 	mov	local10, local02
24298     24 B8 06 F1 | 	add	local10, #36
2429c                 | ' long[base2+44]:=envelope
2429c     54 BB 02 F6 | 	mov	local11, local02
242a0     2C BA 06 F1 | 	add	local11, #44
242a4                 | ' long[base2+48]:=length
242a4                 | ' long[base2+52]:=sustain
242a4                 | ' waitms(delay)
242a4     55 93 02 F6 | 	mov	arg01, local03
242a8     18 A2 62 FD | 	getqx	arg09
242ac     5C A3 62 FC | 	wrlong	arg09, local10
242b0     5D B1 62 FC | 	wrlong	local06, local11
242b4     54 BB 02 F6 | 	mov	local11, local02
242b8     30 BA 06 F1 | 	add	local11, #48
242bc     5D B3 62 FC | 	wrlong	local07, local11
242c0     34 A8 06 F1 | 	add	local02, #52
242c4     54 B7 62 FC | 	wrlong	local09, local02
242c8     B8 07 B0 FD | 	call	#__system___waitms
242cc     E7 F0 03 F6 | 	mov	ptra, fp
242d0     F2 00 A0 FD | 	call	#popregs_
242d4                 | _Audio2_004_spin2_play_ret
242d4     2D 00 64 FD | 	ret
242d8                 | 
242d8                 | ' 
242d8                 | ' pub changefreq(channel,freq) | base2
242d8                 | _Audio2_004_spin2_changefreq
242d8     6D 94 06 FD | 	qmul	arg02, #109
242dc                 | ' 
242dc                 | ' base2:=@channel0[0]+64*(channel and $F)
242dc     32 81 02 F6 | 	mov	_var01, objptr
242e0     0C 80 06 F1 | 	add	_var01, #12
242e4     00 82 06 F6 | 	mov	_var02, #0
242e8     00 92 0E F2 | 	cmp	arg01, #0 wz
242ec     01 82 66 56 |  if_ne	neg	_var02, #1
242f0     06 82 66 F0 | 	shl	_var02, #6
242f4     41 81 02 F1 | 	add	_var01, _var02
242f8                 | ' freqs[channel]:=freq 
242f8     02 92 66 F0 | 	shl	arg01, #2
242fc     32 83 02 F6 | 	mov	_var02, objptr
24300     02 00 00 FF 
24304     0C 82 06 F1 | 	add	_var02, ##1036
24308     41 93 02 F1 | 	add	arg01, _var02
2430c     49 95 62 FC | 	wrlong	arg02, arg01
24310                 | ' long[base2+36]:=((freq *109)/1000)*3574    
24310     18 82 62 FD | 	getqx	_var02
24314     41 83 52 F6 | 	abs	_var02, _var02 wc
24318     01 00 00 FF 
2431c     E8 83 16 FD | 	qdiv	_var02, ##1000
24320     18 82 62 FD | 	getqx	_var02
24324     41 83 82 F6 | 	negc	_var02, _var02
24328     06 00 00 FF 
2432c     F6 83 06 FD | 	qmul	_var02, ##3574
24330     24 80 06 F1 | 	add	_var01, #36
24334     18 82 62 FD | 	getqx	_var02
24338     40 83 62 FC | 	wrlong	_var02, _var01
2433c                 | _Audio2_004_spin2_changefreq_ret
2433c     2D 00 64 FD | 	ret
24340                 | 
24340                 | ' 
24340                 | ' pub changewav(channel,wav) | base2
24340                 | _Audio2_004_spin2_changewav
24340                 | ' 
24340                 | ' base2:=@channel0[0]+64*(channel and $F)
24340     32 81 02 F6 | 	mov	_var01, objptr
24344     0C 80 06 F1 | 	add	_var01, #12
24348     00 82 06 F6 | 	mov	_var02, #0
2434c     00 92 0E F2 | 	cmp	arg01, #0 wz
24350     01 82 66 56 |  if_ne	neg	_var02, #1
24354     06 82 66 F0 | 	shl	_var02, #6
24358     41 81 02 F1 | 	add	_var01, _var02
2435c                 | ' waveforms[channel]:=wav
2435c     02 92 66 F0 | 	shl	arg01, #2
24360     32 83 02 F6 | 	mov	_var02, objptr
24364     02 00 00 FF 
24368     8C 82 06 F1 | 	add	_var02, ##1164
2436c     41 93 02 F1 | 	add	arg01, _var02
24370     49 95 62 FC | 	wrlong	arg02, arg01
24374                 | ' long[base2+20]:=wav+$80000000 
24374     00 00 40 FF 
24378     00 94 06 F1 | 	add	arg02, ##-2147483648
2437c     14 80 06 F1 | 	add	_var01, #20
24380     40 95 62 FC | 	wrlong	arg02, _var01
24384                 | _Audio2_004_spin2_changewav_ret
24384     2D 00 64 FD | 	ret
24388                 | 
24388                 | ' 
24388                 | ' 
24388                 | ' pub play16(channel,sample,splfreq,vol,len,loop,delay) | base2
24388                 | _Audio2_004_spin2_play16
24388     F8 02 00 FF 
2438c     BE 97 06 FD | 	qmul	arg03, ##389566
24390                 | ' 
24390                 | ' base2:=@channel0[0]+64*channel
24390     32 97 02 F6 | 	mov	arg03, objptr
24394     0C 96 06 F1 | 	add	arg03, #12
24398     06 92 66 F0 | 	shl	arg01, #6
2439c     49 97 02 F1 | 	add	arg03, arg01
243a0                 | ' long[base2+20]:=sample+$C0000000 
243a0     00 00 60 FF 
243a4     00 94 06 F1 | 	add	arg02, ##-1073741824
243a8     4B 93 02 F6 | 	mov	arg01, arg03
243ac     14 92 06 F1 | 	add	arg01, #20
243b0     49 95 62 FC | 	wrlong	arg02, arg01
243b4                 | ' long[base2+28]:= len
243b4     4B 95 02 F6 | 	mov	arg02, arg03
243b8     1C 94 06 F1 | 	add	arg02, #28
243bc     4A 9B 62 FC | 	wrlong	arg05, arg02
243c0                 | ' long[base2+24]:= loop
243c0     4B 9B 02 F6 | 	mov	arg05, arg03
243c4     18 9A 06 F1 | 	add	arg05, #24
243c8     4D 9D 62 FC | 	wrlong	arg06, arg05
243cc                 | ' word[base2+32]:= vol
243cc     4B 9D 02 F6 | 	mov	arg06, arg03
243d0     20 9C 06 F1 | 	add	arg06, #32
243d4     4E 99 52 FC | 	wrword	arg04, arg06
243d8                 | ' long[base2+36]:= splfreq*389566
243d8     24 96 06 F1 | 	add	arg03, #36
243dc                 | ' waitms(delay)
243dc     4F 93 02 F6 | 	mov	arg01, arg07
243e0     18 9E 62 FD | 	getqx	arg07
243e4     4B 9F 62 FC | 	wrlong	arg07, arg03
243e8     98 06 B0 FD | 	call	#__system___waitms
243ec                 | _Audio2_004_spin2_play16_ret
243ec     2D 00 64 FD | 	ret
243f0                 | 
243f0                 | ' 
243f0                 | ' pub beep(channel,sample,splfreq,vol,len,loop,delay) | base2
243f0                 | _Audio2_004_spin2_beep
243f0     02 00 00 FF 
243f4     F2 97 06 FD | 	qmul	arg03, ##1522
243f8                 | ' 
243f8                 | ' base2:=@channel0[0]+64*channel
243f8     32 97 02 F6 | 	mov	arg03, objptr
243fc     0C 96 06 F1 | 	add	arg03, #12
24400     06 92 66 F0 | 	shl	arg01, #6
24404     49 97 02 F1 | 	add	arg03, arg01
24408                 | ' long[base2+20]:=sample+$C0000000 
24408     00 00 60 FF 
2440c     00 94 06 F1 | 	add	arg02, ##-1073741824
24410     4B 93 02 F6 | 	mov	arg01, arg03
24414     14 92 06 F1 | 	add	arg01, #20
24418     49 95 62 FC | 	wrlong	arg02, arg01
2441c                 | ' long[base2+28]:= len
2441c     4B 95 02 F6 | 	mov	arg02, arg03
24420     1C 94 06 F1 | 	add	arg02, #28
24424     4A 9B 62 FC | 	wrlong	arg05, arg02
24428                 | ' long[base2+24]:= loop
24428     4B 9B 02 F6 | 	mov	arg05, arg03
2442c     18 9A 06 F1 | 	add	arg05, #24
24430     4D 9D 62 FC | 	wrlong	arg06, arg05
24434                 | ' word[base2+32]:= vol
24434     4B 9D 02 F6 | 	mov	arg06, arg03
24438     20 9C 06 F1 | 	add	arg06, #32
2443c     4E 99 52 FC | 	wrword	arg04, arg06
24440                 | ' long[base2+36]:= splfreq*1522
24440     24 96 06 F1 | 	add	arg03, #36
24444                 | ' waitms(delay)
24444     4F 93 02 F6 | 	mov	arg01, arg07
24448     18 9E 62 FD | 	getqx	arg07
2444c     4B 9F 62 FC | 	wrlong	arg07, arg03
24450     30 06 B0 FD | 	call	#__system___waitms
24454                 | _Audio2_004_spin2_beep_ret
24454     2D 00 64 FD | 	ret
24458                 | hubexit
24458     C1 00 80 FD | 	jmp	#cogexit
2445c                 | 
2445c                 | __system___setbaud
2445c     14 0E 07 FB | 	rdlong	muldiva_, #20
24460     49 11 03 F6 | 	mov	muldivb_, arg01
24464     FA 00 A0 FD | 	call	#divide_
24468     D7 06 48 FB | 	callpa	#(@LR__3061-@LR__3060)>>2,fcache_load_ptr_
2446c                 | LR__3060
2446c     3E 7A 9E FA | 	rdpin	result1, #62 wc
24470     3E 7D A2 F1 | 	subx	result2, result2
24474     F4 FF 9F CD |  if_b	jmp	#LR__3060
24478                 | LR__3061
24478     40 7C 64 FD | 	dirl	#62
2447c     40 7E 64 FD | 	dirl	#63
24480     34 11 63 FC | 	wrlong	muldivb_, ptr___system__dat__
24484     10 10 67 F0 | 	shl	muldivb_, #16
24488     07 94 06 F6 | 	mov	arg02, #7
2448c     88 95 02 F1 | 	add	arg02, muldivb_
24490     3E F8 0C FC | 	wrpin	#124, #62
24494     3E 94 16 FC | 	wxpin	arg02, #62
24498     3F 7C 0C FC | 	wrpin	#62, #63
2449c     14 94 06 F1 | 	add	arg02, #20
244a0     3F 94 16 FC | 	wxpin	arg02, #63
244a4     41 7C 64 FD | 	dirh	#62
244a8     41 7E 64 FD | 	dirh	#63
244ac                 | __system___setbaud_ret
244ac     2D 00 64 FD | 	ret
244b0                 | 
244b0                 | __system___txraw
244b0     01 CA 05 F6 | 	mov	COUNT_, #1
244b4     E8 00 A0 FD | 	call	#pushregs_
244b8     49 A7 02 F6 | 	mov	local01, arg01
244bc     D7 06 48 FB | 	callpa	#(@LR__3071-@LR__3070)>>2,fcache_load_ptr_
244c0                 | LR__3070
244c0     3E 7A 9E FA | 	rdpin	result1, #62 wc
244c4     3E 7D A2 F1 | 	subx	result2, result2
244c8     F4 FF 9F CD |  if_b	jmp	#LR__3070
244cc                 | LR__3071
244cc     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
244d0     42 0F 00 AF 
244d4     80 92 06 A6 |  if_e	mov	arg01, ##2000000
244d8     80 FF BF AD |  if_e	call	#__system___setbaud
244dc     58 7C 64 FD | 	drvl	#62
244e0     3E A6 26 FC | 	wypin	local01, #62
244e4     01 7A 06 F6 | 	mov	result1, #1
244e8     E7 F0 03 F6 | 	mov	ptra, fp
244ec     F2 00 A0 FD | 	call	#popregs_
244f0                 | __system___txraw_ret
244f0     2D 00 64 FD | 	ret
244f4                 | 
244f4                 | __system___rxraw
244f4     0D CA 05 F6 | 	mov	COUNT_, #13
244f8     E8 00 A0 FD | 	call	#pushregs_
244fc     49 A7 02 F6 | 	mov	local01, arg01
24500     34 A9 0A FB | 	rdlong	local02, ptr___system__dat__ wz
24504     42 0F 00 AF 
24508     80 92 06 A6 |  if_e	mov	arg01, ##2000000
2450c     4C FF BF AD |  if_e	call	#__system___setbaud
24510     00 A6 0E F2 | 	cmp	local01, #0 wz
24514     20 00 90 AD |  if_e	jmp	#LR__3080
24518     14 AA 06 FB | 	rdlong	local03, #20
2451c     0A AA 46 F0 | 	shr	local03, #10
24520     55 A7 02 FD | 	qmul	local01, local03
24524     1A 7A 62 FD | 	getct	result1
24528     18 AC 62 FD | 	getqx	local04
2452c     56 7B 02 F1 | 	add	result1, local04
24530     3D AF 02 F6 | 	mov	local05, result1
24534     04 00 90 FD | 	jmp	#LR__3081
24538                 | LR__3080
24538     00 AE 06 F6 | 	mov	local05, #0
2453c                 | LR__3081
2453c     01 B0 66 F6 | 	neg	local06, #1
24540     3F B2 06 F6 | 	mov	local07, #63
24544     00 B4 06 F6 | 	mov	local08, #0
24548     04 68 06 F1 | 	add	ptr___system__dat__, #4
2454c     34 B7 02 FB | 	rdlong	local09, ptr___system__dat__
24550     04 68 86 F1 | 	sub	ptr___system__dat__, #4
24554                 | LR__3082
24554     08 B6 16 F4 | 	testb	local09, #8 wc
24558     09 B6 76 F4 | 	testbn	local09, #9 andc
2455c     0A B6 46 F0 | 	shr	local09, #10
24560     01 B4 06 C6 |  if_b	mov	local08, #1
24564     40 7E 6C 3D |  if_ae	testp	#63 wz
24568     01 B4 06 26 |  if_nc_and_z	mov	local08, #1
2456c     3F B6 8E 2A |  if_nc_and_z	rdpin	local09, #63
24570     04 B6 46 20 |  if_nc_and_z	shr	local09, #4
24574                 | LR__3083
24574     00 A8 06 F6 | 	mov	local02, #0
24578     00 B4 0E F2 | 	cmp	local08, #0 wz
2457c     01 A8 66 56 |  if_ne	neg	local02, #1
24580     00 B8 06 F6 | 	mov	local10, #0
24584     00 AA 06 F6 | 	mov	local03, #0
24588     00 A6 0E F2 | 	cmp	local01, #0 wz
2458c     01 AA 66 56 |  if_ne	neg	local03, #1
24590     00 AC 06 F6 | 	mov	local04, #0
24594     00 BA 06 F6 | 	mov	local11, #0
24598     57 BD 02 F6 | 	mov	local12, local05
2459c     1A 7A 62 FD | 	getct	result1
245a0     3D BF 02 F6 | 	mov	local13, result1
245a4     5F BD 82 F1 | 	sub	local12, local13
245a8     00 BC 56 F2 | 	cmps	local12, #0 wc
245ac     00 BA 26 C6 |  if_b	not	local11, #0
245b0     00 BA 0E F2 | 	cmp	local11, #0 wz
245b4     00 AC 26 56 |  if_ne	not	local04, #0
245b8     56 AB CA F7 | 	test	local03, local04 wz
245bc     00 B8 26 56 |  if_ne	not	local10, #0
245c0     5C A9 4A F5 | 	or	local02, local10 wz
245c4     8C FF 9F AD |  if_e	jmp	#LR__3082
245c8     00 B4 0E F2 | 	cmp	local08, #0 wz
245cc     5B B1 02 56 |  if_ne	mov	local06, local09
245d0     58 B1 E2 58 |  if_ne	getbyte	local06, local06, #0
245d4     04 68 06 F1 | 	add	ptr___system__dat__, #4
245d8     34 B7 62 FC | 	wrlong	local09, ptr___system__dat__
245dc     04 68 86 F1 | 	sub	ptr___system__dat__, #4
245e0     58 7B 02 F6 | 	mov	result1, local06
245e4     E7 F0 03 F6 | 	mov	ptra, fp
245e8     F2 00 A0 FD | 	call	#popregs_
245ec                 | __system___rxraw_ret
245ec     2D 00 64 FD | 	ret
245f0                 | 
245f0                 | __system___getus
245f0     1A 7C 72 FD | 	getct	result2 wc
245f4     1A 80 62 FD | 	getct	_var01
245f8     10 68 06 F1 | 	add	ptr___system__dat__, #16
245fc     34 83 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
24600     10 68 86 F1 | 	sub	ptr___system__dat__, #16
24604     20 00 90 5D |  if_ne	jmp	#LR__3090
24608     14 82 06 FB | 	rdlong	_var02, #20
2460c     A1 07 00 FF 
24610     40 82 16 FD | 	qdiv	_var02, ##1000000
24614     10 68 06 F1 | 	add	ptr___system__dat__, #16
24618     18 7A 62 FD | 	getqx	result1
2461c     3D 83 02 F6 | 	mov	_var02, result1
24620     34 7B 62 FC | 	wrlong	result1, ptr___system__dat__
24624     10 68 86 F1 | 	sub	ptr___system__dat__, #16
24628                 | LR__3090
24628     41 7D 12 FD | 	qdiv	result2, _var02
2462c     19 7C 62 FD | 	getqy	result2
24630     28 7C 62 FD | 	setq	result2
24634     41 81 12 FD | 	qdiv	_var01, _var02
24638     18 7A 62 FD | 	getqx	result1
2463c                 | __system___getus_ret
2463c     2D 00 64 FD | 	ret
24640                 | 
24640                 | __system____builtin_memmove
24640     49 81 02 F6 | 	mov	_var01, arg01
24644     4A 93 52 F2 | 	cmps	arg01, arg02 wc
24648     10 00 90 CD |  if_b	jmp	#LR__3100
2464c     4A 83 02 F6 | 	mov	_var02, arg02
24650     4B 83 02 F1 | 	add	_var02, arg03
24654     41 93 52 F2 | 	cmps	arg01, _var02 wc
24658     48 00 90 CD |  if_b	jmp	#LR__3106
2465c                 | LR__3100
2465c     4B 85 02 F6 | 	mov	_var03, arg03
24660     02 84 4E F0 | 	shr	_var03, #2 wz
24664     18 00 90 AD |  if_e	jmp	#LR__3105
24668     D7 0A 48 FB | 	callpa	#(@LR__3103-@LR__3101)>>2,fcache_load_ptr_
2466c                 | LR__3101
2466c     42 09 D8 FC | 	rep	@LR__3104, _var03
24670                 | LR__3102
24670     4A 85 02 FB | 	rdlong	_var03, arg02
24674     49 85 62 FC | 	wrlong	_var03, arg01
24678     04 92 06 F1 | 	add	arg01, #4
2467c     04 94 06 F1 | 	add	arg02, #4
24680                 | LR__3103
24680                 | LR__3104
24680                 | LR__3105
24680     02 96 CE F7 | 	test	arg03, #2 wz
24684     4A 83 E2 5A |  if_ne	rdword	_var02, arg02
24688     49 83 52 5C |  if_ne	wrword	_var02, arg01
2468c     02 92 06 51 |  if_ne	add	arg01, #2
24690     02 94 06 51 |  if_ne	add	arg02, #2
24694     01 96 CE F7 | 	test	arg03, #1 wz
24698     4A 83 C2 5A |  if_ne	rdbyte	_var02, arg02
2469c     49 83 42 5C |  if_ne	wrbyte	_var02, arg01
246a0     28 00 90 FD | 	jmp	#LR__3112
246a4                 | LR__3106
246a4     4B 93 02 F1 | 	add	arg01, arg03
246a8     4B 95 02 F1 | 	add	arg02, arg03
246ac     4B 87 0A F6 | 	mov	_var04, arg03 wz
246b0     18 00 90 AD |  if_e	jmp	#LR__3111
246b4     D7 0A 48 FB | 	callpa	#(@LR__3109-@LR__3107)>>2,fcache_load_ptr_
246b8                 | LR__3107
246b8     43 09 D8 FC | 	rep	@LR__3110, _var04
246bc                 | LR__3108
246bc     01 92 86 F1 | 	sub	arg01, #1
246c0     01 94 86 F1 | 	sub	arg02, #1
246c4     4A 83 C2 FA | 	rdbyte	_var02, arg02
246c8     49 83 42 FC | 	wrbyte	_var02, arg01
246cc                 | LR__3109
246cc                 | LR__3110
246cc                 | LR__3111
246cc                 | LR__3112
246cc     40 7B 02 F6 | 	mov	result1, _var01
246d0                 | __system____builtin_memmove_ret
246d0     2D 00 64 FD | 	ret
246d4                 | 
246d4                 | __system__longmove
246d4     49 81 02 F6 | 	mov	_var01, arg01
246d8     4A 93 52 F2 | 	cmps	arg01, arg02 wc
246dc     24 00 90 3D |  if_ae	jmp	#LR__3124
246e0     4B 83 0A F6 | 	mov	_var02, arg03 wz
246e4     54 00 90 AD |  if_e	jmp	#LR__3130
246e8     D7 0A 48 FB | 	callpa	#(@LR__3122-@LR__3120)>>2,fcache_load_ptr_
246ec                 | LR__3120
246ec     41 09 D8 FC | 	rep	@LR__3123, _var02
246f0                 | LR__3121
246f0     4A 83 02 FB | 	rdlong	_var02, arg02
246f4     49 83 62 FC | 	wrlong	_var02, arg01
246f8     04 92 06 F1 | 	add	arg01, #4
246fc     04 94 06 F1 | 	add	arg02, #4
24700                 | LR__3122
24700                 | LR__3123
24700     38 00 90 FD | 	jmp	#LR__3130
24704                 | LR__3124
24704     4B 83 02 F6 | 	mov	_var02, arg03
24708     02 82 66 F0 | 	shl	_var02, #2
2470c     41 93 02 F1 | 	add	arg01, _var02
24710     4B 85 02 F6 | 	mov	_var03, arg03
24714     02 84 66 F0 | 	shl	_var03, #2
24718     42 95 02 F1 | 	add	arg02, _var03
2471c     4B 87 0A F6 | 	mov	_var04, arg03 wz
24720     18 00 90 AD |  if_e	jmp	#LR__3129
24724     D7 0A 48 FB | 	callpa	#(@LR__3127-@LR__3125)>>2,fcache_load_ptr_
24728                 | LR__3125
24728     43 09 D8 FC | 	rep	@LR__3128, _var04
2472c                 | LR__3126
2472c     04 92 86 F1 | 	sub	arg01, #4
24730     04 94 86 F1 | 	sub	arg02, #4
24734     4A 87 02 FB | 	rdlong	_var04, arg02
24738     49 87 62 FC | 	wrlong	_var04, arg01
2473c                 | LR__3127
2473c                 | LR__3128
2473c                 | LR__3129
2473c                 | LR__3130
2473c     40 7B 02 F6 | 	mov	result1, _var01
24740                 | __system__longmove_ret
24740     2D 00 64 FD | 	ret
24744                 | 
24744                 | __system____builtin_strcpy
24744     49 81 02 F6 | 	mov	_var01, arg01
24748     D7 0A 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
2474c                 | LR__3140
2474c     4A 7B CA FA | 	rdbyte	result1, arg02 wz
24750     49 7B 42 FC | 	wrbyte	result1, arg01
24754     01 94 06 F1 | 	add	arg02, #1
24758     01 92 06 F1 | 	add	arg01, #1
2475c     EC FF 9F 5D |  if_ne	jmp	#LR__3140
24760                 | LR__3141
24760     40 7B 02 F6 | 	mov	result1, _var01
24764                 | __system____builtin_strcpy_ret
24764     2D 00 64 FD | 	ret
24768                 | 
24768                 | __system____topofstack
24768     00 CA 05 F6 | 	mov	COUNT_, #0
2476c     E8 00 A0 FD | 	call	#pushregs_
24770     08 F0 07 F1 | 	add	ptra, #8
24774     04 CE 05 F1 | 	add	fp, #4
24778     E7 92 62 FC | 	wrlong	arg01, fp
2477c     E7 7A 02 F6 | 	mov	result1, fp
24780     04 CE 85 F1 | 	sub	fp, #4
24784     E7 F0 03 F6 | 	mov	ptra, fp
24788     F2 00 A0 FD | 	call	#popregs_
2478c                 | __system____topofstack_ret
2478c     2D 00 64 FD | 	ret
24790                 | 
24790                 | __system___lockmem
24790     00 7A 06 F6 | 	mov	result1, #0
24794     01 7A 62 FD | 	cogid	result1
24798     00 7B 06 F1 | 	add	result1, #256
2479c                 | LR__3150
2479c     49 81 0A FB | 	rdlong	_var01, arg01 wz
247a0     49 7B 62 AC |  if_e	wrlong	result1, arg01
247a4     49 81 02 AB |  if_e	rdlong	_var01, arg01
247a8     49 81 02 AB |  if_e	rdlong	_var01, arg01
247ac     3D 81 0A F2 | 	cmp	_var01, result1 wz
247b0     E8 FF 9F 5D |  if_ne	jmp	#LR__3150
247b4                 | __system___lockmem_ret
247b4     2D 00 64 FD | 	ret
247b8                 | 
247b8                 | __system___string_cmp
247b8     D7 14 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
247bc                 | LR__3160
247bc     49 81 C2 FA | 	rdbyte	_var01, arg01
247c0     4A 83 C2 FA | 	rdbyte	_var02, arg02
247c4     40 85 02 F6 | 	mov	_var03, _var01
247c8     41 85 8A F1 | 	sub	_var03, _var02 wz
247cc     01 92 06 F1 | 	add	arg01, #1
247d0     01 94 06 F1 | 	add	arg02, #1
247d4     0C 00 90 5D |  if_ne	jmp	#LR__3162
247d8     00 80 0E F2 | 	cmp	_var01, #0 wz
247dc     00 82 0E 52 |  if_ne	cmp	_var02, #0 wz
247e0     D8 FF 9F 5D |  if_ne	jmp	#LR__3160
247e4                 | LR__3161
247e4                 | LR__3162
247e4     42 7B 02 F6 | 	mov	result1, _var03
247e8                 | __system___string_cmp_ret
247e8     2D 00 64 FD | 	ret
247ec                 | 
247ec                 | __system___string_concat
247ec     05 CA 05 F6 | 	mov	COUNT_, #5
247f0     E8 00 A0 FD | 	call	#pushregs_
247f4     49 A7 02 F6 | 	mov	local01, arg01
247f8     4A A9 02 F6 | 	mov	local02, arg02
247fc     53 93 02 F6 | 	mov	arg01, local01
24800     49 AB 02 F6 | 	mov	local03, arg01
24804     D7 06 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
24808                 | LR__3170
24808     55 7B CA FA | 	rdbyte	result1, local03 wz
2480c     01 AA 06 51 |  if_ne	add	local03, #1
24810     F4 FF 9F 5D |  if_ne	jmp	#LR__3170
24814                 | LR__3171
24814     49 AB 82 F1 | 	sub	local03, arg01
24818     55 AD 02 F6 | 	mov	local04, local03
2481c     54 93 02 F6 | 	mov	arg01, local02
24820     49 AB 02 F6 | 	mov	local03, arg01
24824     D7 06 48 FB | 	callpa	#(@LR__3173-@LR__3172)>>2,fcache_load_ptr_
24828                 | LR__3172
24828     55 7B CA FA | 	rdbyte	result1, local03 wz
2482c     01 AA 06 51 |  if_ne	add	local03, #1
24830     F4 FF 9F 5D |  if_ne	jmp	#LR__3172
24834                 | LR__3173
24834     49 AB 82 F1 | 	sub	local03, arg01
24838     56 93 02 F6 | 	mov	arg01, local04
2483c     55 93 02 F1 | 	add	arg01, local03
24840     01 92 06 F1 | 	add	arg01, #1
24844     50 39 B0 FD | 	call	#__system___gc_alloc_managed
24848     3D AF 0A F6 | 	mov	local05, result1 wz
2484c     28 00 90 AD |  if_e	jmp	#LR__3174
24850     57 93 02 F6 | 	mov	arg01, local05
24854     53 95 02 F6 | 	mov	arg02, local01
24858     56 97 02 F6 | 	mov	arg03, local04
2485c     E0 FD BF FD | 	call	#__system____builtin_memmove
24860     57 93 02 F6 | 	mov	arg01, local05
24864     56 93 02 F1 | 	add	arg01, local04
24868     01 AA 06 F1 | 	add	local03, #1
2486c     54 95 02 F6 | 	mov	arg02, local02
24870     55 97 02 F6 | 	mov	arg03, local03
24874     C8 FD BF FD | 	call	#__system____builtin_memmove
24878                 | LR__3174
24878     57 7B 02 F6 | 	mov	result1, local05
2487c     E7 F0 03 F6 | 	mov	ptra, fp
24880     F2 00 A0 FD | 	call	#popregs_
24884                 | __system___string_concat_ret
24884     2D 00 64 FD | 	ret
24888                 | 
24888                 | __system___tx
24888     02 CA 05 F6 | 	mov	COUNT_, #2
2488c     E8 00 A0 FD | 	call	#pushregs_
24890     49 A7 02 F6 | 	mov	local01, arg01
24894     0A A6 0E F2 | 	cmp	local01, #10 wz
24898     18 00 90 5D |  if_ne	jmp	#LR__3180
2489c     08 68 06 F1 | 	add	ptr___system__dat__, #8
248a0     34 A9 02 FB | 	rdlong	local02, ptr___system__dat__
248a4     08 68 86 F1 | 	sub	ptr___system__dat__, #8
248a8     02 A8 CE F7 | 	test	local02, #2 wz
248ac     0D 92 06 56 |  if_ne	mov	arg01, #13
248b0     FC FB BF 5D |  if_ne	call	#__system___txraw
248b4                 | LR__3180
248b4     53 93 02 F6 | 	mov	arg01, local01
248b8     F4 FB BF FD | 	call	#__system___txraw
248bc     E7 F0 03 F6 | 	mov	ptra, fp
248c0     F2 00 A0 FD | 	call	#popregs_
248c4                 | __system___tx_ret
248c4     2D 00 64 FD | 	ret
248c8                 | 
248c8                 | __system___rx
248c8     01 CA 05 F6 | 	mov	COUNT_, #1
248cc     E8 00 A0 FD | 	call	#pushregs_
248d0                 | LR__3190
248d0     00 92 06 F6 | 	mov	arg01, #0
248d4     1C FC BF FD | 	call	#__system___rxraw
248d8     3D A7 02 F6 | 	mov	local01, result1
248dc     FF FF 7F FF 
248e0     FF A7 0E F2 | 	cmp	local01, ##-1 wz
248e4     E8 FF 9F AD |  if_e	jmp	#LR__3190
248e8     0D A6 0E F2 | 	cmp	local01, #13 wz
248ec     14 00 90 5D |  if_ne	jmp	#LR__3191
248f0     08 68 06 F1 | 	add	ptr___system__dat__, #8
248f4     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
248f8     08 68 86 F1 | 	sub	ptr___system__dat__, #8
248fc     02 7A CE F7 | 	test	result1, #2 wz
24900     0A A6 06 56 |  if_ne	mov	local01, #10
24904                 | LR__3191
24904     08 68 06 F1 | 	add	ptr___system__dat__, #8
24908     34 93 02 FB | 	rdlong	arg01, ptr___system__dat__
2490c     08 68 86 F1 | 	sub	ptr___system__dat__, #8
24910     01 92 CE F7 | 	test	arg01, #1 wz
24914     1C 00 90 AD |  if_e	jmp	#LR__3194
24918     7F A6 0E F2 | 	cmp	local01, #127 wz
2491c     0C 00 90 5D |  if_ne	jmp	#LR__3192
24920     08 92 06 F6 | 	mov	arg01, #8
24924     60 FF BF FD | 	call	#__system___tx
24928     08 00 90 FD | 	jmp	#LR__3193
2492c                 | LR__3192
2492c     53 93 02 F6 | 	mov	arg01, local01
24930     54 FF BF FD | 	call	#__system___tx
24934                 | LR__3193
24934                 | LR__3194
24934     53 7B 02 F6 | 	mov	result1, local01
24938     E7 F0 03 F6 | 	mov	ptra, fp
2493c     F2 00 A0 FD | 	call	#popregs_
24940                 | __system___rx_ret
24940     2D 00 64 FD | 	ret
24944                 | 
24944                 | __system___pinwrite
24944     49 81 02 F6 | 	mov	_var01, arg01
24948     1F 80 06 F5 | 	and	_var01, #31
2494c     20 92 CE F7 | 	test	arg01, #32 wz
24950     06 92 46 F0 | 	shr	arg01, #6
24954     49 93 CA F9 | 	bmask	arg01, arg01
24958     40 93 62 F0 | 	shl	arg01, _var01
2495c     40 95 62 F0 | 	shl	arg02, _var01
24960     1C 00 90 AD |  if_e	jmp	#LR__3200
24964     49 F7 43 F5 | 	or	dirb, arg01
24968     FD 81 02 F6 | 	mov	_var01, outb
2496c     49 81 22 F5 | 	andn	_var01, arg01
24970     49 95 02 F5 | 	and	arg02, arg01
24974     4A 81 42 F5 | 	or	_var01, arg02
24978     40 FB 03 F6 | 	mov	outb, _var01
2497c     18 00 90 FD | 	jmp	#LR__3201
24980                 | LR__3200
24980     49 F5 43 F5 | 	or	dira, arg01
24984     FC 81 02 F6 | 	mov	_var01, outa
24988     49 81 22 F5 | 	andn	_var01, arg01
2498c     49 95 02 F5 | 	and	arg02, arg01
24990     4A 81 42 F5 | 	or	_var01, arg02
24994     40 F9 03 F6 | 	mov	outa, _var01
24998                 | LR__3201
24998                 | __system___pinwrite_ret
24998     2D 00 64 FD | 	ret
2499c                 | 
2499c                 | __system___basic_read_line
2499c     06 CA 05 F6 | 	mov	COUNT_, #6
249a0     E8 00 A0 FD | 	call	#pushregs_
249a4     49 A7 02 F6 | 	mov	local01, arg01
249a8     00 A8 06 F6 | 	mov	local02, #0
249ac     18 AA 06 F6 | 	mov	local03, #24
249b0     00 AC 06 F6 | 	mov	local04, #0
249b4     18 92 06 F6 | 	mov	arg01, #24
249b8     DC 37 B0 FD | 	call	#__system___gc_alloc_managed
249bc     3D AF 0A F6 | 	mov	local05, result1 wz
249c0     57 7B 02 A6 |  if_e	mov	result1, local05
249c4     B0 00 90 AD |  if_e	jmp	#LR__3213
249c8                 | LR__3210
249c8     53 93 02 F6 | 	mov	arg01, local01
249cc     78 0B B0 FD | 	call	#__system___basic_get_char
249d0     3D B1 02 F6 | 	mov	local06, result1
249d4     01 B0 56 F2 | 	cmps	local06, #1 wc
249d8     8C 00 90 CD |  if_b	jmp	#LR__3212
249dc     0A B0 0E F2 | 	cmp	local06, #10 wz
249e0     10 00 90 5D |  if_ne	jmp	#LR__3211
249e4     00 AC 0E F2 | 	cmp	local04, #0 wz
249e8     01 A8 56 52 |  if_ne	cmps	local02, #1 wc
249ec     01 A8 86 11 |  if_a	sub	local02, #1
249f0     74 00 90 FD | 	jmp	#LR__3212
249f4                 | LR__3211
249f4     0D B0 0E F2 | 	cmp	local06, #13 wz
249f8     01 AC 06 A6 |  if_e	mov	local04, #1
249fc     00 AC 06 56 |  if_ne	mov	local04, #0
24a00     08 B0 0E F2 | 	cmp	local06, #8 wz
24a04     7F B0 0E 52 |  if_ne	cmp	local06, #127 wz
24a08     01 A8 56 A2 |  if_e	cmps	local02, #1 wc
24a0c     01 A8 86 21 |  if_nc_and_z	sub	local02, #1
24a10     B4 FF 9F AD |  if_e	jmp	#LR__3210
24a14     57 97 02 F6 | 	mov	arg03, local05
24a18     54 97 02 F1 | 	add	arg03, local02
24a1c     4B B1 42 FC | 	wrbyte	local06, arg03
24a20     01 A8 06 F1 | 	add	local02, #1
24a24     55 A9 0A F2 | 	cmp	local02, local03 wz
24a28     9C FF 9F 5D |  if_ne	jmp	#LR__3210
24a2c     55 93 02 F6 | 	mov	arg01, local03
24a30     20 92 06 F1 | 	add	arg01, #32
24a34     60 37 B0 FD | 	call	#__system___gc_alloc_managed
24a38     3D B1 0A F6 | 	mov	local06, result1 wz
24a3c     58 7B 02 A6 |  if_e	mov	result1, local06
24a40     34 00 90 AD |  if_e	jmp	#LR__3213
24a44     58 93 02 F6 | 	mov	arg01, local06
24a48     57 95 02 F6 | 	mov	arg02, local05
24a4c     55 97 02 F6 | 	mov	arg03, local03
24a50     EC FB BF FD | 	call	#__system____builtin_memmove
24a54     20 AA 06 F1 | 	add	local03, #32
24a58     57 93 02 F6 | 	mov	arg01, local05
24a5c     6C 38 B0 FD | 	call	#__system___gc_free
24a60     58 AF 02 F6 | 	mov	local05, local06
24a64     60 FF 9F FD | 	jmp	#LR__3210
24a68                 | LR__3212
24a68     57 B1 02 F6 | 	mov	local06, local05
24a6c     54 B1 02 F1 | 	add	local06, local02
24a70     58 01 48 FC | 	wrbyte	#0, local06
24a74     57 7B 02 F6 | 	mov	result1, local05
24a78                 | LR__3213
24a78     E7 F0 03 F6 | 	mov	ptra, fp
24a7c     F2 00 A0 FD | 	call	#popregs_
24a80                 | __system___basic_read_line_ret
24a80     2D 00 64 FD | 	ret
24a84                 | 
24a84                 | __system___waitms
24a84     49 81 02 F6 | 	mov	_var01, arg01
24a88     1A 82 62 FD | 	getct	_var02
24a8c     14 84 06 FB | 	rdlong	_var03, #20
24a90     D7 14 48 FB | 	callpa	#(@LR__3221-@LR__3220)>>2,fcache_load_ptr_
24a94                 | LR__3220
24a94     01 00 00 FF 
24a98     E8 81 56 F2 | 	cmps	_var01, ##1000 wc
24a9c     1C 00 90 CD |  if_b	jmp	#LR__3222
24aa0     42 83 02 F1 | 	add	_var02, _var03
24aa4     41 93 02 F6 | 	mov	arg01, _var02
24aa8     00 92 66 FA | 	addct1	arg01, #0
24aac     24 22 60 FD | 	waitct1
24ab0     01 00 00 FF 
24ab4     E8 81 86 F1 | 	sub	_var01, ##1000
24ab8     D8 FF 9F FD | 	jmp	#LR__3220
24abc                 | LR__3221
24abc                 | LR__3222
24abc     01 80 56 F2 | 	cmps	_var01, #1 wc
24ac0     28 00 90 CD |  if_b	jmp	#LR__3223
24ac4     42 81 02 FD | 	qmul	_var01, _var03
24ac8     01 00 00 FF 
24acc     E8 97 06 F6 | 	mov	arg03, ##1000
24ad0     19 7A 62 FD | 	getqy	result1
24ad4     18 92 62 FD | 	getqx	arg01
24ad8     28 7A 62 FD | 	setq	result1
24adc     4B 93 12 FD | 	qdiv	arg01, arg03
24ae0     18 92 62 FD | 	getqx	arg01
24ae4     41 93 62 FA | 	addct1	arg01, _var02
24ae8     24 22 60 FD | 	waitct1
24aec                 | LR__3223
24aec                 | __system___waitms_ret
24aec     2D 00 64 FD | 	ret
24af0                 | 
24af0                 | __system___waitus
24af0     49 81 02 F6 | 	mov	_var01, arg01
24af4     1A 82 62 FD | 	getct	_var02
24af8     14 84 06 FB | 	rdlong	_var03, #20
24afc     D7 14 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
24b00                 | LR__3230
24b00     A1 07 00 FF 
24b04     40 80 56 F2 | 	cmps	_var01, ##1000000 wc
24b08     1C 00 90 CD |  if_b	jmp	#LR__3232
24b0c     42 83 02 F1 | 	add	_var02, _var03
24b10     41 93 02 F6 | 	mov	arg01, _var02
24b14     00 92 66 FA | 	addct1	arg01, #0
24b18     24 22 60 FD | 	waitct1
24b1c     A1 07 00 FF 
24b20     40 80 86 F1 | 	sub	_var01, ##1000000
24b24     D8 FF 9F FD | 	jmp	#LR__3230
24b28                 | LR__3231
24b28                 | LR__3232
24b28     01 80 56 F2 | 	cmps	_var01, #1 wc
24b2c     28 00 90 CD |  if_b	jmp	#LR__3233
24b30     42 81 02 FD | 	qmul	_var01, _var03
24b34     A1 07 00 FF 
24b38     40 96 06 F6 | 	mov	arg03, ##1000000
24b3c     19 7A 62 FD | 	getqy	result1
24b40     18 92 62 FD | 	getqx	arg01
24b44     28 7A 62 FD | 	setq	result1
24b48     4B 93 12 FD | 	qdiv	arg01, arg03
24b4c     18 7A 62 FD | 	getqx	result1
24b50     3D 83 62 FA | 	addct1	_var02, result1
24b54     24 22 60 FD | 	waitct1
24b58                 | LR__3233
24b58                 | __system___waitus_ret
24b58     2D 00 64 FD | 	ret
24b5c                 | 
24b5c                 | __system___mount
24b5c     09 CA 05 F6 | 	mov	COUNT_, #9
24b60     E8 00 A0 FD | 	call	#pushregs_
24b64     49 A7 02 F6 | 	mov	local01, arg01
24b68     4A A9 0A F6 | 	mov	local02, arg02 wz
24b6c     01 AA 66 F6 | 	neg	local03, #1
24b70     01 7A 66 A6 |  if_e	neg	result1, #1
24b74     9C 02 90 AD |  if_e	jmp	#LR__3255
24b78     53 7B C2 FA | 	rdbyte	result1, local01
24b7c     2F 7A 0E F2 | 	cmp	result1, #47 wz
24b80     28 00 90 5D |  if_ne	jmp	#LR__3242
24b84     53 93 02 F6 | 	mov	arg01, local01
24b88     49 AD 02 F6 | 	mov	local04, arg01
24b8c     D7 06 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
24b90                 | LR__3240
24b90     56 7B CA FA | 	rdbyte	result1, local04 wz
24b94     01 AC 06 51 |  if_ne	add	local04, #1
24b98     F4 FF 9F 5D |  if_ne	jmp	#LR__3240
24b9c                 | LR__3241
24b9c     49 AD 82 F1 | 	sub	local04, arg01
24ba0     56 7B 02 F6 | 	mov	result1, local04
24ba4     10 7A 56 F2 | 	cmps	result1, #16 wc
24ba8     14 00 90 CD |  if_b	jmp	#LR__3243
24bac                 | LR__3242
24bac     20 68 06 F1 | 	add	ptr___system__dat__, #32
24bb0     34 15 68 FC | 	wrlong	#10, ptr___system__dat__
24bb4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
24bb8     01 7A 66 F6 | 	neg	result1, #1
24bbc     54 02 90 FD | 	jmp	#LR__3255
24bc0                 | LR__3243
24bc0     00 AE 06 F6 | 	mov	local05, #0
24bc4                 | LR__3244
24bc4     04 AE 56 F2 | 	cmps	local05, #4 wc
24bc8     B4 00 90 3D |  if_ae	jmp	#LR__3249
24bcc     57 93 02 F6 | 	mov	arg01, local05
24bd0     02 92 66 F0 | 	shl	arg01, #2
24bd4     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
24bd8     64 7A 06 F1 | 	add	result1, #100
24bdc     3D 93 02 F1 | 	add	arg01, result1
24be0     49 7B 0A FB | 	rdlong	result1, arg01 wz
24be4     00 AA 56 A2 |  if_e	cmps	local03, #0 wc
24be8     57 AB 02 86 |  if_c_and_z	mov	local03, local05
24bec     88 00 90 8D |  if_c_and_z	jmp	#LR__3248
24bf0     57 93 02 F6 | 	mov	arg01, local05
24bf4     02 92 66 F0 | 	shl	arg01, #2
24bf8     34 AD 02 F6 | 	mov	local04, ptr___system__dat__
24bfc     64 AC 06 F1 | 	add	local04, #100
24c00     56 93 02 F1 | 	add	arg01, local04
24c04     49 93 02 FB | 	rdlong	arg01, arg01
24c08     49 AD 02 F6 | 	mov	local04, arg01
24c0c     D7 06 48 FB | 	callpa	#(@LR__3246-@LR__3245)>>2,fcache_load_ptr_
24c10                 | LR__3245
24c10     56 7B CA FA | 	rdbyte	result1, local04 wz
24c14     01 AC 06 51 |  if_ne	add	local04, #1
24c18     F4 FF 9F 5D |  if_ne	jmp	#LR__3245
24c1c                 | LR__3246
24c1c     49 AD 82 F1 | 	sub	local04, arg01
24c20     56 7B 02 F6 | 	mov	result1, local04
24c24     3D B1 02 F6 | 	mov	local06, result1
24c28     58 93 02 F6 | 	mov	arg01, local06
24c2c     53 93 02 F1 | 	add	arg01, local01
24c30     49 AD C2 FA | 	rdbyte	local04, arg01
24c34     2F AC 0E F2 | 	cmp	local04, #47 wz
24c38     58 B3 02 56 |  if_ne	mov	local07, local06
24c3c     53 B3 02 51 |  if_ne	add	local07, local01
24c40     59 93 CA 5A |  if_ne	rdbyte	arg01, local07 wz
24c44     30 00 90 5D |  if_ne	jmp	#LR__3247
24c48     57 AD 02 F6 | 	mov	local04, local05
24c4c     02 AC 66 F0 | 	shl	local04, #2
24c50     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
24c54     64 96 06 F1 | 	add	arg03, #100
24c58     4B AD 02 F1 | 	add	local04, arg03
24c5c     56 95 02 FB | 	rdlong	arg02, local04
24c60     53 93 02 F6 | 	mov	arg01, local01
24c64     58 97 02 F6 | 	mov	arg03, local06
24c68     24 4A B0 FD | 	call	#__system__strncmp
24c6c     00 7A 0E F2 | 	cmp	result1, #0 wz
24c70     57 AB 02 A6 |  if_e	mov	local03, local05
24c74     08 00 90 AD |  if_e	jmp	#LR__3249
24c78                 | LR__3247
24c78                 | LR__3248
24c78     01 AE 06 F1 | 	add	local05, #1
24c7c     44 FF 9F FD | 	jmp	#LR__3244
24c80                 | LR__3249
24c80     FF FF 7F FF 
24c84     FF AB 0E F2 | 	cmp	local03, ##-1 wz
24c88     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
24c8c     34 17 68 AC |  if_e	wrlong	#11, ptr___system__dat__
24c90     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
24c94     01 7A 66 A6 |  if_e	neg	result1, #1
24c98     78 01 90 AD |  if_e	jmp	#LR__3255
24c9c     55 AF 02 F6 | 	mov	local05, local03
24ca0     57 B3 02 F6 | 	mov	local07, local05
24ca4     02 B2 66 F0 | 	shl	local07, #2
24ca8     34 B1 02 F6 | 	mov	local06, ptr___system__dat__
24cac     74 B0 06 F1 | 	add	local06, #116
24cb0     58 B3 02 F1 | 	add	local07, local06
24cb4     59 B1 0A FB | 	rdlong	local06, local07 wz
24cb8     58 00 90 AD |  if_e	jmp	#LR__3250
24cbc     4C B0 06 F1 | 	add	local06, #76
24cc0     58 B3 0A FB | 	rdlong	local07, local06 wz
24cc4     4C B0 86 F1 | 	sub	local06, #76
24cc8     48 00 90 AD |  if_e	jmp	#LR__3250
24ccc     4C B0 06 F1 | 	add	local06, #76
24cd0     58 B3 02 FB | 	rdlong	local07, local06
24cd4     59 AD 02 F6 | 	mov	local04, local07
24cd8     13 B2 46 F7 | 	zerox	local07, #19
24cdc     14 AC 46 F0 | 	shr	local04, #20
24ce0     02 AC 66 F0 | 	shl	local04, #2
24ce4     2D AD 02 F1 | 	add	local04, __methods__
24ce8     56 AD 02 FB | 	rdlong	local04, local04
24cec     57 B1 02 F6 | 	mov	local06, local05
24cf0     02 B0 66 F0 | 	shl	local06, #2
24cf4     34 AB 02 F6 | 	mov	local03, ptr___system__dat__
24cf8     64 AA 06 F1 | 	add	local03, #100
24cfc     55 B1 02 F1 | 	add	local06, local03
24d00     58 93 02 FB | 	rdlong	arg01, local06
24d04     32 B1 02 F6 | 	mov	local06, objptr
24d08     59 65 02 F6 | 	mov	objptr, local07
24d0c     2D AC 62 FD | 	call	local04
24d10     58 65 02 F6 | 	mov	objptr, local06
24d14                 | LR__3250
24d14     57 B1 02 F6 | 	mov	local06, local05
24d18     02 B0 66 F0 | 	shl	local06, #2
24d1c     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
24d20     74 B2 06 F1 | 	add	local07, #116
24d24     59 B1 02 F1 | 	add	local06, local07
24d28     58 A9 62 FC | 	wrlong	local02, local06
24d2c     00 A8 0E F2 | 	cmp	local02, #0 wz
24d30     18 00 90 5D |  if_ne	jmp	#LR__3251
24d34     02 AE 66 F0 | 	shl	local05, #2
24d38     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
24d3c     64 B2 06 F1 | 	add	local07, #100
24d40     59 AF 02 F1 | 	add	local05, local07
24d44     57 01 68 FC | 	wrlong	#0, local05
24d48     C4 00 90 FD | 	jmp	#LR__3254
24d4c                 | LR__3251
24d4c     57 B5 02 F6 | 	mov	local08, local05
24d50     04 B4 66 F0 | 	shl	local08, #4
24d54     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
24d58     24 B2 06 F1 | 	add	local07, #36
24d5c     59 B5 02 F1 | 	add	local08, local07
24d60     5A 93 02 F6 | 	mov	arg01, local08
24d64     53 95 02 F6 | 	mov	arg02, local01
24d68     10 96 06 F6 | 	mov	arg03, #16
24d6c     64 48 B0 FD | 	call	#__system__strncpy
24d70     48 A8 06 F1 | 	add	local02, #72
24d74     54 B3 0A FB | 	rdlong	local07, local02 wz
24d78     48 A8 86 F1 | 	sub	local02, #72
24d7c     7C 00 90 AD |  if_e	jmp	#LR__3253
24d80     48 A8 06 F1 | 	add	local02, #72
24d84     54 B3 02 FB | 	rdlong	local07, local02
24d88     59 B7 02 F6 | 	mov	local09, local07
24d8c     13 B2 46 F7 | 	zerox	local07, #19
24d90     14 B6 46 F0 | 	shr	local09, #20
24d94     02 B6 66 F0 | 	shl	local09, #2
24d98     2D B7 02 F1 | 	add	local09, __methods__
24d9c     5B B7 02 FB | 	rdlong	local09, local09
24da0     5A 93 02 F6 | 	mov	arg01, local08
24da4     32 B1 02 F6 | 	mov	local06, objptr
24da8     59 65 02 F6 | 	mov	objptr, local07
24dac     2D B6 62 FD | 	call	local09
24db0     58 65 02 F6 | 	mov	objptr, local06
24db4     3D 93 0A F6 | 	mov	arg01, result1 wz
24db8     40 00 90 AD |  if_e	jmp	#LR__3252
24dbc     57 B5 02 F6 | 	mov	local08, local05
24dc0     02 B4 66 F0 | 	shl	local08, #2
24dc4     74 68 06 F1 | 	add	ptr___system__dat__, #116
24dc8     34 B5 02 F1 | 	add	local08, ptr___system__dat__
24dcc     5A 01 68 FC | 	wrlong	#0, local08
24dd0     02 AE 66 F0 | 	shl	local05, #2
24dd4     10 68 86 F1 | 	sub	ptr___system__dat__, #16
24dd8     34 AF 02 F1 | 	add	local05, ptr___system__dat__
24ddc     57 01 68 FC | 	wrlong	#0, local05
24de0     49 93 6A F6 | 	neg	arg01, arg01 wz
24de4     44 68 86 F1 | 	sub	ptr___system__dat__, #68
24de8     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
24dec     20 68 86 F1 | 	sub	ptr___system__dat__, #32
24df0     01 7A 66 56 |  if_ne	neg	result1, #1
24df4     00 7A 06 A6 |  if_e	mov	result1, #0
24df8     18 00 90 FD | 	jmp	#LR__3255
24dfc                 | LR__3252
24dfc                 | LR__3253
24dfc     02 AE 66 F0 | 	shl	local05, #2
24e00     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
24e04     64 B2 06 F1 | 	add	local07, #100
24e08     59 AF 02 F1 | 	add	local05, local07
24e0c     57 B5 62 FC | 	wrlong	local08, local05
24e10                 | LR__3254
24e10     00 7A 06 F6 | 	mov	result1, #0
24e14                 | LR__3255
24e14     E7 F0 03 F6 | 	mov	ptra, fp
24e18     F2 00 A0 FD | 	call	#popregs_
24e1c                 | __system___mount_ret
24e1c     2D 00 64 FD | 	ret
24e20                 | 
24e20                 | __system___chdir
24e20     02 CA 05 F6 | 	mov	COUNT_, #2
24e24     E8 00 A0 FD | 	call	#pushregs_
24e28     44 F0 07 F1 | 	add	ptra, #68
24e2c     49 A7 02 F6 | 	mov	local01, arg01
24e30     E7 94 02 F6 | 	mov	arg02, fp
24e34     08 94 06 F1 | 	add	arg02, #8
24e38     53 93 02 F6 | 	mov	arg01, local01
24e3c     D8 43 B0 FD | 	call	#__system__stat
24e40     00 7A 0E F2 | 	cmp	result1, #0 wz
24e44     88 00 90 5D |  if_ne	jmp	#LR__3262
24e48     10 CE 05 F1 | 	add	fp, #16
24e4c     E7 92 02 FB | 	rdlong	arg01, fp
24e50     10 CE 85 F1 | 	sub	fp, #16
24e54     78 00 00 FF 
24e58     00 92 06 F5 | 	and	arg01, ##61440
24e5c     08 00 00 FF 
24e60     00 92 0E F2 | 	cmp	arg01, ##4096 wz
24e64     20 68 06 51 |  if_ne	add	ptr___system__dat__, #32
24e68     34 1B 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
24e6c     20 68 86 51 |  if_ne	sub	ptr___system__dat__, #32
24e70     01 7A 66 56 |  if_ne	neg	result1, #1
24e74     58 00 90 5D |  if_ne	jmp	#LR__3262
24e78     53 97 C2 FA | 	rdbyte	arg03, local01
24e7c     2F 96 0E F2 | 	cmp	arg03, #47 wz
24e80     18 00 90 5D |  if_ne	jmp	#LR__3260
24e84     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
24e88     84 92 06 F1 | 	add	arg01, #132
24e8c     53 95 02 F6 | 	mov	arg02, local01
24e90     00 97 06 F6 | 	mov	arg03, #256
24e94     3C 47 B0 FD | 	call	#__system__strncpy
24e98     30 00 90 FD | 	jmp	#LR__3261
24e9c                 | LR__3260
24e9c     34 A9 02 F6 | 	mov	local02, ptr___system__dat__
24ea0     84 A9 06 F1 | 	add	local02, #388
24ea4     34 95 02 F6 | 	mov	arg02, ptr___system__dat__
24ea8     84 94 06 F1 | 	add	arg02, #132
24eac     54 93 02 F6 | 	mov	arg01, local02
24eb0     00 97 06 F6 | 	mov	arg03, #256
24eb4     1C 47 B0 FD | 	call	#__system__strncpy
24eb8     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
24ebc     84 96 06 F1 | 	add	arg03, #132
24ec0     54 93 02 F6 | 	mov	arg01, local02
24ec4     53 95 02 F6 | 	mov	arg02, local01
24ec8     10 00 B0 FD | 	call	#__system____getvfsforfile
24ecc                 | LR__3261
24ecc     00 7A 06 F6 | 	mov	result1, #0
24ed0                 | LR__3262
24ed0     E7 F0 03 F6 | 	mov	ptra, fp
24ed4     F2 00 A0 FD | 	call	#popregs_
24ed8                 | __system___chdir_ret
24ed8     2D 00 64 FD | 	ret
24edc                 | 
24edc                 | __system____getvfsforfile
24edc     0E CA 05 F6 | 	mov	COUNT_, #14
24ee0     E8 00 A0 FD | 	call	#pushregs_
24ee4     49 A7 02 F6 | 	mov	local01, arg01
24ee8     4A A9 02 F6 | 	mov	local02, arg02
24eec     4B AB 02 F6 | 	mov	local03, arg03
24ef0     D7 10 48 FB | 	callpa	#(@LR__3271-@LR__3270)>>2,fcache_load_ptr_
24ef4                 | LR__3270
24ef4     54 7B C2 FA | 	rdbyte	result1, local02
24ef8     2F 7A 0E F2 | 	cmp	result1, #47 wz
24efc     01 A8 06 A1 |  if_e	add	local02, #1
24f00     54 AD C2 AA |  if_e	rdbyte	local04, local02
24f04     01 A8 86 A1 |  if_e	sub	local02, #1
24f08     2F AC 0E A2 |  if_e	cmp	local04, #47 wz
24f0c     01 A8 06 A1 |  if_e	add	local02, #1
24f10     E0 FF 9F AD |  if_e	jmp	#LR__3270
24f14                 | LR__3271
24f14     54 AD C2 FA | 	rdbyte	local04, local02
24f18     2F AC 0E F2 | 	cmp	local04, #47 wz
24f1c     14 00 90 5D |  if_ne	jmp	#LR__3272
24f20     53 93 02 F6 | 	mov	arg01, local01
24f24     54 95 02 F6 | 	mov	arg02, local02
24f28     00 97 06 F6 | 	mov	arg03, #256
24f2c     A4 46 B0 FD | 	call	#__system__strncpy
24f30     78 00 90 FD | 	jmp	#LR__3274
24f34                 | LR__3272
24f34     34 95 02 F6 | 	mov	arg02, ptr___system__dat__
24f38     84 94 06 F1 | 	add	arg02, #132
24f3c     53 93 02 F6 | 	mov	arg01, local01
24f40     00 97 06 F6 | 	mov	arg03, #256
24f44     8C 46 B0 FD | 	call	#__system__strncpy
24f48     54 AD CA FA | 	rdbyte	local04, local02 wz
24f4c     5C 00 90 AD |  if_e	jmp	#LR__3273
24f50     54 AD C2 FA | 	rdbyte	local04, local02
24f54     2E AC 0E F2 | 	cmp	local04, #46 wz
24f58     01 A8 06 A1 |  if_e	add	local02, #1
24f5c     54 AF C2 AA |  if_e	rdbyte	local05, local02
24f60     01 A8 86 A1 |  if_e	sub	local02, #1
24f64     57 B1 02 A6 |  if_e	mov	local06, local05
24f68     07 B0 4E A7 |  if_e	zerox	local06, #7 wz
24f6c     3C 00 90 AD |  if_e	jmp	#LR__3273
24f70     53 AF C2 FA | 	rdbyte	local05, local01
24f74     2F AE 0E F2 | 	cmp	local05, #47 wz
24f78     01 A6 06 A1 |  if_e	add	local01, #1
24f7c     53 AD C2 AA |  if_e	rdbyte	local04, local01
24f80     01 A6 86 A1 |  if_e	sub	local01, #1
24f84     00 AC 4E A2 |  if_e	cmps	local04, #0 wz
24f88     91 01 00 5F 
24f8c     68 94 06 56 |  if_ne	mov	arg02, ##@LR__5450
24f90     53 93 02 56 |  if_ne	mov	arg01, local01
24f94     00 97 06 56 |  if_ne	mov	arg03, #256
24f98     90 46 B0 5D |  if_ne	call	#__system__strncat
24f9c     53 93 02 F6 | 	mov	arg01, local01
24fa0     54 95 02 F6 | 	mov	arg02, local02
24fa4     00 97 06 F6 | 	mov	arg03, #256
24fa8     80 46 B0 FD | 	call	#__system__strncat
24fac                 | LR__3273
24fac                 | LR__3274
24fac     53 93 02 F6 | 	mov	arg01, local01
24fb0     3C 48 B0 FD | 	call	#__system___normalizeName
24fb4     53 AD CA FA | 	rdbyte	local04, local01 wz
24fb8     1C 00 90 AD |  if_e	jmp	#LR__3275
24fbc     53 AD C2 FA | 	rdbyte	local04, local01
24fc0     2F AC 0E F2 | 	cmp	local04, #47 wz
24fc4     01 A6 06 A1 |  if_e	add	local01, #1
24fc8     53 B1 C2 AA |  if_e	rdbyte	local06, local01
24fcc     01 A6 86 A1 |  if_e	sub	local01, #1
24fd0     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
24fd4     10 00 90 5D |  if_ne	jmp	#LR__3276
24fd8                 | LR__3275
24fd8     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
24fdc     01 00 00 FF 
24fe0     84 7A 06 F1 | 	add	result1, ##644
24fe4     EC 01 90 FD | 	jmp	#LR__3290
24fe8                 | LR__3276
24fe8     00 B2 06 F6 | 	mov	local07, #0
24fec                 | LR__3277
24fec     04 B2 56 F2 | 	cmps	local07, #4 wc
24ff0     CC 01 90 3D |  if_ae	jmp	#LR__3289
24ff4     59 B1 02 F6 | 	mov	local06, local07
24ff8     02 B0 66 F0 | 	shl	local06, #2
24ffc     34 AD 02 F6 | 	mov	local04, ptr___system__dat__
25000     64 AC 06 F1 | 	add	local04, #100
25004     56 B1 02 F1 | 	add	local06, local04
25008     58 B1 0A FB | 	rdlong	local06, local06 wz
2500c     A8 01 90 AD |  if_e	jmp	#LR__3288
25010     59 AD 02 F6 | 	mov	local04, local07
25014     02 AC 66 F0 | 	shl	local04, #2
25018     34 B1 02 F6 | 	mov	local06, ptr___system__dat__
2501c     64 B0 06 F1 | 	add	local06, #100
25020     58 AD 02 F1 | 	add	local04, local06
25024     56 93 02 FB | 	rdlong	arg01, local04
25028     49 B5 02 F6 | 	mov	local08, arg01
2502c     D7 06 48 FB | 	callpa	#(@LR__3279-@LR__3278)>>2,fcache_load_ptr_
25030                 | LR__3278
25030     5A 7B CA FA | 	rdbyte	result1, local08 wz
25034     01 B4 06 51 |  if_ne	add	local08, #1
25038     F4 FF 9F 5D |  if_ne	jmp	#LR__3278
2503c                 | LR__3279
2503c     49 B5 82 F1 | 	sub	local08, arg01
25040     5A B7 02 F6 | 	mov	local09, local08
25044     5B AD 02 F6 | 	mov	local04, local09
25048     53 AD 02 F1 | 	add	local04, local01
2504c     56 B1 C2 FA | 	rdbyte	local06, local04
25050     2F B0 0E F2 | 	cmp	local06, #47 wz
25054     5B B9 02 56 |  if_ne	mov	local10, local09
25058     53 B9 02 51 |  if_ne	add	local10, local01
2505c     5C AF CA 5A |  if_ne	rdbyte	local05, local10 wz
25060     54 01 90 5D |  if_ne	jmp	#LR__3287
25064     59 AD 02 F6 | 	mov	local04, local07
25068     02 AC 66 F0 | 	shl	local04, #2
2506c     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
25070     64 96 06 F1 | 	add	arg03, #100
25074     4B AD 02 F1 | 	add	local04, arg03
25078     56 95 02 FB | 	rdlong	arg02, local04
2507c     5B 97 02 F6 | 	mov	arg03, local09
25080     53 93 02 F6 | 	mov	arg01, local01
25084     08 46 B0 FD | 	call	#__system__strncmp
25088     00 7A 4E F2 | 	cmps	result1, #0 wz
2508c     28 01 90 5D |  if_ne	jmp	#LR__3287
25090     59 BB 02 F6 | 	mov	local11, local07
25094     02 BA 66 F0 | 	shl	local11, #2
25098     34 AD 02 F6 | 	mov	local04, ptr___system__dat__
2509c     74 AC 06 F1 | 	add	local04, #116
250a0     56 BB 02 F1 | 	add	local11, local04
250a4     5D BD 02 FB | 	rdlong	local12, local11
250a8     D7 22 48 FB | 	callpa	#(@LR__3281-@LR__3280)>>2,fcache_load_ptr_
250ac                 | LR__3280
250ac     5B B1 02 F6 | 	mov	local06, local09
250b0     01 B0 06 F1 | 	add	local06, #1
250b4     53 B1 02 F1 | 	add	local06, local01
250b8     58 BB C2 FA | 	rdbyte	local11, local06
250bc     2E BA 0E F2 | 	cmp	local11, #46 wz
250c0     2C 00 90 5D |  if_ne	jmp	#LR__3282
250c4     5B BB 02 F6 | 	mov	local11, local09
250c8     02 BA 06 F1 | 	add	local11, #2
250cc     53 BB 02 F1 | 	add	local11, local01
250d0     5D B9 C2 FA | 	rdbyte	local10, local11
250d4     2F B8 0E F2 | 	cmp	local10, #47 wz
250d8     5B BF 02 56 |  if_ne	mov	local13, local09
250dc     02 BE 06 51 |  if_ne	add	local13, #2
250e0     53 BF 02 51 |  if_ne	add	local13, local01
250e4     5F C1 CA 5A |  if_ne	rdbyte	local14, local13 wz
250e8     01 B6 06 A1 |  if_e	add	local09, #1
250ec     BC FF 9F AD |  if_e	jmp	#LR__3280
250f0                 | LR__3281
250f0                 | LR__3282
250f0     00 AA 0E F2 | 	cmp	local03, #0 wz
250f4     55 93 02 56 |  if_ne	mov	arg01, local03
250f8     53 95 02 56 |  if_ne	mov	arg02, local01
250fc     00 97 06 56 |  if_ne	mov	arg03, #256
25100     D0 44 B0 5D |  if_ne	call	#__system__strncpy
25104     53 95 02 F6 | 	mov	arg02, local01
25108     5B 95 02 F1 | 	add	arg02, local09
2510c     01 94 06 F1 | 	add	arg02, #1
25110     53 93 02 F6 | 	mov	arg01, local01
25114     2C F6 BF FD | 	call	#__system____builtin_strcpy
25118     53 93 02 F6 | 	mov	arg01, local01
2511c     49 B5 02 F6 | 	mov	local08, arg01
25120     D7 06 48 FB | 	callpa	#(@LR__3284-@LR__3283)>>2,fcache_load_ptr_
25124                 | LR__3283
25124     5A 7B CA FA | 	rdbyte	result1, local08 wz
25128     01 B4 06 51 |  if_ne	add	local08, #1
2512c     F4 FF 9F 5D |  if_ne	jmp	#LR__3283
25130                 | LR__3284
25130     49 B5 82 F1 | 	sub	local08, arg01
25134     5A B7 02 F6 | 	mov	local09, local08
25138                 | LR__3285
25138     01 B6 56 F2 | 	cmps	local09, #1 wc
2513c     70 00 90 CD |  if_b	jmp	#LR__3286
25140     5B AD 02 F6 | 	mov	local04, local09
25144     53 AD 02 F1 | 	add	local04, local01
25148     56 BB C2 FA | 	rdbyte	local11, local04
2514c     2F BA 0E F2 | 	cmp	local11, #47 wz
25150     5B BB 02 A6 |  if_e	mov	local11, local09
25154     53 BB 02 A1 |  if_e	add	local11, local01
25158     5D 01 48 AC |  if_e	wrbyte	#0, local11
2515c     01 B6 86 A1 |  if_e	sub	local09, #1
25160     D4 FF 9F AD |  if_e	jmp	#LR__3285
25164     5B AD 02 F6 | 	mov	local04, local09
25168     53 AD 02 F1 | 	add	local04, local01
2516c     56 BB C2 FA | 	rdbyte	local11, local04
25170     2E BA 0E F2 | 	cmp	local11, #46 wz
25174     38 00 90 5D |  if_ne	jmp	#LR__3286
25178     02 B6 56 F2 | 	cmps	local09, #2 wc
2517c     30 00 90 CD |  if_b	jmp	#LR__3286
25180     5B C1 02 F6 | 	mov	local14, local09
25184     01 C0 86 F1 | 	sub	local14, #1
25188     53 C1 02 F1 | 	add	local14, local01
2518c     60 AF C2 FA | 	rdbyte	local05, local14
25190     2F AE 0E F2 | 	cmp	local05, #47 wz
25194     18 00 90 5D |  if_ne	jmp	#LR__3286
25198     5B AD 02 F6 | 	mov	local04, local09
2519c     01 AC 86 F1 | 	sub	local04, #1
251a0     53 AD 02 F1 | 	add	local04, local01
251a4     56 01 48 FC | 	wrbyte	#0, local04
251a8     02 B6 86 F1 | 	sub	local09, #2
251ac     88 FF 9F FD | 	jmp	#LR__3285
251b0                 | LR__3286
251b0     5E 7B 02 F6 | 	mov	result1, local12
251b4     1C 00 90 FD | 	jmp	#LR__3290
251b8                 | LR__3287
251b8                 | LR__3288
251b8     01 B2 06 F1 | 	add	local07, #1
251bc     2C FE 9F FD | 	jmp	#LR__3277
251c0                 | LR__3289
251c0     02 00 00 FF 
251c4     28 69 06 F1 | 	add	ptr___system__dat__, ##1320
251c8     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
251cc     02 00 00 FF 
251d0     28 69 86 F1 | 	sub	ptr___system__dat__, ##1320
251d4                 | LR__3290
251d4     E7 F0 03 F6 | 	mov	ptra, fp
251d8     F2 00 A0 FD | 	call	#popregs_
251dc                 | __system____getvfsforfile_ret
251dc     2D 00 64 FD | 	ret
251e0                 | 
251e0                 | __system___basic_open
251e0     05 CA 05 F6 | 	mov	COUNT_, #5
251e4     E8 00 A0 FD | 	call	#pushregs_
251e8     4A A7 02 F6 | 	mov	local01, arg02
251ec     4B A9 02 F6 | 	mov	local02, arg03
251f0     4C AB 02 F6 | 	mov	local03, arg04
251f4     00 AC 06 F6 | 	mov	local04, #0
251f8     B4 43 B0 FD | 	call	#__system____getftab
251fc     3D AF 0A F6 | 	mov	local05, result1 wz
25200     18 00 90 5D |  if_ne	jmp	#LR__3300
25204     2E 93 02 F6 | 	mov	arg01, abortchain
25208     0C 94 06 F6 | 	mov	arg02, #12
2520c     01 96 06 F6 | 	mov	arg03, #1
25210     1A 01 A0 FD | 	call	#__longjmp
25214     01 7A 66 F6 | 	neg	result1, #1
25218     18 01 90 FD | 	jmp	#LR__3309
2521c                 | LR__3300
2521c     08 AE 06 F1 | 	add	local05, #8
25220     57 7B 0A FB | 	rdlong	result1, local05 wz
25224     08 AE 86 F1 | 	sub	local05, #8
25228     57 93 02 56 |  if_ne	mov	arg01, local05
2522c     D8 3A B0 5D |  if_ne	call	#__system___closeraw
25230     00 A6 0E F2 | 	cmp	local01, #0 wz
25234     00 A8 0E A2 |  if_e	cmp	local02, #0 wz
25238     00 AA 0E A2 |  if_e	cmp	local03, #0 wz
2523c     3C 00 90 AD |  if_e	jmp	#LR__3302
25240     0C 92 06 F6 | 	mov	arg01, #12
25244     50 2F B0 FD | 	call	#__system___gc_alloc_managed
25248     3D AD 0A F6 | 	mov	local04, result1 wz
2524c     18 00 90 5D |  if_ne	jmp	#LR__3301
25250     2E 93 02 F6 | 	mov	arg01, abortchain
25254     07 94 06 F6 | 	mov	arg02, #7
25258     01 96 06 F6 | 	mov	arg03, #1
2525c     1A 01 A0 FD | 	call	#__longjmp
25260     01 7A 66 F6 | 	neg	result1, #1
25264     CC 00 90 FD | 	jmp	#LR__3309
25268                 | LR__3301
25268     56 01 68 FC | 	wrlong	#0, local04
2526c     04 AC 06 F1 | 	add	local04, #4
25270     56 01 68 FC | 	wrlong	#0, local04
25274     04 AC 86 F1 | 	sub	local04, #4
25278     57 AD 62 FC | 	wrlong	local04, local05
2527c                 | LR__3302
2527c     00 A6 0E F2 | 	cmp	local01, #0 wz
25280     20 00 90 AD |  if_e	jmp	#LR__3303
25284     56 A7 62 FC | 	wrlong	local01, local04
25288     56 7B 02 F6 | 	mov	result1, local04
2528c     00 70 05 FF 
25290     00 7A 46 F5 | 	or	result1, ##182452224
25294     1C AE 06 F1 | 	add	local05, #28
25298     57 7B 62 FC | 	wrlong	result1, local05
2529c     1C AE 86 F1 | 	sub	local05, #28
252a0     0C 00 90 FD | 	jmp	#LR__3304
252a4                 | LR__3303
252a4     1C AE 06 F1 | 	add	local05, #28
252a8     57 01 68 FC | 	wrlong	#0, local05
252ac     1C AE 86 F1 | 	sub	local05, #28
252b0                 | LR__3304
252b0     00 A8 0E F2 | 	cmp	local02, #0 wz
252b4     28 00 90 AD |  if_e	jmp	#LR__3305
252b8     04 AC 06 F1 | 	add	local04, #4
252bc     56 A9 62 FC | 	wrlong	local02, local04
252c0     04 AC 86 F1 | 	sub	local04, #4
252c4     56 7B 02 F6 | 	mov	result1, local04
252c8     00 78 05 FF 
252cc     00 7A 46 F5 | 	or	result1, ##183500800
252d0     20 AE 06 F1 | 	add	local05, #32
252d4     57 7B 62 FC | 	wrlong	result1, local05
252d8     20 AE 86 F1 | 	sub	local05, #32
252dc     0C 00 90 FD | 	jmp	#LR__3306
252e0                 | LR__3305
252e0     20 AE 06 F1 | 	add	local05, #32
252e4     57 01 68 FC | 	wrlong	#0, local05
252e8     20 AE 86 F1 | 	sub	local05, #32
252ec                 | LR__3306
252ec     00 AA 0E F2 | 	cmp	local03, #0 wz
252f0     24 00 90 AD |  if_e	jmp	#LR__3307
252f4     08 AC 06 F1 | 	add	local04, #8
252f8     56 AB 62 FC | 	wrlong	local03, local04
252fc     08 AC 86 F1 | 	sub	local04, #8
25300     00 80 05 FF 
25304     00 AC 46 F5 | 	or	local04, ##184549376
25308     24 AE 06 F1 | 	add	local05, #36
2530c     57 AD 62 FC | 	wrlong	local04, local05
25310     24 AE 86 F1 | 	sub	local05, #36
25314     0C 00 90 FD | 	jmp	#LR__3308
25318                 | LR__3307
25318     24 AE 06 F1 | 	add	local05, #36
2531c     57 01 68 FC | 	wrlong	#0, local05
25320     24 AE 86 F1 | 	sub	local05, #36
25324                 | LR__3308
25324     08 AE 06 F1 | 	add	local05, #8
25328     40 00 80 FF 
2532c     57 07 68 FC | 	wrlong	##32771, local05
25330     00 7A 06 F6 | 	mov	result1, #0
25334                 | LR__3309
25334     E7 F0 03 F6 | 	mov	ptra, fp
25338     F2 00 A0 FD | 	call	#popregs_
2533c                 | __system___basic_open_ret
2533c     2D 00 64 FD | 	ret
25340                 | 
25340                 | __system___basic_open_string
25340     04 CA 05 F6 | 	mov	COUNT_, #4
25344     E8 00 A0 FD | 	call	#pushregs_
25348     4A A7 02 F6 | 	mov	local01, arg02
2534c     4B A9 02 F6 | 	mov	local02, arg03
25350     5C 42 B0 FD | 	call	#__system____getftab
25354     3D AB 0A F6 | 	mov	local03, result1 wz
25358     18 00 90 5D |  if_ne	jmp	#LR__3310
2535c     2E 93 02 F6 | 	mov	arg01, abortchain
25360     0C 94 06 F6 | 	mov	arg02, #12
25364     01 96 06 F6 | 	mov	arg03, #1
25368     1A 01 A0 FD | 	call	#__longjmp
2536c     01 7A 66 F6 | 	neg	result1, #1
25370     58 00 90 FD | 	jmp	#LR__3312
25374                 | LR__3310
25374     08 AA 06 F1 | 	add	local03, #8
25378     55 99 0A FB | 	rdlong	arg04, local03 wz
2537c     08 AA 86 F1 | 	sub	local03, #8
25380     55 93 02 56 |  if_ne	mov	arg01, local03
25384     80 39 B0 5D |  if_ne	call	#__system___closeraw
25388     53 95 02 F6 | 	mov	arg02, local01
2538c     54 97 02 F6 | 	mov	arg03, local02
25390     55 93 02 F6 | 	mov	arg01, local03
25394     B6 99 06 F6 | 	mov	arg04, #438
25398     1C 36 B0 FD | 	call	#__system___openraw
2539c     3D AD 02 F6 | 	mov	local04, result1
253a0     00 AC 56 F2 | 	cmps	local04, #0 wc
253a4     20 00 90 3D |  if_ae	jmp	#LR__3311
253a8     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
253ac     20 7A 06 F1 | 	add	result1, #32
253b0     2E 93 02 F6 | 	mov	arg01, abortchain
253b4     3D 95 02 FB | 	rdlong	arg02, result1
253b8     01 96 06 F6 | 	mov	arg03, #1
253bc     1A 01 A0 FD | 	call	#__longjmp
253c0     01 7A 66 F6 | 	neg	result1, #1
253c4     04 00 90 FD | 	jmp	#LR__3312
253c8                 | LR__3311
253c8     56 7B 02 F6 | 	mov	result1, local04
253cc                 | LR__3312
253cc     E7 F0 03 F6 | 	mov	ptra, fp
253d0     F2 00 A0 FD | 	call	#popregs_
253d4                 | __system___basic_open_string_ret
253d4     2D 00 64 FD | 	ret
253d8                 | 
253d8                 | __system___find_free_file
253d8     34 81 02 F6 | 	mov	_var01, ptr___system__dat__
253dc     02 00 00 FF 
253e0     2C 81 06 F1 | 	add	_var01, ##1324
253e4     00 82 06 F6 | 	mov	_var02, #0
253e8     D7 12 48 FB | 	callpa	#(@LR__3321-@LR__3320)>>2,fcache_load_ptr_
253ec                 | LR__3320
253ec     0A 82 56 F2 | 	cmps	_var02, #10 wc
253f0     1C 00 90 3D |  if_ae	jmp	#LR__3322
253f4     34 82 06 FD | 	qmul	_var02, #52
253f8     18 7A 62 FD | 	getqx	result1
253fc     40 7B 02 F1 | 	add	result1, _var01
25400     08 7A 06 F1 | 	add	result1, #8
25404     3D 7B 0A FB | 	rdlong	result1, result1 wz
25408     01 82 06 51 |  if_ne	add	_var02, #1
2540c     DC FF 9F 5D |  if_ne	jmp	#LR__3320
25410                 | LR__3321
25410                 | LR__3322
25410     0A 82 0E F2 | 	cmp	_var02, #10 wz
25414     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
25418     34 17 68 AC |  if_e	wrlong	#11, ptr___system__dat__
2541c     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
25420     01 7A 66 A6 |  if_e	neg	result1, #1
25424     41 7B 02 56 |  if_ne	mov	result1, _var02
25428                 | __system___find_free_file_ret
25428     2D 00 64 FD | 	ret
2542c                 | 
2542c                 | __system___basic_print_char
2542c     03 CA 05 F6 | 	mov	COUNT_, #3
25430     E8 00 A0 FD | 	call	#pushregs_
25434     4A A7 02 F6 | 	mov	local01, arg02
25438     20 49 B0 FD | 	call	#__system___gettxfunc
2543c     3D A9 0A F6 | 	mov	local02, result1 wz
25440     00 7A 06 A6 |  if_e	mov	result1, #0
25444     30 00 90 AD |  if_e	jmp	#LR__3330
25448     54 AB 02 F6 | 	mov	local03, local02
2544c     13 A8 46 F7 | 	zerox	local02, #19
25450     14 AA 46 F0 | 	shr	local03, #20
25454     02 AA 66 F0 | 	shl	local03, #2
25458     2D AB 02 F1 | 	add	local03, __methods__
2545c     55 AB 02 FB | 	rdlong	local03, local03
25460     53 93 02 F6 | 	mov	arg01, local01
25464     32 A7 02 F6 | 	mov	local01, objptr
25468     54 65 02 F6 | 	mov	objptr, local02
2546c     2D AA 62 FD | 	call	local03
25470     53 65 02 F6 | 	mov	objptr, local01
25474     01 7A 06 F6 | 	mov	result1, #1
25478                 | LR__3330
25478     E7 F0 03 F6 | 	mov	ptra, fp
2547c     F2 00 A0 FD | 	call	#popregs_
25480                 | __system___basic_print_char_ret
25480     2D 00 64 FD | 	ret
25484                 | 
25484                 | __system___basic_print_string
25484     03 CA 05 F6 | 	mov	COUNT_, #3
25488     E8 00 A0 FD | 	call	#pushregs_
2548c     4A A7 02 F6 | 	mov	local01, arg02
25490     4B A9 02 F6 | 	mov	local02, arg03
25494     C4 48 B0 FD | 	call	#__system___gettxfunc
25498     3D AB 0A F6 | 	mov	local03, result1 wz
2549c     00 7A 06 A6 |  if_e	mov	result1, #0
254a0     18 00 90 AD |  if_e	jmp	#LR__3340
254a4     00 A6 0E F2 | 	cmp	local01, #0 wz
254a8     00 7A 06 A6 |  if_e	mov	result1, #0
254ac     55 93 02 56 |  if_ne	mov	arg01, local03
254b0     54 95 02 56 |  if_ne	mov	arg02, local02
254b4     53 97 02 56 |  if_ne	mov	arg03, local01
254b8     FC 01 B0 5D |  if_ne	call	#__system___fmtstr
254bc                 | LR__3340
254bc     E7 F0 03 F6 | 	mov	ptra, fp
254c0     F2 00 A0 FD | 	call	#popregs_
254c4                 | __system___basic_print_string_ret
254c4     2D 00 64 FD | 	ret
254c8                 | 
254c8                 | __system___basic_print_integer
254c8     04 CA 05 F6 | 	mov	COUNT_, #4
254cc     E8 00 A0 FD | 	call	#pushregs_
254d0     4A A7 02 F6 | 	mov	local01, arg02
254d4     4B A9 02 F6 | 	mov	local02, arg03
254d8     4C AB 02 F6 | 	mov	local03, arg04
254dc     7C 48 B0 FD | 	call	#__system___gettxfunc
254e0     3D AD 0A F6 | 	mov	local04, result1 wz
254e4     00 7A 06 A6 |  if_e	mov	result1, #0
254e8     56 93 02 56 |  if_ne	mov	arg01, local04
254ec     54 95 02 56 |  if_ne	mov	arg02, local02
254f0     53 97 02 56 |  if_ne	mov	arg03, local01
254f4     55 99 02 56 |  if_ne	mov	arg04, local03
254f8     A8 02 B0 5D |  if_ne	call	#__system___fmtnum
254fc     E7 F0 03 F6 | 	mov	ptra, fp
25500     F2 00 A0 FD | 	call	#popregs_
25504                 | __system___basic_print_integer_ret
25504     2D 00 64 FD | 	ret
25508                 | 
25508                 | __system___basic_print_unsigned
25508     03 CA 05 F6 | 	mov	COUNT_, #3
2550c     E8 00 A0 FD | 	call	#pushregs_
25510     4A A7 02 F6 | 	mov	local01, arg02
25514     4B A9 02 F6 | 	mov	local02, arg03
25518     4C AB 02 F6 | 	mov	local03, arg04
2551c     3C 48 B0 FD | 	call	#__system___gettxfunc
25520     3D 93 0A F6 | 	mov	arg01, result1 wz
25524     00 7A 06 A6 |  if_e	mov	result1, #0
25528     3A A8 26 54 |  if_ne	bith	local02, #58
2552c     54 95 02 56 |  if_ne	mov	arg02, local02
25530     53 97 02 56 |  if_ne	mov	arg03, local01
25534     55 99 02 56 |  if_ne	mov	arg04, local03
25538     68 02 B0 5D |  if_ne	call	#__system___fmtnum
2553c     E7 F0 03 F6 | 	mov	ptra, fp
25540     F2 00 A0 FD | 	call	#popregs_
25544                 | __system___basic_print_unsigned_ret
25544     2D 00 64 FD | 	ret
25548                 | 
25548                 | __system___basic_get_char
25548     03 CA 05 F6 | 	mov	COUNT_, #3
2554c     E8 00 A0 FD | 	call	#pushregs_
25550     4C 48 B0 FD | 	call	#__system___getrxfunc
25554     3D A7 0A F6 | 	mov	local01, result1 wz
25558     01 7A 66 A6 |  if_e	neg	result1, #1
2555c     28 00 90 AD |  if_e	jmp	#LR__3350
25560     53 A9 02 F6 | 	mov	local02, local01
25564     13 A6 46 F7 | 	zerox	local01, #19
25568     14 A8 46 F0 | 	shr	local02, #20
2556c     02 A8 66 F0 | 	shl	local02, #2
25570     2D A9 02 F1 | 	add	local02, __methods__
25574     54 A9 02 FB | 	rdlong	local02, local02
25578     32 AB 02 F6 | 	mov	local03, objptr
2557c     53 65 02 F6 | 	mov	objptr, local01
25580     2D A8 62 FD | 	call	local02
25584     55 65 02 F6 | 	mov	objptr, local03
25588                 | LR__3350
25588     E7 F0 03 F6 | 	mov	ptra, fp
2558c     F2 00 A0 FD | 	call	#popregs_
25590                 | __system___basic_get_char_ret
25590     2D 00 64 FD | 	ret
25594                 | 
25594                 | __system___basic_put
25594     04 CA 05 F6 | 	mov	COUNT_, #4
25598     E8 00 A0 FD | 	call	#pushregs_
2559c     4D A7 02 F6 | 	mov	local01, arg05
255a0     53 99 02 FD | 	qmul	arg04, local01
255a4     49 A9 02 F6 | 	mov	local02, arg01
255a8     4B AB 02 F6 | 	mov	local03, arg03
255ac     00 94 0E F2 | 	cmp	arg02, #0 wz
255b0     18 AC 62 FD | 	getqx	local04
255b4     18 00 90 AD |  if_e	jmp	#LR__3360
255b8     01 94 86 F1 | 	sub	arg02, #1
255bc     4A 97 02 F6 | 	mov	arg03, arg02
255c0     1F 96 C6 F0 | 	sar	arg03, #31
255c4     54 93 02 F6 | 	mov	arg01, local02
255c8     00 98 06 F6 | 	mov	arg04, #0
255cc     E4 3D B0 FD | 	call	#__system__lseek
255d0                 | LR__3360
255d0     55 95 02 F6 | 	mov	arg02, local03
255d4     56 97 02 F6 | 	mov	arg03, local04
255d8     54 93 02 F6 | 	mov	arg01, local02
255dc     FC 3C B0 FD | 	call	#__system__write
255e0     3D AD 02 F6 | 	mov	local04, result1
255e4     01 AC 56 F2 | 	cmps	local04, #1 wc
255e8     10 00 90 CD |  if_b	jmp	#LR__3361
255ec     56 0F 03 F6 | 	mov	muldiva_, local04
255f0     53 11 03 F6 | 	mov	muldivb_, local01
255f4     FA 00 A0 FD | 	call	#divide_
255f8     88 AD 02 F6 | 	mov	local04, muldivb_
255fc                 | LR__3361
255fc     56 7B 02 F6 | 	mov	result1, local04
25600     E7 F0 03 F6 | 	mov	ptra, fp
25604     F2 00 A0 FD | 	call	#popregs_
25608                 | __system___basic_put_ret
25608     2D 00 64 FD | 	ret
2560c                 | 
2560c                 | __system___basic_get
2560c     04 CA 05 F6 | 	mov	COUNT_, #4
25610     E8 00 A0 FD | 	call	#pushregs_
25614     4D A7 02 F6 | 	mov	local01, arg05
25618     53 99 02 FD | 	qmul	arg04, local01
2561c     49 A9 02 F6 | 	mov	local02, arg01
25620     4B AB 02 F6 | 	mov	local03, arg03
25624     00 94 0E F2 | 	cmp	arg02, #0 wz
25628     18 AC 62 FD | 	getqx	local04
2562c     18 00 90 AD |  if_e	jmp	#LR__3370
25630     01 94 86 F1 | 	sub	arg02, #1
25634     4A 97 02 F6 | 	mov	arg03, arg02
25638     1F 96 C6 F0 | 	sar	arg03, #31
2563c     54 93 02 F6 | 	mov	arg01, local02
25640     00 98 06 F6 | 	mov	arg04, #0
25644     6C 3D B0 FD | 	call	#__system__lseek
25648                 | LR__3370
25648     55 95 02 F6 | 	mov	arg02, local03
2564c     56 97 02 F6 | 	mov	arg03, local04
25650     54 93 02 F6 | 	mov	arg01, local02
25654     CC 3C B0 FD | 	call	#__system__read
25658     3D AD 02 F6 | 	mov	local04, result1
2565c     01 AC 56 F2 | 	cmps	local04, #1 wc
25660     10 00 90 CD |  if_b	jmp	#LR__3371
25664     56 0F 03 F6 | 	mov	muldiva_, local04
25668     53 11 03 F6 | 	mov	muldivb_, local01
2566c     FA 00 A0 FD | 	call	#divide_
25670     88 AD 02 F6 | 	mov	local04, muldivb_
25674                 | LR__3371
25674     56 7B 02 F6 | 	mov	result1, local04
25678     E7 F0 03 F6 | 	mov	ptra, fp
2567c     F2 00 A0 FD | 	call	#popregs_
25680                 | __system___basic_get_ret
25680     2D 00 64 FD | 	ret
25684                 | 
25684                 | __system___fmtchar
25684     00 CA 05 F6 | 	mov	COUNT_, #0
25688     E8 00 A0 FD | 	call	#pushregs_
2568c     10 F0 07 F1 | 	add	ptra, #16
25690     0C CE 05 F1 | 	add	fp, #12
25694     E7 96 62 FC | 	wrlong	arg03, fp
25698     4B 97 E2 F8 | 	getbyte	arg03, arg03, #0
2569c     E7 96 62 FC | 	wrlong	arg03, fp
256a0     E7 96 02 F6 | 	mov	arg03, fp
256a4     0C CE 85 F1 | 	sub	fp, #12
256a8     0C 00 B0 FD | 	call	#__system___fmtstr
256ac     E7 F0 03 F6 | 	mov	ptra, fp
256b0     F2 00 A0 FD | 	call	#popregs_
256b4                 | __system___fmtchar_ret
256b4     2D 00 64 FD | 	ret
256b8                 | 
256b8                 | __system___fmtstr
256b8     09 CA 05 F6 | 	mov	COUNT_, #9
256bc     E8 00 A0 FD | 	call	#pushregs_
256c0     49 A7 02 F6 | 	mov	local01, arg01
256c4     4A A9 02 F6 | 	mov	local02, arg02
256c8     4B AB 02 F6 | 	mov	local03, arg03
256cc     54 99 E2 F8 | 	getbyte	arg04, local02, #0
256d0     55 93 02 F6 | 	mov	arg01, local03
256d4     49 AD 02 F6 | 	mov	local04, arg01
256d8     D7 06 48 FB | 	callpa	#(@LR__3381-@LR__3380)>>2,fcache_load_ptr_
256dc                 | LR__3380
256dc     56 7B CA FA | 	rdbyte	result1, local04 wz
256e0     01 AC 06 51 |  if_ne	add	local04, #1
256e4     F4 FF 9F 5D |  if_ne	jmp	#LR__3380
256e8                 | LR__3381
256e8     49 AD 82 F1 | 	sub	local04, arg01
256ec     00 98 0E F2 | 	cmp	arg04, #0 wz
256f0     4C AD 7A 53 |  if_ne	fles	local04, arg04 wcz
256f4     54 95 02 F6 | 	mov	arg02, local02
256f8     56 97 02 F6 | 	mov	arg03, local04
256fc     53 93 02 F6 | 	mov	arg01, local01
25700     02 98 06 F6 | 	mov	arg04, #2
25704     AC 42 B0 FD | 	call	#__system___fmtpad
25708     3D AF 02 F6 | 	mov	local05, result1
2570c     00 AE 56 F2 | 	cmps	local05, #0 wc
25710     57 7B 02 C6 |  if_b	mov	result1, local05
25714     80 00 90 CD |  if_b	jmp	#LR__3384
25718     01 AC 56 F2 | 	cmps	local04, #1 wc
2571c     50 00 90 CD |  if_b	jmp	#LR__3383
25720     56 B1 02 F6 | 	mov	local06, local04
25724                 | LR__3382
25724     53 B3 02 F6 | 	mov	local07, local01
25728     53 B5 02 F6 | 	mov	local08, local01
2572c     13 B2 46 F7 | 	zerox	local07, #19
25730     14 B4 46 F0 | 	shr	local08, #20
25734     02 B4 66 F0 | 	shl	local08, #2
25738     2D B5 02 F1 | 	add	local08, __methods__
2573c     5A B5 02 FB | 	rdlong	local08, local08
25740     55 93 C2 FA | 	rdbyte	arg01, local03
25744     32 B7 02 F6 | 	mov	local09, objptr
25748     59 65 02 F6 | 	mov	objptr, local07
2574c     01 AA 06 F1 | 	add	local03, #1
25750     2D B4 62 FD | 	call	local08
25754     5B 65 02 F6 | 	mov	objptr, local09
25758     3D B7 02 F6 | 	mov	local09, result1
2575c     00 B6 56 F2 | 	cmps	local09, #0 wc
25760     5B 7B 02 C6 |  if_b	mov	result1, local09
25764     30 00 90 CD |  if_b	jmp	#LR__3384
25768     5B AF 02 F1 | 	add	local05, local09
2576c     ED B1 6E FB | 	djnz	local06, #LR__3382
25770                 | LR__3383
25770     54 95 02 F6 | 	mov	arg02, local02
25774     56 97 02 F6 | 	mov	arg03, local04
25778     53 93 02 F6 | 	mov	arg01, local01
2577c     01 98 06 F6 | 	mov	arg04, #1
25780     30 42 B0 FD | 	call	#__system___fmtpad
25784     3D B7 02 F6 | 	mov	local09, result1
25788     00 B6 56 F2 | 	cmps	local09, #0 wc
2578c     5B 7B 02 C6 |  if_b	mov	result1, local09
25790     5B AF 02 31 |  if_ae	add	local05, local09
25794     57 7B 02 36 |  if_ae	mov	result1, local05
25798                 | LR__3384
25798     E7 F0 03 F6 | 	mov	ptra, fp
2579c     F2 00 A0 FD | 	call	#popregs_
257a0                 | __system___fmtstr_ret
257a0     2D 00 64 FD | 	ret
257a4                 | 
257a4                 | __system___fmtnum
257a4     0B CA 05 F6 | 	mov	COUNT_, #11
257a8     E8 00 A0 FD | 	call	#pushregs_
257ac     49 A7 02 F6 | 	mov	local01, arg01
257b0     4A A9 02 F6 | 	mov	local02, arg02
257b4     4B AB 02 F6 | 	mov	local03, arg03
257b8     4C AD 02 F6 | 	mov	local04, arg04
257bc     F8 AF 02 F6 | 	mov	local05, ptra
257c0     57 B1 02 F6 | 	mov	local06, local05
257c4     00 B2 06 F6 | 	mov	local07, #0
257c8     54 B5 02 F6 | 	mov	local08, local02
257cc     10 B4 46 F0 | 	shr	local08, #16
257d0     3F B4 06 F5 | 	and	local08, #63
257d4     54 B7 E2 F8 | 	getbyte	local09, local02, #0
257d8     54 B9 02 F6 | 	mov	local10, local02
257dc     1A B8 46 F0 | 	shr	local10, #26
257e0     03 B8 06 F5 | 	and	local10, #3
257e4     5C BB 02 F6 | 	mov	local11, local10
257e8     01 B4 56 F2 | 	cmps	local08, #1 wc
257ec     44 F0 07 F1 | 	add	ptra, #68
257f0     01 B4 86 31 |  if_ae	sub	local08, #1
257f4     41 B6 56 F2 | 	cmps	local09, #65 wc
257f8     00 B6 0E C2 |  if_b	cmp	local09, #0 wz
257fc     40 B6 06 B6 |  if_nc_or_z	mov	local09, #64
25800     03 BA 0E F2 | 	cmp	local11, #3 wz
25804     00 BA 06 A6 |  if_e	mov	local11, #0
25808     00 AA 56 52 |  if_ne	cmps	local03, #0 wc
2580c     04 BA 06 46 |  if_c_and_nz	mov	local11, #4
25810     55 AB 62 46 |  if_c_and_nz	neg	local03, local03
25814     00 BA 0E F2 | 	cmp	local11, #0 wz
25818     4C 00 90 AD |  if_e	jmp	#LR__3393
2581c     01 B2 06 F6 | 	mov	local07, #1
25820     5B B5 0A F2 | 	cmp	local08, local09 wz
25824     18 00 90 5D |  if_ne	jmp	#LR__3391
25828     05 B4 6E FB | 	djnz	local08, #LR__3390
2582c     53 93 02 F6 | 	mov	arg01, local01
25830     54 95 02 F6 | 	mov	arg02, local02
25834     23 96 06 F6 | 	mov	arg03, #35
25838     48 FE BF FD | 	call	#__system___fmtchar
2583c     8C 00 90 FD | 	jmp	#LR__3397
25840                 | LR__3390
25840                 | LR__3391
25840     02 BA 0E F2 | 	cmp	local11, #2 wz
25844     58 B9 02 A6 |  if_e	mov	local10, local06
25848     01 B0 06 A1 |  if_e	add	local06, #1
2584c     5C 41 48 AC |  if_e	wrbyte	#32, local10
25850     14 00 90 AD |  if_e	jmp	#LR__3392
25854     04 BA 0E F2 | 	cmp	local11, #4 wz
25858     58 5B 48 AC |  if_e	wrbyte	#45, local06
2585c     01 B0 06 A1 |  if_e	add	local06, #1
25860     58 57 48 5C |  if_ne	wrbyte	#43, local06
25864     01 B0 06 51 |  if_ne	add	local06, #1
25868                 | LR__3392
25868                 | LR__3393
25868     59 B9 02 F6 | 	mov	local10, local07
2586c     58 93 02 F6 | 	mov	arg01, local06
25870     55 95 02 F6 | 	mov	arg02, local03
25874     56 97 02 F6 | 	mov	arg03, local04
25878     5A 99 02 F6 | 	mov	arg04, local08
2587c     00 9A 06 F6 | 	mov	arg05, #0
25880     1D A8 2E F4 | 	testbn	local02, #29 wz
25884     01 9A 06 56 |  if_ne	mov	arg05, #1
25888     F0 41 B0 FD | 	call	#__system___uitoa
2588c     3D B9 02 F1 | 	add	local10, result1
25890     5B B9 5A F2 | 	cmps	local10, local09 wcz
25894     24 00 90 ED |  if_be	jmp	#LR__3396
25898     D7 0E 48 FB | 	callpa	#(@LR__3395-@LR__3394)>>2,fcache_load_ptr_
2589c                 | LR__3394
2589c     5B B9 02 F6 | 	mov	local10, local09
258a0     01 B8 56 F2 | 	cmps	local10, #1 wc
258a4     01 B6 86 F1 | 	sub	local09, #1
258a8     58 B9 02 36 |  if_ae	mov	local10, local06
258ac     01 B0 06 31 |  if_ae	add	local06, #1
258b0     5C 47 48 3C |  if_ae	wrbyte	#35, local10
258b4     E4 FF 9F 3D |  if_ae	jmp	#LR__3394
258b8                 | LR__3395
258b8     58 01 48 FC | 	wrbyte	#0, local06
258bc                 | LR__3396
258bc     53 93 02 F6 | 	mov	arg01, local01
258c0     54 95 02 F6 | 	mov	arg02, local02
258c4     57 97 02 F6 | 	mov	arg03, local05
258c8     EC FD BF FD | 	call	#__system___fmtstr
258cc                 | LR__3397
258cc     E7 F0 03 F6 | 	mov	ptra, fp
258d0     F2 00 A0 FD | 	call	#popregs_
258d4                 | __system___fmtnum_ret
258d4     2D 00 64 FD | 	ret
258d8                 | 
258d8                 | __system___fmtfloat
258d8     29 CA 05 F6 | 	mov	COUNT_, #41
258dc     E8 00 A0 FD | 	call	#pushregs_
258e0     24 F1 07 F1 | 	add	ptra, #292
258e4     49 A7 02 F6 | 	mov	local01, arg01
258e8     4A A9 02 F6 | 	mov	local02, arg02
258ec     4B AB 02 F6 | 	mov	local03, arg03
258f0     4C AD 02 F6 | 	mov	local04, arg04
258f4     0A AE 06 F6 | 	mov	local05, #10
258f8     00 B0 06 F6 | 	mov	local06, #0
258fc     00 B2 06 F6 | 	mov	local07, #0
25900     02 B4 06 F6 | 	mov	local08, #2
25904     00 B6 06 F6 | 	mov	local09, #0
25908     00 B8 06 F6 | 	mov	local10, #0
2590c     00 BA 06 F6 | 	mov	local11, #0
25910     E7 BC 02 F6 | 	mov	local12, fp
25914     C8 BC 06 F1 | 	add	local12, #200
25918     5E BF 02 F6 | 	mov	local13, local12
2591c     54 C1 02 F6 | 	mov	local14, local02
25920     10 C0 46 F0 | 	shr	local14, #16
25924     3F C0 0E F5 | 	and	local14, #63 wz
25928     54 C3 02 F6 | 	mov	local15, local02
2592c     1C C2 46 F0 | 	shr	local15, #28
25930     01 C2 06 F5 | 	and	local15, #1
25934     18 00 90 5D |  if_ne	jmp	#LR__3400
25938     61 AC 0E F2 | 	cmp	local04, #97 wz
2593c     0D C0 06 A6 |  if_e	mov	local14, #13
25940     01 B2 06 A6 |  if_e	mov	local07, #1
25944     0C 00 90 AD |  if_e	jmp	#LR__3401
25948     06 C0 06 F6 | 	mov	local14, #6
2594c     04 00 90 FD | 	jmp	#LR__3401
25950                 | LR__3400
25950     01 C0 86 F1 | 	sub	local14, #1
25954                 | LR__3401
25954     54 C5 02 F6 | 	mov	local16, local02
25958     16 C4 46 F0 | 	shr	local16, #22
2595c     03 C4 06 F5 | 	and	local16, #3
25960     54 C7 02 F6 | 	mov	local17, local02
25964     1D C6 46 F0 | 	shr	local17, #29
25968     01 C6 06 F5 | 	and	local17, #1
2596c     54 C9 EA F8 | 	getbyte	local18, local02, #1
25970     54 CB E2 F8 | 	getbyte	local19, local02, #0
25974     65 AC 0E F2 | 	cmp	local04, #101 wz
25978     6E CC 62 FD | 	wrz	local20
2597c     66 CF 02 F6 | 	mov	local21, local20
25980     00 C6 0E F2 | 	cmp	local17, #0 wz
25984     45 CC 06 56 |  if_ne	mov	local20, #69
25988     65 CC 06 A6 |  if_e	mov	local20, #101
2598c     66 D1 02 F6 | 	mov	local22, local20
25990     61 AC 0E F2 | 	cmp	local04, #97 wz
25994     2C 00 90 5D |  if_ne	jmp	#LR__3402
25998     01 CE 06 F6 | 	mov	local21, #1
2599c     00 C6 0E F2 | 	cmp	local17, #0 wz
259a0     50 CC 06 56 |  if_ne	mov	local20, #80
259a4     70 CC 06 A6 |  if_e	mov	local20, #112
259a8     66 D1 02 F6 | 	mov	local22, local20
259ac     02 AE 06 F6 | 	mov	local05, #2
259b0     01 B4 06 F6 | 	mov	local08, #1
259b4     00 C6 0E F2 | 	cmp	local17, #0 wz
259b8     58 CC 06 56 |  if_ne	mov	local20, #88
259bc     78 CC 06 A6 |  if_e	mov	local20, #120
259c0     66 B7 02 F6 | 	mov	local09, local20
259c4                 | LR__3402
259c4     23 AC 0E F2 | 	cmp	local04, #35 wz
259c8     14 00 90 5D |  if_ne	jmp	#LR__3403
259cc     01 B8 06 F6 | 	mov	local10, #1
259d0     00 C2 0E F2 | 	cmp	local15, #0 wz
259d4     66 AC 06 56 |  if_ne	mov	local04, #102
259d8     00 C2 06 56 |  if_ne	mov	local15, #0
259dc     01 C2 06 A6 |  if_e	mov	local15, #1
259e0                 | LR__3403
259e0     54 D3 02 F6 | 	mov	local23, local02
259e4     1A D2 46 F0 | 	shr	local23, #26
259e8     03 D2 06 F5 | 	and	local23, #3
259ec     55 7B 02 F6 | 	mov	result1, local03
259f0     1F 7A 4E F0 | 	shr	result1, #31 wz
259f4     2D B0 06 56 |  if_ne	mov	local06, #45
259f8     1F AA E6 54 |  if_ne	bitnot	local03, #31
259fc     14 00 90 5D |  if_ne	jmp	#LR__3405
25a00     01 D2 0E F2 | 	cmp	local23, #1 wz
25a04     2B B0 06 A6 |  if_e	mov	local06, #43
25a08     08 00 90 AD |  if_e	jmp	#LR__3404
25a0c     02 D2 0E F2 | 	cmp	local23, #2 wz
25a10     20 B0 06 A6 |  if_e	mov	local06, #32
25a14                 | LR__3404
25a14                 | LR__3405
25a14     54 D5 02 F6 | 	mov	local24, local02
25a18     18 D4 46 F0 | 	shr	local24, #24
25a1c     03 D4 06 F5 | 	and	local24, #3
25a20     00 CC 06 F6 | 	mov	local20, #0
25a24     00 B0 0E F2 | 	cmp	local06, #0 wz
25a28     0A AE 0E A2 |  if_e	cmp	local05, #10 wz
25a2c     01 CC 06 56 |  if_ne	mov	local20, #1
25a30     66 D7 0A F6 | 	mov	local25, local20 wz
25a34     60 00 90 AD |  if_e	jmp	#LR__3407
25a38     02 D4 0E F2 | 	cmp	local24, #2 wz
25a3c     58 00 90 5D |  if_ne	jmp	#LR__3407
25a40     02 C4 0E F2 | 	cmp	local16, #2 wz
25a44     50 00 90 AD |  if_e	jmp	#LR__3407
25a48     58 95 02 F6 | 	mov	arg02, local06
25a4c     5B D9 02 F6 | 	mov	local26, local09
25a50     5E 93 02 F6 | 	mov	arg01, local12
25a54     6C 97 02 F6 | 	mov	arg03, local26
25a58     88 42 B0 FD | 	call	#__system__emitsign_0584
25a5c     3D DB 02 F6 | 	mov	local27, result1
25a60     00 DA 56 F2 | 	cmps	local27, #0 wc
25a64     6D 7B 02 C6 |  if_b	mov	result1, local27
25a68     C0 05 90 CD |  if_b	jmp	#LR__3450
25a6c     6D DD 02 F6 | 	mov	local28, local27
25a70     6D BD 02 F1 | 	add	local12, local27
25a74     00 C8 0E F2 | 	cmp	local18, #0 wz
25a78     18 00 90 AD |  if_e	jmp	#LR__3406
25a7c     6D C9 82 F1 | 	sub	local18, local27
25a80     00 C8 56 F3 | 	fges	local18, #0 wc
25a84     E8 A8 06 F4 | 	bitl	local02, #232
25a88     64 DD 02 F6 | 	mov	local28, local18
25a8c     08 DC 66 F0 | 	shl	local28, #8
25a90     6E A9 42 F5 | 	or	local02, local28
25a94                 | LR__3406
25a94     00 D6 06 F6 | 	mov	local25, #0
25a98                 | LR__3407
25a98     55 93 02 F6 | 	mov	arg01, local03
25a9c     F4 1C B0 FD | 	call	#__system____builtin_ilogb
25aa0     FF FF 3F FF 
25aa4     FF 7B 0E F2 | 	cmp	result1, ##2147483647 wz
25aa8     24 00 90 5D |  if_ne	jmp	#LR__3408
25aac     00 B0 0E F2 | 	cmp	local06, #0 wz
25ab0     5E CD 02 56 |  if_ne	mov	local20, local12
25ab4     01 BC 06 51 |  if_ne	add	local12, #1
25ab8     66 B1 42 5C |  if_ne	wrbyte	local06, local20
25abc     91 01 00 FF 
25ac0     6A 94 06 F6 | 	mov	arg02, ##@LR__5451
25ac4     5E 93 02 F6 | 	mov	arg01, local12
25ac8     78 EC BF FD | 	call	#__system____builtin_strcpy
25acc     AC 04 90 FD | 	jmp	#LR__3440
25ad0                 | LR__3408
25ad0     55 93 02 F6 | 	mov	arg01, local03
25ad4     BC 1C B0 FD | 	call	#__system____builtin_ilogb
25ad8     3D CD 02 F6 | 	mov	local20, result1
25adc     00 00 40 FF 
25ae0     00 CC 0E F2 | 	cmp	local20, ##-2147483648 wz
25ae4     24 00 90 5D |  if_ne	jmp	#LR__3409
25ae8     00 B0 0E F2 | 	cmp	local06, #0 wz
25aec     5E CD 02 56 |  if_ne	mov	local20, local12
25af0     01 BC 06 51 |  if_ne	add	local12, #1
25af4     66 B1 42 5C |  if_ne	wrbyte	local06, local20
25af8     5E 93 02 F6 | 	mov	arg01, local12
25afc     91 01 00 FF 
25b00     6E 94 06 F6 | 	mov	arg02, ##@LR__5452
25b04     3C EC BF FD | 	call	#__system____builtin_strcpy
25b08     70 04 90 FD | 	jmp	#LR__3440
25b0c                 | LR__3409
25b0c     67 AC 0E F2 | 	cmp	local04, #103 wz
25b10     23 AC 0E 52 |  if_ne	cmp	local04, #35 wz
25b14     0C 01 90 5D |  if_ne	jmp	#LR__3414
25b18     14 CE 05 F1 | 	add	fp, #20
25b1c     E7 94 02 F6 | 	mov	arg02, fp
25b20     0C CE 05 F1 | 	add	fp, #12
25b24     E7 96 02 F6 | 	mov	arg03, fp
25b28     20 CE 85 F1 | 	sub	fp, #32
25b2c     60 99 02 F6 | 	mov	arg04, local14
25b30     57 9B 02 F6 | 	mov	arg05, local05
25b34     55 93 02 F6 | 	mov	arg01, local03
25b38     B4 3F B0 FD | 	call	#__system__disassemble_0582
25b3c     23 AC 0E F2 | 	cmp	local04, #35 wz
25b40     6C 00 90 5D |  if_ne	jmp	#LR__3411
25b44     20 CE 05 F1 | 	add	fp, #32
25b48     E7 CC 02 FB | 	rdlong	local20, fp
25b4c     20 CE 85 F1 | 	sub	fp, #32
25b50     60 CD 5A F2 | 	cmps	local20, local14 wcz
25b54     01 CE 06 16 |  if_a	mov	local21, #1
25b58     24 01 90 1D |  if_a	jmp	#LR__3417
25b5c     20 CE 05 F1 | 	add	fp, #32
25b60     E7 CC 02 FB | 	rdlong	local20, fp
25b64     20 CE 85 F1 | 	sub	fp, #32
25b68     00 CC 56 F2 | 	cmps	local20, #0 wc
25b6c     1C 00 90 3D |  if_ae	jmp	#LR__3410
25b70     60 CD 62 F6 | 	neg	local20, local14
25b74     20 CE 05 F1 | 	add	fp, #32
25b78     E7 DC 02 FB | 	rdlong	local28, fp
25b7c     20 CE 85 F1 | 	sub	fp, #32
25b80     66 DD 5A F2 | 	cmps	local28, local20 wcz
25b84     01 CE 06 E6 |  if_be	mov	local21, #1
25b88     F4 00 90 FD | 	jmp	#LR__3417
25b8c                 | LR__3410
25b8c     20 CE 05 F1 | 	add	fp, #32
25b90     E7 CC 02 FB | 	rdlong	local20, fp
25b94     20 CE 85 F1 | 	sub	fp, #32
25b98     01 CC 56 F2 | 	cmps	local20, #1 wc
25b9c     20 CE 05 31 |  if_ae	add	fp, #32
25ba0     E7 DC 02 3B |  if_ae	rdlong	local28, fp
25ba4     20 CE 85 31 |  if_ae	sub	fp, #32
25ba8     6E C1 82 31 |  if_ae	sub	local14, local28
25bac     D0 00 90 FD | 	jmp	#LR__3417
25bb0                 | LR__3411
25bb0     00 B2 06 F6 | 	mov	local07, #0
25bb4     1C A8 2E F4 | 	testbn	local02, #28 wz
25bb8     01 B2 06 A6 |  if_e	mov	local07, #1
25bbc     20 CE 05 F1 | 	add	fp, #32
25bc0     E7 CC 02 FB | 	rdlong	local20, fp
25bc4     20 CE 85 F1 | 	sub	fp, #32
25bc8     60 CD 52 F2 | 	cmps	local20, local14 wc
25bcc     18 00 90 3D |  if_ae	jmp	#LR__3412
25bd0     20 CE 05 F1 | 	add	fp, #32
25bd4     E7 D8 02 FB | 	rdlong	local26, fp
25bd8     20 CE 85 F1 | 	sub	fp, #32
25bdc     FF FF 7F FF 
25be0     FC D9 56 F2 | 	cmps	local26, ##-4 wc
25be4     08 00 90 3D |  if_ae	jmp	#LR__3413
25be8                 | LR__3412
25be8     01 CE 06 F6 | 	mov	local21, #1
25bec     90 00 90 FD | 	jmp	#LR__3417
25bf0                 | LR__3413
25bf0     20 CE 05 F1 | 	add	fp, #32
25bf4     E7 DC 02 FB | 	rdlong	local28, fp
25bf8     6E C1 82 F1 | 	sub	local14, local28
25bfc     0C CE 85 F1 | 	sub	fp, #12
25c00     E7 94 02 F6 | 	mov	arg02, fp
25c04     0C CE 05 F1 | 	add	fp, #12
25c08     E7 96 02 F6 | 	mov	arg03, fp
25c0c     20 CE 85 F1 | 	sub	fp, #32
25c10     60 99 62 F6 | 	neg	arg04, local14
25c14     55 93 02 F6 | 	mov	arg01, local03
25c18     57 9B 02 F6 | 	mov	arg05, local05
25c1c     D0 3E B0 FD | 	call	#__system__disassemble_0582
25c20     5C 00 90 FD | 	jmp	#LR__3417
25c24                 | LR__3414
25c24     00 CE 0E F2 | 	cmp	local21, #0 wz
25c28     28 00 90 AD |  if_e	jmp	#LR__3415
25c2c     14 CE 05 F1 | 	add	fp, #20
25c30     E7 94 02 F6 | 	mov	arg02, fp
25c34     0C CE 05 F1 | 	add	fp, #12
25c38     E7 96 02 F6 | 	mov	arg03, fp
25c3c     20 CE 85 F1 | 	sub	fp, #32
25c40     55 93 02 F6 | 	mov	arg01, local03
25c44     60 99 02 F6 | 	mov	arg04, local14
25c48     57 9B 02 F6 | 	mov	arg05, local05
25c4c     A0 3E B0 FD | 	call	#__system__disassemble_0582
25c50     2C 00 90 FD | 	jmp	#LR__3416
25c54                 | LR__3415
25c54     14 CE 05 F1 | 	add	fp, #20
25c58     E7 94 02 F6 | 	mov	arg02, fp
25c5c     0C CE 05 F1 | 	add	fp, #12
25c60     E7 96 02 F6 | 	mov	arg03, fp
25c64     20 CE 85 F1 | 	sub	fp, #32
25c68     60 DD 02 F6 | 	mov	local28, local14
25c6c     01 DC 06 F1 | 	add	local28, #1
25c70     6E 99 62 F6 | 	neg	arg04, local28
25c74     55 93 02 F6 | 	mov	arg01, local03
25c78     57 9B 02 F6 | 	mov	arg05, local05
25c7c     70 3E B0 FD | 	call	#__system__disassemble_0582
25c80                 | LR__3416
25c80                 | LR__3417
25c80     02 AE 0E F2 | 	cmp	local05, #2 wz
25c84     44 00 90 5D |  if_ne	jmp	#LR__3420
25c88     10 AE 06 F6 | 	mov	local05, #16
25c8c                 | LR__3418
25c8c     14 CE 05 F1 | 	add	fp, #20
25c90     E7 CC 0A FB | 	rdlong	local20, fp wz
25c94     14 CE 85 F1 | 	sub	fp, #20
25c98     30 00 90 AD |  if_e	jmp	#LR__3419
25c9c     14 CE 05 F1 | 	add	fp, #20
25ca0     E7 D8 02 FB | 	rdlong	local26, fp
25ca4     14 CE 85 F1 | 	sub	fp, #20
25ca8     00 80 00 FF 
25cac     00 D8 16 F2 | 	cmp	local26, ##16777216 wc
25cb0     18 00 90 3D |  if_ae	jmp	#LR__3419
25cb4     14 CE 05 F1 | 	add	fp, #20
25cb8     E7 CC 02 FB | 	rdlong	local20, fp
25cbc     01 CC 66 F0 | 	shl	local20, #1
25cc0     E7 CC 62 FC | 	wrlong	local20, fp
25cc4     14 CE 85 F1 | 	sub	fp, #20
25cc8     C0 FF 9F FD | 	jmp	#LR__3418
25ccc                 | LR__3419
25ccc                 | LR__3420
25ccc     70 CE 05 F1 | 	add	fp, #112
25cd0     E7 92 02 F6 | 	mov	arg01, fp
25cd4     5C CE 85 F1 | 	sub	fp, #92
25cd8     E7 94 02 FB | 	rdlong	arg02, fp
25cdc     14 CE 85 F1 | 	sub	fp, #20
25ce0     57 97 02 F6 | 	mov	arg03, local05
25ce4     01 98 06 F6 | 	mov	arg04, #1
25ce8     63 9B 02 F6 | 	mov	arg05, local17
25cec     8C 3D B0 FD | 	call	#__system___uitoa
25cf0     3D DF 02 F6 | 	mov	local29, result1
25cf4     20 CE 05 F1 | 	add	fp, #32
25cf8     E7 CC 02 FB | 	rdlong	local20, fp
25cfc     20 CE 85 F1 | 	sub	fp, #32
25d00     00 CC 56 F2 | 	cmps	local20, #0 wc
25d04     44 00 90 3D |  if_ae	jmp	#LR__3421
25d08     2D BA 06 F6 | 	mov	local11, #45
25d0c     B0 CE 05 F1 | 	add	fp, #176
25d10     E7 92 02 F6 | 	mov	arg01, fp
25d14     90 CE 85 F1 | 	sub	fp, #144
25d18     E7 D8 02 FB | 	rdlong	local26, fp
25d1c     20 CE 85 F1 | 	sub	fp, #32
25d20     6C DD 62 F6 | 	neg	local28, local26
25d24     0A D8 06 F6 | 	mov	local26, #10
25d28     5A E1 02 F6 | 	mov	local30, local08
25d2c     63 E3 02 F6 | 	mov	local31, local17
25d30     6E 95 02 F6 | 	mov	arg02, local28
25d34     0A 96 06 F6 | 	mov	arg03, #10
25d38     70 99 02 F6 | 	mov	arg04, local30
25d3c     71 9B 02 F6 | 	mov	arg05, local31
25d40     38 3D B0 FD | 	call	#__system___uitoa
25d44     3D E5 02 F6 | 	mov	local32, result1
25d48     3C 00 90 FD | 	jmp	#LR__3422
25d4c                 | LR__3421
25d4c     2B BA 06 F6 | 	mov	local11, #43
25d50     B0 CE 05 F1 | 	add	fp, #176
25d54     E7 92 02 F6 | 	mov	arg01, fp
25d58     90 CE 85 F1 | 	sub	fp, #144
25d5c     E7 DC 02 FB | 	rdlong	local28, fp
25d60     20 CE 85 F1 | 	sub	fp, #32
25d64     0A D8 06 F6 | 	mov	local26, #10
25d68     5A E1 02 F6 | 	mov	local30, local08
25d6c     63 E3 02 F6 | 	mov	local31, local17
25d70     6E 95 02 F6 | 	mov	arg02, local28
25d74     0A 96 06 F6 | 	mov	arg03, #10
25d78     70 99 02 F6 | 	mov	arg04, local30
25d7c     71 9B 02 F6 | 	mov	arg05, local31
25d80     F8 3C B0 FD | 	call	#__system___uitoa
25d84     3D E5 02 F6 | 	mov	local32, result1
25d88                 | LR__3422
25d88     00 CE 0E F2 | 	cmp	local21, #0 wz
25d8c     00 E6 06 56 |  if_ne	mov	local33, #0
25d90     00 E8 06 56 |  if_ne	mov	local34, #0
25d94     60 EB 02 56 |  if_ne	mov	local35, local14
25d98     01 EA 06 51 |  if_ne	add	local35, #1
25d9c     54 00 90 5D |  if_ne	jmp	#LR__3425
25da0     20 CE 05 F1 | 	add	fp, #32
25da4     E7 DC 02 FB | 	rdlong	local28, fp
25da8     20 CE 85 F1 | 	sub	fp, #32
25dac     00 DC 56 F2 | 	cmps	local28, #0 wc
25db0     24 00 90 3D |  if_ae	jmp	#LR__3423
25db4     20 CE 05 F1 | 	add	fp, #32
25db8     E7 DC 02 FB | 	rdlong	local28, fp
25dbc     6E E7 02 F6 | 	mov	local33, local28
25dc0     73 E9 02 F6 | 	mov	local34, local33
25dc4     20 CE 85 F1 | 	sub	fp, #32
25dc8     6E EB 02 F6 | 	mov	local35, local28
25dcc     60 EB 02 F1 | 	add	local35, local14
25dd0     01 EA 06 F1 | 	add	local35, #1
25dd4     1C 00 90 FD | 	jmp	#LR__3424
25dd8                 | LR__3423
25dd8     00 E8 06 F6 | 	mov	local34, #0
25ddc     20 CE 05 F1 | 	add	fp, #32
25de0     E7 E6 02 FB | 	rdlong	local33, fp
25de4     20 CE 85 F1 | 	sub	fp, #32
25de8     73 EB 02 F6 | 	mov	local35, local33
25dec     60 EB 02 F1 | 	add	local35, local14
25df0     01 EA 06 F1 | 	add	local35, #1
25df4                 | LR__3424
25df4                 | LR__3425
25df4     75 CD 02 F6 | 	mov	local20, local35
25df8     74 CD 82 F1 | 	sub	local20, local34
25dfc     01 CC 06 F1 | 	add	local20, #1
25e00     66 ED 02 F6 | 	mov	local36, local20
25e04     00 B0 0E F2 | 	cmp	local06, #0 wz
25e08     76 CD 02 56 |  if_ne	mov	local20, local36
25e0c     76 DD 02 56 |  if_ne	mov	local28, local36
25e10     01 DC 06 51 |  if_ne	add	local28, #1
25e14     6E ED 02 56 |  if_ne	mov	local36, local28
25e18     10 AE 0E F2 | 	cmp	local05, #16 wz
25e1c     02 EC 06 A1 |  if_e	add	local36, #2
25e20     00 CE 0E F2 | 	cmp	local21, #0 wz
25e24     02 DC 06 56 |  if_ne	mov	local28, #2
25e28     72 DD 02 51 |  if_ne	add	local28, local32
25e2c     6E ED 02 51 |  if_ne	add	local36, local28
25e30     41 EC 56 F2 | 	cmps	local36, #65 wc
25e34     01 7A 66 36 |  if_ae	neg	result1, #1
25e38     F0 01 90 3D |  if_ae	jmp	#LR__3450
25e3c     00 D6 0E F2 | 	cmp	local25, #0 wz
25e40     28 00 90 AD |  if_e	jmp	#LR__3426
25e44     58 95 02 F6 | 	mov	arg02, local06
25e48     5E 93 02 F6 | 	mov	arg01, local12
25e4c     5B 97 02 F6 | 	mov	arg03, local09
25e50     90 3E B0 FD | 	call	#__system__emitsign_0584
25e54     3D EF 02 F6 | 	mov	local37, result1
25e58     00 EE 56 F2 | 	cmps	local37, #0 wc
25e5c     77 7B 02 C6 |  if_b	mov	result1, local37
25e60     C8 01 90 CD |  if_b	jmp	#LR__3450
25e64     77 DD 02 F6 | 	mov	local28, local37
25e68     77 BD 02 F1 | 	add	local12, local37
25e6c                 | LR__3426
25e6c     74 F1 02 F6 | 	mov	local38, local34
25e70     D7 42 48 FB | 	callpa	#(@LR__3431-@LR__3427)>>2,fcache_load_ptr_
25e74                 | LR__3427
25e74     75 F1 52 F2 | 	cmps	local38, local35 wc
25e78     7C 00 90 3D |  if_ae	jmp	#LR__3432
25e7c     00 F0 56 F2 | 	cmps	local38, #0 wc
25e80     2C 00 90 CD |  if_b	jmp	#LR__3428
25e84     6F F1 52 F2 | 	cmps	local38, local29 wc
25e88     24 00 90 3D |  if_ae	jmp	#LR__3428
25e8c     5E CD 02 F6 | 	mov	local20, local12
25e90     78 D9 02 F6 | 	mov	local26, local38
25e94     E7 E0 02 F6 | 	mov	local30, fp
25e98     70 E0 06 F1 | 	add	local30, #112
25e9c     70 D9 02 F1 | 	add	local26, local30
25ea0     6C E3 C2 FA | 	rdbyte	local31, local26
25ea4     66 E3 42 FC | 	wrbyte	local31, local20
25ea8     01 BC 06 F1 | 	add	local12, #1
25eac     10 00 90 FD | 	jmp	#LR__3429
25eb0                 | LR__3428
25eb0     5E CD 02 F6 | 	mov	local20, local12
25eb4     30 D8 06 F6 | 	mov	local26, #48
25eb8     66 61 48 FC | 	wrbyte	#48, local20
25ebc     01 BC 06 F1 | 	add	local12, #1
25ec0                 | LR__3429
25ec0     73 F1 0A F2 | 	cmp	local38, local33 wz
25ec4     20 00 90 5D |  if_ne	jmp	#LR__3430
25ec8     00 C2 0E F2 | 	cmp	local15, #0 wz
25ecc     75 CD 02 A6 |  if_e	mov	local20, local35
25ed0     01 CC 86 A1 |  if_e	sub	local20, #1
25ed4     66 F1 52 A2 |  if_e	cmps	local38, local20 wc
25ed8     5E CD 02 D6 |  if_c_or_nz	mov	local20, local12
25edc     2E D8 06 D6 |  if_c_or_nz	mov	local26, #46
25ee0     66 5D 48 DC |  if_c_or_nz	wrbyte	#46, local20
25ee4     01 BC 06 D1 |  if_c_or_nz	add	local12, #1
25ee8                 | LR__3430
25ee8     78 DD 02 F6 | 	mov	local28, local38
25eec     01 DC 06 F1 | 	add	local28, #1
25ef0     6E F1 02 F6 | 	mov	local38, local28
25ef4     7C FF 9F FD | 	jmp	#LR__3427
25ef8                 | LR__3431
25ef8                 | LR__3432
25ef8     00 B2 0E F2 | 	cmp	local07, #0 wz
25efc     30 00 90 AD |  if_e	jmp	#LR__3436
25f00     01 BC 86 F1 | 	sub	local12, #1
25f04     D7 0C 48 FB | 	callpa	#(@LR__3434-@LR__3433)>>2,fcache_load_ptr_
25f08                 | LR__3433
25f08     5F BD 5A F2 | 	cmps	local12, local13 wcz
25f0c     10 00 90 ED |  if_be	jmp	#LR__3435
25f10     5E CD C2 FA | 	rdbyte	local20, local12
25f14     30 CC 0E F2 | 	cmp	local20, #48 wz
25f18     01 BC 86 A1 |  if_e	sub	local12, #1
25f1c     E8 FF 9F AD |  if_e	jmp	#LR__3433
25f20                 | LR__3434
25f20                 | LR__3435
25f20     5E CD C2 FA | 	rdbyte	local20, local12
25f24     2E CC 0E F2 | 	cmp	local20, #46 wz
25f28     01 BC 86 A1 |  if_e	sub	local12, #1
25f2c     01 BC 06 F1 | 	add	local12, #1
25f30                 | LR__3436
25f30     00 CE 0E F2 | 	cmp	local21, #0 wz
25f34     40 00 90 AD |  if_e	jmp	#LR__3439
25f38     5E D1 42 FC | 	wrbyte	local22, local12
25f3c     01 BC 06 F1 | 	add	local12, #1
25f40     5E BB 42 FC | 	wrbyte	local11, local12
25f44     00 F0 06 F6 | 	mov	local38, #0
25f48     01 BC 06 F1 | 	add	local12, #1
25f4c                 | LR__3437
25f4c     72 F1 52 F2 | 	cmps	local38, local32 wc
25f50     24 00 90 3D |  if_ae	jmp	#LR__3438
25f54     78 D9 02 F6 | 	mov	local26, local38
25f58     E7 E0 02 F6 | 	mov	local30, fp
25f5c     B0 E0 06 F1 | 	add	local30, #176
25f60     70 D9 02 F1 | 	add	local26, local30
25f64     6C E3 C2 FA | 	rdbyte	local31, local26
25f68     5E E3 42 FC | 	wrbyte	local31, local12
25f6c     01 F0 06 F1 | 	add	local38, #1
25f70     01 BC 06 F1 | 	add	local12, #1
25f74     D4 FF 9F FD | 	jmp	#LR__3437
25f78                 | LR__3438
25f78                 | LR__3439
25f78     5E 01 48 FC | 	wrbyte	#0, local12
25f7c                 | LR__3440
25f7c     00 CA 0E F2 | 	cmp	local19, #0 wz
25f80     00 B8 0E 52 |  if_ne	cmp	local10, #0 wz
25f84     94 00 90 AD |  if_e	jmp	#LR__3449
25f88     5F 93 02 F6 | 	mov	arg01, local13
25f8c     49 F3 02 F6 | 	mov	local39, arg01
25f90     D7 06 48 FB | 	callpa	#(@LR__3442-@LR__3441)>>2,fcache_load_ptr_
25f94                 | LR__3441
25f94     79 7B CA FA | 	rdbyte	result1, local39 wz
25f98     01 F2 06 51 |  if_ne	add	local39, #1
25f9c     F4 FF 9F 5D |  if_ne	jmp	#LR__3441
25fa0                 | LR__3442
25fa0     49 F3 82 F1 | 	sub	local39, arg01
25fa4     65 F3 5A F2 | 	cmps	local39, local19 wcz
25fa8     70 00 90 ED |  if_be	jmp	#LR__3449
25fac     5F F5 02 F6 | 	mov	local40, local13
25fb0     00 CE 0E F2 | 	cmp	local21, #0 wz
25fb4     00 C0 06 56 |  if_ne	mov	local14, #0
25fb8     65 F7 02 56 |  if_ne	mov	local41, local19
25fbc     01 CA 86 A1 |  if_e	sub	local19, #1
25fc0     60 CB 82 A1 |  if_e	sub	local19, local14
25fc4     65 F7 02 A6 |  if_e	mov	local41, local19
25fc8     00 F6 0E F2 | 	cmp	local41, #0 wz
25fcc     14 00 90 AD |  if_e	jmp	#LR__3445
25fd0     D7 08 48 FB | 	callpa	#(@LR__3444-@LR__3443)>>2,fcache_load_ptr_
25fd4                 | LR__3443
25fd4     7A 55 48 FC | 	wrbyte	#42, local40
25fd8     01 F6 8E F1 | 	sub	local41, #1 wz
25fdc     01 F4 06 F1 | 	add	local40, #1
25fe0     F0 FF 9F 5D |  if_ne	jmp	#LR__3443
25fe4                 | LR__3444
25fe4                 | LR__3445
25fe4     00 C0 0E F2 | 	cmp	local14, #0 wz
25fe8     2C 00 90 AD |  if_e	jmp	#LR__3448
25fec     7A CD 02 F6 | 	mov	local20, local40
25ff0     66 5D 48 FC | 	wrbyte	#46, local20
25ff4     00 F6 06 F6 | 	mov	local41, #0
25ff8     01 F4 06 F1 | 	add	local40, #1
25ffc     D7 0C 48 FB | 	callpa	#(@LR__3447-@LR__3446)>>2,fcache_load_ptr_
26000                 | LR__3446
26000     60 F7 52 F2 | 	cmps	local41, local14 wc
26004     7A CD 02 C6 |  if_b	mov	local20, local40
26008     01 F4 06 C1 |  if_b	add	local40, #1
2600c     66 55 48 CC |  if_b	wrbyte	#42, local20
26010     01 F6 06 C1 |  if_b	add	local41, #1
26014     E8 FF 9F CD |  if_b	jmp	#LR__3446
26018                 | LR__3447
26018                 | LR__3448
26018     7A 01 48 FC | 	wrbyte	#0, local40
2601c                 | LR__3449
2601c     53 93 02 F6 | 	mov	arg01, local01
26020     54 95 02 F6 | 	mov	arg02, local02
26024     5F 97 02 F6 | 	mov	arg03, local13
26028     8C F6 BF FD | 	call	#__system___fmtstr
2602c                 | LR__3450
2602c     E7 F0 03 F6 | 	mov	ptra, fp
26030     F2 00 A0 FD | 	call	#popregs_
26034                 | __system___fmtfloat_ret
26034     2D 00 64 FD | 	ret
26038                 | 
26038                 | __system__Left_S
26038     04 CA 05 F6 | 	mov	COUNT_, #4
2603c     E8 00 A0 FD | 	call	#pushregs_
26040     49 A7 02 F6 | 	mov	local01, arg01
26044     4A A9 02 F6 | 	mov	local02, arg02
26048     01 A8 56 F2 | 	cmps	local02, #1 wc
2604c     91 01 00 CF 
26050     72 7A 06 C6 |  if_b	mov	result1, ##@LR__5453
26054     5C 00 90 CD |  if_b	jmp	#LR__3463
26058     53 93 02 F6 | 	mov	arg01, local01
2605c     49 AB 02 F6 | 	mov	local03, arg01
26060     D7 06 48 FB | 	callpa	#(@LR__3461-@LR__3460)>>2,fcache_load_ptr_
26064                 | LR__3460
26064     55 7B CA FA | 	rdbyte	result1, local03 wz
26068     01 AA 06 51 |  if_ne	add	local03, #1
2606c     F4 FF 9F 5D |  if_ne	jmp	#LR__3460
26070                 | LR__3461
26070     49 AB 82 F1 | 	sub	local03, arg01
26074     55 7B 02 F6 | 	mov	result1, local03
26078     54 7B 5A F2 | 	cmps	result1, local02 wcz
2607c     53 7B 02 E6 |  if_be	mov	result1, local01
26080     30 00 90 ED |  if_be	jmp	#LR__3463
26084     54 93 02 F6 | 	mov	arg01, local02
26088     02 92 06 F1 | 	add	arg01, #2
2608c     08 21 B0 FD | 	call	#__system___gc_alloc_managed
26090     3D AD 0A F6 | 	mov	local04, result1 wz
26094     18 00 90 AD |  if_e	jmp	#LR__3462
26098     56 93 02 F6 | 	mov	arg01, local04
2609c     53 95 02 F6 | 	mov	arg02, local01
260a0     54 97 02 F6 | 	mov	arg03, local02
260a4     98 E5 BF FD | 	call	#__system____builtin_memmove
260a8     56 A9 02 F1 | 	add	local02, local04
260ac     54 01 48 FC | 	wrbyte	#0, local02
260b0                 | LR__3462
260b0     56 7B 02 F6 | 	mov	result1, local04
260b4                 | LR__3463
260b4     E7 F0 03 F6 | 	mov	ptra, fp
260b8     F2 00 A0 FD | 	call	#popregs_
260bc                 | __system__Left_S_ret
260bc     2D 00 64 FD | 	ret
260c0                 | 
260c0                 | __system__Right_S
260c0     05 CA 05 F6 | 	mov	COUNT_, #5
260c4     E8 00 A0 FD | 	call	#pushregs_
260c8     49 A7 02 F6 | 	mov	local01, arg01
260cc     4A A9 02 F6 | 	mov	local02, arg02
260d0     01 A8 56 F2 | 	cmps	local02, #1 wc
260d4     91 01 00 CF 
260d8     73 7A 06 C6 |  if_b	mov	result1, ##@LR__5454
260dc     64 00 90 CD |  if_b	jmp	#LR__3473
260e0     53 93 02 F6 | 	mov	arg01, local01
260e4     49 AB 02 F6 | 	mov	local03, arg01
260e8     D7 06 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
260ec                 | LR__3470
260ec     55 7B CA FA | 	rdbyte	result1, local03 wz
260f0     01 AA 06 51 |  if_ne	add	local03, #1
260f4     F4 FF 9F 5D |  if_ne	jmp	#LR__3470
260f8                 | LR__3471
260f8     49 AB 82 F1 | 	sub	local03, arg01
260fc     55 7B 02 F6 | 	mov	result1, local03
26100     3D AD 02 F6 | 	mov	local04, result1
26104     54 AD 5A F2 | 	cmps	local04, local02 wcz
26108     53 7B 02 E6 |  if_be	mov	result1, local01
2610c     34 00 90 ED |  if_be	jmp	#LR__3473
26110     54 93 02 F6 | 	mov	arg01, local02
26114     02 92 06 F1 | 	add	arg01, #2
26118     7C 20 B0 FD | 	call	#__system___gc_alloc_managed
2611c     3D AF 0A F6 | 	mov	local05, result1 wz
26120     1C 00 90 AD |  if_e	jmp	#LR__3472
26124     54 AD 82 F1 | 	sub	local04, local02
26128     53 AD 02 F1 | 	add	local04, local01
2612c     01 A8 06 F1 | 	add	local02, #1
26130     57 93 02 F6 | 	mov	arg01, local05
26134     56 95 02 F6 | 	mov	arg02, local04
26138     54 97 02 F6 | 	mov	arg03, local02
2613c     00 E5 BF FD | 	call	#__system____builtin_memmove
26140                 | LR__3472
26140     57 7B 02 F6 | 	mov	result1, local05
26144                 | LR__3473
26144     E7 F0 03 F6 | 	mov	ptra, fp
26148     F2 00 A0 FD | 	call	#popregs_
2614c                 | __system__Right_S_ret
2614c     2D 00 64 FD | 	ret
26150                 | 
26150                 | __system__Mid_S
26150     05 CA 05 F6 | 	mov	COUNT_, #5
26154     E8 00 A0 FD | 	call	#pushregs_
26158     49 A7 02 F6 | 	mov	local01, arg01
2615c     4A A9 02 F6 | 	mov	local02, arg02
26160     01 96 56 F2 | 	cmps	arg03, #1 wc
26164     91 01 00 CF 
26168     74 7A 06 C6 |  if_b	mov	result1, ##@LR__5455
2616c     80 00 90 CD |  if_b	jmp	#LR__3483
26170     01 A8 86 F1 | 	sub	local02, #1
26174     00 A8 56 F3 | 	fges	local02, #0 wc
26178     53 93 02 F6 | 	mov	arg01, local01
2617c     49 AB 02 F6 | 	mov	local03, arg01
26180     D7 06 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
26184                 | LR__3480
26184     55 7B CA FA | 	rdbyte	result1, local03 wz
26188     01 AA 06 51 |  if_ne	add	local03, #1
2618c     F4 FF 9F 5D |  if_ne	jmp	#LR__3480
26190                 | LR__3481
26190     49 AB 82 F1 | 	sub	local03, arg01
26194     55 7B 02 F6 | 	mov	result1, local03
26198     3D 95 02 F6 | 	mov	arg02, result1
2619c     54 95 52 F2 | 	cmps	arg02, local02 wc
261a0     91 01 00 CF 
261a4     75 7A 06 C6 |  if_b	mov	result1, ##@LR__5456
261a8     44 00 90 CD |  if_b	jmp	#LR__3483
261ac     4A AD 02 F6 | 	mov	local04, arg02
261b0     54 AD 82 F1 | 	sub	local04, local02
261b4     4B AD 5A F2 | 	cmps	local04, arg03 wcz
261b8     4B AD 02 16 |  if_a	mov	local04, arg03
261bc     56 93 02 F6 | 	mov	arg01, local04
261c0     02 92 06 F1 | 	add	arg01, #2
261c4     D0 1F B0 FD | 	call	#__system___gc_alloc_managed
261c8     3D AF 0A F6 | 	mov	local05, result1 wz
261cc     1C 00 90 AD |  if_e	jmp	#LR__3482
261d0     53 A9 02 F1 | 	add	local02, local01
261d4     57 93 02 F6 | 	mov	arg01, local05
261d8     54 95 02 F6 | 	mov	arg02, local02
261dc     56 97 02 F6 | 	mov	arg03, local04
261e0     5C E4 BF FD | 	call	#__system____builtin_memmove
261e4     57 AD 02 F1 | 	add	local04, local05
261e8     56 01 48 FC | 	wrbyte	#0, local04
261ec                 | LR__3482
261ec     57 7B 02 F6 | 	mov	result1, local05
261f0                 | LR__3483
261f0     E7 F0 03 F6 | 	mov	ptra, fp
261f4     F2 00 A0 FD | 	call	#popregs_
261f8                 | __system__Mid_S_ret
261f8     2D 00 64 FD | 	ret
261fc                 | 
261fc                 | __system__Chr_S
261fc     01 CA 05 F6 | 	mov	COUNT_, #1
26200     E8 00 A0 FD | 	call	#pushregs_
26204     49 A7 02 F6 | 	mov	local01, arg01
26208     03 92 06 F6 | 	mov	arg01, #3
2620c     88 1F B0 FD | 	call	#__system___gc_alloc_managed
26210     00 7A 4E F2 | 	cmps	result1, #0 wz
26214     3D A7 42 5C |  if_ne	wrbyte	local01, result1
26218     01 7A 06 51 |  if_ne	add	result1, #1
2621c     3D 01 48 5C |  if_ne	wrbyte	#0, result1
26220     01 7A 86 51 |  if_ne	sub	result1, #1
26224     E7 F0 03 F6 | 	mov	ptra, fp
26228     F2 00 A0 FD | 	call	#popregs_
2622c                 | __system__Chr_S_ret
2622c     2D 00 64 FD | 	ret
26230                 | 
26230                 | __system__str_S
26230     02 CA 05 F6 | 	mov	COUNT_, #2
26234     E8 00 A0 FD | 	call	#pushregs_
26238     49 A7 02 F6 | 	mov	local01, arg01
2623c     10 92 06 F6 | 	mov	arg01, #16
26240     54 1F B0 FD | 	call	#__system___gc_alloc_managed
26244     3D A9 0A F6 | 	mov	local02, result1 wz
26248     30 00 90 AD |  if_e	jmp	#LR__3490
2624c     F8 93 02 F6 | 	mov	arg01, ptra
26250     08 F0 07 F1 | 	add	ptra, #8
26254     49 A9 62 FC | 	wrlong	local02, arg01
26258     04 92 06 F1 | 	add	arg01, #4
2625c     49 01 68 FC | 	wrlong	#0, arg01
26260     04 92 86 F1 | 	sub	arg01, #4
26264     00 98 05 FF 
26268     00 92 46 F5 | 	or	arg01, ##187695104
2626c     00 94 06 F6 | 	mov	arg02, #0
26270     53 97 02 F6 | 	mov	arg03, local01
26274     67 98 06 F6 | 	mov	arg04, #103
26278     5C F6 BF FD | 	call	#__system___fmtfloat
2627c                 | LR__3490
2627c     54 7B 02 F6 | 	mov	result1, local02
26280     E7 F0 03 F6 | 	mov	ptra, fp
26284     F2 00 A0 FD | 	call	#popregs_
26288                 | __system__str_S_ret
26288     2D 00 64 FD | 	ret
2628c                 | 
2628c                 | __system__Number_S
2628c     08 CA 05 F6 | 	mov	COUNT_, #8
26290     E8 00 A0 FD | 	call	#pushregs_
26294     49 A7 02 F6 | 	mov	local01, arg01
26298     4A A9 0A F6 | 	mov	local02, arg02 wz
2629c     4B AB 02 F6 | 	mov	local03, arg03
262a0     3C 00 90 5D |  if_ne	jmp	#LR__3502
262a4     01 A8 06 F6 | 	mov	local02, #1
262a8     55 AD 02 F6 | 	mov	local04, local03
262ac     01 AE 06 F6 | 	mov	local05, #1
262b0     D7 16 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
262b4                 | LR__3500
262b4     00 B0 06 F6 | 	mov	local06, #0
262b8     53 AD 1A F2 | 	cmp	local04, local01 wcz
262bc     01 B0 66 E6 |  if_be	neg	local06, #1
262c0     56 AF 12 F2 | 	cmp	local05, local04 wc
262c4     59 B3 A2 F1 | 	subx	local07, local07
262c8     59 B1 CA F7 | 	test	local06, local07 wz
262cc     55 AD 02 5D |  if_ne	qmul	local04, local03
262d0     56 AF 02 56 |  if_ne	mov	local05, local04
262d4     01 A8 06 51 |  if_ne	add	local02, #1
262d8     18 AC 62 5D |  if_ne	getqx	local04
262dc     D4 FF 9F 5D |  if_ne	jmp	#LR__3500
262e0                 | LR__3501
262e0                 | LR__3502
262e0     20 A8 36 F3 | 	fle	local02, #32 wc
262e4     54 93 02 F6 | 	mov	arg01, local02
262e8     02 92 06 F1 | 	add	arg01, #2
262ec     A8 1E B0 FD | 	call	#__system___gc_alloc_managed
262f0     3D B1 02 F6 | 	mov	local06, result1
262f4     54 B3 02 F6 | 	mov	local07, local02
262f8     58 B3 02 F1 | 	add	local07, local06
262fc     59 01 48 FC | 	wrbyte	#0, local07
26300     D7 1A 48 FB | 	callpa	#(@LR__3504-@LR__3503)>>2,fcache_load_ptr_
26304                 | LR__3503
26304     01 A8 16 F2 | 	cmp	local02, #1 wc
26308     2C 00 90 CD |  if_b	jmp	#LR__3505
2630c     55 A7 12 FD | 	qdiv	local01, local03
26310     01 A8 86 F1 | 	sub	local02, #1
26314     54 B3 02 F6 | 	mov	local07, local02
26318     58 B3 02 F1 | 	add	local07, local06
2631c     19 B4 62 FD | 	getqy	local08
26320     0A B4 16 F2 | 	cmp	local08, #10 wc
26324     30 B4 06 C1 |  if_b	add	local08, #48
26328     37 B4 06 31 |  if_ae	add	local08, #55
2632c     59 B5 42 FC | 	wrbyte	local08, local07
26330     18 A6 62 FD | 	getqx	local01
26334     CC FF 9F FD | 	jmp	#LR__3503
26338                 | LR__3504
26338                 | LR__3505
26338     58 7B 02 F6 | 	mov	result1, local06
2633c     E7 F0 03 F6 | 	mov	ptra, fp
26340     F2 00 A0 FD | 	call	#popregs_
26344                 | __system__Number_S_ret
26344     2D 00 64 FD | 	ret
26348                 | 
26348                 | __system__LCase_S
26348     07 CA 05 F6 | 	mov	COUNT_, #7
2634c     E8 00 A0 FD | 	call	#pushregs_
26350     49 A7 02 F6 | 	mov	local01, arg01
26354     49 A9 02 F6 | 	mov	local02, arg01
26358     D7 06 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
2635c                 | LR__3510
2635c     54 7B CA FA | 	rdbyte	result1, local02 wz
26360     01 A8 06 51 |  if_ne	add	local02, #1
26364     F4 FF 9F 5D |  if_ne	jmp	#LR__3510
26368                 | LR__3511
26368     49 A9 82 F1 | 	sub	local02, arg01
2636c     54 7B 02 F6 | 	mov	result1, local02
26370     3D A9 0A F6 | 	mov	local02, result1 wz
26374     91 01 00 AF 
26378     76 7A 06 A6 |  if_e	mov	result1, ##@LR__5457
2637c     7C 00 90 AD |  if_e	jmp	#LR__3517
26380     54 93 02 F6 | 	mov	arg01, local02
26384     02 92 06 F1 | 	add	arg01, #2
26388     0C 1E B0 FD | 	call	#__system___gc_alloc_managed
2638c     3D AB 0A F6 | 	mov	local03, result1 wz
26390     64 00 90 AD |  if_e	jmp	#LR__3516
26394     01 AC 66 F6 | 	neg	local04, #1
26398     D7 26 48 FB | 	callpa	#(@LR__3515-@LR__3512)>>2,fcache_load_ptr_
2639c                 | LR__3512
2639c     01 AC 06 F1 | 	add	local04, #1
263a0     56 AF 02 F6 | 	mov	local05, local04
263a4     53 AF 02 F1 | 	add	local05, local01
263a8     57 B1 C2 FA | 	rdbyte	local06, local05
263ac     41 B0 56 F2 | 	cmps	local06, #65 wc
263b0     18 00 90 CD |  if_b	jmp	#LR__3513
263b4     5B B0 56 F2 | 	cmps	local06, #91 wc
263b8     56 B3 02 C6 |  if_b	mov	local07, local04
263bc     55 B3 02 C1 |  if_b	add	local07, local03
263c0     20 B0 06 C1 |  if_b	add	local06, #32
263c4     59 B1 42 CC |  if_b	wrbyte	local06, local07
263c8     0C 00 90 CD |  if_b	jmp	#LR__3514
263cc                 | LR__3513
263cc     56 B3 02 F6 | 	mov	local07, local04
263d0     55 B3 02 F1 | 	add	local07, local03
263d4     59 B1 42 FC | 	wrbyte	local06, local07
263d8                 | LR__3514
263d8     54 B1 02 F6 | 	mov	local06, local02
263dc     01 B0 86 F1 | 	sub	local06, #1
263e0     58 AD 0A F2 | 	cmp	local04, local06 wz
263e4     B4 FF 9F 5D |  if_ne	jmp	#LR__3512
263e8                 | LR__3515
263e8     55 A9 02 F1 | 	add	local02, local03
263ec     54 01 48 FC | 	wrbyte	#0, local02
263f0     55 7B 02 F6 | 	mov	result1, local03
263f4     04 00 90 FD | 	jmp	#LR__3517
263f8                 | LR__3516
263f8     55 7B 02 F6 | 	mov	result1, local03
263fc                 | LR__3517
263fc     E7 F0 03 F6 | 	mov	ptra, fp
26400     F2 00 A0 FD | 	call	#popregs_
26404                 | __system__LCase_S_ret
26404     2D 00 64 FD | 	ret
26408                 | 
26408                 | __system__LTrim_S
26408     05 CA 05 F6 | 	mov	COUNT_, #5
2640c     E8 00 A0 FD | 	call	#pushregs_
26410     49 A7 02 F6 | 	mov	local01, arg01
26414     49 A9 02 F6 | 	mov	local02, arg01
26418     D7 06 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
2641c                 | LR__3520
2641c     54 7B CA FA | 	rdbyte	result1, local02 wz
26420     01 A8 06 51 |  if_ne	add	local02, #1
26424     F4 FF 9F 5D |  if_ne	jmp	#LR__3520
26428                 | LR__3521
26428     49 A9 82 F1 | 	sub	local02, arg01
2642c     54 7B 02 F6 | 	mov	result1, local02
26430     3D A9 0A F6 | 	mov	local02, result1 wz
26434     91 01 00 AF 
26438     77 7A 06 A6 |  if_e	mov	result1, ##@LR__5458
2643c     7C 00 90 AD |  if_e	jmp	#LR__3526
26440     00 AA 06 F6 | 	mov	local03, #0
26444     54 AD 02 F6 | 	mov	local04, local02
26448                 | LR__3522
26448     56 AB 52 F2 | 	cmps	local03, local04 wc
2644c     68 00 90 3D |  if_ae	jmp	#LR__3525
26450     55 97 02 F6 | 	mov	arg03, local03
26454     53 97 02 F1 | 	add	arg03, local01
26458     4B 97 C2 FA | 	rdbyte	arg03, arg03
2645c     20 96 0E F2 | 	cmp	arg03, #32 wz
26460     4C 00 90 AD |  if_e	jmp	#LR__3524
26464     54 93 02 F6 | 	mov	arg01, local02
26468     55 93 82 F1 | 	sub	arg01, local03
2646c     02 92 06 F1 | 	add	arg01, #2
26470     24 1D B0 FD | 	call	#__system___gc_alloc_managed
26474     3D AF 0A F6 | 	mov	local05, result1 wz
26478     2C 00 90 AD |  if_e	jmp	#LR__3523
2647c     55 95 02 F6 | 	mov	arg02, local03
26480     53 95 02 F1 | 	add	arg02, local01
26484     54 97 02 F6 | 	mov	arg03, local02
26488     55 97 82 F1 | 	sub	arg03, local03
2648c     57 93 02 F6 | 	mov	arg01, local05
26490     AC E1 BF FD | 	call	#__system____builtin_memmove
26494     55 A9 82 F1 | 	sub	local02, local03
26498     57 A9 02 F1 | 	add	local02, local05
2649c     54 01 48 FC | 	wrbyte	#0, local02
264a0     57 7B 02 F6 | 	mov	result1, local05
264a4     14 00 90 FD | 	jmp	#LR__3526
264a8                 | LR__3523
264a8     57 7B 02 F6 | 	mov	result1, local05
264ac     0C 00 90 FD | 	jmp	#LR__3526
264b0                 | LR__3524
264b0     01 AA 06 F1 | 	add	local03, #1
264b4     90 FF 9F FD | 	jmp	#LR__3522
264b8                 | LR__3525
264b8     53 7B 02 F6 | 	mov	result1, local01
264bc                 | LR__3526
264bc     E7 F0 03 F6 | 	mov	ptra, fp
264c0     F2 00 A0 FD | 	call	#popregs_
264c4                 | __system__LTrim_S_ret
264c4     2D 00 64 FD | 	ret
264c8                 | 
264c8                 | __system__RTrim_S
264c8     04 CA 05 F6 | 	mov	COUNT_, #4
264cc     E8 00 A0 FD | 	call	#pushregs_
264d0     49 A7 02 F6 | 	mov	local01, arg01
264d4     49 A9 02 F6 | 	mov	local02, arg01
264d8     D7 06 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
264dc                 | LR__3530
264dc     54 7B CA FA | 	rdbyte	result1, local02 wz
264e0     01 A8 06 51 |  if_ne	add	local02, #1
264e4     F4 FF 9F 5D |  if_ne	jmp	#LR__3530
264e8                 | LR__3531
264e8     49 A9 82 F1 | 	sub	local02, arg01
264ec     54 7B 02 F6 | 	mov	result1, local02
264f0     3D A9 0A F6 | 	mov	local02, result1 wz
264f4     91 01 00 AF 
264f8     78 7A 06 A6 |  if_e	mov	result1, ##@LR__5459
264fc     74 00 90 AD |  if_e	jmp	#LR__3535
26500     54 AB 02 F6 | 	mov	local03, local02
26504     01 AA 86 F1 | 	sub	local03, #1
26508                 | LR__3532
26508     55 95 02 F6 | 	mov	arg02, local03
2650c     53 95 02 F1 | 	add	arg02, local01
26510     4A A9 C2 FA | 	rdbyte	local02, arg02
26514     20 A8 0E F2 | 	cmp	local02, #32 wz
26518     44 00 90 AD |  if_e	jmp	#LR__3534
2651c     55 93 02 F6 | 	mov	arg01, local03
26520     02 92 06 F1 | 	add	arg01, #2
26524     70 1C B0 FD | 	call	#__system___gc_alloc_managed
26528     3D AD 0A F6 | 	mov	local04, result1 wz
2652c     28 00 90 AD |  if_e	jmp	#LR__3533
26530     55 97 02 F6 | 	mov	arg03, local03
26534     01 96 06 F1 | 	add	arg03, #1
26538     56 93 02 F6 | 	mov	arg01, local04
2653c     53 95 02 F6 | 	mov	arg02, local01
26540     FC E0 BF FD | 	call	#__system____builtin_memmove
26544     01 AA 06 F1 | 	add	local03, #1
26548     56 AB 02 F1 | 	add	local03, local04
2654c     55 01 48 FC | 	wrbyte	#0, local03
26550     56 7B 02 F6 | 	mov	result1, local04
26554     1C 00 90 FD | 	jmp	#LR__3535
26558                 | LR__3533
26558     56 7B 02 F6 | 	mov	result1, local04
2655c     14 00 90 FD | 	jmp	#LR__3535
26560                 | LR__3534
26560     01 AA 86 F1 | 	sub	local03, #1
26564     00 AA 56 F2 | 	cmps	local03, #0 wc
26568     9C FF 9F 3D |  if_ae	jmp	#LR__3532
2656c     91 01 00 FF 
26570     79 7A 06 F6 | 	mov	result1, ##@LR__5460
26574                 | LR__3535
26574     E7 F0 03 F6 | 	mov	ptra, fp
26578     F2 00 A0 FD | 	call	#popregs_
2657c                 | __system__RTrim_S_ret
2657c     2D 00 64 FD | 	ret
26580                 | 
26580                 | __system__Instr
26580     07 CA 05 F6 | 	mov	COUNT_, #7
26584     E8 00 A0 FD | 	call	#pushregs_
26588     49 A7 02 F6 | 	mov	local01, arg01
2658c     4A A9 02 F6 | 	mov	local02, arg02
26590     4B AB 02 F6 | 	mov	local03, arg03
26594     55 93 02 F6 | 	mov	arg01, local03
26598     49 AD 02 F6 | 	mov	local04, arg01
2659c     D7 06 48 FB | 	callpa	#(@LR__3541-@LR__3540)>>2,fcache_load_ptr_
265a0                 | LR__3540
265a0     56 7B CA FA | 	rdbyte	result1, local04 wz
265a4     01 AC 06 51 |  if_ne	add	local04, #1
265a8     F4 FF 9F 5D |  if_ne	jmp	#LR__3540
265ac                 | LR__3541
265ac     49 AD 82 F1 | 	sub	local04, arg01
265b0     56 AF 02 F6 | 	mov	local05, local04
265b4     54 93 02 F6 | 	mov	arg01, local02
265b8     49 AD 02 F6 | 	mov	local04, arg01
265bc     D7 06 48 FB | 	callpa	#(@LR__3543-@LR__3542)>>2,fcache_load_ptr_
265c0                 | LR__3542
265c0     56 7B CA FA | 	rdbyte	result1, local04 wz
265c4     01 AC 06 51 |  if_ne	add	local04, #1
265c8     F4 FF 9F 5D |  if_ne	jmp	#LR__3542
265cc                 | LR__3543
265cc     49 AD 82 F1 | 	sub	local04, arg01
265d0     56 7B 02 F6 | 	mov	result1, local04
265d4     3D 99 0A F6 | 	mov	arg04, result1 wz
265d8     00 7A 06 A6 |  if_e	mov	result1, #0
265dc     98 00 90 AD |  if_e	jmp	#LR__3547
265e0     00 AE 0E F2 | 	cmp	local05, #0 wz
265e4     00 7A 06 A6 |  if_e	mov	result1, #0
265e8     8C 00 90 AD |  if_e	jmp	#LR__3547
265ec     4C A7 5A F2 | 	cmps	local01, arg04 wcz
265f0     00 7A 06 16 |  if_a	mov	result1, #0
265f4     80 00 90 1D |  if_a	jmp	#LR__3547
265f8     01 A6 56 F2 | 	cmps	local01, #1 wc
265fc     01 A6 06 C6 |  if_b	mov	local01, #1
26600     55 B1 C2 FA | 	rdbyte	local06, local03
26604     01 AE 0E F2 | 	cmp	local05, #1 wz
26608     18 00 90 5D |  if_ne	jmp	#LR__3544
2660c     54 93 02 F6 | 	mov	arg01, local02
26610     58 95 02 F6 | 	mov	arg02, local06
26614     53 97 02 F6 | 	mov	arg03, local01
26618     00 98 06 F6 | 	mov	arg04, #0
2661c     C4 37 B0 FD | 	call	#__system____ScanForChar
26620     54 00 90 FD | 	jmp	#LR__3547
26624                 | LR__3544
26624     53 B3 02 F6 | 	mov	local07, local01
26628                 | LR__3545
26628     54 93 02 F6 | 	mov	arg01, local02
2662c     58 95 02 F6 | 	mov	arg02, local06
26630     59 97 02 F6 | 	mov	arg03, local07
26634     00 98 06 F6 | 	mov	arg04, #0
26638     A8 37 B0 FD | 	call	#__system____ScanForChar
2663c     3D B3 0A F6 | 	mov	local07, result1 wz
26640     30 00 90 AD |  if_e	jmp	#LR__3546
26644     57 97 02 F6 | 	mov	arg03, local05
26648     54 93 02 F6 | 	mov	arg01, local02
2664c     59 95 02 F6 | 	mov	arg02, local07
26650     FC FA BF FD | 	call	#__system__Mid_S
26654     3D 93 02 F6 | 	mov	arg01, result1
26658     55 95 02 F6 | 	mov	arg02, local03
2665c     58 E1 BF FD | 	call	#__system___string_cmp
26660     00 7A 0E F2 | 	cmp	result1, #0 wz
26664     59 7B 02 A6 |  if_e	mov	result1, local07
26668     0C 00 90 AD |  if_e	jmp	#LR__3547
2666c     57 B3 02 F1 | 	add	local07, local05
26670     B4 FF 9F FD | 	jmp	#LR__3545
26674                 | LR__3546
26674     00 7A 06 F6 | 	mov	result1, #0
26678                 | LR__3547
26678     E7 F0 03 F6 | 	mov	ptra, fp
2667c     F2 00 A0 FD | 	call	#popregs_
26680                 | __system__Instr_ret
26680     2D 00 64 FD | 	ret
26684                 | 
26684                 | __system__InstrRev
26684     07 CA 05 F6 | 	mov	COUNT_, #7
26688     E8 00 A0 FD | 	call	#pushregs_
2668c     49 A7 02 F6 | 	mov	local01, arg01
26690     4A A9 02 F6 | 	mov	local02, arg02
26694     4B AB 02 F6 | 	mov	local03, arg03
26698     55 93 02 F6 | 	mov	arg01, local03
2669c     49 AD 02 F6 | 	mov	local04, arg01
266a0     D7 06 48 FB | 	callpa	#(@LR__3551-@LR__3550)>>2,fcache_load_ptr_
266a4                 | LR__3550
266a4     56 7B CA FA | 	rdbyte	result1, local04 wz
266a8     01 AC 06 51 |  if_ne	add	local04, #1
266ac     F4 FF 9F 5D |  if_ne	jmp	#LR__3550
266b0                 | LR__3551
266b0     49 AD 82 F1 | 	sub	local04, arg01
266b4     56 AF 02 F6 | 	mov	local05, local04
266b8     54 93 02 F6 | 	mov	arg01, local02
266bc     49 AD 02 F6 | 	mov	local04, arg01
266c0     D7 06 48 FB | 	callpa	#(@LR__3553-@LR__3552)>>2,fcache_load_ptr_
266c4                 | LR__3552
266c4     56 7B CA FA | 	rdbyte	result1, local04 wz
266c8     01 AC 06 51 |  if_ne	add	local04, #1
266cc     F4 FF 9F 5D |  if_ne	jmp	#LR__3552
266d0                 | LR__3553
266d0     49 AD 82 F1 | 	sub	local04, arg01
266d4     56 7B 02 F6 | 	mov	result1, local04
266d8     3D 99 0A F6 | 	mov	arg04, result1 wz
266dc     00 7A 06 A6 |  if_e	mov	result1, #0
266e0     98 00 90 AD |  if_e	jmp	#LR__3557
266e4     00 AE 0E F2 | 	cmp	local05, #0 wz
266e8     00 7A 06 A6 |  if_e	mov	result1, #0
266ec     8C 00 90 AD |  if_e	jmp	#LR__3557
266f0     4C A7 5A F2 | 	cmps	local01, arg04 wcz
266f4     4C A7 02 16 |  if_a	mov	local01, arg04
266f8     01 A6 56 F2 | 	cmps	local01, #1 wc
266fc     01 A6 06 C6 |  if_b	mov	local01, #1
26700     55 B1 C2 FA | 	rdbyte	local06, local03
26704     01 AE 0E F2 | 	cmp	local05, #1 wz
26708     18 00 90 5D |  if_ne	jmp	#LR__3554
2670c     54 93 02 F6 | 	mov	arg01, local02
26710     58 95 02 F6 | 	mov	arg02, local06
26714     53 97 02 F6 | 	mov	arg03, local01
26718     01 98 06 F6 | 	mov	arg04, #1
2671c     C4 36 B0 FD | 	call	#__system____ScanForChar
26720     58 00 90 FD | 	jmp	#LR__3557
26724                 | LR__3554
26724     57 B3 02 F6 | 	mov	local07, local05
26728     01 B2 86 F1 | 	sub	local07, #1
2672c                 | LR__3555
2672c     54 93 02 F6 | 	mov	arg01, local02
26730     58 95 02 F6 | 	mov	arg02, local06
26734     59 97 02 F6 | 	mov	arg03, local07
26738     01 98 06 F6 | 	mov	arg04, #1
2673c     A4 36 B0 FD | 	call	#__system____ScanForChar
26740     3D B3 0A F6 | 	mov	local07, result1 wz
26744     30 00 90 AD |  if_e	jmp	#LR__3556
26748     57 97 02 F6 | 	mov	arg03, local05
2674c     54 93 02 F6 | 	mov	arg01, local02
26750     59 95 02 F6 | 	mov	arg02, local07
26754     F8 F9 BF FD | 	call	#__system__Mid_S
26758     3D 93 02 F6 | 	mov	arg01, result1
2675c     55 95 02 F6 | 	mov	arg02, local03
26760     54 E0 BF FD | 	call	#__system___string_cmp
26764     00 7A 0E F2 | 	cmp	result1, #0 wz
26768     59 7B 02 A6 |  if_e	mov	result1, local07
2676c     0C 00 90 AD |  if_e	jmp	#LR__3557
26770     57 B3 82 F1 | 	sub	local07, local05
26774     B4 FF 9F FD | 	jmp	#LR__3555
26778                 | LR__3556
26778     00 7A 06 F6 | 	mov	result1, #0
2677c                 | LR__3557
2677c     E7 F0 03 F6 | 	mov	ptra, fp
26780     F2 00 A0 FD | 	call	#popregs_
26784                 | __system__InstrRev_ret
26784     2D 00 64 FD | 	ret
26788                 | 
26788                 | __system___remove
26788     06 CA 05 F6 | 	mov	COUNT_, #6
2678c     E8 00 A0 FD | 	call	#pushregs_
26790     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
26794     84 A7 06 F1 | 	add	local01, #388
26798     49 95 02 F6 | 	mov	arg02, arg01
2679c     53 93 02 F6 | 	mov	arg01, local01
267a0     00 96 06 F6 | 	mov	arg03, #0
267a4     34 E7 BF FD | 	call	#__system____getvfsforfile
267a8     3D A9 0A F6 | 	mov	local02, result1 wz
267ac     10 00 90 AD |  if_e	jmp	#LR__3560
267b0     20 A8 06 F1 | 	add	local02, #32
267b4     54 93 0A FB | 	rdlong	arg01, local02 wz
267b8     20 A8 86 F1 | 	sub	local02, #32
267bc     14 00 90 5D |  if_ne	jmp	#LR__3561
267c0                 | LR__3560
267c0     20 68 06 F1 | 	add	ptr___system__dat__, #32
267c4     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
267c8     20 68 86 F1 | 	sub	ptr___system__dat__, #32
267cc     01 7A 66 F6 | 	neg	result1, #1
267d0     A8 00 90 FD | 	jmp	#LR__3564
267d4                 | LR__3561
267d4     40 A8 06 F1 | 	add	local02, #64
267d8     54 AB 02 FB | 	rdlong	local03, local02
267dc     55 AD 02 F6 | 	mov	local04, local03
267e0     40 A8 86 F1 | 	sub	local02, #64
267e4     13 AC 46 F7 | 	zerox	local04, #19
267e8     14 AA 46 F0 | 	shr	local03, #20
267ec     02 AA 66 F0 | 	shl	local03, #2
267f0     2D AB 02 F1 | 	add	local03, __methods__
267f4     55 AB 02 FB | 	rdlong	local03, local03
267f8     53 93 02 F6 | 	mov	arg01, local01
267fc     32 AF 02 F6 | 	mov	local05, objptr
26800     56 65 02 F6 | 	mov	objptr, local04
26804     2D AA 62 FD | 	call	local03
26808     57 65 02 F6 | 	mov	objptr, local05
2680c     3D B1 02 F6 | 	mov	local06, result1
26810     FF FF 7F FF 
26814     F2 B1 0E F2 | 	cmp	local06, ##-14 wz
26818     38 00 90 5D |  if_ne	jmp	#LR__3562
2681c     3C A8 06 F1 | 	add	local02, #60
26820     54 B1 02 FB | 	rdlong	local06, local02
26824     58 AB 02 F6 | 	mov	local03, local06
26828     13 B0 46 F7 | 	zerox	local06, #19
2682c     14 AA 46 F0 | 	shr	local03, #20
26830     02 AA 66 F0 | 	shl	local03, #2
26834     2D AB 02 F1 | 	add	local03, __methods__
26838     55 AB 02 FB | 	rdlong	local03, local03
2683c     53 93 02 F6 | 	mov	arg01, local01
26840     32 AF 02 F6 | 	mov	local05, objptr
26844     58 65 02 F6 | 	mov	objptr, local06
26848     2D AA 62 FD | 	call	local03
2684c     57 65 02 F6 | 	mov	objptr, local05
26850     3D B1 02 F6 | 	mov	local06, result1
26854                 | LR__3562
26854     00 B0 0E F2 | 	cmp	local06, #0 wz
26858     1C 00 90 AD |  if_e	jmp	#LR__3563
2685c     58 93 6A F6 | 	neg	arg01, local06 wz
26860     20 68 06 F1 | 	add	ptr___system__dat__, #32
26864     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
26868     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2686c     01 7A 66 56 |  if_ne	neg	result1, #1
26870     00 7A 06 A6 |  if_e	mov	result1, #0
26874     04 00 90 FD | 	jmp	#LR__3564
26878                 | LR__3563
26878     00 7A 06 F6 | 	mov	result1, #0
2687c                 | LR__3564
2687c     E7 F0 03 F6 | 	mov	ptra, fp
26880     F2 00 A0 FD | 	call	#popregs_
26884                 | __system___remove_ret
26884     2D 00 64 FD | 	ret
26888                 | 
26888                 | __system___mkdir
26888     05 CA 05 F6 | 	mov	COUNT_, #5
2688c     E8 00 A0 FD | 	call	#pushregs_
26890     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
26894     84 A7 06 F1 | 	add	local01, #388
26898     49 95 02 F6 | 	mov	arg02, arg01
2689c     53 93 02 F6 | 	mov	arg01, local01
268a0     00 96 06 F6 | 	mov	arg03, #0
268a4     34 E6 BF FD | 	call	#__system____getvfsforfile
268a8     3D A9 0A F6 | 	mov	local02, result1 wz
268ac     10 00 90 AD |  if_e	jmp	#LR__3570
268b0     20 A8 06 F1 | 	add	local02, #32
268b4     54 95 0A FB | 	rdlong	arg02, local02 wz
268b8     20 A8 86 F1 | 	sub	local02, #32
268bc     14 00 90 5D |  if_ne	jmp	#LR__3571
268c0                 | LR__3570
268c0     20 68 06 F1 | 	add	ptr___system__dat__, #32
268c4     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
268c8     20 68 86 F1 | 	sub	ptr___system__dat__, #32
268cc     01 7A 66 F6 | 	neg	result1, #1
268d0     60 00 90 FD | 	jmp	#LR__3573
268d4                 | LR__3571
268d4     38 A8 06 F1 | 	add	local02, #56
268d8     54 AB 02 FB | 	rdlong	local03, local02
268dc     55 AD 02 F6 | 	mov	local04, local03
268e0     13 AA 46 F7 | 	zerox	local03, #19
268e4     14 AC 46 F0 | 	shr	local04, #20
268e8     02 AC 66 F0 | 	shl	local04, #2
268ec     2D AD 02 F1 | 	add	local04, __methods__
268f0     56 AD 02 FB | 	rdlong	local04, local04
268f4     53 93 02 F6 | 	mov	arg01, local01
268f8     FF 95 06 F6 | 	mov	arg02, #511
268fc     32 AF 02 F6 | 	mov	local05, objptr
26900     55 65 02 F6 | 	mov	objptr, local03
26904     2D AC 62 FD | 	call	local04
26908     57 65 02 F6 | 	mov	objptr, local05
2690c     3D 93 0A F6 | 	mov	arg01, result1 wz
26910     1C 00 90 AD |  if_e	jmp	#LR__3572
26914     49 93 6A F6 | 	neg	arg01, arg01 wz
26918     20 68 06 F1 | 	add	ptr___system__dat__, #32
2691c     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
26920     20 68 86 F1 | 	sub	ptr___system__dat__, #32
26924     01 7A 66 56 |  if_ne	neg	result1, #1
26928     00 7A 06 A6 |  if_e	mov	result1, #0
2692c     04 00 90 FD | 	jmp	#LR__3573
26930                 | LR__3572
26930     00 7A 06 F6 | 	mov	result1, #0
26934                 | LR__3573
26934     E7 F0 03 F6 | 	mov	ptra, fp
26938     F2 00 A0 FD | 	call	#popregs_
2693c                 | __system___mkdir_ret
2693c     2D 00 64 FD | 	ret
26940                 | 
26940                 | __system___strerror
26940     00 92 56 F2 | 	cmps	arg01, #0 wc
26944     08 00 90 CD |  if_b	jmp	#LR__3580
26948     1A 92 56 F2 | 	cmps	arg01, #26 wc
2694c     04 00 90 CD |  if_b	jmp	#LR__3581
26950                 | LR__3580
26950     19 92 06 F6 | 	mov	arg01, #25
26954                 | LR__3581
26954     02 92 66 F0 | 	shl	arg01, #2
26958     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
2695c     01 00 00 FF 
26960     E0 7A 06 F1 | 	add	result1, ##736
26964     3D 93 02 F1 | 	add	arg01, result1
26968     49 7B 02 FB | 	rdlong	result1, arg01
2696c                 | __system___strerror_ret
2696c     2D 00 64 FD | 	ret
26970                 | 
26970                 | __system___int64_shl
26970     20 96 CE F7 | 	test	arg03, #32 wz
26974     49 95 02 56 |  if_ne	mov	arg02, arg01
26978     00 92 06 56 |  if_ne	mov	arg01, #0
2697c     1F 96 CE F7 | 	test	arg03, #31 wz
26980     18 00 90 AD |  if_e	jmp	#LR__3590
26984     4B 95 62 F0 | 	shl	arg02, arg03
26988     49 7B 02 F6 | 	mov	result1, arg01
2698c     4B 7D 62 F6 | 	neg	result2, arg03
26990     3E 7B 42 F0 | 	shr	result1, result2
26994     3D 95 42 F5 | 	or	arg02, result1
26998     4B 93 62 F0 | 	shl	arg01, arg03
2699c                 | LR__3590
2699c     4A 7D 02 F6 | 	mov	result2, arg02
269a0     49 7B 02 F6 | 	mov	result1, arg01
269a4                 | __system___int64_shl_ret
269a4     2D 00 64 FD | 	ret
269a8                 | 
269a8                 | __system___int64_sar
269a8     20 96 CE F7 | 	test	arg03, #32 wz
269ac     4A 93 02 56 |  if_ne	mov	arg01, arg02
269b0     1F 94 C6 50 |  if_ne	sar	arg02, #31
269b4     1F 96 CE F7 | 	test	arg03, #31 wz
269b8     18 00 90 AD |  if_e	jmp	#LR__3600
269bc     4B 93 42 F0 | 	shr	arg01, arg03
269c0     4A 7B 02 F6 | 	mov	result1, arg02
269c4     4B 7D 62 F6 | 	neg	result2, arg03
269c8     3E 7B 62 F0 | 	shl	result1, result2
269cc     3D 93 42 F5 | 	or	arg01, result1
269d0     4B 95 C2 F0 | 	sar	arg02, arg03
269d4                 | LR__3600
269d4     4A 7D 02 F6 | 	mov	result2, arg02
269d8     49 7B 02 F6 | 	mov	result1, arg01
269dc                 | __system___int64_sar_ret
269dc     2D 00 64 FD | 	ret
269e0                 | 
269e0                 | __system___usepins
269e0     14 68 06 F1 | 	add	ptr___system__dat__, #20
269e4     34 81 02 FB | 	rdlong	_var01, ptr___system__dat__
269e8     14 68 86 F1 | 	sub	ptr___system__dat__, #20
269ec     40 93 CA F7 | 	test	arg01, _var01 wz
269f0     18 68 06 A1 |  if_e	add	ptr___system__dat__, #24
269f4     34 83 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
269f8     18 68 86 A1 |  if_e	sub	ptr___system__dat__, #24
269fc     41 95 CA A7 |  if_e	test	arg02, _var02 wz
26a00     00 7A 06 56 |  if_ne	mov	result1, #0
26a04     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
26a08     14 68 06 F1 | 	add	ptr___system__dat__, #20
26a0c     34 83 02 FB | 	rdlong	_var02, ptr___system__dat__
26a10     49 83 42 F5 | 	or	_var02, arg01
26a14     34 83 62 FC | 	wrlong	_var02, ptr___system__dat__
26a18     04 68 06 F1 | 	add	ptr___system__dat__, #4
26a1c     34 83 02 FB | 	rdlong	_var02, ptr___system__dat__
26a20     4A 83 42 F5 | 	or	_var02, arg02
26a24     34 83 62 FC | 	wrlong	_var02, ptr___system__dat__
26a28     18 68 86 F1 | 	sub	ptr___system__dat__, #24
26a2c     01 7A 66 F6 | 	neg	result1, #1
26a30                 | __system___usepins_ret
26a30     2D 00 64 FD | 	ret
26a34                 | 
26a34                 | __system___freepins
26a34     14 68 06 F1 | 	add	ptr___system__dat__, #20
26a38     34 81 02 FB | 	rdlong	_var01, ptr___system__dat__
26a3c     49 81 22 F5 | 	andn	_var01, arg01
26a40     34 81 62 FC | 	wrlong	_var01, ptr___system__dat__
26a44     04 68 06 F1 | 	add	ptr___system__dat__, #4
26a48     34 81 02 FB | 	rdlong	_var01, ptr___system__dat__
26a4c     4A 81 22 F5 | 	andn	_var01, arg02
26a50     34 81 62 FC | 	wrlong	_var01, ptr___system__dat__
26a54     18 68 86 F1 | 	sub	ptr___system__dat__, #24
26a58                 | __system___freepins_ret
26a58     2D 00 64 FD | 	ret
26a5c                 | 
26a5c                 | __system___float_fromuns
26a5c     49 97 0A F6 | 	mov	arg03, arg01 wz
26a60     4B 7B 02 A6 |  if_e	mov	result1, arg03
26a64     24 00 90 AD |  if_e	jmp	#LR__3610
26a68     4B 95 92 F7 | 	encod	arg02, arg03 wc
26a6c     01 94 06 C1 |  if_b	add	arg02, #1
26a70     01 94 86 F1 | 	sub	arg02, #1
26a74     1F 92 06 F6 | 	mov	arg01, #31
26a78     4A 93 82 F1 | 	sub	arg01, arg02
26a7c     49 97 62 F0 | 	shl	arg03, arg01
26a80     02 96 46 F0 | 	shr	arg03, #2
26a84     00 92 06 F6 | 	mov	arg01, #0
26a88     58 09 B0 FD | 	call	#__system___float_Pack
26a8c                 | LR__3610
26a8c                 | __system___float_fromuns_ret
26a8c     2D 00 64 FD | 	ret
26a90                 | 
26a90                 | __system___float_add
26a90     0F CA 05 F6 | 	mov	COUNT_, #15
26a94     E8 00 A0 FD | 	call	#pushregs_
26a98     49 A7 02 F6 | 	mov	local01, arg01
26a9c     4A A9 02 F6 | 	mov	local02, arg02
26aa0     00 AA 06 F6 | 	mov	local03, #0
26aa4     53 AD 02 F6 | 	mov	local04, local01
26aa8     56 AF 02 F6 | 	mov	local05, local04
26aac     16 AE 46 F7 | 	zerox	local05, #22
26ab0     56 B1 02 F6 | 	mov	local06, local04
26ab4     01 B0 66 F0 | 	shl	local06, #1
26ab8     18 B0 46 F0 | 	shr	local06, #24
26abc     1F AC 46 F0 | 	shr	local04, #31
26ac0     54 93 02 F6 | 	mov	arg01, local02
26ac4     49 7B 02 F6 | 	mov	result1, arg01
26ac8     3D B3 02 F6 | 	mov	local07, result1
26acc     59 B5 02 F6 | 	mov	local08, local07
26ad0     16 B4 46 F7 | 	zerox	local08, #22
26ad4     59 B7 02 F6 | 	mov	local09, local07
26ad8     01 B6 66 F0 | 	shl	local09, #1
26adc     18 B6 46 F0 | 	shr	local09, #24
26ae0     5B B9 02 F6 | 	mov	local10, local09
26ae4     1F B2 46 F0 | 	shr	local07, #31
26ae8     00 BA 06 F6 | 	mov	local11, #0
26aec     00 BC 06 F6 | 	mov	local12, #0
26af0     5C B1 12 F2 | 	cmp	local06, local10 wc
26af4     5C B1 0A 32 |  if_ae	cmp	local06, local10 wz
26af8     2C 00 90 1D |  if_a	jmp	#LR__3620
26afc     5A AF 12 32 |  if_ae	cmp	local05, local08 wc
26b00     24 00 90 3D |  if_ae	jmp	#LR__3620
26b04     57 BF 02 F6 | 	mov	local13, local05
26b08     5A AF 02 F6 | 	mov	local05, local08
26b0c     5F B5 02 F6 | 	mov	local08, local13
26b10     58 BF 02 F6 | 	mov	local13, local06
26b14     5C B1 02 F6 | 	mov	local06, local10
26b18     5F B9 02 F6 | 	mov	local10, local13
26b1c     56 BF 02 F6 | 	mov	local13, local04
26b20     59 AD 02 F6 | 	mov	local04, local07
26b24     5F B3 02 F6 | 	mov	local07, local13
26b28                 | LR__3620
26b28     FF B0 0E F2 | 	cmp	local06, #255 wz
26b2c     70 01 90 AD |  if_e	jmp	#LR__3635
26b30     00 B0 0E F2 | 	cmp	local06, #0 wz
26b34     AC 01 90 AD |  if_e	jmp	#LR__3637
26b38     17 AE 26 F4 | 	bith	local05, #23
26b3c                 | LR__3621
26b3c     00 B8 0E F2 | 	cmp	local10, #0 wz
26b40     F0 01 90 AD |  if_e	jmp	#LR__3641
26b44     17 B4 26 F4 | 	bith	local08, #23
26b48                 | LR__3622
26b48     7F B0 86 F1 | 	sub	local06, #127
26b4c     7F B8 86 F1 | 	sub	local10, #127
26b50     58 C1 02 F6 | 	mov	local14, local06
26b54     5C C1 82 F1 | 	sub	local14, local10
26b58     D7 14 48 FB | 	callpa	#(@LR__3624-@LR__3623)>>2,fcache_load_ptr_
26b5c                 | LR__3623
26b5c     20 C0 56 F2 | 	cmps	local14, #32 wc
26b60     20 00 90 CD |  if_b	jmp	#LR__3625
26b64     5A B7 02 F6 | 	mov	local09, local08
26b68     00 BA 0E F2 | 	cmp	local11, #0 wz
26b6c     6F BA 62 FD | 	wrnz	local11
26b70     5D B7 42 F5 | 	or	local09, local11
26b74     5B BB 02 F6 | 	mov	local11, local09
26b78     00 B4 06 F6 | 	mov	local08, #0
26b7c     20 C0 86 F1 | 	sub	local14, #32
26b80     D8 FF 9F FD | 	jmp	#LR__3623
26b84                 | LR__3624
26b84                 | LR__3625
26b84     00 C0 0E F2 | 	cmp	local14, #0 wz
26b88     38 00 90 AD |  if_e	jmp	#LR__3626
26b8c     5A BF 02 F6 | 	mov	local13, local08
26b90     20 B8 06 F6 | 	mov	local10, #32
26b94     60 B9 82 F1 | 	sub	local10, local14
26b98     5C BF 62 F0 | 	shl	local13, local10
26b9c     5D B9 02 F6 | 	mov	local10, local11
26ba0     20 B6 06 F6 | 	mov	local09, #32
26ba4     60 B7 82 F1 | 	sub	local09, local14
26ba8     5B B9 6A F0 | 	shl	local10, local09 wz
26bac     60 BB 42 F0 | 	shr	local11, local14
26bb0     60 B5 42 F0 | 	shr	local08, local14
26bb4     5F BB 42 F5 | 	or	local11, local13
26bb8     00 C2 06 F6 | 	mov	local15, #0
26bbc     01 C2 06 56 |  if_ne	mov	local15, #1
26bc0     61 BB 42 F5 | 	or	local11, local15
26bc4                 | LR__3626
26bc4     56 C3 02 F6 | 	mov	local15, local04
26bc8     59 C3 62 F5 | 	xor	local15, local07
26bcc     01 C2 CE F7 | 	test	local15, #1 wz
26bd0     18 00 90 AD |  if_e	jmp	#LR__3627
26bd4     5A B5 22 F6 | 	not	local08, local08
26bd8     5D BB 22 F6 | 	not	local11, local11
26bdc     01 BA 0E F1 | 	add	local11, #1 wz
26be0     00 C2 06 F6 | 	mov	local15, #0
26be4     01 C2 06 A6 |  if_e	mov	local15, #1
26be8     61 B5 02 F1 | 	add	local08, local15
26bec                 | LR__3627
26bec     5D BD 12 F1 | 	add	local12, local11 wc
26bf0     5A AF 22 F1 | 	addx	local05, local08
26bf4     00 AE 56 F2 | 	cmps	local05, #0 wc
26bf8     1C 00 90 3D |  if_ae	jmp	#LR__3628
26bfc     01 AC 66 F5 | 	xor	local04, #1
26c00     57 AF 22 F6 | 	not	local05, local05
26c04     5E BD 22 F6 | 	not	local12, local12
26c08     01 BC 0E F1 | 	add	local12, #1 wz
26c0c     00 C2 06 F6 | 	mov	local15, #0
26c10     01 C2 06 A6 |  if_e	mov	local15, #1
26c14     61 AF 02 F1 | 	add	local05, local15
26c18                 | LR__3628
26c18     00 80 00 FF 
26c1c     00 AE 16 F2 | 	cmp	local05, ##16777216 wc
26c20     28 00 90 CD |  if_b	jmp	#LR__3629
26c24     01 B0 06 F1 | 	add	local06, #1
26c28     5E C1 02 F6 | 	mov	local14, local12
26c2c     01 C0 06 F5 | 	and	local14, #1
26c30     01 BC 46 F0 | 	shr	local12, #1
26c34     57 C3 02 F6 | 	mov	local15, local05
26c38     1F C2 66 F0 | 	shl	local15, #31
26c3c     61 BD 42 F5 | 	or	local12, local15
26c40     60 BD 42 F5 | 	or	local12, local14
26c44     01 AE 46 F0 | 	shr	local05, #1
26c48     3C 00 90 FD | 	jmp	#LR__3634
26c4c                 | LR__3629
26c4c     00 40 00 FF 
26c50     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
26c54     30 00 90 3D |  if_ae	jmp	#LR__3633
26c58     00 AE 0E F2 | 	cmp	local05, #0 wz
26c5c     00 BC 0E A2 |  if_e	cmp	local12, #0 wz
26c60     08 AC 46 A5 |  if_e	or	local04, #8
26c64     01 AC 26 A5 |  if_e	andn	local04, #1
26c68     1C 00 90 AD |  if_e	jmp	#LR__3632
26c6c                 | LR__3630
26c6c     00 40 00 FF 
26c70     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
26c74     10 00 90 3D |  if_ae	jmp	#LR__3631
26c78     5E BD 12 F1 | 	add	local12, local12 wc
26c7c     57 AF 22 F1 | 	addx	local05, local05
26c80     01 B0 86 F1 | 	sub	local06, #1
26c84     E4 FF 9F FD | 	jmp	#LR__3630
26c88                 | LR__3631
26c88                 | LR__3632
26c88                 | LR__3633
26c88                 | LR__3634
26c88     57 93 02 F6 | 	mov	arg01, local05
26c8c     5E 95 02 F6 | 	mov	arg02, local12
26c90     58 97 02 F6 | 	mov	arg03, local06
26c94     56 99 02 F6 | 	mov	arg04, local04
26c98     50 34 B0 FD | 	call	#__system__pack_0698
26c9c     DC 00 90 FD | 	jmp	#LR__3645
26ca0                 | LR__3635
26ca0     FF B8 0E F2 | 	cmp	local10, #255 wz
26ca4     10 00 90 5D |  if_ne	jmp	#LR__3636
26ca8     56 B3 0A F2 | 	cmp	local07, local04 wz
26cac     00 F8 3F 5F 
26cb0     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
26cb4     C4 00 90 5D |  if_ne	jmp	#LR__3645
26cb8                 | LR__3636
26cb8     00 AE 0E F2 | 	cmp	local05, #0 wz
26cbc     00 F8 3F 5F 
26cc0     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
26cc4     B4 00 90 5D |  if_ne	jmp	#LR__3645
26cc8     5E 95 02 F6 | 	mov	arg02, local12
26ccc     58 97 02 F6 | 	mov	arg03, local06
26cd0     56 99 02 F6 | 	mov	arg04, local04
26cd4     02 98 46 F5 | 	or	arg04, #2
26cd8     57 93 02 F6 | 	mov	arg01, local05
26cdc     0C 34 B0 FD | 	call	#__system__pack_0698
26ce0     98 00 90 FD | 	jmp	#LR__3645
26ce4                 | LR__3637
26ce4     00 AE 0E F2 | 	cmp	local05, #0 wz
26ce8     28 00 90 AD |  if_e	jmp	#LR__3640
26cec     01 AE 66 F0 | 	shl	local05, #1
26cf0     D7 0E 48 FB | 	callpa	#(@LR__3639-@LR__3638)>>2,fcache_load_ptr_
26cf4                 | LR__3638
26cf4     00 40 00 FF 
26cf8     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
26cfc     58 C3 02 C6 |  if_b	mov	local15, local06
26d00     01 C2 86 C1 |  if_b	sub	local15, #1
26d04     61 B1 02 C6 |  if_b	mov	local06, local15
26d08     01 AE 66 C0 |  if_b	shl	local05, #1
26d0c     E4 FF 9F CD |  if_b	jmp	#LR__3638
26d10                 | LR__3639
26d10     28 FE 9F FD | 	jmp	#LR__3621
26d14                 | LR__3640
26d14     59 AD 02 F5 | 	and	local04, local07
26d18     56 99 02 F6 | 	mov	arg04, local04
26d1c     08 98 46 F5 | 	or	arg04, #8
26d20     00 92 06 F6 | 	mov	arg01, #0
26d24     00 94 06 F6 | 	mov	arg02, #0
26d28     00 96 06 F6 | 	mov	arg03, #0
26d2c     BC 33 B0 FD | 	call	#__system__pack_0698
26d30     48 00 90 FD | 	jmp	#LR__3645
26d34                 | LR__3641
26d34     00 B4 0E F2 | 	cmp	local08, #0 wz
26d38     28 00 90 AD |  if_e	jmp	#LR__3644
26d3c     01 B4 66 F0 | 	shl	local08, #1
26d40     D7 0E 48 FB | 	callpa	#(@LR__3643-@LR__3642)>>2,fcache_load_ptr_
26d44                 | LR__3642
26d44     00 40 00 FF 
26d48     00 B4 16 F2 | 	cmp	local08, ##8388608 wc
26d4c     5C C3 02 C6 |  if_b	mov	local15, local10
26d50     01 C2 86 C1 |  if_b	sub	local15, #1
26d54     61 B9 02 C6 |  if_b	mov	local10, local15
26d58     01 B4 66 C0 |  if_b	shl	local08, #1
26d5c     E4 FF 9F CD |  if_b	jmp	#LR__3642
26d60                 | LR__3643
26d60     E4 FD 9F FD | 	jmp	#LR__3622
26d64                 | LR__3644
26d64     7F B0 86 F1 | 	sub	local06, #127
26d68     57 93 02 F6 | 	mov	arg01, local05
26d6c     5E 95 02 F6 | 	mov	arg02, local12
26d70     58 97 02 F6 | 	mov	arg03, local06
26d74     56 99 02 F6 | 	mov	arg04, local04
26d78     70 33 B0 FD | 	call	#__system__pack_0698
26d7c                 | LR__3645
26d7c     E7 F0 03 F6 | 	mov	ptra, fp
26d80     F2 00 A0 FD | 	call	#popregs_
26d84                 | __system___float_add_ret
26d84     2D 00 64 FD | 	ret
26d88                 | 
26d88                 | __system___float_sqrt
26d88     04 CA 05 F6 | 	mov	COUNT_, #4
26d8c     E8 00 A0 FD | 	call	#pushregs_
26d90     49 A7 02 F6 | 	mov	local01, arg01
26d94     49 7B 02 F6 | 	mov	result1, arg01
26d98     3D A9 02 F6 | 	mov	local02, result1
26d9c     54 AB 02 F6 | 	mov	local03, local02
26da0     16 AA 46 F7 | 	zerox	local03, #22
26da4     54 AD 02 F6 | 	mov	local04, local02
26da8     01 AC 66 F0 | 	shl	local04, #1
26dac     18 AC 4E F0 | 	shr	local04, #24 wz
26db0     1F A8 46 F0 | 	shr	local02, #31
26db4     70 00 90 AD |  if_e	jmp	#LR__3651
26db8     17 AA 26 F4 | 	bith	local03, #23
26dbc                 | LR__3650
26dbc     00 A8 0E F2 | 	cmp	local02, #0 wz
26dc0     00 F8 3F 5F 
26dc4     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
26dc8     88 00 90 5D |  if_ne	jmp	#LR__3654
26dcc     FF AC 0E F2 | 	cmp	local04, #255 wz
26dd0     53 7B 02 A6 |  if_e	mov	result1, local01
26dd4     7C 00 90 AD |  if_e	jmp	#LR__3654
26dd8     7F AC 86 F1 | 	sub	local04, #127
26ddc     01 AC CE F7 | 	test	local04, #1 wz
26de0     01 AA 66 50 |  if_ne	shl	local03, #1
26de4     05 AA 66 F0 | 	shl	local03, #5
26de8     55 01 38 FD | 	qsqrt	#0, local03
26dec     01 AC 86 51 |  if_ne	sub	local04, #1
26df0     56 AD 52 F6 | 	abs	local04, local04 wc
26df4     01 AC 46 F0 | 	shr	local04, #1
26df8     56 97 82 F6 | 	negc	arg03, local04
26dfc     54 99 02 F6 | 	mov	arg04, local02
26e00     18 92 62 FD | 	getqx	arg01
26e04     49 95 02 F6 | 	mov	arg02, arg01
26e08     19 94 66 F0 | 	shl	arg02, #25
26e0c     07 92 46 F0 | 	shr	arg01, #7
26e10     00 80 00 FF 
26e14     01 92 16 F2 | 	cmp	arg01, ##16777217 wc
26e18     01 96 06 31 |  if_ae	add	arg03, #1
26e1c     01 92 46 30 |  if_ae	shr	arg01, #1
26e20     C8 32 B0 FD | 	call	#__system__pack_0698
26e24     2C 00 90 FD | 	jmp	#LR__3654
26e28                 | LR__3651
26e28     00 AA 0E F2 | 	cmp	local03, #0 wz
26e2c     53 7B 02 A6 |  if_e	mov	result1, local01
26e30     20 00 90 AD |  if_e	jmp	#LR__3654
26e34     01 AA 66 F0 | 	shl	local03, #1
26e38     D7 0A 48 FB | 	callpa	#(@LR__3653-@LR__3652)>>2,fcache_load_ptr_
26e3c                 | LR__3652
26e3c     00 40 00 FF 
26e40     00 AA 16 F2 | 	cmp	local03, ##8388608 wc
26e44     01 AC 86 C1 |  if_b	sub	local04, #1
26e48     01 AA 66 C0 |  if_b	shl	local03, #1
26e4c     EC FF 9F CD |  if_b	jmp	#LR__3652
26e50                 | LR__3653
26e50     68 FF 9F FD | 	jmp	#LR__3650
26e54                 | LR__3654
26e54     E7 F0 03 F6 | 	mov	ptra, fp
26e58     F2 00 A0 FD | 	call	#popregs_
26e5c                 | __system___float_sqrt_ret
26e5c     2D 00 64 FD | 	ret
26e60                 | 
26e60                 | __system___float_mul
26e60     0B CA 05 F6 | 	mov	COUNT_, #11
26e64     E8 00 A0 FD | 	call	#pushregs_
26e68     49 A7 02 F6 | 	mov	local01, arg01
26e6c     4A A9 02 F6 | 	mov	local02, arg02
26e70     53 AB 02 F6 | 	mov	local03, local01
26e74     55 AD 02 F6 | 	mov	local04, local03
26e78     16 AC 46 F7 | 	zerox	local04, #22
26e7c     55 AF 02 F6 | 	mov	local05, local03
26e80     01 AE 66 F0 | 	shl	local05, #1
26e84     18 AE 46 F0 | 	shr	local05, #24
26e88     1F AA 46 F0 | 	shr	local03, #31
26e8c     54 7B 02 F6 | 	mov	result1, local02
26e90     3D B1 02 F6 | 	mov	local06, result1
26e94     58 B3 02 F6 | 	mov	local07, local06
26e98     16 B2 46 F7 | 	zerox	local07, #22
26e9c     58 B5 02 F6 | 	mov	local08, local06
26ea0     01 B4 66 F0 | 	shl	local08, #1
26ea4     18 B4 46 F0 | 	shr	local08, #24
26ea8     1F B0 46 F0 | 	shr	local06, #31
26eac     58 AB 62 F5 | 	xor	local03, local06
26eb0     FF AE 0E F2 | 	cmp	local05, #255 wz
26eb4     90 00 90 AD |  if_e	jmp	#LR__3663
26eb8     FF B4 0E F2 | 	cmp	local08, #255 wz
26ebc     D8 00 90 AD |  if_e	jmp	#LR__3665
26ec0     00 AE 0E F2 | 	cmp	local05, #0 wz
26ec4     0C 01 90 AD |  if_e	jmp	#LR__3666
26ec8     17 AC 26 F4 | 	bith	local04, #23
26ecc                 | LR__3660
26ecc     00 B4 0E F2 | 	cmp	local08, #0 wz
26ed0     44 01 90 AD |  if_e	jmp	#LR__3670
26ed4     17 B2 26 F4 | 	bith	local07, #23
26ed8                 | LR__3661
26ed8     56 A9 02 F6 | 	mov	local02, local04
26edc     04 A8 66 F0 | 	shl	local02, #4
26ee0     59 B1 02 F6 | 	mov	local06, local07
26ee4     05 B0 66 F0 | 	shl	local06, #5
26ee8     58 A9 02 FD | 	qmul	local02, local06
26eec     5A AF 02 F1 | 	add	local05, local08
26ef0     FE AE 86 F1 | 	sub	local05, #254
26ef4     57 B7 02 F6 | 	mov	local09, local05
26ef8     04 AC 66 F0 | 	shl	local04, #4
26efc     05 B2 66 F0 | 	shl	local07, #5
26f00     18 B8 62 FD | 	getqx	local10
26f04     59 AD 02 FD | 	qmul	local04, local07
26f08     19 BA 62 FD | 	getqy	local11
26f0c     00 80 00 FF 
26f10     00 BA 16 F2 | 	cmp	local11, ##16777216 wc
26f14     18 00 90 CD |  if_b	jmp	#LR__3662
26f18     01 B6 06 F1 | 	add	local09, #1
26f1c     01 B8 46 F0 | 	shr	local10, #1
26f20     5D B5 02 F6 | 	mov	local08, local11
26f24     1F B4 66 F0 | 	shl	local08, #31
26f28     5A B9 42 F5 | 	or	local10, local08
26f2c     01 BA 46 F0 | 	shr	local11, #1
26f30                 | LR__3662
26f30     5D 93 02 F6 | 	mov	arg01, local11
26f34     5C 95 02 F6 | 	mov	arg02, local10
26f38     5B 97 02 F6 | 	mov	arg03, local09
26f3c     55 99 02 F6 | 	mov	arg04, local03
26f40     A8 31 B0 FD | 	call	#__system__pack_0698
26f44     10 01 90 FD | 	jmp	#LR__3674
26f48                 | LR__3663
26f48     00 AC 0E F2 | 	cmp	local04, #0 wz
26f4c     53 7B 02 56 |  if_ne	mov	result1, local01
26f50     04 01 90 5D |  if_ne	jmp	#LR__3674
26f54     FF B4 56 F2 | 	cmps	local08, #255 wc
26f58     00 B4 0E C2 |  if_b	cmp	local08, #0 wz
26f5c     00 B2 0E 82 |  if_c_and_z	cmp	local07, #0 wz
26f60     18 00 90 4D |  if_c_and_nz	jmp	#LR__3664
26f64     00 F8 3F CF 
26f68     00 7A 06 C6 |  if_b	mov	result1, ##2146435072
26f6c     E8 00 90 CD |  if_b	jmp	#LR__3674
26f70     00 B2 0E F2 | 	cmp	local07, #0 wz
26f74     54 7B 02 56 |  if_ne	mov	result1, local02
26f78     DC 00 90 5D |  if_ne	jmp	#LR__3674
26f7c                 | LR__3664
26f7c     02 AA 46 F5 | 	or	local03, #2
26f80     00 92 06 F6 | 	mov	arg01, #0
26f84     00 94 06 F6 | 	mov	arg02, #0
26f88     57 97 02 F6 | 	mov	arg03, local05
26f8c     55 99 02 F6 | 	mov	arg04, local03
26f90     58 31 B0 FD | 	call	#__system__pack_0698
26f94     C0 00 90 FD | 	jmp	#LR__3674
26f98                 | LR__3665
26f98     00 AE 0E F2 | 	cmp	local05, #0 wz
26f9c     00 AC 0E A2 |  if_e	cmp	local04, #0 wz
26fa0     00 F8 3F AF 
26fa4     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
26fa8     AC 00 90 AD |  if_e	jmp	#LR__3674
26fac     00 B2 0E F2 | 	cmp	local07, #0 wz
26fb0     54 7B 02 56 |  if_ne	mov	result1, local02
26fb4     A0 00 90 5D |  if_ne	jmp	#LR__3674
26fb8     5A 97 02 F6 | 	mov	arg03, local08
26fbc     55 99 02 F6 | 	mov	arg04, local03
26fc0     02 98 46 F5 | 	or	arg04, #2
26fc4     00 92 06 F6 | 	mov	arg01, #0
26fc8     00 94 06 F6 | 	mov	arg02, #0
26fcc     1C 31 B0 FD | 	call	#__system__pack_0698
26fd0     84 00 90 FD | 	jmp	#LR__3674
26fd4                 | LR__3666
26fd4     00 AC 0E F2 | 	cmp	local04, #0 wz
26fd8     20 00 90 AD |  if_e	jmp	#LR__3669
26fdc     01 AC 66 F0 | 	shl	local04, #1
26fe0     D7 0A 48 FB | 	callpa	#(@LR__3668-@LR__3667)>>2,fcache_load_ptr_
26fe4                 | LR__3667
26fe4     00 40 00 FF 
26fe8     00 AC 16 F2 | 	cmp	local04, ##8388608 wc
26fec     01 AE 86 C1 |  if_b	sub	local05, #1
26ff0     01 AC 66 C0 |  if_b	shl	local04, #1
26ff4     EC FF 9F CD |  if_b	jmp	#LR__3667
26ff8                 | LR__3668
26ff8     D0 FE 9F FD | 	jmp	#LR__3660
26ffc                 | LR__3669
26ffc     08 AA 46 F5 | 	or	local03, #8
27000     00 92 06 F6 | 	mov	arg01, #0
27004     00 94 06 F6 | 	mov	arg02, #0
27008     00 96 06 F6 | 	mov	arg03, #0
2700c     55 99 02 F6 | 	mov	arg04, local03
27010     D8 30 B0 FD | 	call	#__system__pack_0698
27014     40 00 90 FD | 	jmp	#LR__3674
27018                 | LR__3670
27018     00 B2 0E F2 | 	cmp	local07, #0 wz
2701c     20 00 90 AD |  if_e	jmp	#LR__3673
27020     01 B2 66 F0 | 	shl	local07, #1
27024     D7 0A 48 FB | 	callpa	#(@LR__3672-@LR__3671)>>2,fcache_load_ptr_
27028                 | LR__3671
27028     00 40 00 FF 
2702c     00 B2 16 F2 | 	cmp	local07, ##8388608 wc
27030     01 B4 86 C1 |  if_b	sub	local08, #1
27034     01 B2 66 C0 |  if_b	shl	local07, #1
27038     EC FF 9F CD |  if_b	jmp	#LR__3671
2703c                 | LR__3672
2703c     98 FE 9F FD | 	jmp	#LR__3661
27040                 | LR__3673
27040     08 AA 46 F5 | 	or	local03, #8
27044     00 92 06 F6 | 	mov	arg01, #0
27048     00 94 06 F6 | 	mov	arg02, #0
2704c     00 96 06 F6 | 	mov	arg03, #0
27050     55 99 02 F6 | 	mov	arg04, local03
27054     94 30 B0 FD | 	call	#__system__pack_0698
27058                 | LR__3674
27058     E7 F0 03 F6 | 	mov	ptra, fp
2705c     F2 00 A0 FD | 	call	#popregs_
27060                 | __system___float_mul_ret
27060     2D 00 64 FD | 	ret
27064                 | 
27064                 | __system___float_div
27064     0E CA 05 F6 | 	mov	COUNT_, #14
27068     E8 00 A0 FD | 	call	#pushregs_
2706c     49 AB 02 F6 | 	mov	local03, arg01
27070     4A AD 02 F6 | 	mov	local04, arg02
27074     55 AF 02 F6 | 	mov	local05, local03
27078     57 B1 02 F6 | 	mov	local06, local05
2707c     16 B0 46 F7 | 	zerox	local06, #22
27080     57 B3 02 F6 | 	mov	local07, local05
27084     01 B2 66 F0 | 	shl	local07, #1
27088     18 B2 46 F0 | 	shr	local07, #24
2708c     1F AE 46 F0 | 	shr	local05, #31
27090     56 7B 02 F6 | 	mov	result1, local04
27094     3D B5 02 F6 | 	mov	local08, result1
27098     5A B7 02 F6 | 	mov	local09, local08
2709c     16 B6 46 F7 | 	zerox	local09, #22
270a0     5A B9 02 F6 | 	mov	local10, local08
270a4     01 B8 66 F0 | 	shl	local10, #1
270a8     18 B8 46 F0 | 	shr	local10, #24
270ac     1F B4 46 F0 | 	shr	local08, #31
270b0     5A AF 62 F5 | 	xor	local05, local08
270b4     FF B2 0E F2 | 	cmp	local07, #255 wz
270b8     D4 00 90 AD |  if_e	jmp	#LR__3685
270bc     FF B8 0E F2 | 	cmp	local10, #255 wz
270c0     04 01 90 AD |  if_e	jmp	#LR__3686
270c4     00 B2 0E F2 | 	cmp	local07, #0 wz
270c8     24 01 90 AD |  if_e	jmp	#LR__3687
270cc     17 B0 26 F4 | 	bith	local06, #23
270d0                 | LR__3680
270d0     00 B8 0E F2 | 	cmp	local10, #0 wz
270d4     70 01 90 AD |  if_e	jmp	#LR__3691
270d8     17 B6 26 F4 | 	bith	local09, #23
270dc                 | LR__3681
270dc     5C B3 82 F1 | 	sub	local07, local10
270e0     59 BB 02 F6 | 	mov	local11, local07
270e4     58 93 02 F6 | 	mov	arg01, local06
270e8     02 92 46 F0 | 	shr	arg01, #2
270ec     1E B0 66 F0 | 	shl	local06, #30
270f0     58 95 02 F6 | 	mov	arg02, local06
270f4     5B 97 02 F6 | 	mov	arg03, local09
270f8     28 92 62 FD | 	setq	arg01
270fc     4B 95 12 FD | 	qdiv	arg02, arg03
27100     00 BC 06 F6 | 	mov	local12, #0
27104     18 A6 62 FD | 	getqx	local01
27108     19 7C 62 FD | 	getqy	result2
2710c     3E A9 02 F6 | 	mov	local02, result2
27110     53 BF 02 F6 | 	mov	local13, local01
27114     00 A8 4E F2 | 	cmps	local02, #0 wz
27118     5F C1 02 F6 | 	mov	local14, local13
2711c     19 C0 66 F0 | 	shl	local14, #25
27120     01 BC 06 56 |  if_ne	mov	local12, #1
27124     5E C1 42 F5 | 	or	local14, local12
27128     07 BE 46 F0 | 	shr	local13, #7
2712c     00 80 00 FF 
27130     00 BE 16 F2 | 	cmp	local13, ##16777216 wc
27134     1C 00 90 CD |  if_b	jmp	#LR__3682
27138     01 BA 06 F1 | 	add	local11, #1
2713c     01 C0 46 F0 | 	shr	local14, #1
27140     5F BD 02 F6 | 	mov	local12, local13
27144     1F BC 66 F0 | 	shl	local12, #31
27148     5E C1 42 F5 | 	or	local14, local12
2714c     01 BE 46 F0 | 	shr	local13, #1
27150     24 00 90 FD | 	jmp	#LR__3684
27154                 | LR__3682
27154     00 40 00 FF 
27158     00 BE 16 F2 | 	cmp	local13, ##8388608 wc
2715c     18 00 90 3D |  if_ae	jmp	#LR__3683
27160     01 BA 86 F1 | 	sub	local11, #1
27164     01 BE 66 F0 | 	shl	local13, #1
27168     60 BD 02 F6 | 	mov	local12, local14
2716c     1F BC 46 F0 | 	shr	local12, #31
27170     5E BF 42 F5 | 	or	local13, local12
27174     01 C0 66 F0 | 	shl	local14, #1
27178                 | LR__3683
27178                 | LR__3684
27178     5F 93 02 F6 | 	mov	arg01, local13
2717c     60 95 02 F6 | 	mov	arg02, local14
27180     5D 97 02 F6 | 	mov	arg03, local11
27184     57 99 02 F6 | 	mov	arg04, local05
27188     60 2F B0 FD | 	call	#__system__pack_0698
2718c     F8 00 90 FD | 	jmp	#LR__3695
27190                 | LR__3685
27190     00 B0 0E F2 | 	cmp	local06, #0 wz
27194     55 7B 02 56 |  if_ne	mov	result1, local03
27198     EC 00 90 5D |  if_ne	jmp	#LR__3695
2719c     FF B8 0E F2 | 	cmp	local10, #255 wz
271a0     00 F8 3F AF 
271a4     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
271a8     DC 00 90 AD |  if_e	jmp	#LR__3695
271ac     02 AE 46 F5 | 	or	local05, #2
271b0     00 92 06 F6 | 	mov	arg01, #0
271b4     00 94 06 F6 | 	mov	arg02, #0
271b8     59 97 02 F6 | 	mov	arg03, local07
271bc     57 99 02 F6 | 	mov	arg04, local05
271c0     28 2F B0 FD | 	call	#__system__pack_0698
271c4     C0 00 90 FD | 	jmp	#LR__3695
271c8                 | LR__3686
271c8     00 B6 0E F2 | 	cmp	local09, #0 wz
271cc     56 7B 02 56 |  if_ne	mov	result1, local04
271d0     B4 00 90 5D |  if_ne	jmp	#LR__3695
271d4     57 99 02 F6 | 	mov	arg04, local05
271d8     08 98 46 F5 | 	or	arg04, #8
271dc     00 92 06 F6 | 	mov	arg01, #0
271e0     00 94 06 F6 | 	mov	arg02, #0
271e4     00 96 06 F6 | 	mov	arg03, #0
271e8     00 2F B0 FD | 	call	#__system__pack_0698
271ec     98 00 90 FD | 	jmp	#LR__3695
271f0                 | LR__3687
271f0     00 B0 0E F2 | 	cmp	local06, #0 wz
271f4     20 00 90 AD |  if_e	jmp	#LR__3690
271f8     01 B0 66 F0 | 	shl	local06, #1
271fc     D7 0A 48 FB | 	callpa	#(@LR__3689-@LR__3688)>>2,fcache_load_ptr_
27200                 | LR__3688
27200     00 40 00 FF 
27204     00 B0 16 F2 | 	cmp	local06, ##8388608 wc
27208     01 B2 86 C1 |  if_b	sub	local07, #1
2720c     01 B0 66 C0 |  if_b	shl	local06, #1
27210     EC FF 9F CD |  if_b	jmp	#LR__3688
27214                 | LR__3689
27214     B8 FE 9F FD | 	jmp	#LR__3680
27218                 | LR__3690
27218     00 B8 0E F2 | 	cmp	local10, #0 wz
2721c     00 B6 0E A2 |  if_e	cmp	local09, #0 wz
27220     00 F8 3F AF 
27224     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
27228     5C 00 90 AD |  if_e	jmp	#LR__3695
2722c     57 99 02 F6 | 	mov	arg04, local05
27230     08 98 46 F5 | 	or	arg04, #8
27234     00 92 06 F6 | 	mov	arg01, #0
27238     00 94 06 F6 | 	mov	arg02, #0
2723c     00 96 06 F6 | 	mov	arg03, #0
27240     A8 2E B0 FD | 	call	#__system__pack_0698
27244     40 00 90 FD | 	jmp	#LR__3695
27248                 | LR__3691
27248     00 B6 0E F2 | 	cmp	local09, #0 wz
2724c     20 00 90 AD |  if_e	jmp	#LR__3694
27250     01 B6 66 F0 | 	shl	local09, #1
27254     D7 0A 48 FB | 	callpa	#(@LR__3693-@LR__3692)>>2,fcache_load_ptr_
27258                 | LR__3692
27258     00 40 00 FF 
2725c     00 B6 16 F2 | 	cmp	local09, ##8388608 wc
27260     01 B8 86 C1 |  if_b	sub	local10, #1
27264     01 B6 66 C0 |  if_b	shl	local09, #1
27268     EC FF 9F CD |  if_b	jmp	#LR__3692
2726c                 | LR__3693
2726c     6C FE 9F FD | 	jmp	#LR__3681
27270                 | LR__3694
27270     02 AE 46 F5 | 	or	local05, #2
27274     00 92 06 F6 | 	mov	arg01, #0
27278     00 94 06 F6 | 	mov	arg02, #0
2727c     00 96 06 F6 | 	mov	arg03, #0
27280     57 99 02 F6 | 	mov	arg04, local05
27284     64 2E B0 FD | 	call	#__system__pack_0698
27288                 | LR__3695
27288     E7 F0 03 F6 | 	mov	ptra, fp
2728c     F2 00 A0 FD | 	call	#popregs_
27290                 | __system___float_div_ret
27290     2D 00 64 FD | 	ret
27294                 | 
27294                 | __system___float_cmp
27294     00 C0 3F FF 
27298     01 92 56 F2 | 	cmps	arg01, ##2139095041 wc
2729c     00 C0 3F CF 
272a0     01 94 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
272a4     4B 7B 02 36 |  if_ae	mov	result1, arg03
272a8     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
272ac     00 C0 7F FF 
272b0     01 92 16 F2 | 	cmp	arg01, ##-8388607 wc
272b4     00 C0 7F CF 
272b8     01 92 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
272bc     4B 7B 02 36 |  if_ae	mov	result1, arg03
272c0     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
272c4     00 92 56 F2 | 	cmps	arg01, #0 wc
272c8     2C 00 90 3D |  if_ae	jmp	#LR__3700
272cc     00 94 56 F2 | 	cmps	arg02, #0 wc
272d0     4A 7B 02 C6 |  if_b	mov	result1, arg02
272d4     49 7B 82 C1 |  if_b	sub	result1, arg01
272d8     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
272dc     00 94 0E F2 | 	cmp	arg02, #0 wz
272e0     00 00 40 AF 
272e4     00 92 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
272e8     00 7A 06 A6 |  if_e	mov	result1, #0
272ec     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
272f0     01 7A 66 F6 | 	neg	result1, #1
272f4     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
272f8                 | LR__3700
272f8     00 94 56 F2 | 	cmps	arg02, #0 wc
272fc     1C 00 90 3D |  if_ae	jmp	#LR__3701
27300     00 92 0E F2 | 	cmp	arg01, #0 wz
27304     00 00 40 AF 
27308     00 94 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
2730c     00 7A 06 A6 |  if_e	mov	result1, #0
27310     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
27314     01 7A 06 F6 | 	mov	result1, #1
27318     08 00 90 FD | 	jmp	#__system___float_cmp_ret
2731c                 | LR__3701
2731c     4A 93 82 F1 | 	sub	arg01, arg02
27320     49 7B 02 F6 | 	mov	result1, arg01
27324                 | __system___float_cmp_ret
27324     2D 00 64 FD | 	ret
27328                 | 
27328                 | __system___float_tointeger
27328     02 CA 05 F6 | 	mov	COUNT_, #2
2732c     E8 00 A0 FD | 	call	#pushregs_
27330     5C 00 B0 FD | 	call	#__system___float_Unpack
27334     3D A7 02 F6 | 	mov	local01, result1
27338     1F 7C 56 F2 | 	cmps	result2, #31 wc
2733c     00 A6 0E 32 |  if_ae	cmp	local01, #0 wz
27340     1F A8 C6 19 |  if_a	decod	local02, #31
27344     1E A8 CE 29 |  if_nc_and_z	bmask	local02, #30
27348     54 7F 02 36 |  if_ae	mov	result3, local02
2734c     30 00 90 3D |  if_ae	jmp	#LR__3711
27350     FF FF 7F FF 
27354     FF 7D 56 F2 | 	cmps	result2, ##-1 wc
27358     00 7E 06 C6 |  if_b	mov	result3, #0
2735c     20 00 90 CD |  if_b	jmp	#LR__3710
27360     02 7E 66 F0 | 	shl	result3, #2
27364     1E A8 06 F6 | 	mov	local02, #30
27368     3E A9 82 F1 | 	sub	local02, result2
2736c     54 7F 42 F0 | 	shr	result3, local02
27370     4A 7F 02 F1 | 	add	result3, arg02
27374     01 7E 46 F0 | 	shr	result3, #1
27378     00 A6 0E F2 | 	cmp	local01, #0 wz
2737c     3F 7F 62 56 |  if_ne	neg	result3, result3
27380                 | LR__3710
27380                 | LR__3711
27380     3F 7B 02 F6 | 	mov	result1, result3
27384     E7 F0 03 F6 | 	mov	ptra, fp
27388     F2 00 A0 FD | 	call	#popregs_
2738c                 | __system___float_tointeger_ret
2738c     2D 00 64 FD | 	ret
27390                 | 
27390                 | __system___float_Unpack
27390     49 81 02 F6 | 	mov	_var01, arg01
27394     1F 80 46 F0 | 	shr	_var01, #31
27398     49 83 02 F6 | 	mov	_var02, arg01
2739c     01 82 66 F0 | 	shl	_var02, #1
273a0     18 82 4E F0 | 	shr	_var02, #24 wz
273a4     17 93 06 F4 | 	bitl	arg01, #279
273a8     06 92 66 50 |  if_ne	shl	arg01, #6
273ac     1D 92 26 54 |  if_ne	bith	arg01, #29
273b0     1C 00 90 5D |  if_ne	jmp	#LR__3720
273b4     49 85 92 F7 | 	encod	_var03, arg01 wc
273b8     01 84 06 C1 |  if_b	add	_var03, #1
273bc     17 84 86 F1 | 	sub	_var03, #23
273c0     42 83 02 F6 | 	mov	_var02, _var03
273c4     07 7C 06 F6 | 	mov	result2, #7
273c8     42 7D 82 F1 | 	sub	result2, _var03
273cc     3E 93 62 F0 | 	shl	arg01, result2
273d0                 | LR__3720
273d0     7F 82 86 F1 | 	sub	_var02, #127
273d4     49 7F 02 F6 | 	mov	result3, arg01
273d8     40 7B 02 F6 | 	mov	result1, _var01
273dc     41 7D 02 F6 | 	mov	result2, _var02
273e0                 | __system___float_Unpack_ret
273e0     2D 00 64 FD | 	ret
273e4                 | 
273e4                 | __system___float_Pack
273e4     00 80 06 F6 | 	mov	_var01, #0
273e8     00 96 0E F2 | 	cmp	arg03, #0 wz
273ec     8C 00 90 AD |  if_e	jmp	#LR__3731
273f0     4B 83 92 F7 | 	encod	_var02, arg03 wc
273f4     01 82 06 C1 |  if_b	add	_var02, #1
273f8     21 80 06 F6 | 	mov	_var01, #33
273fc     41 81 82 F1 | 	sub	_var01, _var02
27400     40 97 62 F0 | 	shl	arg03, _var01
27404     03 82 06 F6 | 	mov	_var02, #3
27408     40 83 82 F1 | 	sub	_var02, _var01
2740c     41 95 02 F1 | 	add	arg02, _var02
27410     4A 85 02 F6 | 	mov	_var03, arg02
27414     00 97 06 F1 | 	add	arg03, #256
27418     4B 83 02 F6 | 	mov	_var02, arg03
2741c     FF 82 2E F5 | 	andn	_var02, #255 wz
27420     01 84 06 A1 |  if_e	add	_var03, #1
27424     7F 84 06 F1 | 	add	_var03, #127
27428     FF FF 7F FF 
2742c     E9 85 46 F3 | 	fges	_var03, ##-23
27430     FF 84 66 F3 | 	fles	_var03, #255
27434     01 84 56 F2 | 	cmps	_var03, #1 wc
27438     1C 00 90 3D |  if_ae	jmp	#LR__3730
2743c     01 96 46 F0 | 	shr	arg03, #1
27440     1F 82 C6 F9 | 	decod	_var02, #31
27444     4B 83 02 F1 | 	add	_var02, arg03
27448     42 85 62 F6 | 	neg	_var03, _var03
2744c     42 83 42 F0 | 	shr	_var02, _var03
27450     41 97 02 F6 | 	mov	arg03, _var02
27454     00 84 06 F6 | 	mov	_var03, #0
27458                 | LR__3730
27458     49 7B 02 F6 | 	mov	result1, arg01
2745c     1F 7A 66 F0 | 	shl	result1, #31
27460     42 83 02 F6 | 	mov	_var02, _var03
27464     17 82 66 F0 | 	shl	_var02, #23
27468     41 7B 42 F5 | 	or	result1, _var02
2746c     4B 87 02 F6 | 	mov	_var04, arg03
27470     09 86 46 F0 | 	shr	_var04, #9
27474     43 7B 42 F5 | 	or	result1, _var04
27478     04 00 90 FD | 	jmp	#__system___float_Pack_ret
2747c                 | LR__3731
2747c     40 7B 02 F6 | 	mov	result1, _var01
27480                 | __system___float_Pack_ret
27480     2D 00 64 FD | 	ret
27484                 | 
27484                 | __system___basic_print_float
27484     05 CA 05 F6 | 	mov	COUNT_, #5
27488     E8 00 A0 FD | 	call	#pushregs_
2748c     49 A7 02 F6 | 	mov	local01, arg01
27490     4A A9 02 F6 | 	mov	local02, arg02
27494     4B AB 0A F6 | 	mov	local03, arg03 wz
27498     4C AD 02 F6 | 	mov	local04, arg04
2749c     14 00 90 5D |  if_ne	jmp	#LR__3740
274a0     23 AC 0E F2 | 	cmp	local04, #35 wz
274a4     80 02 10 AF 
274a8     00 AE 06 A6 |  if_e	mov	local05, ##537198592
274ac     1D AE C6 59 |  if_ne	decod	local05, #29
274b0     57 AB 02 F6 | 	mov	local03, local05
274b4                 | LR__3740
274b4     53 93 02 F6 | 	mov	arg01, local01
274b8     A0 28 B0 FD | 	call	#__system___gettxfunc
274bc     3D AF 0A F6 | 	mov	local05, result1 wz
274c0     00 7A 06 A6 |  if_e	mov	result1, #0
274c4     57 93 02 56 |  if_ne	mov	arg01, local05
274c8     55 95 02 56 |  if_ne	mov	arg02, local03
274cc     54 97 02 56 |  if_ne	mov	arg03, local02
274d0     56 99 02 56 |  if_ne	mov	arg04, local04
274d4     00 E4 BF 5D |  if_ne	call	#__system___fmtfloat
274d8     E7 F0 03 F6 | 	mov	ptra, fp
274dc     F2 00 A0 FD | 	call	#popregs_
274e0                 | __system___basic_print_float_ret
274e0     2D 00 64 FD | 	ret
274e4                 | 
274e4                 | __system____builtin_atoi
274e4     07 CA 05 F6 | 	mov	COUNT_, #7
274e8     E8 00 A0 FD | 	call	#pushregs_
274ec                 | __system____builtin_atoi_enter
274ec     49 A7 02 F6 | 	mov	local01, arg01
274f0     4A A9 02 F6 | 	mov	local02, arg02
274f4     00 AA 06 F6 | 	mov	local03, #0
274f8     00 AC 06 F6 | 	mov	local04, #0
274fc     00 AE 06 F6 | 	mov	local05, #0
27500     D7 08 48 FB | 	callpa	#(@LR__3751-@LR__3750)>>2,fcache_load_ptr_
27504                 | LR__3750
27504     53 B1 C2 FA | 	rdbyte	local06, local01
27508     20 B0 0E F2 | 	cmp	local06, #32 wz
2750c     01 A6 06 A1 |  if_e	add	local01, #1
27510     F0 FF 9F AD |  if_e	jmp	#LR__3750
27514                 | LR__3751
27514     53 B3 C2 FA | 	rdbyte	local07, local01
27518     D7 12 48 FB | 	callpa	#(@LR__3753-@LR__3752)>>2,fcache_load_ptr_
2751c                 | LR__3752
2751c     2D B2 0E F2 | 	cmp	local07, #45 wz
27520     2B B2 0E 52 |  if_ne	cmp	local07, #43 wz
27524     18 00 90 5D |  if_ne	jmp	#LR__3754
27528     01 A6 06 F1 | 	add	local01, #1
2752c     2D B2 0E F2 | 	cmp	local07, #45 wz
27530     01 B0 06 A6 |  if_e	mov	local06, #1
27534     58 AF C2 A2 |  if_e	subr	local05, local06
27538     53 B3 C2 FA | 	rdbyte	local07, local01
2753c     DC FF 9F FD | 	jmp	#LR__3752
27540                 | LR__3753
27540                 | LR__3754
27540     00 A8 0E F2 | 	cmp	local02, #0 wz
27544     1C 00 90 5D |  if_ne	jmp	#LR__3756
27548     24 B2 0E F2 | 	cmp	local07, #36 wz
2754c     10 A8 06 A6 |  if_e	mov	local02, #16
27550     01 A6 06 A1 |  if_e	add	local01, #1
27554     0C 00 90 AD |  if_e	jmp	#LR__3755
27558     25 B2 0E F2 | 	cmp	local07, #37 wz
2755c     02 A8 06 A6 |  if_e	mov	local02, #2
27560     01 A6 06 A1 |  if_e	add	local01, #1
27564                 | LR__3755
27564                 | LR__3756
27564     D7 48 48 FB | 	callpa	#(@LR__3764-@LR__3757)>>2,fcache_load_ptr_
27568                 | LR__3757
27568                 | LR__3758
27568     53 B3 C2 FA | 	rdbyte	local07, local01
2756c     5F B2 0E F2 | 	cmp	local07, #95 wz
27570     01 A6 06 F1 | 	add	local01, #1
27574     F0 FF 9F AD |  if_e	jmp	#LR__3758
27578     30 B2 0E F2 | 	cmp	local07, #48 wz
2757c     26 B2 0E 52 |  if_ne	cmp	local07, #38 wz
27580     00 AC 06 A6 |  if_e	mov	local04, #0
27584     60 00 90 AD |  if_e	jmp	#LR__3763
27588     31 B2 56 F2 | 	cmps	local07, #49 wc
2758c     18 00 90 CD |  if_b	jmp	#LR__3759
27590     3A B2 56 F2 | 	cmps	local07, #58 wc
27594     59 AD 02 C6 |  if_b	mov	local04, local07
27598     30 AC 86 C1 |  if_b	sub	local04, #48
2759c     00 A8 0E C2 |  if_b	cmp	local02, #0 wz
275a0     0A A8 06 86 |  if_c_and_z	mov	local02, #10
275a4     40 00 90 CD |  if_b	jmp	#LR__3762
275a8                 | LR__3759
275a8     0B A8 56 F2 | 	cmps	local02, #11 wc
275ac     61 B2 56 32 |  if_ae	cmps	local07, #97 wc
275b0     14 00 90 CD |  if_b	jmp	#LR__3760
275b4     67 B2 56 F2 | 	cmps	local07, #103 wc
275b8     61 B2 86 C1 |  if_b	sub	local07, #97
275bc     0A AC 06 C6 |  if_b	mov	local04, #10
275c0     59 AD 02 C1 |  if_b	add	local04, local07
275c4     20 00 90 CD |  if_b	jmp	#LR__3761
275c8                 | LR__3760
275c8     0B A8 56 F2 | 	cmps	local02, #11 wc
275cc     41 B2 56 32 |  if_ae	cmps	local07, #65 wc
275d0     24 00 90 CD |  if_b	jmp	#LR__3765
275d4     47 B2 56 F2 | 	cmps	local07, #71 wc
275d8     41 B2 86 C1 |  if_b	sub	local07, #65
275dc     0A AC 06 C6 |  if_b	mov	local04, #10
275e0     59 AD 02 C1 |  if_b	add	local04, local07
275e4     10 00 90 3D |  if_ae	jmp	#LR__3765
275e8                 | LR__3761
275e8                 | LR__3762
275e8                 | LR__3763
275e8     55 A9 02 FD | 	qmul	local02, local03
275ec     18 AA 62 FD | 	getqx	local03
275f0     56 AB 02 F1 | 	add	local03, local04
275f4     70 FF 9F FD | 	jmp	#LR__3757
275f8                 | LR__3764
275f8                 | LR__3765
275f8     00 A8 0E F2 | 	cmp	local02, #0 wz
275fc     64 00 90 5D |  if_ne	jmp	#LR__3771
27600     78 B2 0E F2 | 	cmp	local07, #120 wz
27604     68 B2 0E 52 |  if_ne	cmp	local07, #104 wz
27608     58 B2 0E 52 |  if_ne	cmp	local07, #88 wz
2760c     48 B2 0E 52 |  if_ne	cmp	local07, #72 wz
27610     14 00 90 5D |  if_ne	jmp	#LR__3766
27614     53 93 02 F6 | 	mov	arg01, local01
27618     10 94 06 F6 | 	mov	arg02, #16
2761c     C4 FE BF FD | 	call	#__system____builtin_atoi
27620     3D AB 02 F6 | 	mov	local03, result1
27624     3C 00 90 FD | 	jmp	#LR__3770
27628                 | LR__3766
27628     62 B2 0E F2 | 	cmp	local07, #98 wz
2762c     42 B2 0E 52 |  if_ne	cmp	local07, #66 wz
27630     14 00 90 5D |  if_ne	jmp	#LR__3767
27634     53 93 02 F6 | 	mov	arg01, local01
27638     02 94 06 F6 | 	mov	arg02, #2
2763c     A4 FE BF FD | 	call	#__system____builtin_atoi
27640     3D AB 02 F6 | 	mov	local03, result1
27644     1C 00 90 FD | 	jmp	#LR__3769
27648                 | LR__3767
27648     6F B2 0E F2 | 	cmp	local07, #111 wz
2764c     4F B2 0E 52 |  if_ne	cmp	local07, #79 wz
27650     10 00 90 5D |  if_ne	jmp	#LR__3768
27654     53 93 02 F6 | 	mov	arg01, local01
27658     08 94 06 F6 | 	mov	arg02, #8
2765c     84 FE BF FD | 	call	#__system____builtin_atoi
27660     3D AB 02 F6 | 	mov	local03, result1
27664                 | LR__3768
27664                 | LR__3769
27664                 | LR__3770
27664                 | LR__3771
27664     00 AE 0E F2 | 	cmp	local05, #0 wz
27668     55 AB 62 56 |  if_ne	neg	local03, local03
2766c     55 7B 02 F6 | 	mov	result1, local03
27670     E7 F0 03 F6 | 	mov	ptra, fp
27674     F2 00 A0 FD | 	call	#popregs_
27678                 | __system____builtin_atoi_ret
27678     2D 00 64 FD | 	ret
2767c                 | 
2767c                 | __system____builtin_atof
2767c     07 CA 05 F6 | 	mov	COUNT_, #7
27680     E8 00 A0 FD | 	call	#pushregs_
27684     49 A7 02 F6 | 	mov	local01, arg01
27688     00 A8 06 F6 | 	mov	local02, #0
2768c     00 AA 06 F6 | 	mov	local03, #0
27690     00 AC 06 F6 | 	mov	local04, #0
27694     00 AE 06 F6 | 	mov	local05, #0
27698     D7 08 48 FB | 	callpa	#(@LR__3781-@LR__3780)>>2,fcache_load_ptr_
2769c                 | LR__3780
2769c     53 97 C2 FA | 	rdbyte	arg03, local01
276a0     20 96 0E F2 | 	cmp	arg03, #32 wz
276a4     01 A6 06 A1 |  if_e	add	local01, #1
276a8     F0 FF 9F AD |  if_e	jmp	#LR__3780
276ac                 | LR__3781
276ac     53 B1 C2 FA | 	rdbyte	local06, local01
276b0                 | LR__3782
276b0     2B B0 0E F2 | 	cmp	local06, #43 wz
276b4     2D B0 0E 52 |  if_ne	cmp	local06, #45 wz
276b8     14 00 90 5D |  if_ne	jmp	#LR__3783
276bc     2D B0 0E F2 | 	cmp	local06, #45 wz
276c0     1F AC E6 A4 |  if_e	bitnot	local04, #31
276c4     01 A6 06 F1 | 	add	local01, #1
276c8     53 B1 C2 FA | 	rdbyte	local06, local01
276cc     E0 FF 9F FD | 	jmp	#LR__3782
276d0                 | LR__3783
276d0                 | LR__3784
276d0     D7 08 48 FB | 	callpa	#(@LR__3786-@LR__3785)>>2,fcache_load_ptr_
276d4                 | LR__3785
276d4     53 B1 C2 FA | 	rdbyte	local06, local01
276d8     5F B0 0E F2 | 	cmp	local06, #95 wz
276dc     01 A6 06 F1 | 	add	local01, #1
276e0     F0 FF 9F AD |  if_e	jmp	#LR__3785
276e4                 | LR__3786
276e4     00 B0 0E F2 | 	cmp	local06, #0 wz
276e8     5C 00 90 AD |  if_e	jmp	#LR__3788
276ec     30 B0 56 F2 | 	cmps	local06, #48 wc
276f0     44 00 90 CD |  if_b	jmp	#LR__3787
276f4     3A B0 56 F2 | 	cmps	local06, #58 wc
276f8     3C 00 90 3D |  if_ae	jmp	#LR__3787
276fc     54 93 02 F6 | 	mov	arg01, local02
27700     00 90 20 FF 
27704     00 94 06 F6 | 	mov	arg02, ##1092616192
27708     54 F7 BF FD | 	call	#__system___float_mul
2770c     3D A9 02 F6 | 	mov	local02, result1
27710     30 B0 86 F1 | 	sub	local06, #48
27714     58 93 02 F6 | 	mov	arg01, local06
27718     40 F3 BF FD | 	call	#__system___float_fromuns
2771c     3D 95 02 F6 | 	mov	arg02, result1
27720     54 93 02 F6 | 	mov	arg01, local02
27724     68 F3 BF FD | 	call	#__system___float_add
27728     3D A9 02 F6 | 	mov	local02, result1
2772c     00 AE 0E F2 | 	cmp	local05, #0 wz
27730     01 AA 86 51 |  if_ne	sub	local03, #1
27734     98 FF 9F FD | 	jmp	#LR__3784
27738                 | LR__3787
27738     2E B0 0E F2 | 	cmp	local06, #46 wz
2773c     00 AE 0E A2 |  if_e	cmp	local05, #0 wz
27740     01 AE 06 A6 |  if_e	mov	local05, #1
27744     88 FF 9F AD |  if_e	jmp	#LR__3784
27748                 | LR__3788
27748     45 B0 0E F2 | 	cmp	local06, #69 wz
2774c     65 B0 0E 52 |  if_ne	cmp	local06, #101 wz
27750     18 00 90 5D |  if_ne	jmp	#LR__3789
27754     53 93 02 F6 | 	mov	arg01, local01
27758     00 94 06 F6 | 	mov	arg02, #0
2775c     84 FD BF FD | 	call	#__system____builtin_atoi
27760     55 7B 02 F1 | 	add	result1, local03
27764     3D B3 02 F6 | 	mov	local07, result1
27768     04 00 90 FD | 	jmp	#LR__3790
2776c                 | LR__3789
2776c     55 B3 02 F6 | 	mov	local07, local03
27770                 | LR__3790
27770     59 97 02 F6 | 	mov	arg03, local07
27774     54 93 02 F6 | 	mov	arg01, local02
27778     00 90 20 FF 
2777c     00 94 06 F6 | 	mov	arg02, ##1092616192
27780     F4 06 B0 FD | 	call	#__system___float_pow_n
27784     56 7B 62 F5 | 	xor	result1, local04
27788     E7 F0 03 F6 | 	mov	ptra, fp
2778c     F2 00 A0 FD | 	call	#popregs_
27790                 | __system____builtin_atof_ret
27790     2D 00 64 FD | 	ret
27794                 | 
27794                 | __system____builtin_ilogb
27794     F8 FB BF FD | 	call	#__system___float_Unpack
27798     00 7E 0E F2 | 	cmp	result3, #0 wz
2779c     00 00 40 AF 
277a0     01 7A 06 A6 |  if_e	mov	result1, ##-2147483647
277a4     24 00 90 AD |  if_e	jmp	#LR__3801
277a8     80 7C 0E F2 | 	cmp	result2, #128 wz
277ac     18 00 90 5D |  if_ne	jmp	#LR__3800
277b0     00 00 10 FF 
277b4     00 7E 0E F2 | 	cmp	result3, ##536870912 wz
277b8     1E 7A CE A9 |  if_e	bmask	result1, #30
277bc     0C 00 90 AD |  if_e	jmp	#LR__3801
277c0     1F 7A C6 F9 | 	decod	result1, #31
277c4     04 00 90 FD | 	jmp	#LR__3801
277c8                 | LR__3800
277c8     3E 7B 02 F6 | 	mov	result1, result2
277cc                 | LR__3801
277cc                 | __system____builtin_ilogb_ret
277cc     2D 00 64 FD | 	ret
277d0                 | 
277d0                 | __system____builtin_sinf
277d0     03 CA 05 F6 | 	mov	COUNT_, #3
277d4     E8 00 A0 FD | 	call	#pushregs_
277d8     49 A7 02 F6 | 	mov	local01, arg01
277dc     87 64 20 FF 
277e0     DB 95 06 F6 | 	mov	arg02, ##1086918619
277e4     7C F8 BF FD | 	call	#__system___float_div
277e8     3D 93 02 F6 | 	mov	arg01, result1
277ec     00 94 06 F6 | 	mov	arg02, #0
277f0     34 FB BF FD | 	call	#__system___float_tointeger
277f4     3D 97 0A F6 | 	mov	arg03, result1 wz
277f8     44 00 90 AD |  if_e	jmp	#LR__3810
277fc     4B 93 52 F6 | 	abs	arg01, arg03 wc
27800     1F A8 C6 C9 |  if_b	decod	local02, #31
27804     00 A8 06 36 |  if_ae	mov	local02, #0
27808     50 F2 BF FD | 	call	#__system___float_fromuns
2780c     54 7B 62 F5 | 	xor	result1, local02
27810     3D 93 02 F6 | 	mov	arg01, result1
27814     1E 94 C6 F9 | 	decod	arg02, #30
27818     44 F6 BF FD | 	call	#__system___float_mul
2781c     3D 93 02 F6 | 	mov	arg01, result1
27820     87 24 20 FF 
27824     DB 95 06 F6 | 	mov	arg02, ##1078530011
27828     34 F6 BF FD | 	call	#__system___float_mul
2782c     3D 95 02 F6 | 	mov	arg02, result1
27830     53 93 02 F6 | 	mov	arg01, local01
27834     1F 94 E6 F4 | 	bitnot	arg02, #31
27838     54 F2 BF FD | 	call	#__system___float_add
2783c     3D A7 02 F6 | 	mov	local01, result1
27840                 | LR__3810
27840     53 93 02 F6 | 	mov	arg01, local01
27844     66 E6 1E FF 
27848     CD 94 06 F6 | 	mov	arg02, ##1036831949
2784c     01 96 06 F6 | 	mov	arg03, #1
27850     40 FA BF FD | 	call	#__system___float_cmp
27854     00 7A 56 F2 | 	cmps	result1, #0 wc
27858     5C 00 90 3D |  if_ae	jmp	#LR__3811
2785c     53 93 02 F6 | 	mov	arg01, local01
27860     66 E6 5E FF 
27864     CD 94 06 F6 | 	mov	arg02, ##-1110651699
27868     01 96 66 F6 | 	neg	arg03, #1
2786c     24 FA BF FD | 	call	#__system___float_cmp
27870     01 7A 56 F2 | 	cmps	result1, #1 wc
27874     40 00 90 CD |  if_b	jmp	#LR__3811
27878     53 93 02 F6 | 	mov	arg01, local01
2787c     53 95 02 F6 | 	mov	arg02, local01
27880     DC F5 BF FD | 	call	#__system___float_mul
27884     3D 93 02 F6 | 	mov	arg01, result1
27888     53 95 02 F6 | 	mov	arg02, local01
2788c     D0 F5 BF FD | 	call	#__system___float_mul
27890     3D 93 02 F6 | 	mov	arg01, result1
27894     00 60 20 FF 
27898     00 94 06 F6 | 	mov	arg02, ##1086324736
2789c     C4 F7 BF FD | 	call	#__system___float_div
278a0     3D 95 02 F6 | 	mov	arg02, result1
278a4     53 93 02 F6 | 	mov	arg01, local01
278a8     1F 94 E6 F4 | 	bitnot	arg02, #31
278ac     E0 F1 BF FD | 	call	#__system___float_add
278b0     3D AB 02 F6 | 	mov	local03, result1
278b4     54 00 90 FD | 	jmp	#LR__3812
278b8                 | LR__3811
278b8     53 93 02 F6 | 	mov	arg01, local01
278bc     7C 91 26 FF 
278c0     83 95 06 F6 | 	mov	arg02, ##1294137731
278c4     98 F5 BF FD | 	call	#__system___float_mul
278c8     3D 93 02 F6 | 	mov	arg01, result1
278cc     00 94 06 F6 | 	mov	arg02, #0
278d0     54 FA BF FD | 	call	#__system___float_tointeger
278d4     02 7A 66 F0 | 	shl	result1, #2
278d8     00 00 A0 FF 
278dc     3D 01 48 FD | 	qrotate	##1073741824, result1
278e0     19 92 62 FD | 	getqy	arg01
278e4     49 93 52 F6 | 	abs	arg01, arg01 wc
278e8     1F A8 C6 C9 |  if_b	decod	local02, #31
278ec     00 A8 06 36 |  if_ae	mov	local02, #0
278f0     68 F1 BF FD | 	call	#__system___float_fromuns
278f4     54 7B 62 F5 | 	xor	result1, local02
278f8     3D 93 02 F6 | 	mov	arg01, result1
278fc     00 40 27 FF 
27900     00 94 06 F6 | 	mov	arg02, ##1317011456
27904     5C F7 BF FD | 	call	#__system___float_div
27908     3D AB 02 F6 | 	mov	local03, result1
2790c                 | LR__3812
2790c     55 7B 02 F6 | 	mov	result1, local03
27910     E7 F0 03 F6 | 	mov	ptra, fp
27914     F2 00 A0 FD | 	call	#popregs_
27918                 | __system____builtin_sinf_ret
27918     2D 00 64 FD | 	ret
2791c                 | 
2791c                 | __system____builtin_tanf
2791c     02 CA 05 F6 | 	mov	COUNT_, #2
27920     E8 00 A0 FD | 	call	#pushregs_
27924     49 A7 02 F6 | 	mov	local01, arg01
27928     A4 FE BF FD | 	call	#__system____builtin_sinf
2792c     3D A9 02 F6 | 	mov	local02, result1
27930     53 95 02 F6 | 	mov	arg02, local01
27934     87 E4 1F FF 
27938     DB 93 06 F6 | 	mov	arg01, ##1070141403
2793c     1F 94 E6 F4 | 	bitnot	arg02, #31
27940     4C F1 BF FD | 	call	#__system___float_add
27944     3D 93 02 F6 | 	mov	arg01, result1
27948     84 FE BF FD | 	call	#__system____builtin_sinf
2794c     3D 95 02 F6 | 	mov	arg02, result1
27950     54 93 02 F6 | 	mov	arg01, local02
27954     0C F7 BF FD | 	call	#__system___float_div
27958     E7 F0 03 F6 | 	mov	ptra, fp
2795c     F2 00 A0 FD | 	call	#popregs_
27960                 | __system____builtin_tanf_ret
27960     2D 00 64 FD | 	ret
27964                 | 
27964                 | __system____builtin_asinf
27964     01 CA 05 F6 | 	mov	COUNT_, #1
27968     E8 00 A0 FD | 	call	#pushregs_
2796c     49 A7 02 F6 | 	mov	local01, arg01
27970     53 95 02 F6 | 	mov	arg02, local01
27974     53 93 02 F6 | 	mov	arg01, local01
27978     E4 F4 BF FD | 	call	#__system___float_mul
2797c     3D 95 02 F6 | 	mov	arg02, result1
27980     00 C0 1F FF 
27984     00 92 06 F6 | 	mov	arg01, ##1065353216
27988     1F 94 E6 F4 | 	bitnot	arg02, #31
2798c     00 F1 BF FD | 	call	#__system___float_add
27990     3D 93 02 F6 | 	mov	arg01, result1
27994     F0 F3 BF FD | 	call	#__system___float_sqrt
27998     3D 95 02 F6 | 	mov	arg02, result1
2799c     53 93 02 F6 | 	mov	arg01, local01
279a0     58 00 B0 FD | 	call	#__system____builtin_atan2f
279a4     E7 F0 03 F6 | 	mov	ptra, fp
279a8     F2 00 A0 FD | 	call	#popregs_
279ac                 | __system____builtin_asinf_ret
279ac     2D 00 64 FD | 	ret
279b0                 | 
279b0                 | __system____builtin_acosf
279b0     01 CA 05 F6 | 	mov	COUNT_, #1
279b4     E8 00 A0 FD | 	call	#pushregs_
279b8     49 A7 02 F6 | 	mov	local01, arg01
279bc     53 95 02 F6 | 	mov	arg02, local01
279c0     53 93 02 F6 | 	mov	arg01, local01
279c4     98 F4 BF FD | 	call	#__system___float_mul
279c8     3D 95 02 F6 | 	mov	arg02, result1
279cc     00 C0 1F FF 
279d0     00 92 06 F6 | 	mov	arg01, ##1065353216
279d4     1F 94 E6 F4 | 	bitnot	arg02, #31
279d8     B4 F0 BF FD | 	call	#__system___float_add
279dc     3D 93 02 F6 | 	mov	arg01, result1
279e0     A4 F3 BF FD | 	call	#__system___float_sqrt
279e4     3D 93 02 F6 | 	mov	arg01, result1
279e8     53 95 02 F6 | 	mov	arg02, local01
279ec     0C 00 B0 FD | 	call	#__system____builtin_atan2f
279f0     E7 F0 03 F6 | 	mov	ptra, fp
279f4     F2 00 A0 FD | 	call	#popregs_
279f8                 | __system____builtin_acosf_ret
279f8     2D 00 64 FD | 	ret
279fc                 | 
279fc                 | __system____builtin_atan2f
279fc     04 CA 05 F6 | 	mov	COUNT_, #4
27a00     E8 00 A0 FD | 	call	#pushregs_
27a04     49 A7 02 F6 | 	mov	local01, arg01
27a08     4A A9 02 F6 | 	mov	local02, arg02
27a0c     53 93 02 F6 | 	mov	arg01, local01
27a10     00 94 06 F6 | 	mov	arg02, #0
27a14     01 96 06 F6 | 	mov	arg03, #1
27a18     78 F8 BF FD | 	call	#__system___float_cmp
27a1c     00 7A 0E F2 | 	cmp	result1, #0 wz
27a20     28 00 90 5D |  if_ne	jmp	#LR__3820
27a24     54 93 02 F6 | 	mov	arg01, local02
27a28     00 94 06 F6 | 	mov	arg02, #0
27a2c     01 96 06 F6 | 	mov	arg03, #1
27a30     60 F8 BF FD | 	call	#__system___float_cmp
27a34     00 7A 56 F2 | 	cmps	result1, #0 wc
27a38     87 24 60 CF 
27a3c     DB 7B 06 C6 |  if_b	mov	result1, ##-1068953637
27a40     DC 00 90 CD |  if_b	jmp	#LR__3821
27a44     00 7A 06 F6 | 	mov	result1, #0
27a48     D4 00 90 FD | 	jmp	#LR__3821
27a4c                 | LR__3820
27a4c     54 93 02 F6 | 	mov	arg01, local02
27a50     54 95 02 F6 | 	mov	arg02, local02
27a54     08 F4 BF FD | 	call	#__system___float_mul
27a58     3D AB 02 F6 | 	mov	local03, result1
27a5c     53 93 02 F6 | 	mov	arg01, local01
27a60     53 95 02 F6 | 	mov	arg02, local01
27a64     F8 F3 BF FD | 	call	#__system___float_mul
27a68     3D 95 02 F6 | 	mov	arg02, result1
27a6c     55 93 02 F6 | 	mov	arg01, local03
27a70     1C F0 BF FD | 	call	#__system___float_add
27a74     3D 93 02 F6 | 	mov	arg01, result1
27a78     0C F3 BF FD | 	call	#__system___float_sqrt
27a7c     3D AB 02 F6 | 	mov	local03, result1
27a80     54 93 02 F6 | 	mov	arg01, local02
27a84     55 95 02 F6 | 	mov	arg02, local03
27a88     D8 F5 BF FD | 	call	#__system___float_div
27a8c     3D A9 02 F6 | 	mov	local02, result1
27a90     53 93 02 F6 | 	mov	arg01, local01
27a94     55 95 02 F6 | 	mov	arg02, local03
27a98     C8 F5 BF FD | 	call	#__system___float_div
27a9c     3D A7 02 F6 | 	mov	local01, result1
27aa0     00 40 27 FF 
27aa4     00 92 06 F6 | 	mov	arg01, ##1317011456
27aa8     54 95 02 F6 | 	mov	arg02, local02
27aac     B0 F3 BF FD | 	call	#__system___float_mul
27ab0     3D 93 02 F6 | 	mov	arg01, result1
27ab4     00 94 06 F6 | 	mov	arg02, #0
27ab8     6C F8 BF FD | 	call	#__system___float_tointeger
27abc     3D AB 02 F6 | 	mov	local03, result1
27ac0     00 40 27 FF 
27ac4     00 92 06 F6 | 	mov	arg01, ##1317011456
27ac8     53 95 02 F6 | 	mov	arg02, local01
27acc     90 F3 BF FD | 	call	#__system___float_mul
27ad0     3D 93 02 F6 | 	mov	arg01, result1
27ad4     00 94 06 F6 | 	mov	arg02, #0
27ad8     4C F8 BF FD | 	call	#__system___float_tointeger
27adc     3D AB 52 FD | 	qvector	local03, result1
27ae0     87 24 20 FF 
27ae4     DB AB 06 F6 | 	mov	local03, ##1078530011
27ae8     19 92 62 FD | 	getqy	arg01
27aec     01 92 C6 F0 | 	sar	arg01, #1
27af0     49 93 52 F6 | 	abs	arg01, arg01 wc
27af4     1F AC C6 C9 |  if_b	decod	local04, #31
27af8     00 AC 06 36 |  if_ae	mov	local04, #0
27afc     5C EF BF FD | 	call	#__system___float_fromuns
27b00     56 7B 62 F5 | 	xor	result1, local04
27b04     3D 93 02 F6 | 	mov	arg01, result1
27b08     00 40 27 FF 
27b0c     00 94 06 F6 | 	mov	arg02, ##1317011456
27b10     50 F5 BF FD | 	call	#__system___float_div
27b14     3D 95 02 F6 | 	mov	arg02, result1
27b18     55 93 02 F6 | 	mov	arg01, local03
27b1c     40 F3 BF FD | 	call	#__system___float_mul
27b20                 | LR__3821
27b20     E7 F0 03 F6 | 	mov	ptra, fp
27b24     F2 00 A0 FD | 	call	#popregs_
27b28                 | __system____builtin_atan2f_ret
27b28     2D 00 64 FD | 	ret
27b2c                 | 
27b2c                 | __system____builtin_exp2f
27b2c     04 CA 05 F6 | 	mov	COUNT_, #4
27b30     E8 00 A0 FD | 	call	#pushregs_
27b34     49 A7 02 F6 | 	mov	local01, arg01
27b38     00 7F 21 FF 
27b3c     00 94 06 F6 | 	mov	arg02, ##1123942400
27b40     01 96 66 F6 | 	neg	arg03, #1
27b44     4C F7 BF FD | 	call	#__system___float_cmp
27b48     00 7A 56 F2 | 	cmps	result1, #0 wc
27b4c     00 C0 3F 3F 
27b50     00 7A 06 36 |  if_ae	mov	result1, ##2139095040
27b54     DC 00 90 3D |  if_ae	jmp	#LR__3831
27b58     53 93 02 F6 | 	mov	arg01, local01
27b5c     00 7F 61 FF 
27b60     00 94 06 F6 | 	mov	arg02, ##-1023541248
27b64     01 96 06 F6 | 	mov	arg03, #1
27b68     28 F7 BF FD | 	call	#__system___float_cmp
27b6c     00 7A 56 F2 | 	cmps	result1, #0 wc
27b70     00 7A 06 C6 |  if_b	mov	result1, #0
27b74     BC 00 90 CD |  if_b	jmp	#LR__3831
27b78     53 93 02 F6 | 	mov	arg01, local01
27b7c     00 94 06 F6 | 	mov	arg02, #0
27b80     A4 F7 BF FD | 	call	#__system___float_tointeger
27b84     3D A9 02 F6 | 	mov	local02, result1
27b88     54 93 52 F6 | 	abs	arg01, local02 wc
27b8c     1F AA C6 C9 |  if_b	decod	local03, #31
27b90     00 AA 06 36 |  if_ae	mov	local03, #0
27b94     C4 EE BF FD | 	call	#__system___float_fromuns
27b98     55 7B 62 F5 | 	xor	result1, local03
27b9c     3D 95 02 F6 | 	mov	arg02, result1
27ba0     53 93 02 F6 | 	mov	arg01, local01
27ba4     1F 94 E6 F4 | 	bitnot	arg02, #31
27ba8     E4 EE BF FD | 	call	#__system___float_add
27bac     3D AD 02 F6 | 	mov	local04, result1
27bb0     56 93 02 F6 | 	mov	arg01, local04
27bb4     00 94 06 F6 | 	mov	arg02, #0
27bb8     01 96 06 F6 | 	mov	arg03, #1
27bbc     D4 F6 BF FD | 	call	#__system___float_cmp
27bc0     00 7A 56 F2 | 	cmps	result1, #0 wc
27bc4     18 00 90 3D |  if_ae	jmp	#LR__3830
27bc8     56 93 02 F6 | 	mov	arg01, local04
27bcc     00 C0 1F FF 
27bd0     00 94 06 F6 | 	mov	arg02, ##1065353216
27bd4     B8 EE BF FD | 	call	#__system___float_add
27bd8     3D AD 02 F6 | 	mov	local04, result1
27bdc     01 A8 86 F1 | 	sub	local02, #1
27be0                 | LR__3830
27be0     7F A8 06 F1 | 	add	local02, #127
27be4     17 A8 66 F0 | 	shl	local02, #23
27be8     56 93 02 F6 | 	mov	arg01, local04
27bec     00 80 26 FF 
27bf0     00 94 06 F6 | 	mov	arg02, ##1291845632
27bf4     68 F2 BF FD | 	call	#__system___float_mul
27bf8     3D 93 02 F6 | 	mov	arg01, result1
27bfc     00 94 06 F6 | 	mov	arg02, #0
27c00     24 F7 BF FD | 	call	#__system___float_tointeger
27c04     3D AD 0A F6 | 	mov	local04, result1 wz
27c08     54 7B 02 A6 |  if_e	mov	result1, local02
27c0c     24 00 90 AD |  if_e	jmp	#LR__3831
27c10     3E AC 26 F4 | 	bith	local04, #62
27c14     0F AC 62 FD | 	qexp	local04
27c18     54 93 02 F6 | 	mov	arg01, local02
27c1c     18 94 62 FD | 	getqx	arg02
27c20     01 94 06 F1 | 	add	arg02, #1
27c24     01 94 46 F0 | 	shr	arg02, #1
27c28     00 80 1F FF 
27c2c     00 94 06 F1 | 	add	arg02, ##1056964608
27c30     2C F2 BF FD | 	call	#__system___float_mul
27c34                 | LR__3831
27c34     E7 F0 03 F6 | 	mov	ptra, fp
27c38     F2 00 A0 FD | 	call	#popregs_
27c3c                 | __system____builtin_exp2f_ret
27c3c     2D 00 64 FD | 	ret
27c40                 | 
27c40                 | __system____builtin_log2f
27c40     06 CA 05 F6 | 	mov	COUNT_, #6
27c44     E8 00 A0 FD | 	call	#pushregs_
27c48     49 A7 02 F6 | 	mov	local01, arg01
27c4c     49 A9 0A F6 | 	mov	local02, arg01 wz
27c50     00 00 40 5F 
27c54     00 A8 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
27c58     00 40 00 AF 
27c5c     00 7A 66 A6 |  if_e	neg	result1, ##8388608
27c60     08 01 90 AD |  if_e	jmp	#LR__3844
27c64     00 A8 56 F2 | 	cmps	local02, #0 wc
27c68     00 E0 3F CF 
27c6c     00 7A 06 C6 |  if_b	mov	result1, ##2143289344
27c70     F8 00 90 CD |  if_b	jmp	#LR__3844
27c74     53 93 02 F6 | 	mov	arg01, local01
27c78     00 90 20 FF 
27c7c     00 94 06 F6 | 	mov	arg02, ##1092616192
27c80     01 96 06 F6 | 	mov	arg03, #1
27c84     0C F6 BF FD | 	call	#__system___float_cmp
27c88     00 7A 0E F2 | 	cmp	result1, #0 wz
27c8c     4D 2A 20 AF 
27c90     78 7A 06 A6 |  if_e	mov	result1, ##1079286392
27c94     D4 00 90 AD |  if_e	jmp	#LR__3844
27c98     53 93 02 F6 | 	mov	arg01, local01
27c9c     FC 16 20 FF 
27ca0     54 94 06 F6 | 	mov	arg02, ##1076754516
27ca4     01 96 06 F6 | 	mov	arg03, #1
27ca8     E8 F5 BF FD | 	call	#__system___float_cmp
27cac     00 7A 0E F2 | 	cmp	result1, #0 wz
27cb0     55 DC 1F AF 
27cb4     3B 7A 06 A6 |  if_e	mov	result1, ##1069066811
27cb8     B0 00 90 AD |  if_e	jmp	#LR__3844
27cbc     54 AB 02 F6 | 	mov	local03, local02
27cc0     17 AA 46 F0 | 	shr	local03, #23
27cc4     55 AB E2 F8 | 	getbyte	local03, local03, #0
27cc8     17 A9 06 F4 | 	bitl	local02, #279
27ccc     54 AD 02 F6 | 	mov	local04, local02
27cd0     FF AA 0E F2 | 	cmp	local03, #255 wz
27cd4     1C 00 90 5D |  if_ne	jmp	#LR__3840
27cd8     00 AC 0E F2 | 	cmp	local04, #0 wz
27cdc     00 C0 3F 5F 
27ce0     00 AE 06 56 |  if_ne	mov	local05, ##2139095040
27ce4     00 E0 3F AF 
27ce8     00 AE 06 A6 |  if_e	mov	local05, ##2143289344
27cec     57 7B 02 F6 | 	mov	result1, local05
27cf0     78 00 90 FD | 	jmp	#LR__3844
27cf4                 | LR__3840
27cf4     00 AA 0E F2 | 	cmp	local03, #0 wz
27cf8     17 AC 26 54 |  if_ne	bith	local04, #23
27cfc     7F AA 86 51 |  if_ne	sub	local03, #127
27d00     28 00 90 5D |  if_ne	jmp	#LR__3843
27d04     00 AC 0E F2 | 	cmp	local04, #0 wz
27d08     00 40 00 AF 
27d0c     00 7A 66 A6 |  if_e	neg	result1, ##8388608
27d10     58 00 90 AD |  if_e	jmp	#LR__3844
27d14     7E AA 66 F6 | 	neg	local03, #126
27d18     D7 08 48 FB | 	callpa	#(@LR__3842-@LR__3841)>>2,fcache_load_ptr_
27d1c                 | LR__3841
27d1c     17 AC 2E F4 | 	testbn	local04, #23 wz
27d20     01 AC 66 A0 |  if_e	shl	local04, #1
27d24     01 AA 06 A1 |  if_e	add	local03, #1
27d28     F0 FF 9F AD |  if_e	jmp	#LR__3841
27d2c                 | LR__3842
27d2c                 | LR__3843
27d2c     0E AC 62 FD | 	qlog	local04
27d30     01 AA 86 F1 | 	sub	local03, #1
27d34     55 93 52 F6 | 	abs	arg01, local03 wc
27d38     1F B0 C6 C9 |  if_b	decod	local06, #31
27d3c     00 B0 06 36 |  if_ae	mov	local06, #0
27d40     18 AE 62 FD | 	getqx	local05
27d44     9B AE 06 F4 | 	bitl	local05, #155
27d48     08 AE 06 F1 | 	add	local05, #8
27d4c     04 AE 46 F0 | 	shr	local05, #4
27d50     00 C0 1F FF 
27d54     00 AE 06 F1 | 	add	local05, ##1065353216
27d58     00 ED BF FD | 	call	#__system___float_fromuns
27d5c     58 7B 62 F5 | 	xor	result1, local06
27d60     3D 95 02 F6 | 	mov	arg02, result1
27d64     57 93 02 F6 | 	mov	arg01, local05
27d68     24 ED BF FD | 	call	#__system___float_add
27d6c                 | LR__3844
27d6c     E7 F0 03 F6 | 	mov	ptra, fp
27d70     F2 00 A0 FD | 	call	#popregs_
27d74                 | __system____builtin_log2f_ret
27d74     2D 00 64 FD | 	ret
27d78                 | 
27d78                 | __system____builtin_powf
27d78     04 CA 05 F6 | 	mov	COUNT_, #4
27d7c     E8 00 A0 FD | 	call	#pushregs_
27d80     49 A7 02 F6 | 	mov	local01, arg01
27d84     4A A9 02 F6 | 	mov	local02, arg02
27d88     54 93 02 F6 | 	mov	arg01, local02
27d8c     00 94 06 F6 | 	mov	arg02, #0
27d90     94 F5 BF FD | 	call	#__system___float_tointeger
27d94     3D AB 02 F6 | 	mov	local03, result1
27d98     55 93 52 F6 | 	abs	arg01, local03 wc
27d9c     1F AC C6 C9 |  if_b	decod	local04, #31
27da0     00 AC 06 36 |  if_ae	mov	local04, #0
27da4     B4 EC BF FD | 	call	#__system___float_fromuns
27da8     56 7B 62 F5 | 	xor	result1, local04
27dac     3D 93 02 F6 | 	mov	arg01, result1
27db0     54 95 02 F6 | 	mov	arg02, local02
27db4     01 96 06 F6 | 	mov	arg03, #1
27db8     D8 F4 BF FD | 	call	#__system___float_cmp
27dbc     00 7A 0E F2 | 	cmp	result1, #0 wz
27dc0     18 00 90 5D |  if_ne	jmp	#LR__3850
27dc4     00 C0 1F FF 
27dc8     00 92 06 F6 | 	mov	arg01, ##1065353216
27dcc     53 95 02 F6 | 	mov	arg02, local01
27dd0     55 97 02 F6 | 	mov	arg03, local03
27dd4     A0 00 B0 FD | 	call	#__system___float_pow_n
27dd8     58 00 90 FD | 	jmp	#LR__3851
27ddc                 | LR__3850
27ddc     53 93 02 F6 | 	mov	arg01, local01
27de0     00 94 06 F6 | 	mov	arg02, #0
27de4     01 96 06 F6 | 	mov	arg03, #1
27de8     A8 F4 BF FD | 	call	#__system___float_cmp
27dec     00 7A 56 F2 | 	cmps	result1, #0 wc
27df0     00 E0 3F CF 
27df4     00 7A 06 C6 |  if_b	mov	result1, ##2143289344
27df8     38 00 90 CD |  if_b	jmp	#LR__3851
27dfc     53 93 02 F6 | 	mov	arg01, local01
27e00     00 94 06 F6 | 	mov	arg02, #0
27e04     01 96 06 F6 | 	mov	arg03, #1
27e08     88 F4 BF FD | 	call	#__system___float_cmp
27e0c     00 7A 0E F2 | 	cmp	result1, #0 wz
27e10     00 7A 06 A6 |  if_e	mov	result1, #0
27e14     1C 00 90 AD |  if_e	jmp	#LR__3851
27e18     53 93 02 F6 | 	mov	arg01, local01
27e1c     20 FE BF FD | 	call	#__system____builtin_log2f
27e20     3D 93 02 F6 | 	mov	arg01, result1
27e24     54 95 02 F6 | 	mov	arg02, local02
27e28     34 F0 BF FD | 	call	#__system___float_mul
27e2c     3D 93 02 F6 | 	mov	arg01, result1
27e30     F8 FC BF FD | 	call	#__system____builtin_exp2f
27e34                 | LR__3851
27e34     E7 F0 03 F6 | 	mov	ptra, fp
27e38     F2 00 A0 FD | 	call	#popregs_
27e3c                 | __system____builtin_powf_ret
27e3c     2D 00 64 FD | 	ret
27e40                 | 
27e40                 | __system____builtin_logbase
27e40     02 CA 05 F6 | 	mov	COUNT_, #2
27e44     E8 00 A0 FD | 	call	#pushregs_
27e48     49 A7 02 F6 | 	mov	local01, arg01
27e4c     4A 93 02 F6 | 	mov	arg01, arg02
27e50     EC FD BF FD | 	call	#__system____builtin_log2f
27e54     3D A9 02 F6 | 	mov	local02, result1
27e58     53 93 02 F6 | 	mov	arg01, local01
27e5c     E0 FD BF FD | 	call	#__system____builtin_log2f
27e60     3D 95 02 F6 | 	mov	arg02, result1
27e64     54 93 02 F6 | 	mov	arg01, local02
27e68     F8 F1 BF FD | 	call	#__system___float_div
27e6c     E7 F0 03 F6 | 	mov	ptra, fp
27e70     F2 00 A0 FD | 	call	#popregs_
27e74                 | __system____builtin_logbase_ret
27e74     2D 00 64 FD | 	ret
27e78                 | 
27e78                 | __system___float_pow_n
27e78     05 CA 05 F6 | 	mov	COUNT_, #5
27e7c     E8 00 A0 FD | 	call	#pushregs_
27e80     49 A7 02 F6 | 	mov	local01, arg01
27e84     4A A9 02 F6 | 	mov	local02, arg02
27e88     4B AB 02 F6 | 	mov	local03, arg03
27e8c     00 AA 56 F2 | 	cmps	local03, #0 wc
27e90     18 00 90 3D |  if_ae	jmp	#LR__3860
27e94     01 AC 06 F6 | 	mov	local04, #1
27e98     55 AB 62 F6 | 	neg	local03, local03
27e9c     00 AA 56 F2 | 	cmps	local03, #0 wc
27ea0     00 7A 06 C6 |  if_b	mov	result1, #0
27ea4     94 00 90 CD |  if_b	jmp	#LR__3868
27ea8     04 00 90 FD | 	jmp	#LR__3861
27eac                 | LR__3860
27eac     00 AC 06 F6 | 	mov	local04, #0
27eb0                 | LR__3861
27eb0     00 C0 1F FF 
27eb4     00 AE 06 F6 | 	mov	local05, ##1065353216
27eb8                 | LR__3862
27eb8     01 AA 56 F2 | 	cmps	local03, #1 wc
27ebc     30 00 90 CD |  if_b	jmp	#LR__3864
27ec0     01 AA CE F7 | 	test	local03, #1 wz
27ec4     10 00 90 AD |  if_e	jmp	#LR__3863
27ec8     57 93 02 F6 | 	mov	arg01, local05
27ecc     54 95 02 F6 | 	mov	arg02, local02
27ed0     8C EF BF FD | 	call	#__system___float_mul
27ed4     3D AF 02 F6 | 	mov	local05, result1
27ed8                 | LR__3863
27ed8     01 AA C6 F0 | 	sar	local03, #1
27edc     54 93 02 F6 | 	mov	arg01, local02
27ee0     54 95 02 F6 | 	mov	arg02, local02
27ee4     78 EF BF FD | 	call	#__system___float_mul
27ee8     3D A9 02 F6 | 	mov	local02, result1
27eec     C8 FF 9F FD | 	jmp	#LR__3862
27ef0                 | LR__3864
27ef0     00 AC 0E F2 | 	cmp	local04, #0 wz
27ef4     14 00 90 AD |  if_e	jmp	#LR__3865
27ef8     53 93 02 F6 | 	mov	arg01, local01
27efc     57 95 02 F6 | 	mov	arg02, local05
27f00     60 F1 BF FD | 	call	#__system___float_div
27f04     3D AF 02 F6 | 	mov	local05, result1
27f08     2C 00 90 FD | 	jmp	#LR__3867
27f0c                 | LR__3865
27f0c     53 93 02 F6 | 	mov	arg01, local01
27f10     00 C0 1F FF 
27f14     00 94 06 F6 | 	mov	arg02, ##1065353216
27f18     01 96 06 F6 | 	mov	arg03, #1
27f1c     74 F3 BF FD | 	call	#__system___float_cmp
27f20     00 7A 0E F2 | 	cmp	result1, #0 wz
27f24     10 00 90 AD |  if_e	jmp	#LR__3866
27f28     53 93 02 F6 | 	mov	arg01, local01
27f2c     57 95 02 F6 | 	mov	arg02, local05
27f30     2C EF BF FD | 	call	#__system___float_mul
27f34     3D AF 02 F6 | 	mov	local05, result1
27f38                 | LR__3866
27f38                 | LR__3867
27f38     57 7B 02 F6 | 	mov	result1, local05
27f3c                 | LR__3868
27f3c     E7 F0 03 F6 | 	mov	ptra, fp
27f40     F2 00 A0 FD | 	call	#popregs_
27f44                 | __system___float_pow_n_ret
27f44     2D 00 64 FD | 	ret
27f48                 | 
27f48                 | __system___gc_ptrs
27f48     2C 81 02 F6 | 	mov	_var01, __heap_ptr
27f4c     40 83 02 F6 | 	mov	_var02, _var01
27f50     BB 00 00 FF 
27f54     F8 82 06 F1 | 	add	_var02, ##95992
27f58     40 7D 0A FB | 	rdlong	result2, _var01 wz
27f5c     74 00 90 5D |  if_ne	jmp	#LR__3870
27f60     41 7D 02 F6 | 	mov	result2, _var02
27f64     40 7D 82 F1 | 	sub	result2, _var01
27f68     40 03 58 FC | 	wrword	#1, _var01
27f6c     40 7B 02 F6 | 	mov	result1, _var01
27f70     02 7A 06 F1 | 	add	result1, #2
27f74     36 00 80 FF 
27f78     3D 21 59 FC | 	wrword	##27792, result1
27f7c     40 7B 02 F6 | 	mov	result1, _var01
27f80     04 7A 06 F1 | 	add	result1, #4
27f84     3D 01 58 FC | 	wrword	#0, result1
27f88     40 7B 02 F6 | 	mov	result1, _var01
27f8c     06 7A 06 F1 | 	add	result1, #6
27f90     3D 03 58 FC | 	wrword	#1, result1
27f94     10 80 06 F1 | 	add	_var01, #16
27f98     3E 7D 52 F6 | 	abs	result2, result2 wc
27f9c     04 7C 46 F0 | 	shr	result2, #4
27fa0     3E 7D 82 F6 | 	negc	result2, result2
27fa4     40 7D 52 FC | 	wrword	result2, _var01
27fa8     40 7D 02 F6 | 	mov	result2, _var01
27fac     02 7C 06 F1 | 	add	result2, #2
27fb0     36 00 80 FF 
27fb4     3E 1F 59 FC | 	wrword	##27791, result2
27fb8     40 7D 02 F6 | 	mov	result2, _var01
27fbc     04 7C 06 F1 | 	add	result2, #4
27fc0     3E 01 58 FC | 	wrword	#0, result2
27fc4     40 7D 02 F6 | 	mov	result2, _var01
27fc8     06 7C 06 F1 | 	add	result2, #6
27fcc     3E 01 58 FC | 	wrword	#0, result2
27fd0     10 80 86 F1 | 	sub	_var01, #16
27fd4                 | LR__3870
27fd4     40 7B 02 F6 | 	mov	result1, _var01
27fd8     41 7D 02 F6 | 	mov	result2, _var02
27fdc                 | __system___gc_ptrs_ret
27fdc     2D 00 64 FD | 	ret
27fe0                 | 
27fe0                 | __system___gc_tryalloc
27fe0     0B CA 05 F6 | 	mov	COUNT_, #11
27fe4     E8 00 A0 FD | 	call	#pushregs_
27fe8     49 A7 02 F6 | 	mov	local01, arg01
27fec     4A A9 02 F6 | 	mov	local02, arg02
27ff0     54 FF BF FD | 	call	#__system___gc_ptrs
27ff4     3D AB 02 F6 | 	mov	local03, result1
27ff8     3E AD 02 F6 | 	mov	local04, result2
27ffc     55 AF 02 F6 | 	mov	local05, local03
28000     00 B0 06 F6 | 	mov	local06, #0
28004     D7 1E 48 FB | 	callpa	#(@LR__3881-@LR__3880)>>2,fcache_load_ptr_
28008                 | LR__3880
28008     57 B3 02 F6 | 	mov	local07, local05
2800c     06 AE 06 F1 | 	add	local05, #6
28010     57 95 EA FA | 	rdword	arg02, local05 wz
28014     55 93 02 F6 | 	mov	arg01, local03
28018     00 7A 06 A6 |  if_e	mov	result1, #0
2801c     04 94 66 50 |  if_ne	shl	arg02, #4
28020     4A 93 02 51 |  if_ne	add	arg01, arg02
28024     49 7B 02 56 |  if_ne	mov	result1, arg01
28028     3D AF 0A F6 | 	mov	local05, result1 wz
2802c     57 B1 E2 5A |  if_ne	rdword	local06, local05
28030     00 AE 0E F2 | 	cmp	local05, #0 wz
28034     56 AF 52 52 |  if_ne	cmps	local05, local04 wc
28038     08 00 90 1D |  if_a	jmp	#LR__3882
2803c     58 A7 5A 52 |  if_ne	cmps	local01, local06 wcz
28040     C4 FF 9F 1D |  if_a	jmp	#LR__3880
28044                 | LR__3881
28044                 | LR__3882
28044     00 AE 0E F2 | 	cmp	local05, #0 wz
28048     57 7B 02 A6 |  if_e	mov	result1, local05
2804c     3C 01 90 AD |  if_e	jmp	#LR__3885
28050     57 7D 02 F6 | 	mov	result2, local05
28054     06 7C 06 F1 | 	add	result2, #6
28058     3E B5 E2 FA | 	rdword	local08, result2
2805c     58 A7 52 F2 | 	cmps	local01, local06 wc
28060     C0 00 90 3D |  if_ae	jmp	#LR__3884
28064     57 A7 52 FC | 	wrword	local01, local05
28068     57 93 02 F6 | 	mov	arg01, local05
2806c     53 B5 02 F6 | 	mov	local08, local01
28070     04 B4 66 F0 | 	shl	local08, #4
28074     5A 93 02 F1 | 	add	arg01, local08
28078     53 B1 82 F1 | 	sub	local06, local01
2807c     49 B1 52 FC | 	wrword	local06, arg01
28080     49 B5 02 F6 | 	mov	local08, arg01
28084     02 B4 06 F1 | 	add	local08, #2
28088     36 00 80 FF 
2808c     5A 1F 59 FC | 	wrword	##27791, local08
28090     57 95 0A F6 | 	mov	arg02, local05 wz
28094     00 7A 06 A6 |  if_e	mov	result1, #0
28098     55 95 82 51 |  if_ne	sub	arg02, local03
2809c     04 94 46 50 |  if_ne	shr	arg02, #4
280a0     4A 7B 02 56 |  if_ne	mov	result1, arg02
280a4     49 B5 02 F6 | 	mov	local08, arg01
280a8     04 B4 06 F1 | 	add	local08, #4
280ac     5A 7B 52 FC | 	wrword	result1, local08
280b0     57 B5 02 F6 | 	mov	local08, local05
280b4     06 B4 06 F1 | 	add	local08, #6
280b8     49 95 02 F6 | 	mov	arg02, arg01
280bc     5A B5 E2 FA | 	rdword	local08, local08
280c0     06 94 06 F1 | 	add	arg02, #6
280c4     4A B5 52 FC | 	wrword	local08, arg02
280c8     49 B7 02 F6 | 	mov	local09, arg01
280cc     5B 95 0A F6 | 	mov	arg02, local09 wz
280d0     00 7A 06 A6 |  if_e	mov	result1, #0
280d4     55 95 82 51 |  if_ne	sub	arg02, local03
280d8     04 94 46 50 |  if_ne	shr	arg02, #4
280dc     4A 7B 02 56 |  if_ne	mov	result1, arg02
280e0     3D B5 02 F6 | 	mov	local08, result1
280e4     49 B9 EA FA | 	rdword	local10, arg01 wz
280e8     00 7A 06 A6 |  if_e	mov	result1, #0
280ec     04 B8 66 50 |  if_ne	shl	local10, #4
280f0     5C 93 02 51 |  if_ne	add	arg01, local10
280f4     49 7B 02 56 |  if_ne	mov	result1, arg01
280f8     3D BB 0A F6 | 	mov	local11, result1 wz
280fc     24 00 90 AD |  if_e	jmp	#LR__3883
28100     56 BB 52 F2 | 	cmps	local11, local04 wc
28104     1C 00 90 3D |  if_ae	jmp	#LR__3883
28108     5B 95 0A F6 | 	mov	arg02, local09 wz
2810c     00 7A 06 A6 |  if_e	mov	result1, #0
28110     55 95 82 51 |  if_ne	sub	arg02, local03
28114     04 94 46 50 |  if_ne	shr	arg02, #4
28118     4A 7B 02 56 |  if_ne	mov	result1, arg02
2811c     04 BA 06 F1 | 	add	local11, #4
28120     5D 7B 52 FC | 	wrword	result1, local11
28124                 | LR__3883
28124                 | LR__3884
28124     06 B2 06 F1 | 	add	local07, #6
28128     59 B5 52 FC | 	wrword	local08, local07
2812c     36 00 00 FF 
28130     80 B6 06 F6 | 	mov	local09, ##27776
28134     54 B7 42 F5 | 	or	local09, local02
28138     00 7A 06 F6 | 	mov	result1, #0
2813c     01 7A 62 FD | 	cogid	result1
28140     3D B7 42 F5 | 	or	local09, result1
28144     57 BB 02 F6 | 	mov	local11, local05
28148     02 BA 06 F1 | 	add	local11, #2
2814c     5D B7 52 FC | 	wrword	local09, local11
28150     55 B7 02 F6 | 	mov	local09, local03
28154     08 B6 06 F1 | 	add	local09, #8
28158     57 BB 02 F6 | 	mov	local11, local05
2815c     5B B7 E2 FA | 	rdword	local09, local09
28160     06 BA 06 F1 | 	add	local11, #6
28164     5D B7 52 FC | 	wrword	local09, local11
28168     57 95 0A F6 | 	mov	arg02, local05 wz
2816c     00 7A 06 A6 |  if_e	mov	result1, #0
28170     55 95 82 51 |  if_ne	sub	arg02, local03
28174     04 94 46 50 |  if_ne	shr	arg02, #4
28178     4A 7B 02 56 |  if_ne	mov	result1, arg02
2817c     08 AA 06 F1 | 	add	local03, #8
28180     55 7B 52 FC | 	wrword	result1, local03
28184     08 AE 06 F1 | 	add	local05, #8
28188     57 7B 02 F6 | 	mov	result1, local05
2818c                 | LR__3885
2818c     E7 F0 03 F6 | 	mov	ptra, fp
28190     F2 00 A0 FD | 	call	#popregs_
28194                 | __system___gc_tryalloc_ret
28194     2D 00 64 FD | 	ret
28198                 | 
28198                 | __system___gc_alloc_managed
28198     01 CA 05 F6 | 	mov	COUNT_, #1
2819c     E8 00 A0 FD | 	call	#pushregs_
281a0     49 A7 02 F6 | 	mov	local01, arg01
281a4     00 94 06 F6 | 	mov	arg02, #0
281a8     1C 00 B0 FD | 	call	#__system___gc_doalloc
281ac     3D 95 0A F6 | 	mov	arg02, result1 wz
281b0     01 A6 56 A2 |  if_e	cmps	local01, #1 wc
281b4     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
281b8     4A 7B 02 D6 |  if_c_or_nz	mov	result1, arg02
281bc     E7 F0 03 F6 | 	mov	ptra, fp
281c0     F2 00 A0 FD | 	call	#popregs_
281c4                 | __system___gc_alloc_managed_ret
281c4     2D 00 64 FD | 	ret
281c8                 | 
281c8                 | __system___gc_doalloc
281c8     06 CA 05 F6 | 	mov	COUNT_, #6
281cc     E8 00 A0 FD | 	call	#pushregs_
281d0     49 A7 0A F6 | 	mov	local01, arg01 wz
281d4     4A A9 02 F6 | 	mov	local02, arg02
281d8     00 7A 06 A6 |  if_e	mov	result1, #0
281dc     84 00 90 AD |  if_e	jmp	#LR__3897
281e0     17 A6 06 F1 | 	add	local01, #23
281e4     0F A6 26 F5 | 	andn	local01, #15
281e8     04 A6 46 F0 | 	shr	local01, #4
281ec     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
281f0     1C 92 06 F1 | 	add	arg01, #28
281f4     98 C5 BF FD | 	call	#__system___lockmem
281f8     53 93 02 F6 | 	mov	arg01, local01
281fc     54 95 02 F6 | 	mov	arg02, local02
28200     DC FD BF FD | 	call	#__system___gc_tryalloc
28204     3D AB 0A F6 | 	mov	local03, result1 wz
28208     14 00 90 5D |  if_ne	jmp	#LR__3890
2820c     64 03 B0 FD | 	call	#__system___gc_docollect
28210     53 93 02 F6 | 	mov	arg01, local01
28214     54 95 02 F6 | 	mov	arg02, local02
28218     C4 FD BF FD | 	call	#__system___gc_tryalloc
2821c     3D AB 02 F6 | 	mov	local03, result1
28220                 | LR__3890
28220     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
28224     1C 92 06 F1 | 	add	arg01, #28
28228     49 01 68 FC | 	wrlong	#0, arg01
2822c     00 AA 0E F2 | 	cmp	local03, #0 wz
28230     2C 00 90 AD |  if_e	jmp	#LR__3896
28234     04 A6 66 F0 | 	shl	local01, #4
28238     08 A6 86 F1 | 	sub	local01, #8
2823c     53 AD 52 F6 | 	abs	local04, local01 wc
28240     02 AC 46 F0 | 	shr	local04, #2
28244     56 AF 8A F6 | 	negc	local05, local04 wz
28248     55 B1 02 F6 | 	mov	local06, local03
2824c     10 00 90 AD |  if_e	jmp	#LR__3895
28250     D7 06 48 FB | 	callpa	#(@LR__3893-@LR__3891)>>2,fcache_load_ptr_
28254                 | LR__3891
28254     57 05 D8 FC | 	rep	@LR__3894, local05
28258                 | LR__3892
28258     58 01 68 FC | 	wrlong	#0, local06
2825c     04 B0 06 F1 | 	add	local06, #4
28260                 | LR__3893
28260                 | LR__3894
28260                 | LR__3895
28260                 | LR__3896
28260     55 7B 02 F6 | 	mov	result1, local03
28264                 | LR__3897
28264     E7 F0 03 F6 | 	mov	ptra, fp
28268     F2 00 A0 FD | 	call	#popregs_
2826c                 | __system___gc_doalloc_ret
2826c     2D 00 64 FD | 	ret
28270                 | 
28270                 | __system___gc_isvalidptr
28270     F8 96 06 F4 | 	bitl	arg03, #248
28274     08 96 86 F1 | 	sub	arg03, #8
28278     49 97 52 F2 | 	cmps	arg03, arg01 wc
2827c     08 00 90 CD |  if_b	jmp	#LR__3900
28280     4A 97 52 F2 | 	cmps	arg03, arg02 wc
28284     08 00 90 CD |  if_b	jmp	#LR__3901
28288                 | LR__3900
28288     00 7A 06 F6 | 	mov	result1, #0
2828c     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
28290                 | LR__3901
28290     4B 81 02 F6 | 	mov	_var01, arg03
28294     49 81 62 F5 | 	xor	_var01, arg01
28298     0F 80 CE F7 | 	test	_var01, #15 wz
2829c     00 7A 06 56 |  if_ne	mov	result1, #0
282a0     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
282a4     4B 81 02 F6 | 	mov	_var01, arg03
282a8     02 80 06 F1 | 	add	_var01, #2
282ac     40 81 E2 FA | 	rdword	_var01, _var01
282b0     7F 00 00 FF 
282b4     C0 81 06 F5 | 	and	_var01, ##65472
282b8     36 00 00 FF 
282bc     80 80 0E F2 | 	cmp	_var01, ##27776 wz
282c0     00 7A 06 56 |  if_ne	mov	result1, #0
282c4     4B 7B 02 A6 |  if_e	mov	result1, arg03
282c8                 | __system___gc_isvalidptr_ret
282c8     2D 00 64 FD | 	ret
282cc                 | 
282cc                 | __system___gc_free
282cc     49 97 02 F6 | 	mov	arg03, arg01
282d0     74 FC BF FD | 	call	#__system___gc_ptrs
282d4     3D 93 02 F6 | 	mov	arg01, result1
282d8     3E 95 02 F6 | 	mov	arg02, result2
282dc     90 FF BF FD | 	call	#__system___gc_isvalidptr
282e0     3D 95 0A F6 | 	mov	arg02, result1 wz
282e4     20 00 90 AD |  if_e	jmp	#LR__3910
282e8     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
282ec     1C 92 06 F1 | 	add	arg01, #28
282f0     9C C4 BF FD | 	call	#__system___lockmem
282f4     4A 93 02 F6 | 	mov	arg01, arg02
282f8     10 00 B0 FD | 	call	#__system___gc_dofree
282fc     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
28300     1C 92 06 F1 | 	add	arg01, #28
28304     49 01 68 FC | 	wrlong	#0, arg01
28308                 | LR__3910
28308                 | __system___gc_free_ret
28308     2D 00 64 FD | 	ret
2830c                 | 
2830c                 | __system___gc_dofree
2830c     06 CA 05 F6 | 	mov	COUNT_, #6
28310     E8 00 A0 FD | 	call	#pushregs_
28314     49 A7 02 F6 | 	mov	local01, arg01
28318     2C FC BF FD | 	call	#__system___gc_ptrs
2831c     3D A9 02 F6 | 	mov	local02, result1
28320     3E AB 02 F6 | 	mov	local03, result2
28324     53 95 02 F6 | 	mov	arg02, local01
28328     02 94 06 F1 | 	add	arg02, #2
2832c     36 00 80 FF 
28330     4A 1F 59 FC | 	wrword	##27791, arg02
28334     53 AD 02 F6 | 	mov	local04, local01
28338     53 93 02 F6 | 	mov	arg01, local01
2833c     49 AF EA FA | 	rdword	local05, arg01 wz
28340     00 7A 06 A6 |  if_e	mov	result1, #0
28344     04 AE 66 50 |  if_ne	shl	local05, #4
28348     57 93 02 51 |  if_ne	add	arg01, local05
2834c     49 7B 02 56 |  if_ne	mov	result1, arg01
28350     3D B1 02 F6 | 	mov	local06, result1
28354     D7 24 48 FB | 	callpa	#(@LR__3921-@LR__3920)>>2,fcache_load_ptr_
28358                 | LR__3920
28358     04 AC 06 F1 | 	add	local04, #4
2835c     56 95 EA FA | 	rdword	arg02, local04 wz
28360     54 93 02 F6 | 	mov	arg01, local02
28364     00 7A 06 A6 |  if_e	mov	result1, #0
28368     04 94 66 50 |  if_ne	shl	arg02, #4
2836c     4A 93 02 51 |  if_ne	add	arg01, arg02
28370     49 7B 02 56 |  if_ne	mov	result1, arg01
28374     3D AD 0A F6 | 	mov	local04, result1 wz
28378     24 00 90 AD |  if_e	jmp	#LR__3922
2837c     56 93 02 F6 | 	mov	arg01, local04
28380     00 7A 06 F6 | 	mov	result1, #0
28384     02 92 06 F1 | 	add	arg01, #2
28388     49 93 E2 FA | 	rdword	arg01, arg01
2838c     36 00 00 FF 
28390     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
28394     01 7A 66 A6 |  if_e	neg	result1, #1
28398     00 7A 0E F2 | 	cmp	result1, #0 wz
2839c     B8 FF 9F AD |  if_e	jmp	#LR__3920
283a0                 | LR__3921
283a0                 | LR__3922
283a0     00 AC 0E F2 | 	cmp	local04, #0 wz
283a4     54 AD 02 A6 |  if_e	mov	local04, local02
283a8     56 95 02 F6 | 	mov	arg02, local04
283ac     06 94 06 F1 | 	add	arg02, #6
283b0     53 93 02 F6 | 	mov	arg01, local01
283b4     4A 95 E2 FA | 	rdword	arg02, arg02
283b8     06 92 06 F1 | 	add	arg01, #6
283bc     49 95 52 FC | 	wrword	arg02, arg01
283c0     53 95 0A F6 | 	mov	arg02, local01 wz
283c4     00 7A 06 A6 |  if_e	mov	result1, #0
283c8     54 95 82 51 |  if_ne	sub	arg02, local02
283cc     04 94 46 50 |  if_ne	shr	arg02, #4
283d0     4A 7B 02 56 |  if_ne	mov	result1, arg02
283d4     56 95 02 F6 | 	mov	arg02, local04
283d8     06 94 06 F1 | 	add	arg02, #6
283dc     4A 7B 52 FC | 	wrword	result1, arg02
283e0     54 AD 0A F2 | 	cmp	local04, local02 wz
283e4     A4 00 90 AD |  if_e	jmp	#LR__3925
283e8     56 93 02 F6 | 	mov	arg01, local04
283ec     49 AF EA FA | 	rdword	local05, arg01 wz
283f0     00 7A 06 A6 |  if_e	mov	result1, #0
283f4     04 AE 66 50 |  if_ne	shl	local05, #4
283f8     57 93 02 51 |  if_ne	add	arg01, local05
283fc     49 7B 02 56 |  if_ne	mov	result1, arg01
28400     53 7B 0A F2 | 	cmp	result1, local01 wz
28404     84 00 90 5D |  if_ne	jmp	#LR__3924
28408     56 B1 E2 FA | 	rdword	local06, local04
2840c     53 95 E2 FA | 	rdword	arg02, local01
28410     4A B1 02 F1 | 	add	local06, arg02
28414     56 B1 52 FC | 	wrword	local06, local04
28418     53 B1 02 F6 | 	mov	local06, local01
2841c     02 B0 06 F1 | 	add	local06, #2
28420     58 01 58 FC | 	wrword	#0, local06
28424     53 93 02 F6 | 	mov	arg01, local01
28428     49 AF EA FA | 	rdword	local05, arg01 wz
2842c     00 7A 06 A6 |  if_e	mov	result1, #0
28430     04 AE 66 50 |  if_ne	shl	local05, #4
28434     57 93 02 51 |  if_ne	add	arg01, local05
28438     49 7B 02 56 |  if_ne	mov	result1, arg01
2843c     3D B1 02 F6 | 	mov	local06, result1
28440     55 B1 52 F2 | 	cmps	local06, local03 wc
28444     20 00 90 3D |  if_ae	jmp	#LR__3923
28448     56 95 0A F6 | 	mov	arg02, local04 wz
2844c     00 7A 06 A6 |  if_e	mov	result1, #0
28450     54 95 82 51 |  if_ne	sub	arg02, local02
28454     04 94 46 50 |  if_ne	shr	arg02, #4
28458     4A 7B 02 56 |  if_ne	mov	result1, arg02
2845c     58 95 02 F6 | 	mov	arg02, local06
28460     04 94 06 F1 | 	add	arg02, #4
28464     4A 7B 52 FC | 	wrword	result1, arg02
28468                 | LR__3923
28468     53 95 02 F6 | 	mov	arg02, local01
2846c     06 94 06 F1 | 	add	arg02, #6
28470     56 7D 02 F6 | 	mov	result2, local04
28474     4A 95 E2 FA | 	rdword	arg02, arg02
28478     06 7C 06 F1 | 	add	result2, #6
2847c     3E 95 52 FC | 	wrword	arg02, result2
28480     06 A6 06 F1 | 	add	local01, #6
28484     53 01 58 FC | 	wrword	#0, local01
28488     56 A7 02 F6 | 	mov	local01, local04
2848c                 | LR__3924
2848c                 | LR__3925
2848c     53 93 02 F6 | 	mov	arg01, local01
28490     49 AF EA FA | 	rdword	local05, arg01 wz
28494     00 7A 06 A6 |  if_e	mov	result1, #0
28498     04 AE 66 50 |  if_ne	shl	local05, #4
2849c     57 93 02 51 |  if_ne	add	arg01, local05
284a0     49 7B 02 56 |  if_ne	mov	result1, arg01
284a4     3D 95 0A F6 | 	mov	arg02, result1 wz
284a8     B8 00 90 AD |  if_e	jmp	#LR__3927
284ac     55 95 52 F2 | 	cmps	arg02, local03 wc
284b0     B0 00 90 3D |  if_ae	jmp	#LR__3927
284b4     4A 93 02 F6 | 	mov	arg01, arg02
284b8     00 7A 06 F6 | 	mov	result1, #0
284bc     02 92 06 F1 | 	add	arg01, #2
284c0     49 93 E2 FA | 	rdword	arg01, arg01
284c4     36 00 00 FF 
284c8     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
284cc     01 7A 66 A6 |  if_e	neg	result1, #1
284d0     00 7A 0E F2 | 	cmp	result1, #0 wz
284d4     8C 00 90 AD |  if_e	jmp	#LR__3927
284d8     53 AD 02 F6 | 	mov	local04, local01
284dc     56 B1 E2 FA | 	rdword	local06, local04
284e0     4A 93 02 F6 | 	mov	arg01, arg02
284e4     49 A7 E2 FA | 	rdword	local01, arg01
284e8     53 B1 02 F1 | 	add	local06, local01
284ec     56 B1 52 FC | 	wrword	local06, local04
284f0     49 B1 02 F6 | 	mov	local06, arg01
284f4     06 B0 06 F1 | 	add	local06, #6
284f8     56 A7 02 F6 | 	mov	local01, local04
284fc     58 B1 E2 FA | 	rdword	local06, local06
28500     06 A6 06 F1 | 	add	local01, #6
28504     53 B1 52 FC | 	wrword	local06, local01
28508     49 B1 02 F6 | 	mov	local06, arg01
2850c     02 B0 06 F1 | 	add	local06, #2
28510     58 55 59 FC | 	wrword	#170, local06
28514     49 B1 02 F6 | 	mov	local06, arg01
28518     06 B0 06 F1 | 	add	local06, #6
2851c     58 01 58 FC | 	wrword	#0, local06
28520     49 AF EA FA | 	rdword	local05, arg01 wz
28524     00 7A 06 A6 |  if_e	mov	result1, #0
28528     04 AE 66 50 |  if_ne	shl	local05, #4
2852c     57 93 02 51 |  if_ne	add	arg01, local05
28530     49 7B 02 56 |  if_ne	mov	result1, arg01
28534     3D B1 0A F6 | 	mov	local06, result1 wz
28538     28 00 90 AD |  if_e	jmp	#LR__3926
2853c     55 B1 52 F2 | 	cmps	local06, local03 wc
28540     20 00 90 3D |  if_ae	jmp	#LR__3926
28544     56 95 0A F6 | 	mov	arg02, local04 wz
28548     00 7A 06 A6 |  if_e	mov	result1, #0
2854c     54 95 82 51 |  if_ne	sub	arg02, local02
28550     04 94 46 50 |  if_ne	shr	arg02, #4
28554     4A 7B 02 56 |  if_ne	mov	result1, arg02
28558     58 AD 02 F6 | 	mov	local04, local06
2855c     04 AC 06 F1 | 	add	local04, #4
28560     56 7B 52 FC | 	wrword	result1, local04
28564                 | LR__3926
28564                 | LR__3927
28564     58 7B 02 F6 | 	mov	result1, local06
28568     E7 F0 03 F6 | 	mov	ptra, fp
2856c     F2 00 A0 FD | 	call	#popregs_
28570                 | __system___gc_dofree_ret
28570     2D 00 64 FD | 	ret
28574                 | 
28574                 | __system___gc_docollect
28574     05 CA 05 F6 | 	mov	COUNT_, #5
28578     E8 00 A0 FD | 	call	#pushregs_
2857c     C8 F9 BF FD | 	call	#__system___gc_ptrs
28580     3E A7 02 F6 | 	mov	local01, result2
28584     3D A9 02 F6 | 	mov	local02, result1
28588     54 93 02 F6 | 	mov	arg01, local02
2858c     49 AB EA FA | 	rdword	local03, arg01 wz
28590     00 7A 06 A6 |  if_e	mov	result1, #0
28594     04 AA 66 50 |  if_ne	shl	local03, #4
28598     55 93 02 51 |  if_ne	add	arg01, local03
2859c     49 7B 02 56 |  if_ne	mov	result1, arg01
285a0     3D AD 0A F6 | 	mov	local04, result1 wz
285a4     00 7A 06 F6 | 	mov	result1, #0
285a8     01 7A 62 FD | 	cogid	result1
285ac     3D AF 02 F6 | 	mov	local05, result1
285b0     48 00 90 AD |  if_e	jmp	#LR__3932
285b4     D7 22 48 FB | 	callpa	#(@LR__3931-@LR__3930)>>2,fcache_load_ptr_
285b8                 | LR__3930
285b8     53 AD 52 F2 | 	cmps	local04, local01 wc
285bc     3C 00 90 3D |  if_ae	jmp	#LR__3932
285c0     56 95 02 F6 | 	mov	arg02, local04
285c4     02 94 06 F1 | 	add	arg02, #2
285c8     4A 95 E2 FA | 	rdword	arg02, arg02
285cc     20 94 26 F5 | 	andn	arg02, #32
285d0     56 93 02 F6 | 	mov	arg01, local04
285d4     02 92 06 F1 | 	add	arg01, #2
285d8     49 95 52 FC | 	wrword	arg02, arg01
285dc     56 93 02 F6 | 	mov	arg01, local04
285e0     49 AB EA FA | 	rdword	local03, arg01 wz
285e4     00 7A 06 A6 |  if_e	mov	result1, #0
285e8     04 AA 66 50 |  if_ne	shl	local03, #4
285ec     55 93 02 51 |  if_ne	add	arg01, local03
285f0     49 7B 02 56 |  if_ne	mov	result1, arg01
285f4     3D AD 0A F6 | 	mov	local04, result1 wz
285f8     BC FF 9F 5D |  if_ne	jmp	#LR__3930
285fc                 | LR__3931
285fc                 | LR__3932
285fc     00 AA 06 F6 | 	mov	local03, #0
28600     00 92 06 F6 | 	mov	arg01, #0
28604     60 C1 BF FD | 	call	#__system____topofstack
28608     3D 95 02 F6 | 	mov	arg02, result1
2860c     55 93 02 F6 | 	mov	arg01, local03
28610     90 00 B0 FD | 	call	#__system___gc_markhub
28614     1C 01 B0 FD | 	call	#__system___gc_markcog
28618     54 93 02 F6 | 	mov	arg01, local02
2861c     49 AB EA FA | 	rdword	local03, arg01 wz
28620     00 7A 06 A6 |  if_e	mov	result1, #0
28624     04 AA 66 50 |  if_ne	shl	local03, #4
28628     55 93 02 51 |  if_ne	add	arg01, local03
2862c     49 7B 02 56 |  if_ne	mov	result1, arg01
28630     3D A9 0A F6 | 	mov	local02, result1 wz
28634     60 00 90 AD |  if_e	jmp	#LR__3936
28638                 | LR__3933
28638     54 AD 02 F6 | 	mov	local04, local02
2863c     56 93 02 F6 | 	mov	arg01, local04
28640     49 AB EA FA | 	rdword	local03, arg01 wz
28644     00 7A 06 A6 |  if_e	mov	result1, #0
28648     04 AA 66 50 |  if_ne	shl	local03, #4
2864c     55 93 02 51 |  if_ne	add	arg01, local03
28650     49 7B 02 56 |  if_ne	mov	result1, arg01
28654     3D A9 02 F6 | 	mov	local02, result1
28658     56 95 02 F6 | 	mov	arg02, local04
2865c     02 94 06 F1 | 	add	arg02, #2
28660     4A 95 E2 FA | 	rdword	arg02, arg02
28664     20 94 CE F7 | 	test	arg02, #32 wz
28668     10 94 CE A7 |  if_e	test	arg02, #16 wz
2866c     1C 00 90 5D |  if_ne	jmp	#LR__3935
28670     4A 95 42 F8 | 	getnib	arg02, arg02, #0
28674     57 95 0A F2 | 	cmp	arg02, local05 wz
28678     0E 94 0E 52 |  if_ne	cmp	arg02, #14 wz
2867c     0C 00 90 5D |  if_ne	jmp	#LR__3934
28680     56 93 02 F6 | 	mov	arg01, local04
28684     84 FC BF FD | 	call	#__system___gc_dofree
28688     3D A9 02 F6 | 	mov	local02, result1
2868c                 | LR__3934
2868c                 | LR__3935
2868c     00 A8 0E F2 | 	cmp	local02, #0 wz
28690     53 A9 52 52 |  if_ne	cmps	local02, local01 wc
28694     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3933
28698                 | LR__3936
28698     E7 F0 03 F6 | 	mov	ptra, fp
2869c     F2 00 A0 FD | 	call	#popregs_
286a0                 | __system___gc_docollect_ret
286a0     2D 00 64 FD | 	ret
286a4                 | 
286a4                 | __system___gc_markhub
286a4     04 CA 05 F6 | 	mov	COUNT_, #4
286a8     E8 00 A0 FD | 	call	#pushregs_
286ac     49 A7 02 F6 | 	mov	local01, arg01
286b0     4A A9 02 F6 | 	mov	local02, arg02
286b4     90 F8 BF FD | 	call	#__system___gc_ptrs
286b8     3D AB 02 F6 | 	mov	local03, result1
286bc     3E AD 02 F6 | 	mov	local04, result2
286c0                 | LR__3940
286c0     54 A7 52 F2 | 	cmps	local01, local02 wc
286c4     60 00 90 3D |  if_ae	jmp	#LR__3941
286c8     53 97 02 FB | 	rdlong	arg03, local01
286cc     04 A6 06 F1 | 	add	local01, #4
286d0     56 95 02 F6 | 	mov	arg02, local04
286d4     55 93 02 F6 | 	mov	arg01, local03
286d8     94 FB BF FD | 	call	#__system___gc_isvalidptr
286dc     3D 97 0A F6 | 	mov	arg03, result1 wz
286e0     DC FF 9F AD |  if_e	jmp	#LR__3940
286e4     4B 93 02 F6 | 	mov	arg01, arg03
286e8     00 7A 06 F6 | 	mov	result1, #0
286ec     02 92 06 F1 | 	add	arg01, #2
286f0     49 93 E2 FA | 	rdword	arg01, arg01
286f4     36 00 00 FF 
286f8     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
286fc     01 7A 66 A6 |  if_e	neg	result1, #1
28700     00 7A 0E F2 | 	cmp	result1, #0 wz
28704     B8 FF 9F 5D |  if_ne	jmp	#LR__3940
28708     4B 7D 02 F6 | 	mov	result2, arg03
2870c     02 7C 06 F1 | 	add	result2, #2
28710     3E 7D E2 FA | 	rdword	result2, result2
28714     0F 7C 26 F5 | 	andn	result2, #15
28718     2E 7C 46 F5 | 	or	result2, #46
2871c     02 96 06 F1 | 	add	arg03, #2
28720     4B 7D 52 FC | 	wrword	result2, arg03
28724     98 FF 9F FD | 	jmp	#LR__3940
28728                 | LR__3941
28728     E7 F0 03 F6 | 	mov	ptra, fp
2872c     F2 00 A0 FD | 	call	#popregs_
28730                 | __system___gc_markhub_ret
28730     2D 00 64 FD | 	ret
28734                 | 
28734                 | __system___gc_markcog
28734     04 CA 05 F6 | 	mov	COUNT_, #4
28738     E8 00 A0 FD | 	call	#pushregs_
2873c     08 F8 BF FD | 	call	#__system___gc_ptrs
28740     3D A7 02 F6 | 	mov	local01, result1
28744     3E A9 02 F6 | 	mov	local02, result2
28748     EF AB 06 F6 | 	mov	local03, #495
2874c                 | LR__3950
2874c                 | 	'.live	local03
2874c     00 AA 96 F9 | 	alts	local03, #0
28750     55 AD 02 F6 | 	mov	local04, local03
28754     53 93 02 F6 | 	mov	arg01, local01
28758     54 95 02 F6 | 	mov	arg02, local02
2875c     56 97 02 F6 | 	mov	arg03, local04
28760     0C FB BF FD | 	call	#__system___gc_isvalidptr
28764     00 7A 0E F2 | 	cmp	result1, #0 wz
28768     18 00 90 AD |  if_e	jmp	#LR__3951
2876c     3D AD 02 F6 | 	mov	local04, result1
28770     02 AC 06 F1 | 	add	local04, #2
28774     56 AD E2 FA | 	rdword	local04, local04
28778     20 AC 46 F5 | 	or	local04, #32
2877c     02 7A 06 F1 | 	add	result1, #2
28780     3D AD 52 FC | 	wrword	local04, result1
28784                 | LR__3951
28784     01 AA 86 F1 | 	sub	local03, #1
28788     00 AA 56 F2 | 	cmps	local03, #0 wc
2878c     BC FF 9F 3D |  if_ae	jmp	#LR__3950
28790     E7 F0 03 F6 | 	mov	ptra, fp
28794     F2 00 A0 FD | 	call	#popregs_
28798                 | __system___gc_markcog_ret
28798     2D 00 64 FD | 	ret
2879c                 | 
2879c                 | __system___get_vfs_file_handle
2879c     01 CA 05 F6 | 	mov	COUNT_, #1
287a0     E8 00 A0 FD | 	call	#pushregs_
287a4     30 CC BF FD | 	call	#__system___find_free_file
287a8     3D A7 02 F6 | 	mov	local01, result1
287ac     00 A6 56 F2 | 	cmps	local01, #0 wc
287b0     34 A6 06 3D |  if_ae	qmul	local01, #52
287b4     00 7A 06 C6 |  if_b	mov	result1, #0
287b8     34 A7 02 36 |  if_ae	mov	local01, ptr___system__dat__
287bc     02 00 00 3F 
287c0     2C A7 06 31 |  if_ae	add	local01, ##1324
287c4     18 7A 62 3D |  if_ae	getqx	result1
287c8     53 7B 02 31 |  if_ae	add	result1, local01
287cc     E7 F0 03 F6 | 	mov	ptra, fp
287d0     F2 00 A0 FD | 	call	#popregs_
287d4                 | __system___get_vfs_file_handle_ret
287d4     2D 00 64 FD | 	ret
287d8                 | 
287d8                 | __system__opendir
287d8     06 CA 05 F6 | 	mov	COUNT_, #6
287dc     E8 00 A0 FD | 	call	#pushregs_
287e0     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
287e4     84 A7 06 F1 | 	add	local01, #388
287e8     49 95 02 F6 | 	mov	arg02, arg01
287ec     53 93 02 F6 | 	mov	arg01, local01
287f0     00 96 06 F6 | 	mov	arg03, #0
287f4     E4 C6 BF FD | 	call	#__system____getvfsforfile
287f8     3D A9 0A F6 | 	mov	local02, result1 wz
287fc     10 00 90 AD |  if_e	jmp	#LR__3960
28800     28 A8 06 F1 | 	add	local02, #40
28804     54 97 0A FB | 	rdlong	arg03, local02 wz
28808     28 A8 86 F1 | 	sub	local02, #40
2880c     14 00 90 5D |  if_ne	jmp	#LR__3961
28810                 | LR__3960
28810     20 68 06 F1 | 	add	ptr___system__dat__, #32
28814     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
28818     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2881c     00 7A 06 F6 | 	mov	result1, #0
28820     90 00 90 FD | 	jmp	#LR__3963
28824                 | LR__3961
28824     5C 92 06 F6 | 	mov	arg01, #92
28828     10 94 06 F6 | 	mov	arg02, #16
2882c     98 F9 BF FD | 	call	#__system___gc_doalloc
28830     3D AB 0A F6 | 	mov	local03, result1 wz
28834     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
28838     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2883c     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
28840     00 7A 06 A6 |  if_e	mov	result1, #0
28844     6C 00 90 AD |  if_e	jmp	#LR__3963
28848     28 A8 06 F1 | 	add	local02, #40
2884c     54 AD 02 FB | 	rdlong	local04, local02
28850     56 AF 02 F6 | 	mov	local05, local04
28854     28 A8 86 F1 | 	sub	local02, #40
28858     13 AE 46 F7 | 	zerox	local05, #19
2885c     14 AC 46 F0 | 	shr	local04, #20
28860     02 AC 66 F0 | 	shl	local04, #2
28864     2D AD 02 F1 | 	add	local04, __methods__
28868     56 AD 02 FB | 	rdlong	local04, local04
2886c     55 93 02 F6 | 	mov	arg01, local03
28870     53 95 02 F6 | 	mov	arg02, local01
28874     32 B1 02 F6 | 	mov	local06, objptr
28878     57 65 02 F6 | 	mov	objptr, local05
2887c     2D AC 62 FD | 	call	local04
28880     58 65 02 F6 | 	mov	objptr, local06
28884     3D 97 0A F6 | 	mov	arg03, result1 wz
28888     20 00 90 AD |  if_e	jmp	#LR__3962
2888c     00 96 4E F2 | 	cmps	arg03, #0 wz
28890     20 68 06 F1 | 	add	ptr___system__dat__, #32
28894     34 97 62 FC | 	wrlong	arg03, ptr___system__dat__
28898     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2889c     55 93 02 F6 | 	mov	arg01, local03
288a0     28 FA BF FD | 	call	#__system___gc_free
288a4     00 7A 06 F6 | 	mov	result1, #0
288a8     08 00 90 FD | 	jmp	#LR__3963
288ac                 | LR__3962
288ac     55 A9 62 FC | 	wrlong	local02, local03
288b0     55 7B 02 F6 | 	mov	result1, local03
288b4                 | LR__3963
288b4     E7 F0 03 F6 | 	mov	ptra, fp
288b8     F2 00 A0 FD | 	call	#popregs_
288bc                 | __system__opendir_ret
288bc     2D 00 64 FD | 	ret
288c0                 | 
288c0                 | __system__closedir
288c0     04 CA 05 F6 | 	mov	COUNT_, #4
288c4     E8 00 A0 FD | 	call	#pushregs_
288c8     49 A7 02 F6 | 	mov	local01, arg01
288cc     53 93 02 FB | 	rdlong	arg01, local01
288d0     2C 92 06 F1 | 	add	arg01, #44
288d4     49 A9 02 FB | 	rdlong	local02, arg01
288d8     54 AB 02 F6 | 	mov	local03, local02
288dc     13 AA 46 F7 | 	zerox	local03, #19
288e0     14 A8 46 F0 | 	shr	local02, #20
288e4     02 A8 66 F0 | 	shl	local02, #2
288e8     2D A9 02 F1 | 	add	local02, __methods__
288ec     54 A9 02 FB | 	rdlong	local02, local02
288f0     53 93 02 F6 | 	mov	arg01, local01
288f4     32 AD 02 F6 | 	mov	local04, objptr
288f8     55 65 02 F6 | 	mov	objptr, local03
288fc     2D A8 62 FD | 	call	local02
28900     56 65 02 F6 | 	mov	objptr, local04
28904     3D AD 02 F6 | 	mov	local04, result1
28908     53 93 02 F6 | 	mov	arg01, local01
2890c     BC F9 BF FD | 	call	#__system___gc_free
28910     00 AC 4E F2 | 	cmps	local04, #0 wz
28914     20 68 06 F1 | 	add	ptr___system__dat__, #32
28918     34 AD 62 FC | 	wrlong	local04, ptr___system__dat__
2891c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28920     01 7A 66 56 |  if_ne	neg	result1, #1
28924     00 7A 06 A6 |  if_e	mov	result1, #0
28928     E7 F0 03 F6 | 	mov	ptra, fp
2892c     F2 00 A0 FD | 	call	#popregs_
28930                 | __system__closedir_ret
28930     2D 00 64 FD | 	ret
28934                 | 
28934                 | __system__readdir
28934     04 CA 05 F6 | 	mov	COUNT_, #4
28938     E8 00 A0 FD | 	call	#pushregs_
2893c     49 95 0A FB | 	rdlong	arg02, arg01 wz
28940     49 A7 02 F6 | 	mov	local01, arg01
28944     08 A6 06 F1 | 	add	local01, #8
28948     00 7A 06 A6 |  if_e	mov	result1, #0
2894c     5C 00 90 AD |  if_e	jmp	#LR__3971
28950     30 94 06 F1 | 	add	arg02, #48
28954     4A A9 02 FB | 	rdlong	local02, arg02
28958     54 AB 02 F6 | 	mov	local03, local02
2895c     13 AA 46 F7 | 	zerox	local03, #19
28960     14 A8 46 F0 | 	shr	local02, #20
28964     02 A8 66 F0 | 	shl	local02, #2
28968     2D A9 02 F1 | 	add	local02, __methods__
2896c     54 A9 02 FB | 	rdlong	local02, local02
28970     53 95 02 F6 | 	mov	arg02, local01
28974     32 AD 02 F6 | 	mov	local04, objptr
28978     55 65 02 F6 | 	mov	objptr, local03
2897c     2D A8 62 FD | 	call	local02
28980     56 65 02 F6 | 	mov	objptr, local04
28984     00 7A 4E F2 | 	cmps	result1, #0 wz
28988     1C 00 90 AD |  if_e	jmp	#LR__3970
2898c     01 7A 56 F2 | 	cmps	result1, #1 wc
28990     00 7A 4E 32 |  if_ae	cmps	result1, #0 wz
28994     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
28998     34 7B 62 3C |  if_ae	wrlong	result1, ptr___system__dat__
2899c     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
289a0     00 7A 06 F6 | 	mov	result1, #0
289a4     04 00 90 FD | 	jmp	#LR__3971
289a8                 | LR__3970
289a8     53 7B 02 F6 | 	mov	result1, local01
289ac                 | LR__3971
289ac     E7 F0 03 F6 | 	mov	ptra, fp
289b0     F2 00 A0 FD | 	call	#popregs_
289b4                 | __system__readdir_ret
289b4     2D 00 64 FD | 	ret
289b8                 | 
289b8                 | __system___openraw
289b8     15 CA 05 F6 | 	mov	COUNT_, #21
289bc     E8 00 A0 FD | 	call	#pushregs_
289c0     49 A7 02 F6 | 	mov	local01, arg01
289c4     4A A9 02 F6 | 	mov	local02, arg02
289c8     4B AB 02 F6 | 	mov	local03, arg03
289cc     4C AD 02 F6 | 	mov	local04, arg04
289d0     0F AE C6 F9 | 	decod	local05, #15
289d4     53 B1 02 F6 | 	mov	local06, local01
289d8     00 B2 06 F6 | 	mov	local07, #0
289dc     34 B5 02 F6 | 	mov	local08, ptr___system__dat__
289e0     84 B5 06 F1 | 	add	local08, #388
289e4     5A 93 02 F6 | 	mov	arg01, local08
289e8     54 95 02 F6 | 	mov	arg02, local02
289ec     00 96 06 F6 | 	mov	arg03, #0
289f0     E8 C4 BF FD | 	call	#__system____getvfsforfile
289f4     3D B7 0A F6 | 	mov	local09, result1 wz
289f8     10 00 90 AD |  if_e	jmp	#LR__3980
289fc     20 B6 06 F1 | 	add	local09, #32
28a00     5B 7B 0A FB | 	rdlong	result1, local09 wz
28a04     20 B6 86 F1 | 	sub	local09, #32
28a08     14 00 90 5D |  if_ne	jmp	#LR__3981
28a0c                 | LR__3980
28a0c     20 68 06 F1 | 	add	ptr___system__dat__, #32
28a10     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
28a14     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28a18     01 7A 66 F6 | 	neg	result1, #1
28a1c     DC 02 90 FD | 	jmp	#LR__3996
28a20                 | LR__3981
28a20     58 93 02 F6 | 	mov	arg01, local06
28a24     00 94 06 F6 | 	mov	arg02, #0
28a28     34 96 06 F6 | 	mov	arg03, #52
28a2c     49 B9 02 F6 | 	mov	local10, arg01
28a30     D8 00 A0 FD | 	call	#\builtin_bytefill_
28a34     20 B6 06 F1 | 	add	local09, #32
28a38     5B BB 02 FB | 	rdlong	local11, local09
28a3c     5D BD 02 F6 | 	mov	local12, local11
28a40     5D BF 02 F6 | 	mov	local13, local11
28a44     20 B6 86 F1 | 	sub	local09, #32
28a48     5F C1 02 F6 | 	mov	local14, local13
28a4c     13 BC 46 F7 | 	zerox	local12, #19
28a50     14 C0 46 F0 | 	shr	local14, #20
28a54     02 C0 66 F0 | 	shl	local14, #2
28a58     2D C1 02 F1 | 	add	local14, __methods__
28a5c     60 C1 02 FB | 	rdlong	local14, local14
28a60     58 C3 02 F6 | 	mov	local15, local06
28a64     5A C5 02 F6 | 	mov	local16, local08
28a68     55 C7 02 F6 | 	mov	local17, local03
28a6c     61 93 02 F6 | 	mov	arg01, local15
28a70     62 95 02 F6 | 	mov	arg02, local16
28a74     63 97 02 F6 | 	mov	arg03, local17
28a78     32 C9 02 F6 | 	mov	local18, objptr
28a7c     5E 65 02 F6 | 	mov	objptr, local12
28a80     2D C0 62 FD | 	call	local14
28a84     64 65 02 F6 | 	mov	objptr, local18
28a88     3D CB 0A F6 | 	mov	local19, result1 wz
28a8c     04 AA CE 57 |  if_ne	test	local03, #4 wz
28a90     58 00 90 AD |  if_e	jmp	#LR__3982
28a94     24 B6 06 F1 | 	add	local09, #36
28a98     5B BB 02 FB | 	rdlong	local11, local09
28a9c     5D BD 02 F6 | 	mov	local12, local11
28aa0     5D BF 02 F6 | 	mov	local13, local11
28aa4     24 B6 86 F1 | 	sub	local09, #36
28aa8     5F C1 02 F6 | 	mov	local14, local13
28aac     13 BC 46 F7 | 	zerox	local12, #19
28ab0     14 C0 46 F0 | 	shr	local14, #20
28ab4     02 C0 66 F0 | 	shl	local14, #2
28ab8     2D C1 02 F1 | 	add	local14, __methods__
28abc     60 C1 02 FB | 	rdlong	local14, local14
28ac0     58 C3 02 F6 | 	mov	local15, local06
28ac4     5A C5 02 F6 | 	mov	local16, local08
28ac8     56 C7 02 F6 | 	mov	local17, local04
28acc     61 93 02 F6 | 	mov	arg01, local15
28ad0     62 95 02 F6 | 	mov	arg02, local16
28ad4     63 97 02 F6 | 	mov	arg03, local17
28ad8     32 C9 02 F6 | 	mov	local18, objptr
28adc     5E 65 02 F6 | 	mov	objptr, local12
28ae0     2D C0 62 FD | 	call	local14
28ae4     64 65 02 F6 | 	mov	objptr, local18
28ae8     3D CB 02 F6 | 	mov	local19, result1
28aec                 | LR__3982
28aec     00 CA 0E F2 | 	cmp	local19, #0 wz
28af0     DC 01 90 5D |  if_ne	jmp	#LR__3994
28af4     55 CD 02 F6 | 	mov	local20, local03
28af8     03 CC 0E F5 | 	and	local20, #3 wz
28afc     02 AE 46 55 |  if_ne	or	local05, #2
28b00     01 CC 0E F2 | 	cmp	local20, #1 wz
28b04     01 AE 46 55 |  if_ne	or	local05, #1
28b08     20 AA CE F7 | 	test	local03, #32 wz
28b0c     80 AF 46 55 |  if_ne	or	local05, #384
28b10     08 B0 06 F1 | 	add	local06, #8
28b14     58 AF 62 FC | 	wrlong	local05, local06
28b18     0C B0 06 F1 | 	add	local06, #12
28b1c     58 CF 0A FB | 	rdlong	local21, local06 wz
28b20     14 B0 86 F1 | 	sub	local06, #20
28b24     18 00 90 5D |  if_ne	jmp	#LR__3983
28b28     04 B6 06 F1 | 	add	local09, #4
28b2c     5B CF 02 FB | 	rdlong	local21, local09
28b30     04 B6 86 F1 | 	sub	local09, #4
28b34     14 B0 06 F1 | 	add	local06, #20
28b38     58 CF 62 FC | 	wrlong	local21, local06
28b3c     14 B0 86 F1 | 	sub	local06, #20
28b40                 | LR__3983
28b40     18 B0 06 F1 | 	add	local06, #24
28b44     58 CF 0A FB | 	rdlong	local21, local06 wz
28b48     18 B0 86 F1 | 	sub	local06, #24
28b4c     18 00 90 5D |  if_ne	jmp	#LR__3984
28b50     08 B6 06 F1 | 	add	local09, #8
28b54     5B CF 02 FB | 	rdlong	local21, local09
28b58     08 B6 86 F1 | 	sub	local09, #8
28b5c     18 B0 06 F1 | 	add	local06, #24
28b60     58 CF 62 FC | 	wrlong	local21, local06
28b64     18 B0 86 F1 | 	sub	local06, #24
28b68                 | LR__3984
28b68     24 B0 06 F1 | 	add	local06, #36
28b6c     58 CF 0A FB | 	rdlong	local21, local06 wz
28b70     24 B0 86 F1 | 	sub	local06, #36
28b74     5B CF 02 AB |  if_e	rdlong	local21, local09
28b78     24 B0 06 A1 |  if_e	add	local06, #36
28b7c     58 CF 62 AC |  if_e	wrlong	local21, local06
28b80     24 B0 86 A1 |  if_e	sub	local06, #36
28b84     28 B0 06 F1 | 	add	local06, #40
28b88     58 CF 0A FB | 	rdlong	local21, local06 wz
28b8c     28 B0 86 F1 | 	sub	local06, #40
28b90     18 00 90 5D |  if_ne	jmp	#LR__3985
28b94     10 B6 06 F1 | 	add	local09, #16
28b98     5B CF 02 FB | 	rdlong	local21, local09
28b9c     10 B6 86 F1 | 	sub	local09, #16
28ba0     28 B0 06 F1 | 	add	local06, #40
28ba4     58 CF 62 FC | 	wrlong	local21, local06
28ba8     28 B0 86 F1 | 	sub	local06, #40
28bac                 | LR__3985
28bac     30 B0 06 F1 | 	add	local06, #48
28bb0     58 CF 0A FB | 	rdlong	local21, local06 wz
28bb4     30 B0 86 F1 | 	sub	local06, #48
28bb8     18 00 90 5D |  if_ne	jmp	#LR__3986
28bbc     0C B6 06 F1 | 	add	local09, #12
28bc0     5B CF 02 FB | 	rdlong	local21, local09
28bc4     0C B6 86 F1 | 	sub	local09, #12
28bc8     30 B0 06 F1 | 	add	local06, #48
28bcc     58 CF 62 FC | 	wrlong	local21, local06
28bd0     30 B0 86 F1 | 	sub	local06, #48
28bd4                 | LR__3986
28bd4     20 B0 06 F1 | 	add	local06, #32
28bd8     58 CF 0A FB | 	rdlong	local21, local06 wz
28bdc     20 B0 86 F1 | 	sub	local06, #32
28be0     18 00 90 5D |  if_ne	jmp	#LR__3987
28be4     50 B6 06 F1 | 	add	local09, #80
28be8     5B CF 02 FB | 	rdlong	local21, local09
28bec     50 B6 86 F1 | 	sub	local09, #80
28bf0     20 B0 06 F1 | 	add	local06, #32
28bf4     58 CF 62 FC | 	wrlong	local21, local06
28bf8     20 B0 86 F1 | 	sub	local06, #32
28bfc                 | LR__3987
28bfc     1C B0 06 F1 | 	add	local06, #28
28c00     58 CF 0A FB | 	rdlong	local21, local06 wz
28c04     1C B0 86 F1 | 	sub	local06, #28
28c08     18 00 90 5D |  if_ne	jmp	#LR__3988
28c0c     54 B6 06 F1 | 	add	local09, #84
28c10     5B CF 02 FB | 	rdlong	local21, local09
28c14     54 B6 86 F1 | 	sub	local09, #84
28c18     1C B0 06 F1 | 	add	local06, #28
28c1c     58 CF 62 FC | 	wrlong	local21, local06
28c20     1C B0 86 F1 | 	sub	local06, #28
28c24                 | LR__3988
28c24     1C B0 06 F1 | 	add	local06, #28
28c28     58 CF 0A FB | 	rdlong	local21, local06 wz
28c2c     1C B0 86 F1 | 	sub	local06, #28
28c30     1C 00 90 5D |  if_ne	jmp	#LR__3989
28c34     01 B2 06 F6 | 	mov	local07, #1
28c38     32 93 02 F6 | 	mov	arg01, objptr
28c3c     00 C0 05 FF 
28c40     00 92 46 F5 | 	or	arg01, ##192937984
28c44     1C B0 06 F1 | 	add	local06, #28
28c48     58 93 62 FC | 	wrlong	arg01, local06
28c4c     1C B0 86 F1 | 	sub	local06, #28
28c50                 | LR__3989
28c50     20 B0 06 F1 | 	add	local06, #32
28c54     58 CF 0A FB | 	rdlong	local21, local06 wz
28c58     20 B0 86 F1 | 	sub	local06, #32
28c5c     1C 00 90 5D |  if_ne	jmp	#LR__3990
28c60     01 B2 06 F6 | 	mov	local07, #1
28c64     32 93 02 F6 | 	mov	arg01, objptr
28c68     00 C8 05 FF 
28c6c     00 92 46 F5 | 	or	arg01, ##193986560
28c70     20 B0 06 F1 | 	add	local06, #32
28c74     58 93 62 FC | 	wrlong	arg01, local06
28c78     20 B0 86 F1 | 	sub	local06, #32
28c7c                 | LR__3990
28c7c     2C B0 06 F1 | 	add	local06, #44
28c80     58 CF 0A FB | 	rdlong	local21, local06 wz
28c84     2C B0 86 F1 | 	sub	local06, #44
28c88     44 00 90 5D |  if_ne	jmp	#LR__3993
28c8c     14 B6 06 F1 | 	add	local09, #20
28c90     5B CF 0A FB | 	rdlong	local21, local09 wz
28c94     14 B6 86 F1 | 	sub	local09, #20
28c98     18 00 90 AD |  if_e	jmp	#LR__3991
28c9c     14 B6 06 F1 | 	add	local09, #20
28ca0     5B CF 02 FB | 	rdlong	local21, local09
28ca4     2C B0 06 F1 | 	add	local06, #44
28ca8     58 CF 62 FC | 	wrlong	local21, local06
28cac     2C B0 86 F1 | 	sub	local06, #44
28cb0     1C 00 90 FD | 	jmp	#LR__3992
28cb4                 | LR__3991
28cb4     01 B2 06 F6 | 	mov	local07, #1
28cb8     32 93 02 F6 | 	mov	arg01, objptr
28cbc     00 D0 05 FF 
28cc0     00 92 46 F5 | 	or	arg01, ##195035136
28cc4     2C B0 06 F1 | 	add	local06, #44
28cc8     58 93 62 FC | 	wrlong	arg01, local06
28ccc     2C B0 86 F1 | 	sub	local06, #44
28cd0                 | LR__3992
28cd0                 | LR__3993
28cd0                 | LR__3994
28cd0     00 B2 0E F2 | 	cmp	local07, #0 wz
28cd4     58 93 02 56 |  if_ne	mov	arg01, local06
28cd8     E4 04 B0 5D |  if_ne	call	#__system____default_buffer_init
28cdc     00 CA 0E F2 | 	cmp	local19, #0 wz
28ce0     00 92 06 A6 |  if_e	mov	arg01, #0
28ce4     10 00 90 5D |  if_ne	jmp	#LR__3995
28ce8     00 92 4E F2 | 	cmps	arg01, #0 wz
28cec     20 68 06 F1 | 	add	ptr___system__dat__, #32
28cf0     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
28cf4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28cf8                 | LR__3995
28cf8     65 7B 02 F6 | 	mov	result1, local19
28cfc                 | LR__3996
28cfc     E7 F0 03 F6 | 	mov	ptra, fp
28d00     F2 00 A0 FD | 	call	#popregs_
28d04                 | __system___openraw_ret
28d04     2D 00 64 FD | 	ret
28d08                 | 
28d08                 | __system___closeraw
28d08     05 CA 05 F6 | 	mov	COUNT_, #5
28d0c     E8 00 A0 FD | 	call	#pushregs_
28d10     49 A7 02 F6 | 	mov	local01, arg01
28d14     00 A8 06 F6 | 	mov	local02, #0
28d18     08 A6 06 F1 | 	add	local01, #8
28d1c     53 7B 0A FB | 	rdlong	result1, local01 wz
28d20     08 A6 86 F1 | 	sub	local01, #8
28d24     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
28d28     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
28d2c     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
28d30     01 7A 66 A6 |  if_e	neg	result1, #1
28d34     A8 00 90 AD |  if_e	jmp	#LR__4002
28d38     2C A6 06 F1 | 	add	local01, #44
28d3c     53 7B 0A FB | 	rdlong	result1, local01 wz
28d40     2C A6 86 F1 | 	sub	local01, #44
28d44     38 00 90 AD |  if_e	jmp	#LR__4000
28d48     2C A6 06 F1 | 	add	local01, #44
28d4c     53 AB 02 FB | 	rdlong	local03, local01
28d50     55 AD 02 F6 | 	mov	local04, local03
28d54     2C A6 86 F1 | 	sub	local01, #44
28d58     13 AC 46 F7 | 	zerox	local04, #19
28d5c     14 AA 46 F0 | 	shr	local03, #20
28d60     02 AA 66 F0 | 	shl	local03, #2
28d64     2D AB 02 F1 | 	add	local03, __methods__
28d68     55 AB 02 FB | 	rdlong	local03, local03
28d6c     53 93 02 F6 | 	mov	arg01, local01
28d70     32 AF 02 F6 | 	mov	local05, objptr
28d74     56 65 02 F6 | 	mov	objptr, local04
28d78     2D AA 62 FD | 	call	local03
28d7c     57 65 02 F6 | 	mov	objptr, local05
28d80                 | LR__4000
28d80     24 A6 06 F1 | 	add	local01, #36
28d84     53 AF 0A FB | 	rdlong	local05, local01 wz
28d88     24 A6 86 F1 | 	sub	local01, #36
28d8c     3C 00 90 AD |  if_e	jmp	#LR__4001
28d90     24 A6 06 F1 | 	add	local01, #36
28d94     53 AB 02 FB | 	rdlong	local03, local01
28d98     55 AD 02 F6 | 	mov	local04, local03
28d9c     24 A6 86 F1 | 	sub	local01, #36
28da0     13 AC 46 F7 | 	zerox	local04, #19
28da4     14 AA 46 F0 | 	shr	local03, #20
28da8     02 AA 66 F0 | 	shl	local03, #2
28dac     2D AB 02 F1 | 	add	local03, __methods__
28db0     55 AB 02 FB | 	rdlong	local03, local03
28db4     53 93 02 F6 | 	mov	arg01, local01
28db8     32 AF 02 F6 | 	mov	local05, objptr
28dbc     56 65 02 F6 | 	mov	objptr, local04
28dc0     2D AA 62 FD | 	call	local03
28dc4     57 65 02 F6 | 	mov	objptr, local05
28dc8     3D A9 02 F6 | 	mov	local02, result1
28dcc                 | LR__4001
28dcc     53 93 02 F6 | 	mov	arg01, local01
28dd0     00 94 06 F6 | 	mov	arg02, #0
28dd4     34 96 06 F6 | 	mov	arg03, #52
28dd8     D8 00 A0 FD | 	call	#\builtin_bytefill_
28ddc     54 7B 02 F6 | 	mov	result1, local02
28de0                 | LR__4002
28de0     E7 F0 03 F6 | 	mov	ptra, fp
28de4     F2 00 A0 FD | 	call	#popregs_
28de8                 | __system___closeraw_ret
28de8     2D 00 64 FD | 	ret
28dec                 | 
28dec                 | __system___vfs_open_fat_handle
28dec     03 CA 05 F6 | 	mov	COUNT_, #3
28df0     E8 00 A0 FD | 	call	#pushregs_
28df4     49 A7 0A F6 | 	mov	local01, arg01 wz
28df8     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
28dfc     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
28e00     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
28e04     01 7A 66 A6 |  if_e	neg	result1, #1
28e08     80 00 90 AD |  if_e	jmp	#LR__4011
28e0c     01 00 00 FF 
28e10     14 92 06 F6 | 	mov	arg01, ##532
28e14     80 F3 BF FD | 	call	#__system___gc_alloc_managed
28e18     3D A9 02 F6 | 	mov	local02, result1
28e1c     01 00 00 FF 
28e20     34 92 06 F6 | 	mov	arg01, ##564
28e24     70 F3 BF FD | 	call	#__system___gc_alloc_managed
28e28     32 AB 02 F6 | 	mov	local03, objptr
28e2c     54 65 02 F6 | 	mov	objptr, local02
28e30     01 00 00 FF 
28e34     10 64 06 F1 | 	add	objptr, ##528
28e38     32 A7 62 FC | 	wrlong	local01, objptr
28e3c                 | ' #line 4 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/diskio.cc"
28e3c                 | ' 
28e3c                 | ' 
28e3c                 | ' vfs_file_t *fh;
28e3c                 | ' 
28e3c                 | ' DRESULT disk_sethandle(BYTE pdrv, vfs_file_t *fhandle) {
28e3c                 | '     fh = fhandle;
28e3c                 | '     return RES_OK;
28e3c     91 01 00 FF 
28e40     D2 94 06 F6 | 	mov	arg02, ##@LR__5467
28e44     3D 93 02 F6 | 	mov	arg01, result1
28e48     00 96 06 F6 | 	mov	arg03, #0
28e4c     54 65 02 F6 | 	mov	objptr, local02
28e50     4C 65 B0 FD | 	call	#_fatfs_cc_f_mount
28e54     55 65 02 F6 | 	mov	objptr, local03
28e58     3D 93 0A F6 | 	mov	arg01, result1 wz
28e5c     18 00 90 AD |  if_e	jmp	#LR__4010
28e60     49 93 6A F6 | 	neg	arg01, arg01 wz
28e64     20 68 06 F1 | 	add	ptr___system__dat__, #32
28e68     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
28e6c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28e70     00 7A 06 F6 | 	mov	result1, #0
28e74     14 00 90 FD | 	jmp	#LR__4011
28e78                 | LR__4010
28e78     54 93 02 F6 | 	mov	arg01, local02
28e7c     32 AB 02 F6 | 	mov	local03, objptr
28e80     54 65 02 F6 | 	mov	objptr, local02
28e84     88 8B B0 FD | 	call	#_fatfs_cc_get_vfs
28e88     55 65 02 F6 | 	mov	objptr, local03
28e8c                 | LR__4011
28e8c     E7 F0 03 F6 | 	mov	ptra, fp
28e90     F2 00 A0 FD | 	call	#popregs_
28e94                 | __system___vfs_open_fat_handle_ret
28e94     2D 00 64 FD | 	ret
28e98                 | 
28e98                 | __system___vfs_open_sdcardx
28e98     04 CA 05 F6 | 	mov	COUNT_, #4
28e9c     E8 00 A0 FD | 	call	#pushregs_
28ea0     4C 17 B0 FD | 	call	#__system___sdmm_open
28ea4     3D A7 0A F6 | 	mov	local01, result1 wz
28ea8     00 7A 06 A6 |  if_e	mov	result1, #0
28eac     4C 00 90 AD |  if_e	jmp	#LR__4021
28eb0     53 93 02 F6 | 	mov	arg01, local01
28eb4     34 FF BF FD | 	call	#__system___vfs_open_fat_handle
28eb8     3D A9 0A F6 | 	mov	local02, result1 wz
28ebc     38 00 90 5D |  if_ne	jmp	#LR__4020
28ec0     24 A6 06 F1 | 	add	local01, #36
28ec4     53 AB 02 FB | 	rdlong	local03, local01
28ec8     55 AD 02 F6 | 	mov	local04, local03
28ecc     24 A6 86 F1 | 	sub	local01, #36
28ed0     13 AC 46 F7 | 	zerox	local04, #19
28ed4     14 AA 46 F0 | 	shr	local03, #20
28ed8     02 AA 66 F0 | 	shl	local03, #2
28edc     2D AB 02 F1 | 	add	local03, __methods__
28ee0     55 AB 02 FB | 	rdlong	local03, local03
28ee4     53 93 02 F6 | 	mov	arg01, local01
28ee8     32 A7 02 F6 | 	mov	local01, objptr
28eec     56 65 02 F6 | 	mov	objptr, local04
28ef0     2D AA 62 FD | 	call	local03
28ef4     53 65 02 F6 | 	mov	objptr, local01
28ef8                 | LR__4020
28ef8     54 7B 02 F6 | 	mov	result1, local02
28efc                 | LR__4021
28efc     E7 F0 03 F6 | 	mov	ptra, fp
28f00     F2 00 A0 FD | 	call	#popregs_
28f04                 | __system___vfs_open_sdcardx_ret
28f04     2D 00 64 FD | 	ret
28f08                 | 
28f08                 | __system____default_getc
28f08     03 CA 05 F6 | 	mov	COUNT_, #3
28f0c     E8 00 A0 FD | 	call	#pushregs_
28f10     49 A7 02 F6 | 	mov	local01, arg01
28f14     53 A9 02 FB | 	rdlong	local02, local01
28f18     08 A6 06 F1 | 	add	local01, #8
28f1c     53 AB 02 FB | 	rdlong	local03, local01
28f20     08 A6 86 F1 | 	sub	local01, #8
28f24     08 AA CE F7 | 	test	local03, #8 wz
28f28     53 93 02 56 |  if_ne	mov	arg01, local01
28f2c     08 01 B0 5D |  if_ne	call	#__system____default_flush
28f30     08 A6 06 F1 | 	add	local01, #8
28f34     53 AB 02 FB | 	rdlong	local03, local01
28f38     04 AA 46 F5 | 	or	local03, #4
28f3c     53 AB 62 FC | 	wrlong	local03, local01
28f40     08 A6 86 F1 | 	sub	local01, #8
28f44     54 AB 0A FB | 	rdlong	local03, local02 wz
28f48     0C 00 90 5D |  if_ne	jmp	#LR__4030
28f4c     53 93 02 F6 | 	mov	arg01, local01
28f50     E0 18 B0 FD | 	call	#__system____default_filbuf
28f54     3D AB 02 F6 | 	mov	local03, result1
28f58                 | LR__4030
28f58     01 AA 56 F2 | 	cmps	local03, #1 wc
28f5c     01 7A 66 C6 |  if_b	neg	result1, #1
28f60     1C 00 90 CD |  if_b	jmp	#LR__4031
28f64     01 AA 86 F1 | 	sub	local03, #1
28f68     54 AB 62 FC | 	wrlong	local03, local02
28f6c     04 A8 06 F1 | 	add	local02, #4
28f70     54 AB 02 FB | 	rdlong	local03, local02
28f74     55 7B C2 FA | 	rdbyte	result1, local03
28f78     01 AA 06 F1 | 	add	local03, #1
28f7c     54 AB 62 FC | 	wrlong	local03, local02
28f80                 | LR__4031
28f80     E7 F0 03 F6 | 	mov	ptra, fp
28f84     F2 00 A0 FD | 	call	#popregs_
28f88                 | __system____default_getc_ret
28f88     2D 00 64 FD | 	ret
28f8c                 | 
28f8c                 | __system____default_putc
28f8c     06 CA 05 F6 | 	mov	COUNT_, #6
28f90     E8 00 A0 FD | 	call	#pushregs_
28f94     49 A7 02 F6 | 	mov	local01, arg01
28f98     4A A9 02 F6 | 	mov	local02, arg02
28f9c     54 AB 02 FB | 	rdlong	local03, local02
28fa0     08 A8 06 F1 | 	add	local02, #8
28fa4     54 95 02 FB | 	rdlong	arg02, local02
28fa8     08 A8 86 F1 | 	sub	local02, #8
28fac     04 94 CE F7 | 	test	arg02, #4 wz
28fb0     54 93 02 56 |  if_ne	mov	arg01, local02
28fb4     80 00 B0 5D |  if_ne	call	#__system____default_flush
28fb8     08 A8 06 F1 | 	add	local02, #8
28fbc     54 AD 02 FB | 	rdlong	local04, local02
28fc0     08 AC 46 F5 | 	or	local04, #8
28fc4     54 AD 62 FC | 	wrlong	local04, local02
28fc8     55 AF 02 FB | 	rdlong	local05, local03
28fcc     0C AA 06 F1 | 	add	local03, #12
28fd0     55 95 02 FB | 	rdlong	arg02, local03
28fd4     0C AA 86 F1 | 	sub	local03, #12
28fd8     57 7B 02 F6 | 	mov	result1, local05
28fdc     4A 7B 02 F1 | 	add	result1, arg02
28fe0     3D A7 42 FC | 	wrbyte	local01, result1
28fe4     53 A7 E2 F8 | 	getbyte	local01, local01, #0
28fe8     01 AE 06 F1 | 	add	local05, #1
28fec     55 AF 62 FC | 	wrlong	local05, local03
28ff0     02 A8 86 F1 | 	sub	local02, #2
28ff4     54 B1 EA FA | 	rdword	local06, local02 wz
28ff8     06 A8 86 F1 | 	sub	local02, #6
28ffc     08 AA 06 51 |  if_ne	add	local03, #8
29000     55 AD 02 5B |  if_ne	rdlong	local04, local03
29004     56 AF 0A 52 |  if_ne	cmp	local05, local04 wz
29008     0C 00 90 AD |  if_e	jmp	#LR__4040
2900c     0A A6 0E F2 | 	cmp	local01, #10 wz
29010     01 B0 0E A2 |  if_e	cmp	local06, #1 wz
29014     10 00 90 5D |  if_ne	jmp	#LR__4041
29018                 | LR__4040
29018     54 93 02 F6 | 	mov	arg01, local02
2901c     18 00 B0 FD | 	call	#__system____default_flush
29020     00 7A 0E F2 | 	cmp	result1, #0 wz
29024     01 A6 66 56 |  if_ne	neg	local01, #1
29028                 | LR__4041
29028     53 7B 02 F6 | 	mov	result1, local01
2902c     E7 F0 03 F6 | 	mov	ptra, fp
29030     F2 00 A0 FD | 	call	#popregs_
29034                 | __system____default_putc_ret
29034     2D 00 64 FD | 	ret
29038                 | 
29038                 | __system____default_flush
29038     07 CA 05 F6 | 	mov	COUNT_, #7
2903c     E8 00 A0 FD | 	call	#pushregs_
29040     49 A7 02 F6 | 	mov	local01, arg01
29044     53 A9 02 FB | 	rdlong	local02, local01
29048     54 AB 02 FB | 	rdlong	local03, local02
2904c     08 A6 06 F1 | 	add	local01, #8
29050     53 7D 02 FB | 	rdlong	result2, local01
29054     08 A6 86 F1 | 	sub	local01, #8
29058     08 7C CE F7 | 	test	result2, #8 wz
2905c     D4 00 90 AD |  if_e	jmp	#LR__4052
29060     01 AA 56 F2 | 	cmps	local03, #1 wc
29064     2C 01 90 CD |  if_b	jmp	#LR__4054
29068     08 A6 06 F1 | 	add	local01, #8
2906c     53 7D 02 FB | 	rdlong	result2, local01
29070     08 A6 86 F1 | 	sub	local01, #8
29074     80 7C CE F7 | 	test	result2, #128 wz
29078     6C 00 90 AD |  if_e	jmp	#LR__4051
2907c     08 A6 06 F1 | 	add	local01, #8
29080     53 97 02 FB | 	rdlong	arg03, local01
29084     08 A6 86 F1 | 	sub	local01, #8
29088     00 97 CE F7 | 	test	arg03, #256 wz
2908c     58 00 90 AD |  if_e	jmp	#LR__4050
29090     30 A6 06 F1 | 	add	local01, #48
29094     53 AD 02 FB | 	rdlong	local04, local01
29098     56 AF 02 F6 | 	mov	local05, local04
2909c     30 A6 86 F1 | 	sub	local01, #48
290a0     13 AE 46 F7 | 	zerox	local05, #19
290a4     14 AC 46 F0 | 	shr	local04, #20
290a8     02 AC 66 F0 | 	shl	local04, #2
290ac     2D AD 02 F1 | 	add	local04, __methods__
290b0     56 AD 02 FB | 	rdlong	local04, local04
290b4     53 93 02 F6 | 	mov	arg01, local01
290b8     00 94 06 F6 | 	mov	arg02, #0
290bc     00 96 06 F6 | 	mov	arg03, #0
290c0     02 98 06 F6 | 	mov	arg04, #2
290c4     32 B1 02 F6 | 	mov	local06, objptr
290c8     57 65 02 F6 | 	mov	objptr, local05
290cc     2D AC 62 FD | 	call	local04
290d0     58 65 02 F6 | 	mov	objptr, local06
290d4     08 A6 06 F1 | 	add	local01, #8
290d8     53 B1 02 FB | 	rdlong	local06, local01
290dc     00 B1 26 F5 | 	andn	local06, #256
290e0     53 B1 62 FC | 	wrlong	local06, local01
290e4     08 A6 86 F1 | 	sub	local01, #8
290e8                 | LR__4050
290e8                 | LR__4051
290e8     18 A6 06 F1 | 	add	local01, #24
290ec     53 AD 02 FB | 	rdlong	local04, local01
290f0     56 AF 02 F6 | 	mov	local05, local04
290f4     18 A6 86 F1 | 	sub	local01, #24
290f8     13 AE 46 F7 | 	zerox	local05, #19
290fc     14 AC 46 F0 | 	shr	local04, #20
29100     02 AC 66 F0 | 	shl	local04, #2
29104     2D AD 02 F1 | 	add	local04, __methods__
29108     56 AD 02 FB | 	rdlong	local04, local04
2910c     0C A8 06 F1 | 	add	local02, #12
29110     54 95 02 FB | 	rdlong	arg02, local02
29114     0C A8 86 F1 | 	sub	local02, #12
29118     53 93 02 F6 | 	mov	arg01, local01
2911c     55 97 02 F6 | 	mov	arg03, local03
29120     32 B1 02 F6 | 	mov	local06, objptr
29124     57 65 02 F6 | 	mov	objptr, local05
29128     2D AC 62 FD | 	call	local04
2912c     58 65 02 F6 | 	mov	objptr, local06
29130     60 00 90 FD | 	jmp	#LR__4054
29134                 | LR__4052
29134     08 A6 06 F1 | 	add	local01, #8
29138     53 B1 02 FB | 	rdlong	local06, local01
2913c     08 A6 86 F1 | 	sub	local01, #8
29140     04 B0 CE F7 | 	test	local06, #4 wz
29144     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
29148     48 00 90 AD |  if_e	jmp	#LR__4053
2914c     55 95 62 F6 | 	neg	arg02, local03
29150     4A 97 02 F6 | 	mov	arg03, arg02
29154     1F 96 C6 F0 | 	sar	arg03, #31
29158     30 A6 06 F1 | 	add	local01, #48
2915c     53 AD 02 FB | 	rdlong	local04, local01
29160     56 AF 02 F6 | 	mov	local05, local04
29164     30 A6 86 F1 | 	sub	local01, #48
29168     13 AE 46 F7 | 	zerox	local05, #19
2916c     14 AC 46 F0 | 	shr	local04, #20
29170     02 AC 66 F0 | 	shl	local04, #2
29174     2D AD 02 F1 | 	add	local04, __methods__
29178     56 AD 02 FB | 	rdlong	local04, local04
2917c     53 93 02 F6 | 	mov	arg01, local01
29180     01 98 06 F6 | 	mov	arg04, #1
29184     32 B1 02 F6 | 	mov	local06, objptr
29188     57 65 02 F6 | 	mov	objptr, local05
2918c     2D AC 62 FD | 	call	local04
29190     58 65 02 F6 | 	mov	objptr, local06
29194                 | LR__4053
29194                 | LR__4054
29194     54 01 68 FC | 	wrlong	#0, local02
29198     04 A8 06 F1 | 	add	local02, #4
2919c     54 01 68 FC | 	wrlong	#0, local02
291a0     08 A6 06 F1 | 	add	local01, #8
291a4     53 B3 02 FB | 	rdlong	local07, local01
291a8     0C B2 26 F5 | 	andn	local07, #12
291ac     53 B3 62 FC | 	wrlong	local07, local01
291b0     00 7A 06 F6 | 	mov	result1, #0
291b4     E7 F0 03 F6 | 	mov	ptra, fp
291b8     F2 00 A0 FD | 	call	#popregs_
291bc                 | __system____default_flush_ret
291bc     2D 00 64 FD | 	ret
291c0                 | 
291c0                 | __system____default_buffer_init
291c0     02 CA 05 F6 | 	mov	COUNT_, #2
291c4     E8 00 A0 FD | 	call	#pushregs_
291c8     49 A7 02 F6 | 	mov	local01, arg01
291cc     53 A9 02 FB | 	rdlong	local02, local01
291d0     53 93 02 F6 | 	mov	arg01, local01
291d4     A4 03 B0 FD | 	call	#__system___isatty
291d8     00 7A 0E F2 | 	cmp	result1, #0 wz
291dc     06 A6 06 51 |  if_ne	add	local01, #6
291e0     53 0B 58 5C |  if_ne	wrword	#5, local01
291e4     06 A6 06 A1 |  if_e	add	local01, #6
291e8     53 0D 58 AC |  if_e	wrword	#6, local01
291ec     10 A8 06 F1 | 	add	local02, #16
291f0     54 A7 02 F6 | 	mov	local01, local02
291f4     04 A8 86 F1 | 	sub	local02, #4
291f8     54 A7 62 FC | 	wrlong	local01, local02
291fc     04 A8 86 F1 | 	sub	local02, #4
29200     02 00 80 FF 
29204     54 01 68 FC | 	wrlong	##1024, local02
29208     00 7A 06 F6 | 	mov	result1, #0
2920c     E7 F0 03 F6 | 	mov	ptra, fp
29210     F2 00 A0 FD | 	call	#popregs_
29214                 | __system____default_buffer_init_ret
29214     2D 00 64 FD | 	ret
29218                 | 
29218                 | __system__stat
29218     04 CA 05 F6 | 	mov	COUNT_, #4
2921c     E8 00 A0 FD | 	call	#pushregs_
29220     4A A7 02 F6 | 	mov	local01, arg02
29224     34 A9 02 F6 | 	mov	local02, ptr___system__dat__
29228     84 A9 06 F1 | 	add	local02, #388
2922c     49 95 02 F6 | 	mov	arg02, arg01
29230     54 93 02 F6 | 	mov	arg01, local02
29234     00 96 06 F6 | 	mov	arg03, #0
29238     A0 BC BF FD | 	call	#__system____getvfsforfile
2923c     3D AB 0A F6 | 	mov	local03, result1 wz
29240     10 00 90 AD |  if_e	jmp	#LR__4060
29244     34 AA 06 F1 | 	add	local03, #52
29248     55 97 0A FB | 	rdlong	arg03, local03 wz
2924c     34 AA 86 F1 | 	sub	local03, #52
29250     14 00 90 5D |  if_ne	jmp	#LR__4061
29254                 | LR__4060
29254     20 68 06 F1 | 	add	ptr___system__dat__, #32
29258     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
2925c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
29260     01 7A 66 F6 | 	neg	result1, #1
29264     68 00 90 FD | 	jmp	#LR__4062
29268                 | LR__4061
29268     53 93 02 F6 | 	mov	arg01, local01
2926c     00 94 06 F6 | 	mov	arg02, #0
29270     34 96 06 F6 | 	mov	arg03, #52
29274     49 AD 02 F6 | 	mov	local04, arg01
29278     D8 00 A0 FD | 	call	#\builtin_bytefill_
2927c     56 7B 02 F6 | 	mov	result1, local04
29280     54 93 CA FA | 	rdbyte	arg01, local02 wz
29284     08 A6 06 A1 |  if_e	add	local01, #8
29288     08 00 80 AF 
2928c     53 FF 6B AC |  if_e	wrlong	##4607, local01
29290     00 7A 06 A6 |  if_e	mov	result1, #0
29294     38 00 90 AD |  if_e	jmp	#LR__4062
29298     34 AA 06 F1 | 	add	local03, #52
2929c     55 AB 02 FB | 	rdlong	local03, local03
292a0     55 AD 02 F6 | 	mov	local04, local03
292a4     13 AA 46 F7 | 	zerox	local03, #19
292a8     14 AC 46 F0 | 	shr	local04, #20
292ac     02 AC 66 F0 | 	shl	local04, #2
292b0     2D AD 02 F1 | 	add	local04, __methods__
292b4     56 AD 02 FB | 	rdlong	local04, local04
292b8     54 93 02 F6 | 	mov	arg01, local02
292bc     53 95 02 F6 | 	mov	arg02, local01
292c0     32 A9 02 F6 | 	mov	local02, objptr
292c4     55 65 02 F6 | 	mov	objptr, local03
292c8     2D AC 62 FD | 	call	local04
292cc     54 65 02 F6 | 	mov	objptr, local02
292d0                 | LR__4062
292d0     E7 F0 03 F6 | 	mov	ptra, fp
292d4     F2 00 A0 FD | 	call	#popregs_
292d8                 | __system__stat_ret
292d8     2D 00 64 FD | 	ret
292dc                 | 
292dc                 | __system__write
292dc     01 CA 05 F6 | 	mov	COUNT_, #1
292e0     E8 00 A0 FD | 	call	#pushregs_
292e4     0A 92 16 F2 | 	cmp	arg01, #10 wc
292e8     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
292ec     34 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
292f0     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
292f4     01 7A 66 36 |  if_ae	neg	result1, #1
292f8     1C 00 90 3D |  if_ae	jmp	#LR__4070
292fc     34 92 06 FD | 	qmul	arg01, #52
29300     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
29304     02 00 00 FF 
29308     2C A7 06 F1 | 	add	local01, ##1324
2930c     18 92 62 FD | 	getqx	arg01
29310     53 93 02 F1 | 	add	arg01, local01
29314     3C 0F B0 FD | 	call	#__system___vfswrite
29318                 | LR__4070
29318     E7 F0 03 F6 | 	mov	ptra, fp
2931c     F2 00 A0 FD | 	call	#popregs_
29320                 | __system__write_ret
29320     2D 00 64 FD | 	ret
29324                 | 
29324                 | __system__read
29324     01 CA 05 F6 | 	mov	COUNT_, #1
29328     E8 00 A0 FD | 	call	#pushregs_
2932c     0A 92 16 F2 | 	cmp	arg01, #10 wc
29330     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
29334     34 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
29338     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
2933c     01 7A 66 36 |  if_ae	neg	result1, #1
29340     1C 00 90 3D |  if_ae	jmp	#LR__4080
29344     34 92 06 FD | 	qmul	arg01, #52
29348     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
2934c     02 00 00 FF 
29350     2C A7 06 F1 | 	add	local01, ##1324
29354     18 92 62 FD | 	getqx	arg01
29358     53 93 02 F1 | 	add	arg01, local01
2935c     C0 10 B0 FD | 	call	#__system___vfsread
29360                 | LR__4080
29360     E7 F0 03 F6 | 	mov	ptra, fp
29364     F2 00 A0 FD | 	call	#popregs_
29368                 | __system__read_ret
29368     2D 00 64 FD | 	ret
2936c                 | 
2936c                 | __system__close
2936c     01 CA 05 F6 | 	mov	COUNT_, #1
29370     E8 00 A0 FD | 	call	#pushregs_
29374     0A 92 16 F2 | 	cmp	arg01, #10 wc
29378     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
2937c     34 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
29380     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
29384     01 7A 66 36 |  if_ae	neg	result1, #1
29388     1C 00 90 3D |  if_ae	jmp	#LR__4090
2938c     34 92 06 FD | 	qmul	arg01, #52
29390     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
29394     02 00 00 FF 
29398     2C A7 06 F1 | 	add	local01, ##1324
2939c     18 92 62 FD | 	getqx	arg01
293a0     53 93 02 F1 | 	add	arg01, local01
293a4     60 F9 BF FD | 	call	#__system___closeraw
293a8                 | LR__4090
293a8     E7 F0 03 F6 | 	mov	ptra, fp
293ac     F2 00 A0 FD | 	call	#popregs_
293b0                 | __system__close_ret
293b0     2D 00 64 FD | 	ret
293b4                 | 
293b4                 | __system__lseek
293b4     0B CA 05 F6 | 	mov	COUNT_, #11
293b8     E8 00 A0 FD | 	call	#pushregs_
293bc     49 AF 02 F6 | 	mov	local05, arg01
293c0     4A A7 02 F6 | 	mov	local01, arg02
293c4     4B A9 02 F6 | 	mov	local02, arg03
293c8     4C B1 02 F6 | 	mov	local06, arg04
293cc     0A AE 16 F2 | 	cmp	local05, #10 wc
293d0     18 00 90 CD |  if_b	jmp	#LR__4100
293d4     20 68 06 F1 | 	add	ptr___system__dat__, #32
293d8     34 0B 68 FC | 	wrlong	#5, ptr___system__dat__
293dc     20 68 86 F1 | 	sub	ptr___system__dat__, #32
293e0     01 7C 66 F6 | 	neg	result2, #1
293e4     01 7A 66 F6 | 	neg	result1, #1
293e8     FC 00 90 FD | 	jmp	#LR__4103
293ec                 | LR__4100
293ec     34 AE 06 FD | 	qmul	local05, #52
293f0     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
293f4     02 00 00 FF 
293f8     2C 93 06 F1 | 	add	arg01, ##1324
293fc     18 B2 62 FD | 	getqx	local07
29400     49 B3 02 F1 | 	add	local07, arg01
29404     30 B2 06 F1 | 	add	local07, #48
29408     59 AF 0A FB | 	rdlong	local05, local07 wz
2940c     30 B2 86 F1 | 	sub	local07, #48
29410     18 00 90 5D |  if_ne	jmp	#LR__4101
29414     20 68 06 F1 | 	add	ptr___system__dat__, #32
29418     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
2941c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
29420     01 7C 66 F6 | 	neg	result2, #1
29424     01 7A 66 F6 | 	neg	result1, #1
29428     BC 00 90 FD | 	jmp	#LR__4103
2942c                 | LR__4101
2942c     08 B2 06 F1 | 	add	local07, #8
29430     59 B5 02 FB | 	rdlong	local08, local07
29434     08 B2 86 F1 | 	sub	local07, #8
29438     80 B4 CE F7 | 	test	local08, #128 wz
2943c     08 B2 06 51 |  if_ne	add	local07, #8
29440     59 B5 02 5B |  if_ne	rdlong	local08, local07
29444     00 B5 46 55 |  if_ne	or	local08, #256
29448     59 B5 62 5C |  if_ne	wrlong	local08, local07
2944c     08 B2 86 51 |  if_ne	sub	local07, #8
29450     53 95 02 F6 | 	mov	arg02, local01
29454     54 97 02 F6 | 	mov	arg03, local02
29458     30 B2 06 F1 | 	add	local07, #48
2945c     59 B7 02 FB | 	rdlong	local09, local07
29460     5B B9 02 F6 | 	mov	local10, local09
29464     30 B2 86 F1 | 	sub	local07, #48
29468     13 B8 46 F7 | 	zerox	local10, #19
2946c     14 B6 46 F0 | 	shr	local09, #20
29470     02 B6 66 F0 | 	shl	local09, #2
29474     2D B7 02 F1 | 	add	local09, __methods__
29478     5B B7 02 FB | 	rdlong	local09, local09
2947c     59 93 02 F6 | 	mov	arg01, local07
29480     58 99 02 F6 | 	mov	arg04, local06
29484     32 BB 02 F6 | 	mov	local11, objptr
29488     5C 65 02 F6 | 	mov	objptr, local10
2948c     2D B6 62 FD | 	call	local09
29490     5D 65 02 F6 | 	mov	objptr, local11
29494     3D AB 02 F6 | 	mov	local03, result1
29498     3E AD 02 F6 | 	mov	local04, result2
2949c     55 93 02 F6 | 	mov	arg01, local03
294a0     56 95 02 F6 | 	mov	arg02, local04
294a4     00 7A 06 F6 | 	mov	result1, #0
294a8     00 92 1E F2 | 	cmp	arg01, #0 wcz
294ac     00 94 7E F2 | 	cmpsx	arg02, #0 wcz
294b0     01 7A 86 56 |  if_ne	negc	result1, #1
294b4     00 7A 56 F2 | 	cmps	result1, #0 wc
294b8     24 00 90 3D |  if_ae	jmp	#LR__4102
294bc     55 93 6A F6 | 	neg	arg01, local03 wz
294c0     20 68 06 F1 | 	add	ptr___system__dat__, #32
294c4     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
294c8     20 68 86 F1 | 	sub	ptr___system__dat__, #32
294cc     01 7A 66 56 |  if_ne	neg	result1, #1
294d0     00 7A 06 A6 |  if_e	mov	result1, #0
294d4     3D 7D 02 F6 | 	mov	result2, result1
294d8     1F 7C C6 F0 | 	sar	result2, #31
294dc     08 00 90 FD | 	jmp	#LR__4103
294e0                 | LR__4102
294e0     55 7B 02 F6 | 	mov	result1, local03
294e4     56 7D 02 F6 | 	mov	result2, local04
294e8                 | LR__4103
294e8     E7 F0 03 F6 | 	mov	ptra, fp
294ec     F2 00 A0 FD | 	call	#popregs_
294f0                 | __system__lseek_ret
294f0     2D 00 64 FD | 	ret
294f4                 | 
294f4                 | __system___ioctl
294f4     03 CA 05 F6 | 	mov	COUNT_, #3
294f8     E8 00 A0 FD | 	call	#pushregs_
294fc     00 92 4E F2 | 	cmps	arg01, #0 wz
29500     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
29504     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
29508     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2950c     01 7A 66 A6 |  if_e	neg	result1, #1
29510     5C 00 90 AD |  if_e	jmp	#LR__4111
29514     28 92 06 F1 | 	add	arg01, #40
29518     49 A7 02 FB | 	rdlong	local01, arg01
2951c     53 A9 02 F6 | 	mov	local02, local01
29520     28 92 86 F1 | 	sub	arg01, #40
29524     13 A8 46 F7 | 	zerox	local02, #19
29528     14 A6 46 F0 | 	shr	local01, #20
2952c     02 A6 66 F0 | 	shl	local01, #2
29530     2D A7 02 F1 | 	add	local01, __methods__
29534     53 A7 02 FB | 	rdlong	local01, local01
29538     32 AB 02 F6 | 	mov	local03, objptr
2953c     54 65 02 F6 | 	mov	objptr, local02
29540     2D A6 62 FD | 	call	local01
29544     55 65 02 F6 | 	mov	objptr, local03
29548     3D 93 0A F6 | 	mov	arg01, result1 wz
2954c     1C 00 90 AD |  if_e	jmp	#LR__4110
29550     00 92 4E F2 | 	cmps	arg01, #0 wz
29554     20 68 06 F1 | 	add	ptr___system__dat__, #32
29558     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
2955c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
29560     01 7A 66 56 |  if_ne	neg	result1, #1
29564     00 7A 06 A6 |  if_e	mov	result1, #0
29568     04 00 90 FD | 	jmp	#LR__4111
2956c                 | LR__4110
2956c     00 7A 06 F6 | 	mov	result1, #0
29570                 | LR__4111
29570     E7 F0 03 F6 | 	mov	ptra, fp
29574     F2 00 A0 FD | 	call	#popregs_
29578                 | __system___ioctl_ret
29578     2D 00 64 FD | 	ret
2957c                 | 
2957c                 | __system___isatty
2957c     00 CA 05 F6 | 	mov	COUNT_, #0
29580     E8 00 A0 FD | 	call	#pushregs_
29584     0C F0 07 F1 | 	add	ptra, #12
29588     E7 96 02 F6 | 	mov	arg03, fp
2958c     08 96 06 F1 | 	add	arg03, #8
29590     00 95 06 F6 | 	mov	arg02, #256
29594     5C FF BF FD | 	call	#__system___ioctl
29598     00 7A 0E F2 | 	cmp	result1, #0 wz
2959c     01 7A 06 A6 |  if_e	mov	result1, #1
295a0     00 7A 06 56 |  if_ne	mov	result1, #0
295a4     E7 F0 03 F6 | 	mov	ptra, fp
295a8     F2 00 A0 FD | 	call	#popregs_
295ac                 | __system___isatty_ret
295ac     2D 00 64 FD | 	ret
295b0                 | 
295b0                 | __system____getftab
295b0     0A 92 16 F2 | 	cmp	arg01, #10 wc
295b4     34 92 06 CD |  if_b	qmul	arg01, #52
295b8     00 7A 06 36 |  if_ae	mov	result1, #0
295bc     34 93 02 C6 |  if_b	mov	arg01, ptr___system__dat__
295c0     02 00 00 CF 
295c4     2C 93 06 C1 |  if_b	add	arg01, ##1324
295c8     18 7A 62 CD |  if_b	getqx	result1
295cc     49 7B 02 C1 |  if_b	add	result1, arg01
295d0                 | __system____getftab_ret
295d0     2D 00 64 FD | 	ret
295d4                 | 
295d4                 | __system__strncpy
295d4     49 81 02 F6 | 	mov	_var01, arg01
295d8                 | LR__4120
295d8     01 96 86 F1 | 	sub	arg03, #1
295dc     00 96 56 F2 | 	cmps	arg03, #0 wc
295e0     24 00 90 CD |  if_b	jmp	#LR__4121
295e4     4A 7B 02 F6 | 	mov	result1, arg02
295e8     01 7A 06 F1 | 	add	result1, #1
295ec     4A 83 C2 FA | 	rdbyte	_var02, arg02
295f0     3D 95 02 F6 | 	mov	arg02, result1
295f4     40 83 42 FC | 	wrbyte	_var02, _var01
295f8     41 83 E2 F8 | 	getbyte	_var02, _var02, #0
295fc     07 82 4E F7 | 	zerox	_var02, #7 wz
29600     01 80 06 F1 | 	add	_var01, #1
29604     D0 FF 9F 5D |  if_ne	jmp	#LR__4120
29608                 | LR__4121
29608     D7 0C 48 FB | 	callpa	#(@LR__4123-@LR__4122)>>2,fcache_load_ptr_
2960c                 | LR__4122
2960c     01 96 86 F1 | 	sub	arg03, #1
29610     00 96 56 F2 | 	cmps	arg03, #0 wc
29614     40 85 02 36 |  if_ae	mov	_var03, _var01
29618     01 80 06 31 |  if_ae	add	_var01, #1
2961c     42 01 48 3C |  if_ae	wrbyte	#0, _var03
29620     E8 FF 9F 3D |  if_ae	jmp	#LR__4122
29624                 | LR__4123
29624     49 7B 02 F6 | 	mov	result1, arg01
29628                 | __system__strncpy_ret
29628     2D 00 64 FD | 	ret
2962c                 | 
2962c                 | __system__strncat
2962c     00 94 4E F2 | 	cmps	arg02, #0 wz
29630     54 00 90 AD |  if_e	jmp	#LR__4135
29634     01 96 16 F2 | 	cmp	arg03, #1 wc
29638     4C 00 90 CD |  if_b	jmp	#LR__4135
2963c     49 81 02 F6 | 	mov	_var01, arg01
29640     D7 06 48 FB | 	callpa	#(@LR__4131-@LR__4130)>>2,fcache_load_ptr_
29644                 | LR__4130
29644     40 7B CA FA | 	rdbyte	result1, _var01 wz
29648     01 80 06 51 |  if_ne	add	_var01, #1
2964c     F4 FF 9F 5D |  if_ne	jmp	#LR__4130
29650                 | LR__4131
29650     4B 83 02 F6 | 	mov	_var02, arg03
29654     D7 16 48 FB | 	callpa	#(@LR__4133-@LR__4132)>>2,fcache_load_ptr_
29658                 | LR__4132
29658     4A 85 C2 FA | 	rdbyte	_var03, arg02
2965c     42 87 02 F6 | 	mov	_var04, _var03
29660     07 86 4E F7 | 	zerox	_var04, #7 wz
29664     01 94 06 F1 | 	add	arg02, #1
29668     18 00 90 AD |  if_e	jmp	#LR__4134
2966c     01 82 86 F1 | 	sub	_var02, #1
29670     00 82 56 F2 | 	cmps	_var02, #0 wc
29674     40 87 02 36 |  if_ae	mov	_var04, _var01
29678     01 80 06 31 |  if_ae	add	_var01, #1
2967c     43 85 42 3C |  if_ae	wrbyte	_var03, _var04
29680     D4 FF 9F 3D |  if_ae	jmp	#LR__4132
29684                 | LR__4133
29684                 | LR__4134
29684     40 01 48 FC | 	wrbyte	#0, _var01
29688                 | LR__4135
29688     49 7B 02 F6 | 	mov	result1, arg01
2968c                 | __system__strncat_ret
2968c     2D 00 64 FD | 	ret
29690                 | 
29690                 | __system__strncmp
29690     49 81 0A F6 | 	mov	_var01, arg01 wz
29694     14 00 90 5D |  if_ne	jmp	#LR__4140
29698     00 94 0E F2 | 	cmp	arg02, #0 wz
2969c     01 82 66 56 |  if_ne	neg	_var02, #1
296a0     00 82 06 A6 |  if_e	mov	_var02, #0
296a4     41 7B 02 F6 | 	mov	result1, _var02
296a8     74 00 90 FD | 	jmp	#__system__strncmp_ret
296ac                 | LR__4140
296ac     00 94 0E F2 | 	cmp	arg02, #0 wz
296b0     01 7A 06 A6 |  if_e	mov	result1, #1
296b4     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
296b8     4B 85 02 F6 | 	mov	_var03, arg03
296bc     D7 16 48 FB | 	callpa	#(@LR__4142-@LR__4141)>>2,fcache_load_ptr_
296c0                 | LR__4141
296c0     40 87 C2 FA | 	rdbyte	_var04, _var01
296c4     4A 89 02 F6 | 	mov	_var05, arg02
296c8     44 8B C2 FA | 	rdbyte	_var06, _var05
296cc     01 84 86 F1 | 	sub	_var03, #1
296d0     00 84 56 F2 | 	cmps	_var03, #0 wc
296d4     01 80 06 F1 | 	add	_var01, #1
296d8     01 94 06 F1 | 	add	arg02, #1
296dc     00 86 0E 32 |  if_ae	cmp	_var04, #0 wz
296e0     08 00 90 2D |  if_nc_and_z	jmp	#LR__4143
296e4     45 87 0A 32 |  if_ae	cmp	_var04, _var06 wz
296e8     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4141
296ec                 | LR__4142
296ec                 | LR__4143
296ec     00 84 56 F2 | 	cmps	_var03, #0 wc
296f0     00 7A 06 C6 |  if_b	mov	result1, #0
296f4     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
296f8     45 87 0A F2 | 	cmp	_var04, _var06 wz
296fc     00 7A 06 A6 |  if_e	mov	result1, #0
29700     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
29704     00 86 0E F2 | 	cmp	_var04, #0 wz
29708     01 7A 66 A6 |  if_e	neg	result1, #1
2970c     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
29710     00 8A 0E F2 | 	cmp	_var06, #0 wz
29714     01 7A 06 A6 |  if_e	mov	result1, #1
29718     43 7B 02 56 |  if_ne	mov	result1, _var04
2971c     45 7B 82 51 |  if_ne	sub	result1, _var06
29720                 | __system__strncmp_ret
29720     2D 00 64 FD | 	ret
29724                 | 
29724                 | __system____root_opendir
29724     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
29728     64 7A 06 F1 | 	add	result1, #100
2972c     04 92 06 F1 | 	add	arg01, #4
29730     49 7B 62 FC | 	wrlong	result1, arg01
29734     00 7A 06 F6 | 	mov	result1, #0
29738                 | __system____root_opendir_ret
29738     2D 00 64 FD | 	ret
2973c                 | 
2973c                 | __system____root_readdir
2973c     03 CA 05 F6 | 	mov	COUNT_, #3
29740     E8 00 A0 FD | 	call	#pushregs_
29744     49 A7 02 F6 | 	mov	local01, arg01
29748     4A A9 02 F6 | 	mov	local02, arg02
2974c     04 A6 06 F1 | 	add	local01, #4
29750     53 AB 02 FB | 	rdlong	local03, local01
29754     04 A6 86 F1 | 	sub	local01, #4
29758                 | LR__4150
29758     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
2975c     74 96 06 F1 | 	add	arg03, #116
29760     4B AB 0A F2 | 	cmp	local03, arg03 wz
29764     01 7A 66 A6 |  if_e	neg	result1, #1
29768     48 00 90 AD |  if_e	jmp	#LR__4151
2976c     55 97 0A FB | 	rdlong	arg03, local03 wz
29770     04 AA 06 A1 |  if_e	add	local03, #4
29774     E0 FF 9F AD |  if_e	jmp	#LR__4150
29778     55 95 02 FB | 	rdlong	arg02, local03
2977c     01 94 06 F1 | 	add	arg02, #1
29780     54 93 02 F6 | 	mov	arg01, local02
29784     40 96 06 F6 | 	mov	arg03, #64
29788     48 FE BF FD | 	call	#__system__strncpy
2978c     50 A8 06 F1 | 	add	local02, #80
29790     54 03 48 FC | 	wrbyte	#1, local02
29794     08 A8 86 F1 | 	sub	local02, #8
29798     54 01 68 FC | 	wrlong	#0, local02
2979c     04 A8 06 F1 | 	add	local02, #4
297a0     54 01 68 FC | 	wrlong	#0, local02
297a4     04 AA 06 F1 | 	add	local03, #4
297a8     04 A6 06 F1 | 	add	local01, #4
297ac     53 AB 62 FC | 	wrlong	local03, local01
297b0     00 7A 06 F6 | 	mov	result1, #0
297b4                 | LR__4151
297b4     E7 F0 03 F6 | 	mov	ptra, fp
297b8     F2 00 A0 FD | 	call	#popregs_
297bc                 | __system____root_readdir_ret
297bc     2D 00 64 FD | 	ret
297c0                 | 
297c0                 | __system____root_closedir
297c0     00 7A 06 F6 | 	mov	result1, #0
297c4                 | __system____root_closedir_ret
297c4     2D 00 64 FD | 	ret
297c8                 | 
297c8                 | __system____root_stat
297c8     4A 81 02 F6 | 	mov	_var01, arg02
297cc     40 93 02 F6 | 	mov	arg01, _var01
297d0     00 94 06 F6 | 	mov	arg02, #0
297d4     34 96 06 F6 | 	mov	arg03, #52
297d8     D8 00 A0 FD | 	call	#\builtin_bytefill_
297dc     08 80 06 F1 | 	add	_var01, #8
297e0     08 00 80 FF 
297e4     40 FF 6B FC | 	wrlong	##4607, _var01
297e8     00 7A 06 F6 | 	mov	result1, #0
297ec                 | __system____root_stat_ret
297ec     2D 00 64 FD | 	ret
297f0                 | 
297f0                 | __system___normalizeName
297f0     00 80 06 F6 | 	mov	_var01, #0
297f4     49 83 02 F6 | 	mov	_var02, arg01
297f8     41 85 02 F6 | 	mov	_var03, _var02
297fc                 | LR__4160
297fc     41 87 CA FA | 	rdbyte	_var04, _var02 wz
29800     5C 01 90 AD |  if_e	jmp	#LR__4179
29804     00 80 0E F2 | 	cmp	_var01, #0 wz
29808     42 87 02 56 |  if_ne	mov	_var04, _var03
2980c     01 84 06 51 |  if_ne	add	_var03, #1
29810     43 5F 48 5C |  if_ne	wrbyte	#47, _var04
29814     00 80 06 56 |  if_ne	mov	_var01, #0
29818     41 87 C2 FA | 	rdbyte	_var04, _var02
2981c     2E 86 0E F2 | 	cmp	_var04, #46 wz
29820     D8 00 90 5D |  if_ne	jmp	#LR__4172
29824     01 82 06 F1 | 	add	_var02, #1
29828     41 87 C2 FA | 	rdbyte	_var04, _var02
2982c     01 82 86 F1 | 	sub	_var02, #1
29830     2F 86 0E F2 | 	cmp	_var04, #47 wz
29834     18 00 90 AD |  if_e	jmp	#LR__4161
29838     01 82 06 F1 | 	add	_var02, #1
2983c     41 89 C2 FA | 	rdbyte	_var05, _var02
29840     01 82 86 F1 | 	sub	_var02, #1
29844     44 8B 02 F6 | 	mov	_var06, _var05
29848     07 8A 4E F7 | 	zerox	_var06, #7 wz
2984c     10 00 90 5D |  if_ne	jmp	#LR__4162
29850                 | LR__4161
29850     41 8D 02 F6 | 	mov	_var07, _var02
29854     01 8C 06 F1 | 	add	_var07, #1
29858     46 83 02 F6 | 	mov	_var02, _var07
2985c     E0 00 90 FD | 	jmp	#LR__4176
29860                 | LR__4162
29860     01 82 06 F1 | 	add	_var02, #1
29864     41 8D C2 FA | 	rdbyte	_var07, _var02
29868     01 82 86 F1 | 	sub	_var02, #1
2986c     46 87 E2 F8 | 	getbyte	_var04, _var07, #0
29870     2E 86 0E F2 | 	cmp	_var04, #46 wz
29874     84 00 90 5D |  if_ne	jmp	#LR__4171
29878     02 82 06 F1 | 	add	_var02, #2
2987c     41 8D C2 FA | 	rdbyte	_var07, _var02
29880     02 82 86 F1 | 	sub	_var02, #2
29884     46 87 E2 F8 | 	getbyte	_var04, _var07, #0
29888     2F 86 0E F2 | 	cmp	_var04, #47 wz
2988c     18 00 90 AD |  if_e	jmp	#LR__4163
29890     02 82 06 F1 | 	add	_var02, #2
29894     41 89 C2 FA | 	rdbyte	_var05, _var02
29898     02 82 86 F1 | 	sub	_var02, #2
2989c     44 8B 02 F6 | 	mov	_var06, _var05
298a0     07 8A 4E F7 | 	zerox	_var06, #7 wz
298a4     54 00 90 5D |  if_ne	jmp	#LR__4170
298a8                 | LR__4163
298a8     02 82 06 F1 | 	add	_var02, #2
298ac     49 85 5A F2 | 	cmps	_var03, arg01 wcz
298b0     40 00 90 ED |  if_be	jmp	#LR__4169
298b4     42 8F 02 F6 | 	mov	_var08, _var03
298b8     01 8E 86 F1 | 	sub	_var08, #1
298bc                 | LR__4164
298bc     47 87 C2 FA | 	rdbyte	_var04, _var08
298c0     2F 86 0E F2 | 	cmp	_var04, #47 wz
298c4     0C 00 90 5D |  if_ne	jmp	#LR__4165
298c8     49 8F 5A F2 | 	cmps	_var08, arg01 wcz
298cc     01 8E 86 11 |  if_a	sub	_var08, #1
298d0     E8 FF 9F 1D |  if_a	jmp	#LR__4164
298d4                 | LR__4165
298d4     D7 0C 48 FB | 	callpa	#(@LR__4167-@LR__4166)>>2,fcache_load_ptr_
298d8                 | LR__4166
298d8     49 8F 5A F2 | 	cmps	_var08, arg01 wcz
298dc     10 00 90 ED |  if_be	jmp	#LR__4168
298e0     47 87 C2 FA | 	rdbyte	_var04, _var08
298e4     2F 86 0E F2 | 	cmp	_var04, #47 wz
298e8     01 8E 86 51 |  if_ne	sub	_var08, #1
298ec     E8 FF 9F 5D |  if_ne	jmp	#LR__4166
298f0                 | LR__4167
298f0                 | LR__4168
298f0     47 85 02 F6 | 	mov	_var03, _var08
298f4                 | LR__4169
298f4     01 80 06 F6 | 	mov	_var01, #1
298f8     44 00 90 FD | 	jmp	#LR__4176
298fc                 | LR__4170
298fc                 | LR__4171
298fc                 | LR__4172
298fc     D7 18 48 FB | 	callpa	#(@LR__4174-@LR__4173)>>2,fcache_load_ptr_
29900                 | LR__4173
29900     41 87 CA FA | 	rdbyte	_var04, _var02 wz
29904     43 8D 02 56 |  if_ne	mov	_var07, _var04
29908     2F 8C 0E 52 |  if_ne	cmp	_var07, #47 wz
2990c     20 00 90 AD |  if_e	jmp	#LR__4175
29910     41 8B 02 F6 | 	mov	_var06, _var02
29914     41 89 02 F6 | 	mov	_var05, _var02
29918     01 88 06 F1 | 	add	_var05, #1
2991c     45 91 C2 FA | 	rdbyte	_var09, _var06
29920     44 83 02 F6 | 	mov	_var02, _var05
29924     42 91 42 FC | 	wrbyte	_var09, _var03
29928     01 84 06 F1 | 	add	_var03, #1
2992c     D0 FF 9F FD | 	jmp	#LR__4173
29930                 | LR__4174
29930                 | LR__4175
29930     41 87 C2 FA | 	rdbyte	_var04, _var02
29934     2F 86 0E F2 | 	cmp	_var04, #47 wz
29938     C0 FE 9F 5D |  if_ne	jmp	#LR__4160
2993c     01 80 06 F6 | 	mov	_var01, #1
29940                 | LR__4176
29940     D7 0C 48 FB | 	callpa	#(@LR__4178-@LR__4177)>>2,fcache_load_ptr_
29944                 | LR__4177
29944     41 87 C2 FA | 	rdbyte	_var04, _var02
29948     2F 86 0E F2 | 	cmp	_var04, #47 wz
2994c     41 8D 02 A6 |  if_e	mov	_var07, _var02
29950     01 8C 06 A1 |  if_e	add	_var07, #1
29954     46 83 02 A6 |  if_e	mov	_var02, _var07
29958     E8 FF 9F AD |  if_e	jmp	#LR__4177
2995c                 | LR__4178
2995c     9C FE 9F FD | 	jmp	#LR__4160
29960                 | LR__4179
29960     42 01 48 FC | 	wrbyte	#0, _var03
29964                 | __system___normalizeName_ret
29964     2D 00 64 FD | 	ret
29968                 | 
29968                 | __system___strrev
29968     49 81 CA FA | 	rdbyte	_var01, arg01 wz
2996c     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
29970     49 83 02 F6 | 	mov	_var02, arg01
29974     D7 06 48 FB | 	callpa	#(@LR__4181-@LR__4180)>>2,fcache_load_ptr_
29978                 | LR__4180
29978     41 81 CA FA | 	rdbyte	_var01, _var02 wz
2997c     01 82 06 51 |  if_ne	add	_var02, #1
29980     F4 FF 9F 5D |  if_ne	jmp	#LR__4180
29984                 | LR__4181
29984     01 82 86 F1 | 	sub	_var02, #1
29988     D7 12 48 FB | 	callpa	#(@LR__4183-@LR__4182)>>2,fcache_load_ptr_
2998c                 | LR__4182
2998c     49 83 5A F2 | 	cmps	_var02, arg01 wcz
29990     1C 00 90 ED |  if_be	jmp	#LR__4184
29994     49 81 C2 FA | 	rdbyte	_var01, arg01
29998     41 85 C2 FA | 	rdbyte	_var03, _var02
2999c     49 85 42 FC | 	wrbyte	_var03, arg01
299a0     41 81 42 FC | 	wrbyte	_var01, _var02
299a4     01 92 06 F1 | 	add	arg01, #1
299a8     01 82 86 F1 | 	sub	_var02, #1
299ac     DC FF 9F FD | 	jmp	#LR__4182
299b0                 | LR__4183
299b0                 | LR__4184
299b0                 | __system___strrev_ret
299b0     2D 00 64 FD | 	ret
299b4                 | 
299b4                 | __system___fmtpad
299b4     06 CA 05 F6 | 	mov	COUNT_, #6
299b8     E8 00 A0 FD | 	call	#pushregs_
299bc     49 A7 02 F6 | 	mov	local01, arg01
299c0     4A A9 02 F6 | 	mov	local02, arg02
299c4     4B AB 02 F6 | 	mov	local03, arg03
299c8     54 93 EA F8 | 	getbyte	arg01, local02, #1
299cc     16 A8 46 F0 | 	shr	local02, #22
299d0     03 A8 0E F5 | 	and	local02, #3 wz
299d4     00 AC 06 F6 | 	mov	local04, #0
299d8     01 A8 06 A6 |  if_e	mov	local02, #1
299dc     4C A9 CA F7 | 	test	local02, arg04 wz
299e0     00 7A 06 A6 |  if_e	mov	result1, #0
299e4     88 00 90 AD |  if_e	jmp	#LR__4193
299e8     49 AB C2 F2 | 	subr	local03, arg01
299ec     01 AA 56 F2 | 	cmps	local03, #1 wc
299f0     00 7A 06 C6 |  if_b	mov	result1, #0
299f4     78 00 90 CD |  if_b	jmp	#LR__4193
299f8     03 A8 0E F2 | 	cmp	local02, #3 wz
299fc     18 00 90 5D |  if_ne	jmp	#LR__4190
29a00     01 98 0E F2 | 	cmp	arg04, #1 wz
29a04     6E A8 62 FD | 	wrz	local02
29a08     54 AB 02 F1 | 	add	local03, local02
29a0c     55 AB 52 F6 | 	abs	local03, local03 wc
29a10     01 AA 46 F0 | 	shr	local03, #1
29a14     55 AB 82 F6 | 	negc	local03, local03
29a18                 | LR__4190
29a18     01 AA 56 F2 | 	cmps	local03, #1 wc
29a1c     4C 00 90 CD |  if_b	jmp	#LR__4192
29a20     55 AF 02 F6 | 	mov	local05, local03
29a24                 | LR__4191
29a24     53 A9 02 F6 | 	mov	local02, local01
29a28     53 B1 02 F6 | 	mov	local06, local01
29a2c     13 A8 46 F7 | 	zerox	local02, #19
29a30     14 B0 46 F0 | 	shr	local06, #20
29a34     02 B0 66 F0 | 	shl	local06, #2
29a38     2D B1 02 F1 | 	add	local06, __methods__
29a3c     58 B1 02 FB | 	rdlong	local06, local06
29a40     20 92 06 F6 | 	mov	arg01, #32
29a44     32 AB 02 F6 | 	mov	local03, objptr
29a48     54 65 02 F6 | 	mov	objptr, local02
29a4c     2D B0 62 FD | 	call	local06
29a50     55 65 02 F6 | 	mov	objptr, local03
29a54     3D B1 02 F6 | 	mov	local06, result1
29a58     00 B0 56 F2 | 	cmps	local06, #0 wc
29a5c     58 7B 02 C6 |  if_b	mov	result1, local06
29a60     0C 00 90 CD |  if_b	jmp	#LR__4193
29a64     58 AD 02 F1 | 	add	local04, local06
29a68     EE AF 6E FB | 	djnz	local05, #LR__4191
29a6c                 | LR__4192
29a6c     56 7B 02 F6 | 	mov	result1, local04
29a70                 | LR__4193
29a70     E7 F0 03 F6 | 	mov	ptra, fp
29a74     F2 00 A0 FD | 	call	#popregs_
29a78                 | __system___fmtpad_ret
29a78     2D 00 64 FD | 	ret
29a7c                 | 
29a7c                 | __system___uitoa
29a7c     04 CA 05 F6 | 	mov	COUNT_, #4
29a80     E8 00 A0 FD | 	call	#pushregs_
29a84     49 A7 02 F6 | 	mov	local01, arg01
29a88     00 9A 4E F2 | 	cmps	arg05, #0 wz
29a8c     53 9B 02 F6 | 	mov	arg05, local01
29a90     00 A8 06 F6 | 	mov	local02, #0
29a94     37 AA 06 56 |  if_ne	mov	local03, #55
29a98     57 AA 06 A6 |  if_e	mov	local03, #87
29a9c                 | LR__4200
29a9c     4B 95 12 FD | 	qdiv	arg02, arg03
29aa0     19 AC 62 FD | 	getqy	local04
29aa4     4B 95 12 FD | 	qdiv	arg02, arg03
29aa8     0A AC 16 F2 | 	cmp	local04, #10 wc
29aac     30 AC 06 C1 |  if_b	add	local04, #48
29ab0     55 AD 02 31 |  if_ae	add	local04, local03
29ab4     4D AD 42 FC | 	wrbyte	local04, arg05
29ab8     01 9A 06 F1 | 	add	arg05, #1
29abc     01 A8 06 F1 | 	add	local02, #1
29ac0     18 94 62 FD | 	getqx	arg02
29ac4     00 94 0E F2 | 	cmp	arg02, #0 wz
29ac8     D0 FF 9F 5D |  if_ne	jmp	#LR__4200
29acc     4C A9 12 F2 | 	cmp	local02, arg04 wc
29ad0     C8 FF 9F CD |  if_b	jmp	#LR__4200
29ad4     4D 01 48 FC | 	wrbyte	#0, arg05
29ad8     53 93 02 F6 | 	mov	arg01, local01
29adc     88 FE BF FD | 	call	#__system___strrev
29ae0     54 7B 02 F6 | 	mov	result1, local02
29ae4     E7 F0 03 F6 | 	mov	ptra, fp
29ae8     F2 00 A0 FD | 	call	#popregs_
29aec                 | __system___uitoa_ret
29aec     2D 00 64 FD | 	ret
29af0                 | 
29af0                 | __system__disassemble_0582
29af0     10 CA 05 F6 | 	mov	COUNT_, #16
29af4     E8 00 A0 FD | 	call	#pushregs_
29af8     49 A7 02 F6 | 	mov	local01, arg01
29afc     4A A9 02 F6 | 	mov	local02, arg02
29b00     4B AB 02 F6 | 	mov	local03, arg03
29b04     4C AD 02 F6 | 	mov	local04, arg04
29b08     4D AF 02 F6 | 	mov	local05, arg05
29b0c     57 93 52 F6 | 	abs	arg01, local05 wc
29b10     1F B0 C6 C9 |  if_b	decod	local06, #31
29b14     00 B0 06 36 |  if_ae	mov	local06, #0
29b18     40 CF BF FD | 	call	#__system___float_fromuns
29b1c     58 7B 62 F5 | 	xor	result1, local06
29b20     3D B3 02 F6 | 	mov	local07, result1
29b24     00 B4 06 F6 | 	mov	local08, #0
29b28     53 93 02 F6 | 	mov	arg01, local01
29b2c     00 94 06 F6 | 	mov	arg02, #0
29b30     01 96 06 F6 | 	mov	arg03, #1
29b34     5C D7 BF FD | 	call	#__system___float_cmp
29b38     00 7A 0E F2 | 	cmp	result1, #0 wz
29b3c     00 B6 06 A6 |  if_e	mov	local09, #0
29b40     54 01 68 AC |  if_e	wrlong	#0, local02
29b44     55 B7 62 AC |  if_e	wrlong	local09, local03
29b48     8C 01 90 AD |  if_e	jmp	#LR__4222
29b4c     53 93 02 F6 | 	mov	arg01, local01
29b50     40 DC BF FD | 	call	#__system____builtin_ilogb
29b54     3D B9 02 F6 | 	mov	local10, result1
29b58     0A AE 0E F2 | 	cmp	local05, #10 wz
29b5c     24 00 90 5D |  if_ne	jmp	#LR__4210
29b60     5C B7 02 F6 | 	mov	local09, local10
29b64     01 B6 66 F0 | 	shl	local09, #1
29b68     5C B7 02 F1 | 	add	local09, local10
29b6c     5B B9 52 F6 | 	abs	local10, local09 wc
29b70     0A B8 16 FD | 	qdiv	local10, #10
29b74     09 BA 06 F6 | 	mov	local11, #9
29b78     18 B8 62 FD | 	getqx	local10
29b7c     5C B9 82 F6 | 	negc	local10, local10
29b80     04 00 90 FD | 	jmp	#LR__4211
29b84                 | LR__4210
29b84     18 BA 06 F6 | 	mov	local11, #24
29b88                 | LR__4211
29b88                 | LR__4212
29b88     08 B4 56 F2 | 	cmps	local08, #8 wc
29b8c     01 B4 06 F1 | 	add	local08, #1
29b90     60 00 90 3D |  if_ae	jmp	#LR__4213
29b94     00 C0 1F FF 
29b98     00 92 06 F6 | 	mov	arg01, ##1065353216
29b9c     59 95 02 F6 | 	mov	arg02, local07
29ba0     5C 97 02 F6 | 	mov	arg03, local10
29ba4     D0 E2 BF FD | 	call	#__system___float_pow_n
29ba8     3D 95 02 F6 | 	mov	arg02, result1
29bac     53 93 02 F6 | 	mov	arg01, local01
29bb0     B0 D4 BF FD | 	call	#__system___float_div
29bb4     3D BD 02 F6 | 	mov	local12, result1
29bb8     5E 93 02 F6 | 	mov	arg01, local12
29bbc     00 C0 1F FF 
29bc0     00 94 06 F6 | 	mov	arg02, ##1065353216
29bc4     01 96 06 F6 | 	mov	arg03, #1
29bc8     C8 D6 BF FD | 	call	#__system___float_cmp
29bcc     00 7A 56 F2 | 	cmps	result1, #0 wc
29bd0     01 B8 86 C1 |  if_b	sub	local10, #1
29bd4     B0 FF 9F CD |  if_b	jmp	#LR__4212
29bd8     59 95 02 F6 | 	mov	arg02, local07
29bdc     5E 93 02 F6 | 	mov	arg01, local12
29be0     01 96 66 F6 | 	neg	arg03, #1
29be4     AC D6 BF FD | 	call	#__system___float_cmp
29be8     00 7A 56 F2 | 	cmps	result1, #0 wc
29bec     01 B8 06 31 |  if_ae	add	local10, #1
29bf0     94 FF 9F 3D |  if_ae	jmp	#LR__4212
29bf4                 | LR__4213
29bf4     5E 93 02 F6 | 	mov	arg01, local12
29bf8     98 DB BF FD | 	call	#__system____builtin_ilogb
29bfc     3D BF 02 F6 | 	mov	local13, result1
29c00     5E C1 02 F6 | 	mov	local14, local12
29c04     17 C1 06 F4 | 	bitl	local14, #279
29c08     17 C0 26 F4 | 	bith	local14, #23
29c0c     5F C1 62 F0 | 	shl	local14, local13
29c10     02 AE 0E F2 | 	cmp	local05, #2 wz
29c14     02 AC 66 A0 |  if_e	shl	local04, #2
29c18     00 C2 06 F6 | 	mov	local15, #0
29c1c     00 AC 56 F2 | 	cmps	local04, #0 wc
29c20     10 00 90 3D |  if_ae	jmp	#LR__4214
29c24     5C AD C2 F2 | 	subr	local04, local10
29c28     00 AC 56 F2 | 	cmps	local04, #0 wc
29c2c     A0 00 90 CD |  if_b	jmp	#LR__4221
29c30     04 00 90 FD | 	jmp	#LR__4215
29c34                 | LR__4214
29c34     01 AC 06 F1 | 	add	local04, #1
29c38                 | LR__4215
29c38     5D AD 7A F3 | 	fles	local04, local11 wcz
29c3c     01 C4 06 F6 | 	mov	local16, #1
29c40     D7 22 48 FB | 	callpa	#(@LR__4217-@LR__4216)>>2,fcache_load_ptr_
29c44                 | LR__4216
29c44     00 40 00 FF 
29c48     00 C2 16 F2 | 	cmp	local15, ##8388608 wc
29c4c     38 00 90 3D |  if_ae	jmp	#LR__4218
29c50     01 AC 56 F2 | 	cmps	local04, #1 wc
29c54     01 AC 86 F1 | 	sub	local04, #1
29c58     2C 00 90 CD |  if_b	jmp	#LR__4218
29c5c     57 C3 02 FD | 	qmul	local15, local05
29c60     60 BF 02 F6 | 	mov	local13, local14
29c64     17 BE 46 F0 | 	shr	local13, #23
29c68     17 C1 06 F4 | 	bitl	local14, #279
29c6c     18 C2 62 FD | 	getqx	local15
29c70     57 C5 02 FD | 	qmul	local16, local05
29c74     18 C4 62 FD | 	getqx	local16
29c78     57 C1 02 FD | 	qmul	local14, local05
29c7c     5F C3 02 F1 | 	add	local15, local13
29c80     18 C0 62 FD | 	getqx	local14
29c84     BC FF 9F FD | 	jmp	#LR__4216
29c88                 | LR__4217
29c88                 | LR__4218
29c88     57 B7 02 F6 | 	mov	local09, local05
29c8c     17 B6 66 F0 | 	shl	local09, #23
29c90     5B BF 52 F6 | 	abs	local13, local09 wc
29c94     01 BE 46 F0 | 	shr	local13, #1
29c98     5F BF 82 F6 | 	negc	local13, local13
29c9c     5F C1 1A F2 | 	cmp	local14, local13 wcz
29ca0     20 00 90 1D |  if_a	jmp	#LR__4219
29ca4     17 AE 66 F0 | 	shl	local05, #23
29ca8     57 BF 52 F6 | 	abs	local13, local05 wc
29cac     01 BE 46 F0 | 	shr	local13, #1
29cb0     5F BF 82 F6 | 	negc	local13, local13
29cb4     5F C1 0A F2 | 	cmp	local14, local13 wz
29cb8     14 00 90 5D |  if_ne	jmp	#LR__4220
29cbc     01 C2 CE F7 | 	test	local15, #1 wz
29cc0     0C 00 90 AD |  if_e	jmp	#LR__4220
29cc4                 | LR__4219
29cc4     01 C2 06 F1 | 	add	local15, #1
29cc8     62 C3 0A F2 | 	cmp	local15, local16 wz
29ccc     01 B8 06 A1 |  if_e	add	local10, #1
29cd0                 | LR__4220
29cd0                 | LR__4221
29cd0     54 C3 62 FC | 	wrlong	local15, local02
29cd4     55 B9 62 FC | 	wrlong	local10, local03
29cd8                 | LR__4222
29cd8     E7 F0 03 F6 | 	mov	ptra, fp
29cdc     F2 00 A0 FD | 	call	#popregs_
29ce0                 | __system__disassemble_0582_ret
29ce0     2D 00 64 FD | 	ret
29ce4                 | 
29ce4                 | __system__emitsign_0584
29ce4     00 7A 06 F6 | 	mov	result1, #0
29ce8     00 94 0E F2 | 	cmp	arg02, #0 wz
29cec     49 81 02 56 |  if_ne	mov	_var01, arg01
29cf0     01 92 06 51 |  if_ne	add	arg01, #1
29cf4     40 95 42 5C |  if_ne	wrbyte	arg02, _var01
29cf8     01 7A 06 56 |  if_ne	mov	result1, #1
29cfc     00 96 0E F2 | 	cmp	arg03, #0 wz
29d00     49 61 48 5C |  if_ne	wrbyte	#48, arg01
29d04     01 92 06 51 |  if_ne	add	arg01, #1
29d08     49 97 42 5C |  if_ne	wrbyte	arg03, arg01
29d0c     02 7A 06 51 |  if_ne	add	result1, #2
29d10                 | __system__emitsign_0584_ret
29d10     2D 00 64 FD | 	ret
29d14                 | 
29d14                 | __system___getiolock_0622
29d14     01 CA 05 F6 | 	mov	COUNT_, #1
29d18     E8 00 A0 FD | 	call	#pushregs_
29d1c     90 F8 BF FD | 	call	#__system____getftab
29d20     3D A7 0A F6 | 	mov	local01, result1 wz
29d24     10 00 90 AD |  if_e	jmp	#LR__4230
29d28     08 A6 06 F1 | 	add	local01, #8
29d2c     53 7B 0A FB | 	rdlong	result1, local01 wz
29d30     08 A6 86 F1 | 	sub	local01, #8
29d34     10 00 90 5D |  if_ne	jmp	#LR__4231
29d38                 | LR__4230
29d38     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
29d3c     01 00 00 FF 
29d40     DC 7A 06 F1 | 	add	result1, ##732
29d44     08 00 90 FD | 	jmp	#LR__4232
29d48                 | LR__4231
29d48     0C A6 06 F1 | 	add	local01, #12
29d4c     53 7B 02 F6 | 	mov	result1, local01
29d50                 | LR__4232
29d50     E7 F0 03 F6 | 	mov	ptra, fp
29d54     F2 00 A0 FD | 	call	#popregs_
29d58                 | __system___getiolock_0622_ret
29d58     2D 00 64 FD | 	ret
29d5c                 | 
29d5c                 | __system___gettxfunc
29d5c     01 CA 05 F6 | 	mov	COUNT_, #1
29d60     E8 00 A0 FD | 	call	#pushregs_
29d64     48 F8 BF FD | 	call	#__system____getftab
29d68     3D A7 0A F6 | 	mov	local01, result1 wz
29d6c     10 00 90 AD |  if_e	jmp	#LR__4240
29d70     08 A6 06 F1 | 	add	local01, #8
29d74     53 95 0A FB | 	rdlong	arg02, local01 wz
29d78     08 A6 86 F1 | 	sub	local01, #8
29d7c     08 00 90 5D |  if_ne	jmp	#LR__4241
29d80                 | LR__4240
29d80     00 7A 06 F6 | 	mov	result1, #0
29d84     0C 00 90 FD | 	jmp	#LR__4242
29d88                 | LR__4241
29d88     00 88 05 FF 
29d8c     00 A6 46 F5 | 	or	local01, ##185597952
29d90     53 7B 02 F6 | 	mov	result1, local01
29d94                 | LR__4242
29d94     E7 F0 03 F6 | 	mov	ptra, fp
29d98     F2 00 A0 FD | 	call	#popregs_
29d9c                 | __system___gettxfunc_ret
29d9c     2D 00 64 FD | 	ret
29da0                 | 
29da0                 | __system___getrxfunc
29da0     01 CA 05 F6 | 	mov	COUNT_, #1
29da4     E8 00 A0 FD | 	call	#pushregs_
29da8     04 F8 BF FD | 	call	#__system____getftab
29dac     3D A7 0A F6 | 	mov	local01, result1 wz
29db0     10 00 90 AD |  if_e	jmp	#LR__4250
29db4     08 A6 06 F1 | 	add	local01, #8
29db8     53 95 0A FB | 	rdlong	arg02, local01 wz
29dbc     08 A6 86 F1 | 	sub	local01, #8
29dc0     08 00 90 5D |  if_ne	jmp	#LR__4251
29dc4                 | LR__4250
29dc4     00 7A 06 F6 | 	mov	result1, #0
29dc8     0C 00 90 FD | 	jmp	#LR__4252
29dcc                 | LR__4251
29dcc     00 90 05 FF 
29dd0     00 A6 46 F5 | 	or	local01, ##186646528
29dd4     53 7B 02 F6 | 	mov	result1, local01
29dd8                 | LR__4252
29dd8     E7 F0 03 F6 | 	mov	ptra, fp
29ddc     F2 00 A0 FD | 	call	#popregs_
29de0                 | __system___getrxfunc_ret
29de0     2D 00 64 FD | 	ret
29de4                 | 
29de4                 | __system____ScanForChar
29de4     49 81 02 F6 | 	mov	_var01, arg01
29de8     49 83 02 F6 | 	mov	_var02, arg01
29dec     D7 06 48 FB | 	callpa	#(@LR__4261-@LR__4260)>>2,fcache_load_ptr_
29df0                 | LR__4260
29df0     41 7B CA FA | 	rdbyte	result1, _var02 wz
29df4     01 82 06 51 |  if_ne	add	_var02, #1
29df8     F4 FF 9F 5D |  if_ne	jmp	#LR__4260
29dfc                 | LR__4261
29dfc     49 83 82 F1 | 	sub	_var02, arg01
29e00     41 7B 02 F6 | 	mov	result1, _var02
29e04     3D 93 0A F6 | 	mov	arg01, result1 wz
29e08     00 7A 06 A6 |  if_e	mov	result1, #0
29e0c     B8 00 90 AD |  if_e	jmp	#LR__4268
29e10     4A 85 02 F6 | 	mov	_var03, arg02
29e14     07 84 4E F7 | 	zerox	_var03, #7 wz
29e18     00 7A 06 A6 |  if_e	mov	result1, #0
29e1c     A8 00 90 AD |  if_e	jmp	#LR__4268
29e20     01 96 16 F2 | 	cmp	arg03, #1 wc
29e24     00 98 0E C2 |  if_b	cmp	arg04, #0 wz
29e28     01 96 06 86 |  if_c_and_z	mov	arg03, #1
29e2c     00 7A 06 46 |  if_c_and_nz	mov	result1, #0
29e30     94 00 90 4D |  if_c_and_nz	jmp	#LR__4268
29e34     49 97 1A F2 | 	cmp	arg03, arg01 wcz
29e38     10 00 90 ED |  if_be	jmp	#LR__4262
29e3c     00 98 0E F2 | 	cmp	arg04, #0 wz
29e40     00 7A 06 A6 |  if_e	mov	result1, #0
29e44     80 00 90 AD |  if_e	jmp	#LR__4268
29e48     49 97 02 F6 | 	mov	arg03, arg01
29e4c                 | LR__4262
29e4c     01 96 86 F1 | 	sub	arg03, #1
29e50     00 98 0E F2 | 	cmp	arg04, #0 wz
29e54     38 00 90 5D |  if_ne	jmp	#LR__4264
29e58     4B 87 02 F6 | 	mov	_var04, arg03
29e5c     49 89 02 F6 | 	mov	_var05, arg01
29e60                 | LR__4263
29e60     44 87 12 F2 | 	cmp	_var04, _var05 wc
29e64     5C 00 90 3D |  if_ae	jmp	#LR__4267
29e68     43 85 02 F6 | 	mov	_var03, _var04
29e6c     40 85 02 F1 | 	add	_var03, _var01
29e70     42 85 C2 FA | 	rdbyte	_var03, _var03
29e74     4A 99 E2 F8 | 	getbyte	arg04, arg02, #0
29e78     4C 85 0A F2 | 	cmp	_var03, arg04 wz
29e7c     01 86 06 A1 |  if_e	add	_var04, #1
29e80     43 7B 02 A6 |  if_e	mov	result1, _var04
29e84     40 00 90 AD |  if_e	jmp	#LR__4268
29e88     01 86 06 F1 | 	add	_var04, #1
29e8c     D0 FF 9F FD | 	jmp	#LR__4263
29e90                 | LR__4264
29e90     4B 87 02 F6 | 	mov	_var04, arg03
29e94                 | LR__4265
29e94     4B 87 1A F2 | 	cmp	_var04, arg03 wcz
29e98     28 00 90 1D |  if_a	jmp	#LR__4266
29e9c     43 89 02 F6 | 	mov	_var05, _var04
29ea0     40 89 02 F1 | 	add	_var05, _var01
29ea4     44 85 C2 FA | 	rdbyte	_var03, _var05
29ea8     4A 89 E2 F8 | 	getbyte	_var05, arg02, #0
29eac     44 85 0A F2 | 	cmp	_var03, _var05 wz
29eb0     01 86 06 A1 |  if_e	add	_var04, #1
29eb4     43 7B 02 A6 |  if_e	mov	result1, _var04
29eb8     0C 00 90 AD |  if_e	jmp	#LR__4268
29ebc     01 86 86 F1 | 	sub	_var04, #1
29ec0     D0 FF 9F FD | 	jmp	#LR__4265
29ec4                 | LR__4266
29ec4                 | LR__4267
29ec4     00 7A 06 F6 | 	mov	result1, #0
29ec8                 | LR__4268
29ec8                 | __system____ScanForChar_ret
29ec8     2D 00 64 FD | 	ret
29ecc                 | 
29ecc                 | __system___basic_dir
29ecc     06 CA 05 F6 | 	mov	COUNT_, #6
29ed0     E8 00 A0 FD | 	call	#pushregs_
29ed4     50 F0 07 F1 | 	add	ptra, #80
29ed8     49 A7 0A F6 | 	mov	local01, arg01 wz
29edc     4A A9 02 F6 | 	mov	local02, arg02
29ee0     53 AB CA 5A |  if_ne	rdbyte	local03, local01 wz
29ee4     5C 00 90 AD |  if_e	jmp	#LR__4270
29ee8     03 00 00 FF 
29eec     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
29ef0     34 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
29ef4     03 00 00 FF 
29ef8     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
29efc     03 00 00 5F 
29f00     34 69 06 51 |  if_ne	add	ptr___system__dat__, ##1844
29f04     34 93 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
29f08     03 00 00 5F 
29f0c     34 69 86 51 |  if_ne	sub	ptr___system__dat__, ##1844
29f10     AC E9 BF 5D |  if_ne	call	#__system__closedir
29f14     91 01 00 FF 
29f18     D4 92 06 F6 | 	mov	arg01, ##@LR__5468
29f1c     B8 E8 BF FD | 	call	#__system__opendir
29f20     03 00 00 FF 
29f24     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
29f28     34 7B 62 FC | 	wrlong	result1, ptr___system__dat__
29f2c     04 68 06 F1 | 	add	ptr___system__dat__, #4
29f30     34 A9 62 FC | 	wrlong	local02, ptr___system__dat__
29f34     04 68 06 F1 | 	add	ptr___system__dat__, #4
29f38     34 A7 62 FC | 	wrlong	local01, ptr___system__dat__
29f3c     03 00 00 FF 
29f40     3C 69 86 F1 | 	sub	ptr___system__dat__, ##1852
29f44                 | LR__4270
29f44     03 00 00 FF 
29f48     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
29f4c     34 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
29f50     03 00 00 FF 
29f54     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
29f58     91 01 00 AF 
29f5c     D6 7A 06 A6 |  if_e	mov	result1, ##@LR__5469
29f60     7C 01 90 AD |  if_e	jmp	#LR__4278
29f64                 | LR__4271
29f64     03 00 00 FF 
29f68     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
29f6c     34 93 02 FB | 	rdlong	arg01, ptr___system__dat__
29f70     03 00 00 FF 
29f74     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
29f78     B8 E9 BF FD | 	call	#__system__readdir
29f7c     3D AD 0A F6 | 	mov	local04, result1 wz
29f80     38 00 90 5D |  if_ne	jmp	#LR__4272
29f84     03 00 00 FF 
29f88     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
29f8c     34 93 02 FB | 	rdlong	arg01, ptr___system__dat__
29f90     03 00 00 FF 
29f94     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
29f98     24 E9 BF FD | 	call	#__system__closedir
29f9c     03 00 00 FF 
29fa0     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
29fa4     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
29fa8     03 00 00 FF 
29fac     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
29fb0     91 01 00 FF 
29fb4     D8 7A 06 F6 | 	mov	result1, ##@LR__5470
29fb8     24 01 90 FD | 	jmp	#LR__4278
29fbc                 | LR__4272
29fbc     03 00 00 FF 
29fc0     3C 69 06 F1 | 	add	ptr___system__dat__, ##1852
29fc4     34 95 02 FB | 	rdlong	arg02, ptr___system__dat__
29fc8     03 00 00 FF 
29fcc     3C 69 86 F1 | 	sub	ptr___system__dat__, ##1852
29fd0     56 93 02 F6 | 	mov	arg01, local04
29fd4     4C 09 B0 FD | 	call	#__system___pat_match
29fd8     00 7A 0E F2 | 	cmp	result1, #0 wz
29fdc     84 FF 9F AD |  if_e	jmp	#LR__4271
29fe0     03 00 00 FF 
29fe4     38 69 06 F1 | 	add	ptr___system__dat__, ##1848
29fe8     34 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
29fec     03 00 00 FF 
29ff0     38 69 86 F1 | 	sub	ptr___system__dat__, ##1848
29ff4     B0 00 90 AD |  if_e	jmp	#LR__4275
29ff8     E7 94 02 F6 | 	mov	arg02, fp
29ffc     10 94 06 F1 | 	add	arg02, #16
2a000     56 93 02 F6 | 	mov	arg01, local04
2a004     10 F2 BF FD | 	call	#__system__stat
2a008     00 7A 4E F2 | 	cmps	result1, #0 wz
2a00c     91 01 00 5F 
2a010     DA 7A 06 56 |  if_ne	mov	result1, ##@LR__5471
2a014     C8 00 90 5D |  if_ne	jmp	#LR__4278
2a018     18 CE 05 F1 | 	add	fp, #24
2a01c     E7 AE 02 FB | 	rdlong	local05, fp
2a020     18 CE 85 F1 | 	sub	fp, #24
2a024     78 00 00 FF 
2a028     00 AE 06 F5 | 	and	local05, ##61440
2a02c     56 AB C2 FA | 	rdbyte	local03, local04
2a030     2E AA 0E F2 | 	cmp	local03, #46 wz
2a034     02 A8 06 A6 |  if_e	mov	local02, #2
2a038     00 A8 06 56 |  if_ne	mov	local02, #0
2a03c     08 00 00 FF 
2a040     00 AE 0E F2 | 	cmp	local05, ##4096 wz
2a044     10 A8 46 A5 |  if_e	or	local02, #16
2a048     40 00 90 AD |  if_e	jmp	#LR__4274
2a04c     10 00 00 FF 
2a050     00 AE 0E F2 | 	cmp	local05, ##8192 wz
2a054     18 00 00 5F 
2a058     00 AE 0E 52 |  if_ne	cmp	local05, ##12288 wz
2a05c     20 00 00 5F 
2a060     00 AE 0E 52 |  if_ne	cmp	local05, ##16384 wz
2a064     04 A8 46 A5 |  if_e	or	local02, #4
2a068     20 00 90 AD |  if_e	jmp	#LR__4273
2a06c     18 CE 05 F1 | 	add	fp, #24
2a070     E7 AA 02 FB | 	rdlong	local03, fp
2a074     18 CE 85 F1 | 	sub	fp, #24
2a078     92 AA CE F7 | 	test	local03, #146 wz
2a07c     01 A8 46 A5 |  if_e	or	local02, #1
2a080     08 00 00 5F 
2a084     00 AE 0E 52 |  if_ne	cmp	local05, ##4096 wz
2a088     20 A8 46 55 |  if_ne	or	local02, #32
2a08c                 | LR__4273
2a08c                 | LR__4274
2a08c     03 00 00 FF 
2a090     38 69 06 F1 | 	add	ptr___system__dat__, ##1848
2a094     34 AF 02 FB | 	rdlong	local05, ptr___system__dat__
2a098     03 00 00 FF 
2a09c     38 69 86 F1 | 	sub	ptr___system__dat__, ##1848
2a0a0     57 A9 CA F7 | 	test	local02, local05 wz
2a0a4     BC FE 9F AD |  if_e	jmp	#LR__4271
2a0a8                 | LR__4275
2a0a8     56 93 02 F6 | 	mov	arg01, local04
2a0ac     49 B1 02 F6 | 	mov	local06, arg01
2a0b0     D7 06 48 FB | 	callpa	#(@LR__4277-@LR__4276)>>2,fcache_load_ptr_
2a0b4                 | LR__4276
2a0b4     58 7B CA FA | 	rdbyte	result1, local06 wz
2a0b8     01 B0 06 51 |  if_ne	add	local06, #1
2a0bc     F4 FF 9F 5D |  if_ne	jmp	#LR__4276
2a0c0                 | LR__4277
2a0c0     58 93 C2 F2 | 	subr	arg01, local06
2a0c4     01 92 06 F1 | 	add	arg01, #1
2a0c8     CC E0 BF FD | 	call	#__system___gc_alloc_managed
2a0cc     3D AF 0A F6 | 	mov	local05, result1 wz
2a0d0     57 93 02 56 |  if_ne	mov	arg01, local05
2a0d4     56 95 02 56 |  if_ne	mov	arg02, local04
2a0d8     68 A6 BF 5D |  if_ne	call	#__system____builtin_strcpy
2a0dc     57 7B 02 F6 | 	mov	result1, local05
2a0e0                 | LR__4278
2a0e0     E7 F0 03 F6 | 	mov	ptra, fp
2a0e4     F2 00 A0 FD | 	call	#popregs_
2a0e8                 | __system___basic_dir_ret
2a0e8     2D 00 64 FD | 	ret
2a0ec                 | 
2a0ec                 | __system__pack_0698
2a0ec     49 81 02 F6 | 	mov	_var01, arg01
2a0f0     7F 96 06 F1 | 	add	arg03, #127
2a0f4     04 98 CE F7 | 	test	arg04, #4 wz
2a0f8     10 00 90 AD |  if_e	jmp	#LR__4280
2a0fc     00 80 0E F2 | 	cmp	_var01, #0 wz
2a100     16 80 C6 A9 |  if_e	decod	_var01, #22
2a104     F7 80 26 F4 | 	bith	_var01, #247
2a108     B4 00 90 FD | 	jmp	#LR__4289
2a10c                 | LR__4280
2a10c     02 98 CE F7 | 	test	arg04, #2 wz
2a110     00 C0 3F 5F 
2a114     00 80 06 56 |  if_ne	mov	_var01, ##2139095040
2a118     00 94 06 56 |  if_ne	mov	arg02, #0
2a11c     A0 00 90 5D |  if_ne	jmp	#LR__4288
2a120     08 98 CE F7 | 	test	arg04, #8 wz
2a124     00 80 06 56 |  if_ne	mov	_var01, #0
2a128     94 00 90 5D |  if_ne	jmp	#LR__4287
2a12c     FF 96 56 F2 | 	cmps	arg03, #255 wc
2a130     00 C0 3F 3F 
2a134     00 80 06 36 |  if_ae	mov	_var01, ##2139095040
2a138     00 94 06 36 |  if_ae	mov	arg02, #0
2a13c     80 00 90 3D |  if_ae	jmp	#LR__4286
2a140     01 96 56 F2 | 	cmps	arg03, #1 wc
2a144     6C 00 90 3D |  if_ae	jmp	#LR__4284
2a148     01 94 46 F0 | 	shr	arg02, #1
2a14c     40 83 02 F6 | 	mov	_var02, _var01
2a150     01 82 06 F5 | 	and	_var02, #1
2a154     1F 82 66 F0 | 	shl	_var02, #31
2a158     41 95 42 F5 | 	or	arg02, _var02
2a15c     01 80 46 F0 | 	shr	_var01, #1
2a160     D7 1E 48 FB | 	callpa	#(@LR__4282-@LR__4281)>>2,fcache_load_ptr_
2a164                 | LR__4281
2a164     00 96 56 F2 | 	cmps	arg03, #0 wc
2a168     34 00 90 3D |  if_ae	jmp	#LR__4283
2a16c     00 80 0E F2 | 	cmp	_var01, #0 wz
2a170     2C 00 90 AD |  if_e	jmp	#LR__4283
2a174     4A 93 02 F6 | 	mov	arg01, arg02
2a178     01 92 06 F5 | 	and	arg01, #1
2a17c     01 96 06 F1 | 	add	arg03, #1
2a180     01 94 46 F0 | 	shr	arg02, #1
2a184     40 83 02 F6 | 	mov	_var02, _var01
2a188     01 82 06 F5 | 	and	_var02, #1
2a18c     1F 82 66 F0 | 	shl	_var02, #31
2a190     41 95 42 F5 | 	or	arg02, _var02
2a194     49 95 42 F5 | 	or	arg02, arg01
2a198     01 80 46 F0 | 	shr	_var01, #1
2a19c     C4 FF 9F FD | 	jmp	#LR__4281
2a1a0                 | LR__4282
2a1a0                 | LR__4283
2a1a0     00 96 56 F2 | 	cmps	arg03, #0 wc
2a1a4     18 00 90 3D |  if_ae	jmp	#LR__4285
2a1a8     00 94 0E F2 | 	cmp	arg02, #0 wz
2a1ac     6F 94 62 FD | 	wrnz	arg02
2a1b0     0C 00 90 FD | 	jmp	#LR__4285
2a1b4                 | LR__4284
2a1b4     17 81 06 F4 | 	bitl	_var01, #279
2a1b8     17 96 66 F0 | 	shl	arg03, #23
2a1bc     4B 81 42 F5 | 	or	_var01, arg03
2a1c0                 | LR__4285
2a1c0                 | LR__4286
2a1c0                 | LR__4287
2a1c0                 | LR__4288
2a1c0                 | LR__4289
2a1c0     01 80 CE F7 | 	test	_var01, #1 wz
2a1c4     01 94 46 55 |  if_ne	or	arg02, #1
2a1c8     4A 97 02 F6 | 	mov	arg03, arg02
2a1cc     00 82 06 F6 | 	mov	_var02, #0
2a1d0     FF FF 3F FF 
2a1d4     FF 95 06 F1 | 	add	arg02, ##2147483647
2a1d8     4B 95 12 F2 | 	cmp	arg02, arg03 wc
2a1dc     01 82 06 C6 |  if_b	mov	_var02, #1
2a1e0     41 81 02 F1 | 	add	_var01, _var02
2a1e4     01 98 CE F7 | 	test	arg04, #1 wz
2a1e8     1F 80 26 54 |  if_ne	bith	_var01, #31
2a1ec     40 7B 02 F6 | 	mov	result1, _var01
2a1f0                 | __system__pack_0698_ret
2a1f0     2D 00 64 FD | 	ret
2a1f4                 | 
2a1f4                 | __system___rxtxioctl_0788
2a1f4     00 95 0E F2 | 	cmp	arg02, #256 wz
2a1f8     0C 00 90 AD |  if_e	jmp	#LR__4290
2a1fc     01 95 0E F2 | 	cmp	arg02, #257 wz
2a200     1C 00 90 AD |  if_e	jmp	#LR__4291
2a204     30 00 90 FD | 	jmp	#LR__4292
2a208                 | LR__4290
2a208     08 68 06 F1 | 	add	ptr___system__dat__, #8
2a20c     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
2a210     08 68 86 F1 | 	sub	ptr___system__dat__, #8
2a214     4B 7B 62 FC | 	wrlong	result1, arg03
2a218     00 7A 06 F6 | 	mov	result1, #0
2a21c     28 00 90 FD | 	jmp	#LR__4293
2a220                 | LR__4291
2a220     4B 93 02 FB | 	rdlong	arg01, arg03
2a224     08 68 06 F1 | 	add	ptr___system__dat__, #8
2a228     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
2a22c     08 68 86 F1 | 	sub	ptr___system__dat__, #8
2a230     00 7A 06 F6 | 	mov	result1, #0
2a234     10 00 90 FD | 	jmp	#LR__4293
2a238                 | LR__4292
2a238     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a23c     34 15 68 FC | 	wrlong	#10, ptr___system__dat__
2a240     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a244     01 7A 66 F6 | 	neg	result1, #1
2a248                 | LR__4293
2a248                 | __system___rxtxioctl_0788_ret
2a248     2D 00 64 FD | 	ret
2a24c                 | 
2a24c                 | __system____dummy_flush_0789
2a24c     00 7A 06 F6 | 	mov	result1, #0
2a250                 | __system____dummy_flush_0789_ret
2a250     2D 00 64 FD | 	ret
2a254                 | 
2a254                 | __system___vfswrite
2a254     09 CA 05 F6 | 	mov	COUNT_, #9
2a258     E8 00 A0 FD | 	call	#pushregs_
2a25c     49 A7 02 F6 | 	mov	local01, arg01
2a260     4A A9 02 F6 | 	mov	local02, arg02
2a264     4B AB 02 F6 | 	mov	local03, arg03
2a268     54 AD 02 F6 | 	mov	local04, local02
2a26c     08 A6 06 F1 | 	add	local01, #8
2a270     53 93 02 FB | 	rdlong	arg01, local01
2a274     08 A6 86 F1 | 	sub	local01, #8
2a278     02 92 CE F7 | 	test	arg01, #2 wz
2a27c     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a280     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a284     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a288     01 7A 66 A6 |  if_e	neg	result1, #1
2a28c     84 01 90 AD |  if_e	jmp	#LR__4306
2a290     08 A6 06 F1 | 	add	local01, #8
2a294     53 7B 02 FB | 	rdlong	result1, local01
2a298     08 A6 86 F1 | 	sub	local01, #8
2a29c     80 7A CE F7 | 	test	result1, #128 wz
2a2a0     6C 00 90 AD |  if_e	jmp	#LR__4301
2a2a4     08 A6 06 F1 | 	add	local01, #8
2a2a8     53 95 02 FB | 	rdlong	arg02, local01
2a2ac     08 A6 86 F1 | 	sub	local01, #8
2a2b0     00 95 CE F7 | 	test	arg02, #256 wz
2a2b4     58 00 90 AD |  if_e	jmp	#LR__4300
2a2b8     30 A6 06 F1 | 	add	local01, #48
2a2bc     53 AF 02 FB | 	rdlong	local05, local01
2a2c0     57 B1 02 F6 | 	mov	local06, local05
2a2c4     30 A6 86 F1 | 	sub	local01, #48
2a2c8     13 B0 46 F7 | 	zerox	local06, #19
2a2cc     14 AE 46 F0 | 	shr	local05, #20
2a2d0     02 AE 66 F0 | 	shl	local05, #2
2a2d4     2D AF 02 F1 | 	add	local05, __methods__
2a2d8     57 AF 02 FB | 	rdlong	local05, local05
2a2dc     53 93 02 F6 | 	mov	arg01, local01
2a2e0     00 94 06 F6 | 	mov	arg02, #0
2a2e4     00 96 06 F6 | 	mov	arg03, #0
2a2e8     02 98 06 F6 | 	mov	arg04, #2
2a2ec     32 B3 02 F6 | 	mov	local07, objptr
2a2f0     58 65 02 F6 | 	mov	objptr, local06
2a2f4     2D AE 62 FD | 	call	local05
2a2f8     59 65 02 F6 | 	mov	objptr, local07
2a2fc     08 A6 06 F1 | 	add	local01, #8
2a300     53 B3 02 FB | 	rdlong	local07, local01
2a304     00 B3 26 F5 | 	andn	local07, #256
2a308     53 B3 62 FC | 	wrlong	local07, local01
2a30c     08 A6 86 F1 | 	sub	local01, #8
2a310                 | LR__4300
2a310                 | LR__4301
2a310     18 A6 06 F1 | 	add	local01, #24
2a314     53 B3 0A FB | 	rdlong	local07, local01 wz
2a318     18 A6 86 F1 | 	sub	local01, #24
2a31c     80 00 90 AD |  if_e	jmp	#LR__4303
2a320     18 A6 06 F1 | 	add	local01, #24
2a324     53 AF 02 FB | 	rdlong	local05, local01
2a328     57 B1 02 F6 | 	mov	local06, local05
2a32c     18 A6 86 F1 | 	sub	local01, #24
2a330     13 B0 46 F7 | 	zerox	local06, #19
2a334     14 AE 46 F0 | 	shr	local05, #20
2a338     02 AE 66 F0 | 	shl	local05, #2
2a33c     2D AF 02 F1 | 	add	local05, __methods__
2a340     57 AF 02 FB | 	rdlong	local05, local05
2a344     54 95 02 F6 | 	mov	arg02, local02
2a348     55 97 02 F6 | 	mov	arg03, local03
2a34c     53 93 02 F6 | 	mov	arg01, local01
2a350     32 B3 02 F6 | 	mov	local07, objptr
2a354     58 65 02 F6 | 	mov	objptr, local06
2a358     2D AE 62 FD | 	call	local05
2a35c     59 65 02 F6 | 	mov	objptr, local07
2a360     3D B5 02 F6 | 	mov	local08, result1
2a364     00 B4 56 F2 | 	cmps	local08, #0 wc
2a368     2C 00 90 3D |  if_ae	jmp	#LR__4302
2a36c     08 A6 06 F1 | 	add	local01, #8
2a370     53 B3 02 FB | 	rdlong	local07, local01
2a374     20 B2 46 F5 | 	or	local07, #32
2a378     53 B3 62 FC | 	wrlong	local07, local01
2a37c     00 B4 4E F2 | 	cmps	local08, #0 wz
2a380     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a384     34 B5 62 FC | 	wrlong	local08, ptr___system__dat__
2a388     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a38c     01 7A 66 56 |  if_ne	neg	result1, #1
2a390     00 7A 06 A6 |  if_e	mov	result1, #0
2a394     7C 00 90 FD | 	jmp	#LR__4306
2a398                 | LR__4302
2a398     5A 7B 02 F6 | 	mov	result1, local08
2a39c     74 00 90 FD | 	jmp	#LR__4306
2a3a0                 | LR__4303
2a3a0     1C A6 06 F1 | 	add	local01, #28
2a3a4     53 B7 0A FB | 	rdlong	local09, local01 wz
2a3a8     1C A6 86 F1 | 	sub	local01, #28
2a3ac     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a3b0     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a3b4     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a3b8     01 7A 66 A6 |  if_e	neg	result1, #1
2a3bc     54 00 90 AD |  if_e	jmp	#LR__4306
2a3c0     00 B4 06 F6 | 	mov	local08, #0
2a3c4                 | LR__4304
2a3c4     01 AA 16 F2 | 	cmp	local03, #1 wc
2a3c8     44 00 90 CD |  if_b	jmp	#LR__4305
2a3cc     5B AF 02 F6 | 	mov	local05, local09
2a3d0     5B B1 02 F6 | 	mov	local06, local09
2a3d4     13 AE 46 F7 | 	zerox	local05, #19
2a3d8     14 B0 46 F0 | 	shr	local06, #20
2a3dc     02 B0 66 F0 | 	shl	local06, #2
2a3e0     2D B1 02 F1 | 	add	local06, __methods__
2a3e4     58 B1 02 FB | 	rdlong	local06, local06
2a3e8     56 93 C2 FA | 	rdbyte	arg01, local04
2a3ec     53 95 02 F6 | 	mov	arg02, local01
2a3f0     32 B3 02 F6 | 	mov	local07, objptr
2a3f4     57 65 02 F6 | 	mov	objptr, local05
2a3f8     01 AC 06 F1 | 	add	local04, #1
2a3fc     2D B0 62 FD | 	call	local06
2a400     59 65 02 F6 | 	mov	objptr, local07
2a404     3D B5 02 F1 | 	add	local08, result1
2a408     01 AA 86 F1 | 	sub	local03, #1
2a40c     B4 FF 9F FD | 	jmp	#LR__4304
2a410                 | LR__4305
2a410     5A 7B 02 F6 | 	mov	result1, local08
2a414                 | LR__4306
2a414     E7 F0 03 F6 | 	mov	ptra, fp
2a418     F2 00 A0 FD | 	call	#popregs_
2a41c                 | __system___vfswrite_ret
2a41c     2D 00 64 FD | 	ret
2a420                 | 
2a420                 | __system___vfsread
2a420     09 CA 05 F6 | 	mov	COUNT_, #9
2a424     E8 00 A0 FD | 	call	#pushregs_
2a428     28 F0 07 F1 | 	add	ptra, #40
2a42c     49 A7 02 F6 | 	mov	local01, arg01
2a430     4B A9 02 F6 | 	mov	local02, arg03
2a434     4A AB 02 F6 | 	mov	local03, arg02
2a438     00 AC 06 F6 | 	mov	local04, #0
2a43c     08 A6 06 F1 | 	add	local01, #8
2a440     53 93 02 FB | 	rdlong	arg01, local01
2a444     08 A6 86 F1 | 	sub	local01, #8
2a448     01 92 CE F7 | 	test	arg01, #1 wz
2a44c     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a450     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a454     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a458     01 7A 66 A6 |  if_e	neg	result1, #1
2a45c     84 01 90 AD |  if_e	jmp	#LR__4316
2a460     14 A6 06 F1 | 	add	local01, #20
2a464     53 7B 0A FB | 	rdlong	result1, local01 wz
2a468     14 A6 86 F1 | 	sub	local01, #20
2a46c     7C 00 90 AD |  if_e	jmp	#LR__4311
2a470     14 A6 06 F1 | 	add	local01, #20
2a474     53 AF 02 FB | 	rdlong	local05, local01
2a478     57 AB 02 F6 | 	mov	local03, local05
2a47c     14 A6 86 F1 | 	sub	local01, #20
2a480     13 AA 46 F7 | 	zerox	local03, #19
2a484     14 AE 46 F0 | 	shr	local05, #20
2a488     02 AE 66 F0 | 	shl	local05, #2
2a48c     2D AF 02 F1 | 	add	local05, __methods__
2a490     57 AF 02 FB | 	rdlong	local05, local05
2a494     54 97 02 F6 | 	mov	arg03, local02
2a498     53 93 02 F6 | 	mov	arg01, local01
2a49c     32 AD 02 F6 | 	mov	local04, objptr
2a4a0     55 65 02 F6 | 	mov	objptr, local03
2a4a4     2D AE 62 FD | 	call	local05
2a4a8     56 65 02 F6 | 	mov	objptr, local04
2a4ac     3D B1 02 F6 | 	mov	local06, result1
2a4b0     00 B0 56 F2 | 	cmps	local06, #0 wc
2a4b4     2C 00 90 3D |  if_ae	jmp	#LR__4310
2a4b8     08 A6 06 F1 | 	add	local01, #8
2a4bc     53 AF 02 FB | 	rdlong	local05, local01
2a4c0     20 AE 46 F5 | 	or	local05, #32
2a4c4     53 AF 62 FC | 	wrlong	local05, local01
2a4c8     00 B0 4E F2 | 	cmps	local06, #0 wz
2a4cc     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a4d0     34 B1 62 FC | 	wrlong	local06, ptr___system__dat__
2a4d4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a4d8     01 7A 66 56 |  if_ne	neg	result1, #1
2a4dc     00 7A 06 A6 |  if_e	mov	result1, #0
2a4e0     00 01 90 FD | 	jmp	#LR__4316
2a4e4                 | LR__4310
2a4e4     58 7B 02 F6 | 	mov	result1, local06
2a4e8     F8 00 90 FD | 	jmp	#LR__4316
2a4ec                 | LR__4311
2a4ec     20 A6 06 F1 | 	add	local01, #32
2a4f0     53 B3 0A FB | 	rdlong	local07, local01 wz
2a4f4     20 A6 86 F1 | 	sub	local01, #32
2a4f8     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a4fc     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a500     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a504     01 7A 66 A6 |  if_e	neg	result1, #1
2a508     D8 00 90 AD |  if_e	jmp	#LR__4316
2a50c     28 A6 06 F1 | 	add	local01, #40
2a510     53 B1 0A FB | 	rdlong	local06, local01 wz
2a514     28 A6 86 F1 | 	sub	local01, #40
2a518     60 00 90 AD |  if_e	jmp	#LR__4313
2a51c     28 A6 06 F1 | 	add	local01, #40
2a520     53 AF 02 FB | 	rdlong	local05, local01
2a524     57 B5 02 F6 | 	mov	local08, local05
2a528     28 A6 86 F1 | 	sub	local01, #40
2a52c     13 B4 46 F7 | 	zerox	local08, #19
2a530     14 AE 46 F0 | 	shr	local05, #20
2a534     02 AE 66 F0 | 	shl	local05, #2
2a538     2D AF 02 F1 | 	add	local05, __methods__
2a53c     57 AF 02 FB | 	rdlong	local05, local05
2a540     53 93 02 F6 | 	mov	arg01, local01
2a544     E7 96 02 F6 | 	mov	arg03, fp
2a548     24 96 06 F1 | 	add	arg03, #36
2a54c     00 95 06 F6 | 	mov	arg02, #256
2a550     32 B1 02 F6 | 	mov	local06, objptr
2a554     5A 65 02 F6 | 	mov	objptr, local08
2a558     2D AE 62 FD | 	call	local05
2a55c     58 65 02 F6 | 	mov	objptr, local06
2a560     00 7A 0E F2 | 	cmp	result1, #0 wz
2a564     14 00 90 5D |  if_ne	jmp	#LR__4312
2a568     24 CE 05 F1 | 	add	fp, #36
2a56c     E7 B0 02 FB | 	rdlong	local06, fp
2a570     24 CE 85 F1 | 	sub	fp, #36
2a574     02 B0 CE F7 | 	test	local06, #2 wz
2a578     01 AC 06 56 |  if_ne	mov	local04, #1
2a57c                 | LR__4312
2a57c                 | LR__4313
2a57c     00 B0 06 F6 | 	mov	local06, #0
2a580                 | LR__4314
2a580     01 A8 16 F2 | 	cmp	local02, #1 wc
2a584     58 00 90 CD |  if_b	jmp	#LR__4315
2a588     59 B5 02 F6 | 	mov	local08, local07
2a58c     59 AF 02 F6 | 	mov	local05, local07
2a590     13 B4 46 F7 | 	zerox	local08, #19
2a594     14 AE 46 F0 | 	shr	local05, #20
2a598     02 AE 66 F0 | 	shl	local05, #2
2a59c     2D AF 02 F1 | 	add	local05, __methods__
2a5a0     57 AF 02 FB | 	rdlong	local05, local05
2a5a4     53 93 02 F6 | 	mov	arg01, local01
2a5a8     32 B7 02 F6 | 	mov	local09, objptr
2a5ac     5A 65 02 F6 | 	mov	objptr, local08
2a5b0     2D AE 62 FD | 	call	local05
2a5b4     5B 65 02 F6 | 	mov	objptr, local09
2a5b8     00 7A 56 F2 | 	cmps	result1, #0 wc
2a5bc     20 00 90 CD |  if_b	jmp	#LR__4315
2a5c0     55 7B 42 FC | 	wrbyte	result1, local03
2a5c4     01 B0 06 F1 | 	add	local06, #1
2a5c8     01 A8 86 F1 | 	sub	local02, #1
2a5cc     00 AC 0E F2 | 	cmp	local04, #0 wz
2a5d0     01 AA 06 F1 | 	add	local03, #1
2a5d4     A8 FF 9F AD |  if_e	jmp	#LR__4314
2a5d8     0A 7A 0E F2 | 	cmp	result1, #10 wz
2a5dc     A0 FF 9F 5D |  if_ne	jmp	#LR__4314
2a5e0                 | LR__4315
2a5e0     58 7B 02 F6 | 	mov	result1, local06
2a5e4                 | LR__4316
2a5e4     E7 F0 03 F6 | 	mov	ptra, fp
2a5e8     F2 00 A0 FD | 	call	#popregs_
2a5ec                 | __system___vfsread_ret
2a5ec     2D 00 64 FD | 	ret
2a5f0                 | 
2a5f0                 | __system___sdmm_open
2a5f0     0B CA 05 F6 | 	mov	COUNT_, #11
2a5f4     E8 00 A0 FD | 	call	#pushregs_
2a5f8     49 AB 02 F6 | 	mov	local03, arg01
2a5fc     4A AD 02 F6 | 	mov	local04, arg02
2a600     4B AF 02 F6 | 	mov	local05, arg03
2a604     4C B1 02 F6 | 	mov	local06, arg04
2a608     28 92 06 F6 | 	mov	arg01, #40
2a60c     88 DB BF FD | 	call	#__system___gc_alloc_managed
2a610     3D B3 02 F6 | 	mov	local07, result1
2a614     55 99 02 F6 | 	mov	arg04, local03
2a618     1F 98 C6 F0 | 	sar	arg04, #31
2a61c     55 97 02 F6 | 	mov	arg03, local03
2a620     01 92 06 F6 | 	mov	arg01, #1
2a624     00 94 06 F6 | 	mov	arg02, #0
2a628     44 C3 BF FD | 	call	#__system___int64_shl
2a62c     3D A7 02 F6 | 	mov	local01, result1
2a630     3E B5 02 F6 | 	mov	local08, result2
2a634     56 99 02 F6 | 	mov	arg04, local04
2a638     1F 98 C6 F0 | 	sar	arg04, #31
2a63c     56 97 02 F6 | 	mov	arg03, local04
2a640     01 92 06 F6 | 	mov	arg01, #1
2a644     00 94 06 F6 | 	mov	arg02, #0
2a648     24 C3 BF FD | 	call	#__system___int64_shl
2a64c     3D A7 42 F5 | 	or	local01, result1
2a650     3E B5 42 F5 | 	or	local08, result2
2a654     57 99 02 F6 | 	mov	arg04, local05
2a658     1F 98 C6 F0 | 	sar	arg04, #31
2a65c     57 97 02 F6 | 	mov	arg03, local05
2a660     01 92 06 F6 | 	mov	arg01, #1
2a664     00 94 06 F6 | 	mov	arg02, #0
2a668     04 C3 BF FD | 	call	#__system___int64_shl
2a66c     3D A7 42 F5 | 	or	local01, result1
2a670     3E B5 42 F5 | 	or	local08, result2
2a674     58 99 02 F6 | 	mov	arg04, local06
2a678     1F 98 C6 F0 | 	sar	arg04, #31
2a67c     58 97 02 F6 | 	mov	arg03, local06
2a680     01 92 06 F6 | 	mov	arg01, #1
2a684     00 94 06 F6 | 	mov	arg02, #0
2a688     E4 C2 BF FD | 	call	#__system___int64_shl
2a68c     5A 95 02 F6 | 	mov	arg02, local08
2a690     3D A7 42 F5 | 	or	local01, result1
2a694     4A 7D 42 F5 | 	or	result2, arg02
2a698     3E A9 02 F6 | 	mov	local02, result2
2a69c     53 93 02 F6 | 	mov	arg01, local01
2a6a0     54 95 02 F6 | 	mov	arg02, local02
2a6a4     38 C3 BF FD | 	call	#__system___usepins
2a6a8     00 7A 0E F2 | 	cmp	result1, #0 wz
2a6ac     1C 00 90 5D |  if_ne	jmp	#LR__4320
2a6b0     59 93 02 F6 | 	mov	arg01, local07
2a6b4     14 DC BF FD | 	call	#__system___gc_free
2a6b8     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a6bc     34 2D 68 FC | 	wrlong	#22, ptr___system__dat__
2a6c0     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a6c4     00 7A 06 F6 | 	mov	result1, #0
2a6c8     5C 01 90 FD | 	jmp	#LR__4323
2a6cc                 | LR__4320
2a6cc     53 B7 02 F6 | 	mov	local09, local01
2a6d0     54 9B 02 F6 | 	mov	arg05, local02
2a6d4     20 B2 06 F1 | 	add	local07, #32
2a6d8     59 B7 62 FC | 	wrlong	local09, local07
2a6dc     04 B2 06 F1 | 	add	local07, #4
2a6e0     59 9B 62 FC | 	wrlong	arg05, local07
2a6e4     24 B2 86 F1 | 	sub	local07, #36
2a6e8     57 99 02 F6 | 	mov	arg04, local05
2a6ec     58 9B 02 F6 | 	mov	arg05, local06
2a6f0     00 92 06 F6 | 	mov	arg01, #0
2a6f4     55 95 02 F6 | 	mov	arg02, local03
2a6f8     56 97 02 F6 | 	mov	arg03, local04
2a6fc     32 B9 02 F6 | 	mov	local10, objptr
2a700     59 65 02 F6 | 	mov	objptr, local07
2a704     34 0F B0 FD | 	call	#_sdmm_cc_disk_setpins
2a708     5C 65 02 F6 | 	mov	objptr, local10
2a70c     3D BB 0A F6 | 	mov	local11, result1 wz
2a710     18 00 90 5D |  if_ne	jmp	#LR__4321
2a714     00 92 06 F6 | 	mov	arg01, #0
2a718     32 BB 02 F6 | 	mov	local11, objptr
2a71c     59 65 02 F6 | 	mov	objptr, local07
2a720     4C 03 B0 FD | 	call	#_sdmm_cc_disk_initialize
2a724     5D 65 02 F6 | 	mov	objptr, local11
2a728     3D BB E2 F8 | 	getbyte	local11, result1, #0
2a72c                 | LR__4321
2a72c     00 BA 0E F2 | 	cmp	local11, #0 wz
2a730     D0 00 90 5D |  if_ne	jmp	#LR__4322
2a734     64 E0 BF FD | 	call	#__system___get_vfs_file_handle
2a738     3D BB 0A F6 | 	mov	local11, result1 wz
2a73c     C4 00 90 AD |  if_e	jmp	#LR__4322
2a740     04 BA 06 F1 | 	add	local11, #4
2a744     5D 05 58 FC | 	wrword	#2, local11
2a748     02 BA 06 F1 | 	add	local11, #2
2a74c     5D 01 58 FC | 	wrword	#0, local11
2a750     02 BA 06 F1 | 	add	local11, #2
2a754     40 00 80 FF 
2a758     5D 07 68 FC | 	wrlong	##32771, local11
2a75c     59 7B 02 F6 | 	mov	result1, local07
2a760     00 68 06 FF 
2a764     00 7A 46 F5 | 	or	result1, ##214958080
2a768     0C BA 06 F1 | 	add	local11, #12
2a76c     5D 7B 62 FC | 	wrlong	result1, local11
2a770     59 7B 02 F6 | 	mov	result1, local07
2a774     00 70 06 FF 
2a778     00 7A 46 F5 | 	or	result1, ##216006656
2a77c     04 BA 06 F1 | 	add	local11, #4
2a780     5D 7B 62 FC | 	wrlong	result1, local11
2a784     59 7B 02 F6 | 	mov	result1, local07
2a788     00 78 06 FF 
2a78c     00 7A 46 F5 | 	or	result1, ##217055232
2a790     0C BA 06 F1 | 	add	local11, #12
2a794     5D 7B 62 FC | 	wrlong	result1, local11
2a798     59 7B 02 F6 | 	mov	result1, local07
2a79c     00 80 06 FF 
2a7a0     00 7A 46 F5 | 	or	result1, ##218103808
2a7a4     04 BA 06 F1 | 	add	local11, #4
2a7a8     5D 7B 62 FC | 	wrlong	result1, local11
2a7ac     59 7B 02 F6 | 	mov	result1, local07
2a7b0     00 88 06 FF 
2a7b4     00 7A 46 F5 | 	or	result1, ##219152384
2a7b8     04 BA 06 F1 | 	add	local11, #4
2a7bc     5D 7B 62 FC | 	wrlong	result1, local11
2a7c0     59 7B 02 F6 | 	mov	result1, local07
2a7c4     00 90 06 FF 
2a7c8     00 7A 46 F5 | 	or	result1, ##220200960
2a7cc     04 BA 06 F1 | 	add	local11, #4
2a7d0     5D 7B 62 FC | 	wrlong	result1, local11
2a7d4     59 7B 02 F6 | 	mov	result1, local07
2a7d8     00 98 06 FF 
2a7dc     00 7A 46 F5 | 	or	result1, ##221249536
2a7e0     14 BA 86 F1 | 	sub	local11, #20
2a7e4     5D 7B 62 FC | 	wrlong	result1, local11
2a7e8     00 A0 06 FF 
2a7ec     00 B2 46 F5 | 	or	local07, ##222298112
2a7f0     04 BA 06 F1 | 	add	local11, #4
2a7f4     5D B3 62 FC | 	wrlong	local07, local11
2a7f8     20 BA 86 F1 | 	sub	local11, #32
2a7fc     5D 7B 02 F6 | 	mov	result1, local11
2a800     24 00 90 FD | 	jmp	#LR__4323
2a804                 | LR__4322
2a804     53 93 02 F6 | 	mov	arg01, local01
2a808     54 95 02 F6 | 	mov	arg02, local02
2a80c     24 C2 BF FD | 	call	#__system___freepins
2a810     59 93 02 F6 | 	mov	arg01, local07
2a814     B4 DA BF FD | 	call	#__system___gc_free
2a818     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a81c     34 19 68 FC | 	wrlong	#12, ptr___system__dat__
2a820     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a824     00 7A 06 F6 | 	mov	result1, #0
2a828                 | LR__4323
2a828     E7 F0 03 F6 | 	mov	ptra, fp
2a82c     F2 00 A0 FD | 	call	#popregs_
2a830                 | __system___sdmm_open_ret
2a830     2D 00 64 FD | 	ret
2a834                 | 
2a834                 | __system____default_filbuf
2a834     05 CA 05 F6 | 	mov	COUNT_, #5
2a838     E8 00 A0 FD | 	call	#pushregs_
2a83c     49 A7 02 F6 | 	mov	local01, arg01
2a840     53 A9 02 FB | 	rdlong	local02, local01
2a844     08 A8 06 F1 | 	add	local02, #8
2a848     54 7B 0A FB | 	rdlong	result1, local02 wz
2a84c     08 A8 86 F1 | 	sub	local02, #8
2a850     20 00 90 5D |  if_ne	jmp	#LR__4330
2a854     10 A8 06 F1 | 	add	local02, #16
2a858     54 7B 02 F6 | 	mov	result1, local02
2a85c     04 A8 86 F1 | 	sub	local02, #4
2a860     54 7B 62 FC | 	wrlong	result1, local02
2a864     04 A8 86 F1 | 	sub	local02, #4
2a868     02 00 80 FF 
2a86c     54 01 68 FC | 	wrlong	##1024, local02
2a870     08 A8 86 F1 | 	sub	local02, #8
2a874                 | LR__4330
2a874     14 A6 06 F1 | 	add	local01, #20
2a878     53 AB 02 FB | 	rdlong	local03, local01
2a87c     55 AD 02 F6 | 	mov	local04, local03
2a880     14 A6 86 F1 | 	sub	local01, #20
2a884     13 AC 46 F7 | 	zerox	local04, #19
2a888     14 AA 46 F0 | 	shr	local03, #20
2a88c     02 AA 66 F0 | 	shl	local03, #2
2a890     2D AB 02 F1 | 	add	local03, __methods__
2a894     55 AB 02 FB | 	rdlong	local03, local03
2a898     53 93 02 F6 | 	mov	arg01, local01
2a89c     0C A8 06 F1 | 	add	local02, #12
2a8a0     54 95 02 FB | 	rdlong	arg02, local02
2a8a4     04 A8 86 F1 | 	sub	local02, #4
2a8a8     54 97 02 FB | 	rdlong	arg03, local02
2a8ac     08 A8 86 F1 | 	sub	local02, #8
2a8b0     32 AF 02 F6 | 	mov	local05, objptr
2a8b4     56 65 02 F6 | 	mov	objptr, local04
2a8b8     2D AA 62 FD | 	call	local03
2a8bc     57 65 02 F6 | 	mov	objptr, local05
2a8c0     3D AF 02 F6 | 	mov	local05, result1
2a8c4     00 AE 56 F2 | 	cmps	local05, #0 wc
2a8c8     01 7A 66 C6 |  if_b	neg	result1, #1
2a8cc     28 00 90 CD |  if_b	jmp	#LR__4331
2a8d0     54 AF 62 FC | 	wrlong	local05, local02
2a8d4     0C A8 06 F1 | 	add	local02, #12
2a8d8     54 AB 02 FB | 	rdlong	local03, local02
2a8dc     08 A8 86 F1 | 	sub	local02, #8
2a8e0     54 AB 62 FC | 	wrlong	local03, local02
2a8e4     08 A6 06 F1 | 	add	local01, #8
2a8e8     53 AD 02 FB | 	rdlong	local04, local01
2a8ec     04 AC 46 F5 | 	or	local04, #4
2a8f0     53 AD 62 FC | 	wrlong	local04, local01
2a8f4     57 7B 02 F6 | 	mov	result1, local05
2a8f8                 | LR__4331
2a8f8     E7 F0 03 F6 | 	mov	ptra, fp
2a8fc     F2 00 A0 FD | 	call	#popregs_
2a900                 | __system____default_filbuf_ret
2a900     2D 00 64 FD | 	ret
2a904                 | 
2a904                 | __system__getlower_1283
2a904     41 92 56 F2 | 	cmps	arg01, #65 wc
2a908     10 00 90 CD |  if_b	jmp	#LR__4340
2a90c     5B 92 56 F2 | 	cmps	arg01, #91 wc
2a910     49 7B 02 C6 |  if_b	mov	result1, arg01
2a914     20 7A 06 C1 |  if_b	add	result1, #32
2a918     04 00 90 CD |  if_b	jmp	#__system__getlower_1283_ret
2a91c                 | LR__4340
2a91c     49 7B 02 F6 | 	mov	result1, arg01
2a920                 | __system__getlower_1283_ret
2a920     2D 00 64 FD | 	ret
2a924                 | 
2a924                 | __system___pat_match
2a924     07 CA 05 F6 | 	mov	COUNT_, #7
2a928     E8 00 A0 FD | 	call	#pushregs_
2a92c     49 A7 02 F6 | 	mov	local01, arg01
2a930                 | LR__4350
2a930     4A 93 CA FA | 	rdbyte	arg01, arg02 wz
2a934     53 A9 CA 5A |  if_ne	rdbyte	local02, local01 wz
2a938     49 AB 02 56 |  if_ne	mov	local03, arg01
2a93c     2A AA 0E 52 |  if_ne	cmp	local03, #42 wz
2a940     2C 00 90 AD |  if_e	jmp	#LR__4351
2a944     4A 93 C2 FA | 	rdbyte	arg01, arg02
2a948     B8 FF BF FD | 	call	#__system__getlower_1283
2a94c     3D A9 02 F6 | 	mov	local02, result1
2a950     53 93 C2 FA | 	rdbyte	arg01, local01
2a954     AC FF BF FD | 	call	#__system__getlower_1283
2a958     54 7B 0A F2 | 	cmp	result1, local02 wz
2a95c     00 7A 06 56 |  if_ne	mov	result1, #0
2a960     00 01 90 5D |  if_ne	jmp	#LR__4360
2a964     01 A6 06 F1 | 	add	local01, #1
2a968     01 94 06 F1 | 	add	arg02, #1
2a96c     C0 FF 9F FD | 	jmp	#LR__4350
2a970                 | LR__4351
2a970     4A AB C2 FA | 	rdbyte	local03, arg02
2a974     2A AA 0E F2 | 	cmp	local03, #42 wz
2a978     D8 00 90 5D |  if_ne	jmp	#LR__4359
2a97c     01 94 06 F1 | 	add	arg02, #1
2a980     4A AB C2 FA | 	rdbyte	local03, arg02
2a984     01 94 86 F1 | 	sub	arg02, #1
2a988     2E AA 0E F2 | 	cmp	local03, #46 wz
2a98c     28 00 90 5D |  if_ne	jmp	#LR__4352
2a990     02 94 06 F1 | 	add	arg02, #2
2a994     4A AB C2 FA | 	rdbyte	local03, arg02
2a998     02 94 86 F1 | 	sub	arg02, #2
2a99c     2A AA 0E F2 | 	cmp	local03, #42 wz
2a9a0     03 94 06 A1 |  if_e	add	arg02, #3
2a9a4     4A AD C2 AA |  if_e	rdbyte	local04, arg02
2a9a8     03 94 86 A1 |  if_e	sub	arg02, #3
2a9ac     56 AF 0A A6 |  if_e	mov	local05, local04 wz
2a9b0     01 7A 06 A6 |  if_e	mov	result1, #1
2a9b4     AC 00 90 AD |  if_e	jmp	#LR__4360
2a9b8                 | LR__4352
2a9b8     01 94 06 F1 | 	add	arg02, #1
2a9bc     00 B0 06 F6 | 	mov	local06, #0
2a9c0     D7 0E 48 FB | 	callpa	#(@LR__4354-@LR__4353)>>2,fcache_load_ptr_
2a9c4                 | LR__4353
2a9c4     58 A9 02 F6 | 	mov	local02, local06
2a9c8     4A A9 02 F1 | 	add	local02, arg02
2a9cc     54 AD CA FA | 	rdbyte	local04, local02 wz
2a9d0     58 AF 02 56 |  if_ne	mov	local05, local06
2a9d4     01 AE 06 51 |  if_ne	add	local05, #1
2a9d8     57 B1 02 56 |  if_ne	mov	local06, local05
2a9dc     E4 FF 9F 5D |  if_ne	jmp	#LR__4353
2a9e0                 | LR__4354
2a9e0     00 B2 06 F6 | 	mov	local07, #0
2a9e4     D7 0E 48 FB | 	callpa	#(@LR__4356-@LR__4355)>>2,fcache_load_ptr_
2a9e8                 | LR__4355
2a9e8     59 A9 02 F6 | 	mov	local02, local07
2a9ec     53 A9 02 F1 | 	add	local02, local01
2a9f0     54 AD CA FA | 	rdbyte	local04, local02 wz
2a9f4     59 AF 02 56 |  if_ne	mov	local05, local07
2a9f8     01 AE 06 51 |  if_ne	add	local05, #1
2a9fc     57 B3 02 56 |  if_ne	mov	local07, local05
2aa00     E4 FF 9F 5D |  if_ne	jmp	#LR__4355
2aa04                 | LR__4356
2aa04     58 B3 52 F2 | 	cmps	local07, local06 wc
2aa08     00 7A 06 C6 |  if_b	mov	result1, #0
2aa0c     54 00 90 CD |  if_b	jmp	#LR__4360
2aa10     59 AB 02 F6 | 	mov	local03, local07
2aa14     58 AB 82 F1 | 	sub	local03, local06
2aa18     55 A7 02 F1 | 	add	local01, local03
2aa1c                 | LR__4357
2aa1c     01 B0 56 F2 | 	cmps	local06, #1 wc
2aa20     30 00 90 CD |  if_b	jmp	#LR__4358
2aa24     53 93 C2 FA | 	rdbyte	arg01, local01
2aa28     D8 FE BF FD | 	call	#__system__getlower_1283
2aa2c     3D B3 02 F6 | 	mov	local07, result1
2aa30     4A 93 C2 FA | 	rdbyte	arg01, arg02
2aa34     CC FE BF FD | 	call	#__system__getlower_1283
2aa38     3D B3 0A F2 | 	cmp	local07, result1 wz
2aa3c     00 7A 06 56 |  if_ne	mov	result1, #0
2aa40     20 00 90 5D |  if_ne	jmp	#LR__4360
2aa44     01 A6 06 F1 | 	add	local01, #1
2aa48     01 94 06 F1 | 	add	arg02, #1
2aa4c     01 B0 86 F1 | 	sub	local06, #1
2aa50     C8 FF 9F FD | 	jmp	#LR__4357
2aa54                 | LR__4358
2aa54                 | LR__4359
2aa54     4A B3 CA FA | 	rdbyte	local07, arg02 wz
2aa58     53 A9 CA AA |  if_e	rdbyte	local02, local01 wz
2aa5c     01 7A 06 A6 |  if_e	mov	result1, #1
2aa60     00 7A 06 56 |  if_ne	mov	result1, #0
2aa64                 | LR__4360
2aa64     E7 F0 03 F6 | 	mov	ptra, fp
2aa68     F2 00 A0 FD | 	call	#popregs_
2aa6c                 | __system___pat_match_ret
2aa6c     2D 00 64 FD | 	ret
2aa70                 | 
2aa70                 | _sdmm_cc_disk_initialize
2aa70     0F CA 05 F6 | 	mov	COUNT_, #15
2aa74     E8 00 A0 FD | 	call	#pushregs_
2aa78     49 A7 0A F6 | 	mov	local01, arg01 wz
2aa7c     F8 A9 02 F6 | 	mov	local02, ptra
2aa80     32 AB 02 FB | 	rdlong	local03, objptr
2aa84     04 64 06 F1 | 	add	objptr, #4
2aa88     32 AD 02 FB | 	rdlong	local04, objptr
2aa8c     04 64 06 F1 | 	add	objptr, #4
2aa90     32 AF 02 FB | 	rdlong	local05, objptr
2aa94     04 64 06 F1 | 	add	objptr, #4
2aa98     32 B1 02 FB | 	rdlong	local06, objptr
2aa9c     08 64 06 F1 | 	add	objptr, #8
2aaa0     32 03 48 FC | 	wrbyte	#1, objptr
2aaa4     14 64 86 F1 | 	sub	objptr, #20
2aaa8                 | ' #line 539 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2aaa8                 | ' 		return RES_NOTRDY;
2aaa8     0C F0 07 F1 | 	add	ptra, #12
2aaac     03 7A 06 56 |  if_ne	mov	result1, #3
2aab0     68 04 90 5D |  if_ne	jmp	#LR__4390
2aab4     13 00 00 FF 
2aab8     10 93 06 F6 | 	mov	arg01, ##10000
2aabc     30 A0 BF FD | 	call	#__system___waitus
2aac0     55 99 02 F6 | 	mov	arg04, local03
2aac4     57 99 82 F1 | 	sub	arg04, local05
2aac8     4C 99 42 F6 | 	abs	arg04, arg04
2aacc     04 98 56 F2 | 	cmps	arg04, #4 wc
2aad0     04 7A 06 36 |  if_ae	mov	result1, #4
2aad4     44 04 90 3D |  if_ae	jmp	#LR__4390
2aad8     55 B3 02 F6 | 	mov	local07, local03
2aadc     58 B3 82 F1 | 	sub	local07, local06
2aae0     59 B3 42 F6 | 	abs	local07, local07
2aae4     04 B2 56 F2 | 	cmps	local07, #4 wc
2aae8     34 00 90 3D |  if_ae	jmp	#LR__4370
2aaec     55 B5 02 F6 | 	mov	local08, local03
2aaf0     58 B5 82 F1 | 	sub	local08, local06
2aaf4     07 B4 06 F5 | 	and	local08, #7
2aaf8     18 B4 66 F0 | 	shl	local08, #24
2aafc     29 00 00 FF 
2ab00     7A B4 46 F5 | 	or	local08, ##21114
2ab04     58 B7 02 F6 | 	mov	local09, local06
2ab08     0C 64 06 F1 | 	add	objptr, #12
2ab0c     32 B7 62 FC | 	wrlong	local09, objptr
2ab10     04 64 06 F1 | 	add	objptr, #4
2ab14     32 B7 62 FC | 	wrlong	local09, objptr
2ab18     10 64 86 F1 | 	sub	objptr, #16
2ab1c     A4 00 90 FD | 	jmp	#LR__4373
2ab20                 | LR__4370
2ab20     58 AB 5A F2 | 	cmps	local03, local06 wcz
2ab24     28 00 90 ED |  if_be	jmp	#LR__4371
2ab28     55 B7 02 F6 | 	mov	local09, local03
2ab2c     03 B6 86 F1 | 	sub	local09, #3
2ab30     57 B7 0A F2 | 	cmp	local09, local05 wz
2ab34     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2ab38     01 B6 06 A1 |  if_e	add	local09, #1
2ab3c     57 B7 0A F2 | 	cmp	local09, local05 wz
2ab40     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2ab44     28 00 90 5D |  if_ne	jmp	#LR__4372
2ab48     01 B6 06 F1 | 	add	local09, #1
2ab4c     20 00 90 FD | 	jmp	#LR__4372
2ab50                 | LR__4371
2ab50     55 B7 02 F6 | 	mov	local09, local03
2ab54     03 B6 06 F1 | 	add	local09, #3
2ab58     57 B7 0A F2 | 	cmp	local09, local05 wz
2ab5c     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2ab60     01 B6 86 A1 |  if_e	sub	local09, #1
2ab64     57 B7 0A F2 | 	cmp	local09, local05 wz
2ab68     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2ab6c     01 B6 86 A1 |  if_e	sub	local09, #1
2ab70                 | LR__4372
2ab70     58 B3 02 F6 | 	mov	local07, local06
2ab74     5B B3 82 F1 | 	sub	local07, local09
2ab78     59 B3 42 F6 | 	abs	local07, local07
2ab7c     04 B2 56 F2 | 	cmps	local07, #4 wc
2ab80     04 7A 06 36 |  if_ae	mov	result1, #4
2ab84     94 03 90 3D |  if_ae	jmp	#LR__4390
2ab88     58 B5 02 F6 | 	mov	local08, local06
2ab8c     5B B5 82 F1 | 	sub	local08, local09
2ab90     07 B4 06 F5 | 	and	local08, #7
2ab94     1C B4 66 F0 | 	shl	local08, #28
2ab98     55 B3 02 F6 | 	mov	local07, local03
2ab9c     5B B3 82 F1 | 	sub	local07, local09
2aba0     07 B2 06 F5 | 	and	local07, #7
2aba4     18 B2 66 F0 | 	shl	local07, #24
2aba8     59 B5 42 F5 | 	or	local08, local07
2abac     3A B4 46 F5 | 	or	local08, #58
2abb0     10 64 06 F1 | 	add	objptr, #16
2abb4     32 B1 62 FC | 	wrlong	local06, objptr
2abb8     04 64 86 F1 | 	sub	objptr, #4
2abbc     32 B7 62 FC | 	wrlong	local09, objptr
2abc0     0C 64 86 F1 | 	sub	objptr, #12
2abc4                 | LR__4373
2abc4     56 01 08 FC | 	wrpin	#0, local04
2abc8     59 AC 62 FD | 	drvh	local04
2abcc     00 08 00 FF 
2abd0     20 B8 06 F6 | 	mov	local10, ##1048608
2abd4     40 AA 62 FD | 	dirl	local03
2abd8     A0 03 80 FF 
2abdc     55 91 08 FC | 	wrpin	##475208, local03
2abe0     00 08 80 FF 
2abe4     55 41 18 FC | 	wxpin	##1048608, local03
2abe8     55 01 28 FC | 	wypin	#0, local03
2abec     41 AA 62 FD | 	dirh	local03
2abf0     55 B3 02 F6 | 	mov	local07, local03
2abf4     57 B3 82 F1 | 	sub	local07, local05
2abf8     07 B2 06 F5 | 	and	local07, #7
2abfc     18 B2 66 F0 | 	shl	local07, #24
2ac00     78 BA 06 F6 | 	mov	local11, #120
2ac04     59 BB 42 F5 | 	or	local11, local07
2ac08     5D 95 02 F6 | 	mov	arg02, local11
2ac0c     10 94 26 F4 | 	bith	arg02, #16
2ac10     40 AE 62 FD | 	dirl	local05
2ac14     57 95 02 FC | 	wrpin	arg02, local05
2ac18     57 3F 18 FC | 	wxpin	#31, local05
2ac1c     FF FF FF FF 
2ac20     57 FF 2B FC | 	wypin	##-1, local05
2ac24     41 AE 62 FD | 	dirh	local05
2ac28     29 00 80 FF 
2ac2c     58 01 08 FC | 	wrpin	##20992, local06
2ac30     40 B6 62 FD | 	dirl	local09
2ac34     5B B5 02 FC | 	wrpin	local08, local09
2ac38     5B 4F 18 FC | 	wxpin	#39, local09
2ac3c     5B 01 28 FC | 	wypin	#0, local09
2ac40     41 B6 62 FD | 	dirh	local09
2ac44     54 93 02 F6 | 	mov	arg01, local02
2ac48     0A 94 06 F6 | 	mov	arg02, #10
2ac4c     5C 06 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2ac50     00 92 06 F6 | 	mov	arg01, #0
2ac54     00 94 06 F6 | 	mov	arg02, #0
2ac58     D4 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2ac5c     20 07 B0 FD | 	call	#_sdmm_cc_deselect_0858
2ac60     64 92 06 F6 | 	mov	arg01, #100
2ac64     88 9E BF FD | 	call	#__system___waitus
2ac68     54 93 02 F6 | 	mov	arg01, local02
2ac6c     0A 94 06 F6 | 	mov	arg02, #10
2ac70     38 06 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2ac74     00 BC 06 F6 | 	mov	local12, #0
2ac78     00 92 06 F6 | 	mov	arg01, #0
2ac7c     00 94 06 F6 | 	mov	arg02, #0
2ac80     AC 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2ac84     3D B3 E2 F8 | 	getbyte	local07, result1, #0
2ac88     01 B2 0E F2 | 	cmp	local07, #1 wz
2ac8c     5C 02 90 5D |  if_ne	jmp	#LR__4389
2ac90     08 92 06 F6 | 	mov	arg01, #8
2ac94     AA 95 06 F6 | 	mov	arg02, #426
2ac98     94 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2ac9c     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2aca0     01 7A 0E F2 | 	cmp	result1, #1 wz
2aca4     30 01 90 5D |  if_ne	jmp	#LR__4378
2aca8     54 93 02 F6 | 	mov	arg01, local02
2acac     04 94 06 F6 | 	mov	arg02, #4
2acb0     F8 05 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2acb4     02 A8 06 F1 | 	add	local02, #2
2acb8     54 B3 C2 FA | 	rdbyte	local07, local02
2acbc     02 A8 86 F1 | 	sub	local02, #2
2acc0     01 B2 0E F2 | 	cmp	local07, #1 wz
2acc4     03 A8 06 A1 |  if_e	add	local02, #3
2acc8     54 BF C2 AA |  if_e	rdbyte	local13, local02
2accc     03 A8 86 A1 |  if_e	sub	local02, #3
2acd0     AA BE 0E A2 |  if_e	cmp	local13, #170 wz
2acd4     14 02 90 5D |  if_ne	jmp	#LR__4388
2acd8                 | ' 				for (tmr = 1000; tmr; tmr--) {
2acd8     01 00 00 FF 
2acdc     E8 C1 06 F6 | 	mov	local14, ##1000
2ace0                 | LR__4374
2ace0     A9 92 06 F6 | 	mov	arg01, #169
2ace4     1E 94 C6 F9 | 	decod	arg02, #30
2ace8     44 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2acec     3D B3 02 F6 | 	mov	local07, result1
2acf0     07 B2 4E F7 | 	zerox	local07, #7 wz
2acf4     18 00 90 AD |  if_e	jmp	#LR__4375
2acf8     01 00 00 FF 
2acfc     E8 93 06 F6 | 	mov	arg01, ##1000
2ad00     EC 9D BF FD | 	call	#__system___waitus
2ad04     60 B3 02 F6 | 	mov	local07, local14
2ad08     01 C0 8E F1 | 	sub	local14, #1 wz
2ad0c     D0 FF 9F 5D |  if_ne	jmp	#LR__4374
2ad10                 | LR__4375
2ad10     00 C0 0E F2 | 	cmp	local14, #0 wz
2ad14     38 00 90 AD |  if_e	jmp	#LR__4376
2ad18     3A 92 06 F6 | 	mov	arg01, #58
2ad1c     00 94 06 F6 | 	mov	arg02, #0
2ad20     0C 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2ad24     3D B3 02 F6 | 	mov	local07, result1
2ad28     07 B2 4E F7 | 	zerox	local07, #7 wz
2ad2c     20 00 90 5D |  if_ne	jmp	#LR__4376
2ad30     54 93 02 F6 | 	mov	arg01, local02
2ad34     04 94 06 F6 | 	mov	arg02, #4
2ad38     70 05 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2ad3c     54 C1 C2 FA | 	rdbyte	local14, local02
2ad40     40 C0 CE F7 | 	test	local14, #64 wz
2ad44     0C B2 06 56 |  if_ne	mov	local07, #12
2ad48     04 B2 06 A6 |  if_e	mov	local07, #4
2ad4c     59 BD 02 F6 | 	mov	local12, local07
2ad50                 | LR__4376
2ad50     14 C0 06 FB | 	rdlong	local14, #20
2ad54     F0 FA 02 FF 
2ad58     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2ad5c     5D B3 02 C6 |  if_b	mov	local07, local11
2ad60     1B B2 26 C4 |  if_b	bith	local07, #27
2ad64     59 BB 02 C6 |  if_b	mov	local11, local07
2ad68     10 00 90 CD |  if_b	jmp	#LR__4377
2ad6c     E1 F5 05 FF 
2ad70     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2ad74     80 00 04 CF 
2ad78     00 BA 46 C5 |  if_b	or	local11, ##134283264
2ad7c                 | LR__4377
2ad7c     F0 FA 02 FF 
2ad80     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2ad84     00 01 00 CF 
2ad88     04 B8 06 C6 |  if_b	mov	local10, ##131076
2ad8c     5C 01 90 CD |  if_b	jmp	#LR__4388
2ad90     68 78 04 FF 
2ad94     81 C1 16 F2 | 	cmp	local14, ##150000001 wc
2ad98     80 01 00 CF 
2ad9c     06 B8 06 C6 |  if_b	mov	local10, ##196614
2ada0     48 01 90 CD |  if_b	jmp	#LR__4388
2ada4     E1 F5 05 FF 
2ada8     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2adac     00 02 00 CF 
2adb0     08 B8 06 C6 |  if_b	mov	local10, ##262152
2adb4     34 01 90 CD |  if_b	jmp	#LR__4388
2adb8     59 73 07 FF 
2adbc     81 C0 16 F2 | 	cmp	local14, ##250000001 wc
2adc0     80 02 00 CF 
2adc4     0A B8 06 C6 |  if_b	mov	local10, ##327690
2adc8     20 01 90 CD |  if_b	jmp	#LR__4388
2adcc     00 03 00 FF 
2add0     0C B8 06 F6 | 	mov	local10, ##393228
2add4     14 01 90 FD | 	jmp	#LR__4388
2add8                 | LR__4378
2add8     A9 92 06 F6 | 	mov	arg01, #169
2addc     00 94 06 F6 | 	mov	arg02, #0
2ade0     4C 07 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2ade4     3D B3 E2 F8 | 	getbyte	local07, result1, #0
2ade8     02 B2 16 F2 | 	cmp	local07, #2 wc
2adec     02 BC 06 C6 |  if_b	mov	local12, #2
2adf0     A9 C2 06 C6 |  if_b	mov	local15, #169
2adf4     01 BC 06 36 |  if_ae	mov	local12, #1
2adf8     01 C2 06 36 |  if_ae	mov	local15, #1
2adfc                 | ' 				ty =  0x01 ; cmd =  (1) ;
2adfc                 | ' 			}
2adfc                 | ' 			for (tmr = 1000; tmr; tmr--) {
2adfc     01 00 00 FF 
2ae00     E8 C1 06 F6 | 	mov	local14, ##1000
2ae04                 | LR__4379
2ae04     61 93 02 F6 | 	mov	arg01, local15
2ae08     00 94 06 F6 | 	mov	arg02, #0
2ae0c     20 07 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2ae10     3D B3 02 F6 | 	mov	local07, result1
2ae14     07 B2 4E F7 | 	zerox	local07, #7 wz
2ae18     18 00 90 AD |  if_e	jmp	#LR__4380
2ae1c     01 00 00 FF 
2ae20     E8 93 06 F6 | 	mov	arg01, ##1000
2ae24     C8 9C BF FD | 	call	#__system___waitus
2ae28     60 B3 02 F6 | 	mov	local07, local14
2ae2c     01 C0 8E F1 | 	sub	local14, #1 wz
2ae30     D0 FF 9F 5D |  if_ne	jmp	#LR__4379
2ae34                 | LR__4380
2ae34     00 C0 0E F2 | 	cmp	local14, #0 wz
2ae38     18 00 90 AD |  if_e	jmp	#LR__4381
2ae3c     10 92 06 F6 | 	mov	arg01, #16
2ae40     09 94 C6 F9 | 	decod	arg02, #9
2ae44     E8 06 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2ae48     3D B3 02 F6 | 	mov	local07, result1
2ae4c     07 B2 4E F7 | 	zerox	local07, #7 wz
2ae50     04 00 90 AD |  if_e	jmp	#LR__4382
2ae54                 | LR__4381
2ae54     00 BC 06 F6 | 	mov	local12, #0
2ae58                 | LR__4382
2ae58     14 C0 06 FB | 	rdlong	local14, #20
2ae5c     F0 FA 02 FF 
2ae60     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2ae64     5D B3 02 C6 |  if_b	mov	local07, local11
2ae68     1B B2 26 C4 |  if_b	bith	local07, #27
2ae6c     59 BB 02 C6 |  if_b	mov	local11, local07
2ae70     10 00 90 CD |  if_b	jmp	#LR__4383
2ae74     E1 F5 05 FF 
2ae78     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2ae7c     80 00 04 CF 
2ae80     00 BA 46 C5 |  if_b	or	local11, ##134283264
2ae84                 | LR__4383
2ae84     F0 FA 02 FF 
2ae88     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2ae8c     00 01 00 CF 
2ae90     04 B8 06 C6 |  if_b	mov	local10, ##131076
2ae94     54 00 90 CD |  if_b	jmp	#LR__4387
2ae98     68 78 04 FF 
2ae9c     81 C1 16 F2 | 	cmp	local14, ##150000001 wc
2aea0     80 01 00 CF 
2aea4     06 B8 06 C6 |  if_b	mov	local10, ##196614
2aea8     40 00 90 CD |  if_b	jmp	#LR__4386
2aeac     E1 F5 05 FF 
2aeb0     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2aeb4     00 02 00 CF 
2aeb8     08 B8 06 C6 |  if_b	mov	local10, ##262152
2aebc     2C 00 90 CD |  if_b	jmp	#LR__4385
2aec0     59 73 07 FF 
2aec4     81 C0 16 F2 | 	cmp	local14, ##250000001 wc
2aec8     80 02 00 CF 
2aecc     0A B8 06 C6 |  if_b	mov	local10, ##327690
2aed0     18 00 90 CD |  if_b	jmp	#LR__4384
2aed4     D1 F0 08 FF 
2aed8     01 C1 16 F2 | 	cmp	local14, ##300000001 wc
2aedc     00 03 00 CF 
2aee0     0C B8 06 C6 |  if_b	mov	local10, ##393228
2aee4     80 03 00 3F 
2aee8     0E B8 06 36 |  if_ae	mov	local10, ##458766
2aeec                 | LR__4384
2aeec                 | LR__4385
2aeec                 | LR__4386
2aeec                 | LR__4387
2aeec                 | LR__4388
2aeec                 | LR__4389
2aeec     15 64 06 F1 | 	add	objptr, #21
2aef0     32 BD 42 FC | 	wrbyte	local12, objptr
2aef4     00 BC 0E F2 | 	cmp	local12, #0 wz
2aef8     00 B2 06 56 |  if_ne	mov	local07, #0
2aefc     01 B2 06 A6 |  if_e	mov	local07, #1
2af00     01 64 86 F1 | 	sub	objptr, #1
2af04     32 B3 42 FC | 	wrbyte	local07, objptr
2af08     14 64 86 F1 | 	sub	objptr, #20
2af0c     70 04 B0 FD | 	call	#_sdmm_cc_deselect_0858
2af10     55 B9 12 FC | 	wxpin	local10, local03
2af14     57 BB 02 FC | 	wrpin	local11, local05
2af18                 | ' #line 682 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2af18                 | ' 		}
2af18                 | ' 	}
2af18                 | ' #line 687 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2af18                 | ' 	CardType = ty;
2af18                 | ' 	s = ty ? 0 :  0x01 ;
2af18                 | ' 	Stat = s;
2af18                 | ' 
2af18                 | ' 	deselect();
2af18                 | ' 
2af18                 | ' 
2af18                 | ' 	_wxpin( PIN_CLK, ck_div );
2af18                 | ' 	_wrpin( PIN_DI, spm_tx );
2af18                 | ' #line 700 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2af18                 | ' 	return s;
2af18     59 7B 02 F6 | 	mov	result1, local07
2af1c                 | LR__4390
2af1c     E7 F0 03 F6 | 	mov	ptra, fp
2af20     F2 00 A0 FD | 	call	#popregs_
2af24                 | _sdmm_cc_disk_initialize_ret
2af24     2D 00 64 FD | 	ret
2af28                 | 
2af28                 | _sdmm_cc_disk_read
2af28     05 CA 05 F6 | 	mov	COUNT_, #5
2af2c     E8 00 A0 FD | 	call	#pushregs_
2af30     4A A7 02 F6 | 	mov	local01, arg02
2af34     4B A9 02 F6 | 	mov	local02, arg03
2af38     4C AB 02 F6 | 	mov	local03, arg04
2af3c     00 92 0E F2 | 	cmp	arg01, #0 wz
2af40     01 7A 06 56 |  if_ne	mov	result1, #1
2af44                 | ' 
2af44                 | ' 	return Stat;
2af44     14 64 06 A1 |  if_e	add	objptr, #20
2af48     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2af4c     14 64 86 A1 |  if_e	sub	objptr, #20
2af50     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2af54     01 7A CE F7 | 	test	result1, #1 wz
2af58     03 7A 06 56 |  if_ne	mov	result1, #3
2af5c     7C 00 90 5D |  if_ne	jmp	#LR__4402
2af60     15 64 06 F1 | 	add	objptr, #21
2af64     32 AD C2 FA | 	rdbyte	local04, objptr
2af68     15 64 86 F1 | 	sub	objptr, #21
2af6c     08 AC CE F7 | 	test	local04, #8 wz
2af70     09 A8 66 A0 |  if_e	shl	local02, #9
2af74     02 AA 16 F2 | 	cmp	local03, #2 wc
2af78     12 AC 06 36 |  if_ae	mov	local04, #18
2af7c     11 AC 06 C6 |  if_b	mov	local04, #17
2af80     54 95 02 F6 | 	mov	arg02, local02
2af84     56 93 02 F6 | 	mov	arg01, local04
2af88     A4 05 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2af8c     3D AF 02 F6 | 	mov	local05, result1
2af90     07 AE 4E F7 | 	zerox	local05, #7 wz
2af94     30 00 90 5D |  if_ne	jmp	#LR__4401
2af98                 | ' 		do {
2af98                 | LR__4400
2af98     53 93 02 F6 | 	mov	arg01, local01
2af9c     09 94 C6 F9 | 	decod	arg02, #9
2afa0     7C 04 B0 FD | 	call	#_sdmm_cc_rcvr_datablock_0866
2afa4     00 7A 0E F2 | 	cmp	result1, #0 wz
2afa8     01 00 00 5F 
2afac     00 A6 06 51 |  if_ne	add	local01, ##512
2afb0     F9 AB 6E 5B |  if_ne	djnz	local03, #LR__4400
2afb4     56 AD E2 F8 | 	getbyte	local04, local04, #0
2afb8     12 AC 0E F2 | 	cmp	local04, #18 wz
2afbc     0C 92 06 A6 |  if_e	mov	arg01, #12
2afc0     00 94 06 A6 |  if_e	mov	arg02, #0
2afc4     68 05 B0 AD |  if_e	call	#_sdmm_cc_send_cmd_0871
2afc8                 | LR__4401
2afc8     B4 03 B0 FD | 	call	#_sdmm_cc_deselect_0858
2afcc                 | ' 	}
2afcc                 | ' 	deselect();
2afcc                 | ' 
2afcc                 | ' 	return count ? RES_ERROR : RES_OK;
2afcc     00 AA 0E F2 | 	cmp	local03, #0 wz
2afd0     01 AE 06 56 |  if_ne	mov	local05, #1
2afd4     00 AE 06 A6 |  if_e	mov	local05, #0
2afd8     57 7B 02 F6 | 	mov	result1, local05
2afdc                 | LR__4402
2afdc     E7 F0 03 F6 | 	mov	ptra, fp
2afe0     F2 00 A0 FD | 	call	#popregs_
2afe4                 | _sdmm_cc_disk_read_ret
2afe4     2D 00 64 FD | 	ret
2afe8                 | 
2afe8                 | _sdmm_cc_disk_write
2afe8     04 CA 05 F6 | 	mov	COUNT_, #4
2afec     E8 00 A0 FD | 	call	#pushregs_
2aff0     4A A7 02 F6 | 	mov	local01, arg02
2aff4     4C A9 02 F6 | 	mov	local02, arg04
2aff8     4B AB 02 F6 | 	mov	local03, arg03
2affc     00 92 0E F2 | 	cmp	arg01, #0 wz
2b000     01 7A 06 56 |  if_ne	mov	result1, #1
2b004                 | ' 
2b004                 | ' 	return Stat;
2b004     14 64 06 A1 |  if_e	add	objptr, #20
2b008     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2b00c     14 64 86 A1 |  if_e	sub	objptr, #20
2b010     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b014     01 7A CE F7 | 	test	result1, #1 wz
2b018     03 7A 06 56 |  if_ne	mov	result1, #3
2b01c     C4 00 90 5D |  if_ne	jmp	#LR__4414
2b020     15 64 06 F1 | 	add	objptr, #21
2b024     32 97 C2 FA | 	rdbyte	arg03, objptr
2b028     15 64 86 F1 | 	sub	objptr, #21
2b02c     08 96 CE F7 | 	test	arg03, #8 wz
2b030     09 AA 66 A0 |  if_e	shl	local03, #9
2b034     01 A8 0E F2 | 	cmp	local02, #1 wz
2b038     30 00 90 5D |  if_ne	jmp	#LR__4410
2b03c     18 92 06 F6 | 	mov	arg01, #24
2b040     55 95 02 F6 | 	mov	arg02, local03
2b044     E8 04 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b048     3D AD 02 F6 | 	mov	local04, result1
2b04c     07 AC 4E F7 | 	zerox	local04, #7 wz
2b050     7C 00 90 5D |  if_ne	jmp	#LR__4413
2b054     53 93 02 F6 | 	mov	arg01, local01
2b058     FE 94 06 F6 | 	mov	arg02, #254
2b05c     44 04 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b060     00 7A 0E F2 | 	cmp	result1, #0 wz
2b064     00 A8 06 56 |  if_ne	mov	local02, #0
2b068     64 00 90 FD | 	jmp	#LR__4413
2b06c                 | LR__4410
2b06c     15 64 06 F1 | 	add	objptr, #21
2b070     32 AD C2 FA | 	rdbyte	local04, objptr
2b074     15 64 86 F1 | 	sub	objptr, #21
2b078     06 AC CE F7 | 	test	local04, #6 wz
2b07c     97 92 06 56 |  if_ne	mov	arg01, #151
2b080     54 95 02 56 |  if_ne	mov	arg02, local02
2b084     A8 04 B0 5D |  if_ne	call	#_sdmm_cc_send_cmd_0871
2b088     55 95 02 F6 | 	mov	arg02, local03
2b08c     19 92 06 F6 | 	mov	arg01, #25
2b090     9C 04 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b094     3D AD 02 F6 | 	mov	local04, result1
2b098     07 AC 4E F7 | 	zerox	local04, #7 wz
2b09c     30 00 90 5D |  if_ne	jmp	#LR__4412
2b0a0                 | ' 			do {
2b0a0                 | LR__4411
2b0a0     53 93 02 F6 | 	mov	arg01, local01
2b0a4     FC 94 06 F6 | 	mov	arg02, #252
2b0a8     F8 03 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b0ac     00 7A 0E F2 | 	cmp	result1, #0 wz
2b0b0     01 00 00 5F 
2b0b4     00 A6 06 51 |  if_ne	add	local01, ##512
2b0b8     F9 A9 6E 5B |  if_ne	djnz	local02, #LR__4411
2b0bc     00 92 06 F6 | 	mov	arg01, #0
2b0c0     FD 94 06 F6 | 	mov	arg02, #253
2b0c4     DC 03 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b0c8     00 7A 0E F2 | 	cmp	result1, #0 wz
2b0cc     01 A8 06 A6 |  if_e	mov	local02, #1
2b0d0                 | LR__4412
2b0d0                 | LR__4413
2b0d0     AC 02 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b0d4                 | ' 				count = 1;
2b0d4                 | ' 		}
2b0d4                 | ' 	}
2b0d4                 | ' 	deselect();
2b0d4                 | ' 
2b0d4                 | ' 	return count ? RES_ERROR : RES_OK;
2b0d4     00 A8 0E F2 | 	cmp	local02, #0 wz
2b0d8     01 AC 06 56 |  if_ne	mov	local04, #1
2b0dc     00 AC 06 A6 |  if_e	mov	local04, #0
2b0e0     56 7B 02 F6 | 	mov	result1, local04
2b0e4                 | LR__4414
2b0e4     E7 F0 03 F6 | 	mov	ptra, fp
2b0e8     F2 00 A0 FD | 	call	#popregs_
2b0ec                 | _sdmm_cc_disk_write_ret
2b0ec     2D 00 64 FD | 	ret
2b0f0                 | 
2b0f0                 | _sdmm_cc_disk_ioctl
2b0f0     06 CA 05 F6 | 	mov	COUNT_, #6
2b0f4     E8 00 A0 FD | 	call	#pushregs_
2b0f8     30 F0 07 F1 | 	add	ptra, #48
2b0fc     4A A7 02 F6 | 	mov	local01, arg02
2b100     4B A9 02 F6 | 	mov	local02, arg03
2b104     00 92 0E F2 | 	cmp	arg01, #0 wz
2b108     01 7A 06 56 |  if_ne	mov	result1, #1
2b10c                 | ' 
2b10c                 | ' 	return Stat;
2b10c     14 64 06 A1 |  if_e	add	objptr, #20
2b110     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2b114     14 64 86 A1 |  if_e	sub	objptr, #20
2b118     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b11c     01 7A CE F7 | 	test	result1, #1 wz
2b120     03 7A 06 56 |  if_ne	mov	result1, #3
2b124     F4 00 90 5D |  if_ne	jmp	#LR__4427
2b128     01 AA 06 F6 | 	mov	local03, #1
2b12c                 | ' 
2b12c                 | ' 	res = RES_ERROR;
2b12c                 | ' 	switch (ctrl) {
2b12c     53 AD E2 F8 | 	getbyte	local04, local01, #0
2b130     04 AC 26 F3 | 	fle	local04, #4
2b134     30 AC 62 FD | 	jmprel	local04
2b138                 | LR__4420
2b138     10 00 90 FD | 	jmp	#LR__4421
2b13c     1C 00 90 FD | 	jmp	#LR__4422
2b140     CC 00 90 FD | 	jmp	#LR__4425
2b144     BC 00 90 FD | 	jmp	#LR__4424
2b148     C4 00 90 FD | 	jmp	#LR__4425
2b14c                 | LR__4421
2b14c     6C 02 B0 FD | 	call	#_sdmm_cc_select_0862
2b150     00 7A 0E F2 | 	cmp	result1, #0 wz
2b154     00 AA 06 56 |  if_ne	mov	local03, #0
2b158                 | ' 			break;
2b158     B8 00 90 FD | 	jmp	#LR__4426
2b15c                 | LR__4422
2b15c     09 92 06 F6 | 	mov	arg01, #9
2b160     00 94 06 F6 | 	mov	arg02, #0
2b164     C8 03 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b168     3D AD 02 F6 | 	mov	local04, result1
2b16c     07 AC 4E F7 | 	zerox	local04, #7 wz
2b170     A0 00 90 5D |  if_ne	jmp	#LR__4426
2b174     E7 92 02 F6 | 	mov	arg01, fp
2b178     18 92 06 F1 | 	add	arg01, #24
2b17c     10 94 06 F6 | 	mov	arg02, #16
2b180     9C 02 B0 FD | 	call	#_sdmm_cc_rcvr_datablock_0866
2b184     00 7A 0E F2 | 	cmp	result1, #0 wz
2b188     88 00 90 AD |  if_e	jmp	#LR__4426
2b18c     E7 92 02 F6 | 	mov	arg01, fp
2b190     18 92 06 F1 | 	add	arg01, #24
2b194     49 7B 02 F6 | 	mov	result1, arg01
2b198     06 92 06 F1 | 	add	arg01, #6
2b19c     49 AF 02 FB | 	rdlong	local05, arg01
2b1a0     1B AE FE F9 | 	movbyts	local05, #27
2b1a4     3D 93 C2 FA | 	rdbyte	arg01, result1
2b1a8     06 92 46 F0 | 	shr	arg01, #6
2b1ac     01 92 0E F2 | 	cmp	arg01, #1 wz
2b1b0     36 AF 06 A4 |  if_e	bitl	local05, #310
2b1b4     01 AE 06 A1 |  if_e	add	local05, #1
2b1b8     0A B0 06 A6 |  if_e	mov	local06, #10
2b1bc     34 00 90 AD |  if_e	jmp	#LR__4423
2b1c0     0E AE 46 F0 | 	shr	local05, #14
2b1c4     0B AE 46 F7 | 	zerox	local05, #11
2b1c8     01 AE 06 F1 | 	add	local05, #1
2b1cc     05 7A 06 F1 | 	add	result1, #5
2b1d0     3D B1 C2 FA | 	rdbyte	local06, result1
2b1d4     58 B1 42 F8 | 	getnib	local06, local06, #0
2b1d8     04 7A 06 F1 | 	add	result1, #4
2b1dc     3D 7B E2 FA | 	rdword	result1, result1
2b1e0     1B 7A FE F9 | 	movbyts	result1, #27
2b1e4     17 7A 46 F0 | 	shr	result1, #23
2b1e8     07 7A 06 F5 | 	and	result1, #7
2b1ec     3D B1 02 F1 | 	add	local06, result1
2b1f0     07 B0 86 F1 | 	sub	local06, #7
2b1f4                 | LR__4423
2b1f4                 | '         cs = (LBA_t)(cs>>14 & 0xfff)+1;
2b1f4                 | '         n = (csd[5] & 15) + (__builtin_bswap32(*(uint16_t*)(&csd[9]))>>23 & 0x7)+(2-9);
2b1f4                 | '     }
2b1f4                 | '     return (LBA_t)cs << n;
2b1f4     58 AF 62 F0 | 	shl	local05, local06
2b1f8     54 AF 62 FC | 	wrlong	local05, local02
2b1fc     00 AA 06 F6 | 	mov	local03, #0
2b200                 | '                			*(LBA_t*)buff = disc_size(csd);
2b200                 | ' 				res = RES_OK;
2b200                 | ' 			}
2b200                 | ' 			break;
2b200     10 00 90 FD | 	jmp	#LR__4426
2b204                 | LR__4424
2b204     54 01 69 FC | 	wrlong	#128, local02
2b208     00 AA 06 F6 | 	mov	local03, #0
2b20c                 | ' 			*(DWORD*)buff = 128;
2b20c                 | ' 			res = RES_OK;
2b20c                 | ' 			break;
2b20c     04 00 90 FD | 	jmp	#LR__4426
2b210                 | LR__4425
2b210     04 AA 06 F6 | 	mov	local03, #4
2b214                 | LR__4426
2b214     68 01 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b218                 | ' 			res = RES_PARERR;
2b218                 | ' 	}
2b218                 | ' 
2b218                 | ' 	deselect();
2b218                 | ' 
2b218                 | ' 	return res;
2b218     55 7B 02 F6 | 	mov	result1, local03
2b21c                 | LR__4427
2b21c     E7 F0 03 F6 | 	mov	ptra, fp
2b220     F2 00 A0 FD | 	call	#popregs_
2b224                 | _sdmm_cc_disk_ioctl_ret
2b224     2D 00 64 FD | 	ret
2b228                 | 
2b228                 | _sdmm_cc_xmit_mmc_0841
2b228     32 81 02 FB | 	rdlong	_var01, objptr
2b22c     08 64 06 F1 | 	add	objptr, #8
2b230     32 83 02 FB | 	rdlong	_var02, objptr
2b234     08 64 86 F1 | 	sub	objptr, #8
2b238     40 82 62 FD | 	dirl	_var02
2b23c     28 02 64 FD | 	setq	#1
2b240     49 85 02 FB | 	rdlong	_var03, arg01
2b244     69 84 62 FD | 	rev	_var03
2b248     1B 84 FE F9 | 	movbyts	_var03, #27
2b24c     41 85 22 FC | 	wypin	_var03, _var02
2b250     4A 85 02 F6 | 	mov	_var03, arg02
2b254     02 94 4E F0 | 	shr	arg02, #2 wz
2b258     03 84 66 F0 | 	shl	_var03, #3
2b25c     40 85 22 FC | 	wypin	_var03, _var01
2b260     41 82 62 FD | 	dirh	_var02
2b264     08 92 06 F1 | 	add	arg01, #8
2b268     69 86 62 FD | 	rev	_var04
2b26c     1B 86 FE F9 | 	movbyts	_var04, #27
2b270                 | LR__4430
2b270     41 87 22 5C |  if_ne	wypin	_var04, _var02
2b274     49 87 02 5B |  if_ne	rdlong	_var04, arg01
2b278     04 92 06 51 |  if_ne	add	arg01, #4
2b27c     69 86 62 5D |  if_ne	rev	_var04
2b280     1B 86 FE 59 |  if_ne	movbyts	_var04, #27
2b284                 | LR__4431
2b284     40 82 72 5D |  if_ne	testp	_var02 wc
2b288     F8 FF 9F 1D |  if_a	jmp	#LR__4431
2b28c     F8 95 6E 5B |  if_ne	djnz	arg02, #LR__4430
2b290                 | LR__4432
2b290     40 80 72 FD | 	testp	_var01 wc
2b294     F8 FF 9F 3D |  if_ae	jmp	#LR__4432
2b298     40 82 62 FD | 	dirl	_var02
2b29c     FF FF FF FF 
2b2a0     41 FF 2B FC | 	wypin	##-1, _var02
2b2a4     41 82 62 FD | 	dirh	_var02
2b2a8                 | _sdmm_cc_xmit_mmc_0841_ret
2b2a8     2D 00 64 FD | 	ret
2b2ac                 | 
2b2ac                 | _sdmm_cc_rcvr_mmc_0848
2b2ac     32 81 02 FB | 	rdlong	_var01, objptr
2b2b0     0C 64 06 F1 | 	add	objptr, #12
2b2b4     32 83 02 FB | 	rdlong	_var02, objptr
2b2b8     0C 64 86 F1 | 	sub	objptr, #12
2b2bc     41 03 08 FC | 	akpin	_var02
2b2c0     4A 85 0A F6 | 	mov	_var03, arg02 wz
2b2c4     02 84 4E F0 | 	shr	_var03, #2 wz
2b2c8     30 00 90 AD |  if_e	jmp	#LR__4442
2b2cc     42 87 02 F6 | 	mov	_var04, _var03
2b2d0     05 86 66 F0 | 	shl	_var04, #5
2b2d4     40 87 22 FC | 	wypin	_var04, _var01
2b2d8     41 7F 18 FC | 	wxpin	#63, _var02
2b2dc                 | LR__4440
2b2dc                 | LR__4441
2b2dc     40 82 72 FD | 	testp	_var02 wc
2b2e0     F8 FF 9F 3D |  if_ae	jmp	#LR__4441
2b2e4     41 87 8A FA | 	rdpin	_var04, _var02
2b2e8     69 86 62 FD | 	rev	_var04
2b2ec     1B 86 FE F9 | 	movbyts	_var04, #27
2b2f0     49 87 62 FC | 	wrlong	_var04, arg01
2b2f4     04 92 06 F1 | 	add	arg01, #4
2b2f8     F8 85 6E FB | 	djnz	_var03, #LR__4440
2b2fc                 | LR__4442
2b2fc     03 94 0E F5 | 	and	arg02, #3 wz
2b300     24 00 90 AD |  if_e	jmp	#LR__4445
2b304     41 4F 18 FC | 	wxpin	#39, _var02
2b308                 | LR__4443
2b308     40 11 28 FC | 	wypin	#8, _var01
2b30c                 | LR__4444
2b30c     40 82 72 FD | 	testp	_var02 wc
2b310     F8 FF 9F 3D |  if_ae	jmp	#LR__4444
2b314     41 87 8A FA | 	rdpin	_var04, _var02
2b318     69 86 62 FD | 	rev	_var04
2b31c     49 87 42 FC | 	wrbyte	_var04, arg01
2b320     01 92 06 F1 | 	add	arg01, #1
2b324     F8 95 6E FB | 	djnz	arg02, #LR__4443
2b328                 | LR__4445
2b328                 | _sdmm_cc_rcvr_mmc_0848_ret
2b328     2D 00 64 FD | 	ret
2b32c                 | 
2b32c                 | _sdmm_cc_wait_ready_0852
2b32c     03 CA 05 F6 | 	mov	COUNT_, #3
2b330     E8 00 A0 FD | 	call	#pushregs_
2b334     F8 A7 02 F6 | 	mov	local01, ptra
2b338     1A A8 62 FD | 	getct	local02
2b33c     14 AA 06 FB | 	rdlong	local03, #20
2b340     01 AA 46 F0 | 	shr	local03, #1
2b344                 | ' 	UINT tmr, tmout;
2b344                 | ' 
2b344                 | ' 	tmr = _cnt();
2b344                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2b344                 | ' 	for(;;) {
2b344     04 F0 07 F1 | 	add	ptra, #4
2b348                 | LR__4450
2b348     53 93 02 F6 | 	mov	arg01, local01
2b34c     01 94 06 F6 | 	mov	arg02, #1
2b350     58 FF BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b354     53 95 C2 FA | 	rdbyte	arg02, local01
2b358     FF 94 0E F2 | 	cmp	arg02, #255 wz
2b35c     01 7A 06 A6 |  if_e	mov	result1, #1
2b360     1A 7A 62 5D |  if_ne	getct	result1
2b364     54 7B 82 51 |  if_ne	sub	result1, local02
2b368     55 7B 12 52 |  if_ne	cmp	result1, local03 wc
2b36c     00 7A 06 16 |  if_a	mov	result1, #0
2b370     D4 FF 9F 4D |  if_c_and_nz	jmp	#LR__4450
2b374     E7 F0 03 F6 | 	mov	ptra, fp
2b378     F2 00 A0 FD | 	call	#popregs_
2b37c                 | _sdmm_cc_wait_ready_0852_ret
2b37c     2D 00 64 FD | 	ret
2b380                 | 
2b380                 | _sdmm_cc_deselect_0858
2b380     00 CA 05 F6 | 	mov	COUNT_, #0
2b384     E8 00 A0 FD | 	call	#pushregs_
2b388     F8 95 02 F6 | 	mov	arg02, ptra
2b38c     04 64 06 F1 | 	add	objptr, #4
2b390     32 93 02 FB | 	rdlong	arg01, objptr
2b394     04 64 86 F1 | 	sub	objptr, #4
2b398     04 F0 07 F1 | 	add	ptra, #4
2b39c     59 92 62 FD | 	drvh	arg01
2b3a0     1F 20 64 FD | 	waitx	#16
2b3a4     4A 93 02 F6 | 	mov	arg01, arg02
2b3a8     01 94 06 F6 | 	mov	arg02, #1
2b3ac     FC FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b3b0     E7 F0 03 F6 | 	mov	ptra, fp
2b3b4     F2 00 A0 FD | 	call	#popregs_
2b3b8                 | _sdmm_cc_deselect_0858_ret
2b3b8     2D 00 64 FD | 	ret
2b3bc                 | 
2b3bc                 | _sdmm_cc_select_0862
2b3bc     01 CA 05 F6 | 	mov	COUNT_, #1
2b3c0     E8 00 A0 FD | 	call	#pushregs_
2b3c4     F8 95 02 F6 | 	mov	arg02, ptra
2b3c8     04 64 06 F1 | 	add	objptr, #4
2b3cc     32 93 02 FB | 	rdlong	arg01, objptr
2b3d0     08 64 06 F1 | 	add	objptr, #8
2b3d4     32 A7 02 FB | 	rdlong	local01, objptr
2b3d8     0C 64 86 F1 | 	sub	objptr, #12
2b3dc     04 F0 07 F1 | 	add	ptra, #4
2b3e0     50 A6 62 FD | 	fltl	local01
2b3e4     58 92 62 FD | 	drvl	arg01
2b3e8     1F 20 64 FD | 	waitx	#16
2b3ec     41 A6 62 FD | 	dirh	local01
2b3f0     4A 93 02 F6 | 	mov	arg01, arg02
2b3f4     01 94 06 F6 | 	mov	arg02, #1
2b3f8     B0 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b3fc     2C FF BF FD | 	call	#_sdmm_cc_wait_ready_0852
2b400     00 7A 0E F2 | 	cmp	result1, #0 wz
2b404     01 7A 06 56 |  if_ne	mov	result1, #1
2b408     08 00 90 5D |  if_ne	jmp	#LR__4460
2b40c     70 FF BF FD | 	call	#_sdmm_cc_deselect_0858
2b410                 | ' 
2b410                 | ' 	deselect();
2b410                 | ' 	return 0;
2b410     00 7A 06 F6 | 	mov	result1, #0
2b414                 | LR__4460
2b414     E7 F0 03 F6 | 	mov	ptra, fp
2b418     F2 00 A0 FD | 	call	#popregs_
2b41c                 | _sdmm_cc_select_0862_ret
2b41c     2D 00 64 FD | 	ret
2b420                 | 
2b420                 | _sdmm_cc_rcvr_datablock_0866
2b420     05 CA 05 F6 | 	mov	COUNT_, #5
2b424     E8 00 A0 FD | 	call	#pushregs_
2b428     49 A7 02 F6 | 	mov	local01, arg01
2b42c     4A A9 02 F6 | 	mov	local02, arg02
2b430     F8 AB 02 F6 | 	mov	local03, ptra
2b434     1A AC 62 FD | 	getct	local04
2b438     14 AE 06 FB | 	rdlong	local05, #20
2b43c     03 AE 46 F0 | 	shr	local05, #3
2b440                 | ' 	UINT tmr, tmout;
2b440                 | ' 
2b440                 | ' 	tmr = _cnt();
2b440                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2b440                 | ' 	for(;;) {
2b440     04 F0 07 F1 | 	add	ptra, #4
2b444                 | LR__4470
2b444     55 93 02 F6 | 	mov	arg01, local03
2b448     01 94 06 F6 | 	mov	arg02, #1
2b44c     5C FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b450     55 95 C2 FA | 	rdbyte	arg02, local03
2b454     FF 94 0E F2 | 	cmp	arg02, #255 wz
2b458     1A 7A 62 AD |  if_e	getct	result1
2b45c     3D 95 02 A6 |  if_e	mov	arg02, result1
2b460     56 95 82 A1 |  if_e	sub	arg02, local04
2b464     57 95 12 A2 |  if_e	cmp	arg02, local05 wc
2b468     D8 FF 9F 8D |  if_c_and_z	jmp	#LR__4470
2b46c     55 AF C2 FA | 	rdbyte	local05, local03
2b470     FE AE 0E F2 | 	cmp	local05, #254 wz
2b474     00 7A 06 56 |  if_ne	mov	result1, #0
2b478     1C 00 90 5D |  if_ne	jmp	#LR__4471
2b47c     53 93 02 F6 | 	mov	arg01, local01
2b480     54 95 02 F6 | 	mov	arg02, local02
2b484     24 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b488     55 93 02 F6 | 	mov	arg01, local03
2b48c     02 94 06 F6 | 	mov	arg02, #2
2b490     18 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b494                 | ' 
2b494                 | ' 	rcvr_mmc(buff, btr);
2b494                 | ' 	rcvr_mmc(d, 2);
2b494                 | ' 
2b494                 | ' 	return 1;
2b494     01 7A 06 F6 | 	mov	result1, #1
2b498                 | LR__4471
2b498     E7 F0 03 F6 | 	mov	ptra, fp
2b49c     F2 00 A0 FD | 	call	#popregs_
2b4a0                 | _sdmm_cc_rcvr_datablock_0866_ret
2b4a0     2D 00 64 FD | 	ret
2b4a4                 | 
2b4a4                 | _sdmm_cc_xmit_datablock_0868
2b4a4     03 CA 05 F6 | 	mov	COUNT_, #3
2b4a8     E8 00 A0 FD | 	call	#pushregs_
2b4ac     49 A7 02 F6 | 	mov	local01, arg01
2b4b0     4A A9 02 F6 | 	mov	local02, arg02
2b4b4     F8 AB 02 F6 | 	mov	local03, ptra
2b4b8     04 F0 07 F1 | 	add	ptra, #4
2b4bc     6C FE BF FD | 	call	#_sdmm_cc_wait_ready_0852
2b4c0     00 7A 0E F2 | 	cmp	result1, #0 wz
2b4c4     00 7A 06 A6 |  if_e	mov	result1, #0
2b4c8     58 00 90 AD |  if_e	jmp	#LR__4481
2b4cc     55 A9 42 FC | 	wrbyte	local02, local03
2b4d0     55 93 02 F6 | 	mov	arg01, local03
2b4d4     01 94 06 F6 | 	mov	arg02, #1
2b4d8     4C FD BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b4dc     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2b4e0     FD A8 0E F2 | 	cmp	local02, #253 wz
2b4e4     38 00 90 AD |  if_e	jmp	#LR__4480
2b4e8     53 93 02 F6 | 	mov	arg01, local01
2b4ec     09 94 C6 F9 | 	decod	arg02, #9
2b4f0     34 FD BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b4f4     55 93 02 F6 | 	mov	arg01, local03
2b4f8     02 94 06 F6 | 	mov	arg02, #2
2b4fc     AC FD BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b500     55 93 02 F6 | 	mov	arg01, local03
2b504     01 94 06 F6 | 	mov	arg02, #1
2b508     A0 FD BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b50c     55 AB C2 FA | 	rdbyte	local03, local03
2b510     1F AA 06 F5 | 	and	local03, #31
2b514     05 AA 0E F2 | 	cmp	local03, #5 wz
2b518                 | ' 			return 0;
2b518     00 7A 06 56 |  if_ne	mov	result1, #0
2b51c     04 00 90 5D |  if_ne	jmp	#LR__4481
2b520                 | LR__4480
2b520                 | ' 	}
2b520                 | ' 
2b520                 | ' 	return 1;
2b520     01 7A 06 F6 | 	mov	result1, #1
2b524                 | LR__4481
2b524     E7 F0 03 F6 | 	mov	ptra, fp
2b528     F2 00 A0 FD | 	call	#popregs_
2b52c                 | _sdmm_cc_xmit_datablock_0868_ret
2b52c     2D 00 64 FD | 	ret
2b530                 | 
2b530                 | _sdmm_cc_send_cmd_0871
2b530     04 CA 05 F6 | 	mov	COUNT_, #4
2b534     E8 00 A0 FD | 	call	#pushregs_
2b538                 | _sdmm_cc_send_cmd_0871_enter
2b538     49 A7 02 F6 | 	mov	local01, arg01
2b53c     4A A9 02 F6 | 	mov	local02, arg02
2b540     F8 AB 02 F6 | 	mov	local03, ptra
2b544     53 7B E2 F8 | 	getbyte	result1, local01, #0
2b548     80 7A CE F7 | 	test	result1, #128 wz
2b54c     08 F0 07 F1 | 	add	ptra, #8
2b550     20 00 90 AD |  if_e	jmp	#LR__4490
2b554     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2b558     7F A6 06 F5 | 	and	local01, #127
2b55c     37 92 06 F6 | 	mov	arg01, #55
2b560     00 94 06 F6 | 	mov	arg02, #0
2b564     C8 FF BF FD | 	call	#_sdmm_cc_send_cmd_0871
2b568     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
2b56c     02 94 16 F2 | 	cmp	arg02, #2 wc
2b570     BC 00 90 3D |  if_ae	jmp	#LR__4493
2b574                 | LR__4490
2b574     53 7B E2 F8 | 	getbyte	result1, local01, #0
2b578     0C 7A 0E F2 | 	cmp	result1, #12 wz
2b57c     14 00 90 AD |  if_e	jmp	#LR__4491
2b580     FC FD BF FD | 	call	#_sdmm_cc_deselect_0858
2b584     34 FE BF FD | 	call	#_sdmm_cc_select_0862
2b588     00 7A 0E F2 | 	cmp	result1, #0 wz
2b58c     FF 7A 06 A6 |  if_e	mov	result1, #255
2b590     9C 00 90 AD |  if_e	jmp	#LR__4493
2b594                 | LR__4491
2b594     53 95 E2 F8 | 	getbyte	arg02, local01, #0
2b598     40 7A 06 F6 | 	mov	result1, #64
2b59c     4A 7B 42 F5 | 	or	result1, arg02
2b5a0     55 7B 42 FC | 	wrbyte	result1, local03
2b5a4     55 95 02 F6 | 	mov	arg02, local03
2b5a8     01 94 06 F1 | 	add	arg02, #1
2b5ac     1B A8 FE F9 | 	movbyts	local02, #27
2b5b0     4A A9 62 FC | 	wrlong	local02, arg02
2b5b4     01 AC 06 F6 | 	mov	local04, #1
2b5b8     53 A9 02 F6 | 	mov	local02, local01
2b5bc     07 A8 4E F7 | 	zerox	local02, #7 wz
2b5c0     95 AC 06 A6 |  if_e	mov	local04, #149
2b5c4     53 A9 E2 F8 | 	getbyte	local02, local01, #0
2b5c8     08 A8 0E F2 | 	cmp	local02, #8 wz
2b5cc     87 AC 06 A6 |  if_e	mov	local04, #135
2b5d0     05 AA 06 F1 | 	add	local03, #5
2b5d4     55 AD 42 FC | 	wrbyte	local04, local03
2b5d8     05 AA 86 F1 | 	sub	local03, #5
2b5dc     55 93 02 F6 | 	mov	arg01, local03
2b5e0     06 94 06 F6 | 	mov	arg02, #6
2b5e4     40 FC BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b5e8     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2b5ec     0C A6 0E F2 | 	cmp	local01, #12 wz
2b5f0     55 93 02 A6 |  if_e	mov	arg01, local03
2b5f4     06 92 06 A1 |  if_e	add	arg01, #6
2b5f8     01 94 06 A6 |  if_e	mov	arg02, #1
2b5fc     AC FC BF AD |  if_e	call	#_sdmm_cc_rcvr_mmc_0848
2b600     0A AC 06 F6 | 	mov	local04, #10
2b604                 | ' 	n = 10;
2b604                 | ' 	do
2b604                 | LR__4492
2b604     55 93 02 F6 | 	mov	arg01, local03
2b608     06 92 06 F1 | 	add	arg01, #6
2b60c     01 94 06 F6 | 	mov	arg02, #1
2b610     98 FC BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b614     06 AA 06 F1 | 	add	local03, #6
2b618     55 A9 C2 FA | 	rdbyte	local02, local03
2b61c     06 AA 86 F1 | 	sub	local03, #6
2b620     80 A8 CE F7 | 	test	local02, #128 wz
2b624     F7 AD 6E 5B |  if_ne	djnz	local04, #LR__4492
2b628                 | ' 
2b628                 | ' 	return buf[6];
2b628     06 AA 06 F1 | 	add	local03, #6
2b62c     55 7B C2 FA | 	rdbyte	result1, local03
2b630                 | LR__4493
2b630     E7 F0 03 F6 | 	mov	ptra, fp
2b634     F2 00 A0 FD | 	call	#popregs_
2b638                 | _sdmm_cc_send_cmd_0871_ret
2b638     2D 00 64 FD | 	ret
2b63c                 | 
2b63c                 | _sdmm_cc_disk_setpins
2b63c     00 92 0E F2 | 	cmp	arg01, #0 wz
2b640     01 7A 66 56 |  if_ne	neg	result1, #1
2b644     24 00 90 5D |  if_ne	jmp	#_sdmm_cc_disk_setpins_ret
2b648     32 95 62 FC | 	wrlong	arg02, objptr
2b64c     04 64 06 F1 | 	add	objptr, #4
2b650     32 97 62 FC | 	wrlong	arg03, objptr
2b654     04 64 06 F1 | 	add	objptr, #4
2b658     32 99 62 FC | 	wrlong	arg04, objptr
2b65c     04 64 06 F1 | 	add	objptr, #4
2b660     32 9B 62 FC | 	wrlong	arg05, objptr
2b664     0C 64 86 F1 | 	sub	objptr, #12
2b668                 | '     _pin_clk = pclk;
2b668                 | '     _pin_ss = pss;
2b668                 | '     _pin_di = pdi;
2b668                 | '     _pin_do = pdo;
2b668                 | ' #line 848 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2b668                 | '     return 0;
2b668     00 7A 06 F6 | 	mov	result1, #0
2b66c                 | _sdmm_cc_disk_setpins_ret
2b66c     2D 00 64 FD | 	ret
2b670                 | 
2b670                 | _sdmm_cc_disk_deinitialize
2b670     04 CA 05 F6 | 	mov	COUNT_, #4
2b674     E8 00 A0 FD | 	call	#pushregs_
2b678     00 92 4E F2 | 	cmps	arg01, #0 wz
2b67c     32 A7 02 FB | 	rdlong	local01, objptr
2b680     04 64 06 F1 | 	add	objptr, #4
2b684     32 A9 02 FB | 	rdlong	local02, objptr
2b688     04 64 06 F1 | 	add	objptr, #4
2b68c     32 AB 02 FB | 	rdlong	local03, objptr
2b690     08 64 06 F1 | 	add	objptr, #8
2b694     32 AD 02 FB | 	rdlong	local04, objptr
2b698     04 64 86 F1 | 	sub	objptr, #4
2b69c     32 93 02 FB | 	rdlong	arg01, objptr
2b6a0     0C 64 86 F1 | 	sub	objptr, #12
2b6a4                 | ' #line 865 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2b6a4                 | '         return RES_NOTRDY;
2b6a4     03 7A 06 56 |  if_ne	mov	result1, #3
2b6a8     34 00 90 5D |  if_ne	jmp	#LR__4500
2b6ac     50 92 62 FD | 	fltl	arg01
2b6b0     49 01 08 FC | 	wrpin	#0, arg01
2b6b4     50 AC 62 FD | 	fltl	local04
2b6b8     56 01 08 FC | 	wrpin	#0, local04
2b6bc     50 AA 62 FD | 	fltl	local03
2b6c0     55 01 08 FC | 	wrpin	#0, local03
2b6c4     50 A6 62 FD | 	fltl	local01
2b6c8     53 01 08 FC | 	wrpin	#0, local01
2b6cc     50 A8 62 FD | 	fltl	local02
2b6d0     54 01 08 FC | 	wrpin	#0, local02
2b6d4     0A 92 06 F6 | 	mov	arg01, #10
2b6d8     A8 93 BF FD | 	call	#__system___waitms
2b6dc                 | '     }
2b6dc                 | ' #line 871 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/block/sdmm.cc"
2b6dc                 | '     _pinclear(SMPIN_DO);
2b6dc                 | '     _pinclear(PIN_DO);
2b6dc                 | '     _pinclear(PIN_DI);
2b6dc                 | '     _pinclear(PIN_CLK);
2b6dc                 | '     _pinclear(PIN_SS);
2b6dc                 | ' 
2b6dc                 | '     _waitms(10);
2b6dc                 | ' 
2b6dc                 | '     return 0;
2b6dc     00 7A 06 F6 | 	mov	result1, #0
2b6e0                 | LR__4500
2b6e0     E7 F0 03 F6 | 	mov	ptra, fp
2b6e4     F2 00 A0 FD | 	call	#popregs_
2b6e8                 | _sdmm_cc_disk_deinitialize_ret
2b6e8     2D 00 64 FD | 	ret
2b6ec                 | 
2b6ec                 | _sdmm_cc_v_do_io
2b6ec     08 CA 05 F6 | 	mov	COUNT_, #8
2b6f0     E8 00 A0 FD | 	call	#pushregs_
2b6f4     4B A7 02 F6 | 	mov	local01, arg03
2b6f8     4C A9 02 F6 | 	mov	local02, arg04
2b6fc     4A AB 02 F6 | 	mov	local03, arg02
2b700     18 64 06 F1 | 	add	objptr, #24
2b704     32 AD 02 FB | 	rdlong	local04, objptr
2b708     00 98 06 F6 | 	mov	arg04, #0
2b70c     FF AD 06 F5 | 	and	local04, #511
2b710     00 AE 06 F6 | 	mov	local05, #0
2b714     32 93 02 FB | 	rdlong	arg01, objptr
2b718     04 64 06 F1 | 	add	objptr, #4
2b71c     32 95 02 FB | 	rdlong	arg02, objptr
2b720     1C 64 86 F1 | 	sub	objptr, #28
2b724     09 96 06 F6 | 	mov	arg03, #9
2b728     7C B2 BF FD | 	call	#__system___int64_sar
2b72c     3D B1 02 F6 | 	mov	local06, result1
2b730     00 AC 0E F2 | 	cmp	local04, #0 wz
2b734                 | ' 
2b734                 | ' 
2b734                 | '         return -1;
2b734     01 7A 66 56 |  if_ne	neg	result1, #1
2b738     84 00 90 5D |  if_ne	jmp	#LR__4513
2b73c     53 B3 02 F6 | 	mov	local07, local01
2b740     09 B2 46 F0 | 	shr	local07, #9
2b744     00 A8 0E F2 | 	cmp	local02, #0 wz
2b748     1C 00 90 AD |  if_e	jmp	#LR__4510
2b74c     00 92 06 F6 | 	mov	arg01, #0
2b750     55 95 02 F6 | 	mov	arg02, local03
2b754     58 97 02 F6 | 	mov	arg03, local06
2b758     59 99 02 F6 | 	mov	arg04, local07
2b75c     88 F8 BF FD | 	call	#_sdmm_cc_disk_write
2b760     3D B5 02 F6 | 	mov	local08, result1
2b764     18 00 90 FD | 	jmp	#LR__4511
2b768                 | LR__4510
2b768     00 92 06 F6 | 	mov	arg01, #0
2b76c     55 95 02 F6 | 	mov	arg02, local03
2b770     58 97 02 F6 | 	mov	arg03, local06
2b774     59 99 02 F6 | 	mov	arg04, local07
2b778     AC F7 BF FD | 	call	#_sdmm_cc_disk_read
2b77c     3D B5 02 F6 | 	mov	local08, result1
2b780                 | LR__4511
2b780     00 B4 0E F2 | 	cmp	local08, #0 wz
2b784     34 00 90 5D |  if_ne	jmp	#LR__4512
2b788     09 B2 66 F0 | 	shl	local07, #9
2b78c     59 AF 02 F1 | 	add	local05, local07
2b790     18 64 06 F1 | 	add	objptr, #24
2b794     32 7B 02 FB | 	rdlong	result1, objptr
2b798     04 64 06 F1 | 	add	objptr, #4
2b79c     32 7D 02 FB | 	rdlong	result2, objptr
2b7a0     59 7B 12 F1 | 	add	result1, local07 wc
2b7a4     00 7C 26 F1 | 	addx	result2, #0
2b7a8     04 64 86 F1 | 	sub	objptr, #4
2b7ac     32 7B 62 FC | 	wrlong	result1, objptr
2b7b0     04 64 06 F1 | 	add	objptr, #4
2b7b4     32 7D 62 FC | 	wrlong	result2, objptr
2b7b8     1C 64 86 F1 | 	sub	objptr, #28
2b7bc                 | LR__4512
2b7bc                 | ' 
2b7bc                 | ' 
2b7bc                 | '     }
2b7bc                 | '     return bytes_io;
2b7bc     57 7B 02 F6 | 	mov	result1, local05
2b7c0                 | LR__4513
2b7c0     E7 F0 03 F6 | 	mov	ptra, fp
2b7c4     F2 00 A0 FD | 	call	#popregs_
2b7c8                 | _sdmm_cc_v_do_io_ret
2b7c8     2D 00 64 FD | 	ret
2b7cc                 | 
2b7cc                 | _sdmm_cc_v_read
2b7cc                 | ' {
2b7cc                 | '     return v_do_io(fil, buf, count,  (0) );
2b7cc     00 98 06 F6 | 	mov	arg04, #0
2b7d0     18 FF BF FD | 	call	#_sdmm_cc_v_do_io
2b7d4                 | _sdmm_cc_v_read_ret
2b7d4     2D 00 64 FD | 	ret
2b7d8                 | 
2b7d8                 | _sdmm_cc_v_write
2b7d8                 | ' {
2b7d8                 | '     return v_do_io(fil, buf, count,  (1) );
2b7d8     01 98 06 F6 | 	mov	arg04, #1
2b7dc     0C FF BF FD | 	call	#_sdmm_cc_v_do_io
2b7e0                 | _sdmm_cc_v_write_ret
2b7e0     2D 00 64 FD | 	ret
2b7e4                 | 
2b7e4                 | _sdmm_cc_v_ioctl
2b7e4     00 92 06 F6 | 	mov	arg01, #0
2b7e8     04 F9 BF FD | 	call	#_sdmm_cc_disk_ioctl
2b7ec     00 7A 0E F2 | 	cmp	result1, #0 wz
2b7f0                 | '         return _seterror( 10 );
2b7f0     20 68 06 51 |  if_ne	add	ptr___system__dat__, #32
2b7f4     34 15 68 5C |  if_ne	wrlong	#10, ptr___system__dat__
2b7f8     20 68 86 51 |  if_ne	sub	ptr___system__dat__, #32
2b7fc     01 7A 66 56 |  if_ne	neg	result1, #1
2b800                 | '     return 0;
2b800     00 7A 06 A6 |  if_e	mov	result1, #0
2b804                 | _sdmm_cc_v_ioctl_ret
2b804     2D 00 64 FD | 	ret
2b808                 | 
2b808                 | _sdmm_cc_v_lseek
2b808     4A 81 02 F6 | 	mov	_var01, arg02
2b80c     4C 85 0A F6 | 	mov	_var03, arg04 wz
2b810     1C 00 90 5D |  if_ne	jmp	#LR__4520
2b814     4B 85 02 F6 | 	mov	_var03, arg03
2b818     18 64 06 F1 | 	add	objptr, #24
2b81c     32 81 62 FC | 	wrlong	_var01, objptr
2b820     04 64 06 F1 | 	add	objptr, #4
2b824     32 85 62 FC | 	wrlong	_var03, objptr
2b828     1C 64 86 F1 | 	sub	objptr, #28
2b82c     64 00 90 FD | 	jmp	#LR__4523
2b830                 | LR__4520
2b830     01 84 0E F2 | 	cmp	_var03, #1 wz
2b834     30 00 90 5D |  if_ne	jmp	#LR__4521
2b838     18 64 06 F1 | 	add	objptr, #24
2b83c     32 7B 02 FB | 	rdlong	result1, objptr
2b840     04 64 06 F1 | 	add	objptr, #4
2b844     32 7D 02 FB | 	rdlong	result2, objptr
2b848     40 7B 12 F1 | 	add	result1, _var01 wc
2b84c     4B 7D 22 F1 | 	addx	result2, arg03
2b850     04 64 86 F1 | 	sub	objptr, #4
2b854     32 7B 62 FC | 	wrlong	result1, objptr
2b858     04 64 06 F1 | 	add	objptr, #4
2b85c     32 7D 62 FC | 	wrlong	result2, objptr
2b860     1C 64 86 F1 | 	sub	objptr, #28
2b864     2C 00 90 FD | 	jmp	#LR__4522
2b868                 | LR__4521
2b868     40 7B 22 F6 | 	not	result1, _var01
2b86c     01 7A 0E F1 | 	add	result1, #1 wz
2b870     4B 7D 22 F6 | 	not	result2, arg03
2b874     00 94 06 F6 | 	mov	arg02, #0
2b878     01 94 66 A6 |  if_e	neg	arg02, #1
2b87c     4A 7D 82 F1 | 	sub	result2, arg02
2b880     18 64 06 F1 | 	add	objptr, #24
2b884     32 7B 62 FC | 	wrlong	result1, objptr
2b888     04 64 06 F1 | 	add	objptr, #4
2b88c     32 7D 62 FC | 	wrlong	result2, objptr
2b890     1C 64 86 F1 | 	sub	objptr, #28
2b894                 | LR__4522
2b894                 | LR__4523
2b894                 | '         curpos = -off;
2b894                 | '     }
2b894                 | '     return curpos;
2b894     18 64 06 F1 | 	add	objptr, #24
2b898     32 7B 02 FB | 	rdlong	result1, objptr
2b89c     04 64 06 F1 | 	add	objptr, #4
2b8a0     32 7D 02 FB | 	rdlong	result2, objptr
2b8a4     1C 64 86 F1 | 	sub	objptr, #28
2b8a8                 | _sdmm_cc_v_lseek_ret
2b8a8     2D 00 64 FD | 	ret
2b8ac                 | 
2b8ac                 | _sdmm_cc_v_flush
2b8ac                 | ' {
2b8ac                 | '     return 0;
2b8ac     00 7A 06 F6 | 	mov	result1, #0
2b8b0                 | _sdmm_cc_v_flush_ret
2b8b0     2D 00 64 FD | 	ret
2b8b4                 | 
2b8b4                 | _sdmm_cc_v_close
2b8b4     00 92 06 F6 | 	mov	arg01, #0
2b8b8     B4 FD BF FD | 	call	#_sdmm_cc_disk_deinitialize
2b8bc     20 64 06 F1 | 	add	objptr, #32
2b8c0     32 93 02 FB | 	rdlong	arg01, objptr
2b8c4     04 64 06 F1 | 	add	objptr, #4
2b8c8     32 95 02 FB | 	rdlong	arg02, objptr
2b8cc     24 64 86 F1 | 	sub	objptr, #36
2b8d0     60 B1 BF FD | 	call	#__system___freepins
2b8d4                 | ' {
2b8d4                 | '     disk_deinitialize(0);
2b8d4                 | '     _freepins(f_pinmask);
2b8d4                 | '     return 0;
2b8d4     00 7A 06 F6 | 	mov	result1, #0
2b8d8                 | _sdmm_cc_v_close_ret
2b8d8     2D 00 64 FD | 	ret
2b8dc                 | 
2b8dc                 | _sdmm_cc_v_putc
2b8dc     00 CA 05 F6 | 	mov	COUNT_, #0
2b8e0     E8 00 A0 FD | 	call	#pushregs_
2b8e4     0C F0 07 F1 | 	add	ptra, #12
2b8e8     04 CE 05 F1 | 	add	fp, #4
2b8ec     E7 92 62 FC | 	wrlong	arg01, fp
2b8f0     4A 93 02 F6 | 	mov	arg01, arg02
2b8f4     E7 94 02 F6 | 	mov	arg02, fp
2b8f8     01 96 06 F6 | 	mov	arg03, #1
2b8fc     04 CE 85 F1 | 	sub	fp, #4
2b900                 | ' {
2b900                 | '     return v_do_io(fil, buf, count,  (1) );
2b900     01 98 06 F6 | 	mov	arg04, #1
2b904     E4 FD BF FD | 	call	#_sdmm_cc_v_do_io
2b908     01 7A 0E F2 | 	cmp	result1, #1 wz
2b90c     04 CE 05 A1 |  if_e	add	fp, #4
2b910     E7 7A 02 AB |  if_e	rdlong	result1, fp
2b914     04 CE 85 A1 |  if_e	sub	fp, #4
2b918                 | '     return -1;
2b918     01 7A 66 56 |  if_ne	neg	result1, #1
2b91c     E7 F0 03 F6 | 	mov	ptra, fp
2b920     F2 00 A0 FD | 	call	#popregs_
2b924                 | _sdmm_cc_v_putc_ret
2b924     2D 00 64 FD | 	ret
2b928                 | 
2b928                 | _sdmm_cc_v_getc
2b928     00 CA 05 F6 | 	mov	COUNT_, #0
2b92c     E8 00 A0 FD | 	call	#pushregs_
2b930     0C F0 07 F1 | 	add	ptra, #12
2b934     08 CE 05 F1 | 	add	fp, #8
2b938     E7 00 68 FC | 	wrlong	#0, fp
2b93c     E7 94 02 F6 | 	mov	arg02, fp
2b940     08 CE 85 F1 | 	sub	fp, #8
2b944     01 96 06 F6 | 	mov	arg03, #1
2b948                 | ' {
2b948                 | '     return v_do_io(fil, buf, count,  (0) );
2b948     00 98 06 F6 | 	mov	arg04, #0
2b94c     9C FD BF FD | 	call	#_sdmm_cc_v_do_io
2b950     01 7A 0E F2 | 	cmp	result1, #1 wz
2b954     08 CE 05 A1 |  if_e	add	fp, #8
2b958     E7 7A 02 AB |  if_e	rdlong	result1, fp
2b95c     08 CE 85 A1 |  if_e	sub	fp, #8
2b960                 | '     return -1;
2b960     01 7A 66 56 |  if_ne	neg	result1, #1
2b964     E7 F0 03 F6 | 	mov	ptra, fp
2b968     F2 00 A0 FD | 	call	#popregs_
2b96c                 | _sdmm_cc_v_getc_ret
2b96c     2D 00 64 FD | 	ret
2b970                 | 
2b970                 | _fatfs_cc_ff_uni2oem
2b970     00 80 06 F6 | 	mov	_var01, #0
2b974     80 92 16 F2 | 	cmp	arg01, #128 wc
2b978     49 81 02 C6 |  if_b	mov	_var01, arg01
2b97c     58 00 90 CD |  if_b	jmp	#LR__4534
2b980     80 00 00 FF 
2b984     00 92 16 F2 | 	cmp	arg01, ##65536 wc
2b988     4C 00 90 3D |  if_ae	jmp	#LR__4533
2b98c     4A 7B 32 F9 | 	getword	result1, arg02, #0
2b990     01 00 00 FF 
2b994     52 7B 0E F2 | 	cmp	result1, ##850 wz
2b998     3C 00 90 5D |  if_ne	jmp	#LR__4533
2b99c                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2b99c     00 80 06 F6 | 	mov	_var01, #0
2b9a0     D7 14 48 FB | 	callpa	#(@LR__4531-@LR__4530)>>2,fcache_load_ptr_
2b9a4                 | LR__4530
2b9a4     40 7B 32 F9 | 	getword	result1, _var01, #0
2b9a8     80 7A 16 F2 | 	cmp	result1, #128 wc
2b9ac     1C 00 90 3D |  if_ae	jmp	#LR__4532
2b9b0     40 7B 32 F9 | 	getword	result1, _var01, #0
2b9b4     01 7A 66 F0 | 	shl	result1, #1
2b9b8     36 7B 02 F1 | 	add	result1, ptr__fatfs_cc_dat__
2b9bc     3D 7B E2 FA | 	rdword	result1, result1
2b9c0     3D 93 0A F2 | 	cmp	arg01, result1 wz
2b9c4     01 80 06 51 |  if_ne	add	_var01, #1
2b9c8     D8 FF 9F 5D |  if_ne	jmp	#LR__4530
2b9cc                 | LR__4531
2b9cc                 | LR__4532
2b9cc     40 81 32 F9 | 	getword	_var01, _var01, #0
2b9d0     80 80 06 F1 | 	add	_var01, #128
2b9d4     40 81 E2 F8 | 	getbyte	_var01, _var01, #0
2b9d8                 | LR__4533
2b9d8                 | LR__4534
2b9d8                 | ' 			c = (c + 0x80) & 0xFF;
2b9d8                 | ' 		}
2b9d8                 | ' 	}
2b9d8                 | ' 
2b9d8                 | ' 	return c;
2b9d8     40 7B 02 F6 | 	mov	result1, _var01
2b9dc                 | _fatfs_cc_ff_uni2oem_ret
2b9dc     2D 00 64 FD | 	ret
2b9e0                 | 
2b9e0                 | _fatfs_cc_ff_oem2uni
2b9e0     00 80 06 F6 | 	mov	_var01, #0
2b9e4     49 7B 32 F9 | 	getword	result1, arg01, #0
2b9e8     80 7A 16 F2 | 	cmp	result1, #128 wc
2b9ec     49 81 02 C6 |  if_b	mov	_var01, arg01
2b9f0     2C 00 90 CD |  if_b	jmp	#LR__4541
2b9f4     4A 95 32 F9 | 	getword	arg02, arg02, #0
2b9f8     01 00 00 FF 
2b9fc     52 95 0E F2 | 	cmp	arg02, ##850 wz
2ba00     1C 00 90 5D |  if_ne	jmp	#LR__4540
2ba04     49 7B 32 F9 | 	getword	result1, arg01, #0
2ba08     00 7B 16 F2 | 	cmp	result1, #256 wc
2ba0c     49 93 32 C9 |  if_b	getword	arg01, arg01, #0
2ba10     80 92 86 C1 |  if_b	sub	arg01, #128
2ba14     01 92 66 C0 |  if_b	shl	arg01, #1
2ba18     36 93 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2ba1c     49 81 E2 CA |  if_b	rdword	_var01, arg01
2ba20                 | LR__4540
2ba20                 | LR__4541
2ba20                 | ' 		}
2ba20                 | ' 	}
2ba20                 | ' 
2ba20                 | ' 	return c;
2ba20     40 7B 02 F6 | 	mov	result1, _var01
2ba24                 | _fatfs_cc_ff_oem2uni_ret
2ba24     2D 00 64 FD | 	ret
2ba28                 | 
2ba28                 | _fatfs_cc_ff_wtoupper
2ba28     49 81 02 F6 | 	mov	_var01, arg01
2ba2c     80 00 00 FF 
2ba30     00 80 16 F2 | 	cmp	_var01, ##65536 wc
2ba34     58 01 90 3D |  if_ae	jmp	#LR__4563
2ba38     40 83 02 F6 | 	mov	_var02, _var01
2ba3c     41 81 32 F9 | 	getword	_var01, _var02, #0
2ba40     08 00 00 FF 
2ba44     00 80 16 F2 | 	cmp	_var01, ##4096 wc
2ba48     36 85 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2ba4c     00 85 06 C1 |  if_b	add	_var03, #256
2ba50     36 85 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2ba54     01 00 00 3F 
2ba58     F2 84 06 31 |  if_ae	add	_var03, ##754
2ba5c     42 87 02 F6 | 	mov	_var04, _var03
2ba60                 | ' 		uc = (WORD)uni;
2ba60                 | ' 		p = uc < 0x1000 ? (WORD*) cvt1 : (WORD *) cvt2;
2ba60                 | ' 		for (;;) {
2ba60                 | LR__4550
2ba60     43 89 E2 FA | 	rdword	_var05, _var04
2ba64     44 85 02 F6 | 	mov	_var03, _var05
2ba68     0F 84 4E F7 | 	zerox	_var03, #15 wz
2ba6c     02 86 06 F1 | 	add	_var04, #2
2ba70     18 01 90 AD |  if_e	jmp	#LR__4562
2ba74     41 85 32 F9 | 	getword	_var03, _var02, #0
2ba78     44 81 32 F9 | 	getword	_var01, _var05, #0
2ba7c     40 85 12 F2 | 	cmp	_var03, _var01 wc
2ba80     08 01 90 CD |  if_b	jmp	#LR__4562
2ba84     43 8B E2 FA | 	rdword	_var06, _var04
2ba88     45 8D 32 F9 | 	getword	_var07, _var06, #0
2ba8c     08 8C 46 F0 | 	shr	_var07, #8
2ba90     45 8B 32 F9 | 	getword	_var06, _var06, #0
2ba94     45 8B E2 F8 | 	getbyte	_var06, _var06, #0
2ba98     41 85 32 F9 | 	getword	_var03, _var02, #0
2ba9c     44 8F 32 F9 | 	getword	_var08, _var05, #0
2baa0     45 81 32 F9 | 	getword	_var01, _var06, #0
2baa4     40 8F 02 F1 | 	add	_var08, _var01
2baa8     47 85 52 F2 | 	cmps	_var03, _var08 wc
2baac     02 86 06 F1 | 	add	_var04, #2
2bab0     C4 00 90 3D |  if_ae	jmp	#LR__4561
2bab4                 | ' 				switch (cmd) {
2bab4     46 91 32 F9 | 	getword	_var09, _var07, #0
2bab8     09 90 26 F3 | 	fle	_var09, #9
2babc     30 90 62 FD | 	jmprel	_var09
2bac0                 | LR__4551
2bac0     24 00 90 FD | 	jmp	#LR__4552
2bac4     3C 00 90 FD | 	jmp	#LR__4553
2bac8     54 00 90 FD | 	jmp	#LR__4554
2bacc     5C 00 90 FD | 	jmp	#LR__4555
2bad0     64 00 90 FD | 	jmp	#LR__4556
2bad4     6C 00 90 FD | 	jmp	#LR__4557
2bad8     74 00 90 FD | 	jmp	#LR__4558
2badc     7C 00 90 FD | 	jmp	#LR__4559
2bae0     84 00 90 FD | 	jmp	#LR__4560
2bae4     A4 00 90 FD | 	jmp	#LR__4562
2bae8                 | LR__4552
2bae8     41 83 32 F9 | 	getword	_var02, _var02, #0
2baec     44 89 32 F9 | 	getword	_var05, _var05, #0
2baf0     44 83 82 F1 | 	sub	_var02, _var05
2baf4     01 82 66 F0 | 	shl	_var02, #1
2baf8     43 83 02 F1 | 	add	_var02, _var04
2bafc     41 83 E2 FA | 	rdword	_var02, _var02
2bb00     88 00 90 FD | 	jmp	#LR__4562
2bb04                 | LR__4553
2bb04     41 85 32 F9 | 	getword	_var03, _var02, #0
2bb08     41 83 32 F9 | 	getword	_var02, _var02, #0
2bb0c     44 89 32 F9 | 	getword	_var05, _var05, #0
2bb10     44 83 82 F1 | 	sub	_var02, _var05
2bb14     01 82 06 F5 | 	and	_var02, #1
2bb18     42 83 C2 F2 | 	subr	_var02, _var03
2bb1c     6C 00 90 FD | 	jmp	#LR__4562
2bb20                 | LR__4554
2bb20     41 83 32 F9 | 	getword	_var02, _var02, #0
2bb24     10 82 86 F1 | 	sub	_var02, #16
2bb28     60 00 90 FD | 	jmp	#LR__4562
2bb2c                 | LR__4555
2bb2c     41 83 32 F9 | 	getword	_var02, _var02, #0
2bb30     20 82 86 F1 | 	sub	_var02, #32
2bb34     54 00 90 FD | 	jmp	#LR__4562
2bb38                 | LR__4556
2bb38     41 83 32 F9 | 	getword	_var02, _var02, #0
2bb3c     30 82 86 F1 | 	sub	_var02, #48
2bb40     48 00 90 FD | 	jmp	#LR__4562
2bb44                 | LR__4557
2bb44     41 83 32 F9 | 	getword	_var02, _var02, #0
2bb48     1A 82 86 F1 | 	sub	_var02, #26
2bb4c     3C 00 90 FD | 	jmp	#LR__4562
2bb50                 | LR__4558
2bb50     41 83 32 F9 | 	getword	_var02, _var02, #0
2bb54     08 82 06 F1 | 	add	_var02, #8
2bb58     30 00 90 FD | 	jmp	#LR__4562
2bb5c                 | LR__4559
2bb5c     41 83 32 F9 | 	getword	_var02, _var02, #0
2bb60     50 82 86 F1 | 	sub	_var02, #80
2bb64     24 00 90 FD | 	jmp	#LR__4562
2bb68                 | LR__4560
2bb68     41 83 32 F9 | 	getword	_var02, _var02, #0
2bb6c     0E 00 00 FF 
2bb70     60 82 86 F1 | 	sub	_var02, ##7264
2bb74                 | ' 				}
2bb74                 | ' 				break;
2bb74     14 00 90 FD | 	jmp	#LR__4562
2bb78                 | LR__4561
2bb78     0F 8C 4E F7 | 	zerox	_var07, #15 wz
2bb7c     45 8B 32 A9 |  if_e	getword	_var06, _var06, #0
2bb80     01 8A 66 A0 |  if_e	shl	_var06, #1
2bb84     45 87 02 A1 |  if_e	add	_var04, _var06
2bb88     D4 FE 9F FD | 	jmp	#LR__4550
2bb8c                 | LR__4562
2bb8c     41 81 32 F9 | 	getword	_var01, _var02, #0
2bb90                 | LR__4563
2bb90                 | ' 		}
2bb90                 | ' 		uni = uc;
2bb90                 | ' 	}
2bb90                 | ' 
2bb90                 | ' 	return uni;
2bb90     40 7B 02 F6 | 	mov	result1, _var01
2bb94                 | _fatfs_cc_ff_wtoupper_ret
2bb94     2D 00 64 FD | 	ret
2bb98                 | 
2bb98                 | _fatfs_cc_strncpy
2bb98     49 81 02 F6 | 	mov	_var01, arg01
2bb9c     D7 18 48 FB | 	callpa	#(@LR__4571-@LR__4570)>>2,fcache_load_ptr_
2bba0                 | ' 
2bba0                 | ' 	dscan = dst;
2bba0                 | ' 	sscan = src;
2bba0                 | ' 	count = n;
2bba0                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2bba0                 | LR__4570
2bba0     01 96 86 F1 | 	sub	arg03, #1
2bba4     00 96 56 F2 | 	cmps	arg03, #0 wc
2bba8     24 00 90 CD |  if_b	jmp	#LR__4572
2bbac     4A 7B 02 F6 | 	mov	result1, arg02
2bbb0     01 7A 06 F1 | 	add	result1, #1
2bbb4     4A 83 C2 FA | 	rdbyte	_var02, arg02
2bbb8     3D 95 02 F6 | 	mov	arg02, result1
2bbbc     40 83 42 FC | 	wrbyte	_var02, _var01
2bbc0     41 83 E2 F8 | 	getbyte	_var02, _var02, #0
2bbc4     07 82 4E F7 | 	zerox	_var02, #7 wz
2bbc8                 | ' 		continue;
2bbc8     01 80 06 F1 | 	add	_var01, #1
2bbcc     D0 FF 9F 5D |  if_ne	jmp	#LR__4570
2bbd0                 | LR__4571
2bbd0                 | LR__4572
2bbd0     D7 0C 48 FB | 	callpa	#(@LR__4574-@LR__4573)>>2,fcache_load_ptr_
2bbd4                 | ' 	while (--count >= 0)
2bbd4                 | LR__4573
2bbd4     01 96 86 F1 | 	sub	arg03, #1
2bbd8     00 96 56 F2 | 	cmps	arg03, #0 wc
2bbdc     40 85 02 36 |  if_ae	mov	_var03, _var01
2bbe0     01 80 06 31 |  if_ae	add	_var01, #1
2bbe4     42 01 48 3C |  if_ae	wrbyte	#0, _var03
2bbe8     E8 FF 9F 3D |  if_ae	jmp	#LR__4573
2bbec                 | LR__4574
2bbec                 | ' 		*dscan++ = '\0';
2bbec                 | ' 	return(dst);
2bbec     49 7B 02 F6 | 	mov	result1, arg01
2bbf0                 | _fatfs_cc_strncpy_ret
2bbf0     2D 00 64 FD | 	ret
2bbf4                 | 
2bbf4                 | _fatfs_cc_memcmp
2bbf4                 | ' 	for (n = size; n > 0; n--)
2bbf4     00 96 0E F2 | 	cmp	arg03, #0 wz
2bbf8     28 00 90 AD |  if_e	jmp	#LR__4581
2bbfc                 | LR__4580
2bbfc     49 81 C2 FA | 	rdbyte	_var01, arg01
2bc00     4A 83 C2 FA | 	rdbyte	_var02, arg02
2bc04     41 81 0A F2 | 	cmp	_var01, _var02 wz
2bc08     01 92 06 A1 |  if_e	add	arg01, #1
2bc0c     01 94 06 A1 |  if_e	add	arg02, #1
2bc10                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2bc10     49 7B C2 5A |  if_ne	rdbyte	result1, arg01
2bc14     4A 83 C2 5A |  if_ne	rdbyte	_var02, arg02
2bc18     41 7B 82 51 |  if_ne	sub	result1, _var02
2bc1c     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2bc20     F6 97 6E FB | 	djnz	arg03, #LR__4580
2bc24                 | LR__4581
2bc24                 | ' 
2bc24                 | ' 	return(0);
2bc24     00 7A 06 F6 | 	mov	result1, #0
2bc28                 | _fatfs_cc_memcmp_ret
2bc28     2D 00 64 FD | 	ret
2bc2c                 | 
2bc2c                 | _fatfs_cc_strncmp
2bc2c     49 81 0A F6 | 	mov	_var01, arg01 wz
2bc30     14 00 90 5D |  if_ne	jmp	#LR__4590
2bc34                 | ' 		return scan2 ? -1 : 0;
2bc34     00 94 0E F2 | 	cmp	arg02, #0 wz
2bc38     01 82 66 56 |  if_ne	neg	_var02, #1
2bc3c     00 82 06 A6 |  if_e	mov	_var02, #0
2bc40     41 7B 02 F6 | 	mov	result1, _var02
2bc44     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2bc48                 | LR__4590
2bc48     00 94 0E F2 | 	cmp	arg02, #0 wz
2bc4c     01 7A 06 A6 |  if_e	mov	result1, #1
2bc50     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2bc54     4B 85 02 F6 | 	mov	_var03, arg03
2bc58     D7 16 48 FB | 	callpa	#(@LR__4592-@LR__4591)>>2,fcache_load_ptr_
2bc5c                 | ' 	count = n;
2bc5c                 | ' 	do {
2bc5c                 | LR__4591
2bc5c     40 87 C2 FA | 	rdbyte	_var04, _var01
2bc60     4A 89 02 F6 | 	mov	_var05, arg02
2bc64     44 8B C2 FA | 	rdbyte	_var06, _var05
2bc68     01 84 86 F1 | 	sub	_var03, #1
2bc6c     00 84 56 F2 | 	cmps	_var03, #0 wc
2bc70     01 80 06 F1 | 	add	_var01, #1
2bc74     01 94 06 F1 | 	add	arg02, #1
2bc78     00 86 0E 32 |  if_ae	cmp	_var04, #0 wz
2bc7c     08 00 90 2D |  if_nc_and_z	jmp	#LR__4593
2bc80     45 87 0A 32 |  if_ae	cmp	_var04, _var06 wz
2bc84     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4591
2bc88                 | LR__4592
2bc88                 | LR__4593
2bc88     00 84 56 F2 | 	cmps	_var03, #0 wc
2bc8c                 | ' 		return(0);
2bc8c     00 7A 06 C6 |  if_b	mov	result1, #0
2bc90     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2bc94     45 87 0A F2 | 	cmp	_var04, _var06 wz
2bc98                 | ' 		return(0);
2bc98     00 7A 06 A6 |  if_e	mov	result1, #0
2bc9c     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2bca0     00 86 0E F2 | 	cmp	_var04, #0 wz
2bca4                 | ' 		return(-1);
2bca4     01 7A 66 A6 |  if_e	neg	result1, #1
2bca8     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2bcac     00 8A 0E F2 | 	cmp	_var06, #0 wz
2bcb0                 | ' 		return(1);
2bcb0     01 7A 06 A6 |  if_e	mov	result1, #1
2bcb4                 | ' 		return(c1 - c2);
2bcb4     43 7B 02 56 |  if_ne	mov	result1, _var04
2bcb8     45 7B 82 51 |  if_ne	sub	result1, _var06
2bcbc                 | _fatfs_cc_strncmp_ret
2bcbc     2D 00 64 FD | 	ret
2bcc0                 | 
2bcc0                 | _fatfs_cc_strchr
2bcc0                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/libc/string/strchr.c"
2bcc0                 | ' 	while ((c = *s++) != (char) charwanted)
2bcc0                 | LR__4600
2bcc0     49 81 02 F6 | 	mov	_var01, arg01
2bcc4     40 83 C2 FA | 	rdbyte	_var02, _var01
2bcc8     41 85 E2 F8 | 	getbyte	_var03, _var02, #0
2bccc     4A 87 E2 F8 | 	getbyte	_var04, arg02, #0
2bcd0     43 85 0A F2 | 	cmp	_var03, _var04 wz
2bcd4     01 92 06 F1 | 	add	arg01, #1
2bcd8     14 00 90 AD |  if_e	jmp	#LR__4601
2bcdc     41 85 02 F6 | 	mov	_var03, _var02
2bce0     07 84 4E F7 | 	zerox	_var03, #7 wz
2bce4     00 7A 06 A6 |  if_e	mov	result1, #0
2bce8     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2bcec     D0 FF 9F FD | 	jmp	#LR__4600
2bcf0                 | LR__4601
2bcf0                 | ' 	return((char *)--s);
2bcf0     01 92 86 F1 | 	sub	arg01, #1
2bcf4     49 7B 02 F6 | 	mov	result1, arg01
2bcf8                 | _fatfs_cc_strchr_ret
2bcf8     2D 00 64 FD | 	ret
2bcfc                 | 
2bcfc                 | _fatfs_cc_time
2bcfc     01 CA 05 F6 | 	mov	COUNT_, #1
2bd00     E8 00 A0 FD | 	call	#pushregs_
2bd04     14 F0 07 F1 | 	add	ptra, #20
2bd08     49 A7 02 F6 | 	mov	local01, arg01
2bd0c     E7 92 02 F6 | 	mov	arg01, fp
2bd10     08 92 06 F1 | 	add	arg01, #8
2bd14     00 94 06 F6 | 	mov	arg02, #0
2bd18     A0 5E B0 FD | 	call	#_fatfs_cc_gettimeofday
2bd1c     08 CE 05 F1 | 	add	fp, #8
2bd20     E7 7A 02 FB | 	rdlong	result1, fp
2bd24     08 CE 85 F1 | 	sub	fp, #8
2bd28     00 A6 0E F2 | 	cmp	local01, #0 wz
2bd2c     53 7B 62 5C |  if_ne	wrlong	result1, local01
2bd30                 | '         *tp = now;
2bd30                 | '     return now;
2bd30     E7 F0 03 F6 | 	mov	ptra, fp
2bd34     F2 00 A0 FD | 	call	#popregs_
2bd38                 | _fatfs_cc_time_ret
2bd38     2D 00 64 FD | 	ret
2bd3c                 | 
2bd3c                 | _fatfs_cc_mktime
2bd3c     06 CA 05 F6 | 	mov	COUNT_, #6
2bd40     E8 00 A0 FD | 	call	#pushregs_
2bd44     49 A7 02 F6 | 	mov	local01, arg01
2bd48     14 A6 06 F1 | 	add	local01, #20
2bd4c     53 93 02 FB | 	rdlong	arg01, local01
2bd50     14 A6 86 F1 | 	sub	local01, #20
2bd54     46 92 56 F2 | 	cmps	arg01, #70 wc
2bd58                 | '                 return (time_t) -1;
2bd58     01 7A 66 C6 |  if_b	neg	result1, #1
2bd5c     78 01 90 CD |  if_b	jmp	#LR__4614
2bd60     03 00 00 FF 
2bd64     6C A9 06 F6 | 	mov	local02, ##1900
2bd68     14 A6 06 F1 | 	add	local01, #20
2bd6c     53 7B 02 FB | 	rdlong	result1, local01
2bd70     3D A9 02 F1 | 	add	local02, result1
2bd74     08 A6 86 F1 | 	sub	local01, #8
2bd78     53 AB 02 FB | 	rdlong	local03, local01
2bd7c     01 AA 86 F1 | 	sub	local03, #1
2bd80     04 A6 06 F1 | 	add	local01, #4
2bd84     53 93 02 FB | 	rdlong	arg01, local01
2bd88     10 A6 86 F1 | 	sub	local01, #16
2bd8c     02 92 66 F0 | 	shl	arg01, #2
2bd90     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2bd94     02 00 00 FF 
2bd98     78 7A 06 F1 | 	add	result1, ##1144
2bd9c     3D 93 02 F1 | 	add	arg01, result1
2bda0     49 7B 02 FB | 	rdlong	result1, arg01
2bda4     3D AB 02 F1 | 	add	local03, result1
2bda8     54 93 02 F6 | 	mov	arg01, local02
2bdac     B4 5E B0 FD | 	call	#_fatfs_cc__is_leap_year
2bdb0     00 7A 0E F2 | 	cmp	result1, #0 wz
2bdb4     1C 00 90 AD |  if_e	jmp	#LR__4610
2bdb8     00 AC 06 F6 | 	mov	local04, #0
2bdbc     10 A6 06 F1 | 	add	local01, #16
2bdc0     53 7B 02 FB | 	rdlong	result1, local01
2bdc4     10 A6 86 F1 | 	sub	local01, #16
2bdc8     02 7A 56 F2 | 	cmps	result1, #2 wc
2bdcc     01 AC 06 36 |  if_ae	mov	local04, #1
2bdd0     04 00 90 FD | 	jmp	#LR__4611
2bdd4                 | LR__4610
2bdd4     00 AC 06 F6 | 	mov	local04, #0
2bdd8                 | LR__4611
2bdd8     04 A6 06 F1 | 	add	local01, #4
2bddc     53 93 02 FB | 	rdlong	arg01, local01
2bde0     04 A6 86 F1 | 	sub	local01, #4
2bde4     53 AF 02 FB | 	rdlong	local05, local01
2bde8     08 A6 06 F1 | 	add	local01, #8
2bdec     53 7B 02 FB | 	rdlong	result1, local01
2bdf0     07 00 00 FF 
2bdf4     10 7A 06 FD | 	qmul	result1, ##3600
2bdf8     56 AB 02 F1 | 	add	local03, local04
2bdfc     49 AD 02 F6 | 	mov	local04, arg01
2be00     04 AC 66 F0 | 	shl	local04, #4
2be04     49 AD 82 F1 | 	sub	local04, arg01
2be08     02 AC 66 F0 | 	shl	local04, #2
2be0c     56 AF 02 F1 | 	add	local05, local04
2be10     08 A6 86 F1 | 	sub	local01, #8
2be14     18 AC 62 FD | 	getqx	local04
2be18     A8 00 00 FF 
2be1c     80 AB 06 FD | 	qmul	local03, ##86400
2be20     56 AF 02 F1 | 	add	local05, local04
2be24     54 AB 02 F6 | 	mov	local03, local02
2be28     03 00 00 FF 
2be2c     B2 AB 86 F1 | 	sub	local03, ##1970
2be30     18 AC 62 FD | 	getqx	local04
2be34     99 F0 00 FF 
2be38     80 AB 06 FD | 	qmul	local03, ##31536000
2be3c     56 AF 02 F1 | 	add	local05, local04
2be40     54 AB 02 F6 | 	mov	local03, local02
2be44     03 00 00 FF 
2be48     B1 AB 86 F1 | 	sub	local03, ##1969
2be4c     55 B1 52 F6 | 	abs	local06, local03 wc
2be50     02 B0 46 F0 | 	shr	local06, #2
2be54     58 B1 82 F6 | 	negc	local06, local06
2be58     03 00 00 FF 
2be5c     D1 A9 56 F2 | 	cmps	local02, ##2001 wc
2be60     18 AC 62 FD | 	getqx	local04
2be64     56 AF 02 F1 | 	add	local05, local04
2be68     18 00 90 CD |  if_b	jmp	#LR__4612
2be6c     03 00 00 FF 
2be70     D0 A9 86 F1 | 	sub	local02, ##2000
2be74     54 AD 52 F6 | 	abs	local04, local02 wc
2be78     64 AC 16 FD | 	qdiv	local04, #100
2be7c     18 AC 62 FD | 	getqx	local04
2be80     56 B1 A2 F3 | 	sumnc	local06, local04
2be84                 | LR__4612
2be84     A8 00 00 FF 
2be88     80 B1 06 FD | 	qmul	local06, ##86400
2be8c     18 B0 62 FD | 	getqx	local06
2be90     58 AF 02 F1 | 	add	local05, local06
2be94     E8 01 B0 FD | 	call	#_fatfs_cc__tzset
2be98     02 00 00 FF 
2be9c     44 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1092
2bea0     36 B1 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2bea4     58 AF 02 F1 | 	add	local05, local06
2bea8     68 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, #104
2beac     36 AB 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2beb0     02 00 00 FF 
2beb4     AC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1196
2beb8     01 AA 0E F2 | 	cmp	local03, #1 wz
2bebc     14 00 90 5D |  if_ne	jmp	#LR__4613
2bec0     53 93 02 F6 | 	mov	arg01, local01
2bec4     88 60 B0 FD | 	call	#_fatfs_cc___indst
2bec8     00 7A 0E F2 | 	cmp	result1, #0 wz
2becc     07 00 00 5F 
2bed0     10 AE 86 51 |  if_ne	sub	local05, ##3600
2bed4                 | LR__4613
2bed4                 | '                 s -=  (3600L) ;
2bed4                 | ' 
2bed4                 | '         return s;
2bed4     57 7B 02 F6 | 	mov	result1, local05
2bed8                 | LR__4614
2bed8     E7 F0 03 F6 | 	mov	ptra, fp
2bedc     F2 00 A0 FD | 	call	#popregs_
2bee0                 | _fatfs_cc_mktime_ret
2bee0     2D 00 64 FD | 	ret
2bee4                 | 
2bee4                 | _fatfs_cc__gmtime_r
2bee4     03 CA 05 F6 | 	mov	COUNT_, #3
2bee8     E8 00 A0 FD | 	call	#pushregs_
2beec     49 A7 02 FB | 	rdlong	local01, arg01
2bef0     A8 00 00 FF 
2bef4     80 A7 16 FD | 	qdiv	local01, ##86400
2bef8     18 7A 62 FD | 	getqx	result1
2befc     04 7A 06 F1 | 	add	result1, #4
2bf00     07 7A 16 FD | 	qdiv	result1, #7
2bf04     18 94 06 F1 | 	add	arg02, #24
2bf08     D1 7F 27 FF 
2bf0c     00 A6 16 F2 | 	cmp	local01, ##1325376000 wc
2bf10     D1 7F 27 3F 
2bf14     00 A6 86 31 |  if_ae	sub	local01, ##1325376000
2bf18     03 00 00 3F 
2bf1c     DC A9 06 36 |  if_ae	mov	local02, ##2012
2bf20     03 00 00 CF 
2bf24     B2 A9 06 C6 |  if_b	mov	local02, ##1970
2bf28                 | ' 	  year = 1970;
2bf28                 | ' 	}
2bf28                 | ' 
2bf28                 | ' 	for(;;) {
2bf28     19 7A 62 FD | 	getqy	result1
2bf2c     4A 7B 62 FC | 	wrlong	result1, arg02
2bf30     18 94 86 F1 | 	sub	arg02, #24
2bf34                 | LR__4620
2bf34     54 93 02 F6 | 	mov	arg01, local02
2bf38     28 5D B0 FD | 	call	#_fatfs_cc__is_leap_year
2bf3c     00 7A 0E F2 | 	cmp	result1, #0 wz
2bf40     42 F1 00 5F 
2bf44     00 AB 06 56 |  if_ne	mov	local03, ##31622400
2bf48     99 F0 00 AF 
2bf4c     80 AB 06 A6 |  if_e	mov	local03, ##31536000
2bf50     55 A7 12 F2 | 	cmp	local01, local03 wc
2bf54                 | ' 	    break;
2bf54     01 A8 06 31 |  if_ae	add	local02, #1
2bf58     55 A7 82 31 |  if_ae	sub	local01, local03
2bf5c     D4 FF 9F 3D |  if_ae	jmp	#LR__4620
2bf60     A8 00 00 FF 
2bf64     80 A7 16 FD | 	qdiv	local01, ##86400
2bf68     54 AB 02 F6 | 	mov	local03, local02
2bf6c     03 00 00 FF 
2bf70     6C AB 86 F1 | 	sub	local03, ##1900
2bf74     14 94 06 F1 | 	add	arg02, #20
2bf78     4A AB 62 FC | 	wrlong	local03, arg02
2bf7c     08 94 06 F1 | 	add	arg02, #8
2bf80     54 93 02 F6 | 	mov	arg01, local02
2bf84     18 A8 62 FD | 	getqx	local02
2bf88     4A A9 62 FC | 	wrlong	local02, arg02
2bf8c     1C 94 86 F1 | 	sub	arg02, #28
2bf90     D0 5C B0 FD | 	call	#_fatfs_cc__is_leap_year
2bf94     00 7A 0E F2 | 	cmp	result1, #0 wz
2bf98     1D AA 06 56 |  if_ne	mov	local03, #29
2bf9c     1C AA 06 A6 |  if_e	mov	local03, #28
2bfa0     02 00 00 FF 
2bfa4     4C 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1100
2bfa8     36 AB 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2bfac     02 00 00 FF 
2bfb0     4C 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1100
2bfb4                 | ' 
2bfb4                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2bfb4                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2bfb4     00 92 06 F6 | 	mov	arg01, #0
2bfb8     D7 26 48 FB | 	callpa	#(@LR__4622-@LR__4621)>>2,fcache_load_ptr_
2bfbc                 | LR__4621
2bfbc     49 AB 02 F6 | 	mov	local03, arg01
2bfc0     02 AA 66 F0 | 	shl	local03, #2
2bfc4     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2bfc8     02 00 00 FF 
2bfcc     48 7A 06 F1 | 	add	result1, ##1096
2bfd0     3D AB 02 F1 | 	add	local03, result1
2bfd4     55 AB 02 FB | 	rdlong	local03, local03
2bfd8     55 A9 52 F2 | 	cmps	local02, local03 wc
2bfdc     28 00 90 CD |  if_b	jmp	#LR__4623
2bfe0     49 7B 02 F6 | 	mov	result1, arg01
2bfe4     02 7A 66 F0 | 	shl	result1, #2
2bfe8     36 AB 02 F6 | 	mov	local03, ptr__fatfs_cc_dat__
2bfec     02 00 00 FF 
2bff0     48 AA 06 F1 | 	add	local03, ##1096
2bff4     55 7B 02 F1 | 	add	result1, local03
2bff8     3D 7B 02 FB | 	rdlong	result1, result1
2bffc     3D A9 82 F1 | 	sub	local02, result1
2c000     01 92 06 F1 | 	add	arg01, #1
2c004     B4 FF 9F FD | 	jmp	#LR__4621
2c008                 | LR__4622
2c008                 | LR__4623
2c008     A8 00 00 FF 
2c00c     80 A7 16 FD | 	qdiv	local01, ##86400
2c010     10 94 06 F1 | 	add	arg02, #16
2c014     4A 93 62 FC | 	wrlong	arg01, arg02
2c018     01 A8 06 F1 | 	add	local02, #1
2c01c     04 94 86 F1 | 	sub	arg02, #4
2c020     4A A9 62 FC | 	wrlong	local02, arg02
2c024     19 A6 62 FD | 	getqy	local01
2c028     07 00 00 FF 
2c02c     10 A6 16 FD | 	qdiv	local01, ##3600
2c030     18 AA 62 FD | 	getqx	local03
2c034     07 00 00 FF 
2c038     10 A6 16 FD | 	qdiv	local01, ##3600
2c03c     04 94 86 F1 | 	sub	arg02, #4
2c040     4A AB 62 FC | 	wrlong	local03, arg02
2c044     19 A6 62 FD | 	getqy	local01
2c048     3C A6 16 FD | 	qdiv	local01, #60
2c04c     18 AA 62 FD | 	getqx	local03
2c050     3C A6 16 FD | 	qdiv	local01, #60
2c054     04 94 86 F1 | 	sub	arg02, #4
2c058     4A AB 62 FC | 	wrlong	local03, arg02
2c05c     04 94 86 F1 | 	sub	arg02, #4
2c060                 | '         stm->tm_isdst = 0;
2c060                 | ' 
2c060                 | ' ;
2c060                 | '         return stm;
2c060     4A 7B 02 F6 | 	mov	result1, arg02
2c064     19 AA 62 FD | 	getqy	local03
2c068     4A AB 62 FC | 	wrlong	local03, arg02
2c06c     20 94 06 F1 | 	add	arg02, #32
2c070     4A 01 68 FC | 	wrlong	#0, arg02
2c074     E7 F0 03 F6 | 	mov	ptra, fp
2c078     F2 00 A0 FD | 	call	#popregs_
2c07c                 | _fatfs_cc__gmtime_r_ret
2c07c     2D 00 64 FD | 	ret
2c080                 | 
2c080                 | _fatfs_cc__tzset
2c080     91 01 00 FF 
2c084     DC 92 06 F6 | 	mov	arg01, ##@LR__5472
2c088     0C 50 B0 FD | 	call	#_fatfs_cc_getenv
2c08c     3D 93 02 F6 | 	mov	arg01, result1
2c090     36 95 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2c094     02 00 00 FF 
2c098     AC 94 06 F1 | 	add	arg02, ##1196
2c09c     14 5C B0 FD | 	call	#_fatfs_cc___tzoffset
2c0a0     02 00 00 FF 
2c0a4     44 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1092
2c0a8     36 7B 62 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2c0ac     02 00 00 FF 
2c0b0     44 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1092
2c0b4                 | _fatfs_cc__tzset_ret
2c0b4     2D 00 64 FD | 	ret
2c0b8                 | 
2c0b8                 | _fatfs_cc_disk_read
2c0b8     09 CA 05 F6 | 	mov	COUNT_, #9
2c0bc     E8 00 A0 FD | 	call	#pushregs_
2c0c0     4A AF 02 F6 | 	mov	local05, arg02
2c0c4     4C B1 02 F6 | 	mov	local06, arg04
2c0c8     4B 93 02 F6 | 	mov	arg01, arg03
2c0cc     00 94 06 F6 | 	mov	arg02, #0
2c0d0     09 96 06 F6 | 	mov	arg03, #9
2c0d4     00 98 06 F6 | 	mov	arg04, #0
2c0d8     94 A8 BF FD | 	call	#__system___int64_shl
2c0dc     3D A7 02 F6 | 	mov	local01, result1
2c0e0     3E A9 02 F6 | 	mov	local02, result2
2c0e4     01 00 00 FF 
2c0e8     10 64 06 F1 | 	add	objptr, ##528
2c0ec     32 7D 0A FB | 	rdlong	result2, objptr wz
2c0f0     01 00 00 FF 
2c0f4     10 64 86 F1 | 	sub	objptr, ##528
2c0f8                 | '         return RES_NOTRDY;
2c0f8     03 7A 06 A6 |  if_e	mov	result1, #3
2c0fc     E8 00 90 AD |  if_e	jmp	#LR__4630
2c100     53 95 02 F6 | 	mov	arg02, local01
2c104     54 97 02 F6 | 	mov	arg03, local02
2c108     01 00 00 FF 
2c10c     10 64 06 F1 | 	add	objptr, ##528
2c110     32 93 02 FB | 	rdlong	arg01, objptr
2c114     49 99 02 F6 | 	mov	arg04, arg01
2c118     30 98 06 F1 | 	add	arg04, #48
2c11c     4C B3 02 FB | 	rdlong	local07, arg04
2c120     59 B5 02 F6 | 	mov	local08, local07
2c124     13 B2 46 F7 | 	zerox	local07, #19
2c128     14 B4 46 F0 | 	shr	local08, #20
2c12c     02 B4 66 F0 | 	shl	local08, #2
2c130     2D B5 02 F1 | 	add	local08, __methods__
2c134     5A B5 02 FB | 	rdlong	local08, local08
2c138     01 00 00 FF 
2c13c     10 64 86 F1 | 	sub	objptr, ##528
2c140     00 98 06 F6 | 	mov	arg04, #0
2c144     32 B7 02 F6 | 	mov	local09, objptr
2c148     59 65 02 F6 | 	mov	objptr, local07
2c14c     2D B4 62 FD | 	call	local08
2c150     5B 65 02 F6 | 	mov	objptr, local09
2c154     3D AB 02 F6 | 	mov	local03, result1
2c158     3E AD 02 F6 | 	mov	local04, result2
2c15c     55 93 02 F6 | 	mov	arg01, local03
2c160     56 95 02 F6 | 	mov	arg02, local04
2c164     53 97 02 F6 | 	mov	arg03, local01
2c168     54 99 02 F6 | 	mov	arg04, local02
2c16c     00 7A 06 F6 | 	mov	result1, #0
2c170     4B 93 1A F2 | 	cmp	arg01, arg03 wcz
2c174     4C 95 7A F2 | 	cmpsx	arg02, arg04 wcz
2c178     01 7A 86 56 |  if_ne	negc	result1, #1
2c17c     00 7A 0E F2 | 	cmp	result1, #0 wz
2c180                 | '         return RES_ERROR;
2c180     01 7A 06 56 |  if_ne	mov	result1, #1
2c184     60 00 90 5D |  if_ne	jmp	#LR__4630
2c188     09 B0 66 F0 | 	shl	local06, #9
2c18c     01 00 00 FF 
2c190     10 64 06 F1 | 	add	objptr, ##528
2c194     32 93 02 FB | 	rdlong	arg01, objptr
2c198     49 AB 02 F6 | 	mov	local03, arg01
2c19c     14 AA 06 F1 | 	add	local03, #20
2c1a0     55 AB 02 FB | 	rdlong	local03, local03
2c1a4     55 B7 02 F6 | 	mov	local09, local03
2c1a8     13 B6 46 F7 | 	zerox	local09, #19
2c1ac     14 AA 46 F0 | 	shr	local03, #20
2c1b0     02 AA 66 F0 | 	shl	local03, #2
2c1b4     2D AB 02 F1 | 	add	local03, __methods__
2c1b8     55 AB 02 FB | 	rdlong	local03, local03
2c1bc     01 00 00 FF 
2c1c0     10 64 86 F1 | 	sub	objptr, ##528
2c1c4     57 95 02 F6 | 	mov	arg02, local05
2c1c8     58 97 02 F6 | 	mov	arg03, local06
2c1cc     32 B5 02 F6 | 	mov	local08, objptr
2c1d0     5B 65 02 F6 | 	mov	objptr, local09
2c1d4     2D AA 62 FD | 	call	local03
2c1d8     5A 65 02 F6 | 	mov	objptr, local08
2c1dc     58 7B 0A F2 | 	cmp	result1, local06 wz
2c1e0                 | '         return RES_ERROR;
2c1e0     01 7A 06 56 |  if_ne	mov	result1, #1
2c1e4                 | '     }
2c1e4                 | '     return RES_OK;
2c1e4     00 7A 06 A6 |  if_e	mov	result1, #0
2c1e8                 | LR__4630
2c1e8     E7 F0 03 F6 | 	mov	ptra, fp
2c1ec     F2 00 A0 FD | 	call	#popregs_
2c1f0                 | _fatfs_cc_disk_read_ret
2c1f0     2D 00 64 FD | 	ret
2c1f4                 | 
2c1f4                 | _fatfs_cc_disk_write
2c1f4     09 CA 05 F6 | 	mov	COUNT_, #9
2c1f8     E8 00 A0 FD | 	call	#pushregs_
2c1fc     4A AF 02 F6 | 	mov	local05, arg02
2c200     4C B1 02 F6 | 	mov	local06, arg04
2c204     4B 93 02 F6 | 	mov	arg01, arg03
2c208     00 94 06 F6 | 	mov	arg02, #0
2c20c     09 96 06 F6 | 	mov	arg03, #9
2c210     00 98 06 F6 | 	mov	arg04, #0
2c214     58 A7 BF FD | 	call	#__system___int64_shl
2c218     3D A7 02 F6 | 	mov	local01, result1
2c21c     3E A9 02 F6 | 	mov	local02, result2
2c220     01 00 00 FF 
2c224     10 64 06 F1 | 	add	objptr, ##528
2c228     32 7D 0A FB | 	rdlong	result2, objptr wz
2c22c     01 00 00 FF 
2c230     10 64 86 F1 | 	sub	objptr, ##528
2c234                 | '         return RES_NOTRDY;
2c234     03 7A 06 A6 |  if_e	mov	result1, #3
2c238     E8 00 90 AD |  if_e	jmp	#LR__4640
2c23c     53 95 02 F6 | 	mov	arg02, local01
2c240     54 97 02 F6 | 	mov	arg03, local02
2c244     01 00 00 FF 
2c248     10 64 06 F1 | 	add	objptr, ##528
2c24c     32 93 02 FB | 	rdlong	arg01, objptr
2c250     49 99 02 F6 | 	mov	arg04, arg01
2c254     30 98 06 F1 | 	add	arg04, #48
2c258     4C B3 02 FB | 	rdlong	local07, arg04
2c25c     59 B5 02 F6 | 	mov	local08, local07
2c260     13 B2 46 F7 | 	zerox	local07, #19
2c264     14 B4 46 F0 | 	shr	local08, #20
2c268     02 B4 66 F0 | 	shl	local08, #2
2c26c     2D B5 02 F1 | 	add	local08, __methods__
2c270     5A B5 02 FB | 	rdlong	local08, local08
2c274     01 00 00 FF 
2c278     10 64 86 F1 | 	sub	objptr, ##528
2c27c     00 98 06 F6 | 	mov	arg04, #0
2c280     32 B7 02 F6 | 	mov	local09, objptr
2c284     59 65 02 F6 | 	mov	objptr, local07
2c288     2D B4 62 FD | 	call	local08
2c28c     5B 65 02 F6 | 	mov	objptr, local09
2c290     3D AB 02 F6 | 	mov	local03, result1
2c294     3E AD 02 F6 | 	mov	local04, result2
2c298     55 93 02 F6 | 	mov	arg01, local03
2c29c     56 95 02 F6 | 	mov	arg02, local04
2c2a0     53 97 02 F6 | 	mov	arg03, local01
2c2a4     54 99 02 F6 | 	mov	arg04, local02
2c2a8     00 7A 06 F6 | 	mov	result1, #0
2c2ac     4B 93 1A F2 | 	cmp	arg01, arg03 wcz
2c2b0     4C 95 7A F2 | 	cmpsx	arg02, arg04 wcz
2c2b4     01 7A 86 56 |  if_ne	negc	result1, #1
2c2b8     00 7A 0E F2 | 	cmp	result1, #0 wz
2c2bc                 | '         return RES_ERROR;
2c2bc     01 7A 06 56 |  if_ne	mov	result1, #1
2c2c0     60 00 90 5D |  if_ne	jmp	#LR__4640
2c2c4     09 B0 66 F0 | 	shl	local06, #9
2c2c8     01 00 00 FF 
2c2cc     10 64 06 F1 | 	add	objptr, ##528
2c2d0     32 93 02 FB | 	rdlong	arg01, objptr
2c2d4     49 AB 02 F6 | 	mov	local03, arg01
2c2d8     18 AA 06 F1 | 	add	local03, #24
2c2dc     55 AB 02 FB | 	rdlong	local03, local03
2c2e0     55 B7 02 F6 | 	mov	local09, local03
2c2e4     13 B6 46 F7 | 	zerox	local09, #19
2c2e8     14 AA 46 F0 | 	shr	local03, #20
2c2ec     02 AA 66 F0 | 	shl	local03, #2
2c2f0     2D AB 02 F1 | 	add	local03, __methods__
2c2f4     55 AB 02 FB | 	rdlong	local03, local03
2c2f8     01 00 00 FF 
2c2fc     10 64 86 F1 | 	sub	objptr, ##528
2c300     57 95 02 F6 | 	mov	arg02, local05
2c304     58 97 02 F6 | 	mov	arg03, local06
2c308     32 B5 02 F6 | 	mov	local08, objptr
2c30c     5B 65 02 F6 | 	mov	objptr, local09
2c310     2D AA 62 FD | 	call	local03
2c314     5A 65 02 F6 | 	mov	objptr, local08
2c318     58 7B 0A F2 | 	cmp	result1, local06 wz
2c31c                 | '         return RES_ERROR;
2c31c     01 7A 06 56 |  if_ne	mov	result1, #1
2c320                 | '     }
2c320                 | '     return RES_OK;
2c320     00 7A 06 A6 |  if_e	mov	result1, #0
2c324                 | LR__4640
2c324     E7 F0 03 F6 | 	mov	ptra, fp
2c328     F2 00 A0 FD | 	call	#popregs_
2c32c                 | _fatfs_cc_disk_write_ret
2c32c     2D 00 64 FD | 	ret
2c330                 | 
2c330                 | _fatfs_cc_disk_ioctl
2c330     03 CA 05 F6 | 	mov	COUNT_, #3
2c334     E8 00 A0 FD | 	call	#pushregs_
2c338     01 00 00 FF 
2c33c     10 64 06 F1 | 	add	objptr, ##528
2c340     32 93 0A FB | 	rdlong	arg01, objptr wz
2c344     01 00 00 FF 
2c348     10 64 86 F1 | 	sub	objptr, ##528
2c34c                 | '         return RES_NOTRDY;
2c34c     03 7A 06 A6 |  if_e	mov	result1, #3
2c350     58 00 90 AD |  if_e	jmp	#LR__4650
2c354     01 00 00 FF 
2c358     10 64 06 F1 | 	add	objptr, ##528
2c35c     32 93 02 FB | 	rdlong	arg01, objptr
2c360     49 A7 02 F6 | 	mov	local01, arg01
2c364     28 A6 06 F1 | 	add	local01, #40
2c368     53 A7 02 FB | 	rdlong	local01, local01
2c36c     53 A9 02 F6 | 	mov	local02, local01
2c370     13 A8 46 F7 | 	zerox	local02, #19
2c374     14 A6 46 F0 | 	shr	local01, #20
2c378     02 A6 66 F0 | 	shl	local01, #2
2c37c     2D A7 02 F1 | 	add	local01, __methods__
2c380     53 A7 02 FB | 	rdlong	local01, local01
2c384     01 00 00 FF 
2c388     10 64 86 F1 | 	sub	objptr, ##528
2c38c     4A 95 E2 F8 | 	getbyte	arg02, arg02, #0
2c390     32 AB 02 F6 | 	mov	local03, objptr
2c394     54 65 02 F6 | 	mov	objptr, local02
2c398     2D A6 62 FD | 	call	local01
2c39c     55 65 02 F6 | 	mov	objptr, local03
2c3a0     00 7A 0E F2 | 	cmp	result1, #0 wz
2c3a4                 | '         return RES_ERROR;
2c3a4     01 7A 06 56 |  if_ne	mov	result1, #1
2c3a8                 | '     return RES_OK;
2c3a8     00 7A 06 A6 |  if_e	mov	result1, #0
2c3ac                 | LR__4650
2c3ac     E7 F0 03 F6 | 	mov	ptra, fp
2c3b0     F2 00 A0 FD | 	call	#popregs_
2c3b4                 | _fatfs_cc_disk_ioctl_ret
2c3b4     2D 00 64 FD | 	ret
2c3b8                 | 
2c3b8                 | _fatfs_cc_tchar2uni
2c3b8     49 81 02 FB | 	rdlong	_var01, arg01
2c3bc     40 83 02 F6 | 	mov	_var02, _var01
2c3c0     01 80 06 F1 | 	add	_var01, #1
2c3c4     40 85 02 F6 | 	mov	_var03, _var01
2c3c8     41 87 C2 FA | 	rdbyte	_var04, _var02
2c3cc     80 86 CE F7 | 	test	_var04, #128 wz
2c3d0     E8 00 90 AD |  if_e	jmp	#LR__4667
2c3d4     43 89 02 F6 | 	mov	_var05, _var04
2c3d8     E0 88 06 F5 | 	and	_var05, #224
2c3dc     C0 88 0E F2 | 	cmp	_var05, #192 wz
2c3e0     1F 86 06 A5 |  if_e	and	_var04, #31
2c3e4     01 8A 06 A6 |  if_e	mov	_var06, #1
2c3e8     34 00 90 AD |  if_e	jmp	#LR__4661
2c3ec     43 89 02 F6 | 	mov	_var05, _var04
2c3f0     F0 88 06 F5 | 	and	_var05, #240
2c3f4     E0 88 0E F2 | 	cmp	_var05, #224 wz
2c3f8     43 87 42 A8 |  if_e	getnib	_var04, _var04, #0
2c3fc     02 8A 06 A6 |  if_e	mov	_var06, #2
2c400     1C 00 90 AD |  if_e	jmp	#LR__4660
2c404     43 89 02 F6 | 	mov	_var05, _var04
2c408     F8 88 06 F5 | 	and	_var05, #248
2c40c     F0 88 0E F2 | 	cmp	_var05, #240 wz
2c410     07 86 06 A5 |  if_e	and	_var04, #7
2c414     03 8A 06 A6 |  if_e	mov	_var06, #3
2c418                 | ' 			return 0xFFFFFFFF;
2c418     01 7A 66 56 |  if_ne	neg	result1, #1
2c41c     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2c420                 | LR__4660
2c420                 | LR__4661
2c420                 | ' 		}
2c420                 | ' 		do {
2c420                 | LR__4662
2c420     42 8D C2 FA | 	rdbyte	_var07, _var03
2c424     46 89 E2 F8 | 	getbyte	_var05, _var07, #0
2c428     C0 88 06 F5 | 	and	_var05, #192
2c42c     80 88 0E F2 | 	cmp	_var05, #128 wz
2c430     01 84 06 F1 | 	add	_var03, #1
2c434     01 7A 66 56 |  if_ne	neg	result1, #1
2c438     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2c43c     06 86 66 F0 | 	shl	_var04, #6
2c440     46 83 E2 F8 | 	getbyte	_var02, _var07, #0
2c444     3F 82 06 F5 | 	and	_var02, #63
2c448     41 87 42 F5 | 	or	_var04, _var02
2c44c     F4 8B 6E FB | 	djnz	_var06, #LR__4662
2c450     80 86 16 F2 | 	cmp	_var04, #128 wc
2c454     24 00 90 CD |  if_b	jmp	#LR__4664
2c458     6C 00 00 FF 
2c45c     00 86 16 F2 | 	cmp	_var04, ##55296 wc
2c460     0C 00 90 CD |  if_b	jmp	#LR__4663
2c464     70 00 00 FF 
2c468     00 86 16 F2 | 	cmp	_var04, ##57344 wc
2c46c     0C 00 90 CD |  if_b	jmp	#LR__4664
2c470                 | LR__4663
2c470     80 08 00 FF 
2c474     00 86 16 F2 | 	cmp	_var04, ##1114112 wc
2c478     08 00 90 CD |  if_b	jmp	#LR__4665
2c47c                 | LR__4664
2c47c     01 7A 66 F6 | 	neg	result1, #1
2c480     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2c484                 | LR__4665
2c484     80 00 00 FF 
2c488     00 86 16 F2 | 	cmp	_var04, ##65536 wc
2c48c     2C 00 90 CD |  if_b	jmp	#LR__4666
2c490     43 83 02 F6 | 	mov	_var02, _var04
2c494     80 00 00 FF 
2c498     00 82 86 F1 | 	sub	_var02, ##65536
2c49c     06 82 66 F0 | 	shl	_var02, #6
2c4a0     80 FF 01 FF 
2c4a4     00 82 06 F5 | 	and	_var02, ##67043328
2c4a8     6E 00 6C FF 
2c4ac     00 88 06 F6 | 	mov	_var05, ##-671032320
2c4b0     41 89 42 F5 | 	or	_var05, _var02
2c4b4     09 86 46 F7 | 	zerox	_var04, #9
2c4b8     44 87 42 F5 | 	or	_var04, _var05
2c4bc                 | LR__4666
2c4bc                 | LR__4667
2c4bc     49 85 62 FC | 	wrlong	_var03, arg01
2c4c0                 | ' 	}
2c4c0                 | ' #line 811 "ff.c"
2c4c0                 | ' 	*str = p;
2c4c0                 | ' 	return uc;
2c4c0     43 7B 02 F6 | 	mov	result1, _var04
2c4c4                 | _fatfs_cc_tchar2uni_ret
2c4c4     2D 00 64 FD | 	ret
2c4c8                 | 
2c4c8                 | _fatfs_cc_put_utf
2c4c8     80 92 16 F2 | 	cmp	arg01, #128 wc
2c4cc     18 00 90 3D |  if_ae	jmp	#LR__4670
2c4d0     01 96 16 F2 | 	cmp	arg03, #1 wc
2c4d4     00 7A 06 C6 |  if_b	mov	result1, #0
2c4d8     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c4dc     4A 93 42 FC | 	wrbyte	arg01, arg02
2c4e0                 | ' 		*buf = (TCHAR)chr;
2c4e0                 | ' 		return 1;
2c4e0     01 7A 06 F6 | 	mov	result1, #1
2c4e4     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c4e8                 | LR__4670
2c4e8     04 00 00 FF 
2c4ec     00 92 16 F2 | 	cmp	arg01, ##2048 wc
2c4f0     40 00 90 3D |  if_ae	jmp	#LR__4671
2c4f4     02 96 16 F2 | 	cmp	arg03, #2 wc
2c4f8     00 7A 06 C6 |  if_b	mov	result1, #0
2c4fc     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c500     49 7B 02 F6 | 	mov	result1, arg01
2c504     06 7A 46 F0 | 	shr	result1, #6
2c508     1F 7A 06 F5 | 	and	result1, #31
2c50c     C0 96 06 F6 | 	mov	arg03, #192
2c510     3D 97 42 F5 | 	or	arg03, result1
2c514     4A 97 42 FC | 	wrbyte	arg03, arg02
2c518     01 94 06 F1 | 	add	arg02, #1
2c51c     3F 92 06 F5 | 	and	arg01, #63
2c520     80 7A 06 F6 | 	mov	result1, #128
2c524     49 7B 42 F5 | 	or	result1, arg01
2c528     4A 7B 42 FC | 	wrbyte	result1, arg02
2c52c                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2c52c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c52c                 | ' 		return 2;
2c52c     02 7A 06 F6 | 	mov	result1, #2
2c530     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c534                 | LR__4671
2c534     80 00 00 FF 
2c538     00 92 16 F2 | 	cmp	arg01, ##65536 wc
2c53c     70 00 90 3D |  if_ae	jmp	#LR__4674
2c540     03 96 16 F2 | 	cmp	arg03, #3 wc
2c544     18 00 90 CD |  if_b	jmp	#LR__4672
2c548     6C 00 00 FF 
2c54c     00 92 16 F2 | 	cmp	arg01, ##55296 wc
2c550     14 00 90 CD |  if_b	jmp	#LR__4673
2c554     70 00 00 FF 
2c558     00 92 16 F2 | 	cmp	arg01, ##57344 wc
2c55c     08 00 90 3D |  if_ae	jmp	#LR__4673
2c560                 | LR__4672
2c560     00 7A 06 F6 | 	mov	result1, #0
2c564     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c568                 | LR__4673
2c568     49 7B 5A F8 | 	getnib	result1, arg01, #3
2c56c     E0 96 06 F6 | 	mov	arg03, #224
2c570     3D 97 42 F5 | 	or	arg03, result1
2c574     4A 97 42 FC | 	wrbyte	arg03, arg02
2c578     01 94 06 F1 | 	add	arg02, #1
2c57c     49 7B 02 F6 | 	mov	result1, arg01
2c580     06 7A 46 F0 | 	shr	result1, #6
2c584     3F 7A 06 F5 | 	and	result1, #63
2c588     80 96 06 F6 | 	mov	arg03, #128
2c58c     3D 97 42 F5 | 	or	arg03, result1
2c590     4A 97 42 FC | 	wrbyte	arg03, arg02
2c594     01 94 06 F1 | 	add	arg02, #1
2c598     3F 92 06 F5 | 	and	arg01, #63
2c59c     80 7A 06 F6 | 	mov	result1, #128
2c5a0     49 7B 42 F5 | 	or	result1, arg01
2c5a4     4A 7B 42 FC | 	wrbyte	result1, arg02
2c5a8                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2c5a8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2c5a8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c5a8                 | ' 		return 3;
2c5a8     03 7A 06 F6 | 	mov	result1, #3
2c5ac     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c5b0                 | LR__4674
2c5b0     04 96 16 F2 | 	cmp	arg03, #4 wc
2c5b4     00 7A 06 C6 |  if_b	mov	result1, #0
2c5b8     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c5bc     49 81 02 F6 | 	mov	_var01, arg01
2c5c0     E0 81 06 F4 | 	bitl	_var01, #480
2c5c4     00 00 6C FF 
2c5c8     00 80 86 F1 | 	sub	_var01, ##-671088640
2c5cc     06 80 46 F0 | 	shr	_var01, #6
2c5d0     49 93 32 F9 | 	getword	arg01, arg01, #0
2c5d4     6E 00 00 FF 
2c5d8     00 92 86 F1 | 	sub	arg01, ##56320
2c5dc     00 08 00 FF 
2c5e0     00 80 16 F2 | 	cmp	_var01, ##1048576 wc
2c5e4     02 00 00 CF 
2c5e8     00 92 16 C2 |  if_b	cmp	arg01, ##1024 wc
2c5ec     00 7A 06 36 |  if_ae	mov	result1, #0
2c5f0     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2c5f4     49 81 42 F5 | 	or	_var01, arg01
2c5f8     80 00 00 FF 
2c5fc     00 80 06 F1 | 	add	_var01, ##65536
2c600     40 7B 02 F6 | 	mov	result1, _var01
2c604     12 7A 46 F0 | 	shr	result1, #18
2c608     07 7A 06 F5 | 	and	result1, #7
2c60c     F0 96 06 F6 | 	mov	arg03, #240
2c610     3D 97 42 F5 | 	or	arg03, result1
2c614     4A 97 42 FC | 	wrbyte	arg03, arg02
2c618     01 94 06 F1 | 	add	arg02, #1
2c61c     40 7B 02 F6 | 	mov	result1, _var01
2c620     0C 7A 46 F0 | 	shr	result1, #12
2c624     3F 7A 06 F5 | 	and	result1, #63
2c628     80 96 06 F6 | 	mov	arg03, #128
2c62c     3D 97 42 F5 | 	or	arg03, result1
2c630     4A 97 42 FC | 	wrbyte	arg03, arg02
2c634     01 94 06 F1 | 	add	arg02, #1
2c638     40 7B 02 F6 | 	mov	result1, _var01
2c63c     06 7A 46 F0 | 	shr	result1, #6
2c640     3F 7A 06 F5 | 	and	result1, #63
2c644     80 96 06 F6 | 	mov	arg03, #128
2c648     3D 97 42 F5 | 	or	arg03, result1
2c64c     4A 97 42 FC | 	wrbyte	arg03, arg02
2c650     01 94 06 F1 | 	add	arg02, #1
2c654     3F 80 06 F5 | 	and	_var01, #63
2c658     80 7A 06 F6 | 	mov	result1, #128
2c65c     40 7B 42 F5 | 	or	result1, _var01
2c660     4A 7B 42 FC | 	wrbyte	result1, arg02
2c664                 | ' 	chr = (hc | chr) + 0x10000;
2c664                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2c664                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2c664                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2c664                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c664                 | ' 	return 4;
2c664     04 7A 06 F6 | 	mov	result1, #4
2c668                 | _fatfs_cc_put_utf_ret
2c668     2D 00 64 FD | 	ret
2c66c                 | 
2c66c                 | _fatfs_cc_sync_window
2c66c     02 CA 05 F6 | 	mov	COUNT_, #2
2c670     E8 00 A0 FD | 	call	#pushregs_
2c674     49 A7 02 F6 | 	mov	local01, arg01
2c678     00 A8 06 F6 | 	mov	local02, #0
2c67c     03 A6 06 F1 | 	add	local01, #3
2c680     53 7B CA FA | 	rdbyte	result1, local01 wz
2c684     03 A6 86 F1 | 	sub	local01, #3
2c688     A4 00 90 AD |  if_e	jmp	#LR__4682
2c68c     01 A6 06 F1 | 	add	local01, #1
2c690     53 93 C2 FA | 	rdbyte	arg01, local01
2c694     33 A6 06 F1 | 	add	local01, #51
2c698     53 95 02 F6 | 	mov	arg02, local01
2c69c     04 A6 86 F1 | 	sub	local01, #4
2c6a0     53 97 02 FB | 	rdlong	arg03, local01
2c6a4     30 A6 86 F1 | 	sub	local01, #48
2c6a8     01 98 06 F6 | 	mov	arg04, #1
2c6ac     44 FB BF FD | 	call	#_fatfs_cc_disk_write
2c6b0     00 7A 0E F2 | 	cmp	result1, #0 wz
2c6b4     74 00 90 5D |  if_ne	jmp	#LR__4680
2c6b8     03 A6 06 F1 | 	add	local01, #3
2c6bc     53 01 48 FC | 	wrbyte	#0, local01
2c6c0     2D A6 06 F1 | 	add	local01, #45
2c6c4     53 7B 02 FB | 	rdlong	result1, local01
2c6c8     0C A6 86 F1 | 	sub	local01, #12
2c6cc     53 99 02 FB | 	rdlong	arg04, local01
2c6d0     4C 7B 82 F1 | 	sub	result1, arg04
2c6d4     08 A6 86 F1 | 	sub	local01, #8
2c6d8     53 99 02 FB | 	rdlong	arg04, local01
2c6dc     1C A6 86 F1 | 	sub	local01, #28
2c6e0     4C 7B 12 F2 | 	cmp	result1, arg04 wc
2c6e4     48 00 90 3D |  if_ae	jmp	#LR__4681
2c6e8     02 A6 06 F1 | 	add	local01, #2
2c6ec     53 99 C2 FA | 	rdbyte	arg04, local01
2c6f0     02 A6 86 F1 | 	sub	local01, #2
2c6f4     02 98 0E F2 | 	cmp	arg04, #2 wz
2c6f8     34 00 90 5D |  if_ne	jmp	#LR__4681
2c6fc     01 A6 06 F1 | 	add	local01, #1
2c700     53 93 C2 FA | 	rdbyte	arg01, local01
2c704     33 A6 06 F1 | 	add	local01, #51
2c708     53 95 02 F6 | 	mov	arg02, local01
2c70c     04 A6 86 F1 | 	sub	local01, #4
2c710     53 97 02 FB | 	rdlong	arg03, local01
2c714     14 A6 86 F1 | 	sub	local01, #20
2c718     53 A7 02 FB | 	rdlong	local01, local01
2c71c     53 97 02 F1 | 	add	arg03, local01
2c720     01 98 06 F6 | 	mov	arg04, #1
2c724     CC FA BF FD | 	call	#_fatfs_cc_disk_write
2c728     04 00 90 FD | 	jmp	#LR__4681
2c72c                 | LR__4680
2c72c     01 A8 06 F6 | 	mov	local02, #1
2c730                 | LR__4681
2c730                 | LR__4682
2c730                 | ' 			res = FR_DISK_ERR;
2c730                 | ' 		}
2c730                 | ' 	}
2c730                 | ' 	return res;
2c730     54 7B 02 F6 | 	mov	result1, local02
2c734     E7 F0 03 F6 | 	mov	ptra, fp
2c738     F2 00 A0 FD | 	call	#popregs_
2c73c                 | _fatfs_cc_sync_window_ret
2c73c     2D 00 64 FD | 	ret
2c740                 | 
2c740                 | _fatfs_cc_move_window
2c740     03 CA 05 F6 | 	mov	COUNT_, #3
2c744     E8 00 A0 FD | 	call	#pushregs_
2c748     49 A7 02 F6 | 	mov	local01, arg01
2c74c     4A A9 02 F6 | 	mov	local02, arg02
2c750     00 AA 06 F6 | 	mov	local03, #0
2c754     30 A6 06 F1 | 	add	local01, #48
2c758     53 99 02 FB | 	rdlong	arg04, local01
2c75c     30 A6 86 F1 | 	sub	local01, #48
2c760     4C A9 0A F2 | 	cmp	local02, arg04 wz
2c764     40 00 90 AD |  if_e	jmp	#LR__4691
2c768     53 93 02 F6 | 	mov	arg01, local01
2c76c     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2c770     3D AB 0A F6 | 	mov	local03, result1 wz
2c774     30 00 90 5D |  if_ne	jmp	#LR__4690
2c778     01 A6 06 F1 | 	add	local01, #1
2c77c     53 93 C2 FA | 	rdbyte	arg01, local01
2c780     33 A6 06 F1 | 	add	local01, #51
2c784     53 95 02 F6 | 	mov	arg02, local01
2c788     54 97 02 F6 | 	mov	arg03, local02
2c78c     01 98 06 F6 | 	mov	arg04, #1
2c790     24 F9 BF FD | 	call	#_fatfs_cc_disk_read
2c794     00 7A 0E F2 | 	cmp	result1, #0 wz
2c798     01 A8 66 56 |  if_ne	neg	local02, #1
2c79c     01 AA 06 56 |  if_ne	mov	local03, #1
2c7a0     04 A6 86 F1 | 	sub	local01, #4
2c7a4     53 A9 62 FC | 	wrlong	local02, local01
2c7a8                 | LR__4690
2c7a8                 | LR__4691
2c7a8                 | ' 				sect = (LBA_t)0 - 1;
2c7a8                 | ' 				res = FR_DISK_ERR;
2c7a8                 | ' 			}
2c7a8                 | ' 			fs->winsect = sect;
2c7a8                 | ' 		}
2c7a8                 | ' 	}
2c7a8                 | ' 	return res;
2c7a8     55 7B 02 F6 | 	mov	result1, local03
2c7ac     E7 F0 03 F6 | 	mov	ptra, fp
2c7b0     F2 00 A0 FD | 	call	#popregs_
2c7b4                 | _fatfs_cc_move_window_ret
2c7b4     2D 00 64 FD | 	ret
2c7b8                 | 
2c7b8                 | _fatfs_cc_sync_fs
2c7b8     02 CA 05 F6 | 	mov	COUNT_, #2
2c7bc     E8 00 A0 FD | 	call	#pushregs_
2c7c0     49 A7 02 F6 | 	mov	local01, arg01
2c7c4     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2c7c8     3D A9 0A F6 | 	mov	local02, result1 wz
2c7cc     D8 00 90 5D |  if_ne	jmp	#LR__4701
2c7d0     53 99 C2 FA | 	rdbyte	arg04, local01
2c7d4     03 98 0E F2 | 	cmp	arg04, #3 wz
2c7d8     04 A6 06 A1 |  if_e	add	local01, #4
2c7dc     53 99 C2 AA |  if_e	rdbyte	arg04, local01
2c7e0     04 A6 86 A1 |  if_e	sub	local01, #4
2c7e4     01 98 0E A2 |  if_e	cmp	arg04, #1 wz
2c7e8     A0 00 90 5D |  if_ne	jmp	#LR__4700
2c7ec     34 A6 06 F1 | 	add	local01, #52
2c7f0     53 93 02 F6 | 	mov	arg01, local01
2c7f4     00 94 06 F6 | 	mov	arg02, #0
2c7f8     09 96 C6 F9 | 	decod	arg03, #9
2c7fc     D8 00 A0 FD | 	call	#\builtin_bytefill_
2c800     53 93 02 F6 | 	mov	arg01, local01
2c804     FE 93 06 F1 | 	add	arg01, #510
2c808     55 00 80 FF 
2c80c     49 AB 58 FC | 	wrword	##43605, arg01
2c810     A9 B0 A0 FF 
2c814     53 A5 68 FC | 	wrlong	##1096897106, local01
2c818     53 93 02 F6 | 	mov	arg01, local01
2c81c     E4 93 06 F1 | 	add	arg01, #484
2c820     B9 A0 B0 FF 
2c824     49 E5 68 FC | 	wrlong	##1631679090, arg01
2c828     53 93 02 F6 | 	mov	arg01, local01
2c82c     E8 93 06 F1 | 	add	arg01, #488
2c830     20 A6 86 F1 | 	sub	local01, #32
2c834     53 95 02 FB | 	rdlong	arg02, local01
2c838     49 95 62 FC | 	wrlong	arg02, arg01
2c83c     20 A6 06 F1 | 	add	local01, #32
2c840     53 93 02 F6 | 	mov	arg01, local01
2c844     EC 93 06 F1 | 	add	arg01, #492
2c848     24 A6 86 F1 | 	sub	local01, #36
2c84c     53 95 02 FB | 	rdlong	arg02, local01
2c850     49 95 62 FC | 	wrlong	arg02, arg01
2c854     10 A6 06 F1 | 	add	local01, #16
2c858     53 97 02 FB | 	rdlong	arg03, local01
2c85c     01 96 06 F1 | 	add	arg03, #1
2c860     10 A6 06 F1 | 	add	local01, #16
2c864     53 97 62 FC | 	wrlong	arg03, local01
2c868     2F A6 86 F1 | 	sub	local01, #47
2c86c     53 93 C2 FA | 	rdbyte	arg01, local01
2c870     33 A6 06 F1 | 	add	local01, #51
2c874     53 95 02 F6 | 	mov	arg02, local01
2c878     01 98 06 F6 | 	mov	arg04, #1
2c87c     74 F9 BF FD | 	call	#_fatfs_cc_disk_write
2c880     30 A6 86 F1 | 	sub	local01, #48
2c884     53 01 48 FC | 	wrbyte	#0, local01
2c888     04 A6 86 F1 | 	sub	local01, #4
2c88c                 | LR__4700
2c88c     01 A6 06 F1 | 	add	local01, #1
2c890     53 93 C2 FA | 	rdbyte	arg01, local01
2c894     00 94 06 F6 | 	mov	arg02, #0
2c898     00 96 06 F6 | 	mov	arg03, #0
2c89c     90 FA BF FD | 	call	#_fatfs_cc_disk_ioctl
2c8a0     00 7A 0E F2 | 	cmp	result1, #0 wz
2c8a4     01 A8 06 56 |  if_ne	mov	local02, #1
2c8a8                 | LR__4701
2c8a8                 | ' 	}
2c8a8                 | ' 
2c8a8                 | ' 	return res;
2c8a8     54 7B 02 F6 | 	mov	result1, local02
2c8ac     E7 F0 03 F6 | 	mov	ptra, fp
2c8b0     F2 00 A0 FD | 	call	#popregs_
2c8b4                 | _fatfs_cc_sync_fs_ret
2c8b4     2D 00 64 FD | 	ret
2c8b8                 | 
2c8b8                 | _fatfs_cc_clst2sect
2c8b8     02 94 86 F1 | 	sub	arg02, #2
2c8bc     18 92 06 F1 | 	add	arg01, #24
2c8c0     49 81 02 FB | 	rdlong	_var01, arg01
2c8c4     18 92 86 F1 | 	sub	arg01, #24
2c8c8     02 80 86 F1 | 	sub	_var01, #2
2c8cc     40 95 12 F2 | 	cmp	arg02, _var01 wc
2c8d0     00 7A 06 36 |  if_ae	mov	result1, #0
2c8d4     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2c8d8     0A 92 06 F1 | 	add	arg01, #10
2c8dc     49 81 E2 FA | 	rdword	_var01, arg01
2c8e0     4A 81 02 FD | 	qmul	_var01, arg02
2c8e4                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2c8e4     22 92 06 F1 | 	add	arg01, #34
2c8e8     49 7B 02 FB | 	rdlong	result1, arg01
2c8ec     18 80 62 FD | 	getqx	_var01
2c8f0     40 7B 02 F1 | 	add	result1, _var01
2c8f4                 | _fatfs_cc_clst2sect_ret
2c8f4     2D 00 64 FD | 	ret
2c8f8                 | 
2c8f8                 | _fatfs_cc_get_fat
2c8f8     07 CA 05 F6 | 	mov	COUNT_, #7
2c8fc     E8 00 A0 FD | 	call	#pushregs_
2c900     4A A7 02 F6 | 	mov	local01, arg02
2c904     49 A9 02 FB | 	rdlong	local02, arg01
2c908     02 A6 16 F2 | 	cmp	local01, #2 wc
2c90c     14 00 90 CD |  if_b	jmp	#LR__4710
2c910     18 A8 06 F1 | 	add	local02, #24
2c914     54 AB 02 FB | 	rdlong	local03, local02
2c918     18 A8 86 F1 | 	sub	local02, #24
2c91c     55 A7 12 F2 | 	cmp	local01, local03 wc
2c920     08 00 90 CD |  if_b	jmp	#LR__4711
2c924                 | LR__4710
2c924     01 AC 06 F6 | 	mov	local04, #1
2c928     60 01 90 FD | 	jmp	#LR__4718
2c92c                 | LR__4711
2c92c     01 AC 66 F6 | 	neg	local04, #1
2c930                 | ' 		val = 0xFFFFFFFF;
2c930                 | ' 
2c930                 | ' 		switch (fs->fs_type) {
2c930     54 AF C2 FA | 	rdbyte	local05, local02
2c934     01 AE 86 F1 | 	sub	local05, #1
2c938     03 AE 26 F3 | 	fle	local05, #3
2c93c     30 AE 62 FD | 	jmprel	local05
2c940                 | LR__4712
2c940     0C 00 90 FD | 	jmp	#LR__4713
2c944     B8 00 90 FD | 	jmp	#LR__4714
2c948     F8 00 90 FD | 	jmp	#LR__4715
2c94c     38 01 90 FD | 	jmp	#LR__4716
2c950                 | LR__4713
2c950     53 AF 02 F6 | 	mov	local05, local01
2c954     53 93 02 F6 | 	mov	arg01, local01
2c958     01 92 46 F0 | 	shr	arg01, #1
2c95c     49 AF 02 F1 | 	add	local05, arg01
2c960     54 93 02 F6 | 	mov	arg01, local02
2c964     57 B1 02 F6 | 	mov	local06, local05
2c968     09 B0 46 F0 | 	shr	local06, #9
2c96c     24 A8 06 F1 | 	add	local02, #36
2c970     54 95 02 FB | 	rdlong	arg02, local02
2c974     24 A8 86 F1 | 	sub	local02, #36
2c978     58 95 02 F1 | 	add	arg02, local06
2c97c     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2c980     00 7A 0E F2 | 	cmp	result1, #0 wz
2c984     04 01 90 5D |  if_ne	jmp	#LR__4717
2c988     57 B1 02 F6 | 	mov	local06, local05
2c98c     FF B1 06 F5 | 	and	local06, #511
2c990     54 93 02 F6 | 	mov	arg01, local02
2c994     34 92 06 F1 | 	add	arg01, #52
2c998     49 B1 02 F1 | 	add	local06, arg01
2c99c     58 B3 C2 FA | 	rdbyte	local07, local06
2c9a0     54 93 02 F6 | 	mov	arg01, local02
2c9a4     01 AE 06 F1 | 	add	local05, #1
2c9a8     57 B1 02 F6 | 	mov	local06, local05
2c9ac     09 B0 46 F0 | 	shr	local06, #9
2c9b0     24 A8 06 F1 | 	add	local02, #36
2c9b4     54 95 02 FB | 	rdlong	arg02, local02
2c9b8     24 A8 86 F1 | 	sub	local02, #36
2c9bc     58 95 02 F1 | 	add	arg02, local06
2c9c0     7C FD BF FD | 	call	#_fatfs_cc_move_window
2c9c4     00 7A 0E F2 | 	cmp	result1, #0 wz
2c9c8     C0 00 90 5D |  if_ne	jmp	#LR__4717
2c9cc     FF AF 06 F5 | 	and	local05, #511
2c9d0     34 A8 06 F1 | 	add	local02, #52
2c9d4     54 AF 02 F1 | 	add	local05, local02
2c9d8     57 B1 C2 FA | 	rdbyte	local06, local05
2c9dc     08 B0 66 F0 | 	shl	local06, #8
2c9e0     58 B3 42 F5 | 	or	local07, local06
2c9e4     01 A6 CE F7 | 	test	local01, #1 wz
2c9e8     04 B2 46 50 |  if_ne	shr	local07, #4
2c9ec     59 AB 02 56 |  if_ne	mov	local03, local07
2c9f0     0B B2 46 A7 |  if_e	zerox	local07, #11
2c9f4     59 AB 02 A6 |  if_e	mov	local03, local07
2c9f8     55 AD 02 F6 | 	mov	local04, local03
2c9fc                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2c9fc                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2c9fc                 | ' 			break;
2c9fc     8C 00 90 FD | 	jmp	#LR__4717
2ca00                 | LR__4714
2ca00     54 93 02 F6 | 	mov	arg01, local02
2ca04     53 B1 02 F6 | 	mov	local06, local01
2ca08     08 B0 46 F0 | 	shr	local06, #8
2ca0c     24 A8 06 F1 | 	add	local02, #36
2ca10     54 95 02 FB | 	rdlong	arg02, local02
2ca14     24 A8 86 F1 | 	sub	local02, #36
2ca18     58 95 02 F1 | 	add	arg02, local06
2ca1c     20 FD BF FD | 	call	#_fatfs_cc_move_window
2ca20     00 7A 0E F2 | 	cmp	result1, #0 wz
2ca24     64 00 90 5D |  if_ne	jmp	#LR__4717
2ca28     34 A8 06 F1 | 	add	local02, #52
2ca2c     01 A6 66 F0 | 	shl	local01, #1
2ca30     FF A7 06 F5 | 	and	local01, #511
2ca34     53 A9 02 F1 | 	add	local02, local01
2ca38                 | ' {
2ca38                 | ' 
2ca38                 | ' 	return *((WORD*)ptr);
2ca38     54 7B E2 FA | 	rdword	result1, local02
2ca3c     3D AD 32 F9 | 	getword	local04, result1, #0
2ca40                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2ca40                 | ' 			break;
2ca40     48 00 90 FD | 	jmp	#LR__4717
2ca44                 | LR__4715
2ca44     54 93 02 F6 | 	mov	arg01, local02
2ca48     53 B1 02 F6 | 	mov	local06, local01
2ca4c     07 B0 46 F0 | 	shr	local06, #7
2ca50     24 A8 06 F1 | 	add	local02, #36
2ca54     54 95 02 FB | 	rdlong	arg02, local02
2ca58     24 A8 86 F1 | 	sub	local02, #36
2ca5c     58 95 02 F1 | 	add	arg02, local06
2ca60     DC FC BF FD | 	call	#_fatfs_cc_move_window
2ca64     00 7A 0E F2 | 	cmp	result1, #0 wz
2ca68     20 00 90 5D |  if_ne	jmp	#LR__4717
2ca6c     34 A8 06 F1 | 	add	local02, #52
2ca70     02 A6 66 F0 | 	shl	local01, #2
2ca74     FF A7 06 F5 | 	and	local01, #511
2ca78     53 A9 02 F1 | 	add	local02, local01
2ca7c                 | ' {
2ca7c                 | ' 
2ca7c                 | ' 	return *((DWORD*)ptr);
2ca7c     54 AD 02 FB | 	rdlong	local04, local02
2ca80     7C AC 06 F4 | 	bitl	local04, #124
2ca84                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2ca84                 | ' 			break;
2ca84     04 00 90 FD | 	jmp	#LR__4717
2ca88                 | LR__4716
2ca88     01 AC 06 F6 | 	mov	local04, #1
2ca8c                 | LR__4717
2ca8c                 | LR__4718
2ca8c                 | ' 			val = 1;
2ca8c                 | ' 		}
2ca8c                 | ' 	}
2ca8c                 | ' 
2ca8c                 | ' 	return val;
2ca8c     56 7B 02 F6 | 	mov	result1, local04
2ca90     E7 F0 03 F6 | 	mov	ptra, fp
2ca94     F2 00 A0 FD | 	call	#popregs_
2ca98                 | _fatfs_cc_get_fat_ret
2ca98     2D 00 64 FD | 	ret
2ca9c                 | 
2ca9c                 | _fatfs_cc_put_fat
2ca9c     08 CA 05 F6 | 	mov	COUNT_, #8
2caa0     E8 00 A0 FD | 	call	#pushregs_
2caa4     49 A7 02 F6 | 	mov	local01, arg01
2caa8     4A A9 02 F6 | 	mov	local02, arg02
2caac     4B AB 02 F6 | 	mov	local03, arg03
2cab0     02 AC 06 F6 | 	mov	local04, #2
2cab4     02 A8 16 F2 | 	cmp	local02, #2 wc
2cab8     E0 01 90 CD |  if_b	jmp	#LR__4727
2cabc     18 A6 06 F1 | 	add	local01, #24
2cac0     53 AF 02 FB | 	rdlong	local05, local01
2cac4     18 A6 86 F1 | 	sub	local01, #24
2cac8     57 A9 12 F2 | 	cmp	local02, local05 wc
2cacc     CC 01 90 3D |  if_ae	jmp	#LR__4727
2cad0                 | ' 		switch (fs->fs_type) {
2cad0     53 B1 C2 FA | 	rdbyte	local06, local01
2cad4     01 B0 86 F1 | 	sub	local06, #1
2cad8     03 B0 26 F3 | 	fle	local06, #3
2cadc     30 B0 62 FD | 	jmprel	local06
2cae0                 | LR__4720
2cae0     0C 00 90 FD | 	jmp	#LR__4721
2cae4     F4 00 90 FD | 	jmp	#LR__4724
2cae8     3C 01 90 FD | 	jmp	#LR__4725
2caec     AC 01 90 FD | 	jmp	#LR__4726
2caf0                 | LR__4721
2caf0     54 B3 02 F6 | 	mov	local07, local02
2caf4     54 AF 02 F6 | 	mov	local05, local02
2caf8     01 AE 46 F0 | 	shr	local05, #1
2cafc     57 B3 02 F1 | 	add	local07, local05
2cb00     53 93 02 F6 | 	mov	arg01, local01
2cb04     59 B1 02 F6 | 	mov	local06, local07
2cb08     09 B0 46 F0 | 	shr	local06, #9
2cb0c     24 A6 06 F1 | 	add	local01, #36
2cb10     53 95 02 FB | 	rdlong	arg02, local01
2cb14     24 A6 86 F1 | 	sub	local01, #36
2cb18     58 95 02 F1 | 	add	arg02, local06
2cb1c     20 FC BF FD | 	call	#_fatfs_cc_move_window
2cb20     3D AD 0A F6 | 	mov	local04, result1 wz
2cb24     74 01 90 5D |  if_ne	jmp	#LR__4726
2cb28     53 B5 02 F6 | 	mov	local08, local01
2cb2c     34 B4 06 F1 | 	add	local08, #52
2cb30     59 AF 02 F6 | 	mov	local05, local07
2cb34     FF AF 06 F5 | 	and	local05, #511
2cb38     57 B5 02 F1 | 	add	local08, local05
2cb3c     01 A8 CE F7 | 	test	local02, #1 wz
2cb40     01 B2 06 F1 | 	add	local07, #1
2cb44     18 00 90 AD |  if_e	jmp	#LR__4722
2cb48     5A AF C2 FA | 	rdbyte	local05, local08
2cb4c     57 AF 42 F8 | 	getnib	local05, local05, #0
2cb50     55 B1 E2 F8 | 	getbyte	local06, local03, #0
2cb54     04 B0 66 F0 | 	shl	local06, #4
2cb58     58 AF 42 F5 | 	or	local05, local06
2cb5c     04 00 90 FD | 	jmp	#LR__4723
2cb60                 | LR__4722
2cb60     55 AF 02 F6 | 	mov	local05, local03
2cb64                 | LR__4723
2cb64     5A AF 42 FC | 	wrbyte	local05, local08
2cb68     03 A6 06 F1 | 	add	local01, #3
2cb6c     53 03 48 FC | 	wrbyte	#1, local01
2cb70     03 A6 86 F1 | 	sub	local01, #3
2cb74     53 93 02 F6 | 	mov	arg01, local01
2cb78     59 B5 02 F6 | 	mov	local08, local07
2cb7c     09 B4 46 F0 | 	shr	local08, #9
2cb80     24 A6 06 F1 | 	add	local01, #36
2cb84     53 95 02 FB | 	rdlong	arg02, local01
2cb88     24 A6 86 F1 | 	sub	local01, #36
2cb8c     5A 95 02 F1 | 	add	arg02, local08
2cb90     AC FB BF FD | 	call	#_fatfs_cc_move_window
2cb94     3D AD 0A F6 | 	mov	local04, result1 wz
2cb98     00 01 90 5D |  if_ne	jmp	#LR__4726
2cb9c     53 B5 02 F6 | 	mov	local08, local01
2cba0     34 B4 06 F1 | 	add	local08, #52
2cba4     FF B3 06 F5 | 	and	local07, #511
2cba8     59 B5 02 F1 | 	add	local08, local07
2cbac     01 A8 CE F7 | 	test	local02, #1 wz
2cbb0     04 AA 46 50 |  if_ne	shr	local03, #4
2cbb4     55 AF 02 56 |  if_ne	mov	local05, local03
2cbb8     5A AF C2 AA |  if_e	rdbyte	local05, local08
2cbbc     F0 AE 06 A5 |  if_e	and	local05, #240
2cbc0     55 AB EA A8 |  if_e	getbyte	local03, local03, #1
2cbc4     55 AB 42 A8 |  if_e	getnib	local03, local03, #0
2cbc8     55 AF 42 A5 |  if_e	or	local05, local03
2cbcc     5A AF 42 FC | 	wrbyte	local05, local08
2cbd0     03 A6 06 F1 | 	add	local01, #3
2cbd4     53 03 48 FC | 	wrbyte	#1, local01
2cbd8                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2cbd8                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2cbd8                 | ' 			fs->wflag = 1;
2cbd8                 | ' 			break;
2cbd8     C0 00 90 FD | 	jmp	#LR__4726
2cbdc                 | LR__4724
2cbdc     53 93 02 F6 | 	mov	arg01, local01
2cbe0     54 B5 02 F6 | 	mov	local08, local02
2cbe4     08 B4 46 F0 | 	shr	local08, #8
2cbe8     24 A6 06 F1 | 	add	local01, #36
2cbec     53 95 02 FB | 	rdlong	arg02, local01
2cbf0     24 A6 86 F1 | 	sub	local01, #36
2cbf4     5A 95 02 F1 | 	add	arg02, local08
2cbf8     44 FB BF FD | 	call	#_fatfs_cc_move_window
2cbfc     3D AD 0A F6 | 	mov	local04, result1 wz
2cc00     98 00 90 5D |  if_ne	jmp	#LR__4726
2cc04     34 A6 06 F1 | 	add	local01, #52
2cc08     53 93 02 F6 | 	mov	arg01, local01
2cc0c     01 A8 66 F0 | 	shl	local02, #1
2cc10     FF A9 06 F5 | 	and	local02, #511
2cc14     54 93 02 F1 | 	add	arg01, local02
2cc18     49 AB 52 FC | 	wrword	local03, arg01
2cc1c     31 A6 86 F1 | 	sub	local01, #49
2cc20     53 03 48 FC | 	wrbyte	#1, local01
2cc24                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2cc24                 | ' 			fs->wflag = 1;
2cc24                 | ' 			break;
2cc24     74 00 90 FD | 	jmp	#LR__4726
2cc28                 | LR__4725
2cc28     53 93 02 F6 | 	mov	arg01, local01
2cc2c     54 B5 02 F6 | 	mov	local08, local02
2cc30     07 B4 46 F0 | 	shr	local08, #7
2cc34     24 A6 06 F1 | 	add	local01, #36
2cc38     53 95 02 FB | 	rdlong	arg02, local01
2cc3c     24 A6 86 F1 | 	sub	local01, #36
2cc40     5A 95 02 F1 | 	add	arg02, local08
2cc44     F8 FA BF FD | 	call	#_fatfs_cc_move_window
2cc48     3D AD 0A F6 | 	mov	local04, result1 wz
2cc4c     4C 00 90 5D |  if_ne	jmp	#LR__4726
2cc50     7C AA 06 F4 | 	bitl	local03, #124
2cc54     53 93 02 F6 | 	mov	arg01, local01
2cc58     34 92 06 F1 | 	add	arg01, #52
2cc5c     54 B5 02 F6 | 	mov	local08, local02
2cc60     02 B4 66 F0 | 	shl	local08, #2
2cc64     FF B5 06 F5 | 	and	local08, #511
2cc68     5A 93 02 F1 | 	add	arg01, local08
2cc6c                 | ' {
2cc6c                 | ' 
2cc6c                 | ' 	return *((DWORD*)ptr);
2cc6c     49 B5 02 FB | 	rdlong	local08, arg01
2cc70     00 00 78 FF 
2cc74     00 B4 06 F5 | 	and	local08, ##-268435456
2cc78     5A AB 42 F5 | 	or	local03, local08
2cc7c     34 A6 06 F1 | 	add	local01, #52
2cc80     53 93 02 F6 | 	mov	arg01, local01
2cc84     02 A8 66 F0 | 	shl	local02, #2
2cc88     FF A9 06 F5 | 	and	local02, #511
2cc8c     54 93 02 F1 | 	add	arg01, local02
2cc90     49 AB 62 FC | 	wrlong	local03, arg01
2cc94     31 A6 86 F1 | 	sub	local01, #49
2cc98     53 03 48 FC | 	wrbyte	#1, local01
2cc9c                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2cc9c                 | ' 			}
2cc9c                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2cc9c                 | ' 			fs->wflag = 1;
2cc9c                 | ' 			break;
2cc9c                 | LR__4726
2cc9c                 | LR__4727
2cc9c                 | ' 		}
2cc9c                 | ' 	}
2cc9c                 | ' 	return res;
2cc9c     56 7B 02 F6 | 	mov	result1, local04
2cca0     E7 F0 03 F6 | 	mov	ptra, fp
2cca4     F2 00 A0 FD | 	call	#popregs_
2cca8                 | _fatfs_cc_put_fat_ret
2cca8     2D 00 64 FD | 	ret
2ccac                 | 
2ccac                 | _fatfs_cc_remove_chain
2ccac     05 CA 05 F6 | 	mov	COUNT_, #5
2ccb0     E8 00 A0 FD | 	call	#pushregs_
2ccb4     49 A7 02 F6 | 	mov	local01, arg01
2ccb8     4A A9 02 F6 | 	mov	local02, arg02
2ccbc     4B AB 02 F6 | 	mov	local03, arg03
2ccc0     53 AD 02 FB | 	rdlong	local04, local01
2ccc4     02 A8 16 F2 | 	cmp	local02, #2 wc
2ccc8     14 00 90 CD |  if_b	jmp	#LR__4730
2cccc     18 AC 06 F1 | 	add	local04, #24
2ccd0     56 7B 02 FB | 	rdlong	result1, local04
2ccd4     18 AC 86 F1 | 	sub	local04, #24
2ccd8     3D A9 12 F2 | 	cmp	local02, result1 wc
2ccdc     08 00 90 CD |  if_b	jmp	#LR__4731
2cce0                 | LR__4730
2cce0     02 7A 06 F6 | 	mov	result1, #2
2cce4     CC 00 90 FD | 	jmp	#LR__4736
2cce8                 | LR__4731
2cce8     00 AA 0E F2 | 	cmp	local03, #0 wz
2ccec     18 00 90 AD |  if_e	jmp	#LR__4732
2ccf0     55 95 02 F6 | 	mov	arg02, local03
2ccf4     56 93 02 F6 | 	mov	arg01, local04
2ccf8     01 96 66 F6 | 	neg	arg03, #1
2ccfc     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2cd00     00 7A 0E F2 | 	cmp	result1, #0 wz
2cd04     AC 00 90 5D |  if_ne	jmp	#LR__4736
2cd08                 | LR__4732
2cd08                 | ' 	}
2cd08                 | ' 
2cd08                 | ' 
2cd08                 | ' 	do {
2cd08                 | LR__4733
2cd08     54 95 02 F6 | 	mov	arg02, local02
2cd0c     53 93 02 F6 | 	mov	arg01, local01
2cd10     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2cd14     3D AF 0A F6 | 	mov	local05, result1 wz
2cd18     94 00 90 AD |  if_e	jmp	#LR__4735
2cd1c     01 AE 0E F2 | 	cmp	local05, #1 wz
2cd20     02 7A 06 A6 |  if_e	mov	result1, #2
2cd24     8C 00 90 AD |  if_e	jmp	#LR__4736
2cd28     FF FF 7F FF 
2cd2c     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2cd30     01 7A 06 A6 |  if_e	mov	result1, #1
2cd34     7C 00 90 AD |  if_e	jmp	#LR__4736
2cd38     54 95 02 F6 | 	mov	arg02, local02
2cd3c     56 93 02 F6 | 	mov	arg01, local04
2cd40     00 96 06 F6 | 	mov	arg03, #0
2cd44     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2cd48     3D AB 0A F6 | 	mov	local03, result1 wz
2cd4c     55 7B 02 56 |  if_ne	mov	result1, local03
2cd50     60 00 90 5D |  if_ne	jmp	#LR__4736
2cd54     18 AC 06 F1 | 	add	local04, #24
2cd58     56 AB 02 FB | 	rdlong	local03, local04
2cd5c     02 AA 86 F1 | 	sub	local03, #2
2cd60     04 AC 86 F1 | 	sub	local04, #4
2cd64     56 A9 02 FB | 	rdlong	local02, local04
2cd68     14 AC 86 F1 | 	sub	local04, #20
2cd6c     55 A9 12 F2 | 	cmp	local02, local03 wc
2cd70     24 00 90 3D |  if_ae	jmp	#LR__4734
2cd74     14 AC 06 F1 | 	add	local04, #20
2cd78     56 AB 02 FB | 	rdlong	local03, local04
2cd7c     01 AA 06 F1 | 	add	local03, #1
2cd80     56 AB 62 FC | 	wrlong	local03, local04
2cd84     10 AC 86 F1 | 	sub	local04, #16
2cd88     56 AB C2 FA | 	rdbyte	local03, local04
2cd8c     01 AA 46 F5 | 	or	local03, #1
2cd90     56 AB 42 FC | 	wrbyte	local03, local04
2cd94     04 AC 86 F1 | 	sub	local04, #4
2cd98                 | LR__4734
2cd98     57 A9 02 F6 | 	mov	local02, local05
2cd9c     18 AC 06 F1 | 	add	local04, #24
2cda0     56 AF 02 FB | 	rdlong	local05, local04
2cda4     18 AC 86 F1 | 	sub	local04, #24
2cda8     57 A9 12 F2 | 	cmp	local02, local05 wc
2cdac     58 FF 9F CD |  if_b	jmp	#LR__4733
2cdb0                 | LR__4735
2cdb0                 | ' #line 1500 "ff.c"
2cdb0                 | ' 	return FR_OK;
2cdb0     00 7A 06 F6 | 	mov	result1, #0
2cdb4                 | LR__4736
2cdb4     E7 F0 03 F6 | 	mov	ptra, fp
2cdb8     F2 00 A0 FD | 	call	#popregs_
2cdbc                 | _fatfs_cc_remove_chain_ret
2cdbc     2D 00 64 FD | 	ret
2cdc0                 | 
2cdc0                 | _fatfs_cc_create_chain
2cdc0     09 CA 05 F6 | 	mov	COUNT_, #9
2cdc4     E8 00 A0 FD | 	call	#pushregs_
2cdc8     49 A7 02 F6 | 	mov	local01, arg01
2cdcc     4A A9 0A F6 | 	mov	local02, arg02 wz
2cdd0     53 AB 02 FB | 	rdlong	local03, local01
2cdd4     28 00 90 5D |  if_ne	jmp	#LR__4740
2cdd8     10 AA 06 F1 | 	add	local03, #16
2cddc     55 AD 0A FB | 	rdlong	local04, local03 wz
2cde0     10 AA 86 F1 | 	sub	local03, #16
2cde4     18 AA 06 51 |  if_ne	add	local03, #24
2cde8     55 AF 02 5B |  if_ne	rdlong	local05, local03
2cdec     18 AA 86 51 |  if_ne	sub	local03, #24
2cdf0     57 AD 12 52 |  if_ne	cmp	local04, local05 wc
2cdf4     50 00 90 4D |  if_c_and_nz	jmp	#LR__4741
2cdf8     01 AC 06 F6 | 	mov	local04, #1
2cdfc     48 00 90 FD | 	jmp	#LR__4741
2ce00                 | LR__4740
2ce00     54 95 02 F6 | 	mov	arg02, local02
2ce04     53 93 02 F6 | 	mov	arg01, local01
2ce08     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2ce0c     3D AD 02 F6 | 	mov	local04, result1
2ce10     02 AC 16 F2 | 	cmp	local04, #2 wc
2ce14     01 7A 06 C6 |  if_b	mov	result1, #1
2ce18     BC 01 90 CD |  if_b	jmp	#LR__4751
2ce1c     FF FF 7F FF 
2ce20     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2ce24     56 7B 02 A6 |  if_e	mov	result1, local04
2ce28     AC 01 90 AD |  if_e	jmp	#LR__4751
2ce2c     18 AA 06 F1 | 	add	local03, #24
2ce30     55 AF 02 FB | 	rdlong	local05, local03
2ce34     18 AA 86 F1 | 	sub	local03, #24
2ce38     57 AD 12 F2 | 	cmp	local04, local05 wc
2ce3c     56 7B 02 C6 |  if_b	mov	result1, local04
2ce40     94 01 90 CD |  if_b	jmp	#LR__4751
2ce44     54 AD 02 F6 | 	mov	local04, local02
2ce48                 | LR__4741
2ce48     14 AA 06 F1 | 	add	local03, #20
2ce4c     55 AF 0A FB | 	rdlong	local05, local03 wz
2ce50     14 AA 86 F1 | 	sub	local03, #20
2ce54     00 7A 06 A6 |  if_e	mov	result1, #0
2ce58     7C 01 90 AD |  if_e	jmp	#LR__4751
2ce5c     00 B0 06 F6 | 	mov	local06, #0
2ce60     54 AD 0A F2 | 	cmp	local04, local02 wz
2ce64     74 00 90 5D |  if_ne	jmp	#LR__4744
2ce68     56 B1 02 F6 | 	mov	local06, local04
2ce6c     01 B0 06 F1 | 	add	local06, #1
2ce70     18 AA 06 F1 | 	add	local03, #24
2ce74     55 AF 02 FB | 	rdlong	local05, local03
2ce78     18 AA 86 F1 | 	sub	local03, #24
2ce7c     57 B1 12 F2 | 	cmp	local06, local05 wc
2ce80     02 B0 06 36 |  if_ae	mov	local06, #2
2ce84     58 95 02 F6 | 	mov	arg02, local06
2ce88     53 93 02 F6 | 	mov	arg01, local01
2ce8c     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2ce90     3D AF 02 F6 | 	mov	local05, result1
2ce94     01 AE 0E F2 | 	cmp	local05, #1 wz
2ce98     FF FF 7F 5F 
2ce9c     FF AF 0E 52 |  if_ne	cmp	local05, ##-1 wz
2cea0     57 7B 02 A6 |  if_e	mov	result1, local05
2cea4     30 01 90 AD |  if_e	jmp	#LR__4751
2cea8     00 AE 0E F2 | 	cmp	local05, #0 wz
2ceac     2C 00 90 AD |  if_e	jmp	#LR__4743
2ceb0     10 AA 06 F1 | 	add	local03, #16
2ceb4     55 B3 02 FB | 	rdlong	local07, local03
2ceb8     10 AA 86 F1 | 	sub	local03, #16
2cebc     02 B2 16 F2 | 	cmp	local07, #2 wc
2cec0     14 00 90 CD |  if_b	jmp	#LR__4742
2cec4     18 AA 06 F1 | 	add	local03, #24
2cec8     55 AF 02 FB | 	rdlong	local05, local03
2cecc     18 AA 86 F1 | 	sub	local03, #24
2ced0     57 B3 12 F2 | 	cmp	local07, local05 wc
2ced4     59 AD 02 C6 |  if_b	mov	local04, local07
2ced8                 | LR__4742
2ced8     00 B0 06 F6 | 	mov	local06, #0
2cedc                 | LR__4743
2cedc                 | LR__4744
2cedc     00 B0 0E F2 | 	cmp	local06, #0 wz
2cee0     60 00 90 5D |  if_ne	jmp	#LR__4747
2cee4     56 B1 02 F6 | 	mov	local06, local04
2cee8                 | ' 			ncl = scl;
2cee8                 | ' 			for (;;) {
2cee8                 | LR__4745
2cee8     01 B0 06 F1 | 	add	local06, #1
2ceec     18 AA 06 F1 | 	add	local03, #24
2cef0     55 AF 02 FB | 	rdlong	local05, local03
2cef4     18 AA 86 F1 | 	sub	local03, #24
2cef8     57 B1 12 F2 | 	cmp	local06, local05 wc
2cefc     02 B0 06 36 |  if_ae	mov	local06, #2
2cf00     56 B1 1A 32 |  if_ae	cmp	local06, local04 wcz
2cf04     00 7A 06 16 |  if_a	mov	result1, #0
2cf08     CC 00 90 1D |  if_a	jmp	#LR__4751
2cf0c     58 95 02 F6 | 	mov	arg02, local06
2cf10     53 93 02 F6 | 	mov	arg01, local01
2cf14     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2cf18     3D B3 0A F6 | 	mov	local07, result1 wz
2cf1c     24 00 90 AD |  if_e	jmp	#LR__4746
2cf20     01 B2 0E F2 | 	cmp	local07, #1 wz
2cf24     FF FF 7F 5F 
2cf28     FF B3 0E 52 |  if_ne	cmp	local07, ##-1 wz
2cf2c     59 7B 02 A6 |  if_e	mov	result1, local07
2cf30     A4 00 90 AD |  if_e	jmp	#LR__4751
2cf34     56 B1 0A F2 | 	cmp	local06, local04 wz
2cf38     00 7A 06 A6 |  if_e	mov	result1, #0
2cf3c     98 00 90 AD |  if_e	jmp	#LR__4751
2cf40     A4 FF 9F FD | 	jmp	#LR__4745
2cf44                 | LR__4746
2cf44                 | LR__4747
2cf44     55 93 02 F6 | 	mov	arg01, local03
2cf48     58 95 02 F6 | 	mov	arg02, local06
2cf4c     01 96 66 F6 | 	neg	arg03, #1
2cf50     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2cf54     3D B5 0A F6 | 	mov	local08, result1 wz
2cf58     1C 00 90 5D |  if_ne	jmp	#LR__4748
2cf5c     00 A8 0E F2 | 	cmp	local02, #0 wz
2cf60     14 00 90 AD |  if_e	jmp	#LR__4748
2cf64     55 93 02 F6 | 	mov	arg01, local03
2cf68     54 95 02 F6 | 	mov	arg02, local02
2cf6c     58 97 02 F6 | 	mov	arg03, local06
2cf70     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2cf74     3D B5 02 F6 | 	mov	local08, result1
2cf78                 | LR__4748
2cf78     00 B4 0E F2 | 	cmp	local08, #0 wz
2cf7c     4C 00 90 5D |  if_ne	jmp	#LR__4749
2cf80     10 AA 06 F1 | 	add	local03, #16
2cf84     55 B1 62 FC | 	wrlong	local06, local03
2cf88     08 AA 06 F1 | 	add	local03, #8
2cf8c     55 AF 02 FB | 	rdlong	local05, local03
2cf90     02 AE 86 F1 | 	sub	local05, #2
2cf94     04 AA 86 F1 | 	sub	local03, #4
2cf98     55 B7 02 FB | 	rdlong	local09, local03
2cf9c     14 AA 86 F1 | 	sub	local03, #20
2cfa0     57 B7 1A F2 | 	cmp	local09, local05 wcz
2cfa4     14 AA 06 E1 |  if_be	add	local03, #20
2cfa8     55 B7 02 EB |  if_be	rdlong	local09, local03
2cfac     01 B6 86 E1 |  if_be	sub	local09, #1
2cfb0     55 B7 62 EC |  if_be	wrlong	local09, local03
2cfb4     14 AA 86 E1 |  if_be	sub	local03, #20
2cfb8     04 AA 06 F1 | 	add	local03, #4
2cfbc     55 AF C2 FA | 	rdbyte	local05, local03
2cfc0     01 AE 46 F5 | 	or	local05, #1
2cfc4     55 AF 42 FC | 	wrbyte	local05, local03
2cfc8     08 00 90 FD | 	jmp	#LR__4750
2cfcc                 | LR__4749
2cfcc     01 B4 0E F2 | 	cmp	local08, #1 wz
2cfd0     01 B0 C6 F6 | 	negz	local06, #1
2cfd4                 | LR__4750
2cfd4                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2cfd4                 | ' 	}
2cfd4                 | ' 
2cfd4                 | ' 	return ncl;
2cfd4     58 7B 02 F6 | 	mov	result1, local06
2cfd8                 | LR__4751
2cfd8     E7 F0 03 F6 | 	mov	ptra, fp
2cfdc     F2 00 A0 FD | 	call	#popregs_
2cfe0                 | _fatfs_cc_create_chain_ret
2cfe0     2D 00 64 FD | 	ret
2cfe4                 | 
2cfe4                 | _fatfs_cc_dir_clear
2cfe4     06 CA 05 F6 | 	mov	COUNT_, #6
2cfe8     E8 00 A0 FD | 	call	#pushregs_
2cfec     49 A7 02 F6 | 	mov	local01, arg01
2cff0     4A A9 02 F6 | 	mov	local02, arg02
2cff4     53 93 02 F6 | 	mov	arg01, local01
2cff8     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2cffc     00 7A 0E F2 | 	cmp	result1, #0 wz
2d000     01 7A 06 56 |  if_ne	mov	result1, #1
2d004     90 00 90 5D |  if_ne	jmp	#LR__4762
2d008     53 93 02 F6 | 	mov	arg01, local01
2d00c     54 95 02 F6 | 	mov	arg02, local02
2d010     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2d014     3D AB 02 F6 | 	mov	local03, result1
2d018     30 A6 06 F1 | 	add	local01, #48
2d01c     53 AB 62 FC | 	wrlong	local03, local01
2d020     04 A6 06 F1 | 	add	local01, #4
2d024     53 93 02 F6 | 	mov	arg01, local01
2d028     00 94 06 F6 | 	mov	arg02, #0
2d02c     09 96 C6 F9 | 	decod	arg03, #9
2d030     D8 00 A0 FD | 	call	#\builtin_bytefill_
2d034     53 AD 02 F6 | 	mov	local04, local01
2d038                 | ' #line 1667 "ff.c"
2d038                 | ' 	{
2d038                 | ' 		ibuf = fs->win; szb = 1;
2d038                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2d038     00 AE 06 F6 | 	mov	local05, #0
2d03c     34 A6 86 F1 | 	sub	local01, #52
2d040                 | LR__4760
2d040     0A A6 06 F1 | 	add	local01, #10
2d044     53 B1 E2 FA | 	rdword	local06, local01
2d048     0A A6 86 F1 | 	sub	local01, #10
2d04c     58 AF 12 F2 | 	cmp	local05, local06 wc
2d050     2C 00 90 3D |  if_ae	jmp	#LR__4761
2d054     01 A6 06 F1 | 	add	local01, #1
2d058     53 93 C2 FA | 	rdbyte	arg01, local01
2d05c     01 A6 86 F1 | 	sub	local01, #1
2d060     56 95 02 F6 | 	mov	arg02, local04
2d064     55 97 02 F6 | 	mov	arg03, local03
2d068     57 97 02 F1 | 	add	arg03, local05
2d06c     01 98 06 F6 | 	mov	arg04, #1
2d070     80 F1 BF FD | 	call	#_fatfs_cc_disk_write
2d074     00 7A 0E F2 | 	cmp	result1, #0 wz
2d078     01 AE 06 A1 |  if_e	add	local05, #1
2d07c     C0 FF 9F AD |  if_e	jmp	#LR__4760
2d080                 | LR__4761
2d080                 | ' 	}
2d080                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2d080     0A A6 06 F1 | 	add	local01, #10
2d084     53 AD E2 FA | 	rdword	local04, local01
2d088     56 AF 0A F2 | 	cmp	local05, local04 wz
2d08c     00 B0 06 A6 |  if_e	mov	local06, #0
2d090     01 B0 06 56 |  if_ne	mov	local06, #1
2d094     58 7B 02 F6 | 	mov	result1, local06
2d098                 | LR__4762
2d098     E7 F0 03 F6 | 	mov	ptra, fp
2d09c     F2 00 A0 FD | 	call	#popregs_
2d0a0                 | _fatfs_cc_dir_clear_ret
2d0a0     2D 00 64 FD | 	ret
2d0a4                 | 
2d0a4                 | _fatfs_cc_dir_sdi
2d0a4     06 CA 05 F6 | 	mov	COUNT_, #6
2d0a8     E8 00 A0 FD | 	call	#pushregs_
2d0ac     49 A7 02 F6 | 	mov	local01, arg01
2d0b0     4A A9 02 F6 | 	mov	local02, arg02
2d0b4     53 AB 02 FB | 	rdlong	local03, local01
2d0b8     00 10 00 FF 
2d0bc     00 A8 16 F2 | 	cmp	local02, ##2097152 wc
2d0c0     1F A8 CE C7 |  if_b	test	local02, #31 wz
2d0c4                 | ' 		return FR_INT_ERR;
2d0c4     02 7A 06 76 |  if_nc_or_nz	mov	result1, #2
2d0c8     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4776
2d0cc     10 A6 06 F1 | 	add	local01, #16
2d0d0     53 A9 62 FC | 	wrlong	local02, local01
2d0d4     08 A6 86 F1 | 	sub	local01, #8
2d0d8     53 AD 0A FB | 	rdlong	local04, local01 wz
2d0dc     08 A6 86 F1 | 	sub	local01, #8
2d0e0     55 AF C2 AA |  if_e	rdbyte	local05, local03
2d0e4     03 AE 16 A2 |  if_e	cmp	local05, #3 wc
2d0e8     28 AA 06 21 |  if_nc_and_z	add	local03, #40
2d0ec     55 AD 02 2B |  if_nc_and_z	rdlong	local04, local03
2d0f0     28 AA 86 21 |  if_nc_and_z	sub	local03, #40
2d0f4     00 AC 0E F2 | 	cmp	local04, #0 wz
2d0f8     3C 00 90 5D |  if_ne	jmp	#LR__4770
2d0fc     54 AF 02 F6 | 	mov	local05, local02
2d100     05 AE 46 F0 | 	shr	local05, #5
2d104     08 AA 06 F1 | 	add	local03, #8
2d108     55 95 E2 FA | 	rdword	arg02, local03
2d10c     08 AA 86 F1 | 	sub	local03, #8
2d110     4A AF 12 F2 | 	cmp	local05, arg02 wc
2d114     02 7A 06 36 |  if_ae	mov	result1, #2
2d118     E4 00 90 3D |  if_ae	jmp	#LR__4776
2d11c     28 AA 06 F1 | 	add	local03, #40
2d120     55 AF 02 FB | 	rdlong	local05, local03
2d124     28 AA 86 F1 | 	sub	local03, #40
2d128     18 A6 06 F1 | 	add	local01, #24
2d12c     53 AF 62 FC | 	wrlong	local05, local01
2d130     18 A6 86 F1 | 	sub	local01, #24
2d134     7C 00 90 FD | 	jmp	#LR__4775
2d138                 | LR__4770
2d138     0A AA 06 F1 | 	add	local03, #10
2d13c     55 B1 E2 FA | 	rdword	local06, local03
2d140     0A AA 86 F1 | 	sub	local03, #10
2d144     09 B0 66 F0 | 	shl	local06, #9
2d148                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2d148                 | ' 		while (ofs >= csz) {
2d148                 | LR__4771
2d148     58 A9 12 F2 | 	cmp	local02, local06 wc
2d14c     4C 00 90 CD |  if_b	jmp	#LR__4774
2d150     53 93 02 F6 | 	mov	arg01, local01
2d154     56 95 02 F6 | 	mov	arg02, local04
2d158     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2d15c     3D AD 02 F6 | 	mov	local04, result1
2d160     FF FF 7F FF 
2d164     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2d168     01 7A 06 A6 |  if_e	mov	result1, #1
2d16c     90 00 90 AD |  if_e	jmp	#LR__4776
2d170     02 AC 16 F2 | 	cmp	local04, #2 wc
2d174     14 00 90 CD |  if_b	jmp	#LR__4772
2d178     18 AA 06 F1 | 	add	local03, #24
2d17c     55 AF 02 FB | 	rdlong	local05, local03
2d180     18 AA 86 F1 | 	sub	local03, #24
2d184     57 AD 12 F2 | 	cmp	local04, local05 wc
2d188     08 00 90 CD |  if_b	jmp	#LR__4773
2d18c                 | LR__4772
2d18c     02 7A 06 F6 | 	mov	result1, #2
2d190     6C 00 90 FD | 	jmp	#LR__4776
2d194                 | LR__4773
2d194     58 A9 82 F1 | 	sub	local02, local06
2d198     AC FF 9F FD | 	jmp	#LR__4771
2d19c                 | LR__4774
2d19c     55 93 02 F6 | 	mov	arg01, local03
2d1a0     56 95 02 F6 | 	mov	arg02, local04
2d1a4     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2d1a8     18 A6 06 F1 | 	add	local01, #24
2d1ac     53 7B 62 FC | 	wrlong	result1, local01
2d1b0     18 A6 86 F1 | 	sub	local01, #24
2d1b4                 | LR__4775
2d1b4     14 A6 06 F1 | 	add	local01, #20
2d1b8     53 AD 62 FC | 	wrlong	local04, local01
2d1bc     04 A6 06 F1 | 	add	local01, #4
2d1c0     53 AF 0A FB | 	rdlong	local05, local01 wz
2d1c4     18 A6 86 F1 | 	sub	local01, #24
2d1c8     02 7A 06 A6 |  if_e	mov	result1, #2
2d1cc     30 00 90 AD |  if_e	jmp	#LR__4776
2d1d0     54 B1 02 F6 | 	mov	local06, local02
2d1d4     09 B0 46 F0 | 	shr	local06, #9
2d1d8     18 A6 06 F1 | 	add	local01, #24
2d1dc     53 AF 02 FB | 	rdlong	local05, local01
2d1e0     58 AF 02 F1 | 	add	local05, local06
2d1e4     53 AF 62 FC | 	wrlong	local05, local01
2d1e8     34 AA 06 F1 | 	add	local03, #52
2d1ec     FF A9 06 F5 | 	and	local02, #511
2d1f0     54 AB 02 F1 | 	add	local03, local02
2d1f4     04 A6 06 F1 | 	add	local01, #4
2d1f8     53 AB 62 FC | 	wrlong	local03, local01
2d1fc                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2d1fc                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2d1fc                 | ' 
2d1fc                 | ' 	return FR_OK;
2d1fc     00 7A 06 F6 | 	mov	result1, #0
2d200                 | LR__4776
2d200     E7 F0 03 F6 | 	mov	ptra, fp
2d204     F2 00 A0 FD | 	call	#popregs_
2d208                 | _fatfs_cc_dir_sdi_ret
2d208     2D 00 64 FD | 	ret
2d20c                 | 
2d20c                 | _fatfs_cc_dir_next
2d20c     05 CA 05 F6 | 	mov	COUNT_, #5
2d210     E8 00 A0 FD | 	call	#pushregs_
2d214     49 A7 02 F6 | 	mov	local01, arg01
2d218     4A A9 02 F6 | 	mov	local02, arg02
2d21c     53 AB 02 FB | 	rdlong	local03, local01
2d220     10 A6 06 F1 | 	add	local01, #16
2d224     53 AD 02 FB | 	rdlong	local04, local01
2d228     10 A6 86 F1 | 	sub	local01, #16
2d22c     20 AC 06 F1 | 	add	local04, #32
2d230     00 10 00 FF 
2d234     00 AC 16 F2 | 	cmp	local04, ##2097152 wc
2d238     18 A6 06 31 |  if_ae	add	local01, #24
2d23c     53 01 68 3C |  if_ae	wrlong	#0, local01
2d240     18 A6 86 31 |  if_ae	sub	local01, #24
2d244     18 A6 06 F1 | 	add	local01, #24
2d248     53 95 0A FB | 	rdlong	arg02, local01 wz
2d24c     18 A6 86 F1 | 	sub	local01, #24
2d250     04 7A 06 A6 |  if_e	mov	result1, #4
2d254     64 01 90 AD |  if_e	jmp	#LR__4785
2d258     FF AD CE F7 | 	test	local04, #511 wz
2d25c     3C 01 90 5D |  if_ne	jmp	#LR__4784
2d260     18 A6 06 F1 | 	add	local01, #24
2d264     53 95 02 FB | 	rdlong	arg02, local01
2d268     01 94 06 F1 | 	add	arg02, #1
2d26c     53 95 62 FC | 	wrlong	arg02, local01
2d270     04 A6 86 F1 | 	sub	local01, #4
2d274     53 95 0A FB | 	rdlong	arg02, local01 wz
2d278     14 A6 86 F1 | 	sub	local01, #20
2d27c     2C 00 90 5D |  if_ne	jmp	#LR__4780
2d280     56 95 02 F6 | 	mov	arg02, local04
2d284     05 94 46 F0 | 	shr	arg02, #5
2d288     08 AA 06 F1 | 	add	local03, #8
2d28c     55 A9 E2 FA | 	rdword	local02, local03
2d290     08 AA 86 F1 | 	sub	local03, #8
2d294     54 95 12 F2 | 	cmp	arg02, local02 wc
2d298     18 A6 06 31 |  if_ae	add	local01, #24
2d29c     53 01 68 3C |  if_ae	wrlong	#0, local01
2d2a0                 | ' 				dp->sect = 0; return FR_NO_FILE;
2d2a0     04 7A 06 36 |  if_ae	mov	result1, #4
2d2a4     14 01 90 3D |  if_ae	jmp	#LR__4785
2d2a8     F0 00 90 FD | 	jmp	#LR__4783
2d2ac                 | LR__4780
2d2ac     56 93 02 F6 | 	mov	arg01, local04
2d2b0     09 92 46 F0 | 	shr	arg01, #9
2d2b4     0A AA 06 F1 | 	add	local03, #10
2d2b8     55 95 E2 FA | 	rdword	arg02, local03
2d2bc     0A AA 86 F1 | 	sub	local03, #10
2d2c0     01 94 86 F1 | 	sub	arg02, #1
2d2c4     4A 93 CA F7 | 	test	arg01, arg02 wz
2d2c8     D0 00 90 5D |  if_ne	jmp	#LR__4782
2d2cc     53 93 02 F6 | 	mov	arg01, local01
2d2d0     14 A6 06 F1 | 	add	local01, #20
2d2d4     53 95 02 FB | 	rdlong	arg02, local01
2d2d8     14 A6 86 F1 | 	sub	local01, #20
2d2dc     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2d2e0     3D AF 02 F6 | 	mov	local05, result1
2d2e4     02 AE 16 F2 | 	cmp	local05, #2 wc
2d2e8     02 7A 06 C6 |  if_b	mov	result1, #2
2d2ec     CC 00 90 CD |  if_b	jmp	#LR__4785
2d2f0     FF FF 7F FF 
2d2f4     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2d2f8     01 7A 06 A6 |  if_e	mov	result1, #1
2d2fc     BC 00 90 AD |  if_e	jmp	#LR__4785
2d300     18 AA 06 F1 | 	add	local03, #24
2d304     55 95 02 FB | 	rdlong	arg02, local03
2d308     18 AA 86 F1 | 	sub	local03, #24
2d30c     4A AF 12 F2 | 	cmp	local05, arg02 wc
2d310     68 00 90 CD |  if_b	jmp	#LR__4781
2d314     00 A8 0E F2 | 	cmp	local02, #0 wz
2d318     18 A6 06 A1 |  if_e	add	local01, #24
2d31c     53 01 68 AC |  if_e	wrlong	#0, local01
2d320                 | ' 						dp->sect = 0; return FR_NO_FILE;
2d320     04 7A 06 A6 |  if_e	mov	result1, #4
2d324     94 00 90 AD |  if_e	jmp	#LR__4785
2d328     53 93 02 F6 | 	mov	arg01, local01
2d32c     14 A6 06 F1 | 	add	local01, #20
2d330     53 95 02 FB | 	rdlong	arg02, local01
2d334     14 A6 86 F1 | 	sub	local01, #20
2d338     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2d33c     3D AF 0A F6 | 	mov	local05, result1 wz
2d340     07 7A 06 A6 |  if_e	mov	result1, #7
2d344     74 00 90 AD |  if_e	jmp	#LR__4785
2d348     01 AE 0E F2 | 	cmp	local05, #1 wz
2d34c     02 7A 06 A6 |  if_e	mov	result1, #2
2d350     68 00 90 AD |  if_e	jmp	#LR__4785
2d354     FF FF 7F FF 
2d358     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2d35c     01 7A 06 A6 |  if_e	mov	result1, #1
2d360     58 00 90 AD |  if_e	jmp	#LR__4785
2d364     57 95 02 F6 | 	mov	arg02, local05
2d368     55 93 02 F6 | 	mov	arg01, local03
2d36c     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2d370     00 7A 0E F2 | 	cmp	result1, #0 wz
2d374     01 7A 06 56 |  if_ne	mov	result1, #1
2d378     40 00 90 5D |  if_ne	jmp	#LR__4785
2d37c                 | LR__4781
2d37c     14 A6 06 F1 | 	add	local01, #20
2d380     53 AF 62 FC | 	wrlong	local05, local01
2d384     55 93 02 F6 | 	mov	arg01, local03
2d388     57 95 02 F6 | 	mov	arg02, local05
2d38c     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2d390     04 A6 06 F1 | 	add	local01, #4
2d394     53 7B 62 FC | 	wrlong	result1, local01
2d398     18 A6 86 F1 | 	sub	local01, #24
2d39c                 | LR__4782
2d39c                 | LR__4783
2d39c                 | LR__4784
2d39c     10 A6 06 F1 | 	add	local01, #16
2d3a0     53 AD 62 FC | 	wrlong	local04, local01
2d3a4     34 AA 06 F1 | 	add	local03, #52
2d3a8     FF AD 06 F5 | 	and	local04, #511
2d3ac     56 AB 02 F1 | 	add	local03, local04
2d3b0     0C A6 06 F1 | 	add	local01, #12
2d3b4     53 AB 62 FC | 	wrlong	local03, local01
2d3b8                 | ' #line 1771 "ff.c"
2d3b8                 | ' 				}
2d3b8                 | ' 				dp->clust = clst;
2d3b8                 | ' 				dp->sect = clst2sect(fs, clst);
2d3b8                 | ' 			}
2d3b8                 | ' 		}
2d3b8                 | ' 	}
2d3b8                 | ' 	dp->dptr = ofs;
2d3b8                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2d3b8                 | ' 
2d3b8                 | ' 	return FR_OK;
2d3b8     00 7A 06 F6 | 	mov	result1, #0
2d3bc                 | LR__4785
2d3bc     E7 F0 03 F6 | 	mov	ptra, fp
2d3c0     F2 00 A0 FD | 	call	#popregs_
2d3c4                 | _fatfs_cc_dir_next_ret
2d3c4     2D 00 64 FD | 	ret
2d3c8                 | 
2d3c8                 | _fatfs_cc_dir_alloc
2d3c8     08 CA 05 F6 | 	mov	COUNT_, #8
2d3cc     E8 00 A0 FD | 	call	#pushregs_
2d3d0     49 A7 02 F6 | 	mov	local01, arg01
2d3d4     4A A9 02 F6 | 	mov	local02, arg02
2d3d8     53 AB 02 FB | 	rdlong	local03, local01
2d3dc     53 93 02 F6 | 	mov	arg01, local01
2d3e0     00 94 06 F6 | 	mov	arg02, #0
2d3e4     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2d3e8     3D AD 0A F6 | 	mov	local04, result1 wz
2d3ec     70 00 90 5D |  if_ne	jmp	#LR__4794
2d3f0     00 AE 06 F6 | 	mov	local05, #0
2d3f4                 | ' 		n = 0;
2d3f4                 | ' 		do {
2d3f4                 | LR__4790
2d3f4     18 A6 06 F1 | 	add	local01, #24
2d3f8     53 95 02 FB | 	rdlong	arg02, local01
2d3fc     18 A6 86 F1 | 	sub	local01, #24
2d400     55 93 02 F6 | 	mov	arg01, local03
2d404     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2d408     3D AD 0A F6 | 	mov	local04, result1 wz
2d40c     50 00 90 5D |  if_ne	jmp	#LR__4793
2d410     1C A6 06 F1 | 	add	local01, #28
2d414     53 B1 02 FB | 	rdlong	local06, local01
2d418     1C A6 86 F1 | 	sub	local01, #28
2d41c     58 B1 C2 FA | 	rdbyte	local06, local06
2d420     E5 B0 0E F2 | 	cmp	local06, #229 wz
2d424     1C A6 06 51 |  if_ne	add	local01, #28
2d428     53 B3 02 5B |  if_ne	rdlong	local07, local01
2d42c     1C A6 86 51 |  if_ne	sub	local01, #28
2d430     59 B5 CA 5A |  if_ne	rdbyte	local08, local07 wz
2d434     10 00 90 5D |  if_ne	jmp	#LR__4791
2d438     01 AE 06 F1 | 	add	local05, #1
2d43c     54 AF 0A F2 | 	cmp	local05, local02 wz
2d440     1C 00 90 AD |  if_e	jmp	#LR__4793
2d444     04 00 90 FD | 	jmp	#LR__4792
2d448                 | LR__4791
2d448     00 AE 06 F6 | 	mov	local05, #0
2d44c                 | LR__4792
2d44c     53 93 02 F6 | 	mov	arg01, local01
2d450     01 94 06 F6 | 	mov	arg02, #1
2d454     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2d458     3D AD 0A F6 | 	mov	local04, result1 wz
2d45c     94 FF 9F AD |  if_e	jmp	#LR__4790
2d460                 | LR__4793
2d460                 | LR__4794
2d460     04 AC 0E F2 | 	cmp	local04, #4 wz
2d464     07 AC 06 A6 |  if_e	mov	local04, #7
2d468                 | ' 	return res;
2d468     56 7B 02 F6 | 	mov	result1, local04
2d46c     E7 F0 03 F6 | 	mov	ptra, fp
2d470     F2 00 A0 FD | 	call	#popregs_
2d474                 | _fatfs_cc_dir_alloc_ret
2d474     2D 00 64 FD | 	ret
2d478                 | 
2d478                 | _fatfs_cc_ld_clust
2d478     49 81 02 F6 | 	mov	_var01, arg01
2d47c     4A 93 02 F6 | 	mov	arg01, arg02
2d480     1A 92 06 F1 | 	add	arg01, #26
2d484                 | ' {
2d484                 | ' 
2d484                 | ' 	return *((WORD*)ptr);
2d484     49 7B E2 FA | 	rdword	result1, arg01
2d488     3D 93 32 F9 | 	getword	arg01, result1, #0
2d48c     40 81 C2 FA | 	rdbyte	_var01, _var01
2d490     03 80 0E F2 | 	cmp	_var01, #3 wz
2d494     14 94 06 A1 |  if_e	add	arg02, #20
2d498                 | ' {
2d498                 | ' 
2d498                 | ' 	return *((WORD*)ptr);
2d498     4A 7B E2 AA |  if_e	rdword	result1, arg02
2d49c     10 7A 66 A0 |  if_e	shl	result1, #16
2d4a0     3D 93 42 A5 |  if_e	or	arg01, result1
2d4a4                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2d4a4                 | ' 	}
2d4a4                 | ' 
2d4a4                 | ' 	return cl;
2d4a4     49 7B 02 F6 | 	mov	result1, arg01
2d4a8                 | _fatfs_cc_ld_clust_ret
2d4a8     2D 00 64 FD | 	ret
2d4ac                 | 
2d4ac                 | _fatfs_cc_st_clust
2d4ac     49 81 02 F6 | 	mov	_var01, arg01
2d4b0     4A 93 02 F6 | 	mov	arg01, arg02
2d4b4     1A 92 06 F1 | 	add	arg01, #26
2d4b8     49 97 52 FC | 	wrword	arg03, arg01
2d4bc     40 81 C2 FA | 	rdbyte	_var01, _var01
2d4c0     03 80 0E F2 | 	cmp	_var01, #3 wz
2d4c4     14 94 06 A1 |  if_e	add	arg02, #20
2d4c8     10 96 46 A0 |  if_e	shr	arg03, #16
2d4cc     4A 97 52 AC |  if_e	wrword	arg03, arg02
2d4d0                 | _fatfs_cc_st_clust_ret
2d4d0     2D 00 64 FD | 	ret
2d4d4                 | 
2d4d4                 | _fatfs_cc_cmp_lfn
2d4d4     07 CA 05 F6 | 	mov	COUNT_, #7
2d4d8     E8 00 A0 FD | 	call	#pushregs_
2d4dc     49 A7 02 F6 | 	mov	local01, arg01
2d4e0     4A 93 02 F6 | 	mov	arg01, arg02
2d4e4     1A 92 06 F1 | 	add	arg01, #26
2d4e8                 | ' {
2d4e8                 | ' 
2d4e8                 | ' 	return *((WORD*)ptr);
2d4e8     49 7B EA FA | 	rdword	result1, arg01 wz
2d4ec     00 7A 06 56 |  if_ne	mov	result1, #0
2d4f0     D8 00 90 5D |  if_ne	jmp	#LR__4806
2d4f4     4A A9 C2 FA | 	rdbyte	local02, arg02
2d4f8     3F A8 06 F5 | 	and	local02, #63
2d4fc     01 A8 86 F1 | 	sub	local02, #1
2d500     0D A8 06 FD | 	qmul	local02, #13
2d504                 | ' 
2d504                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2d504                 | ' 
2d504                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2d504     01 AA 06 F6 | 	mov	local03, #1
2d508     00 AC 06 F6 | 	mov	local04, #0
2d50c     18 AE 62 FD | 	getqx	local05
2d510                 | LR__4800
2d510     0D AC 16 F2 | 	cmp	local04, #13 wc
2d514     94 00 90 3D |  if_ae	jmp	#LR__4805
2d518     4A 93 02 F6 | 	mov	arg01, arg02
2d51c     56 A9 02 F6 | 	mov	local02, local04
2d520     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2d524     01 00 00 FF 
2d528     AE 7B 06 F1 | 	add	result1, ##942
2d52c     3D A9 02 F1 | 	add	local02, result1
2d530     54 A9 C2 FA | 	rdbyte	local02, local02
2d534     54 93 02 F1 | 	add	arg01, local02
2d538                 | ' {
2d538                 | ' 
2d538                 | ' 	return *((WORD*)ptr);
2d538     49 7B E2 FA | 	rdword	result1, arg01
2d53c     3D B1 02 F6 | 	mov	local06, result1
2d540     55 A9 02 F6 | 	mov	local02, local03
2d544     0F A8 4E F7 | 	zerox	local02, #15 wz
2d548     44 00 90 AD |  if_e	jmp	#LR__4803
2d54c     00 AF 16 F2 | 	cmp	local05, #256 wc
2d550     2C 00 90 3D |  if_ae	jmp	#LR__4801
2d554     58 93 32 F9 | 	getword	arg01, local06, #0
2d558     CC E4 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2d55c     3D A9 02 F6 | 	mov	local02, result1
2d560     57 AB 02 F6 | 	mov	local03, local05
2d564     01 AA 66 F0 | 	shl	local03, #1
2d568     53 AB 02 F1 | 	add	local03, local01
2d56c     55 93 E2 FA | 	rdword	arg01, local03
2d570     01 AE 06 F1 | 	add	local05, #1
2d574     B0 E4 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2d578     3D A9 0A F2 | 	cmp	local02, result1 wz
2d57c     08 00 90 AD |  if_e	jmp	#LR__4802
2d580                 | LR__4801
2d580                 | ' 				return 0;
2d580     00 7A 06 F6 | 	mov	result1, #0
2d584     44 00 90 FD | 	jmp	#LR__4806
2d588                 | LR__4802
2d588     58 AB 02 F6 | 	mov	local03, local06
2d58c     14 00 90 FD | 	jmp	#LR__4804
2d590                 | LR__4803
2d590     58 B1 32 F9 | 	getword	local06, local06, #0
2d594     7F 00 00 FF 
2d598     FF B1 0E F2 | 	cmp	local06, ##65535 wz
2d59c     00 7A 06 56 |  if_ne	mov	result1, #0
2d5a0     28 00 90 5D |  if_ne	jmp	#LR__4806
2d5a4                 | LR__4804
2d5a4     01 AC 06 F1 | 	add	local04, #1
2d5a8     64 FF 9F FD | 	jmp	#LR__4800
2d5ac                 | LR__4805
2d5ac     4A A9 C2 FA | 	rdbyte	local02, arg02
2d5b0     40 A8 CE F7 | 	test	local02, #64 wz
2d5b4     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
2d5b8     01 AE 66 50 |  if_ne	shl	local05, #1
2d5bc     53 AF 02 51 |  if_ne	add	local05, local01
2d5c0     57 B3 EA 5A |  if_ne	rdword	local07, local05 wz
2d5c4     00 7A 06 56 |  if_ne	mov	result1, #0
2d5c8                 | ' 
2d5c8                 | ' 	return 1;
2d5c8     01 7A 06 A6 |  if_e	mov	result1, #1
2d5cc                 | LR__4806
2d5cc     E7 F0 03 F6 | 	mov	ptra, fp
2d5d0     F2 00 A0 FD | 	call	#popregs_
2d5d4                 | _fatfs_cc_cmp_lfn_ret
2d5d4     2D 00 64 FD | 	ret
2d5d8                 | 
2d5d8                 | _fatfs_cc_pick_lfn
2d5d8     49 81 02 F6 | 	mov	_var01, arg01
2d5dc     4A 93 02 F6 | 	mov	arg01, arg02
2d5e0     1A 92 06 F1 | 	add	arg01, #26
2d5e4                 | ' {
2d5e4                 | ' 
2d5e4                 | ' 	return *((WORD*)ptr);
2d5e4     49 7B EA FA | 	rdword	result1, arg01 wz
2d5e8     00 7A 06 56 |  if_ne	mov	result1, #0
2d5ec     CC 00 90 5D |  if_ne	jmp	#LR__4815
2d5f0     4A 83 C2 FA | 	rdbyte	_var02, arg02
2d5f4     40 82 26 F5 | 	andn	_var02, #64
2d5f8     01 82 86 F1 | 	sub	_var02, #1
2d5fc     0D 82 06 FD | 	qmul	_var02, #13
2d600                 | ' 
2d600                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2d600                 | ' 
2d600                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2d600     01 84 06 F6 | 	mov	_var03, #1
2d604     00 86 06 F6 | 	mov	_var04, #0
2d608     18 88 62 FD | 	getqx	_var05
2d60c                 | LR__4810
2d60c     0D 86 16 F2 | 	cmp	_var04, #13 wc
2d610     78 00 90 3D |  if_ae	jmp	#LR__4813
2d614     4A 93 02 F6 | 	mov	arg01, arg02
2d618     43 83 02 F6 | 	mov	_var02, _var04
2d61c     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2d620     01 00 00 FF 
2d624     AE 7B 06 F1 | 	add	result1, ##942
2d628     3D 83 02 F1 | 	add	_var02, result1
2d62c     41 83 C2 FA | 	rdbyte	_var02, _var02
2d630     41 93 02 F1 | 	add	arg01, _var02
2d634                 | ' {
2d634                 | ' 
2d634                 | ' 	return *((WORD*)ptr);
2d634     49 7B E2 FA | 	rdword	result1, arg01
2d638     3D 8B 02 F6 | 	mov	_var06, result1
2d63c     42 83 02 F6 | 	mov	_var02, _var03
2d640     0F 82 4E F7 | 	zerox	_var02, #15 wz
2d644     28 00 90 AD |  if_e	jmp	#LR__4811
2d648     00 89 16 F2 | 	cmp	_var05, #256 wc
2d64c     00 7A 06 36 |  if_ae	mov	result1, #0
2d650     68 00 90 3D |  if_ae	jmp	#LR__4815
2d654     44 83 02 F6 | 	mov	_var02, _var05
2d658     01 82 66 F0 | 	shl	_var02, #1
2d65c     40 83 02 F1 | 	add	_var02, _var01
2d660     45 85 02 F6 | 	mov	_var03, _var06
2d664     41 85 52 FC | 	wrword	_var03, _var02
2d668     01 88 06 F1 | 	add	_var05, #1
2d66c     14 00 90 FD | 	jmp	#LR__4812
2d670                 | LR__4811
2d670     45 8B 32 F9 | 	getword	_var06, _var06, #0
2d674     7F 00 00 FF 
2d678     FF 8B 0E F2 | 	cmp	_var06, ##65535 wz
2d67c     00 7A 06 56 |  if_ne	mov	result1, #0
2d680     38 00 90 5D |  if_ne	jmp	#LR__4815
2d684                 | LR__4812
2d684     01 86 06 F1 | 	add	_var04, #1
2d688     80 FF 9F FD | 	jmp	#LR__4810
2d68c                 | LR__4813
2d68c     4A 83 C2 FA | 	rdbyte	_var02, arg02
2d690     40 82 CE F7 | 	test	_var02, #64 wz
2d694     42 8D 02 56 |  if_ne	mov	_var07, _var03
2d698     0F 8C 4E 57 |  if_ne	zerox	_var07, #15 wz
2d69c     18 00 90 AD |  if_e	jmp	#LR__4814
2d6a0     00 89 16 F2 | 	cmp	_var05, #256 wc
2d6a4     00 7A 06 36 |  if_ae	mov	result1, #0
2d6a8     10 00 90 3D |  if_ae	jmp	#LR__4815
2d6ac     01 88 66 F0 | 	shl	_var05, #1
2d6b0     40 89 02 F1 | 	add	_var05, _var01
2d6b4     44 01 58 FC | 	wrword	#0, _var05
2d6b8                 | LR__4814
2d6b8                 | ' 		lfnbuf[i] = 0;
2d6b8                 | ' 	}
2d6b8                 | ' 
2d6b8                 | ' 	return 1;
2d6b8     01 7A 06 F6 | 	mov	result1, #1
2d6bc                 | LR__4815
2d6bc                 | _fatfs_cc_pick_lfn_ret
2d6bc     2D 00 64 FD | 	ret
2d6c0                 | 
2d6c0                 | _fatfs_cc_put_lfn
2d6c0     4A 81 02 F6 | 	mov	_var01, arg02
2d6c4     0D 80 06 F1 | 	add	_var01, #13
2d6c8     40 99 42 FC | 	wrbyte	arg04, _var01
2d6cc     4B 99 E2 F8 | 	getbyte	arg04, arg03, #0
2d6d0     01 98 86 F1 | 	sub	arg04, #1
2d6d4     0D 98 06 FD | 	qmul	arg04, #13
2d6d8     49 83 02 F6 | 	mov	_var02, arg01
2d6dc     02 80 86 F1 | 	sub	_var01, #2
2d6e0     40 1F 48 FC | 	wrbyte	#15, _var01
2d6e4     01 80 06 F1 | 	add	_var01, #1
2d6e8     40 01 48 FC | 	wrbyte	#0, _var01
2d6ec     0C 80 86 F1 | 	sub	_var01, #12
2d6f0     40 93 02 F6 | 	mov	arg01, _var01
2d6f4     1A 92 06 F1 | 	add	arg01, #26
2d6f8     49 01 58 FC | 	wrword	#0, arg01
2d6fc     00 84 06 F6 | 	mov	_var03, #0
2d700     00 86 06 F6 | 	mov	_var04, #0
2d704                 | ' 	BYTE* dir,
2d704                 | ' 	BYTE ord,
2d704                 | ' 	BYTE sum
2d704                 | ' )
2d704                 | ' {
2d704                 | ' 	UINT i, s;
2d704                 | ' 	WCHAR wc;
2d704                 | ' 
2d704                 | ' 
2d704                 | ' 	dir[ 13 ] = sum;
2d704                 | ' 	dir[ 11 ] =  0x0F ;
2d704                 | ' 	dir[ 12 ] = 0;
2d704                 | ' 	st_word(dir +  26 , 0);
2d704                 | ' 
2d704                 | ' 	i = (ord - 1) * 13;
2d704                 | ' 	s = wc = 0;
2d704                 | ' 	do {
2d704     18 88 62 FD | 	getqx	_var05
2d708     D7 2E 48 FB | 	callpa	#(@LR__4821-@LR__4820)>>2,fcache_load_ptr_
2d70c                 | LR__4820
2d70c     42 99 32 F9 | 	getword	arg04, _var03, #0
2d710     7F 00 00 FF 
2d714     FF 99 0E F2 | 	cmp	arg04, ##65535 wz
2d718     44 93 02 56 |  if_ne	mov	arg01, _var05
2d71c     01 88 06 51 |  if_ne	add	_var05, #1
2d720     01 92 66 50 |  if_ne	shl	arg01, #1
2d724     41 93 02 51 |  if_ne	add	arg01, _var02
2d728     49 85 E2 5A |  if_ne	rdword	_var03, arg01
2d72c     40 93 02 F6 | 	mov	arg01, _var01
2d730     43 99 02 F6 | 	mov	arg04, _var04
2d734     36 95 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2d738     01 00 00 FF 
2d73c     AE 95 06 F1 | 	add	arg02, ##942
2d740     4A 99 02 F1 | 	add	arg04, arg02
2d744     4C 99 C2 FA | 	rdbyte	arg04, arg04
2d748     4C 93 02 F1 | 	add	arg01, arg04
2d74c     49 85 52 FC | 	wrword	_var03, arg01
2d750     42 99 02 F6 | 	mov	arg04, _var03
2d754     0F 98 4E F7 | 	zerox	arg04, #15 wz
2d758     0F 84 CE A9 |  if_e	bmask	_var03, #15
2d75c     01 86 06 F1 | 	add	_var04, #1
2d760     0D 86 16 F2 | 	cmp	_var04, #13 wc
2d764     A4 FF 9F CD |  if_b	jmp	#LR__4820
2d768                 | LR__4821
2d768     42 85 32 F9 | 	getword	_var03, _var03, #0
2d76c     7F 00 00 FF 
2d770     FF 85 0E F2 | 	cmp	_var03, ##65535 wz
2d774     01 88 66 50 |  if_ne	shl	_var05, #1
2d778     41 89 02 51 |  if_ne	add	_var05, _var02
2d77c     44 89 EA 5A |  if_ne	rdword	_var05, _var05 wz
2d780     4B 97 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2d784     40 96 46 A5 |  if_e	or	arg03, #64
2d788     40 97 42 FC | 	wrbyte	arg03, _var01
2d78c                 | _fatfs_cc_put_lfn_ret
2d78c     2D 00 64 FD | 	ret
2d790                 | 
2d790                 | _fatfs_cc_gen_numname
2d790     08 CA 05 F6 | 	mov	COUNT_, #8
2d794     E8 00 A0 FD | 	call	#pushregs_
2d798     2C F0 07 F1 | 	add	ptra, #44
2d79c     49 A7 02 F6 | 	mov	local01, arg01
2d7a0     4A A9 02 F6 | 	mov	local02, arg02
2d7a4     4B AB 02 F6 | 	mov	local03, arg03
2d7a8     4C AD 02 F6 | 	mov	local04, arg04
2d7ac     53 93 02 F6 | 	mov	arg01, local01
2d7b0     54 95 02 F6 | 	mov	arg02, local02
2d7b4     0B 96 06 F6 | 	mov	arg03, #11
2d7b8     84 6E BF FD | 	call	#__system____builtin_memmove
2d7bc     06 AC 16 F2 | 	cmp	local04, #6 wc
2d7c0     48 00 90 CD |  if_b	jmp	#LR__4835
2d7c4     56 AF 02 F6 | 	mov	local05, local04
2d7c8     D7 1E 48 FB | 	callpa	#(@LR__4833-@LR__4830)>>2,fcache_load_ptr_
2d7cc                 | ' 		sreg = seq;
2d7cc                 | ' 		while (*lfn) {
2d7cc                 | LR__4830
2d7cc     55 B1 EA FA | 	rdword	local06, local03 wz
2d7d0     34 00 90 AD |  if_e	jmp	#LR__4834
2d7d4     55 B3 E2 FA | 	rdword	local07, local03
2d7d8                 | ' 			wc = *lfn++;
2d7d8                 | ' 			for (i = 0; i < 16; i++) {
2d7d8     02 AA 06 F1 | 	add	local03, #2
2d7dc     10 12 DC FC | 	rep	@LR__4832, #16
2d7e0                 | LR__4831
2d7e0     01 AE 66 F0 | 	shl	local05, #1
2d7e4     59 B1 32 F9 | 	getword	local06, local07, #0
2d7e8     01 B0 06 F5 | 	and	local06, #1
2d7ec     58 AF 02 F1 | 	add	local05, local06
2d7f0     59 B3 32 F9 | 	getword	local07, local07, #0
2d7f4     01 B2 46 F0 | 	shr	local07, #1
2d7f8     10 AE 2E F4 | 	testbn	local05, #16 wz
2d7fc     88 00 00 5F 
2d800     21 AE 66 55 |  if_ne	xor	local05, ##69665
2d804                 | LR__4832
2d804     C4 FF 9F FD | 	jmp	#LR__4830
2d808                 | LR__4833
2d808                 | LR__4834
2d808     57 AD 02 F6 | 	mov	local04, local05
2d80c                 | LR__4835
2d80c     07 B2 06 F6 | 	mov	local07, #7
2d810     D7 1E 48 FB | 	callpa	#(@LR__4837-@LR__4836)>>2,fcache_load_ptr_
2d814                 | ' 			}
2d814                 | ' 		}
2d814                 | ' 		seq = (UINT)sreg;
2d814                 | ' 	}
2d814                 | ' 
2d814                 | ' 
2d814                 | ' 	i = 7;
2d814                 | ' 	do {
2d814                 | LR__4836
2d814     56 AF 42 F8 | 	getnib	local05, local04, #0
2d818     30 AE 06 F1 | 	add	local05, #48
2d81c     04 AC 46 F0 | 	shr	local04, #4
2d820     57 B1 E2 F8 | 	getbyte	local06, local05, #0
2d824     3A B0 16 F2 | 	cmp	local06, #58 wc
2d828     57 AF E2 38 |  if_ae	getbyte	local05, local05, #0
2d82c     07 AE 06 31 |  if_ae	add	local05, #7
2d830     59 B1 02 F6 | 	mov	local06, local07
2d834     01 B2 8E F1 | 	sub	local07, #1 wz
2d838     E7 AA 02 F6 | 	mov	local03, fp
2d83c     10 AA 06 F1 | 	add	local03, #16
2d840     55 B1 02 F1 | 	add	local06, local03
2d844     58 AF 42 FC | 	wrbyte	local05, local06
2d848     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
2d84c     C4 FF 9F 5D |  if_ne	jmp	#LR__4836
2d850                 | LR__4837
2d850     59 B1 02 F6 | 	mov	local06, local07
2d854     E7 AE 02 F6 | 	mov	local05, fp
2d858     10 AE 06 F1 | 	add	local05, #16
2d85c     57 B1 02 F1 | 	add	local06, local05
2d860     58 FD 48 FC | 	wrbyte	#126, local06
2d864                 | ' 	ns[i] = '~';
2d864                 | ' 
2d864                 | ' 
2d864                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2d864     00 AC 06 F6 | 	mov	local04, #0
2d868     D7 2A 48 FB | 	callpa	#(@LR__4840-@LR__4838)>>2,fcache_load_ptr_
2d86c                 | LR__4838
2d86c     59 AD 12 F2 | 	cmp	local04, local07 wc
2d870     4C 00 90 3D |  if_ae	jmp	#LR__4841
2d874     56 AF 02 F6 | 	mov	local05, local04
2d878     53 AF 02 F1 | 	add	local05, local01
2d87c     57 B1 C2 FA | 	rdbyte	local06, local05
2d880     20 B0 0E F2 | 	cmp	local06, #32 wz
2d884     38 00 90 AD |  if_e	jmp	#LR__4841
2d888     56 AB 02 F6 | 	mov	local03, local04
2d88c     53 AB 02 F1 | 	add	local03, local01
2d890     55 93 CA FA | 	rdbyte	arg01, local03 wz
2d894     00 7A 06 56 |  if_ne	mov	result1, #0
2d898                 | ' 
2d898                 | ' 	return 0;
2d898     00 7A 06 A6 |  if_e	mov	result1, #0
2d89c     00 7A 0E F2 | 	cmp	result1, #0 wz
2d8a0     14 00 90 AD |  if_e	jmp	#LR__4839
2d8a4     59 AB 02 F6 | 	mov	local03, local07
2d8a8     01 AA 86 F1 | 	sub	local03, #1
2d8ac     55 AD 0A F2 | 	cmp	local04, local03 wz
2d8b0     0C 00 90 AD |  if_e	jmp	#LR__4841
2d8b4     01 AC 06 F1 | 	add	local04, #1
2d8b8                 | LR__4839
2d8b8     01 AC 06 F1 | 	add	local04, #1
2d8bc     AC FF 9F FD | 	jmp	#LR__4838
2d8c0                 | LR__4840
2d8c0                 | LR__4841
2d8c0     D7 20 48 FB | 	callpa	#(@LR__4845-@LR__4842)>>2,fcache_load_ptr_
2d8c4                 | ' 			j++;
2d8c4                 | ' 		}
2d8c4                 | ' 	}
2d8c4                 | ' 	do {
2d8c4                 | LR__4842
2d8c4     56 B1 02 F6 | 	mov	local06, local04
2d8c8     53 B1 02 F1 | 	add	local06, local01
2d8cc     08 B2 16 F2 | 	cmp	local07, #8 wc
2d8d0     01 AC 06 F1 | 	add	local04, #1
2d8d4     1C 00 90 3D |  if_ae	jmp	#LR__4843
2d8d8     59 AF 02 F6 | 	mov	local05, local07
2d8dc     E7 AA 02 F6 | 	mov	local03, fp
2d8e0     10 AA 06 F1 | 	add	local03, #16
2d8e4     55 AF 02 F1 | 	add	local05, local03
2d8e8     57 B5 C2 FA | 	rdbyte	local08, local05
2d8ec     01 B2 06 F1 | 	add	local07, #1
2d8f0     04 00 90 FD | 	jmp	#LR__4844
2d8f4                 | LR__4843
2d8f4     20 B4 06 F6 | 	mov	local08, #32
2d8f8                 | LR__4844
2d8f8     58 B5 42 FC | 	wrbyte	local08, local06
2d8fc     08 AC 16 F2 | 	cmp	local04, #8 wc
2d900     C0 FF 9F CD |  if_b	jmp	#LR__4842
2d904                 | LR__4845
2d904     E7 F0 03 F6 | 	mov	ptra, fp
2d908     F2 00 A0 FD | 	call	#popregs_
2d90c                 | _fatfs_cc_gen_numname_ret
2d90c     2D 00 64 FD | 	ret
2d910                 | 
2d910                 | _fatfs_cc_sum_sfn
2d910     00 80 06 F6 | 	mov	_var01, #0
2d914                 | ' )
2d914                 | ' {
2d914                 | ' 	BYTE sum = 0;
2d914                 | ' 	UINT n = 11;
2d914                 | ' 
2d914                 | ' 	do {
2d914     D7 12 48 FB | 	callpa	#(@LR__4852-@LR__4850)>>2,fcache_load_ptr_
2d918                 | LR__4850
2d918     0B 10 DC FC | 	rep	@LR__4853, #11
2d91c                 | LR__4851
2d91c     40 7B E2 F8 | 	getbyte	result1, _var01, #0
2d920     01 7A 46 F0 | 	shr	result1, #1
2d924     40 81 E2 F8 | 	getbyte	_var01, _var01, #0
2d928     07 80 66 F0 | 	shl	_var01, #7
2d92c     40 7B 02 F1 | 	add	result1, _var01
2d930     49 81 C2 FA | 	rdbyte	_var01, arg01
2d934     3D 81 02 F1 | 	add	_var01, result1
2d938     01 92 06 F1 | 	add	arg01, #1
2d93c                 | LR__4852
2d93c                 | LR__4853
2d93c                 | ' 	return sum;
2d93c     40 7B 02 F6 | 	mov	result1, _var01
2d940                 | _fatfs_cc_sum_sfn_ret
2d940     2D 00 64 FD | 	ret
2d944                 | 
2d944                 | _fatfs_cc_dir_read
2d944     0C CA 05 F6 | 	mov	COUNT_, #12
2d948     E8 00 A0 FD | 	call	#pushregs_
2d94c     49 A7 02 F6 | 	mov	local01, arg01
2d950     4A A9 02 F6 | 	mov	local02, arg02
2d954     04 AA 06 F6 | 	mov	local03, #4
2d958     53 AD 02 FB | 	rdlong	local04, local01
2d95c     FF AE 06 F6 | 	mov	local05, #255
2d960     FF B0 06 F6 | 	mov	local06, #255
2d964                 | ' )
2d964                 | ' {
2d964                 | ' 	FRESULT res = FR_NO_FILE;
2d964                 | ' 	FATFS *fs = dp->obj.fs;
2d964                 | ' 	BYTE attr, b;
2d964                 | ' 
2d964                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2d964                 | ' 
2d964                 | ' 
2d964                 | ' 	while (dp->sect) {
2d964                 | LR__4860
2d964     18 A6 06 F1 | 	add	local01, #24
2d968     53 7B 0A FB | 	rdlong	result1, local01 wz
2d96c     18 A6 86 F1 | 	sub	local01, #24
2d970     AC 01 90 AD |  if_e	jmp	#LR__4870
2d974     18 A6 06 F1 | 	add	local01, #24
2d978     53 95 02 FB | 	rdlong	arg02, local01
2d97c     18 A6 86 F1 | 	sub	local01, #24
2d980     56 93 02 F6 | 	mov	arg01, local04
2d984     B8 ED BF FD | 	call	#_fatfs_cc_move_window
2d988     3D AB 0A F6 | 	mov	local03, result1 wz
2d98c     90 01 90 5D |  if_ne	jmp	#LR__4870
2d990     1C A6 06 F1 | 	add	local01, #28
2d994     53 7B 02 FB | 	rdlong	result1, local01
2d998     1C A6 86 F1 | 	sub	local01, #28
2d99c     3D B3 C2 FA | 	rdbyte	local07, result1
2d9a0     59 7B 02 F6 | 	mov	result1, local07
2d9a4     07 7A 4E F7 | 	zerox	result1, #7 wz
2d9a8     04 AA 06 A6 |  if_e	mov	local03, #4
2d9ac                 | ' 			res = FR_NO_FILE; break;
2d9ac     70 01 90 AD |  if_e	jmp	#LR__4870
2d9b0     1C A6 06 F1 | 	add	local01, #28
2d9b4     53 B5 02 FB | 	rdlong	local08, local01
2d9b8     0B B4 06 F1 | 	add	local08, #11
2d9bc     5A B7 C2 FA | 	rdbyte	local09, local08
2d9c0     3F B6 06 F5 | 	and	local09, #63
2d9c4     16 A6 86 F1 | 	sub	local01, #22
2d9c8     53 B7 42 FC | 	wrbyte	local09, local01
2d9cc     06 A6 86 F1 | 	sub	local01, #6
2d9d0     59 7B E2 F8 | 	getbyte	result1, local07, #0
2d9d4     E5 7A 0E F2 | 	cmp	result1, #229 wz
2d9d8     59 B5 02 56 |  if_ne	mov	local08, local07
2d9dc     5A B5 E2 58 |  if_ne	getbyte	local08, local08, #0
2d9e0     2E B4 0E 52 |  if_ne	cmp	local08, #46 wz
2d9e4     1C 00 90 AD |  if_e	jmp	#LR__4861
2d9e8     00 B8 06 F6 | 	mov	local10, #0
2d9ec     5B B5 E2 F8 | 	getbyte	local08, local09, #0
2d9f0     20 B4 26 F5 | 	andn	local08, #32
2d9f4     08 B4 0E F2 | 	cmp	local08, #8 wz
2d9f8     01 B8 06 A6 |  if_e	mov	local10, #1
2d9fc     54 B9 0A F2 | 	cmp	local10, local02 wz
2da00     08 00 90 AD |  if_e	jmp	#LR__4862
2da04                 | LR__4861
2da04     FF AE 06 F6 | 	mov	local05, #255
2da08     00 01 90 FD | 	jmp	#LR__4869
2da0c                 | LR__4862
2da0c     5B B7 E2 F8 | 	getbyte	local09, local09, #0
2da10     0F B6 0E F2 | 	cmp	local09, #15 wz
2da14     B4 00 90 5D |  if_ne	jmp	#LR__4866
2da18     59 BB E2 F8 | 	getbyte	local11, local07, #0
2da1c     40 BA CE F7 | 	test	local11, #64 wz
2da20     30 00 90 AD |  if_e	jmp	#LR__4863
2da24     1C A6 06 F1 | 	add	local01, #28
2da28     53 BB 02 FB | 	rdlong	local11, local01
2da2c     0D BA 06 F1 | 	add	local11, #13
2da30     5D B1 C2 FA | 	rdbyte	local06, local11
2da34     59 B3 E2 F8 | 	getbyte	local07, local07, #0
2da38     BF B2 06 F5 | 	and	local07, #191
2da3c     59 AF 02 F6 | 	mov	local05, local07
2da40     0C A6 86 F1 | 	sub	local01, #12
2da44     53 BB 02 FB | 	rdlong	local11, local01
2da48     1C A6 06 F1 | 	add	local01, #28
2da4c     53 BB 62 FC | 	wrlong	local11, local01
2da50     2C A6 86 F1 | 	sub	local01, #44
2da54                 | LR__4863
2da54     59 B5 E2 F8 | 	getbyte	local08, local07, #0
2da58     57 B9 E2 F8 | 	getbyte	local10, local05, #0
2da5c     5C B5 0A F2 | 	cmp	local08, local10 wz
2da60     5C 00 90 5D |  if_ne	jmp	#LR__4864
2da64     58 B9 E2 F8 | 	getbyte	local10, local06, #0
2da68     1C A6 06 F1 | 	add	local01, #28
2da6c     53 B7 02 FB | 	rdlong	local09, local01
2da70     1C A6 86 F1 | 	sub	local01, #28
2da74     0D B6 06 F1 | 	add	local09, #13
2da78     5B B5 C2 FA | 	rdbyte	local08, local09
2da7c     5A B7 E2 F8 | 	getbyte	local09, local08, #0
2da80     5B B9 0A F2 | 	cmp	local10, local09 wz
2da84     38 00 90 5D |  if_ne	jmp	#LR__4864
2da88     0C AC 06 F1 | 	add	local04, #12
2da8c     56 93 02 FB | 	rdlong	arg01, local04
2da90     0C AC 86 F1 | 	sub	local04, #12
2da94     1C A6 06 F1 | 	add	local01, #28
2da98     53 BD 02 FB | 	rdlong	local12, local01
2da9c     1C A6 86 F1 | 	sub	local01, #28
2daa0     5E 95 02 F6 | 	mov	arg02, local12
2daa4     30 FB BF FD | 	call	#_fatfs_cc_pick_lfn
2daa8     00 7A 4E F2 | 	cmps	result1, #0 wz
2daac     57 BD 02 56 |  if_ne	mov	local12, local05
2dab0     5E BD E2 58 |  if_ne	getbyte	local12, local12, #0
2dab4     01 BC 86 51 |  if_ne	sub	local12, #1
2dab8     5E BB 02 56 |  if_ne	mov	local11, local12
2dabc     04 00 90 5D |  if_ne	jmp	#LR__4865
2dac0                 | LR__4864
2dac0     FF BA 06 F6 | 	mov	local11, #255
2dac4                 | LR__4865
2dac4     5D AF 02 F6 | 	mov	local05, local11
2dac8     40 00 90 FD | 	jmp	#LR__4868
2dacc                 | LR__4866
2dacc     57 BB 02 F6 | 	mov	local11, local05
2dad0     07 BA 4E F7 | 	zerox	local11, #7 wz
2dad4     20 00 90 5D |  if_ne	jmp	#LR__4867
2dad8     58 B1 E2 F8 | 	getbyte	local06, local06, #0
2dadc     1C A6 06 F1 | 	add	local01, #28
2dae0     53 93 02 FB | 	rdlong	arg01, local01
2dae4     1C A6 86 F1 | 	sub	local01, #28
2dae8     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2daec     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2daf0     3D B1 0A F2 | 	cmp	local06, result1 wz
2daf4     28 00 90 AD |  if_e	jmp	#LR__4870
2daf8                 | LR__4867
2daf8     2C A6 06 F1 | 	add	local01, #44
2dafc     FF FF FF FF 
2db00     53 FF 6B FC | 	wrlong	##-1, local01
2db04     2C A6 86 F1 | 	sub	local01, #44
2db08                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2db08                 | ' 					}
2db08                 | ' 					break;
2db08     14 00 90 FD | 	jmp	#LR__4870
2db0c                 | LR__4868
2db0c                 | LR__4869
2db0c     53 93 02 F6 | 	mov	arg01, local01
2db10     00 94 06 F6 | 	mov	arg02, #0
2db14     F4 F6 BF FD | 	call	#_fatfs_cc_dir_next
2db18     3D AB 0A F6 | 	mov	local03, result1 wz
2db1c     44 FE 9F AD |  if_e	jmp	#LR__4860
2db20                 | LR__4870
2db20     00 AA 0E F2 | 	cmp	local03, #0 wz
2db24     18 A6 06 51 |  if_ne	add	local01, #24
2db28     53 01 68 5C |  if_ne	wrlong	#0, local01
2db2c                 | ' 	return res;
2db2c     55 7B 02 F6 | 	mov	result1, local03
2db30     E7 F0 03 F6 | 	mov	ptra, fp
2db34     F2 00 A0 FD | 	call	#popregs_
2db38                 | _fatfs_cc_dir_read_ret
2db38     2D 00 64 FD | 	ret
2db3c                 | 
2db3c                 | _fatfs_cc_dir_find
2db3c     0B CA 05 F6 | 	mov	COUNT_, #11
2db40     E8 00 A0 FD | 	call	#pushregs_
2db44     49 A7 02 F6 | 	mov	local01, arg01
2db48     53 A9 02 FB | 	rdlong	local02, local01
2db4c     53 93 02 F6 | 	mov	arg01, local01
2db50     00 94 06 F6 | 	mov	arg02, #0
2db54     4C F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2db58     00 7A 0E F2 | 	cmp	result1, #0 wz
2db5c     18 02 90 5D |  if_ne	jmp	#LR__4892
2db60     FF AA 06 F6 | 	mov	local03, #255
2db64     FF AC 06 F6 | 	mov	local04, #255
2db68     2C A6 06 F1 | 	add	local01, #44
2db6c     FF FF FF FF 
2db70     53 FF 6B FC | 	wrlong	##-1, local01
2db74     2C A6 86 F1 | 	sub	local01, #44
2db78                 | ' #line 2404 "ff.c"
2db78                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2db78                 | ' 
2db78                 | ' 	do {
2db78                 | LR__4880
2db78     18 A6 06 F1 | 	add	local01, #24
2db7c     53 95 02 FB | 	rdlong	arg02, local01
2db80     18 A6 86 F1 | 	sub	local01, #24
2db84     54 93 02 F6 | 	mov	arg01, local02
2db88     B4 EB BF FD | 	call	#_fatfs_cc_move_window
2db8c     3D AF 0A F6 | 	mov	local05, result1 wz
2db90     E0 01 90 5D |  if_ne	jmp	#LR__4891
2db94     1C A6 06 F1 | 	add	local01, #28
2db98     53 97 02 FB | 	rdlong	arg03, local01
2db9c     1C A6 86 F1 | 	sub	local01, #28
2dba0     4B B1 C2 FA | 	rdbyte	local06, arg03
2dba4     58 97 02 F6 | 	mov	arg03, local06
2dba8     07 96 4E F7 | 	zerox	arg03, #7 wz
2dbac     04 AE 06 A6 |  if_e	mov	local05, #4
2dbb0     C0 01 90 AD |  if_e	jmp	#LR__4891
2dbb4     1C A6 06 F1 | 	add	local01, #28
2dbb8     53 B3 02 FB | 	rdlong	local07, local01
2dbbc     59 97 02 F6 | 	mov	arg03, local07
2dbc0     0B 96 06 F1 | 	add	arg03, #11
2dbc4     4B B5 C2 FA | 	rdbyte	local08, arg03
2dbc8     3F B4 06 F5 | 	and	local08, #63
2dbcc     16 A6 86 F1 | 	sub	local01, #22
2dbd0     53 B5 42 FC | 	wrbyte	local08, local01
2dbd4     06 A6 86 F1 | 	sub	local01, #6
2dbd8     58 97 E2 F8 | 	getbyte	arg03, local06, #0
2dbdc     E5 96 0E F2 | 	cmp	arg03, #229 wz
2dbe0     18 00 90 AD |  if_e	jmp	#LR__4881
2dbe4     5A 97 E2 F8 | 	getbyte	arg03, local08, #0
2dbe8     08 96 CE F7 | 	test	arg03, #8 wz
2dbec     5A B3 02 56 |  if_ne	mov	local07, local08
2dbf0     59 B3 E2 58 |  if_ne	getbyte	local07, local07, #0
2dbf4     0F B2 0E 52 |  if_ne	cmp	local07, #15 wz
2dbf8     18 00 90 AD |  if_e	jmp	#LR__4882
2dbfc                 | LR__4881
2dbfc     FF AC 06 F6 | 	mov	local04, #255
2dc00     2C A6 06 F1 | 	add	local01, #44
2dc04     FF FF FF FF 
2dc08     53 FF 6B FC | 	wrlong	##-1, local01
2dc0c     2C A6 86 F1 | 	sub	local01, #44
2dc10     4C 01 90 FD | 	jmp	#LR__4890
2dc14                 | LR__4882
2dc14     5A B5 E2 F8 | 	getbyte	local08, local08, #0
2dc18     0F B4 0E F2 | 	cmp	local08, #15 wz
2dc1c     C8 00 90 5D |  if_ne	jmp	#LR__4886
2dc20     2B A6 06 F1 | 	add	local01, #43
2dc24     53 B5 C2 FA | 	rdbyte	local08, local01
2dc28     2B A6 86 F1 | 	sub	local01, #43
2dc2c     40 B4 CE F7 | 	test	local08, #64 wz
2dc30     2C 01 90 5D |  if_ne	jmp	#LR__4889
2dc34     58 B7 E2 F8 | 	getbyte	local09, local06, #0
2dc38     40 B6 CE F7 | 	test	local09, #64 wz
2dc3c     30 00 90 AD |  if_e	jmp	#LR__4883
2dc40     1C A6 06 F1 | 	add	local01, #28
2dc44     53 B7 02 FB | 	rdlong	local09, local01
2dc48     0D B6 06 F1 | 	add	local09, #13
2dc4c     5B AB C2 FA | 	rdbyte	local03, local09
2dc50     58 B1 E2 F8 | 	getbyte	local06, local06, #0
2dc54     BF B0 06 F5 | 	and	local06, #191
2dc58     58 AD 02 F6 | 	mov	local04, local06
2dc5c     0C A6 86 F1 | 	sub	local01, #12
2dc60     53 B7 02 FB | 	rdlong	local09, local01
2dc64     1C A6 06 F1 | 	add	local01, #28
2dc68     53 B7 62 FC | 	wrlong	local09, local01
2dc6c     2C A6 86 F1 | 	sub	local01, #44
2dc70                 | LR__4883
2dc70     58 B9 E2 F8 | 	getbyte	local10, local06, #0
2dc74     56 B3 E2 F8 | 	getbyte	local07, local04, #0
2dc78     59 B9 0A F2 | 	cmp	local10, local07 wz
2dc7c     5C 00 90 5D |  if_ne	jmp	#LR__4884
2dc80     55 B5 E2 F8 | 	getbyte	local08, local03, #0
2dc84     1C A6 06 F1 | 	add	local01, #28
2dc88     53 B3 02 FB | 	rdlong	local07, local01
2dc8c     1C A6 86 F1 | 	sub	local01, #28
2dc90     0D B2 06 F1 | 	add	local07, #13
2dc94     59 B1 C2 FA | 	rdbyte	local06, local07
2dc98     58 B3 E2 F8 | 	getbyte	local07, local06, #0
2dc9c     59 B5 0A F2 | 	cmp	local08, local07 wz
2dca0     38 00 90 5D |  if_ne	jmp	#LR__4884
2dca4     0C A8 06 F1 | 	add	local02, #12
2dca8     54 93 02 FB | 	rdlong	arg01, local02
2dcac     0C A8 86 F1 | 	sub	local02, #12
2dcb0     1C A6 06 F1 | 	add	local01, #28
2dcb4     53 BB 02 FB | 	rdlong	local11, local01
2dcb8     1C A6 86 F1 | 	sub	local01, #28
2dcbc     5D 95 02 F6 | 	mov	arg02, local11
2dcc0     10 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2dcc4     00 7A 4E F2 | 	cmps	result1, #0 wz
2dcc8     56 BB 02 56 |  if_ne	mov	local11, local04
2dccc     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2dcd0     01 BA 86 51 |  if_ne	sub	local11, #1
2dcd4     5D B7 02 56 |  if_ne	mov	local09, local11
2dcd8     04 00 90 5D |  if_ne	jmp	#LR__4885
2dcdc                 | LR__4884
2dcdc     FF B6 06 F6 | 	mov	local09, #255
2dce0                 | LR__4885
2dce0     5B AD 02 F6 | 	mov	local04, local09
2dce4     78 00 90 FD | 	jmp	#LR__4889
2dce8                 | LR__4886
2dce8     56 B7 02 F6 | 	mov	local09, local04
2dcec     07 B6 4E F7 | 	zerox	local09, #7 wz
2dcf0     20 00 90 5D |  if_ne	jmp	#LR__4887
2dcf4     55 B9 E2 F8 | 	getbyte	local10, local03, #0
2dcf8     1C A6 06 F1 | 	add	local01, #28
2dcfc     53 93 02 FB | 	rdlong	arg01, local01
2dd00     1C A6 86 F1 | 	sub	local01, #28
2dd04     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2dd08     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2dd0c     3D B9 0A F2 | 	cmp	local10, result1 wz
2dd10     60 00 90 AD |  if_e	jmp	#LR__4891
2dd14                 | LR__4887
2dd14     2B A6 06 F1 | 	add	local01, #43
2dd18     53 B7 C2 FA | 	rdbyte	local09, local01
2dd1c     2B A6 86 F1 | 	sub	local01, #43
2dd20     01 B6 CE F7 | 	test	local09, #1 wz
2dd24     24 00 90 5D |  if_ne	jmp	#LR__4888
2dd28     1C A6 06 F1 | 	add	local01, #28
2dd2c     53 93 02 FB | 	rdlong	arg01, local01
2dd30     04 A6 06 F1 | 	add	local01, #4
2dd34     53 95 02 F6 | 	mov	arg02, local01
2dd38     20 A6 86 F1 | 	sub	local01, #32
2dd3c     0B 96 06 F6 | 	mov	arg03, #11
2dd40     B0 DE BF FD | 	call	#_fatfs_cc_memcmp
2dd44     00 7A 0E F2 | 	cmp	result1, #0 wz
2dd48     28 00 90 AD |  if_e	jmp	#LR__4891
2dd4c                 | LR__4888
2dd4c     FF AC 06 F6 | 	mov	local04, #255
2dd50     2C A6 06 F1 | 	add	local01, #44
2dd54     FF FF FF FF 
2dd58     53 FF 6B FC | 	wrlong	##-1, local01
2dd5c     2C A6 86 F1 | 	sub	local01, #44
2dd60                 | LR__4889
2dd60                 | LR__4890
2dd60     53 93 02 F6 | 	mov	arg01, local01
2dd64     00 94 06 F6 | 	mov	arg02, #0
2dd68     A0 F4 BF FD | 	call	#_fatfs_cc_dir_next
2dd6c     3D AF 0A F6 | 	mov	local05, result1 wz
2dd70     04 FE 9F AD |  if_e	jmp	#LR__4880
2dd74                 | LR__4891
2dd74                 | ' 
2dd74                 | ' 	return res;
2dd74     57 7B 02 F6 | 	mov	result1, local05
2dd78                 | LR__4892
2dd78     E7 F0 03 F6 | 	mov	ptra, fp
2dd7c     F2 00 A0 FD | 	call	#popregs_
2dd80                 | _fatfs_cc_dir_find_ret
2dd80     2D 00 64 FD | 	ret
2dd84                 | 
2dd84                 | _fatfs_cc_dir_register
2dd84     09 CA 05 F6 | 	mov	COUNT_, #9
2dd88     E8 00 A0 FD | 	call	#pushregs_
2dd8c     2C F0 07 F1 | 	add	ptra, #44
2dd90     49 A7 02 F6 | 	mov	local01, arg01
2dd94     53 A9 02 FB | 	rdlong	local02, local01
2dd98     2B A6 06 F1 | 	add	local01, #43
2dd9c     53 AB C2 FA | 	rdbyte	local03, local01
2dda0     2B A6 86 F1 | 	sub	local01, #43
2dda4     A0 AA CE F7 | 	test	local03, #160 wz
2dda8     06 7A 06 56 |  if_ne	mov	result1, #6
2ddac     2C 02 90 5D |  if_ne	jmp	#LR__4911
2ddb0                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2ddb0     00 AC 06 F6 | 	mov	local04, #0
2ddb4     0C A8 06 F1 | 	add	local02, #12
2ddb8     D7 12 48 FB | 	callpa	#(@LR__4901-@LR__4900)>>2,fcache_load_ptr_
2ddbc                 | LR__4900
2ddbc     54 AB 02 FB | 	rdlong	local03, local02
2ddc0     56 99 02 F6 | 	mov	arg04, local04
2ddc4     01 98 66 F0 | 	shl	arg04, #1
2ddc8     55 99 02 F1 | 	add	arg04, local03
2ddcc     4C AB EA FA | 	rdword	local03, arg04 wz
2ddd0     56 AF 02 56 |  if_ne	mov	local05, local04
2ddd4     01 AE 06 51 |  if_ne	add	local05, #1
2ddd8     57 AD 02 56 |  if_ne	mov	local04, local05
2dddc     DC FF 9F 5D |  if_ne	jmp	#LR__4900
2dde0                 | LR__4901
2dde0     0C A8 86 F1 | 	sub	local02, #12
2dde4     E7 92 02 F6 | 	mov	arg01, fp
2dde8     1C 92 06 F1 | 	add	arg01, #28
2ddec     53 95 02 F6 | 	mov	arg02, local01
2ddf0     20 94 06 F1 | 	add	arg02, #32
2ddf4     0C 96 06 F6 | 	mov	arg03, #12
2ddf8     44 68 BF FD | 	call	#__system____builtin_memmove
2ddfc     27 CE 05 F1 | 	add	fp, #39
2de00     E7 AA C2 FA | 	rdbyte	local03, fp
2de04     27 CE 85 F1 | 	sub	fp, #39
2de08     01 AA CE F7 | 	test	local03, #1 wz
2de0c     80 00 90 AD |  if_e	jmp	#LR__4904
2de10     2B A6 06 F1 | 	add	local01, #43
2de14     53 81 48 FC | 	wrbyte	#64, local01
2de18     2B A6 86 F1 | 	sub	local01, #43
2de1c                 | ' 		dp->fn[ 11 ] =  0x40 ;
2de1c                 | ' 		for (n = 1; n < 100; n++) {
2de1c     01 B0 06 F6 | 	mov	local06, #1
2de20                 | LR__4902
2de20     64 B0 16 F2 | 	cmp	local06, #100 wc
2de24     38 00 90 3D |  if_ae	jmp	#LR__4903
2de28     53 93 02 F6 | 	mov	arg01, local01
2de2c     20 92 06 F1 | 	add	arg01, #32
2de30     E7 94 02 F6 | 	mov	arg02, fp
2de34     1C 94 06 F1 | 	add	arg02, #28
2de38     0C A8 06 F1 | 	add	local02, #12
2de3c     54 97 02 FB | 	rdlong	arg03, local02
2de40     0C A8 86 F1 | 	sub	local02, #12
2de44     58 99 02 F6 | 	mov	arg04, local06
2de48     44 F9 BF FD | 	call	#_fatfs_cc_gen_numname
2de4c     53 93 02 F6 | 	mov	arg01, local01
2de50     E8 FC BF FD | 	call	#_fatfs_cc_dir_find
2de54     3D B3 0A F6 | 	mov	local07, result1 wz
2de58     01 B0 06 A1 |  if_e	add	local06, #1
2de5c     C0 FF 9F AD |  if_e	jmp	#LR__4902
2de60                 | LR__4903
2de60     64 B0 0E F2 | 	cmp	local06, #100 wz
2de64     07 7A 06 A6 |  if_e	mov	result1, #7
2de68     70 01 90 AD |  if_e	jmp	#LR__4911
2de6c     04 B2 0E F2 | 	cmp	local07, #4 wz
2de70     59 7B 02 56 |  if_ne	mov	result1, local07
2de74     64 01 90 5D |  if_ne	jmp	#LR__4911
2de78     27 CE 05 F1 | 	add	fp, #39
2de7c     E7 AA C2 FA | 	rdbyte	local03, fp
2de80     27 CE 85 F1 | 	sub	fp, #39
2de84     2B A6 06 F1 | 	add	local01, #43
2de88     53 AB 42 FC | 	wrbyte	local03, local01
2de8c     2B A6 86 F1 | 	sub	local01, #43
2de90                 | LR__4904
2de90     27 CE 05 F1 | 	add	fp, #39
2de94     E7 B2 C2 FA | 	rdbyte	local07, fp
2de98     02 B2 CE F7 | 	test	local07, #2 wz
2de9c     0C AC 06 51 |  if_ne	add	local04, #12
2dea0     0D AC 16 5D |  if_ne	qdiv	local04, #13
2dea4     27 CE 85 F1 | 	sub	fp, #39
2dea8     53 93 02 F6 | 	mov	arg01, local01
2deac     18 AA 62 5D |  if_ne	getqx	local03
2deb0     01 AA 06 51 |  if_ne	add	local03, #1
2deb4     01 AA 06 A6 |  if_e	mov	local03, #1
2deb8     55 B5 02 F6 | 	mov	local08, local03
2debc     5A 95 02 F6 | 	mov	arg02, local08
2dec0     04 F5 BF FD | 	call	#_fatfs_cc_dir_alloc
2dec4     3D B3 0A F6 | 	mov	local07, result1 wz
2dec8     9C 00 90 5D |  if_ne	jmp	#LR__4908
2decc     01 B4 8E F1 | 	sub	local08, #1 wz
2ded0     94 00 90 AD |  if_e	jmp	#LR__4908
2ded4     53 93 02 F6 | 	mov	arg01, local01
2ded8     5A B3 02 F6 | 	mov	local07, local08
2dedc     05 B2 66 F0 | 	shl	local07, #5
2dee0     10 A6 06 F1 | 	add	local01, #16
2dee4     53 95 02 FB | 	rdlong	arg02, local01
2dee8     10 A6 86 F1 | 	sub	local01, #16
2deec     59 95 82 F1 | 	sub	arg02, local07
2def0     B0 F1 BF FD | 	call	#_fatfs_cc_dir_sdi
2def4     3D B3 0A F6 | 	mov	local07, result1 wz
2def8     6C 00 90 5D |  if_ne	jmp	#LR__4907
2defc     53 93 02 F6 | 	mov	arg01, local01
2df00     20 92 06 F1 | 	add	arg01, #32
2df04     08 FA BF FD | 	call	#_fatfs_cc_sum_sfn
2df08     3D B7 02 F6 | 	mov	local09, result1
2df0c                 | ' 			sum = sum_sfn(dp->fn);
2df0c                 | ' 			do {
2df0c                 | LR__4905
2df0c     18 A6 06 F1 | 	add	local01, #24
2df10     53 95 02 FB | 	rdlong	arg02, local01
2df14     18 A6 86 F1 | 	sub	local01, #24
2df18     54 93 02 F6 | 	mov	arg01, local02
2df1c     20 E8 BF FD | 	call	#_fatfs_cc_move_window
2df20     3D B3 0A F6 | 	mov	local07, result1 wz
2df24     40 00 90 5D |  if_ne	jmp	#LR__4906
2df28     0C A8 06 F1 | 	add	local02, #12
2df2c     54 93 02 FB | 	rdlong	arg01, local02
2df30     1C A6 06 F1 | 	add	local01, #28
2df34     53 95 02 FB | 	rdlong	arg02, local01
2df38     1C A6 86 F1 | 	sub	local01, #28
2df3c     5B 99 02 F6 | 	mov	arg04, local09
2df40     5A 97 02 F6 | 	mov	arg03, local08
2df44     78 F7 BF FD | 	call	#_fatfs_cc_put_lfn
2df48     09 A8 86 F1 | 	sub	local02, #9
2df4c     54 03 48 FC | 	wrbyte	#1, local02
2df50     03 A8 86 F1 | 	sub	local02, #3
2df54     53 93 02 F6 | 	mov	arg01, local01
2df58     00 94 06 F6 | 	mov	arg02, #0
2df5c     AC F2 BF FD | 	call	#_fatfs_cc_dir_next
2df60     3D B3 0A F6 | 	mov	local07, result1 wz
2df64     E9 B5 6E AB |  if_e	djnz	local08, #LR__4905
2df68                 | LR__4906
2df68                 | LR__4907
2df68                 | LR__4908
2df68     00 B2 0E F2 | 	cmp	local07, #0 wz
2df6c     68 00 90 5D |  if_ne	jmp	#LR__4910
2df70     18 A6 06 F1 | 	add	local01, #24
2df74     53 95 02 FB | 	rdlong	arg02, local01
2df78     18 A6 86 F1 | 	sub	local01, #24
2df7c     54 93 02 F6 | 	mov	arg01, local02
2df80     BC E7 BF FD | 	call	#_fatfs_cc_move_window
2df84     3D B3 0A F6 | 	mov	local07, result1 wz
2df88     4C 00 90 5D |  if_ne	jmp	#LR__4909
2df8c     1C A6 06 F1 | 	add	local01, #28
2df90     53 93 02 FB | 	rdlong	arg01, local01
2df94     00 94 06 F6 | 	mov	arg02, #0
2df98     20 96 06 F6 | 	mov	arg03, #32
2df9c     D8 00 A0 FD | 	call	#\builtin_bytefill_
2dfa0     53 93 02 FB | 	rdlong	arg01, local01
2dfa4     04 A6 06 F1 | 	add	local01, #4
2dfa8     53 95 02 F6 | 	mov	arg02, local01
2dfac     0B 96 06 F6 | 	mov	arg03, #11
2dfb0     8C 66 BF FD | 	call	#__system____builtin_memmove
2dfb4     04 A6 86 F1 | 	sub	local01, #4
2dfb8     53 AB 02 FB | 	rdlong	local03, local01
2dfbc     0F A6 06 F1 | 	add	local01, #15
2dfc0     53 B7 C2 FA | 	rdbyte	local09, local01
2dfc4     18 B6 06 F5 | 	and	local09, #24
2dfc8     0C AA 06 F1 | 	add	local03, #12
2dfcc     55 B7 42 FC | 	wrbyte	local09, local03
2dfd0     03 A8 06 F1 | 	add	local02, #3
2dfd4     54 03 48 FC | 	wrbyte	#1, local02
2dfd8                 | LR__4909
2dfd8                 | LR__4910
2dfd8                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2dfd8                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2dfd8                 | ' 
2dfd8                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2dfd8                 | ' 
2dfd8                 | ' 			fs->wflag = 1;
2dfd8                 | ' 		}
2dfd8                 | ' 	}
2dfd8                 | ' 
2dfd8                 | ' 	return res;
2dfd8     59 7B 02 F6 | 	mov	result1, local07
2dfdc                 | LR__4911
2dfdc     E7 F0 03 F6 | 	mov	ptra, fp
2dfe0     F2 00 A0 FD | 	call	#popregs_
2dfe4                 | _fatfs_cc_dir_register_ret
2dfe4     2D 00 64 FD | 	ret
2dfe8                 | 
2dfe8                 | _fatfs_cc_dir_remove
2dfe8     05 CA 05 F6 | 	mov	COUNT_, #5
2dfec     E8 00 A0 FD | 	call	#pushregs_
2dff0     49 A7 02 F6 | 	mov	local01, arg01
2dff4     53 A9 02 FB | 	rdlong	local02, local01
2dff8     10 A6 06 F1 | 	add	local01, #16
2dffc     53 AB 02 FB | 	rdlong	local03, local01
2e000     1C A6 06 F1 | 	add	local01, #28
2e004     53 95 02 FB | 	rdlong	arg02, local01
2e008     2C A6 86 F1 | 	sub	local01, #44
2e00c     FF FF 7F FF 
2e010     FF 95 0E F2 | 	cmp	arg02, ##-1 wz
2e014     00 AC 06 A6 |  if_e	mov	local04, #0
2e018     18 00 90 AD |  if_e	jmp	#LR__4920
2e01c     53 93 02 F6 | 	mov	arg01, local01
2e020     2C A6 06 F1 | 	add	local01, #44
2e024     53 95 02 FB | 	rdlong	arg02, local01
2e028     2C A6 86 F1 | 	sub	local01, #44
2e02c     74 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2e030     3D AD 02 F6 | 	mov	local04, result1
2e034                 | LR__4920
2e034     56 AF 0A F6 | 	mov	local05, local04 wz
2e038     64 00 90 5D |  if_ne	jmp	#LR__4923
2e03c                 | ' 		do {
2e03c                 | LR__4921
2e03c     18 A6 06 F1 | 	add	local01, #24
2e040     53 95 02 FB | 	rdlong	arg02, local01
2e044     18 A6 86 F1 | 	sub	local01, #24
2e048     54 93 02 F6 | 	mov	arg01, local02
2e04c     F0 E6 BF FD | 	call	#_fatfs_cc_move_window
2e050     3D AF 0A F6 | 	mov	local05, result1 wz
2e054     40 00 90 5D |  if_ne	jmp	#LR__4922
2e058     1C A6 06 F1 | 	add	local01, #28
2e05c     53 AD 02 FB | 	rdlong	local04, local01
2e060     56 CB 49 FC | 	wrbyte	#229, local04
2e064     03 A8 06 F1 | 	add	local02, #3
2e068     54 03 48 FC | 	wrbyte	#1, local02
2e06c     03 A8 86 F1 | 	sub	local02, #3
2e070     0C A6 86 F1 | 	sub	local01, #12
2e074     53 AD 02 FB | 	rdlong	local04, local01
2e078     10 A6 86 F1 | 	sub	local01, #16
2e07c     55 AD 12 F2 | 	cmp	local04, local03 wc
2e080     14 00 90 3D |  if_ae	jmp	#LR__4922
2e084     53 93 02 F6 | 	mov	arg01, local01
2e088     00 94 06 F6 | 	mov	arg02, #0
2e08c     7C F1 BF FD | 	call	#_fatfs_cc_dir_next
2e090     3D AF 0A F6 | 	mov	local05, result1 wz
2e094     A4 FF 9F AD |  if_e	jmp	#LR__4921
2e098                 | LR__4922
2e098     04 AE 0E F2 | 	cmp	local05, #4 wz
2e09c     02 AE 06 A6 |  if_e	mov	local05, #2
2e0a0                 | LR__4923
2e0a0                 | ' 	}
2e0a0                 | ' #line 2590 "ff.c"
2e0a0                 | ' 	return res;
2e0a0     57 7B 02 F6 | 	mov	result1, local05
2e0a4     E7 F0 03 F6 | 	mov	ptra, fp
2e0a8     F2 00 A0 FD | 	call	#popregs_
2e0ac                 | _fatfs_cc_dir_remove_ret
2e0ac     2D 00 64 FD | 	ret
2e0b0                 | 
2e0b0                 | _fatfs_cc_get_fileinfo
2e0b0     0C CA 05 F6 | 	mov	COUNT_, #12
2e0b4     E8 00 A0 FD | 	call	#pushregs_
2e0b8     49 A7 02 F6 | 	mov	local01, arg01
2e0bc     4A A9 02 F6 | 	mov	local02, arg02
2e0c0     53 AB 02 FB | 	rdlong	local03, local01
2e0c4     1C A8 06 F1 | 	add	local02, #28
2e0c8     54 01 48 FC | 	wrbyte	#0, local02
2e0cc     1C A8 86 F1 | 	sub	local02, #28
2e0d0     18 A6 06 F1 | 	add	local01, #24
2e0d4     53 AD 0A FB | 	rdlong	local04, local01 wz
2e0d8     18 A6 86 F1 | 	sub	local01, #24
2e0dc     90 03 90 AD |  if_e	jmp	#LR__4944
2e0e0     2C A6 06 F1 | 	add	local01, #44
2e0e4     53 AD 02 FB | 	rdlong	local04, local01
2e0e8     2C A6 86 F1 | 	sub	local01, #44
2e0ec     FF FF 7F FF 
2e0f0     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2e0f4     D8 00 90 AD |  if_e	jmp	#LR__4933
2e0f8     00 AE 06 F6 | 	mov	local05, #0
2e0fc     00 B0 06 F6 | 	mov	local06, #0
2e100     00 B2 06 F6 | 	mov	local07, #0
2e104                 | ' 			si = di = 0;
2e104                 | ' 			hs = 0;
2e104                 | ' 			while (fs->lfnbuf[si] != 0) {
2e104                 | LR__4930
2e104     0C AA 06 F1 | 	add	local03, #12
2e108     55 AD 02 FB | 	rdlong	local04, local03
2e10c     0C AA 86 F1 | 	sub	local03, #12
2e110     58 B5 02 F6 | 	mov	local08, local06
2e114     01 B4 66 F0 | 	shl	local08, #1
2e118     56 B5 02 F1 | 	add	local08, local04
2e11c     5A AD EA FA | 	rdword	local04, local08 wz
2e120     90 00 90 AD |  if_e	jmp	#LR__4932
2e124     0C AA 06 F1 | 	add	local03, #12
2e128     55 B7 02 FB | 	rdlong	local09, local03
2e12c     0C AA 86 F1 | 	sub	local03, #12
2e130     58 AD 02 F6 | 	mov	local04, local06
2e134     01 AC 66 F0 | 	shl	local04, #1
2e138     5B AD 02 F1 | 	add	local04, local09
2e13c     56 B9 E2 FA | 	rdword	local10, local04
2e140     59 AD 02 F6 | 	mov	local04, local07
2e144     0F AC 4E F7 | 	zerox	local04, #15 wz
2e148     01 B0 06 F1 | 	add	local06, #1
2e14c     24 00 90 5D |  if_ne	jmp	#LR__4931
2e150     5C AD 32 F9 | 	getword	local04, local10, #0
2e154     6C 00 00 FF 
2e158     00 AC 16 F2 | 	cmp	local04, ##55296 wc
2e15c     14 00 90 CD |  if_b	jmp	#LR__4931
2e160     5C BB 32 F9 | 	getword	local11, local10, #0
2e164     70 00 00 FF 
2e168     00 BA 16 F2 | 	cmp	local11, ##57344 wc
2e16c     5C B3 02 C6 |  if_b	mov	local07, local10
2e170                 | ' 					hs = wc; continue;
2e170     90 FF 9F CD |  if_b	jmp	#LR__4930
2e174                 | LR__4931
2e174     59 93 32 F9 | 	getword	arg01, local07, #0
2e178     10 92 66 F0 | 	shl	arg01, #16
2e17c     5C B9 32 F9 | 	getword	local10, local10, #0
2e180     5C 93 42 F5 | 	or	arg01, local10
2e184     57 95 02 F6 | 	mov	arg02, local05
2e188     54 B9 02 F6 | 	mov	local10, local02
2e18c     1C B8 06 F1 | 	add	local10, #28
2e190     5C 95 02 F1 | 	add	arg02, local10
2e194     FF 96 06 F6 | 	mov	arg03, #255
2e198     57 97 82 F1 | 	sub	arg03, local05
2e19c     28 E3 BF FD | 	call	#_fatfs_cc_put_utf
2e1a0     3D B9 0A F6 | 	mov	local10, result1 wz
2e1a4     00 AE 06 A6 |  if_e	mov	local05, #0
2e1a8     5C AF 02 51 |  if_ne	add	local05, local10
2e1ac     00 B2 06 56 |  if_ne	mov	local07, #0
2e1b0     50 FF 9F 5D |  if_ne	jmp	#LR__4930
2e1b4                 | LR__4932
2e1b4     59 AD 02 F6 | 	mov	local04, local07
2e1b8     0F AC 4E F7 | 	zerox	local04, #15 wz
2e1bc     00 AE 06 56 |  if_ne	mov	local05, #0
2e1c0     54 B9 02 F6 | 	mov	local10, local02
2e1c4     1C B8 06 F1 | 	add	local10, #28
2e1c8     5C AF 02 F1 | 	add	local05, local10
2e1cc     57 01 48 FC | 	wrbyte	#0, local05
2e1d0                 | LR__4933
2e1d0     00 AE 06 F6 | 	mov	local05, #0
2e1d4     00 B0 06 F6 | 	mov	local06, #0
2e1d8                 | ' 			fno->fname[di] = 0;
2e1d8                 | ' 		}
2e1d8                 | ' 	}
2e1d8                 | ' 
2e1d8                 | ' 	si = di = 0;
2e1d8                 | ' 	while (si < 11) {
2e1d8                 | LR__4934
2e1d8     0B B0 16 F2 | 	cmp	local06, #11 wc
2e1dc     20 01 90 3D |  if_ae	jmp	#LR__4937
2e1e0     1C A6 06 F1 | 	add	local01, #28
2e1e4     53 B7 02 FB | 	rdlong	local09, local01
2e1e8     1C A6 86 F1 | 	sub	local01, #28
2e1ec     58 B9 02 F6 | 	mov	local10, local06
2e1f0     5B B9 02 F1 | 	add	local10, local09
2e1f4     5C B9 C2 FA | 	rdbyte	local10, local10
2e1f8     5C AD 32 F9 | 	getword	local04, local10, #0
2e1fc     20 AC 0E F2 | 	cmp	local04, #32 wz
2e200     01 B0 06 F1 | 	add	local06, #1
2e204     D0 FF 9F AD |  if_e	jmp	#LR__4934
2e208     5C AD 32 F9 | 	getword	local04, local10, #0
2e20c     05 AC 0E F2 | 	cmp	local04, #5 wz
2e210     E5 B8 06 A6 |  if_e	mov	local10, #229
2e214     09 B0 0E F2 | 	cmp	local06, #9 wz
2e218     20 00 90 5D |  if_ne	jmp	#LR__4935
2e21c     0C AE 16 F2 | 	cmp	local05, #12 wc
2e220     18 00 90 3D |  if_ae	jmp	#LR__4935
2e224     57 BB 02 F6 | 	mov	local11, local05
2e228     54 B5 02 F6 | 	mov	local08, local02
2e22c     0C B4 06 F1 | 	add	local08, #12
2e230     5A BB 02 F1 | 	add	local11, local08
2e234     5D 5D 48 FC | 	wrbyte	#46, local11
2e238     01 AE 06 F1 | 	add	local05, #1
2e23c                 | LR__4935
2e23c     5C 93 32 F9 | 	getword	arg01, local10, #0
2e240     07 92 4E F7 | 	zerox	arg01, #7 wz
2e244     00 7A 06 56 |  if_ne	mov	result1, #0
2e248                 | ' 
2e248                 | ' 	return 0;
2e248     00 7A 06 A6 |  if_e	mov	result1, #0
2e24c     00 7A 0E F2 | 	cmp	result1, #0 wz
2e250     08 B0 0E 52 |  if_ne	cmp	local06, #8 wz
2e254     0B B0 0E 52 |  if_ne	cmp	local06, #11 wz
2e258     50 00 90 AD |  if_e	jmp	#LR__4936
2e25c     1C A6 06 F1 | 	add	local01, #28
2e260     53 BB 02 FB | 	rdlong	local11, local01
2e264     1C A6 86 F1 | 	sub	local01, #28
2e268     58 B5 02 F6 | 	mov	local08, local06
2e26c     5D B5 02 F1 | 	add	local08, local11
2e270     5A 93 CA FA | 	rdbyte	arg01, local08 wz
2e274     00 7A 06 56 |  if_ne	mov	result1, #0
2e278                 | ' 
2e278                 | ' 	return 0;
2e278     00 7A 06 A6 |  if_e	mov	result1, #0
2e27c     00 7A 0E F2 | 	cmp	result1, #0 wz
2e280     28 00 90 AD |  if_e	jmp	#LR__4936
2e284     5C B9 32 F9 | 	getword	local10, local10, #0
2e288     08 B8 66 F0 | 	shl	local10, #8
2e28c     1C A6 06 F1 | 	add	local01, #28
2e290     53 BB 02 FB | 	rdlong	local11, local01
2e294     1C A6 86 F1 | 	sub	local01, #28
2e298     58 B7 02 F6 | 	mov	local09, local06
2e29c     5D B7 02 F1 | 	add	local09, local11
2e2a0     5B BB C2 FA | 	rdbyte	local11, local09
2e2a4     5D B9 42 F5 | 	or	local10, local11
2e2a8     01 B0 06 F1 | 	add	local06, #1
2e2ac                 | LR__4936
2e2ac     5C 93 02 F6 | 	mov	arg01, local10
2e2b0     01 00 00 FF 
2e2b4     52 95 06 F6 | 	mov	arg02, ##850
2e2b8     24 D7 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2e2bc     3D B9 02 F6 | 	mov	local10, result1
2e2c0     5C AD 02 F6 | 	mov	local04, local10
2e2c4     0F AC 4E F7 | 	zerox	local04, #15 wz
2e2c8     00 AE 06 A6 |  if_e	mov	local05, #0
2e2cc     30 00 90 AD |  if_e	jmp	#LR__4937
2e2d0     5C 93 32 F9 | 	getword	arg01, local10, #0
2e2d4     57 95 02 F6 | 	mov	arg02, local05
2e2d8     54 BB 02 F6 | 	mov	local11, local02
2e2dc     0C BA 06 F1 | 	add	local11, #12
2e2e0     5D 95 02 F1 | 	add	arg02, local11
2e2e4     0C 96 06 F6 | 	mov	arg03, #12
2e2e8     57 97 82 F1 | 	sub	arg03, local05
2e2ec     D8 E1 BF FD | 	call	#_fatfs_cc_put_utf
2e2f0     3D BB 0A F6 | 	mov	local11, result1 wz
2e2f4     00 AE 06 A6 |  if_e	mov	local05, #0
2e2f8     5D AF 02 51 |  if_ne	add	local05, local11
2e2fc     D8 FE 9F 5D |  if_ne	jmp	#LR__4934
2e300                 | LR__4937
2e300     57 AD 02 F6 | 	mov	local04, local05
2e304     0C A8 06 F1 | 	add	local02, #12
2e308     54 AD 02 F1 | 	add	local04, local02
2e30c     56 01 48 FC | 	wrbyte	#0, local04
2e310     10 A8 06 F1 | 	add	local02, #16
2e314     54 AD CA FA | 	rdbyte	local04, local02 wz
2e318     1C A8 86 F1 | 	sub	local02, #28
2e31c     F8 00 90 5D |  if_ne	jmp	#LR__4943
2e320     00 AE 0E F2 | 	cmp	local05, #0 wz
2e324     1C 00 90 5D |  if_ne	jmp	#LR__4938
2e328     57 BB 02 F6 | 	mov	local11, local05
2e32c     54 B9 02 F6 | 	mov	local10, local02
2e330     1C B8 06 F1 | 	add	local10, #28
2e334     5C BB 02 F1 | 	add	local11, local10
2e338     5D 7F 48 FC | 	wrbyte	#63, local11
2e33c     01 AE 06 F1 | 	add	local05, #1
2e340     A4 00 90 FD | 	jmp	#LR__4942
2e344                 | LR__4938
2e344                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2e344     00 AE 06 F6 | 	mov	local05, #0
2e348     00 B0 06 F6 | 	mov	local06, #0
2e34c     08 BC 06 F6 | 	mov	local12, #8
2e350                 | LR__4939
2e350     58 AD 02 F6 | 	mov	local04, local06
2e354     54 BB 02 F6 | 	mov	local11, local02
2e358     0C BA 06 F1 | 	add	local11, #12
2e35c     5D AD 02 F1 | 	add	local04, local11
2e360     56 BB CA FA | 	rdbyte	local11, local04 wz
2e364     80 00 90 AD |  if_e	jmp	#LR__4941
2e368     58 B5 02 F6 | 	mov	local08, local06
2e36c     54 BB 02 F6 | 	mov	local11, local02
2e370     0C BA 06 F1 | 	add	local11, #12
2e374     5D B5 02 F1 | 	add	local08, local11
2e378     5A B9 C2 FA | 	rdbyte	local10, local08
2e37c     5C BB 32 F9 | 	getword	local11, local10, #0
2e380     2E BA 0E F2 | 	cmp	local11, #46 wz
2e384     10 BC 06 A6 |  if_e	mov	local12, #16
2e388     5C BB 32 F9 | 	getword	local11, local10, #0
2e38c     41 BA 16 F2 | 	cmp	local11, #65 wc
2e390     30 00 90 CD |  if_b	jmp	#LR__4940
2e394     5C B5 32 F9 | 	getword	local08, local10, #0
2e398     5B B4 16 F2 | 	cmp	local08, #91 wc
2e39c     24 00 90 3D |  if_ae	jmp	#LR__4940
2e3a0     1C A6 06 F1 | 	add	local01, #28
2e3a4     53 B7 02 FB | 	rdlong	local09, local01
2e3a8     1C A6 86 F1 | 	sub	local01, #28
2e3ac     0C B6 06 F1 | 	add	local09, #12
2e3b0     5B B7 C2 FA | 	rdbyte	local09, local09
2e3b4     5E BB E2 F8 | 	getbyte	local11, local12, #0
2e3b8     5D B7 CA F7 | 	test	local09, local11 wz
2e3bc     5C B9 32 59 |  if_ne	getword	local10, local10, #0
2e3c0     20 B8 06 51 |  if_ne	add	local10, #32
2e3c4                 | LR__4940
2e3c4     57 BB 02 F6 | 	mov	local11, local05
2e3c8     54 B5 02 F6 | 	mov	local08, local02
2e3cc     1C B4 06 F1 | 	add	local08, #28
2e3d0     5A BB 02 F1 | 	add	local11, local08
2e3d4     5C B9 32 F9 | 	getword	local10, local10, #0
2e3d8     5D B9 42 FC | 	wrbyte	local10, local11
2e3dc     01 B0 06 F1 | 	add	local06, #1
2e3e0     01 AE 06 F1 | 	add	local05, #1
2e3e4     68 FF 9F FD | 	jmp	#LR__4939
2e3e8                 | LR__4941
2e3e8                 | LR__4942
2e3e8     54 BD 02 F6 | 	mov	local12, local02
2e3ec     1C BC 06 F1 | 	add	local12, #28
2e3f0     5E AF 02 F1 | 	add	local05, local12
2e3f4     57 01 48 FC | 	wrbyte	#0, local05
2e3f8     1C A6 06 F1 | 	add	local01, #28
2e3fc     53 AD 02 FB | 	rdlong	local04, local01
2e400     1C A6 86 F1 | 	sub	local01, #28
2e404     0C AC 06 F1 | 	add	local04, #12
2e408     56 BB CA FA | 	rdbyte	local11, local04 wz
2e40c     0C A8 06 A1 |  if_e	add	local02, #12
2e410     54 01 48 AC |  if_e	wrbyte	#0, local02
2e414     0C A8 86 A1 |  if_e	sub	local02, #12
2e418                 | LR__4943
2e418     1C A6 06 F1 | 	add	local01, #28
2e41c     53 BD 02 FB | 	rdlong	local12, local01
2e420     0B BC 06 F1 | 	add	local12, #11
2e424     5E AD C2 FA | 	rdbyte	local04, local12
2e428     3F AC 06 F5 | 	and	local04, #63
2e42c     08 A8 06 F1 | 	add	local02, #8
2e430     54 AD 42 FC | 	wrbyte	local04, local02
2e434     08 A8 86 F1 | 	sub	local02, #8
2e438     53 93 02 FB | 	rdlong	arg01, local01
2e43c     1C 92 06 F1 | 	add	arg01, #28
2e440                 | ' {
2e440                 | ' 
2e440                 | ' 	return *((DWORD*)ptr);
2e440     49 7B 02 FB | 	rdlong	result1, arg01
2e444     54 7B 62 FC | 	wrlong	result1, local02
2e448     53 93 02 FB | 	rdlong	arg01, local01
2e44c     16 92 06 F1 | 	add	arg01, #22
2e450                 | ' {
2e450                 | ' 
2e450                 | ' 	return *((WORD*)ptr);
2e450     49 7B E2 FA | 	rdword	result1, arg01
2e454     06 A8 06 F1 | 	add	local02, #6
2e458     54 7B 52 FC | 	wrword	result1, local02
2e45c     53 93 02 FB | 	rdlong	arg01, local01
2e460     18 92 06 F1 | 	add	arg01, #24
2e464                 | ' {
2e464                 | ' 
2e464                 | ' 	return *((WORD*)ptr);
2e464     49 7B E2 FA | 	rdword	result1, arg01
2e468     02 A8 86 F1 | 	sub	local02, #2
2e46c     54 7B 52 FC | 	wrword	result1, local02
2e470                 | LR__4944
2e470     E7 F0 03 F6 | 	mov	ptra, fp
2e474     F2 00 A0 FD | 	call	#popregs_
2e478                 | _fatfs_cc_get_fileinfo_ret
2e478     2D 00 64 FD | 	ret
2e47c                 | 
2e47c                 | _fatfs_cc_create_name
2e47c     12 CA 05 F6 | 	mov	COUNT_, #18
2e480     E8 00 A0 FD | 	call	#pushregs_
2e484     34 F0 07 F1 | 	add	ptra, #52
2e488     49 A7 02 F6 | 	mov	local01, arg01
2e48c     4A A9 02 F6 | 	mov	local02, arg02
2e490     54 7B 02 FB | 	rdlong	result1, local02
2e494     30 CE 05 F1 | 	add	fp, #48
2e498     E7 7A 62 FC | 	wrlong	result1, fp
2e49c     30 CE 85 F1 | 	sub	fp, #48
2e4a0     53 AB 02 FB | 	rdlong	local03, local01
2e4a4     0C AA 06 F1 | 	add	local03, #12
2e4a8     55 AD 02 FB | 	rdlong	local04, local03
2e4ac     00 AE 06 F6 | 	mov	local05, #0
2e4b0                 | ' 
2e4b0                 | ' 
2e4b0                 | ' 
2e4b0                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2e4b0                 | ' 	for (;;) {
2e4b0                 | LR__4950
2e4b0     E7 92 02 F6 | 	mov	arg01, fp
2e4b4     30 92 06 F1 | 	add	arg01, #48
2e4b8     FC DE BF FD | 	call	#_fatfs_cc_tchar2uni
2e4bc     3D B1 02 F6 | 	mov	local06, result1
2e4c0     FF FF 7F FF 
2e4c4     FF B1 0E F2 | 	cmp	local06, ##-1 wz
2e4c8     06 7A 06 A6 |  if_e	mov	result1, #6
2e4cc     84 04 90 AD |  if_e	jmp	#LR__4984
2e4d0     80 00 00 FF 
2e4d4     00 B0 16 F2 | 	cmp	local06, ##65536 wc
2e4d8     20 00 90 CD |  if_b	jmp	#LR__4951
2e4dc     57 AB 02 F6 | 	mov	local03, local05
2e4e0     01 AA 66 F0 | 	shl	local03, #1
2e4e4     56 B3 02 F6 | 	mov	local07, local04
2e4e8     56 AB 02 F1 | 	add	local03, local04
2e4ec     58 B5 02 F6 | 	mov	local08, local06
2e4f0     10 B4 46 F0 | 	shr	local08, #16
2e4f4     55 B5 52 FC | 	wrword	local08, local03
2e4f8     01 AE 06 F1 | 	add	local05, #1
2e4fc                 | LR__4951
2e4fc     58 B7 02 F6 | 	mov	local09, local06
2e500     5B AB 32 F9 | 	getword	local03, local09, #0
2e504     20 AA 16 F2 | 	cmp	local03, #32 wc
2e508     68 00 90 CD |  if_b	jmp	#LR__4953
2e50c     5B B9 32 F9 | 	getword	local10, local09, #0
2e510     2F B8 0E F2 | 	cmp	local10, #47 wz
2e514     5B AB 02 56 |  if_ne	mov	local03, local09
2e518     55 AB 32 59 |  if_ne	getword	local03, local03, #0
2e51c     5C AA 0E 52 |  if_ne	cmp	local03, #92 wz
2e520     50 00 90 AD |  if_e	jmp	#LR__4953
2e524     5B AB 32 F9 | 	getword	local03, local09, #0
2e528     80 AA 16 F2 | 	cmp	local03, #128 wc
2e52c     1C 00 90 3D |  if_ae	jmp	#LR__4952
2e530     91 01 00 FF 
2e534     DF 92 06 F6 | 	mov	arg01, ##@LR__5473
2e538     5B 95 32 F9 | 	getword	arg02, local09, #0
2e53c     80 D7 BF FD | 	call	#_fatfs_cc_strchr
2e540     3D B9 0A F6 | 	mov	local10, result1 wz
2e544     06 7A 06 56 |  if_ne	mov	result1, #6
2e548     08 04 90 5D |  if_ne	jmp	#LR__4984
2e54c                 | LR__4952
2e54c     FF AE 16 F2 | 	cmp	local05, #255 wc
2e550     06 7A 06 36 |  if_ae	mov	result1, #6
2e554     FC 03 90 3D |  if_ae	jmp	#LR__4984
2e558     57 B1 02 F6 | 	mov	local06, local05
2e55c     01 B0 66 F0 | 	shl	local06, #1
2e560     56 B3 02 F6 | 	mov	local07, local04
2e564     56 B1 02 F1 | 	add	local06, local04
2e568     58 B7 52 FC | 	wrword	local09, local06
2e56c     01 AE 06 F1 | 	add	local05, #1
2e570     3C FF 9F FD | 	jmp	#LR__4950
2e574                 | LR__4953
2e574     5B AB 32 F9 | 	getword	local03, local09, #0
2e578     20 AA 16 F2 | 	cmp	local03, #32 wc
2e57c     04 BA 06 C6 |  if_b	mov	local11, #4
2e580     68 00 90 CD |  if_b	jmp	#LR__4958
2e584     D7 24 48 FB | 	callpa	#(@LR__4956-@LR__4954)>>2,fcache_load_ptr_
2e588                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2e588                 | LR__4954
2e588     30 CE 05 F1 | 	add	fp, #48
2e58c     E7 B8 02 FB | 	rdlong	local10, fp
2e590     30 CE 85 F1 | 	sub	fp, #48
2e594     5C AB C2 FA | 	rdbyte	local03, local10
2e598     2F AA 0E F2 | 	cmp	local03, #47 wz
2e59c     18 00 90 AD |  if_e	jmp	#LR__4955
2e5a0     30 CE 05 F1 | 	add	fp, #48
2e5a4     E7 B4 02 FB | 	rdlong	local08, fp
2e5a8     30 CE 85 F1 | 	sub	fp, #48
2e5ac     5A BB C2 FA | 	rdbyte	local11, local08
2e5b0     5C BA 0E F2 | 	cmp	local11, #92 wz
2e5b4     18 00 90 5D |  if_ne	jmp	#LR__4957
2e5b8                 | LR__4955
2e5b8     30 CE 05 F1 | 	add	fp, #48
2e5bc     E7 BA 02 FB | 	rdlong	local11, fp
2e5c0     01 BA 06 F1 | 	add	local11, #1
2e5c4     E7 BA 62 FC | 	wrlong	local11, fp
2e5c8     30 CE 85 F1 | 	sub	fp, #48
2e5cc     B8 FF 9F FD | 	jmp	#LR__4954
2e5d0                 | LR__4956
2e5d0                 | LR__4957
2e5d0     00 BA 06 F6 | 	mov	local11, #0
2e5d4     30 CE 05 F1 | 	add	fp, #48
2e5d8     E7 B8 02 FB | 	rdlong	local10, fp
2e5dc     30 CE 85 F1 | 	sub	fp, #48
2e5e0     5C AB C2 FA | 	rdbyte	local03, local10
2e5e4     20 AA 16 F2 | 	cmp	local03, #32 wc
2e5e8     04 BA 06 C6 |  if_b	mov	local11, #4
2e5ec                 | LR__4958
2e5ec     30 CE 05 F1 | 	add	fp, #48
2e5f0     E7 AA 02 FB | 	rdlong	local03, fp
2e5f4     30 CE 85 F1 | 	sub	fp, #48
2e5f8     54 AB 62 FC | 	wrlong	local03, local02
2e5fc                 | ' 	}
2e5fc                 | ' 	*path = p;
2e5fc                 | ' #line 2862 "ff.c"
2e5fc                 | ' 	while (di) {
2e5fc     00 AE 0E F2 | 	cmp	local05, #0 wz
2e600     30 00 90 AD |  if_e	jmp	#LR__4961
2e604     D7 16 48 FB | 	callpa	#(@LR__4960-@LR__4959)>>2,fcache_load_ptr_
2e608                 | LR__4959
2e608     57 B7 02 F6 | 	mov	local09, local05
2e60c     01 B6 86 F1 | 	sub	local09, #1
2e610     01 B6 66 F0 | 	shl	local09, #1
2e614     56 B7 02 F1 | 	add	local09, local04
2e618     5B B7 E2 FA | 	rdword	local09, local09
2e61c     5B AB 32 F9 | 	getword	local03, local09, #0
2e620     20 AA 0E F2 | 	cmp	local03, #32 wz
2e624     5B B9 02 56 |  if_ne	mov	local10, local09
2e628     5C B9 32 59 |  if_ne	getword	local10, local10, #0
2e62c     2E B8 0E 52 |  if_ne	cmp	local10, #46 wz
2e630     F5 AF 6E AB |  if_e	djnz	local05, #LR__4959
2e634                 | LR__4960
2e634                 | LR__4961
2e634     57 B9 02 F6 | 	mov	local10, local05
2e638     01 B8 66 F0 | 	shl	local10, #1
2e63c     56 B9 02 F1 | 	add	local10, local04
2e640     5C 01 58 FC | 	wrword	#0, local10
2e644     00 AE 0E F2 | 	cmp	local05, #0 wz
2e648     06 7A 06 A6 |  if_e	mov	result1, #6
2e64c     04 03 90 AD |  if_e	jmp	#LR__4984
2e650                 | ' 
2e650                 | ' 
2e650                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2e650     00 BC 06 F6 | 	mov	local12, #0
2e654     D7 12 48 FB | 	callpa	#(@LR__4963-@LR__4962)>>2,fcache_load_ptr_
2e658                 | LR__4962
2e658     5E B7 02 F6 | 	mov	local09, local12
2e65c     01 B6 66 F0 | 	shl	local09, #1
2e660     56 B7 02 F1 | 	add	local09, local04
2e664     5B AB E2 FA | 	rdword	local03, local09
2e668     20 AA 0E F2 | 	cmp	local03, #32 wz
2e66c     5E B5 02 A6 |  if_e	mov	local08, local12
2e670     01 B4 06 A1 |  if_e	add	local08, #1
2e674     5A BD 02 A6 |  if_e	mov	local12, local08
2e678     DC FF 9F AD |  if_e	jmp	#LR__4962
2e67c                 | LR__4963
2e67c     01 BC 16 F2 | 	cmp	local12, #1 wc
2e680     18 00 90 3D |  if_ae	jmp	#LR__4964
2e684     5E B7 02 F6 | 	mov	local09, local12
2e688     01 B6 66 F0 | 	shl	local09, #1
2e68c     56 B7 02 F1 | 	add	local09, local04
2e690     5B AB E2 FA | 	rdword	local03, local09
2e694     2E AA 0E F2 | 	cmp	local03, #46 wz
2e698     08 00 90 5D |  if_ne	jmp	#LR__4965
2e69c                 | LR__4964
2e69c     5D BB E2 F8 | 	getbyte	local11, local11, #0
2e6a0     03 BA 46 F5 | 	or	local11, #3
2e6a4                 | LR__4965
2e6a4     D7 14 48 FB | 	callpa	#(@LR__4967-@LR__4966)>>2,fcache_load_ptr_
2e6a8                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2e6a8                 | LR__4966
2e6a8     01 AE 16 F2 | 	cmp	local05, #1 wc
2e6ac     20 00 90 CD |  if_b	jmp	#LR__4968
2e6b0     57 B7 02 F6 | 	mov	local09, local05
2e6b4     01 B6 86 F1 | 	sub	local09, #1
2e6b8     01 B6 66 F0 | 	shl	local09, #1
2e6bc     56 B7 02 F1 | 	add	local09, local04
2e6c0     5B AB E2 FA | 	rdword	local03, local09
2e6c4     2E AA 0E F2 | 	cmp	local03, #46 wz
2e6c8     01 AE 86 51 |  if_ne	sub	local05, #1
2e6cc     D8 FF 9F 5D |  if_ne	jmp	#LR__4966
2e6d0                 | LR__4967
2e6d0                 | LR__4968
2e6d0     53 93 02 F6 | 	mov	arg01, local01
2e6d4     20 92 06 F1 | 	add	arg01, #32
2e6d8     20 94 06 F6 | 	mov	arg02, #32
2e6dc     0B 96 06 F6 | 	mov	arg03, #11
2e6e0     49 BF 02 F6 | 	mov	local13, arg01
2e6e4     D8 00 A0 FD | 	call	#\builtin_bytefill_
2e6e8     5F 7B 02 F6 | 	mov	result1, local13
2e6ec     00 C0 06 F6 | 	mov	local14, #0
2e6f0     00 C2 06 F6 | 	mov	local15, #0
2e6f4     08 C4 06 F6 | 	mov	local16, #8
2e6f8                 | ' 
2e6f8                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2e6f8                 | ' 	i = b = 0; ni = 8;
2e6f8                 | ' 	for (;;) {
2e6f8                 | LR__4969
2e6f8     5E C7 02 F6 | 	mov	local17, local12
2e6fc     63 C9 02 F6 | 	mov	local18, local17
2e700     01 C8 66 F0 | 	shl	local18, #1
2e704     56 B3 02 F6 | 	mov	local07, local04
2e708     56 C9 02 F1 | 	add	local18, local04
2e70c     64 B7 E2 FA | 	rdword	local09, local18
2e710     5B AB 02 F6 | 	mov	local03, local09
2e714     0F AA 4E F7 | 	zerox	local03, #15 wz
2e718     01 BC 06 F1 | 	add	local12, #1
2e71c     B0 01 90 AD |  if_e	jmp	#LR__4982
2e720     5B AB 32 F9 | 	getword	local03, local09, #0
2e724     20 AA 0E F2 | 	cmp	local03, #32 wz
2e728     14 00 90 AD |  if_e	jmp	#LR__4970
2e72c     5B B9 32 F9 | 	getword	local10, local09, #0
2e730     2E B8 0E F2 | 	cmp	local10, #46 wz
2e734     14 00 90 5D |  if_ne	jmp	#LR__4971
2e738     57 BD 0A F2 | 	cmp	local12, local05 wz
2e73c     0C 00 90 AD |  if_e	jmp	#LR__4971
2e740                 | LR__4970
2e740     5D BB E2 F8 | 	getbyte	local11, local11, #0
2e744     03 BA 46 F5 | 	or	local11, #3
2e748                 | ' 			cf |=  0x01  |  0x02 ;
2e748                 | ' 			continue;
2e748     AC FF 9F FD | 	jmp	#LR__4969
2e74c                 | LR__4971
2e74c     62 C3 12 F2 | 	cmp	local15, local16 wc
2e750     57 BD 0A C2 |  if_b	cmp	local12, local05 wz
2e754     3C 00 90 4D |  if_c_and_nz	jmp	#LR__4972
2e758     0B C4 0E F2 | 	cmp	local16, #11 wz
2e75c     5D BB E2 A8 |  if_e	getbyte	local11, local11, #0
2e760     03 BA 46 A5 |  if_e	or	local11, #3
2e764                 | ' 				cf |=  0x01  |  0x02 ;
2e764                 | ' 				break;
2e764     68 01 90 AD |  if_e	jmp	#LR__4982
2e768     57 BD 0A F2 | 	cmp	local12, local05 wz
2e76c     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2e770     03 BA 46 55 |  if_ne	or	local11, #3
2e774     57 BD 1A F2 | 	cmp	local12, local05 wcz
2e778     54 01 90 1D |  if_a	jmp	#LR__4982
2e77c     57 BD 02 F6 | 	mov	local12, local05
2e780     08 C2 06 F6 | 	mov	local15, #8
2e784     0B C4 06 F6 | 	mov	local16, #11
2e788     60 C1 E2 F8 | 	getbyte	local14, local14, #0
2e78c     02 C0 66 F0 | 	shl	local14, #2
2e790                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2e790                 | ' 			continue;
2e790     64 FF 9F FD | 	jmp	#LR__4969
2e794                 | LR__4972
2e794     5B AB 32 F9 | 	getword	local03, local09, #0
2e798     80 AA 16 F2 | 	cmp	local03, #128 wc
2e79c     50 00 90 CD |  if_b	jmp	#LR__4974
2e7a0     5D BB E2 F8 | 	getbyte	local11, local11, #0
2e7a4     02 BA 46 F5 | 	or	local11, #2
2e7a8     5B 93 32 F9 | 	getword	arg01, local09, #0
2e7ac     01 00 00 FF 
2e7b0     52 B9 06 F6 | 	mov	local10, ##850
2e7b4     01 00 00 FF 
2e7b8     52 95 06 F6 | 	mov	arg02, ##850
2e7bc     B0 D1 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2e7c0     3D B7 02 F6 | 	mov	local09, result1
2e7c4     5B AB 32 F9 | 	getword	local03, local09, #0
2e7c8     80 AA CE F7 | 	test	local03, #128 wz
2e7cc     20 00 90 AD |  if_e	jmp	#LR__4973
2e7d0     5B B9 32 F9 | 	getword	local10, local09, #0
2e7d4     7F B8 06 F5 | 	and	local10, #127
2e7d8     5C C7 02 F6 | 	mov	local17, local10
2e7dc     36 C9 02 F6 | 	mov	local18, ptr__fatfs_cc_dat__
2e7e0     01 00 00 FF 
2e7e4     BB C9 06 F1 | 	add	local18, ##955
2e7e8     64 C7 02 F1 | 	add	local17, local18
2e7ec     63 B7 C2 FA | 	rdbyte	local09, local17
2e7f0                 | LR__4973
2e7f0                 | LR__4974
2e7f0     5B AB 32 F9 | 	getword	local03, local09, #0
2e7f4     00 AB 16 F2 | 	cmp	local03, #256 wc
2e7f8     40 00 90 CD |  if_b	jmp	#LR__4975
2e7fc     62 AB 02 F6 | 	mov	local03, local16
2e800     01 AA 86 F1 | 	sub	local03, #1
2e804     55 C3 12 F2 | 	cmp	local15, local03 wc
2e808     5D BB E2 38 |  if_ae	getbyte	local11, local11, #0
2e80c     03 BA 46 35 |  if_ae	or	local11, #3
2e810     62 C3 02 36 |  if_ae	mov	local15, local16
2e814                 | ' 				cf |=  0x01  |  0x02 ;
2e814                 | ' 				i = ni; continue;
2e814     E0 FE 9F 3D |  if_ae	jmp	#LR__4969
2e818     61 C7 02 F6 | 	mov	local17, local15
2e81c     53 C9 02 F6 | 	mov	local18, local01
2e820     20 C8 06 F1 | 	add	local18, #32
2e824     64 C7 02 F1 | 	add	local17, local18
2e828     5B B3 32 F9 | 	getword	local07, local09, #0
2e82c     08 B2 46 F0 | 	shr	local07, #8
2e830     63 B3 42 FC | 	wrbyte	local07, local17
2e834     01 C2 06 F1 | 	add	local15, #1
2e838     74 00 90 FD | 	jmp	#LR__4981
2e83c                 | LR__4975
2e83c     5B AB 02 F6 | 	mov	local03, local09
2e840     0F AA 4E F7 | 	zerox	local03, #15 wz
2e844     18 00 90 AD |  if_e	jmp	#LR__4976
2e848     91 01 00 FF 
2e84c     E8 92 06 F6 | 	mov	arg01, ##@LR__5474
2e850     5B 95 32 F9 | 	getword	arg02, local09, #0
2e854     68 D4 BF FD | 	call	#_fatfs_cc_strchr
2e858     00 7A 0E F2 | 	cmp	result1, #0 wz
2e85c     10 00 90 AD |  if_e	jmp	#LR__4977
2e860                 | LR__4976
2e860     5F B6 06 F6 | 	mov	local09, #95
2e864     5D BB E2 F8 | 	getbyte	local11, local11, #0
2e868     03 BA 46 F5 | 	or	local11, #3
2e86c     40 00 90 FD | 	jmp	#LR__4980
2e870                 | LR__4977
2e870     5B AB 32 F9 | 	getword	local03, local09, #0
2e874     41 AA 16 F2 | 	cmp	local03, #65 wc
2e878     10 00 90 CD |  if_b	jmp	#LR__4978
2e87c     5B B9 32 F9 | 	getword	local10, local09, #0
2e880     5B B8 16 F2 | 	cmp	local10, #91 wc
2e884     60 C1 E2 C8 |  if_b	getbyte	local14, local14, #0
2e888     02 C0 46 C5 |  if_b	or	local14, #2
2e88c                 | LR__4978
2e88c     5B AB 32 F9 | 	getword	local03, local09, #0
2e890     61 AA 16 F2 | 	cmp	local03, #97 wc
2e894     18 00 90 CD |  if_b	jmp	#LR__4979
2e898     5B B9 32 F9 | 	getword	local10, local09, #0
2e89c     7B B8 16 F2 | 	cmp	local10, #123 wc
2e8a0     60 C1 E2 C8 |  if_b	getbyte	local14, local14, #0
2e8a4     01 C0 46 C5 |  if_b	or	local14, #1
2e8a8     5B B7 32 C9 |  if_b	getword	local09, local09, #0
2e8ac     20 B6 86 C1 |  if_b	sub	local09, #32
2e8b0                 | LR__4979
2e8b0                 | LR__4980
2e8b0                 | LR__4981
2e8b0     61 C7 02 F6 | 	mov	local17, local15
2e8b4     53 C9 02 F6 | 	mov	local18, local01
2e8b8     20 C8 06 F1 | 	add	local18, #32
2e8bc     64 C7 02 F1 | 	add	local17, local18
2e8c0     5B B7 32 F9 | 	getword	local09, local09, #0
2e8c4     63 B7 42 FC | 	wrbyte	local09, local17
2e8c8     01 C2 06 F1 | 	add	local15, #1
2e8cc     28 FE 9F FD | 	jmp	#LR__4969
2e8d0                 | LR__4982
2e8d0     20 A6 06 F1 | 	add	local01, #32
2e8d4     53 AB C2 FA | 	rdbyte	local03, local01
2e8d8     20 A6 86 F1 | 	sub	local01, #32
2e8dc     E5 AA 0E F2 | 	cmp	local03, #229 wz
2e8e0     20 A6 06 A1 |  if_e	add	local01, #32
2e8e4     53 0B 48 AC |  if_e	wrbyte	#5, local01
2e8e8     20 A6 86 A1 |  if_e	sub	local01, #32
2e8ec     08 C4 0E F2 | 	cmp	local16, #8 wz
2e8f0     60 C1 E2 A8 |  if_e	getbyte	local14, local14, #0
2e8f4     02 C0 66 A0 |  if_e	shl	local14, #2
2e8f8     60 AB E2 F8 | 	getbyte	local03, local14, #0
2e8fc     0C AA 06 F5 | 	and	local03, #12
2e900     0C AA 0E F2 | 	cmp	local03, #12 wz
2e904     60 B9 02 56 |  if_ne	mov	local10, local14
2e908     5C B9 E2 58 |  if_ne	getbyte	local10, local10, #0
2e90c     03 B8 06 55 |  if_ne	and	local10, #3
2e910     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
2e914     5D BB E2 A8 |  if_e	getbyte	local11, local11, #0
2e918     02 BA 46 A5 |  if_e	or	local11, #2
2e91c     5D AB E2 F8 | 	getbyte	local03, local11, #0
2e920     02 AA CE F7 | 	test	local03, #2 wz
2e924     20 00 90 5D |  if_ne	jmp	#LR__4983
2e928     60 AB E2 F8 | 	getbyte	local03, local14, #0
2e92c     01 AA CE F7 | 	test	local03, #1 wz
2e930     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2e934     10 BA 46 55 |  if_ne	or	local11, #16
2e938     60 C1 E2 F8 | 	getbyte	local14, local14, #0
2e93c     04 C0 CE F7 | 	test	local14, #4 wz
2e940     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2e944     08 BA 46 55 |  if_ne	or	local11, #8
2e948                 | LR__4983
2e948     2B A6 06 F1 | 	add	local01, #43
2e94c     53 BB 42 FC | 	wrbyte	local11, local01
2e950                 | ' 	}
2e950                 | ' 
2e950                 | ' 	dp->fn[ 11 ] = cf;
2e950                 | ' 
2e950                 | ' 	return FR_OK;
2e950     00 7A 06 F6 | 	mov	result1, #0
2e954                 | LR__4984
2e954     E7 F0 03 F6 | 	mov	ptra, fp
2e958     F2 00 A0 FD | 	call	#popregs_
2e95c                 | _fatfs_cc_create_name_ret
2e95c     2D 00 64 FD | 	ret
2e960                 | 
2e960                 | _fatfs_cc_follow_path
2e960     04 CA 05 F6 | 	mov	COUNT_, #4
2e964     E8 00 A0 FD | 	call	#pushregs_
2e968     18 F0 07 F1 | 	add	ptra, #24
2e96c     49 A7 02 F6 | 	mov	local01, arg01
2e970     08 CE 05 F1 | 	add	fp, #8
2e974     E7 94 62 FC | 	wrlong	arg02, fp
2e978     08 CE 85 F1 | 	sub	fp, #8
2e97c     53 A9 02 FB | 	rdlong	local02, local01
2e980     D7 24 48 FB | 	callpa	#(@LR__4992-@LR__4990)>>2,fcache_load_ptr_
2e984                 | ' )
2e984                 | ' {
2e984                 | ' 	FRESULT res;
2e984                 | ' 	BYTE ns;
2e984                 | ' 	FATFS *fs = dp->obj.fs;
2e984                 | ' #line 3034 "ff.c"
2e984                 | ' 	{
2e984                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2e984                 | LR__4990
2e984     08 CE 05 F1 | 	add	fp, #8
2e988     E7 7A 02 FB | 	rdlong	result1, fp
2e98c     08 CE 85 F1 | 	sub	fp, #8
2e990     3D 7B C2 FA | 	rdbyte	result1, result1
2e994     2F 7A 0E F2 | 	cmp	result1, #47 wz
2e998     18 00 90 AD |  if_e	jmp	#LR__4991
2e99c     08 CE 05 F1 | 	add	fp, #8
2e9a0     E7 7A 02 FB | 	rdlong	result1, fp
2e9a4     08 CE 85 F1 | 	sub	fp, #8
2e9a8     3D 7B C2 FA | 	rdbyte	result1, result1
2e9ac     5C 7A 0E F2 | 	cmp	result1, #92 wz
2e9b0     18 00 90 5D |  if_ne	jmp	#LR__4993
2e9b4                 | LR__4991
2e9b4     08 CE 05 F1 | 	add	fp, #8
2e9b8     E7 7A 02 FB | 	rdlong	result1, fp
2e9bc     01 7A 06 F1 | 	add	result1, #1
2e9c0     E7 7A 62 FC | 	wrlong	result1, fp
2e9c4     08 CE 85 F1 | 	sub	fp, #8
2e9c8     B8 FF 9F FD | 	jmp	#LR__4990
2e9cc                 | LR__4992
2e9cc                 | LR__4993
2e9cc     08 A6 06 F1 | 	add	local01, #8
2e9d0     53 01 68 FC | 	wrlong	#0, local01
2e9d4     08 A6 86 F1 | 	sub	local01, #8
2e9d8     08 CE 05 F1 | 	add	fp, #8
2e9dc     E7 94 02 FB | 	rdlong	arg02, fp
2e9e0     08 CE 85 F1 | 	sub	fp, #8
2e9e4     4A 95 C2 FA | 	rdbyte	arg02, arg02
2e9e8     20 94 16 F2 | 	cmp	arg02, #32 wc
2e9ec     20 00 90 3D |  if_ae	jmp	#LR__4994
2e9f0     2B A6 06 F1 | 	add	local01, #43
2e9f4     53 01 49 FC | 	wrbyte	#128, local01
2e9f8     2B A6 86 F1 | 	sub	local01, #43
2e9fc     53 93 02 F6 | 	mov	arg01, local01
2ea00     00 94 06 F6 | 	mov	arg02, #0
2ea04     9C E6 BF FD | 	call	#_fatfs_cc_dir_sdi
2ea08     3D AB 02 F6 | 	mov	local03, result1
2ea0c     A0 00 90 FD | 	jmp	#LR__4998
2ea10                 | LR__4994
2ea10                 | ' 		for (;;) {
2ea10                 | LR__4995
2ea10     E7 94 02 F6 | 	mov	arg02, fp
2ea14     08 94 06 F1 | 	add	arg02, #8
2ea18     53 93 02 F6 | 	mov	arg01, local01
2ea1c     5C FA BF FD | 	call	#_fatfs_cc_create_name
2ea20     3D AB 0A F6 | 	mov	local03, result1 wz
2ea24     88 00 90 5D |  if_ne	jmp	#LR__4997
2ea28     53 93 02 F6 | 	mov	arg01, local01
2ea2c     0C F1 BF FD | 	call	#_fatfs_cc_dir_find
2ea30     3D AB 0A F6 | 	mov	local03, result1 wz
2ea34     2B A6 06 F1 | 	add	local01, #43
2ea38     53 AD C2 FA | 	rdbyte	local04, local01
2ea3c     2B A6 86 F1 | 	sub	local01, #43
2ea40     18 00 90 AD |  if_e	jmp	#LR__4996
2ea44     04 AA 0E F2 | 	cmp	local03, #4 wz
2ea48     64 00 90 5D |  if_ne	jmp	#LR__4997
2ea4c     56 AD E2 F8 | 	getbyte	local04, local04, #0
2ea50     04 AC CE F7 | 	test	local04, #4 wz
2ea54     05 AA 06 A6 |  if_e	mov	local03, #5
2ea58                 | ' 					}
2ea58                 | ' 				}
2ea58                 | ' 				break;
2ea58     54 00 90 FD | 	jmp	#LR__4997
2ea5c                 | LR__4996
2ea5c     56 AD E2 F8 | 	getbyte	local04, local04, #0
2ea60     04 AC CE F7 | 	test	local04, #4 wz
2ea64     48 00 90 5D |  if_ne	jmp	#LR__4997
2ea68     06 A6 06 F1 | 	add	local01, #6
2ea6c     53 AD C2 FA | 	rdbyte	local04, local01
2ea70     06 A6 86 F1 | 	sub	local01, #6
2ea74     10 AC CE F7 | 	test	local04, #16 wz
2ea78     05 AA 06 A6 |  if_e	mov	local03, #5
2ea7c                 | ' 				res = FR_NO_PATH; break;
2ea7c     30 00 90 AD |  if_e	jmp	#LR__4997
2ea80     54 93 02 F6 | 	mov	arg01, local02
2ea84     54 95 02 F6 | 	mov	arg02, local02
2ea88     34 94 06 F1 | 	add	arg02, #52
2ea8c     10 A6 06 F1 | 	add	local01, #16
2ea90     53 AD 02 FB | 	rdlong	local04, local01
2ea94     FF AD 06 F5 | 	and	local04, #511
2ea98     56 95 02 F1 | 	add	arg02, local04
2ea9c     D8 E9 BF FD | 	call	#_fatfs_cc_ld_clust
2eaa0     08 A6 86 F1 | 	sub	local01, #8
2eaa4     53 7B 62 FC | 	wrlong	result1, local01
2eaa8     08 A6 86 F1 | 	sub	local01, #8
2eaac     60 FF 9F FD | 	jmp	#LR__4995
2eab0                 | LR__4997
2eab0                 | LR__4998
2eab0                 | ' 			}
2eab0                 | ' #line 3090 "ff.c"
2eab0                 | ' 			{
2eab0                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2eab0                 | ' 			}
2eab0                 | ' 		}
2eab0                 | ' 	}
2eab0                 | ' 
2eab0                 | ' 	return res;
2eab0     55 7B 02 F6 | 	mov	result1, local03
2eab4     E7 F0 03 F6 | 	mov	ptra, fp
2eab8     F2 00 A0 FD | 	call	#popregs_
2eabc                 | _fatfs_cc_follow_path_ret
2eabc     2D 00 64 FD | 	ret
2eac0                 | 
2eac0                 | _fatfs_cc_get_ldnumber
2eac0     01 80 66 F6 | 	neg	_var01, #1
2eac4     49 83 0A FB | 	rdlong	_var02, arg01 wz
2eac8     41 85 02 F6 | 	mov	_var03, _var02
2eacc     01 7A 66 A6 |  if_e	neg	result1, #1
2ead0     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2ead4     D7 10 48 FB | 	callpa	#(@LR__5001-@LR__5000)>>2,fcache_load_ptr_
2ead8                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2ead8                 | LR__5000
2ead8     42 87 C2 FA | 	rdbyte	_var04, _var03
2eadc     43 7B E2 F8 | 	getbyte	result1, _var04, #0
2eae0     20 7A 16 F2 | 	cmp	result1, #32 wc
2eae4     01 84 06 F1 | 	add	_var03, #1
2eae8     43 89 02 36 |  if_ae	mov	_var05, _var04
2eaec     44 89 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2eaf0     3A 88 0E 32 |  if_ae	cmp	_var05, #58 wz
2eaf4     E0 FF 9F 1D |  if_a	jmp	#LR__5000
2eaf8                 | LR__5001
2eaf8     43 87 E2 F8 | 	getbyte	_var04, _var04, #0
2eafc     3A 86 0E F2 | 	cmp	_var04, #58 wz
2eb00     40 00 90 5D |  if_ne	jmp	#LR__5003
2eb04     01 8A 06 F6 | 	mov	_var06, #1
2eb08     41 89 C2 FA | 	rdbyte	_var05, _var02
2eb0c     30 88 16 F2 | 	cmp	_var05, #48 wc
2eb10     1C 00 90 CD |  if_b	jmp	#LR__5002
2eb14     41 89 C2 FA | 	rdbyte	_var05, _var02
2eb18     3A 88 16 F2 | 	cmp	_var05, #58 wc
2eb1c     41 8D 02 C6 |  if_b	mov	_var07, _var02
2eb20     02 8C 06 C1 |  if_b	add	_var07, #2
2eb24     42 8D 0A C2 |  if_b	cmp	_var07, _var03 wz
2eb28     44 8B 02 86 |  if_c_and_z	mov	_var06, _var05
2eb2c     30 8A 86 81 |  if_c_and_z	sub	_var06, #48
2eb30                 | LR__5002
2eb30     01 8A 56 F2 | 	cmps	_var06, #1 wc
2eb34     45 81 02 C6 |  if_b	mov	_var01, _var06
2eb38     49 85 62 CC |  if_b	wrlong	_var03, arg01
2eb3c                 | ' 			vol = i;
2eb3c                 | ' 			*path = tt;
2eb3c                 | ' 		}
2eb3c                 | ' 		return vol;
2eb3c     40 7B 02 F6 | 	mov	result1, _var01
2eb40     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2eb44                 | LR__5003
2eb44                 | ' 	}
2eb44                 | ' #line 3170 "ff.c"
2eb44                 | ' 	vol = 0;
2eb44                 | ' 
2eb44                 | ' 	return vol;
2eb44     00 7A 06 F6 | 	mov	result1, #0
2eb48                 | _fatfs_cc_get_ldnumber_ret
2eb48     2D 00 64 FD | 	ret
2eb4c                 | 
2eb4c                 | _fatfs_cc_check_fs
2eb4c     04 CA 05 F6 | 	mov	COUNT_, #4
2eb50     E8 00 A0 FD | 	call	#pushregs_
2eb54     49 A7 02 F6 | 	mov	local01, arg01
2eb58     03 A6 06 F1 | 	add	local01, #3
2eb5c     53 01 48 FC | 	wrbyte	#0, local01
2eb60     2D A6 06 F1 | 	add	local01, #45
2eb64     FF FF FF FF 
2eb68     53 FF 6B FC | 	wrlong	##-1, local01
2eb6c     30 A6 86 F1 | 	sub	local01, #48
2eb70     53 93 02 F6 | 	mov	arg01, local01
2eb74     C8 DB BF FD | 	call	#_fatfs_cc_move_window
2eb78     00 7A 0E F2 | 	cmp	result1, #0 wz
2eb7c     04 7A 06 56 |  if_ne	mov	result1, #4
2eb80     64 01 90 5D |  if_ne	jmp	#LR__5013
2eb84     34 A6 06 F1 | 	add	local01, #52
2eb88     53 93 02 F6 | 	mov	arg01, local01
2eb8c     FE 93 06 F1 | 	add	arg01, #510
2eb90                 | ' {
2eb90                 | ' 
2eb90                 | ' 	return *((WORD*)ptr);
2eb90     49 A9 E2 FA | 	rdword	local02, arg01
2eb94     53 AB C2 FA | 	rdbyte	local03, local01
2eb98     34 A6 86 F1 | 	sub	local01, #52
2eb9c     55 AD E2 F8 | 	getbyte	local04, local03, #0
2eba0     EB AC 0E F2 | 	cmp	local04, #235 wz
2eba4     55 97 02 56 |  if_ne	mov	arg03, local03
2eba8     4B 97 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2ebac     E9 96 0E 52 |  if_ne	cmp	arg03, #233 wz
2ebb0     55 AB E2 58 |  if_ne	getbyte	local03, local03, #0
2ebb4     E8 AA 0E 52 |  if_ne	cmp	local03, #232 wz
2ebb8     14 01 90 5D |  if_ne	jmp	#LR__5012
2ebbc     54 AD 32 F9 | 	getword	local04, local02, #0
2ebc0     55 00 00 FF 
2ebc4     55 AC 0E F2 | 	cmp	local04, ##43605 wz
2ebc8     24 00 90 5D |  if_ne	jmp	#LR__5010
2ebcc     53 93 02 F6 | 	mov	arg01, local01
2ebd0     86 92 06 F1 | 	add	arg01, #134
2ebd4     91 01 00 FF 
2ebd8     EF 94 06 F6 | 	mov	arg02, ##@LR__5475
2ebdc     08 96 06 F6 | 	mov	arg03, #8
2ebe0     10 D0 BF FD | 	call	#_fatfs_cc_memcmp
2ebe4     00 7A 0E F2 | 	cmp	result1, #0 wz
2ebe8                 | ' 			return 0;
2ebe8     00 7A 06 A6 |  if_e	mov	result1, #0
2ebec     F8 00 90 AD |  if_e	jmp	#LR__5013
2ebf0                 | LR__5010
2ebf0     34 A6 06 F1 | 	add	local01, #52
2ebf4     53 93 02 F6 | 	mov	arg01, local01
2ebf8     0B 92 06 F1 | 	add	arg01, #11
2ebfc                 | ' {
2ebfc                 | ' 
2ebfc                 | ' 	return *((WORD*)ptr);
2ebfc     49 7B E2 FA | 	rdword	result1, arg01
2ec00     0D A6 06 F1 | 	add	local01, #13
2ec04     53 AB C2 FA | 	rdbyte	local03, local01
2ec08     41 A6 86 F1 | 	sub	local01, #65
2ec0c     3D AD 32 F9 | 	getword	local04, result1, #0
2ec10     3D 95 32 F9 | 	getword	arg02, result1, #0
2ec14     01 94 86 F1 | 	sub	arg02, #1
2ec18     4A AD CA F7 | 	test	local04, arg02 wz
2ec1c     B0 00 90 5D |  if_ne	jmp	#LR__5011
2ec20     3D 95 32 F9 | 	getword	arg02, result1, #0
2ec24     01 00 00 FF 
2ec28     00 94 16 F2 | 	cmp	arg02, ##512 wc
2ec2c     A0 00 90 CD |  if_b	jmp	#LR__5011
2ec30     3D 95 32 F9 | 	getword	arg02, result1, #0
2ec34     01 00 00 FF 
2ec38     01 94 16 F2 | 	cmp	arg02, ##513 wc
2ec3c     90 00 90 3D |  if_ae	jmp	#LR__5011
2ec40     55 93 02 F6 | 	mov	arg01, local03
2ec44     07 92 4E F7 | 	zerox	arg01, #7 wz
2ec48     84 00 90 AD |  if_e	jmp	#LR__5011
2ec4c     55 93 E2 F8 | 	getbyte	arg01, local03, #0
2ec50     55 AB E2 F8 | 	getbyte	local03, local03, #0
2ec54     01 AA 86 F1 | 	sub	local03, #1
2ec58     55 93 CA F7 | 	test	arg01, local03 wz
2ec5c     70 00 90 5D |  if_ne	jmp	#LR__5011
2ec60     53 93 02 F6 | 	mov	arg01, local01
2ec64     42 92 06 F1 | 	add	arg01, #66
2ec68                 | ' {
2ec68                 | ' 
2ec68                 | ' 	return *((WORD*)ptr);
2ec68     49 7B EA FA | 	rdword	result1, arg01 wz
2ec6c     60 00 90 AD |  if_e	jmp	#LR__5011
2ec70     44 A6 06 F1 | 	add	local01, #68
2ec74     53 93 C2 FA | 	rdbyte	arg01, local01
2ec78     44 A6 86 F1 | 	sub	local01, #68
2ec7c     01 92 86 F1 | 	sub	arg01, #1
2ec80     02 92 16 F2 | 	cmp	arg01, #2 wc
2ec84     48 00 90 3D |  if_ae	jmp	#LR__5011
2ec88     53 93 02 F6 | 	mov	arg01, local01
2ec8c     45 92 06 F1 | 	add	arg01, #69
2ec90                 | ' {
2ec90                 | ' 
2ec90                 | ' 	return *((WORD*)ptr);
2ec90     49 7B EA FA | 	rdword	result1, arg01 wz
2ec94     38 00 90 AD |  if_e	jmp	#LR__5011
2ec98     53 93 02 F6 | 	mov	arg01, local01
2ec9c     47 92 06 F1 | 	add	arg01, #71
2eca0                 | ' {
2eca0                 | ' 
2eca0                 | ' 	return *((WORD*)ptr);
2eca0     49 7B E2 FA | 	rdword	result1, arg01
2eca4     3D AB 32 F9 | 	getword	local03, result1, #0
2eca8     80 AA 16 F2 | 	cmp	local03, #128 wc
2ecac     53 93 02 C6 |  if_b	mov	arg01, local01
2ecb0     54 92 06 C1 |  if_b	add	arg01, #84
2ecb4                 | ' {
2ecb4                 | ' 
2ecb4                 | ' 	return *((DWORD*)ptr);
2ecb4     49 7B 02 CB |  if_b	rdlong	result1, arg01
2ecb8     80 00 00 CF 
2ecbc     00 7A 16 C2 |  if_b	cmp	result1, ##65536 wc
2ecc0     4A A6 06 31 |  if_ae	add	local01, #74
2ecc4                 | ' {
2ecc4                 | ' 
2ecc4                 | ' 	return *((WORD*)ptr);
2ecc4     53 7B EA 3A |  if_ae	rdword	result1, local01 wz
2ecc8                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2ecc8                 | ' 			&& ld_word(fs->win +  14 ) != 0
2ecc8                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2ecc8                 | ' 			&& ld_word(fs->win +  17 ) != 0
2ecc8                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2ecc8                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2ecc8                 | ' 				return 0;
2ecc8     00 7A 06 16 |  if_a	mov	result1, #0
2eccc     18 00 90 1D |  if_a	jmp	#LR__5013
2ecd0                 | LR__5011
2ecd0                 | LR__5012
2ecd0                 | ' 		}
2ecd0                 | ' 	}
2ecd0                 | ' 	return sign == 0xAA55 ? 2 : 3;
2ecd0     54 AB 32 F9 | 	getword	local03, local02, #0
2ecd4     55 00 00 FF 
2ecd8     55 AA 0E F2 | 	cmp	local03, ##43605 wz
2ecdc     02 AC 06 A6 |  if_e	mov	local04, #2
2ece0     03 AC 06 56 |  if_ne	mov	local04, #3
2ece4     56 7B 02 F6 | 	mov	result1, local04
2ece8                 | LR__5013
2ece8     E7 F0 03 F6 | 	mov	ptra, fp
2ecec     F2 00 A0 FD | 	call	#popregs_
2ecf0                 | _fatfs_cc_check_fs_ret
2ecf0     2D 00 64 FD | 	ret
2ecf4                 | 
2ecf4                 | _fatfs_cc_find_volume
2ecf4     05 CA 05 F6 | 	mov	COUNT_, #5
2ecf8     E8 00 A0 FD | 	call	#pushregs_
2ecfc     24 F0 07 F1 | 	add	ptra, #36
2ed00     49 A7 02 F6 | 	mov	local01, arg01
2ed04     4A A9 02 F6 | 	mov	local02, arg02
2ed08     53 93 02 F6 | 	mov	arg01, local01
2ed0c     00 94 06 F6 | 	mov	arg02, #0
2ed10     38 FE BF FD | 	call	#_fatfs_cc_check_fs
2ed14     02 7A 0E F2 | 	cmp	result1, #2 wz
2ed18     0C 00 90 AD |  if_e	jmp	#LR__5020
2ed1c     03 7A 16 F2 | 	cmp	result1, #3 wc
2ed20     00 A8 0E C2 |  if_b	cmp	local02, #0 wz
2ed24     C8 00 90 BD |  if_nc_or_z	jmp	#LR__5028
2ed28                 | LR__5020
2ed28                 | ' 	for (i = 0; i < 4; i++) {
2ed28     00 AA 06 F6 | 	mov	local03, #0
2ed2c     D7 22 48 FB | 	callpa	#(@LR__5022-@LR__5021)>>2,fcache_load_ptr_
2ed30                 | LR__5021
2ed30     04 AA 16 F2 | 	cmp	local03, #4 wc
2ed34     3C 00 90 3D |  if_ae	jmp	#LR__5023
2ed38     55 AD 02 F6 | 	mov	local04, local03
2ed3c     02 AC 66 F0 | 	shl	local04, #2
2ed40     E7 94 02 F6 | 	mov	arg02, fp
2ed44     14 94 06 F1 | 	add	arg02, #20
2ed48     4A AD 02 F1 | 	add	local04, arg02
2ed4c     53 93 02 F6 | 	mov	arg01, local01
2ed50     F2 93 06 F1 | 	add	arg01, #498
2ed54     55 95 02 F6 | 	mov	arg02, local03
2ed58     04 94 66 F0 | 	shl	arg02, #4
2ed5c     4A 93 02 F1 | 	add	arg01, arg02
2ed60     08 92 06 F1 | 	add	arg01, #8
2ed64                 | ' {
2ed64                 | ' 
2ed64                 | ' 	return *((DWORD*)ptr);
2ed64     49 7B 02 FB | 	rdlong	result1, arg01
2ed68     56 7B 62 FC | 	wrlong	result1, local04
2ed6c     01 AA 06 F1 | 	add	local03, #1
2ed70     BC FF 9F FD | 	jmp	#LR__5021
2ed74                 | LR__5022
2ed74                 | LR__5023
2ed74     00 A8 0E F2 | 	cmp	local02, #0 wz
2ed78     54 AD 02 56 |  if_ne	mov	local04, local02
2ed7c     01 AC 86 51 |  if_ne	sub	local04, #1
2ed80     00 AC 06 A6 |  if_e	mov	local04, #0
2ed84     56 AB 02 F6 | 	mov	local03, local04
2ed88                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2ed88                 | ' 	}
2ed88                 | ' 	i = part ? part - 1 : 0;
2ed88                 | ' 	do {
2ed88                 | LR__5024
2ed88     55 AD 02 F6 | 	mov	local04, local03
2ed8c     02 AC 66 F0 | 	shl	local04, #2
2ed90     E7 94 02 F6 | 	mov	arg02, fp
2ed94     14 94 06 F1 | 	add	arg02, #20
2ed98     4A AD 02 F1 | 	add	local04, arg02
2ed9c     56 AD 0A FB | 	rdlong	local04, local04 wz
2eda0     28 00 90 AD |  if_e	jmp	#LR__5025
2eda4     55 AD 02 F6 | 	mov	local04, local03
2eda8     02 AC 66 F0 | 	shl	local04, #2
2edac     E7 94 02 F6 | 	mov	arg02, fp
2edb0     14 94 06 F1 | 	add	arg02, #20
2edb4     4A AD 02 F1 | 	add	local04, arg02
2edb8     56 95 02 FB | 	rdlong	arg02, local04
2edbc     53 93 02 F6 | 	mov	arg01, local01
2edc0     88 FD BF FD | 	call	#_fatfs_cc_check_fs
2edc4     3D AD 02 F6 | 	mov	local04, result1
2edc8     04 00 90 FD | 	jmp	#LR__5026
2edcc                 | LR__5025
2edcc     03 AC 06 F6 | 	mov	local04, #3
2edd0                 | LR__5026
2edd0     56 AF 02 F6 | 	mov	local05, local04
2edd4     00 A8 0E F2 | 	cmp	local02, #0 wz
2edd8     02 AE 16 A2 |  if_e	cmp	local05, #2 wc
2eddc     0C 00 90 8D |  if_c_and_z	jmp	#LR__5027
2ede0     01 AA 06 A1 |  if_e	add	local03, #1
2ede4     04 AA 16 A2 |  if_e	cmp	local03, #4 wc
2ede8     9C FF 9F 8D |  if_c_and_z	jmp	#LR__5024
2edec                 | LR__5027
2edec                 | ' 	return fmt;
2edec     57 7B 02 F6 | 	mov	result1, local05
2edf0                 | LR__5028
2edf0     E7 F0 03 F6 | 	mov	ptra, fp
2edf4     F2 00 A0 FD | 	call	#popregs_
2edf8                 | _fatfs_cc_find_volume_ret
2edf8     2D 00 64 FD | 	ret
2edfc                 | 
2edfc                 | _fatfs_cc_mount_volume
2edfc     0A CA 05 F6 | 	mov	COUNT_, #10
2ee00     E8 00 A0 FD | 	call	#pushregs_
2ee04     4B A7 02 F6 | 	mov	local01, arg03
2ee08     4A 01 68 FC | 	wrlong	#0, arg02
2ee0c     B0 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2ee10     3D A9 02 F6 | 	mov	local02, result1
2ee14     00 A8 56 F2 | 	cmps	local02, #0 wc
2ee18     0B 7A 06 C6 |  if_b	mov	result1, #11
2ee1c     00 05 90 CD |  if_b	jmp	#LR__5039
2ee20     54 97 02 F6 | 	mov	arg03, local02
2ee24     02 96 66 F0 | 	shl	arg03, #2
2ee28     32 97 02 F1 | 	add	arg03, objptr
2ee2c     4B AB 0A FB | 	rdlong	local03, arg03 wz
2ee30     0C 7A 06 A6 |  if_e	mov	result1, #12
2ee34     E8 04 90 AD |  if_e	jmp	#LR__5039
2ee38     4A AB 62 FC | 	wrlong	local03, arg02
2ee3c     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2ee40     FE A6 06 F5 | 	and	local01, #254
2ee44     55 97 CA FA | 	rdbyte	arg03, local03 wz
2ee48     44 00 90 AD |  if_e	jmp	#LR__5031
2ee4c     01 00 00 FF 
2ee50     10 64 06 F1 | 	add	objptr, ##528
2ee54     32 93 0A FB | 	rdlong	arg01, objptr wz
2ee58     01 00 00 FF 
2ee5c     10 64 86 F1 | 	sub	objptr, ##528
2ee60                 | '         return RES_NOTRDY;
2ee60     03 7A 06 A6 |  if_e	mov	result1, #3
2ee64                 | '     }
2ee64                 | '     return RES_OK;
2ee64     00 7A 06 56 |  if_ne	mov	result1, #0
2ee68     3D 97 E2 F8 | 	getbyte	arg03, result1, #0
2ee6c     01 96 CE F7 | 	test	arg03, #1 wz
2ee70     1C 00 90 5D |  if_ne	jmp	#LR__5030
2ee74     00 A6 0E F2 | 	cmp	local01, #0 wz
2ee78     3D 7B E2 58 |  if_ne	getbyte	result1, result1, #0
2ee7c     04 7A CE 57 |  if_ne	test	result1, #4 wz
2ee80                 | ' 				return FR_WRITE_PROTECTED;
2ee80     0A 7A 06 56 |  if_ne	mov	result1, #10
2ee84     98 04 90 5D |  if_ne	jmp	#LR__5039
2ee88                 | ' 			}
2ee88                 | ' 			return FR_OK;
2ee88     00 7A 06 F6 | 	mov	result1, #0
2ee8c     90 04 90 FD | 	jmp	#LR__5039
2ee90                 | LR__5030
2ee90                 | LR__5031
2ee90     55 01 48 FC | 	wrbyte	#0, local03
2ee94     01 AA 06 F1 | 	add	local03, #1
2ee98     55 A9 42 FC | 	wrbyte	local02, local03
2ee9c     01 AA 86 F1 | 	sub	local03, #1
2eea0     01 00 00 FF 
2eea4     10 64 06 F1 | 	add	objptr, ##528
2eea8     32 A9 0A FB | 	rdlong	local02, objptr wz
2eeac     01 00 00 FF 
2eeb0     10 64 86 F1 | 	sub	objptr, ##528
2eeb4                 | ' 
2eeb4                 | '         return RES_NOTRDY;
2eeb4     03 7A 06 A6 |  if_e	mov	result1, #3
2eeb8                 | '     }
2eeb8                 | '     return RES_OK;
2eeb8     00 7A 06 56 |  if_ne	mov	result1, #0
2eebc     3D 97 02 F6 | 	mov	arg03, result1
2eec0     4B AD E2 F8 | 	getbyte	local04, arg03, #0
2eec4     01 AC CE F7 | 	test	local04, #1 wz
2eec8                 | ' 		return FR_NOT_READY;
2eec8     03 7A 06 56 |  if_ne	mov	result1, #3
2eecc     50 04 90 5D |  if_ne	jmp	#LR__5039
2eed0     00 A6 0E F2 | 	cmp	local01, #0 wz
2eed4     4B AD 02 56 |  if_ne	mov	local04, arg03
2eed8     56 AD E2 58 |  if_ne	getbyte	local04, local04, #0
2eedc     04 AC CE 57 |  if_ne	test	local04, #4 wz
2eee0                 | ' 		return FR_WRITE_PROTECTED;
2eee0     0A 7A 06 56 |  if_ne	mov	result1, #10
2eee4     38 04 90 5D |  if_ne	jmp	#LR__5039
2eee8     55 93 02 F6 | 	mov	arg01, local03
2eeec     00 94 06 F6 | 	mov	arg02, #0
2eef0     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2eef4     3D 93 02 F6 | 	mov	arg01, result1
2eef8     04 92 0E F2 | 	cmp	arg01, #4 wz
2eefc     01 7A 06 A6 |  if_e	mov	result1, #1
2ef00     1C 04 90 AD |  if_e	jmp	#LR__5039
2ef04     02 92 16 F2 | 	cmp	arg01, #2 wc
2ef08     0D 7A 06 36 |  if_ae	mov	result1, #13
2ef0c     10 04 90 3D |  if_ae	jmp	#LR__5039
2ef10     30 AA 06 F1 | 	add	local03, #48
2ef14     55 AF 02 FB | 	rdlong	local05, local03
2ef18     04 AA 06 F1 | 	add	local03, #4
2ef1c     55 93 02 F6 | 	mov	arg01, local03
2ef20     34 AA 86 F1 | 	sub	local03, #52
2ef24     0B 92 06 F1 | 	add	arg01, #11
2ef28                 | ' {
2ef28                 | ' 
2ef28                 | ' 	return *((WORD*)ptr);
2ef28     49 7B E2 FA | 	rdword	result1, arg01
2ef2c     01 00 00 FF 
2ef30     00 7A 0E F2 | 	cmp	result1, ##512 wz
2ef34     0D 7A 06 56 |  if_ne	mov	result1, #13
2ef38     E4 03 90 5D |  if_ne	jmp	#LR__5039
2ef3c     55 93 02 F6 | 	mov	arg01, local03
2ef40     4A 92 06 F1 | 	add	arg01, #74
2ef44                 | ' {
2ef44                 | ' 
2ef44                 | ' 	return *((WORD*)ptr);
2ef44     49 7B E2 FA | 	rdword	result1, arg01
2ef48     3D B1 0A F6 | 	mov	local06, result1 wz
2ef4c     55 93 02 A6 |  if_e	mov	arg01, local03
2ef50     58 92 06 A1 |  if_e	add	arg01, #88
2ef54                 | ' {
2ef54                 | ' 
2ef54                 | ' 	return *((DWORD*)ptr);
2ef54     49 7B 02 AB |  if_e	rdlong	result1, arg01
2ef58     3D B1 02 A6 |  if_e	mov	local06, result1
2ef5c     1C AA 06 F1 | 	add	local03, #28
2ef60     55 B1 62 FC | 	wrlong	local06, local03
2ef64     28 AA 06 F1 | 	add	local03, #40
2ef68     55 AD C2 FA | 	rdbyte	local04, local03
2ef6c     42 AA 86 F1 | 	sub	local03, #66
2ef70     55 AD 42 FC | 	wrbyte	local04, local03
2ef74     56 AD E2 F8 | 	getbyte	local04, local04, #0
2ef78     02 AA 86 F1 | 	sub	local03, #2
2ef7c     01 AC 0E F2 | 	cmp	local04, #1 wz
2ef80     02 AA 06 51 |  if_ne	add	local03, #2
2ef84     55 AD C2 5A |  if_ne	rdbyte	local04, local03
2ef88     02 AA 86 51 |  if_ne	sub	local03, #2
2ef8c     02 AC 0E 52 |  if_ne	cmp	local04, #2 wz
2ef90     0D 7A 06 56 |  if_ne	mov	result1, #13
2ef94     88 03 90 5D |  if_ne	jmp	#LR__5039
2ef98     02 AA 06 F1 | 	add	local03, #2
2ef9c     55 AD C2 FA | 	rdbyte	local04, local03
2efa0     56 B1 02 FD | 	qmul	local06, local04
2efa4     3F AA 06 F1 | 	add	local03, #63
2efa8     55 AD C2 FA | 	rdbyte	local04, local03
2efac     37 AA 86 F1 | 	sub	local03, #55
2efb0     55 AD 52 FC | 	wrword	local04, local03
2efb4     56 AD 32 F9 | 	getword	local04, local04, #0
2efb8     0A AA 86 F1 | 	sub	local03, #10
2efbc     0F AC 4E F7 | 	zerox	local04, #15 wz
2efc0     18 B0 62 FD | 	getqx	local06
2efc4     20 00 90 AD |  if_e	jmp	#LR__5032
2efc8     0A AA 06 F1 | 	add	local03, #10
2efcc     55 AD E2 FA | 	rdword	local04, local03
2efd0     56 A9 32 F9 | 	getword	local02, local04, #0
2efd4     0A AA 86 F1 | 	sub	local03, #10
2efd8     56 AD 32 F9 | 	getword	local04, local04, #0
2efdc     01 AC 86 F1 | 	sub	local04, #1
2efe0     56 A9 CA F7 | 	test	local02, local04 wz
2efe4     08 00 90 AD |  if_e	jmp	#LR__5033
2efe8                 | LR__5032
2efe8     0D 7A 06 F6 | 	mov	result1, #13
2efec     30 03 90 FD | 	jmp	#LR__5039
2eff0                 | LR__5033
2eff0     34 AA 06 F1 | 	add	local03, #52
2eff4     55 93 02 F6 | 	mov	arg01, local03
2eff8     11 92 06 F1 | 	add	arg01, #17
2effc                 | ' {
2effc                 | ' 
2effc                 | ' 	return *((WORD*)ptr);
2effc     49 7B E2 FA | 	rdword	result1, arg01
2f000     2C AA 86 F1 | 	sub	local03, #44
2f004     55 7B 52 FC | 	wrword	result1, local03
2f008     3D AD 32 F9 | 	getword	local04, result1, #0
2f00c     08 AA 86 F1 | 	sub	local03, #8
2f010     56 93 52 F6 | 	abs	arg01, local04 wc
2f014     49 93 42 F8 | 	getnib	arg01, arg01, #0
2f018     49 93 8A F6 | 	negc	arg01, arg01 wz
2f01c     0D 7A 06 56 |  if_ne	mov	result1, #13
2f020     FC 02 90 5D |  if_ne	jmp	#LR__5039
2f024     55 93 02 F6 | 	mov	arg01, local03
2f028     47 92 06 F1 | 	add	arg01, #71
2f02c                 | ' {
2f02c                 | ' 
2f02c                 | ' 	return *((WORD*)ptr);
2f02c     49 7B E2 FA | 	rdword	result1, arg01
2f030     3D B3 0A F6 | 	mov	local07, result1 wz
2f034     55 93 02 A6 |  if_e	mov	arg01, local03
2f038     54 92 06 A1 |  if_e	add	arg01, #84
2f03c                 | ' {
2f03c                 | ' 
2f03c                 | ' 	return *((DWORD*)ptr);
2f03c     49 B3 02 AB |  if_e	rdlong	local07, arg01
2f040     55 93 02 F6 | 	mov	arg01, local03
2f044     42 92 06 F1 | 	add	arg01, #66
2f048                 | ' {
2f048                 | ' 
2f048                 | ' 	return *((WORD*)ptr);
2f048     49 7B E2 FA | 	rdword	result1, arg01
2f04c     3D 93 02 F6 | 	mov	arg01, result1
2f050     49 AD 02 F6 | 	mov	local04, arg01
2f054     0F AC 4E F7 | 	zerox	local04, #15 wz
2f058     0D 7A 06 A6 |  if_e	mov	result1, #13
2f05c     C0 02 90 AD |  if_e	jmp	#LR__5039
2f060     49 B5 32 F9 | 	getword	local08, arg01, #0
2f064     58 B5 02 F1 | 	add	local08, local06
2f068     08 AA 06 F1 | 	add	local03, #8
2f06c     55 AD E2 FA | 	rdword	local04, local03
2f070     08 AA 86 F1 | 	sub	local03, #8
2f074     56 AD 52 F6 | 	abs	local04, local04 wc
2f078     04 AC 46 F0 | 	shr	local04, #4
2f07c     56 B5 82 F3 | 	sumc	local08, local04
2f080     5A B3 12 F2 | 	cmp	local07, local08 wc
2f084     0D 7A 06 C6 |  if_b	mov	result1, #13
2f088     94 02 90 CD |  if_b	jmp	#LR__5039
2f08c     5A B3 82 F1 | 	sub	local07, local08
2f090     0A AA 06 F1 | 	add	local03, #10
2f094     55 AD E2 FA | 	rdword	local04, local03
2f098     56 B3 12 FD | 	qdiv	local07, local04
2f09c     0A AA 86 F1 | 	sub	local03, #10
2f0a0     18 AC 62 FD | 	getqx	local04
2f0a4     00 AC 0E F2 | 	cmp	local04, #0 wz
2f0a8     0D 7A 06 A6 |  if_e	mov	result1, #13
2f0ac     70 02 90 AD |  if_e	jmp	#LR__5039
2f0b0     00 B6 06 F6 | 	mov	local09, #0
2f0b4     FF FF 07 FF 
2f0b8     F6 AD 16 F2 | 	cmp	local04, ##268435446 wc
2f0bc     03 B6 06 C6 |  if_b	mov	local09, #3
2f0c0     7F 00 00 FF 
2f0c4     F6 AD 16 F2 | 	cmp	local04, ##65526 wc
2f0c8     02 B6 06 C6 |  if_b	mov	local09, #2
2f0cc     07 00 00 FF 
2f0d0     F6 AD 16 F2 | 	cmp	local04, ##4086 wc
2f0d4     01 B6 06 C6 |  if_b	mov	local09, #1
2f0d8     00 B6 0E F2 | 	cmp	local09, #0 wz
2f0dc     0D 7A 06 A6 |  if_e	mov	result1, #13
2f0e0     3C 02 90 AD |  if_e	jmp	#LR__5039
2f0e4     02 AC 06 F1 | 	add	local04, #2
2f0e8     18 AA 06 F1 | 	add	local03, #24
2f0ec     55 AD 62 FC | 	wrlong	local04, local03
2f0f0     08 AA 06 F1 | 	add	local03, #8
2f0f4     55 AF 62 FC | 	wrlong	local05, local03
2f0f8     57 AD 02 F6 | 	mov	local04, local05
2f0fc     49 93 32 F9 | 	getword	arg01, arg01, #0
2f100     49 AD 02 F1 | 	add	local04, arg01
2f104     04 AA 06 F1 | 	add	local03, #4
2f108     55 AD 62 FC | 	wrlong	local04, local03
2f10c     57 AD 02 F6 | 	mov	local04, local05
2f110     5A AD 02 F1 | 	add	local04, local08
2f114     08 AA 06 F1 | 	add	local03, #8
2f118     55 AD 62 FC | 	wrlong	local04, local03
2f11c     2C AA 86 F1 | 	sub	local03, #44
2f120     03 B6 0E F2 | 	cmp	local09, #3 wz
2f124     54 00 90 5D |  if_ne	jmp	#LR__5034
2f128     55 93 02 F6 | 	mov	arg01, local03
2f12c     5E 92 06 F1 | 	add	arg01, #94
2f130                 | ' {
2f130                 | ' 
2f130                 | ' 	return *((WORD*)ptr);
2f130     49 7B EA FA | 	rdword	result1, arg01 wz
2f134     0D 7A 06 56 |  if_ne	mov	result1, #13
2f138     E4 01 90 5D |  if_ne	jmp	#LR__5039
2f13c     08 AA 06 F1 | 	add	local03, #8
2f140     55 AD EA FA | 	rdword	local04, local03 wz
2f144     08 AA 86 F1 | 	sub	local03, #8
2f148     0D 7A 06 56 |  if_ne	mov	result1, #13
2f14c     D0 01 90 5D |  if_ne	jmp	#LR__5039
2f150     34 AA 06 F1 | 	add	local03, #52
2f154     55 93 02 F6 | 	mov	arg01, local03
2f158     2C 92 06 F1 | 	add	arg01, #44
2f15c                 | ' {
2f15c                 | ' 
2f15c                 | ' 	return *((DWORD*)ptr);
2f15c     49 7B 02 FB | 	rdlong	result1, arg01
2f160     0C AA 86 F1 | 	sub	local03, #12
2f164     55 7B 62 FC | 	wrlong	result1, local03
2f168     10 AA 86 F1 | 	sub	local03, #16
2f16c     55 B9 02 FB | 	rdlong	local10, local03
2f170     18 AA 86 F1 | 	sub	local03, #24
2f174     02 B8 66 F0 | 	shl	local10, #2
2f178     6C 00 90 FD | 	jmp	#LR__5036
2f17c                 | LR__5034
2f17c     08 AA 06 F1 | 	add	local03, #8
2f180     55 AD EA FA | 	rdword	local04, local03 wz
2f184     08 AA 86 F1 | 	sub	local03, #8
2f188     0D 7A 06 A6 |  if_e	mov	result1, #13
2f18c     90 01 90 AD |  if_e	jmp	#LR__5039
2f190     24 AA 06 F1 | 	add	local03, #36
2f194     55 AD 02 FB | 	rdlong	local04, local03
2f198     58 AD 02 F1 | 	add	local04, local06
2f19c     04 AA 06 F1 | 	add	local03, #4
2f1a0     55 AD 62 FC | 	wrlong	local04, local03
2f1a4     28 AA 86 F1 | 	sub	local03, #40
2f1a8     02 B6 0E F2 | 	cmp	local09, #2 wz
2f1ac     18 AA 06 A1 |  if_e	add	local03, #24
2f1b0     55 AD 02 AB |  if_e	rdlong	local04, local03
2f1b4     18 AA 86 A1 |  if_e	sub	local03, #24
2f1b8     01 AC 66 A0 |  if_e	shl	local04, #1
2f1bc     24 00 90 AD |  if_e	jmp	#LR__5035
2f1c0     18 AA 06 F1 | 	add	local03, #24
2f1c4     55 B9 02 FB | 	rdlong	local10, local03
2f1c8     5C AD 02 F6 | 	mov	local04, local10
2f1cc     01 AC 66 F0 | 	shl	local04, #1
2f1d0     5C AD 02 F1 | 	add	local04, local10
2f1d4     01 AC 46 F0 | 	shr	local04, #1
2f1d8     18 AA 86 F1 | 	sub	local03, #24
2f1dc     01 B8 06 F5 | 	and	local10, #1
2f1e0     5C AD 02 F1 | 	add	local04, local10
2f1e4                 | LR__5035
2f1e4     56 B9 02 F6 | 	mov	local10, local04
2f1e8                 | LR__5036
2f1e8     FF B9 06 F1 | 	add	local10, #511
2f1ec     09 B8 46 F0 | 	shr	local10, #9
2f1f0     1C AA 06 F1 | 	add	local03, #28
2f1f4     55 97 02 FB | 	rdlong	arg03, local03
2f1f8     1C AA 86 F1 | 	sub	local03, #28
2f1fc     5C 97 12 F2 | 	cmp	arg03, local10 wc
2f200     0D 7A 06 C6 |  if_b	mov	result1, #13
2f204     18 01 90 CD |  if_b	jmp	#LR__5039
2f208     14 AA 06 F1 | 	add	local03, #20
2f20c     FF FF FF FF 
2f210     55 FF 6B FC | 	wrlong	##-1, local03
2f214     04 AA 86 F1 | 	sub	local03, #4
2f218     FF FF FF FF 
2f21c     55 FF 6B FC | 	wrlong	##-1, local03
2f220     0C AA 86 F1 | 	sub	local03, #12
2f224     55 01 49 FC | 	wrbyte	#128, local03
2f228     04 AA 86 F1 | 	sub	local03, #4
2f22c     03 B6 0E F2 | 	cmp	local09, #3 wz
2f230     55 93 02 A6 |  if_e	mov	arg01, local03
2f234     64 92 06 A1 |  if_e	add	arg01, #100
2f238                 | ' {
2f238                 | ' 
2f238                 | ' 	return *((WORD*)ptr);
2f238     49 7B E2 AA |  if_e	rdword	result1, arg01
2f23c     3D AD 32 A9 |  if_e	getword	local04, result1, #0
2f240     01 AC 0E A2 |  if_e	cmp	local04, #1 wz
2f244     A4 00 90 5D |  if_ne	jmp	#LR__5038
2f248     01 AE 06 F1 | 	add	local05, #1
2f24c     55 93 02 F6 | 	mov	arg01, local03
2f250     57 95 02 F6 | 	mov	arg02, local05
2f254     E8 D4 BF FD | 	call	#_fatfs_cc_move_window
2f258     00 7A 0E F2 | 	cmp	result1, #0 wz
2f25c     8C 00 90 5D |  if_ne	jmp	#LR__5038
2f260     04 AA 06 F1 | 	add	local03, #4
2f264     55 01 48 FC | 	wrbyte	#0, local03
2f268     30 AA 06 F1 | 	add	local03, #48
2f26c     55 93 02 F6 | 	mov	arg01, local03
2f270     34 AA 86 F1 | 	sub	local03, #52
2f274     FE 93 06 F1 | 	add	arg01, #510
2f278                 | ' {
2f278                 | ' 
2f278                 | ' 	return *((WORD*)ptr);
2f278     49 7B E2 FA | 	rdword	result1, arg01
2f27c     3D AD 32 F9 | 	getword	local04, result1, #0
2f280     55 00 00 FF 
2f284     55 AC 0E F2 | 	cmp	local04, ##43605 wz
2f288     55 93 02 A6 |  if_e	mov	arg01, local03
2f28c     34 92 06 A1 |  if_e	add	arg01, #52
2f290                 | ' {
2f290                 | ' 
2f290                 | ' 	return *((DWORD*)ptr);
2f290     49 7B 02 AB |  if_e	rdlong	result1, arg01
2f294     A9 B0 20 AF 
2f298     52 7A 0E A2 |  if_e	cmp	result1, ##1096897106 wz
2f29c     55 93 02 A6 |  if_e	mov	arg01, local03
2f2a0     01 00 00 AF 
2f2a4     18 92 06 A1 |  if_e	add	arg01, ##536
2f2a8                 | ' {
2f2a8                 | ' 
2f2a8                 | ' 	return *((DWORD*)ptr);
2f2a8     49 7B 02 AB |  if_e	rdlong	result1, arg01
2f2ac     B9 A0 30 AF 
2f2b0     72 7A 0E A2 |  if_e	cmp	result1, ##1631679090 wz
2f2b4     34 00 90 5D |  if_ne	jmp	#LR__5037
2f2b8     34 AA 06 F1 | 	add	local03, #52
2f2bc     55 93 02 F6 | 	mov	arg01, local03
2f2c0     E8 93 06 F1 | 	add	arg01, #488
2f2c4                 | ' {
2f2c4                 | ' 
2f2c4                 | ' 	return *((DWORD*)ptr);
2f2c4     49 7B 02 FB | 	rdlong	result1, arg01
2f2c8     20 AA 86 F1 | 	sub	local03, #32
2f2cc     55 7B 62 FC | 	wrlong	result1, local03
2f2d0     20 AA 06 F1 | 	add	local03, #32
2f2d4     55 93 02 F6 | 	mov	arg01, local03
2f2d8     EC 93 06 F1 | 	add	arg01, #492
2f2dc                 | ' {
2f2dc                 | ' 
2f2dc                 | ' 	return *((DWORD*)ptr);
2f2dc     49 7B 02 FB | 	rdlong	result1, arg01
2f2e0     24 AA 86 F1 | 	sub	local03, #36
2f2e4     55 7B 62 FC | 	wrlong	result1, local03
2f2e8     10 AA 86 F1 | 	sub	local03, #16
2f2ec                 | LR__5037
2f2ec                 | LR__5038
2f2ec     55 B7 42 FC | 	wrbyte	local09, local03
2f2f0     04 64 06 F1 | 	add	objptr, #4
2f2f4     32 AD E2 FA | 	rdword	local04, objptr
2f2f8     01 AC 06 F1 | 	add	local04, #1
2f2fc     32 AD 52 FC | 	wrword	local04, objptr
2f300     56 B9 32 F9 | 	getword	local10, local04, #0
2f304     06 AA 06 F1 | 	add	local03, #6
2f308     55 B9 52 FC | 	wrword	local10, local03
2f30c     04 64 06 F1 | 	add	objptr, #4
2f310     06 AA 06 F1 | 	add	local03, #6
2f314     55 65 62 FC | 	wrlong	objptr, local03
2f318                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2f318                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2f318                 | ' 			{
2f318                 | ' 
2f318                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2f318                 | ' 
2f318                 | ' 
2f318                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2f318                 | ' 
2f318                 | ' 			}
2f318                 | ' 		}
2f318                 | ' 
2f318                 | ' 
2f318                 | ' 	}
2f318                 | ' 
2f318                 | ' 	fs->fs_type = (BYTE)fmt;
2f318                 | ' 	fs->id = ++Fsid;
2f318                 | ' 
2f318                 | ' 	fs->lfnbuf = LfnBuf;
2f318                 | ' #line 3567 "ff.c"
2f318                 | ' 	return FR_OK;
2f318     00 7A 06 F6 | 	mov	result1, #0
2f31c     08 64 86 F1 | 	sub	objptr, #8
2f320                 | LR__5039
2f320     E7 F0 03 F6 | 	mov	ptra, fp
2f324     F2 00 A0 FD | 	call	#popregs_
2f328                 | _fatfs_cc_mount_volume_ret
2f328     2D 00 64 FD | 	ret
2f32c                 | 
2f32c                 | _fatfs_cc_validate
2f32c     49 81 0A F6 | 	mov	_var01, arg01 wz
2f330     09 82 06 F6 | 	mov	_var02, #9
2f334     40 85 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2f338     42 87 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2f33c     48 00 90 AD |  if_e	jmp	#LR__5040
2f340     04 80 06 F1 | 	add	_var01, #4
2f344     40 87 E2 FA | 	rdword	_var04, _var01
2f348     04 80 86 F1 | 	sub	_var01, #4
2f34c     40 93 02 FB | 	rdlong	arg01, _var01
2f350     06 92 06 F1 | 	add	arg01, #6
2f354     49 7B E2 FA | 	rdword	result1, arg01
2f358     3D 87 0A F2 | 	cmp	_var04, result1 wz
2f35c     28 00 90 5D |  if_ne	jmp	#LR__5040
2f360     01 00 00 FF 
2f364     10 64 06 F1 | 	add	objptr, ##528
2f368     32 87 0A FB | 	rdlong	_var04, objptr wz
2f36c     01 00 00 FF 
2f370     10 64 86 F1 | 	sub	objptr, ##528
2f374                 | '         return RES_NOTRDY;
2f374     03 7A 06 A6 |  if_e	mov	result1, #3
2f378                 | '     }
2f378                 | '     return RES_OK;
2f378     00 7A 06 56 |  if_ne	mov	result1, #0
2f37c     3D 85 E2 F8 | 	getbyte	_var03, result1, #0
2f380     01 84 CE F7 | 	test	_var03, #1 wz
2f384     00 82 06 A6 |  if_e	mov	_var02, #0
2f388                 | LR__5040
2f388     00 82 0E F2 | 	cmp	_var02, #0 wz
2f38c     40 85 02 AB |  if_e	rdlong	_var03, _var01
2f390     00 84 06 56 |  if_ne	mov	_var03, #0
2f394     4A 85 62 FC | 	wrlong	_var03, arg02
2f398                 | ' 			res = FR_OK;
2f398                 | ' 		}
2f398                 | ' 
2f398                 | ' 	}
2f398                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2f398                 | ' 	return res;
2f398     41 7B 02 F6 | 	mov	result1, _var02
2f39c                 | _fatfs_cc_validate_ret
2f39c     2D 00 64 FD | 	ret
2f3a0                 | 
2f3a0                 | _fatfs_cc_f_mount
2f3a0     04 CA 05 F6 | 	mov	COUNT_, #4
2f3a4     E8 00 A0 FD | 	call	#pushregs_
2f3a8     20 F0 07 F1 | 	add	ptra, #32
2f3ac     04 CE 05 F1 | 	add	fp, #4
2f3b0     E7 92 62 FC | 	wrlong	arg01, fp
2f3b4     04 CE 05 F1 | 	add	fp, #4
2f3b8     E7 94 62 FC | 	wrlong	arg02, fp
2f3bc     4B A7 02 F6 | 	mov	local01, arg03
2f3c0     14 CE 05 F1 | 	add	fp, #20
2f3c4     E7 94 62 FC | 	wrlong	arg02, fp
2f3c8     E7 92 02 F6 | 	mov	arg01, fp
2f3cc     1C CE 85 F1 | 	sub	fp, #28
2f3d0     EC F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2f3d4     3D A9 02 F6 | 	mov	local02, result1
2f3d8     00 A8 56 F2 | 	cmps	local02, #0 wc
2f3dc     0B 7A 06 C6 |  if_b	mov	result1, #11
2f3e0     84 00 90 CD |  if_b	jmp	#LR__5051
2f3e4     54 97 02 F6 | 	mov	arg03, local02
2f3e8     02 96 66 F0 | 	shl	arg03, #2
2f3ec     32 97 02 F1 | 	add	arg03, objptr
2f3f0     4B AB 0A FB | 	rdlong	local03, arg03 wz
2f3f4     14 00 90 AD |  if_e	jmp	#LR__5050
2f3f8     01 AA 06 F1 | 	add	local03, #1
2f3fc     55 93 C2 FA | 	rdbyte	arg01, local03
2f400     01 AA 86 F1 | 	sub	local03, #1
2f404     F8 2B B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2f408     55 01 48 FC | 	wrbyte	#0, local03
2f40c                 | LR__5050
2f40c     04 CE 05 F1 | 	add	fp, #4
2f410     E7 AC 0A FB | 	rdlong	local04, fp wz
2f414     04 CE 85 F1 | 	sub	fp, #4
2f418     04 CE 05 51 |  if_ne	add	fp, #4
2f41c     E7 AC 02 5B |  if_ne	rdlong	local04, fp
2f420     04 CE 85 51 |  if_ne	sub	fp, #4
2f424     56 01 48 5C |  if_ne	wrbyte	#0, local04
2f428     02 A8 66 F0 | 	shl	local02, #2
2f42c     32 A9 02 F1 | 	add	local02, objptr
2f430     04 CE 05 F1 | 	add	fp, #4
2f434     E7 AC 02 FB | 	rdlong	local04, fp
2f438     04 CE 85 F1 | 	sub	fp, #4
2f43c     54 AD 62 FC | 	wrlong	local04, local02
2f440     07 A6 4E F7 | 	zerox	local01, #7 wz
2f444     00 7A 06 A6 |  if_e	mov	result1, #0
2f448     1C 00 90 AD |  if_e	jmp	#LR__5051
2f44c     08 CE 05 F1 | 	add	fp, #8
2f450     E7 92 02 F6 | 	mov	arg01, fp
2f454     04 CE 85 F1 | 	sub	fp, #4
2f458     E7 94 02 F6 | 	mov	arg02, fp
2f45c     04 CE 85 F1 | 	sub	fp, #4
2f460     00 96 06 F6 | 	mov	arg03, #0
2f464     94 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2f468                 | ' 
2f468                 | ' 	res = mount_volume(&path, &fs, 0);
2f468                 | ' 	return res ;
2f468                 | LR__5051
2f468     E7 F0 03 F6 | 	mov	ptra, fp
2f46c     F2 00 A0 FD | 	call	#popregs_
2f470                 | _fatfs_cc_f_mount_ret
2f470     2D 00 64 FD | 	ret
2f474                 | 
2f474                 | _fatfs_cc_f_open
2f474     08 CA 05 F6 | 	mov	COUNT_, #8
2f478     E8 00 A0 FD | 	call	#pushregs_
2f47c     60 F0 07 F1 | 	add	ptra, #96
2f480     49 A7 0A F6 | 	mov	local01, arg01 wz
2f484     08 CE 05 F1 | 	add	fp, #8
2f488     E7 94 62 FC | 	wrlong	arg02, fp
2f48c     08 CE 85 F1 | 	sub	fp, #8
2f490     4B A9 02 F6 | 	mov	local02, arg03
2f494     09 7A 06 A6 |  if_e	mov	result1, #9
2f498     24 04 90 AD |  if_e	jmp	#LR__5077
2f49c     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2f4a0     3F A8 06 F5 | 	and	local02, #63
2f4a4     08 CE 05 F1 | 	add	fp, #8
2f4a8     E7 92 02 F6 | 	mov	arg01, fp
2f4ac     3C CE 05 F1 | 	add	fp, #60
2f4b0     E7 94 02 F6 | 	mov	arg02, fp
2f4b4     44 CE 85 F1 | 	sub	fp, #68
2f4b8     54 97 02 F6 | 	mov	arg03, local02
2f4bc     3C F9 BF FD | 	call	#_fatfs_cc_mount_volume
2f4c0     3D AB 0A F6 | 	mov	local03, result1 wz
2f4c4     EC 03 90 5D |  if_ne	jmp	#LR__5076
2f4c8     44 CE 05 F1 | 	add	fp, #68
2f4cc     E7 AA 02 FB | 	rdlong	local03, fp
2f4d0     30 CE 85 F1 | 	sub	fp, #48
2f4d4     E7 AA 62 FC | 	wrlong	local03, fp
2f4d8     E7 92 02 F6 | 	mov	arg01, fp
2f4dc     0C CE 85 F1 | 	sub	fp, #12
2f4e0     E7 AC 02 FB | 	rdlong	local04, fp
2f4e4     08 CE 85 F1 | 	sub	fp, #8
2f4e8     56 95 02 F6 | 	mov	arg02, local04
2f4ec     70 F4 BF FD | 	call	#_fatfs_cc_follow_path
2f4f0     3D AB 0A F6 | 	mov	local03, result1 wz
2f4f4     18 00 90 5D |  if_ne	jmp	#LR__5060
2f4f8     3F CE 05 F1 | 	add	fp, #63
2f4fc     E7 AC C2 FA | 	rdbyte	local04, fp
2f500     3F CE 85 F1 | 	sub	fp, #63
2f504     56 99 E2 F8 | 	getbyte	arg04, local04, #0
2f508     80 98 CE F7 | 	test	arg04, #128 wz
2f50c     06 AA 06 56 |  if_ne	mov	local03, #6
2f510                 | LR__5060
2f510     54 99 E2 F8 | 	getbyte	arg04, local02, #0
2f514     1C 98 CE F7 | 	test	arg04, #28 wz
2f518     5C 01 90 AD |  if_e	jmp	#LR__5065
2f51c     00 AA 0E F2 | 	cmp	local03, #0 wz
2f520     24 00 90 AD |  if_e	jmp	#LR__5062
2f524     04 AA 0E F2 | 	cmp	local03, #4 wz
2f528     10 00 90 5D |  if_ne	jmp	#LR__5061
2f52c     E7 92 02 F6 | 	mov	arg01, fp
2f530     14 92 06 F1 | 	add	arg01, #20
2f534     4C E8 BF FD | 	call	#_fatfs_cc_dir_register
2f538     3D AB 02 F6 | 	mov	local03, result1
2f53c                 | LR__5061
2f53c     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2f540     08 A8 46 F5 | 	or	local02, #8
2f544     24 00 90 FD | 	jmp	#LR__5064
2f548                 | LR__5062
2f548     1A CE 05 F1 | 	add	fp, #26
2f54c     E7 AC C2 FA | 	rdbyte	local04, fp
2f550     1A CE 85 F1 | 	sub	fp, #26
2f554     11 AC CE F7 | 	test	local04, #17 wz
2f558     07 AA 06 56 |  if_ne	mov	local03, #7
2f55c     0C 00 90 5D |  if_ne	jmp	#LR__5063
2f560     54 AD E2 F8 | 	getbyte	local04, local02, #0
2f564     04 AC CE F7 | 	test	local04, #4 wz
2f568     08 AA 06 56 |  if_ne	mov	local03, #8
2f56c                 | LR__5063
2f56c                 | LR__5064
2f56c     00 AA 0E F2 | 	cmp	local03, #0 wz
2f570     40 01 90 5D |  if_ne	jmp	#LR__5068
2f574     54 AD E2 F8 | 	getbyte	local04, local02, #0
2f578     08 AC CE F7 | 	test	local04, #8 wz
2f57c     34 01 90 AD |  if_e	jmp	#LR__5068
2f580     C0 1B B0 FD | 	call	#_fatfs_cc__get_fattime
2f584     30 CE 05 F1 | 	add	fp, #48
2f588     E7 92 02 FB | 	rdlong	arg01, fp
2f58c     0E 92 06 F1 | 	add	arg01, #14
2f590     49 7B 62 FC | 	wrlong	result1, arg01
2f594     E7 92 02 FB | 	rdlong	arg01, fp
2f598     16 92 06 F1 | 	add	arg01, #22
2f59c     49 7B 62 FC | 	wrlong	result1, arg01
2f5a0     14 CE 05 F1 | 	add	fp, #20
2f5a4     E7 92 02 FB | 	rdlong	arg01, fp
2f5a8     14 CE 85 F1 | 	sub	fp, #20
2f5ac     E7 94 02 FB | 	rdlong	arg02, fp
2f5b0     30 CE 85 F1 | 	sub	fp, #48
2f5b4     C0 DE BF FD | 	call	#_fatfs_cc_ld_clust
2f5b8     3D AD 02 F6 | 	mov	local04, result1
2f5bc     30 CE 05 F1 | 	add	fp, #48
2f5c0     E7 98 02 FB | 	rdlong	arg04, fp
2f5c4     0B 98 06 F1 | 	add	arg04, #11
2f5c8     4C 41 48 FC | 	wrbyte	#32, arg04
2f5cc     14 CE 05 F1 | 	add	fp, #20
2f5d0     E7 92 02 FB | 	rdlong	arg01, fp
2f5d4     14 CE 85 F1 | 	sub	fp, #20
2f5d8     E7 94 02 FB | 	rdlong	arg02, fp
2f5dc     30 CE 85 F1 | 	sub	fp, #48
2f5e0     00 96 06 F6 | 	mov	arg03, #0
2f5e4     C4 DE BF FD | 	call	#_fatfs_cc_st_clust
2f5e8     30 CE 05 F1 | 	add	fp, #48
2f5ec     E7 92 02 FB | 	rdlong	arg01, fp
2f5f0     1C 92 06 F1 | 	add	arg01, #28
2f5f4     49 01 68 FC | 	wrlong	#0, arg01
2f5f8     14 CE 05 F1 | 	add	fp, #20
2f5fc     E7 98 02 FB | 	rdlong	arg04, fp
2f600     44 CE 85 F1 | 	sub	fp, #68
2f604     03 98 06 F1 | 	add	arg04, #3
2f608     4C 03 48 FC | 	wrbyte	#1, arg04
2f60c     00 AC 0E F2 | 	cmp	local04, #0 wz
2f610     A0 00 90 AD |  if_e	jmp	#LR__5068
2f614     44 CE 05 F1 | 	add	fp, #68
2f618     E7 AA 02 FB | 	rdlong	local03, fp
2f61c     30 AA 06 F1 | 	add	local03, #48
2f620     55 AF 02 FB | 	rdlong	local05, local03
2f624     30 CE 85 F1 | 	sub	fp, #48
2f628     E7 92 02 F6 | 	mov	arg01, fp
2f62c     14 CE 85 F1 | 	sub	fp, #20
2f630     56 95 02 F6 | 	mov	arg02, local04
2f634     00 96 06 F6 | 	mov	arg03, #0
2f638     70 D6 BF FD | 	call	#_fatfs_cc_remove_chain
2f63c     3D AB 0A F6 | 	mov	local03, result1 wz
2f640     70 00 90 5D |  if_ne	jmp	#LR__5068
2f644     44 CE 05 F1 | 	add	fp, #68
2f648     E7 92 02 FB | 	rdlong	arg01, fp
2f64c     44 CE 85 F1 | 	sub	fp, #68
2f650     57 95 02 F6 | 	mov	arg02, local05
2f654     E8 D0 BF FD | 	call	#_fatfs_cc_move_window
2f658     3D AB 02 F6 | 	mov	local03, result1
2f65c     44 CE 05 F1 | 	add	fp, #68
2f660     E7 AE 02 FB | 	rdlong	local05, fp
2f664     44 CE 85 F1 | 	sub	fp, #68
2f668     01 AC 86 F1 | 	sub	local04, #1
2f66c     10 AE 06 F1 | 	add	local05, #16
2f670     57 AD 62 FC | 	wrlong	local04, local05
2f674     3C 00 90 FD | 	jmp	#LR__5068
2f678                 | LR__5065
2f678     00 AA 0E F2 | 	cmp	local03, #0 wz
2f67c     34 00 90 5D |  if_ne	jmp	#LR__5067
2f680     1A CE 05 F1 | 	add	fp, #26
2f684     E7 AE C2 FA | 	rdbyte	local05, fp
2f688     1A CE 85 F1 | 	sub	fp, #26
2f68c     10 AE CE F7 | 	test	local05, #16 wz
2f690     04 AA 06 56 |  if_ne	mov	local03, #4
2f694     1C 00 90 5D |  if_ne	jmp	#LR__5066
2f698     54 AF E2 F8 | 	getbyte	local05, local02, #0
2f69c     02 AE CE F7 | 	test	local05, #2 wz
2f6a0     1A CE 05 51 |  if_ne	add	fp, #26
2f6a4     E7 AC C2 5A |  if_ne	rdbyte	local04, fp
2f6a8     1A CE 85 51 |  if_ne	sub	fp, #26
2f6ac     01 AC CE 57 |  if_ne	test	local04, #1 wz
2f6b0     07 AA 06 56 |  if_ne	mov	local03, #7
2f6b4                 | LR__5066
2f6b4                 | LR__5067
2f6b4                 | LR__5068
2f6b4     00 AA 0E F2 | 	cmp	local03, #0 wz
2f6b8     40 00 90 5D |  if_ne	jmp	#LR__5069
2f6bc     54 AF E2 F8 | 	getbyte	local05, local02, #0
2f6c0     08 AE CE F7 | 	test	local05, #8 wz
2f6c4     54 A9 E2 58 |  if_ne	getbyte	local02, local02, #0
2f6c8     40 A8 46 55 |  if_ne	or	local02, #64
2f6cc     44 CE 05 F1 | 	add	fp, #68
2f6d0     E7 AE 02 FB | 	rdlong	local05, fp
2f6d4     30 AE 06 F1 | 	add	local05, #48
2f6d8     57 AF 02 FB | 	rdlong	local05, local05
2f6dc     20 A6 06 F1 | 	add	local01, #32
2f6e0     53 AF 62 FC | 	wrlong	local05, local01
2f6e4     14 CE 85 F1 | 	sub	fp, #20
2f6e8     E7 AE 02 FB | 	rdlong	local05, fp
2f6ec     30 CE 85 F1 | 	sub	fp, #48
2f6f0     04 A6 06 F1 | 	add	local01, #4
2f6f4     53 AF 62 FC | 	wrlong	local05, local01
2f6f8     24 A6 86 F1 | 	sub	local01, #36
2f6fc                 | LR__5069
2f6fc     00 AA 0E F2 | 	cmp	local03, #0 wz
2f700     B0 01 90 5D |  if_ne	jmp	#LR__5075
2f704     44 CE 05 F1 | 	add	fp, #68
2f708     E7 92 02 FB | 	rdlong	arg01, fp
2f70c     14 CE 85 F1 | 	sub	fp, #20
2f710     E7 94 02 FB | 	rdlong	arg02, fp
2f714     30 CE 85 F1 | 	sub	fp, #48
2f718     5C DD BF FD | 	call	#_fatfs_cc_ld_clust
2f71c     08 A6 06 F1 | 	add	local01, #8
2f720     53 7B 62 FC | 	wrlong	result1, local01
2f724     30 CE 05 F1 | 	add	fp, #48
2f728     E7 92 02 FB | 	rdlong	arg01, fp
2f72c     1C 92 06 F1 | 	add	arg01, #28
2f730                 | ' {
2f730                 | ' 
2f730                 | ' 	return *((DWORD*)ptr);
2f730     49 7B 02 FB | 	rdlong	result1, arg01
2f734     04 A6 06 F1 | 	add	local01, #4
2f738     53 7B 62 FC | 	wrlong	result1, local01
2f73c     0C A6 86 F1 | 	sub	local01, #12
2f740     14 CE 05 F1 | 	add	fp, #20
2f744     E7 AE 02 FB | 	rdlong	local05, fp
2f748     53 AF 62 FC | 	wrlong	local05, local01
2f74c     E7 AE 02 FB | 	rdlong	local05, fp
2f750     44 CE 85 F1 | 	sub	fp, #68
2f754     06 AE 06 F1 | 	add	local05, #6
2f758     57 AD E2 FA | 	rdword	local04, local05
2f75c     04 A6 06 F1 | 	add	local01, #4
2f760     53 AD 52 FC | 	wrword	local04, local01
2f764     0C A6 06 F1 | 	add	local01, #12
2f768     53 A9 42 FC | 	wrbyte	local02, local01
2f76c     01 A6 06 F1 | 	add	local01, #1
2f770     53 01 48 FC | 	wrbyte	#0, local01
2f774     0B A6 06 F1 | 	add	local01, #11
2f778     53 01 68 FC | 	wrlong	#0, local01
2f77c     08 A6 86 F1 | 	sub	local01, #8
2f780     53 01 68 FC | 	wrlong	#0, local01
2f784     14 A6 06 F1 | 	add	local01, #20
2f788     53 93 02 F6 | 	mov	arg01, local01
2f78c     28 A6 86 F1 | 	sub	local01, #40
2f790     00 94 06 F6 | 	mov	arg02, #0
2f794     09 96 C6 F9 | 	decod	arg03, #9
2f798     D8 00 A0 FD | 	call	#\builtin_bytefill_
2f79c     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2f7a0     20 A8 CE F7 | 	test	local02, #32 wz
2f7a4     0C 01 90 AD |  if_e	jmp	#LR__5074
2f7a8     0C A6 06 F1 | 	add	local01, #12
2f7ac     53 AD 02 FB | 	rdlong	local04, local01
2f7b0     0C A6 86 F1 | 	sub	local01, #12
2f7b4     01 AC 16 F2 | 	cmp	local04, #1 wc
2f7b8     F8 00 90 CD |  if_b	jmp	#LR__5074
2f7bc     0C A6 06 F1 | 	add	local01, #12
2f7c0     53 AD 02 FB | 	rdlong	local04, local01
2f7c4     08 A6 06 F1 | 	add	local01, #8
2f7c8     53 AD 62 FC | 	wrlong	local04, local01
2f7cc     44 CE 05 F1 | 	add	fp, #68
2f7d0     E7 AC 02 FB | 	rdlong	local04, fp
2f7d4     44 CE 85 F1 | 	sub	fp, #68
2f7d8     0A AC 06 F1 | 	add	local04, #10
2f7dc     56 B1 E2 FA | 	rdword	local06, local04
2f7e0     09 B0 66 F0 | 	shl	local06, #9
2f7e4     0C A6 86 F1 | 	sub	local01, #12
2f7e8     53 B3 02 FB | 	rdlong	local07, local01
2f7ec                 | ' 				fp->fptr = fp->obj.objsize;
2f7ec                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2f7ec                 | ' 				clst = fp->obj.sclust;
2f7ec                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2f7ec     04 A6 06 F1 | 	add	local01, #4
2f7f0     53 B5 02 FB | 	rdlong	local08, local01
2f7f4     0C A6 86 F1 | 	sub	local01, #12
2f7f8                 | LR__5070
2f7f8     00 AA 0E F2 | 	cmp	local03, #0 wz
2f7fc     34 00 90 5D |  if_ne	jmp	#LR__5071
2f800     58 B5 1A F2 | 	cmp	local08, local06 wcz
2f804     2C 00 90 ED |  if_be	jmp	#LR__5071
2f808     53 93 02 F6 | 	mov	arg01, local01
2f80c     59 95 02 F6 | 	mov	arg02, local07
2f810     E4 D0 BF FD | 	call	#_fatfs_cc_get_fat
2f814     3D B3 02 F6 | 	mov	local07, result1
2f818     02 B2 16 F2 | 	cmp	local07, #2 wc
2f81c     02 AA 06 C6 |  if_b	mov	local03, #2
2f820     FF FF 7F FF 
2f824     FF B3 0E F2 | 	cmp	local07, ##-1 wz
2f828     01 AA 06 A6 |  if_e	mov	local03, #1
2f82c     58 B5 82 F1 | 	sub	local08, local06
2f830     C4 FF 9F FD | 	jmp	#LR__5070
2f834                 | LR__5071
2f834     18 A6 06 F1 | 	add	local01, #24
2f838     53 B3 62 FC | 	wrlong	local07, local01
2f83c     18 A6 86 F1 | 	sub	local01, #24
2f840     00 AA 0E F2 | 	cmp	local03, #0 wz
2f844     6C 00 90 5D |  if_ne	jmp	#LR__5073
2f848     FF B5 CE F7 | 	test	local08, #511 wz
2f84c     64 00 90 AD |  if_e	jmp	#LR__5073
2f850     44 CE 05 F1 | 	add	fp, #68
2f854     E7 92 02 FB | 	rdlong	arg01, fp
2f858     44 CE 85 F1 | 	sub	fp, #68
2f85c     59 95 02 F6 | 	mov	arg02, local07
2f860     54 D0 BF FD | 	call	#_fatfs_cc_clst2sect
2f864     3D AF 0A F6 | 	mov	local05, result1 wz
2f868     02 AA 06 A6 |  if_e	mov	local03, #2
2f86c     44 00 90 AD |  if_e	jmp	#LR__5072
2f870     09 B4 46 F0 | 	shr	local08, #9
2f874     5A AF 02 F1 | 	add	local05, local08
2f878     1C A6 06 F1 | 	add	local01, #28
2f87c     53 AF 62 FC | 	wrlong	local05, local01
2f880     44 CE 05 F1 | 	add	fp, #68
2f884     E7 AC 02 FB | 	rdlong	local04, fp
2f888     44 CE 85 F1 | 	sub	fp, #68
2f88c     01 AC 06 F1 | 	add	local04, #1
2f890     56 93 C2 FA | 	rdbyte	arg01, local04
2f894     53 95 02 F6 | 	mov	arg02, local01
2f898     0C 94 06 F1 | 	add	arg02, #12
2f89c     57 97 02 F6 | 	mov	arg03, local05
2f8a0     1C A6 86 F1 | 	sub	local01, #28
2f8a4     01 98 06 F6 | 	mov	arg04, #1
2f8a8     0C C8 BF FD | 	call	#_fatfs_cc_disk_read
2f8ac     00 7A 0E F2 | 	cmp	result1, #0 wz
2f8b0     01 AA 06 56 |  if_ne	mov	local03, #1
2f8b4                 | LR__5072
2f8b4                 | LR__5073
2f8b4                 | LR__5074
2f8b4                 | LR__5075
2f8b4                 | LR__5076
2f8b4     00 AA 0E F2 | 	cmp	local03, #0 wz
2f8b8     53 01 68 5C |  if_ne	wrlong	#0, local01
2f8bc                 | ' 
2f8bc                 | ' 	return res ;
2f8bc     55 7B 02 F6 | 	mov	result1, local03
2f8c0                 | LR__5077
2f8c0     E7 F0 03 F6 | 	mov	ptra, fp
2f8c4     F2 00 A0 FD | 	call	#popregs_
2f8c8                 | _fatfs_cc_f_open_ret
2f8c8     2D 00 64 FD | 	ret
2f8cc                 | 
2f8cc                 | _fatfs_cc_f_read
2f8cc     0E CA 05 F6 | 	mov	COUNT_, #14
2f8d0     E8 00 A0 FD | 	call	#pushregs_
2f8d4     38 F0 07 F1 | 	add	ptra, #56
2f8d8     49 A7 02 F6 | 	mov	local01, arg01
2f8dc     4A A9 02 F6 | 	mov	local02, arg02
2f8e0     4B AB 02 F6 | 	mov	local03, arg03
2f8e4     4C AD 02 F6 | 	mov	local04, arg04
2f8e8     54 AF 02 F6 | 	mov	local05, local02
2f8ec     56 01 68 FC | 	wrlong	#0, local04
2f8f0     E7 94 02 F6 | 	mov	arg02, fp
2f8f4     18 94 06 F1 | 	add	arg02, #24
2f8f8     53 93 02 F6 | 	mov	arg01, local01
2f8fc     2C FA BF FD | 	call	#_fatfs_cc_validate
2f900     3D B1 0A F6 | 	mov	local06, result1 wz
2f904     11 A6 06 A1 |  if_e	add	local01, #17
2f908     53 B1 C2 AA |  if_e	rdbyte	local06, local01
2f90c     11 A6 86 A1 |  if_e	sub	local01, #17
2f910     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
2f914     58 7B 02 56 |  if_ne	mov	result1, local06
2f918     3C 03 90 5D |  if_ne	jmp	#LR__5091
2f91c     10 A6 06 F1 | 	add	local01, #16
2f920     53 B3 C2 FA | 	rdbyte	local07, local01
2f924     10 A6 86 F1 | 	sub	local01, #16
2f928     01 B2 CE F7 | 	test	local07, #1 wz
2f92c     07 7A 06 A6 |  if_e	mov	result1, #7
2f930     24 03 90 AD |  if_e	jmp	#LR__5091
2f934     0C A6 06 F1 | 	add	local01, #12
2f938     53 B5 02 FB | 	rdlong	local08, local01
2f93c     08 A6 06 F1 | 	add	local01, #8
2f940     53 B7 02 FB | 	rdlong	local09, local01
2f944     14 A6 86 F1 | 	sub	local01, #20
2f948     5B B5 82 F1 | 	sub	local08, local09
2f94c     5A AB 3A F3 | 	fle	local03, local08 wcz
2f950                 | ' 
2f950                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2f950                 | LR__5080
2f950     01 AA 16 F2 | 	cmp	local03, #1 wc
2f954     FC 02 90 CD |  if_b	jmp	#LR__5090
2f958     14 A6 06 F1 | 	add	local01, #20
2f95c     53 B3 02 FB | 	rdlong	local07, local01
2f960     14 A6 86 F1 | 	sub	local01, #20
2f964     FF B3 CE F7 | 	test	local07, #511 wz
2f968     80 02 90 5D |  if_ne	jmp	#LR__5088
2f96c     14 A6 06 F1 | 	add	local01, #20
2f970     53 B9 02 FB | 	rdlong	local10, local01
2f974     14 A6 86 F1 | 	sub	local01, #20
2f978     09 B8 46 F0 | 	shr	local10, #9
2f97c     18 CE 05 F1 | 	add	fp, #24
2f980     E7 B2 02 FB | 	rdlong	local07, fp
2f984     18 CE 85 F1 | 	sub	fp, #24
2f988     0A B2 06 F1 | 	add	local07, #10
2f98c     59 B3 E2 FA | 	rdword	local07, local07
2f990     01 B2 86 F1 | 	sub	local07, #1
2f994     59 B9 0A F5 | 	and	local10, local07 wz
2f998     6C 00 90 5D |  if_ne	jmp	#LR__5082
2f99c     14 A6 06 F1 | 	add	local01, #20
2f9a0     53 B3 0A FB | 	rdlong	local07, local01 wz
2f9a4     14 A6 86 F1 | 	sub	local01, #20
2f9a8     08 A6 06 A1 |  if_e	add	local01, #8
2f9ac     53 BB 02 AB |  if_e	rdlong	local11, local01
2f9b0     08 A6 86 A1 |  if_e	sub	local01, #8
2f9b4     18 00 90 AD |  if_e	jmp	#LR__5081
2f9b8     53 93 02 F6 | 	mov	arg01, local01
2f9bc     18 A6 06 F1 | 	add	local01, #24
2f9c0     53 95 02 FB | 	rdlong	arg02, local01
2f9c4     18 A6 86 F1 | 	sub	local01, #24
2f9c8     2C CF BF FD | 	call	#_fatfs_cc_get_fat
2f9cc     3D BB 02 F6 | 	mov	local11, result1
2f9d0                 | LR__5081
2f9d0     02 BA 16 F2 | 	cmp	local11, #2 wc
2f9d4     11 A6 06 C1 |  if_b	add	local01, #17
2f9d8     53 05 48 CC |  if_b	wrbyte	#2, local01
2f9dc     02 7A 06 C6 |  if_b	mov	result1, #2
2f9e0     74 02 90 CD |  if_b	jmp	#LR__5091
2f9e4     FF FF 7F FF 
2f9e8     FF BB 0E F2 | 	cmp	local11, ##-1 wz
2f9ec     11 A6 06 A1 |  if_e	add	local01, #17
2f9f0     53 03 48 AC |  if_e	wrbyte	#1, local01
2f9f4     01 7A 06 A6 |  if_e	mov	result1, #1
2f9f8     5C 02 90 AD |  if_e	jmp	#LR__5091
2f9fc     18 A6 06 F1 | 	add	local01, #24
2fa00     53 BB 62 FC | 	wrlong	local11, local01
2fa04     18 A6 86 F1 | 	sub	local01, #24
2fa08                 | LR__5082
2fa08     18 CE 05 F1 | 	add	fp, #24
2fa0c     E7 92 02 FB | 	rdlong	arg01, fp
2fa10     18 CE 85 F1 | 	sub	fp, #24
2fa14     18 A6 06 F1 | 	add	local01, #24
2fa18     53 95 02 FB | 	rdlong	arg02, local01
2fa1c     18 A6 86 F1 | 	sub	local01, #24
2fa20     94 CE BF FD | 	call	#_fatfs_cc_clst2sect
2fa24     3D BD 0A F6 | 	mov	local12, result1 wz
2fa28     11 A6 06 A1 |  if_e	add	local01, #17
2fa2c     53 05 48 AC |  if_e	wrbyte	#2, local01
2fa30     02 7A 06 A6 |  if_e	mov	result1, #2
2fa34     20 02 90 AD |  if_e	jmp	#LR__5091
2fa38     5C BD 02 F1 | 	add	local12, local10
2fa3c     55 BF 02 F6 | 	mov	local13, local03
2fa40     09 BE 46 F0 | 	shr	local13, #9
2fa44     01 BE 16 F2 | 	cmp	local13, #1 wc
2fa48     D8 00 90 CD |  if_b	jmp	#LR__5085
2fa4c     5C B3 02 F6 | 	mov	local07, local10
2fa50     5F B3 02 F1 | 	add	local07, local13
2fa54     18 CE 05 F1 | 	add	fp, #24
2fa58     E7 B6 02 FB | 	rdlong	local09, fp
2fa5c     18 CE 85 F1 | 	sub	fp, #24
2fa60     0A B6 06 F1 | 	add	local09, #10
2fa64     5B 7B E2 FA | 	rdword	result1, local09
2fa68     3D B3 1A F2 | 	cmp	local07, result1 wcz
2fa6c     18 00 90 ED |  if_be	jmp	#LR__5083
2fa70     18 CE 05 F1 | 	add	fp, #24
2fa74     E7 BE 02 FB | 	rdlong	local13, fp
2fa78     18 CE 85 F1 | 	sub	fp, #24
2fa7c     0A BE 06 F1 | 	add	local13, #10
2fa80     5F BF E2 FA | 	rdword	local13, local13
2fa84     5C BF 82 F1 | 	sub	local13, local10
2fa88                 | LR__5083
2fa88     18 CE 05 F1 | 	add	fp, #24
2fa8c     E7 B2 02 FB | 	rdlong	local07, fp
2fa90     18 CE 85 F1 | 	sub	fp, #24
2fa94     01 B2 06 F1 | 	add	local07, #1
2fa98     59 93 C2 FA | 	rdbyte	arg01, local07
2fa9c     57 95 02 F6 | 	mov	arg02, local05
2faa0     5F 99 02 F6 | 	mov	arg04, local13
2faa4     5E 97 02 F6 | 	mov	arg03, local12
2faa8     0C C6 BF FD | 	call	#_fatfs_cc_disk_read
2faac     00 7A 0E F2 | 	cmp	result1, #0 wz
2fab0     11 A6 06 51 |  if_ne	add	local01, #17
2fab4     53 03 48 5C |  if_ne	wrbyte	#1, local01
2fab8     01 7A 06 56 |  if_ne	mov	result1, #1
2fabc     98 01 90 5D |  if_ne	jmp	#LR__5091
2fac0     10 A6 06 F1 | 	add	local01, #16
2fac4     53 B3 C2 FA | 	rdbyte	local07, local01
2fac8     10 A6 86 F1 | 	sub	local01, #16
2facc     80 B2 CE F7 | 	test	local07, #128 wz
2fad0     44 00 90 AD |  if_e	jmp	#LR__5084
2fad4     1C A6 06 F1 | 	add	local01, #28
2fad8     53 B7 02 FB | 	rdlong	local09, local01
2fadc     1C A6 86 F1 | 	sub	local01, #28
2fae0     5E B7 82 F1 | 	sub	local09, local12
2fae4     5F B7 12 F2 | 	cmp	local09, local13 wc
2fae8     2C 00 90 3D |  if_ae	jmp	#LR__5084
2faec     57 93 02 F6 | 	mov	arg01, local05
2faf0     1C A6 06 F1 | 	add	local01, #28
2faf4     53 B9 02 FB | 	rdlong	local10, local01
2faf8     5E B9 82 F1 | 	sub	local10, local12
2fafc     09 B8 66 F0 | 	shl	local10, #9
2fb00     5C 93 02 F1 | 	add	arg01, local10
2fb04     0C A6 06 F1 | 	add	local01, #12
2fb08     53 95 02 F6 | 	mov	arg02, local01
2fb0c     28 A6 86 F1 | 	sub	local01, #40
2fb10     09 96 C6 F9 | 	decod	arg03, #9
2fb14     28 4B BF FD | 	call	#__system____builtin_memmove
2fb18                 | LR__5084
2fb18     09 BE 66 F0 | 	shl	local13, #9
2fb1c     5F C1 02 F6 | 	mov	local14, local13
2fb20                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2fb20                 | ' 				}
2fb20                 | ' 
2fb20                 | ' 
2fb20                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2fb20                 | ' 				continue;
2fb20     04 01 90 FD | 	jmp	#LR__5089
2fb24                 | LR__5085
2fb24     1C A6 06 F1 | 	add	local01, #28
2fb28     53 B3 02 FB | 	rdlong	local07, local01
2fb2c     1C A6 86 F1 | 	sub	local01, #28
2fb30     5E B3 0A F2 | 	cmp	local07, local12 wz
2fb34     A8 00 90 AD |  if_e	jmp	#LR__5087
2fb38     10 A6 06 F1 | 	add	local01, #16
2fb3c     53 B3 C2 FA | 	rdbyte	local07, local01
2fb40     10 A6 86 F1 | 	sub	local01, #16
2fb44     80 B2 CE F7 | 	test	local07, #128 wz
2fb48     58 00 90 AD |  if_e	jmp	#LR__5086
2fb4c     18 CE 05 F1 | 	add	fp, #24
2fb50     E7 C0 02 FB | 	rdlong	local14, fp
2fb54     18 CE 85 F1 | 	sub	fp, #24
2fb58     01 C0 06 F1 | 	add	local14, #1
2fb5c     60 93 C2 FA | 	rdbyte	arg01, local14
2fb60     28 A6 06 F1 | 	add	local01, #40
2fb64     53 95 02 F6 | 	mov	arg02, local01
2fb68     0C A6 86 F1 | 	sub	local01, #12
2fb6c     53 97 02 FB | 	rdlong	arg03, local01
2fb70     1C A6 86 F1 | 	sub	local01, #28
2fb74     01 98 06 F6 | 	mov	arg04, #1
2fb78     78 C6 BF FD | 	call	#_fatfs_cc_disk_write
2fb7c     00 7A 0E F2 | 	cmp	result1, #0 wz
2fb80     11 A6 06 51 |  if_ne	add	local01, #17
2fb84     53 03 48 5C |  if_ne	wrbyte	#1, local01
2fb88     01 7A 06 56 |  if_ne	mov	result1, #1
2fb8c     C8 00 90 5D |  if_ne	jmp	#LR__5091
2fb90     10 A6 06 F1 | 	add	local01, #16
2fb94     53 B3 C2 FA | 	rdbyte	local07, local01
2fb98     7F B2 06 F5 | 	and	local07, #127
2fb9c     53 B3 42 FC | 	wrbyte	local07, local01
2fba0     10 A6 86 F1 | 	sub	local01, #16
2fba4                 | LR__5086
2fba4     18 CE 05 F1 | 	add	fp, #24
2fba8     E7 C0 02 FB | 	rdlong	local14, fp
2fbac     18 CE 85 F1 | 	sub	fp, #24
2fbb0     01 C0 06 F1 | 	add	local14, #1
2fbb4     60 93 C2 FA | 	rdbyte	arg01, local14
2fbb8     53 95 02 F6 | 	mov	arg02, local01
2fbbc     28 94 06 F1 | 	add	arg02, #40
2fbc0     5E 97 02 F6 | 	mov	arg03, local12
2fbc4     01 98 06 F6 | 	mov	arg04, #1
2fbc8     EC C4 BF FD | 	call	#_fatfs_cc_disk_read
2fbcc     00 7A 0E F2 | 	cmp	result1, #0 wz
2fbd0     11 A6 06 51 |  if_ne	add	local01, #17
2fbd4     53 03 48 5C |  if_ne	wrbyte	#1, local01
2fbd8     01 7A 06 56 |  if_ne	mov	result1, #1
2fbdc     78 00 90 5D |  if_ne	jmp	#LR__5091
2fbe0                 | LR__5087
2fbe0     1C A6 06 F1 | 	add	local01, #28
2fbe4     53 BD 62 FC | 	wrlong	local12, local01
2fbe8     1C A6 86 F1 | 	sub	local01, #28
2fbec                 | LR__5088
2fbec     14 A6 06 F1 | 	add	local01, #20
2fbf0     53 BF 02 FB | 	rdlong	local13, local01
2fbf4     FF BF 06 F5 | 	and	local13, #511
2fbf8     09 C0 C6 F9 | 	decod	local14, #9
2fbfc     5F C1 82 F1 | 	sub	local14, local13
2fc00     55 C1 3A F3 | 	fle	local14, local03 wcz
2fc04     53 95 02 F6 | 	mov	arg02, local01
2fc08     14 94 06 F1 | 	add	arg02, #20
2fc0c     53 BF 02 FB | 	rdlong	local13, local01
2fc10     14 A6 86 F1 | 	sub	local01, #20
2fc14     FF BF 06 F5 | 	and	local13, #511
2fc18     5F 95 02 F1 | 	add	arg02, local13
2fc1c     57 93 02 F6 | 	mov	arg01, local05
2fc20     60 97 02 F6 | 	mov	arg03, local14
2fc24     18 4A BF FD | 	call	#__system____builtin_memmove
2fc28                 | LR__5089
2fc28     60 AB 82 F1 | 	sub	local03, local14
2fc2c     56 B3 02 FB | 	rdlong	local07, local04
2fc30     60 B3 02 F1 | 	add	local07, local14
2fc34     56 B3 62 FC | 	wrlong	local07, local04
2fc38     60 AF 02 F1 | 	add	local05, local14
2fc3c     14 A6 06 F1 | 	add	local01, #20
2fc40     53 B3 02 FB | 	rdlong	local07, local01
2fc44     60 B3 02 F1 | 	add	local07, local14
2fc48     53 B3 62 FC | 	wrlong	local07, local01
2fc4c     14 A6 86 F1 | 	sub	local01, #20
2fc50     FC FC 9F FD | 	jmp	#LR__5080
2fc54                 | LR__5090
2fc54                 | ' 
2fc54                 | ' 
2fc54                 | ' 
2fc54                 | ' 
2fc54                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2fc54                 | ' 
2fc54                 | ' 	}
2fc54                 | ' 
2fc54                 | ' 	return FR_OK ;
2fc54     00 7A 06 F6 | 	mov	result1, #0
2fc58                 | LR__5091
2fc58     E7 F0 03 F6 | 	mov	ptra, fp
2fc5c     F2 00 A0 FD | 	call	#popregs_
2fc60                 | _fatfs_cc_f_read_ret
2fc60     2D 00 64 FD | 	ret
2fc64                 | 
2fc64                 | _fatfs_cc_f_write
2fc64     12 CA 05 F6 | 	mov	COUNT_, #18
2fc68     E8 00 A0 FD | 	call	#pushregs_
2fc6c     34 F0 07 F1 | 	add	ptra, #52
2fc70     49 A7 02 F6 | 	mov	local01, arg01
2fc74     4A A9 02 F6 | 	mov	local02, arg02
2fc78     4B AB 02 F6 | 	mov	local03, arg03
2fc7c     4C AD 02 F6 | 	mov	local04, arg04
2fc80     54 AF 02 F6 | 	mov	local05, local02
2fc84     56 01 68 FC | 	wrlong	#0, local04
2fc88     E7 94 02 F6 | 	mov	arg02, fp
2fc8c     18 94 06 F1 | 	add	arg02, #24
2fc90     53 93 02 F6 | 	mov	arg01, local01
2fc94     94 F6 BF FD | 	call	#_fatfs_cc_validate
2fc98     3D B1 0A F6 | 	mov	local06, result1 wz
2fc9c     11 A6 06 A1 |  if_e	add	local01, #17
2fca0     53 B1 C2 AA |  if_e	rdbyte	local06, local01
2fca4     11 A6 86 A1 |  if_e	sub	local01, #17
2fca8     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
2fcac     58 7B 02 56 |  if_ne	mov	result1, local06
2fcb0     F4 03 90 5D |  if_ne	jmp	#LR__5112
2fcb4     10 A6 06 F1 | 	add	local01, #16
2fcb8     53 B3 C2 FA | 	rdbyte	local07, local01
2fcbc     10 A6 86 F1 | 	sub	local01, #16
2fcc0     02 B2 CE F7 | 	test	local07, #2 wz
2fcc4     07 7A 06 A6 |  if_e	mov	result1, #7
2fcc8     DC 03 90 AD |  if_e	jmp	#LR__5112
2fccc     14 A6 06 F1 | 	add	local01, #20
2fcd0     53 B5 02 FB | 	rdlong	local08, local01
2fcd4     5A B7 02 F6 | 	mov	local09, local08
2fcd8     55 B7 02 F1 | 	add	local09, local03
2fcdc     14 A6 86 F1 | 	sub	local01, #20
2fce0     5A B7 12 F2 | 	cmp	local09, local08 wc
2fce4     01 AA 66 C6 |  if_b	neg	local03, #1
2fce8     14 A6 06 C1 |  if_b	add	local01, #20
2fcec     53 B9 02 CB |  if_b	rdlong	local10, local01
2fcf0     14 A6 86 C1 |  if_b	sub	local01, #20
2fcf4     5C AB 82 C1 |  if_b	sub	local03, local10
2fcf8                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2fcf8                 | ' 	}
2fcf8                 | ' 
2fcf8                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2fcf8                 | LR__5100
2fcf8     01 AA 16 F2 | 	cmp	local03, #1 wc
2fcfc     94 03 90 CD |  if_b	jmp	#LR__5111
2fd00     14 A6 06 F1 | 	add	local01, #20
2fd04     53 B3 02 FB | 	rdlong	local07, local01
2fd08     14 A6 86 F1 | 	sub	local01, #20
2fd0c     FF B3 CE F7 | 	test	local07, #511 wz
2fd10     D8 02 90 5D |  if_ne	jmp	#LR__5109
2fd14     14 A6 06 F1 | 	add	local01, #20
2fd18     53 BB 02 FB | 	rdlong	local11, local01
2fd1c     14 A6 86 F1 | 	sub	local01, #20
2fd20     09 BA 46 F0 | 	shr	local11, #9
2fd24     18 CE 05 F1 | 	add	fp, #24
2fd28     E7 B4 02 FB | 	rdlong	local08, fp
2fd2c     18 CE 85 F1 | 	sub	fp, #24
2fd30     5A BD 02 F6 | 	mov	local12, local08
2fd34     0A BC 06 F1 | 	add	local12, #10
2fd38     5E BF E2 FA | 	rdword	local13, local12
2fd3c     0A BC 86 F1 | 	sub	local12, #10
2fd40     5F B7 32 F9 | 	getword	local09, local13, #0
2fd44     01 B6 86 F1 | 	sub	local09, #1
2fd48     5B BB 0A F5 | 	and	local11, local09 wz
2fd4c     A0 00 90 5D |  if_ne	jmp	#LR__5103
2fd50     14 A6 06 F1 | 	add	local01, #20
2fd54     53 B3 0A FB | 	rdlong	local07, local01 wz
2fd58     14 A6 86 F1 | 	sub	local01, #20
2fd5c     24 00 90 5D |  if_ne	jmp	#LR__5101
2fd60     08 A6 06 F1 | 	add	local01, #8
2fd64     53 C1 0A FB | 	rdlong	local14, local01 wz
2fd68     08 A6 86 F1 | 	sub	local01, #8
2fd6c     2C 00 90 5D |  if_ne	jmp	#LR__5102
2fd70     53 93 02 F6 | 	mov	arg01, local01
2fd74     00 94 06 F6 | 	mov	arg02, #0
2fd78     44 D0 BF FD | 	call	#_fatfs_cc_create_chain
2fd7c     3D C1 02 F6 | 	mov	local14, result1
2fd80     18 00 90 FD | 	jmp	#LR__5102
2fd84                 | LR__5101
2fd84     53 93 02 F6 | 	mov	arg01, local01
2fd88     18 A6 06 F1 | 	add	local01, #24
2fd8c     53 95 02 FB | 	rdlong	arg02, local01
2fd90     18 A6 86 F1 | 	sub	local01, #24
2fd94     28 D0 BF FD | 	call	#_fatfs_cc_create_chain
2fd98     3D C1 02 F6 | 	mov	local14, result1
2fd9c                 | LR__5102
2fd9c     00 C0 0E F2 | 	cmp	local14, #0 wz
2fda0     F0 02 90 AD |  if_e	jmp	#LR__5111
2fda4     01 C0 0E F2 | 	cmp	local14, #1 wz
2fda8     11 A6 06 A1 |  if_e	add	local01, #17
2fdac     53 05 48 AC |  if_e	wrbyte	#2, local01
2fdb0     02 7A 06 A6 |  if_e	mov	result1, #2
2fdb4     F0 02 90 AD |  if_e	jmp	#LR__5112
2fdb8     FF FF 7F FF 
2fdbc     FF C1 0E F2 | 	cmp	local14, ##-1 wz
2fdc0     11 A6 06 A1 |  if_e	add	local01, #17
2fdc4     53 03 48 AC |  if_e	wrbyte	#1, local01
2fdc8     01 7A 06 A6 |  if_e	mov	result1, #1
2fdcc     D8 02 90 AD |  if_e	jmp	#LR__5112
2fdd0     18 A6 06 F1 | 	add	local01, #24
2fdd4     53 C1 62 FC | 	wrlong	local14, local01
2fdd8     10 A6 86 F1 | 	sub	local01, #16
2fddc     53 B3 0A FB | 	rdlong	local07, local01 wz
2fde0     08 A6 86 F1 | 	sub	local01, #8
2fde4     08 A6 06 A1 |  if_e	add	local01, #8
2fde8     53 C1 62 AC |  if_e	wrlong	local14, local01
2fdec     08 A6 86 A1 |  if_e	sub	local01, #8
2fdf0                 | LR__5103
2fdf0     10 A6 06 F1 | 	add	local01, #16
2fdf4     53 B3 C2 FA | 	rdbyte	local07, local01
2fdf8     10 A6 86 F1 | 	sub	local01, #16
2fdfc     80 B2 CE F7 | 	test	local07, #128 wz
2fe00     58 00 90 AD |  if_e	jmp	#LR__5104
2fe04     18 CE 05 F1 | 	add	fp, #24
2fe08     E7 B8 02 FB | 	rdlong	local10, fp
2fe0c     18 CE 85 F1 | 	sub	fp, #24
2fe10     01 B8 06 F1 | 	add	local10, #1
2fe14     5C 93 C2 FA | 	rdbyte	arg01, local10
2fe18     28 A6 06 F1 | 	add	local01, #40
2fe1c     53 95 02 F6 | 	mov	arg02, local01
2fe20     0C A6 86 F1 | 	sub	local01, #12
2fe24     53 97 02 FB | 	rdlong	arg03, local01
2fe28     1C A6 86 F1 | 	sub	local01, #28
2fe2c     01 98 06 F6 | 	mov	arg04, #1
2fe30     C0 C3 BF FD | 	call	#_fatfs_cc_disk_write
2fe34     00 7A 0E F2 | 	cmp	result1, #0 wz
2fe38     11 A6 06 51 |  if_ne	add	local01, #17
2fe3c     53 03 48 5C |  if_ne	wrbyte	#1, local01
2fe40     01 7A 06 56 |  if_ne	mov	result1, #1
2fe44     60 02 90 5D |  if_ne	jmp	#LR__5112
2fe48     10 A6 06 F1 | 	add	local01, #16
2fe4c     53 B3 C2 FA | 	rdbyte	local07, local01
2fe50     7F B2 06 F5 | 	and	local07, #127
2fe54     53 B3 42 FC | 	wrbyte	local07, local01
2fe58     10 A6 86 F1 | 	sub	local01, #16
2fe5c                 | LR__5104
2fe5c     18 CE 05 F1 | 	add	fp, #24
2fe60     E7 92 02 FB | 	rdlong	arg01, fp
2fe64     18 CE 85 F1 | 	sub	fp, #24
2fe68     18 A6 06 F1 | 	add	local01, #24
2fe6c     53 95 02 FB | 	rdlong	arg02, local01
2fe70     18 A6 86 F1 | 	sub	local01, #24
2fe74     40 CA BF FD | 	call	#_fatfs_cc_clst2sect
2fe78     3D C3 0A F6 | 	mov	local15, result1 wz
2fe7c     11 A6 06 A1 |  if_e	add	local01, #17
2fe80     53 05 48 AC |  if_e	wrbyte	#2, local01
2fe84     02 7A 06 A6 |  if_e	mov	result1, #2
2fe88     1C 02 90 AD |  if_e	jmp	#LR__5112
2fe8c     5D C3 02 F1 | 	add	local15, local11
2fe90     55 C5 02 F6 | 	mov	local16, local03
2fe94     09 C4 46 F0 | 	shr	local16, #9
2fe98     01 C4 16 F2 | 	cmp	local16, #1 wc
2fe9c     D4 00 90 CD |  if_b	jmp	#LR__5107
2fea0     5D B3 02 F6 | 	mov	local07, local11
2fea4     62 B3 02 F1 | 	add	local07, local16
2fea8     18 CE 05 F1 | 	add	fp, #24
2feac     E7 C6 02 FB | 	rdlong	local17, fp
2feb0     18 CE 85 F1 | 	sub	fp, #24
2feb4     0A C6 06 F1 | 	add	local17, #10
2feb8     63 B9 E2 FA | 	rdword	local10, local17
2febc     5C B3 1A F2 | 	cmp	local07, local10 wcz
2fec0     18 00 90 ED |  if_be	jmp	#LR__5105
2fec4     18 CE 05 F1 | 	add	fp, #24
2fec8     E7 B8 02 FB | 	rdlong	local10, fp
2fecc     18 CE 85 F1 | 	sub	fp, #24
2fed0     0A B8 06 F1 | 	add	local10, #10
2fed4     5C C5 E2 FA | 	rdword	local16, local10
2fed8     5D C5 82 F1 | 	sub	local16, local11
2fedc                 | LR__5105
2fedc     18 CE 05 F1 | 	add	fp, #24
2fee0     E7 B8 02 FB | 	rdlong	local10, fp
2fee4     18 CE 85 F1 | 	sub	fp, #24
2fee8     01 B8 06 F1 | 	add	local10, #1
2feec     5C 93 C2 FA | 	rdbyte	arg01, local10
2fef0     57 95 02 F6 | 	mov	arg02, local05
2fef4     61 97 02 F6 | 	mov	arg03, local15
2fef8     62 99 02 F6 | 	mov	arg04, local16
2fefc     F4 C2 BF FD | 	call	#_fatfs_cc_disk_write
2ff00     00 7A 0E F2 | 	cmp	result1, #0 wz
2ff04     11 A6 06 51 |  if_ne	add	local01, #17
2ff08     53 03 48 5C |  if_ne	wrbyte	#1, local01
2ff0c     01 7A 06 56 |  if_ne	mov	result1, #1
2ff10     94 01 90 5D |  if_ne	jmp	#LR__5112
2ff14     1C A6 06 F1 | 	add	local01, #28
2ff18     53 B3 02 FB | 	rdlong	local07, local01
2ff1c     1C A6 86 F1 | 	sub	local01, #28
2ff20     61 B3 82 F1 | 	sub	local07, local15
2ff24     62 B3 12 F2 | 	cmp	local07, local16 wc
2ff28     3C 00 90 3D |  if_ae	jmp	#LR__5106
2ff2c     28 A6 06 F1 | 	add	local01, #40
2ff30     53 93 02 F6 | 	mov	arg01, local01
2ff34     57 95 02 F6 | 	mov	arg02, local05
2ff38     0C A6 86 F1 | 	sub	local01, #12
2ff3c     53 BF 02 FB | 	rdlong	local13, local01
2ff40     61 BF 82 F1 | 	sub	local13, local15
2ff44     09 BE 66 F0 | 	shl	local13, #9
2ff48     5F 95 02 F1 | 	add	arg02, local13
2ff4c     09 96 C6 F9 | 	decod	arg03, #9
2ff50     EC 46 BF FD | 	call	#__system____builtin_memmove
2ff54     0C A6 86 F1 | 	sub	local01, #12
2ff58     53 B3 C2 FA | 	rdbyte	local07, local01
2ff5c     7F B2 06 F5 | 	and	local07, #127
2ff60     53 B3 42 FC | 	wrbyte	local07, local01
2ff64     10 A6 86 F1 | 	sub	local01, #16
2ff68                 | LR__5106
2ff68     62 C9 02 F6 | 	mov	local18, local16
2ff6c     09 C8 66 F0 | 	shl	local18, #9
2ff70                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2ff70                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2ff70                 | ' 				}
2ff70                 | ' 
2ff70                 | ' 
2ff70                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2ff70                 | ' 				continue;
2ff70     C4 00 90 FD | 	jmp	#LR__5110
2ff74                 | LR__5107
2ff74     1C A6 06 F1 | 	add	local01, #28
2ff78     53 B3 02 FB | 	rdlong	local07, local01
2ff7c     1C A6 86 F1 | 	sub	local01, #28
2ff80     61 B3 0A F2 | 	cmp	local07, local15 wz
2ff84     58 00 90 AD |  if_e	jmp	#LR__5108
2ff88     14 A6 06 F1 | 	add	local01, #20
2ff8c     53 C7 02 FB | 	rdlong	local17, local01
2ff90     08 A6 86 F1 | 	sub	local01, #8
2ff94     53 BD 02 FB | 	rdlong	local12, local01
2ff98     0C A6 86 F1 | 	sub	local01, #12
2ff9c     5E C7 12 F2 | 	cmp	local17, local12 wc
2ffa0     3C 00 90 3D |  if_ae	jmp	#LR__5108
2ffa4     18 CE 05 F1 | 	add	fp, #24
2ffa8     E7 C8 02 FB | 	rdlong	local18, fp
2ffac     18 CE 85 F1 | 	sub	fp, #24
2ffb0     01 C8 06 F1 | 	add	local18, #1
2ffb4     64 93 C2 FA | 	rdbyte	arg01, local18
2ffb8     53 95 02 F6 | 	mov	arg02, local01
2ffbc     28 94 06 F1 | 	add	arg02, #40
2ffc0     61 97 02 F6 | 	mov	arg03, local15
2ffc4     01 98 06 F6 | 	mov	arg04, #1
2ffc8     EC C0 BF FD | 	call	#_fatfs_cc_disk_read
2ffcc     00 7A 0E F2 | 	cmp	result1, #0 wz
2ffd0     11 A6 06 51 |  if_ne	add	local01, #17
2ffd4     53 03 48 5C |  if_ne	wrbyte	#1, local01
2ffd8                 | ' 				fp->fptr < fp->obj.objsize &&
2ffd8                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2ffd8                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2ffd8     01 7A 06 56 |  if_ne	mov	result1, #1
2ffdc     C8 00 90 5D |  if_ne	jmp	#LR__5112
2ffe0                 | LR__5108
2ffe0     1C A6 06 F1 | 	add	local01, #28
2ffe4     53 C3 62 FC | 	wrlong	local15, local01
2ffe8     1C A6 86 F1 | 	sub	local01, #28
2ffec                 | LR__5109
2ffec     14 A6 06 F1 | 	add	local01, #20
2fff0     53 B9 02 FB | 	rdlong	local10, local01
2fff4     FF B9 06 F5 | 	and	local10, #511
2fff8     09 C8 C6 F9 | 	decod	local18, #9
2fffc     5C C9 82 F1 | 	sub	local18, local10
30000     55 C9 3A F3 | 	fle	local18, local03 wcz
30004     53 93 02 F6 | 	mov	arg01, local01
30008     14 92 06 F1 | 	add	arg01, #20
3000c     53 BF 02 FB | 	rdlong	local13, local01
30010     FF BF 06 F5 | 	and	local13, #511
30014     5F 93 02 F1 | 	add	arg01, local13
30018     57 95 02 F6 | 	mov	arg02, local05
3001c     64 97 02 F6 | 	mov	arg03, local18
30020     1C 46 BF FD | 	call	#__system____builtin_memmove
30024     04 A6 86 F1 | 	sub	local01, #4
30028     53 B3 C2 FA | 	rdbyte	local07, local01
3002c     80 B2 46 F5 | 	or	local07, #128
30030     53 B3 42 FC | 	wrbyte	local07, local01
30034     10 A6 86 F1 | 	sub	local01, #16
30038                 | LR__5110
30038     64 AB 82 F1 | 	sub	local03, local18
3003c     56 B3 02 FB | 	rdlong	local07, local04
30040     64 B3 02 F1 | 	add	local07, local18
30044     56 B3 62 FC | 	wrlong	local07, local04
30048     64 AF 02 F1 | 	add	local05, local18
3004c     14 A6 06 F1 | 	add	local01, #20
30050     53 B9 02 FB | 	rdlong	local10, local01
30054     64 B9 02 F1 | 	add	local10, local18
30058     53 B9 62 FC | 	wrlong	local10, local01
3005c     08 A6 86 F1 | 	sub	local01, #8
30060     53 B7 02 FB | 	rdlong	local09, local01
30064     0C A6 86 F1 | 	sub	local01, #12
30068     5B B9 1A F2 | 	cmp	local10, local09 wcz
3006c     14 A6 06 11 |  if_a	add	local01, #20
30070     53 B3 02 1B |  if_a	rdlong	local07, local01
30074     14 A6 86 11 |  if_a	sub	local01, #20
30078     0C A6 06 E1 |  if_be	add	local01, #12
3007c     53 B3 02 EB |  if_be	rdlong	local07, local01
30080     0C A6 86 E1 |  if_be	sub	local01, #12
30084     0C A6 06 F1 | 	add	local01, #12
30088     53 B3 62 FC | 	wrlong	local07, local01
3008c     0C A6 86 F1 | 	sub	local01, #12
30090     64 FC 9F FD | 	jmp	#LR__5100
30094                 | LR__5111
30094     10 A6 06 F1 | 	add	local01, #16
30098     53 B3 C2 FA | 	rdbyte	local07, local01
3009c     40 B2 46 F5 | 	or	local07, #64
300a0     53 B3 42 FC | 	wrbyte	local07, local01
300a4                 | ' 
300a4                 | ' 
300a4                 | ' 
300a4                 | ' 
300a4                 | ' 
300a4                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
300a4                 | ' 		fp->flag |=  0x80 ;
300a4                 | ' 
300a4                 | ' 	}
300a4                 | ' 
300a4                 | ' 	fp->flag |=  0x40 ;
300a4                 | ' 
300a4                 | ' 	return FR_OK ;
300a4     00 7A 06 F6 | 	mov	result1, #0
300a8                 | LR__5112
300a8     E7 F0 03 F6 | 	mov	ptra, fp
300ac     F2 00 A0 FD | 	call	#popregs_
300b0                 | _fatfs_cc_f_write_ret
300b0     2D 00 64 FD | 	ret
300b4                 | 
300b4                 | _fatfs_cc_f_sync
300b4     03 CA 05 F6 | 	mov	COUNT_, #3
300b8     E8 00 A0 FD | 	call	#pushregs_
300bc     18 F0 07 F1 | 	add	ptra, #24
300c0     49 A7 02 F6 | 	mov	local01, arg01
300c4     E7 94 02 F6 | 	mov	arg02, fp
300c8     0C 94 06 F1 | 	add	arg02, #12
300cc     53 93 02 F6 | 	mov	arg01, local01
300d0     58 F2 BF FD | 	call	#_fatfs_cc_validate
300d4     3D A9 0A F6 | 	mov	local02, result1 wz
300d8     30 01 90 5D |  if_ne	jmp	#LR__5123
300dc     10 A6 06 F1 | 	add	local01, #16
300e0     53 99 C2 FA | 	rdbyte	arg04, local01
300e4     10 A6 86 F1 | 	sub	local01, #16
300e8     40 98 CE F7 | 	test	arg04, #64 wz
300ec     1C 01 90 AD |  if_e	jmp	#LR__5122
300f0     10 A6 06 F1 | 	add	local01, #16
300f4     53 A9 C2 FA | 	rdbyte	local02, local01
300f8     10 A6 86 F1 | 	sub	local01, #16
300fc     80 A8 CE F7 | 	test	local02, #128 wz
30100     50 00 90 AD |  if_e	jmp	#LR__5120
30104     0C CE 05 F1 | 	add	fp, #12
30108     E7 A8 02 FB | 	rdlong	local02, fp
3010c     0C CE 85 F1 | 	sub	fp, #12
30110     01 A8 06 F1 | 	add	local02, #1
30114     54 93 C2 FA | 	rdbyte	arg01, local02
30118     28 A6 06 F1 | 	add	local01, #40
3011c     53 95 02 F6 | 	mov	arg02, local01
30120     0C A6 86 F1 | 	sub	local01, #12
30124     53 97 02 FB | 	rdlong	arg03, local01
30128     1C A6 86 F1 | 	sub	local01, #28
3012c     01 98 06 F6 | 	mov	arg04, #1
30130     C0 C0 BF FD | 	call	#_fatfs_cc_disk_write
30134     00 7A 0E F2 | 	cmp	result1, #0 wz
30138     01 7A 06 56 |  if_ne	mov	result1, #1
3013c     D0 00 90 5D |  if_ne	jmp	#LR__5124
30140     10 A6 06 F1 | 	add	local01, #16
30144     53 A9 C2 FA | 	rdbyte	local02, local01
30148     7F A8 06 F5 | 	and	local02, #127
3014c     53 A9 42 FC | 	wrbyte	local02, local01
30150     10 A6 86 F1 | 	sub	local01, #16
30154                 | LR__5120
30154     EC 0F B0 FD | 	call	#_fatfs_cc__get_fattime
30158     3D AB 02 F6 | 	mov	local03, result1
3015c     0C CE 05 F1 | 	add	fp, #12
30160     E7 92 02 FB | 	rdlong	arg01, fp
30164     0C CE 85 F1 | 	sub	fp, #12
30168     20 A6 06 F1 | 	add	local01, #32
3016c     53 95 02 FB | 	rdlong	arg02, local01
30170     20 A6 86 F1 | 	sub	local01, #32
30174     C8 C5 BF FD | 	call	#_fatfs_cc_move_window
30178     3D A9 0A F6 | 	mov	local02, result1 wz
3017c     8C 00 90 5D |  if_ne	jmp	#LR__5121
30180     24 A6 06 F1 | 	add	local01, #36
30184     53 A9 02 FB | 	rdlong	local02, local01
30188     24 A6 86 F1 | 	sub	local01, #36
3018c     0B A8 06 F1 | 	add	local02, #11
30190     54 99 C2 FA | 	rdbyte	arg04, local02
30194     20 98 46 F5 | 	or	arg04, #32
30198     54 99 42 FC | 	wrbyte	arg04, local02
3019c     0B A8 86 F1 | 	sub	local02, #11
301a0     53 93 02 FB | 	rdlong	arg01, local01
301a4     08 A6 06 F1 | 	add	local01, #8
301a8     53 97 02 FB | 	rdlong	arg03, local01
301ac     54 95 02 F6 | 	mov	arg02, local02
301b0     F8 D2 BF FD | 	call	#_fatfs_cc_st_clust
301b4     54 93 02 F6 | 	mov	arg01, local02
301b8     1C 92 06 F1 | 	add	arg01, #28
301bc     04 A6 06 F1 | 	add	local01, #4
301c0     53 95 02 FB | 	rdlong	arg02, local01
301c4     49 95 62 FC | 	wrlong	arg02, arg01
301c8     54 93 02 F6 | 	mov	arg01, local02
301cc     16 92 06 F1 | 	add	arg01, #22
301d0     49 AB 62 FC | 	wrlong	local03, arg01
301d4     12 A8 06 F1 | 	add	local02, #18
301d8     54 01 58 FC | 	wrword	#0, local02
301dc     0C CE 05 F1 | 	add	fp, #12
301e0     E7 AA 02 FB | 	rdlong	local03, fp
301e4     03 AA 06 F1 | 	add	local03, #3
301e8     55 03 48 FC | 	wrbyte	#1, local03
301ec     E7 92 02 FB | 	rdlong	arg01, fp
301f0     0C CE 85 F1 | 	sub	fp, #12
301f4     C0 C5 BF FD | 	call	#_fatfs_cc_sync_fs
301f8     3D A9 02 F6 | 	mov	local02, result1
301fc     04 A6 06 F1 | 	add	local01, #4
30200     53 AB C2 FA | 	rdbyte	local03, local01
30204     BF AA 06 F5 | 	and	local03, #191
30208     53 AB 42 FC | 	wrbyte	local03, local01
3020c                 | LR__5121
3020c                 | LR__5122
3020c                 | LR__5123
3020c                 | ' 					dir = fp->dir_ptr;
3020c                 | ' 					dir[ 11 ] |=  0x20 ;
3020c                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
3020c                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
3020c                 | ' 					st_dword(dir +  22 , tm);
3020c                 | ' 					st_word(dir +  18 , 0);
3020c                 | ' 					fs->wflag = 1;
3020c                 | ' 					res = sync_fs(fs);
3020c                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
3020c                 | ' 				}
3020c                 | ' 			}
3020c                 | ' 		}
3020c                 | ' 	}
3020c                 | ' 
3020c                 | ' 	return res ;
3020c     54 7B 02 F6 | 	mov	result1, local02
30210                 | LR__5124
30210     E7 F0 03 F6 | 	mov	ptra, fp
30214     F2 00 A0 FD | 	call	#popregs_
30218                 | _fatfs_cc_f_sync_ret
30218     2D 00 64 FD | 	ret
3021c                 | 
3021c                 | _fatfs_cc_f_close
3021c     02 CA 05 F6 | 	mov	COUNT_, #2
30220     E8 00 A0 FD | 	call	#pushregs_
30224     10 F0 07 F1 | 	add	ptra, #16
30228     49 A7 02 F6 | 	mov	local01, arg01
3022c     84 FE BF FD | 	call	#_fatfs_cc_f_sync
30230     3D A9 0A F6 | 	mov	local02, result1 wz
30234     18 00 90 5D |  if_ne	jmp	#LR__5130
30238     E7 94 02 F6 | 	mov	arg02, fp
3023c     0C 94 06 F1 | 	add	arg02, #12
30240     53 93 02 F6 | 	mov	arg01, local01
30244     E4 F0 BF FD | 	call	#_fatfs_cc_validate
30248     3D A9 0A F6 | 	mov	local02, result1 wz
3024c     53 01 68 AC |  if_e	wrlong	#0, local01
30250                 | LR__5130
30250                 | ' 
30250                 | ' 
30250                 | ' 
30250                 | ' 
30250                 | ' 			fp->obj.fs = 0;
30250                 | ' #line 4192 "ff.c"
30250                 | ' 		}
30250                 | ' 	}
30250                 | ' 	return res;
30250     54 7B 02 F6 | 	mov	result1, local02
30254     E7 F0 03 F6 | 	mov	ptra, fp
30258     F2 00 A0 FD | 	call	#popregs_
3025c                 | _fatfs_cc_f_close_ret
3025c     2D 00 64 FD | 	ret
30260                 | 
30260                 | _fatfs_cc_f_lseek
30260     0D CA 05 F6 | 	mov	COUNT_, #13
30264     E8 00 A0 FD | 	call	#pushregs_
30268     24 F0 07 F1 | 	add	ptra, #36
3026c     49 A7 02 F6 | 	mov	local01, arg01
30270     4A A9 02 F6 | 	mov	local02, arg02
30274     E7 94 02 F6 | 	mov	arg02, fp
30278     10 94 06 F1 | 	add	arg02, #16
3027c     53 93 02 F6 | 	mov	arg01, local01
30280     A8 F0 BF FD | 	call	#_fatfs_cc_validate
30284     3D AB 0A F6 | 	mov	local03, result1 wz
30288     11 A6 06 A1 |  if_e	add	local01, #17
3028c     53 AB C2 AA |  if_e	rdbyte	local03, local01
30290     11 A6 86 A1 |  if_e	sub	local01, #17
30294     00 AA 0E F2 | 	cmp	local03, #0 wz
30298     55 7B 02 56 |  if_ne	mov	result1, local03
3029c     5C 03 90 5D |  if_ne	jmp	#LR__5156
302a0     0C A6 06 F1 | 	add	local01, #12
302a4     53 AD 02 FB | 	rdlong	local04, local01
302a8     0C A6 86 F1 | 	sub	local01, #12
302ac     56 A9 1A F2 | 	cmp	local02, local04 wcz
302b0     20 00 90 ED |  if_be	jmp	#LR__5140
302b4     10 A6 06 F1 | 	add	local01, #16
302b8     53 AF C2 FA | 	rdbyte	local05, local01
302bc     10 A6 86 F1 | 	sub	local01, #16
302c0     57 B1 E2 F8 | 	getbyte	local06, local05, #0
302c4     02 B0 CE F7 | 	test	local06, #2 wz
302c8     0C A6 06 A1 |  if_e	add	local01, #12
302cc     53 A9 02 AB |  if_e	rdlong	local02, local01
302d0     0C A6 86 A1 |  if_e	sub	local01, #12
302d4                 | LR__5140
302d4     14 A6 06 F1 | 	add	local01, #20
302d8     53 B3 02 FB | 	rdlong	local07, local01
302dc     00 B4 06 F6 | 	mov	local08, #0
302e0     53 01 68 FC | 	wrlong	#0, local01
302e4     14 A6 86 F1 | 	sub	local01, #20
302e8     01 A8 16 F2 | 	cmp	local02, #1 wc
302ec     F4 01 90 CD |  if_b	jmp	#LR__5152
302f0     10 CE 05 F1 | 	add	fp, #16
302f4     E7 B6 02 FB | 	rdlong	local09, fp
302f8     10 CE 85 F1 | 	sub	fp, #16
302fc     0A B6 06 F1 | 	add	local09, #10
30300     5B AF E2 FA | 	rdword	local05, local09
30304     57 B9 32 F9 | 	getword	local10, local05, #0
30308     09 B8 66 F0 | 	shl	local10, #9
3030c     5C BB 02 F6 | 	mov	local11, local10
30310     01 B2 16 F2 | 	cmp	local07, #1 wc
30314     5C 00 90 CD |  if_b	jmp	#LR__5141
30318     54 B7 02 F6 | 	mov	local09, local02
3031c     01 B6 86 F1 | 	sub	local09, #1
30320     5D B7 12 FD | 	qdiv	local09, local11
30324     59 AF 02 F6 | 	mov	local05, local07
30328     01 AE 86 F1 | 	sub	local05, #1
3032c     5D BD 02 F6 | 	mov	local12, local11
30330     18 B6 62 FD | 	getqx	local09
30334     5E AF 12 FD | 	qdiv	local05, local12
30338     18 B8 62 FD | 	getqx	local10
3033c     5C B7 12 F2 | 	cmp	local09, local10 wc
30340     30 00 90 CD |  if_b	jmp	#LR__5141
30344     59 B1 02 F6 | 	mov	local06, local07
30348     01 B0 86 F1 | 	sub	local06, #1
3034c     5D B7 02 F6 | 	mov	local09, local11
30350     01 B6 86 F1 | 	sub	local09, #1
30354     5B B1 22 F5 | 	andn	local06, local09
30358     14 A6 06 F1 | 	add	local01, #20
3035c     53 B1 62 FC | 	wrlong	local06, local01
30360     58 A9 82 F1 | 	sub	local02, local06
30364     04 A6 06 F1 | 	add	local01, #4
30368     53 BF 02 FB | 	rdlong	local13, local01
3036c     18 A6 86 F1 | 	sub	local01, #24
30370     64 00 90 FD | 	jmp	#LR__5143
30374                 | LR__5141
30374     08 A6 06 F1 | 	add	local01, #8
30378     53 BF 0A FB | 	rdlong	local13, local01 wz
3037c     08 A6 86 F1 | 	sub	local01, #8
30380     48 00 90 5D |  if_ne	jmp	#LR__5142
30384     53 93 02 F6 | 	mov	arg01, local01
30388     00 94 06 F6 | 	mov	arg02, #0
3038c     30 CA BF FD | 	call	#_fatfs_cc_create_chain
30390     3D BF 02 F6 | 	mov	local13, result1
30394     01 BE 0E F2 | 	cmp	local13, #1 wz
30398     11 A6 06 A1 |  if_e	add	local01, #17
3039c     53 05 48 AC |  if_e	wrbyte	#2, local01
303a0     02 7A 06 A6 |  if_e	mov	result1, #2
303a4     54 02 90 AD |  if_e	jmp	#LR__5156
303a8     FF FF 7F FF 
303ac     FF BF 0E F2 | 	cmp	local13, ##-1 wz
303b0     11 A6 06 A1 |  if_e	add	local01, #17
303b4     53 03 48 AC |  if_e	wrbyte	#1, local01
303b8     01 7A 06 A6 |  if_e	mov	result1, #1
303bc     3C 02 90 AD |  if_e	jmp	#LR__5156
303c0     08 A6 06 F1 | 	add	local01, #8
303c4     53 BF 62 FC | 	wrlong	local13, local01
303c8     08 A6 86 F1 | 	sub	local01, #8
303cc                 | LR__5142
303cc     18 A6 06 F1 | 	add	local01, #24
303d0     53 BF 62 FC | 	wrlong	local13, local01
303d4     18 A6 86 F1 | 	sub	local01, #24
303d8                 | LR__5143
303d8     00 BE 0E F2 | 	cmp	local13, #0 wz
303dc     04 01 90 AD |  if_e	jmp	#LR__5151
303e0                 | ' 				while (ofs > bcs) {
303e0                 | LR__5144
303e0     5D A9 1A F2 | 	cmp	local02, local11 wcz
303e4     B0 00 90 ED |  if_be	jmp	#LR__5149
303e8     5D A9 82 F1 | 	sub	local02, local11
303ec     14 A6 06 F1 | 	add	local01, #20
303f0     53 AD 02 FB | 	rdlong	local04, local01
303f4     5D AD 02 F1 | 	add	local04, local11
303f8     53 AD 62 FC | 	wrlong	local04, local01
303fc     04 A6 86 F1 | 	sub	local01, #4
30400     53 AD C2 FA | 	rdbyte	local04, local01
30404     10 A6 86 F1 | 	sub	local01, #16
30408     02 AC CE F7 | 	test	local04, #2 wz
3040c     1C 00 90 AD |  if_e	jmp	#LR__5145
30410     53 93 02 F6 | 	mov	arg01, local01
30414     5F 95 02 F6 | 	mov	arg02, local13
30418     A4 C9 BF FD | 	call	#_fatfs_cc_create_chain
3041c     3D BF 0A F6 | 	mov	local13, result1 wz
30420     00 A8 06 A6 |  if_e	mov	local02, #0
30424                 | ' 							ofs = 0; break;
30424     70 00 90 AD |  if_e	jmp	#LR__5149
30428     10 00 90 FD | 	jmp	#LR__5146
3042c                 | LR__5145
3042c     53 93 02 F6 | 	mov	arg01, local01
30430     5F 95 02 F6 | 	mov	arg02, local13
30434     C0 C4 BF FD | 	call	#_fatfs_cc_get_fat
30438     3D BF 02 F6 | 	mov	local13, result1
3043c                 | LR__5146
3043c     FF FF 7F FF 
30440     FF BF 0E F2 | 	cmp	local13, ##-1 wz
30444     11 A6 06 A1 |  if_e	add	local01, #17
30448     53 03 48 AC |  if_e	wrbyte	#1, local01
3044c     01 7A 06 A6 |  if_e	mov	result1, #1
30450     A8 01 90 AD |  if_e	jmp	#LR__5156
30454     02 BE 16 F2 | 	cmp	local13, #2 wc
30458     1C 00 90 CD |  if_b	jmp	#LR__5147
3045c     10 CE 05 F1 | 	add	fp, #16
30460     E7 AC 02 FB | 	rdlong	local04, fp
30464     10 CE 85 F1 | 	sub	fp, #16
30468     18 AC 06 F1 | 	add	local04, #24
3046c     56 AF 02 FB | 	rdlong	local05, local04
30470     57 BF 12 F2 | 	cmp	local13, local05 wc
30474     10 00 90 CD |  if_b	jmp	#LR__5148
30478                 | LR__5147
30478     11 A6 06 F1 | 	add	local01, #17
3047c     53 05 48 FC | 	wrbyte	#2, local01
30480     02 7A 06 F6 | 	mov	result1, #2
30484     74 01 90 FD | 	jmp	#LR__5156
30488                 | LR__5148
30488     18 A6 06 F1 | 	add	local01, #24
3048c     53 BF 62 FC | 	wrlong	local13, local01
30490     18 A6 86 F1 | 	sub	local01, #24
30494     48 FF 9F FD | 	jmp	#LR__5144
30498                 | LR__5149
30498     14 A6 06 F1 | 	add	local01, #20
3049c     53 AD 02 FB | 	rdlong	local04, local01
304a0     54 AD 02 F1 | 	add	local04, local02
304a4     53 AD 62 FC | 	wrlong	local04, local01
304a8     14 A6 86 F1 | 	sub	local01, #20
304ac     FF A9 CE F7 | 	test	local02, #511 wz
304b0     30 00 90 AD |  if_e	jmp	#LR__5150
304b4     10 CE 05 F1 | 	add	fp, #16
304b8     E7 92 02 FB | 	rdlong	arg01, fp
304bc     10 CE 85 F1 | 	sub	fp, #16
304c0     5F 95 02 F6 | 	mov	arg02, local13
304c4     F0 C3 BF FD | 	call	#_fatfs_cc_clst2sect
304c8     3D B5 0A F6 | 	mov	local08, result1 wz
304cc     11 A6 06 A1 |  if_e	add	local01, #17
304d0     53 05 48 AC |  if_e	wrbyte	#2, local01
304d4     02 7A 06 A6 |  if_e	mov	result1, #2
304d8     20 01 90 AD |  if_e	jmp	#LR__5156
304dc     09 A8 46 F0 | 	shr	local02, #9
304e0     54 B5 02 F1 | 	add	local08, local02
304e4                 | LR__5150
304e4                 | LR__5151
304e4                 | LR__5152
304e4     14 A6 06 F1 | 	add	local01, #20
304e8     53 AD 02 FB | 	rdlong	local04, local01
304ec     08 A6 86 F1 | 	sub	local01, #8
304f0     53 B1 02 FB | 	rdlong	local06, local01
304f4     0C A6 86 F1 | 	sub	local01, #12
304f8     58 AD 1A F2 | 	cmp	local04, local06 wcz
304fc     24 00 90 ED |  if_be	jmp	#LR__5153
30500     14 A6 06 F1 | 	add	local01, #20
30504     53 AD 02 FB | 	rdlong	local04, local01
30508     08 A6 86 F1 | 	sub	local01, #8
3050c     53 AD 62 FC | 	wrlong	local04, local01
30510     04 A6 06 F1 | 	add	local01, #4
30514     53 AD C2 FA | 	rdbyte	local04, local01
30518     40 AC 46 F5 | 	or	local04, #64
3051c     53 AD 42 FC | 	wrbyte	local04, local01
30520     10 A6 86 F1 | 	sub	local01, #16
30524                 | LR__5153
30524     14 A6 06 F1 | 	add	local01, #20
30528     53 AD 02 FB | 	rdlong	local04, local01
3052c     14 A6 86 F1 | 	sub	local01, #20
30530     FF AD CE F7 | 	test	local04, #511 wz
30534     1C A6 06 51 |  if_ne	add	local01, #28
30538     53 AF 02 5B |  if_ne	rdlong	local05, local01
3053c     1C A6 86 51 |  if_ne	sub	local01, #28
30540     57 B5 0A 52 |  if_ne	cmp	local08, local05 wz
30544     B0 00 90 AD |  if_e	jmp	#LR__5155
30548     10 A6 06 F1 | 	add	local01, #16
3054c     53 AD C2 FA | 	rdbyte	local04, local01
30550     10 A6 86 F1 | 	sub	local01, #16
30554     80 AC CE F7 | 	test	local04, #128 wz
30558     58 00 90 AD |  if_e	jmp	#LR__5154
3055c     10 CE 05 F1 | 	add	fp, #16
30560     E7 B6 02 FB | 	rdlong	local09, fp
30564     10 CE 85 F1 | 	sub	fp, #16
30568     01 B6 06 F1 | 	add	local09, #1
3056c     5B 93 C2 FA | 	rdbyte	arg01, local09
30570     28 A6 06 F1 | 	add	local01, #40
30574     53 95 02 F6 | 	mov	arg02, local01
30578     0C A6 86 F1 | 	sub	local01, #12
3057c     53 97 02 FB | 	rdlong	arg03, local01
30580     1C A6 86 F1 | 	sub	local01, #28
30584     01 98 06 F6 | 	mov	arg04, #1
30588     68 BC BF FD | 	call	#_fatfs_cc_disk_write
3058c     00 7A 0E F2 | 	cmp	result1, #0 wz
30590     11 A6 06 51 |  if_ne	add	local01, #17
30594     53 03 48 5C |  if_ne	wrbyte	#1, local01
30598     01 7A 06 56 |  if_ne	mov	result1, #1
3059c     5C 00 90 5D |  if_ne	jmp	#LR__5156
305a0     10 A6 06 F1 | 	add	local01, #16
305a4     53 AD C2 FA | 	rdbyte	local04, local01
305a8     7F AC 06 F5 | 	and	local04, #127
305ac     53 AD 42 FC | 	wrbyte	local04, local01
305b0     10 A6 86 F1 | 	sub	local01, #16
305b4                 | LR__5154
305b4     10 CE 05 F1 | 	add	fp, #16
305b8     E7 B6 02 FB | 	rdlong	local09, fp
305bc     10 CE 85 F1 | 	sub	fp, #16
305c0     01 B6 06 F1 | 	add	local09, #1
305c4     5B 93 C2 FA | 	rdbyte	arg01, local09
305c8     53 95 02 F6 | 	mov	arg02, local01
305cc     28 94 06 F1 | 	add	arg02, #40
305d0     5A 97 02 F6 | 	mov	arg03, local08
305d4     01 98 06 F6 | 	mov	arg04, #1
305d8     DC BA BF FD | 	call	#_fatfs_cc_disk_read
305dc     00 7A 0E F2 | 	cmp	result1, #0 wz
305e0     11 A6 06 51 |  if_ne	add	local01, #17
305e4     53 03 48 5C |  if_ne	wrbyte	#1, local01
305e8     01 7A 06 56 |  if_ne	mov	result1, #1
305ec     0C 00 90 5D |  if_ne	jmp	#LR__5156
305f0     1C A6 06 F1 | 	add	local01, #28
305f4     53 B5 62 FC | 	wrlong	local08, local01
305f8                 | LR__5155
305f8                 | ' 
305f8                 | ' 			fp->sect = nsect;
305f8                 | ' 		}
305f8                 | ' 	}
305f8                 | ' 
305f8                 | ' 	return res ;
305f8     55 7B 02 F6 | 	mov	result1, local03
305fc                 | LR__5156
305fc     E7 F0 03 F6 | 	mov	ptra, fp
30600     F2 00 A0 FD | 	call	#popregs_
30604                 | _fatfs_cc_f_lseek_ret
30604     2D 00 64 FD | 	ret
30608                 | 
30608                 | _fatfs_cc_f_opendir
30608     02 CA 05 F6 | 	mov	COUNT_, #2
3060c     E8 00 A0 FD | 	call	#pushregs_
30610     14 F0 07 F1 | 	add	ptra, #20
30614     49 A7 0A F6 | 	mov	local01, arg01 wz
30618     08 CE 05 F1 | 	add	fp, #8
3061c     E7 94 62 FC | 	wrlong	arg02, fp
30620     08 CE 85 F1 | 	sub	fp, #8
30624     09 7A 06 A6 |  if_e	mov	result1, #9
30628     EC 00 90 AD |  if_e	jmp	#LR__5166
3062c     08 CE 05 F1 | 	add	fp, #8
30630     E7 92 02 F6 | 	mov	arg01, fp
30634     08 CE 05 F1 | 	add	fp, #8
30638     E7 94 02 F6 | 	mov	arg02, fp
3063c     10 CE 85 F1 | 	sub	fp, #16
30640     00 96 06 F6 | 	mov	arg03, #0
30644     B4 E7 BF FD | 	call	#_fatfs_cc_mount_volume
30648     3D A9 0A F6 | 	mov	local02, result1 wz
3064c     BC 00 90 5D |  if_ne	jmp	#LR__5165
30650     10 CE 05 F1 | 	add	fp, #16
30654     E7 A8 02 FB | 	rdlong	local02, fp
30658     53 A9 62 FC | 	wrlong	local02, local01
3065c     08 CE 85 F1 | 	sub	fp, #8
30660     E7 94 02 FB | 	rdlong	arg02, fp
30664     08 CE 85 F1 | 	sub	fp, #8
30668     53 93 02 F6 | 	mov	arg01, local01
3066c     F0 E2 BF FD | 	call	#_fatfs_cc_follow_path
30670     3D A9 0A F6 | 	mov	local02, result1 wz
30674     8C 00 90 5D |  if_ne	jmp	#LR__5164
30678     2B A6 06 F1 | 	add	local01, #43
3067c     53 97 C2 FA | 	rdbyte	arg03, local01
30680     2B A6 86 F1 | 	sub	local01, #43
30684     80 96 CE F7 | 	test	arg03, #128 wz
30688     40 00 90 5D |  if_ne	jmp	#LR__5162
3068c     06 A6 06 F1 | 	add	local01, #6
30690     53 97 C2 FA | 	rdbyte	arg03, local01
30694     06 A6 86 F1 | 	sub	local01, #6
30698     10 96 CE F7 | 	test	arg03, #16 wz
3069c     28 00 90 AD |  if_e	jmp	#LR__5160
306a0     10 CE 05 F1 | 	add	fp, #16
306a4     E7 92 02 FB | 	rdlong	arg01, fp
306a8     10 CE 85 F1 | 	sub	fp, #16
306ac     1C A6 06 F1 | 	add	local01, #28
306b0     53 95 02 FB | 	rdlong	arg02, local01
306b4     C0 CD BF FD | 	call	#_fatfs_cc_ld_clust
306b8     14 A6 86 F1 | 	sub	local01, #20
306bc     53 7B 62 FC | 	wrlong	result1, local01
306c0     08 A6 86 F1 | 	sub	local01, #8
306c4     04 00 90 FD | 	jmp	#LR__5161
306c8                 | LR__5160
306c8     05 A8 06 F6 | 	mov	local02, #5
306cc                 | LR__5161
306cc                 | LR__5162
306cc     00 A8 0E F2 | 	cmp	local02, #0 wz
306d0     30 00 90 5D |  if_ne	jmp	#LR__5163
306d4     10 CE 05 F1 | 	add	fp, #16
306d8     E7 A8 02 FB | 	rdlong	local02, fp
306dc     10 CE 85 F1 | 	sub	fp, #16
306e0     06 A8 06 F1 | 	add	local02, #6
306e4     54 A9 E2 FA | 	rdword	local02, local02
306e8     04 A6 06 F1 | 	add	local01, #4
306ec     53 A9 52 FC | 	wrword	local02, local01
306f0     04 A6 86 F1 | 	sub	local01, #4
306f4     53 93 02 F6 | 	mov	arg01, local01
306f8     00 94 06 F6 | 	mov	arg02, #0
306fc     A4 C9 BF FD | 	call	#_fatfs_cc_dir_sdi
30700     3D A9 02 F6 | 	mov	local02, result1
30704                 | LR__5163
30704                 | LR__5164
30704     04 A8 0E F2 | 	cmp	local02, #4 wz
30708     05 A8 06 A6 |  if_e	mov	local02, #5
3070c                 | LR__5165
3070c     00 A8 0E F2 | 	cmp	local02, #0 wz
30710     53 01 68 5C |  if_ne	wrlong	#0, local01
30714                 | ' 
30714                 | ' 	return res ;
30714     54 7B 02 F6 | 	mov	result1, local02
30718                 | LR__5166
30718     E7 F0 03 F6 | 	mov	ptra, fp
3071c     F2 00 A0 FD | 	call	#popregs_
30720                 | _fatfs_cc_f_opendir_ret
30720     2D 00 64 FD | 	ret
30724                 | 
30724                 | _fatfs_cc_f_closedir
30724     01 CA 05 F6 | 	mov	COUNT_, #1
30728     E8 00 A0 FD | 	call	#pushregs_
3072c     10 F0 07 F1 | 	add	ptra, #16
30730     49 A7 02 F6 | 	mov	local01, arg01
30734     E7 94 02 F6 | 	mov	arg02, fp
30738     0C 94 06 F1 | 	add	arg02, #12
3073c     53 93 02 F6 | 	mov	arg01, local01
30740     E8 EB BF FD | 	call	#_fatfs_cc_validate
30744     00 7A 4E F2 | 	cmps	result1, #0 wz
30748     53 01 68 AC |  if_e	wrlong	#0, local01
3074c                 | ' 
3074c                 | ' 
3074c                 | ' 
3074c                 | ' 
3074c                 | ' 		dp->obj.fs = 0;
3074c                 | ' #line 4633 "ff.c"
3074c                 | ' 	}
3074c                 | ' 	return res;
3074c     E7 F0 03 F6 | 	mov	ptra, fp
30750     F2 00 A0 FD | 	call	#popregs_
30754                 | _fatfs_cc_f_closedir_ret
30754     2D 00 64 FD | 	ret
30758                 | 
30758                 | _fatfs_cc_f_readdir
30758     03 CA 05 F6 | 	mov	COUNT_, #3
3075c     E8 00 A0 FD | 	call	#pushregs_
30760     14 F0 07 F1 | 	add	ptra, #20
30764     49 A7 02 F6 | 	mov	local01, arg01
30768     4A A9 02 F6 | 	mov	local02, arg02
3076c     E7 94 02 F6 | 	mov	arg02, fp
30770     10 94 06 F1 | 	add	arg02, #16
30774     53 93 02 F6 | 	mov	arg01, local01
30778     B0 EB BF FD | 	call	#_fatfs_cc_validate
3077c     3D AB 0A F6 | 	mov	local03, result1 wz
30780     60 00 90 5D |  if_ne	jmp	#LR__5173
30784     00 A8 0E F2 | 	cmp	local02, #0 wz
30788     14 00 90 5D |  if_ne	jmp	#LR__5170
3078c     53 93 02 F6 | 	mov	arg01, local01
30790     00 94 06 F6 | 	mov	arg02, #0
30794     0C C9 BF FD | 	call	#_fatfs_cc_dir_sdi
30798     3D AB 02 F6 | 	mov	local03, result1
3079c     44 00 90 FD | 	jmp	#LR__5172
307a0                 | LR__5170
307a0     53 93 02 F6 | 	mov	arg01, local01
307a4     00 94 06 F6 | 	mov	arg02, #0
307a8     98 D1 BF FD | 	call	#_fatfs_cc_dir_read
307ac     3D AB 02 F6 | 	mov	local03, result1
307b0     04 AA 0E F2 | 	cmp	local03, #4 wz
307b4     00 AA 06 A6 |  if_e	mov	local03, #0
307b8     00 AA 0E F2 | 	cmp	local03, #0 wz
307bc     24 00 90 5D |  if_ne	jmp	#LR__5171
307c0     53 93 02 F6 | 	mov	arg01, local01
307c4     54 95 02 F6 | 	mov	arg02, local02
307c8     E4 D8 BF FD | 	call	#_fatfs_cc_get_fileinfo
307cc     53 93 02 F6 | 	mov	arg01, local01
307d0     00 94 06 F6 | 	mov	arg02, #0
307d4     34 CA BF FD | 	call	#_fatfs_cc_dir_next
307d8     3D AB 02 F6 | 	mov	local03, result1
307dc     04 AA 0E F2 | 	cmp	local03, #4 wz
307e0     00 AA 06 A6 |  if_e	mov	local03, #0
307e4                 | LR__5171
307e4                 | LR__5172
307e4                 | LR__5173
307e4                 | ' 			}
307e4                 | ' 			;
307e4                 | ' 		}
307e4                 | ' 	}
307e4                 | ' 	return res ;
307e4     55 7B 02 F6 | 	mov	result1, local03
307e8     E7 F0 03 F6 | 	mov	ptra, fp
307ec     F2 00 A0 FD | 	call	#popregs_
307f0                 | _fatfs_cc_f_readdir_ret
307f0     2D 00 64 FD | 	ret
307f4                 | 
307f4                 | _fatfs_cc_f_stat
307f4     02 CA 05 F6 | 	mov	COUNT_, #2
307f8     E8 00 A0 FD | 	call	#pushregs_
307fc     40 F0 07 F1 | 	add	ptra, #64
30800     04 CE 05 F1 | 	add	fp, #4
30804     E7 92 62 FC | 	wrlong	arg01, fp
30808     4A A7 02 F6 | 	mov	local01, arg02
3080c     E7 92 02 F6 | 	mov	arg01, fp
30810     0C CE 05 F1 | 	add	fp, #12
30814     E7 94 02 F6 | 	mov	arg02, fp
30818     10 CE 85 F1 | 	sub	fp, #16
3081c     00 96 06 F6 | 	mov	arg03, #0
30820     D8 E5 BF FD | 	call	#_fatfs_cc_mount_volume
30824     3D A9 0A F6 | 	mov	local02, result1 wz
30828     4C 00 90 5D |  if_ne	jmp	#LR__5182
3082c     10 CE 05 F1 | 	add	fp, #16
30830     E7 92 02 F6 | 	mov	arg01, fp
30834     0C CE 85 F1 | 	sub	fp, #12
30838     E7 94 02 FB | 	rdlong	arg02, fp
3083c     04 CE 85 F1 | 	sub	fp, #4
30840     1C E1 BF FD | 	call	#_fatfs_cc_follow_path
30844     3D A9 0A F6 | 	mov	local02, result1 wz
30848     2C 00 90 5D |  if_ne	jmp	#LR__5181
3084c     3B CE 05 F1 | 	add	fp, #59
30850     E7 96 C2 FA | 	rdbyte	arg03, fp
30854     3B CE 85 F1 | 	sub	fp, #59
30858     80 96 CE F7 | 	test	arg03, #128 wz
3085c     06 A8 06 56 |  if_ne	mov	local02, #6
30860     14 00 90 5D |  if_ne	jmp	#LR__5180
30864     00 A6 0E F2 | 	cmp	local01, #0 wz
30868     E7 92 02 56 |  if_ne	mov	arg01, fp
3086c     10 92 06 51 |  if_ne	add	arg01, #16
30870     53 95 02 56 |  if_ne	mov	arg02, local01
30874     38 D8 BF 5D |  if_ne	call	#_fatfs_cc_get_fileinfo
30878                 | LR__5180
30878                 | LR__5181
30878                 | LR__5182
30878                 | ' 			}
30878                 | ' 		}
30878                 | ' 		;
30878                 | ' 	}
30878                 | ' 
30878                 | ' 	return res ;
30878     54 7B 02 F6 | 	mov	result1, local02
3087c     E7 F0 03 F6 | 	mov	ptra, fp
30880     F2 00 A0 FD | 	call	#popregs_
30884                 | _fatfs_cc_f_stat_ret
30884     2D 00 64 FD | 	ret
30888                 | 
30888                 | _fatfs_cc_f_unlink
30888     02 CA 05 F6 | 	mov	COUNT_, #2
3088c     E8 00 A0 FD | 	call	#pushregs_
30890     74 F0 07 F1 | 	add	ptra, #116
30894     04 CE 05 F1 | 	add	fp, #4
30898     E7 92 62 FC | 	wrlong	arg01, fp
3089c     00 A6 06 F6 | 	mov	local01, #0
308a0     E7 92 02 F6 | 	mov	arg01, fp
308a4     6C CE 05 F1 | 	add	fp, #108
308a8     E7 94 02 F6 | 	mov	arg02, fp
308ac     70 CE 85 F1 | 	sub	fp, #112
308b0     02 96 06 F6 | 	mov	arg03, #2
308b4     44 E5 BF FD | 	call	#_fatfs_cc_mount_volume
308b8     3D A9 0A F6 | 	mov	local02, result1 wz
308bc     3C 01 90 5D |  if_ne	jmp	#LR__5198
308c0     70 CE 05 F1 | 	add	fp, #112
308c4     E7 A8 02 FB | 	rdlong	local02, fp
308c8     64 CE 85 F1 | 	sub	fp, #100
308cc     E7 A8 62 FC | 	wrlong	local02, fp
308d0     E7 92 02 F6 | 	mov	arg01, fp
308d4     08 CE 85 F1 | 	sub	fp, #8
308d8     E7 94 02 FB | 	rdlong	arg02, fp
308dc     04 CE 85 F1 | 	sub	fp, #4
308e0     7C E0 BF FD | 	call	#_fatfs_cc_follow_path
308e4     3D A9 0A F6 | 	mov	local02, result1 wz
308e8     10 01 90 5D |  if_ne	jmp	#LR__5197
308ec     37 CE 05 F1 | 	add	fp, #55
308f0     E7 7A C2 FA | 	rdbyte	result1, fp
308f4     37 CE 85 F1 | 	sub	fp, #55
308f8     80 7A CE F7 | 	test	result1, #128 wz
308fc     06 A8 06 56 |  if_ne	mov	local02, #6
30900     14 00 90 5D |  if_ne	jmp	#LR__5190
30904     12 CE 05 F1 | 	add	fp, #18
30908     E7 7A C2 FA | 	rdbyte	result1, fp
3090c     12 CE 85 F1 | 	sub	fp, #18
30910     01 7A CE F7 | 	test	result1, #1 wz
30914     07 A8 06 56 |  if_ne	mov	local02, #7
30918                 | LR__5190
30918     00 A8 0E F2 | 	cmp	local02, #0 wz
3091c     84 00 90 5D |  if_ne	jmp	#LR__5193
30920     70 CE 05 F1 | 	add	fp, #112
30924     E7 92 02 FB | 	rdlong	arg01, fp
30928     48 CE 85 F1 | 	sub	fp, #72
3092c     E7 94 02 FB | 	rdlong	arg02, fp
30930     28 CE 85 F1 | 	sub	fp, #40
30934     40 CB BF FD | 	call	#_fatfs_cc_ld_clust
30938     3D A7 02 F6 | 	mov	local01, result1
3093c     12 CE 05 F1 | 	add	fp, #18
30940     E7 7A C2 FA | 	rdbyte	result1, fp
30944     12 CE 85 F1 | 	sub	fp, #18
30948     10 7A CE F7 | 	test	result1, #16 wz
3094c     54 00 90 AD |  if_e	jmp	#LR__5192
30950     70 CE 05 F1 | 	add	fp, #112
30954     E7 A8 02 FB | 	rdlong	local02, fp
30958     34 CE 85 F1 | 	sub	fp, #52
3095c     E7 A8 62 FC | 	wrlong	local02, fp
30960     08 CE 05 F1 | 	add	fp, #8
30964     E7 A6 62 FC | 	wrlong	local01, fp
30968     08 CE 85 F1 | 	sub	fp, #8
3096c     E7 92 02 F6 | 	mov	arg01, fp
30970     3C CE 85 F1 | 	sub	fp, #60
30974     00 94 06 F6 | 	mov	arg02, #0
30978     28 C7 BF FD | 	call	#_fatfs_cc_dir_sdi
3097c     3D A9 0A F6 | 	mov	local02, result1 wz
30980     20 00 90 5D |  if_ne	jmp	#LR__5191
30984     E7 92 02 F6 | 	mov	arg01, fp
30988     3C 92 06 F1 | 	add	arg01, #60
3098c     00 94 06 F6 | 	mov	arg02, #0
30990     B0 CF BF FD | 	call	#_fatfs_cc_dir_read
30994     3D A9 0A F6 | 	mov	local02, result1 wz
30998     07 A8 06 A6 |  if_e	mov	local02, #7
3099c     04 A8 0E F2 | 	cmp	local02, #4 wz
309a0     00 A8 06 A6 |  if_e	mov	local02, #0
309a4                 | LR__5191
309a4                 | LR__5192
309a4                 | LR__5193
309a4     00 A8 0E F2 | 	cmp	local02, #0 wz
309a8     50 00 90 5D |  if_ne	jmp	#LR__5196
309ac     E7 92 02 F6 | 	mov	arg01, fp
309b0     0C 92 06 F1 | 	add	arg01, #12
309b4     30 D6 BF FD | 	call	#_fatfs_cc_dir_remove
309b8     3D A9 0A F6 | 	mov	local02, result1 wz
309bc     20 00 90 5D |  if_ne	jmp	#LR__5194
309c0     00 A6 0E F2 | 	cmp	local01, #0 wz
309c4     18 00 90 AD |  if_e	jmp	#LR__5194
309c8     E7 92 02 F6 | 	mov	arg01, fp
309cc     0C 92 06 F1 | 	add	arg01, #12
309d0     53 95 02 F6 | 	mov	arg02, local01
309d4     00 96 06 F6 | 	mov	arg03, #0
309d8     D0 C2 BF FD | 	call	#_fatfs_cc_remove_chain
309dc     3D A9 02 F6 | 	mov	local02, result1
309e0                 | LR__5194
309e0     00 A8 0E F2 | 	cmp	local02, #0 wz
309e4     14 00 90 5D |  if_ne	jmp	#LR__5195
309e8     70 CE 05 F1 | 	add	fp, #112
309ec     E7 92 02 FB | 	rdlong	arg01, fp
309f0     70 CE 85 F1 | 	sub	fp, #112
309f4     C0 BD BF FD | 	call	#_fatfs_cc_sync_fs
309f8     3D A9 02 F6 | 	mov	local02, result1
309fc                 | LR__5195
309fc                 | LR__5196
309fc                 | LR__5197
309fc                 | LR__5198
309fc                 | ' 			}
309fc                 | ' 		}
309fc                 | ' 		;
309fc                 | ' 	}
309fc                 | ' 
309fc                 | ' 	return res ;
309fc     54 7B 02 F6 | 	mov	result1, local02
30a00     E7 F0 03 F6 | 	mov	ptra, fp
30a04     F2 00 A0 FD | 	call	#popregs_
30a08                 | _fatfs_cc_f_unlink_ret
30a08     2D 00 64 FD | 	ret
30a0c                 | 
30a0c                 | _fatfs_cc_f_mkdir
30a0c     03 CA 05 F6 | 	mov	COUNT_, #3
30a10     E8 00 A0 FD | 	call	#pushregs_
30a14     5C F0 07 F1 | 	add	ptra, #92
30a18     04 CE 05 F1 | 	add	fp, #4
30a1c     E7 92 62 FC | 	wrlong	arg01, fp
30a20     E7 92 02 F6 | 	mov	arg01, fp
30a24     48 CE 05 F1 | 	add	fp, #72
30a28     E7 94 02 F6 | 	mov	arg02, fp
30a2c     4C CE 85 F1 | 	sub	fp, #76
30a30     02 96 06 F6 | 	mov	arg03, #2
30a34     C4 E3 BF FD | 	call	#_fatfs_cc_mount_volume
30a38     3D A7 0A F6 | 	mov	local01, result1 wz
30a3c     FC 01 90 5D |  if_ne	jmp	#LR__5205
30a40     4C CE 05 F1 | 	add	fp, #76
30a44     E7 A6 02 FB | 	rdlong	local01, fp
30a48     40 CE 85 F1 | 	sub	fp, #64
30a4c     E7 A6 62 FC | 	wrlong	local01, fp
30a50     E7 92 02 F6 | 	mov	arg01, fp
30a54     08 CE 85 F1 | 	sub	fp, #8
30a58     E7 94 02 FB | 	rdlong	arg02, fp
30a5c     04 CE 85 F1 | 	sub	fp, #4
30a60     FC DE BF FD | 	call	#_fatfs_cc_follow_path
30a64     3D A7 0A F6 | 	mov	local01, result1 wz
30a68     08 A6 06 A6 |  if_e	mov	local01, #8
30a6c     04 A6 0E F2 | 	cmp	local01, #4 wz
30a70     C8 01 90 5D |  if_ne	jmp	#LR__5204
30a74     4C CE 05 F1 | 	add	fp, #76
30a78     E7 A6 02 FB | 	rdlong	local01, fp
30a7c     10 CE 85 F1 | 	sub	fp, #16
30a80     E7 A6 62 FC | 	wrlong	local01, fp
30a84     E7 92 02 F6 | 	mov	arg01, fp
30a88     3C CE 85 F1 | 	sub	fp, #60
30a8c     00 94 06 F6 | 	mov	arg02, #0
30a90     2C C3 BF FD | 	call	#_fatfs_cc_create_chain
30a94     3D A9 0A F6 | 	mov	local02, result1 wz
30a98     00 A6 06 F6 | 	mov	local01, #0
30a9c     07 A6 06 A6 |  if_e	mov	local01, #7
30aa0     01 A8 0E F2 | 	cmp	local02, #1 wz
30aa4     02 A6 06 A6 |  if_e	mov	local01, #2
30aa8     FF FF 7F FF 
30aac     FF A9 0E F2 | 	cmp	local02, ##-1 wz
30ab0     01 A6 06 A6 |  if_e	mov	local01, #1
30ab4     8C 06 B0 FD | 	call	#_fatfs_cc__get_fattime
30ab8     3D AB 02 F6 | 	mov	local03, result1
30abc     00 A6 0E F2 | 	cmp	local01, #0 wz
30ac0     EC 00 90 5D |  if_ne	jmp	#LR__5201
30ac4     4C CE 05 F1 | 	add	fp, #76
30ac8     E7 92 02 FB | 	rdlong	arg01, fp
30acc     4C CE 85 F1 | 	sub	fp, #76
30ad0     54 95 02 F6 | 	mov	arg02, local02
30ad4     0C C5 BF FD | 	call	#_fatfs_cc_dir_clear
30ad8     3D A7 0A F6 | 	mov	local01, result1 wz
30adc     D0 00 90 5D |  if_ne	jmp	#LR__5200
30ae0     4C CE 05 F1 | 	add	fp, #76
30ae4     E7 92 02 FB | 	rdlong	arg01, fp
30ae8     4C CE 85 F1 | 	sub	fp, #76
30aec     34 92 06 F1 | 	add	arg01, #52
30af0     20 94 06 F6 | 	mov	arg02, #32
30af4     0B 96 06 F6 | 	mov	arg03, #11
30af8     D8 00 A0 FD | 	call	#\builtin_bytefill_
30afc     4C CE 05 F1 | 	add	fp, #76
30b00     E7 A6 02 FB | 	rdlong	local01, fp
30b04     34 A6 06 F1 | 	add	local01, #52
30b08     53 5D 48 FC | 	wrbyte	#46, local01
30b0c     E7 A6 02 FB | 	rdlong	local01, fp
30b10     3F A6 06 F1 | 	add	local01, #63
30b14     53 21 48 FC | 	wrbyte	#16, local01
30b18     E7 92 02 FB | 	rdlong	arg01, fp
30b1c     4A 92 06 F1 | 	add	arg01, #74
30b20     49 AB 62 FC | 	wrlong	local03, arg01
30b24     E7 94 02 FB | 	rdlong	arg02, fp
30b28     4A 93 02 F6 | 	mov	arg01, arg02
30b2c     4C CE 85 F1 | 	sub	fp, #76
30b30     34 94 06 F1 | 	add	arg02, #52
30b34     54 97 02 F6 | 	mov	arg03, local02
30b38     70 C9 BF FD | 	call	#_fatfs_cc_st_clust
30b3c     4C CE 05 F1 | 	add	fp, #76
30b40     E7 94 02 FB | 	rdlong	arg02, fp
30b44     4A 93 02 F6 | 	mov	arg01, arg02
30b48     54 92 06 F1 | 	add	arg01, #84
30b4c     4C CE 85 F1 | 	sub	fp, #76
30b50     34 94 06 F1 | 	add	arg02, #52
30b54     20 96 06 F6 | 	mov	arg03, #32
30b58     E4 3A BF FD | 	call	#__system____builtin_memmove
30b5c     4C CE 05 F1 | 	add	fp, #76
30b60     E7 A6 02 FB | 	rdlong	local01, fp
30b64     55 A6 06 F1 | 	add	local01, #85
30b68     53 5D 48 FC | 	wrbyte	#46, local01
30b6c     38 CE 85 F1 | 	sub	fp, #56
30b70     E7 96 02 FB | 	rdlong	arg03, fp
30b74     38 CE 05 F1 | 	add	fp, #56
30b78     E7 94 02 FB | 	rdlong	arg02, fp
30b7c     4A 93 02 F6 | 	mov	arg01, arg02
30b80     4C CE 85 F1 | 	sub	fp, #76
30b84     54 94 06 F1 | 	add	arg02, #84
30b88     20 C9 BF FD | 	call	#_fatfs_cc_st_clust
30b8c     4C CE 05 F1 | 	add	fp, #76
30b90     E7 A6 02 FB | 	rdlong	local01, fp
30b94     4C CE 85 F1 | 	sub	fp, #76
30b98     03 A6 06 F1 | 	add	local01, #3
30b9c     53 03 48 FC | 	wrbyte	#1, local01
30ba0     E7 92 02 F6 | 	mov	arg01, fp
30ba4     0C 92 06 F1 | 	add	arg01, #12
30ba8     D8 D1 BF FD | 	call	#_fatfs_cc_dir_register
30bac     3D A7 02 F6 | 	mov	local01, result1
30bb0                 | LR__5200
30bb0                 | LR__5201
30bb0     00 A6 0E F2 | 	cmp	local01, #0 wz
30bb4     70 00 90 5D |  if_ne	jmp	#LR__5202
30bb8     28 CE 05 F1 | 	add	fp, #40
30bbc     E7 92 02 FB | 	rdlong	arg01, fp
30bc0     16 92 06 F1 | 	add	arg01, #22
30bc4     49 AB 62 FC | 	wrlong	local03, arg01
30bc8     24 CE 05 F1 | 	add	fp, #36
30bcc     E7 92 02 FB | 	rdlong	arg01, fp
30bd0     24 CE 85 F1 | 	sub	fp, #36
30bd4     E7 94 02 FB | 	rdlong	arg02, fp
30bd8     28 CE 85 F1 | 	sub	fp, #40
30bdc     54 97 02 F6 | 	mov	arg03, local02
30be0     C8 C8 BF FD | 	call	#_fatfs_cc_st_clust
30be4     28 CE 05 F1 | 	add	fp, #40
30be8     E7 AA 02 FB | 	rdlong	local03, fp
30bec     0B AA 06 F1 | 	add	local03, #11
30bf0     55 21 48 FC | 	wrbyte	#16, local03
30bf4     24 CE 05 F1 | 	add	fp, #36
30bf8     E7 AA 02 FB | 	rdlong	local03, fp
30bfc     4C CE 85 F1 | 	sub	fp, #76
30c00     03 AA 06 F1 | 	add	local03, #3
30c04     55 03 48 FC | 	wrbyte	#1, local03
30c08     00 A6 0E F2 | 	cmp	local01, #0 wz
30c0c     2C 00 90 5D |  if_ne	jmp	#LR__5203
30c10     4C CE 05 F1 | 	add	fp, #76
30c14     E7 92 02 FB | 	rdlong	arg01, fp
30c18     4C CE 85 F1 | 	sub	fp, #76
30c1c     98 BB BF FD | 	call	#_fatfs_cc_sync_fs
30c20     3D A7 02 F6 | 	mov	local01, result1
30c24     14 00 90 FD | 	jmp	#LR__5203
30c28                 | LR__5202
30c28     E7 92 02 F6 | 	mov	arg01, fp
30c2c     3C 92 06 F1 | 	add	arg01, #60
30c30     54 95 02 F6 | 	mov	arg02, local02
30c34     00 96 06 F6 | 	mov	arg03, #0
30c38     70 C0 BF FD | 	call	#_fatfs_cc_remove_chain
30c3c                 | LR__5203
30c3c                 | LR__5204
30c3c                 | LR__5205
30c3c                 | ' 				remove_chain(&sobj, dcl, 0);
30c3c                 | ' 			}
30c3c                 | ' 		}
30c3c                 | ' 		;
30c3c                 | ' 	}
30c3c                 | ' 
30c3c                 | ' 	return res ;
30c3c     53 7B 02 F6 | 	mov	result1, local01
30c40     E7 F0 03 F6 | 	mov	ptra, fp
30c44     F2 00 A0 FD | 	call	#popregs_
30c48                 | _fatfs_cc_f_mkdir_ret
30c48     2D 00 64 FD | 	ret
30c4c                 | 
30c4c                 | _fatfs_cc_f_rename
30c4c     03 CA 05 F6 | 	mov	COUNT_, #3
30c50     E8 00 A0 FD | 	call	#pushregs_
30c54     9C F0 07 F1 | 	add	ptra, #156
30c58     04 CE 05 F1 | 	add	fp, #4
30c5c     E7 92 62 FC | 	wrlong	arg01, fp
30c60     04 CE 05 F1 | 	add	fp, #4
30c64     E7 94 62 FC | 	wrlong	arg02, fp
30c68     E7 92 02 F6 | 	mov	arg01, fp
30c6c     08 CE 85 F1 | 	sub	fp, #8
30c70     4C DE BF FD | 	call	#_fatfs_cc_get_ldnumber
30c74     04 CE 05 F1 | 	add	fp, #4
30c78     E7 92 02 F6 | 	mov	arg01, fp
30c7c     6C CE 05 F1 | 	add	fp, #108
30c80     E7 94 02 F6 | 	mov	arg02, fp
30c84     70 CE 85 F1 | 	sub	fp, #112
30c88     02 96 06 F6 | 	mov	arg03, #2
30c8c     6C E1 BF FD | 	call	#_fatfs_cc_mount_volume
30c90     3D A7 0A F6 | 	mov	local01, result1 wz
30c94     68 02 90 5D |  if_ne	jmp	#LR__5222
30c98     70 CE 05 F1 | 	add	fp, #112
30c9c     E7 A8 02 FB | 	rdlong	local02, fp
30ca0     60 CE 85 F1 | 	sub	fp, #96
30ca4     E7 A8 62 FC | 	wrlong	local02, fp
30ca8     E7 92 02 F6 | 	mov	arg01, fp
30cac     0C CE 85 F1 | 	sub	fp, #12
30cb0     E7 94 02 FB | 	rdlong	arg02, fp
30cb4     04 CE 85 F1 | 	sub	fp, #4
30cb8     A4 DC BF FD | 	call	#_fatfs_cc_follow_path
30cbc     3D A7 0A F6 | 	mov	local01, result1 wz
30cc0     14 00 90 5D |  if_ne	jmp	#LR__5210
30cc4     3B CE 05 F1 | 	add	fp, #59
30cc8     E7 A8 C2 FA | 	rdbyte	local02, fp
30ccc     3B CE 85 F1 | 	sub	fp, #59
30cd0     A0 A8 CE F7 | 	test	local02, #160 wz
30cd4     06 A6 06 56 |  if_ne	mov	local01, #6
30cd8                 | LR__5210
30cd8     00 A6 0E F2 | 	cmp	local01, #0 wz
30cdc     20 02 90 5D |  if_ne	jmp	#LR__5221
30ce0     74 CE 05 F1 | 	add	fp, #116
30ce4     E7 92 02 F6 | 	mov	arg01, fp
30ce8     48 CE 85 F1 | 	sub	fp, #72
30cec     E7 94 02 FB | 	rdlong	arg02, fp
30cf0     2C CE 85 F1 | 	sub	fp, #44
30cf4     20 96 06 F6 | 	mov	arg03, #32
30cf8     44 39 BF FD | 	call	#__system____builtin_memmove
30cfc     40 CE 05 F1 | 	add	fp, #64
30d00     E7 92 02 F6 | 	mov	arg01, fp
30d04     30 CE 85 F1 | 	sub	fp, #48
30d08     E7 94 02 F6 | 	mov	arg02, fp
30d0c     10 CE 85 F1 | 	sub	fp, #16
30d10     30 96 06 F6 | 	mov	arg03, #48
30d14     28 39 BF FD | 	call	#__system____builtin_memmove
30d18     40 CE 05 F1 | 	add	fp, #64
30d1c     E7 92 02 F6 | 	mov	arg01, fp
30d20     38 CE 85 F1 | 	sub	fp, #56
30d24     E7 94 02 FB | 	rdlong	arg02, fp
30d28     08 CE 85 F1 | 	sub	fp, #8
30d2c     30 DC BF FD | 	call	#_fatfs_cc_follow_path
30d30     3D A7 0A F6 | 	mov	local01, result1 wz
30d34     44 00 90 5D |  if_ne	jmp	#LR__5213
30d38     48 CE 05 F1 | 	add	fp, #72
30d3c     E7 A6 02 FB | 	rdlong	local01, fp
30d40     30 CE 85 F1 | 	sub	fp, #48
30d44     E7 7A 02 FB | 	rdlong	result1, fp
30d48     18 CE 85 F1 | 	sub	fp, #24
30d4c     3D A7 0A F2 | 	cmp	local01, result1 wz
30d50     20 00 90 5D |  if_ne	jmp	#LR__5211
30d54     50 CE 05 F1 | 	add	fp, #80
30d58     E7 A6 02 FB | 	rdlong	local01, fp
30d5c     30 CE 85 F1 | 	sub	fp, #48
30d60     E7 7A 02 FB | 	rdlong	result1, fp
30d64     20 CE 85 F1 | 	sub	fp, #32
30d68     3D A7 0A F2 | 	cmp	local01, result1 wz
30d6c     04 A8 06 A6 |  if_e	mov	local02, #4
30d70     04 00 90 AD |  if_e	jmp	#LR__5212
30d74                 | LR__5211
30d74     08 A8 06 F6 | 	mov	local02, #8
30d78                 | LR__5212
30d78     54 A7 02 F6 | 	mov	local01, local02
30d7c                 | LR__5213
30d7c     04 A6 0E F2 | 	cmp	local01, #4 wz
30d80     4C 01 90 5D |  if_ne	jmp	#LR__5218
30d84     E7 92 02 F6 | 	mov	arg01, fp
30d88     40 92 06 F1 | 	add	arg01, #64
30d8c     F4 CF BF FD | 	call	#_fatfs_cc_dir_register
30d90     3D A7 0A F6 | 	mov	local01, result1 wz
30d94     38 01 90 5D |  if_ne	jmp	#LR__5217
30d98     5C CE 05 F1 | 	add	fp, #92
30d9c     E7 AA 02 FB | 	rdlong	local03, fp
30da0     55 93 02 F6 | 	mov	arg01, local03
30da4     0D 92 06 F1 | 	add	arg01, #13
30da8     18 CE 05 F1 | 	add	fp, #24
30dac     E7 94 02 F6 | 	mov	arg02, fp
30db0     74 CE 85 F1 | 	sub	fp, #116
30db4     0D 94 06 F1 | 	add	arg02, #13
30db8     13 96 06 F6 | 	mov	arg03, #19
30dbc     80 38 BF FD | 	call	#__system____builtin_memmove
30dc0     7F CE 05 F1 | 	add	fp, #127
30dc4     E7 A8 C2 FA | 	rdbyte	local02, fp
30dc8     0B AA 06 F1 | 	add	local03, #11
30dcc     55 A9 42 FC | 	wrbyte	local02, local03
30dd0     54 A9 E2 F8 | 	getbyte	local02, local02, #0
30dd4     0B AA 86 F1 | 	sub	local03, #11
30dd8     10 A8 CE F7 | 	test	local02, #16 wz
30ddc     0B AA 06 A1 |  if_e	add	local03, #11
30de0     55 A9 C2 AA |  if_e	rdbyte	local02, local03
30de4     20 A8 46 A5 |  if_e	or	local02, #32
30de8     55 A9 42 AC |  if_e	wrbyte	local02, local03
30dec     0B AA 86 A1 |  if_e	sub	local03, #11
30df0     0F CE 85 F1 | 	sub	fp, #15
30df4     E7 A8 02 FB | 	rdlong	local02, fp
30df8     70 CE 85 F1 | 	sub	fp, #112
30dfc     03 A8 06 F1 | 	add	local02, #3
30e00     54 03 48 FC | 	wrbyte	#1, local02
30e04     0B AA 06 F1 | 	add	local03, #11
30e08     55 A9 C2 FA | 	rdbyte	local02, local03
30e0c     0B AA 86 F1 | 	sub	local03, #11
30e10     10 A8 CE F7 | 	test	local02, #16 wz
30e14     B8 00 90 AD |  if_e	jmp	#LR__5216
30e18     18 CE 05 F1 | 	add	fp, #24
30e1c     E7 A8 02 FB | 	rdlong	local02, fp
30e20     30 CE 05 F1 | 	add	fp, #48
30e24     E7 96 02 FB | 	rdlong	arg03, fp
30e28     48 CE 85 F1 | 	sub	fp, #72
30e2c     4B A9 0A F2 | 	cmp	local02, arg03 wz
30e30     9C 00 90 AD |  if_e	jmp	#LR__5216
30e34     70 CE 05 F1 | 	add	fp, #112
30e38     E7 92 02 FB | 	rdlong	arg01, fp
30e3c     49 A9 02 F6 | 	mov	local02, arg01
30e40     70 CE 85 F1 | 	sub	fp, #112
30e44     55 95 02 F6 | 	mov	arg02, local03
30e48     2C C6 BF FD | 	call	#_fatfs_cc_ld_clust
30e4c     3D 95 02 F6 | 	mov	arg02, result1
30e50     54 93 02 F6 | 	mov	arg01, local02
30e54     60 BA BF FD | 	call	#_fatfs_cc_clst2sect
30e58     3D AB 0A F6 | 	mov	local03, result1 wz
30e5c     02 A6 06 A6 |  if_e	mov	local01, #2
30e60     6C 00 90 AD |  if_e	jmp	#LR__5215
30e64     70 CE 05 F1 | 	add	fp, #112
30e68     E7 92 02 FB | 	rdlong	arg01, fp
30e6c     70 CE 85 F1 | 	sub	fp, #112
30e70     55 95 02 F6 | 	mov	arg02, local03
30e74     C8 B8 BF FD | 	call	#_fatfs_cc_move_window
30e78     3D A7 0A F6 | 	mov	local01, result1 wz
30e7c     70 CE 05 F1 | 	add	fp, #112
30e80     E7 AA 02 FB | 	rdlong	local03, fp
30e84     70 CE 85 F1 | 	sub	fp, #112
30e88     54 AA 06 F1 | 	add	local03, #84
30e8c     01 AA 06 A1 |  if_e	add	local03, #1
30e90     55 A9 C2 AA |  if_e	rdbyte	local02, local03
30e94     01 AA 86 A1 |  if_e	sub	local03, #1
30e98     2E A8 0E A2 |  if_e	cmp	local02, #46 wz
30e9c     30 00 90 5D |  if_ne	jmp	#LR__5214
30ea0     70 CE 05 F1 | 	add	fp, #112
30ea4     E7 92 02 FB | 	rdlong	arg01, fp
30ea8     28 CE 85 F1 | 	sub	fp, #40
30eac     E7 96 02 FB | 	rdlong	arg03, fp
30eb0     48 CE 85 F1 | 	sub	fp, #72
30eb4     55 95 02 F6 | 	mov	arg02, local03
30eb8     F0 C5 BF FD | 	call	#_fatfs_cc_st_clust
30ebc     70 CE 05 F1 | 	add	fp, #112
30ec0     E7 A8 02 FB | 	rdlong	local02, fp
30ec4     70 CE 85 F1 | 	sub	fp, #112
30ec8     03 A8 06 F1 | 	add	local02, #3
30ecc     54 03 48 FC | 	wrbyte	#1, local02
30ed0                 | LR__5214
30ed0                 | LR__5215
30ed0                 | LR__5216
30ed0                 | LR__5217
30ed0                 | LR__5218
30ed0     00 A6 0E F2 | 	cmp	local01, #0 wz
30ed4     28 00 90 5D |  if_ne	jmp	#LR__5220
30ed8     E7 92 02 F6 | 	mov	arg01, fp
30edc     10 92 06 F1 | 	add	arg01, #16
30ee0     04 D1 BF FD | 	call	#_fatfs_cc_dir_remove
30ee4     3D A7 0A F6 | 	mov	local01, result1 wz
30ee8     14 00 90 5D |  if_ne	jmp	#LR__5219
30eec     70 CE 05 F1 | 	add	fp, #112
30ef0     E7 92 02 FB | 	rdlong	arg01, fp
30ef4     70 CE 85 F1 | 	sub	fp, #112
30ef8     BC B8 BF FD | 	call	#_fatfs_cc_sync_fs
30efc     3D A7 02 F6 | 	mov	local01, result1
30f00                 | LR__5219
30f00                 | LR__5220
30f00                 | LR__5221
30f00                 | LR__5222
30f00                 | ' 					res = sync_fs(fs);
30f00                 | ' 				}
30f00                 | ' 			}
30f00                 | ' 
30f00                 | ' 		}
30f00                 | ' 		;
30f00                 | ' 	}
30f00                 | ' 
30f00                 | ' 	return res ;
30f00     53 7B 02 F6 | 	mov	result1, local01
30f04     E7 F0 03 F6 | 	mov	ptra, fp
30f08     F2 00 A0 FD | 	call	#popregs_
30f0c                 | _fatfs_cc_f_rename_ret
30f0c     2D 00 64 FD | 	ret
30f10                 | 
30f10                 | _fatfs_cc___default_flush
30f10     07 CA 05 F6 | 	mov	COUNT_, #7
30f14     E8 00 A0 FD | 	call	#pushregs_
30f18     49 A7 02 F6 | 	mov	local01, arg01
30f1c     53 A9 02 FB | 	rdlong	local02, local01
30f20     54 AB 02 FB | 	rdlong	local03, local02
30f24     08 A6 06 F1 | 	add	local01, #8
30f28     53 7D 02 FB | 	rdlong	result2, local01
30f2c     08 A6 86 F1 | 	sub	local01, #8
30f30     08 7C CE F7 | 	test	result2, #8 wz
30f34     D4 00 90 AD |  if_e	jmp	#LR__5232
30f38     01 AA 56 F2 | 	cmps	local03, #1 wc
30f3c     2C 01 90 CD |  if_b	jmp	#LR__5234
30f40     08 A6 06 F1 | 	add	local01, #8
30f44     53 7D 02 FB | 	rdlong	result2, local01
30f48     08 A6 86 F1 | 	sub	local01, #8
30f4c     80 7C CE F7 | 	test	result2, #128 wz
30f50     6C 00 90 AD |  if_e	jmp	#LR__5231
30f54     08 A6 06 F1 | 	add	local01, #8
30f58     53 97 02 FB | 	rdlong	arg03, local01
30f5c     08 A6 86 F1 | 	sub	local01, #8
30f60     00 97 CE F7 | 	test	arg03, #256 wz
30f64     58 00 90 AD |  if_e	jmp	#LR__5230
30f68     30 A6 06 F1 | 	add	local01, #48
30f6c     53 AD 02 FB | 	rdlong	local04, local01
30f70     56 AF 02 F6 | 	mov	local05, local04
30f74     30 A6 86 F1 | 	sub	local01, #48
30f78     13 AE 46 F7 | 	zerox	local05, #19
30f7c     14 AC 46 F0 | 	shr	local04, #20
30f80     02 AC 66 F0 | 	shl	local04, #2
30f84     2D AD 02 F1 | 	add	local04, __methods__
30f88     56 AD 02 FB | 	rdlong	local04, local04
30f8c     53 93 02 F6 | 	mov	arg01, local01
30f90     00 94 06 F6 | 	mov	arg02, #0
30f94     00 96 06 F6 | 	mov	arg03, #0
30f98     02 98 06 F6 | 	mov	arg04, #2
30f9c     32 B1 02 F6 | 	mov	local06, objptr
30fa0     57 65 02 F6 | 	mov	objptr, local05
30fa4     2D AC 62 FD | 	call	local04
30fa8     58 65 02 F6 | 	mov	objptr, local06
30fac     08 A6 06 F1 | 	add	local01, #8
30fb0     53 B1 02 FB | 	rdlong	local06, local01
30fb4     00 B1 26 F5 | 	andn	local06, #256
30fb8     53 B1 62 FC | 	wrlong	local06, local01
30fbc     08 A6 86 F1 | 	sub	local01, #8
30fc0                 | LR__5230
30fc0                 | LR__5231
30fc0     18 A6 06 F1 | 	add	local01, #24
30fc4     53 AD 02 FB | 	rdlong	local04, local01
30fc8     56 AF 02 F6 | 	mov	local05, local04
30fcc     18 A6 86 F1 | 	sub	local01, #24
30fd0     13 AE 46 F7 | 	zerox	local05, #19
30fd4     14 AC 46 F0 | 	shr	local04, #20
30fd8     02 AC 66 F0 | 	shl	local04, #2
30fdc     2D AD 02 F1 | 	add	local04, __methods__
30fe0     56 AD 02 FB | 	rdlong	local04, local04
30fe4     0C A8 06 F1 | 	add	local02, #12
30fe8     54 95 02 FB | 	rdlong	arg02, local02
30fec     0C A8 86 F1 | 	sub	local02, #12
30ff0     53 93 02 F6 | 	mov	arg01, local01
30ff4     55 97 02 F6 | 	mov	arg03, local03
30ff8     32 B1 02 F6 | 	mov	local06, objptr
30ffc     57 65 02 F6 | 	mov	objptr, local05
31000     2D AC 62 FD | 	call	local04
31004     58 65 02 F6 | 	mov	objptr, local06
31008     60 00 90 FD | 	jmp	#LR__5234
3100c                 | LR__5232
3100c     08 A6 06 F1 | 	add	local01, #8
31010     53 B1 02 FB | 	rdlong	local06, local01
31014     08 A6 86 F1 | 	sub	local01, #8
31018     04 B0 CE F7 | 	test	local06, #4 wz
3101c     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
31020     48 00 90 AD |  if_e	jmp	#LR__5233
31024     55 95 62 F6 | 	neg	arg02, local03
31028     4A 97 02 F6 | 	mov	arg03, arg02
3102c     1F 96 C6 F0 | 	sar	arg03, #31
31030     30 A6 06 F1 | 	add	local01, #48
31034     53 AD 02 FB | 	rdlong	local04, local01
31038     56 AF 02 F6 | 	mov	local05, local04
3103c     30 A6 86 F1 | 	sub	local01, #48
31040     13 AE 46 F7 | 	zerox	local05, #19
31044     14 AC 46 F0 | 	shr	local04, #20
31048     02 AC 66 F0 | 	shl	local04, #2
3104c     2D AD 02 F1 | 	add	local04, __methods__
31050     56 AD 02 FB | 	rdlong	local04, local04
31054     53 93 02 F6 | 	mov	arg01, local01
31058     01 98 06 F6 | 	mov	arg04, #1
3105c     32 B1 02 F6 | 	mov	local06, objptr
31060     57 65 02 F6 | 	mov	objptr, local05
31064     2D AC 62 FD | 	call	local04
31068     58 65 02 F6 | 	mov	objptr, local06
3106c                 | LR__5233
3106c                 | LR__5234
3106c     54 01 68 FC | 	wrlong	#0, local02
31070     04 A8 06 F1 | 	add	local02, #4
31074     54 01 68 FC | 	wrlong	#0, local02
31078     08 A6 06 F1 | 	add	local01, #8
3107c     53 B3 02 FB | 	rdlong	local07, local01
31080     0C B2 26 F5 | 	andn	local07, #12
31084     53 B3 62 FC | 	wrlong	local07, local01
31088                 | '     }
31088                 | '     b->cnt = 0;
31088                 | '     b->ptr = 0;
31088                 | '     f->state &= ~( (0x08) | (0x04) );
31088                 | '     return 0;
31088     00 7A 06 F6 | 	mov	result1, #0
3108c     E7 F0 03 F6 | 	mov	ptra, fp
31090     F2 00 A0 FD | 	call	#popregs_
31094                 | _fatfs_cc___default_flush_ret
31094     2D 00 64 FD | 	ret
31098                 | 
31098                 | _fatfs_cc_getenv
31098     06 CA 05 F6 | 	mov	COUNT_, #6
3109c     E8 00 A0 FD | 	call	#pushregs_
310a0     49 A7 02 F6 | 	mov	local01, arg01
310a4     49 A9 02 F6 | 	mov	local02, arg01
310a8     D7 06 48 FB | 	callpa	#(@LR__5241-@LR__5240)>>2,fcache_load_ptr_
310ac                 | LR__5240
310ac     54 7B CA FA | 	rdbyte	result1, local02 wz
310b0     01 A8 06 51 |  if_ne	add	local02, #1
310b4     F4 FF 9F 5D |  if_ne	jmp	#LR__5240
310b8                 | LR__5241
310b8     49 A9 82 F1 | 	sub	local02, arg01
310bc     54 7B 02 F6 | 	mov	result1, local02
310c0     02 00 00 FF 
310c4     FC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
310c8     36 97 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
310cc     02 00 00 FF 
310d0     FC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
310d4                 | '             return 0;
310d4     00 7A 06 A6 |  if_e	mov	result1, #0
310d8     5C 00 90 AD |  if_e	jmp	#LR__5244
310dc                 | ' 
310dc                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
310dc     02 00 00 FF 
310e0     FC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
310e4     36 AB 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
310e8     02 00 00 FF 
310ec     FC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
310f0                 | LR__5242
310f0     55 AD 0A FB | 	rdlong	local04, local03 wz
310f4     3C 00 90 AD |  if_e	jmp	#LR__5243
310f8     56 93 02 F6 | 	mov	arg01, local04
310fc     53 95 02 F6 | 	mov	arg02, local01
31100     54 97 02 F6 | 	mov	arg03, local02
31104     24 AB BF FD | 	call	#_fatfs_cc_strncmp
31108     00 7A 0E F2 | 	cmp	result1, #0 wz
3110c     54 AF 02 A6 |  if_e	mov	local05, local02
31110     56 AF 02 A1 |  if_e	add	local05, local04
31114     57 B1 C2 AA |  if_e	rdbyte	local06, local05
31118     3D B0 0E A2 |  if_e	cmp	local06, #61 wz
3111c                 | ' 			return name+len+1;
3111c     54 AD 02 A1 |  if_e	add	local04, local02
31120     01 AC 06 A1 |  if_e	add	local04, #1
31124     56 7B 02 A6 |  if_e	mov	result1, local04
31128     0C 00 90 AD |  if_e	jmp	#LR__5244
3112c     04 AA 06 F1 | 	add	local03, #4
31130     BC FF 9F FD | 	jmp	#LR__5242
31134                 | LR__5243
31134                 | ' 	}
31134                 | ' 	return 0;
31134     00 7A 06 F6 | 	mov	result1, #0
31138                 | LR__5244
31138     E7 F0 03 F6 | 	mov	ptra, fp
3113c     F2 00 A0 FD | 	call	#popregs_
31140                 | _fatfs_cc_getenv_ret
31140     2D 00 64 FD | 	ret
31144                 | 
31144                 | _fatfs_cc__get_fattime
31144     00 CA 05 F6 | 	mov	COUNT_, #0
31148     E8 00 A0 FD | 	call	#pushregs_
3114c     34 F0 07 F1 | 	add	ptra, #52
31150     00 92 06 F6 | 	mov	arg01, #0
31154     A4 AB BF FD | 	call	#_fatfs_cc_time
31158     04 CE 05 F1 | 	add	fp, #4
3115c     E7 7A 62 FC | 	wrlong	result1, fp
31160     E7 92 02 F6 | 	mov	arg01, fp
31164     0C CE 05 F1 | 	add	fp, #12
31168     E7 94 02 F6 | 	mov	arg02, fp
3116c     10 CE 85 F1 | 	sub	fp, #16
31170     70 AD BF FD | 	call	#_fatfs_cc__gmtime_r
31174     24 CE 05 F1 | 	add	fp, #36
31178     E7 7A 02 FB | 	rdlong	result1, fp
3117c     50 7A 86 F1 | 	sub	result1, #80
31180     09 7A 66 F0 | 	shl	result1, #9
31184     04 CE 85 F1 | 	sub	fp, #4
31188     E7 94 02 FB | 	rdlong	arg02, fp
3118c     01 94 06 F1 | 	add	arg02, #1
31190     05 94 66 F0 | 	shl	arg02, #5
31194     4A 7B 42 F5 | 	or	result1, arg02
31198     04 CE 85 F1 | 	sub	fp, #4
3119c     E7 94 02 FB | 	rdlong	arg02, fp
311a0     4A 7B 42 F5 | 	or	result1, arg02
311a4     04 CE 85 F1 | 	sub	fp, #4
311a8     E7 94 02 FB | 	rdlong	arg02, fp
311ac     0B 94 66 F0 | 	shl	arg02, #11
311b0     04 CE 85 F1 | 	sub	fp, #4
311b4     E7 92 02 FB | 	rdlong	arg01, fp
311b8     05 92 66 F0 | 	shl	arg01, #5
311bc     49 95 42 F5 | 	or	arg02, arg01
311c0     04 CE 85 F1 | 	sub	fp, #4
311c4     E7 92 02 FB | 	rdlong	arg01, fp
311c8     10 CE 85 F1 | 	sub	fp, #16
311cc     49 95 42 F5 | 	or	arg02, arg01
311d0                 | ' 
311d0                 | '     now = time(0);
311d0                 | '     _gmtime_r (&now, &date);
311d0                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
311d0                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
311d0                 | '     return (ffdate << 16) | fftime;
311d0     10 7A 66 F0 | 	shl	result1, #16
311d4     4A 7B 42 F5 | 	or	result1, arg02
311d8     E7 F0 03 F6 | 	mov	ptra, fp
311dc     F2 00 A0 FD | 	call	#popregs_
311e0                 | _fatfs_cc__get_fattime_ret
311e0     2D 00 64 FD | 	ret
311e4                 | 
311e4                 | _fatfs_cc_unixtime_1154
311e4     02 CA 05 F6 | 	mov	COUNT_, #2
311e8     E8 00 A0 FD | 	call	#pushregs_
311ec     34 F0 07 F1 | 	add	ptra, #52
311f0     49 A7 02 F6 | 	mov	local01, arg01
311f4     09 A6 46 F0 | 	shr	local01, #9
311f8     7F A6 06 F5 | 	and	local01, #127
311fc     50 A8 06 F6 | 	mov	local02, #80
31200     53 A9 02 F1 | 	add	local02, local01
31204     24 CE 05 F1 | 	add	fp, #36
31208     E7 A8 62 FC | 	wrlong	local02, fp
3120c     49 A9 02 F6 | 	mov	local02, arg01
31210     05 A8 46 F0 | 	shr	local02, #5
31214     54 A9 42 F8 | 	getnib	local02, local02, #0
31218     01 A8 86 F1 | 	sub	local02, #1
3121c     04 CE 85 F1 | 	sub	fp, #4
31220     E7 A8 62 FC | 	wrlong	local02, fp
31224     1F 92 06 F5 | 	and	arg01, #31
31228     04 CE 85 F1 | 	sub	fp, #4
3122c     E7 92 62 FC | 	wrlong	arg01, fp
31230     4A A9 02 F6 | 	mov	local02, arg02
31234     0B A8 46 F0 | 	shr	local02, #11
31238     1F A8 06 F5 | 	and	local02, #31
3123c     04 CE 85 F1 | 	sub	fp, #4
31240     E7 A8 62 FC | 	wrlong	local02, fp
31244     4A A9 02 F6 | 	mov	local02, arg02
31248     05 A8 46 F0 | 	shr	local02, #5
3124c     3F A8 06 F5 | 	and	local02, #63
31250     04 CE 85 F1 | 	sub	fp, #4
31254     E7 A8 62 FC | 	wrlong	local02, fp
31258     1F 94 06 F5 | 	and	arg02, #31
3125c     01 94 66 F0 | 	shl	arg02, #1
31260     04 CE 85 F1 | 	sub	fp, #4
31264     E7 94 62 FC | 	wrlong	arg02, fp
31268     E7 92 02 F6 | 	mov	arg01, fp
3126c     10 CE 85 F1 | 	sub	fp, #16
31270     C8 AA BF FD | 	call	#_fatfs_cc_mktime
31274                 | ' 
31274                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
31274                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
31274                 | '     date.tm_mday = (dosdate & 0x1f);
31274                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
31274                 | '     date.tm_min = (dostime >> 5) & 0x3f;
31274                 | '     date.tm_sec = (dostime & 0x1f) << 1;
31274                 | ' 
31274                 | '     t = mktime(&date);
31274                 | ' #line 66 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
31274                 | '     return t;
31274     E7 F0 03 F6 | 	mov	ptra, fp
31278     F2 00 A0 FD | 	call	#popregs_
3127c                 | _fatfs_cc_unixtime_1154_ret
3127c     2D 00 64 FD | 	ret
31280                 | 
31280                 | _fatfs_cc__set_dos_error_1156
31280     49 81 02 F6 | 	mov	_var01, arg01
31284                 | ' #line 82 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
31284                 | '     switch (derr) {
31284     14 80 26 F3 | 	fle	_var01, #20
31288     30 80 62 FD | 	jmprel	_var01
3128c                 | LR__5250
3128c     50 00 90 FD | 	jmp	#LR__5251
31290     84 00 90 FD | 	jmp	#LR__5265
31294     80 00 90 FD | 	jmp	#LR__5266
31298     7C 00 90 FD | 	jmp	#LR__5267
3129c     48 00 90 FD | 	jmp	#LR__5252
312a0     44 00 90 FD | 	jmp	#LR__5253
312a4     40 00 90 FD | 	jmp	#LR__5254
312a8     44 00 90 FD | 	jmp	#LR__5255
312ac     48 00 90 FD | 	jmp	#LR__5257
312b0     54 00 90 FD | 	jmp	#LR__5260
312b4     38 00 90 FD | 	jmp	#LR__5256
312b8     4C 00 90 FD | 	jmp	#LR__5261
312bc     48 00 90 FD | 	jmp	#LR__5262
312c0     44 00 90 FD | 	jmp	#LR__5263
312c4     50 00 90 FD | 	jmp	#LR__5268
312c8     4C 00 90 FD | 	jmp	#LR__5268
312cc     48 00 90 FD | 	jmp	#LR__5268
312d0     2C 00 90 FD | 	jmp	#LR__5258
312d4     38 00 90 FD | 	jmp	#LR__5264
312d8     2C 00 90 FD | 	jmp	#LR__5259
312dc     38 00 90 FD | 	jmp	#LR__5268
312e0                 | LR__5251
312e0     00 82 06 F6 | 	mov	_var02, #0
312e4                 | '         r = 0;
312e4                 | '         break;
312e4     34 00 90 FD | 	jmp	#LR__5269
312e8                 | LR__5252
312e8                 | LR__5253
312e8                 | LR__5254
312e8     04 82 06 F6 | 	mov	_var02, #4
312ec                 | '         r =  4 ;
312ec                 | '         break;
312ec     2C 00 90 FD | 	jmp	#LR__5269
312f0                 | LR__5255
312f0                 | LR__5256
312f0     06 82 06 F6 | 	mov	_var02, #6
312f4                 | '         r =  6 ;
312f4                 | '         break;
312f4     24 00 90 FD | 	jmp	#LR__5269
312f8                 | LR__5257
312f8     09 82 06 F6 | 	mov	_var02, #9
312fc                 | '         r =  9 ;
312fc                 | '         break;
312fc     1C 00 90 FD | 	jmp	#LR__5269
31300                 | LR__5258
31300     07 82 06 F6 | 	mov	_var02, #7
31304                 | '         r =  7 ;
31304                 | '         break;
31304     14 00 90 FD | 	jmp	#LR__5269
31308                 | LR__5259
31308                 | LR__5260
31308                 | LR__5261
31308                 | LR__5262
31308                 | LR__5263
31308     0A 82 06 F6 | 	mov	_var02, #10
3130c                 | '         r =  10 ;
3130c                 | '         break;
3130c     0C 00 90 FD | 	jmp	#LR__5269
31310                 | LR__5264
31310     0B 82 06 F6 | 	mov	_var02, #11
31314                 | '         r =  11 ;
31314                 | '         break;
31314     04 00 90 FD | 	jmp	#LR__5269
31318                 | LR__5265
31318                 | LR__5266
31318                 | LR__5267
31318                 | LR__5268
31318     0C 82 06 F6 | 	mov	_var02, #12
3131c                 | '         r =  12 ;
3131c                 | '         break;
3131c                 | LR__5269
3131c                 | '     }
3131c                 | '     return _seterror(r);
3131c     00 82 4E F2 | 	cmps	_var02, #0 wz
31320     20 68 06 F1 | 	add	ptr___system__dat__, #32
31324     34 83 62 FC | 	wrlong	_var02, ptr___system__dat__
31328     20 68 86 F1 | 	sub	ptr___system__dat__, #32
3132c     01 7A 66 56 |  if_ne	neg	result1, #1
31330     00 7A 06 A6 |  if_e	mov	result1, #0
31334                 | _fatfs_cc__set_dos_error_1156_ret
31334     2D 00 64 FD | 	ret
31338                 | 
31338                 | _fatfs_cc_v_creat
31338     04 CA 05 F6 | 	mov	COUNT_, #4
3133c     E8 00 A0 FD | 	call	#pushregs_
31340     49 A7 02 F6 | 	mov	local01, arg01
31344     4A A9 02 F6 | 	mov	local02, arg02
31348     03 00 00 FF 
3134c     38 92 06 F6 | 	mov	arg01, ##1592
31350                 | '     return _gc_alloc(size);
31350     10 94 06 F6 | 	mov	arg02, #16
31354     70 6E BF FD | 	call	#__system___gc_doalloc
31358     3D AB 0A F6 | 	mov	local03, result1 wz
3135c                 | '       return _seterror( 7 );
3135c     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31360     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
31364     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31368     01 7A 66 A6 |  if_e	neg	result1, #1
3136c     50 00 90 AD |  if_e	jmp	#LR__5271
31370     55 93 02 F6 | 	mov	arg01, local03
31374     00 94 06 F6 | 	mov	arg02, #0
31378     03 00 00 FF 
3137c     38 96 06 F6 | 	mov	arg03, ##1592
31380     D8 00 A0 FD | 	call	#\builtin_bytefill_
31384     55 93 02 F6 | 	mov	arg01, local03
31388     02 00 00 FF 
3138c     10 92 06 F1 | 	add	arg01, ##1040
31390     54 95 02 F6 | 	mov	arg02, local02
31394     07 96 06 F6 | 	mov	arg03, #7
31398     D8 E0 BF FD | 	call	#_fatfs_cc_f_open
3139c     3D AD 0A F6 | 	mov	local04, result1 wz
313a0     14 00 90 AD |  if_e	jmp	#LR__5270
313a4     55 93 02 F6 | 	mov	arg01, local03
313a8                 | '     return _gc_free(ptr);
313a8     20 6F BF FD | 	call	#__system___gc_free
313ac                 | '     free(f);
313ac                 | '     return _set_dos_error(r);
313ac     56 93 02 F6 | 	mov	arg01, local04
313b0     CC FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
313b4     08 00 90 FD | 	jmp	#LR__5271
313b8                 | LR__5270
313b8     53 AB 62 FC | 	wrlong	local03, local01
313bc                 | '   }
313bc                 | '   fil->vfsdata = f;
313bc                 | '   return 0;
313bc     00 7A 06 F6 | 	mov	result1, #0
313c0                 | LR__5271
313c0     E7 F0 03 F6 | 	mov	ptra, fp
313c4     F2 00 A0 FD | 	call	#popregs_
313c8                 | _fatfs_cc_v_creat_ret
313c8     2D 00 64 FD | 	ret
313cc                 | 
313cc                 | _fatfs_cc_v_close
313cc     02 CA 05 F6 | 	mov	COUNT_, #2
313d0     E8 00 A0 FD | 	call	#pushregs_
313d4     49 A7 02 FB | 	rdlong	local01, arg01
313d8     53 93 02 F6 | 	mov	arg01, local01
313dc     02 00 00 FF 
313e0     10 92 06 F1 | 	add	arg01, ##1040
313e4     34 EE BF FD | 	call	#_fatfs_cc_f_close
313e8     3D A9 02 F6 | 	mov	local02, result1
313ec     53 93 02 F6 | 	mov	arg01, local01
313f0                 | '     return _gc_free(ptr);
313f0     D8 6E BF FD | 	call	#__system___gc_free
313f4                 | '     FAT_FIL *f = fil->vfsdata;
313f4                 | '     r=f_close(&f->fil);
313f4                 | '     free(f);
313f4                 | '     return _set_dos_error(r);
313f4     54 93 02 F6 | 	mov	arg01, local02
313f8     84 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
313fc     E7 F0 03 F6 | 	mov	ptra, fp
31400     F2 00 A0 FD | 	call	#popregs_
31404                 | _fatfs_cc_v_close_ret
31404     2D 00 64 FD | 	ret
31408                 | 
31408                 | _fatfs_cc_v_opendir
31408     04 CA 05 F6 | 	mov	COUNT_, #4
3140c     E8 00 A0 FD | 	call	#pushregs_
31410     49 A7 02 F6 | 	mov	local01, arg01
31414     4A A9 02 F6 | 	mov	local02, arg02
31418     30 92 06 F6 | 	mov	arg01, #48
3141c                 | '     return _gc_alloc(size);
3141c     10 94 06 F6 | 	mov	arg02, #16
31420     A4 6D BF FD | 	call	#__system___gc_doalloc
31424     3D AB 0A F6 | 	mov	local03, result1 wz
31428                 | ' #line 166 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
31428                 | '       return _seterror( 7 );
31428     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
3142c     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
31430     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31434     01 7A 66 A6 |  if_e	neg	result1, #1
31438     34 00 90 AD |  if_e	jmp	#LR__5281
3143c     54 95 02 F6 | 	mov	arg02, local02
31440     55 93 02 F6 | 	mov	arg01, local03
31444     C0 F1 BF FD | 	call	#_fatfs_cc_f_opendir
31448     3D AD 0A F6 | 	mov	local04, result1 wz
3144c     14 00 90 AD |  if_e	jmp	#LR__5280
31450     55 93 02 F6 | 	mov	arg01, local03
31454                 | '     return _gc_free(ptr);
31454     74 6E BF FD | 	call	#__system___gc_free
31458                 | '         free(f);
31458                 | '         return _set_dos_error(r);
31458     56 93 02 F6 | 	mov	arg01, local04
3145c     20 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31460     0C 00 90 FD | 	jmp	#LR__5281
31464                 | LR__5280
31464     04 A6 06 F1 | 	add	local01, #4
31468     53 AB 62 FC | 	wrlong	local03, local01
3146c                 | '     }
3146c                 | '     dir->vfsdata = f;
3146c                 | '     return 0;
3146c     00 7A 06 F6 | 	mov	result1, #0
31470                 | LR__5281
31470     E7 F0 03 F6 | 	mov	ptra, fp
31474     F2 00 A0 FD | 	call	#popregs_
31478                 | _fatfs_cc_v_opendir_ret
31478     2D 00 64 FD | 	ret
3147c                 | 
3147c                 | _fatfs_cc_v_closedir
3147c     02 CA 05 F6 | 	mov	COUNT_, #2
31480     E8 00 A0 FD | 	call	#pushregs_
31484     04 92 06 F1 | 	add	arg01, #4
31488     49 A7 02 FB | 	rdlong	local01, arg01
3148c     53 93 02 F6 | 	mov	arg01, local01
31490     90 F2 BF FD | 	call	#_fatfs_cc_f_closedir
31494     3D A9 02 F6 | 	mov	local02, result1
31498     53 93 02 F6 | 	mov	arg01, local01
3149c                 | '     return _gc_free(ptr);
3149c     2C 6E BF FD | 	call	#__system___gc_free
314a0     00 A8 0E F2 | 	cmp	local02, #0 wz
314a4     54 93 02 56 |  if_ne	mov	arg01, local02
314a8     D4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1156
314ac                 | '     return r;
314ac     54 7B 02 F6 | 	mov	result1, local02
314b0     E7 F0 03 F6 | 	mov	ptra, fp
314b4     F2 00 A0 FD | 	call	#popregs_
314b8                 | _fatfs_cc_v_closedir_ret
314b8     2D 00 64 FD | 	ret
314bc                 | 
314bc                 | _fatfs_cc_v_readdir
314bc     01 CA 05 F6 | 	mov	COUNT_, #1
314c0     E8 00 A0 FD | 	call	#pushregs_
314c4     2C F1 07 F1 | 	add	ptra, #300
314c8     4A A7 02 F6 | 	mov	local01, arg02
314cc     04 92 06 F1 | 	add	arg01, #4
314d0     49 93 02 FB | 	rdlong	arg01, arg01
314d4     E7 94 02 F6 | 	mov	arg02, fp
314d8     0C 94 06 F1 | 	add	arg02, #12
314dc     78 F2 BF FD | 	call	#_fatfs_cc_f_readdir
314e0     3D 97 0A F6 | 	mov	arg03, result1 wz
314e4     0C 00 90 AD |  if_e	jmp	#LR__5290
314e8                 | '         return _set_dos_error(r);
314e8     4B 93 02 F6 | 	mov	arg01, arg03
314ec     90 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1156
314f0     88 00 90 FD | 	jmp	#LR__5291
314f4                 | LR__5290
314f4     28 CE 05 F1 | 	add	fp, #40
314f8     E7 96 CA FA | 	rdbyte	arg03, fp wz
314fc     28 CE 85 F1 | 	sub	fp, #40
31500                 | '         return -1;
31500     01 7A 66 A6 |  if_e	neg	result1, #1
31504     74 00 90 AD |  if_e	jmp	#LR__5291
31508     E7 94 02 F6 | 	mov	arg02, fp
3150c     28 94 06 F1 | 	add	arg02, #40
31510     53 93 02 F6 | 	mov	arg01, local01
31514     3F 96 06 F6 | 	mov	arg03, #63
31518     7C A6 BF FD | 	call	#_fatfs_cc_strncpy
3151c     3F A6 06 F1 | 	add	local01, #63
31520     53 01 48 FC | 	wrbyte	#0, local01
31524     3F A6 86 F1 | 	sub	local01, #63
31528     14 CE 05 F1 | 	add	fp, #20
3152c     E7 96 C2 FA | 	rdbyte	arg03, fp
31530     10 96 CE F7 | 	test	arg03, #16 wz
31534     50 A6 06 51 |  if_ne	add	local01, #80
31538     53 03 48 5C |  if_ne	wrbyte	#1, local01
3153c     50 A6 E6 F3 | 	sumnz	local01, #80
31540     53 01 48 AC |  if_e	wrbyte	#0, local01
31544     50 A6 86 A1 |  if_e	sub	local01, #80
31548     08 CE 85 F1 | 	sub	fp, #8
3154c     E7 96 02 FB | 	rdlong	arg03, fp
31550     48 A6 06 F1 | 	add	local01, #72
31554     53 97 62 FC | 	wrlong	arg03, local01
31558     04 CE 05 F1 | 	add	fp, #4
3155c     E7 92 E2 FA | 	rdword	arg01, fp
31560     02 CE 05 F1 | 	add	fp, #2
31564     E7 94 E2 FA | 	rdword	arg02, fp
31568     12 CE 85 F1 | 	sub	fp, #18
3156c     74 FC BF FD | 	call	#_fatfs_cc_unixtime_1154
31570     04 A6 06 F1 | 	add	local01, #4
31574     53 7B 62 FC | 	wrlong	result1, local01
31578                 | '         ent->d_type =  (0) ;
31578                 | '     }
31578                 | '     ent->d_size = finfo.fsize;
31578                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
31578                 | '     return 0;
31578     00 7A 06 F6 | 	mov	result1, #0
3157c                 | LR__5291
3157c     E7 F0 03 F6 | 	mov	ptra, fp
31580     F2 00 A0 FD | 	call	#popregs_
31584                 | _fatfs_cc_v_readdir_ret
31584     2D 00 64 FD | 	ret
31588                 | 
31588                 | _fatfs_cc_v_stat
31588     05 CA 05 F6 | 	mov	COUNT_, #5
3158c     E8 00 A0 FD | 	call	#pushregs_
31590     30 F1 07 F1 | 	add	ptra, #304
31594     49 A7 02 F6 | 	mov	local01, arg01
31598     4A A9 02 F6 | 	mov	local02, arg02
3159c     54 93 02 F6 | 	mov	arg01, local02
315a0     00 94 06 F6 | 	mov	arg02, #0
315a4     34 96 06 F6 | 	mov	arg03, #52
315a8     D8 00 A0 FD | 	call	#\builtin_bytefill_
315ac     53 7D CA FA | 	rdbyte	result2, local01 wz
315b0     1C 00 90 AD |  if_e	jmp	#LR__5300
315b4     53 7D C2 FA | 	rdbyte	result2, local01
315b8     2E 7C 0E F2 | 	cmp	result2, #46 wz
315bc     01 A6 06 A1 |  if_e	add	local01, #1
315c0     53 AB C2 AA |  if_e	rdbyte	local03, local01
315c4     01 A6 86 A1 |  if_e	sub	local01, #1
315c8     00 AA 4E A2 |  if_e	cmps	local03, #0 wz
315cc     14 00 90 5D |  if_ne	jmp	#LR__5301
315d0                 | LR__5300
315d0     18 CE 05 F1 | 	add	fp, #24
315d4     E7 20 48 FC | 	wrbyte	#16, fp
315d8     18 CE 85 F1 | 	sub	fp, #24
315dc     00 AC 06 F6 | 	mov	local04, #0
315e0     14 00 90 FD | 	jmp	#LR__5302
315e4                 | LR__5301
315e4     E7 94 02 F6 | 	mov	arg02, fp
315e8     10 94 06 F1 | 	add	arg02, #16
315ec     53 93 02 F6 | 	mov	arg01, local01
315f0     00 F2 BF FD | 	call	#_fatfs_cc_f_stat
315f4     3D AD 02 F6 | 	mov	local04, result1
315f8                 | LR__5302
315f8     00 AC 0E F2 | 	cmp	local04, #0 wz
315fc     0C 00 90 AD |  if_e	jmp	#LR__5303
31600                 | '         return _set_dos_error(r);
31600     56 93 02 F6 | 	mov	arg01, local04
31604     78 FC BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31608     9C 00 90 FD | 	jmp	#LR__5304
3160c                 | LR__5303
3160c     24 AF 06 F6 | 	mov	local05, #292
31610     18 CE 05 F1 | 	add	fp, #24
31614     E7 AA C2 FA | 	rdbyte	local03, fp
31618     01 AA CE F7 | 	test	local03, #1 wz
3161c     B6 AF 06 A6 |  if_e	mov	local05, #438
31620     10 AA CE F7 | 	test	local03, #16 wz
31624     08 00 00 5F 
31628     49 AE 46 55 |  if_ne	or	local05, ##4169
3162c     08 A8 06 F1 | 	add	local02, #8
31630     54 AF 62 FC | 	wrlong	local05, local02
31634     04 A8 06 F1 | 	add	local02, #4
31638     54 03 68 FC | 	wrlong	#1, local02
3163c     08 CE 85 F1 | 	sub	fp, #8
31640     E7 7A 02 FB | 	rdlong	result1, fp
31644     0C A8 06 F1 | 	add	local02, #12
31648     54 7B 62 FC | 	wrlong	result1, local02
3164c     04 A8 06 F1 | 	add	local02, #4
31650     54 01 68 FC | 	wrlong	#0, local02
31654     04 A8 06 F1 | 	add	local02, #4
31658     01 00 80 FF 
3165c     54 01 68 FC | 	wrlong	##512, local02
31660     E7 AA 02 FB | 	rdlong	local03, fp
31664     FF AB 06 F1 | 	add	local03, #511
31668     09 AA 46 F0 | 	shr	local03, #9
3166c     04 A8 06 F1 | 	add	local02, #4
31670     54 AB 62 FC | 	wrlong	local03, local02
31674     04 CE 05 F1 | 	add	fp, #4
31678     E7 92 E2 FA | 	rdword	arg01, fp
3167c     02 CE 05 F1 | 	add	fp, #2
31680     E7 94 E2 FA | 	rdword	arg02, fp
31684     16 CE 85 F1 | 	sub	fp, #22
31688     58 FB BF FD | 	call	#_fatfs_cc_unixtime_1154
3168c     0C A8 06 F1 | 	add	local02, #12
31690     54 7B 62 FC | 	wrlong	result1, local02
31694     04 A8 86 F1 | 	sub	local02, #4
31698     54 7B 62 FC | 	wrlong	result1, local02
3169c     04 A8 86 F1 | 	sub	local02, #4
316a0     54 7B 62 FC | 	wrlong	result1, local02
316a4                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
316a4                 | '     }
316a4                 | '     buf->st_mode = mode;
316a4                 | '     buf->st_nlink = 1;
316a4                 | '     buf->st_size = finfo.fsize;
316a4                 | '     buf->st_blksize = 512;
316a4                 | '     buf->st_blocks = (finfo.fsize + 511) / 512;
316a4                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
316a4                 | ' #line 257 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
316a4                 | '     return r;
316a4     56 7B 02 F6 | 	mov	result1, local04
316a8                 | LR__5304
316a8     E7 F0 03 F6 | 	mov	ptra, fp
316ac     F2 00 A0 FD | 	call	#popregs_
316b0                 | _fatfs_cc_v_stat_ret
316b0     2D 00 64 FD | 	ret
316b4                 | 
316b4                 | _fatfs_cc_v_read
316b4     02 CA 05 F6 | 	mov	COUNT_, #2
316b8     E8 00 A0 FD | 	call	#pushregs_
316bc     1C F0 07 F1 | 	add	ptra, #28
316c0     49 A7 02 F6 | 	mov	local01, arg01
316c4     53 93 0A FB | 	rdlong	arg01, local01 wz
316c8                 | '         return _seterror( 5 );
316c8     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
316cc     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
316d0     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
316d4     01 7A 66 A6 |  if_e	neg	result1, #1
316d8     58 00 90 AD |  if_e	jmp	#LR__5311
316dc     02 00 00 FF 
316e0     10 92 06 F1 | 	add	arg01, ##1040
316e4     E7 98 02 F6 | 	mov	arg04, fp
316e8     18 98 06 F1 | 	add	arg04, #24
316ec     DC E1 BF FD | 	call	#_fatfs_cc_f_read
316f0     3D 99 0A F6 | 	mov	arg04, result1 wz
316f4     1C 00 90 AD |  if_e	jmp	#LR__5310
316f8     08 A6 06 F1 | 	add	local01, #8
316fc     53 93 02 FB | 	rdlong	arg01, local01
31700     20 92 46 F5 | 	or	arg01, #32
31704     53 93 62 FC | 	wrlong	arg01, local01
31708                 | '         fil->state |=  (0x20) ;
31708                 | '         return _set_dos_error(r);
31708     4C 93 02 F6 | 	mov	arg01, arg04
3170c     70 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31710     20 00 90 FD | 	jmp	#LR__5311
31714                 | LR__5310
31714     18 CE 05 F1 | 	add	fp, #24
31718     E7 A8 0A FB | 	rdlong	local02, fp wz
3171c     08 A6 06 A1 |  if_e	add	local01, #8
31720     53 A9 02 AB |  if_e	rdlong	local02, local01
31724     10 A8 46 A5 |  if_e	or	local02, #16
31728     53 A9 62 AC |  if_e	wrlong	local02, local01
3172c                 | '         fil->state |=  (0x10) ;
3172c                 | '     }
3172c                 | '     return x;
3172c     E7 7A 02 FB | 	rdlong	result1, fp
31730     18 CE 85 F1 | 	sub	fp, #24
31734                 | LR__5311
31734     E7 F0 03 F6 | 	mov	ptra, fp
31738     F2 00 A0 FD | 	call	#popregs_
3173c                 | _fatfs_cc_v_read_ret
3173c     2D 00 64 FD | 	ret
31740                 | 
31740                 | _fatfs_cc_v_write
31740     01 CA 05 F6 | 	mov	COUNT_, #1
31744     E8 00 A0 FD | 	call	#pushregs_
31748     1C F0 07 F1 | 	add	ptra, #28
3174c     49 A7 02 F6 | 	mov	local01, arg01
31750     53 93 0A FB | 	rdlong	arg01, local01 wz
31754                 | '         return _seterror( 5 );
31754     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31758     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
3175c     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31760     01 7A 66 A6 |  if_e	neg	result1, #1
31764     44 00 90 AD |  if_e	jmp	#LR__5321
31768     02 00 00 FF 
3176c     10 92 06 F1 | 	add	arg01, ##1040
31770     E7 98 02 F6 | 	mov	arg04, fp
31774     18 98 06 F1 | 	add	arg04, #24
31778     E8 E4 BF FD | 	call	#_fatfs_cc_f_write
3177c     3D 99 0A F6 | 	mov	arg04, result1 wz
31780     1C 00 90 AD |  if_e	jmp	#LR__5320
31784     08 A6 06 F1 | 	add	local01, #8
31788     53 93 02 FB | 	rdlong	arg01, local01
3178c     20 92 46 F5 | 	or	arg01, #32
31790     53 93 62 FC | 	wrlong	arg01, local01
31794                 | '         fil->state |=  (0x20) ;
31794                 | '         return _set_dos_error(r);
31794     4C 93 02 F6 | 	mov	arg01, arg04
31798     E4 FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
3179c     0C 00 90 FD | 	jmp	#LR__5321
317a0                 | LR__5320
317a0                 | '     }
317a0                 | '     return x;
317a0     18 CE 05 F1 | 	add	fp, #24
317a4     E7 7A 02 FB | 	rdlong	result1, fp
317a8     18 CE 85 F1 | 	sub	fp, #24
317ac                 | LR__5321
317ac     E7 F0 03 F6 | 	mov	ptra, fp
317b0     F2 00 A0 FD | 	call	#popregs_
317b4                 | _fatfs_cc_v_write_ret
317b4     2D 00 64 FD | 	ret
317b8                 | 
317b8                 | _fatfs_cc_v_lseek
317b8     06 CA 05 F6 | 	mov	COUNT_, #6
317bc     E8 00 A0 FD | 	call	#pushregs_
317c0     4A AB 02 F6 | 	mov	local03, arg02
317c4     4C AD 02 F6 | 	mov	local04, arg04
317c8     49 AF 02 FB | 	rdlong	local05, arg01
317cc     02 00 00 FF 
317d0     10 AE 0E F1 | 	add	local05, ##1040 wz
317d4     18 00 90 5D |  if_ne	jmp	#LR__5330
317d8                 | '         return _seterror( 5 );
317d8     20 68 06 F1 | 	add	ptr___system__dat__, #32
317dc     34 0B 68 FC | 	wrlong	#5, ptr___system__dat__
317e0     20 68 86 F1 | 	sub	ptr___system__dat__, #32
317e4     01 7C 66 F6 | 	neg	result2, #1
317e8     01 7A 66 F6 | 	neg	result1, #1
317ec     58 00 90 FD | 	jmp	#LR__5333
317f0                 | LR__5330
317f0     00 AC 0E F2 | 	cmp	local04, #0 wz
317f4     24 00 90 AD |  if_e	jmp	#LR__5331
317f8     01 AC 0E F2 | 	cmp	local04, #1 wz
317fc     14 AE 06 A1 |  if_e	add	local05, #20
31800     57 B1 02 AB |  if_e	rdlong	local06, local05
31804     14 AE 86 A1 |  if_e	sub	local05, #20
31808     58 AB 02 A1 |  if_e	add	local03, local06
3180c     0C AE 06 51 |  if_ne	add	local05, #12
31810     57 B1 02 5B |  if_ne	rdlong	local06, local05
31814     0C AE 86 51 |  if_ne	sub	local05, #12
31818     58 AB 02 51 |  if_ne	add	local03, local06
3181c                 | LR__5331
3181c     57 93 02 F6 | 	mov	arg01, local05
31820     55 95 02 F6 | 	mov	arg02, local03
31824     38 EA BF FD | 	call	#_fatfs_cc_f_lseek
31828     3D 93 0A F6 | 	mov	arg01, result1 wz
3182c     10 00 90 AD |  if_e	jmp	#LR__5332
31830                 | '         return _set_dos_error(result);
31830     4C FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31834     3D 7D 02 F6 | 	mov	result2, result1
31838     1F 7C C6 F0 | 	sar	result2, #31
3183c     08 00 90 FD | 	jmp	#LR__5333
31840                 | LR__5332
31840                 | '     }
31840                 | '     return (off_t)offset;
31840     55 7B 02 F6 | 	mov	result1, local03
31844     54 7D 02 F6 | 	mov	result2, local02
31848                 | LR__5333
31848     E7 F0 03 F6 | 	mov	ptra, fp
3184c     F2 00 A0 FD | 	call	#popregs_
31850                 | _fatfs_cc_v_lseek_ret
31850     2D 00 64 FD | 	ret
31854                 | 
31854                 | _fatfs_cc_v_ioctl
31854                 | ' {
31854                 | '     return _seterror( 10 );
31854     20 68 06 F1 | 	add	ptr___system__dat__, #32
31858     34 15 68 FC | 	wrlong	#10, ptr___system__dat__
3185c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
31860     01 7A 66 F6 | 	neg	result1, #1
31864                 | _fatfs_cc_v_ioctl_ret
31864     2D 00 64 FD | 	ret
31868                 | 
31868                 | _fatfs_cc_v_mkdir
31868     A0 F1 BF FD | 	call	#_fatfs_cc_f_mkdir
3186c     3D 93 02 F6 | 	mov	arg01, result1
31870                 | ' 
31870                 | '     r = f_mkdir(name);
31870                 | '     return _set_dos_error(r);
31870     0C FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31874                 | _fatfs_cc_v_mkdir_ret
31874     2D 00 64 FD | 	ret
31878                 | 
31878                 | _fatfs_cc_v_remove
31878     0C F0 BF FD | 	call	#_fatfs_cc_f_unlink
3187c     3D 93 02 F6 | 	mov	arg01, result1
31880                 | ' 
31880                 | '     r = f_unlink(name);
31880                 | '     return _set_dos_error(r);
31880     FC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31884                 | _fatfs_cc_v_remove_ret
31884     2D 00 64 FD | 	ret
31888                 | 
31888                 | _fatfs_cc_v_rmdir
31888     FC EF BF FD | 	call	#_fatfs_cc_f_unlink
3188c     3D 93 02 F6 | 	mov	arg01, result1
31890                 | ' 
31890                 | '     r = f_unlink(name);
31890                 | '     return _set_dos_error(r);
31890     EC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31894                 | _fatfs_cc_v_rmdir_ret
31894     2D 00 64 FD | 	ret
31898                 | 
31898                 | _fatfs_cc_v_rename
31898     B0 F3 BF FD | 	call	#_fatfs_cc_f_rename
3189c     3D 93 02 F6 | 	mov	arg01, result1
318a0                 | '     return _set_dos_error(r);
318a0     DC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
318a4                 | _fatfs_cc_v_rename_ret
318a4     2D 00 64 FD | 	ret
318a8                 | 
318a8                 | _fatfs_cc_v_open
318a8     07 CA 05 F6 | 	mov	COUNT_, #7
318ac     E8 00 A0 FD | 	call	#pushregs_
318b0     49 A7 02 F6 | 	mov	local01, arg01
318b4     4A A9 02 F6 | 	mov	local02, arg02
318b8     4B AB 02 F6 | 	mov	local03, arg03
318bc     03 00 00 FF 
318c0     38 92 06 F6 | 	mov	arg01, ##1592
318c4                 | '     return _gc_alloc(size);
318c4     10 94 06 F6 | 	mov	arg02, #16
318c8     FC 68 BF FD | 	call	#__system___gc_doalloc
318cc     3D AD 0A F6 | 	mov	local04, result1 wz
318d0                 | '       return _seterror( 7 );
318d0     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
318d4     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
318d8     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
318dc     01 7A 66 A6 |  if_e	neg	result1, #1
318e0     90 00 90 AD |  if_e	jmp	#LR__5346
318e4     56 93 02 F6 | 	mov	arg01, local04
318e8     00 94 06 F6 | 	mov	arg02, #0
318ec     03 00 00 FF 
318f0     38 96 06 F6 | 	mov	arg03, ##1592
318f4     D8 00 A0 FD | 	call	#\builtin_bytefill_
318f8                 | '   switch (flags & 3) {
318f8     55 AF 02 F6 | 	mov	local05, local03
318fc     03 AE 0E F5 | 	and	local05, #3 wz
31900     0C 00 90 AD |  if_e	jmp	#LR__5340
31904     01 AE 0E F2 | 	cmp	local05, #1 wz
31908     0C 00 90 AD |  if_e	jmp	#LR__5341
3190c     10 00 90 FD | 	jmp	#LR__5342
31910                 | LR__5340
31910     01 B0 06 F6 | 	mov	local06, #1
31914                 | '       fs_flags =  0x01 ;
31914                 | '       break;
31914     0C 00 90 FD | 	jmp	#LR__5343
31918                 | LR__5341
31918     02 B0 06 F6 | 	mov	local06, #2
3191c                 | '       fs_flags =  0x02 ;
3191c                 | '       break;
3191c     04 00 90 FD | 	jmp	#LR__5343
31920                 | LR__5342
31920     03 B0 06 F6 | 	mov	local06, #3
31924                 | '       fs_flags =  0x01  |  0x02 ;
31924                 | '       break;
31924                 | LR__5343
31924     08 AA CE F7 | 	test	local03, #8 wz
31928     18 B0 46 55 |  if_ne	or	local06, #24
3192c     08 00 90 5D |  if_ne	jmp	#LR__5344
31930     20 AA CE F7 | 	test	local03, #32 wz
31934     30 B0 46 55 |  if_ne	or	local06, #48
31938                 | LR__5344
31938     56 93 02 F6 | 	mov	arg01, local04
3193c     02 00 00 FF 
31940     10 92 06 F1 | 	add	arg01, ##1040
31944     54 95 02 F6 | 	mov	arg02, local02
31948     58 97 02 F6 | 	mov	arg03, local06
3194c     24 DB BF FD | 	call	#_fatfs_cc_f_open
31950     3D B3 0A F6 | 	mov	local07, result1 wz
31954     14 00 90 AD |  if_e	jmp	#LR__5345
31958     56 93 02 F6 | 	mov	arg01, local04
3195c                 | '     return _gc_free(ptr);
3195c     6C 69 BF FD | 	call	#__system___gc_free
31960                 | '     free(f);
31960                 | ' #line 426 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
31960                 | '     return _set_dos_error(r);
31960     59 93 02 F6 | 	mov	arg01, local07
31964     18 F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31968     08 00 90 FD | 	jmp	#LR__5346
3196c                 | LR__5345
3196c     53 AD 62 FC | 	wrlong	local04, local01
31970                 | '   }
31970                 | '   fil->vfsdata = f;
31970                 | '   return 0;
31970     00 7A 06 F6 | 	mov	result1, #0
31974                 | LR__5346
31974     E7 F0 03 F6 | 	mov	ptra, fp
31978     F2 00 A0 FD | 	call	#popregs_
3197c                 | _fatfs_cc_v_open_ret
3197c     2D 00 64 FD | 	ret
31980                 | 
31980                 | _fatfs_cc_v_flush
31980     01 CA 05 F6 | 	mov	COUNT_, #1
31984     E8 00 A0 FD | 	call	#pushregs_
31988     49 A7 02 F6 | 	mov	local01, arg01
3198c     80 F5 BF FD | 	call	#_fatfs_cc___default_flush
31990     53 A7 02 FB | 	rdlong	local01, local01
31994     02 00 00 FF 
31998     10 A6 0E F1 | 	add	local01, ##1040 wz
3199c                 | '         return _seterror( 5 );
3199c     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
319a0     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
319a4     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
319a8     01 7A 66 A6 |  if_e	neg	result1, #1
319ac     10 00 90 AD |  if_e	jmp	#LR__5350
319b0     53 93 02 F6 | 	mov	arg01, local01
319b4     FC E6 BF FD | 	call	#_fatfs_cc_f_sync
319b8     3D 93 02 F6 | 	mov	arg01, result1
319bc                 | '     }
319bc                 | ' #line 449 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
319bc                 | '     result = f_sync(f);
319bc                 | ' #line 453 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
319bc                 | '     return _set_dos_error(result);
319bc     C0 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
319c0                 | LR__5350
319c0     E7 F0 03 F6 | 	mov	ptra, fp
319c4     F2 00 A0 FD | 	call	#popregs_
319c8                 | _fatfs_cc_v_flush_ret
319c8     2D 00 64 FD | 	ret
319cc                 | 
319cc                 | _fatfs_cc_v_init
319cc                 | ' {
319cc                 | '     return 0;
319cc     00 7A 06 F6 | 	mov	result1, #0
319d0                 | _fatfs_cc_v_init_ret
319d0     2D 00 64 FD | 	ret
319d4                 | 
319d4                 | _fatfs_cc_v_deinit
319d4     91 01 00 FF 
319d8     F8 94 06 F6 | 	mov	arg02, ##@LR__5476
319dc     00 92 06 F6 | 	mov	arg01, #0
319e0     00 96 06 F6 | 	mov	arg03, #0
319e4     B8 D9 BF FD | 	call	#_fatfs_cc_f_mount
319e8     01 00 00 FF 
319ec     08 64 06 F1 | 	add	objptr, ##520
319f0     32 93 02 FB | 	rdlong	arg01, objptr
319f4     04 64 06 F1 | 	add	objptr, #4
319f8     32 95 02 FB | 	rdlong	arg02, objptr
319fc     01 00 00 FF 
31a00     0C 64 86 F1 | 	sub	objptr, ##524
31a04     2C 50 BF FD | 	call	#__system___freepins
31a08                 | ' #line 474 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
31a08                 | '     _freepins(f_pinmask);
31a08                 | '     return 0;
31a08     00 7A 06 F6 | 	mov	result1, #0
31a0c                 | _fatfs_cc_v_deinit_ret
31a0c     2D 00 64 FD | 	ret
31a10                 | 
31a10                 | _fatfs_cc_get_vfs
31a10     01 CA 05 F6 | 	mov	COUNT_, #1
31a14     E8 00 A0 FD | 	call	#pushregs_
31a18     49 A7 02 F6 | 	mov	local01, arg01
31a1c     58 92 06 F6 | 	mov	arg01, #88
31a20     74 67 BF FD | 	call	#__system___gc_alloc_managed
31a24     3D 93 02 F6 | 	mov	arg01, result1
31a28     32 7B 02 F6 | 	mov	result1, objptr
31a2c     00 D8 05 FF 
31a30     00 7A 46 F5 | 	or	result1, ##196083712
31a34     49 7B 62 FC | 	wrlong	result1, arg01
31a38     32 7B 02 F6 | 	mov	result1, objptr
31a3c     00 E0 05 FF 
31a40     00 7A 46 F5 | 	or	result1, ##197132288
31a44     04 92 06 F1 | 	add	arg01, #4
31a48     49 7B 62 FC | 	wrlong	result1, arg01
31a4c     32 7B 02 F6 | 	mov	result1, objptr
31a50     00 E8 05 FF 
31a54     00 7A 46 F5 | 	or	result1, ##198180864
31a58     04 92 06 F1 | 	add	arg01, #4
31a5c     49 7B 62 FC | 	wrlong	result1, arg01
31a60     32 7B 02 F6 | 	mov	result1, objptr
31a64     00 F0 05 FF 
31a68     00 7A 46 F5 | 	or	result1, ##199229440
31a6c     04 92 06 F1 | 	add	arg01, #4
31a70     49 7B 62 FC | 	wrlong	result1, arg01
31a74     32 7B 02 F6 | 	mov	result1, objptr
31a78     00 F8 05 FF 
31a7c     00 7A 46 F5 | 	or	result1, ##200278016
31a80     04 92 06 F1 | 	add	arg01, #4
31a84     49 7B 62 FC | 	wrlong	result1, arg01
31a88     32 7B 02 F6 | 	mov	result1, objptr
31a8c     3A 7A 26 F4 | 	bith	result1, #58
31a90     04 92 06 F1 | 	add	arg01, #4
31a94     49 7B 62 FC | 	wrlong	result1, arg01
31a98     04 92 06 F1 | 	add	arg01, #4
31a9c     49 A7 62 FC | 	wrlong	local01, arg01
31aa0     04 92 06 F1 | 	add	arg01, #4
31aa4     49 01 68 FC | 	wrlong	#0, arg01
31aa8     32 7B 02 F6 | 	mov	result1, objptr
31aac     00 08 06 FF 
31ab0     00 7A 46 F5 | 	or	result1, ##202375168
31ab4     04 92 06 F1 | 	add	arg01, #4
31ab8     49 7B 62 FC | 	wrlong	result1, arg01
31abc     32 7B 02 F6 | 	mov	result1, objptr
31ac0     00 10 06 FF 
31ac4     00 7A 46 F5 | 	or	result1, ##203423744
31ac8     04 92 06 F1 | 	add	arg01, #4
31acc     49 7B 62 FC | 	wrlong	result1, arg01
31ad0     32 7B 02 F6 | 	mov	result1, objptr
31ad4     00 18 06 FF 
31ad8     00 7A 46 F5 | 	or	result1, ##204472320
31adc     04 92 06 F1 | 	add	arg01, #4
31ae0     49 7B 62 FC | 	wrlong	result1, arg01
31ae4     32 7B 02 F6 | 	mov	result1, objptr
31ae8     00 20 06 FF 
31aec     00 7A 46 F5 | 	or	result1, ##205520896
31af0     04 92 06 F1 | 	add	arg01, #4
31af4     49 7B 62 FC | 	wrlong	result1, arg01
31af8     32 7B 02 F6 | 	mov	result1, objptr
31afc     00 28 06 FF 
31b00     00 7A 46 F5 | 	or	result1, ##206569472
31b04     04 92 06 F1 | 	add	arg01, #4
31b08     49 7B 62 FC | 	wrlong	result1, arg01
31b0c     32 7B 02 F6 | 	mov	result1, objptr
31b10     00 30 06 FF 
31b14     00 7A 46 F5 | 	or	result1, ##207618048
31b18     04 92 06 F1 | 	add	arg01, #4
31b1c     49 7B 62 FC | 	wrlong	result1, arg01
31b20     32 7B 02 F6 | 	mov	result1, objptr
31b24     00 38 06 FF 
31b28     00 7A 46 F5 | 	or	result1, ##208666624
31b2c     04 92 06 F1 | 	add	arg01, #4
31b30     49 7B 62 FC | 	wrlong	result1, arg01
31b34     32 7B 02 F6 | 	mov	result1, objptr
31b38     00 40 06 FF 
31b3c     00 7A 46 F5 | 	or	result1, ##209715200
31b40     04 92 06 F1 | 	add	arg01, #4
31b44     49 7B 62 FC | 	wrlong	result1, arg01
31b48     32 7B 02 F6 | 	mov	result1, objptr
31b4c     00 48 06 FF 
31b50     00 7A 46 F5 | 	or	result1, ##210763776
31b54     04 92 06 F1 | 	add	arg01, #4
31b58     49 7B 62 FC | 	wrlong	result1, arg01
31b5c     32 7B 02 F6 | 	mov	result1, objptr
31b60     00 50 06 FF 
31b64     00 7A 46 F5 | 	or	result1, ##211812352
31b68     04 92 06 F1 | 	add	arg01, #4
31b6c     49 7B 62 FC | 	wrlong	result1, arg01
31b70     32 7B 02 F6 | 	mov	result1, objptr
31b74     00 58 06 FF 
31b78     00 7A 46 F5 | 	or	result1, ##212860928
31b7c     04 92 06 F1 | 	add	arg01, #4
31b80     49 7B 62 FC | 	wrlong	result1, arg01
31b84     32 7B 02 F6 | 	mov	result1, objptr
31b88     00 60 06 FF 
31b8c     00 7A 46 F5 | 	or	result1, ##213909504
31b90     04 92 06 F1 | 	add	arg01, #4
31b94     49 7B 62 FC | 	wrlong	result1, arg01
31b98     04 92 06 F1 | 	add	arg01, #4
31b9c     49 01 68 FC | 	wrlong	#0, arg01
31ba0     04 92 06 F1 | 	add	arg01, #4
31ba4     49 01 68 FC | 	wrlong	#0, arg01
31ba8     54 92 86 F1 | 	sub	arg01, #84
31bac                 | ' 
31bac                 | '     v->close = &v_close;
31bac                 | '     v->read = &v_read;
31bac                 | '     v->write = &v_write;
31bac                 | '     v->lseek = &v_lseek;
31bac                 | '     v->ioctl = &v_ioctl;
31bac                 | '     v->flush = &v_flush;
31bac                 | '     v->vfs_data = ptr;
31bac                 | '     v->reserved = 0;
31bac                 | ' 
31bac                 | '     v->open = &v_open;
31bac                 | '     v->creat = &v_creat;
31bac                 | '     v->opendir = &v_opendir;
31bac                 | '     v->closedir = &v_closedir;
31bac                 | '     v->readdir = &v_readdir;
31bac                 | '     v->stat = &v_stat;
31bac                 | ' 
31bac                 | '     v->mkdir = &v_mkdir;
31bac                 | '     v->rmdir = &v_rmdir;
31bac                 | ' 
31bac                 | '     v->remove = &v_remove;
31bac                 | '     v->rename = &v_rename;
31bac                 | ' 
31bac                 | '     v->init = &v_init;
31bac                 | '     v->deinit = &v_deinit;
31bac                 | ' 
31bac                 | ' 
31bac                 | '     v->getcf = 0;
31bac                 | '     v->putcf = 0;
31bac                 | ' #line 532 "C:/Users/Piotr/Downloads/flexprop-7.0.0/flexprop/include/filesys/fatfs/fatfs.cc"
31bac                 | '     return v;
31bac     49 7B 02 F6 | 	mov	result1, arg01
31bb0     E7 F0 03 F6 | 	mov	ptra, fp
31bb4     F2 00 A0 FD | 	call	#popregs_
31bb8                 | _fatfs_cc_get_vfs_ret
31bb8     2D 00 64 FD | 	ret
31bbc                 | 
31bbc                 | _fatfs_cc_gettimeofday
31bbc     04 CA 05 F6 | 	mov	COUNT_, #4
31bc0     E8 00 A0 FD | 	call	#pushregs_
31bc4     49 A7 02 F6 | 	mov	local01, arg01
31bc8     24 2A BF FD | 	call	#__system___getus
31bcc     3D 93 02 F6 | 	mov	arg01, result1
31bd0     02 00 00 FF 
31bd4     08 6D 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1288
31bd8     36 A9 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
31bdc     49 7B 02 F6 | 	mov	result1, arg01
31be0     54 7B 82 F1 | 	sub	result1, local02
31be4     A1 07 00 FF 
31be8     40 7A 16 FD | 	qdiv	result1, ##1000000
31bec     02 00 00 FF 
31bf0     08 6D 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1288
31bf4     18 A8 62 FD | 	getqx	local02
31bf8     A1 07 00 FF 
31bfc     40 7A 16 FD | 	qdiv	result1, ##1000000
31c00     00 A8 0E F2 | 	cmp	local02, #0 wz
31c04     19 AA 62 FD | 	getqy	local03
31c08     28 00 90 AD |  if_e	jmp	#LR__5360
31c0c     02 00 00 FF 
31c10     04 6D 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1284
31c14     36 AD 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
31c18     54 AD 02 F1 | 	add	local04, local02
31c1c     36 AD 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
31c20     55 93 82 F1 | 	sub	arg01, local03
31c24     04 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, #4
31c28     36 93 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
31c2c     02 00 00 FF 
31c30     08 6D 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1288
31c34                 | LR__5360
31c34     02 00 00 FF 
31c38     04 6D 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1284
31c3c     36 AD 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
31c40     02 00 00 FF 
31c44     04 6D 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1284
31c48     53 AD 62 FC | 	wrlong	local04, local01
31c4c     04 A6 06 F1 | 	add	local01, #4
31c50     53 AB 62 FC | 	wrlong	local03, local01
31c54                 | '         lastsec += secs;
31c54                 | '         lastus = now - leftover;
31c54                 | '     }
31c54                 | '     tv->tv_sec = lastsec;
31c54                 | '     tv->tv_usec = leftover;
31c54                 | '     return 0;
31c54     00 7A 06 F6 | 	mov	result1, #0
31c58     E7 F0 03 F6 | 	mov	ptra, fp
31c5c     F2 00 A0 FD | 	call	#popregs_
31c60                 | _fatfs_cc_gettimeofday_ret
31c60     2D 00 64 FD | 	ret
31c64                 | 
31c64                 | _fatfs_cc__is_leap_year
31c64     49 7B 52 F6 | 	abs	result1, arg01 wc
31c68     03 7A 06 F5 | 	and	result1, #3
31c6c     3D 7B 8A F6 | 	negc	result1, result1 wz
31c70     38 00 90 5D |  if_ne	jmp	#LR__5371
31c74     49 7B 52 F6 | 	abs	result1, arg01 wc
31c78     64 7A 16 FD | 	qdiv	result1, #100
31c7c     19 7A 62 FD | 	getqy	result1
31c80     3D 7B 8A F6 | 	negc	result1, result1 wz
31c84     1C 00 90 5D |  if_ne	jmp	#LR__5370
31c88     49 7B 52 F6 | 	abs	result1, arg01 wc
31c8c     90 7B 16 FD | 	qdiv	result1, #400
31c90                 | '       return (0 == y % 400);
31c90     00 7A 06 F6 | 	mov	result1, #0
31c94     19 80 62 FD | 	getqy	_var01
31c98     40 81 8A F6 | 	negc	_var01, _var01 wz
31c9c     01 7A 06 A6 |  if_e	mov	result1, #1
31ca0     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
31ca4                 | LR__5370
31ca4                 | '     return 1;
31ca4     01 7A 06 F6 | 	mov	result1, #1
31ca8     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
31cac                 | LR__5371
31cac                 | '   }
31cac                 | '   return 0;
31cac     00 7A 06 F6 | 	mov	result1, #0
31cb0                 | _fatfs_cc__is_leap_year_ret
31cb0     2D 00 64 FD | 	ret
31cb4                 | 
31cb4                 | _fatfs_cc___tzoffset
31cb4     49 81 0A F6 | 	mov	_var01, arg01 wz
31cb8     FF FF FF FF 
31cbc     4A FF 6B FC | 	wrlong	##-1, arg02
31cc0     01 82 06 F6 | 	mov	_var02, #1
31cc4     40 85 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
31cc8                 | '                 return 0;
31cc8     00 7A 06 A6 |  if_e	mov	result1, #0
31ccc     7C 02 90 AD |  if_e	jmp	#LR__5397
31cd0     4A 01 68 FC | 	wrlong	#0, arg02
31cd4     36 87 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
31cd8     02 00 00 FF 
31cdc     DC 86 06 F1 | 	add	_var04, ##1244
31ce0     D7 26 48 FB | 	callpa	#(@LR__5381-@LR__5380)>>2,fcache_load_ptr_
31ce4                 | ' 
31ce4                 | '        *hasdst = 0;
31ce4                 | ' 
31ce4                 | ' 	n = stdname;
31ce4                 | '         while (*s && isalpha(*s)) {
31ce4                 | LR__5380
31ce4     40 85 CA FA | 	rdbyte	_var03, _var01 wz
31ce8     44 00 90 AD |  if_e	jmp	#LR__5382
31cec     40 93 C2 FA | 	rdbyte	arg01, _var01
31cf0                 | ' {
31cf0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
31cf0     80 92 36 F3 | 	fle	arg01, #128 wc
31cf4                 | '     return __ctype[c];
31cf4     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
31cf8     02 00 00 FF 
31cfc     0C 7B 06 F1 | 	add	result1, ##1292
31d00     3D 93 02 F1 | 	add	arg01, result1
31d04     49 7B C2 FA | 	rdbyte	result1, arg01
31d08     0C 7A CE F7 | 	test	result1, #12 wz
31d0c     20 00 90 AD |  if_e	jmp	#LR__5382
31d10     40 89 02 F6 | 	mov	_var05, _var01
31d14     40 8B 02 F6 | 	mov	_var06, _var01
31d18     01 8A 06 F1 | 	add	_var06, #1
31d1c     44 8D C2 FA | 	rdbyte	_var07, _var05
31d20     45 81 02 F6 | 	mov	_var01, _var06
31d24     43 8D 42 FC | 	wrbyte	_var07, _var04
31d28     01 86 06 F1 | 	add	_var04, #1
31d2c     B4 FF 9F FD | 	jmp	#LR__5380
31d30                 | LR__5381
31d30                 | LR__5382
31d30     43 01 48 FC | 	wrbyte	#0, _var04
31d34     00 8E 06 F6 | 	mov	_var08, #0
31d38     40 85 C2 FA | 	rdbyte	_var03, _var01
31d3c     2D 84 0E F2 | 	cmp	_var03, #45 wz
31d40     01 82 66 A6 |  if_e	neg	_var02, #1
31d44     01 80 06 A1 |  if_e	add	_var01, #1
31d48     D7 26 48 FB | 	callpa	#(@LR__5384-@LR__5383)>>2,fcache_load_ptr_
31d4c                 | '                 sgn = -1;
31d4c                 | '                 s++;
31d4c                 | '         }
31d4c                 | '         while (isdigit(*s)) {
31d4c                 | LR__5383
31d4c     40 93 C2 FA | 	rdbyte	arg01, _var01
31d50                 | ' {
31d50                 | '   return  (__ctype_get(c) & 0x02 ) ;
31d50     80 92 36 F3 | 	fle	arg01, #128 wc
31d54                 | '     return __ctype[c];
31d54     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
31d58     02 00 00 FF 
31d5c     0C 7B 06 F1 | 	add	result1, ##1292
31d60     3D 93 02 F1 | 	add	arg01, result1
31d64     49 7B C2 FA | 	rdbyte	result1, arg01
31d68     02 7A CE F7 | 	test	result1, #2 wz
31d6c     28 00 90 AD |  if_e	jmp	#LR__5385
31d70     47 85 02 F6 | 	mov	_var03, _var08
31d74     02 84 66 F0 | 	shl	_var03, #2
31d78     47 85 02 F1 | 	add	_var03, _var08
31d7c     01 84 66 F0 | 	shl	_var03, #1
31d80     40 89 C2 FA | 	rdbyte	_var05, _var01
31d84     30 88 86 F1 | 	sub	_var05, #48
31d88     44 85 02 F1 | 	add	_var03, _var05
31d8c     42 8F 02 F6 | 	mov	_var08, _var03
31d90     01 80 06 F1 | 	add	_var01, #1
31d94     B4 FF 9F FD | 	jmp	#LR__5383
31d98                 | LR__5384
31d98                 | LR__5385
31d98     07 00 00 FF 
31d9c     10 8E 06 FD | 	qmul	_var08, ##3600
31da0     40 85 C2 FA | 	rdbyte	_var03, _var01
31da4     3A 84 0E F2 | 	cmp	_var03, #58 wz
31da8     18 90 62 FD | 	getqx	_var09
31dac     6C 00 90 5D |  if_ne	jmp	#LR__5389
31db0     00 8E 06 F6 | 	mov	_var08, #0
31db4     01 80 06 F1 | 	add	_var01, #1
31db8     D7 26 48 FB | 	callpa	#(@LR__5387-@LR__5386)>>2,fcache_load_ptr_
31dbc                 | '                 x = 0;
31dbc                 | '                 s++;
31dbc                 | '                 while (isdigit(*s)) {
31dbc                 | LR__5386
31dbc     40 93 C2 FA | 	rdbyte	arg01, _var01
31dc0                 | ' {
31dc0                 | '   return  (__ctype_get(c) & 0x02 ) ;
31dc0     80 92 36 F3 | 	fle	arg01, #128 wc
31dc4                 | '     return __ctype[c];
31dc4     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
31dc8     02 00 00 FF 
31dcc     0C 7B 06 F1 | 	add	result1, ##1292
31dd0     3D 93 02 F1 | 	add	arg01, result1
31dd4     49 7B C2 FA | 	rdbyte	result1, arg01
31dd8     02 7A CE F7 | 	test	result1, #2 wz
31ddc     28 00 90 AD |  if_e	jmp	#LR__5388
31de0     47 85 02 F6 | 	mov	_var03, _var08
31de4     02 84 66 F0 | 	shl	_var03, #2
31de8     47 85 02 F1 | 	add	_var03, _var08
31dec     01 84 66 F0 | 	shl	_var03, #1
31df0     40 89 C2 FA | 	rdbyte	_var05, _var01
31df4     30 88 86 F1 | 	sub	_var05, #48
31df8     44 85 02 F1 | 	add	_var03, _var05
31dfc     42 8F 02 F6 | 	mov	_var08, _var03
31e00     01 80 06 F1 | 	add	_var01, #1
31e04     B4 FF 9F FD | 	jmp	#LR__5386
31e08                 | LR__5387
31e08                 | LR__5388
31e08     47 8D 02 F6 | 	mov	_var07, _var08
31e0c     04 8C 66 F0 | 	shl	_var07, #4
31e10     47 8D 82 F1 | 	sub	_var07, _var08
31e14     02 8C 66 F0 | 	shl	_var07, #2
31e18     46 91 02 F1 | 	add	_var09, _var07
31e1c                 | LR__5389
31e1c     36 87 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
31e20     02 00 00 FF 
31e24     E5 86 06 F1 | 	add	_var04, ##1253
31e28     40 93 C2 FA | 	rdbyte	arg01, _var01
31e2c                 | ' {
31e2c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
31e2c     80 92 36 F3 | 	fle	arg01, #128 wc
31e30                 | '     return __ctype[c];
31e30     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
31e34     02 00 00 FF 
31e38     0C 7B 06 F1 | 	add	result1, ##1292
31e3c     3D 93 02 F1 | 	add	arg01, result1
31e40     49 7B C2 FA | 	rdbyte	result1, arg01
31e44     0C 7A CE F7 | 	test	result1, #12 wz
31e48     4C 00 90 AD |  if_e	jmp	#LR__5392
31e4c     4A 03 68 FC | 	wrlong	#1, arg02
31e50                 | '                 *hasdst = 1;
31e50                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
31e50                 | LR__5390
31e50     40 85 CA FA | 	rdbyte	_var03, _var01 wz
31e54     40 00 90 AD |  if_e	jmp	#LR__5391
31e58     40 93 C2 FA | 	rdbyte	arg01, _var01
31e5c                 | ' {
31e5c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
31e5c     80 92 36 F3 | 	fle	arg01, #128 wc
31e60                 | '     return __ctype[c];
31e60     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
31e64     02 00 00 FF 
31e68     0C 7B 06 F1 | 	add	result1, ##1292
31e6c     3D 93 02 F1 | 	add	arg01, result1
31e70     49 7B C2 FA | 	rdbyte	result1, arg01
31e74     0C 7A CE F7 | 	test	result1, #12 wz
31e78     1C 00 90 AD |  if_e	jmp	#LR__5391
31e7c     40 8B 02 F6 | 	mov	_var06, _var01
31e80     01 8A 06 F1 | 	add	_var06, #1
31e84     40 8D C2 FA | 	rdbyte	_var07, _var01
31e88     45 81 02 F6 | 	mov	_var01, _var06
31e8c     43 8D 42 FC | 	wrbyte	_var07, _var04
31e90     01 86 06 F1 | 	add	_var04, #1
31e94     B8 FF 9F FD | 	jmp	#LR__5390
31e98                 | LR__5391
31e98                 | LR__5392
31e98     43 01 48 FC | 	wrbyte	#0, _var04
31e9c     02 00 00 FF 
31ea0     DC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
31ea4     36 85 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
31ea8     02 00 00 FF 
31eac     DC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1244
31eb0     20 00 90 AD |  if_e	jmp	#LR__5393
31eb4     02 00 00 FF 
31eb8     DC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
31ebc     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
31ec0     08 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #8
31ec4     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
31ec8     02 00 00 FF 
31ecc     D4 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1236
31ed0     1C 00 90 FD | 	jmp	#LR__5394
31ed4                 | LR__5393
31ed4     02 00 00 FF 
31ed8     EE 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1262
31edc     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
31ee0     1A 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #26
31ee4     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
31ee8     02 00 00 FF 
31eec     D4 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1236
31ef0                 | LR__5394
31ef0     02 00 00 FF 
31ef4     E5 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1253
31ef8     36 85 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
31efc     02 00 00 FF 
31f00     E5 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1253
31f04     20 00 90 AD |  if_e	jmp	#LR__5395
31f08     02 00 00 FF 
31f0c     E5 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1253
31f10     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
31f14     0D 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #13
31f18     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
31f1c     02 00 00 FF 
31f20     D8 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1240
31f24     1C 00 90 FD | 	jmp	#LR__5396
31f28                 | LR__5395
31f28     02 00 00 FF 
31f2c     DC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
31f30     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
31f34     04 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #4
31f38     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
31f3c     02 00 00 FF 
31f40     D8 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1240
31f44                 | LR__5396
31f44     48 83 02 FD | 	qmul	_var02, _var09
31f48                 | ' 		_tzname[1] = stdname;
31f48                 | ' 
31f48                 | '         return sgn * off;
31f48     18 7A 62 FD | 	getqx	result1
31f4c                 | LR__5397
31f4c                 | _fatfs_cc___tzoffset_ret
31f4c     2D 00 64 FD | 	ret
31f50                 | 
31f50                 | _fatfs_cc___indst
31f50     10 92 06 F1 | 	add	arg01, #16
31f54     49 81 02 FB | 	rdlong	_var01, arg01
31f58     10 92 86 F1 | 	sub	arg01, #16
31f5c     02 80 0E F2 | 	cmp	_var01, #2 wz
31f60     30 00 90 5D |  if_ne	jmp	#LR__5400
31f64     07 80 06 F6 | 	mov	_var01, #7
31f68     18 92 06 F1 | 	add	arg01, #24
31f6c     49 83 02 FB | 	rdlong	_var02, arg01
31f70     41 81 02 F1 | 	add	_var01, _var02
31f74     0C 92 86 F1 | 	sub	arg01, #12
31f78     49 85 02 FB | 	rdlong	_var03, arg01
31f7c     42 81 82 F1 | 	sub	_var01, _var03
31f80     00 80 56 F2 | 	cmps	_var01, #0 wc
31f84                 | '                         return 1;
31f84     01 7A 06 C6 |  if_b	mov	result1, #1
31f88     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
31f8c                 | '                 return 0;
31f8c     00 7A 06 F6 | 	mov	result1, #0
31f90     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
31f94                 | LR__5400
31f94     10 92 06 F1 | 	add	arg01, #16
31f98     49 81 02 FB | 	rdlong	_var01, arg01
31f9c     10 92 86 F1 | 	sub	arg01, #16
31fa0     0A 80 0E F2 | 	cmp	_var01, #10 wz
31fa4     28 00 90 5D |  if_ne	jmp	#LR__5401
31fa8     18 92 06 F1 | 	add	arg01, #24
31fac     49 81 02 FB | 	rdlong	_var01, arg01
31fb0     0C 92 86 F1 | 	sub	arg01, #12
31fb4     49 87 02 FB | 	rdlong	_var04, arg01
31fb8     43 81 82 F1 | 	sub	_var01, _var04
31fbc     00 80 56 F2 | 	cmps	_var01, #0 wc
31fc0                 | '                         return 0;
31fc0     00 7A 06 C6 |  if_b	mov	result1, #0
31fc4     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
31fc8                 | '                 return 1;
31fc8     01 7A 06 F6 | 	mov	result1, #1
31fcc     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
31fd0                 | LR__5401
31fd0                 | '         }
31fd0                 | ' 
31fd0                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
31fd0     00 80 06 F6 | 	mov	_var01, #0
31fd4     10 92 06 F1 | 	add	arg01, #16
31fd8     49 83 02 FB | 	rdlong	_var02, arg01
31fdc     10 92 86 F1 | 	sub	arg01, #16
31fe0     03 82 56 F2 | 	cmps	_var02, #3 wc
31fe4     10 00 90 CD |  if_b	jmp	#LR__5402
31fe8     10 92 06 F1 | 	add	arg01, #16
31fec     49 85 02 FB | 	rdlong	_var03, arg01
31ff0     0A 84 56 F2 | 	cmps	_var03, #10 wc
31ff4     01 80 06 C6 |  if_b	mov	_var01, #1
31ff8                 | LR__5402
31ff8     40 7B 02 F6 | 	mov	result1, _var01
31ffc                 | _fatfs_cc___indst_ret
31ffc     2D 00 64 FD | 	ret
32000                 | 
32000                 | _fatfs_cc_disk_deinitialize
32000     03 CA 05 F6 | 	mov	COUNT_, #3
32004     E8 00 A0 FD | 	call	#pushregs_
32008     01 00 00 FF 
3200c     10 64 06 F1 | 	add	objptr, ##528
32010     32 93 0A FB | 	rdlong	arg01, objptr wz
32014     01 00 00 FF 
32018     10 64 86 F1 | 	sub	objptr, ##528
3201c                 | ' 
3201c                 | '         return RES_NOTRDY;
3201c     03 7A 06 A6 |  if_e	mov	result1, #3
32020     4C 00 90 AD |  if_e	jmp	#LR__5410
32024     01 00 00 FF 
32028     10 64 06 F1 | 	add	objptr, ##528
3202c     32 93 02 FB | 	rdlong	arg01, objptr
32030     49 A7 02 F6 | 	mov	local01, arg01
32034     24 A6 06 F1 | 	add	local01, #36
32038     53 A7 02 FB | 	rdlong	local01, local01
3203c     53 A9 02 F6 | 	mov	local02, local01
32040     13 A6 46 F7 | 	zerox	local01, #19
32044     14 A8 46 F0 | 	shr	local02, #20
32048     02 A8 66 F0 | 	shl	local02, #2
3204c     2D A9 02 F1 | 	add	local02, __methods__
32050     54 A9 02 FB | 	rdlong	local02, local02
32054     01 00 00 FF 
32058     10 64 86 F1 | 	sub	objptr, ##528
3205c     32 AB 02 F6 | 	mov	local03, objptr
32060     53 65 02 F6 | 	mov	objptr, local01
32064     2D A8 62 FD | 	call	local02
32068     55 65 02 F6 | 	mov	objptr, local03
3206c                 | '     }
3206c                 | '     fh->close(fh);
3206c                 | '     return RES_OK;
3206c     00 7A 06 F6 | 	mov	result1, #0
32070                 | LR__5410
32070     E7 F0 03 F6 | 	mov	ptra, fp
32074     F2 00 A0 FD | 	call	#popregs_
32078                 | _fatfs_cc_disk_deinitialize_ret
32078     2D 00 64 FD | 	ret
3207c                 | 
3207c                 | ' 	
3207c                 | ' 	FUNCTION pfunc(c as integer) as integer
3207c                 | __system____strs_cl_pfunc_
3207c                 | ' 		if (i < 16) then
3207c     04 64 06 F1 | 	add	objptr, #4
32080     32 7B 02 FB | 	rdlong	result1, objptr
32084     04 64 86 F1 | 	sub	objptr, #4
32088     10 7A 56 F2 | 	cmps	result1, #16 wc
3208c     2C 00 90 3D |  if_ae	jmp	#LR__5420
32090     32 7B 02 FB | 	rdlong	result1, objptr
32094     04 64 06 F1 | 	add	objptr, #4
32098     32 81 02 FB | 	rdlong	_var01, objptr
3209c     3D 81 02 F1 | 	add	_var01, result1
320a0     40 93 42 FC | 	wrbyte	arg01, _var01
320a4     32 7B 02 FB | 	rdlong	result1, objptr
320a8     01 7A 06 F1 | 	add	result1, #1
320ac     32 7B 62 FC | 	wrlong	result1, objptr
320b0     04 64 86 F1 | 	sub	objptr, #4
320b4                 | ' 			p(i) = c
320b4                 | ' 			i = i+1
320b4                 | ' 			return 1
320b4     01 7A 06 F6 | 	mov	result1, #1
320b8     04 00 90 FD | 	jmp	#__system____strs_cl_pfunc__ret
320bc                 | LR__5420
320bc                 | ' 			return -1
320bc     01 7A 66 F6 | 	neg	result1, #1
320c0                 | __system____strs_cl_pfunc__ret
320c0     2D 00 64 FD | 	ret
320c4                 | 
320c4                 | __system___struct__s_vfs_file_t_putchar_
320c4     04 CA 05 F6 | 	mov	COUNT_, #4
320c8     E8 00 A0 FD | 	call	#pushregs_
320cc     1C 64 06 F1 | 	add	objptr, #28
320d0     32 A7 0A FB | 	rdlong	local01, objptr wz
320d4     1C 64 86 F1 | 	sub	objptr, #28
320d8     00 7A 06 A6 |  if_e	mov	result1, #0
320dc     48 00 90 AD |  if_e	jmp	#LR__5430
320e0     1C 64 06 F1 | 	add	objptr, #28
320e4     32 A9 02 FB | 	rdlong	local02, objptr
320e8     54 AB 02 F6 | 	mov	local03, local02
320ec     1C 64 86 F1 | 	sub	objptr, #28
320f0     13 AA 46 F7 | 	zerox	local03, #19
320f4     14 A8 46 F0 | 	shr	local02, #20
320f8     02 A8 66 F0 | 	shl	local02, #2
320fc     2D A9 02 F1 | 	add	local02, __methods__
32100     54 A9 02 FB | 	rdlong	local02, local02
32104     32 95 02 F6 | 	mov	arg02, objptr
32108     32 AD 02 F6 | 	mov	local04, objptr
3210c     55 65 02 F6 | 	mov	objptr, local03
32110     2D A8 62 FD | 	call	local02
32114     56 65 02 F6 | 	mov	objptr, local04
32118                 | '     return (i < 0) ? 0 : 1;
32118     00 7A 56 F2 | 	cmps	result1, #0 wc
3211c     00 A6 06 C6 |  if_b	mov	local01, #0
32120     01 A6 06 36 |  if_ae	mov	local01, #1
32124     53 7B 02 F6 | 	mov	result1, local01
32128                 | LR__5430
32128     E7 F0 03 F6 | 	mov	ptra, fp
3212c     F2 00 A0 FD | 	call	#popregs_
32130                 | __system___struct__s_vfs_file_t_putchar__ret
32130     2D 00 64 FD | 	ret
32134                 | 
32134                 | __system___struct__s_vfs_file_t_getchar_
32134     03 CA 05 F6 | 	mov	COUNT_, #3
32138     E8 00 A0 FD | 	call	#pushregs_
3213c     20 64 06 F1 | 	add	objptr, #32
32140     32 93 0A FB | 	rdlong	arg01, objptr wz
32144     20 64 86 F1 | 	sub	objptr, #32
32148     01 7A 66 A6 |  if_e	neg	result1, #1
3214c     38 00 90 AD |  if_e	jmp	#LR__5440
32150                 | '     return getcf(__this);
32150     20 64 06 F1 | 	add	objptr, #32
32154     32 A7 02 FB | 	rdlong	local01, objptr
32158     53 A9 02 F6 | 	mov	local02, local01
3215c     20 64 86 F1 | 	sub	objptr, #32
32160     13 A8 46 F7 | 	zerox	local02, #19
32164     14 A6 46 F0 | 	shr	local01, #20
32168     02 A6 66 F0 | 	shl	local01, #2
3216c     2D A7 02 F1 | 	add	local01, __methods__
32170     53 A7 02 FB | 	rdlong	local01, local01
32174     32 93 02 F6 | 	mov	arg01, objptr
32178     32 AB 02 F6 | 	mov	local03, objptr
3217c     54 65 02 F6 | 	mov	objptr, local02
32180     2D A6 62 FD | 	call	local01
32184     55 65 02 F6 | 	mov	objptr, local03
32188                 | LR__5440
32188     E7 F0 03 F6 | 	mov	ptra, fp
3218c     F2 00 A0 FD | 	call	#popregs_
32190                 | __system___struct__s_vfs_file_t_getchar__ret
32190     2D 00 64 FD | 	ret
32194                 | 
32194                 | __system___struct___bas_wrap_sender_tx_
32194     03 CA 05 F6 | 	mov	COUNT_, #3
32198     E8 00 A0 FD | 	call	#pushregs_
3219c     32 A7 02 FB | 	rdlong	local01, objptr
321a0     53 A9 02 F6 | 	mov	local02, local01
321a4     13 A6 46 F7 | 	zerox	local01, #19
321a8     14 A8 46 F0 | 	shr	local02, #20
321ac     02 A8 66 F0 | 	shl	local02, #2
321b0     2D A9 02 F1 | 	add	local02, __methods__
321b4     54 A9 02 FB | 	rdlong	local02, local02
321b8     32 AB 02 F6 | 	mov	local03, objptr
321bc     53 65 02 F6 | 	mov	objptr, local01
321c0     2D A8 62 FD | 	call	local02
321c4     55 65 02 F6 | 	mov	objptr, local03
321c8     01 7A 06 F6 | 	mov	result1, #1
321cc     E7 F0 03 F6 | 	mov	ptra, fp
321d0     F2 00 A0 FD | 	call	#popregs_
321d4                 | __system___struct___bas_wrap_sender_tx__ret
321d4     2D 00 64 FD | 	ret
321d8                 | 
321d8                 | __system___struct___bas_wrap_sender_rx_
321d8     03 CA 05 F6 | 	mov	COUNT_, #3
321dc     E8 00 A0 FD | 	call	#pushregs_
321e0     04 64 06 F1 | 	add	objptr, #4
321e4     32 A7 02 FB | 	rdlong	local01, objptr
321e8     53 A9 02 F6 | 	mov	local02, local01
321ec     04 64 86 F1 | 	sub	objptr, #4
321f0     13 A8 46 F7 | 	zerox	local02, #19
321f4     14 A6 46 F0 | 	shr	local01, #20
321f8     02 A6 66 F0 | 	shl	local01, #2
321fc     2D A7 02 F1 | 	add	local01, __methods__
32200     53 A7 02 FB | 	rdlong	local01, local01
32204     32 AB 02 F6 | 	mov	local03, objptr
32208     54 65 02 F6 | 	mov	objptr, local02
3220c     2D A6 62 FD | 	call	local01
32210     55 65 02 F6 | 	mov	objptr, local03
32214     E7 F0 03 F6 | 	mov	ptra, fp
32218     F2 00 A0 FD | 	call	#popregs_
3221c                 | __system___struct___bas_wrap_sender_rx__ret
3221c     2D 00 64 FD | 	ret
32220                 | 
32220                 | __system___struct___bas_wrap_sender_close_
32220     03 CA 05 F6 | 	mov	COUNT_, #3
32224     E8 00 A0 FD | 	call	#pushregs_
32228     08 64 06 F1 | 	add	objptr, #8
3222c     32 A7 02 FB | 	rdlong	local01, objptr
32230     53 A9 02 F6 | 	mov	local02, local01
32234     08 64 86 F1 | 	sub	objptr, #8
32238     13 A8 46 F7 | 	zerox	local02, #19
3223c     14 A6 46 F0 | 	shr	local01, #20
32240     02 A6 66 F0 | 	shl	local01, #2
32244     2D A7 02 F1 | 	add	local01, __methods__
32248     53 A7 02 FB | 	rdlong	local01, local01
3224c     32 AB 02 F6 | 	mov	local03, objptr
32250     54 65 02 F6 | 	mov	objptr, local02
32254     2D A6 62 FD | 	call	local01
32258     55 65 02 F6 | 	mov	objptr, local03
3225c     E7 F0 03 F6 | 	mov	ptra, fp
32260     F2 00 A0 FD | 	call	#popregs_
32264                 | __system___struct___bas_wrap_sender_close__ret
32264     2D 00 64 FD | 	ret
32268                 | 
32268                 | LR__5450
32268     2F          | 	byte	"/"
32269     00          | 	byte	0
3226a                 | LR__5451
3226a     69 6E 66    | 	byte	"inf"
3226d     00          | 	byte	0
3226e                 | LR__5452
3226e     6E 61 6E    | 	byte	"nan"
32271     00          | 	byte	0
32272                 | LR__5453
32272                 | 	byte	
32272     00          | 	byte	0
32273                 | LR__5454
32273                 | 	byte	
32273     00          | 	byte	0
32274                 | LR__5455
32274                 | 	byte	
32274     00          | 	byte	0
32275                 | LR__5456
32275                 | 	byte	
32275     00          | 	byte	0
32276                 | LR__5457
32276                 | 	byte	
32276     00          | 	byte	0
32277                 | LR__5458
32277                 | 	byte	
32277     00          | 	byte	0
32278                 | LR__5459
32278                 | 	byte	
32278     00          | 	byte	0
32279                 | LR__5460
32279                 | 	byte	
32279     00          | 	byte	0
3227a                 | LR__5461
3227a     00          | 	byte	0
3227b     00          | 	byte	0
3227c                 | LR__5462
3227c     00          | 	byte	0
3227d     00          | 	byte	0
3227e                 | LR__5463
3227e     00          | 	byte	0
3227f     00          | 	byte	0
32280                 | LR__5464
32280     20 21 21 21 
32284     20 63 6F 72 
32288     72 75 70 74 
3228c     65 64 20 68 
32290     65 61 70 3F 
32294     3F 3F 20 21 
32298     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
3229b     00          | 	byte	0
3229c                 | LR__5465
3229c     20 21 21 21 
322a0     20 6F 75 74 
322a4     20 6F 66 20 
322a8     68 65 61 70 
322ac     20 6D 65 6D 
322b0     6F 72 79 20 
322b4     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
322b8     00          | 	byte	0
322b9                 | LR__5466
322b9     20 21 21 21 
322bd     20 63 6F 72 
322c1     72 75 70 74 
322c5     65 64 20 68 
322c9     65 61 70 20 
322cd     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
322d1     00          | 	byte	0
322d2                 | LR__5467
322d2     00          | 	byte	0
322d3     00          | 	byte	0
322d4                 | LR__5468
322d4     2E          | 	byte	"."
322d5     00          | 	byte	0
322d6                 | LR__5469
322d6     00          | 	byte	0
322d7     00          | 	byte	0
322d8                 | LR__5470
322d8     00          | 	byte	0
322d9     00          | 	byte	0
322da                 | LR__5471
322da     00          | 	byte	0
322db     00          | 	byte	0
322dc                 | LR__5472
322dc     54 5A       | 	byte	"TZ"
322de     00          | 	byte	0
322df                 | LR__5473
322df     2A 3A 3C 3E 
322e3     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
322e7     00          | 	byte	0
322e8                 | LR__5474
322e8     2B 2C 3B 3D 
322ec     5B 5D       | 	byte	"+,;=[]"
322ee     00          | 	byte	0
322ef                 | LR__5475
322ef     46 41 54 33 
322f3     32 20 20 20 | 	byte	"FAT32   "
322f7     00          | 	byte	0
322f8                 | LR__5476
322f8     00          | 	byte	0
322f9     00          | 	byte	0
322fa                 | LR__5477
322fa                 | 	byte	
322fa     00          | 	byte	0
322fb                 | LR__5478
322fb                 | 	byte	
322fb     00          | 	byte	0
322fc                 | LR__5479
322fc                 | 	byte	
322fc     00          | 	byte	0
322fd                 | LR__5480
322fd                 | 	byte	
322fd     00          | 	byte	0
322fe                 | LR__5481
322fe     22          | 	byte	34
322ff     00          | 	byte	0
32300                 | LR__5482
32300     22          | 	byte	34
32301     00          | 	byte	0
32302                 | LR__5483
32302     3A          | 	byte	":"
32303     00          | 	byte	0
32304                 | LR__5484
32304                 | 	byte	
32304     00          | 	byte	0
32305                 | LR__5485
32305                 | 	byte	
32305     00          | 	byte	0
32306                 | LR__5486
32306                 | 	byte	
32306     00          | 	byte	0
32307                 | LR__5487
32307                 | 	byte	
32307     00          | 	byte	0
32308                 | LR__5488
32308                 | 	byte	
32308     00          | 	byte	0
32309                 | LR__5489
32309                 | 	byte	
32309     00          | 	byte	0
3230a                 | LR__5490
3230a                 | 	byte	
3230a     00          | 	byte	0
3230b                 | LR__5491
3230b     30          | 	byte	"0"
3230c     00          | 	byte	0
3230d                 | LR__5492
3230d     22          | 	byte	34
3230e     00          | 	byte	0
3230f                 | LR__5493
3230f     22          | 	byte	34
32310     00          | 	byte	0
32311                 | LR__5494
32311     22          | 	byte	34
32312     00          | 	byte	0
32313                 | LR__5495
32313     22          | 	byte	34
32314     00          | 	byte	0
32315                 | LR__5496
32315     22          | 	byte	34
32316     00          | 	byte	0
32317                 | LR__5497
32317     3E          | 	byte	">"
32318     00          | 	byte	0
32319                 | LR__5498
32319     3C          | 	byte	"<"
3231a     00          | 	byte	0
3231b                 | LR__5499
3231b     2B          | 	byte	"+"
3231c     00          | 	byte	0
3231d                 | LR__5500
3231d     2D          | 	byte	"-"
3231e     00          | 	byte	0
3231f                 | LR__5501
3231f     2A          | 	byte	"*"
32320     00          | 	byte	0
32321                 | LR__5502
32321     2F          | 	byte	"/"
32322     00          | 	byte	0
32323                 | LR__5503
32323     5E          | 	byte	"^"
32324     00          | 	byte	0
32325                 | LR__5504
32325     3D          | 	byte	"="
32326     00          | 	byte	0
32327                 | LR__5505
32327     2B          | 	byte	"+"
32328     00          | 	byte	0
32329                 | LR__5506
32329     2B          | 	byte	"+"
3232a     00          | 	byte	0
3232b                 | LR__5507
3232b     2D          | 	byte	"-"
3232c     00          | 	byte	0
3232d                 | LR__5508
3232d     2D          | 	byte	"-"
3232e     00          | 	byte	0
3232f                 | LR__5509
3232f     3C          | 	byte	"<"
32330     00          | 	byte	0
32331                 | LR__5510
32331     3E          | 	byte	">"
32332     00          | 	byte	0
32333                 | LR__5511
32333     22          | 	byte	34
32334     00          | 	byte	0
32335                 | LR__5512
32335     22          | 	byte	34
32336     00          | 	byte	0
32337                 | LR__5513
32337     65 6C 73 65 | 	byte	"else"
3233b     00          | 	byte	0
3233c                 | LR__5514
3233c     74 68 65 6E | 	byte	"then"
32340     00          | 	byte	0
32341                 | LR__5515
32341     3F          | 	byte	"?"
32342     00          | 	byte	0
32343                 | LR__5516
32343     3F          | 	byte	"?"
32344     00          | 	byte	0
32345                 | LR__5517
32345     2E          | 	byte	"."
32346     00          | 	byte	0
32347                 | LR__5518
32347     6D 6F 75 73 
3234b     65          | 	byte	"mouse"
3234c     00          | 	byte	0
3234d                 | LR__5519
3234d     63 75 72 73 
32351     6F 72       | 	byte	"cursor"
32353     00          | 	byte	0
32354                 | LR__5520
32354     63 6C 69 63 
32358     6B          | 	byte	"click"
32359     00          | 	byte	0
3235a                 | LR__5521
3235a     6F 6E       | 	byte	"on"
3235c     00          | 	byte	0
3235d                 | LR__5522
3235d     31          | 	byte	"1"
3235e     00          | 	byte	0
3235f                 | LR__5523
3235f     6F 66 66    | 	byte	"off"
32362     00          | 	byte	0
32363                 | LR__5524
32363     30          | 	byte	"0"
32364     00          | 	byte	0
32365                 | LR__5525
32365     6D 6F 64 65 | 	byte	"mode"
32369     00          | 	byte	0
3236a                 | LR__5526
3236a     6D 2E       | 	byte	"m."
3236c     00          | 	byte	0
3236d                 | LR__5527
3236d     61 74 61 72 
32371     69          | 	byte	"atari"
32372     00          | 	byte	0
32373                 | LR__5528
32373     30          | 	byte	"0"
32374     00          | 	byte	0
32375                 | LR__5529
32375     70 63 5F 61 
32379     6D 62 65 72 | 	byte	"pc_amber"
3237d     00          | 	byte	0
3237e                 | LR__5530
3237e     31          | 	byte	"1"
3237f     00          | 	byte	0
32380                 | LR__5531
32380     70 63 5F 67 
32384     72 65 65 6E | 	byte	"pc_green"
32388     00          | 	byte	0
32389                 | LR__5532
32389     32          | 	byte	"2"
3238a     00          | 	byte	0
3238b                 | LR__5533
3238b     70 63 5F 77 
3238f     68 69 74 65 | 	byte	"pc_white"
32393     00          | 	byte	0
32394                 | LR__5534
32394     33          | 	byte	"3"
32395     00          | 	byte	0
32396                 | LR__5535
32396     73 74       | 	byte	"st"
32398     00          | 	byte	0
32399                 | LR__5536
32399     34          | 	byte	"4"
3239a     00          | 	byte	0
3239b                 | LR__5537
3239b     61 6D 69 67 
3239f     61          | 	byte	"amiga"
323a0     00          | 	byte	0
323a1                 | LR__5538
323a1     35          | 	byte	"5"
323a2     00          | 	byte	0
323a3                 | LR__5539
323a3                 | 	byte	
323a3     00          | 	byte	0
323a4                 | LR__5540
323a4     6C 6F 61 64 | 	byte	"load"
323a8     00          | 	byte	0
323a9                 | LR__5541
323a9     73 61 76 65 | 	byte	"save"
323ad     00          | 	byte	0
323ae                 | LR__5542
323ae     62 72 75 6E | 	byte	"brun"
323b2     00          | 	byte	0
323b3                 | LR__5543
323b3     72 75 6E    | 	byte	"run"
323b6     00          | 	byte	0
323b7                 | LR__5544
323b7     6C 6F 2E    | 	byte	"lo."
323ba     00          | 	byte	0
323bb                 | LR__5545
323bb     73 2E       | 	byte	"s."
323bd     00          | 	byte	0
323be                 | LR__5546
323be     62 72 2E    | 	byte	"br."
323c1     00          | 	byte	0
323c2                 | LR__5547
323c2     65 6E 74 65 
323c6     72          | 	byte	"enter"
323c7     00          | 	byte	0
323c8                 | LR__5548
323c8     65 2E       | 	byte	"e."
323ca     00          | 	byte	0
323cb                 | LR__5549
323cb     24          | 	byte	"$"
323cc     00          | 	byte	0
323cd                 | LR__5550
323cd     64 65 6C 65 
323d1     74 65       | 	byte	"delete"
323d3     00          | 	byte	0
323d4                 | LR__5551
323d4     6D 6B 64 69 
323d8     72          | 	byte	"mkdir"
323d9     00          | 	byte	0
323da                 | LR__5552
323da     24          | 	byte	"$"
323db     00          | 	byte	0
323dc                 | LR__5553
323dc     63 6F 70 79 | 	byte	"copy"
323e0     00          | 	byte	0
323e1                 | LR__5554
323e1     24          | 	byte	"$"
323e2     00          | 	byte	0
323e3                 | LR__5555
323e3     63 6F 70 79 | 	byte	"copy"
323e7     00          | 	byte	0
323e8                 | LR__5556
323e8     24          | 	byte	"$"
323e9     00          | 	byte	0
323ea                 | LR__5557
323ea     63 64       | 	byte	"cd"
323ec     00          | 	byte	0
323ed                 | LR__5558
323ed     63 64 2E    | 	byte	"cd."
323f0     00          | 	byte	0
323f1                 | LR__5559
323f1     2E          | 	byte	"."
323f2     00          | 	byte	0
323f3                 | LR__5560
323f3     2E 2E       | 	byte	".."
323f5     00          | 	byte	0
323f6                 | LR__5561
323f6     63 64       | 	byte	"cd"
323f8     00          | 	byte	0
323f9                 | LR__5562
323f9     2F          | 	byte	"/"
323fa     00          | 	byte	0
323fb                 | LR__5563
323fb                 | 	byte	
323fb     00          | 	byte	0
323fc                 | LR__5564
323fc                 | 	byte	
323fc     00          | 	byte	0
323fd                 | LR__5565
323fd                 | 	byte	
323fd     00          | 	byte	0
323fe                 | LR__5566
323fe                 | 	byte	
323fe     00          | 	byte	0
323ff                 | LR__5567
323ff                 | 	byte	
323ff     00          | 	byte	0
32400                 | LR__5568
32400     52 65 61 64 
32404     79          | 	byte	"Ready"
32405     00          | 	byte	0
32406                 | LR__5569
32406     2B          | 	byte	"+"
32407     00          | 	byte	0
32408                 | LR__5570
32408     2D          | 	byte	"-"
32409     00          | 	byte	0
3240a                 | LR__5571
3240a     6F 72       | 	byte	"or"
3240c     00          | 	byte	0
3240d                 | LR__5572
3240d     78 6F 72    | 	byte	"xor"
32410     00          | 	byte	0
32411                 | LR__5573
32411     2A          | 	byte	"*"
32412     00          | 	byte	0
32413                 | LR__5574
32413     2F          | 	byte	"/"
32414     00          | 	byte	0
32415                 | LR__5575
32415     61 6E 64    | 	byte	"and"
32418     00          | 	byte	0
32419                 | LR__5576
32419     64 69 76    | 	byte	"div"
3241c     00          | 	byte	0
3241d                 | LR__5577
3241d     6D 6F 64    | 	byte	"mod"
32420     00          | 	byte	0
32421                 | LR__5578
32421     73 68 6C    | 	byte	"shl"
32424     00          | 	byte	0
32425                 | LR__5579
32425     73 68 72    | 	byte	"shr"
32428     00          | 	byte	0
32429                 | LR__5580
32429     5E          | 	byte	"^"
3242a     00          | 	byte	0
3242b                 | LR__5581
3242b     6E 6F 74    | 	byte	"not"
3242e     00          | 	byte	0
3242f                 | LR__5582
3242f     40          | 	byte	"@"
32430     00          | 	byte	0
32431                 | LR__5583
32431     3D          | 	byte	"="
32432     00          | 	byte	0
32433                 | LR__5584
32433     3E 3D       | 	byte	">="
32435     00          | 	byte	0
32436                 | LR__5585
32436     3C 3D       | 	byte	"<="
32438     00          | 	byte	0
32439                 | LR__5586
32439     3C          | 	byte	"<"
3243a     00          | 	byte	0
3243b                 | LR__5587
3243b     3E          | 	byte	">"
3243c     00          | 	byte	0
3243d                 | LR__5588
3243d     3C 3E       | 	byte	"<>"
3243f     00          | 	byte	0
32440                 | LR__5589
32440     2B 2B       | 	byte	"++"
32442     00          | 	byte	0
32443                 | LR__5590
32443     2D 2D       | 	byte	"--"
32445     00          | 	byte	0
32446                 | LR__5591
32446     23          | 	byte	"#"
32447     00          | 	byte	0
32448                 | LR__5592
32448     30          | 	byte	"0"
32449     00          | 	byte	0
3244a                 | LR__5593
3244a     39          | 	byte	"9"
3244b     00          | 	byte	0
3244c                 | LR__5594
3244c     23 72 65 61 
32450     64          | 	byte	"#read"
32451     00          | 	byte	0
32452                 | LR__5595
32452     23 77 72 69 
32456     74 65       | 	byte	"#write"
32458     00          | 	byte	0
32459                 | LR__5596
32459     23 61 70 70 
3245d     65 6E 64    | 	byte	"#append"
32460     00          | 	byte	0
32461                 | LR__5597
32461     23          | 	byte	"#"
32462     00          | 	byte	0
32463                 | LR__5598
32463     23          | 	byte	"#"
32464     00          | 	byte	0
32465                 | LR__5599
32465     2D          | 	byte	"-"
32466     00          | 	byte	0
32467                 | LR__5600
32467     30          | 	byte	"0"
32468     00          | 	byte	0
32469                 | LR__5601
32469     63          | 	byte	"c"
3246a     00          | 	byte	0
3246b                 | LR__5602
3246b     63 23       | 	byte	"c#"
3246d     00          | 	byte	0
3246e                 | LR__5603
3246e     64          | 	byte	"d"
3246f     00          | 	byte	0
32470                 | LR__5604
32470     64 23       | 	byte	"d#"
32472     00          | 	byte	0
32473                 | LR__5605
32473     65          | 	byte	"e"
32474     00          | 	byte	0
32475                 | LR__5606
32475     66          | 	byte	"f"
32476     00          | 	byte	0
32477                 | LR__5607
32477     66 23       | 	byte	"f#"
32479     00          | 	byte	0
3247a                 | LR__5608
3247a     67          | 	byte	"g"
3247b     00          | 	byte	0
3247c                 | LR__5609
3247c     67 23       | 	byte	"g#"
3247e     00          | 	byte	0
3247f                 | LR__5610
3247f     61          | 	byte	"a"
32480     00          | 	byte	0
32481                 | LR__5611
32481     61 23       | 	byte	"a#"
32483     00          | 	byte	0
32484                 | LR__5612
32484     68          | 	byte	"h"
32485     00          | 	byte	0
32486                 | LR__5613
32486     62          | 	byte	"b"
32487     00          | 	byte	0
32488                 | LR__5614
32488     2B          | 	byte	"+"
32489     00          | 	byte	0
3248a                 | LR__5615
3248a     2D          | 	byte	"-"
3248b     00          | 	byte	0
3248c                 | LR__5616
3248c     3D          | 	byte	"="
3248d     00          | 	byte	0
3248e                 | LR__5617
3248e     2C          | 	byte	","
3248f     00          | 	byte	0
32490                 | LR__5618
32490     2A          | 	byte	"*"
32491     00          | 	byte	0
32492                 | LR__5619
32492     2F          | 	byte	"/"
32493     00          | 	byte	0
32494                 | LR__5620
32494     3B          | 	byte	";"
32495     00          | 	byte	0
32496                 | LR__5621
32496     22          | 	byte	34
32497     00          | 	byte	0
32498                 | LR__5622
32498     5E          | 	byte	"^"
32499     00          | 	byte	0
3249a                 | LR__5623
3249a     29          | 	byte	")"
3249b     00          | 	byte	0
3249c                 | LR__5624
3249c     28          | 	byte	"("
3249d     00          | 	byte	0
3249e                 | LR__5625
3249e     3A          | 	byte	":"
3249f     00          | 	byte	0
324a0                 | LR__5626
324a0     20          | 	byte	" "
324a1     00          | 	byte	0
324a2                 | LR__5627
324a2     3E          | 	byte	">"
324a3     00          | 	byte	0
324a4                 | LR__5628
324a4     3C          | 	byte	"<"
324a5     00          | 	byte	0
324a6                 | LR__5629
324a6     3D          | 	byte	"="
324a7     00          | 	byte	0
324a8                 | LR__5630
324a8     62 65 65 70 | 	byte	"beep"
324ac     00          | 	byte	0
324ad                 | LR__5631
324ad     62 2E       | 	byte	"b."
324af     00          | 	byte	0
324b0                 | LR__5632
324b0     62 6C 69 74 | 	byte	"blit"
324b4     00          | 	byte	0
324b5                 | LR__5633
324b5     62 6F 78    | 	byte	"box"
324b8     00          | 	byte	0
324b9                 | LR__5634
324b9     62 72 75 6E | 	byte	"brun"
324bd     00          | 	byte	0
324be                 | LR__5635
324be     62 72 2E    | 	byte	"br."
324c1     00          | 	byte	0
324c2                 | LR__5636
324c2     63 64       | 	byte	"cd"
324c4     00          | 	byte	0
324c5                 | LR__5637
324c5     63 68 61 6E 
324c9     67 65 66 72 
324cd     65 71       | 	byte	"changefreq"
324cf     00          | 	byte	0
324d0                 | LR__5638
324d0     63 66 2E    | 	byte	"cf."
324d3     00          | 	byte	0
324d4                 | LR__5639
324d4     63 68 61 6E 
324d8     67 65 70 61 
324dc     6E          | 	byte	"changepan"
324dd     00          | 	byte	0
324de                 | LR__5640
324de     63 70 2E    | 	byte	"cp."
324e1     00          | 	byte	0
324e2                 | LR__5641
324e2     63 68 61 6E 
324e6     67 65 76 6F 
324ea     6C          | 	byte	"changevol"
324eb     00          | 	byte	0
324ec                 | LR__5642
324ec     63 76 2E    | 	byte	"cv."
324ef     00          | 	byte	0
324f0                 | LR__5643
324f0     63 68 61 6E 
324f4     67 65 77 61 
324f8     76 65       | 	byte	"changewave"
324fa     00          | 	byte	0
324fb                 | LR__5644
324fb     63 77 2E    | 	byte	"cw."
324fe     00          | 	byte	0
324ff                 | LR__5645
324ff     63 69 72 63 
32503     6C 65       | 	byte	"circle"
32505     00          | 	byte	0
32506                 | LR__5646
32506     63 69 2E    | 	byte	"ci."
32509     00          | 	byte	0
3250a                 | LR__5647
3250a     63 6C 69 63 
3250e     6B          | 	byte	"click"
3250f     00          | 	byte	0
32510                 | LR__5648
32510     63 6C 6F 73 
32514     65          | 	byte	"close"
32515     00          | 	byte	0
32516                 | LR__5649
32516     63 6C 73    | 	byte	"cls"
32519     00          | 	byte	0
3251a                 | LR__5650
3251a     63 6F 67 73 
3251e     74 6F 70    | 	byte	"cogstop"
32521     00          | 	byte	0
32522                 | LR__5651
32522     63 6F 6C 6F 
32526     72          | 	byte	"color"
32527     00          | 	byte	0
32528                 | LR__5652
32528     63 2E       | 	byte	"c."
3252a     00          | 	byte	0
3252b                 | LR__5653
3252b     63 6F 70 79 | 	byte	"copy"
3252f     00          | 	byte	0
32530                 | LR__5654
32530     63 75 72 73 
32534     6F 72       | 	byte	"cursor"
32536     00          | 	byte	0
32537                 | LR__5655
32537     64 61 74 61 | 	byte	"data"
3253b     00          | 	byte	0
3253c                 | LR__5656
3253c     64 65 66 63 
32540     68 61 72    | 	byte	"defchar"
32543     00          | 	byte	0
32544                 | LR__5657
32544     64 65 66 73 
32548     6E 64       | 	byte	"defsnd"
3254a     00          | 	byte	0
3254b                 | LR__5658
3254b     64 65 66 65 
3254f     6E 76       | 	byte	"defenv"
32551     00          | 	byte	0
32552                 | LR__5659
32552     64 65 66 73 
32556     70 72 69 74 
3255a     65          | 	byte	"defsprite"
3255b     00          | 	byte	0
3255c                 | LR__5660
3255c     64 73 2E    | 	byte	"ds."
3255f     00          | 	byte	0
32560                 | LR__5661
32560     64 65 67    | 	byte	"deg"
32563     00          | 	byte	0
32564                 | LR__5662
32564     64 65 6C 65 
32568     74 65       | 	byte	"delete"
3256a     00          | 	byte	0
3256b                 | LR__5663
3256b     64 69 6D    | 	byte	"dim"
3256e     00          | 	byte	0
3256f                 | LR__5664
3256f     64 69 72    | 	byte	"dir"
32572     00          | 	byte	0
32573                 | LR__5665
32573     64 70 6F 6B 
32577     65          | 	byte	"dpoke"
32578     00          | 	byte	0
32579                 | LR__5666
32579     64 72 61 77 | 	byte	"draw"
3257d     00          | 	byte	0
3257e                 | LR__5667
3257e     64 72 61 77 
32582     74 6F       | 	byte	"drawto"
32584     00          | 	byte	0
32585                 | LR__5668
32585     64 72 2E    | 	byte	"dr."
32588     00          | 	byte	0
32589                 | LR__5669
32589     65 6C 73 65 | 	byte	"else"
3258d     00          | 	byte	0
3258e                 | LR__5670
3258e     65 6E 64    | 	byte	"end"
32591     00          | 	byte	0
32592                 | LR__5671
32592     65 6E 74 65 
32596     72          | 	byte	"enter"
32597     00          | 	byte	0
32598                 | LR__5672
32598     65 2E       | 	byte	"e."
3259a     00          | 	byte	0
3259b                 | LR__5673
3259b     66 63 69 72 
3259f     63 6C 65    | 	byte	"fcircle"
325a2     00          | 	byte	0
325a3                 | LR__5674
325a3     66 63 2E    | 	byte	"fc."
325a6     00          | 	byte	0
325a7                 | LR__5675
325a7     66 69 6C 6C | 	byte	"fill"
325ab     00          | 	byte	0
325ac                 | LR__5676
325ac     66 69 2E    | 	byte	"fi."
325af     00          | 	byte	0
325b0                 | LR__5677
325b0     66 6F 6E 74 | 	byte	"font"
325b4     00          | 	byte	0
325b5                 | LR__5678
325b5     66 6F 72    | 	byte	"for"
325b8     00          | 	byte	0
325b9                 | LR__5679
325b9     66 2E       | 	byte	"f."
325bb     00          | 	byte	0
325bc                 | LR__5680
325bc     66 72 61 6D 
325c0     65          | 	byte	"frame"
325c1     00          | 	byte	0
325c2                 | LR__5681
325c2     66 72 2E    | 	byte	"fr."
325c5     00          | 	byte	0
325c6                 | LR__5682
325c6     67 65 74    | 	byte	"get"
325c9     00          | 	byte	0
325ca                 | LR__5683
325ca     67 6F 73 75 
325ce     62          | 	byte	"gosub"
325cf     00          | 	byte	0
325d0                 | LR__5684
325d0     67 6F 74 6F | 	byte	"goto"
325d4     00          | 	byte	0
325d5                 | LR__5685
325d5     67 2E       | 	byte	"g."
325d7     00          | 	byte	0
325d8                 | LR__5686
325d8     69 66       | 	byte	"if"
325da     00          | 	byte	0
325db                 | LR__5687
325db     69 6E 6B    | 	byte	"ink"
325de     00          | 	byte	0
325df                 | LR__5688
325df     69 2E       | 	byte	"i."
325e1     00          | 	byte	0
325e2                 | LR__5689
325e2     69 6E 70 75 
325e6     74          | 	byte	"input"
325e7     00          | 	byte	0
325e8                 | LR__5690
325e8     6C 69 73 74 | 	byte	"list"
325ec     00          | 	byte	0
325ed                 | LR__5691
325ed     6C 2E       | 	byte	"l."
325ef     00          | 	byte	0
325f0                 | LR__5692
325f0     6C 6F 61 64 | 	byte	"load"
325f4     00          | 	byte	0
325f5                 | LR__5693
325f5     6C 6F 2E    | 	byte	"lo."
325f8     00          | 	byte	0
325f9                 | LR__5694
325f9     6C 70 6F 6B 
325fd     65          | 	byte	"lpoke"
325fe     00          | 	byte	0
325ff                 | LR__5695
325ff     6D 6B 64 69 
32603     72          | 	byte	"mkdir"
32604     00          | 	byte	0
32605                 | LR__5696
32605     6D 6F 64 65 | 	byte	"mode"
32609     00          | 	byte	0
3260a                 | LR__5697
3260a     6D 2E       | 	byte	"m."
3260c     00          | 	byte	0
3260d                 | LR__5698
3260d     6D 6F 75 73 
32611     65          | 	byte	"mouse"
32612     00          | 	byte	0
32613                 | LR__5699
32613     6E 65 77    | 	byte	"new"
32616     00          | 	byte	0
32617                 | LR__5700
32617     6E 65 78 74 | 	byte	"next"
3261b     00          | 	byte	0
3261c                 | LR__5701
3261c     6E 2E       | 	byte	"n."
3261e     00          | 	byte	0
3261f                 | LR__5702
3261f     6F 6E       | 	byte	"on"
32621     00          | 	byte	0
32622                 | LR__5703
32622     6F 70 65 6E | 	byte	"open"
32626     00          | 	byte	0
32627                 | LR__5704
32627     70 61 70 65 
3262b     72          | 	byte	"paper"
3262c     00          | 	byte	0
3262d                 | LR__5705
3262d     70 61 2E    | 	byte	"pa."
32630     00          | 	byte	0
32631                 | LR__5706
32631     70 69 6E 66 
32635     6C 6F 61 74 | 	byte	"pinfloat"
32639     00          | 	byte	0
3263a                 | LR__5707
3263a     70 69 6E 68 
3263e     69          | 	byte	"pinhi"
3263f     00          | 	byte	0
32640                 | LR__5708
32640     70 69 6E 6C 
32644     6F          | 	byte	"pinlo"
32645     00          | 	byte	0
32646                 | LR__5709
32646     70 69 6E 73 
3264a     74 61 72 74 | 	byte	"pinstart"
3264e     00          | 	byte	0
3264f                 | LR__5710
3264f     70 69 6E 74 
32653     6F 67 67 6C 
32657     65          | 	byte	"pintoggle"
32658     00          | 	byte	0
32659                 | LR__5711
32659     70 69 6E 77 
3265d     72 69 74 65 | 	byte	"pinwrite"
32661     00          | 	byte	0
32662                 | LR__5712
32662     70 6C 61 79 | 	byte	"play"
32666     00          | 	byte	0
32667                 | LR__5713
32667     70 2E       | 	byte	"p."
32669     00          | 	byte	0
3266a                 | LR__5714
3266a     70 6C 6F 74 | 	byte	"plot"
3266e     00          | 	byte	0
3266f                 | LR__5715
3266f     70 6C 2E    | 	byte	"pl."
32672     00          | 	byte	0
32673                 | LR__5716
32673     70 6F 6B 65 | 	byte	"poke"
32677     00          | 	byte	0
32678                 | LR__5717
32678     70 6F 70    | 	byte	"pop"
3267b     00          | 	byte	0
3267c                 | LR__5718
3267c     70 6F 73 69 
32680     74 69 6F 6E | 	byte	"position"
32684     00          | 	byte	0
32685                 | LR__5719
32685     70 6F 73 2E | 	byte	"pos."
32689     00          | 	byte	0
3268a                 | LR__5720
3268a     70 72 69 6E 
3268e     74          | 	byte	"print"
3268f     00          | 	byte	0
32690                 | LR__5721
32690     3F          | 	byte	"?"
32691     00          | 	byte	0
32692                 | LR__5722
32692     70 75 74    | 	byte	"put"
32695     00          | 	byte	0
32696                 | LR__5723
32696     72 61 64    | 	byte	"rad"
32699     00          | 	byte	0
3269a                 | LR__5724
3269a     72 65 61 64 | 	byte	"read"
3269e     00          | 	byte	0
3269f                 | LR__5725
3269f     72 65 6C 65 
326a3     61 73 65    | 	byte	"release"
326a6     00          | 	byte	0
326a7                 | LR__5726
326a7     72 65 6D    | 	byte	"rem"
326aa     00          | 	byte	0
326ab                 | LR__5727
326ab     27          | 	byte	"'"
326ac     00          | 	byte	0
326ad                 | LR__5728
326ad     72 65 73 74 
326b1     6F 72 65    | 	byte	"restore"
326b4     00          | 	byte	0
326b5                 | LR__5729
326b5     72 65 73 74 
326b9     6F 72 65 70 
326bd     61 6C 65 74 
326c1     74 65       | 	byte	"restorepalette"
326c3     00          | 	byte	0
326c4                 | LR__5730
326c4     72 70 2E    | 	byte	"rp."
326c7     00          | 	byte	0
326c8                 | LR__5731
326c8     72 65 74 75 
326cc     72 6E       | 	byte	"return"
326ce     00          | 	byte	0
326cf                 | LR__5732
326cf     72 75 6E    | 	byte	"run"
326d2     00          | 	byte	0
326d3                 | LR__5733
326d3     72 2E       | 	byte	"r."
326d5     00          | 	byte	0
326d6                 | LR__5734
326d6     73 61 76 65 | 	byte	"save"
326da     00          | 	byte	0
326db                 | LR__5735
326db     73 2E       | 	byte	"s."
326dd     00          | 	byte	0
326de                 | LR__5736
326de     73 65 74 63 
326e2     6F 6C 6F 72 | 	byte	"setcolor"
326e6     00          | 	byte	0
326e7                 | LR__5737
326e7     73 63 2E    | 	byte	"sc."
326ea     00          | 	byte	0
326eb                 | LR__5738
326eb     73 65 74 61 
326ef     6D 6F 64 65 | 	byte	"setamode"
326f3     00          | 	byte	0
326f4                 | LR__5739
326f4     73 61 2E    | 	byte	"sa."
326f7     00          | 	byte	0
326f8                 | LR__5740
326f8     73 65 74 64 
326fc     65 6C 61 79 | 	byte	"setdelay"
32700     00          | 	byte	0
32701                 | LR__5741
32701     73 64 2E    | 	byte	"sd."
32704     00          | 	byte	0
32705                 | LR__5742
32705     73 65 74 65 
32709     6E 76       | 	byte	"setenv"
3270b     00          | 	byte	0
3270c                 | LR__5743
3270c     73 65 2E    | 	byte	"se."
3270f     00          | 	byte	0
32710                 | LR__5744
32710     73 65 74 6C 
32714     65 6E       | 	byte	"setlen"
32716     00          | 	byte	0
32717                 | LR__5745
32717     73 6C 2E    | 	byte	"sl."
3271a     00          | 	byte	0
3271b                 | LR__5746
3271b     73 65 74 70 
3271f     61 6E       | 	byte	"setpan"
32721     00          | 	byte	0
32722                 | LR__5747
32722     73 70 2E    | 	byte	"sp."
32725     00          | 	byte	0
32726                 | LR__5748
32726     73 65 74 73 
3272a     75 73 74 61 
3272e     69 6E       | 	byte	"setsustain"
32730     00          | 	byte	0
32731                 | LR__5749
32731     73 73 2E    | 	byte	"ss."
32734     00          | 	byte	0
32735                 | LR__5750
32735     73 65 74 76 
32739     6F 6C       | 	byte	"setvol"
3273b     00          | 	byte	0
3273c                 | LR__5751
3273c     73 76 2E    | 	byte	"sv."
3273f     00          | 	byte	0
32740                 | LR__5752
32740     73 65 74 77 
32744     61 76 65    | 	byte	"setwave"
32747     00          | 	byte	0
32748                 | LR__5753
32748     73 77 2E    | 	byte	"sw."
3274b     00          | 	byte	0
3274c                 | LR__5754
3274c     73 65 74 77 
32750     61 76       | 	byte	"setwav"
32752     00          | 	byte	0
32753                 | LR__5755
32753     73 68 75 74 
32757     75 70       | 	byte	"shutup"
32759     00          | 	byte	0
3275a                 | LR__5756
3275a     73 68 2E    | 	byte	"sh."
3275d     00          | 	byte	0
3275e                 | LR__5757
3275e     73 6F 75 6E 
32762     64          | 	byte	"sound"
32763     00          | 	byte	0
32764                 | LR__5758
32764     73 6F 2E    | 	byte	"so."
32767     00          | 	byte	0
32768                 | LR__5759
32768     73 70 72 69 
3276c     74 65       | 	byte	"sprite"
3276e     00          | 	byte	0
3276f                 | LR__5760
3276f     73 70 72 2E | 	byte	"spr."
32773     00          | 	byte	0
32774                 | LR__5761
32774     74 68 65 6E | 	byte	"then"
32778     00          | 	byte	0
32779                 | LR__5762
32779     77 61 69 74 
3277d     6D 73       | 	byte	"waitms"
3277f     00          | 	byte	0
32780                 | LR__5763
32780     77 2E       | 	byte	"w."
32782     00          | 	byte	0
32783                 | LR__5764
32783     77 61 69 74 
32787     63 6C 6F 63 
3278b     6B          | 	byte	"waitclock"
3278c     00          | 	byte	0
3278d                 | LR__5765
3278d     77 63 2E    | 	byte	"wc."
32790     00          | 	byte	0
32791                 | LR__5766
32791     77 61 69 74 
32795     76 62 6C    | 	byte	"waitvbl"
32798     00          | 	byte	0
32799                 | LR__5767
32799     77 76 2E    | 	byte	"wv."
3279c     00          | 	byte	0
3279d                 | LR__5768
3279d     77 72 70 69 
327a1     6E          | 	byte	"wrpin"
327a2     00          | 	byte	0
327a3                 | LR__5769
327a3     77 78 70 69 
327a7     6E          | 	byte	"wxpin"
327a8     00          | 	byte	0
327a9                 | LR__5770
327a9     77 79 70 69 
327ad     6E          | 	byte	"wypin"
327ae     00          | 	byte	0
327af                 | LR__5771
327af     61 62 73    | 	byte	"abs"
327b2     00          | 	byte	0
327b3                 | LR__5772
327b3     61 63 6F 73 | 	byte	"acos"
327b7     00          | 	byte	0
327b8                 | LR__5773
327b8     61 64 72    | 	byte	"adr"
327bb     00          | 	byte	0
327bc                 | LR__5774
327bc     61 64 64 72 | 	byte	"addr"
327c0     00          | 	byte	0
327c1                 | LR__5775
327c1     61 73 63    | 	byte	"asc"
327c4     00          | 	byte	0
327c5                 | LR__5776
327c5     61 73 69 6E | 	byte	"asin"
327c9     00          | 	byte	0
327ca                 | LR__5777
327ca     61 74 6E    | 	byte	"atn"
327cd     00          | 	byte	0
327ce                 | LR__5778
327ce     62 69 6E 24 | 	byte	"bin$"
327d2     00          | 	byte	0
327d3                 | LR__5779
327d3     63 68 72 24 | 	byte	"chr$"
327d7     00          | 	byte	0
327d8                 | LR__5780
327d8     63 6F 67 69 
327dc     6E 69 74    | 	byte	"coginit"
327df     00          | 	byte	0
327e0                 | LR__5781
327e0     63 6F 73    | 	byte	"cos"
327e3     00          | 	byte	0
327e4                 | LR__5782
327e4     64 70 65 65 
327e8     6B          | 	byte	"dpeek"
327e9     00          | 	byte	0
327ea                 | LR__5783
327ea     66 69 6E 64 
327ee     66 69 72 73 
327f2     74          | 	byte	"findfirst"
327f3     00          | 	byte	0
327f4                 | LR__5784
327f4     66 69 6E 64 
327f8     6E 65 78 74 | 	byte	"findnext"
327fc     00          | 	byte	0
327fd                 | LR__5785
327fd     66 72 61 6D 
32801     65 62 75 66 | 	byte	"framebuf"
32805     00          | 	byte	0
32806                 | LR__5786
32806     66 62 2E    | 	byte	"fb."
32809     00          | 	byte	0
3280a                 | LR__5787
3280a     66 72 65    | 	byte	"fre"
3280d     00          | 	byte	0
3280e                 | LR__5788
3280e     67 63 2E    | 	byte	"gc."
32811     00          | 	byte	0
32812                 | LR__5789
32812     67 65 74 63 
32816     6F 6C 6F 72 | 	byte	"getcolor"
3281a     00          | 	byte	0
3281b                 | LR__5790
3281b     67 65 74 70 
3281f     69 78 65 6C | 	byte	"getpixel"
32823     00          | 	byte	0
32824                 | LR__5791
32824     67 65 2E    | 	byte	"ge."
32827     00          | 	byte	0
32828                 | LR__5792
32828     67 65 74 65 
3282c     6E 76 73 75 
32830     73 74 61 69 
32834     6E          | 	byte	"getenvsustain"
32835     00          | 	byte	0
32836                 | LR__5793
32836     67 65 74 6E 
3283a     6F 74 65 76 
3283e     61 6C 75 65 | 	byte	"getnotevalue"
32842     00          | 	byte	0
32843                 | LR__5794
32843     67 65 74 72 
32847     65 61 6C 66 
3284b     72 65 71    | 	byte	"getrealfreq"
3284e     00          | 	byte	0
3284f                 | LR__5795
3284f     67 65 74 74 
32853     69 6D 65    | 	byte	"gettime"
32856     00          | 	byte	0
32857                 | LR__5796
32857     67 74 2E    | 	byte	"gt."
3285a     00          | 	byte	0
3285b                 | LR__5797
3285b     68 65 78 24 | 	byte	"hex$"
3285f     00          | 	byte	0
32860                 | LR__5798
32860     69 6E 6B 65 
32864     79 24       | 	byte	"inkey$"
32866     00          | 	byte	0
32867                 | LR__5799
32867     69 6E 74    | 	byte	"int"
3286a     00          | 	byte	0
3286b                 | LR__5800
3286b     6C 65 66 74 
3286f     24          | 	byte	"left$"
32870     00          | 	byte	0
32871                 | LR__5801
32871     6C 65 6E    | 	byte	"len"
32874     00          | 	byte	0
32875                 | LR__5802
32875     6C 6F 67    | 	byte	"log"
32878     00          | 	byte	0
32879                 | LR__5803
32879     6C 70 65 65 
3287d     6B          | 	byte	"lpeek"
3287e     00          | 	byte	0
3287f                 | LR__5804
3287f     6D 65 6D 74 
32883     6F 70       | 	byte	"memtop"
32885     00          | 	byte	0
32886                 | LR__5805
32886     6D 65 6D 6C 
3288a     6F          | 	byte	"memlo"
3288b     00          | 	byte	0
3288c                 | LR__5806
3288c     6D 69 64 24 | 	byte	"mid$"
32890     00          | 	byte	0
32891                 | LR__5807
32891     6D 6F 75 73 
32895     65 6B       | 	byte	"mousek"
32897     00          | 	byte	0
32898                 | LR__5808
32898     6D 6F 75 73 
3289c     65 77       | 	byte	"mousew"
3289e     00          | 	byte	0
3289f                 | LR__5809
3289f     6D 6F 75 73 
328a3     65 78       | 	byte	"mousex"
328a5     00          | 	byte	0
328a6                 | LR__5810
328a6     6D 6F 75 73 
328aa     65 79       | 	byte	"mousey"
328ac     00          | 	byte	0
328ad                 | LR__5811
328ad     70 61 64 73 | 	byte	"pads"
328b1     00          | 	byte	0
328b2                 | LR__5812
328b2     70 61 64 77 | 	byte	"padw"
328b6     00          | 	byte	0
328b7                 | LR__5813
328b7     70 61 64 78 | 	byte	"padx"
328bb     00          | 	byte	0
328bc                 | LR__5814
328bc     70 61 64 79 | 	byte	"pady"
328c0     00          | 	byte	0
328c1                 | LR__5815
328c1     70 61 64 7A | 	byte	"padz"
328c5     00          | 	byte	0
328c6                 | LR__5816
328c6     70 61 64 72 
328ca     78          | 	byte	"padrx"
328cb     00          | 	byte	0
328cc                 | LR__5817
328cc     70 61 64 72 
328d0     79          | 	byte	"padry"
328d1     00          | 	byte	0
328d2                 | LR__5818
328d2     70 61 64 72 
328d6     7A          | 	byte	"padrz"
328d7     00          | 	byte	0
328d8                 | LR__5819
328d8     70 61 64 68 | 	byte	"padh"
328dc     00          | 	byte	0
328dd                 | LR__5820
328dd     70 65 65 6B | 	byte	"peek"
328e1     00          | 	byte	0
328e2                 | LR__5821
328e2     70 69 6E 72 
328e6     65 61 64    | 	byte	"pinread"
328e9     00          | 	byte	0
328ea                 | LR__5822
328ea     72 64 70 69 
328ee     6E          | 	byte	"rdpin"
328ef     00          | 	byte	0
328f0                 | LR__5823
328f0     72 69 67 68 
328f4     74 24       | 	byte	"right$"
328f6     00          | 	byte	0
328f7                 | LR__5824
328f7     72 71 70 69 
328fb     6E          | 	byte	"rqpin"
328fc     00          | 	byte	0
328fd                 | LR__5825
328fd     72 6F 75 6E 
32901     64          | 	byte	"round"
32902     00          | 	byte	0
32903                 | LR__5826
32903     72 6E 64    | 	byte	"rnd"
32906     00          | 	byte	0
32907                 | LR__5827
32907     73 69 6E    | 	byte	"sin"
3290a     00          | 	byte	0
3290b                 | LR__5828
3290b     73 71 72    | 	byte	"sqr"
3290e     00          | 	byte	0
3290f                 | LR__5829
3290f     73 74 69 63 
32913     6B          | 	byte	"stick"
32914     00          | 	byte	0
32915                 | LR__5830
32915     73 74 72 69 
32919     67          | 	byte	"strig"
3291a     00          | 	byte	0
3291b                 | LR__5831
3291b     73 74 72 24 | 	byte	"str$"
3291f     00          | 	byte	0
32920                 | LR__5832
32920     74 61 6E    | 	byte	"tan"
32923     00          | 	byte	0
32924                 | LR__5833
32924     76 61 6C    | 	byte	"val"
32927     00          | 	byte	0
32928                 | LR__5834
32928     76 61 72 70 
3292c     74 72       | 	byte	"varptr"
3292e     00          | 	byte	0
3292f                 | LR__5835
3292f     61          | 	byte	"a"
32930     00          | 	byte	0
32931                 | LR__5836
32931     7A          | 	byte	"z"
32932     00          | 	byte	0
32933                 | LR__5837
32933     5F          | 	byte	"_"
32934     00          | 	byte	0
32935                 | LR__5838
32935     61          | 	byte	"a"
32936     00          | 	byte	0
32937                 | LR__5839
32937     7A          | 	byte	"z"
32938     00          | 	byte	0
32939                 | LR__5840
32939     30          | 	byte	"0"
3293a     00          | 	byte	0
3293b                 | LR__5841
3293b     39          | 	byte	"9"
3293c     00          | 	byte	0
3293d                 | LR__5842
3293d     5F          | 	byte	"_"
3293e     00          | 	byte	0
3293f                 | LR__5843
3293f     2E          | 	byte	"."
32940     00          | 	byte	0
32941                 | LR__5844
32941     61          | 	byte	"a"
32942     00          | 	byte	0
32943                 | LR__5845
32943     7A          | 	byte	"z"
32944     00          | 	byte	0
32945                 | LR__5846
32945     30          | 	byte	"0"
32946     00          | 	byte	0
32947                 | LR__5847
32947     39          | 	byte	"9"
32948     00          | 	byte	0
32949                 | LR__5848
32949     5F          | 	byte	"_"
3294a     00          | 	byte	0
3294b                 | LR__5849
3294b     24          | 	byte	"$"
3294c     00          | 	byte	0
3294d                 | LR__5850
3294d     25          | 	byte	"%"
3294e     00          | 	byte	0
3294f                 | LR__5851
3294f     21          | 	byte	"!"
32950     00          | 	byte	0
32951                 | LR__5852
32951     30          | 	byte	"0"
32952     00          | 	byte	0
32953                 | LR__5853
32953     39          | 	byte	"9"
32954     00          | 	byte	0
32955                 | LR__5854
32955     2E          | 	byte	"."
32956     00          | 	byte	0
32957                 | LR__5855
32957     24          | 	byte	"$"
32958     00          | 	byte	0
32959                 | LR__5856
32959     25          | 	byte	"%"
3295a     00          | 	byte	0
3295b                 | LR__5857
3295b     2D          | 	byte	"-"
3295c     00          | 	byte	0
3295d                 | LR__5858
3295d     2E          | 	byte	"."
3295e     00          | 	byte	0
3295f                 | LR__5859
3295f     24          | 	byte	"$"
32960     00          | 	byte	0
32961                 | LR__5860
32961     25          | 	byte	"%"
32962     00          | 	byte	0
32963                 | LR__5861
32963     30          | 	byte	"0"
32964     00          | 	byte	0
32965                 | LR__5862
32965     39          | 	byte	"9"
32966     00          | 	byte	0
32967                 | LR__5863
32967     5F          | 	byte	"_"
32968     00          | 	byte	0
32969                 | LR__5864
32969     2E          | 	byte	"."
3296a     00          | 	byte	0
3296b                 | LR__5865
3296b     45          | 	byte	"E"
3296c     00          | 	byte	0
3296d                 | LR__5866
3296d     65          | 	byte	"e"
3296e     00          | 	byte	0
3296f                 | LR__5867
3296f     2D          | 	byte	"-"
32970     00          | 	byte	0
32971                 | LR__5868
32971     61          | 	byte	"a"
32972     00          | 	byte	0
32973                 | LR__5869
32973     66          | 	byte	"f"
32974     00          | 	byte	0
32975                 | LR__5870
32975     30          | 	byte	"0"
32976     00          | 	byte	0
32977                 | LR__5871
32977     31          | 	byte	"1"
32978     00          | 	byte	0
32979                 | LR__5872
32979     5F          | 	byte	"_"
3297a     00          | 	byte	0
3297b                 | LR__5873
3297b     2D          | 	byte	"-"
3297c     00          | 	byte	0
3297d                 | LR__5874
3297d     65          | 	byte	"e"
3297e     00          | 	byte	0
3297f                 | LR__5875
3297f     2E          | 	byte	"."
32980     00          | 	byte	0
32981                 | LR__5876
32981     45          | 	byte	"E"
32982     00          | 	byte	0
32983                 | LR__5877
32983     65          | 	byte	"e"
32984     00          | 	byte	0
32985                 | LR__5878
32985     30          | 	byte	"0"
32986     00          | 	byte	0
32987                 | LR__5879
32987     39          | 	byte	"9"
32988     00          | 	byte	0
32989                 | LR__5880
32989     24          | 	byte	"$"
3298a     00          | 	byte	0
3298b                 | LR__5881
3298b     25          | 	byte	"%"
3298c     00          | 	byte	0
3298d                 | LR__5882
3298d     2D          | 	byte	"-"
3298e     00          | 	byte	0
3298f                 | LR__5883
3298f     24          | 	byte	"$"
32990     00          | 	byte	0
32991                 | LR__5884
32991     25          | 	byte	"%"
32992     00          | 	byte	0
32993                 | LR__5885
32993     30          | 	byte	"0"
32994     00          | 	byte	0
32995                 | LR__5886
32995     39          | 	byte	"9"
32996     00          | 	byte	0
32997                 | LR__5887
32997     5F          | 	byte	"_"
32998     00          | 	byte	0
32999                 | LR__5888
32999     30          | 	byte	"0"
3299a     00          | 	byte	0
3299b                 | LR__5889
3299b     39          | 	byte	"9"
3299c     00          | 	byte	0
3299d                 | LR__5890
3299d     61          | 	byte	"a"
3299e     00          | 	byte	0
3299f                 | LR__5891
3299f     66          | 	byte	"f"
329a0     00          | 	byte	0
329a1                 | LR__5892
329a1     5F          | 	byte	"_"
329a2     00          | 	byte	0
329a3                 | LR__5893
329a3     30          | 	byte	"0"
329a4     00          | 	byte	0
329a5                 | LR__5894
329a5     31          | 	byte	"1"
329a6     00          | 	byte	0
329a7                 | LR__5895
329a7     5F          | 	byte	"_"
329a8     00          | 	byte	0
329a9                 | LR__5896
329a9     30          | 	byte	"0"
329aa     00          | 	byte	0
329ab                 | LR__5897
329ab     39          | 	byte	"9"
329ac     00          | 	byte	0
329ad                 | LR__5898
329ad     5F          | 	byte	"_"
329ae     00          | 	byte	0
329af                 | LR__5899
329af     22          | 	byte	34
329b0     00          | 	byte	0
329b1                 | LR__5900
329b1     22          | 	byte	34
329b2     00          | 	byte	0
329b3                 | LR__5901
329b3     44 69 6D 3A 
329b7     20 61 74 20 
329bb     6C 69 6E 65 
329bf     20          | 	byte	"Dim: at line "
329c0     00          | 	byte	0
329c1                 | LR__5902
329c1     3A 20 77 61 
329c5     72 6E 69 6E 
329c9     67 3A 20 74 
329cd     68 65 20 76 
329d1     61 72 69 61 
329d5     62 6C 65 20 
329d9     65 78 69 73 
329dd     74 65 64 2E | 	byte	": warning: the variable existed."
329e1     00          | 	byte	0
329e2                 | LR__5903
329e2     28          | 	byte	"("
329e3     00          | 	byte	0
329e4                 | LR__5904
329e4     61 73       | 	byte	"as"
329e6     00          | 	byte	0
329e7                 | LR__5905
329e7     61 73       | 	byte	"as"
329e9     00          | 	byte	0
329ea                 | LR__5906
329ea     2C          | 	byte	","
329eb     00          | 	byte	0
329ec                 | LR__5907
329ec     29          | 	byte	")"
329ed     00          | 	byte	0
329ee                 | LR__5908
329ee     29          | 	byte	")"
329ef     00          | 	byte	0
329f0                 | LR__5909
329f0     61 73       | 	byte	"as"
329f2     00          | 	byte	0
329f3                 | LR__5910
329f3     62 79 74 65 | 	byte	"byte"
329f7     00          | 	byte	0
329f8                 | LR__5911
329f8     75 62 79 74 
329fc     65          | 	byte	"ubyte"
329fd     00          | 	byte	0
329fe                 | LR__5912
329fe     73 68 6F 72 
32a02     74          | 	byte	"short"
32a03     00          | 	byte	0
32a04                 | LR__5913
32a04     75 73 68 6F 
32a08     72 74       | 	byte	"ushort"
32a0a     00          | 	byte	0
32a0b                 | LR__5914
32a0b     6C 6F 6E 67 | 	byte	"long"
32a0f     00          | 	byte	0
32a10                 | LR__5915
32a10     69 6E 74 65 
32a14     67 65 72    | 	byte	"integer"
32a17     00          | 	byte	0
32a18                 | LR__5916
32a18     75 6C 6F 6E 
32a1c     67          | 	byte	"ulong"
32a1d     00          | 	byte	0
32a1e                 | LR__5917
32a1e     69 6E 74 36 
32a22     34          | 	byte	"int64"
32a23     00          | 	byte	0
32a24                 | LR__5918
32a24     75 69 6E 74 
32a28     36 34       | 	byte	"uint64"
32a2a     00          | 	byte	0
32a2b                 | LR__5919
32a2b     73 69 6E 67 
32a2f     6C 65       | 	byte	"single"
32a31     00          | 	byte	0
32a32                 | LR__5920
32a32     64 6F 75 62 
32a36     6C 65       | 	byte	"double"
32a38     00          | 	byte	0
32a39                 | LR__5921
32a39     73 74 72 69 
32a3d     6E 67       | 	byte	"string"
32a3f     00          | 	byte	0
32a40                 | LR__5922
32a40     74 6F       | 	byte	"to"
32a42     00          | 	byte	0
32a43                 | LR__5923
32a43     73 74 65 70 | 	byte	"step"
32a47     00          | 	byte	0
32a48                 | LR__5924
32a48     73 2E       | 	byte	"s."
32a4a     00          | 	byte	0
32a4b                 | LR__5925
32a4b     73 2E       | 	byte	"s."
32a4d     00          | 	byte	0
32a4e                 | LR__5926
32a4e     67 6F 74 6F | 	byte	"goto"
32a52     00          | 	byte	0
32a53                 | LR__5927
32a53     67 6F 73 75 
32a57     62          | 	byte	"gosub"
32a58     00          | 	byte	0
32a59                 | LR__5928
32a59     24          | 	byte	"$"
32a5a     00          | 	byte	0
32a5b                 | LR__5929
32a5b     26 68       | 	byte	"&h"
32a5d     00          | 	byte	0
32a5e                 | LR__5930
32a5e     25          | 	byte	"%"
32a5f     00          | 	byte	0
32a60                 | LR__5931
32a60     26 62       | 	byte	"&b"
32a62     00          | 	byte	0
32a63                 | LR__5932
32a63                 | 	byte	
32a63     00          | 	byte	0
32a64                 | LR__5933
32a64     61 63 6F 73 
32a68     3A 20       | 	byte	"acos: "
32a6a     00          | 	byte	0
32a6b                 | LR__5934
32a6b     61 73 63 3A 
32a6f     20          | 	byte	"asc: "
32a70     00          | 	byte	0
32a71                 | LR__5935
32a71     61 73 63 3A 
32a75     20          | 	byte	"asc: "
32a76     00          | 	byte	0
32a77                 | LR__5936
32a77     61 73 69 6E 
32a7b     3A 20       | 	byte	"asin: "
32a7d     00          | 	byte	0
32a7e                 | LR__5937
32a7e     61 74 6E 3A 
32a82     20          | 	byte	"atn: "
32a83     00          | 	byte	0
32a84                 | LR__5938
32a84     62 6C 69 74 
32a88     3A 20       | 	byte	"blit: "
32a8a     00          | 	byte	0
32a8b                 | LR__5939
32a8b     62 69 6E 24 
32a8f     3A 20       | 	byte	"bin$: "
32a91     00          | 	byte	0
32a92                 | LR__5940
32a92     2F          | 	byte	"/"
32a93     00          | 	byte	0
32a94                 | LR__5941
32a94     2F 73 64 2F 
32a98     62 69 6E 2F | 	byte	"/sd/bin/"
32a9c     00          | 	byte	0
32a9d                 | LR__5942
32a9d     53 79 73 74 
32aa1     65 6D 20 65 
32aa5     72 72 6F 72 
32aa9     20          | 	byte	"System error "
32aaa     00          | 	byte	0
32aab                 | LR__5943
32aab     3A 20       | 	byte	": "
32aad     00          | 	byte	0
32aae                 | LR__5944
32aae     2A          | 	byte	"*"
32aaf     00          | 	byte	0
32ab0                 | LR__5945
32ab0     2E 2E       | 	byte	".."
32ab2     00          | 	byte	0
32ab3                 | LR__5946
32ab3     2F          | 	byte	"/"
32ab4     00          | 	byte	0
32ab5                 | LR__5947
32ab5     2F          | 	byte	"/"
32ab6     00          | 	byte	0
32ab7                 | LR__5948
32ab7     53 79 73 74 
32abb     65 6D 20 65 
32abf     72 72 6F 72 
32ac3     20          | 	byte	"System error "
32ac4     00          | 	byte	0
32ac5                 | LR__5949
32ac5     3A 20       | 	byte	": "
32ac7     00          | 	byte	0
32ac8                 | LR__5950
32ac8     43 75 72 72 
32acc     65 6E 74 20 
32ad0     64 69 72 65 
32ad4     63 74 6F 72 
32ad8     79 3A 20    | 	byte	"Current directory: "
32adb     00          | 	byte	0
32adc                 | LR__5951
32adc     2F          | 	byte	"/"
32add     00          | 	byte	0
32ade                 | LR__5952
32ade     53 79 73 74 
32ae2     65 6D 20 65 
32ae6     72 72 6F 72 
32aea     20          | 	byte	"System error "
32aeb     00          | 	byte	0
32aec                 | LR__5953
32aec     3A 20       | 	byte	": "
32aee     00          | 	byte	0
32aef                 | LR__5954
32aef     43 75 72 72 
32af3     65 6E 74 20 
32af7     64 69 72 65 
32afb     63 74 6F 72 
32aff     79 3A 20    | 	byte	"Current directory: "
32b02     00          | 	byte	0
32b03                 | LR__5955
32b03     2F          | 	byte	"/"
32b04     00          | 	byte	0
32b05                 | LR__5956
32b05     2F          | 	byte	"/"
32b06     00          | 	byte	0
32b07                 | LR__5957
32b07     2F          | 	byte	"/"
32b08     00          | 	byte	0
32b09                 | LR__5958
32b09     53 79 73 74 
32b0d     65 6D 20 65 
32b11     72 72 6F 72 
32b15     20          | 	byte	"System error "
32b16     00          | 	byte	0
32b17                 | LR__5959
32b17     3A 20       | 	byte	": "
32b19     00          | 	byte	0
32b1a                 | LR__5960
32b1a     43 75 72 72 
32b1e     65 6E 74 20 
32b22     64 69 72 65 
32b26     63 74 6F 72 
32b2a     79 3A 20    | 	byte	"Current directory: "
32b2d     00          | 	byte	0
32b2e                 | LR__5961
32b2e     63 68 72 24 
32b32     3A 20       | 	byte	"chr$: "
32b34     00          | 	byte	0
32b35                 | LR__5962
32b35     63 68 61 6E 
32b39     6E 65 6C 23 
32b3d     20 65 78 70 
32b41     65 63 74 65 
32b45     64          | 	byte	"channel# expected"
32b46     00          | 	byte	0
32b47                 | LR__5963
32b47     63 6F 67 69 
32b4b     6E 69 74 3A 
32b4f     20          | 	byte	"coginit: "
32b50     00          | 	byte	0
32b51                 | LR__5964
32b51     53 79 73 74 
32b55     65 6D 20 65 
32b59     72 72 6F 72 
32b5d     20 2D 20    | 	byte	"System error - "
32b60     00          | 	byte	0
32b61                 | LR__5965
32b61     20 69 6E 20 
32b65     6C 69 6E 65 
32b69     20          | 	byte	" in line "
32b6a     00          | 	byte	0
32b6b                 | LR__5966
32b6b     3A 20       | 	byte	": "
32b6d     00          | 	byte	0
32b6e                 | LR__5967
32b6e     2C 20 66 69 
32b72     6C 65 20 6E 
32b76     61 6D 65 3A 
32b7a     20          | 	byte	", file name: "
32b7b     00          | 	byte	0
32b7c                 | LR__5968
32b7c     53 79 73 74 
32b80     65 6D 20 65 
32b84     72 72 6F 72 
32b88     20 2D 20    | 	byte	"System error - "
32b8b     00          | 	byte	0
32b8c                 | LR__5969
32b8c     20 69 6E 20 
32b90     6C 69 6E 65 
32b94     20          | 	byte	" in line "
32b95     00          | 	byte	0
32b96                 | LR__5970
32b96     3A 20       | 	byte	": "
32b98     00          | 	byte	0
32b99                 | LR__5971
32b99     2C 20 66 69 
32b9d     6C 65 20 6E 
32ba1     61 6D 65 3A 
32ba5     20          | 	byte	", file name: "
32ba6     00          | 	byte	0
32ba7                 | LR__5972
32ba7     63 6F 73 3A 
32bab     20          | 	byte	"cos: "
32bac     00          | 	byte	0
32bad                 | LR__5973
32bad                 | 	byte	
32bad     00          | 	byte	0
32bae                 | LR__5974
32bae                 | 	byte	
32bae     00          | 	byte	0
32baf                 | LR__5975
32baf     2F 73 64 2F 
32bb3     6D 65 64 69 
32bb7     61 2F 68 2F | 	byte	"/sd/media/h/"
32bbb     00          | 	byte	0
32bbc                 | LR__5976
32bbc     53 79 73 74 
32bc0     65 6D 20 65 
32bc4     72 72 6F 72 
32bc8     20          | 	byte	"System error "
32bc9     00          | 	byte	0
32bca                 | LR__5977
32bca     3A 20       | 	byte	": "
32bcc     00          | 	byte	0
32bcd                 | LR__5978
32bcd                 | 	byte	
32bcd     00          | 	byte	0
32bce                 | LR__5979
32bce                 | 	byte	
32bce     00          | 	byte	0
32bcf                 | LR__5980
32bcf     2F 73 64 2F 
32bd3     6D 65 64 69 
32bd7     61 2F 73 2F | 	byte	"/sd/media/s/"
32bdb     00          | 	byte	0
32bdc                 | LR__5981
32bdc     53 79 73 74 
32be0     65 6D 20 65 
32be4     72 72 6F 72 
32be8     20          | 	byte	"System error "
32be9     00          | 	byte	0
32bea                 | LR__5982
32bea     3A 20       | 	byte	": "
32bec     00          | 	byte	0
32bed                 | LR__5983
32bed     2F          | 	byte	"/"
32bee     00          | 	byte	0
32bef                 | LR__5984
32bef     2F          | 	byte	"/"
32bf0     00          | 	byte	0
32bf1                 | LR__5985
32bf1     2F          | 	byte	"/"
32bf2     00          | 	byte	0
32bf3                 | LR__5986
32bf3     43 61 6E 6E 
32bf7     6F 74 20 64 
32bfb     65 6C 65 74 
32bff     65 20 66 69 
32c03     6C 65 20 6F 
32c07     72 20 66 69 
32c0b     6C 65 20 64 
32c0f     6F 65 73 6E 
32c13     27 74 20 65 
32c17     78 69 73 74 
32c1b     3A 20 73 79 
32c1f     73 74 65 6D 
32c23     20 65 72 72 
32c27     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
32c2a     00          | 	byte	0
32c2b                 | LR__5987
32c2b     43 75 72 72 
32c2f     65 6E 74 20 
32c33     64 69 72 65 
32c37     63 74 6F 72 
32c3b     79 3A 20    | 	byte	"Current directory: "
32c3e     00          | 	byte	0
32c3f                 | LR__5988
32c3f                 | 	byte	
32c3f     00          | 	byte	0
32c40                 | LR__5989
32c40     2A          | 	byte	"*"
32c41     00          | 	byte	0
32c42                 | LR__5990
32c42                 | 	byte	
32c42     00          | 	byte	0
32c43                 | LR__5991
32c43     5B 64 69 72 
32c47     5D 20       | 	byte	"[dir] "
32c49     00          | 	byte	0
32c4a                 | LR__5992
32c4a     4D 6F 72 65 
32c4e     20 74 68 61 
32c52     6E 20 31 32 
32c56     38 20 65 6E 
32c5a     74 72 69 65 
32c5e     73 20 66 6F 
32c62     75 6E 64 3A 
32c66     20 63 6C 65 
32c6a     61 6E 20 79 
32c6e     6F 75 72 20 
32c72     64 69 72 65 
32c76     63 74 6F 72 
32c7a     79          | 	byte	"More than 128 entries found: clean your directory"
32c7b     00          | 	byte	0
32c7c                 | LR__5993
32c7c     2A          | 	byte	"*"
32c7d     00          | 	byte	0
32c7e                 | LR__5994
32c7e                 | 	byte	
32c7e     00          | 	byte	0
32c7f                 | LR__5995
32c7f     4D 6F 72 65 
32c83     20 74 68 61 
32c87     6E 20 31 32 
32c8b     38 20 65 6E 
32c8f     74 72 69 65 
32c93     73 20 66 6F 
32c97     75 6E 64 3A 
32c9b     20 63 6C 65 
32c9f     61 6E 20 79 
32ca3     6F 75 72 20 
32ca7     64 69 72 65 
32cab     63 74 6F 72 
32caf     79          | 	byte	"More than 128 entries found: clean your directory"
32cb0     00          | 	byte	0
32cb1                 | LR__5996
32cb1     45 72 72 6F 
32cb5     72 20       | 	byte	"Error "
32cb7     00          | 	byte	0
32cb8                 | LR__5997
32cb8     3A 20       | 	byte	": "
32cba     00          | 	byte	0
32cbb                 | LR__5998
32cbb     66 69 6E 64 
32cbf     66 69 72 73 
32cc3     74 3A 20    | 	byte	"findfirst: "
32cc6     00          | 	byte	0
32cc7                 | LR__5999
32cc7     66 69 6E 64 
32ccb     66 69 72 73 
32ccf     74 3A 20    | 	byte	"findfirst: "
32cd2     00          | 	byte	0
32cd3                 | LR__6000
32cd3     66 69 6E 64 
32cd7     66 69 72 73 
32cdb     74 3A 20    | 	byte	"findfirst: "
32cde     00          | 	byte	0
32cdf                 | LR__6001
32cdf                 | 	byte	
32cdf     00          | 	byte	0
32ce0                 | LR__6002
32ce0     66 69 6E 64 
32ce4     66 69 72 73 
32ce8     74 3A 20    | 	byte	"findfirst: "
32ceb     00          | 	byte	0
32cec                 | LR__6003
32cec                 | 	byte	
32cec     00          | 	byte	0
32ced                 | LR__6004
32ced     64 69 72    | 	byte	"dir"
32cf0     00          | 	byte	0
32cf1                 | LR__6005
32cf1     66 69 6E 64 
32cf5     6E 65 78 74 
32cf9     3A 20       | 	byte	"findnext: "
32cfb     00          | 	byte	0
32cfc                 | LR__6006
32cfc     67 65 74 63 
32d00     6F 6C 6F 72 
32d04     20          | 	byte	"getcolor "
32d05     00          | 	byte	0
32d06                 | LR__6007
32d06     67 65 74 65 
32d0a     6E 76 73 75 
32d0e     73 74 61 69 
32d12     6E 3A 20    | 	byte	"getenvsustain: "
32d15     00          | 	byte	0
32d16                 | LR__6008
32d16     67 65 74 70 
32d1a     69 78 65 6C 
32d1e     3A 20       | 	byte	"getpixel: "
32d20     00          | 	byte	0
32d21                 | LR__6009
32d21     67 65 74 72 
32d25     65 61 6C 66 
32d29     72 65 71 3A 
32d2d     20          | 	byte	"getrealfreq: "
32d2e     00          | 	byte	0
32d2f                 | LR__6010
32d2f     68 65 78 24 
32d33     3A 20       | 	byte	"hex$: "
32d35     00          | 	byte	0
32d36                 | LR__6011
32d36                 | 	byte	
32d36     00          | 	byte	0
32d37                 | LR__6012
32d37     49 6E 20 69 
32d3b     6E 70 75 74 
32d3f     3A 20       | 	byte	"In input: "
32d41     00          | 	byte	0
32d42                 | LR__6013
32d42     2C          | 	byte	","
32d43     00          | 	byte	0
32d44                 | LR__6014
32d44                 | 	byte	
32d44     00          | 	byte	0
32d45                 | LR__6015
32d45                 | 	byte	
32d45     00          | 	byte	0
32d46                 | LR__6016
32d46     6C 65 66 74 
32d4a     24 3A 20    | 	byte	"left$: "
32d4d     00          | 	byte	0
32d4e                 | LR__6017
32d4e     6C 65 66 74 
32d52     24 3A 20    | 	byte	"left$: "
32d55     00          | 	byte	0
32d56                 | LR__6018
32d56     6C 65 6E 3A 
32d5a     20          | 	byte	"len: "
32d5b     00          | 	byte	0
32d5c                 | LR__6019
32d5c     6C 65 6E 3A 
32d60     20          | 	byte	"len: "
32d61     00          | 	byte	0
32d62                 | LR__6020
32d62                 | 	byte	
32d62     00          | 	byte	0
32d63                 | LR__6021
32d63     2F          | 	byte	"/"
32d64     00          | 	byte	0
32d65                 | LR__6022
32d65     2F          | 	byte	"/"
32d66     00          | 	byte	0
32d67                 | LR__6023
32d67     2E 62 61 73 | 	byte	".bas"
32d6b     00          | 	byte	0
32d6c                 | LR__6024
32d6c     53 79 73 74 
32d70     65 6D 20 65 
32d74     72 72 6F 72 
32d78     20          | 	byte	"System error "
32d79     00          | 	byte	0
32d7a                 | LR__6025
32d7a     3A 20       | 	byte	": "
32d7c     00          | 	byte	0
32d7d                 | LR__6026
32d7d     2E 62 61 73 | 	byte	".bas"
32d81     00          | 	byte	0
32d82                 | LR__6027
32d82     2F          | 	byte	"/"
32d83     00          | 	byte	0
32d84                 | LR__6028
32d84                 | 	byte	
32d84     00          | 	byte	0
32d85                 | LR__6029
32d85     4C 6F 61 64 
32d89     65 64 20    | 	byte	"Loaded "
32d8c     00          | 	byte	0
32d8d                 | LR__6030
32d8d     2F          | 	byte	"/"
32d8e     00          | 	byte	0
32d8f                 | LR__6031
32d8f     6C 6F 67 3A 
32d93     20          | 	byte	"log: "
32d94     00          | 	byte	0
32d95                 | LR__6032
32d95     6D 69 64 24 
32d99     3A 20       | 	byte	"mid$: "
32d9b     00          | 	byte	0
32d9c                 | LR__6033
32d9c     6D 69 64 24 
32da0     3A 20       | 	byte	"mid$: "
32da2     00          | 	byte	0
32da3                 | LR__6034
32da3     43 61 6E 6E 
32da7     6F 74 20 63 
32dab     72 65 61 74 
32daf     65 20 61 20 
32db3     64 69 72 65 
32db7     63 74 6F 72 
32dbb     79 3A 20 73 
32dbf     79 73 74 65 
32dc3     6D 20 65 72 
32dc7     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
32dcb     00          | 	byte	0
32dcc                 | LR__6035
32dcc     20 42 41 53 
32dd0     49 43 20 62 
32dd4     79 74 65 73 
32dd8     20 66 72 65 
32ddc     65          | 	byte	" BASIC bytes free"
32ddd     00          | 	byte	0
32dde                 | LR__6036
32dde                 | 	byte	
32dde     00          | 	byte	0
32ddf                 | LR__6037
32ddf                 | 	byte	
32ddf     00          | 	byte	0
32de0                 | LR__6038
32de0                 | 	byte	
32de0     00          | 	byte	0
32de1                 | LR__6039
32de1     6E 6F 6E 61 
32de5     6D 65 2E 62 
32de9     61 73       | 	byte	"noname.bas"
32deb     00          | 	byte	0
32dec                 | LR__6040
32dec     66 69 6C 65 
32df0     6E 61 6D 65 
32df4     20 65 78 70 
32df8     65 63 74 65 
32dfc     64          | 	byte	"filename expected"
32dfd     00          | 	byte	0
32dfe                 | LR__6041
32dfe     72 65 61 64 | 	byte	"read"
32e02     00          | 	byte	0
32e03                 | LR__6042
32e03     77 72 69 74 
32e07     65          | 	byte	"write"
32e08     00          | 	byte	0
32e09                 | LR__6043
32e09     61 70 70 65 
32e0d     6E 64       | 	byte	"append"
32e0f     00          | 	byte	0
32e10                 | LR__6044
32e10     63 68 61 6E 
32e14     6E 65 6C 23 
32e18     20 65 78 70 
32e1c     65 63 74 65 
32e20     64          | 	byte	"channel# expected"
32e21     00          | 	byte	0
32e22                 | LR__6045
32e22     4F 70 65 6E 
32e26     3A 20 69 6E 
32e2a     76 61 6C 69 
32e2e     64 20 6D 6F 
32e32     64 65       | 	byte	"Open: invalid mode"
32e34     00          | 	byte	0
32e35                 | LR__6046
32e35     70 61 64 72 
32e39     78 3A 20    | 	byte	"padrx: "
32e3c     00          | 	byte	0
32e3d                 | LR__6047
32e3d     70 61 64 72 
32e41     79 3A 20    | 	byte	"padry: "
32e44     00          | 	byte	0
32e45                 | LR__6048
32e45     70 61 64 72 
32e49     7A 3A 20    | 	byte	"padrz: "
32e4c     00          | 	byte	0
32e4d                 | LR__6049
32e4d     70 61 64 73 
32e51     3A 20       | 	byte	"pads: "
32e53     00          | 	byte	0
32e54                 | LR__6050
32e54     70 61 64 77 
32e58     3A 20       | 	byte	"padw: "
32e5a     00          | 	byte	0
32e5b                 | LR__6051
32e5b     70 61 64 78 
32e5f     3A 20       | 	byte	"padx: "
32e61     00          | 	byte	0
32e62                 | LR__6052
32e62     70 61 64 79 
32e66     3A 20       | 	byte	"pady: "
32e68     00          | 	byte	0
32e69                 | LR__6053
32e69     70 61 64 7A 
32e6d     3A 20       | 	byte	"padz: "
32e6f     00          | 	byte	0
32e70                 | LR__6054
32e70     50 72 69 6E 
32e74     74 20 74 6F 
32e78     20 63 68 61 
32e7c     6E 6E 65 6C 
32e80     20 28 6E 6F 
32e84     74 20 79 65 
32e88     74 20 69 6D 
32e8c     70 6C 65 6D 
32e90     65 6E 74 65 
32e94     64 29       | 	byte	"Print to channel (not yet implemented)"
32e96     00          | 	byte	0
32e97                 | LR__6055
32e97                 | 	byte	
32e97     00          | 	byte	0
32e98                 | LR__6056
32e98     64 61 74 61 | 	byte	"data"
32e9c     00          | 	byte	0
32e9d                 | LR__6057
32e9d                 | 	byte	
32e9d     00          | 	byte	0
32e9e                 | LR__6058
32e9e     49 6E 20 72 
32ea2     65 61 64 3A 
32ea6     20          | 	byte	"In read: "
32ea7     00          | 	byte	0
32ea8                 | LR__6059
32ea8                 | 	byte	
32ea8     00          | 	byte	0
32ea9                 | LR__6060
32ea9                 | 	byte	
32ea9     00          | 	byte	0
32eaa                 | LR__6061
32eaa     27          | 	byte	"'"
32eab     00          | 	byte	0
32eac                 | LR__6062
32eac     2C          | 	byte	","
32ead     00          | 	byte	0
32eae                 | LR__6063
32eae                 | 	byte	
32eae     00          | 	byte	0
32eaf                 | LR__6064
32eaf                 | 	byte	
32eaf     00          | 	byte	0
32eb0                 | LR__6065
32eb0                 | 	byte	
32eb0     00          | 	byte	0
32eb1                 | LR__6066
32eb1                 | 	byte	
32eb1     00          | 	byte	0
32eb2                 | LR__6067
32eb2                 | 	byte	
32eb2     00          | 	byte	0
32eb3                 | LR__6068
32eb3     72 69 67 68 
32eb7     74 24 3A 20 | 	byte	"right$: "
32ebb     00          | 	byte	0
32ebc                 | LR__6069
32ebc     72 69 67 68 
32ec0     74 24 3A 20 | 	byte	"right$: "
32ec4     00          | 	byte	0
32ec5                 | LR__6070
32ec5     72 6E 64 3A 
32ec9     20          | 	byte	"rnd: "
32eca     00          | 	byte	0
32ecb                 | LR__6071
32ecb     72 6E 64 3A 
32ecf     20          | 	byte	"rnd: "
32ed0     00          | 	byte	0
32ed1                 | LR__6072
32ed1                 | 	byte	
32ed1     00          | 	byte	0
32ed2                 | LR__6073
32ed2     53 74 6F 70 
32ed6     70 65 64 20 
32eda     61 74 20 6C 
32ede     69 6E 65 20 | 	byte	"Stopped at line "
32ee2     00          | 	byte	0
32ee3                 | LR__6074
32ee3                 | 	byte	
32ee3     00          | 	byte	0
32ee4                 | LR__6075
32ee4     2F          | 	byte	"/"
32ee5     00          | 	byte	0
32ee6                 | LR__6076
32ee6                 | 	byte	
32ee6     00          | 	byte	0
32ee7                 | LR__6077
32ee7     53 61 76 65 
32eeb     64 20 61 73 
32eef     20          | 	byte	"Saved as "
32ef0     00          | 	byte	0
32ef1                 | LR__6078
32ef1     2F          | 	byte	"/"
32ef2     00          | 	byte	0
32ef3                 | LR__6079
32ef3     73 65 74 63 
32ef7     6F 6C 6F 72 
32efb     3A 20       | 	byte	"setcolor: "
32efd     00          | 	byte	0
32efe                 | LR__6080
32efe     73 69 6E 3A 
32f02     20          | 	byte	"sin: "
32f03     00          | 	byte	0
32f04                 | LR__6081
32f04     73 71 72 3A 
32f08     20          | 	byte	"sqr: "
32f09     00          | 	byte	0
32f0a                 | LR__6082
32f0a     73 74 69 63 
32f0e     6B 3A 20    | 	byte	"stick: "
32f11     00          | 	byte	0
32f12                 | LR__6083
32f12     73 74 72 24 
32f16     3A 20       | 	byte	"str$: "
32f18     00          | 	byte	0
32f19                 | LR__6084
32f19     73 74 72 69 
32f1d     67 3A 20    | 	byte	"strig: "
32f20     00          | 	byte	0
32f21                 | LR__6085
32f21     74 61 6E 3A 
32f25     20          | 	byte	"tan: "
32f26     00          | 	byte	0
32f27                 | LR__6086
32f27     76 61 6C 3A 
32f2b     20          | 	byte	"val: "
32f2c     00          | 	byte	0
32f2d                 | LR__6087
32f2d     76 61 6C 3A 
32f31     20          | 	byte	"val: "
32f32     00          | 	byte	0
32f33                 | LR__6088
32f33     24          | 	byte	"$"
32f34     00          | 	byte	0
32f35                 | LR__6089
32f35     26 68       | 	byte	"&h"
32f37     00          | 	byte	0
32f38                 | LR__6090
32f38     25          | 	byte	"%"
32f39     00          | 	byte	0
32f3a                 | LR__6091
32f3a     26 62       | 	byte	"&b"
32f3c     00          | 	byte	0
32f3d                 | LR__6092
32f3d                 | 	byte	
32f3d     00          | 	byte	0
32f3e                 | LR__6093
32f3e     45 78 70 65 
32f42     63 74 65 64 
32f46     20 6E 75 6D 
32f4a     62 65 72 2C 
32f4e     20 67 6F 74 
32f52     20 73 6F 6D 
32f56     65 74 68 69 
32f5a     6E 67 20 65 
32f5e     6C 73 65    | 	byte	"Expected number, got something else"
32f61     00          | 	byte	0
32f62                 | LR__6094
32f62     43 61 6E 6E 
32f66     6F 74 20 61 
32f6a     64 64 20 61 
32f6e     20 6E 75 6D 
32f72     62 65 72 20 
32f76     74 6F 20 61 
32f7a     20 73 74 72 
32f7e     69 6E 67    | 	byte	"Cannot add a number to a string"
32f81     00          | 	byte	0
32f82                 | LR__6095
32f82     43 61 6E 6E 
32f86     6F 74 20 73 
32f8a     75 62 73 74 
32f8e     72 61 63 74 
32f92     20 73 74 72 
32f96     69 6E 67 73 | 	byte	"Cannot substract strings"
32f9a     00          | 	byte	0
32f9b                 | LR__6096
32f9b     55 6E 6B 6E 
32f9f     6F 77 6E 20 
32fa3     65 72 72 6F 
32fa7     72 20 77 68 
32fab     69 6C 65 20 
32faf     61 64 64 69 
32fb3     6E 67       | 	byte	"Unknown error while adding"
32fb5     00          | 	byte	0
32fb6                 | LR__6097
32fb6     55 6E 6B 6E 
32fba     6F 77 6E 20 
32fbe     65 72 72 6F 
32fc2     72 20 77 68 
32fc6     69 6C 65 20 
32fca     73 75 62 73 
32fce     74 72 61 63 
32fd2     74 69 6E 67 | 	byte	"Unknown error while substracting"
32fd6     00          | 	byte	0
32fd7                 | LR__6098
32fd7     43 61 6E 6E 
32fdb     6F 74 20 64 
32fdf     6F 20 6C 6F 
32fe3     67 69 63 20 
32fe7     6F 70 65 72 
32feb     61 74 69 6F 
32fef     6E 20 6F 6E 
32ff3     20 73 74 72 
32ff7     69 6E 67 20 
32ffb     6F 72 20 66 
32fff     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
33003     00          | 	byte	0
33004                 | LR__6099
33004     55 6E 6B 6E 
33008     6F 77 6E 20 
3300c     65 72 72 6F 
33010     72 20 77 68 
33014     69 6C 65 20 
33018     64 6F 69 6E 
3301c     67 20 6C 6F 
33020     67 69 63 20 
33024     6F 70 65 72 
33028     61 74 69 6F 
3302c     6E          | 	byte	"Unknown error while doing logic operation"
3302d     00          | 	byte	0
3302e                 | LR__6100
3302e     43 61 6E 6E 
33032     6F 74 20 6D 
33036     75 6C 74 69 
3303a     70 6C 79 20 
3303e     73 74 72 69 
33042     6E 67 73    | 	byte	"Cannot multiply strings"
33045     00          | 	byte	0
33046                 | LR__6101
33046     55 6E 6B 6E 
3304a     6F 77 6E 20 
3304e     65 72 72 6F 
33052     72 20 77 68 
33056     69 6C 65 20 
3305a     6D 75 6C 74 
3305e     69 70 6C 79 
33062     69 6E 67    | 	byte	"Unknown error while multiplying"
33065     00          | 	byte	0
33066                 | LR__6102
33066     43 61 6E 6E 
3306a     6F 74 20 64 
3306e     69 76 69 64 
33072     65 20 73 74 
33076     72 69 6E 67 
3307a     73          | 	byte	"Cannot divide strings"
3307b     00          | 	byte	0
3307c                 | LR__6103
3307c     55 6E 6B 6E 
33080     6F 77 6E 20 
33084     65 72 72 6F 
33088     72 20 77 68 
3308c     69 6C 65 20 
33090     64 69 76 69 
33094     64 69 6E 67 | 	byte	"Unknown error while dividing"
33098     00          | 	byte	0
33099                 | LR__6104
33099     43 61 6E 6E 
3309d     6F 74 20 63 
330a1     6F 6D 70 75 
330a5     74 65 20 61 
330a9     20 70 6F 77 
330ad     65 72 20 6F 
330b1     66 20 61 20 
330b5     73 74 72 69 
330b9     6E 67       | 	byte	"Cannot compute a power of a string"
330bb     00          | 	byte	0
330bc                 | LR__6105
330bc     55 6E 6B 6E 
330c0     6F 77 6E 20 
330c4     65 72 72 6F 
330c8     72 20 77 68 
330cc     69 6C 65 20 
330d0     63 6F 6D 70 
330d4     75 74 69 6E 
330d8     67 20 61 20 
330dc     70 6F 77 65 
330e0     72          | 	byte	"Unknown error while computing a power"
330e1     00          | 	byte	0
330e2                 | LR__6106
330e2     52 69 67 68 
330e6     74 20 70 61 
330ea     72 65 6E 74 
330ee     68 65 73 69 
330f2     73 20 65 78 
330f6     70 65 63 74 
330fa     65 64       | 	byte	"Right parenthesis expected"
330fc     00          | 	byte	0
330fd                 | LR__6107
330fd     45 78 70 65 
33101     63 74 65 64 
33105     20 73 74 72 
33109     69 6E 67    | 	byte	"Expected string"
3310c     00          | 	byte	0
3310d                 | LR__6108
3310d     45 78 70 65 
33111     63 74 65 64 
33115     20 66 6C 6F 
33119     61 74       | 	byte	"Expected float"
3311b     00          | 	byte	0
3311c                 | LR__6109
3311c     45 78 70 65 
33120     63 74 65 64 
33124     20 75 6E 73 
33128     69 67 6E 65 
3312c     64 20 69 6E 
33130     74 65 67 65 
33134     72          | 	byte	"Expected unsigned integer"
33135     00          | 	byte	0
33136                 | LR__6110
33136     45 78 70 65 
3313a     63 74 65 64 
3313e     20 69 6E 74 
33142     65 67 65 72 | 	byte	"Expected integer"
33146     00          | 	byte	0
33147                 | LR__6111
33147     4E 6F 20 6D 
3314b     6F 72 65 20 
3314f     76 61 72 69 
33153     61 62 6C 65 
33157     20 73 6C 6F 
3315b     74 73       | 	byte	"No more variable slots"
3315d     00          | 	byte	0
3315e                 | LR__6112
3315e     56 61 72 69 
33162     61 62 6C 65 
33166     20 6E 6F 74 
3316a     20 66 6F 75 
3316e     6E 64       | 	byte	"Variable not found"
33170     00          | 	byte	0
33171                 | LR__6113
33171     43 6F 6D 6D 
33175     61 20 65 78 
33179     70 65 63 74 
3317d     65 64       | 	byte	"Comma expected"
3317f     00          | 	byte	0
33180                 | LR__6114
33180     43 6F 6D 6D 
33184     61 20 6F 72 
33188     20 73 65 6D 
3318c     69 63 6F 6C 
33190     6F 6E 20 65 
33194     78 70 65 63 
33198     74 65 64    | 	byte	"Comma or semicolon expected"
3319b     00          | 	byte	0
3319c                 | LR__6115
3319c     55 6E 6B 6E 
331a0     6F 77 6E 20 
331a4     63 6F 6D 6D 
331a8     61 6E 64    | 	byte	"Unknown command"
331ab     00          | 	byte	0
331ac                 | LR__6116
331ac     53 74 61 63 
331b0     6B 20 75 6E 
331b4     64 65 72 66 
331b8     6C 6F 77    | 	byte	"Stack underflow"
331bb     00          | 	byte	0
331bc                 | LR__6117
331bc     43 61 6E 6E 
331c0     6F 74 20 65 
331c4     78 65 63 75 
331c8     74 65 20 67 
331cc     6F 74 6F 20 
331d0     6F 72 20 67 
331d4     6F 73 75 62 
331d8     20 69 6E 20 
331dc     74 68 65 20 
331e0     69 6D 6D 65 
331e4     64 69 61 74 
331e8     65 20 6D 6F 
331ec     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
331ee     00          | 	byte	0
331ef                 | LR__6118
331ef     43 61 6E 6E 
331f3     6F 74 20 6C 
331f7     6F 61 64 20 
331fb     66 72 6F 6D 
331ff     20 74 68 69 
33203     73 20 66 69 
33207     6C 65       | 	byte	"Cannot load from this file"
33209     00          | 	byte	0
3320a                 | LR__6119
3320a     54 68 65 20 
3320e     70 72 6F 67 
33212     72 61 6D 20 
33216     69 73 20 65 
3321a     6D 70 74 79 | 	byte	"The program is empty"
3321e     00          | 	byte	0
3321f                 | LR__6120
3321f     49 66 20 61 
33223     66 74 65 72 
33227     20 69 66    | 	byte	"If after if"
3322a     00          | 	byte	0
3322b                 | LR__6121
3322b     45 6D 70 74 
3322f     79 20 65 78 
33233     70 72 65 73 
33237     73 69 6F 6E | 	byte	"Empty expression"
3323b     00          | 	byte	0
3323c                 | LR__6122
3323c     53 74 72 69 
33240     6E 67 20 65 
33244     78 70 65 63 
33248     74 65 64    | 	byte	"String expected"
3324b     00          | 	byte	0
3324c                 | LR__6123
3324c     49 6E 74 65 
33250     72 70 72 65 
33254     74 65 72 20 
33258     69 6E 74 65 
3325c     72 6E 61 6C 
33260     20 65 72 72 
33264     6F 72       | 	byte	"Interpreter internal error"
33266     00          | 	byte	0
33267                 | LR__6124
33267     45 78 70 65 
3326b     63 74 65 64 
3326f     20 61 73 73 
33273     69 67 6E    | 	byte	"Expected assign"
33276     00          | 	byte	0
33277                 | LR__6125
33277     45 78 70 65 
3327b     63 74 65 64 
3327f     20 27 74 6F 
33283     27          | 	byte	"Expected 'to'"
33284     00          | 	byte	0
33285                 | LR__6126
33285     45 78 70 65 
33289     63 74 65 64 
3328d     20 69 6E 74 
33291     65 67 65 72 
33295     20 76 61 72 
33299     69 61 62 6C 
3329d     65          | 	byte	"Expected integer variable"
3329e     00          | 	byte	0
3329f                 | LR__6127
3329f     55 6E 69 6E 
332a3     69 74 69 61 
332a7     6C 69 7A 65 
332ab     64 20 76 61 
332af     72 69 61 62 
332b3     6C 65 20 69 
332b7     6E 20 27 6E 
332bb     65 78 74 27 
332bf     2C 20 75 73 
332c3     65 20 27 66 
332c7     6F 72 27 20 
332cb     62 65 66 6F 
332cf     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
332d1     00          | 	byte	0
332d2                 | LR__6128
332d2     4E 6F 20 6D 
332d6     6F 72 65 20 
332da     73 6C 6F 74 
332de     73 20 66 6F 
332e2     72 20 27 66 
332e6     6F 72 27    | 	byte	"No more slots for 'for'"
332e9     00          | 	byte	0
332ea                 | LR__6129
332ea     27 4E 65 78 
332ee     74 27 20 64 
332f2     6F 65 73 6E 
332f6     27 74 20 6D 
332fa     61 74 63 68 
332fe     20 27 66 6F 
33302     72 27       | 	byte	"'Next' doesn't match 'for'"
33304     00          | 	byte	0
33305                 | LR__6130
33305     27 47 6F 74 
33309     6F 27 20 74 
3330d     61 72 67 65 
33311     74 20 6C 69 
33315     6E 65 20 6E 
33319     6F 74 20 66 
3331d     6F 75 6E 64 | 	byte	"'Goto' target line not found"
33321     00          | 	byte	0
33322                 | LR__6131
33322     42 61 64 20 
33326     6E 75 6D 62 
3332a     65 72 20 6F 
3332e     66 20 70 61 
33332     72 61 6D 65 
33336     74 65 72 73 | 	byte	"Bad number of parameters"
3333a     00          | 	byte	0
3333b                 | LR__6132
3333b     46 75 6E 63 
3333f     74 69 6F 6E 
33343     20 75 6E 64 
33347     65 66 69 6E 
3334b     65 64 20 66 
3334f     6F 72 20 73 
33353     74 72 69 6E 
33357     67 73       | 	byte	"Function undefined for strings"
33359     00          | 	byte	0
3335a                 | LR__6133
3335a     42 61 64 20 
3335e     70 61 72 61 
33362     6D 65 74 65 
33366     72          | 	byte	"Bad parameter"
33367     00          | 	byte	0
33368                 | LR__6134
33368     43 61 6E 6E 
3336c     6F 74 20 64 
33370     65 63 6C 61 
33374     72 65 20 61 
33378     6E 20 61 72 
3337c     72 61 79 3A 
33380     20 74 68 65 
33384     20 76 61 72 
33388     69 61 62 6C 
3338c     65 20 65 78 
33390     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
33394     00          | 	byte	0
33395                 | LR__6135
33395     45 78 70 65 
33399     63 74 65 64 
3339d     20 27 28 27 | 	byte	"Expected '('"
333a1     00          | 	byte	0
333a2                 | LR__6136
333a2     45 78 70 65 
333a6     63 74 65 64 
333aa     20 27 29 27 
333ae     20 6F 72 20 
333b2     27 2C 27    | 	byte	"Expected ')' or ','"
333b5     00          | 	byte	0
333b6                 | LR__6137
333b6     4E 6F 20 6D 
333ba     6F 72 65 20 
333be     74 68 61 6E 
333c2     20 33 20 64 
333c6     69 6D 65 6E 
333ca     73 69 6F 6E 
333ce     73 20 73 75 
333d2     70 70 6F 72 
333d6     74 65 64    | 	byte	"No more than 3 dimensions supported"
333d9     00          | 	byte	0
333da                 | LR__6138
333da     56 61 72 69 
333de     61 62 6C 65 
333e2     20 6E 61 6D 
333e6     65 20 65 78 
333ea     70 65 63 74 
333ee     65 64       | 	byte	"Variable name expected"
333f0     00          | 	byte	0
333f1                 | LR__6139
333f1     54 79 70 65 
333f5     20 6E 61 6D 
333f9     65 20 65 78 
333fd     70 65 63 74 
33401     65 64       | 	byte	"Type name expected"
33403     00          | 	byte	0
33404                 | LR__6140
33404     54 79 70 65 
33408     20 6E 6F 74 
3340c     20 73 75 70 
33410     70 6F 72 74 
33414     65 64 20 79 
33418     65 74       | 	byte	"Type not supported yet"
3341a     00          | 	byte	0
3341b                 | LR__6141
3341b     41 72 72 61 
3341f     79 20 69 6E 
33423     64 65 78 20 
33427     6F 75 74 20 
3342b     6F 66 20 72 
3342f     61 6E 67 65 | 	byte	"Array index out of range"
33433     00          | 	byte	0
33434                 | LR__6142
33434     42 61 64 20 
33438     74 79 70 65 
3343c     20 77 68 69 
33440     6C 65 20 61 
33444     73 73 69 67 
33448     6E 69 6E 67 
3344c     20 74 6F 20 
33450     61 72 72 61 
33454     79          | 	byte	"Bad type while assigning to array"
33455     00          | 	byte	0
33456                 | LR__6143
33456     54 6F 6F 20 
3345a     6D 61 6E 79 
3345e     20 76 61 72 
33462     69 61 62 6C 
33466     65 73       | 	byte	"Too many variables"
33468     00          | 	byte	0
33469                 | LR__6144
33469     27 54 68 65 
3346d     6E 27 20 65 
33471     78 70 65 63 
33475     74 65 64    | 	byte	"'Then' expected"
33478     00          | 	byte	0
33479                 | LR__6145
33479     44 69 72 65 
3347d     63 74 6F 72 
33481     79 20 64 6F 
33485     65 73 6E 27 
33489     74 20 65 78 
3348d     69 73 74    | 	byte	"Directory doesn't exist"
33490     00          | 	byte	0
33491                 | LR__6146
33491     55 6E 65 78 
33495     70 65 63 74 
33499     65 64 20 65 
3349d     6E 64 20 6F 
334a1     66 20 6C 69 
334a5     6E 65       | 	byte	"Unexpected end of line"
334a7     00          | 	byte	0
334a8                 | LR__6147
334a8     4E 6F 20 6D 
334ac     6F 72 65 20 
334b0     64 61 74 61 | 	byte	"No more data"
334b4     00          | 	byte	0
334b5                 | LR__6148
334b5     45 72 72 6F 
334b9     72 20       | 	byte	"Error "
334bb     00          | 	byte	0
334bc                 | LR__6149
334bc     20 2D 20    | 	byte	" - "
334bf     00          | 	byte	0
334c0                 | LR__6150
334c0     20 69 6E 20 
334c4     6C 69 6E 65 
334c8     20          | 	byte	" in line "
334c9     00          | 	byte	0
334ca                 | LR__6151
334ca                 | 	byte	
334ca     00          | 	byte	0
334cb                 | LR__6152
334cb     2F 73 64    | 	byte	"/sd"
334ce     00          | 	byte	0
334cf                 | LR__6153
334cf     2F 73 64 2F 
334d3     62 61 73    | 	byte	"/sd/bas"
334d6     00          | 	byte	0
334d7                 | LR__6154
334d7     2F 73 64 2F 
334db     62 61 73    | 	byte	"/sd/bas"
334de     00          | 	byte	0
334df                 | LR__6155
334df     20 42 41 53 
334e3     49 43 20 62 
334e7     79 74 65 73 
334eb     20 66 72 65 
334ef     65          | 	byte	" BASIC bytes free"
334f0     00          | 	byte	0
334f1                 | LR__6156
334f1     52 65 61 64 
334f5     79          | 	byte	"Ready"
334f6     00          | 	byte	0
334f7                 | LR__6157
334f7     6E 6F 6E 61 
334fb     6D 65 2E 62 
334ff     61 73       | 	byte	"noname.bas"
33501     00          | 	byte	0
33502                 | LR__6158
33502     2F 73 64 2F 
33506     62 61 73 2F 
3350a     61 75 74 6F 
3350e     72 75 6E 2E 
33512     62 61 73    | 	byte	"/sd/bas/autorun.bas"
33515     00          | 	byte	0
33516                 | LR__6159
33516     72 75 6E 20 
3351a     61 75 74 6F 
3351e     72 75 6E 2E 
33522     62 61 73    | 	byte	"run autorun.bas"
33525     00          | 	byte	0
33526                 | LR__6160
33526                 | 	byte	
33526     00          | 	byte	0
33527     00          | 	alignl
33528                 | _dat_
33528     00 00 00 00 
3352c     00 00 00 00 
33530     00 00 00 00 
33534     00 00 00 00 | 	byte	$00[16]
33538     61 41 17 0E 
3353c     62 42 00 00 
33540     63 43 19 10 
33544     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
33548     65 45 18 0F 
3354c     66 46 00 00 
33550     67 47 00 00 
33554     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
33558     69 49 00 00 
3355c     6A 4A 00 00 
33560     6B 4B 00 00 
33564     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
33568     6D 4D 00 00 
3356c     6E 4E 1A 11 
33570     6F 4F 1E 15 
33574     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
33578     71 51 00 00 
3357c     72 52 00 00 
33580     73 53 1B 12 
33584     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
33588     75 55 00 00 
3358c     76 56 00 00 
33590     77 57 00 00 
33594     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
33598     79 59 00 00 
3359c     7A 5A 1D 14 
335a0     31 21 04 00 
335a4     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
335a8     33 23 06 00 
335ac     34 24 07 00 
335b0     35 25 08 00 
335b4     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
335b8     37 26 0A 00 
335bc     38 2A 0B 00 
335c0     39 28 0C 00 
335c4     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
335c8     8D 8D 00 00 
335cc     9B 9B 00 00 
335d0     88 88 00 00 
335d4     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
335d8     20 20 00 00 
335dc     2D 5F 00 00 
335e0     3D 2B 00 00 
335e4     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
335e8     5D 7D 00 00 
335ec     5C 7C 00 00 
335f0     23 7E 00 00 
335f4     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
335f8     27 22 00 00 
335fc     60 7E 03 00 
33600     2C 3C 00 00 
33604     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
33608     2F 3F 00 00 
3360c     B9 B9 00 00 
33610     BA 00 00 00 
33614     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
33618     BC 00 00 00 
3361c     BD 00 00 00 
33620     BE 00 00 00 
33624     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
33628     C0 00 00 00 
3362c     C1 00 00 00 
33630     C2 00 00 00 
33634     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
33638     C4 00 00 00 
3363c     C5 00 00 00 
33640     C6 00 00 00 
33644     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
33648     C8 00 00 00 
3364c     C9 00 00 00 
33650     CA 00 00 00 
33654     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
33658     7F 7F 00 00 
3365c     CC 00 00 00 
33660     CD 00 00 00 
33664     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
33668     CF 00 00 00 
3366c     D0 00 00 00 
33670     D1 00 00 00 
33674     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
33678     2F 2F 00 00 
3367c     2A 2A 00 00 
33680     2D 2D 00 00 
33684     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
33688     8D 8D 00 00 
3368c     31 31 00 00 
33690     32 32 00 00 
33694     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
33698     34 34 00 00 
3369c     35 35 00 00 
336a0     36 36 00 00 
336a4     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
336a8     38 38 00 00 
336ac     39 39 00 00 
336b0     30 30 00 00 
336b4     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
336b8     5C 7C 00 00 
336bc     00 00 00 00 
336c0     00 00 00 00 
336c4     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
336c8     00 00 00 00 
      ...             
33720     00 00 00 00 
33724     00 00 00 00 | 	byte	$00[96]
33728     2B 00 A6 F2 
3372c     24 A7 09 80 
33730     5B 88 4D 89 
33734     80 88 A5 88 | atari_spl file "atari.spl"
33738     6D 88 B8 88 
3373c     80 88 CB 88 
33740     92 88 A5 88 
33744     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
33748     A5 88 CA 88 
3374c     A6 88 DD 88 
33750     B8 88 AB 89 
33754     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
33758     C8 AD C6 F1 
3375c     91 06 B6 FF 
33760     13 00 4A 00 
33764     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
33768     5D 00 5E 00 
3376c     5D 00 5E 00 
33770     5E 00 5D 00 
33774     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
33778     38 00 83 00 
3377c     25 00 83 00 
33780     C3 FE D1 04 
33784     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
33788     48 88 38 85 
3378c     41 8A CB 88 
33790     28 89 B8 88 
33794     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
33798     15 89 03 89 
3379c     02 89 15 89 
337a0     16 89 15 89 
337a4     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
337a8     15 89 3A 89 
337ac     72 89 E3 89 
337b0     52 83 AD 97 
337b4     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
337b8     0C 02 B6 FF 
337bc     E1 00 A8 00 
337c0     F3 00 A8 00 
337c4     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
337c8     CE 00 CD 00 
337cc     CD 00 BA 00 
337d0     E1 00 BB 00 
337d4     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
337d8     DF 00 C9 FF 
337dc     E6 01 B6 06 
337e0     EE DD 8D 98 
337e4     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
337e8     97 89 73 89 
337ec     3B 89 60 89 
337f0     60 89 60 89 
337f4     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
337f8     73 89 72 89 
337fc     85 89 73 89 
33800     AA 89 60 89 
33804     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
33808     E8 8A 18 86 
3380c     92 88 A5 C2 
33810     E0 00 C3 05 
33814     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
33818     F2 00 64 01 
3381c     06 01 3E 01 
33820     2B 01 2B 01 
33824     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
33828     2B 01 2A 01 
3382c     2B 01 2B 01 
33830     2B 01 18 01 
33834     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
33838     39 07 61 F3 
3383c     C0 AF 37 85 
33840     0F 88 8B 8A 
33844     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
33848     AB 89 D0 89 
3384c     AB 89 D0 89 
33850     D0 89 CF 89 
33854     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
33858     D0 89 F5 89 
3385c     BD 89 08 8A 
33860     CF 89 E8 8A 
33864     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
33868     53 B3 0D F8 
3386c     F4 07 38 00 
33870     63 01 63 01 
33874     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
33878     88 01 88 01 
3387c     76 01 88 01 
33880     88 01 89 01 
33884     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
33888     75 01 AE 01 
3388c     76 01 88 01 
33890     4A 00 46 06 
33894     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
33898     08 8A 9A 86 
3389c     33 8B 08 8A 
338a0     2D 8A F5 89 
338a4     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
338a8     2D 8A 2D 8A 
338ac     2E 8A 1B 8A 
338b0     40 8A 2D 8A 
338b4     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
338b8     2E 8A 79 8A 
338bc     66 8A C8 8B 
338c0     72 82 2B 97 
338c4     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
338c8     1D 02 05 01 
338cc     F8 01 C0 01 
338d0     0B 02 C0 01 
338d4     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
338d8     F9 01 D3 01 
338dc     F8 01 D3 01 
338e0     F8 01 D2 01 
338e4     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
338e8     E6 01 2B 01 
338ec     8E 02 5F 07 
338f0     F7 E2 ED 9C 
338f4     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
338f8     E8 8A 78 8A 
338fc     78 8A 65 8A 
33900     8B 8A 78 8A 
33904     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
33908     8B 8A 9D 8A 
3390c     9D 8A 8B 8A 
33910     C2 8A 78 8A 
33914     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
33918     70 8C 18 86 
3391c     8B 8A 23 C9 
33920     CB 03 C4 05 
33924     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
33928     0B 02 7B 02 
3392c     1E 02 55 02 
33930     30 02 43 02 
33934     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
33938     43 02 44 02 
3393c     43 02 30 02 
33940     68 02 31 02 
33944     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
33948     07 08 3F F7 
3394c     73 B2 13 85 
33950     15 89 ED 8B 
33954     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
33958     B0 8A FB 8A 
3395c     D5 8A FA 8A 
33960     E8 8A FB 8A 
33964     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
33968     E8 8A 21 8B 
3396c     E7 8A 33 8B 
33970     E8 8A 26 8C 
33974     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
33978     8D B0 27 F6 
3397c     9C 08 AD 01 
33980     7B 02 8D 02 
33984     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
33988     A1 02 A0 02 
3398c     A1 02 A0 02 
33990     A0 02 A0 02 
33994     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
33998     7B 02 D8 02 
3399c     7B 02 C6 02 
339a0     3E 01 C3 05 
339a4     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
339a8     00 8C 2A 86 
339ac     E0 8C FA 8A 
339b0     6A 8B FB 8A 
339b4     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
339b8     45 8B 45 8B 
339bc     45 8B 6B 8B 
339c0     46 8B 59 8B 
339c4     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
339c8     6B 8B 6B 8B 
339cc     6B 8B 6B 8B 
339d0     7D 8B 7D 8B 
339d4     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
339d8     90 8B 91 8B 
339dc     90 8B 90 8B 
339e0     A3 8B A3 8B 
339e4     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
339e8     B5 8B B6 8B 
339ec     B5 8B B5 8B 
339f0     B6 8B C8 8B 
339f4     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
339f8     C8 8B DA 8B 
339fc     DB 8B DB 8B 
33a00     DB 8B DC 8B 
33a04     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
33a08     EE 8B EE 8B 
33a0c     00 8C 01 8C 
33a10     00 8C 01 8C 
33a14     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
33a18     12 8C 13 8C 
33a1c     13 8C 26 8C 
33a20     26 8C 26 8C 
33a24     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
33a28     38 8C 38 8C 
33a2c     38 8C 38 8C 
33a30     4B 8C 4B 8C 
33a34     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
33a38     5E 8C 5E 8C 
33a3c     5E 8C 5E 8C 
33a40     70 8C 70 8C 
33a44     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
33a48     70 8C 83 8C 
33a4c     83 8C 83 8C 
33a50     83 8C 96 8C 
33a54     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
33a58     95 8C A9 8C 
33a5c     A9 8C A8 8C 
33a60     A8 8C A8 8C 
33a64     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
33a68     BB 8C BB 8C 
33a6c     BB 8C CE 8C 
33a70     CE 8C CE 8C 
33a74     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
33a78     E0 8C E1 8C 
33a7c     E1 8C E0 8C 
33a80     F4 8C F2 8C 
33a84     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
33a88     05 8D 05 8D 
33a8c     06 8D 06 8D 
33a90     19 8D 19 8D 
33a94     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
33a98     18 8D 2B 8D 
33a9c     2B 8D 2B 8D 
33aa0     2A 8D 3E 8D 
33aa4     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
33aa8     3E 8D 51 8D 
33aac     50 8D 50 8D 
33ab0     50 8D 51 8D 
33ab4     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
33ab8     63 8D 64 8D 
33abc     76 8D 75 8D 
33ac0     75 8D 76 8D 
33ac4     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
33ac8     88 8D 88 8D 
33acc     89 8D 9B 8D 
33ad0     9A 8D 9B 8D 
33ad4     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
33ad8     AD 8D AE 8D 
33adc     AD 8D AE 8D 
33ae0     C1 8D C1 8D 
33ae4     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
33ae8     D3 8D D3 8D 
33aec     D3 8D D3 8D 
33af0     D3 8D E6 8D 
33af4     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
33af8     E6 8D E6 8D 
33afc     F9 8D F9 8D 
33b00     F9 8D F8 8D 
33b04     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
33b08     0B 8E 0B 8E 
33b0c     1D 8E 1D 8E 
33b10     1E 8E 1E 8E 
33b14     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
33b18     31 8E 31 8E 
33b1c     31 8E 42 8E 
33b20     43 8E 43 8E 
33b24     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
33b28     56 8E 56 8E 
33b2c     55 8E 56 8E 
33b30     68 8E 69 8E 
33b34     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
33b38     69 8E 7B 8E 
33b3c     7C 8E 7B 8E 
33b40     7B 8E 8D 8E 
33b44     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
33b48     8D 8E A1 8E 
33b4c     A0 8E A1 8E 
33b50     A1 8E A0 8E 
33b54     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
33b58     B3 8E B3 8E 
33b5c     C6 8E C5 8E 
33b60     C6 8E C6 8E 
33b64     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
33b68     D8 8E D9 8E 
33b6c     D8 8E EC 8E 
33b70     EB 8E EC 8E 
33b74     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
33b78     FE 8E FE 8E 
33b7c     FE 8E FE 8E 
33b80     10 8F 10 8F 
33b84     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
33b88     11 8F 23 8F 
33b8c     24 8F 23 8F 
33b90     24 8F 37 8F 
33b94     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
33b98     36 8F 36 8F 
33b9c     48 8F 49 8F 
33ba0     49 8F 49 8F 
33ba4     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
33ba8     5B 8F 5C 8F 
33bac     5B 8F 6E 8F 
33bb0     6E 8F 6E 8F 
33bb4     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
33bb8     81 8F 81 8F 
33bbc     81 8F 81 8F 
33bc0     93 8F 93 8F 
33bc4     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
33bc8     93 8F A6 8F 
33bcc     A6 8F A6 8F 
33bd0     A6 8F B9 8F 
33bd4     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
33bd8     B9 8F B9 8F 
33bdc     CC 8F CB 8F 
33be0     CB 8F CC 8F 
33be4     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
33be8     DF 8F DE 8F 
33bec     DE 8F F1 8F 
33bf0     F1 8F F1 8F 
33bf4     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
33bf8     03 90 04 90 
33bfc     04 90 04 90 
33c00     16 90 17 90 
33c04     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
33c08     29 90 28 90 
33c0c     29 90 28 90 
33c10     29 90 3C 90 
33c14     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
33c18     3C 90 4F 90 
33c1c     4E 90 4E 90 
33c20     4E 90 4E 90 
33c24     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
33c28     61 90 61 90 
33c2c     73 90 74 90 
33c30     74 90 74 90 
33c34     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
33c38     87 90 86 90 
33c3c     87 90 86 90 
33c40     99 90 99 90 
33c44     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
33c48     AB 90 AB 90 
33c4c     AC 90 AB 90 
33c50     AB 90 BF 90 
33c54     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
33c58     BE 90 D1 90 
33c5c     D0 90 D1 90 
33c60     D1 90 D1 90 
33c64     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
33c68     E3 90 E4 90 
33c6c     F6 90 F6 90 
33c70     F6 90 F6 90 
33c74     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
33c78     09 91 0A 91 
33c7c     0A 91 1C 91 
33c80     1C 91 1C 91 
33c84     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
33c88     2F 91 2E 91 
33c8c     2F 91 2F 91 
33c90     2E 91 41 91 
33c94     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
33c98     41 91 53 91 
33c9c     54 91 54 91 
33ca0     53 91 54 91 
33ca4     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
33ca8     67 91 67 91 
33cac     79 91 7A 91 
33cb0     79 91 78 91 
33cb4     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
33cb8     8C 91 8B 91 
33cbc     8C 91 8C 91 
33cc0     9E 91 9E 91 
33cc4     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
33cc8     B1 91 B1 91 
33ccc     B2 91 B1 91 
33cd0     B1 91 C4 91 
33cd4     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
33cd8     C4 91 D6 91 
33cdc     D7 91 D7 91 
33ce0     D7 91 D6 91 
33ce4     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
33ce8     EA 91 EA 91 
33cec     EA 91 FC 91 
33cf0     FC 91 FB 91 
33cf4     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
33cf8     0E 92 0F 92 
33cfc     0F 92 0E 92 
33d00     21 92 21 92 
33d04     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
33d08     21 92 34 92 
33d0c     33 92 34 92 
33d10     34 92 47 92 
33d14     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
33d18     46 92 47 92 
33d1c     59 92 59 92 
33d20     59 92 59 92 
33d24     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
33d28     6C 92 6C 92 
33d2c     6B 92 7E 92 
33d30     7E 92 7E 92 
33d34     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
33d38     92 92 91 92 
33d3c     91 92 90 92 
33d40     91 92 A4 92 
33d44     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
33d48     A3 92 B6 92 
33d4c     B6 92 B7 92 
33d50     B7 92 B6 92 
33d54     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
33d58     CA 92 C9 92 
33d5c     CA 92 DC 92 
33d60     DC 92 DC 92 
33d64     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
33d68     EF 92 EF 92 
33d6c     EF 92 EF 92 
33d70     01 93 01 93 
33d74     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
33d78     15 93 14 93 
33d7c     14 93 14 93 
33d80     14 93 27 93 
33d84     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
33d88     27 93 39 93 
33d8c     3A 93 39 93 
33d90     39 93 39 93 
33d94     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
33d98     4B 93 4C 93 
33d9c     5F 93 5F 93 
33da0     5F 93 5E 93 
33da4     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
33da8     5F 93 84 93 
33dac     4C 93 96 93 
33db0     5F 93 AE 94 
33db4     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
33db8     7B C1 00 00 
33dbc     00 00 00 00 
33dc0     00 00 00 00 
33dc4     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33dc8     00 00 00 00 | 	byte	$00, $00, $00, $00
33dcc     7A D7 00 80 
33dd0     87 8A 48 8F 
33dd4     EC 8C 76 8D 
33dd8     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
33ddc     3C 8D 82 8D 
33de0     42 8D 88 8D 
33de4     8C 8D 8E 8D 
33de8     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
33dec     97 8D DE 8D 
33df0     E1 8D F1 8E 
33df4     D8 8C A3 83 
33df8     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
33dfc     65 71 C9 65 
33e00     FC 64 C4 65 
33e04     C1 65 BF 65 
33e08     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
33e0c     B6 65 B4 65 
33e10     B2 65 AE 65 
33e14     AC 65 ED 65 
33e18     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
33e1c     5E 65 25 66 
33e20     FA 62 23 6B 
33e24     B5 6C 61 0A 
33e28     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
33e2c     5D 90 BE 8D 
33e30     47 8E C3 8D 
33e34     09 8E C9 8D 
33e38     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
33e3c     15 8E 19 8E 
33e40     1B 8E 62 8E 
33e44     64 8E 68 8E 
33e48     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
33e4c     B5 8E 4C 90 
33e50     FA 84 3C 9D 
33e54     98 13 79 6D 
33e58     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
33e5c     D9 66 50 66 
33e60     D4 66 4B 66 
33e64     8C 66 46 66 
33e68     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
33e6c     81 66 3A 66 
33e70     7C 66 36 66 
33e74     76 66 30 66 
33e78     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
33e7c     6B 66 88 72 
33e80     BF 37 E7 B7 
33e84     75 83 8B 8E 
33e88     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
33e8c     94 8E 96 8E 
33e90     DD 8E 9C 8E 
33e94     E2 8E A2 8E 
33e98     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
33e9c     EE 8E AE 8E 
33ea0     38 8F B5 8E 
33ea4     3F 8F FD 8E 
33ea8     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
33eac     A5 87 1E E3 
33eb0     6D 5D FA 71 
33eb4     41 64 25 67 
33eb8     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
33ebc     D9 66 1A 67 
33ec0     18 67 15 67 
33ec4     12 67 0F 67 
33ec8     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
33ecc     07 67 C0 66 
33ed0     01 67 BC 66 
33ed4     B8 66 DE 64 
33ed8     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
33edc     43 E5 1F 8B 
33ee0     14 8A F1 90 
33ee4     1C 8F 63 8F 
33ee8     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
33eec     29 8F 6E 8F 
33ef0     72 8F 75 8F 
33ef4     34 8F BE 8F 
33ef8     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
33efc     84 8F 87 8F 
33f00     CC 8F 56 90 
33f04     67 91 49 80 
33f08     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
33f0c     46 77 A6 66 
33f10     E8 66 B0 67 
33f14     AD 67 ED 67 
33f18     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
33f1c     A2 67 E3 67 
33f20     9D 67 9A 67 
33f24     98 67 94 67 
33f28     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
33f2c     49 67 CD 67 
33f30     28 65 5F 6E 
33f34     82 67 3A 01 
33f38     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
33f3c     C2 91 A9 8F 
33f40     EF 8F AE 8F 
33f44     F4 8F B5 8F 
33f48     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
33f4c     01 90 03 90 
33f50     07 90 09 90 
33f54     0C 90 53 90 
33f58     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
33f5c     18 90 44 93 
33f60     85 84 D6 9D 
33f64     87 1F 2F 75 
33f68     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
33f6c     C4 68 F6 67 
33f70     BE 68 F1 67 
33f74     76 68 2E 68 
33f78     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
33f7c     27 68 24 68 
33f80     64 68 1E 68 
33f84     5F 68 19 68 
33f88     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
33f8c     DC 68 56 72 
33f90     7E 36 C2 B8 
33f94     D7 84 73 90 
33f98     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
33f9c     7B 90 7F 90 
33fa0     82 90 84 90 
33fa4     CB 90 8B 90 
33fa8     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
33fac     D7 90 96 90 
33fb0     20 91 59 90 
33fb4     25 91 A2 90 
33fb8     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
33fbc     D0 89 40 EE 
33fc0     12 64 C4 71 
33fc4     29 66 0C 69 
33fc8     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
33fcc     C0 68 02 69 
33fd0     FE 68 FB 68 
33fd4     F9 68 F6 68 
33fd8     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
33fdc     EE 68 A8 68 
33fe0     2C 69 5F 68 
33fe4     E2 68 81 66 
33fe8     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
33fec     1E EB A6 8A 
33ff0     73 8B 5E 93 
33ff4     7B 90 48 91 
33ff8     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
33ffc     0D 91 11 91 
34000     14 91 16 91 
34004     5C 91 1C 91 
34008     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
3400c     68 91 AF 91 
34010     2A 91 B5 91 
34014     75 91 1A 94 
34018     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
3401c     70 0E CB 6C 
34020     5D 6E C4 67 
34024     99 69 54 69 
34028     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
3402c     D2 69 49 69 
34030     89 69 86 69 
34034     40 69 C4 69 
34038     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
3403c     35 69 76 69 
34040     58 67 EB 6D 
34044     E9 6D 89 0F 
34048     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
3404c     33 94 94 91 
34050     D9 91 56 91 
34054     E0 91 9F 91 
34058     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
3405c     EC 91 EE 91 
34060     F1 91 F4 91 
34064     F7 91 3D 92 
34068     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
3406c     46 92 21 94 
34070     11 89 A4 9D 
34074     FD 0E 8F 6C 
34078     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
3407c     28 6A E1 69 
34080     65 6A 1F 6A 
34084     5F 6A 1A 6A 
34088     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
3408c     54 6A 0F 6A 
34090     4F 6A 09 6A 
34094     06 6A 03 6A 
34098     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
3409c     23 68 69 77 
340a0     3A 4D 38 CA 
340a4     38 86 4E 91 
340a8     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
340ac     64 92 24 92 
340b0     6A 92 2A 92 
340b4     70 92 30 92 
340b8     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
340bc     7B 92 7E 92 
340c0     C5 92 84 92 
340c4     CB 92 8A 92 
340c8     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
340cc     4D 8D F9 E2 
340d0     97 59 FE 74 
340d4     DB 68 6D 6A 
340d8     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
340dc     A8 6A A5 6A 
340e0     A3 6A 9F 6A 
340e4     9D 6A 9B 6A 
340e8     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
340ec     D6 6A 8F 6A 
340f0     CF 6A 46 6A 
340f4     CA 6A E1 67 
340f8     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
340fc     D3 F7 15 92 
34100     90 8C BF 94 
34104     A6 92 EB 92 
34108     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
3410c     B1 92 F7 92 
34110     FA 92 FD 92 
34114     00 93 02 93 
34118     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
3411c     4F 93 52 93 
34120     54 93 22 94 
34124     5A 93 8F 88 
34128     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
3412c     1C 77 07 6C 
34130     E8 69 7A 6B 
34134     34 6B 75 6B 
34138     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
3413c     29 6B 26 6B 
34140     24 6B 21 6B 
34144     1D 6B 5E 6B 
34148     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
3414c     12 6B 52 6B 
34150     34 69 34 6E 
34154     BA 73 A4 24 
34158     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
3415c     7A 94 B3 93 
34160     72 93 31 93 
34164     78 93 7A 93 
34168     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
3416c     83 93 86 93 
34170     89 93 D0 93 
34174     D2 93 D5 93 
34178     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
3417c     DD 93 40 96 
34180     30 8B 99 9C 
34184     52 10 94 71 
34188     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
3418c     46 6C 79 6B 
34190     40 6C B7 6B 
34194     F7 6B B1 6B 
34198     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
3419c     EC 6B A5 6B 
341a0     A2 6B 9F 6B 
341a4     9D 6B 9A 6B 
341a8     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
341ac     C8 6A E4 76 
341b0     20 4B F9 CE 
341b4     2E 8A 1A 92 
341b8     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
341bc     FB 93 BA 93 
341c0     01 94 03 94 
341c4     4A 94 09 94 
341c8     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
341cc     55 94 14 94 
341d0     9E 94 1A 94 
341d4     61 94 20 94 
341d8     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
341dc     3E 87 E5 CD 
341e0     5F 50 6C 78 
341e4     B5 6A 04 6C 
341e8     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
341ec     83 6C 7F 6C 
341f0     7C 6C 36 6C 
341f4     76 6C 74 6C 
341f8     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
341fc     6B 6C 25 6C 
34200     66 6C 1F 6C 
34204     1D 6C 41 6A 
34208     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
3420c     BA FA FC 94 
34210     5B 8D 97 96 
34214     3B 94 C5 94 
34218     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
3421c     89 94 8C 94 
34220     8F 94 92 94 
34224     94 94 DB 94 
34228     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
3422c     E4 94 E7 94 
34230     2D 95 74 95 
34234     C8 96 15 89 
34238     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
3423c     CB 75 31 6F 
34240     7E 6B 10 6D 
34244     C9 6C 0A 6D 
34248     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
3424c     BD 6C FF 6C 
34250     FB 6C F9 6C 
34254     B2 6C F3 6C 
34258     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
3425c     A7 6C E8 6C 
34260     0D 6B 85 6F 
34264     C7 74 10 28 
34268     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
3426c     96 96 47 95 
34270     06 95 0A 95 
34274     0C 95 0F 95 
34278     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
3427c     17 95 5E 95 
34280     61 95 63 95 
34284     22 95 AC 95 
34288     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
3428c     72 95 17 98 
34290     59 8E 01 96 
34294     CF FC 5A 68 
34298     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
3429c     96 6D 50 6D 
342a0     D5 6D 4A 6D 
342a4     8C 6D 89 6D 
342a8     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
342ac     80 6D 3A 6D 
342b0     7A 6D 77 6D 
342b4     75 6D 71 6D 
342b8     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
342bc     18 6C BC 78 
342c0     9A 4F 7E CF 
342c4     1F 89 F1 93 
342c8     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
342cc     D2 95 4E 95 
342d0     D7 95 53 95 
342d4     DD 95 E0 95 
342d8     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
342dc     A5 95 EB 95 
342e0     EE 95 F0 95 
342e4     37 96 B3 95 
342e8     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
342ec     1A 98 D5 8D 
342f0     C5 9F CD 0F 
342f4     0F 71 F3 73 
342f8     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
342fc     D9 6D 5E 6E 
34300     D3 6D 58 6E 
34304     12 6E 0F 6E 
34308     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
3430c     49 6E BF 6D 
34310     87 6E 76 6D 
34314     81 6E 11 6B 
34318     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
3431c     3F 09 44 95 
34320     E5 8D 3F 99 
34324     D4 95 A2 96 
34328     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
3432c     23 96 69 96 
34330     6B 96 6E 96 
34334     71 96 74 96 
34338     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
3433c     BF 96 3C 96 
34340     C6 96 C8 96 
34344     A3 98 51 8D 
34348     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
3434c     CF 75 29 73 
34350     90 6C EC 6E 
34354     62 6E E7 6E 
34358     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
3435c     9A 6E 98 6E 
34360     95 6E 91 6E 
34364     8E 6E CF 6E 
34368     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
3436c     40 6E C3 6E 
34370     E8 6C 45 6F 
34374     A5 7B C9 35 
34378     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
3437c     2D 98 23 97 
34380     E1 96 A0 96 
34384     A4 96 EA 96 
34388     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
3438c     AF 96 F4 96 
34390     F8 96 3E 97 
34394     FD 96 43 97 
34398     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
3439c     08 97 6B 99 
343a0     D6 92 88 91 
343a4     D8 EE 84 66 
343a8     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
343ac     2E 6F E7 6E 
343b0     6C 6F 24 6F 
343b4     21 6F 1F 6F 
343b8     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
343bc     17 6F 13 6F 
343c0     54 6F 0E 6F 
343c4     0B 6F 4B 6F 
343c8     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
343cc     27 6D 1C 7B 
343d0     19 59 9F DB 
343d4     66 8E BC 94 
343d8     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
343dc     67 97 26 97 
343e0     6D 97 2B 97 
343e4     72 97 32 97 
343e8     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
343ec     C1 97 7F 97 
343f0     C6 97 85 97 
343f4     CB 97 CE 97 
343f8     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
343fc     EC 8A C4 C6 
34400     68 4C F4 7D 
34404     63 6E E8 6E 
34408     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
3440c     ED 6F A7 6F 
34410     E7 6F A0 6F 
34414     E1 6F 9B 6F 
34418     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
3441c     D5 6F 8F 6F 
34420     CE 6F 45 6F 
34424     86 6F 68 6D 
34428     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
3442c     C0 13 AD A2 
34430     A7 8E 79 99 
34434     E6 97 E8 97 
34438     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
3443c     F1 97 F3 97 
34440     F6 97 F9 97 
34444     FB 97 FE 97 
34448     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
3444c     4A 98 0A 98 
34450     93 98 0F 98 
34454     7F 9B BF 8C 
34458     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
3445c     91 7B 62 73 
34460     1A 6E B9 70 
34464     EB 6F B3 70 
34468     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
3446c     25 70 20 70 
34470     1E 70 1B 70 
34474     18 70 15 70 
34478     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
3447c     0D 70 09 70 
34480     07 70 03 70 
34484     01 70 FD 6F 
34488     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
3448c     F6 6F F2 6F 
34490     EF 6F EC 6F 
34494     2C 70 E6 6F 
34498     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
3449c     DD 6F 97 6F 
344a0     D7 6F 84 6E 
344a4     8F 6F 3F 7D 
344a8     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
344aa     FF FF FF FF 
344ae     FF FF       | atarist_spl file "atarist.spl" '512
344b0     00 00 00 00 
344b4     00 00 00 00 
344b8     00 00       | 	byte	$00[10]
344ba     17 7F F2 7F 
344be     B2 7F 72 7F 
344c2     33 7F F4 7E 
344c6     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
344ca     36 7E F5 7D 
344ce     E9 51 F2 0D 
344d2     8E 00 F3 FD 
344d6     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
344da     57 FD 58 FD 
344de     5B FD 5C FD 
344e2     5C FD 60 7D 
344e6     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
344ea     D6 7C 98 7C 
344ee     59 7C 1A 7C 
344f2     DC 7B 9E 7B 
344f6     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
344fa     F3 05 00 FD 
344fe     41 FB EA FA 
34502     D9 FA DB FA 
34506     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
3450a     E4 FA 9B 36 
3450e     F8 7A C0 7A 
34512     84 7A 45 7A 
34516     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
3451a     8E 79 51 79 
3451e     15 79 D7 78 
34522     3C 1F EB FF 
34526     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
3452a     6D F8 65 F8 
3452e     68 F8 6D F8 
34532     70 F8 74 F8 
34536     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
3453a     AB 60 79 60 
3453e     4B 60 1A 60 
34542     E9 5F B9 5F 
34546     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
3454a     FB 59 B2 0B 
3454e     92 FA 3A F7 
34552     96 F6 79 F6 
34556     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
3455a     82 F6 86 F6 
3455e     8C F6 DB 5D 
34562     F1 5E C1 5E 
34566     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
3456a     34 5E 04 5E 
3456e     D6 5D A6 5D 
34572     78 5D D4 3E 
34576     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
3457a     27 F5 BA F4 
3457e     AB F4 AD F4 
34582     B2 F4 B8 F4 
34586     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
3458a     26 5D 2B 5D 
3458e     FC 5C CD 5C 
34592     9F 5C 70 5C 
34596     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
3459a     E5 5B B8 5B 
3459e     DB 24 A7 FC 
345a2     D1 F4 4D F3 
345a6     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
345aa     04 F3 0B F3 
345ae     11 F3 16 F3 
345b2     DE 18 98 5B 
345b6     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
345ba     4E 4A 29 48 
345be     A0 47 6A 47 
345c2     43 47 20 47 
345c6     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
345ca     E2 F6 98 F2 
345ce     C5 F1 A3 F1 
345d2     A3 F1 A8 F1 
345d6     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
345da     BF F1 00 3D 
345de     EF 46 CD 46 
345e2     AA 46 86 46 
345e6     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
345ea     1C 46 F9 45 
345ee     D7 45 EE 43 
345f2     DE 02 E8 F3 
345f6     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
345fa     61 F0 65 F0 
345fe     6D F0 74 F0 
34602     7C F0 84 F0 
34606     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
3460a     8E 45 6D 45 
3460e     49 45 27 45 
34612     05 45 E1 44 
34616     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
3461a     F1 2F A9 FB 
3461e     8B F1 9B EF 
34622     40 EF 36 EF 
34626     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
3462a     4D EF 56 EF 
3462e     5E EF 7B 44 
34632     8C 44 69 44 
34636     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
3463a     03 44 E1 43 
3463e     C0 43 F5 37 
34642     69 33 0F 11 
34646     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
3464a     66 EE 37 EE 
3464e     38 EE 40 EE 
34652     48 EE 51 EE 
34656     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
3465a     7D 32 6A 32 
3465e     51 32 37 32 
34662     1F 32 05 32 
34666     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
3466a     B9 31 A1 31 
3466e     F1 04 F4 F1 
34672     50 EE A0 ED 
34676     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
3467a     93 ED 9A ED 
3467e     A4 ED AD ED 
34682     F4 27 C1 31 
34686     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
3468a     78 31 5F 31 
3468e     46 31 2E 31 
34692     15 31 FC 30 
34696     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
3469a     C4 EF 4A ED 
3469e     DC EC CB EC 
346a2     D2 EC DA EC 
346a6     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
346aa     F9 EC 64 2F 
346ae     0A 31 F1 30 
346b2     D9 30 C0 30 
346b6     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
346ba     78 30 5F 30 
346be     46 30 38 23 
346c2     A6 F6 19 EE 
346c6     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
346ca     20 EC 28 EC 
346ce     32 EC 3C EC 
346d2     47 EC 51 EC 
346d6     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
346da     A3 22 93 22 
346de     7F 22 6E 22 
346e2     5D 22 4C 22 
346e6     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
346ea     77 09 76 F1 
346ee     CC EC F0 EB 
346f2     CD EB CE EB 
346f6     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
346fa     ED EB F5 EB 
346fe     3E F6 6B 22 
34702     5F 22 4E 22 
34706     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
3470a     1B 22 0B 22 
3470e     FA 21 E9 21 
34712     D8 21 4D FF 
34716     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
3471a     92 EB 7B EB 
3471e     82 EB 8C EB 
34722     97 EB A1 EB 
34726     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
3472a     15 22 04 22 
3472e     F3 21 E3 21 
34732     D2 21 C0 21 
34736     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
3473a     8E 21 7D 21 
3473e     9A F8 A4 ED 
34742     8E EB 2F EB 
34746     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
3474a     37 EB 42 EB 
3474e     4C EB 57 EB 
34752     B2 17 22 19 
34756     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
3475a     FD 18 EF 18 
3475e     E3 18 D6 18 
34762     CA 18 BD 18 
34766     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
3476a     60 EC 35 EB 
3476e     01 EB 01 EB 
34772     0C EB 16 EB 
34776     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
3477a     34 EB D0 18 
3477e     00 19 F4 18 
34782     E8 18 DA 18 
34786     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
3478a     B6 18 A9 18 
3478e     9D 18 91 05 
34792     F0 EF CA EB 
34796     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
3479a     E8 EA F2 EA 
3479e     FE EA 07 EB 
347a2     12 EB C2 EF 
347a6     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
347aa     D9 18 CD 18 
347ae     C0 18 B3 18 
347b2     A7 18 9B 18 
347b6     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
347ba     B8 FC 30 EE 
347be     61 EB DC EA 
347c2     CD EA D2 EA 
347c6     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
347ca     F3 EA FE EA 
347ce     D2 09 D1 18 
347d2     C3 18 17 18 
347d6     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
347da     66 11 52 11 
347de     49 11 41 11 
347e2     38 11 E0 F4 
347e6     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
347ea     C9 EA C5 EA 
347ee     CF EA DB EA 
347f2     E6 EA EF EA 
347f6     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
347fa     89 11 80 11 
347fe     78 11 6E 11 
34802     67 11 5D 11 
34806     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
3480a     43 11 32 0D 
3480e     9C F1 07 EC 
34812     F8 EA CD EA 
34816     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
3481a     E4 EA ED EA 
3481e     F8 EA 02 EB 
34822     55 11 91 11 
34826     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
3482a     75 11 6E 11 
3482e     64 11 5E 11 
34832     54 11 4A 11 
34836     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
3483a     A8 EB F1 EA 
3483e     D9 EA DC EA 
34842     E8 EA F1 EA 
34846     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
3484a     A6 EB 9E 11 
3484e     A0 11 96 11 
34852     8D 11 85 11 
34856     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
3485a     6A 11 CA 0D 
3485e     36 0B 57 F8 
34862     6C ED 57 EB 
34866     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
3486a     F4 EA FF EA 
3486e     09 EB 15 EB 
34872     1E EB 1A FD 
34876     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
3487a     ED 0A E8 0A 
3487e     E2 0A DC 0A 
34882     D6 0A D1 0A 
34886     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
3488a     F8 F3 BC EC 
3488e     57 EB 1E EB 
34892     18 EB 24 EB 
34896     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
3489a     42 EB 4D EB 
3489e     08 09 20 0B 
348a2     1A 0B 14 0B 
348a6     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
348aa     04 0B FE 0A 
348ae     F9 0A F2 0A 
348b2     84 08 3A F1 
348b6     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
348ba     42 EB 42 EB 
348be     4E EB 57 EB 
348c2     62 EB 6B EB 
348c6     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
348ca     48 0B 43 0B 
348ce     3C 0B 36 0B 
348d2     31 0B 2C 0B 
348d6     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
348da     1B 0B 5C 00 
348de     6A EF 1B EC 
348e2     81 EB 6A EB 
348e6     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
348ea     85 EB 8E EB 
348ee     99 EB A3 EB 
348f2     DD 05 E5 05 
348f6     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
348fa     DB 05 D8 05 
348fe     D5 05 D1 05 
34902     D0 05 CB 05 
34906     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
3490a     0C EC BB EB 
3490e     B3 EB BB EB 
34912     C5 EB D0 EB 
34916     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
3491a     E4 F7 2C 06 
3491e     28 06 24 06 
34922     22 06 1F 06 
34926     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
3492a     16 06 14 06 
3492e     0F 06 D0 F3 
34932     65 ED 2D EC 
34936     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
3493a     01 EC 0A EC 
3493e     14 EC 1E EC 
34942     29 EC FB 03 
34946     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
3494a     63 06 60 06 
3494e     5E 06 59 06 
34952     58 06 54 06 
34956     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
3495a     69 F1 21 ED 
3495e     55 EC 33 EC 
34962     36 EC 40 EC 
34966     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
3496a     5C EC 68 EC 
3496e     92 02 D9 02 
34972     D7 02 D7 02 
34976     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
3497a     D1 02 D1 02 
3497e     CE 02 CD 02 
34982     5D FC 80 EF 
34986     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
3498a     83 EC 8A EC 
3498e     93 EC 9C EC 
34992     A5 EC B1 EC 
34996     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3499a     2B 03 2A 03 
3499e     29 03 26 03 
349a2     25 03 24 03 
349a6     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
349aa     1F 03 70 F7 
349ae     D0 EE 27 ED 
349b2     DB EC D4 EC 
349b6     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
349ba     F0 EC FA EC 
349be     02 ED F9 F4 
349c2     7B 03 7C 03 
349c6     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
349ca     75 03 73 03 
349ce     72 03 70 03 
349d2     6D 03 6C 03 
349d6     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
349da     54 ED 22 ED 
349de     22 ED 2C ED 
349e2     35 ED 3F ED 
349e6     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
349ea     14 01 C3 03 
349ee     C1 03 C0 03 
349f2     5F 01 A5 00 
349f6     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
349fa     7B 00 7C 00 
349fe     20 00 85 F1 
34a02     2A EE 89 ED 
34a06     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
34a0a     80 ED 87 ED 
34a0e     90 ED 9A ED 
34a12     A3 ED 73 00 
34a16     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
34a1a     D0 00 D0 00 
34a1e     D0 00 D0 00 
34a22     D0 00 CF 00 
34a26     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
34a2a     80 F0 3D EE 
34a2e     D5 ED C7 ED 
34a32     CD ED D6 ED 
34a36     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
34a3a     F2 ED FA ED 
34a3e     1D 01 29 01 
34a42     27 01 27 01 
34a46     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
34a4a     25 01 26 01 
34a4e     26 01 23 01 
34a52     D0 F7 EC EF 
34a56     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
34a5a     1C EE 24 EE 
34a5e     2D EE 37 EE 
34a62     40 EE 47 EE 
34a66     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
34a6a     7D 01 7B 01 
34a6e     7A 01 7A 01 
34a72     79 01 78 01 
34a76     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
34a7a     84 FE DE F3 
34a7e     6C EF 93 EE 
34a82     72 EE 72 EE 
34a86     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
34a8a     8B EE 95 EE 
34a8e     9E EE 15 FC 
34a92     67 FE 67 FE 
34a96     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
34a9a     6B FE 6B FE 
34a9e     6D FE 6D FE 
34aa2     6D FE 6F FE 
34aa6     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
34aaa     DF EE CC EE 
34aae     CF EE D9 EE 
34ab2     E1 EE EA EE 
34ab6     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
34aba     5A FE C4 FE 
34abe     C3 FE C5 FE 
34ac2     C6 FE C6 FE 
34ac6     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
34aca     C8 FE C7 FE 
34ace     DA FB 85 F1 
34ad2     8D EF 31 EF 
34ad6     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
34ada     34 EF 3E EF 
34ade     46 EF 4F EF 
34ae2     57 EF 0D FF 
34ae6     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
34aea     1F FF 1F FF 
34aee     21 FF 21 FF 
34af2     21 FF 21 FF 
34af6     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
34afa     15 F1 BE EF 
34afe     84 EF 7E EF 
34b02     88 EF 8F EF 
34b06     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
34b0a     A9 EF 06 F2 
34b0e     A6 FC AB FC 
34b12     AD FC AE FC 
34b16     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
34b1a     B2 FC B4 FC 
34b1e     B6 FC B7 FC 
34b22     8B F4 BD F0 
34b26     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
34b2a     E4 EF EE EF 
34b2e     F6 EF FD EF 
34b32     04 F0 0E F0 
34b36     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
34b3a     0B FD 0D FD 
34b3e     0F FD 11 FD 
34b42     11 FD 13 FD 
34b46     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
34b4a     17 FD 64 F3 
34b4e     CD F0 52 F0 
34b52     41 F0 45 F0 
34b56     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
34b5a     5B F0 64 F0 
34b5e     6D F0 FB FC 
34b62     65 FD 68 FD 
34b66     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
34b6a     6C FD 6D FD 
34b6e     6F FD 70 FD 
34b72     72 FD B3 FB 
34b76     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
34b7a     A4 F0 99 F0 
34b7e     A0 F0 A8 F0 
34b82     AE F0 B9 F0 
34b86     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
34b8a     CB FB DD FB 
34b8e     DE FB E0 FB 
34b92     E3 FB E3 FB 
34b96     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
34b9a     E9 FB EC FB 
34b9e     62 F7 27 F2 
34ba2     2A F1 FF F0 
34ba6     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
34baa     0C F1 13 F1 
34bae     1B F1 23 F1 
34bb2     33 F2 3C FC 
34bb6     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
34bba     42 FC 45 FC 
34bbe     47 FC 48 FC 
34bc2     4A FC 4C FC 
34bc6     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
34bca     20 F2 77 F1 
34bce     5C F1 5F F1 
34bd2     64 F1 6C F1 
34bd6     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
34bda     83 F1 DC F8 
34bde     9A FC 9A FC 
34be2     9B FC 9E FC 
34be6     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
34bea     A3 FC A4 FC 
34bee     A6 FC A9 FC 
34bf2     90 F4 33 F2 
34bf6     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
34bfa     BA F1 BF F1 
34bfe     C7 F1 CE F1 
34c02     D6 F1 DC F1 
34c06     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
34c0a     F3 FC F5 FC 
34c0e     FE FB 79 FB 
34c12     62 FB 5F FB 
34c16     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
34c1a     6F FA AF F3 
34c1e     53 F2 12 F2 
34c22     0F F2 15 F2 
34c26     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
34c2a     2A F2 32 F2 
34c2e     38 F2 9A FB 
34c32     AF FB B1 FB 
34c36     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
34c3a     B7 FB B8 FB 
34c3e     BA FB BC FB 
34c42     C1 FB 3B F8 
34c46     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
34c4a     6E F2 6C F2 
34c4e     74 F2 7A F2 
34c52     81 F2 87 F2 
34c56     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
34c5a     06 FC 09 FC 
34c5e     0C FC 0E FC 
34c62     0F FC 12 FC 
34c66     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
34c6a     17 FC 1A FC 
34c6e     B2 F6 7B F3 
34c72     DD F2 C5 F2 
34c76     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
34c7a     D4 F2 DB F2 
34c7e     E0 F2 E8 F2 
34c82     28 F8 60 FC 
34c86     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
34c8a     64 FC 66 FC 
34c8e     68 FC 6A FC 
34c92     6D FC 52 FC 
34c96     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
34c9a     78 F3 24 F3 
34c9e     1A F3 1E F3 
34ca2     24 F3 2A F3 
34ca6     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
34caa     3D F3 80 FA 
34cae     0C FB 0F FB 
34cb2     10 FB 14 FB 
34cb6     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
34cba     1B FB 1D FB 
34cbe     1F FB 92 FA 
34cc2     DE F4 AE F3 
34cc6     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
34cca     79 F3 7E F3 
34cce     84 F3 8C F3 
34cd2     92 F3 97 F3 
34cd6     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
34cda     67 FB 69 FB 
34cde     6B FB 6F FB 
34ce2     71 FB 72 FB 
34ce6     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
34cea     E3 F8 BA F4 
34cee     EE F3 CC F3 
34cf2     CA F3 CF F3 
34cf6     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
34cfa     E2 F3 E8 F3 
34cfe     ED F3 B7 FB 
34d02     BC FB BE FB 
34d06     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
34d0a     C4 FB C6 FB 
34d0e     C8 FB C9 FB 
34d12     CC FB 8F F7 
34d16     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
34d1a     1E F4 1E F4 
34d1e     24 F4 2A F4 
34d22     30 F4 38 F4 
34d26     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
34d2a     AD FA B1 FA 
34d2e     B4 FA B6 FA 
34d32     BA FA BB FA 
34d36     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
34d3a     C2 FA C6 FA 
34d3e     55 F6 C6 F4 
34d42     7D F4 72 F4 
34d46     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
34d4a     83 F4 89 F4 
34d4e     8F F4 94 F4 
34d52     66 FA 03 FB 
34d56     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
34d5a     0A FB 0E FB 
34d5e     10 FB 11 FB 
34d62     16 FB 18 FB 
34d66     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
34d6a     F9 F4 CA F4 
34d6e     C5 F4 CB F4 
34d72     D1 F4 D7 F4 
34d76     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
34d7a     E8 F4 3F FB 
34d7e     56 FB 58 FB 
34d82     5A FB 5E FB 
34d86     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
34d8a     64 FB 64 FB 
34d8e     69 FB 99 F9 
34d92     E9 F5 33 F5 
34d96     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
34d9a     1D F5 22 F5 
34d9e     27 F5 2E F5 
34da2     32 F5 37 F5 
34da6     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
34daa     BC FA BC FA 
34dae     C1 FA C2 FA 
34db2     C4 FA C8 FA 
34db6     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
34dba     F9 F7 DB F5 
34dbe     78 F5 69 F5 
34dc2     6A F5 70 F5 
34dc6     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
34dca     7F F5 85 F5 
34dce     6E F7 06 FB 
34dd2     0A FB 0B FB 
34dd6     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
34dda     14 FB 15 FB 
34dde     18 FB 1B FB 
34de2     1D FB 70 F7 
34de6     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
34dea     B6 F5 BB F5 
34dee     C0 F5 C6 F5 
34df2     CA F5 CF F5 
34df6     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
34dfa     54 FB 56 FB 
34dfe     5A FB 5B FB 
34e02     5E FB 5F FB 
34e06     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
34e0a     67 FB 52 FB 
34e0e     29 F7 33 F6 
34e12     06 F6 02 F6 
34e16     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
34e1a     10 F6 16 F6 
34e1e     1A F6 1F F6 
34e22     81 FB 9F FB 
34e26     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
34e2a     51 FB F2 FA 
34e2e     E3 FA E3 FA 
34e32     E5 FA E9 FA 
34e36     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
34e3a     64 F6 4D F6 
34e3e     4D F6 53 F6 
34e42     57 F6 5C F6 
34e46     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
34e4a     6A F6 19 FB 
34e4e     1E FB 22 FB 
34e52     23 FB 24 FB 
34e56     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
34e5a     2C FB 2E FB 
34e5e     32 FB F0 F8 
34e62     01 F7 A5 F6 
34e66     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
34e6a     9F F6 A3 F6 
34e6e     A6 F6 AC F6 
34e72     B0 F6 EB F7 
34e76     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
34e7a     68 FB 6C FB 
34e7e     6E FB 71 FB 
34e82     72 FB 74 FB 
34e86     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
34e8a     71 F8 21 F7 
34e8e     E5 F6 DD F6 
34e92     E1 F6 E6 F6 
34e96     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
34e9a     F5 F6 F7 F6 
34e9e     F7 FA AB FB 
34ea2     AD FB AF FB 
34ea6     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
34eaa     B6 FB B9 FB 
34eae     BB FB BC FB 
34eb2     21 FB 07 F8 
34eb6     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
34eba     22 F7 26 F7 
34ebe     2B F7 2E F7 
34ec2     34 F7 38 F7 
34ec6     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
34eca     13 FB 16 FB 
34ece     17 FB 1B FB 
34ed2     1E FB 20 FB 
34ed6     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
34eda     26 FB 77 FA 
34ede     F3 F7 7C F7 
34ee2     67 F7 6A F7 
34ee6     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
34eea     74 F7 7A F7 
34eee     7E F7 82 F7 
34ef2     53 FB 5A FB 
34ef6     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
34efa     5F FB 63 FB 
34efe     65 FB 67 FB 
34f02     69 FB 6A FB 
34f06     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
34f0a     B5 F7 A9 F7 
34f0e     AD F7 B0 F7 
34f12     B5 F7 B8 F7 
34f16     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
34f1a     6E F8 99 FB 
34f1e     9C FB 9D FB 
34f22     9F FB A4 FB 
34f26     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
34f2a     A9 FB AB FB 
34f2e     AD FB 46 F9 
34f32     26 F8 F0 F7 
34f36     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
34f3a     F4 F7 F8 F7 
34f3e     FB F7 FF F7 
34f42     03 F8 65 FA 
34f46     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
34f4a     2B FB 2F FB 
34f4e     30 FB 32 FB 
34f52     34 FB 38 FB 
34f56     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
34f5a     E9 F8 4A F8 
34f5e     2E F8 2C F8 
34f62     2F F8 36 F8 
34f66     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
34f6a     41 F8 44 F8 
34f6e     4A FB 67 FB 
34f72     68 FB 6B FB 
34f76     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
34f7a     73 FB 74 FB 
34f7e     78 FB 7A FB 
34f82     14 FB E7 F8 
34f86     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
34f8a     6D F8 70 F8 
34f8e     73 F8 78 F8 
34f92     7C F8 80 F8 
34f96     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
34f9a     A6 FB A7 FB 
34f9e     A9 FB AC FB 
34fa2     AF FB B1 FB 
34fa6     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
34faa     B7 FB 73 FA 
34fae     F8 F8 B4 F8 
34fb2     A9 F8 AB F8 
34fb6     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
34fba     B4 F8 B8 F8 
34fbe     BB F8 FA F8 
34fc2     64 FB 65 FB 
34fc6     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
34fca     6D FB 6F FB 
34fce     70 FB 74 FB 
34fd2     77 FB 77 FB 
34fd6     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
34fda     E9 F8 E4 F8 
34fde     E8 F8 EB F8 
34fe2     EE F8 F2 F8 
34fe6     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
34fea     B5 FA 9F FB 
34fee     A1 FB A4 FB 
34ff2     A5 FB A9 FB 
34ff6     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
34ffa     AE FB B1 FB 
34ffe     B2 FB C7 F9 
35002     39 F9 22 F9 
35006     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
3500a     26 F9 2A F9 
3500e     2E F9 32 F9 
35012     33 F9 BA FB 
35016     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
3501a     DE FB E1 FB 
3501e     E2 FB E4 FB 
35022     E5 FB E7 FB 
35026     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
3502a     C5 F9 67 F9 
3502e     57 F9 56 F9 
35032     5B F9 5F F9 
35036     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
3503a     68 F9 6C F9 
3503e     0B FC 11 FC 
35042     14 FC 15 FC 
35046     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
3504a     B5 FB B5 FB 
3504e     B6 FB B8 FB 
35052     E9 FA C8 F9 
35056     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
3505a     90 F9 94 F9 
3505e     95 F9 99 F9 
35062     9D F9 9F F9 
35066     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
3506a     DE FB DF FB 
3506e     E2 FB E4 FB 
35072     E6 FB E8 FB 
35076     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
3507a     EF FB AC FA 
3507e     E9 F9 C7 F9 
35082     C3 F9 C8 F9 
35086     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
3508a     D0 F9 D4 F9 
3508e     D6 F9 0E FB 
35092     11 FC 13 FC 
35096     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
3509a     19 FC 1B FC 
3509e     1D FC 1E FC 
350a2     21 FC 22 FC 
350a6     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
350aa     F7 F9 F7 F9 
350ae     FB F9 FE F9 
350b2     00 FA 03 FA 
350b6     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
350ba     1B FC 45 FC 
350be     46 FC 48 FC 
350c2     4A FC 4B FC 
350c6     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
350ca     52 FC 54 FC 
350ce     F3 FB 82 FA 
350d2     35 FA 28 FA 
350d6     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
350da     31 FA 32 FA 
350de     37 FA 37 FA 
350e2     3C FA 00 FC 
350e6     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
350ea     09 FC 0B FC 
350ee     0F FC 12 FC 
350f2     12 FC 15 FC 
350f6     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
350fa     8D FA 60 FA 
350fe     5B FA 5C FA 
35102     60 FA 61 FA 
35106     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
3510a     6C FA 6D FA 
3510e     37 FC 3A FC 
35112     3B FC 3D FC 
35116     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
3511a     43 FC 44 FC 
3511e     45 FC 47 FC 
35122     51 FB AB FA 
35126     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
3512a     8E FA 91 FA 
3512e     93 FA 95 FA 
35132     98 FA 9B FA 
35136     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
3513a     68 FC 6A FC 
3513e     6C FC 6E FC 
35142     70 FC 72 FC 
35146     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
3514a     76 FC 3B FB 
3514e     D0 FA BB FA 
35152     B9 FA BD FA 
35156     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
3515a     C4 FA C6 FA 
3515e     CA FA 13 FC 
35162     3A FC 3A FC 
35166     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
3516a     41 FC 43 FC 
3516e     44 FC 47 FC 
35172     48 FC 3C FC 
35176     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
3517a     E6 FA E8 FA 
3517e     EB FA EE FA 
35182     F0 FA F2 FA 
35186     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
3518a     61 FC 66 FC 
3518e     68 FC 6B FC 
35192     6C FC 6E FC 
35196     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
3519a     73 FC 75 FC 
3519e     13 FC 3F FB 
351a2     17 FB 12 FB 
351a6     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
351aa     1A FB 1D FB 
351ae     1F FB 20 FB 
351b2     23 FB 92 FC 
351b6     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
351ba     96 FC 97 FC 
351be     9A FC 9C FC 
351c2     9E FC 9F FC 
351c6     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
351ca     5A FB 41 FB 
351ce     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
351d2     73 32 00 04 
351d6     00 00 10 00 
351da     00 00 00 00 
351de     00 00 00 00 | atari2 file "atari2.s2"
351e2     43 87 43 87 
351e6     43 87 44 87 
351ea     43 87 44 87 
351ee     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
351f2     43 87 43 87 
351f6     43 87 44 87 
351fa     43 87 43 87 
351fe     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
35202     44 87 43 87 
35206     44 87 43 87 
3520a     43 87 43 87 
3520e     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
35212     43 87 43 87 
35216     44 87 43 87 
3521a     44 87 44 87 
3521e     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
35222     43 87 43 87 
35226     44 87 43 87 
3522a     43 87 42 87 
3522e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
35232     43 87 43 87 
35236     43 87 43 87 
3523a     44 87 43 87 
3523e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
35242     44 87 44 87 
35246     43 87 44 87 
3524a     43 87 44 87 
3524e     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
35252     44 87 43 87 
35256     44 87 44 87 
3525a     43 87 43 87 
3525e     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
35262     43 87 44 87 
35266     44 87 43 87 
3526a     43 87 44 87 
3526e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
35272     43 87 43 87 
35276     43 87 43 87 
3527a     43 87 43 87 
3527e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
35282     42 87 43 87 
35286     44 87 42 87 
3528a     43 87 43 87 
3528e     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
35292     43 87 44 87 
35296     44 87 43 87 
3529a     43 87 43 87 
3529e     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
352a2     43 87 5C 87 
352a6     EE 86 AC 87 
352aa     4C 7C A3 78 
352ae     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
352b2     BC 78 BB 78 
352b6     BD 78 BC 78 
352ba     BB 78 BD 78 
352be     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
352c2     BB 78 BB 78 
352c6     BC 78 BC 78 
352ca     BC 78 BB 78 
352ce     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
352d2     BC 78 BC 78 
352d6     BC 78 BC 78 
352da     BC 78 BC 78 
352de     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
352e2     BB 78 BC 78 
352e6     A0 78 4C 7C 
352ea     11 7A 29 89 
352ee     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
352f2     44 87 43 87 
352f6     44 87 43 87 
352fa     43 87 42 87 
352fe     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
35302     43 87 43 87 
35306     44 87 ED 85 
3530a     71 85 52 79 
3530e     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
35312     BC 78 BC 78 
35316     BC 78 BC 78 
3531a     BC 78 BC 78 
3531e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35322     BC 78 BC 78 
35326     BC 78 A0 78 
3532a     CF 7A B9 81 
3532e     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
35332     44 87 43 87 
35336     43 87 44 87 
3533a     43 87 44 87 
3533e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
35342     43 87 43 87 
35346     43 87 43 87 
3534a     44 87 43 87 
3534e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
35352     43 87 43 87 
35356     44 87 43 87 
3535a     44 87 43 87 
3535e     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
35362     44 87 43 87 
35366     43 87 43 87 
3536a     5A 87 39 81 
3536e     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
35372     A5 78 BC 78 
35376     BB 78 BC 78 
3537a     BB 78 BC 78 
3537e     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
35382     BC 78 BC 78 
35386     BC 78 BC 78 
3538a     BC 78 8F 79 
3538e     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
35392     09 85 47 87 
35396     43 87 43 87 
3539a     42 87 42 87 
3539e     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
353a2     43 87 43 87 
353a6     43 87 43 87 
353aa     43 87 44 87 
353ae     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
353b2     43 87 43 87 
353b6     44 87 43 87 
353ba     42 87 43 87 
353be     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
353c2     44 87 43 87 
353c6     43 87 43 87 
353ca     44 87 44 87 
353ce     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
353d2     94 78 55 7A 
353d6     B9 78 BC 78 
353da     BC 78 BC 78 
353de     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
353e2     BC 78 BB 78 
353e6     BC 78 BC 78 
353ea     BC 78 BC 78 
353ee     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
353f2     BB 78 BC 78 
353f6     BC 78 BC 78 
353fa     BB 78 BC 78 
353fe     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35402     BC 78 BC 78 
35406     BD 78 BC 78 
3540a     BC 78 BB 78 
3540e     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
35412     94 78 B3 84 
35416     36 84 4A 87 
3541a     43 87 43 87 
3541e     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
35422     43 87 44 87 
35426     43 87 43 87 
3542a     43 87 43 87 
3542e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
35432     43 87 44 87 
35436     43 87 44 87 
3543a     43 87 43 87 
3543e     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
35442     43 87 43 87 
35446     43 87 45 87 
3544a     43 87 43 87 
3544e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
35452     43 87 44 87 
35456     44 87 44 87 
3545a     43 87 43 87 
3545e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
35462     43 87 42 87 
35466     43 87 43 87 
3546a     44 87 43 87 
3546e     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
35472     54 87 3C 82 
35476     36 83 52 79 
3547a     C6 78 BC 78 
3547e     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
35482     BB 78 BB 78 
35486     BC 78 BC 78 
3548a     BC 78 BC 78 
3548e     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35492     BD 78 ED 78 
35496     1B 79 F4 83 
3549a     4D 83 4E 87 
3549e     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
354a2     44 87 43 87 
354a6     42 87 44 87 
354aa     43 87 42 87 
354ae     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
354b2     43 87 54 87 
354b6     26 82 B3 84 
354ba     D6 77 BB 78 
354be     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
354c2     BC 78 BB 78 
354c6     BB 78 BB 78 
354ca     BB 78 BB 78 
354ce     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
354d2     BC 78 BC 78 
354d6     26 79 18 75 
354da     36 83 1F 84 
354de     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
354e2     43 87 43 87 
354e6     43 87 43 87 
354ea     43 87 44 87 
354ee     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
354f2     43 87 44 87 
354f6     44 87 43 87 
354fa     43 87 43 87 
354fe     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
35502     43 87 43 87 
35506     43 87 43 87 
3550a     44 87 44 87 
3550e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
35512     44 87 43 87 
35516     43 87 43 87 
3551a     43 87 44 87 
3551e     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
35522     44 87 44 87 
35526     44 87 43 87 
3552a     44 87 43 87 
3552e     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
35532     43 87 43 87 
35536     43 87 44 87 
3553a     44 87 43 87 
3553e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
35542     43 87 43 87 
35546     43 87 43 87 
3554a     43 87 44 87 
3554e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
35552     43 87 44 87 
35556     43 87 44 87 
3555a     19 87 7D 86 
3555e     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
35562     B1 78 BC 78 
35566     BC 78 BC 78 
3556a     BC 78 BC 78 
3556e     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
35572     BC 78 BC 78 
35576     BD 78 BC 78 
3557a     B7 78 3B 7B 
3557e     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
35582     96 86 44 87 
35586     43 87 43 87 
3558a     43 87 43 87 
3558e     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
35592     44 87 44 87 
35596     43 87 44 87 
3559a     43 87 44 87 
3559e     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
355a2     43 87 44 87 
355a6     43 87 44 87 
355aa     43 87 44 87 
355ae     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
355b2     43 87 44 87 
355b6     43 87 43 87 
355ba     44 87 43 87 
355be     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
355c2     44 87 44 87 
355c6     43 87 43 87 
355ca     43 87 44 87 
355ce     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
355d2     43 87 43 87 
355d6     43 87 43 87 
355da     44 87 44 87 
355de     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
355e2     36 83 CF 7A 
355e6     AB 78 BB 78 
355ea     BC 78 BC 78 
355ee     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
355f2     BB 78 BC 78 
355f6     BC 78 BC 78 
355fa     BC 78 BC 78 
355fe     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
35602     BC 78 BC 78 
35606     BC 78 BB 78 
3560a     BC 78 BC 78 
3560e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
35612     BB 78 BC 78 
35616     BB 78 BC 78 
3561a     BC 78 BD 78 
3561e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
35622     BC 78 BC 78 
35626     BC 78 BC 78 
3562a     BC 78 BD 78 
3562e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
35632     BC 78 BB 78 
35636     BC 78 BB 78 
3563a     BB 78 BC 78 
3563e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
35642     BC 78 BC 78 
35646     BC 78 BC 78 
3564a     BC 78 BB 78 
3564e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
35652     BC 78 BC 78 
35656     BC 78 BD 78 
3565a     BB 78 BC 78 
3565e     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
35662     BC 78 BC 78 
35666     BC 78 BB 78 
3566a     BC 78 BB 78 
3566e     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
35672     BB 78 BC 78 
35676     BC 78 BC 78 
3567a     BC 78 BB 78 
3567e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35682     BC 78 BC 78 
35686     BC 78 BB 78 
3568a     BC 78 BB 78 
3568e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35692     BC 78 BC 78 
35696     BC 78 BC 78 
3569a     BB 78 BC 78 
3569e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
356a2     BC 78 9F 78 
356a6     52 79 B3 84 
356aa     2F 86 60 87 
356ae     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
356b2     44 87 43 87 
356b6     43 87 43 87 
356ba     43 87 43 87 
356be     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
356c2     43 87 43 87 
356c6     43 87 44 87 
356ca     43 87 43 87 
356ce     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
356d2     43 87 43 87 
356d6     43 87 43 87 
356da     43 87 44 87 
356de     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
356e2     44 87 44 87 
356e6     5E 87 BC 80 
356ea     FB 80 94 78 
356ee     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
356f2     BD 78 BC 78 
356f6     BB 78 BC 78 
356fa     BB 78 BB 78 
356fe     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
35702     BC 78 BB 78 
35706     BB 78 6B 79 
3570a     D6 77 AC 87 
3570e     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
35712     43 87 44 87 
35716     43 87 43 87 
3571a     44 87 43 87 
3571e     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
35722     43 87 44 87 
35726     43 87 5C 87 
3572a     E7 80 00 80 
3572e     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
35732     BC 78 BD 78 
35736     BC 78 BC 78 
3573a     BC 78 BB 78 
3573e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35742     BC 78 BC 78 
35746     BB 78 BC 78 
3574a     BB 78 BC 78 
3574e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35752     BB 78 BC 78 
35756     BC 78 BC 78 
3575a     BC 78 BC 78 
3575e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35762     BC 78 BC 78 
35766     BC 78 BC 78 
3576a     A0 78 8D 7B 
3576e     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
35772     60 87 43 87 
35776     44 87 44 87 
3577a     43 87 43 87 
3577e     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
35782     44 87 43 87 
35786     43 87 43 87 
3578a     44 87 73 86 
3578e     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
35792     51 7B B6 78 
35796     BC 78 BD 78 
3579a     BC 78 BC 78 
3579e     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
357a2     BB 78 BC 78 
357a6     BD 78 BB 78 
357aa     BC 78 BB 78 
357ae     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
357b2     BC 78 BC 78 
357b6     BC 78 BC 78 
357ba     BB 78 BC 78 
357be     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
357c2     BC 78 BB 78 
357c6     BB 78 BC 78 
357ca     BC 78 BB 78 
357ce     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
357d2     22 8C AF 84 
357d6     48 87 43 87 
357da     44 87 43 87 
357de     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
357e2     43 87 42 87 
357e6     43 87 43 87 
357ea     44 87 43 87 
357ee     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
357f2     43 87 43 87 
357f6     44 87 44 87 
357fa     43 87 43 87 
357fe     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
35802     43 87 43 87 
35806     43 87 43 87 
3580a     44 87 43 87 
3580e     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
35812     9F 8B D6 77 
35816     16 7C B3 78 
3581a     BC 78 BB 78 
3581e     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
35822     BB 78 BC 78 
35826     BB 78 BC 78 
3582a     BC 78 BC 78 
3582e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35832     BC 78 BB 78 
35836     BB 78 BC 78 
3583a     BB 78 BC 78 
3583e     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
35842     BB 78 BB 78 
35846     BC 78 BC 78 
3584a     BC 78 BB 78 
3584e     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
35852     BC 78 BC 78 
35856     BC 78 BD 78 
3585a     BB 78 BC 78 
3585e     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
35862     BC 78 BC 78 
35866     BC 78 BB 78 
3586a     BC 78 BC 78 
3586e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35872     A8 78 54 7E 
35876     F4 83 17 82 
3587a     50 87 43 87 
3587e     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
35882     44 87 43 87 
35886     44 87 43 87 
3588a     43 87 44 87 
3588e     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
35892     43 87 28 87 
35896     20 85 CF 7A 
3589a     70 7D AD 78 
3589e     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
358a2     BB 78 BC 78 
358a6     BC 78 BC 78 
358aa     BB 78 BB 78 
358ae     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
358b2     BB 78 B2 78 
358b6     9A 7C CF 7A 
358ba     4A 87 0D 87 
358be     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
358c2     43 87 44 87 
358c6     43 87 44 87 
358ca     43 87 43 87 
358ce     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
358d2     44 87 43 87 
358d6     28 87 51 85 
358da     11 7A 1E 7D 
358de     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
358e2     BC 78 BB 78 
358e6     BC 78 BC 78 
358ea     BC 78 BC 78 
358ee     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
358f2     BB 78 BC 78 
358f6     BB 78 BC 78 
358fa     BC 78 BC 78 
358fe     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35902     BB 78 BC 78 
35906     BC 78 BC 78 
3590a     BD 78 BB 78 
3590e     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
35912     BC 78 BB 78 
35916     BC 78 BC 78 
3591a     BC 78 BB 78 
3591e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35922     BC 78 BC 78 
35926     BC 78 BC 78 
3592a     BB 78 BC 78 
3592e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35932     BC 78 BD 78 
35936     BC 78 BC 78 
3593a     BC 78 BB 78 
3593e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35942     BC 78 BB 78 
35946     BB 78 BC 78 
3594a     BC 78 BB 78 
3594e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35952     BB 78 BB 78 
35956     BB 78 BC 78 
3595a     B6 78 48 7D 
3595e     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
35962     56 87 43 87 
35966     42 87 44 87 
3596a     44 87 43 87 
3596e     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
35972     43 87 44 87 
35976     43 87 44 87 
3597a     4C 87 7E 83 
3597e     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
35982     F7 78 BC 78 
35986     BC 78 BB 78 
3598a     BB 78 BC 78 
3598e     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35992     BC 78 BB 78 
35996     BC 78 BC 78 
3599a     BB 78 BC 78 
3599e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
359a2     BB 78 BC 78 
359a6     BC 78 BC 78 
359aa     BC 78 BB 78 
359ae     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
359b2     BC 78 BC 78 
359b6     BC 78 BC 78 
359ba     BC 78 BB 78 
359be     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
359c2     BC 78 BB 78 
359c6     BB 78 BC 78 
359ca     BC 78 BB 78 
359ce     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
359d2     BC 78 BC 78 
359d6     BB 78 BC 78 
359da     BC 78 BC 78 
359de     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
359e2     73 32 00 04 
359e6     00 00 10 00 
359ea     00 00 00 00 
359ee     00 00 00 00 | atari12 file "atari12.s2"
359f2     00 6D 00 6D 
359f6     00 6D 00 6D 
359fa     00 6D 00 6D 
359fe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35a02     00 6D 00 6D 
35a06     00 6D 00 6D 
35a0a     00 6D 00 6D 
35a0e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35a12     00 6D 00 6D 
35a16     00 6D 00 6D 
35a1a     00 6D 00 6D 
35a1e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35a22     00 6D 00 6D 
35a26     00 6D 00 6D 
35a2a     00 6D 00 6D 
35a2e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35a32     00 6D 00 6D 
35a36     00 6D 00 6D 
35a3a     00 6D 00 6D 
35a3e     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
35a42     00 6C 00 6C 
35a46     00 6C 00 6C 
35a4a     00 6C 00 6C 
35a4e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35a52     00 6C 00 6C 
35a56     00 6C 00 6C 
35a5a     00 6C 00 6C 
35a5e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35a62     00 6C 00 6C 
35a66     00 6C 00 6C 
35a6a     00 6C 00 6C 
35a6e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35a72     00 6C 00 6C 
35a76     00 6C 00 6C 
35a7a     00 6C 00 6C 
35a7e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35a82     00 6C 00 6C 
35a86     00 6C 00 6C 
35a8a     00 6C 00 6C 
35a8e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35a92     00 6C 00 6C 
35a96     00 6C 00 6C 
35a9a     00 6C 00 6C 
35a9e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35aa2     00 6C 00 6C 
35aa6     00 6C 00 6C 
35aaa     00 6C 00 6C 
35aae     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35ab2     00 6C 00 6C 
35ab6     00 6C 00 6C 
35aba     00 6C 00 6C 
35abe     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35ac2     00 6C 00 6C 
35ac6     00 6C 00 6C 
35aca     00 6C 00 6C 
35ace     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35ad2     00 6C 00 6C 
35ad6     00 6C 00 6C 
35ada     00 6C 00 6C 
35ade     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35ae2     00 6C 00 6C 
35ae6     00 6C 00 6C 
35aea     00 6C 00 6C 
35aee     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35af2     00 6C 00 6B 
35af6     00 6B 00 6B 
35afa     00 6B 00 6B 
35afe     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35b02     00 6B 00 6B 
35b06     00 6B 00 6B 
35b0a     00 6B 00 6B 
35b0e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35b12     00 6B 00 6B 
35b16     00 6B 00 6B 
35b1a     00 6B 00 6B 
35b1e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35b22     00 6B 00 6B 
35b26     00 6B 00 6B 
35b2a     00 6B 00 6B 
35b2e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35b32     00 6B 00 6B 
35b36     00 6B 00 6B 
35b3a     00 6B 00 6B 
35b3e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35b42     00 6B 00 6B 
35b46     00 6B 00 6B 
35b4a     00 6B 00 6B 
35b4e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35b52     00 6B 00 6B 
35b56     00 6B 00 6B 
35b5a     00 6B 00 6B 
35b5e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35b62     00 6B 00 6B 
35b66     00 6B 00 6B 
35b6a     00 6B 00 6B 
35b6e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35b72     00 6B 00 6B 
35b76     00 6B 00 6B 
35b7a     00 6B 00 6B 
35b7e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35b82     00 6B 00 6B 
35b86     00 6B 00 6B 
35b8a     00 6A 00 9D 
35b8e     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
35b92     00 9E 00 9E 
35b96     00 9E 00 9E 
35b9a     00 9E 00 9E 
35b9e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35ba2     00 9E 00 9E 
35ba6     00 9E 00 9E 
35baa     00 9E 00 9E 
35bae     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35bb2     00 9E 00 9E 
35bb6     00 9E 00 9E 
35bba     00 9E 00 9E 
35bbe     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35bc2     00 9E 00 9E 
35bc6     00 9E 00 9E 
35bca     00 9E 00 9E 
35bce     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35bd2     00 9E 00 9E 
35bd6     00 9E 00 9E 
35bda     00 9E 00 9E 
35bde     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35be2     00 9E 00 9E 
35be6     00 9E 00 9E 
35bea     00 9E 00 9E 
35bee     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35bf2     00 9E 00 9E 
35bf6     00 9E 00 9E 
35bfa     00 9E 00 9E 
35bfe     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35c02     00 9E 00 9E 
35c06     00 9E 00 9E 
35c0a     00 9E 00 9E 
35c0e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35c12     00 9E 00 9E 
35c16     00 9E 00 9E 
35c1a     00 9E 00 9E 
35c1e     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
35c22     00 9F 00 9F 
35c26     00 9F 00 9F 
35c2a     00 9F 00 9F 
35c2e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35c32     00 9F 00 9F 
35c36     00 9F 00 9F 
35c3a     00 9F 00 9F 
35c3e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35c42     00 9F 00 9F 
35c46     00 9F 00 9F 
35c4a     00 9F 00 9F 
35c4e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35c52     00 9F 00 9F 
35c56     00 9F 00 9F 
35c5a     00 9F 00 9F 
35c5e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35c62     00 9F 00 9F 
35c66     00 9F 00 9F 
35c6a     00 9F 00 9F 
35c6e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35c72     00 9F 00 9F 
35c76     00 9F 00 9F 
35c7a     00 9F 00 9F 
35c7e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35c82     00 9F 00 9F 
35c86     00 9F 00 9F 
35c8a     00 9F 00 9F 
35c8e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35c92     00 9F 00 9F 
35c96     00 9F 00 9F 
35c9a     00 9F 00 9F 
35c9e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35ca2     00 9F 00 9F 
35ca6     00 9F 00 9F 
35caa     00 9F 00 9F 
35cae     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35cb2     00 9F 00 9F 
35cb6     00 9F 00 9F 
35cba     00 9F 00 9F 
35cbe     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35cc2     00 9F 00 9F 
35cc6     00 9F 00 9F 
35cca     00 9F 00 9F 
35cce     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35cd2     00 9F 00 9F 
35cd6     00 9F 00 9F 
35cda     00 9F 00 9F 
35cde     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35ce2     00 9F 00 9F 
35ce6     00 9F 00 A0 
35cea     00 A0 00 A0 
35cee     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35cf2     00 A0 00 A0 
35cf6     00 A0 00 A0 
35cfa     00 A0 00 A0 
35cfe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35d02     00 A0 00 A0 
35d06     00 A0 00 A0 
35d0a     00 A0 00 A0 
35d0e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35d12     00 A0 00 A0 
35d16     00 A0 00 A0 
35d1a     00 A0 00 A0 
35d1e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35d22     00 A0 00 A0 
35d26     00 A0 00 A0 
35d2a     00 A0 00 A0 
35d2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35d32     00 A0 00 A0 
35d36     00 A0 00 A0 
35d3a     00 A0 00 A0 
35d3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35d42     00 A0 00 A0 
35d46     00 A0 00 A0 
35d4a     00 A0 00 A0 
35d4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35d52     00 A0 00 A0 
35d56     00 A0 00 A0 
35d5a     00 A0 00 A0 
35d5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35d62     00 A0 00 A0 
35d66     00 A0 00 A0 
35d6a     00 A0 00 A0 
35d6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35d72     00 A0 00 A0 
35d76     00 A0 00 A0 
35d7a     00 A0 00 A0 
35d7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35d82     00 A0 00 A0 
35d86     00 A0 00 A0 
35d8a     00 A0 00 A0 
35d8e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35d92     00 A0 00 A0 
35d96     00 A0 00 A0 
35d9a     00 A0 00 A0 
35d9e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35da2     00 A0 00 A0 
35da6     00 A0 00 A0 
35daa     00 A0 00 A0 
35dae     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
35db2     00 6D 00 6D 
35db6     00 6D 00 6D 
35dba     00 6D 00 6D 
35dbe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35dc2     00 6D 00 6D 
35dc6     00 6D 00 6D 
35dca     00 6D 00 6D 
35dce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35dd2     00 6D 00 6D 
35dd6     00 6D 00 6D 
35dda     00 6D 00 6D 
35dde     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35de2     00 6D 00 6D 
35de6     00 6D 00 6D 
35dea     00 6D 00 6D 
35dee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35df2     00 6D 00 6D 
35df6     00 6D 00 6D 
35dfa     00 6D 00 6D 
35dfe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35e02     00 6D 00 6D 
35e06     00 6D 00 6D 
35e0a     00 6D 00 6D 
35e0e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35e12     00 6D 00 6D 
35e16     00 6D 00 6D 
35e1a     00 6D 00 6D 
35e1e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35e22     00 6D 00 6D 
35e26     00 6D 00 6D 
35e2a     00 6D 00 6D 
35e2e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35e32     00 6D 00 6D 
35e36     00 A0 00 A0 
35e3a     00 A0 00 A0 
35e3e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35e42     00 A0 00 A0 
35e46     00 A0 00 A0 
35e4a     00 A0 00 A0 
35e4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35e52     00 A0 00 A0 
35e56     00 A0 00 A0 
35e5a     00 A0 00 A0 
35e5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35e62     00 A0 00 A0 
35e66     00 A0 00 A0 
35e6a     00 A0 00 A0 
35e6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35e72     00 A0 00 A0 
35e76     00 A0 00 A0 
35e7a     00 A0 00 A0 
35e7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35e82     00 A0 00 A0 
35e86     00 A0 00 A0 
35e8a     00 A0 00 A0 
35e8e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35e92     00 A0 00 A0 
35e96     00 A0 00 A0 
35e9a     00 A0 00 A0 
35e9e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35ea2     00 A0 00 A0 
35ea6     00 A0 00 A0 
35eaa     00 A0 00 A0 
35eae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35eb2     00 A0 00 A0 
35eb6     00 A0 00 A0 
35eba     00 A0 00 A0 
35ebe     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
35ec2     00 6D 00 6D 
35ec6     00 6D 00 6D 
35eca     00 6D 00 6D 
35ece     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35ed2     00 6D 00 6D 
35ed6     00 6D 00 6D 
35eda     00 6D 00 6D 
35ede     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35ee2     00 6D 00 6D 
35ee6     00 6D 00 6D 
35eea     00 6D 00 6D 
35eee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35ef2     00 6D 00 6D 
35ef6     00 6D 00 6D 
35efa     00 6D 00 6D 
35efe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35f02     00 6D 00 6D 
35f06     00 6D 00 6D 
35f0a     00 6D 00 6D 
35f0e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35f12     00 6D 00 6D 
35f16     00 6D 00 6D 
35f1a     00 6D 00 6D 
35f1e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35f22     00 6D 00 6D 
35f26     00 6D 00 6D 
35f2a     00 6D 00 6D 
35f2e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35f32     00 6D 00 6D 
35f36     00 6D 00 6D 
35f3a     00 6D 00 6D 
35f3e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35f42     00 6D 00 6D 
35f46     00 6C 00 A0 
35f4a     00 9F 00 A0 
35f4e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
35f52     00 A0 00 A0 
35f56     00 A0 00 A0 
35f5a     00 A0 00 A0 
35f5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f62     00 A0 00 A0 
35f66     00 A0 00 A0 
35f6a     00 A0 00 A0 
35f6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f72     00 A0 00 A0 
35f76     00 A0 00 A0 
35f7a     00 A0 00 A0 
35f7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f82     00 A0 00 A0 
35f86     00 A0 00 A0 
35f8a     00 A0 00 A0 
35f8e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f92     00 A0 00 A0 
35f96     00 A0 00 A0 
35f9a     00 A0 00 A0 
35f9e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fa2     00 A0 00 A0 
35fa6     00 A0 00 A0 
35faa     00 A0 00 A0 
35fae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fb2     00 A0 00 A0 
35fb6     00 A0 00 A0 
35fba     00 A0 00 A0 
35fbe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fc2     00 A0 00 A0 
35fc6     00 A0 00 A0 
35fca     00 A0 00 A0 
35fce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fd2     00 A0 00 A0 
35fd6     00 A0 00 A0 
35fda     00 A0 00 A0 
35fde     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fe2     00 A0 00 A0 
35fe6     00 A0 00 A0 
35fea     00 A0 00 A0 
35fee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35ff2     00 A0 00 A0 
35ff6     00 A0 00 A0 
35ffa     00 A0 00 A0 
35ffe     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
36002     00 A1 00 A1 
36006     00 A1 00 A1 
3600a     00 A1 00 A1 
3600e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
36012     00 A1 00 A1 
36016     00 A1 00 A1 
3601a     00 A1 00 A1 
3601e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
36022     00 A1 00 A1 
36026     00 A1 00 A1 
3602a     00 A1 00 A1 
3602e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
36032     00 A1 00 A1 
36036     00 A1 00 A1 
3603a     00 A1 00 A1 
3603e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
36042     00 A1 00 A1 
36046     00 A1 00 A1 
3604a     00 A1 00 A1 
3604e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
36052     00 A1 00 A1 
36056     00 A1 00 A1 
3605a     00 6E 00 6E 
3605e     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
36062     00 6E 00 6E 
36066     00 6E 00 6E 
3606a     00 6E 00 6E 
3606e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
36072     00 6E 00 6E 
36076     00 6E 00 6E 
3607a     00 6E 00 6E 
3607e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
36082     00 6E 00 6E 
36086     00 6E 00 6E 
3608a     00 6E 00 6E 
3608e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
36092     00 6E 00 6D 
36096     00 6D 00 6D 
3609a     00 6D 00 6D 
3609e     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
360a2     00 6D 00 6D 
360a6     00 6D 00 6D 
360aa     00 6D 00 6D 
360ae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
360b2     00 6D 00 6D 
360b6     00 6D 00 6D 
360ba     00 6D 00 6D 
360be     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
360c2     00 6D 00 6D 
360c6     00 6D 00 6D 
360ca     00 6D 00 6D 
360ce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
360d2     00 6D 00 6D 
360d6     00 6D 00 6D 
360da     00 6D 00 6D 
360de     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
360e2     00 6D 00 6D 
360e6     00 6D 00 6D 
360ea     00 6D 00 6D 
360ee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
360f2     00 6D 00 6D 
360f6     00 6D 00 6D 
360fa     00 6D 00 6D 
360fe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36102     00 6D 00 6D 
36106     00 6D 00 6D 
3610a     00 6D 00 6D 
3610e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36112     00 6D 00 6D 
36116     00 6D 00 6D 
3611a     00 6D 00 6D 
3611e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36122     00 6D 00 6D 
36126     00 6D 00 6D 
3612a     00 6D 00 6D 
3612e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36132     00 6D 00 6D 
36136     00 6D 00 6D 
3613a     00 6D 00 6D 
3613e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36142     00 6D 00 6D 
36146     00 6C 00 6C 
3614a     00 6C 00 6C 
3614e     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36152     00 6C 00 6C 
36156     00 6C 00 6C 
3615a     00 6C 00 6C 
3615e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36162     00 6C 00 6C 
36166     00 6C 00 6C 
3616a     00 9D 00 9F 
3616e     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
36172     00 9F 00 9F 
36176     00 9F 00 9F 
3617a     00 A0 00 A0 
3617e     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36182     00 A0 00 A0 
36186     00 A0 00 A0 
3618a     00 A0 00 A0 
3618e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36192     00 A0 00 A0 
36196     00 A0 00 A0 
3619a     00 A0 00 A0 
3619e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361a2     00 A0 00 A0 
361a6     00 A0 00 A0 
361aa     00 A0 00 A0 
361ae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361b2     00 A0 00 A0 
361b6     00 A0 00 A0 
361ba     00 A0 00 A0 
361be     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361c2     00 A0 00 A0 
361c6     00 A0 00 A0 
361ca     00 A0 00 A0 
361ce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361d2     00 A0 00 A0 
361d6     00 A0 00 A0 
361da     00 A0 00 A0 
361de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361e2     00 A0 00 A0 
361e6     00 A0 00 A0 
361ea     00 A0 00 A0 
361ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361f2     01 00 00 00 
361f6     00 00 00 00 
361fa     00 00 00 00 
361fe     00 00 00 00 | mouse  file "mouse2.def"
36202     00 00 00 00 
36206     00 00 00 00 
3620a     00 00 00 00 
3620e     00 00 00 00 | 	byte	$00[16]
36212     01 01 00 00 
36216     00 00 00 00 
3621a     00 00 00 00 
3621e     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36222     00 00 00 00 
36226     00 00 00 00 
3622a     00 00 00 00 
3622e     00 00 00 00 | 	byte	$00[16]
36232     01 0D 01 00 
36236     00 00 00 00 
3623a     00 00 00 00 
3623e     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36242     00 00 00 00 
36246     00 00 00 00 
3624a     00 00 00 00 
3624e     00 00 00 00 | 	byte	$00[16]
36252     01 0D 0D 01 
36256     00 00 00 00 
3625a     00 00 00 00 
3625e     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36262     00 00 00 00 
36266     00 00 00 00 
3626a     00 00 00 00 
3626e     00 00 00 00 | 	byte	$00[16]
36272     01 0D 0D 0D 
36276     01 00 00 00 
3627a     00 00 00 00 
3627e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36282     00 00 00 00 
36286     00 00 00 00 
3628a     00 00 00 00 
3628e     00 00 00 00 | 	byte	$00[16]
36292     01 0D 0D 0D 
36296     0D 01 00 00 
3629a     00 00 00 00 
3629e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
362a2     00 00 00 00 
362a6     00 00 00 00 
362aa     00 00 00 00 
362ae     00 00 00 00 | 	byte	$00[16]
362b2     01 0D 0D 0D 
362b6     0D 0D 01 00 
362ba     00 00 00 00 
362be     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
362c2     00 00 00 00 
362c6     00 00 00 00 
362ca     00 00 00 00 
362ce     00 00 00 00 | 	byte	$00[16]
362d2     01 0D 0D 0D 
362d6     0D 0D 0D 01 
362da     00 00 00 00 
362de     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
362e2     00 00 00 00 
362e6     00 00 00 00 
362ea     00 00 00 00 
362ee     00 00 00 00 | 	byte	$00[16]
362f2     01 0D 0D 0D 
362f6     0D 0D 0D 0C 
362fa     01 00 00 00 
362fe     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
36302     00 00 00 00 
36306     00 00 00 00 
3630a     00 00 00 00 
3630e     00 00 00 00 | 	byte	$00[16]
36312     01 0D 0D 0D 
36316     0D 0D 0D 0D 
3631a     0C 01 00 00 
3631e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
36322     00 00 00 00 
36326     00 00 00 00 
3632a     00 00 00 00 
3632e     00 00 00 00 | 	byte	$00[16]
36332     01 0D 0D 0D 
36336     0D 0D 0D 0D 
3633a     0D 0C 01 00 
3633e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
36342     00 00 00 00 
36346     00 00 00 00 
3634a     00 00 00 00 
3634e     00 00 00 00 | 	byte	$00[16]
36352     01 0D 0D 0D 
36356     0D 0D 0D 0D 
3635a     0D 0D 0B 01 
3635e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
36362     00 00 00 00 
36366     00 00 00 00 
3636a     00 00 00 00 
3636e     00 00 00 00 | 	byte	$00[16]
36372     01 0D 0D 0D 
36376     0C 0D 0D 03 
3637a     01 01 01 01 
3637e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
36382     00 00 00 00 
36386     00 00 00 00 
3638a     00 00 00 00 
3638e     00 00 00 00 | 	byte	$00[16]
36392     01 0D 0D 0C 
36396     01 09 0D 03 
3639a     00 00 00 00 
3639e     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
363a2     00 00 00 00 
363a6     00 00 00 00 
363aa     00 00 00 00 
363ae     00 00 00 00 | 	byte	$00[16]
363b2     01 0D 0C 01 
363b6     00 01 0D 0B 
363ba     01 00 00 00 
363be     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
363c2     00 00 00 00 
363c6     00 00 00 00 
363ca     00 00 00 00 
363ce     00 00 00 00 | 	byte	$00[16]
363d2     01 0C 01 00 
363d6     00 01 0A 0D 
363da     01 00 00 00 
363de     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
363e2     00 00 00 00 
363e6     00 00 00 00 
363ea     00 00 00 00 
363ee     00 00 00 00 | 	byte	$00[16]
363f2     01 01 00 00 
363f6     00 00 01 0D 
363fa     0B 01 00 00 
363fe     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
36402     00 00 00 00 
36406     00 00 00 00 
3640a     00 00 00 00 
3640e     00 00 00 00 
36412     00 00 00 00 
36416     00 00       | 	byte	$00[22]
36418     01 0B 0D 01 
3641c     00 00 00 00 
36420     00 00 00 00 
36424     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36428     00 00 00 00 
3642c     00 00 00 00 
36430     00 00 00 00 
36434     00 00 00 00 
36438     00          | 	byte	$00[17]
36439     01 01 00 00 
3643d     00 00 00 00 
36441     00 00 00 00 
36445     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36449     00 00 00 00 
      ...             
365ed     00 00 00 00 
365f1     00          | 	byte	$00[425]
365f2                 | 
365f2     00 00       |              	org
365f4 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
365f8 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
365fc 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
36600 003             | 
36600 003 00 30 04 F6 |                 mov     psramaddr,#0
36604 004             | 
36604 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
36608 005 20 00 00 FF 
3660c 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
36610 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
36614 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
36618 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
3661c 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
36620 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
36624 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
36628 00d             | 
36628 00d 20 00 00 FF 
3662c 00e 00 30 04 F1 |                 add 	psramaddr,##16384
36630 00f E0 03 00 FF 
36634 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
36638 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
3663c 012             | 
3663c 012             |                 
3663c 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
36640 013             |     
36640 013 01 2C 60 FD |                 cogid 	t11				' get id
36644 014 00 00 EC FC |                 coginit #0,#0				' start the new program
36648 015 03 2C 60 FD |                 cogstop t11				' stop the loader
3664c 016             | 
3664c 016 00 00 00 00 | t11 		long 	0
36650 017 00 FF 07 00 | mailbox 	long 	$7FF00
36654 018 00 00 00 00 | psramaddr 	long 	0
36658 019 00 00 00 00 | pslockval	long 	0
3665c 01a 00 00 00 00 | cmd             long    0
36660 01b 00 00 00 00 | buf1            long    0
36664 01c 00 40 00 00 | buf2            long    16384
36668 01d 6C 66 03 00 | 	long	@@@_dat_ + 12612
3666c 01e 50 32 20 52 
36670 01f 65 74 72 6F 
36674 020 6D 61 63 68 
36678 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
3667c 022 42 41 53 49 
36680 023 43 20 76 65 
36684 024 72 73 69 6F 
36688 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
3668c 026 35 31 00 00 | 	byte	$35, $31, $00, $00
36690 027             | 	alignl
36690 027             | _hg010b_spin2_dat_
36690 027             | 
36690 027 00 00 00 00 
36694 028 00 00 00 00 
36698 029 00 00 00 00 
3669c 02a 00 00 00 00 
366a0 02b 00 00 00    | vga_font       file "vgafont.def"
366a3 02b 7E 81 A5 81 
366a7 02c 81 BD 99 81 
366ab 02d 81 7E 00 00 
366af 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
366b3 02f 7E FF DB FF 
366b7 030 FF C3 E7 FF 
366bb 031 FF 7E 00 00 
366bf 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
366c3 033 00 36 7F 7F 
366c7 034 7F 7F 3E 1C 
366cb 035 08 00 00 00 
366cf 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
366d3 037 00 08 1C 3E 
366d7 038 7F 3E 1C 08 
366db 039 00 00 00 00 
366df 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
366e3 03b 18 3C 3C E7 
366e7 03c E7 E7 18 18 
366eb 03d 3C 00 00 00 
366ef 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
366f3 03f 18 3C 7E FF 
366f7 040 FF 7E 18 18 
366fb 041 3C 00 00 00 
366ff 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
36703 043 00 00 00 18 
36707 044 3C 3C 18 00 
3670b 045 00 00 00 00 
3670f 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
36713 047 FF FF FF E7 
36717 048 C3 C3 E7 FF 
3671b 049 FF FF FF FF 
3671f 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
36723 04b 00 00 3C 66 
36727 04c 42 42 66 3C 
3672b 04d 00 00 00 00 
3672f 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
36733 04f FF FF C3 99 
36737 050 BD BD 99 C3 
3673b 051 FF FF FF FF 
3673f 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
36743 053 78 70 58 4C 
36747 054 1E 33 33 33 
3674b 055 33 1E 00 00 
3674f 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
36753 057 3C 66 66 66 
36757 058 66 3C 18 7E 
3675b 059 18 18 00 00 
3675f 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
36763 05b FC CC FC 0C 
36767 05c 0C 0C 0C 0E 
3676b 05d 0F 07 00 00 
3676f 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
36773 05f FE C6 FE C6 
36777 060 C6 C6 C6 E6 
3677b 061 E7 67 03 00 
3677f 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
36783 063 18 18 DB 3C 
36787 064 E7 3C DB 18 
3678b 065 18 00 00 00 
3678f 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
36793 067 03 07 0F 1F 
36797 068 7F 1F 0F 07 
3679b 069 03 01 00 00 
3679f 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
367a3 06b 60 70 78 7C 
367a7 06c 7F 7C 78 70 
367ab 06d 60 40 00 00 
367af 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
367b3 06f 18 3C 7E 18 
367b7 070 18 18 7E 3C 
367bb 071 18 00 00 00 
367bf 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
367c3 073 66 66 66 66 
367c7 074 66 66 66    | 	byte	$66[7]
367ca 075 00 66 66 00 
367ce 076 00 00 00 00 
367d2 077 00 FE DB DB 
367d6 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
367da 079 D8 D8 D8 00 
367de 07a 00 00 00 3E 
367e2 07b 63 06 1C 36 
367e6 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
367ea 07d 30 63 3E 00 
367ee 07e 00 00 00 00 
367f2 07f 00 00 00 00 
367f6 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
367fa 081 7F 7F 7F 00 
367fe 082 00 00 00 00 
36802 083 00 18 3C 7E 
36806 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3680a 085 3C 18 7E 00 
3680e 086 00 00 00 00 
36812 087 00 18 3C 7E 
36816 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
3681a 089 18 18 18 00 
3681e 08a 00 00 00 00 
36822 08b 00 18 18 18 
36826 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3682a 08d 7E 3C 18 00 
3682e 08e 00 00 00 00 
36832 08f 00 00 00 18 
36836 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
3683a 091 00 00 00 00 
3683e 092 00 00 00 00 
36842 093 00 00 00    | 	byte	$00[11]
36845 094 0C 06 7F 06 
36849 095 0C 00 00 00 
3684d 096 00 00 00 00 
36851 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36855 098 00 03 03 03 
36859 099 7F 00 00 00 
3685d 09a 00 00 00 00 
36861 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36865 09c 14 36 7F 36 
36869 09d 14 00 00 00 
3686d 09e 00 00 00 00 
36871 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
36875 0a0 1C 1C 3E 3E 
36879 0a1 7F 7F 00 00 
3687d 0a2 00 00 00 00 
36881 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
36885 0a4 7F 3E 3E 1C 
36889 0a5 1C 08 00 00 
3688d 0a6 00 00 00 00 
36891 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36895 0a8 00 00 00 00 
36899 0a9 00 00 00 00 
3689d 0aa 00 00 00 00 
368a1 0ab 00 00       | 	byte	$00[14]
368a3 0ab 18 3C 3C 3C 
368a7 0ac 18 18 18 00 
368ab 0ad 18 18 00 00 
368af 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
368b3 0af 66 24 00 00 
368b7 0b0 00 00 00 00 
368bb 0b1 00 00 00 00 
368bf 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
368c3 0b3 00 36 36 7F 
368c7 0b4 36 36 36 7F 
368cb 0b5 36 36 00 00 
368cf 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
368d3 0b7 3E 63 43 03 
368d7 0b8 3E 60 60 61 
368db 0b9 63 3E 18 18 
368df 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
368e3 0bb 00 00 43 63 
368e7 0bc 30 18 0C 06 
368eb 0bd 63 61 00 00 
368ef 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
368f3 0bf 1C 36 36 1C 
368f7 0c0 6E 3B 33 33 
368fb 0c1 33 6E 00 00 
368ff 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
36903 0c3 0C 0C 0C 06 
36907 0c4 00 00 00 00 
3690b 0c5 00 00 00 00 
3690f 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36913 0c7 30 18 0C 0C 
36917 0c8 0C 0C 0C 0C 
3691b 0c9 18 30 00 00 
3691f 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
36923 0cb 0C 18 30 30 
36927 0cc 30 30 30 30 
3692b 0cd 18 0C 00 00 
3692f 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
36933 0cf 00 00 00 66 
36937 0d0 3C FF 3C 66 
3693b 0d1 00 00 00 00 
3693f 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
36943 0d3 00 00 00 18 
36947 0d4 18 7E 18 18 
3694b 0d5 00 00 00 00 
3694f 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
36953 0d7 00 00 00 00 
36957 0d8 00 00 00 00 | 	byte	$00[8]
3695b 0d9 18 18 18 0C 
3695f 0da 00 00 00 00 
36963 0db 00 00 00 00 
36967 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3696b 0dd 00 00 00 00 
3696f 0de 00 00 00 00 
36973 0df 00 00 00 00 
36977 0e0 00 00 00 00 | 	byte	$00[16]
3697b 0e1 18 18 00 00 
3697f 0e2 00 00 00 00 
36983 0e3 00 00 40 60 
36987 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3698b 0e5 03 01 00 00 
3698f 0e6 00 00 00 00 
36993 0e7 1C 36 63 63 
36997 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3699b 0e9 36 1C 00 00 
3699f 0ea 00 00 00 00 
369a3 0eb 18 1C 1E 18 
369a7 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
369ab 0ed 18 7E 00 00 
369af 0ee 00 00 00 00 
369b3 0ef 3E 63 60 30 
369b7 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
369bb 0f1 63 7F 00 00 
369bf 0f2 00 00 00 00 
369c3 0f3 3E 63 60 60 
369c7 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
369cb 0f5 63 3E 00 00 
369cf 0f6 00 00 00 00 
369d3 0f7 30 38 3C 36 
369d7 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
369db 0f9 30 78 00 00 
369df 0fa 00 00 00 00 
369e3 0fb 7F 03 03 03 
369e7 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
369eb 0fd 63 3E 00 00 
369ef 0fe 00 00 00 00 
369f3 0ff 1C 06 03 03 
369f7 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
369fb 101 63 3E 00 00 
369ff 102 00 00 00 00 
36a03 103 7F 63 60 60 
36a07 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
36a0b 105 0C 0C 00 00 
36a0f 106 00 00 00 00 
36a13 107 3E 63 63 63 
36a17 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
36a1b 109 63 3E 00 00 
36a1f 10a 00 00 00 00 
36a23 10b 3E 63 63 63 
36a27 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
36a2b 10d 30 1E 00 00 
36a2f 10e 00 00 00 00 
36a33 10f 00 00 00 18 
36a37 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
36a3b 111 18 18 00 00 
36a3f 112 00 00 00 00 
36a43 113 00 00 00 18 
36a47 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
36a4b 115 18 18 0C 00 
36a4f 116 00 00 00 00 
36a53 117 00 60 30 18 
36a57 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
36a5b 119 30 60 00 00 
36a5f 11a 00 00 00 00 
36a63 11b 00 00 00 7E 
36a67 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
36a6b 11d 00 00 00 00 
36a6f 11e 00 00 00 00 
36a73 11f 00          | 	byte	$00[9]
36a74 120 06 0C 18 30 
36a78 121 60 30 18 0C 
36a7c 122 06 00 00 00 
36a80 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
36a84 124 63 63 30 18 
36a88 125 18 18 00 18 
36a8c 126 18 00 00 00 
36a90 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
36a94 128 3E 63 63 7B 
36a98 129 7B 7B 3B 03 
36a9c 12a 3E 00 00 00 
36aa0 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
36aa4 12c 1C 36 63 63 
36aa8 12d 7F 63 63 63 
36aac 12e 63 00 00 00 
36ab0 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
36ab4 130 66 66 66 3E 
36ab8 131 66 66 66 66 
36abc 132 3F 00 00 00 
36ac0 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
36ac4 134 66 43 03 03 
36ac8 135 03 03 43 66 
36acc 136 3C 00 00 00 
36ad0 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
36ad4 138 36 66 66 66 
36ad8 139 66 66 66 36 
36adc 13a 1F 00 00 00 
36ae0 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
36ae4 13c 66 46 16 1E 
36ae8 13d 16 06 46 66 
36aec 13e 7F 00 00 00 
36af0 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
36af4 140 66 46 16 1E 
36af8 141 16 06 06 06 
36afc 142 0F 00 00 00 
36b00 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
36b04 144 66 43 03 03 
36b08 145 7B 63 63 66 
36b0c 146 5C 00 00 00 
36b10 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
36b14 148 63 63 63 7F 
36b18 149 63 63 63 63 
36b1c 14a 63 00 00 00 
36b20 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
36b24 14c 18 18 18 18 
36b28 14d 18 18 18 18 | 	byte	$18[8]
36b2c 14e 3C 00 00 00 
36b30 14f 00 00 00 78 
36b34 150 30 30 30 30 
36b38 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
36b3c 152 1E 00 00 00 
36b40 153 00 00 00 67 
36b44 154 66 66 36 1E 
36b48 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
36b4c 156 67 00 00 00 
36b50 157 00 00 00 0F 
36b54 158 06 06 06 06 
36b58 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
36b5c 15a 7F 00 00 00 
36b60 15b 00 00 00 63 
36b64 15c 77 7F 7F 6B 
36b68 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
36b6c 15e 63 00 00 00 
36b70 15f 00 00 00 63 
36b74 160 67 6F 7F 7B 
36b78 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
36b7c 162 63 00 00 00 
36b80 163 00 00 00 3E 
36b84 164 63 63 63 63 
36b88 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
36b8c 166 3E 00 00 00 
36b90 167 00 00 00 3F 
36b94 168 66 66 66 3E 
36b98 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
36b9c 16a 0F 00 00 00 
36ba0 16b 00 00 00 3E 
36ba4 16c 63 63 63 63 
36ba8 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
36bac 16e 3E 30 70 00 
36bb0 16f 00 00 00 3F 
36bb4 170 66 66 66 3E 
36bb8 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
36bbc 172 67 00 00 00 
36bc0 173 00 00 00 3E 
36bc4 174 63 63 06 1C 
36bc8 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
36bcc 176 3E 00 00 00 
36bd0 177 00 00 00 7E 
36bd4 178 7E 5A 18 18 
36bd8 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
36bdc 17a 3C 00 00 00 
36be0 17b 00 00 00 63 
36be4 17c 63 63 63 63 
36be8 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
36bec 17e 3E 00 00 00 
36bf0 17f 00 00 00 63 
36bf4 180 63 63 63 63 
36bf8 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
36bfc 182 08 00 00 00 
36c00 183 00 00 00 63 
36c04 184 63 63 63 6B 
36c08 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
36c0c 186 36 00 00 00 
36c10 187 00 00 00 63 
36c14 188 63 36 3E 1C 
36c18 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
36c1c 18a 63 00 00 00 
36c20 18b 00 00 00 66 
36c24 18c 66 66 66 3C 
36c28 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
36c2c 18e 3C 00 00 00 
36c30 18f 00 00 00 7F 
36c34 190 63 61 30 18 
36c38 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
36c3c 192 7F 00 00 00 
36c40 193 00 00 00 3C 
36c44 194 0C 0C 0C 0C 
36c48 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
36c4c 196 3C 00 00 00 
36c50 197 00 00 00 00 
36c54 198 01 03 07 0E 
36c58 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
36c5c 19a 40 00 00 00 
36c60 19b 00 00 00 3C 
36c64 19c 30 30 30 30 
36c68 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
36c6c 19e 3C 00 00 00 
36c70 19f 1C 36 00 00 
36c74 1a0 00 00 00 00 
36c78 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36c7c 1a2 00 00 00 00 
36c80 1a3 00 00 00 00 
36c84 1a4 00 00 00 00 
36c88 1a5 00 00 00 00 
36c8c 1a6 00          | 	byte	$00[17]
36c8d 1a6 FF 00 00 0C 
36c91 1a7 18 00 00 00 
36c95 1a8 00 00 00 00 
36c99 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36c9d 1aa 00 00 00 00 
36ca1 1ab 00 00 00 00 
36ca5 1ac 00          | 	byte	$00[9]
36ca6 1ac 1E 30 3E 33 
36caa 1ad 33 33 6E 00 
36cae 1ae 00 00 00 00 
36cb2 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
36cb6 1b0 1E 36 66 66 
36cba 1b1 66 66 3E 00 
36cbe 1b2 00 00 00 00 
36cc2 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
36cc6 1b4 3E 63 03 03 
36cca 1b5 03 63 3E 00 
36cce 1b6 00 00 00 00 
36cd2 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
36cd6 1b8 3C 36 33 33 
36cda 1b9 33 33 6E 00 
36cde 1ba 00 00 00 00 
36ce2 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ce6 1bc 3E 63 7F 03 
36cea 1bd 03 63 3E 00 
36cee 1be 00 00 00 00 
36cf2 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
36cf6 1c0 0C 1E 0C 0C 
36cfa 1c1 0C 0C 1E 00 
36cfe 1c2 00 00 00 00 
36d02 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
36d06 1c4 6E 33 33 33 
36d0a 1c5 33 33 3E 30 
36d0e 1c6 33 1E 00 00 
36d12 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
36d16 1c8 36 6E 66 66 
36d1a 1c9 66 66 67 00 
36d1e 1ca 00 00 00 00 
36d22 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
36d26 1cc 1C 18 18 18 
36d2a 1cd 18 18 3C 00 
36d2e 1ce 00 00 00 00 
36d32 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
36d36 1d0 70 60 60 60 
36d3a 1d1 60 60 60 66 
36d3e 1d2 66 3C 00 00 
36d42 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
36d46 1d4 66 36 1E 1E 
36d4a 1d5 36 66 67 00 
36d4e 1d6 00 00 00 00 
36d52 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
36d56 1d8 18 18 18 18 
36d5a 1d9 18 18       | 	byte	$18[6]
36d5c 1da 3C 00 00 00 
36d60 1db 00 00 00 00 
36d64 1dc 00 00 37 7F 
36d68 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
36d6c 1de 63 00 00 00 
36d70 1df 00 00 00 00 
36d74 1e0 00 00 3B 66 
36d78 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
36d7c 1e2 66 00 00 00 
36d80 1e3 00 00 00 00 
36d84 1e4 00 00 3E 63 
36d88 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
36d8c 1e6 3E 00 00 00 
36d90 1e7 00 00 00 00 
36d94 1e8 00 00 3B 66 
36d98 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
36d9c 1ea 3E 06 06 0F 
36da0 1eb 00 00 00 00 
36da4 1ec 00 00 6E 33 
36da8 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
36dac 1ee 3E 30 30 78 
36db0 1ef 00 00 00 00 
36db4 1f0 00 00 3B 6E 
36db8 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
36dbc 1f2 0F 00 00 00 
36dc0 1f3 00 00 00 00 
36dc4 1f4 00 00 3E 63 
36dc8 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
36dcc 1f6 3E 00 00 00 
36dd0 1f7 00 00 00 08 
36dd4 1f8 0C 0C 3F 0C 
36dd8 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
36ddc 1fa 38 00 00 00 
36de0 1fb 00 00 00 00 
36de4 1fc 00 00 33 33 
36de8 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
36dec 1fe 6E 00 00 00 
36df0 1ff 00 00 00 00 
36df4 200 00 00 63 63 
36df8 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
36dfc 202 1C 00 00 00 
36e00 203 00 00 00 00 
36e04 204 00 00 63 63 
36e08 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
36e0c 206 36 00 00 00 
36e10 207 00 00 00 00 
36e14 208 00 00 63 36 
36e18 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
36e1c 20a 63 00 00 00 
36e20 20b 00 00 00 00 
36e24 20c 00 00 63 63 
36e28 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
36e2c 20e 7E 60 30 1F 
36e30 20f 00 00 00 00 
36e34 210 00 00 7F 33 
36e38 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
36e3c 212 7F 00 00 00 
36e40 213 00 00 00 70 
36e44 214 18 18 18 0E 
36e48 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
36e4c 216 70 00 00 00 
36e50 217 00 00 00 18 
36e54 218 18 18 18 18 
36e58 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
36e5c 21a 18 00 00 00 
36e60 21b 00 00 00 0E 
36e64 21c 18 18 18 70 
36e68 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
36e6c 21e 0E 00 00 00 
36e70 21f 6E 3B 00 00 
36e74 220 00 00 00 00 
36e78 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36e7c 222 00 00 00 00 
36e80 223 00 00 00 00 
36e84 224 00 00       | 	byte	$00[10]
36e86 224 08 1C 36 63 
36e8a 225 63 63 7F 00 
36e8e 226 00 00 00 00 
36e92 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
36e96 228 03 03 03 03 
36e9a 229 43 66 3C 18 
36e9e 22a 30 1E 00 00 
36ea2 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
36ea6 22c 33 33 33 33 
36eaa 22d 33 33       | 	byte	$33[6]
36eac 22e 6E 00 00 00 
36eb0 22f 00 00 60 30 
36eb4 230 18 00 3E 63 
36eb8 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
36ebc 232 3E 00 00 00 
36ec0 233 00 00 08 1C 
36ec4 234 36 00 1E 30 
36ec8 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
36ecc 236 6E 00 00 00 
36ed0 237 00 00 00 00 
36ed4 238 33 00 1E 30 
36ed8 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
36edc 23a 6E 00 00 00 
36ee0 23b 00 00 1C 36 
36ee4 23c 1C 00 33 33 
36ee8 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
36eec 23e 6E 00 00 00 
36ef0 23f 00 00 60 30 
36ef4 240 18 00 3E 63 
36ef8 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
36efc 242 3E 00 00 00 
36f00 243 00 00 00 00 
36f04 244 00 00 3E 63 
36f08 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
36f0c 246 3E 18 30 1E 
36f10 247 00 00 00 1C 
36f14 248 58 78 38 18 
36f18 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
36f1c 24a 3C 00 00 00 
36f20 24b 00 00 00 00 
36f24 24c 63 00 3E 63 
36f28 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
36f2c 24e 3E 00 00 00 
36f30 24f 66 33 00 3E 
36f34 250 63 63 63 63 
36f38 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
36f3c 252 3E 00 00 00 
36f40 253 00 00 CC 66 
36f44 254 33 00 3E 63 
36f48 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
36f4c 256 3E 00 00 00 
36f50 257 00 00 18 3C 
36f54 258 66 00 1C 18 
36f58 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
36f5c 25a 3C 00 00 00 
36f60 25b 30 18 00 7F 
36f64 25c 63 61 30 18 
36f68 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
36f6c 25e 7F 00 00 00 
36f70 25f 00 63 00 08 
36f74 260 1C 36 63 63 
36f78 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
36f7c 262 63 00 00 00 
36f80 263 30 18 00 3C 
36f84 264 66 43 03 03 
36f88 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
36f8c 266 3C 00 00 00 
36f90 267 30 18 00 7F 
36f94 268 66 46 16 1E 
36f98 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
36f9c 26a 7F 00 00 00 
36fa0 26b 0C 06 00 0F 
36fa4 26c 06 06 06 06 
36fa8 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
36fac 26e 7F 00 00 00 
36fb0 26f 30 18 00 1C 
36fb4 270 18 18 18 18 
36fb8 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
36fbc 272 3C 00 00 00 
36fc0 273 00 00 08 1C 
36fc4 274 36 00 3E 63 
36fc8 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
36fcc 276 3E 00 00 00 
36fd0 277 00 00 00 00 
36fd4 278 63 00 3E 63 
36fd8 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
36fdc 27a 3E 00 00 00 
36fe0 27b 00 00 00 6F 
36fe4 27c 46 26 06 06 
36fe8 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
36fec 27e 7F 00 00 00 
36ff0 27f 00 00 00 6E 
36ff4 280 4C 2C 0C 0C 
36ff8 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
36ffc 282 1E 00 00 00 
37000 283 30 18 00 3E 
37004 284 63 63 06 1C 
37008 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3700c 286 3E 00 00 00 
37010 287 00 00 60 30 
37014 288 18 00 3E 63 
37018 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3701c 28a 3E 00 00 00 
37020 28b 00 63 00 3E 
37024 28c 63 63 63 63 
37028 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3702c 28e 3E 00 00 00 
37030 28f 00 63 00 63 
37034 290 63 63 63 63 
37038 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3703c 292 3E 00 00 00 
37040 293 6C 38 00 7E 
37044 294 7E 5A 18 18 
37048 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3704c 296 3C 00 00 00 
37050 297 00 00 60 48 
37054 298 2C 0C 3F 0C 
37058 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3705c 29a 38 00 00 00 
37060 29b 00 00 00 0F 
37064 29c 26 36 1E 0E 
37068 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3706c 29e 7F 00 00 00 
37070 29f 00 00 00 00 
37074 2a0 00 63 36 1C 
37078 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3707c 2a2 00 00 00 00 
37080 2a3 00 00       | 	byte	$00[6]
37082 2a3 36 1C 08 00 
37086 2a4 3E 63 03 03 
3708a 2a5 03 63 3E 00 
3708e 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
37092 2a7 30 18 0C 00 
37096 2a8 1E 30 3E 33 
3709a 2a9 33 33 6E 00 
3709e 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
370a2 2ab 60 30 18 00 
370a6 2ac 1C 18 18 18 
370aa 2ad 18 18 3C 00 
370ae 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
370b2 2af 60 30 18 00 
370b6 2b0 3E 63 63 63 
370ba 2b1 63 63 3E 00 
370be 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
370c2 2b3 30 18 0C 00 
370c6 2b4 33 33 33 33 
370ca 2b5 33 33 6E 00 
370ce 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
370d2 2b7 00 08 1C 36 
370d6 2b8 63 63 7F 63 
370da 2b9 63 63 63 18 
370de 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
370e2 2bb 00 00 00 00 
370e6 2bc 1E 30 3E 33 
370ea 2bd 33 33 6E 18 
370ee 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
370f2 2bf 00 7F 63 61 
370f6 2c0 30 18 0C 06 
370fa 2c1 43 63 7F 00 
370fe 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
37102 2c3 36 1C 08 00 
37106 2c4 7F 33 18 0C 
3710a 2c5 06 63 7F 00 
3710e 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
37112 2c7 00 7F 66 46 
37116 2c8 16 1E 16 06 
3711a 2c9 46 66 7F 18 
3711e 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
37122 2cb 00 00 00 00 
37126 2cc 3E 63 7F 03 
3712a 2cd 03 63 3E 18 
3712e 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
37132 2cf 00 3C 66 03 
37136 2d0 1F 03 0F 03 
3713a 2d1 03 66 3C 00 
3713e 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
37142 2d3 60 30 18 00 
37146 2d4 7F 33 18 0C 
3714a 2d5 06 63 7F 00 
3714e 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
37152 2d7 00 3C 66 43 
37156 2d8 03 03 03 03 
3715a 2d9 43 66 3C 00 
3715e 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
37162 2db 00 00 00 00 
37166 2dc 3E 63 06 1C 
3716a 2dd 30 63 3E 18 
3716e 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
37172 2df 00 00 00 00 
37176 2e0 00 00       | 	byte	$00[6]
37178 2e1 6C 36 1B 36 
3717c 2e2 6C 00 00 00 
37180 2e3 00 00 00 00 
37184 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37188 2e5 1B 36 6C 36 
3718c 2e6 1B 00 00 00 
37190 2e7 88 22 88 22 
37194 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
37198 2e9 88 22 88 22 
3719c 2ea 88 22 88 22 
371a0 2eb AA 55 AA 55 
371a4 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
371a8 2ed AA 55 AA 55 
371ac 2ee AA 55 AA 55 
371b0 2ef BB EE BB EE 
371b4 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
371b8 2f1 BB EE BB EE 
371bc 2f2 BB EE BB EE 
371c0 2f3 18 18 18 18 
371c4 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
371c8 2f5 18 18 18 18 
371cc 2f6 18 18 18 18 
371d0 2f7 18 18 18 18 
371d4 2f8 18 18 18    | 	byte	$18[15]
371d7 2f8 1F 18 18 18 
371db 2f9 18 18 18 18 
371df 2fa 18 30 18 00 
371e3 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
371e7 2fc 63 7F 63 63 
371eb 2fd 63 63 00 00 
371ef 2fe 00 1C 36 00 
371f3 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
371f7 300 63 7F 63 63 
371fb 301 63 63 00 00 
371ff 302 00 36 1C 00 
37203 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
37207 304 1E 16 06 46 
3720b 305 66 7F 00 00 
3720f 306 00 00 00 00 
37213 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
37217 308 1C 30 60 63 
3721b 309 63 3E 18 30 
3721f 30a 1E 6C 6C 6C 
37223 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
37227 30c 6F 6C 6C 6C 
3722b 30d 6C 6C 6C 6C 
3722f 30e 6C 6C 6C 6C 
37233 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
37237 310 6C 6C 6C 6C 
3723b 311 6C 6C 6C 6C 
3723f 312 6C          | 	byte	$6c[9]
37240 313 00 00 00 00 
37244 314 00          | 	byte	$00[5]
37245 314 7F 60 6F 6C 
37249 315 6C 6C 6C 6C 
3724d 316 6C 6C 6C 6C 
37251 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
37255 318 6F 60 7F 00 
37259 319 00 00 00 00 
3725d 31a 00 00 00 18 
37261 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
37265 31c 61 30 18 0C 
37269 31d 06 43 63 7F 
3726d 31e 00 00 00 00 
37271 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
37275 320 00 7F 33 18 
37279 321 0C 06 63 7F 
3727d 322 00 00 00 00 
37281 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
37285 324 00 00 1F 18 
37289 325 18 18 18 18 
3728d 326 18 18 18 18 
37291 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37295 328 18 18 F8 00 
37299 329 00 00 00 00 
3729d 32a 00 00 00 18 
372a1 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
372a5 32c 18 18 FF 00 
372a9 32d 00 00 00 00 
372ad 32e 00 00 00 00 
372b1 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
372b5 330 00 00 FF 18 
372b9 331 18 18 18 18 
372bd 332 18 18 18 18 
372c1 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
372c5 334 18 18 F8 18 
372c9 335 18 18 18 18 
372cd 336 18 18 18 00 
372d1 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
372d5 338 00 00 FF 00 
372d9 339 00 00 00 00 
372dd 33a 00 00 00 18 
372e1 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
372e5 33c 18 18 FF 18 
372e9 33d 18 18 18 18 
372ed 33e 18 18 18 63 
372f1 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
372f5 340 36 63 63 7F 
372f9 341 63 63 63 63 
372fd 342 00 00 00 00 
37301 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
37305 344 00 1E 30 3E 
37309 345 33 33 33 6E 
3730d 346 00 00 00 6C 
37311 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
37315 348 EC 0C FC 00 
37319 349 00 00 00 00 
3731d 34a 00 00 00 00 
37321 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37325 34c FC 0C EC 6C 
37329 34d 6C 6C 6C 6C 
3732d 34e 6C 6C 6C 6C 
37331 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
37335 350 EF 00 FF 00 
37339 351 00 00 00 00 
3733d 352 00 00 00 00 
37341 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37345 354 FF 00 EF 6C 
37349 355 6C 6C 6C 6C 
3734d 356 6C 6C 6C 6C 
37351 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
37355 358 EC 0C EC 6C 
37359 359 6C 6C 6C 6C 
3735d 35a 6C 6C 6C 00 
37361 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
37365 35c FF 00 FF 00 
37369 35d 00 00 00 00 
3736d 35e 00 00 00 6C 
37371 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
37375 360 EF 00 EF 6C 
37379 361 6C 6C 6C 6C 
3737d 362 6C 6C 6C 00 
37381 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
37385 364 63 3E 63 63 
37389 365 63 63 3E 63 
3738d 366 00 00 00 00 
37391 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
37395 368 30 3C 36 33 
37399 369 33 33 33 6E 
3739d 36a 00 00 00 00 
373a1 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
373a5 36c 66 66 6F 66 
373a9 36d 66 66 36 1F 
373ad 36e 00 00 00 36 
373b1 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
373b5 370 66 66 66 66 
373b9 371 66 66       | 	byte	$66[6]
373bb 371 36 1F 00 00 
373bf 372 00 00 63 00 
373c3 373 7F 66 46 16 
373c7 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
373cb 375 66 7F 00 00 
373cf 376 00 6C 38 00 
373d3 377 38 30 30 3C 
373d7 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
373db 379 33 6E 00 00 
373df 37a 00 36 1C 00 
373e3 37b 63 67 6F 7F 
373e7 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
373eb 37d 63 63 00 00 
373ef 37e 00 30 18 00 
373f3 37f 3C 18 18 18 
373f7 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
373fb 381 18 3C 00 00 
373ff 382 00 3C 66 00 
37403 383 3C 18 18 18 
37407 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3740b 385 18 3C 00 00 
3740f 386 00 00 00 36 
37413 387 1C 08 00 3E 
37417 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3741b 389 63 3E 00 00 
3741f 38a 00 18 18 18 
37423 38b 18 18 18 18 
37427 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3742b 38d 00 00 00 00 
3742f 38e 00 00 00 00 
37433 38f 00 00 00 00 | 	byte	$00[12]
37437 390 F8 18 18 18 
3743b 391 18 18 18 18 
3743f 392 18 FF FF FF 
37443 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
37447 394 FF FF FF FF 
3744b 395 FF FF FF FF 
3744f 396 FF          | 	byte	$ff[9]
37450 397 00 00 00 00 
37454 398 00 00 00    | 	byte	$00[7]
37457 398 FF FF FF FF 
3745b 399 FF FF FF FF 
3745f 39a FF          | 	byte	$ff[9]
37460 39b 00 00 00 7E 
37464 39c 7E 5A 18 18 
37468 39d 18 18 18 18 
3746c 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
37470 39f 1C 36 1C 63 
37474 3a0 63 63 63 63 
37478 3a1 63 63 63 63 
3747c 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37480 3a3 FF FF FF FF 
37484 3a4 FF FF FF    | 	byte	$ff[7]
37487 3a4 00 00 00 00 
3748b 3a5 00 00 00 00 
3748f 3a6 00          | 	byte	$00[9]
37490 3a7 30 18 00 3E 
37494 3a8 63 63 63 63 
37498 3a9 63 63 63 63 
3749c 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
374a0 3ab 00 00 00 1E 
374a4 3ac 33 33 33 1B 
374a8 3ad 33 63 63 63 
374ac 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
374b0 3af 1C 36 00 3E 
374b4 3b0 63 63 63 63 
374b8 3b1 63 63 63 63 
374bc 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
374c0 3b3 30 18 00 63 
374c4 3b4 67 6F 7F 7B 
374c8 3b5 73 63 63 63 
374cc 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
374d0 3b7 00 00 60 30 
374d4 3b8 18 00 3B 66 
374d8 3b9 66 66 66 66 
374dc 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
374e0 3bb 00 00 36 1C 
374e4 3bc 08 00 3B 66 
374e8 3bd 66 66 66 66 
374ec 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
374f0 3bf 36 1C 00 3E 
374f4 3c0 63 63 06 1C 
374f8 3c1 30 60 63 63 
374fc 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
37500 3c3 00 00 36 1C 
37504 3c4 08 00 3E 63 
37508 3c5 06 1C 30 63 
3750c 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
37510 3c7 30 18 00 3F 
37514 3c8 66 66 66 3E 
37518 3c9 36 66 66 66 
3751c 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
37520 3cb 30 18 00 63 
37524 3cc 63 63 63 63 
37528 3cd 63 63 63 63 
3752c 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37530 3cf 00 00 60 30 
37534 3d0 18 00 3B 6E 
37538 3d1 66 06 06 06 
3753c 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
37540 3d3 66 33 00 63 
37544 3d4 63 63 63 63 
37548 3d5 63 63 63 63 
3754c 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37550 3d7 00 00 60 30 
37554 3d8 18 00 63 63 
37558 3d9 63 63 63 63 
3755c 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
37560 3db 30 18 00 66 
37564 3dc 66 66 66 3C 
37568 3dd 18 18 18 18 
3756c 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
37570 3df 00 00 00 08 
37574 3e0 0C 0C 3F 0C 
37578 3e1 0C 0C 0C 6C 
3757c 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
37580 3e3 30 18 00 00 
37584 3e4 00 00 00 00 
37588 3e5 00 00 00 00 
3758c 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37590 3e7 00 00 00 00 
37594 3e8 00 00 00 00 | 	byte	$00[8]
37598 3e9 7F 00 00 00 
3759c 3ea 00 00 00 00 
375a0 3eb 66 33 00 00 
375a4 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
375a8 3ed 00 00 00 00 
375ac 3ee 00 00 00 00 
375b0 3ef 00 00 00 00 
375b4 3f0 00 00 00 00 
375b8 3f1 00 00 00 00 
375bc 3f2 00          | 	byte	$00[21]
375bd 3f2 0C 06 3C 36 
375c1 3f3 1C 00 00 00 
375c5 3f4 00 00 00 00 
375c9 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
375cd 3f6 00 00 00 63 
375d1 3f7 3E 00 00 00 
375d5 3f8 00 00 00 00 
375d9 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
375dd 3fa 00 00 00 00 
375e1 3fb 3E 63 06 1C 
375e5 3fc 36 63 63 36 
375e9 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
375ed 3fe 00 00 00 00 
375f1 3ff 00 00 00 00 | 	byte	$00[8]
375f5 400 18 00 7E 00 
375f9 401 18 00 00 00 
375fd 402 00 00 00 00 
37601 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37605 404 00 00 00 00 
37609 405 00 00 00 00 | 	byte	$00[8]
3760d 406 18 30 1E 00 
37611 407 00 00 1C 36 
37615 408 36 1C 00 00 
37619 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
3761d 40a 00 00 00 00 
37621 40b 63 00 00 00 
37625 40c 00 00 00 00 
37629 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3762d 40e 00 00 00 18 
37631 40f 18 00 00 00 
37635 410 00 00 00 00 
37639 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3763d 412 00 00 00 00 
37641 413 00          | 	byte	$00[5]
37642 413 CC 66 33 00 
37646 414 33 33 33 33 
3764a 415 33 33 6E 00 
3764e 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
37652 417 00 3F 66 66 
37656 418 66 3E 36 66 
3765a 419 66 66 6F 00 
3765e 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
37662 41b 36 1C 08 00 
37666 41c 3B 6E 66 06 
3766a 41d 06 06 0F 00 
3766e 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
37672 41f 00 00 00 7E 
37676 420 7E 7E 7E 7E 
3767a 421 7E 7E 00 00 
3767e 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
37682 423 00 00 00 00 
37686 424 00 00 00 00 
3768a 425 00 00 00 00 
3768e 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37690 427 00 00 00 00 
      ...             
376c0 433 00 00 00 00 
376c4 434 00 00 00    | st_font        file "st4font.def"
376c7 434 FF FF 00 00 
376cb 435 00 00 00 00 
376cf 436 00 18 18 18 
376d3 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
376d7 438 18 18 18 18 
376db 439 18 18 18 18 
376df 43a 18          | 	byte	$18[9]
376e0 43b 00 00 00 00 
376e4 43c 00 00 00    | 	byte	$00[7]
376e7 43c FF FF 18 18 
376eb 43d 18 18 18 18 
376ef 43e 18 18 18 18 
376f3 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
376f7 440 FF FF 00 00 
376fb 441 00 00 00 00 
376ff 442 00 18 18 18 
37703 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37707 444 1F 1F 18 18 
3770b 445 18 18 18 18 
3770f 446 18 18 18 18 
37713 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37717 448 F8 F8 18 18 
3771b 449 18 18 18 18 
3771f 44a 18 00 00 00 
37723 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37727 44c 1F 1F 18 18 
3772b 44d 18 18 18 18 
3772f 44e 18 00 00 00 
37733 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37737 450 F8 F8 18 18 
3773b 451 18 18 18 18 
3773f 452 18 18 18 18 
37743 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37747 454 1F 1F 00 00 
3774b 455 00 00 00 00 
3774f 456 00 18 18 18 
37753 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37757 458 F8 F8 00 00 
3775b 459 00 00 00 00 
3775f 45a 00 18 18 18 
37763 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37767 45c FF FF 18 18 
3776b 45d 18 18 18 18 
3776f 45e 18 00 00 18 
37773 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
37777 460 66 7E 7E 66 
3777b 461 66 66 66 30 
3777f 462 18 00 00 7E 
37783 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
37787 464 3E 06 06 06 
3778b 465 06 7E 7E 18 
3778f 466 0C 30 18 3C 
37793 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
37797 468 06 06 06 66 
3779b 469 66 7E 3C 00 
3779f 46a 00 30 18 66 
377a3 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
377a7 46c 7E 7E 76 76 
377ab 46d 66 66 66 00 
377af 46e 00 30 18 7C 
377b3 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
377b7 470 1C 38 70 60 
377bb 471 60 7E 3E 00 
377bf 472 00 30 18 7E 
377c3 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
377c7 474 18 0C 0C 06 
377cb 475 06 7E 7E 00 
377cf 476 00 18 18 00 
377d3 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
377d7 478 18 18 0C 0C 
377db 479 06 7E 7E 00 
377df 47a 00 30 18 3C 
377e3 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
377e7 47c 66 66 66 66 
377eb 47d 66          | 	byte	$66[5]
377ec 47e 7E 3C 00 00 
377f0 47f 00 00 06 06 
377f4 480 06 06 16 1E 
377f8 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
377fc 482 7E 7E 00 00 
37800 483 00 00 00 00 
37804 484 00 3C 7C 60 
37808 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3780c 486 7E 7C 30 18 
37810 487 00 00 00 00 
37814 488 00 3C 7E 66 
37818 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
3781c 48a 7E 7C 18 0C 
37820 48b 00 00 30 18 
37824 48c 00 3C 3E 06 
37828 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3782c 48e 7E 7C 00 00 
37830 48f 00 00 30 18 
37834 490 00 3E 7E 66 
37838 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3783c 492 66 66 00 00 
37840 493 00 00 30 18 
37844 494 00 7C 7E 06 
37848 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3784c 496 7E 3E 00 00 
37850 497 00 00 30 18 
37854 498 00 7E 7E 30 
37858 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3785c 49a 7E 7E 00 00 
37860 49b 00 00 18 18 
37864 49c 00 7E 7E 30 
37868 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3786c 49e 7E 7E 00 00 
37870 49f 00 00 30 18 
37874 4a0 00 3C 7E 66 
37878 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3787c 4a2 7E 3C 00 00 
37880 4a3 00 00 1C 1C 
37884 4a4 18 18 38 3C 
37888 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3788c 4a6 3C 3C 00 00 
37890 4a7 00 00 00 00 
37894 4a8 00 00 00 00 
37898 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3789c 4aa 00 00 00 00 
378a0 4ab 00 00       | 	byte	$00[6]
378a2 4ab 18 18 18 18 
378a6 4ac 18 18 18 18 | 	byte	$18[8]
378aa 4ad 00 00 18 18 
378ae 4ae 00 00 00 00 
378b2 4af 66 66 66 66 
378b6 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
378ba 4b1 00 00 00 00 
378be 4b2 00 00 00 00 
378c2 4b3 00          | 	byte	$00[9]
378c3 4b3 66 66 FF FF 
378c7 4b4 66 66 FF FF 
378cb 4b5 66 66 00 00 
378cf 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
378d3 4b7 7C 7E 06 06 
378d7 4b8 3E 7C 60 60 
378db 4b9 7E 3E 18 18 
378df 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
378e3 4bb 66 30 30 18 
378e7 4bc 18 0C 0C 66 
378eb 4bd 66 00 00 00 
378ef 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
378f3 4bf 66 66 3C 1C 
378f7 4c0 1C FC FE 66 
378fb 4c1 66 FE FC 00 
378ff 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
37903 4c3 18 18 18 18 
37907 4c4 00 00 00 00 
3790b 4c5 00 00 00 00 
3790f 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
37913 4c7 18 1C 0C 0C 
37917 4c8 0C 0C 0C 0C 
3791b 4c9 1C 18 30 00 
3791f 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
37923 4cb 18 38 30 30 
37927 4cc 30 30 30 30 
3792b 4cd 38 18 0C 00 
3792f 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
37933 4cf 66 66 3C 3C 
37937 4d0 FF FF 3C 3C 
3793b 4d1 66 66 00 00 
3793f 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
37943 4d3 00 18 18 18 
37947 4d4 7E 7E 18 18 
3794b 4d5 18 00 00 00 
3794f 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37953 4d7 00 00 00 00 
37957 4d8 00 00       | 	byte	$00[6]
37959 4d9 18 18 18 18 
3795d 4da 18          | 	byte	$18[5]
3795e 4da 0C 04 00 00 
37962 4db 00 00 00 00 
37966 4dc 7E 7E 00 00 
3796a 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3796e 4de 00 00 00 00 
37972 4df 00 00 00 00 
37976 4e0 00 00 00 00 
3797a 4e1 00          | 	byte	$00[13]
3797b 4e1 18 18 18 00 
3797f 4e2 00 00 00 60 
37983 4e3 60 60 30 30 
37987 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3798b 4e5 06 06 06 00 
3798f 4e6 00 00 00 3C 
37993 4e7 7E 66 66 66 
37997 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3799b 4e9 66 7E 3C 00 
3799f 4ea 00 00 00 18 
379a3 4eb 18 1C 1C 18 
379a7 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
379ab 4ed 18 7E 7E 00 
379af 4ee 00 00 00 3C 
379b3 4ef 7E 66 66 30 
379b7 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
379bb 4f1 0C 7E 7E 00 
379bf 4f2 00 00 00 7E 
379c3 4f3 7E 30 30 18 
379c7 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
379cb 4f5 66 7E 3C 00 
379cf 4f6 00 00 00 30 
379d3 4f7 30 38 38 3C 
379d7 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
379db 4f9 7E 30 30 00 
379df 4fa 00 00 00 7E 
379e3 4fb 7E 06 06 3E 
379e7 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
379eb 4fd 66 7E 3C 00 
379ef 4fe 00 00 00 38 
379f3 4ff 3C 0E 06 06 
379f7 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
379fb 501 66 7E 3C 00 
379ff 502 00 00 00 7E 
37a03 503 7E 60 60 30 
37a07 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
37a0b 505 0C 0C 0C 00 
37a0f 506 00 00 00 3C 
37a13 507 7E 66 66 3C 
37a17 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
37a1b 509 66 7E 3C 00 
37a1f 50a 00 00 00 3C 
37a23 50b 7E 66 66 7E 
37a27 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
37a2b 50d 70 3C 1C 00 
37a2f 50e 00 00 00 00 
37a33 50f 00 00 18 18 
37a37 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
37a3b 511 18 18 18 00 
37a3f 512 00 00 00 00 
37a43 513 00 00 18 18 
37a47 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
37a4b 515 18 18 18 0C 
37a4f 516 04 00 00 00 
37a53 517 70 38 1C 0E 
37a57 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
37a5b 519 70 00 00 00 
37a5f 51a 00 00 00 00 
37a63 51b 00 00 7E 7E 
37a67 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
37a6b 51d 00 00 00 00 
37a6f 51e 00 00 00 00 | 	byte	$00[8]
37a73 51f 0E 1C 38 70 
37a77 520 E0 70 38 1C 
37a7b 521 0E 00 00 00 
37a7f 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
37a83 523 7E 66 66 30 
37a87 524 30 18 18 18 
37a8b 525 00 18 18 00 
37a8f 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
37a93 527 7E 66 66 66 
37a97 528 66 36 06 66 
37a9b 529 66 7E 3C 00 
37a9f 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
37aa3 52b 3C 7E 66 66 
37aa7 52c 66 7E 7E 66 
37aab 52d 66 66 66 00 
37aaf 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
37ab3 52f 7E 66 66 7E 
37ab7 530 3E 66 66 66 
37abb 531 66 7E 3E 00 
37abf 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
37ac3 533 7E 66 66 06 
37ac7 534 06 06 06 66 
37acb 535 66 7E 3C 00 
37acf 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
37ad3 537 7E 66 66 66 
37ad7 538 66 66 66 66 
37adb 539 66 7E 3E 00 
37adf 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
37ae3 53b 7E 06 06 3E 
37ae7 53c 3E 06 06 06 
37aeb 53d 06 7E 7E 00 
37aef 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
37af3 53f 7E 06 06 3E 
37af7 540 3E 06 06 06 
37afb 541 06 06 06 00 
37aff 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
37b03 543 7E 06 06 76 
37b07 544 76 66 66 66 
37b0b 545 66 7E 3C 00 
37b0f 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
37b13 547 66 66 66 7E 
37b17 548 7E 66 66 66 
37b1b 549 66 66 66 00 
37b1f 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
37b23 54b 7E 18 18 18 
37b27 54c 18 18 18 18 
37b2b 54d 18 7E 7E 00 
37b2f 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
37b33 54f 60 60 60 60 
37b37 550 60 60 60    | 	byte	$60[7]
37b3a 551 66 66 7E 3C 
37b3e 552 00 00 00 00 
37b42 553 66 66 36 36 
37b46 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
37b4a 555 66 66 C6 C6 
37b4e 556 00 00 00 00 
37b52 557 06 06 06 06 
37b56 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
37b5a 559 06 06 7E 7E 
37b5e 55a 00 00 00 00 
37b62 55b C6 C6 EE EE 
37b66 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
37b6a 55d C6 C6 C6 C6 
37b6e 55e 00 00 00 00 
37b72 55f 66 66 66 6E 
37b76 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
37b7a 561 76 66 66 66 
37b7e 562 00 00 00 00 
37b82 563 3C 7E 66 66 
37b86 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
37b8a 565 66 66 7E 3C 
37b8e 566 00 00 00 00 
37b92 567 3E 7E 66 66 
37b96 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
37b9a 569 06 06 06 06 
37b9e 56a 00 00 00 00 
37ba2 56b 3C 7E 66 66 
37ba6 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
37baa 56d 66 56 3E 6C 
37bae 56e 00 00 00 00 
37bb2 56f 3E 7E 66 66 
37bb6 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
37bba 571 66 66 C6 C6 
37bbe 572 00 00 00 00 
37bc2 573 7C 7E 06 06 
37bc6 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
37bca 575 60 60 7E 3E 
37bce 576 00 00 00 00 
37bd2 577 7E 7E 18 18 
37bd6 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
37bda 579 18 18 18 18 
37bde 57a 00 00 00 00 
37be2 57b 66 66 66 66 
37be6 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
37bea 57d 66 66 7E 3C 
37bee 57e 00 00 00 00 
37bf2 57f 66 66 66 66 
37bf6 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
37bfa 581 3C 3C 18 18 
37bfe 582 00 00 00 00 
37c02 583 C6 C6 C6 C6 
37c06 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
37c0a 585 FE EE C6 82 
37c0e 586 00 00 00 00 
37c12 587 66 66 66 3C 
37c16 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
37c1a 589 3C 66 66 66 
37c1e 58a 00 00 00 00 
37c22 58b 66 66 66 66 
37c26 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
37c2a 58d 18 18 18 18 
37c2e 58e 00 00 00 00 
37c32 58f 7E 7E 30 30 
37c36 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
37c3a 591 06 06 7E 7E 
37c3e 592 00 00 00 00 
37c42 593 3C 3C 0C 0C 
37c46 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
37c4a 595 0C 0C 3C 3C 
37c4e 596 00 00 00 00 
37c52 597 06 06 0C 0C 
37c56 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
37c5a 599 60 60 C0 C0 
37c5e 59a 00 00 00 00 
37c62 59b 3C 3C 30 30 
37c66 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
37c6a 59d 30 30 3C 3C 
37c6e 59e 00 00 00 00 
37c72 59f 18 18 3C 3C 
37c76 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
37c7a 5a1 00 00 00 00 
37c7e 5a2 00 00 00 00 
37c82 5a3 00 00 00 00 
37c86 5a4 00 00 00 00 
37c8a 5a5 00 00       | 	byte	$00[18]
37c8c 5a6 FE FE 00 00 
37c90 5a7 00 00 0C 0C 
37c94 5a8 18 18 00 00 
37c98 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
37c9c 5aa 00 00 00 00 
37ca0 5ab 00 00 00 00 
37ca4 5ac 00          | 	byte	$00[9]
37ca5 5ac 3C 7C 60 7C 
37ca9 5ad 7E 66 66 7E 
37cad 5ae 7C 00 00 00 
37cb1 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
37cb5 5b0 3E 7E 66 66 
37cb9 5b1 66 66 66 7E 
37cbd 5b2 3E 00 00 00 
37cc1 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
37cc5 5b4 3C 3E 06 06 
37cc9 5b5 06 06 06 7E 
37ccd 5b6 7C 00 00 00 
37cd1 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
37cd5 5b8 7C 7E 66 66 
37cd9 5b9 66 66 66 7E 
37cdd 5ba 7C 00 00 00 
37ce1 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
37ce5 5bc 3C 7E 66 66 
37ce9 5bd 7E 06 06 7E 
37ced 5be 7C 00 00 00 
37cf1 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
37cf5 5c0 18 7E 7E 18 
37cf9 5c1 18 18 18 18 
37cfd 5c2 18 00 00 00 
37d01 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37d05 5c4 7C 7E 66 66 
37d09 5c5 66 66 7E 7C 
37d0d 5c6 60 7E 3E 00 
37d11 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
37d15 5c8 3E 7E 66 66 
37d19 5c9 66 66 66 66 
37d1d 5ca 66 00 00 00 
37d21 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
37d25 5cc 1C 1C 18 18 
37d29 5cd 18 18 18 3C 
37d2d 5ce 3C 00 00 00 
37d31 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
37d35 5d0 30 30 30 30 
37d39 5d1 30 30 30 30 
37d3d 5d2 30          | 	byte	$30[9]
37d3e 5d2 3E 1E 00 00 
37d42 5d3 06 06 06 36 
37d46 5d4 36 1E 1E 1E 
37d4a 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
37d4e 5d6 00 00 00 00 
37d52 5d7 1C 1C 18 18 
37d56 5d8 18 18 18 18 
37d5a 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
37d5e 5da 00 00 00 00 
37d62 5db 00 00 00    | 	byte	$00[7]
37d65 5dc 6C FE FE D6 
37d69 5dd D6 C6 C6 C6 
37d6d 5de C6 00 00 00 
37d71 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
37d75 5e0 3E 7E 66 66 
37d79 5e1 66 66 66 66 
37d7d 5e2 66 00 00 00 
37d81 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
37d85 5e4 3C 7E 66 66 
37d89 5e5 66 66 66 7E 
37d8d 5e6 3C 00 00 00 
37d91 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
37d95 5e8 3E 7E 66 66 
37d99 5e9 66 66 66 7E 
37d9d 5ea 3E 06 06 00 
37da1 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
37da5 5ec 7C 7E 66 66 
37da9 5ed 66 66 66 7E 
37dad 5ee 7C 60 60 00 
37db1 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
37db5 5f0 3E 7E 66 06 
37db9 5f1 06 06 06 06 
37dbd 5f2 06 00 00 00 
37dc1 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
37dc5 5f4 7C 7E 06 0E 
37dc9 5f5 3C 70 60 7E 
37dcd 5f6 3E 00 00 00 
37dd1 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
37dd5 5f8 7E 7E 18 18 
37dd9 5f9 18 18 18 78 
37ddd 5fa 70 00 00 00 
37de1 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
37de5 5fc 66 66 66 66 
37de9 5fd 66 66 66    | 	byte	$66[7]
37dec 5fe 7E 7C 00 00 
37df0 5ff 00 00 00 00 
37df4 600 00 66 66 66 
37df8 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
37dfc 602 18 18 00 00 
37e00 603 00 00 00 00 
37e04 604 00 C6 C6 D6 
37e08 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
37e0c 606 C6 82 00 00 
37e10 607 00 00 00 00 
37e14 608 00 66 66 3C 
37e18 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
37e1c 60a 66 66 00 00 
37e20 60b 00 00 00 00 
37e24 60c 00 66 66 66 
37e28 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
37e2c 60e 7C 60 7E 3E 
37e30 60f 00 00 00 00 
37e34 610 00 7E 7E 30 
37e38 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
37e3c 612 7E 7E 00 00 
37e40 613 00 00 30 18 
37e44 614 18 18 18 0C 
37e48 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
37e4c 616 18 30 00 00 
37e50 617 00 00 18 18 
37e54 618 18 18 18 18 
37e58 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37e5c 61a 18 18 00 00 
37e60 61b 00 00 0C 18 
37e64 61c 18 18 18 30 
37e68 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
37e6c 61e 18 0C 00 00 
37e70 61f 00 00 6C 7E 
37e74 620 36 00 00 00 
37e78 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
37e7c 622 00 00 00 00 
37e80 623 00 00 00 00 
37e84 624 00          | 	byte	$00[9]
37e85 624 18 18 18 18 
37e89 625 18 18 00 00 
37e8d 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
37e90 627 00 6C FE FE 
37e94 628 7C 38 10 00 
37e98 629 18 18 18 F8 
37e9c 62a F8 18 18 18 | a8_font        file "atari8.fnt"
37ea0 62b C0 C0 C0 C0 
37ea4 62c C0 C0 C0 C0 | 	byte	$c0[8]
37ea8 62d 18 18 18 1F 
37eac 62e 1F 00 00 00 
37eb0 62f 18 18 18 1F 
37eb4 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
37eb8 631 00 00 00 1F 
37ebc 632 1F 18 18 18 
37ec0 633 C0 E0 70 38 
37ec4 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
37ec8 635 03 07 0E 1C 
37ecc 636 38 70 E0 C0 
37ed0 637 80 C0 E0 F0 
37ed4 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
37ed8 639 00 00 00 00 
37edc 63a F0 F0 F0 F0 
37ee0 63b 01 03 07 0F 
37ee4 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
37ee8 63d F0 F0 F0 F0 
37eec 63e 00 00 00 00 
37ef0 63f 0F 0F 0F 0F 
37ef4 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
37ef8 641 FF FF 00 00 
37efc 642 00 00 00 00 
37f00 643 00 00 00 00 
37f04 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
37f08 645 00 00 00 00 
37f0c 646 0F 0F 0F 0F 
37f10 647 00 38 38 EE 
37f14 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
37f18 649 00 00 00 F8 
37f1c 64a F8 18 18 18 
37f20 64b 00 00 00 FF 
37f24 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
37f28 64d 18 18 18 FF 
37f2c 64e FF 18 18 18 
37f30 64f 00 00 3C 7E 
37f34 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
37f38 651 00 00 00 00 
37f3c 652 FF FF FF FF 
37f40 653 03 03 03 03 
37f44 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
37f48 655 00 00 00 FF 
37f4c 656 FF 18 18 18 
37f50 657 18 18 18 FF 
37f54 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
37f58 659 0F 0F 0F 0F 
37f5c 65a 0F 0F 0F 0F | 	byte	$0f[8]
37f60 65b 18 18 18 F8 
37f64 65c F8 00 00 00 
37f68 65d 1E 06 1E 06 
37f6c 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
37f70 65f 00 18 3C 7E 
37f74 660 18 18 18 00 
37f78 661 00 18 18 18 
37f7c 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
37f80 663 00 18 0C 7E 
37f84 664 0C 18 00 00 
37f88 665 00 18 30 7E 
37f8c 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
37f90 667 00 00 00 00 
37f94 668 00 00 00 00 
37f98 669 00          | 	byte	$00[9]
37f99 669 18 18 18 18 
37f9d 66a 00 18 00 00 
37fa1 66b 66 66 66 00 
37fa5 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
37fa9 66d 66 FF 66 66 
37fad 66e FF 66 00 18 
37fb1 66f 7C 06 3C 60 
37fb5 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
37fb9 671 66 36 18 0C 
37fbd 672 66 62 00 38 
37fc1 673 6C 38 1C F6 
37fc5 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
37fc9 675 18 18 18 00 
37fcd 676 00 00 00 00 
37fd1 677 70 38 18 18 
37fd5 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
37fd9 679 0E 1C 18 18 
37fdd 67a 1C 0E 00 00 
37fe1 67b 66 3C FF 3C 
37fe5 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
37fe9 67d 18 18 7E 18 
37fed 67e 18 00 00 00 
37ff1 67f 00 00 00 00 
37ff5 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
37ff9 681 00 00 7E 00 
37ffd 682 00 00 00 00 
38001 683 00 00 00 00 
38005 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
38009 685 60 30 18 0C 
3800d 686 06 02 00 00 
38011 687 3C 66 76 6E 
38015 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
38019 689 18 1C 18 18 
3801d 68a 18 7E 00 00 
38021 68b 3C 66 30 18 
38025 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
38029 68d 7E 30 18 30 
3802d 68e 66 3C 00 00 
38031 68f 30 38 3C 36 
38035 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
38039 691 7E 06 3E 60 
3803d 692 66 3C 00 00 
38041 693 3C 06 3E 66 
38045 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
38049 695 7E 60 30 18 
3804d 696 0C 0C 00 00 
38051 697 3C 66 3C 66 
38055 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
38059 699 3C 66 7C 60 
3805d 69a 30 1C 00 00 
38061 69b 00 18 18 00 
38065 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
38069 69d 00 18 18 00 
3806d 69e 18 18 0C 60 
38071 69f 30 18 0C 18 
38075 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
38079 6a1 00 7E 00 00 
3807d 6a2 7E 00 00 06 
38081 6a3 0C 18 30 18 
38085 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
38089 6a5 3C 66 30 18 
3808d 6a6 00 18 00 00 
38091 6a7 3C 66 76 76 
38095 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
38099 6a9 18 3C 66 66 
3809d 6aa 7E 66 00 00 
380a1 6ab 3E 66 3E 66 
380a5 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
380a9 6ad 3C 66 06 06 
380ad 6ae 66 3C 00 00 
380b1 6af 1E 36 66 66 
380b5 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
380b9 6b1 7E 06 3E 06 
380bd 6b2 06 7E 00 00 
380c1 6b3 7E 06 3E 06 
380c5 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
380c9 6b5 7C 06 06 76 
380cd 6b6 66 7C 00 00 
380d1 6b7 66 66 7E 66 
380d5 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
380d9 6b9 7E 18 18 18 
380dd 6ba 18 7E 00 00 
380e1 6bb 60 60 60 60 
380e5 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
380e9 6bd 66 36 1E 1E 
380ed 6be 36 66 00 00 
380f1 6bf 06 06 06 06 
380f5 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
380f9 6c1 C6 EE FE D6 
380fd 6c2 C6 C6 00 00 
38101 6c3 66 6E 7E 7E 
38105 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
38109 6c5 3C 66 66 66 
3810d 6c6 66 3C 00 00 
38111 6c7 3E 66 66 3E 
38115 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
38119 6c9 3C 66 66 66 
3811d 6ca 36 6C 00 00 
38121 6cb 3E 66 66 3E 
38125 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
38129 6cd 3C 06 3C 60 
3812d 6ce 60 3C 00 00 
38131 6cf 7E 18 18 18 
38135 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
38139 6d1 66 66 66 66 
3813d 6d2 66          | 	byte	$66[5]
3813e 6d2 7E 00 00 66 
38142 6d3 66 66 66 3C 
38146 6d4 18 00 00 C6 
3814a 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3814e 6d6 C6 00 00 66 
38152 6d7 66 3C 3C 66 
38156 6d8 66 00 00 66 
3815a 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3815e 6da 18 00 00 7E 
38162 6db 30 18 0C 06 
38166 6dc 7E 00 00 78 
3816a 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3816e 6de 78 00 00 02 
38172 6df 06 0C 18 30 
38176 6e0 60 00 00 1E 
3817a 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3817e 6e2 1E 00 00 10 
38182 6e3 38 6C C6 00 
38186 6e4 00 00 00 00 
3818a 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3818e 6e6 FF 00 00 18 
38192 6e7 3C 7E 7E 3C 
38196 6e8 18 00 00 00 
3819a 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3819e 6ea 7C 00 00 06 
381a2 6eb 06 3E 66 66 
381a6 6ec 3E 00 00 00 
381aa 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
381ae 6ee 3C 00 00 60 
381b2 6ef 60 7C 66 66 
381b6 6f0 7C 00 00 00 
381ba 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
381be 6f2 3C 00 00 70 
381c2 6f3 18 7C 18 18 
381c6 6f4 18 00 00 00 
381ca 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
381ce 6f6 60 3E 00 06 
381d2 6f7 06 3E 66 66 
381d6 6f8 66 00 00 18 
381da 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
381de 6fa 3C 00 00 60 
381e2 6fb 00 60 60 60 
381e6 6fc 60 3C 00 06 
381ea 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
381ee 6fe 66 00 00 1C 
381f2 6ff 18 18 18 18 
381f6 700 3C 00 00 00 
381fa 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
381fe 702 C6 00 00 00 
38202 703 3E 66 66 66 
38206 704 66 00 00 00 
3820a 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3820e 706 3C 00 00 00 
38212 707 3E 66 66 3E 
38216 708 06 06 00 00 
3821a 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3821e 70a 60 60 00 00 
38222 70b 3E 66 06 06 
38226 70c 06 00 00 00 
3822a 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3822e 70e 3E 00 00 18 
38232 70f 7E 18 18 18 
38236 710 70 00 00 00 
3823a 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3823e 712 7C 00 00 00 
38242 713 66 66 66 3C 
38246 714 18 00 00 00 
3824a 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3824e 716 6C 00 00 00 
38252 717 66 3C 18 3C 
38256 718 66 00 00 00 
3825a 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3825e 71a 30 1E 00 00 
38262 71b 7E 30 18 0C 
38266 71c 7E 00 00 18 
3826a 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3826e 71e 3C 00 18 18 
38272 71f 18 18 18 18 
38276 720 18 18 00 7E 
3827a 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3827e 722 60 00 10 18 
38282 723 1C 1E 1C 18 
38286 724 10 00 08 18 
3828a 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3828e 726 08 00       | 	byte	$08, $00
38290 727 00 6C FE FE 
38294 728 7C 38 10 00 
38298 729 18 18 18 F8 
3829c 72a F8 18 18 18 | a8_font2       file "atari8.fnt"
382a0 72b C0 C0 C0 C0 
382a4 72c C0 C0 C0 C0 | 	byte	$c0[8]
382a8 72d 18 18 18 1F 
382ac 72e 1F 00 00 00 
382b0 72f 18 18 18 1F 
382b4 730 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
382b8 731 00 00 00 1F 
382bc 732 1F 18 18 18 
382c0 733 C0 E0 70 38 
382c4 734 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
382c8 735 03 07 0E 1C 
382cc 736 38 70 E0 C0 
382d0 737 80 C0 E0 F0 
382d4 738 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
382d8 739 00 00 00 00 
382dc 73a F0 F0 F0 F0 
382e0 73b 01 03 07 0F 
382e4 73c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
382e8 73d F0 F0 F0 F0 
382ec 73e 00 00 00 00 
382f0 73f 0F 0F 0F 0F 
382f4 740 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
382f8 741 FF FF 00 00 
382fc 742 00 00 00 00 
38300 743 00 00 00 00 
38304 744 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
38308 745 00 00 00 00 
3830c 746 0F 0F 0F 0F 
38310 747 00 38 38 EE 
38314 748 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
38318 749 00 00 00 F8 
3831c 74a F8 18 18 18 
38320 74b 00 00 00 FF 
38324 74c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
38328 74d 18 18 18 FF 
3832c 74e FF 18 18 18 
38330 74f 00 00 3C 7E 
38334 750 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
38338 751 00 00 00 00 
3833c 752 FF FF FF FF 
38340 753 03 03 03 03 
38344 754 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
38348 755 00 00 00 FF 
3834c 756 FF 18 18 18 
38350 757 18 18 18 FF 
38354 758 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
38358 759 0F 0F 0F 0F 
3835c 75a 0F 0F 0F 0F | 	byte	$0f[8]
38360 75b 18 18 18 F8 
38364 75c F8 00 00 00 
38368 75d 1E 06 1E 06 
3836c 75e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
38370 75f 00 18 3C 7E 
38374 760 18 18 18 00 
38378 761 00 18 18 18 
3837c 762 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
38380 763 00 18 0C 7E 
38384 764 0C 18 00 00 
38388 765 00 18 30 7E 
3838c 766 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
38390 767 00 00 00 00 
38394 768 00 00 00 00 
38398 769 00          | 	byte	$00[9]
38399 769 18 18 18 18 
3839d 76a 00 18 00 00 
383a1 76b 66 66 66 00 
383a5 76c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
383a9 76d 66 FF 66 66 
383ad 76e FF 66 00 18 
383b1 76f 7C 06 3C 60 
383b5 770 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
383b9 771 66 36 18 0C 
383bd 772 66 62 00 38 
383c1 773 6C 38 1C F6 
383c5 774 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
383c9 775 18 18 18 00 
383cd 776 00 00 00 00 
383d1 777 70 38 18 18 
383d5 778 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
383d9 779 0E 1C 18 18 
383dd 77a 1C 0E 00 00 
383e1 77b 66 3C FF 3C 
383e5 77c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
383e9 77d 18 18 7E 18 
383ed 77e 18 00 00 00 
383f1 77f 00 00 00 00 
383f5 780 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
383f9 781 00 00 7E 00 
383fd 782 00 00 00 00 
38401 783 00 00 00 00 
38405 784 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
38409 785 60 30 18 0C 
3840d 786 06 02 00 00 
38411 787 3C 66 76 6E 
38415 788 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
38419 789 18 1C 18 18 
3841d 78a 18 7E 00 00 
38421 78b 3C 66 30 18 
38425 78c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
38429 78d 7E 30 18 30 
3842d 78e 66 3C 00 00 
38431 78f 30 38 3C 36 
38435 790 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
38439 791 7E 06 3E 60 
3843d 792 66 3C 00 00 
38441 793 3C 06 3E 66 
38445 794 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
38449 795 7E 60 30 18 
3844d 796 0C 0C 00 00 
38451 797 3C 66 3C 66 
38455 798 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
38459 799 3C 66 7C 60 
3845d 79a 30 1C 00 00 
38461 79b 00 18 18 00 
38465 79c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
38469 79d 00 18 18 00 
3846d 79e 18 18 0C 60 
38471 79f 30 18 0C 18 
38475 7a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
38479 7a1 00 7E 00 00 
3847d 7a2 7E 00 00 06 
38481 7a3 0C 18 30 18 
38485 7a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
38489 7a5 3C 66 30 18 
3848d 7a6 00 18 00 00 
38491 7a7 3C 66 76 76 
38495 7a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
38499 7a9 18 3C 66 66 
3849d 7aa 7E 66 00 00 
384a1 7ab 3E 66 3E 66 
384a5 7ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
384a9 7ad 3C 66 06 06 
384ad 7ae 66 3C 00 00 
384b1 7af 1E 36 66 66 
384b5 7b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
384b9 7b1 7E 06 3E 06 
384bd 7b2 06 7E 00 00 
384c1 7b3 7E 06 3E 06 
384c5 7b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
384c9 7b5 7C 06 06 76 
384cd 7b6 66 7C 00 00 
384d1 7b7 66 66 7E 66 
384d5 7b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
384d9 7b9 7E 18 18 18 
384dd 7ba 18 7E 00 00 
384e1 7bb 60 60 60 60 
384e5 7bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
384e9 7bd 66 36 1E 1E 
384ed 7be 36 66 00 00 
384f1 7bf 06 06 06 06 
384f5 7c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
384f9 7c1 C6 EE FE D6 
384fd 7c2 C6 C6 00 00 
38501 7c3 66 6E 7E 7E 
38505 7c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
38509 7c5 3C 66 66 66 
3850d 7c6 66 3C 00 00 
38511 7c7 3E 66 66 3E 
38515 7c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
38519 7c9 3C 66 66 66 
3851d 7ca 36 6C 00 00 
38521 7cb 3E 66 66 3E 
38525 7cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
38529 7cd 3C 06 3C 60 
3852d 7ce 60 3C 00 00 
38531 7cf 7E 18 18 18 
38535 7d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
38539 7d1 66 66 66 66 
3853d 7d2 66          | 	byte	$66[5]
3853e 7d2 7E 00 00 66 
38542 7d3 66 66 66 3C 
38546 7d4 18 00 00 C6 
3854a 7d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3854e 7d6 C6 00 00 66 
38552 7d7 66 3C 3C 66 
38556 7d8 66 00 00 66 
3855a 7d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3855e 7da 18 00 00 7E 
38562 7db 30 18 0C 06 
38566 7dc 7E 00 00 78 
3856a 7dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3856e 7de 78 00 00 02 
38572 7df 06 0C 18 30 
38576 7e0 60 00 00 1E 
3857a 7e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3857e 7e2 1E 00 00 10 
38582 7e3 38 6C C6 00 
38586 7e4 00 00 00 00 
3858a 7e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3858e 7e6 FF 00 00 18 
38592 7e7 3C 7E 7E 3C 
38596 7e8 18 00 00 00 
3859a 7e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3859e 7ea 7C 00 00 06 
385a2 7eb 06 3E 66 66 
385a6 7ec 3E 00 00 00 
385aa 7ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
385ae 7ee 3C 00 00 60 
385b2 7ef 60 7C 66 66 
385b6 7f0 7C 00 00 00 
385ba 7f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
385be 7f2 3C 00 00 70 
385c2 7f3 18 7C 18 18 
385c6 7f4 18 00 00 00 
385ca 7f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
385ce 7f6 60 3E 00 06 
385d2 7f7 06 3E 66 66 
385d6 7f8 66 00 00 18 
385da 7f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
385de 7fa 3C 00 00 60 
385e2 7fb 00 60 60 60 
385e6 7fc 60 3C 00 06 
385ea 7fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
385ee 7fe 66 00 00 1C 
385f2 7ff 18 18 18 18 
385f6 800 3C 00 00 00 
385fa 801 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
385fe 802 C6 00 00 00 
38602 803 3E 66 66 66 
38606 804 66 00 00 00 
3860a 805 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3860e 806 3C 00 00 00 
38612 807 3E 66 66 3E 
38616 808 06 06 00 00 
3861a 809 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3861e 80a 60 60 00 00 
38622 80b 3E 66 06 06 
38626 80c 06 00 00 00 
3862a 80d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3862e 80e 3E 00 00 18 
38632 80f 7E 18 18 18 
38636 810 70 00 00 00 
3863a 811 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3863e 812 7C 00 00 00 
38642 813 66 66 66 3C 
38646 814 18 00 00 00 
3864a 815 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3864e 816 6C 00 00 00 
38652 817 66 3C 18 3C 
38656 818 66 00 00 00 
3865a 819 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3865e 81a 30 1E 00 00 
38662 81b 7E 30 18 0C 
38666 81c 7E 00 00 18 
3866a 81d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3866e 81e 3C 00 18 18 
38672 81f 18 18 18 18 
38676 820 18 18 00 7E 
3867a 821 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3867e 822 60 00 10 18 
38682 823 1C 1E 1C 18 
38686 824 10 00 08 18 
3868a 825 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3868e 826 08 00       | 	byte	$08, $00
38690 827 00 00 00 00 
      ...             
3889c 8aa 00 00 00 00 
388a0 8ab 00 00       | amiga_font     file "amigafont.def"
388a2 8ab 18 18 18 18 
388a6 8ac 18 18       | 	byte	$18[6]
388a8 8ad 00 18 18 00 
388ac 8ae 00 00 00 00 
388b0 8af 00 00 66 66 
388b4 8b0 66 00 00 00 | 	byte	$00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $00, $00, $00
388b8 8b1 00 00 00 00 
388bc 8b2 00 00 00 00 
388c0 8b3 00 00       | 	byte	$00[10]
388c2 8b3 36 36 7F 36 
388c6 8b4 36 36 7F 36 
388ca 8b5 36 00 00 00 
388ce 8b6 00 00 00 00 | 	byte	$36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $00, $00, $00
388d2 8b7 18 7C 06 06 
388d6 8b8 3C 60 60 3E 
388da 8b9 18 00 00 00 
388de 8ba 00 00 00 00 | 	byte	$18, $7c, $06, $06, $3c, $60, $60, $3e, $18, $00, $00, $00, $00, $00, $00, $00
388e2 8bb 00 00 C6 69 
388e6 8bc 36 18 6C 96 
388ea 8bd 63 00 00 00 
388ee 8be 00 00 00 00 | 	byte	$00, $00, $c6, $69, $36, $18, $6c, $96, $63, $00, $00, $00, $00, $00, $00, $00
388f2 8bf 1C 36 36 1E 
388f6 8c0 6E 3B 33 73 
388fa 8c1 DE 00 00 00 
388fe 8c2 00 00 00 00 | 	byte	$1c, $36, $36, $1e, $6e, $3b, $33, $73, $de, $00, $00, $00, $00, $00, $00, $00
38902 8c3 18 18 0C 00 
38906 8c4 00 00 00 00 
3890a 8c5 00 00 00 00 
3890e 8c6 00 00 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38912 8c7 30 18 0C 0C 
38916 8c8 0C 0C 0C 18 
3891a 8c9 30 00 00 00 
3891e 8ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00, $00
38922 8cb 0C 18 30 30 
38926 8cc 30 30 30 18 
3892a 8cd 0C 00 00 00 
3892e 8ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00, $00
38932 8cf 00 66 66 3C 
38936 8d0 FF 3C 66 66 
3893a 8d1 00 00 00 00 
3893e 8d2 00 00 00 00 | 	byte	$00, $66, $66, $3c, $ff, $3c, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00
38942 8d3 00 18 18 18 
38946 8d4 7E 18 18 18 
3894a 8d5 00 00 00 00 
3894e 8d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
38952 8d7 00 00 00 00 
38956 8d8 00 00 00    | 	byte	$00[7]
38959 8d9 18 18 0C 00 
3895d 8da 00 00 00 00 
38961 8db 00 00 00 00 
38965 8dc 00 7E 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00
38969 8dd 00 00 00 00 
3896d 8de 00 00 00 00 
38971 8df 00 00 00 00 
38975 8e0 00 00 00 00 | 	byte	$00[16]
38979 8e1 18 18 00 00 
3897d 8e2 00 00 00 00 
38981 8e3 00 00 C0 60 
38985 8e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $60, $30, $18, $0c, $06
38989 8e5 03 00 00 00 
3898d 8e6 00 00 00 00 
38991 8e7 00 3C 66 66 
38995 8e8 76 7E 6E 66 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $76, $7e, $6e, $66
38999 8e9 66 3C 00 00 
3899d 8ea 00 00 00 00 
389a1 8eb 00 18 1C 1E 
389a5 8ec 18 18 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18
389a9 8ed 18 18 00 00 
389ad 8ee 00 00 00 00 
389b1 8ef 00 3C 66 60 
389b5 8f0 60 30 18 0C | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $30, $18, $0c
389b9 8f1 06 7E 00 00 
389bd 8f2 00 00 00 00 
389c1 8f3 00 3C 66 60 
389c5 8f4 60 38 60 60 | 	byte	$06, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $38, $60, $60
389c9 8f5 66 3C 00 00 
389cd 8f6 00 00 00 00 
389d1 8f7 00 30 38 3C 
389d5 8f8 36 33 7F 30 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30
389d9 8f9 30 30 00 00 
389dd 8fa 00 00 00 00 
389e1 8fb 00 7E 06 06 
389e5 8fc 3E 60 60 60 | 	byte	$30, $30, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06, $3e, $60, $60, $60
389e9 8fd 66 3C 00 00 
389ed 8fe 00 00 00 00 
389f1 8ff 00 38 0C 06 
389f5 900 06 3E 66 66 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $06, $06, $3e, $66, $66
389f9 901 66 3C 00 00 
389fd 902 00 00 00 00 
38a01 903 00 7E 60 60 
38a05 904 60 30 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $7e, $60, $60, $60, $30, $18, $18
38a09 905 18 18 00 00 
38a0d 906 00 00 00 00 
38a11 907 00 3C 66 66 
38a15 908 66 3C 66 66 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $3c, $66, $66
38a19 909 66 3C 00 00 
38a1d 90a 00 00 00 00 
38a21 90b 00 3C 66 66 
38a25 90c 66 7C 60 60 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $7c, $60, $60
38a29 90d 30 1C 00 00 
38a2d 90e 00 00 00 00 
38a31 90f 00 00 00 18 
38a35 910 18 00 00 18 | 	byte	$30, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $18
38a39 911 18 00 00 00 
38a3d 912 00 00 00 00 
38a41 913 00 00 00 18 
38a45 914 18 00 00 00 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
38a49 915 18 18 0C 00 
38a4d 916 00 00 00 00 
38a51 917 00 00 00 60 
38a55 918 18 06 18 60 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $60, $18, $06, $18, $60
38a59 919 00 00 00 00 
38a5d 91a 00 00 00 00 
38a61 91b 00 00 00 00 | 	byte	$00[12]
38a65 91c 7E 00 7E 00 
38a69 91d 00 00 00 00 
38a6d 91e 00 00 00 00 
38a71 91f 00 00 00 06 | 	byte	$7e, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
38a75 920 18 60 18 06 
38a79 921 00 00 00 00 
38a7d 922 00 00 00 00 
38a81 923 00 3C 66 60 | 	byte	$18, $60, $18, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60
38a85 924 60 30 18 00 
38a89 925 18 18 00 00 
38a8d 926 00 00 00 00 
38a91 927 00 3E 63 63 | 	byte	$60, $30, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
38a95 928 7B 6B 7B 03 
38a99 929 03 1E 00 00 
38a9d 92a 00 00 00 00 
38aa1 92b 00 3E 63 63 | 	byte	$7b, $6b, $7b, $03, $03, $1e, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
38aa5 92c 63 7F 63 63 
38aa9 92d 63 63 00 00 
38aad 92e 00 00 00 00 
38ab1 92f 00 3E 66 66 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66
38ab5 930 66 3E 66 66 
38ab9 931 66 3E 00 00 
38abd 932 00 00 00 00 
38ac1 933 00 78 0C 06 | 	byte	$66, $3e, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $78, $0c, $06
38ac5 934 06 06 06 06 
38ac9 935 0C 78 00 00 
38acd 936 00 00 00 00 
38ad1 937 00 1F 33 63 | 	byte	$06, $06, $06, $06, $0c, $78, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $63
38ad5 938 63 63 63 63 
38ad9 939 33 1F 00 00 
38add 93a 00 00 00 00 
38ae1 93b 00 7E 06 06 | 	byte	$63, $63, $63, $63, $33, $1f, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
38ae5 93c 06 1E 06 06 
38ae9 93d 06 7E 00 00 
38aed 93e 00 00 00 00 
38af1 93f 00 7E 06 06 | 	byte	$06, $1e, $06, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
38af5 940 06 1E 06 06 
38af9 941 06 06 00 00 
38afd 942 00 00 00 00 
38b01 943 00 3C 66 06 | 	byte	$06, $1e, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06
38b05 944 06 76 66 66 
38b09 945 66 7C 00 00 
38b0d 946 00 00 00 00 
38b11 947 00 63 63 63 | 	byte	$06, $76, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63
38b15 948 63 7F 63 63 
38b19 949 63 63 00 00 
38b1d 94a 00 00 00 00 
38b21 94b 00 3C 18 18 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3c, $18, $18
38b25 94c 18 18 18 18 
38b29 94d 18          | 	byte	$18[5]
38b2a 94d 3C 00 00 00 
38b2e 94e 00 00 00 00 
38b32 94f 60 60 60 60 
38b36 950 60 60 60 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60, $60, $60, $60, $60, $63
38b3a 951 3E 00 00 00 
38b3e 952 00 00 00 00 
38b42 953 C3 63 33 1B 
38b46 954 0F 1B 33 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $c3, $63, $33, $1b, $0f, $1b, $33, $63
38b4a 955 C3 00 00 00 
38b4e 956 00 00 00 00 
38b52 957 03 03 03 03 
38b56 958 03 03 03 03 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $03, $03, $03
38b5a 959 7F 00 00 00 
38b5e 95a 00 00 00 00 
38b62 95b 63 77 7F 6B 
38b66 95c 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $6b, $63, $63, $63, $63
38b6a 95d 63 00 00 00 
38b6e 95e 00 00 00 00 
38b72 95f 63 67 6F 7B 
38b76 960 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7b, $73, $63, $63, $63
38b7a 961 63 00 00 00 
38b7e 962 00 00 00 00 
38b82 963 3E 63 63 63 
38b86 964 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63
38b8a 965 3E 00 00 00 
38b8e 966 00 00 00 00 
38b92 967 3E 66 66 66 
38b96 968 3E 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e, $06, $06, $06
38b9a 969 06 00 00 00 
38b9e 96a 00 00 00 00 
38ba2 96b 3E 63 63 63 
38ba6 96c 63 63 63 7B | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $7b
38baa 96d FE 00 00 00 
38bae 96e 00 00 00 00 
38bb2 96f 1F 33 33 33 
38bb6 970 1F 1B 33 63 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $33, $33, $1f, $1b, $33, $63
38bba 971 63 00 00 00 
38bbe 972 00 00 00 00 
38bc2 973 3C 66 06 0C 
38bc6 974 18 30 60 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06, $0c, $18, $30, $60, $66
38bca 975 3C 00 00 00 
38bce 976 00 00 00 00 
38bd2 977 7E 18 18 18 
38bd6 978 18 18 18 18 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $7e, $18, $18, $18, $18, $18, $18, $18
38bda 979 18 00 00 00 
38bde 97a 00 00 00 00 
38be2 97b 63 63 63 63 
38be6 97c 63 63 63 63 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63
38bea 97d 3E 00 00 00 
38bee 97e 00 00 00 00 
38bf2 97f 63 63 63 63 
38bf6 980 63 36 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36, $36, $1c
38bfa 981 08 00 00 00 
38bfe 982 00 00 00 00 
38c02 983 C3 C3 C3 C3 
38c06 984 C3 DB FF E7 | 	byte	$08, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $c3, $c3, $c3, $db, $ff, $e7
38c0a 985 C3 00 00 00 
38c0e 986 00 00 00 00 
38c12 987 C3 C3 66 3C 
38c16 988 18 3C 66 C3 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $3c, $66, $c3
38c1a 989 C3 00 00 00 
38c1e 98a 00 00 00 00 
38c22 98b C3 C3 66 3C 
38c26 98c 18 18 18 18 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $18, $18, $18
38c2a 98d 18 00 00 00 
38c2e 98e 00 00 00 00 
38c32 98f 7F 60 60 30 
38c36 990 18 0C 06 03 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $7f, $60, $60, $30, $18, $0c, $06, $03
38c3a 991 7F 00 00 00 
38c3e 992 00 00 00 00 
38c42 993 3C 0C 0C 0C 
38c46 994 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
38c4a 995 3C 00 00 00 
38c4e 996 00 00 00 00 
38c52 997 00 03 06 0C 
38c56 998 18 30 60 C0 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $03, $06, $0c, $18, $30, $60, $c0
38c5a 999 00 00 00 00 
38c5e 99a 00 00 00 00 | 	byte	$00[8]
38c62 99b 3C 30 30 30 
38c66 99c 30 30 30 30 
38c6a 99d 3C 00 00 00 
38c6e 99e 00 00 00 00 | 	byte	$3c, $30, $30, $30, $30, $30, $30, $30, $3c, $00, $00, $00, $00, $00, $00, $00
38c72 99f 08 1C 36 63 
38c76 9a0 00 00 00 00 
38c7a 9a1 00 00 00 00 
38c7e 9a2 00 00 00 00 | 	byte	$08, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38c82 9a3 00 00 00 00 
38c86 9a4 00 00 00 00 
38c8a 9a5 00          | 	byte	$00[9]
38c8b 9a5 7F 00 00 00 
38c8f 9a6 00 00 00 18 
38c93 9a7 18 30 00 00 
38c97 9a8 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $18, $18, $30, $00, $00, $00, $00, $00, $00
38c9b 9a9 00 00 00 00 
38c9f 9aa 00 00 00 00 
38ca3 9ab 00 00       | 	byte	$00[10]
38ca5 9ac 3C 60 7C 66 
38ca9 9ad 66 7C 00 00 
38cad 9ae 00 00 00 00 
38cb1 9af 00 06 06 06 | 	byte	$3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $06, $06, $06
38cb5 9b0 3E 66 66 66 
38cb9 9b1 66 3E 00 00 
38cbd 9b2 00 00 00 00 
38cc1 9b3 00 00 00 00 | 	byte	$3e, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38cc5 9b4 3C 06 06 06 
38cc9 9b5 06 3C 00 00 
38ccd 9b6 00 00 00 00 
38cd1 9b7 00 60 60 60 | 	byte	$3c, $06, $06, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60
38cd5 9b8 7C 66 66 66 
38cd9 9b9 66 7C 00 00 
38cdd 9ba 00 00 00 00 
38ce1 9bb 00 00 00 00 | 	byte	$7c, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38ce5 9bc 3C 66 7E 06 
38ce9 9bd 06 3C 00 00 
38ced 9be 00 00 00 00 
38cf1 9bf 00 38 0C 0C | 	byte	$3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $0c
38cf5 9c0 3E 0C 0C 0C 
38cf9 9c1 0C 0C 00 00 
38cfd 9c2 00 00 00 00 
38d01 9c3 00 00 00 00 | 	byte	$3e, $0c, $0c, $0c, $0c, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38d05 9c4 7C 66 66 66 
38d09 9c5 7C 60 60 3C 
38d0d 9c6 00 00 00 00 
38d11 9c7 00 06 06 06 | 	byte	$7c, $66, $66, $66, $7c, $60, $60, $3c, $00, $00, $00, $00, $00, $06, $06, $06
38d15 9c8 3E 66 66 66 
38d19 9c9 66 66 00 00 
38d1d 9ca 00 00 00 00 
38d21 9cb 00 00 18 00 | 	byte	$3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00
38d25 9cc 18 18 18 18 
38d29 9cd 18          | 	byte	$18[5]
38d2a 9cd 30 00 00 00 
38d2e 9ce 00 00 00 00 
38d32 9cf 00 30 00 30 
38d36 9d0 30 30 30 30 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $30, $30, $30, $30, $30
38d3a 9d1 30 30 1E 00 
38d3e 9d2 00 00 00 00 
38d42 9d3 03 03 03 33 
38d46 9d4 1B 0F 1B 33 | 	byte	$30, $30, $1e, $00, $00, $00, $00, $00, $03, $03, $03, $33, $1b, $0f, $1b, $33
38d4a 9d5 63 00 00 00 
38d4e 9d6 00 00 00 00 
38d52 9d7 18 18 18 18 
38d56 9d8 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
38d5a 9d9 30 00 00 00 
38d5e 9da 00 00 00 00 
38d62 9db 00 00 00 37 
38d66 9dc 7F 6B 63 63 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $63, $63
38d6a 9dd 63 00 00 00 
38d6e 9de 00 00 00 00 
38d72 9df 00 00 00 3E 
38d76 9e0 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $66
38d7a 9e1 66 00 00 00 
38d7e 9e2 00 00 00 00 
38d82 9e3 00 00 00 3C 
38d86 9e4 66 66 66 66 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $66
38d8a 9e5 3C 00 00 00 
38d8e 9e6 00 00 00 00 
38d92 9e7 00 00 00 3E 
38d96 9e8 66 66 66 3E | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e
38d9a 9e9 06 06 06 00 
38d9e 9ea 00 00 00 00 
38da2 9eb 00 00 00 7C 
38da6 9ec 66 66 66 7C | 	byte	$06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7c, $66, $66, $66, $7c
38daa 9ed 60 60 60 00 
38dae 9ee 00 00 00 00 
38db2 9ef 00 00 00 3E 
38db6 9f0 66 06 06 06 | 	byte	$60, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $06, $06, $06
38dba 9f1 06 00 00 00 
38dbe 9f2 00 00 00 00 
38dc2 9f3 00 00 00 3C 
38dc6 9f4 06 0C 30 60 | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $06, $0c, $30, $60
38dca 9f5 3E 00 00 00 
38dce 9f6 00 00 00 00 
38dd2 9f7 00 0C 0C 3E 
38dd6 9f8 0C 0C 0C 0C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $0c, $3e, $0c, $0c, $0c, $0c
38dda 9f9 38 00 00 00 
38dde 9fa 00 00 00 00 
38de2 9fb 00 00 00 66 
38de6 9fc 66 66 66 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66
38dea 9fd 7C 00 00 00 
38dee 9fe 00 00 00 00 
38df2 9ff 00 00 00 66 
38df6 a00 66 66 66 3C | 	byte	$7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
38dfa a01 18 00 00 00 
38dfe a02 00 00 00 00 
38e02 a03 00 00 00 63 
38e06 a04 63 63 6B 3E | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $6b, $3e
38e0a a05 36 00 00 00 
38e0e a06 00 00 00 00 
38e12 a07 00 00 00 63 
38e16 a08 36 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36
38e1a a09 63 00 00 00 
38e1e a0a 00 00 00 00 
38e22 a0b 00 00 00 66 
38e26 a0c 66 66 66 3C | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
38e2a a0d 18 0C 06 00 
38e2e a0e 00 00 00 00 
38e32 a0f 00 00 00 7E 
38e36 a10 30 18 0C 06 | 	byte	$18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $30, $18, $0c, $06
38e3a a11 7E 00 00 00 
38e3e a12 00 00 00 00 
38e42 a13 70 18 18 18 
38e46 a14 0E 18 18 18 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18
38e4a a15 70 00 00 00 
38e4e a16 00 00 00 00 
38e52 a17 18 18 18 18 
38e56 a18 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
38e5a a19 18 00 00 00 
38e5e a1a 00 00 00 00 
38e62 a1b 0E 18 18 18 
38e66 a1c 70 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18
38e6a a1d 0E 00 00 00 
38e6e a1e 00 00 00 00 
38e72 a1f 46 5D 31 00 
38e76 a20 00 00 00 00 | 	byte	$0e, $00, $00, $00, $00, $00, $00, $00, $46, $5d, $31, $00, $00, $00, $00, $00
38e7a a21 00 00 00 00 
38e7e a22 00 00 00 00 | 	byte	$00[8]
38e82 a23 C0 F0 3C 0F 
38e86 a24 C3 F0 3C 0F 
38e8a a25 03 00 00 00 
38e8e a26 00 00 00 00 | 	byte	$c0, $f0, $3c, $0f, $c3, $f0, $3c, $0f, $03, $00, $00, $00, $00, $00, $00, $00
38e92 a27 18 18 00 18 
38e96 a28 18 18 18 18 
38e9a a29 18 00 00 00 
38e9e a2a 00 00 00 00 | 	byte	$18, $18, $00, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
38ea2 a2b 18 18 7E 1B 
38ea6 a2c 1B 7E 18 18 
38eaa a2d 00 00 00 00 
38eae a2e 00 00 00 00 | 	byte	$18, $18, $7e, $1b, $1b, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
38eb2 a2f 78 CC 0C 0C 
38eb6 a30 1E 0C 0C 06 
38eba a31 7F 00 00 00 
38ebe a32 00 00 00 00 | 	byte	$78, $cc, $0c, $0c, $1e, $0c, $0c, $06, $7f, $00, $00, $00, $00, $00, $00, $00
38ec2 a33 66 3C 66 66 
38ec6 a34 3C 66 00 00 
38eca a35 00 00 00 00 
38ece a36 00 00 00 00 | 	byte	$66, $3c, $66, $66, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38ed2 a37 C3 C3 66 3C 
38ed6 a38 18 7E 18 18 
38eda a39 18 00 00 00 
38ede a3a 00 00 00 00 | 	byte	$c3, $c3, $66, $3c, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
38ee2 a3b 18 18 18 18 
38ee6 a3c 00 18 18 18 
38eea a3d 18 00 00 00 
38eee a3e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
38ef2 a3f 3C 06 06 3C 
38ef6 a40 66 66 66 3C 
38efa a41 60 60 3C 00 
38efe a42 00 00 00 00 | 	byte	$3c, $06, $06, $3c, $66, $66, $66, $3c, $60, $60, $3c, $00, $00, $00, $00, $00
38f02 a43 66 66 00 00 
38f06 a44 00 00 00 00 
38f0a a45 00 00 00 00 
38f0e a46 00 00 00 00 | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38f12 a47 7E 81 B9 85 
38f16 a48 85 B9 81 7E 
38f1a a49 00 00 00 00 
38f1e a4a 00 00 00 00 | 	byte	$7e, $81, $b9, $85, $85, $b9, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
38f22 a4b 3C 33 33 7E 
38f26 a4c 00 7F 00 00 
38f2a a4d 00 00 00 00 
38f2e a4e 00 00 00 00 | 	byte	$3c, $33, $33, $7e, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38f32 a4f 00 00 CC 66 
38f36 a50 33 66 CC 00 
38f3a a51 00 00 00 00 
38f3e a52 00 00 00 00 | 	byte	$00, $00, $cc, $66, $33, $66, $cc, $00, $00, $00, $00, $00, $00, $00, $00, $00
38f42 a53 7E 60 60 00 
38f46 a54 00 00 00 00 
38f4a a55 00 00 00 00 
38f4e a56 00 00 00 00 | 	byte	$7e, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38f52 a57 7E 81 9D A5 
38f56 a58 9D A5 81 7E 
38f5a a59 00 00 00 00 
38f5e a5a 00 00 00 00 | 	byte	$7e, $81, $9d, $a5, $9d, $a5, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
38f62 a5b 7E 00 00 00 
38f66 a5c 00 00 00 00 
38f6a a5d 00 00 00 00 
38f6e a5e 00 00 00 00 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38f72 a5f 3C 66 66 3C 
38f76 a60 00 00 00 00 
38f7a a61 00 00 00 00 
38f7e a62 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38f82 a63 18 18 18 7E 
38f86 a64 18 18 18 00 
38f8a a65 7E 00 00 00 
38f8e a66 00 00 00 00 | 	byte	$18, $18, $18, $7e, $18, $18, $18, $00, $7e, $00, $00, $00, $00, $00, $00, $00
38f92 a67 1E 30 30 18 
38f96 a68 0C 06 3E 00 
38f9a a69 00 00 00 00 
38f9e a6a 00 00 00 00 | 	byte	$1e, $30, $30, $18, $0c, $06, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
38fa2 a6b 1E 30 30 1C 
38fa6 a6c 30 30 1E 00 
38faa a6d 00 00 00 00 
38fae a6e 00 00 00 00 | 	byte	$1e, $30, $30, $1c, $30, $30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
38fb2 a6f 30 18 0C 06 
38fb6 a70 00 00 00 00 
38fba a71 00 00 00 00 
38fbe a72 00 00 00 00 | 	byte	$30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38fc2 a73 00 00 00 66 
38fc6 a74 66 66 66 66 
38fca a75 FE 06 06 00 
38fce a76 00 00 00 00 | 	byte	$00, $00, $00, $66, $66, $66, $66, $66, $fe, $06, $06, $00, $00, $00, $00, $00
38fd2 a77 7C 5E 5E 5E 
38fd6 a78 5C 50 50 50 
38fda a79 50 50 00 00 
38fde a7a 00 00 00 00 | 	byte	$7c, $5e, $5e, $5e, $5c, $50, $50, $50, $50, $50, $00, $00, $00, $00, $00, $00
38fe2 a7b 00 00 00 18 
38fe6 a7c 18 00 00 00 
38fea a7d 00 00 00 00 
38fee a7e 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38ff2 a7f 00 00 00 00 
38ff6 a80 00 00 00 00 
38ffa a81 00          | 	byte	$00[9]
38ffb a81 30 18 00 00 
38fff a82 00 00 00 18 
39003 a83 1C 18 18 18 
39007 a84 18 18 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $18, $1c, $18, $18, $18, $18, $18, $00, $00
3900b a85 00 00 00 00 
3900f a86 00 00 00    | 	byte	$00[7]
39012 a87 3C 66 66 3C 
39016 a88 00 7E 00 00 
3901a a89 00 00 00 00 
3901e a8a 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39022 a8b 00 00 33 66 
39026 a8c CC 66 33 00 
3902a a8d 00 00 00 00 
3902e a8e 00 00 00 00 | 	byte	$00, $00, $33, $66, $cc, $66, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00
39032 a8f 02 63 32 1A 
39036 a90 4E 66 F3 40 
3903a a91 40 00 00 00 
3903e a92 00 00 00 00 | 	byte	$02, $63, $32, $1a, $4e, $66, $f3, $40, $40, $00, $00, $00, $00, $00, $00, $00
39042 a93 04 C6 64 34 
39046 a94 7C 8C 46 23 
3904a a95 F0 00 00 00 
3904e a96 00 00 00 00 | 	byte	$04, $c6, $64, $34, $7c, $8c, $46, $23, $f0, $00, $00, $00, $00, $00, $00, $00
39052 a97 03 C4 66 34 
39056 a98 5B 6C F6 43 
3905a a99 40 00 00 00 
3905e a9a 00 00 00 00 | 	byte	$03, $c4, $66, $34, $5b, $6c, $f6, $43, $40, $00, $00, $00, $00, $00, $00, $00
39062 a9b 18 18 00 18 
39066 a9c 0C 06 06 66 
3906a a9d 3C 00 00 00 
3906e a9e 00 00 00 00 | 	byte	$18, $18, $00, $18, $0c, $06, $06, $66, $3c, $00, $00, $00, $00, $00, $00, $00
39072 a9f 06 0C 3E 63 
39076 aa0 63 7F 63 63 
3907a aa1 63 00 00 00 
3907e aa2 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
39082 aa3 30 18 3E 63 
39086 aa4 63 7F 63 63 
3908a aa5 63 00 00 00 
3908e aa6 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
39092 aa7 0C 33 3E 63 
39096 aa8 63 63 7F 63 
3909a aa9 63 00 00 00 
3909e aaa 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
390a2 aab 4E 39 3E 63 
390a6 aac 63 7F 63 63 
390aa aad 63 00 00 00 
390ae aae 00 00 00 00 | 	byte	$4e, $39, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
390b2 aaf 63 00 3E 63 
390b6 ab0 63 7F 63 63 
390ba ab1 63 00 00 00 
390be ab2 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
390c2 ab3 1C 22 1C 36 
390c6 ab4 63 63 7F 63 
390ca ab5 63 00 00 00 
390ce ab6 00 00 00 00 | 	byte	$1c, $22, $1c, $36, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
390d2 ab7 F8 3C 3C 36 
390d6 ab8 F6 3F 33 33 
390da ab9 F3 00 00 00 
390de aba 00 00 00 00 | 	byte	$f8, $3c, $3c, $36, $f6, $3f, $33, $33, $f3, $00, $00, $00, $00, $00, $00, $00
390e2 abb 78 0C 06 06 
390e6 abc 06 06 06 0C 
390ea abd 78 30 18 00 
390ee abe 00 00 00 00 | 	byte	$78, $0c, $06, $06, $06, $06, $06, $0c, $78, $30, $18, $00, $00, $00, $00, $00
390f2 abf 0C 18 7E 06 
390f6 ac0 06 3E 06 06 
390fa ac1 7E 00 00 00 
390fe ac2 00 00 00 00 | 	byte	$0c, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
39102 ac3 30 18 7E 06 
39106 ac4 06 3E 06 06 
3910a ac5 7E 00 00 00 
3910e ac6 00 00 00 00 | 	byte	$30, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
39112 ac7 18 66 7E 06 
39116 ac8 06 3E 06 06 
3911a ac9 7E 00 00 00 
3911e aca 00 00 00 00 | 	byte	$18, $66, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
39122 acb 66 00 7E 06 
39126 acc 06 3E 06 06 
3912a acd 7E 00 00 00 
3912e ace 00 00 00 00 | 	byte	$66, $00, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
39132 acf 0C 18 3C 18 
39136 ad0 18 18 18 18 
3913a ad1 3C 00 00 00 
3913e ad2 00 00 00 00 | 	byte	$0c, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
39142 ad3 30 18 3C 18 
39146 ad4 18 18 18 18 
3914a ad5 3C 00 00 00 
3914e ad6 00 00 00 00 | 	byte	$30, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
39152 ad7 18 66 3C 18 
39156 ad8 18 18 18 18 
3915a ad9 3C 00 00 00 
3915e ada 00 00 00 00 | 	byte	$18, $66, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
39162 adb 66 00 3C 18 
39166 adc 18 18 18 18 
3916a add 3C 00 00 00 
3916e ade 00 00 00 00 | 	byte	$66, $00, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
39172 adf 1E 36 66 66 
39176 ae0 6F 66 66 36 
3917a ae1 1E 00 00 00 
3917e ae2 00 00 00 00 | 	byte	$1e, $36, $66, $66, $6f, $66, $66, $36, $1e, $00, $00, $00, $00, $00, $00, $00
39182 ae3 8E 73 67 6F 
39186 ae4 7B 73 63 63 
3918a ae5 63 00 00 00 
3918e ae6 00 00 00 00 | 	byte	$8e, $73, $67, $6f, $7b, $73, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
39192 ae7 06 0C 3E 63 
39196 ae8 63 63 63 63 
3919a ae9 3E 00 00 00 
3919e aea 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
391a2 aeb 30 18 3E 63 
391a6 aec 63 63 63 63 
391aa aed 3E 00 00 00 
391ae aee 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
391b2 aef 0C 33 3E 63 
391b6 af0 63 63 63 63 
391ba af1 3E 00 00 00 
391be af2 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
391c2 af3 8E 71 3E 63 
391c6 af4 63 63 63 63 
391ca af5 3E 00 00 00 
391ce af6 00 00 00 00 | 	byte	$8e, $71, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
391d2 af7 63 00 3E 63 
391d6 af8 63 63 63 63 
391da af9 3E 00 00 00 
391de afa 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
391e2 afb 00 00 63 36 
391e6 afc 1C 1C 36 63 
391ea afd 00 00 00 00 
391ee afe 00 00 00 00 | 	byte	$00, $00, $63, $36, $1c, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00
391f2 aff BE 63 73 7B 
391f6 b00 6B 6F 67 63 
391fa b01 3F 00 00 00 
391fe b02 00 00 00 00 | 	byte	$be, $63, $73, $7b, $6b, $6f, $67, $63, $3f, $00, $00, $00, $00, $00, $00, $00
39202 b03 0C 18 63 63 
39206 b04 63 63 63 63 
3920a b05 3E 00 00 00 
3920e b06 00 00 00 00 | 	byte	$0c, $18, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
39212 b07 18 0C 63 63 
39216 b08 63 63 63 63 
3921a b09 3E 00 00 00 
3921e b0a 00 00 00 00 | 	byte	$18, $0c, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
39222 b0b 08 36 63 63 
39226 b0c 63 63 63 63 
3922a b0d 3E 00 00 00 
3922e b0e 00 00 00 00 | 	byte	$08, $36, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
39232 b0f 63 00 63 63 
39236 b10 63 63 63 63 
3923a b11 3E 00 00 00 
3923e b12 00 00 00 00 | 	byte	$63, $00, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
39242 b13 30 18 C3 66 
39246 b14 3C 18 18 18 
3924a b15 18 00 00 00 
3924e b16 00 00 00 00 | 	byte	$30, $18, $c3, $66, $3c, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
39252 b17 03 03 3F 63 
39256 b18 63 3F 03 03 
3925a b19 03 00 00 00 
3925e b1a 00 00 00 00 | 	byte	$03, $03, $3f, $63, $63, $3f, $03, $03, $03, $00, $00, $00, $00, $00, $00, $00
39262 b1b 3C 66 66 66 
39266 b1c 36 66 66 66 
3926a b1d 36 06 06 00 
3926e b1e 00 00 00 00 | 	byte	$3c, $66, $66, $66, $36, $66, $66, $66, $36, $06, $06, $00, $00, $00, $00, $00
39272 b1f 06 0C 00 3C 
39276 b20 60 7C 66 66 
3927a b21 7C 00 00 00 
3927e b22 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
39282 b23 60 30 00 3C 
39286 b24 60 7C 66 66 
3928a b25 7C 00 00 00 
3928e b26 00 00 00 00 | 	byte	$60, $30, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
39292 b27 18 66 00 3C 
39296 b28 60 7C 66 66 
3929a b29 7C 00 00 00 
3929e b2a 00 00 00 00 | 	byte	$18, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
392a2 b2b 8E 71 00 3C 
392a6 b2c 60 7C 66 66 
392aa b2d 7C 00 00 00 
392ae b2e 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
392b2 b2f 00 66 00 3C 
392b6 b30 60 7C 66 66 
392ba b31 7C 00 00 00 
392be b32 00 00 00 00 | 	byte	$00, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
392c2 b33 18 24 18 3C 
392c6 b34 60 7C 66 66 
392ca b35 7C 00 00 00 
392ce b36 00 00 00 00 | 	byte	$18, $24, $18, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
392d2 b37 00 00 00 7E 
392d6 b38 D8 FE 1B 1B 
392da b39 EE 00 00 00 
392de b3a 00 00 00 00 | 	byte	$00, $00, $00, $7e, $d8, $fe, $1b, $1b, $ee, $00, $00, $00, $00, $00, $00, $00
392e2 b3b 00 00 00 3C 
392e6 b3c 06 06 06 06 
392ea b3d 3C 18 0C 00 
392ee b3e 00 00 00 00 | 	byte	$00, $00, $00, $3c, $06, $06, $06, $06, $3c, $18, $0c, $00, $00, $00, $00, $00
392f2 b3f 06 0C 00 3C 
392f6 b40 66 7E 06 06 
392fa b41 3C 00 00 00 
392fe b42 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
39302 b43 60 30 00 3C 
39306 b44 66 7E 06 06 
3930a b45 3C 00 00 00 
3930e b46 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
39312 b47 18 66 00 3C 
39316 b48 66 7E 06 06 
3931a b49 3C 00 00 00 
3931e b4a 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
39322 b4b 00 66 00 3C 
39326 b4c 66 7E 06 06 
3932a b4d 3C 00 00 00 
3932e b4e 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
39332 b4f 0C 18 00 18 
39336 b50 18 18 18 18 
3933a b51 30 00 00 00 
3933e b52 00 00 00 00 | 	byte	$0c, $18, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
39342 b53 18 0C 00 0C 
39346 b54 0C 0C 0C 0C 
3934a b55 18 00 00 00 
3934e b56 00 00 00 00 | 	byte	$18, $0c, $00, $0c, $0c, $0c, $0c, $0c, $18, $00, $00, $00, $00, $00, $00, $00
39352 b57 18 66 00 18 
39356 b58 18 18 18 18 
3935a b59 30 00 00 00 
3935e b5a 00 00 00 00 | 	byte	$18, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
39362 b5b 00 66 00 18 
39366 b5c 18 18 18 18 
3936a b5d 30 00 00 00 
3936e b5e 00 00 00 00 | 	byte	$00, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
39372 b5f 03 06 3F 18 
39376 b60 3C 66 66 66 
3937a b61 3C 00 00 00 
3937e b62 00 00 00 00 | 	byte	$03, $06, $3f, $18, $3c, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
39382 b63 8E 71 00 3E 
39386 b64 66 66 66 66 
3938a b65 66 00 00 00 
3938e b66 00 00 00 00 | 	byte	$8e, $71, $00, $3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
39392 b67 06 0C 00 3C 
39396 b68 66 66 66 66 
3939a b69 3C 00 00 00 
3939e b6a 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
393a2 b6b 60 30 00 3C 
393a6 b6c 66 66 66 66 
393aa b6d 3C 00 00 00 
393ae b6e 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
393b2 b6f 18 66 00 3C 
393b6 b70 66 66 66 66 
393ba b71 3C 00 00 00 
393be b72 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
393c2 b73 8E 71 00 3C 
393c6 b74 66 66 66 66 
393ca b75 3C 00 00 00 
393ce b76 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
393d2 b77 00 66 00 3C 
393d6 b78 66 66 66 66 
393da b79 3C 00 00 00 
393de b7a 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
393e2 b7b 00 18 18 00 
393e6 b7c 7E 00 18 18 
393ea b7d 00 00 00 00 
393ee b7e 00 00 00 00 | 	byte	$00, $18, $18, $00, $7e, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
393f2 b7f 00 00 00 7E 
393f6 b80 73 7B 6F 67 
393fa b81 3F 00 00 00 
393fe b82 00 00 00 00 | 	byte	$00, $00, $00, $7e, $73, $7b, $6f, $67, $3f, $00, $00, $00, $00, $00, $00, $00
39402 b83 0C 18 00 66 
39406 b84 66 66 66 66 
3940a b85 7C 00 00 00 
3940e b86 00 00 00 00 | 	byte	$0c, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
39412 b87 30 18 00 66 
39416 b88 66 66 66 66 
3941a b89 7C 00 00 00 
3941e b8a 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
39422 b8b 18 66 00 66 
39426 b8c 66 66 66 66 
3942a b8d 7C 00 00 00 
3942e b8e 00 00 00 00 | 	byte	$18, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
39432 b8f 00 66 00 66 
39436 b90 66 66 66 66 
3943a b91 7C 00 00 00 
3943e b92 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
39442 b93 30 18 00 66 
39446 b94 66 66 66 3C 
3944a b95 18 0C 06 00 
3944e b96 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
39452 b97 06 06 06 3E 
39456 b98 66 66 66 3E 
3945a b99 06 06 06 00 
3945e b9a 00 00 00 00 | 	byte	$06, $06, $06, $3e, $66, $66, $66, $3e, $06, $06, $06, $00, $00, $00, $00, $00
39462 b9b 00 66 00 66 
39466 b9c 66 66 66 3C 
3946a b9d 18 0C 06 00 
3946e b9e 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
39472 b9f 00 7E 66 66 
39476 ba0 66 66 66 66 
3947a ba1 66 7E 00 00 
3947e ba2 00 00 00 00 | 	byte	$00, $7e, $66, $66, $66, $66, $66, $66, $66, $7e, $00, $00, $00, $00, $00, $00
39482 ba3 00 00 00 00 
      ...             
3968a c25 00 00 00 00 
3968e c26 00 00       | 	byte	$00[526]
39690 c27 00 00 00 00 
39694 c28 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
39695 c28 80 00 00 00 
39699 c29 00 80 00 00 
3969d c2a 80 80 00 00 
396a1 c2b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
396a5 c2c 80 00 80 00 
396a9 c2d 00 40 80 00 
396ad c2e AA AA AA 00 
396b1 c2f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
396b5 c30 FF 00 00 00 
396b9 c31 00 FF 00 00 
396bd c32 FF FF 00 00 
396c1 c33 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
396c5 c34 FF 00 FF 00 
396c9 c35 00 FF FF 00 
396cd c36 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
396d0 c37 00 00 00 00 
396d4 c38 00          | ataripalette   file "ataripalettep2.def"
396d5 c38 11 11 11 00 
396d9 c39 22 22 22 00 
396dd c3a 33 33 33 00 
396e1 c3b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
396e5 c3c 55 55 55 00 
396e9 c3d 66 66 66 00 
396ed c3e 77 77 77 00 
396f1 c3f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
396f5 c40 99 99 99 00 
396f9 c41 AA AA AA 00 
396fd c42 BB BB BB 00 
39701 c43 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
39705 c44 DD DD DD 00 
39709 c45 EE EE EE 00 
3970d c46 FF FF FF 00 
39711 c47 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
39715 c48 00 14 40 00 
39719 c49 00 1E 60 00 
3971d c4a 00 28 80 00 
39721 c4b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
39725 c4c 00 3C BF 00 
39729 c4d 00 46 DF 00 
3972d c4e 00 50 FF 00 
39731 c4f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
39735 c50 39 77 FF 00 
39739 c51 55 8A FF 00 
3973d c52 71 9E FF 00 
39741 c53 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
39745 c54 AA C5 FF 00 
39749 c55 C6 D8 FF 00 
3974d c56 E3 EC FF 00 
39751 c57 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
39755 c58 00 00 40 00 
39759 c59 00 00 60 00 
3975d c5a 00 00 80 00 
39761 c5b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
39765 c5c 00 00 BF 00 
39769 c5d 00 00 DF 00 
3976d c5e 00 00 FF 00 
39771 c5f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
39775 c60 39 39 FF 00 
39779 c61 55 55 FF 00 
3977d c62 71 71 FF 00 
39781 c63 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
39785 c64 AA AA FF 00 
39789 c65 C6 C6 FF 00 
3978d c66 E3 E3 FF 00 
39791 c67 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
39795 c68 20 00 40 00 
39799 c69 30 00 60 00 
3979d c6a 40 00 80 00 
397a1 c6b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
397a5 c6c 60 00 BF 00 
397a9 c6d 70 00 DF 00 
397ad c6e 80 00 FF 00 
397b1 c6f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
397b5 c70 9C 39 FF 00 
397b9 c71 AA 55 FF 00 
397bd c72 B8 71 FF 00 
397c1 c73 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
397c5 c74 D5 AA FF 00 
397c9 c75 E3 C6 FF 00 
397cd c76 F1 E3 FF 00 
397d1 c77 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
397d5 c78 40 00 40 00 
397d9 c79 60 00 60 00 
397dd c7a 80 00 80 00 
397e1 c7b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
397e5 c7c BF 00 BF 00 
397e9 c7d DF 00 DF 00 
397ed c7e FF 00 FF 00 
397f1 c7f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
397f5 c80 FF 39 FF 00 
397f9 c81 FF 55 FF 00 
397fd c82 FF 71 FF 00 
39801 c83 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
39805 c84 FF AA FF 00 
39809 c85 FF C6 FF 00 
3980d c86 FF E3 FF 00 
39811 c87 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
39815 c88 40 00 20 00 
39819 c89 60 00 30 00 
3981d c8a 80 00 40 00 
39821 c8b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
39825 c8c BF 00 60 00 
39829 c8d DF 00 70 00 
3982d c8e FF 00 80 00 
39831 c8f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
39835 c90 FF 39 9C 00 
39839 c91 FF 55 AA 00 
3983d c92 FF 71 B8 00 
39841 c93 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
39845 c94 FF AA D5 00 
39849 c95 FF C6 E3 00 
3984d c96 FF E3 F1 00 
39851 c97 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
39855 c98 40 00 00 00 
39859 c99 60 00 00 00 
3985d c9a 80 00 00 00 
39861 c9b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
39865 c9c BF 00 00 00 
39869 c9d DF 00 00 00 
3986d c9e FF 00 00 00 
39871 c9f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
39875 ca0 FF 39 39 00 
39879 ca1 FF 55 55 00 
3987d ca2 FF 71 71 00 
39881 ca3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
39885 ca4 FF AA AA 00 
39889 ca5 FF C6 C6 00 
3988d ca6 FF E3 E3 00 
39891 ca7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
39895 ca8 40 10 00 00 
39899 ca9 60 18 00 00 
3989d caa 80 20 00 00 
398a1 cab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
398a5 cac BF 30 00 00 
398a9 cad DF 38 00 00 
398ad cae FF 40 00 00 
398b1 caf FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
398b5 cb0 FF 6A 39 00 
398b9 cb1 FF 80 55 00 
398bd cb2 FF 95 71 00 
398c1 cb3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
398c5 cb4 FF BF AA 00 
398c9 cb5 FF D5 C6 00 
398cd cb6 FF EA E3 00 
398d1 cb7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
398d5 cb8 40 20 00 00 
398d9 cb9 60 30 00 00 
398dd cba 80 40 00 00 
398e1 cbb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
398e5 cbc BF 60 00 00 
398e9 cbd DF 70 00 00 
398ed cbe FF 80 00 00 
398f1 cbf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
398f5 cc0 FF 9C 39 00 
398f9 cc1 FF AA 55 00 
398fd cc2 FF B8 71 00 
39901 cc3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
39905 cc4 FF D5 AA 00 
39909 cc5 FF E3 C6 00 
3990d cc6 FF F1 E3 00 
39911 cc7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
39915 cc8 40 30 00 00 
39919 cc9 60 48 00 00 
3991d cca 80 60 00 00 
39921 ccb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
39925 ccc BF 90 00 00 
39929 ccd DF A8 00 00 
3992d cce FF C0 00 00 
39931 ccf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
39935 cd0 FF CE 39 00 
39939 cd1 FF D5 55 00 
3993d cd2 FF DC 71 00 
39941 cd3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
39945 cd4 FF EA AA 00 
39949 cd5 FF F1 C6 00 
3994d cd6 FF F8 E3 00 
39951 cd7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
39955 cd8 30 40 00 00 
39959 cd9 48 60 00 00 
3995d cda 60 80 00 00 
39961 cdb 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
39965 cdc 90 BF 00 00 
39969 cdd A8 DF 00 00 
3996d cde C0 FF 00 00 
39971 cdf C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
39975 ce0 CE FF 39 00 
39979 ce1 D5 FF 55 00 
3997d ce2 DC FF 71 00 
39981 ce3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
39985 ce4 EA FF AA 00 
39989 ce5 F1 FF C6 00 
3998d ce6 F8 FF E3 00 
39991 ce7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
39995 ce8 00 40 00 00 
39999 ce9 00 60 00 00 
3999d cea 00 80 00 00 
399a1 ceb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
399a5 cec 00 BF 00 00 
399a9 ced 00 DF 00 00 
399ad cee 00 FF 00 00 
399b1 cef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
399b5 cf0 39 FF 39 00 
399b9 cf1 55 FF 55 00 
399bd cf2 71 FF 71 00 
399c1 cf3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
399c5 cf4 AA FF AA 00 
399c9 cf5 C6 FF C6 00 
399cd cf6 E3 FF E3 00 
399d1 cf7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
399d5 cf8 00 40 14 00 
399d9 cf9 00 60 1E 00 
399dd cfa 00 80 28 00 
399e1 cfb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
399e5 cfc 00 BF 3C 00 
399e9 cfd 00 DF 46 00 
399ed cfe 00 FF 50 00 
399f1 cff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
399f5 d00 39 FF 77 00 
399f9 d01 55 FF 8A 00 
399fd d02 71 FF 9E 00 
39a01 d03 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
39a05 d04 AA FF C5 00 
39a09 d05 C6 FF D8 00 
39a0d d06 E3 FF EC 00 
39a11 d07 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
39a15 d08 00 40 28 00 
39a19 d09 00 60 3C 00 
39a1d d0a 00 80 50 00 
39a21 d0b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
39a25 d0c 00 BF 78 00 
39a29 d0d 00 DF 8C 00 
39a2d d0e 00 FF A0 00 
39a31 d0f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
39a35 d10 39 FF B5 00 
39a39 d11 55 FF C0 00 
39a3d d12 71 FF CA 00 
39a41 d13 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
39a45 d14 AA FF DF 00 
39a49 d15 C6 FF EA 00 
39a4d d16 E3 FF F4 00 
39a51 d17 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
39a55 d18 00 40 40 00 
39a59 d19 00 60 60 00 
39a5d d1a 00 80 80 00 
39a61 d1b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
39a65 d1c 00 BF BF 00 
39a69 d1d 00 DF DF 00 
39a6d d1e 00 FF FF 00 
39a71 d1f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
39a75 d20 39 FF FF 00 
39a79 d21 55 FF FF 00 
39a7d d22 71 FF FF 00 
39a81 d23 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
39a85 d24 AA FF FF 00 
39a89 d25 C6 FF FF 00 
39a8d d26 E3 FF FF 00 
39a91 d27 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
39a95 d28 00 28 40 00 
39a99 d29 00 3C 60 00 
39a9d d2a 00 50 80 00 
39aa1 d2b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
39aa5 d2c 00 78 BF 00 
39aa9 d2d 00 8C DF 00 
39aad d2e 00 A0 FF 00 
39ab1 d2f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
39ab5 d30 39 B5 FF 00 
39ab9 d31 55 C0 FF 00 
39abd d32 71 CA FF 00 
39ac1 d33 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
39ac5 d34 AA DF FF 00 
39ac9 d35 C6 EA FF 00 
39acd d36 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
39ad0 d37 00 00 00 00 
39ad4 d38 00          | ataripalette2  file "ataripalettep2.def"
39ad5 d38 11 11 11 00 
39ad9 d39 22 22 22 00 
39add d3a 33 33 33 00 
39ae1 d3b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
39ae5 d3c 55 55 55 00 
39ae9 d3d 66 66 66 00 
39aed d3e 77 77 77 00 
39af1 d3f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
39af5 d40 99 99 99 00 
39af9 d41 AA AA AA 00 
39afd d42 BB BB BB 00 
39b01 d43 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
39b05 d44 DD DD DD 00 
39b09 d45 EE EE EE 00 
39b0d d46 FF FF FF 00 
39b11 d47 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
39b15 d48 00 14 40 00 
39b19 d49 00 1E 60 00 
39b1d d4a 00 28 80 00 
39b21 d4b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
39b25 d4c 00 3C BF 00 
39b29 d4d 00 46 DF 00 
39b2d d4e 00 50 FF 00 
39b31 d4f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
39b35 d50 39 77 FF 00 
39b39 d51 55 8A FF 00 
39b3d d52 71 9E FF 00 
39b41 d53 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
39b45 d54 AA C5 FF 00 
39b49 d55 C6 D8 FF 00 
39b4d d56 E3 EC FF 00 
39b51 d57 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
39b55 d58 00 00 40 00 
39b59 d59 00 00 60 00 
39b5d d5a 00 00 80 00 
39b61 d5b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
39b65 d5c 00 00 BF 00 
39b69 d5d 00 00 DF 00 
39b6d d5e 00 00 FF 00 
39b71 d5f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
39b75 d60 39 39 FF 00 
39b79 d61 55 55 FF 00 
39b7d d62 71 71 FF 00 
39b81 d63 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
39b85 d64 AA AA FF 00 
39b89 d65 C6 C6 FF 00 
39b8d d66 E3 E3 FF 00 
39b91 d67 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
39b95 d68 20 00 40 00 
39b99 d69 30 00 60 00 
39b9d d6a 40 00 80 00 
39ba1 d6b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
39ba5 d6c 60 00 BF 00 
39ba9 d6d 70 00 DF 00 
39bad d6e 80 00 FF 00 
39bb1 d6f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
39bb5 d70 9C 39 FF 00 
39bb9 d71 AA 55 FF 00 
39bbd d72 B8 71 FF 00 
39bc1 d73 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
39bc5 d74 D5 AA FF 00 
39bc9 d75 E3 C6 FF 00 
39bcd d76 F1 E3 FF 00 
39bd1 d77 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
39bd5 d78 40 00 40 00 
39bd9 d79 60 00 60 00 
39bdd d7a 80 00 80 00 
39be1 d7b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
39be5 d7c BF 00 BF 00 
39be9 d7d DF 00 DF 00 
39bed d7e FF 00 FF 00 
39bf1 d7f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
39bf5 d80 FF 39 FF 00 
39bf9 d81 FF 55 FF 00 
39bfd d82 FF 71 FF 00 
39c01 d83 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
39c05 d84 FF AA FF 00 
39c09 d85 FF C6 FF 00 
39c0d d86 FF E3 FF 00 
39c11 d87 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
39c15 d88 40 00 20 00 
39c19 d89 60 00 30 00 
39c1d d8a 80 00 40 00 
39c21 d8b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
39c25 d8c BF 00 60 00 
39c29 d8d DF 00 70 00 
39c2d d8e FF 00 80 00 
39c31 d8f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
39c35 d90 FF 39 9C 00 
39c39 d91 FF 55 AA 00 
39c3d d92 FF 71 B8 00 
39c41 d93 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
39c45 d94 FF AA D5 00 
39c49 d95 FF C6 E3 00 
39c4d d96 FF E3 F1 00 
39c51 d97 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
39c55 d98 40 00 00 00 
39c59 d99 60 00 00 00 
39c5d d9a 80 00 00 00 
39c61 d9b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
39c65 d9c BF 00 00 00 
39c69 d9d DF 00 00 00 
39c6d d9e FF 00 00 00 
39c71 d9f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
39c75 da0 FF 39 39 00 
39c79 da1 FF 55 55 00 
39c7d da2 FF 71 71 00 
39c81 da3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
39c85 da4 FF AA AA 00 
39c89 da5 FF C6 C6 00 
39c8d da6 FF E3 E3 00 
39c91 da7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
39c95 da8 40 10 00 00 
39c99 da9 60 18 00 00 
39c9d daa 80 20 00 00 
39ca1 dab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
39ca5 dac BF 30 00 00 
39ca9 dad DF 38 00 00 
39cad dae FF 40 00 00 
39cb1 daf FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
39cb5 db0 FF 6A 39 00 
39cb9 db1 FF 80 55 00 
39cbd db2 FF 95 71 00 
39cc1 db3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
39cc5 db4 FF BF AA 00 
39cc9 db5 FF D5 C6 00 
39ccd db6 FF EA E3 00 
39cd1 db7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
39cd5 db8 40 20 00 00 
39cd9 db9 60 30 00 00 
39cdd dba 80 40 00 00 
39ce1 dbb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
39ce5 dbc BF 60 00 00 
39ce9 dbd DF 70 00 00 
39ced dbe FF 80 00 00 
39cf1 dbf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
39cf5 dc0 FF 9C 39 00 
39cf9 dc1 FF AA 55 00 
39cfd dc2 FF B8 71 00 
39d01 dc3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
39d05 dc4 FF D5 AA 00 
39d09 dc5 FF E3 C6 00 
39d0d dc6 FF F1 E3 00 
39d11 dc7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
39d15 dc8 40 30 00 00 
39d19 dc9 60 48 00 00 
39d1d dca 80 60 00 00 
39d21 dcb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
39d25 dcc BF 90 00 00 
39d29 dcd DF A8 00 00 
39d2d dce FF C0 00 00 
39d31 dcf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
39d35 dd0 FF CE 39 00 
39d39 dd1 FF D5 55 00 
39d3d dd2 FF DC 71 00 
39d41 dd3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
39d45 dd4 FF EA AA 00 
39d49 dd5 FF F1 C6 00 
39d4d dd6 FF F8 E3 00 
39d51 dd7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
39d55 dd8 30 40 00 00 
39d59 dd9 48 60 00 00 
39d5d dda 60 80 00 00 
39d61 ddb 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
39d65 ddc 90 BF 00 00 
39d69 ddd A8 DF 00 00 
39d6d dde C0 FF 00 00 
39d71 ddf C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
39d75 de0 CE FF 39 00 
39d79 de1 D5 FF 55 00 
39d7d de2 DC FF 71 00 
39d81 de3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
39d85 de4 EA FF AA 00 
39d89 de5 F1 FF C6 00 
39d8d de6 F8 FF E3 00 
39d91 de7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
39d95 de8 00 40 00 00 
39d99 de9 00 60 00 00 
39d9d dea 00 80 00 00 
39da1 deb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
39da5 dec 00 BF 00 00 
39da9 ded 00 DF 00 00 
39dad dee 00 FF 00 00 
39db1 def 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
39db5 df0 39 FF 39 00 
39db9 df1 55 FF 55 00 
39dbd df2 71 FF 71 00 
39dc1 df3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
39dc5 df4 AA FF AA 00 
39dc9 df5 C6 FF C6 00 
39dcd df6 E3 FF E3 00 
39dd1 df7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
39dd5 df8 00 40 14 00 
39dd9 df9 00 60 1E 00 
39ddd dfa 00 80 28 00 
39de1 dfb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
39de5 dfc 00 BF 3C 00 
39de9 dfd 00 DF 46 00 
39ded dfe 00 FF 50 00 
39df1 dff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
39df5 e00 39 FF 77 00 
39df9 e01 55 FF 8A 00 
39dfd e02 71 FF 9E 00 
39e01 e03 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
39e05 e04 AA FF C5 00 
39e09 e05 C6 FF D8 00 
39e0d e06 E3 FF EC 00 
39e11 e07 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
39e15 e08 00 40 28 00 
39e19 e09 00 60 3C 00 
39e1d e0a 00 80 50 00 
39e21 e0b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
39e25 e0c 00 BF 78 00 
39e29 e0d 00 DF 8C 00 
39e2d e0e 00 FF A0 00 
39e31 e0f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
39e35 e10 39 FF B5 00 
39e39 e11 55 FF C0 00 
39e3d e12 71 FF CA 00 
39e41 e13 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
39e45 e14 AA FF DF 00 
39e49 e15 C6 FF EA 00 
39e4d e16 E3 FF F4 00 
39e51 e17 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
39e55 e18 00 40 40 00 
39e59 e19 00 60 60 00 
39e5d e1a 00 80 80 00 
39e61 e1b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
39e65 e1c 00 BF BF 00 
39e69 e1d 00 DF DF 00 
39e6d e1e 00 FF FF 00 
39e71 e1f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
39e75 e20 39 FF FF 00 
39e79 e21 55 FF FF 00 
39e7d e22 71 FF FF 00 
39e81 e23 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
39e85 e24 AA FF FF 00 
39e89 e25 C6 FF FF 00 
39e8d e26 E3 FF FF 00 
39e91 e27 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
39e95 e28 00 28 40 00 
39e99 e29 00 3C 60 00 
39e9d e2a 00 50 80 00 
39ea1 e2b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
39ea5 e2c 00 78 BF 00 
39ea9 e2d 00 8C DF 00 
39ead e2e 00 A0 FF 00 
39eb1 e2f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
39eb5 e30 39 B5 FF 00 
39eb9 e31 55 C0 FF 00 
39ebd e32 71 CA FF 00 
39ec1 e33 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
39ec5 e34 AA DF FF 00 
39ec9 e35 C6 EA FF 00 
39ecd e36 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
39ed0 e37             | 
39ed0 e37             | '**********************************************************************************
39ed0 e37             | '
39ed0 e37             | '        Timings and colors definitions
39ed0 e37             | '
39ed0 e37             | '**********************************************************************************
39ed0 e37             | 
39ed0 e37             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
39ed0 e37 08 00 00 00 
39ed4 e38 3C 00 00 00 
39ed8 e39 08 00 00 00 
39edc e3a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
39ee0 e3b 07 00 00 00 
39ee4 e3c 04 00 00 00 
39ee8 e3d 01 00 00 00 
39eec e3e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
39ef0 e3f 58 02 00 00 
39ef4 e40 20 9E 4B 14 
39ef8 e41 FB A8 9E 01 
39efc e42 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
39f00 e43 00 00 00 00 
39f04 e44 C0 00 00 00 
39f08 e45 00 00 00 00 
39f0c e46 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39f10 e47             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
39f10 e47 00 75 C7 97 
39f14 e48 27 47 F6 0A 
39f18 e49 05 79 CB 9B 
39f1c e4a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
39f20 e4b             | 
39f20 e4b             | ''--------  Initialization  ----------------------------------------------------------------
39f20 e4b             | 
39f20 e4b 28 0C 64 FD | hdmi            setq    #6
39f24 e4c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
39f28 e4d 28 10 64 FD |                 setq    #8
39f2c e4e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
39f30 e4f             | 
39f30 e4f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
39f34 e50 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
39f38 e51 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
39f3c e52 D6 C6 01 F1 |                 add     t1,hbase
39f40 e53 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
39f44 e54 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
39f48 e55 7B 0B 80 5F 
39f4c e56 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
39f50 e57 66 66 86 FF 
39f54 e58 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
39f58 e59             | '
39f58 e59 D6 C6 01 F6 |                 mov 	t1,hbase			   '
39f5c e5a 11 C6 65 F0 |                 shl 	t1,#17                             '
39f60 e5b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
39f64 e5c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
39f68 e5d             | 
39f68 e5d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
39f6c e5e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
39f70 e5f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
39f74 e60             | 
39f74 e60             | ''--------  frame rendering main loop  ---------------------------------------------------
39f74 e60             | 
39f74 e60 28 06 64 FD | p101            setq 	#3
39f78 e61 00 A5 05 FB | 		rdlong  vblankptr,ptra
39f7c e62 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
39f80 e63 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
39f84 e64 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
39f88 e65 00 A0 05 F6 |                 mov     dlinum, #0
39f8c e66 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
39f90 e67 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
39f94 e68             | 
39f94 e68             | 
39f94 e68 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
39f98 e69 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
39f9c e6a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
39fa0 e6b             |                 
39fa0 e6b             | 
39fa0 e6b             | 
39fa0 e6b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
39fa0 e6b             |   
39fa0 e6b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
39fa4 e6c 29 FE 65 3D |          if_nc  setq2   #255
39fa8 e6d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
39fac e6e             | 
39fac e6e             | '' -----   up porch (before the picture)
39fac e6e             | 
39fac e6e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
39fb0 e6f C1 C4 01 F6 |                 mov     hsync1,sync_001	
39fb4 e70 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
39fb8 e71 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
39fbc e72             |  
39fbc e72             |    
39fbc e72             |  
39fbc e72 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
39fc0 e73 E2 8C B1 FC |                 xzero   m_sn,hsync1
39fc4 e74 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
39fc8 e75 E1 8E C1 FC |                 xcont   m_bv,hsync0     
39fcc e76 E1 90 C1 FC |                 xcont   m_vi,hsync0
39fd0 e77 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
39fd4 e78             | 
39fd4 e78 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
39fd8 e79 E2 8C B1 FC |                 xzero   m_sn,hsync1
39fdc e7a 48 00 B0 FD | 		call    #dli
39fe0 e7b E1 8E C1 FC |                 xcont   m_bv,hsync0     
39fe4 e7c E1 90 C1 FC |                 xcont   m_vi,hsync0
39fe8 e7d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
39fec e7e             |                 	
39fec e7e             |                 
39fec e7e             | 
39fec e7e             |  
39fec e7e             | '' ------- the main screen drawing starts here
39fec e7e             | 
39fec e7e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
39ff0 e7f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
39ff4 e80 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
39ff8 e81 E1 8E C1 FC |                 xcont   m_bv,hsync0
39ffc e82 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3a000 e83 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3a004 e84 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3a008 e85             |               
3a008 e85             | 
3a008 e85 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3a00c e86 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3a010 e87             | 
3a010 e87             | ' ---------------- All visible lines displayed now, start vblank  
3a010 e87             | 
3a010 e87 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3a014 e88 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3a018 e89 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3a01c e8a C3 C4 01 F6 |                 mov     hsync1,sync_223
3a020 e8b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3a024 e8c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3a028 e8d             | 
3a028 e8d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3a028 e8d             | 
3a028 e8d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3a028 e8d             | 
3a028 e8d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3a02c e8e             | 
3a02c e8e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3a030 e8f 04 B8 05 A1 |     if_z        add     dlptr2,#4
3a034 e90 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3a038 e91             | 
3a038 e91 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3a03c e92 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3a040 e93 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3a044 e94 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3a048 e95 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3a04c e96             | 
3a04c e96 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3a050 e97 DD C6 41 F8 |                 getnib  t1,dl,#0
3a054 e98 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3a058 e99 70 00 90 AD |     if_z        jmp     #preload
3a05c e9a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3a060 e9b 94 00 90 AD |     if_z        jmp     #preload2
3a064 e9c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3a068 e9d 0C 00 90 AD |     if_z        jmp     #p390
3a06c e9e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3a070 e9f 28 00 90 AD |     if_z        jmp     #p391  
3a074 ea0             | 
3a074 ea0 2D 00 64 FD | p308            ret
3a078 ea1             |    
3a078 ea1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3a07c ea2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3a080 ea3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3a084 ea4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3a088 ea5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3a08c ea6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3a090 ea7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3a094 ea8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3a098 ea9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3a09c eaa             |  
3a09c eaa             | '' --------  Reload palette. To do 
3a09c eaa             | 
3a09c eaa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3a0a0 eab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3a0a4 eac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3a0a8 ead 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3a0ac eae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3a0b0 eaf E0 00 00 FB |         	rdlong  $000, framebuf2         	
3a0b4 eb0 70 FF 9F FD |         	jmp     #dli                
3a0b8 eb1             |       
3a0b8 eb1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3a0b8 eb1             | 
3a0b8 eb1             | 
3a0b8 eb1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3a0b8 eb1             | 
3a0b8 eb1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3a0bc eb2 E2 8C B1 FC |                 xzero   m_sn,hsync1
3a0c0 eb3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3a0c4 eb4 E1 90 C1 FC |                 xcont   m_vi,hsync0
3a0c8 eb5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3a0cc eb6             |         
3a0cc eb6             | '' -------------- Preload a line from PSRAM        
3a0cc eb6             |         
3a0cc eb6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3a0d0 eb7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3a0d4 eb8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3a0d8 eb9 DE B4 01 F6 |                 mov     buf1,buf1c
3a0dc eba 03 A0 05 F7 |                 incmod  dlinum,#3
3a0e0 ebb             | 
3a0e0 ebb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3a0e4 ebc 32 B7 01 F6 |                 mov     buf2,a1024
3a0e8 ebd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3a0ec ebe 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3a0f0 ebf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3a0f4 ec0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3a0f8 ec1             |  
3a0f8 ec1             |  
3a0f8 ec1             | preload2      '  incmod  dlinum,#3
3a0f8 ec1 04 C0 45 F0 |                 shr 	framebuf2,#4
3a0fc ec2 ED B2 01 F6 |                 mov 	cmd,affffffff
3a100 ec3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3a104 ec4 28 02 64 FD |                 setq	#1
3a108 ec5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3a10c ec6             |                 
3a10c ec6             | 
3a10c ec6             | '' -------------- Draw sprites
3a10c ec6             | 
3a10c ec6 CF 5C 02 F6 | sprite          mov t8,frames
3a110 ec7 10 5C 0E F5 | 		and t8,#16 wz
3a114 ec8 11 48 06 F6 |                 mov spritenum, #17			' 16 +2 sprites. Todo: this should be a parameter
3a118 ec9 10 48 06 A6 | 	if_z    mov spritenum, #16	
3a11c eca             | 		
3a11c eca             | 
3a11c eca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3a120 ecb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3a124 ecc EF 56 96 F9 |                 alts    t5,#sprite1xy
3a128 ecd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3a12c ece 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3a130 ecf EF 56 96 F9 |                 alts    t5,#sprite1xy
3a134 ed0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3a138 ed1 0F 4C 66 F7 |                 signx	sprite_x,#15
3a13c ed2 F0 56 96 F9 |                 alts    t5,#sprite1wh
3a140 ed3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3a144 ed4 01 52 86 F1 |                 sub     sprite_h,#1
3a148 ed5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3a14c ed6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3a150 ed7             | 
3a150 ed7             | 
3a150 ed7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3a154 ed8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3a158 ed9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3a15c eda B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3a160 edb 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3a164 edc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3a168 edd 00 5E 06 F6 |                 mov 	t9,#0
3a16c ede 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3a170 edf 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3a174 ee0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3a178 ee1             |      
3a178 ee1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3a17c ee2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3a180 ee3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3a184 ee4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3a188 ee5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3a18c ee6             |                 
3a18c ee6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3a190 ee7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3a194 ee8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3a198 ee9             |   		
3a198 ee9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3a19c eea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3a1a0 eeb             | 
3a1a0 eeb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3a1a4 eec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3a1a8 eed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3a1ac eee             |  
3a1ac eee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3a1b0 eef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3a1b4 ef0 10 00 90 CD |      if_c 	jmp     #p899		
3a1b8 ef1             | 	
3a1b8 ef1             | 	
3a1b8 ef1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3a1bc ef2 28 CD 01 F1 | 		add	t4,sprite_w
3a1c0 ef3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3a1c4 ef4             | 
3a1c4 ef4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3a1c8 ef5             | 
3a1c8 ef5 28 59 02 F6 | p899		mov 	t6,sprite_w
3a1cc ef6 01 58 86 F1 | 	 	sub     t6,#1
3a1d0 ef7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3a1d4 ef8             | 
3a1d4 ef8 28 58 62 FD |                 setq   	t6
3a1d8 ef9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3a1dc efa 28 5D 02 F6 |                 mov t8,sprite_w
3a1e0 efb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3a1e4 efc 24 00 90 AD |         if_z    jmp #p898
3a1e8 efd             |          
3a1e8 efd             |         
3a1e8 efd 70 5F 06 F6 |                 mov  t9,#368
3a1ec efe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3a1f0 eff             | 
3a1f0 eff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3a1f4 f00 08 5C 06 FA |                 mul t8,#8				' bits to shr
3a1f8 f01 FF FF 7F FF 
3a1fc f02 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3a200 f03 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3a204 f04 00 5E 8E F9 |                 altd t9,#0				' and mask 
3a208 f05 2D 01 00 F5 |                 and 0-0, t7
3a20c f06             |                
3a20c f06             | 
3a20c f06 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3a210 f07 E5 E0 7A FA |                 wmlong 368,t3				
3a214 f08             |                 
3a214 f08 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3a218 f09 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3a21c f0a 2D 00 64 FD |                 ret
3a220 f0b             | 	
3a220 f0b             | 	
3a220 f0b             |                
3a220 f0b             |  
3a220 f0b             | '' -------------- Graphics line ------------------------------------------------------------
3a220 f0b             |  
3a220 f0b             | 
3a220 f0b             | '' consts and vars
3a220 f0b             | 
3a220 f0b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3a224 f0c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3a228 f0d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3a22c f0e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3a230 f0f             | 
3a230 f0f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3a234 f10             | 
3a234 f10             | '------ these longs will be set by setmode function
3a234 f10             | 
3a234 f10 00 00 00 00 | m_bs            long    0        'blanks before sync
3a238 f11 00 00 00 00 | m_sn            long    0        'sync
3a23c f12 00 00 00 00 | m_bv            long    0        'blanks before visible
3a240 f13 00 00 00 00 | m_vi            long    0        'visible pixels #
3a244 f14             | 'm_border        long    0        'left/right borders
3a244 f14 00 00 00 00 | i_upporch       long    0        'up porch lines
3a248 f15 00 00 00 00 | i_vsync         long    0        'vsync lines
3a24c f16 00 00 00 00 | i_downporch     long    0        'down porch lines
3a250 f17 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3a254 f18 00 00 00 00 | i_totalvis      long    0
3a258 f19             | 
3a258 f19             | '-------------------------------------
3a258 f19             |  
3a258 f19 00 00 00 00 | linenum         long    0
3a25c f1a 00 00 00 00 | frames          long    0
3a260 f1b 00 00 00 00 | dlinum long 0
3a264 f1c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3a268 f1d             | 
3a268 f1d 00 00 00 00 | vblankptr       long    0
3a26c f1e 00 00 00 00 | modeptr         long    0
3a270 f1f 00 00 00 00 | paletteptr      long    0
3a274 f20 00 00 00 00 | dlptr           long    0
3a278 f21 01 00 00 00 | hbase           long    1
3a27c f22 00 00 00 00 | mailbox         long    0
3a280 f23 00 00 00 00 | spriteptr          long 0
3a284 f24             | 
3a284 f24 00 00 00 00 | cmd             long    0
3a288 f25 00 EC 07 00 | buf1            long    $80000-1024-4096
3a28c f26 00 04 00 00 | buf2            long    1024
3a290 f27 01 00 00 00 | dlptr2          long    1
3a294 f28 01 00 00 00 | dl              long    1
3a298 f29             | 
3a298 f29 00 00 00 00 | buf1c long 0
3a29c f2a 00 EC 07 00 | buf1d            long    $80000-1024-4096
3a2a0 f2b 01 00 00 00 | framebuf2       long    1
3a2a4 f2c 01 00 00 00 | hsync0          long    1
3a2a8 f2d 01 00 00 00 | hsync1          long    1
3a2ac f2e             | 
3a2ac f2e 01 00 00 00 | t1              long    1
3a2b0 f2f 00 00 00 00 | t2 long 0
3a2b4 f30 00 00 00 00 | t3 long 0
3a2b8 f31 00 00 00 00 | t4 long 0
3a2bc f32             | 
3a2bc f32 00 00 00 00 | rcnt            long    0  'dl repeat count
3a2c0 f33 00 00 00 00 | rcnt2           long    0
3a2c4 f34 00 00 00 00 | rcnt2a          long    0
3a2c8 f35 00 00 00 00 | roffset         long    0
3a2cc f36 00 00 00 00 | rdl             long    0  'dl repeat line
3a2d0 f37 00 00 00 00 | dlc             long    0  'dl command
3a2d4 f38             | 
3a2d4 f38 FF FF FF FF | affffffff       long    $ffffffff
3a2d8 f39 00 00 00 00 | sprite1pointer long 0
3a2dc f3a 00 00 00 00 | sprite1xy      long 0
3a2e0 f3b 00 00 00 00 | sprite1wh      long 0
3a2e4 f3c 00 00 00 00 | sprite2pointer long 0
3a2e8 f3d 00 00 00 00 | sprite2xy      long 0
3a2ec f3e 00 00 00 00 | sprite2wh      long 0
3a2f0 f3f 00 00 00 00 | sprite3pointer long 0
3a2f4 f40 00 00 00 00 | sprite3xy      long 0
3a2f8 f41 00 00 00 00 | sprite3wh      long 0
3a2fc f42 00 00 00 00 | sprite4pointer long 0
3a300 f43 00 00 00 00 | sprite4xy      long 0
3a304 f44 00 00 00 00 | sprite4wh      long 0
3a308 f45 00 00 00 00 | sprite5pointer long 0
3a30c f46 00 00 00 00 | sprite5xy      long 0
3a310 f47 00 00 00 00 | sprite5wh      long 0
3a314 f48 00 00 00 00 | sprite6pointer long 0
3a318 f49 00 00 00 00 | sprite6xy      long 0
3a31c f4a 00 00 00 00 | sprite6wh      long 0
3a320 f4b 00 00 00 00 | sprite7pointer long 0
3a324 f4c 00 00 00 00 | sprite7xy      long 0
3a328 f4d 00 00 00 00 | sprite7wh      long 0
3a32c f4e 00 00 00 00 | sprite8pointer long 0
3a330 f4f 00 00 00 00 | sprite8xy      long 0
3a334 f50 00 00 00 00 | sprite8wh      long 0
3a338 f51 00 00 00 00 | sprite9pointer long 0
3a33c f52 00 00 00 00 | sprite9xy      long 0
3a340 f53 00 00 00 00 | sprite9wh      long 0
3a344 f54 00 00 00 00 | sprite10pointer long 0
3a348 f55 00 00 00 00 | sprite10xy      long 0
3a34c f56 00 00 00 00 | sprite10wh      long 0
3a350 f57 00 00 00 00 | sprite11pointer long 0
3a354 f58 00 00 00 00 | sprite11xy      long 0
3a358 f59 00 00 00 00 | sprite11wh      long 0
3a35c f5a 00 00 00 00 | sprite12pointer long 0
3a360 f5b 00 00 00 00 | sprite12xy      long 0
3a364 f5c 00 00 00 00 | sprite12wh      long 0
3a368 f5d 00 00 00 00 | sprite13pointer long 0
3a36c f5e 00 00 00 00 | sprite13xy      long 0
3a370 f5f 00 00 00 00 | sprite13wh      long 0
3a374 f60 00 00 00 00 | sprite14pointer long 0
3a378 f61 00 00 00 00 | sprite14xy      long 0
3a37c f62 00 00 00 00 | sprite14wh      long 0
3a380 f63 00 00 00 00 | sprite15pointer long 0
3a384 f64 00 00 00 00 | sprite15xy      long 0
3a388 f65 00 00 00 00 | sprite15wh      long 0
3a38c f66 00 00 00 00 | sprite16pointer long 0
3a390 f67 00 00 00 00 | sprite16xy      long 0
3a394 f68 00 00 00 00 | sprite16wh      long 0
3a398 f69 00 00 00 00 | sprite17pointer long 0
3a39c f6a 00 00 00 00 | sprite17xy      long 0
3a3a0 f6b 00 00 00 00 | sprite17wh      long 0
3a3a4 f6c 00 00 00 00 | sprite18pointer long 0
3a3a8 f6d 00 00 00 00 | sprite18xy      long 0
3a3ac f6e 00 00 00 00 | sprite18wh      long 0
3a3b0 f6f 00 00 00 00 | spritenum long 0
3a3b4 f70             | 
3a3b4 f70 00 00 00 00 | spriteline long 0
3a3b8 f71 84 03 00 00 | sprite_x long 900
3a3bc f72 00 00 00 00 | sprite_y long 0
3a3c0 f73 10 00 00 00 | sprite_w long 16
3a3c4 f74 40 00 00 00 | sprite_h long 64
3a3c8 f75 00 00 00 00 | l2 long 0
3a3cc f76 00 00 00 00 | t5 long 0
3a3d0 f77 00 00 00 00 | t6 long 0
3a3d4 f78 00 00 00 00 | t7 long 0
3a3d8 f79 00 00 00 00 | t8 long 0
3a3dc f7a 00 00 00 00 | t9 long 0
3a3e0 f7b 00 00 00 00 | preloadaddr long 0
3a3e4 f7c 00 00 00 00 | preloadlineaddr long 0
3a3e8 f7d 00 04 00 00 | a1024 long 1024
3a3ec f7e             | 
3a3ec f7e E0 03 00 00 | aa long 992
3a3f0 f7f FF 03 00 00 | a1023 long 1023
3a3f4 f80 00 10 00 00 | a4096 long 4096
3a3f8 f81             |  fit 368
3a3f8 f81             |  fit 368
3a3f8 f81             | _psram_spin2_dat_
3a3f8 f81 00 00 00 00 
      ...             
3a4f0 fbf 00 00 00 00 
3a4f4 fc0 00 00 00 00 |     listdata long 0[8*8]
3a4f8 fc1             |             orgh
3a4f8                 | 
3a4f8                 | ' driver state
3a4f8     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3a4fc     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3a500                 | 
3a500                 | ' delay profile
3a500     07 00 00 00 
3a504     00 CF 7B 05 
3a508     80 D1 F0 08 
3a50c     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3a510     80 C4 60 0F 
3a514     80 39 7A 12 
3a518     40 2D D9 13 
3a51c     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3a520                 | 
3a520                 | ' data to be passed to driver when starting it
3a520                 | startupData
3a520     00 00 00 00 |     long    0           ' current frequency
3a524     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3a528     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3a52c     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3a530     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3a534     40 A5 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3a538     C0 A5 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3a53c     E0 A5 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3a540                 | 
3a540                 | ' data for memory
3a540                 | deviceData
3a540                 |     ' 16 bank parameters follow (16MB per bank)
3a540     00 00 00 00 
      ...             
3a578     00 00 00 00 
3a57c     00 00 00 00 |     long    0[16]                               ' banks 0-15
3a580                 |     ' 16 banks of pin parameters follow
3a580     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3a584     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3a588     FF FF FF FF 
      ...             
3a5b8     FF FF FF FF 
3a5bc     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3a5c0                 | 
3a5c0                 | ' data for COG polling
3a5c0                 | qosData 
3a5c0     00 00 FF FF 
3a5c4     00 00 FF FF 
3a5c8     00 00 FF FF 
3a5cc     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3a5d0     00 00 FF FF 
3a5d4     00 00 FF FF 
3a5d8     00 00 FF FF 
3a5dc     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3a5e0                 |     
3a5e0                 | ' mailbox storage
3a5e0                 | 
3a5e0                 | mailboxes
3a5e0     00 00 00 00 
      ...             
3a638     00 00 00 00 
3a63c     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3a640                 | 	alignl
3a640                 | _psram16drv_spin2_dat_
3a640                 |                             orgh
3a640     00 00 00 00 
      ...             
3a658     00 00 00 00 
3a65c     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3a660                 | 
3a660                 | driver_start
3a660                 |                             org
3a660 000             | '..................................................................................................
3a660 000             | ' Memory layout for COG RAM once operational:
3a660 000             | '
3a660 000             | '  COG RAM address      Usage
3a660 000             | '  ---------------      ----
3a660 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3a660 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3a660 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3a660 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3a660 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3a660 000             | '  ~$198-$1F3           State and register variables
3a660 000             | '
3a660 000             | ' Also during driver COG startup:
3a660 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3a660 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3a660 000             | '..................................................................................................
3a660 000             |                             
3a660 000             | ' Mailbox storage after vector initialization
3a660 000             | 
3a660 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3a664 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3a668 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3a66c 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3a670 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3a674 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3a678 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3a67c 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3a680 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3a684 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3a688 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3a68c 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3a690 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3a694 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3a698 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3a69c 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3a6a0 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3a6a4 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3a6a8 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3a6ac 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3a6b0 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3a6b4 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3a6b8 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3a6bc 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3a6c0 018             | 
3a6c0 018             | ' Mailbox parameter addresses per COG once patched
3a6c0 018             |                             
3a6c0 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3a6c4 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3a6c8 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3a6cc 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3a6d0 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3a6d4 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3a6d8 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3a6dc 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3a6e0 020             | 
3a6e0 020             | '..................................................................................................
3a6e0 020             | ' Per COG request and state setup and service branching
3a6e0 020             |         
3a6e0 020             | cog0                 
3a6e0 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3a6e4 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3a6e8 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3a6ec 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3a6f0 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a6f4 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a6f8 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3a6fc 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3a700 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3a704 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a708 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a70c 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3a710 02c             | cog1                        
3a710 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3a714 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3a718 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3a71c 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3a720 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a724 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a728 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3a72c 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3a730 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3a734 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a738 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a73c 037 33 CA 63 FD |                             execf   request-0               'jump to service
3a740 038             | cog2                         
3a740 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3a744 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3a748 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3a74c 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3a750 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a754 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a758 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3a75c 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3a760 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3a764 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a768 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a76c 043 33 CA 63 FD |                             execf   request-0               'jump to service
3a770 044             | cog3                        
3a770 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3a774 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3a778 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3a77c 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3a780 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a784 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a788 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3a78c 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3a790 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3a794 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a798 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a79c 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3a7a0 050             | cog4                        
3a7a0 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3a7a4 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3a7a8 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3a7ac 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3a7b0 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a7b4 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a7b8 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3a7bc 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3a7c0 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3a7c4 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a7c8 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a7cc 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3a7d0 05c             | cog5                        
3a7d0 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3a7d4 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3a7d8 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3a7dc 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3a7e0 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a7e4 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a7e8 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3a7ec 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3a7f0 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3a7f4 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a7f8 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a7fc 067 33 CA 63 FD |                             execf   request-0               'jump to service
3a800 068             | cog6                        
3a800 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3a804 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3a808 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3a80c 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3a810 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a814 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a818 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3a81c 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3a820 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3a824 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a828 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a82c 073 33 CA 63 FD |                             execf   request-0               'jump to service
3a830 074             | cog7                        
3a830 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3a834 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3a838 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3a83c 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3a840 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a844 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a848 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3a84c 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3a850 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3a854 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a858 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a85c 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3a860 080             | 
3a860 080             |                             fit     128
3a860 080             |                             fit     128
3a860 080             | pad                         long    0[128-$]                'align init code to $80
3a860 080             | 
3a860 080             | '..................................................................................................
3a860 080             | 
3a860 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3a860 080             | 
3a860 080             | init                        
3a860 080             |                             ' get driver scratch long address in hub
3a860 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3a864 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3a868 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3a86c 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3a870 084             |                     
3a870 084             |                             ' read in the additional LUT RAM code
3a870 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3a874 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3a878 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3a87c 087             | 
3a87c 087             |                             ' read the startup parameters
3a87c 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3a880 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3a884 089             | 
3a884 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3a884 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3a888 08a             | 
3a888 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3a88c 08b 01 00 00 5F 
3a890 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3a894 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3a898 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3a89c 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3a8a0 090             | 
3a8a0 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3a8a0 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3a8a4 091 01 00 00 FF 
3a8a8 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3a8ac 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3a8b0 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3a8b4 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3a8b8 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3a8bc 097 08 DE 47 F5 |                             or      a, #8
3a8c0 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3a8c4 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3a8c8 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3a8cc 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3a8d0 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3a8d4 09d 01 DE 07 F1 |                             add     a, #1
3a8d8 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3a8dc 09f             |  
3a8dc 09f             |                             ' setup device control pin states
3a8dc 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3a8e0 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3a8e4 0a1 01 00 00 FF 
3a8e8 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3a8ec 0a3             | 
3a8ec 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3a8f0 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3a8f4 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3a8f8 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3a8fc 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3a900 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3a904 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3a908 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3a90c 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3a910 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3a914 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3a918 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3a91c 0af             | pinloop
3a91c 0af             |                             ' generate minimum CE high time before access
3a91c 0af A1 07 00 FF 
3a920 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3a924 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3a928 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3a92c 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3a930 0b4 1F DE 63 FD |                             waitx   a                       'delay
3a934 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3a938 0b6             | 
3a938 0b6             |                             ' setup the COG mailboxes and addresses 
3a938 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3a93c 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3a940 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3a944 0b9             | 
3a944 0b9 28 2E 64 FD |                             setq    #24-1
3a948 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3a94c 0bb             | 
3a94c 0bb             |                             ' setup the polling loop for active COGs 
3a94c 0bb 01 C2 63 FD |                             cogid   id
3a950 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3a954 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3a958 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3a95c 0bf 0A F0 07 F6 |                             mov     ptra, #10
3a960 0c0 E1 F1 03 FA |                             mul     ptra, id
3a964 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3a968 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3a96c 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3a970 0c4 03 C2 07 FA |                             mul     id, #3
3a974 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3a978 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3a97c 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3a980 0c8 D8 01 B0 FD |                             call    #reloadcogs
3a984 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3a988 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3a98c 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3a98c 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3a990 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3a994 0cd 08 04 DC FC |                             rep     #2, #8
3a998 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3a99c 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3a9a0 0d0             | 
3a9a0 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3a9a0 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3a9a0 0d0 01 C2 63 FD |                             cogid   id
3a9a4 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3a9a8 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3a9ac 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3a9b0 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3a9b4 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3a9b8 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3a9bc 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3a9c0 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3a9c4 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3a9c8 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3a9cc 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3a9d0 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3a9d4 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3a9d8 0de A5 E5 03 F1 |                             add     d, const512
3a9dc 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3a9e0 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3a9e4 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3a9e8 0e2             |                             
3a9e8 0e2             |                             ' setup register values for control vector loop setup after we return
3a9e8 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3a9ec 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3a9f0 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3a9f4 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3a9f8 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3a9fc 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3aa00 0e8 D0 C3 8F F9 |                             altd    id, #id0
3aa04 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3aa08 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3aa0c 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3aa10 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3aa14 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3aa18 0ee             |  
3aa18 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3aa1c 0ef 07 CA 07 F5 |                             and     request, #7
3aa20 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3aa24 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3aa28 0f2             | 
3aa28 0f2             |                             fit     $100                    'ensure all init code fits this space
3aa28 0f2             |                             fit     $100                    'ensure all init code fits this space
3aa28 0f2             | 
3aa28 0f2 00 00 00 00 
      ...             
3aa58 0fe 00 00 00 00 
3aa5c 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3aa60 100             | 
3aa60 100             | '..................................................................................................
3aa60 100             | ' Error result handling and COG notification of request completion
3aa60 100             | 
3aa60 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3aa64 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3aa68 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3aa6c 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3aa70 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3aa74 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3aa78 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3aa7c 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3aa80 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3aa84 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3aa88 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3aa8c 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3aa90 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3aa94 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3aa98 10e             | ' Poller re-starts here after a COG is serviced
3aa98 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3aa9c 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3aaa0 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3aaa4 111             | ' Main dynamic polling loop repeats until a request arrives
3aaa4 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3aaa8 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3aaac 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3aab0 114             | 
3aab0 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3aab4 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3aab8 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3aabc 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3aac0 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3aac4 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3aac8 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3aacc 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3aad0 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3aad4 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3aad8 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3aadc 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3aae0 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3aae4 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3aae8 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3aaec 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3aaf0 124             | 
3aaf0 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3aaf4 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3aaf8 126             |  
3aaf8 126             | '..................................................................................................
3aaf8 126             | ' List handler                               
3aaf8 126             | 
3aaf8 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3aafc 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3ab00 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3ab04 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3ab08 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3ab0c 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3ab10 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3ab14 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3ab18 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3ab1c 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3ab20 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3ab24 131 33 00 60 FD |                             execf   0-0                     'process the request 
3ab28 132             | 
3ab28 132             | '..................................................................................................
3ab28 132             | ' Restoring per COG state and resuming where we left off
3ab28 132             | 
3ab28 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3ab2c 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3ab30 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3ab34 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3ab38 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3ab3c 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3ab40 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3ab44 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3ab48 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3ab4c 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3ab50 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3ab54 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3ab58 13e             |                    
3ab58 13e             | '..................................................................................................
3ab58 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3ab58 13e             | 
3ab58 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3ab5c 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3ab60 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3ab64 141 D0 DF B7 F9 |                             setd    a, #id0
3ab68 142 D8 DF BF F9 |                             sets    a, #addr1
3ab6c 143 FE FF FF FF 
3ab70 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3ab74 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3ab78 146 3F DE A7 F9 |                             alti    a, #%111_111 
3ab7c 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3ab80 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3ab84 149 01 E2 63 FD |                             cogid   c
3ab88 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3ab8c 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3ab90 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3ab94 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3ab98 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3ab9c 14f 00 E0 03 F6 |                             mov     b, 0-0
3aba0 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3aba4 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3aba8 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3abac 153 0C 00 90 AD |             if_z            jmp     #excluded               
3abb0 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3abb4 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3abb8 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3abbc 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3abc0 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3abc4 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3abc8 15a             | 
3abc8 15a             | 'determine priority cogs and build instructions for the polling sequence
3abc8 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3abcc 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3abd0 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3abd4 15d             | 
3abd4 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3abd8 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3abdc 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3abe0 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3abe4 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3abe8 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3abec 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3abf0 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3abf4 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3abf8 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3abfc 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3ac00 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3ac04 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3ac08 16a             | endprioloop
3ac08 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3ac0c 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3ac10 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3ac14 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3ac18 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3ac1c 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3ac20 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3ac24 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3ac28 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3ac2c 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3ac30 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3ac34 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3ac38 176             | 
3ac38 176             | ' populate the round robin COG polling instructions
3ac38 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3ac3c 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3ac40 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3ac44 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3ac48 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3ac4c 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3ac50 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3ac54 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3ac58 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3ac5c 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3ac60 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3ac64 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3ac68 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3ac6c 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3ac70 184             | '..................................................................................................
3ac70 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3ac70 184             | 
3ac70 184             | set_latency                                                 '            (a) set latency
3ac70 184             | get_latency                                                 '            (b) get latency
3ac70 184             | set_burst                                                   '            (c) set burst size of bank
3ac70 184             | get_burst                                                   '            (d) get burst size of bank
3ac70 184             |                                                             '            (e) dump state
3ac70 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3ac74 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3ac78 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3ac7c 187             |                                                             ' | | | | e  account for following AUGS
3ac7c 187 04 00 00 FF 
3ac80 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3ac84 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3ac88 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3ac8c 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3ac90 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3ac94 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3ac98 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3ac9c 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3aca0 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3aca4 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3aca8 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3acac 193             | 
3acac 193             | '..................................................................................................
3acac 193             | ' Misc EXECF code
3acac 193             | 
3acac 193 33 72 63 FD | start_read_exec             execf   newburstr
3acb0 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3acb4 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3acb8 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3acbc 197             | 
3acbc 197             | '..................................................................................................
3acbc 197             | ' Variables
3acbc 197             | 
3acbc 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3acc0 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3acc4 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3acc8 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3accc 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3acd0 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3acd4 19d             | 
3acd4 19d 00 00 00 80 | xfreq1          long    $80000000
3acd8 19e 00 00 00 40 | xfreq2          long    $40000000
3acdc 19f 03 00 00 00 | delay           long    3
3ace0 1a0             | 
3ace0 1a0             | lutcodeaddr                 
3ace0 1a0             | startupparams
3ace0 1a0             | excludedcogs                                    'careful: shared register use!
3ace0 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3ace4 1a1 00 00 00 00 | flags           long    0
3ace8 1a2             | mask                                            'careful: shared register use!
3ace8 1a2 00 00 00 00 | resetmaskA      long    0
3acec 1a3             | limit                                           'careful: shared register use!
3acec 1a3 00 00 00 00 | resetmaskB      long    0
3acf0 1a4 00 00 00 00 | datapins        long    0
3acf4 1a5             | const512                                        'careful: shared register use!
3acf4 1a5 00 00 00 00 | devicelist      long    0
3acf8 1a6 00 00 00 00 | coglist         long    0
3acfc 1a7 00 00 00 00 | mbox            long    0 
3ad00 1a8             | 
3ad00 1a8             | clkpin                                          'shared with code patched during init
3ad00 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3ad04 1a9             | cspin                                           'shared with code patched during init
3ad04 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3ad08 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3ad0c 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3ad10 1ac 01 00 00 00 | clkdelay        long    1
3ad14 1ad 00 00 00 00 | regdatabus      long    0
3ad18 1ae             | 
3ad18 1ae 10 00 00 00 | deviceaddr      long    $10
3ad1c 1af             | rrcounter
3ad1c 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3ad20 1b0             | 
3ad20 1b0             | ' jump addresses for the per COG handlers
3ad20 1b0 20 00 00 00 | cog0_handler    long    cog0
3ad24 1b1 2C 00 00 00 | cog1_handler    long    cog1
3ad28 1b2 38 00 00 00 | cog2_handler    long    cog2
3ad2c 1b3 44 00 00 00 | cog3_handler    long    cog3
3ad30 1b4 50 00 00 00 | cog4_handler    long    cog4
3ad34 1b5 5C 00 00 00 | cog5_handler    long    cog5
3ad38 1b6 68 00 00 00 | cog6_handler    long    cog6
3ad3c 1b7 74 00 00 00 | cog7_handler    long    cog7
3ad40 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3ad44 1b9             | 
3ad44 1b9             | ' EXECF sequences
3ad44 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3ad48 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3ad4c 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3ad50 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3ad54 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3ad58 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3ad5c 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3ad60 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3ad60 1c0             | 
3ad60 1c0             | 
3ad60 1c0             | ' SKIPF sequences
3ad60 1c0             | skiptable
3ad60 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3ad64 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3ad68 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3ad6c 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3ad70 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3ad74 1c5 00 00 00 00 | pattern2        long    0
3ad78 1c6 00 00 00 00 | pattern3        long    0
3ad7c 1c7 77 02 00 00 | singlelong      long    %1001110111  
3ad80 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3ad84 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3ad88 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3ad8c 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3ad90 1cc             | 
3ad90 1cc             | ' LUT RAM address values
3ad90 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3ad94 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3ad98 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3ad9c 1cf F6 02 00 00 | noread          long    noread_lut
3ada0 1d0             | 
3ada0 1d0 00 00 00 00 | id0             long    0
3ada4 1d1 01 00 00 00 | id1             long    1
3ada8 1d2 02 00 00 00 | id2             long    2
3adac 1d3 03 00 00 00 | id3             long    3
3adb0 1d4 04 00 00 00 | id4             long    4
3adb4 1d5 05 00 00 00 | id5             long    5
3adb8 1d6 06 00 00 00 | id6             long    6
3adbc 1d7 07 00 00 00 | id7             long    7
3adc0 1d8             | 
3adc0 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3adc0 1d8             | 'and COG updates and need to follow immediately after id0-id7
3adc0 1d8 00 00 00 00 | addr1           long    0
3adc4 1d9 00 00 00 00 | hubdata         long    0
3adc8 1da 00 00 00 00 | count           long    0
3adcc 1db 00 00 00 00 | addr2           long    0
3add0 1dc 00 00 00 00 | total           long    0
3add4 1dd 00 00 00 00 | offset1         long    0
3add8 1de 00 00 00 00 | offset2         long    0
3addc 1df 00 00 00 00 | link            long    0
3ade0 1e0             | 
3ade0 1e0             | burstwrite                                      'note shared register use during init
3ade0 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3ade4 1e1 00 00 00 00 | id              long    0
3ade8 1e2             | 
3ade8 1e2 00 00 00 00 | header          long    0
3adec 1e3 00 00 00 00 | trailer         long    0
3adf0 1e4 00 00 00 00 | cmdaddr         long    0
3adf4 1e5 00 00 00 00 | request         long    0
3adf8 1e6 00 00 00 00 | rrlimit         long    0
3adfc 1e7 00 00 00 00 | pinconfig       long    0
3ae00 1e8 00 00 00 00 | clks            long    0
3ae04 1e9 00 00 00 00 | resume          long    0
3ae08 1ea 00 00 00 00 | orighubsize     long    0
3ae0c 1eb 00 00 00 00 | wrclks          long    0
3ae10 1ec             | 
3ae10 1ec 00 00 00 00 | pattern         long    0
3ae14 1ed 00 00 00 00 | hubscratch      long    0
3ae18 1ee 00 10 00 00 | val4k           long    4096
3ae1c 1ef             | 
3ae1c 1ef             | ' temporary general purpose regs
3ae1c 1ef 00 00 00 00 | a               long    0
3ae20 1f0 00 00 00 00 | b               long    0
3ae24 1f1 00 00 00 00 | c               long    0
3ae28 1f2 00 00 00 00 | d               long    0
3ae2c 1f3             | 
3ae2c 1f3             |                 fit     502
3ae2c 1f3             |                 fit     502
3ae2c 1f3             | 
3ae2c 1f3             | '..................................................................................................
3ae2c 1f3             | 
3ae2c 1f3             |             orgh
3ae2c                 | 
3ae2c                 | lut_code
3ae2c                 | 'HW init code up to 80 longs
3ae2c                 | 
3ae2c                 | '..................................................................................................
3ae2c                 | ' Memory layout for LUT RAM once operational:
3ae2c                 | '
3ae2c                 | '  LUT RAM address      Usage
3ae2c                 | '  ---------------      ----
3ae2c                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3ae2c                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3ae2c                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3ae2c                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3ae2c                 | '
3ae2c                 | ' Also during driver COG startup:
3ae2c                 | ' $230-$24F is used for HW init setup
3ae2c                 | ' $250-$26F is used as temporary vector storage 
3ae2c                 | '..................................................................................................
3ae2c                 | 
3ae2c                 |                 org $230    
3ae2c 230             | 
3ae2c 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3ae2c 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3ae30 231 24 16 60 FD |                             pollxfi
3ae34 232 FF AA 2A FF 
3ae38 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3ae3c 234 28 00 B0 FD |                             call    #sendqspi
3ae40 235 07 F8 07 FF 
3ae44 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3ae48 237 28 00 B0 FD |                             call    #sendspi
3ae4c 238 F8 07 78 FF 
3ae50 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3ae54 23a 1C 00 B0 FD |                             call    #sendspi
3ae58 23b 7F 78 78 FF 
3ae5c 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3ae60 23d 10 00 B0 FD |                             call    #sendspi 
3ae64 23e 2D 00 64 FD |                             ret
3ae68 23f             | 
3ae68 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3ae6c 240 32 0C 64 FD |                             skipf   #%110
3ae70 241 9C EF 03 F6 |                             mov     pb, xsendimm
3ae74 242             | 
3ae74 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3ae78 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3ae7c 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3ae80 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3ae84 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3ae88 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3ae8c 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3ae90 249 50 48 63 FD |                             fltl    datapins                'float data bus
3ae94 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3ae98 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3ae9c 24c             | 
3ae9c 24c 00 00 00 00 
3aea0 24d 00 00 00 00 
3aea4 24e 00 00 00 00 
3aea8 24f 00 00 00 00 |                 long    0[$270-32-$]
3aeac 250             |     
3aeac 250             |                 fit     $270-32  ' keep room for 32 vector longs
3aeac 250             |                 fit     $270-32  ' keep room for 32 vector longs
3aeac 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3aeac 250             | rw_vect ' PSRAM jump vectors
3aeac 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3aeb0 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3aeb4 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3aeb8 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3aebc 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3aec0 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3aec4 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3aec8 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3aecc 258             | ro_vect ' R/O PSRAM jump vectors
3aecc 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3aed0 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3aed4 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3aed8 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3aedc 25c 00 01 00 00 |                 long    unsupported
3aee0 25d 00 01 00 00 |                 long    unsupported
3aee4 25e 00 01 00 00 |                 long    unsupported
3aee8 25f 00 01 00 00 |                 long    unsupported
3aeec 260             | ctrl_vect ' Control jump vectors
3aeec 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3aef0 261 00 01 00 00 |                 long    unsupported
3aef4 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3aef8 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3aefc 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3af00 265 00 01 00 00 |                 long    unsupported
3af04 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3af08 267 3E 01 00 00 |                 long    reconfig 
3af0c 268             | no_vect ' Invalid bank jump vectors
3af0c 268 01 01 00 00 |                 long    invalidbank
3af10 269 01 01 00 00 |                 long    invalidbank
3af14 26a 01 01 00 00 |                 long    invalidbank
3af18 26b 01 01 00 00 |                 long    invalidbank
3af1c 26c 01 01 00 00 |                 long    invalidbank
3af20 26d 01 01 00 00 |                 long    invalidbank
3af24 26e 01 01 00 00 |                 long    invalidbank
3af28 26f 01 01 00 00 |                 long    invalidbank
3af2c 270             | 
3af2c 270             |                 fit     $270
3af2c 270             |                 fit     $270
3af2c 270             | '..................................................................................................
3af2c 270             | ' PSRAM READS
3af2c 270             |                                                             ' a b c d e f
3af2c 270             |                                                             ' B W L B R L  (a) byte read
3af2c 270             |                                                             ' Y O O U E O  (b) word read
3af2c 270             |                                                             ' T R N R S C  (c) long read
3af2c 270             |                                                             ' E D G S U K  (d) new burst read
3af2c 270             |                                                             '       T M E  (e) resumed sub-burst
3af2c 270             |                                                             '         E D  (f) locked sub-burst
3af2c 270             | 
3af2c 270             | 
3af2c 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3af30 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3af34 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3af38 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3af3c 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3af40 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3af44 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3af48 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3af4c 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3af50 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3af54 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3af58 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3af5c 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3af60 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3af64 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3af68 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3af6c 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3af70 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3af74 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3af78 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3af7c 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3af80 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3af84 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3af88 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3af8c 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3af90 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3af94 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3af98 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3af9c 28c             | 
3af9c 28c             |                             ' fall through to read bursts
3af9c 28c             |                         
3af9c 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3af9c 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3afa0 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3afa4 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3afa8 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3afac 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3afb0 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3afb4 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3afb8 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3afbc 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3afc0 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3afc4 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3afc8 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3afcc 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3afd0 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3afd4 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3afd8 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3afdc 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3afe0 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3afe4 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3afe8 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3afec 2a0 E8 D1 03 F1 |                             add     clks, clks
3aff0 2a1             | readcommon
3aff0 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3aff4 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3aff8 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3affc 2a4             | 
3affc 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3b000 2a5 69 C8 63 FD |                             rev     cmdaddr
3b004 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3b008 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3b00c 2a8             | 
3b00c 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3b010 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3b014 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3b014 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3b018 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3b01c 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3b020 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3b024 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3b024 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3b028 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3b02c 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3b030 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3b034 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3b038 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3b03c 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3b03c 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3b040 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3b044 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3b048 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3b04c 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3b050 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3b054 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3b058 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3b05c 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3b060 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3b064 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3b068 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3b06c 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3b070 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3b074 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3b074 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3b078 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3b07c 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3b080 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3b084 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3b088 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3b08c 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3b090 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3b094 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3b098 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3b09c 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3b0a0 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3b0a4 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3b0a8 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3b0ac 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3b0b0 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3b0b4 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3b0b8 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3b0bc 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3b0c0 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3b0c4 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3b0c8 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3b0cc 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3b0d0 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3b0d4 2da 10 03 90 FD |                             jmp     #writecommon
3b0d8 2db             | 
3b0d8 2db             | '..................................................................................................
3b0d8 2db             | ' Burst continuation testing
3b0d8 2db             | 
3b0d8 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3b0dc 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3b0e0 2dd             | continue_read_lut          
3b0e0 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3b0e4 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3b0e8 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3b0ec 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3b0f0 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3b0f4 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3b0f8 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3b0fc 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3b100 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3b104 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3b108 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3b10c 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3b110 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3b114 2ea             | 
3b114 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3b118 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3b11c 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3b120 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3b124 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3b128 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3b12c 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3b130 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3b134 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3b138 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3b13c 2f4 2A 1C 66 0D |             _ret_           push    #poller
3b140 2f5             | 
3b140 2f5             | 
3b140 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3b144 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3b144 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3b148 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3b14c 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3b150 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3b154 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3b158 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3b15c 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3b160 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3b164 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3b168 2ff             | '..................................................................................................
3b168 2ff             | ' Completion of requests
3b168 2ff             | 
3b168 2ff             | complete_rw_lut             
3b168 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3b16c 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3b170 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3b174 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3b178 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3b17c 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3b180 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3b184 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3b188 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3b18c 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3b190 309 32 62 64 AD |             if_z            skipf   #%110001
3b194 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3b198 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3b19c 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3b1a0 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3b1a4 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3b1a8 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3b1ac 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3b1b0 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3b1b4 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3b1b8 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3b1bc 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3b1c0 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3b1c4 316             |                                                             ' skipcase (a) gfx copy to/from hub
3b1c4 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3b1c4 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3b1c4 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3b1c8 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3b1cc 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3b1d0 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3b1d4 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3b1d8 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3b1dc 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3b1e0 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3b1e4 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3b1e8 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3b1ec 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3b1f0 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3b1f4 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3b1f8 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3b1fc 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3b200 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3b204 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3b208 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3b20c 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3b210 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3b214 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3b218 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3b21c 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3b220 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3b224 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3b228 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3b22c 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3b230 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3b234 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3b238 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3b23c 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3b240 335 DF B7 03 A6 |             if_z            mov     addr2, link
3b244 336 34 FF 9F AD |             if_z            jmp     #checknext
3b248 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3b24c 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3b250 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3b254 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3b258 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3b25c 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3b260 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3b264 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3b268 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3b26c 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3b270 341             | 
3b270 341             | '..................................................................................................
3b270 341             | ' PSRAM WRITES
3b270 341             |                                                             '  a b c d e f g h
3b270 341             | 
3b270 341             |                                                             '  B W L F B R L L (a) byte write(s)
3b270 341             |                                                             '  Y O O I U E O O (b) word write(s)
3b270 341             |                                                             '  T R N L R S C C (c) long write(s)
3b270 341             |                                                             '  E D G L S U K K (d) resumed fill
3b270 341             |                                                             '          T M E E (e) new burst write
3b270 341             |                                                             '            E D D (f) resumed burst
3b270 341             |                                                             '              F B (g) locked fill
3b270 341             |                                                             '              I U (h) locked burst write
3b270 341             |                                                             '              L R 
3b270 341             |                                                             '              L S 
3b270 341             |                                                             '                T 
3b270 341             | 
3b270 341             | w_single                   
3b270 341             | w_fill_cont           
3b270 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3b274 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3b278 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3b27c 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3b280 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3b284 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3b288 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3b28c 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3b290 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3b294 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3b298 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3b29c 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3b2a0 34d             |                ' disable call to r_resume_burst for single longs when z=0
3b2a0 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3b2a4 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3b2a8 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3b2ac 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3b2b0 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3b2b4 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3b2b8 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3b2bc 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3b2c0 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3b2c4 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3b2c8 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3b2cc 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3b2d0 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3b2d4 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3b2d8 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3b2dc 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3b2e0 35d             |         
3b2e0 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3b2e0 35d             |             '
3b2e0 35d             |             '  At least one of these 3 optional components will be sent
3b2e0 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3b2e0 35d             |             '     body - N x full longs of data
3b2e0 35d             |             '     trailer - last partial long of data
3b2e0 35d             |             '
3b2e0 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3b2e0 35d             |             '
3b2e0 35d             |             'Case    Type                           Sends
3b2e0 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3b2e0 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3b2e0 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3b2e0 35d             |             ' 4)     Multiple long fill             body only
3b2e0 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3b2e0 35d             | 
3b2e0 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3b2e0 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3b2e4 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3b2e8 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3b2ec 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3b2f0 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3b2f4 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3b2f8 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3b2fc 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3b300 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3b304 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3b308 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3b30c 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3b310 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3b314 36a             |                             
3b314 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3b318 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3b31c 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3b320 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3b324 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3b328 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3b32c 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3b330 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3b334 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3b338 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3b33c 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3b340 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3b344 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3b348 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3b34c 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3b350 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3b354 37a             | 
3b354 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3b358 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3b35c 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3b360 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3b364 37e             |                  
3b364 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3b368 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3b36c 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3b370 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3b374 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3b378 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3b37c 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3b380 385             | 
3b380 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3b384 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3b388 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3b38c 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3b390 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3b394 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3b398 38b             | 
3b398 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3b398 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3b39c 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3b3a0 38d 2A B0 63 FD |                             push    addr1                   'save address
3b3a4 38e             | 
3b3a4 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3b3a4 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3b3a8 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3b3ac 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3b3b0 391             |             
3b3b0 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3b3b4 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3b3b8 393 2B B0 63 FD |                             pop     addr1                   'restore address
3b3bc 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3b3c0 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3b3c4 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3b3c8 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3b3cc 398             | 
3b3cc 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3b3d0 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3b3d4 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3b3d8 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3b3dc 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3b3e0 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3b3e4 39e             | 
3b3e4 39e             |                             'trailer is done
3b3e4 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3b3e8 39f             | 
3b3e8 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3b3ec 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3b3f0 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3b3f4 3a2             | 
3b3f4 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3b3f8 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3b3fc 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3b400 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3b404 3a6             |                             
3b404 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3b408 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3b40c 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3b410 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3b414 3aa             |                                                          
3b414 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3b418 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3b41c 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3b420 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3b424 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3b428 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3b42c 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3b430 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3b434 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3b438 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3b43c 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3b440 3b5             |  
3b440 3b5 59 52 63 FD |                             drvh    cspin
3b444 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3b448 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3b44c 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3b450 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3b454 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3b458 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3b45c 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3b460 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3b464 3be EA E5 03 F6 |                             mov     d, orighubsize
3b468 3bf EF E5 63 F0 |                             shl     d, a
3b46c 3c0 F2 E3 83 F1 |                             sub     c, d
3b470 3c1 DD E3 03 F1 |                             add     c, offset1
3b474 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3b478 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3b47c 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3b480 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3b484 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3b488 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3b48c 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3b490 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3b494 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3b498 3cb BB D3 03 F6 |                             mov     resume, restorefill
3b49c 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3b4a0 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3b4a4 3ce 6C FC BF CD |             if_c            call    #yield
3b4a8 3cf 2D 00 64 FD |                             ret
3b4ac 3d0             |                            
3b4ac 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3b4ac 3d0             |                       '     rczl    pa                      'rotate left into address offset
3b4ac 3d0             |                       '     rczl    c wcz                   'restore count and flags
3b4ac 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3b4b0 3d1 02 EC 67 F0 |                             shl     pa, #2
3b4b4 3d2 28 06 64 AD |             if_z            setq    #3
3b4b8 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3b4bc 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3b4c0 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3b4c4 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3b4c8 3d7             | 
3b4c8 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3b4cc 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3b4d0 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3b4d4 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3b4d8 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3b4dc 3dc             |         
3b4dc 3dc             | 
3b4dc 3dc             | '..................................................................................................
3b4dc 3dc             | 
3b4dc 3dc             |                 fit 1024-32
3b4dc 3dc             |                 fit 1024-32
3b4dc 3dc 00 00 00 00 
3b4e0 3dd 00 00 00 00 
3b4e4 3de 00 00 00 00 
3b4e8 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3b4ec 3e0             |                 org 1024-32
3b4ec 000             | 
3b4ec 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3b4ec 000 00 00 00 00 |                 long $0000
3b4f0 001 11 11 00 00 |                 long $1111
3b4f4 002 22 22 00 00 |                 long $2222
3b4f8 003 33 33 00 00 |                 long $3333
3b4fc 004 44 44 00 00 |                 long $4444
3b500 005 55 55 00 00 |                 long $5555
3b504 006 66 66 00 00 |                 long $6666
3b508 007 77 77 00 00 |                 long $7777
3b50c 008 88 88 00 00 |                 long $8888
3b510 009 99 99 00 00 |                 long $9999
3b514 00a AA AA 00 00 |                 long $aaaa
3b518 00b BB BB 00 00 |                 long $bbbb
3b51c 00c CC CC 00 00 |                 long $cccc
3b520 00d DD DD 00 00 |                 long $dddd
3b524 00e EE EE 00 00 |                 long $eeee
3b528 00f FF FF 00 00 |                 long $ffff
3b52c 010             | 
3b52c 010             | 'masks
3b52c 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3b530 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3b534 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3b538 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3b53c 014             | 
3b53c 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3b540 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3b544 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3b548 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3b54c 018             | 
3b54c 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3b550 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3b554 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3b558 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3b55c 01c             | 
3b55c 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3b560 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3b564 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3b568 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3b56c 020             | 
3b56c 020             |         fit 1024
3b56c 020             |         fit 1024
3b56c 020             | 
3b56c 020             | '--------------------------------------------------------------------------------------------------
3b56c 020             |         orgh
3b56c                 | 
3b56c                 | gfxexpansion
3b56c                 |                             'simple line drawing graphics expansion of memory driver
3b56c                 |                             'jmp     #donerepeats                'just return for now
3b56c                 | 
3b56c     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3b570     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3b574     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3b578     DD E1 03 F6 |                             mov     b, offset1              'get error term
3b57c     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3b580     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3b584     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3b588     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3b58c     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3b590     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3b594     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3b598     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3b59c     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3b5a0     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3b5a4     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3b5a8     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3b5ac     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3b5b0     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3b5b4     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3b5b8     DC E5 33 F9 |                             getword d, total, #0            'get line width
3b5bc     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3b5c0     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3b5c4     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3b5c8     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3b5cc     C3 03 80 FD |                             jmp     #readmask               'continue filling
3b5d0                 | 	alignl
3b5d0                 | _usbnew_spin2_dat_
3b5d0                 |                 org     $000
3b5d0 000             | 
3b5d0 000             | usb_host_start
3b5d0 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3b5d4 001             | 
3b5d4 001 03 00 00 FF 
3b5d8 002 D0 72 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3b5dc 003 02 72 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3b5e0 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3b5e4 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3b5e8 006 29 72 63 FD |                 setq2   htmp
3b5ec 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3b5f0 008             | 
3b5f0 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3b5f4 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3b5f8 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3b5fc 00b             | 
3b5fc 00b             | '------------------------------------------------------------------------------
3b5fc 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3b5fc 00b             | ' special because the receiving function must not respond with either STALL or
3b5fc 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3b5fc 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3b5fc 00b             | ' corrupt packet, it must ignore the transaction
3b5fc 00b             | '------------------------------------------------------------------------------
3b5fc 00b             | ' On entry:
3b5fc 00b             | '   PTRA - start address of the SETUP data struct.
3b5fc 00b             | ' On exit:
3b5fc 00b             | '   retval - PID_ACK on success, otherwise error code.
3b5fc 00b             | '------------------------------------------------------------------------------
3b5fc 00b             | txn_setup
3b5fc 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3b600 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3b604 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3b608 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3b60c 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3b610 010             | .setup
3b610 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3b614 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b618 012 2D 00 64 AD |         if_z    ret
3b61c 013 7C 0B B0 FD |                 call    #retry_wait
3b620 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3b624 015 2D 00 64 AD |         if_z    ret
3b628 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3b62c 017 E0 FF 9F FD |                 jmp     #.setup
3b630 018             | 
3b630 018             | '------------------------------------------------------------------------------
3b630 018             | ' IN/INTERRUPT transaction.
3b630 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3b630 018             | '------------------------------------------------------------------------------
3b630 018             | ' On entry:
3b630 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3b630 018             | '     CRC(b19..23).
3b630 018             | ' On exit:
3b630 018             | '------------------------------------------------------------------------------
3b630 018             | txn_in
3b630 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3b634 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3b638 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3b63c 01b             | 
3b63c 01b             |                 ' Fall through to urx_packet
3b63c 01b             | 
3b63c 01b             | '------------------------------------------------------------------------------
3b63c 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3b63c 01b             | ' received are handshakes and IN DATAx.
3b63c 01b             | '------------------------------------------------------------------------------
3b63c 01b             | ' On entry:
3b63c 01b             | ' On exit:
3b63c 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3b63c 01b             | '     returned.
3b63c 01b             | '------------------------------------------------------------------------------
3b63c 01b             | urx_packet
3b63c 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3b640 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b644 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3b648 01e 1A 94 63 FD |                 getct   hct2
3b64c 01f 4E 95 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3b650 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3b654 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3b658 022             | .wait_sop
3b658 022 22 A7 8A FA |                 rdpin   urx, dm
3b65c 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b660 024 08 00 90 CD |         if_c    jmp     #.get_pid
3b664 025 FC 25 CC FB |                 jnct2   #.wait_sop
3b668 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3b66c 027             | .get_pid
3b66c 027 28 02 B0 FD |                 call    #urx_next
3b670 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3b674 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3b678 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3b67c 02b             | .chk_pid
3b67c 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b680 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3b684 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3b688 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3b68c 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3b690 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3b694 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3b698 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3b69c 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3b6a0 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3b6a4 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3b6a8 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3b6ac 037             | .ack_resend
3b6ac 037 22 A7 82 FA |                 rqpin   urx, dm
3b6b0 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3b6b4 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3b6b8 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3b6bc 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3b6c0 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3b6c4 03d             | .chk_eop
3b6c4 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3b6c8 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3b6cc 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3b6d0 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3b6d4 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3b6d8 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3b6dc 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3b6e0 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3b6e4 045 2D 00 64 FD |                 ret
3b6e8 046             | .idle
3b6e8 046 22 A7 82 FA |                 rqpin   urx, dm
3b6ec 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3b6f0 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3b6f4 049 2D 00 64 FD |                 ret
3b6f8 04a             | 
3b6f8 04a             | '------------------------------------------------------------------------------
3b6f8 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3b6f8 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3b6f8 04a             | ' if one is required.
3b6f8 04a             | '------------------------------------------------------------------------------
3b6f8 04a             | ' On entry:
3b6f8 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3b6f8 04a             | ' On exit:
3b6f8 04a             | '------------------------------------------------------------------------------
3b6f8 04a             | utx_token
3b6f8 04a 22 A7 82 FA |                 rqpin   urx, dm
3b6fc 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3b700 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3b704 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3b708 04e 34 0D B0 CD |         if_c    call    #utx_pre
3b70c 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3b710 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3b714 051 5E 73 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3b718 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3b71c 053             | .next_byte
3b71c 053 B9 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3b720 054 08 72 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3b724 055             | .wait
3b724 055 40 46 72 FD |                 testp   dp                      wc
3b728 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3b72c 057 23 03 08 FC |                 akpin   dp
3b730 058 22 A5 22 FC |                 wypin   utx, dm
3b734 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3b738 05a             | 
3b738 05a             | '------------------------------------------------------------------------------
3b738 05a             | ' SETUP/OUT/INTERRUPT transaction.
3b738 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3b738 05a             | '------------------------------------------------------------------------------
3b738 05a             | ' On entry:
3b738 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3b738 05a             | '     CRC(b19..23).
3b738 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3b738 05a             | '   pkt_data - count of DATAx payload bytes to send.
3b738 05a             | ' On exit:
3b738 05a             | '------------------------------------------------------------------------------
3b738 05a             | txn_out
3b738 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3b73c 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3b740 05c 00 00 C0 FF 
3b744 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3b748 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3b74c 05f             | 
3b74c 05f             |                 ' Fall through to utx_data
3b74c 05f             | 
3b74c 05f             | '------------------------------------------------------------------------------
3b74c 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3b74c 05f             | ' calculated while the data byte is being shifted out. Since data stage
3b74c 05f             | ' success/fail is not determined until the status stage of the transaction,
3b74c 05f             | ' this routine is only concerned about the current DATAx packet.
3b74c 05f             | '------------------------------------------------------------------------------
3b74c 05f             | ' On entry:
3b74c 05f             | '   PTRA - hub start address of the data to read.
3b74c 05f             | '   pkt_cnt - data payload size.
3b74c 05f             | ' On exit:
3b74c 05f             | '------------------------------------------------------------------------------
3b74c 05f             | utx_data
3b74c 05f 22 A7 82 FA |                 rqpin   urx, dm
3b750 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b754 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3b758 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3b75c 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3b760 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3b764 065 D8 0C B0 CD |         if_c    call    #utx_pre
3b768 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3b76c 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3b770 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3b774 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3b778 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3b77c 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3b780 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3b784 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3b788 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3b78c 06f             | .read_byte
3b78c 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3b790 070 F0 00 B0 FD |                 call    #utx_byte
3b794 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3b798 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3b79c 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3b7a0 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3b7a4 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3b7a8 076             | .send_crc
3b7a8 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3b7ac 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3b7b0 078 D0 00 B0 FD |                 call    #utx_byte
3b7b4 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3b7b8 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3b7bc 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3b7c0 07c             | 
3b7c0 07c             | '------------------------------------------------------------------------------
3b7c0 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3b7c0 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3b7c0 07c             | ' expects that the packet includes at least the CRC word.
3b7c0 07c             | '
3b7c0 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3b7c0 07c             | ' was requested, which makes it difficult to determine where the data stops
3b7c0 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3b7c0 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3b7c0 07c             | ' USB-16 expected residual value of 0xB001.
3b7c0 07c             | '
3b7c0 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3b7c0 07c             | ' so the caller can verify IN success before writing the data to its final
3b7c0 07c             | ' destination.
3b7c0 07c             | '------------------------------------------------------------------------------
3b7c0 07c             | ' On entry:
3b7c0 07c             | '   pkt_data - max byte count expected to be in the packet.
3b7c0 07c             | '   newb_flg - signals new byte ready when toggled.
3b7c0 07c             | ' On exit:
3b7c0 07c             | '   pkt_cnt - actual number of bytes read.
3b7c0 07c             | '------------------------------------------------------------------------------
3b7c0 07c             | urx_data
3b7c0 07c F7 77 03 F6 |                 mov     htmp2, pb
3b7c4 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3b7c8 07e 00 00 C0 FF 
3b7cc 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3b7d0 080 BB EF 03 F6 |                 mov     pb, htmp2
3b7d4 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3b7d8 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3b7dc 083 58 85 03 F6 |                 mov     pkt_tmp, pkt_data
3b7e0 084 02 84 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3b7e4 085             | .wait_byte
3b7e4 085             | ' In-line rx for max speed
3b7e4 085 22 A7 82 FA |                 rqpin   urx, dm
3b7e8 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3b7ec 087 53 A5 02 F5 |                 and     utx, urx
3b7f0 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3b7f4 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3b7f8 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3b7fc 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3b800 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3b804 08d DC FF 9F FD |                 jmp     #.wait_byte
3b808 08e             | .get_byte
3b808 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3b80c 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3b810 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3b814 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3b818 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3b81c 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3b820 094             | .end_crc
3b820 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3b824 095 C2 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3b828 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3b82c 097 2D 00 64 1D |         if_a    ret
3b830 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3b830 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3b830 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3b830 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3b830 098 22 A7 82 FA |                 rqpin   urx, dm
3b834 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3b838 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3b83c 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3b83c 09b             | .chk_crc
3b83c 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3b840 09c 58 00 00 FF 
3b844 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3b848 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3b84c 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3b850 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3b854 0a1 34 09 B0 FD |                 call    #poll_waitx
3b858 0a2             | 
3b858 0a2             |                 ' Fall through to utx_handshake
3b858 0a2             | 
3b858 0a2             | '------------------------------------------------------------------------------
3b858 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3b858 0a2             | ' the appropriate IP delay has been inserted.
3b858 0a2             | '------------------------------------------------------------------------------
3b858 0a2             | ' On entry:
3b858 0a2             | '   retval - handshake PID to send.
3b858 0a2             | ' On exit:
3b858 0a2             | '   retval unchanged.
3b858 0a2             | '------------------------------------------------------------------------------
3b858 0a2             | utx_handshake
3b858 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3b85c 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3b860 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3b864 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3b868 0a6 5F A5 02 F6 |                 mov     utx, retval
3b86c 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3b870 0a8             | .idle
3b870 0a8 22 A7 82 FA |                 rqpin   urx, dm
3b874 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3b878 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3b87c 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3b880 0ac 08 09 90 FD |                 jmp     #poll_waitx
3b884 0ad             | 
3b884 0ad             | '------------------------------------------------------------------------------
3b884 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3b884 0ad             | '------------------------------------------------------------------------------
3b884 0ad             | ' On entry:
3b884 0ad             | '   utx - byte to transmit.
3b884 0ad             | ' On exit:
3b884 0ad             | '------------------------------------------------------------------------------
3b884 0ad             | utx_byte
3b884 0ad 40 46 72 FD |                 testp   dp                      wc
3b888 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3b88c 0af 23 03 08 FC |                 akpin   dp
3b890 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3b894 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3b898 0b2             | 
3b898 0b2             | '------------------------------------------------------------------------------
3b898 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3b898 0b2             | '------------------------------------------------------------------------------
3b898 0b2             | ' On entry:
3b898 0b2             | ' On exit:
3b898 0b2             | '   retval - the byte read.
3b898 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3b898 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3b898 0b2             | '     received.
3b898 0b2             | '------------------------------------------------------------------------------
3b898 0b2             | urx_next
3b898 0b2 22 A7 8A FA |                 rdpin   urx, dm
3b89c 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3b8a0 0b4 53 A5 02 F5 |                 and     utx, urx
3b8a4 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3b8a8 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3b8ac 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3b8b0 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3b8b4 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b8b8 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3b8bc 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3b8c0 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3b8c4 0bd 2D 00 64 FD |                 ret
3b8c8 0be             | 
3b8c8 0be             | '------------------------------------------------------------------------------
3b8c8 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3b8c8 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3b8c8 0be             | ' length, and the PID is not included in the CRC calculation:
3b8c8 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3b8c8 0be             | '  CRC5  ENDP ADDRESS PID
3b8c8 0be             | ' %00000_1111_1111111_xxxxxxxx
3b8c8 0be             | '------------------------------------------------------------------------------
3b8c8 0be             | ' On entry:
3b8c8 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3b8c8 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3b8c8 0be             | ' On exit:
3b8c8 0be             | '   ep_addr_pid - CRC value appended to the packet.
3b8c8 0be             | '------------------------------------------------------------------------------
3b8c8 0be             | calc_crc5
3b8c8 0be FF 03 00 FF 
3b8cc 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3b8d0 0c0 5E 73 03 F6 |                 mov     htmp, ep_addr_pid
3b8d4 0c1 08 72 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3b8d8 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3b8dc 0c3 69 72 63 FD |                 rev     htmp                            ' Input data reflected
3b8e0 0c4 28 72 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3b8e4 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3b8e8 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3b8ec 0c7 09 72 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3b8f0 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3b8f4 0c9 01 72 77 F0 |                 shl     htmp, #1                wc
3b8f8 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3b8fc 0cb 01 72 77 F0 |                 shl     htmp, #1                wc
3b900 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3b904 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3b908 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3b90c 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3b910 0d0             | 
3b910 0d0             | '------------------------------------------------------------------------------
3b910 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3b910 0d0             | '------------------------------------------------------------------------------
3b910 0d0             | isr1_fsframe
3b910 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3b914 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3b918 0d2 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3b91c 0d3 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3b920 0d4             | .wait
3b920 0d4 40 46 72 FD |                 testp   dp                      wc
3b924 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3b928 0d6 23 03 08 FC |                 akpin   dp
3b92c 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3b930 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3b934 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3b938 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3b93c 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3b940 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3b944 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3b948 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3b94c 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3b950 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3b954 0e1 2C FF BF FD |                 call    #utx_byte
3b958 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3b95c 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3b960 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3b964 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3b968 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3b96c 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3b970 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3b974 0e9 5B A5 42 F5 |                 or      utx, icrc
3b978 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3b97c 0eb A4 83 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3b980 0ec 20 00 90 FD |                 jmp     #isr1_wait
3b984 0ed             | isr1_lsframe
3b984 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3b988 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3b98c 0ef B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3b990 0f0             | .wait
3b990 0f0 40 46 72 FD |                 testp   dp                      wc
3b994 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3b998 0f2 23 03 08 FC |                 akpin   dp
3b99c 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3b9a0 0f4 A3 83 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3b9a4 0f5             | isr1_wait
3b9a4 0f5 22 A5 82 FA |                 rqpin   utx, dm
3b9a8 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3b9ac 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3b9b0 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3b9b4 0f9 03 00 00 FF 
3b9b8 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3b9bc 0fb 1F 82 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3b9c0 0fc F5 FF 3B FB |                 reti1
3b9c4 0fd             | 
3b9c4 0fd             | '------------------------------------------------------------------------------
3b9c4 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3b9c4 0fd             | ' transaction will complete before the next frame is triggered.
3b9c4 0fd             | '------------------------------------------------------------------------------
3b9c4 0fd             | ' On entry:
3b9c4 0fd             | ' On exit:
3b9c4 0fd             | '------------------------------------------------------------------------------
3b9c4 0fd             | wait_txn_ok
3b9c4 0fd 1A 76 63 FD |                 getct   htmp2
3b9c8 0fe 49 77 83 F1 |                 sub     htmp2, iframe_ct_base
3b9cc 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3b9d0 100 A1 77 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3b9d4 101 A2 77 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3b9d8 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3b9dc 103 2D 00 64 FD |                 ret
3b9e0 104             | 
3b9e0 104             | '------------------------------------------------------------------------------
3b9e0 104             | ' A device connection was detected, or a bus reset was requested by the USB
3b9e0 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3b9e0 104             | ' and perform a reset sequence prior to device enumeration.
3b9e0 104             | '------------------------------------------------------------------------------
3b9e0 104             | dev_reset
3b9e0 104 22 A7 82 FA |                 rqpin   urx, dm
3b9e4 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3b9e8 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3b9ec 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3b9f0 108             | reset
3b9f0 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3b9f4 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3b9f8 10a 1F 5C 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3b9fc 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3ba00 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3ba04 10d 1A 92 62 FD |                 getct   iframe_ct_base
3ba08 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3ba0c 10f B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3ba10 110 59 73 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3ba14 111 24 72 07 F1 |                 add     htmp, #36
3ba18 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3ba1c 113             | .framewait
3ba1c 113 B9 B3 1A F2 |                 cmp     frame, htmp             wcz
3ba20 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3ba24 115 2D 00 64 FD |                 ret
3ba28 116             | 
3ba28 116             | '------------------------------------------------------------------------------
3ba28 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3ba28 116             | '------------------------------------------------------------------------------
3ba28 116             | ' On entry:
3ba28 116             | '   PTRA - source address.
3ba28 116             | '   PB - destination address.
3ba28 116             | '   hr0 - length of copy, in bytes.
3ba28 116             | ' On exit:
3ba28 116             | '------------------------------------------------------------------------------
3ba28 116             | hmemcpy
3ba28 116 61 73 C7 FA |                 rdbyte  htmp, ptra++
3ba2c 117 F7 73 43 FC |                 wrbyte  htmp, pb
3ba30 118 01 EE 07 F1 |                 add     pb, #1
3ba34 119 FC 87 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3ba38 11a             | 
3ba38 11a             | '------------------------------------------------------------------------------
3ba38 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3ba38 11a             | ' loop until the errant device is disconnected.
3ba38 11a             | '------------------------------------------------------------------------------
3ba38 11a             | ' On entry:
3ba38 11a             | ' On exit:
3ba38 11a             | '------------------------------------------------------------------------------
3ba38 11a             | host_error
3ba38 11a             |           if ERROR_LED >= 0
3ba38 11a             |           end
3ba38 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3ba3c 11b             | 
3ba3c 11b             | '------------------------------------------------------------------------------
3ba3c 11b             | ' Get HID descriptor buffer for current port
3ba3c 11b             | '------------------------------------------------------------------------------
3ba3c 11b             | ' On entry:
3ba3c 11b             | ' On exit:
3ba3c 11b             | '   PB - HID descriptor buffer pointer
3ba3c 11b             | '------------------------------------------------------------------------------
3ba3c 11b             | get_hid_descr_buffer
3ba3c 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3ba40 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3ba44 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3ba48 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3ba4c 11f             | 
3ba4c 11f             | 
3ba4c 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3ba50 120             | 
3ba50 120             | ' USB commands and error codes
3ba50 120 00 00 00 00 | cmd_data        long    0
3ba54 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3ba58 122             | 
3ba58 122             | ' Parameters block assigned at cog startup
3ba58 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3ba5c 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3ba60 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3ba64 125             | if ACTIVITY_LED >= 0
3ba64 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3ba64 125             | end
3ba64 125             | if ERROR_LED >= 0
3ba64 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3ba64 125             | end
3ba64 125 00 00 00 00 | hid_descr_p     long    0
3ba68 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3ba68 126             | 'hkbd_report_p   long    0
3ba68 126 00 00 00 00 | hub_descr_p     long    0
3ba6c 127 00 00 00 00 | urx_buff_p      long    0
3ba70 128 00 00 00 00 | dev_desc_buff_p long    0
3ba74 129 00 00 00 00 | con_desc_buff_p long    0
3ba78 12a 00 00 00 00 | cache_start_p   long    0
3ba7c 12b 00 00 00 00 | cache_end_p     long    0
3ba80 12c             | if EMUPAD_MAX_PLAYER > 0
3ba80 12c             | emupad_out_ptr  long    0
3ba80 12c             | end
3ba80 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3ba84 12d             | 
3ba84 12d             | hdev_init_start
3ba84 12d             | hdev_port       res     1
3ba84 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3ba84 12d             | kbm_next_datax  res     1
3ba84 12d             | hub_intf_num    res     1
3ba84 12d             | hub_next_datax  res     1
3ba84 12d             | hub_status_chg  res     1
3ba84 12d             | hub_port_status res     1
3ba84 12d             | if HAVE_MOUSE
3ba84 12d             | ms_intf_num     res     1
3ba84 12d             | ms_in_max_pkt   res     1
3ba84 12d             | end
3ba84 12d             | kb_intf_num     res     1
3ba84 12d             | kb_interval     res     1
3ba84 12d             | kb_in_max_pkt   res     1
3ba84 12d             | kb_max_index    res     1
3ba84 12d             | kb_led_states   res     1
3ba84 12d             | gp_intf_num     res     1
3ba84 12d             | gp_interval     res     1
3ba84 12d             | gp_max_index    res     1
3ba84 12d             | gp_descr_len    res     1+MAX_DEVICES
3ba84 12d             | hdev_init_end
3ba84 12d             | 
3ba84 12d             | ' Initialized at cog startup:
3ba84 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3ba84 12d             | iframe_ct_new   res     1
3ba84 12d             | iframe_ct_base  res     1
3ba84 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3ba84 12d             | 
3ba84 12d             | ' This register block is reset to zero when a USB device connects
3ba84 12d             | hreg_init_start
3ba84 12d             | hstatus         res     1         ' Host status flags
3ba84 12d             | hctwait         res     1         ' Poll-based wait clocks
3ba84 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3ba84 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3ba84 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3ba84 12d             | xfer_retry      res     1         ' Control transfer retry count
3ba84 12d             | retry           res     1         ' Transaction retry count
3ba84 12d             | utx             res     1         ' Byte to transmit on USB
3ba84 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3ba84 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3ba84 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3ba84 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3ba84 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3ba84 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3ba84 12d             | frame           res     1         ' USB 1ms frame counter value
3ba84 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3ba84 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3ba84 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3ba84 12d             | crc             res     1         ' Used for CRC16 calculation
3ba84 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3ba84 12d             | retval          res     1         ' Global success/fail return parameter
3ba84 12d             | context_retval  res     1         ' Operation contextual return parameter
3ba84 12d             | ' Device stuff
3ba84 12d             | hdev_id         res     1+MAX_DEVICES
3ba84 12d             | hdev_bcd        res     1
3ba84 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3ba84 12d             | ' Keyboard/mouse stuff
3ba84 12d             | hctrl_ep_addr   res     1
3ba84 12d             | hctrl_max_pkt   res     1
3ba84 12d             | hconfig_base    res     1
3ba84 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3ba84 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3ba84 12d             | hdev_class      res     1
3ba84 12d             | hdev_subclass   res     1
3ba84 12d             | hdev_protocol   res     1
3ba84 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3ba84 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3ba84 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3ba84 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3ba84 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3ba84 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3ba84 12d             | if HAVE_MOUSE
3ba84 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3ba84 12d             | end
3ba84 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3ba84 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3ba84 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3ba84 12d             | hdev_out_addr   res     1
3ba84 12d             | 
3ba84 12d             | if EMUPAD_MAX_PLAYER > 0
3ba84 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3ba84 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3ba84 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3ba84 12d             | end
3ba84 12d             | 
3ba84 12d             | hreg_init_end
3ba84 12d             | 
3ba84 12d             | hidr_start
3ba84 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3ba84 12d             | hidr_flags      res     1
3ba84 12d             | hidr_axis       res     4
3ba84 12d             | hidr_buttons    res     1
3ba84 12d             | hidr_hats       res     1
3ba84 12d             | '' Above are actually useful values, 6 longs
3ba84 12d             | hidr_type       res     1
3ba84 12d             | hidr_id         res     1
3ba84 12d             | hidr_offset     res     1
3ba84 12d             | hidr_usage_idx  res     1
3ba84 12d             | ' below need to be push/pop'd
3ba84 12d             | hidr_state      res     1
3ba84 12d             | hidr_size       res     1
3ba84 12d             | hidr_count      res     1
3ba84 12d             | hidr_lminmax    res     1
3ba84 12d             | hidr_pminmax    res     1
3ba84 12d             | hidr_end
3ba84 12d             | 
3ba84 12d             | ' Variables dependent on the system freqency
3ba84 12d             | _var_64_lower_  res     1
3ba84 12d             | _var_64_upper_  res     1
3ba84 12d             | _12Mbps_        res     1
3ba84 12d             | _1_5Mbps_       res     1
3ba84 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3ba84 12d             | _1us_           res     1         ' 1us
3ba84 12d             | _10us_          res     1         ' 10us
3ba84 12d             | _33us_          res     1         ' 33us
3ba84 12d             | _txn_err_       res     1         ' 250us
3ba84 12d             | _500us_         res     1         ' 500us
3ba84 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3ba84 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3ba84 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3ba84 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3ba84 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3ba84 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3ba84 12d             | _preamble_wait_ res     1
3ba84 12d             | _1ms_           res     1         ' 1ms
3ba84 12d             | _2ms_           res     1         ' 2ms
3ba84 12d             | _suspend_wait_  res     1         ' 3ms
3ba84 12d             | _4ms_           res     1         ' 4ms
3ba84 12d             | _xfer_wait_     res     1         ' 5ms
3ba84 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3ba84 12d             | _reset_hold_    res     1         ' 15ms
3ba84 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3ba84 12d             | _21ms_          res     1         ' 21ms
3ba84 12d             | _100ms_         res     1         ' 100ms
3ba84 12d             | _500ms_         res     1         ' 500ms
3ba84 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3ba84 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3ba84 12d             | '------------------------------------------------------------------------------
3ba84 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3ba84 12d             | _usb_d_ls_nco_  res     1
3ba84 12d             | _usb_h_fs_nco_  res     1
3ba84 12d             | _usb_d_fs_nco_  res     1
3ba84 12d             | '------------------------------------------------------------------------------
3ba84 12d             | ' Scratch registers
3ba84 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3ba84 12d             | htmp1           res     1
3ba84 12d             | htmp2           res     1
3ba84 12d             | htmp3           res     1
3ba84 12d             | hrep            res     1         ' Repeat count
3ba84 12d             | hsave0          res     1         ' Subroutine parameter saves
3ba84 12d             | hsave1          res     1
3ba84 12d             | hsave2          res     1
3ba84 12d             | isrtmp1         res     1
3ba84 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3ba84 12d             | hr0             res     1         ' Multi-purpose registers
3ba84 12d             | hr1             res     1
3ba84 12d             | hr2             res     1
3ba84 12d             | hr3             res     1
3ba84 12d             | hpar1           res     1         ' Routine entry/exit parameters
3ba84 12d             | hpar2           res     1
3ba84 12d             | hpar3           res     1
3ba84 12d             | hct2            res     1         ' Function response bus turn-around timer
3ba84 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3ba84 12d             | mod_cnt         res     1         ' Used in idle loops
3ba84 12d             | 
3ba84 12d             |                 fit     $1F0
3ba84 12d             |                 fit     $1F0
3ba84 12d             |                 org     $200
3ba84 200             | hlut_start
3ba84 200             | 
3ba84 200             | '------------------------------------------------------------------------------
3ba84 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3ba84 200             | ' settings to startup defaults.
3ba84 200             | '------------------------------------------------------------------------------
3ba84 200             | ' On entry:
3ba84 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3ba84 200             | '------------------------------------------------------------------------------
3ba84 200             | set_speed_full
3ba84 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3ba88 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3ba8c 202 A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3ba90 203 A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3ba94 204             | '                ret                             wcz     ' Restore caller flags on exit
3ba94 204             | 
3ba94 204             | '------------------------------------------------------------------------------
3ba94 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3ba94 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3ba94 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3ba94 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3ba94 204             | ' putting the smart pins into reset.
3ba94 204             | '------------------------------------------------------------------------------
3ba94 204             | ' On entry:
3ba94 204             | ' On exit: CZ flags restored to caller states
3ba94 204             | '------------------------------------------------------------------------------
3ba94 204             | set_speed_low
3ba94 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3ba98 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3ba9c 206 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3baa0 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3baa4 208 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3baa8 209 A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3baac 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3bab0 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3bab4 20c             | 
3bab4 20c             | '------------------------------------------------------------------------------
3bab4 20c             | ' Perform configuration stuff required when a device intitially connects.
3bab4 20c             | '------------------------------------------------------------------------------
3bab4 20c             | ' On entry:
3bab4 20c             | ' On exit:
3bab4 20c             | '------------------------------------------------------------------------------
3bab4 20c             | on_connect
3bab4 20c 02 86 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3bab8 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3babc 20e             | .retry
3babc 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3bac0 20f 01 8E 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3bac4 210 02 8E 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3bac8 211 00 08 00 FF 
3bacc 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3bad0 213 20 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3bad4 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bad8 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3badc 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3bae0 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3bae4 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bae8 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3baec 21a B2 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3baf0 21b 4C 03 B0 FD |                 call    #poll_waitx
3baf4 21c 01 86 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3baf8 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3bafc 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3bb00 21f B8 FF 9F FD |                 jmp     #.retry
3bb04 220             | .get_dev_desc
3bb04 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3bb08 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3bb0c 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3bb10 223 A8 99 02 F6 |                 mov     hctwait, _1ms_
3bb14 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3bb18 225 88 FB BF FD |                 call    #reset
3bb1c 226 38 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3bb20 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bb24 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3bb28 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3bb2c 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bb30 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3bb34 22c AD 99 02 F6 |                 mov     hctwait, _8ms_
3bb38 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3bb3c 22e 04 00 00 FF 
3bb40 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3bb44 230 34 FA BF FD |                 call    #calc_crc5
3bb48 231 20 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3bb4c 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bb50 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3bb54 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3bb58 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3bb5c 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3bb60 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bb64 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3bb68 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3bb6c 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3bb70 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3bb74 23c A0 99 02 F6 |                 mov     hctwait, _500us_
3bb78 23d C4 02 B0 FD |                 call    #poll_waitx
3bb7c 23e 28 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3bb80 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bb84 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3bb88 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3bb8c 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3bb90 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bb94 244 2D 00 64 5D |         if_nz   ret
3bb98 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3bb9c 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3bba0 247 61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3bba4 248 61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3bba8 249 00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3bbac 24a 09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3bbb0 24b 02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3bbb4 24c 56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
3bbb8 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3bbbc 24e 2C FB 9F CD |         if_b    jmp     #host_error
3bbc0 24f 24 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3bbc4 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3bbc8 251 2D EC 63 FD |                 call    pa
3bbcc 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3bbd0 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3bbd4 254 2C EC 63 FD |                 jmp     pa
3bbd8 255             | 
3bbd8 255             | '------------------------------------------------------------------------------
3bbd8 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3bbd8 255             | ' Status reporting is always in the function-to-host direction.
3bbd8 255             | '------------------------------------------------------------------------------
3bbd8 255             | ' On entry:
3bbd8 255             | '   PTRA - start address of the SETUP data in hub.
3bbd8 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3bbd8 255             | '     stage.
3bbd8 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3bbd8 255             | ' On exit:
3bbd8 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3bbd8 255             | '     contains the count of data stage bytes actually received, which must
3bbd8 255             | '     always be <= the count requested.
3bbd8 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3bbd8 255             | '     more specific USB operation error code.
3bbd8 255             | '------------------------------------------------------------------------------
3bbd8 255             | control_read
3bbd8 255 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
3bbdc 256 F8 91 03 F6 |                 mov     hpar2, ptra
3bbe0 257 F7 93 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3bbe4 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3bbe8 259             | .xfer_start
3bbe8 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3bbec 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3bbf0 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bbf4 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3bbf8 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3bbfc 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3bc00 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3bc04 260 61 00 00 FF 
3bc08 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3bc0c 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3bc10 263             | .data
3bc10 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3bc14 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3bc18 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3bc1c 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3bc20 267             | .nak_retry
3bc20 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3bc24 268             | .in_retry
3bc24 268 BC F6 BF FD |                 call    #txn_in
3bc28 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3bc2c 26a 28 00 90 AD |         if_z    jmp     #.commit
3bc30 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3bc34 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3bc38 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3bc3c 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3bc40 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3bc44 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3bc48 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3bc4c 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3bc50 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3bc54 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3bc58 275             | .commit
3bc58 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3bc5c 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3bc60 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3bc64 278 5C 87 03 F6 |                 mov     hr0, pkt_cnt
3bc68 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3bc6c 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3bc70 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3bc74 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3bc78 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3bc7c 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3bc80 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3bc84 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3bc88 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3bc8c 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3bc90 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3bc94 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3bc98 285             | .pre_status
3bc98 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3bc9c 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3bca0 287 00 B0 06 F6 |                 mov     pkt_data, #0
3bca4 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3bca8 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3bcac 28a 61 00 00 FF 
3bcb0 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3bcb4 28c             | .out_retry
3bcb4 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3bcb8 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bcbc 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3bcc0 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3bcc4 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3bcc8 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3bccc 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3bcd0 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3bcd4 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3bcd8 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3bcdc 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3bce0 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3bce0 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3bce0 297             | ' ControlRead() transfer gets things unstuck most of the time...
3bce0 297             | .xfer_retry
3bce0 297 AC 99 02 F6 |                 mov     hctwait, _xfer_wait_
3bce4 298 58 01 B0 FD |                 call    #poll_waitx
3bce8 299 8C F9 BF FD |                 call    #wait_txn_ok
3bcec 29a C7 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3bcf0 29b C8 F1 03 F6 |                 mov     ptra, hpar2
3bcf4 29c C9 EF 03 F6 |                 mov     pb, hpar3
3bcf8 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3bcfc 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3bd00 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3bd04 2a0             | 
3bd04 2a0             | '------------------------------------------------------------------------------
3bd04 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3bd04 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3bd04 2a0             | ' the SETUP data struct is filled with the required values.
3bd04 2a0             | '------------------------------------------------------------------------------
3bd04 2a0             | ' On entry:
3bd04 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3bd04 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3bd04 2a0             | '     stage.
3bd04 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3bd04 2a0             | ' On exit:
3bd04 2a0             | '   retval - used to convey the success/failure of each stage.
3bd04 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3bd04 2a0             | '     more specific USB operation error code.
3bd04 2a0             | '------------------------------------------------------------------------------
3bd04 2a0             | control_write
3bd04 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3bd08 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3bd0c 2a2 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3bd10 2a3             | 
3bd10 2a3 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
3bd14 2a4 F8 91 03 F6 |                 mov     hpar2, ptra
3bd18 2a5 F7 93 03 F6 |                 mov     hpar3, pb
3bd1c 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3bd20 2a7             | .xfer_start
3bd20 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3bd24 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3bd28 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3bd2c 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bd30 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3bd34 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3bd38 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3bd3c 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3bd40 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3bd44 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3bd48 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3bd4c 2b2             | .data
3bd4c 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3bd50 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3bd54 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3bd58 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3bd5c 2b6             | .out_retry
3bd5c 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3bd60 2b7 88 F6 BF FD |                 call    #txn_out
3bd64 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bd68 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3bd6c 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3bd70 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3bd74 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3bd78 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3bd7c 2be             | .commit
3bd7c 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3bd80 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3bd84 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3bd88 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3bd8c 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3bd90 2c3             | pre_status_in
3bd90 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3bd94 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3bd98 2c5             | .status_retry
3bd98 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3bd9c 2c6 44 F5 BF FD |                 call    #txn_in
3bda0 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3bda4 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3bda8 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3bdac 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3bdb0 2cb 2D 00 64 AD |         if_z    ret
3bdb4 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3bdb8 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3bdbc 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3bdc0 2cf             | '               ret                                     ' Caller must handle transfer retirement
3bdc0 2cf             | 
3bdc0 2cf             | '------------------------------------------------------------------------------
3bdc0 2cf             | ' Execute an IN interrupt transaction.
3bdc0 2cf             | '------------------------------------------------------------------------------
3bdc0 2cf             | ' On entry:
3bdc0 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3bdc0 2cf             | '   hpar2 - Address of the IN data buffer
3bdc0 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3bdc0 2cf             | ' On exit:
3bdc0 2cf             | '   retval - the result of the operation.
3bdc0 2cf             | '   hpar3 - the count of IN data bytes actually received.
3bdc0 2cf             | '------------------------------------------------------------------------------
3bdc0 2cf             | do_int_in
3bdc0 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3bdc4 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3bdc8 2d1 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3bdcc 2d2             | 
3bdcc 2d2 C9 73 33 F9 |                 getword htmp, hpar3, #0
3bdd0 2d3 C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3bdd4 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3bdd8 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3bddc 2d6             | .retry
3bddc 2d6 C9 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3bde0 2d7 00 F5 BF FD |                 call    #txn_in
3bde4 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3bde8 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3bdec 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3bdf0 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3bdf4 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3bdf8 2dd 54 00 B0 FD |                 call    #retry_wait
3bdfc 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3be00 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3be04 2e0 D4 FF 9F FD |                 jmp     #.retry
3be08 2e1             | .commit
3be08 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3be0c 2e2 C8 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3be10 2e3 5C 87 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3be14 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3be18 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3be1c 2e6             | .post_ret
3be1c 2e6 5C 93 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3be20 2e7             | 
3be20 2e7             | 
3be20 2e7             | '------------------------------------------------------------------------------
3be20 2e7             | ' Resets the downstream hub port to FS
3be20 2e7             | '------------------------------------------------------------------------------
3be20 2e7             | dwnstream_reset
3be20 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3be24 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3be28 2e9             | 
3be28 2e9 0E 6A 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3be2c 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3be30 2eb 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3be34 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3be38 2ed A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3be3c 2ee A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3be40 2ef             | 
3be40 2ef             | '------------------------------------------------------------------------------
3be40 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3be40 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3be40 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3be40 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3be40 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3be40 2ef             | '------------------------------------------------------------------------------
3be40 2ef             | ' On entry:
3be40 2ef             | '   hctwait - wait interval in sysclocks.
3be40 2ef             | ' On exit:
3be40 2ef             | '------------------------------------------------------------------------------
3be40 2ef             | poll_waitx
3be40 2ef 1A 94 63 FD |                 getct   hct2
3be44 2f0 4C 95 6B FA |                 addct2  hct2, hctwait
3be48 2f1             | .wait
3be48 2f1 FF 25 CC FB |                 jnct2   #.wait
3be4c 2f2 2D 00 64 FD |                 ret
3be50 2f3             | 
3be50 2f3             | '------------------------------------------------------------------------------
3be50 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3be50 2f3             | '------------------------------------------------------------------------------
3be50 2f3             | ' On entry:
3be50 2f3             | '   retval - transaction response PID or error code.
3be50 2f3             | ' On exit:
3be50 2f3             | '------------------------------------------------------------------------------
3be50 2f3             | retry_wait
3be50 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3be54 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3be58 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3be5c 2f6 14 00 90 AD |         if_z    jmp     #.nak
3be60 2f7 9F 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3be64 2f8 D8 FF BF FD |                 call    #poll_waitx
3be68 2f9             | .dec
3be68 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3be6c 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3be70 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3be74 2fc             | .nak
3be74 2fc 9E 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3be78 2fd C4 FF BF FD |                 call    #poll_waitx
3be7c 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3be80 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3be84 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3be88 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3be8c 302 2D 00 64 FD |                 ret
3be90 303             | 
3be90 303             | host_reset
3be90 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3be94 304 14 72 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3be98 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3be98 305 BD 01 05 FF 
3be9c 306 00 72 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3bea0 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3bea4 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3bea8 309             | ' Check to see if the system clock has been changed.
3bea8 309 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
3beac 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3beb0 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3beb4 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3beb8 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3bebc 30e 40 46 62 FD |                 dirl    dp
3bec0 30f             | 
3bec0 30f 28 02 64 FD |                 setq    #1
3bec4 310 80 00 80 FF 
3bec8 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3becc 312 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3bed0 313             | .enable
3bed0 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3bed4 314 41 46 62 FD |                 dirh    dp
3bed8 315 1F 38 63 FD |                 waitx   _1us_
3bedc 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3bee0 317             | 
3bee0 317             |                 ' Handle Port protection enable and startup delay
3bee0 317 00 48 56 F2 |                 cmps    usb_enable_pin, #0      wc
3bee4 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3bee8 319 1F 60 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3beec 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3bef0 31b 1F 60 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3bef4 31c             | 
3bef4 31c             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3bef4 31c             | 
3bef4 31c             | discon_entry
3bef4 31c 03 98 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3bef8 31d             | 
3bef8 31d 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3befc 31e 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3bf00 31f 38 EC A7 F9 |                 alti    pa, #%000_111_000
3bf04 320 00 00 04 F6 |                 mov     0-0, #0
3bf08 321             | .regloop
3bf08 321             |               
3bf08 321             |         if HAVE_HIDPAD
3bf08 321 F8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3bf0c 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3bf10 323 28 6E 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3bf14 324 F7 01 68 FC |                 wrlong  #0,pb
3bf18 325             |         end
3bf18 325             |         if EMUPAD_MAX_PLAYER > 0
3bf18 325             |         end
3bf18 325             | 
3bf18 325             |                 ' Fall through to disconnected loop
3bf18 325             | 
3bf18 325             | '-----------------------------------------------------------------------------------------------------------------
3bf18 325             | ' Device connect handling (Section 7.1.7.3).
3bf18 325             | '-----------------------------------------------------------------------------------------------------------------
3bf18 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3bf18 325             | ' device to connect (Section 7.1.7.3).
3bf18 325             | '-----------------------------------------------------------------------------------------------------------------
3bf18 325             | disconnected
3bf18 325 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3bf1c 326 2C 89 0B F2 |                 cmp     hr1, save_sysclk        wz
3bf20 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3bf24 328 03 88 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3bf28 329 1F 88 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3bf2c 32a             |         if ACTIVITY_LED >= 0
3bf2c 32a             |         end
3bf2c 32a 22 A7 82 FA |                 rqpin   urx, dm
3bf30 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3bf34 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3bf38 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3bf3c 32e             | .se1_test
3bf3c 32e B1 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3bf40 32f FC FE BF FD |                 call    #poll_waitx
3bf44 330 22 A7 82 FA |                 rqpin   urx, dm
3bf48 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3bf4c 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3bf50 333 A0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3bf54 334             | .se1            'SE1 is a fatal error condition
3bf54 334 B1 99 02 F6 |                 mov     hctwait, _100ms_
3bf58 335 E4 FE BF FD |                 call    #poll_waitx
3bf5c 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3bf60 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3bf64 338             | .connect_test                                           ' Test lines until stable J/K state seen
3bf64 338 1F 62 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3bf68 339 22 A7 82 FA |                 rqpin   urx, dm
3bf6c 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3bf70 33b 80 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3bf74 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3bf78 33d             | connected
3bf78 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3bf7c 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3bf80 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3bf84 340 6C FF 9F 5D |         if_nz   jmp     #discon_entry
3bf88 341             | .set_pulse
3bf88 341 1A 66 63 FD |                 getct   _pulse_time_
3bf8c 342 B2 67 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3bf90 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3bf90 343             | ' of 1ms and make a correction, if necessary.
3bf90 343             | '                mov     htmp, _1ms_
3bf90 343             | '                subs    htmp, iframe_delta
3bf90 343             | '                adds    _frame1ms_clks_, htmp
3bf90 343             | '                debug(udec(_frame1ms_clks_))
3bf90 343             | 
3bf90 343             |                 ' Fall through to idle/processing loop
3bf90 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3bf94 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3bf98 345             | 
3bf98 345             | hidle
3bf98 345 22 A7 82 FA |                 rqpin   urx, dm
3bf9c 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3bfa0 347 98 00 90 CD |         if_c    jmp     #.se0_test
3bfa4 348 24 06 70 FD |                 pollct3                         wc
3bfa8 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3bfac 34a 1A 96 63 FD |                 getct   hct3
3bfb0 34b A8 97 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3bfb4 34c             | 
3bfb4 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3bfb8 34d 00 72 E3 F8 |                 getbyte htmp
3bfbc 34e             | 
3bfbc 34e 09 72 0F F2 |                 cmp     htmp, #HUB_READY        wz
3bfc0 34f 8C 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3bfc4 350 40 00 90 AD |         if_z    jmp     #.poll
3bfc8 351             | 
3bfc8 351             |         if _HAVE_GAMEPAD
3bfc8 351 06 72 0F F2 |                 cmp     htmp, #HID_READY        wz
3bfcc 352 08 72 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3bfd0 353 07 72 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3bfd4 354 F4 15 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3bfd8 355 2C 00 90 AD |         if_z    jmp     #.poll
3bfdc 356             |         end
3bfdc 356             | 
3bfdc 356             |         if HAVE_MOUSE
3bfdc 356 04 72 0F F2 |                 cmp     htmp, #M_READY          wz
3bfe0 357 44 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3bfe4 358 20 00 90 AD |         if_z    jmp     #.poll
3bfe8 359             |         end
3bfe8 359             | 
3bfe8 359 03 72 0F F2 |                 cmp     htmp, #KB_READY         wz
3bfec 35a AC 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3bff0 35b 14 00 90 AD |         if_z    jmp     #.poll
3bff4 35c             | 
3bff4 35c 05 72 0F F2 |                 cmp     htmp, #KBM_READY        wz
3bff8 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3bffc 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3c000 35f AC 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3c004 360             |         if HAVE_MOUSE
3c004 360 44 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3c008 361             |         else
3c008 361             |         end
3c008 361             | 
3c008 361             | .poll
3c008 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3c00c 362 2D EC 63 FD |                 call    pa
3c010 363             | .skip_poll
3c010 363             | 
3c010 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3c014 364             | 
3c014 364             | .nopoll
3c014 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3c018 365 44 00 90 AD |         if_z    jmp     #hsuspend
3c01c 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3c020 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3c024 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3c028 369 1A 86 63 FD |                 getct   hr0
3c02c 36a B3 87 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3c030 36b             |         if ACTIVITY_LED >= 0
3c030 36b             |         end
3c030 36b 1A 66 63 3D |         if_ae   getct   _pulse_time_
3c034 36c B2 67 03 31 |         if_ae   add     _pulse_time_, _500ms_
3c038 36d 5C FF 9F FD |                 jmp     #hidle
3c03c 36e             | ' Check for extended SE0 state on the bus
3c03c 36e             | .se0_test
3c03c 36e A8 99 02 F6 |                 mov     hctwait, _1ms_
3c040 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3c044 370 22 A7 82 FA |                 rqpin   urx, dm
3c048 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3c04c 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3c050 373 24 F6 BF FD |                 call    #wait_txn_ok
3c054 374 00 00 80 FF 
3c058 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3c05c 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3c05c 376 94 FE 9F FD |                 jmp     #discon_entry                   ' Device disconnected
3c060 377             | 
3c060 377             | hsuspend
3c060 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3c064 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3c068 379 1F 54 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3c06c 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3c070 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3c074 37c 00 98 07 F6 |                 mov     mod_cnt, #0
3c078 37d             | 
3c078 37d             |                 ' Fall through to resume wait loop
3c078 37d             | 
3c078 37d             | hwait_resume
3c078 37d 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3c07c 37e 02 88 47 F0 |                 shr     hr1, #2
3c080 37f 1F 88 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3c084 380             |         if ACTIVITY_LED >= 0
3c084 380             |         end
3c084 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3c088 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3c08c 382 14 72 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3c090 383 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
3c094 384 18 00 90 AD |         if_z    jmp     #.resume
3c098 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3c09c 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3c0a0 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3c0a4 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3c0a8 389 22 6F 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3c0ac 38a 22 6B 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3c0b0 38b             | .resume
3c0b0 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3c0b4 38c 1F 5E 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3c0b8 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3c0bc 38e A3 73 03 F6 |                 mov     htmp, _ip_delay_ls_
3c0c0 38f 01 72 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3c0c4 390 1F 72 63 FD |                 waitx   htmp
3c0c8 391 22 07 28 FC |                 wypin   #OUT_J, dm
3c0cc 392 01 72 47 F0 |                 shr     htmp, #1
3c0d0 393 1F 72 63 FD |                 waitx   htmp
3c0d4 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c0d8 395 1A 92 62 FD |                 getct   iframe_ct_base
3c0dc 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3c0e0 397 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3c0e4 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3c0e8 399 AB 99 02 F6 |                 mov     hctwait, _4ms_
3c0ec 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3c0f0 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3c0f4 39c             | 
3c0f4 39c             | '------------------------------------------------------------------------------
3c0f4 39c             | ' Send preamble to enable low-speed HUB ports
3c0f4 39c             | '------------------------------------------------------------------------------
3c0f4 39c             | ' On entry:
3c0f4 39c             | ' On exit:
3c0f4 39c             | '   USB baud rate set to low-speed
3c0f4 39c             | '------------------------------------------------------------------------------
3c0f4 39c             | utx_pre
3c0f4 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3c0f8 39d 40 46 62 FD |                 dirl    dp
3c0fc 39e 28 02 64 FD |                 setq    #1
3c100 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3c104 3a0 58 44 62 FD |                 drvl    dm
3c108 3a1 59 46 62 FD |                 drvh    dp
3c10c 3a2             | 
3c10c 3a2 1E 00 00 FF 
3c110 3a3 80 72 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3c114 3a4             | 
3c114 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3c118 3a5 01 72 57 F0 |                 shr     htmp, #1        wc
3c11c 3a6 28 02 64 3D |         if_nc   setq    #1
3c120 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3c124 3a8 1F 4E 63 FD |                 waitx   _preamble_wait_
3c128 3a9             | .l1
3c128 3a9             | 
3c128 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3c12c 3aa 40 46 62 FD |                 dirl    dp
3c130 3ab 28 02 64 FD |                 setq    #1
3c134 3ac 80 00 80 FF 
3c138 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3c13c 3ae 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3c140 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3c144 3b0 41 46 62 FD |                 dirh    dp
3c148 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c14c 3b2             | 
3c14c 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3c150 3b3 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3c154 3b4 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3c158 3b5             | 
3c158 3b5             | hlut_end
3c158 3b5             |                 fit     $400
3c158 3b5             |                 fit     $400
3c158 3b5             |                 orgh
3c158                 | if OVERLAP_MEMORY
3c158                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3c158                 | end
3c158                 | '------------------------------------------------------------------------------
3c158                 | ' Routines called from cog space.
3c158                 | '------------------------------------------------------------------------------
3c158                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3c158                 | '------------------------------------------------------------------------------
3c158                 | 
3c158                 | '------------------------------------------------------------------------------
3c158                 | ' USB host cog initialization.
3c158                 | '------------------------------------------------------------------------------
3c158                 | usb_host_init
3c158                 |                 ' Initialize buffer pointers
3c158                 |         if OVERLAP_MEMORY
3c158                 |         else
3c158     4C 15 B0 FE |                 loc     pb, #hid_descr
3c15c                 |         end
3c15c     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3c160                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3c160                 |                 {
3c160                 |                 }
3c160                 |         
3c160                 |                 {
3c160                 |                 }
3c160                 |                 'loc     pb,#hkbd_report
3c160                 |                 'mov     hkbd_report_p,pb
3c160                 | 
3c160     44 1D B0 FE |                 loc     pb, #hub_descr
3c164     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3c168     59 1D B0 FE |                 loc     pb, #urx_buff
3c16c     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3c170     D1 1D B0 FE |                 loc     pb, #dev_desc_buff
3c174     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3c178     DB 1D B0 FE |                 loc     pb, #con_desc_buff
3c17c     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3c180     24 15 B0 FE |                 loc     pb, #usb_cache_start
3c184     F7 55 02 F6 |                 mov     cache_start_p, pb
3c188     25 1D B0 FE |                 loc     pb, #usb_cache_end
3c18c     F7 57 02 F6 |                 mov     cache_end_p, pb
3c190                 | 
3c190                 |         if ERROR_LED >= 0
3c190                 |         end
3c190                 | 
3c190                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3c190                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3c190                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3c190                 | ' Configure and enable the Serial Host USB port.
3c190     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3c194                 | 
3c194                 | '------------------------------------------------------------------------------
3c194                 | ' Timing calculations happen before any interrupt(s) are enabled.
3c194                 | '------------------------------------------------------------------------------
3c194                 | ' On entry:
3c194                 | '   htmp - current CLKFREQ value.
3c194                 | '------------------------------------------------------------------------------
3c194                 | hinit_usb_timings
3c194                 | '                getct   htmp2
3c194     B9 59 02 F6 |                 mov     save_sysclk, htmp
3c198     8D 5B 80 FF 
3c19c     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3c1a0     18 32 63 FD |                 getqx   _12Mbps_
3c1a4     10 32 57 F0 |                 shr     _12Mbps_, #16           wc
3c1a8     00 32 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3c1ac     03 6E 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3c1b0     0E 6E 67 F0 |                 shl     _usb_h_fs_nco_, #14
3c1b4     99 6F 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3c1b8     01 70 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3c1bc     0E 70 67 F0 |                 shl     _usb_d_fs_nco_, #14
3c1c0     99 71 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3c1c4     99 35 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3c1c8     03 34 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3c1cc     02 6A 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3c1d0     0E 6A 67 F0 |                 shl     _usb_h_ls_nco_, #14
3c1d4     9A 6B 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3c1d8     9A 6D 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3c1dc     80 00 00 FF 
3c1e0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3c1e4     18 2E 63 FD |                 getqx   _var_64_lower_
3c1e8     19 30 63 FD |                 getqy   _var_64_upper_
3c1ec     28 2E 63 FD |                 setq    _var_64_lower_
3c1f0     65 CD 1D FF 
3c1f4     00 30 27 FD |                 qfrac   _var_64_upper_, ##_1b
3c1f8     18 36 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3c1fc     01 00 00 FF 
3c200     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3c204     18 2E 63 FD |                 getqx   _var_64_lower_
3c208     19 30 63 FD |                 getqy   _var_64_upper_
3c20c     28 2E 63 FD |                 setq    _var_64_lower_
3c210     A1 07 00 FF 
3c214     40 30 27 FD |                 qfrac   _var_64_upper_, ##_1m
3c218     18 38 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3c21c     9C 7D 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3c220     09 38 57 F0 |                 shr     _1us_, #9               wc
3c224     00 38 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3c228     0A 7C 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3c22c     18 3A 63 FD |                 getqx   _10us_
3c230     09 3A 57 F0 |                 shr     _10us_, #9              wc
3c234     00 3A 27 F1 |                 addx    _10us_, #0                      ' 10us
3c238     21 7C 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3c23c     18 3C 63 FD |                 getqx   _33us_
3c240     09 3C 57 F0 |                 shr     _33us_, #9              wc
3c244     00 3C 27 F1 |                 addx    _33us_, #0                      ' 33us
3c248     FA 7C 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3c24c     18 3E 63 FD |                 getqx   _txn_err_
3c250     09 3E 57 F0 |                 shr     _txn_err_, #9           wc
3c254     00 3E 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3c258     F4 7D 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3c25c     18 40 63 FD |                 getqx   _500us_
3c260     09 40 57 F0 |                 shr     _500us_, #9             wc
3c264     00 40 27 F1 |                 addx    _500us_, #0                     ' 500us
3c268     01 00 00 FF 
3c26c     9A 7C 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3c270     18 42 63 FD |                 getqx   _txn_ok_ls_
3c274     09 42 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3c278     00 42 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3c27c     01 00 00 FF 
3c280     52 7D 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3c284     18 44 63 FD |                 getqx   _txn_ok_fs_
3c288     09 44 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3c28c     00 44 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3c290     9B 47 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3c294     05 00 00 FF 
3c298     80 46 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3c29c     10 46 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3c2a0     00 46 27 F1 |                 addx    _ip_delay_ls_, #0
3c2a4     9B 4B 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3c2a8     1C 00 00 FF 
3c2ac     C0 4B 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3c2b0     10 4A 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3c2b4     00 4A 27 F1 |                 addx    _tat_wait_ls_, #0
3c2b8     9B 49 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3c2bc     00 00 00 FF 
3c2c0     4E 49 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3c2c4     10 48 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3c2c8     00 48 27 F1 |                 addx    _ip_delay_fs_, #0
3c2cc     9B 4D 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3c2d0     04 00 00 FF 
3c2d4     23 4D 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3c2d8     10 4C 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3c2dc     00 4C 27 F1 |                 addx    _tat_wait_fs_, #0
3c2e0     8D 5B 00 FF 
3c2e4     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3c2e8     18 4E 63 FD |                 getqx   _preamble_wait_
3c2ec     08 4E 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3c2f0     01 00 00 FF 
3c2f4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3c2f8     18 2E 63 FD |                 getqx   _var_64_lower_
3c2fc     19 30 63 FD |                 getqy   _var_64_upper_
3c300     28 2E 63 FD |                 setq    _var_64_lower_
3c304     01 00 00 FF 
3c308     E8 31 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3c30c     18 50 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3c310     09 50 57 F0 |                 shr     _1ms_, #9               wc
3c314     00 50 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3c318     FF FF 7F FF 
3c31c     F2 69 07 F6 |                 mov     _frame1ms_clks_, ##-14
3c320     A8 69 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3c324     A8 53 03 F6 |                 mov     _2ms_, _1ms_
3c328     01 52 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3c32c     A8 55 03 F6 |                 mov     _suspend_wait_, _1ms_
3c330     A8 55 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3c334     A8 57 03 F6 |                 mov     _4ms_, _1ms_
3c338     02 56 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3c33c     AB 59 03 F6 |                 mov     _xfer_wait_, _4ms_
3c340     A8 59 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3c344     AC 5D 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3c348     AE 5F 03 F6 |                 mov     _resume_hold_, _reset_hold_
3c34c     02 5E 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3c350     AF 63 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3c354     01 62 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3c358     A8 5B 03 F6 |                 mov     _8ms_, _1ms_
3c35c     03 5A 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3c360     01 5C 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3c364     AE 63 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3c368     AC 5D 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3c36c     AC 61 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3c370     02 60 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3c374     A8 61 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3c378     B1 65 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3c37c     01 62 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3c380     03 64 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3c384     B1 65 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3c388                 | '        _ret_   mov     _1sec_, save_sysclk
3c388                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3c388                 | '                ret
3c388                 | {
3c388                 | }
3c388                 | 
3c388                 | '------------------------------------------------------------------------------
3c388                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3c388                 | ' one. If it is, start the task progression that will configure the device for
3c388                 | ' use.
3c388                 | '------------------------------------------------------------------------------
3c388                 | ' On entry:
3c388                 | '   hconfig_base - start address of the cached config descriptor chain.
3c388                 | ' On exit:
3c388                 | '------------------------------------------------------------------------------
3c388                 | hparse_con_desc
3c388     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3c38c     82 73 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3c390     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3c394     4E 72 FF F9 |                 movbyts htmp,#%%1032
3c398     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3c39c                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3c39c                 | 
3c39c     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3c3a0     6E ED 03 F1 |                 add     pa, hconfig_base
3c3a4     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3c3a8                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3c3a8                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3c3a8                 | ' that defines a keyboard and/or mouse.
3c3a8     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3c3ac                 | .next_intf
3c3ac     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3c3b0     B8 01 90 3D |         if_ae   jmp     #hset_config
3c3b4     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3c3b8     75 F3 03 F1 |                 add     ptrb, hnext_desc
3c3bc     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3c3c0     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3c3c4     0C 00 90 AD |         if_z    jmp     #.intf
3c3c8     80 73 C7 FA |                 rdbyte  htmp, ptrb
3c3cc     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3c3d0     D8 FF 9F FD |                 jmp     #.next_intf
3c3d4                 | .intf
3c3d4     00 90 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3c3d8     00 92 07 F6 |                 mov     hpar3, #0
3c3dc     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3c3e0     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3c3e4     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3c3e8     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3c3ec                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3c3ec                 | 
3c3ec                 | .endp
3c3ec     80 73 C7 FA |                 rdbyte  htmp, ptrb
3c3f0     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3c3f4     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3c3f8     78 00 90 3D |         if_ae   jmp     #.get_device
3c3fc     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3c400     75 F3 03 F1 |                 add     ptrb, hnext_desc
3c404     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3c408     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3c40c     64 00 90 AD |         if_z    jmp     #.get_device
3c410     05 72 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3c414     04 00 90 AD |         if_z    jmp     #.get_ep
3c418     D0 FF 9F FD |                 jmp     #.endp
3c41c                 | .get_ep
3c41c     82 89 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3c420     07 88 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3c424     0F 88 67 F0 |                 shl     hr1, #8 + 7
3c428     6C 73 03 F6 |                 mov     htmp, hctrl_ep_addr
3c42c     3F 00 00 FF 
3c430     00 73 07 F5 |                 and     htmp, ##ADDR_MASK
3c434     C4 73 43 F5 |                 or      htmp, hr1                       ' endpoint address
3c438     00 90 0F F2 |                 cmp     hpar2, #0               wz
3c43c     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3c440     00 92 0F F2 |                 cmp     hpar3, #0               wz
3c444     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3c448     A0 FF 9F FD |                 jmp     #.endp
3c44c                 | .in_ep
3c44c     B9 91 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3c450     84 8B C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3c454                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3c454     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3c458     C3 8B DB F8 |                 setbyte hr2, hr0, #3
3c45c     8C FF 9F FD |                 jmp     #.endp
3c460                 | .out_ep
3c460     B9 93 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3c464     84 8D C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3c468                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3c468     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3c46c     C3 8D DB F8 |                 setbyte hr3, hr0, #3
3c470     78 FF 9F FD |                 jmp     #.endp
3c474                 | 
3c474                 | .get_device
3c474     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3c478     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3c47c     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3c480     64 00 90 AD |         if_z    jmp     #.gamepad
3c484     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3c488     A8 00 90 AD |         if_z    jmp     #.hub
3c48c     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3c490     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3c494     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3c498     4C 00 90 AD |         if_z    jmp     #.gamepad
3c49c     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3c4a0     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3c4a4                 | .keyboard
3c4a4     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3c4a8                 |         if HAVE_MOUSE
3c4a8     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3c4ac                 |         else
3c4ac                 |         end
3c4ac     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3c4b0     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
3c4b4     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c4b8     C5 71 FA F8 |                 getbyte kb_interval, hr2, #3
3c4bc     C5 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3c4c0     C8 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3c4c4                 |                 'debug(udec(kb_intf_num))
3c4c4                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3c4c4     E4 FE 9F FD |                 jmp     #.next_intf
3c4c8                 | if HAVE_MOUSE
3c4c8                 | .mouse
3c4c8     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3c4cc     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3c4d0     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3c4d4     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
3c4d8     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c4dc                 |                 'getbyte ms_interval, hr2, #3
3c4dc     C5 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3c4e0     C8 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3c4e4                 |                 'debug(udec(kb_intf_num))
3c4e4                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3c4e4     C4 FE 9F FD |                 jmp     #.next_intf
3c4e8                 | end
3c4e8                 | .gamepad
3c4e8     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
3c4ec     C8 73 63 F5 |                 xor     htmp, hpar2
3c4f0     3F 00 00 FF 
3c4f4     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c4f8     B0 FE 9F AD |         if_z    jmp     #.next_intf
3c4fc                 |         if HAVE_MOUSE
3c4fc     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
3c500     C8 73 63 F5 |                 xor     htmp, hpar2
3c504     3F 00 00 FF 
3c508     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c50c     9C FE 9F AD |         if_z    jmp     #.next_intf
3c510                 |         end
3c510     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3c514     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3c518     90 FE 9F 5D |         if_nz   jmp     #.next_intf
3c51c                 | 
3c51c     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c520     C5 7B FA F8 |                 getbyte gp_interval, hr2, #3
3c524     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c528     C8 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3c52c     C9 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3c530                 |                 'debug(udec(gp_intf_num))
3c530                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3c530     78 FE 9F FD |                 jmp     #.next_intf
3c534                 | .hub
3c534     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3c538     70 FE 9F 5D |         if_nz   jmp     #.next_intf
3c53c     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3c540     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3c544     64 FE 9F 5D |         if_nz   jmp     #.next_intf
3c548     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3c54c     5C FE 9F 5D |         if_nz   jmp     #.next_intf
3c550     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3c554     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3c558     C8 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3c55c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c560     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3c564     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3c568                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3c568     40 FE 9F FD |                 jmp     #.next_intf
3c56c                 | 
3c56c                 | '------------------------------------------------------------------------------
3c56c                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3c56c                 | ' it according to its function, or functions. In the case of this boot protocol
3c56c                 | ' keyboard/mouse class driver:
3c56c                 | ' - SetConfiguration(config_num)
3c56c                 | ' - SetProtocol(boot)
3c56c                 | ' - SetIdle(indefinite)
3c56c                 | ' - Enter the device interrupt IN polling task stage.
3c56c                 | '------------------------------------------------------------------------------
3c56c                 | ' On entry:
3c56c                 | ' On exit:
3c56c                 | '------------------------------------------------------------------------------
3c56c                 | hset_config
3c56c                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3c56c                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3c56c     02 76 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3c570     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c574     00 00 0C F2 |                 cmp     0-0, #0                 wz
3c578     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3c57c                 |         if HAVE_MOUSE
3c57c     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3c580                 |         end
3c580     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3c584     60 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3c588                 | .set_config
3c588     74 0E D0 FE |                 loc     ptra, #set_config
3c58c     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3c590     6E ED 03 F1 |                 add     pa, hconfig_base
3c594     F6 8F C3 FA |                 rdbyte  hpar1, pa
3c598                 |                 debug("SetConfiguration: ",udec_(hpar1))
3c598     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3c59c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3c5a0     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3c5a4     A0 02 A0 FD |                 call    #control_write
3c5a8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c5ac     2D 00 64 5D |         if_nz   ret
3c5b0                 | .kbd_config
3c5b0     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3c5b4     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3c5b8                 | 
3c5b8     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
3c5bc     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3c5c0     3F 00 00 FF 
3c5c4     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c5c8     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3c5cc                 | 
3c5cc     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3c5d0     3C 0E D0 FE |                 loc     ptra, #set_protocol
3c5d4     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3c5d8     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3c5dc     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3c5e0     A0 02 A0 FD |                 call    #control_write
3c5e4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c5e8     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3c5ec     F8 02 90 5D |         if_nz   jmp     #.notify_client
3c5f0     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3c5f4     37 91 E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3c5f8     44 03 B0 FD |                 call    #hset_idle
3c5fc                 |                 'cmp     retval, #PID_ACK        wz
3c5fc                 |         'if_nz   mov     hkbd_ep_addr, #0
3c5fc                 |         'if_nz   jmp     #.notify_client
3c5fc     A9 99 02 F6 |                 mov     hctwait, _2ms_
3c600     EF 02 A0 FD |                 call    #poll_waitx
3c604     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3c608                 |         if NUMLOCK_DEFAULT_STATE && RPI_KEYBOARD_NUMLOCK_HACK
3c608                 |         end
3c608     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3c60c     A0 17 90 FE |                 loc     pa, #hkbd_led_rep
3c610     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3c614     40 03 B0 FD |                 call    #hset_kbdled_report
3c618     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c61c     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3c620     C4 02 90 5D |         if_nz   jmp     #.notify_client
3c624     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3c628     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c62c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c630     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c634     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3c638     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3c63c     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3c640     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c644     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3c648     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3c64c     03 76 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3c650                 |         if !!HAVE_MOUSE
3c650                 |         end
3c650                 | 
3c650                 | .mouse_config
3c650                 | if HAVE_MOUSE
3c650     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3c654     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3c658     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
3c65c     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3c660     3F 00 00 FF 
3c664     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c668     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3c66c                 | 
3c66c                 |                 debug("mouse passed addr check")
3c66c                 | 
3c66c     B8 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3c670     00 00 80 FF 
3c674     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3c678     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3c67c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c680     55 02 A0 FD |                 call    #control_read
3c684     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c688     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3c68c     58 02 90 5D |         if_nz   jmp     #.notify_client
3c690     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3c694     56 01 00 F6 |                 mov     0-0, total_data
3c698     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c69c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3c69c                 | 
3c69c     35 73 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3c6a0     6C 0D D0 FE |                 loc     ptra, #set_protocol
3c6a4     01 03 5C FC |                 wrword  #MOUSE_FULL_PROTOCOL ? REPORT_PROTOCOL : BOOT_PROTOCOL, ptra[wValue]
3c6a8     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3c6ac     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3c6b0     A0 02 A0 FD |                 call    #control_write
3c6b4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c6b8     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3c6bc     28 02 90 5D |         if_nz   jmp     #.notify_client
3c6c0                 |                 debug("mouse passed SetProtocol")
3c6c0     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3c6c4     35 91 E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3c6c8     74 02 B0 FD |                 call    #hset_idle
3c6cc                 |                 'cmp     retval, #PID_ACK        wz
3c6cc                 |         'if_nz   mov     hmouse_ep_addr, #0
3c6cc                 |         'if_nz   jmp     #.notify_client
3c6cc                 |                 debug("mouse passed SetIdle")
3c6cc     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3c6d0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c6d4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c6d8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c6dc     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3c6e0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c6e4     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3c6e8     79 77 03 F6 |                 mov     htmp2, hkbd_ep_addr
3c6ec     7A 77 63 F5 |                 xor     htmp2, hmouse_ep_addr
3c6f0     3F 00 00 FF 
3c6f4     00 77 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3c6f8     05 76 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3c6fc     04 76 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3c700     E4 01 90 FD |                 jmp     #.notify_client
3c704                 | end
3c704                 | .gamepad_config
3c704                 | if _HAVE_GAMEPAD
3c704     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c708     00 00 0C F2 |                 cmp     0-0, #0                 wz
3c70c     6C 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3c710     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3c714     00 72 03 F6 |                 mov     htmp, 0-0
3c718     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3c71c     3F 00 00 FF 
3c720     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c724     54 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3c728                 | 
3c728     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3c72c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3c730     69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3c734     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c738     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c73c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c740     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c744     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3c748     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3c74c     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3c750     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c754     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c758     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3c75c     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3c760     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c764                 | 
3c764                 |                 if EMUPAD_MAX_PLAYER > 0
3c764                 |                 
3c764                 | .rule_loop           
3c764                 |                 end
3c764                 | 
3c764     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3c768     5C 00 90 AD |         if_e    jmp     #.xinput
3c76c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3c770     00 72 03 F6 |                 mov     htmp,0-0
3c774     01 A6 02 FF 
3c778     68 72 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3c77c     8C 00 90 AD |         if_e    jmp     #.ps3
3c780                 | 
3c780     A4 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3c784     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3c788     00 00 80 5F 
3c78c     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3c790     03 00 80 AF 
3c794     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3c798     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3c79c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c7a0     55 02 A0 FD |                 call    #control_read
3c7a4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c7a8     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3c7ac     00 00 04 56 |         if_nz   mov     0-0, #0
3c7b0     34 01 90 5D |         if_nz   jmp     #.notify_client
3c7b4     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3c7b8     56 01 00 F6 |                 mov     0-0, total_data
3c7bc     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c7c0                 |                 debug(uhex(pb),udec(total_data),uhex_byte_array(pb,total_data))
3c7c0                 | 
3c7c0     06 76 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3c7c4     20 01 90 FD |                 jmp     #.notify_client
3c7c8                 | .xinput
3c7c8     B8 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3c7cc     2D EF 03 F6 |                 mov     pb,hdev_port
3c7d0     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3c7d4     03 EE 27 F3 |                 fle     pb,#3
3c7d8     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3c7dc     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3c7e0                 | 
3c7e0     03 B0 06 F6 |                 mov     pkt_data, #3
3c7e4     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3c7e8     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3c7ec                 |                 debug("XInput LED set ",uhex_long(ep_addr_pid),uhex_byte(pb))
3c7ec     5A 00 A0 FD |                 call    #txn_out
3c7f0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3c7f4                 | 
3c7f4     97 0C D0 FE |                 loc     ptra, #xinp_fix_8bitdo
3c7f8     27 EF 03 F6 |                 mov     pb, urx_buff_p          ' We don't actually care where it goes
3c7fc     55 02 A0 FD |                 call    #control_read           ' Execute GetDeviceDescriptor()
3c800                 |                 debug("8bitdo weird fix... ",uhex(retval))
3c800     D2 BE 06 F6 |                 mov retval,#PID_ACK             ' If we don't do this something else becomes sad (TODO fix?)
3c804                 | 
3c804                 | 
3c804     07 76 07 F6 |                 mov     htmp2, #XINPUT_READY
3c808     DC 00 90 FD |                 jmp     #.notify_client
3c80c                 | .ps3
3c80c     44 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3c810     2D EF 03 F6 |                 mov     pb,hdev_port
3c814     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3c818     04 EE 27 F3 |                 fle     pb,#4
3c81c     F7 EF C3 F9 |                 decod   pb
3c820     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3c824                 | 
3c824     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3c828     F4 0B D0 FE |                 loc     ptra, #set_report
3c82c     01 00 80 FF 
3c830     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3c834     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3c838     03 61 5C FC |                 wrword  #48, ptra[wLength]
3c83c     14 0C B0 FE |                 loc     pb, #ps3_command_buff
3c840     A0 02 A0 FD |                 call    #control_write
3c844                 | 
3c844     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3c848     D4 0B D0 FE |                 loc     ptra, #set_report
3c84c     01 00 80 FF 
3c850     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3c854     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3c858     03 09 5C FC |                 wrword  #4, ptra[wLength]
3c85c     F0 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3c860     A0 02 A0 FD |                 call    #control_write
3c864     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3c868     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3c86c     00 00 04 56 |         if_nz   mov     0-0, #0
3c870     74 00 90 5D |         if_nz   jmp     #.notify_client
3c874                 | 
3c874     08 76 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3c878     6C 00 90 FD |                 jmp     #.notify_client
3c87c                 | end
3c87c                 | 
3c87c                 | .hub_config
3c87c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3c880     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3c884     77 73 03 F6 |                 mov     htmp, hhub_ep_addr
3c888     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3c88c     3F 00 00 FF 
3c890     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c894     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3c898                 | 
3c898     94 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3c89c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3c8a0     26 EF 03 F6 |                 mov     pb, hub_descr_p
3c8a4     55 02 A0 FD |                 call    #control_read
3c8a8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c8ac     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3c8b0     34 00 90 5D |         if_nz   jmp     #.notify_client
3c8b4                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3c8b4                 | 
3c8b4     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3c8b8     02 79 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3c8bc     07 78 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3c8c0                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3c8c0                 | .pwr_loop
3c8c0     74 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3c8c4     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3c8c8     02 79 57 FC |                 wrword  htmp3, ptra[wIndex]
3c8cc     A0 02 A0 FD |                 call    #control_write
3c8d0     FB 79 6F FB |                 djnz    htmp3, #.pwr_loop
3c8d4                 | 
3c8d4     B2 99 02 F6 |                 mov     hctwait, _500ms_
3c8d8     B1 99 02 F1 |                 add     hctwait, _100ms_
3c8dc     EF 02 A0 FD |                 call    #poll_waitx
3c8e0                 | 
3c8e0     09 76 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3c8e4     00 00 90 FD |                 jmp     #.notify_client
3c8e8                 | 
3c8e8                 | .notify_client
3c8e8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3c8ec     BB 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3c8f0                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3c8f0                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3c8f0     2D 00 64 FD |                 ret
3c8f4                 | 
3c8f4                 | '------------------------------------------------------------------------------
3c8f4                 | ' Initialize the keyboard/mouse data area to start-up values.
3c8f4                 | '------------------------------------------------------------------------------
3c8f4                 | ' On entry:
3c8f4                 | ' On exit:
3c8f4                 | '------------------------------------------------------------------------------
3c8f4                 | init_kbdm_data
3c8f4     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3c8f8     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3c8fc                 | 
3c8fc     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3c900     2B ED 03 F6 |                 mov     pa, cache_end_p
3c904                 | .loop
3c904     61 01 4C FC |                 wrbyte  #0, ptra++
3c908     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3c90c     F4 FF 9F CD |         if_b    jmp     #.loop
3c910                 |         
3c910                 |         if EMUPAD_MAX_PLAYER > 0
3c910                 |         end
3c910                 | 
3c910                 | 
3c910     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3c914                 | .regloop
3c914     00 EC 8F F9 |                 altd    pa
3c918     00 00 04 F6 |                 mov     0-0, #0
3c91c     01 EC 07 F1 |                 add     pa, #1
3c920     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3c924     EC FF 9F 5D |         if_nz   jmp     #.regloop
3c928                 | 
3c928     E1 E1 61 FF 
3c92c     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3c930     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3c934     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3c938     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3c93c                 | 
3c93c     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3c940                 | 
3c940                 | '------------------------------------------------------------------------------
3c940                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3c940                 | ' function.
3c940                 | '------------------------------------------------------------------------------
3c940                 | ' On entry:
3c940                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3c940                 | '   hpar2 - index number of the target interface.
3c940                 | ' On exit:
3c940                 | '------------------------------------------------------------------------------
3c940                 | hset_idle
3c940     A9 99 02 F6 |                 mov     hctwait, _2ms_
3c944     EF 02 A0 FD |                 call    #poll_waitx
3c948     CC 0A D0 FE |                 loc     ptra, #set_idle
3c94c     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]
3c950     02 91 57 FC |                 wrword  hpar2, ptra[wIndex]
3c954     A0 02 80 FD |                 jmp     #control_write
3c958                 | 
3c958                 | '------------------------------------------------------------------------------
3c958                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3c958                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3c958                 | '------------------------------------------------------------------------------
3c958                 | ' On entry:
3c958                 | '   ep_addr_pid - device address and enpoint for the request.
3c958                 | ' On exit:
3c958                 | '   retval - transaction result.
3c958                 | '------------------------------------------------------------------------------
3c958                 | hset_kbdled_report
3c958     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3c95c     C0 0A D0 FE |                 loc     ptra, #set_report
3c960     01 00 80 FF 
3c964     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3c968     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3c96c     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3c970     27 EF 03 F6 |                 mov     pb, urx_buff_p
3c974     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3c978     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3c97c                 | 
3c97c                 | '------------------------------------------------------------------------------
3c97c                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3c97c                 | '------------------------------------------------------------------------------
3c97c                 | ' On entry:
3c97c                 | ' On exit:
3c97c                 | '------------------------------------------------------------------------------
3c97c                 | hget_kbd_in_report
3c97c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3c980     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3c984     30 93 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3c988     39 93 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3c98c     CF 02 A0 FD |                 call    #do_int_in
3c990     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c994     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3c998                 | 
3c998     00 92 0F F2 |                 cmp     hpar3, #0               wz
3c99c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3c9a0                 | 
3c9a0     30 73 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3c9a4     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3c9a8     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3c9ac     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3c9b0                 | 
3c9b0     C9 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3c9b4     18 00 B0 FD |                 call    #hkbd_compare
3c9b8                 |         if EMUPAD_MAX_PLAYER > 0
3c9b8                 |         end
3c9b8                 | 
3c9b8                 | .led_check
3c9b8     3B 73 03 F6 |                 mov     htmp, kb_led_states
3c9bc     B9 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3c9c0     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3c9c4     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3c9c8     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3c9cc     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3c9d0                 | 
3c9d0                 | '------------------------------------------------------------------------------
3c9d0                 | ' Compare current and previous keyboard data buffers for keypress changes.
3c9d0                 | '------------------------------------------------------------------------------
3c9d0                 | hkbd_compare
3c9d0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3c9d4     D0 13 F0 FE |                 loc     ptrb, #hkbd_report
3c9d8     61 75 07 FB |                 rdlong  htmp1, ptra++
3c9dc     E1 77 07 FB |                 rdlong  htmp2, ptrb++
3c9e0     BB 75 0B F2 |                 cmp     htmp1, htmp2    wz
3c9e4     61 75 07 FB |                 rdlong  htmp1, ptra++
3c9e8     E1 77 07 FB |                 rdlong  htmp2, ptrb++
3c9ec     BB 75 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3c9f0     2D 00 64 AD |         if_z    ret
3c9f4                 | 
3c9f4     B0 13 D0 FE |                 loc     ptra, #hkbd_report
3c9f8                 | 
3c9f8                 |                 ' Handle modifiers
3c9f8     27 91 C3 FA |                 rdbyte  hpar2, urx_buff_p
3c9fc     00 89 C7 FA |                 rdbyte  hr1, ptra
3ca00     C8 89 43 F9 |                 rolword hr1,hpar2,#0
3ca04     63 88 63 FD |                 mergew  hr1
3ca08     08 EC 07 F6 |                 mov     pa,#8
3ca0c                 | .modloop
3ca0c     6A 88 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3ca10     E8 8E 07 F6 |                 mov     hpar1,#$E8
3ca14     F6 8F 83 F1 |                 sub     hpar1,pa
3ca18     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3ca1c     FB ED 6F FB |                 djnz    pa,#.modloop
3ca20                 | 
3ca20     6F E0 75 FD | .release        modc    _set    wc
3ca24                 |                 'alts    hdev_port, #hid_report_p
3ca24                 |                 'mov     ptra, hid_report_p
3ca24     02 F0 07 F1 |                 add     ptra, #2
3ca28     06 EC 07 F6 |                 mov     pa, #6
3ca2c     61 8F CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3ca30     20 00 90 AD |         if_z    jmp     #.rl3
3ca34     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3ca38     02 F2 07 F1 |                 add     ptrb, #2
3ca3c     06 EE 07 F6 |                 mov     pb, #6
3ca40     E1 73 C7 FA | .rl2            rdbyte  htmp, ptrb++
3ca44     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
3ca48     08 00 90 AD |         if_z    jmp     #.rl3
3ca4c     FC EF 6F FB |                 djnz    pb, #.rl2
3ca50     68 00 B0 FD |                 call    #hkbd_translate
3ca54     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3ca58                 | 
3ca58     00 92 07 F6 |                 mov     hpar3, #0
3ca5c     1F 92 27 F4 |                 bith    hpar3, #31
3ca60                 | 
3ca60     6F 00 74 FD | .press          modc    _clr    wc
3ca64     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3ca68     02 F0 07 F1 |                 add     ptra, #2
3ca6c     06 EC 07 F6 |                 mov     pa, #6
3ca70     61 8F CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3ca74     20 00 90 AD |         if_z    jmp     #.pl3
3ca78     2C 13 F0 FE |                 loc     ptrb, #hkbd_report
3ca7c     02 F2 07 F1 |                 add     ptrb, #2
3ca80     06 EE 07 F6 |                 mov     pb, #6
3ca84     E1 73 C7 FA | .pl2            rdbyte  htmp, ptrb++
3ca88     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
3ca8c     08 00 90 AD |         if_z    jmp     #.pl3
3ca90     FC EF 6F FB |                 djnz    pb, #.pl2
3ca94     24 00 B0 FD |                 call    #hkbd_translate
3ca98     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3ca9c                 | 
3ca9c     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3caa0     04 13 F0 FE |                 loc     ptrb, #hkbd_report
3caa4     28 02 64 FD |                 setq #1
3caa8     61 75 07 FB |                 rdlong  htmp1, ptra++
3caac     28 02 64 FD |                 setq #1
3cab0     E1 75 67 FC |                 wrlong  htmp1, ptrb++
3cab4     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3cab8                 | 
3cab8     2D 00 64 FD |                 ret
3cabc                 | 
3cabc                 | '------------------------------------------------------------------------------
3cabc                 | ' Translate keyboard scancode to ASCII
3cabc                 | '------------------------------------------------------------------------------
3cabc                 | ' On entry:
3cabc                 | '   hpar1 - scancode
3cabc                 | '   hpar2 - key modifiers state
3cabc                 | '       c - pressed (0) or released (1) flag
3cabc                 | ' On exit:
3cabc                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3cabc                 | '               30..17 = unused
3cabc                 | '                   18 = scroll-lock state 
3cabc                 | '                   17 = caps-lock state
3cabc                 | '                   16 = num-lock state 
3cabc                 | '                15..8 = key modifiers state
3cabc                 | '                 7..0 = scancode
3cabc                 | '------------------------------------------------------------------------------
3cabc                 | hkbd_translate
3cabc     39 8E 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3cac0     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3cac4     53 8E 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3cac8     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3cacc     47 8E 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3cad0     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3cad4                 | 
3cad4                 |         if EMUPAD_MAX_PLAYER > 0
3cad4                 | 
3cad4                 |         if EMUPAD_BT0_BIT >= 0
3cad4                 |         end
3cad4                 |         if EMUPAD_BT1_BIT >= 0
3cad4                 |         end
3cad4                 |         if EMUPAD_BT2_BIT >= 0
3cad4                 |         end
3cad4                 |         if EMUPAD_BT3_BIT >= 0
3cad4                 |         end
3cad4                 |         if EMUPAD_BT4_BIT >= 0
3cad4                 |         end
3cad4                 |         if EMUPAD_BT5_BIT >= 0
3cad4                 |         end
3cad4                 |         if EMUPAD_BT6_BIT >= 0
3cad4                 |         end
3cad4                 |         if EMUPAD_BT7_BIT >= 0
3cad4                 |         end
3cad4                 |         if EMUPAD_BT8_BIT >= 0
3cad4                 |         end
3cad4                 |         if EMUPAD_BT9_BIT >= 0
3cad4                 |         end
3cad4                 | 
3cad4                 |         end
3cad4     C8 8F CB F8 |                 setbyte hpar1, hpar2, #1
3cad8     7C 8F D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3cadc     1F 8E 47 F4 |                 bitc    hpar1, #31
3cae0                 |         if KEYQUEUE_SIZE > 0
3cae0     C0 09 B0 FE |                 loc pb,#keyq_head
3cae4     F7 73 E3 FA |                 rdword htmp,pb
3cae8     B9 75 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3caec     B9 73 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3caf0     B9 77 03 F6 |                 mov htmp2,htmp
3caf4     04 76 07 FA |                 mul htmp2,#4
3caf8     F7 77 03 F1 |                 add htmp2,pb
3cafc     02 76 07 F1 |                 add htmp2,#2
3cb00     7F 72 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3cb04     B9 75 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3cb08     BB 8F 63 5C |         if_nz   wrlong hpar1,htmp2
3cb0c     F7 73 43 5C |         if_nz   wrbyte htmp,pb
3cb10                 |         end
3cb10     2D 00 7C FD |                 ret wcz
3cb14                 | 
3cb14                 | if HAVE_MOUSE
3cb14                 | '------------------------------------------------------------------------------
3cb14                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3cb14                 | '------------------------------------------------------------------------------
3cb14                 | ' On entry:
3cb14                 | ' On exit:
3cb14                 | '------------------------------------------------------------------------------
3cb14                 | hget_mouse_in_report
3cb14     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3cb18     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3cb1c     30 93 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3cb20     36 93 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3cb24     CF 02 A0 FD |                 call    #do_int_in
3cb28     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cb2c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3cb30                 | 
3cb30     00 92 0F F2 |                 cmp     hpar3, #0               wz
3cb34     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3cb38                 | 
3cb38     30 73 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3cb3c     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3cb40     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3cb44     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3cb48                 | 
3cb48                 |         'debug(uhex_byte_array(urx_buff_p,hpar3))
3cb48                 | 
3cb48                 |         if MOUSE_FULL_PROTOCOL
3cb48     C8 00 B0 FD |                 call #hid_decode
3cb4c                 |         else
3cb4c                 |         end
3cb4c                 | 
3cb4c     48 09 90 FE |                 loc     pa, #mouse_limits
3cb50     5D 13 F0 FE |                 loc     ptrb, #mouse_xacc
3cb54                 | 
3cb54                 |                 ' load xacc,yacc,zacc
3cb54     28 04 64 FD |                 setq    #3-1
3cb58     80 89 07 FB |                 rdlong  hr1,ptrb
3cb5c                 |                 ' load limits and outptr
3cb5c     28 04 64 FD |                 setq    #3-1
3cb60     F6 75 03 FB |                 rdlong  htmp1,pa
3cb64                 | 
3cb64                 |         if MOUSE_FULL_PROTOCOL
3cb64     8C 19 47 FC |                 wrbyte  hidr_buttons, ptrb[12]
3cb68                 |         else
3cb68                 |                 { ' Currently not used
3cb68                 |                 '}
3cb68                 |         end
3cb68                 | 
3cb68                 |         if MOUSE_FULL_PROTOCOL
3cb68     88 73 33 F9 |                 getword htmp, hidr_axis+0, #0
3cb6c     0F 72 67 F7 |                 signx   htmp, #15
3cb70                 |         else
3cb70                 |         end
3cb70     B9 89 03 F1 |                 add     hr1,htmp
3cb74     00 74 0F F2 |                 cmp     htmp1,#0 wz
3cb78     BA 89 63 53 |         if_ne   fles    hr1,htmp1
3cb7c     00 88 47 53 |         if_ne   fges    hr1,#0
3cb80                 | 
3cb80                 |         if MOUSE_FULL_PROTOCOL
3cb80     88 73 3B F9 |                 getword htmp, hidr_axis+0, #1
3cb84     0F 72 67 F7 |                 signx   htmp, #15
3cb88                 |         else
3cb88                 |         end
3cb88     B9 8B 03 F1 |                 add     hr2,htmp
3cb8c     00 76 0F F2 |                 cmp     htmp2,#0 wz
3cb90     BB 8B 63 53 |         if_ne   fles    hr2,htmp2
3cb94     00 8A 47 53 |         if_ne   fges    hr2,#0
3cb98                 |                 
3cb98                 |         if MOUSE_FULL_PROTOCOL
3cb98     8B 73 3B F9 |                 getword htmp, hidr_axis+3, #1           ' Mouse wheel is actually on the "wheel axis"
3cb9c     0F 72 67 F7 |                 signx   htmp, #15
3cba0     B9 8D 03 F1 |                 add     hr3, htmp
3cba4                 |         else    
3cba4                 |         end
3cba4                 | 
3cba4     90 73 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3cba8     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3cbac                 | 
3cbac                 |                 ' write back accumulators
3cbac     28 04 64 FD |                 setq    #3-1
3cbb0     80 89 67 FC |                 wrlong  hr1,ptrb
3cbb4                 |                 ' if outptr set, write X/Y words
3cbb4     00 78 0F F2 |                 cmp htmp3,#0                    wz
3cbb8     C5 89 2B 59 |         if_nz   setword hr1,hr2,#1
3cbbc     BC 89 63 5C |         if_nz   wrlong hr1,htmp3
3cbc0     2D 00 64 FD |                 ret
3cbc4                 | end
3cbc4                 | 
3cbc4                 | '------------------------------------------------------------------------------
3cbc4                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3cbc4                 | '------------------------------------------------------------------------------
3cbc4                 | ' On entry:
3cbc4                 | ' On exit:
3cbc4                 | '------------------------------------------------------------------------------
3cbc4                 | if _HAVE_GAMEPAD
3cbc4                 | hget_gp_in_report
3cbc4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3cbc8     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3cbcc                 | 
3cbcc     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3cbd0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3cbd4     00 92 E3 F8 |                 getbyte hpar3
3cbd8     FF 92 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3cbdc     CF 02 A0 FD |                 call    #do_int_in
3cbe0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cbe4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3cbe8                 | 
3cbe8     00 92 0F F2 |                 cmp     hpar3, #0               wz
3cbec     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3cbf0                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3cbf0                 | 
3cbf0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3cbf4     00 72 E3 F8 |                 getbyte htmp                            ' |
3cbf8     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3cbfc     4B 72 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3cc00     C3 72 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3cc04     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3cc08     B9 01 C0 F8 |                 setbyte htmp                            ' |
3cc0c                 | 
3cc0c                 | ' Note: the following code compares the current and previous reports
3cc0c                 | ' and process the data if there are changes to ease the debug output.
3cc0c                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3cc0c                 | ' gpPreReport buffer.
3cc0c                 | 
3cc0c                 |                 ' ----- start of block to remove
3cc0c                 |                 {
3cc0c                 |                 }
3cc0c                 |                 ' ----- end of block to remove
3cc0c     14 05 90 FE |                 loc pa,#hpad_translate
3cc10     2A EC 63 FD |                 push pa
3cc14                 | 
3cc14                 |                 ' FALL THROUGH !!!!
3cc14                 | end
3cc14                 | if _HAVE_GAMEPAD || MOUSE_FULL_PROTOCOL
3cc14                 | '------------------------------------------------------------------------------
3cc14                 | ' Decode controller report
3cc14                 | '------------------------------------------------------------------------------
3cc14                 | hid_decode
3cc14                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3cc14     28 20 64 FD |                 setq #(hidr_end-hidr_start)-1
3cc18     00 04 00 FF 
3cc1c     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3cc20                 | 
3cc20     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3cc24                 | 
3cc24     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3cc28     00 1C E3 F8 |                 getbyte hidr_type
3cc2c                 |         if _HAVE_GAMEPAD
3cc2c     07 1C 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3cc30     08 03 90 AD |         if_z    jmp     #hpad_xinput
3cc34     08 1C 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3cc38     EC 03 90 AD |         if_z    jmp     #hpad_ps3
3cc3c                 |         end
3cc3c     05 1C 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3cc40     04 1C 07 A6 |         if_z    mov     hidr_type,#M_READY
3cc44     04 1C 0F F2 |                 cmp     hidr_type, #M_READY             wz
3cc48                 |                 
3cc48                 | 
3cc48                 | '------------------------------------------------------------------------------
3cc48                 | ' Handle HID controller (or mouse now
3cc48                 | ' On entry:
3cc48                 | '   ptrb - controller report
3cc48                 | '------------------------------------------------------------------------------
3cc48                 | hpad_hid
3cc48     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3cc4c     F7 F1 03 F6 |                 mov     ptra, pb
3cc50     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3cc54     00 EC 03 F6 |                 mov     pa, 0-0
3cc58                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3cc58     19 2A 3B FF 
3cc5c     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3cc60                 | 
3cc60                 | .next
3cc60     00 EC 5F F2 |                 cmps    pa, #0      wcz
3cc64     2D 00 7C ED |         if_be   ret     wcz
3cc68                 | 
3cc68     61 8F C7 FA |                 rdbyte  hpar1, ptra++
3cc6c     01 EC 87 F1 |                 sub     pa, #1
3cc70     00 90 07 F6 |                 mov     hpar2, #0
3cc74                 | 
3cc74     C7 73 03 F6 |                 mov     htmp, hpar1
3cc78     03 72 07 F5 |                 and     htmp, #$03
3cc7c     01 72 0F F2 |                 cmp     htmp, #1    wz
3cc80     61 91 C7 AA |         if_z    rdbyte  hpar2, ptra++
3cc84     07 90 67 A7 |         if_z    signx   hpar2,#7
3cc88     01 EC 87 A1 |         if_z    sub     pa, #1
3cc8c     02 72 0F F2 |                 cmp     htmp, #2    wz
3cc90     61 91 E7 AA |         if_z    rdword  hpar2, ptra++
3cc94     0F 90 67 A7 |         if_z    signx   hpar2,#15
3cc98     02 EC 87 A1 |         if_z    sub     pa, #2
3cc9c     03 72 0F F2 |                 cmp     htmp, #3    wz
3cca0     61 91 07 AB |         if_z    rdlong  hpar2, ptra++
3cca4     04 EC 87 A1 |         if_z    sub     pa, #4
3cca8                 | 
3cca8     FC 8E 07 F5 |                 and     hpar1, #$FC
3ccac                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3ccac                 | 
3ccac     84 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3ccb0     18 01 90 AD |         if_z    jmp     #.report_id
3ccb4     04 8E 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3ccb8     30 01 90 AD |         if_z    jmp     #.usage_page
3ccbc     08 8E 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3ccc0     38 01 90 AD |         if_z    jmp     #.usage
3ccc4     14 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3ccc8     C8 2B 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3cccc     24 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3ccd0     C8 2B 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3ccd4     34 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3ccd8     C8 2D 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3ccdc     44 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3cce0     C8 2D 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3cce4     74 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3cce8     C8 27 03 A6 |         if_z    mov     hidr_size, hpar2
3ccec     94 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3ccf0     C8 29 03 A6 |         if_z    mov     hidr_count, hpar2
3ccf4     B4 8E 1F F2 |                 cmp     hpar1, #HID_POP wcz
3ccf8     A4 8E 0F 52 |         if_nz   cmp     hpar1, #HID_PUSH wz
3ccfc     64 01 90 AD |         if_z    jmp     #.pushpop ' Entering with C set if PUSH  
3cd00     80 8E 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3cd04     58 FF 9F 5D |         if_nz   jmp     #.next
3cd08                 | 
3cd08     D5 25 A7 FB |                 tjf     hidr_state,#.next
3cd0c                 | 
3cd0c     03 90 07 F5 |                 and     hpar2, #$03
3cd10     02 90 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3cd14     18 00 90 5D |         if_nz   jmp     #.skip
3cd18                 | 
3cd18     02 24 0F F2 |                 cmp     hidr_state, #2  wz
3cd1c     20 00 90 AD |         if_z    jmp     #.axes
3cd20     03 24 0F F2 |                 cmp     hidr_state, #3  wz
3cd24     5C 00 90 AD |         if_z    jmp     #.hats
3cd28     04 24 0F F2 |                 cmp     hidr_state, #4  wz
3cd2c     70 00 90 AD |         if_z    jmp     #.buttons
3cd30                 | .skip
3cd30     93 73 03 F6 |                 mov     htmp, hidr_size
3cd34     94 73 03 FA |                 mul     htmp, hidr_count
3cd38     B9 21 03 F1 |                 add     hidr_offset, htmp
3cd3c     20 FF 9F FD |                 jmp     #.next
3cd40                 | .axes
3cd40                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count),uhex_long(hidr_flags))
3cd40     87 87 53 F8 |                 getnib  hr0, hidr_flags, #2
3cd44     94 89 03 F6 |                 mov     hr1, hidr_count
3cd48                 | .l1
3cd48     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3cd4c     93 91 03 F6 |                 mov     hpar2, hidr_size
3cd50     28 01 B0 FD |                 call    #hpad_getbits
3cd54     88 01 B0 FD |                 call    #hpad_normalize
3cd58     08 86 1F F2 |                 cmp     hr0, #8         wcz
3cd5c     86 87 5F C9 |         if_b    altgn   hr0, #hidr_usage
3cd60     00 8A 43 C8 |         if_b    getnib  hr2
3cd64     88 8B 77 C9 |         if_b    altsw   hr2, #hidr_axis
3cd68     5F 01 20 C9 |         if_b    setword retval
3cd6c     01 86 07 C1 |         if_b    add     hr0, #1
3cd70     93 21 03 F1 |                 add     hidr_offset, hidr_size
3cd74     F4 89 6F FB |                 djnz    hr1, #.l1
3cd78                 | 
3cd78     C3 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3cd7c     01 24 07 F6 |                 mov     hidr_state, #1
3cd80     DC FE 9F FD |                 jmp     #.next
3cd84                 | .hats
3cd84                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3cd84     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3cd88     93 91 03 F6 |                 mov     hpar2, hidr_size
3cd8c     EC 00 B0 FD |                 call    #hpad_getbits
3cd90     5F 1B C3 F8 |                 setbyte hidr_hats, retval, #0
3cd94     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3cd98     01 24 07 F6 |                 mov     hidr_state, #1
3cd9c     90 FF 9F FD |                 jmp     #.skip
3cda0                 | .buttons
3cda0                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3cda0     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3cda4     93 91 03 F6 |                 mov     hpar2, hidr_size
3cda8     94 91 03 FA |                 mul     hpar2, hidr_count
3cdac     CC 00 B0 FD |                 call    #hpad_getbits
3cdb0     87 73 E3 F8 |                 getbyte htmp, hidr_flags, #0
3cdb4     B9 BF 62 F0 |                 shl     retval, htmp
3cdb8     5F 19 43 F5 |                 or      hidr_buttons, retval
3cdbc     94 73 03 F1 |                 add     htmp, hidr_count
3cdc0     B9 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3cdc4     01 24 07 F6 |                 mov     hidr_state, #1
3cdc8     64 FF 9F FD |                 jmp     #.skip
3cdcc                 | .report_id
3cdcc     00 1E 0F F2 |                 cmp     hidr_id, #0     wz
3cdd0     2D 00 7C 5D |         if_nz   ret     wcz
3cdd4     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
3cdd8                 |                 'debug(".report_id",udec(htmp,hpar2))
3cdd8     C8 73 0B F2 |                 cmp     htmp, hpar2     wz
3cddc     B9 1F 03 A6 |         if_z    mov     hidr_id, htmp
3cde0     01 24 67 56 |         if_nz   neg     hidr_state,#1
3cde4     01 F2 87 51 |         if_nz   sub     ptrb,#1
3cde8     74 FE 9F FD |                 jmp     #.next
3cdec                 | .usage_page
3cdec     09 90 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3cdf0     01 24 0F A2 |         if_z    cmp     hidr_state, #1  wz
3cdf4     04 24 07 A6 |         if_z    mov     hidr_state, #4
3cdf8     64 FE 9F FD |                 jmp     #.next
3cdfc                 | .usage
3cdfc     04 90 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3ce00     05 90 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3ce04     06 1C 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3ce08     01 24 07 A6 |         if_z    mov     hidr_state, #1
3ce0c     50 FE 9F AD |         if_z    jmp     #.next
3ce10     02 90 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3ce14     04 1C 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3ce18     01 24 07 A6 |         if_z    mov     hidr_state, #1
3ce1c     40 FE 9F AD |         if_z    jmp     #.next
3ce20     30 90 17 F2 |                 cmp     hpar2, #HID_USAGE_X     wc
3ce24     38 90 97 32 |         if_nc   cmpr    hpar2, #HID_USAGE_WHEEL wc   
3ce28     10 00 90 3D |         if_nc   jmp     #.usage_axis
3ce2c     39 90 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3ce30     01 24 0F A2 |         if_z    cmp     hidr_state, #1      wz
3ce34     03 24 07 A6 |         if_z    mov     hidr_state, #3
3ce38     24 FE 9F FD |                 jmp     #.next
3ce3c                 | .usage_axis
3ce3c     01 24 57 F2 |                 cmps    hidr_state, #1          wc
3ce40     1C FE 9F CD |         if_b    jmp     #.next
3ce44     37 90 27 F3 |                 fle     hpar2, #HID_USAGE_DIAL   ' Let's just say wheel and dial are the same to keep sane
3ce48     86 23 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3ce4c     C8 01 00 F8 |                 setnib  hpar2
3ce50                 | 
3ce50     20 90 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3ce54     C8 0F 23 F4 |                 bith    hidr_flags, hpar2
3ce58                 | 
3ce58     01 22 07 F1 |                 add     hidr_usage_idx, #1
3ce5c     02 24 07 F6 |                 mov     hidr_state, #2
3ce60     FC FD 9F FD |                 jmp     #.next
3ce64                 | .pushpop
3ce64                 |                 ' Entering with C set if PUSH  
3ce64     4C 0F B0 FE |                 loc     pb, #hid_stack
3ce68     28 08 64 CD |         if_c    setq    #(hidr_end-hidr_state)-1
3ce6c     F7 25 63 CC |         if_c    wrlong  hidr_state, pb
3ce70     28 08 64 3D |         if_nc   setq    #(hidr_end-hidr_state)-1
3ce74     F7 25 03 3B |         if_nc   rdlong  hidr_state, pb
3ce78     E4 FD 9F FD |                 jmp     #.next
3ce7c                 | 
3ce7c                 | '------------------------------------------------------------------------------
3ce7c                 | ' Read bits from report data buffer
3ce7c                 | '------------------------------------------------------------------------------
3ce7c                 | ' On entry:
3ce7c                 | '   PTRB - report buffer
3ce7c                 | '   hpar1 - start bit
3ce7c                 | '   hpar2 - number of bits
3ce7c                 | ' On exit:
3ce7c                 | '   retval - bits
3ce7c                 | '------------------------------------------------------------------------------
3ce7c                 | hpad_getbits
3ce7c     C7 73 03 F6 |                 mov     htmp, hpar1
3ce80     03 72 47 F0 |                 shr     htmp, #3        ' byte offset
3ce84     F9 73 03 F1 |                 add     htmp, ptrb
3ce88     B9 BF 02 FB |                 rdlong  retval, htmp
3ce8c                 | 
3ce8c     C7 75 03 F6 |                 mov     htmp1, hpar1
3ce90     07 74 07 F5 |                 and     htmp1, #$07     ' shift
3ce94     BA BF 42 F0 |                 shr     retval, htmp1
3ce98                 | 
3ce98     18 90 1F F2 |                 cmp     hpar2, #24      wcz
3ce9c     10 00 90 1D |         if_a    jmp     #.l1
3cea0                 | 
3cea0     C8 91 C3 F9 |                 decod   hpar2
3cea4     01 90 87 F1 |                 sub     hpar2, #1
3cea8     C8 BF 02 F5 |                 and     retval, hpar2
3ceac     2D 00 64 FD |                 ret
3ceb0                 | .l1
3ceb0     FF 7F 00 FF 
3ceb4     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3ceb8     03 72 07 F1 |                 add     htmp, #3
3cebc     B9 77 03 FB |                 rdlong  htmp2, htmp
3cec0     18 90 87 F1 |                 sub     hpar2, #24
3cec4     C8 91 C3 F9 |                 decod   hpar2
3cec8     01 90 87 F1 |                 sub     hpar2, #1
3cecc     BA 77 43 F0 |                 shr     htmp2, htmp1
3ced0     C8 77 03 F5 |                 and     htmp2, hpar2
3ced4     18 76 67 F0 |                 shl     htmp2, #24
3ced8     BB BF 42 F5 |                 or      retval, htmp2
3cedc     2D 00 64 FD |                 ret
3cee0                 | 
3cee0                 | '------------------------------------------------------------------------------
3cee0                 | ' Normalize value to signed word (-32768 / 32767)
3cee0                 | '------------------------------------------------------------------------------
3cee0                 | ' On entry:
3cee0                 | '   retval - value to normalize
3cee0                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3cee0                 | '   - or -
3cee0                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3cee0                 | '   hidr_size - value bits length
3cee0                 | ' On exit:
3cee0                 | '   retval - normalized value
3cee0                 | '------------------------------------------------------------------------------
3cee0                 | hpad_normalize
3cee0     95 73 0B F6 |                 mov     htmp, hidr_lminmax  wz
3cee4     96 73 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3cee8     2D 00 64 AD |         if_z    ret
3ceec     B9 75 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3cef0     B9 73 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3cef4     0F 74 77 F7 |                 signx   htmp1, #15      wc
3cef8     FF 27 97 C9 |         if_c    alts    hidr_size, #511
3cefc     00 BE 66 C7 |         if_c    signx   retval, #0-0
3cf00                 |                 ' slightly crappy hack: if in mouse mode, don't normalize
3cf00     04 1C 0F F2 |                 cmp     hidr_type, #M_READY wz
3cf04     2D 00 64 AD |         if_z    ret
3cf08     BA 73 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3cf0c     BA BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3cf10     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3cf14     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3cf18     B9 73 53 F6 |                 abs     htmp            wc
3cf1c     1F BE 0E F4 |                 testb   retval, #31     wz
3cf20     5F BF 42 F6 |                 abs     retval
3cf24     B9 BF 12 FD |                 qdiv    retval, htmp
3cf28     18 BE 62 FD |                 getqx   retval
3cf2c     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3cf30     C0 FF 7F FF 
3cf34     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3cf38     2D 00 64 FD |                 ret
3cf3c                 | end
3cf3c                 | 
3cf3c                 | if _HAVE_GAMEPAD
3cf3c                 | '------------------------------------------------------------------------------
3cf3c                 | ' Handle XInput controller
3cf3c                 | ' On entry:
3cf3c                 | '   ptrb - controller report
3cf3c                 | '------------------------------------------------------------------------------
3cf3c                 | '   Default implementation translates the report to a pseudo-defacto hid
3cf3c                 | '   standard and jumps to hpad_translate for actions.
3cf3c                 | '   Implementors may take specific actions for this kind of controller.
3cf3c                 | '------------------------------------------------------------------------------
3cf3c                 | hpad_xinput
3cf3c     80 73 CF FA |                 rdbyte  htmp, ptrb      wz
3cf40     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3cf44     81 73 C7 FA |                 rdbyte  htmp, ptrb[1]
3cf48     14 72 0F F2 |                 cmp     htmp, #$14      wz
3cf4c     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3cf50                 | 
3cf50                 |                 'debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3cf50                 | 
3cf50     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3cf54     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3cf58                 | 
3cf58     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3cf5c     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3cf60     5F BF 22 F6 |                 not     retval
3cf64     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3cf68     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3cf6c     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3cf70     5F BF 22 F6 |                 not     retval
3cf74     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3cf78                 | 
3cf78     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3cf7c     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3cf80     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3cf84     06 18 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3cf88     54 FF BF FD |                 call    #hpad_normalize
3cf8c     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3cf90     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3cf94     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3cf98     07 18 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3cf9c     40 FF BF FD |                 call    #hpad_normalize
3cfa0     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3cfa4                 | 
3cfa4     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3cfa8     81 BF E6 FA |                 rdword  retval, ptrb[1]
3cfac     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3cfb0     00 18 47 F4 |                 bitc    hidr_buttons, #0
3cfb4     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3cfb8     01 18 47 F4 |                 bitc    hidr_buttons, #1
3cfbc     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3cfc0     02 18 47 F4 |                 bitc    hidr_buttons, #2
3cfc4     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3cfc8     03 18 47 F4 |                 bitc    hidr_buttons, #3
3cfcc     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3cfd0     04 18 47 F4 |                 bitc    hidr_buttons, #4
3cfd4     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3cfd8     05 18 47 F4 |                 bitc    hidr_buttons, #5
3cfdc     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3cfe0     08 18 47 F4 |                 bitc    hidr_buttons, #8
3cfe4     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3cfe8     09 18 47 F4 |                 bitc    hidr_buttons, #9
3cfec     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3cff0     0A 18 47 F4 |                 bitc    hidr_buttons, #10
3cff4     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3cff8     0B 18 47 F4 |                 bitc    hidr_buttons, #11
3cffc     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3d000     0C 18 47 F4 |                 bitc    hidr_buttons, #12
3d004                 | 
3d004     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3d008     5F 73 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3d00c     7A BB 7A FF 
3d010     0F 74 07 F6 |                 mov     htmp1, ##$F576_F40F
3d014     F9 FF 7F FF 
3d018     12 77 07 F6 |                 mov     htmp2, ##$FFFF_F312
3d01c     BA 73 5F F9 |                 altgn   htmp, #htmp1
3d020     00 72 43 F8 |                 getnib  htmp
3d024     B9 1B C3 08 |         _ret_   setbyte hidr_hats, htmp, #0
3d028                 | 
3d028                 | '------------------------------------------------------------------------------
3d028                 | ' Handle PS3 controller
3d028                 | ' On entry:
3d028                 | '   ptrb - controller report
3d028                 | '------------------------------------------------------------------------------
3d028                 | '   Default implementation translates the report to a pseudo-defacto hid
3d028                 | '   standard and jumps to hpad_translate for actions.
3d028                 | '   Implementors may take specific actions for this kind of controller.
3d028                 | '------------------------------------------------------------------------------
3d028                 | hpad_ps3
3d028     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
3d02c     01 72 0F F2 |                 cmp     htmp, #$01      wz
3d030     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3d034                 | 
3d034                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3d034                 | 
3d034     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3d038     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3d03c                 | 
3d03c     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3d040     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3d044     98 FE BF FD |                 call    #hpad_normalize
3d048     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3d04c     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3d050     8C FE BF FD |                 call    #hpad_normalize
3d054     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3d058     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3d05c     80 FE BF FD |                 call    #hpad_normalize
3d060     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3d064     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3d068     74 FE BF FD |                 call    #hpad_normalize
3d06c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3d070     91 BF C6 FA |                 rdbyte  retval, ptrb[17]        ' RX = L2 analog
3d074     68 FE BF FD |                 call    #hpad_normalize
3d078     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3d07c     92 BF C6 FA |                 rdbyte  retval, ptrb[18]        ' RY = R2 analog
3d080     5C FE BF FD |                 call    #hpad_normalize
3d084     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3d088                 | 
3d088     08 8E 07 F6 |                 mov     hpar1, #8
3d08c     13 90 07 F6 |                 mov     hpar2, #19
3d090     E8 FD BF FD |                 call    #hpad_getbits
3d094                 | 
3d094     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3d098     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3d09c     00 18 47 F4 |                 bitc    hidr_buttons, #0
3d0a0     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3d0a4     01 18 47 F4 |                 bitc    hidr_buttons, #1
3d0a8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3d0ac     02 18 47 F4 |                 bitc    hidr_buttons, #2
3d0b0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3d0b4     03 18 47 F4 |                 bitc    hidr_buttons, #3
3d0b8     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3d0bc     04 18 47 F4 |                 bitc    hidr_buttons, #4
3d0c0     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3d0c4     05 18 47 F4 |                 bitc    hidr_buttons, #5
3d0c8     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3d0cc     06 18 47 F4 |                 bitc    hidr_buttons, #6
3d0d0     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3d0d4     07 18 47 F4 |                 bitc    hidr_buttons, #7
3d0d8     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3d0dc     08 18 47 F4 |                 bitc    hidr_buttons, #8
3d0e0     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3d0e4     09 18 47 F4 |                 bitc    hidr_buttons, #9
3d0e8     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3d0ec     0A 18 47 F4 |                 bitc    hidr_buttons, #10
3d0f0     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3d0f4     0B 18 47 F4 |                 bitc    hidr_buttons, #11
3d0f8     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3d0fc     0C 18 47 F4 |                 bitc    hidr_buttons, #12
3d100                 | 
3d100     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3d104     5F 73 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3d108     09 FA 79 FF 
3d10c     0F 74 07 F6 |                 mov     htmp1, ##$F3F4_120F
3d110     FF FA 7F FF 
3d114     76 77 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3d118     BA 73 5F F9 |                 altgn   htmp, #htmp1
3d11c     00 72 43 F8 |                 getnib  htmp
3d120     B9 1B C3 08 |         _ret_   setbyte hidr_hats, htmp, #0
3d124                 | 
3d124                 | 
3d124                 | '------------------------------------------------------------------------------
3d124                 | ' Perform controller actions
3d124                 | ' On entry:
3d124                 | '    hidr_id        report id
3d124                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3d124                 | '                      X = hidr_axis+0, #0
3d124                 | '                      Y = hidr_axis+0, #1
3d124                 | '                      Z = hidr_axis+1, #0
3d124                 | '                     RX = hidr_axis+1, #1
3d124                 | '                     RY = hidr_axis+2, #0
3d124                 | '                     RZ = hidr_axis+2, #1
3d124                 | '                     Sl = hidr_axis+3, #0
3d124                 | '                     Wh = hidr_axis+3, #1
3d124                 | '    hidr_buttons   buttons state (bits 0 to 31)
3d124                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3d124                 | '
3d124                 | '                     -------3 -------2 -------1 -------0 byte
3d124                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3d124                 | '    hidr_flags       xxxxxxxx_wsrrrzyx_hhhhaaaa_bbbbbbbb
3d124                 | '                              hlzyx||| |||||||| ++++++++ n. buttons
3d124                 | '                              |||||||| ||||++++--------- n. axes
3d124                 | '                              |||||||| ++++------------- n. hats
3d124                 | '                              ++++++++------------------ valid axes
3d124                 | '------------------------------------------------------------------------------
3d124                 | hpad_translate
3d124                 | 
3d124                 | 
3d124                 |         if HAVE_HIDPAD
3d124     A0 0C F0 FE |                 loc     ptrb,#hidpad_report
3d128     2D 73 0B F6 |                 mov     htmp,hdev_port          wz
3d12c     8F 73 03 A6 |         if_z    mov     htmp,hidr_id
3d130     01 72 E7 F2 |                 cmpsub  htmp,#1
3d134     07 1E 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3d138     02 1E 17 52 |         if_nz   cmp     hidr_id, #2             wc
3d13c     2D 00 7C 3D |         if_ae   ret     wcz
3d140     20 72 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3d144     B9 F3 03 F1 |                 add     ptrb,htmp
3d148     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3d14c     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3d150     28 0E 64 FD |                 setq    #8-1
3d154     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3d158                 |         end
3d158                 | 
3d158                 | 
3d158                 |         if EMUPAD_MAX_PLAYER > 0
3d158                 | .emupad_no_hat
3d158                 |         if EMUPAD_BT0_BIT >= 0
3d158                 |         end
3d158                 |         if EMUPAD_BT1_BIT >= 0
3d158                 |         end
3d158                 |         if EMUPAD_BT2_BIT >= 0
3d158                 |         end
3d158                 |         if EMUPAD_BT3_BIT >= 0
3d158                 |         end
3d158                 |         if EMUPAD_BT4_BIT >= 0
3d158                 |         end
3d158                 |         if EMUPAD_BT5_BIT >= 0
3d158                 |         end
3d158                 |         if EMUPAD_BT6_BIT >= 0
3d158                 |         end
3d158                 |         if EMUPAD_BT7_BIT >= 0
3d158                 |         end
3d158                 |         if EMUPAD_BT8_BIT >= 0
3d158                 |         end
3d158                 |         if EMUPAD_BT9_BIT >= 0
3d158                 |         end
3d158                 | .emupad_slot_over
3d158                 |         end
3d158                 | 
3d158                 |         if 0
3d158                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3d158                 | 
3d158                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3d158                 | 
3d158                 |         end
3d158     2D 00 64 FD |                 ret
3d15c                 | end
3d15c                 | 
3d15c                 | if EMUPAD_MAX_PLAYER > 0
3d15c                 | '------------------------------------------------------------------------------
3d15c                 | ' Clear EmuPad state
3d15c                 | '------------------------------------------------------------------------------
3d15c                 | emupad_reset
3d15c                 | 
3d15c                 | '------------------------------------------------------------------------------
3d15c                 | ' Get EmuPad Player number for current device (into retval)
3d15c                 | ' Z flag is also set if current device is valid
3d15c                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3d15c                 | '------------------------------------------------------------------------------
3d15c                 | emupad_getnum
3d15c                 | .loop
3d15c                 | '------------------------------------------------------------------------------
3d15c                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3d15c                 | '------------------------------------------------------------------------------
3d15c                 | emupad_discon
3d15c                 | .loop         
3d15c                 |         
3d15c                 |         ' FALL THROUGH!!!
3d15c                 | 
3d15c                 | '------------------------------------------------------------------------------
3d15c                 | ' Update EmuPad reports (all of them...)
3d15c                 | '------------------------------------------------------------------------------
3d15c                 | emupad_write_reports
3d15c                 | .devloop
3d15c                 | 
3d15c                 | end
3d15c                 | 
3d15c                 | 
3d15c                 | '------------------------------------------------------------------------------
3d15c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3d15c                 | '------------------------------------------------------------------------------
3d15c                 | ' On entry:
3d15c                 | ' On exit:
3d15c                 | '------------------------------------------------------------------------------
3d15c                 | hget_hub_status
3d15c     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3d160     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3d164     32 93 23 F9 |                 setword hpar3, hub_next_datax, #0
3d168     01 92 2F F9 |                 setword hpar3, #1, #1
3d16c     CF 02 A0 FD |                 call    #do_int_in
3d170     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d174     0C 00 90 AD |         if_z    jmp     #.data
3d178     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3d17c     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3d180     2D 00 64 FD |                 ret
3d184                 | .data
3d184     00 92 0F F2 |                 cmp     hpar3, #0               wz
3d188     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3d18c                 | 
3d18c     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3d190     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3d194     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3d198     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3d19c                 |                 debug(ubin_long(hub_status_chg))
3d19c                 | 
3d19c     01 5A 06 F6 |                 mov     hdev_port, #1
3d1a0                 | .loop
3d1a0     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3d1a4     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3d1a8     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3d1ac     F0 FF 9F 3D |         if_nc   jmp     #.loop
3d1b0     2D 00 64 FD |                 ret
3d1b4                 | 
3d1b4                 | hub_port_handler
3d1b4     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3d1b8     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d1bc     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d1c0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d1c4     55 02 A0 FD |                 call    #control_read
3d1c8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3d1cc                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3d1cc                 | 
3d1cc     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3d1d0     50 01 90 5D |         if_x0   jmp     #.other
3d1d4     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3d1d8     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3d1dc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d1e0     A0 02 A0 FD |                 call    #control_write
3d1e4     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3d1e8     7C 01 90 5D |         if_x0   jmp     #.disconnect
3d1ec     B1 99 02 F6 |                 mov     hctwait, _100ms_
3d1f0     EF 02 A0 FD |                 call    #poll_waitx
3d1f4                 | 
3d1f4     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3d1f8     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3d1fc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d200     A0 02 A0 FD |                 call    #control_write
3d204                 | 
3d204     02 78 07 F6 |                 mov     htmp3, #2
3d208                 | .wait_reset
3d208     AD 99 02 F6 |                 mov     hctwait, _8ms_
3d20c     EF 02 A0 FD |                 call    #poll_waitx
3d210     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d214     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d218     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d21c     55 02 A0 FD |                 call    #control_read
3d220     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3d224     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3d228     F7 79 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3d22c                 | 
3d22c     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3d230     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3d234     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d238     A0 02 A0 FD |                 call    #control_write
3d23c                 | 
3d23c     24 72 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3d240                 | .wait_recover
3d240     A8 99 02 F6 |                 mov     hctwait, _1ms_
3d244     EF 02 A0 FD |                 call    #poll_waitx
3d248     FD 73 6F FB |                 djnz    htmp,#.wait_recover
3d24c                 | 
3d24c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3d250     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3d254     0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3d258                 | 
3d258     00 08 00 FF 
3d25c     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3d260     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3d264     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3d268     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3d26c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3d270     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d274     48 01 90 5D |         if_nz   jmp     #.done
3d278                 | .get_dev_desc
3d278     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3d27c     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3d280     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3d284     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3d288     2D 73 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3d28c     01 73 57 FC |                 wrword  htmp, ptra[wValue]
3d290     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3d294     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d298     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3d29c     AD 99 02 F6 |                 mov     hctwait, _8ms_
3d2a0     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3d2a4     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3d2a8     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3d2ac     BE 00 A0 FD |                 call    #calc_crc5
3d2b0     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3d2b4     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3d2b8     F7 AD C2 FA |                 rdbyte  total_data, pb
3d2bc     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3d2c0     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3d2c4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d2c8     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3d2cc     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3d2d0     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3d2d4                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3d2d4     A0 99 02 F6 |                 mov     hctwait, _500us_
3d2d8     EF 02 A0 FD |                 call    #poll_waitx
3d2dc     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3d2e0     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3d2e4     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3d2e8     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3d2ec     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d2f0     CC 00 90 5D |         if_nz   jmp     #.done
3d2f4     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3d2f8     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3d2fc     61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3d300     61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3d304     00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3d308     09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3d30c     02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3d310     56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
3d314     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3d318     A4 00 90 CD |         if_b    jmp     #.done
3d31c     68 F0 BF FD |                 call    #hparse_con_desc
3d320     9C 00 90 FD |                 jmp     #.done
3d324                 | 
3d324                 | .other
3d324     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3d328     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3d32c     28 00 90 AD |         if_x1   jmp     #.reset_feature
3d330     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3d334     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3d338     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3d33c     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3d340     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3d344     10 00 90 AD |         if_x1   jmp     #.reset_feature
3d348     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3d34c     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3d350     04 00 90 AD |         if_x1   jmp     #.reset_feature
3d354     68 00 90 FD |                 jmp     #.done
3d358                 | .reset_feature
3d358     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3d35c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d360     A0 02 A0 FD |                 call    #control_write
3d364     58 00 90 FD |                 jmp     #.done
3d368                 | .disconnect
3d368                 | 
3d368     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3d36c     00 72 E3 F8 |                 getbyte htmp
3d370     03 72 0F F2 |                 cmp     htmp,#KB_READY wz
3d374     05 72 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3d378     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3d37c     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3d380     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3d384     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3d388                 |         if EMUPAD_MAX_PLAYER > 0
3d388                 |         end
3d388                 |         if HAVE_MOUSE
3d388     04 72 0F F2 |                 cmp     htmp, #M_READY          wz
3d38c     05 72 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3d390     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3d394                 |         end
3d394                 |         if HAVE_HIDPAD
3d394     30 0A F0 FE |                 loc ptrb,#hidpad_report
3d398     2D 73 03 F6 |                 mov htmp,hdev_port
3d39c     01 72 E7 F2 |                 cmpsub htmp,#1
3d3a0     20 72 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3d3a4     B9 F3 03 F1 |                 add ptrb,htmp
3d3a8     28 0E 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3d3ac     80 01 6C FC |                 wrlong #0,ptrb
3d3b0                 |         end
3d3b0                 | 
3d3b0     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3d3b4     00 00 C4 F8 |                 setbyte #0
3d3b8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3d3bc     00 00 04 F6 |                 mov     0-0, #0
3d3c0                 | 
3d3c0                 | .done
3d3c0     0E 6A 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3d3c4     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3d3c8     22 6F 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3d3cc     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3d3d0     A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3d3d4     A4 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3d3d8                 | 
3d3d8     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d3dc     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d3e0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d3e4     55 02 A0 FD |                 call    #control_read
3d3e8     00 69 06 FB |                 rdlong  hub_port_status, ptra
3d3ec                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3d3ec     2D 00 64 FD |                 ret
3d3f0                 | 
3d3f0                 | '------------------------------------------------------------------------------
3d3f0                 | ' Partially populated SETUP packets
3d3f0                 | '------------------------------------------------------------------------------
3d3f0     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d3f1     06          |                 byte    REQ_GET_DESC
3d3f2     00 01       |                 word    TYPE_DEVICE << 8
3d3f4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d3f6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d3f8     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d3f9     06          |                 byte    REQ_GET_DESC
3d3fa     00 02       |                 word    TYPE_CONFIG << 8
3d3fc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d3fe     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d400     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3d401     09          |                 byte    REQ_SET_CONFIG
3d402     00 00       |                 word    0       ' Configuration value
3d404     00 00       |                 word    0       ' Zero
3d406     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3d408     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3d409     05          |                 byte    REQ_SET_ADDR
3d40a     00 00       |                 word    0       ' Zero
3d40c     00 00       |                 word    0       ' Zero
3d40e     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3d410                 | '------------------------------------------------------------------------------
3d410                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3d410                 | ' wValue field dictates which protocol should be used.
3d410                 | '
3d410                 | ' When initialized, all devices default to report protocol. However the host
3d410                 | ' should not make any assumptions about the device state and should set the
3d410                 | ' desired protocol whenever initializing a device.
3d410                 | '------------------------------------------------------------------------------
3d410     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d411     0B          |                 byte    HID_SET_PROTO
3d412     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3d414                 |                                                 ' (HID 1.11 Section 7.2.6).
3d414     00 00       |                 word    0               ' Interface index number.
3d416     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3d418                 | '------------------------------------------------------------------------------
3d418     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d419     0A          |                 byte    HID_SET_IDLE
3d41a     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3d41c                 |                                         ' reporting until a change is detected in the report data
3d41c                 | 
3d41c                 |                                         ' (HID 1.11 Section 7.2.4).
3d41c     00 00       |                 word    0       ' Interface index number.
3d41e     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3d420     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d421     09          |                 byte    HID_SET_REPORT
3d422     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3d424                 |                                         ' (HID 1.11 Section 7.2.2).
3d424     00 00       |                 word    0       ' Interface index number.
3d426     00 00       |                 word    0       ' Size of the report, in bytes.
3d428     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3d429     06          |                 byte    REQ_GET_DESC
3d42a     00 22       |                 word    TYPE_REPORT << 8
3d42c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d42e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d430                 | '------------------------------------------------------------------------------
3d430     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3d431     06          |                 byte    REQ_GET_DESC
3d432     00 29       |                 word    TYPE_HUB << 8
3d434     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d436     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d438     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3d439     03          |                 byte    REQ_SET_FEATURE
3d43a     00 00       |                 word    0       ' port power
3d43c     01 00       |                 word    1       ' Port index number (1+)
3d43e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d440     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3d441     01          |                 byte    REQ_CLEAR_FEATURE
3d442     00 00       |                 word    0       ' port power
3d444     01 00       |                 word    1       ' Port index number (1+)
3d446     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d448     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3d449     00          |                 byte    REQ_GET_STATUS
3d44a     00 00       |                 word    0
3d44c     01 00       |                 word    1       ' Port index number (1+)
3d44e     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3d450                 | '------------------------------------------------------------------------------
3d450                 | if _HAVE_GAMEPAD
3d450     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3d454                 | ps3_command_buff
3d454     00 00 00 00 
3d458     00          |                 byte    $00, $00, $00, $00, $00
3d459     00 00 00 00 
3d45d     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3d45e     FF 27 10 00 
3d462     32          |                 byte    $FF, $27, $10, $00, $32
3d463     FF 27 10 00 
3d467     32          |                 byte    $FF, $27, $10, $00, $32
3d468     FF 27 10 00 
3d46c     32          |                 byte    $FF, $27, $10, $00, $32
3d46d     FF 27 10 00 
3d471     32          |                 byte    $FF, $27, $10, $00, $32
3d472     00 00 00 00 
3d476     00          |                 byte    $00, $00, $00, $00, $00
3d477     00 00 00 00 
3d47b     00          |                 byte    $00, $00, $00, $00, $00
3d47c     00 00 00 00 
3d480     00          |                 byte    $00, $00, $00, $00, $00
3d481     00 00 00    |                 byte    $00, $00, $00
3d484                 | '------------------------------------------------------------------------------
3d484     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3d487                 |                                         ' 0x01 All blinking
3d487                 |                                         ' 0x02 1 flashes, then on
3d487                 |                                         ' 0x03 2 flashes, then on
3d487                 |                                         ' 0x04 3 flashes, then on
3d487                 |                                         ' 0x05 4 flashes, then on
3d487                 |                                         ' 0x06 1 on
3d487                 |                                         ' 0x07 2 on
3d487                 |                                         ' 0x08 3 on
3d487                 |                                         ' 0x09 4 on
3d487                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3d487                 |                                         ' 0x0B Blinking*
3d487                 |                                         ' 0x0C Slow blinking*
3d487                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3d487     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3d48a     00          |                 byte    $00             ' Left rumble
3d48b     00          |                 byte    $00             ' Right rumble
3d48c     00 00 00    |                 byte    $00, $00, $00
3d48f                 | 
3d48f                 | xinp_fix_8bitdo '' This inexplicable String request (that WILL fail) somehow un-bugs the terrible firmware
3d48f                 |                 '' of certain wired 8bitdo gamepads.
3d48f     80          |                 byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d490     06          |                 byte    REQ_GET_DESC
3d491     04 03       |                 word    TYPE_STRING << 8 + 4
3d493     09 04       |                 word    $0409   ' Zero or Language ID (Section 9.6.7)
3d495     02 00       |                 word    2       ' Number of bytes to transfer if there is a data stage
3d497     00          | end
3d498                 | alignl
3d498                 | 
3d498                 | if HAVE_MOUSE
3d498     00 00 00 00 
3d49c     00 00 00 00 | mouse_limits long 0[2]
3d4a0     00 00 00 00 | mouse_outptr long 0
3d4a4                 | end
3d4a4                 | 
3d4a4                 | if KEYQUEUE_SIZE > 0
3d4a4     00          | keyq_head byte 0
3d4a5     00          | keyq_tail byte 0
3d4a6     00 00 00 00 
      ...             
3d6a2     00 00 00 00 
3d6a6     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3d6a8                 | alignl
3d6a8                 | end
3d6a8                 | 
3d6a8                 | if EMUPAD_MAX_PLAYER > 0
3d6a8                 | emupad_rule_buffer
3d6a8                 | if EMUPAD_BUILTIN_RULES
3d6a8                 | file "padmap_builtin.dat"
3d6a8                 | end
3d6a8                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3d6a8                 | '' Default rule directly follows!
3d6a8                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3d6a8                 | end
3d6a8                 | 
3d6a8                 | '------------------------------------------------------------------------------
3d6a8                 | ' The USB data cache area gets zero-filled at every device disconnect
3d6a8                 | '------------------------------------------------------------------------------
3d6a8                 | usb_cache_start
3d6a8                 | 
3d6a8                 | ' HID descriptor and report buffers
3d6a8                 | if !!OVERLAP_MEMORY
3d6a8     00 00 00 00 
      ...             
3dda0     00 00 00 00 
3dda4     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3dda8                 | end
3dda8     00 00 00 00 
3ddac     00 00 00 00 | hkbd_report     byte    0[8]
3ddb0     00 00 00 00 | hkbd_led_rep    byte    0
3ddb4                 | alignl
3ddb4                 | 
3ddb4     00 00 00 00 
3ddb8     00 00 00 00 
3ddbc     00 00 00 00 
3ddc0     00 00 00 00 
3ddc4     00 00 00 00 | hid_stack       long 0[(hidr_end - hidr_state) * 1]
3ddc8                 | 
3ddc8                 | if HAVE_HIDPAD
3ddc8     00 00 00 00 
      ...             
3dea0     00 00 00 00 
3dea4     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3dea8                 | end
3dea8                 | 
3dea8                 | ' HUB descriptor
3dea8     00          | hub_descr       byte    0   ' bDescLength
3dea9     00          |                 byte    0   ' bDescriptorType
3deaa     00          |                 byte    0   ' bNbrPorts
3deab     00 00       |                 word    0   ' wHubCharacteristics
3dead     00          |                 byte    0   ' bPwrOn2PwrGood
3deae     00          |                 byte    0   ' bHubContrCurrent
3deaf     00          |                 byte    0   ' DeviceRemoveable
3deb0     00          |                 byte    0   ' PortPwrCtrlMask
3deb1                 | 
3deb1                 | usb_cache_end
3deb1                 | 
3deb1                 | if HAVE_MOUSE
3deb1     00 00 00 00 | mouse_xacc      long 0
3deb5     00 00 00 00 | mouse_yacc      long 0
3deb9     00 00 00 00 | mouse_zacc      long 0
3debd     00          | mouse_bstate    byte 0
3debe     00          | mouse_lpending  byte 0
3debf     00          | mouse_rpending  byte 0
3dec0     00          | mouse_mpending  byte 0
3dec1     00          | mouse_lock      byte 0
3dec2     00 00 00    |                 byte 0[3] ' padding
3dec5                 | end
3dec5                 | 
3dec5     00 00 00 00 
      ...             
3df3d     00 00 00 00 
3df41     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3df45     00 00 00 00 
3df49     00 00 00 00 
3df4d     00 00 00 00 
3df51     00 00 00 00 
3df55     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3df57     00 00 00 00 
      ...             
3e04f     00 00 00 00 
3e053     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3e057                 | 
3e057     00          | driver_cog      byte    0                       ' Current driver cog + 1
3e058                 | 	alignl
3e058                 | _Audio2_004_spin2_dat_
3e058                 | 
3e058                 | audio       	org     0
3e058                 | 
3e058     61 79 05 FB |             	rdlong  mailbox2, ptra++     	' get start address of all mailboxes
3e05c     61 B1 05 FB |             	rdlong  scbase, ptra++       	' get start address of scope buffer
3e060     61 BD 05 FB |             	rdlong  hubptr, ptra++       	' get start address of PSRAM cache
3e064                 | 
3e064     01 EC 63 FD |             	cogid   pa                   	' compute cogid
3e068     0C EC 07 FA |             	mul     pa, #12              	' and mailbox spacing
3e06c     F6 79 01 F1 |             	add     mailbox2, pa         	' add offset to find this COG's mailbox
3e070     BC 76 01 F6 |             	mov     mailbox, mailbox2     	' we need 2 copies of this to enable switching between hub and psram
3e074                 | 
3e074     0E BA 05 FC |             	wrpin   dac2,#left           	' PWM DACs at 44100@339 MHz
3e078     0E BE 15 FC |             	wxpin   sr44100,#left      	' 30*256
3e07c     0F BA 05 FC |             	wrpin   dac2,#right
3e080     0F BE 15 FC |             	wxpin   sr44100,#right    
3e084     41 9C 64 FD |             	dirh    #left addpins 1
3e088     20 9C 64 FD |             	setse1  #%001<<6 + left      	' Set the event - DAC empty
3e08c                 |   'debug(uhex(mailbox))
3e08c                 |             
3e08c                 | '---------------------------------------------------------------------------------        
3e08c                 | '----------------- The main loop -------------------------------------------------
3e08c                 | '---------------------------------------------------------------------------------
3e08c                 | 
3e08c     0F A8 05 F6 | loop       	mov 	    cn,#15 '7
3e090                 |               					'   waitx ##3300000  		'for debug
3e090                 |             
3e090                 | '----------------------------------------------------------------------------------
3e090                 | '------------- Get parameters and execute commands if any -------------------------
3e090                 | '----------------------------------------------------------------------------------
3e090                 | 
3e090                 | 
3e090     1A F6 61 FD | p401        	getct ct1
3e094     D4 70 01 F6 |                 mov     channeladd,cn             	' compute the pointer to channel parameters block
3e098     06 70 65 F0 |             	shl     channeladd,#6
3e09c     B8 F0 03 F1 |             	add     ptra,channeladd
3e0a0                 | 
3e0a0     28 1A 64 FD |             	setq    #13                       	' read parameters
3e0a4     00 7F 05 FB |             	rdlong  pointer0,ptra
3e0a8     1F 92 1D F4 | p408        	bitl    command0,#31 wcz	      	' bit #31 command - set the DAC sample rate
3e0ac     2C 00 90 3D |     	if_nc   jmp     #p404                     	' if not set, proceed
3e0b0     C9 72 01 F6 |             	mov     qq,command0             	' get the new rate
3e0b4     4E 72 15 FC |             	wxpin   qq,#left addpins 1        	' and program the pins
3e0b8     B9 72 E1 F8 |             	getbyte qq,qq,#0 		      	' check if the rate is n*256
3e0bc     00 72 0D F2 |             	cmp     qq,#0 wz                         
3e0c0     4E BA 05 AC |     	if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3e0c4     4E B8 05 5C |     	if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3e0c8                 |                 
3e0c8     1E 88 1D F4 |                	bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3e0cc     00 7E 05 A6 |     	if_z    mov     pointer0, #0  
3e0d0     00 80 05 A6 |     	if_z    mov     pointer0h, #0  
3e0d4     00 86 05 A6 |     	if_z    mov     envph0, #0  
3e0d8     05 89 65 AC |     	if_z    wrlong  sstart0, ptra[5]          	' reset bit #30 in hub
3e0dc                 |     	
3e0dc     C4 72 01 F6 | p404        	mov     qq,sstart0		     	' check if start>$80000
3e0e0     FF FF 03 FF 
3e0e4     FF 73 05 F5 | 		and 	qq,##$7FFFFFF 
3e0e8     00 04 00 FF 
3e0ec     00 72 1D F2 |                 cmp 	qq,##$80000 wcz
3e0f0     BC 76 01 36 |     	if_ge   mov     mailbox,mailbox2          	' if yes, use PSRAM
3e0f4     00 76 05 C6 |     	if_lt   mov     mailbox,#0                	' if not, use HUB 
3e0f8                 |  ''debug(uhex(sstart0,mailbox))
3e0f8     C7 A4 39 F9 | p405           	getword apan0,volpan0,#1          	' extract vol,pan from longs 
3e0fc     C7 A2 31 F9 |     	    	getword avol0,volpan0,#0
3e100                 |     	'   debug(uhex(pointer0,pointer0h,sstart0)) 	
3e100                 | '----------------------------------------------------------------------------------
3e100                 | '------------- Compute the envelope, if exists ------------------------------------
3e100                 | '----------------------------------------------------------------------------------
3e100                 |             
3e100     00 94 1D F2 |             	cmp     envptr0,#0 wcz     		' read the pointer
3e104     20 00 00 AF 
3e108     00 F0 05 A6 |     	if_z    mov     envs1,##$4000			' if 0, no envelope, load $4000=1 for scas
3e10c     54 00 90 AD |     	if_z    jmp     #p410				' and run away	
3e110                 | 
3e110     CB 86 01 F1 |            	add     envph0,envspd0			' envelope PA update
3e114                 |            	           
3e114     C3 EC 01 F6 |       	    	mov     envhi, envph0			' move phase acc to high part of env pointer
3e118     06 EC 45 F0 | 		shr     envhi,#6			' leave 10 bits in hi
3e11c     F6 EE 31 F9 | 	   	getword envlo,envhi,#0              	' and 16 bit in lo
3e120     10 EC 45 F0 | 	    	shr     envhi,#16			' move 10 bits of hi to the lower word
3e124     CC EC 19 F2 | 	    	cmp     envhi,envlen0 wcz		' compare this to envelope length
3e128                 | 	    											'debug(udec(envhi,envlen0))
3e128     CC EC 01 36 |     	if_ge  	mov     envhi,envlen0			' if greater than, set it at envlen
3e12c     00 EE 05 36 |     	if_ge   mov     envlo,#0
3e130     CC 86 01 36 |     	if_ge   mov     envph0,envlen0             	' and set envph0 at the end of the envelope
3e134     16 86 65 30 |     	if_ge   shl     envph0,#22
3e138                 | 
3e138     F6 F0 01 F6 |             	mov 	envs1,envhi			' 10 high bits of PA is the offset to the envelope entry
3e13c     01 F0 65 F0 |             	shl 	envs1,#1                        ' these entries are 16 bit so multiply the offset by 2
3e140     CA F0 01 F1 |             	add 	envs1,envptr0                   ' and add it to the pointer
3e144     F8 F0 01 FB |             	rdlong 	envs1,envs1			' and then read 2 entries in one rdlong
3e148     F8 F2 39 F9 |             	getword envs2,envs1,#1			' then separate them		
3e14c     F8 F0 31 F9 |            	getword envs1,envs1,#0
3e150     F7 F2 01 FA |             	mul     envs2,envlo                     ' and do linear interpolation based on lower bits of the offset
3e154     F7 EE 21 F6 |             	not     envlo
3e158     F7 F0 01 FA |             	mul     envs1,envlo
3e15c     F9 F0 01 F1 |             	add     envs1,envs2
3e160     12 F0 45 F0 |             	shr     envs1,#18			' we need only 14 bits for scas
3e164                 |               
3e164                 | '----------------------------------------------------------------------------------
3e164                 | '------------- Generate the noise if bit 27 of the pointer is set -----------------
3e164                 | '----------------------------------------------------------------------------------
3e164                 | 
3e164                 | 
3e164                 |     	
3e164                 | '----------------------------------------------------------------------------------
3e164                 | '------------- Get the sample -----------------------------------------------------
3e164                 | '----------------------------------------------------------------------------------    	
3e164                 |  
3e164     C0 A6 01 F6 | p410  		mov	oldptrh,pointer0h
3e168     C8 A0 F9 F8 |            	getbyte	afreq0,freqskip0,#3         	' the frequency is in 8:24 format, so get integer in afreq0
3e16c     08 90 65 F0 |            	shl	freqskip0,#8                	' and keep the fractional in freqskip0
3e170     C8 7E 19 F1 |            	add     pointer0,freqskip0 wcz      	' compute the pointer to the next sample   
3e174     D0 80 21 F1 |            	addx	pointer0h,afreq0  
3e178                 |           	
3e178     1B 88 0D F4 |    	   	testb   sstart0, #27 wz
3e17c     10 00 90 5D |     	if_nz	jmp #p412   	
3e180     1B 74 61 CD |    	if_c  	getrnd  spl
3e184     BA 84 41 C9 |    	if_c	rolword rawspl0,spl,#0	
3e188     C2 74 31 F9 |    		getword spl,rawspl0,#0
3e18c     90 00 90 FD |       	        jmp     #p406          	
3e190                 |            	
3e190                 |            	
3e190     D3 80 19 F2 | p412 		cmp	pointer0h,oldptrh wcz
3e194     58 00 90 AD |  	if_e 	jmp 	#p411				' if the pointer didn't change, no sample has to be read
3e198                 |      	
3e198     1F 88 0D F4 |             	testb   sstart0,#31 wz       	   	' bit 31 : 16 bit sample  
3e19c     01 80 65 A0 |      	if_z    shl     pointer0h,#1        
3e1a0     1C 88 0D F4 |             	testb   sstart0,#28 wz  		' bit 28 : interleaved sample         
3e1a4     01 80 65 A0 |      	if_z    shl     pointer0h,#1        
3e1a8                 | 												
3e1a8     C6 80 19 F2 |             	cmp     pointer0h,lend0 wcz		' check if end of the loop reached
3e1ac     C6 80 81 31 |    	if_ge   sub     pointer0h,lend0       
3e1b0     C5 80 01 31 |         if_ge   add     pointer0h,lstart0
3e1b4     C6 80 19 F2 |             	cmp     pointer0h,lend0 wcz		' check if end of the loop reached
3e1b8     C6 80 01 36 |         if_ge   mov	pointer0h,lend0	
3e1bc                 |  
3e1bc     C0 72 01 F6 |              	mov     qq,pointer0h              	' compute place in the memory from where the sample will be loaded
3e1c0     C4 72 01 F1 |            	add     qq,sstart0            
3e1c4     FF FF 00 FF 
3e1c8     FF 73 05 F5 |            	and  	qq,##$1FF_FFFF
3e1cc     FF 77 5D F2 |            	cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3e1d0     B9 74 E1 EA |     	if_le   rdword  spl,qq                      	' if not, use HUB RAM for samples
3e1d4     00 01 B0 1D |     	if_gt   call    #cache_read
3e1d8     1F 88 0D F4 |                 testb   sstart0,#31 wz 
3e1dc     08 74 65 50 |     	if_nz   shl     spl,#8				' convert 8 to 16 bit if needed
3e1e0     01 80 45 A0 |         if_z    shr     pointer0h,#1
3e1e4     1C 88 0D F4 |                 testb   sstart0,#28 wz            
3e1e8     01 80 45 A0 |     	if_z    shr     pointer0h,#1    
3e1ec     BA 84 41 F9 |                 rolword rawspl0,spl,#0			' now rawspl0 has oldsample:newsample in it
3e1f0                 |               
3e1f0     C2 74 31 F9 | p411	      	getword spl,rawspl0,#0
3e1f4     C2 9E 39 F9 | 		getword oldspl,rawspl0,#1		' then separate them		
3e1f8                 | 
3e1f8                 |           '  debug(uhex(pointer0h,pointer0,spl,oldspl))
3e1f8                 | 
3e1f8                 | 
3e1f8     BF EE 01 F6 | 		mov	envlo,pointer0
3e1fc     12 EE 45 F0 | 		shr 	envlo,#18
3e200                 | 	
3e200     F7 74 31 FA |             	scas    spl,envlo                   	' and do linear interpolation
3e204     00 74 01 F6 |             	mov 	spl,0-0
3e208     F7 EE 21 F6 |             	not     envlo
3e20c     1F 00 00 FF 
3e210     FF EF 05 F5 |           	and     envlo,##$3FFF
3e214     F7 9E 31 FA |            	scas    oldspl,envlo
3e218     00 9E 01 F6 |             	mov     oldspl,0-0
3e21c     CF 74 01 F1 |                 add     spl, oldspl
3e220                 | 	 
3e220     F8 74 31 FA | p406        	scas    spl, envs1
3e224     00 74 01 F6 |             	mov     spl,0-0
3e228     D1 74 31 FA |             	scas    spl,avol0                 	' apply volume
3e22c     00 74 01 F6 |             	mov     spl,0-0
3e230                 |  
3e230     D2 74 31 FA |             	scas    spl,apan0                 	' apply pan
3e234     00 AA 01 F6 |             	mov     ls0,0-0
3e238     20 00 00 FF 
3e23c     00 72 05 F6 |             	mov     qq,##16384
3e240     D2 72 81 F1 |             	sub     qq,apan0
3e244     B9 74 31 FA |             	scas    spl,qq
3e248     00 AC 01 F6 |             	mov     rs0, 0-0
3e24c                 |       
3e24c     D6 82 29 F9 |                 setword sample0,rs0,#1           	' pack samples into long
3e250     D5 82 21 F9 |                 setword sample0,ls0,#0
3e254                 |                 
3e254     D5 7A 01 F1 |                 add  lsample,ls0
3e258     D6 7C 01 F1 |                 add  rsample,rs0
3e25c                 |              
3e25c     1E 88 1D F4 |             	bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3e260     00 7E 05 A6 |     	if_z    mov     pointer0, #0  
3e264     00 80 05 A6 |     	if_z    mov     pointer0h, #0  
3e268     00 86 05 A6 |     	if_z    mov     envph0, #0  
3e26c     05 89 65 AC |     	if_z    wrlong  sstart0, ptra[5]          	' reset bit #30 in hub
3e270                 |             
3e270     28 08 64 FD | p403        	setq #4                          	' write new pointer, sample values and env pointer to the hub
3e274     00 7F 65 FC | 	       	wrlong  pointer0,ptra
3e278     B8 F0 83 F1 |             	sub     ptra, channeladd         	' reset the pointer to channel parameters
3e27c                 | 
3e27c     84 A9 7D FB |             	djnf    cn, #p401
3e280                 | 
3e280     0F 7C E5 F4 |             	bitnot rsample, #15
3e284     0F 7A E5 F4 |             	bitnot lsample, #15
3e288     1A F8 61 FD |   							           	getct ct2  	'debug
3e28c     FB F8 81 F1 |   							          	sub ct2,ct1
3e290                 |   							          	debug(udec(ct2))
3e290     24 28 60 FD |             	waitse1
3e294                 |           
3e294     0E 7A 25 FC |            	wypin   lsample, #left              
3e298     0F 7C 25 FC |                 wypin   rsample, #right        
3e29c                 | 
3e29c     BD AE 21 F9 | 		setword oldsample, lsample,#0		' for oscilloscope
3e2a0     BE AE 29 F9 | 		setword oldsample, rsample,#1
3e2a4                 | 		
3e2a4     00 7C 05 F6 |             	mov rsample, #0
3e2a8     00 7A 05 F6 |             	mov lsample, #0
3e2ac                 | 
3e2ac                 | '----------------------------------------------------------------------------------
3e2ac                 | '------------- Oscilloscope  -----------------------------------------------------
3e2ac                 | '----------------------------------------------------------------------------------   
3e2ac                 | 		
3e2ac     00 B0 0D F2 | 	    	cmp     scbase,#0 wz
3e2b0     20 00 90 AD |     	if_z    jmp #p302	   
3e2b4                 |  
3e2b4     01 B6 15 F7 |             	incmod  scope,#1 wc            		'  todo: scope speed instead of const  
3e2b8     D9 B4 01 C6 |     	if_c    mov scptr2,scptr
3e2bc     02 B4 65 C0 |     	if_c    shl scptr2,#2
3e2c0     D8 B4 01 C1 |     	if_c    add scptr2,scbase     
3e2c4     60 B4 65 FC |             	wrlong scptr2,#$60
3e2c8     DA AE 61 CC |     	if_c    wrlong oldsample,scptr2
3e2cc     01 00 00 CF 
3e2d0     7F B2 05 C7 |     	if_c    incmod scptr,##639
3e2d4                 |             
3e2d4     B4 FD 9F FD |  p302           jmp     #loop            'loop
3e2d8                 | 
3e2d8                 | '----------------------------------------------------------------------------------
3e2d8                 | '------------- This is the end of the main loop -----------------------------------
3e2d8                 | '----------------------------------------------------------------------------------
3e2d8                 | 
3e2d8                 | '----------------------------------------------------------------------------------
3e2d8                 | '------------- PSRAM cache ----------- --------------------------------------------
3e2d8                 | '----------------------------------------------------------------------------------
3e2d8                 | 
3e2d8                 | ' There are 16 cache pointers for 16 channels
3e2d8                 | ' if 24 higher bits of address=cache, then get a word from the cache
3e2d8                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3e2d8                 | 
3e2d8                 | 
3e2d8     B9 E6 E1 F8 | cache_read  	getbyte addrlo,qq,#0 			' when this is called, qq is the addres of the sample			
3e2dc                 |          '   debug ("cache")
3e2dc     B9 E8 01 F6 | 	   	mov     addrhi,qq		
3e2e0     08 E8 45 F0 | 	    	shr     addrhi,#8		        ' get 24 upper bits
3e2e4     E0 A8 95 F9 | 	    	alts    cn,#cache1            
3e2e8     00 E8 09 F2 | 	    	cmp	addrhi,0-0 wz               	' and compare with the cache pointer for the channel
3e2ec     34 00 90 AD |    	if_z    jmp     #p701	    			' if equal, cache hit, read the sample from it
3e2f0                 | 
3e2f0     E0 A8 8D F9 | p702	    	altd    cn,#cache1			' cache miss. 
3e2f4     F4 00 00 F6 | 	    	mov     0-0,addrhi                  	' update the pointer
3e2f8                 | 	    ''	 debug(uhex(addrhi))
3e2f8     F4 E0 01 F6 | 	    	mov     cmd,addrhi			' prepare the mailbox
3e2fc     08 E0 65 F0 | 	    	shl     cmd,#8
3e300     0B E0 3D F8 |             	setnib  cmd, #%1011, #7             	' read burst from the external memory
3e304     D4 E2 01 F6 |             	mov     hubaddr,cn                  	' to the channel cache
3e308     08 E2 65 F0 |             	shl     hubaddr,#8                  	'
3e30c     DE E2 01 F1 |             	add     hubaddr,hubptr 
3e310     00 E5 05 F6 |             	mov     count,#256                  	' 256 bytes
3e314     28 04 64 FD |             	setq    #2                          	' write 3 longs
3e318     BB E0 61 FC |             	wrlong  cmd, mailbox                	' run it
3e31c     BB E0 01 FB | poll1       	rdlong  cmd, mailbox                	' poll mailbox for result
3e320     FE E1 B5 FB |             	tjs     cmd, #poll1                 	' retry until valid 
3e324                 |             
3e324                 | 	
3e324     D4 72 01 F6 | p701	    	mov     qq,cn				' cache hit
3e328     08 72 65 F0 | 	    	shl     qq,#8				' compute the cache start
3e32c     DE 72 01 F1 | 	    	add     qq,hubptr
3e330     F3 72 01 F1 | 	    	add	qq,addrlo			' add 8 lower bits to the cache addredd
3e334     B9 74 E1 0A |     	_ret_   rdword  spl,qq                      	' read a long from the cache
3e338                 |           
3e338                 |   
3e338                 | 
3e338                 | 
3e338                 | '---------------------------------------------------------------------------
3e338                 | '------- Variables ---------------------------------------------------------
3e338                 | '---------------------------------------------------------------------------
3e338                 | 
3e338                 | ' constants
3e338                 | 
3e338     00 00 00 00 | channeladd 	long 0
3e33c                 | 
3e33c                 | ' temporary variables 
3e33c                 | 
3e33c     00 00 00 00 | qq          	long 0
3e340     00 00 00 00 | spl         	long 0
3e344     00 00 00 00 | mailbox     	long 0
3e348     00 00 00 00 | mailbox2    	long 0
3e34c     00 00 00 00 | lsample     	long 0
3e350     00 00 00 00 | rsample     	long 0
3e354                 | 
3e354                 | ' channel parameter block
3e354                 | 
3e354     00 00 00 00 | pointer0    	long 0   
3e358     00 00 00 00 | pointer0h   	long 0  
3e35c     00 00 00 00 | sample0     	long 0
3e360     00 00 00 00 | rawspl0	    	long 0
3e364     00 00 00 00 | envph0	    	long 0
3e368     00 00 00 00 | sstart0     	long 0     ' start pointer and type at bit 31
3e36c     00 00 00 00 | lstart0     	long 0
3e370     00 00 00 00 | lend0       	long 0
3e374     00 00 00 00 | volpan0     	long 0
3e378     00 00 00 00 | freqskip0   	long 0
3e37c     00 00 00 00 | command0    	long 0
3e380     00 00 00 00 | envptr0	    	long 0
3e384     00 00 00 00 | envspd0	    	long 0
3e388     00 00 00 00 | envlen0	    	long 0
3e38c     00 00 00 00 | res5	    	long 0
3e390     00 00 00 00 | res6	    	long 0
3e394                 | 
3e394     00 00 00 00 | oldspl		long 0
3e398     00 00 00 00 | afreq0      	long 0
3e39c                 | 
3e39c     00 00 00 00 | avol0       	long 0
3e3a0     00 00 00 00 | apan0       	long 0
3e3a4     00 00 00 00 | oldptrh	    	long 0
3e3a8     00 00 00 00 | cn          	long 0
3e3ac                 | 
3e3ac                 | ' Samples
3e3ac                 | 
3e3ac     00 00 00 00 | ls0         	long 0
3e3b0     00 00 00 00 | rs0         	long 0
3e3b4                 | 
3e3b4     00 00 00 00 | oldsample   	long 0
3e3b8                 | 
3e3b8     00 00 00 00 | scbase 		long 0
3e3bc     00 00 00 00 | scptr 		long 0
3e3c0     00 00 00 00 | scptr2		long 0
3e3c4     00 00 00 00 | scope 		long 0
3e3c8                 | 
3e3c8     44 00 17 00 | dac         	long %10111_00000000_01_00010_0     	'random dither
3e3cc     46 00 17 00 | dac2        	long %10111_00000000_01_00011_0     	'pwm
3e3d0                 | 
3e3d0     00 18 07 00 | hubptr      	long $71800
3e3d4     00 1E 00 00 | sr44100     	long 30*256
3e3d8                 | 
3e3d8     00 00 00 00 | cache1      	long 0
3e3dc     00 00 00 00 | cache2      	long 0
3e3e0     00 00 00 00 | cache3      	long 0
3e3e4     00 00 00 00 | cache4      	long 0
3e3e8     00 00 00 00 | cache5      	long 0
3e3ec     00 00 00 00 | cache6      	long 0
3e3f0     00 00 00 00 | cache7      	long 0
3e3f4     00 00 00 00 | cache8      	long 0
3e3f8     00 00 00 00 | cache9      	long 0
3e3fc     00 00 00 00 | cachea      	long 0
3e400     00 00 00 00 | cacheb      	long 0
3e404     00 00 00 00 | cachec      	long 0
3e408     00 00 00 00 | cached      	long 0
3e40c     00 00 00 00 | cachee      	long 0
3e410     00 00 00 00 | cachef      	long 0
3e414     00 00 00 00 | cache0      	long 0
3e418                 | 
3e418     00 00 00 00 | cmd         	long 0
3e41c     00 00 00 00 | hubaddr    	long 0
3e420     00 01 00 00 | count       	long 256
3e424                 | 
3e424     00 00 00 00 | addrlo 		long 0
3e428     00 00 00 00 | addrhi 		long 0
3e42c     00 00 00 00 | pointer00 	long 0
3e430     00 00 00 00 | envhi 		long 0
3e434     00 00 00 00 | envlo 		long 0
3e438     00 00 00 00 | envs1 		long 0
3e43c     00 00 00 00 | envs2 		long 0
3e440     00 00 00 00 | noise0 		long 0
3e444                 | 
3e444     00 00 00 00 |  ct1 		long 0
3e448     00 00 00 00 |  ct2 		long 0
3e44c                 | 
3e44c                 | 		fit 256		'todo: maybe the better interpolation. Or all params in cog
3e44c                 | 		fit 256		'todo: maybe the better interpolation. Or all params in cog
3e44c     00 00 00 00 
3e450     00 00 00 00 | null  			long 	0,0           ' for channel reset
3e454                 | 	alignl
3e454                 | __system__dat_
3e454     00 00 00 00 
3e458     00 00 00 00 | 	byte	$00[8]
3e45c     03 00 00 00 
3e460     00 00 00 00 
3e464     00 00 00 00 
3e468     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e46c     00 00 00 00 
      ...             
3e6f8     00 00 00 00 
3e6fc     00 00 00 00 | 	byte	$00[660]
3e700     00 00 40 0B | 	long	(180 {__system____root_opendir})<<20
3e704     00 00 50 0B | 	long	(181 {__system____root_closedir})<<20
3e708     00 00 60 0B | 	long	(182 {__system____root_readdir})<<20
3e70c     00 00 70 0B | 	long	(183 {__system____root_stat})<<20
3e710     00 00 00 00 
      ...             
3e72c     00 00 00 00 
3e730     00 00 00 00 | 	byte	$00[36]
3e734     9C E7 03 00 | 	long	@@@__system__dat_ + 840
3e738     9F E7 03 00 | 	long	@@@__system__dat_ + 843
3e73c     C0 E7 03 00 | 	long	@@@__system__dat_ + 876
3e740     D9 E7 03 00 | 	long	@@@__system__dat_ + 901
3e744     F4 E7 03 00 | 	long	@@@__system__dat_ + 928
3e748     0E E8 03 00 | 	long	@@@__system__dat_ + 954
3e74c     1E E8 03 00 | 	long	@@@__system__dat_ + 970
3e750     30 E8 03 00 | 	long	@@@__system__dat_ + 988
3e754     42 E8 03 00 | 	long	@@@__system__dat_ + 1006
3e758     54 E8 03 00 | 	long	@@@__system__dat_ + 1024
3e75c     60 E8 03 00 | 	long	@@@__system__dat_ + 1036
3e760     71 E8 03 00 | 	long	@@@__system__dat_ + 1053
3e764     85 E8 03 00 | 	long	@@@__system__dat_ + 1073
3e768     8F E8 03 00 | 	long	@@@__system__dat_ + 1083
3e76c     9F E8 03 00 | 	long	@@@__system__dat_ + 1099
3e770     AE E8 03 00 | 	long	@@@__system__dat_ + 1114
3e774     C4 E8 03 00 | 	long	@@@__system__dat_ + 1136
3e778     DD E8 03 00 | 	long	@@@__system__dat_ + 1161
3e77c     F1 E8 03 00 | 	long	@@@__system__dat_ + 1181
3e780     FF E8 03 00 | 	long	@@@__system__dat_ + 1195
3e784     13 E9 03 00 | 	long	@@@__system__dat_ + 1215
3e788     1F E9 03 00 | 	long	@@@__system__dat_ + 1227
3e78c     31 E9 03 00 | 	long	@@@__system__dat_ + 1245
3e790     49 E9 03 00 | 	long	@@@__system__dat_ + 1269
3e794     5B E9 03 00 | 	long	@@@__system__dat_ + 1287
3e798     6E E9 03 00 | 	long	@@@__system__dat_ + 1306
3e79c     4F 4B 00 4E 
3e7a0     75 6D 65 72 
3e7a4     69 63 61 6C 
3e7a8     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3e7ac     75 6D 65 6E 
3e7b0     74 20 6F 75 
3e7b4     74 20 6F 66 
3e7b8     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3e7bc     61 69 6E 00 
3e7c0     52 65 73 75 
3e7c4     6C 74 20 6E 
3e7c8     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3e7cc     65 70 72 65 
3e7d0     73 65 6E 74 
3e7d4     61 62 6C 65 
3e7d8     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3e7dc     65 67 61 6C 
3e7e0     20 6D 75 6C 
3e7e4     74 69 62 79 
3e7e8     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3e7ec     65 71 75 65 
3e7f0     6E 63 65 00 
3e7f4     4E 6F 20 73 
3e7f8     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3e7fc     66 69 6C 65 
3e800     20 6F 72 20 
3e804     64 69 72 65 
3e808     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3e80c     79 00 42 61 
3e810     64 20 66 69 
3e814     6C 65 20 6E 
3e818     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3e81c     72 00 50 65 
3e820     72 6D 69 73 
3e824     73 69 6F 6E 
3e828     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3e82c     69 65 64 00 
3e830     4E 6F 74 20 
3e834     65 6E 6F 75 
3e838     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3e83c     65 6D 6F 72 
3e840     79 00 54 65 
3e844     6D 70 6F 72 
3e848     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3e84c     66 61 69 6C 
3e850     75 72 65 00 
3e854     46 69 6C 65 
3e858     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3e85c     73 74 73 00 
3e860     49 6E 76 61 
3e864     6C 69 64 20 
3e868     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3e86c     6D 65 6E 74 
3e870     00 54 6F 6F 
3e874     20 6D 61 6E 
3e878     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3e87c     65 6E 20 66 
3e880     69 6C 65 73 
3e884     00 49 2F 4F 
3e888     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3e88c     6F 72 00 4E 
3e890     6F 74 20 61 
3e894     20 64 69 72 
3e898     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3e89c     72 79 00 49 
3e8a0     73 20 61 20 
3e8a4     64 69 72 65 
3e8a8     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3e8ac     79 00 52 65 
3e8b0     61 64 20 6F 
3e8b4     6E 6C 79 20 
3e8b8     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3e8bc     20 73 79 73 
3e8c0     74 65 6D 00 
3e8c4     46 75 6E 63 
3e8c8     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3e8cc     20 6E 6F 74 
3e8d0     20 69 6D 70 
3e8d4     6C 65 6D 65 
3e8d8     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3e8dc     00 44 69 72 
3e8e0     65 63 74 6F 
3e8e4     72 79 20 6E 
3e8e8     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3e8ec     6D 70 74 79 
3e8f0     00 4E 61 6D 
3e8f4     65 20 74 6F 
3e8f8     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3e8fc     6E 67 00 44 
3e900     65 76 69 63 
3e904     65 20 6E 6F 
3e908     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3e90c     65 6B 61 62 
3e910     6C 65 00 42 
3e914     61 64 20 61 
3e918     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3e91c     73 73 00 42 
3e920     72 6F 6B 65 
3e924     6E 20 63 6F 
3e928     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3e92c     74 69 6F 6E 
3e930     00 44 65 76 
3e934     69 63 65 20 
3e938     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3e93c     65 73 6F 75 
3e940     72 63 65 20 
3e944     62 75 73 79 
3e948     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3e94c     73 73 20 64 
3e950     65 76 69 63 
3e954     65 20 6C 69 
3e958     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3e95c     6F 20 73 70 
3e960     61 63 65 20 
3e964     6F 6E 20 64 
3e968     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3e96c     65 00 55 6E 
3e970     6B 6E 6F 77 
3e974     6E 20 65 72 
3e978     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3e97c     00 00 00 00 
3e980     00 00 00 00 
3e984     00 00 00 00 | 	byte	$00[12]
3e988     01 80 00 00 
3e98c     00 00 00 00 
3e990     00 00 00 00 
3e994     00 00 00 00 | 	byte	$01, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e998     00 00 00 00 | 	byte	$00, $00, $00, $00
3e99c     00 00 50 0D | 	long	(213 {__system___tx})<<20
3e9a0     00 00 60 0D | 	long	(214 {__system___rx})<<20
3e9a4     00 00 00 00 | 	byte	$00, $00, $00, $00
3e9a8     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3e9ac     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3e9b0     00 00 00 00 
3e9b4     00 00 00 00 | 	byte	$00[8]
3e9b8     01 00 00 00 
3e9bc     02 80 00 00 
3e9c0     00 00 00 00 
3e9c4     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e9c8     00 00 00 00 
3e9cc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3e9d0     00 00 50 0D | 	long	(213 {__system___tx})<<20
3e9d4     00 00 60 0D | 	long	(214 {__system___rx})<<20
3e9d8     00 00 00 00 | 	byte	$00, $00, $00, $00
3e9dc     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3e9e0     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3e9e4     00 00 00 00 
3e9e8     00 00 00 00 | 	byte	$00[8]
3e9ec     01 00 00 00 
3e9f0     02 80 00 00 
3e9f4     00 00 00 00 
3e9f8     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e9fc     00 00 00 00 
3ea00     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ea04     00 00 50 0D | 	long	(213 {__system___tx})<<20
3ea08     00 00 60 0D | 	long	(214 {__system___rx})<<20
3ea0c     00 00 00 00 | 	byte	$00, $00, $00, $00
3ea10     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3ea14     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3ea18     00 00 00 00 
      ...             
3eb88     00 00 00 00 
3eb8c     00 00 00 00 | 	byte	$00[376]
3eb90     94 EB 03 00 | 	long	@@@__system__dat_ + 1856
3eb94     00 00 00 00 
3eb98     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3eb9c                 | 	alignl
3eb9c                 | _fatfs_cc_dat_
3eb9c     C7 00 FC 00 
3eba0     E9 00 E2 00 
3eba4     E4 00 E0 00 
3eba8     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3ebac     EA 00 EB 00 
3ebb0     E8 00 EF 00 
3ebb4     EE 00 EC 00 
3ebb8     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3ebbc     C9 00 E6 00 
3ebc0     C6 00 F4 00 
3ebc4     F6 00 F2 00 
3ebc8     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3ebcc     FF 00 D6 00 
3ebd0     DC 00 F8 00 
3ebd4     A3 00 D8 00 
3ebd8     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3ebdc     E1 00 ED 00 
3ebe0     F3 00 FA 00 
3ebe4     F1 00 D1 00 
3ebe8     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3ebec     BF 00 AE 00 
3ebf0     AC 00 BD 00 
3ebf4     BC 00 A1 00 
3ebf8     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3ebfc     91 25 92 25 
3ec00     93 25 02 25 
3ec04     24 25 C1 00 
3ec08     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3ec0c     A9 00 63 25 
3ec10     51 25 57 25 
3ec14     5D 25 A2 00 
3ec18     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3ec1c     14 25 34 25 
3ec20     2C 25 1C 25 
3ec24     00 25 3C 25 
3ec28     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3ec2c     5A 25 54 25 
3ec30     69 25 66 25 
3ec34     60 25 50 25 
3ec38     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3ec3c     F0 00 D0 00 
3ec40     CA 00 CB 00 
3ec44     C8 00 31 01 
3ec48     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3ec4c     CF 00 18 25 
3ec50     0C 25 88 25 
3ec54     84 25 A6 00 
3ec58     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3ec5c     D3 00 DF 00 
3ec60     D4 00 D2 00 
3ec64     F5 00 D5 00 
3ec68     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3ec6c     DE 00 DA 00 
3ec70     DB 00 D9 00 
3ec74     FD 00 DD 00 
3ec78     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3ec7c     AD 00 B1 00 
3ec80     17 20 BE 00 
3ec84     B6 00 A7 00 
3ec88     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3ec8c     B0 00 A8 00 
3ec90     B7 00 B9 00 
3ec94     B3 00 B2 00 
3ec98     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3ec9c     61 00 1A 03 
3eca0     E0 00 17 03 
3eca4     F8 00 07 03 
3eca8     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3ecac     78 01 00 01 
3ecb0     30 01 32 01 
3ecb4     06 01 39 01 
3ecb8     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3ecbc     2E 01 79 01 
3ecc0     06 01 80 01 
3ecc4     4D 00 43 02 
3ecc8     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3eccc     82 01 84 01 
3ecd0     84 01 86 01 
3ecd4     87 01 87 01 
3ecd8     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3ecdc     8B 01 8B 01 
3ece0     8D 01 8E 01 
3ece4     8F 01 90 01 
3ece8     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3ecec     93 01 94 01 
3ecf0     F6 01 96 01 
3ecf4     97 01 98 01 
3ecf8     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3ecfc     9B 01 9C 01 
3ed00     9D 01 20 02 
3ed04     9F 01 A0 01 
3ed08     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3ed0c     A2 01 A4 01 
3ed10     A4 01 A6 01 
3ed14     A7 01 A7 01 
3ed18     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3ed1c     AB 01 AC 01 
3ed20     AC 01 AE 01 
3ed24     AF 01 AF 01 
3ed28     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3ed2c     B3 01 B3 01 
3ed30     B5 01 B5 01 
3ed34     B7 01 B8 01 
3ed38     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3ed3c     BB 01 BC 01 
3ed40     BC 01 BE 01 
3ed44     F7 01 C0 01 
3ed48     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3ed4c     C3 01 C4 01 
3ed50     C5 01 C4 01 
3ed54     C7 01 C8 01 
3ed58     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3ed5c     CB 01 CA 01 
3ed60     CD 01 10 01 
3ed64     DD 01 01 00 
3ed68     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3ed6c     12 01 F3 01 
3ed70     03 00 F1 01 
3ed74     F4 01 F4 01 
3ed78     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3ed7c     22 02 12 01 
3ed80     3A 02 09 00 
3ed84     65 2C 3B 02 
3ed88     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3ed8c     66 2C 3F 02 
3ed90     40 02 41 02 
3ed94     41 02 46 02 
3ed98     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3ed9c     40 00 81 01 
3eda0     86 01 55 02 
3eda4     89 01 8A 01 
3eda8     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3edac     5A 02 90 01 
3edb0     5C 02 5D 02 
3edb4     5E 02 5F 02 
3edb8     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3edbc     62 02 94 01 
3edc0     64 02 65 02 
3edc4     66 02 67 02 
3edc8     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3edcc     6A 02 62 2C 
3edd0     6C 02 6D 02 
3edd4     6E 02 9C 01 
3edd8     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3eddc     9D 01 73 02 
3ede0     74 02 9F 01 
3ede4     76 02 77 02 
3ede8     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3edec     7A 02 7B 02 
3edf0     7C 02 64 2C 
3edf4     7E 02 7F 02 
3edf8     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3edfc     82 02 A9 01 
3ee00     84 02 85 02 
3ee04     86 02 87 02 
3ee08     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3ee0c     B1 01 B2 01 
3ee10     45 02 8D 02 
3ee14     8E 02 8F 02 
3ee18     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3ee1c     B7 01 7B 03 
3ee20     03 00 FD 03 
3ee24     FE 03 FF 03 
3ee28     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3ee2c     86 03 88 03 
3ee30     89 03 8A 03 
3ee34     B1 03 11 03 
3ee38     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3ee3c     A3 03 A3 03 
3ee40     C4 03 08 03 
3ee44     CC 03 03 00 
3ee48     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3ee4c     8F 03 D8 03 
3ee50     18 01 F2 03 
3ee54     0A 00 F9 03 
3ee58     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3ee5c     F5 03 F6 03 
3ee60     F7 03 F7 03 
3ee64     F9 03 FA 03 
3ee68     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3ee6c     20 03 50 04 
3ee70     10 07 60 04 
3ee74     22 01 8A 04 
3ee78     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3ee7c     0E 01 CF 04 
3ee80     01 00 C0 04 
3ee84     D0 04 44 01 
3ee88     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3ee8c     00 00 7D 1D 
3ee90     01 00 63 2C 
3ee94     00 1E 96 01 
3ee98     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3ee9c     00 1F 08 06 
3eea0     10 1F 06 06 
3eea4     20 1F 08 06 
3eea8     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3eeac     40 1F 06 06 
3eeb0     51 1F 07 00 
3eeb4     59 1F 52 1F 
3eeb8     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3eebc     5D 1F 56 1F 
3eec0     5F 1F 60 1F 
3eec4     08 06 70 1F 
3eec8     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3eecc     BB 1F C8 1F 
3eed0     C9 1F CA 1F 
3eed4     CB 1F DA 1F 
3eed8     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3eedc     F9 1F EA 1F 
3eee0     EB 1F FA 1F 
3eee4     FB 1F 80 1F 
3eee8     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3eeec     08 06 A0 1F 
3eef0     08 06 B0 1F 
3eef4     04 00 B8 1F 
3eef8     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3eefc     BC 1F CC 1F 
3ef00     01 00 C3 1F 
3ef04     D0 1F 02 06 
3ef08     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3ef0c     E5 1F 01 00 
3ef10     EC 1F F3 1F 
3ef14     01 00 FC 1F 
3ef18     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3ef1c     32 21 70 21 
3ef20     10 02 84 21 
3ef24     01 00 83 21 
3ef28     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3ef2c     30 2C 2F 04 
3ef30     60 2C 02 01 
3ef34     67 2C 06 01 
3ef38     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3ef3c     80 2C 64 01 
3ef40     00 2D 26 08 
3ef44     41 FF 1A 03 
3ef48     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3ef4c     05 07 09 0E 
3ef50     10 12 14 16 
3ef54     18 1C 1E 43 
3ef58     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3ef5c     41 41 43 45 
3ef60     45 45 49 49 
3ef64     49 41 41 45 
3ef68     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3ef6c     4F 55 55 59 
3ef70     4F 55 4F 9C 
3ef74     4F 9E 9F 41 
3ef78     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3ef7c     A5 A6 A7 A8 
3ef80     A9 AA AB AC 
3ef84     AD AE AF B0 
3ef88     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3ef8c     41 41 41 B8 
3ef90     B9 BA BB BC 
3ef94     BD BE BF C0 
3ef98     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3ef9c     C5 41 41 C8 
3efa0     C9 CA CB CC 
3efa4     CD CE CF D1 
3efa8     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3efac     49 49 49 49 
3efb0     D9 DA DB DC 
3efb4     DD 49 DF 4F 
3efb8     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3efbc     4F E6 E8 E8 
3efc0     55 55 55 59 
3efc4     59 EE EF F0 
3efc8     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3efcc     F5 F6 F7 F8 
3efd0     F9 FA FB FC 
3efd4     FD FE FF 00 
3efd8     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3efdc     00 00 00 00 
3efe0     FF FF FF FF 
3efe4     1F 00 00 00 
3efe8     1C 00 00 00 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00
3efec     1F 00 00 00 
3eff0     1E 00 00 00 
3eff4     1F 00 00 00 
3eff8     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3effc     1F 00 00 00 
3f000     1F 00 00 00 
3f004     1E 00 00 00 
3f008     1F 00 00 00 | 	byte	$1f, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3f00c     1E 00 00 00 
3f010     1F 00 00 00 
3f014     00 00 00 00 
3f018     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00
3f01c     3B 00 00 00 
3f020     5A 00 00 00 
3f024     78 00 00 00 
3f028     97 00 00 00 | 	byte	$3b, $00, $00, $00, $5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00
3f02c     B5 00 00 00 
3f030     D4 00 00 00 
3f034     F3 00 00 00 
3f038     11 01 00 00 | 	byte	$b5, $00, $00, $00, $d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00
3f03c     30 01 00 00 
3f040     4E 01 00 00 
3f044     6D 01 00 00 
3f048     FF FF FF FF | 	byte	$30, $01, $00, $00, $4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff
3f04c     00 00 00 00 
      ...             
3f068     00 00 00 00 
3f06c     00 00 00 00 | 	byte	$00[36]
3f070     8E F0 03 00 | 	long	@@@_fatfs_cc_dat_ + 1266
3f074     92 F0 03 00 | 	long	@@@_fatfs_cc_dat_ + 1270
3f078     00 00 00 00 
3f07c     00 00 00 00 
3f080     00 00 00 00 
3f084     00 00 00 00 
3f088     00 00       | 	byte	$00[18]
3f08a     3F 3F 3F 00 
3f08e     55 43 54 00 
3f092     55 43 54 00 
3f096     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3f09a     00 00 00 00 
3f09e     00 00 00    | 	byte	$00[7]
3f0a1     CA 9A 3B 00 
3f0a5     00 00 00 01 
3f0a9     01 01 01 01 
3f0ad     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3f0b1     91 11 11 11 
3f0b5     11 01 01 01 
3f0b9     01 01 01 01 
3f0bd     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3f0c1     01 01 01 01 
3f0c5     01 01 01    | 	byte	$01[7]
3f0c8     90 20 20 20 
3f0cc     20 20 20 20 
3f0d0     20 20 20 20 
3f0d4     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3f0d8     42 42 42 42 
3f0dc     42 42 42 42 
3f0e0     42 42       | 	byte	$42[10]
3f0e2     20 20 20 20 
3f0e6     20 20 20    | 	byte	$20[7]
3f0e9     44 44 44 44 
3f0ed     44 44       | 	byte	$44[6]
3f0ef     04 04 04 04 
3f0f3     04 04 04 04 
3f0f7     04 04 04 04 
3f0fb     04 04 04 04 
3f0ff     04 04 04 04 | 	byte	$04[20]
3f103     20 20 20 20 
3f107     20 20       | 	byte	$20[6]
3f109     48 48 48 48 
3f10d     48 48       | 	byte	$48[6]
3f10f     08 08 08 08 
3f113     08 08 08 08 
3f117     08 08 08 08 
3f11b     08 08 08 08 
3f11f     08 08 08 08 | 	byte	$08[20]
3f123     20 20 20 20 
3f127     01 00 00 00 
3f12b     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3f12c                 | __methodtable__
3f12c     50 57 01 00 | 	long	@_do_no_command
3f130     70 E0 01 00 | 	long	@_do_plus
3f134     F4 D4 01 00 | 	long	@_do_minus
3f138     B4 DF 01 00 | 	long	@_do_or
3f13c     B8 D9 01 00 | 	long	@_do_mul
3f140     64 C5 01 00 | 	long	@_do_fdiv
3f144     90 BF 01 00 | 	long	@_do_and
3f148     4C C0 01 00 | 	long	@_do_div
3f14c     34 D8 01 00 | 	long	@_do_mod
3f150     40 E5 01 00 | 	long	@_do_shl
3f154     FC E5 01 00 | 	long	@_do_shr
3f158     F0 E3 01 00 | 	long	@_do_power
3f15c     5C B7 01 00 | 	long	@_do_getvar
3f160     94 7F 01 00 | 	long	@_do_push
3f164     E8 B2 01 00 | 	long	@_do_assign
3f168     10 F2 00 00 | 	long	@_do_cls
3f16c     28 51 01 00 | 	long	@_do_new
3f170     38 78 01 00 | 	long	@_do_plot
3f174     B8 13 01 00 | 	long	@_do_draw
3f178     40 7A 01 00 | 	long	@_do_print
3f17c     F8 EF 00 00 | 	long	@_do_circle
3f180     C0 15 01 00 | 	long	@_do_fcircle
3f184     34 E2 00 00 | 	long	@_do_box
3f188     4C 1E 01 00 | 	long	@_do_frame
3f18c     5C F4 00 00 | 	long	@_do_color
3f190     DC 1B 01 00 | 	long	@_do_for
3f194     8C 53 01 00 | 	long	@_do_next
3f198     34 40 01 00 | 	long	@_do_list
3f19c     78 96 01 00 | 	long	@_do_run
3f1a0     EC 14 01 00 | 	long	@_do_error
3f1a4     38 2A 01 00 | 	long	@_do_fast_goto
3f1a8     28 2B 01 00 | 	long	@_do_find_goto
3f1ac     F0 2C 01 00 | 	long	@_do_slow_goto
3f1b0     70 57 01 00 | 	long	@_do_nothing
3f1b4     9C 9A 01 00 | 	long	@_do_save
3f1b8     8C 42 01 00 | 	long	@_do_load
3f1bc     D0 6F 01 00 | 	long	@_do_pinwrite
3f1c0     7C B0 01 00 | 	long	@_do_waitms
3f1c4     5C B1 01 00 | 	long	@_do_waitvbl
3f1c8     58 2F 01 00 | 	long	@_do_if
3f1cc     84 14 01 00 | 	long	@_do_else
3f1d0     D0 C1 01 00 | 	long	@_do_eq
3f1d4     B4 C6 01 00 | 	long	@_do_ge
3f1d8     EC CD 01 00 | 	long	@_do_le
3f1dc     50 CA 01 00 | 	long	@_do_gt
3f1e0     80 D1 01 00 | 	long	@_do_lt
3f1e4     20 DC 01 00 | 	long	@_do_ne
3f1e8     F4 93 01 00 | 	long	@_do_rnd
3f1ec     10 E4 00 00 | 	long	@_do_brun
3f1f0     74 DE 00 00 | 	long	@_do_beep
3f1f4     C8 0C 01 00 | 	long	@_do_dir
3f1f8     4C 6C 01 00 | 	long	@_do_paper
3f1fc     20 33 01 00 | 	long	@_do_ink
3f200     60 1B 01 00 | 	long	@_do_font
3f204     A8 4B 01 00 | 	long	@_do_mode
3f208     E4 4F 01 00 | 	long	@_do_mouse
3f20c     D0 28 01 00 | 	long	@_do_gettime
3f210     7C F9 00 00 | 	long	@_do_cursor
3f214     68 F1 00 00 | 	long	@_do_click
3f218     A0 50 01 00 | 	long	@_do_mousex
3f21c     E4 50 01 00 | 	long	@_do_mousey
3f220     18 50 01 00 | 	long	@_do_mousek
3f224     5C 50 01 00 | 	long	@_do_mousew
3f228     50 A5 01 00 | 	long	@_do_sin
3f22c     3C A8 01 00 | 	long	@_do_stick
3f230     3C AB 01 00 | 	long	@_do_strig
3f234     94 A6 01 00 | 	long	@_do_sprite
3f238     00 09 01 00 | 	long	@_do_defsprite
3f23c     98 26 01 00 | 	long	@_do_getpixel
3f240     58 B0 01 00 | 	long	@_do_waitclock
3f244     84 D7 01 00 | 	long	@_do_negative
3f248     68 84 01 00 | 	long	@_do_rdpin
3f24c     04 96 01 00 | 	long	@_do_rqpin
3f250     04 6E 01 00 | 	long	@_do_pinread
3f254     68 B1 01 00 | 	long	@_do_wrpin
3f258     E8 B1 01 00 | 	long	@_do_wxpin
3f25c     68 B2 01 00 | 	long	@_do_wypin
3f260     44 6D 01 00 | 	long	@_do_pinfloat
3f264     C4 6D 01 00 | 	long	@_do_pinlo
3f268     84 6D 01 00 | 	long	@_do_pinhi
3f26c     88 6E 01 00 | 	long	@_do_pinstart
3f270     90 6F 01 00 | 	long	@_do_pintoggle
3f274     B8 79 01 00 | 	long	@_do_position
3f278     6C F8 00 00 | 	long	@_do_cos
3f27c     B8 AC 01 00 | 	long	@_do_tan
3f280     70 DD 00 00 | 	long	@_do_atn
3f284     74 DC 00 00 | 	long	@_do_asin
3f288     2C DA 00 00 | 	long	@_do_acos
3f28c     5C A7 01 00 | 	long	@_do_sqr
3f290     9C 16 01 00 | 	long	@_do_fill
3f294     24 02 01 00 | 	long	@_do_defsnd
3f298     7C FA 00 00 | 	long	@_do_defenv
3f29c     40 84 01 00 | 	long	@_do_rad
3f2a0     60 0B 01 00 | 	long	@_do_deg
3f2a4     A0 33 01 00 | 	long	@_do_int
3f2a8     58 70 01 00 | 	long	@_do_play
3f2ac     08 A0 01 00 | 	long	@_do_setdelay
3f2b0     A8 A0 01 00 | 	long	@_do_setenv
3f2b4     48 A1 01 00 | 	long	@_do_setlen
3f2b8     E8 A1 01 00 | 	long	@_do_setpan
3f2bc     28 A3 01 00 | 	long	@_do_setvol
3f2c0     C8 A3 01 00 | 	long	@_do_setwave
3f2c4     88 A2 01 00 | 	long	@_do_setsustain
3f2c8     28 91 01 00 | 	long	@_do_release
3f2cc     D0 24 01 00 | 	long	@_do_getenvsustain
3f2d0     E8 78 01 00 | 	long	@_do_poke
3f2d4     20 13 01 00 | 	long	@_do_dpoke
3f2d8     2C 48 01 00 | 	long	@_do_lpoke
3f2dc     D4 6C 01 00 | 	long	@_do_peek
3f2e0     B0 12 01 00 | 	long	@_do_dpeek
3f2e4     BC 47 01 00 | 	long	@_do_lpeek
3f2e8     9C 1F 01 00 | 	long	@_do_fre
3f2ec     C8 25 01 00 | 	long	@_do_getnotevalue
3f2f0     08 BC 01 00 | 	long	@_do_getaddr
3f2f4     3C 30 01 00 | 	long	@_do_inkey
3f2f8     AC D9 00 00 | 	long	@_do_abs
3f2fc     34 2E 01 00 | 	long	@_do_hex
3f300     10 E1 00 00 | 	long	@_do_bin
3f304     B4 AD 01 00 | 	long	@_do_val
3f308     18 EF 00 00 | 	long	@_do_chr
3f30c     28 DB 00 00 | 	long	@_do_asc
3f310     68 3D 01 00 | 	long	@_do_left
3f314     88 92 01 00 | 	long	@_do_right
3f318     4C 49 01 00 | 	long	@_do_mid
3f31c     D4 3E 01 00 | 	long	@_do_len
3f320     20 29 01 00 | 	long	@_do_gosub
3f324     DC 91 01 00 | 	long	@_do_return
3f328     A8 14 01 00 | 	long	@_do_end
3f32c     80 79 01 00 | 	long	@_do_pop
3f330     7C 46 01 00 | 	long	@_do_log
3f334     8C ED 00 00 | 	long	@_do_changevol
3f338     4C EE 00 00 | 	long	@_do_changewav
3f33c     B8 EC 00 00 | 	long	@_do_changepan
3f340     08 EC 00 00 | 	long	@_do_changefreq
3f344     68 A4 01 00 | 	long	@_do_shutup
3f348     B0 95 01 00 | 	long	@_do_round
3f34c     DC 14 01 00 | 	long	@_do_enter
3f350     38 58 01 00 | 	long	@_do_open
3f354     94 F1 00 00 | 	long	@_do_close
3f358     00 20 01 00 | 	long	@_do_get
3f35c     B0 80 01 00 | 	long	@_do_put
3f360     48 E6 00 00 | 	long	@_do_cd
3f364     88 0B 01 00 | 	long	@_do_delete
3f368     E8 4A 01 00 | 	long	@_do_mkdir
3f36c     64 DF 00 00 | 	long	@_do_blit
3f370     68 1F 01 00 | 	long	@_do_framebuf
3f374     74 57 01 00 | 	long	@_do_on
3f378     4C A6 01 00 | 	long	@_do_skip
3f37c     5C 34 01 00 | 	long	@_do_input
3f380     D0 86 01 00 | 	long	@_do_read
3f384     9C 91 01 00 | 	long	@_do_restore
3f388     B0 65 01 00 | 	long	@_do_padx
3f38c     E4 67 01 00 | 	long	@_do_pady
3f390     18 6A 01 00 | 	long	@_do_padz
3f394     AC 5A 01 00 | 	long	@_do_padrx
3f398     E0 5C 01 00 | 	long	@_do_padry
3f39c     14 5F 01 00 | 	long	@_do_padrz
3f3a0     7C 63 01 00 | 	long	@_do_padw
3f3a4     48 61 01 00 | 	long	@_do_pads
3f3a8     94 F4 00 00 | 	long	@_do_copy
3f3ac     50 F2 00 00 | 	long	@_do_coginit
3f3b0     1C F4 00 00 | 	long	@_do_cogstop
3f3b4     C4 48 01 00 | 	long	@_do_memlo
3f3b8     08 49 01 00 | 	long	@_do_memtop
3f3bc     2C 9E 01 00 | 	long	@_do_setcolor
3f3c0     D8 23 01 00 | 	long	@_do_getcolor
3f3c4     B0 F9 00 00 | 	long	@_do_defchar
3f3c8     D4 91 01 00 | 	long	@_do_restorepalette
3f3cc     A4 17 01 00 | 	long	@_do_findfirst
3f3d0     A4 1A 01 00 | 	long	@_do_findnext
3f3d4     8C 9D 01 00 | 	long	@_do_setamode
3f3d8     C4 27 01 00 | 	long	@_do_getrealfreq
3f3dc     B8 A9 01 00 | 	long	@_do_str
3f3e0     58 28 02 00 | 	long	@_hg010b_spin2_putchar
3f3e4     94 21 03 00 | 	long	@__system___struct___bas_wrap_sender_tx_
3f3e8     D8 21 03 00 | 	long	@__system___struct___bas_wrap_sender_rx_
3f3ec     20 22 03 00 | 	long	@__system___struct___bas_wrap_sender_close_
3f3f0     C4 20 03 00 | 	long	@__system___struct__s_vfs_file_t_putchar_
3f3f4     34 21 03 00 | 	long	@__system___struct__s_vfs_file_t_getchar_
3f3f8     7C 20 03 00 | 	long	@__system____strs_cl_pfunc_
3f3fc     24 97 02 00 | 	long	@__system____root_opendir
3f400     C0 97 02 00 | 	long	@__system____root_closedir
3f404     3C 97 02 00 | 	long	@__system____root_readdir
3f408     C8 97 02 00 | 	long	@__system____root_stat
3f40c     8C 8F 02 00 | 	long	@__system____default_putc
3f410     08 8F 02 00 | 	long	@__system____default_getc
3f414     38 90 02 00 | 	long	@__system____default_flush
3f418     CC 13 03 00 | 	long	@_fatfs_cc_v_close
3f41c     B4 16 03 00 | 	long	@_fatfs_cc_v_read
3f420     40 17 03 00 | 	long	@_fatfs_cc_v_write
3f424     B8 17 03 00 | 	long	@_fatfs_cc_v_lseek
3f428     54 18 03 00 | 	long	@_fatfs_cc_v_ioctl
3f42c     80 19 03 00 | 	long	@_fatfs_cc_v_flush
3f430     A8 18 03 00 | 	long	@_fatfs_cc_v_open
3f434     38 13 03 00 | 	long	@_fatfs_cc_v_creat
3f438     08 14 03 00 | 	long	@_fatfs_cc_v_opendir
3f43c     7C 14 03 00 | 	long	@_fatfs_cc_v_closedir
3f440     BC 14 03 00 | 	long	@_fatfs_cc_v_readdir
3f444     88 15 03 00 | 	long	@_fatfs_cc_v_stat
3f448     68 18 03 00 | 	long	@_fatfs_cc_v_mkdir
3f44c     88 18 03 00 | 	long	@_fatfs_cc_v_rmdir
3f450     78 18 03 00 | 	long	@_fatfs_cc_v_remove
3f454     98 18 03 00 | 	long	@_fatfs_cc_v_rename
3f458     CC 19 03 00 | 	long	@_fatfs_cc_v_init
3f45c     D4 19 03 00 | 	long	@_fatfs_cc_v_deinit
3f460     CC B7 02 00 | 	long	@_sdmm_cc_v_read
3f464     D8 B7 02 00 | 	long	@_sdmm_cc_v_write
3f468     B4 B8 02 00 | 	long	@_sdmm_cc_v_close
3f46c     E4 B7 02 00 | 	long	@_sdmm_cc_v_ioctl
3f470     AC B8 02 00 | 	long	@_sdmm_cc_v_flush
3f474     08 B8 02 00 | 	long	@_sdmm_cc_v_lseek
3f478     DC B8 02 00 | 	long	@_sdmm_cc_v_putc
3f47c     28 B9 02 00 | 	long	@_sdmm_cc_v_getc
3f480     88 48 02 00 | 	long	@__system___tx
3f484     C8 48 02 00 | 	long	@__system___rx
3f488     F4 A1 02 00 | 	long	@__system___rxtxioctl_0788
3f48c     4C A2 02 00 | 	long	@__system____dummy_flush_0789
3f490                 | __heap_base
3f490     00 00 00 00 
      ...             
56b90     00 00 00 00 
56b94     00 00 00 00 | 	long	0[24002]
56b98                 | objmem
56b98     00 00 00 00 
      ...             
6148c     00 00 00 00 
61490     00 00 00 00 | 	long	0[10815]
61494                 | stackspace
61494     00 00 00 00 | 	long	0[1]
61498 140             | 	org	COG_BSS_START
61498 140             | _var01
61498 140             | 	res	1
61498 141             | _var02
61498 141             | 	res	1
61498 142             | _var03
61498 142             | 	res	1
61498 143             | _var04
61498 143             | 	res	1
61498 144             | _var05
61498 144             | 	res	1
61498 145             | _var06
61498 145             | 	res	1
61498 146             | _var07
61498 146             | 	res	1
61498 147             | _var08
61498 147             | 	res	1
61498 148             | _var09
61498 148             | 	res	1
61498 149             | arg01
61498 149             | 	res	1
61498 14a             | arg02
61498 14a             | 	res	1
61498 14b             | arg03
61498 14b             | 	res	1
61498 14c             | arg04
61498 14c             | 	res	1
61498 14d             | arg05
61498 14d             | 	res	1
61498 14e             | arg06
61498 14e             | 	res	1
61498 14f             | arg07
61498 14f             | 	res	1
61498 150             | arg08
61498 150             | 	res	1
61498 151             | arg09
61498 151             | 	res	1
61498 152             | arg10
61498 152             | 	res	1
61498 153             | local01
61498 153             | 	res	1
61498 154             | local02
61498 154             | 	res	1
61498 155             | local03
61498 155             | 	res	1
61498 156             | local04
61498 156             | 	res	1
61498 157             | local05
61498 157             | 	res	1
61498 158             | local06
61498 158             | 	res	1
61498 159             | local07
61498 159             | 	res	1
61498 15a             | local08
61498 15a             | 	res	1
61498 15b             | local09
61498 15b             | 	res	1
61498 15c             | local10
61498 15c             | 	res	1
61498 15d             | local11
61498 15d             | 	res	1
61498 15e             | local12
61498 15e             | 	res	1
61498 15f             | local13
61498 15f             | 	res	1
61498 160             | local14
61498 160             | 	res	1
61498 161             | local15
61498 161             | 	res	1
61498 162             | local16
61498 162             | 	res	1
61498 163             | local17
61498 163             | 	res	1
61498 164             | local18
61498 164             | 	res	1
61498 165             | local19
61498 165             | 	res	1
61498 166             | local20
61498 166             | 	res	1
61498 167             | local21
61498 167             | 	res	1
61498 168             | local22
61498 168             | 	res	1
61498 169             | local23
61498 169             | 	res	1
61498 16a             | local24
61498 16a             | 	res	1
61498 16b             | local25
61498 16b             | 	res	1
61498 16c             | local26
61498 16c             | 	res	1
61498 16d             | local27
61498 16d             | 	res	1
61498 16e             | local28
61498 16e             | 	res	1
61498 16f             | local29
61498 16f             | 	res	1
61498 170             | local30
61498 170             | 	res	1
61498 171             | local31
61498 171             | 	res	1
61498 172             | local32
61498 172             | 	res	1
61498 173             | local33
61498 173             | 	res	1
61498 174             | local34
61498 174             | 	res	1
61498 175             | local35
61498 175             | 	res	1
61498 176             | local36
61498 176             | 	res	1
61498 177             | local37
61498 177             | 	res	1
61498 178             | local38
61498 178             | 	res	1
61498 179             | local39
61498 179             | 	res	1
61498 17a             | local40
61498 17a             | 	res	1
61498 17b             | local41
61498 17b             | 	res	1
61498 17c             | local42
61498 17c             | 	res	1
61498 17d             | local43
61498 17d             | 	res	1
61498 17e             | local44
61498 17e             | 	res	1
61498 17f             | local45
61498 17f             | 	res	1
61498 180             | local46
61498 180             | 	res	1
61498 181             | local47
61498 181             | 	res	1
61498 182             | local48
61498 182             | 	res	1
61498 183             | local49
61498 183             | 	res	1
61498 184             | local50
61498 184             | 	res	1
61498 185             | local51
61498 185             | 	res	1
61498 186             | local52
61498 186             | 	res	1
61498 187             | muldiva_
61498 187             | 	res	1
61498 188             | muldivb_
61498 188             | 	res	1
61498 189             | 	fit	480
61498 189             | 
