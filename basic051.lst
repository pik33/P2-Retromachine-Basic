00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic051.p2asm"
00000                 | con
00000                 | 	_clkfreq = 338695652
00000                 | 	_clkmode = 28773115
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 49
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_cogstop = 207
00000                 | 	token_memlo = 208
00000                 | 	token_memtop = 209
00000                 | 	token_setcolor = 210
00000                 | 	token_getcolor = 211
00000                 | 	token_restorepalette = 212
00000                 | 	token_pads = 213
00000                 | 	token_padw = 214
00000                 | 	token_findfirst = 215
00000                 | 	token_findnext = 216
00000                 | 	token_defchar = 217
00000                 | 	token_setamode = 218
00000                 | 	token_getrealfreq = 219
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 338695652
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1b70afb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 7A 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 03 90 5D |  if_ne	jmp	#spininit
0040c 002 3C F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 02 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 85 DB 80 FF 
00420 007 00 F0 65 FD | 	hubset	##28773112
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 85 DB 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##28773115
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 0A 18 8A FF 
00440 00f 14 C8 6F FC | 	wrlong	##338695652, #20
00444 010 BC 02 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
006fc 0be 00 00 00 00 
00700 0bf 00 00 00 00 | 	orgf	192
00704 0c0             | skip_clock_set_
00704 0c0 50 14 A2 FD | 	call	#_program
00708 0c1             | cogexit
00708 0c1 38 01 80 FF 
0070c 0c2 1F 00 66 FD | 	waitx	##160000
00710 0c3 01 92 62 FD | 	cogid	arg01
00714 0c4 03 92 62 FD | 	cogstop	arg01
00718 0c5             | spininit
00718 0c5 61 65 06 FB | 	rdlong	objptr, ptra++
0071c 0c6 61 7B 06 FB | 	rdlong	result1, ptra++
00720 0c7 28 06 64 FD | 	setq	#3
00724 0c8 00 93 06 FB | 	rdlong	arg01, ptra
00728 0c9 04 F0 87 F1 | 	sub	ptra, #4
0072c 0ca 2D 7A 62 FD | 	call	result1
00730 0cb D4 FF 9F FD | 	jmp	#cogexit
00734 0cc             | FCACHE_LOAD_
00734 0cc F9 AD 01 F6 |     mov	fcache_tmpb_,ptrb
00738 0cd 2B F2 63 FD |     pop	ptrb
0073c 0ce D5 EC 8B F9 |     altd	pa,ret_instr_
00740 0cf D5 00 00 F6 |     mov	 0-0, ret_instr_
00744 0d0 28 EC 63 FD |     setq	pa
00748 0d1 E1 01 04 FB |     rdlong	$0, ptrb++
0074c 0d2 2A F2 63 FD |     push	ptrb
00750 0d3 D6 F2 03 F6 |     mov ptrb,fcache_tmpb_
00754 0d4 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00758 0d5             | ret_instr_
00758 0d5 00 FE 07 02 |     _ret_ cmp inb,#0
0075c 0d6             | fcache_tmpb_
0075c 0d6 00 00 00 00 |     long 0
00760 0d7             | fcache_load_ptr_
00760 0d7 CC 00 00 00 |     long FCACHE_LOAD_
00764 0d8             | builtin_bytefill_
00764 0d8 01 96 56 F0 |         shr	arg03, #1 wc
00768 0d9 49 95 42 CC |  if_c   wrbyte	arg02, arg01
0076c 0da 01 92 06 C1 |  if_c   add	arg01, #1
00770 0db 00 94 FE F9 |         movbyts	arg02, #0
00774 0dc             | builtin_wordfill_
00774 0dc 01 96 56 F0 |         shr	arg03, #1 wc
00778 0dd 49 95 52 CC |  if_c   wrword	arg02, arg01
0077c 0de 02 92 06 C1 |  if_c   add	arg01, #2
00780 0df 4A 95 2A F9 |         setword	arg02, arg02, #1
00784 0e0             | builtin_longfill_
00784 0e0 49 01 88 FC |         wrfast	#0,arg01
00788 0e1 00 96 0E F2 |         cmp	arg03, #0 wz
0078c 0e2 4B 03 D8 5C |  if_nz  rep	#1, arg03
00790 0e3 17 94 62 5D |  if_nz  wflong	arg02
00794 0e4 2D 00 64 FD |         ret
00798 0e5             | COUNT_
00798 0e5 00 00 00 00 |     long 0
0079c 0e6             | RETADDR_
0079c 0e6 00 00 00 00 |     long 0
007a0 0e7             | fp
007a0 0e7 00 00 00 00 |     long 0
007a4 0e8             | pushregs_
007a4 0e8 2B EC 63 FD |     pop  pa
007a8 0e9 2B CC 61 FD |     pop  RETADDR_
007ac 0ea 03 CA 95 FB |     tjz  COUNT_, #pushregs_done_
007b0 0eb FF CB 8D F9 |     altd  COUNT_, #511
007b4 0ec 28 00 64 FD |     setq #0-0
007b8 0ed 61 A7 66 FC |     wrlong local01, ptra++
007bc 0ee             | pushregs_done_
007bc 0ee 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
007c0 0ef 61 CB 65 FC |     wrlong COUNT_, ptra++
007c4 0f0 F8 CF 01 F6 |     mov    fp, ptra
007c8 0f1 2C EC 63 FD |     jmp  pa
007cc 0f2             |  popregs_
007cc 0f2 2B EC 63 FD |     pop    pa
007d0 0f3 28 04 64 FD |     setq   #2
007d4 0f4 5F CB 05 FB |     rdlong COUNT_, --ptra
007d8 0f5 02 CA 75 FB |     djf    COUNT_, #popregs__ret
007dc 0f6 28 CA 61 FD |     setq   COUNT_
007e0 0f7 5F A7 06 FB |     rdlong local01, --ptra
007e4 0f8             | popregs__ret
007e4 0f8 2A CC 61 FD |     push   RETADDR_
007e8 0f9 2C EC 63 FD |     jmp    pa
007ec 0fa             | 
007ec 0fa             | divide_
007ec 0fa 88 11 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
007f0 0fb 6C 62 62 FD |        wrc     itmp2_                         'store sign of y
007f4 0fc 87 0F 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
007f8 0fd 88 0F 13 FD |        qdiv    muldiva_, muldivb_             'queue divide
007fc 0fe 01 62 66 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00800 0ff 18 10 63 FD |        getqx   muldivb_                       'get quotient
00804 100 19 0E 63 FD |        getqy   muldiva_                       'get remainder
00808 101 87 0F 83 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0080c 102 00 62 16 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00810 103 88 11 83 06 |  _ret_ negc    muldivb_,muldivb_     
00814 104             | __pc long 0
00814 104 00 00 00 00 
00818 105             | __setjmp
00818 105 2B 08 62 FD |     pop __pc
0081c 106 00 7A 06 F6 |     mov result1, #0
00820 107 00 7C 06 F6 |     mov result2, #0
00824 108 49 5D 02 F6 |     mov abortchain, arg01
00828 109 49 CF 61 FC |     wrlong fp, arg01
0082c 10a 04 92 06 F1 |     add arg01, #4
00830 10b 49 F1 63 FC |     wrlong ptra, arg01
00834 10c 04 92 06 F1 |     add arg01, #4
00838 10d 49 65 62 FC |     wrlong objptr, arg01
0083c 10e 04 92 06 F1 |     add arg01, #4
00840 10f 49 09 62 FC |     wrlong __pc, arg01
00844 110 2C 08 62 FD |     jmp __pc
00848 111             | __unwind_pc long 0
00848 111 00 00 00 00 
0084c 112             | __unwind_stack
0084c 112 2B 22 62 FD |    pop  __unwind_pc
00850 113             | __unwind_loop
00850 113 4A 93 0A F2 |    cmp  arg01, arg02 wz
00854 114 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00858 115 49 F1 03 F6 |    mov   ptra, arg01
0085c 116 6C FF BF FD |    call  #popregs_
00860 117 E7 92 02 F6 |    mov   arg01, fp
00864 118 E8 FF 9F FD |    jmp   #__unwind_loop
00868 119             | __unwind_stack_ret
00868 119 2C 22 62 FD |    jmp  __unwind_pc
0086c 11a             | __longjmp
0086c 11a 2B 08 62 FD |     pop __pc
00870 11b 00 92 0E F2 |     cmp    arg01, #0 wz
00874 11c 30 00 90 AD |  if_z jmp #nocatch
00878 11d 4A 7B 02 F6 |     mov result1, arg02
0087c 11e 01 7C 06 F6 |     mov result2, #1
00880 11f 49 95 02 FB |     rdlong arg02, arg01
00884 120 04 92 06 F1 |     add arg01, #4
00888 121 49 F1 03 FB |     rdlong ptra, arg01
0088c 122 04 92 06 F1 |     add arg01, #4
00890 123 49 65 02 FB |     rdlong objptr, arg01
00894 124 04 92 06 F1 |     add arg01, #4
00898 125 49 09 02 FB |     rdlong __pc, arg01
0089c 126 E7 92 02 F6 |     mov arg01, fp
008a0 127 A8 FF BF FD |     call #__unwind_stack
008a4 128             | __longjmp_ret
008a4 128 2C 08 62 FD |     jmp  __pc
008a8 129             | nocatch
008a8 129 00 96 0E F2 |     cmp arg03, #0 wz
008ac 12a 58 FE 9F AD |  if_z jmp #cogexit
008b0 12b F0 FF 9F FD |     jmp #__longjmp_ret
008b4 12c             | 
008b4 12c             | __heap_ptr
008b4 12c E4 F6 03 00 | 	long	@__heap_base
008b8 12d             | __methods__
008b8 12d 80 F3 03 00 | 	long	@__methodtable__
008bc 12e             | abortchain
008bc 12e 00 00 00 00 | 	long	0
008c0 12f             | entryptr__
008c0 12f 04 04 00 00 | 	long	@entry
008c4 130             | itmp1_
008c4 130 00 00 00 00 | 	long	0
008c8 131             | itmp2_
008c8 131 00 00 00 00 | 	long	0
008cc 132             | objptr
008cc 132 EC 6D 05 00 | 	long	@objmem
008d0 133             | ptr__Audio2_003_spin2_dat__
008d0 133 A4 E2 03 00 | 	long	@_Audio2_003_spin2_dat_
008d4 134             | ptr___system__dat__
008d4 134 A8 E6 03 00 | 	long	@__system__dat_
008d8 135             | ptr__dat__
008d8 135 74 37 03 00 | 	long	@_dat_
008dc 136             | ptr__fatfs_cc_dat__
008dc 136 F0 ED 03 00 | 	long	@_fatfs_cc_dat_
008e0 137             | ptr__hg010b_spin2_dat__
008e0 137 DC 68 03 00 | 	long	@_hg010b_spin2_dat_
008e4 138             | ptr__housekeeper_
008e4 138 1C 16 00 00 | 	long	@_housekeeper
008e8 139             | ptr__psram16drv_spin2_dat__
008e8 139 8C A8 03 00 | 	long	@_psram16drv_spin2_dat_
008ec 13a             | ptr__psram_spin2_dat__
008ec 13a 44 A6 03 00 | 	long	@_psram_spin2_dat_
008f0 13b             | ptr__usbnew_spin2_dat__
008f0 13b 1C B8 03 00 | 	long	@_usbnew_spin2_dat_
008f4 13c             | ptr_stackspace_
008f4 13c 64 15 06 00 | 	long	@stackspace
008f8 13d             | result1
008f8 13d 00 00 00 00 | 	long	0
008fc 13e             | result2
008fc 13e 01 00 00 00 | 	long	1
00900 13f             | result3
00900 13f 02 00 00 00 | 	long	2
00904 140             | COG_BSS_START
00904 140             | 	fit	480
00904                 | 	orgh
00904                 | hubentry
00904                 | 
00904                 | ' 
00904                 | ' '-------------------------------------------------------------------------------------------------------- 
00904                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00904                 | ' '--------------------------------------------------------------------------------------------------------
00904                 | ' 
00904                 | ' ''-------------------------------------------------------------------------------------------------------
00904                 | ' '                     A full screen editor for programming and entering data
00904                 | ' ''-------------------------------------------------------------------------------------------------------
00904                 | ' 
00904                 | ' function edit() as string
00904                 | _edit
00904     1B CA 05 F6 | 	mov	COUNT_, #27
00908     E8 00 A0 FD | 	call	#pushregs_
0090c     00 A6 06 F6 | 	mov	local01, #0
00910     00 A8 06 F6 | 	mov	local02, #0
00914     00 AA 06 F6 | 	mov	local03, #0
00918     00 AC 06 F6 | 	mov	local04, #0
0091c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0091c                 | ' do
0091c                 | LR__0001
0091c     01 92 06 F6 | 	mov	arg01, #1
00920     48 24 B2 FD | 	call	#_hg010b_spin2_waitvbl
00924     B0 38 B2 FD | 	call	#_usbnew_spin2_get_key
00928     3D AF 02 F6 | 	mov	local05, result1
0092c                 | '   return hkbd_led_rep
0092c     13 00 00 FF 
00930     E0 77 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10208
00934     3B 7B C2 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00938     13 00 00 FF 
0093c     E0 77 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10208
00940     53 00 00 FF 
00944     38 65 06 F1 | 	add	objptr, ##42808
00948     32 7B 62 FC | 	wrlong	result1, objptr
0094c     53 00 00 FF 
00950     38 65 86 F1 | 	sub	objptr, ##42808
00954                 | ' if key>0 andalso key<4 andalso keyclick=1 then audio.play16(7,@atari2_spl,43,4096,0,1758,10) : audio.stop(7)
00954     01 AE 16 F2 | 	cmp	local05, #1 wc
00958     8C 00 90 CD |  if_b	jmp	#LR__0002
0095c     04 AE 16 F2 | 	cmp	local05, #4 wc
00960     84 00 90 3D |  if_ae	jmp	#LR__0002
00964     51 00 00 FF 
00968     5C 65 06 F1 | 	add	objptr, ##41820
0096c     32 B1 02 FB | 	rdlong	local06, objptr
00970     51 00 00 FF 
00974     5C 65 86 F1 | 	sub	objptr, ##41820
00978     01 B0 0E F2 | 	cmp	local06, #1 wz
0097c     68 00 90 5D |  if_ne	jmp	#LR__0002
00980     35 95 02 F6 | 	mov	arg02, ptr__dat__
00984     04 00 00 FF 
00988     A4 94 06 F1 | 	add	arg02, ##2212
0098c     2B B2 06 F6 | 	mov	local07, #43
00990     0C B4 C6 F9 | 	decod	local08, #12
00994     00 B6 06 F6 | 	mov	local09, #0
00998     03 00 00 FF 
0099c     DE B8 06 F6 | 	mov	local10, ##1758
009a0     0A BA 06 F6 | 	mov	local11, #10
009a4     07 92 06 F6 | 	mov	arg01, #7
009a8     2B 96 06 F6 | 	mov	arg03, #43
009ac     0C 98 C6 F9 | 	decod	arg04, #12
009b0     00 9A 06 F6 | 	mov	arg05, #0
009b4     03 00 00 FF 
009b8     DE 9C 06 F6 | 	mov	arg06, ##1758
009bc     0A 9E 06 F6 | 	mov	arg07, #10
009c0     0B 00 00 FF 
009c4     CC 64 06 F1 | 	add	objptr, ##5836
009c8     70 3C B2 FD | 	call	#_Audio2_003_spin2_play16
009cc     07 B0 06 F6 | 	mov	local06, #7
009d0                 | ' 
009d0                 | ' word[@channel1[0]+64*channel+32]:=0
009d0     32 BD 02 F6 | 	mov	local12, objptr
009d4     01 00 00 FF 
009d8     2C BC 06 F1 | 	add	local12, ##556
009dc     5E 01 58 FC | 	wrword	#0, local12
009e0     0B 00 00 FF 
009e4     CC 64 86 F1 | 	sub	objptr, ##5836
009e8                 | LR__0002
009e8                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
009e8     04 AE 16 F2 | 	cmp	local05, #4 wc
009ec     20 00 90 CD |  if_b	jmp	#LR__0003
009f0     00 00 40 FF 
009f4     00 AE 16 F2 | 	cmp	local05, ##-2147483648 wc
009f8     57 B1 02 C6 |  if_b	mov	local06, local05
009fc     58 B1 E2 C8 |  if_b	getbyte	local06, local06, #0
00a00     E0 B0 16 C2 |  if_b	cmp	local06, #224 wc
00a04     57 AB 02 C6 |  if_b	mov	local03, local05
00a08     01 A6 06 C6 |  if_b	mov	local01, #1
00a0c     55 AD 02 C6 |  if_b	mov	local04, local03
00a10                 | LR__0003
00a10                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00a10     00 00 40 FF 
00a14     01 AE 16 F2 | 	cmp	local05, ##-2147483647 wc
00a18     00 A8 06 36 |  if_ae	mov	local02, #0
00a1c     00 A6 06 36 |  if_ae	mov	local01, #0
00a20                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00a20     00 AE 0E F2 | 	cmp	local05, #0 wz
00a24     01 A6 0E A2 |  if_e	cmp	local01, #1 wz
00a28     01 A8 06 A1 |  if_e	add	local02, #1
00a2c                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00a2c     00 00 40 FF 
00a30     00 AE 16 F2 | 	cmp	local05, ##-2147483648 wc
00a34     19 A8 0E C2 |  if_b	cmp	local02, #25 wz
00a38     55 AD 02 86 |  if_c_and_z	mov	local04, local03
00a3c     15 A8 06 86 |  if_c_and_z	mov	local02, #21
00a40                 | ' 
00a40                 | ' '' there is a key pressed and it needs to be processed
00a40                 | ' 
00a40                 | ' if key3<>0 then
00a40     00 AC 0E F2 | 	cmp	local04, #0 wz
00a44     D4 FE 9F AD |  if_e	jmp	#LR__0001
00a48                 | '   if keyclick=1 then audio.play16(7,keyclick_spl,43,4096,spl_len,spl_len,0) ' make a click
00a48     51 00 00 FF 
00a4c     5C 65 06 F1 | 	add	objptr, ##41820
00a50     32 B1 02 FB | 	rdlong	local06, objptr
00a54     51 00 00 FF 
00a58     5C 65 86 F1 | 	sub	objptr, ##41820
00a5c     01 B0 0E F2 | 	cmp	local06, #1 wz
00a60     50 00 90 5D |  if_ne	jmp	#LR__0004
00a64     53 00 00 FF 
00a68     FC 64 06 F1 | 	add	objptr, ##42748
00a6c     32 95 02 FB | 	rdlong	arg02, objptr
00a70     2B B2 06 F6 | 	mov	local07, #43
00a74     0C B4 C6 F9 | 	decod	local08, #12
00a78     04 64 86 F1 | 	sub	objptr, #4
00a7c     32 B9 02 FB | 	rdlong	local10, objptr
00a80     5C B7 02 F6 | 	mov	local09, local10
00a84     00 BA 06 F6 | 	mov	local11, #0
00a88     07 92 06 F6 | 	mov	arg01, #7
00a8c     2B 96 06 F6 | 	mov	arg03, #43
00a90     0C 98 C6 F9 | 	decod	arg04, #12
00a94     5B 9B 02 F6 | 	mov	arg05, local09
00a98     5C 9D 02 F6 | 	mov	arg06, local10
00a9c     00 9E 06 F6 | 	mov	arg07, #0
00aa0     48 00 00 FF 
00aa4     2C 64 86 F1 | 	sub	objptr, ##36908
00aa8     90 3B B2 FD | 	call	#_Audio2_003_spin2_play16
00aac     0B 00 00 FF 
00ab0     CC 64 86 F1 | 	sub	objptr, ##5836
00ab4                 | LR__0004
00ab4     56 93 02 F6 | 	mov	arg01, local04
00ab8     F0 08 B2 FD | 	call	#_scantochar
00abc     3D BF 02 F6 | 	mov	local13, result1
00ac0                 | '   if leds and 2 = 2 then 						' caps lock
00ac0     53 00 00 FF 
00ac4     38 65 06 F1 | 	add	objptr, ##42808
00ac8     32 C1 02 FB | 	rdlong	local14, objptr
00acc     53 00 00 FF 
00ad0     38 65 86 F1 | 	sub	objptr, ##42808
00ad4     60 B1 0A F6 | 	mov	local06, local14 wz
00ad8     4C 00 90 AD |  if_e	jmp	#LR__0012
00adc                 | '     if key4>96 andalso key4<123 then                 
00adc     61 BE 16 F2 | 	cmp	local13, #97 wc
00ae0     0C 00 90 CD |  if_b	jmp	#LR__0005
00ae4     7B BE 16 F2 | 	cmp	local13, #123 wc
00ae8     20 BE 86 C1 |  if_b	sub	local13, #32
00aec     38 00 90 CD |  if_b	jmp	#LR__0011
00af0                 | LR__0005
00af0     41 BE 16 F2 | 	cmp	local13, #65 wc
00af4     0C 00 90 CD |  if_b	jmp	#LR__0006
00af8     5B BE 16 F2 | 	cmp	local13, #91 wc
00afc     20 BE 06 C1 |  if_b	add	local13, #32
00b00     24 00 90 CD |  if_b	jmp	#LR__0010
00b04                 | LR__0006
00b04     17 BE 16 F2 | 	cmp	local13, #23 wc
00b08     0C 00 90 CD |  if_b	jmp	#LR__0007
00b0c     20 BE 16 F2 | 	cmp	local13, #32 wc
00b10     09 BE 86 C1 |  if_b	sub	local13, #9
00b14     10 00 90 CD |  if_b	jmp	#LR__0009
00b18                 | LR__0007
00b18     0E BE 16 F2 | 	cmp	local13, #14 wc
00b1c     08 00 90 CD |  if_b	jmp	#LR__0008
00b20     17 BE 16 F2 | 	cmp	local13, #23 wc
00b24     27 BE 06 C1 |  if_b	add	local13, #39
00b28                 | LR__0008
00b28                 | LR__0009
00b28                 | LR__0010
00b28                 | LR__0011
00b28                 | LR__0012
00b28                 | '  
00b28                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00b28     01 BE 16 F2 | 	cmp	local13, #1 wc
00b2c     BC 01 90 CD |  if_b	jmp	#LR__0017
00b30     7F BE 16 F2 | 	cmp	local13, #127 wc
00b34     3C 64 06 C1 |  if_b	add	objptr, #60
00b38     32 B1 E2 CA |  if_b	rdword	local06, objptr
00b3c     3C 64 86 C1 |  if_b	sub	objptr, #60
00b40     FE B0 16 C2 |  if_b	cmp	local06, #254 wc
00b44     A4 01 90 3D |  if_ae	jmp	#LR__0017
00b48                 | '     if do_insert then							' move the characters right
00b48     53 00 00 FF 
00b4c     20 65 06 F1 | 	add	objptr, ##42784
00b50     32 B1 0A FB | 	rdlong	local06, objptr wz
00b54     53 00 00 FF 
00b58     20 65 86 F1 | 	sub	objptr, ##42784
00b5c     84 01 90 AD |  if_e	jmp	#LR__0016
00b60                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00b60     3E 64 06 F1 | 	add	objptr, #62
00b64     32 B3 C2 FA | 	rdbyte	local07, objptr
00b68     59 B5 E2 F8 | 	getbyte	local08, local07, #0
00b6c     07 B4 66 F0 | 	shl	local08, #7
00b70     3A 64 86 F1 | 	sub	objptr, #58
00b74     32 C3 02 FB | 	rdlong	local15, objptr
00b78     61 C5 02 F6 | 	mov	local16, local15
00b7c     5A C5 02 F1 | 	add	local16, local08
00b80     7F C4 06 F1 | 	add	local16, #127
00b84     59 B3 E2 F8 | 	getbyte	local07, local07, #0
00b88     07 B2 66 F0 | 	shl	local07, #7
00b8c     59 C3 02 F1 | 	add	local15, local07
00b90     38 64 06 F1 | 	add	objptr, #56
00b94     32 B7 E2 FA | 	rdword	local09, objptr
00b98     3C 64 86 F1 | 	sub	objptr, #60
00b9c     5B BB 52 F6 | 	abs	local11, local09 wc
00ba0     01 BA 46 F0 | 	shr	local11, #1
00ba4     5D C3 82 F3 | 	sumc	local15, local11
00ba8     01 C2 06 F1 | 	add	local15, #1
00bac                 | LR__0013
00bac     62 C7 02 F6 | 	mov	local17, local16
00bb0     01 C6 86 F1 | 	sub	local17, #1
00bb4     63 93 02 F6 | 	mov	arg01, local17
00bb8     18 07 B2 FD | 	call	#_pspeek
00bbc     3D C9 02 F6 | 	mov	local18, result1
00bc0     64 CB E2 F8 | 	getbyte	local19, local18, #0
00bc4     65 CD 02 F6 | 	mov	local20, local19
00bc8     62 93 02 F6 | 	mov	arg01, local16
00bcc     66 95 02 F6 | 	mov	arg02, local20
00bd0     B8 06 B2 FD | 	call	#_pspoke
00bd4     01 C4 86 F1 | 	sub	local16, #1
00bd8     61 C5 52 F2 | 	cmps	local16, local15 wc
00bdc     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00be0     53 00 00 FF 
00be4     40 65 06 F1 | 	add	objptr, ##42816
00be8     32 01 68 FC | 	wrlong	#0, objptr
00bec     53 00 00 FF 
00bf0     02 65 86 F1 | 	sub	objptr, ##42754
00bf4     32 B3 C2 FA | 	rdbyte	local07, objptr
00bf8     59 B5 E2 F8 | 	getbyte	local08, local07, #0
00bfc     07 B4 66 F0 | 	shl	local08, #7
00c00     3A 64 86 F1 | 	sub	objptr, #58
00c04     32 B7 02 FB | 	rdlong	local09, objptr
00c08     5B C5 02 F6 | 	mov	local16, local09
00c0c     5A C5 02 F1 | 	add	local16, local08
00c10     38 64 06 F1 | 	add	objptr, #56
00c14     32 BB E2 FA | 	rdword	local11, objptr
00c18     5D B9 32 F9 | 	getword	local10, local11, #0
00c1c     5C CF 52 F6 | 	abs	local21, local10 wc
00c20     01 CE 46 F0 | 	shr	local21, #1
00c24     67 CF 82 F6 | 	negc	local21, local21
00c28     67 C5 02 F1 | 	add	local16, local21
00c2c     59 B3 E2 F8 | 	getbyte	local07, local07, #0
00c30     07 B2 66 F0 | 	shl	local07, #7
00c34     5B B5 02 F6 | 	mov	local08, local09
00c38     3C 64 86 F1 | 	sub	objptr, #60
00c3c     5A D1 02 F6 | 	mov	local22, local08
00c40     59 D1 02 F1 | 	add	local22, local07
00c44     80 D0 06 F1 | 	add	local22, #128
00c48                 | LR__0014
00c48     68 C5 52 F2 | 	cmps	local16, local22 wc
00c4c     94 00 90 3D |  if_ae	jmp	#LR__0015
00c50     3C 64 06 F1 | 	add	objptr, #60
00c54     32 B1 E2 FA | 	rdword	local06, objptr
00c58     53 00 00 FF 
00c5c     04 65 06 F1 | 	add	objptr, ##42756
00c60     32 B5 02 FB | 	rdlong	local08, objptr
00c64     01 B4 66 F0 | 	shl	local08, #1
00c68     5A B1 02 F1 | 	add	local06, local08
00c6c     53 00 00 FF 
00c70     02 65 86 F1 | 	sub	objptr, ##42754
00c74     32 C1 C2 FA | 	rdbyte	local14, objptr
00c78     3E 64 86 F1 | 	sub	objptr, #62
00c7c     04 C0 66 F0 | 	shl	local14, #4
00c80     04 C0 06 F1 | 	add	local14, #4
00c84     62 93 02 F6 | 	mov	arg01, local16
00c88     48 06 B2 FD | 	call	#_pspeek
00c8c     3D B3 E2 F8 | 	getbyte	local07, result1, #0
00c90     41 64 06 F1 | 	add	objptr, #65
00c94     32 B5 02 FB | 	rdlong	local08, objptr
00c98     04 64 06 F1 | 	add	objptr, #4
00c9c     32 B9 02 FB | 	rdlong	local10, objptr
00ca0     45 64 86 F1 | 	sub	objptr, #69
00ca4     5C B7 02 F6 | 	mov	local09, local10
00ca8     58 93 02 F6 | 	mov	arg01, local06
00cac     60 95 02 F6 | 	mov	arg02, local14
00cb0     59 97 02 F6 | 	mov	arg03, local07
00cb4     5A 99 02 F6 | 	mov	arg04, local08
00cb8     5B 9B 02 F6 | 	mov	arg05, local09
00cbc     60 1E B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00cc0     53 00 00 FF 
00cc4     40 65 06 F1 | 	add	objptr, ##42816
00cc8     32 B1 02 FB | 	rdlong	local06, objptr
00ccc     01 B0 06 F1 | 	add	local06, #1
00cd0     32 B1 62 FC | 	wrlong	local06, objptr
00cd4     53 00 00 FF 
00cd8     40 65 86 F1 | 	sub	objptr, ##42816
00cdc     01 C4 06 F1 | 	add	local16, #1
00ce0     64 FF 9F FD | 	jmp	#LR__0014
00ce4                 | LR__0015
00ce4                 | LR__0016
00ce4     5F 93 02 F6 | 	mov	arg01, local13
00ce8     E8 21 B2 FD | 	call	#_hg010b_spin2_putchar
00cec                 | LR__0017
00cec                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then audio.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): audio.stop(7) 'end of line reached
00cec     01 BE 16 F2 | 	cmp	local13, #1 wc
00cf0     B8 00 90 CD |  if_b	jmp	#LR__0018
00cf4     7F BE 16 F2 | 	cmp	local13, #127 wc
00cf8     B0 00 90 3D |  if_ae	jmp	#LR__0018
00cfc     3C 64 06 F1 | 	add	objptr, #60
00d00     32 B1 E2 FA | 	rdword	local06, objptr
00d04     3C 64 86 F1 | 	sub	objptr, #60
00d08     FE B0 0E F2 | 	cmp	local06, #254 wz
00d0c     51 00 00 AF 
00d10     5C 65 06 A1 |  if_e	add	objptr, ##41820
00d14     32 B5 02 AB |  if_e	rdlong	local08, objptr
00d18     51 00 00 AF 
00d1c     5C 65 86 A1 |  if_e	sub	objptr, ##41820
00d20     5A B3 02 A6 |  if_e	mov	local07, local08
00d24     01 B2 0E A2 |  if_e	cmp	local07, #1 wz
00d28     80 00 90 5D |  if_ne	jmp	#LR__0018
00d2c     35 95 02 F6 | 	mov	arg02, ptr__dat__
00d30     04 00 00 FF 
00d34     A4 94 06 F1 | 	add	arg02, ##2212
00d38     56 00 00 FF 
00d3c     44 B2 06 F6 | 	mov	local07, ##44100
00d40     0C B4 C6 F9 | 	decod	local08, #12
00d44     00 B6 06 F6 | 	mov	local09, #0
00d48     03 00 00 FF 
00d4c     DE B8 06 F6 | 	mov	local10, ##1758
00d50     07 92 06 F6 | 	mov	arg01, #7
00d54     56 00 00 FF 
00d58     44 96 06 F6 | 	mov	arg03, ##44100
00d5c     0C 98 C6 F9 | 	decod	arg04, #12
00d60     00 9A 06 F6 | 	mov	arg05, #0
00d64     03 00 00 FF 
00d68     DE 9C 06 F6 | 	mov	arg06, ##1758
00d6c     0B 00 00 FF 
00d70     CC 64 06 F1 | 	add	objptr, ##5836
00d74     B4 37 B2 FD | 	call	#_Audio2_003_spin2_play
00d78     0B 00 00 FF 
00d7c     CC 64 86 F1 | 	sub	objptr, ##5836
00d80     2C 93 06 F6 | 	mov	arg01, #300
00d84     48 3F B2 FD | 	call	#__system___waitms
00d88     0B 00 00 FF 
00d8c     CC 64 06 F1 | 	add	objptr, ##5836
00d90                 | ' 
00d90                 | ' word[@channel1[0]+64*channel+32]:=0
00d90     32 BD 02 F6 | 	mov	local12, objptr
00d94     C0 93 06 F6 | 	mov	arg01, #448
00d98     01 00 00 FF 
00d9c     2C BC 06 F1 | 	add	local12, ##556
00da0     5E 01 58 FC | 	wrword	#0, local12
00da4     0B 00 00 FF 
00da8     CC 64 86 F1 | 	sub	objptr, ##5836
00dac                 | LR__0018
00dac                 | '  
00dac                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00dac     8D BE 0E F2 | 	cmp	local13, #141 wz
00db0     B0 00 90 5D |  if_ne	jmp	#LR__0022
00db4     92 01 00 FF 
00db8     46 D3 06 F6 | 	mov	local23, ##@LR__5487
00dbc                 | '     line$="" 
00dbc                 | '     for i=editor_spaces to 127
00dbc     38 00 00 FF 
00dc0     54 64 06 F1 | 	add	objptr, ##28756
00dc4     32 C5 02 FB | 	rdlong	local16, objptr
00dc8     38 00 00 FF 
00dcc     54 64 86 F1 | 	sub	objptr, ##28756
00dd0                 | LR__0019
00dd0     80 C4 56 F2 | 	cmps	local16, #128 wc
00dd4     44 00 90 3D |  if_ae	jmp	#LR__0020
00dd8     3E 64 06 F1 | 	add	objptr, #62
00ddc     32 BB C2 FA | 	rdbyte	local11, objptr
00de0     07 BA 66 F0 | 	shl	local11, #7
00de4     3A 64 86 F1 | 	sub	objptr, #58
00de8     32 93 02 FB | 	rdlong	arg01, objptr
00dec     04 64 86 F1 | 	sub	objptr, #4
00df0     5D 93 02 F1 | 	add	arg01, local11
00df4     62 93 02 F1 | 	add	arg01, local16
00df8     D8 04 B2 FD | 	call	#_pspeek
00dfc     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
00e00     44 56 B2 FD | 	call	#__system__Chr_S
00e04     3D 95 02 F6 | 	mov	arg02, result1
00e08     69 93 02 F6 | 	mov	arg01, local23
00e0c     28 3C B2 FD | 	call	#__system___string_concat
00e10     3D D3 02 F6 | 	mov	local23, result1
00e14     01 C4 06 F1 | 	add	local16, #1
00e18     B4 FF 9F FD | 	jmp	#LR__0019
00e1c                 | LR__0020
00e1c                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00e1c     53 00 00 FF 
00e20     20 65 06 F1 | 	add	objptr, ##42784
00e24     32 B1 0A FB | 	rdlong	local06, objptr wz
00e28     53 00 00 FF 
00e2c     20 65 86 F1 | 	sub	objptr, ##42784
00e30     24 00 90 AD |  if_e	jmp	#LR__0021
00e34     3E 64 06 F1 | 	add	objptr, #62
00e38     32 B3 C2 FA | 	rdbyte	local07, objptr
00e3c     3E 64 86 F1 | 	sub	objptr, #62
00e40     23 B2 16 F2 | 	cmp	local07, #35 wc
00e44     3E 64 06 C1 |  if_b	add	objptr, #62
00e48     32 93 C2 CA |  if_b	rdbyte	arg01, objptr
00e4c     3E 64 86 C1 |  if_b	sub	objptr, #62
00e50     01 92 06 C1 |  if_b	add	arg01, #1
00e54     04 26 B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00e58                 | LR__0021
00e58     04 28 B2 FD | 	call	#_hg010b_spin2_crlf
00e5c                 | '     v.crlf() 
00e5c                 | '     return  line$
00e5c     69 7B 02 F6 | 	mov	result1, local23
00e60     AC 07 90 FD | 	jmp	#LR__0049
00e64                 | LR__0022
00e64     56 BF E2 F8 | 	getbyte	local13, local04, #0
00e68                 | '   
00e68                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then audio.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): audio.stop(0)  	' tab
00e68     2B BE 0E F2 | 	cmp	local13, #43 wz
00e6c     B0 00 90 5D |  if_ne	jmp	#LR__0023
00e70     3C 64 06 F1 | 	add	objptr, #60
00e74     32 B1 E2 FA | 	rdword	local06, objptr
00e78     3C 64 86 F1 | 	sub	objptr, #60
00e7c     F0 B0 16 F2 | 	cmp	local06, #240 wc
00e80     9C 00 90 CD |  if_b	jmp	#LR__0023
00e84     51 00 00 FF 
00e88     5C 65 06 F1 | 	add	objptr, ##41820
00e8c     32 B5 02 FB | 	rdlong	local08, objptr
00e90     51 00 00 FF 
00e94     5C 65 86 F1 | 	sub	objptr, ##41820
00e98     5A B3 02 F6 | 	mov	local07, local08
00e9c     01 B2 0E F2 | 	cmp	local07, #1 wz
00ea0     7C 00 90 5D |  if_ne	jmp	#LR__0023
00ea4     35 95 02 F6 | 	mov	arg02, ptr__dat__
00ea8     04 00 00 FF 
00eac     A4 94 06 F1 | 	add	arg02, ##2212
00eb0     56 00 00 FF 
00eb4     44 B2 06 F6 | 	mov	local07, ##44100
00eb8     0E B4 C6 F9 | 	decod	local08, #14
00ebc     00 B6 06 F6 | 	mov	local09, #0
00ec0     03 00 00 FF 
00ec4     DE B8 06 F6 | 	mov	local10, ##1758
00ec8     00 92 06 F6 | 	mov	arg01, #0
00ecc     56 00 00 FF 
00ed0     44 96 06 F6 | 	mov	arg03, ##44100
00ed4     0E 98 C6 F9 | 	decod	arg04, #14
00ed8     00 9A 06 F6 | 	mov	arg05, #0
00edc     03 00 00 FF 
00ee0     DE 9C 06 F6 | 	mov	arg06, ##1758
00ee4     0B 00 00 FF 
00ee8     CC 64 06 F1 | 	add	objptr, ##5836
00eec     3C 36 B2 FD | 	call	#_Audio2_003_spin2_play
00ef0     0B 00 00 FF 
00ef4     CC 64 86 F1 | 	sub	objptr, ##5836
00ef8     2C 93 06 F6 | 	mov	arg01, #300
00efc     D0 3D B2 FD | 	call	#__system___waitms
00f00     0B 00 00 FF 
00f04     CC 64 06 F1 | 	add	objptr, ##5836
00f08                 | ' 
00f08                 | ' word[@channel1[0]+64*channel+32]:=0
00f08     32 BD 02 F6 | 	mov	local12, objptr
00f0c     00 92 06 F6 | 	mov	arg01, #0
00f10     6C BC 06 F1 | 	add	local12, #108
00f14     5E 01 58 FC | 	wrword	#0, local12
00f18     0B 00 00 FF 
00f1c     CC 64 86 F1 | 	sub	objptr, ##5836
00f20                 | LR__0023
00f20                 | '   if key4=77 then i=127 : do: 															' end
00f20     4D BE 0E F2 | 	cmp	local13, #77 wz
00f24     90 00 90 5D |  if_ne	jmp	#LR__0028
00f28     7F C4 06 F6 | 	mov	local16, #127
00f2c                 | LR__0024
00f2c                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00f2c     3E 64 06 F1 | 	add	objptr, #62
00f30     32 B7 C2 FA | 	rdbyte	local09, objptr
00f34     5B B5 E2 F8 | 	getbyte	local08, local09, #0
00f38     5A B9 02 F6 | 	mov	local10, local08
00f3c     07 B8 66 F0 | 	shl	local10, #7
00f40     3A 64 86 F1 | 	sub	objptr, #58
00f44     32 BB 02 FB | 	rdlong	local11, objptr
00f48     04 64 86 F1 | 	sub	objptr, #4
00f4c     5D B3 02 F6 | 	mov	local07, local11
00f50     5C B3 02 F1 | 	add	local07, local10
00f54     62 B3 02 F1 | 	add	local07, local16
00f58     59 93 02 F6 | 	mov	arg01, local07
00f5c     74 03 B2 FD | 	call	#_pspeek
00f60     3D B1 E2 F8 | 	getbyte	local06, result1, #0
00f64     20 B0 0E F2 | 	cmp	local06, #32 wz
00f68     2C 00 90 AD |  if_e	jmp	#LR__0026
00f6c                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00f6c     7F C4 56 F2 | 	cmps	local16, #127 wc
00f70     18 00 90 3D |  if_ae	jmp	#LR__0025
00f74     62 B3 02 F6 | 	mov	local07, local16
00f78     01 B2 66 F0 | 	shl	local07, #1
00f7c     59 93 02 F6 | 	mov	arg01, local07
00f80     02 92 06 F1 | 	add	arg01, #2
00f84     84 1D B2 FD | 	call	#_hg010b_spin2_setcursorx
00f88     2C 00 90 FD | 	jmp	#LR__0027
00f8c                 | LR__0025
00f8c     FE 92 06 F6 | 	mov	arg01, #254
00f90     78 1D B2 FD | 	call	#_hg010b_spin2_setcursorx
00f94     20 00 90 FD | 	jmp	#LR__0027
00f98                 | LR__0026
00f98     01 C4 86 F1 | 	sub	local16, #1
00f9c     38 00 00 FF 
00fa0     54 64 06 F1 | 	add	objptr, ##28756
00fa4     32 B1 02 FB | 	rdlong	local06, objptr
00fa8     38 00 00 FF 
00fac     54 64 86 F1 | 	sub	objptr, ##28756
00fb0     58 C5 0A F2 | 	cmp	local16, local06 wz
00fb4     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00fb8                 | LR__0027
00fb8                 | LR__0028
00fb8                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00fb8     38 00 00 FF 
00fbc     54 64 06 F1 | 	add	objptr, ##28756
00fc0     32 C1 02 FB | 	rdlong	local14, objptr
00fc4     38 00 00 FF 
00fc8     54 64 86 F1 | 	sub	objptr, ##28756
00fcc     60 B1 02 F6 | 	mov	local06, local14
00fd0     58 C5 0A F2 | 	cmp	local16, local06 wz
00fd4     2C 00 90 5D |  if_ne	jmp	#LR__0029
00fd8     38 00 00 FF 
00fdc     54 64 06 F1 | 	add	objptr, ##28756
00fe0     32 B5 02 FB | 	rdlong	local08, objptr
00fe4     38 00 00 FF 
00fe8     54 64 86 F1 | 	sub	objptr, ##28756
00fec     5A B3 02 F6 | 	mov	local07, local08
00ff0     59 C1 02 F6 | 	mov	local14, local07
00ff4     01 C0 66 F0 | 	shl	local14, #1
00ff8     60 B1 02 F6 | 	mov	local06, local14
00ffc     58 93 02 F6 | 	mov	arg01, local06
01000     08 1D B2 FD | 	call	#_hg010b_spin2_setcursorx
01004                 | LR__0029
01004                 | '     
01004                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
01004     4A BE 0E F2 | 	cmp	local13, #74 wz
01008     2C 00 90 5D |  if_ne	jmp	#LR__0030
0100c     38 00 00 FF 
01010     54 64 06 F1 | 	add	objptr, ##28756
01014     32 B5 02 FB | 	rdlong	local08, objptr
01018     38 00 00 FF 
0101c     54 64 86 F1 | 	sub	objptr, ##28756
01020     5A B3 02 F6 | 	mov	local07, local08
01024     59 C1 02 F6 | 	mov	local14, local07
01028     01 C0 66 F0 | 	shl	local14, #1
0102c     60 B1 02 F6 | 	mov	local06, local14
01030     58 93 02 F6 | 	mov	arg01, local06
01034     D4 1C B2 FD | 	call	#_hg010b_spin2_setcursorx
01038                 | LR__0030
01038                 | '   if key4=75 then v.setcursory(0)														' pgup
01038     4B BE 0E F2 | 	cmp	local13, #75 wz
0103c     00 B0 06 A6 |  if_e	mov	local06, #0
01040     00 92 06 A6 |  if_e	mov	arg01, #0
01044     F4 1C B2 AD |  if_e	call	#_hg010b_spin2_setcursory
01048                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
01048     4E BE 0E F2 | 	cmp	local13, #78 wz
0104c     24 B0 06 A6 |  if_e	mov	local06, #36
01050     24 92 06 A6 |  if_e	mov	arg01, #36
01054     E4 1C B2 AD |  if_e	call	#_hg010b_spin2_setcursory
01058                 | '   if key4=76 then 																' del
01058     4C BE 0E F2 | 	cmp	local13, #76 wz
0105c     AC 01 90 5D |  if_ne	jmp	#LR__0035
01060                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01060     3E 64 06 F1 | 	add	objptr, #62
01064     32 B3 C2 FA | 	rdbyte	local07, objptr
01068     59 B5 E2 F8 | 	getbyte	local08, local07, #0
0106c     07 B4 66 F0 | 	shl	local08, #7
01070     3A 64 86 F1 | 	sub	objptr, #58
01074     32 D5 02 FB | 	rdlong	local24, objptr
01078     6A C5 02 F6 | 	mov	local16, local24
0107c     5A C5 02 F1 | 	add	local16, local08
01080     38 64 06 F1 | 	add	objptr, #56
01084     32 B9 E2 FA | 	rdword	local10, objptr
01088     5C CF 52 F6 | 	abs	local21, local10 wc
0108c     01 CE 46 F0 | 	shr	local21, #1
01090     67 C5 82 F3 | 	sumc	local16, local21
01094     59 B3 E2 F8 | 	getbyte	local07, local07, #0
01098     07 B2 66 F0 | 	shl	local07, #7
0109c     3C 64 86 F1 | 	sub	objptr, #60
010a0     59 D5 02 F1 | 	add	local24, local07
010a4     80 D4 06 F1 | 	add	local24, #128
010a8                 | LR__0031
010a8     6A C5 52 F2 | 	cmps	local16, local24 wc
010ac     20 00 90 3D |  if_ae	jmp	#LR__0032
010b0     62 93 02 F6 | 	mov	arg01, local16
010b4     01 92 06 F1 | 	add	arg01, #1
010b8     18 02 B2 FD | 	call	#_pspeek
010bc     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
010c0     62 93 02 F6 | 	mov	arg01, local16
010c4     C4 01 B2 FD | 	call	#_pspoke
010c8     01 C4 06 F1 | 	add	local16, #1
010cc     D8 FF 9F FD | 	jmp	#LR__0031
010d0                 | LR__0032
010d0     3E 64 06 F1 | 	add	objptr, #62
010d4     32 B7 C2 FA | 	rdbyte	local09, objptr
010d8     07 B6 66 F0 | 	shl	local09, #7
010dc     3A 64 86 F1 | 	sub	objptr, #58
010e0     32 93 02 FB | 	rdlong	arg01, objptr
010e4     04 64 86 F1 | 	sub	objptr, #4
010e8     5B 93 02 F1 | 	add	arg01, local09
010ec     7F 92 06 F1 | 	add	arg01, #127
010f0     20 94 06 F6 | 	mov	arg02, #32
010f4     94 01 B2 FD | 	call	#_pspoke
010f8     53 00 00 FF 
010fc     40 65 06 F1 | 	add	objptr, ##42816
01100     32 01 68 FC | 	wrlong	#0, objptr
01104     53 00 00 FF 
01108     02 65 86 F1 | 	sub	objptr, ##42754
0110c     32 C1 C2 FA | 	rdbyte	local14, objptr
01110     60 B5 E2 F8 | 	getbyte	local08, local14, #0
01114     07 B4 66 F0 | 	shl	local08, #7
01118     3A 64 86 F1 | 	sub	objptr, #58
0111c     32 B7 02 FB | 	rdlong	local09, objptr
01120     5B C5 02 F6 | 	mov	local16, local09
01124     5A C5 02 F1 | 	add	local16, local08
01128     38 64 06 F1 | 	add	objptr, #56
0112c     32 BB E2 FA | 	rdword	local11, objptr
01130     5D B9 32 F9 | 	getword	local10, local11, #0
01134     5C CF 52 F6 | 	abs	local21, local10 wc
01138     01 CE 46 F0 | 	shr	local21, #1
0113c     67 CF 82 F6 | 	negc	local21, local21
01140     67 C5 02 F1 | 	add	local16, local21
01144     60 B1 E2 F8 | 	getbyte	local06, local14, #0
01148     58 B3 02 F6 | 	mov	local07, local06
0114c     07 B2 66 F0 | 	shl	local07, #7
01150     5B B5 02 F6 | 	mov	local08, local09
01154     3C 64 86 F1 | 	sub	objptr, #60
01158     5A D7 02 F6 | 	mov	local25, local08
0115c     59 D7 02 F1 | 	add	local25, local07
01160     80 D6 06 F1 | 	add	local25, #128
01164                 | LR__0033
01164     6B C5 52 F2 | 	cmps	local16, local25 wc
01168     A0 00 90 3D |  if_ae	jmp	#LR__0034
0116c     3C 64 06 F1 | 	add	objptr, #60
01170     32 B1 E2 FA | 	rdword	local06, objptr
01174     53 00 00 FF 
01178     04 65 06 F1 | 	add	objptr, ##42756
0117c     32 B5 02 FB | 	rdlong	local08, objptr
01180     01 B4 66 F0 | 	shl	local08, #1
01184     5A B1 02 F1 | 	add	local06, local08
01188     53 00 00 FF 
0118c     02 65 86 F1 | 	sub	objptr, ##42754
01190     32 C1 C2 FA | 	rdbyte	local14, objptr
01194     3E 64 86 F1 | 	sub	objptr, #62
01198     04 C0 66 F0 | 	shl	local14, #4
0119c     04 C0 06 F1 | 	add	local14, #4
011a0     62 93 02 F6 | 	mov	arg01, local16
011a4     2C 01 B2 FD | 	call	#_pspeek
011a8     3D B3 E2 F8 | 	getbyte	local07, result1, #0
011ac     41 64 06 F1 | 	add	objptr, #65
011b0     32 B5 02 FB | 	rdlong	local08, objptr
011b4     04 64 06 F1 | 	add	objptr, #4
011b8     32 B9 02 FB | 	rdlong	local10, objptr
011bc     45 64 86 F1 | 	sub	objptr, #69
011c0     5C B7 02 F6 | 	mov	local09, local10
011c4     58 93 02 F6 | 	mov	arg01, local06
011c8     60 95 02 F6 | 	mov	arg02, local14
011cc     59 97 02 F6 | 	mov	arg03, local07
011d0     5A 99 02 F6 | 	mov	arg04, local08
011d4     5B 9B 02 F6 | 	mov	arg05, local09
011d8     44 19 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
011dc     53 00 00 FF 
011e0     40 65 06 F1 | 	add	objptr, ##42816
011e4     32 B1 02 FB | 	rdlong	local06, objptr
011e8     01 B0 06 F1 | 	add	local06, #1
011ec     32 B1 62 FC | 	wrlong	local06, objptr
011f0     53 00 00 FF 
011f4     40 65 86 F1 | 	sub	objptr, ##42816
011f8     62 B1 02 F6 | 	mov	local06, local16
011fc     62 C1 02 F6 | 	mov	local14, local16
01200     01 C0 06 F1 | 	add	local14, #1
01204     60 C5 02 F6 | 	mov	local16, local14
01208     58 FF 9F FD | 	jmp	#LR__0033
0120c                 | LR__0034
0120c                 | LR__0035
0120c                 | ' 
0120c                 | '   if key4 = 42 then  'backspace
0120c     2A BE 0E F2 | 	cmp	local13, #42 wz
01210     14 02 90 5D |  if_ne	jmp	#LR__0041
01214                 | '     if v.cursor_x>editor_spaces*2 then 
01214     3C 64 06 F1 | 	add	objptr, #60
01218     32 C1 E2 FA | 	rdword	local14, objptr
0121c     60 B1 32 F9 | 	getword	local06, local14, #0
01220     38 00 00 FF 
01224     18 64 06 F1 | 	add	objptr, ##28696
01228     32 B7 02 FB | 	rdlong	local09, objptr
0122c     38 00 00 FF 
01230     54 64 86 F1 | 	sub	objptr, ##28756
01234     5B B5 02 F6 | 	mov	local08, local09
01238     5A B3 02 F6 | 	mov	local07, local08
0123c     01 B2 66 F0 | 	shl	local07, #1
01240     59 B1 5A F2 | 	cmps	local06, local07 wcz
01244     C8 01 90 ED |  if_be	jmp	#LR__0039
01248     3C 64 06 F1 | 	add	objptr, #60
0124c     32 93 E2 FA | 	rdword	arg01, objptr
01250     02 92 86 F1 | 	sub	arg01, #2
01254     02 64 06 F1 | 	add	objptr, #2
01258     32 95 C2 FA | 	rdbyte	arg02, objptr
0125c     3E 64 86 F1 | 	sub	objptr, #62
01260     5C 1A B2 FD | 	call	#_hg010b_spin2_setcursorpos
01264                 | '       position v.cursor_x-2,v.cursor_y
01264                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01264     3E 64 06 F1 | 	add	objptr, #62
01268     32 B3 C2 FA | 	rdbyte	local07, objptr
0126c     59 B5 E2 F8 | 	getbyte	local08, local07, #0
01270     07 B4 66 F0 | 	shl	local08, #7
01274     3A 64 86 F1 | 	sub	objptr, #58
01278     32 D9 02 FB | 	rdlong	local26, objptr
0127c     6C C5 02 F6 | 	mov	local16, local26
01280     5A C5 02 F1 | 	add	local16, local08
01284     38 64 06 F1 | 	add	objptr, #56
01288     32 B9 E2 FA | 	rdword	local10, objptr
0128c     5C CF 52 F6 | 	abs	local21, local10 wc
01290     01 CE 46 F0 | 	shr	local21, #1
01294     67 C5 82 F3 | 	sumc	local16, local21
01298     59 B3 E2 F8 | 	getbyte	local07, local07, #0
0129c     07 B2 66 F0 | 	shl	local07, #7
012a0     3C 64 86 F1 | 	sub	objptr, #60
012a4     59 D9 02 F1 | 	add	local26, local07
012a8     80 D8 06 F1 | 	add	local26, #128
012ac                 | LR__0036
012ac     6C C5 52 F2 | 	cmps	local16, local26 wc
012b0     20 00 90 3D |  if_ae	jmp	#LR__0037
012b4     62 93 02 F6 | 	mov	arg01, local16
012b8     01 92 06 F1 | 	add	arg01, #1
012bc     14 00 B2 FD | 	call	#_pspeek
012c0     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
012c4     62 93 02 F6 | 	mov	arg01, local16
012c8     C0 FF B1 FD | 	call	#_pspoke
012cc     01 C4 06 F1 | 	add	local16, #1
012d0     D8 FF 9F FD | 	jmp	#LR__0036
012d4                 | LR__0037
012d4     3E 64 06 F1 | 	add	objptr, #62
012d8     32 B7 C2 FA | 	rdbyte	local09, objptr
012dc     07 B6 66 F0 | 	shl	local09, #7
012e0     3A 64 86 F1 | 	sub	objptr, #58
012e4     32 93 02 FB | 	rdlong	arg01, objptr
012e8     04 64 86 F1 | 	sub	objptr, #4
012ec     5B 93 02 F1 | 	add	arg01, local09
012f0     7F 92 06 F1 | 	add	arg01, #127
012f4     20 94 06 F6 | 	mov	arg02, #32
012f8     90 FF B1 FD | 	call	#_pspoke
012fc     53 00 00 FF 
01300     40 65 06 F1 | 	add	objptr, ##42816
01304     32 01 68 FC | 	wrlong	#0, objptr
01308     53 00 00 FF 
0130c     02 65 86 F1 | 	sub	objptr, ##42754
01310     32 C1 C2 FA | 	rdbyte	local14, objptr
01314     60 B5 E2 F8 | 	getbyte	local08, local14, #0
01318     07 B4 66 F0 | 	shl	local08, #7
0131c     3A 64 86 F1 | 	sub	objptr, #58
01320     32 B7 02 FB | 	rdlong	local09, objptr
01324     5B C5 02 F6 | 	mov	local16, local09
01328     5A C5 02 F1 | 	add	local16, local08
0132c     38 64 06 F1 | 	add	objptr, #56
01330     32 BB E2 FA | 	rdword	local11, objptr
01334     5D B9 32 F9 | 	getword	local10, local11, #0
01338     5C CF 52 F6 | 	abs	local21, local10 wc
0133c     01 CE 46 F0 | 	shr	local21, #1
01340     67 CF 82 F6 | 	negc	local21, local21
01344     67 C5 02 F1 | 	add	local16, local21
01348     60 B1 E2 F8 | 	getbyte	local06, local14, #0
0134c     58 B3 02 F6 | 	mov	local07, local06
01350     07 B2 66 F0 | 	shl	local07, #7
01354     5B B5 02 F6 | 	mov	local08, local09
01358     3C 64 86 F1 | 	sub	objptr, #60
0135c     5A DB 02 F6 | 	mov	local27, local08
01360     59 DB 02 F1 | 	add	local27, local07
01364     80 DA 06 F1 | 	add	local27, #128
01368                 | LR__0038
01368     6D C5 52 F2 | 	cmps	local16, local27 wc
0136c     B8 00 90 3D |  if_ae	jmp	#LR__0040
01370     3C 64 06 F1 | 	add	objptr, #60
01374     32 B1 E2 FA | 	rdword	local06, objptr
01378     53 00 00 FF 
0137c     04 65 06 F1 | 	add	objptr, ##42756
01380     32 B5 02 FB | 	rdlong	local08, objptr
01384     01 B4 66 F0 | 	shl	local08, #1
01388     5A B1 02 F1 | 	add	local06, local08
0138c     53 00 00 FF 
01390     02 65 86 F1 | 	sub	objptr, ##42754
01394     32 C1 C2 FA | 	rdbyte	local14, objptr
01398     3E 64 86 F1 | 	sub	objptr, #62
0139c     04 C0 66 F0 | 	shl	local14, #4
013a0     04 C0 06 F1 | 	add	local14, #4
013a4     62 93 02 F6 | 	mov	arg01, local16
013a8     28 FF B1 FD | 	call	#_pspeek
013ac     3D B3 E2 F8 | 	getbyte	local07, result1, #0
013b0     41 64 06 F1 | 	add	objptr, #65
013b4     32 B5 02 FB | 	rdlong	local08, objptr
013b8     04 64 06 F1 | 	add	objptr, #4
013bc     32 B9 02 FB | 	rdlong	local10, objptr
013c0     45 64 86 F1 | 	sub	objptr, #69
013c4     5C B7 02 F6 | 	mov	local09, local10
013c8     58 93 02 F6 | 	mov	arg01, local06
013cc     60 95 02 F6 | 	mov	arg02, local14
013d0     59 97 02 F6 | 	mov	arg03, local07
013d4     5A 99 02 F6 | 	mov	arg04, local08
013d8     5B 9B 02 F6 | 	mov	arg05, local09
013dc     40 17 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
013e0     53 00 00 FF 
013e4     40 65 06 F1 | 	add	objptr, ##42816
013e8     32 B1 02 FB | 	rdlong	local06, objptr
013ec     01 B0 06 F1 | 	add	local06, #1
013f0     32 B1 62 FC | 	wrlong	local06, objptr
013f4     53 00 00 FF 
013f8     40 65 86 F1 | 	sub	objptr, ##42816
013fc     62 B1 02 F6 | 	mov	local06, local16
01400     62 C1 02 F6 | 	mov	local14, local16
01404     01 C0 06 F1 | 	add	local14, #1
01408     60 C5 02 F6 | 	mov	local16, local14
0140c     58 FF 9F FD | 	jmp	#LR__0038
01410                 | LR__0039
01410     92 01 00 FF 
01414     47 D3 06 F6 | 	mov	local23, ##@LR__5488
01418     04 B0 06 F6 | 	mov	local06, #4
0141c     3C 64 06 F1 | 	add	objptr, #60
01420     32 09 58 FC | 	wrword	#4, objptr
01424     3C 64 86 F1 | 	sub	objptr, #60
01428                 | LR__0040
01428                 | LR__0041
01428                 | ' 
01428                 | '   if key4=82 then 						' arrow up
01428     52 BE 0E F2 | 	cmp	local13, #82 wz
0142c     58 00 90 5D |  if_ne	jmp	#LR__0042
01430                 | ' return cursor_y
01430     3E 64 06 F1 | 	add	objptr, #62
01434     32 7B C2 FA | 	rdbyte	result1, objptr
01438     01 7A 86 F1 | 	sub	result1, #1
0143c     53 00 00 FF 
01440     E6 64 06 F1 | 	add	objptr, ##42726
01444     32 7B 62 FC | 	wrlong	result1, objptr
01448                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
01448     53 00 00 FF 
0144c     24 65 86 F1 | 	sub	objptr, ##42788
01450     00 7A 56 F2 | 	cmps	result1, #0 wc
01454     53 00 00 CF 
01458     24 65 06 C1 |  if_b	add	objptr, ##42788
0145c     32 01 68 CC |  if_b	wrlong	#0, objptr
01460     53 00 00 CF 
01464     24 65 86 C1 |  if_b	sub	objptr, ##42788
01468     53 00 00 FF 
0146c     24 65 06 F1 | 	add	objptr, ##42788
01470     32 C1 02 FB | 	rdlong	local14, objptr
01474     53 00 00 FF 
01478     24 65 86 F1 | 	sub	objptr, ##42788
0147c     60 B1 02 F6 | 	mov	local06, local14
01480     58 93 02 F6 | 	mov	arg01, local06
01484     B4 18 B2 FD | 	call	#_hg010b_spin2_setcursory
01488                 | LR__0042
01488                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
01488     51 BE 0E F2 | 	cmp	local13, #81 wz
0148c     58 00 90 5D |  if_ne	jmp	#LR__0043
01490                 | ' return cursor_y
01490     3E 64 06 F1 | 	add	objptr, #62
01494     32 7B C2 FA | 	rdbyte	result1, objptr
01498     01 7A 06 F1 | 	add	result1, #1
0149c     53 00 00 FF 
014a0     E6 64 06 F1 | 	add	objptr, ##42726
014a4     32 7B 62 FC | 	wrlong	result1, objptr
014a8                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
014a8     53 00 00 FF 
014ac     24 65 86 F1 | 	sub	objptr, ##42788
014b0     25 7A 56 F2 | 	cmps	result1, #37 wc
014b4     53 00 00 3F 
014b8     24 65 06 31 |  if_ae	add	objptr, ##42788
014bc     32 49 68 3C |  if_ae	wrlong	#36, objptr
014c0     53 00 00 3F 
014c4     24 65 86 31 |  if_ae	sub	objptr, ##42788
014c8     53 00 00 FF 
014cc     24 65 06 F1 | 	add	objptr, ##42788
014d0     32 C1 02 FB | 	rdlong	local14, objptr
014d4     53 00 00 FF 
014d8     24 65 86 F1 | 	sub	objptr, ##42788
014dc     60 B1 02 F6 | 	mov	local06, local14
014e0     58 93 02 F6 | 	mov	arg01, local06
014e4     54 18 B2 FD | 	call	#_hg010b_spin2_setcursory
014e8                 | LR__0043
014e8                 | '   if key4=80 then
014e8     50 BE 0E F2 | 	cmp	local13, #80 wz
014ec     74 00 90 5D |  if_ne	jmp	#LR__0044
014f0                 | ' return cursor_x
014f0     3C 64 06 F1 | 	add	objptr, #60
014f4     32 B1 E2 FA | 	rdword	local06, objptr
014f8     02 B0 86 F1 | 	sub	local06, #2
014fc     53 00 00 FF 
01500     EC 64 06 F1 | 	add	objptr, ##42732
01504     32 B1 62 FC | 	wrlong	local06, objptr
01508                 | '     cx=v.getcursorx()-2 					' arrow left
01508                 | '     if cx<editor_spaces then cx=editor_spaces			
01508     1B 00 00 FF 
0150c     D4 64 86 F1 | 	sub	objptr, ##14036
01510     32 B5 02 FB | 	rdlong	local08, objptr
01514     38 00 00 FF 
01518     54 64 86 F1 | 	sub	objptr, ##28756
0151c     5A B3 02 F6 | 	mov	local07, local08
01520     59 B1 52 F2 | 	cmps	local06, local07 wc
01524     38 00 00 CF 
01528     54 64 06 C1 |  if_b	add	objptr, ##28756
0152c     32 B1 02 CB |  if_b	rdlong	local06, objptr
01530     1B 00 00 CF 
01534     D4 64 06 C1 |  if_b	add	objptr, ##14036
01538     32 B1 62 CC |  if_b	wrlong	local06, objptr
0153c     53 00 00 CF 
01540     28 65 86 C1 |  if_b	sub	objptr, ##42792
01544     53 00 00 FF 
01548     28 65 06 F1 | 	add	objptr, ##42792
0154c     32 C1 02 FB | 	rdlong	local14, objptr
01550     53 00 00 FF 
01554     28 65 86 F1 | 	sub	objptr, ##42792
01558     60 B1 02 F6 | 	mov	local06, local14
0155c     58 93 02 F6 | 	mov	arg01, local06
01560     A8 17 B2 FD | 	call	#_hg010b_spin2_setcursorx
01564                 | LR__0044
01564                 | '   if key4=79 then						' arrow right
01564     4F BE 0E F2 | 	cmp	local13, #79 wz
01568     54 00 90 5D |  if_ne	jmp	#LR__0045
0156c                 | ' return cursor_x
0156c     3C 64 06 F1 | 	add	objptr, #60
01570     32 7B E2 FA | 	rdword	result1, objptr
01574     02 7A 06 F1 | 	add	result1, #2
01578     53 00 00 FF 
0157c     EC 64 06 F1 | 	add	objptr, ##42732
01580     32 7B 62 FC | 	wrlong	result1, objptr
01584                 | '     cx=v.getcursorx()+2 
01584                 | '     if cx>254  then cx=254 
01584     53 00 00 FF 
01588     28 65 86 F1 | 	sub	objptr, ##42792
0158c     FF 7A 56 F2 | 	cmps	result1, #255 wc
01590     53 00 00 3F 
01594     28 65 06 31 |  if_ae	add	objptr, ##42792
01598     32 FD 69 3C |  if_ae	wrlong	#254, objptr
0159c     53 00 00 3F 
015a0     28 65 86 31 |  if_ae	sub	objptr, ##42792
015a4     53 00 00 FF 
015a8     28 65 06 F1 | 	add	objptr, ##42792
015ac     32 B1 02 FB | 	rdlong	local06, objptr
015b0     53 00 00 FF 
015b4     28 65 86 F1 | 	sub	objptr, ##42792
015b8     58 93 02 F6 | 	mov	arg01, local06
015bc     4C 17 B2 FD | 	call	#_hg010b_spin2_setcursorx
015c0                 | LR__0045
015c0                 | ' 
015c0                 | '   if key4=73 then 						' ins
015c0     49 BE 0E F2 | 	cmp	local13, #73 wz
015c4     40 00 90 5D |  if_ne	jmp	#LR__0048
015c8     53 00 00 FF 
015cc     20 65 06 F1 | 	add	objptr, ##42784
015d0     32 B1 02 FB | 	rdlong	local06, objptr
015d4     58 C1 22 F6 | 	not	local14, local06
015d8     32 C1 62 FC | 	wrlong	local14, objptr
015dc                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
015dc     53 00 00 FF 
015e0     20 65 86 F1 | 	sub	objptr, ##42784
015e4     00 C0 0E F2 | 	cmp	local14, #0 wz
015e8     10 00 90 AD |  if_e	jmp	#LR__0046
015ec     0E B0 06 F6 | 	mov	local06, #14
015f0     0E 92 06 F6 | 	mov	arg01, #14
015f4     6C 05 B2 FD | 	call	#_hg010b_spin2_setcursorshape
015f8     0C 00 90 FD | 	jmp	#LR__0047
015fc                 | LR__0046
015fc     00 B0 06 F6 | 	mov	local06, #0
01600     00 92 06 F6 | 	mov	arg01, #0
01604     5C 05 B2 FD | 	call	#_hg010b_spin2_setcursorshape
01608                 | LR__0047
01608                 | LR__0048
01608     00 AC 06 F6 | 	mov	local04, #0
0160c     0C F3 9F FD | 	jmp	#LR__0001
01610                 | LR__0049
01610     E7 F0 03 F6 | 	mov	ptra, fp
01614     F2 00 A0 FD | 	call	#popregs_
01618                 | _edit_ret
01618     2D 00 64 FD | 	ret
0161c                 | 
0161c                 | ' 
0161c                 | ' ''-----------------------------------------------------------------------------------------------------------
0161c                 | ' ' 					A housekeepeer.
0161c                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
0161c                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
0161c                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
0161c                 | ' ''-----------------------------------------------------------------------------------------------------------
0161c                 | ' 
0161c                 | ' sub housekeeper
0161c                 | _housekeeper
0161c                 | ' 
0161c                 | ' do
0161c                 | LR__0050
0161c                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
0161c     49 64 06 F1 | 	add	objptr, #73
01620                 | LR__0051
01620     32 93 02 FB | 	rdlong	arg01, objptr
01624     01 92 0E F2 | 	cmp	arg01, #1 wz
01628     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
0162c     53 00 00 FF 
01630     A3 64 06 F1 | 	add	objptr, ##42659
01634     32 93 02 FB | 	rdlong	arg01, objptr
01638     01 92 06 F1 | 	add	arg01, #1
0163c     32 93 62 FC | 	wrlong	arg01, objptr
01640     53 00 00 FF 
01644     EC 64 86 F1 | 	sub	objptr, ##42732
01648     80 00 B0 FD | 	call	#_gethdi
0164c     05 92 06 F6 | 	mov	arg01, #5
01650     7C 36 B2 FD | 	call	#__system___waitms
01654     53 00 00 FF 
01658     EC 64 06 F1 | 	add	objptr, ##42732
0165c     32 93 02 FB | 	rdlong	arg01, objptr
01660     01 92 06 F1 | 	add	arg01, #1
01664     32 93 62 FC | 	wrlong	arg01, objptr
01668     53 00 00 FF 
0166c     EC 64 86 F1 | 	sub	objptr, ##42732
01670     58 00 B0 FD | 	call	#_gethdi
01674     05 92 06 F6 | 	mov	arg01, #5
01678     54 36 B2 FD | 	call	#__system___waitms
0167c     53 00 00 FF 
01680     EC 64 06 F1 | 	add	objptr, ##42732
01684     32 93 02 FB | 	rdlong	arg01, objptr
01688     01 92 06 F1 | 	add	arg01, #1
0168c     32 93 62 FC | 	wrlong	arg01, objptr
01690     53 00 00 FF 
01694     EC 64 86 F1 | 	sub	objptr, ##42732
01698     30 00 B0 FD | 	call	#_gethdi
0169c     05 92 06 F6 | 	mov	arg01, #5
016a0     2C 36 B2 FD | 	call	#__system___waitms
016a4     53 00 00 FF 
016a8     EC 64 06 F1 | 	add	objptr, ##42732
016ac     32 93 02 FB | 	rdlong	arg01, objptr
016b0     01 92 06 F1 | 	add	arg01, #1
016b4     32 93 62 FC | 	wrlong	arg01, objptr
016b8     53 00 00 FF 
016bc     EC 64 86 F1 | 	sub	objptr, ##42732
016c0     08 00 B0 FD | 	call	#_gethdi
016c4     54 FF 9F FD | 	jmp	#LR__0050
016c8                 | _housekeeper_ret
016c8     2D 00 64 FD | 	ret
016cc                 | 
016cc                 | ' 
016cc                 | ' '----------------------------------------------------------------------------------------------------------
016cc                 | ' ' gethdi is called from the houseekeeper to read HDI related values
016cc                 | ' '----------------------------------------------------------------------------------------------------------
016cc                 | ' 
016cc                 | ' sub gethdi
016cc                 | _gethdi
016cc     0A CA 05 F6 | 	mov	COUNT_, #10
016d0     E8 00 A0 FD | 	call	#pushregs_
016d4                 | '   x := mouse_xacc
016d4     14 00 00 FF 
016d8     E1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
016dc     3B 95 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
016e0                 | '   y := mouse_yacc
016e0     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
016e4     3B 93 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
016e8     52 00 00 FF 
016ec     68 65 06 F1 | 	add	objptr, ##42344
016f0     32 95 62 FC | 	wrlong	arg02, objptr
016f4     04 64 06 F1 | 	add	objptr, #4
016f8     32 93 62 FC | 	wrlong	arg01, objptr
016fc                 | '   x := 0
016fc                 | '   y := mouse_zacc
016fc     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01700     3B 7B 02 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01704     08 64 06 F1 | 	add	objptr, #8
01708     32 7B 62 FC | 	wrlong	result1, objptr
0170c                 | '   return mouse_bstate
0170c     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01710     3B 7B C2 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01714     14 00 00 FF 
01718     ED 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10477
0171c     04 64 86 F1 | 	sub	objptr, #4
01720     32 7B 62 FC | 	wrlong	result1, objptr
01724     52 00 00 FF 
01728     70 65 86 F1 | 	sub	objptr, ##42352
0172c     00 A6 06 F6 | 	mov	local01, #0
01730                 | ' 
01730                 | ' mousex,mousey=kbm.mouse_xy()
01730                 | ' dummy,mousew=kbm.mouse_scroll()
01730                 | ' mousek=kbm.mouse_buttons()
01730                 | ' i=0
01730                 | ' for j=0 to 6
01730     00 A8 06 F6 | 	mov	local02, #0
01734                 | LR__0060
01734                 | '   if kbm.hidpad_id(j)>0 then
01734     54 93 02 F6 | 	mov	arg01, local02
01738                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
01738     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
0173c     13 00 00 FF 
01740     F8 7B 06 F1 | 	add	result1, ##10232
01744     05 92 66 F0 | 	shl	arg01, #5
01748     49 7B 02 F1 | 	add	result1, arg01
0174c     3D 7B 02 FB | 	rdlong	result1, result1
01750     01 7A 56 F2 | 	cmps	result1, #1 wc
01754     C8 01 90 CD |  if_b	jmp	#LR__0061
01758     54 93 02 F6 | 	mov	arg01, local02
0175c     00 94 06 F6 | 	mov	arg02, #0
01760     78 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01764     3D AB 02 F6 | 	mov	local03, result1
01768     54 93 02 F6 | 	mov	arg01, local02
0176c     01 94 06 F6 | 	mov	arg02, #1
01770     68 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01774     3D AD 02 F6 | 	mov	local04, result1
01778     54 93 02 F6 | 	mov	arg01, local02
0177c     02 94 06 F6 | 	mov	arg02, #2
01780     58 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01784     3D AF 02 F6 | 	mov	local05, result1
01788     54 93 02 F6 | 	mov	arg01, local02
0178c     00 94 06 F6 | 	mov	arg02, #0
01790     84 2B B2 FD | 	call	#_usbnew_spin2_hidpad_hat
01794     3D B1 02 F6 | 	mov	local06, result1
01798     54 93 02 F6 | 	mov	arg01, local02
0179c     03 94 06 F6 | 	mov	arg02, #3
017a0     38 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
017a4     3D B3 02 F6 | 	mov	local07, result1
017a8     54 93 02 F6 | 	mov	arg01, local02
017ac     04 94 06 F6 | 	mov	arg02, #4
017b0     28 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
017b4     3D B5 02 F6 | 	mov	local08, result1
017b8     54 93 02 F6 | 	mov	arg01, local02
017bc     05 94 06 F6 | 	mov	arg02, #5
017c0     18 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
017c4     3D B7 02 F6 | 	mov	local09, result1
017c8     54 93 02 F6 | 	mov	arg01, local02
017cc     06 94 06 F6 | 	mov	arg02, #6
017d0     08 2B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
017d4     3D B9 02 F6 | 	mov	local10, result1
017d8     54 93 02 F6 | 	mov	arg01, local02
017dc     07 94 06 F6 | 	mov	arg02, #7
017e0     F8 2A B2 FD | 	call	#_usbnew_spin2_hidpad_axis
017e4     53 93 02 F6 | 	mov	arg01, local01
017e8     02 92 66 F0 | 	shl	arg01, #2
017ec     52 00 00 FF 
017f0     78 65 06 F1 | 	add	objptr, ##42360
017f4     32 93 02 F1 | 	add	arg01, objptr
017f8     49 AB 62 FC | 	wrlong	local03, arg01
017fc     53 93 02 F6 | 	mov	arg01, local01
01800     02 92 66 F0 | 	shl	arg01, #2
01804     1C 64 06 F1 | 	add	objptr, #28
01808     32 93 02 F1 | 	add	arg01, objptr
0180c     49 AD 62 FC | 	wrlong	local04, arg01
01810     53 93 02 F6 | 	mov	arg01, local01
01814     02 92 66 F0 | 	shl	arg01, #2
01818     1C 64 06 F1 | 	add	objptr, #28
0181c     32 93 02 F1 | 	add	arg01, objptr
01820     49 AF 62 FC | 	wrlong	local05, arg01
01824     53 AF 02 F6 | 	mov	local05, local01
01828     02 AE 66 F0 | 	shl	local05, #2
0182c     1C 64 06 F1 | 	add	objptr, #28
01830     32 AF 02 F1 | 	add	local05, objptr
01834     57 B1 62 FC | 	wrlong	local06, local05
01838     53 B1 02 F6 | 	mov	local06, local01
0183c     02 B0 66 F0 | 	shl	local06, #2
01840     1C 64 06 F1 | 	add	objptr, #28
01844     32 B1 02 F1 | 	add	local06, objptr
01848     58 B3 62 FC | 	wrlong	local07, local06
0184c     53 B3 02 F6 | 	mov	local07, local01
01850     02 B2 66 F0 | 	shl	local07, #2
01854     1C 64 06 F1 | 	add	objptr, #28
01858     32 B3 02 F1 | 	add	local07, objptr
0185c     59 B5 62 FC | 	wrlong	local08, local07
01860     53 B5 02 F6 | 	mov	local08, local01
01864     02 B4 66 F0 | 	shl	local08, #2
01868     1C 64 06 F1 | 	add	objptr, #28
0186c     32 B5 02 F1 | 	add	local08, objptr
01870     5A B7 62 FC | 	wrlong	local09, local08
01874     53 B7 02 F6 | 	mov	local09, local01
01878     02 B6 66 F0 | 	shl	local09, #2
0187c     1C 64 06 F1 | 	add	objptr, #28
01880     32 B7 02 F1 | 	add	local09, objptr
01884     5B B9 62 FC | 	wrlong	local10, local09
01888     53 B9 02 F6 | 	mov	local10, local01
0188c     02 B8 66 F0 | 	shl	local10, #2
01890     1C 64 06 F1 | 	add	objptr, #28
01894     32 B9 02 F1 | 	add	local10, objptr
01898     5C 7B 62 FC | 	wrlong	result1, local10
0189c     60 00 00 FF 
018a0     00 AA 06 F1 | 	add	local03, ##49152
018a4     0F AA 46 F0 | 	shr	local03, #15
018a8     01 B8 06 F6 | 	mov	local10, #1
018ac     55 B9 02 F1 | 	add	local10, local03
018b0     60 00 00 FF 
018b4     00 AC 06 F1 | 	add	local04, ##49152
018b8     0F AC 46 F0 | 	shr	local04, #15
018bc     01 B6 06 F6 | 	mov	local09, #1
018c0     56 B7 02 F1 | 	add	local09, local04
018c4     53 B5 02 F6 | 	mov	local08, local01
018c8     02 B4 66 F0 | 	shl	local08, #2
018cc     1C 64 06 F1 | 	add	objptr, #28
018d0     32 B5 02 F1 | 	add	local08, objptr
018d4     02 B6 66 F0 | 	shl	local09, #2
018d8     5B B9 02 F1 | 	add	local10, local09
018dc     5A B9 62 FC | 	wrlong	local10, local08
018e0     53 B9 02 F6 | 	mov	local10, local01
018e4     02 B8 66 F0 | 	shl	local10, #2
018e8     1C 64 06 F1 | 	add	objptr, #28
018ec     32 B9 02 F1 | 	add	local10, objptr
018f0     54 93 02 F6 | 	mov	arg01, local02
018f4     53 00 00 FF 
018f8     90 64 86 F1 | 	sub	objptr, ##42640
018fc                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6]
018fc     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
01900     13 00 00 FF 
01904     F8 7B 06 F1 | 	add	result1, ##10232
01908     05 92 66 F0 | 	shl	arg01, #5
0190c     49 7B 02 F1 | 	add	result1, arg01
01910     18 7A 06 F1 | 	add	result1, #24
01914     3D 7B 02 FB | 	rdlong	result1, result1
01918     5C 7B 62 FC | 	wrlong	result1, local10
0191c     01 A6 06 F1 | 	add	local01, #1
01920                 | LR__0061
01920     01 A8 06 F1 | 	add	local02, #1
01924     07 A8 16 F2 | 	cmp	local02, #7 wc
01928     08 FE 9F CD |  if_b	jmp	#LR__0060
0192c     D7 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
01930                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
01930                 | LR__0062
01930     07 A6 16 F2 | 	cmp	local01, #7 wc
01934     3C 00 90 3D |  if_ae	jmp	#LR__0064
01938     53 B9 02 F6 | 	mov	local10, local01
0193c     02 B8 66 F0 | 	shl	local10, #2
01940     53 00 00 FF 
01944     74 64 06 F1 | 	add	objptr, ##42612
01948     32 B9 02 F1 | 	add	local10, objptr
0194c     5C 01 68 FC | 	wrlong	#0, local10
01950     53 B9 02 F6 | 	mov	local10, local01
01954     02 B8 66 F0 | 	shl	local10, #2
01958     1C 64 06 F1 | 	add	objptr, #28
0195c     32 B9 02 F1 | 	add	local10, objptr
01960     5C 01 68 FC | 	wrlong	#0, local10
01964     01 A6 06 F1 | 	add	local01, #1
01968     53 00 00 FF 
0196c     90 64 86 F1 | 	sub	objptr, ##42640
01970     BC FF 9F FD | 	jmp	#LR__0062
01974                 | LR__0063
01974                 | LR__0064
01974     E7 F0 03 F6 | 	mov	ptra, fp
01978     F2 00 A0 FD | 	call	#popregs_
0197c                 | _gethdi_ret
0197c     2D 00 64 FD | 	ret
01980                 | 
01980                 | ' 
01980                 | ' '-------------------------------------------------------------------------------------------------------------
01980                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01980                 | ' '-------------------------------------------------------------------------------------------------------------
01980                 | ' 
01980                 | ' '-------------------------------------------------------------------------------------------------------------
01980                 | ' '
01980                 | ' '                                     LINE INTERPRETER/TOKENIZER
01980                 | ' '
01980                 | ' '-------------------------------------------------------------------------------------------------------------
01980                 | ' 
01980                 | ' 
01980                 | ' sub interpret
01980                 | _interpret
01980     34 CA 05 F6 | 	mov	COUNT_, #52
01984     E8 00 A0 FD | 	call	#pushregs_
01988     01 00 00 FF 
0198c     80 F0 07 F1 | 	add	ptra, ##640
01990     38 00 00 FF 
01994     3C 64 06 F1 | 	add	objptr, ##28732
01998     32 93 02 FB | 	rdlong	arg01, objptr
0199c     38 00 00 FF 
019a0     3C 64 86 F1 | 	sub	objptr, ##28732
019a4     6C 4D B2 FD | 	call	#__system__RTrim_S
019a8     3D 93 02 F6 | 	mov	arg01, result1
019ac     A4 4C B2 FD | 	call	#__system__LTrim_S
019b0     38 00 00 FF 
019b4     40 64 06 F1 | 	add	objptr, ##28736
019b8     32 7B 62 FC | 	wrlong	result1, objptr
019bc     04 64 06 F1 | 	add	objptr, #4
019c0     FF FF FF FF 
019c4     32 FF 6B FC | 	wrlong	##-1, objptr
019c8     1B 00 00 FF 
019cc     C4 64 06 F1 | 	add	objptr, ##14020
019d0     32 01 68 FC | 	wrlong	#0, objptr
019d4     08 00 00 FF 
019d8     6C 64 86 F1 | 	sub	objptr, ##4204
019dc     32 01 68 FC | 	wrlong	#0, objptr
019e0     4B 00 00 FF 
019e4     9C 64 86 F1 | 	sub	objptr, ##38556
019e8     00 A6 06 F6 | 	mov	local01, #0
019ec                 | LR__0070
019ec                 | ' 
019ec                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
019ec                 | ' 
019ec                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
019ec                 | ' 
019ec                 | ' 108 
019ec                 | ' for i=0 to 125: separators(i)=0 :next i
019ec     00 A8 06 F6 | 	mov	local02, #0
019f0     38 CE 05 F1 | 	add	fp, #56
019f4     D7 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
019f8                 | LR__0071
019f8     54 AB 02 F6 | 	mov	local03, local02
019fc     02 AA 66 F0 | 	shl	local03, #2
01a00     E7 AA 02 F1 | 	add	local03, fp
01a04     55 01 68 FC | 	wrlong	#0, local03
01a08     01 A8 06 F1 | 	add	local02, #1
01a0c     7E A8 56 F2 | 	cmps	local02, #126 wc
01a10     E4 FF 9F CD |  if_b	jmp	#LR__0071
01a14                 | LR__0072
01a14     38 CE 85 F1 | 	sub	fp, #56
01a18                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
01a18     00 A8 06 F6 | 	mov	local02, #0
01a1c     36 00 00 FF 
01a20     2C 64 06 F1 | 	add	objptr, ##27692
01a24     D7 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
01a28                 | LR__0073
01a28     54 AD 02 F6 | 	mov	local04, local02
01a2c     03 AC 66 F0 | 	shl	local04, #3
01a30     32 AD 02 F1 | 	add	local04, objptr
01a34     92 01 00 FF 
01a38     48 97 06 F6 | 	mov	arg03, ##@LR__5489
01a3c     56 97 62 FC | 	wrlong	arg03, local04
01a40     54 AD 02 F6 | 	mov	local04, local02
01a44     03 AC 66 F0 | 	shl	local04, #3
01a48     32 AF 02 F6 | 	mov	local05, objptr
01a4c     32 AD 02 F1 | 	add	local04, objptr
01a50     00 B0 06 F6 | 	mov	local06, #0
01a54     04 AC 06 F1 | 	add	local04, #4
01a58     56 01 68 FC | 	wrlong	#0, local04
01a5c     01 A8 06 F1 | 	add	local02, #1
01a60     7E A8 56 F2 | 	cmps	local02, #126 wc
01a64     C0 FF 9F CD |  if_b	jmp	#LR__0073
01a68                 | LR__0074
01a68     02 00 00 FF 
01a6c     10 64 06 F1 | 	add	objptr, ##1040
01a70     32 93 02 FB | 	rdlong	arg01, objptr
01a74     38 00 00 FF 
01a78     3C 64 86 F1 | 	sub	objptr, ##28732
01a7c     94 4C B2 FD | 	call	#__system__RTrim_S
01a80     3D 93 02 F6 | 	mov	arg01, result1
01a84     CC 4B B2 FD | 	call	#__system__LTrim_S
01a88     38 00 00 FF 
01a8c     3C 64 06 F1 | 	add	objptr, ##28732
01a90     32 7B 62 FC | 	wrlong	result1, objptr
01a94     92 01 00 FF 
01a98     49 AD 06 F6 | 	mov	local04, ##@LR__5490
01a9c     1B 00 00 FF 
01aa0     08 65 06 F1 | 	add	objptr, ##14088
01aa4     32 AD 62 FC | 	wrlong	local04, objptr
01aa8     1B 00 00 FF 
01aac     08 65 86 F1 | 	sub	objptr, ##14088
01ab0     32 93 02 FB | 	rdlong	arg01, objptr
01ab4     38 00 00 FF 
01ab8     3C 64 86 F1 | 	sub	objptr, ##28732
01abc     49 B3 02 F6 | 	mov	local07, arg01
01ac0     D7 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
01ac4                 | LR__0075
01ac4     59 7B CA FA | 	rdbyte	result1, local07 wz
01ac8     01 B2 06 51 |  if_ne	add	local07, #1
01acc     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01ad0                 | LR__0076
01ad0     49 B3 8A F1 | 	sub	local07, arg01 wz
01ad4     53 00 00 FF 
01ad8     48 65 06 F1 | 	add	objptr, ##42824
01adc     32 B3 62 FC | 	wrlong	local07, objptr
01ae0                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
01ae0     53 00 00 FF 
01ae4     48 65 86 F1 | 	sub	objptr, ##42824
01ae8     E4 28 90 AD |  if_e	jmp	#LR__0210
01aec     00 B4 06 F6 | 	mov	local08, #0
01af0                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
01af0                 | ' for i=1 to len(line$)
01af0     01 A8 06 F6 | 	mov	local02, #1
01af4     38 00 00 FF 
01af8     3C 64 06 F1 | 	add	objptr, ##28732
01afc     32 93 02 FB | 	rdlong	arg01, objptr
01b00     38 00 00 FF 
01b04     3C 64 86 F1 | 	sub	objptr, ##28732
01b08     49 B3 02 F6 | 	mov	local07, arg01
01b0c     D7 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
01b10                 | LR__0077
01b10     59 7B CA FA | 	rdbyte	result1, local07 wz
01b14     01 B2 06 51 |  if_ne	add	local07, #1
01b18     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
01b1c                 | LR__0078
01b1c     49 B3 82 F1 | 	sub	local07, arg01
01b20     59 B7 02 F6 | 	mov	local09, local07
01b24     01 B6 06 F1 | 	add	local09, #1
01b28                 | LR__0079
01b28     5B A9 52 F2 | 	cmps	local02, local09 wc
01b2c     A4 00 90 3D |  if_ae	jmp	#LR__0081
01b30                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
01b30     38 00 00 FF 
01b34     3C 64 06 F1 | 	add	objptr, ##28732
01b38     32 93 02 FB | 	rdlong	arg01, objptr
01b3c     38 00 00 FF 
01b40     3C 64 86 F1 | 	sub	objptr, ##28732
01b44     54 95 02 F6 | 	mov	arg02, local02
01b48     01 96 06 F6 | 	mov	arg03, #1
01b4c     4C 48 B2 FD | 	call	#__system__Mid_S
01b50     3D 93 02 F6 | 	mov	arg01, result1
01b54     92 01 00 FF 
01b58     4A 95 06 F6 | 	mov	arg02, ##@LR__5491
01b5c     A4 2E B2 FD | 	call	#__system___string_cmp
01b60     00 7A 0E F2 | 	cmp	result1, #0 wz
01b64     00 B4 0E A2 |  if_e	cmp	local08, #0 wz
01b68     01 B4 06 A6 |  if_e	mov	local08, #1
01b6c     3C 00 90 AD |  if_e	jmp	#LR__0080
01b70     38 00 00 FF 
01b74     3C 64 06 F1 | 	add	objptr, ##28732
01b78     32 93 02 FB | 	rdlong	arg01, objptr
01b7c     38 00 00 FF 
01b80     3C 64 86 F1 | 	sub	objptr, ##28732
01b84     54 95 02 F6 | 	mov	arg02, local02
01b88     01 96 06 F6 | 	mov	arg03, #1
01b8c     0C 48 B2 FD | 	call	#__system__Mid_S
01b90     3D 93 02 F6 | 	mov	arg01, result1
01b94     92 01 00 FF 
01b98     4C 95 06 F6 | 	mov	arg02, ##@LR__5492
01b9c     64 2E B2 FD | 	call	#__system___string_cmp
01ba0     00 7A 0E F2 | 	cmp	result1, #0 wz
01ba4     01 B4 0E A2 |  if_e	cmp	local08, #1 wz
01ba8     00 B4 06 A6 |  if_e	mov	local08, #0
01bac                 | LR__0080
01bac     54 AD 02 F6 | 	mov	local04, local02
01bb0     03 AC 66 F0 | 	shl	local04, #3
01bb4     32 AF 02 F6 | 	mov	local05, objptr
01bb8     36 00 00 FF 
01bbc     2C AE 06 F1 | 	add	local05, ##27692
01bc0     57 AD 02 F1 | 	add	local04, local05
01bc4     04 AC 06 F1 | 	add	local04, #4
01bc8     56 B5 62 FC | 	wrlong	local08, local04
01bcc     01 A8 06 F1 | 	add	local02, #1
01bd0     54 FF 9F FD | 	jmp	#LR__0079
01bd4                 | LR__0081
01bd4     01 A8 06 F6 | 	mov	local02, #1
01bd8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01bd8                 | LR__0082
01bd8     38 00 00 FF 
01bdc     3C 64 06 F1 | 	add	objptr, ##28732
01be0     32 93 02 FB | 	rdlong	arg01, objptr
01be4     38 00 00 FF 
01be8     3C 64 86 F1 | 	sub	objptr, ##28732
01bec     54 95 02 F6 | 	mov	arg02, local02
01bf0     01 96 06 F6 | 	mov	arg03, #1
01bf4     A4 47 B2 FD | 	call	#__system__Mid_S
01bf8     3D 93 02 F6 | 	mov	arg01, result1
01bfc     92 01 00 FF 
01c00     4E B9 06 F6 | 	mov	local10, ##@LR__5493
01c04     5C 95 02 F6 | 	mov	arg02, local10
01c08     F8 2D B2 FD | 	call	#__system___string_cmp
01c0c     00 7A 0E F2 | 	cmp	result1, #0 wz
01c10     2C 00 90 5D |  if_ne	jmp	#LR__0083
01c14     54 AF 02 F6 | 	mov	local05, local02
01c18     03 AE 66 F0 | 	shl	local05, #3
01c1c     32 B1 02 F6 | 	mov	local06, objptr
01c20     36 00 00 FF 
01c24     2C B0 06 F1 | 	add	local06, ##27692
01c28     58 AF 02 F1 | 	add	local05, local06
01c2c     04 AE 06 F1 | 	add	local05, #4
01c30     57 BB 02 FB | 	rdlong	local11, local05
01c34     04 AE 86 F1 | 	sub	local05, #4
01c38     5D BD 0A F6 | 	mov	local12, local11 wz
01c3c     24 00 90 AD |  if_e	jmp	#LR__0084
01c40                 | LR__0083
01c40     53 00 00 FF 
01c44     48 65 06 F1 | 	add	objptr, ##42824
01c48     32 BF 02 FB | 	rdlong	local13, objptr
01c4c     53 00 00 FF 
01c50     48 65 86 F1 | 	sub	objptr, ##42824
01c54     5F C1 02 F6 | 	mov	local14, local13
01c58     60 A9 52 F2 | 	cmps	local02, local14 wc
01c5c     01 A8 06 C1 |  if_b	add	local02, #1
01c60     74 FF 9F CD |  if_b	jmp	#LR__0082
01c64                 | LR__0084
01c64                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01c64     53 00 00 FF 
01c68     48 65 06 F1 | 	add	objptr, ##42824
01c6c     32 AD 02 FB | 	rdlong	local04, objptr
01c70     53 00 00 FF 
01c74     48 65 86 F1 | 	sub	objptr, ##42824
01c78     56 A9 52 F2 | 	cmps	local02, local04 wc
01c7c     A8 00 90 3D |  if_ae	jmp	#LR__0087
01c80     38 00 00 FF 
01c84     3C 64 06 F1 | 	add	objptr, ##28732
01c88     32 B1 02 FB | 	rdlong	local06, objptr
01c8c     38 00 00 FF 
01c90     3C 64 86 F1 | 	sub	objptr, ##28732
01c94     58 93 02 F6 | 	mov	arg01, local06
01c98     49 B3 02 F6 | 	mov	local07, arg01
01c9c     D7 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01ca0                 | LR__0085
01ca0     59 7B CA FA | 	rdbyte	result1, local07 wz
01ca4     01 B2 06 51 |  if_ne	add	local07, #1
01ca8     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01cac                 | LR__0086
01cac     49 B3 82 F1 | 	sub	local07, arg01
01cb0     59 AF 02 F6 | 	mov	local05, local07
01cb4     57 95 02 F6 | 	mov	arg02, local05
01cb8     54 95 82 F1 | 	sub	arg02, local02
01cbc     58 93 02 F6 | 	mov	arg01, local06
01cc0     48 46 B2 FD | 	call	#__system__Right_S
01cc4     3D 93 02 F6 | 	mov	arg01, result1
01cc8     48 4A B2 FD | 	call	#__system__RTrim_S
01ccc     3D 93 02 F6 | 	mov	arg01, result1
01cd0     80 49 B2 FD | 	call	#__system__LTrim_S
01cd4     53 00 00 FF 
01cd8     4C 65 06 F1 | 	add	objptr, ##42828
01cdc     32 7B 62 FC | 	wrlong	result1, objptr
01ce0     1B 00 00 FF 
01ce4     10 65 86 F1 | 	sub	objptr, ##14096
01ce8     32 93 02 FB | 	rdlong	arg01, objptr
01cec     38 00 00 FF 
01cf0     3C 64 86 F1 | 	sub	objptr, ##28732
01cf4     01 A8 86 F1 | 	sub	local02, #1
01cf8     54 95 02 F6 | 	mov	arg02, local02
01cfc     84 45 B2 FD | 	call	#__system__Left_S
01d00     3D 93 02 F6 | 	mov	arg01, result1
01d04     0C 4A B2 FD | 	call	#__system__RTrim_S
01d08     3D 93 02 F6 | 	mov	arg01, result1
01d0c     44 49 B2 FD | 	call	#__system__LTrim_S
01d10     38 00 00 FF 
01d14     3C 64 06 F1 | 	add	objptr, ##28732
01d18     32 7B 62 FC | 	wrlong	result1, objptr
01d1c     38 00 00 FF 
01d20     3C 64 86 F1 | 	sub	objptr, ##28732
01d24     1C 00 90 FD | 	jmp	#LR__0088
01d28                 | LR__0087
01d28     92 01 00 FF 
01d2c     50 AD 06 F6 | 	mov	local04, ##@LR__5494
01d30     53 00 00 FF 
01d34     4C 65 06 F1 | 	add	objptr, ##42828
01d38     32 AD 62 FC | 	wrlong	local04, objptr
01d3c     53 00 00 FF 
01d40     4C 65 86 F1 | 	sub	objptr, ##42828
01d44                 | LR__0088
01d44                 | ' 
01d44                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01d44     38 00 00 FF 
01d48     44 64 06 F1 | 	add	objptr, ##28740
01d4c     32 AD 02 FB | 	rdlong	local04, objptr
01d50     38 00 00 FF 
01d54     44 64 86 F1 | 	sub	objptr, ##28740
01d58     FF FF 7F FF 
01d5c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
01d60     40 00 90 5D |  if_ne	jmp	#LR__0089
01d64     53 00 00 FF 
01d68     4C 65 06 F1 | 	add	objptr, ##42828
01d6c     32 93 02 FB | 	rdlong	arg01, objptr
01d70     53 00 00 FF 
01d74     4C 65 86 F1 | 	sub	objptr, ##42828
01d78     92 01 00 FF 
01d7c     51 B1 06 F6 | 	mov	local06, ##@LR__5495
01d80     58 95 02 F6 | 	mov	arg02, local06
01d84     7C 2C B2 FD | 	call	#__system___string_cmp
01d88     00 7A 0E F2 | 	cmp	result1, #0 wz
01d8c     38 00 00 5F 
01d90     44 64 06 51 |  if_ne	add	objptr, ##28740
01d94     32 01 68 5C |  if_ne	wrlong	#0, objptr
01d98     38 00 00 5F 
01d9c     44 64 86 51 |  if_ne	sub	objptr, ##28740
01da0     08 01 90 5D |  if_ne	jmp	#LR__0093
01da4                 | LR__0089
01da4                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01da4     38 00 00 FF 
01da8     44 64 06 F1 | 	add	objptr, ##28740
01dac     32 AD 02 FB | 	rdlong	local04, objptr
01db0     38 00 00 FF 
01db4     44 64 86 F1 | 	sub	objptr, ##28740
01db8     FF FF 7F FF 
01dbc     FF AD 0E F2 | 	cmp	local04, ##-1 wz
01dc0     3C 00 90 5D |  if_ne	jmp	#LR__0090
01dc4     53 00 00 FF 
01dc8     4C 65 06 F1 | 	add	objptr, ##42828
01dcc     32 93 02 FB | 	rdlong	arg01, objptr
01dd0     53 00 00 FF 
01dd4     4C 65 86 F1 | 	sub	objptr, ##42828
01dd8     92 01 00 FF 
01ddc     52 95 06 F6 | 	mov	arg02, ##@LR__5496
01de0     20 2C B2 FD | 	call	#__system___string_cmp
01de4     00 7A 0E F2 | 	cmp	result1, #0 wz
01de8     38 00 00 AF 
01dec     44 64 06 A1 |  if_e	add	objptr, ##28740
01df0     32 07 68 AC |  if_e	wrlong	#3, objptr
01df4     38 00 00 AF 
01df8     44 64 86 A1 |  if_e	sub	objptr, ##28740
01dfc     AC 00 90 AD |  if_e	jmp	#LR__0093
01e00                 | LR__0090
01e00                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01e00     38 00 00 FF 
01e04     44 64 06 F1 | 	add	objptr, ##28740
01e08     32 AD 02 FB | 	rdlong	local04, objptr
01e0c     38 00 00 FF 
01e10     44 64 86 F1 | 	sub	objptr, ##28740
01e14     04 AC 0E F2 | 	cmp	local04, #4 wz
01e18     3C 00 90 5D |  if_ne	jmp	#LR__0091
01e1c     53 00 00 FF 
01e20     4C 65 06 F1 | 	add	objptr, ##42828
01e24     32 93 02 FB | 	rdlong	arg01, objptr
01e28     53 00 00 FF 
01e2c     4C 65 86 F1 | 	sub	objptr, ##42828
01e30     92 01 00 FF 
01e34     53 95 06 F6 | 	mov	arg02, ##@LR__5497
01e38     C8 2B B2 FD | 	call	#__system___string_cmp
01e3c     00 7A 0E F2 | 	cmp	result1, #0 wz
01e40     38 00 00 5F 
01e44     44 64 06 51 |  if_ne	add	objptr, ##28740
01e48     32 03 68 5C |  if_ne	wrlong	#1, objptr
01e4c     38 00 00 5F 
01e50     44 64 86 51 |  if_ne	sub	objptr, ##28740
01e54     54 00 90 5D |  if_ne	jmp	#LR__0093
01e58                 | LR__0091
01e58                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01e58     38 00 00 FF 
01e5c     44 64 06 F1 | 	add	objptr, ##28740
01e60     32 AD 02 FB | 	rdlong	local04, objptr
01e64     38 00 00 FF 
01e68     44 64 86 F1 | 	sub	objptr, ##28740
01e6c     04 AC 0E F2 | 	cmp	local04, #4 wz
01e70     38 00 90 5D |  if_ne	jmp	#LR__0092
01e74     53 00 00 FF 
01e78     4C 65 06 F1 | 	add	objptr, ##42828
01e7c     32 93 02 FB | 	rdlong	arg01, objptr
01e80     53 00 00 FF 
01e84     4C 65 86 F1 | 	sub	objptr, ##42828
01e88     92 01 00 FF 
01e8c     54 95 06 F6 | 	mov	arg02, ##@LR__5498
01e90     70 2B B2 FD | 	call	#__system___string_cmp
01e94     00 7A 0E F2 | 	cmp	result1, #0 wz
01e98     38 00 00 AF 
01e9c     44 64 06 A1 |  if_e	add	objptr, ##28740
01ea0     32 05 68 AC |  if_e	wrlong	#2, objptr
01ea4     38 00 00 AF 
01ea8     44 64 86 A1 |  if_e	sub	objptr, ##28740
01eac                 | LR__0092
01eac                 | LR__0093
01eac     38 CE 05 F1 | 	add	fp, #56
01eb0     E7 00 68 FC | 	wrlong	#0, fp
01eb4     38 CE 85 F1 | 	sub	fp, #56
01eb8     00 A8 06 F6 | 	mov	local02, #0
01ebc     01 C2 06 F6 | 	mov	local15, #1
01ec0                 | ' 
01ec0                 | ' ' 1b: find separators
01ec0                 | ' 
01ec0                 | ' 107
01ec0                 | ' separators(0)=0
01ec0                 | ' i=0: j=1
01ec0                 | ' do: 
01ec0                 | LR__0094
01ec0     01 A8 06 F1 | 	add	local02, #1
01ec4     38 00 00 FF 
01ec8     3C 64 06 F1 | 	add	objptr, ##28732
01ecc     32 93 02 FB | 	rdlong	arg01, objptr
01ed0     38 00 00 FF 
01ed4     3C 64 86 F1 | 	sub	objptr, ##28732
01ed8     54 95 02 F6 | 	mov	arg02, local02
01edc     01 96 06 F6 | 	mov	arg03, #1
01ee0     B8 44 B2 FD | 	call	#__system__Mid_S
01ee4     3D C5 02 F6 | 	mov	local16, result1
01ee8                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01ee8     62 93 02 F6 | 	mov	arg01, local16
01eec     48 2D B0 FD | 	call	#_isseparator
01ef0     00 7A 0E F2 | 	cmp	result1, #0 wz
01ef4     1C 00 90 AD |  if_e	jmp	#LR__0095
01ef8     61 AB 02 F6 | 	mov	local03, local15
01efc     02 AA 66 F0 | 	shl	local03, #2
01f00     E7 B8 02 F6 | 	mov	local10, fp
01f04     38 B8 06 F1 | 	add	local10, #56
01f08     5C AB 02 F1 | 	add	local03, local10
01f0c     55 A9 62 FC | 	wrlong	local02, local03
01f10     01 C2 06 F1 | 	add	local15, #1
01f14                 | LR__0095
01f14     53 00 00 FF 
01f18     48 65 06 F1 | 	add	objptr, ##42824
01f1c     32 AD 02 FB | 	rdlong	local04, objptr
01f20     53 00 00 FF 
01f24     48 65 86 F1 | 	sub	objptr, ##42824
01f28     56 A9 5A F2 | 	cmps	local02, local04 wcz
01f2c     90 FF 9F ED |  if_be	jmp	#LR__0094
01f30     61 AB 02 F6 | 	mov	local03, local15
01f34     02 AA 66 F0 | 	shl	local03, #2
01f38     E7 B8 02 F6 | 	mov	local10, fp
01f3c     38 B8 06 F1 | 	add	local10, #56
01f40     5C AB 02 F1 | 	add	local03, local10
01f44     55 A9 62 FC | 	wrlong	local02, local03
01f48     00 C6 06 F6 | 	mov	local17, #0
01f4c                 | ' for i=0 to j-1 
01f4c     00 A8 06 F6 | 	mov	local02, #0
01f50     61 C9 02 F6 | 	mov	local18, local15
01f54                 | LR__0096
01f54     64 A9 52 F2 | 	cmps	local02, local18 wc
01f58     48 01 90 3D |  if_ae	jmp	#LR__0100
01f5c     54 AB 02 F6 | 	mov	local03, local02
01f60     02 AA 66 F0 | 	shl	local03, #2
01f64     38 CE 05 F1 | 	add	fp, #56
01f68     E7 AA 02 F1 | 	add	local03, fp
01f6c     55 AF 02 FB | 	rdlong	local05, local03
01f70     53 00 00 FF 
01f74     54 65 06 F1 | 	add	objptr, ##42836
01f78     32 AF 62 FC | 	wrlong	local05, objptr
01f7c     54 AB 02 F6 | 	mov	local03, local02
01f80     01 AA 06 F1 | 	add	local03, #1
01f84     02 AA 66 F0 | 	shl	local03, #2
01f88     E7 B8 02 F6 | 	mov	local10, fp
01f8c     E7 AA 02 F1 | 	add	local03, fp
01f90     55 AF 02 FB | 	rdlong	local05, local03
01f94     04 64 06 F1 | 	add	objptr, #4
01f98     32 AF 62 FC | 	wrlong	local05, objptr
01f9c                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f9c     04 64 86 F1 | 	sub	objptr, #4
01fa0     32 AD 02 FB | 	rdlong	local04, objptr
01fa4     53 00 00 FF 
01fa8     54 65 86 F1 | 	sub	objptr, ##42836
01fac     01 AC 56 F2 | 	cmps	local04, #1 wc
01fb0     38 CE 85 F1 | 	sub	fp, #56
01fb4     64 00 90 CD |  if_b	jmp	#LR__0098
01fb8     38 00 00 FF 
01fbc     3C 64 06 F1 | 	add	objptr, ##28732
01fc0     32 93 02 FB | 	rdlong	arg01, objptr
01fc4     1B 00 00 FF 
01fc8     18 65 06 F1 | 	add	objptr, ##14104
01fcc     32 95 02 FB | 	rdlong	arg02, objptr
01fd0     53 00 00 FF 
01fd4     54 65 86 F1 | 	sub	objptr, ##42836
01fd8     01 96 06 F6 | 	mov	arg03, #1
01fdc     BC 43 B2 FD | 	call	#__system__Mid_S
01fe0     3D CB 02 F6 | 	mov	local19, result1
01fe4     92 01 00 FF 
01fe8     55 95 06 F6 | 	mov	arg02, ##@LR__5499
01fec     65 93 02 F6 | 	mov	arg01, local19
01ff0     10 2A B2 FD | 	call	#__system___string_cmp
01ff4     00 7A 0E F2 | 	cmp	result1, #0 wz
01ff8     20 00 90 AD |  if_e	jmp	#LR__0097
01ffc     63 B9 02 F6 | 	mov	local10, local17
02000     03 B8 66 F0 | 	shl	local10, #3
02004     32 AF 02 F6 | 	mov	local05, objptr
02008     36 00 00 FF 
0200c     2C AE 06 F1 | 	add	local05, ##27692
02010     57 B9 02 F1 | 	add	local10, local05
02014     5C CB 62 FC | 	wrlong	local19, local10
02018     01 C6 06 F1 | 	add	local17, #1
0201c                 | LR__0097
0201c                 | LR__0098
0201c     38 00 00 FF 
02020     3C 64 06 F1 | 	add	objptr, ##28732
02024     32 93 02 FB | 	rdlong	arg01, objptr
02028     1B 00 00 FF 
0202c     18 65 06 F1 | 	add	objptr, ##14104
02030     32 95 02 FB | 	rdlong	arg02, objptr
02034     01 94 06 F1 | 	add	arg02, #1
02038     04 64 06 F1 | 	add	objptr, #4
0203c     32 97 02 FB | 	rdlong	arg03, objptr
02040     04 64 86 F1 | 	sub	objptr, #4
02044     32 BB 02 FB | 	rdlong	local11, objptr
02048     53 00 00 FF 
0204c     54 65 86 F1 | 	sub	objptr, ##42836
02050     5D BD 02 F6 | 	mov	local12, local11
02054     5E 97 82 F1 | 	sub	arg03, local12
02058     01 96 86 F1 | 	sub	arg03, #1
0205c     3C 43 B2 FD | 	call	#__system__Mid_S
02060     3D CB 02 F6 | 	mov	local19, result1
02064                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
02064     92 01 00 FF 
02068     56 95 06 F6 | 	mov	arg02, ##@LR__5500
0206c     65 93 02 F6 | 	mov	arg01, local19
02070     90 29 B2 FD | 	call	#__system___string_cmp
02074     00 7A 0E F2 | 	cmp	result1, #0 wz
02078     20 00 90 AD |  if_e	jmp	#LR__0099
0207c     63 B9 02 F6 | 	mov	local10, local17
02080     03 B8 66 F0 | 	shl	local10, #3
02084     32 AF 02 F6 | 	mov	local05, objptr
02088     36 00 00 FF 
0208c     2C AE 06 F1 | 	add	local05, ##27692
02090     57 B9 02 F1 | 	add	local10, local05
02094     5C CB 62 FC | 	wrlong	local19, local10
02098     01 C6 06 F1 | 	add	local17, #1
0209c                 | LR__0099
0209c     01 A8 06 F1 | 	add	local02, #1
020a0     B0 FE 9F FD | 	jmp	#LR__0096
020a4                 | LR__0100
020a4                 | ' 
020a4                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
020a4                 | ' 
020a4                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
020a4     38 00 00 FF 
020a8     44 64 06 F1 | 	add	objptr, ##28740
020ac     32 AD 0A FB | 	rdlong	local04, objptr wz
020b0     38 00 00 FF 
020b4     44 64 86 F1 | 	sub	objptr, ##28740
020b8     38 00 00 5F 
020bc     44 64 06 51 |  if_ne	add	objptr, ##28740
020c0     32 B9 02 5B |  if_ne	rdlong	local10, objptr
020c4     38 00 00 5F 
020c8     44 64 86 51 |  if_ne	sub	objptr, ##28740
020cc     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
020d0     C0 00 90 5D |  if_ne	jmp	#LR__0103
020d4     36 00 00 FF 
020d8     2C 64 06 F1 | 	add	objptr, ##27692
020dc     32 BB 02 FB | 	rdlong	local11, objptr
020e0     36 00 00 FF 
020e4     2C 64 86 F1 | 	sub	objptr, ##27692
020e8     5D 93 02 F6 | 	mov	arg01, local11
020ec     2C 50 B0 FD | 	call	#_isdec
020f0     3D BD 02 F6 | 	mov	local12, result1
020f4     5E B1 02 F6 | 	mov	local06, local12
020f8     07 B0 66 F7 | 	signx	local06, #7
020fc     58 B1 22 F6 | 	not	local06, local06
02100     00 B0 0E F2 | 	cmp	local06, #0 wz
02104     8C 00 90 AD |  if_e	jmp	#LR__0103
02108     63 A9 02 F6 | 	mov	local02, local17
0210c     36 00 00 FF 
02110     2C 64 06 F1 | 	add	objptr, ##27692
02114     D7 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
02118                 | LR__0101
02118     54 AF 02 F6 | 	mov	local05, local02
0211c     01 AE 86 F1 | 	sub	local05, #1
02120     03 AE 66 F0 | 	shl	local05, #3
02124     32 AF 02 F1 | 	add	local05, objptr
02128     57 AD 02 FB | 	rdlong	local04, local05
0212c     54 B1 02 F6 | 	mov	local06, local02
02130     01 B0 86 F1 | 	sub	local06, #1
02134     03 B0 66 F0 | 	shl	local06, #3
02138     32 B1 02 F1 | 	add	local06, objptr
0213c     04 B0 06 F1 | 	add	local06, #4
02140     58 AB 02 FB | 	rdlong	local03, local06
02144     54 B1 02 F6 | 	mov	local06, local02
02148     03 B0 66 F0 | 	shl	local06, #3
0214c     32 BD 02 F6 | 	mov	local12, objptr
02150     32 B1 02 F1 | 	add	local06, objptr
02154     58 AD 62 FC | 	wrlong	local04, local06
02158     54 BB 02 F6 | 	mov	local11, local02
0215c     5D BF 02 F6 | 	mov	local13, local11
02160     03 BE 66 F0 | 	shl	local13, #3
02164     32 BF 02 F1 | 	add	local13, objptr
02168     04 BE 06 F1 | 	add	local13, #4
0216c     5F AB 62 FC | 	wrlong	local03, local13
02170     01 A8 86 F1 | 	sub	local02, #1
02174     01 A8 56 F2 | 	cmps	local02, #1 wc
02178     9C FF 9F 3D |  if_ae	jmp	#LR__0101
0217c                 | LR__0102
0217c     92 01 00 FF 
02180     57 AD 06 F6 | 	mov	local04, ##@LR__5501
02184     32 AD 62 FC | 	wrlong	local04, objptr
02188     36 00 00 FF 
0218c     2C 64 86 F1 | 	sub	objptr, ##27692
02190     01 C6 06 F1 | 	add	local17, #1
02194                 | LR__0103
02194     00 A8 06 F6 | 	mov	local02, #0
02198                 | ' 
02198                 | ' ' 1e : find strings
02198                 | ' 
02198                 | ' i=0
02198                 | ' do
02198                 | LR__0104
02198                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
02198     54 AF 02 F6 | 	mov	local05, local02
0219c     03 AE 66 F0 | 	shl	local05, #3
021a0     32 B1 02 F6 | 	mov	local06, objptr
021a4     36 00 00 FF 
021a8     2C B0 06 F1 | 	add	local06, ##27692
021ac     58 AF 02 F1 | 	add	local05, local06
021b0     57 93 02 FB | 	rdlong	arg01, local05
021b4     92 01 00 FF 
021b8     59 95 06 F6 | 	mov	arg02, ##@LR__5502
021bc     44 28 B2 FD | 	call	#__system___string_cmp
021c0     00 7A 0E F2 | 	cmp	result1, #0 wz
021c4     01 A8 06 51 |  if_ne	add	local02, #1
021c8     20 01 90 5D |  if_ne	jmp	#LR__0109
021cc     54 CD 02 F6 | 	mov	local20, local02
021d0                 | LR__0105
021d0     54 B9 02 F6 | 	mov	local10, local02
021d4     01 B8 06 F1 | 	add	local10, #1
021d8     03 B8 66 F0 | 	shl	local10, #3
021dc     36 00 00 FF 
021e0     2C 64 06 F1 | 	add	objptr, ##27692
021e4     32 B9 02 F1 | 	add	local10, objptr
021e8     5C CB 02 FB | 	rdlong	local19, local10
021ec     66 B9 02 F6 | 	mov	local10, local20
021f0     03 B8 66 F0 | 	shl	local10, #3
021f4     32 B9 02 F1 | 	add	local10, objptr
021f8     66 BB 02 F6 | 	mov	local11, local20
021fc     5D C1 02 F6 | 	mov	local14, local11
02200     03 C0 66 F0 | 	shl	local14, #3
02204     32 C1 02 F1 | 	add	local14, objptr
02208     60 93 02 FB | 	rdlong	arg01, local14
0220c     65 BD 02 F6 | 	mov	local12, local19
02210     5E 95 02 F6 | 	mov	arg02, local12
02214     36 00 00 FF 
02218     2C 64 86 F1 | 	sub	objptr, ##27692
0221c     18 28 B2 FD | 	call	#__system___string_concat
02220     5C 7B 62 FC | 	wrlong	result1, local10
02224     54 C3 02 F6 | 	mov	local15, local02
02228     01 C2 06 F1 | 	add	local15, #1
0222c     63 CF 02 F6 | 	mov	local21, local17
02230     01 CE 06 F1 | 	add	local21, #1
02234     D7 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02238                 | LR__0106
02238     67 C3 52 F2 | 	cmps	local15, local21 wc
0223c     70 00 90 3D |  if_ae	jmp	#LR__0108
02240     61 AF 02 F6 | 	mov	local05, local15
02244     01 AE 06 F1 | 	add	local05, #1
02248     03 AE 66 F0 | 	shl	local05, #3
0224c     36 00 00 FF 
02250     2C 64 06 F1 | 	add	objptr, ##27692
02254     32 AF 02 F1 | 	add	local05, objptr
02258     57 AD 02 FB | 	rdlong	local04, local05
0225c     61 B1 02 F6 | 	mov	local06, local15
02260     01 B0 06 F1 | 	add	local06, #1
02264     03 B0 66 F0 | 	shl	local06, #3
02268     32 B1 02 F1 | 	add	local06, objptr
0226c     04 B0 06 F1 | 	add	local06, #4
02270     58 AB 02 FB | 	rdlong	local03, local06
02274     61 B1 02 F6 | 	mov	local06, local15
02278     03 B0 66 F0 | 	shl	local06, #3
0227c     32 BD 02 F6 | 	mov	local12, objptr
02280     32 B1 02 F1 | 	add	local06, objptr
02284     58 AD 62 FC | 	wrlong	local04, local06
02288     61 BB 02 F6 | 	mov	local11, local15
0228c     5D BF 02 F6 | 	mov	local13, local11
02290     03 BE 66 F0 | 	shl	local13, #3
02294     32 BF 02 F1 | 	add	local13, objptr
02298     04 BE 06 F1 | 	add	local13, #4
0229c     5F AB 62 FC | 	wrlong	local03, local13
022a0     01 C2 06 F1 | 	add	local15, #1
022a4     36 00 00 FF 
022a8     2C 64 86 F1 | 	sub	objptr, ##27692
022ac     88 FF 9F FD | 	jmp	#LR__0106
022b0                 | LR__0107
022b0                 | LR__0108
022b0     01 C6 86 F1 | 	sub	local17, #1
022b4     92 01 00 FF 
022b8     5B 95 06 F6 | 	mov	arg02, ##@LR__5503
022bc     65 93 02 F6 | 	mov	arg01, local19
022c0     40 27 B2 FD | 	call	#__system___string_cmp
022c4     00 7A 0E F2 | 	cmp	result1, #0 wz
022c8     63 A9 52 52 |  if_ne	cmps	local02, local17 wc
022cc     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
022d0                 | '   if p$<>"""" then k+=1:i+=1
022d0     92 01 00 FF 
022d4     5D 95 06 F6 | 	mov	arg02, ##@LR__5504
022d8     65 93 02 F6 | 	mov	arg01, local19
022dc     24 27 B2 FD | 	call	#__system___string_cmp
022e0     00 7A 0E F2 | 	cmp	result1, #0 wz
022e4     01 C6 06 51 |  if_ne	add	local17, #1
022e8     01 A8 06 51 |  if_ne	add	local02, #1
022ec                 | LR__0109
022ec     63 A9 52 F2 | 	cmps	local02, local17 wc
022f0     A4 FE 9F CD |  if_b	jmp	#LR__0104
022f4     00 A8 06 F6 | 	mov	local02, #0
022f8                 | ' 
022f8                 | ' ' 1f : concatenate strings if "" detected between
022f8                 | '  
022f8                 | ' i=0
022f8                 | ' do
022f8                 | LR__0110
022f8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
022f8     54 AF 02 F6 | 	mov	local05, local02
022fc     03 AE 66 F0 | 	shl	local05, #3
02300     32 B1 02 F6 | 	mov	local06, objptr
02304     36 00 00 FF 
02308     2C B0 06 F1 | 	add	local06, ##27692
0230c     58 AF 02 F1 | 	add	local05, local06
02310     57 93 02 FB | 	rdlong	arg01, local05
02314     01 94 06 F6 | 	mov	arg02, #1
02318     F0 3F B2 FD | 	call	#__system__Right_S
0231c     3D 93 02 F6 | 	mov	arg01, result1
02320     92 01 00 FF 
02324     5F 95 06 F6 | 	mov	arg02, ##@LR__5505
02328     D8 26 B2 FD | 	call	#__system___string_cmp
0232c     00 7A 0E F2 | 	cmp	result1, #0 wz
02330     74 01 90 5D |  if_ne	jmp	#LR__0116
02334     54 B1 02 F6 | 	mov	local06, local02
02338     01 B0 06 F1 | 	add	local06, #1
0233c     03 B0 66 F0 | 	shl	local06, #3
02340     32 BD 02 F6 | 	mov	local12, objptr
02344     36 00 00 FF 
02348     2C BC 06 F1 | 	add	local12, ##27692
0234c     5E B1 02 F1 | 	add	local06, local12
02350     58 93 02 FB | 	rdlong	arg01, local06
02354     01 94 06 F6 | 	mov	arg02, #1
02358     28 3F B2 FD | 	call	#__system__Left_S
0235c     3D 93 02 F6 | 	mov	arg01, result1
02360     92 01 00 FF 
02364     61 95 06 F6 | 	mov	arg02, ##@LR__5506
02368     98 26 B2 FD | 	call	#__system___string_cmp
0236c     00 7A 0E F2 | 	cmp	result1, #0 wz
02370     34 01 90 5D |  if_ne	jmp	#LR__0116
02374     54 B9 02 F6 | 	mov	local10, local02
02378     03 B8 66 F0 | 	shl	local10, #3
0237c     36 00 00 FF 
02380     2C 64 06 F1 | 	add	objptr, ##27692
02384     32 B9 02 F1 | 	add	local10, objptr
02388     54 C1 02 F6 | 	mov	local14, local02
0238c     03 C0 66 F0 | 	shl	local14, #3
02390     32 C1 02 F1 | 	add	local14, objptr
02394     60 B1 02 FB | 	rdlong	local06, local14
02398     54 BF 02 F6 | 	mov	local13, local02
0239c     01 BE 06 F1 | 	add	local13, #1
023a0     03 BE 66 F0 | 	shl	local13, #3
023a4     32 BF 02 F1 | 	add	local13, objptr
023a8     5F BD 02 FB | 	rdlong	local12, local13
023ac     54 D1 02 F6 | 	mov	local22, local02
023b0     01 D0 06 F1 | 	add	local22, #1
023b4     68 D3 02 F6 | 	mov	local23, local22
023b8     03 D2 66 F0 | 	shl	local23, #3
023bc     32 D5 02 F6 | 	mov	local24, objptr
023c0     32 D3 02 F1 | 	add	local23, objptr
023c4     69 93 02 FB | 	rdlong	arg01, local23
023c8     36 00 00 FF 
023cc     2C 64 86 F1 | 	sub	objptr, ##27692
023d0     49 B3 02 F6 | 	mov	local07, arg01
023d4     D7 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
023d8                 | LR__0111
023d8     59 7B CA FA | 	rdbyte	result1, local07 wz
023dc     01 B2 06 51 |  if_ne	add	local07, #1
023e0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
023e4                 | LR__0112
023e4     49 B3 82 F1 | 	sub	local07, arg01
023e8     59 BB 02 F6 | 	mov	local11, local07
023ec     01 BA 86 F1 | 	sub	local11, #1
023f0     5E 93 02 F6 | 	mov	arg01, local12
023f4     5D 95 02 F6 | 	mov	arg02, local11
023f8     10 3F B2 FD | 	call	#__system__Right_S
023fc     3D BD 02 F6 | 	mov	local12, result1
02400     58 93 02 F6 | 	mov	arg01, local06
02404     5E 95 02 F6 | 	mov	arg02, local12
02408     2C 26 B2 FD | 	call	#__system___string_concat
0240c     3D B1 02 F6 | 	mov	local06, result1
02410     5C B1 62 FC | 	wrlong	local06, local10
02414                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02414     54 C3 02 F6 | 	mov	local15, local02
02418     01 C2 06 F1 | 	add	local15, #1
0241c     63 D7 02 F6 | 	mov	local25, local17
02420     01 D6 06 F1 | 	add	local25, #1
02424     D7 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02428                 | LR__0113
02428     6B C3 52 F2 | 	cmps	local15, local25 wc
0242c     70 00 90 3D |  if_ae	jmp	#LR__0115
02430     61 AF 02 F6 | 	mov	local05, local15
02434     01 AE 06 F1 | 	add	local05, #1
02438     03 AE 66 F0 | 	shl	local05, #3
0243c     36 00 00 FF 
02440     2C 64 06 F1 | 	add	objptr, ##27692
02444     32 AF 02 F1 | 	add	local05, objptr
02448     57 AD 02 FB | 	rdlong	local04, local05
0244c     61 B1 02 F6 | 	mov	local06, local15
02450     01 B0 06 F1 | 	add	local06, #1
02454     03 B0 66 F0 | 	shl	local06, #3
02458     32 B1 02 F1 | 	add	local06, objptr
0245c     04 B0 06 F1 | 	add	local06, #4
02460     58 AB 02 FB | 	rdlong	local03, local06
02464     61 B1 02 F6 | 	mov	local06, local15
02468     03 B0 66 F0 | 	shl	local06, #3
0246c     32 BD 02 F6 | 	mov	local12, objptr
02470     32 B1 02 F1 | 	add	local06, objptr
02474     58 AD 62 FC | 	wrlong	local04, local06
02478     61 BB 02 F6 | 	mov	local11, local15
0247c     5D BF 02 F6 | 	mov	local13, local11
02480     03 BE 66 F0 | 	shl	local13, #3
02484     32 BF 02 F1 | 	add	local13, objptr
02488     04 BE 06 F1 | 	add	local13, #4
0248c     5F AB 62 FC | 	wrlong	local03, local13
02490     01 C2 06 F1 | 	add	local15, #1
02494     36 00 00 FF 
02498     2C 64 86 F1 | 	sub	objptr, ##27692
0249c     88 FF 9F FD | 	jmp	#LR__0113
024a0                 | LR__0114
024a0                 | LR__0115
024a0     01 A8 86 F1 | 	sub	local02, #1
024a4     01 C6 86 F1 | 	sub	local17, #1
024a8                 | LR__0116
024a8     01 A8 06 F1 | 	add	local02, #1
024ac     63 A9 52 F2 | 	cmps	local02, local17 wc
024b0     44 FE 9F CD |  if_b	jmp	#LR__0110
024b4     00 A8 06 F6 | 	mov	local02, #0
024b8                 | '  
024b8                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
024b8                 | '  
024b8                 | ' i=0 
024b8                 | ' do
024b8                 | LR__0117
024b8     54 B9 02 F6 | 	mov	local10, local02
024bc     03 B8 66 F0 | 	shl	local10, #3
024c0     36 00 00 FF 
024c4     2C 64 06 F1 | 	add	objptr, ##27692
024c8     32 B9 02 F1 | 	add	local10, objptr
024cc     5C D9 02 FB | 	rdlong	local26, local10
024d0     54 B9 02 F6 | 	mov	local10, local02
024d4     01 B8 06 F1 | 	add	local10, #1
024d8     03 B8 66 F0 | 	shl	local10, #3
024dc     32 B9 02 F1 | 	add	local10, objptr
024e0     5C DB 02 FB | 	rdlong	local27, local10
024e4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
024e4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
024e4     92 01 00 FF 
024e8     63 95 06 F6 | 	mov	arg02, ##@LR__5507
024ec     6C 93 02 F6 | 	mov	arg01, local26
024f0     36 00 00 FF 
024f4     2C 64 86 F1 | 	sub	objptr, ##27692
024f8     08 25 B2 FD | 	call	#__system___string_cmp
024fc     00 7A 0E F2 | 	cmp	result1, #0 wz
02500     A8 00 90 AD |  if_e	jmp	#LR__0118
02504     92 01 00 FF 
02508     65 95 06 F6 | 	mov	arg02, ##@LR__5508
0250c     6C 93 02 F6 | 	mov	arg01, local26
02510     F0 24 B2 FD | 	call	#__system___string_cmp
02514     3D AB 0A F6 | 	mov	local03, result1 wz
02518     90 00 90 AD |  if_e	jmp	#LR__0118
0251c     92 01 00 FF 
02520     67 B1 06 F6 | 	mov	local06, ##@LR__5509
02524     6C 93 02 F6 | 	mov	arg01, local26
02528     58 95 02 F6 | 	mov	arg02, local06
0252c     D4 24 B2 FD | 	call	#__system___string_cmp
02530     00 7A 0E F2 | 	cmp	result1, #0 wz
02534     74 00 90 AD |  if_e	jmp	#LR__0118
02538     92 01 00 FF 
0253c     69 BD 06 F6 | 	mov	local12, ##@LR__5510
02540     6C 93 02 F6 | 	mov	arg01, local26
02544     5E 95 02 F6 | 	mov	arg02, local12
02548     B8 24 B2 FD | 	call	#__system___string_cmp
0254c     00 7A 0E F2 | 	cmp	result1, #0 wz
02550     58 00 90 AD |  if_e	jmp	#LR__0118
02554     92 01 00 FF 
02558     6B BB 06 F6 | 	mov	local11, ##@LR__5511
0255c     5D BD 02 F6 | 	mov	local12, local11
02560     6C 93 02 F6 | 	mov	arg01, local26
02564     5E 95 02 F6 | 	mov	arg02, local12
02568     98 24 B2 FD | 	call	#__system___string_cmp
0256c     3D B1 0A F6 | 	mov	local06, result1 wz
02570     38 00 90 AD |  if_e	jmp	#LR__0118
02574     92 01 00 FF 
02578     6D BB 06 F6 | 	mov	local11, ##@LR__5512
0257c     6C 93 02 F6 | 	mov	arg01, local26
02580     5D 95 02 F6 | 	mov	arg02, local11
02584     7C 24 B2 FD | 	call	#__system___string_cmp
02588     3D BD 0A F6 | 	mov	local12, result1 wz
0258c     1C 00 90 AD |  if_e	jmp	#LR__0118
02590     92 01 00 FF 
02594     6F C1 06 F6 | 	mov	local14, ##@LR__5513
02598     6C 93 02 F6 | 	mov	arg01, local26
0259c     60 95 02 F6 | 	mov	arg02, local14
025a0     60 24 B2 FD | 	call	#__system___string_cmp
025a4     3D BB 0A F6 | 	mov	local11, result1 wz
025a8     20 00 90 5D |  if_ne	jmp	#LR__0119
025ac                 | LR__0118
025ac     92 01 00 FF 
025b0     71 DD 06 F6 | 	mov	local28, ##@LR__5514
025b4     6E BF 02 F6 | 	mov	local13, local28
025b8     6D 93 02 F6 | 	mov	arg01, local27
025bc     5F 95 02 F6 | 	mov	arg02, local13
025c0     40 24 B2 FD | 	call	#__system___string_cmp
025c4     3D C1 0A F6 | 	mov	local14, result1 wz
025c8     B8 00 90 AD |  if_e	jmp	#LR__0122
025cc                 | LR__0119
025cc     92 01 00 FF 
025d0     73 DD 06 F6 | 	mov	local28, ##@LR__5515
025d4     6C 93 02 F6 | 	mov	arg01, local26
025d8     6E 95 02 F6 | 	mov	arg02, local28
025dc     24 24 B2 FD | 	call	#__system___string_cmp
025e0     3D BF 0A F6 | 	mov	local13, result1 wz
025e4     20 00 90 5D |  if_ne	jmp	#LR__0120
025e8     92 01 00 FF 
025ec     75 D3 06 F6 | 	mov	local23, ##@LR__5516
025f0     69 D1 02 F6 | 	mov	local22, local23
025f4     6D 93 02 F6 | 	mov	arg01, local27
025f8     68 95 02 F6 | 	mov	arg02, local22
025fc     04 24 B2 FD | 	call	#__system___string_cmp
02600     3D DD 0A F6 | 	mov	local28, result1 wz
02604     7C 00 90 AD |  if_e	jmp	#LR__0122
02608                 | LR__0120
02608     92 01 00 FF 
0260c     77 D3 06 F6 | 	mov	local23, ##@LR__5517
02610     6C 93 02 F6 | 	mov	arg01, local26
02614     69 95 02 F6 | 	mov	arg02, local23
02618     E8 23 B2 FD | 	call	#__system___string_cmp
0261c     3D D1 0A F6 | 	mov	local22, result1 wz
02620     20 00 90 5D |  if_ne	jmp	#LR__0121
02624     92 01 00 FF 
02628     79 DF 06 F6 | 	mov	local29, ##@LR__5518
0262c     6F D5 02 F6 | 	mov	local24, local29
02630     6D 93 02 F6 | 	mov	arg01, local27
02634     6A 95 02 F6 | 	mov	arg02, local24
02638     C8 23 B2 FD | 	call	#__system___string_cmp
0263c     3D D3 0A F6 | 	mov	local23, result1 wz
02640     40 00 90 AD |  if_e	jmp	#LR__0122
02644                 | LR__0121
02644     92 01 00 FF 
02648     7B E1 06 F6 | 	mov	local30, ##@LR__5519
0264c     70 DF 02 F6 | 	mov	local29, local30
02650     6C 93 02 F6 | 	mov	arg01, local26
02654     6F 95 02 F6 | 	mov	arg02, local29
02658     A8 23 B2 FD | 	call	#__system___string_cmp
0265c     3D D5 0A F6 | 	mov	local24, result1 wz
02660     EC 00 90 5D |  if_ne	jmp	#LR__0126
02664     92 01 00 FF 
02668     7D E3 06 F6 | 	mov	local31, ##@LR__5520
0266c     71 E1 02 F6 | 	mov	local30, local31
02670     6D 93 02 F6 | 	mov	arg01, local27
02674     70 95 02 F6 | 	mov	arg02, local30
02678     88 23 B2 FD | 	call	#__system___string_cmp
0267c     3D DF 0A F6 | 	mov	local29, result1 wz
02680     CC 00 90 5D |  if_ne	jmp	#LR__0126
02684                 | LR__0122
02684     54 B9 02 F6 | 	mov	local10, local02
02688     03 B8 66 F0 | 	shl	local10, #3
0268c     32 AF 02 F6 | 	mov	local05, objptr
02690     36 00 00 FF 
02694     2C AE 06 F1 | 	add	local05, ##27692
02698     57 B9 02 F1 | 	add	local10, local05
0269c     6D BD 02 F6 | 	mov	local12, local27
026a0     6C 93 02 F6 | 	mov	arg01, local26
026a4     5E 95 02 F6 | 	mov	arg02, local12
026a8     8C 23 B2 FD | 	call	#__system___string_concat
026ac     5C 7B 62 FC | 	wrlong	result1, local10
026b0                 | '     lparts(i).part$=s1$+s2$
026b0                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
026b0     54 C3 02 F6 | 	mov	local15, local02
026b4     01 C2 06 F1 | 	add	local15, #1
026b8     63 E5 02 F6 | 	mov	local32, local17
026bc     01 E4 06 F1 | 	add	local32, #1
026c0     D7 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
026c4                 | LR__0123
026c4     72 C3 52 F2 | 	cmps	local15, local32 wc
026c8     7C 00 90 3D |  if_ae	jmp	#LR__0125
026cc     61 AF 02 F6 | 	mov	local05, local15
026d0     01 AE 06 F1 | 	add	local05, #1
026d4     03 AE 66 F0 | 	shl	local05, #3
026d8     36 00 00 FF 
026dc     2C 64 06 F1 | 	add	objptr, ##27692
026e0     32 AF 02 F1 | 	add	local05, objptr
026e4     57 AD 02 FB | 	rdlong	local04, local05
026e8     61 B1 02 F6 | 	mov	local06, local15
026ec     01 B0 06 F1 | 	add	local06, #1
026f0     03 B0 66 F0 | 	shl	local06, #3
026f4     32 B1 02 F1 | 	add	local06, objptr
026f8     04 B0 06 F1 | 	add	local06, #4
026fc     58 AB 02 FB | 	rdlong	local03, local06
02700     61 B1 02 F6 | 	mov	local06, local15
02704     03 B0 66 F0 | 	shl	local06, #3
02708     32 BD 02 F6 | 	mov	local12, objptr
0270c     32 B1 02 F1 | 	add	local06, objptr
02710     58 AD 62 FC | 	wrlong	local04, local06
02714     61 BB 02 F6 | 	mov	local11, local15
02718     5D C1 02 F6 | 	mov	local14, local11
0271c     60 BF 02 F6 | 	mov	local13, local14
02720     03 BE 66 F0 | 	shl	local13, #3
02724     32 DD 02 F6 | 	mov	local28, objptr
02728     32 BF 02 F1 | 	add	local13, objptr
0272c     04 BE 06 F1 | 	add	local13, #4
02730     5F AB 62 FC | 	wrlong	local03, local13
02734     04 BE 86 F1 | 	sub	local13, #4
02738     01 C2 06 F1 | 	add	local15, #1
0273c     36 00 00 FF 
02740     2C 64 86 F1 | 	sub	objptr, ##27692
02744     7C FF 9F FD | 	jmp	#LR__0123
02748                 | LR__0124
02748                 | LR__0125
02748     01 A8 86 F1 | 	sub	local02, #1
0274c     01 C6 86 F1 | 	sub	local17, #1
02750                 | LR__0126
02750     01 A8 06 F1 | 	add	local02, #1
02754     63 A9 52 F2 | 	cmps	local02, local17 wc
02758     5C FD 9F CD |  if_b	jmp	#LR__0117
0275c                 | '  
0275c                 | ' ' 1h : now remove parts that are spaces
0275c                 | ' 
0275c                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
0275c     00 A8 06 F6 | 	mov	local02, #0
02760     63 E7 02 F6 | 	mov	local33, local17
02764     01 E6 06 F1 | 	add	local33, #1
02768                 | LR__0127
02768     73 A9 52 F2 | 	cmps	local02, local33 wc
0276c     50 00 90 3D |  if_ae	jmp	#LR__0128
02770     54 B9 02 F6 | 	mov	local10, local02
02774     03 B8 66 F0 | 	shl	local10, #3
02778     36 00 00 FF 
0277c     2C 64 06 F1 | 	add	objptr, ##27692
02780     32 B9 02 F1 | 	add	local10, objptr
02784     54 BD 02 F6 | 	mov	local12, local02
02788     5E BB 02 F6 | 	mov	local11, local12
0278c     5D C1 02 F6 | 	mov	local14, local11
02790     03 C0 66 F0 | 	shl	local14, #3
02794     32 BF 02 F6 | 	mov	local13, objptr
02798     32 C1 02 F1 | 	add	local14, objptr
0279c     60 93 02 FB | 	rdlong	arg01, local14
027a0     36 00 00 FF 
027a4     2C 64 86 F1 | 	sub	objptr, ##27692
027a8     68 3F B2 FD | 	call	#__system__RTrim_S
027ac     3D 93 02 F6 | 	mov	arg01, result1
027b0     A0 3E B2 FD | 	call	#__system__LTrim_S
027b4     5C 7B 62 FC | 	wrlong	result1, local10
027b8     01 A8 06 F1 | 	add	local02, #1
027bc     A8 FF 9F FD | 	jmp	#LR__0127
027c0                 | LR__0128
027c0     00 A8 06 F6 | 	mov	local02, #0
027c4     D7 86 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
027c8                 | ' i=0
027c8                 | ' do 
027c8                 | LR__0129
027c8                 | '   if len(lparts(i).part$)=0 then 
027c8     54 AF 02 F6 | 	mov	local05, local02
027cc     03 AE 66 F0 | 	shl	local05, #3
027d0     32 B1 02 F6 | 	mov	local06, objptr
027d4     36 00 00 FF 
027d8     2C B0 06 F1 | 	add	local06, ##27692
027dc     58 AF 02 F1 | 	add	local05, local06
027e0     57 93 02 FB | 	rdlong	arg01, local05
027e4     49 B3 02 F6 | 	mov	local07, arg01
027e8                 | LR__0130
027e8     59 7B CA FA | 	rdbyte	result1, local07 wz
027ec     01 B2 06 51 |  if_ne	add	local07, #1
027f0     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
027f4     49 B3 8A F1 | 	sub	local07, arg01 wz
027f8     C4 00 90 5D |  if_ne	jmp	#LR__0134
027fc                 | '     if i=k-1 then k-=1  :  exit
027fc     63 AD 02 F6 | 	mov	local04, local17
02800     01 AC 86 F1 | 	sub	local04, #1
02804     56 A9 0A F2 | 	cmp	local02, local04 wz
02808     01 C6 86 A1 |  if_e	sub	local17, #1
0280c     C4 00 90 AD |  if_e	jmp	#LR__0136
02810                 | '     if i<k-1 then 
02810     63 AD 02 F6 | 	mov	local04, local17
02814     01 AC 86 F1 | 	sub	local04, #1
02818     56 A9 52 F2 | 	cmps	local02, local04 wc
0281c     A0 00 90 3D |  if_ae	jmp	#LR__0133
02820                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02820     54 C3 02 F6 | 	mov	local15, local02
02824     63 E9 02 F6 | 	mov	local34, local17
02828     01 E8 86 F1 | 	sub	local34, #1
0282c                 | LR__0131
0282c     74 C3 52 F2 | 	cmps	local15, local34 wc
02830     80 00 90 3D |  if_ae	jmp	#LR__0132
02834     61 AF 02 F6 | 	mov	local05, local15
02838     01 AE 06 F1 | 	add	local05, #1
0283c     03 AE 66 F0 | 	shl	local05, #3
02840     36 00 00 FF 
02844     2C 64 06 F1 | 	add	objptr, ##27692
02848     32 AF 02 F1 | 	add	local05, objptr
0284c     57 AD 02 FB | 	rdlong	local04, local05
02850     61 B1 02 F6 | 	mov	local06, local15
02854     01 B0 06 F1 | 	add	local06, #1
02858     03 B0 66 F0 | 	shl	local06, #3
0285c     32 B1 02 F1 | 	add	local06, objptr
02860     04 B0 06 F1 | 	add	local06, #4
02864     58 AB 02 FB | 	rdlong	local03, local06
02868     61 B9 02 F6 | 	mov	local10, local15
0286c     5C B1 02 F6 | 	mov	local06, local10
02870     03 B0 66 F0 | 	shl	local06, #3
02874     32 BD 02 F6 | 	mov	local12, objptr
02878     32 B1 02 F1 | 	add	local06, objptr
0287c     58 AD 62 FC | 	wrlong	local04, local06
02880     61 BB 02 F6 | 	mov	local11, local15
02884     5D C1 02 F6 | 	mov	local14, local11
02888     60 BF 02 F6 | 	mov	local13, local14
0288c     03 BE 66 F0 | 	shl	local13, #3
02890     32 DD 02 F6 | 	mov	local28, objptr
02894     32 BF 02 F1 | 	add	local13, objptr
02898     04 BE 06 F1 | 	add	local13, #4
0289c     5F AB 62 FC | 	wrlong	local03, local13
028a0     04 BE 86 F1 | 	sub	local13, #4
028a4     01 C2 06 F1 | 	add	local15, #1
028a8     36 00 00 FF 
028ac     2C 64 86 F1 | 	sub	objptr, ##27692
028b0     78 FF 9F FD | 	jmp	#LR__0131
028b4                 | LR__0132
028b4     01 C6 86 F1 | 	sub	local17, #1
028b8                 | '       if i>0 then i-=1 
028b8     01 A8 56 F2 | 	cmps	local02, #1 wc
028bc     01 A8 86 31 |  if_ae	sub	local02, #1
028c0                 | LR__0133
028c0                 | LR__0134
028c0     01 A8 06 F1 | 	add	local02, #1
028c4     63 AD 02 F6 | 	mov	local04, local17
028c8     01 AC 86 F1 | 	sub	local04, #1
028cc     56 A9 5A F2 | 	cmps	local02, local04 wcz
028d0     F4 FE 9F ED |  if_be	jmp	#LR__0129
028d4                 | LR__0135
028d4                 | LR__0136
028d4                 | ' 
028d4                 | ' ' 1i: lowercase all that is not a string
028d4                 | ' 
028d4                 | ' for j=0 to k-1
028d4     00 C2 06 F6 | 	mov	local15, #0
028d8     63 EB 02 F6 | 	mov	local35, local17
028dc                 | LR__0137
028dc     75 C3 52 F2 | 	cmps	local15, local35 wc
028e0     C0 00 90 3D |  if_ae	jmp	#LR__0140
028e4                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
028e4     61 AF 02 F6 | 	mov	local05, local15
028e8     03 AE 66 F0 | 	shl	local05, #3
028ec     32 B1 02 F6 | 	mov	local06, objptr
028f0     36 00 00 FF 
028f4     2C B0 06 F1 | 	add	local06, ##27692
028f8     58 AF 02 F1 | 	add	local05, local06
028fc     57 93 02 FB | 	rdlong	arg01, local05
02900     01 94 06 F6 | 	mov	arg02, #1
02904     7C 39 B2 FD | 	call	#__system__Left_S
02908     3D 93 02 F6 | 	mov	arg01, result1
0290c     92 01 00 FF 
02910     7F 95 06 F6 | 	mov	arg02, ##@LR__5521
02914     EC 20 B2 FD | 	call	#__system___string_cmp
02918     00 7A 0E F2 | 	cmp	result1, #0 wz
0291c     3C 00 90 5D |  if_ne	jmp	#LR__0138
02920     61 B1 02 F6 | 	mov	local06, local15
02924     03 B0 66 F0 | 	shl	local06, #3
02928     32 BD 02 F6 | 	mov	local12, objptr
0292c     36 00 00 FF 
02930     2C BC 06 F1 | 	add	local12, ##27692
02934     5E B1 02 F1 | 	add	local06, local12
02938     58 93 02 FB | 	rdlong	arg01, local06
0293c     01 94 06 F6 | 	mov	arg02, #1
02940     C8 39 B2 FD | 	call	#__system__Right_S
02944     3D 93 02 F6 | 	mov	arg01, result1
02948     92 01 00 FF 
0294c     81 95 06 F6 | 	mov	arg02, ##@LR__5522
02950     B0 20 B2 FD | 	call	#__system___string_cmp
02954     00 7A 0E F2 | 	cmp	result1, #0 wz
02958     40 00 90 AD |  if_e	jmp	#LR__0139
0295c                 | LR__0138
0295c     61 B9 02 F6 | 	mov	local10, local15
02960     03 B8 66 F0 | 	shl	local10, #3
02964     36 00 00 FF 
02968     2C 64 06 F1 | 	add	objptr, ##27692
0296c     32 B9 02 F1 | 	add	local10, objptr
02970     61 BD 02 F6 | 	mov	local12, local15
02974     5E BB 02 F6 | 	mov	local11, local12
02978     5D C1 02 F6 | 	mov	local14, local11
0297c     03 C0 66 F0 | 	shl	local14, #3
02980     32 BF 02 F6 | 	mov	local13, objptr
02984     32 C1 02 F1 | 	add	local14, objptr
02988     60 93 02 FB | 	rdlong	arg01, local14
0298c     36 00 00 FF 
02990     2C 64 86 F1 | 	sub	objptr, ##27692
02994     FC 3B B2 FD | 	call	#__system__LCase_S
02998     5C 7B 62 FC | 	wrlong	result1, local10
0299c                 | LR__0139
0299c     01 C2 06 F1 | 	add	local15, #1
029a0     38 FF 9F FD | 	jmp	#LR__0137
029a4                 | LR__0140
029a4                 | ' 
029a4                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
029a4                 | ' 
029a4                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
029a4     00 A8 06 F6 | 	mov	local02, #0
029a8     63 ED 02 F6 | 	mov	local36, local17
029ac     01 EC 06 F1 | 	add	local36, #1
029b0     D7 1A 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
029b4                 | LR__0141
029b4     76 A9 52 F2 | 	cmps	local02, local36 wc
029b8     2C 00 90 3D |  if_ae	jmp	#LR__0143
029bc     54 B9 02 F6 | 	mov	local10, local02
029c0     03 B8 66 F0 | 	shl	local10, #3
029c4     32 AF 02 F6 | 	mov	local05, objptr
029c8     36 00 00 FF 
029cc     2C AE 06 F1 | 	add	local05, ##27692
029d0     57 B9 02 F1 | 	add	local10, local05
029d4     04 B8 06 F1 | 	add	local10, #4
029d8     FF FF FF FF 
029dc     5C FF 6B FC | 	wrlong	##-1, local10
029e0     01 A8 06 F1 | 	add	local02, #1
029e4     CC FF 9F FD | 	jmp	#LR__0141
029e8                 | LR__0142
029e8                 | LR__0143
029e8                 | ' 
029e8                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
029e8     36 00 00 FF 
029ec     2C 64 06 F1 | 	add	objptr, ##27692
029f0     32 93 02 FB | 	rdlong	arg01, objptr
029f4     36 00 00 FF 
029f8     2C 64 86 F1 | 	sub	objptr, ##27692
029fc     1C 47 B0 FD | 	call	#_isdec
02a00     00 7A 0E F2 | 	cmp	result1, #0 wz
02a04     01 EE 06 56 |  if_ne	mov	local37, #1
02a08     00 EE 06 A6 |  if_e	mov	local37, #0
02a0c                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02a0c     36 00 00 FF 
02a10     2C 64 06 F1 | 	add	objptr, ##27692
02a14     32 93 02 FB | 	rdlong	arg01, objptr
02a18     36 00 00 FF 
02a1c     2C 64 86 F1 | 	sub	objptr, ##27692
02a20     92 01 00 FF 
02a24     83 95 06 F6 | 	mov	arg02, ##@LR__5523
02a28     D8 1F B2 FD | 	call	#__system___string_cmp
02a2c     00 7A 0E F2 | 	cmp	result1, #0 wz
02a30     01 EE 06 A6 |  if_e	mov	local37, #1
02a34     00 A8 06 F6 | 	mov	local02, #0
02a38                 | ' i=0 : do 
02a38                 | LR__0144
02a38                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02a38     54 AF 02 F6 | 	mov	local05, local02
02a3c     03 AE 66 F0 | 	shl	local05, #3
02a40     32 B1 02 F6 | 	mov	local06, objptr
02a44     36 00 00 FF 
02a48     2C B0 06 F1 | 	add	local06, ##27692
02a4c     58 AF 02 F1 | 	add	local05, local06
02a50     57 93 02 FB | 	rdlong	arg01, local05
02a54     92 01 00 FF 
02a58     88 95 06 F6 | 	mov	arg02, ##@LR__5524
02a5c     A4 1F B2 FD | 	call	#__system___string_cmp
02a60     00 7A 0E F2 | 	cmp	result1, #0 wz
02a64     0C 00 90 AD |  if_e	jmp	#LR__0145
02a68     01 A8 06 F1 | 	add	local02, #1
02a6c     63 A9 5A F2 | 	cmps	local02, local17 wcz
02a70     C4 FF 9F ED |  if_be	jmp	#LR__0144
02a74                 | LR__0145
02a74                 | ' if i<k then addptr=i+1	 							' then found
02a74     63 A9 52 F2 | 	cmps	local02, local17 wc
02a78     54 EF 02 C6 |  if_b	mov	local37, local02
02a7c     01 EE 06 C1 |  if_b	add	local37, #1
02a80     36 00 00 FF 
02a84     2C 64 06 F1 | 	add	objptr, ##27692
02a88                 | ' lp$=lparts(addptr).part$ 
02a88                 | ' 
02a88                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a88     77 AF 02 F6 | 	mov	local05, local37
02a8c     03 AE 66 F0 | 	shl	local05, #3
02a90     32 AF 02 F1 | 	add	local05, objptr
02a94     57 93 02 FB | 	rdlong	arg01, local05
02a98     01 94 06 F6 | 	mov	arg02, #1
02a9c     36 00 00 FF 
02aa0     2C 64 86 F1 | 	sub	objptr, ##27692
02aa4     DC 37 B2 FD | 	call	#__system__Left_S
02aa8     3D 93 02 F6 | 	mov	arg01, result1
02aac     92 01 00 FF 
02ab0     8D 95 06 F6 | 	mov	arg02, ##@LR__5525
02ab4     4C 1F B2 FD | 	call	#__system___string_cmp
02ab8     00 7A 0E F2 | 	cmp	result1, #0 wz
02abc     58 01 90 5D |  if_ne	jmp	#LR__0152
02ac0     77 B1 02 F6 | 	mov	local06, local37
02ac4     03 B0 66 F0 | 	shl	local06, #3
02ac8     32 BD 02 F6 | 	mov	local12, objptr
02acc     36 00 00 FF 
02ad0     2C BC 06 F1 | 	add	local12, ##27692
02ad4     5E B1 02 F1 | 	add	local06, local12
02ad8     58 93 02 FB | 	rdlong	arg01, local06
02adc     49 B3 02 F6 | 	mov	local07, arg01
02ae0     D7 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
02ae4                 | LR__0146
02ae4     59 7B CA FA | 	rdbyte	result1, local07 wz
02ae8     01 B2 06 51 |  if_ne	add	local07, #1
02aec     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
02af0                 | LR__0147
02af0     49 B3 82 F1 | 	sub	local07, arg01
02af4     02 B2 56 F2 | 	cmps	local07, #2 wc
02af8     1C 01 90 CD |  if_b	jmp	#LR__0152
02afc     01 C6 06 F1 | 	add	local17, #1
02b00                 | '   k+=1
02b00                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02b00     63 A9 02 F6 | 	mov	local02, local17
02b04     77 F1 02 F6 | 	mov	local38, local37
02b08     01 F0 06 F1 | 	add	local38, #1
02b0c     36 00 00 FF 
02b10     2C 64 06 F1 | 	add	objptr, ##27692
02b14     D7 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02b18                 | LR__0148
02b18     54 AF 02 F6 | 	mov	local05, local02
02b1c     01 AE 86 F1 | 	sub	local05, #1
02b20     03 AE 66 F0 | 	shl	local05, #3
02b24     32 AF 02 F1 | 	add	local05, objptr
02b28     57 AD 02 FB | 	rdlong	local04, local05
02b2c     54 B1 02 F6 | 	mov	local06, local02
02b30     01 B0 86 F1 | 	sub	local06, #1
02b34     03 B0 66 F0 | 	shl	local06, #3
02b38     32 B1 02 F1 | 	add	local06, objptr
02b3c     04 B0 06 F1 | 	add	local06, #4
02b40     58 AB 02 FB | 	rdlong	local03, local06
02b44     54 B1 02 F6 | 	mov	local06, local02
02b48     03 B0 66 F0 | 	shl	local06, #3
02b4c     32 B1 02 F1 | 	add	local06, objptr
02b50     58 AD 62 FC | 	wrlong	local04, local06
02b54     54 BF 02 F6 | 	mov	local13, local02
02b58     03 BE 66 F0 | 	shl	local13, #3
02b5c     32 BF 02 F1 | 	add	local13, objptr
02b60     04 BE 06 F1 | 	add	local13, #4
02b64     5F AB 62 FC | 	wrlong	local03, local13
02b68     01 A8 86 F1 | 	sub	local02, #1
02b6c     78 A9 52 F2 | 	cmps	local02, local38 wc
02b70     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02b74                 | LR__0149
02b74     77 B9 02 F6 | 	mov	local10, local37
02b78     01 B8 06 F1 | 	add	local10, #1
02b7c     03 B8 66 F0 | 	shl	local10, #3
02b80     32 B9 02 F1 | 	add	local10, objptr
02b84     77 C1 02 F6 | 	mov	local14, local37
02b88     03 C0 66 F0 | 	shl	local14, #3
02b8c     32 C1 02 F1 | 	add	local14, objptr
02b90     60 B1 02 FB | 	rdlong	local06, local14
02b94     77 BF 02 F6 | 	mov	local13, local37
02b98     5F DD 02 F6 | 	mov	local28, local13
02b9c     6E D1 02 F6 | 	mov	local22, local28
02ba0     03 D0 66 F0 | 	shl	local22, #3
02ba4     32 D3 02 F6 | 	mov	local23, objptr
02ba8     32 D1 02 F1 | 	add	local22, objptr
02bac     68 93 02 FB | 	rdlong	arg01, local22
02bb0     36 00 00 FF 
02bb4     2C 64 86 F1 | 	sub	objptr, ##27692
02bb8     49 B3 02 F6 | 	mov	local07, arg01
02bbc     D7 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02bc0                 | LR__0150
02bc0     59 7B CA FA | 	rdbyte	result1, local07 wz
02bc4     01 B2 06 51 |  if_ne	add	local07, #1
02bc8     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02bcc                 | LR__0151
02bcc     49 B3 82 F1 | 	sub	local07, arg01
02bd0     59 C1 02 F6 | 	mov	local14, local07
02bd4     60 BB 02 F6 | 	mov	local11, local14
02bd8     01 BA 86 F1 | 	sub	local11, #1
02bdc     5D BD 02 F6 | 	mov	local12, local11
02be0     58 93 02 F6 | 	mov	arg01, local06
02be4     5E 95 02 F6 | 	mov	arg02, local12
02be8     20 37 B2 FD | 	call	#__system__Right_S
02bec     5C 7B 62 FC | 	wrlong	result1, local10
02bf0     77 B9 02 F6 | 	mov	local10, local37
02bf4     03 B8 66 F0 | 	shl	local10, #3
02bf8     32 AF 02 F6 | 	mov	local05, objptr
02bfc     36 00 00 FF 
02c00     2C AE 06 F1 | 	add	local05, ##27692
02c04     57 B9 02 F1 | 	add	local10, local05
02c08     92 01 00 FF 
02c0c     8F B1 06 F6 | 	mov	local06, ##@LR__5526
02c10     5C B1 62 FC | 	wrlong	local06, local10
02c14     9C 01 90 FD | 	jmp	#LR__0160
02c18                 | LR__0152
02c18     77 B1 02 F6 | 	mov	local06, local37
02c1c     03 B0 66 F0 | 	shl	local06, #3
02c20     32 BD 02 F6 | 	mov	local12, objptr
02c24     36 00 00 FF 
02c28     2C BC 06 F1 | 	add	local12, ##27692
02c2c     5E B1 02 F1 | 	add	local06, local12
02c30     58 95 02 FB | 	rdlong	arg02, local06
02c34     92 01 00 FF 
02c38     91 97 06 F6 | 	mov	arg03, ##@LR__5527
02c3c     01 92 06 F6 | 	mov	arg01, #1
02c40     88 3B B2 FD | 	call	#__system__Instr
02c44     3D F3 02 F6 | 	mov	local39, result1
02c48                 | ' 
02c48                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02c48                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02c48     01 F2 56 F2 | 	cmps	local39, #1 wc
02c4c     64 01 90 CD |  if_b	jmp	#LR__0159
02c50     77 AF 02 F6 | 	mov	local05, local37
02c54     03 AE 66 F0 | 	shl	local05, #3
02c58     32 B1 02 F6 | 	mov	local06, objptr
02c5c     36 00 00 FF 
02c60     2C B0 06 F1 | 	add	local06, ##27692
02c64     58 AF 02 F1 | 	add	local05, local06
02c68     57 93 02 FB | 	rdlong	arg01, local05
02c6c     49 B3 02 F6 | 	mov	local07, arg01
02c70     D7 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02c74                 | LR__0153
02c74     59 7B CA FA | 	rdbyte	result1, local07 wz
02c78     01 B2 06 51 |  if_ne	add	local07, #1
02c7c     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02c80                 | LR__0154
02c80     49 B3 82 F1 | 	sub	local07, arg01
02c84     59 F3 52 F2 | 	cmps	local39, local07 wc
02c88     28 01 90 3D |  if_ae	jmp	#LR__0159
02c8c     01 C6 06 F1 | 	add	local17, #1
02c90                 | '   k+=1
02c90                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02c90     63 A9 02 F6 | 	mov	local02, local17
02c94     77 F5 02 F6 | 	mov	local40, local37
02c98     01 F4 06 F1 | 	add	local40, #1
02c9c     36 00 00 FF 
02ca0     2C 64 06 F1 | 	add	objptr, ##27692
02ca4     D7 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ca8                 | LR__0155
02ca8     54 AF 02 F6 | 	mov	local05, local02
02cac     01 AE 86 F1 | 	sub	local05, #1
02cb0     03 AE 66 F0 | 	shl	local05, #3
02cb4     32 AF 02 F1 | 	add	local05, objptr
02cb8     57 AD 02 FB | 	rdlong	local04, local05
02cbc     54 B1 02 F6 | 	mov	local06, local02
02cc0     01 B0 86 F1 | 	sub	local06, #1
02cc4     03 B0 66 F0 | 	shl	local06, #3
02cc8     32 B1 02 F1 | 	add	local06, objptr
02ccc     04 B0 06 F1 | 	add	local06, #4
02cd0     58 AB 02 FB | 	rdlong	local03, local06
02cd4     54 B1 02 F6 | 	mov	local06, local02
02cd8     03 B0 66 F0 | 	shl	local06, #3
02cdc     32 B1 02 F1 | 	add	local06, objptr
02ce0     58 AD 62 FC | 	wrlong	local04, local06
02ce4     54 BF 02 F6 | 	mov	local13, local02
02ce8     03 BE 66 F0 | 	shl	local13, #3
02cec     32 BF 02 F1 | 	add	local13, objptr
02cf0     04 BE 06 F1 | 	add	local13, #4
02cf4     5F AB 62 FC | 	wrlong	local03, local13
02cf8     01 A8 86 F1 | 	sub	local02, #1
02cfc     7A A9 52 F2 | 	cmps	local02, local40 wc
02d00     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02d04                 | LR__0156
02d04     77 B9 02 F6 | 	mov	local10, local37
02d08     01 B8 06 F1 | 	add	local10, #1
02d0c     03 B8 66 F0 | 	shl	local10, #3
02d10     32 B9 02 F1 | 	add	local10, objptr
02d14     77 C1 02 F6 | 	mov	local14, local37
02d18     03 C0 66 F0 | 	shl	local14, #3
02d1c     32 C1 02 F1 | 	add	local14, objptr
02d20     60 B1 02 FB | 	rdlong	local06, local14
02d24     77 DD 02 F6 | 	mov	local28, local37
02d28     6E D1 02 F6 | 	mov	local22, local28
02d2c     03 D0 66 F0 | 	shl	local22, #3
02d30     32 D3 02 F6 | 	mov	local23, objptr
02d34     32 D1 02 F1 | 	add	local22, objptr
02d38     68 93 02 FB | 	rdlong	arg01, local22
02d3c     36 00 00 FF 
02d40     2C 64 86 F1 | 	sub	objptr, ##27692
02d44     49 B3 02 F6 | 	mov	local07, arg01
02d48     D7 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02d4c                 | LR__0157
02d4c     59 7B CA FA | 	rdbyte	result1, local07 wz
02d50     01 B2 06 51 |  if_ne	add	local07, #1
02d54     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02d58                 | LR__0158
02d58     49 B3 82 F1 | 	sub	local07, arg01
02d5c     59 95 02 F6 | 	mov	arg02, local07
02d60     79 95 82 F1 | 	sub	arg02, local39
02d64     58 93 02 F6 | 	mov	arg01, local06
02d68     A0 35 B2 FD | 	call	#__system__Right_S
02d6c     5C 7B 62 FC | 	wrlong	result1, local10
02d70     77 B9 02 F6 | 	mov	local10, local37
02d74     03 B8 66 F0 | 	shl	local10, #3
02d78     36 00 00 FF 
02d7c     2C 64 06 F1 | 	add	objptr, ##27692
02d80     32 B9 02 F1 | 	add	local10, objptr
02d84     77 BB 02 F6 | 	mov	local11, local37
02d88     5D C1 02 F6 | 	mov	local14, local11
02d8c     03 C0 66 F0 | 	shl	local14, #3
02d90     32 BF 02 F6 | 	mov	local13, objptr
02d94     32 C1 02 F1 | 	add	local14, objptr
02d98     60 93 02 FB | 	rdlong	arg01, local14
02d9c     79 BD 02 F6 | 	mov	local12, local39
02da0     5E 95 02 F6 | 	mov	arg02, local12
02da4     36 00 00 FF 
02da8     2C 64 86 F1 | 	sub	objptr, ##27692
02dac     D4 34 B2 FD | 	call	#__system__Left_S
02db0     5C 7B 62 FC | 	wrlong	result1, local10
02db4                 | LR__0159
02db4                 | LR__0160
02db4     77 B9 02 F6 | 	mov	local10, local37
02db8     03 B8 66 F0 | 	shl	local10, #3
02dbc     32 AF 02 F6 | 	mov	local05, objptr
02dc0     36 00 00 FF 
02dc4     2C AE 06 F1 | 	add	local05, ##27692
02dc8     57 B9 02 F1 | 	add	local10, local05
02dcc     5C F7 02 FB | 	rdlong	local41, local10
02dd0                 | ' 
02dd0                 | ' 825
02dd0                 | ' lp$=lparts(addptr).part$ 
02dd0                 | ' 
02dd0                 | ' ' process mouse/cursor/click on/off
02dd0                 | ' 
02dd0                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02dd0     92 01 00 FF 
02dd4     93 95 06 F6 | 	mov	arg02, ##@LR__5528
02dd8     7B 93 02 F6 | 	mov	arg01, local41
02ddc     24 1C B2 FD | 	call	#__system___string_cmp
02de0     00 7A 0E F2 | 	cmp	result1, #0 wz
02de4     30 00 90 AD |  if_e	jmp	#LR__0161
02de8     92 01 00 FF 
02dec     99 95 06 F6 | 	mov	arg02, ##@LR__5529
02df0     7B 93 02 F6 | 	mov	arg01, local41
02df4     0C 1C B2 FD | 	call	#__system___string_cmp
02df8     00 7A 0E F2 | 	cmp	result1, #0 wz
02dfc     18 00 90 AD |  if_e	jmp	#LR__0161
02e00     92 01 00 FF 
02e04     A0 95 06 F6 | 	mov	arg02, ##@LR__5530
02e08     7B 93 02 F6 | 	mov	arg01, local41
02e0c     F4 1B B2 FD | 	call	#__system___string_cmp
02e10     00 7A 0E F2 | 	cmp	result1, #0 wz
02e14     D8 00 90 5D |  if_ne	jmp	#LR__0164
02e18                 | LR__0161
02e18                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02e18     77 AF 02 F6 | 	mov	local05, local37
02e1c     01 AE 06 F1 | 	add	local05, #1
02e20     03 AE 66 F0 | 	shl	local05, #3
02e24     32 B1 02 F6 | 	mov	local06, objptr
02e28     36 00 00 FF 
02e2c     2C B0 06 F1 | 	add	local06, ##27692
02e30     58 AF 02 F1 | 	add	local05, local06
02e34     57 93 02 FB | 	rdlong	arg01, local05
02e38     92 01 00 FF 
02e3c     A6 95 06 F6 | 	mov	arg02, ##@LR__5531
02e40     C0 1B B2 FD | 	call	#__system___string_cmp
02e44     00 7A 0E F2 | 	cmp	result1, #0 wz
02e48     38 00 90 5D |  if_ne	jmp	#LR__0162
02e4c     77 B9 02 F6 | 	mov	local10, local37
02e50     01 B8 06 F1 | 	add	local10, #1
02e54     03 B8 66 F0 | 	shl	local10, #3
02e58     36 00 00 FF 
02e5c     2C 64 06 F1 | 	add	objptr, ##27692
02e60     32 B9 02 F1 | 	add	local10, objptr
02e64     92 01 00 FF 
02e68     A9 B1 06 F6 | 	mov	local06, ##@LR__5532
02e6c     5C B1 62 FC | 	wrlong	local06, local10
02e70     14 64 06 F1 | 	add	objptr, #20
02e74     01 00 80 FF 
02e78     32 01 68 FC | 	wrlong	##512, objptr
02e7c     36 00 00 FF 
02e80     40 64 86 F1 | 	sub	objptr, ##27712
02e84                 | LR__0162
02e84                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02e84     77 AF 02 F6 | 	mov	local05, local37
02e88     01 AE 06 F1 | 	add	local05, #1
02e8c     03 AE 66 F0 | 	shl	local05, #3
02e90     32 B1 02 F6 | 	mov	local06, objptr
02e94     36 00 00 FF 
02e98     2C B0 06 F1 | 	add	local06, ##27692
02e9c     58 AF 02 F1 | 	add	local05, local06
02ea0     57 93 02 FB | 	rdlong	arg01, local05
02ea4     92 01 00 FF 
02ea8     AB 95 06 F6 | 	mov	arg02, ##@LR__5533
02eac     54 1B B2 FD | 	call	#__system___string_cmp
02eb0     00 7A 0E F2 | 	cmp	result1, #0 wz
02eb4     38 00 90 5D |  if_ne	jmp	#LR__0163
02eb8     77 B9 02 F6 | 	mov	local10, local37
02ebc     01 B8 06 F1 | 	add	local10, #1
02ec0     03 B8 66 F0 | 	shl	local10, #3
02ec4     36 00 00 FF 
02ec8     2C 64 06 F1 | 	add	objptr, ##27692
02ecc     32 B9 02 F1 | 	add	local10, objptr
02ed0     92 01 00 FF 
02ed4     AF B1 06 F6 | 	mov	local06, ##@LR__5534
02ed8     5C B1 62 FC | 	wrlong	local06, local10
02edc     14 64 06 F1 | 	add	objptr, #20
02ee0     01 00 80 FF 
02ee4     32 01 68 FC | 	wrlong	##512, objptr
02ee8     36 00 00 FF 
02eec     40 64 86 F1 | 	sub	objptr, ##27712
02ef0                 | LR__0163
02ef0                 | LR__0164
02ef0                 | ' 		
02ef0                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02ef0                 | ' 
02ef0                 | ' if (lp$="mode" orelse lp$="m.") then 
02ef0     92 01 00 FF 
02ef4     B1 95 06 F6 | 	mov	arg02, ##@LR__5535
02ef8     7B 93 02 F6 | 	mov	arg01, local41
02efc     04 1B B2 FD | 	call	#__system___string_cmp
02f00     00 7A 0E F2 | 	cmp	result1, #0 wz
02f04     18 00 90 AD |  if_e	jmp	#LR__0165
02f08     92 01 00 FF 
02f0c     B6 95 06 F6 | 	mov	arg02, ##@LR__5536
02f10     7B 93 02 F6 | 	mov	arg01, local41
02f14     EC 1A B2 FD | 	call	#__system___string_cmp
02f18     00 7A 0E F2 | 	cmp	result1, #0 wz
02f1c     28 02 90 5D |  if_ne	jmp	#LR__0172
02f20                 | LR__0165
02f20                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02f20     77 AF 02 F6 | 	mov	local05, local37
02f24     01 AE 06 F1 | 	add	local05, #1
02f28     03 AE 66 F0 | 	shl	local05, #3
02f2c     32 B1 02 F6 | 	mov	local06, objptr
02f30     36 00 00 FF 
02f34     2C B0 06 F1 | 	add	local06, ##27692
02f38     58 AF 02 F1 | 	add	local05, local06
02f3c     57 93 02 FB | 	rdlong	arg01, local05
02f40     92 01 00 FF 
02f44     B9 95 06 F6 | 	mov	arg02, ##@LR__5537
02f48     B8 1A B2 FD | 	call	#__system___string_cmp
02f4c     00 7A 0E F2 | 	cmp	result1, #0 wz
02f50     28 00 90 5D |  if_ne	jmp	#LR__0166
02f54     77 B9 02 F6 | 	mov	local10, local37
02f58     01 B8 06 F1 | 	add	local10, #1
02f5c     03 B8 66 F0 | 	shl	local10, #3
02f60     32 AF 02 F6 | 	mov	local05, objptr
02f64     36 00 00 FF 
02f68     2C AE 06 F1 | 	add	local05, ##27692
02f6c     57 B9 02 F1 | 	add	local10, local05
02f70     92 01 00 FF 
02f74     BF B1 06 F6 | 	mov	local06, ##@LR__5538
02f78     5C B1 62 FC | 	wrlong	local06, local10
02f7c                 | LR__0166
02f7c                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02f7c     77 AF 02 F6 | 	mov	local05, local37
02f80     01 AE 06 F1 | 	add	local05, #1
02f84     03 AE 66 F0 | 	shl	local05, #3
02f88     32 B1 02 F6 | 	mov	local06, objptr
02f8c     36 00 00 FF 
02f90     2C B0 06 F1 | 	add	local06, ##27692
02f94     58 AF 02 F1 | 	add	local05, local06
02f98     57 93 02 FB | 	rdlong	arg01, local05
02f9c     92 01 00 FF 
02fa0     C1 95 06 F6 | 	mov	arg02, ##@LR__5539
02fa4     5C 1A B2 FD | 	call	#__system___string_cmp
02fa8     00 7A 0E F2 | 	cmp	result1, #0 wz
02fac     28 00 90 5D |  if_ne	jmp	#LR__0167
02fb0     77 B9 02 F6 | 	mov	local10, local37
02fb4     01 B8 06 F1 | 	add	local10, #1
02fb8     03 B8 66 F0 | 	shl	local10, #3
02fbc     32 AF 02 F6 | 	mov	local05, objptr
02fc0     36 00 00 FF 
02fc4     2C AE 06 F1 | 	add	local05, ##27692
02fc8     57 B9 02 F1 | 	add	local10, local05
02fcc     92 01 00 FF 
02fd0     CA B1 06 F6 | 	mov	local06, ##@LR__5540
02fd4     5C B1 62 FC | 	wrlong	local06, local10
02fd8                 | LR__0167
02fd8                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02fd8     77 AF 02 F6 | 	mov	local05, local37
02fdc     01 AE 06 F1 | 	add	local05, #1
02fe0     03 AE 66 F0 | 	shl	local05, #3
02fe4     32 B1 02 F6 | 	mov	local06, objptr
02fe8     36 00 00 FF 
02fec     2C B0 06 F1 | 	add	local06, ##27692
02ff0     58 AF 02 F1 | 	add	local05, local06
02ff4     57 93 02 FB | 	rdlong	arg01, local05
02ff8     92 01 00 FF 
02ffc     CC 95 06 F6 | 	mov	arg02, ##@LR__5541
03000     00 1A B2 FD | 	call	#__system___string_cmp
03004     00 7A 0E F2 | 	cmp	result1, #0 wz
03008     28 00 90 5D |  if_ne	jmp	#LR__0168
0300c     77 B9 02 F6 | 	mov	local10, local37
03010     01 B8 06 F1 | 	add	local10, #1
03014     03 B8 66 F0 | 	shl	local10, #3
03018     32 AF 02 F6 | 	mov	local05, objptr
0301c     36 00 00 FF 
03020     2C AE 06 F1 | 	add	local05, ##27692
03024     57 B9 02 F1 | 	add	local10, local05
03028     92 01 00 FF 
0302c     D5 B1 06 F6 | 	mov	local06, ##@LR__5542
03030     5C B1 62 FC | 	wrlong	local06, local10
03034                 | LR__0168
03034                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
03034     77 AF 02 F6 | 	mov	local05, local37
03038     01 AE 06 F1 | 	add	local05, #1
0303c     03 AE 66 F0 | 	shl	local05, #3
03040     32 B1 02 F6 | 	mov	local06, objptr
03044     36 00 00 FF 
03048     2C B0 06 F1 | 	add	local06, ##27692
0304c     58 AF 02 F1 | 	add	local05, local06
03050     57 93 02 FB | 	rdlong	arg01, local05
03054     92 01 00 FF 
03058     D7 95 06 F6 | 	mov	arg02, ##@LR__5543
0305c     A4 19 B2 FD | 	call	#__system___string_cmp
03060     00 7A 0E F2 | 	cmp	result1, #0 wz
03064     28 00 90 5D |  if_ne	jmp	#LR__0169
03068     77 B9 02 F6 | 	mov	local10, local37
0306c     01 B8 06 F1 | 	add	local10, #1
03070     03 B8 66 F0 | 	shl	local10, #3
03074     32 AF 02 F6 | 	mov	local05, objptr
03078     36 00 00 FF 
0307c     2C AE 06 F1 | 	add	local05, ##27692
03080     57 B9 02 F1 | 	add	local10, local05
03084     92 01 00 FF 
03088     E0 B1 06 F6 | 	mov	local06, ##@LR__5544
0308c     5C B1 62 FC | 	wrlong	local06, local10
03090                 | LR__0169
03090                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
03090     77 AF 02 F6 | 	mov	local05, local37
03094     01 AE 06 F1 | 	add	local05, #1
03098     03 AE 66 F0 | 	shl	local05, #3
0309c     32 B1 02 F6 | 	mov	local06, objptr
030a0     36 00 00 FF 
030a4     2C B0 06 F1 | 	add	local06, ##27692
030a8     58 AF 02 F1 | 	add	local05, local06
030ac     57 93 02 FB | 	rdlong	arg01, local05
030b0     92 01 00 FF 
030b4     E2 95 06 F6 | 	mov	arg02, ##@LR__5545
030b8     48 19 B2 FD | 	call	#__system___string_cmp
030bc     00 7A 0E F2 | 	cmp	result1, #0 wz
030c0     28 00 90 5D |  if_ne	jmp	#LR__0170
030c4     77 B9 02 F6 | 	mov	local10, local37
030c8     01 B8 06 F1 | 	add	local10, #1
030cc     03 B8 66 F0 | 	shl	local10, #3
030d0     32 AF 02 F6 | 	mov	local05, objptr
030d4     36 00 00 FF 
030d8     2C AE 06 F1 | 	add	local05, ##27692
030dc     57 B9 02 F1 | 	add	local10, local05
030e0     92 01 00 FF 
030e4     E5 B1 06 F6 | 	mov	local06, ##@LR__5546
030e8     5C B1 62 FC | 	wrlong	local06, local10
030ec                 | LR__0170
030ec                 | '   if lparts(addptr+1).part$="amiga" then lparts(addptr+1).part$="5"  
030ec     77 AF 02 F6 | 	mov	local05, local37
030f0     01 AE 06 F1 | 	add	local05, #1
030f4     03 AE 66 F0 | 	shl	local05, #3
030f8     32 B1 02 F6 | 	mov	local06, objptr
030fc     36 00 00 FF 
03100     2C B0 06 F1 | 	add	local06, ##27692
03104     58 AF 02 F1 | 	add	local05, local06
03108     57 93 02 FB | 	rdlong	arg01, local05
0310c     92 01 00 FF 
03110     E7 95 06 F6 | 	mov	arg02, ##@LR__5547
03114     EC 18 B2 FD | 	call	#__system___string_cmp
03118     00 7A 0E F2 | 	cmp	result1, #0 wz
0311c     28 00 90 5D |  if_ne	jmp	#LR__0171
03120     77 B9 02 F6 | 	mov	local10, local37
03124     01 B8 06 F1 | 	add	local10, #1
03128     03 B8 66 F0 | 	shl	local10, #3
0312c     32 AF 02 F6 | 	mov	local05, objptr
03130     36 00 00 FF 
03134     2C AE 06 F1 | 	add	local05, ##27692
03138     57 B9 02 F1 | 	add	local10, local05
0313c     92 01 00 FF 
03140     ED B1 06 F6 | 	mov	local06, ##@LR__5548
03144     5C B1 62 FC | 	wrlong	local06, local10
03148                 | LR__0171
03148                 | LR__0172
03148                 | ' 
03148                 | ' ' find part types 
03148                 | ' 
03148                 | ' for i=0 to k-1
03148     00 A8 06 F6 | 	mov	local02, #0
0314c     63 F9 02 F6 | 	mov	local42, local17
03150                 | LR__0173
03150     7C A9 52 F2 | 	cmps	local02, local42 wc
03154     58 07 90 3D |  if_ae	jmp	#LR__0185
03158     54 B9 02 F6 | 	mov	local10, local02
0315c     03 B8 66 F0 | 	shl	local10, #3
03160     36 00 00 FF 
03164     2C 64 06 F1 | 	add	objptr, ##27692
03168     32 B9 02 F1 | 	add	local10, objptr
0316c     54 BB 02 F6 | 	mov	local11, local02
03170     5D C1 02 F6 | 	mov	local14, local11
03174     60 BF 02 F6 | 	mov	local13, local14
03178     03 BE 66 F0 | 	shl	local13, #3
0317c     32 BF 02 F1 | 	add	local13, objptr
03180     5F 93 02 FB | 	rdlong	arg01, local13
03184     36 00 00 FF 
03188     2C 64 86 F1 | 	sub	objptr, ##27692
0318c     A8 1A B0 FD | 	call	#_isseparator
03190     3D 7B E2 F8 | 	getbyte	result1, result1, #0
03194     04 B8 06 F1 | 	add	local10, #4
03198     5C 7B 62 FC | 	wrlong	result1, local10
0319c                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0319c     54 B9 02 F6 | 	mov	local10, local02
031a0     03 B8 66 F0 | 	shl	local10, #3
031a4     32 AF 02 F6 | 	mov	local05, objptr
031a8     36 00 00 FF 
031ac     2C AE 06 F1 | 	add	local05, ##27692
031b0     57 B9 02 F1 | 	add	local10, local05
031b4     04 B8 06 F1 | 	add	local10, #4
031b8     5C BD 02 FB | 	rdlong	local12, local10
031bc     01 BC 56 F2 | 	cmps	local12, #1 wc
031c0     E4 06 90 3D |  if_ae	jmp	#LR__0184
031c4     54 B9 02 F6 | 	mov	local10, local02
031c8     03 B8 66 F0 | 	shl	local10, #3
031cc     36 00 00 FF 
031d0     2C 64 06 F1 | 	add	objptr, ##27692
031d4     32 B9 02 F1 | 	add	local10, objptr
031d8     54 BB 02 F6 | 	mov	local11, local02
031dc     5D C1 02 F6 | 	mov	local14, local11
031e0     60 BF 02 F6 | 	mov	local13, local14
031e4     03 BE 66 F0 | 	shl	local13, #3
031e8     32 BF 02 F1 | 	add	local13, objptr
031ec     5F 93 02 FB | 	rdlong	arg01, local13
031f0     36 00 00 FF 
031f4     2C 64 86 F1 | 	sub	objptr, ##27692
031f8     88 12 B0 FD | 	call	#_isoperator
031fc     3D 7B E2 F8 | 	getbyte	result1, result1, #0
03200     04 B8 06 F1 | 	add	local10, #4
03204     5C 7B 62 FC | 	wrlong	result1, local10
03208                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03208     54 B9 02 F6 | 	mov	local10, local02
0320c     03 B8 66 F0 | 	shl	local10, #3
03210     32 AF 02 F6 | 	mov	local05, objptr
03214     36 00 00 FF 
03218     2C AE 06 F1 | 	add	local05, ##27692
0321c     57 B9 02 F1 | 	add	local10, local05
03220     04 B8 06 F1 | 	add	local10, #4
03224     5C BD 02 FB | 	rdlong	local12, local10
03228     01 BC 56 F2 | 	cmps	local12, #1 wc
0322c     78 06 90 3D |  if_ae	jmp	#LR__0184
03230     54 B9 02 F6 | 	mov	local10, local02
03234     03 B8 66 F0 | 	shl	local10, #3
03238     36 00 00 FF 
0323c     2C 64 06 F1 | 	add	objptr, ##27692
03240     32 B9 02 F1 | 	add	local10, objptr
03244     54 BB 02 F6 | 	mov	local11, local02
03248     5D C1 02 F6 | 	mov	local14, local11
0324c     60 BF 02 F6 | 	mov	local13, local14
03250     03 BE 66 F0 | 	shl	local13, #3
03254     32 BF 02 F1 | 	add	local13, objptr
03258     5F 93 02 FB | 	rdlong	arg01, local13
0325c     36 00 00 FF 
03260     2C 64 86 F1 | 	sub	objptr, ##27692
03264                 | ' 
03264                 | ' select case s
03264     93 01 00 FF 
03268     F2 94 06 F6 | 	mov	arg02, ##@LR__5639
0326c     94 17 B2 FD | 	call	#__system___string_cmp
03270     00 7A 0E F2 | 	cmp	result1, #0 wz
03274     1B 7A 06 A6 |  if_e	mov	result1, #27
03278     00 7A 06 56 |  if_ne	mov	result1, #0
0327c     3D 7B E2 F8 | 	getbyte	result1, result1, #0
03280     04 B8 06 F1 | 	add	local10, #4
03284     5C 7B 62 FC | 	wrlong	result1, local10
03288                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03288     54 B9 02 F6 | 	mov	local10, local02
0328c     03 B8 66 F0 | 	shl	local10, #3
03290     32 AF 02 F6 | 	mov	local05, objptr
03294     36 00 00 FF 
03298     2C AE 06 F1 | 	add	local05, ##27692
0329c     57 B9 02 F1 | 	add	local10, local05
032a0     04 B8 06 F1 | 	add	local10, #4
032a4     5C BD 02 FB | 	rdlong	local12, local10
032a8     01 BC 56 F2 | 	cmps	local12, #1 wc
032ac     F8 05 90 3D |  if_ae	jmp	#LR__0184
032b0     54 B9 02 F6 | 	mov	local10, local02
032b4     03 B8 66 F0 | 	shl	local10, #3
032b8     36 00 00 FF 
032bc     2C 64 06 F1 | 	add	objptr, ##27692
032c0     32 B9 02 F1 | 	add	local10, objptr
032c4     54 BB 02 F6 | 	mov	local11, local02
032c8     5D C1 02 F6 | 	mov	local14, local11
032cc     60 BF 02 F6 | 	mov	local13, local14
032d0     03 BE 66 F0 | 	shl	local13, #3
032d4     32 BF 02 F1 | 	add	local13, objptr
032d8     5F 93 02 FB | 	rdlong	arg01, local13
032dc     36 00 00 FF 
032e0     2C 64 86 F1 | 	sub	objptr, ##27692
032e4     50 1B B0 FD | 	call	#_iscommand
032e8     3D 7B E2 F8 | 	getbyte	result1, result1, #0
032ec     04 B8 06 F1 | 	add	local10, #4
032f0     5C 7B 62 FC | 	wrlong	result1, local10
032f4                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
032f4     54 B9 02 F6 | 	mov	local10, local02
032f8     03 B8 66 F0 | 	shl	local10, #3
032fc     32 AF 02 F6 | 	mov	local05, objptr
03300     36 00 00 FF 
03304     2C AE 06 F1 | 	add	local05, ##27692
03308     57 B9 02 F1 | 	add	local10, local05
0330c     04 B8 06 F1 | 	add	local10, #4
03310     5C BD 02 FB | 	rdlong	local12, local10
03314     01 BC 56 F2 | 	cmps	local12, #1 wc
03318     8C 05 90 3D |  if_ae	jmp	#LR__0184
0331c     54 B9 02 F6 | 	mov	local10, local02
03320     03 B8 66 F0 | 	shl	local10, #3
03324     36 00 00 FF 
03328     2C 64 06 F1 | 	add	objptr, ##27692
0332c     32 B9 02 F1 | 	add	local10, objptr
03330     54 BB 02 F6 | 	mov	local11, local02
03334     5D C1 02 F6 | 	mov	local14, local11
03338     60 BF 02 F6 | 	mov	local13, local14
0333c     03 BE 66 F0 | 	shl	local13, #3
03340     32 DD 02 F6 | 	mov	local28, objptr
03344     32 BF 02 F1 | 	add	local13, objptr
03348     5F 93 02 FB | 	rdlong	arg01, local13
0334c     36 00 00 FF 
03350     2C 64 86 F1 | 	sub	objptr, ##27692
03354     A0 2C B0 FD | 	call	#_isfunction
03358     3D 7B E2 F8 | 	getbyte	result1, result1, #0
0335c     04 B8 06 F1 | 	add	local10, #4
03360     5C 7B 62 FC | 	wrlong	result1, local10
03364                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03364     54 B9 02 F6 | 	mov	local10, local02
03368     03 B8 66 F0 | 	shl	local10, #3
0336c     32 AF 02 F6 | 	mov	local05, objptr
03370     36 00 00 FF 
03374     2C AE 06 F1 | 	add	local05, ##27692
03378     57 B9 02 F1 | 	add	local10, local05
0337c     04 B8 06 F1 | 	add	local10, #4
03380     5C BD 02 FB | 	rdlong	local12, local10
03384     01 BC 56 F2 | 	cmps	local12, #1 wc
03388     1C 05 90 3D |  if_ae	jmp	#LR__0184
0338c     54 B9 02 F6 | 	mov	local10, local02
03390     03 B8 66 F0 | 	shl	local10, #3
03394     36 00 00 FF 
03398     2C 64 06 F1 | 	add	objptr, ##27692
0339c     32 B9 02 F1 | 	add	local10, objptr
033a0     54 BB 02 F6 | 	mov	local11, local02
033a4     5D C1 02 F6 | 	mov	local14, local11
033a8     03 C0 66 F0 | 	shl	local14, #3
033ac     32 BF 02 F6 | 	mov	local13, objptr
033b0     32 C1 02 F1 | 	add	local14, objptr
033b4     60 93 02 FB | 	rdlong	arg01, local14
033b8     36 00 00 FF 
033bc     2C 64 86 F1 | 	sub	objptr, ##27692
033c0     08 15 B0 FD | 	call	#_isnotename
033c4     04 B8 06 F1 | 	add	local10, #4
033c8     5C 7B 62 FC | 	wrlong	result1, local10
033cc                 | ' lparts(i).token=isnotename(lparts(i).part$) 
033cc                 | ' if lparts(i).token>0 then 
033cc     54 B9 02 F6 | 	mov	local10, local02
033d0     03 B8 66 F0 | 	shl	local10, #3
033d4     32 AF 02 F6 | 	mov	local05, objptr
033d8     36 00 00 FF 
033dc     2C AE 06 F1 | 	add	local05, ##27692
033e0     57 B9 02 F1 | 	add	local10, local05
033e4     04 B8 06 F1 | 	add	local10, #4
033e8     5C B1 02 FB | 	rdlong	local06, local10
033ec     01 B0 56 F2 | 	cmps	local06, #1 wc
033f0     80 00 90 CD |  if_b	jmp	#LR__0174
033f4     54 AF 02 F6 | 	mov	local05, local02
033f8     03 AE 66 F0 | 	shl	local05, #3
033fc     32 B1 02 F6 | 	mov	local06, objptr
03400     36 00 00 FF 
03404     2C B0 06 F1 | 	add	local06, ##27692
03408     58 AF 02 F1 | 	add	local05, local06
0340c     04 AE 06 F1 | 	add	local05, #4
03410     57 BD 02 FB | 	rdlong	local12, local05
03414     5E 93 02 F6 | 	mov	arg01, local12
03418     24 3E B0 FD | 	call	#_getnoteval
0341c     3D FB 02 F6 | 	mov	local43, result1
03420     54 B9 02 F6 | 	mov	local10, local02
03424     03 B8 66 F0 | 	shl	local10, #3
03428     32 AF 02 F6 | 	mov	local05, objptr
0342c     36 00 00 FF 
03430     2C AE 06 F1 | 	add	local05, ##27692
03434     57 B9 02 F1 | 	add	local10, local05
03438     7D 93 02 F6 | 	mov	arg01, local43
0343c     3C 30 B2 FD | 	call	#__system__str_S
03440     5C 7B 62 FC | 	wrlong	result1, local10
03444     54 AD 02 F6 | 	mov	local04, local02
03448     56 AB 02 F6 | 	mov	local03, local04
0344c     55 B9 02 F6 | 	mov	local10, local03
03450     03 B8 66 F0 | 	shl	local10, #3
03454     32 AF 02 F6 | 	mov	local05, objptr
03458     36 00 00 FF 
0345c     2C AE 06 F1 | 	add	local05, ##27692
03460     57 B9 02 F1 | 	add	local10, local05
03464     04 B8 06 F1 | 	add	local10, #4
03468     01 00 80 FF 
0346c     5C 05 68 FC | 	wrlong	##514, local10
03470     34 04 90 FD | 	jmp	#LR__0184
03474                 | LR__0174
03474     54 B9 02 F6 | 	mov	local10, local02
03478     03 B8 66 F0 | 	shl	local10, #3
0347c     36 00 00 FF 
03480     2C 64 06 F1 | 	add	objptr, ##27692
03484     32 B9 02 F1 | 	add	local10, objptr
03488     54 C1 02 F6 | 	mov	local14, local02
0348c     03 C0 66 F0 | 	shl	local14, #3
03490     32 C1 02 F1 | 	add	local14, objptr
03494     60 93 02 FB | 	rdlong	arg01, local14
03498     36 00 00 FF 
0349c     2C 64 86 F1 | 	sub	objptr, ##27692
034a0     C0 12 B0 FD | 	call	#_ischannel
034a4     04 B8 06 F1 | 	add	local10, #4
034a8     5C 7B 62 FC | 	wrlong	result1, local10
034ac                 | ' 
034ac                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
034ac                 | ' 
034ac                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
034ac     54 B9 02 F6 | 	mov	local10, local02
034b0     03 B8 66 F0 | 	shl	local10, #3
034b4     32 AF 02 F6 | 	mov	local05, objptr
034b8     36 00 00 FF 
034bc     2C AE 06 F1 | 	add	local05, ##27692
034c0     57 B9 02 F1 | 	add	local10, local05
034c4     04 B8 06 F1 | 	add	local10, #4
034c8     5C B1 02 FB | 	rdlong	local06, local10
034cc     01 B0 56 F2 | 	cmps	local06, #1 wc
034d0     70 00 90 CD |  if_b	jmp	#LR__0175
034d4     54 B9 02 F6 | 	mov	local10, local02
034d8     03 B8 66 F0 | 	shl	local10, #3
034dc     36 00 00 FF 
034e0     2C 64 06 F1 | 	add	objptr, ##27692
034e4     32 B9 02 F1 | 	add	local10, objptr
034e8     54 BB 02 F6 | 	mov	local11, local02
034ec     5D C1 02 F6 | 	mov	local14, local11
034f0     03 C0 66 F0 | 	shl	local14, #3
034f4     32 BF 02 F6 | 	mov	local13, objptr
034f8     32 C1 02 F1 | 	add	local14, objptr
034fc     60 93 02 FB | 	rdlong	arg01, local14
03500     01 BC 06 F6 | 	mov	local12, #1
03504     01 94 06 F6 | 	mov	arg02, #1
03508     36 00 00 FF 
0350c     2C 64 86 F1 | 	sub	objptr, ##27692
03510     F8 2D B2 FD | 	call	#__system__Right_S
03514     5C 7B 62 FC | 	wrlong	result1, local10
03518     54 AD 02 F6 | 	mov	local04, local02
0351c     56 AB 02 F6 | 	mov	local03, local04
03520     55 B9 02 F6 | 	mov	local10, local03
03524     03 B8 66 F0 | 	shl	local10, #3
03528     32 AF 02 F6 | 	mov	local05, objptr
0352c     36 00 00 FF 
03530     2C AE 06 F1 | 	add	local05, ##27692
03534     57 B9 02 F1 | 	add	local10, local05
03538     04 B8 06 F1 | 	add	local10, #4
0353c     5C 59 68 FC | 	wrlong	#44, local10
03540     64 03 90 FD | 	jmp	#LR__0184
03544                 | LR__0175
03544     54 B9 02 F6 | 	mov	local10, local02
03548     03 B8 66 F0 | 	shl	local10, #3
0354c     36 00 00 FF 
03550     2C 64 06 F1 | 	add	objptr, ##27692
03554     32 B9 02 F1 | 	add	local10, objptr
03558     54 BB 02 F6 | 	mov	local11, local02
0355c     5D C1 02 F6 | 	mov	local14, local11
03560     03 C0 66 F0 | 	shl	local14, #3
03564     32 BF 02 F6 | 	mov	local13, objptr
03568     32 C1 02 F1 | 	add	local14, objptr
0356c     60 93 02 FB | 	rdlong	arg01, local14
03570     36 00 00 FF 
03574     2C 64 86 F1 | 	sub	objptr, ##27692
03578     D0 12 B0 FD | 	call	#_isconstant
0357c     04 B8 06 F1 | 	add	local10, #4
03580     5C 7B 62 FC | 	wrlong	result1, local10
03584                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
03584     54 B9 02 F6 | 	mov	local10, local02
03588     03 B8 66 F0 | 	shl	local10, #3
0358c     32 AF 02 F6 | 	mov	local05, objptr
03590     36 00 00 FF 
03594     2C AE 06 F1 | 	add	local05, ##27692
03598     57 B9 02 F1 | 	add	local10, local05
0359c     04 B8 06 F1 | 	add	local10, #4
035a0     5C B1 02 FB | 	rdlong	local06, local10
035a4     01 B0 56 F2 | 	cmps	local06, #1 wc
035a8     90 00 90 CD |  if_b	jmp	#LR__0176
035ac     54 B9 02 F6 | 	mov	local10, local02
035b0     03 B8 66 F0 | 	shl	local10, #3
035b4     36 00 00 FF 
035b8     2C 64 06 F1 | 	add	objptr, ##27692
035bc     32 B9 02 F1 | 	add	local10, objptr
035c0     54 BD 02 F6 | 	mov	local12, local02
035c4     5E BB 02 F6 | 	mov	local11, local12
035c8     5D C1 02 F6 | 	mov	local14, local11
035cc     03 C0 66 F0 | 	shl	local14, #3
035d0     32 BF 02 F6 | 	mov	local13, objptr
035d4     32 C1 02 F1 | 	add	local14, objptr
035d8     04 C0 06 F1 | 	add	local14, #4
035dc     60 93 02 FB | 	rdlong	arg01, local14
035e0     04 C0 86 F1 | 	sub	local14, #4
035e4     36 00 00 FF 
035e8     2C 64 86 F1 | 	sub	objptr, ##27692
035ec     49 93 52 F6 | 	abs	arg01, arg01 wc
035f0     1F FC C6 C9 |  if_b	decod	local44, #31
035f4     00 FC 06 36 |  if_ae	mov	local44, #0
035f8     AC 36 B2 FD | 	call	#__system___float_fromuns
035fc     7E 7B 62 F5 | 	xor	result1, local44
03600     3D 93 02 F6 | 	mov	arg01, result1
03604     74 2E B2 FD | 	call	#__system__str_S
03608     5C 7B 62 FC | 	wrlong	result1, local10
0360c     54 AD 02 F6 | 	mov	local04, local02
03610     56 AB 02 F6 | 	mov	local03, local04
03614     55 B9 02 F6 | 	mov	local10, local03
03618     03 B8 66 F0 | 	shl	local10, #3
0361c     32 AF 02 F6 | 	mov	local05, objptr
03620     36 00 00 FF 
03624     2C AE 06 F1 | 	add	local05, ##27692
03628     57 B9 02 F1 | 	add	local10, local05
0362c     04 B8 06 F1 | 	add	local10, #4
03630     01 00 80 FF 
03634     5C 03 68 FC | 	wrlong	##513, local10
03638     6C 02 90 FD | 	jmp	#LR__0184
0363c                 | LR__0176
0363c     54 B1 02 F6 | 	mov	local06, local02
03640     03 B0 66 F0 | 	shl	local06, #3
03644     32 BD 02 F6 | 	mov	local12, objptr
03648     36 00 00 FF 
0364c     2C BC 06 F1 | 	add	local12, ##27692
03650     5E B1 02 F1 | 	add	local06, local12
03654     58 93 02 FB | 	rdlong	arg01, local06
03658     30 34 B0 FD | 	call	#_isnum
0365c     3D FF 02 F6 | 	mov	local45, result1
03660     07 FE 66 F7 | 	signx	local45, #7
03664     54 B1 02 F6 | 	mov	local06, local02
03668     03 B0 66 F0 | 	shl	local06, #3
0366c     32 BD 02 F6 | 	mov	local12, objptr
03670     36 00 00 FF 
03674     2C BC 06 F1 | 	add	local12, ##27692
03678     5E B1 02 F1 | 	add	local06, local12
0367c     58 93 02 FB | 	rdlong	arg01, local06
03680     F4 37 B0 FD | 	call	#_isint
03684     3D 01 03 F6 | 	mov	local46, result1
03688     07 00 67 F7 | 	signx	local46, #7
0368c     54 B1 02 F6 | 	mov	local06, local02
03690     03 B0 66 F0 | 	shl	local06, #3
03694     32 BD 02 F6 | 	mov	local12, objptr
03698     36 00 00 FF 
0369c     2C BC 06 F1 | 	add	local12, ##27692
036a0     5E B1 02 F1 | 	add	local06, local12
036a4     58 93 02 FB | 	rdlong	arg01, local06
036a8     70 3A B0 FD | 	call	#_isdec
036ac     07 7A 66 F7 | 	signx	result1, #7
036b0     3D 03 03 F6 | 	mov	local47, result1
036b4                 | ' 
036b4                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
036b4                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
036b4     00 FE 0E F2 | 	cmp	local45, #0 wz
036b8     00 00 0F 52 |  if_ne	cmp	local46, #0 wz
036bc     00 02 0F 52 |  if_ne	cmp	local47, #0 wz
036c0     30 00 90 AD |  if_e	jmp	#LR__0177
036c4     54 AD 02 F6 | 	mov	local04, local02
036c8     56 AB 02 F6 | 	mov	local03, local04
036cc     55 B9 02 F6 | 	mov	local10, local03
036d0     03 B8 66 F0 | 	shl	local10, #3
036d4     32 AF 02 F6 | 	mov	local05, objptr
036d8     36 00 00 FF 
036dc     2C AE 06 F1 | 	add	local05, ##27692
036e0     57 B9 02 F1 | 	add	local10, local05
036e4     04 B8 06 F1 | 	add	local10, #4
036e8     01 00 80 FF 
036ec     5C 01 68 FC | 	wrlong	##512, local10
036f0     B4 01 90 FD | 	jmp	#LR__0184
036f4                 | LR__0177
036f4                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
036f4     00 FE 0E F2 | 	cmp	local45, #0 wz
036f8     00 00 0F 52 |  if_ne	cmp	local46, #0 wz
036fc     81 AD 22 56 |  if_ne	not	local04, local47
03700     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
03704     30 00 90 AD |  if_e	jmp	#LR__0178
03708     54 AD 02 F6 | 	mov	local04, local02
0370c     56 AB 02 F6 | 	mov	local03, local04
03710     55 B9 02 F6 | 	mov	local10, local03
03714     03 B8 66 F0 | 	shl	local10, #3
03718     32 AF 02 F6 | 	mov	local05, objptr
0371c     36 00 00 FF 
03720     2C AE 06 F1 | 	add	local05, ##27692
03724     57 B9 02 F1 | 	add	local10, local05
03728     04 B8 06 F1 | 	add	local10, #4
0372c     01 00 80 FF 
03730     5C 03 68 FC | 	wrlong	##513, local10
03734     70 01 90 FD | 	jmp	#LR__0184
03738                 | LR__0178
03738                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03738     00 FE 0E F2 | 	cmp	local45, #0 wz
0373c     80 AD 22 56 |  if_ne	not	local04, local46
03740     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
03744     81 AB 22 56 |  if_ne	not	local03, local47
03748     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
0374c     30 00 90 AD |  if_e	jmp	#LR__0179
03750     54 AD 02 F6 | 	mov	local04, local02
03754     56 AB 02 F6 | 	mov	local03, local04
03758     55 B9 02 F6 | 	mov	local10, local03
0375c     03 B8 66 F0 | 	shl	local10, #3
03760     32 AF 02 F6 | 	mov	local05, objptr
03764     36 00 00 FF 
03768     2C AE 06 F1 | 	add	local05, ##27692
0376c     57 B9 02 F1 | 	add	local10, local05
03770     04 B8 06 F1 | 	add	local10, #4
03774     01 00 80 FF 
03778     5C 05 68 FC | 	wrlong	##514, local10
0377c     28 01 90 FD | 	jmp	#LR__0184
03780                 | LR__0179
03780                 | ' 
03780                 | ' if isstring(lparts(i).part$) then 
03780     54 AF 02 F6 | 	mov	local05, local02
03784     03 AE 66 F0 | 	shl	local05, #3
03788     32 B1 02 F6 | 	mov	local06, objptr
0378c     36 00 00 FF 
03790     2C B0 06 F1 | 	add	local06, ##27692
03794     58 AF 02 F1 | 	add	local05, local06
03798     57 93 02 FB | 	rdlong	arg01, local05
0379c     3C 3A B0 FD | 	call	#_isstring
037a0     00 7A 0E F2 | 	cmp	result1, #0 wz
037a4     A8 00 90 AD |  if_e	jmp	#LR__0182
037a8     54 B9 02 F6 | 	mov	local10, local02
037ac     03 B8 66 F0 | 	shl	local10, #3
037b0     36 00 00 FF 
037b4     2C 64 06 F1 | 	add	objptr, ##27692
037b8     32 B9 02 F1 | 	add	local10, objptr
037bc     04 B8 06 F1 | 	add	local10, #4
037c0     01 00 80 FF 
037c4     5C 07 68 FC | 	wrlong	##515, local10
037c8     54 AD 02 F6 | 	mov	local04, local02
037cc     56 AB 02 F6 | 	mov	local03, local04
037d0     55 B9 02 F6 | 	mov	local10, local03
037d4     03 B8 66 F0 | 	shl	local10, #3
037d8     32 B9 02 F1 | 	add	local10, objptr
037dc     54 C1 02 F6 | 	mov	local14, local02
037e0     03 C0 66 F0 | 	shl	local14, #3
037e4     32 C1 02 F1 | 	add	local14, objptr
037e8     60 B1 02 FB | 	rdlong	local06, local14
037ec     02 BC 06 F6 | 	mov	local12, #2
037f0     54 D1 02 F6 | 	mov	local22, local02
037f4     68 D3 02 F6 | 	mov	local23, local22
037f8     03 D2 66 F0 | 	shl	local23, #3
037fc     32 D5 02 F6 | 	mov	local24, objptr
03800     32 D3 02 F1 | 	add	local23, objptr
03804     69 93 02 FB | 	rdlong	arg01, local23
03808     36 00 00 FF 
0380c     2C 64 86 F1 | 	sub	objptr, ##27692
03810     49 B3 02 F6 | 	mov	local07, arg01
03814     D7 06 48 FB | 	callpa	#(@LR__0181-@LR__0180)>>2,fcache_load_ptr_
03818                 | LR__0180
03818     59 7B CA FA | 	rdbyte	result1, local07 wz
0381c     01 B2 06 51 |  if_ne	add	local07, #1
03820     F4 FF 9F 5D |  if_ne	jmp	#LR__0180
03824                 | LR__0181
03824     49 B3 82 F1 | 	sub	local07, arg01
03828     59 BF 02 F6 | 	mov	local13, local07
0382c     5F C1 02 F6 | 	mov	local14, local13
03830     02 C0 86 F1 | 	sub	local14, #2
03834     60 BB 02 F6 | 	mov	local11, local14
03838     58 93 02 F6 | 	mov	arg01, local06
0383c     5E 95 02 F6 | 	mov	arg02, local12
03840     5D 97 02 F6 | 	mov	arg03, local11
03844     54 2B B2 FD | 	call	#__system__Mid_S
03848     5C 7B 62 FC | 	wrlong	result1, local10
0384c     58 00 90 FD | 	jmp	#LR__0184
03850                 | LR__0182
03850                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03850     54 AB 02 F6 | 	mov	local03, local02
03854     55 AF 02 F6 | 	mov	local05, local03
03858     03 AE 66 F0 | 	shl	local05, #3
0385c     32 B1 02 F6 | 	mov	local06, objptr
03860     36 00 00 FF 
03864     2C B0 06 F1 | 	add	local06, ##27692
03868     58 AF 02 F1 | 	add	local05, local06
0386c     57 93 02 FB | 	rdlong	arg01, local05
03870     A4 2F B0 FD | 	call	#_isname
03874     3D AD 0A F6 | 	mov	local04, result1 wz
03878     2C 00 90 AD |  if_e	jmp	#LR__0183
0387c     54 AD 02 F6 | 	mov	local04, local02
03880     56 AB 02 F6 | 	mov	local03, local04
03884     55 B9 02 F6 | 	mov	local10, local03
03888     03 B8 66 F0 | 	shl	local10, #3
0388c     32 AF 02 F6 | 	mov	local05, objptr
03890     36 00 00 FF 
03894     2C AE 06 F1 | 	add	local05, ##27692
03898     57 B9 02 F1 | 	add	local10, local05
0389c     04 B8 06 F1 | 	add	local10, #4
038a0     01 00 80 FF 
038a4     5C 09 68 FC | 	wrlong	##516, local10
038a8                 | LR__0183
038a8                 | LR__0184
038a8     01 A8 06 F1 | 	add	local02, #1
038ac     A0 F8 9F FD | 	jmp	#LR__0173
038b0                 | LR__0185
038b0     63 B9 02 F6 | 	mov	local10, local17
038b4     03 B8 66 F0 | 	shl	local10, #3
038b8     36 00 00 FF 
038bc     2C 64 06 F1 | 	add	objptr, ##27692
038c0     32 B9 02 F1 | 	add	local10, objptr
038c4     04 B8 06 F1 | 	add	local10, #4
038c8     5C FD 6B FC | 	wrlong	#510, local10
038cc     63 B9 02 F6 | 	mov	local10, local17
038d0     03 B8 66 F0 | 	shl	local10, #3
038d4     32 B9 02 F1 | 	add	local10, objptr
038d8     92 01 00 FF 
038dc     EF B1 06 F6 | 	mov	local06, ##@LR__5549
038e0     5C B1 62 FC | 	wrlong	local06, local10
038e4     10 00 00 FF 
038e8     54 64 06 F1 | 	add	objptr, ##8276
038ec     32 C7 62 FC | 	wrlong	local17, objptr
038f0     46 00 00 FF 
038f4     80 64 86 F1 | 	sub	objptr, ##35968
038f8                 | ' 
038f8                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
038f8                 | ' 
038f8                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
038f8                 | '  
038f8                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
038f8     92 01 00 FF 
038fc     F0 95 06 F6 | 	mov	arg02, ##@LR__5550
03900     7B 93 02 F6 | 	mov	arg01, local41
03904     FC 10 B2 FD | 	call	#__system___string_cmp
03908     00 7A 0E F2 | 	cmp	result1, #0 wz
0390c     F0 00 90 AD |  if_e	jmp	#LR__0186
03910     92 01 00 FF 
03914     F5 95 06 F6 | 	mov	arg02, ##@LR__5551
03918     7B 93 02 F6 | 	mov	arg01, local41
0391c     E4 10 B2 FD | 	call	#__system___string_cmp
03920     00 7A 0E F2 | 	cmp	result1, #0 wz
03924     D8 00 90 AD |  if_e	jmp	#LR__0186
03928     92 01 00 FF 
0392c     FA B1 06 F6 | 	mov	local06, ##@LR__5552
03930     7B 93 02 F6 | 	mov	arg01, local41
03934     58 95 02 F6 | 	mov	arg02, local06
03938     C8 10 B2 FD | 	call	#__system___string_cmp
0393c     00 7A 0E F2 | 	cmp	result1, #0 wz
03940     BC 00 90 AD |  if_e	jmp	#LR__0186
03944     92 01 00 FF 
03948     FF BD 06 F6 | 	mov	local12, ##@LR__5553
0394c     5E B1 02 F6 | 	mov	local06, local12
03950     7B 93 02 F6 | 	mov	arg01, local41
03954     58 95 02 F6 | 	mov	arg02, local06
03958     A8 10 B2 FD | 	call	#__system___string_cmp
0395c     00 7A 0E F2 | 	cmp	result1, #0 wz
03960     9C 00 90 AD |  if_e	jmp	#LR__0186
03964     93 01 00 FF 
03968     03 BA 06 F6 | 	mov	local11, ##@LR__5554
0396c     5D BD 02 F6 | 	mov	local12, local11
03970     7B 93 02 F6 | 	mov	arg01, local41
03974     5E 95 02 F6 | 	mov	arg02, local12
03978     88 10 B2 FD | 	call	#__system___string_cmp
0397c     3D B1 0A F6 | 	mov	local06, result1 wz
03980     7C 00 90 AD |  if_e	jmp	#LR__0186
03984     93 01 00 FF 
03988     07 C0 06 F6 | 	mov	local14, ##@LR__5555
0398c     60 BB 02 F6 | 	mov	local11, local14
03990     7B 93 02 F6 | 	mov	arg01, local41
03994     5D 95 02 F6 | 	mov	arg02, local11
03998     68 10 B2 FD | 	call	#__system___string_cmp
0399c     3D BD 0A F6 | 	mov	local12, result1 wz
039a0     5C 00 90 AD |  if_e	jmp	#LR__0186
039a4     93 01 00 FF 
039a8     0A BE 06 F6 | 	mov	local13, ##@LR__5556
039ac     5F C1 02 F6 | 	mov	local14, local13
039b0     7B 93 02 F6 | 	mov	arg01, local41
039b4     60 95 02 F6 | 	mov	arg02, local14
039b8     48 10 B2 FD | 	call	#__system___string_cmp
039bc     3D BB 0A F6 | 	mov	local11, result1 wz
039c0     3C 00 90 AD |  if_e	jmp	#LR__0186
039c4     93 01 00 FF 
039c8     0E BE 06 F6 | 	mov	local13, ##@LR__5557
039cc     7B 93 02 F6 | 	mov	arg01, local41
039d0     5F 95 02 F6 | 	mov	arg02, local13
039d4     2C 10 B2 FD | 	call	#__system___string_cmp
039d8     3D C1 0A F6 | 	mov	local14, result1 wz
039dc     20 00 90 AD |  if_e	jmp	#LR__0186
039e0     93 01 00 FF 
039e4     14 D0 06 F6 | 	mov	local22, ##@LR__5558
039e8     68 DD 02 F6 | 	mov	local28, local22
039ec     7B 93 02 F6 | 	mov	arg01, local41
039f0     6E 95 02 F6 | 	mov	arg02, local28
039f4     0C 10 B2 FD | 	call	#__system___string_cmp
039f8     3D BF 0A F6 | 	mov	local13, result1 wz
039fc     B8 00 90 5D |  if_ne	jmp	#LR__0187
03a00                 | LR__0186
03a00     77 DD 02 F6 | 	mov	local28, local37
03a04     01 DC 06 F1 | 	add	local28, #1
03a08     6E D1 02 F6 | 	mov	local22, local28
03a0c     68 D3 02 F6 | 	mov	local23, local22
03a10     03 D2 66 F0 | 	shl	local23, #3
03a14     32 D5 02 F6 | 	mov	local24, objptr
03a18     36 00 00 FF 
03a1c     2C D4 06 F1 | 	add	local24, ##27692
03a20     6A D3 02 F1 | 	add	local23, local24
03a24     04 D2 06 F1 | 	add	local23, #4
03a28     69 E1 02 FB | 	rdlong	local30, local23
03a2c     04 D2 86 F1 | 	sub	local23, #4
03a30     70 DF 02 F6 | 	mov	local29, local30
03a34     01 00 00 FF 
03a38     04 DE 0E F2 | 	cmp	local29, ##516 wz
03a3c     78 00 90 5D |  if_ne	jmp	#LR__0187
03a40     77 05 03 F6 | 	mov	local48, local37
03a44     01 04 07 F1 | 	add	local48, #1
03a48     03 04 67 F0 | 	shl	local48, #3
03a4c     32 07 03 F6 | 	mov	local49, objptr
03a50     36 00 00 FF 
03a54     2C 06 07 F1 | 	add	local49, ##27692
03a58     83 05 03 F1 | 	add	local48, local49
03a5c     82 93 02 FB | 	rdlong	arg01, local48
03a60     01 94 06 F6 | 	mov	arg02, #1
03a64     A4 28 B2 FD | 	call	#__system__Right_S
03a68     3D 93 02 F6 | 	mov	arg01, result1
03a6c     93 01 00 FF 
03a70     17 08 07 F6 | 	mov	local50, ##@LR__5559
03a74     84 0B 03 F6 | 	mov	local51, local50
03a78     85 95 02 F6 | 	mov	arg02, local51
03a7c     84 0F B2 FD | 	call	#__system___string_cmp
03a80     3D E3 0A F6 | 	mov	local31, result1 wz
03a84     30 00 90 AD |  if_e	jmp	#LR__0187
03a88     77 B9 02 F6 | 	mov	local10, local37
03a8c     01 B8 06 F1 | 	add	local10, #1
03a90     03 B8 66 F0 | 	shl	local10, #3
03a94     32 AF 02 F6 | 	mov	local05, objptr
03a98     36 00 00 FF 
03a9c     2C AE 06 F1 | 	add	local05, ##27692
03aa0     57 B9 02 F1 | 	add	local10, local05
03aa4     01 00 00 FF 
03aa8     03 B0 06 F6 | 	mov	local06, ##515
03aac     04 B8 06 F1 | 	add	local10, #4
03ab0     01 00 80 FF 
03ab4     5C 07 68 FC | 	wrlong	##515, local10
03ab8                 | LR__0187
03ab8                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03ab8     93 01 00 FF 
03abc     19 94 06 F6 | 	mov	arg02, ##@LR__5560
03ac0     7B 93 02 F6 | 	mov	arg01, local41
03ac4     3C 0F B2 FD | 	call	#__system___string_cmp
03ac8     00 7A 0E F2 | 	cmp	result1, #0 wz
03acc     1C 00 90 AD |  if_e	jmp	#LR__0188
03ad0     93 01 00 FF 
03ad4     20 AE 06 F6 | 	mov	local05, ##@LR__5561
03ad8     7B 93 02 F6 | 	mov	arg01, local41
03adc     57 95 02 F6 | 	mov	arg02, local05
03ae0     20 0F B2 FD | 	call	#__system___string_cmp
03ae4     00 7A 0E F2 | 	cmp	result1, #0 wz
03ae8     B4 00 90 5D |  if_ne	jmp	#LR__0189
03aec                 | LR__0188
03aec     77 AF 02 F6 | 	mov	local05, local37
03af0     01 AE 06 F1 | 	add	local05, #1
03af4     57 B1 02 F6 | 	mov	local06, local05
03af8     03 B0 66 F0 | 	shl	local06, #3
03afc     32 BD 02 F6 | 	mov	local12, objptr
03b00     36 00 00 FF 
03b04     2C BC 06 F1 | 	add	local12, ##27692
03b08     5E B1 02 F1 | 	add	local06, local12
03b0c     04 B0 06 F1 | 	add	local06, #4
03b10     58 C1 02 FB | 	rdlong	local14, local06
03b14     04 B0 86 F1 | 	sub	local06, #4
03b18     60 BB 02 F6 | 	mov	local11, local14
03b1c     01 00 00 FF 
03b20     04 BA 0E F2 | 	cmp	local11, ##516 wz
03b24     78 00 90 5D |  if_ne	jmp	#LR__0189
03b28     77 D3 02 F6 | 	mov	local23, local37
03b2c     01 D2 06 F1 | 	add	local23, #1
03b30     03 D2 66 F0 | 	shl	local23, #3
03b34     32 D5 02 F6 | 	mov	local24, objptr
03b38     36 00 00 FF 
03b3c     2C D4 06 F1 | 	add	local24, ##27692
03b40     6A D3 02 F1 | 	add	local23, local24
03b44     69 93 02 FB | 	rdlong	arg01, local23
03b48     01 94 06 F6 | 	mov	arg02, #1
03b4c     BC 27 B2 FD | 	call	#__system__Right_S
03b50     3D 93 02 F6 | 	mov	arg01, result1
03b54     93 01 00 FF 
03b58     26 D0 06 F6 | 	mov	local22, ##@LR__5562
03b5c     68 DD 02 F6 | 	mov	local28, local22
03b60     6E 95 02 F6 | 	mov	arg02, local28
03b64     9C 0E B2 FD | 	call	#__system___string_cmp
03b68     3D BF 0A F6 | 	mov	local13, result1 wz
03b6c     30 00 90 AD |  if_e	jmp	#LR__0189
03b70     77 B9 02 F6 | 	mov	local10, local37
03b74     01 B8 06 F1 | 	add	local10, #1
03b78     03 B8 66 F0 | 	shl	local10, #3
03b7c     32 AF 02 F6 | 	mov	local05, objptr
03b80     36 00 00 FF 
03b84     2C AE 06 F1 | 	add	local05, ##27692
03b88     57 B9 02 F1 | 	add	local10, local05
03b8c     01 00 00 FF 
03b90     03 B0 06 F6 | 	mov	local06, ##515
03b94     04 B8 06 F1 | 	add	local10, #4
03b98     01 00 80 FF 
03b9c     5C 07 68 FC | 	wrlong	##515, local10
03ba0                 | LR__0189
03ba0                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03ba0     93 01 00 FF 
03ba4     28 94 06 F6 | 	mov	arg02, ##@LR__5563
03ba8     7B 93 02 F6 | 	mov	arg01, local41
03bac     54 0E B2 FD | 	call	#__system___string_cmp
03bb0     00 7A 0E F2 | 	cmp	result1, #0 wz
03bb4     B0 00 90 5D |  if_ne	jmp	#LR__0190
03bb8     77 AF 02 F6 | 	mov	local05, local37
03bbc     01 AE 06 F1 | 	add	local05, #1
03bc0     03 AE 66 F0 | 	shl	local05, #3
03bc4     32 B1 02 F6 | 	mov	local06, objptr
03bc8     36 00 00 FF 
03bcc     2C B0 06 F1 | 	add	local06, ##27692
03bd0     58 AF 02 F1 | 	add	local05, local06
03bd4     04 AE 06 F1 | 	add	local05, #4
03bd8     57 BB 02 FB | 	rdlong	local11, local05
03bdc     04 AE 86 F1 | 	sub	local05, #4
03be0     5D BD 02 F6 | 	mov	local12, local11
03be4     01 00 00 FF 
03be8     04 BC 0E F2 | 	cmp	local12, ##516 wz
03bec     78 00 90 5D |  if_ne	jmp	#LR__0190
03bf0     77 D1 02 F6 | 	mov	local22, local37
03bf4     01 D0 06 F1 | 	add	local22, #1
03bf8     03 D0 66 F0 | 	shl	local22, #3
03bfc     32 D3 02 F6 | 	mov	local23, objptr
03c00     36 00 00 FF 
03c04     2C D2 06 F1 | 	add	local23, ##27692
03c08     69 D1 02 F1 | 	add	local22, local23
03c0c     68 93 02 FB | 	rdlong	arg01, local22
03c10     01 94 06 F6 | 	mov	arg02, #1
03c14     F4 26 B2 FD | 	call	#__system__Right_S
03c18     3D 93 02 F6 | 	mov	arg01, result1
03c1c     93 01 00 FF 
03c20     2D DC 06 F6 | 	mov	local28, ##@LR__5564
03c24     6E BF 02 F6 | 	mov	local13, local28
03c28     5F 95 02 F6 | 	mov	arg02, local13
03c2c     D4 0D B2 FD | 	call	#__system___string_cmp
03c30     3D C1 0A F6 | 	mov	local14, result1 wz
03c34     30 00 90 AD |  if_e	jmp	#LR__0190
03c38     77 B9 02 F6 | 	mov	local10, local37
03c3c     01 B8 06 F1 | 	add	local10, #1
03c40     03 B8 66 F0 | 	shl	local10, #3
03c44     32 AF 02 F6 | 	mov	local05, objptr
03c48     36 00 00 FF 
03c4c     2C AE 06 F1 | 	add	local05, ##27692
03c50     57 B9 02 F1 | 	add	local10, local05
03c54     01 00 00 FF 
03c58     03 B0 06 F6 | 	mov	local06, ##515
03c5c     04 B8 06 F1 | 	add	local10, #4
03c60     01 00 80 FF 
03c64     5C 07 68 FC | 	wrlong	##515, local10
03c68                 | LR__0190
03c68                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03c68     93 01 00 FF 
03c6c     2F 94 06 F6 | 	mov	arg02, ##@LR__5565
03c70     7B 93 02 F6 | 	mov	arg01, local41
03c74     8C 0D B2 FD | 	call	#__system___string_cmp
03c78     00 7A 0E F2 | 	cmp	result1, #0 wz
03c7c     B0 00 90 5D |  if_ne	jmp	#LR__0191
03c80     77 AF 02 F6 | 	mov	local05, local37
03c84     03 AE 06 F1 | 	add	local05, #3
03c88     03 AE 66 F0 | 	shl	local05, #3
03c8c     32 B1 02 F6 | 	mov	local06, objptr
03c90     36 00 00 FF 
03c94     2C B0 06 F1 | 	add	local06, ##27692
03c98     58 AF 02 F1 | 	add	local05, local06
03c9c     04 AE 06 F1 | 	add	local05, #4
03ca0     57 BB 02 FB | 	rdlong	local11, local05
03ca4     04 AE 86 F1 | 	sub	local05, #4
03ca8     5D BD 02 F6 | 	mov	local12, local11
03cac     01 00 00 FF 
03cb0     04 BC 0E F2 | 	cmp	local12, ##516 wz
03cb4     78 00 90 5D |  if_ne	jmp	#LR__0191
03cb8     77 D1 02 F6 | 	mov	local22, local37
03cbc     03 D0 06 F1 | 	add	local22, #3
03cc0     03 D0 66 F0 | 	shl	local22, #3
03cc4     32 D3 02 F6 | 	mov	local23, objptr
03cc8     36 00 00 FF 
03ccc     2C D2 06 F1 | 	add	local23, ##27692
03cd0     69 D1 02 F1 | 	add	local22, local23
03cd4     68 93 02 FB | 	rdlong	arg01, local22
03cd8     01 94 06 F6 | 	mov	arg02, #1
03cdc     2C 26 B2 FD | 	call	#__system__Right_S
03ce0     3D 93 02 F6 | 	mov	arg01, result1
03ce4     93 01 00 FF 
03ce8     34 DC 06 F6 | 	mov	local28, ##@LR__5566
03cec     6E BF 02 F6 | 	mov	local13, local28
03cf0     5F 95 02 F6 | 	mov	arg02, local13
03cf4     0C 0D B2 FD | 	call	#__system___string_cmp
03cf8     3D C1 0A F6 | 	mov	local14, result1 wz
03cfc     30 00 90 AD |  if_e	jmp	#LR__0191
03d00     77 B9 02 F6 | 	mov	local10, local37
03d04     03 B8 06 F1 | 	add	local10, #3
03d08     03 B8 66 F0 | 	shl	local10, #3
03d0c     32 AF 02 F6 | 	mov	local05, objptr
03d10     36 00 00 FF 
03d14     2C AE 06 F1 | 	add	local05, ##27692
03d18     57 B9 02 F1 | 	add	local10, local05
03d1c     01 00 00 FF 
03d20     03 B0 06 F6 | 	mov	local06, ##515
03d24     04 B8 06 F1 | 	add	local10, #4
03d28     01 00 80 FF 
03d2c     5C 07 68 FC | 	wrlong	##515, local10
03d30                 | LR__0191
03d30                 | ' 
03d30                 | ' ' cd needs special treatment..
03d30                 | ' 
03d30                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03d30     93 01 00 FF 
03d34     36 94 06 F6 | 	mov	arg02, ##@LR__5567
03d38     7B 93 02 F6 | 	mov	arg01, local41
03d3c     C4 0C B2 FD | 	call	#__system___string_cmp
03d40     00 7A 0E F2 | 	cmp	result1, #0 wz
03d44     30 00 90 5D |  if_ne	jmp	#LR__0192
03d48     77 B9 02 F6 | 	mov	local10, local37
03d4c     01 B8 06 F1 | 	add	local10, #1
03d50     03 B8 66 F0 | 	shl	local10, #3
03d54     32 AF 02 F6 | 	mov	local05, objptr
03d58     36 00 00 FF 
03d5c     2C AE 06 F1 | 	add	local05, ##27692
03d60     57 B9 02 F1 | 	add	local10, local05
03d64     01 00 00 FF 
03d68     03 B0 06 F6 | 	mov	local06, ##515
03d6c     04 B8 06 F1 | 	add	local10, #4
03d70     01 00 80 FF 
03d74     5C 07 68 FC | 	wrlong	##515, local10
03d78                 | LR__0192
03d78                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03d78     93 01 00 FF 
03d7c     39 94 06 F6 | 	mov	arg02, ##@LR__5568
03d80     7B 93 02 F6 | 	mov	arg01, local41
03d84     7C 0C B2 FD | 	call	#__system___string_cmp
03d88     00 7A 0E F2 | 	cmp	result1, #0 wz
03d8c     9C 00 90 5D |  if_ne	jmp	#LR__0193
03d90     77 B1 02 F6 | 	mov	local06, local37
03d94     01 B0 06 F1 | 	add	local06, #1
03d98     03 B0 66 F0 | 	shl	local06, #3
03d9c     32 BD 02 F6 | 	mov	local12, objptr
03da0     36 00 00 FF 
03da4     2C BC 06 F1 | 	add	local12, ##27692
03da8     5E B1 02 F1 | 	add	local06, local12
03dac     58 93 02 FB | 	rdlong	arg01, local06
03db0     93 01 00 FF 
03db4     3D AE 06 F6 | 	mov	local05, ##@LR__5569
03db8     57 95 02 F6 | 	mov	arg02, local05
03dbc     44 0C B2 FD | 	call	#__system___string_cmp
03dc0     00 7A 0E F2 | 	cmp	result1, #0 wz
03dc4     64 00 90 5D |  if_ne	jmp	#LR__0193
03dc8     77 B9 02 F6 | 	mov	local10, local37
03dcc     01 B8 06 F1 | 	add	local10, #1
03dd0     03 B8 66 F0 | 	shl	local10, #3
03dd4     36 00 00 FF 
03dd8     2C 64 06 F1 | 	add	objptr, ##27692
03ddc     32 B9 02 F1 | 	add	local10, objptr
03de0     04 B8 06 F1 | 	add	local10, #4
03de4     01 00 80 FF 
03de8     5C 07 68 FC | 	wrlong	##515, local10
03dec     77 B9 02 F6 | 	mov	local10, local37
03df0     01 B8 06 F1 | 	add	local10, #1
03df4     03 B8 66 F0 | 	shl	local10, #3
03df8     32 B9 02 F1 | 	add	local10, objptr
03dfc     93 01 00 FF 
03e00     3F B0 06 F6 | 	mov	local06, ##@LR__5570
03e04     5C B1 62 FC | 	wrlong	local06, local10
03e08     77 B9 02 F6 | 	mov	local10, local37
03e0c     03 B8 66 F0 | 	shl	local10, #3
03e10     32 AF 02 F6 | 	mov	local05, objptr
03e14     32 B9 02 F1 | 	add	local10, objptr
03e18     C3 B0 06 F6 | 	mov	local06, #195
03e1c     04 B8 06 F1 | 	add	local10, #4
03e20     5C 87 69 FC | 	wrlong	#195, local10
03e24     36 00 00 FF 
03e28     2C 64 86 F1 | 	sub	objptr, ##27692
03e2c                 | LR__0193
03e2c                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03e2c     93 01 00 FF 
03e30     42 B8 06 F6 | 	mov	local10, ##@LR__5571
03e34     7B 93 02 F6 | 	mov	arg01, local41
03e38     5C 95 02 F6 | 	mov	arg02, local10
03e3c     C4 0B B2 FD | 	call	#__system___string_cmp
03e40     00 7A 0E F2 | 	cmp	result1, #0 wz
03e44     F4 00 90 5D |  if_ne	jmp	#LR__0196
03e48     77 B1 02 F6 | 	mov	local06, local37
03e4c     01 B0 06 F1 | 	add	local06, #1
03e50     03 B0 66 F0 | 	shl	local06, #3
03e54     32 BD 02 F6 | 	mov	local12, objptr
03e58     36 00 00 FF 
03e5c     2C BC 06 F1 | 	add	local12, ##27692
03e60     5E B1 02 F1 | 	add	local06, local12
03e64     58 93 02 FB | 	rdlong	arg01, local06
03e68     93 01 00 FF 
03e6c     45 AE 06 F6 | 	mov	local05, ##@LR__5572
03e70     57 B9 02 F6 | 	mov	local10, local05
03e74     5C 95 02 F6 | 	mov	arg02, local10
03e78     88 0B B2 FD | 	call	#__system___string_cmp
03e7c     00 7A 0E F2 | 	cmp	result1, #0 wz
03e80     B8 00 90 5D |  if_ne	jmp	#LR__0196
03e84     77 B9 02 F6 | 	mov	local10, local37
03e88     01 B8 06 F1 | 	add	local10, #1
03e8c     03 B8 66 F0 | 	shl	local10, #3
03e90     32 AF 02 F6 | 	mov	local05, objptr
03e94     36 00 00 FF 
03e98     2C AE 06 F1 | 	add	local05, ##27692
03e9c     57 B9 02 F1 | 	add	local10, local05
03ea0     01 00 00 FF 
03ea4     03 B0 06 F6 | 	mov	local06, ##515
03ea8     04 B8 06 F1 | 	add	local10, #4
03eac     01 00 80 FF 
03eb0     5C 07 68 FC | 	wrlong	##515, local10
03eb4     04 B8 86 F1 | 	sub	local10, #4
03eb8     77 A9 02 F6 | 	mov	local02, local37
03ebc     02 A8 06 F1 | 	add	local02, #2
03ec0     63 0D 03 F6 | 	mov	local52, local17
03ec4     01 0C 07 F1 | 	add	local52, #1
03ec8                 | LR__0194
03ec8     86 A9 52 F2 | 	cmps	local02, local52 wc
03ecc     6C 00 90 3D |  if_ae	jmp	#LR__0195
03ed0     77 B9 02 F6 | 	mov	local10, local37
03ed4     01 B8 06 F1 | 	add	local10, #1
03ed8     03 B8 66 F0 | 	shl	local10, #3
03edc     36 00 00 FF 
03ee0     2C 64 06 F1 | 	add	objptr, ##27692
03ee4     32 AF 02 F6 | 	mov	local05, objptr
03ee8     32 B9 02 F1 | 	add	local10, objptr
03eec     77 C1 02 F6 | 	mov	local14, local37
03ef0     01 C0 06 F1 | 	add	local14, #1
03ef4     03 C0 66 F0 | 	shl	local14, #3
03ef8     32 C1 02 F1 | 	add	local14, objptr
03efc     60 93 02 FB | 	rdlong	arg01, local14
03f00     54 BB 02 F6 | 	mov	local11, local02
03f04     5D C1 02 F6 | 	mov	local14, local11
03f08     60 BF 02 F6 | 	mov	local13, local14
03f0c     03 BE 66 F0 | 	shl	local13, #3
03f10     32 DD 02 F6 | 	mov	local28, objptr
03f14     32 BF 02 F1 | 	add	local13, objptr
03f18     5F BD 02 FB | 	rdlong	local12, local13
03f1c     5E 95 02 F6 | 	mov	arg02, local12
03f20     36 00 00 FF 
03f24     2C 64 86 F1 | 	sub	objptr, ##27692
03f28     0C 0B B2 FD | 	call	#__system___string_concat
03f2c     3D B1 02 F6 | 	mov	local06, result1
03f30     5C B1 62 FC | 	wrlong	local06, local10
03f34     01 A8 06 F1 | 	add	local02, #1
03f38     8C FF 9F FD | 	jmp	#LR__0194
03f3c                 | LR__0195
03f3c                 | LR__0196
03f3c                 | ' 
03f3c                 | ' ' determine a type of the line and compile it
03f3c                 | ' 
03f3c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03f3c     36 00 00 FF 
03f40     2C 64 06 F1 | 	add	objptr, ##27692
03f44     32 93 02 FB | 	rdlong	arg01, objptr
03f48     36 00 00 FF 
03f4c     2C 64 86 F1 | 	sub	objptr, ##27692
03f50     C8 31 B0 FD | 	call	#_isdec
03f54     00 7A 0E F2 | 	cmp	result1, #0 wz
03f58     30 00 90 AD |  if_e	jmp	#LR__0197
03f5c     36 00 00 FF 
03f60     2C 64 06 F1 | 	add	objptr, ##27692
03f64     32 93 02 FB | 	rdlong	arg01, objptr
03f68     36 00 00 FF 
03f6c     2C 64 86 F1 | 	sub	objptr, ##27692
03f70     00 94 06 F6 | 	mov	arg02, #0
03f74     B8 37 B2 FD | 	call	#__system____builtin_atoi
03f78     53 00 00 FF 
03f7c     08 65 06 F1 | 	add	objptr, ##42760
03f80     32 7B 62 FC | 	wrlong	result1, objptr
03f84     53 00 00 FF 
03f88     08 65 86 F1 | 	sub	objptr, ##42760
03f8c                 | LR__0197
03f8c                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03f8c     53 00 00 FF 
03f90     08 65 06 F1 | 	add	objptr, ##42760
03f94     32 AD 02 FB | 	rdlong	local04, objptr
03f98     53 00 00 FF 
03f9c     08 65 86 F1 | 	sub	objptr, ##42760
03fa0     01 AC 16 F2 | 	cmp	local04, #1 wc
03fa4     40 00 90 CD |  if_b	jmp	#LR__0198
03fa8     01 C6 0E F2 | 	cmp	local17, #1 wz
03fac     38 00 00 AF 
03fb0     44 64 06 A1 |  if_e	add	objptr, ##28740
03fb4     32 AF 02 AB |  if_e	rdlong	local05, objptr
03fb8     38 00 00 AF 
03fbc     44 64 86 A1 |  if_e	sub	objptr, ##28740
03fc0     57 B9 02 A6 |  if_e	mov	local10, local05
03fc4     03 B8 0E A2 |  if_e	cmp	local10, #3 wz
03fc8     1C 00 90 5D |  if_ne	jmp	#LR__0198
03fcc     53 00 00 FF 
03fd0     08 65 06 F1 | 	add	objptr, ##42760
03fd4     32 93 02 FB | 	rdlong	arg01, objptr
03fd8     53 00 00 FF 
03fdc     08 65 86 F1 | 	sub	objptr, ##42760
03fe0     E0 32 B0 FD | 	call	#_deleteline
03fe4     C8 03 90 FD | 	jmp	#LR__0209
03fe8                 | LR__0198
03fe8                 | ' 
03fe8                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03fe8     38 00 00 FF 
03fec     44 64 06 F1 | 	add	objptr, ##28740
03ff0     32 AD 0A FB | 	rdlong	local04, objptr wz
03ff4     38 00 00 FF 
03ff8     44 64 86 F1 | 	sub	objptr, ##28740
03ffc     20 00 90 AD |  if_e	jmp	#LR__0199
04000     38 00 00 FF 
04004     44 64 06 F1 | 	add	objptr, ##28740
04008     32 AF 02 FB | 	rdlong	local05, objptr
0400c     38 00 00 FF 
04010     44 64 86 F1 | 	sub	objptr, ##28740
04014     57 B9 02 F6 | 	mov	local10, local05
04018     03 B8 0E F2 | 	cmp	local10, #3 wz
0401c     C0 00 90 5D |  if_ne	jmp	#LR__0201
04020                 | LR__0199
04020     36 00 00 FF 
04024     40 64 06 F1 | 	add	objptr, ##27712
04028     32 BD 02 FB | 	rdlong	local12, objptr
0402c     36 00 00 FF 
04030     40 64 86 F1 | 	sub	objptr, ##27712
04034     1B BC 0E F2 | 	cmp	local12, #27 wz
04038     A4 00 90 AD |  if_e	jmp	#LR__0201
0403c     53 00 00 FF 
04040     08 65 06 F1 | 	add	objptr, ##42760
04044     32 93 02 FB | 	rdlong	arg01, objptr
04048     1B 00 00 FF 
0404c     C4 64 86 F1 | 	sub	objptr, ##14020
04050     32 97 02 FB | 	rdlong	arg03, objptr
04054     38 00 00 FF 
04058     44 64 86 F1 | 	sub	objptr, ##28740
0405c     00 94 06 F6 | 	mov	arg02, #0
04060     38 46 B0 FD | 	call	#_compile
04064     3D A7 0A F6 | 	mov	local01, result1 wz
04068                 | '   err=compile(linenum,0,cont) 
04068                 | '   if err<>0 then printerror(err,linenum): goto 101
04068     20 00 90 AD |  if_e	jmp	#LR__0200
0406c     53 00 00 FF 
04070     08 65 06 F1 | 	add	objptr, ##42760
04074     32 95 02 FB | 	rdlong	arg02, objptr
04078     53 00 00 FF 
0407c     08 65 86 F1 | 	sub	objptr, ##42760
04080     53 93 02 F6 | 	mov	arg01, local01
04084     D8 CF B1 FD | 	call	#_printerror
04088     44 03 90 FD | 	jmp	#LR__0210
0408c                 | LR__0200
0408c                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
0408c     53 00 00 FF 
04090     4C 65 06 F1 | 	add	objptr, ##42828
04094     32 93 02 FB | 	rdlong	arg01, objptr
04098     53 00 00 FF 
0409c     4C 65 86 F1 | 	sub	objptr, ##42828
040a0     93 01 00 FF 
040a4     47 94 06 F6 | 	mov	arg02, ##@LR__5573
040a8     58 09 B2 FD | 	call	#__system___string_cmp
040ac     00 7A 0E F2 | 	cmp	result1, #0 wz
040b0     FC 02 90 AD |  if_e	jmp	#LR__0209
040b4     53 00 00 FF 
040b8     4C 65 06 F1 | 	add	objptr, ##42828
040bc     32 AD 02 FB | 	rdlong	local04, objptr
040c0     1B 00 00 FF 
040c4     10 65 86 F1 | 	sub	objptr, ##14096
040c8     32 AD 62 FC | 	wrlong	local04, objptr
040cc     08 64 06 F1 | 	add	objptr, #8
040d0     32 09 68 FC | 	wrlong	#4, objptr
040d4     38 00 00 FF 
040d8     44 64 86 F1 | 	sub	objptr, ##28740
040dc     0C D9 9F FD | 	jmp	#LR__0070
040e0                 | LR__0201
040e0                 | '       							
040e0                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
040e0     38 00 00 FF 
040e4     44 64 06 F1 | 	add	objptr, ##28740
040e8     32 AD 02 FB | 	rdlong	local04, objptr
040ec     38 00 00 FF 
040f0     44 64 86 F1 | 	sub	objptr, ##28740
040f4     01 AC 0E F2 | 	cmp	local04, #1 wz
040f8     38 00 00 5F 
040fc     44 64 06 51 |  if_ne	add	objptr, ##28740
04100     32 B9 02 5B |  if_ne	rdlong	local10, objptr
04104     38 00 00 5F 
04108     44 64 86 51 |  if_ne	sub	objptr, ##28740
0410c     02 B8 0E 52 |  if_ne	cmp	local10, #2 wz
04110     C0 00 90 5D |  if_ne	jmp	#LR__0203
04114     36 00 00 FF 
04118     38 64 06 F1 | 	add	objptr, ##27704
0411c     32 BD 02 FB | 	rdlong	local12, objptr
04120     36 00 00 FF 
04124     38 64 86 F1 | 	sub	objptr, ##27704
04128     1B BC 0E F2 | 	cmp	local12, #27 wz
0412c     A4 00 90 AD |  if_e	jmp	#LR__0203
04130     53 00 00 FF 
04134     08 65 06 F1 | 	add	objptr, ##42760
04138     32 93 02 FB | 	rdlong	arg01, objptr
0413c     1B 00 00 FF 
04140     C4 64 86 F1 | 	sub	objptr, ##14020
04144     32 97 02 FB | 	rdlong	arg03, objptr
04148     38 00 00 FF 
0414c     44 64 86 F1 | 	sub	objptr, ##28740
04150     00 94 06 F6 | 	mov	arg02, #0
04154     44 45 B0 FD | 	call	#_compile
04158     3D A7 0A F6 | 	mov	local01, result1 wz
0415c                 | '   err=compile(linenum,0,cont) 
0415c                 | '   if err<>0 then printerror(err,linenum): goto 101
0415c     20 00 90 AD |  if_e	jmp	#LR__0202
04160     53 00 00 FF 
04164     08 65 06 F1 | 	add	objptr, ##42760
04168     32 95 02 FB | 	rdlong	arg02, objptr
0416c     53 00 00 FF 
04170     08 65 86 F1 | 	sub	objptr, ##42760
04174     53 93 02 F6 | 	mov	arg01, local01
04178     E4 CE B1 FD | 	call	#_printerror
0417c     50 02 90 FD | 	jmp	#LR__0210
04180                 | LR__0202
04180                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
04180     53 00 00 FF 
04184     4C 65 06 F1 | 	add	objptr, ##42828
04188     32 93 02 FB | 	rdlong	arg01, objptr
0418c     53 00 00 FF 
04190     4C 65 86 F1 | 	sub	objptr, ##42828
04194     93 01 00 FF 
04198     48 94 06 F6 | 	mov	arg02, ##@LR__5574
0419c     64 08 B2 FD | 	call	#__system___string_cmp
041a0     00 7A 0E F2 | 	cmp	result1, #0 wz
041a4     08 02 90 AD |  if_e	jmp	#LR__0209
041a8     53 00 00 FF 
041ac     4C 65 06 F1 | 	add	objptr, ##42828
041b0     32 AD 02 FB | 	rdlong	local04, objptr
041b4     1B 00 00 FF 
041b8     10 65 86 F1 | 	sub	objptr, ##14096
041bc     32 AD 62 FC | 	wrlong	local04, objptr
041c0     08 64 06 F1 | 	add	objptr, #8
041c4     32 09 68 FC | 	wrlong	#4, objptr
041c8     38 00 00 FF 
041cc     44 64 86 F1 | 	sub	objptr, ##28740
041d0     18 D8 9F FD | 	jmp	#LR__0070
041d4                 | LR__0203
041d4                 | ' 							 
041d4                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
041d4     38 00 00 FF 
041d8     44 64 06 F1 | 	add	objptr, ##28740
041dc     32 AD 0A FB | 	rdlong	local04, objptr wz
041e0     38 00 00 FF 
041e4     44 64 86 F1 | 	sub	objptr, ##28740
041e8     38 00 00 5F 
041ec     44 64 06 51 |  if_ne	add	objptr, ##28740
041f0     32 B9 02 5B |  if_ne	rdlong	local10, objptr
041f4     38 00 00 5F 
041f8     44 64 86 51 |  if_ne	sub	objptr, ##28740
041fc     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
04200     36 00 00 AF 
04204     40 64 06 A1 |  if_e	add	objptr, ##27712
04208     32 BD 02 AB |  if_e	rdlong	local12, objptr
0420c     36 00 00 AF 
04210     40 64 86 A1 |  if_e	sub	objptr, ##27712
04214     1B BC 0E A2 |  if_e	cmp	local12, #27 wz
04218     A4 00 90 5D |  if_ne	jmp	#LR__0205
0421c     53 00 00 FF 
04220     08 65 06 F1 | 	add	objptr, ##42760
04224     32 93 02 FB | 	rdlong	arg01, objptr
04228     1B 00 00 FF 
0422c     C4 64 86 F1 | 	sub	objptr, ##14020
04230     32 97 02 FB | 	rdlong	arg03, objptr
04234     38 00 00 FF 
04238     44 64 86 F1 | 	sub	objptr, ##28740
0423c     00 94 06 F6 | 	mov	arg02, #0
04240     20 45 B0 FD | 	call	#_compile_assign
04244     3D A7 0A F6 | 	mov	local01, result1 wz
04248                 | '   err=compile_assign(linenum,0,cont)
04248                 | '   if err<>0 then printerror(err,linenum): goto 101
04248     20 00 90 AD |  if_e	jmp	#LR__0204
0424c     53 00 00 FF 
04250     08 65 06 F1 | 	add	objptr, ##42760
04254     32 95 02 FB | 	rdlong	arg02, objptr
04258     53 00 00 FF 
0425c     08 65 86 F1 | 	sub	objptr, ##42760
04260     53 93 02 F6 | 	mov	arg01, local01
04264     F8 CD B1 FD | 	call	#_printerror
04268     64 01 90 FD | 	jmp	#LR__0210
0426c                 | LR__0204
0426c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
0426c     53 00 00 FF 
04270     4C 65 06 F1 | 	add	objptr, ##42828
04274     32 93 02 FB | 	rdlong	arg01, objptr
04278     53 00 00 FF 
0427c     4C 65 86 F1 | 	sub	objptr, ##42828
04280     93 01 00 FF 
04284     49 94 06 F6 | 	mov	arg02, ##@LR__5575
04288     78 07 B2 FD | 	call	#__system___string_cmp
0428c     00 7A 0E F2 | 	cmp	result1, #0 wz
04290     1C 01 90 AD |  if_e	jmp	#LR__0209
04294     53 00 00 FF 
04298     4C 65 06 F1 | 	add	objptr, ##42828
0429c     32 AD 02 FB | 	rdlong	local04, objptr
042a0     1B 00 00 FF 
042a4     10 65 86 F1 | 	sub	objptr, ##14096
042a8     32 AD 62 FC | 	wrlong	local04, objptr
042ac     08 64 06 F1 | 	add	objptr, #8
042b0     32 09 68 FC | 	wrlong	#4, objptr
042b4     38 00 00 FF 
042b8     44 64 86 F1 | 	sub	objptr, ##28740
042bc     2C D7 9F FD | 	jmp	#LR__0070
042c0                 | LR__0205
042c0                 | '     							 
042c0                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
042c0     38 00 00 FF 
042c4     44 64 06 F1 | 	add	objptr, ##28740
042c8     32 AD 02 FB | 	rdlong	local04, objptr
042cc     38 00 00 FF 
042d0     44 64 86 F1 | 	sub	objptr, ##28740
042d4     01 AC 0E F2 | 	cmp	local04, #1 wz
042d8     38 00 00 5F 
042dc     44 64 06 51 |  if_ne	add	objptr, ##28740
042e0     32 B9 02 5B |  if_ne	rdlong	local10, objptr
042e4     38 00 00 5F 
042e8     44 64 86 51 |  if_ne	sub	objptr, ##28740
042ec     02 B8 0E 52 |  if_ne	cmp	local10, #2 wz
042f0     36 00 00 AF 
042f4     38 64 06 A1 |  if_e	add	objptr, ##27704
042f8     32 BD 02 AB |  if_e	rdlong	local12, objptr
042fc     36 00 00 AF 
04300     38 64 86 A1 |  if_e	sub	objptr, ##27704
04304     1B BC 0E A2 |  if_e	cmp	local12, #27 wz
04308     A4 00 90 5D |  if_ne	jmp	#LR__0208
0430c     53 00 00 FF 
04310     08 65 06 F1 | 	add	objptr, ##42760
04314     32 93 02 FB | 	rdlong	arg01, objptr
04318     1B 00 00 FF 
0431c     C4 64 86 F1 | 	sub	objptr, ##14020
04320     32 97 02 FB | 	rdlong	arg03, objptr
04324     38 00 00 FF 
04328     44 64 86 F1 | 	sub	objptr, ##28740
0432c     00 94 06 F6 | 	mov	arg02, #0
04330     30 44 B0 FD | 	call	#_compile_assign
04334     3D A7 0A F6 | 	mov	local01, result1 wz
04338                 | '   err=compile_assign(linenum,0,cont) 
04338                 | '   if err<>0 then printerror(err,linenum): goto 101
04338     20 00 90 AD |  if_e	jmp	#LR__0206
0433c     53 00 00 FF 
04340     08 65 06 F1 | 	add	objptr, ##42760
04344     32 95 02 FB | 	rdlong	arg02, objptr
04348     53 00 00 FF 
0434c     08 65 86 F1 | 	sub	objptr, ##42760
04350     53 93 02 F6 | 	mov	arg01, local01
04354     08 CD B1 FD | 	call	#_printerror
04358     74 00 90 FD | 	jmp	#LR__0210
0435c                 | LR__0206
0435c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
0435c     53 00 00 FF 
04360     4C 65 06 F1 | 	add	objptr, ##42828
04364     32 93 02 FB | 	rdlong	arg01, objptr
04368     53 00 00 FF 
0436c     4C 65 86 F1 | 	sub	objptr, ##42828
04370     93 01 00 FF 
04374     4A 94 06 F6 | 	mov	arg02, ##@LR__5576
04378     88 06 B2 FD | 	call	#__system___string_cmp
0437c     00 7A 4E F2 | 	cmps	result1, #0 wz
04380     2C 00 90 AD |  if_e	jmp	#LR__0207
04384     53 00 00 FF 
04388     4C 65 06 F1 | 	add	objptr, ##42828
0438c     32 AD 02 FB | 	rdlong	local04, objptr
04390     1B 00 00 FF 
04394     10 65 86 F1 | 	sub	objptr, ##14096
04398     32 AD 62 FC | 	wrlong	local04, objptr
0439c     08 64 06 F1 | 	add	objptr, #8
043a0     32 09 68 FC | 	wrlong	#4, objptr
043a4     38 00 00 FF 
043a8     44 64 86 F1 | 	sub	objptr, ##28740
043ac     3C D6 9F FD | 	jmp	#LR__0070
043b0                 | LR__0207
043b0                 | LR__0208
043b0                 | LR__0209
043b0                 | ' 
043b0                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
043b0     53 00 00 FF 
043b4     08 65 06 F1 | 	add	objptr, ##42760
043b8     32 AD 0A FB | 	rdlong	local04, objptr wz
043bc     53 00 00 FF 
043c0     08 65 86 F1 | 	sub	objptr, ##42760
043c4     B0 00 90 5D |  if_ne	jmp	#LR__0213
043c8     02 92 06 F6 | 	mov	arg01, #2
043cc     D4 91 B0 FD | 	call	#_execute_line
043d0                 | LR__0210
043d0                 | '   execute_line(2)
043d0                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
043d0     53 00 00 FF 
043d4     2C 65 06 F1 | 	add	objptr, ##42796
043d8     32 AD 0A FB | 	rdlong	local04, objptr wz
043dc     53 00 00 FF 
043e0     2C 65 86 F1 | 	sub	objptr, ##42796
043e4     20 00 90 5D |  if_ne	jmp	#LR__0211
043e8     93 01 00 FF 
043ec     4B 92 06 F6 | 	mov	arg01, ##@LR__5577
043f0                 | ' 
043f0                 | ' write(text)
043f0     CC ED B1 FD | 	call	#_hg010b_spin2_write
043f4                 | ' crlf
043f4     68 F2 B1 FD | 	call	#_hg010b_spin2_crlf
043f8     93 01 00 FF 
043fc     4C 92 06 F6 | 	mov	arg01, ##@LR__5578
04400                 | ' 
04400                 | ' write(text)
04400     BC ED B1 FD | 	call	#_hg010b_spin2_write
04404                 | ' crlf
04404     58 F2 B1 FD | 	call	#_hg010b_spin2_crlf
04408                 | LR__0211
04408                 | '     if inload=1 andalso err>0 then print fullline$
04408     53 00 00 FF 
0440c     2C 65 06 F1 | 	add	objptr, ##42796
04410     32 AD 02 FB | 	rdlong	local04, objptr
04414     53 00 00 FF 
04418     2C 65 86 F1 | 	sub	objptr, ##42796
0441c     01 AC 0E F2 | 	cmp	local04, #1 wz
04420     54 00 90 5D |  if_ne	jmp	#LR__0212
04424     01 A6 56 F2 | 	cmps	local01, #1 wc
04428     4C 00 90 CD |  if_b	jmp	#LR__0212
0442c     00 92 06 F6 | 	mov	arg01, #0
04430     2C 5B B2 FD | 	call	#__system___getiolock_0622
04434     3D 93 02 F6 | 	mov	arg01, result1
04438     A0 05 B2 FD | 	call	#__system___lockmem
0443c     38 00 00 FF 
04440     40 64 06 F1 | 	add	objptr, ##28736
04444     32 95 02 FB | 	rdlong	arg02, objptr
04448     38 00 00 FF 
0444c     40 64 86 F1 | 	sub	objptr, ##28736
04450     00 92 06 F6 | 	mov	arg01, #0
04454     00 96 06 F6 | 	mov	arg03, #0
04458     74 12 B2 FD | 	call	#__system___basic_print_string
0445c     00 92 06 F6 | 	mov	arg01, #0
04460     0A 94 06 F6 | 	mov	arg02, #10
04464     00 96 06 F6 | 	mov	arg03, #0
04468     0C 12 B2 FD | 	call	#__system___basic_print_char
0446c     00 92 06 F6 | 	mov	arg01, #0
04470     EC 5A B2 FD | 	call	#__system___getiolock_0622
04474     3D 01 68 FC | 	wrlong	#0, result1
04478                 | LR__0212
04478                 | LR__0213
04478     E7 F0 03 F6 | 	mov	ptra, fp
0447c     F2 00 A0 FD | 	call	#popregs_
04480                 | _interpret_ret
04480     2D 00 64 FD | 	ret
04484                 | 
04484                 | ' 
04484                 | ' '---------------------------------------------------------------------------------------------------------------------
04484                 | ' '
04484                 | ' '                          END OF TOKENIZER MAIN CODE
04484                 | ' '
04484                 | ' '---------------------------------------------------------------------------------------------------------------------
04484                 | ' 
04484                 | ' '---------------------------------------------------------------------------------------------------------------------
04484                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
04484                 | ' '---------------------------------------------------------------------------------------------------------------------
04484                 | ' 
04484                 | ' ' Check if the part is an operator, return a token or 0 if not found
04484                 | ' 
04484                 | ' function isoperator(s as string) as ubyte
04484                 | _isoperator
04484     01 CA 05 F6 | 	mov	COUNT_, #1
04488     E8 00 A0 FD | 	call	#pushregs_
0448c                 | ' 
0448c                 | ' select case s
0448c     49 A7 02 F6 | 	mov	local01, arg01
04490     93 01 00 FF 
04494     52 94 06 F6 | 	mov	arg02, ##@LR__5579
04498     53 93 02 F6 | 	mov	arg01, local01
0449c     64 05 B2 FD | 	call	#__system___string_cmp
044a0     00 7A 0E F2 | 	cmp	result1, #0 wz
044a4     FC 01 90 AD |  if_e	jmp	#LR__0220
044a8     93 01 00 FF 
044ac     54 94 06 F6 | 	mov	arg02, ##@LR__5580
044b0     53 93 02 F6 | 	mov	arg01, local01
044b4     4C 05 B2 FD | 	call	#__system___string_cmp
044b8     00 7A 0E F2 | 	cmp	result1, #0 wz
044bc     EC 01 90 AD |  if_e	jmp	#LR__0221
044c0     93 01 00 FF 
044c4     56 94 06 F6 | 	mov	arg02, ##@LR__5581
044c8     53 93 02 F6 | 	mov	arg01, local01
044cc     34 05 B2 FD | 	call	#__system___string_cmp
044d0     00 7A 0E F2 | 	cmp	result1, #0 wz
044d4     DC 01 90 AD |  if_e	jmp	#LR__0222
044d8     93 01 00 FF 
044dc     59 94 06 F6 | 	mov	arg02, ##@LR__5582
044e0     53 93 02 F6 | 	mov	arg01, local01
044e4     1C 05 B2 FD | 	call	#__system___string_cmp
044e8     00 7A 0E F2 | 	cmp	result1, #0 wz
044ec     CC 01 90 AD |  if_e	jmp	#LR__0223
044f0     93 01 00 FF 
044f4     5D 94 06 F6 | 	mov	arg02, ##@LR__5583
044f8     53 93 02 F6 | 	mov	arg01, local01
044fc     04 05 B2 FD | 	call	#__system___string_cmp
04500     00 7A 0E F2 | 	cmp	result1, #0 wz
04504     BC 01 90 AD |  if_e	jmp	#LR__0224
04508     93 01 00 FF 
0450c     5F 94 06 F6 | 	mov	arg02, ##@LR__5584
04510     53 93 02 F6 | 	mov	arg01, local01
04514     EC 04 B2 FD | 	call	#__system___string_cmp
04518     00 7A 0E F2 | 	cmp	result1, #0 wz
0451c     AC 01 90 AD |  if_e	jmp	#LR__0225
04520     93 01 00 FF 
04524     61 94 06 F6 | 	mov	arg02, ##@LR__5585
04528     53 93 02 F6 | 	mov	arg01, local01
0452c     D4 04 B2 FD | 	call	#__system___string_cmp
04530     00 7A 0E F2 | 	cmp	result1, #0 wz
04534     9C 01 90 AD |  if_e	jmp	#LR__0226
04538     93 01 00 FF 
0453c     65 94 06 F6 | 	mov	arg02, ##@LR__5586
04540     53 93 02 F6 | 	mov	arg01, local01
04544     BC 04 B2 FD | 	call	#__system___string_cmp
04548     00 7A 0E F2 | 	cmp	result1, #0 wz
0454c     8C 01 90 AD |  if_e	jmp	#LR__0227
04550     93 01 00 FF 
04554     69 94 06 F6 | 	mov	arg02, ##@LR__5587
04558     53 93 02 F6 | 	mov	arg01, local01
0455c     A4 04 B2 FD | 	call	#__system___string_cmp
04560     00 7A 0E F2 | 	cmp	result1, #0 wz
04564     7C 01 90 AD |  if_e	jmp	#LR__0228
04568     93 01 00 FF 
0456c     6D 94 06 F6 | 	mov	arg02, ##@LR__5588
04570     53 93 02 F6 | 	mov	arg01, local01
04574     8C 04 B2 FD | 	call	#__system___string_cmp
04578     00 7A 0E F2 | 	cmp	result1, #0 wz
0457c     6C 01 90 AD |  if_e	jmp	#LR__0229
04580     93 01 00 FF 
04584     71 94 06 F6 | 	mov	arg02, ##@LR__5589
04588     53 93 02 F6 | 	mov	arg01, local01
0458c     74 04 B2 FD | 	call	#__system___string_cmp
04590     00 7A 0E F2 | 	cmp	result1, #0 wz
04594     5C 01 90 AD |  if_e	jmp	#LR__0230
04598     93 01 00 FF 
0459c     75 94 06 F6 | 	mov	arg02, ##@LR__5590
045a0     53 93 02 F6 | 	mov	arg01, local01
045a4     5C 04 B2 FD | 	call	#__system___string_cmp
045a8     00 7A 0E F2 | 	cmp	result1, #0 wz
045ac     4C 01 90 AD |  if_e	jmp	#LR__0231
045b0     93 01 00 FF 
045b4     77 94 06 F6 | 	mov	arg02, ##@LR__5591
045b8     53 93 02 F6 | 	mov	arg01, local01
045bc     44 04 B2 FD | 	call	#__system___string_cmp
045c0     00 7A 0E F2 | 	cmp	result1, #0 wz
045c4     3C 01 90 AD |  if_e	jmp	#LR__0232
045c8     93 01 00 FF 
045cc     7B 94 06 F6 | 	mov	arg02, ##@LR__5592
045d0     53 93 02 F6 | 	mov	arg01, local01
045d4     2C 04 B2 FD | 	call	#__system___string_cmp
045d8     00 7A 0E F2 | 	cmp	result1, #0 wz
045dc     2C 01 90 AD |  if_e	jmp	#LR__0233
045e0     93 01 00 FF 
045e4     7D 94 06 F6 | 	mov	arg02, ##@LR__5593
045e8     53 93 02 F6 | 	mov	arg01, local01
045ec     14 04 B2 FD | 	call	#__system___string_cmp
045f0     00 7A 0E F2 | 	cmp	result1, #0 wz
045f4     1C 01 90 AD |  if_e	jmp	#LR__0234
045f8     93 01 00 FF 
045fc     7F 94 06 F6 | 	mov	arg02, ##@LR__5594
04600     53 93 02 F6 | 	mov	arg01, local01
04604     FC 03 B2 FD | 	call	#__system___string_cmp
04608     00 7A 0E F2 | 	cmp	result1, #0 wz
0460c     0C 01 90 AD |  if_e	jmp	#LR__0235
04610     93 01 00 FF 
04614     82 94 06 F6 | 	mov	arg02, ##@LR__5595
04618     53 93 02 F6 | 	mov	arg01, local01
0461c     E4 03 B2 FD | 	call	#__system___string_cmp
04620     00 7A 0E F2 | 	cmp	result1, #0 wz
04624     FC 00 90 AD |  if_e	jmp	#LR__0236
04628     93 01 00 FF 
0462c     85 94 06 F6 | 	mov	arg02, ##@LR__5596
04630     53 93 02 F6 | 	mov	arg01, local01
04634     CC 03 B2 FD | 	call	#__system___string_cmp
04638     00 7A 0E F2 | 	cmp	result1, #0 wz
0463c     EC 00 90 AD |  if_e	jmp	#LR__0237
04640     93 01 00 FF 
04644     87 94 06 F6 | 	mov	arg02, ##@LR__5597
04648     53 93 02 F6 | 	mov	arg01, local01
0464c     B4 03 B2 FD | 	call	#__system___string_cmp
04650     00 7A 0E F2 | 	cmp	result1, #0 wz
04654     DC 00 90 AD |  if_e	jmp	#LR__0238
04658     93 01 00 FF 
0465c     89 94 06 F6 | 	mov	arg02, ##@LR__5598
04660     53 93 02 F6 | 	mov	arg01, local01
04664     9C 03 B2 FD | 	call	#__system___string_cmp
04668     00 7A 0E F2 | 	cmp	result1, #0 wz
0466c     CC 00 90 AD |  if_e	jmp	#LR__0239
04670     93 01 00 FF 
04674     8C 94 06 F6 | 	mov	arg02, ##@LR__5599
04678     53 93 02 F6 | 	mov	arg01, local01
0467c     84 03 B2 FD | 	call	#__system___string_cmp
04680     00 7A 0E F2 | 	cmp	result1, #0 wz
04684     BC 00 90 AD |  if_e	jmp	#LR__0240
04688     93 01 00 FF 
0468c     8F 94 06 F6 | 	mov	arg02, ##@LR__5600
04690     53 93 02 F6 | 	mov	arg01, local01
04694     6C 03 B2 FD | 	call	#__system___string_cmp
04698     00 7A 0E F2 | 	cmp	result1, #0 wz
0469c     AC 00 90 AD |  if_e	jmp	#LR__0241
046a0     B0 00 90 FD | 	jmp	#LR__0242
046a4                 | LR__0220
046a4     01 7A 06 F6 | 	mov	result1, #1
046a8     AC 00 90 FD | 	jmp	#LR__0243
046ac                 | LR__0221
046ac     02 7A 06 F6 | 	mov	result1, #2
046b0     A4 00 90 FD | 	jmp	#LR__0243
046b4                 | LR__0222
046b4     03 7A 06 F6 | 	mov	result1, #3
046b8     9C 00 90 FD | 	jmp	#LR__0243
046bc                 | LR__0223
046bc     04 7A 06 F6 | 	mov	result1, #4
046c0     94 00 90 FD | 	jmp	#LR__0243
046c4                 | LR__0224
046c4     05 7A 06 F6 | 	mov	result1, #5
046c8     8C 00 90 FD | 	jmp	#LR__0243
046cc                 | LR__0225
046cc     06 7A 06 F6 | 	mov	result1, #6
046d0     84 00 90 FD | 	jmp	#LR__0243
046d4                 | LR__0226
046d4     07 7A 06 F6 | 	mov	result1, #7
046d8     7C 00 90 FD | 	jmp	#LR__0243
046dc                 | LR__0227
046dc     08 7A 06 F6 | 	mov	result1, #8
046e0     74 00 90 FD | 	jmp	#LR__0243
046e4                 | LR__0228
046e4     09 7A 06 F6 | 	mov	result1, #9
046e8     6C 00 90 FD | 	jmp	#LR__0243
046ec                 | LR__0229
046ec     0A 7A 06 F6 | 	mov	result1, #10
046f0     64 00 90 FD | 	jmp	#LR__0243
046f4                 | LR__0230
046f4     0B 7A 06 F6 | 	mov	result1, #11
046f8     5C 00 90 FD | 	jmp	#LR__0243
046fc                 | LR__0231
046fc     0C 7A 06 F6 | 	mov	result1, #12
04700     54 00 90 FD | 	jmp	#LR__0243
04704                 | LR__0232
04704     0D 7A 06 F6 | 	mov	result1, #13
04708     4C 00 90 FD | 	jmp	#LR__0243
0470c                 | LR__0233
0470c     0E 7A 06 F6 | 	mov	result1, #14
04710     44 00 90 FD | 	jmp	#LR__0243
04714                 | LR__0234
04714     1B 7A 06 F6 | 	mov	result1, #27
04718     3C 00 90 FD | 	jmp	#LR__0243
0471c                 | LR__0235
0471c     27 7A 06 F6 | 	mov	result1, #39
04720     34 00 90 FD | 	jmp	#LR__0243
04724                 | LR__0236
04724     26 7A 06 F6 | 	mov	result1, #38
04728     2C 00 90 FD | 	jmp	#LR__0243
0472c                 | LR__0237
0472c     10 7A 06 F6 | 	mov	result1, #16
04730     24 00 90 FD | 	jmp	#LR__0243
04734                 | LR__0238
04734     0F 7A 06 F6 | 	mov	result1, #15
04738     1C 00 90 FD | 	jmp	#LR__0243
0473c                 | LR__0239
0473c     2A 7A 06 F6 | 	mov	result1, #42
04740     14 00 90 FD | 	jmp	#LR__0243
04744                 | LR__0240
04744     28 7A 06 F6 | 	mov	result1, #40
04748     0C 00 90 FD | 	jmp	#LR__0243
0474c                 | LR__0241
0474c     29 7A 06 F6 | 	mov	result1, #41
04750     04 00 90 FD | 	jmp	#LR__0243
04754                 | LR__0242
04754     00 7A 06 F6 | 	mov	result1, #0
04758                 | LR__0243
04758     E7 F0 03 F6 | 	mov	ptra, fp
0475c     F2 00 A0 FD | 	call	#popregs_
04760                 | _isoperator_ret
04760     2D 00 64 FD | 	ret
04764                 | 
04764                 | ' 
04764                 | ' ' Check if the part is a channel#, return a token or 0 if not found
04764                 | ' 
04764                 | ' function ischannel(s as string) as ulong
04764                 | _ischannel
04764     02 CA 05 F6 | 	mov	COUNT_, #2
04768     E8 00 A0 FD | 	call	#pushregs_
0476c                 | ' if left$(s,1)<>"#" then return 0
0476c     49 A7 02 F6 | 	mov	local01, arg01
04770     01 94 06 F6 | 	mov	arg02, #1
04774     0C 1B B2 FD | 	call	#__system__Left_S
04778     3D 93 02 F6 | 	mov	arg01, result1
0477c     93 01 00 FF 
04780     92 94 06 F6 | 	mov	arg02, ##@LR__5601
04784     7C 02 B2 FD | 	call	#__system___string_cmp
04788     00 7A 0E F2 | 	cmp	result1, #0 wz
0478c     00 7A 06 56 |  if_ne	mov	result1, #0
04790     AC 00 90 5D |  if_ne	jmp	#LR__0254
04794                 | ' if len(s)<>2 then return 0
04794     53 93 02 F6 | 	mov	arg01, local01
04798     49 A9 02 F6 | 	mov	local02, arg01
0479c     D7 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
047a0                 | LR__0250
047a0     54 7B CA FA | 	rdbyte	result1, local02 wz
047a4     01 A8 06 51 |  if_ne	add	local02, #1
047a8     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
047ac                 | LR__0251
047ac     49 A9 82 F1 | 	sub	local02, arg01
047b0     54 7B 02 F6 | 	mov	result1, local02
047b4     02 7A 0E F2 | 	cmp	result1, #2 wz
047b8     00 7A 06 56 |  if_ne	mov	result1, #0
047bc     80 00 90 5D |  if_ne	jmp	#LR__0254
047c0                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
047c0     53 93 02 F6 | 	mov	arg01, local01
047c4     01 94 06 F6 | 	mov	arg02, #1
047c8     40 1B B2 FD | 	call	#__system__Right_S
047cc     3D 93 02 F6 | 	mov	arg01, result1
047d0     93 01 00 FF 
047d4     94 94 06 F6 | 	mov	arg02, ##@LR__5602
047d8     28 02 B2 FD | 	call	#__system___string_cmp
047dc     00 7A 56 F2 | 	cmps	result1, #0 wc
047e0     24 00 90 CD |  if_b	jmp	#LR__0252
047e4     53 93 02 F6 | 	mov	arg01, local01
047e8     01 94 06 F6 | 	mov	arg02, #1
047ec     1C 1B B2 FD | 	call	#__system__Right_S
047f0     3D 93 02 F6 | 	mov	arg01, result1
047f4     93 01 00 FF 
047f8     96 94 06 F6 | 	mov	arg02, ##@LR__5603
047fc     04 02 B2 FD | 	call	#__system___string_cmp
04800     01 7A 56 F2 | 	cmps	result1, #1 wc
04804     08 00 90 CD |  if_b	jmp	#LR__0253
04808                 | LR__0252
04808     00 7A 06 F6 | 	mov	result1, #0
0480c     30 00 90 FD | 	jmp	#LR__0254
04810                 | LR__0253
04810                 | ' return token_channel+val(right$(s,1))
04810     53 93 02 F6 | 	mov	arg01, local01
04814     01 94 06 F6 | 	mov	arg02, #1
04818     F0 1A B2 FD | 	call	#__system__Right_S
0481c     3D 93 02 F6 | 	mov	arg01, result1
04820     A4 30 B2 FD | 	call	#__system____builtin_atof
04824     3D 95 02 F6 | 	mov	arg02, result1
04828     00 18 21 FF 
0482c     00 92 06 F6 | 	mov	arg01, ##1110441984
04830     A8 24 B2 FD | 	call	#__system___float_add
04834     3D 93 02 F6 | 	mov	arg01, result1
04838     00 94 06 F6 | 	mov	arg02, #0
0483c     34 2D B2 FD | 	call	#__system___float_tointeger
04840                 | LR__0254
04840     E7 F0 03 F6 | 	mov	ptra, fp
04844     F2 00 A0 FD | 	call	#popregs_
04848                 | _ischannel_ret
04848     2D 00 64 FD | 	ret
0484c                 | 
0484c                 | ' 
0484c                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
0484c                 | ' ' todo: add spin2/pasm constants for pin control
0484c                 | ' 
0484c                 | ' function isconstant(s as string) as integer
0484c                 | _isconstant
0484c     01 CA 05 F6 | 	mov	COUNT_, #1
04850     E8 00 A0 FD | 	call	#pushregs_
04854                 | ' 
04854                 | ' select case s
04854     49 A7 02 F6 | 	mov	local01, arg01
04858     93 01 00 FF 
0485c     98 94 06 F6 | 	mov	arg02, ##@LR__5604
04860     53 93 02 F6 | 	mov	arg01, local01
04864     9C 01 B2 FD | 	call	#__system___string_cmp
04868     00 7A 0E F2 | 	cmp	result1, #0 wz
0486c     34 00 90 AD |  if_e	jmp	#LR__0260
04870     93 01 00 FF 
04874     9E 94 06 F6 | 	mov	arg02, ##@LR__5605
04878     53 93 02 F6 | 	mov	arg01, local01
0487c     84 01 B2 FD | 	call	#__system___string_cmp
04880     00 7A 0E F2 | 	cmp	result1, #0 wz
04884     24 00 90 AD |  if_e	jmp	#LR__0261
04888     93 01 00 FF 
0488c     A5 94 06 F6 | 	mov	arg02, ##@LR__5606
04890     53 93 02 F6 | 	mov	arg01, local01
04894     6C 01 B2 FD | 	call	#__system___string_cmp
04898     00 7A 0E F2 | 	cmp	result1, #0 wz
0489c     14 00 90 AD |  if_e	jmp	#LR__0262
048a0     18 00 90 FD | 	jmp	#LR__0263
048a4                 | LR__0260
048a4     01 7A 06 F6 | 	mov	result1, #1
048a8     14 00 90 FD | 	jmp	#LR__0264
048ac                 | LR__0261
048ac     02 7A 06 F6 | 	mov	result1, #2
048b0     0C 00 90 FD | 	jmp	#LR__0264
048b4                 | LR__0262
048b4     04 7A 06 F6 | 	mov	result1, #4
048b8     04 00 90 FD | 	jmp	#LR__0264
048bc                 | LR__0263
048bc     00 7A 06 F6 | 	mov	result1, #0
048c0                 | LR__0264
048c0     E7 F0 03 F6 | 	mov	ptra, fp
048c4     F2 00 A0 FD | 	call	#popregs_
048c8                 | _isconstant_ret
048c8     2D 00 64 FD | 	ret
048cc                 | 
048cc                 | ' 
048cc                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
048cc                 | ' 
048cc                 | ' function isnotename(s as string) as ulong
048cc                 | _isnotename
048cc     07 CA 05 F6 | 	mov	COUNT_, #7
048d0     E8 00 A0 FD | 	call	#pushregs_
048d4                 | ' if left$(s,1)<>"#" then return 0
048d4     49 A7 02 F6 | 	mov	local01, arg01
048d8     01 94 06 F6 | 	mov	arg02, #1
048dc     A4 19 B2 FD | 	call	#__system__Left_S
048e0     3D 93 02 F6 | 	mov	arg01, result1
048e4     93 01 00 FF 
048e8     AD 94 06 F6 | 	mov	arg02, ##@LR__5607
048ec     14 01 B2 FD | 	call	#__system___string_cmp
048f0     00 7A 0E F2 | 	cmp	result1, #0 wz
048f4     00 7A 06 56 |  if_ne	mov	result1, #0
048f8     30 03 90 5D |  if_ne	jmp	#LR__0293
048fc                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
048fc     53 93 02 F6 | 	mov	arg01, local01
04900     03 94 06 F6 | 	mov	arg02, #3
04904     01 96 06 F6 | 	mov	arg03, #1
04908     90 1A B2 FD | 	call	#__system__Mid_S
0490c     3D 93 02 F6 | 	mov	arg01, result1
04910     93 01 00 FF 
04914     AF 94 06 F6 | 	mov	arg02, ##@LR__5608
04918     E8 00 B2 FD | 	call	#__system___string_cmp
0491c     00 7A 0E F2 | 	cmp	result1, #0 wz
04920     18 00 90 5D |  if_ne	jmp	#LR__0270
04924     53 93 02 F6 | 	mov	arg01, local01
04928     02 94 06 F6 | 	mov	arg02, #2
0492c     02 96 06 F6 | 	mov	arg03, #2
04930     68 1A B2 FD | 	call	#__system__Mid_S
04934     3D A9 02 F6 | 	mov	local02, result1
04938     14 00 90 FD | 	jmp	#LR__0271
0493c                 | LR__0270
0493c     53 93 02 F6 | 	mov	arg01, local01
04940     02 94 06 F6 | 	mov	arg02, #2
04944     01 96 06 F6 | 	mov	arg03, #1
04948     50 1A B2 FD | 	call	#__system__Mid_S
0494c     3D A9 02 F6 | 	mov	local02, result1
04950                 | LR__0271
04950                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
04950     53 93 02 F6 | 	mov	arg01, local01
04954     49 AB 02 F6 | 	mov	local03, arg01
04958     D7 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
0495c                 | LR__0272
0495c     55 7B CA FA | 	rdbyte	result1, local03 wz
04960     01 AA 06 51 |  if_ne	add	local03, #1
04964     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
04968                 | LR__0273
04968     49 AB 82 F1 | 	sub	local03, arg01
0496c     55 95 02 F6 | 	mov	arg02, local03
04970     01 94 86 F1 | 	sub	arg02, #1
04974     53 93 02 F6 | 	mov	arg01, local01
04978     01 96 06 F6 | 	mov	arg03, #1
0497c     1C 1A B2 FD | 	call	#__system__Mid_S
04980     3D 93 02 F6 | 	mov	arg01, result1
04984     93 01 00 FF 
04988     B1 94 06 F6 | 	mov	arg02, ##@LR__5609
0498c     74 00 B2 FD | 	call	#__system___string_cmp
04990     00 7A 0E F2 | 	cmp	result1, #0 wz
04994     28 00 90 AD |  if_e	jmp	#LR__0274
04998     53 93 02 F6 | 	mov	arg01, local01
0499c     01 94 06 F6 | 	mov	arg02, #1
049a0     68 19 B2 FD | 	call	#__system__Right_S
049a4     3D 93 02 F6 | 	mov	arg01, result1
049a8     1C 2F B2 FD | 	call	#__system____builtin_atof
049ac     3D 93 02 F6 | 	mov	arg01, result1
049b0     00 94 06 F6 | 	mov	arg02, #0
049b4     BC 2B B2 FD | 	call	#__system___float_tointeger
049b8     3D AD 02 F6 | 	mov	local04, result1
049bc     34 00 90 FD | 	jmp	#LR__0275
049c0                 | LR__0274
049c0     53 93 02 F6 | 	mov	arg01, local01
049c4     01 94 06 F6 | 	mov	arg02, #1
049c8     40 19 B2 FD | 	call	#__system__Right_S
049cc     3D 93 02 F6 | 	mov	arg01, result1
049d0     F4 2E B2 FD | 	call	#__system____builtin_atof
049d4     3D 95 02 F6 | 	mov	arg02, result1
049d8     00 C0 5F FF 
049dc     00 92 06 F6 | 	mov	arg01, ##-1082130432
049e0     C8 26 B2 FD | 	call	#__system___float_mul
049e4     3D 93 02 F6 | 	mov	arg01, result1
049e8     00 94 06 F6 | 	mov	arg02, #0
049ec     84 2B B2 FD | 	call	#__system___float_tointeger
049f0     3D AD 02 F6 | 	mov	local04, result1
049f4                 | LR__0275
049f4                 | ' 
049f4                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
049f4     00 AC 0E F2 | 	cmp	local04, #0 wz
049f8     24 00 90 5D |  if_ne	jmp	#LR__0276
049fc     53 93 02 F6 | 	mov	arg01, local01
04a00     01 94 06 F6 | 	mov	arg02, #1
04a04     04 19 B2 FD | 	call	#__system__Right_S
04a08     3D 93 02 F6 | 	mov	arg01, result1
04a0c     93 01 00 FF 
04a10     B3 94 06 F6 | 	mov	arg02, ##@LR__5610
04a14     EC FF B1 FD | 	call	#__system___string_cmp
04a18     00 7A 0E F2 | 	cmp	result1, #0 wz
04a1c     04 AC 06 56 |  if_ne	mov	local04, #4
04a20                 | LR__0276
04a20                 | ' 
04a20                 | ' select case s1
04a20     54 AF 02 F6 | 	mov	local05, local02
04a24     93 01 00 FF 
04a28     B5 94 06 F6 | 	mov	arg02, ##@LR__5611
04a2c     57 93 02 F6 | 	mov	arg01, local05
04a30     D0 FF B1 FD | 	call	#__system___string_cmp
04a34     00 7A 0E F2 | 	cmp	result1, #0 wz
04a38     24 01 90 AD |  if_e	jmp	#LR__0277
04a3c     93 01 00 FF 
04a40     B7 94 06 F6 | 	mov	arg02, ##@LR__5612
04a44     57 93 02 F6 | 	mov	arg01, local05
04a48     B8 FF B1 FD | 	call	#__system___string_cmp
04a4c     00 7A 0E F2 | 	cmp	result1, #0 wz
04a50     18 01 90 AD |  if_e	jmp	#LR__0278
04a54     93 01 00 FF 
04a58     BA 94 06 F6 | 	mov	arg02, ##@LR__5613
04a5c     57 93 02 F6 | 	mov	arg01, local05
04a60     A0 FF B1 FD | 	call	#__system___string_cmp
04a64     00 7A 0E F2 | 	cmp	result1, #0 wz
04a68     0C 01 90 AD |  if_e	jmp	#LR__0279
04a6c     93 01 00 FF 
04a70     BC 94 06 F6 | 	mov	arg02, ##@LR__5614
04a74     57 93 02 F6 | 	mov	arg01, local05
04a78     88 FF B1 FD | 	call	#__system___string_cmp
04a7c     00 7A 0E F2 | 	cmp	result1, #0 wz
04a80     00 01 90 AD |  if_e	jmp	#LR__0280
04a84     93 01 00 FF 
04a88     BF 94 06 F6 | 	mov	arg02, ##@LR__5615
04a8c     57 93 02 F6 | 	mov	arg01, local05
04a90     70 FF B1 FD | 	call	#__system___string_cmp
04a94     00 7A 0E F2 | 	cmp	result1, #0 wz
04a98     F4 00 90 AD |  if_e	jmp	#LR__0281
04a9c     93 01 00 FF 
04aa0     C1 94 06 F6 | 	mov	arg02, ##@LR__5616
04aa4     57 93 02 F6 | 	mov	arg01, local05
04aa8     58 FF B1 FD | 	call	#__system___string_cmp
04aac     00 7A 0E F2 | 	cmp	result1, #0 wz
04ab0     E8 00 90 AD |  if_e	jmp	#LR__0282
04ab4     93 01 00 FF 
04ab8     C3 94 06 F6 | 	mov	arg02, ##@LR__5617
04abc     57 93 02 F6 | 	mov	arg01, local05
04ac0     40 FF B1 FD | 	call	#__system___string_cmp
04ac4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ac8     DC 00 90 AD |  if_e	jmp	#LR__0283
04acc     93 01 00 FF 
04ad0     C6 94 06 F6 | 	mov	arg02, ##@LR__5618
04ad4     57 93 02 F6 | 	mov	arg01, local05
04ad8     28 FF B1 FD | 	call	#__system___string_cmp
04adc     00 7A 0E F2 | 	cmp	result1, #0 wz
04ae0     D0 00 90 AD |  if_e	jmp	#LR__0284
04ae4     93 01 00 FF 
04ae8     C8 94 06 F6 | 	mov	arg02, ##@LR__5619
04aec     57 93 02 F6 | 	mov	arg01, local05
04af0     10 FF B1 FD | 	call	#__system___string_cmp
04af4     00 7A 0E F2 | 	cmp	result1, #0 wz
04af8     C4 00 90 AD |  if_e	jmp	#LR__0285
04afc     93 01 00 FF 
04b00     CB 94 06 F6 | 	mov	arg02, ##@LR__5620
04b04     57 93 02 F6 | 	mov	arg01, local05
04b08     F8 FE B1 FD | 	call	#__system___string_cmp
04b0c     00 7A 0E F2 | 	cmp	result1, #0 wz
04b10     B8 00 90 AD |  if_e	jmp	#LR__0286
04b14     93 01 00 FF 
04b18     CD 94 06 F6 | 	mov	arg02, ##@LR__5621
04b1c     57 93 02 F6 | 	mov	arg01, local05
04b20     E0 FE B1 FD | 	call	#__system___string_cmp
04b24     00 7A 0E F2 | 	cmp	result1, #0 wz
04b28     AC 00 90 AD |  if_e	jmp	#LR__0287
04b2c     93 01 00 FF 
04b30     D0 94 06 F6 | 	mov	arg02, ##@LR__5622
04b34     57 93 02 F6 | 	mov	arg01, local05
04b38     C8 FE B1 FD | 	call	#__system___string_cmp
04b3c     00 7A 0E F2 | 	cmp	result1, #0 wz
04b40     A0 00 90 AD |  if_e	jmp	#LR__0288
04b44     93 01 00 FF 
04b48     D2 94 06 F6 | 	mov	arg02, ##@LR__5623
04b4c     57 93 02 F6 | 	mov	arg01, local05
04b50     B0 FE B1 FD | 	call	#__system___string_cmp
04b54     00 7A 0E F2 | 	cmp	result1, #0 wz
04b58     94 00 90 AD |  if_e	jmp	#LR__0289
04b5c     9C 00 90 FD | 	jmp	#LR__0290
04b60                 | LR__0277
04b60     01 00 00 FF 
04b64     00 B1 06 F6 | 	mov	local06, ##768
04b68     98 00 90 FD | 	jmp	#LR__0291
04b6c                 | LR__0278
04b6c     01 00 00 FF 
04b70     01 B1 06 F6 | 	mov	local06, ##769
04b74     8C 00 90 FD | 	jmp	#LR__0291
04b78                 | LR__0279
04b78     01 00 00 FF 
04b7c     02 B1 06 F6 | 	mov	local06, ##770
04b80     80 00 90 FD | 	jmp	#LR__0291
04b84                 | LR__0280
04b84     01 00 00 FF 
04b88     03 B1 06 F6 | 	mov	local06, ##771
04b8c     74 00 90 FD | 	jmp	#LR__0291
04b90                 | LR__0281
04b90     01 00 00 FF 
04b94     04 B1 06 F6 | 	mov	local06, ##772
04b98     68 00 90 FD | 	jmp	#LR__0291
04b9c                 | LR__0282
04b9c     01 00 00 FF 
04ba0     05 B1 06 F6 | 	mov	local06, ##773
04ba4     5C 00 90 FD | 	jmp	#LR__0291
04ba8                 | LR__0283
04ba8     01 00 00 FF 
04bac     06 B1 06 F6 | 	mov	local06, ##774
04bb0     50 00 90 FD | 	jmp	#LR__0291
04bb4                 | LR__0284
04bb4     01 00 00 FF 
04bb8     07 B1 06 F6 | 	mov	local06, ##775
04bbc     44 00 90 FD | 	jmp	#LR__0291
04bc0                 | LR__0285
04bc0     01 00 00 FF 
04bc4     08 B1 06 F6 | 	mov	local06, ##776
04bc8     38 00 90 FD | 	jmp	#LR__0291
04bcc                 | LR__0286
04bcc     01 00 00 FF 
04bd0     09 B1 06 F6 | 	mov	local06, ##777
04bd4     2C 00 90 FD | 	jmp	#LR__0291
04bd8                 | LR__0287
04bd8     01 00 00 FF 
04bdc     0A B1 06 F6 | 	mov	local06, ##778
04be0     20 00 90 FD | 	jmp	#LR__0291
04be4                 | LR__0288
04be4     01 00 00 FF 
04be8     0B B1 06 F6 | 	mov	local06, ##779
04bec     14 00 90 FD | 	jmp	#LR__0291
04bf0                 | LR__0289
04bf0     01 00 00 FF 
04bf4     0B B1 06 F6 | 	mov	local06, ##779
04bf8     08 00 90 FD | 	jmp	#LR__0291
04bfc                 | LR__0290
04bfc     00 7A 06 F6 | 	mov	result1, #0
04c00     28 00 90 FD | 	jmp	#LR__0293
04c04                 | LR__0291
04c04                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04c04     FF FF 7F FF 
04c08     FF AD 56 F2 | 	cmps	local04, ##-1 wc
04c0c     18 00 90 CD |  if_b	jmp	#LR__0292
04c10     0A AC 56 F2 | 	cmps	local04, #10 wc
04c14     56 B3 02 C6 |  if_b	mov	local07, local04
04c18     01 B2 66 C0 |  if_b	shl	local07, #1
04c1c     56 B3 02 C1 |  if_b	add	local07, local04
04c20     02 B2 66 C0 |  if_b	shl	local07, #2
04c24     59 B1 02 C1 |  if_b	add	local06, local07
04c28                 | LR__0292
04c28                 | ' return token
04c28     58 7B 02 F6 | 	mov	result1, local06
04c2c                 | LR__0293
04c2c     E7 F0 03 F6 | 	mov	ptra, fp
04c30     F2 00 A0 FD | 	call	#popregs_
04c34                 | _isnotename_ret
04c34     2D 00 64 FD | 	ret
04c38                 | 
04c38                 | ' 
04c38                 | ' ' Check if the part is a separator, return a token or 0 if not found
04c38                 | ' 
04c38                 | ' function isseparator(s as string) as ubyte
04c38                 | _isseparator
04c38     01 CA 05 F6 | 	mov	COUNT_, #1
04c3c     E8 00 A0 FD | 	call	#pushregs_
04c40                 | ' 
04c40                 | ' select case s
04c40     49 A7 02 F6 | 	mov	local01, arg01
04c44     93 01 00 FF 
04c48     D4 94 06 F6 | 	mov	arg02, ##@LR__5624
04c4c     53 93 02 F6 | 	mov	arg01, local01
04c50     B0 FD B1 FD | 	call	#__system___string_cmp
04c54     00 7A 0E F2 | 	cmp	result1, #0 wz
04c58     54 01 90 AD |  if_e	jmp	#LR__0300
04c5c     93 01 00 FF 
04c60     D6 94 06 F6 | 	mov	arg02, ##@LR__5625
04c64     53 93 02 F6 | 	mov	arg01, local01
04c68     98 FD B1 FD | 	call	#__system___string_cmp
04c6c     00 7A 0E F2 | 	cmp	result1, #0 wz
04c70     44 01 90 AD |  if_e	jmp	#LR__0301
04c74     93 01 00 FF 
04c78     D8 94 06 F6 | 	mov	arg02, ##@LR__5626
04c7c     53 93 02 F6 | 	mov	arg01, local01
04c80     80 FD B1 FD | 	call	#__system___string_cmp
04c84     00 7A 0E F2 | 	cmp	result1, #0 wz
04c88     34 01 90 AD |  if_e	jmp	#LR__0302
04c8c     93 01 00 FF 
04c90     DA 94 06 F6 | 	mov	arg02, ##@LR__5627
04c94     53 93 02 F6 | 	mov	arg01, local01
04c98     68 FD B1 FD | 	call	#__system___string_cmp
04c9c     00 7A 0E F2 | 	cmp	result1, #0 wz
04ca0     24 01 90 AD |  if_e	jmp	#LR__0303
04ca4     93 01 00 FF 
04ca8     DC 94 06 F6 | 	mov	arg02, ##@LR__5628
04cac     53 93 02 F6 | 	mov	arg01, local01
04cb0     50 FD B1 FD | 	call	#__system___string_cmp
04cb4     00 7A 0E F2 | 	cmp	result1, #0 wz
04cb8     14 01 90 AD |  if_e	jmp	#LR__0304
04cbc     93 01 00 FF 
04cc0     DE 94 06 F6 | 	mov	arg02, ##@LR__5629
04cc4     53 93 02 F6 | 	mov	arg01, local01
04cc8     38 FD B1 FD | 	call	#__system___string_cmp
04ccc     00 7A 0E F2 | 	cmp	result1, #0 wz
04cd0     04 01 90 AD |  if_e	jmp	#LR__0305
04cd4     93 01 00 FF 
04cd8     E0 94 06 F6 | 	mov	arg02, ##@LR__5630
04cdc     53 93 02 F6 | 	mov	arg01, local01
04ce0     20 FD B1 FD | 	call	#__system___string_cmp
04ce4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ce8     F4 00 90 AD |  if_e	jmp	#LR__0306
04cec     93 01 00 FF 
04cf0     E2 94 06 F6 | 	mov	arg02, ##@LR__5631
04cf4     53 93 02 F6 | 	mov	arg01, local01
04cf8     08 FD B1 FD | 	call	#__system___string_cmp
04cfc     00 7A 0E F2 | 	cmp	result1, #0 wz
04d00     E4 00 90 AD |  if_e	jmp	#LR__0307
04d04     93 01 00 FF 
04d08     E4 94 06 F6 | 	mov	arg02, ##@LR__5632
04d0c     53 93 02 F6 | 	mov	arg01, local01
04d10     F0 FC B1 FD | 	call	#__system___string_cmp
04d14     00 7A 0E F2 | 	cmp	result1, #0 wz
04d18     D4 00 90 AD |  if_e	jmp	#LR__0308
04d1c     93 01 00 FF 
04d20     E6 94 06 F6 | 	mov	arg02, ##@LR__5633
04d24     53 93 02 F6 | 	mov	arg01, local01
04d28     D8 FC B1 FD | 	call	#__system___string_cmp
04d2c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d30     C4 00 90 AD |  if_e	jmp	#LR__0309
04d34     93 01 00 FF 
04d38     E8 94 06 F6 | 	mov	arg02, ##@LR__5634
04d3c     53 93 02 F6 | 	mov	arg01, local01
04d40     C0 FC B1 FD | 	call	#__system___string_cmp
04d44     00 7A 0E F2 | 	cmp	result1, #0 wz
04d48     B4 00 90 AD |  if_e	jmp	#LR__0310
04d4c     93 01 00 FF 
04d50     EA 94 06 F6 | 	mov	arg02, ##@LR__5635
04d54     53 93 02 F6 | 	mov	arg01, local01
04d58     A8 FC B1 FD | 	call	#__system___string_cmp
04d5c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d60     A4 00 90 AD |  if_e	jmp	#LR__0311
04d64     93 01 00 FF 
04d68     EC 94 06 F6 | 	mov	arg02, ##@LR__5636
04d6c     53 93 02 F6 | 	mov	arg01, local01
04d70     90 FC B1 FD | 	call	#__system___string_cmp
04d74     00 7A 0E F2 | 	cmp	result1, #0 wz
04d78     94 00 90 AD |  if_e	jmp	#LR__0312
04d7c     93 01 00 FF 
04d80     EE 94 06 F6 | 	mov	arg02, ##@LR__5637
04d84     53 93 02 F6 | 	mov	arg01, local01
04d88     78 FC B1 FD | 	call	#__system___string_cmp
04d8c     00 7A 0E F2 | 	cmp	result1, #0 wz
04d90     84 00 90 AD |  if_e	jmp	#LR__0313
04d94     93 01 00 FF 
04d98     F0 94 06 F6 | 	mov	arg02, ##@LR__5638
04d9c     53 93 02 F6 | 	mov	arg01, local01
04da0     60 FC B1 FD | 	call	#__system___string_cmp
04da4     00 7A 0E F2 | 	cmp	result1, #0 wz
04da8     74 00 90 AD |  if_e	jmp	#LR__0314
04dac     78 00 90 FD | 	jmp	#LR__0315
04db0                 | LR__0300
04db0     01 7A 06 F6 | 	mov	result1, #1
04db4     74 00 90 FD | 	jmp	#LR__0316
04db8                 | LR__0301
04db8     02 7A 06 F6 | 	mov	result1, #2
04dbc     6C 00 90 FD | 	jmp	#LR__0316
04dc0                 | LR__0302
04dc0     1B 7A 06 F6 | 	mov	result1, #27
04dc4     64 00 90 FD | 	jmp	#LR__0316
04dc8                 | LR__0303
04dc8     11 7A 06 F6 | 	mov	result1, #17
04dcc     5C 00 90 FD | 	jmp	#LR__0316
04dd0                 | LR__0304
04dd0     05 7A 06 F6 | 	mov	result1, #5
04dd4     54 00 90 FD | 	jmp	#LR__0316
04dd8                 | LR__0305
04dd8     06 7A 06 F6 | 	mov	result1, #6
04ddc     4C 00 90 FD | 	jmp	#LR__0316
04de0                 | LR__0306
04de0     12 7A 06 F6 | 	mov	result1, #18
04de4     44 00 90 FD | 	jmp	#LR__0316
04de8                 | LR__0307
04de8     13 7A 06 F6 | 	mov	result1, #19
04dec     3C 00 90 FD | 	jmp	#LR__0316
04df0                 | LR__0308
04df0     0C 7A 06 F6 | 	mov	result1, #12
04df4     34 00 90 FD | 	jmp	#LR__0316
04df8                 | LR__0309
04df8     14 7A 06 F6 | 	mov	result1, #20
04dfc     2C 00 90 FD | 	jmp	#LR__0316
04e00                 | LR__0310
04e00     15 7A 06 F6 | 	mov	result1, #21
04e04     24 00 90 FD | 	jmp	#LR__0316
04e08                 | LR__0311
04e08     16 7A 06 F6 | 	mov	result1, #22
04e0c     1C 00 90 FD | 	jmp	#LR__0316
04e10                 | LR__0312
04e10     FF 7B 06 F6 | 	mov	result1, #511
04e14     14 00 90 FD | 	jmp	#LR__0316
04e18                 | LR__0313
04e18     0F 7A 06 F6 | 	mov	result1, #15
04e1c     0C 00 90 FD | 	jmp	#LR__0316
04e20                 | LR__0314
04e20     10 7A 06 F6 | 	mov	result1, #16
04e24     04 00 90 FD | 	jmp	#LR__0316
04e28                 | LR__0315
04e28     00 7A 06 F6 | 	mov	result1, #0
04e2c                 | LR__0316
04e2c     E7 F0 03 F6 | 	mov	ptra, fp
04e30     F2 00 A0 FD | 	call	#popregs_
04e34                 | _isseparator_ret
04e34     2D 00 64 FD | 	ret
04e38                 | 
04e38                 | ' 
04e38                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04e38                 | ' 
04e38                 | ' function iscommand(s as string) as ubyte
04e38                 | _iscommand
04e38     01 CA 05 F6 | 	mov	COUNT_, #1
04e3c     E8 00 A0 FD | 	call	#pushregs_
04e40                 | ' 
04e40                 | ' select case s
04e40     49 A7 02 F6 | 	mov	local01, arg01
04e44     93 01 00 FF 
04e48     F4 94 06 F6 | 	mov	arg02, ##@LR__5640
04e4c     53 93 02 F6 | 	mov	arg01, local01
04e50     B0 FB B1 FD | 	call	#__system___string_cmp
04e54     00 7A 0E F2 | 	cmp	result1, #0 wz
04e58     24 0D 90 AD |  if_e	jmp	#LR__0320
04e5c     93 01 00 FF 
04e60     F9 94 06 F6 | 	mov	arg02, ##@LR__5641
04e64     53 93 02 F6 | 	mov	arg01, local01
04e68     98 FB B1 FD | 	call	#__system___string_cmp
04e6c     00 7A 0E F2 | 	cmp	result1, #0 wz
04e70     14 0D 90 AD |  if_e	jmp	#LR__0321
04e74     93 01 00 FF 
04e78     FC 94 06 F6 | 	mov	arg02, ##@LR__5642
04e7c     53 93 02 F6 | 	mov	arg01, local01
04e80     80 FB B1 FD | 	call	#__system___string_cmp
04e84     00 7A 0E F2 | 	cmp	result1, #0 wz
04e88     04 0D 90 AD |  if_e	jmp	#LR__0322
04e8c     93 01 00 FF 
04e90     01 95 06 F6 | 	mov	arg02, ##@LR__5643
04e94     53 93 02 F6 | 	mov	arg01, local01
04e98     68 FB B1 FD | 	call	#__system___string_cmp
04e9c     00 7A 0E F2 | 	cmp	result1, #0 wz
04ea0     F4 0C 90 AD |  if_e	jmp	#LR__0323
04ea4     93 01 00 FF 
04ea8     05 95 06 F6 | 	mov	arg02, ##@LR__5644
04eac     53 93 02 F6 | 	mov	arg01, local01
04eb0     50 FB B1 FD | 	call	#__system___string_cmp
04eb4     00 7A 0E F2 | 	cmp	result1, #0 wz
04eb8     E4 0C 90 AD |  if_e	jmp	#LR__0324
04ebc     93 01 00 FF 
04ec0     0A 95 06 F6 | 	mov	arg02, ##@LR__5645
04ec4     53 93 02 F6 | 	mov	arg01, local01
04ec8     38 FB B1 FD | 	call	#__system___string_cmp
04ecc     00 7A 0E F2 | 	cmp	result1, #0 wz
04ed0     D4 0C 90 AD |  if_e	jmp	#LR__0325
04ed4     93 01 00 FF 
04ed8     0E 95 06 F6 | 	mov	arg02, ##@LR__5646
04edc     53 93 02 F6 | 	mov	arg01, local01
04ee0     20 FB B1 FD | 	call	#__system___string_cmp
04ee4     00 7A 0E F2 | 	cmp	result1, #0 wz
04ee8     C4 0C 90 AD |  if_e	jmp	#LR__0326
04eec     93 01 00 FF 
04ef0     11 95 06 F6 | 	mov	arg02, ##@LR__5647
04ef4     53 93 02 F6 | 	mov	arg01, local01
04ef8     08 FB B1 FD | 	call	#__system___string_cmp
04efc     00 7A 0E F2 | 	cmp	result1, #0 wz
04f00     B4 0C 90 AD |  if_e	jmp	#LR__0327
04f04     93 01 00 FF 
04f08     1C 95 06 F6 | 	mov	arg02, ##@LR__5648
04f0c     53 93 02 F6 | 	mov	arg01, local01
04f10     F0 FA B1 FD | 	call	#__system___string_cmp
04f14     00 7A 0E F2 | 	cmp	result1, #0 wz
04f18     A4 0C 90 AD |  if_e	jmp	#LR__0328
04f1c     93 01 00 FF 
04f20     20 95 06 F6 | 	mov	arg02, ##@LR__5649
04f24     53 93 02 F6 | 	mov	arg01, local01
04f28     D8 FA B1 FD | 	call	#__system___string_cmp
04f2c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f30     94 0C 90 AD |  if_e	jmp	#LR__0329
04f34     93 01 00 FF 
04f38     2A 95 06 F6 | 	mov	arg02, ##@LR__5650
04f3c     53 93 02 F6 | 	mov	arg01, local01
04f40     C0 FA B1 FD | 	call	#__system___string_cmp
04f44     00 7A 0E F2 | 	cmp	result1, #0 wz
04f48     84 0C 90 AD |  if_e	jmp	#LR__0330
04f4c     93 01 00 FF 
04f50     2E 95 06 F6 | 	mov	arg02, ##@LR__5651
04f54     53 93 02 F6 | 	mov	arg01, local01
04f58     A8 FA B1 FD | 	call	#__system___string_cmp
04f5c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f60     74 0C 90 AD |  if_e	jmp	#LR__0331
04f64     93 01 00 FF 
04f68     38 95 06 F6 | 	mov	arg02, ##@LR__5652
04f6c     53 93 02 F6 | 	mov	arg01, local01
04f70     90 FA B1 FD | 	call	#__system___string_cmp
04f74     00 7A 0E F2 | 	cmp	result1, #0 wz
04f78     64 0C 90 AD |  if_e	jmp	#LR__0332
04f7c     93 01 00 FF 
04f80     3C 95 06 F6 | 	mov	arg02, ##@LR__5653
04f84     53 93 02 F6 | 	mov	arg01, local01
04f88     78 FA B1 FD | 	call	#__system___string_cmp
04f8c     00 7A 0E F2 | 	cmp	result1, #0 wz
04f90     54 0C 90 AD |  if_e	jmp	#LR__0333
04f94     93 01 00 FF 
04f98     47 95 06 F6 | 	mov	arg02, ##@LR__5654
04f9c     53 93 02 F6 | 	mov	arg01, local01
04fa0     60 FA B1 FD | 	call	#__system___string_cmp
04fa4     00 7A 0E F2 | 	cmp	result1, #0 wz
04fa8     44 0C 90 AD |  if_e	jmp	#LR__0334
04fac     93 01 00 FF 
04fb0     4B 95 06 F6 | 	mov	arg02, ##@LR__5655
04fb4     53 93 02 F6 | 	mov	arg01, local01
04fb8     48 FA B1 FD | 	call	#__system___string_cmp
04fbc     00 7A 0E F2 | 	cmp	result1, #0 wz
04fc0     34 0C 90 AD |  if_e	jmp	#LR__0335
04fc4     93 01 00 FF 
04fc8     52 95 06 F6 | 	mov	arg02, ##@LR__5656
04fcc     53 93 02 F6 | 	mov	arg01, local01
04fd0     30 FA B1 FD | 	call	#__system___string_cmp
04fd4     00 7A 0E F2 | 	cmp	result1, #0 wz
04fd8     24 0C 90 AD |  if_e	jmp	#LR__0336
04fdc     93 01 00 FF 
04fe0     56 95 06 F6 | 	mov	arg02, ##@LR__5657
04fe4     53 93 02 F6 | 	mov	arg01, local01
04fe8     18 FA B1 FD | 	call	#__system___string_cmp
04fec     00 7A 0E F2 | 	cmp	result1, #0 wz
04ff0     14 0C 90 AD |  if_e	jmp	#LR__0337
04ff4     93 01 00 FF 
04ff8     5C 95 06 F6 | 	mov	arg02, ##@LR__5658
04ffc     53 93 02 F6 | 	mov	arg01, local01
05000     00 FA B1 FD | 	call	#__system___string_cmp
05004     00 7A 0E F2 | 	cmp	result1, #0 wz
05008     04 0C 90 AD |  if_e	jmp	#LR__0338
0500c     93 01 00 FF 
05010     62 95 06 F6 | 	mov	arg02, ##@LR__5659
05014     53 93 02 F6 | 	mov	arg01, local01
05018     E8 F9 B1 FD | 	call	#__system___string_cmp
0501c     00 7A 0E F2 | 	cmp	result1, #0 wz
05020     F4 0B 90 AD |  if_e	jmp	#LR__0339
05024     93 01 00 FF 
05028     66 95 06 F6 | 	mov	arg02, ##@LR__5660
0502c     53 93 02 F6 | 	mov	arg01, local01
05030     D0 F9 B1 FD | 	call	#__system___string_cmp
05034     00 7A 0E F2 | 	cmp	result1, #0 wz
05038     E4 0B 90 AD |  if_e	jmp	#LR__0340
0503c     93 01 00 FF 
05040     6E 95 06 F6 | 	mov	arg02, ##@LR__5661
05044     53 93 02 F6 | 	mov	arg01, local01
05048     B8 F9 B1 FD | 	call	#__system___string_cmp
0504c     00 7A 0E F2 | 	cmp	result1, #0 wz
05050     D4 0B 90 AD |  if_e	jmp	#LR__0341
05054     93 01 00 FF 
05058     74 95 06 F6 | 	mov	arg02, ##@LR__5662
0505c     53 93 02 F6 | 	mov	arg01, local01
05060     A0 F9 B1 FD | 	call	#__system___string_cmp
05064     00 7A 0E F2 | 	cmp	result1, #0 wz
05068     C4 0B 90 AD |  if_e	jmp	#LR__0342
0506c     93 01 00 FF 
05070     77 95 06 F6 | 	mov	arg02, ##@LR__5663
05074     53 93 02 F6 | 	mov	arg01, local01
05078     88 F9 B1 FD | 	call	#__system___string_cmp
0507c     00 7A 0E F2 | 	cmp	result1, #0 wz
05080     B4 0B 90 AD |  if_e	jmp	#LR__0343
05084     93 01 00 FF 
05088     7C 95 06 F6 | 	mov	arg02, ##@LR__5664
0508c     53 93 02 F6 | 	mov	arg01, local01
05090     70 F9 B1 FD | 	call	#__system___string_cmp
05094     00 7A 0E F2 | 	cmp	result1, #0 wz
05098     A4 0B 90 AD |  if_e	jmp	#LR__0344
0509c     93 01 00 FF 
050a0     83 95 06 F6 | 	mov	arg02, ##@LR__5665
050a4     53 93 02 F6 | 	mov	arg01, local01
050a8     58 F9 B1 FD | 	call	#__system___string_cmp
050ac     00 7A 0E F2 | 	cmp	result1, #0 wz
050b0     94 0B 90 AD |  if_e	jmp	#LR__0345
050b4     93 01 00 FF 
050b8     88 95 06 F6 | 	mov	arg02, ##@LR__5666
050bc     53 93 02 F6 | 	mov	arg01, local01
050c0     40 F9 B1 FD | 	call	#__system___string_cmp
050c4     00 7A 0E F2 | 	cmp	result1, #0 wz
050c8     84 0B 90 AD |  if_e	jmp	#LR__0346
050cc     93 01 00 FF 
050d0     90 95 06 F6 | 	mov	arg02, ##@LR__5667
050d4     53 93 02 F6 | 	mov	arg01, local01
050d8     28 F9 B1 FD | 	call	#__system___string_cmp
050dc     00 7A 0E F2 | 	cmp	result1, #0 wz
050e0     74 0B 90 AD |  if_e	jmp	#LR__0347
050e4     93 01 00 FF 
050e8     97 95 06 F6 | 	mov	arg02, ##@LR__5668
050ec     53 93 02 F6 | 	mov	arg01, local01
050f0     10 F9 B1 FD | 	call	#__system___string_cmp
050f4     00 7A 0E F2 | 	cmp	result1, #0 wz
050f8     64 0B 90 AD |  if_e	jmp	#LR__0348
050fc     93 01 00 FF 
05100     9E 95 06 F6 | 	mov	arg02, ##@LR__5669
05104     53 93 02 F6 | 	mov	arg01, local01
05108     F8 F8 B1 FD | 	call	#__system___string_cmp
0510c     00 7A 0E F2 | 	cmp	result1, #0 wz
05110     54 0B 90 AD |  if_e	jmp	#LR__0349
05114     93 01 00 FF 
05118     A8 95 06 F6 | 	mov	arg02, ##@LR__5670
0511c     53 93 02 F6 | 	mov	arg01, local01
05120     E0 F8 B1 FD | 	call	#__system___string_cmp
05124     00 7A 0E F2 | 	cmp	result1, #0 wz
05128     44 0B 90 AD |  if_e	jmp	#LR__0350
0512c     93 01 00 FF 
05130     AC 95 06 F6 | 	mov	arg02, ##@LR__5671
05134     53 93 02 F6 | 	mov	arg01, local01
05138     C8 F8 B1 FD | 	call	#__system___string_cmp
0513c     00 7A 0E F2 | 	cmp	result1, #0 wz
05140     34 0B 90 AD |  if_e	jmp	#LR__0351
05144     93 01 00 FF 
05148     B0 95 06 F6 | 	mov	arg02, ##@LR__5672
0514c     53 93 02 F6 | 	mov	arg01, local01
05150     B0 F8 B1 FD | 	call	#__system___string_cmp
05154     00 7A 0E F2 | 	cmp	result1, #0 wz
05158     24 0B 90 AD |  if_e	jmp	#LR__0352
0515c     93 01 00 FF 
05160     B7 95 06 F6 | 	mov	arg02, ##@LR__5673
05164     53 93 02 F6 | 	mov	arg01, local01
05168     98 F8 B1 FD | 	call	#__system___string_cmp
0516c     00 7A 0E F2 | 	cmp	result1, #0 wz
05170     14 0B 90 AD |  if_e	jmp	#LR__0353
05174     93 01 00 FF 
05178     BB 95 06 F6 | 	mov	arg02, ##@LR__5674
0517c     53 93 02 F6 | 	mov	arg01, local01
05180     80 F8 B1 FD | 	call	#__system___string_cmp
05184     00 7A 0E F2 | 	cmp	result1, #0 wz
05188     04 0B 90 AD |  if_e	jmp	#LR__0354
0518c     93 01 00 FF 
05190     BF 95 06 F6 | 	mov	arg02, ##@LR__5675
05194     53 93 02 F6 | 	mov	arg01, local01
05198     68 F8 B1 FD | 	call	#__system___string_cmp
0519c     00 7A 0E F2 | 	cmp	result1, #0 wz
051a0     F4 0A 90 AD |  if_e	jmp	#LR__0355
051a4     93 01 00 FF 
051a8     C5 95 06 F6 | 	mov	arg02, ##@LR__5676
051ac     53 93 02 F6 | 	mov	arg01, local01
051b0     50 F8 B1 FD | 	call	#__system___string_cmp
051b4     00 7A 0E F2 | 	cmp	result1, #0 wz
051b8     E4 0A 90 AD |  if_e	jmp	#LR__0356
051bc     93 01 00 FF 
051c0     CA 95 06 F6 | 	mov	arg02, ##@LR__5677
051c4     53 93 02 F6 | 	mov	arg01, local01
051c8     38 F8 B1 FD | 	call	#__system___string_cmp
051cc     00 7A 0E F2 | 	cmp	result1, #0 wz
051d0     D4 0A 90 AD |  if_e	jmp	#LR__0357
051d4     93 01 00 FF 
051d8     D1 95 06 F6 | 	mov	arg02, ##@LR__5678
051dc     53 93 02 F6 | 	mov	arg01, local01
051e0     20 F8 B1 FD | 	call	#__system___string_cmp
051e4     00 7A 0E F2 | 	cmp	result1, #0 wz
051e8     C4 0A 90 AD |  if_e	jmp	#LR__0358
051ec     93 01 00 FF 
051f0     D5 95 06 F6 | 	mov	arg02, ##@LR__5679
051f4     53 93 02 F6 | 	mov	arg01, local01
051f8     08 F8 B1 FD | 	call	#__system___string_cmp
051fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05200     B4 0A 90 AD |  if_e	jmp	#LR__0359
05204     93 01 00 FF 
05208     DA 95 06 F6 | 	mov	arg02, ##@LR__5680
0520c     53 93 02 F6 | 	mov	arg01, local01
05210     F0 F7 B1 FD | 	call	#__system___string_cmp
05214     00 7A 0E F2 | 	cmp	result1, #0 wz
05218     A4 0A 90 AD |  if_e	jmp	#LR__0360
0521c     93 01 00 FF 
05220     DE 95 06 F6 | 	mov	arg02, ##@LR__5681
05224     53 93 02 F6 | 	mov	arg01, local01
05228     D8 F7 B1 FD | 	call	#__system___string_cmp
0522c     00 7A 0E F2 | 	cmp	result1, #0 wz
05230     94 0A 90 AD |  if_e	jmp	#LR__0361
05234     93 01 00 FF 
05238     E4 95 06 F6 | 	mov	arg02, ##@LR__5682
0523c     53 93 02 F6 | 	mov	arg01, local01
05240     C0 F7 B1 FD | 	call	#__system___string_cmp
05244     00 7A 0E F2 | 	cmp	result1, #0 wz
05248     84 0A 90 AD |  if_e	jmp	#LR__0362
0524c     93 01 00 FF 
05250     E7 95 06 F6 | 	mov	arg02, ##@LR__5683
05254     53 93 02 F6 | 	mov	arg01, local01
05258     A8 F7 B1 FD | 	call	#__system___string_cmp
0525c     00 7A 0E F2 | 	cmp	result1, #0 wz
05260     74 0A 90 AD |  if_e	jmp	#LR__0363
05264     93 01 00 FF 
05268     EF 95 06 F6 | 	mov	arg02, ##@LR__5684
0526c     53 93 02 F6 | 	mov	arg01, local01
05270     90 F7 B1 FD | 	call	#__system___string_cmp
05274     00 7A 0E F2 | 	cmp	result1, #0 wz
05278     64 0A 90 AD |  if_e	jmp	#LR__0364
0527c     93 01 00 FF 
05280     F3 95 06 F6 | 	mov	arg02, ##@LR__5685
05284     53 93 02 F6 | 	mov	arg01, local01
05288     78 F7 B1 FD | 	call	#__system___string_cmp
0528c     00 7A 0E F2 | 	cmp	result1, #0 wz
05290     54 0A 90 AD |  if_e	jmp	#LR__0365
05294     93 01 00 FF 
05298     F8 95 06 F6 | 	mov	arg02, ##@LR__5686
0529c     53 93 02 F6 | 	mov	arg01, local01
052a0     60 F7 B1 FD | 	call	#__system___string_cmp
052a4     00 7A 0E F2 | 	cmp	result1, #0 wz
052a8     44 0A 90 AD |  if_e	jmp	#LR__0366
052ac     93 01 00 FF 
052b0     FC 95 06 F6 | 	mov	arg02, ##@LR__5687
052b4     53 93 02 F6 | 	mov	arg01, local01
052b8     48 F7 B1 FD | 	call	#__system___string_cmp
052bc     00 7A 0E F2 | 	cmp	result1, #0 wz
052c0     34 0A 90 AD |  if_e	jmp	#LR__0367
052c4     94 01 00 FF 
052c8     01 94 06 F6 | 	mov	arg02, ##@LR__5688
052cc     53 93 02 F6 | 	mov	arg01, local01
052d0     30 F7 B1 FD | 	call	#__system___string_cmp
052d4     00 7A 0E F2 | 	cmp	result1, #0 wz
052d8     24 0A 90 AD |  if_e	jmp	#LR__0368
052dc     94 01 00 FF 
052e0     05 94 06 F6 | 	mov	arg02, ##@LR__5689
052e4     53 93 02 F6 | 	mov	arg01, local01
052e8     18 F7 B1 FD | 	call	#__system___string_cmp
052ec     00 7A 0E F2 | 	cmp	result1, #0 wz
052f0     14 0A 90 AD |  if_e	jmp	#LR__0369
052f4     94 01 00 FF 
052f8     08 94 06 F6 | 	mov	arg02, ##@LR__5690
052fc     53 93 02 F6 | 	mov	arg01, local01
05300     00 F7 B1 FD | 	call	#__system___string_cmp
05304     00 7A 0E F2 | 	cmp	result1, #0 wz
05308     04 0A 90 AD |  if_e	jmp	#LR__0370
0530c     94 01 00 FF 
05310     0E 94 06 F6 | 	mov	arg02, ##@LR__5691
05314     53 93 02 F6 | 	mov	arg01, local01
05318     E8 F6 B1 FD | 	call	#__system___string_cmp
0531c     00 7A 0E F2 | 	cmp	result1, #0 wz
05320     F4 09 90 AD |  if_e	jmp	#LR__0371
05324     94 01 00 FF 
05328     12 94 06 F6 | 	mov	arg02, ##@LR__5692
0532c     53 93 02 F6 | 	mov	arg01, local01
05330     D0 F6 B1 FD | 	call	#__system___string_cmp
05334     00 7A 0E F2 | 	cmp	result1, #0 wz
05338     E4 09 90 AD |  if_e	jmp	#LR__0372
0533c     94 01 00 FF 
05340     16 94 06 F6 | 	mov	arg02, ##@LR__5693
05344     53 93 02 F6 | 	mov	arg01, local01
05348     B8 F6 B1 FD | 	call	#__system___string_cmp
0534c     00 7A 0E F2 | 	cmp	result1, #0 wz
05350     D4 09 90 AD |  if_e	jmp	#LR__0373
05354     94 01 00 FF 
05358     1C 94 06 F6 | 	mov	arg02, ##@LR__5694
0535c     53 93 02 F6 | 	mov	arg01, local01
05360     A0 F6 B1 FD | 	call	#__system___string_cmp
05364     00 7A 0E F2 | 	cmp	result1, #0 wz
05368     C4 09 90 AD |  if_e	jmp	#LR__0374
0536c     94 01 00 FF 
05370     21 94 06 F6 | 	mov	arg02, ##@LR__5695
05374     53 93 02 F6 | 	mov	arg01, local01
05378     88 F6 B1 FD | 	call	#__system___string_cmp
0537c     00 7A 0E F2 | 	cmp	result1, #0 wz
05380     B4 09 90 AD |  if_e	jmp	#LR__0375
05384     94 01 00 FF 
05388     24 94 06 F6 | 	mov	arg02, ##@LR__5696
0538c     53 93 02 F6 | 	mov	arg01, local01
05390     70 F6 B1 FD | 	call	#__system___string_cmp
05394     00 7A 0E F2 | 	cmp	result1, #0 wz
05398     A4 09 90 AD |  if_e	jmp	#LR__0376
0539c     94 01 00 FF 
053a0     27 94 06 F6 | 	mov	arg02, ##@LR__5697
053a4     53 93 02 F6 | 	mov	arg01, local01
053a8     58 F6 B1 FD | 	call	#__system___string_cmp
053ac     00 7A 0E F2 | 	cmp	result1, #0 wz
053b0     94 09 90 AD |  if_e	jmp	#LR__0377
053b4     94 01 00 FF 
053b8     2B 94 06 F6 | 	mov	arg02, ##@LR__5698
053bc     53 93 02 F6 | 	mov	arg01, local01
053c0     40 F6 B1 FD | 	call	#__system___string_cmp
053c4     00 7A 0E F2 | 	cmp	result1, #0 wz
053c8     84 09 90 AD |  if_e	jmp	#LR__0378
053cc     94 01 00 FF 
053d0     2E 94 06 F6 | 	mov	arg02, ##@LR__5699
053d4     53 93 02 F6 | 	mov	arg01, local01
053d8     28 F6 B1 FD | 	call	#__system___string_cmp
053dc     00 7A 0E F2 | 	cmp	result1, #0 wz
053e0     74 09 90 AD |  if_e	jmp	#LR__0379
053e4     94 01 00 FF 
053e8     34 94 06 F6 | 	mov	arg02, ##@LR__5700
053ec     53 93 02 F6 | 	mov	arg01, local01
053f0     10 F6 B1 FD | 	call	#__system___string_cmp
053f4     00 7A 0E F2 | 	cmp	result1, #0 wz
053f8     64 09 90 AD |  if_e	jmp	#LR__0380
053fc     94 01 00 FF 
05400     39 94 06 F6 | 	mov	arg02, ##@LR__5701
05404     53 93 02 F6 | 	mov	arg01, local01
05408     F8 F5 B1 FD | 	call	#__system___string_cmp
0540c     00 7A 0E F2 | 	cmp	result1, #0 wz
05410     54 09 90 AD |  if_e	jmp	#LR__0381
05414     94 01 00 FF 
05418     3C 94 06 F6 | 	mov	arg02, ##@LR__5702
0541c     53 93 02 F6 | 	mov	arg01, local01
05420     E0 F5 B1 FD | 	call	#__system___string_cmp
05424     00 7A 0E F2 | 	cmp	result1, #0 wz
05428     44 09 90 AD |  if_e	jmp	#LR__0382
0542c     94 01 00 FF 
05430     41 94 06 F6 | 	mov	arg02, ##@LR__5703
05434     53 93 02 F6 | 	mov	arg01, local01
05438     C8 F5 B1 FD | 	call	#__system___string_cmp
0543c     00 7A 0E F2 | 	cmp	result1, #0 wz
05440     34 09 90 AD |  if_e	jmp	#LR__0383
05444     94 01 00 FF 
05448     45 94 06 F6 | 	mov	arg02, ##@LR__5704
0544c     53 93 02 F6 | 	mov	arg01, local01
05450     B0 F5 B1 FD | 	call	#__system___string_cmp
05454     00 7A 0E F2 | 	cmp	result1, #0 wz
05458     24 09 90 AD |  if_e	jmp	#LR__0384
0545c     94 01 00 FF 
05460     4B 94 06 F6 | 	mov	arg02, ##@LR__5705
05464     53 93 02 F6 | 	mov	arg01, local01
05468     98 F5 B1 FD | 	call	#__system___string_cmp
0546c     00 7A 0E F2 | 	cmp	result1, #0 wz
05470     14 09 90 AD |  if_e	jmp	#LR__0385
05474     94 01 00 FF 
05478     51 94 06 F6 | 	mov	arg02, ##@LR__5706
0547c     53 93 02 F6 | 	mov	arg01, local01
05480     80 F5 B1 FD | 	call	#__system___string_cmp
05484     00 7A 0E F2 | 	cmp	result1, #0 wz
05488     04 09 90 AD |  if_e	jmp	#LR__0386
0548c     94 01 00 FF 
05490     56 94 06 F6 | 	mov	arg02, ##@LR__5707
05494     53 93 02 F6 | 	mov	arg01, local01
05498     68 F5 B1 FD | 	call	#__system___string_cmp
0549c     00 7A 0E F2 | 	cmp	result1, #0 wz
054a0     F4 08 90 AD |  if_e	jmp	#LR__0387
054a4     94 01 00 FF 
054a8     59 94 06 F6 | 	mov	arg02, ##@LR__5708
054ac     53 93 02 F6 | 	mov	arg01, local01
054b0     50 F5 B1 FD | 	call	#__system___string_cmp
054b4     00 7A 0E F2 | 	cmp	result1, #0 wz
054b8     E4 08 90 AD |  if_e	jmp	#LR__0388
054bc     94 01 00 FF 
054c0     5F 94 06 F6 | 	mov	arg02, ##@LR__5709
054c4     53 93 02 F6 | 	mov	arg01, local01
054c8     38 F5 B1 FD | 	call	#__system___string_cmp
054cc     00 7A 0E F2 | 	cmp	result1, #0 wz
054d0     D4 08 90 AD |  if_e	jmp	#LR__0389
054d4     94 01 00 FF 
054d8     63 94 06 F6 | 	mov	arg02, ##@LR__5710
054dc     53 93 02 F6 | 	mov	arg01, local01
054e0     20 F5 B1 FD | 	call	#__system___string_cmp
054e4     00 7A 0E F2 | 	cmp	result1, #0 wz
054e8     C4 08 90 AD |  if_e	jmp	#LR__0390
054ec     94 01 00 FF 
054f0     68 94 06 F6 | 	mov	arg02, ##@LR__5711
054f4     53 93 02 F6 | 	mov	arg01, local01
054f8     08 F5 B1 FD | 	call	#__system___string_cmp
054fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05500     B4 08 90 AD |  if_e	jmp	#LR__0391
05504     94 01 00 FF 
05508     6B 94 06 F6 | 	mov	arg02, ##@LR__5712
0550c     53 93 02 F6 | 	mov	arg01, local01
05510     F0 F4 B1 FD | 	call	#__system___string_cmp
05514     00 7A 0E F2 | 	cmp	result1, #0 wz
05518     A4 08 90 AD |  if_e	jmp	#LR__0392
0551c     94 01 00 FF 
05520     6E 94 06 F6 | 	mov	arg02, ##@LR__5713
05524     53 93 02 F6 | 	mov	arg01, local01
05528     D8 F4 B1 FD | 	call	#__system___string_cmp
0552c     00 7A 0E F2 | 	cmp	result1, #0 wz
05530     94 08 90 AD |  if_e	jmp	#LR__0393
05534     94 01 00 FF 
05538     73 94 06 F6 | 	mov	arg02, ##@LR__5714
0553c     53 93 02 F6 | 	mov	arg01, local01
05540     C0 F4 B1 FD | 	call	#__system___string_cmp
05544     00 7A 0E F2 | 	cmp	result1, #0 wz
05548     84 08 90 AD |  if_e	jmp	#LR__0394
0554c     94 01 00 FF 
05550     79 94 06 F6 | 	mov	arg02, ##@LR__5715
05554     53 93 02 F6 | 	mov	arg01, local01
05558     A8 F4 B1 FD | 	call	#__system___string_cmp
0555c     00 7A 0E F2 | 	cmp	result1, #0 wz
05560     74 08 90 AD |  if_e	jmp	#LR__0395
05564     94 01 00 FF 
05568     7D 94 06 F6 | 	mov	arg02, ##@LR__5716
0556c     53 93 02 F6 | 	mov	arg01, local01
05570     90 F4 B1 FD | 	call	#__system___string_cmp
05574     00 7A 0E F2 | 	cmp	result1, #0 wz
05578     64 08 90 AD |  if_e	jmp	#LR__0396
0557c     94 01 00 FF 
05580     86 94 06 F6 | 	mov	arg02, ##@LR__5717
05584     53 93 02 F6 | 	mov	arg01, local01
05588     78 F4 B1 FD | 	call	#__system___string_cmp
0558c     00 7A 0E F2 | 	cmp	result1, #0 wz
05590     54 08 90 AD |  if_e	jmp	#LR__0397
05594     94 01 00 FF 
05598     8C 94 06 F6 | 	mov	arg02, ##@LR__5718
0559c     53 93 02 F6 | 	mov	arg01, local01
055a0     60 F4 B1 FD | 	call	#__system___string_cmp
055a4     00 7A 0E F2 | 	cmp	result1, #0 wz
055a8     44 08 90 AD |  if_e	jmp	#LR__0398
055ac     94 01 00 FF 
055b0     92 94 06 F6 | 	mov	arg02, ##@LR__5719
055b4     53 93 02 F6 | 	mov	arg01, local01
055b8     48 F4 B1 FD | 	call	#__system___string_cmp
055bc     00 7A 0E F2 | 	cmp	result1, #0 wz
055c0     34 08 90 AD |  if_e	jmp	#LR__0399
055c4     94 01 00 FF 
055c8     9B 94 06 F6 | 	mov	arg02, ##@LR__5720
055cc     53 93 02 F6 | 	mov	arg01, local01
055d0     30 F4 B1 FD | 	call	#__system___string_cmp
055d4     00 7A 0E F2 | 	cmp	result1, #0 wz
055d8     24 08 90 AD |  if_e	jmp	#LR__0400
055dc     94 01 00 FF 
055e0     A5 94 06 F6 | 	mov	arg02, ##@LR__5721
055e4     53 93 02 F6 | 	mov	arg01, local01
055e8     18 F4 B1 FD | 	call	#__system___string_cmp
055ec     00 7A 0E F2 | 	cmp	result1, #0 wz
055f0     14 08 90 AD |  if_e	jmp	#LR__0401
055f4     94 01 00 FF 
055f8     AE 94 06 F6 | 	mov	arg02, ##@LR__5722
055fc     53 93 02 F6 | 	mov	arg01, local01
05600     00 F4 B1 FD | 	call	#__system___string_cmp
05604     00 7A 0E F2 | 	cmp	result1, #0 wz
05608     04 08 90 AD |  if_e	jmp	#LR__0402
0560c     94 01 00 FF 
05610     B3 94 06 F6 | 	mov	arg02, ##@LR__5723
05614     53 93 02 F6 | 	mov	arg01, local01
05618     E8 F3 B1 FD | 	call	#__system___string_cmp
0561c     00 7A 0E F2 | 	cmp	result1, #0 wz
05620     F4 07 90 AD |  if_e	jmp	#LR__0403
05624     94 01 00 FF 
05628     B6 94 06 F6 | 	mov	arg02, ##@LR__5724
0562c     53 93 02 F6 | 	mov	arg01, local01
05630     D0 F3 B1 FD | 	call	#__system___string_cmp
05634     00 7A 0E F2 | 	cmp	result1, #0 wz
05638     E4 07 90 AD |  if_e	jmp	#LR__0404
0563c     94 01 00 FF 
05640     BB 94 06 F6 | 	mov	arg02, ##@LR__5725
05644     53 93 02 F6 | 	mov	arg01, local01
05648     B8 F3 B1 FD | 	call	#__system___string_cmp
0564c     00 7A 0E F2 | 	cmp	result1, #0 wz
05650     D4 07 90 AD |  if_e	jmp	#LR__0405
05654     94 01 00 FF 
05658     BF 94 06 F6 | 	mov	arg02, ##@LR__5726
0565c     53 93 02 F6 | 	mov	arg01, local01
05660     A0 F3 B1 FD | 	call	#__system___string_cmp
05664     00 7A 0E F2 | 	cmp	result1, #0 wz
05668     C4 07 90 AD |  if_e	jmp	#LR__0406
0566c     94 01 00 FF 
05670     C4 94 06 F6 | 	mov	arg02, ##@LR__5727
05674     53 93 02 F6 | 	mov	arg01, local01
05678     88 F3 B1 FD | 	call	#__system___string_cmp
0567c     00 7A 0E F2 | 	cmp	result1, #0 wz
05680     B4 07 90 AD |  if_e	jmp	#LR__0407
05684     94 01 00 FF 
05688     C8 94 06 F6 | 	mov	arg02, ##@LR__5728
0568c     53 93 02 F6 | 	mov	arg01, local01
05690     70 F3 B1 FD | 	call	#__system___string_cmp
05694     00 7A 0E F2 | 	cmp	result1, #0 wz
05698     A4 07 90 AD |  if_e	jmp	#LR__0408
0569c     94 01 00 FF 
056a0     D1 94 06 F6 | 	mov	arg02, ##@LR__5729
056a4     53 93 02 F6 | 	mov	arg01, local01
056a8     58 F3 B1 FD | 	call	#__system___string_cmp
056ac     00 7A 0E F2 | 	cmp	result1, #0 wz
056b0     94 07 90 AD |  if_e	jmp	#LR__0409
056b4     94 01 00 FF 
056b8     D6 94 06 F6 | 	mov	arg02, ##@LR__5730
056bc     53 93 02 F6 | 	mov	arg01, local01
056c0     40 F3 B1 FD | 	call	#__system___string_cmp
056c4     00 7A 0E F2 | 	cmp	result1, #0 wz
056c8     84 07 90 AD |  if_e	jmp	#LR__0410
056cc     94 01 00 FF 
056d0     DC 94 06 F6 | 	mov	arg02, ##@LR__5731
056d4     53 93 02 F6 | 	mov	arg01, local01
056d8     28 F3 B1 FD | 	call	#__system___string_cmp
056dc     00 7A 0E F2 | 	cmp	result1, #0 wz
056e0     74 07 90 AD |  if_e	jmp	#LR__0411
056e4     94 01 00 FF 
056e8     DE 94 06 F6 | 	mov	arg02, ##@LR__5732
056ec     53 93 02 F6 | 	mov	arg01, local01
056f0     10 F3 B1 FD | 	call	#__system___string_cmp
056f4     00 7A 0E F2 | 	cmp	result1, #0 wz
056f8     64 07 90 AD |  if_e	jmp	#LR__0412
056fc     94 01 00 FF 
05700     E2 94 06 F6 | 	mov	arg02, ##@LR__5733
05704     53 93 02 F6 | 	mov	arg01, local01
05708     F8 F2 B1 FD | 	call	#__system___string_cmp
0570c     00 7A 0E F2 | 	cmp	result1, #0 wz
05710     54 07 90 AD |  if_e	jmp	#LR__0413
05714     94 01 00 FF 
05718     E6 94 06 F6 | 	mov	arg02, ##@LR__5734
0571c     53 93 02 F6 | 	mov	arg01, local01
05720     E0 F2 B1 FD | 	call	#__system___string_cmp
05724     00 7A 0E F2 | 	cmp	result1, #0 wz
05728     44 07 90 AD |  if_e	jmp	#LR__0414
0572c     94 01 00 FF 
05730     EB 94 06 F6 | 	mov	arg02, ##@LR__5735
05734     53 93 02 F6 | 	mov	arg01, local01
05738     C8 F2 B1 FD | 	call	#__system___string_cmp
0573c     00 7A 0E F2 | 	cmp	result1, #0 wz
05740     34 07 90 AD |  if_e	jmp	#LR__0415
05744     94 01 00 FF 
05748     F3 94 06 F6 | 	mov	arg02, ##@LR__5736
0574c     53 93 02 F6 | 	mov	arg01, local01
05750     B0 F2 B1 FD | 	call	#__system___string_cmp
05754     00 7A 0E F2 | 	cmp	result1, #0 wz
05758     24 07 90 AD |  if_e	jmp	#LR__0416
0575c     94 01 00 FF 
05760     F7 94 06 F6 | 	mov	arg02, ##@LR__5737
05764     53 93 02 F6 | 	mov	arg01, local01
05768     98 F2 B1 FD | 	call	#__system___string_cmp
0576c     00 7A 0E F2 | 	cmp	result1, #0 wz
05770     14 07 90 AD |  if_e	jmp	#LR__0417
05774     94 01 00 FF 
05778     F9 94 06 F6 | 	mov	arg02, ##@LR__5738
0577c     53 93 02 F6 | 	mov	arg01, local01
05780     80 F2 B1 FD | 	call	#__system___string_cmp
05784     00 7A 0E F2 | 	cmp	result1, #0 wz
05788     04 07 90 AD |  if_e	jmp	#LR__0418
0578c     94 01 00 FF 
05790     01 95 06 F6 | 	mov	arg02, ##@LR__5739
05794     53 93 02 F6 | 	mov	arg01, local01
05798     68 F2 B1 FD | 	call	#__system___string_cmp
0579c     00 7A 0E F2 | 	cmp	result1, #0 wz
057a0     F4 06 90 AD |  if_e	jmp	#LR__0419
057a4     94 01 00 FF 
057a8     10 95 06 F6 | 	mov	arg02, ##@LR__5740
057ac     53 93 02 F6 | 	mov	arg01, local01
057b0     50 F2 B1 FD | 	call	#__system___string_cmp
057b4     00 7A 0E F2 | 	cmp	result1, #0 wz
057b8     E4 06 90 AD |  if_e	jmp	#LR__0420
057bc     94 01 00 FF 
057c0     14 95 06 F6 | 	mov	arg02, ##@LR__5741
057c4     53 93 02 F6 | 	mov	arg01, local01
057c8     38 F2 B1 FD | 	call	#__system___string_cmp
057cc     00 7A 0E F2 | 	cmp	result1, #0 wz
057d0     D4 06 90 AD |  if_e	jmp	#LR__0421
057d4     94 01 00 FF 
057d8     1B 95 06 F6 | 	mov	arg02, ##@LR__5742
057dc     53 93 02 F6 | 	mov	arg01, local01
057e0     20 F2 B1 FD | 	call	#__system___string_cmp
057e4     00 7A 0E F2 | 	cmp	result1, #0 wz
057e8     C4 06 90 AD |  if_e	jmp	#LR__0422
057ec     94 01 00 FF 
057f0     1F 95 06 F6 | 	mov	arg02, ##@LR__5743
057f4     53 93 02 F6 | 	mov	arg01, local01
057f8     08 F2 B1 FD | 	call	#__system___string_cmp
057fc     00 7A 0E F2 | 	cmp	result1, #0 wz
05800     B4 06 90 AD |  if_e	jmp	#LR__0423
05804     94 01 00 FF 
05808     22 95 06 F6 | 	mov	arg02, ##@LR__5744
0580c     53 93 02 F6 | 	mov	arg01, local01
05810     F0 F1 B1 FD | 	call	#__system___string_cmp
05814     00 7A 0E F2 | 	cmp	result1, #0 wz
05818     A4 06 90 AD |  if_e	jmp	#LR__0424
0581c     94 01 00 FF 
05820     27 95 06 F6 | 	mov	arg02, ##@LR__5745
05824     53 93 02 F6 | 	mov	arg01, local01
05828     D8 F1 B1 FD | 	call	#__system___string_cmp
0582c     00 7A 0E F2 | 	cmp	result1, #0 wz
05830     94 06 90 AD |  if_e	jmp	#LR__0425
05834     94 01 00 FF 
05838     2A 95 06 F6 | 	mov	arg02, ##@LR__5746
0583c     53 93 02 F6 | 	mov	arg01, local01
05840     C0 F1 B1 FD | 	call	#__system___string_cmp
05844     00 7A 0E F2 | 	cmp	result1, #0 wz
05848     84 06 90 AD |  if_e	jmp	#LR__0426
0584c     94 01 00 FF 
05850     33 95 06 F6 | 	mov	arg02, ##@LR__5747
05854     53 93 02 F6 | 	mov	arg01, local01
05858     A8 F1 B1 FD | 	call	#__system___string_cmp
0585c     00 7A 0E F2 | 	cmp	result1, #0 wz
05860     74 06 90 AD |  if_e	jmp	#LR__0427
05864     94 01 00 FF 
05868     37 95 06 F6 | 	mov	arg02, ##@LR__5748
0586c     53 93 02 F6 | 	mov	arg01, local01
05870     90 F1 B1 FD | 	call	#__system___string_cmp
05874     00 7A 0E F2 | 	cmp	result1, #0 wz
05878     64 06 90 AD |  if_e	jmp	#LR__0428
0587c     94 01 00 FF 
05880     40 95 06 F6 | 	mov	arg02, ##@LR__5749
05884     53 93 02 F6 | 	mov	arg01, local01
05888     78 F1 B1 FD | 	call	#__system___string_cmp
0588c     00 7A 0E F2 | 	cmp	result1, #0 wz
05890     54 06 90 AD |  if_e	jmp	#LR__0429
05894     94 01 00 FF 
05898     44 95 06 F6 | 	mov	arg02, ##@LR__5750
0589c     53 93 02 F6 | 	mov	arg01, local01
058a0     60 F1 B1 FD | 	call	#__system___string_cmp
058a4     00 7A 0E F2 | 	cmp	result1, #0 wz
058a8     44 06 90 AD |  if_e	jmp	#LR__0430
058ac     94 01 00 FF 
058b0     4D 95 06 F6 | 	mov	arg02, ##@LR__5751
058b4     53 93 02 F6 | 	mov	arg01, local01
058b8     48 F1 B1 FD | 	call	#__system___string_cmp
058bc     00 7A 0E F2 | 	cmp	result1, #0 wz
058c0     34 06 90 AD |  if_e	jmp	#LR__0431
058c4     94 01 00 FF 
058c8     51 95 06 F6 | 	mov	arg02, ##@LR__5752
058cc     53 93 02 F6 | 	mov	arg01, local01
058d0     30 F1 B1 FD | 	call	#__system___string_cmp
058d4     00 7A 0E F2 | 	cmp	result1, #0 wz
058d8     24 06 90 AD |  if_e	jmp	#LR__0432
058dc     94 01 00 FF 
058e0     58 95 06 F6 | 	mov	arg02, ##@LR__5753
058e4     53 93 02 F6 | 	mov	arg01, local01
058e8     18 F1 B1 FD | 	call	#__system___string_cmp
058ec     00 7A 0E F2 | 	cmp	result1, #0 wz
058f0     14 06 90 AD |  if_e	jmp	#LR__0433
058f4     94 01 00 FF 
058f8     5C 95 06 F6 | 	mov	arg02, ##@LR__5754
058fc     53 93 02 F6 | 	mov	arg01, local01
05900     00 F1 B1 FD | 	call	#__system___string_cmp
05904     00 7A 0E F2 | 	cmp	result1, #0 wz
05908     04 06 90 AD |  if_e	jmp	#LR__0434
0590c     94 01 00 FF 
05910     63 95 06 F6 | 	mov	arg02, ##@LR__5755
05914     53 93 02 F6 | 	mov	arg01, local01
05918     E8 F0 B1 FD | 	call	#__system___string_cmp
0591c     00 7A 0E F2 | 	cmp	result1, #0 wz
05920     F4 05 90 AD |  if_e	jmp	#LR__0435
05924     94 01 00 FF 
05928     67 95 06 F6 | 	mov	arg02, ##@LR__5756
0592c     53 93 02 F6 | 	mov	arg01, local01
05930     D0 F0 B1 FD | 	call	#__system___string_cmp
05934     00 7A 0E F2 | 	cmp	result1, #0 wz
05938     E4 05 90 AD |  if_e	jmp	#LR__0436
0593c     94 01 00 FF 
05940     6E 95 06 F6 | 	mov	arg02, ##@LR__5757
05944     53 93 02 F6 | 	mov	arg01, local01
05948     B8 F0 B1 FD | 	call	#__system___string_cmp
0594c     00 7A 0E F2 | 	cmp	result1, #0 wz
05950     D4 05 90 AD |  if_e	jmp	#LR__0437
05954     94 01 00 FF 
05958     72 95 06 F6 | 	mov	arg02, ##@LR__5758
0595c     53 93 02 F6 | 	mov	arg01, local01
05960     A0 F0 B1 FD | 	call	#__system___string_cmp
05964     00 7A 0E F2 | 	cmp	result1, #0 wz
05968     C4 05 90 AD |  if_e	jmp	#LR__0438
0596c     94 01 00 FF 
05970     7D 95 06 F6 | 	mov	arg02, ##@LR__5759
05974     53 93 02 F6 | 	mov	arg01, local01
05978     88 F0 B1 FD | 	call	#__system___string_cmp
0597c     00 7A 0E F2 | 	cmp	result1, #0 wz
05980     B4 05 90 AD |  if_e	jmp	#LR__0439
05984     94 01 00 FF 
05988     81 95 06 F6 | 	mov	arg02, ##@LR__5760
0598c     53 93 02 F6 | 	mov	arg01, local01
05990     70 F0 B1 FD | 	call	#__system___string_cmp
05994     00 7A 0E F2 | 	cmp	result1, #0 wz
05998     A4 05 90 AD |  if_e	jmp	#LR__0440
0599c     94 01 00 FF 
059a0     88 95 06 F6 | 	mov	arg02, ##@LR__5761
059a4     53 93 02 F6 | 	mov	arg01, local01
059a8     58 F0 B1 FD | 	call	#__system___string_cmp
059ac     00 7A 0E F2 | 	cmp	result1, #0 wz
059b0     94 05 90 AD |  if_e	jmp	#LR__0441
059b4     94 01 00 FF 
059b8     8C 95 06 F6 | 	mov	arg02, ##@LR__5762
059bc     53 93 02 F6 | 	mov	arg01, local01
059c0     40 F0 B1 FD | 	call	#__system___string_cmp
059c4     00 7A 0E F2 | 	cmp	result1, #0 wz
059c8     84 05 90 AD |  if_e	jmp	#LR__0442
059cc     94 01 00 FF 
059d0     94 95 06 F6 | 	mov	arg02, ##@LR__5763
059d4     53 93 02 F6 | 	mov	arg01, local01
059d8     28 F0 B1 FD | 	call	#__system___string_cmp
059dc     00 7A 0E F2 | 	cmp	result1, #0 wz
059e0     74 05 90 AD |  if_e	jmp	#LR__0443
059e4     94 01 00 FF 
059e8     98 95 06 F6 | 	mov	arg02, ##@LR__5764
059ec     53 93 02 F6 | 	mov	arg01, local01
059f0     10 F0 B1 FD | 	call	#__system___string_cmp
059f4     00 7A 0E F2 | 	cmp	result1, #0 wz
059f8     64 05 90 AD |  if_e	jmp	#LR__0444
059fc     94 01 00 FF 
05a00     9F 95 06 F6 | 	mov	arg02, ##@LR__5765
05a04     53 93 02 F6 | 	mov	arg01, local01
05a08     F8 EF B1 FD | 	call	#__system___string_cmp
05a0c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a10     54 05 90 AD |  if_e	jmp	#LR__0445
05a14     94 01 00 FF 
05a18     A6 95 06 F6 | 	mov	arg02, ##@LR__5766
05a1c     53 93 02 F6 | 	mov	arg01, local01
05a20     E0 EF B1 FD | 	call	#__system___string_cmp
05a24     00 7A 0E F2 | 	cmp	result1, #0 wz
05a28     44 05 90 AD |  if_e	jmp	#LR__0446
05a2c     94 01 00 FF 
05a30     AA 95 06 F6 | 	mov	arg02, ##@LR__5767
05a34     53 93 02 F6 | 	mov	arg01, local01
05a38     C8 EF B1 FD | 	call	#__system___string_cmp
05a3c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a40     34 05 90 AD |  if_e	jmp	#LR__0447
05a44     94 01 00 FF 
05a48     B0 95 06 F6 | 	mov	arg02, ##@LR__5768
05a4c     53 93 02 F6 | 	mov	arg01, local01
05a50     B0 EF B1 FD | 	call	#__system___string_cmp
05a54     00 7A 0E F2 | 	cmp	result1, #0 wz
05a58     24 05 90 AD |  if_e	jmp	#LR__0448
05a5c     94 01 00 FF 
05a60     B4 95 06 F6 | 	mov	arg02, ##@LR__5769
05a64     53 93 02 F6 | 	mov	arg01, local01
05a68     98 EF B1 FD | 	call	#__system___string_cmp
05a6c     00 7A 0E F2 | 	cmp	result1, #0 wz
05a70     14 05 90 AD |  if_e	jmp	#LR__0449
05a74     94 01 00 FF 
05a78     BB 95 06 F6 | 	mov	arg02, ##@LR__5770
05a7c     53 93 02 F6 | 	mov	arg01, local01
05a80     80 EF B1 FD | 	call	#__system___string_cmp
05a84     00 7A 0E F2 | 	cmp	result1, #0 wz
05a88     04 05 90 AD |  if_e	jmp	#LR__0450
05a8c     94 01 00 FF 
05a90     C0 95 06 F6 | 	mov	arg02, ##@LR__5771
05a94     53 93 02 F6 | 	mov	arg01, local01
05a98     68 EF B1 FD | 	call	#__system___string_cmp
05a9c     00 7A 0E F2 | 	cmp	result1, #0 wz
05aa0     F4 04 90 AD |  if_e	jmp	#LR__0451
05aa4     94 01 00 FF 
05aa8     C5 95 06 F6 | 	mov	arg02, ##@LR__5772
05aac     53 93 02 F6 | 	mov	arg01, local01
05ab0     50 EF B1 FD | 	call	#__system___string_cmp
05ab4     00 7A 0E F2 | 	cmp	result1, #0 wz
05ab8     E4 04 90 AD |  if_e	jmp	#LR__0452
05abc     94 01 00 FF 
05ac0     CC 95 06 F6 | 	mov	arg02, ##@LR__5773
05ac4     53 93 02 F6 | 	mov	arg01, local01
05ac8     38 EF B1 FD | 	call	#__system___string_cmp
05acc     00 7A 0E F2 | 	cmp	result1, #0 wz
05ad0     D4 04 90 AD |  if_e	jmp	#LR__0453
05ad4     94 01 00 FF 
05ad8     CF 95 06 F6 | 	mov	arg02, ##@LR__5774
05adc     53 93 02 F6 | 	mov	arg01, local01
05ae0     20 EF B1 FD | 	call	#__system___string_cmp
05ae4     00 7A 0E F2 | 	cmp	result1, #0 wz
05ae8     C4 04 90 AD |  if_e	jmp	#LR__0454
05aec     94 01 00 FF 
05af0     D9 95 06 F6 | 	mov	arg02, ##@LR__5775
05af4     53 93 02 F6 | 	mov	arg01, local01
05af8     08 EF B1 FD | 	call	#__system___string_cmp
05afc     00 7A 0E F2 | 	cmp	result1, #0 wz
05b00     B4 04 90 AD |  if_e	jmp	#LR__0455
05b04     94 01 00 FF 
05b08     DD 95 06 F6 | 	mov	arg02, ##@LR__5776
05b0c     53 93 02 F6 | 	mov	arg01, local01
05b10     F0 EE B1 FD | 	call	#__system___string_cmp
05b14     00 7A 0E F2 | 	cmp	result1, #0 wz
05b18     A4 04 90 AD |  if_e	jmp	#LR__0456
05b1c     94 01 00 FF 
05b20     E5 95 06 F6 | 	mov	arg02, ##@LR__5777
05b24     53 93 02 F6 | 	mov	arg01, local01
05b28     D8 EE B1 FD | 	call	#__system___string_cmp
05b2c     00 7A 0E F2 | 	cmp	result1, #0 wz
05b30     94 04 90 AD |  if_e	jmp	#LR__0457
05b34     94 01 00 FF 
05b38     E9 95 06 F6 | 	mov	arg02, ##@LR__5778
05b3c     53 93 02 F6 | 	mov	arg01, local01
05b40     C0 EE B1 FD | 	call	#__system___string_cmp
05b44     00 7A 0E F2 | 	cmp	result1, #0 wz
05b48     84 04 90 AD |  if_e	jmp	#LR__0458
05b4c     94 01 00 FF 
05b50     EF 95 06 F6 | 	mov	arg02, ##@LR__5779
05b54     53 93 02 F6 | 	mov	arg01, local01
05b58     A8 EE B1 FD | 	call	#__system___string_cmp
05b5c     00 7A 0E F2 | 	cmp	result1, #0 wz
05b60     74 04 90 AD |  if_e	jmp	#LR__0459
05b64     94 01 00 FF 
05b68     F5 95 06 F6 | 	mov	arg02, ##@LR__5780
05b6c     53 93 02 F6 | 	mov	arg01, local01
05b70     90 EE B1 FD | 	call	#__system___string_cmp
05b74     00 7A 0E F2 | 	cmp	result1, #0 wz
05b78     64 04 90 AD |  if_e	jmp	#LR__0460
05b7c     68 04 90 FD | 	jmp	#LR__0461
05b80                 | LR__0320
05b80     5C 7A 06 F6 | 	mov	result1, #92
05b84     64 04 90 FD | 	jmp	#LR__0462
05b88                 | LR__0321
05b88     5C 7A 06 F6 | 	mov	result1, #92
05b8c     5C 04 90 FD | 	jmp	#LR__0462
05b90                 | LR__0322
05b90     B9 7A 06 F6 | 	mov	result1, #185
05b94     54 04 90 FD | 	jmp	#LR__0462
05b98                 | LR__0323
05b98     47 7A 06 F6 | 	mov	result1, #71
05b9c     4C 04 90 FD | 	jmp	#LR__0462
05ba0                 | LR__0324
05ba0     59 7A 06 F6 | 	mov	result1, #89
05ba4     44 04 90 FD | 	jmp	#LR__0462
05ba8                 | LR__0325
05ba8     59 7A 06 F6 | 	mov	result1, #89
05bac     3C 04 90 FD | 	jmp	#LR__0462
05bb0                 | LR__0326
05bb0     C3 7A 06 F6 | 	mov	result1, #195
05bb4     34 04 90 FD | 	jmp	#LR__0462
05bb8                 | LR__0327
05bb8     AE 7A 06 F6 | 	mov	result1, #174
05bbc     2C 04 90 FD | 	jmp	#LR__0462
05bc0                 | LR__0328
05bc0     AE 7A 06 F6 | 	mov	result1, #174
05bc4     24 04 90 FD | 	jmp	#LR__0462
05bc8                 | LR__0329
05bc8     B1 7A 06 F6 | 	mov	result1, #177
05bcc     1C 04 90 FD | 	jmp	#LR__0462
05bd0                 | LR__0330
05bd0     B1 7A 06 F6 | 	mov	result1, #177
05bd4     14 04 90 FD | 	jmp	#LR__0462
05bd8                 | LR__0331
05bd8     AF 7A 06 F6 | 	mov	result1, #175
05bdc     0C 04 90 FD | 	jmp	#LR__0462
05be0                 | LR__0332
05be0     AF 7A 06 F6 | 	mov	result1, #175
05be4     04 04 90 FD | 	jmp	#LR__0462
05be8                 | LR__0333
05be8     B0 7A 06 F6 | 	mov	result1, #176
05bec     FC 03 90 FD | 	jmp	#LR__0462
05bf0                 | LR__0334
05bf0     B0 7A 06 F6 | 	mov	result1, #176
05bf4     F4 03 90 FD | 	jmp	#LR__0462
05bf8                 | LR__0335
05bf8     45 7A 06 F6 | 	mov	result1, #69
05bfc     EC 03 90 FD | 	jmp	#LR__0462
05c00                 | LR__0336
05c00     45 7A 06 F6 | 	mov	result1, #69
05c04     E4 03 90 FD | 	jmp	#LR__0462
05c08                 | LR__0337
05c08     69 7A 06 F6 | 	mov	result1, #105
05c0c     DC 03 90 FD | 	jmp	#LR__0462
05c10                 | LR__0338
05c10     B4 7A 06 F6 | 	mov	result1, #180
05c14     D4 03 90 FD | 	jmp	#LR__0462
05c18                 | LR__0339
05c18     40 7A 06 F6 | 	mov	result1, #64
05c1c     CC 03 90 FD | 	jmp	#LR__0462
05c20                 | LR__0340
05c20     CF 7A 06 F6 | 	mov	result1, #207
05c24     C4 03 90 FD | 	jmp	#LR__0462
05c28                 | LR__0341
05c28     49 7A 06 F6 | 	mov	result1, #73
05c2c     BC 03 90 FD | 	jmp	#LR__0462
05c30                 | LR__0342
05c30     49 7A 06 F6 | 	mov	result1, #73
05c34     B4 03 90 FD | 	jmp	#LR__0462
05c38                 | LR__0343
05c38     C4 7A 06 F6 | 	mov	result1, #196
05c3c     AC 03 90 FD | 	jmp	#LR__0462
05c40                 | LR__0344
05c40     68 7A 06 F6 | 	mov	result1, #104
05c44     A4 03 90 FD | 	jmp	#LR__0462
05c48                 | LR__0345
05c48     B7 7A 06 F6 | 	mov	result1, #183
05c4c     9C 03 90 FD | 	jmp	#LR__0462
05c50                 | LR__0346
05c50     D9 7A 06 F6 | 	mov	result1, #217
05c54     94 03 90 FD | 	jmp	#LR__0462
05c58                 | LR__0347
05c58     73 7A 06 F6 | 	mov	result1, #115
05c5c     8C 03 90 FD | 	jmp	#LR__0462
05c60                 | LR__0348
05c60     74 7A 06 F6 | 	mov	result1, #116
05c64     84 03 90 FD | 	jmp	#LR__0462
05c68                 | LR__0349
05c68     6C 7A 06 F6 | 	mov	result1, #108
05c6c     7C 03 90 FD | 	jmp	#LR__0462
05c70                 | LR__0350
05c70     6C 7A 06 F6 | 	mov	result1, #108
05c74     74 03 90 FD | 	jmp	#LR__0462
05c78                 | LR__0351
05c78     89 7A 06 F6 | 	mov	result1, #137
05c7c     6C 03 90 FD | 	jmp	#LR__0462
05c80                 | LR__0352
05c80     C2 7A 06 F6 | 	mov	result1, #194
05c84     64 03 90 FD | 	jmp	#LR__0462
05c88                 | LR__0353
05c88     72 7A 06 F6 | 	mov	result1, #114
05c8c     5C 03 90 FD | 	jmp	#LR__0462
05c90                 | LR__0354
05c90     5D 7A 06 F6 | 	mov	result1, #93
05c94     54 03 90 FD | 	jmp	#LR__0462
05c98                 | LR__0355
05c98     96 7A 06 F6 | 	mov	result1, #150
05c9c     4C 03 90 FD | 	jmp	#LR__0462
05ca0                 | LR__0356
05ca0     43 7A 06 F6 | 	mov	result1, #67
05ca4     44 03 90 FD | 	jmp	#LR__0462
05ca8                 | LR__0357
05ca8     43 7A 06 F6 | 	mov	result1, #67
05cac     3C 03 90 FD | 	jmp	#LR__0462
05cb0                 | LR__0358
05cb0     43 7A 06 F6 | 	mov	result1, #67
05cb4     34 03 90 FD | 	jmp	#LR__0462
05cb8                 | LR__0359
05cb8     5A 7A 06 F6 | 	mov	result1, #90
05cbc     2C 03 90 FD | 	jmp	#LR__0462
05cc0                 | LR__0360
05cc0     AB 7A 06 F6 | 	mov	result1, #171
05cc4     24 03 90 FD | 	jmp	#LR__0462
05cc8                 | LR__0361
05cc8     BD 7A 06 F6 | 	mov	result1, #189
05ccc     1C 03 90 FD | 	jmp	#LR__0462
05cd0                 | LR__0362
05cd0     BD 7A 06 F6 | 	mov	result1, #189
05cd4     14 03 90 FD | 	jmp	#LR__0462
05cd8                 | LR__0363
05cd8     46 7A 06 F6 | 	mov	result1, #70
05cdc     0C 03 90 FD | 	jmp	#LR__0462
05ce0                 | LR__0364
05ce0     46 7A 06 F6 | 	mov	result1, #70
05ce4     04 03 90 FD | 	jmp	#LR__0462
05ce8                 | LR__0365
05ce8     71 7A 06 F6 | 	mov	result1, #113
05cec     FC 02 90 FD | 	jmp	#LR__0462
05cf0                 | LR__0366
05cf0     71 7A 06 F6 | 	mov	result1, #113
05cf4     F4 02 90 FD | 	jmp	#LR__0462
05cf8                 | LR__0367
05cf8     60 7A 06 F6 | 	mov	result1, #96
05cfc     EC 02 90 FD | 	jmp	#LR__0462
05d00                 | LR__0368
05d00     4A 7A 06 F6 | 	mov	result1, #74
05d04     E4 02 90 FD | 	jmp	#LR__0462
05d08                 | LR__0369
05d08     4A 7A 06 F6 | 	mov	result1, #74
05d0c     DC 02 90 FD | 	jmp	#LR__0462
05d10                 | LR__0370
05d10     48 7A 06 F6 | 	mov	result1, #72
05d14     D4 02 90 FD | 	jmp	#LR__0462
05d18                 | LR__0371
05d18     48 7A 06 F6 | 	mov	result1, #72
05d1c     CC 02 90 FD | 	jmp	#LR__0462
05d20                 | LR__0372
05d20     BB 7A 06 F6 | 	mov	result1, #187
05d24     C4 02 90 FD | 	jmp	#LR__0462
05d28                 | LR__0373
05d28     A9 7A 06 F6 | 	mov	result1, #169
05d2c     BC 02 90 FD | 	jmp	#LR__0462
05d30                 | LR__0374
05d30     4E 7A 06 F6 | 	mov	result1, #78
05d34     B4 02 90 FD | 	jmp	#LR__0462
05d38                 | LR__0375
05d38     4E 7A 06 F6 | 	mov	result1, #78
05d3c     AC 02 90 FD | 	jmp	#LR__0462
05d40                 | LR__0376
05d40     58 7A 06 F6 | 	mov	result1, #88
05d44     A4 02 90 FD | 	jmp	#LR__0462
05d48                 | LR__0377
05d48     5F 7A 06 F6 | 	mov	result1, #95
05d4c     9C 02 90 FD | 	jmp	#LR__0462
05d50                 | LR__0378
05d50     5F 7A 06 F6 | 	mov	result1, #95
05d54     94 02 90 FD | 	jmp	#LR__0462
05d58                 | LR__0379
05d58     B5 7A 06 F6 | 	mov	result1, #181
05d5c     8C 02 90 FD | 	jmp	#LR__0462
05d60                 | LR__0380
05d60     4C 7A 06 F6 | 	mov	result1, #76
05d64     84 02 90 FD | 	jmp	#LR__0462
05d68                 | LR__0381
05d68     4C 7A 06 F6 | 	mov	result1, #76
05d6c     7C 02 90 FD | 	jmp	#LR__0462
05d70                 | LR__0382
05d70     52 7A 06 F6 | 	mov	result1, #82
05d74     74 02 90 FD | 	jmp	#LR__0462
05d78                 | LR__0383
05d78     52 7A 06 F6 | 	mov	result1, #82
05d7c     6C 02 90 FD | 	jmp	#LR__0462
05d80                 | LR__0384
05d80     97 7A 06 F6 | 	mov	result1, #151
05d84     64 02 90 FD | 	jmp	#LR__0462
05d88                 | LR__0385
05d88     C6 7A 06 F6 | 	mov	result1, #198
05d8c     5C 02 90 FD | 	jmp	#LR__0462
05d90                 | LR__0386
05d90     61 7A 06 F6 | 	mov	result1, #97
05d94     54 02 90 FD | 	jmp	#LR__0462
05d98                 | LR__0387
05d98     61 7A 06 F6 | 	mov	result1, #97
05d9c     4C 02 90 FD | 	jmp	#LR__0462
05da0                 | LR__0388
05da0     63 7A 06 F6 | 	mov	result1, #99
05da4     44 02 90 FD | 	jmp	#LR__0462
05da8                 | LR__0389
05da8     41 7A 06 F6 | 	mov	result1, #65
05dac     3C 02 90 FD | 	jmp	#LR__0462
05db0                 | LR__0390
05db0     4B 7A 06 F6 | 	mov	result1, #75
05db4     34 02 90 FD | 	jmp	#LR__0462
05db8                 | LR__0391
05db8     4B 7A 06 F6 | 	mov	result1, #75
05dbc     2C 02 90 FD | 	jmp	#LR__0462
05dc0                 | LR__0392
05dc0     C1 7A 06 F6 | 	mov	result1, #193
05dc4     24 02 90 FD | 	jmp	#LR__0462
05dc8                 | LR__0393
05dc8     B3 7A 06 F6 | 	mov	result1, #179
05dcc     1C 02 90 FD | 	jmp	#LR__0462
05dd0                 | LR__0394
05dd0     5E 7A 06 F6 | 	mov	result1, #94
05dd4     14 02 90 FD | 	jmp	#LR__0462
05dd8                 | LR__0395
05dd8     5E 7A 06 F6 | 	mov	result1, #94
05ddc     0C 02 90 FD | 	jmp	#LR__0462
05de0                 | LR__0396
05de0     7C 7A 06 F6 | 	mov	result1, #124
05de4     04 02 90 FD | 	jmp	#LR__0462
05de8                 | LR__0397
05de8     7E 7A 06 F6 | 	mov	result1, #126
05dec     FC 01 90 FD | 	jmp	#LR__0462
05df0                 | LR__0398
05df0     7D 7A 06 F6 | 	mov	result1, #125
05df4     F4 01 90 FD | 	jmp	#LR__0462
05df8                 | LR__0399
05df8     7F 7A 06 F6 | 	mov	result1, #127
05dfc     EC 01 90 FD | 	jmp	#LR__0462
05e00                 | LR__0400
05e00     80 7A 06 F6 | 	mov	result1, #128
05e04     E4 01 90 FD | 	jmp	#LR__0462
05e08                 | LR__0401
05e08     55 7A 06 F6 | 	mov	result1, #85
05e0c     DC 01 90 FD | 	jmp	#LR__0462
05e10                 | LR__0402
05e10     75 7A 06 F6 | 	mov	result1, #117
05e14     D4 01 90 FD | 	jmp	#LR__0462
05e18                 | LR__0403
05e18     75 7A 06 F6 | 	mov	result1, #117
05e1c     CC 01 90 FD | 	jmp	#LR__0462
05e20                 | LR__0404
05e20     42 7A 06 F6 | 	mov	result1, #66
05e24     C4 01 90 FD | 	jmp	#LR__0462
05e28                 | LR__0405
05e28     42 7A 06 F6 | 	mov	result1, #66
05e2c     BC 01 90 FD | 	jmp	#LR__0462
05e30                 | LR__0406
05e30     95 7A 06 F6 | 	mov	result1, #149
05e34     B4 01 90 FD | 	jmp	#LR__0462
05e38                 | LR__0407
05e38     AC 7A 06 F6 | 	mov	result1, #172
05e3c     AC 01 90 FD | 	jmp	#LR__0462
05e40                 | LR__0408
05e40     81 7A 06 F6 | 	mov	result1, #129
05e44     A4 01 90 FD | 	jmp	#LR__0462
05e48                 | LR__0409
05e48     81 7A 06 F6 | 	mov	result1, #129
05e4c     9C 01 90 FD | 	jmp	#LR__0462
05e50                 | LR__0410
05e50     44 7A 06 F6 | 	mov	result1, #68
05e54     94 01 90 FD | 	jmp	#LR__0462
05e58                 | LR__0411
05e58     44 7A 06 F6 | 	mov	result1, #68
05e5c     8C 01 90 FD | 	jmp	#LR__0462
05e60                 | LR__0412
05e60     BC 7A 06 F6 | 	mov	result1, #188
05e64     84 01 90 FD | 	jmp	#LR__0462
05e68                 | LR__0413
05e68     88 7A 06 F6 | 	mov	result1, #136
05e6c     7C 01 90 FD | 	jmp	#LR__0462
05e70                 | LR__0414
05e70     B6 7A 06 F6 | 	mov	result1, #182
05e74     74 01 90 FD | 	jmp	#LR__0462
05e78                 | LR__0415
05e78     92 7A 06 F6 | 	mov	result1, #146
05e7c     6C 01 90 FD | 	jmp	#LR__0462
05e80                 | LR__0416
05e80     BE 7A 06 F6 | 	mov	result1, #190
05e84     64 01 90 FD | 	jmp	#LR__0462
05e88                 | LR__0417
05e88     BE 7A 06 F6 | 	mov	result1, #190
05e8c     5C 01 90 FD | 	jmp	#LR__0462
05e90                 | LR__0418
05e90     C7 7A 06 F6 | 	mov	result1, #199
05e94     54 01 90 FD | 	jmp	#LR__0462
05e98                 | LR__0419
05e98     D4 7A 06 F6 | 	mov	result1, #212
05e9c     4C 01 90 FD | 	jmp	#LR__0462
05ea0                 | LR__0420
05ea0     D4 7A 06 F6 | 	mov	result1, #212
05ea4     44 01 90 FD | 	jmp	#LR__0462
05ea8                 | LR__0421
05ea8     AA 7A 06 F6 | 	mov	result1, #170
05eac     3C 01 90 FD | 	jmp	#LR__0462
05eb0                 | LR__0422
05eb0     4D 7A 06 F6 | 	mov	result1, #77
05eb4     34 01 90 FD | 	jmp	#LR__0462
05eb8                 | LR__0423
05eb8     4D 7A 06 F6 | 	mov	result1, #77
05ebc     2C 01 90 FD | 	jmp	#LR__0462
05ec0                 | LR__0424
05ec0     51 7A 06 F6 | 	mov	result1, #81
05ec4     24 01 90 FD | 	jmp	#LR__0462
05ec8                 | LR__0425
05ec8     51 7A 06 F6 | 	mov	result1, #81
05ecc     1C 01 90 FD | 	jmp	#LR__0462
05ed0                 | LR__0426
05ed0     D2 7A 06 F6 | 	mov	result1, #210
05ed4     14 01 90 FD | 	jmp	#LR__0462
05ed8                 | LR__0427
05ed8     D2 7A 06 F6 | 	mov	result1, #210
05edc     0C 01 90 FD | 	jmp	#LR__0462
05ee0                 | LR__0428
05ee0     DA 7A 06 F6 | 	mov	result1, #218
05ee4     04 01 90 FD | 	jmp	#LR__0462
05ee8                 | LR__0429
05ee8     DA 7A 06 F6 | 	mov	result1, #218
05eec     FC 00 90 FD | 	jmp	#LR__0462
05ef0                 | LR__0430
05ef0     8E 7A 06 F6 | 	mov	result1, #142
05ef4     F4 00 90 FD | 	jmp	#LR__0462
05ef8                 | LR__0431
05ef8     8E 7A 06 F6 | 	mov	result1, #142
05efc     EC 00 90 FD | 	jmp	#LR__0462
05f00                 | LR__0432
05f00     90 7A 06 F6 | 	mov	result1, #144
05f04     E4 00 90 FD | 	jmp	#LR__0462
05f08                 | LR__0433
05f08     90 7A 06 F6 | 	mov	result1, #144
05f0c     DC 00 90 FD | 	jmp	#LR__0462
05f10                 | LR__0434
05f10     8D 7A 06 F6 | 	mov	result1, #141
05f14     D4 00 90 FD | 	jmp	#LR__0462
05f18                 | LR__0435
05f18     8D 7A 06 F6 | 	mov	result1, #141
05f1c     CC 00 90 FD | 	jmp	#LR__0462
05f20                 | LR__0436
05f20     8C 7A 06 F6 | 	mov	result1, #140
05f24     C4 00 90 FD | 	jmp	#LR__0462
05f28                 | LR__0437
05f28     8C 7A 06 F6 | 	mov	result1, #140
05f2c     BC 00 90 FD | 	jmp	#LR__0462
05f30                 | LR__0438
05f30     91 7A 06 F6 | 	mov	result1, #145
05f34     B4 00 90 FD | 	jmp	#LR__0462
05f38                 | LR__0439
05f38     91 7A 06 F6 | 	mov	result1, #145
05f3c     AC 00 90 FD | 	jmp	#LR__0462
05f40                 | LR__0440
05f40     8B 7A 06 F6 | 	mov	result1, #139
05f44     A4 00 90 FD | 	jmp	#LR__0462
05f48                 | LR__0441
05f48     8B 7A 06 F6 | 	mov	result1, #139
05f4c     9C 00 90 FD | 	jmp	#LR__0462
05f50                 | LR__0442
05f50     8F 7A 06 F6 | 	mov	result1, #143
05f54     94 00 90 FD | 	jmp	#LR__0462
05f58                 | LR__0443
05f58     8F 7A 06 F6 | 	mov	result1, #143
05f5c     8C 00 90 FD | 	jmp	#LR__0462
05f60                 | LR__0444
05f60     8F 7A 06 F6 | 	mov	result1, #143
05f64     84 00 90 FD | 	jmp	#LR__0462
05f68                 | LR__0445
05f68     B2 7A 06 F6 | 	mov	result1, #178
05f6c     7C 00 90 FD | 	jmp	#LR__0462
05f70                 | LR__0446
05f70     B2 7A 06 F6 | 	mov	result1, #178
05f74     74 00 90 FD | 	jmp	#LR__0462
05f78                 | LR__0447
05f78     75 7A 06 F6 | 	mov	result1, #117
05f7c     6C 00 90 FD | 	jmp	#LR__0462
05f80                 | LR__0448
05f80     75 7A 06 F6 | 	mov	result1, #117
05f84     64 00 90 FD | 	jmp	#LR__0462
05f88                 | LR__0449
05f88     6D 7A 06 F6 | 	mov	result1, #109
05f8c     5C 00 90 FD | 	jmp	#LR__0462
05f90                 | LR__0450
05f90     6D 7A 06 F6 | 	mov	result1, #109
05f94     54 00 90 FD | 	jmp	#LR__0462
05f98                 | LR__0451
05f98     5B 7A 06 F6 | 	mov	result1, #91
05f9c     4C 00 90 FD | 	jmp	#LR__0462
05fa0                 | LR__0452
05fa0     56 7A 06 F6 | 	mov	result1, #86
05fa4     44 00 90 FD | 	jmp	#LR__0462
05fa8                 | LR__0453
05fa8     56 7A 06 F6 | 	mov	result1, #86
05fac     3C 00 90 FD | 	jmp	#LR__0462
05fb0                 | LR__0454
05fb0     70 7A 06 F6 | 	mov	result1, #112
05fb4     34 00 90 FD | 	jmp	#LR__0462
05fb8                 | LR__0455
05fb8     70 7A 06 F6 | 	mov	result1, #112
05fbc     2C 00 90 FD | 	jmp	#LR__0462
05fc0                 | LR__0456
05fc0     57 7A 06 F6 | 	mov	result1, #87
05fc4     24 00 90 FD | 	jmp	#LR__0462
05fc8                 | LR__0457
05fc8     57 7A 06 F6 | 	mov	result1, #87
05fcc     1C 00 90 FD | 	jmp	#LR__0462
05fd0                 | LR__0458
05fd0     79 7A 06 F6 | 	mov	result1, #121
05fd4     14 00 90 FD | 	jmp	#LR__0462
05fd8                 | LR__0459
05fd8     77 7A 06 F6 | 	mov	result1, #119
05fdc     0C 00 90 FD | 	jmp	#LR__0462
05fe0                 | LR__0460
05fe0     78 7A 06 F6 | 	mov	result1, #120
05fe4     04 00 90 FD | 	jmp	#LR__0462
05fe8                 | LR__0461
05fe8     00 7A 06 F6 | 	mov	result1, #0
05fec                 | LR__0462
05fec     E7 F0 03 F6 | 	mov	ptra, fp
05ff0     F2 00 A0 FD | 	call	#popregs_
05ff4                 | _iscommand_ret
05ff4     2D 00 64 FD | 	ret
05ff8                 | 
05ff8                 | ' 
05ff8                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05ff8                 | ' 
05ff8                 | ' function isfunction(s as string) as ubyte
05ff8                 | _isfunction
05ff8     01 CA 05 F6 | 	mov	COUNT_, #1
05ffc     E8 00 A0 FD | 	call	#pushregs_
06000                 | ' 
06000                 | ' select case s
06000     49 A7 02 F6 | 	mov	local01, arg01
06004     94 01 00 FF 
06008     FB 95 06 F6 | 	mov	arg02, ##@LR__5781
0600c     53 93 02 F6 | 	mov	arg01, local01
06010     F0 E9 B1 FD | 	call	#__system___string_cmp
06014     00 7A 0E F2 | 	cmp	result1, #0 wz
06018     EC 05 90 AD |  if_e	jmp	#LR__0470
0601c     94 01 00 FF 
06020     FF 95 06 F6 | 	mov	arg02, ##@LR__5782
06024     53 93 02 F6 | 	mov	arg01, local01
06028     D8 E9 B1 FD | 	call	#__system___string_cmp
0602c     00 7A 0E F2 | 	cmp	result1, #0 wz
06030     DC 05 90 AD |  if_e	jmp	#LR__0471
06034     95 01 00 FF 
06038     04 94 06 F6 | 	mov	arg02, ##@LR__5783
0603c     53 93 02 F6 | 	mov	arg01, local01
06040     C0 E9 B1 FD | 	call	#__system___string_cmp
06044     00 7A 0E F2 | 	cmp	result1, #0 wz
06048     CC 05 90 AD |  if_e	jmp	#LR__0472
0604c     95 01 00 FF 
06050     08 94 06 F6 | 	mov	arg02, ##@LR__5784
06054     53 93 02 F6 | 	mov	arg01, local01
06058     A8 E9 B1 FD | 	call	#__system___string_cmp
0605c     00 7A 0E F2 | 	cmp	result1, #0 wz
06060     BC 05 90 AD |  if_e	jmp	#LR__0473
06064     95 01 00 FF 
06068     0D 94 06 F6 | 	mov	arg02, ##@LR__5785
0606c     53 93 02 F6 | 	mov	arg01, local01
06070     90 E9 B1 FD | 	call	#__system___string_cmp
06074     00 7A 0E F2 | 	cmp	result1, #0 wz
06078     AC 05 90 AD |  if_e	jmp	#LR__0474
0607c     95 01 00 FF 
06080     11 94 06 F6 | 	mov	arg02, ##@LR__5786
06084     53 93 02 F6 | 	mov	arg01, local01
06088     78 E9 B1 FD | 	call	#__system___string_cmp
0608c     00 7A 0E F2 | 	cmp	result1, #0 wz
06090     9C 05 90 AD |  if_e	jmp	#LR__0475
06094     95 01 00 FF 
06098     16 94 06 F6 | 	mov	arg02, ##@LR__5787
0609c     53 93 02 F6 | 	mov	arg01, local01
060a0     60 E9 B1 FD | 	call	#__system___string_cmp
060a4     00 7A 0E F2 | 	cmp	result1, #0 wz
060a8     8C 05 90 AD |  if_e	jmp	#LR__0476
060ac     95 01 00 FF 
060b0     1A 94 06 F6 | 	mov	arg02, ##@LR__5788
060b4     53 93 02 F6 | 	mov	arg01, local01
060b8     48 E9 B1 FD | 	call	#__system___string_cmp
060bc     00 7A 0E F2 | 	cmp	result1, #0 wz
060c0     7C 05 90 AD |  if_e	jmp	#LR__0477
060c4     95 01 00 FF 
060c8     1F 94 06 F6 | 	mov	arg02, ##@LR__5789
060cc     53 93 02 F6 | 	mov	arg01, local01
060d0     30 E9 B1 FD | 	call	#__system___string_cmp
060d4     00 7A 0E F2 | 	cmp	result1, #0 wz
060d8     6C 05 90 AD |  if_e	jmp	#LR__0478
060dc     95 01 00 FF 
060e0     24 94 06 F6 | 	mov	arg02, ##@LR__5790
060e4     53 93 02 F6 | 	mov	arg01, local01
060e8     18 E9 B1 FD | 	call	#__system___string_cmp
060ec     00 7A 0E F2 | 	cmp	result1, #0 wz
060f0     5C 05 90 AD |  if_e	jmp	#LR__0479
060f4     95 01 00 FF 
060f8     2C 94 06 F6 | 	mov	arg02, ##@LR__5791
060fc     53 93 02 F6 | 	mov	arg01, local01
06100     00 E9 B1 FD | 	call	#__system___string_cmp
06104     00 7A 0E F2 | 	cmp	result1, #0 wz
06108     4C 05 90 AD |  if_e	jmp	#LR__0480
0610c     95 01 00 FF 
06110     30 94 06 F6 | 	mov	arg02, ##@LR__5792
06114     53 93 02 F6 | 	mov	arg01, local01
06118     E8 E8 B1 FD | 	call	#__system___string_cmp
0611c     00 7A 0E F2 | 	cmp	result1, #0 wz
06120     3C 05 90 AD |  if_e	jmp	#LR__0481
06124     95 01 00 FF 
06128     36 94 06 F6 | 	mov	arg02, ##@LR__5793
0612c     53 93 02 F6 | 	mov	arg01, local01
06130     D0 E8 B1 FD | 	call	#__system___string_cmp
06134     00 7A 0E F2 | 	cmp	result1, #0 wz
06138     2C 05 90 AD |  if_e	jmp	#LR__0482
0613c     95 01 00 FF 
06140     40 94 06 F6 | 	mov	arg02, ##@LR__5794
06144     53 93 02 F6 | 	mov	arg01, local01
06148     B8 E8 B1 FD | 	call	#__system___string_cmp
0614c     00 7A 0E F2 | 	cmp	result1, #0 wz
06150     1C 05 90 AD |  if_e	jmp	#LR__0483
06154     95 01 00 FF 
06158     49 94 06 F6 | 	mov	arg02, ##@LR__5795
0615c     53 93 02 F6 | 	mov	arg01, local01
06160     A0 E8 B1 FD | 	call	#__system___string_cmp
06164     00 7A 0E F2 | 	cmp	result1, #0 wz
06168     0C 05 90 AD |  if_e	jmp	#LR__0484
0616c     95 01 00 FF 
06170     52 94 06 F6 | 	mov	arg02, ##@LR__5796
06174     53 93 02 F6 | 	mov	arg01, local01
06178     88 E8 B1 FD | 	call	#__system___string_cmp
0617c     00 7A 0E F2 | 	cmp	result1, #0 wz
06180     FC 04 90 AD |  if_e	jmp	#LR__0485
06184     95 01 00 FF 
06188     56 94 06 F6 | 	mov	arg02, ##@LR__5797
0618c     53 93 02 F6 | 	mov	arg01, local01
06190     70 E8 B1 FD | 	call	#__system___string_cmp
06194     00 7A 0E F2 | 	cmp	result1, #0 wz
06198     EC 04 90 AD |  if_e	jmp	#LR__0486
0619c     95 01 00 FF 
061a0     5A 94 06 F6 | 	mov	arg02, ##@LR__5798
061a4     53 93 02 F6 | 	mov	arg01, local01
061a8     58 E8 B1 FD | 	call	#__system___string_cmp
061ac     00 7A 0E F2 | 	cmp	result1, #0 wz
061b0     DC 04 90 AD |  if_e	jmp	#LR__0487
061b4     95 01 00 FF 
061b8     5E 94 06 F6 | 	mov	arg02, ##@LR__5799
061bc     53 93 02 F6 | 	mov	arg01, local01
061c0     40 E8 B1 FD | 	call	#__system___string_cmp
061c4     00 7A 0E F2 | 	cmp	result1, #0 wz
061c8     CC 04 90 AD |  if_e	jmp	#LR__0488
061cc     95 01 00 FF 
061d0     67 94 06 F6 | 	mov	arg02, ##@LR__5800
061d4     53 93 02 F6 | 	mov	arg01, local01
061d8     28 E8 B1 FD | 	call	#__system___string_cmp
061dc     00 7A 0E F2 | 	cmp	result1, #0 wz
061e0     BC 04 90 AD |  if_e	jmp	#LR__0489
061e4     95 01 00 FF 
061e8     70 94 06 F6 | 	mov	arg02, ##@LR__5801
061ec     53 93 02 F6 | 	mov	arg01, local01
061f0     10 E8 B1 FD | 	call	#__system___string_cmp
061f4     00 7A 0E F2 | 	cmp	result1, #0 wz
061f8     AC 04 90 AD |  if_e	jmp	#LR__0490
061fc     95 01 00 FF 
06200     74 94 06 F6 | 	mov	arg02, ##@LR__5802
06204     53 93 02 F6 | 	mov	arg01, local01
06208     F8 E7 B1 FD | 	call	#__system___string_cmp
0620c     00 7A 0E F2 | 	cmp	result1, #0 wz
06210     9C 04 90 AD |  if_e	jmp	#LR__0491
06214     95 01 00 FF 
06218     82 94 06 F6 | 	mov	arg02, ##@LR__5803
0621c     53 93 02 F6 | 	mov	arg01, local01
06220     E0 E7 B1 FD | 	call	#__system___string_cmp
06224     00 7A 0E F2 | 	cmp	result1, #0 wz
06228     8C 04 90 AD |  if_e	jmp	#LR__0492
0622c     95 01 00 FF 
06230     8F 94 06 F6 | 	mov	arg02, ##@LR__5804
06234     53 93 02 F6 | 	mov	arg01, local01
06238     C8 E7 B1 FD | 	call	#__system___string_cmp
0623c     00 7A 0E F2 | 	cmp	result1, #0 wz
06240     7C 04 90 AD |  if_e	jmp	#LR__0493
06244     95 01 00 FF 
06248     9B 94 06 F6 | 	mov	arg02, ##@LR__5805
0624c     53 93 02 F6 | 	mov	arg01, local01
06250     B0 E7 B1 FD | 	call	#__system___string_cmp
06254     00 7A 0E F2 | 	cmp	result1, #0 wz
06258     6C 04 90 AD |  if_e	jmp	#LR__0494
0625c     95 01 00 FF 
06260     A3 94 06 F6 | 	mov	arg02, ##@LR__5806
06264     53 93 02 F6 | 	mov	arg01, local01
06268     98 E7 B1 FD | 	call	#__system___string_cmp
0626c     00 7A 0E F2 | 	cmp	result1, #0 wz
06270     5C 04 90 AD |  if_e	jmp	#LR__0495
06274     95 01 00 FF 
06278     A7 94 06 F6 | 	mov	arg02, ##@LR__5807
0627c     53 93 02 F6 | 	mov	arg01, local01
06280     80 E7 B1 FD | 	call	#__system___string_cmp
06284     00 7A 0E F2 | 	cmp	result1, #0 wz
06288     4C 04 90 AD |  if_e	jmp	#LR__0496
0628c     95 01 00 FF 
06290     AC 94 06 F6 | 	mov	arg02, ##@LR__5808
06294     53 93 02 F6 | 	mov	arg01, local01
06298     68 E7 B1 FD | 	call	#__system___string_cmp
0629c     00 7A 0E F2 | 	cmp	result1, #0 wz
062a0     3C 04 90 AD |  if_e	jmp	#LR__0497
062a4     95 01 00 FF 
062a8     B3 94 06 F6 | 	mov	arg02, ##@LR__5809
062ac     53 93 02 F6 | 	mov	arg01, local01
062b0     50 E7 B1 FD | 	call	#__system___string_cmp
062b4     00 7A 0E F2 | 	cmp	result1, #0 wz
062b8     2C 04 90 AD |  if_e	jmp	#LR__0498
062bc     95 01 00 FF 
062c0     B7 94 06 F6 | 	mov	arg02, ##@LR__5810
062c4     53 93 02 F6 | 	mov	arg01, local01
062c8     38 E7 B1 FD | 	call	#__system___string_cmp
062cc     00 7A 0E F2 | 	cmp	result1, #0 wz
062d0     1C 04 90 AD |  if_e	jmp	#LR__0499
062d4     95 01 00 FF 
062d8     BD 94 06 F6 | 	mov	arg02, ##@LR__5811
062dc     53 93 02 F6 | 	mov	arg01, local01
062e0     20 E7 B1 FD | 	call	#__system___string_cmp
062e4     00 7A 0E F2 | 	cmp	result1, #0 wz
062e8     0C 04 90 AD |  if_e	jmp	#LR__0500
062ec     95 01 00 FF 
062f0     C1 94 06 F6 | 	mov	arg02, ##@LR__5812
062f4     53 93 02 F6 | 	mov	arg01, local01
062f8     08 E7 B1 FD | 	call	#__system___string_cmp
062fc     00 7A 0E F2 | 	cmp	result1, #0 wz
06300     FC 03 90 AD |  if_e	jmp	#LR__0501
06304     95 01 00 FF 
06308     C5 94 06 F6 | 	mov	arg02, ##@LR__5813
0630c     53 93 02 F6 | 	mov	arg01, local01
06310     F0 E6 B1 FD | 	call	#__system___string_cmp
06314     00 7A 0E F2 | 	cmp	result1, #0 wz
06318     EC 03 90 AD |  if_e	jmp	#LR__0502
0631c     95 01 00 FF 
06320     CB 94 06 F6 | 	mov	arg02, ##@LR__5814
06324     53 93 02 F6 | 	mov	arg01, local01
06328     D8 E6 B1 FD | 	call	#__system___string_cmp
0632c     00 7A 0E F2 | 	cmp	result1, #0 wz
06330     DC 03 90 AD |  if_e	jmp	#LR__0503
06334     95 01 00 FF 
06338     D2 94 06 F6 | 	mov	arg02, ##@LR__5815
0633c     53 93 02 F6 | 	mov	arg01, local01
06340     C0 E6 B1 FD | 	call	#__system___string_cmp
06344     00 7A 0E F2 | 	cmp	result1, #0 wz
06348     CC 03 90 AD |  if_e	jmp	#LR__0504
0634c     95 01 00 FF 
06350     D8 94 06 F6 | 	mov	arg02, ##@LR__5816
06354     53 93 02 F6 | 	mov	arg01, local01
06358     A8 E6 B1 FD | 	call	#__system___string_cmp
0635c     00 7A 0E F2 | 	cmp	result1, #0 wz
06360     BC 03 90 AD |  if_e	jmp	#LR__0505
06364     95 01 00 FF 
06368     DD 94 06 F6 | 	mov	arg02, ##@LR__5817
0636c     53 93 02 F6 | 	mov	arg01, local01
06370     90 E6 B1 FD | 	call	#__system___string_cmp
06374     00 7A 0E F2 | 	cmp	result1, #0 wz
06378     AC 03 90 AD |  if_e	jmp	#LR__0506
0637c     95 01 00 FF 
06380     E4 94 06 F6 | 	mov	arg02, ##@LR__5818
06384     53 93 02 F6 | 	mov	arg01, local01
06388     78 E6 B1 FD | 	call	#__system___string_cmp
0638c     00 7A 0E F2 | 	cmp	result1, #0 wz
06390     9C 03 90 AD |  if_e	jmp	#LR__0507
06394     95 01 00 FF 
06398     EB 94 06 F6 | 	mov	arg02, ##@LR__5819
0639c     53 93 02 F6 | 	mov	arg01, local01
063a0     60 E6 B1 FD | 	call	#__system___string_cmp
063a4     00 7A 0E F2 | 	cmp	result1, #0 wz
063a8     8C 03 90 AD |  if_e	jmp	#LR__0508
063ac     95 01 00 FF 
063b0     F2 94 06 F6 | 	mov	arg02, ##@LR__5820
063b4     53 93 02 F6 | 	mov	arg01, local01
063b8     48 E6 B1 FD | 	call	#__system___string_cmp
063bc     00 7A 0E F2 | 	cmp	result1, #0 wz
063c0     7C 03 90 AD |  if_e	jmp	#LR__0509
063c4     95 01 00 FF 
063c8     F9 94 06 F6 | 	mov	arg02, ##@LR__5821
063cc     53 93 02 F6 | 	mov	arg01, local01
063d0     30 E6 B1 FD | 	call	#__system___string_cmp
063d4     00 7A 0E F2 | 	cmp	result1, #0 wz
063d8     6C 03 90 AD |  if_e	jmp	#LR__0510
063dc     95 01 00 FF 
063e0     FE 94 06 F6 | 	mov	arg02, ##@LR__5822
063e4     53 93 02 F6 | 	mov	arg01, local01
063e8     18 E6 B1 FD | 	call	#__system___string_cmp
063ec     00 7A 0E F2 | 	cmp	result1, #0 wz
063f0     5C 03 90 AD |  if_e	jmp	#LR__0511
063f4     95 01 00 FF 
063f8     03 95 06 F6 | 	mov	arg02, ##@LR__5823
063fc     53 93 02 F6 | 	mov	arg01, local01
06400     00 E6 B1 FD | 	call	#__system___string_cmp
06404     00 7A 0E F2 | 	cmp	result1, #0 wz
06408     4C 03 90 AD |  if_e	jmp	#LR__0512
0640c     95 01 00 FF 
06410     08 95 06 F6 | 	mov	arg02, ##@LR__5824
06414     53 93 02 F6 | 	mov	arg01, local01
06418     E8 E5 B1 FD | 	call	#__system___string_cmp
0641c     00 7A 0E F2 | 	cmp	result1, #0 wz
06420     3C 03 90 AD |  if_e	jmp	#LR__0513
06424     95 01 00 FF 
06428     0D 95 06 F6 | 	mov	arg02, ##@LR__5825
0642c     53 93 02 F6 | 	mov	arg01, local01
06430     D0 E5 B1 FD | 	call	#__system___string_cmp
06434     00 7A 0E F2 | 	cmp	result1, #0 wz
06438     2C 03 90 AD |  if_e	jmp	#LR__0514
0643c     95 01 00 FF 
06440     12 95 06 F6 | 	mov	arg02, ##@LR__5826
06444     53 93 02 F6 | 	mov	arg01, local01
06448     B8 E5 B1 FD | 	call	#__system___string_cmp
0644c     00 7A 0E F2 | 	cmp	result1, #0 wz
06450     1C 03 90 AD |  if_e	jmp	#LR__0515
06454     95 01 00 FF 
06458     18 95 06 F6 | 	mov	arg02, ##@LR__5827
0645c     53 93 02 F6 | 	mov	arg01, local01
06460     A0 E5 B1 FD | 	call	#__system___string_cmp
06464     00 7A 0E F2 | 	cmp	result1, #0 wz
06468     0C 03 90 AD |  if_e	jmp	#LR__0516
0646c     95 01 00 FF 
06470     1E 95 06 F6 | 	mov	arg02, ##@LR__5828
06474     53 93 02 F6 | 	mov	arg01, local01
06478     88 E5 B1 FD | 	call	#__system___string_cmp
0647c     00 7A 0E F2 | 	cmp	result1, #0 wz
06480     FC 02 90 AD |  if_e	jmp	#LR__0517
06484     95 01 00 FF 
06488     24 95 06 F6 | 	mov	arg02, ##@LR__5829
0648c     53 93 02 F6 | 	mov	arg01, local01
06490     70 E5 B1 FD | 	call	#__system___string_cmp
06494     00 7A 0E F2 | 	cmp	result1, #0 wz
06498     EC 02 90 AD |  if_e	jmp	#LR__0518
0649c     95 01 00 FF 
064a0     29 95 06 F6 | 	mov	arg02, ##@LR__5830
064a4     53 93 02 F6 | 	mov	arg01, local01
064a8     58 E5 B1 FD | 	call	#__system___string_cmp
064ac     00 7A 0E F2 | 	cmp	result1, #0 wz
064b0     DC 02 90 AD |  if_e	jmp	#LR__0519
064b4     95 01 00 FF 
064b8     2E 95 06 F6 | 	mov	arg02, ##@LR__5831
064bc     53 93 02 F6 | 	mov	arg01, local01
064c0     40 E5 B1 FD | 	call	#__system___string_cmp
064c4     00 7A 0E F2 | 	cmp	result1, #0 wz
064c8     CC 02 90 AD |  if_e	jmp	#LR__0520
064cc     95 01 00 FF 
064d0     36 95 06 F6 | 	mov	arg02, ##@LR__5832
064d4     53 93 02 F6 | 	mov	arg01, local01
064d8     28 E5 B1 FD | 	call	#__system___string_cmp
064dc     00 7A 0E F2 | 	cmp	result1, #0 wz
064e0     BC 02 90 AD |  if_e	jmp	#LR__0521
064e4     95 01 00 FF 
064e8     3C 95 06 F6 | 	mov	arg02, ##@LR__5833
064ec     53 93 02 F6 | 	mov	arg01, local01
064f0     10 E5 B1 FD | 	call	#__system___string_cmp
064f4     00 7A 0E F2 | 	cmp	result1, #0 wz
064f8     AC 02 90 AD |  if_e	jmp	#LR__0522
064fc     95 01 00 FF 
06500     43 95 06 F6 | 	mov	arg02, ##@LR__5834
06504     53 93 02 F6 | 	mov	arg01, local01
06508     F8 E4 B1 FD | 	call	#__system___string_cmp
0650c     00 7A 0E F2 | 	cmp	result1, #0 wz
06510     9C 02 90 AD |  if_e	jmp	#LR__0523
06514     95 01 00 FF 
06518     49 95 06 F6 | 	mov	arg02, ##@LR__5835
0651c     53 93 02 F6 | 	mov	arg01, local01
06520     E0 E4 B1 FD | 	call	#__system___string_cmp
06524     00 7A 0E F2 | 	cmp	result1, #0 wz
06528     8C 02 90 AD |  if_e	jmp	#LR__0524
0652c     95 01 00 FF 
06530     4F 95 06 F6 | 	mov	arg02, ##@LR__5836
06534     53 93 02 F6 | 	mov	arg01, local01
06538     C8 E4 B1 FD | 	call	#__system___string_cmp
0653c     00 7A 0E F2 | 	cmp	result1, #0 wz
06540     7C 02 90 AD |  if_e	jmp	#LR__0525
06544     95 01 00 FF 
06548     53 95 06 F6 | 	mov	arg02, ##@LR__5837
0654c     53 93 02 F6 | 	mov	arg01, local01
06550     B0 E4 B1 FD | 	call	#__system___string_cmp
06554     00 7A 0E F2 | 	cmp	result1, #0 wz
06558     6C 02 90 AD |  if_e	jmp	#LR__0526
0655c     95 01 00 FF 
06560     57 95 06 F6 | 	mov	arg02, ##@LR__5838
06564     53 93 02 F6 | 	mov	arg01, local01
06568     98 E4 B1 FD | 	call	#__system___string_cmp
0656c     00 7A 0E F2 | 	cmp	result1, #0 wz
06570     5C 02 90 AD |  if_e	jmp	#LR__0527
06574     95 01 00 FF 
06578     5B 95 06 F6 | 	mov	arg02, ##@LR__5839
0657c     53 93 02 F6 | 	mov	arg01, local01
06580     80 E4 B1 FD | 	call	#__system___string_cmp
06584     00 7A 0E F2 | 	cmp	result1, #0 wz
06588     4C 02 90 AD |  if_e	jmp	#LR__0528
0658c     95 01 00 FF 
06590     61 95 06 F6 | 	mov	arg02, ##@LR__5840
06594     53 93 02 F6 | 	mov	arg01, local01
06598     68 E4 B1 FD | 	call	#__system___string_cmp
0659c     00 7A 0E F2 | 	cmp	result1, #0 wz
065a0     3C 02 90 AD |  if_e	jmp	#LR__0529
065a4     95 01 00 FF 
065a8     67 95 06 F6 | 	mov	arg02, ##@LR__5841
065ac     53 93 02 F6 | 	mov	arg01, local01
065b0     50 E4 B1 FD | 	call	#__system___string_cmp
065b4     00 7A 0E F2 | 	cmp	result1, #0 wz
065b8     2C 02 90 AD |  if_e	jmp	#LR__0530
065bc     95 01 00 FF 
065c0     6C 95 06 F6 | 	mov	arg02, ##@LR__5842
065c4     53 93 02 F6 | 	mov	arg01, local01
065c8     38 E4 B1 FD | 	call	#__system___string_cmp
065cc     00 7A 0E F2 | 	cmp	result1, #0 wz
065d0     1C 02 90 AD |  if_e	jmp	#LR__0531
065d4     95 01 00 FF 
065d8     70 95 06 F6 | 	mov	arg02, ##@LR__5843
065dc     53 93 02 F6 | 	mov	arg01, local01
065e0     20 E4 B1 FD | 	call	#__system___string_cmp
065e4     00 7A 0E F2 | 	cmp	result1, #0 wz
065e8     0C 02 90 AD |  if_e	jmp	#LR__0532
065ec     95 01 00 FF 
065f0     74 95 06 F6 | 	mov	arg02, ##@LR__5844
065f4     53 93 02 F6 | 	mov	arg01, local01
065f8     08 E4 B1 FD | 	call	#__system___string_cmp
065fc     00 7A 0E F2 | 	cmp	result1, #0 wz
06600     FC 01 90 AD |  if_e	jmp	#LR__0533
06604     00 02 90 FD | 	jmp	#LR__0534
06608                 | LR__0470
06608     9E 7A 06 F6 | 	mov	result1, #158
0660c     FC 01 90 FD | 	jmp	#LR__0535
06610                 | LR__0471
06610     85 7A 06 F6 | 	mov	result1, #133
06614     F4 01 90 FD | 	jmp	#LR__0535
06618                 | LR__0472
06618     9B 7A 06 F6 | 	mov	result1, #155
0661c     EC 01 90 FD | 	jmp	#LR__0535
06620                 | LR__0473
06620     9B 7A 06 F6 | 	mov	result1, #155
06624     E4 01 90 FD | 	jmp	#LR__0535
06628                 | LR__0474
06628     A7 7A 06 F6 | 	mov	result1, #167
0662c     DC 01 90 FD | 	jmp	#LR__0535
06630                 | LR__0475
06630     84 7A 06 F6 | 	mov	result1, #132
06634     D4 01 90 FD | 	jmp	#LR__0535
06638                 | LR__0476
06638     86 7A 06 F6 | 	mov	result1, #134
0663c     CC 01 90 FD | 	jmp	#LR__0535
06640                 | LR__0477
06640     A2 7A 06 F6 | 	mov	result1, #162
06644     C4 01 90 FD | 	jmp	#LR__0535
06648                 | LR__0478
06648     9F 7A 06 F6 | 	mov	result1, #159
0664c     BC 01 90 FD | 	jmp	#LR__0535
06650                 | LR__0479
06650     C0 7A 06 F6 | 	mov	result1, #192
06654     B4 01 90 FD | 	jmp	#LR__0535
06658                 | LR__0480
06658     82 7A 06 F6 | 	mov	result1, #130
0665c     AC 01 90 FD | 	jmp	#LR__0535
06660                 | LR__0481
06660     99 7A 06 F6 | 	mov	result1, #153
06664     A4 01 90 FD | 	jmp	#LR__0535
06668                 | LR__0482
06668     D7 7A 06 F6 | 	mov	result1, #215
0666c     9C 01 90 FD | 	jmp	#LR__0535
06670                 | LR__0483
06670     D8 7A 06 F6 | 	mov	result1, #216
06674     94 01 90 FD | 	jmp	#LR__0535
06678                 | LR__0484
06678     C5 7A 06 F6 | 	mov	result1, #197
0667c     8C 01 90 FD | 	jmp	#LR__0535
06680                 | LR__0485
06680     C5 7A 06 F6 | 	mov	result1, #197
06684     84 01 90 FD | 	jmp	#LR__0535
06688                 | LR__0486
06688     9C 7A 06 F6 | 	mov	result1, #156
0668c     7C 01 90 FD | 	jmp	#LR__0535
06690                 | LR__0487
06690     D3 7A 06 F6 | 	mov	result1, #211
06694     74 01 90 FD | 	jmp	#LR__0535
06698                 | LR__0488
06698     D3 7A 06 F6 | 	mov	result1, #211
0669c     6C 01 90 FD | 	jmp	#LR__0535
066a0                 | LR__0489
066a0     6F 7A 06 F6 | 	mov	result1, #111
066a4     64 01 90 FD | 	jmp	#LR__0535
066a8                 | LR__0490
066a8     6F 7A 06 F6 | 	mov	result1, #111
066ac     5C 01 90 FD | 	jmp	#LR__0535
066b0                 | LR__0491
066b0     93 7A 06 F6 | 	mov	result1, #147
066b4     54 01 90 FD | 	jmp	#LR__0535
066b8                 | LR__0492
066b8     94 7A 06 F6 | 	mov	result1, #148
066bc     4C 01 90 FD | 	jmp	#LR__0535
066c0                 | LR__0493
066c0     DB 7A 06 F6 | 	mov	result1, #219
066c4     44 01 90 FD | 	jmp	#LR__0535
066c8                 | LR__0494
066c8     62 7A 06 F6 | 	mov	result1, #98
066cc     3C 01 90 FD | 	jmp	#LR__0535
066d0                 | LR__0495
066d0     62 7A 06 F6 | 	mov	result1, #98
066d4     34 01 90 FD | 	jmp	#LR__0535
066d8                 | LR__0496
066d8     A3 7A 06 F6 | 	mov	result1, #163
066dc     2C 01 90 FD | 	jmp	#LR__0535
066e0                 | LR__0497
066e0     9D 7A 06 F6 | 	mov	result1, #157
066e4     24 01 90 FD | 	jmp	#LR__0535
066e8                 | LR__0498
066e8     8A 7A 06 F6 | 	mov	result1, #138
066ec     1C 01 90 FD | 	jmp	#LR__0535
066f0                 | LR__0499
066f0     A4 7A 06 F6 | 	mov	result1, #164
066f4     14 01 90 FD | 	jmp	#LR__0535
066f8                 | LR__0500
066f8     A8 7A 06 F6 | 	mov	result1, #168
066fc     0C 01 90 FD | 	jmp	#LR__0535
06700                 | LR__0501
06700     AD 7A 06 F6 | 	mov	result1, #173
06704     04 01 90 FD | 	jmp	#LR__0535
06708                 | LR__0502
06708     9A 7A 06 F6 | 	mov	result1, #154
0670c     FC 00 90 FD | 	jmp	#LR__0535
06710                 | LR__0503
06710     D1 7A 06 F6 | 	mov	result1, #209
06714     F4 00 90 FD | 	jmp	#LR__0535
06718                 | LR__0504
06718     D0 7A 06 F6 | 	mov	result1, #208
0671c     EC 00 90 FD | 	jmp	#LR__0535
06720                 | LR__0505
06720     A6 7A 06 F6 | 	mov	result1, #166
06724     E4 00 90 FD | 	jmp	#LR__0535
06728                 | LR__0506
06728     66 7A 06 F6 | 	mov	result1, #102
0672c     DC 00 90 FD | 	jmp	#LR__0535
06730                 | LR__0507
06730     67 7A 06 F6 | 	mov	result1, #103
06734     D4 00 90 FD | 	jmp	#LR__0535
06738                 | LR__0508
06738     64 7A 06 F6 | 	mov	result1, #100
0673c     CC 00 90 FD | 	jmp	#LR__0535
06740                 | LR__0509
06740     65 7A 06 F6 | 	mov	result1, #101
06744     C4 00 90 FD | 	jmp	#LR__0535
06748                 | LR__0510
06748     D5 7A 06 F6 | 	mov	result1, #213
0674c     BC 00 90 FD | 	jmp	#LR__0535
06750                 | LR__0511
06750     D6 7A 06 F6 | 	mov	result1, #214
06754     B4 00 90 FD | 	jmp	#LR__0535
06758                 | LR__0512
06758     C8 7A 06 F6 | 	mov	result1, #200
0675c     AC 00 90 FD | 	jmp	#LR__0535
06760                 | LR__0513
06760     C9 7A 06 F6 | 	mov	result1, #201
06764     A4 00 90 FD | 	jmp	#LR__0535
06768                 | LR__0514
06768     CA 7A 06 F6 | 	mov	result1, #202
0676c     9C 00 90 FD | 	jmp	#LR__0535
06770                 | LR__0515
06770     CC 7A 06 F6 | 	mov	result1, #204
06774     94 00 90 FD | 	jmp	#LR__0535
06778                 | LR__0516
06778     CD 7A 06 F6 | 	mov	result1, #205
0677c     8C 00 90 FD | 	jmp	#LR__0535
06780                 | LR__0517
06780     CE 7A 06 F6 | 	mov	result1, #206
06784     84 00 90 FD | 	jmp	#LR__0535
06788                 | LR__0518
06788     CB 7A 06 F6 | 	mov	result1, #203
0678c     7C 00 90 FD | 	jmp	#LR__0535
06790                 | LR__0519
06790     98 7A 06 F6 | 	mov	result1, #152
06794     74 00 90 FD | 	jmp	#LR__0535
06798                 | LR__0520
06798     7B 7A 06 F6 | 	mov	result1, #123
0679c     6C 00 90 FD | 	jmp	#LR__0535
067a0                 | LR__0521
067a0     76 7A 06 F6 | 	mov	result1, #118
067a4     64 00 90 FD | 	jmp	#LR__0535
067a8                 | LR__0522
067a8     A5 7A 06 F6 | 	mov	result1, #165
067ac     5C 00 90 FD | 	jmp	#LR__0535
067b0                 | LR__0523
067b0     7A 7A 06 F6 | 	mov	result1, #122
067b4     54 00 90 FD | 	jmp	#LR__0535
067b8                 | LR__0524
067b8     BF 7A 06 F6 | 	mov	result1, #191
067bc     4C 00 90 FD | 	jmp	#LR__0535
067c0                 | LR__0525
067c0     54 7A 06 F6 | 	mov	result1, #84
067c4     44 00 90 FD | 	jmp	#LR__0535
067c8                 | LR__0526
067c8     6B 7A 06 F6 | 	mov	result1, #107
067cc     3C 00 90 FD | 	jmp	#LR__0535
067d0                 | LR__0527
067d0     87 7A 06 F6 | 	mov	result1, #135
067d4     34 00 90 FD | 	jmp	#LR__0535
067d8                 | LR__0528
067d8     6A 7A 06 F6 | 	mov	result1, #106
067dc     2C 00 90 FD | 	jmp	#LR__0535
067e0                 | LR__0529
067e0     6E 7A 06 F6 | 	mov	result1, #110
067e4     24 00 90 FD | 	jmp	#LR__0535
067e8                 | LR__0530
067e8     A1 7A 06 F6 | 	mov	result1, #161
067ec     1C 00 90 FD | 	jmp	#LR__0535
067f0                 | LR__0531
067f0     83 7A 06 F6 | 	mov	result1, #131
067f4     14 00 90 FD | 	jmp	#LR__0535
067f8                 | LR__0532
067f8     A0 7A 06 F6 | 	mov	result1, #160
067fc     0C 00 90 FD | 	jmp	#LR__0535
06800                 | LR__0533
06800     9B 7A 06 F6 | 	mov	result1, #155
06804     04 00 90 FD | 	jmp	#LR__0535
06808                 | LR__0534
06808     00 7A 06 F6 | 	mov	result1, #0
0680c                 | LR__0535
0680c     E7 F0 03 F6 | 	mov	ptra, fp
06810     F2 00 A0 FD | 	call	#popregs_
06814                 | _isfunction_ret
06814     2D 00 64 FD | 	ret
06818                 | 
06818                 | ' 
06818                 | ' ' Check if the part is a name
06818                 | ' 
06818                 | ' function isname(s as string) as boolean
06818                 | _isname
06818     0D CA 05 F6 | 	mov	COUNT_, #13
0681c     E8 00 A0 FD | 	call	#pushregs_
06820     49 A7 02 F6 | 	mov	local01, arg01
06824     49 A9 02 F6 | 	mov	local02, arg01
06828     D7 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
0682c                 | LR__0540
0682c     54 7B CA FA | 	rdbyte	result1, local02 wz
06830     01 A8 06 51 |  if_ne	add	local02, #1
06834     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06838                 | LR__0541
06838     49 A9 82 F1 | 	sub	local02, arg01
0683c     54 7B 02 F6 | 	mov	result1, local02
06840     3D AB 0A F6 | 	mov	local03, result1 wz
06844     00 7A 06 A6 |  if_e	mov	result1, #0
06848     34 02 90 AD |  if_e	jmp	#LR__0553
0684c     53 93 02 F6 | 	mov	arg01, local01
06850     01 94 06 F6 | 	mov	arg02, #1
06854     01 96 06 F6 | 	mov	arg03, #1
06858     40 FB B1 FD | 	call	#__system__Mid_S
0685c     3D AD 02 F6 | 	mov	local04, result1
06860                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
06860     95 01 00 FF 
06864     7B 95 06 F6 | 	mov	arg02, ##@LR__5845
06868     56 93 02 F6 | 	mov	arg01, local04
0686c     94 E1 B1 FD | 	call	#__system___string_cmp
06870     00 7A 56 F2 | 	cmps	result1, #0 wc
06874     18 00 90 CD |  if_b	jmp	#LR__0542
06878     95 01 00 FF 
0687c     7D 95 06 F6 | 	mov	arg02, ##@LR__5846
06880     56 93 02 F6 | 	mov	arg01, local04
06884     7C E1 B1 FD | 	call	#__system___string_cmp
06888     01 7A 56 F2 | 	cmps	result1, #1 wc
0688c     1C 00 90 CD |  if_b	jmp	#LR__0543
06890                 | LR__0542
06890     95 01 00 FF 
06894     7F 95 06 F6 | 	mov	arg02, ##@LR__5847
06898     56 93 02 F6 | 	mov	arg01, local04
0689c     64 E1 B1 FD | 	call	#__system___string_cmp
068a0     00 7A 0E F2 | 	cmp	result1, #0 wz
068a4     00 7A 06 56 |  if_ne	mov	result1, #0
068a8     D4 01 90 5D |  if_ne	jmp	#LR__0553
068ac                 | LR__0543
068ac                 | ' if l>2 then 
068ac     03 AA 56 F2 | 	cmps	local03, #3 wc
068b0     C8 01 90 CD |  if_b	jmp	#LR__0552
068b4                 | '   for i=2 to l
068b4     02 AE 06 F6 | 	mov	local05, #2
068b8     55 B1 02 F6 | 	mov	local06, local03
068bc     01 B0 06 F1 | 	add	local06, #1
068c0                 | LR__0544
068c0     58 AF 52 F2 | 	cmps	local05, local06 wc
068c4     B4 01 90 3D |  if_ae	jmp	#LR__0551
068c8     53 93 02 F6 | 	mov	arg01, local01
068cc     57 95 02 F6 | 	mov	arg02, local05
068d0     01 96 06 F6 | 	mov	arg03, #1
068d4     C4 FA B1 FD | 	call	#__system__Mid_S
068d8     3D AD 02 F6 | 	mov	local04, result1
068dc                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
068dc     55 AF 52 F2 | 	cmps	local05, local03 wc
068e0     9C 00 90 3D |  if_ae	jmp	#LR__0547
068e4     95 01 00 FF 
068e8     81 95 06 F6 | 	mov	arg02, ##@LR__5848
068ec     56 93 02 F6 | 	mov	arg01, local04
068f0     10 E1 B1 FD | 	call	#__system___string_cmp
068f4     00 7A 56 F2 | 	cmps	result1, #0 wc
068f8     18 00 90 CD |  if_b	jmp	#LR__0545
068fc     95 01 00 FF 
06900     83 95 06 F6 | 	mov	arg02, ##@LR__5849
06904     56 93 02 F6 | 	mov	arg01, local04
06908     F8 E0 B1 FD | 	call	#__system___string_cmp
0690c     01 7A 56 F2 | 	cmps	result1, #1 wc
06910     6C 00 90 CD |  if_b	jmp	#LR__0547
06914                 | LR__0545
06914     95 01 00 FF 
06918     85 95 06 F6 | 	mov	arg02, ##@LR__5850
0691c     56 93 02 F6 | 	mov	arg01, local04
06920     E0 E0 B1 FD | 	call	#__system___string_cmp
06924     00 7A 56 F2 | 	cmps	result1, #0 wc
06928     18 00 90 CD |  if_b	jmp	#LR__0546
0692c     95 01 00 FF 
06930     87 95 06 F6 | 	mov	arg02, ##@LR__5851
06934     56 93 02 F6 | 	mov	arg01, local04
06938     C8 E0 B1 FD | 	call	#__system___string_cmp
0693c     01 7A 56 F2 | 	cmps	result1, #1 wc
06940     3C 00 90 CD |  if_b	jmp	#LR__0547
06944                 | LR__0546
06944     95 01 00 FF 
06948     89 B3 06 F6 | 	mov	local07, ##@LR__5852
0694c     56 93 02 F6 | 	mov	arg01, local04
06950     59 95 02 F6 | 	mov	arg02, local07
06954     AC E0 B1 FD | 	call	#__system___string_cmp
06958     00 7A 0E F2 | 	cmp	result1, #0 wz
0695c     20 00 90 AD |  if_e	jmp	#LR__0547
06960     95 01 00 FF 
06964     8B B5 06 F6 | 	mov	local08, ##@LR__5853
06968     56 93 02 F6 | 	mov	arg01, local04
0696c     5A 95 02 F6 | 	mov	arg02, local08
06970     90 E0 B1 FD | 	call	#__system___string_cmp
06974     3D B7 0A F6 | 	mov	local09, result1 wz
06978     00 7A 06 56 |  if_ne	mov	result1, #0
0697c     00 01 90 5D |  if_ne	jmp	#LR__0553
06980                 | LR__0547
06980                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06980     55 AF 0A F2 | 	cmp	local05, local03 wz
06984     EC 00 90 5D |  if_ne	jmp	#LR__0550
06988     95 01 00 FF 
0698c     8D B9 06 F6 | 	mov	local10, ##@LR__5854
06990     56 93 02 F6 | 	mov	arg01, local04
06994     5C 95 02 F6 | 	mov	arg02, local10
06998     68 E0 B1 FD | 	call	#__system___string_cmp
0699c     3D BB 02 F6 | 	mov	local11, result1
069a0     00 BA 56 F2 | 	cmps	local11, #0 wc
069a4     1C 00 90 CD |  if_b	jmp	#LR__0548
069a8     95 01 00 FF 
069ac     8F 95 06 F6 | 	mov	arg02, ##@LR__5855
069b0     56 93 02 F6 | 	mov	arg01, local04
069b4     4C E0 B1 FD | 	call	#__system___string_cmp
069b8     3D B9 02 F6 | 	mov	local10, result1
069bc     01 B8 56 F2 | 	cmps	local10, #1 wc
069c0     B0 00 90 CD |  if_b	jmp	#LR__0550
069c4                 | LR__0548
069c4     95 01 00 FF 
069c8     91 95 06 F6 | 	mov	arg02, ##@LR__5856
069cc     56 93 02 F6 | 	mov	arg01, local04
069d0     30 E0 B1 FD | 	call	#__system___string_cmp
069d4     00 7A 56 F2 | 	cmps	result1, #0 wc
069d8     1C 00 90 CD |  if_b	jmp	#LR__0549
069dc     95 01 00 FF 
069e0     93 B7 06 F6 | 	mov	local09, ##@LR__5857
069e4     56 93 02 F6 | 	mov	arg01, local04
069e8     5B 95 02 F6 | 	mov	arg02, local09
069ec     14 E0 B1 FD | 	call	#__system___string_cmp
069f0     01 7A 56 F2 | 	cmps	result1, #1 wc
069f4     7C 00 90 CD |  if_b	jmp	#LR__0550
069f8                 | LR__0549
069f8     95 01 00 FF 
069fc     95 B7 06 F6 | 	mov	local09, ##@LR__5858
06a00     56 93 02 F6 | 	mov	arg01, local04
06a04     5B 95 02 F6 | 	mov	arg02, local09
06a08     F8 DF B1 FD | 	call	#__system___string_cmp
06a0c     00 7A 4E F2 | 	cmps	result1, #0 wz
06a10     60 00 90 AD |  if_e	jmp	#LR__0550
06a14     95 01 00 FF 
06a18     97 B5 06 F6 | 	mov	local08, ##@LR__5859
06a1c     56 93 02 F6 | 	mov	arg01, local04
06a20     5A 95 02 F6 | 	mov	arg02, local08
06a24     DC DF B1 FD | 	call	#__system___string_cmp
06a28     3D B7 0A F6 | 	mov	local09, result1 wz
06a2c     44 00 90 AD |  if_e	jmp	#LR__0550
06a30     95 01 00 FF 
06a34     99 BD 06 F6 | 	mov	local12, ##@LR__5860
06a38     5E B5 02 F6 | 	mov	local08, local12
06a3c     56 93 02 F6 | 	mov	arg01, local04
06a40     5A 95 02 F6 | 	mov	arg02, local08
06a44     BC DF B1 FD | 	call	#__system___string_cmp
06a48     3D B3 0A F6 | 	mov	local07, result1 wz
06a4c     24 00 90 AD |  if_e	jmp	#LR__0550
06a50     95 01 00 FF 
06a54     9B BF 06 F6 | 	mov	local13, ##@LR__5861
06a58     5F BD 02 F6 | 	mov	local12, local13
06a5c     56 93 02 F6 | 	mov	arg01, local04
06a60     5E 95 02 F6 | 	mov	arg02, local12
06a64     9C DF B1 FD | 	call	#__system___string_cmp
06a68     3D B5 0A F6 | 	mov	local08, result1 wz
06a6c     00 7A 06 56 |  if_ne	mov	result1, #0
06a70     0C 00 90 5D |  if_ne	jmp	#LR__0553
06a74                 | LR__0550
06a74     01 AE 06 F1 | 	add	local05, #1
06a78     44 FE 9F FD | 	jmp	#LR__0544
06a7c                 | LR__0551
06a7c                 | LR__0552
06a7c                 | ' return true
06a7c     01 7A 66 F6 | 	neg	result1, #1
06a80                 | LR__0553
06a80     E7 F0 03 F6 | 	mov	ptra, fp
06a84     F2 00 A0 FD | 	call	#popregs_
06a88                 | _isname_ret
06a88     2D 00 64 FD | 	ret
06a8c                 | 
06a8c                 | ' 
06a8c                 | ' ' Check if the part is a number.  
06a8c                 | ' 
06a8c                 | ' function isnum(s as string) as boolean 
06a8c                 | _isnum
06a8c     13 CA 05 F6 | 	mov	COUNT_, #19
06a90     E8 00 A0 FD | 	call	#pushregs_
06a94     49 A7 02 F6 | 	mov	local01, arg01
06a98     00 A8 06 F6 | 	mov	local02, #0
06a9c     00 AA 06 F6 | 	mov	local03, #0
06aa0     53 93 02 F6 | 	mov	arg01, local01
06aa4     49 AD 02 F6 | 	mov	local04, arg01
06aa8     D7 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
06aac                 | LR__0560
06aac     56 7B CA FA | 	rdbyte	result1, local04 wz
06ab0     01 AC 06 51 |  if_ne	add	local04, #1
06ab4     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
06ab8                 | LR__0561
06ab8     49 AD 82 F1 | 	sub	local04, arg01
06abc     56 7B 02 F6 | 	mov	result1, local04
06ac0     3D AF 0A F6 | 	mov	local05, result1 wz
06ac4     00 7A 06 A6 |  if_e	mov	result1, #0
06ac8     A0 03 90 AD |  if_e	jmp	#LR__0576
06acc     53 93 02 F6 | 	mov	arg01, local01
06ad0     01 94 06 F6 | 	mov	arg02, #1
06ad4     01 96 06 F6 | 	mov	arg03, #1
06ad8     C0 F8 B1 FD | 	call	#__system__Mid_S
06adc     3D B1 02 F6 | 	mov	local06, result1
06ae0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06ae0     95 01 00 FF 
06ae4     9D 95 06 F6 | 	mov	arg02, ##@LR__5862
06ae8     58 93 02 F6 | 	mov	arg01, local06
06aec     14 DF B1 FD | 	call	#__system___string_cmp
06af0     00 7A 56 F2 | 	cmps	result1, #0 wc
06af4     1C 00 90 CD |  if_b	jmp	#LR__0562
06af8     95 01 00 FF 
06afc     9F B3 06 F6 | 	mov	local07, ##@LR__5863
06b00     58 93 02 F6 | 	mov	arg01, local06
06b04     59 95 02 F6 | 	mov	arg02, local07
06b08     F8 DE B1 FD | 	call	#__system___string_cmp
06b0c     01 7A 56 F2 | 	cmps	result1, #1 wc
06b10     84 00 90 CD |  if_b	jmp	#LR__0563
06b14                 | LR__0562
06b14     95 01 00 FF 
06b18     A1 B5 06 F6 | 	mov	local08, ##@LR__5864
06b1c     5A B3 02 F6 | 	mov	local07, local08
06b20     58 93 02 F6 | 	mov	arg01, local06
06b24     59 95 02 F6 | 	mov	arg02, local07
06b28     D8 DE B1 FD | 	call	#__system___string_cmp
06b2c     00 7A 0E F2 | 	cmp	result1, #0 wz
06b30     64 00 90 AD |  if_e	jmp	#LR__0563
06b34     95 01 00 FF 
06b38     A3 B7 06 F6 | 	mov	local09, ##@LR__5865
06b3c     5B B5 02 F6 | 	mov	local08, local09
06b40     58 93 02 F6 | 	mov	arg01, local06
06b44     5A 95 02 F6 | 	mov	arg02, local08
06b48     B8 DE B1 FD | 	call	#__system___string_cmp
06b4c     3D B3 0A F6 | 	mov	local07, result1 wz
06b50     44 00 90 AD |  if_e	jmp	#LR__0563
06b54     95 01 00 FF 
06b58     A5 B9 06 F6 | 	mov	local10, ##@LR__5866
06b5c     5C B7 02 F6 | 	mov	local09, local10
06b60     58 93 02 F6 | 	mov	arg01, local06
06b64     5B 95 02 F6 | 	mov	arg02, local09
06b68     98 DE B1 FD | 	call	#__system___string_cmp
06b6c     3D B5 0A F6 | 	mov	local08, result1 wz
06b70     24 00 90 AD |  if_e	jmp	#LR__0563
06b74     95 01 00 FF 
06b78     A7 BB 06 F6 | 	mov	local11, ##@LR__5867
06b7c     5D B9 02 F6 | 	mov	local10, local11
06b80     58 93 02 F6 | 	mov	arg01, local06
06b84     5C 95 02 F6 | 	mov	arg02, local10
06b88     78 DE B1 FD | 	call	#__system___string_cmp
06b8c     3D B7 0A F6 | 	mov	local09, result1 wz
06b90     00 7A 06 56 |  if_ne	mov	result1, #0
06b94     D4 02 90 5D |  if_ne	jmp	#LR__0576
06b98                 | LR__0563
06b98                 | ' if m$="." then ds=1
06b98     95 01 00 FF 
06b9c     A9 95 06 F6 | 	mov	arg02, ##@LR__5868
06ba0     58 93 02 F6 | 	mov	arg01, local06
06ba4     5C DE B1 FD | 	call	#__system___string_cmp
06ba8     00 7A 0E F2 | 	cmp	result1, #0 wz
06bac     01 A8 06 A6 |  if_e	mov	local02, #1
06bb0                 | ' if m$="$" then hex=1 else hex=0
06bb0     95 01 00 FF 
06bb4     AB 95 06 F6 | 	mov	arg02, ##@LR__5869
06bb8     58 93 02 F6 | 	mov	arg01, local06
06bbc     44 DE B1 FD | 	call	#__system___string_cmp
06bc0     00 7A 0E F2 | 	cmp	result1, #0 wz
06bc4     01 BC 06 A6 |  if_e	mov	local12, #1
06bc8     00 BC 06 56 |  if_ne	mov	local12, #0
06bcc                 | ' if m$="%" then bin=1 else bin=0
06bcc     95 01 00 FF 
06bd0     AD 95 06 F6 | 	mov	arg02, ##@LR__5870
06bd4     58 93 02 F6 | 	mov	arg01, local06
06bd8     28 DE B1 FD | 	call	#__system___string_cmp
06bdc     00 7A 0E F2 | 	cmp	result1, #0 wz
06be0     01 BE 06 A6 |  if_e	mov	local13, #1
06be4     00 BE 06 56 |  if_ne	mov	local13, #0
06be8                 | ' if l>1 then 
06be8     02 AE 56 F2 | 	cmps	local05, #2 wc
06bec     78 02 90 CD |  if_b	jmp	#LR__0575
06bf0                 | '   for i=2 to l
06bf0     02 C0 06 F6 | 	mov	local14, #2
06bf4     57 C3 02 F6 | 	mov	local15, local05
06bf8     01 C2 06 F1 | 	add	local15, #1
06bfc                 | LR__0564
06bfc     61 C1 52 F2 | 	cmps	local14, local15 wc
06c00     64 02 90 3D |  if_ae	jmp	#LR__0574
06c04     53 93 02 F6 | 	mov	arg01, local01
06c08     60 95 02 F6 | 	mov	arg02, local14
06c0c     01 96 06 F6 | 	mov	arg03, #1
06c10     88 F7 B1 FD | 	call	#__system__Mid_S
06c14     3D B1 02 F6 | 	mov	local06, result1
06c18     00 C4 06 F6 | 	mov	local16, #0
06c1c                 | '     m$=mid$(s,i,1) : b=false
06c1c                 | '     if m$>="0" andalso m$<="9" then b=true  
06c1c     95 01 00 FF 
06c20     AF 95 06 F6 | 	mov	arg02, ##@LR__5871
06c24     58 93 02 F6 | 	mov	arg01, local06
06c28     D8 DD B1 FD | 	call	#__system___string_cmp
06c2c     00 7A 56 F2 | 	cmps	result1, #0 wc
06c30     1C 00 90 CD |  if_b	jmp	#LR__0565
06c34     95 01 00 FF 
06c38     B1 B3 06 F6 | 	mov	local07, ##@LR__5872
06c3c     58 93 02 F6 | 	mov	arg01, local06
06c40     59 95 02 F6 | 	mov	arg02, local07
06c44     BC DD B1 FD | 	call	#__system___string_cmp
06c48     01 7A 56 F2 | 	cmps	result1, #1 wc
06c4c     01 C4 66 C6 |  if_b	neg	local16, #1
06c50                 | LR__0565
06c50                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06c50     95 01 00 FF 
06c54     B3 95 06 F6 | 	mov	arg02, ##@LR__5873
06c58     58 93 02 F6 | 	mov	arg01, local06
06c5c     A4 DD B1 FD | 	call	#__system___string_cmp
06c60     00 7A 0E F2 | 	cmp	result1, #0 wz
06c64     7C 00 90 AD |  if_e	jmp	#LR__0566
06c68     95 01 00 FF 
06c6c     B5 B3 06 F6 | 	mov	local07, ##@LR__5874
06c70     58 93 02 F6 | 	mov	arg01, local06
06c74     59 95 02 F6 | 	mov	arg02, local07
06c78     88 DD B1 FD | 	call	#__system___string_cmp
06c7c     00 7A 0E F2 | 	cmp	result1, #0 wz
06c80     60 00 90 AD |  if_e	jmp	#LR__0566
06c84     95 01 00 FF 
06c88     B7 B5 06 F6 | 	mov	local08, ##@LR__5875
06c8c     5A B3 02 F6 | 	mov	local07, local08
06c90     58 93 02 F6 | 	mov	arg01, local06
06c94     59 95 02 F6 | 	mov	arg02, local07
06c98     68 DD B1 FD | 	call	#__system___string_cmp
06c9c     00 7A 0E F2 | 	cmp	result1, #0 wz
06ca0     40 00 90 AD |  if_e	jmp	#LR__0566
06ca4     95 01 00 FF 
06ca8     B9 B7 06 F6 | 	mov	local09, ##@LR__5876
06cac     5B B5 02 F6 | 	mov	local08, local09
06cb0     58 93 02 F6 | 	mov	arg01, local06
06cb4     5A 95 02 F6 | 	mov	arg02, local08
06cb8     48 DD B1 FD | 	call	#__system___string_cmp
06cbc     3D B3 0A F6 | 	mov	local07, result1 wz
06cc0     20 00 90 AD |  if_e	jmp	#LR__0566
06cc4     95 01 00 FF 
06cc8     BB B9 06 F6 | 	mov	local10, ##@LR__5877
06ccc     5C B7 02 F6 | 	mov	local09, local10
06cd0     58 93 02 F6 | 	mov	arg01, local06
06cd4     5B 95 02 F6 | 	mov	arg02, local09
06cd8     28 DD B1 FD | 	call	#__system___string_cmp
06cdc     3D B5 0A F6 | 	mov	local08, result1 wz
06ce0     04 00 90 5D |  if_ne	jmp	#LR__0567
06ce4                 | LR__0566
06ce4     01 C4 66 F6 | 	neg	local16, #1
06ce8                 | LR__0567
06ce8                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06ce8     01 BC 0E F2 | 	cmp	local12, #1 wz
06cec     34 00 90 5D |  if_ne	jmp	#LR__0568
06cf0     95 01 00 FF 
06cf4     BD 95 06 F6 | 	mov	arg02, ##@LR__5878
06cf8     58 93 02 F6 | 	mov	arg01, local06
06cfc     04 DD B1 FD | 	call	#__system___string_cmp
06d00     00 7A 56 F2 | 	cmps	result1, #0 wc
06d04     1C 00 90 CD |  if_b	jmp	#LR__0568
06d08     95 01 00 FF 
06d0c     BF B3 06 F6 | 	mov	local07, ##@LR__5879
06d10     58 93 02 F6 | 	mov	arg01, local06
06d14     59 95 02 F6 | 	mov	arg02, local07
06d18     E8 DC B1 FD | 	call	#__system___string_cmp
06d1c     01 7A 56 F2 | 	cmps	result1, #1 wc
06d20     01 C4 66 C6 |  if_b	neg	local16, #1
06d24                 | LR__0568
06d24                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06d24     01 BE 0E F2 | 	cmp	local13, #1 wz
06d28     58 00 90 5D |  if_ne	jmp	#LR__0570
06d2c     95 01 00 FF 
06d30     C1 95 06 F6 | 	mov	arg02, ##@LR__5880
06d34     58 93 02 F6 | 	mov	arg01, local06
06d38     C8 DC B1 FD | 	call	#__system___string_cmp
06d3c     00 7A 56 F2 | 	cmps	result1, #0 wc
06d40     1C 00 90 CD |  if_b	jmp	#LR__0569
06d44     95 01 00 FF 
06d48     C3 B3 06 F6 | 	mov	local07, ##@LR__5881
06d4c     58 93 02 F6 | 	mov	arg01, local06
06d50     59 95 02 F6 | 	mov	arg02, local07
06d54     AC DC B1 FD | 	call	#__system___string_cmp
06d58     01 7A 56 F2 | 	cmps	result1, #1 wc
06d5c     24 00 90 CD |  if_b	jmp	#LR__0570
06d60                 | LR__0569
06d60     95 01 00 FF 
06d64     C5 B5 06 F6 | 	mov	local08, ##@LR__5882
06d68     5A B3 02 F6 | 	mov	local07, local08
06d6c     58 93 02 F6 | 	mov	arg01, local06
06d70     59 95 02 F6 | 	mov	arg02, local07
06d74     8C DC B1 FD | 	call	#__system___string_cmp
06d78     00 7A 0E F2 | 	cmp	result1, #0 wz
06d7c     00 7A 06 56 |  if_ne	mov	result1, #0
06d80     E8 00 90 5D |  if_ne	jmp	#LR__0576
06d84                 | LR__0570
06d84                 | '     if not b then return false
06d84     62 C5 22 F6 | 	not	local16, local16
06d88     00 C4 0E F2 | 	cmp	local16, #0 wz
06d8c     00 7A 06 56 |  if_ne	mov	result1, #0
06d90     D8 00 90 5D |  if_ne	jmp	#LR__0576
06d94                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06d94     95 01 00 FF 
06d98     C7 95 06 F6 | 	mov	arg02, ##@LR__5883
06d9c     58 93 02 F6 | 	mov	arg01, local06
06da0     60 DC B1 FD | 	call	#__system___string_cmp
06da4     00 7A 0E F2 | 	cmp	result1, #0 wz
06da8     3C 00 90 5D |  if_ne	jmp	#LR__0571
06dac     60 95 02 F6 | 	mov	arg02, local14
06db0     01 94 86 F1 | 	sub	arg02, #1
06db4     53 93 02 F6 | 	mov	arg01, local01
06db8     01 96 06 F6 | 	mov	arg03, #1
06dbc     DC F5 B1 FD | 	call	#__system__Mid_S
06dc0     3D 93 02 F6 | 	mov	arg01, result1
06dc4     CC F7 B1 FD | 	call	#__system__LCase_S
06dc8     3D 93 02 F6 | 	mov	arg01, result1
06dcc     95 01 00 FF 
06dd0     C9 B3 06 F6 | 	mov	local07, ##@LR__5884
06dd4     59 95 02 F6 | 	mov	arg02, local07
06dd8     28 DC B1 FD | 	call	#__system___string_cmp
06ddc     00 7A 0E F2 | 	cmp	result1, #0 wz
06de0     00 7A 06 56 |  if_ne	mov	result1, #0
06de4     84 00 90 5D |  if_ne	jmp	#LR__0576
06de8                 | LR__0571
06de8                 | '     if m$="." then ds+=1: if ds>1 then return false
06de8     95 01 00 FF 
06dec     CB 95 06 F6 | 	mov	arg02, ##@LR__5885
06df0     58 93 02 F6 | 	mov	arg01, local06
06df4     0C DC B1 FD | 	call	#__system___string_cmp
06df8     00 7A 0E F2 | 	cmp	result1, #0 wz
06dfc     01 A8 06 A1 |  if_e	add	local02, #1
06e00     02 A8 56 A2 |  if_e	cmps	local02, #2 wc
06e04     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
06e08     60 00 90 2D |  if_nc_and_z	jmp	#LR__0576
06e0c                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06e0c     95 01 00 FF 
06e10     CD C7 06 F6 | 	mov	local17, ##@LR__5886
06e14     63 C9 02 F6 | 	mov	local18, local17
06e18     58 93 02 F6 | 	mov	arg01, local06
06e1c     64 95 02 F6 | 	mov	arg02, local18
06e20     E0 DB B1 FD | 	call	#__system___string_cmp
06e24     3D CB 0A F6 | 	mov	local19, result1 wz
06e28     20 00 90 AD |  if_e	jmp	#LR__0572
06e2c     95 01 00 FF 
06e30     CF B3 06 F6 | 	mov	local07, ##@LR__5887
06e34     59 C7 02 F6 | 	mov	local17, local07
06e38     58 93 02 F6 | 	mov	arg01, local06
06e3c     63 95 02 F6 | 	mov	arg02, local17
06e40     C0 DB B1 FD | 	call	#__system___string_cmp
06e44     3D C9 0A F6 | 	mov	local18, result1 wz
06e48     14 00 90 5D |  if_ne	jmp	#LR__0573
06e4c                 | LR__0572
06e4c     01 AA 06 F1 | 	add	local03, #1
06e50     00 BC 0E F2 | 	cmp	local12, #0 wz
06e54     02 AA 56 A2 |  if_e	cmps	local03, #2 wc
06e58     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
06e5c     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0576
06e60                 | LR__0573
06e60     01 C0 06 F1 | 	add	local14, #1
06e64     94 FD 9F FD | 	jmp	#LR__0564
06e68                 | LR__0574
06e68                 | LR__0575
06e68                 | ' return true
06e68     01 7A 66 F6 | 	neg	result1, #1
06e6c                 | LR__0576
06e6c     E7 F0 03 F6 | 	mov	ptra, fp
06e70     F2 00 A0 FD | 	call	#popregs_
06e74                 | _isnum_ret
06e74     2D 00 64 FD | 	ret
06e78                 | 
06e78                 | '   
06e78                 | ' ' Check if the part is an integer number.    
06e78                 | '   
06e78                 | ' function isint(s as string) as boolean
06e78                 | _isint
06e78     0E CA 05 F6 | 	mov	COUNT_, #14
06e7c     E8 00 A0 FD | 	call	#pushregs_
06e80     49 A7 02 F6 | 	mov	local01, arg01
06e84     49 A9 02 F6 | 	mov	local02, arg01
06e88     D7 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06e8c                 | LR__0580
06e8c     54 7B CA FA | 	rdbyte	result1, local02 wz
06e90     01 A8 06 51 |  if_ne	add	local02, #1
06e94     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06e98                 | LR__0581
06e98     49 A9 82 F1 | 	sub	local02, arg01
06e9c     54 7B 02 F6 | 	mov	result1, local02
06ea0     3D AB 0A F6 | 	mov	local03, result1 wz
06ea4     00 7A 06 A6 |  if_e	mov	result1, #0
06ea8     64 02 90 AD |  if_e	jmp	#LR__0594
06eac     53 93 02 F6 | 	mov	arg01, local01
06eb0     01 94 06 F6 | 	mov	arg02, #1
06eb4     01 96 06 F6 | 	mov	arg03, #1
06eb8     E0 F4 B1 FD | 	call	#__system__Mid_S
06ebc     3D AD 02 F6 | 	mov	local04, result1
06ec0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06ec0     95 01 00 FF 
06ec4     D1 95 06 F6 | 	mov	arg02, ##@LR__5888
06ec8     56 93 02 F6 | 	mov	arg01, local04
06ecc     34 DB B1 FD | 	call	#__system___string_cmp
06ed0     00 7A 56 F2 | 	cmps	result1, #0 wc
06ed4     1C 00 90 CD |  if_b	jmp	#LR__0582
06ed8     95 01 00 FF 
06edc     D3 AF 06 F6 | 	mov	local05, ##@LR__5889
06ee0     56 93 02 F6 | 	mov	arg01, local04
06ee4     57 95 02 F6 | 	mov	arg02, local05
06ee8     18 DB B1 FD | 	call	#__system___string_cmp
06eec     01 7A 56 F2 | 	cmps	result1, #1 wc
06ef0     64 00 90 CD |  if_b	jmp	#LR__0583
06ef4                 | LR__0582
06ef4     95 01 00 FF 
06ef8     D5 B1 06 F6 | 	mov	local06, ##@LR__5890
06efc     58 AF 02 F6 | 	mov	local05, local06
06f00     56 93 02 F6 | 	mov	arg01, local04
06f04     57 95 02 F6 | 	mov	arg02, local05
06f08     F8 DA B1 FD | 	call	#__system___string_cmp
06f0c     00 7A 0E F2 | 	cmp	result1, #0 wz
06f10     44 00 90 AD |  if_e	jmp	#LR__0583
06f14     95 01 00 FF 
06f18     D7 B3 06 F6 | 	mov	local07, ##@LR__5891
06f1c     59 B1 02 F6 | 	mov	local06, local07
06f20     56 93 02 F6 | 	mov	arg01, local04
06f24     58 95 02 F6 | 	mov	arg02, local06
06f28     D8 DA B1 FD | 	call	#__system___string_cmp
06f2c     3D AF 0A F6 | 	mov	local05, result1 wz
06f30     24 00 90 AD |  if_e	jmp	#LR__0583
06f34     95 01 00 FF 
06f38     D9 B5 06 F6 | 	mov	local08, ##@LR__5892
06f3c     5A B3 02 F6 | 	mov	local07, local08
06f40     56 93 02 F6 | 	mov	arg01, local04
06f44     59 95 02 F6 | 	mov	arg02, local07
06f48     B8 DA B1 FD | 	call	#__system___string_cmp
06f4c     3D B1 0A F6 | 	mov	local06, result1 wz
06f50     00 7A 06 56 |  if_ne	mov	result1, #0
06f54     B8 01 90 5D |  if_ne	jmp	#LR__0594
06f58                 | LR__0583
06f58                 | ' if m$="$" then hex=1 else hex=0
06f58     95 01 00 FF 
06f5c     DB 95 06 F6 | 	mov	arg02, ##@LR__5893
06f60     56 93 02 F6 | 	mov	arg01, local04
06f64     9C DA B1 FD | 	call	#__system___string_cmp
06f68     00 7A 0E F2 | 	cmp	result1, #0 wz
06f6c     01 B6 06 A6 |  if_e	mov	local09, #1
06f70     00 B6 06 56 |  if_ne	mov	local09, #0
06f74                 | ' if m$="%" then bin=1 else bin=0
06f74     95 01 00 FF 
06f78     DD 95 06 F6 | 	mov	arg02, ##@LR__5894
06f7c     56 93 02 F6 | 	mov	arg01, local04
06f80     80 DA B1 FD | 	call	#__system___string_cmp
06f84     00 7A 0E F2 | 	cmp	result1, #0 wz
06f88     01 B8 06 A6 |  if_e	mov	local10, #1
06f8c     00 B8 06 56 |  if_ne	mov	local10, #0
06f90                 | ' if l>1 then 
06f90     02 AA 56 F2 | 	cmps	local03, #2 wc
06f94     74 01 90 CD |  if_b	jmp	#LR__0593
06f98                 | '   for i=2 to l
06f98     02 BA 06 F6 | 	mov	local11, #2
06f9c     55 BD 02 F6 | 	mov	local12, local03
06fa0     01 BC 06 F1 | 	add	local12, #1
06fa4                 | LR__0584
06fa4     5E BB 52 F2 | 	cmps	local11, local12 wc
06fa8     60 01 90 3D |  if_ae	jmp	#LR__0592
06fac     53 93 02 F6 | 	mov	arg01, local01
06fb0     5D 95 02 F6 | 	mov	arg02, local11
06fb4     01 96 06 F6 | 	mov	arg03, #1
06fb8     E0 F3 B1 FD | 	call	#__system__Mid_S
06fbc     3D AD 02 F6 | 	mov	local04, result1
06fc0                 | '     m$=mid$(s,i,1) 
06fc0                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06fc0     00 B6 0E F2 | 	cmp	local09, #0 wz
06fc4     50 00 90 5D |  if_ne	jmp	#LR__0586
06fc8     95 01 00 FF 
06fcc     DF 95 06 F6 | 	mov	arg02, ##@LR__5895
06fd0     56 93 02 F6 | 	mov	arg01, local04
06fd4     2C DA B1 FD | 	call	#__system___string_cmp
06fd8     00 7A 56 F2 | 	cmps	result1, #0 wc
06fdc     18 00 90 CD |  if_b	jmp	#LR__0585
06fe0     95 01 00 FF 
06fe4     E1 95 06 F6 | 	mov	arg02, ##@LR__5896
06fe8     56 93 02 F6 | 	mov	arg01, local04
06fec     14 DA B1 FD | 	call	#__system___string_cmp
06ff0     01 7A 56 F2 | 	cmps	result1, #1 wc
06ff4     20 00 90 CD |  if_b	jmp	#LR__0586
06ff8                 | LR__0585
06ff8     95 01 00 FF 
06ffc     E3 B1 06 F6 | 	mov	local06, ##@LR__5897
07000     56 93 02 F6 | 	mov	arg01, local04
07004     58 95 02 F6 | 	mov	arg02, local06
07008     F8 D9 B1 FD | 	call	#__system___string_cmp
0700c     00 7A 0E F2 | 	cmp	result1, #0 wz
07010     00 7A 06 56 |  if_ne	mov	result1, #0
07014     F8 00 90 5D |  if_ne	jmp	#LR__0594
07018                 | LR__0586
07018                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
07018     01 B6 0E F2 | 	cmp	local09, #1 wz
0701c     90 00 90 5D |  if_ne	jmp	#LR__0589
07020     95 01 00 FF 
07024     E5 95 06 F6 | 	mov	arg02, ##@LR__5898
07028     56 93 02 F6 | 	mov	arg01, local04
0702c     D4 D9 B1 FD | 	call	#__system___string_cmp
07030     00 7A 56 F2 | 	cmps	result1, #0 wc
07034     1C 00 90 CD |  if_b	jmp	#LR__0587
07038     95 01 00 FF 
0703c     E7 95 06 F6 | 	mov	arg02, ##@LR__5899
07040     56 93 02 F6 | 	mov	arg01, local04
07044     BC D9 B1 FD | 	call	#__system___string_cmp
07048     3D BF 02 F6 | 	mov	local13, result1
0704c     01 BE 56 F2 | 	cmps	local13, #1 wc
07050     5C 00 90 CD |  if_b	jmp	#LR__0589
07054                 | LR__0587
07054     95 01 00 FF 
07058     E9 AF 06 F6 | 	mov	local05, ##@LR__5900
0705c     56 93 02 F6 | 	mov	arg01, local04
07060     57 95 02 F6 | 	mov	arg02, local05
07064     9C D9 B1 FD | 	call	#__system___string_cmp
07068     3D C1 02 F6 | 	mov	local14, result1
0706c     00 C0 56 F2 | 	cmps	local14, #0 wc
07070     1C 00 90 CD |  if_b	jmp	#LR__0588
07074     95 01 00 FF 
07078     EB B3 06 F6 | 	mov	local07, ##@LR__5901
0707c     56 93 02 F6 | 	mov	arg01, local04
07080     59 95 02 F6 | 	mov	arg02, local07
07084     7C D9 B1 FD | 	call	#__system___string_cmp
07088     01 7A 56 F2 | 	cmps	result1, #1 wc
0708c     20 00 90 CD |  if_b	jmp	#LR__0589
07090                 | LR__0588
07090     95 01 00 FF 
07094     ED B5 06 F6 | 	mov	local08, ##@LR__5902
07098     56 93 02 F6 | 	mov	arg01, local04
0709c     5A 95 02 F6 | 	mov	arg02, local08
070a0     60 D9 B1 FD | 	call	#__system___string_cmp
070a4     00 7A 0E F2 | 	cmp	result1, #0 wz
070a8     00 7A 06 56 |  if_ne	mov	result1, #0
070ac     60 00 90 5D |  if_ne	jmp	#LR__0594
070b0                 | LR__0589
070b0                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
070b0     01 B8 0E F2 | 	cmp	local10, #1 wz
070b4     4C 00 90 5D |  if_ne	jmp	#LR__0591
070b8     95 01 00 FF 
070bc     EF 95 06 F6 | 	mov	arg02, ##@LR__5903
070c0     56 93 02 F6 | 	mov	arg01, local04
070c4     3C D9 B1 FD | 	call	#__system___string_cmp
070c8     00 7A 56 F2 | 	cmps	result1, #0 wc
070cc     18 00 90 CD |  if_b	jmp	#LR__0590
070d0     95 01 00 FF 
070d4     F1 95 06 F6 | 	mov	arg02, ##@LR__5904
070d8     56 93 02 F6 | 	mov	arg01, local04
070dc     24 D9 B1 FD | 	call	#__system___string_cmp
070e0     01 7A 56 F2 | 	cmps	result1, #1 wc
070e4     1C 00 90 CD |  if_b	jmp	#LR__0591
070e8                 | LR__0590
070e8     95 01 00 FF 
070ec     F3 95 06 F6 | 	mov	arg02, ##@LR__5905
070f0     56 93 02 F6 | 	mov	arg01, local04
070f4     0C D9 B1 FD | 	call	#__system___string_cmp
070f8     00 7A 0E F2 | 	cmp	result1, #0 wz
070fc     00 7A 06 56 |  if_ne	mov	result1, #0
07100     0C 00 90 5D |  if_ne	jmp	#LR__0594
07104                 | LR__0591
07104     01 BA 06 F1 | 	add	local11, #1
07108     98 FE 9F FD | 	jmp	#LR__0584
0710c                 | LR__0592
0710c                 | LR__0593
0710c                 | ' return true
0710c     01 7A 66 F6 | 	neg	result1, #1
07110                 | LR__0594
07110     E7 F0 03 F6 | 	mov	ptra, fp
07114     F2 00 A0 FD | 	call	#popregs_
07118                 | _isint_ret
07118     2D 00 64 FD | 	ret
0711c                 | 
0711c                 | ' 
0711c                 | ' ' Check if the part is a positive decimal number.  
0711c                 | ' 
0711c                 | ' function isdec(s as string) as boolean
0711c                 | _isdec
0711c     05 CA 05 F6 | 	mov	COUNT_, #5
07120     E8 00 A0 FD | 	call	#pushregs_
07124     49 A7 02 F6 | 	mov	local01, arg01
07128     49 A9 02 F6 | 	mov	local02, arg01
0712c     D7 06 48 FB | 	callpa	#(@LR__0601-@LR__0600)>>2,fcache_load_ptr_
07130                 | LR__0600
07130     54 7B CA FA | 	rdbyte	result1, local02 wz
07134     01 A8 06 51 |  if_ne	add	local02, #1
07138     F4 FF 9F 5D |  if_ne	jmp	#LR__0600
0713c                 | LR__0601
0713c     49 A9 82 F1 | 	sub	local02, arg01
07140     54 7B 02 F6 | 	mov	result1, local02
07144     3D A9 0A F6 | 	mov	local02, result1 wz
07148     00 7A 06 A6 |  if_e	mov	result1, #0
0714c     80 00 90 AD |  if_e	jmp	#LR__0606
07150                 | ' for i=1 to l
07150     01 AA 06 F6 | 	mov	local03, #1
07154     54 AD 02 F6 | 	mov	local04, local02
07158     01 AC 06 F1 | 	add	local04, #1
0715c                 | LR__0602
0715c     56 AB 52 F2 | 	cmps	local03, local04 wc
07160     68 00 90 3D |  if_ae	jmp	#LR__0605
07164     53 93 02 F6 | 	mov	arg01, local01
07168     55 95 02 F6 | 	mov	arg02, local03
0716c     01 96 06 F6 | 	mov	arg03, #1
07170     28 F2 B1 FD | 	call	#__system__Mid_S
07174     3D AF 02 F6 | 	mov	local05, result1
07178                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
07178     95 01 00 FF 
0717c     F5 95 06 F6 | 	mov	arg02, ##@LR__5906
07180     57 93 02 F6 | 	mov	arg01, local05
07184     7C D8 B1 FD | 	call	#__system___string_cmp
07188     00 7A 56 F2 | 	cmps	result1, #0 wc
0718c     18 00 90 CD |  if_b	jmp	#LR__0603
07190     95 01 00 FF 
07194     F7 95 06 F6 | 	mov	arg02, ##@LR__5907
07198     57 93 02 F6 | 	mov	arg01, local05
0719c     64 D8 B1 FD | 	call	#__system___string_cmp
071a0     01 7A 56 F2 | 	cmps	result1, #1 wc
071a4     1C 00 90 CD |  if_b	jmp	#LR__0604
071a8                 | LR__0603
071a8     95 01 00 FF 
071ac     F9 95 06 F6 | 	mov	arg02, ##@LR__5908
071b0     57 93 02 F6 | 	mov	arg01, local05
071b4     4C D8 B1 FD | 	call	#__system___string_cmp
071b8     00 7A 0E F2 | 	cmp	result1, #0 wz
071bc     00 7A 06 56 |  if_ne	mov	result1, #0
071c0     0C 00 90 5D |  if_ne	jmp	#LR__0606
071c4                 | LR__0604
071c4     01 AA 06 F1 | 	add	local03, #1
071c8     90 FF 9F FD | 	jmp	#LR__0602
071cc                 | LR__0605
071cc                 | ' return true
071cc     01 7A 66 F6 | 	neg	result1, #1
071d0                 | LR__0606
071d0     E7 F0 03 F6 | 	mov	ptra, fp
071d4     F2 00 A0 FD | 	call	#popregs_
071d8                 | _isdec_ret
071d8     2D 00 64 FD | 	ret
071dc                 | 
071dc                 | ' 
071dc                 | ' ' Check if the part is a string.  
071dc                 | ' 
071dc                 | ' function isstring(s as string) as boolean
071dc                 | _isstring
071dc     01 CA 05 F6 | 	mov	COUNT_, #1
071e0     E8 00 A0 FD | 	call	#pushregs_
071e4                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
071e4     49 A7 02 F6 | 	mov	local01, arg01
071e8     01 94 06 F6 | 	mov	arg02, #1
071ec     94 F0 B1 FD | 	call	#__system__Left_S
071f0     3D 93 02 F6 | 	mov	arg01, result1
071f4     95 01 00 FF 
071f8     FB 95 06 F6 | 	mov	arg02, ##@LR__5909
071fc     04 D8 B1 FD | 	call	#__system___string_cmp
07200     00 7A 4E F2 | 	cmps	result1, #0 wz
07204     28 00 90 5D |  if_ne	jmp	#LR__0610
07208     53 93 02 F6 | 	mov	arg01, local01
0720c     01 94 06 F6 | 	mov	arg02, #1
07210     F8 F0 B1 FD | 	call	#__system__Right_S
07214     3D 93 02 F6 | 	mov	arg01, result1
07218     95 01 00 FF 
0721c     FD 95 06 F6 | 	mov	arg02, ##@LR__5910
07220     E0 D7 B1 FD | 	call	#__system___string_cmp
07224     00 7A 4E F2 | 	cmps	result1, #0 wz
07228     01 7A 66 A6 |  if_e	neg	result1, #1
0722c     04 00 90 AD |  if_e	jmp	#LR__0611
07230                 | LR__0610
07230     00 7A 06 F6 | 	mov	result1, #0
07234                 | LR__0611
07234     E7 F0 03 F6 | 	mov	ptra, fp
07238     F2 00 A0 FD | 	call	#popregs_
0723c                 | _isstring_ret
0723c     2D 00 64 FD | 	ret
07240                 | 
07240                 | ' 
07240                 | ' ' getnoteval. Returns the frequency of note token
07240                 | ' 
07240                 | ' function getnoteval(token) as single
07240                 | _getnoteval
07240     02 CA 05 F6 | 	mov	COUNT_, #2
07244     E8 00 A0 FD | 	call	#pushregs_
07248     01 00 00 FF 
0724c     00 93 86 F1 | 	sub	arg01, ##768
07250     49 95 52 F6 | 	abs	arg02, arg01 wc
07254     0C 94 16 FD | 	qdiv	arg02, #12
07258     32 95 02 F6 | 	mov	arg02, objptr
0725c     15 00 00 FF 
07260     D8 94 06 F1 | 	add	arg02, ##10968
07264     19 7A 62 FD | 	getqy	result1
07268     3D 7B 82 F6 | 	negc	result1, result1
0726c     02 7A 66 F0 | 	shl	result1, #2
07270     4A 7B 02 F1 | 	add	result1, arg02
07274     49 95 52 F6 | 	abs	arg02, arg01 wc
07278     0C 94 16 FD | 	qdiv	arg02, #12
0727c     3D A7 02 FB | 	rdlong	local01, result1
07280     01 92 06 F6 | 	mov	arg01, #1
07284                 | ' noteexp=1+(note/12) 
07284                 | ' return (2.0^noteexp)*notebase
07284     18 94 62 FD | 	getqx	arg02
07288     4A 93 82 F3 | 	sumc	arg01, arg02
0728c     49 93 52 F6 | 	abs	arg01, arg01 wc
07290     1F A8 C6 C9 |  if_b	decod	local02, #31
07294     00 A8 06 36 |  if_ae	mov	local02, #0
07298     0C FA B1 FD | 	call	#__system___float_fromuns
0729c     54 7B 62 F5 | 	xor	result1, local02
072a0     3D 95 02 F6 | 	mov	arg02, result1
072a4     1E 92 C6 F9 | 	decod	arg01, #30
072a8     18 0D B2 FD | 	call	#__system____builtin_powf
072ac     3D 93 02 F6 | 	mov	arg01, result1
072b0     53 95 02 F6 | 	mov	arg02, local01
072b4     F4 FD B1 FD | 	call	#__system___float_mul
072b8     E7 F0 03 F6 | 	mov	ptra, fp
072bc     F2 00 A0 FD | 	call	#popregs_
072c0                 | _getnoteval_ret
072c0     2D 00 64 FD | 	ret
072c4                 | 
072c4                 | ' 
072c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072c4                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
072c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072c4                 | ' 
072c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072c4                 | ' '
072c4                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
072c4                 | ' '
072c4                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
072c4                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
072c4                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
072c4                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
072c4                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
072c4                 | ' ' 
072c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072c4                 | ' 
072c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072c4                 | ' ' Helper functions to manage program lines
072c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072c4                 | ' 
072c4                 | ' '----- delete a line from a program
072c4                 | ' 
072c4                 | ' function deleteline(aline as ulong) as integer
072c4                 | _deleteline
072c4     05 CA 05 F6 | 	mov	COUNT_, #5
072c8     E8 00 A0 FD | 	call	#pushregs_
072cc     2C F0 07 F1 | 	add	ptra, #44
072d0     49 A7 02 F6 | 	mov	local01, arg01
072d4     4B 00 00 FF 
072d8     A8 64 06 F1 | 	add	objptr, ##38568
072dc     32 A9 02 FB | 	rdlong	local02, objptr
072e0                 | ' 
072e0                 | ' searchptr=programstart
072e0                 | ' do
072e0     3F 00 00 FF 
072e4     DC 65 86 F1 | 	sub	objptr, ##32732
072e8                 | LR__0620
072e8     E7 92 02 F6 | 	mov	arg01, fp
072ec     14 92 06 F1 | 	add	arg01, #20
072f0     54 95 02 F6 | 	mov	arg02, local02
072f4     18 96 06 F6 | 	mov	arg03, #24
072f8     C0 CA B1 FD | 	call	#_psram_spin2_read1
072fc     54 97 02 F6 | 	mov	arg03, local02
07300     28 CE 05 F1 | 	add	fp, #40
07304     E7 A8 02 FB | 	rdlong	local02, fp
07308     14 CE 85 F1 | 	sub	fp, #20
0730c     E7 94 02 FB | 	rdlong	arg02, fp
07310     14 CE 85 F1 | 	sub	fp, #20
07314     53 95 12 F2 | 	cmp	arg02, local01 wc
07318     28 CE 05 C1 |  if_b	add	fp, #40
0731c     E7 AA 02 CB |  if_b	rdlong	local03, fp
07320     28 CE 85 C1 |  if_b	sub	fp, #40
07324     FF FF 3F CF 
07328     FF AB 0E C2 |  if_b	cmp	local03, ##2147483647 wz
0732c     B8 FF 9F 4D |  if_c_and_nz	jmp	#LR__0620
07330     0B 00 00 FF 
07334     CC 64 86 F1 | 	sub	objptr, ##5836
07338                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
07338     14 CE 05 F1 | 	add	fp, #20
0733c     E7 AA 02 FB | 	rdlong	local03, fp
07340     14 CE 85 F1 | 	sub	fp, #20
07344     53 AB 0A F2 | 	cmp	local03, local01 wz
07348     01 7A 66 56 |  if_ne	neg	result1, #1
0734c     2C 02 90 5D |  if_ne	jmp	#LR__0625
07350     4B 93 02 F6 | 	mov	arg01, arg03
07354     01 94 66 F6 | 	neg	arg02, #1
07358     A0 9E B1 FD | 	call	#_pslpoke
0735c                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
0735c                 | ' 
0735c                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
0735c     28 CE 05 F1 | 	add	fp, #40
07360     E7 96 02 FB | 	rdlong	arg03, fp
07364     28 CE 85 F1 | 	sub	fp, #40
07368     FF FF 3F FF 
0736c     FF 97 0E F2 | 	cmp	arg03, ##2147483647 wz
07370     24 CE 05 A1 |  if_e	add	fp, #36
07374     E7 AC 02 AB |  if_e	rdlong	local04, fp
07378     24 CE 85 A1 |  if_e	sub	fp, #36
0737c     FF FF 7F AF 
07380     FF AD 0E A2 |  if_e	cmp	local04, ##-1 wz
07384     88 00 90 5D |  if_ne	jmp	#LR__0621
07388     4B 00 00 FF 
0738c     A8 64 06 F1 | 	add	objptr, ##38568
07390     00 04 80 FF 
07394     32 01 68 FC | 	wrlong	##524288, objptr
07398     07 00 00 FF 
0739c     2C 64 86 F1 | 	sub	objptr, ##3628
073a0     00 04 80 FF 
073a4     32 01 68 FC | 	wrlong	##524288, objptr
073a8     07 00 00 FF 
073ac     30 64 06 F1 | 	add	objptr, ##3632
073b0     32 01 68 FC | 	wrlong	#0, objptr
073b4     04 64 06 F1 | 	add	objptr, #4
073b8     FF FF FF FF 
073bc     32 FF 6B FC | 	wrlong	##-1, objptr
073c0     4B 00 00 FF 
073c4     B0 64 86 F1 | 	sub	objptr, ##38576
073c8     00 92 06 F6 | 	mov	arg01, #0
073cc     01 94 66 F6 | 	neg	arg02, #1
073d0     28 9E B1 FD | 	call	#_pslpoke
073d4     10 92 06 F6 | 	mov	arg01, #16
073d8     01 94 66 F6 | 	neg	arg02, #1
073dc     1C 9E B1 FD | 	call	#_pslpoke
073e0     14 92 06 F6 | 	mov	arg01, #20
073e4     1E 94 CE F9 | 	bmask	arg02, #30
073e8     10 9E B1 FD | 	call	#_pslpoke
073ec     51 00 00 FF 
073f0     D8 64 06 F1 | 	add	objptr, ##41688
073f4     00 04 80 FF 
073f8     32 01 68 FC | 	wrlong	##524288, objptr
073fc     04 64 06 F1 | 	add	objptr, #4
07400     00 04 80 FF 
07404     32 01 68 FC | 	wrlong	##524288, objptr
07408     51 00 00 FF 
0740c     DC 64 86 F1 | 	sub	objptr, ##41692
07410                 | LR__0621
07410                 | ' 
07410                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
07410     28 CE 05 F1 | 	add	fp, #40
07414     E7 AE 02 FB | 	rdlong	local05, fp
07418     28 CE 85 F1 | 	sub	fp, #40
0741c     FF FF 3F FF 
07420     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
07424     74 00 90 5D |  if_ne	jmp	#LR__0622
07428     24 CE 05 F1 | 	add	fp, #36
0742c     E7 AC 02 FB | 	rdlong	local04, fp
07430     24 CE 85 F1 | 	sub	fp, #36
07434     FF FF 7F FF 
07438     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0743c     5C 00 90 AD |  if_e	jmp	#LR__0622
07440     24 CE 05 F1 | 	add	fp, #36
07444     E7 92 02 FB | 	rdlong	arg01, fp
07448     24 CE 85 F1 | 	sub	fp, #36
0744c     14 92 06 F1 | 	add	arg01, #20
07450     1E 94 CE F9 | 	bmask	arg02, #30
07454     A4 9D B1 FD | 	call	#_pslpoke
07458     24 CE 05 F1 | 	add	fp, #36
0745c     E7 AE 02 FB | 	rdlong	local05, fp
07460     4B 00 00 FF 
07464     B0 64 06 F1 | 	add	objptr, ##38576
07468     32 AF 62 FC | 	wrlong	local05, objptr
0746c     4B 00 00 FF 
07470     B0 64 86 F1 | 	sub	objptr, ##38576
07474     E7 92 02 FB | 	rdlong	arg01, fp
07478     24 CE 85 F1 | 	sub	fp, #36
0747c     9C 9E B1 FD | 	call	#_pslpeek
07480     4B 00 00 FF 
07484     AC 64 06 F1 | 	add	objptr, ##38572
07488     32 7B 62 FC | 	wrlong	result1, objptr
0748c     4B 00 00 FF 
07490     AC 64 86 F1 | 	sub	objptr, ##38572
07494                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
07494                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
07494                 | '   lastline=pslpeek(header(4))
07494                 | '   return 0
07494     00 7A 06 F6 | 	mov	result1, #0
07498     E0 00 90 FD | 	jmp	#LR__0625
0749c                 | LR__0622
0749c                 | ' 
0749c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
0749c     28 CE 05 F1 | 	add	fp, #40
074a0     E7 AE 02 FB | 	rdlong	local05, fp
074a4     28 CE 85 F1 | 	sub	fp, #40
074a8     FF FF 3F FF 
074ac     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
074b0     58 00 90 AD |  if_e	jmp	#LR__0623
074b4     24 CE 05 F1 | 	add	fp, #36
074b8     E7 AC 02 FB | 	rdlong	local04, fp
074bc     24 CE 85 F1 | 	sub	fp, #36
074c0     FF FF 7F FF 
074c4     FF AD 0E F2 | 	cmp	local04, ##-1 wz
074c8     40 00 90 5D |  if_ne	jmp	#LR__0623
074cc     28 CE 05 F1 | 	add	fp, #40
074d0     E7 92 02 FB | 	rdlong	arg01, fp
074d4     28 CE 85 F1 | 	sub	fp, #40
074d8     10 92 06 F1 | 	add	arg01, #16
074dc     01 94 66 F6 | 	neg	arg02, #1
074e0     18 9D B1 FD | 	call	#_pslpoke
074e4     28 CE 05 F1 | 	add	fp, #40
074e8     E7 AE 02 FB | 	rdlong	local05, fp
074ec     28 CE 85 F1 | 	sub	fp, #40
074f0     4B 00 00 FF 
074f4     A8 64 06 F1 | 	add	objptr, ##38568
074f8     32 AF 62 FC | 	wrlong	local05, objptr
074fc     4B 00 00 FF 
07500     A8 64 86 F1 | 	sub	objptr, ##38568
07504                 | ' '   print "deleted first line"
07504                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
07504                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
07504                 | '   return 0
07504     00 7A 06 F6 | 	mov	result1, #0
07508     70 00 90 FD | 	jmp	#LR__0625
0750c                 | LR__0623
0750c                 | ' 
0750c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
0750c     28 CE 05 F1 | 	add	fp, #40
07510     E7 AE 02 FB | 	rdlong	local05, fp
07514     28 CE 85 F1 | 	sub	fp, #40
07518     FF FF 3F FF 
0751c     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
07520     24 CE 05 51 |  if_ne	add	fp, #36
07524     E7 AC 02 5B |  if_ne	rdlong	local04, fp
07528     24 CE 85 51 |  if_ne	sub	fp, #36
0752c     FF FF 7F 5F 
07530     FF AD 0E 52 |  if_ne	cmp	local04, ##-1 wz
07534     40 00 90 AD |  if_e	jmp	#LR__0624
07538     28 CE 05 F1 | 	add	fp, #40
0753c     E7 92 02 FB | 	rdlong	arg01, fp
07540     10 92 06 F1 | 	add	arg01, #16
07544     04 CE 85 F1 | 	sub	fp, #4
07548     E7 94 02 FB | 	rdlong	arg02, fp
0754c     24 CE 85 F1 | 	sub	fp, #36
07550     A8 9C B1 FD | 	call	#_pslpoke
07554     24 CE 05 F1 | 	add	fp, #36
07558     E7 92 02 FB | 	rdlong	arg01, fp
0755c     14 92 06 F1 | 	add	arg01, #20
07560     04 CE 05 F1 | 	add	fp, #4
07564     E7 94 02 FB | 	rdlong	arg02, fp
07568     28 CE 85 F1 | 	sub	fp, #40
0756c     8C 9C B1 FD | 	call	#_pslpoke
07570                 | '    pslpoke(header(5)+16,header(4))  
07570                 | '    pslpoke(header(4)+20, header(5))
07570                 | '    return 0
07570     00 7A 06 F6 | 	mov	result1, #0
07574     04 00 90 FD | 	jmp	#LR__0625
07578                 | LR__0624
07578     00 7A 06 F6 | 	mov	result1, #0
0757c                 | LR__0625
0757c     E7 F0 03 F6 | 	mov	ptra, fp
07580     F2 00 A0 FD | 	call	#popregs_
07584                 | _deleteline_ret
07584     2D 00 64 FD | 	ret
07588                 | 
07588                 | ' 
07588                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
07588                 | ' 
07588                 | ' sub save_line
07588                 | _save_line
07588     03 CA 05 F6 | 	mov	COUNT_, #3
0758c     E8 00 A0 FD | 	call	#pushregs_
07590     4B 00 00 FF 
07594     9C 64 06 F1 | 	add	objptr, ##38556
07598     32 97 02 FB | 	rdlong	arg03, objptr
0759c     01 96 06 F1 | 	add	arg03, #1
075a0     05 00 00 FF 
075a4     18 64 86 F1 | 	sub	objptr, ##2584
075a8     32 95 02 FB | 	rdlong	arg02, objptr
075ac     4B 95 02 FD | 	qmul	arg02, arg03
075b0     0E 00 00 FF 
075b4     44 64 86 F1 | 	sub	objptr, ##7236
075b8     32 93 02 FB | 	rdlong	arg01, objptr
075bc     38 00 00 FF 
075c0     40 64 86 F1 | 	sub	objptr, ##28736
075c4     49 A7 02 F6 | 	mov	local01, arg01
075c8     18 A8 62 FD | 	getqx	local02
075cc     D7 06 48 FB | 	callpa	#(@LR__0631-@LR__0630)>>2,fcache_load_ptr_
075d0                 | LR__0630
075d0     53 7B CA FA | 	rdbyte	result1, local01 wz
075d4     01 A6 06 51 |  if_ne	add	local01, #1
075d8     F4 FF 9F 5D |  if_ne	jmp	#LR__0630
075dc                 | LR__0631
075dc     49 A7 82 F1 | 	sub	local01, arg01
075e0     03 A6 CE F7 | 	test	local01, #3 wz
075e4     02 A6 46 50 |  if_ne	shr	local01, #2
075e8     01 A6 06 51 |  if_ne	add	local01, #1
075ec     02 A6 66 50 |  if_ne	shl	local01, #2
075f0     54 AB 02 F6 | 	mov	local03, local02
075f4     53 AB 02 F1 | 	add	local03, local01
075f8     44 00 00 FF 
075fc     7C 64 06 F1 | 	add	objptr, ##34940
07600     32 97 02 FB | 	rdlong	arg03, objptr
07604     54 97 02 F1 | 	add	arg03, local02
07608     04 00 00 FF 
0760c     28 64 06 F1 | 	add	objptr, ##2088
07610     32 97 62 FC | 	wrlong	arg03, objptr
07614     04 64 06 F1 | 	add	objptr, #4
07618     32 A7 62 FC | 	wrlong	local01, objptr
0761c     0C 64 86 F1 | 	sub	objptr, #12
07620     32 93 02 F6 | 	mov	arg01, objptr
07624     04 00 00 FF 
07628     20 64 86 F1 | 	sub	objptr, ##2080
0762c     32 95 02 FB | 	rdlong	arg02, objptr
07630     54 97 02 F6 | 	mov	arg03, local02
07634     38 00 00 FF 
07638     B0 65 86 F1 | 	sub	objptr, ##29104
0763c     18 C8 B1 FD | 	call	#_psram_spin2_write
07640     2C 00 00 FF 
07644     74 65 06 F1 | 	add	objptr, ##22900
07648     32 93 02 FB | 	rdlong	arg01, objptr
0764c     0C 00 00 FF 
07650     3C 64 06 F1 | 	add	objptr, ##6204
07654     32 95 02 FB | 	rdlong	arg02, objptr
07658     54 95 02 F1 | 	add	arg02, local02
0765c     53 97 02 F6 | 	mov	arg03, local01
07660     38 00 00 FF 
07664     B0 65 86 F1 | 	sub	objptr, ##29104
07668     EC C7 B1 FD | 	call	#_psram_spin2_write
0766c     38 00 00 FF 
07670     B0 65 06 F1 | 	add	objptr, ##29104
07674     32 A7 02 FB | 	rdlong	local01, objptr
07678     55 A7 02 F1 | 	add	local01, local03
0767c     32 A7 62 FC | 	wrlong	local01, objptr
07680     44 00 00 FF 
07684     7C 64 86 F1 | 	sub	objptr, ##34940
07688     E7 F0 03 F6 | 	mov	ptra, fp
0768c     F2 00 A0 FD | 	call	#popregs_
07690                 | _save_line_ret
07690     2D 00 64 FD | 	ret
07694                 | 
07694                 | ' 
07694                 | ' '----- Insert a new line into the middle of the program
07694                 | ' 
07694                 | ' function insertline(aline as ulong) as integer
07694                 | _insertline
07694     04 CA 05 F6 | 	mov	COUNT_, #4
07698     E8 00 A0 FD | 	call	#pushregs_
0769c     28 F0 07 F1 | 	add	ptra, #40
076a0     49 A7 02 F6 | 	mov	local01, arg01
076a4     4B 00 00 FF 
076a8     A8 64 06 F1 | 	add	objptr, ##38568
076ac     32 A9 02 FB | 	rdlong	local02, objptr
076b0                 | ' 
076b0                 | ' do
076b0     3F 00 00 FF 
076b4     DC 65 86 F1 | 	sub	objptr, ##32732
076b8                 | LR__0640
076b8     E7 92 02 F6 | 	mov	arg01, fp
076bc     10 92 06 F1 | 	add	arg01, #16
076c0     54 95 02 F6 | 	mov	arg02, local02
076c4     18 96 06 F6 | 	mov	arg03, #24
076c8     F0 C6 B1 FD | 	call	#_psram_spin2_read1
076cc     54 AB 02 F6 | 	mov	local03, local02
076d0     24 CE 05 F1 | 	add	fp, #36
076d4     E7 A8 02 FB | 	rdlong	local02, fp
076d8     14 CE 85 F1 | 	sub	fp, #20
076dc     E7 96 02 FB | 	rdlong	arg03, fp
076e0     10 CE 85 F1 | 	sub	fp, #16
076e4     53 97 12 F2 | 	cmp	arg03, local01 wc
076e8     24 CE 05 C1 |  if_b	add	fp, #36
076ec     E7 AC 02 CB |  if_b	rdlong	local04, fp
076f0     24 CE 85 C1 |  if_b	sub	fp, #36
076f4     FF FF 3F CF 
076f8     FF AD 0E C2 |  if_b	cmp	local04, ##2147483647 wz
076fc     B8 FF 9F 4D |  if_c_and_nz	jmp	#LR__0640
07700     0B 00 00 FF 
07704     CC 64 86 F1 | 	sub	objptr, ##5836
07708                 | ' 
07708                 | ' if header(0)=aline then return -1 				' delete it first
07708     10 CE 05 F1 | 	add	fp, #16
0770c     E7 AC 02 FB | 	rdlong	local04, fp
07710     10 CE 85 F1 | 	sub	fp, #16
07714     53 AD 0A F2 | 	cmp	local04, local01 wz
07718     01 7A 66 A6 |  if_e	neg	result1, #1
0771c     24 01 90 AD |  if_e	jmp	#LR__0643
07720                 | ' if header(0)<aline then return -2 				' end of program reached
07720     10 CE 05 F1 | 	add	fp, #16
07724     E7 AC 02 FB | 	rdlong	local04, fp
07728     10 CE 85 F1 | 	sub	fp, #16
0772c     53 AD 12 F2 | 	cmp	local04, local01 wc
07730     02 7A 66 C6 |  if_b	neg	result1, #2
07734     0C 01 90 CD |  if_b	jmp	#LR__0643
07738                 | ' 
07738                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
07738     20 CE 05 F1 | 	add	fp, #32
0773c     E7 AC 02 FB | 	rdlong	local04, fp
07740     20 CE 85 F1 | 	sub	fp, #32
07744     FF FF 7F FF 
07748     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0774c     64 00 90 5D |  if_ne	jmp	#LR__0641
07750     44 00 00 FF 
07754     7C 64 06 F1 | 	add	objptr, ##34940
07758     32 AD 02 FB | 	rdlong	local04, objptr
0775c     07 00 00 FF 
07760     2C 64 06 F1 | 	add	objptr, ##3628
07764     32 AD 62 FC | 	wrlong	local04, objptr
07768     55 93 02 F6 | 	mov	arg01, local03
0776c     10 92 06 F1 | 	add	arg01, #16
07770     07 00 00 FF 
07774     2C 64 86 F1 | 	sub	objptr, ##3628
07778     32 95 02 FB | 	rdlong	arg02, objptr
0777c     44 00 00 FF 
07780     7C 64 86 F1 | 	sub	objptr, ##34940
07784     74 9A B1 FD | 	call	#_pslpoke
07788     48 00 00 FF 
0778c     AC 64 06 F1 | 	add	objptr, ##37036
07790     FF FF FF FF 
07794     32 FF 6B FC | 	wrlong	##-1, objptr
07798     04 64 06 F1 | 	add	objptr, #4
0779c     32 AB 62 FC | 	wrlong	local03, objptr
077a0     48 00 00 FF 
077a4     B0 64 86 F1 | 	sub	objptr, ##37040
077a8     DC FD BF FD | 	call	#_save_line
077ac                 | '   programstart=programptr
077ac                 | '   pslpoke(lineptr2+16,programptr)
077ac                 | '   ucompiledline(4)=$FFFF_FFFF
077ac                 | '   ucompiledline(5)=lineptr2
077ac                 | '   save_line
077ac                 | '   return 0
077ac     00 7A 06 F6 | 	mov	result1, #0
077b0     90 00 90 FD | 	jmp	#LR__0643
077b4                 | LR__0641
077b4                 | ' 
077b4                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
077b4     20 CE 05 F1 | 	add	fp, #32
077b8     E7 AC 02 FB | 	rdlong	local04, fp
077bc     20 CE 85 F1 | 	sub	fp, #32
077c0     FF FF 7F FF 
077c4     FF AD 0E F2 | 	cmp	local04, ##-1 wz
077c8     74 00 90 AD |  if_e	jmp	#LR__0642
077cc     20 CE 05 F1 | 	add	fp, #32
077d0     E7 AC 02 FB | 	rdlong	local04, fp
077d4     20 CE 85 F1 | 	sub	fp, #32
077d8     48 00 00 FF 
077dc     AC 64 06 F1 | 	add	objptr, ##37036
077e0     32 AD 62 FC | 	wrlong	local04, objptr
077e4     04 64 06 F1 | 	add	objptr, #4
077e8     32 AB 62 FC | 	wrlong	local03, objptr
077ec     10 AA 06 F1 | 	add	local03, #16
077f0     04 00 00 FF 
077f4     34 64 86 F1 | 	sub	objptr, ##2100
077f8     32 95 02 FB | 	rdlong	arg02, objptr
077fc     44 00 00 FF 
07800     7C 64 86 F1 | 	sub	objptr, ##34940
07804     55 93 02 F6 | 	mov	arg01, local03
07808     F0 99 B1 FD | 	call	#_pslpoke
0780c     20 CE 05 F1 | 	add	fp, #32
07810     E7 92 02 FB | 	rdlong	arg01, fp
07814     20 CE 85 F1 | 	sub	fp, #32
07818     14 92 06 F1 | 	add	arg01, #20
0781c     44 00 00 FF 
07820     7C 64 06 F1 | 	add	objptr, ##34940
07824     32 95 02 FB | 	rdlong	arg02, objptr
07828     44 00 00 FF 
0782c     7C 64 86 F1 | 	sub	objptr, ##34940
07830     C8 99 B1 FD | 	call	#_pslpoke
07834     50 FD BF FD | 	call	#_save_line
07838                 | '   ucompiledline(4)=header(4)
07838                 | '   ucompiledline(5)=lineptr2
07838                 | '   pslpoke(lineptr2+16,programptr)
07838                 | '   pslpoke(header(4)+20,programptr)
07838                 | '   save_line
07838                 | '   return 0
07838     00 7A 06 F6 | 	mov	result1, #0
0783c     04 00 90 FD | 	jmp	#LR__0643
07840                 | LR__0642
07840     00 7A 06 F6 | 	mov	result1, #0
07844                 | LR__0643
07844     E7 F0 03 F6 | 	mov	ptra, fp
07848     F2 00 A0 FD | 	call	#popregs_
0784c                 | _insertline_ret
0784c     2D 00 64 FD | 	ret
07850                 | 
07850                 | ' 
07850                 | ' '----- Adds a new line at the end of the program
07850                 | ' 
07850                 | ' sub add_line_at_end(aline) 
07850                 | _add_line_at_end
07850     4B 00 00 FF 
07854     AC 64 06 F1 | 	add	objptr, ##38572
07858     32 93 62 FC | 	wrlong	arg01, objptr
0785c     04 64 06 F1 | 	add	objptr, #4
07860     32 95 02 FB | 	rdlong	arg02, objptr
07864     03 00 00 FF 
07868     04 64 86 F1 | 	sub	objptr, ##1540
0786c     32 95 62 FC | 	wrlong	arg02, objptr
07870     03 00 00 FF 
07874     04 64 06 F1 | 	add	objptr, ##1540
07878     32 93 02 FB | 	rdlong	arg01, objptr
0787c     14 92 06 F1 | 	add	arg01, #20
07880     07 00 00 FF 
07884     34 64 86 F1 | 	sub	objptr, ##3636
07888     32 95 02 FB | 	rdlong	arg02, objptr
0788c     44 00 00 FF 
07890     7C 64 86 F1 | 	sub	objptr, ##34940
07894     64 99 B1 FD | 	call	#_pslpoke
07898     44 00 00 FF 
0789c     7C 64 06 F1 | 	add	objptr, ##34940
078a0     32 95 02 FB | 	rdlong	arg02, objptr
078a4     07 00 00 FF 
078a8     34 64 06 F1 | 	add	objptr, ##3636
078ac     32 95 62 FC | 	wrlong	arg02, objptr
078b0     03 00 00 FF 
078b4     00 64 86 F1 | 	sub	objptr, ##1536
078b8     FF FF BF FF 
078bc     32 FF 6B FC | 	wrlong	##2147483647, objptr
078c0                 | ' 
078c0                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
078c0                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
078c0     04 00 00 FF 
078c4     34 64 86 F1 | 	sub	objptr, ##2100
078c8     32 95 02 FB | 	rdlong	arg02, objptr
078cc     44 00 00 FF 
078d0     7C 64 86 F1 | 	sub	objptr, ##34940
078d4     00 04 00 FF 
078d8     00 94 0E F2 | 	cmp	arg02, ##524288 wz
078dc     48 00 00 AF 
078e0     AC 64 06 A1 |  if_e	add	objptr, ##37036
078e4     FF FF FF AF 
078e8     32 FF 6B AC |  if_e	wrlong	##-1, objptr
078ec     48 00 00 AF 
078f0     AC 64 86 A1 |  if_e	sub	objptr, ##37036
078f4     90 FC BF FD | 	call	#_save_line
078f8     44 00 00 FF 
078fc     7C 64 06 F1 | 	add	objptr, ##34940
07900     32 93 02 FB | 	rdlong	arg01, objptr
07904     44 00 00 FF 
07908     7C 64 86 F1 | 	sub	objptr, ##34940
0790c     01 94 66 F6 | 	neg	arg02, #1
07910     E8 98 B1 FD | 	call	#_pslpoke
07914                 | _add_line_at_end_ret
07914     2D 00 64 FD | 	ret
07918                 | 
07918                 | ' 
07918                 | ' '--------------------------------------------------------------------------------------------------------------------------
07918                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
07918                 | ' '--------------------------------------------------------------------------------------------------------------------------
07918                 | ' 
07918                 | ' '--------------------------------------------------------------------------------------------------------------------------
07918                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
07918                 | ' '--------------------------------------------------------------------------------------------------------------------------
07918                 | ' 
07918                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
07918                 | ' 
07918                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
07918                 | _compile_immediate
07918     0A CA 05 F6 | 	mov	COUNT_, #10
0791c     E8 00 A0 FD | 	call	#pushregs_
07920                 | _compile_immediate_enter
07920     49 AD 02 F6 | 	mov	local04, arg01
07924     4A AF 02 F6 | 	mov	local05, arg02
07928     00 B0 06 F6 | 	mov	local06, #0
0792c     00 B2 06 F6 | 	mov	local07, #0
07930     00 B4 06 F6 | 	mov	local08, #0
07934                 | ' 
07934                 | ' ' linetype=cont+1
07934                 | ' ' 1 : this is the first part of the line that will continue
07934                 | ' ' 2 - this is the continuation of the line
07934                 | ' ' 3 - this is the last continued line
07934                 | ' ' 4 - this is the one and only part
07934                 | ' ' 5 - continued after if/else
07934                 | ' 
07934                 | ' err=0
07934                 | ' cmd=0
07934                 | ' vars=0
07934                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
07934     02 AC 0E F2 | 	cmp	local04, #2 wz
07938     03 AC 0E 52 |  if_ne	cmp	local04, #3 wz
0793c     36 00 00 AF 
07940     30 64 06 A1 |  if_e	add	objptr, ##27696
07944     32 B3 02 AB |  if_e	rdlong	local07, objptr
07948     02 00 00 AF 
0794c     34 64 06 A1 |  if_e	add	objptr, ##1076
07950     32 03 68 AC |  if_e	wrlong	#1, objptr
07954     38 00 00 AF 
07958     64 64 86 A1 |  if_e	sub	objptr, ##28772
0795c                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
0795c     04 AC 0E F2 | 	cmp	local04, #4 wz
07960     01 AC 0E 52 |  if_ne	cmp	local04, #1 wz
07964     2C 00 90 5D |  if_ne	jmp	#LR__0650
07968     36 00 00 FF 
0796c     38 64 06 F1 | 	add	objptr, ##27704
07970     32 B3 02 FB | 	rdlong	local07, objptr
07974     02 00 00 FF 
07978     2C 64 06 F1 | 	add	objptr, ##1068
0797c     32 05 68 FC | 	wrlong	#2, objptr
07980     13 00 00 FF 
07984     38 64 06 F1 | 	add	objptr, ##9784
07988     32 05 68 FC | 	wrlong	#2, objptr
0798c     4B 00 00 FF 
07990     9C 64 86 F1 | 	sub	objptr, ##38556
07994                 | LR__0650
07994                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07994     05 AC 0E F2 | 	cmp	local04, #5 wz
07998     40 00 90 5D |  if_ne	jmp	#LR__0651
0799c     38 00 00 FF 
079a0     64 64 06 F1 | 	add	objptr, ##28772
079a4     32 7D 02 FB | 	rdlong	result2, objptr
079a8     3E B7 02 F6 | 	mov	local09, result2
079ac     03 B6 66 F0 | 	shl	local09, #3
079b0     02 00 00 FF 
079b4     38 64 86 F1 | 	sub	objptr, ##1080
079b8     32 B7 02 F1 | 	add	local09, objptr
079bc     04 B6 06 F1 | 	add	local09, #4
079c0     5B B3 02 FB | 	rdlong	local07, local09
079c4     01 7C 06 F1 | 	add	result2, #1
079c8     02 00 00 FF 
079cc     38 64 06 F1 | 	add	objptr, ##1080
079d0     32 7D 62 FC | 	wrlong	result2, objptr
079d4     38 00 00 FF 
079d8     64 64 86 F1 | 	sub	objptr, ##28772
079dc                 | LR__0651
079dc                 | ' 
079dc                 | ' 'print  "In compile_immediate cmd=:", cmd
079dc                 | ' 451 select case cmd
079dc     5C B2 0E F2 | 	cmp	local07, #92 wz
079e0     E8 02 90 AD |  if_e	jmp	#LR__0652
079e4     B9 B2 0E F2 | 	cmp	local07, #185 wz
079e8     EC 02 90 AD |  if_e	jmp	#LR__0653
079ec     47 B2 0E F2 | 	cmp	local07, #71 wz
079f0     F4 02 90 AD |  if_e	jmp	#LR__0654
079f4     59 B2 0E F2 | 	cmp	local07, #89 wz
079f8     FC 02 90 AD |  if_e	jmp	#LR__0655
079fc     C3 B2 0E F2 | 	cmp	local07, #195 wz
07a00     04 03 90 AD |  if_e	jmp	#LR__0656
07a04     45 B2 0E F2 | 	cmp	local07, #69 wz
07a08     08 03 90 AD |  if_e	jmp	#LR__0657
07a0c     69 B2 0E F2 | 	cmp	local07, #105 wz
07a10     10 03 90 AD |  if_e	jmp	#LR__0658
07a14     40 B2 0E F2 | 	cmp	local07, #64 wz
07a18     18 07 90 AD |  if_e	jmp	#LR__0735
07a1c     B4 B2 0E F2 | 	cmp	local07, #180 wz
07a20     0C 03 90 AD |  if_e	jmp	#LR__0659
07a24     49 B2 0E F2 | 	cmp	local07, #73 wz
07a28     10 03 90 AD |  if_e	jmp	#LR__0660
07a2c     C4 B2 0E F2 | 	cmp	local07, #196 wz
07a30     14 03 90 AD |  if_e	jmp	#LR__0661
07a34     AE B2 0E F2 | 	cmp	local07, #174 wz
07a38     18 03 90 AD |  if_e	jmp	#LR__0662
07a3c     B0 B2 0E F2 | 	cmp	local07, #176 wz
07a40     1C 03 90 AD |  if_e	jmp	#LR__0663
07a44     AF B2 0E F2 | 	cmp	local07, #175 wz
07a48     20 03 90 AD |  if_e	jmp	#LR__0664
07a4c     B1 B2 0E F2 | 	cmp	local07, #177 wz
07a50     24 03 90 AD |  if_e	jmp	#LR__0665
07a54     CF B2 0E F2 | 	cmp	local07, #207 wz
07a58     28 03 90 AD |  if_e	jmp	#LR__0666
07a5c     68 B2 0E F2 | 	cmp	local07, #104 wz
07a60     2C 03 90 AD |  if_e	jmp	#LR__0667
07a64     B7 B2 0E F2 | 	cmp	local07, #183 wz
07a68     C8 06 90 AD |  if_e	jmp	#LR__0735
07a6c     D9 B2 0E F2 | 	cmp	local07, #217 wz
07a70     28 03 90 AD |  if_e	jmp	#LR__0668
07a74     74 B2 0E F2 | 	cmp	local07, #116 wz
07a78     2C 03 90 AD |  if_e	jmp	#LR__0669
07a7c     73 B2 0E F2 | 	cmp	local07, #115 wz
07a80     34 03 90 AD |  if_e	jmp	#LR__0670
07a84     6C B2 0E F2 | 	cmp	local07, #108 wz
07a88     3C 03 90 AD |  if_e	jmp	#LR__0671
07a8c     89 B2 0E F2 | 	cmp	local07, #137 wz
07a90     A0 06 90 AD |  if_e	jmp	#LR__0735
07a94     C2 B2 0E F2 | 	cmp	local07, #194 wz
07a98     3C 03 90 AD |  if_e	jmp	#LR__0672
07a9c     72 B2 0E F2 | 	cmp	local07, #114 wz
07aa0     40 03 90 AD |  if_e	jmp	#LR__0673
07aa4     5D B2 0E F2 | 	cmp	local07, #93 wz
07aa8     44 03 90 AD |  if_e	jmp	#LR__0674
07aac     96 B2 0E F2 | 	cmp	local07, #150 wz
07ab0     4C 03 90 AD |  if_e	jmp	#LR__0675
07ab4     43 B2 0E F2 | 	cmp	local07, #67 wz
07ab8     50 03 90 AD |  if_e	jmp	#LR__0676
07abc     5A B2 0E F2 | 	cmp	local07, #90 wz
07ac0     58 03 90 AD |  if_e	jmp	#LR__0677
07ac4     AB B2 0E F2 | 	cmp	local07, #171 wz
07ac8     68 06 90 AD |  if_e	jmp	#LR__0735
07acc     BD B2 0E F2 | 	cmp	local07, #189 wz
07ad0     58 03 90 AD |  if_e	jmp	#LR__0678
07ad4     BB B2 0E F2 | 	cmp	local07, #187 wz
07ad8     60 03 90 AD |  if_e	jmp	#LR__0679
07adc     4E B2 0E F2 | 	cmp	local07, #78 wz
07ae0     68 03 90 AD |  if_e	jmp	#LR__0680
07ae4     A9 B2 0E F2 | 	cmp	local07, #169 wz
07ae8     80 03 90 AD |  if_e	jmp	#LR__0682
07aec     46 B2 0E F2 | 	cmp	local07, #70 wz
07af0     98 03 90 AD |  if_e	jmp	#LR__0684
07af4     71 B2 0E F2 | 	cmp	local07, #113 wz
07af8     A0 03 90 AD |  if_e	jmp	#LR__0685
07afc     60 B2 0E F2 | 	cmp	local07, #96 wz
07b00     A4 03 90 AD |  if_e	jmp	#LR__0686
07b04     4A B2 0E F2 | 	cmp	local07, #74 wz
07b08     A8 03 90 AD |  if_e	jmp	#LR__0687
07b0c     48 B2 0E F2 | 	cmp	local07, #72 wz
07b10     AC 03 90 AD |  if_e	jmp	#LR__0688
07b14     58 B2 0E F2 | 	cmp	local07, #88 wz
07b18     B4 03 90 AD |  if_e	jmp	#LR__0689
07b1c     5F B2 0E F2 | 	cmp	local07, #95 wz
07b20     BC 03 90 AD |  if_e	jmp	#LR__0690
07b24     B5 B2 0E F2 | 	cmp	local07, #181 wz
07b28     C0 03 90 AD |  if_e	jmp	#LR__0691
07b2c     8A B2 0E F2 | 	cmp	local07, #138 wz
07b30     C8 03 90 AD |  if_e	jmp	#LR__0692
07b34     4C B2 0E F2 | 	cmp	local07, #76 wz
07b38     CC 03 90 AD |  if_e	jmp	#LR__0693
07b3c     52 B2 0E F2 | 	cmp	local07, #82 wz
07b40     D4 03 90 AD |  if_e	jmp	#LR__0694
07b44     97 B2 0E F2 | 	cmp	local07, #151 wz
07b48     DC 03 90 AD |  if_e	jmp	#LR__0695
07b4c     C6 B2 0E F2 | 	cmp	local07, #198 wz
07b50     E0 03 90 AD |  if_e	jmp	#LR__0696
07b54     61 B2 0E F2 | 	cmp	local07, #97 wz
07b58     E4 03 90 AD |  if_e	jmp	#LR__0697
07b5c     63 B2 0E F2 | 	cmp	local07, #99 wz
07b60     E8 03 90 AD |  if_e	jmp	#LR__0698
07b64     41 B2 0E F2 | 	cmp	local07, #65 wz
07b68     C8 05 90 AD |  if_e	jmp	#LR__0735
07b6c     4B B2 0E F2 | 	cmp	local07, #75 wz
07b70     E4 03 90 AD |  if_e	jmp	#LR__0699
07b74     C1 B2 0E F2 | 	cmp	local07, #193 wz
07b78     E8 03 90 AD |  if_e	jmp	#LR__0700
07b7c     B3 B2 0E F2 | 	cmp	local07, #179 wz
07b80     EC 03 90 AD |  if_e	jmp	#LR__0701
07b84     5E B2 0E F2 | 	cmp	local07, #94 wz
07b88     F0 03 90 AD |  if_e	jmp	#LR__0702
07b8c     7C B2 0E F2 | 	cmp	local07, #124 wz
07b90     F4 03 90 AD |  if_e	jmp	#LR__0703
07b94     7D B2 0E F2 | 	cmp	local07, #125 wz
07b98     F8 03 90 AD |  if_e	jmp	#LR__0704
07b9c     7E B2 0E F2 | 	cmp	local07, #126 wz
07ba0     FC 03 90 AD |  if_e	jmp	#LR__0705
07ba4     7F B2 0E F2 | 	cmp	local07, #127 wz
07ba8     00 04 90 AD |  if_e	jmp	#LR__0706
07bac     80 B2 0E F2 | 	cmp	local07, #128 wz
07bb0     04 04 90 AD |  if_e	jmp	#LR__0707
07bb4     55 B2 0E F2 | 	cmp	local07, #85 wz
07bb8     08 04 90 AD |  if_e	jmp	#LR__0708
07bbc     75 B2 0E F2 | 	cmp	local07, #117 wz
07bc0     0C 04 90 AD |  if_e	jmp	#LR__0709
07bc4     42 B2 0E F2 | 	cmp	local07, #66 wz
07bc8     14 04 90 AD |  if_e	jmp	#LR__0710
07bcc     95 B2 0E F2 | 	cmp	local07, #149 wz
07bd0     1C 04 90 AD |  if_e	jmp	#LR__0711
07bd4     AC B2 0E F2 | 	cmp	local07, #172 wz
07bd8     58 05 90 AD |  if_e	jmp	#LR__0735
07bdc     81 B2 0E F2 | 	cmp	local07, #129 wz
07be0     18 04 90 AD |  if_e	jmp	#LR__0712
07be4     44 B2 0E F2 | 	cmp	local07, #68 wz
07be8     1C 04 90 AD |  if_e	jmp	#LR__0713
07bec     BC B2 0E F2 | 	cmp	local07, #188 wz
07bf0     20 04 90 AD |  if_e	jmp	#LR__0714
07bf4     88 B2 0E F2 | 	cmp	local07, #136 wz
07bf8     38 05 90 AD |  if_e	jmp	#LR__0735
07bfc     B6 B2 0E F2 | 	cmp	local07, #182 wz
07c00     20 04 90 AD |  if_e	jmp	#LR__0715
07c04     92 B2 0E F2 | 	cmp	local07, #146 wz
07c08     28 04 90 AD |  if_e	jmp	#LR__0716
07c0c     BE B2 0E F2 | 	cmp	local07, #190 wz
07c10     DC 05 90 AD |  if_e	jmp	#LR__0736
07c14     C7 B2 0E F2 | 	cmp	local07, #199 wz
07c18     D4 B2 0E 52 |  if_ne	cmp	local07, #212 wz
07c1c     AA B2 0E 52 |  if_ne	cmp	local07, #170 wz
07c20     10 05 90 AD |  if_e	jmp	#LR__0735
07c24     4D B2 0E F2 | 	cmp	local07, #77 wz
07c28     14 04 90 AD |  if_e	jmp	#LR__0717
07c2c     51 B2 0E F2 | 	cmp	local07, #81 wz
07c30     1C 04 90 AD |  if_e	jmp	#LR__0718
07c34     DA B2 0E F2 | 	cmp	local07, #218 wz
07c38     24 04 90 AD |  if_e	jmp	#LR__0719
07c3c     D2 B2 0E F2 | 	cmp	local07, #210 wz
07c40     28 04 90 AD |  if_e	jmp	#LR__0720
07c44     8E B2 0E F2 | 	cmp	local07, #142 wz
07c48     30 04 90 AD |  if_e	jmp	#LR__0721
07c4c     90 B2 0E F2 | 	cmp	local07, #144 wz
07c50     34 04 90 AD |  if_e	jmp	#LR__0722
07c54     8D B2 0E F2 | 	cmp	local07, #141 wz
07c58     38 04 90 AD |  if_e	jmp	#LR__0723
07c5c     8C B2 0E F2 | 	cmp	local07, #140 wz
07c60     3C 04 90 AD |  if_e	jmp	#LR__0724
07c64     91 B2 0E F2 | 	cmp	local07, #145 wz
07c68     40 04 90 AD |  if_e	jmp	#LR__0725
07c6c     8B B2 0E F2 | 	cmp	local07, #139 wz
07c70     44 04 90 AD |  if_e	jmp	#LR__0726
07c74     8F B2 0E F2 | 	cmp	local07, #143 wz
07c78     48 04 90 AD |  if_e	jmp	#LR__0727
07c7c     B2 B2 0E F2 | 	cmp	local07, #178 wz
07c80     4C 04 90 AD |  if_e	jmp	#LR__0728
07c84     6D B2 0E F2 | 	cmp	local07, #109 wz
07c88     54 04 90 AD |  if_e	jmp	#LR__0729
07c8c     70 B2 0E F2 | 	cmp	local07, #112 wz
07c90     A0 04 90 AD |  if_e	jmp	#LR__0735
07c94     56 B2 0E F2 | 	cmp	local07, #86 wz
07c98     50 04 90 AD |  if_e	jmp	#LR__0730
07c9c     57 B2 0E F2 | 	cmp	local07, #87 wz
07ca0     90 04 90 AD |  if_e	jmp	#LR__0735
07ca4     79 B2 0E F2 | 	cmp	local07, #121 wz
07ca8     4C 04 90 AD |  if_e	jmp	#LR__0731
07cac     77 B2 0E F2 | 	cmp	local07, #119 wz
07cb0     50 04 90 AD |  if_e	jmp	#LR__0732
07cb4     78 B2 0E F2 | 	cmp	local07, #120 wz
07cb8     54 04 90 AD |  if_e	jmp	#LR__0733
07cbc     01 00 00 FF 
07cc0     04 B2 0E F2 | 	cmp	local07, ##516 wz
07cc4     54 04 90 AD |  if_e	jmp	#LR__0734
07cc8     24 05 90 FD | 	jmp	#LR__0736
07ccc                 | LR__0652
07ccc     54 0B B0 FD | 	call	#_compile_fun_2p
07cd0     3D B1 02 F6 | 	mov	local06, result1
07cd4     5C 04 90 FD | 	jmp	#LR__0735
07cd8                 | LR__0653
07cd8     18 0E B0 FD | 	call	#_compile_fun_varp
07cdc     3D B5 02 F6 | 	mov	local08, result1
07ce0     3E B1 02 F6 | 	mov	local06, result2
07ce4     4C 04 90 FD | 	jmp	#LR__0735
07ce8                 | LR__0654
07ce8     08 0E B0 FD | 	call	#_compile_fun_varp
07cec     3D B5 02 F6 | 	mov	local08, result1
07cf0     3E B1 02 F6 | 	mov	local06, result2
07cf4     3C 04 90 FD | 	jmp	#LR__0735
07cf8                 | LR__0655
07cf8     F8 0D B0 FD | 	call	#_compile_fun_varp
07cfc     3D B5 02 F6 | 	mov	local08, result1
07d00     3E B1 02 F6 | 	mov	local06, result2
07d04     2C 04 90 FD | 	jmp	#LR__0735
07d08                 | LR__0656
07d08                 | ' return expr()
07d08     84 41 B0 FD | 	call	#_expr
07d0c     3D B1 02 F6 | 	mov	local06, result1
07d10     20 04 90 FD | 	jmp	#LR__0735
07d14                 | LR__0657
07d14     DC 0D B0 FD | 	call	#_compile_fun_varp
07d18     3D B5 02 F6 | 	mov	local08, result1
07d1c     3E B1 02 F6 | 	mov	local06, result2
07d20     10 04 90 FD | 	jmp	#LR__0735
07d24                 | LR__0658
07d24                 | ' return expr()
07d24     68 41 B0 FD | 	call	#_expr
07d28     3D B1 02 F6 | 	mov	local06, result1
07d2c     04 04 90 FD | 	jmp	#LR__0735
07d30                 | LR__0659
07d30                 | ' return expr()
07d30     5C 41 B0 FD | 	call	#_expr
07d34     3D B1 02 F6 | 	mov	local06, result1
07d38     F8 03 90 FD | 	jmp	#LR__0735
07d3c                 | LR__0660
07d3c                 | ' return expr()
07d3c     50 41 B0 FD | 	call	#_expr
07d40     3D B1 02 F6 | 	mov	local06, result1
07d44     EC 03 90 FD | 	jmp	#LR__0735
07d48                 | LR__0661
07d48     D8 0A B0 FD | 	call	#_compile_fun_2p
07d4c     3D B1 02 F6 | 	mov	local06, result1
07d50     E0 03 90 FD | 	jmp	#LR__0735
07d54                 | LR__0662
07d54     CC 0A B0 FD | 	call	#_compile_fun_2p
07d58     3D B1 02 F6 | 	mov	local06, result1
07d5c     D4 03 90 FD | 	jmp	#LR__0735
07d60                 | LR__0663
07d60     C0 0A B0 FD | 	call	#_compile_fun_2p
07d64     3D B1 02 F6 | 	mov	local06, result1
07d68     C8 03 90 FD | 	jmp	#LR__0735
07d6c                 | LR__0664
07d6c     B4 0A B0 FD | 	call	#_compile_fun_2p
07d70     3D B1 02 F6 | 	mov	local06, result1
07d74     BC 03 90 FD | 	jmp	#LR__0735
07d78                 | LR__0665
07d78     A8 0A B0 FD | 	call	#_compile_fun_2p
07d7c     3D B1 02 F6 | 	mov	local06, result1
07d80     B0 03 90 FD | 	jmp	#LR__0735
07d84                 | LR__0666
07d84                 | ' return expr()
07d84     08 41 B0 FD | 	call	#_expr
07d88     3D B1 02 F6 | 	mov	local06, result1
07d8c     A4 03 90 FD | 	jmp	#LR__0735
07d90                 | LR__0667
07d90                 | ' return expr()
07d90     FC 40 B0 FD | 	call	#_expr
07d94     3D B1 02 F6 | 	mov	local06, result1
07d98     98 03 90 FD | 	jmp	#LR__0735
07d9c                 | LR__0668
07d9c     84 0A B0 FD | 	call	#_compile_fun_2p
07da0     3D B1 02 F6 | 	mov	local06, result1
07da4     8C 03 90 FD | 	jmp	#LR__0735
07da8                 | LR__0669
07da8     48 0D B0 FD | 	call	#_compile_fun_varp
07dac     3D B5 02 F6 | 	mov	local08, result1
07db0     3E B1 02 F6 | 	mov	local06, result2
07db4     7C 03 90 FD | 	jmp	#LR__0735
07db8                 | LR__0670
07db8     38 0D B0 FD | 	call	#_compile_fun_varp
07dbc     3D B5 02 F6 | 	mov	local08, result1
07dc0     3E B1 02 F6 | 	mov	local06, result2
07dc4     6C 03 90 FD | 	jmp	#LR__0735
07dc8                 | LR__0671
07dc8     28 0D B0 FD | 	call	#_compile_fun_varp
07dcc     3D B5 02 F6 | 	mov	local08, result1
07dd0     3E B1 02 F6 | 	mov	local06, result2
07dd4     5C 03 90 FD | 	jmp	#LR__0735
07dd8                 | LR__0672
07dd8                 | ' return expr()
07dd8     B4 40 B0 FD | 	call	#_expr
07ddc     3D B1 02 F6 | 	mov	local06, result1
07de0     50 03 90 FD | 	jmp	#LR__0735
07de4                 | LR__0673
07de4     2C 22 B0 FD | 	call	#_compile_dim
07de8     3D B1 02 F6 | 	mov	local06, result1
07dec     00 04 90 FD | 	jmp	#LR__0736
07df0                 | LR__0674
07df0     00 0D B0 FD | 	call	#_compile_fun_varp
07df4     3D B5 02 F6 | 	mov	local08, result1
07df8     3E B1 02 F6 | 	mov	local06, result2
07dfc     34 03 90 FD | 	jmp	#LR__0735
07e00                 | LR__0675
07e00     20 0A B0 FD | 	call	#_compile_fun_2p
07e04     3D B1 02 F6 | 	mov	local06, result1
07e08     28 03 90 FD | 	jmp	#LR__0735
07e0c                 | LR__0676
07e0c     E4 0C B0 FD | 	call	#_compile_fun_varp
07e10     3D B5 02 F6 | 	mov	local08, result1
07e14     3E B1 02 F6 | 	mov	local06, result2
07e18     18 03 90 FD | 	jmp	#LR__0735
07e1c                 | LR__0677
07e1c     57 93 02 F6 | 	mov	arg01, local05
07e20     B8 20 B0 FD | 	call	#_compile_else
07e24     3D B1 02 F6 | 	mov	local06, result1
07e28     C4 03 90 FD | 	jmp	#LR__0736
07e2c                 | LR__0678
07e2c     C4 0C B0 FD | 	call	#_compile_fun_varp
07e30     3D B5 02 F6 | 	mov	local08, result1
07e34     3E B1 02 F6 | 	mov	local06, result2
07e38     F8 02 90 FD | 	jmp	#LR__0735
07e3c                 | LR__0679
07e3c     B4 0C B0 FD | 	call	#_compile_fun_varp
07e40     3D B5 02 F6 | 	mov	local08, result1
07e44     3E B1 02 F6 | 	mov	local06, result2
07e48     E8 02 90 FD | 	jmp	#LR__0735
07e4c                 | LR__0680
07e4c     01 AE 16 F2 | 	cmp	local05, #1 wc
07e50     08 00 90 CD |  if_b	jmp	#LR__0681
07e54     40 33 B0 FD | 	call	#_compile_goto
07e58     94 03 90 FD | 	jmp	#LR__0736
07e5c                 | LR__0681
07e5c     19 92 06 F6 | 	mov	arg01, #25
07e60     00 94 06 F6 | 	mov	arg02, #0
07e64     F8 91 B1 FD | 	call	#_printerror
07e68     84 03 90 FD | 	jmp	#LR__0736
07e6c                 | LR__0682
07e6c     01 AE 16 F2 | 	cmp	local05, #1 wc
07e70     08 00 90 CD |  if_b	jmp	#LR__0683
07e74     BC 32 B0 FD | 	call	#_compile_gosub
07e78     74 03 90 FD | 	jmp	#LR__0736
07e7c                 | LR__0683
07e7c     19 92 06 F6 | 	mov	arg01, #25
07e80     00 94 06 F6 | 	mov	arg02, #0
07e84     D8 91 B1 FD | 	call	#_printerror
07e88     64 03 90 FD | 	jmp	#LR__0736
07e8c                 | LR__0684
07e8c     64 0C B0 FD | 	call	#_compile_fun_varp
07e90     3D B5 02 F6 | 	mov	local08, result1
07e94     3E B1 02 F6 | 	mov	local06, result2
07e98     98 02 90 FD | 	jmp	#LR__0735
07e9c                 | LR__0685
07e9c     FC 0A B0 FD | 	call	#_compile_fun_4p
07ea0     3D B1 02 F6 | 	mov	local06, result1
07ea4     8C 02 90 FD | 	jmp	#LR__0735
07ea8                 | LR__0686
07ea8                 | ' return expr()
07ea8     E4 3F B0 FD | 	call	#_expr
07eac     3D B1 02 F6 | 	mov	local06, result1
07eb0     80 02 90 FD | 	jmp	#LR__0735
07eb4                 | LR__0687
07eb4     10 28 B0 FD | 	call	#_compile_for
07eb8     3D B1 02 F6 | 	mov	local06, result1
07ebc     30 03 90 FD | 	jmp	#LR__0736
07ec0                 | LR__0688
07ec0     30 0C B0 FD | 	call	#_compile_fun_varp
07ec4     3D B5 02 F6 | 	mov	local08, result1
07ec8     3E B1 02 F6 | 	mov	local06, result2
07ecc     64 02 90 FD | 	jmp	#LR__0735
07ed0                 | LR__0689
07ed0     57 93 02 F6 | 	mov	arg01, local05
07ed4     7C 1E B0 FD | 	call	#_compile_if
07ed8     3D B1 02 F6 | 	mov	local06, result1
07edc     10 03 90 FD | 	jmp	#LR__0736
07ee0                 | LR__0690
07ee0                 | ' return expr()
07ee0     AC 3F B0 FD | 	call	#_expr
07ee4     3D B1 02 F6 | 	mov	local06, result1
07ee8     48 02 90 FD | 	jmp	#LR__0735
07eec                 | LR__0691
07eec     D0 0D B0 FD | 	call	#_compile_input
07ef0     3D B5 02 F6 | 	mov	local08, result1
07ef4     3E B1 02 F6 | 	mov	local06, result2
07ef8     38 02 90 FD | 	jmp	#LR__0735
07efc                 | LR__0692
07efc                 | ' return expr()
07efc     90 3F B0 FD | 	call	#_expr
07f00     3D B1 02 F6 | 	mov	local06, result1
07f04     2C 02 90 FD | 	jmp	#LR__0735
07f08                 | LR__0693
07f08     E8 0B B0 FD | 	call	#_compile_fun_varp
07f0c     3D B5 02 F6 | 	mov	local08, result1
07f10     3E B1 02 F6 | 	mov	local06, result2
07f14     1C 02 90 FD | 	jmp	#LR__0735
07f18                 | LR__0694
07f18     D8 0B B0 FD | 	call	#_compile_fun_varp
07f1c     3D B5 02 F6 | 	mov	local08, result1
07f20     3E B1 02 F6 | 	mov	local06, result2
07f24     0C 02 90 FD | 	jmp	#LR__0735
07f28                 | LR__0695
07f28     F8 08 B0 FD | 	call	#_compile_fun_2p
07f2c     3D B1 02 F6 | 	mov	local06, result1
07f30     00 02 90 FD | 	jmp	#LR__0735
07f34                 | LR__0696
07f34                 | ' return expr()
07f34     58 3F B0 FD | 	call	#_expr
07f38     3D B1 02 F6 | 	mov	local06, result1
07f3c     F4 01 90 FD | 	jmp	#LR__0735
07f40                 | LR__0697
07f40                 | ' return expr()
07f40     4C 3F B0 FD | 	call	#_expr
07f44     3D B1 02 F6 | 	mov	local06, result1
07f48     E8 01 90 FD | 	jmp	#LR__0735
07f4c                 | LR__0698
07f4c                 | ' return expr()
07f4c     40 3F B0 FD | 	call	#_expr
07f50     3D B1 02 F6 | 	mov	local06, result1
07f54     DC 01 90 FD | 	jmp	#LR__0735
07f58                 | LR__0699
07f58     44 30 B0 FD | 	call	#_compile_next
07f5c     3D B1 02 F6 | 	mov	local06, result1
07f60     8C 02 90 FD | 	jmp	#LR__0736
07f64                 | LR__0700
07f64     A4 35 B0 FD | 	call	#_compile_on
07f68     3D B1 02 F6 | 	mov	local06, result1
07f6c     80 02 90 FD | 	jmp	#LR__0736
07f70                 | LR__0701
07f70     38 09 B0 FD | 	call	#_compile_fun_3p
07f74     3D B1 02 F6 | 	mov	local06, result1
07f78     B8 01 90 FD | 	jmp	#LR__0735
07f7c                 | LR__0702
07f7c                 | ' return expr()
07f7c     10 3F B0 FD | 	call	#_expr
07f80     3D B1 02 F6 | 	mov	local06, result1
07f84     AC 01 90 FD | 	jmp	#LR__0735
07f88                 | LR__0703
07f88                 | ' return expr()
07f88     04 3F B0 FD | 	call	#_expr
07f8c     3D B1 02 F6 | 	mov	local06, result1
07f90     A0 01 90 FD | 	jmp	#LR__0735
07f94                 | LR__0704
07f94                 | ' return expr()
07f94     F8 3E B0 FD | 	call	#_expr
07f98     3D B1 02 F6 | 	mov	local06, result1
07f9c     94 01 90 FD | 	jmp	#LR__0735
07fa0                 | LR__0705
07fa0                 | ' return expr()
07fa0     EC 3E B0 FD | 	call	#_expr
07fa4     3D B1 02 F6 | 	mov	local06, result1
07fa8     88 01 90 FD | 	jmp	#LR__0735
07fac                 | LR__0706
07fac     EC 09 B0 FD | 	call	#_compile_fun_4p
07fb0     3D B1 02 F6 | 	mov	local06, result1
07fb4     7C 01 90 FD | 	jmp	#LR__0735
07fb8                 | LR__0707
07fb8                 | ' return expr()
07fb8     D4 3E B0 FD | 	call	#_expr
07fbc     3D B1 02 F6 | 	mov	local06, result1
07fc0     70 01 90 FD | 	jmp	#LR__0735
07fc4                 | LR__0708
07fc4     5C 08 B0 FD | 	call	#_compile_fun_2p
07fc8     3D B1 02 F6 | 	mov	local06, result1
07fcc     64 01 90 FD | 	jmp	#LR__0735
07fd0                 | LR__0709
07fd0     20 0B B0 FD | 	call	#_compile_fun_varp
07fd4     3D B5 02 F6 | 	mov	local08, result1
07fd8     3E B1 02 F6 | 	mov	local06, result2
07fdc     54 01 90 FD | 	jmp	#LR__0735
07fe0                 | LR__0710
07fe0     10 0B B0 FD | 	call	#_compile_fun_varp
07fe4     3D B5 02 F6 | 	mov	local08, result1
07fe8     3E B1 02 F6 | 	mov	local06, result2
07fec     44 01 90 FD | 	jmp	#LR__0735
07ff0                 | LR__0711
07ff0     30 08 B0 FD | 	call	#_compile_fun_2p
07ff4     3D B1 02 F6 | 	mov	local06, result1
07ff8     38 01 90 FD | 	jmp	#LR__0735
07ffc                 | LR__0712
07ffc     24 08 B0 FD | 	call	#_compile_fun_2p
08000     3D B1 02 F6 | 	mov	local06, result1
08004     2C 01 90 FD | 	jmp	#LR__0735
08008                 | LR__0713
08008     70 16 B0 FD | 	call	#_compile_print
0800c     3D B1 02 F6 | 	mov	local06, result1
08010     DC 01 90 FD | 	jmp	#LR__0736
08014                 | LR__0714
08014     DC 0A B0 FD | 	call	#_compile_fun_varp
08018     3D B5 02 F6 | 	mov	local08, result1
0801c     3E B1 02 F6 | 	mov	local06, result2
08020     10 01 90 FD | 	jmp	#LR__0735
08024                 | LR__0715
08024     A8 0B B0 FD | 	call	#_compile_read
08028     3D B5 02 F6 | 	mov	local08, result1
0802c     3E B1 02 F6 | 	mov	local06, result2
08030     00 01 90 FD | 	jmp	#LR__0735
08034                 | LR__0716
08034                 | ' return expr()
08034     58 3E B0 FD | 	call	#_expr
08038     3D B1 02 F6 | 	mov	local06, result1
0803c     F4 00 90 FD | 	jmp	#LR__0735
08040                 | LR__0717
08040     B0 0A B0 FD | 	call	#_compile_fun_varp
08044     3D B5 02 F6 | 	mov	local08, result1
08048     3E B1 02 F6 | 	mov	local06, result2
0804c     E4 00 90 FD | 	jmp	#LR__0735
08050                 | LR__0718
08050     A0 0A B0 FD | 	call	#_compile_fun_varp
08054     3D B5 02 F6 | 	mov	local08, result1
08058     3E B1 02 F6 | 	mov	local06, result2
0805c     D4 00 90 FD | 	jmp	#LR__0735
08060                 | LR__0719
08060     C0 07 B0 FD | 	call	#_compile_fun_2p
08064     3D B1 02 F6 | 	mov	local06, result1
08068     C8 00 90 FD | 	jmp	#LR__0735
0806c                 | LR__0720
0806c     84 0A B0 FD | 	call	#_compile_fun_varp
08070     3D B5 02 F6 | 	mov	local08, result1
08074     3E B1 02 F6 | 	mov	local06, result2
08078     B8 00 90 FD | 	jmp	#LR__0735
0807c                 | LR__0721
0807c     A4 07 B0 FD | 	call	#_compile_fun_2p
08080     3D B1 02 F6 | 	mov	local06, result1
08084     AC 00 90 FD | 	jmp	#LR__0735
08088                 | LR__0722
08088     98 07 B0 FD | 	call	#_compile_fun_2p
0808c     3D B1 02 F6 | 	mov	local06, result1
08090     A0 00 90 FD | 	jmp	#LR__0735
08094                 | LR__0723
08094     8C 07 B0 FD | 	call	#_compile_fun_2p
08098     3D B1 02 F6 | 	mov	local06, result1
0809c     94 00 90 FD | 	jmp	#LR__0735
080a0                 | LR__0724
080a0     80 07 B0 FD | 	call	#_compile_fun_2p
080a4     3D B1 02 F6 | 	mov	local06, result1
080a8     88 00 90 FD | 	jmp	#LR__0735
080ac                 | LR__0725
080ac     74 07 B0 FD | 	call	#_compile_fun_2p
080b0     3D B1 02 F6 | 	mov	local06, result1
080b4     7C 00 90 FD | 	jmp	#LR__0735
080b8                 | LR__0726
080b8     68 07 B0 FD | 	call	#_compile_fun_2p
080bc     3D B1 02 F6 | 	mov	local06, result1
080c0     70 00 90 FD | 	jmp	#LR__0735
080c4                 | LR__0727
080c4     5C 07 B0 FD | 	call	#_compile_fun_2p
080c8     3D B1 02 F6 | 	mov	local06, result1
080cc     64 00 90 FD | 	jmp	#LR__0735
080d0                 | LR__0728
080d0     20 0A B0 FD | 	call	#_compile_fun_varp
080d4     3D B5 02 F6 | 	mov	local08, result1
080d8     3E B1 02 F6 | 	mov	local06, result2
080dc     54 00 90 FD | 	jmp	#LR__0735
080e0                 | LR__0729
080e0     C8 07 B0 FD | 	call	#_compile_fun_3p
080e4     3D B1 02 F6 | 	mov	local06, result1
080e8     48 00 90 FD | 	jmp	#LR__0735
080ec                 | LR__0730
080ec                 | ' return expr()
080ec     A0 3D B0 FD | 	call	#_expr
080f0     3D B1 02 F6 | 	mov	local06, result1
080f4     3C 00 90 FD | 	jmp	#LR__0735
080f8                 | LR__0731
080f8     28 07 B0 FD | 	call	#_compile_fun_2p
080fc     3D B1 02 F6 | 	mov	local06, result1
08100     30 00 90 FD | 	jmp	#LR__0735
08104                 | LR__0732
08104     1C 07 B0 FD | 	call	#_compile_fun_2p
08108     3D B1 02 F6 | 	mov	local06, result1
0810c     24 00 90 FD | 	jmp	#LR__0735
08110                 | LR__0733
08110     10 07 B0 FD | 	call	#_compile_fun_2p
08114     3D B1 02 F6 | 	mov	local06, result1
08118     18 00 90 FD | 	jmp	#LR__0735
0811c                 | LR__0734
0811c     00 13 B0 FD | 	call	#_compile_array_assign
08120     3D B1 02 F6 | 	mov	local06, result1
08124     0E B0 0E F2 | 	cmp	local06, #14 wz
08128     C4 00 90 5D |  if_ne	jmp	#LR__0736
0812c                 | ' return 23
0812c     17 B0 06 F6 | 	mov	local06, #23
08130     BC 00 90 FD | 	jmp	#LR__0736
08134                 | ' return 23
08134                 | LR__0735
08134     59 AB 02 F6 | 	mov	local03, local07
08138     5A A7 02 F6 | 	mov	local01, local08
0813c     53 B7 02 F6 | 	mov	local09, local01
08140     54 B9 02 F6 | 	mov	local10, local02
08144     55 B3 02 F6 | 	mov	local07, local03
08148     4B 00 00 FF 
0814c     9C 64 06 F1 | 	add	objptr, ##38556
08150     32 A7 02 FB | 	rdlong	local01, objptr
08154     53 B5 02 F6 | 	mov	local08, local01
08158     01 B4 66 F0 | 	shl	local08, #1
0815c     53 B5 02 F1 | 	add	local08, local01
08160     02 B4 66 F0 | 	shl	local08, #2
08164     03 00 00 FF 
08168     00 64 86 F1 | 	sub	objptr, ##1536
0816c     32 B5 02 F1 | 	add	local08, objptr
08170     5A B7 62 FC | 	wrlong	local09, local08
08174     03 00 00 FF 
08178     00 64 06 F1 | 	add	objptr, ##1536
0817c     32 A7 02 FB | 	rdlong	local01, objptr
08180     53 B7 02 F6 | 	mov	local09, local01
08184     01 B6 66 F0 | 	shl	local09, #1
08188     53 B7 02 F1 | 	add	local09, local01
0818c     02 B6 66 F0 | 	shl	local09, #2
08190     03 00 00 FF 
08194     00 64 86 F1 | 	sub	objptr, ##1536
08198     32 B7 02 F1 | 	add	local09, objptr
0819c     04 B6 06 F1 | 	add	local09, #4
081a0     5B B9 62 FC | 	wrlong	local10, local09
081a4     03 00 00 FF 
081a8     00 64 06 F1 | 	add	objptr, ##1536
081ac     32 A7 02 FB | 	rdlong	local01, objptr
081b0     53 B9 02 F6 | 	mov	local10, local01
081b4     01 B8 66 F0 | 	shl	local10, #1
081b8     53 B9 02 F1 | 	add	local10, local01
081bc     02 B8 66 F0 | 	shl	local10, #2
081c0     03 00 00 FF 
081c4     00 64 86 F1 | 	sub	objptr, ##1536
081c8     32 B9 02 F1 | 	add	local10, objptr
081cc     08 B8 06 F1 | 	add	local10, #8
081d0     5C B3 62 FC | 	wrlong	local07, local10
081d4     03 00 00 FF 
081d8     00 64 06 F1 | 	add	objptr, ##1536
081dc     32 B7 02 FB | 	rdlong	local09, objptr
081e0     01 B6 06 F1 | 	add	local09, #1
081e4     32 B7 62 FC | 	wrlong	local09, objptr
081e8     4B 00 00 FF 
081ec     9C 64 86 F1 | 	sub	objptr, ##38556
081f0                 | LR__0736
081f0                 | ' 
081f0                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
081f0                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
081f0     03 AC 0E F2 | 	cmp	local04, #3 wz
081f4     04 AC 0E 52 |  if_ne	cmp	local04, #4 wz
081f8     38 00 90 5D |  if_ne	jmp	#LR__0737
081fc     4B 00 00 FF 
08200     9C 64 06 F1 | 	add	objptr, ##38556
08204     32 B9 02 FB | 	rdlong	local10, objptr
08208     5C A7 02 F6 | 	mov	local01, local10
0820c     01 A6 66 F0 | 	shl	local01, #1
08210     5C A7 02 F1 | 	add	local01, local10
08214     02 A6 66 F0 | 	shl	local01, #2
08218     03 00 00 FF 
0821c     00 64 86 F1 | 	sub	objptr, ##1536
08220     32 A7 02 F1 | 	add	local01, objptr
08224     08 A6 06 F1 | 	add	local01, #8
08228     53 FD 6B FC | 	wrlong	#510, local01
0822c     48 00 00 FF 
08230     9C 64 86 F1 | 	sub	objptr, ##37020
08234                 | LR__0737
08234                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
08234                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08234     4B 00 00 FF 
08238     9C 64 06 F1 | 	add	objptr, ##38556
0823c     32 A7 02 FB | 	rdlong	local01, objptr
08240     4B 00 00 FF 
08244     9C 64 86 F1 | 	sub	objptr, ##38556
08248     D7 52 48 FB | 	callpa	#(@LR__0740-@LR__0738)>>2,fcache_load_ptr_
0824c                 | LR__0738
0824c     53 B7 02 F6 | 	mov	local09, local01
08250     01 B6 66 F0 | 	shl	local09, #1
08254     53 B7 02 F1 | 	add	local09, local01
08258     02 B6 66 F0 | 	shl	local09, #2
0825c     32 B9 02 F6 | 	mov	local10, objptr
08260     48 00 00 FF 
08264     9C B8 06 F1 | 	add	local10, ##37020
08268     5C B7 02 F1 | 	add	local09, local10
0826c     08 B6 06 F1 | 	add	local09, #8
08270     5B B7 02 FB | 	rdlong	local09, local09
08274     9B B6 0E F2 | 	cmp	local09, #155 wz
08278     68 00 90 5D |  if_ne	jmp	#LR__0739
0827c     53 B7 02 F6 | 	mov	local09, local01
08280     01 B6 86 F1 | 	sub	local09, #1
08284     5B B9 02 F6 | 	mov	local10, local09
08288     01 B8 66 F0 | 	shl	local10, #1
0828c     5B B9 02 F1 | 	add	local10, local09
08290     02 B8 66 F0 | 	shl	local10, #2
08294     32 B7 02 F6 | 	mov	local09, objptr
08298     48 00 00 FF 
0829c     9C B6 06 F1 | 	add	local09, ##37020
082a0     5B B9 02 F1 | 	add	local10, local09
082a4     08 B8 06 F1 | 	add	local10, #8
082a8     5C B9 02 FB | 	rdlong	local10, local10
082ac     11 B8 0E F2 | 	cmp	local10, #17 wz
082b0     30 00 90 5D |  if_ne	jmp	#LR__0739
082b4     53 B7 02 F6 | 	mov	local09, local01
082b8     01 B6 86 F1 | 	sub	local09, #1
082bc     5B B9 02 F6 | 	mov	local10, local09
082c0     01 B8 66 F0 | 	shl	local10, #1
082c4     5B B9 02 F1 | 	add	local10, local09
082c8     02 B8 66 F0 | 	shl	local10, #2
082cc     32 B7 02 F6 | 	mov	local09, objptr
082d0     48 00 00 FF 
082d4     9C B6 06 F1 | 	add	local09, ##37020
082d8     5B B9 02 F1 | 	add	local10, local09
082dc     08 B8 06 F1 | 	add	local10, #8
082e0     5C 25 68 FC | 	wrlong	#18, local10
082e4                 | LR__0739
082e4     01 A6 86 F1 | 	sub	local01, #1
082e8     01 A6 56 F2 | 	cmps	local01, #1 wc
082ec     5C FF 9F 3D |  if_ae	jmp	#LR__0738
082f0                 | LR__0740
082f0                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
082f0                 | ' return err
082f0     58 7B 02 F6 | 	mov	result1, local06
082f4     E7 F0 03 F6 | 	mov	ptra, fp
082f8     F2 00 A0 FD | 	call	#popregs_
082fc                 | _compile_immediate_ret
082fc     2D 00 64 FD | 	ret
08300                 | 
08300                 | ' 
08300                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
08300                 | ' 
08300                 | ' function compile_immediate_assign(linetype as ulong) as ulong
08300                 | _compile_immediate_assign
08300     0C CA 05 F6 | 	mov	COUNT_, #12
08304     E8 00 A0 FD | 	call	#pushregs_
08308     49 AD 02 F6 | 	mov	local04, arg01
0830c     FF AA 06 F6 | 	mov	local03, #255
08310     01 AE 66 F6 | 	neg	local05, #1
08314     00 B0 06 F6 | 	mov	local06, #0
08318                 | ' 
08318                 | ' t1.result_type=result_error : t1.result.uresult=0
08318                 | ' i=-1: j=-1 : err=0
08318                 | ' 
08318                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
08318     02 AC 0E F2 | 	cmp	local04, #2 wz
0831c     03 AC 0E 52 |  if_ne	cmp	local04, #3 wz
08320     36 00 00 AF 
08324     2C 64 06 A1 |  if_e	add	objptr, ##27692
08328     32 B3 02 AB |  if_e	rdlong	local07, objptr
0832c     02 00 00 AF 
08330     38 64 06 A1 |  if_e	add	objptr, ##1080
08334     32 05 68 AC |  if_e	wrlong	#2, objptr
08338     38 00 00 AF 
0833c     64 64 86 A1 |  if_e	sub	objptr, ##28772
08340                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
08340     04 AC 0E F2 | 	cmp	local04, #4 wz
08344     01 AC 0E 52 |  if_ne	cmp	local04, #1 wz
08348     2C 00 90 5D |  if_ne	jmp	#LR__0750
0834c     36 00 00 FF 
08350     34 64 06 F1 | 	add	objptr, ##27700
08354     32 B3 02 FB | 	rdlong	local07, objptr
08358     02 00 00 FF 
0835c     30 64 06 F1 | 	add	objptr, ##1072
08360     32 07 68 FC | 	wrlong	#3, objptr
08364     13 00 00 FF 
08368     38 64 06 F1 | 	add	objptr, ##9784
0836c     32 05 68 FC | 	wrlong	#2, objptr
08370     4B 00 00 FF 
08374     9C 64 86 F1 | 	sub	objptr, ##38556
08378                 | LR__0750
08378                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
08378     05 AC 0E F2 | 	cmp	local04, #5 wz
0837c     3C 00 90 5D |  if_ne	jmp	#LR__0751
08380     38 00 00 FF 
08384     64 64 06 F1 | 	add	objptr, ##28772
08388     32 7B 02 FB | 	rdlong	result1, objptr
0838c     3D B3 02 F6 | 	mov	local07, result1
08390     03 B2 66 F0 | 	shl	local07, #3
08394     02 00 00 FF 
08398     38 64 86 F1 | 	sub	objptr, ##1080
0839c     32 B3 02 F1 | 	add	local07, objptr
083a0     59 B3 02 FB | 	rdlong	local07, local07
083a4     02 7A 06 F1 | 	add	result1, #2
083a8     02 00 00 FF 
083ac     38 64 06 F1 | 	add	objptr, ##1080
083b0     32 7B 62 FC | 	wrlong	result1, objptr
083b4     38 00 00 FF 
083b8     64 64 86 F1 | 	sub	objptr, ##28772
083bc                 | LR__0751
083bc     59 93 02 F6 | 	mov	arg01, local07
083c0     01 94 06 F6 | 	mov	arg02, #1
083c4     44 DF B1 FD | 	call	#__system__Right_S
083c8     3D B5 02 F6 | 	mov	local08, result1
083cc     C0 3A B0 FD | 	call	#_expr
083d0                 | ' 
083d0                 | ' suffix2$=right$(varname2$,1)
083d0                 | ' expr()
083d0                 | ' if varnum>0 then					' try to find a variable
083d0     36 00 00 FF 
083d4     28 64 06 F1 | 	add	objptr, ##27688
083d8     32 B7 02 FB | 	rdlong	local09, objptr
083dc     36 00 00 FF 
083e0     28 64 86 F1 | 	sub	objptr, ##27688
083e4     01 B6 56 F2 | 	cmps	local09, #1 wc
083e8     54 00 90 CD |  if_b	jmp	#LR__0754
083ec                 | '   for i=0 to varnum-1
083ec     00 B8 06 F6 | 	mov	local10, #0
083f0     36 00 00 FF 
083f4     28 64 06 F1 | 	add	objptr, ##27688
083f8     32 BB 02 FB | 	rdlong	local11, objptr
083fc     36 00 00 FF 
08400     28 64 86 F1 | 	sub	objptr, ##27688
08404                 | LR__0752
08404     5D B9 52 F2 | 	cmps	local10, local11 wc
08408     34 00 90 3D |  if_ae	jmp	#LR__0753
0840c                 | '     if variables(i).name=varname2$ then j=i : exit
0840c     5C B7 02 F6 | 	mov	local09, local10
08410     04 B6 66 F0 | 	shl	local09, #4
08414     32 95 02 F6 | 	mov	arg02, objptr
08418     16 00 00 FF 
0841c     18 94 06 F1 | 	add	arg02, ##11288
08420     4A B7 02 F1 | 	add	local09, arg02
08424     5B 93 02 FB | 	rdlong	arg01, local09
08428     59 95 02 F6 | 	mov	arg02, local07
0842c     D4 C5 B1 FD | 	call	#__system___string_cmp
08430     00 7A 0E F2 | 	cmp	result1, #0 wz
08434     5C AF 02 A6 |  if_e	mov	local05, local10
08438     01 B8 06 51 |  if_ne	add	local10, #1
0843c     C4 FF 9F 5D |  if_ne	jmp	#LR__0752
08440                 | LR__0753
08440                 | LR__0754
08440                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
08440     FF FF 7F FF 
08444     FF AF 0E F2 | 	cmp	local05, ##-1 wz
08448     60 00 90 5D |  if_ne	jmp	#LR__0755
0844c     36 00 00 FF 
08450     28 64 06 F1 | 	add	objptr, ##27688
08454     32 B7 02 FB | 	rdlong	local09, objptr
08458     36 00 00 FF 
0845c     28 64 86 F1 | 	sub	objptr, ##27688
08460     02 00 00 FF 
08464     00 B6 56 F2 | 	cmps	local09, ##1024 wc
08468     40 00 90 3D |  if_ae	jmp	#LR__0755
0846c     36 00 00 FF 
08470     28 64 06 F1 | 	add	objptr, ##27688
08474     32 BB 02 FB | 	rdlong	local11, objptr
08478     04 BA 66 F0 | 	shl	local11, #4
0847c     20 00 00 FF 
08480     10 64 86 F1 | 	sub	objptr, ##16400
08484     32 BB 02 F1 | 	add	local11, objptr
08488     5D B3 62 FC | 	wrlong	local07, local11
0848c     20 00 00 FF 
08490     10 64 06 F1 | 	add	objptr, ##16400
08494     32 B7 02 FB | 	rdlong	local09, objptr
08498     5B AF 02 F6 | 	mov	local05, local09
0849c     01 B6 06 F1 | 	add	local09, #1
084a0     32 B7 62 FC | 	wrlong	local09, objptr
084a4     36 00 00 FF 
084a8     28 64 86 F1 | 	sub	objptr, ##27688
084ac                 | LR__0755
084ac                 | ' if varnum>=maxvars then
084ac     36 00 00 FF 
084b0     28 64 06 F1 | 	add	objptr, ##27688
084b4     32 B7 02 FB | 	rdlong	local09, objptr
084b8     36 00 00 FF 
084bc     28 64 86 F1 | 	sub	objptr, ##27688
084c0     02 00 00 FF 
084c4     00 B6 56 F2 | 	cmps	local09, ##1024 wc
084c8     2D B0 06 36 |  if_ae	mov	local06, #45
084cc     BC 01 90 3D |  if_ae	jmp	#LR__0760
084d0     57 A7 02 F6 | 	mov	local01, local05
084d4     17 AA 06 F6 | 	mov	local03, #23
084d8     53 B7 02 F6 | 	mov	local09, local01
084dc     54 BD 02 F6 | 	mov	local12, local02
084e0     55 A7 02 F6 | 	mov	local01, local03
084e4     4B 00 00 FF 
084e8     9C 64 06 F1 | 	add	objptr, ##38556
084ec     32 BB 02 FB | 	rdlong	local11, objptr
084f0     5D B9 02 F6 | 	mov	local10, local11
084f4     01 B8 66 F0 | 	shl	local10, #1
084f8     5D B9 02 F1 | 	add	local10, local11
084fc     02 B8 66 F0 | 	shl	local10, #2
08500     03 00 00 FF 
08504     00 64 86 F1 | 	sub	objptr, ##1536
08508     32 B9 02 F1 | 	add	local10, objptr
0850c     5C B7 62 FC | 	wrlong	local09, local10
08510     03 00 00 FF 
08514     00 64 06 F1 | 	add	objptr, ##1536
08518     32 B7 02 FB | 	rdlong	local09, objptr
0851c     5B BB 02 F6 | 	mov	local11, local09
08520     01 BA 66 F0 | 	shl	local11, #1
08524     5B BB 02 F1 | 	add	local11, local09
08528     02 BA 66 F0 | 	shl	local11, #2
0852c     03 00 00 FF 
08530     00 64 86 F1 | 	sub	objptr, ##1536
08534     32 BB 02 F1 | 	add	local11, objptr
08538     04 BA 06 F1 | 	add	local11, #4
0853c     5D BD 62 FC | 	wrlong	local12, local11
08540     03 00 00 FF 
08544     00 64 06 F1 | 	add	objptr, ##1536
08548     32 B7 02 FB | 	rdlong	local09, objptr
0854c     5B BD 02 F6 | 	mov	local12, local09
08550     01 BC 66 F0 | 	shl	local12, #1
08554     5B BD 02 F1 | 	add	local12, local09
08558     02 BC 66 F0 | 	shl	local12, #2
0855c     03 00 00 FF 
08560     00 64 86 F1 | 	sub	objptr, ##1536
08564     32 BD 02 F1 | 	add	local12, objptr
08568     08 BC 06 F1 | 	add	local12, #8
0856c     5E A7 62 FC | 	wrlong	local01, local12
08570     03 00 00 FF 
08574     00 64 06 F1 | 	add	objptr, ##1536
08578     32 B7 02 FB | 	rdlong	local09, objptr
0857c     01 B6 06 F1 | 	add	local09, #1
08580     32 B7 62 FC | 	wrlong	local09, objptr
08584     4B 00 00 FF 
08588     9C 64 86 F1 | 	sub	objptr, ##38556
0858c                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
0858c                 | '   compiledline(lineptr)=t1:  lineptr+=1 
0858c                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
0858c     03 AC 0E F2 | 	cmp	local04, #3 wz
08590     04 AC 0E 52 |  if_ne	cmp	local04, #4 wz
08594     38 00 90 5D |  if_ne	jmp	#LR__0756
08598     4B 00 00 FF 
0859c     9C 64 06 F1 | 	add	objptr, ##38556
085a0     32 BD 02 FB | 	rdlong	local12, objptr
085a4     5E A7 02 F6 | 	mov	local01, local12
085a8     01 A6 66 F0 | 	shl	local01, #1
085ac     5E A7 02 F1 | 	add	local01, local12
085b0     02 A6 66 F0 | 	shl	local01, #2
085b4     03 00 00 FF 
085b8     00 64 86 F1 | 	sub	objptr, ##1536
085bc     32 A7 02 F1 | 	add	local01, objptr
085c0     08 A6 06 F1 | 	add	local01, #8
085c4     53 FD 6B FC | 	wrlong	#510, local01
085c8     48 00 00 FF 
085cc     9C 64 86 F1 | 	sub	objptr, ##37020
085d0                 | LR__0756
085d0                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
085d0     4B 00 00 FF 
085d4     9C 64 06 F1 | 	add	objptr, ##38556
085d8     32 B9 02 FB | 	rdlong	local10, objptr
085dc     4B 00 00 FF 
085e0     9C 64 86 F1 | 	sub	objptr, ##38556
085e4     D7 52 48 FB | 	callpa	#(@LR__0759-@LR__0757)>>2,fcache_load_ptr_
085e8                 | LR__0757
085e8     5C BD 02 F6 | 	mov	local12, local10
085ec     01 BC 66 F0 | 	shl	local12, #1
085f0     5C BD 02 F1 | 	add	local12, local10
085f4     02 BC 66 F0 | 	shl	local12, #2
085f8     32 A7 02 F6 | 	mov	local01, objptr
085fc     48 00 00 FF 
08600     9C A6 06 F1 | 	add	local01, ##37020
08604     53 BD 02 F1 | 	add	local12, local01
08608     08 BC 06 F1 | 	add	local12, #8
0860c     5E BD 02 FB | 	rdlong	local12, local12
08610     9B BC 0E F2 | 	cmp	local12, #155 wz
08614     68 00 90 5D |  if_ne	jmp	#LR__0758
08618     5C BD 02 F6 | 	mov	local12, local10
0861c     01 BC 86 F1 | 	sub	local12, #1
08620     5E A7 02 F6 | 	mov	local01, local12
08624     01 A6 66 F0 | 	shl	local01, #1
08628     5E A7 02 F1 | 	add	local01, local12
0862c     02 A6 66 F0 | 	shl	local01, #2
08630     32 BD 02 F6 | 	mov	local12, objptr
08634     48 00 00 FF 
08638     9C BC 06 F1 | 	add	local12, ##37020
0863c     5E A7 02 F1 | 	add	local01, local12
08640     08 A6 06 F1 | 	add	local01, #8
08644     53 A7 02 FB | 	rdlong	local01, local01
08648     11 A6 0E F2 | 	cmp	local01, #17 wz
0864c     30 00 90 5D |  if_ne	jmp	#LR__0758
08650     5C BD 02 F6 | 	mov	local12, local10
08654     01 BC 86 F1 | 	sub	local12, #1
08658     5E A7 02 F6 | 	mov	local01, local12
0865c     01 A6 66 F0 | 	shl	local01, #1
08660     5E A7 02 F1 | 	add	local01, local12
08664     02 A6 66 F0 | 	shl	local01, #2
08668     32 BD 02 F6 | 	mov	local12, objptr
0866c     48 00 00 FF 
08670     9C BC 06 F1 | 	add	local12, ##37020
08674     5E A7 02 F1 | 	add	local01, local12
08678     08 A6 06 F1 | 	add	local01, #8
0867c     53 25 68 FC | 	wrlong	#18, local01
08680                 | LR__0758
08680     01 B8 86 F1 | 	sub	local10, #1
08684     01 B8 56 F2 | 	cmps	local10, #1 wc
08688     5C FF 9F 3D |  if_ae	jmp	#LR__0757
0868c                 | LR__0759
0868c                 | LR__0760
0868c                 | ' return err
0868c     58 7B 02 F6 | 	mov	result1, local06
08690     E7 F0 03 F6 | 	mov	ptra, fp
08694     F2 00 A0 FD | 	call	#popregs_
08698                 | _compile_immediate_assign_ret
08698     2D 00 64 FD | 	ret
0869c                 | 
0869c                 | ' 
0869c                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
0869c                 | ' 
0869c                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
0869c                 | _compile
0869c     03 CA 05 F6 | 	mov	COUNT_, #3
086a0     E8 00 A0 FD | 	call	#pushregs_
086a4     49 A7 02 F6 | 	mov	local01, arg01
086a8     4B A9 02 F6 | 	mov	local02, arg03
086ac     48 00 00 FF 
086b0     9C 64 06 F1 | 	add	objptr, ##37020
086b4     32 A7 62 FC | 	wrlong	local01, objptr
086b8     04 64 06 F1 | 	add	objptr, #4
086bc     32 95 62 FC | 	wrlong	arg02, objptr
086c0     48 00 00 FF 
086c4     A0 64 86 F1 | 	sub	objptr, ##37024
086c8     54 93 02 F6 | 	mov	arg01, local02
086cc     01 92 06 F1 | 	add	arg01, #1
086d0     53 95 02 F6 | 	mov	arg02, local01
086d4     40 F2 BF FD | 	call	#_compile_immediate
086d8     3D AB 0A F6 | 	mov	local03, result1 wz
086dc                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
086dc                 | ' ucompiledline(0)=alinemajor
086dc                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
086dc                 | ' 
086dc                 | ' ' cont: 
086dc                 | ' ' 0 - this is the first part of the line that will continue
086dc                 | ' ' 1 - this is the continuation of the line
086dc                 | ' ' 2 - this is the last continued line
086dc                 | ' ' 3 - this is the one and only part
086dc                 | ' 
086dc                 | ' err=compile_immediate(cont+1,alinemajor) 
086dc                 | ' if err=0 andalso alinemajor>0 then
086dc     74 00 90 5D |  if_ne	jmp	#LR__0775
086e0     01 A6 16 F2 | 	cmp	local01, #1 wc
086e4     6C 00 90 CD |  if_b	jmp	#LR__0775
086e8                 | '   if cont=3 orelse cont=2 then 
086e8     03 A8 0E F2 | 	cmp	local02, #3 wz
086ec     02 A8 0E 52 |  if_ne	cmp	local02, #2 wz
086f0     60 00 90 5D |  if_ne	jmp	#LR__0774
086f4                 | '     if alinemajor >lastline then 
086f4     4B 00 00 FF 
086f8     AC 64 06 F1 | 	add	objptr, ##38572
086fc     32 95 02 FB | 	rdlong	arg02, objptr
08700     4B 00 00 FF 
08704     AC 64 86 F1 | 	sub	objptr, ##38572
08708     4A A7 1A F2 | 	cmp	local01, arg02 wcz
0870c     0C 00 90 ED |  if_be	jmp	#LR__0770
08710     53 93 02 F6 | 	mov	arg01, local01
08714     38 F1 BF FD | 	call	#_add_line_at_end
08718     38 00 90 FD | 	jmp	#LR__0773
0871c                 | LR__0770
0871c     53 93 02 F6 | 	mov	arg01, local01
08720     A0 EB BF FD | 	call	#_deleteline
08724                 | '       deleteline(alinemajor)  
08724                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
08724     4B 00 00 FF 
08728     AC 64 06 F1 | 	add	objptr, ##38572
0872c     32 95 02 FB | 	rdlong	arg02, objptr
08730     4B 00 00 FF 
08734     AC 64 86 F1 | 	sub	objptr, ##38572
08738     4A A7 1A F2 | 	cmp	local01, arg02 wcz
0873c     0C 00 90 ED |  if_be	jmp	#LR__0771
08740     53 93 02 F6 | 	mov	arg01, local01
08744     08 F1 BF FD | 	call	#_add_line_at_end
08748     08 00 90 FD | 	jmp	#LR__0772
0874c                 | LR__0771
0874c     53 93 02 F6 | 	mov	arg01, local01
08750     40 EF BF FD | 	call	#_insertline
08754                 | LR__0772
08754                 | LR__0773
08754                 | LR__0774
08754                 | LR__0775
08754                 | ' return err
08754     55 7B 02 F6 | 	mov	result1, local03
08758     E7 F0 03 F6 | 	mov	ptra, fp
0875c     F2 00 A0 FD | 	call	#popregs_
08760                 | _compile_ret
08760     2D 00 64 FD | 	ret
08764                 | 
08764                 | ' 
08764                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
08764                 | ' 
08764                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
08764                 | _compile_assign
08764     03 CA 05 F6 | 	mov	COUNT_, #3
08768     E8 00 A0 FD | 	call	#pushregs_
0876c     49 A7 02 F6 | 	mov	local01, arg01
08770     4B A9 02 F6 | 	mov	local02, arg03
08774     48 00 00 FF 
08778     9C 64 06 F1 | 	add	objptr, ##37020
0877c     32 A7 62 FC | 	wrlong	local01, objptr
08780     04 64 06 F1 | 	add	objptr, #4
08784     32 95 62 FC | 	wrlong	arg02, objptr
08788     48 00 00 FF 
0878c     A0 64 86 F1 | 	sub	objptr, ##37024
08790     54 93 02 F6 | 	mov	arg01, local02
08794     01 92 06 F1 | 	add	arg01, #1
08798     64 FB BF FD | 	call	#_compile_immediate_assign
0879c     3D AB 02 F6 | 	mov	local03, result1
087a0                 | ' 
087a0                 | ' ucompiledline(0)=alinemajor
087a0                 | ' ucompiledline(1)=alineminor
087a0                 | ' 
087a0                 | ' err=compile_immediate_assign(cont+1) 
087a0                 | ' if alinemajor>0 then
087a0     01 A6 16 F2 | 	cmp	local01, #1 wc
087a4     6C 00 90 CD |  if_b	jmp	#LR__0785
087a8                 | '   if cont=3 orelse cont=2 then 
087a8     03 A8 0E F2 | 	cmp	local02, #3 wz
087ac     02 A8 0E 52 |  if_ne	cmp	local02, #2 wz
087b0     60 00 90 5D |  if_ne	jmp	#LR__0784
087b4                 | '     if alinemajor >lastline then 
087b4     4B 00 00 FF 
087b8     AC 64 06 F1 | 	add	objptr, ##38572
087bc     32 95 02 FB | 	rdlong	arg02, objptr
087c0     4B 00 00 FF 
087c4     AC 64 86 F1 | 	sub	objptr, ##38572
087c8     4A A7 1A F2 | 	cmp	local01, arg02 wcz
087cc     0C 00 90 ED |  if_be	jmp	#LR__0780
087d0     53 93 02 F6 | 	mov	arg01, local01
087d4     78 F0 BF FD | 	call	#_add_line_at_end
087d8     38 00 90 FD | 	jmp	#LR__0783
087dc                 | LR__0780
087dc     53 93 02 F6 | 	mov	arg01, local01
087e0     E0 EA BF FD | 	call	#_deleteline
087e4                 | '       deleteline(alinemajor)  
087e4                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
087e4     4B 00 00 FF 
087e8     AC 64 06 F1 | 	add	objptr, ##38572
087ec     32 95 02 FB | 	rdlong	arg02, objptr
087f0     4B 00 00 FF 
087f4     AC 64 86 F1 | 	sub	objptr, ##38572
087f8     4A A7 1A F2 | 	cmp	local01, arg02 wcz
087fc     0C 00 90 ED |  if_be	jmp	#LR__0781
08800     53 93 02 F6 | 	mov	arg01, local01
08804     48 F0 BF FD | 	call	#_add_line_at_end
08808     08 00 90 FD | 	jmp	#LR__0782
0880c                 | LR__0781
0880c     53 93 02 F6 | 	mov	arg01, local01
08810     80 EE BF FD | 	call	#_insertline
08814                 | LR__0782
08814                 | LR__0783
08814                 | LR__0784
08814                 | LR__0785
08814                 | ' return err
08814     55 7B 02 F6 | 	mov	result1, local03
08818     E7 F0 03 F6 | 	mov	ptra, fp
0881c     F2 00 A0 FD | 	call	#popregs_
08820                 | _compile_assign_ret
08820     2D 00 64 FD | 	ret
08824                 | 
08824                 | ' 
08824                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
08824                 | ' 
08824                 | ' function compile_fun_2p() as ulong
08824                 | _compile_fun_2p
08824     01 CA 05 F6 | 	mov	COUNT_, #1
08828     E8 00 A0 FD | 	call	#pushregs_
0882c     60 36 B0 FD | 	call	#_expr
08830     3D A7 02 F6 | 	mov	local01, result1
08834                 | ' err=expr() : if err>0 then return err
08834     01 A6 16 F2 | 	cmp	local01, #1 wc
08838     53 7B 02 36 |  if_ae	mov	result1, local01
0883c     60 00 90 3D |  if_ae	jmp	#LR__0790
08840                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08840     38 00 00 FF 
08844     64 64 06 F1 | 	add	objptr, ##28772
08848     32 A7 02 FB | 	rdlong	local01, objptr
0884c     03 A6 66 F0 | 	shl	local01, #3
08850     02 00 00 FF 
08854     38 64 86 F1 | 	sub	objptr, ##1080
08858     32 A7 02 F1 | 	add	local01, objptr
0885c     04 A6 06 F1 | 	add	local01, #4
08860     53 A7 02 FB | 	rdlong	local01, local01
08864     11 A6 0E F2 | 	cmp	local01, #17 wz
08868     36 00 00 FF 
0886c     2C 64 86 F1 | 	sub	objptr, ##27692
08870     15 7A 06 56 |  if_ne	mov	result1, #21
08874     28 00 90 5D |  if_ne	jmp	#LR__0790
08878     38 00 00 FF 
0887c     64 64 06 F1 | 	add	objptr, ##28772
08880     32 A7 02 FB | 	rdlong	local01, objptr
08884     01 A6 06 F1 | 	add	local01, #1
08888     32 A7 62 FC | 	wrlong	local01, objptr
0888c     38 00 00 FF 
08890     64 64 86 F1 | 	sub	objptr, ##28772
08894     F8 35 B0 FD | 	call	#_expr
08898                 | ' err=expr() : if err>0 then return err
08898     01 7A 16 F2 | 	cmp	result1, #1 wc
0889c                 | ' return 0
0889c     00 7A 06 C6 |  if_b	mov	result1, #0
088a0                 | LR__0790
088a0     E7 F0 03 F6 | 	mov	ptra, fp
088a4     F2 00 A0 FD | 	call	#popregs_
088a8                 | _compile_fun_2p_ret
088a8     2D 00 64 FD | 	ret
088ac                 | 
088ac                 | ' 
088ac                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
088ac                 | ' 
088ac                 | ' function compile_fun_3p() as ulong
088ac                 | _compile_fun_3p
088ac     01 CA 05 F6 | 	mov	COUNT_, #1
088b0     E8 00 A0 FD | 	call	#pushregs_
088b4     D8 35 B0 FD | 	call	#_expr
088b8     3D A7 02 F6 | 	mov	local01, result1
088bc                 | ' err=expr() : if err>0 then return err
088bc     01 A6 16 F2 | 	cmp	local01, #1 wc
088c0     53 7B 02 36 |  if_ae	mov	result1, local01
088c4     C8 00 90 3D |  if_ae	jmp	#LR__0800
088c8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
088c8     38 00 00 FF 
088cc     64 64 06 F1 | 	add	objptr, ##28772
088d0     32 A7 02 FB | 	rdlong	local01, objptr
088d4     03 A6 66 F0 | 	shl	local01, #3
088d8     02 00 00 FF 
088dc     38 64 86 F1 | 	sub	objptr, ##1080
088e0     32 A7 02 F1 | 	add	local01, objptr
088e4     04 A6 06 F1 | 	add	local01, #4
088e8     53 A7 02 FB | 	rdlong	local01, local01
088ec     11 A6 0E F2 | 	cmp	local01, #17 wz
088f0     36 00 00 FF 
088f4     2C 64 86 F1 | 	sub	objptr, ##27692
088f8     15 7A 06 56 |  if_ne	mov	result1, #21
088fc     90 00 90 5D |  if_ne	jmp	#LR__0800
08900     38 00 00 FF 
08904     64 64 06 F1 | 	add	objptr, ##28772
08908     32 A7 02 FB | 	rdlong	local01, objptr
0890c     01 A6 06 F1 | 	add	local01, #1
08910     32 A7 62 FC | 	wrlong	local01, objptr
08914     38 00 00 FF 
08918     64 64 86 F1 | 	sub	objptr, ##28772
0891c     70 35 B0 FD | 	call	#_expr
08920     3D A7 02 F6 | 	mov	local01, result1
08924                 | ' err=expr() : if err>0 then return err
08924     01 A6 16 F2 | 	cmp	local01, #1 wc
08928     53 7B 02 36 |  if_ae	mov	result1, local01
0892c     60 00 90 3D |  if_ae	jmp	#LR__0800
08930                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08930     38 00 00 FF 
08934     64 64 06 F1 | 	add	objptr, ##28772
08938     32 A7 02 FB | 	rdlong	local01, objptr
0893c     03 A6 66 F0 | 	shl	local01, #3
08940     02 00 00 FF 
08944     38 64 86 F1 | 	sub	objptr, ##1080
08948     32 A7 02 F1 | 	add	local01, objptr
0894c     04 A6 06 F1 | 	add	local01, #4
08950     53 A7 02 FB | 	rdlong	local01, local01
08954     11 A6 0E F2 | 	cmp	local01, #17 wz
08958     36 00 00 FF 
0895c     2C 64 86 F1 | 	sub	objptr, ##27692
08960     15 7A 06 56 |  if_ne	mov	result1, #21
08964     28 00 90 5D |  if_ne	jmp	#LR__0800
08968     38 00 00 FF 
0896c     64 64 06 F1 | 	add	objptr, ##28772
08970     32 A7 02 FB | 	rdlong	local01, objptr
08974     01 A6 06 F1 | 	add	local01, #1
08978     32 A7 62 FC | 	wrlong	local01, objptr
0897c     38 00 00 FF 
08980     64 64 86 F1 | 	sub	objptr, ##28772
08984     08 35 B0 FD | 	call	#_expr
08988                 | ' err=expr() : if err>0 then return err
08988     01 7A 16 F2 | 	cmp	result1, #1 wc
0898c                 | ' return 0
0898c     00 7A 06 C6 |  if_b	mov	result1, #0
08990                 | LR__0800
08990     E7 F0 03 F6 | 	mov	ptra, fp
08994     F2 00 A0 FD | 	call	#popregs_
08998                 | _compile_fun_3p_ret
08998     2D 00 64 FD | 	ret
0899c                 | 
0899c                 | ' 
0899c                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
0899c                 | ' 
0899c                 | ' function compile_fun_4p() as ulong
0899c                 | _compile_fun_4p
0899c     01 CA 05 F6 | 	mov	COUNT_, #1
089a0     E8 00 A0 FD | 	call	#pushregs_
089a4     E8 34 B0 FD | 	call	#_expr
089a8     3D A7 02 F6 | 	mov	local01, result1
089ac                 | ' err=expr() : if err>0 then return err
089ac     01 A6 16 F2 | 	cmp	local01, #1 wc
089b0     53 7B 02 36 |  if_ae	mov	result1, local01
089b4     30 01 90 3D |  if_ae	jmp	#LR__0810
089b8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
089b8     38 00 00 FF 
089bc     64 64 06 F1 | 	add	objptr, ##28772
089c0     32 A7 02 FB | 	rdlong	local01, objptr
089c4     03 A6 66 F0 | 	shl	local01, #3
089c8     02 00 00 FF 
089cc     38 64 86 F1 | 	sub	objptr, ##1080
089d0     32 A7 02 F1 | 	add	local01, objptr
089d4     04 A6 06 F1 | 	add	local01, #4
089d8     53 A7 02 FB | 	rdlong	local01, local01
089dc     11 A6 0E F2 | 	cmp	local01, #17 wz
089e0     36 00 00 FF 
089e4     2C 64 86 F1 | 	sub	objptr, ##27692
089e8     15 7A 06 56 |  if_ne	mov	result1, #21
089ec     F8 00 90 5D |  if_ne	jmp	#LR__0810
089f0     38 00 00 FF 
089f4     64 64 06 F1 | 	add	objptr, ##28772
089f8     32 A7 02 FB | 	rdlong	local01, objptr
089fc     01 A6 06 F1 | 	add	local01, #1
08a00     32 A7 62 FC | 	wrlong	local01, objptr
08a04     38 00 00 FF 
08a08     64 64 86 F1 | 	sub	objptr, ##28772
08a0c     80 34 B0 FD | 	call	#_expr
08a10     3D A7 02 F6 | 	mov	local01, result1
08a14                 | ' err=expr() : if err>0 then return err
08a14     01 A6 16 F2 | 	cmp	local01, #1 wc
08a18     53 7B 02 36 |  if_ae	mov	result1, local01
08a1c     C8 00 90 3D |  if_ae	jmp	#LR__0810
08a20                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08a20     38 00 00 FF 
08a24     64 64 06 F1 | 	add	objptr, ##28772
08a28     32 A7 02 FB | 	rdlong	local01, objptr
08a2c     03 A6 66 F0 | 	shl	local01, #3
08a30     02 00 00 FF 
08a34     38 64 86 F1 | 	sub	objptr, ##1080
08a38     32 A7 02 F1 | 	add	local01, objptr
08a3c     04 A6 06 F1 | 	add	local01, #4
08a40     53 A7 02 FB | 	rdlong	local01, local01
08a44     11 A6 0E F2 | 	cmp	local01, #17 wz
08a48     36 00 00 FF 
08a4c     2C 64 86 F1 | 	sub	objptr, ##27692
08a50     15 7A 06 56 |  if_ne	mov	result1, #21
08a54     90 00 90 5D |  if_ne	jmp	#LR__0810
08a58     38 00 00 FF 
08a5c     64 64 06 F1 | 	add	objptr, ##28772
08a60     32 A7 02 FB | 	rdlong	local01, objptr
08a64     01 A6 06 F1 | 	add	local01, #1
08a68     32 A7 62 FC | 	wrlong	local01, objptr
08a6c     38 00 00 FF 
08a70     64 64 86 F1 | 	sub	objptr, ##28772
08a74     18 34 B0 FD | 	call	#_expr
08a78     3D A7 02 F6 | 	mov	local01, result1
08a7c                 | ' err=expr() : if err>0 then return err
08a7c     01 A6 16 F2 | 	cmp	local01, #1 wc
08a80     53 7B 02 36 |  if_ae	mov	result1, local01
08a84     60 00 90 3D |  if_ae	jmp	#LR__0810
08a88                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08a88     38 00 00 FF 
08a8c     64 64 06 F1 | 	add	objptr, ##28772
08a90     32 A7 02 FB | 	rdlong	local01, objptr
08a94     03 A6 66 F0 | 	shl	local01, #3
08a98     02 00 00 FF 
08a9c     38 64 86 F1 | 	sub	objptr, ##1080
08aa0     32 A7 02 F1 | 	add	local01, objptr
08aa4     04 A6 06 F1 | 	add	local01, #4
08aa8     53 A7 02 FB | 	rdlong	local01, local01
08aac     11 A6 0E F2 | 	cmp	local01, #17 wz
08ab0     36 00 00 FF 
08ab4     2C 64 86 F1 | 	sub	objptr, ##27692
08ab8     15 7A 06 56 |  if_ne	mov	result1, #21
08abc     28 00 90 5D |  if_ne	jmp	#LR__0810
08ac0     38 00 00 FF 
08ac4     64 64 06 F1 | 	add	objptr, ##28772
08ac8     32 A7 02 FB | 	rdlong	local01, objptr
08acc     01 A6 06 F1 | 	add	local01, #1
08ad0     32 A7 62 FC | 	wrlong	local01, objptr
08ad4     38 00 00 FF 
08ad8     64 64 86 F1 | 	sub	objptr, ##28772
08adc     B0 33 B0 FD | 	call	#_expr
08ae0                 | ' err=expr() : if err>0 then return err
08ae0     01 7A 16 F2 | 	cmp	result1, #1 wc
08ae4                 | ' return 0
08ae4     00 7A 06 C6 |  if_b	mov	result1, #0
08ae8                 | LR__0810
08ae8     E7 F0 03 F6 | 	mov	ptra, fp
08aec     F2 00 A0 FD | 	call	#popregs_
08af0                 | _compile_fun_4p_ret
08af0     2D 00 64 FD | 	ret
08af4                 | 
08af4                 | ' 
08af4                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08af4                 | ' 
08af4                 | ' function compile_fun_varp() as ulong,ulong 
08af4                 | _compile_fun_varp
08af4     03 CA 05 F6 | 	mov	COUNT_, #3
08af8     E8 00 A0 FD | 	call	#pushregs_
08afc     00 A6 06 F6 | 	mov	local01, #0
08b00                 | ' 
08b00                 | ' i=0 : err=0
08b00                 | ' if lparts(ct).token<>token_end then
08b00     38 00 00 FF 
08b04     64 64 06 F1 | 	add	objptr, ##28772
08b08     32 A9 02 FB | 	rdlong	local02, objptr
08b0c     03 A8 66 F0 | 	shl	local02, #3
08b10     02 00 00 FF 
08b14     38 64 86 F1 | 	sub	objptr, ##1080
08b18     32 A9 02 F1 | 	add	local02, objptr
08b1c     04 A8 06 F1 | 	add	local02, #4
08b20     54 A9 02 FB | 	rdlong	local02, local02
08b24     FE A9 0E F2 | 	cmp	local02, #510 wz
08b28     36 00 00 FF 
08b2c     2C 64 86 F1 | 	sub	objptr, ##27692
08b30     88 00 90 AD |  if_e	jmp	#LR__0821
08b34                 | '   do
08b34                 | LR__0820
08b34     58 33 B0 FD | 	call	#_expr
08b38     01 A6 06 F1 | 	add	local01, #1
08b3c                 | '     expr()
08b3c                 | '     i+=1
08b3c                 | '     if lparts(ct).token=token_comma then ct+=1
08b3c     38 00 00 FF 
08b40     64 64 06 F1 | 	add	objptr, ##28772
08b44     32 A9 02 FB | 	rdlong	local02, objptr
08b48     03 A8 66 F0 | 	shl	local02, #3
08b4c     02 00 00 FF 
08b50     38 64 86 F1 | 	sub	objptr, ##1080
08b54     32 A9 02 F1 | 	add	local02, objptr
08b58     04 A8 06 F1 | 	add	local02, #4
08b5c     54 A9 02 FB | 	rdlong	local02, local02
08b60     11 A8 0E F2 | 	cmp	local02, #17 wz
08b64     36 00 00 FF 
08b68     2C 64 86 F1 | 	sub	objptr, ##27692
08b6c     38 00 00 AF 
08b70     64 64 06 A1 |  if_e	add	objptr, ##28772
08b74     32 AB 02 AB |  if_e	rdlong	local03, objptr
08b78     01 AA 06 A1 |  if_e	add	local03, #1
08b7c     32 AB 62 AC |  if_e	wrlong	local03, objptr
08b80     38 00 00 AF 
08b84     64 64 86 A1 |  if_e	sub	objptr, ##28772
08b88                 | '     if lparts(ct).token=token_end then exit loop
08b88     38 00 00 FF 
08b8c     64 64 06 F1 | 	add	objptr, ##28772
08b90     32 A9 02 FB | 	rdlong	local02, objptr
08b94     03 A8 66 F0 | 	shl	local02, #3
08b98     02 00 00 FF 
08b9c     38 64 86 F1 | 	sub	objptr, ##1080
08ba0     32 A9 02 F1 | 	add	local02, objptr
08ba4     04 A8 06 F1 | 	add	local02, #4
08ba8     54 A9 02 FB | 	rdlong	local02, local02
08bac     FE A9 0E F2 | 	cmp	local02, #510 wz
08bb0     36 00 00 FF 
08bb4     2C 64 86 F1 | 	sub	objptr, ##27692
08bb8     78 FF 9F 5D |  if_ne	jmp	#LR__0820
08bbc                 | LR__0821
08bbc                 | ' return i,err
08bbc     53 7B 02 F6 | 	mov	result1, local01
08bc0     00 7C 06 F6 | 	mov	result2, #0
08bc4     E7 F0 03 F6 | 	mov	ptra, fp
08bc8     F2 00 A0 FD | 	call	#popregs_
08bcc                 | _compile_fun_varp_ret
08bcc     2D 00 64 FD | 	ret
08bd0                 | 
08bd0                 | ' 
08bd0                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08bd0                 | ' 
08bd0                 | ' function compile_read() as ulong,ulong 
08bd0                 | _compile_read
08bd0     04 CA 05 F6 | 	mov	COUNT_, #4
08bd4     E8 00 A0 FD | 	call	#pushregs_
08bd8     00 A6 06 F6 | 	mov	local01, #0
08bdc                 | ' 
08bdc                 | ' i=0 : err=0
08bdc                 | ' if lparts(ct).token<>token_end then
08bdc     38 00 00 FF 
08be0     64 64 06 F1 | 	add	objptr, ##28772
08be4     32 A9 02 FB | 	rdlong	local02, objptr
08be8     03 A8 66 F0 | 	shl	local02, #3
08bec     02 00 00 FF 
08bf0     38 64 86 F1 | 	sub	objptr, ##1080
08bf4     32 A9 02 F1 | 	add	local02, objptr
08bf8     04 A8 06 F1 | 	add	local02, #4
08bfc     54 A9 02 FB | 	rdlong	local02, local02
08c00     FE A9 0E F2 | 	cmp	local02, #510 wz
08c04     36 00 00 FF 
08c08     2C 64 86 F1 | 	sub	objptr, ##27692
08c0c     98 00 90 AD |  if_e	jmp	#LR__0831
08c10                 | '   do
08c10                 | LR__0830
08c10     EC 2E B0 FD | 	call	#_getaddr
08c14     3D AB 02 F6 | 	mov	local03, result1
08c18     38 00 00 FF 
08c1c     64 64 06 F1 | 	add	objptr, ##28772
08c20     32 A9 02 FB | 	rdlong	local02, objptr
08c24     01 A8 06 F1 | 	add	local02, #1
08c28     32 A9 62 FC | 	wrlong	local02, objptr
08c2c     01 A6 06 F1 | 	add	local01, #1
08c30                 | '     err=getaddr() :ct+=1
08c30                 | '     i+=1 
08c30                 | '     if lparts(ct).token=token_comma then ct+=1 
08c30     03 A8 66 F0 | 	shl	local02, #3
08c34     02 00 00 FF 
08c38     38 64 86 F1 | 	sub	objptr, ##1080
08c3c     32 A9 02 F1 | 	add	local02, objptr
08c40     04 A8 06 F1 | 	add	local02, #4
08c44     54 A9 02 FB | 	rdlong	local02, local02
08c48     11 A8 0E F2 | 	cmp	local02, #17 wz
08c4c     36 00 00 FF 
08c50     2C 64 86 F1 | 	sub	objptr, ##27692
08c54     38 00 00 AF 
08c58     64 64 06 A1 |  if_e	add	objptr, ##28772
08c5c     32 AD 02 AB |  if_e	rdlong	local04, objptr
08c60     01 AC 06 A1 |  if_e	add	local04, #1
08c64     32 AD 62 AC |  if_e	wrlong	local04, objptr
08c68     38 00 00 AF 
08c6c     64 64 86 A1 |  if_e	sub	objptr, ##28772
08c70                 | '     if lparts(ct).token=token_end then exit loop
08c70     38 00 00 FF 
08c74     64 64 06 F1 | 	add	objptr, ##28772
08c78     32 A9 02 FB | 	rdlong	local02, objptr
08c7c     03 A8 66 F0 | 	shl	local02, #3
08c80     02 00 00 FF 
08c84     38 64 86 F1 | 	sub	objptr, ##1080
08c88     32 A9 02 F1 | 	add	local02, objptr
08c8c     04 A8 06 F1 | 	add	local02, #4
08c90     54 A9 02 FB | 	rdlong	local02, local02
08c94     FE A9 0E F2 | 	cmp	local02, #510 wz
08c98     36 00 00 FF 
08c9c     2C 64 86 F1 | 	sub	objptr, ##27692
08ca0     08 00 90 AD |  if_e	jmp	#LR__0832
08ca4     68 FF 9F FD | 	jmp	#LR__0830
08ca8                 | LR__0831
08ca8     36 AA 06 F6 | 	mov	local03, #54
08cac                 | LR__0832
08cac                 | ' return i,err
08cac     53 7B 02 F6 | 	mov	result1, local01
08cb0     55 7D 02 F6 | 	mov	result2, local03
08cb4     E7 F0 03 F6 | 	mov	ptra, fp
08cb8     F2 00 A0 FD | 	call	#popregs_
08cbc                 | _compile_read_ret
08cbc     2D 00 64 FD | 	ret
08cc0                 | 
08cc0                 | ' 
08cc0                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08cc0                 | ' 
08cc0                 | ' function compile_input() as ulong,ulong 
08cc0                 | _compile_input
08cc0     0F CA 05 F6 | 	mov	COUNT_, #15
08cc4     E8 00 A0 FD | 	call	#pushregs_
08cc8                 | ' 
08cc8                 | ' if lparts(ct).token=token_string then
08cc8     38 00 00 FF 
08ccc     64 64 06 F1 | 	add	objptr, ##28772
08cd0     32 97 02 FB | 	rdlong	arg03, objptr
08cd4     03 96 66 F0 | 	shl	arg03, #3
08cd8     02 00 00 FF 
08cdc     38 64 86 F1 | 	sub	objptr, ##1080
08ce0     32 97 02 F1 | 	add	arg03, objptr
08ce4     04 96 06 F1 | 	add	arg03, #4
08ce8     4B 7D 02 FB | 	rdlong	result2, arg03
08cec     01 00 00 FF 
08cf0     03 7C 0E F2 | 	cmp	result2, ##515 wz
08cf4     36 00 00 FF 
08cf8     2C 64 86 F1 | 	sub	objptr, ##27692
08cfc     38 06 90 5D |  if_ne	jmp	#LR__0847
08d00     38 00 00 FF 
08d04     64 64 06 F1 | 	add	objptr, ##28772
08d08     32 95 02 FB | 	rdlong	arg02, objptr
08d0c     03 94 66 F0 | 	shl	arg02, #3
08d10     02 00 00 FF 
08d14     38 64 86 F1 | 	sub	objptr, ##1080
08d18     32 95 02 F1 | 	add	arg02, objptr
08d1c     4A 93 02 FB | 	rdlong	arg01, arg02
08d20     36 00 00 FF 
08d24     2C 64 86 F1 | 	sub	objptr, ##27692
08d28     49 AD 02 F6 | 	mov	local04, arg01
08d2c     D7 06 48 FB | 	callpa	#(@LR__0841-@LR__0840)>>2,fcache_load_ptr_
08d30                 | LR__0840
08d30     56 7B CA FA | 	rdbyte	result1, local04 wz
08d34     01 AC 06 51 |  if_ne	add	local04, #1
08d38     F4 FF 9F 5D |  if_ne	jmp	#LR__0840
08d3c                 | LR__0841
08d3c     49 AD 82 F1 | 	sub	local04, arg01
08d40     56 7B 02 F6 | 	mov	result1, local04
08d44     53 00 00 FF 
08d48     48 65 06 F1 | 	add	objptr, ##42824
08d4c     32 7B 62 FC | 	wrlong	result1, objptr
08d50     58 64 86 F1 | 	sub	objptr, #88
08d54     32 93 02 FB | 	rdlong	arg01, objptr
08d58     3D 93 82 F1 | 	sub	arg01, result1
08d5c     04 92 86 F1 | 	sub	arg01, #4
08d60     03 92 26 F5 | 	andn	arg01, #3
08d64     32 93 62 FC | 	wrlong	arg01, objptr
08d68     58 64 06 F1 | 	add	objptr, #88
08d6c     32 95 02 FB | 	rdlong	arg02, objptr
08d70     53 00 00 FF 
08d74     48 65 86 F1 | 	sub	objptr, ##42824
08d78     80 84 B1 FD | 	call	#_pslpoke
08d7c                 | '   pslpoke memtop,l
08d7c                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08d7c     01 AE 06 F6 | 	mov	local05, #1
08d80     53 00 00 FF 
08d84     48 65 06 F1 | 	add	objptr, ##42824
08d88     32 B1 02 FB | 	rdlong	local06, objptr
08d8c     53 00 00 FF 
08d90     48 65 86 F1 | 	sub	objptr, ##42824
08d94     01 B0 06 F1 | 	add	local06, #1
08d98                 | LR__0842
08d98     58 AF 52 F2 | 	cmps	local05, local06 wc
08d9c     5C 00 90 3D |  if_ae	jmp	#LR__0843
08da0     53 00 00 FF 
08da4     F0 64 06 F1 | 	add	objptr, ##42736
08da8     32 B3 02 FB | 	rdlong	local07, objptr
08dac     03 B2 06 F1 | 	add	local07, #3
08db0     57 B3 02 F1 | 	add	local07, local05
08db4     1B 00 00 FF 
08db8     8C 64 86 F1 | 	sub	objptr, ##13964
08dbc     32 95 02 FB | 	rdlong	arg02, objptr
08dc0     03 94 66 F0 | 	shl	arg02, #3
08dc4     02 00 00 FF 
08dc8     38 64 86 F1 | 	sub	objptr, ##1080
08dcc     32 95 02 F1 | 	add	arg02, objptr
08dd0     4A 93 02 FB | 	rdlong	arg01, arg02
08dd4     57 95 02 F6 | 	mov	arg02, local05
08dd8     01 96 06 F6 | 	mov	arg03, #1
08ddc     36 00 00 FF 
08de0     2C 64 86 F1 | 	sub	objptr, ##27692
08de4     B4 D5 B1 FD | 	call	#__system__Mid_S
08de8     3D 95 C2 FA | 	rdbyte	arg02, result1
08dec     59 93 02 F6 | 	mov	arg01, local07
08df0     98 84 B1 FD | 	call	#_pspoke
08df4     01 AE 06 F1 | 	add	local05, #1
08df8     9C FF 9F FD | 	jmp	#LR__0842
08dfc                 | LR__0843
08dfc     53 00 00 FF 
08e00     F0 64 06 F1 | 	add	objptr, ##42736
08e04     32 A7 02 FB | 	rdlong	local01, objptr
08e08     2B AA 06 F6 | 	mov	local03, #43
08e0c     53 B5 02 F6 | 	mov	local08, local01
08e10     54 B3 02 F6 | 	mov	local07, local02
08e14     55 B7 02 F6 | 	mov	local09, local03
08e18     08 00 00 FF 
08e1c     54 64 86 F1 | 	sub	objptr, ##4180
08e20     32 B1 02 FB | 	rdlong	local06, objptr
08e24     58 AF 02 F6 | 	mov	local05, local06
08e28     01 AE 66 F0 | 	shl	local05, #1
08e2c     58 AF 02 F1 | 	add	local05, local06
08e30     02 AE 66 F0 | 	shl	local05, #2
08e34     03 00 00 FF 
08e38     00 64 86 F1 | 	sub	objptr, ##1536
08e3c     32 AF 02 F1 | 	add	local05, objptr
08e40     57 B5 62 FC | 	wrlong	local08, local05
08e44     03 00 00 FF 
08e48     00 64 06 F1 | 	add	objptr, ##1536
08e4c     32 B5 02 FB | 	rdlong	local08, objptr
08e50     5A B1 02 F6 | 	mov	local06, local08
08e54     01 B0 66 F0 | 	shl	local06, #1
08e58     5A B1 02 F1 | 	add	local06, local08
08e5c     02 B0 66 F0 | 	shl	local06, #2
08e60     03 00 00 FF 
08e64     00 64 86 F1 | 	sub	objptr, ##1536
08e68     32 B1 02 F1 | 	add	local06, objptr
08e6c     04 B0 06 F1 | 	add	local06, #4
08e70     58 B3 62 FC | 	wrlong	local07, local06
08e74     03 00 00 FF 
08e78     00 64 06 F1 | 	add	objptr, ##1536
08e7c     32 B5 02 FB | 	rdlong	local08, objptr
08e80     5A B3 02 F6 | 	mov	local07, local08
08e84     01 B2 66 F0 | 	shl	local07, #1
08e88     5A B3 02 F1 | 	add	local07, local08
08e8c     02 B2 66 F0 | 	shl	local07, #2
08e90     03 00 00 FF 
08e94     00 64 86 F1 | 	sub	objptr, ##1536
08e98     32 B3 02 F1 | 	add	local07, objptr
08e9c     08 B2 06 F1 | 	add	local07, #8
08ea0     59 B7 62 FC | 	wrlong	local09, local07
08ea4     03 00 00 FF 
08ea8     00 64 06 F1 | 	add	objptr, ##1536
08eac     32 B5 02 FB | 	rdlong	local08, objptr
08eb0     01 B4 06 F1 | 	add	local08, #1
08eb4     32 B5 62 FC | 	wrlong	local08, objptr
08eb8     13 00 00 FF 
08ebc     38 64 86 F1 | 	sub	objptr, ##9784
08ec0     32 B5 02 FB | 	rdlong	local08, objptr
08ec4     01 B4 06 F1 | 	add	local08, #1
08ec8     32 B5 62 FC | 	wrlong	local08, objptr
08ecc                 | '   t1.result.uresult=memtop
08ecc                 | '   t1.result_type=result_string2  
08ecc                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08ecc                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08ecc     03 B4 66 F0 | 	shl	local08, #3
08ed0     02 00 00 FF 
08ed4     38 64 86 F1 | 	sub	objptr, ##1080
08ed8     32 B5 02 F1 | 	add	local08, objptr
08edc     04 B4 06 F1 | 	add	local08, #4
08ee0     5A B5 02 FB | 	rdlong	local08, local08
08ee4     11 B4 0E F2 | 	cmp	local08, #17 wz
08ee8     36 00 00 FF 
08eec     2C 64 86 F1 | 	sub	objptr, ##27692
08ef0     60 01 90 5D |  if_ne	jmp	#LR__0844
08ef4     21 AA 06 F6 | 	mov	local03, #33
08ef8     53 B5 02 F6 | 	mov	local08, local01
08efc     54 B3 02 F6 | 	mov	local07, local02
08f00     55 B9 02 F6 | 	mov	local10, local03
08f04     4B 00 00 FF 
08f08     9C 64 06 F1 | 	add	objptr, ##38556
08f0c     32 BB 02 FB | 	rdlong	local11, objptr
08f10     5D BD 02 F6 | 	mov	local12, local11
08f14     01 BC 66 F0 | 	shl	local12, #1
08f18     5D BD 02 F1 | 	add	local12, local11
08f1c     02 BC 66 F0 | 	shl	local12, #2
08f20     03 00 00 FF 
08f24     00 64 86 F1 | 	sub	objptr, ##1536
08f28     32 BD 02 F1 | 	add	local12, objptr
08f2c     5E B5 62 FC | 	wrlong	local08, local12
08f30     03 00 00 FF 
08f34     00 64 06 F1 | 	add	objptr, ##1536
08f38     32 BF 02 FB | 	rdlong	local13, objptr
08f3c     5F B5 02 F6 | 	mov	local08, local13
08f40     01 B4 66 F0 | 	shl	local08, #1
08f44     5F B5 02 F1 | 	add	local08, local13
08f48     02 B4 66 F0 | 	shl	local08, #2
08f4c     03 00 00 FF 
08f50     00 64 86 F1 | 	sub	objptr, ##1536
08f54     32 B5 02 F1 | 	add	local08, objptr
08f58     04 B4 06 F1 | 	add	local08, #4
08f5c     5A B3 62 FC | 	wrlong	local07, local08
08f60     03 00 00 FF 
08f64     00 64 06 F1 | 	add	objptr, ##1536
08f68     32 B5 02 FB | 	rdlong	local08, objptr
08f6c     5A C1 02 F6 | 	mov	local14, local08
08f70     01 C0 66 F0 | 	shl	local14, #1
08f74     5A C1 02 F1 | 	add	local14, local08
08f78     02 C0 66 F0 | 	shl	local14, #2
08f7c     03 00 00 FF 
08f80     00 64 86 F1 | 	sub	objptr, ##1536
08f84     32 C1 02 F1 | 	add	local14, objptr
08f88     08 C0 06 F1 | 	add	local14, #8
08f8c     60 B9 62 FC | 	wrlong	local10, local14
08f90     03 00 00 FF 
08f94     00 64 06 F1 | 	add	objptr, ##1536
08f98     32 B5 02 FB | 	rdlong	local08, objptr
08f9c     01 B4 06 F1 | 	add	local08, #1
08fa0     32 B5 62 FC | 	wrlong	local08, objptr
08fa4     44 AA 06 F6 | 	mov	local03, #68
08fa8     53 B5 02 F6 | 	mov	local08, local01
08fac     54 B3 02 F6 | 	mov	local07, local02
08fb0     55 B9 02 F6 | 	mov	local10, local03
08fb4     32 C1 02 FB | 	rdlong	local14, objptr
08fb8     60 BF 02 F6 | 	mov	local13, local14
08fbc     01 BE 66 F0 | 	shl	local13, #1
08fc0     60 BF 02 F1 | 	add	local13, local14
08fc4     02 BE 66 F0 | 	shl	local13, #2
08fc8     03 00 00 FF 
08fcc     00 64 86 F1 | 	sub	objptr, ##1536
08fd0     32 BF 02 F1 | 	add	local13, objptr
08fd4     5F B5 62 FC | 	wrlong	local08, local13
08fd8     03 00 00 FF 
08fdc     00 64 06 F1 | 	add	objptr, ##1536
08fe0     32 C1 02 FB | 	rdlong	local14, objptr
08fe4     60 BF 02 F6 | 	mov	local13, local14
08fe8     01 BE 66 F0 | 	shl	local13, #1
08fec     60 BF 02 F1 | 	add	local13, local14
08ff0     02 BE 66 F0 | 	shl	local13, #2
08ff4     03 00 00 FF 
08ff8     00 64 86 F1 | 	sub	objptr, ##1536
08ffc     32 BF 02 F1 | 	add	local13, objptr
09000     04 BE 06 F1 | 	add	local13, #4
09004     5F B3 62 FC | 	wrlong	local07, local13
09008     03 00 00 FF 
0900c     00 64 06 F1 | 	add	objptr, ##1536
09010     32 BF 02 FB | 	rdlong	local13, objptr
09014     5F C1 02 F6 | 	mov	local14, local13
09018     01 C0 66 F0 | 	shl	local14, #1
0901c     5F C1 02 F1 | 	add	local14, local13
09020     02 C0 66 F0 | 	shl	local14, #2
09024     03 00 00 FF 
09028     00 64 86 F1 | 	sub	objptr, ##1536
0902c     32 C1 02 F1 | 	add	local14, objptr
09030     08 C0 06 F1 | 	add	local14, #8
09034     60 B9 62 FC | 	wrlong	local10, local14
09038     03 00 00 FF 
0903c     00 64 06 F1 | 	add	objptr, ##1536
09040     32 B5 02 FB | 	rdlong	local08, objptr
09044     01 B4 06 F1 | 	add	local08, #1
09048     32 B5 62 FC | 	wrlong	local08, objptr
0904c     4B 00 00 FF 
09050     9C 64 86 F1 | 	sub	objptr, ##38556
09054                 | LR__0844
09054                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09054     38 00 00 FF 
09058     64 64 06 F1 | 	add	objptr, ##28772
0905c     32 B5 02 FB | 	rdlong	local08, objptr
09060     03 B4 66 F0 | 	shl	local08, #3
09064     02 00 00 FF 
09068     38 64 86 F1 | 	sub	objptr, ##1080
0906c     32 B5 02 F1 | 	add	local08, objptr
09070     04 B4 06 F1 | 	add	local08, #4
09074     5A C1 02 FB | 	rdlong	local14, local08
09078     12 C0 0E F2 | 	cmp	local14, #18 wz
0907c     36 00 00 FF 
09080     2C 64 86 F1 | 	sub	objptr, ##27692
09084     60 01 90 5D |  if_ne	jmp	#LR__0845
09088     22 AA 06 F6 | 	mov	local03, #34
0908c     53 B5 02 F6 | 	mov	local08, local01
09090     54 B3 02 F6 | 	mov	local07, local02
09094     55 B9 02 F6 | 	mov	local10, local03
09098     4B 00 00 FF 
0909c     9C 64 06 F1 | 	add	objptr, ##38556
090a0     32 C1 02 FB | 	rdlong	local14, objptr
090a4     60 BF 02 F6 | 	mov	local13, local14
090a8     01 BE 66 F0 | 	shl	local13, #1
090ac     60 BF 02 F1 | 	add	local13, local14
090b0     02 BE 66 F0 | 	shl	local13, #2
090b4     03 00 00 FF 
090b8     00 64 86 F1 | 	sub	objptr, ##1536
090bc     32 BF 02 F1 | 	add	local13, objptr
090c0     5F B5 62 FC | 	wrlong	local08, local13
090c4     03 00 00 FF 
090c8     00 64 06 F1 | 	add	objptr, ##1536
090cc     32 C1 02 FB | 	rdlong	local14, objptr
090d0     60 B5 02 F6 | 	mov	local08, local14
090d4     01 B4 66 F0 | 	shl	local08, #1
090d8     60 B5 02 F1 | 	add	local08, local14
090dc     02 B4 66 F0 | 	shl	local08, #2
090e0     03 00 00 FF 
090e4     00 64 86 F1 | 	sub	objptr, ##1536
090e8     32 B5 02 F1 | 	add	local08, objptr
090ec     04 B4 06 F1 | 	add	local08, #4
090f0     5A B3 62 FC | 	wrlong	local07, local08
090f4     03 00 00 FF 
090f8     00 64 06 F1 | 	add	objptr, ##1536
090fc     32 B5 02 FB | 	rdlong	local08, objptr
09100     5A C1 02 F6 | 	mov	local14, local08
09104     01 C0 66 F0 | 	shl	local14, #1
09108     5A C1 02 F1 | 	add	local14, local08
0910c     02 C0 66 F0 | 	shl	local14, #2
09110     03 00 00 FF 
09114     00 64 86 F1 | 	sub	objptr, ##1536
09118     32 C1 02 F1 | 	add	local14, objptr
0911c     08 C0 06 F1 | 	add	local14, #8
09120     60 B9 62 FC | 	wrlong	local10, local14
09124     03 00 00 FF 
09128     00 64 06 F1 | 	add	objptr, ##1536
0912c     32 B5 02 FB | 	rdlong	local08, objptr
09130     01 B4 06 F1 | 	add	local08, #1
09134     32 B5 62 FC | 	wrlong	local08, objptr
09138     44 AA 06 F6 | 	mov	local03, #68
0913c     53 B5 02 F6 | 	mov	local08, local01
09140     54 B3 02 F6 | 	mov	local07, local02
09144     55 B9 02 F6 | 	mov	local10, local03
09148     32 C1 02 FB | 	rdlong	local14, objptr
0914c     60 BF 02 F6 | 	mov	local13, local14
09150     01 BE 66 F0 | 	shl	local13, #1
09154     60 BF 02 F1 | 	add	local13, local14
09158     02 BE 66 F0 | 	shl	local13, #2
0915c     03 00 00 FF 
09160     00 64 86 F1 | 	sub	objptr, ##1536
09164     32 BF 02 F1 | 	add	local13, objptr
09168     5F B5 62 FC | 	wrlong	local08, local13
0916c     03 00 00 FF 
09170     00 64 06 F1 | 	add	objptr, ##1536
09174     32 C1 02 FB | 	rdlong	local14, objptr
09178     60 BF 02 F6 | 	mov	local13, local14
0917c     01 BE 66 F0 | 	shl	local13, #1
09180     60 BF 02 F1 | 	add	local13, local14
09184     02 BE 66 F0 | 	shl	local13, #2
09188     03 00 00 FF 
0918c     00 64 86 F1 | 	sub	objptr, ##1536
09190     32 BF 02 F1 | 	add	local13, objptr
09194     04 BE 06 F1 | 	add	local13, #4
09198     5F B3 62 FC | 	wrlong	local07, local13
0919c     03 00 00 FF 
091a0     00 64 06 F1 | 	add	objptr, ##1536
091a4     32 BF 02 FB | 	rdlong	local13, objptr
091a8     5F C1 02 F6 | 	mov	local14, local13
091ac     01 C0 66 F0 | 	shl	local14, #1
091b0     5F C1 02 F1 | 	add	local14, local13
091b4     02 C0 66 F0 | 	shl	local14, #2
091b8     03 00 00 FF 
091bc     00 64 86 F1 | 	sub	objptr, ##1536
091c0     32 C1 02 F1 | 	add	local14, objptr
091c4     08 C0 06 F1 | 	add	local14, #8
091c8     60 B9 62 FC | 	wrlong	local10, local14
091cc     03 00 00 FF 
091d0     00 64 06 F1 | 	add	objptr, ##1536
091d4     32 B5 02 FB | 	rdlong	local08, objptr
091d8     01 B4 06 F1 | 	add	local08, #1
091dc     32 B5 62 FC | 	wrlong	local08, objptr
091e0     4B 00 00 FF 
091e4     9C 64 86 F1 | 	sub	objptr, ##38556
091e8                 | LR__0845
091e8                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
091e8     38 00 00 FF 
091ec     64 64 06 F1 | 	add	objptr, ##28772
091f0     32 B5 02 FB | 	rdlong	local08, objptr
091f4     03 B4 66 F0 | 	shl	local08, #3
091f8     02 00 00 FF 
091fc     38 64 86 F1 | 	sub	objptr, ##1080
09200     32 B5 02 F1 | 	add	local08, objptr
09204     04 B4 06 F1 | 	add	local08, #4
09208     5A C1 02 FB | 	rdlong	local14, local08
0920c     12 C0 0E F2 | 	cmp	local14, #18 wz
09210     36 00 00 FF 
09214     2C 64 86 F1 | 	sub	objptr, ##27692
09218     00 01 90 AD |  if_e	jmp	#LR__0846
0921c     38 00 00 FF 
09220     64 64 06 F1 | 	add	objptr, ##28772
09224     32 B5 02 FB | 	rdlong	local08, objptr
09228     03 B4 66 F0 | 	shl	local08, #3
0922c     02 00 00 FF 
09230     38 64 86 F1 | 	sub	objptr, ##1080
09234     32 B5 02 F1 | 	add	local08, objptr
09238     04 B4 06 F1 | 	add	local08, #4
0923c     5A C1 02 FB | 	rdlong	local14, local08
09240     11 C0 0E F2 | 	cmp	local14, #17 wz
09244     36 00 00 FF 
09248     2C 64 86 F1 | 	sub	objptr, ##27692
0924c     CC 00 90 AD |  if_e	jmp	#LR__0846
09250     44 AA 06 F6 | 	mov	local03, #68
09254     53 B5 02 F6 | 	mov	local08, local01
09258     54 B3 02 F6 | 	mov	local07, local02
0925c     55 B9 02 F6 | 	mov	local10, local03
09260     4B 00 00 FF 
09264     9C 64 06 F1 | 	add	objptr, ##38556
09268     32 C1 02 FB | 	rdlong	local14, objptr
0926c     60 BF 02 F6 | 	mov	local13, local14
09270     01 BE 66 F0 | 	shl	local13, #1
09274     60 BF 02 F1 | 	add	local13, local14
09278     02 BE 66 F0 | 	shl	local13, #2
0927c     03 00 00 FF 
09280     00 64 86 F1 | 	sub	objptr, ##1536
09284     32 BF 02 F1 | 	add	local13, objptr
09288     5F B5 62 FC | 	wrlong	local08, local13
0928c     03 00 00 FF 
09290     00 64 06 F1 | 	add	objptr, ##1536
09294     32 C1 02 FB | 	rdlong	local14, objptr
09298     60 BF 02 F6 | 	mov	local13, local14
0929c     01 BE 66 F0 | 	shl	local13, #1
092a0     60 BF 02 F1 | 	add	local13, local14
092a4     02 BE 66 F0 | 	shl	local13, #2
092a8     03 00 00 FF 
092ac     00 64 86 F1 | 	sub	objptr, ##1536
092b0     32 BF 02 F1 | 	add	local13, objptr
092b4     04 BE 06 F1 | 	add	local13, #4
092b8     5F B3 62 FC | 	wrlong	local07, local13
092bc     03 00 00 FF 
092c0     00 64 06 F1 | 	add	objptr, ##1536
092c4     32 BF 02 FB | 	rdlong	local13, objptr
092c8     5F C1 02 F6 | 	mov	local14, local13
092cc     01 C0 66 F0 | 	shl	local14, #1
092d0     5F C1 02 F1 | 	add	local14, local13
092d4     02 C0 66 F0 | 	shl	local14, #2
092d8     03 00 00 FF 
092dc     00 64 86 F1 | 	sub	objptr, ##1536
092e0     32 C1 02 F1 | 	add	local14, objptr
092e4     08 C0 06 F1 | 	add	local14, #8
092e8     60 B9 62 FC | 	wrlong	local10, local14
092ec     03 00 00 FF 
092f0     00 64 06 F1 | 	add	objptr, ##1536
092f4     32 B5 02 FB | 	rdlong	local08, objptr
092f8     01 B4 06 F1 | 	add	local08, #1
092fc     32 B5 62 FC | 	wrlong	local08, objptr
09300     13 00 00 FF 
09304     38 64 86 F1 | 	sub	objptr, ##9784
09308     32 B5 02 FB | 	rdlong	local08, objptr
0930c     01 B4 86 F1 | 	sub	local08, #1
09310     32 B5 62 FC | 	wrlong	local08, objptr
09314     38 00 00 FF 
09318     64 64 86 F1 | 	sub	objptr, ##28772
0931c                 | LR__0846
0931c     38 00 00 FF 
09320     64 64 06 F1 | 	add	objptr, ##28772
09324     32 B5 02 FB | 	rdlong	local08, objptr
09328     01 B4 06 F1 | 	add	local08, #1
0932c     32 B5 62 FC | 	wrlong	local08, objptr
09330     38 00 00 FF 
09334     64 64 86 F1 | 	sub	objptr, ##28772
09338                 | LR__0847
09338     00 AE 06 F6 | 	mov	local05, #0
0933c                 | ' i=0 : err=0
0933c                 | ' if lparts(ct).token<>token_end then
0933c     38 00 00 FF 
09340     64 64 06 F1 | 	add	objptr, ##28772
09344     32 C1 02 FB | 	rdlong	local14, objptr
09348     03 C0 66 F0 | 	shl	local14, #3
0934c     02 00 00 FF 
09350     38 64 86 F1 | 	sub	objptr, ##1080
09354     32 C1 02 F1 | 	add	local14, objptr
09358     04 C0 06 F1 | 	add	local14, #4
0935c     60 C1 02 FB | 	rdlong	local14, local14
09360     FE C1 0E F2 | 	cmp	local14, #510 wz
09364     36 00 00 FF 
09368     2C 64 86 F1 | 	sub	objptr, ##27692
0936c     98 00 90 AD |  if_e	jmp	#LR__0849
09370                 | '   do
09370                 | LR__0848
09370     8C 27 B0 FD | 	call	#_getaddr
09374     3D C3 02 F6 | 	mov	local15, result1
09378     38 00 00 FF 
0937c     64 64 06 F1 | 	add	objptr, ##28772
09380     32 C1 02 FB | 	rdlong	local14, objptr
09384     01 C0 06 F1 | 	add	local14, #1
09388     32 C1 62 FC | 	wrlong	local14, objptr
0938c     01 AE 06 F1 | 	add	local05, #1
09390                 | '     err=getaddr() :ct+=1
09390                 | '     i+=1 
09390                 | '     if lparts(ct).token=token_comma then ct+=1 
09390     03 C0 66 F0 | 	shl	local14, #3
09394     02 00 00 FF 
09398     38 64 86 F1 | 	sub	objptr, ##1080
0939c     32 C1 02 F1 | 	add	local14, objptr
093a0     04 C0 06 F1 | 	add	local14, #4
093a4     60 C1 02 FB | 	rdlong	local14, local14
093a8     11 C0 0E F2 | 	cmp	local14, #17 wz
093ac     36 00 00 FF 
093b0     2C 64 86 F1 | 	sub	objptr, ##27692
093b4     38 00 00 AF 
093b8     64 64 06 A1 |  if_e	add	objptr, ##28772
093bc     32 B5 02 AB |  if_e	rdlong	local08, objptr
093c0     01 B4 06 A1 |  if_e	add	local08, #1
093c4     32 B5 62 AC |  if_e	wrlong	local08, objptr
093c8     38 00 00 AF 
093cc     64 64 86 A1 |  if_e	sub	objptr, ##28772
093d0                 | '     if lparts(ct).token=token_end then exit loop
093d0     38 00 00 FF 
093d4     64 64 06 F1 | 	add	objptr, ##28772
093d8     32 C1 02 FB | 	rdlong	local14, objptr
093dc     03 C0 66 F0 | 	shl	local14, #3
093e0     02 00 00 FF 
093e4     38 64 86 F1 | 	sub	objptr, ##1080
093e8     32 C1 02 F1 | 	add	local14, objptr
093ec     04 C0 06 F1 | 	add	local14, #4
093f0     60 C1 02 FB | 	rdlong	local14, local14
093f4     FE C1 0E F2 | 	cmp	local14, #510 wz
093f8     36 00 00 FF 
093fc     2C 64 86 F1 | 	sub	objptr, ##27692
09400     08 00 90 AD |  if_e	jmp	#LR__0850
09404     68 FF 9F FD | 	jmp	#LR__0848
09408                 | LR__0849
09408     36 C2 06 F6 | 	mov	local15, #54
0940c                 | LR__0850
0940c                 | ' return i,err
0940c     57 7B 02 F6 | 	mov	result1, local05
09410     61 7D 02 F6 | 	mov	result2, local15
09414     E7 F0 03 F6 | 	mov	ptra, fp
09418     F2 00 A0 FD | 	call	#popregs_
0941c                 | _compile_input_ret
0941c     2D 00 64 FD | 	ret
09420                 | 
09420                 | ' 
09420                 | ' '----- compile assign to an array element
09420                 | ' 
09420                 | ' function compile_array_assign() as ulong 
09420                 | _compile_array_assign
09420     0B CA 05 F6 | 	mov	COUNT_, #11
09424     E8 00 A0 FD | 	call	#pushregs_
09428     00 AC 06 F6 | 	mov	local04, #0
0942c     00 AE 06 F6 | 	mov	local05, #0
09430     38 00 00 FF 
09434     64 64 06 F1 | 	add	objptr, ##28772
09438     32 B1 02 FB | 	rdlong	local06, objptr
0943c     58 7B 02 F6 | 	mov	result1, local06
09440     01 7A 86 F1 | 	sub	result1, #1
09444     03 7A 66 F0 | 	shl	result1, #3
09448     02 00 00 FF 
0944c     38 64 86 F1 | 	sub	objptr, ##1080
09450     32 7B 02 F1 | 	add	result1, objptr
09454     3D B3 02 FB | 	rdlong	local07, result1
09458                 | ' numpar=0 : err=0
09458                 | ' varname$=lparts(ct-1).part$
09458                 | ' if lparts(ct).token=token_lpar then
09458     03 B0 66 F0 | 	shl	local06, #3
0945c     32 B1 02 F1 | 	add	local06, objptr
09460     04 B0 06 F1 | 	add	local06, #4
09464     58 B1 02 FB | 	rdlong	local06, local06
09468     15 B0 0E F2 | 	cmp	local06, #21 wz
0946c     36 00 00 FF 
09470     2C 64 86 F1 | 	sub	objptr, ##27692
09474     F0 01 90 5D |  if_ne	jmp	#LR__0864
09478     38 00 00 FF 
0947c     64 64 06 F1 | 	add	objptr, ##28772
09480     32 B5 02 FB | 	rdlong	local08, objptr
09484     01 B4 06 F1 | 	add	local08, #1
09488     32 B5 62 FC | 	wrlong	local08, objptr
0948c     38 00 00 FF 
09490     64 64 86 F1 | 	sub	objptr, ##28772
09494                 | '   ct+=1 											' omit this lpar, this is for expr list
09494                 | '   do
09494                 | LR__0860
09494     F8 29 B0 FD | 	call	#_expr
09498     38 00 00 FF 
0949c     64 64 06 F1 | 	add	objptr, ##28772
094a0     32 B1 02 FB | 	rdlong	local06, objptr
094a4     01 B0 06 F1 | 	add	local06, #1
094a8     32 B1 62 FC | 	wrlong	local06, objptr
094ac     01 AC 06 F1 | 	add	local04, #1
094b0     01 B0 86 F1 | 	sub	local06, #1
094b4     03 B0 66 F0 | 	shl	local06, #3
094b8     02 00 00 FF 
094bc     38 64 86 F1 | 	sub	objptr, ##1080
094c0     32 B1 02 F1 | 	add	local06, objptr
094c4     04 B0 06 F1 | 	add	local06, #4
094c8     58 B5 02 FB | 	rdlong	local08, local06
094cc     14 B4 0E F2 | 	cmp	local08, #20 wz
094d0     36 00 00 FF 
094d4     2C 64 86 F1 | 	sub	objptr, ##27692
094d8     34 00 90 AD |  if_e	jmp	#LR__0861
094dc     38 00 00 FF 
094e0     64 64 06 F1 | 	add	objptr, ##28772
094e4     32 B5 02 FB | 	rdlong	local08, objptr
094e8     03 B4 66 F0 | 	shl	local08, #3
094ec     02 00 00 FF 
094f0     38 64 86 F1 | 	sub	objptr, ##1080
094f4     32 B5 02 F1 | 	add	local08, objptr
094f8     04 B4 06 F1 | 	add	local08, #4
094fc     5A B5 02 FB | 	rdlong	local08, local08
09500     FE B5 0E F2 | 	cmp	local08, #510 wz
09504     36 00 00 FF 
09508     2C 64 86 F1 | 	sub	objptr, ##27692
0950c     84 FF 9F 5D |  if_ne	jmp	#LR__0860
09510                 | LR__0861
09510     38 00 00 FF 
09514     64 64 06 F1 | 	add	objptr, ##28772
09518     32 B5 02 FB | 	rdlong	local08, objptr
0951c     01 B4 06 F1 | 	add	local08, #1
09520     32 B5 62 FC | 	wrlong	local08, objptr
09524     38 00 00 FF 
09528     64 64 86 F1 | 	sub	objptr, ##28772
0952c     60 29 B0 FD | 	call	#_expr
09530     01 B6 66 F6 | 	neg	local09, #1
09534     00 B8 06 F6 | 	mov	local10, #0
09538                 | '   ct+=1 : expr()
09538                 | '   j=-1 : i=0 
09538                 | '   do 
09538                 | LR__0862
09538                 | '     if variables(i).name=varname$ then j=i: exit loop
09538     5C B1 02 F6 | 	mov	local06, local10
0953c     04 B0 66 F0 | 	shl	local06, #4
09540     32 B5 02 F6 | 	mov	local08, objptr
09544     16 00 00 FF 
09548     18 B4 06 F1 | 	add	local08, ##11288
0954c     5A B1 02 F1 | 	add	local06, local08
09550     58 93 02 FB | 	rdlong	arg01, local06
09554     59 95 02 F6 | 	mov	arg02, local07
09558     A8 B4 B1 FD | 	call	#__system___string_cmp
0955c     00 7A 0E F2 | 	cmp	result1, #0 wz
09560     5C B7 02 A6 |  if_e	mov	local09, local10
09564     20 00 90 AD |  if_e	jmp	#LR__0863
09568     01 B8 06 F1 | 	add	local10, #1
0956c     36 00 00 FF 
09570     28 64 06 F1 | 	add	objptr, ##27688
09574     32 B5 02 FB | 	rdlong	local08, objptr
09578     36 00 00 FF 
0957c     28 64 86 F1 | 	sub	objptr, ##27688
09580     5A B9 5A F2 | 	cmps	local10, local08 wcz
09584     B0 FF 9F ED |  if_be	jmp	#LR__0862
09588                 | LR__0863
09588     5B A7 02 F6 | 	mov	local01, local09
0958c     56 A9 02 F6 | 	mov	local02, local04
09590     17 AA 06 F6 | 	mov	local03, #23
09594     53 B5 02 F6 | 	mov	local08, local01
09598     54 BB 02 F6 | 	mov	local11, local02
0959c     55 B3 02 F6 | 	mov	local07, local03
095a0     4B 00 00 FF 
095a4     9C 64 06 F1 | 	add	objptr, ##38556
095a8     32 A7 02 FB | 	rdlong	local01, objptr
095ac     53 B7 02 F6 | 	mov	local09, local01
095b0     01 B6 66 F0 | 	shl	local09, #1
095b4     53 B7 02 F1 | 	add	local09, local01
095b8     02 B6 66 F0 | 	shl	local09, #2
095bc     03 00 00 FF 
095c0     00 64 86 F1 | 	sub	objptr, ##1536
095c4     32 B7 02 F1 | 	add	local09, objptr
095c8     5B B5 62 FC | 	wrlong	local08, local09
095cc     03 00 00 FF 
095d0     00 64 06 F1 | 	add	objptr, ##1536
095d4     32 A7 02 FB | 	rdlong	local01, objptr
095d8     53 B7 02 F6 | 	mov	local09, local01
095dc     01 B6 66 F0 | 	shl	local09, #1
095e0     53 B7 02 F1 | 	add	local09, local01
095e4     02 B6 66 F0 | 	shl	local09, #2
095e8     03 00 00 FF 
095ec     00 64 86 F1 | 	sub	objptr, ##1536
095f0     32 B7 02 F1 | 	add	local09, objptr
095f4     04 B6 06 F1 | 	add	local09, #4
095f8     5B BB 62 FC | 	wrlong	local11, local09
095fc     03 00 00 FF 
09600     00 64 06 F1 | 	add	objptr, ##1536
09604     32 BB 02 FB | 	rdlong	local11, objptr
09608     5D A7 02 F6 | 	mov	local01, local11
0960c     01 A6 66 F0 | 	shl	local01, #1
09610     5D A7 02 F1 | 	add	local01, local11
09614     02 A6 66 F0 | 	shl	local01, #2
09618     03 00 00 FF 
0961c     00 64 86 F1 | 	sub	objptr, ##1536
09620     32 A7 02 F1 | 	add	local01, objptr
09624     08 A6 06 F1 | 	add	local01, #8
09628     53 B3 62 FC | 	wrlong	local07, local01
0962c     03 00 00 FF 
09630     00 64 06 F1 | 	add	objptr, ##1536
09634     32 B5 02 FB | 	rdlong	local08, objptr
09638     01 B4 06 F1 | 	add	local08, #1
0963c     32 B5 62 FC | 	wrlong	local08, objptr
09640                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
09640                 | '   if numpar>3 then err=45
09640     04 AC 16 F2 | 	cmp	local04, #4 wc
09644     2D AE 06 36 |  if_ae	mov	local05, #45
09648                 | '   if i>varnum then err=20
09648     15 00 00 FF 
0964c     74 64 86 F1 | 	sub	objptr, ##10868
09650     32 B5 02 FB | 	rdlong	local08, objptr
09654     36 00 00 FF 
09658     28 64 86 F1 | 	sub	objptr, ##27688
0965c     5A B9 5A F2 | 	cmps	local10, local08 wcz
09660     14 AE 06 16 |  if_a	mov	local05, #20
09664     04 00 90 FD | 	jmp	#LR__0865
09668                 | LR__0864
09668     0E AE 06 F6 | 	mov	local05, #14
0966c                 | LR__0865
0966c                 | ' return err
0966c     57 7B 02 F6 | 	mov	result1, local05
09670     E7 F0 03 F6 | 	mov	ptra, fp
09674     F2 00 A0 FD | 	call	#popregs_
09678                 | _compile_array_assign_ret
09678     2D 00 64 FD | 	ret
0967c                 | 
0967c                 | ' 
0967c                 | ' '----- compile print command with its ";" and "," modifiers
0967c                 | ' 
0967c                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
0967c                 | _compile_print
0967c     0B CA 05 F6 | 	mov	COUNT_, #11
09680     E8 00 A0 FD | 	call	#pushregs_
09684     00 A6 06 F6 | 	mov	local01, #0
09688     1D AA 06 F6 | 	mov	local03, #29
0968c                 | ' t1.result.uresult=0 : t1.result_type=result_uint
0968c                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
0968c     38 00 00 FF 
09690     64 64 06 F1 | 	add	objptr, ##28772
09694     32 AD 02 FB | 	rdlong	local04, objptr
09698     03 AC 66 F0 | 	shl	local04, #3
0969c     02 00 00 FF 
096a0     38 64 86 F1 | 	sub	objptr, ##1080
096a4     32 AD 02 F1 | 	add	local04, objptr
096a8     04 AC 06 F1 | 	add	local04, #4
096ac     56 AD 02 FB | 	rdlong	local04, local04
096b0     FE AD 0E F2 | 	cmp	local04, #510 wz
096b4     36 00 00 FF 
096b8     2C 64 86 F1 | 	sub	objptr, ##27692
096bc     68 01 90 5D |  if_ne	jmp	#LR__0870
096c0     20 AA 06 F6 | 	mov	local03, #32
096c4     53 AF 02 F6 | 	mov	local05, local01
096c8     54 B1 02 F6 | 	mov	local06, local02
096cc     55 B3 02 F6 | 	mov	local07, local03
096d0     4B 00 00 FF 
096d4     9C 64 06 F1 | 	add	objptr, ##38556
096d8     32 B5 02 FB | 	rdlong	local08, objptr
096dc     5A B7 02 F6 | 	mov	local09, local08
096e0     01 B6 66 F0 | 	shl	local09, #1
096e4     5A B7 02 F1 | 	add	local09, local08
096e8     02 B6 66 F0 | 	shl	local09, #2
096ec     03 00 00 FF 
096f0     00 64 86 F1 | 	sub	objptr, ##1536
096f4     32 B7 02 F1 | 	add	local09, objptr
096f8     5B AF 62 FC | 	wrlong	local05, local09
096fc     03 00 00 FF 
09700     00 64 06 F1 | 	add	objptr, ##1536
09704     32 AF 02 FB | 	rdlong	local05, objptr
09708     57 B9 02 F6 | 	mov	local10, local05
0970c     01 B8 66 F0 | 	shl	local10, #1
09710     57 B9 02 F1 | 	add	local10, local05
09714     02 B8 66 F0 | 	shl	local10, #2
09718     03 00 00 FF 
0971c     00 64 86 F1 | 	sub	objptr, ##1536
09720     32 B9 02 F1 | 	add	local10, objptr
09724     04 B8 06 F1 | 	add	local10, #4
09728     5C B1 62 FC | 	wrlong	local06, local10
0972c     03 00 00 FF 
09730     00 64 06 F1 | 	add	objptr, ##1536
09734     32 AF 02 FB | 	rdlong	local05, objptr
09738     57 BB 02 F6 | 	mov	local11, local05
0973c     01 BA 66 F0 | 	shl	local11, #1
09740     57 BB 02 F1 | 	add	local11, local05
09744     02 BA 66 F0 | 	shl	local11, #2
09748     03 00 00 FF 
0974c     00 64 86 F1 | 	sub	objptr, ##1536
09750     32 BB 02 F1 | 	add	local11, objptr
09754     08 BA 06 F1 | 	add	local11, #8
09758     5D B3 62 FC | 	wrlong	local07, local11
0975c     03 00 00 FF 
09760     00 64 06 F1 | 	add	objptr, ##1536
09764     32 AF 02 FB | 	rdlong	local05, objptr
09768     01 AE 06 F1 | 	add	local05, #1
0976c     32 AF 62 FC | 	wrlong	local05, objptr
09770     44 AA 06 F6 | 	mov	local03, #68
09774     53 AF 02 F6 | 	mov	local05, local01
09778     54 B1 02 F6 | 	mov	local06, local02
0977c     55 B3 02 F6 | 	mov	local07, local03
09780     32 B5 02 FB | 	rdlong	local08, objptr
09784     5A B7 02 F6 | 	mov	local09, local08
09788     01 B6 66 F0 | 	shl	local09, #1
0978c     5A B7 02 F1 | 	add	local09, local08
09790     02 B6 66 F0 | 	shl	local09, #2
09794     03 00 00 FF 
09798     00 64 86 F1 | 	sub	objptr, ##1536
0979c     32 B7 02 F1 | 	add	local09, objptr
097a0     5B AF 62 FC | 	wrlong	local05, local09
097a4     03 00 00 FF 
097a8     00 64 06 F1 | 	add	objptr, ##1536
097ac     32 BB 02 FB | 	rdlong	local11, objptr
097b0     5D B9 02 F6 | 	mov	local10, local11
097b4     01 B8 66 F0 | 	shl	local10, #1
097b8     5D B9 02 F1 | 	add	local10, local11
097bc     02 B8 66 F0 | 	shl	local10, #2
097c0     03 00 00 FF 
097c4     00 64 86 F1 | 	sub	objptr, ##1536
097c8     32 B9 02 F1 | 	add	local10, objptr
097cc     04 B8 06 F1 | 	add	local10, #4
097d0     5C B1 62 FC | 	wrlong	local06, local10
097d4     03 00 00 FF 
097d8     00 64 06 F1 | 	add	objptr, ##1536
097dc     32 B9 02 FB | 	rdlong	local10, objptr
097e0     5C BB 02 F6 | 	mov	local11, local10
097e4     01 BA 66 F0 | 	shl	local11, #1
097e8     5C BB 02 F1 | 	add	local11, local10
097ec     02 BA 66 F0 | 	shl	local11, #2
097f0     03 00 00 FF 
097f4     00 64 86 F1 | 	sub	objptr, ##1536
097f8     32 BB 02 F1 | 	add	local11, objptr
097fc     08 BA 06 F1 | 	add	local11, #8
09800     5D B3 62 FC | 	wrlong	local07, local11
09804     03 00 00 FF 
09808     00 64 06 F1 | 	add	objptr, ##1536
0980c     32 AF 02 FB | 	rdlong	local05, objptr
09810     01 AE 06 F1 | 	add	local05, #1
09814     32 AF 62 FC | 	wrlong	local05, objptr
09818     4B 00 00 FF 
0981c     9C 64 86 F1 | 	sub	objptr, ##38556
09820     00 7A 06 F6 | 	mov	result1, #0
09824     20 05 90 FD | 	jmp	#LR__0877
09828                 | LR__0870
09828                 | ' do
09828                 | LR__0871
09828     64 26 B0 FD | 	call	#_expr
0982c                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
0982c                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0982c     38 00 00 FF 
09830     64 64 06 F1 | 	add	objptr, ##28772
09834     32 AD 02 FB | 	rdlong	local04, objptr
09838     03 AC 66 F0 | 	shl	local04, #3
0983c     02 00 00 FF 
09840     38 64 86 F1 | 	sub	objptr, ##1080
09844     32 AD 02 F1 | 	add	local04, objptr
09848     04 AC 06 F1 | 	add	local04, #4
0984c     56 B5 02 FB | 	rdlong	local08, local04
09850     11 B4 0E F2 | 	cmp	local08, #17 wz
09854     36 00 00 FF 
09858     2C 64 86 F1 | 	sub	objptr, ##27692
0985c     60 01 90 5D |  if_ne	jmp	#LR__0872
09860     21 AA 06 F6 | 	mov	local03, #33
09864     53 AF 02 F6 | 	mov	local05, local01
09868     54 B1 02 F6 | 	mov	local06, local02
0986c     55 B3 02 F6 | 	mov	local07, local03
09870     4B 00 00 FF 
09874     9C 64 06 F1 | 	add	objptr, ##38556
09878     32 B5 02 FB | 	rdlong	local08, objptr
0987c     5A B7 02 F6 | 	mov	local09, local08
09880     01 B6 66 F0 | 	shl	local09, #1
09884     5A B7 02 F1 | 	add	local09, local08
09888     02 B6 66 F0 | 	shl	local09, #2
0988c     03 00 00 FF 
09890     00 64 86 F1 | 	sub	objptr, ##1536
09894     32 B7 02 F1 | 	add	local09, objptr
09898     5B AF 62 FC | 	wrlong	local05, local09
0989c     03 00 00 FF 
098a0     00 64 06 F1 | 	add	objptr, ##1536
098a4     32 BB 02 FB | 	rdlong	local11, objptr
098a8     5D B9 02 F6 | 	mov	local10, local11
098ac     01 B8 66 F0 | 	shl	local10, #1
098b0     5D B9 02 F1 | 	add	local10, local11
098b4     02 B8 66 F0 | 	shl	local10, #2
098b8     03 00 00 FF 
098bc     00 64 86 F1 | 	sub	objptr, ##1536
098c0     32 B9 02 F1 | 	add	local10, objptr
098c4     04 B8 06 F1 | 	add	local10, #4
098c8     5C B1 62 FC | 	wrlong	local06, local10
098cc     03 00 00 FF 
098d0     00 64 06 F1 | 	add	objptr, ##1536
098d4     32 AF 02 FB | 	rdlong	local05, objptr
098d8     57 BB 02 F6 | 	mov	local11, local05
098dc     01 BA 66 F0 | 	shl	local11, #1
098e0     57 BB 02 F1 | 	add	local11, local05
098e4     02 BA 66 F0 | 	shl	local11, #2
098e8     03 00 00 FF 
098ec     00 64 86 F1 | 	sub	objptr, ##1536
098f0     32 BB 02 F1 | 	add	local11, objptr
098f4     08 BA 06 F1 | 	add	local11, #8
098f8     5D B3 62 FC | 	wrlong	local07, local11
098fc     03 00 00 FF 
09900     00 64 06 F1 | 	add	objptr, ##1536
09904     32 AF 02 FB | 	rdlong	local05, objptr
09908     01 AE 06 F1 | 	add	local05, #1
0990c     32 AF 62 FC | 	wrlong	local05, objptr
09910     44 AA 06 F6 | 	mov	local03, #68
09914     53 AF 02 F6 | 	mov	local05, local01
09918     54 B1 02 F6 | 	mov	local06, local02
0991c     55 B3 02 F6 | 	mov	local07, local03
09920     32 B5 02 FB | 	rdlong	local08, objptr
09924     5A B7 02 F6 | 	mov	local09, local08
09928     01 B6 66 F0 | 	shl	local09, #1
0992c     5A B7 02 F1 | 	add	local09, local08
09930     02 B6 66 F0 | 	shl	local09, #2
09934     03 00 00 FF 
09938     00 64 86 F1 | 	sub	objptr, ##1536
0993c     32 B7 02 F1 | 	add	local09, objptr
09940     5B AF 62 FC | 	wrlong	local05, local09
09944     03 00 00 FF 
09948     00 64 06 F1 | 	add	objptr, ##1536
0994c     32 BB 02 FB | 	rdlong	local11, objptr
09950     5D B9 02 F6 | 	mov	local10, local11
09954     01 B8 66 F0 | 	shl	local10, #1
09958     5D B9 02 F1 | 	add	local10, local11
0995c     02 B8 66 F0 | 	shl	local10, #2
09960     03 00 00 FF 
09964     00 64 86 F1 | 	sub	objptr, ##1536
09968     32 B9 02 F1 | 	add	local10, objptr
0996c     04 B8 06 F1 | 	add	local10, #4
09970     5C B1 62 FC | 	wrlong	local06, local10
09974     03 00 00 FF 
09978     00 64 06 F1 | 	add	objptr, ##1536
0997c     32 B9 02 FB | 	rdlong	local10, objptr
09980     5C BB 02 F6 | 	mov	local11, local10
09984     01 BA 66 F0 | 	shl	local11, #1
09988     5C BB 02 F1 | 	add	local11, local10
0998c     02 BA 66 F0 | 	shl	local11, #2
09990     03 00 00 FF 
09994     00 64 86 F1 | 	sub	objptr, ##1536
09998     32 BB 02 F1 | 	add	local11, objptr
0999c     08 BA 06 F1 | 	add	local11, #8
099a0     5D B3 62 FC | 	wrlong	local07, local11
099a4     03 00 00 FF 
099a8     00 64 06 F1 | 	add	objptr, ##1536
099ac     32 AF 02 FB | 	rdlong	local05, objptr
099b0     01 AE 06 F1 | 	add	local05, #1
099b4     32 AF 62 FC | 	wrlong	local05, objptr
099b8     4B 00 00 FF 
099bc     9C 64 86 F1 | 	sub	objptr, ##38556
099c0                 | LR__0872
099c0                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
099c0     38 00 00 FF 
099c4     64 64 06 F1 | 	add	objptr, ##28772
099c8     32 AD 02 FB | 	rdlong	local04, objptr
099cc     03 AC 66 F0 | 	shl	local04, #3
099d0     02 00 00 FF 
099d4     38 64 86 F1 | 	sub	objptr, ##1080
099d8     32 AD 02 F1 | 	add	local04, objptr
099dc     04 AC 06 F1 | 	add	local04, #4
099e0     56 B5 02 FB | 	rdlong	local08, local04
099e4     12 B4 0E F2 | 	cmp	local08, #18 wz
099e8     36 00 00 FF 
099ec     2C 64 86 F1 | 	sub	objptr, ##27692
099f0     60 01 90 5D |  if_ne	jmp	#LR__0873
099f4     22 AA 06 F6 | 	mov	local03, #34
099f8     53 AF 02 F6 | 	mov	local05, local01
099fc     54 B1 02 F6 | 	mov	local06, local02
09a00     55 B3 02 F6 | 	mov	local07, local03
09a04     4B 00 00 FF 
09a08     9C 64 06 F1 | 	add	objptr, ##38556
09a0c     32 B5 02 FB | 	rdlong	local08, objptr
09a10     5A B7 02 F6 | 	mov	local09, local08
09a14     01 B6 66 F0 | 	shl	local09, #1
09a18     5A B7 02 F1 | 	add	local09, local08
09a1c     02 B6 66 F0 | 	shl	local09, #2
09a20     03 00 00 FF 
09a24     00 64 86 F1 | 	sub	objptr, ##1536
09a28     32 B7 02 F1 | 	add	local09, objptr
09a2c     5B AF 62 FC | 	wrlong	local05, local09
09a30     03 00 00 FF 
09a34     00 64 06 F1 | 	add	objptr, ##1536
09a38     32 BB 02 FB | 	rdlong	local11, objptr
09a3c     5D B9 02 F6 | 	mov	local10, local11
09a40     01 B8 66 F0 | 	shl	local10, #1
09a44     5D B9 02 F1 | 	add	local10, local11
09a48     02 B8 66 F0 | 	shl	local10, #2
09a4c     03 00 00 FF 
09a50     00 64 86 F1 | 	sub	objptr, ##1536
09a54     32 B9 02 F1 | 	add	local10, objptr
09a58     04 B8 06 F1 | 	add	local10, #4
09a5c     5C B1 62 FC | 	wrlong	local06, local10
09a60     03 00 00 FF 
09a64     00 64 06 F1 | 	add	objptr, ##1536
09a68     32 AF 02 FB | 	rdlong	local05, objptr
09a6c     57 BB 02 F6 | 	mov	local11, local05
09a70     01 BA 66 F0 | 	shl	local11, #1
09a74     57 BB 02 F1 | 	add	local11, local05
09a78     02 BA 66 F0 | 	shl	local11, #2
09a7c     03 00 00 FF 
09a80     00 64 86 F1 | 	sub	objptr, ##1536
09a84     32 BB 02 F1 | 	add	local11, objptr
09a88     08 BA 06 F1 | 	add	local11, #8
09a8c     5D B3 62 FC | 	wrlong	local07, local11
09a90     03 00 00 FF 
09a94     00 64 06 F1 | 	add	objptr, ##1536
09a98     32 AF 02 FB | 	rdlong	local05, objptr
09a9c     01 AE 06 F1 | 	add	local05, #1
09aa0     32 AF 62 FC | 	wrlong	local05, objptr
09aa4     44 AA 06 F6 | 	mov	local03, #68
09aa8     53 AF 02 F6 | 	mov	local05, local01
09aac     54 B1 02 F6 | 	mov	local06, local02
09ab0     55 B3 02 F6 | 	mov	local07, local03
09ab4     32 B5 02 FB | 	rdlong	local08, objptr
09ab8     5A B7 02 F6 | 	mov	local09, local08
09abc     01 B6 66 F0 | 	shl	local09, #1
09ac0     5A B7 02 F1 | 	add	local09, local08
09ac4     02 B6 66 F0 | 	shl	local09, #2
09ac8     03 00 00 FF 
09acc     00 64 86 F1 | 	sub	objptr, ##1536
09ad0     32 B7 02 F1 | 	add	local09, objptr
09ad4     5B AF 62 FC | 	wrlong	local05, local09
09ad8     03 00 00 FF 
09adc     00 64 06 F1 | 	add	objptr, ##1536
09ae0     32 BB 02 FB | 	rdlong	local11, objptr
09ae4     5D B9 02 F6 | 	mov	local10, local11
09ae8     01 B8 66 F0 | 	shl	local10, #1
09aec     5D B9 02 F1 | 	add	local10, local11
09af0     02 B8 66 F0 | 	shl	local10, #2
09af4     03 00 00 FF 
09af8     00 64 86 F1 | 	sub	objptr, ##1536
09afc     32 B9 02 F1 | 	add	local10, objptr
09b00     04 B8 06 F1 | 	add	local10, #4
09b04     5C B1 62 FC | 	wrlong	local06, local10
09b08     03 00 00 FF 
09b0c     00 64 06 F1 | 	add	objptr, ##1536
09b10     32 B9 02 FB | 	rdlong	local10, objptr
09b14     5C BB 02 F6 | 	mov	local11, local10
09b18     01 BA 66 F0 | 	shl	local11, #1
09b1c     5C BB 02 F1 | 	add	local11, local10
09b20     02 BA 66 F0 | 	shl	local11, #2
09b24     03 00 00 FF 
09b28     00 64 86 F1 | 	sub	objptr, ##1536
09b2c     32 BB 02 F1 | 	add	local11, objptr
09b30     08 BA 06 F1 | 	add	local11, #8
09b34     5D B3 62 FC | 	wrlong	local07, local11
09b38     03 00 00 FF 
09b3c     00 64 06 F1 | 	add	objptr, ##1536
09b40     32 AF 02 FB | 	rdlong	local05, objptr
09b44     01 AE 06 F1 | 	add	local05, #1
09b48     32 AF 62 FC | 	wrlong	local05, objptr
09b4c     4B 00 00 FF 
09b50     9C 64 86 F1 | 	sub	objptr, ##38556
09b54                 | LR__0873
09b54                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09b54     38 00 00 FF 
09b58     64 64 06 F1 | 	add	objptr, ##28772
09b5c     32 AD 02 FB | 	rdlong	local04, objptr
09b60     03 AC 66 F0 | 	shl	local04, #3
09b64     02 00 00 FF 
09b68     38 64 86 F1 | 	sub	objptr, ##1080
09b6c     32 AD 02 F1 | 	add	local04, objptr
09b70     04 AC 06 F1 | 	add	local04, #4
09b74     56 B5 02 FB | 	rdlong	local08, local04
09b78     FE B5 0E F2 | 	cmp	local08, #510 wz
09b7c     36 00 00 FF 
09b80     2C 64 86 F1 | 	sub	objptr, ##27692
09b84     B8 00 90 5D |  if_ne	jmp	#LR__0874
09b88     44 AA 06 F6 | 	mov	local03, #68
09b8c     53 AF 02 F6 | 	mov	local05, local01
09b90     54 B1 02 F6 | 	mov	local06, local02
09b94     55 B3 02 F6 | 	mov	local07, local03
09b98     4B 00 00 FF 
09b9c     9C 64 06 F1 | 	add	objptr, ##38556
09ba0     32 B5 02 FB | 	rdlong	local08, objptr
09ba4     5A B7 02 F6 | 	mov	local09, local08
09ba8     01 B6 66 F0 | 	shl	local09, #1
09bac     5A B7 02 F1 | 	add	local09, local08
09bb0     02 B6 66 F0 | 	shl	local09, #2
09bb4     03 00 00 FF 
09bb8     00 64 86 F1 | 	sub	objptr, ##1536
09bbc     32 B7 02 F1 | 	add	local09, objptr
09bc0     5B AF 62 FC | 	wrlong	local05, local09
09bc4     03 00 00 FF 
09bc8     00 64 06 F1 | 	add	objptr, ##1536
09bcc     32 BB 02 FB | 	rdlong	local11, objptr
09bd0     5D B9 02 F6 | 	mov	local10, local11
09bd4     01 B8 66 F0 | 	shl	local10, #1
09bd8     5D B9 02 F1 | 	add	local10, local11
09bdc     02 B8 66 F0 | 	shl	local10, #2
09be0     03 00 00 FF 
09be4     00 64 86 F1 | 	sub	objptr, ##1536
09be8     32 B9 02 F1 | 	add	local10, objptr
09bec     04 B8 06 F1 | 	add	local10, #4
09bf0     5C B1 62 FC | 	wrlong	local06, local10
09bf4     03 00 00 FF 
09bf8     00 64 06 F1 | 	add	objptr, ##1536
09bfc     32 B9 02 FB | 	rdlong	local10, objptr
09c00     5C BB 02 F6 | 	mov	local11, local10
09c04     01 BA 66 F0 | 	shl	local11, #1
09c08     5C BB 02 F1 | 	add	local11, local10
09c0c     02 BA 66 F0 | 	shl	local11, #2
09c10     03 00 00 FF 
09c14     00 64 86 F1 | 	sub	objptr, ##1536
09c18     32 BB 02 F1 | 	add	local11, objptr
09c1c     08 BA 06 F1 | 	add	local11, #8
09c20     5D B3 62 FC | 	wrlong	local07, local11
09c24     03 00 00 FF 
09c28     00 64 06 F1 | 	add	objptr, ##1536
09c2c     32 AF 02 FB | 	rdlong	local05, objptr
09c30     01 AE 06 F1 | 	add	local05, #1
09c34     32 AF 62 FC | 	wrlong	local05, objptr
09c38     4B 00 00 FF 
09c3c     9C 64 86 F1 | 	sub	objptr, ##38556
09c40                 | LR__0874
09c40                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09c40     38 00 00 FF 
09c44     64 64 06 F1 | 	add	objptr, ##28772
09c48     32 AD 02 FB | 	rdlong	local04, objptr
09c4c     03 AC 66 F0 | 	shl	local04, #3
09c50     02 00 00 FF 
09c54     38 64 86 F1 | 	sub	objptr, ##1080
09c58     32 AD 02 F1 | 	add	local04, objptr
09c5c     04 AC 06 F1 | 	add	local04, #4
09c60     56 B5 02 FB | 	rdlong	local08, local04
09c64     11 B4 0E F2 | 	cmp	local08, #17 wz
09c68     36 00 00 FF 
09c6c     2C 64 86 F1 | 	sub	objptr, ##27692
09c70     6C 00 90 AD |  if_e	jmp	#LR__0875
09c74     38 00 00 FF 
09c78     64 64 06 F1 | 	add	objptr, ##28772
09c7c     32 B5 02 FB | 	rdlong	local08, objptr
09c80     03 B4 66 F0 | 	shl	local08, #3
09c84     02 00 00 FF 
09c88     38 64 86 F1 | 	sub	objptr, ##1080
09c8c     32 B5 02 F1 | 	add	local08, objptr
09c90     04 B4 06 F1 | 	add	local08, #4
09c94     5A B5 02 FB | 	rdlong	local08, local08
09c98     12 B4 0E F2 | 	cmp	local08, #18 wz
09c9c     36 00 00 FF 
09ca0     2C 64 86 F1 | 	sub	objptr, ##27692
09ca4     38 00 90 AD |  if_e	jmp	#LR__0875
09ca8     38 00 00 FF 
09cac     64 64 06 F1 | 	add	objptr, ##28772
09cb0     32 BB 02 FB | 	rdlong	local11, objptr
09cb4     03 BA 66 F0 | 	shl	local11, #3
09cb8     02 00 00 FF 
09cbc     38 64 86 F1 | 	sub	objptr, ##1080
09cc0     32 BB 02 F1 | 	add	local11, objptr
09cc4     04 BA 06 F1 | 	add	local11, #4
09cc8     5D BB 02 FB | 	rdlong	local11, local11
09ccc     FE BB 0E F2 | 	cmp	local11, #510 wz
09cd0     36 00 00 FF 
09cd4     2C 64 86 F1 | 	sub	objptr, ##27692
09cd8     16 7A 06 56 |  if_ne	mov	result1, #22
09cdc     68 00 90 5D |  if_ne	jmp	#LR__0877
09ce0                 | LR__0875
09ce0     38 00 00 FF 
09ce4     64 64 06 F1 | 	add	objptr, ##28772
09ce8     32 AD 02 FB | 	rdlong	local04, objptr
09cec     01 AC 06 F1 | 	add	local04, #1
09cf0     32 AD 62 FC | 	wrlong	local04, objptr
09cf4     03 AC 66 F0 | 	shl	local04, #3
09cf8     02 00 00 FF 
09cfc     38 64 86 F1 | 	sub	objptr, ##1080
09d00     32 AD 02 F1 | 	add	local04, objptr
09d04     04 AC 06 F1 | 	add	local04, #4
09d08     56 B5 02 FB | 	rdlong	local08, local04
09d0c     FE B5 0E F2 | 	cmp	local08, #510 wz
09d10     36 00 00 FF 
09d14     2C 64 86 F1 | 	sub	objptr, ##27692
09d18     28 00 90 AD |  if_e	jmp	#LR__0876
09d1c     38 00 00 FF 
09d20     64 64 06 F1 | 	add	objptr, ##28772
09d24     32 BB 02 FB | 	rdlong	local11, objptr
09d28     0E 00 00 FF 
09d2c     1C 64 06 F1 | 	add	objptr, ##7196
09d30     32 B9 02 FB | 	rdlong	local10, objptr
09d34     46 00 00 FF 
09d38     80 64 86 F1 | 	sub	objptr, ##35968
09d3c     5C BB 52 F2 | 	cmps	local11, local10 wc
09d40     E4 FA 9F CD |  if_b	jmp	#LR__0871
09d44                 | LR__0876
09d44                 | ' return 0
09d44     00 7A 06 F6 | 	mov	result1, #0
09d48                 | LR__0877
09d48     E7 F0 03 F6 | 	mov	ptra, fp
09d4c     F2 00 A0 FD | 	call	#popregs_
09d50                 | _compile_print_ret
09d50     2D 00 64 FD | 	ret
09d54                 | 
09d54                 | ' 
09d54                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09d54                 | ' 
09d54                 | ' function compile_if(aline as ulong) as ulong  
09d54                 | _compile_if
09d54     09 CA 05 F6 | 	mov	COUNT_, #9
09d58     E8 00 A0 FD | 	call	#pushregs_
09d5c                 | _compile_if_enter
09d5c     49 AD 02 F6 | 	mov	local04, arg01
09d60                 | ' return expr()
09d60     2C 21 B0 FD | 	call	#_expr
09d64     38 00 00 FF 
09d68     64 64 06 F1 | 	add	objptr, ##28772
09d6c     32 95 02 FB | 	rdlong	arg02, objptr
09d70     4A AF 02 F6 | 	mov	local05, arg02
09d74     03 AE 66 F0 | 	shl	local05, #3
09d78     02 00 00 FF 
09d7c     38 64 86 F1 | 	sub	objptr, ##1080
09d80     32 AF 02 F1 | 	add	local05, objptr
09d84     04 AE 06 F1 | 	add	local05, #4
09d88     57 AF 02 FB | 	rdlong	local05, local05
09d8c     01 94 06 F1 | 	add	arg02, #1
09d90     02 00 00 FF 
09d94     38 64 06 F1 | 	add	objptr, ##1080
09d98     32 95 62 FC | 	wrlong	arg02, objptr
09d9c     38 00 00 FF 
09da0     64 64 86 F1 | 	sub	objptr, ##28772
09da4                 | ' 
09da4                 | ' err=compile_fun_1p()
09da4                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09da4     5B AE 0E F2 | 	cmp	local05, #91 wz
09da8     34 7A 06 56 |  if_ne	mov	result1, #52
09dac     20 01 90 5D |  if_ne	jmp	#LR__0882
09db0     58 AA 06 F6 | 	mov	local03, #88
09db4     53 B1 02 F6 | 	mov	local06, local01
09db8     54 B3 02 F6 | 	mov	local07, local02
09dbc     55 95 02 F6 | 	mov	arg02, local03
09dc0     4B 00 00 FF 
09dc4     9C 64 06 F1 | 	add	objptr, ##38556
09dc8     32 93 02 FB | 	rdlong	arg01, objptr
09dcc     49 B5 02 F6 | 	mov	local08, arg01
09dd0     01 B4 66 F0 | 	shl	local08, #1
09dd4     49 B5 02 F1 | 	add	local08, arg01
09dd8     02 B4 66 F0 | 	shl	local08, #2
09ddc     03 00 00 FF 
09de0     00 64 86 F1 | 	sub	objptr, ##1536
09de4     32 B5 02 F1 | 	add	local08, objptr
09de8     5A B1 62 FC | 	wrlong	local06, local08
09dec     03 00 00 FF 
09df0     00 64 06 F1 | 	add	objptr, ##1536
09df4     32 B1 02 FB | 	rdlong	local06, objptr
09df8     58 93 02 F6 | 	mov	arg01, local06
09dfc     01 92 66 F0 | 	shl	arg01, #1
09e00     58 93 02 F1 | 	add	arg01, local06
09e04     02 92 66 F0 | 	shl	arg01, #2
09e08     03 00 00 FF 
09e0c     00 64 86 F1 | 	sub	objptr, ##1536
09e10     32 93 02 F1 | 	add	arg01, objptr
09e14     04 92 06 F1 | 	add	arg01, #4
09e18     49 B3 62 FC | 	wrlong	local07, arg01
09e1c     03 00 00 FF 
09e20     00 64 06 F1 | 	add	objptr, ##1536
09e24     32 B1 02 FB | 	rdlong	local06, objptr
09e28     58 93 02 F6 | 	mov	arg01, local06
09e2c     01 92 66 F0 | 	shl	arg01, #1
09e30     58 93 02 F1 | 	add	arg01, local06
09e34     02 92 66 F0 | 	shl	arg01, #2
09e38     03 00 00 FF 
09e3c     00 64 86 F1 | 	sub	objptr, ##1536
09e40     32 93 02 F1 | 	add	arg01, objptr
09e44     08 92 06 F1 | 	add	arg01, #8
09e48     49 95 62 FC | 	wrlong	arg02, arg01
09e4c     03 00 00 FF 
09e50     00 64 06 F1 | 	add	objptr, ##1536
09e54     32 B1 02 FB | 	rdlong	local06, objptr
09e58     01 B0 06 F1 | 	add	local06, #1
09e5c     32 B1 62 FC | 	wrlong	local06, objptr
09e60                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09e60                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09e60     13 00 00 FF 
09e64     38 64 86 F1 | 	sub	objptr, ##9784
09e68     32 95 02 FB | 	rdlong	arg02, objptr
09e6c     01 94 06 F1 | 	add	arg02, #1
09e70     03 94 66 F0 | 	shl	arg02, #3
09e74     02 00 00 FF 
09e78     38 64 86 F1 | 	sub	objptr, ##1080
09e7c     32 95 02 F1 | 	add	arg02, objptr
09e80     4A 93 02 FB | 	rdlong	arg01, arg02
09e84     36 00 00 FF 
09e88     2C 64 86 F1 | 	sub	objptr, ##27692
09e8c                 | ' 
09e8c                 | ' select case s
09e8c     93 01 00 FF 
09e90     F2 94 06 F6 | 	mov	arg02, ##@LR__5639
09e94     6C AB B1 FD | 	call	#__system___string_cmp
09e98     00 7A 0E F2 | 	cmp	result1, #0 wz
09e9c     1B 7A 06 A6 |  if_e	mov	result1, #27
09ea0     00 7A 06 56 |  if_ne	mov	result1, #0
09ea4     00 7A 0E F2 | 	cmp	result1, #0 wz
09ea8     10 00 90 AD |  if_e	jmp	#LR__0880
09eac     05 92 06 F6 | 	mov	arg01, #5
09eb0     4C E4 BF FD | 	call	#_compile_immediate_assign
09eb4     3D B7 02 F6 | 	mov	local09, result1
09eb8     10 00 90 FD | 	jmp	#LR__0881
09ebc                 | LR__0880
09ebc     05 92 06 F6 | 	mov	arg01, #5
09ec0     56 95 02 F6 | 	mov	arg02, local04
09ec4     50 DA BF FD | 	call	#_compile_immediate
09ec8     3D B7 02 F6 | 	mov	local09, result1
09ecc                 | LR__0881
09ecc                 | ' return err
09ecc     5B 7B 02 F6 | 	mov	result1, local09
09ed0                 | LR__0882
09ed0     E7 F0 03 F6 | 	mov	ptra, fp
09ed4     F2 00 A0 FD | 	call	#popregs_
09ed8                 | _compile_if_ret
09ed8     2D 00 64 FD | 	ret
09edc                 | 
09edc                 | ' 
09edc                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09edc                 | ' 
09edc                 | ' function compile_else(aline as ulong) as ulong  
09edc                 | _compile_else
09edc     07 CA 05 F6 | 	mov	COUNT_, #7
09ee0     E8 00 A0 FD | 	call	#pushregs_
09ee4                 | _compile_else_enter
09ee4     49 AD 02 F6 | 	mov	local04, arg01
09ee8     5A AA 06 F6 | 	mov	local03, #90
09eec     53 AF 02 F6 | 	mov	local05, local01
09ef0     54 B1 02 F6 | 	mov	local06, local02
09ef4     55 A7 02 F6 | 	mov	local01, local03
09ef8     4B 00 00 FF 
09efc     9C 64 06 F1 | 	add	objptr, ##38556
09f00     32 95 02 FB | 	rdlong	arg02, objptr
09f04     4A 93 02 F6 | 	mov	arg01, arg02
09f08     01 92 66 F0 | 	shl	arg01, #1
09f0c     4A 93 02 F1 | 	add	arg01, arg02
09f10     02 92 66 F0 | 	shl	arg01, #2
09f14     03 00 00 FF 
09f18     00 64 86 F1 | 	sub	objptr, ##1536
09f1c     32 93 02 F1 | 	add	arg01, objptr
09f20     49 AF 62 FC | 	wrlong	local05, arg01
09f24     03 00 00 FF 
09f28     00 64 06 F1 | 	add	objptr, ##1536
09f2c     32 AF 02 FB | 	rdlong	local05, objptr
09f30     57 95 02 F6 | 	mov	arg02, local05
09f34     01 94 66 F0 | 	shl	arg02, #1
09f38     57 95 02 F1 | 	add	arg02, local05
09f3c     02 94 66 F0 | 	shl	arg02, #2
09f40     03 00 00 FF 
09f44     00 64 86 F1 | 	sub	objptr, ##1536
09f48     32 95 02 F1 | 	add	arg02, objptr
09f4c     04 94 06 F1 | 	add	arg02, #4
09f50     4A B1 62 FC | 	wrlong	local06, arg02
09f54     03 00 00 FF 
09f58     00 64 06 F1 | 	add	objptr, ##1536
09f5c     32 B1 02 FB | 	rdlong	local06, objptr
09f60     58 AF 02 F6 | 	mov	local05, local06
09f64     01 AE 66 F0 | 	shl	local05, #1
09f68     58 AF 02 F1 | 	add	local05, local06
09f6c     02 AE 66 F0 | 	shl	local05, #2
09f70     03 00 00 FF 
09f74     00 64 86 F1 | 	sub	objptr, ##1536
09f78     32 AF 02 F1 | 	add	local05, objptr
09f7c     08 AE 06 F1 | 	add	local05, #8
09f80     57 A7 62 FC | 	wrlong	local01, local05
09f84     03 00 00 FF 
09f88     00 64 06 F1 | 	add	objptr, ##1536
09f8c     32 AF 02 FB | 	rdlong	local05, objptr
09f90     01 AE 06 F1 | 	add	local05, #1
09f94     32 AF 62 FC | 	wrlong	local05, objptr
09f98                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09f98                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09f98     13 00 00 FF 
09f9c     38 64 86 F1 | 	sub	objptr, ##9784
09fa0     32 B1 02 FB | 	rdlong	local06, objptr
09fa4     01 B0 06 F1 | 	add	local06, #1
09fa8     03 B0 66 F0 | 	shl	local06, #3
09fac     02 00 00 FF 
09fb0     38 64 86 F1 | 	sub	objptr, ##1080
09fb4     32 B1 02 F1 | 	add	local06, objptr
09fb8     58 93 02 FB | 	rdlong	arg01, local06
09fbc     36 00 00 FF 
09fc0     2C 64 86 F1 | 	sub	objptr, ##27692
09fc4                 | ' 
09fc4                 | ' select case s
09fc4     93 01 00 FF 
09fc8     F2 94 06 F6 | 	mov	arg02, ##@LR__5639
09fcc     34 AA B1 FD | 	call	#__system___string_cmp
09fd0     00 7A 0E F2 | 	cmp	result1, #0 wz
09fd4     1B 7A 06 A6 |  if_e	mov	result1, #27
09fd8     00 7A 06 56 |  if_ne	mov	result1, #0
09fdc     00 7A 0E F2 | 	cmp	result1, #0 wz
09fe0     10 00 90 AD |  if_e	jmp	#LR__0890
09fe4     05 92 06 F6 | 	mov	arg01, #5
09fe8     14 E3 BF FD | 	call	#_compile_immediate_assign
09fec     3D B3 02 F6 | 	mov	local07, result1
09ff0     10 00 90 FD | 	jmp	#LR__0891
09ff4                 | LR__0890
09ff4     05 92 06 F6 | 	mov	arg01, #5
09ff8     56 95 02 F6 | 	mov	arg02, local04
09ffc     18 D9 BF FD | 	call	#_compile_immediate
0a000     3D B3 02 F6 | 	mov	local07, result1
0a004                 | LR__0891
0a004                 | ' return err
0a004     59 7B 02 F6 | 	mov	result1, local07
0a008     E7 F0 03 F6 | 	mov	ptra, fp
0a00c     F2 00 A0 FD | 	call	#popregs_
0a010                 | _compile_else_ret
0a010     2D 00 64 FD | 	ret
0a014                 | 
0a014                 | ' 
0a014                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
0a014                 | ' 
0a014                 | ' function compile_dim() as ulong  
0a014                 | _compile_dim
0a014     11 CA 05 F6 | 	mov	COUNT_, #17
0a018     E8 00 A0 FD | 	call	#pushregs_
0a01c     01 A6 06 F6 | 	mov	local01, #1
0a020     01 A8 06 F6 | 	mov	local02, #1
0a024     01 AA 06 F6 | 	mov	local03, #1
0a028                 | ' 
0a028                 | ' dims(0)=1: dims(1)=1: dims(2)=1
0a028                 | ' if isname(lparts(ct).part$) then 
0a028     38 00 00 FF 
0a02c     64 64 06 F1 | 	add	objptr, ##28772
0a030     32 99 02 FB | 	rdlong	arg04, objptr
0a034     03 98 66 F0 | 	shl	arg04, #3
0a038     02 00 00 FF 
0a03c     38 64 86 F1 | 	sub	objptr, ##1080
0a040     32 99 02 F1 | 	add	arg04, objptr
0a044     4C 93 02 FB | 	rdlong	arg01, arg04
0a048     36 00 00 FF 
0a04c     2C 64 86 F1 | 	sub	objptr, ##27692
0a050     C4 C7 BF FD | 	call	#_isname
0a054     00 7A 0E F2 | 	cmp	result1, #0 wz
0a058     58 05 90 AD |  if_e	jmp	#LR__0923
0a05c     38 00 00 FF 
0a060     64 64 06 F1 | 	add	objptr, ##28772
0a064     32 AD 02 FB | 	rdlong	local04, objptr
0a068     03 AC 66 F0 | 	shl	local04, #3
0a06c     02 00 00 FF 
0a070     38 64 86 F1 | 	sub	objptr, ##1080
0a074     32 AD 02 F1 | 	add	local04, objptr
0a078     56 AF 02 FB | 	rdlong	local05, local04
0a07c     01 B0 66 F6 | 	neg	local06, #1
0a080                 | '   varname2$=lparts(ct).part$ 
0a080                 | '   j=-1
0a080                 | '   if varnum>0 then
0a080     04 64 86 F1 | 	sub	objptr, #4
0a084     32 B3 02 FB | 	rdlong	local07, objptr
0a088     36 00 00 FF 
0a08c     28 64 86 F1 | 	sub	objptr, ##27688
0a090     01 B2 56 F2 | 	cmps	local07, #1 wc
0a094     54 00 90 CD |  if_b	jmp	#LR__0902
0a098                 | '     for i=0 to varnum-1
0a098     00 B4 06 F6 | 	mov	local08, #0
0a09c     36 00 00 FF 
0a0a0     28 64 06 F1 | 	add	objptr, ##27688
0a0a4     32 B7 02 FB | 	rdlong	local09, objptr
0a0a8     36 00 00 FF 
0a0ac     28 64 86 F1 | 	sub	objptr, ##27688
0a0b0                 | LR__0900
0a0b0     5B B5 52 F2 | 	cmps	local08, local09 wc
0a0b4     34 00 90 3D |  if_ae	jmp	#LR__0901
0a0b8                 | '       if variables(i).name=varname2$ then j=i : exit
0a0b8     5A AD 02 F6 | 	mov	local04, local08
0a0bc     04 AC 66 F0 | 	shl	local04, #4
0a0c0     32 95 02 F6 | 	mov	arg02, objptr
0a0c4     16 00 00 FF 
0a0c8     18 94 06 F1 | 	add	arg02, ##11288
0a0cc     4A AD 02 F1 | 	add	local04, arg02
0a0d0     56 93 02 FB | 	rdlong	arg01, local04
0a0d4     57 95 02 F6 | 	mov	arg02, local05
0a0d8     28 A9 B1 FD | 	call	#__system___string_cmp
0a0dc     00 7A 0E F2 | 	cmp	result1, #0 wz
0a0e0     5A B1 02 A6 |  if_e	mov	local06, local08
0a0e4     01 B4 06 51 |  if_ne	add	local08, #1
0a0e8     C4 FF 9F 5D |  if_ne	jmp	#LR__0900
0a0ec                 | LR__0901
0a0ec                 | LR__0902
0a0ec                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
0a0ec     FF FF 7F FF 
0a0f0     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0a0f4     36 00 00 AF 
0a0f8     28 64 06 A1 |  if_e	add	objptr, ##27688
0a0fc     32 B1 02 AB |  if_e	rdlong	local06, objptr
0a100     36 00 00 AF 
0a104     28 64 86 A1 |  if_e	sub	objptr, ##27688
0a108     78 00 90 AD |  if_e	jmp	#LR__0903
0a10c     00 92 06 F6 | 	mov	arg01, #0
0a110     4C FE B1 FD | 	call	#__system___getiolock_0622
0a114     3D 93 02 F6 | 	mov	arg01, result1
0a118     C0 A8 B1 FD | 	call	#__system___lockmem
0a11c     95 01 00 FF 
0a120     FF 95 06 F6 | 	mov	arg02, ##@LR__5911
0a124     00 92 06 F6 | 	mov	arg01, #0
0a128     00 96 06 F6 | 	mov	arg03, #0
0a12c     A0 B5 B1 FD | 	call	#__system___basic_print_string
0a130     53 00 00 FF 
0a134     08 65 06 F1 | 	add	objptr, ##42760
0a138     32 95 02 FB | 	rdlong	arg02, objptr
0a13c     53 00 00 FF 
0a140     08 65 86 F1 | 	sub	objptr, ##42760
0a144     00 92 06 F6 | 	mov	arg01, #0
0a148     00 96 06 F6 | 	mov	arg03, #0
0a14c     0A 98 06 F6 | 	mov	arg04, #10
0a150     00 B6 B1 FD | 	call	#__system___basic_print_unsigned
0a154     96 01 00 FF 
0a158     0D 94 06 F6 | 	mov	arg02, ##@LR__5912
0a15c     00 92 06 F6 | 	mov	arg01, #0
0a160     00 96 06 F6 | 	mov	arg03, #0
0a164     68 B5 B1 FD | 	call	#__system___basic_print_string
0a168     00 92 06 F6 | 	mov	arg01, #0
0a16c     0A 94 06 F6 | 	mov	arg02, #10
0a170     00 96 06 F6 | 	mov	arg03, #0
0a174     00 B5 B1 FD | 	call	#__system___basic_print_char
0a178     00 92 06 F6 | 	mov	arg01, #0
0a17c     E0 FD B1 FD | 	call	#__system___getiolock_0622
0a180     3D 01 68 FC | 	wrlong	#0, result1
0a184                 | LR__0903
0a184                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
0a184     38 00 00 FF 
0a188     64 64 06 F1 | 	add	objptr, ##28772
0a18c     32 95 02 FB | 	rdlong	arg02, objptr
0a190     01 94 06 F1 | 	add	arg02, #1
0a194     03 94 66 F0 | 	shl	arg02, #3
0a198     02 00 00 FF 
0a19c     38 64 86 F1 | 	sub	objptr, ##1080
0a1a0     32 95 02 F1 | 	add	arg02, objptr
0a1a4     4A 93 02 FB | 	rdlong	arg01, arg02
0a1a8     96 01 00 FF 
0a1ac     2E 94 06 F6 | 	mov	arg02, ##@LR__5913
0a1b0     36 00 00 FF 
0a1b4     2C 64 86 F1 | 	sub	objptr, ##27692
0a1b8     48 A8 B1 FD | 	call	#__system___string_cmp
0a1bc     00 7A 0E F2 | 	cmp	result1, #0 wz
0a1c0     44 00 90 AD |  if_e	jmp	#LR__0904
0a1c4     38 00 00 FF 
0a1c8     64 64 06 F1 | 	add	objptr, ##28772
0a1cc     32 B7 02 FB | 	rdlong	local09, objptr
0a1d0     01 B6 06 F1 | 	add	local09, #1
0a1d4     03 B6 66 F0 | 	shl	local09, #3
0a1d8     02 00 00 FF 
0a1dc     38 64 86 F1 | 	sub	objptr, ##1080
0a1e0     32 B7 02 F1 | 	add	local09, objptr
0a1e4     5B 93 02 FB | 	rdlong	arg01, local09
0a1e8     96 01 00 FF 
0a1ec     30 94 06 F6 | 	mov	arg02, ##@LR__5914
0a1f0     36 00 00 FF 
0a1f4     2C 64 86 F1 | 	sub	objptr, ##27692
0a1f8     08 A8 B1 FD | 	call	#__system___string_cmp
0a1fc     00 7A 0E F2 | 	cmp	result1, #0 wz
0a200     2B 7A 06 56 |  if_ne	mov	result1, #43
0a204     B4 04 90 5D |  if_ne	jmp	#LR__0925
0a208                 | LR__0904
0a208                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
0a208     38 00 00 FF 
0a20c     64 64 06 F1 | 	add	objptr, ##28772
0a210     32 95 02 FB | 	rdlong	arg02, objptr
0a214     01 94 06 F1 | 	add	arg02, #1
0a218     03 94 66 F0 | 	shl	arg02, #3
0a21c     02 00 00 FF 
0a220     38 64 86 F1 | 	sub	objptr, ##1080
0a224     32 95 02 F1 | 	add	arg02, objptr
0a228     4A 93 02 FB | 	rdlong	arg01, arg02
0a22c     96 01 00 FF 
0a230     33 94 06 F6 | 	mov	arg02, ##@LR__5915
0a234     36 00 00 FF 
0a238     2C 64 86 F1 | 	sub	objptr, ##27692
0a23c     C4 A7 B1 FD | 	call	#__system___string_cmp
0a240     00 7A 0E F2 | 	cmp	result1, #0 wz
0a244     38 00 00 AF 
0a248     64 64 06 A1 |  if_e	add	objptr, ##28772
0a24c     32 B9 02 AB |  if_e	rdlong	local10, objptr
0a250     38 00 00 AF 
0a254     64 64 86 A1 |  if_e	sub	objptr, ##28772
0a258     01 B8 06 A1 |  if_e	add	local10, #1
0a25c     48 01 90 AD |  if_e	jmp	#LR__0909
0a260     38 00 00 FF 
0a264     64 64 06 F1 | 	add	objptr, ##28772
0a268     32 B9 02 FB | 	rdlong	local10, objptr
0a26c     38 00 00 FF 
0a270     64 64 86 F1 | 	sub	objptr, ##28772
0a274     02 B8 06 F1 | 	add	local10, #2
0a278     00 BA 06 F6 | 	mov	local11, #0
0a27c                 | '   l=ct+2 : m=0 : do
0a27c                 | LR__0905
0a27c                 | '   if isdec(lparts(l).part$) then 
0a27c     5C AD 02 F6 | 	mov	local04, local10
0a280     03 AC 66 F0 | 	shl	local04, #3
0a284     32 B7 02 F6 | 	mov	local09, objptr
0a288     36 00 00 FF 
0a28c     2C B6 06 F1 | 	add	local09, ##27692
0a290     5B AD 02 F1 | 	add	local04, local09
0a294     56 93 02 FB | 	rdlong	arg01, local04
0a298     80 CE BF FD | 	call	#_isdec
0a29c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a2a0     40 00 90 AD |  if_e	jmp	#LR__0906
0a2a4     5D BD 02 F6 | 	mov	local12, local11
0a2a8     53 BD 06 F1 | 	add	local12, #local01
0a2ac     5C B7 02 F6 | 	mov	local09, local10
0a2b0     03 B6 66 F0 | 	shl	local09, #3
0a2b4     32 B5 02 F6 | 	mov	local08, objptr
0a2b8     36 00 00 FF 
0a2bc     2C B4 06 F1 | 	add	local08, ##27692
0a2c0     5A B7 02 F1 | 	add	local09, local08
0a2c4     5B 93 02 FB | 	rdlong	arg01, local09
0a2c8     00 94 06 F6 | 	mov	arg02, #0
0a2cc     60 D4 B1 FD | 	call	#__system____builtin_atoi
0a2d0     3D BF 02 F6 | 	mov	local13, result1
0a2d4                 | 	'.live	local13
0a2d4                 | 	'.live	local12
0a2d4     00 BC 8E F9 | 	altd	local12, #0
0a2d8     5F BD 02 F6 | 	mov	local12, local13
0a2dc     01 BA 06 F1 | 	add	local11, #1
0a2e0     08 00 90 FD | 	jmp	#LR__0907
0a2e4                 | LR__0906
0a2e4                 | '     return(17)
0a2e4     11 7A 06 F6 | 	mov	result1, #17
0a2e8     D0 03 90 FD | 	jmp	#LR__0925
0a2ec                 | LR__0907
0a2ec                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a2ec     5C AD 02 F6 | 	mov	local04, local10
0a2f0     01 AC 06 F1 | 	add	local04, #1
0a2f4     03 AC 66 F0 | 	shl	local04, #3
0a2f8     32 BF 02 F6 | 	mov	local13, objptr
0a2fc     36 00 00 FF 
0a300     2C BE 06 F1 | 	add	local13, ##27692
0a304     5F AD 02 F1 | 	add	local04, local13
0a308     56 93 02 FB | 	rdlong	arg01, local04
0a30c     96 01 00 FF 
0a310     36 94 06 F6 | 	mov	arg02, ##@LR__5916
0a314     EC A6 B1 FD | 	call	#__system___string_cmp
0a318     00 7A 0E F2 | 	cmp	result1, #0 wz
0a31c     38 00 90 AD |  if_e	jmp	#LR__0908
0a320     5C BF 02 F6 | 	mov	local13, local10
0a324     01 BE 06 F1 | 	add	local13, #1
0a328     03 BE 66 F0 | 	shl	local13, #3
0a32c     32 BD 02 F6 | 	mov	local12, objptr
0a330     36 00 00 FF 
0a334     2C BC 06 F1 | 	add	local12, ##27692
0a338     5E BF 02 F1 | 	add	local13, local12
0a33c     5F 93 02 FB | 	rdlong	arg01, local13
0a340     96 01 00 FF 
0a344     38 94 06 F6 | 	mov	arg02, ##@LR__5917
0a348     B8 A6 B1 FD | 	call	#__system___string_cmp
0a34c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a350     2C 7A 06 56 |  if_ne	mov	result1, #44
0a354     64 03 90 5D |  if_ne	jmp	#LR__0925
0a358                 | LR__0908
0a358     02 B8 06 F1 | 	add	local10, #2
0a35c     5C AD 02 F6 | 	mov	local04, local10
0a360     01 AC 86 F1 | 	sub	local04, #1
0a364     03 AC 66 F0 | 	shl	local04, #3
0a368     32 BF 02 F6 | 	mov	local13, objptr
0a36c     36 00 00 FF 
0a370     2C BE 06 F1 | 	add	local13, ##27692
0a374     5F AD 02 F1 | 	add	local04, local13
0a378     56 93 02 FB | 	rdlong	arg01, local04
0a37c     96 01 00 FF 
0a380     3A 94 06 F6 | 	mov	arg02, ##@LR__5918
0a384     7C A6 B1 FD | 	call	#__system___string_cmp
0a388     00 7A 0E F2 | 	cmp	result1, #0 wz
0a38c     03 BA 56 52 |  if_ne	cmps	local11, #3 wc
0a390     E8 FE 9F 4D |  if_c_and_nz	jmp	#LR__0905
0a394                 | '   if m>3 then return 45
0a394     04 BA 56 F2 | 	cmps	local11, #4 wc
0a398     2D 7A 06 36 |  if_ae	mov	result1, #45
0a39c     1C 03 90 3D |  if_ae	jmp	#LR__0925
0a3a0     00 C1 06 F6 | 	mov	local14, #256
0a3a4     0C C2 06 F6 | 	mov	local15, #12
0a3a8                 | LR__0909
0a3a8                 | '   arraytype=array_no_type : esize=12
0a3a8                 | ' 1350 
0a3a8                 | '   if lparts(l).part$="as" then
0a3a8     5C AD 02 F6 | 	mov	local04, local10
0a3ac     03 AC 66 F0 | 	shl	local04, #3
0a3b0     32 BF 02 F6 | 	mov	local13, objptr
0a3b4     36 00 00 FF 
0a3b8     2C BE 06 F1 | 	add	local13, ##27692
0a3bc     5F AD 02 F1 | 	add	local04, local13
0a3c0     56 93 02 FB | 	rdlong	arg01, local04
0a3c4     96 01 00 FF 
0a3c8     3C 94 06 F6 | 	mov	arg02, ##@LR__5919
0a3cc     34 A6 B1 FD | 	call	#__system___string_cmp
0a3d0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a3d4     E4 01 90 5D |  if_ne	jmp	#LR__0924
0a3d8                 | '     select case lparts(l+1).part$
0a3d8     5C BD 02 F6 | 	mov	local12, local10
0a3dc     01 BC 06 F1 | 	add	local12, #1
0a3e0     03 BC 66 F0 | 	shl	local12, #3
0a3e4     32 AD 02 F6 | 	mov	local04, objptr
0a3e8     36 00 00 FF 
0a3ec     2C AC 06 F1 | 	add	local04, ##27692
0a3f0     56 BD 02 F1 | 	add	local12, local04
0a3f4     5E C5 02 FB | 	rdlong	local16, local12
0a3f8     96 01 00 FF 
0a3fc     3F 94 06 F6 | 	mov	arg02, ##@LR__5920
0a400     62 93 02 F6 | 	mov	arg01, local16
0a404     FC A5 B1 FD | 	call	#__system___string_cmp
0a408     00 7A 0E F2 | 	cmp	result1, #0 wz
0a40c     0C 01 90 AD |  if_e	jmp	#LR__0910
0a410     96 01 00 FF 
0a414     44 94 06 F6 | 	mov	arg02, ##@LR__5921
0a418     62 93 02 F6 | 	mov	arg01, local16
0a41c     E4 A5 B1 FD | 	call	#__system___string_cmp
0a420     00 7A 0E F2 | 	cmp	result1, #0 wz
0a424     00 01 90 AD |  if_e	jmp	#LR__0911
0a428     96 01 00 FF 
0a42c     4A 94 06 F6 | 	mov	arg02, ##@LR__5922
0a430     62 93 02 F6 | 	mov	arg01, local16
0a434     CC A5 B1 FD | 	call	#__system___string_cmp
0a438     00 7A 0E F2 | 	cmp	result1, #0 wz
0a43c     F4 00 90 AD |  if_e	jmp	#LR__0912
0a440     96 01 00 FF 
0a444     50 94 06 F6 | 	mov	arg02, ##@LR__5923
0a448     62 93 02 F6 | 	mov	arg01, local16
0a44c     B4 A5 B1 FD | 	call	#__system___string_cmp
0a450     00 7A 0E F2 | 	cmp	result1, #0 wz
0a454     E8 00 90 AD |  if_e	jmp	#LR__0913
0a458     96 01 00 FF 
0a45c     57 94 06 F6 | 	mov	arg02, ##@LR__5924
0a460     62 93 02 F6 | 	mov	arg01, local16
0a464     9C A5 B1 FD | 	call	#__system___string_cmp
0a468     00 7A 0E F2 | 	cmp	result1, #0 wz
0a46c     DC 00 90 AD |  if_e	jmp	#LR__0914
0a470     96 01 00 FF 
0a474     5C 94 06 F6 | 	mov	arg02, ##@LR__5925
0a478     62 93 02 F6 | 	mov	arg01, local16
0a47c     84 A5 B1 FD | 	call	#__system___string_cmp
0a480     00 7A 0E F2 | 	cmp	result1, #0 wz
0a484     D0 00 90 AD |  if_e	jmp	#LR__0915
0a488     96 01 00 FF 
0a48c     64 94 06 F6 | 	mov	arg02, ##@LR__5926
0a490     62 93 02 F6 | 	mov	arg01, local16
0a494     6C A5 B1 FD | 	call	#__system___string_cmp
0a498     00 7A 0E F2 | 	cmp	result1, #0 wz
0a49c     C4 00 90 AD |  if_e	jmp	#LR__0916
0a4a0     96 01 00 FF 
0a4a4     6A 94 06 F6 | 	mov	arg02, ##@LR__5927
0a4a8     62 93 02 F6 | 	mov	arg01, local16
0a4ac     54 A5 B1 FD | 	call	#__system___string_cmp
0a4b0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4b4     B8 00 90 AD |  if_e	jmp	#LR__0917
0a4b8     96 01 00 FF 
0a4bc     70 94 06 F6 | 	mov	arg02, ##@LR__5928
0a4c0     62 93 02 F6 | 	mov	arg01, local16
0a4c4     3C A5 B1 FD | 	call	#__system___string_cmp
0a4c8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4cc     AC 00 90 AD |  if_e	jmp	#LR__0918
0a4d0     96 01 00 FF 
0a4d4     77 94 06 F6 | 	mov	arg02, ##@LR__5929
0a4d8     62 93 02 F6 | 	mov	arg01, local16
0a4dc     24 A5 B1 FD | 	call	#__system___string_cmp
0a4e0     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4e4     A0 00 90 AD |  if_e	jmp	#LR__0919
0a4e8     96 01 00 FF 
0a4ec     7E 94 06 F6 | 	mov	arg02, ##@LR__5930
0a4f0     62 93 02 F6 | 	mov	arg01, local16
0a4f4     0C A5 B1 FD | 	call	#__system___string_cmp
0a4f8     00 7A 0E F2 | 	cmp	result1, #0 wz
0a4fc     94 00 90 AD |  if_e	jmp	#LR__0920
0a500     96 01 00 FF 
0a504     85 94 06 F6 | 	mov	arg02, ##@LR__5931
0a508     62 93 02 F6 | 	mov	arg01, local16
0a50c     F4 A4 B1 FD | 	call	#__system___string_cmp
0a510     00 7A 0E F2 | 	cmp	result1, #0 wz
0a514     88 00 90 AD |  if_e	jmp	#LR__0921
0a518     90 00 90 FD | 	jmp	#LR__0922
0a51c                 | LR__0910
0a51c     01 C1 06 F6 | 	mov	local14, #257
0a520     01 C2 06 F6 | 	mov	local15, #1
0a524     94 00 90 FD | 	jmp	#LR__0924
0a528                 | LR__0911
0a528     02 C1 06 F6 | 	mov	local14, #258
0a52c     01 C2 06 F6 | 	mov	local15, #1
0a530     88 00 90 FD | 	jmp	#LR__0924
0a534                 | LR__0912
0a534     03 C1 06 F6 | 	mov	local14, #259
0a538     02 C2 06 F6 | 	mov	local15, #2
0a53c     7C 00 90 FD | 	jmp	#LR__0924
0a540                 | LR__0913
0a540     04 C1 06 F6 | 	mov	local14, #260
0a544     02 C2 06 F6 | 	mov	local15, #2
0a548     70 00 90 FD | 	jmp	#LR__0924
0a54c                 | LR__0914
0a54c     05 C1 06 F6 | 	mov	local14, #261
0a550     04 C2 06 F6 | 	mov	local15, #4
0a554     64 00 90 FD | 	jmp	#LR__0924
0a558                 | LR__0915
0a558     05 C1 06 F6 | 	mov	local14, #261
0a55c     04 C2 06 F6 | 	mov	local15, #4
0a560     58 00 90 FD | 	jmp	#LR__0924
0a564                 | LR__0916
0a564     06 C1 06 F6 | 	mov	local14, #262
0a568     04 C2 06 F6 | 	mov	local15, #4
0a56c     4C 00 90 FD | 	jmp	#LR__0924
0a570                 | LR__0917
0a570     07 C1 06 F6 | 	mov	local14, #263
0a574     08 C2 06 F6 | 	mov	local15, #8
0a578     40 00 90 FD | 	jmp	#LR__0924
0a57c                 | LR__0918
0a57c     08 C1 06 F6 | 	mov	local14, #264
0a580     08 C2 06 F6 | 	mov	local15, #8
0a584     34 00 90 FD | 	jmp	#LR__0924
0a588                 | LR__0919
0a588     09 C1 06 F6 | 	mov	local14, #265
0a58c     04 C2 06 F6 | 	mov	local15, #4
0a590     28 00 90 FD | 	jmp	#LR__0924
0a594                 | LR__0920
0a594     0A C1 06 F6 | 	mov	local14, #266
0a598     08 C2 06 F6 | 	mov	local15, #8
0a59c     1C 00 90 FD | 	jmp	#LR__0924
0a5a0                 | LR__0921
0a5a0     0B C1 06 F6 | 	mov	local14, #267
0a5a4     04 C2 06 F6 | 	mov	local15, #4
0a5a8     10 00 90 FD | 	jmp	#LR__0924
0a5ac                 | LR__0922
0a5ac     2F 7A 06 F6 | 	mov	result1, #47
0a5b0     08 01 90 FD | 	jmp	#LR__0925
0a5b4                 | LR__0923
0a5b4                 | '   return 46
0a5b4     2E 7A 06 F6 | 	mov	result1, #46
0a5b8     00 01 90 FD | 	jmp	#LR__0925
0a5bc                 | LR__0924
0a5bc     53 C3 02 FD | 	qmul	local15, local01
0a5c0     18 B2 62 FD | 	getqx	local07
0a5c4     54 B3 02 FD | 	qmul	local07, local02
0a5c8     18 C4 62 FD | 	getqx	local16
0a5cc     55 C5 02 FD | 	qmul	local16, local03
0a5d0     53 00 00 FF 
0a5d4     F0 64 06 F1 | 	add	objptr, ##42736
0a5d8     32 C7 02 FB | 	rdlong	local17, objptr
0a5dc     60 95 02 F6 | 	mov	arg02, local14
0a5e0     18 C4 62 FD | 	getqx	local16
0a5e4     62 C7 82 F1 | 	sub	local17, local16
0a5e8     10 C6 86 F1 | 	sub	local17, #16
0a5ec     0F C6 26 F5 | 	andn	local17, #15
0a5f0     32 C7 62 FC | 	wrlong	local17, objptr
0a5f4     53 00 00 FF 
0a5f8     F0 64 86 F1 | 	sub	objptr, ##42736
0a5fc     63 93 02 F6 | 	mov	arg01, local17
0a600     40 6C B1 FD | 	call	#_psdpoke
0a604     63 93 02 F6 | 	mov	arg01, local17
0a608     02 92 06 F1 | 	add	arg01, #2
0a60c     61 95 02 F6 | 	mov	arg02, local15
0a610     30 6C B1 FD | 	call	#_psdpoke
0a614     63 93 02 F6 | 	mov	arg01, local17
0a618     04 92 06 F1 | 	add	arg01, #4
0a61c     53 95 02 F6 | 	mov	arg02, local01
0a620     D8 6B B1 FD | 	call	#_pslpoke
0a624     63 93 02 F6 | 	mov	arg01, local17
0a628     08 92 06 F1 | 	add	arg01, #8
0a62c     54 95 02 F6 | 	mov	arg02, local02
0a630     C8 6B B1 FD | 	call	#_pslpoke
0a634     63 93 02 F6 | 	mov	arg01, local17
0a638     0C 92 06 F1 | 	add	arg01, #12
0a63c     55 95 02 F6 | 	mov	arg02, local03
0a640     B8 6B B1 FD | 	call	#_pslpoke
0a644     58 BD 02 F6 | 	mov	local12, local06
0a648     04 BC 66 F0 | 	shl	local12, #4
0a64c     16 00 00 FF 
0a650     18 64 06 F1 | 	add	objptr, ##11288
0a654     32 BD 02 F1 | 	add	local12, objptr
0a658     5E AF 62 FC | 	wrlong	local05, local12
0a65c     58 BD 02 F6 | 	mov	local12, local06
0a660     04 BC 66 F0 | 	shl	local12, #4
0a664     32 BD 02 F1 | 	add	local12, objptr
0a668     04 BC 06 F1 | 	add	local12, #4
0a66c     5E C7 62 FC | 	wrlong	local17, local12
0a670     58 BD 02 F6 | 	mov	local12, local06
0a674     04 BC 66 F0 | 	shl	local12, #4
0a678     32 BD 02 F1 | 	add	local12, objptr
0a67c     0C BC 06 F1 | 	add	local12, #12
0a680     5E C1 62 FC | 	wrlong	local14, local12
0a684                 | ' memtop=arrayptr
0a684                 | ' psdpoke arrayptr,arraytype 
0a684                 | ' psdpoke arrayptr+2,esize 
0a684                 | ' pslpoke arrayptr+4,dims(0)
0a684                 | ' pslpoke arrayptr+8,dims(1)
0a684                 | ' pslpoke arrayptr+12,dims(2)
0a684                 | ' variables(j).name=varname2$
0a684                 | ' variables(j).value.uresult=arrayptr
0a684                 | ' variables(j).vartype=arraytype
0a684                 | ' if j=varnum then varnum+=1
0a684     20 00 00 FF 
0a688     10 64 06 F1 | 	add	objptr, ##16400
0a68c     32 B3 02 FB | 	rdlong	local07, objptr
0a690     36 00 00 FF 
0a694     28 64 86 F1 | 	sub	objptr, ##27688
0a698     59 B1 0A F2 | 	cmp	local06, local07 wz
0a69c     36 00 00 AF 
0a6a0     28 64 06 A1 |  if_e	add	objptr, ##27688
0a6a4     32 B3 02 AB |  if_e	rdlong	local07, objptr
0a6a8     01 B2 06 A1 |  if_e	add	local07, #1
0a6ac     32 B3 62 AC |  if_e	wrlong	local07, objptr
0a6b0     36 00 00 AF 
0a6b4     28 64 86 A1 |  if_e	sub	objptr, ##27688
0a6b8                 | ' return 0
0a6b8     00 7A 06 F6 | 	mov	result1, #0
0a6bc                 | LR__0925
0a6bc     E7 F0 03 F6 | 	mov	ptra, fp
0a6c0     F2 00 A0 FD | 	call	#popregs_
0a6c4                 | _compile_dim_ret
0a6c4     2D 00 64 FD | 	ret
0a6c8                 | 
0a6c8                 | ' 
0a6c8                 | ' '----- compile 'for' command. 
0a6c8                 | ' 
0a6c8                 | ' function compile_for() as ulong  
0a6c8                 | _compile_for
0a6c8     0F CA 05 F6 | 	mov	COUNT_, #15
0a6cc     E8 00 A0 FD | 	call	#pushregs_
0a6d0                 | ' 
0a6d0                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a6d0     38 00 00 FF 
0a6d4     64 64 06 F1 | 	add	objptr, ##28772
0a6d8     32 95 02 FB | 	rdlong	arg02, objptr
0a6dc     01 94 06 F1 | 	add	arg02, #1
0a6e0     03 94 66 F0 | 	shl	arg02, #3
0a6e4     02 00 00 FF 
0a6e8     38 64 86 F1 | 	sub	objptr, ##1080
0a6ec     32 95 02 F1 | 	add	arg02, objptr
0a6f0     4A 93 02 FB | 	rdlong	arg01, arg02
0a6f4     36 00 00 FF 
0a6f8     2C 64 86 F1 | 	sub	objptr, ##27692
0a6fc                 | ' 
0a6fc                 | ' select case s
0a6fc     93 01 00 FF 
0a700     F2 94 06 F6 | 	mov	arg02, ##@LR__5639
0a704     FC A2 B1 FD | 	call	#__system___string_cmp
0a708     00 7A 0E F2 | 	cmp	result1, #0 wz
0a70c     1B 7A 06 A6 |  if_e	mov	result1, #27
0a710     00 7A 06 56 |  if_ne	mov	result1, #0
0a714     00 7A 0E F2 | 	cmp	result1, #0 wz
0a718     0C 00 90 AD |  if_e	jmp	#LR__0930
0a71c     05 92 06 F6 | 	mov	arg01, #5
0a720     DC DB BF FD | 	call	#_compile_immediate_assign
0a724     08 00 90 FD | 	jmp	#LR__0931
0a728                 | LR__0930
0a728     20 7A 06 F6 | 	mov	result1, #32
0a72c     64 08 90 FD | 	jmp	#LR__0947
0a730                 | LR__0931
0a730     4B 00 00 FF 
0a734     9C 64 06 F1 | 	add	objptr, ##38556
0a738     32 95 02 FB | 	rdlong	arg02, objptr
0a73c     4A 93 02 F6 | 	mov	arg01, arg02
0a740     01 92 86 F1 | 	sub	arg01, #1
0a744     49 AD 02 F6 | 	mov	local04, arg01
0a748     01 AC 66 F0 | 	shl	local04, #1
0a74c     49 AD 02 F1 | 	add	local04, arg01
0a750     02 AC 66 F0 | 	shl	local04, #2
0a754     03 00 00 FF 
0a758     00 64 86 F1 | 	sub	objptr, ##1536
0a75c     32 AD 02 F1 | 	add	local04, objptr
0a760     56 A7 02 FB | 	rdlong	local01, local04
0a764     04 AC 06 F1 | 	add	local04, #4
0a768     56 AF 02 FB | 	rdlong	local05, local04
0a76c     01 94 86 F1 | 	sub	arg02, #1
0a770     4A B1 02 F6 | 	mov	local06, arg02
0a774     01 B0 66 F0 | 	shl	local06, #1
0a778     4A B1 02 F1 | 	add	local06, arg02
0a77c     02 B0 66 F0 | 	shl	local06, #2
0a780     32 B3 02 F6 | 	mov	local07, objptr
0a784     32 B1 02 F1 | 	add	local06, objptr
0a788     08 B0 06 F1 | 	add	local06, #8
0a78c     58 AD 02 FB | 	rdlong	local04, local06
0a790     57 A9 02 F6 | 	mov	local02, local05
0a794     56 AB 02 F6 | 	mov	local03, local04
0a798                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a798     17 AA 0E F2 | 	cmp	local03, #23 wz
0a79c     48 00 00 FF 
0a7a0     9C 64 86 F1 | 	sub	objptr, ##37020
0a7a4     22 7A 06 56 |  if_ne	mov	result1, #34
0a7a8     E8 07 90 5D |  if_ne	jmp	#LR__0947
0a7ac     53 B5 02 F6 | 	mov	local08, local01
0a7b0                 | ' varnum=t1.result.uresult
0a7b0                 | ' if lparts(ct).part$<>"to" then return 33
0a7b0     38 00 00 FF 
0a7b4     64 64 06 F1 | 	add	objptr, ##28772
0a7b8     32 AD 02 FB | 	rdlong	local04, objptr
0a7bc     03 AC 66 F0 | 	shl	local04, #3
0a7c0     02 00 00 FF 
0a7c4     38 64 86 F1 | 	sub	objptr, ##1080
0a7c8     32 AD 02 F1 | 	add	local04, objptr
0a7cc     56 93 02 FB | 	rdlong	arg01, local04
0a7d0     96 01 00 FF 
0a7d4     8C 94 06 F6 | 	mov	arg02, ##@LR__5932
0a7d8     36 00 00 FF 
0a7dc     2C 64 86 F1 | 	sub	objptr, ##27692
0a7e0     20 A2 B1 FD | 	call	#__system___string_cmp
0a7e4     00 7A 0E F2 | 	cmp	result1, #0 wz
0a7e8     21 7A 06 56 |  if_ne	mov	result1, #33
0a7ec     A4 07 90 5D |  if_ne	jmp	#LR__0947
0a7f0     38 00 00 FF 
0a7f4     64 64 06 F1 | 	add	objptr, ##28772
0a7f8     32 B7 02 FB | 	rdlong	local09, objptr
0a7fc     01 B6 06 F1 | 	add	local09, #1
0a800     32 B7 62 FC | 	wrlong	local09, objptr
0a804     38 00 00 FF 
0a808     64 64 86 F1 | 	sub	objptr, ##28772
0a80c     80 16 B0 FD | 	call	#_expr
0a810                 | ' ct+=1
0a810                 | ' expr()  										' there is "to" value pushed on the stack
0a810                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a810     38 00 00 FF 
0a814     64 64 06 F1 | 	add	objptr, ##28772
0a818     32 AD 02 FB | 	rdlong	local04, objptr
0a81c     03 AC 66 F0 | 	shl	local04, #3
0a820     02 00 00 FF 
0a824     38 64 86 F1 | 	sub	objptr, ##1080
0a828     32 AD 02 F1 | 	add	local04, objptr
0a82c     56 93 02 FB | 	rdlong	arg01, local04
0a830     96 01 00 FF 
0a834     8F 94 06 F6 | 	mov	arg02, ##@LR__5933
0a838     36 00 00 FF 
0a83c     2C 64 86 F1 | 	sub	objptr, ##27692
0a840     C0 A1 B1 FD | 	call	#__system___string_cmp
0a844     00 7A 0E F2 | 	cmp	result1, #0 wz
0a848     48 00 90 AD |  if_e	jmp	#LR__0932
0a84c     38 00 00 FF 
0a850     64 64 06 F1 | 	add	objptr, ##28772
0a854     32 AD 02 FB | 	rdlong	local04, objptr
0a858     03 AC 66 F0 | 	shl	local04, #3
0a85c     02 00 00 FF 
0a860     38 64 86 F1 | 	sub	objptr, ##1080
0a864     32 AD 02 F1 | 	add	local04, objptr
0a868     56 93 02 FB | 	rdlong	arg01, local04
0a86c     02 94 06 F6 | 	mov	arg02, #2
0a870     36 00 00 FF 
0a874     2C 64 86 F1 | 	sub	objptr, ##27692
0a878     08 BA B1 FD | 	call	#__system__Left_S
0a87c     3D 93 02 F6 | 	mov	arg01, result1
0a880     96 01 00 FF 
0a884     94 94 06 F6 | 	mov	arg02, ##@LR__5934
0a888     78 A1 B1 FD | 	call	#__system___string_cmp
0a88c     00 7A 0E F2 | 	cmp	result1, #0 wz
0a890     A8 05 90 5D |  if_ne	jmp	#LR__0945
0a894                 | LR__0932
0a894                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a894     38 00 00 FF 
0a898     64 64 06 F1 | 	add	objptr, ##28772
0a89c     32 AD 02 FB | 	rdlong	local04, objptr
0a8a0     03 AC 66 F0 | 	shl	local04, #3
0a8a4     02 00 00 FF 
0a8a8     38 64 86 F1 | 	sub	objptr, ##1080
0a8ac     32 AD 02 F1 | 	add	local04, objptr
0a8b0     56 93 02 FB | 	rdlong	arg01, local04
0a8b4     02 94 06 F6 | 	mov	arg02, #2
0a8b8     36 00 00 FF 
0a8bc     2C 64 86 F1 | 	sub	objptr, ##27692
0a8c0     C0 B9 B1 FD | 	call	#__system__Left_S
0a8c4     3D 93 02 F6 | 	mov	arg01, result1
0a8c8     96 01 00 FF 
0a8cc     97 94 06 F6 | 	mov	arg02, ##@LR__5935
0a8d0     30 A1 B1 FD | 	call	#__system___string_cmp
0a8d4     00 7A 0E F2 | 	cmp	result1, #0 wz
0a8d8     3C 05 90 5D |  if_ne	jmp	#LR__0944
0a8dc     38 00 00 FF 
0a8e0     64 64 06 F1 | 	add	objptr, ##28772
0a8e4     32 AD 02 FB | 	rdlong	local04, objptr
0a8e8     03 AC 66 F0 | 	shl	local04, #3
0a8ec     02 00 00 FF 
0a8f0     38 64 86 F1 | 	sub	objptr, ##1080
0a8f4     32 AD 02 F1 | 	add	local04, objptr
0a8f8     56 93 02 FB | 	rdlong	arg01, local04
0a8fc     36 00 00 FF 
0a900     2C 64 86 F1 | 	sub	objptr, ##27692
0a904     49 B9 02 F6 | 	mov	local10, arg01
0a908     D7 06 48 FB | 	callpa	#(@LR__0934-@LR__0933)>>2,fcache_load_ptr_
0a90c                 | LR__0933
0a90c     5C 7B CA FA | 	rdbyte	result1, local10 wz
0a910     01 B8 06 51 |  if_ne	add	local10, #1
0a914     F4 FF 9F 5D |  if_ne	jmp	#LR__0933
0a918                 | LR__0934
0a918     49 B9 82 F1 | 	sub	local10, arg01
0a91c     03 B8 56 F2 | 	cmps	local10, #3 wc
0a920     F4 04 90 CD |  if_b	jmp	#LR__0944
0a924     38 00 00 FF 
0a928     64 64 06 F1 | 	add	objptr, ##28772
0a92c     32 AD 02 FB | 	rdlong	local04, objptr
0a930     56 BB 02 F6 | 	mov	local11, local04
0a934     03 BA 66 F0 | 	shl	local11, #3
0a938     02 00 00 FF 
0a93c     38 64 86 F1 | 	sub	objptr, ##1080
0a940     32 BB 02 F1 | 	add	local11, objptr
0a944     03 AC 66 F0 | 	shl	local04, #3
0a948     32 AD 02 F1 | 	add	local04, objptr
0a94c     56 AD 02 FB | 	rdlong	local04, local04
0a950     02 00 00 FF 
0a954     38 64 06 F1 | 	add	objptr, ##1080
0a958     32 93 02 FB | 	rdlong	arg01, objptr
0a95c     03 92 66 F0 | 	shl	arg01, #3
0a960     02 00 00 FF 
0a964     38 64 86 F1 | 	sub	objptr, ##1080
0a968     32 93 02 F1 | 	add	arg01, objptr
0a96c     49 93 02 FB | 	rdlong	arg01, arg01
0a970     36 00 00 FF 
0a974     2C 64 86 F1 | 	sub	objptr, ##27692
0a978     49 B9 02 F6 | 	mov	local10, arg01
0a97c     D7 06 48 FB | 	callpa	#(@LR__0936-@LR__0935)>>2,fcache_load_ptr_
0a980                 | LR__0935
0a980     5C 7B CA FA | 	rdbyte	result1, local10 wz
0a984     01 B8 06 51 |  if_ne	add	local10, #1
0a988     F4 FF 9F 5D |  if_ne	jmp	#LR__0935
0a98c                 | LR__0936
0a98c     49 B9 82 F1 | 	sub	local10, arg01
0a990     5C 95 02 F6 | 	mov	arg02, local10
0a994     02 94 86 F1 | 	sub	arg02, #2
0a998     56 93 02 F6 | 	mov	arg01, local04
0a99c     6C B9 B1 FD | 	call	#__system__Right_S
0a9a0     5D 7B 62 FC | 	wrlong	result1, local11
0a9a4     38 00 00 FF 
0a9a8     64 64 06 F1 | 	add	objptr, ##28772
0a9ac     32 AD 02 FB | 	rdlong	local04, objptr
0a9b0     56 BB 02 F6 | 	mov	local11, local04
0a9b4     03 BA 66 F0 | 	shl	local11, #3
0a9b8     02 00 00 FF 
0a9bc     38 64 86 F1 | 	sub	objptr, ##1080
0a9c0     32 BB 02 F1 | 	add	local11, objptr
0a9c4     03 AC 66 F0 | 	shl	local04, #3
0a9c8     32 AD 02 F1 | 	add	local04, objptr
0a9cc     56 93 02 FB | 	rdlong	arg01, local04
0a9d0     36 00 00 FF 
0a9d4     2C 64 86 F1 | 	sub	objptr, ##27692
0a9d8     1C B6 BF FD | 	call	#_isfunction
0a9dc     3D 7B E2 F8 | 	getbyte	result1, result1, #0
0a9e0     04 BA 06 F1 | 	add	local11, #4
0a9e4     5D 7B 62 FC | 	wrlong	result1, local11
0a9e8                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0a9e8     38 00 00 FF 
0a9ec     64 64 06 F1 | 	add	objptr, ##28772
0a9f0     32 BB 02 FB | 	rdlong	local11, objptr
0a9f4     03 BA 66 F0 | 	shl	local11, #3
0a9f8     02 00 00 FF 
0a9fc     38 64 86 F1 | 	sub	objptr, ##1080
0aa00     32 BB 02 F1 | 	add	local11, objptr
0aa04     04 BA 06 F1 | 	add	local11, #4
0aa08     5D AD 02 FB | 	rdlong	local04, local11
0aa0c     01 AC 56 F2 | 	cmps	local04, #1 wc
0aa10     36 00 00 FF 
0aa14     2C 64 86 F1 | 	sub	objptr, ##27692
0aa18     E0 03 90 3D |  if_ae	jmp	#LR__0943
0aa1c     38 00 00 FF 
0aa20     64 64 06 F1 | 	add	objptr, ##28772
0aa24     32 AD 02 FB | 	rdlong	local04, objptr
0aa28     56 BB 02 F6 | 	mov	local11, local04
0aa2c     03 BA 66 F0 | 	shl	local11, #3
0aa30     02 00 00 FF 
0aa34     38 64 86 F1 | 	sub	objptr, ##1080
0aa38     32 BB 02 F1 | 	add	local11, objptr
0aa3c     03 AC 66 F0 | 	shl	local04, #3
0aa40     32 AD 02 F1 | 	add	local04, objptr
0aa44     56 93 02 FB | 	rdlong	arg01, local04
0aa48     36 00 00 FF 
0aa4c     2C 64 86 F1 | 	sub	objptr, ##27692
0aa50     78 9E BF FD | 	call	#_isnotename
0aa54     04 BA 06 F1 | 	add	local11, #4
0aa58     5D 7B 62 FC | 	wrlong	result1, local11
0aa5c                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0aa5c                 | '     if lparts(ct).token>0 then 
0aa5c     38 00 00 FF 
0aa60     64 64 06 F1 | 	add	objptr, ##28772
0aa64     32 BB 02 FB | 	rdlong	local11, objptr
0aa68     03 BA 66 F0 | 	shl	local11, #3
0aa6c     02 00 00 FF 
0aa70     38 64 86 F1 | 	sub	objptr, ##1080
0aa74     32 BB 02 F1 | 	add	local11, objptr
0aa78     04 BA 06 F1 | 	add	local11, #4
0aa7c     5D AD 02 FB | 	rdlong	local04, local11
0aa80     01 AC 56 F2 | 	cmps	local04, #1 wc
0aa84     36 00 00 FF 
0aa88     2C 64 86 F1 | 	sub	objptr, ##27692
0aa8c     94 00 90 CD |  if_b	jmp	#LR__0937
0aa90     38 00 00 FF 
0aa94     64 64 06 F1 | 	add	objptr, ##28772
0aa98     32 BB 02 FB | 	rdlong	local11, objptr
0aa9c     03 BA 66 F0 | 	shl	local11, #3
0aaa0     02 00 00 FF 
0aaa4     38 64 86 F1 | 	sub	objptr, ##1080
0aaa8     32 BB 02 F1 | 	add	local11, objptr
0aaac     04 BA 06 F1 | 	add	local11, #4
0aab0     5D 93 02 FB | 	rdlong	arg01, local11
0aab4     36 00 00 FF 
0aab8     2C 64 86 F1 | 	sub	objptr, ##27692
0aabc     80 C7 BF FD | 	call	#_getnoteval
0aac0     3D 93 02 F6 | 	mov	arg01, result1
0aac4     38 00 00 FF 
0aac8     64 64 06 F1 | 	add	objptr, ##28772
0aacc     32 BB 02 FB | 	rdlong	local11, objptr
0aad0     03 BA 66 F0 | 	shl	local11, #3
0aad4     02 00 00 FF 
0aad8     38 64 86 F1 | 	sub	objptr, ##1080
0aadc     32 BB 02 F1 | 	add	local11, objptr
0aae0     36 00 00 FF 
0aae4     2C 64 86 F1 | 	sub	objptr, ##27692
0aae8     90 B9 B1 FD | 	call	#__system__str_S
0aaec     5D 7B 62 FC | 	wrlong	result1, local11
0aaf0     38 00 00 FF 
0aaf4     64 64 06 F1 | 	add	objptr, ##28772
0aaf8     32 BB 02 FB | 	rdlong	local11, objptr
0aafc     03 BA 66 F0 | 	shl	local11, #3
0ab00     02 00 00 FF 
0ab04     38 64 86 F1 | 	sub	objptr, ##1080
0ab08     32 BB 02 F1 | 	add	local11, objptr
0ab0c     04 BA 06 F1 | 	add	local11, #4
0ab10     01 00 80 FF 
0ab14     5D 05 68 FC | 	wrlong	##514, local11
0ab18     36 00 00 FF 
0ab1c     2C 64 86 F1 | 	sub	objptr, ##27692
0ab20     D8 02 90 FD | 	jmp	#LR__0943
0ab24                 | LR__0937
0ab24     38 00 00 FF 
0ab28     64 64 06 F1 | 	add	objptr, ##28772
0ab2c     32 AD 02 FB | 	rdlong	local04, objptr
0ab30     56 BB 02 F6 | 	mov	local11, local04
0ab34     03 BA 66 F0 | 	shl	local11, #3
0ab38     02 00 00 FF 
0ab3c     38 64 86 F1 | 	sub	objptr, ##1080
0ab40     32 BB 02 F1 | 	add	local11, objptr
0ab44     03 AC 66 F0 | 	shl	local04, #3
0ab48     32 AD 02 F1 | 	add	local04, objptr
0ab4c     56 93 02 FB | 	rdlong	arg01, local04
0ab50     36 00 00 FF 
0ab54     2C 64 86 F1 | 	sub	objptr, ##27692
0ab58     F0 9C BF FD | 	call	#_isconstant
0ab5c     04 BA 06 F1 | 	add	local11, #4
0ab60     5D 7B 62 FC | 	wrlong	result1, local11
0ab64                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0ab64     38 00 00 FF 
0ab68     64 64 06 F1 | 	add	objptr, ##28772
0ab6c     32 BB 02 FB | 	rdlong	local11, objptr
0ab70     03 BA 66 F0 | 	shl	local11, #3
0ab74     02 00 00 FF 
0ab78     38 64 86 F1 | 	sub	objptr, ##1080
0ab7c     32 BB 02 F1 | 	add	local11, objptr
0ab80     04 BA 06 F1 | 	add	local11, #4
0ab84     5D AD 02 FB | 	rdlong	local04, local11
0ab88     01 AC 56 F2 | 	cmps	local04, #1 wc
0ab8c     36 00 00 FF 
0ab90     2C 64 86 F1 | 	sub	objptr, ##27692
0ab94     8C 00 90 CD |  if_b	jmp	#LR__0938
0ab98     38 00 00 FF 
0ab9c     64 64 06 F1 | 	add	objptr, ##28772
0aba0     32 B7 02 FB | 	rdlong	local09, objptr
0aba4     5B BB 02 F6 | 	mov	local11, local09
0aba8     03 BA 66 F0 | 	shl	local11, #3
0abac     02 00 00 FF 
0abb0     38 64 86 F1 | 	sub	objptr, ##1080
0abb4     32 BB 02 F1 | 	add	local11, objptr
0abb8     03 B6 66 F0 | 	shl	local09, #3
0abbc     32 B7 02 F1 | 	add	local09, objptr
0abc0     04 B6 06 F1 | 	add	local09, #4
0abc4     5B 93 02 FB | 	rdlong	arg01, local09
0abc8     36 00 00 FF 
0abcc     2C 64 86 F1 | 	sub	objptr, ##27692
0abd0     49 93 52 F6 | 	abs	arg01, arg01 wc
0abd4     1F BC C6 C9 |  if_b	decod	local12, #31
0abd8     00 BC 06 36 |  if_ae	mov	local12, #0
0abdc     C8 C0 B1 FD | 	call	#__system___float_fromuns
0abe0     5E 7B 62 F5 | 	xor	result1, local12
0abe4     3D 93 02 F6 | 	mov	arg01, result1
0abe8     90 B8 B1 FD | 	call	#__system__str_S
0abec     5D 7B 62 FC | 	wrlong	result1, local11
0abf0     38 00 00 FF 
0abf4     64 64 06 F1 | 	add	objptr, ##28772
0abf8     32 BB 02 FB | 	rdlong	local11, objptr
0abfc     03 BA 66 F0 | 	shl	local11, #3
0ac00     02 00 00 FF 
0ac04     38 64 86 F1 | 	sub	objptr, ##1080
0ac08     32 BB 02 F1 | 	add	local11, objptr
0ac0c     04 BA 06 F1 | 	add	local11, #4
0ac10     01 00 80 FF 
0ac14     5D 03 68 FC | 	wrlong	##513, local11
0ac18     36 00 00 FF 
0ac1c     2C 64 86 F1 | 	sub	objptr, ##27692
0ac20     D8 01 90 FD | 	jmp	#LR__0943
0ac24                 | LR__0938
0ac24     38 00 00 FF 
0ac28     64 64 06 F1 | 	add	objptr, ##28772
0ac2c     32 AD 02 FB | 	rdlong	local04, objptr
0ac30     03 AC 66 F0 | 	shl	local04, #3
0ac34     02 00 00 FF 
0ac38     38 64 86 F1 | 	sub	objptr, ##1080
0ac3c     32 AD 02 F1 | 	add	local04, objptr
0ac40     56 93 02 FB | 	rdlong	arg01, local04
0ac44     36 00 00 FF 
0ac48     2C 64 86 F1 | 	sub	objptr, ##27692
0ac4c     3C BE BF FD | 	call	#_isnum
0ac50     3D BF 02 F6 | 	mov	local13, result1
0ac54     07 BE 66 F7 | 	signx	local13, #7
0ac58     38 00 00 FF 
0ac5c     64 64 06 F1 | 	add	objptr, ##28772
0ac60     32 AD 02 FB | 	rdlong	local04, objptr
0ac64     03 AC 66 F0 | 	shl	local04, #3
0ac68     02 00 00 FF 
0ac6c     38 64 86 F1 | 	sub	objptr, ##1080
0ac70     32 AD 02 F1 | 	add	local04, objptr
0ac74     56 93 02 FB | 	rdlong	arg01, local04
0ac78     36 00 00 FF 
0ac7c     2C 64 86 F1 | 	sub	objptr, ##27692
0ac80     F4 C1 BF FD | 	call	#_isint
0ac84     3D C1 02 F6 | 	mov	local14, result1
0ac88     07 C0 66 F7 | 	signx	local14, #7
0ac8c     38 00 00 FF 
0ac90     64 64 06 F1 | 	add	objptr, ##28772
0ac94     32 AD 02 FB | 	rdlong	local04, objptr
0ac98     03 AC 66 F0 | 	shl	local04, #3
0ac9c     02 00 00 FF 
0aca0     38 64 86 F1 | 	sub	objptr, ##1080
0aca4     32 AD 02 F1 | 	add	local04, objptr
0aca8     56 93 02 FB | 	rdlong	arg01, local04
0acac     36 00 00 FF 
0acb0     2C 64 86 F1 | 	sub	objptr, ##27692
0acb4     64 C4 BF FD | 	call	#_isdec
0acb8     07 7A 66 F7 | 	signx	result1, #7
0acbc     3D C3 02 F6 | 	mov	local15, result1
0acc0                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0acc0                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0acc0     00 BE 0E F2 | 	cmp	local13, #0 wz
0acc4     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0acc8     00 C2 0E 52 |  if_ne	cmp	local15, #0 wz
0accc     34 00 90 AD |  if_e	jmp	#LR__0939
0acd0     38 00 00 FF 
0acd4     64 64 06 F1 | 	add	objptr, ##28772
0acd8     32 BB 02 FB | 	rdlong	local11, objptr
0acdc     03 BA 66 F0 | 	shl	local11, #3
0ace0     02 00 00 FF 
0ace4     38 64 86 F1 | 	sub	objptr, ##1080
0ace8     32 BB 02 F1 | 	add	local11, objptr
0acec     04 BA 06 F1 | 	add	local11, #4
0acf0     01 00 80 FF 
0acf4     5D 01 68 FC | 	wrlong	##512, local11
0acf8     36 00 00 FF 
0acfc     2C 64 86 F1 | 	sub	objptr, ##27692
0ad00     F8 00 90 FD | 	jmp	#LR__0943
0ad04                 | LR__0939
0ad04                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0ad04     00 BE 0E F2 | 	cmp	local13, #0 wz
0ad08     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0ad0c     61 B7 22 56 |  if_ne	not	local09, local15
0ad10     00 B6 0E 52 |  if_ne	cmp	local09, #0 wz
0ad14     34 00 90 AD |  if_e	jmp	#LR__0940
0ad18     38 00 00 FF 
0ad1c     64 64 06 F1 | 	add	objptr, ##28772
0ad20     32 BB 02 FB | 	rdlong	local11, objptr
0ad24     03 BA 66 F0 | 	shl	local11, #3
0ad28     02 00 00 FF 
0ad2c     38 64 86 F1 | 	sub	objptr, ##1080
0ad30     32 BB 02 F1 | 	add	local11, objptr
0ad34     04 BA 06 F1 | 	add	local11, #4
0ad38     01 00 80 FF 
0ad3c     5D 03 68 FC | 	wrlong	##513, local11
0ad40     36 00 00 FF 
0ad44     2C 64 86 F1 | 	sub	objptr, ##27692
0ad48     B0 00 90 FD | 	jmp	#LR__0943
0ad4c                 | LR__0940
0ad4c                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0ad4c     00 BE 0E F2 | 	cmp	local13, #0 wz
0ad50     60 C1 22 56 |  if_ne	not	local14, local14
0ad54     00 C0 0E 52 |  if_ne	cmp	local14, #0 wz
0ad58     61 C3 22 56 |  if_ne	not	local15, local15
0ad5c     00 C2 0E 52 |  if_ne	cmp	local15, #0 wz
0ad60     34 00 90 AD |  if_e	jmp	#LR__0941
0ad64     38 00 00 FF 
0ad68     64 64 06 F1 | 	add	objptr, ##28772
0ad6c     32 BB 02 FB | 	rdlong	local11, objptr
0ad70     03 BA 66 F0 | 	shl	local11, #3
0ad74     02 00 00 FF 
0ad78     38 64 86 F1 | 	sub	objptr, ##1080
0ad7c     32 BB 02 F1 | 	add	local11, objptr
0ad80     04 BA 06 F1 | 	add	local11, #4
0ad84     01 00 80 FF 
0ad88     5D 05 68 FC | 	wrlong	##514, local11
0ad8c     36 00 00 FF 
0ad90     2C 64 86 F1 | 	sub	objptr, ##27692
0ad94     64 00 90 FD | 	jmp	#LR__0943
0ad98                 | LR__0941
0ad98                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0ad98     38 00 00 FF 
0ad9c     64 64 06 F1 | 	add	objptr, ##28772
0ada0     32 BB 02 FB | 	rdlong	local11, objptr
0ada4     03 BA 66 F0 | 	shl	local11, #3
0ada8     02 00 00 FF 
0adac     38 64 86 F1 | 	sub	objptr, ##1080
0adb0     32 BB 02 F1 | 	add	local11, objptr
0adb4     5D 93 02 FB | 	rdlong	arg01, local11
0adb8     36 00 00 FF 
0adbc     2C 64 86 F1 | 	sub	objptr, ##27692
0adc0     54 BA BF FD | 	call	#_isname
0adc4     00 7A 0E F2 | 	cmp	result1, #0 wz
0adc8     30 00 90 AD |  if_e	jmp	#LR__0942
0adcc     38 00 00 FF 
0add0     64 64 06 F1 | 	add	objptr, ##28772
0add4     32 BB 02 FB | 	rdlong	local11, objptr
0add8     03 BA 66 F0 | 	shl	local11, #3
0addc     02 00 00 FF 
0ade0     38 64 86 F1 | 	sub	objptr, ##1080
0ade4     32 BB 02 F1 | 	add	local11, objptr
0ade8     04 BA 06 F1 | 	add	local11, #4
0adec     01 00 80 FF 
0adf0     5D 09 68 FC | 	wrlong	##516, local11
0adf4     36 00 00 FF 
0adf8     2C 64 86 F1 | 	sub	objptr, ##27692
0adfc                 | LR__0942
0adfc                 | LR__0943
0adfc     38 00 00 FF 
0ae00     64 64 06 F1 | 	add	objptr, ##28772
0ae04     32 B7 02 FB | 	rdlong	local09, objptr
0ae08     01 B6 86 F1 | 	sub	local09, #1
0ae0c     32 B7 62 FC | 	wrlong	local09, objptr
0ae10     38 00 00 FF 
0ae14     64 64 86 F1 | 	sub	objptr, ##28772
0ae18                 | LR__0944
0ae18     38 00 00 FF 
0ae1c     64 64 06 F1 | 	add	objptr, ##28772
0ae20     32 B7 02 FB | 	rdlong	local09, objptr
0ae24     01 B6 06 F1 | 	add	local09, #1
0ae28     32 B7 62 FC | 	wrlong	local09, objptr
0ae2c     38 00 00 FF 
0ae30     64 64 86 F1 | 	sub	objptr, ##28772
0ae34     58 10 B0 FD | 	call	#_expr
0ae38     78 00 90 FD | 	jmp	#LR__0946
0ae3c                 | LR__0945
0ae3c     4B 00 00 FF 
0ae40     9C 64 06 F1 | 	add	objptr, ##38556
0ae44     32 C3 02 FB | 	rdlong	local15, objptr
0ae48     61 BB 02 F6 | 	mov	local11, local15
0ae4c     01 BA 66 F0 | 	shl	local11, #1
0ae50     61 BB 02 F1 | 	add	local11, local15
0ae54     02 BA 66 F0 | 	shl	local11, #2
0ae58     03 00 00 FF 
0ae5c     00 64 86 F1 | 	sub	objptr, ##1536
0ae60     32 BB 02 F1 | 	add	local11, objptr
0ae64     08 BA 06 F1 | 	add	local11, #8
0ae68     5D 39 68 FC | 	wrlong	#28, local11
0ae6c     03 00 00 FF 
0ae70     00 64 06 F1 | 	add	objptr, ##1536
0ae74     32 C3 02 FB | 	rdlong	local15, objptr
0ae78     61 BB 02 F6 | 	mov	local11, local15
0ae7c     01 BA 66 F0 | 	shl	local11, #1
0ae80     61 BB 02 F1 | 	add	local11, local15
0ae84     02 BA 66 F0 | 	shl	local11, #2
0ae88     03 00 00 FF 
0ae8c     00 64 86 F1 | 	sub	objptr, ##1536
0ae90     32 BB 02 F1 | 	add	local11, objptr
0ae94     5D 03 68 FC | 	wrlong	#1, local11
0ae98     03 00 00 FF 
0ae9c     00 64 06 F1 | 	add	objptr, ##1536
0aea0     32 B7 02 FB | 	rdlong	local09, objptr
0aea4     01 B6 06 F1 | 	add	local09, #1
0aea8     32 B7 62 FC | 	wrlong	local09, objptr
0aeac     4B 00 00 FF 
0aeb0     9C 64 86 F1 | 	sub	objptr, ##38556
0aeb4                 | LR__0946
0aeb4     4B 00 00 FF 
0aeb8     9C 64 06 F1 | 	add	objptr, ##38556
0aebc     32 C3 02 FB | 	rdlong	local15, objptr
0aec0     61 BB 02 F6 | 	mov	local11, local15
0aec4     01 BA 66 F0 | 	shl	local11, #1
0aec8     61 BB 02 F1 | 	add	local11, local15
0aecc     02 BA 66 F0 | 	shl	local11, #2
0aed0     03 00 00 FF 
0aed4     00 64 86 F1 | 	sub	objptr, ##1536
0aed8     32 BB 02 F1 | 	add	local11, objptr
0aedc     08 BA 06 F1 | 	add	local11, #8
0aee0     5D 39 68 FC | 	wrlong	#28, local11
0aee4     03 00 00 FF 
0aee8     00 64 06 F1 | 	add	objptr, ##1536
0aeec     32 C3 02 FB | 	rdlong	local15, objptr
0aef0     61 BB 02 F6 | 	mov	local11, local15
0aef4     01 BA 66 F0 | 	shl	local11, #1
0aef8     61 BB 02 F1 | 	add	local11, local15
0aefc     02 BA 66 F0 | 	shl	local11, #2
0af00     03 00 00 FF 
0af04     00 64 86 F1 | 	sub	objptr, ##1536
0af08     32 BB 02 F1 | 	add	local11, objptr
0af0c     5D B5 62 FC | 	wrlong	local08, local11
0af10     03 00 00 FF 
0af14     00 64 06 F1 | 	add	objptr, ##1536
0af18     32 C3 02 FB | 	rdlong	local15, objptr
0af1c     01 C2 06 F1 | 	add	local15, #1
0af20     32 C3 62 FC | 	wrlong	local15, objptr
0af24     61 BB 02 F6 | 	mov	local11, local15
0af28     01 BA 66 F0 | 	shl	local11, #1
0af2c     61 BB 02 F1 | 	add	local11, local15
0af30     02 BA 66 F0 | 	shl	local11, #2
0af34     03 00 00 FF 
0af38     00 64 86 F1 | 	sub	objptr, ##1536
0af3c     32 BB 02 F1 | 	add	local11, objptr
0af40     08 BA 06 F1 | 	add	local11, #8
0af44     5D 95 68 FC | 	wrlong	#74, local11
0af48     03 00 00 FF 
0af4c     00 64 06 F1 | 	add	objptr, ##1536
0af50     32 C3 02 FB | 	rdlong	local15, objptr
0af54     61 BB 02 F6 | 	mov	local11, local15
0af58     01 BA 66 F0 | 	shl	local11, #1
0af5c     61 BB 02 F1 | 	add	local11, local15
0af60     02 BA 66 F0 | 	shl	local11, #2
0af64     03 00 00 FF 
0af68     00 64 86 F1 | 	sub	objptr, ##1536
0af6c     32 BB 02 F1 | 	add	local11, objptr
0af70     5D 01 68 FC | 	wrlong	#0, local11
0af74     03 00 00 FF 
0af78     00 64 06 F1 | 	add	objptr, ##1536
0af7c     32 B7 02 FB | 	rdlong	local09, objptr
0af80     01 B6 06 F1 | 	add	local09, #1
0af84     32 B7 62 FC | 	wrlong	local09, objptr
0af88     4B 00 00 FF 
0af8c     9C 64 86 F1 | 	sub	objptr, ##38556
0af90                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0af90                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0af90                 | ' return 0
0af90     00 7A 06 F6 | 	mov	result1, #0
0af94                 | LR__0947
0af94     E7 F0 03 F6 | 	mov	ptra, fp
0af98     F2 00 A0 FD | 	call	#popregs_
0af9c                 | _compile_for_ret
0af9c     2D 00 64 FD | 	ret
0afa0                 | 
0afa0                 | ' 
0afa0                 | ' '----- compile 'next' command. 
0afa0                 | ' 
0afa0                 | ' function compile_next() as ulong
0afa0                 | _compile_next
0afa0     04 CA 05 F6 | 	mov	COUNT_, #4
0afa4     E8 00 A0 FD | 	call	#pushregs_
0afa8     38 00 00 FF 
0afac     64 64 06 F1 | 	add	objptr, ##28772
0afb0     32 93 02 FB | 	rdlong	arg01, objptr
0afb4     03 92 66 F0 | 	shl	arg01, #3
0afb8     02 00 00 FF 
0afbc     38 64 86 F1 | 	sub	objptr, ##1080
0afc0     32 93 02 F1 | 	add	arg01, objptr
0afc4     49 A7 02 FB | 	rdlong	local01, arg01
0afc8                 | ' 
0afc8                 | ' varname$=lparts(ct).part$ 
0afc8                 | ' if varnum=0 then return 35
0afc8     04 64 86 F1 | 	sub	objptr, #4
0afcc     32 93 0A FB | 	rdlong	arg01, objptr wz
0afd0     36 00 00 FF 
0afd4     28 64 86 F1 | 	sub	objptr, ##27688
0afd8     23 7A 06 A6 |  if_e	mov	result1, #35
0afdc     48 01 90 AD |  if_e	jmp	#LR__0952
0afe0     01 A8 66 F6 | 	neg	local02, #1
0afe4                 | ' j=-1
0afe4                 | ' for i=0 to varnum-1
0afe4     00 AA 06 F6 | 	mov	local03, #0
0afe8     36 00 00 FF 
0afec     28 64 06 F1 | 	add	objptr, ##27688
0aff0     32 AD 02 FB | 	rdlong	local04, objptr
0aff4     36 00 00 FF 
0aff8     28 64 86 F1 | 	sub	objptr, ##27688
0affc                 | LR__0950
0affc     56 AB 12 F2 | 	cmp	local03, local04 wc
0b000     34 00 90 3D |  if_ae	jmp	#LR__0951
0b004                 | '   if variables(i).name=varname$ then j=i : exit
0b004     55 93 02 F6 | 	mov	arg01, local03
0b008     04 92 66 F0 | 	shl	arg01, #4
0b00c     32 95 02 F6 | 	mov	arg02, objptr
0b010     16 00 00 FF 
0b014     18 94 06 F1 | 	add	arg02, ##11288
0b018     4A 93 02 F1 | 	add	arg01, arg02
0b01c     49 93 02 FB | 	rdlong	arg01, arg01
0b020     53 95 02 F6 | 	mov	arg02, local01
0b024     DC 99 B1 FD | 	call	#__system___string_cmp
0b028     00 7A 0E F2 | 	cmp	result1, #0 wz
0b02c     55 A9 02 A6 |  if_e	mov	local02, local03
0b030     01 AA 06 51 |  if_ne	add	local03, #1
0b034     C4 FF 9F 5D |  if_ne	jmp	#LR__0950
0b038                 | LR__0951
0b038                 | ' if j=-1 then return 35
0b038     FF FF 7F FF 
0b03c     FF A9 0E F2 | 	cmp	local02, ##-1 wz
0b040     23 7A 06 A6 |  if_e	mov	result1, #35
0b044     E0 00 90 AD |  if_e	jmp	#LR__0952
0b048     4B 00 00 FF 
0b04c     9C 64 06 F1 | 	add	objptr, ##38556
0b050     32 AD 02 FB | 	rdlong	local04, objptr
0b054     56 AB 02 F6 | 	mov	local03, local04
0b058     01 AA 66 F0 | 	shl	local03, #1
0b05c     56 AB 02 F1 | 	add	local03, local04
0b060     02 AA 66 F0 | 	shl	local03, #2
0b064     03 00 00 FF 
0b068     00 64 86 F1 | 	sub	objptr, ##1536
0b06c     32 AB 02 F1 | 	add	local03, objptr
0b070     08 AA 06 F1 | 	add	local03, #8
0b074     55 39 68 FC | 	wrlong	#28, local03
0b078     03 00 00 FF 
0b07c     00 64 06 F1 | 	add	objptr, ##1536
0b080     32 AD 02 FB | 	rdlong	local04, objptr
0b084     56 AB 02 F6 | 	mov	local03, local04
0b088     01 AA 66 F0 | 	shl	local03, #1
0b08c     56 AB 02 F1 | 	add	local03, local04
0b090     02 AA 66 F0 | 	shl	local03, #2
0b094     03 00 00 FF 
0b098     00 64 86 F1 | 	sub	objptr, ##1536
0b09c     32 AB 02 F1 | 	add	local03, objptr
0b0a0     55 A9 62 FC | 	wrlong	local02, local03
0b0a4     03 00 00 FF 
0b0a8     00 64 06 F1 | 	add	objptr, ##1536
0b0ac     32 AD 02 FB | 	rdlong	local04, objptr
0b0b0     01 AC 06 F1 | 	add	local04, #1
0b0b4     32 AD 62 FC | 	wrlong	local04, objptr
0b0b8     56 AB 02 F6 | 	mov	local03, local04
0b0bc     01 AA 66 F0 | 	shl	local03, #1
0b0c0     56 AB 02 F1 | 	add	local03, local04
0b0c4     02 AA 66 F0 | 	shl	local03, #2
0b0c8     03 00 00 FF 
0b0cc     00 64 86 F1 | 	sub	objptr, ##1536
0b0d0     32 AB 02 F1 | 	add	local03, objptr
0b0d4     08 AA 06 F1 | 	add	local03, #8
0b0d8     55 97 68 FC | 	wrlong	#75, local03
0b0dc     03 00 00 FF 
0b0e0     00 64 06 F1 | 	add	objptr, ##1536
0b0e4     32 AD 02 FB | 	rdlong	local04, objptr
0b0e8     56 AB 02 F6 | 	mov	local03, local04
0b0ec     01 AA 66 F0 | 	shl	local03, #1
0b0f0     56 AB 02 F1 | 	add	local03, local04
0b0f4     02 AA 66 F0 | 	shl	local03, #2
0b0f8     03 00 00 FF 
0b0fc     00 64 86 F1 | 	sub	objptr, ##1536
0b100     32 AB 02 F1 | 	add	local03, objptr
0b104     55 01 68 FC | 	wrlong	#0, local03
0b108     03 00 00 FF 
0b10c     00 64 06 F1 | 	add	objptr, ##1536
0b110     32 AD 02 FB | 	rdlong	local04, objptr
0b114     01 AC 06 F1 | 	add	local04, #1
0b118     32 AD 62 FC | 	wrlong	local04, objptr
0b11c     4B 00 00 FF 
0b120     9C 64 86 F1 | 	sub	objptr, ##38556
0b124                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0b124                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0b124                 | ' return 0
0b124     00 7A 06 F6 | 	mov	result1, #0
0b128                 | LR__0952
0b128     E7 F0 03 F6 | 	mov	ptra, fp
0b12c     F2 00 A0 FD | 	call	#popregs_
0b130                 | _compile_next_ret
0b130     2D 00 64 FD | 	ret
0b134                 | 
0b134                 | ' 
0b134                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0b134                 | ' 
0b134                 | ' function compile_gosub() as ulong
0b134                 | _compile_gosub
0b134     02 CA 05 F6 | 	mov	COUNT_, #2
0b138     E8 00 A0 FD | 	call	#pushregs_
0b13c     4B 00 00 FF 
0b140     9C 64 06 F1 | 	add	objptr, ##38556
0b144     32 A7 02 FB | 	rdlong	local01, objptr
0b148     53 A9 02 F6 | 	mov	local02, local01
0b14c     01 A8 66 F0 | 	shl	local02, #1
0b150     53 A9 02 F1 | 	add	local02, local01
0b154     02 A8 66 F0 | 	shl	local02, #2
0b158     03 00 00 FF 
0b15c     00 64 86 F1 | 	sub	objptr, ##1536
0b160     32 A9 02 F1 | 	add	local02, objptr
0b164     08 A8 06 F1 | 	add	local02, #8
0b168     54 53 69 FC | 	wrlong	#169, local02
0b16c     03 00 00 FF 
0b170     00 64 06 F1 | 	add	objptr, ##1536
0b174     32 A9 02 FB | 	rdlong	local02, objptr
0b178     01 A8 06 F1 | 	add	local02, #1
0b17c     32 A9 62 FC | 	wrlong	local02, objptr
0b180     4B 00 00 FF 
0b184     9C 64 86 F1 | 	sub	objptr, ##38556
0b188     0C 00 B0 FD | 	call	#_compile_goto
0b18c                 | ' compiledline(lineptr).result_type=token_gosub
0b18c                 | ' lineptr+=1
0b18c                 | ' err=compile_goto()
0b18c                 | ' return err
0b18c     E7 F0 03 F6 | 	mov	ptra, fp
0b190     F2 00 A0 FD | 	call	#popregs_
0b194                 | _compile_gosub_ret
0b194     2D 00 64 FD | 	ret
0b198                 | 
0b198                 | ' 
0b198                 | ' '----- compile 'goto' 
0b198                 | ' 
0b198                 | ' function compile_goto() as ulong
0b198                 | _compile_goto
0b198     0A CA 05 F6 | 	mov	COUNT_, #10
0b19c     E8 00 A0 FD | 	call	#pushregs_
0b1a0     34 F0 07 F1 | 	add	ptra, #52
0b1a4                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0b1a4     38 00 00 FF 
0b1a8     64 64 06 F1 | 	add	objptr, ##28772
0b1ac     32 97 02 FB | 	rdlong	arg03, objptr
0b1b0     03 96 66 F0 | 	shl	arg03, #3
0b1b4     02 00 00 FF 
0b1b8     38 64 86 F1 | 	sub	objptr, ##1080
0b1bc     32 97 02 F1 | 	add	arg03, objptr
0b1c0     04 96 06 F1 | 	add	arg03, #4
0b1c4     4B 97 02 FB | 	rdlong	arg03, arg03
0b1c8     01 00 00 FF 
0b1cc     00 96 0E F2 | 	cmp	arg03, ##512 wz
0b1d0     36 00 00 FF 
0b1d4     2C 64 86 F1 | 	sub	objptr, ##27692
0b1d8     64 02 90 5D |  if_ne	jmp	#LR__0963
0b1dc     38 00 00 FF 
0b1e0     64 64 06 F1 | 	add	objptr, ##28772
0b1e4     32 97 02 FB | 	rdlong	arg03, objptr
0b1e8     01 96 06 F1 | 	add	arg03, #1
0b1ec     03 96 66 F0 | 	shl	arg03, #3
0b1f0     02 00 00 FF 
0b1f4     38 64 86 F1 | 	sub	objptr, ##1080
0b1f8     32 97 02 F1 | 	add	arg03, objptr
0b1fc     04 96 06 F1 | 	add	arg03, #4
0b200     4B 97 02 FB | 	rdlong	arg03, arg03
0b204     FE 97 0E F2 | 	cmp	arg03, #510 wz
0b208     36 00 00 FF 
0b20c     2C 64 86 F1 | 	sub	objptr, ##27692
0b210     2C 02 90 5D |  if_ne	jmp	#LR__0963
0b214     38 00 00 FF 
0b218     64 64 06 F1 | 	add	objptr, ##28772
0b21c     32 97 02 FB | 	rdlong	arg03, objptr
0b220     03 96 66 F0 | 	shl	arg03, #3
0b224     02 00 00 FF 
0b228     38 64 86 F1 | 	sub	objptr, ##1080
0b22c     32 97 02 F1 | 	add	arg03, objptr
0b230     4B 93 02 FB | 	rdlong	arg01, arg03
0b234     00 94 06 F6 | 	mov	arg02, #0
0b238     36 00 00 FF 
0b23c     2C 64 86 F1 | 	sub	objptr, ##27692
0b240     EC C4 B1 FD | 	call	#__system____builtin_atoi
0b244     3D AD 02 F6 | 	mov	local04, result1
0b248     4B 00 00 FF 
0b24c     9C 64 06 F1 | 	add	objptr, ##38556
0b250     32 AF 02 FB | 	rdlong	local05, objptr
0b254     57 B1 02 F6 | 	mov	local06, local05
0b258     01 B0 66 F0 | 	shl	local06, #1
0b25c     57 B1 02 F1 | 	add	local06, local05
0b260     02 B0 66 F0 | 	shl	local06, #2
0b264     03 00 00 FF 
0b268     00 64 86 F1 | 	sub	objptr, ##1536
0b26c     32 B3 02 F6 | 	mov	local07, objptr
0b270     32 B1 02 F1 | 	add	local06, objptr
0b274     08 B0 06 F1 | 	add	local06, #8
0b278     58 9D 68 FC | 	wrlong	#78, local06
0b27c     03 00 00 FF 
0b280     0C 64 06 F1 | 	add	objptr, ##1548
0b284     32 B5 02 FB | 	rdlong	local08, objptr
0b288                 | '   gotoline=val%(lparts(ct).part$) 
0b288                 | '   compiledline(lineptr).result_type=token_fast_goto
0b288                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b288                 | '   do
0b288     3F 00 00 FF 
0b28c     DC 65 86 F1 | 	sub	objptr, ##32732
0b290                 | LR__0960
0b290     E7 92 02 F6 | 	mov	arg01, fp
0b294     10 92 06 F1 | 	add	arg01, #16
0b298     5A 95 02 F6 | 	mov	arg02, local08
0b29c     18 96 06 F6 | 	mov	arg03, #24
0b2a0     18 8B B1 FD | 	call	#_psram_spin2_read1
0b2a4                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b2a4                 | '     if gotoheader(0)<>$FFFFFFFF then
0b2a4     10 CE 05 F1 | 	add	fp, #16
0b2a8     E7 B0 02 FB | 	rdlong	local06, fp
0b2ac     10 CE 85 F1 | 	sub	fp, #16
0b2b0     FF FF 7F FF 
0b2b4     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0b2b8     5A B7 02 56 |  if_ne	mov	local09, local08
0b2bc     24 CE 05 51 |  if_ne	add	fp, #36
0b2c0     E7 B4 02 5B |  if_ne	rdlong	local08, fp
0b2c4     24 CE 85 51 |  if_ne	sub	fp, #36
0b2c8     24 CE 05 F1 | 	add	fp, #36
0b2cc     E7 B0 02 FB | 	rdlong	local06, fp
0b2d0     24 CE 85 F1 | 	sub	fp, #36
0b2d4     FF FF 3F FF 
0b2d8     FF B1 0E F2 | 	cmp	local06, ##2147483647 wz
0b2dc     10 CE 05 51 |  if_ne	add	fp, #16
0b2e0     E7 AE 02 5B |  if_ne	rdlong	local05, fp
0b2e4     10 CE 85 51 |  if_ne	sub	fp, #16
0b2e8     FF FF 7F 5F 
0b2ec     FF AF 0E 52 |  if_ne	cmp	local05, ##-1 wz
0b2f0     10 CE 05 51 |  if_ne	add	fp, #16
0b2f4     57 B3 02 56 |  if_ne	mov	local07, local05
0b2f8     10 CE 85 51 |  if_ne	sub	fp, #16
0b2fc     56 B3 0A 52 |  if_ne	cmp	local07, local04 wz
0b300     8C FF 9F 5D |  if_ne	jmp	#LR__0960
0b304     0B 00 00 FF 
0b308     CC 64 86 F1 | 	sub	objptr, ##5836
0b30c                 | '   if gotoheader(0)=gotoline then
0b30c     10 CE 05 F1 | 	add	fp, #16
0b310     E7 B0 02 FB | 	rdlong	local06, fp
0b314     10 CE 85 F1 | 	sub	fp, #16
0b318     56 B1 0A F2 | 	cmp	local06, local04 wz
0b31c     68 00 90 5D |  if_ne	jmp	#LR__0961
0b320     4B 00 00 FF 
0b324     9C 64 06 F1 | 	add	objptr, ##38556
0b328     32 AF 02 FB | 	rdlong	local05, objptr
0b32c     57 B1 02 F6 | 	mov	local06, local05
0b330     01 B0 66 F0 | 	shl	local06, #1
0b334     57 B1 02 F1 | 	add	local06, local05
0b338     02 B0 66 F0 | 	shl	local06, #2
0b33c     03 00 00 FF 
0b340     00 64 86 F1 | 	sub	objptr, ##1536
0b344     32 B1 02 F1 | 	add	local06, objptr
0b348     58 B7 62 FC | 	wrlong	local09, local06
0b34c     03 00 00 FF 
0b350     00 64 06 F1 | 	add	objptr, ##1536
0b354     32 AF 02 FB | 	rdlong	local05, objptr
0b358     57 B1 02 F6 | 	mov	local06, local05
0b35c     01 B0 66 F0 | 	shl	local06, #1
0b360     57 B1 02 F1 | 	add	local06, local05
0b364     02 B0 66 F0 | 	shl	local06, #2
0b368     03 00 00 FF 
0b36c     00 64 86 F1 | 	sub	objptr, ##1536
0b370     32 B1 02 F1 | 	add	local06, objptr
0b374     04 B0 06 F1 | 	add	local06, #4
0b378     58 AD 62 FC | 	wrlong	local04, local06
0b37c     48 00 00 FF 
0b380     9C 64 86 F1 | 	sub	objptr, ##37020
0b384     98 00 90 FD | 	jmp	#LR__0962
0b388                 | LR__0961
0b388     4B 00 00 FF 
0b38c     9C 64 06 F1 | 	add	objptr, ##38556
0b390     32 AF 02 FB | 	rdlong	local05, objptr
0b394     57 B1 02 F6 | 	mov	local06, local05
0b398     01 B0 66 F0 | 	shl	local06, #1
0b39c     57 B1 02 F1 | 	add	local06, local05
0b3a0     02 B0 66 F0 | 	shl	local06, #2
0b3a4     03 00 00 FF 
0b3a8     00 64 86 F1 | 	sub	objptr, ##1536
0b3ac     32 B1 02 F1 | 	add	local06, objptr
0b3b0     00 00 C0 FF 
0b3b4     58 01 68 FC | 	wrlong	##-2147483648, local06
0b3b8     03 00 00 FF 
0b3bc     00 64 06 F1 | 	add	objptr, ##1536
0b3c0     32 AF 02 FB | 	rdlong	local05, objptr
0b3c4     57 B1 02 F6 | 	mov	local06, local05
0b3c8     01 B0 66 F0 | 	shl	local06, #1
0b3cc     57 B1 02 F1 | 	add	local06, local05
0b3d0     02 B0 66 F0 | 	shl	local06, #2
0b3d4     03 00 00 FF 
0b3d8     00 64 86 F1 | 	sub	objptr, ##1536
0b3dc     32 B1 02 F1 | 	add	local06, objptr
0b3e0     04 B0 06 F1 | 	add	local06, #4
0b3e4     58 AD 62 FC | 	wrlong	local04, local06
0b3e8     03 00 00 FF 
0b3ec     00 64 06 F1 | 	add	objptr, ##1536
0b3f0     32 AF 02 FB | 	rdlong	local05, objptr
0b3f4     57 B1 02 F6 | 	mov	local06, local05
0b3f8     01 B0 66 F0 | 	shl	local06, #1
0b3fc     57 B1 02 F1 | 	add	local06, local05
0b400     02 B0 66 F0 | 	shl	local06, #2
0b404     03 00 00 FF 
0b408     00 64 86 F1 | 	sub	objptr, ##1536
0b40c     32 B1 02 F1 | 	add	local06, objptr
0b410     08 B0 06 F1 | 	add	local06, #8
0b414     58 A7 68 FC | 	wrlong	#83, local06
0b418     48 00 00 FF 
0b41c     9C 64 86 F1 | 	sub	objptr, ##37020
0b420                 | LR__0962
0b420     4B 00 00 FF 
0b424     9C 64 06 F1 | 	add	objptr, ##38556
0b428     32 B7 02 FB | 	rdlong	local09, objptr
0b42c     01 B6 06 F1 | 	add	local09, #1
0b430     32 B7 62 FC | 	wrlong	local09, objptr
0b434     4B 00 00 FF 
0b438     9C 64 86 F1 | 	sub	objptr, ##38556
0b43c     BC 00 90 FD | 	jmp	#LR__0964
0b440                 | LR__0963
0b440     4C 0A B0 FD | 	call	#_expr
0b444     4F AA 06 F6 | 	mov	local03, #79
0b448     00 A6 06 F6 | 	mov	local01, #0
0b44c     54 B9 02 F6 | 	mov	local10, local02
0b450     55 AF 02 F6 | 	mov	local05, local03
0b454     4B 00 00 FF 
0b458     9C 64 06 F1 | 	add	objptr, ##38556
0b45c     32 A7 02 FB | 	rdlong	local01, objptr
0b460     53 B7 02 F6 | 	mov	local09, local01
0b464     01 B6 66 F0 | 	shl	local09, #1
0b468     53 B7 02 F1 | 	add	local09, local01
0b46c     02 B6 66 F0 | 	shl	local09, #2
0b470     03 00 00 FF 
0b474     00 64 86 F1 | 	sub	objptr, ##1536
0b478     32 B7 02 F1 | 	add	local09, objptr
0b47c     5B 01 68 FC | 	wrlong	#0, local09
0b480     03 00 00 FF 
0b484     00 64 06 F1 | 	add	objptr, ##1536
0b488     32 A7 02 FB | 	rdlong	local01, objptr
0b48c     53 B7 02 F6 | 	mov	local09, local01
0b490     01 B6 66 F0 | 	shl	local09, #1
0b494     53 B7 02 F1 | 	add	local09, local01
0b498     02 B6 66 F0 | 	shl	local09, #2
0b49c     03 00 00 FF 
0b4a0     00 64 86 F1 | 	sub	objptr, ##1536
0b4a4     32 B7 02 F1 | 	add	local09, objptr
0b4a8     04 B6 06 F1 | 	add	local09, #4
0b4ac     5B B9 62 FC | 	wrlong	local10, local09
0b4b0     03 00 00 FF 
0b4b4     00 64 06 F1 | 	add	objptr, ##1536
0b4b8     32 B9 02 FB | 	rdlong	local10, objptr
0b4bc     5C A7 02 F6 | 	mov	local01, local10
0b4c0     01 A6 66 F0 | 	shl	local01, #1
0b4c4     5C A7 02 F1 | 	add	local01, local10
0b4c8     02 A6 66 F0 | 	shl	local01, #2
0b4cc     03 00 00 FF 
0b4d0     00 64 86 F1 | 	sub	objptr, ##1536
0b4d4     32 A7 02 F1 | 	add	local01, objptr
0b4d8     08 A6 06 F1 | 	add	local01, #8
0b4dc     53 AF 62 FC | 	wrlong	local05, local01
0b4e0     03 00 00 FF 
0b4e4     00 64 06 F1 | 	add	objptr, ##1536
0b4e8     32 B9 02 FB | 	rdlong	local10, objptr
0b4ec     01 B8 06 F1 | 	add	local10, #1
0b4f0     32 B9 62 FC | 	wrlong	local10, objptr
0b4f4     4B 00 00 FF 
0b4f8     9C 64 86 F1 | 	sub	objptr, ##38556
0b4fc                 | LR__0964
0b4fc                 | ' return 0
0b4fc     00 7A 06 F6 | 	mov	result1, #0
0b500     E7 F0 03 F6 | 	mov	ptra, fp
0b504     F2 00 A0 FD | 	call	#popregs_
0b508                 | _compile_goto_ret
0b508     2D 00 64 FD | 	ret
0b50c                 | 
0b50c                 | ' 
0b50c                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b50c                 | ' 
0b50c                 | ' function compile_on() as ulong
0b50c                 | _compile_on
0b50c     04 CA 05 F6 | 	mov	COUNT_, #4
0b510     E8 00 A0 FD | 	call	#pushregs_
0b514     78 09 B0 FD | 	call	#_expr
0b518     00 A6 06 F6 | 	mov	local01, #0
0b51c     4B 00 00 FF 
0b520     9C 64 06 F1 | 	add	objptr, ##38556
0b524     32 95 02 FB | 	rdlong	arg02, objptr
0b528     4A 93 02 F6 | 	mov	arg01, arg02
0b52c     01 92 66 F0 | 	shl	arg01, #1
0b530     4A 93 02 F1 | 	add	arg01, arg02
0b534     02 92 66 F0 | 	shl	arg01, #2
0b538     03 00 00 FF 
0b53c     00 64 86 F1 | 	sub	objptr, ##1536
0b540     32 93 02 F1 | 	add	arg01, objptr
0b544     08 92 06 F1 | 	add	arg01, #8
0b548     49 83 69 FC | 	wrlong	#193, arg01
0b54c     03 00 00 FF 
0b550     00 64 06 F1 | 	add	objptr, ##1536
0b554     32 95 02 FB | 	rdlong	arg02, objptr
0b558     4A A9 02 F6 | 	mov	local02, arg02
0b55c     01 94 06 F1 | 	add	arg02, #1
0b560     32 95 62 FC | 	wrlong	arg02, objptr
0b564                 | ' expr()
0b564                 | ' 'print lparts(ct).part$ 'ok
0b564                 | ' numpar=0
0b564                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b564                 | ' if lparts(ct).part$="goto" then
0b564     13 00 00 FF 
0b568     38 64 86 F1 | 	sub	objptr, ##9784
0b56c     32 95 02 FB | 	rdlong	arg02, objptr
0b570     03 94 66 F0 | 	shl	arg02, #3
0b574     02 00 00 FF 
0b578     38 64 86 F1 | 	sub	objptr, ##1080
0b57c     32 95 02 F1 | 	add	arg02, objptr
0b580     4A 93 02 FB | 	rdlong	arg01, arg02
0b584     96 01 00 FF 
0b588     9A 94 06 F6 | 	mov	arg02, ##@LR__5936
0b58c     36 00 00 FF 
0b590     2C 64 86 F1 | 	sub	objptr, ##27692
0b594     6C 94 B1 FD | 	call	#__system___string_cmp
0b598     00 7A 0E F2 | 	cmp	result1, #0 wz
0b59c     FC 01 90 5D |  if_ne	jmp	#LR__0975
0b5a0     38 00 00 FF 
0b5a4     64 64 06 F1 | 	add	objptr, ##28772
0b5a8     32 AB 02 FB | 	rdlong	local03, objptr
0b5ac     38 00 00 FF 
0b5b0     64 64 86 F1 | 	sub	objptr, ##28772
0b5b4     01 AA 06 F1 | 	add	local03, #1
0b5b8                 | '   i=ct+1
0b5b8                 | '   do
0b5b8                 | LR__0970
0b5b8                 | '     if lparts(i).token=token_decimal then
0b5b8     55 7B 02 F6 | 	mov	result1, local03
0b5bc     03 7A 66 F0 | 	shl	result1, #3
0b5c0     32 95 02 F6 | 	mov	arg02, objptr
0b5c4     36 00 00 FF 
0b5c8     2C 94 06 F1 | 	add	arg02, ##27692
0b5cc     4A 7B 02 F1 | 	add	result1, arg02
0b5d0     04 7A 06 F1 | 	add	result1, #4
0b5d4     3D 7B 02 FB | 	rdlong	result1, result1
0b5d8     01 00 00 FF 
0b5dc     00 7A 0E F2 | 	cmp	result1, ##512 wz
0b5e0     DC 00 90 5D |  if_ne	jmp	#LR__0971
0b5e4     4B 00 00 FF 
0b5e8     9C 64 06 F1 | 	add	objptr, ##38556
0b5ec     32 7B 02 FB | 	rdlong	result1, objptr
0b5f0     3D 95 02 F6 | 	mov	arg02, result1
0b5f4     01 94 66 F0 | 	shl	arg02, #1
0b5f8     3D 95 02 F1 | 	add	arg02, result1
0b5fc     02 94 66 F0 | 	shl	arg02, #2
0b600     03 00 00 FF 
0b604     00 64 86 F1 | 	sub	objptr, ##1536
0b608     32 95 02 F1 | 	add	arg02, objptr
0b60c     00 00 C0 FF 
0b610     4A 01 68 FC | 	wrlong	##-2147483648, arg02
0b614     03 00 00 FF 
0b618     00 64 06 F1 | 	add	objptr, ##1536
0b61c     32 95 02 FB | 	rdlong	arg02, objptr
0b620     4A AD 02 F6 | 	mov	local04, arg02
0b624     01 AC 66 F0 | 	shl	local04, #1
0b628     4A AD 02 F1 | 	add	local04, arg02
0b62c     02 AC 66 F0 | 	shl	local04, #2
0b630     03 00 00 FF 
0b634     00 64 86 F1 | 	sub	objptr, ##1536
0b638     32 AD 02 F1 | 	add	local04, objptr
0b63c     55 95 02 F6 | 	mov	arg02, local03
0b640     03 94 66 F0 | 	shl	arg02, #3
0b644     12 00 00 FF 
0b648     70 64 86 F1 | 	sub	objptr, ##9328
0b64c     32 95 02 F1 | 	add	arg02, objptr
0b650     4A 93 02 FB | 	rdlong	arg01, arg02
0b654     00 94 06 F6 | 	mov	arg02, #0
0b658     36 00 00 FF 
0b65c     2C 64 86 F1 | 	sub	objptr, ##27692
0b660     CC C0 B1 FD | 	call	#__system____builtin_atoi
0b664     04 AC 06 F1 | 	add	local04, #4
0b668     56 7B 62 FC | 	wrlong	result1, local04
0b66c     4B 00 00 FF 
0b670     9C 64 06 F1 | 	add	objptr, ##38556
0b674     32 95 02 FB | 	rdlong	arg02, objptr
0b678     4A AD 02 F6 | 	mov	local04, arg02
0b67c     01 AC 66 F0 | 	shl	local04, #1
0b680     4A AD 02 F1 | 	add	local04, arg02
0b684     02 AC 66 F0 | 	shl	local04, #2
0b688     03 00 00 FF 
0b68c     00 64 86 F1 | 	sub	objptr, ##1536
0b690     32 AD 02 F1 | 	add	local04, objptr
0b694     08 AC 06 F1 | 	add	local04, #8
0b698     56 A7 68 FC | 	wrlong	#83, local04
0b69c     03 00 00 FF 
0b6a0     00 64 06 F1 | 	add	objptr, ##1536
0b6a4     32 AD 02 FB | 	rdlong	local04, objptr
0b6a8     01 AC 06 F1 | 	add	local04, #1
0b6ac     32 AD 62 FC | 	wrlong	local04, objptr
0b6b0     4B 00 00 FF 
0b6b4     9C 64 86 F1 | 	sub	objptr, ##38556
0b6b8     01 A6 06 F1 | 	add	local01, #1
0b6bc     08 00 90 FD | 	jmp	#LR__0972
0b6c0                 | LR__0971
0b6c0                 | '       return 17
0b6c0     11 7A 06 F6 | 	mov	result1, #17
0b6c4     2C 04 90 FD | 	jmp	#LR__0985
0b6c8                 | LR__0972
0b6c8     01 AA 06 F1 | 	add	local03, #1
0b6cc                 | '     i+=1
0b6cc                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b6cc     55 93 02 F6 | 	mov	arg01, local03
0b6d0     03 92 66 F0 | 	shl	arg01, #3
0b6d4     32 AD 02 F6 | 	mov	local04, objptr
0b6d8     36 00 00 FF 
0b6dc     2C AC 06 F1 | 	add	local04, ##27692
0b6e0     56 93 02 F1 | 	add	arg01, local04
0b6e4     04 92 06 F1 | 	add	arg01, #4
0b6e8     49 93 02 FB | 	rdlong	arg01, arg01
0b6ec     11 92 0E F2 | 	cmp	arg01, #17 wz
0b6f0     2C 00 90 AD |  if_e	jmp	#LR__0973
0b6f4     55 93 02 F6 | 	mov	arg01, local03
0b6f8     03 92 66 F0 | 	shl	arg01, #3
0b6fc     32 AD 02 F6 | 	mov	local04, objptr
0b700     36 00 00 FF 
0b704     2C AC 06 F1 | 	add	local04, ##27692
0b708     56 93 02 F1 | 	add	arg01, local04
0b70c     04 92 06 F1 | 	add	arg01, #4
0b710     49 AD 02 FB | 	rdlong	local04, arg01
0b714     FE AD 0E F2 | 	cmp	local04, #510 wz
0b718     15 7A 06 56 |  if_ne	mov	result1, #21
0b71c     D4 03 90 5D |  if_ne	jmp	#LR__0985
0b720                 | LR__0973
0b720                 | '     if lparts(i).token=token_end then exit loop
0b720     55 7B 02 F6 | 	mov	result1, local03
0b724     03 7A 66 F0 | 	shl	result1, #3
0b728     32 AD 02 F6 | 	mov	local04, objptr
0b72c     36 00 00 FF 
0b730     2C AC 06 F1 | 	add	local04, ##27692
0b734     56 7B 02 F1 | 	add	result1, local04
0b738     04 7A 06 F1 | 	add	result1, #4
0b73c     3D 7B 02 FB | 	rdlong	result1, result1
0b740     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b744     2C 00 90 AD |  if_e	jmp	#LR__0974
0b748     01 AA 06 F1 | 	add	local03, #1
0b74c     55 7B 02 F6 | 	mov	result1, local03
0b750     03 7A 66 F0 | 	shl	result1, #3
0b754     32 AD 02 F6 | 	mov	local04, objptr
0b758     36 00 00 FF 
0b75c     2C AC 06 F1 | 	add	local04, ##27692
0b760     56 7B 02 F1 | 	add	result1, local04
0b764     04 7A 06 F1 | 	add	result1, #4
0b768     3D 7B 02 FB | 	rdlong	result1, result1
0b76c     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b770     44 FE 9F 5D |  if_ne	jmp	#LR__0970
0b774                 | LR__0974
0b774     54 AB 02 F6 | 	mov	local03, local02
0b778     01 AA 66 F0 | 	shl	local03, #1
0b77c     54 AB 02 F1 | 	add	local03, local02
0b780     02 AA 66 F0 | 	shl	local03, #2
0b784     32 AD 02 F6 | 	mov	local04, objptr
0b788     48 00 00 FF 
0b78c     9C AC 06 F1 | 	add	local04, ##37020
0b790     56 AB 02 F1 | 	add	local03, local04
0b794     04 AA 06 F1 | 	add	local03, #4
0b798     55 03 68 FC | 	wrlong	#1, local03
0b79c                 | LR__0975
0b79c                 | ' 
0b79c                 | ' if lparts(ct).part$="gosub" then
0b79c     38 00 00 FF 
0b7a0     64 64 06 F1 | 	add	objptr, ##28772
0b7a4     32 AB 02 FB | 	rdlong	local03, objptr
0b7a8     03 AA 66 F0 | 	shl	local03, #3
0b7ac     02 00 00 FF 
0b7b0     38 64 86 F1 | 	sub	objptr, ##1080
0b7b4     32 AB 02 F1 | 	add	local03, objptr
0b7b8     55 93 02 FB | 	rdlong	arg01, local03
0b7bc     96 01 00 FF 
0b7c0     9F 94 06 F6 | 	mov	arg02, ##@LR__5937
0b7c4     36 00 00 FF 
0b7c8     2C 64 86 F1 | 	sub	objptr, ##27692
0b7cc     34 92 B1 FD | 	call	#__system___string_cmp
0b7d0     00 7A 0E F2 | 	cmp	result1, #0 wz
0b7d4     6C 02 90 5D |  if_ne	jmp	#LR__0981
0b7d8     38 00 00 FF 
0b7dc     64 64 06 F1 | 	add	objptr, ##28772
0b7e0     32 AB 02 FB | 	rdlong	local03, objptr
0b7e4     38 00 00 FF 
0b7e8     64 64 86 F1 | 	sub	objptr, ##28772
0b7ec     01 AA 06 F1 | 	add	local03, #1
0b7f0                 | '   i=ct+1
0b7f0                 | '   do
0b7f0                 | LR__0976
0b7f0                 | '     if lparts(i).token=token_decimal then
0b7f0     55 7B 02 F6 | 	mov	result1, local03
0b7f4     03 7A 66 F0 | 	shl	result1, #3
0b7f8     32 AD 02 F6 | 	mov	local04, objptr
0b7fc     36 00 00 FF 
0b800     2C AC 06 F1 | 	add	local04, ##27692
0b804     56 7B 02 F1 | 	add	result1, local04
0b808     04 7A 06 F1 | 	add	result1, #4
0b80c     3D 7B 02 FB | 	rdlong	result1, result1
0b810     01 00 00 FF 
0b814     00 7A 0E F2 | 	cmp	result1, ##512 wz
0b818     4C 01 90 5D |  if_ne	jmp	#LR__0977
0b81c     4B 00 00 FF 
0b820     9C 64 06 F1 | 	add	objptr, ##38556
0b824     32 7B 02 FB | 	rdlong	result1, objptr
0b828     3D AD 02 F6 | 	mov	local04, result1
0b82c     01 AC 66 F0 | 	shl	local04, #1
0b830     3D AD 02 F1 | 	add	local04, result1
0b834     02 AC 66 F0 | 	shl	local04, #2
0b838     03 00 00 FF 
0b83c     00 64 86 F1 | 	sub	objptr, ##1536
0b840     32 AD 02 F1 | 	add	local04, objptr
0b844     08 AC 06 F1 | 	add	local04, #8
0b848     56 53 69 FC | 	wrlong	#169, local04
0b84c     03 00 00 FF 
0b850     00 64 06 F1 | 	add	objptr, ##1536
0b854     32 7B 02 FB | 	rdlong	result1, objptr
0b858     01 7A 06 F1 | 	add	result1, #1
0b85c     32 7B 62 FC | 	wrlong	result1, objptr
0b860     3D AD 02 F6 | 	mov	local04, result1
0b864     01 AC 66 F0 | 	shl	local04, #1
0b868     3D AD 02 F1 | 	add	local04, result1
0b86c     02 AC 66 F0 | 	shl	local04, #2
0b870     03 00 00 FF 
0b874     00 64 86 F1 | 	sub	objptr, ##1536
0b878     32 AD 02 F1 | 	add	local04, objptr
0b87c     00 00 C0 FF 
0b880     56 01 68 FC | 	wrlong	##-2147483648, local04
0b884     03 00 00 FF 
0b888     00 64 06 F1 | 	add	objptr, ##1536
0b88c     32 7B 02 FB | 	rdlong	result1, objptr
0b890     3D AD 02 F6 | 	mov	local04, result1
0b894     01 AC 66 F0 | 	shl	local04, #1
0b898     3D AD 02 F1 | 	add	local04, result1
0b89c     02 AC 66 F0 | 	shl	local04, #2
0b8a0     03 00 00 FF 
0b8a4     00 64 86 F1 | 	sub	objptr, ##1536
0b8a8     32 AD 02 F1 | 	add	local04, objptr
0b8ac     55 93 02 F6 | 	mov	arg01, local03
0b8b0     03 92 66 F0 | 	shl	arg01, #3
0b8b4     12 00 00 FF 
0b8b8     70 64 86 F1 | 	sub	objptr, ##9328
0b8bc     32 93 02 F1 | 	add	arg01, objptr
0b8c0     49 93 02 FB | 	rdlong	arg01, arg01
0b8c4     00 94 06 F6 | 	mov	arg02, #0
0b8c8     36 00 00 FF 
0b8cc     2C 64 86 F1 | 	sub	objptr, ##27692
0b8d0     5C BE B1 FD | 	call	#__system____builtin_atoi
0b8d4     04 AC 06 F1 | 	add	local04, #4
0b8d8     56 7B 62 FC | 	wrlong	result1, local04
0b8dc     4B 00 00 FF 
0b8e0     9C 64 06 F1 | 	add	objptr, ##38556
0b8e4     32 93 02 FB | 	rdlong	arg01, objptr
0b8e8     49 AD 02 F6 | 	mov	local04, arg01
0b8ec     01 AC 66 F0 | 	shl	local04, #1
0b8f0     49 AD 02 F1 | 	add	local04, arg01
0b8f4     02 AC 66 F0 | 	shl	local04, #2
0b8f8     03 00 00 FF 
0b8fc     00 64 86 F1 | 	sub	objptr, ##1536
0b900     32 AD 02 F1 | 	add	local04, objptr
0b904     08 AC 06 F1 | 	add	local04, #8
0b908     56 A7 68 FC | 	wrlong	#83, local04
0b90c     03 00 00 FF 
0b910     00 64 06 F1 | 	add	objptr, ##1536
0b914     32 93 02 FB | 	rdlong	arg01, objptr
0b918     01 92 06 F1 | 	add	arg01, #1
0b91c     32 93 62 FC | 	wrlong	arg01, objptr
0b920     01 A6 06 F1 | 	add	local01, #1
0b924     49 AD 02 F6 | 	mov	local04, arg01
0b928     01 AC 66 F0 | 	shl	local04, #1
0b92c     49 AD 02 F1 | 	add	local04, arg01
0b930     02 AC 66 F0 | 	shl	local04, #2
0b934     03 00 00 FF 
0b938     00 64 86 F1 | 	sub	objptr, ##1536
0b93c     32 AD 02 F1 | 	add	local04, objptr
0b940     08 AC 06 F1 | 	add	local04, #8
0b944     56 5B 68 FC | 	wrlong	#45, local04
0b948     03 00 00 FF 
0b94c     00 64 06 F1 | 	add	objptr, ##1536
0b950     32 AD 02 FB | 	rdlong	local04, objptr
0b954     01 AC 06 F1 | 	add	local04, #1
0b958     32 AD 62 FC | 	wrlong	local04, objptr
0b95c     4B 00 00 FF 
0b960     9C 64 86 F1 | 	sub	objptr, ##38556
0b964     08 00 90 FD | 	jmp	#LR__0978
0b968                 | LR__0977
0b968                 | '       return 17
0b968     11 7A 06 F6 | 	mov	result1, #17
0b96c     84 01 90 FD | 	jmp	#LR__0985
0b970                 | LR__0978
0b970     01 AA 06 F1 | 	add	local03, #1
0b974                 | '     i+=1
0b974                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b974     55 93 02 F6 | 	mov	arg01, local03
0b978     03 92 66 F0 | 	shl	arg01, #3
0b97c     32 AD 02 F6 | 	mov	local04, objptr
0b980     36 00 00 FF 
0b984     2C AC 06 F1 | 	add	local04, ##27692
0b988     56 93 02 F1 | 	add	arg01, local04
0b98c     04 92 06 F1 | 	add	arg01, #4
0b990     49 93 02 FB | 	rdlong	arg01, arg01
0b994     11 92 0E F2 | 	cmp	arg01, #17 wz
0b998     2C 00 90 AD |  if_e	jmp	#LR__0979
0b99c     55 93 02 F6 | 	mov	arg01, local03
0b9a0     03 92 66 F0 | 	shl	arg01, #3
0b9a4     32 AD 02 F6 | 	mov	local04, objptr
0b9a8     36 00 00 FF 
0b9ac     2C AC 06 F1 | 	add	local04, ##27692
0b9b0     56 93 02 F1 | 	add	arg01, local04
0b9b4     04 92 06 F1 | 	add	arg01, #4
0b9b8     49 93 02 FB | 	rdlong	arg01, arg01
0b9bc     FE 93 0E F2 | 	cmp	arg01, #510 wz
0b9c0     15 7A 06 56 |  if_ne	mov	result1, #21
0b9c4     2C 01 90 5D |  if_ne	jmp	#LR__0985
0b9c8                 | LR__0979
0b9c8                 | '     if lparts(i).token=token_end then exit loop
0b9c8     55 7B 02 F6 | 	mov	result1, local03
0b9cc     03 7A 66 F0 | 	shl	result1, #3
0b9d0     32 AD 02 F6 | 	mov	local04, objptr
0b9d4     36 00 00 FF 
0b9d8     2C AC 06 F1 | 	add	local04, ##27692
0b9dc     56 7B 02 F1 | 	add	result1, local04
0b9e0     04 7A 06 F1 | 	add	result1, #4
0b9e4     3D 7B 02 FB | 	rdlong	result1, result1
0b9e8     FE 7B 0E F2 | 	cmp	result1, #510 wz
0b9ec     2C 00 90 AD |  if_e	jmp	#LR__0980
0b9f0     01 AA 06 F1 | 	add	local03, #1
0b9f4     55 7B 02 F6 | 	mov	result1, local03
0b9f8     03 7A 66 F0 | 	shl	result1, #3
0b9fc     32 AD 02 F6 | 	mov	local04, objptr
0ba00     36 00 00 FF 
0ba04     2C AC 06 F1 | 	add	local04, ##27692
0ba08     56 7B 02 F1 | 	add	result1, local04
0ba0c     04 7A 06 F1 | 	add	result1, #4
0ba10     3D 7B 02 FB | 	rdlong	result1, result1
0ba14     FE 7B 0E F2 | 	cmp	result1, #510 wz
0ba18     D4 FD 9F 5D |  if_ne	jmp	#LR__0976
0ba1c                 | LR__0980
0ba1c     54 AB 02 F6 | 	mov	local03, local02
0ba20     01 AA 66 F0 | 	shl	local03, #1
0ba24     54 AB 02 F1 | 	add	local03, local02
0ba28     02 AA 66 F0 | 	shl	local03, #2
0ba2c     32 AD 02 F6 | 	mov	local04, objptr
0ba30     48 00 00 FF 
0ba34     9C AC 06 F1 | 	add	local04, ##37020
0ba38     56 AB 02 F1 | 	add	local03, local04
0ba3c     04 AA 06 F1 | 	add	local03, #4
0ba40     55 07 68 FC | 	wrlong	#3, local03
0ba44                 | LR__0981
0ba44     54 AB 02 F6 | 	mov	local03, local02
0ba48     01 AA 66 F0 | 	shl	local03, #1
0ba4c     54 AB 02 F1 | 	add	local03, local02
0ba50     02 AA 66 F0 | 	shl	local03, #2
0ba54     48 00 00 FF 
0ba58     9C 64 06 F1 | 	add	objptr, ##37020
0ba5c     32 AB 02 F1 | 	add	local03, objptr
0ba60     55 A7 62 FC | 	wrlong	local01, local03
0ba64                 | ' compiledline(onlineptr).result.uresult=numpar
0ba64                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0ba64     03 00 00 FF 
0ba68     00 64 06 F1 | 	add	objptr, ##1536
0ba6c     32 AB 02 FB | 	rdlong	local03, objptr
0ba70     4B 00 00 FF 
0ba74     9C 64 86 F1 | 	sub	objptr, ##38556
0ba78     D7 3A 48 FB | 	callpa	#(@LR__0984-@LR__0982)>>2,fcache_load_ptr_
0ba7c                 | LR__0982
0ba7c     55 AD 02 F6 | 	mov	local04, local03
0ba80     01 AC 66 F0 | 	shl	local04, #1
0ba84     55 AD 02 F1 | 	add	local04, local03
0ba88     02 AC 66 F0 | 	shl	local04, #2
0ba8c     32 A7 02 F6 | 	mov	local01, objptr
0ba90     48 00 00 FF 
0ba94     9C A6 06 F1 | 	add	local01, ##37020
0ba98     53 AD 02 F1 | 	add	local04, local01
0ba9c     08 AC 06 F1 | 	add	local04, #8
0baa0     56 AD 02 FB | 	rdlong	local04, local04
0baa4     2D AC 0E F2 | 	cmp	local04, #45 wz
0baa8     38 00 90 5D |  if_ne	jmp	#LR__0983
0baac     55 AD 02 F6 | 	mov	local04, local03
0bab0     01 AC 66 F0 | 	shl	local04, #1
0bab4     55 AD 02 F1 | 	add	local04, local03
0bab8     02 AC 66 F0 | 	shl	local04, #2
0babc     48 00 00 FF 
0bac0     9C 64 06 F1 | 	add	objptr, ##37020
0bac4     32 AD 02 F1 | 	add	local04, objptr
0bac8     03 00 00 FF 
0bacc     00 64 06 F1 | 	add	objptr, ##1536
0bad0     32 A7 02 FB | 	rdlong	local01, objptr
0bad4     4B 00 00 FF 
0bad8     9C 64 86 F1 | 	sub	objptr, ##38556
0badc     02 A6 86 F1 | 	sub	local01, #2
0bae0     56 A7 62 FC | 	wrlong	local01, local04
0bae4                 | LR__0983
0bae4     01 AA 86 F1 | 	sub	local03, #1
0bae8     54 AB 52 F2 | 	cmps	local03, local02 wc
0baec     8C FF 9F 3D |  if_ae	jmp	#LR__0982
0baf0                 | LR__0984
0baf0                 | ' return 0
0baf0     00 7A 06 F6 | 	mov	result1, #0
0baf4                 | LR__0985
0baf4     E7 F0 03 F6 | 	mov	ptra, fp
0baf8     F2 00 A0 FD | 	call	#popregs_
0bafc                 | _compile_on_ret
0bafc     2D 00 64 FD | 	ret
0bb00                 | 
0bb00                 | ' 
0bb00                 | ' '----- A helper for compile_input and compile_read
0bb00                 | '  
0bb00                 | ' function getaddr() as ulong
0bb00                 | _getaddr
0bb00     0B CA 05 F6 | 	mov	COUNT_, #11
0bb04     E8 00 A0 FD | 	call	#pushregs_
0bb08     38 00 00 FF 
0bb0c     64 64 06 F1 | 	add	objptr, ##28772
0bb10     32 AD 02 FB | 	rdlong	local04, objptr
0bb14     03 AC 66 F0 | 	shl	local04, #3
0bb18     02 00 00 FF 
0bb1c     38 64 86 F1 | 	sub	objptr, ##1080
0bb20     32 AD 02 F1 | 	add	local04, objptr
0bb24     56 AF 02 FB | 	rdlong	local05, local04
0bb28     01 B0 66 F6 | 	neg	local06, #1
0bb2c                 | ' 
0bb2c                 | ' varname$=lparts(ct).part$
0bb2c                 | ' j=-1
0bb2c                 | ' 
0bb2c                 | ' for i=0 to varnum-1
0bb2c     00 B2 06 F6 | 	mov	local07, #0
0bb30     04 64 86 F1 | 	sub	objptr, #4
0bb34     32 B5 02 FB | 	rdlong	local08, objptr
0bb38     36 00 00 FF 
0bb3c     28 64 86 F1 | 	sub	objptr, ##27688
0bb40                 | LR__0990
0bb40     5A B3 52 F2 | 	cmps	local07, local08 wc
0bb44     34 00 90 3D |  if_ae	jmp	#LR__0991
0bb48                 | '   if variables(i).name=varname$ then j=i : exit
0bb48     59 AD 02 F6 | 	mov	local04, local07
0bb4c     04 AC 66 F0 | 	shl	local04, #4
0bb50     32 95 02 F6 | 	mov	arg02, objptr
0bb54     16 00 00 FF 
0bb58     18 94 06 F1 | 	add	arg02, ##11288
0bb5c     4A AD 02 F1 | 	add	local04, arg02
0bb60     56 93 02 FB | 	rdlong	arg01, local04
0bb64     57 95 02 F6 | 	mov	arg02, local05
0bb68     98 8E B1 FD | 	call	#__system___string_cmp
0bb6c     00 7A 0E F2 | 	cmp	result1, #0 wz
0bb70     59 B1 02 A6 |  if_e	mov	local06, local07
0bb74     01 B2 06 51 |  if_ne	add	local07, #1
0bb78     C4 FF 9F 5D |  if_ne	jmp	#LR__0990
0bb7c                 | LR__0991
0bb7c                 | ' if  j=-1 andalso varnum<maxvars then   
0bb7c     FF FF 7F FF 
0bb80     FF B1 0E F2 | 	cmp	local06, ##-1 wz
0bb84     A8 00 90 5D |  if_ne	jmp	#LR__0992
0bb88     36 00 00 FF 
0bb8c     28 64 06 F1 | 	add	objptr, ##27688
0bb90     32 B5 02 FB | 	rdlong	local08, objptr
0bb94     36 00 00 FF 
0bb98     28 64 86 F1 | 	sub	objptr, ##27688
0bb9c     02 00 00 FF 
0bba0     00 B4 56 F2 | 	cmps	local08, ##1024 wc
0bba4     88 00 90 3D |  if_ae	jmp	#LR__0992
0bba8     36 00 00 FF 
0bbac     28 64 06 F1 | 	add	objptr, ##27688
0bbb0     32 AD 02 FB | 	rdlong	local04, objptr
0bbb4     04 AC 66 F0 | 	shl	local04, #4
0bbb8     20 00 00 FF 
0bbbc     10 64 86 F1 | 	sub	objptr, ##16400
0bbc0     32 AD 02 F1 | 	add	local04, objptr
0bbc4     56 AF 62 FC | 	wrlong	local05, local04
0bbc8     20 00 00 FF 
0bbcc     10 64 06 F1 | 	add	objptr, ##16400
0bbd0     32 AD 02 FB | 	rdlong	local04, objptr
0bbd4     04 AC 66 F0 | 	shl	local04, #4
0bbd8     20 00 00 FF 
0bbdc     10 64 86 F1 | 	sub	objptr, ##16400
0bbe0     32 AD 02 F1 | 	add	local04, objptr
0bbe4     04 AC 06 F1 | 	add	local04, #4
0bbe8     56 01 68 FC | 	wrlong	#0, local04
0bbec     20 00 00 FF 
0bbf0     10 64 06 F1 | 	add	objptr, ##16400
0bbf4     32 AD 02 FB | 	rdlong	local04, objptr
0bbf8     04 AC 66 F0 | 	shl	local04, #4
0bbfc     20 00 00 FF 
0bc00     10 64 86 F1 | 	sub	objptr, ##16400
0bc04     32 AD 02 F1 | 	add	local04, objptr
0bc08     0C AC 06 F1 | 	add	local04, #12
0bc0c     56 39 68 FC | 	wrlong	#28, local04
0bc10     20 00 00 FF 
0bc14     10 64 06 F1 | 	add	objptr, ##16400
0bc18     32 B5 02 FB | 	rdlong	local08, objptr
0bc1c     5A B1 02 F6 | 	mov	local06, local08
0bc20     01 B4 06 F1 | 	add	local08, #1
0bc24     32 B5 62 FC | 	wrlong	local08, objptr
0bc28     36 00 00 FF 
0bc2c     28 64 86 F1 | 	sub	objptr, ##27688
0bc30                 | LR__0992
0bc30     00 B2 06 F6 | 	mov	local07, #0
0bc34                 | ' numpar=0
0bc34                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0bc34     38 00 00 FF 
0bc38     64 64 06 F1 | 	add	objptr, ##28772
0bc3c     32 AD 02 FB | 	rdlong	local04, objptr
0bc40     01 AC 06 F1 | 	add	local04, #1
0bc44     03 AC 66 F0 | 	shl	local04, #3
0bc48     02 00 00 FF 
0bc4c     38 64 86 F1 | 	sub	objptr, ##1080
0bc50     32 AD 02 F1 | 	add	local04, objptr
0bc54     04 AC 06 F1 | 	add	local04, #4
0bc58     56 B5 02 FB | 	rdlong	local08, local04
0bc5c     15 B4 0E F2 | 	cmp	local08, #21 wz
0bc60     36 00 00 FF 
0bc64     2C 64 86 F1 | 	sub	objptr, ##27692
0bc68     54 01 90 5D |  if_ne	jmp	#LR__0997
0bc6c     38 00 00 FF 
0bc70     64 64 06 F1 | 	add	objptr, ##28772
0bc74     32 B7 02 FB | 	rdlong	local09, objptr
0bc78     01 B6 06 F1 | 	add	local09, #1
0bc7c     32 B7 62 FC | 	wrlong	local09, objptr
0bc80     38 00 00 FF 
0bc84     64 64 86 F1 | 	sub	objptr, ##28772
0bc88                 | '   ct+=1 											' omit this lpar, this is for expr list
0bc88                 | '   do
0bc88                 | LR__0993
0bc88     38 00 00 FF 
0bc8c     64 64 06 F1 | 	add	objptr, ##28772
0bc90     32 AD 02 FB | 	rdlong	local04, objptr
0bc94     01 AC 06 F1 | 	add	local04, #1
0bc98     32 AD 62 FC | 	wrlong	local04, objptr
0bc9c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0bc9c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0bc9c     03 AC 66 F0 | 	shl	local04, #3
0bca0     02 00 00 FF 
0bca4     38 64 86 F1 | 	sub	objptr, ##1080
0bca8     32 AD 02 F1 | 	add	local04, objptr
0bcac     04 AC 06 F1 | 	add	local04, #4
0bcb0     56 B7 02 FB | 	rdlong	local09, local04
0bcb4     15 B6 0E F2 | 	cmp	local09, #21 wz
0bcb8     36 00 00 FF 
0bcbc     2C 64 86 F1 | 	sub	objptr, ##27692
0bcc0     44 00 90 5D |  if_ne	jmp	#LR__0994
0bcc4     38 00 00 FF 
0bcc8     64 64 06 F1 | 	add	objptr, ##28772
0bccc     32 B7 02 FB | 	rdlong	local09, objptr
0bcd0     01 B6 06 F1 | 	add	local09, #1
0bcd4     32 B7 62 FC | 	wrlong	local09, objptr
0bcd8     38 00 00 FF 
0bcdc     64 64 86 F1 | 	sub	objptr, ##28772
0bce0     AC 01 B0 FD | 	call	#_expr
0bce4     3D B9 02 F6 | 	mov	local10, result1
0bce8     38 00 00 FF 
0bcec     64 64 06 F1 | 	add	objptr, ##28772
0bcf0     32 B7 02 FB | 	rdlong	local09, objptr
0bcf4     01 B6 06 F1 | 	add	local09, #1
0bcf8     32 B7 62 FC | 	wrlong	local09, objptr
0bcfc     38 00 00 FF 
0bd00     64 64 86 F1 | 	sub	objptr, ##28772
0bd04     08 00 90 FD | 	jmp	#LR__0995
0bd08                 | LR__0994
0bd08     84 01 B0 FD | 	call	#_expr
0bd0c     3D B9 02 F6 | 	mov	local10, result1
0bd10                 | LR__0995
0bd10                 | '     if err>0 then return err
0bd10     01 B8 56 F2 | 	cmps	local10, #1 wc
0bd14     5C 7B 02 36 |  if_ae	mov	result1, local10
0bd18     68 01 90 3D |  if_ae	jmp	#LR__0998
0bd1c     01 B2 06 F1 | 	add	local07, #1
0bd20     38 00 00 FF 
0bd24     64 64 06 F1 | 	add	objptr, ##28772
0bd28     32 AD 02 FB | 	rdlong	local04, objptr
0bd2c     03 AC 66 F0 | 	shl	local04, #3
0bd30     02 00 00 FF 
0bd34     38 64 86 F1 | 	sub	objptr, ##1080
0bd38     32 AD 02 F1 | 	add	local04, objptr
0bd3c     04 AC 06 F1 | 	add	local04, #4
0bd40     56 B9 02 FB | 	rdlong	local10, local04
0bd44     14 B8 0E F2 | 	cmp	local10, #20 wz
0bd48     36 00 00 FF 
0bd4c     2C 64 86 F1 | 	sub	objptr, ##27692
0bd50     34 00 90 AD |  if_e	jmp	#LR__0996
0bd54     38 00 00 FF 
0bd58     64 64 06 F1 | 	add	objptr, ##28772
0bd5c     32 B9 02 FB | 	rdlong	local10, objptr
0bd60     03 B8 66 F0 | 	shl	local10, #3
0bd64     02 00 00 FF 
0bd68     38 64 86 F1 | 	sub	objptr, ##1080
0bd6c     32 B9 02 F1 | 	add	local10, objptr
0bd70     04 B8 06 F1 | 	add	local10, #4
0bd74     5C B9 02 FB | 	rdlong	local10, local10
0bd78     FE B9 0E F2 | 	cmp	local10, #510 wz
0bd7c     36 00 00 FF 
0bd80     2C 64 86 F1 | 	sub	objptr, ##27692
0bd84     00 FF 9F 5D |  if_ne	jmp	#LR__0993
0bd88                 | LR__0996
0bd88                 | '     if lparts(ct).token=token_end then return 14
0bd88     38 00 00 FF 
0bd8c     64 64 06 F1 | 	add	objptr, ##28772
0bd90     32 AD 02 FB | 	rdlong	local04, objptr
0bd94     03 AC 66 F0 | 	shl	local04, #3
0bd98     02 00 00 FF 
0bd9c     38 64 86 F1 | 	sub	objptr, ##1080
0bda0     32 AD 02 F1 | 	add	local04, objptr
0bda4     04 AC 06 F1 | 	add	local04, #4
0bda8     56 B9 02 FB | 	rdlong	local10, local04
0bdac     FE B9 0E F2 | 	cmp	local10, #510 wz
0bdb0     36 00 00 FF 
0bdb4     2C 64 86 F1 | 	sub	objptr, ##27692
0bdb8     0E 7A 06 A6 |  if_e	mov	result1, #14
0bdbc     C4 00 90 AD |  if_e	jmp	#LR__0998
0bdc0                 | LR__0997
0bdc0     59 A9 02 F6 | 	mov	local02, local07
0bdc4     12 AA 06 F6 | 	mov	local03, #18
0bdc8     58 A7 02 F6 | 	mov	local01, local06
0bdcc     53 B7 02 F6 | 	mov	local09, local01
0bdd0     54 BB 02 F6 | 	mov	local11, local02
0bdd4     55 A7 02 F6 | 	mov	local01, local03
0bdd8     4B 00 00 FF 
0bddc     9C 64 06 F1 | 	add	objptr, ##38556
0bde0     32 B9 02 FB | 	rdlong	local10, objptr
0bde4     5C B3 02 F6 | 	mov	local07, local10
0bde8     01 B2 66 F0 | 	shl	local07, #1
0bdec     5C B3 02 F1 | 	add	local07, local10
0bdf0     02 B2 66 F0 | 	shl	local07, #2
0bdf4     03 00 00 FF 
0bdf8     00 64 86 F1 | 	sub	objptr, ##1536
0bdfc     32 B3 02 F1 | 	add	local07, objptr
0be00     59 B7 62 FC | 	wrlong	local09, local07
0be04     03 00 00 FF 
0be08     00 64 06 F1 | 	add	objptr, ##1536
0be0c     32 B9 02 FB | 	rdlong	local10, objptr
0be10     5C B7 02 F6 | 	mov	local09, local10
0be14     01 B6 66 F0 | 	shl	local09, #1
0be18     5C B7 02 F1 | 	add	local09, local10
0be1c     02 B6 66 F0 | 	shl	local09, #2
0be20     03 00 00 FF 
0be24     00 64 86 F1 | 	sub	objptr, ##1536
0be28     32 B7 02 F1 | 	add	local09, objptr
0be2c     04 B6 06 F1 | 	add	local09, #4
0be30     5B BB 62 FC | 	wrlong	local11, local09
0be34     03 00 00 FF 
0be38     00 64 06 F1 | 	add	objptr, ##1536
0be3c     32 BB 02 FB | 	rdlong	local11, objptr
0be40     5D B9 02 F6 | 	mov	local10, local11
0be44     01 B8 66 F0 | 	shl	local10, #1
0be48     5D B9 02 F1 | 	add	local10, local11
0be4c     02 B8 66 F0 | 	shl	local10, #2
0be50     03 00 00 FF 
0be54     00 64 86 F1 | 	sub	objptr, ##1536
0be58     32 B9 02 F1 | 	add	local10, objptr
0be5c     08 B8 06 F1 | 	add	local10, #8
0be60     5C A7 62 FC | 	wrlong	local01, local10
0be64     03 00 00 FF 
0be68     00 64 06 F1 | 	add	objptr, ##1536
0be6c     32 B7 02 FB | 	rdlong	local09, objptr
0be70     01 B6 06 F1 | 	add	local09, #1
0be74     32 B7 62 FC | 	wrlong	local09, objptr
0be78     4B 00 00 FF 
0be7c     9C 64 86 F1 | 	sub	objptr, ##38556
0be80                 | ' t2.result.twowords(1)=numpar
0be80                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0be80                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0be80                 | ' return 0
0be80     00 7A 06 F6 | 	mov	result1, #0
0be84                 | LR__0998
0be84     E7 F0 03 F6 | 	mov	ptra, fp
0be88     F2 00 A0 FD | 	call	#popregs_
0be8c                 | _getaddr_ret
0be8c     2D 00 64 FD | 	ret
0be90                 | 
0be90                 | ' 
0be90                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0be90                 | ' '--------------------------------------------- 
0be90                 | ' 
0be90                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be90                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0be90                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be90                 | ' 
0be90                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be90                 | ' '
0be90                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0be90                 | ' '
0be90                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0be90                 | ' 
0be90                 | ' function expr() as ulong 
0be90                 | _expr
0be90     07 CA 05 F6 | 	mov	COUNT_, #7
0be94     E8 00 A0 FD | 	call	#pushregs_
0be98                 | _expr_enter
0be98     38 00 00 FF 
0be9c     64 64 06 F1 | 	add	objptr, ##28772
0bea0     32 AD 02 FB | 	rdlong	local04, objptr
0bea4     03 AC 66 F0 | 	shl	local04, #3
0bea8     02 00 00 FF 
0beac     38 64 86 F1 | 	sub	objptr, ##1080
0beb0     32 AD 02 F1 | 	add	local04, objptr
0beb4     04 AC 06 F1 | 	add	local04, #4
0beb8     56 AF 02 FB | 	rdlong	local05, local04
0bebc                 | ' 
0bebc                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0bebc     FE AF 0E F2 | 	cmp	local05, #510 wz
0bec0     36 00 00 FF 
0bec4     2C 64 86 F1 | 	sub	objptr, ##27692
0bec8     C4 00 90 5D |  if_ne	jmp	#LR__1000
0becc     1D A6 06 F6 | 	mov	local01, #29
0bed0     FF AA 06 F6 | 	mov	local03, #255
0bed4     53 B1 02 F6 | 	mov	local06, local01
0bed8     54 B3 02 F6 | 	mov	local07, local02
0bedc     55 A7 02 F6 | 	mov	local01, local03
0bee0     4B 00 00 FF 
0bee4     9C 64 06 F1 | 	add	objptr, ##38556
0bee8     32 AF 02 FB | 	rdlong	local05, objptr
0beec     57 AD 02 F6 | 	mov	local04, local05
0bef0     01 AC 66 F0 | 	shl	local04, #1
0bef4     57 AD 02 F1 | 	add	local04, local05
0bef8     02 AC 66 F0 | 	shl	local04, #2
0befc     03 00 00 FF 
0bf00     00 64 86 F1 | 	sub	objptr, ##1536
0bf04     32 AD 02 F1 | 	add	local04, objptr
0bf08     56 B1 62 FC | 	wrlong	local06, local04
0bf0c     03 00 00 FF 
0bf10     00 64 06 F1 | 	add	objptr, ##1536
0bf14     32 B1 02 FB | 	rdlong	local06, objptr
0bf18     58 AF 02 F6 | 	mov	local05, local06
0bf1c     01 AE 66 F0 | 	shl	local05, #1
0bf20     58 AF 02 F1 | 	add	local05, local06
0bf24     02 AE 66 F0 | 	shl	local05, #2
0bf28     03 00 00 FF 
0bf2c     00 64 86 F1 | 	sub	objptr, ##1536
0bf30     32 AF 02 F1 | 	add	local05, objptr
0bf34     04 AE 06 F1 | 	add	local05, #4
0bf38     57 B3 62 FC | 	wrlong	local07, local05
0bf3c     03 00 00 FF 
0bf40     00 64 06 F1 | 	add	objptr, ##1536
0bf44     32 B3 02 FB | 	rdlong	local07, objptr
0bf48     59 B1 02 F6 | 	mov	local06, local07
0bf4c     01 B0 66 F0 | 	shl	local06, #1
0bf50     59 B1 02 F1 | 	add	local06, local07
0bf54     02 B0 66 F0 | 	shl	local06, #2
0bf58     03 00 00 FF 
0bf5c     00 64 86 F1 | 	sub	objptr, ##1536
0bf60     32 B1 02 F1 | 	add	local06, objptr
0bf64     08 B0 06 F1 | 	add	local06, #8
0bf68     58 A7 62 FC | 	wrlong	local01, local06
0bf6c     03 00 00 FF 
0bf70     00 64 06 F1 | 	add	objptr, ##1536
0bf74     32 B1 02 FB | 	rdlong	local06, objptr
0bf78     01 B0 06 F1 | 	add	local06, #1
0bf7c     32 B1 62 FC | 	wrlong	local06, objptr
0bf80     4B 00 00 FF 
0bf84     9C 64 86 F1 | 	sub	objptr, ##38556
0bf88     1D 7A 06 F6 | 	mov	result1, #29
0bf8c     64 01 90 FD | 	jmp	#LR__1003
0bf90                 | LR__1000
0bf90     00 A6 06 F6 | 	mov	local01, #0
0bf94     68 01 B0 FD | 	call	#_addsub
0bf98                 | ' t3.result.uresult=0
0bf98                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0bf98                 | ' if err>0 then return err
0bf98     01 7A 16 F2 | 	cmp	result1, #1 wc
0bf9c     54 01 90 3D |  if_ae	jmp	#LR__1003
0bfa0     38 00 00 FF 
0bfa4     64 64 06 F1 | 	add	objptr, ##28772
0bfa8     32 AD 02 FB | 	rdlong	local04, objptr
0bfac     03 AC 66 F0 | 	shl	local04, #3
0bfb0     02 00 00 FF 
0bfb4     38 64 86 F1 | 	sub	objptr, ##1080
0bfb8     32 AD 02 F1 | 	add	local04, objptr
0bfbc     04 AC 06 F1 | 	add	local04, #4
0bfc0     56 AF 02 FB | 	rdlong	local05, local04
0bfc4                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0bfc4                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0bfc4     36 00 00 FF 
0bfc8     2C 64 86 F1 | 	sub	objptr, ##27692
0bfcc                 | LR__1001
0bfcc     1B AE 0E F2 | 	cmp	local05, #27 wz
0bfd0     0F AE 0E 52 |  if_ne	cmp	local05, #15 wz
0bfd4     10 AE 0E 52 |  if_ne	cmp	local05, #16 wz
0bfd8     27 AE 0E 52 |  if_ne	cmp	local05, #39 wz
0bfdc     26 AE 0E 52 |  if_ne	cmp	local05, #38 wz
0bfe0     2A AE 0E 52 |  if_ne	cmp	local05, #42 wz
0bfe4     08 01 90 5D |  if_ne	jmp	#LR__1002
0bfe8     38 00 00 FF 
0bfec     64 64 06 F1 | 	add	objptr, ##28772
0bff0     32 B1 02 FB | 	rdlong	local06, objptr
0bff4     01 B0 06 F1 | 	add	local06, #1
0bff8     32 B1 62 FC | 	wrlong	local06, objptr
0bffc     38 00 00 FF 
0c000     64 64 86 F1 | 	sub	objptr, ##28772
0c004     F8 00 B0 FD | 	call	#_addsub
0c008                 | '   ct+=1
0c008                 | '   err=addsub() : if err>0 then return err
0c008     01 7A 16 F2 | 	cmp	result1, #1 wc
0c00c     E4 00 90 3D |  if_ae	jmp	#LR__1003
0c010     57 AB 02 F6 | 	mov	local03, local05
0c014     53 B1 02 F6 | 	mov	local06, local01
0c018     54 B3 02 F6 | 	mov	local07, local02
0c01c     55 AF 02 F6 | 	mov	local05, local03
0c020     4B 00 00 FF 
0c024     9C 64 06 F1 | 	add	objptr, ##38556
0c028     32 AD 02 FB | 	rdlong	local04, objptr
0c02c     56 7B 02 F6 | 	mov	result1, local04
0c030     01 7A 66 F0 | 	shl	result1, #1
0c034     56 7B 02 F1 | 	add	result1, local04
0c038     02 7A 66 F0 | 	shl	result1, #2
0c03c     03 00 00 FF 
0c040     00 64 86 F1 | 	sub	objptr, ##1536
0c044     32 7B 02 F1 | 	add	result1, objptr
0c048     3D B1 62 FC | 	wrlong	local06, result1
0c04c     03 00 00 FF 
0c050     00 64 06 F1 | 	add	objptr, ##1536
0c054     32 B1 02 FB | 	rdlong	local06, objptr
0c058     58 AD 02 F6 | 	mov	local04, local06
0c05c     01 AC 66 F0 | 	shl	local04, #1
0c060     58 AD 02 F1 | 	add	local04, local06
0c064     02 AC 66 F0 | 	shl	local04, #2
0c068     03 00 00 FF 
0c06c     00 64 86 F1 | 	sub	objptr, ##1536
0c070     32 AD 02 F1 | 	add	local04, objptr
0c074     04 AC 06 F1 | 	add	local04, #4
0c078     56 B3 62 FC | 	wrlong	local07, local04
0c07c     03 00 00 FF 
0c080     00 64 06 F1 | 	add	objptr, ##1536
0c084     32 B3 02 FB | 	rdlong	local07, objptr
0c088     59 B1 02 F6 | 	mov	local06, local07
0c08c     01 B0 66 F0 | 	shl	local06, #1
0c090     59 B1 02 F1 | 	add	local06, local07
0c094     02 B0 66 F0 | 	shl	local06, #2
0c098     03 00 00 FF 
0c09c     00 64 86 F1 | 	sub	objptr, ##1536
0c0a0     32 B1 02 F1 | 	add	local06, objptr
0c0a4     08 B0 06 F1 | 	add	local06, #8
0c0a8     58 AF 62 FC | 	wrlong	local05, local06
0c0ac     03 00 00 FF 
0c0b0     00 64 06 F1 | 	add	objptr, ##1536
0c0b4     32 B1 02 FB | 	rdlong	local06, objptr
0c0b8     01 B0 06 F1 | 	add	local06, #1
0c0bc     32 B1 62 FC | 	wrlong	local06, objptr
0c0c0     13 00 00 FF 
0c0c4     38 64 86 F1 | 	sub	objptr, ##9784
0c0c8     32 AD 02 FB | 	rdlong	local04, objptr
0c0cc     03 AC 66 F0 | 	shl	local04, #3
0c0d0     02 00 00 FF 
0c0d4     38 64 86 F1 | 	sub	objptr, ##1080
0c0d8     32 AD 02 F1 | 	add	local04, objptr
0c0dc     04 AC 06 F1 | 	add	local04, #4
0c0e0     56 AF 02 FB | 	rdlong	local05, local04
0c0e4     36 00 00 FF 
0c0e8     2C 64 86 F1 | 	sub	objptr, ##27692
0c0ec     DC FE 9F FD | 	jmp	#LR__1001
0c0f0                 | LR__1002
0c0f0                 | ' return 0  
0c0f0     00 7A 06 F6 | 	mov	result1, #0
0c0f4                 | LR__1003
0c0f4     E7 F0 03 F6 | 	mov	ptra, fp
0c0f8     F2 00 A0 FD | 	call	#popregs_
0c0fc                 | _expr_ret
0c0fc     2D 00 64 FD | 	ret
0c100                 | 
0c100                 | ' 
0c100                 | ' ' Second level operators : add, sub, logic
0c100                 | ' 
0c100                 | ' function addsub() as ulong
0c100                 | _addsub
0c100     07 CA 05 F6 | 	mov	COUNT_, #7
0c104     E8 00 A0 FD | 	call	#pushregs_
0c108                 | _addsub_enter
0c108     00 A6 06 F6 | 	mov	local01, #0
0c10c     60 01 B0 FD | 	call	#_muldiv
0c110                 | ' 
0c110                 | ' t3.result.uresult=0
0c110                 | ' err=muldiv() : if err>0 then return err           			 
0c110     01 7A 16 F2 | 	cmp	result1, #1 wc
0c114     4C 01 90 3D |  if_ae	jmp	#LR__1012
0c118     38 00 00 FF 
0c11c     64 64 06 F1 | 	add	objptr, ##28772
0c120     32 AD 02 FB | 	rdlong	local04, objptr
0c124     03 AC 66 F0 | 	shl	local04, #3
0c128     02 00 00 FF 
0c12c     38 64 86 F1 | 	sub	objptr, ##1080
0c130     32 AD 02 F1 | 	add	local04, objptr
0c134     04 AC 06 F1 | 	add	local04, #4
0c138     56 AF 02 FB | 	rdlong	local05, local04
0c13c                 | ' op = lparts(ct).token				 
0c13c                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0c13c     36 00 00 FF 
0c140     2C 64 86 F1 | 	sub	objptr, ##27692
0c144                 | LR__1010
0c144     01 AE 0E F2 | 	cmp	local05, #1 wz
0c148     02 AE 0E 52 |  if_ne	cmp	local05, #2 wz
0c14c     07 AE 0E 52 |  if_ne	cmp	local05, #7 wz
0c150     03 AE 0E 52 |  if_ne	cmp	local05, #3 wz
0c154     08 01 90 5D |  if_ne	jmp	#LR__1011
0c158     38 00 00 FF 
0c15c     64 64 06 F1 | 	add	objptr, ##28772
0c160     32 AD 02 FB | 	rdlong	local04, objptr
0c164     01 AC 06 F1 | 	add	local04, #1
0c168     32 AD 62 FC | 	wrlong	local04, objptr
0c16c     38 00 00 FF 
0c170     64 64 86 F1 | 	sub	objptr, ##28772
0c174     F8 00 B0 FD | 	call	#_muldiv
0c178                 | '   ct+=1
0c178                 | '   err=muldiv() : if err>0 then return err   
0c178     01 7A 16 F2 | 	cmp	result1, #1 wc
0c17c     E4 00 90 3D |  if_ae	jmp	#LR__1012
0c180     57 AB 02 F6 | 	mov	local03, local05
0c184     53 B1 02 F6 | 	mov	local06, local01
0c188     54 B3 02 F6 | 	mov	local07, local02
0c18c     55 AF 02 F6 | 	mov	local05, local03
0c190     4B 00 00 FF 
0c194     9C 64 06 F1 | 	add	objptr, ##38556
0c198     32 AD 02 FB | 	rdlong	local04, objptr
0c19c     56 7B 02 F6 | 	mov	result1, local04
0c1a0     01 7A 66 F0 | 	shl	result1, #1
0c1a4     56 7B 02 F1 | 	add	result1, local04
0c1a8     02 7A 66 F0 | 	shl	result1, #2
0c1ac     03 00 00 FF 
0c1b0     00 64 86 F1 | 	sub	objptr, ##1536
0c1b4     32 7B 02 F1 | 	add	result1, objptr
0c1b8     3D B1 62 FC | 	wrlong	local06, result1
0c1bc     03 00 00 FF 
0c1c0     00 64 06 F1 | 	add	objptr, ##1536
0c1c4     32 B1 02 FB | 	rdlong	local06, objptr
0c1c8     58 AD 02 F6 | 	mov	local04, local06
0c1cc     01 AC 66 F0 | 	shl	local04, #1
0c1d0     58 AD 02 F1 | 	add	local04, local06
0c1d4     02 AC 66 F0 | 	shl	local04, #2
0c1d8     03 00 00 FF 
0c1dc     00 64 86 F1 | 	sub	objptr, ##1536
0c1e0     32 AD 02 F1 | 	add	local04, objptr
0c1e4     04 AC 06 F1 | 	add	local04, #4
0c1e8     56 B3 62 FC | 	wrlong	local07, local04
0c1ec     03 00 00 FF 
0c1f0     00 64 06 F1 | 	add	objptr, ##1536
0c1f4     32 B3 02 FB | 	rdlong	local07, objptr
0c1f8     59 B1 02 F6 | 	mov	local06, local07
0c1fc     01 B0 66 F0 | 	shl	local06, #1
0c200     59 B1 02 F1 | 	add	local06, local07
0c204     02 B0 66 F0 | 	shl	local06, #2
0c208     03 00 00 FF 
0c20c     00 64 86 F1 | 	sub	objptr, ##1536
0c210     32 B1 02 F1 | 	add	local06, objptr
0c214     08 B0 06 F1 | 	add	local06, #8
0c218     58 AF 62 FC | 	wrlong	local05, local06
0c21c     03 00 00 FF 
0c220     00 64 06 F1 | 	add	objptr, ##1536
0c224     32 B1 02 FB | 	rdlong	local06, objptr
0c228     01 B0 06 F1 | 	add	local06, #1
0c22c     32 B1 62 FC | 	wrlong	local06, objptr
0c230     13 00 00 FF 
0c234     38 64 86 F1 | 	sub	objptr, ##9784
0c238     32 AD 02 FB | 	rdlong	local04, objptr
0c23c     03 AC 66 F0 | 	shl	local04, #3
0c240     02 00 00 FF 
0c244     38 64 86 F1 | 	sub	objptr, ##1080
0c248     32 AD 02 F1 | 	add	local04, objptr
0c24c     04 AC 06 F1 | 	add	local04, #4
0c250     56 AF 02 FB | 	rdlong	local05, local04
0c254     36 00 00 FF 
0c258     2C 64 86 F1 | 	sub	objptr, ##27692
0c25c     E4 FE 9F FD | 	jmp	#LR__1010
0c260                 | LR__1011
0c260                 | ' return 0
0c260     00 7A 06 F6 | 	mov	result1, #0
0c264                 | LR__1012
0c264     E7 F0 03 F6 | 	mov	ptra, fp
0c268     F2 00 A0 FD | 	call	#popregs_
0c26c                 | _addsub_ret
0c26c     2D 00 64 FD | 	ret
0c270                 | 
0c270                 | ' 
0c270                 | ' ' Third level operators : mul,div,shift,power
0c270                 | ' 
0c270                 | ' function muldiv() as ulong
0c270                 | _muldiv
0c270     07 CA 05 F6 | 	mov	COUNT_, #7
0c274     E8 00 A0 FD | 	call	#pushregs_
0c278                 | _muldiv_enter
0c278     00 A6 06 F6 | 	mov	local01, #0
0c27c     6C 01 B0 FD | 	call	#_getvalue
0c280                 | ' 
0c280                 | ' t3.result.uresult=0
0c280                 | ' err=getvalue() : if err>0 then return err     
0c280     01 7A 16 F2 | 	cmp	result1, #1 wc
0c284     58 01 90 3D |  if_ae	jmp	#LR__1022
0c288     38 00 00 FF 
0c28c     64 64 06 F1 | 	add	objptr, ##28772
0c290     32 AD 02 FB | 	rdlong	local04, objptr
0c294     03 AC 66 F0 | 	shl	local04, #3
0c298     02 00 00 FF 
0c29c     38 64 86 F1 | 	sub	objptr, ##1080
0c2a0     32 AD 02 F1 | 	add	local04, objptr
0c2a4     04 AC 06 F1 | 	add	local04, #4
0c2a8     56 AF 02 FB | 	rdlong	local05, local04
0c2ac                 | ' op = lparts(ct).token
0c2ac                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c2ac     36 00 00 FF 
0c2b0     2C 64 86 F1 | 	sub	objptr, ##27692
0c2b4                 | LR__1020
0c2b4     05 AE 0E F2 | 	cmp	local05, #5 wz
0c2b8     08 AE 0E 52 |  if_ne	cmp	local05, #8 wz
0c2bc     06 AE 0E 52 |  if_ne	cmp	local05, #6 wz
0c2c0     09 AE 0E 52 |  if_ne	cmp	local05, #9 wz
0c2c4     0A AE 0E 52 |  if_ne	cmp	local05, #10 wz
0c2c8     0B AE 0E 52 |  if_ne	cmp	local05, #11 wz
0c2cc     0C AE 0E 52 |  if_ne	cmp	local05, #12 wz
0c2d0     08 01 90 5D |  if_ne	jmp	#LR__1021
0c2d4     38 00 00 FF 
0c2d8     64 64 06 F1 | 	add	objptr, ##28772
0c2dc     32 AD 02 FB | 	rdlong	local04, objptr
0c2e0     01 AC 06 F1 | 	add	local04, #1
0c2e4     32 AD 62 FC | 	wrlong	local04, objptr
0c2e8     38 00 00 FF 
0c2ec     64 64 86 F1 | 	sub	objptr, ##28772
0c2f0     F8 00 B0 FD | 	call	#_getvalue
0c2f4                 | '   ct+=1
0c2f4                 | '   err=getvalue() :if err>0 then return err   
0c2f4     01 7A 16 F2 | 	cmp	result1, #1 wc
0c2f8     E4 00 90 3D |  if_ae	jmp	#LR__1022
0c2fc     57 AB 02 F6 | 	mov	local03, local05
0c300     53 B1 02 F6 | 	mov	local06, local01
0c304     54 B3 02 F6 | 	mov	local07, local02
0c308     55 AF 02 F6 | 	mov	local05, local03
0c30c     4B 00 00 FF 
0c310     9C 64 06 F1 | 	add	objptr, ##38556
0c314     32 AD 02 FB | 	rdlong	local04, objptr
0c318     56 7B 02 F6 | 	mov	result1, local04
0c31c     01 7A 66 F0 | 	shl	result1, #1
0c320     56 7B 02 F1 | 	add	result1, local04
0c324     02 7A 66 F0 | 	shl	result1, #2
0c328     03 00 00 FF 
0c32c     00 64 86 F1 | 	sub	objptr, ##1536
0c330     32 7B 02 F1 | 	add	result1, objptr
0c334     3D B1 62 FC | 	wrlong	local06, result1
0c338     03 00 00 FF 
0c33c     00 64 06 F1 | 	add	objptr, ##1536
0c340     32 B1 02 FB | 	rdlong	local06, objptr
0c344     58 AD 02 F6 | 	mov	local04, local06
0c348     01 AC 66 F0 | 	shl	local04, #1
0c34c     58 AD 02 F1 | 	add	local04, local06
0c350     02 AC 66 F0 | 	shl	local04, #2
0c354     03 00 00 FF 
0c358     00 64 86 F1 | 	sub	objptr, ##1536
0c35c     32 AD 02 F1 | 	add	local04, objptr
0c360     04 AC 06 F1 | 	add	local04, #4
0c364     56 B3 62 FC | 	wrlong	local07, local04
0c368     03 00 00 FF 
0c36c     00 64 06 F1 | 	add	objptr, ##1536
0c370     32 B3 02 FB | 	rdlong	local07, objptr
0c374     59 B1 02 F6 | 	mov	local06, local07
0c378     01 B0 66 F0 | 	shl	local06, #1
0c37c     59 B1 02 F1 | 	add	local06, local07
0c380     02 B0 66 F0 | 	shl	local06, #2
0c384     03 00 00 FF 
0c388     00 64 86 F1 | 	sub	objptr, ##1536
0c38c     32 B1 02 F1 | 	add	local06, objptr
0c390     08 B0 06 F1 | 	add	local06, #8
0c394     58 AF 62 FC | 	wrlong	local05, local06
0c398     03 00 00 FF 
0c39c     00 64 06 F1 | 	add	objptr, ##1536
0c3a0     32 B1 02 FB | 	rdlong	local06, objptr
0c3a4     01 B0 06 F1 | 	add	local06, #1
0c3a8     32 B1 62 FC | 	wrlong	local06, objptr
0c3ac     13 00 00 FF 
0c3b0     38 64 86 F1 | 	sub	objptr, ##9784
0c3b4     32 AD 02 FB | 	rdlong	local04, objptr
0c3b8     03 AC 66 F0 | 	shl	local04, #3
0c3bc     02 00 00 FF 
0c3c0     38 64 86 F1 | 	sub	objptr, ##1080
0c3c4     32 AD 02 F1 | 	add	local04, objptr
0c3c8     04 AC 06 F1 | 	add	local04, #4
0c3cc     56 AF 02 FB | 	rdlong	local05, local04
0c3d0     36 00 00 FF 
0c3d4     2C 64 86 F1 | 	sub	objptr, ##27692
0c3d8     D8 FE 9F FD | 	jmp	#LR__1020
0c3dc                 | LR__1021
0c3dc                 | ' return 0
0c3dc     00 7A 06 F6 | 	mov	result1, #0
0c3e0                 | LR__1022
0c3e0     E7 F0 03 F6 | 	mov	ptra, fp
0c3e4     F2 00 A0 FD | 	call	#popregs_
0c3e8                 | _muldiv_ret
0c3e8     2D 00 64 FD | 	ret
0c3ec                 | 
0c3ec                 | ' 
0c3ec                 | ' ' Get a value for operations
0c3ec                 | ' 
0c3ec                 | ' function getvalue()  as ulong
0c3ec                 | _getvalue
0c3ec     0B CA 05 F6 | 	mov	COUNT_, #11
0c3f0     E8 00 A0 FD | 	call	#pushregs_
0c3f4                 | _getvalue_enter
0c3f4     01 AC 06 F6 | 	mov	local04, #1
0c3f8     00 A6 06 F6 | 	mov	local01, #0
0c3fc     1D AA 06 F6 | 	mov	local03, #29
0c400     38 00 00 FF 
0c404     64 64 06 F1 | 	add	objptr, ##28772
0c408     32 97 02 FB | 	rdlong	arg03, objptr
0c40c     03 96 66 F0 | 	shl	arg03, #3
0c410     02 00 00 FF 
0c414     38 64 86 F1 | 	sub	objptr, ##1080
0c418     32 97 02 F1 | 	add	arg03, objptr
0c41c     04 96 06 F1 | 	add	arg03, #4
0c420     4B AF 02 FB | 	rdlong	local05, arg03
0c424                 | ' 
0c424                 | ' m=1											' for negative numbers
0c424                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c424                 | ' op=lparts(ct).token
0c424                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c424     02 AE 0E F2 | 	cmp	local05, #2 wz
0c428     36 00 00 FF 
0c42c     2C 64 86 F1 | 	sub	objptr, ##27692
0c430     38 00 90 5D |  if_ne	jmp	#LR__1030
0c434     01 AC 66 F6 | 	neg	local04, #1
0c438     38 00 00 FF 
0c43c     64 64 06 F1 | 	add	objptr, ##28772
0c440     32 AF 02 FB | 	rdlong	local05, objptr
0c444     01 AE 06 F1 | 	add	local05, #1
0c448     32 AF 62 FC | 	wrlong	local05, objptr
0c44c     03 AE 66 F0 | 	shl	local05, #3
0c450     02 00 00 FF 
0c454     38 64 86 F1 | 	sub	objptr, ##1080
0c458     32 AF 02 F1 | 	add	local05, objptr
0c45c     04 AE 06 F1 | 	add	local05, #4
0c460     57 AF 02 FB | 	rdlong	local05, local05
0c464     36 00 00 FF 
0c468     2C 64 86 F1 | 	sub	objptr, ##27692
0c46c                 | LR__1030
0c46c                 | ' select case op
0c46c     01 00 00 FF 
0c470     00 AE 0E F2 | 	cmp	local05, ##512 wz
0c474     44 00 90 AD |  if_e	jmp	#LR__1031
0c478     01 00 00 FF 
0c47c     01 AE 0E F2 | 	cmp	local05, ##513 wz
0c480     90 01 90 AD |  if_e	jmp	#LR__1034
0c484     01 00 00 FF 
0c488     02 AE 0E F2 | 	cmp	local05, ##514 wz
0c48c     44 04 90 AD |  if_e	jmp	#LR__1041
0c490     01 00 00 FF 
0c494     03 AE 0E F2 | 	cmp	local05, ##515 wz
0c498     A8 05 90 AD |  if_e	jmp	#LR__1044
0c49c     2C AE 0E F2 | 	cmp	local05, #44 wz
0c4a0     78 07 90 AD |  if_e	jmp	#LR__1049
0c4a4     01 00 00 FF 
0c4a8     04 AE 0E F2 | 	cmp	local05, ##516 wz
0c4ac     70 08 90 AD |  if_e	jmp	#LR__1050
0c4b0     15 AE 0E F2 | 	cmp	local05, #21 wz
0c4b4     98 08 90 AD |  if_e	jmp	#LR__1051
0c4b8     10 09 90 FD | 	jmp	#LR__1052
0c4bc                 | LR__1031
0c4bc                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c4bc     01 AC 0E F2 | 	cmp	local04, #1 wz
0c4c0     3C 00 90 5D |  if_ne	jmp	#LR__1032
0c4c4     38 00 00 FF 
0c4c8     64 64 06 F1 | 	add	objptr, ##28772
0c4cc     32 AF 02 FB | 	rdlong	local05, objptr
0c4d0     03 AE 66 F0 | 	shl	local05, #3
0c4d4     02 00 00 FF 
0c4d8     38 64 86 F1 | 	sub	objptr, ##1080
0c4dc     32 AF 02 F1 | 	add	local05, objptr
0c4e0     57 93 02 FB | 	rdlong	arg01, local05
0c4e4     00 94 06 F6 | 	mov	arg02, #0
0c4e8     36 00 00 FF 
0c4ec     2C 64 86 F1 | 	sub	objptr, ##27692
0c4f0     3C B2 B1 FD | 	call	#__system____builtin_atoi
0c4f4     3D AD 02 FD | 	qmul	local04, result1
0c4f8     18 A6 62 FD | 	getqx	local01
0c4fc     1C AA 06 F6 | 	mov	local03, #28
0c500                 | LR__1032
0c500                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c500     FF FF 7F FF 
0c504     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0c508     3C 00 90 5D |  if_ne	jmp	#LR__1033
0c50c     38 00 00 FF 
0c510     64 64 06 F1 | 	add	objptr, ##28772
0c514     32 AF 02 FB | 	rdlong	local05, objptr
0c518     03 AE 66 F0 | 	shl	local05, #3
0c51c     02 00 00 FF 
0c520     38 64 86 F1 | 	sub	objptr, ##1080
0c524     32 AF 02 F1 | 	add	local05, objptr
0c528     57 93 02 FB | 	rdlong	arg01, local05
0c52c     00 94 06 F6 | 	mov	arg02, #0
0c530     36 00 00 FF 
0c534     2C 64 86 F1 | 	sub	objptr, ##27692
0c538     F4 B1 B1 FD | 	call	#__system____builtin_atoi
0c53c     3D AD 02 FD | 	qmul	local04, result1
0c540     18 A6 62 FD | 	getqx	local01
0c544     1C AA 06 F6 | 	mov	local03, #28
0c548                 | LR__1033
0c548     53 B1 02 F6 | 	mov	local06, local01
0c54c     54 B3 02 F6 | 	mov	local07, local02
0c550     55 AF 02 F6 | 	mov	local05, local03
0c554     4B 00 00 FF 
0c558     9C 64 06 F1 | 	add	objptr, ##38556
0c55c     32 A7 02 FB | 	rdlong	local01, objptr
0c560     53 AD 02 F6 | 	mov	local04, local01
0c564     01 AC 66 F0 | 	shl	local04, #1
0c568     53 AD 02 F1 | 	add	local04, local01
0c56c     02 AC 66 F0 | 	shl	local04, #2
0c570     03 00 00 FF 
0c574     00 64 86 F1 | 	sub	objptr, ##1536
0c578     32 AD 02 F1 | 	add	local04, objptr
0c57c     56 B1 62 FC | 	wrlong	local06, local04
0c580     03 00 00 FF 
0c584     00 64 06 F1 | 	add	objptr, ##1536
0c588     32 B1 02 FB | 	rdlong	local06, objptr
0c58c     58 A7 02 F6 | 	mov	local01, local06
0c590     01 A6 66 F0 | 	shl	local01, #1
0c594     58 A7 02 F1 | 	add	local01, local06
0c598     02 A6 66 F0 | 	shl	local01, #2
0c59c     03 00 00 FF 
0c5a0     00 64 86 F1 | 	sub	objptr, ##1536
0c5a4     32 A7 02 F1 | 	add	local01, objptr
0c5a8     04 A6 06 F1 | 	add	local01, #4
0c5ac     53 B3 62 FC | 	wrlong	local07, local01
0c5b0     03 00 00 FF 
0c5b4     00 64 06 F1 | 	add	objptr, ##1536
0c5b8     32 B3 02 FB | 	rdlong	local07, objptr
0c5bc     59 B1 02 F6 | 	mov	local06, local07
0c5c0     01 B0 66 F0 | 	shl	local06, #1
0c5c4     59 B1 02 F1 | 	add	local06, local07
0c5c8     02 B0 66 F0 | 	shl	local06, #2
0c5cc     03 00 00 FF 
0c5d0     00 64 86 F1 | 	sub	objptr, ##1536
0c5d4     32 B1 02 F1 | 	add	local06, objptr
0c5d8     08 B0 06 F1 | 	add	local06, #8
0c5dc     58 AF 62 FC | 	wrlong	local05, local06
0c5e0     03 00 00 FF 
0c5e4     00 64 06 F1 | 	add	objptr, ##1536
0c5e8     32 B1 02 FB | 	rdlong	local06, objptr
0c5ec     01 B0 06 F1 | 	add	local06, #1
0c5f0     32 B1 62 FC | 	wrlong	local06, objptr
0c5f4     13 00 00 FF 
0c5f8     38 64 86 F1 | 	sub	objptr, ##9784
0c5fc     32 B1 02 FB | 	rdlong	local06, objptr
0c600     01 B0 06 F1 | 	add	local06, #1
0c604     32 B1 62 FC | 	wrlong	local06, objptr
0c608     38 00 00 FF 
0c60c     64 64 86 F1 | 	sub	objptr, ##28772
0c610     E4 07 90 FD | 	jmp	#LR__1053
0c614                 | LR__1034
0c614                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c614     38 00 00 FF 
0c618     64 64 06 F1 | 	add	objptr, ##28772
0c61c     32 97 02 FB | 	rdlong	arg03, objptr
0c620     03 96 66 F0 | 	shl	arg03, #3
0c624     02 00 00 FF 
0c628     38 64 86 F1 | 	sub	objptr, ##1080
0c62c     32 97 02 F1 | 	add	arg03, objptr
0c630     4B 93 02 FB | 	rdlong	arg01, arg03
0c634     01 94 06 F6 | 	mov	arg02, #1
0c638     36 00 00 FF 
0c63c     2C 64 86 F1 | 	sub	objptr, ##27692
0c640     40 9C B1 FD | 	call	#__system__Left_S
0c644     3D 93 02 F6 | 	mov	arg01, result1
0c648     96 01 00 FF 
0c64c     A5 94 06 F6 | 	mov	arg02, ##@LR__5938
0c650     B0 83 B1 FD | 	call	#__system___string_cmp
0c654     00 7A 0E F2 | 	cmp	result1, #0 wz
0c658     94 00 90 5D |  if_ne	jmp	#LR__1037
0c65c     38 00 00 FF 
0c660     64 64 06 F1 | 	add	objptr, ##28772
0c664     32 B3 02 FB | 	rdlong	local07, objptr
0c668     59 B1 02 F6 | 	mov	local06, local07
0c66c     03 B0 66 F0 | 	shl	local06, #3
0c670     02 00 00 FF 
0c674     38 64 86 F1 | 	sub	objptr, ##1080
0c678     32 B1 02 F1 | 	add	local06, objptr
0c67c     96 01 00 FF 
0c680     A7 AE 06 F6 | 	mov	local05, ##@LR__5939
0c684     03 B2 66 F0 | 	shl	local07, #3
0c688     32 B3 02 F1 | 	add	local07, objptr
0c68c     59 B3 02 FB | 	rdlong	local07, local07
0c690     02 00 00 FF 
0c694     38 64 06 F1 | 	add	objptr, ##1080
0c698     32 A7 02 FB | 	rdlong	local01, objptr
0c69c     03 A6 66 F0 | 	shl	local01, #3
0c6a0     02 00 00 FF 
0c6a4     38 64 86 F1 | 	sub	objptr, ##1080
0c6a8     32 A7 02 F1 | 	add	local01, objptr
0c6ac     53 93 02 FB | 	rdlong	arg01, local01
0c6b0     36 00 00 FF 
0c6b4     2C 64 86 F1 | 	sub	objptr, ##27692
0c6b8     49 B5 02 F6 | 	mov	local08, arg01
0c6bc     D7 06 48 FB | 	callpa	#(@LR__1036-@LR__1035)>>2,fcache_load_ptr_
0c6c0                 | LR__1035
0c6c0     5A 7B CA FA | 	rdbyte	result1, local08 wz
0c6c4     01 B4 06 51 |  if_ne	add	local08, #1
0c6c8     F4 FF 9F 5D |  if_ne	jmp	#LR__1035
0c6cc                 | LR__1036
0c6cc     49 B5 82 F1 | 	sub	local08, arg01
0c6d0     5A 95 02 F6 | 	mov	arg02, local08
0c6d4     01 94 86 F1 | 	sub	arg02, #1
0c6d8     59 93 02 F6 | 	mov	arg01, local07
0c6dc     2C 9C B1 FD | 	call	#__system__Right_S
0c6e0     3D 95 02 F6 | 	mov	arg02, result1
0c6e4     57 93 02 F6 | 	mov	arg01, local05
0c6e8     4C 83 B1 FD | 	call	#__system___string_concat
0c6ec     58 7B 62 FC | 	wrlong	result1, local06
0c6f0                 | LR__1037
0c6f0                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c6f0     38 00 00 FF 
0c6f4     64 64 06 F1 | 	add	objptr, ##28772
0c6f8     32 97 02 FB | 	rdlong	arg03, objptr
0c6fc     03 96 66 F0 | 	shl	arg03, #3
0c700     02 00 00 FF 
0c704     38 64 86 F1 | 	sub	objptr, ##1080
0c708     32 97 02 F1 | 	add	arg03, objptr
0c70c     4B 93 02 FB | 	rdlong	arg01, arg03
0c710     01 94 06 F6 | 	mov	arg02, #1
0c714     36 00 00 FF 
0c718     2C 64 86 F1 | 	sub	objptr, ##27692
0c71c     64 9B B1 FD | 	call	#__system__Left_S
0c720     3D 93 02 F6 | 	mov	arg01, result1
0c724     96 01 00 FF 
0c728     AA 94 06 F6 | 	mov	arg02, ##@LR__5940
0c72c     D4 82 B1 FD | 	call	#__system___string_cmp
0c730     00 7A 0E F2 | 	cmp	result1, #0 wz
0c734     94 00 90 5D |  if_ne	jmp	#LR__1040
0c738     38 00 00 FF 
0c73c     64 64 06 F1 | 	add	objptr, ##28772
0c740     32 B3 02 FB | 	rdlong	local07, objptr
0c744     59 B1 02 F6 | 	mov	local06, local07
0c748     03 B0 66 F0 | 	shl	local06, #3
0c74c     02 00 00 FF 
0c750     38 64 86 F1 | 	sub	objptr, ##1080
0c754     32 B1 02 F1 | 	add	local06, objptr
0c758     96 01 00 FF 
0c75c     AC AE 06 F6 | 	mov	local05, ##@LR__5941
0c760     03 B2 66 F0 | 	shl	local07, #3
0c764     32 B3 02 F1 | 	add	local07, objptr
0c768     59 B3 02 FB | 	rdlong	local07, local07
0c76c     02 00 00 FF 
0c770     38 64 06 F1 | 	add	objptr, ##1080
0c774     32 A7 02 FB | 	rdlong	local01, objptr
0c778     03 A6 66 F0 | 	shl	local01, #3
0c77c     02 00 00 FF 
0c780     38 64 86 F1 | 	sub	objptr, ##1080
0c784     32 A7 02 F1 | 	add	local01, objptr
0c788     53 93 02 FB | 	rdlong	arg01, local01
0c78c     36 00 00 FF 
0c790     2C 64 86 F1 | 	sub	objptr, ##27692
0c794     49 B5 02 F6 | 	mov	local08, arg01
0c798     D7 06 48 FB | 	callpa	#(@LR__1039-@LR__1038)>>2,fcache_load_ptr_
0c79c                 | LR__1038
0c79c     5A 7B CA FA | 	rdbyte	result1, local08 wz
0c7a0     01 B4 06 51 |  if_ne	add	local08, #1
0c7a4     F4 FF 9F 5D |  if_ne	jmp	#LR__1038
0c7a8                 | LR__1039
0c7a8     49 B5 82 F1 | 	sub	local08, arg01
0c7ac     5A 95 02 F6 | 	mov	arg02, local08
0c7b0     01 94 86 F1 | 	sub	arg02, #1
0c7b4     59 93 02 F6 | 	mov	arg01, local07
0c7b8     50 9B B1 FD | 	call	#__system__Right_S
0c7bc     3D 95 02 F6 | 	mov	arg02, result1
0c7c0     57 93 02 F6 | 	mov	arg01, local05
0c7c4     70 82 B1 FD | 	call	#__system___string_concat
0c7c8     58 7B 62 FC | 	wrlong	result1, local06
0c7cc                 | LR__1040
0c7cc     38 00 00 FF 
0c7d0     64 64 06 F1 | 	add	objptr, ##28772
0c7d4     32 B1 02 FB | 	rdlong	local06, objptr
0c7d8     03 B0 66 F0 | 	shl	local06, #3
0c7dc     02 00 00 FF 
0c7e0     38 64 86 F1 | 	sub	objptr, ##1080
0c7e4     32 B1 02 F1 | 	add	local06, objptr
0c7e8     58 93 02 FB | 	rdlong	arg01, local06
0c7ec     00 94 06 F6 | 	mov	arg02, #0
0c7f0     36 00 00 FF 
0c7f4     2C 64 86 F1 | 	sub	objptr, ##27692
0c7f8     34 AF B1 FD | 	call	#__system____builtin_atoi
0c7fc     3D AD 02 FD | 	qmul	local04, result1
0c800     4B 00 00 FF 
0c804     9C 64 06 F1 | 	add	objptr, ##38556
0c808     32 B1 02 FB | 	rdlong	local06, objptr
0c80c     58 B7 02 F6 | 	mov	local09, local06
0c810     01 B6 66 F0 | 	shl	local09, #1
0c814     58 B7 02 F1 | 	add	local09, local06
0c818     02 B6 66 F0 | 	shl	local09, #2
0c81c     03 00 00 FF 
0c820     00 64 86 F1 | 	sub	objptr, ##1536
0c824     32 B7 02 F1 | 	add	local09, objptr
0c828     03 00 00 FF 
0c82c     00 64 06 F1 | 	add	objptr, ##1536
0c830     18 A6 62 FD | 	getqx	local01
0c834     1C AA 06 F6 | 	mov	local03, #28
0c838     53 B1 02 F6 | 	mov	local06, local01
0c83c     54 B3 02 F6 | 	mov	local07, local02
0c840     5B B1 62 FC | 	wrlong	local06, local09
0c844     55 B7 02 F6 | 	mov	local09, local03
0c848     32 B1 02 FB | 	rdlong	local06, objptr
0c84c     58 AF 02 F6 | 	mov	local05, local06
0c850     01 AE 66 F0 | 	shl	local05, #1
0c854     58 AF 02 F1 | 	add	local05, local06
0c858     02 AE 66 F0 | 	shl	local05, #2
0c85c     03 00 00 FF 
0c860     00 64 86 F1 | 	sub	objptr, ##1536
0c864     32 AF 02 F1 | 	add	local05, objptr
0c868     04 AE 06 F1 | 	add	local05, #4
0c86c     57 B3 62 FC | 	wrlong	local07, local05
0c870     03 00 00 FF 
0c874     00 64 06 F1 | 	add	objptr, ##1536
0c878     32 B3 02 FB | 	rdlong	local07, objptr
0c87c     59 B1 02 F6 | 	mov	local06, local07
0c880     01 B0 66 F0 | 	shl	local06, #1
0c884     59 B1 02 F1 | 	add	local06, local07
0c888     02 B0 66 F0 | 	shl	local06, #2
0c88c     03 00 00 FF 
0c890     00 64 86 F1 | 	sub	objptr, ##1536
0c894     32 B1 02 F1 | 	add	local06, objptr
0c898     08 B0 06 F1 | 	add	local06, #8
0c89c     58 B7 62 FC | 	wrlong	local09, local06
0c8a0     03 00 00 FF 
0c8a4     00 64 06 F1 | 	add	objptr, ##1536
0c8a8     32 B1 02 FB | 	rdlong	local06, objptr
0c8ac     01 B0 06 F1 | 	add	local06, #1
0c8b0     32 B1 62 FC | 	wrlong	local06, objptr
0c8b4     13 00 00 FF 
0c8b8     38 64 86 F1 | 	sub	objptr, ##9784
0c8bc     32 B1 02 FB | 	rdlong	local06, objptr
0c8c0     01 B0 06 F1 | 	add	local06, #1
0c8c4     32 B1 62 FC | 	wrlong	local06, objptr
0c8c8     38 00 00 FF 
0c8cc     64 64 86 F1 | 	sub	objptr, ##28772
0c8d0     24 05 90 FD | 	jmp	#LR__1053
0c8d4                 | LR__1041
0c8d4                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0c8d4     01 AC 0E F2 | 	cmp	local04, #1 wz
0c8d8     48 00 90 5D |  if_ne	jmp	#LR__1042
0c8dc     00 C0 1F FF 
0c8e0     00 B0 06 F6 | 	mov	local06, ##1065353216
0c8e4     38 00 00 FF 
0c8e8     64 64 06 F1 | 	add	objptr, ##28772
0c8ec     32 B7 02 FB | 	rdlong	local09, objptr
0c8f0     03 B6 66 F0 | 	shl	local09, #3
0c8f4     02 00 00 FF 
0c8f8     38 64 86 F1 | 	sub	objptr, ##1080
0c8fc     32 B7 02 F1 | 	add	local09, objptr
0c900     5B 93 02 FB | 	rdlong	arg01, local09
0c904     36 00 00 FF 
0c908     2C 64 86 F1 | 	sub	objptr, ##27692
0c90c     B8 AF B1 FD | 	call	#__system____builtin_atof
0c910     3D 95 02 F6 | 	mov	arg02, result1
0c914     58 93 02 F6 | 	mov	arg01, local06
0c918     90 A7 B1 FD | 	call	#__system___float_mul
0c91c     3D A7 02 F6 | 	mov	local01, result1
0c920     1E AA 06 F6 | 	mov	local03, #30
0c924                 | LR__1042
0c924                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0c924     FF FF 7F FF 
0c928     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0c92c     48 00 90 5D |  if_ne	jmp	#LR__1043
0c930     00 C0 5F FF 
0c934     00 B0 06 F6 | 	mov	local06, ##-1082130432
0c938     38 00 00 FF 
0c93c     64 64 06 F1 | 	add	objptr, ##28772
0c940     32 B7 02 FB | 	rdlong	local09, objptr
0c944     03 B6 66 F0 | 	shl	local09, #3
0c948     02 00 00 FF 
0c94c     38 64 86 F1 | 	sub	objptr, ##1080
0c950     32 B7 02 F1 | 	add	local09, objptr
0c954     5B 93 02 FB | 	rdlong	arg01, local09
0c958     36 00 00 FF 
0c95c     2C 64 86 F1 | 	sub	objptr, ##27692
0c960     64 AF B1 FD | 	call	#__system____builtin_atof
0c964     3D 95 02 F6 | 	mov	arg02, result1
0c968     58 93 02 F6 | 	mov	arg01, local06
0c96c     3C A7 B1 FD | 	call	#__system___float_mul
0c970     3D A7 02 F6 | 	mov	local01, result1
0c974     1E AA 06 F6 | 	mov	local03, #30
0c978                 | LR__1043
0c978     53 B1 02 F6 | 	mov	local06, local01
0c97c     54 B3 02 F6 | 	mov	local07, local02
0c980     55 AF 02 F6 | 	mov	local05, local03
0c984     4B 00 00 FF 
0c988     9C 64 06 F1 | 	add	objptr, ##38556
0c98c     32 A7 02 FB | 	rdlong	local01, objptr
0c990     53 B7 02 F6 | 	mov	local09, local01
0c994     01 B6 66 F0 | 	shl	local09, #1
0c998     53 B7 02 F1 | 	add	local09, local01
0c99c     02 B6 66 F0 | 	shl	local09, #2
0c9a0     03 00 00 FF 
0c9a4     00 64 86 F1 | 	sub	objptr, ##1536
0c9a8     32 B7 02 F1 | 	add	local09, objptr
0c9ac     5B B1 62 FC | 	wrlong	local06, local09
0c9b0     03 00 00 FF 
0c9b4     00 64 06 F1 | 	add	objptr, ##1536
0c9b8     32 B7 02 FB | 	rdlong	local09, objptr
0c9bc     5B B1 02 F6 | 	mov	local06, local09
0c9c0     01 B0 66 F0 | 	shl	local06, #1
0c9c4     5B B1 02 F1 | 	add	local06, local09
0c9c8     02 B0 66 F0 | 	shl	local06, #2
0c9cc     03 00 00 FF 
0c9d0     00 64 86 F1 | 	sub	objptr, ##1536
0c9d4     32 B1 02 F1 | 	add	local06, objptr
0c9d8     04 B0 06 F1 | 	add	local06, #4
0c9dc     58 B3 62 FC | 	wrlong	local07, local06
0c9e0     03 00 00 FF 
0c9e4     00 64 06 F1 | 	add	objptr, ##1536
0c9e8     32 B7 02 FB | 	rdlong	local09, objptr
0c9ec     5B B3 02 F6 | 	mov	local07, local09
0c9f0     01 B2 66 F0 | 	shl	local07, #1
0c9f4     5B B3 02 F1 | 	add	local07, local09
0c9f8     02 B2 66 F0 | 	shl	local07, #2
0c9fc     03 00 00 FF 
0ca00     00 64 86 F1 | 	sub	objptr, ##1536
0ca04     32 B3 02 F1 | 	add	local07, objptr
0ca08     08 B2 06 F1 | 	add	local07, #8
0ca0c     59 AF 62 FC | 	wrlong	local05, local07
0ca10     03 00 00 FF 
0ca14     00 64 06 F1 | 	add	objptr, ##1536
0ca18     32 B1 02 FB | 	rdlong	local06, objptr
0ca1c     01 B0 06 F1 | 	add	local06, #1
0ca20     32 B1 62 FC | 	wrlong	local06, objptr
0ca24     13 00 00 FF 
0ca28     38 64 86 F1 | 	sub	objptr, ##9784
0ca2c     32 B1 02 FB | 	rdlong	local06, objptr
0ca30     01 B0 06 F1 | 	add	local06, #1
0ca34     32 B1 62 FC | 	wrlong	local06, objptr
0ca38     38 00 00 FF 
0ca3c     64 64 86 F1 | 	sub	objptr, ##28772
0ca40     B4 03 90 FD | 	jmp	#LR__1053
0ca44                 | LR__1044
0ca44     38 00 00 FF 
0ca48     64 64 06 F1 | 	add	objptr, ##28772
0ca4c     32 97 02 FB | 	rdlong	arg03, objptr
0ca50     03 96 66 F0 | 	shl	arg03, #3
0ca54     02 00 00 FF 
0ca58     38 64 86 F1 | 	sub	objptr, ##1080
0ca5c     32 97 02 F1 | 	add	arg03, objptr
0ca60     4B 93 02 FB | 	rdlong	arg01, arg03
0ca64     36 00 00 FF 
0ca68     2C 64 86 F1 | 	sub	objptr, ##27692
0ca6c     49 B5 02 F6 | 	mov	local08, arg01
0ca70     D7 06 48 FB | 	callpa	#(@LR__1046-@LR__1045)>>2,fcache_load_ptr_
0ca74                 | LR__1045
0ca74     5A 7B CA FA | 	rdbyte	result1, local08 wz
0ca78     01 B4 06 51 |  if_ne	add	local08, #1
0ca7c     F4 FF 9F 5D |  if_ne	jmp	#LR__1045
0ca80                 | LR__1046
0ca80     49 B5 82 F1 | 	sub	local08, arg01
0ca84     5A 7B 02 F6 | 	mov	result1, local08
0ca88     53 00 00 FF 
0ca8c     48 65 06 F1 | 	add	objptr, ##42824
0ca90     32 7B 62 FC | 	wrlong	result1, objptr
0ca94     58 64 86 F1 | 	sub	objptr, #88
0ca98     32 93 02 FB | 	rdlong	arg01, objptr
0ca9c     3D 93 82 F1 | 	sub	arg01, result1
0caa0     04 92 86 F1 | 	sub	arg01, #4
0caa4     03 92 26 F5 | 	andn	arg01, #3
0caa8     32 93 62 FC | 	wrlong	arg01, objptr
0caac     58 64 06 F1 | 	add	objptr, #88
0cab0     32 95 02 FB | 	rdlong	arg02, objptr
0cab4     53 00 00 FF 
0cab8     48 65 86 F1 | 	sub	objptr, ##42824
0cabc     3C 47 B1 FD | 	call	#_pslpoke
0cac0                 | '     pslpoke memtop,l
0cac0                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0cac0     01 B8 06 F6 | 	mov	local10, #1
0cac4     53 00 00 FF 
0cac8     48 65 06 F1 | 	add	objptr, ##42824
0cacc     32 BB 02 FB | 	rdlong	local11, objptr
0cad0     53 00 00 FF 
0cad4     48 65 86 F1 | 	sub	objptr, ##42824
0cad8     01 BA 06 F1 | 	add	local11, #1
0cadc                 | LR__1047
0cadc     5D B9 52 F2 | 	cmps	local10, local11 wc
0cae0     5C 00 90 3D |  if_ae	jmp	#LR__1048
0cae4     53 00 00 FF 
0cae8     F0 64 06 F1 | 	add	objptr, ##42736
0caec     32 B3 02 FB | 	rdlong	local07, objptr
0caf0     03 B2 06 F1 | 	add	local07, #3
0caf4     5C B3 02 F1 | 	add	local07, local10
0caf8     1B 00 00 FF 
0cafc     8C 64 86 F1 | 	sub	objptr, ##13964
0cb00     32 B7 02 FB | 	rdlong	local09, objptr
0cb04     03 B6 66 F0 | 	shl	local09, #3
0cb08     02 00 00 FF 
0cb0c     38 64 86 F1 | 	sub	objptr, ##1080
0cb10     32 B7 02 F1 | 	add	local09, objptr
0cb14     5B 93 02 FB | 	rdlong	arg01, local09
0cb18     5C 95 02 F6 | 	mov	arg02, local10
0cb1c     01 96 06 F6 | 	mov	arg03, #1
0cb20     36 00 00 FF 
0cb24     2C 64 86 F1 | 	sub	objptr, ##27692
0cb28     70 98 B1 FD | 	call	#__system__Mid_S
0cb2c     3D 95 C2 FA | 	rdbyte	arg02, result1
0cb30     59 93 02 F6 | 	mov	arg01, local07
0cb34     54 47 B1 FD | 	call	#_pspoke
0cb38     01 B8 06 F1 | 	add	local10, #1
0cb3c     9C FF 9F FD | 	jmp	#LR__1047
0cb40                 | LR__1048
0cb40     53 00 00 FF 
0cb44     F0 64 06 F1 | 	add	objptr, ##42736
0cb48     32 A7 02 FB | 	rdlong	local01, objptr
0cb4c     2B AA 06 F6 | 	mov	local03, #43
0cb50     53 B1 02 F6 | 	mov	local06, local01
0cb54     54 B3 02 F6 | 	mov	local07, local02
0cb58     55 BB 02 F6 | 	mov	local11, local03
0cb5c     08 00 00 FF 
0cb60     54 64 86 F1 | 	sub	objptr, ##4180
0cb64     32 B9 02 FB | 	rdlong	local10, objptr
0cb68     5C B7 02 F6 | 	mov	local09, local10
0cb6c     01 B6 66 F0 | 	shl	local09, #1
0cb70     5C B7 02 F1 | 	add	local09, local10
0cb74     02 B6 66 F0 | 	shl	local09, #2
0cb78     03 00 00 FF 
0cb7c     00 64 86 F1 | 	sub	objptr, ##1536
0cb80     32 B7 02 F1 | 	add	local09, objptr
0cb84     5B B1 62 FC | 	wrlong	local06, local09
0cb88     03 00 00 FF 
0cb8c     00 64 06 F1 | 	add	objptr, ##1536
0cb90     32 B9 02 FB | 	rdlong	local10, objptr
0cb94     5C B7 02 F6 | 	mov	local09, local10
0cb98     01 B6 66 F0 | 	shl	local09, #1
0cb9c     5C B7 02 F1 | 	add	local09, local10
0cba0     02 B6 66 F0 | 	shl	local09, #2
0cba4     03 00 00 FF 
0cba8     00 64 86 F1 | 	sub	objptr, ##1536
0cbac     32 B7 02 F1 | 	add	local09, objptr
0cbb0     04 B6 06 F1 | 	add	local09, #4
0cbb4     5B B3 62 FC | 	wrlong	local07, local09
0cbb8     03 00 00 FF 
0cbbc     00 64 06 F1 | 	add	objptr, ##1536
0cbc0     32 B9 02 FB | 	rdlong	local10, objptr
0cbc4     5C B7 02 F6 | 	mov	local09, local10
0cbc8     01 B6 66 F0 | 	shl	local09, #1
0cbcc     5C B7 02 F1 | 	add	local09, local10
0cbd0     02 B6 66 F0 | 	shl	local09, #2
0cbd4     03 00 00 FF 
0cbd8     00 64 86 F1 | 	sub	objptr, ##1536
0cbdc     32 B7 02 F1 | 	add	local09, objptr
0cbe0     08 B6 06 F1 | 	add	local09, #8
0cbe4     5B BB 62 FC | 	wrlong	local11, local09
0cbe8     03 00 00 FF 
0cbec     00 64 06 F1 | 	add	objptr, ##1536
0cbf0     32 B1 02 FB | 	rdlong	local06, objptr
0cbf4     01 B0 06 F1 | 	add	local06, #1
0cbf8     32 B1 62 FC | 	wrlong	local06, objptr
0cbfc     13 00 00 FF 
0cc00     38 64 86 F1 | 	sub	objptr, ##9784
0cc04     32 B1 02 FB | 	rdlong	local06, objptr
0cc08     01 B0 06 F1 | 	add	local06, #1
0cc0c     32 B1 62 FC | 	wrlong	local06, objptr
0cc10     38 00 00 FF 
0cc14     64 64 86 F1 | 	sub	objptr, ##28772
0cc18     DC 01 90 FD | 	jmp	#LR__1053
0cc1c                 | LR__1049
0cc1c     2C AA 06 F6 | 	mov	local03, #44
0cc20     38 00 00 FF 
0cc24     64 64 06 F1 | 	add	objptr, ##28772
0cc28     32 B1 02 FB | 	rdlong	local06, objptr
0cc2c     03 B0 66 F0 | 	shl	local06, #3
0cc30     02 00 00 FF 
0cc34     38 64 86 F1 | 	sub	objptr, ##1080
0cc38     32 B1 02 F1 | 	add	local06, objptr
0cc3c     58 93 02 FB | 	rdlong	arg01, local06
0cc40     00 94 06 F6 | 	mov	arg02, #0
0cc44     36 00 00 FF 
0cc48     2C 64 86 F1 | 	sub	objptr, ##27692
0cc4c     E0 AA B1 FD | 	call	#__system____builtin_atoi
0cc50     3D A7 02 F6 | 	mov	local01, result1
0cc54     53 B1 02 F6 | 	mov	local06, local01
0cc58     54 B3 02 F6 | 	mov	local07, local02
0cc5c     55 BB 02 F6 | 	mov	local11, local03
0cc60     4B 00 00 FF 
0cc64     9C 64 06 F1 | 	add	objptr, ##38556
0cc68     32 B9 02 FB | 	rdlong	local10, objptr
0cc6c     5C B7 02 F6 | 	mov	local09, local10
0cc70     01 B6 66 F0 | 	shl	local09, #1
0cc74     5C B7 02 F1 | 	add	local09, local10
0cc78     02 B6 66 F0 | 	shl	local09, #2
0cc7c     03 00 00 FF 
0cc80     00 64 86 F1 | 	sub	objptr, ##1536
0cc84     32 B7 02 F1 | 	add	local09, objptr
0cc88     5B B1 62 FC | 	wrlong	local06, local09
0cc8c     03 00 00 FF 
0cc90     00 64 06 F1 | 	add	objptr, ##1536
0cc94     32 B9 02 FB | 	rdlong	local10, objptr
0cc98     5C B7 02 F6 | 	mov	local09, local10
0cc9c     01 B6 66 F0 | 	shl	local09, #1
0cca0     5C B7 02 F1 | 	add	local09, local10
0cca4     02 B6 66 F0 | 	shl	local09, #2
0cca8     03 00 00 FF 
0ccac     00 64 86 F1 | 	sub	objptr, ##1536
0ccb0     32 B7 02 F1 | 	add	local09, objptr
0ccb4     04 B6 06 F1 | 	add	local09, #4
0ccb8     5B B3 62 FC | 	wrlong	local07, local09
0ccbc     03 00 00 FF 
0ccc0     00 64 06 F1 | 	add	objptr, ##1536
0ccc4     32 B9 02 FB | 	rdlong	local10, objptr
0ccc8     5C B7 02 F6 | 	mov	local09, local10
0cccc     01 B6 66 F0 | 	shl	local09, #1
0ccd0     5C B7 02 F1 | 	add	local09, local10
0ccd4     02 B6 66 F0 | 	shl	local09, #2
0ccd8     03 00 00 FF 
0ccdc     00 64 86 F1 | 	sub	objptr, ##1536
0cce0     32 B7 02 F1 | 	add	local09, objptr
0cce4     08 B6 06 F1 | 	add	local09, #8
0cce8     5B BB 62 FC | 	wrlong	local11, local09
0ccec     03 00 00 FF 
0ccf0     00 64 06 F1 | 	add	objptr, ##1536
0ccf4     32 B1 02 FB | 	rdlong	local06, objptr
0ccf8     01 B0 06 F1 | 	add	local06, #1
0ccfc     32 B1 62 FC | 	wrlong	local06, objptr
0cd00     13 00 00 FF 
0cd04     38 64 86 F1 | 	sub	objptr, ##9784
0cd08     32 B1 02 FB | 	rdlong	local06, objptr
0cd0c     01 B0 06 F1 | 	add	local06, #1
0cd10     32 B1 62 FC | 	wrlong	local06, objptr
0cd14     38 00 00 FF 
0cd18     64 64 86 F1 | 	sub	objptr, ##28772
0cd1c     D8 00 90 FD | 	jmp	#LR__1053
0cd20                 | LR__1050
0cd20     56 93 02 F6 | 	mov	arg01, local04
0cd24     24 04 B0 FD | 	call	#_getvar
0cd28     38 00 00 FF 
0cd2c     64 64 06 F1 | 	add	objptr, ##28772
0cd30     32 B1 02 FB | 	rdlong	local06, objptr
0cd34     01 B0 06 F1 | 	add	local06, #1
0cd38     32 B1 62 FC | 	wrlong	local06, objptr
0cd3c     38 00 00 FF 
0cd40     64 64 86 F1 | 	sub	objptr, ##28772
0cd44                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0cd44     01 7A 56 F2 | 	cmps	result1, #1 wc
0cd48     B0 00 90 3D |  if_ae	jmp	#LR__1054
0cd4c     A8 00 90 FD | 	jmp	#LR__1053
0cd50                 | LR__1051
0cd50     38 00 00 FF 
0cd54     64 64 06 F1 | 	add	objptr, ##28772
0cd58     32 B1 02 FB | 	rdlong	local06, objptr
0cd5c     01 B0 06 F1 | 	add	local06, #1
0cd60     32 B1 62 FC | 	wrlong	local06, objptr
0cd64     38 00 00 FF 
0cd68     64 64 86 F1 | 	sub	objptr, ##28772
0cd6c     20 F1 BF FD | 	call	#_expr
0cd70                 | '     ct+=1
0cd70                 | '     err=expr() : if err>0 then return err 
0cd70     01 7A 56 F2 | 	cmps	result1, #1 wc
0cd74     84 00 90 3D |  if_ae	jmp	#LR__1054
0cd78                 | '     if lparts(ct).token=token_rpar then ct+=1
0cd78     38 00 00 FF 
0cd7c     64 64 06 F1 | 	add	objptr, ##28772
0cd80     32 BB 02 FB | 	rdlong	local11, objptr
0cd84     03 BA 66 F0 | 	shl	local11, #3
0cd88     02 00 00 FF 
0cd8c     38 64 86 F1 | 	sub	objptr, ##1080
0cd90     32 BB 02 F1 | 	add	local11, objptr
0cd94     04 BA 06 F1 | 	add	local11, #4
0cd98     5D BB 02 FB | 	rdlong	local11, local11
0cd9c     14 BA 0E F2 | 	cmp	local11, #20 wz
0cda0     36 00 00 FF 
0cda4     2C 64 86 F1 | 	sub	objptr, ##27692
0cda8     4C 00 90 5D |  if_ne	jmp	#LR__1053
0cdac     38 00 00 FF 
0cdb0     64 64 06 F1 | 	add	objptr, ##28772
0cdb4     32 B1 02 FB | 	rdlong	local06, objptr
0cdb8     01 B0 06 F1 | 	add	local06, #1
0cdbc     32 B1 62 FC | 	wrlong	local06, objptr
0cdc0     38 00 00 FF 
0cdc4     64 64 86 F1 | 	sub	objptr, ##28772
0cdc8     2C 00 90 FD | 	jmp	#LR__1053
0cdcc                 | LR__1052
0cdcc     56 93 02 F6 | 	mov	arg01, local04
0cdd0     34 00 B0 FD | 	call	#_getfun
0cdd4     38 00 00 FF 
0cdd8     64 64 06 F1 | 	add	objptr, ##28772
0cddc     32 B1 02 FB | 	rdlong	local06, objptr
0cde0     01 B0 06 F1 | 	add	local06, #1
0cde4     32 B1 62 FC | 	wrlong	local06, objptr
0cde8     38 00 00 FF 
0cdec     64 64 86 F1 | 	sub	objptr, ##28772
0cdf0                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0cdf0     01 7A 56 F2 | 	cmps	result1, #1 wc
0cdf4     04 00 90 3D |  if_ae	jmp	#LR__1054
0cdf8                 | LR__1053
0cdf8                 | ' return 0  
0cdf8     00 7A 06 F6 | 	mov	result1, #0
0cdfc                 | LR__1054
0cdfc     E7 F0 03 F6 | 	mov	ptra, fp
0ce00     F2 00 A0 FD | 	call	#popregs_
0ce04                 | _getvalue_ret
0ce04     2D 00 64 FD | 	ret
0ce08                 | 
0ce08                 | ' 
0ce08                 | ' ' Get a function result 
0ce08                 | ' 
0ce08                 | ' function getfun(m as integer) as ulong
0ce08                 | _getfun
0ce08     0F CA 05 F6 | 	mov	COUNT_, #15
0ce0c     E8 00 A0 FD | 	call	#pushregs_
0ce10                 | _getfun_enter
0ce10     49 AD 02 F6 | 	mov	local04, arg01
0ce14     38 00 00 FF 
0ce18     64 64 06 F1 | 	add	objptr, ##28772
0ce1c     32 AF 02 FB | 	rdlong	local05, objptr
0ce20     57 B1 02 F6 | 	mov	local06, local05
0ce24     00 B2 06 F6 | 	mov	local07, #0
0ce28                 | ' oldct=ct
0ce28                 | ' numpar=0
0ce28                 | ' if lparts(ct+1).token=token_lpar then
0ce28     01 AE 06 F1 | 	add	local05, #1
0ce2c     03 AE 66 F0 | 	shl	local05, #3
0ce30     02 00 00 FF 
0ce34     38 64 86 F1 | 	sub	objptr, ##1080
0ce38     32 AF 02 F1 | 	add	local05, objptr
0ce3c     04 AE 06 F1 | 	add	local05, #4
0ce40     57 AF 02 FB | 	rdlong	local05, local05
0ce44     15 AE 0E F2 | 	cmp	local05, #21 wz
0ce48     36 00 00 FF 
0ce4c     2C 64 86 F1 | 	sub	objptr, ##27692
0ce50     54 01 90 5D |  if_ne	jmp	#LR__1064
0ce54     38 00 00 FF 
0ce58     64 64 06 F1 | 	add	objptr, ##28772
0ce5c     32 B5 02 FB | 	rdlong	local08, objptr
0ce60     01 B4 06 F1 | 	add	local08, #1
0ce64     32 B5 62 FC | 	wrlong	local08, objptr
0ce68     38 00 00 FF 
0ce6c     64 64 86 F1 | 	sub	objptr, ##28772
0ce70                 | '   ct+=1 											' omit this lpar, this is for expr list
0ce70                 | '   do
0ce70                 | LR__1060
0ce70     38 00 00 FF 
0ce74     64 64 06 F1 | 	add	objptr, ##28772
0ce78     32 AF 02 FB | 	rdlong	local05, objptr
0ce7c     01 AE 06 F1 | 	add	local05, #1
0ce80     32 AF 62 FC | 	wrlong	local05, objptr
0ce84                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0ce84                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0ce84     03 AE 66 F0 | 	shl	local05, #3
0ce88     02 00 00 FF 
0ce8c     38 64 86 F1 | 	sub	objptr, ##1080
0ce90     32 AF 02 F1 | 	add	local05, objptr
0ce94     04 AE 06 F1 | 	add	local05, #4
0ce98     57 B5 02 FB | 	rdlong	local08, local05
0ce9c     15 B4 0E F2 | 	cmp	local08, #21 wz
0cea0     36 00 00 FF 
0cea4     2C 64 86 F1 | 	sub	objptr, ##27692
0cea8     44 00 90 5D |  if_ne	jmp	#LR__1061
0ceac     38 00 00 FF 
0ceb0     64 64 06 F1 | 	add	objptr, ##28772
0ceb4     32 B5 02 FB | 	rdlong	local08, objptr
0ceb8     01 B4 06 F1 | 	add	local08, #1
0cebc     32 B5 62 FC | 	wrlong	local08, objptr
0cec0     38 00 00 FF 
0cec4     64 64 86 F1 | 	sub	objptr, ##28772
0cec8     C4 EF BF FD | 	call	#_expr
0cecc     3D B7 02 F6 | 	mov	local09, result1
0ced0     38 00 00 FF 
0ced4     64 64 06 F1 | 	add	objptr, ##28772
0ced8     32 B5 02 FB | 	rdlong	local08, objptr
0cedc     01 B4 06 F1 | 	add	local08, #1
0cee0     32 B5 62 FC | 	wrlong	local08, objptr
0cee4     38 00 00 FF 
0cee8     64 64 86 F1 | 	sub	objptr, ##28772
0ceec     08 00 90 FD | 	jmp	#LR__1062
0cef0                 | LR__1061
0cef0     9C EF BF FD | 	call	#_expr
0cef4     3D B7 02 F6 | 	mov	local09, result1
0cef8                 | LR__1062
0cef8                 | '     if err>0 then return err
0cef8     01 B6 16 F2 | 	cmp	local09, #1 wc
0cefc     5B 7B 02 36 |  if_ae	mov	result1, local09
0cf00     3C 02 90 3D |  if_ae	jmp	#LR__1066
0cf04     01 B2 06 F1 | 	add	local07, #1
0cf08     38 00 00 FF 
0cf0c     64 64 06 F1 | 	add	objptr, ##28772
0cf10     32 AF 02 FB | 	rdlong	local05, objptr
0cf14     03 AE 66 F0 | 	shl	local05, #3
0cf18     02 00 00 FF 
0cf1c     38 64 86 F1 | 	sub	objptr, ##1080
0cf20     32 AF 02 F1 | 	add	local05, objptr
0cf24     04 AE 06 F1 | 	add	local05, #4
0cf28     57 B7 02 FB | 	rdlong	local09, local05
0cf2c     14 B6 0E F2 | 	cmp	local09, #20 wz
0cf30     36 00 00 FF 
0cf34     2C 64 86 F1 | 	sub	objptr, ##27692
0cf38     34 00 90 AD |  if_e	jmp	#LR__1063
0cf3c     38 00 00 FF 
0cf40     64 64 06 F1 | 	add	objptr, ##28772
0cf44     32 B7 02 FB | 	rdlong	local09, objptr
0cf48     03 B6 66 F0 | 	shl	local09, #3
0cf4c     02 00 00 FF 
0cf50     38 64 86 F1 | 	sub	objptr, ##1080
0cf54     32 B7 02 F1 | 	add	local09, objptr
0cf58     04 B6 06 F1 | 	add	local09, #4
0cf5c     5B B7 02 FB | 	rdlong	local09, local09
0cf60     FE B7 0E F2 | 	cmp	local09, #510 wz
0cf64     36 00 00 FF 
0cf68     2C 64 86 F1 | 	sub	objptr, ##27692
0cf6c     00 FF 9F 5D |  if_ne	jmp	#LR__1060
0cf70                 | LR__1063
0cf70                 | '   if lparts(ct).token=token_end then return 14
0cf70     38 00 00 FF 
0cf74     64 64 06 F1 | 	add	objptr, ##28772
0cf78     32 AF 02 FB | 	rdlong	local05, objptr
0cf7c     03 AE 66 F0 | 	shl	local05, #3
0cf80     02 00 00 FF 
0cf84     38 64 86 F1 | 	sub	objptr, ##1080
0cf88     32 AF 02 F1 | 	add	local05, objptr
0cf8c     04 AE 06 F1 | 	add	local05, #4
0cf90     57 B7 02 FB | 	rdlong	local09, local05
0cf94     FE B7 0E F2 | 	cmp	local09, #510 wz
0cf98     36 00 00 FF 
0cf9c     2C 64 86 F1 | 	sub	objptr, ##27692
0cfa0     0E 7A 06 A6 |  if_e	mov	result1, #14
0cfa4     98 01 90 AD |  if_e	jmp	#LR__1066
0cfa8                 | LR__1064
0cfa8     59 A7 02 F6 | 	mov	local01, local07
0cfac     03 B0 66 F0 | 	shl	local06, #3
0cfb0     36 00 00 FF 
0cfb4     2C 64 06 F1 | 	add	objptr, ##27692
0cfb8     32 B1 02 F1 | 	add	local06, objptr
0cfbc     04 B0 06 F1 | 	add	local06, #4
0cfc0     58 AB 02 FB | 	rdlong	local03, local06
0cfc4     53 B5 02 F6 | 	mov	local08, local01
0cfc8     54 B9 02 F6 | 	mov	local10, local02
0cfcc     55 BB 02 F6 | 	mov	local11, local03
0cfd0     15 00 00 FF 
0cfd4     70 64 06 F1 | 	add	objptr, ##10864
0cfd8     32 BD 02 FB | 	rdlong	local12, objptr
0cfdc     5E BF 02 F6 | 	mov	local13, local12
0cfe0     01 BE 66 F0 | 	shl	local13, #1
0cfe4     5E BF 02 F1 | 	add	local13, local12
0cfe8     02 BE 66 F0 | 	shl	local13, #2
0cfec     03 00 00 FF 
0cff0     00 64 86 F1 | 	sub	objptr, ##1536
0cff4     32 BF 02 F1 | 	add	local13, objptr
0cff8     5F B5 62 FC | 	wrlong	local08, local13
0cffc     03 00 00 FF 
0d000     00 64 06 F1 | 	add	objptr, ##1536
0d004     32 B5 02 FB | 	rdlong	local08, objptr
0d008     5A C1 02 F6 | 	mov	local14, local08
0d00c     01 C0 66 F0 | 	shl	local14, #1
0d010     5A C1 02 F1 | 	add	local14, local08
0d014     02 C0 66 F0 | 	shl	local14, #2
0d018     03 00 00 FF 
0d01c     00 64 86 F1 | 	sub	objptr, ##1536
0d020     32 C1 02 F1 | 	add	local14, objptr
0d024     04 C0 06 F1 | 	add	local14, #4
0d028     60 B9 62 FC | 	wrlong	local10, local14
0d02c     03 00 00 FF 
0d030     00 64 06 F1 | 	add	objptr, ##1536
0d034     32 B5 02 FB | 	rdlong	local08, objptr
0d038     5A C3 02 F6 | 	mov	local15, local08
0d03c     01 C2 66 F0 | 	shl	local15, #1
0d040     5A C3 02 F1 | 	add	local15, local08
0d044     02 C2 66 F0 | 	shl	local15, #2
0d048     03 00 00 FF 
0d04c     00 64 86 F1 | 	sub	objptr, ##1536
0d050     32 C3 02 F1 | 	add	local15, objptr
0d054     08 C2 06 F1 | 	add	local15, #8
0d058     61 BB 62 FC | 	wrlong	local11, local15
0d05c     03 00 00 FF 
0d060     00 64 06 F1 | 	add	objptr, ##1536
0d064     32 B5 02 FB | 	rdlong	local08, objptr
0d068     01 B4 06 F1 | 	add	local08, #1
0d06c     32 B5 62 FC | 	wrlong	local08, objptr
0d070     4B 00 00 FF 
0d074     9C 64 86 F1 | 	sub	objptr, ##38556
0d078                 | ' t2.result.uresult=numpar
0d078                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0d078                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d078                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d078     FF FF 7F FF 
0d07c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0d080     B8 00 90 5D |  if_ne	jmp	#LR__1065
0d084     15 AA 06 F6 | 	mov	local03, #21
0d088     53 B5 02 F6 | 	mov	local08, local01
0d08c     54 B9 02 F6 | 	mov	local10, local02
0d090     55 BB 02 F6 | 	mov	local11, local03
0d094     4B 00 00 FF 
0d098     9C 64 06 F1 | 	add	objptr, ##38556
0d09c     32 BD 02 FB | 	rdlong	local12, objptr
0d0a0     5E BF 02 F6 | 	mov	local13, local12
0d0a4     01 BE 66 F0 | 	shl	local13, #1
0d0a8     5E BF 02 F1 | 	add	local13, local12
0d0ac     02 BE 66 F0 | 	shl	local13, #2
0d0b0     03 00 00 FF 
0d0b4     00 64 86 F1 | 	sub	objptr, ##1536
0d0b8     32 BF 02 F1 | 	add	local13, objptr
0d0bc     5F B5 62 FC | 	wrlong	local08, local13
0d0c0     03 00 00 FF 
0d0c4     00 64 06 F1 | 	add	objptr, ##1536
0d0c8     32 C3 02 FB | 	rdlong	local15, objptr
0d0cc     61 C1 02 F6 | 	mov	local14, local15
0d0d0     01 C0 66 F0 | 	shl	local14, #1
0d0d4     61 C1 02 F1 | 	add	local14, local15
0d0d8     02 C0 66 F0 | 	shl	local14, #2
0d0dc     03 00 00 FF 
0d0e0     00 64 86 F1 | 	sub	objptr, ##1536
0d0e4     32 C1 02 F1 | 	add	local14, objptr
0d0e8     04 C0 06 F1 | 	add	local14, #4
0d0ec     60 B9 62 FC | 	wrlong	local10, local14
0d0f0     03 00 00 FF 
0d0f4     00 64 06 F1 | 	add	objptr, ##1536
0d0f8     32 C1 02 FB | 	rdlong	local14, objptr
0d0fc     60 C3 02 F6 | 	mov	local15, local14
0d100     01 C2 66 F0 | 	shl	local15, #1
0d104     60 C3 02 F1 | 	add	local15, local14
0d108     02 C2 66 F0 | 	shl	local15, #2
0d10c     03 00 00 FF 
0d110     00 64 86 F1 | 	sub	objptr, ##1536
0d114     32 C3 02 F1 | 	add	local15, objptr
0d118     08 C2 06 F1 | 	add	local15, #8
0d11c     61 BB 62 FC | 	wrlong	local11, local15
0d120     03 00 00 FF 
0d124     00 64 06 F1 | 	add	objptr, ##1536
0d128     32 B5 02 FB | 	rdlong	local08, objptr
0d12c     01 B4 06 F1 | 	add	local08, #1
0d130     32 B5 62 FC | 	wrlong	local08, objptr
0d134     4B 00 00 FF 
0d138     9C 64 86 F1 | 	sub	objptr, ##38556
0d13c                 | LR__1065
0d13c                 | ' return 0
0d13c     00 7A 06 F6 | 	mov	result1, #0
0d140                 | LR__1066
0d140     E7 F0 03 F6 | 	mov	ptra, fp
0d144     F2 00 A0 FD | 	call	#popregs_
0d148                 | _getfun_ret
0d148     2D 00 64 FD | 	ret
0d14c                 | 
0d14c                 | '   
0d14c                 | '   
0d14c                 | ' function getvar(m as integer) as ulong
0d14c                 | _getvar
0d14c     11 CA 05 F6 | 	mov	COUNT_, #17
0d150     E8 00 A0 FD | 	call	#pushregs_
0d154                 | _getvar_enter
0d154     49 AD 02 F6 | 	mov	local04, arg01
0d158     38 00 00 FF 
0d15c     64 64 06 F1 | 	add	objptr, ##28772
0d160     32 AF 02 FB | 	rdlong	local05, objptr
0d164     03 AE 66 F0 | 	shl	local05, #3
0d168     02 00 00 FF 
0d16c     38 64 86 F1 | 	sub	objptr, ##1080
0d170     32 AF 02 F1 | 	add	local05, objptr
0d174     57 B1 02 FB | 	rdlong	local06, local05
0d178     01 B2 66 F6 | 	neg	local07, #1
0d17c                 | ' 
0d17c                 | ' varname$=lparts(ct).part$
0d17c                 | ' j=-1
0d17c                 | ' 
0d17c                 | ' for i=0 to varnum-1
0d17c     00 B4 06 F6 | 	mov	local08, #0
0d180     04 64 86 F1 | 	sub	objptr, #4
0d184     32 B7 02 FB | 	rdlong	local09, objptr
0d188     36 00 00 FF 
0d18c     28 64 86 F1 | 	sub	objptr, ##27688
0d190                 | LR__1070
0d190     5B B5 52 F2 | 	cmps	local08, local09 wc
0d194     34 00 90 3D |  if_ae	jmp	#LR__1071
0d198                 | '   if variables(i).name=varname$ then j=i : exit
0d198     5A AF 02 F6 | 	mov	local05, local08
0d19c     04 AE 66 F0 | 	shl	local05, #4
0d1a0     32 95 02 F6 | 	mov	arg02, objptr
0d1a4     16 00 00 FF 
0d1a8     18 94 06 F1 | 	add	arg02, ##11288
0d1ac     4A AF 02 F1 | 	add	local05, arg02
0d1b0     57 93 02 FB | 	rdlong	arg01, local05
0d1b4     58 95 02 F6 | 	mov	arg02, local06
0d1b8     48 78 B1 FD | 	call	#__system___string_cmp
0d1bc     00 7A 0E F2 | 	cmp	result1, #0 wz
0d1c0     5A B3 02 A6 |  if_e	mov	local07, local08
0d1c4     01 B4 06 51 |  if_ne	add	local08, #1
0d1c8     C4 FF 9F 5D |  if_ne	jmp	#LR__1070
0d1cc                 | LR__1071
0d1cc                 | ' if  j=-1 andalso varnum<maxvars then   
0d1cc     FF FF 7F FF 
0d1d0     FF B3 0E F2 | 	cmp	local07, ##-1 wz
0d1d4     A8 00 90 5D |  if_ne	jmp	#LR__1072
0d1d8     36 00 00 FF 
0d1dc     28 64 06 F1 | 	add	objptr, ##27688
0d1e0     32 B7 02 FB | 	rdlong	local09, objptr
0d1e4     36 00 00 FF 
0d1e8     28 64 86 F1 | 	sub	objptr, ##27688
0d1ec     02 00 00 FF 
0d1f0     00 B6 56 F2 | 	cmps	local09, ##1024 wc
0d1f4     88 00 90 3D |  if_ae	jmp	#LR__1072
0d1f8     36 00 00 FF 
0d1fc     28 64 06 F1 | 	add	objptr, ##27688
0d200     32 AF 02 FB | 	rdlong	local05, objptr
0d204     04 AE 66 F0 | 	shl	local05, #4
0d208     20 00 00 FF 
0d20c     10 64 86 F1 | 	sub	objptr, ##16400
0d210     32 AF 02 F1 | 	add	local05, objptr
0d214     57 B1 62 FC | 	wrlong	local06, local05
0d218     20 00 00 FF 
0d21c     10 64 06 F1 | 	add	objptr, ##16400
0d220     32 AF 02 FB | 	rdlong	local05, objptr
0d224     04 AE 66 F0 | 	shl	local05, #4
0d228     20 00 00 FF 
0d22c     10 64 86 F1 | 	sub	objptr, ##16400
0d230     32 AF 02 F1 | 	add	local05, objptr
0d234     04 AE 06 F1 | 	add	local05, #4
0d238     57 01 68 FC | 	wrlong	#0, local05
0d23c     20 00 00 FF 
0d240     10 64 06 F1 | 	add	objptr, ##16400
0d244     32 AF 02 FB | 	rdlong	local05, objptr
0d248     04 AE 66 F0 | 	shl	local05, #4
0d24c     20 00 00 FF 
0d250     10 64 86 F1 | 	sub	objptr, ##16400
0d254     32 AF 02 F1 | 	add	local05, objptr
0d258     0C AE 06 F1 | 	add	local05, #12
0d25c     57 39 68 FC | 	wrlong	#28, local05
0d260     20 00 00 FF 
0d264     10 64 06 F1 | 	add	objptr, ##16400
0d268     32 B7 02 FB | 	rdlong	local09, objptr
0d26c     5B B3 02 F6 | 	mov	local07, local09
0d270     01 B6 06 F1 | 	add	local09, #1
0d274     32 B7 62 FC | 	wrlong	local09, objptr
0d278     36 00 00 FF 
0d27c     28 64 86 F1 | 	sub	objptr, ##27688
0d280                 | LR__1072
0d280     00 B4 06 F6 | 	mov	local08, #0
0d284                 | ' numpar=0
0d284                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d284     38 00 00 FF 
0d288     64 64 06 F1 | 	add	objptr, ##28772
0d28c     32 AF 02 FB | 	rdlong	local05, objptr
0d290     01 AE 06 F1 | 	add	local05, #1
0d294     03 AE 66 F0 | 	shl	local05, #3
0d298     02 00 00 FF 
0d29c     38 64 86 F1 | 	sub	objptr, ##1080
0d2a0     32 AF 02 F1 | 	add	local05, objptr
0d2a4     04 AE 06 F1 | 	add	local05, #4
0d2a8     57 B7 02 FB | 	rdlong	local09, local05
0d2ac     15 B6 0E F2 | 	cmp	local09, #21 wz
0d2b0     36 00 00 FF 
0d2b4     2C 64 86 F1 | 	sub	objptr, ##27692
0d2b8     54 01 90 5D |  if_ne	jmp	#LR__1077
0d2bc     38 00 00 FF 
0d2c0     64 64 06 F1 | 	add	objptr, ##28772
0d2c4     32 B9 02 FB | 	rdlong	local10, objptr
0d2c8     01 B8 06 F1 | 	add	local10, #1
0d2cc     32 B9 62 FC | 	wrlong	local10, objptr
0d2d0     38 00 00 FF 
0d2d4     64 64 86 F1 | 	sub	objptr, ##28772
0d2d8                 | '   ct+=1 											' omit this lpar, this is for expr list
0d2d8                 | '   do
0d2d8                 | LR__1073
0d2d8     38 00 00 FF 
0d2dc     64 64 06 F1 | 	add	objptr, ##28772
0d2e0     32 AF 02 FB | 	rdlong	local05, objptr
0d2e4     01 AE 06 F1 | 	add	local05, #1
0d2e8     32 AF 62 FC | 	wrlong	local05, objptr
0d2ec                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d2ec                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d2ec     03 AE 66 F0 | 	shl	local05, #3
0d2f0     02 00 00 FF 
0d2f4     38 64 86 F1 | 	sub	objptr, ##1080
0d2f8     32 AF 02 F1 | 	add	local05, objptr
0d2fc     04 AE 06 F1 | 	add	local05, #4
0d300     57 B9 02 FB | 	rdlong	local10, local05
0d304     15 B8 0E F2 | 	cmp	local10, #21 wz
0d308     36 00 00 FF 
0d30c     2C 64 86 F1 | 	sub	objptr, ##27692
0d310     44 00 90 5D |  if_ne	jmp	#LR__1074
0d314     38 00 00 FF 
0d318     64 64 06 F1 | 	add	objptr, ##28772
0d31c     32 B9 02 FB | 	rdlong	local10, objptr
0d320     01 B8 06 F1 | 	add	local10, #1
0d324     32 B9 62 FC | 	wrlong	local10, objptr
0d328     38 00 00 FF 
0d32c     64 64 86 F1 | 	sub	objptr, ##28772
0d330     5C EB BF FD | 	call	#_expr
0d334     3D BB 02 F6 | 	mov	local11, result1
0d338     38 00 00 FF 
0d33c     64 64 06 F1 | 	add	objptr, ##28772
0d340     32 B9 02 FB | 	rdlong	local10, objptr
0d344     01 B8 06 F1 | 	add	local10, #1
0d348     32 B9 62 FC | 	wrlong	local10, objptr
0d34c     38 00 00 FF 
0d350     64 64 86 F1 | 	sub	objptr, ##28772
0d354     08 00 90 FD | 	jmp	#LR__1075
0d358                 | LR__1074
0d358     34 EB BF FD | 	call	#_expr
0d35c     3D BB 02 F6 | 	mov	local11, result1
0d360                 | LR__1075
0d360                 | '     if err>0 then return err
0d360     01 BA 56 F2 | 	cmps	local11, #1 wc
0d364     5D 7B 02 36 |  if_ae	mov	result1, local11
0d368     2C 02 90 3D |  if_ae	jmp	#LR__1079
0d36c     01 B4 06 F1 | 	add	local08, #1
0d370     38 00 00 FF 
0d374     64 64 06 F1 | 	add	objptr, ##28772
0d378     32 AF 02 FB | 	rdlong	local05, objptr
0d37c     03 AE 66 F0 | 	shl	local05, #3
0d380     02 00 00 FF 
0d384     38 64 86 F1 | 	sub	objptr, ##1080
0d388     32 AF 02 F1 | 	add	local05, objptr
0d38c     04 AE 06 F1 | 	add	local05, #4
0d390     57 BB 02 FB | 	rdlong	local11, local05
0d394     14 BA 0E F2 | 	cmp	local11, #20 wz
0d398     36 00 00 FF 
0d39c     2C 64 86 F1 | 	sub	objptr, ##27692
0d3a0     34 00 90 AD |  if_e	jmp	#LR__1076
0d3a4     38 00 00 FF 
0d3a8     64 64 06 F1 | 	add	objptr, ##28772
0d3ac     32 BB 02 FB | 	rdlong	local11, objptr
0d3b0     03 BA 66 F0 | 	shl	local11, #3
0d3b4     02 00 00 FF 
0d3b8     38 64 86 F1 | 	sub	objptr, ##1080
0d3bc     32 BB 02 F1 | 	add	local11, objptr
0d3c0     04 BA 06 F1 | 	add	local11, #4
0d3c4     5D BB 02 FB | 	rdlong	local11, local11
0d3c8     FE BB 0E F2 | 	cmp	local11, #510 wz
0d3cc     36 00 00 FF 
0d3d0     2C 64 86 F1 | 	sub	objptr, ##27692
0d3d4     00 FF 9F 5D |  if_ne	jmp	#LR__1073
0d3d8                 | LR__1076
0d3d8                 | '     if lparts(ct).token=token_end then return 14
0d3d8     38 00 00 FF 
0d3dc     64 64 06 F1 | 	add	objptr, ##28772
0d3e0     32 AF 02 FB | 	rdlong	local05, objptr
0d3e4     03 AE 66 F0 | 	shl	local05, #3
0d3e8     02 00 00 FF 
0d3ec     38 64 86 F1 | 	sub	objptr, ##1080
0d3f0     32 AF 02 F1 | 	add	local05, objptr
0d3f4     04 AE 06 F1 | 	add	local05, #4
0d3f8     57 BB 02 FB | 	rdlong	local11, local05
0d3fc     FE BB 0E F2 | 	cmp	local11, #510 wz
0d400     36 00 00 FF 
0d404     2C 64 86 F1 | 	sub	objptr, ##27692
0d408     0E 7A 06 A6 |  if_e	mov	result1, #14
0d40c     88 01 90 AD |  if_e	jmp	#LR__1079
0d410                 | LR__1077
0d410     5A A9 02 F6 | 	mov	local02, local08
0d414     11 AA 06 F6 | 	mov	local03, #17
0d418     59 A7 02 F6 | 	mov	local01, local07
0d41c     53 B9 02 F6 | 	mov	local10, local01
0d420     54 BD 02 F6 | 	mov	local12, local02
0d424     55 BF 02 F6 | 	mov	local13, local03
0d428     4B 00 00 FF 
0d42c     9C 64 06 F1 | 	add	objptr, ##38556
0d430     32 C1 02 FB | 	rdlong	local14, objptr
0d434     60 C3 02 F6 | 	mov	local15, local14
0d438     01 C2 66 F0 | 	shl	local15, #1
0d43c     60 C3 02 F1 | 	add	local15, local14
0d440     02 C2 66 F0 | 	shl	local15, #2
0d444     03 00 00 FF 
0d448     00 64 86 F1 | 	sub	objptr, ##1536
0d44c     32 C3 02 F1 | 	add	local15, objptr
0d450     61 B9 62 FC | 	wrlong	local10, local15
0d454     03 00 00 FF 
0d458     00 64 06 F1 | 	add	objptr, ##1536
0d45c     32 B9 02 FB | 	rdlong	local10, objptr
0d460     5C C5 02 F6 | 	mov	local16, local10
0d464     01 C4 66 F0 | 	shl	local16, #1
0d468     5C C5 02 F1 | 	add	local16, local10
0d46c     02 C4 66 F0 | 	shl	local16, #2
0d470     03 00 00 FF 
0d474     00 64 86 F1 | 	sub	objptr, ##1536
0d478     32 C5 02 F1 | 	add	local16, objptr
0d47c     04 C4 06 F1 | 	add	local16, #4
0d480     62 BD 62 FC | 	wrlong	local12, local16
0d484     03 00 00 FF 
0d488     00 64 06 F1 | 	add	objptr, ##1536
0d48c     32 B9 02 FB | 	rdlong	local10, objptr
0d490     5C C7 02 F6 | 	mov	local17, local10
0d494     01 C6 66 F0 | 	shl	local17, #1
0d498     5C C7 02 F1 | 	add	local17, local10
0d49c     02 C6 66 F0 | 	shl	local17, #2
0d4a0     03 00 00 FF 
0d4a4     00 64 86 F1 | 	sub	objptr, ##1536
0d4a8     32 C7 02 F1 | 	add	local17, objptr
0d4ac     08 C6 06 F1 | 	add	local17, #8
0d4b0     63 BF 62 FC | 	wrlong	local13, local17
0d4b4     03 00 00 FF 
0d4b8     00 64 06 F1 | 	add	objptr, ##1536
0d4bc     32 B9 02 FB | 	rdlong	local10, objptr
0d4c0     01 B8 06 F1 | 	add	local10, #1
0d4c4     32 B9 62 FC | 	wrlong	local10, objptr
0d4c8     4B 00 00 FF 
0d4cc     9C 64 86 F1 | 	sub	objptr, ##38556
0d4d0                 | ' t2.result.twowords(1)=numpar
0d4d0                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d4d0                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d4d0                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d4d0     FF FF 7F FF 
0d4d4     FF AD 0E F2 | 	cmp	local04, ##-1 wz
0d4d8     B8 00 90 5D |  if_ne	jmp	#LR__1078
0d4dc     15 AA 06 F6 | 	mov	local03, #21
0d4e0     53 B9 02 F6 | 	mov	local10, local01
0d4e4     54 BD 02 F6 | 	mov	local12, local02
0d4e8     55 BF 02 F6 | 	mov	local13, local03
0d4ec     4B 00 00 FF 
0d4f0     9C 64 06 F1 | 	add	objptr, ##38556
0d4f4     32 C1 02 FB | 	rdlong	local14, objptr
0d4f8     60 C3 02 F6 | 	mov	local15, local14
0d4fc     01 C2 66 F0 | 	shl	local15, #1
0d500     60 C3 02 F1 | 	add	local15, local14
0d504     02 C2 66 F0 | 	shl	local15, #2
0d508     03 00 00 FF 
0d50c     00 64 86 F1 | 	sub	objptr, ##1536
0d510     32 C3 02 F1 | 	add	local15, objptr
0d514     61 B9 62 FC | 	wrlong	local10, local15
0d518     03 00 00 FF 
0d51c     00 64 06 F1 | 	add	objptr, ##1536
0d520     32 C7 02 FB | 	rdlong	local17, objptr
0d524     63 C5 02 F6 | 	mov	local16, local17
0d528     01 C4 66 F0 | 	shl	local16, #1
0d52c     63 C5 02 F1 | 	add	local16, local17
0d530     02 C4 66 F0 | 	shl	local16, #2
0d534     03 00 00 FF 
0d538     00 64 86 F1 | 	sub	objptr, ##1536
0d53c     32 C5 02 F1 | 	add	local16, objptr
0d540     04 C4 06 F1 | 	add	local16, #4
0d544     62 BD 62 FC | 	wrlong	local12, local16
0d548     03 00 00 FF 
0d54c     00 64 06 F1 | 	add	objptr, ##1536
0d550     32 C5 02 FB | 	rdlong	local16, objptr
0d554     62 C7 02 F6 | 	mov	local17, local16
0d558     01 C6 66 F0 | 	shl	local17, #1
0d55c     62 C7 02 F1 | 	add	local17, local16
0d560     02 C6 66 F0 | 	shl	local17, #2
0d564     03 00 00 FF 
0d568     00 64 86 F1 | 	sub	objptr, ##1536
0d56c     32 C7 02 F1 | 	add	local17, objptr
0d570     08 C6 06 F1 | 	add	local17, #8
0d574     63 BF 62 FC | 	wrlong	local13, local17
0d578     03 00 00 FF 
0d57c     00 64 06 F1 | 	add	objptr, ##1536
0d580     32 B9 02 FB | 	rdlong	local10, objptr
0d584     01 B8 06 F1 | 	add	local10, #1
0d588     32 B9 62 FC | 	wrlong	local10, objptr
0d58c     4B 00 00 FF 
0d590     9C 64 86 F1 | 	sub	objptr, ##38556
0d594                 | LR__1078
0d594                 | ' return 0
0d594     00 7A 06 F6 | 	mov	result1, #0
0d598                 | LR__1079
0d598     E7 F0 03 F6 | 	mov	ptra, fp
0d59c     F2 00 A0 FD | 	call	#popregs_
0d5a0                 | _getvar_ret
0d5a0     2D 00 64 FD | 	ret
0d5a4                 | 
0d5a4                 | ' 
0d5a4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d5a4                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d5a4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d5a4                 | ' 
0d5a4                 | ' 
0d5a4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d5a4                 | ' '                                                                                                                                       -
0d5a4                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d5a4                 | ' '                                                                                                                                       -
0d5a4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d5a4                 | ' 
0d5a4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d5a4                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d5a4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d5a4                 | ' 
0d5a4                 | ' function execute_line (astart=0 as integer) as integer
0d5a4                 | _execute_line
0d5a4     04 CA 05 F6 | 	mov	COUNT_, #4
0d5a8     E8 00 A0 FD | 	call	#pushregs_
0d5ac     51 00 00 FF 
0d5b0     DC 64 06 F1 | 	add	objptr, ##41692
0d5b4     32 01 68 FC | 	wrlong	#0, objptr
0d5b8                 | ' 
0d5b8                 | ' runptr2=0
0d5b8                 | ' for lineptr_e=astart to lineptr-1
0d5b8     06 00 00 FF 
0d5bc     3C 64 86 F1 | 	sub	objptr, ##3132
0d5c0     32 93 62 FC | 	wrlong	arg01, objptr
0d5c4     04 64 86 F1 | 	sub	objptr, #4
0d5c8     32 A7 02 FB | 	rdlong	local01, objptr
0d5cc     4B 00 00 FF 
0d5d0     9C 64 86 F1 | 	sub	objptr, ##38556
0d5d4                 | LR__1080
0d5d4     4B 00 00 FF 
0d5d8     A0 64 06 F1 | 	add	objptr, ##38560
0d5dc     32 7B 02 FB | 	rdlong	result1, objptr
0d5e0     4B 00 00 FF 
0d5e4     A0 64 86 F1 | 	sub	objptr, ##38560
0d5e8     53 7B 52 F2 | 	cmps	result1, local01 wc
0d5ec     98 00 90 3D |  if_ae	jmp	#LR__1081
0d5f0     4B 00 00 FF 
0d5f4     A0 64 06 F1 | 	add	objptr, ##38560
0d5f8     32 7B 02 FB | 	rdlong	result1, objptr
0d5fc     3D A9 02 F6 | 	mov	local02, result1
0d600     01 A8 66 F0 | 	shl	local02, #1
0d604     3D A9 02 F1 | 	add	local02, result1
0d608     02 A8 66 F0 | 	shl	local02, #2
0d60c     03 00 00 FF 
0d610     04 64 86 F1 | 	sub	objptr, ##1540
0d614     32 A9 02 F1 | 	add	local02, objptr
0d618     08 A8 06 F1 | 	add	local02, #8
0d61c     54 A9 02 FB | 	rdlong	local02, local02
0d620     54 A9 E2 F8 | 	getbyte	local02, local02, #0
0d624     02 A8 66 F0 | 	shl	local02, #2
0d628     04 00 00 FF 
0d62c     1C 64 86 F1 | 	sub	objptr, ##2076
0d630     32 A9 02 F1 | 	add	local02, objptr
0d634     54 A9 02 FB | 	rdlong	local02, local02
0d638     54 AB 02 F6 | 	mov	local03, local02
0d63c     13 A8 46 F7 | 	zerox	local02, #19
0d640     14 AA 46 F0 | 	shr	local03, #20
0d644     02 AA 66 F0 | 	shl	local03, #2
0d648     2D AB 02 F1 | 	add	local03, __methods__
0d64c     55 AB 02 FB | 	rdlong	local03, local03
0d650     44 00 00 FF 
0d654     80 64 86 F1 | 	sub	objptr, ##34944
0d658     32 AD 02 F6 | 	mov	local04, objptr
0d65c     54 65 02 F6 | 	mov	objptr, local02
0d660     2D AA 62 FD | 	call	local03
0d664     56 65 02 F6 | 	mov	objptr, local04
0d668     4B 00 00 FF 
0d66c     A0 64 06 F1 | 	add	objptr, ##38560
0d670     32 AD 02 FB | 	rdlong	local04, objptr
0d674     01 AC 06 F1 | 	add	local04, #1
0d678     32 AD 62 FC | 	wrlong	local04, objptr
0d67c     4B 00 00 FF 
0d680     A0 64 86 F1 | 	sub	objptr, ##38560
0d684     4C FF 9F FD | 	jmp	#LR__1080
0d688                 | LR__1081
0d688                 | ' return runptr2
0d688     51 00 00 FF 
0d68c     DC 64 06 F1 | 	add	objptr, ##41692
0d690     32 7B 02 FB | 	rdlong	result1, objptr
0d694     51 00 00 FF 
0d698     DC 64 86 F1 | 	sub	objptr, ##41692
0d69c     E7 F0 03 F6 | 	mov	ptra, fp
0d6a0     F2 00 A0 FD | 	call	#popregs_
0d6a4                 | _execute_line_ret
0d6a4     2D 00 64 FD | 	ret
0d6a8                 | 
0d6a8                 | ' 
0d6a8                 | ' 
0d6a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d6a8                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d6a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d6a8                 | ' 
0d6a8                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d6a8                 | ' 
0d6a8                 | ' function pop() as expr_result
0d6a8                 | _pop
0d6a8                 | ' if stackpointer=0 then
0d6a8     44 00 00 FF 
0d6ac     78 64 06 F1 | 	add	objptr, ##34936
0d6b0     32 7B 0A FB | 	rdlong	result1, objptr wz
0d6b4     44 00 00 FF 
0d6b8     78 64 86 F1 | 	sub	objptr, ##34936
0d6bc     FF 84 06 A6 |  if_e	mov	_var03, #255
0d6c0     18 80 06 A6 |  if_e	mov	_var01, #24
0d6c4     60 00 90 AD |  if_e	jmp	#LR__1090
0d6c8     44 00 00 FF 
0d6cc     78 64 06 F1 | 	add	objptr, ##34936
0d6d0     32 7B 02 FB | 	rdlong	result1, objptr
0d6d4     01 7A 86 F1 | 	sub	result1, #1
0d6d8     32 7B 62 FC | 	wrlong	result1, objptr
0d6dc     3D 7F 02 F6 | 	mov	result3, result1
0d6e0     01 7E 66 F0 | 	shl	result3, #1
0d6e4     3D 7F 02 F1 | 	add	result3, result1
0d6e8     02 7E 66 F0 | 	shl	result3, #2
0d6ec     0C 00 00 FF 
0d6f0     0C 64 86 F1 | 	sub	objptr, ##6156
0d6f4     32 7F 02 F1 | 	add	result3, objptr
0d6f8     3F 81 02 FB | 	rdlong	_var01, result3
0d6fc     04 7E 06 F1 | 	add	result3, #4
0d700     3F 83 02 FB | 	rdlong	_var02, result3
0d704     3D 7D 02 F6 | 	mov	result2, result1
0d708     01 7C 66 F0 | 	shl	result2, #1
0d70c     3D 7D 02 F1 | 	add	result2, result1
0d710     02 7C 66 F0 | 	shl	result2, #2
0d714     32 7D 02 F1 | 	add	result2, objptr
0d718     08 7C 06 F1 | 	add	result2, #8
0d71c     3E 85 02 FB | 	rdlong	_var03, result2
0d720     38 00 00 FF 
0d724     6C 64 86 F1 | 	sub	objptr, ##28780
0d728                 | LR__1090
0d728                 | ' return t1
0d728     41 7D 02 F6 | 	mov	result2, _var02
0d72c     42 7F 02 F6 | 	mov	result3, _var03
0d730     40 7B 02 F6 | 	mov	result1, _var01
0d734                 | _pop_ret
0d734     2D 00 64 FD | 	ret
0d738                 | 
0d738                 | ' 
0d738                 | ' sub push(t1 as expr_result )
0d738                 | _push
0d738                 | ' if stackpointer<maxstack then 
0d738     44 00 00 FF 
0d73c     78 64 06 F1 | 	add	objptr, ##34936
0d740     32 81 02 FB | 	rdlong	_var01, objptr
0d744     44 00 00 FF 
0d748     78 64 86 F1 | 	sub	objptr, ##34936
0d74c     01 00 00 FF 
0d750     00 80 56 F2 | 	cmps	_var01, ##512 wc
0d754     BC 00 90 3D |  if_ae	jmp	#LR__1100
0d758     49 81 02 FB | 	rdlong	_var01, arg01
0d75c     04 92 06 F1 | 	add	arg01, #4
0d760     49 83 02 FB | 	rdlong	_var02, arg01
0d764     04 92 06 F1 | 	add	arg01, #4
0d768     49 93 02 FB | 	rdlong	arg01, arg01
0d76c     44 00 00 FF 
0d770     78 64 06 F1 | 	add	objptr, ##34936
0d774     32 85 02 FB | 	rdlong	_var03, objptr
0d778     42 87 02 F6 | 	mov	_var04, _var03
0d77c     01 86 66 F0 | 	shl	_var04, #1
0d780     42 87 02 F1 | 	add	_var04, _var03
0d784     02 86 66 F0 | 	shl	_var04, #2
0d788     0C 00 00 FF 
0d78c     0C 64 86 F1 | 	sub	objptr, ##6156
0d790     32 87 02 F1 | 	add	_var04, objptr
0d794     43 81 62 FC | 	wrlong	_var01, _var04
0d798     0C 00 00 FF 
0d79c     0C 64 06 F1 | 	add	objptr, ##6156
0d7a0     32 87 02 FB | 	rdlong	_var04, objptr
0d7a4     43 85 02 F6 | 	mov	_var03, _var04
0d7a8     01 84 66 F0 | 	shl	_var03, #1
0d7ac     43 85 02 F1 | 	add	_var03, _var04
0d7b0     02 84 66 F0 | 	shl	_var03, #2
0d7b4     0C 00 00 FF 
0d7b8     0C 64 86 F1 | 	sub	objptr, ##6156
0d7bc     32 85 02 F1 | 	add	_var03, objptr
0d7c0     04 84 06 F1 | 	add	_var03, #4
0d7c4     42 83 62 FC | 	wrlong	_var02, _var03
0d7c8     0C 00 00 FF 
0d7cc     0C 64 06 F1 | 	add	objptr, ##6156
0d7d0     32 87 02 FB | 	rdlong	_var04, objptr
0d7d4     43 85 02 F6 | 	mov	_var03, _var04
0d7d8     01 84 66 F0 | 	shl	_var03, #1
0d7dc     43 85 02 F1 | 	add	_var03, _var04
0d7e0     02 84 66 F0 | 	shl	_var03, #2
0d7e4     0C 00 00 FF 
0d7e8     0C 64 86 F1 | 	sub	objptr, ##6156
0d7ec     32 85 02 F1 | 	add	_var03, objptr
0d7f0     08 84 06 F1 | 	add	_var03, #8
0d7f4     42 93 62 FC | 	wrlong	arg01, _var03
0d7f8     0C 00 00 FF 
0d7fc     0C 64 06 F1 | 	add	objptr, ##6156
0d800     32 81 02 FB | 	rdlong	_var01, objptr
0d804     01 80 06 F1 | 	add	_var01, #1
0d808     32 81 62 FC | 	wrlong	_var01, objptr
0d80c     44 00 00 FF 
0d810     78 64 86 F1 | 	sub	objptr, ##34936
0d814                 | LR__1100
0d814                 | _push_ret
0d814     2D 00 64 FD | 	ret
0d818                 | 
0d818                 | ' 
0d818                 | ' ' -------------------------------- Runtime converting functions
0d818                 | ' 
0d818                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d818                 | ' 
0d818                 | ' function  convertstring(psaddr as ulong) as string
0d818                 | _convertstring
0d818     04 CA 05 F6 | 	mov	COUNT_, #4
0d81c     E8 00 A0 FD | 	call	#pushregs_
0d820     49 A7 02 F6 | 	mov	local01, arg01
0d824     F4 3A B1 FD | 	call	#_pslpeek
0d828     3D A9 02 F6 | 	mov	local02, result1
0d82c     96 01 00 FF 
0d830     AF AA 06 F6 | 	mov	local03, ##@LR__5942
0d834                 | ' l=pslpeek(psaddr) 
0d834                 | ' s="" 
0d834                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d834     01 AC 06 F6 | 	mov	local04, #1
0d838     01 A8 06 F1 | 	add	local02, #1
0d83c                 | LR__1110
0d83c     54 AD 52 F2 | 	cmps	local04, local02 wc
0d840     30 00 90 3D |  if_ae	jmp	#LR__1111
0d844     53 93 02 F6 | 	mov	arg01, local01
0d848     03 92 06 F1 | 	add	arg01, #3
0d84c     56 93 02 F1 | 	add	arg01, local04
0d850     80 3A B1 FD | 	call	#_pspeek
0d854     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
0d858     EC 8B B1 FD | 	call	#__system__Chr_S
0d85c     3D 95 02 F6 | 	mov	arg02, result1
0d860     55 93 02 F6 | 	mov	arg01, local03
0d864     D0 71 B1 FD | 	call	#__system___string_concat
0d868     3D AB 02 F6 | 	mov	local03, result1
0d86c     01 AC 06 F1 | 	add	local04, #1
0d870     C8 FF 9F FD | 	jmp	#LR__1110
0d874                 | LR__1111
0d874                 | ' return s
0d874     55 7B 02 F6 | 	mov	result1, local03
0d878     E7 F0 03 F6 | 	mov	ptra, fp
0d87c     F2 00 A0 FD | 	call	#popregs_
0d880                 | _convertstring_ret
0d880     2D 00 64 FD | 	ret
0d884                 | 
0d884                 | ' 
0d884                 | ' ' converts a variable to an integer
0d884                 | ' 
0d884                 | ' function converttoint (t1 as expr_result) as integer 
0d884                 | _converttoint
0d884     02 CA 05 F6 | 	mov	COUNT_, #2
0d888     E8 00 A0 FD | 	call	#pushregs_
0d88c     49 A7 02 F6 | 	mov	local01, arg01
0d890                 | ' 
0d890                 | ' select case t1.result_type
0d890     08 A6 06 F1 | 	add	local01, #8
0d894     53 A9 02 FB | 	rdlong	local02, local01
0d898     08 A6 86 F1 | 	sub	local01, #8
0d89c     1C A8 0E F2 | 	cmp	local02, #28 wz
0d8a0     2C 00 90 AD |  if_e	jmp	#LR__1120
0d8a4     1D A8 0E F2 | 	cmp	local02, #29 wz
0d8a8     2C 00 90 AD |  if_e	jmp	#LR__1121
0d8ac     1E A8 0E F2 | 	cmp	local02, #30 wz
0d8b0     2C 00 90 AD |  if_e	jmp	#LR__1122
0d8b4     1F A8 0E F2 | 	cmp	local02, #31 wz
0d8b8     34 00 90 AD |  if_e	jmp	#LR__1123
0d8bc     2B A8 0E F2 | 	cmp	local02, #43 wz
0d8c0     44 00 90 AD |  if_e	jmp	#LR__1124
0d8c4     2C A8 0E F2 | 	cmp	local02, #44 wz
0d8c8     5C 00 90 AD |  if_e	jmp	#LR__1125
0d8cc     60 00 90 FD | 	jmp	#LR__1126
0d8d0                 | LR__1120
0d8d0     53 7B 02 FB | 	rdlong	result1, local01
0d8d4     5C 00 90 FD | 	jmp	#LR__1127
0d8d8                 | LR__1121
0d8d8     53 7B 02 FB | 	rdlong	result1, local01
0d8dc     54 00 90 FD | 	jmp	#LR__1127
0d8e0                 | LR__1122
0d8e0     53 93 02 FB | 	rdlong	arg01, local01
0d8e4     01 94 06 F6 | 	mov	arg02, #1
0d8e8     88 9C B1 FD | 	call	#__system___float_tointeger
0d8ec     44 00 90 FD | 	jmp	#LR__1127
0d8f0                 | LR__1123
0d8f0     53 93 02 FB | 	rdlong	arg01, local01
0d8f4     D0 9F B1 FD | 	call	#__system____builtin_atof
0d8f8     3D 93 02 F6 | 	mov	arg01, result1
0d8fc     01 94 06 F6 | 	mov	arg02, #1
0d900     70 9C B1 FD | 	call	#__system___float_tointeger
0d904     2C 00 90 FD | 	jmp	#LR__1127
0d908                 | LR__1124
0d908     53 93 02 FB | 	rdlong	arg01, local01
0d90c     08 FF BF FD | 	call	#_convertstring
0d910     3D 93 02 F6 | 	mov	arg01, result1
0d914     B0 9F B1 FD | 	call	#__system____builtin_atof
0d918     3D 93 02 F6 | 	mov	arg01, result1
0d91c     01 94 06 F6 | 	mov	arg02, #1
0d920     50 9C B1 FD | 	call	#__system___float_tointeger
0d924     0C 00 90 FD | 	jmp	#LR__1127
0d928                 | LR__1125
0d928     53 7B 02 FB | 	rdlong	result1, local01
0d92c     04 00 90 FD | 	jmp	#LR__1127
0d930                 | LR__1126
0d930     00 7A 06 F6 | 	mov	result1, #0
0d934                 | LR__1127
0d934     E7 F0 03 F6 | 	mov	ptra, fp
0d938     F2 00 A0 FD | 	call	#popregs_
0d93c                 | _converttoint_ret
0d93c     2D 00 64 FD | 	ret
0d940                 | 
0d940                 | ' 
0d940                 | ' ' converts a variable to float
0d940                 | ' 
0d940                 | ' function converttofloat (t1 as expr_result) as single
0d940                 | _converttofloat
0d940     03 CA 05 F6 | 	mov	COUNT_, #3
0d944     E8 00 A0 FD | 	call	#pushregs_
0d948     49 A7 02 F6 | 	mov	local01, arg01
0d94c                 | ' 
0d94c                 | ' select case t1.result_type
0d94c     08 A6 06 F1 | 	add	local01, #8
0d950     53 A9 02 FB | 	rdlong	local02, local01
0d954     08 A6 86 F1 | 	sub	local01, #8
0d958     1C A8 0E F2 | 	cmp	local02, #28 wz
0d95c     24 00 90 AD |  if_e	jmp	#LR__1130
0d960     1D A8 0E F2 | 	cmp	local02, #29 wz
0d964     38 00 90 AD |  if_e	jmp	#LR__1131
0d968     1E A8 0E F2 | 	cmp	local02, #30 wz
0d96c     3C 00 90 AD |  if_e	jmp	#LR__1132
0d970     1F A8 0E F2 | 	cmp	local02, #31 wz
0d974     3C 00 90 AD |  if_e	jmp	#LR__1133
0d978     2B A8 0E F2 | 	cmp	local02, #43 wz
0d97c     40 00 90 AD |  if_e	jmp	#LR__1134
0d980     50 00 90 FD | 	jmp	#LR__1135
0d984                 | LR__1130
0d984     53 93 02 FB | 	rdlong	arg01, local01
0d988     49 93 52 F6 | 	abs	arg01, arg01 wc
0d98c     1F AA C6 C9 |  if_b	decod	local03, #31
0d990     00 AA 06 36 |  if_ae	mov	local03, #0
0d994     10 93 B1 FD | 	call	#__system___float_fromuns
0d998     55 7B 62 F5 | 	xor	result1, local03
0d99c     38 00 90 FD | 	jmp	#LR__1136
0d9a0                 | LR__1131
0d9a0     53 93 02 FB | 	rdlong	arg01, local01
0d9a4     00 93 B1 FD | 	call	#__system___float_fromuns
0d9a8     2C 00 90 FD | 	jmp	#LR__1136
0d9ac                 | LR__1132
0d9ac     53 7B 02 FB | 	rdlong	result1, local01
0d9b0     24 00 90 FD | 	jmp	#LR__1136
0d9b4                 | LR__1133
0d9b4     53 93 02 FB | 	rdlong	arg01, local01
0d9b8     0C 9F B1 FD | 	call	#__system____builtin_atof
0d9bc     18 00 90 FD | 	jmp	#LR__1136
0d9c0                 | LR__1134
0d9c0     53 93 02 FB | 	rdlong	arg01, local01
0d9c4     50 FE BF FD | 	call	#_convertstring
0d9c8     3D 93 02 F6 | 	mov	arg01, result1
0d9cc     F8 9E B1 FD | 	call	#__system____builtin_atof
0d9d0     04 00 90 FD | 	jmp	#LR__1136
0d9d4                 | LR__1135
0d9d4     00 7A 06 F6 | 	mov	result1, #0
0d9d8                 | LR__1136
0d9d8     E7 F0 03 F6 | 	mov	ptra, fp
0d9dc     F2 00 A0 FD | 	call	#popregs_
0d9e0                 | _converttofloat_ret
0d9e0     2D 00 64 FD | 	ret
0d9e4                 | 
0d9e4                 | ' 
0d9e4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9e4                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d9e4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9e4                 | ' 
0d9e4                 | ' 
0d9e4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9e4                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d9e4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d9e4                 | ' 
0d9e4                 | ' '-------------------- abs
0d9e4                 | ' 
0d9e4                 | ' sub do_abs
0d9e4                 | _do_abs
0d9e4     01 CA 05 F6 | 	mov	COUNT_, #1
0d9e8     E8 00 A0 FD | 	call	#pushregs_
0d9ec     0C F0 07 F1 | 	add	ptra, #12
0d9f0     B4 FC BF FD | 	call	#_pop
0d9f4     3F A7 02 F6 | 	mov	local01, result3
0d9f8     E7 7A 62 FC | 	wrlong	result1, fp
0d9fc     04 CE 05 F1 | 	add	fp, #4
0da00     E7 7C 62 FC | 	wrlong	result2, fp
0da04     04 CE 05 F1 | 	add	fp, #4
0da08     E7 A6 62 FC | 	wrlong	local01, fp
0da0c                 | ' 
0da0c                 | ' t1=pop()
0da0c                 | ' if t1.result_type=result_int then 
0da0c     08 CE 85 F1 | 	sub	fp, #8
0da10     1C A6 0E F2 | 	cmp	local01, #28 wz
0da14     E7 92 02 AB |  if_e	rdlong	arg01, fp
0da18     49 A7 42 A6 |  if_e	abs	local01, arg01
0da1c     E7 A6 62 AC |  if_e	wrlong	local01, fp
0da20     2C 00 90 AD |  if_e	jmp	#LR__1140
0da24     08 CE 05 F1 | 	add	fp, #8
0da28     E7 A6 02 FB | 	rdlong	local01, fp
0da2c     08 CE 85 F1 | 	sub	fp, #8
0da30     1E A6 0E F2 | 	cmp	local01, #30 wz
0da34     E7 7A 02 AB |  if_e	rdlong	result1, fp
0da38     1F 7A 06 A4 |  if_e	bitl	result1, #31
0da3c     E7 7A 62 AC |  if_e	wrlong	result1, fp
0da40     08 CE 05 51 |  if_ne	add	fp, #8
0da44     E7 FE 69 5C |  if_ne	wrlong	#255, fp
0da48     08 CE 85 51 |  if_ne	sub	fp, #8
0da4c     E7 50 68 5C |  if_ne	wrlong	#40, fp
0da50                 | LR__1140
0da50     E7 92 02 F6 | 	mov	arg01, fp
0da54     E0 FC BF FD | 	call	#_push
0da58     E7 F0 03 F6 | 	mov	ptra, fp
0da5c     F2 00 A0 FD | 	call	#popregs_
0da60                 | _do_abs_ret
0da60     2D 00 64 FD | 	ret
0da64                 | 
0da64                 | ' 
0da64                 | ' '-------------------- acos
0da64                 | ' 
0da64                 | ' sub do_acos
0da64                 | _do_acos
0da64     00 CA 05 F6 | 	mov	COUNT_, #0
0da68     E8 00 A0 FD | 	call	#pushregs_
0da6c     10 F0 07 F1 | 	add	ptra, #16
0da70     4B 00 00 FF 
0da74     A0 64 06 F1 | 	add	objptr, ##38560
0da78     32 97 02 FB | 	rdlong	arg03, objptr
0da7c     4B 95 02 F6 | 	mov	arg02, arg03
0da80     01 94 66 F0 | 	shl	arg02, #1
0da84     4B 95 02 F1 | 	add	arg02, arg03
0da88     02 94 66 F0 | 	shl	arg02, #2
0da8c     03 00 00 FF 
0da90     04 64 86 F1 | 	sub	objptr, ##1540
0da94     32 95 02 F1 | 	add	arg02, objptr
0da98     4A 97 02 FB | 	rdlong	arg03, arg02
0da9c                 | ' 
0da9c                 | ' numpar=compiledline(lineptr_e).result.uresult
0da9c                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0da9c     02 96 16 F2 | 	cmp	arg03, #2 wc
0daa0     48 00 00 FF 
0daa4     9C 64 86 F1 | 	sub	objptr, ##37020
0daa8     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0daac     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0dab0     00 92 06 F6 | 	mov	arg01, #0
0dab4     A8 C4 B1 FD | 	call	#__system___getiolock_0622
0dab8     3D 93 02 F6 | 	mov	arg01, result1
0dabc     1C 6F B1 FD | 	call	#__system___lockmem
0dac0     96 01 00 FF 
0dac4     B0 94 06 F6 | 	mov	arg02, ##@LR__5943
0dac8     00 92 06 F6 | 	mov	arg01, #0
0dacc     00 96 06 F6 | 	mov	arg03, #0
0dad0     FC 7B B1 FD | 	call	#__system___basic_print_string
0dad4     00 92 06 F6 | 	mov	arg01, #0
0dad8     84 C4 B1 FD | 	call	#__system___getiolock_0622
0dadc     3D 01 68 FC | 	wrlong	#0, result1
0dae0     27 92 06 F6 | 	mov	arg01, #39
0dae4     00 94 06 F6 | 	mov	arg02, #0
0dae8     74 35 B1 FD | 	call	#_printerror
0daec     64 00 90 FD | 	jmp	#LR__1151
0daf0                 | LR__1150
0daf0     B4 FB BF FD | 	call	#_pop
0daf4     3F 97 02 F6 | 	mov	arg03, result3
0daf8     E7 7A 62 FC | 	wrlong	result1, fp
0dafc     04 CE 05 F1 | 	add	fp, #4
0db00     E7 7C 62 FC | 	wrlong	result2, fp
0db04     04 CE 05 F1 | 	add	fp, #4
0db08     E7 96 62 FC | 	wrlong	arg03, fp
0db0c     08 CE 85 F1 | 	sub	fp, #8
0db10     E7 92 02 F6 | 	mov	arg01, fp
0db14     28 FE BF FD | 	call	#_converttofloat
0db18     3D 93 02 F6 | 	mov	arg01, result1
0db1c     DC A0 B1 FD | 	call	#__system____builtin_acosf
0db20     3D 93 02 F6 | 	mov	arg01, result1
0db24     53 00 00 FF 
0db28     04 65 06 F1 | 	add	objptr, ##42756
0db2c     32 95 02 FB | 	rdlong	arg02, objptr
0db30     53 00 00 FF 
0db34     04 65 86 F1 | 	sub	objptr, ##42756
0db38     70 95 B1 FD | 	call	#__system___float_mul
0db3c     E7 7A 62 FC | 	wrlong	result1, fp
0db40     08 CE 05 F1 | 	add	fp, #8
0db44     E7 3C 68 FC | 	wrlong	#30, fp
0db48     08 CE 85 F1 | 	sub	fp, #8
0db4c     E7 92 02 F6 | 	mov	arg01, fp
0db50     E4 FB BF FD | 	call	#_push
0db54                 | LR__1151
0db54     E7 F0 03 F6 | 	mov	ptra, fp
0db58     F2 00 A0 FD | 	call	#popregs_
0db5c                 | _do_acos_ret
0db5c     2D 00 64 FD | 	ret
0db60                 | 
0db60                 | ' 
0db60                 | ' '-------------------- asc
0db60                 | ' 
0db60                 | ' sub do_asc
0db60                 | _do_asc
0db60     00 CA 05 F6 | 	mov	COUNT_, #0
0db64     E8 00 A0 FD | 	call	#pushregs_
0db68     14 F0 07 F1 | 	add	ptra, #20
0db6c     4B 00 00 FF 
0db70     A0 64 06 F1 | 	add	objptr, ##38560
0db74     32 97 02 FB | 	rdlong	arg03, objptr
0db78     4B 95 02 F6 | 	mov	arg02, arg03
0db7c     01 94 66 F0 | 	shl	arg02, #1
0db80     4B 95 02 F1 | 	add	arg02, arg03
0db84     02 94 66 F0 | 	shl	arg02, #2
0db88     03 00 00 FF 
0db8c     04 64 86 F1 | 	sub	objptr, ##1540
0db90     32 95 02 F1 | 	add	arg02, objptr
0db94     4A 97 02 FB | 	rdlong	arg03, arg02
0db98                 | ' 
0db98                 | ' numpar=compiledline(lineptr_e).result.uresult
0db98                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0db98     02 96 16 F2 | 	cmp	arg03, #2 wc
0db9c     48 00 00 FF 
0dba0     9C 64 86 F1 | 	sub	objptr, ##37020
0dba4     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0dba8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0dbac     00 92 06 F6 | 	mov	arg01, #0
0dbb0     AC C3 B1 FD | 	call	#__system___getiolock_0622
0dbb4     3D 93 02 F6 | 	mov	arg01, result1
0dbb8     20 6E B1 FD | 	call	#__system___lockmem
0dbbc     96 01 00 FF 
0dbc0     B7 94 06 F6 | 	mov	arg02, ##@LR__5944
0dbc4     00 92 06 F6 | 	mov	arg01, #0
0dbc8     00 96 06 F6 | 	mov	arg03, #0
0dbcc     00 7B B1 FD | 	call	#__system___basic_print_string
0dbd0     00 92 06 F6 | 	mov	arg01, #0
0dbd4     88 C3 B1 FD | 	call	#__system___getiolock_0622
0dbd8     3D 01 68 FC | 	wrlong	#0, result1
0dbdc     27 92 06 F6 | 	mov	arg01, #39
0dbe0     00 94 06 F6 | 	mov	arg02, #0
0dbe4     78 34 B1 FD | 	call	#_printerror
0dbe8     B4 00 90 FD | 	jmp	#LR__1163
0dbec                 | LR__1160
0dbec     B8 FA BF FD | 	call	#_pop
0dbf0     3F 97 02 F6 | 	mov	arg03, result3
0dbf4     E7 7A 62 FC | 	wrlong	result1, fp
0dbf8     04 CE 05 F1 | 	add	fp, #4
0dbfc     E7 7C 62 FC | 	wrlong	result2, fp
0dc00     04 CE 05 F1 | 	add	fp, #4
0dc04     E7 96 62 FC | 	wrlong	arg03, fp
0dc08                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0dc08     08 CE 85 F1 | 	sub	fp, #8
0dc0c     2B 96 0E F2 | 	cmp	arg03, #43 wz
0dc10     18 00 90 5D |  if_ne	jmp	#LR__1161
0dc14     E7 92 02 FB | 	rdlong	arg01, fp
0dc18     FC FB BF FD | 	call	#_convertstring
0dc1c     E7 7A 62 FC | 	wrlong	result1, fp
0dc20     08 CE 05 F1 | 	add	fp, #8
0dc24     E7 3E 68 FC | 	wrlong	#31, fp
0dc28     08 CE 85 F1 | 	sub	fp, #8
0dc2c                 | LR__1161
0dc2c                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0dc2c     08 CE 05 F1 | 	add	fp, #8
0dc30     E7 96 02 FB | 	rdlong	arg03, fp
0dc34     08 CE 85 F1 | 	sub	fp, #8
0dc38     1F 96 0E F2 | 	cmp	arg03, #31 wz
0dc3c     40 00 90 AD |  if_e	jmp	#LR__1162
0dc40     00 92 06 F6 | 	mov	arg01, #0
0dc44     18 C3 B1 FD | 	call	#__system___getiolock_0622
0dc48     3D 93 02 F6 | 	mov	arg01, result1
0dc4c     8C 6D B1 FD | 	call	#__system___lockmem
0dc50     96 01 00 FF 
0dc54     BD 94 06 F6 | 	mov	arg02, ##@LR__5945
0dc58     00 92 06 F6 | 	mov	arg01, #0
0dc5c     00 96 06 F6 | 	mov	arg03, #0
0dc60     6C 7A B1 FD | 	call	#__system___basic_print_string
0dc64     00 92 06 F6 | 	mov	arg01, #0
0dc68     F4 C2 B1 FD | 	call	#__system___getiolock_0622
0dc6c     3D 01 68 FC | 	wrlong	#0, result1
0dc70     0F 92 06 F6 | 	mov	arg01, #15
0dc74     00 94 06 F6 | 	mov	arg02, #0
0dc78     E4 33 B1 FD | 	call	#_printerror
0dc7c     20 00 90 FD | 	jmp	#LR__1163
0dc80                 | LR__1162
0dc80     E7 7C 02 FB | 	rdlong	result2, fp
0dc84     3E 7D C2 FA | 	rdbyte	result2, result2
0dc88     E7 7C 62 FC | 	wrlong	result2, fp
0dc8c     08 CE 05 F1 | 	add	fp, #8
0dc90     E7 38 68 FC | 	wrlong	#28, fp
0dc94     08 CE 85 F1 | 	sub	fp, #8
0dc98     E7 92 02 F6 | 	mov	arg01, fp
0dc9c     98 FA BF FD | 	call	#_push
0dca0                 | LR__1163
0dca0     E7 F0 03 F6 | 	mov	ptra, fp
0dca4     F2 00 A0 FD | 	call	#popregs_
0dca8                 | _do_asc_ret
0dca8     2D 00 64 FD | 	ret
0dcac                 | 
0dcac                 | ' 
0dcac                 | ' '-------------------- asin
0dcac                 | ' 
0dcac                 | ' sub do_asin
0dcac                 | _do_asin
0dcac     00 CA 05 F6 | 	mov	COUNT_, #0
0dcb0     E8 00 A0 FD | 	call	#pushregs_
0dcb4     10 F0 07 F1 | 	add	ptra, #16
0dcb8     4B 00 00 FF 
0dcbc     A0 64 06 F1 | 	add	objptr, ##38560
0dcc0     32 97 02 FB | 	rdlong	arg03, objptr
0dcc4     4B 95 02 F6 | 	mov	arg02, arg03
0dcc8     01 94 66 F0 | 	shl	arg02, #1
0dccc     4B 95 02 F1 | 	add	arg02, arg03
0dcd0     02 94 66 F0 | 	shl	arg02, #2
0dcd4     03 00 00 FF 
0dcd8     04 64 86 F1 | 	sub	objptr, ##1540
0dcdc     32 95 02 F1 | 	add	arg02, objptr
0dce0     4A 97 02 FB | 	rdlong	arg03, arg02
0dce4                 | ' 
0dce4                 | ' numpar=compiledline(lineptr_e).result.uresult
0dce4                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0dce4     02 96 16 F2 | 	cmp	arg03, #2 wc
0dce8     48 00 00 FF 
0dcec     9C 64 86 F1 | 	sub	objptr, ##37020
0dcf0     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0dcf4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0dcf8     00 92 06 F6 | 	mov	arg01, #0
0dcfc     60 C2 B1 FD | 	call	#__system___getiolock_0622
0dd00     3D 93 02 F6 | 	mov	arg01, result1
0dd04     D4 6C B1 FD | 	call	#__system___lockmem
0dd08     96 01 00 FF 
0dd0c     C3 94 06 F6 | 	mov	arg02, ##@LR__5946
0dd10     00 92 06 F6 | 	mov	arg01, #0
0dd14     00 96 06 F6 | 	mov	arg03, #0
0dd18     B4 79 B1 FD | 	call	#__system___basic_print_string
0dd1c     00 92 06 F6 | 	mov	arg01, #0
0dd20     3C C2 B1 FD | 	call	#__system___getiolock_0622
0dd24     3D 01 68 FC | 	wrlong	#0, result1
0dd28     27 92 06 F6 | 	mov	arg01, #39
0dd2c     00 94 06 F6 | 	mov	arg02, #0
0dd30     2C 33 B1 FD | 	call	#_printerror
0dd34     64 00 90 FD | 	jmp	#LR__1171
0dd38                 | LR__1170
0dd38     6C F9 BF FD | 	call	#_pop
0dd3c     3F 97 02 F6 | 	mov	arg03, result3
0dd40     E7 7A 62 FC | 	wrlong	result1, fp
0dd44     04 CE 05 F1 | 	add	fp, #4
0dd48     E7 7C 62 FC | 	wrlong	result2, fp
0dd4c     04 CE 05 F1 | 	add	fp, #4
0dd50     E7 96 62 FC | 	wrlong	arg03, fp
0dd54     08 CE 85 F1 | 	sub	fp, #8
0dd58     E7 92 02 F6 | 	mov	arg01, fp
0dd5c     E0 FB BF FD | 	call	#_converttofloat
0dd60     3D 93 02 F6 | 	mov	arg01, result1
0dd64     48 9E B1 FD | 	call	#__system____builtin_asinf
0dd68     3D 93 02 F6 | 	mov	arg01, result1
0dd6c     53 00 00 FF 
0dd70     04 65 06 F1 | 	add	objptr, ##42756
0dd74     32 95 02 FB | 	rdlong	arg02, objptr
0dd78     53 00 00 FF 
0dd7c     04 65 86 F1 | 	sub	objptr, ##42756
0dd80     28 93 B1 FD | 	call	#__system___float_mul
0dd84     E7 7A 62 FC | 	wrlong	result1, fp
0dd88     08 CE 05 F1 | 	add	fp, #8
0dd8c     E7 3C 68 FC | 	wrlong	#30, fp
0dd90     08 CE 85 F1 | 	sub	fp, #8
0dd94     E7 92 02 F6 | 	mov	arg01, fp
0dd98     9C F9 BF FD | 	call	#_push
0dd9c                 | LR__1171
0dd9c     E7 F0 03 F6 | 	mov	ptra, fp
0dda0     F2 00 A0 FD | 	call	#popregs_
0dda4                 | _do_asin_ret
0dda4     2D 00 64 FD | 	ret
0dda8                 | 
0dda8                 | ' 
0dda8                 | ' '-------------------- atn
0dda8                 | ' 
0dda8                 | ' sub do_atn
0dda8                 | _do_atn
0dda8     00 CA 05 F6 | 	mov	COUNT_, #0
0ddac     E8 00 A0 FD | 	call	#pushregs_
0ddb0     10 F0 07 F1 | 	add	ptra, #16
0ddb4     4B 00 00 FF 
0ddb8     A0 64 06 F1 | 	add	objptr, ##38560
0ddbc     32 97 02 FB | 	rdlong	arg03, objptr
0ddc0     4B 95 02 F6 | 	mov	arg02, arg03
0ddc4     01 94 66 F0 | 	shl	arg02, #1
0ddc8     4B 95 02 F1 | 	add	arg02, arg03
0ddcc     02 94 66 F0 | 	shl	arg02, #2
0ddd0     03 00 00 FF 
0ddd4     04 64 86 F1 | 	sub	objptr, ##1540
0ddd8     32 95 02 F1 | 	add	arg02, objptr
0dddc     4A 97 02 FB | 	rdlong	arg03, arg02
0dde0                 | ' 
0dde0                 | ' numpar=compiledline(lineptr_e).result.uresult
0dde0                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0dde0     02 96 16 F2 | 	cmp	arg03, #2 wc
0dde4     48 00 00 FF 
0dde8     9C 64 86 F1 | 	sub	objptr, ##37020
0ddec     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0ddf0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1180
0ddf4     00 92 06 F6 | 	mov	arg01, #0
0ddf8     64 C1 B1 FD | 	call	#__system___getiolock_0622
0ddfc     3D 93 02 F6 | 	mov	arg01, result1
0de00     D8 6B B1 FD | 	call	#__system___lockmem
0de04     96 01 00 FF 
0de08     CA 94 06 F6 | 	mov	arg02, ##@LR__5947
0de0c     00 92 06 F6 | 	mov	arg01, #0
0de10     00 96 06 F6 | 	mov	arg03, #0
0de14     B8 78 B1 FD | 	call	#__system___basic_print_string
0de18     00 92 06 F6 | 	mov	arg01, #0
0de1c     40 C1 B1 FD | 	call	#__system___getiolock_0622
0de20     3D 01 68 FC | 	wrlong	#0, result1
0de24     27 92 06 F6 | 	mov	arg01, #39
0de28     00 94 06 F6 | 	mov	arg02, #0
0de2c     30 32 B1 FD | 	call	#_printerror
0de30     6C 00 90 FD | 	jmp	#LR__1181
0de34                 | LR__1180
0de34     70 F8 BF FD | 	call	#_pop
0de38     3F 97 02 F6 | 	mov	arg03, result3
0de3c     E7 7A 62 FC | 	wrlong	result1, fp
0de40     04 CE 05 F1 | 	add	fp, #4
0de44     E7 7C 62 FC | 	wrlong	result2, fp
0de48     04 CE 05 F1 | 	add	fp, #4
0de4c     E7 96 62 FC | 	wrlong	arg03, fp
0de50     08 CE 85 F1 | 	sub	fp, #8
0de54     E7 92 02 F6 | 	mov	arg01, fp
0de58     E4 FA BF FD | 	call	#_converttofloat
0de5c     3D 93 02 F6 | 	mov	arg01, result1
0de60     00 C0 1F FF 
0de64     00 94 06 F6 | 	mov	arg02, ##1065353216
0de68     DC 9D B1 FD | 	call	#__system____builtin_atan2f
0de6c     3D 93 02 F6 | 	mov	arg01, result1
0de70     53 00 00 FF 
0de74     04 65 06 F1 | 	add	objptr, ##42756
0de78     32 95 02 FB | 	rdlong	arg02, objptr
0de7c     53 00 00 FF 
0de80     04 65 86 F1 | 	sub	objptr, ##42756
0de84     24 92 B1 FD | 	call	#__system___float_mul
0de88     E7 7A 62 FC | 	wrlong	result1, fp
0de8c     08 CE 05 F1 | 	add	fp, #8
0de90     E7 3C 68 FC | 	wrlong	#30, fp
0de94     08 CE 85 F1 | 	sub	fp, #8
0de98     E7 92 02 F6 | 	mov	arg01, fp
0de9c     98 F8 BF FD | 	call	#_push
0dea0                 | LR__1181
0dea0     E7 F0 03 F6 | 	mov	ptra, fp
0dea4     F2 00 A0 FD | 	call	#popregs_
0dea8                 | _do_atn_ret
0dea8     2D 00 64 FD | 	ret
0deac                 | 
0deac                 | ' 
0deac                 | ' '-------------------- beep
0deac                 | ' 
0deac                 | ' sub do_beep
0deac                 | _do_beep
0deac     02 CA 05 F6 | 	mov	COUNT_, #2
0deb0     E8 00 A0 FD | 	call	#pushregs_
0deb4     20 F0 07 F1 | 	add	ptra, #32
0deb8     EC F7 BF FD | 	call	#_pop
0debc     3D 9D 02 F6 | 	mov	arg06, result1
0dec0     3E 9B 02 F6 | 	mov	arg05, result2
0dec4     3F A7 02 F6 | 	mov	local01, result3
0dec8     0C CE 05 F1 | 	add	fp, #12
0decc     E7 9C 62 FC | 	wrlong	arg06, fp
0ded0     04 CE 05 F1 | 	add	fp, #4
0ded4     E7 9A 62 FC | 	wrlong	arg05, fp
0ded8     04 CE 05 F1 | 	add	fp, #4
0dedc     E7 A6 62 FC | 	wrlong	local01, fp
0dee0     14 CE 85 F1 | 	sub	fp, #20
0dee4     C0 F7 BF FD | 	call	#_pop
0dee8     E7 7A 62 FC | 	wrlong	result1, fp
0deec     04 CE 05 F1 | 	add	fp, #4
0def0     E7 7C 62 FC | 	wrlong	result2, fp
0def4     04 CE 05 F1 | 	add	fp, #4
0def8     E7 7E 62 FC | 	wrlong	result3, fp
0defc                 | ' 
0defc                 | ' t2=pop()
0defc                 | ' t1=pop()
0defc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0defc     3F 9D 02 F6 | 	mov	arg06, result3
0df00     08 CE 85 F1 | 	sub	fp, #8
0df04     1C 9C 0E F2 | 	cmp	arg06, #28 wz
0df08     08 CE 05 51 |  if_ne	add	fp, #8
0df0c     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0df10     08 CE 85 51 |  if_ne	sub	fp, #8
0df14     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0df18     E7 A8 02 AB |  if_e	rdlong	local02, fp
0df1c     0C 00 90 AD |  if_e	jmp	#LR__1190
0df20     E7 92 02 F6 | 	mov	arg01, fp
0df24     5C F9 BF FD | 	call	#_converttoint
0df28     3D A9 02 F6 | 	mov	local02, result1
0df2c                 | LR__1190
0df2c     1C CE 05 F1 | 	add	fp, #28
0df30     E7 FE 48 FC | 	wrbyte	#127, fp
0df34     01 CE 05 F1 | 	add	fp, #1
0df38     E7 00 49 FC | 	wrbyte	#128, fp
0df3c     01 CE 85 F1 | 	sub	fp, #1
0df40     E7 94 02 F6 | 	mov	arg02, fp
0df44     1C CE 85 F1 | 	sub	fp, #28
0df48     01 A8 66 F0 | 	shl	local02, #1
0df4c     07 92 06 F6 | 	mov	arg01, #7
0df50     54 97 02 F6 | 	mov	arg03, local02
0df54     0E 98 C6 F9 | 	decod	arg04, #14
0df58     02 9A 06 F6 | 	mov	arg05, #2
0df5c     00 9C 06 F6 | 	mov	arg06, #0
0df60     0B 00 00 FF 
0df64     CC 64 06 F1 | 	add	objptr, ##5836
0df68     30 66 B1 FD | 	call	#_Audio2_003_spin2_play8
0df6c     0B 00 00 FF 
0df70     CC 64 86 F1 | 	sub	objptr, ##5836
0df74     E7 92 02 F6 | 	mov	arg01, fp
0df78     0C 92 06 F1 | 	add	arg01, #12
0df7c     B8 F7 BF FD | 	call	#_push
0df80     C0 D7 B0 FD | 	call	#_do_waitms
0df84     0B 00 00 FF 
0df88     CC 64 06 F1 | 	add	objptr, ##5836
0df8c                 | ' 
0df8c                 | ' word[@channel1[0]+64*channel+32]:=0
0df8c     32 A9 02 F6 | 	mov	local02, objptr
0df90     01 00 00 FF 
0df94     2C A8 06 F1 | 	add	local02, ##556
0df98     54 01 58 FC | 	wrword	#0, local02
0df9c     0B 00 00 FF 
0dfa0     CC 64 86 F1 | 	sub	objptr, ##5836
0dfa4     E7 F0 03 F6 | 	mov	ptra, fp
0dfa8     F2 00 A0 FD | 	call	#popregs_
0dfac                 | _do_beep_ret
0dfac     2D 00 64 FD | 	ret
0dfb0                 | 
0dfb0                 | ' 
0dfb0                 | ' '-------------------- blit
0dfb0                 | ' 
0dfb0                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0dfb0                 | ' sub do_blit
0dfb0                 | _do_blit
0dfb0     03 CA 05 F6 | 	mov	COUNT_, #3
0dfb4     E8 00 A0 FD | 	call	#pushregs_
0dfb8     3C F0 07 F1 | 	add	ptra, #60
0dfbc     4B 00 00 FF 
0dfc0     A0 64 06 F1 | 	add	objptr, ##38560
0dfc4     32 A5 02 FB | 	rdlong	arg10, objptr
0dfc8     52 A3 02 F6 | 	mov	arg09, arg10
0dfcc     01 A2 66 F0 | 	shl	arg09, #1
0dfd0     52 A3 02 F1 | 	add	arg09, arg10
0dfd4     02 A2 66 F0 | 	shl	arg09, #2
0dfd8     03 00 00 FF 
0dfdc     04 64 86 F1 | 	sub	objptr, ##1540
0dfe0     32 A3 02 F1 | 	add	arg09, objptr
0dfe4     51 A7 02 FB | 	rdlong	local01, arg09
0dfe8                 | ' 
0dfe8                 | ' numpar=compiledline(lineptr_e).result.uresult
0dfe8                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0dfe8     0A A6 0E F2 | 	cmp	local01, #10 wz
0dfec     48 00 00 FF 
0dff0     9C 64 86 F1 | 	sub	objptr, ##37020
0dff4     06 A6 0E 52 |  if_ne	cmp	local01, #6 wz
0dff8     50 00 90 AD |  if_e	jmp	#LR__1200
0dffc     00 92 06 F6 | 	mov	arg01, #0
0e000     5C BF B1 FD | 	call	#__system___getiolock_0622
0e004     3D 93 02 F6 | 	mov	arg01, result1
0e008     D0 69 B1 FD | 	call	#__system___lockmem
0e00c     96 01 00 FF 
0e010     D0 94 06 F6 | 	mov	arg02, ##@LR__5948
0e014     00 92 06 F6 | 	mov	arg01, #0
0e018     00 96 06 F6 | 	mov	arg03, #0
0e01c     B0 76 B1 FD | 	call	#__system___basic_print_string
0e020     00 92 06 F6 | 	mov	arg01, #0
0e024     38 BF B1 FD | 	call	#__system___getiolock_0622
0e028     3D 01 68 FC | 	wrlong	#0, result1
0e02c     51 00 00 FF 
0e030     10 65 06 F1 | 	add	objptr, ##41744
0e034     32 95 02 FB | 	rdlong	arg02, objptr
0e038     51 00 00 FF 
0e03c     10 65 86 F1 | 	sub	objptr, ##41744
0e040     27 92 06 F6 | 	mov	arg01, #39
0e044     18 30 B1 FD | 	call	#_printerror
0e048     04 01 90 FD | 	jmp	#LR__1205
0e04c                 | LR__1200
0e04c                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0e04c     53 A9 02 F6 | 	mov	local02, local01
0e050     01 A8 86 F1 | 	sub	local02, #1
0e054                 | LR__1201
0e054     53 A5 02 F6 | 	mov	arg10, local01
0e058     01 A4 86 F1 | 	sub	arg10, #1
0e05c     52 A9 1A F2 | 	cmp	local02, arg10 wcz
0e060     40 00 90 1D |  if_a	jmp	#LR__1202
0e064     40 F6 BF FD | 	call	#_pop
0e068     E7 7A 62 FC | 	wrlong	result1, fp
0e06c     04 CE 05 F1 | 	add	fp, #4
0e070     E7 7C 62 FC | 	wrlong	result2, fp
0e074     04 CE 05 F1 | 	add	fp, #4
0e078     E7 7E 62 FC | 	wrlong	result3, fp
0e07c     54 AB 02 F6 | 	mov	local03, local02
0e080     02 AA 66 F0 | 	shl	local03, #2
0e084     04 CE 05 F1 | 	add	fp, #4
0e088     E7 AA 02 F1 | 	add	local03, fp
0e08c     0C CE 85 F1 | 	sub	fp, #12
0e090     E7 92 02 F6 | 	mov	arg01, fp
0e094     EC F7 BF FD | 	call	#_converttoint
0e098     55 7B 62 FC | 	wrlong	result1, local03
0e09c     01 A8 86 F1 | 	sub	local02, #1
0e0a0     B0 FF 9F FD | 	jmp	#LR__1201
0e0a4                 | LR__1202
0e0a4                 | ' if numpar=10 then 
0e0a4     0A A6 0E F2 | 	cmp	local01, #10 wz
0e0a8     5C 00 90 5D |  if_ne	jmp	#LR__1203
0e0ac     0C CE 05 F1 | 	add	fp, #12
0e0b0     E7 92 02 FB | 	rdlong	arg01, fp
0e0b4     04 CE 05 F1 | 	add	fp, #4
0e0b8     E7 94 02 FB | 	rdlong	arg02, fp
0e0bc     04 CE 05 F1 | 	add	fp, #4
0e0c0     E7 96 02 FB | 	rdlong	arg03, fp
0e0c4     04 CE 05 F1 | 	add	fp, #4
0e0c8     E7 98 02 FB | 	rdlong	arg04, fp
0e0cc     04 CE 05 F1 | 	add	fp, #4
0e0d0     E7 9A 02 FB | 	rdlong	arg05, fp
0e0d4     04 CE 05 F1 | 	add	fp, #4
0e0d8     E7 9C 02 FB | 	rdlong	arg06, fp
0e0dc     04 CE 05 F1 | 	add	fp, #4
0e0e0     E7 9E 02 FB | 	rdlong	arg07, fp
0e0e4     04 CE 05 F1 | 	add	fp, #4
0e0e8     E7 A0 02 FB | 	rdlong	arg08, fp
0e0ec     04 CE 05 F1 | 	add	fp, #4
0e0f0     E7 A2 02 FB | 	rdlong	arg09, fp
0e0f4     04 CE 05 F1 | 	add	fp, #4
0e0f8     E7 A4 02 FB | 	rdlong	arg10, fp
0e0fc     30 CE 85 F1 | 	sub	fp, #48
0e100     08 57 B1 FD | 	call	#_hg010b_spin2_blit
0e104     48 00 90 FD | 	jmp	#LR__1204
0e108                 | LR__1203
0e108     32 9F 02 FB | 	rdlong	arg07, objptr
0e10c     0C CE 05 F1 | 	add	fp, #12
0e110     E7 94 02 FB | 	rdlong	arg02, fp
0e114     04 CE 05 F1 | 	add	fp, #4
0e118     E7 96 02 FB | 	rdlong	arg03, fp
0e11c     04 CE 05 F1 | 	add	fp, #4
0e120     E7 98 02 FB | 	rdlong	arg04, fp
0e124     04 CE 05 F1 | 	add	fp, #4
0e128     E7 9A 02 FB | 	rdlong	arg05, fp
0e12c     04 CE 05 F1 | 	add	fp, #4
0e130     E7 A0 02 FB | 	rdlong	arg08, fp
0e134     04 CE 05 F1 | 	add	fp, #4
0e138     E7 A2 02 FB | 	rdlong	arg09, fp
0e13c     20 CE 85 F1 | 	sub	fp, #32
0e140     4F 93 02 F6 | 	mov	arg01, arg07
0e144     0A 9C C6 F9 | 	decod	arg06, #10
0e148     0A A4 C6 F9 | 	decod	arg10, #10
0e14c     BC 56 B1 FD | 	call	#_hg010b_spin2_blit
0e150                 | LR__1204
0e150                 | LR__1205
0e150     E7 F0 03 F6 | 	mov	ptra, fp
0e154     F2 00 A0 FD | 	call	#popregs_
0e158                 | _do_blit_ret
0e158     2D 00 64 FD | 	ret
0e15c                 | 
0e15c                 | ' 
0e15c                 | ' 
0e15c                 | ' '-------------------- bin$
0e15c                 | ' 
0e15c                 | ' sub do_bin
0e15c                 | _do_bin
0e15c     02 CA 05 F6 | 	mov	COUNT_, #2
0e160     E8 00 A0 FD | 	call	#pushregs_
0e164     18 F0 07 F1 | 	add	ptra, #24
0e168     4B 00 00 FF 
0e16c     A0 64 06 F1 | 	add	objptr, ##38560
0e170     32 97 02 FB | 	rdlong	arg03, objptr
0e174     4B 95 02 F6 | 	mov	arg02, arg03
0e178     01 94 66 F0 | 	shl	arg02, #1
0e17c     4B 95 02 F1 | 	add	arg02, arg03
0e180     02 94 66 F0 | 	shl	arg02, #2
0e184     03 00 00 FF 
0e188     04 64 86 F1 | 	sub	objptr, ##1540
0e18c     32 95 02 F1 | 	add	arg02, objptr
0e190     4A A7 02 FB | 	rdlong	local01, arg02
0e194                 | ' 
0e194                 | ' numpar=compiledline(lineptr_e).result.uresult
0e194                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e194     03 A6 16 F2 | 	cmp	local01, #3 wc
0e198     48 00 00 FF 
0e19c     9C 64 86 F1 | 	sub	objptr, ##37020
0e1a0     00 A6 0E C2 |  if_b	cmp	local01, #0 wz
0e1a4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1210
0e1a8     00 92 06 F6 | 	mov	arg01, #0
0e1ac     B0 BD B1 FD | 	call	#__system___getiolock_0622
0e1b0     3D 93 02 F6 | 	mov	arg01, result1
0e1b4     24 68 B1 FD | 	call	#__system___lockmem
0e1b8     96 01 00 FF 
0e1bc     D7 94 06 F6 | 	mov	arg02, ##@LR__5949
0e1c0     00 92 06 F6 | 	mov	arg01, #0
0e1c4     00 96 06 F6 | 	mov	arg03, #0
0e1c8     04 75 B1 FD | 	call	#__system___basic_print_string
0e1cc     00 92 06 F6 | 	mov	arg01, #0
0e1d0     8C BD B1 FD | 	call	#__system___getiolock_0622
0e1d4     3D 01 68 FC | 	wrlong	#0, result1
0e1d8     27 92 06 F6 | 	mov	arg01, #39
0e1dc     00 94 06 F6 | 	mov	arg02, #0
0e1e0     7C 2E B1 FD | 	call	#_printerror
0e1e4     8C 00 90 FD | 	jmp	#LR__1213
0e1e8                 | LR__1210
0e1e8                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e1e8     02 A6 0E F2 | 	cmp	local01, #2 wz
0e1ec     30 00 90 5D |  if_ne	jmp	#LR__1211
0e1f0     B4 F4 BF FD | 	call	#_pop
0e1f4     3F A7 02 F6 | 	mov	local01, result3
0e1f8     E7 7A 62 FC | 	wrlong	result1, fp
0e1fc     04 CE 05 F1 | 	add	fp, #4
0e200     E7 7C 62 FC | 	wrlong	result2, fp
0e204     04 CE 05 F1 | 	add	fp, #4
0e208     E7 A6 62 FC | 	wrlong	local01, fp
0e20c     08 CE 85 F1 | 	sub	fp, #8
0e210     E7 92 02 F6 | 	mov	arg01, fp
0e214     6C F6 BF FD | 	call	#_converttoint
0e218     3D A9 02 F6 | 	mov	local02, result1
0e21c     04 00 90 FD | 	jmp	#LR__1212
0e220                 | LR__1211
0e220     00 A8 06 F6 | 	mov	local02, #0
0e224                 | LR__1212
0e224     80 F4 BF FD | 	call	#_pop
0e228     3F A7 02 F6 | 	mov	local01, result3
0e22c     E7 7A 62 FC | 	wrlong	result1, fp
0e230     04 CE 05 F1 | 	add	fp, #4
0e234     E7 7C 62 FC | 	wrlong	result2, fp
0e238     04 CE 05 F1 | 	add	fp, #4
0e23c     E7 A6 62 FC | 	wrlong	local01, fp
0e240     08 CE 85 F1 | 	sub	fp, #8
0e244     E7 92 02 F6 | 	mov	arg01, fp
0e248     38 F6 BF FD | 	call	#_converttoint
0e24c     3D 93 02 F6 | 	mov	arg01, result1
0e250     54 95 02 F6 | 	mov	arg02, local02
0e254     02 96 06 F6 | 	mov	arg03, #2
0e258     7C 82 B1 FD | 	call	#__system__Number_S
0e25c     E7 7A 62 FC | 	wrlong	result1, fp
0e260     08 CE 05 F1 | 	add	fp, #8
0e264     E7 3E 68 FC | 	wrlong	#31, fp
0e268     08 CE 85 F1 | 	sub	fp, #8
0e26c     E7 92 02 F6 | 	mov	arg01, fp
0e270     C4 F4 BF FD | 	call	#_push
0e274                 | LR__1213
0e274     E7 F0 03 F6 | 	mov	ptra, fp
0e278     F2 00 A0 FD | 	call	#popregs_
0e27c                 | _do_bin_ret
0e27c     2D 00 64 FD | 	ret
0e280                 | 
0e280                 | ' 
0e280                 | ' '-------------------- box
0e280                 | ' 
0e280                 | ' sub do_box
0e280                 | _do_box
0e280     03 CA 05 F6 | 	mov	COUNT_, #3
0e284     E8 00 A0 FD | 	call	#pushregs_
0e288     30 F0 07 F1 | 	add	ptra, #48
0e28c     18 F4 BF FD | 	call	#_pop
0e290     3D 9B 02 F6 | 	mov	arg05, result1
0e294     3E 99 02 F6 | 	mov	arg04, result2
0e298     3F 97 02 F6 | 	mov	arg03, result3
0e29c     24 CE 05 F1 | 	add	fp, #36
0e2a0     E7 9A 62 FC | 	wrlong	arg05, fp
0e2a4     04 CE 05 F1 | 	add	fp, #4
0e2a8     E7 98 62 FC | 	wrlong	arg04, fp
0e2ac     04 CE 05 F1 | 	add	fp, #4
0e2b0     E7 96 62 FC | 	wrlong	arg03, fp
0e2b4     2C CE 85 F1 | 	sub	fp, #44
0e2b8     EC F3 BF FD | 	call	#_pop
0e2bc     3D 9B 02 F6 | 	mov	arg05, result1
0e2c0     3E 99 02 F6 | 	mov	arg04, result2
0e2c4     3F 97 02 F6 | 	mov	arg03, result3
0e2c8     18 CE 05 F1 | 	add	fp, #24
0e2cc     E7 9A 62 FC | 	wrlong	arg05, fp
0e2d0     04 CE 05 F1 | 	add	fp, #4
0e2d4     E7 98 62 FC | 	wrlong	arg04, fp
0e2d8     04 CE 05 F1 | 	add	fp, #4
0e2dc     E7 96 62 FC | 	wrlong	arg03, fp
0e2e0     20 CE 85 F1 | 	sub	fp, #32
0e2e4     C0 F3 BF FD | 	call	#_pop
0e2e8     3D 9B 02 F6 | 	mov	arg05, result1
0e2ec     3E 99 02 F6 | 	mov	arg04, result2
0e2f0     3F A7 02 F6 | 	mov	local01, result3
0e2f4     0C CE 05 F1 | 	add	fp, #12
0e2f8     E7 9A 62 FC | 	wrlong	arg05, fp
0e2fc     04 CE 05 F1 | 	add	fp, #4
0e300     E7 98 62 FC | 	wrlong	arg04, fp
0e304     04 CE 05 F1 | 	add	fp, #4
0e308     E7 A6 62 FC | 	wrlong	local01, fp
0e30c     14 CE 85 F1 | 	sub	fp, #20
0e310     94 F3 BF FD | 	call	#_pop
0e314     E7 7A 62 FC | 	wrlong	result1, fp
0e318     04 CE 05 F1 | 	add	fp, #4
0e31c     E7 7C 62 FC | 	wrlong	result2, fp
0e320     04 CE 05 F1 | 	add	fp, #4
0e324     E7 7E 62 FC | 	wrlong	result3, fp
0e328                 | ' 
0e328                 | ' t4=pop()
0e328                 | ' t3=pop()
0e328                 | ' t2=pop()
0e328                 | ' t1=pop()
0e328                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e328     3F 9B 02 F6 | 	mov	arg05, result3
0e32c     08 CE 85 F1 | 	sub	fp, #8
0e330     1C 9A 0E F2 | 	cmp	arg05, #28 wz
0e334     08 CE 05 51 |  if_ne	add	fp, #8
0e338     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0e33c     08 CE 85 51 |  if_ne	sub	fp, #8
0e340     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0e344     A8 00 90 5D |  if_ne	jmp	#LR__1220
0e348     14 CE 05 F1 | 	add	fp, #20
0e34c     E7 A6 02 FB | 	rdlong	local01, fp
0e350     14 CE 85 F1 | 	sub	fp, #20
0e354     1C A6 0E F2 | 	cmp	local01, #28 wz
0e358     14 CE 05 51 |  if_ne	add	fp, #20
0e35c     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e360     14 CE 85 51 |  if_ne	sub	fp, #20
0e364     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e368     84 00 90 5D |  if_ne	jmp	#LR__1220
0e36c     20 CE 05 F1 | 	add	fp, #32
0e370     E7 A6 02 FB | 	rdlong	local01, fp
0e374     20 CE 85 F1 | 	sub	fp, #32
0e378     1C A6 0E F2 | 	cmp	local01, #28 wz
0e37c     20 CE 05 51 |  if_ne	add	fp, #32
0e380     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e384     20 CE 85 51 |  if_ne	sub	fp, #32
0e388     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e38c     60 00 90 5D |  if_ne	jmp	#LR__1220
0e390     2C CE 05 F1 | 	add	fp, #44
0e394     E7 A6 02 FB | 	rdlong	local01, fp
0e398     2C CE 85 F1 | 	sub	fp, #44
0e39c     1C A6 0E F2 | 	cmp	local01, #28 wz
0e3a0     2C CE 05 51 |  if_ne	add	fp, #44
0e3a4     E7 9A 02 5B |  if_ne	rdlong	arg05, fp
0e3a8     2C CE 85 51 |  if_ne	sub	fp, #44
0e3ac     1D 9A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e3b0     3C 00 90 5D |  if_ne	jmp	#LR__1220
0e3b4     E7 92 02 FB | 	rdlong	arg01, fp
0e3b8     0C CE 05 F1 | 	add	fp, #12
0e3bc     E7 94 02 FB | 	rdlong	arg02, fp
0e3c0     0C CE 05 F1 | 	add	fp, #12
0e3c4     E7 96 02 FB | 	rdlong	arg03, fp
0e3c8     0C CE 05 F1 | 	add	fp, #12
0e3cc     E7 98 02 FB | 	rdlong	arg04, fp
0e3d0     24 CE 85 F1 | 	sub	fp, #36
0e3d4     38 00 00 FF 
0e3d8     48 64 06 F1 | 	add	objptr, ##28744
0e3dc     32 9B 02 FB | 	rdlong	arg05, objptr
0e3e0     38 00 00 FF 
0e3e4     48 64 86 F1 | 	sub	objptr, ##28744
0e3e8     E0 46 B1 FD | 	call	#_hg010b_spin2_box
0e3ec                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e3ec     60 00 90 FD | 	jmp	#LR__1221
0e3f0                 | LR__1220
0e3f0     E7 92 02 F6 | 	mov	arg01, fp
0e3f4     8C F4 BF FD | 	call	#_converttoint
0e3f8     3D A9 02 F6 | 	mov	local02, result1
0e3fc     E7 92 02 F6 | 	mov	arg01, fp
0e400     0C 92 06 F1 | 	add	arg01, #12
0e404     7C F4 BF FD | 	call	#_converttoint
0e408     3D AB 02 F6 | 	mov	local03, result1
0e40c     E7 92 02 F6 | 	mov	arg01, fp
0e410     18 92 06 F1 | 	add	arg01, #24
0e414     6C F4 BF FD | 	call	#_converttoint
0e418     3D A7 02 F6 | 	mov	local01, result1
0e41c     E7 92 02 F6 | 	mov	arg01, fp
0e420     24 92 06 F1 | 	add	arg01, #36
0e424     5C F4 BF FD | 	call	#_converttoint
0e428     3D 99 02 F6 | 	mov	arg04, result1
0e42c     38 00 00 FF 
0e430     48 64 06 F1 | 	add	objptr, ##28744
0e434     32 9B 02 FB | 	rdlong	arg05, objptr
0e438     38 00 00 FF 
0e43c     48 64 86 F1 | 	sub	objptr, ##28744
0e440     54 93 02 F6 | 	mov	arg01, local02
0e444     55 95 02 F6 | 	mov	arg02, local03
0e448     53 97 02 F6 | 	mov	arg03, local01
0e44c     7C 46 B1 FD | 	call	#_hg010b_spin2_box
0e450                 | LR__1221
0e450     E7 F0 03 F6 | 	mov	ptra, fp
0e454     F2 00 A0 FD | 	call	#popregs_
0e458                 | _do_box_ret
0e458     2D 00 64 FD | 	ret
0e45c                 | 
0e45c                 | ' 
0e45c                 | ' '-------------------- brun
0e45c                 | ' 
0e45c                 | ' sub do_brun
0e45c                 | _do_brun
0e45c     08 CA 05 F6 | 	mov	COUNT_, #8
0e460     E8 00 A0 FD | 	call	#pushregs_
0e464     40 F2 BF FD | 	call	#_pop
0e468     3E 9B 02 F6 | 	mov	arg05, result2
0e46c     3F 99 02 F6 | 	mov	arg04, result3
0e470     3D A7 02 F6 | 	mov	local01, result1
0e474     4D A9 02 F6 | 	mov	local02, arg05
0e478     4C AB 02 F6 | 	mov	local03, arg04
0e47c                 | ' 
0e47c                 | ' t1=pop() 
0e47c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e47c     2B AA 0E F2 | 	cmp	local03, #43 wz
0e480     10 00 90 5D |  if_ne	jmp	#LR__1230
0e484     53 93 02 F6 | 	mov	arg01, local01
0e488     8C F3 BF FD | 	call	#_convertstring
0e48c     3D A7 02 F6 | 	mov	local01, result1
0e490     1F AA 06 F6 | 	mov	local03, #31
0e494                 | LR__1230
0e494                 | ' if t1.result_type=result_string then
0e494     1F AA 0E F2 | 	cmp	local03, #31 wz
0e498     EC 01 90 5D |  if_ne	jmp	#LR__1234
0e49c     53 AD 02 F6 | 	mov	local04, local01
0e4a0                 | '   filename=t1.result.sresult
0e4a0                 | '   if left$(filename,1)="/" then 
0e4a0     56 93 02 F6 | 	mov	arg01, local04
0e4a4     01 94 06 F6 | 	mov	arg02, #1
0e4a8     D8 7D B1 FD | 	call	#__system__Left_S
0e4ac     3D 93 02 F6 | 	mov	arg01, result1
0e4b0     96 01 00 FF 
0e4b4     DE 94 06 F6 | 	mov	arg02, ##@LR__5950
0e4b8     48 65 B1 FD | 	call	#__system___string_cmp
0e4bc     00 7A 0E F2 | 	cmp	result1, #0 wz
0e4c0     56 AF 02 A6 |  if_e	mov	local05, local04
0e4c4     14 00 90 AD |  if_e	jmp	#LR__1231
0e4c8     96 01 00 FF 
0e4cc     E0 92 06 F6 | 	mov	arg01, ##@LR__5951
0e4d0     56 95 02 F6 | 	mov	arg02, local04
0e4d4     60 65 B1 FD | 	call	#__system___string_concat
0e4d8     3D AF 02 F6 | 	mov	local05, result1
0e4dc                 | LR__1231
0e4dc                 | '   open fullfilename for input as #9
0e4dc     09 92 06 F6 | 	mov	arg01, #9
0e4e0     57 95 02 F6 | 	mov	arg02, local05
0e4e4     00 96 06 F6 | 	mov	arg03, #0
0e4e8     A0 70 B1 FD | 	call	#__system___basic_open_string
0e4ec     20 68 06 F1 | 	add	ptr___system__dat__, #32
0e4f0     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e4f4     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e4f8     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0e4fc     3D B1 0A F6 | 	mov	local06, result1 wz
0e500                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e500     8C 00 90 AD |  if_e	jmp	#LR__1232
0e504     00 92 06 F6 | 	mov	arg01, #0
0e508     54 BA B1 FD | 	call	#__system___getiolock_0622
0e50c     3D 93 02 F6 | 	mov	arg01, result1
0e510     C8 64 B1 FD | 	call	#__system___lockmem
0e514     96 01 00 FF 
0e518     E9 94 06 F6 | 	mov	arg02, ##@LR__5952
0e51c     00 92 06 F6 | 	mov	arg01, #0
0e520     00 96 06 F6 | 	mov	arg03, #0
0e524     A8 71 B1 FD | 	call	#__system___basic_print_string
0e528     00 92 06 F6 | 	mov	arg01, #0
0e52c     58 95 02 F6 | 	mov	arg02, local06
0e530     00 96 06 F6 | 	mov	arg03, #0
0e534     0A 98 06 F6 | 	mov	arg04, #10
0e538     D8 71 B1 FD | 	call	#__system___basic_print_integer
0e53c     96 01 00 FF 
0e540     F7 94 06 F6 | 	mov	arg02, ##@LR__5953
0e544     00 92 06 F6 | 	mov	arg01, #0
0e548     00 96 06 F6 | 	mov	arg03, #0
0e54c     80 71 B1 FD | 	call	#__system___basic_print_string
0e550     58 93 02 F6 | 	mov	arg01, local06
0e554     34 86 B1 FD | 	call	#__system___strerror
0e558     3D 95 02 F6 | 	mov	arg02, result1
0e55c     00 92 06 F6 | 	mov	arg01, #0
0e560     00 96 06 F6 | 	mov	arg03, #0
0e564     68 71 B1 FD | 	call	#__system___basic_print_string
0e568     00 92 06 F6 | 	mov	arg01, #0
0e56c     0A 94 06 F6 | 	mov	arg02, #10
0e570     00 96 06 F6 | 	mov	arg03, #0
0e574     00 71 B1 FD | 	call	#__system___basic_print_char
0e578     00 92 06 F6 | 	mov	arg01, #0
0e57c     E0 B9 B1 FD | 	call	#__system___getiolock_0622
0e580     3D 01 68 FC | 	wrlong	#0, result1
0e584     09 92 06 F6 | 	mov	arg01, #9
0e588     2C B0 B1 FD | 	call	#__system__close
0e58c     F8 00 90 FD | 	jmp	#LR__1235
0e590                 | LR__1232
0e590     01 B2 06 F6 | 	mov	local07, #1
0e594     00 B4 06 F6 | 	mov	local08, #0
0e598                 | '   do
0e598                 | LR__1233
0e598                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e598     32 97 02 F6 | 	mov	arg03, objptr
0e59c     4F 00 00 FF 
0e5a0     D4 96 06 F1 | 	add	arg03, ##40660
0e5a4     09 92 06 F6 | 	mov	arg01, #9
0e5a8     59 95 02 F6 | 	mov	arg02, local07
0e5ac     0A 98 C6 F9 | 	decod	arg04, #10
0e5b0     01 9A 06 F6 | 	mov	arg05, #1
0e5b4     A0 72 B1 FD | 	call	#__system___basic_get
0e5b8     3D B1 02 F6 | 	mov	local06, result1
0e5bc     3D B3 02 F1 | 	add	local07, result1
0e5c0     32 93 02 F6 | 	mov	arg01, objptr
0e5c4     4F 00 00 FF 
0e5c8     D4 92 06 F1 | 	add	arg01, ##40660
0e5cc     5A 95 02 F6 | 	mov	arg02, local08
0e5d0     0A 96 C6 F9 | 	decod	arg03, #10
0e5d4     0B 00 00 FF 
0e5d8     CC 64 06 F1 | 	add	objptr, ##5836
0e5dc     78 58 B1 FD | 	call	#_psram_spin2_write
0e5e0     0B 00 00 FF 
0e5e4     CC 64 86 F1 | 	sub	objptr, ##5836
0e5e8     58 B5 02 F1 | 	add	local08, local06
0e5ec     02 00 00 FF 
0e5f0     00 B0 0E F2 | 	cmp	local06, ##1024 wz
0e5f4     E0 03 00 AF 
0e5f8     00 B4 56 A2 |  if_e	cmps	local08, ##507904 wc
0e5fc     98 FF 9F 8D |  if_c_and_z	jmp	#LR__1233
0e600     38 00 00 FF 
0e604     1C 64 06 F1 | 	add	objptr, ##28700
0e608     32 93 02 FB | 	rdlong	arg01, objptr
0e60c     03 92 62 FD | 	cogstop	arg01
0e610     04 64 06 F1 | 	add	objptr, #4
0e614     32 93 02 FB | 	rdlong	arg01, objptr
0e618     03 92 62 FD | 	cogstop	arg01
0e61c     04 64 06 F1 | 	add	objptr, #4
0e620     32 93 02 FB | 	rdlong	arg01, objptr
0e624     03 92 62 FD | 	cogstop	arg01
0e628     19 00 00 FF 
0e62c     3C 65 06 F1 | 	add	objptr, ##13116
0e630     32 93 02 FB | 	rdlong	arg01, objptr
0e634     51 00 00 FF 
0e638     60 65 86 F1 | 	sub	objptr, ##41824
0e63c     03 92 62 FD | 	cogstop	arg01
0e640     35 95 02 F6 | 	mov	arg02, ptr__dat__
0e644     18 00 00 FF 
0e648     CC 94 06 F1 | 	add	arg02, ##12492
0e64c     32 97 02 F6 | 	mov	arg03, objptr
0e650     38 00 00 FF 
0e654     2C 96 06 F1 | 	add	arg03, ##28716
0e658     1E B4 06 F6 | 	mov	local08, #30
0e65c     28 96 62 FD | 	setq	arg03
0e660     4A B5 F2 FC | 	coginit	local08, arg02 wc
0e664     01 B4 66 C6 |  if_b	neg	local08, #1
0e668     53 00 00 FF 
0e66c     70 65 06 F1 | 	add	objptr, ##42864
0e670     32 B5 62 FC | 	wrlong	local08, objptr
0e674     53 00 00 FF 
0e678     70 65 86 F1 | 	sub	objptr, ##42864
0e67c     00 92 06 F6 | 	mov	arg01, #0
0e680     01 92 62 FD | 	cogid	arg01
0e684     03 92 62 FD | 	cogstop	arg01
0e688                 | LR__1234
0e688                 | LR__1235
0e688     E7 F0 03 F6 | 	mov	ptra, fp
0e68c     F2 00 A0 FD | 	call	#popregs_
0e690                 | _do_brun_ret
0e690     2D 00 64 FD | 	ret
0e694                 | 
0e694                 | ' 
0e694                 | ' '-------------------- cd
0e694                 | ' 
0e694                 | ' sub do_cd
0e694                 | _do_cd
0e694     06 CA 05 F6 | 	mov	COUNT_, #6
0e698     E8 00 A0 FD | 	call	#pushregs_
0e69c     96 01 00 FF 
0e6a0     FA 92 06 F6 | 	mov	arg01, ##@LR__5954
0e6a4     31 94 06 F6 | 	mov	arg02, #49
0e6a8     6C BA B1 FD | 	call	#__system___basic_dir
0e6ac     F8 EF BF FD | 	call	#_pop
0e6b0     3E 99 02 F6 | 	mov	arg04, result2
0e6b4     3F 97 02 F6 | 	mov	arg03, result3
0e6b8     3D A7 02 F6 | 	mov	local01, result1
0e6bc     4C A9 02 F6 | 	mov	local02, arg04
0e6c0     4B AB 02 F6 | 	mov	local03, arg03
0e6c4                 | ' t1=pop()
0e6c4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e6c4     2B AA 0E F2 | 	cmp	local03, #43 wz
0e6c8     10 00 90 5D |  if_ne	jmp	#LR__1240
0e6cc     53 93 02 F6 | 	mov	arg01, local01
0e6d0     44 F1 BF FD | 	call	#_convertstring
0e6d4     3D A7 02 F6 | 	mov	local01, result1
0e6d8     1F AA 06 F6 | 	mov	local03, #31
0e6dc                 | LR__1240
0e6dc                 | ' if t1.result_type<>result_string then printerror(15): return
0e6dc     1F AA 0E F2 | 	cmp	local03, #31 wz
0e6e0     10 00 90 AD |  if_e	jmp	#LR__1241
0e6e4     0F 92 06 F6 | 	mov	arg01, #15
0e6e8     00 94 06 F6 | 	mov	arg02, #0
0e6ec     70 29 B1 FD | 	call	#_printerror
0e6f0     54 05 90 FD | 	jmp	#LR__1259
0e6f4                 | LR__1241
0e6f4     53 AD 02 F6 | 	mov	local04, local01
0e6f8                 | ' newdir$=t1.result.sresult
0e6f8                 | ' if newdir$=".." then 
0e6f8     96 01 00 FF 
0e6fc     FC 94 06 F6 | 	mov	arg02, ##@LR__5955
0e700     56 93 02 F6 | 	mov	arg01, local04
0e704     FC 62 B1 FD | 	call	#__system___string_cmp
0e708     00 7A 0E F2 | 	cmp	result1, #0 wz
0e70c     C8 01 90 5D |  if_ne	jmp	#LR__1248
0e710     4B 00 00 FF 
0e714     B4 64 06 F1 | 	add	objptr, ##38580
0e718     32 93 02 FB | 	rdlong	arg01, objptr
0e71c     4B 00 00 FF 
0e720     B4 64 86 F1 | 	sub	objptr, ##38580
0e724     49 AF 02 F6 | 	mov	local05, arg01
0e728     D7 06 48 FB | 	callpa	#(@LR__1243-@LR__1242)>>2,fcache_load_ptr_
0e72c                 | LR__1242
0e72c     57 7B CA FA | 	rdbyte	result1, local05 wz
0e730     01 AE 06 51 |  if_ne	add	local05, #1
0e734     F4 FF 9F 5D |  if_ne	jmp	#LR__1242
0e738                 | LR__1243
0e738     57 93 C2 F2 | 	subr	arg01, local05
0e73c     4B 00 00 FF 
0e740     B4 64 06 F1 | 	add	objptr, ##38580
0e744     32 95 02 FB | 	rdlong	arg02, objptr
0e748     4B 00 00 FF 
0e74c     B4 64 86 F1 | 	sub	objptr, ##38580
0e750     96 01 00 FF 
0e754     FF 96 06 F6 | 	mov	arg03, ##@LR__5956
0e758     74 81 B1 FD | 	call	#__system__InstrRev
0e75c     3D AD 02 F6 | 	mov	local04, result1
0e760                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e760     02 AC 56 F2 | 	cmps	local04, #2 wc
0e764     28 00 90 CD |  if_b	jmp	#LR__1244
0e768     4B 00 00 FF 
0e76c     B4 64 06 F1 | 	add	objptr, ##38580
0e770     32 93 02 FB | 	rdlong	arg01, objptr
0e774     4B 00 00 FF 
0e778     B4 64 86 F1 | 	sub	objptr, ##38580
0e77c     01 AC 86 F1 | 	sub	local04, #1
0e780     56 95 02 F6 | 	mov	arg02, local04
0e784     FC 7A B1 FD | 	call	#__system__Left_S
0e788     3D AD 02 F6 | 	mov	local04, result1
0e78c     08 00 90 FD | 	jmp	#LR__1245
0e790                 | LR__1244
0e790     96 01 00 FF 
0e794     01 AD 06 F6 | 	mov	local04, ##@LR__5957
0e798                 | LR__1245
0e798     56 93 02 F6 | 	mov	arg01, local04
0e79c     CC 68 B1 FD | 	call	#__system___chdir
0e7a0     20 68 06 F1 | 	add	ptr___system__dat__, #32
0e7a4     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e7a8     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e7ac     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0e7b0     3D B1 0A F6 | 	mov	local06, result1 wz
0e7b4                 | '   chdir newdir$
0e7b4                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e7b4     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0e7b8     A4 00 90 AD |  if_e	jmp	#LR__1246
0e7bc     00 92 06 F6 | 	mov	arg01, #0
0e7c0     9C B7 B1 FD | 	call	#__system___getiolock_0622
0e7c4     3D 93 02 F6 | 	mov	arg01, result1
0e7c8     10 62 B1 FD | 	call	#__system___lockmem
0e7cc     96 01 00 FF 
0e7d0     03 95 06 F6 | 	mov	arg02, ##@LR__5958
0e7d4     00 92 06 F6 | 	mov	arg01, #0
0e7d8     00 96 06 F6 | 	mov	arg03, #0
0e7dc     F0 6E B1 FD | 	call	#__system___basic_print_string
0e7e0     00 92 06 F6 | 	mov	arg01, #0
0e7e4     58 95 02 F6 | 	mov	arg02, local06
0e7e8     00 96 06 F6 | 	mov	arg03, #0
0e7ec     0A 98 06 F6 | 	mov	arg04, #10
0e7f0     20 6F B1 FD | 	call	#__system___basic_print_integer
0e7f4     96 01 00 FF 
0e7f8     11 95 06 F6 | 	mov	arg02, ##@LR__5959
0e7fc     00 92 06 F6 | 	mov	arg01, #0
0e800     00 96 06 F6 | 	mov	arg03, #0
0e804     C8 6E B1 FD | 	call	#__system___basic_print_string
0e808     46 00 00 FF 
0e80c     70 65 06 F1 | 	add	objptr, ##36208
0e810     32 95 02 FB | 	rdlong	arg02, objptr
0e814     46 00 00 FF 
0e818     70 65 86 F1 | 	sub	objptr, ##36208
0e81c     00 92 06 F6 | 	mov	arg01, #0
0e820     00 96 06 F6 | 	mov	arg03, #0
0e824     A8 6E B1 FD | 	call	#__system___basic_print_string
0e828     00 92 06 F6 | 	mov	arg01, #0
0e82c     0A 94 06 F6 | 	mov	arg02, #10
0e830     00 96 06 F6 | 	mov	arg03, #0
0e834     40 6E B1 FD | 	call	#__system___basic_print_char
0e838     00 92 06 F6 | 	mov	arg01, #0
0e83c     20 B7 B1 FD | 	call	#__system___getiolock_0622
0e840     3D 01 68 FC | 	wrlong	#0, result1
0e844     4B 00 00 FF 
0e848     B4 64 06 F1 | 	add	objptr, ##38580
0e84c     32 93 02 FB | 	rdlong	arg01, objptr
0e850     4B 00 00 FF 
0e854     B4 64 86 F1 | 	sub	objptr, ##38580
0e858     10 68 B1 FD | 	call	#__system___chdir
0e85c     14 00 90 FD | 	jmp	#LR__1247
0e860                 | LR__1246
0e860     4B 00 00 FF 
0e864     B4 64 06 F1 | 	add	objptr, ##38580
0e868     32 AD 62 FC | 	wrlong	local04, objptr
0e86c     4B 00 00 FF 
0e870     B4 64 86 F1 | 	sub	objptr, ##38580
0e874                 | LR__1247
0e874                 | '   print "Current directory: ";currentdir$
0e874     00 92 06 F6 | 	mov	arg01, #0
0e878     E4 B6 B1 FD | 	call	#__system___getiolock_0622
0e87c     3D 93 02 F6 | 	mov	arg01, result1
0e880     58 61 B1 FD | 	call	#__system___lockmem
0e884     96 01 00 FF 
0e888     14 95 06 F6 | 	mov	arg02, ##@LR__5960
0e88c     00 92 06 F6 | 	mov	arg01, #0
0e890     00 96 06 F6 | 	mov	arg03, #0
0e894     38 6E B1 FD | 	call	#__system___basic_print_string
0e898     4B 00 00 FF 
0e89c     B4 64 06 F1 | 	add	objptr, ##38580
0e8a0     32 95 02 FB | 	rdlong	arg02, objptr
0e8a4     4B 00 00 FF 
0e8a8     B4 64 86 F1 | 	sub	objptr, ##38580
0e8ac     00 92 06 F6 | 	mov	arg01, #0
0e8b0     00 96 06 F6 | 	mov	arg03, #0
0e8b4     18 6E B1 FD | 	call	#__system___basic_print_string
0e8b8     00 92 06 F6 | 	mov	arg01, #0
0e8bc     0A 94 06 F6 | 	mov	arg02, #10
0e8c0     00 96 06 F6 | 	mov	arg03, #0
0e8c4     B0 6D B1 FD | 	call	#__system___basic_print_char
0e8c8     00 92 06 F6 | 	mov	arg01, #0
0e8cc     90 B6 B1 FD | 	call	#__system___getiolock_0622
0e8d0     3D 01 68 FC | 	wrlong	#0, result1
0e8d4                 | '   return
0e8d4     70 03 90 FD | 	jmp	#LR__1259
0e8d8                 | LR__1248
0e8d8                 | ' if left$(newdir$,1)="/" then 
0e8d8     56 93 02 F6 | 	mov	arg01, local04
0e8dc     01 94 06 F6 | 	mov	arg02, #1
0e8e0     A0 79 B1 FD | 	call	#__system__Left_S
0e8e4     3D 93 02 F6 | 	mov	arg01, result1
0e8e8     96 01 00 FF 
0e8ec     28 95 06 F6 | 	mov	arg02, ##@LR__5961
0e8f0     10 61 B1 FD | 	call	#__system___string_cmp
0e8f4     00 7A 0E F2 | 	cmp	result1, #0 wz
0e8f8     40 01 90 5D |  if_ne	jmp	#LR__1251
0e8fc     56 93 02 F6 | 	mov	arg01, local04
0e900     68 67 B1 FD | 	call	#__system___chdir
0e904     20 68 06 F1 | 	add	ptr___system__dat__, #32
0e908     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0e90c     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0e910     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0e914     3D B1 0A F6 | 	mov	local06, result1 wz
0e918                 | '   chdir(newdir$)
0e918                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e918     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0e91c     A4 00 90 AD |  if_e	jmp	#LR__1249
0e920     00 92 06 F6 | 	mov	arg01, #0
0e924     38 B6 B1 FD | 	call	#__system___getiolock_0622
0e928     3D 93 02 F6 | 	mov	arg01, result1
0e92c     AC 60 B1 FD | 	call	#__system___lockmem
0e930     96 01 00 FF 
0e934     2A 95 06 F6 | 	mov	arg02, ##@LR__5962
0e938     00 92 06 F6 | 	mov	arg01, #0
0e93c     00 96 06 F6 | 	mov	arg03, #0
0e940     8C 6D B1 FD | 	call	#__system___basic_print_string
0e944     00 92 06 F6 | 	mov	arg01, #0
0e948     58 95 02 F6 | 	mov	arg02, local06
0e94c     00 96 06 F6 | 	mov	arg03, #0
0e950     0A 98 06 F6 | 	mov	arg04, #10
0e954     BC 6D B1 FD | 	call	#__system___basic_print_integer
0e958     96 01 00 FF 
0e95c     38 95 06 F6 | 	mov	arg02, ##@LR__5963
0e960     00 92 06 F6 | 	mov	arg01, #0
0e964     00 96 06 F6 | 	mov	arg03, #0
0e968     64 6D B1 FD | 	call	#__system___basic_print_string
0e96c     46 00 00 FF 
0e970     70 65 06 F1 | 	add	objptr, ##36208
0e974     32 95 02 FB | 	rdlong	arg02, objptr
0e978     46 00 00 FF 
0e97c     70 65 86 F1 | 	sub	objptr, ##36208
0e980     00 92 06 F6 | 	mov	arg01, #0
0e984     00 96 06 F6 | 	mov	arg03, #0
0e988     44 6D B1 FD | 	call	#__system___basic_print_string
0e98c     00 92 06 F6 | 	mov	arg01, #0
0e990     0A 94 06 F6 | 	mov	arg02, #10
0e994     00 96 06 F6 | 	mov	arg03, #0
0e998     DC 6C B1 FD | 	call	#__system___basic_print_char
0e99c     00 92 06 F6 | 	mov	arg01, #0
0e9a0     BC B5 B1 FD | 	call	#__system___getiolock_0622
0e9a4     3D 01 68 FC | 	wrlong	#0, result1
0e9a8     4B 00 00 FF 
0e9ac     B4 64 06 F1 | 	add	objptr, ##38580
0e9b0     32 93 02 FB | 	rdlong	arg01, objptr
0e9b4     4B 00 00 FF 
0e9b8     B4 64 86 F1 | 	sub	objptr, ##38580
0e9bc     AC 66 B1 FD | 	call	#__system___chdir
0e9c0     14 00 90 FD | 	jmp	#LR__1250
0e9c4                 | LR__1249
0e9c4     4B 00 00 FF 
0e9c8     B4 64 06 F1 | 	add	objptr, ##38580
0e9cc     32 AD 62 FC | 	wrlong	local04, objptr
0e9d0     4B 00 00 FF 
0e9d4     B4 64 86 F1 | 	sub	objptr, ##38580
0e9d8                 | LR__1250
0e9d8                 | '   print "Current directory: ";currentdir$
0e9d8     00 92 06 F6 | 	mov	arg01, #0
0e9dc     80 B5 B1 FD | 	call	#__system___getiolock_0622
0e9e0     3D 93 02 F6 | 	mov	arg01, result1
0e9e4     F4 5F B1 FD | 	call	#__system___lockmem
0e9e8     96 01 00 FF 
0e9ec     3B 95 06 F6 | 	mov	arg02, ##@LR__5964
0e9f0     00 92 06 F6 | 	mov	arg01, #0
0e9f4     00 96 06 F6 | 	mov	arg03, #0
0e9f8     D4 6C B1 FD | 	call	#__system___basic_print_string
0e9fc     4B 00 00 FF 
0ea00     B4 64 06 F1 | 	add	objptr, ##38580
0ea04     32 95 02 FB | 	rdlong	arg02, objptr
0ea08     4B 00 00 FF 
0ea0c     B4 64 86 F1 | 	sub	objptr, ##38580
0ea10     00 92 06 F6 | 	mov	arg01, #0
0ea14     00 96 06 F6 | 	mov	arg03, #0
0ea18     B4 6C B1 FD | 	call	#__system___basic_print_string
0ea1c     00 92 06 F6 | 	mov	arg01, #0
0ea20     0A 94 06 F6 | 	mov	arg02, #10
0ea24     00 96 06 F6 | 	mov	arg03, #0
0ea28     4C 6C B1 FD | 	call	#__system___basic_print_char
0ea2c     00 92 06 F6 | 	mov	arg01, #0
0ea30     2C B5 B1 FD | 	call	#__system___getiolock_0622
0ea34     3D 01 68 FC | 	wrlong	#0, result1
0ea38                 | '   return
0ea38     0C 02 90 FD | 	jmp	#LR__1259
0ea3c                 | LR__1251
0ea3c                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0ea3c     4B 00 00 FF 
0ea40     B4 64 06 F1 | 	add	objptr, ##38580
0ea44     32 93 02 FB | 	rdlong	arg01, objptr
0ea48     4B 00 00 FF 
0ea4c     B4 64 86 F1 | 	sub	objptr, ##38580
0ea50     96 01 00 FF 
0ea54     4F 95 06 F6 | 	mov	arg02, ##@LR__5965
0ea58     A8 5F B1 FD | 	call	#__system___string_cmp
0ea5c     00 7A 0E F2 | 	cmp	result1, #0 wz
0ea60     34 00 90 AD |  if_e	jmp	#LR__1252
0ea64     4B 00 00 FF 
0ea68     B4 64 06 F1 | 	add	objptr, ##38580
0ea6c     32 93 02 FB | 	rdlong	arg01, objptr
0ea70     4B 00 00 FF 
0ea74     B4 64 86 F1 | 	sub	objptr, ##38580
0ea78     96 01 00 FF 
0ea7c     51 95 06 F6 | 	mov	arg02, ##@LR__5966
0ea80     B4 5F B1 FD | 	call	#__system___string_concat
0ea84     3D 93 02 F6 | 	mov	arg01, result1
0ea88     56 95 02 F6 | 	mov	arg02, local04
0ea8c     A8 5F B1 FD | 	call	#__system___string_concat
0ea90     3D AD 02 F6 | 	mov	local04, result1
0ea94     20 00 90 FD | 	jmp	#LR__1253
0ea98                 | LR__1252
0ea98     4B 00 00 FF 
0ea9c     B4 64 06 F1 | 	add	objptr, ##38580
0eaa0     32 93 02 FB | 	rdlong	arg01, objptr
0eaa4     4B 00 00 FF 
0eaa8     B4 64 86 F1 | 	sub	objptr, ##38580
0eaac     56 95 02 F6 | 	mov	arg02, local04
0eab0     84 5F B1 FD | 	call	#__system___string_concat
0eab4     3D AD 02 F6 | 	mov	local04, result1
0eab8                 | LR__1253
0eab8                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0eab8     56 93 02 F6 | 	mov	arg01, local04
0eabc     01 94 06 F6 | 	mov	arg02, #1
0eac0     48 78 B1 FD | 	call	#__system__Right_S
0eac4     3D 93 02 F6 | 	mov	arg01, result1
0eac8     96 01 00 FF 
0eacc     53 95 06 F6 | 	mov	arg02, ##@LR__5967
0ead0     30 5F B1 FD | 	call	#__system___string_cmp
0ead4     00 7A 0E F2 | 	cmp	result1, #0 wz
0ead8     30 00 90 5D |  if_ne	jmp	#LR__1256
0eadc     56 93 02 F6 | 	mov	arg01, local04
0eae0     49 AF 02 F6 | 	mov	local05, arg01
0eae4     D7 06 48 FB | 	callpa	#(@LR__1255-@LR__1254)>>2,fcache_load_ptr_
0eae8                 | LR__1254
0eae8     57 7B CA FA | 	rdbyte	result1, local05 wz
0eaec     01 AE 06 51 |  if_ne	add	local05, #1
0eaf0     F4 FF 9F 5D |  if_ne	jmp	#LR__1254
0eaf4                 | LR__1255
0eaf4     49 AF 82 F1 | 	sub	local05, arg01
0eaf8     57 95 02 F6 | 	mov	arg02, local05
0eafc     01 94 86 F1 | 	sub	arg02, #1
0eb00     56 93 02 F6 | 	mov	arg01, local04
0eb04     7C 77 B1 FD | 	call	#__system__Left_S
0eb08     3D AD 02 F6 | 	mov	local04, result1
0eb0c                 | LR__1256
0eb0c     56 93 02 F6 | 	mov	arg01, local04
0eb10     58 65 B1 FD | 	call	#__system___chdir
0eb14     20 68 06 F1 | 	add	ptr___system__dat__, #32
0eb18     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0eb1c     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0eb20     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0eb24     3D B1 0A F6 | 	mov	local06, result1 wz
0eb28                 | '   chdir(newdir$)
0eb28                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0eb28     05 B0 0E 52 |  if_ne	cmp	local06, #5 wz
0eb2c     A4 00 90 AD |  if_e	jmp	#LR__1257
0eb30     00 92 06 F6 | 	mov	arg01, #0
0eb34     28 B4 B1 FD | 	call	#__system___getiolock_0622
0eb38     3D 93 02 F6 | 	mov	arg01, result1
0eb3c     9C 5E B1 FD | 	call	#__system___lockmem
0eb40     96 01 00 FF 
0eb44     55 95 06 F6 | 	mov	arg02, ##@LR__5968
0eb48     00 92 06 F6 | 	mov	arg01, #0
0eb4c     00 96 06 F6 | 	mov	arg03, #0
0eb50     7C 6B B1 FD | 	call	#__system___basic_print_string
0eb54     00 92 06 F6 | 	mov	arg01, #0
0eb58     58 95 02 F6 | 	mov	arg02, local06
0eb5c     00 96 06 F6 | 	mov	arg03, #0
0eb60     0A 98 06 F6 | 	mov	arg04, #10
0eb64     AC 6B B1 FD | 	call	#__system___basic_print_integer
0eb68     96 01 00 FF 
0eb6c     63 95 06 F6 | 	mov	arg02, ##@LR__5969
0eb70     00 92 06 F6 | 	mov	arg01, #0
0eb74     00 96 06 F6 | 	mov	arg03, #0
0eb78     54 6B B1 FD | 	call	#__system___basic_print_string
0eb7c     46 00 00 FF 
0eb80     70 65 06 F1 | 	add	objptr, ##36208
0eb84     32 95 02 FB | 	rdlong	arg02, objptr
0eb88     46 00 00 FF 
0eb8c     70 65 86 F1 | 	sub	objptr, ##36208
0eb90     00 92 06 F6 | 	mov	arg01, #0
0eb94     00 96 06 F6 | 	mov	arg03, #0
0eb98     34 6B B1 FD | 	call	#__system___basic_print_string
0eb9c     00 92 06 F6 | 	mov	arg01, #0
0eba0     0A 94 06 F6 | 	mov	arg02, #10
0eba4     00 96 06 F6 | 	mov	arg03, #0
0eba8     CC 6A B1 FD | 	call	#__system___basic_print_char
0ebac     00 92 06 F6 | 	mov	arg01, #0
0ebb0     AC B3 B1 FD | 	call	#__system___getiolock_0622
0ebb4     3D 01 68 FC | 	wrlong	#0, result1
0ebb8     4B 00 00 FF 
0ebbc     B4 64 06 F1 | 	add	objptr, ##38580
0ebc0     32 93 02 FB | 	rdlong	arg01, objptr
0ebc4     4B 00 00 FF 
0ebc8     B4 64 86 F1 | 	sub	objptr, ##38580
0ebcc     9C 64 B1 FD | 	call	#__system___chdir
0ebd0     14 00 90 FD | 	jmp	#LR__1258
0ebd4                 | LR__1257
0ebd4     4B 00 00 FF 
0ebd8     B4 64 06 F1 | 	add	objptr, ##38580
0ebdc     32 AD 62 FC | 	wrlong	local04, objptr
0ebe0     4B 00 00 FF 
0ebe4     B4 64 86 F1 | 	sub	objptr, ##38580
0ebe8                 | LR__1258
0ebe8                 | '   print "Current directory: ";currentdir$
0ebe8     00 92 06 F6 | 	mov	arg01, #0
0ebec     70 B3 B1 FD | 	call	#__system___getiolock_0622
0ebf0     3D 93 02 F6 | 	mov	arg01, result1
0ebf4     E4 5D B1 FD | 	call	#__system___lockmem
0ebf8     96 01 00 FF 
0ebfc     66 95 06 F6 | 	mov	arg02, ##@LR__5970
0ec00     00 92 06 F6 | 	mov	arg01, #0
0ec04     00 96 06 F6 | 	mov	arg03, #0
0ec08     C4 6A B1 FD | 	call	#__system___basic_print_string
0ec0c     4B 00 00 FF 
0ec10     B4 64 06 F1 | 	add	objptr, ##38580
0ec14     32 95 02 FB | 	rdlong	arg02, objptr
0ec18     4B 00 00 FF 
0ec1c     B4 64 86 F1 | 	sub	objptr, ##38580
0ec20     00 92 06 F6 | 	mov	arg01, #0
0ec24     00 96 06 F6 | 	mov	arg03, #0
0ec28     A4 6A B1 FD | 	call	#__system___basic_print_string
0ec2c     00 92 06 F6 | 	mov	arg01, #0
0ec30     0A 94 06 F6 | 	mov	arg02, #10
0ec34     00 96 06 F6 | 	mov	arg03, #0
0ec38     3C 6A B1 FD | 	call	#__system___basic_print_char
0ec3c     00 92 06 F6 | 	mov	arg01, #0
0ec40     1C B3 B1 FD | 	call	#__system___getiolock_0622
0ec44     3D 01 68 FC | 	wrlong	#0, result1
0ec48                 | LR__1259
0ec48     E7 F0 03 F6 | 	mov	ptra, fp
0ec4c     F2 00 A0 FD | 	call	#popregs_
0ec50                 | _do_cd_ret
0ec50     2D 00 64 FD | 	ret
0ec54                 | 
0ec54                 | ' 
0ec54                 | ' '-------------------- changefreq
0ec54                 | ' 
0ec54                 | ' sub do_changefreq
0ec54                 | _do_changefreq
0ec54     0A CA 05 F6 | 	mov	COUNT_, #10
0ec58     E8 00 A0 FD | 	call	#pushregs_
0ec5c     2C F0 07 F1 | 	add	ptra, #44
0ec60     44 EA BF FD | 	call	#_pop
0ec64     3F 95 02 F6 | 	mov	arg02, result3
0ec68     E7 7A 62 FC | 	wrlong	result1, fp
0ec6c     04 CE 05 F1 | 	add	fp, #4
0ec70     E7 7C 62 FC | 	wrlong	result2, fp
0ec74     04 CE 05 F1 | 	add	fp, #4
0ec78     E7 94 62 FC | 	wrlong	arg02, fp
0ec7c     08 CE 85 F1 | 	sub	fp, #8
0ec80     E7 92 02 F6 | 	mov	arg01, fp
0ec84     B8 EC BF FD | 	call	#_converttofloat
0ec88     3D A7 02 F6 | 	mov	local01, result1
0ec8c     18 EA BF FD | 	call	#_pop
0ec90     3F 95 02 F6 | 	mov	arg02, result3
0ec94     E7 7A 62 FC | 	wrlong	result1, fp
0ec98     04 CE 05 F1 | 	add	fp, #4
0ec9c     E7 7C 62 FC | 	wrlong	result2, fp
0eca0     04 CE 05 F1 | 	add	fp, #4
0eca4     E7 94 62 FC | 	wrlong	arg02, fp
0eca8     08 CE 85 F1 | 	sub	fp, #8
0ecac     E7 92 02 F6 | 	mov	arg01, fp
0ecb0     D0 EB BF FD | 	call	#_converttoint
0ecb4     3D A9 52 F6 | 	abs	local02, result1 wc
0ecb8     07 A8 06 F5 | 	and	local02, #7
0ecbc     54 A9 82 F6 | 	negc	local02, local02
0ecc0     54 95 02 F6 | 	mov	arg02, local02
0ecc4     03 94 66 F0 | 	shl	arg02, #3
0ecc8     54 95 82 F1 | 	sub	arg02, local02
0eccc     02 94 66 F0 | 	shl	arg02, #2
0ecd0     32 93 02 F6 | 	mov	arg01, objptr
0ecd4     15 00 00 FF 
0ecd8     38 93 06 F1 | 	add	arg01, ##11064
0ecdc     49 95 02 F1 | 	add	arg02, arg01
0ece0     16 94 06 F1 | 	add	arg02, #22
0ece4     4A AB E2 FA | 	rdword	local03, arg02
0ece8                 | ' amode=channels(channel).amode
0ece8                 | ' if amode>0 then
0ece8     01 AA 56 F2 | 	cmps	local03, #1 wc
0ecec     AC 01 90 CD |  if_b	jmp	#LR__1262
0ecf0     53 95 02 F6 | 	mov	arg02, local01
0ecf4     FC 16 20 FF 
0ecf8     54 92 06 F6 | 	mov	arg01, ##1076754516
0ecfc     8C 93 B1 FD | 	call	#__system____builtin_logbase
0ed00     3D AD 02 F6 | 	mov	local04, result1
0ed04     1E 94 C6 F9 | 	decod	arg02, #30
0ed08     FC 16 20 FF 
0ed0c     54 92 06 F6 | 	mov	arg01, ##1076754516
0ed10     78 93 B1 FD | 	call	#__system____builtin_logbase
0ed14     3D 95 02 F6 | 	mov	arg02, result1
0ed18     56 93 02 F6 | 	mov	arg01, local04
0ed1c     90 85 B1 FD | 	call	#__system___float_div
0ed20     3D 93 02 F6 | 	mov	arg01, result1
0ed24     00 94 06 F6 | 	mov	arg02, #0
0ed28     48 88 B1 FD | 	call	#__system___float_tointeger
0ed2c     3D AF 02 F6 | 	mov	local05, result1
0ed30     1E AC C6 F9 | 	decod	local04, #30
0ed34     57 93 02 F6 | 	mov	arg01, local05
0ed38     55 93 02 F1 | 	add	arg01, local03
0ed3c     49 93 52 F6 | 	abs	arg01, arg01 wc
0ed40     1F B0 C6 C9 |  if_b	decod	local06, #31
0ed44     00 B0 06 36 |  if_ae	mov	local06, #0
0ed48     5C 7F B1 FD | 	call	#__system___float_fromuns
0ed4c     58 7B 62 F5 | 	xor	result1, local06
0ed50     3D 95 02 F6 | 	mov	arg02, result1
0ed54     56 93 02 F6 | 	mov	arg01, local04
0ed58     68 92 B1 FD | 	call	#__system____builtin_powf
0ed5c     3D 93 02 F6 | 	mov	arg01, result1
0ed60     01 94 06 F6 | 	mov	arg02, #1
0ed64     0C 88 B1 FD | 	call	#__system___float_tointeger
0ed68     3D B3 02 F6 | 	mov	local07, result1
0ed6c                 | '   skip=round(2^(lfreq+amode))                     '''' this const + const 2 lines lower=18
0ed6c                 | '   if skip>32768 then i=skip/32768: skip=32768 else i=1
0ed6c     40 00 00 FF 
0ed70     01 B2 56 F2 | 	cmps	local07, ##32769 wc
0ed74     14 00 90 CD |  if_b	jmp	#LR__1260
0ed78     59 B5 52 F6 | 	abs	local08, local07 wc
0ed7c     0F B4 46 F0 | 	shr	local08, #15
0ed80     5A B5 82 F6 | 	negc	local08, local08
0ed84     0F B2 C6 F9 | 	decod	local07, #15
0ed88     04 00 90 FD | 	jmp	#LR__1261
0ed8c                 | LR__1260
0ed8c     01 B4 06 F6 | 	mov	local08, #1
0ed90                 | LR__1261
0ed90     AA 2B 25 FF 
0ed94     00 93 06 F6 | 	mov	arg01, ##1247237376
0ed98     53 95 02 F6 | 	mov	arg02, local01
0ed9c     10 85 B1 FD | 	call	#__system___float_div
0eda0     3D AD 02 F6 | 	mov	local04, result1
0eda4     5A 93 52 F6 | 	abs	arg01, local08 wc
0eda8     1F B0 C6 C9 |  if_b	decod	local06, #31
0edac     00 B0 06 36 |  if_ae	mov	local06, #0
0edb0     F4 7E B1 FD | 	call	#__system___float_fromuns
0edb4     58 7B 62 F5 | 	xor	result1, local06
0edb8     3D B5 02 F6 | 	mov	local08, result1
0edbc     1E B6 C6 F9 | 	decod	local09, #30
0edc0     12 92 06 F6 | 	mov	arg01, #18
0edc4     55 93 82 F1 | 	sub	arg01, local03
0edc8     57 93 82 F1 | 	sub	arg01, local05
0edcc     49 93 52 F6 | 	abs	arg01, arg01 wc
0edd0     1F B0 C6 C9 |  if_b	decod	local06, #31
0edd4     00 B0 06 36 |  if_ae	mov	local06, #0
0edd8     CC 7E B1 FD | 	call	#__system___float_fromuns
0eddc     58 7B 62 F5 | 	xor	result1, local06
0ede0     3D 95 02 F6 | 	mov	arg02, result1
0ede4     5B 93 02 F6 | 	mov	arg01, local09
0ede8     D8 91 B1 FD | 	call	#__system____builtin_powf
0edec     3D 95 02 F6 | 	mov	arg02, result1
0edf0     5A 93 02 F6 | 	mov	arg01, local08
0edf4     B4 82 B1 FD | 	call	#__system___float_mul
0edf8     3D 95 02 F6 | 	mov	arg02, result1
0edfc     56 93 02 F6 | 	mov	arg01, local04
0ee00     AC 84 B1 FD | 	call	#__system___float_div
0ee04     3D 93 02 F6 | 	mov	arg01, result1
0ee08     01 94 06 F6 | 	mov	arg02, #1
0ee0c     64 87 B1 FD | 	call	#__system___float_tointeger
0ee10     3D B9 02 F6 | 	mov	local10, result1
0ee14     54 B7 02 F6 | 	mov	local09, local02
0ee18     03 B6 66 F0 | 	shl	local09, #3
0ee1c     54 B7 82 F1 | 	sub	local09, local02
0ee20     02 B6 66 F0 | 	shl	local09, #2
0ee24     32 B5 02 F6 | 	mov	local08, objptr
0ee28     15 00 00 FF 
0ee2c     38 B5 06 F1 | 	add	local08, ##11064
0ee30     5A B7 02 F1 | 	add	local09, local08
0ee34     AA 2B 25 FF 
0ee38     00 B5 06 F6 | 	mov	local08, ##1247237376
0ee3c     5C 93 52 F6 | 	abs	arg01, local10 wc
0ee40     1F B0 C6 C9 |  if_b	decod	local06, #31
0ee44     00 B0 06 36 |  if_ae	mov	local06, #0
0ee48     5C 7E B1 FD | 	call	#__system___float_fromuns
0ee4c     58 7B 62 F5 | 	xor	result1, local06
0ee50     3D 95 02 F6 | 	mov	arg02, result1
0ee54     5A 93 02 F6 | 	mov	arg01, local08
0ee58     54 84 B1 FD | 	call	#__system___float_div
0ee5c     3D B5 02 F6 | 	mov	local08, result1
0ee60     59 93 52 F6 | 	abs	arg01, local07 wc
0ee64     1F B0 C6 C9 |  if_b	decod	local06, #31
0ee68     00 B0 06 36 |  if_ae	mov	local06, #0
0ee6c     38 7E B1 FD | 	call	#__system___float_fromuns
0ee70     58 7B 62 F5 | 	xor	result1, local06
0ee74     3D 93 02 F6 | 	mov	arg01, result1
0ee78     00 40 24 FF 
0ee7c     00 94 06 F6 | 	mov	arg02, ##1216348160
0ee80     2C 84 B1 FD | 	call	#__system___float_div
0ee84     3D 95 02 F6 | 	mov	arg02, result1
0ee88     5A 93 02 F6 | 	mov	arg01, local08
0ee8c     1C 82 B1 FD | 	call	#__system___float_mul
0ee90     18 B6 06 F1 | 	add	local09, #24
0ee94     5B 7B 62 FC | 	wrlong	result1, local09
0ee98     BC 00 90 FD | 	jmp	#LR__1263
0ee9c                 | LR__1262
0ee9c     18 B8 06 F6 | 	mov	local10, #24
0eea0     00 40 24 FF 
0eea4     00 AC 06 F6 | 	mov	local04, ##1216348160
0eea8     53 93 02 F6 | 	mov	arg01, local01
0eeac     C7 07 24 FF 
0eeb0     00 94 06 F6 | 	mov	arg02, ##1208978944
0eeb4     F8 83 B1 FD | 	call	#__system___float_div
0eeb8     3D 95 02 F6 | 	mov	arg02, result1
0eebc     56 93 02 F6 | 	mov	arg01, local04
0eec0     E8 81 B1 FD | 	call	#__system___float_mul
0eec4     3D 93 02 F6 | 	mov	arg01, result1
0eec8     01 94 06 F6 | 	mov	arg02, #1
0eecc     A4 86 B1 FD | 	call	#__system___float_tointeger
0eed0     3D B3 02 F6 | 	mov	local07, result1
0eed4     54 B7 02 F6 | 	mov	local09, local02
0eed8     03 B6 66 F0 | 	shl	local09, #3
0eedc     54 B7 82 F1 | 	sub	local09, local02
0eee0     02 B6 66 F0 | 	shl	local09, #2
0eee4     32 B5 02 F6 | 	mov	local08, objptr
0eee8     15 00 00 FF 
0eeec     38 B5 06 F1 | 	add	local08, ##11064
0eef0     5A B7 02 F1 | 	add	local09, local08
0eef4     AA 2B 25 FF 
0eef8     00 B5 06 F6 | 	mov	local08, ##1247237376
0eefc     5C 93 52 F6 | 	abs	arg01, local10 wc
0ef00     1F B0 C6 C9 |  if_b	decod	local06, #31
0ef04     00 B0 06 36 |  if_ae	mov	local06, #0
0ef08     9C 7D B1 FD | 	call	#__system___float_fromuns
0ef0c     58 7B 62 F5 | 	xor	result1, local06
0ef10     3D 95 02 F6 | 	mov	arg02, result1
0ef14     5A 93 02 F6 | 	mov	arg01, local08
0ef18     94 83 B1 FD | 	call	#__system___float_div
0ef1c     3D B5 02 F6 | 	mov	local08, result1
0ef20     59 93 52 F6 | 	abs	arg01, local07 wc
0ef24     1F B0 C6 C9 |  if_b	decod	local06, #31
0ef28     00 B0 06 36 |  if_ae	mov	local06, #0
0ef2c     78 7D B1 FD | 	call	#__system___float_fromuns
0ef30     58 7B 62 F5 | 	xor	result1, local06
0ef34     3D 93 02 F6 | 	mov	arg01, result1
0ef38     00 40 24 FF 
0ef3c     00 94 06 F6 | 	mov	arg02, ##1216348160
0ef40     6C 83 B1 FD | 	call	#__system___float_div
0ef44     3D 95 02 F6 | 	mov	arg02, result1
0ef48     5A 93 02 F6 | 	mov	arg01, local08
0ef4c     5C 81 B1 FD | 	call	#__system___float_mul
0ef50     18 B6 06 F1 | 	add	local09, #24
0ef54     5B 7B 62 FC | 	wrlong	result1, local09
0ef58                 | LR__1263
0ef58     10 B2 66 F0 | 	shl	local07, #16
0ef5c     5C B3 02 F1 | 	add	local07, local10
0ef60                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0ef60     38 00 00 FF 
0ef64     30 64 06 F1 | 	add	objptr, ##28720
0ef68     32 93 02 FB | 	rdlong	arg01, objptr
0ef6c     38 00 00 FF 
0ef70     30 64 86 F1 | 	sub	objptr, ##28720
0ef74     54 B9 02 F6 | 	mov	local10, local02
0ef78     06 B8 66 F0 | 	shl	local10, #6
0ef7c     5C 93 02 F1 | 	add	arg01, local10
0ef80     08 92 06 F1 | 	add	arg01, #8
0ef84     49 7B 02 FB | 	rdlong	result1, arg01
0ef88     1B 7A 2E F4 | 	testbn	result1, #27 wz
0ef8c     28 00 90 5D |  if_ne	jmp	#LR__1264
0ef90     38 00 00 FF 
0ef94     30 64 06 F1 | 	add	objptr, ##28720
0ef98     32 93 02 FB | 	rdlong	arg01, objptr
0ef9c     38 00 00 FF 
0efa0     30 64 86 F1 | 	sub	objptr, ##28720
0efa4     06 A8 66 F0 | 	shl	local02, #6
0efa8     54 93 02 F1 | 	add	arg01, local02
0efac     18 92 06 F1 | 	add	arg01, #24
0efb0     49 B3 62 FC | 	wrlong	local07, arg01
0efb4     68 00 90 FD | 	jmp	#LR__1265
0efb8                 | LR__1264
0efb8     38 00 00 FF 
0efbc     30 64 06 F1 | 	add	objptr, ##28720
0efc0     32 AD 02 FB | 	rdlong	local04, objptr
0efc4     38 00 00 FF 
0efc8     30 64 86 F1 | 	sub	objptr, ##28720
0efcc     54 B9 02 F6 | 	mov	local10, local02
0efd0     06 B8 66 F0 | 	shl	local10, #6
0efd4     5C AD 02 F1 | 	add	local04, local10
0efd8     18 AC 06 F1 | 	add	local04, #24
0efdc     3E 2C 25 FF 
0efe0     3C 92 06 F6 | 	mov	arg01, ##1247312956
0efe4     53 95 02 F6 | 	mov	arg02, local01
0efe8     C4 82 B1 FD | 	call	#__system___float_div
0efec     3D 93 02 F6 | 	mov	arg01, result1
0eff0     01 94 06 F6 | 	mov	arg02, #1
0eff4     7C 85 B1 FD | 	call	#__system___float_tointeger
0eff8     56 7B 52 FC | 	wrword	result1, local04
0effc     38 00 00 FF 
0f000     30 64 06 F1 | 	add	objptr, ##28720
0f004     32 93 02 FB | 	rdlong	arg01, objptr
0f008     38 00 00 FF 
0f00c     30 64 86 F1 | 	sub	objptr, ##28720
0f010     06 A8 66 F0 | 	shl	local02, #6
0f014     54 93 02 F1 | 	add	arg01, local02
0f018     1A 92 06 F1 | 	add	arg01, #26
0f01c     49 01 5A FC | 	wrword	#256, arg01
0f020                 | LR__1265
0f020     E7 F0 03 F6 | 	mov	ptra, fp
0f024     F2 00 A0 FD | 	call	#popregs_
0f028                 | _do_changefreq_ret
0f028     2D 00 64 FD | 	ret
0f02c                 | 
0f02c                 | ' 
0f02c                 | ' '-------------------- changepan
0f02c                 | ' 
0f02c                 | ' sub do_changepan
0f02c                 | _do_changepan
0f02c     02 CA 05 F6 | 	mov	COUNT_, #2
0f030     E8 00 A0 FD | 	call	#pushregs_
0f034     14 F0 07 F1 | 	add	ptra, #20
0f038     6C E6 BF FD | 	call	#_pop
0f03c     E7 7A 62 FC | 	wrlong	result1, fp
0f040     04 CE 05 F1 | 	add	fp, #4
0f044     E7 7C 62 FC | 	wrlong	result2, fp
0f048     04 CE 05 F1 | 	add	fp, #4
0f04c     E7 7E 62 FC | 	wrlong	result3, fp
0f050     08 CE 85 F1 | 	sub	fp, #8
0f054     00 00 23 FF 
0f058     00 A6 06 F6 | 	mov	local01, ##1174405120
0f05c     E7 92 02 F6 | 	mov	arg01, fp
0f060     DC E8 BF FD | 	call	#_converttofloat
0f064     3D 95 02 F6 | 	mov	arg02, result1
0f068     53 93 02 F6 | 	mov	arg01, local01
0f06c     3C 80 B1 FD | 	call	#__system___float_mul
0f070     3D 93 02 F6 | 	mov	arg01, result1
0f074     01 94 06 F6 | 	mov	arg02, #1
0f078     F8 84 B1 FD | 	call	#__system___float_tointeger
0f07c     3D A7 02 F6 | 	mov	local01, result1
0f080     0D A8 C6 F9 | 	decod	local02, #13
0f084     53 A9 02 F1 | 	add	local02, local01
0f088                 | ' 
0f088                 | ' t1=pop()
0f088                 | ' pan=8192+round(8192*converttofloat(t1)) 
0f088                 | ' if pan<0 then pan=0
0f088     00 A8 56 F2 | 	cmps	local02, #0 wc
0f08c     00 A8 06 C6 |  if_b	mov	local02, #0
0f090                 | ' if pan>16384 then pan=16384
0f090     20 00 00 FF 
0f094     01 A8 56 F2 | 	cmps	local02, ##16385 wc
0f098     0E A8 C6 39 |  if_ae	decod	local02, #14
0f09c     08 E6 BF FD | 	call	#_pop
0f0a0     3F A7 02 F6 | 	mov	local01, result3
0f0a4     E7 7A 62 FC | 	wrlong	result1, fp
0f0a8     04 CE 05 F1 | 	add	fp, #4
0f0ac     E7 7C 62 FC | 	wrlong	result2, fp
0f0b0     04 CE 05 F1 | 	add	fp, #4
0f0b4     E7 A6 62 FC | 	wrlong	local01, fp
0f0b8     08 CE 85 F1 | 	sub	fp, #8
0f0bc     E7 92 02 F6 | 	mov	arg01, fp
0f0c0     C0 E7 BF FD | 	call	#_converttoint
0f0c4     3D A7 52 F6 | 	abs	local01, result1 wc
0f0c8     07 A6 06 F5 | 	and	local01, #7
0f0cc     53 A7 82 F6 | 	negc	local01, local01
0f0d0     38 00 00 FF 
0f0d4     30 64 06 F1 | 	add	objptr, ##28720
0f0d8     32 93 02 FB | 	rdlong	arg01, objptr
0f0dc     38 00 00 FF 
0f0e0     30 64 86 F1 | 	sub	objptr, ##28720
0f0e4     06 A6 66 F0 | 	shl	local01, #6
0f0e8     53 93 02 F1 | 	add	arg01, local01
0f0ec     16 92 06 F1 | 	add	arg01, #22
0f0f0     49 A9 52 FC | 	wrword	local02, arg01
0f0f4     E7 F0 03 F6 | 	mov	ptra, fp
0f0f8     F2 00 A0 FD | 	call	#popregs_
0f0fc                 | _do_changepan_ret
0f0fc     2D 00 64 FD | 	ret
0f100                 | 
0f100                 | ' 
0f100                 | ' '-------------------- changevol
0f100                 | ' 
0f100                 | ' sub do_changevol
0f100                 | _do_changevol
0f100     01 CA 05 F6 | 	mov	COUNT_, #1
0f104     E8 00 A0 FD | 	call	#pushregs_
0f108     14 F0 07 F1 | 	add	ptra, #20
0f10c     98 E5 BF FD | 	call	#_pop
0f110     3F 95 02 F6 | 	mov	arg02, result3
0f114     E7 7A 62 FC | 	wrlong	result1, fp
0f118     04 CE 05 F1 | 	add	fp, #4
0f11c     E7 7C 62 FC | 	wrlong	result2, fp
0f120     04 CE 05 F1 | 	add	fp, #4
0f124     E7 94 62 FC | 	wrlong	arg02, fp
0f128     08 CE 85 F1 | 	sub	fp, #8
0f12c     E7 92 02 F6 | 	mov	arg01, fp
0f130     0C E8 BF FD | 	call	#_converttofloat
0f134     3D 93 02 F6 | 	mov	arg01, result1
0f138     00 3D 22 FF 
0f13c     00 94 06 F6 | 	mov	arg02, ##1148846080
0f140     68 7F B1 FD | 	call	#__system___float_mul
0f144     3D 93 02 F6 | 	mov	arg01, result1
0f148     01 94 06 F6 | 	mov	arg02, #1
0f14c     24 84 B1 FD | 	call	#__system___float_tointeger
0f150     3D 95 52 F6 | 	abs	arg02, result1 wc
0f154     0D 94 46 F7 | 	zerox	arg02, #13
0f158     4A A7 82 F6 | 	negc	local01, arg02
0f15c     48 E5 BF FD | 	call	#_pop
0f160     3F 95 02 F6 | 	mov	arg02, result3
0f164     E7 7A 62 FC | 	wrlong	result1, fp
0f168     04 CE 05 F1 | 	add	fp, #4
0f16c     E7 7C 62 FC | 	wrlong	result2, fp
0f170     04 CE 05 F1 | 	add	fp, #4
0f174     E7 94 62 FC | 	wrlong	arg02, fp
0f178     08 CE 85 F1 | 	sub	fp, #8
0f17c     E7 92 02 F6 | 	mov	arg01, fp
0f180     00 E7 BF FD | 	call	#_converttoint
0f184     3D 95 52 F6 | 	abs	arg02, result1 wc
0f188     07 94 06 F5 | 	and	arg02, #7
0f18c     4A 95 82 F6 | 	negc	arg02, arg02
0f190     38 00 00 FF 
0f194     30 64 06 F1 | 	add	objptr, ##28720
0f198     32 93 02 FB | 	rdlong	arg01, objptr
0f19c     38 00 00 FF 
0f1a0     30 64 86 F1 | 	sub	objptr, ##28720
0f1a4     06 94 66 F0 | 	shl	arg02, #6
0f1a8     4A 93 02 F1 | 	add	arg01, arg02
0f1ac     14 92 06 F1 | 	add	arg01, #20
0f1b0     49 A7 52 FC | 	wrword	local01, arg01
0f1b4     E7 F0 03 F6 | 	mov	ptra, fp
0f1b8     F2 00 A0 FD | 	call	#popregs_
0f1bc                 | _do_changevol_ret
0f1bc     2D 00 64 FD | 	ret
0f1c0                 | 
0f1c0                 | ' 
0f1c0                 | ' '-------------------- changewav
0f1c0                 | ' 
0f1c0                 | ' sub do_changewav
0f1c0                 | _do_changewav
0f1c0     01 CA 05 F6 | 	mov	COUNT_, #1
0f1c4     E8 00 A0 FD | 	call	#pushregs_
0f1c8     14 F0 07 F1 | 	add	ptra, #20
0f1cc     D8 E4 BF FD | 	call	#_pop
0f1d0     3F 95 02 F6 | 	mov	arg02, result3
0f1d4     E7 7A 62 FC | 	wrlong	result1, fp
0f1d8     04 CE 05 F1 | 	add	fp, #4
0f1dc     E7 7C 62 FC | 	wrlong	result2, fp
0f1e0     04 CE 05 F1 | 	add	fp, #4
0f1e4     E7 94 62 FC | 	wrlong	arg02, fp
0f1e8     08 CE 85 F1 | 	sub	fp, #8
0f1ec     E7 92 02 F6 | 	mov	arg01, fp
0f1f0     90 E6 BF FD | 	call	#_converttoint
0f1f4     3D A7 02 F6 | 	mov	local01, result1
0f1f8                 | ' 
0f1f8                 | ' t1=pop()
0f1f8                 | ' wave=converttoint(t1)
0f1f8                 | ' if wave<0 then wave=0
0f1f8     00 A6 56 F2 | 	cmps	local01, #0 wc
0f1fc     00 A6 06 C6 |  if_b	mov	local01, #0
0f200     A4 E4 BF FD | 	call	#_pop
0f204     3F 95 02 F6 | 	mov	arg02, result3
0f208     E7 7A 62 FC | 	wrlong	result1, fp
0f20c     04 CE 05 F1 | 	add	fp, #4
0f210     E7 7C 62 FC | 	wrlong	result2, fp
0f214     04 CE 05 F1 | 	add	fp, #4
0f218     E7 94 62 FC | 	wrlong	arg02, fp
0f21c     08 CE 85 F1 | 	sub	fp, #8
0f220     E7 92 02 F6 | 	mov	arg01, fp
0f224     5C E6 BF FD | 	call	#_converttoint
0f228     3D 7D 52 F6 | 	abs	result2, result1 wc
0f22c     07 7C 06 F5 | 	and	result2, #7
0f230     3E 7D 82 F6 | 	negc	result2, result2
0f234                 | ' if wave <32 then 
0f234     20 A6 56 F2 | 	cmps	local01, #32 wc
0f238     34 00 90 3D |  if_ae	jmp	#LR__1270
0f23c     38 00 00 FF 
0f240     30 64 06 F1 | 	add	objptr, ##28720
0f244     32 93 02 FB | 	rdlong	arg01, objptr
0f248     38 00 00 FF 
0f24c     30 64 86 F1 | 	sub	objptr, ##28720
0f250     06 7C 66 F0 | 	shl	result2, #6
0f254     3E 93 02 F1 | 	add	arg01, result2
0f258     08 92 06 F1 | 	add	arg01, #8
0f25c     0B A6 66 F0 | 	shl	local01, #11
0f260     00 00 40 FF 
0f264     00 A6 06 F1 | 	add	local01, ##-2147483648
0f268     49 A7 62 FC | 	wrlong	local01, arg01
0f26c     28 00 90 FD | 	jmp	#LR__1271
0f270                 | LR__1270
0f270     38 00 00 FF 
0f274     30 64 06 F1 | 	add	objptr, ##28720
0f278     32 93 02 FB | 	rdlong	arg01, objptr
0f27c     38 00 00 FF 
0f280     30 64 86 F1 | 	sub	objptr, ##28720
0f284     06 7C 66 F0 | 	shl	result2, #6
0f288     3E 93 02 F1 | 	add	arg01, result2
0f28c     08 92 06 F1 | 	add	arg01, #8
0f290     00 00 C4 FF 
0f294     49 01 68 FC | 	wrlong	##-2013265920, arg01
0f298                 | LR__1271
0f298     E7 F0 03 F6 | 	mov	ptra, fp
0f29c     F2 00 A0 FD | 	call	#popregs_
0f2a0                 | _do_changewav_ret
0f2a0     2D 00 64 FD | 	ret
0f2a4                 | 
0f2a4                 | ' 
0f2a4                 | ' '-------------------- chr$
0f2a4                 | ' 
0f2a4                 | ' sub do_chr
0f2a4                 | _do_chr
0f2a4     00 CA 05 F6 | 	mov	COUNT_, #0
0f2a8     E8 00 A0 FD | 	call	#pushregs_
0f2ac     14 F0 07 F1 | 	add	ptra, #20
0f2b0     4B 00 00 FF 
0f2b4     A0 64 06 F1 | 	add	objptr, ##38560
0f2b8     32 97 02 FB | 	rdlong	arg03, objptr
0f2bc     4B 95 02 F6 | 	mov	arg02, arg03
0f2c0     01 94 66 F0 | 	shl	arg02, #1
0f2c4     4B 95 02 F1 | 	add	arg02, arg03
0f2c8     02 94 66 F0 | 	shl	arg02, #2
0f2cc     03 00 00 FF 
0f2d0     04 64 86 F1 | 	sub	objptr, ##1540
0f2d4     32 95 02 F1 | 	add	arg02, objptr
0f2d8     4A 97 02 FB | 	rdlong	arg03, arg02
0f2dc                 | ' 
0f2dc                 | ' numpar=compiledline(lineptr_e).result.uresult
0f2dc                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f2dc     02 96 16 F2 | 	cmp	arg03, #2 wc
0f2e0     48 00 00 FF 
0f2e4     9C 64 86 F1 | 	sub	objptr, ##37020
0f2e8     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0f2ec     40 00 90 4D |  if_c_and_nz	jmp	#LR__1280
0f2f0     00 92 06 F6 | 	mov	arg01, #0
0f2f4     68 AC B1 FD | 	call	#__system___getiolock_0622
0f2f8     3D 93 02 F6 | 	mov	arg01, result1
0f2fc     DC 56 B1 FD | 	call	#__system___lockmem
0f300     96 01 00 FF 
0f304     7A 95 06 F6 | 	mov	arg02, ##@LR__5971
0f308     00 92 06 F6 | 	mov	arg01, #0
0f30c     00 96 06 F6 | 	mov	arg03, #0
0f310     BC 63 B1 FD | 	call	#__system___basic_print_string
0f314     00 92 06 F6 | 	mov	arg01, #0
0f318     44 AC B1 FD | 	call	#__system___getiolock_0622
0f31c     3D 01 68 FC | 	wrlong	#0, result1
0f320     27 92 06 F6 | 	mov	arg01, #39
0f324     00 94 06 F6 | 	mov	arg02, #0
0f328     34 1D B1 FD | 	call	#_printerror
0f32c     48 00 90 FD | 	jmp	#LR__1281
0f330                 | LR__1280
0f330     74 E3 BF FD | 	call	#_pop
0f334     3F 97 02 F6 | 	mov	arg03, result3
0f338     E7 7A 62 FC | 	wrlong	result1, fp
0f33c     04 CE 05 F1 | 	add	fp, #4
0f340     E7 7C 62 FC | 	wrlong	result2, fp
0f344     04 CE 05 F1 | 	add	fp, #4
0f348     E7 96 62 FC | 	wrlong	arg03, fp
0f34c     08 CE 85 F1 | 	sub	fp, #8
0f350     E7 92 02 F6 | 	mov	arg01, fp
0f354     2C E5 BF FD | 	call	#_converttoint
0f358     3D 93 02 F6 | 	mov	arg01, result1
0f35c     E8 70 B1 FD | 	call	#__system__Chr_S
0f360     E7 7A 62 FC | 	wrlong	result1, fp
0f364     08 CE 05 F1 | 	add	fp, #8
0f368     E7 3E 68 FC | 	wrlong	#31, fp
0f36c     08 CE 85 F1 | 	sub	fp, #8
0f370     E7 92 02 F6 | 	mov	arg01, fp
0f374     C0 E3 BF FD | 	call	#_push
0f378                 | LR__1281
0f378     E7 F0 03 F6 | 	mov	ptra, fp
0f37c     F2 00 A0 FD | 	call	#popregs_
0f380                 | _do_chr_ret
0f380     2D 00 64 FD | 	ret
0f384                 | 
0f384                 | ' 
0f384                 | ' '-------------------- circle
0f384                 | ' 
0f384                 | ' sub do_circle
0f384                 | _do_circle
0f384     02 CA 05 F6 | 	mov	COUNT_, #2
0f388     E8 00 A0 FD | 	call	#pushregs_
0f38c     24 F0 07 F1 | 	add	ptra, #36
0f390     14 E3 BF FD | 	call	#_pop
0f394     3D 99 02 F6 | 	mov	arg04, result1
0f398     3E 97 02 F6 | 	mov	arg03, result2
0f39c     3F 95 02 F6 | 	mov	arg02, result3
0f3a0     18 CE 05 F1 | 	add	fp, #24
0f3a4     E7 98 62 FC | 	wrlong	arg04, fp
0f3a8     04 CE 05 F1 | 	add	fp, #4
0f3ac     E7 96 62 FC | 	wrlong	arg03, fp
0f3b0     04 CE 05 F1 | 	add	fp, #4
0f3b4     E7 94 62 FC | 	wrlong	arg02, fp
0f3b8     20 CE 85 F1 | 	sub	fp, #32
0f3bc     E8 E2 BF FD | 	call	#_pop
0f3c0     3D 99 02 F6 | 	mov	arg04, result1
0f3c4     3E 97 02 F6 | 	mov	arg03, result2
0f3c8     3F A7 02 F6 | 	mov	local01, result3
0f3cc     0C CE 05 F1 | 	add	fp, #12
0f3d0     E7 98 62 FC | 	wrlong	arg04, fp
0f3d4     04 CE 05 F1 | 	add	fp, #4
0f3d8     E7 96 62 FC | 	wrlong	arg03, fp
0f3dc     04 CE 05 F1 | 	add	fp, #4
0f3e0     E7 A6 62 FC | 	wrlong	local01, fp
0f3e4     14 CE 85 F1 | 	sub	fp, #20
0f3e8     BC E2 BF FD | 	call	#_pop
0f3ec     E7 7A 62 FC | 	wrlong	result1, fp
0f3f0     04 CE 05 F1 | 	add	fp, #4
0f3f4     E7 7C 62 FC | 	wrlong	result2, fp
0f3f8     04 CE 05 F1 | 	add	fp, #4
0f3fc     E7 7E 62 FC | 	wrlong	result3, fp
0f400                 | ' 
0f400                 | ' t3=pop()
0f400                 | ' t2=pop()
0f400                 | ' t1=pop()
0f400                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f400     3F 99 02 F6 | 	mov	arg04, result3
0f404     08 CE 85 F1 | 	sub	fp, #8
0f408     1C 98 0E F2 | 	cmp	arg04, #28 wz
0f40c     08 CE 05 51 |  if_ne	add	fp, #8
0f410     E7 A6 02 5B |  if_ne	rdlong	local01, fp
0f414     08 CE 85 51 |  if_ne	sub	fp, #8
0f418     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
0f41c     7C 00 90 5D |  if_ne	jmp	#LR__1290
0f420     14 CE 05 F1 | 	add	fp, #20
0f424     E7 A6 02 FB | 	rdlong	local01, fp
0f428     14 CE 85 F1 | 	sub	fp, #20
0f42c     1C A6 0E F2 | 	cmp	local01, #28 wz
0f430     14 CE 05 51 |  if_ne	add	fp, #20
0f434     E7 98 02 5B |  if_ne	rdlong	arg04, fp
0f438     14 CE 85 51 |  if_ne	sub	fp, #20
0f43c     1D 98 0E 52 |  if_ne	cmp	arg04, #29 wz
0f440     58 00 90 5D |  if_ne	jmp	#LR__1290
0f444     20 CE 05 F1 | 	add	fp, #32
0f448     E7 A6 02 FB | 	rdlong	local01, fp
0f44c     20 CE 85 F1 | 	sub	fp, #32
0f450     1C A6 0E F2 | 	cmp	local01, #28 wz
0f454     20 CE 05 51 |  if_ne	add	fp, #32
0f458     E7 98 02 5B |  if_ne	rdlong	arg04, fp
0f45c     20 CE 85 51 |  if_ne	sub	fp, #32
0f460     1D 98 0E 52 |  if_ne	cmp	arg04, #29 wz
0f464     34 00 90 5D |  if_ne	jmp	#LR__1290
0f468     E7 92 02 FB | 	rdlong	arg01, fp
0f46c     0C CE 05 F1 | 	add	fp, #12
0f470     E7 94 02 FB | 	rdlong	arg02, fp
0f474     0C CE 05 F1 | 	add	fp, #12
0f478     E7 96 02 FB | 	rdlong	arg03, fp
0f47c     18 CE 85 F1 | 	sub	fp, #24
0f480     38 00 00 FF 
0f484     48 64 06 F1 | 	add	objptr, ##28744
0f488     32 99 02 FB | 	rdlong	arg04, objptr
0f48c     38 00 00 FF 
0f490     48 64 86 F1 | 	sub	objptr, ##28744
0f494     68 34 B1 FD | 	call	#_hg010b_spin2_circle
0f498                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f498     4C 00 90 FD | 	jmp	#LR__1291
0f49c                 | LR__1290
0f49c     E7 92 02 F6 | 	mov	arg01, fp
0f4a0     E0 E3 BF FD | 	call	#_converttoint
0f4a4     3D A7 02 F6 | 	mov	local01, result1
0f4a8     E7 92 02 F6 | 	mov	arg01, fp
0f4ac     0C 92 06 F1 | 	add	arg01, #12
0f4b0     D0 E3 BF FD | 	call	#_converttoint
0f4b4     3D A9 02 F6 | 	mov	local02, result1
0f4b8     E7 92 02 F6 | 	mov	arg01, fp
0f4bc     18 92 06 F1 | 	add	arg01, #24
0f4c0     C0 E3 BF FD | 	call	#_converttoint
0f4c4     3D 97 02 F6 | 	mov	arg03, result1
0f4c8     38 00 00 FF 
0f4cc     48 64 06 F1 | 	add	objptr, ##28744
0f4d0     32 99 02 FB | 	rdlong	arg04, objptr
0f4d4     38 00 00 FF 
0f4d8     48 64 86 F1 | 	sub	objptr, ##28744
0f4dc     53 93 02 F6 | 	mov	arg01, local01
0f4e0     54 95 02 F6 | 	mov	arg02, local02
0f4e4     18 34 B1 FD | 	call	#_hg010b_spin2_circle
0f4e8                 | LR__1291
0f4e8     E7 F0 03 F6 | 	mov	ptra, fp
0f4ec     F2 00 A0 FD | 	call	#popregs_
0f4f0                 | _do_circle_ret
0f4f0     2D 00 64 FD | 	ret
0f4f4                 | 
0f4f4                 | ' 
0f4f4                 | ' '-------------------- click
0f4f4                 | ' 
0f4f4                 | ' sub do_click
0f4f4                 | _do_click
0f4f4     B0 E1 BF FD | 	call	#_pop
0f4f8     00 7A 4E F2 | 	cmps	result1, #0 wz
0f4fc                 | ' 
0f4fc                 | ' t1=pop()
0f4fc                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f4fc     51 00 00 AF 
0f500     5C 65 06 A1 |  if_e	add	objptr, ##41820
0f504     32 01 68 AC |  if_e	wrlong	#0, objptr
0f508     51 00 00 FF 
0f50c     5C 65 C6 F3 | 	sumz	objptr, ##41820
0f510     32 03 68 5C |  if_ne	wrlong	#1, objptr
0f514     51 00 00 5F 
0f518     5C 65 86 51 |  if_ne	sub	objptr, ##41820
0f51c                 | _do_click_ret
0f51c     2D 00 64 FD | 	ret
0f520                 | 
0f520                 | ' 
0f520                 | ' '-------------------- close
0f520                 | ' 
0f520                 | ' sub do_close
0f520                 | _do_close
0f520     03 CA 05 F6 | 	mov	COUNT_, #3
0f524     E8 00 A0 FD | 	call	#pushregs_
0f528     7C E1 BF FD | 	call	#_pop
0f52c     3D A7 02 F6 | 	mov	local01, result1
0f530     3F 97 02 F6 | 	mov	arg03, result3
0f534     3E A9 02 F6 | 	mov	local02, result2
0f538     4B AB 02 F6 | 	mov	local03, arg03
0f53c                 | ' 
0f53c                 | ' numpar=compiledline(lineptr_e).result.uresult
0f53c                 | ' t1=pop()
0f53c                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f53c     2C AA 0E F2 | 	cmp	local03, #44 wz
0f540     44 00 90 AD |  if_e	jmp	#LR__1300
0f544     00 92 06 F6 | 	mov	arg01, #0
0f548     14 AA B1 FD | 	call	#__system___getiolock_0622
0f54c     3D 93 02 F6 | 	mov	arg01, result1
0f550     88 54 B1 FD | 	call	#__system___lockmem
0f554     96 01 00 FF 
0f558     81 95 06 F6 | 	mov	arg02, ##@LR__5972
0f55c     00 92 06 F6 | 	mov	arg01, #0
0f560     00 96 06 F6 | 	mov	arg03, #0
0f564     68 61 B1 FD | 	call	#__system___basic_print_string
0f568     00 92 06 F6 | 	mov	arg01, #0
0f56c     0A 94 06 F6 | 	mov	arg02, #10
0f570     00 96 06 F6 | 	mov	arg03, #0
0f574     00 61 B1 FD | 	call	#__system___basic_print_char
0f578     00 92 06 F6 | 	mov	arg01, #0
0f57c     E0 A9 B1 FD | 	call	#__system___getiolock_0622
0f580     3D 01 68 FC | 	wrlong	#0, result1
0f584     08 00 90 FD | 	jmp	#LR__1301
0f588                 | LR__1300
0f588                 | ' channel  = t1.result.iresult
0f588                 | ' close #channel
0f588     53 93 02 F6 | 	mov	arg01, local01
0f58c     28 A0 B1 FD | 	call	#__system__close
0f590                 | LR__1301
0f590     E7 F0 03 F6 | 	mov	ptra, fp
0f594     F2 00 A0 FD | 	call	#popregs_
0f598                 | _do_close_ret
0f598     2D 00 64 FD | 	ret
0f59c                 | 
0f59c                 | ' 
0f59c                 | ' '-------------------- cls
0f59c                 | ' 
0f59c                 | ' sub do_cls
0f59c                 | _do_cls
0f59c     38 00 00 FF 
0f5a0     5C 64 06 F1 | 	add	objptr, ##28764
0f5a4     32 93 02 FB | 	rdlong	arg01, objptr
0f5a8     04 64 86 F1 | 	sub	objptr, #4
0f5ac     32 95 02 FB | 	rdlong	arg02, objptr
0f5b0     38 00 00 FF 
0f5b4     58 64 86 F1 | 	sub	objptr, ##28760
0f5b8     50 38 B1 FD | 	call	#_hg010b_spin2_cls
0f5bc     38 00 00 FF 
0f5c0     5C 64 06 F1 | 	add	objptr, ##28764
0f5c4     32 95 02 FB | 	rdlong	arg02, objptr
0f5c8     14 64 86 F1 | 	sub	objptr, #20
0f5cc     32 95 62 FC | 	wrlong	arg02, objptr
0f5d0     38 00 00 FF 
0f5d4     48 64 86 F1 | 	sub	objptr, ##28744
0f5d8                 | _do_cls_ret
0f5d8     2D 00 64 FD | 	ret
0f5dc                 | 
0f5dc                 | ' 
0f5dc                 | ' sub do_coginit
0f5dc                 | _do_coginit
0f5dc     05 CA 05 F6 | 	mov	COUNT_, #5
0f5e0     E8 00 A0 FD | 	call	#pushregs_
0f5e4     08 00 00 FF 
0f5e8     1C F0 07 F1 | 	add	ptra, ##4124
0f5ec     4B 00 00 FF 
0f5f0     A0 64 06 F1 | 	add	objptr, ##38560
0f5f4     32 A7 02 FB | 	rdlong	local01, objptr
0f5f8     53 A9 02 F6 | 	mov	local02, local01
0f5fc     01 A8 66 F0 | 	shl	local02, #1
0f600     53 A9 02 F1 | 	add	local02, local01
0f604     02 A8 66 F0 | 	shl	local02, #2
0f608     03 00 00 FF 
0f60c     04 64 86 F1 | 	sub	objptr, ##1540
0f610     32 A9 02 F1 | 	add	local02, objptr
0f614     54 A9 02 FB | 	rdlong	local02, local02
0f618                 | ' numpar=compiledline(lineptr_e).result.uresult
0f618                 | ' if numpar<2 orelse numpar>3 then print "coginit: "; : printerror(39) : return
0f618     02 A8 56 F2 | 	cmps	local02, #2 wc
0f61c     48 00 00 FF 
0f620     9C 64 86 F1 | 	sub	objptr, ##37020
0f624     08 00 90 CD |  if_b	jmp	#LR__1310
0f628     04 A8 56 F2 | 	cmps	local02, #4 wc
0f62c     40 00 90 CD |  if_b	jmp	#LR__1311
0f630                 | LR__1310
0f630     00 92 06 F6 | 	mov	arg01, #0
0f634     28 A9 B1 FD | 	call	#__system___getiolock_0622
0f638     3D 93 02 F6 | 	mov	arg01, result1
0f63c     9C 53 B1 FD | 	call	#__system___lockmem
0f640     96 01 00 FF 
0f644     93 95 06 F6 | 	mov	arg02, ##@LR__5973
0f648     00 92 06 F6 | 	mov	arg01, #0
0f64c     00 96 06 F6 | 	mov	arg03, #0
0f650     7C 60 B1 FD | 	call	#__system___basic_print_string
0f654     00 92 06 F6 | 	mov	arg01, #0
0f658     04 A9 B1 FD | 	call	#__system___getiolock_0622
0f65c     3D 01 68 FC | 	wrlong	#0, result1
0f660     27 92 06 F6 | 	mov	arg01, #39
0f664     00 94 06 F6 | 	mov	arg02, #0
0f668     F4 19 B1 FD | 	call	#_printerror
0f66c     2C 01 90 FD | 	jmp	#LR__1315
0f670                 | LR__1311
0f670     34 E0 BF FD | 	call	#_pop
0f674     3F A7 02 F6 | 	mov	local01, result3
0f678     08 00 00 FF 
0f67c     10 CE 05 F1 | 	add	fp, ##4112
0f680     E7 7A 62 FC | 	wrlong	result1, fp
0f684     04 CE 05 F1 | 	add	fp, #4
0f688     E7 7C 62 FC | 	wrlong	result2, fp
0f68c     04 CE 05 F1 | 	add	fp, #4
0f690     E7 A6 62 FC | 	wrlong	local01, fp
0f694     08 CE 85 F1 | 	sub	fp, #8
0f698     E7 92 02 F6 | 	mov	arg01, fp
0f69c     08 00 00 FF 
0f6a0     10 CE 85 F1 | 	sub	fp, ##4112
0f6a4     DC E1 BF FD | 	call	#_converttoint
0f6a8     3D AB 02 F6 | 	mov	local03, result1
0f6ac     F8 DF BF FD | 	call	#_pop
0f6b0     3F A7 02 F6 | 	mov	local01, result3
0f6b4     08 00 00 FF 
0f6b8     10 CE 05 F1 | 	add	fp, ##4112
0f6bc     E7 7A 62 FC | 	wrlong	result1, fp
0f6c0     04 CE 05 F1 | 	add	fp, #4
0f6c4     E7 7C 62 FC | 	wrlong	result2, fp
0f6c8     04 CE 05 F1 | 	add	fp, #4
0f6cc     E7 A6 62 FC | 	wrlong	local01, fp
0f6d0     08 CE 85 F1 | 	sub	fp, #8
0f6d4     E7 92 02 F6 | 	mov	arg01, fp
0f6d8     08 00 00 FF 
0f6dc     10 CE 85 F1 | 	sub	fp, ##4112
0f6e0     A0 E1 BF FD | 	call	#_converttoint
0f6e4     3D AD 02 F6 | 	mov	local04, result1
0f6e8                 | ' t1=pop()
0f6e8                 | ' ptra_val=converttoint(t1)
0f6e8                 | ' t1=pop()
0f6e8                 | ' addrval=converttoint(t1)
0f6e8                 | ' if numpar=3 then 
0f6e8     03 A8 0E F2 | 	cmp	local02, #3 wz
0f6ec     40 00 90 5D |  if_ne	jmp	#LR__1312
0f6f0     B4 DF BF FD | 	call	#_pop
0f6f4     3F A7 02 F6 | 	mov	local01, result3
0f6f8     08 00 00 FF 
0f6fc     10 CE 05 F1 | 	add	fp, ##4112
0f700     E7 7A 62 FC | 	wrlong	result1, fp
0f704     04 CE 05 F1 | 	add	fp, #4
0f708     E7 7C 62 FC | 	wrlong	result2, fp
0f70c     04 CE 05 F1 | 	add	fp, #4
0f710     E7 A6 62 FC | 	wrlong	local01, fp
0f714     08 CE 85 F1 | 	sub	fp, #8
0f718     E7 92 02 F6 | 	mov	arg01, fp
0f71c     08 00 00 FF 
0f720     10 CE 85 F1 | 	sub	fp, ##4112
0f724     5C E1 BF FD | 	call	#_converttoint
0f728     3D AF 02 F6 | 	mov	local05, result1
0f72c     04 00 90 FD | 	jmp	#LR__1313
0f730                 | LR__1312
0f730     10 AE 06 F6 | 	mov	local05, #16
0f734                 | LR__1313
0f734                 | '     
0f734                 | ' if addrval>$80000 then psram.read1(varptr(tempbuf(0)),addrval,4096) : addrval=varptr(tempbuf(0))
0f734     00 04 00 FF 
0f738     01 AC 56 F2 | 	cmps	local04, ##524289 wc
0f73c     2C 00 90 CD |  if_b	jmp	#LR__1314
0f740     E7 92 02 F6 | 	mov	arg01, fp
0f744     10 92 06 F1 | 	add	arg01, #16
0f748     56 95 02 F6 | 	mov	arg02, local04
0f74c     0C 96 C6 F9 | 	decod	arg03, #12
0f750     0B 00 00 FF 
0f754     CC 64 06 F1 | 	add	objptr, ##5836
0f758     60 46 B1 FD | 	call	#_psram_spin2_read1
0f75c     0B 00 00 FF 
0f760     CC 64 86 F1 | 	sub	objptr, ##5836
0f764     E7 AC 02 F6 | 	mov	local04, fp
0f768     10 AC 06 F1 | 	add	local04, #16
0f76c                 | LR__1314
0f76c                 | ' 
0f76c                 | '  asm
0f76c     28 AA 62 FD | 	setq	local03
0f770     56 AF F2 FC | 	coginit	local05, local04 wc
0f774                 | '  
0f774                 | ' return cog 
0f774     08 00 00 FF 
0f778     10 CE 05 F1 | 	add	fp, ##4112
0f77c     E7 AE 62 FC | 	wrlong	local05, fp
0f780     08 CE 05 F1 | 	add	fp, #8
0f784     E7 38 68 FC | 	wrlong	#28, fp
0f788     08 CE 85 F1 | 	sub	fp, #8
0f78c     E7 92 02 F6 | 	mov	arg01, fp
0f790     08 00 00 FF 
0f794     10 CE 85 F1 | 	sub	fp, ##4112
0f798     9C DF BF FD | 	call	#_push
0f79c                 | LR__1315
0f79c     E7 F0 03 F6 | 	mov	ptra, fp
0f7a0     F2 00 A0 FD | 	call	#popregs_
0f7a4                 | _do_coginit_ret
0f7a4     2D 00 64 FD | 	ret
0f7a8                 | 
0f7a8                 | ' 
0f7a8                 | ' '-------------------- cogstop
0f7a8                 | ' 
0f7a8                 | ' sub do_cogstop
0f7a8                 | _do_cogstop
0f7a8     00 CA 05 F6 | 	mov	COUNT_, #0
0f7ac     E8 00 A0 FD | 	call	#pushregs_
0f7b0     0C F0 07 F1 | 	add	ptra, #12
0f7b4     F0 DE BF FD | 	call	#_pop
0f7b8     E7 7A 62 FC | 	wrlong	result1, fp
0f7bc     04 CE 05 F1 | 	add	fp, #4
0f7c0     E7 7C 62 FC | 	wrlong	result2, fp
0f7c4     04 CE 05 F1 | 	add	fp, #4
0f7c8     E7 7E 62 FC | 	wrlong	result3, fp
0f7cc     08 CE 85 F1 | 	sub	fp, #8
0f7d0     E7 92 02 F6 | 	mov	arg01, fp
0f7d4     AC E0 BF FD | 	call	#_converttoint
0f7d8     03 7A 62 FD | 	cogstop	result1
0f7dc     E7 F0 03 F6 | 	mov	ptra, fp
0f7e0     F2 00 A0 FD | 	call	#popregs_
0f7e4                 | _do_cogstop_ret
0f7e4     2D 00 64 FD | 	ret
0f7e8                 | 
0f7e8                 | ' 
0f7e8                 | ' '-------------------- color
0f7e8                 | ' 
0f7e8                 | ' sub do_color
0f7e8                 | _do_color
0f7e8     03 CA 05 F6 | 	mov	COUNT_, #3
0f7ec     E8 00 A0 FD | 	call	#pushregs_
0f7f0     B4 DE BF FD | 	call	#_pop
0f7f4     3D A7 02 F6 | 	mov	local01, result1
0f7f8     3E A9 02 F6 | 	mov	local02, result2
0f7fc     3F AB 02 F6 | 	mov	local03, result3
0f800     38 00 00 FF 
0f804     48 64 06 F1 | 	add	objptr, ##28744
0f808     32 A7 62 FC | 	wrlong	local01, objptr
0f80c     38 00 00 FF 
0f810     48 64 86 F1 | 	sub	objptr, ##28744
0f814     E7 F0 03 F6 | 	mov	ptra, fp
0f818     F2 00 A0 FD | 	call	#popregs_
0f81c                 | _do_color_ret
0f81c     2D 00 64 FD | 	ret
0f820                 | 
0f820                 | ' 
0f820                 | ' '-------------------- copy
0f820                 | ' 
0f820                 | ' sub do_copy
0f820                 | _do_copy
0f820     08 CA 05 F6 | 	mov	COUNT_, #8
0f824     E8 00 A0 FD | 	call	#pushregs_
0f828     7C DE BF FD | 	call	#_pop
0f82c     3D A7 02 F6 | 	mov	local01, result1
0f830     3E 9B 02 F6 | 	mov	arg05, result2
0f834     3F 99 02 F6 | 	mov	arg04, result3
0f838     4D A9 02 F6 | 	mov	local02, arg05
0f83c     4C AB 02 F6 | 	mov	local03, arg04
0f840     64 DE BF FD | 	call	#_pop
0f844     3E 9B 02 F6 | 	mov	arg05, result2
0f848     3F 99 02 F6 | 	mov	arg04, result3
0f84c     3D AD 02 F6 | 	mov	local04, result1
0f850     4D AF 02 F6 | 	mov	local05, arg05
0f854     4C B1 02 F6 | 	mov	local06, arg04
0f858                 | ' 
0f858                 | ' t1=pop()
0f858                 | ' t2=pop()
0f858                 | ' if t2.result_type=result_string2 then 
0f858     2B B0 0E F2 | 	cmp	local06, #43 wz
0f85c     10 00 90 5D |  if_ne	jmp	#LR__1320
0f860     56 93 02 F6 | 	mov	arg01, local04
0f864     B0 DF BF FD | 	call	#_convertstring
0f868     3D B3 02 F6 | 	mov	local07, result1
0f86c     2C 00 90 FD | 	jmp	#LR__1322
0f870                 | LR__1320
0f870     1F B0 0E F2 | 	cmp	local06, #31 wz
0f874     56 B3 02 A6 |  if_e	mov	local07, local04
0f878     20 00 90 AD |  if_e	jmp	#LR__1321
0f87c     51 00 00 FF 
0f880     10 65 06 F1 | 	add	objptr, ##41744
0f884     32 95 02 FB | 	rdlong	arg02, objptr
0f888     51 00 00 FF 
0f88c     10 65 86 F1 | 	sub	objptr, ##41744
0f890     0F 92 06 F6 | 	mov	arg01, #15
0f894     C8 17 B1 FD | 	call	#_printerror
0f898                 | '   printerror(15,runheader(0)) : return
0f898     50 03 90 FD | 	jmp	#LR__1329
0f89c                 | LR__1321
0f89c                 | LR__1322
0f89c                 | ' if t1.result_type=result_string2 then 
0f89c     2B AA 0E F2 | 	cmp	local03, #43 wz
0f8a0     10 00 90 5D |  if_ne	jmp	#LR__1323
0f8a4     53 93 02 F6 | 	mov	arg01, local01
0f8a8     6C DF BF FD | 	call	#_convertstring
0f8ac     3D B5 02 F6 | 	mov	local08, result1
0f8b0     2C 00 90 FD | 	jmp	#LR__1325
0f8b4                 | LR__1323
0f8b4     1F AA 0E F2 | 	cmp	local03, #31 wz
0f8b8     53 B5 02 A6 |  if_e	mov	local08, local01
0f8bc     20 00 90 AD |  if_e	jmp	#LR__1324
0f8c0     51 00 00 FF 
0f8c4     10 65 06 F1 | 	add	objptr, ##41744
0f8c8     32 95 02 FB | 	rdlong	arg02, objptr
0f8cc     51 00 00 FF 
0f8d0     10 65 86 F1 | 	sub	objptr, ##41744
0f8d4     0F 92 06 F6 | 	mov	arg01, #15
0f8d8     84 17 B1 FD | 	call	#_printerror
0f8dc                 | '   printerror(15,runheader(0)) : return
0f8dc     0C 03 90 FD | 	jmp	#LR__1329
0f8e0                 | LR__1324
0f8e0                 | LR__1325
0f8e0                 | ' 
0f8e0                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0f8e0     09 92 06 F6 | 	mov	arg01, #9
0f8e4     59 95 02 F6 | 	mov	arg02, local07
0f8e8     00 96 06 F6 | 	mov	arg03, #0
0f8ec     9C 5C B1 FD | 	call	#__system___basic_open_string
0f8f0     20 68 06 F1 | 	add	ptr___system__dat__, #32
0f8f4     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
0f8f8     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0f8fc     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0f900     53 00 00 FF 
0f904     30 65 06 F1 | 	add	objptr, ##42800
0f908     32 7B 62 FC | 	wrlong	result1, objptr
0f90c     53 00 00 FF 
0f910     30 65 86 F1 | 	sub	objptr, ##42800
0f914     0C 01 90 AD |  if_e	jmp	#LR__1326
0f918     00 92 06 F6 | 	mov	arg01, #0
0f91c     40 A6 B1 FD | 	call	#__system___getiolock_0622
0f920     3D 93 02 F6 | 	mov	arg01, result1
0f924     B4 50 B1 FD | 	call	#__system___lockmem
0f928     96 01 00 FF 
0f92c     9D 95 06 F6 | 	mov	arg02, ##@LR__5974
0f930     00 92 06 F6 | 	mov	arg01, #0
0f934     00 96 06 F6 | 	mov	arg03, #0
0f938     94 5D B1 FD | 	call	#__system___basic_print_string
0f93c     53 00 00 FF 
0f940     30 65 06 F1 | 	add	objptr, ##42800
0f944     32 95 02 FB | 	rdlong	arg02, objptr
0f948     53 00 00 FF 
0f94c     30 65 86 F1 | 	sub	objptr, ##42800
0f950     00 92 06 F6 | 	mov	arg01, #0
0f954     00 96 06 F6 | 	mov	arg03, #0
0f958     0A 98 06 F6 | 	mov	arg04, #10
0f95c     B4 5D B1 FD | 	call	#__system___basic_print_integer
0f960     96 01 00 FF 
0f964     AD 95 06 F6 | 	mov	arg02, ##@LR__5975
0f968     00 92 06 F6 | 	mov	arg01, #0
0f96c     00 96 06 F6 | 	mov	arg03, #0
0f970     5C 5D B1 FD | 	call	#__system___basic_print_string
0f974     51 00 00 FF 
0f978     10 65 06 F1 | 	add	objptr, ##41744
0f97c     32 95 02 FB | 	rdlong	arg02, objptr
0f980     51 00 00 FF 
0f984     10 65 86 F1 | 	sub	objptr, ##41744
0f988     00 92 06 F6 | 	mov	arg01, #0
0f98c     00 96 06 F6 | 	mov	arg03, #0
0f990     0A 98 06 F6 | 	mov	arg04, #10
0f994     BC 5D B1 FD | 	call	#__system___basic_print_unsigned
0f998     96 01 00 FF 
0f99c     B7 95 06 F6 | 	mov	arg02, ##@LR__5976
0f9a0     00 92 06 F6 | 	mov	arg01, #0
0f9a4     00 96 06 F6 | 	mov	arg03, #0
0f9a8     24 5D B1 FD | 	call	#__system___basic_print_string
0f9ac     00 B4 06 F6 | 	mov	local08, #0
0f9b0     53 00 00 FF 
0f9b4     30 65 06 F1 | 	add	objptr, ##42800
0f9b8     32 93 02 FB | 	rdlong	arg01, objptr
0f9bc     53 00 00 FF 
0f9c0     30 65 86 F1 | 	sub	objptr, ##42800
0f9c4     C4 71 B1 FD | 	call	#__system___strerror
0f9c8     3D 95 02 F6 | 	mov	arg02, result1
0f9cc     5A 93 02 F6 | 	mov	arg01, local08
0f9d0     00 96 06 F6 | 	mov	arg03, #0
0f9d4     F8 5C B1 FD | 	call	#__system___basic_print_string
0f9d8     96 01 00 FF 
0f9dc     BA 95 06 F6 | 	mov	arg02, ##@LR__5977
0f9e0     00 92 06 F6 | 	mov	arg01, #0
0f9e4     00 96 06 F6 | 	mov	arg03, #0
0f9e8     E4 5C B1 FD | 	call	#__system___basic_print_string
0f9ec     00 92 06 F6 | 	mov	arg01, #0
0f9f0     59 95 02 F6 | 	mov	arg02, local07
0f9f4     00 96 06 F6 | 	mov	arg03, #0
0f9f8     D4 5C B1 FD | 	call	#__system___basic_print_string
0f9fc     00 92 06 F6 | 	mov	arg01, #0
0fa00     0A 94 06 F6 | 	mov	arg02, #10
0fa04     00 96 06 F6 | 	mov	arg03, #0
0fa08     6C 5C B1 FD | 	call	#__system___basic_print_char
0fa0c     00 92 06 F6 | 	mov	arg01, #0
0fa10     4C A5 B1 FD | 	call	#__system___getiolock_0622
0fa14     3D 01 68 FC | 	wrlong	#0, result1
0fa18     09 92 06 F6 | 	mov	arg01, #9
0fa1c     98 9B B1 FD | 	call	#__system__close
0fa20     C8 01 90 FD | 	jmp	#LR__1329
0fa24                 | LR__1326
0fa24                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0fa24     08 92 06 F6 | 	mov	arg01, #8
0fa28     5A 95 02 F6 | 	mov	arg02, local08
0fa2c     0D 96 06 F6 | 	mov	arg03, #13
0fa30     58 5B B1 FD | 	call	#__system___basic_open_string
0fa34     20 68 06 F1 | 	add	ptr___system__dat__, #32
0fa38     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
0fa3c     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0fa40     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0fa44     53 00 00 FF 
0fa48     30 65 06 F1 | 	add	objptr, ##42800
0fa4c     32 7B 62 FC | 	wrlong	result1, objptr
0fa50     53 00 00 FF 
0fa54     30 65 86 F1 | 	sub	objptr, ##42800
0fa58     0C 01 90 AD |  if_e	jmp	#LR__1327
0fa5c     00 92 06 F6 | 	mov	arg01, #0
0fa60     FC A4 B1 FD | 	call	#__system___getiolock_0622
0fa64     3D 93 02 F6 | 	mov	arg01, result1
0fa68     70 4F B1 FD | 	call	#__system___lockmem
0fa6c     96 01 00 FF 
0fa70     C8 95 06 F6 | 	mov	arg02, ##@LR__5978
0fa74     00 92 06 F6 | 	mov	arg01, #0
0fa78     00 96 06 F6 | 	mov	arg03, #0
0fa7c     50 5C B1 FD | 	call	#__system___basic_print_string
0fa80     53 00 00 FF 
0fa84     30 65 06 F1 | 	add	objptr, ##42800
0fa88     32 95 02 FB | 	rdlong	arg02, objptr
0fa8c     53 00 00 FF 
0fa90     30 65 86 F1 | 	sub	objptr, ##42800
0fa94     00 92 06 F6 | 	mov	arg01, #0
0fa98     00 96 06 F6 | 	mov	arg03, #0
0fa9c     0A 98 06 F6 | 	mov	arg04, #10
0faa0     70 5C B1 FD | 	call	#__system___basic_print_integer
0faa4     96 01 00 FF 
0faa8     D8 95 06 F6 | 	mov	arg02, ##@LR__5979
0faac     00 92 06 F6 | 	mov	arg01, #0
0fab0     00 96 06 F6 | 	mov	arg03, #0
0fab4     18 5C B1 FD | 	call	#__system___basic_print_string
0fab8     51 00 00 FF 
0fabc     10 65 06 F1 | 	add	objptr, ##41744
0fac0     32 95 02 FB | 	rdlong	arg02, objptr
0fac4     51 00 00 FF 
0fac8     10 65 86 F1 | 	sub	objptr, ##41744
0facc     00 92 06 F6 | 	mov	arg01, #0
0fad0     00 96 06 F6 | 	mov	arg03, #0
0fad4     0A 98 06 F6 | 	mov	arg04, #10
0fad8     78 5C B1 FD | 	call	#__system___basic_print_unsigned
0fadc     96 01 00 FF 
0fae0     E2 95 06 F6 | 	mov	arg02, ##@LR__5980
0fae4     00 92 06 F6 | 	mov	arg01, #0
0fae8     00 96 06 F6 | 	mov	arg03, #0
0faec     E0 5B B1 FD | 	call	#__system___basic_print_string
0faf0     00 B2 06 F6 | 	mov	local07, #0
0faf4     53 00 00 FF 
0faf8     30 65 06 F1 | 	add	objptr, ##42800
0fafc     32 93 02 FB | 	rdlong	arg01, objptr
0fb00     53 00 00 FF 
0fb04     30 65 86 F1 | 	sub	objptr, ##42800
0fb08     80 70 B1 FD | 	call	#__system___strerror
0fb0c     3D 95 02 F6 | 	mov	arg02, result1
0fb10     59 93 02 F6 | 	mov	arg01, local07
0fb14     00 96 06 F6 | 	mov	arg03, #0
0fb18     B4 5B B1 FD | 	call	#__system___basic_print_string
0fb1c     96 01 00 FF 
0fb20     E5 95 06 F6 | 	mov	arg02, ##@LR__5981
0fb24     00 92 06 F6 | 	mov	arg01, #0
0fb28     00 96 06 F6 | 	mov	arg03, #0
0fb2c     A0 5B B1 FD | 	call	#__system___basic_print_string
0fb30     00 92 06 F6 | 	mov	arg01, #0
0fb34     5A 95 02 F6 | 	mov	arg02, local08
0fb38     00 96 06 F6 | 	mov	arg03, #0
0fb3c     90 5B B1 FD | 	call	#__system___basic_print_string
0fb40     00 92 06 F6 | 	mov	arg01, #0
0fb44     0A 94 06 F6 | 	mov	arg02, #10
0fb48     00 96 06 F6 | 	mov	arg03, #0
0fb4c     28 5B B1 FD | 	call	#__system___basic_print_char
0fb50     00 92 06 F6 | 	mov	arg01, #0
0fb54     08 A4 B1 FD | 	call	#__system___getiolock_0622
0fb58     3D 01 68 FC | 	wrlong	#0, result1
0fb5c     08 92 06 F6 | 	mov	arg01, #8
0fb60     54 9A B1 FD | 	call	#__system__close
0fb64     84 00 90 FD | 	jmp	#LR__1329
0fb68                 | LR__1327
0fb68                 | ' 
0fb68                 | ' do
0fb68                 | LR__1328
0fb68                 | '   get #9,,block(0),1024,r
0fb68     32 97 02 F6 | 	mov	arg03, objptr
0fb6c     4F 00 00 FF 
0fb70     D4 96 06 F1 | 	add	arg03, ##40660
0fb74     09 92 06 F6 | 	mov	arg01, #9
0fb78     00 94 06 F6 | 	mov	arg02, #0
0fb7c     0A 98 C6 F9 | 	decod	arg04, #10
0fb80     01 9A 06 F6 | 	mov	arg05, #1
0fb84     D0 5C B1 FD | 	call	#__system___basic_get
0fb88     53 00 00 FF 
0fb8c     68 65 06 F1 | 	add	objptr, ##42856
0fb90     32 7B 62 FC | 	wrlong	result1, objptr
0fb94                 | '   put #8,,block(0),r
0fb94     04 00 00 FF 
0fb98     94 64 86 F1 | 	sub	objptr, ##2196
0fb9c     32 97 02 F6 | 	mov	arg03, objptr
0fba0     3D 99 02 F6 | 	mov	arg04, result1
0fba4     4F 00 00 FF 
0fba8     D4 64 86 F1 | 	sub	objptr, ##40660
0fbac     08 92 06 F6 | 	mov	arg01, #8
0fbb0     00 94 06 F6 | 	mov	arg02, #0
0fbb4     01 9A 06 F6 | 	mov	arg05, #1
0fbb8     24 5C B1 FD | 	call	#__system___basic_put
0fbbc     53 00 00 FF 
0fbc0     68 65 06 F1 | 	add	objptr, ##42856
0fbc4     32 B5 02 FB | 	rdlong	local08, objptr
0fbc8     53 00 00 FF 
0fbcc     68 65 86 F1 | 	sub	objptr, ##42856
0fbd0     02 00 00 FF 
0fbd4     00 B4 0E F2 | 	cmp	local08, ##1024 wz
0fbd8     8C FF 9F AD |  if_e	jmp	#LR__1328
0fbdc                 | ' close #8
0fbdc     08 92 06 F6 | 	mov	arg01, #8
0fbe0     D4 99 B1 FD | 	call	#__system__close
0fbe4                 | ' close #9
0fbe4     09 92 06 F6 | 	mov	arg01, #9
0fbe8     CC 99 B1 FD | 	call	#__system__close
0fbec                 | LR__1329
0fbec     E7 F0 03 F6 | 	mov	ptra, fp
0fbf0     F2 00 A0 FD | 	call	#popregs_
0fbf4                 | _do_copy_ret
0fbf4     2D 00 64 FD | 	ret
0fbf8                 | 
0fbf8                 | ' 
0fbf8                 | ' '-------------------- cos
0fbf8                 | ' 
0fbf8                 | ' sub do_cos
0fbf8                 | _do_cos
0fbf8     01 CA 05 F6 | 	mov	COUNT_, #1
0fbfc     E8 00 A0 FD | 	call	#pushregs_
0fc00     10 F0 07 F1 | 	add	ptra, #16
0fc04     4B 00 00 FF 
0fc08     A0 64 06 F1 | 	add	objptr, ##38560
0fc0c     32 97 02 FB | 	rdlong	arg03, objptr
0fc10     4B 95 02 F6 | 	mov	arg02, arg03
0fc14     01 94 66 F0 | 	shl	arg02, #1
0fc18     4B 95 02 F1 | 	add	arg02, arg03
0fc1c     02 94 66 F0 | 	shl	arg02, #2
0fc20     03 00 00 FF 
0fc24     04 64 86 F1 | 	sub	objptr, ##1540
0fc28     32 95 02 F1 | 	add	arg02, objptr
0fc2c     4A 97 02 FB | 	rdlong	arg03, arg02
0fc30                 | ' 
0fc30                 | ' numpar=compiledline(lineptr_e).result.uresult
0fc30                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0fc30     02 96 16 F2 | 	cmp	arg03, #2 wc
0fc34     48 00 00 FF 
0fc38     9C 64 86 F1 | 	sub	objptr, ##37020
0fc3c     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
0fc40     40 00 90 4D |  if_c_and_nz	jmp	#LR__1330
0fc44     00 92 06 F6 | 	mov	arg01, #0
0fc48     14 A3 B1 FD | 	call	#__system___getiolock_0622
0fc4c     3D 93 02 F6 | 	mov	arg01, result1
0fc50     88 4D B1 FD | 	call	#__system___lockmem
0fc54     96 01 00 FF 
0fc58     F3 95 06 F6 | 	mov	arg02, ##@LR__5982
0fc5c     00 92 06 F6 | 	mov	arg01, #0
0fc60     00 96 06 F6 | 	mov	arg03, #0
0fc64     68 5A B1 FD | 	call	#__system___basic_print_string
0fc68     00 92 06 F6 | 	mov	arg01, #0
0fc6c     F0 A2 B1 FD | 	call	#__system___getiolock_0622
0fc70     3D 01 68 FC | 	wrlong	#0, result1
0fc74     27 92 06 F6 | 	mov	arg01, #39
0fc78     00 94 06 F6 | 	mov	arg02, #0
0fc7c     E0 13 B1 FD | 	call	#_printerror
0fc80     78 00 90 FD | 	jmp	#LR__1331
0fc84                 | LR__1330
0fc84     20 DA BF FD | 	call	#_pop
0fc88     E7 7A 62 FC | 	wrlong	result1, fp
0fc8c     04 CE 05 F1 | 	add	fp, #4
0fc90     E7 7C 62 FC | 	wrlong	result2, fp
0fc94     04 CE 05 F1 | 	add	fp, #4
0fc98     E7 7E 62 FC | 	wrlong	result3, fp
0fc9c     08 CE 85 F1 | 	sub	fp, #8
0fca0     53 00 00 FF 
0fca4     00 65 06 F1 | 	add	objptr, ##42752
0fca8     32 A7 02 FB | 	rdlong	local01, objptr
0fcac     53 00 00 FF 
0fcb0     00 65 86 F1 | 	sub	objptr, ##42752
0fcb4     E7 92 02 F6 | 	mov	arg01, fp
0fcb8     84 DC BF FD | 	call	#_converttofloat
0fcbc     3D 95 02 F6 | 	mov	arg02, result1
0fcc0     53 93 02 F6 | 	mov	arg01, local01
0fcc4     E4 73 B1 FD | 	call	#__system___float_mul
0fcc8     3D 95 02 F6 | 	mov	arg02, result1
0fccc     87 E4 1F FF 
0fcd0     DB 93 06 F6 | 	mov	arg01, ##1070141403
0fcd4     1F 94 E6 F4 | 	bitnot	arg02, #31
0fcd8     00 70 B1 FD | 	call	#__system___float_add
0fcdc     3D 93 02 F6 | 	mov	arg01, result1
0fce0     38 7D B1 FD | 	call	#__system____builtin_sinf
0fce4     E7 7A 62 FC | 	wrlong	result1, fp
0fce8     08 CE 05 F1 | 	add	fp, #8
0fcec     E7 3C 68 FC | 	wrlong	#30, fp
0fcf0     08 CE 85 F1 | 	sub	fp, #8
0fcf4     E7 92 02 F6 | 	mov	arg01, fp
0fcf8     3C DA BF FD | 	call	#_push
0fcfc                 | LR__1331
0fcfc     E7 F0 03 F6 | 	mov	ptra, fp
0fd00     F2 00 A0 FD | 	call	#popregs_
0fd04                 | _do_cos_ret
0fd04     2D 00 64 FD | 	ret
0fd08                 | 
0fd08                 | ' 
0fd08                 | ' '-------------------- cursor
0fd08                 | ' 
0fd08                 | ' sub do_cursor
0fd08                 | _do_cursor
0fd08     9C D9 BF FD | 	call	#_pop
0fd0c     00 7A 4E F2 | 	cmps	result1, #0 wz
0fd10                 | ' t1=pop()
0fd10                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0fd10     14 00 90 5D |  if_ne	jmp	#LR__1340
0fd14     11 92 06 F6 | 	mov	arg01, #17
0fd18     00 94 06 F6 | 	mov	arg02, #0
0fd1c     00 96 06 F6 | 	mov	arg03, #0
0fd20     50 23 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fd24     10 00 90 FD | 	jmp	#LR__1341
0fd28                 | LR__1340
0fd28     11 92 06 F6 | 	mov	arg01, #17
0fd2c     08 94 06 F6 | 	mov	arg02, #8
0fd30     10 96 06 F6 | 	mov	arg03, #16
0fd34     3C 23 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fd38                 | LR__1341
0fd38                 | _do_cursor_ret
0fd38     2D 00 64 FD | 	ret
0fd3c                 | 
0fd3c                 | ' 
0fd3c                 | ' '-------------------- defchar
0fd3c                 | ' 
0fd3c                 | ' sub do_defchar
0fd3c                 | _do_defchar
0fd3c     04 CA 05 F6 | 	mov	COUNT_, #4
0fd40     E8 00 A0 FD | 	call	#pushregs_
0fd44     28 F0 07 F1 | 	add	ptra, #40
0fd48     5C D9 BF FD | 	call	#_pop
0fd4c     3F 95 02 F6 | 	mov	arg02, result3
0fd50     E7 7A 62 FC | 	wrlong	result1, fp
0fd54     04 CE 05 F1 | 	add	fp, #4
0fd58     E7 7C 62 FC | 	wrlong	result2, fp
0fd5c     04 CE 05 F1 | 	add	fp, #4
0fd60     E7 94 62 FC | 	wrlong	arg02, fp
0fd64     08 CE 85 F1 | 	sub	fp, #8
0fd68     E7 92 02 F6 | 	mov	arg01, fp
0fd6c     14 DB BF FD | 	call	#_converttoint
0fd70     3D A7 02 F6 | 	mov	local01, result1
0fd74     30 D9 BF FD | 	call	#_pop
0fd78     3F 95 02 F6 | 	mov	arg02, result3
0fd7c     E7 7A 62 FC | 	wrlong	result1, fp
0fd80     04 CE 05 F1 | 	add	fp, #4
0fd84     E7 7C 62 FC | 	wrlong	result2, fp
0fd88     04 CE 05 F1 | 	add	fp, #4
0fd8c     E7 94 62 FC | 	wrlong	arg02, fp
0fd90     08 CE 85 F1 | 	sub	fp, #8
0fd94     E7 92 02 F6 | 	mov	arg01, fp
0fd98     E8 DA BF FD | 	call	#_converttoint
0fd9c     3D A9 02 F6 | 	mov	local02, result1
0fda0                 | ' 
0fda0                 | ' t1=pop() : cptr=converttoint(t1)
0fda0                 | ' t1=pop() : c=converttoint(t1)
0fda0                 | ' if cptr<$80000 then 
0fda0     00 04 00 FF 
0fda4     00 A6 16 F2 | 	cmp	local01, ##524288 wc
0fda8     10 00 90 3D |  if_ae	jmp	#LR__1350
0fdac     54 93 02 F6 | 	mov	arg01, local02
0fdb0     53 95 02 F6 | 	mov	arg02, local01
0fdb4     C4 2E B1 FD | 	call	#_hg010b_spin2_defchar
0fdb8     40 00 90 FD | 	jmp	#LR__1352
0fdbc                 | LR__1350
0fdbc                 | '   for i=0 to 15: buf(i)=pspeek(cptr+i): next i
0fdbc     00 AA 06 F6 | 	mov	local03, #0
0fdc0                 | LR__1351
0fdc0     55 AD 02 F6 | 	mov	local04, local03
0fdc4     E7 94 02 F6 | 	mov	arg02, fp
0fdc8     14 94 06 F1 | 	add	arg02, #20
0fdcc     4A AD 02 F1 | 	add	local04, arg02
0fdd0     53 93 02 F6 | 	mov	arg01, local01
0fdd4     55 93 02 F1 | 	add	arg01, local03
0fdd8     F8 14 B1 FD | 	call	#_pspeek
0fddc     56 7B 42 FC | 	wrbyte	result1, local04
0fde0     01 AA 06 F1 | 	add	local03, #1
0fde4     10 AA 56 F2 | 	cmps	local03, #16 wc
0fde8     D4 FF 9F CD |  if_b	jmp	#LR__1351
0fdec     E7 94 02 F6 | 	mov	arg02, fp
0fdf0     14 94 06 F1 | 	add	arg02, #20
0fdf4     54 93 02 F6 | 	mov	arg01, local02
0fdf8     80 2E B1 FD | 	call	#_hg010b_spin2_defchar
0fdfc                 | LR__1352
0fdfc     E7 F0 03 F6 | 	mov	ptra, fp
0fe00     F2 00 A0 FD | 	call	#popregs_
0fe04                 | _do_defchar_ret
0fe04     2D 00 64 FD | 	ret
0fe08                 | 
0fe08                 | ' 
0fe08                 | ' '-------------------- defenv
0fe08                 | ' 
0fe08                 | ' sub do_defenv
0fe08                 | _do_defenv
0fe08     14 CA 05 F6 | 	mov	COUNT_, #20
0fe0c     E8 00 A0 FD | 	call	#pushregs_
0fe10     58 F0 07 F1 | 	add	ptra, #88
0fe14     4B 00 00 FF 
0fe18     A0 64 06 F1 | 	add	objptr, ##38560
0fe1c     32 9B 02 FB | 	rdlong	arg05, objptr
0fe20     4D 99 02 F6 | 	mov	arg04, arg05
0fe24     01 98 66 F0 | 	shl	arg04, #1
0fe28     4D 99 02 F1 | 	add	arg04, arg05
0fe2c     02 98 66 F0 | 	shl	arg04, #2
0fe30     03 00 00 FF 
0fe34     04 64 86 F1 | 	sub	objptr, ##1540
0fe38     32 99 02 F1 | 	add	arg04, objptr
0fe3c     4C A7 02 FB | 	rdlong	local01, arg04
0fe40                 | ' 
0fe40                 | ' numpar=compiledline(lineptr_e).result.uresult
0fe40                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0fe40     02 A6 0E F2 | 	cmp	local01, #2 wz
0fe44     48 00 00 FF 
0fe48     9C 64 86 F1 | 	sub	objptr, ##37020
0fe4c     05 A6 0E 52 |  if_ne	cmp	local01, #5 wz
0fe50     50 07 90 5D |  if_ne	jmp	#LR__1380
0fe54                 | ' 
0fe54                 | ' if numpar=2 then						' env from .h2 or from a pointer
0fe54     02 A6 0E F2 | 	cmp	local01, #2 wz
0fe58     1C 03 90 5D |  if_ne	jmp	#LR__1372
0fe5c     48 D8 BF FD | 	call	#_pop
0fe60     3F 9B 02 F6 | 	mov	arg05, result3
0fe64     40 CE 05 F1 | 	add	fp, #64
0fe68     E7 7A 62 FC | 	wrlong	result1, fp
0fe6c     04 CE 05 F1 | 	add	fp, #4
0fe70     E7 7C 62 FC | 	wrlong	result2, fp
0fe74     04 CE 05 F1 | 	add	fp, #4
0fe78     E7 9A 62 FC | 	wrlong	arg05, fp
0fe7c                 | '   t1=pop()
0fe7c                 | '   if t1.result_type=result_string2 then 
0fe7c     48 CE 85 F1 | 	sub	fp, #72
0fe80     2B 9A 0E F2 | 	cmp	arg05, #43 wz
0fe84     18 00 90 5D |  if_ne	jmp	#LR__1360
0fe88     40 CE 05 F1 | 	add	fp, #64
0fe8c     E7 92 02 FB | 	rdlong	arg01, fp
0fe90     40 CE 85 F1 | 	sub	fp, #64
0fe94     80 D9 BF FD | 	call	#_convertstring
0fe98     3D A9 02 F6 | 	mov	local02, result1
0fe9c     38 00 90 FD | 	jmp	#LR__1362
0fea0                 | LR__1360
0fea0     48 CE 05 F1 | 	add	fp, #72
0fea4     E7 9A 02 FB | 	rdlong	arg05, fp
0fea8     48 CE 85 F1 | 	sub	fp, #72
0feac     1F 9A 0E F2 | 	cmp	arg05, #31 wz
0feb0     40 CE 05 A1 |  if_e	add	fp, #64
0feb4     E7 A8 02 AB |  if_e	rdlong	local02, fp
0feb8     40 CE 85 A1 |  if_e	sub	fp, #64
0febc     18 00 90 AD |  if_e	jmp	#LR__1361
0fec0     96 01 00 FF 
0fec4     F9 A9 06 F6 | 	mov	local02, ##@LR__5983
0fec8     E7 92 02 F6 | 	mov	arg01, fp
0fecc     40 92 06 F1 | 	add	arg01, #64
0fed0     B0 D9 BF FD | 	call	#_converttoint
0fed4     3D AB 02 F6 | 	mov	local03, result1
0fed8                 | LR__1361
0fed8                 | LR__1362
0fed8                 | '   if s1<>"" then 
0fed8     96 01 00 FF 
0fedc     FA 95 06 F6 | 	mov	arg02, ##@LR__5984
0fee0     54 93 02 F6 | 	mov	arg01, local02
0fee4     1C 4B B1 FD | 	call	#__system___string_cmp
0fee8     00 7A 0E F2 | 	cmp	result1, #0 wz
0feec     BC 01 90 AD |  if_e	jmp	#LR__1366
0fef0     B4 D7 BF FD | 	call	#_pop
0fef4     3F 9B 02 F6 | 	mov	arg05, result3
0fef8     40 CE 05 F1 | 	add	fp, #64
0fefc     E7 7A 62 FC | 	wrlong	result1, fp
0ff00     04 CE 05 F1 | 	add	fp, #4
0ff04     E7 7C 62 FC | 	wrlong	result2, fp
0ff08     04 CE 05 F1 | 	add	fp, #4
0ff0c     E7 9A 62 FC | 	wrlong	arg05, fp
0ff10     08 CE 85 F1 | 	sub	fp, #8
0ff14     E7 92 02 F6 | 	mov	arg01, fp
0ff18     40 CE 85 F1 | 	sub	fp, #64
0ff1c     64 D9 BF FD | 	call	#_converttoint
0ff20     3D AD 02 F6 | 	mov	local04, result1
0ff24                 | '     t1=pop()
0ff24                 | '     channel=converttoint(t1) 
0ff24                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0ff24     09 92 06 F6 | 	mov	arg01, #9
0ff28     8C 96 B1 FD | 	call	#__system__close
0ff2c     09 AE 06 F6 | 	mov	local05, #9
0ff30     96 01 00 FF 
0ff34     FB 93 06 F6 | 	mov	arg01, ##@LR__5985
0ff38     54 95 02 F6 | 	mov	arg02, local02
0ff3c     F8 4A B1 FD | 	call	#__system___string_concat
0ff40     3D 95 02 F6 | 	mov	arg02, result1
0ff44     57 93 02 F6 | 	mov	arg01, local05
0ff48     00 96 06 F6 | 	mov	arg03, #0
0ff4c     3C 56 B1 FD | 	call	#__system___basic_open_string
0ff50     20 68 06 F1 | 	add	ptr___system__dat__, #32
0ff54     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
0ff58     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
0ff5c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
0ff60     3D B1 0A F6 | 	mov	local06, result1 wz
0ff64                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0ff64     8C 00 90 AD |  if_e	jmp	#LR__1363
0ff68     00 92 06 F6 | 	mov	arg01, #0
0ff6c     F0 9F B1 FD | 	call	#__system___getiolock_0622
0ff70     3D 93 02 F6 | 	mov	arg01, result1
0ff74     64 4A B1 FD | 	call	#__system___lockmem
0ff78     97 01 00 FF 
0ff7c     08 94 06 F6 | 	mov	arg02, ##@LR__5986
0ff80     00 92 06 F6 | 	mov	arg01, #0
0ff84     00 96 06 F6 | 	mov	arg03, #0
0ff88     44 57 B1 FD | 	call	#__system___basic_print_string
0ff8c     00 92 06 F6 | 	mov	arg01, #0
0ff90     58 95 02 F6 | 	mov	arg02, local06
0ff94     00 96 06 F6 | 	mov	arg03, #0
0ff98     0A 98 06 F6 | 	mov	arg04, #10
0ff9c     74 57 B1 FD | 	call	#__system___basic_print_integer
0ffa0     97 01 00 FF 
0ffa4     16 94 06 F6 | 	mov	arg02, ##@LR__5987
0ffa8     00 92 06 F6 | 	mov	arg01, #0
0ffac     00 96 06 F6 | 	mov	arg03, #0
0ffb0     1C 57 B1 FD | 	call	#__system___basic_print_string
0ffb4     58 93 02 F6 | 	mov	arg01, local06
0ffb8     D0 6B B1 FD | 	call	#__system___strerror
0ffbc     3D 95 02 F6 | 	mov	arg02, result1
0ffc0     00 92 06 F6 | 	mov	arg01, #0
0ffc4     00 96 06 F6 | 	mov	arg03, #0
0ffc8     04 57 B1 FD | 	call	#__system___basic_print_string
0ffcc     00 92 06 F6 | 	mov	arg01, #0
0ffd0     0A 94 06 F6 | 	mov	arg02, #10
0ffd4     00 96 06 F6 | 	mov	arg03, #0
0ffd8     9C 56 B1 FD | 	call	#__system___basic_print_char
0ffdc     00 92 06 F6 | 	mov	arg01, #0
0ffe0     7C 9F B1 FD | 	call	#__system___getiolock_0622
0ffe4     3D 01 68 FC | 	wrlong	#0, result1
0ffe8     09 92 06 F6 | 	mov	arg01, #9
0ffec     C8 95 B1 FD | 	call	#__system__close
0fff0     B0 05 90 FD | 	jmp	#LR__1380
0fff4                 | LR__1363
0fff4                 | '     get #9,17,envbuf8(channel,0),256
0fff4     56 97 02 F6 | 	mov	arg03, local04
0fff8     09 96 66 F0 | 	shl	arg03, #9
0fffc     56 97 02 F1 | 	add	arg03, local04
10000     32 9B 02 F6 | 	mov	arg05, objptr
10004     0D 00 00 FF 
10008     D8 9A 06 F1 | 	add	arg05, ##6872
1000c     4D 97 02 F1 | 	add	arg03, arg05
10010     09 92 06 F6 | 	mov	arg01, #9
10014     11 94 06 F6 | 	mov	arg02, #17
10018     00 99 06 F6 | 	mov	arg04, #256
1001c     01 9A 06 F6 | 	mov	arg05, #1
10020     34 58 B1 FD | 	call	#__system___basic_get
10024                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
10024     FF B2 06 F6 | 	mov	local07, #255
10028     0D 00 00 FF 
1002c     D8 64 06 F1 | 	add	objptr, ##6872
10030     D7 24 48 FB | 	callpa	#(@LR__1365-@LR__1364)>>2,fcache_load_ptr_
10034                 | LR__1364
10034     56 B1 02 F6 | 	mov	local06, local04
10038     09 B0 66 F0 | 	shl	local06, #9
1003c     32 B1 02 F1 | 	add	local06, objptr
10040     59 AF 02 F6 | 	mov	local05, local07
10044     01 AE 66 F0 | 	shl	local05, #1
10048     58 AF 02 F1 | 	add	local05, local06
1004c     56 AB 02 F6 | 	mov	local03, local04
10050     09 AA 66 F0 | 	shl	local03, #9
10054     56 AB 02 F1 | 	add	local03, local04
10058     32 AB 02 F1 | 	add	local03, objptr
1005c     59 B1 02 F6 | 	mov	local06, local07
10060     55 B1 02 F1 | 	add	local06, local03
10064     58 B1 C2 FA | 	rdbyte	local06, local06
10068     08 B0 66 F0 | 	shl	local06, #8
1006c     57 B1 52 FC | 	wrword	local06, local05
10070     01 B2 86 F1 | 	sub	local07, #1
10074     00 B2 56 F2 | 	cmps	local07, #0 wc
10078     B8 FF 9F 3D |  if_ae	jmp	#LR__1364
1007c                 | LR__1365
1007c     0D 00 00 FF 
10080     D8 64 86 F1 | 	sub	objptr, ##6872
10084                 | '     close #9
10084     09 92 06 F6 | 	mov	arg01, #9
10088     2C 95 B1 FD | 	call	#__system__close
1008c     09 AC 66 F0 | 	shl	local04, #9
10090     32 B3 02 F6 | 	mov	local07, objptr
10094     0D 00 00 FF 
10098     D8 B2 06 F1 | 	add	local07, ##6872
1009c     59 AD 02 F1 | 	add	local04, local07
100a0     FE AD 06 F1 | 	add	local04, #510
100a4     56 01 58 FC | 	wrword	#0, local04
100a8                 | '     envbuf(channel,255)=0                                                              
100a8                 | '     return
100a8     F8 04 90 FD | 	jmp	#LR__1380
100ac                 | LR__1366
100ac                 | '     if wptr < $80000 then 
100ac     00 04 00 FF 
100b0     00 AA 56 F2 | 	cmps	local03, ##524288 wc
100b4     54 00 90 3D |  if_ae	jmp	#LR__1369
100b8                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
100b8     00 B2 06 F6 | 	mov	local07, #0
100bc     D7 24 48 FB | 	callpa	#(@LR__1368-@LR__1367)>>2,fcache_load_ptr_
100c0                 | LR__1367
100c0     56 B1 02 F6 | 	mov	local06, local04
100c4     09 B0 66 F0 | 	shl	local06, #9
100c8     32 AF 02 F6 | 	mov	local05, objptr
100cc     0D 00 00 FF 
100d0     D8 AE 06 F1 | 	add	local05, ##6872
100d4     57 B1 02 F1 | 	add	local06, local05
100d8     59 AF 02 F6 | 	mov	local05, local07
100dc     01 AE 66 F0 | 	shl	local05, #1
100e0     58 AF 02 F1 | 	add	local05, local06
100e4     55 93 02 F6 | 	mov	arg01, local03
100e8     59 B1 02 F6 | 	mov	local06, local07
100ec     01 B0 66 F0 | 	shl	local06, #1
100f0     58 93 02 F1 | 	add	arg01, local06
100f4     49 7B E2 FA | 	rdword	result1, arg01
100f8     57 7B 52 FC | 	wrword	result1, local05
100fc     01 B2 06 F1 | 	add	local07, #1
10100     00 B3 56 F2 | 	cmps	local07, #256 wc
10104     B8 FF 9F CD |  if_b	jmp	#LR__1367
10108                 | LR__1368
10108     4C 00 90 FD | 	jmp	#LR__1371
1010c                 | LR__1369
1010c                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
1010c     00 B2 06 F6 | 	mov	local07, #0
10110                 | LR__1370
10110     56 B1 02 F6 | 	mov	local06, local04
10114     09 B0 66 F0 | 	shl	local06, #9
10118     32 AF 02 F6 | 	mov	local05, objptr
1011c     0D 00 00 FF 
10120     D8 AE 06 F1 | 	add	local05, ##6872
10124     57 B1 02 F1 | 	add	local06, local05
10128     59 AF 02 F6 | 	mov	local05, local07
1012c     01 AE 66 F0 | 	shl	local05, #1
10130     58 AF 02 F1 | 	add	local05, local06
10134     55 93 02 F6 | 	mov	arg01, local03
10138     59 B1 02 F6 | 	mov	local06, local07
1013c     01 B0 66 F0 | 	shl	local06, #1
10140     58 93 02 F1 | 	add	arg01, local06
10144     1C 12 B1 FD | 	call	#_psdpeek
10148     57 7B 52 FC | 	wrword	result1, local05
1014c     01 B2 06 F1 | 	add	local07, #1
10150     00 B3 56 F2 | 	cmps	local07, #256 wc
10154     B8 FF 9F CD |  if_b	jmp	#LR__1370
10158                 | LR__1371
10158     09 AC 66 F0 | 	shl	local04, #9
1015c     32 B3 02 F6 | 	mov	local07, objptr
10160     0D 00 00 FF 
10164     D8 B2 06 F1 | 	add	local07, ##6872
10168     59 AD 02 F1 | 	add	local04, local07
1016c     FE AD 06 F1 | 	add	local04, #510
10170     56 01 58 FC | 	wrword	#0, local04
10174                 | '     envbuf(channel,255)=0
10174                 | '     return   
10174     2C 04 90 FD | 	jmp	#LR__1380
10178                 | LR__1372
10178                 | ' 
10178                 | ' if numpar=5 then   						 'simple adsr
10178     05 A6 0E F2 | 	cmp	local01, #5 wz
1017c     08 04 90 5D |  if_ne	jmp	#LR__1379
10180     24 D5 BF FD | 	call	#_pop
10184     3F B3 02 F6 | 	mov	local07, result3
10188     40 CE 05 F1 | 	add	fp, #64
1018c     E7 7A 62 FC | 	wrlong	result1, fp
10190     04 CE 05 F1 | 	add	fp, #4
10194     E7 7C 62 FC | 	wrlong	result2, fp
10198     04 CE 05 F1 | 	add	fp, #4
1019c     E7 B2 62 FC | 	wrlong	local07, fp
101a0     08 CE 85 F1 | 	sub	fp, #8
101a4     E7 92 02 F6 | 	mov	arg01, fp
101a8     40 CE 85 F1 | 	sub	fp, #64
101ac     90 D7 BF FD | 	call	#_converttofloat
101b0     3D B3 02 F6 | 	mov	local07, result1
101b4     F0 D4 BF FD | 	call	#_pop
101b8     3F B1 02 F6 | 	mov	local06, result3
101bc     40 CE 05 F1 | 	add	fp, #64
101c0     E7 7A 62 FC | 	wrlong	result1, fp
101c4     04 CE 05 F1 | 	add	fp, #4
101c8     E7 7C 62 FC | 	wrlong	result2, fp
101cc     04 CE 05 F1 | 	add	fp, #4
101d0     E7 B0 62 FC | 	wrlong	local06, fp
101d4     08 CE 85 F1 | 	sub	fp, #8
101d8     E7 92 02 F6 | 	mov	arg01, fp
101dc     40 CE 85 F1 | 	sub	fp, #64
101e0     5C D7 BF FD | 	call	#_converttofloat
101e4     3D B5 02 F6 | 	mov	local08, result1
101e8     BC D4 BF FD | 	call	#_pop
101ec     3F B1 02 F6 | 	mov	local06, result3
101f0     40 CE 05 F1 | 	add	fp, #64
101f4     E7 7A 62 FC | 	wrlong	result1, fp
101f8     04 CE 05 F1 | 	add	fp, #4
101fc     E7 7C 62 FC | 	wrlong	result2, fp
10200     04 CE 05 F1 | 	add	fp, #4
10204     E7 B0 62 FC | 	wrlong	local06, fp
10208     08 CE 85 F1 | 	sub	fp, #8
1020c     E7 92 02 F6 | 	mov	arg01, fp
10210     40 CE 85 F1 | 	sub	fp, #64
10214     28 D7 BF FD | 	call	#_converttofloat
10218     3D B1 02 F6 | 	mov	local06, result1
1021c     88 D4 BF FD | 	call	#_pop
10220     3F AF 02 F6 | 	mov	local05, result3
10224     40 CE 05 F1 | 	add	fp, #64
10228     E7 7A 62 FC | 	wrlong	result1, fp
1022c     04 CE 05 F1 | 	add	fp, #4
10230     E7 7C 62 FC | 	wrlong	result2, fp
10234     04 CE 05 F1 | 	add	fp, #4
10238     E7 AE 62 FC | 	wrlong	local05, fp
1023c     08 CE 85 F1 | 	sub	fp, #8
10240     E7 92 02 F6 | 	mov	arg01, fp
10244     40 CE 85 F1 | 	sub	fp, #64
10248     F4 D6 BF FD | 	call	#_converttofloat
1024c     3D AF 02 F6 | 	mov	local05, result1
10250     54 D4 BF FD | 	call	#_pop
10254     3F AD 02 F6 | 	mov	local04, result3
10258     40 CE 05 F1 | 	add	fp, #64
1025c     E7 7A 62 FC | 	wrlong	result1, fp
10260     04 CE 05 F1 | 	add	fp, #4
10264     E7 7C 62 FC | 	wrlong	result2, fp
10268     04 CE 05 F1 | 	add	fp, #4
1026c     E7 AC 62 FC | 	wrlong	local04, fp
10270     08 CE 85 F1 | 	sub	fp, #8
10274     E7 92 02 F6 | 	mov	arg01, fp
10278     40 CE 85 F1 | 	sub	fp, #64
1027c     04 D6 BF FD | 	call	#_converttoint
10280     3D AD 02 F6 | 	mov	local04, result1
10284                 | '   t1=pop() : rr=converttofloat(t1)
10284                 | '   t1=pop() : ss=converttofloat(t1) 
10284                 | '   t1=pop() : dd=converttofloat(t1)
10284                 | '   t1=pop() : aa=converttofloat(t1)
10284                 | '   t1=pop() : channel=converttoint(t1)
10284                 | '   if ss<0.0 then ss=0.0 
10284     5A 93 02 F6 | 	mov	arg01, local08
10288     00 94 06 F6 | 	mov	arg02, #0
1028c     01 96 06 F6 | 	mov	arg03, #1
10290     4C 72 B1 FD | 	call	#__system___float_cmp
10294     00 7A 56 F2 | 	cmps	result1, #0 wc
10298     00 B4 06 C6 |  if_b	mov	local08, #0
1029c                 | '   if ss>1.0 then ss=1.0
1029c     5A 93 02 F6 | 	mov	arg01, local08
102a0     00 C0 1F FF 
102a4     00 94 06 F6 | 	mov	arg02, ##1065353216
102a8     01 96 66 F6 | 	neg	arg03, #1
102ac     30 72 B1 FD | 	call	#__system___float_cmp
102b0     01 7A 56 F2 | 	cmps	result1, #1 wc
102b4     00 C0 1F 3F 
102b8     00 B4 06 36 |  if_ae	mov	local08, ##1065353216
102bc     57 93 02 F6 | 	mov	arg01, local05
102c0     58 95 02 F6 | 	mov	arg02, local06
102c4     14 6A B1 FD | 	call	#__system___float_add
102c8     3D 93 02 F6 | 	mov	arg01, result1
102cc     59 95 02 F6 | 	mov	arg02, local07
102d0     08 6A B1 FD | 	call	#__system___float_add
102d4     3D 95 02 F6 | 	mov	arg02, result1
102d8     00 C0 21 FF 
102dc     00 92 06 F6 | 	mov	arg01, ##1132462080
102e0     CC 6F B1 FD | 	call	#__system___float_div
102e4     3D B7 02 F6 | 	mov	local09, result1
102e8     57 93 02 F6 | 	mov	arg01, local05
102ec     5B 95 02 F6 | 	mov	arg02, local09
102f0     B8 6D B1 FD | 	call	#__system___float_mul
102f4     3D 93 02 F6 | 	mov	arg01, result1
102f8     01 94 06 F6 | 	mov	arg02, #1
102fc     74 72 B1 FD | 	call	#__system___float_tointeger
10300     3D B9 02 F6 | 	mov	local10, result1
10304     58 93 02 F6 | 	mov	arg01, local06
10308     5B 95 02 F6 | 	mov	arg02, local09
1030c     9C 6D B1 FD | 	call	#__system___float_mul
10310     3D 93 02 F6 | 	mov	arg01, result1
10314     01 94 06 F6 | 	mov	arg02, #1
10318     58 72 B1 FD | 	call	#__system___float_tointeger
1031c     3D BB 02 F6 | 	mov	local11, result1
10320     59 93 02 F6 | 	mov	arg01, local07
10324     5B 95 02 F6 | 	mov	arg02, local09
10328     80 6D B1 FD | 	call	#__system___float_mul
1032c     3D 93 02 F6 | 	mov	arg01, result1
10330     01 94 06 F6 | 	mov	arg02, #1
10334     3C 72 B1 FD | 	call	#__system___float_tointeger
10338     3D B1 02 F6 | 	mov	local06, result1
1033c     F8 BF 23 FF 
10340     00 AE 06 F6 | 	mov	local05, ##1199566848
10344     5C 93 52 F6 | 	abs	arg01, local10 wc
10348     1F BC C6 C9 |  if_b	decod	local12, #31
1034c     00 BC 06 36 |  if_ae	mov	local12, #0
10350     54 69 B1 FD | 	call	#__system___float_fromuns
10354     5E 7B 62 F5 | 	xor	result1, local12
10358     3D 95 02 F6 | 	mov	arg02, result1
1035c     57 93 02 F6 | 	mov	arg01, local05
10360     4C 6F B1 FD | 	call	#__system___float_div
10364     3D BF 02 F6 | 	mov	local13, result1
10368     F8 BF 23 FF 
1036c     00 AE 06 F6 | 	mov	local05, ##1199566848
10370     F8 BF 23 FF 
10374     00 92 06 F6 | 	mov	arg01, ##1199566848
10378     5A 95 02 F6 | 	mov	arg02, local08
1037c     2C 6D B1 FD | 	call	#__system___float_mul
10380     3D 95 02 F6 | 	mov	arg02, result1
10384     57 93 02 F6 | 	mov	arg01, local05
10388     1F 94 E6 F4 | 	bitnot	arg02, #31
1038c     4C 69 B1 FD | 	call	#__system___float_add
10390     3D AF 02 F6 | 	mov	local05, result1
10394     5D 93 52 F6 | 	abs	arg01, local11 wc
10398     1F BC C6 C9 |  if_b	decod	local12, #31
1039c     00 BC 06 36 |  if_ae	mov	local12, #0
103a0     04 69 B1 FD | 	call	#__system___float_fromuns
103a4     5E 7B 62 F5 | 	xor	result1, local12
103a8     3D 95 02 F6 | 	mov	arg02, result1
103ac     57 93 02 F6 | 	mov	arg01, local05
103b0     FC 6E B1 FD | 	call	#__system___float_div
103b4     3D C1 02 F6 | 	mov	local14, result1
103b8     F8 BF 23 FF 
103bc     00 92 06 F6 | 	mov	arg01, ##1199566848
103c0     5A 95 02 F6 | 	mov	arg02, local08
103c4     E4 6C B1 FD | 	call	#__system___float_mul
103c8     3D AF 02 F6 | 	mov	local05, result1
103cc     58 93 52 F6 | 	abs	arg01, local06 wc
103d0     1F BC C6 C9 |  if_b	decod	local12, #31
103d4     00 BC 06 36 |  if_ae	mov	local12, #0
103d8     CC 68 B1 FD | 	call	#__system___float_fromuns
103dc     5E 7B 62 F5 | 	xor	result1, local12
103e0     3D 95 02 F6 | 	mov	arg02, result1
103e4     57 93 02 F6 | 	mov	arg01, local05
103e8     C4 6E B1 FD | 	call	#__system___float_div
103ec     3D C3 02 F6 | 	mov	local15, result1
103f0     56 B3 02 F6 | 	mov	local07, local04
103f4     01 B2 66 F0 | 	shl	local07, #1
103f8     32 C5 02 F6 | 	mov	local16, objptr
103fc     53 00 00 FF 
10400     0C C5 06 F1 | 	add	local16, ##42764
10404     62 B3 02 F1 | 	add	local07, local16
10408     5C C7 02 F6 | 	mov	local17, local10
1040c     5D C7 02 F1 | 	add	local17, local11
10410     59 C7 52 FC | 	wrword	local17, local07
10414     00 C8 06 F6 | 	mov	local18, #0
10418                 | '   fulltime=aa+dd+rr
10418                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
10418                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
10418                 | '   suspoints(channel)=a+d
10418                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
10418     00 B2 06 F6 | 	mov	local07, #0
1041c     5C CB 02 F6 | 	mov	local19, local10
10420                 | LR__1373
10420     65 B3 52 F2 | 	cmps	local07, local19 wc
10424     4C 00 90 3D |  if_ae	jmp	#LR__1374
10428     56 C7 02 F6 | 	mov	local17, local04
1042c     09 C6 66 F0 | 	shl	local17, #9
10430     32 C5 02 F6 | 	mov	local16, objptr
10434     0D 00 00 FF 
10438     D8 C4 06 F1 | 	add	local16, ##6872
1043c     62 C7 02 F1 | 	add	local17, local16
10440     59 C5 02 F6 | 	mov	local16, local07
10444     01 C4 66 F0 | 	shl	local16, #1
10448     63 C5 02 F1 | 	add	local16, local17
1044c     64 93 02 F6 | 	mov	arg01, local18
10450     01 94 06 F6 | 	mov	arg02, #1
10454     1C 71 B1 FD | 	call	#__system___float_tointeger
10458     62 7B 52 FC | 	wrword	result1, local16
1045c     5F 95 02 F6 | 	mov	arg02, local13
10460     64 93 02 F6 | 	mov	arg01, local18
10464     74 68 B1 FD | 	call	#__system___float_add
10468     3D C9 02 F6 | 	mov	local18, result1
1046c     01 B2 06 F1 | 	add	local07, #1
10470     AC FF 9F FD | 	jmp	#LR__1373
10474                 | LR__1374
10474                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
10474     5C B3 02 F6 | 	mov	local07, local10
10478     5C CD 02 F6 | 	mov	local20, local10
1047c     5D CD 02 F1 | 	add	local20, local11
10480                 | LR__1375
10480     66 B3 52 F2 | 	cmps	local07, local20 wc
10484     68 00 90 3D |  if_ae	jmp	#LR__1376
10488     56 CB 02 F6 | 	mov	local19, local04
1048c     09 CA 66 F0 | 	shl	local19, #9
10490     32 C5 02 F6 | 	mov	local16, objptr
10494     0D 00 00 FF 
10498     D8 C4 06 F1 | 	add	local16, ##6872
1049c     62 CB 02 F1 | 	add	local19, local16
104a0     59 C7 02 F6 | 	mov	local17, local07
104a4     01 C6 66 F0 | 	shl	local17, #1
104a8     65 C7 02 F1 | 	add	local17, local19
104ac     64 93 02 F6 | 	mov	arg01, local18
104b0     01 94 06 F6 | 	mov	arg02, #1
104b4     BC 70 B1 FD | 	call	#__system___float_tointeger
104b8     63 7B 52 FC | 	wrword	result1, local17
104bc     64 93 02 F6 | 	mov	arg01, local18
104c0     60 95 02 F6 | 	mov	arg02, local14
104c4     1F 94 E6 F4 | 	bitnot	arg02, #31
104c8     10 68 B1 FD | 	call	#__system___float_add
104cc     3D C9 02 F6 | 	mov	local18, result1
104d0     64 93 02 F6 | 	mov	arg01, local18
104d4     00 94 06 F6 | 	mov	arg02, #0
104d8     01 96 06 F6 | 	mov	arg03, #1
104dc     00 70 B1 FD | 	call	#__system___float_cmp
104e0     00 7A 56 F2 | 	cmps	result1, #0 wc
104e4     00 C8 06 C6 |  if_b	mov	local18, #0
104e8     01 B2 06 F1 | 	add	local07, #1
104ec     90 FF 9F FD | 	jmp	#LR__1375
104f0                 | LR__1376
104f0                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
104f0     5C B3 02 F6 | 	mov	local07, local10
104f4     5D B3 02 F1 | 	add	local07, local11
104f8                 | LR__1377
104f8     00 B3 56 F2 | 	cmps	local07, #256 wc
104fc     68 00 90 3D |  if_ae	jmp	#LR__1378
10500     56 CD 02 F6 | 	mov	local20, local04
10504     09 CC 66 F0 | 	shl	local20, #9
10508     32 C7 02 F6 | 	mov	local17, objptr
1050c     0D 00 00 FF 
10510     D8 C6 06 F1 | 	add	local17, ##6872
10514     63 CD 02 F1 | 	add	local20, local17
10518     59 CB 02 F6 | 	mov	local19, local07
1051c     01 CA 66 F0 | 	shl	local19, #1
10520     66 CB 02 F1 | 	add	local19, local20
10524     64 93 02 F6 | 	mov	arg01, local18
10528     01 94 06 F6 | 	mov	arg02, #1
1052c     44 70 B1 FD | 	call	#__system___float_tointeger
10530     65 7B 52 FC | 	wrword	result1, local19
10534     64 93 02 F6 | 	mov	arg01, local18
10538     61 95 02 F6 | 	mov	arg02, local15
1053c     1F 94 E6 F4 | 	bitnot	arg02, #31
10540     98 67 B1 FD | 	call	#__system___float_add
10544     3D C9 02 F6 | 	mov	local18, result1
10548     64 93 02 F6 | 	mov	arg01, local18
1054c     00 94 06 F6 | 	mov	arg02, #0
10550     01 96 06 F6 | 	mov	arg03, #1
10554     88 6F B1 FD | 	call	#__system___float_cmp
10558     00 7A 56 F2 | 	cmps	result1, #0 wc
1055c     00 C8 06 C6 |  if_b	mov	local18, #0
10560     01 B2 06 F1 | 	add	local07, #1
10564     90 FF 9F FD | 	jmp	#LR__1377
10568                 | LR__1378
10568     56 CD 02 F6 | 	mov	local20, local04
1056c     09 CC 66 F0 | 	shl	local20, #9
10570     32 C5 02 F6 | 	mov	local16, objptr
10574     0D 00 00 FF 
10578     D8 C4 06 F1 | 	add	local16, ##6872
1057c     62 CD 02 F1 | 	add	local20, local16
10580     FE CD 06 F1 | 	add	local20, #510
10584     66 01 58 FC | 	wrword	#0, local20
10588                 | LR__1379
10588     09 AC 66 F0 | 	shl	local04, #9
1058c     32 C5 02 F6 | 	mov	local16, objptr
10590     0D 00 00 FF 
10594     D8 C4 06 F1 | 	add	local16, ##6872
10598     62 AD 02 F1 | 	add	local04, local16
1059c     FE AD 06 F1 | 	add	local04, #510
105a0     56 01 58 FC | 	wrword	#0, local04
105a4                 | LR__1380
105a4     E7 F0 03 F6 | 	mov	ptra, fp
105a8     F2 00 A0 FD | 	call	#popregs_
105ac                 | _do_defenv_ret
105ac     2D 00 64 FD | 	ret
105b0                 | 
105b0                 | ' 
105b0                 | ' '-------------------- defsnd
105b0                 | ' 
105b0                 | ' sub do_defsnd
105b0                 | _do_defsnd
105b0     0D CA 05 F6 | 	mov	COUNT_, #13
105b4     E8 00 A0 FD | 	call	#pushregs_
105b8     80 F0 07 F1 | 	add	ptra, #128
105bc     4B 00 00 FF 
105c0     A0 64 06 F1 | 	add	objptr, ##38560
105c4     32 9B 02 FB | 	rdlong	arg05, objptr
105c8     4D 99 02 F6 | 	mov	arg04, arg05
105cc     01 98 66 F0 | 	shl	arg04, #1
105d0     4D 99 02 F1 | 	add	arg04, arg05
105d4     02 98 66 F0 | 	shl	arg04, #2
105d8     03 00 00 FF 
105dc     04 64 86 F1 | 	sub	objptr, ##1540
105e0     32 99 02 F1 | 	add	arg04, objptr
105e4     4C A7 02 FB | 	rdlong	local01, arg04
105e8                 | ' 
105e8                 | ' numpar=compiledline(lineptr_e).result.uresult
105e8                 | ' 
105e8                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
105e8                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
105e8                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
105e8                 | ' ' defsnd channel, oneint - loads the wave from the pointer
105e8                 | ' 
105e8                 | ' if numpar<2 then return
105e8     02 A6 56 F2 | 	cmps	local01, #2 wc
105ec     48 00 00 FF 
105f0     9C 64 86 F1 | 	sub	objptr, ##37020
105f4     88 06 90 CD |  if_b	jmp	#LR__1411
105f8                 | '  
105f8                 | ' if numpar=2 then
105f8     02 A6 0E F2 | 	cmp	local01, #2 wz
105fc     E4 02 90 5D |  if_ne	jmp	#LR__1399
10600     A4 D0 BF FD | 	call	#_pop
10604     3F 9B 02 F6 | 	mov	arg05, result3
10608     2C CE 05 F1 | 	add	fp, #44
1060c     E7 7A 62 FC | 	wrlong	result1, fp
10610     04 CE 05 F1 | 	add	fp, #4
10614     E7 7C 62 FC | 	wrlong	result2, fp
10618     04 CE 05 F1 | 	add	fp, #4
1061c     E7 9A 62 FC | 	wrlong	arg05, fp
10620                 | '   t1=pop()
10620                 | '   if t1.result_type=result_string2 then 
10620     34 CE 85 F1 | 	sub	fp, #52
10624     2B 9A 0E F2 | 	cmp	arg05, #43 wz
10628     18 00 90 5D |  if_ne	jmp	#LR__1390
1062c     2C CE 05 F1 | 	add	fp, #44
10630     E7 92 02 FB | 	rdlong	arg01, fp
10634     2C CE 85 F1 | 	sub	fp, #44
10638     DC D1 BF FD | 	call	#_convertstring
1063c     3D A9 02 F6 | 	mov	local02, result1
10640     38 00 90 FD | 	jmp	#LR__1392
10644                 | LR__1390
10644     34 CE 05 F1 | 	add	fp, #52
10648     E7 9A 02 FB | 	rdlong	arg05, fp
1064c     34 CE 85 F1 | 	sub	fp, #52
10650     1F 9A 0E F2 | 	cmp	arg05, #31 wz
10654     2C CE 05 A1 |  if_e	add	fp, #44
10658     E7 A8 02 AB |  if_e	rdlong	local02, fp
1065c     2C CE 85 A1 |  if_e	sub	fp, #44
10660     18 00 90 AD |  if_e	jmp	#LR__1391
10664     97 01 00 FF 
10668     19 A8 06 F6 | 	mov	local02, ##@LR__5988
1066c     E7 92 02 F6 | 	mov	arg01, fp
10670     2C 92 06 F1 | 	add	arg01, #44
10674     0C D2 BF FD | 	call	#_converttoint
10678     3D AB 02 F6 | 	mov	local03, result1
1067c                 | LR__1391
1067c                 | LR__1392
1067c                 | '   if s<>"" then 
1067c     97 01 00 FF 
10680     1A 94 06 F6 | 	mov	arg02, ##@LR__5989
10684     54 93 02 F6 | 	mov	arg01, local02
10688     78 43 B1 FD | 	call	#__system___string_cmp
1068c     00 7A 0E F2 | 	cmp	result1, #0 wz
10690     B0 01 90 AD |  if_e	jmp	#LR__1395
10694     10 D0 BF FD | 	call	#_pop
10698     3F 9B 02 F6 | 	mov	arg05, result3
1069c     2C CE 05 F1 | 	add	fp, #44
106a0     E7 7A 62 FC | 	wrlong	result1, fp
106a4     04 CE 05 F1 | 	add	fp, #4
106a8     E7 7C 62 FC | 	wrlong	result2, fp
106ac     04 CE 05 F1 | 	add	fp, #4
106b0     E7 9A 62 FC | 	wrlong	arg05, fp
106b4     08 CE 85 F1 | 	sub	fp, #8
106b8     E7 92 02 F6 | 	mov	arg01, fp
106bc     2C CE 85 F1 | 	sub	fp, #44
106c0     C0 D1 BF FD | 	call	#_converttoint
106c4     3D AD 02 F6 | 	mov	local04, result1
106c8                 | '     t1=pop()
106c8                 | '     channel=converttoint(t1) : if channel>31 then return
106c8     20 AC 56 F2 | 	cmps	local04, #32 wc
106cc     B0 05 90 3D |  if_ae	jmp	#LR__1411
106d0                 | '     close #9 : open "/sd/media/s/"+s for input as #9
106d0     09 92 06 F6 | 	mov	arg01, #9
106d4     E0 8E B1 FD | 	call	#__system__close
106d8     09 AA 06 F6 | 	mov	local03, #9
106dc     97 01 00 FF 
106e0     1B 92 06 F6 | 	mov	arg01, ##@LR__5990
106e4     54 95 02 F6 | 	mov	arg02, local02
106e8     4C 43 B1 FD | 	call	#__system___string_concat
106ec     3D 95 02 F6 | 	mov	arg02, result1
106f0     55 93 02 F6 | 	mov	arg01, local03
106f4     00 96 06 F6 | 	mov	arg03, #0
106f8     90 4E B1 FD | 	call	#__system___basic_open_string
106fc     20 68 06 F1 | 	add	ptr___system__dat__, #32
10700     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
10704     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
10708     20 68 86 F1 | 	sub	ptr___system__dat__, #32
1070c     53 00 00 FF 
10710     68 65 06 F1 | 	add	objptr, ##42856
10714     32 7B 62 FC | 	wrlong	result1, objptr
10718                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
10718     53 00 00 FF 
1071c     68 65 86 F1 | 	sub	objptr, ##42856
10720     B0 00 90 AD |  if_e	jmp	#LR__1393
10724     00 92 06 F6 | 	mov	arg01, #0
10728     34 98 B1 FD | 	call	#__system___getiolock_0622
1072c     3D 93 02 F6 | 	mov	arg01, result1
10730     A8 42 B1 FD | 	call	#__system___lockmem
10734     97 01 00 FF 
10738     28 94 06 F6 | 	mov	arg02, ##@LR__5991
1073c     00 92 06 F6 | 	mov	arg01, #0
10740     00 96 06 F6 | 	mov	arg03, #0
10744     88 4F B1 FD | 	call	#__system___basic_print_string
10748     53 00 00 FF 
1074c     68 65 06 F1 | 	add	objptr, ##42856
10750     32 95 02 FB | 	rdlong	arg02, objptr
10754     53 00 00 FF 
10758     68 65 86 F1 | 	sub	objptr, ##42856
1075c     00 92 06 F6 | 	mov	arg01, #0
10760     00 96 06 F6 | 	mov	arg03, #0
10764     0A 98 06 F6 | 	mov	arg04, #10
10768     A8 4F B1 FD | 	call	#__system___basic_print_integer
1076c     97 01 00 FF 
10770     36 94 06 F6 | 	mov	arg02, ##@LR__5992
10774     00 92 06 F6 | 	mov	arg01, #0
10778     00 96 06 F6 | 	mov	arg03, #0
1077c     50 4F B1 FD | 	call	#__system___basic_print_string
10780     00 AC 06 F6 | 	mov	local04, #0
10784     53 00 00 FF 
10788     68 65 06 F1 | 	add	objptr, ##42856
1078c     32 93 02 FB | 	rdlong	arg01, objptr
10790     53 00 00 FF 
10794     68 65 86 F1 | 	sub	objptr, ##42856
10798     F0 63 B1 FD | 	call	#__system___strerror
1079c     3D 95 02 F6 | 	mov	arg02, result1
107a0     56 93 02 F6 | 	mov	arg01, local04
107a4     00 96 06 F6 | 	mov	arg03, #0
107a8     24 4F B1 FD | 	call	#__system___basic_print_string
107ac     00 92 06 F6 | 	mov	arg01, #0
107b0     0A 94 06 F6 | 	mov	arg02, #10
107b4     00 96 06 F6 | 	mov	arg03, #0
107b8     BC 4E B1 FD | 	call	#__system___basic_print_char
107bc     00 92 06 F6 | 	mov	arg01, #0
107c0     9C 97 B1 FD | 	call	#__system___getiolock_0622
107c4     3D 01 68 FC | 	wrlong	#0, result1
107c8     09 92 06 F6 | 	mov	arg01, #9
107cc     E8 8D B1 FD | 	call	#__system__close
107d0     AC 04 90 FD | 	jmp	#LR__1411
107d4                 | LR__1393
107d4                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
107d4     00 AE 06 F6 | 	mov	local05, #0
107d8                 | LR__1394
107d8     57 AB 02 F6 | 	mov	local03, local05
107dc     01 AA 66 F0 | 	shl	local03, #1
107e0     11 94 06 F6 | 	mov	arg02, #17
107e4     55 95 02 F1 | 	add	arg02, local03
107e8     E7 96 02 F6 | 	mov	arg03, fp
107ec     7C 96 06 F1 | 	add	arg03, #124
107f0     09 92 06 F6 | 	mov	arg01, #9
107f4     01 98 06 F6 | 	mov	arg04, #1
107f8     02 9A 06 F6 | 	mov	arg05, #2
107fc     58 50 B1 FD | 	call	#__system___basic_get
10800     56 93 02 F6 | 	mov	arg01, local04
10804     0B 92 66 F0 | 	shl	arg01, #11
10808     57 AB 02 F6 | 	mov	local03, local05
1080c     01 AA 66 F0 | 	shl	local03, #1
10810     55 93 02 F1 | 	add	arg01, local03
10814     7C CE 05 F1 | 	add	fp, #124
10818     E7 94 E2 FA | 	rdword	arg02, fp
1081c     7C CE 85 F1 | 	sub	fp, #124
10820     0F 94 66 F7 | 	signx	arg02, #15
10824     1C 0A B1 FD | 	call	#_psdpoke
10828     01 AE 06 F1 | 	add	local05, #1
1082c     02 00 00 FF 
10830     01 AE 56 F2 | 	cmps	local05, ##1025 wc
10834     A0 FF 9F CD |  if_b	jmp	#LR__1394
10838                 | '     close #9
10838     09 92 06 F6 | 	mov	arg01, #9
1083c     78 8D B1 FD | 	call	#__system__close
10840                 | '     return
10840     3C 04 90 FD | 	jmp	#LR__1411
10844                 | LR__1395
10844                 | '     if wptr < ($80000 - 2048) then 
10844     FC 03 00 FF 
10848     00 AA 56 F2 | 	cmps	local03, ##522240 wc
1084c     48 00 90 3D |  if_ae	jmp	#LR__1397
10850                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
10850     00 AE 06 F6 | 	mov	local05, #0
10854                 | LR__1396
10854     56 A7 02 F6 | 	mov	local01, local04
10858     0B A6 66 F0 | 	shl	local01, #11
1085c     57 A9 02 F6 | 	mov	local02, local05
10860     01 A8 66 F0 | 	shl	local02, #1
10864     54 A7 02 F1 | 	add	local01, local02
10868     55 93 02 F6 | 	mov	arg01, local03
1086c     57 A9 02 F6 | 	mov	local02, local05
10870     01 A8 66 F0 | 	shl	local02, #1
10874     54 93 02 F1 | 	add	arg01, local02
10878     49 95 E2 FA | 	rdword	arg02, arg01
1087c     53 93 02 F6 | 	mov	arg01, local01
10880     C0 09 B1 FD | 	call	#_psdpoke
10884     01 AE 06 F1 | 	add	local05, #1
10888     02 00 00 FF 
1088c     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10890     C0 FF 9F CD |  if_b	jmp	#LR__1396
10894     E8 03 90 FD | 	jmp	#LR__1411
10898                 | LR__1397
10898                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
10898     00 AE 06 F6 | 	mov	local05, #0
1089c                 | LR__1398
1089c     56 A7 02 F6 | 	mov	local01, local04
108a0     0B A6 66 F0 | 	shl	local01, #11
108a4     57 A9 02 F6 | 	mov	local02, local05
108a8     01 A8 66 F0 | 	shl	local02, #1
108ac     54 A7 02 F1 | 	add	local01, local02
108b0     55 93 02 F6 | 	mov	arg01, local03
108b4     57 A9 02 F6 | 	mov	local02, local05
108b8     01 A8 66 F0 | 	shl	local02, #1
108bc     54 93 02 F1 | 	add	arg01, local02
108c0     A0 0A B1 FD | 	call	#_psdpeek
108c4     3D 95 02 F6 | 	mov	arg02, result1
108c8     53 93 02 F6 | 	mov	arg01, local01
108cc     74 09 B1 FD | 	call	#_psdpoke
108d0     01 AE 06 F1 | 	add	local05, #1
108d4     02 00 00 FF 
108d8     00 AE 56 F2 | 	cmps	local05, ##1024 wc
108dc     BC FF 9F CD |  if_b	jmp	#LR__1398
108e0                 | '     return 
108e0     9C 03 90 FD | 	jmp	#LR__1411
108e4                 | '   return
108e4                 | LR__1399
108e4                 | ' for i=0 to 15 : harm(i)=0: next i  
108e4     00 AE 06 F6 | 	mov	local05, #0
108e8     3C CE 05 F1 | 	add	fp, #60
108ec     D7 0E 48 FB | 	callpa	#(@LR__1401-@LR__1400)>>2,fcache_load_ptr_
108f0                 | LR__1400
108f0     57 B1 02 F6 | 	mov	local06, local05
108f4     02 B0 66 F0 | 	shl	local06, #2
108f8     E7 B0 02 F1 | 	add	local06, fp
108fc     58 01 68 FC | 	wrlong	#0, local06
10900     01 AE 06 F1 | 	add	local05, #1
10904     10 AE 56 F2 | 	cmps	local05, #16 wc
10908     E4 FF 9F CD |  if_b	jmp	#LR__1400
1090c                 | LR__1401
1090c     3C CE 85 F1 | 	sub	fp, #60
10910                 | ' for i=numpar to 2 step -1 
10910     53 AF 02 F6 | 	mov	local05, local01
10914                 | LR__1402
10914     90 CD BF FD | 	call	#_pop
10918     2C CE 05 F1 | 	add	fp, #44
1091c     E7 7A 62 FC | 	wrlong	result1, fp
10920     04 CE 05 F1 | 	add	fp, #4
10924     E7 7C 62 FC | 	wrlong	result2, fp
10928     04 CE 05 F1 | 	add	fp, #4
1092c     E7 7E 62 FC | 	wrlong	result3, fp
10930     57 B1 02 F6 | 	mov	local06, local05
10934     02 B0 86 F1 | 	sub	local06, #2
10938     02 B0 66 F0 | 	shl	local06, #2
1093c     08 CE 05 F1 | 	add	fp, #8
10940     E7 B0 02 F1 | 	add	local06, fp
10944     10 CE 85 F1 | 	sub	fp, #16
10948     E7 92 02 F6 | 	mov	arg01, fp
1094c     2C CE 85 F1 | 	sub	fp, #44
10950     EC CF BF FD | 	call	#_converttofloat
10954     58 7B 62 FC | 	wrlong	result1, local06
10958     01 AE 86 F1 | 	sub	local05, #1
1095c     02 AE 56 F2 | 	cmps	local05, #2 wc
10960     B0 FF 9F 3D |  if_ae	jmp	#LR__1402
10964     40 CD BF FD | 	call	#_pop
10968     3F AF 02 F6 | 	mov	local05, result3
1096c     2C CE 05 F1 | 	add	fp, #44
10970     E7 7A 62 FC | 	wrlong	result1, fp
10974     04 CE 05 F1 | 	add	fp, #4
10978     E7 7C 62 FC | 	wrlong	result2, fp
1097c     04 CE 05 F1 | 	add	fp, #4
10980     E7 AE 62 FC | 	wrlong	local05, fp
10984     08 CE 85 F1 | 	sub	fp, #8
10988     E7 92 02 F6 | 	mov	arg01, fp
1098c     2C CE 85 F1 | 	sub	fp, #44
10990     F0 CE BF FD | 	call	#_converttoint
10994     3D AD 02 F6 | 	mov	local04, result1
10998                 | ' t1=pop()
10998                 | ' channel=converttoint(t1) : : if channel>31 then return
10998     20 AC 56 F2 | 	cmps	local04, #32 wc
1099c     E0 02 90 3D |  if_ae	jmp	#LR__1411
109a0     00 B2 06 F6 | 	mov	local07, #0
109a4                 | ' max=0
109a4                 | ' if harm(0)<0 then
109a4     3C CE 05 F1 | 	add	fp, #60
109a8     E7 92 02 FB | 	rdlong	arg01, fp
109ac     3C CE 85 F1 | 	sub	fp, #60
109b0     00 94 06 F6 | 	mov	arg02, #0
109b4     01 96 06 F6 | 	mov	arg03, #1
109b8     24 6B B1 FD | 	call	#__system___float_cmp
109bc     00 7A 56 F2 | 	cmps	result1, #0 wc
109c0     C0 00 90 3D |  if_ae	jmp	#LR__1405
109c4     3C CE 05 F1 | 	add	fp, #60
109c8     E7 B4 02 FB | 	rdlong	local08, fp
109cc     1F B4 06 F4 | 	bitl	local08, #31
109d0     04 CE 05 F1 | 	add	fp, #4
109d4     E7 B6 02 FB | 	rdlong	local09, fp
109d8     1F B6 06 F4 | 	bitl	local09, #31
109dc     04 CE 85 F1 | 	sub	fp, #4
109e0     00 C0 9F FF 
109e4     E7 00 68 FC | 	wrlong	##1065353216, fp
109e8     04 CE 05 F1 | 	add	fp, #4
109ec     E7 B4 62 FC | 	wrlong	local08, fp
109f0     04 CE 05 F1 | 	add	fp, #4
109f4     E7 B6 62 FC | 	wrlong	local09, fp
109f8     44 CE 85 F1 | 	sub	fp, #68
109fc                 | '   harm(0)=1
109fc                 | '   harm(1)=even
109fc                 | '   harm(2)=odd
109fc                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
109fc     03 AE 06 F6 | 	mov	local05, #3
10a00                 | LR__1403
10a00     57 B1 02 F6 | 	mov	local06, local05
10a04     02 B0 66 F0 | 	shl	local06, #2
10a08     3C CE 05 F1 | 	add	fp, #60
10a0c     E7 B0 02 F1 | 	add	local06, fp
10a10     57 9B 02 F6 | 	mov	arg05, local05
10a14     02 9A 86 F1 | 	sub	arg05, #2
10a18     02 9A 66 F0 | 	shl	arg05, #2
10a1c     E7 9A 02 F1 | 	add	arg05, fp
10a20     4D 93 02 FB | 	rdlong	arg01, arg05
10a24     5A 95 02 F6 | 	mov	arg02, local08
10a28     3C CE 85 F1 | 	sub	fp, #60
10a2c     7C 66 B1 FD | 	call	#__system___float_mul
10a30     58 7B 62 FC | 	wrlong	result1, local06
10a34     02 AE 06 F1 | 	add	local05, #2
10a38     10 AE 56 F2 | 	cmps	local05, #16 wc
10a3c     C0 FF 9F CD |  if_b	jmp	#LR__1403
10a40                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
10a40     04 AE 06 F6 | 	mov	local05, #4
10a44                 | LR__1404
10a44     57 B1 02 F6 | 	mov	local06, local05
10a48     02 B0 66 F0 | 	shl	local06, #2
10a4c     3C CE 05 F1 | 	add	fp, #60
10a50     E7 B0 02 F1 | 	add	local06, fp
10a54     57 B5 02 F6 | 	mov	local08, local05
10a58     02 B4 86 F1 | 	sub	local08, #2
10a5c     02 B4 66 F0 | 	shl	local08, #2
10a60     E7 B4 02 F1 | 	add	local08, fp
10a64     5A 93 02 FB | 	rdlong	arg01, local08
10a68     5B 95 02 F6 | 	mov	arg02, local09
10a6c     3C CE 85 F1 | 	sub	fp, #60
10a70     38 66 B1 FD | 	call	#__system___float_mul
10a74     58 7B 62 FC | 	wrlong	result1, local06
10a78     02 AE 06 F1 | 	add	local05, #2
10a7c     0F AE 56 F2 | 	cmps	local05, #15 wc
10a80     C0 FF 9F CD |  if_b	jmp	#LR__1404
10a84                 | LR__1405
10a84                 | ' if harm(0)>=0 then ' synthesize with harmonics
10a84     3C CE 05 F1 | 	add	fp, #60
10a88     E7 92 02 FB | 	rdlong	arg01, fp
10a8c     3C CE 85 F1 | 	sub	fp, #60
10a90     00 94 06 F6 | 	mov	arg02, #0
10a94     01 96 66 F6 | 	neg	arg03, #1
10a98     44 6A B1 FD | 	call	#__system___float_cmp
10a9c     00 7A 56 F2 | 	cmps	result1, #0 wc
10aa0     DC 01 90 CD |  if_b	jmp	#LR__1410
10aa4                 | '   for i=0 to 1023
10aa4     00 AE 06 F6 | 	mov	local05, #0
10aa8                 | LR__1406
10aa8     00 B8 06 F6 | 	mov	local10, #0
10aac                 | '     spl=0
10aac                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
10aac     00 BA 06 F6 | 	mov	local11, #0
10ab0                 | LR__1407
10ab0     5D B1 02 F6 | 	mov	local06, local11
10ab4     02 B0 66 F0 | 	shl	local06, #2
10ab8     E7 9A 02 F6 | 	mov	arg05, fp
10abc     3C 9A 06 F1 | 	add	arg05, #60
10ac0     4D B1 02 F1 | 	add	local06, arg05
10ac4     58 B1 02 FB | 	rdlong	local06, local06
10ac8     87 E4 1D FF 
10acc     DB B7 06 F6 | 	mov	local09, ##1003032539
10ad0     57 93 52 F6 | 	abs	arg01, local05 wc
10ad4     1F BC C6 C9 |  if_b	decod	local12, #31
10ad8     00 BC 06 36 |  if_ae	mov	local12, #0
10adc     C8 61 B1 FD | 	call	#__system___float_fromuns
10ae0     5E 7B 62 F5 | 	xor	result1, local12
10ae4     3D 95 02 F6 | 	mov	arg02, result1
10ae8     5B 93 02 F6 | 	mov	arg01, local09
10aec     BC 65 B1 FD | 	call	#__system___float_mul
10af0     3D BF 02 F6 | 	mov	local13, result1
10af4     5D 93 02 F6 | 	mov	arg01, local11
10af8     01 92 06 F1 | 	add	arg01, #1
10afc     49 93 52 F6 | 	abs	arg01, arg01 wc
10b00     1F BC C6 C9 |  if_b	decod	local12, #31
10b04     00 BC 06 36 |  if_ae	mov	local12, #0
10b08     9C 61 B1 FD | 	call	#__system___float_fromuns
10b0c     5E 7B 62 F5 | 	xor	result1, local12
10b10     3D 95 02 F6 | 	mov	arg02, result1
10b14     5F 93 02 F6 | 	mov	arg01, local13
10b18     90 65 B1 FD | 	call	#__system___float_mul
10b1c     3D 93 02 F6 | 	mov	arg01, result1
10b20     F8 6E B1 FD | 	call	#__system____builtin_sinf
10b24     3D 95 02 F6 | 	mov	arg02, result1
10b28     58 93 02 F6 | 	mov	arg01, local06
10b2c     7C 65 B1 FD | 	call	#__system___float_mul
10b30     3D 95 02 F6 | 	mov	arg02, result1
10b34     5C 93 02 F6 | 	mov	arg01, local10
10b38     A0 61 B1 FD | 	call	#__system___float_add
10b3c     3D B9 02 F6 | 	mov	local10, result1
10b40     01 BA 06 F1 | 	add	local11, #1
10b44     10 BA 56 F2 | 	cmps	local11, #16 wc
10b48     64 FF 9F CD |  if_b	jmp	#LR__1407
10b4c                 | '     if abs(spl)>max then max=abs(spl)  
10b4c     5C 93 02 F6 | 	mov	arg01, local10
10b50     1F 92 06 F4 | 	bitl	arg01, #31
10b54     59 95 02 F6 | 	mov	arg02, local07
10b58     01 96 66 F6 | 	neg	arg03, #1
10b5c     80 69 B1 FD | 	call	#__system___float_cmp
10b60     01 7A 56 F2 | 	cmps	result1, #1 wc
10b64     1F B8 06 34 |  if_ae	bitl	local10, #31
10b68     5C B3 02 36 |  if_ae	mov	local07, local10
10b6c     01 AE 06 F1 | 	add	local05, #1
10b70     02 00 00 FF 
10b74     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10b78     2C FF 9F CD |  if_b	jmp	#LR__1406
10b7c                 | '   for i=0 to 1023
10b7c     00 AE 06 F6 | 	mov	local05, #0
10b80                 | LR__1408
10b80     00 B8 06 F6 | 	mov	local10, #0
10b84                 | '     spl=0
10b84                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
10b84     00 BA 06 F6 | 	mov	local11, #0
10b88                 | LR__1409
10b88     5D BF 02 F6 | 	mov	local13, local11
10b8c     02 BE 66 F0 | 	shl	local13, #2
10b90     E7 B6 02 F6 | 	mov	local09, fp
10b94     3C B6 06 F1 | 	add	local09, #60
10b98     5B BF 02 F1 | 	add	local13, local09
10b9c     5F B1 02 FB | 	rdlong	local06, local13
10ba0     58 7F 23 FF 
10ba4     00 92 06 F6 | 	mov	arg01, ##1191096320
10ba8     59 95 02 F6 | 	mov	arg02, local07
10bac     00 67 B1 FD | 	call	#__system___float_div
10bb0     3D 95 02 F6 | 	mov	arg02, result1
10bb4     58 93 02 F6 | 	mov	arg01, local06
10bb8     F0 64 B1 FD | 	call	#__system___float_mul
10bbc     3D B1 02 F6 | 	mov	local06, result1
10bc0     87 E4 1D FF 
10bc4     DB BF 06 F6 | 	mov	local13, ##1003032539
10bc8     57 93 52 F6 | 	abs	arg01, local05 wc
10bcc     1F BC C6 C9 |  if_b	decod	local12, #31
10bd0     00 BC 06 36 |  if_ae	mov	local12, #0
10bd4     D0 60 B1 FD | 	call	#__system___float_fromuns
10bd8     5E 7B 62 F5 | 	xor	result1, local12
10bdc     3D 95 02 F6 | 	mov	arg02, result1
10be0     5F 93 02 F6 | 	mov	arg01, local13
10be4     C4 64 B1 FD | 	call	#__system___float_mul
10be8     3D BF 02 F6 | 	mov	local13, result1
10bec     5D 93 02 F6 | 	mov	arg01, local11
10bf0     01 92 06 F1 | 	add	arg01, #1
10bf4     49 93 52 F6 | 	abs	arg01, arg01 wc
10bf8     1F BC C6 C9 |  if_b	decod	local12, #31
10bfc     00 BC 06 36 |  if_ae	mov	local12, #0
10c00     A4 60 B1 FD | 	call	#__system___float_fromuns
10c04     5E 7B 62 F5 | 	xor	result1, local12
10c08     3D 95 02 F6 | 	mov	arg02, result1
10c0c     5F 93 02 F6 | 	mov	arg01, local13
10c10     98 64 B1 FD | 	call	#__system___float_mul
10c14     3D 93 02 F6 | 	mov	arg01, result1
10c18     00 6E B1 FD | 	call	#__system____builtin_sinf
10c1c     3D 95 02 F6 | 	mov	arg02, result1
10c20     58 93 02 F6 | 	mov	arg01, local06
10c24     84 64 B1 FD | 	call	#__system___float_mul
10c28     3D 95 02 F6 | 	mov	arg02, result1
10c2c     5C 93 02 F6 | 	mov	arg01, local10
10c30     A8 60 B1 FD | 	call	#__system___float_add
10c34     3D B9 02 F6 | 	mov	local10, result1
10c38     01 BA 06 F1 | 	add	local11, #1
10c3c     10 BA 56 F2 | 	cmps	local11, #16 wc
10c40     44 FF 9F CD |  if_b	jmp	#LR__1409
10c44     56 BB 02 F6 | 	mov	local11, local04
10c48     0B BA 66 F0 | 	shl	local11, #11
10c4c     57 BF 02 F6 | 	mov	local13, local05
10c50     01 BE 66 F0 | 	shl	local13, #1
10c54     5F BB 02 F1 | 	add	local11, local13
10c58     5C 93 02 F6 | 	mov	arg01, local10
10c5c     01 94 06 F6 | 	mov	arg02, #1
10c60     10 69 B1 FD | 	call	#__system___float_tointeger
10c64     3D 95 02 F6 | 	mov	arg02, result1
10c68     5D 93 02 F6 | 	mov	arg01, local11
10c6c     D4 05 B1 FD | 	call	#_psdpoke
10c70     01 AE 06 F1 | 	add	local05, #1
10c74     02 00 00 FF 
10c78     00 AE 56 F2 | 	cmps	local05, ##1024 wc
10c7c     00 FF 9F CD |  if_b	jmp	#LR__1408
10c80                 | LR__1410
10c80                 | LR__1411
10c80     E7 F0 03 F6 | 	mov	ptra, fp
10c84     F2 00 A0 FD | 	call	#popregs_
10c88                 | _do_defsnd_ret
10c88     2D 00 64 FD | 	ret
10c8c                 | 
10c8c                 | ' 
10c8c                 | ' '-------------------- defsprite
10c8c                 | ' 
10c8c                 | ' sub do_defsprite
10c8c                 | _do_defsprite
10c8c     0B CA 05 F6 | 	mov	COUNT_, #11
10c90     E8 00 A0 FD | 	call	#pushregs_
10c94     60 F0 07 F1 | 	add	ptra, #96
10c98     0C CA BF FD | 	call	#_pop
10c9c     3D 97 02 F6 | 	mov	arg03, result1
10ca0     3E 95 02 F6 | 	mov	arg02, result2
10ca4     3F 93 02 F6 | 	mov	arg01, result3
10ca8     30 CE 05 F1 | 	add	fp, #48
10cac     E7 96 62 FC | 	wrlong	arg03, fp
10cb0     04 CE 05 F1 | 	add	fp, #4
10cb4     E7 94 62 FC | 	wrlong	arg02, fp
10cb8     04 CE 05 F1 | 	add	fp, #4
10cbc     E7 92 62 FC | 	wrlong	arg01, fp
10cc0     38 CE 85 F1 | 	sub	fp, #56
10cc4     E0 C9 BF FD | 	call	#_pop
10cc8     3D 97 02 F6 | 	mov	arg03, result1
10ccc     3E 95 02 F6 | 	mov	arg02, result2
10cd0     3F 93 02 F6 | 	mov	arg01, result3
10cd4     24 CE 05 F1 | 	add	fp, #36
10cd8     E7 96 62 FC | 	wrlong	arg03, fp
10cdc     04 CE 05 F1 | 	add	fp, #4
10ce0     E7 94 62 FC | 	wrlong	arg02, fp
10ce4     04 CE 05 F1 | 	add	fp, #4
10ce8     E7 92 62 FC | 	wrlong	arg01, fp
10cec     2C CE 85 F1 | 	sub	fp, #44
10cf0     B4 C9 BF FD | 	call	#_pop
10cf4     3D 97 02 F6 | 	mov	arg03, result1
10cf8     3E 95 02 F6 | 	mov	arg02, result2
10cfc     3F 93 02 F6 | 	mov	arg01, result3
10d00     18 CE 05 F1 | 	add	fp, #24
10d04     E7 96 62 FC | 	wrlong	arg03, fp
10d08     04 CE 05 F1 | 	add	fp, #4
10d0c     E7 94 62 FC | 	wrlong	arg02, fp
10d10     04 CE 05 F1 | 	add	fp, #4
10d14     E7 92 62 FC | 	wrlong	arg01, fp
10d18     20 CE 85 F1 | 	sub	fp, #32
10d1c     88 C9 BF FD | 	call	#_pop
10d20     3D 97 02 F6 | 	mov	arg03, result1
10d24     3E 95 02 F6 | 	mov	arg02, result2
10d28     3F 93 02 F6 | 	mov	arg01, result3
10d2c     0C CE 05 F1 | 	add	fp, #12
10d30     E7 96 62 FC | 	wrlong	arg03, fp
10d34     04 CE 05 F1 | 	add	fp, #4
10d38     E7 94 62 FC | 	wrlong	arg02, fp
10d3c     04 CE 05 F1 | 	add	fp, #4
10d40     E7 92 62 FC | 	wrlong	arg01, fp
10d44     14 CE 85 F1 | 	sub	fp, #20
10d48     5C C9 BF FD | 	call	#_pop
10d4c     3F 97 02 F6 | 	mov	arg03, result3
10d50     E7 7A 62 FC | 	wrlong	result1, fp
10d54     04 CE 05 F1 | 	add	fp, #4
10d58     E7 7C 62 FC | 	wrlong	result2, fp
10d5c     04 CE 05 F1 | 	add	fp, #4
10d60     E7 96 62 FC | 	wrlong	arg03, fp
10d64     08 CE 85 F1 | 	sub	fp, #8
10d68     E7 92 02 F6 | 	mov	arg01, fp
10d6c     14 CB BF FD | 	call	#_converttoint
10d70     3D A7 02 F6 | 	mov	local01, result1
10d74     E7 92 02 F6 | 	mov	arg01, fp
10d78     0C 92 06 F1 | 	add	arg01, #12
10d7c     04 CB BF FD | 	call	#_converttoint
10d80     3D A9 02 F6 | 	mov	local02, result1
10d84     E7 92 02 F6 | 	mov	arg01, fp
10d88     18 92 06 F1 | 	add	arg01, #24
10d8c     F4 CA BF FD | 	call	#_converttoint
10d90     3D AB 02 F6 | 	mov	local03, result1
10d94     E7 92 02 F6 | 	mov	arg01, fp
10d98     24 92 06 F1 | 	add	arg01, #36
10d9c     E4 CA BF FD | 	call	#_converttoint
10da0     3D AD 02 F6 | 	mov	local04, result1
10da4     E7 92 02 F6 | 	mov	arg01, fp
10da8     30 92 06 F1 | 	add	arg01, #48
10dac     D4 CA BF FD | 	call	#_converttoint
10db0     3D AF 02 F6 | 	mov	local05, result1
10db4                 | ' 
10db4                 | ' t5=pop()
10db4                 | ' t4=pop()
10db4                 | ' t3=pop()
10db4                 | ' t2=pop()
10db4                 | ' t1=pop()
10db4                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
10db4                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
10db4     53 97 02 F6 | 	mov	arg03, local01
10db8     02 96 66 F0 | 	shl	arg03, #2
10dbc     32 95 02 F6 | 	mov	arg02, objptr
10dc0     53 00 00 FF 
10dc4     AC 94 06 F1 | 	add	arg02, ##42668
10dc8     4A 97 02 F1 | 	add	arg03, arg02
10dcc     4B 97 0A FB | 	rdlong	arg03, arg03 wz
10dd0     20 00 90 AD |  if_e	jmp	#LR__1420
10dd4     53 97 02 F6 | 	mov	arg03, local01
10dd8     02 96 66 F0 | 	shl	arg03, #2
10ddc     32 95 02 F6 | 	mov	arg02, objptr
10de0     53 00 00 FF 
10de4     AC 94 06 F1 | 	add	arg02, ##42668
10de8     4A 97 02 F1 | 	add	arg03, arg02
10dec     4B 93 02 FB | 	rdlong	arg01, arg03
10df0     24 77 B1 FD | 	call	#__system___gc_free
10df4                 | LR__1420
10df4     57 AD 02 FD | 	qmul	local04, local05
10df8     53 B1 02 F6 | 	mov	local06, local01
10dfc     02 B0 66 F0 | 	shl	local06, #2
10e00     32 97 02 F6 | 	mov	arg03, objptr
10e04     53 00 00 FF 
10e08     AC 96 06 F1 | 	add	arg03, ##42668
10e0c     4B B1 02 F1 | 	add	local06, arg03
10e10     18 92 62 FD | 	getqx	arg01
10e14     CC 75 B1 FD | 	call	#__system___gc_alloc_managed
10e18     58 7B 62 FC | 	wrlong	result1, local06
10e1c                 | ' for y=a3 to a3+a5-1
10e1c     55 B3 02 F6 | 	mov	local07, local03
10e20     55 B5 02 F6 | 	mov	local08, local03
10e24     57 B5 02 F1 | 	add	local08, local05
10e28                 | LR__1421
10e28     5A B3 52 F2 | 	cmps	local07, local08 wc
10e2c     7C 00 90 3D |  if_ae	jmp	#LR__1424
10e30                 | '   for x=a2 to a4+a2-1
10e30     54 B7 02 F6 | 	mov	local09, local02
10e34     56 B9 02 F6 | 	mov	local10, local04
10e38     54 B9 02 F1 | 	add	local10, local02
10e3c                 | LR__1422
10e3c     5C B7 52 F2 | 	cmps	local09, local10 wc
10e40     60 00 90 3D |  if_ae	jmp	#LR__1423
10e44     59 B1 02 F6 | 	mov	local06, local07
10e48     55 B1 82 F1 | 	sub	local06, local03
10e4c     56 B1 02 FD | 	qmul	local06, local04
10e50     53 B1 02 F6 | 	mov	local06, local01
10e54     02 B0 66 F0 | 	shl	local06, #2
10e58     32 97 02 F6 | 	mov	arg03, objptr
10e5c     53 00 00 FF 
10e60     AC 96 06 F1 | 	add	arg03, ##42668
10e64     4B B1 02 F1 | 	add	local06, arg03
10e68     58 B1 02 FB | 	rdlong	local06, local06
10e6c     5B BB 02 F6 | 	mov	local11, local09
10e70     54 BB 82 F1 | 	sub	local11, local02
10e74     32 93 02 FB | 	rdlong	arg01, objptr
10e78     5B 93 02 F1 | 	add	arg01, local09
10e7c     59 97 02 F6 | 	mov	arg03, local07
10e80     0A 96 66 F0 | 	shl	arg03, #10
10e84     4B 93 02 F1 | 	add	arg01, arg03
10e88     18 96 62 FD | 	getqx	arg03
10e8c     4B BB 02 F1 | 	add	local11, arg03
10e90     58 BB 02 F1 | 	add	local11, local06
10e94     3C 04 B1 FD | 	call	#_pspeek
10e98     5D 7B 42 FC | 	wrbyte	result1, local11
10e9c     01 B6 06 F1 | 	add	local09, #1
10ea0     98 FF 9F FD | 	jmp	#LR__1422
10ea4                 | LR__1423
10ea4     01 B2 06 F1 | 	add	local07, #1
10ea8     7C FF 9F FD | 	jmp	#LR__1421
10eac                 | LR__1424
10eac     53 BB 02 F6 | 	mov	local11, local01
10eb0     02 BA 66 F0 | 	shl	local11, #2
10eb4     32 B9 02 F6 | 	mov	local10, objptr
10eb8     53 00 00 FF 
10ebc     AC B8 06 F1 | 	add	local10, ##42668
10ec0     5C BB 02 F1 | 	add	local11, local10
10ec4     5D 95 02 FB | 	rdlong	arg02, local11
10ec8     53 93 02 F6 | 	mov	arg01, local01
10ecc     18 11 B1 FD | 	call	#_hg010b_spin2_setspriteptr
10ed0     53 93 02 F6 | 	mov	arg01, local01
10ed4     56 95 02 F6 | 	mov	arg02, local04
10ed8     57 97 02 F6 | 	mov	arg03, local05
10edc     94 11 B1 FD | 	call	#_hg010b_spin2_setspritesize
10ee0     E7 F0 03 F6 | 	mov	ptra, fp
10ee4     F2 00 A0 FD | 	call	#popregs_
10ee8                 | _do_defsprite_ret
10ee8     2D 00 64 FD | 	ret
10eec                 | 
10eec                 | ' 
10eec                 | ' '-------------------- deg
10eec                 | ' 
10eec                 | ' sub do_deg
10eec                 | _do_deg
10eec     53 00 00 FF 
10ef0     00 65 06 F1 | 	add	objptr, ##42752
10ef4     7D 47 9E FF 
10ef8     32 6B 68 FC | 	wrlong	##1016003125, objptr
10efc     04 64 06 F1 | 	add	objptr, #4
10f00     97 32 A1 FF 
10f04     32 C3 69 FC | 	wrlong	##1113927393, objptr
10f08     53 00 00 FF 
10f0c     04 65 86 F1 | 	sub	objptr, ##42756
10f10                 | _do_deg_ret
10f10     2D 00 64 FD | 	ret
10f14                 | 
10f14                 | ' 
10f14                 | ' '-------------------- delete
10f14                 | ' 
10f14                 | ' sub do_delete
10f14                 | _do_delete
10f14     05 CA 05 F6 | 	mov	COUNT_, #5
10f18     E8 00 A0 FD | 	call	#pushregs_
10f1c     88 C7 BF FD | 	call	#_pop
10f20     3E 99 02 F6 | 	mov	arg04, result2
10f24     3F 97 02 F6 | 	mov	arg03, result3
10f28     3D A7 02 F6 | 	mov	local01, result1
10f2c     4C A9 02 F6 | 	mov	local02, arg04
10f30     4B AB 02 F6 | 	mov	local03, arg03
10f34                 | ' 
10f34                 | ' t1=pop()
10f34                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10f34     2B AA 0E F2 | 	cmp	local03, #43 wz
10f38     10 00 90 5D |  if_ne	jmp	#LR__1430
10f3c     53 93 02 F6 | 	mov	arg01, local01
10f40     D4 C8 BF FD | 	call	#_convertstring
10f44     3D A7 02 F6 | 	mov	local01, result1
10f48     1F AA 06 F6 | 	mov	local03, #31
10f4c                 | LR__1430
10f4c                 | ' if t1.result_type<>result_string then printerror(15): return
10f4c     1F AA 0E F2 | 	cmp	local03, #31 wz
10f50     10 00 90 AD |  if_e	jmp	#LR__1431
10f54     0F 92 06 F6 | 	mov	arg01, #15
10f58     00 94 06 F6 | 	mov	arg02, #0
10f5c     00 01 B1 FD | 	call	#_printerror
10f60     E4 00 90 FD | 	jmp	#LR__1435
10f64                 | LR__1431
10f64                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
10f64     4B 00 00 FF 
10f68     B4 64 06 F1 | 	add	objptr, ##38580
10f6c     32 93 02 FB | 	rdlong	arg01, objptr
10f70     4B 00 00 FF 
10f74     B4 64 86 F1 | 	sub	objptr, ##38580
10f78     97 01 00 FF 
10f7c     39 94 06 F6 | 	mov	arg02, ##@LR__5993
10f80     80 3A B1 FD | 	call	#__system___string_cmp
10f84     00 7A 0E F2 | 	cmp	result1, #0 wz
10f88     34 00 90 AD |  if_e	jmp	#LR__1432
10f8c     4B 00 00 FF 
10f90     B4 64 06 F1 | 	add	objptr, ##38580
10f94     32 93 02 FB | 	rdlong	arg01, objptr
10f98     4B 00 00 FF 
10f9c     B4 64 86 F1 | 	sub	objptr, ##38580
10fa0     97 01 00 FF 
10fa4     3B 94 06 F6 | 	mov	arg02, ##@LR__5994
10fa8     8C 3A B1 FD | 	call	#__system___string_concat
10fac     3D 93 02 F6 | 	mov	arg01, result1
10fb0     53 95 02 F6 | 	mov	arg02, local01
10fb4     80 3A B1 FD | 	call	#__system___string_concat
10fb8     3D AD 02 F6 | 	mov	local04, result1
10fbc     14 00 90 FD | 	jmp	#LR__1433
10fc0                 | LR__1432
10fc0     97 01 00 FF 
10fc4     3D 92 06 F6 | 	mov	arg01, ##@LR__5995
10fc8     53 95 02 F6 | 	mov	arg02, local01
10fcc     68 3A B1 FD | 	call	#__system___string_concat
10fd0     3D AD 02 F6 | 	mov	local04, result1
10fd4                 | LR__1433
10fd4     56 93 02 F6 | 	mov	arg01, local04
10fd8     F8 59 B1 FD | 	call	#__system___remove
10fdc     20 68 06 F1 | 	add	ptr___system__dat__, #32
10fe0     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
10fe4     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
10fe8     20 68 86 F1 | 	sub	ptr___system__dat__, #32
10fec     3D AF 0A F6 | 	mov	local05, result1 wz
10ff0                 | ' kill filename$
10ff0                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
10ff0     54 00 90 AD |  if_e	jmp	#LR__1434
10ff4     00 92 06 F6 | 	mov	arg01, #0
10ff8     64 8F B1 FD | 	call	#__system___getiolock_0622
10ffc     3D 93 02 F6 | 	mov	arg01, result1
11000     D8 39 B1 FD | 	call	#__system___lockmem
11004     97 01 00 FF 
11008     3F 94 06 F6 | 	mov	arg02, ##@LR__5996
1100c     00 92 06 F6 | 	mov	arg01, #0
11010     00 96 06 F6 | 	mov	arg03, #0
11014     B8 46 B1 FD | 	call	#__system___basic_print_string
11018     00 92 06 F6 | 	mov	arg01, #0
1101c     57 95 02 F6 | 	mov	arg02, local05
11020     00 96 06 F6 | 	mov	arg03, #0
11024     0A 98 06 F6 | 	mov	arg04, #10
11028     E8 46 B1 FD | 	call	#__system___basic_print_integer
1102c     00 92 06 F6 | 	mov	arg01, #0
11030     0A 94 06 F6 | 	mov	arg02, #10
11034     00 96 06 F6 | 	mov	arg03, #0
11038     3C 46 B1 FD | 	call	#__system___basic_print_char
1103c     00 92 06 F6 | 	mov	arg01, #0
11040     1C 8F B1 FD | 	call	#__system___getiolock_0622
11044     3D 01 68 FC | 	wrlong	#0, result1
11048                 | LR__1434
11048                 | LR__1435
11048     E7 F0 03 F6 | 	mov	ptra, fp
1104c     F2 00 A0 FD | 	call	#popregs_
11050                 | _do_delete_ret
11050     2D 00 64 FD | 	ret
11054                 | 
11054                 | ' 
11054                 | ' '-------------------- dir
11054                 | ' 
11054                 | ' sub do_dir
11054                 | _do_dir
11054     13 CA 05 F6 | 	mov	COUNT_, #19
11058     E8 00 A0 FD | 	call	#pushregs_
1105c     01 00 00 FF 
11060     38 F0 07 F1 | 	add	ptra, ##568
11064                 | ' 
11064                 | ' print "Current directory: "; currentdir$ 
11064     00 92 06 F6 | 	mov	arg01, #0
11068     F4 8E B1 FD | 	call	#__system___getiolock_0622
1106c     3D 93 02 F6 | 	mov	arg01, result1
11070     68 39 B1 FD | 	call	#__system___lockmem
11074     97 01 00 FF 
11078     77 94 06 F6 | 	mov	arg02, ##@LR__5997
1107c     00 92 06 F6 | 	mov	arg01, #0
11080     00 96 06 F6 | 	mov	arg03, #0
11084     48 46 B1 FD | 	call	#__system___basic_print_string
11088     4B 00 00 FF 
1108c     B4 64 06 F1 | 	add	objptr, ##38580
11090     32 95 02 FB | 	rdlong	arg02, objptr
11094     4B 00 00 FF 
11098     B4 64 86 F1 | 	sub	objptr, ##38580
1109c     00 92 06 F6 | 	mov	arg01, #0
110a0     00 96 06 F6 | 	mov	arg03, #0
110a4     28 46 B1 FD | 	call	#__system___basic_print_string
110a8     00 92 06 F6 | 	mov	arg01, #0
110ac     0A 94 06 F6 | 	mov	arg02, #10
110b0     00 96 06 F6 | 	mov	arg03, #0
110b4     C0 45 B1 FD | 	call	#__system___basic_print_char
110b8     01 A6 06 F6 | 	mov	local01, #1
110bc     00 92 06 F6 | 	mov	arg01, #0
110c0     9C 8E B1 FD | 	call	#__system___getiolock_0622
110c4     3D 01 68 FC | 	wrlong	#0, result1
110c8     00 A8 06 F6 | 	mov	local02, #0
110cc     00 AA 06 F6 | 	mov	local03, #0
110d0                 | ' px=0
110d0                 | ' for i=0 to 127: filelist(i)="" : next i
110d0     00 AC 06 F6 | 	mov	local04, #0
110d4     1C CE 05 F1 | 	add	fp, #28
110d8     D7 12 48 FB | 	callpa	#(@LR__1441-@LR__1440)>>2,fcache_load_ptr_
110dc                 | LR__1440
110dc     56 AF 02 F6 | 	mov	local05, local04
110e0     02 AE 66 F0 | 	shl	local05, #2
110e4     E7 AE 02 F1 | 	add	local05, fp
110e8     97 01 00 FF 
110ec     8B B0 06 F6 | 	mov	local06, ##@LR__5998
110f0     57 B1 62 FC | 	wrlong	local06, local05
110f4     01 AC 06 F1 | 	add	local04, #1
110f8     80 AC 56 F2 | 	cmps	local04, #128 wc
110fc     DC FF 9F CD |  if_b	jmp	#LR__1440
11100                 | LR__1441
11100     1C CE 85 F1 | 	sub	fp, #28
11104     97 01 00 FF 
11108     8C 92 06 F6 | 	mov	arg01, ##@LR__5999
1110c     10 94 06 F6 | 	mov	arg02, #16
11110     04 90 B1 FD | 	call	#__system___basic_dir
11114     3D B3 02 F6 | 	mov	local07, result1
11118     00 B4 06 F6 | 	mov	local08, #0
1111c                 | ' filename=dir$("*", fbDirectory)
1111c                 | ' n=0
1111c                 | ' while filename <> "" andalso filename <> nil andalso n<128
1111c                 | LR__1442
1111c     97 01 00 FF 
11120     8E B6 06 F6 | 	mov	local09, ##@LR__6000
11124     59 93 02 F6 | 	mov	arg01, local07
11128     5B 95 02 F6 | 	mov	arg02, local09
1112c     D4 38 B1 FD | 	call	#__system___string_cmp
11130     00 7A 0E F2 | 	cmp	result1, #0 wz
11134     68 00 90 AD |  if_e	jmp	#LR__1443
11138     00 B6 06 F6 | 	mov	local09, #0
1113c     59 93 02 F6 | 	mov	arg01, local07
11140     00 94 06 F6 | 	mov	arg02, #0
11144     BC 38 B1 FD | 	call	#__system___string_cmp
11148     00 7A 0E F2 | 	cmp	result1, #0 wz
1114c     50 00 90 AD |  if_e	jmp	#LR__1443
11150     80 B4 56 F2 | 	cmps	local08, #128 wc
11154     48 00 90 3D |  if_ae	jmp	#LR__1443
11158     97 01 00 FF 
1115c     8F 92 06 F6 | 	mov	arg01, ##@LR__6001
11160     59 95 02 F6 | 	mov	arg02, local07
11164     D0 38 B1 FD | 	call	#__system___string_concat
11168     3D B3 02 F6 | 	mov	local07, result1
1116c     5A AF 02 F6 | 	mov	local05, local08
11170     02 AE 66 F0 | 	shl	local05, #2
11174     E7 B6 02 F6 | 	mov	local09, fp
11178     1C B6 06 F1 | 	add	local09, #28
1117c     5B AF 02 F1 | 	add	local05, local09
11180     57 B3 62 FC | 	wrlong	local07, local05
11184     01 B4 06 F1 | 	add	local08, #1
11188     00 AE 06 F6 | 	mov	local05, #0
1118c     00 92 06 F6 | 	mov	arg01, #0
11190     00 94 06 F6 | 	mov	arg02, #0
11194     80 8F B1 FD | 	call	#__system___basic_dir
11198     3D B3 02 F6 | 	mov	local07, result1
1119c     7C FF 9F FD | 	jmp	#LR__1442
111a0                 | LR__1443
111a0                 | ' for i=0 to n-1			' now sort this
111a0     00 AC 06 F6 | 	mov	local04, #0
111a4     5A B9 02 F6 | 	mov	local10, local08
111a8                 | LR__1444
111a8     5C AD 52 F2 | 	cmps	local04, local10 wc
111ac     DC 00 90 3D |  if_ae	jmp	#LR__1448
111b0     00 BA 06 F6 | 	mov	local11, #0
111b4                 | '   swapped=false
111b4                 | '   for j=0 to n-i-2
111b4     00 BC 06 F6 | 	mov	local12, #0
111b8     5A BF 02 F6 | 	mov	local13, local08
111bc     56 BF 82 F1 | 	sub	local13, local04
111c0     01 BE 86 F1 | 	sub	local13, #1
111c4                 | LR__1445
111c4     5F BD 52 F2 | 	cmps	local12, local13 wc
111c8     B0 00 90 3D |  if_ae	jmp	#LR__1447
111cc                 | '     if filelist(j) > filelist(j+1) then
111cc     5E B7 02 F6 | 	mov	local09, local12
111d0     02 B6 66 F0 | 	shl	local09, #2
111d4     1C CE 05 F1 | 	add	fp, #28
111d8     E7 B6 02 F1 | 	add	local09, fp
111dc     5B 93 02 FB | 	rdlong	arg01, local09
111e0     5E B7 02 F6 | 	mov	local09, local12
111e4     01 B6 06 F1 | 	add	local09, #1
111e8     5B B1 02 F6 | 	mov	local06, local09
111ec     02 B0 66 F0 | 	shl	local06, #2
111f0     E7 A6 02 F6 | 	mov	local01, fp
111f4     E7 B0 02 F1 | 	add	local06, fp
111f8     58 AF 02 FB | 	rdlong	local05, local06
111fc     57 95 02 F6 | 	mov	arg02, local05
11200     1C CE 85 F1 | 	sub	fp, #28
11204     FC 37 B1 FD | 	call	#__system___string_cmp
11208     01 7A 56 F2 | 	cmps	result1, #1 wc
1120c     64 00 90 CD |  if_b	jmp	#LR__1446
11210     5E B7 02 F6 | 	mov	local09, local12
11214     01 B6 06 F1 | 	add	local09, #1
11218     02 B6 66 F0 | 	shl	local09, #2
1121c     1C CE 05 F1 | 	add	fp, #28
11220     E7 B6 02 F1 | 	add	local09, fp
11224     5B BB 02 FB | 	rdlong	local11, local09
11228     5E B1 02 F6 | 	mov	local06, local12
1122c     02 B0 66 F0 | 	shl	local06, #2
11230     E7 B0 02 F1 | 	add	local06, fp
11234     58 AF 02 FB | 	rdlong	local05, local06
11238     5E B7 02 F6 | 	mov	local09, local12
1123c     5B B1 02 F6 | 	mov	local06, local09
11240     02 B0 66 F0 | 	shl	local06, #2
11244     E7 A6 02 F6 | 	mov	local01, fp
11248     E7 B0 02 F1 | 	add	local06, fp
1124c     58 BB 62 FC | 	wrlong	local11, local06
11250     5E A9 02 F6 | 	mov	local02, local12
11254     01 A8 06 F1 | 	add	local02, #1
11258     54 C1 02 F6 | 	mov	local14, local02
1125c     02 C0 66 F0 | 	shl	local14, #2
11260     E7 C2 02 F6 | 	mov	local15, fp
11264     E7 C0 02 F1 | 	add	local14, fp
11268     60 AF 62 FC | 	wrlong	local05, local14
1126c     01 BA 66 F6 | 	neg	local11, #1
11270     1C CE 85 F1 | 	sub	fp, #28
11274                 | LR__1446
11274     01 BC 06 F1 | 	add	local12, #1
11278     48 FF 9F FD | 	jmp	#LR__1445
1127c                 | LR__1447
1127c                 | ' if not swapped then exit for
1127c     5D C5 22 F6 | 	not	local16, local11
11280     00 C4 0E F2 | 	cmp	local16, #0 wz
11284     01 AC 06 A1 |  if_e	add	local04, #1
11288     1C FF 9F AD |  if_e	jmp	#LR__1444
1128c                 | LR__1448
1128c                 | ' for i=0 to n-1
1128c     00 AC 06 F6 | 	mov	local04, #0
11290     5A C7 02 F6 | 	mov	local17, local08
11294                 | LR__1449
11294     63 AD 52 F2 | 	cmps	local04, local17 wc
11298     90 00 90 3D |  if_ae	jmp	#LR__1451
1129c                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1129c     00 92 06 F6 | 	mov	arg01, #0
112a0     BC 8C B1 FD | 	call	#__system___getiolock_0622
112a4     3D 93 02 F6 | 	mov	arg01, result1
112a8     30 37 B1 FD | 	call	#__system___lockmem
112ac     56 A9 02 F6 | 	mov	local02, local04
112b0     02 A8 66 F0 | 	shl	local02, #2
112b4     E7 C0 02 F6 | 	mov	local14, fp
112b8     1C C0 06 F1 | 	add	local14, #28
112bc     60 A9 02 F1 | 	add	local02, local14
112c0     54 95 02 FB | 	rdlong	arg02, local02
112c4     00 A6 06 F6 | 	mov	local01, #0
112c8     00 92 06 F6 | 	mov	arg01, #0
112cc     00 96 06 F6 | 	mov	arg03, #0
112d0     FC 43 B1 FD | 	call	#__system___basic_print_string
112d4     00 92 06 F6 | 	mov	arg01, #0
112d8     84 8C B1 FD | 	call	#__system___getiolock_0622
112dc     3D 01 68 FC | 	wrlong	#0, result1
112e0     40 AA 06 F1 | 	add	local03, #64
112e4     55 93 02 F6 | 	mov	arg01, local03
112e8     20 1A B1 FD | 	call	#_hg010b_spin2_setcursorx
112ec     00 AB 56 F2 | 	cmps	local03, #256 wc
112f0     30 00 90 CD |  if_b	jmp	#LR__1450
112f4     00 AA 06 F6 | 	mov	local03, #0
112f8     00 92 06 F6 | 	mov	arg01, #0
112fc     60 8C B1 FD | 	call	#__system___getiolock_0622
11300     3D 93 02 F6 | 	mov	arg01, result1
11304     D4 36 B1 FD | 	call	#__system___lockmem
11308     00 92 06 F6 | 	mov	arg01, #0
1130c     0A 94 06 F6 | 	mov	arg02, #10
11310     00 96 06 F6 | 	mov	arg03, #0
11314     60 43 B1 FD | 	call	#__system___basic_print_char
11318     00 92 06 F6 | 	mov	arg01, #0
1131c     40 8C B1 FD | 	call	#__system___getiolock_0622
11320     3D 01 68 FC | 	wrlong	#0, result1
11324                 | LR__1450
11324     01 AC 06 F1 | 	add	local04, #1
11328     68 FF 9F FD | 	jmp	#LR__1449
1132c                 | LR__1451
1132c                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1132c     80 B4 56 F2 | 	cmps	local08, #128 wc
11330     44 00 90 CD |  if_b	jmp	#LR__1452
11334     00 92 06 F6 | 	mov	arg01, #0
11338     24 8C B1 FD | 	call	#__system___getiolock_0622
1133c     3D 93 02 F6 | 	mov	arg01, result1
11340     98 36 B1 FD | 	call	#__system___lockmem
11344     97 01 00 FF 
11348     96 94 06 F6 | 	mov	arg02, ##@LR__6002
1134c     00 92 06 F6 | 	mov	arg01, #0
11350     00 96 06 F6 | 	mov	arg03, #0
11354     78 43 B1 FD | 	call	#__system___basic_print_string
11358     00 92 06 F6 | 	mov	arg01, #0
1135c     0A 94 06 F6 | 	mov	arg02, #10
11360     00 96 06 F6 | 	mov	arg03, #0
11364     10 43 B1 FD | 	call	#__system___basic_print_char
11368     00 92 06 F6 | 	mov	arg01, #0
1136c     F0 8B B1 FD | 	call	#__system___getiolock_0622
11370     3D 01 68 FC | 	wrlong	#0, result1
11374     00 A6 06 F6 | 	mov	local01, #0
11378                 | LR__1452
11378                 | ' print
11378     00 92 06 F6 | 	mov	arg01, #0
1137c     E0 8B B1 FD | 	call	#__system___getiolock_0622
11380     3D 93 02 F6 | 	mov	arg01, result1
11384     54 36 B1 FD | 	call	#__system___lockmem
11388     00 92 06 F6 | 	mov	arg01, #0
1138c     0A 94 06 F6 | 	mov	arg02, #10
11390     00 96 06 F6 | 	mov	arg03, #0
11394     E0 42 B1 FD | 	call	#__system___basic_print_char
11398     00 92 06 F6 | 	mov	arg01, #0
1139c     C0 8B B1 FD | 	call	#__system___getiolock_0622
113a0     3D 01 68 FC | 	wrlong	#0, result1
113a4     00 B0 06 F6 | 	mov	local06, #0
113a8     00 B4 06 F6 | 	mov	local08, #0
113ac     00 AA 06 F6 | 	mov	local03, #0
113b0                 | ' return cursor_y
113b0     3E 64 06 F1 | 	add	objptr, #62
113b4     32 C9 C2 FA | 	rdbyte	local18, objptr
113b8     3E 64 86 F1 | 	sub	objptr, #62
113bc     97 01 00 FF 
113c0     C8 92 06 F6 | 	mov	arg01, ##@LR__6003
113c4     21 94 06 F6 | 	mov	arg02, #33
113c8     4C 8D B1 FD | 	call	#__system___basic_dir
113cc     3D B3 02 F6 | 	mov	local07, result1
113d0                 | ' n=0
113d0                 | ' px=0: py=v.getcursory()
113d0                 | ' filename = dir$("*", fbNormal )   
113d0                 | ' do while filename <> "" andalso filename <> nil andalso n<128
113d0                 | LR__1453
113d0     97 01 00 FF 
113d4     CA B6 06 F6 | 	mov	local09, ##@LR__6004
113d8     59 93 02 F6 | 	mov	arg01, local07
113dc     5B 95 02 F6 | 	mov	arg02, local09
113e0     20 36 B1 FD | 	call	#__system___string_cmp
113e4     00 7A 0E F2 | 	cmp	result1, #0 wz
113e8     54 00 90 AD |  if_e	jmp	#LR__1454
113ec     00 B6 06 F6 | 	mov	local09, #0
113f0     59 93 02 F6 | 	mov	arg01, local07
113f4     00 94 06 F6 | 	mov	arg02, #0
113f8     08 36 B1 FD | 	call	#__system___string_cmp
113fc     00 7A 0E F2 | 	cmp	result1, #0 wz
11400     3C 00 90 AD |  if_e	jmp	#LR__1454
11404     80 B4 56 F2 | 	cmps	local08, #128 wc
11408     34 00 90 3D |  if_ae	jmp	#LR__1454
1140c     5A AF 02 F6 | 	mov	local05, local08
11410     02 AE 66 F0 | 	shl	local05, #2
11414     E7 B6 02 F6 | 	mov	local09, fp
11418     1C B6 06 F1 | 	add	local09, #28
1141c     5B AF 02 F1 | 	add	local05, local09
11420     57 B3 62 FC | 	wrlong	local07, local05
11424     01 B4 06 F1 | 	add	local08, #1
11428     00 AE 06 F6 | 	mov	local05, #0
1142c     00 92 06 F6 | 	mov	arg01, #0
11430     00 94 06 F6 | 	mov	arg02, #0
11434     E0 8C B1 FD | 	call	#__system___basic_dir
11438     3D B3 02 F6 | 	mov	local07, result1
1143c     90 FF 9F FD | 	jmp	#LR__1453
11440                 | LR__1454
11440                 | ' for i =0 to n-1
11440     00 AC 06 F6 | 	mov	local04, #0
11444                 | LR__1455
11444     5A AD 52 F2 | 	cmps	local04, local08 wc
11448     D8 00 90 3D |  if_ae	jmp	#LR__1459
1144c     00 BA 06 F6 | 	mov	local11, #0
11450                 | '   swapped=false
11450                 | '   for j=0 to n-i-2
11450     00 BC 06 F6 | 	mov	local12, #0
11454     5A CB 02 F6 | 	mov	local19, local08
11458     56 CB 82 F1 | 	sub	local19, local04
1145c     01 CA 86 F1 | 	sub	local19, #1
11460                 | LR__1456
11460     65 BD 52 F2 | 	cmps	local12, local19 wc
11464     AC 00 90 3D |  if_ae	jmp	#LR__1458
11468                 | '     if filelist(j) > filelist(j+1) then
11468     5E B7 02 F6 | 	mov	local09, local12
1146c     02 B6 66 F0 | 	shl	local09, #2
11470     1C CE 05 F1 | 	add	fp, #28
11474     E7 B6 02 F1 | 	add	local09, fp
11478     5B 93 02 FB | 	rdlong	arg01, local09
1147c     5E B7 02 F6 | 	mov	local09, local12
11480     01 B6 06 F1 | 	add	local09, #1
11484     5B B1 02 F6 | 	mov	local06, local09
11488     02 B0 66 F0 | 	shl	local06, #2
1148c     E7 A6 02 F6 | 	mov	local01, fp
11490     E7 B0 02 F1 | 	add	local06, fp
11494     58 AF 02 FB | 	rdlong	local05, local06
11498     57 95 02 F6 | 	mov	arg02, local05
1149c     1C CE 85 F1 | 	sub	fp, #28
114a0     60 35 B1 FD | 	call	#__system___string_cmp
114a4     01 7A 56 F2 | 	cmps	result1, #1 wc
114a8     60 00 90 CD |  if_b	jmp	#LR__1457
114ac     5E B7 02 F6 | 	mov	local09, local12
114b0     01 B6 06 F1 | 	add	local09, #1
114b4     02 B6 66 F0 | 	shl	local09, #2
114b8     1C CE 05 F1 | 	add	fp, #28
114bc     E7 B6 02 F1 | 	add	local09, fp
114c0     5B C5 02 FB | 	rdlong	local16, local09
114c4     5E B1 02 F6 | 	mov	local06, local12
114c8     02 B0 66 F0 | 	shl	local06, #2
114cc     E7 B0 02 F1 | 	add	local06, fp
114d0     58 AF 02 FB | 	rdlong	local05, local06
114d4     5E B7 02 F6 | 	mov	local09, local12
114d8     5B B1 02 F6 | 	mov	local06, local09
114dc     02 B0 66 F0 | 	shl	local06, #2
114e0     E7 A6 02 F6 | 	mov	local01, fp
114e4     E7 B0 02 F1 | 	add	local06, fp
114e8     58 C5 62 FC | 	wrlong	local16, local06
114ec     5E C1 02 F6 | 	mov	local14, local12
114f0     01 C0 06 F1 | 	add	local14, #1
114f4     02 C0 66 F0 | 	shl	local14, #2
114f8     E7 C2 02 F6 | 	mov	local15, fp
114fc     E7 C0 02 F1 | 	add	local14, fp
11500     60 AF 62 FC | 	wrlong	local05, local14
11504     01 BA 66 F6 | 	neg	local11, #1
11508     1C CE 85 F1 | 	sub	fp, #28
1150c                 | LR__1457
1150c     01 BC 06 F1 | 	add	local12, #1
11510     4C FF 9F FD | 	jmp	#LR__1456
11514                 | LR__1458
11514                 | ' if not swapped then exit for
11514     5D C5 22 F6 | 	not	local16, local11
11518     00 C4 0E F2 | 	cmp	local16, #0 wz
1151c     01 AC 06 A1 |  if_e	add	local04, #1
11520     20 FF 9F AD |  if_e	jmp	#LR__1455
11524                 | LR__1459
11524                 | ' for i=0 to n-1
11524     00 AC 06 F6 | 	mov	local04, #0
11528                 | LR__1460
11528     5A AD 52 F2 | 	cmps	local04, local08 wc
1152c     8C 00 90 3D |  if_ae	jmp	#LR__1462
11530                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11530     00 92 06 F6 | 	mov	arg01, #0
11534     28 8A B1 FD | 	call	#__system___getiolock_0622
11538     3D 93 02 F6 | 	mov	arg01, result1
1153c     9C 34 B1 FD | 	call	#__system___lockmem
11540     56 A9 02 F6 | 	mov	local02, local04
11544     02 A8 66 F0 | 	shl	local02, #2
11548     E7 C0 02 F6 | 	mov	local14, fp
1154c     1C C0 06 F1 | 	add	local14, #28
11550     60 A9 02 F1 | 	add	local02, local14
11554     54 95 02 FB | 	rdlong	arg02, local02
11558     00 92 06 F6 | 	mov	arg01, #0
1155c     00 96 06 F6 | 	mov	arg03, #0
11560     6C 41 B1 FD | 	call	#__system___basic_print_string
11564     00 92 06 F6 | 	mov	arg01, #0
11568     F4 89 B1 FD | 	call	#__system___getiolock_0622
1156c     3D 01 68 FC | 	wrlong	#0, result1
11570     40 AA 06 F1 | 	add	local03, #64
11574     55 93 02 F6 | 	mov	arg01, local03
11578     90 17 B1 FD | 	call	#_hg010b_spin2_setcursorx
1157c     00 AB 56 F2 | 	cmps	local03, #256 wc
11580     30 00 90 CD |  if_b	jmp	#LR__1461
11584     00 AA 06 F6 | 	mov	local03, #0
11588     00 92 06 F6 | 	mov	arg01, #0
1158c     D0 89 B1 FD | 	call	#__system___getiolock_0622
11590     3D 93 02 F6 | 	mov	arg01, result1
11594     44 34 B1 FD | 	call	#__system___lockmem
11598     00 92 06 F6 | 	mov	arg01, #0
1159c     0A 94 06 F6 | 	mov	arg02, #10
115a0     00 96 06 F6 | 	mov	arg03, #0
115a4     D0 40 B1 FD | 	call	#__system___basic_print_char
115a8     00 92 06 F6 | 	mov	arg01, #0
115ac     B0 89 B1 FD | 	call	#__system___getiolock_0622
115b0     3D 01 68 FC | 	wrlong	#0, result1
115b4                 | LR__1461
115b4     01 AC 06 F1 | 	add	local04, #1
115b8     6C FF 9F FD | 	jmp	#LR__1460
115bc                 | LR__1462
115bc                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
115bc     80 B4 56 F2 | 	cmps	local08, #128 wc
115c0     40 00 90 CD |  if_b	jmp	#LR__1463
115c4     00 92 06 F6 | 	mov	arg01, #0
115c8     94 89 B1 FD | 	call	#__system___getiolock_0622
115cc     3D 93 02 F6 | 	mov	arg01, result1
115d0     08 34 B1 FD | 	call	#__system___lockmem
115d4     97 01 00 FF 
115d8     CB 94 06 F6 | 	mov	arg02, ##@LR__6005
115dc     00 92 06 F6 | 	mov	arg01, #0
115e0     00 96 06 F6 | 	mov	arg03, #0
115e4     E8 40 B1 FD | 	call	#__system___basic_print_string
115e8     00 92 06 F6 | 	mov	arg01, #0
115ec     0A 94 06 F6 | 	mov	arg02, #10
115f0     00 96 06 F6 | 	mov	arg03, #0
115f4     80 40 B1 FD | 	call	#__system___basic_print_char
115f8     00 92 06 F6 | 	mov	arg01, #0
115fc     60 89 B1 FD | 	call	#__system___getiolock_0622
11600     3D 01 68 FC | 	wrlong	#0, result1
11604                 | LR__1463
11604                 | ' print
11604     00 92 06 F6 | 	mov	arg01, #0
11608     54 89 B1 FD | 	call	#__system___getiolock_0622
1160c     3D 93 02 F6 | 	mov	arg01, result1
11610     C8 33 B1 FD | 	call	#__system___lockmem
11614     00 92 06 F6 | 	mov	arg01, #0
11618     0A 94 06 F6 | 	mov	arg02, #10
1161c     00 96 06 F6 | 	mov	arg03, #0
11620     54 40 B1 FD | 	call	#__system___basic_print_char
11624     00 92 06 F6 | 	mov	arg01, #0
11628     34 89 B1 FD | 	call	#__system___getiolock_0622
1162c     3D 01 68 FC | 	wrlong	#0, result1
11630     E7 F0 03 F6 | 	mov	ptra, fp
11634     F2 00 A0 FD | 	call	#popregs_
11638                 | _do_dir_ret
11638     2D 00 64 FD | 	ret
1163c                 | 
1163c                 | ' 
1163c                 | ' '-------------------- dpeek
1163c                 | ' 
1163c                 | ' sub do_dpeek
1163c                 | _do_dpeek
1163c     01 CA 05 F6 | 	mov	COUNT_, #1
11640     E8 00 A0 FD | 	call	#pushregs_
11644     14 F0 07 F1 | 	add	ptra, #20
11648     5C C0 BF FD | 	call	#_pop
1164c     E7 7A 62 FC | 	wrlong	result1, fp
11650     04 CE 05 F1 | 	add	fp, #4
11654     E7 7C 62 FC | 	wrlong	result2, fp
11658     04 CE 05 F1 | 	add	fp, #4
1165c     E7 7E 62 FC | 	wrlong	result3, fp
11660     08 CE 85 F1 | 	sub	fp, #8
11664     E7 92 02 F6 | 	mov	arg01, fp
11668     18 C2 BF FD | 	call	#_converttoint
1166c     3D 93 02 F6 | 	mov	arg01, result1
11670                 | ' 
11670                 | ' t1=pop()
11670                 | ' a=converttoint(t1)
11670                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
11670     00 04 00 FF 
11674     00 92 16 F2 | 	cmp	arg01, ##524288 wc
11678     49 A7 E2 CA |  if_b	rdword	local01, arg01
1167c     08 00 90 CD |  if_b	jmp	#LR__1470
11680     E0 FC B0 FD | 	call	#_psdpeek
11684     3D A7 02 F6 | 	mov	local01, result1
11688                 | LR__1470
11688     08 CE 05 F1 | 	add	fp, #8
1168c     E7 3A 68 FC | 	wrlong	#29, fp
11690     08 CE 85 F1 | 	sub	fp, #8
11694     E7 A6 62 FC | 	wrlong	local01, fp
11698     E7 92 02 F6 | 	mov	arg01, fp
1169c     98 C0 BF FD | 	call	#_push
116a0     E7 F0 03 F6 | 	mov	ptra, fp
116a4     F2 00 A0 FD | 	call	#popregs_
116a8                 | _do_dpeek_ret
116a8     2D 00 64 FD | 	ret
116ac                 | 
116ac                 | ' 
116ac                 | ' '-------------------- dpoke
116ac                 | ' 
116ac                 | ' sub do_dpoke
116ac                 | _do_dpoke
116ac     02 CA 05 F6 | 	mov	COUNT_, #2
116b0     E8 00 A0 FD | 	call	#pushregs_
116b4     20 F0 07 F1 | 	add	ptra, #32
116b8     EC BF BF FD | 	call	#_pop
116bc     3D 95 02 F6 | 	mov	arg02, result1
116c0     3E 93 02 F6 | 	mov	arg01, result2
116c4     3F A7 02 F6 | 	mov	local01, result3
116c8     E7 94 62 FC | 	wrlong	arg02, fp
116cc     04 CE 05 F1 | 	add	fp, #4
116d0     E7 92 62 FC | 	wrlong	arg01, fp
116d4     04 CE 05 F1 | 	add	fp, #4
116d8     E7 A6 62 FC | 	wrlong	local01, fp
116dc     08 CE 85 F1 | 	sub	fp, #8
116e0     C4 BF BF FD | 	call	#_pop
116e4     3F A7 02 F6 | 	mov	local01, result3
116e8     0C CE 05 F1 | 	add	fp, #12
116ec     E7 7A 62 FC | 	wrlong	result1, fp
116f0     04 CE 05 F1 | 	add	fp, #4
116f4     E7 7C 62 FC | 	wrlong	result2, fp
116f8     04 CE 05 F1 | 	add	fp, #4
116fc     E7 A6 62 FC | 	wrlong	local01, fp
11700     08 CE 85 F1 | 	sub	fp, #8
11704     E7 92 02 F6 | 	mov	arg01, fp
11708     0C CE 85 F1 | 	sub	fp, #12
1170c     74 C1 BF FD | 	call	#_converttoint
11710     3D A7 02 F6 | 	mov	local01, result1
11714     E7 92 02 F6 | 	mov	arg01, fp
11718     68 C1 BF FD | 	call	#_converttoint
1171c     3D A9 02 F6 | 	mov	local02, result1
11720                 | ' 
11720                 | ' t1=pop() 'value
11720                 | ' t2=pop() 
11720                 | ' a=converttoint(t2) : v=converttoint(t1)
11720                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
11720     00 04 00 FF 
11724     00 A6 16 F2 | 	cmp	local01, ##524288 wc
11728     53 A9 52 CC |  if_b	wrword	local02, local01
1172c     53 93 02 36 |  if_ae	mov	arg01, local01
11730     54 95 02 36 |  if_ae	mov	arg02, local02
11734     0C FB B0 3D |  if_ae	call	#_psdpoke
11738     E7 F0 03 F6 | 	mov	ptra, fp
1173c     F2 00 A0 FD | 	call	#popregs_
11740                 | _do_dpoke_ret
11740     2D 00 64 FD | 	ret
11744                 | 
11744                 | ' '-------------------- draw
11744                 | ' 
11744                 | ' sub do_draw
11744                 | _do_draw
11744     02 CA 05 F6 | 	mov	COUNT_, #2
11748     E8 00 A0 FD | 	call	#pushregs_
1174c     20 F0 07 F1 | 	add	ptra, #32
11750     54 BF BF FD | 	call	#_pop
11754     3D 99 02 F6 | 	mov	arg04, result1
11758     3E 97 02 F6 | 	mov	arg03, result2
1175c     3F 9B 02 F6 | 	mov	arg05, result3
11760     0C CE 05 F1 | 	add	fp, #12
11764     E7 98 62 FC | 	wrlong	arg04, fp
11768     04 CE 05 F1 | 	add	fp, #4
1176c     E7 96 62 FC | 	wrlong	arg03, fp
11770     04 CE 05 F1 | 	add	fp, #4
11774     E7 9A 62 FC | 	wrlong	arg05, fp
11778     14 CE 85 F1 | 	sub	fp, #20
1177c     28 BF BF FD | 	call	#_pop
11780     3F 99 02 F6 | 	mov	arg04, result3
11784     E7 7A 62 FC | 	wrlong	result1, fp
11788     04 CE 05 F1 | 	add	fp, #4
1178c     E7 7C 62 FC | 	wrlong	result2, fp
11790     04 CE 05 F1 | 	add	fp, #4
11794     E7 98 62 FC | 	wrlong	arg04, fp
11798     08 CE 85 F1 | 	sub	fp, #8
1179c     E7 92 02 F6 | 	mov	arg01, fp
117a0     E0 C0 BF FD | 	call	#_converttoint
117a4     3D A7 02 F6 | 	mov	local01, result1
117a8     E7 92 02 F6 | 	mov	arg01, fp
117ac     0C 92 06 F1 | 	add	arg01, #12
117b0     D0 C0 BF FD | 	call	#_converttoint
117b4     3D A9 02 F6 | 	mov	local02, result1
117b8     38 00 00 FF 
117bc     4C 64 06 F1 | 	add	objptr, ##28748
117c0     32 93 02 FB | 	rdlong	arg01, objptr
117c4     04 64 06 F1 | 	add	objptr, #4
117c8     32 95 02 FB | 	rdlong	arg02, objptr
117cc     08 64 86 F1 | 	sub	objptr, #8
117d0     32 9B 02 FB | 	rdlong	arg05, objptr
117d4     38 00 00 FF 
117d8     48 64 86 F1 | 	sub	objptr, ##28744
117dc     53 97 02 F6 | 	mov	arg03, local01
117e0     54 99 02 F6 | 	mov	arg04, local02
117e4     88 0B B1 FD | 	call	#_hg010b_spin2_draw
117e8     38 00 00 FF 
117ec     4C 64 06 F1 | 	add	objptr, ##28748
117f0     32 A7 62 FC | 	wrlong	local01, objptr
117f4     04 64 06 F1 | 	add	objptr, #4
117f8     32 A9 62 FC | 	wrlong	local02, objptr
117fc     38 00 00 FF 
11800     50 64 86 F1 | 	sub	objptr, ##28752
11804     E7 F0 03 F6 | 	mov	ptra, fp
11808     F2 00 A0 FD | 	call	#popregs_
1180c                 | _do_draw_ret
1180c     2D 00 64 FD | 	ret
11810                 | 
11810                 | ' 
11810                 | ' '-------------------- else
11810                 | ' 
11810                 | ' sub do_else
11810                 | _do_else
11810     4B 00 00 FF 
11814     9C 64 06 F1 | 	add	objptr, ##38556
11818     32 81 02 FB | 	rdlong	_var01, objptr
1181c     01 80 86 F1 | 	sub	_var01, #1
11820     04 64 06 F1 | 	add	objptr, #4
11824     32 81 62 FC | 	wrlong	_var01, objptr
11828     4B 00 00 FF 
1182c     A0 64 86 F1 | 	sub	objptr, ##38560
11830                 | _do_else_ret
11830     2D 00 64 FD | 	ret
11834                 | 
11834                 | ' 
11834                 | ' '-------------------- end
11834                 | ' 
11834                 | ' sub do_end
11834                 | _do_end
11834     4B 00 00 FF 
11838     9C 64 06 F1 | 	add	objptr, ##38556
1183c     32 81 02 FB | 	rdlong	_var01, objptr
11840     01 80 86 F1 | 	sub	_var01, #1
11844     04 64 06 F1 | 	add	objptr, #4
11848     32 81 62 FC | 	wrlong	_var01, objptr
1184c     06 00 00 FF 
11850     38 64 06 F1 | 	add	objptr, ##3128
11854     FF FF BF FF 
11858     32 FF 6B FC | 	wrlong	##2147483647, objptr
1185c     51 00 00 FF 
11860     D8 64 86 F1 | 	sub	objptr, ##41688
11864                 | _do_end_ret
11864     2D 00 64 FD | 	ret
11868                 | 
11868                 | ' 
11868                 | ' '-------------------- enter
11868                 | ' 
11868                 | ' sub do_enter
11868                 | _do_enter
11868     02 00 00 FF 
1186c     D2 92 06 F6 | 	mov	arg01, ##1234
11870     98 2D B0 FD | 	call	#_do_load
11874                 | _do_enter_ret
11874     2D 00 64 FD | 	ret
11878                 | 
11878                 | ' 
11878                 | ' '------------------- error processing
11878                 | ' 
11878                 | ' sub do_error
11878                 | _do_error
11878     01 CA 05 F6 | 	mov	COUNT_, #1
1187c     E8 00 A0 FD | 	call	#pushregs_
11880     4B 00 00 FF 
11884     A0 64 06 F1 | 	add	objptr, ##38560
11888     32 99 02 FB | 	rdlong	arg04, objptr
1188c     4C 97 02 F6 | 	mov	arg03, arg04
11890     01 96 66 F0 | 	shl	arg03, #1
11894     4C 97 02 F1 | 	add	arg03, arg04
11898     02 96 66 F0 | 	shl	arg03, #2
1189c     03 00 00 FF 
118a0     04 64 86 F1 | 	sub	objptr, ##1540
118a4     32 97 02 F1 | 	add	arg03, objptr
118a8     4B A7 02 FB | 	rdlong	local01, arg03
118ac                 | ' r=compiledline(lineptr_e).result.uresult
118ac                 | ' print "Error ";r;": ";errors$(r)
118ac     00 92 06 F6 | 	mov	arg01, #0
118b0     48 00 00 FF 
118b4     9C 64 86 F1 | 	sub	objptr, ##37020
118b8     A4 86 B1 FD | 	call	#__system___getiolock_0622
118bc     3D 93 02 F6 | 	mov	arg01, result1
118c0     18 31 B1 FD | 	call	#__system___lockmem
118c4     97 01 00 FF 
118c8     FD 94 06 F6 | 	mov	arg02, ##@LR__6006
118cc     00 92 06 F6 | 	mov	arg01, #0
118d0     00 96 06 F6 | 	mov	arg03, #0
118d4     F8 3D B1 FD | 	call	#__system___basic_print_string
118d8     00 92 06 F6 | 	mov	arg01, #0
118dc     53 95 02 F6 | 	mov	arg02, local01
118e0     00 96 06 F6 | 	mov	arg03, #0
118e4     0A 98 06 F6 | 	mov	arg04, #10
118e8     68 3E B1 FD | 	call	#__system___basic_print_unsigned
118ec     97 01 00 FF 
118f0     04 95 06 F6 | 	mov	arg02, ##@LR__6007
118f4     00 92 06 F6 | 	mov	arg01, #0
118f8     00 96 06 F6 | 	mov	arg03, #0
118fc     D0 3D B1 FD | 	call	#__system___basic_print_string
11900     02 A6 66 F0 | 	shl	local01, #2
11904     32 99 02 F6 | 	mov	arg04, objptr
11908     46 00 00 FF 
1190c     9C 98 06 F1 | 	add	arg04, ##35996
11910     4C A7 02 F1 | 	add	local01, arg04
11914     53 95 02 FB | 	rdlong	arg02, local01
11918     00 92 06 F6 | 	mov	arg01, #0
1191c     00 96 06 F6 | 	mov	arg03, #0
11920     AC 3D B1 FD | 	call	#__system___basic_print_string
11924     00 92 06 F6 | 	mov	arg01, #0
11928     0A 94 06 F6 | 	mov	arg02, #10
1192c     00 96 06 F6 | 	mov	arg03, #0
11930     44 3D B1 FD | 	call	#__system___basic_print_char
11934     00 92 06 F6 | 	mov	arg01, #0
11938     24 86 B1 FD | 	call	#__system___getiolock_0622
1193c     3D 01 68 FC | 	wrlong	#0, result1
11940     E7 F0 03 F6 | 	mov	ptra, fp
11944     F2 00 A0 FD | 	call	#popregs_
11948                 | _do_error_ret
11948     2D 00 64 FD | 	ret
1194c                 | 
1194c                 | ' 
1194c                 | ' '-------------------- fcircle
1194c                 | ' 
1194c                 | ' sub do_fcircle
1194c                 | _do_fcircle
1194c     02 CA 05 F6 | 	mov	COUNT_, #2
11950     E8 00 A0 FD | 	call	#pushregs_
11954     24 F0 07 F1 | 	add	ptra, #36
11958     4C BD BF FD | 	call	#_pop
1195c     3D 95 02 F6 | 	mov	arg02, result1
11960     3E 99 02 F6 | 	mov	arg04, result2
11964     3F 97 02 F6 | 	mov	arg03, result3
11968     18 CE 05 F1 | 	add	fp, #24
1196c     E7 94 62 FC | 	wrlong	arg02, fp
11970     04 CE 05 F1 | 	add	fp, #4
11974     E7 98 62 FC | 	wrlong	arg04, fp
11978     04 CE 05 F1 | 	add	fp, #4
1197c     E7 96 62 FC | 	wrlong	arg03, fp
11980     20 CE 85 F1 | 	sub	fp, #32
11984     20 BD BF FD | 	call	#_pop
11988     3D 95 02 F6 | 	mov	arg02, result1
1198c     3E 99 02 F6 | 	mov	arg04, result2
11990     3F 97 02 F6 | 	mov	arg03, result3
11994     0C CE 05 F1 | 	add	fp, #12
11998     E7 94 62 FC | 	wrlong	arg02, fp
1199c     04 CE 05 F1 | 	add	fp, #4
119a0     E7 98 62 FC | 	wrlong	arg04, fp
119a4     04 CE 05 F1 | 	add	fp, #4
119a8     E7 96 62 FC | 	wrlong	arg03, fp
119ac     14 CE 85 F1 | 	sub	fp, #20
119b0     F4 BC BF FD | 	call	#_pop
119b4     3F 95 02 F6 | 	mov	arg02, result3
119b8     E7 7A 62 FC | 	wrlong	result1, fp
119bc     04 CE 05 F1 | 	add	fp, #4
119c0     E7 7C 62 FC | 	wrlong	result2, fp
119c4     04 CE 05 F1 | 	add	fp, #4
119c8     E7 94 62 FC | 	wrlong	arg02, fp
119cc     08 CE 85 F1 | 	sub	fp, #8
119d0     E7 92 02 F6 | 	mov	arg01, fp
119d4     AC BE BF FD | 	call	#_converttoint
119d8     3D A7 02 F6 | 	mov	local01, result1
119dc     E7 92 02 F6 | 	mov	arg01, fp
119e0     0C 92 06 F1 | 	add	arg01, #12
119e4     9C BE BF FD | 	call	#_converttoint
119e8     3D A9 02 F6 | 	mov	local02, result1
119ec     E7 92 02 F6 | 	mov	arg01, fp
119f0     18 92 06 F1 | 	add	arg01, #24
119f4     8C BE BF FD | 	call	#_converttoint
119f8     3D 97 02 F6 | 	mov	arg03, result1
119fc     38 00 00 FF 
11a00     48 64 06 F1 | 	add	objptr, ##28744
11a04     32 99 02 FB | 	rdlong	arg04, objptr
11a08     38 00 00 FF 
11a0c     48 64 86 F1 | 	sub	objptr, ##28744
11a10     53 93 02 F6 | 	mov	arg01, local01
11a14     54 95 02 F6 | 	mov	arg02, local02
11a18     D8 0D B1 FD | 	call	#_hg010b_spin2_fcircle
11a1c     E7 F0 03 F6 | 	mov	ptra, fp
11a20     F2 00 A0 FD | 	call	#popregs_
11a24                 | _do_fcircle_ret
11a24     2D 00 64 FD | 	ret
11a28                 | 
11a28                 | ' 
11a28                 | ' '-------------------- fill
11a28                 | ' 
11a28                 | ' sub do_fill
11a28                 | _do_fill
11a28     03 CA 05 F6 | 	mov	COUNT_, #3
11a2c     E8 00 A0 FD | 	call	#pushregs_
11a30     30 F0 07 F1 | 	add	ptra, #48
11a34     70 BC BF FD | 	call	#_pop
11a38     3D 97 02 F6 | 	mov	arg03, result1
11a3c     3E 95 02 F6 | 	mov	arg02, result2
11a40     3F 99 02 F6 | 	mov	arg04, result3
11a44     24 CE 05 F1 | 	add	fp, #36
11a48     E7 96 62 FC | 	wrlong	arg03, fp
11a4c     04 CE 05 F1 | 	add	fp, #4
11a50     E7 94 62 FC | 	wrlong	arg02, fp
11a54     04 CE 05 F1 | 	add	fp, #4
11a58     E7 98 62 FC | 	wrlong	arg04, fp
11a5c     2C CE 85 F1 | 	sub	fp, #44
11a60     44 BC BF FD | 	call	#_pop
11a64     3D 97 02 F6 | 	mov	arg03, result1
11a68     3E 95 02 F6 | 	mov	arg02, result2
11a6c     3F 99 02 F6 | 	mov	arg04, result3
11a70     18 CE 05 F1 | 	add	fp, #24
11a74     E7 96 62 FC | 	wrlong	arg03, fp
11a78     04 CE 05 F1 | 	add	fp, #4
11a7c     E7 94 62 FC | 	wrlong	arg02, fp
11a80     04 CE 05 F1 | 	add	fp, #4
11a84     E7 98 62 FC | 	wrlong	arg04, fp
11a88     20 CE 85 F1 | 	sub	fp, #32
11a8c     18 BC BF FD | 	call	#_pop
11a90     3D 97 02 F6 | 	mov	arg03, result1
11a94     3E 95 02 F6 | 	mov	arg02, result2
11a98     3F 99 02 F6 | 	mov	arg04, result3
11a9c     0C CE 05 F1 | 	add	fp, #12
11aa0     E7 96 62 FC | 	wrlong	arg03, fp
11aa4     04 CE 05 F1 | 	add	fp, #4
11aa8     E7 94 62 FC | 	wrlong	arg02, fp
11aac     04 CE 05 F1 | 	add	fp, #4
11ab0     E7 98 62 FC | 	wrlong	arg04, fp
11ab4     14 CE 85 F1 | 	sub	fp, #20
11ab8     EC BB BF FD | 	call	#_pop
11abc     3F 97 02 F6 | 	mov	arg03, result3
11ac0     E7 7A 62 FC | 	wrlong	result1, fp
11ac4     04 CE 05 F1 | 	add	fp, #4
11ac8     E7 7C 62 FC | 	wrlong	result2, fp
11acc     04 CE 05 F1 | 	add	fp, #4
11ad0     E7 96 62 FC | 	wrlong	arg03, fp
11ad4     08 CE 85 F1 | 	sub	fp, #8
11ad8     E7 92 02 F6 | 	mov	arg01, fp
11adc     A4 BD BF FD | 	call	#_converttoint
11ae0     3D A7 02 F6 | 	mov	local01, result1
11ae4     E7 92 02 F6 | 	mov	arg01, fp
11ae8     0C 92 06 F1 | 	add	arg01, #12
11aec     94 BD BF FD | 	call	#_converttoint
11af0     3D A9 02 F6 | 	mov	local02, result1
11af4     E7 92 02 F6 | 	mov	arg01, fp
11af8     18 92 06 F1 | 	add	arg01, #24
11afc     84 BD BF FD | 	call	#_converttoint
11b00     3D AB 02 F6 | 	mov	local03, result1
11b04     E7 92 02 F6 | 	mov	arg01, fp
11b08     24 92 06 F1 | 	add	arg01, #36
11b0c     74 BD BF FD | 	call	#_converttoint
11b10     3D 99 02 F6 | 	mov	arg04, result1
11b14     53 93 02 F6 | 	mov	arg01, local01
11b18     54 95 02 F6 | 	mov	arg02, local02
11b1c     55 97 02 F6 | 	mov	arg03, local03
11b20     3C 0A B1 FD | 	call	#_hg010b_spin2_fill
11b24     E7 F0 03 F6 | 	mov	ptra, fp
11b28     F2 00 A0 FD | 	call	#popregs_
11b2c                 | _do_fill_ret
11b2c     2D 00 64 FD | 	ret
11b30                 | 
11b30                 | ' 
11b30                 | ' '-------------------- findfirst
11b30                 | ' 
11b30                 | ' sub do_findfirst
11b30                 | _do_findfirst
11b30     04 CA 05 F6 | 	mov	COUNT_, #4
11b34     E8 00 A0 FD | 	call	#pushregs_
11b38     1C F0 07 F1 | 	add	ptra, #28
11b3c     4B 00 00 FF 
11b40     A0 64 06 F1 | 	add	objptr, ##38560
11b44     32 97 02 FB | 	rdlong	arg03, objptr
11b48     4B 95 02 F6 | 	mov	arg02, arg03
11b4c     01 94 66 F0 | 	shl	arg02, #1
11b50     4B 95 02 F1 | 	add	arg02, arg03
11b54     02 94 66 F0 | 	shl	arg02, #2
11b58     03 00 00 FF 
11b5c     04 64 86 F1 | 	sub	objptr, ##1540
11b60     32 95 02 F1 | 	add	arg02, objptr
11b64     4A A7 02 FB | 	rdlong	local01, arg02
11b68                 | ' 
11b68                 | ' numpar=compiledline(lineptr_e).result.uresult
11b68                 | ' if numpar=2 then
11b68     02 A6 0E F2 | 	cmp	local01, #2 wz
11b6c     48 00 00 FF 
11b70     9C 64 86 F1 | 	sub	objptr, ##37020
11b74     48 01 90 5D |  if_ne	jmp	#LR__1484
11b78     2C BB BF FD | 	call	#_pop
11b7c     3F 97 02 F6 | 	mov	arg03, result3
11b80     08 CE 05 F1 | 	add	fp, #8
11b84     E7 7A 62 FC | 	wrlong	result1, fp
11b88     04 CE 05 F1 | 	add	fp, #4
11b8c     E7 7C 62 FC | 	wrlong	result2, fp
11b90     04 CE 05 F1 | 	add	fp, #4
11b94     E7 96 62 FC | 	wrlong	arg03, fp
11b98                 | '   t1=pop()
11b98                 | '   if t1.result_type=result_string2 then 
11b98     10 CE 85 F1 | 	sub	fp, #16
11b9c     2B 96 0E F2 | 	cmp	arg03, #43 wz
11ba0     18 00 90 5D |  if_ne	jmp	#LR__1480
11ba4     08 CE 05 F1 | 	add	fp, #8
11ba8     E7 92 02 FB | 	rdlong	arg01, fp
11bac     08 CE 85 F1 | 	sub	fp, #8
11bb0     64 BC BF FD | 	call	#_convertstring
11bb4     3D A9 02 F6 | 	mov	local02, result1
11bb8     60 00 90 FD | 	jmp	#LR__1482
11bbc                 | LR__1480
11bbc     10 CE 05 F1 | 	add	fp, #16
11bc0     E7 96 02 FB | 	rdlong	arg03, fp
11bc4     10 CE 85 F1 | 	sub	fp, #16
11bc8     1F 96 0E F2 | 	cmp	arg03, #31 wz
11bcc     08 CE 05 A1 |  if_e	add	fp, #8
11bd0     E7 A8 02 AB |  if_e	rdlong	local02, fp
11bd4     08 CE 85 A1 |  if_e	sub	fp, #8
11bd8     40 00 90 AD |  if_e	jmp	#LR__1481
11bdc                 | '     print "findfirst: "; : printerror(30) : return  
11bdc     00 92 06 F6 | 	mov	arg01, #0
11be0     7C 83 B1 FD | 	call	#__system___getiolock_0622
11be4     3D 93 02 F6 | 	mov	arg01, result1
11be8     F0 2D B1 FD | 	call	#__system___lockmem
11bec     97 01 00 FF 
11bf0     07 95 06 F6 | 	mov	arg02, ##@LR__6008
11bf4     00 92 06 F6 | 	mov	arg01, #0
11bf8     00 96 06 F6 | 	mov	arg03, #0
11bfc     D0 3A B1 FD | 	call	#__system___basic_print_string
11c00     00 92 06 F6 | 	mov	arg01, #0
11c04     58 83 B1 FD | 	call	#__system___getiolock_0622
11c08     3D 01 68 FC | 	wrlong	#0, result1
11c0c     1E 92 06 F6 | 	mov	arg01, #30
11c10     00 94 06 F6 | 	mov	arg02, #0
11c14     48 F4 B0 FD | 	call	#_printerror
11c18     08 02 90 FD | 	jmp	#LR__1492
11c1c                 | LR__1481
11c1c                 | LR__1482
11c1c     88 BA BF FD | 	call	#_pop
11c20     3F 97 02 F6 | 	mov	arg03, result3
11c24     08 CE 05 F1 | 	add	fp, #8
11c28     E7 7A 62 FC | 	wrlong	result1, fp
11c2c     04 CE 05 F1 | 	add	fp, #4
11c30     E7 7C 62 FC | 	wrlong	result2, fp
11c34     04 CE 05 F1 | 	add	fp, #4
11c38     E7 96 62 FC | 	wrlong	arg03, fp
11c3c                 | '   t1=pop()
11c3c                 | '   if t1.result_type=result_string2 then 
11c3c     10 CE 85 F1 | 	sub	fp, #16
11c40     2B 96 0E F2 | 	cmp	arg03, #43 wz
11c44     18 00 90 5D |  if_ne	jmp	#LR__1483
11c48     08 CE 05 F1 | 	add	fp, #8
11c4c     E7 92 02 FB | 	rdlong	arg01, fp
11c50     08 CE 85 F1 | 	sub	fp, #8
11c54     C0 BB BF FD | 	call	#_convertstring
11c58     3D AB 02 F6 | 	mov	local03, result1
11c5c     58 01 90 FD | 	jmp	#LR__1490
11c60                 | LR__1483
11c60     10 CE 05 F1 | 	add	fp, #16
11c64     E7 A6 02 FB | 	rdlong	local01, fp
11c68     10 CE 85 F1 | 	sub	fp, #16
11c6c     1F A6 0E F2 | 	cmp	local01, #31 wz
11c70     08 CE 05 A1 |  if_e	add	fp, #8
11c74     E7 AA 02 AB |  if_e	rdlong	local03, fp
11c78     08 CE 85 A1 |  if_e	sub	fp, #8
11c7c     38 01 90 AD |  if_e	jmp	#LR__1490
11c80                 | '     print "findfirst: "; : printerror(30) : return  
11c80     00 92 06 F6 | 	mov	arg01, #0
11c84     D8 82 B1 FD | 	call	#__system___getiolock_0622
11c88     3D 93 02 F6 | 	mov	arg01, result1
11c8c     4C 2D B1 FD | 	call	#__system___lockmem
11c90     97 01 00 FF 
11c94     13 95 06 F6 | 	mov	arg02, ##@LR__6009
11c98     00 92 06 F6 | 	mov	arg01, #0
11c9c     00 96 06 F6 | 	mov	arg03, #0
11ca0     2C 3A B1 FD | 	call	#__system___basic_print_string
11ca4     00 92 06 F6 | 	mov	arg01, #0
11ca8     B4 82 B1 FD | 	call	#__system___getiolock_0622
11cac     3D 01 68 FC | 	wrlong	#0, result1
11cb0     1E 92 06 F6 | 	mov	arg01, #30
11cb4     00 94 06 F6 | 	mov	arg02, #0
11cb8     A4 F3 B0 FD | 	call	#_printerror
11cbc     64 01 90 FD | 	jmp	#LR__1492
11cc0                 | LR__1484
11cc0     01 A6 0E F2 | 	cmp	local01, #1 wz
11cc4     B0 00 90 5D |  if_ne	jmp	#LR__1488
11cc8     DC B9 BF FD | 	call	#_pop
11ccc     3F 97 02 F6 | 	mov	arg03, result3
11cd0     08 CE 05 F1 | 	add	fp, #8
11cd4     E7 7A 62 FC | 	wrlong	result1, fp
11cd8     04 CE 05 F1 | 	add	fp, #4
11cdc     E7 7C 62 FC | 	wrlong	result2, fp
11ce0     04 CE 05 F1 | 	add	fp, #4
11ce4     E7 96 62 FC | 	wrlong	arg03, fp
11ce8                 | '   t1=pop()
11ce8                 | '   if t1.result_type=result_string2 then 
11ce8     10 CE 85 F1 | 	sub	fp, #16
11cec     2B 96 0E F2 | 	cmp	arg03, #43 wz
11cf0     18 00 90 5D |  if_ne	jmp	#LR__1485
11cf4     08 CE 05 F1 | 	add	fp, #8
11cf8     E7 92 02 FB | 	rdlong	arg01, fp
11cfc     08 CE 85 F1 | 	sub	fp, #8
11d00     14 BB BF FD | 	call	#_convertstring
11d04     3D AB 02 F6 | 	mov	local03, result1
11d08     60 00 90 FD | 	jmp	#LR__1487
11d0c                 | LR__1485
11d0c     10 CE 05 F1 | 	add	fp, #16
11d10     E7 96 02 FB | 	rdlong	arg03, fp
11d14     10 CE 85 F1 | 	sub	fp, #16
11d18     1F 96 0E F2 | 	cmp	arg03, #31 wz
11d1c     08 CE 05 A1 |  if_e	add	fp, #8
11d20     E7 AA 02 AB |  if_e	rdlong	local03, fp
11d24     08 CE 85 A1 |  if_e	sub	fp, #8
11d28     40 00 90 AD |  if_e	jmp	#LR__1486
11d2c                 | '     print "findfirst: "; : printerror(30) : return  
11d2c     00 92 06 F6 | 	mov	arg01, #0
11d30     2C 82 B1 FD | 	call	#__system___getiolock_0622
11d34     3D 93 02 F6 | 	mov	arg01, result1
11d38     A0 2C B1 FD | 	call	#__system___lockmem
11d3c     97 01 00 FF 
11d40     1F 95 06 F6 | 	mov	arg02, ##@LR__6010
11d44     00 92 06 F6 | 	mov	arg01, #0
11d48     00 96 06 F6 | 	mov	arg03, #0
11d4c     80 39 B1 FD | 	call	#__system___basic_print_string
11d50     00 92 06 F6 | 	mov	arg01, #0
11d54     08 82 B1 FD | 	call	#__system___getiolock_0622
11d58     3D 01 68 FC | 	wrlong	#0, result1
11d5c     1E 92 06 F6 | 	mov	arg01, #30
11d60     00 94 06 F6 | 	mov	arg02, #0
11d64     F8 F2 B0 FD | 	call	#_printerror
11d68     B8 00 90 FD | 	jmp	#LR__1492
11d6c                 | LR__1486
11d6c                 | LR__1487
11d6c     97 01 00 FF 
11d70     2B A9 06 F6 | 	mov	local02, ##@LR__6011
11d74     40 00 90 FD | 	jmp	#LR__1489
11d78                 | LR__1488
11d78                 | '   print "findfirst: "; : printerror(39) : return     
11d78     00 92 06 F6 | 	mov	arg01, #0
11d7c     E0 81 B1 FD | 	call	#__system___getiolock_0622
11d80     3D 93 02 F6 | 	mov	arg01, result1
11d84     54 2C B1 FD | 	call	#__system___lockmem
11d88     97 01 00 FF 
11d8c     2C 95 06 F6 | 	mov	arg02, ##@LR__6012
11d90     00 92 06 F6 | 	mov	arg01, #0
11d94     00 96 06 F6 | 	mov	arg03, #0
11d98     34 39 B1 FD | 	call	#__system___basic_print_string
11d9c     00 92 06 F6 | 	mov	arg01, #0
11da0     BC 81 B1 FD | 	call	#__system___getiolock_0622
11da4     3D 01 68 FC | 	wrlong	#0, result1
11da8     27 92 06 F6 | 	mov	arg01, #39
11dac     00 94 06 F6 | 	mov	arg02, #0
11db0     AC F2 B0 FD | 	call	#_printerror
11db4     6C 00 90 FD | 	jmp	#LR__1492
11db8                 | LR__1489
11db8                 | LR__1490
11db8                 | ' 
11db8                 | ' if s2="" then
11db8     97 01 00 FF 
11dbc     38 95 06 F6 | 	mov	arg02, ##@LR__6013
11dc0     54 93 02 F6 | 	mov	arg01, local02
11dc4     3C 2C B1 FD | 	call	#__system___string_cmp
11dc8     00 7A 0E F2 | 	cmp	result1, #0 wz
11dcc     31 AC 06 A6 |  if_e	mov	local04, #49
11dd0     24 00 90 AD |  if_e	jmp	#LR__1491
11dd4     54 93 02 F6 | 	mov	arg01, local02
11dd8     B8 47 B1 FD | 	call	#__system__LCase_S
11ddc     3D 93 02 F6 | 	mov	arg01, result1
11de0     97 01 00 FF 
11de4     39 95 06 F6 | 	mov	arg02, ##@LR__6014
11de8     18 2C B1 FD | 	call	#__system___string_cmp
11dec     00 7A 0E F2 | 	cmp	result1, #0 wz
11df0     10 AC 06 A6 |  if_e	mov	local04, #16
11df4     21 AC 06 56 |  if_ne	mov	local04, #33
11df8                 | LR__1491
11df8     55 93 02 F6 | 	mov	arg01, local03
11dfc     56 95 02 F6 | 	mov	arg02, local04
11e00     14 83 B1 FD | 	call	#__system___basic_dir
11e04     3D A9 02 F6 | 	mov	local02, result1
11e08     10 CE 05 F1 | 	add	fp, #16
11e0c     E7 3E 68 FC | 	wrlong	#31, fp
11e10     08 CE 85 F1 | 	sub	fp, #8
11e14     E7 A8 62 FC | 	wrlong	local02, fp
11e18     E7 92 02 F6 | 	mov	arg01, fp
11e1c     08 CE 85 F1 | 	sub	fp, #8
11e20     14 B9 BF FD | 	call	#_push
11e24                 | LR__1492
11e24     E7 F0 03 F6 | 	mov	ptra, fp
11e28     F2 00 A0 FD | 	call	#popregs_
11e2c                 | _do_findfirst_ret
11e2c     2D 00 64 FD | 	ret
11e30                 | 
11e30                 | ' 
11e30                 | ' '-------------------- findnext
11e30                 | ' 
11e30                 | ' sub do_findnext
11e30                 | _do_findnext
11e30     00 CA 05 F6 | 	mov	COUNT_, #0
11e34     E8 00 A0 FD | 	call	#pushregs_
11e38     10 F0 07 F1 | 	add	ptra, #16
11e3c                 | ' 
11e3c                 | ' if compiledline(lineptr_e).result.uresult>0 then print "findnext: "; : printerror(39) : return    
11e3c     4B 00 00 FF 
11e40     A0 64 06 F1 | 	add	objptr, ##38560
11e44     32 97 02 FB | 	rdlong	arg03, objptr
11e48     4B 95 02 F6 | 	mov	arg02, arg03
11e4c     01 94 66 F0 | 	shl	arg02, #1
11e50     4B 95 02 F1 | 	add	arg02, arg03
11e54     02 94 66 F0 | 	shl	arg02, #2
11e58     03 00 00 FF 
11e5c     04 64 86 F1 | 	sub	objptr, ##1540
11e60     32 95 02 F1 | 	add	arg02, objptr
11e64     4A 7B 02 FB | 	rdlong	result1, arg02
11e68     01 7A 16 F2 | 	cmp	result1, #1 wc
11e6c     48 00 00 FF 
11e70     9C 64 86 F1 | 	sub	objptr, ##37020
11e74     40 00 90 CD |  if_b	jmp	#LR__1500
11e78     00 92 06 F6 | 	mov	arg01, #0
11e7c     E0 80 B1 FD | 	call	#__system___getiolock_0622
11e80     3D 93 02 F6 | 	mov	arg01, result1
11e84     54 2B B1 FD | 	call	#__system___lockmem
11e88     97 01 00 FF 
11e8c     3D 95 06 F6 | 	mov	arg02, ##@LR__6015
11e90     00 92 06 F6 | 	mov	arg01, #0
11e94     00 96 06 F6 | 	mov	arg03, #0
11e98     34 38 B1 FD | 	call	#__system___basic_print_string
11e9c     00 92 06 F6 | 	mov	arg01, #0
11ea0     BC 80 B1 FD | 	call	#__system___getiolock_0622
11ea4     3D 01 68 FC | 	wrlong	#0, result1
11ea8     27 92 06 F6 | 	mov	arg01, #39
11eac     00 94 06 F6 | 	mov	arg02, #0
11eb0     AC F1 B0 FD | 	call	#_printerror
11eb4     28 00 90 FD | 	jmp	#LR__1501
11eb8                 | LR__1500
11eb8     00 92 06 F6 | 	mov	arg01, #0
11ebc     00 94 06 F6 | 	mov	arg02, #0
11ec0     54 82 B1 FD | 	call	#__system___basic_dir
11ec4     3D 97 02 F6 | 	mov	arg03, result1
11ec8     08 CE 05 F1 | 	add	fp, #8
11ecc     E7 3E 68 FC | 	wrlong	#31, fp
11ed0     08 CE 85 F1 | 	sub	fp, #8
11ed4     E7 96 62 FC | 	wrlong	arg03, fp
11ed8     E7 92 02 F6 | 	mov	arg01, fp
11edc     58 B8 BF FD | 	call	#_push
11ee0                 | LR__1501
11ee0     E7 F0 03 F6 | 	mov	ptra, fp
11ee4     F2 00 A0 FD | 	call	#popregs_
11ee8                 | _do_findnext_ret
11ee8     2D 00 64 FD | 	ret
11eec                 | 
11eec                 | ' 
11eec                 | ' '-------------------- font
11eec                 | ' 
11eec                 | ' sub do_font
11eec                 | _do_font
11eec     03 CA 05 F6 | 	mov	COUNT_, #3
11ef0     E8 00 A0 FD | 	call	#pushregs_
11ef4     B0 B7 BF FD | 	call	#_pop
11ef8     3D A7 02 F6 | 	mov	local01, result1
11efc     3E A9 02 F6 | 	mov	local02, result2
11f00     3F AB 02 F6 | 	mov	local03, result3
11f04                 | ' 
11f04                 | ' t1=pop() 
11f04                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
11f04     1E AA 0E F2 | 	cmp	local03, #30 wz
11f08     10 00 90 5D |  if_ne	jmp	#LR__1510
11f0c     53 93 02 F6 | 	mov	arg01, local01
11f10     00 94 06 F6 | 	mov	arg02, #0
11f14     5C 56 B1 FD | 	call	#__system___float_tointeger
11f18     3D A7 02 F6 | 	mov	local01, result1
11f1c                 | LR__1510
11f1c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
11f1c     1F AA 0E F2 | 	cmp	local03, #31 wz
11f20     18 00 90 5D |  if_ne	jmp	#LR__1511
11f24     53 93 02 F6 | 	mov	arg01, local01
11f28     9C 59 B1 FD | 	call	#__system____builtin_atof
11f2c     3D 93 02 F6 | 	mov	arg01, result1
11f30     00 94 06 F6 | 	mov	arg02, #0
11f34     3C 56 B1 FD | 	call	#__system___float_tointeger
11f38     3D A7 02 F6 | 	mov	local01, result1
11f3c                 | LR__1511
11f3c     38 00 00 FF 
11f40     60 64 06 F1 | 	add	objptr, ##28768
11f44     32 A7 62 FC | 	wrlong	local01, objptr
11f48     38 00 00 FF 
11f4c     60 64 86 F1 | 	sub	objptr, ##28768
11f50     02 A6 66 F0 | 	shl	local01, #2
11f54     53 93 02 F6 | 	mov	arg01, local01
11f58     E4 0C B1 FD | 	call	#_hg010b_spin2_setfontfamily
11f5c     E7 F0 03 F6 | 	mov	ptra, fp
11f60     F2 00 A0 FD | 	call	#popregs_
11f64                 | _do_font_ret
11f64     2D 00 64 FD | 	ret
11f68                 | 
11f68                 | ' 
11f68                 | ' '-------------------- for
11f68                 | ' 
11f68                 | ' sub do_for()
11f68                 | _do_for
11f68     01 CA 05 F6 | 	mov	COUNT_, #1
11f6c     E8 00 A0 FD | 	call	#pushregs_
11f70     10 F0 07 F1 | 	add	ptra, #16
11f74     51 00 00 FF 
11f78     50 65 06 F1 | 	add	objptr, ##41808
11f7c     32 93 02 FB | 	rdlong	arg01, objptr
11f80     01 92 06 F1 | 	add	arg01, #1
11f84     32 93 62 FC | 	wrlong	arg01, objptr
11f88     51 00 00 FF 
11f8c     50 65 86 F1 | 	sub	objptr, ##41808
11f90     14 B7 BF FD | 	call	#_pop
11f94     E7 7A 62 FC | 	wrlong	result1, fp
11f98     04 CE 05 F1 | 	add	fp, #4
11f9c     E7 7C 62 FC | 	wrlong	result2, fp
11fa0     04 CE 05 F1 | 	add	fp, #4
11fa4     E7 7E 62 FC | 	wrlong	result3, fp
11fa8     08 CE 85 F1 | 	sub	fp, #8
11fac     51 00 00 FF 
11fb0     50 65 06 F1 | 	add	objptr, ##41808
11fb4     32 93 02 FB | 	rdlong	arg01, objptr
11fb8     49 A7 02 F6 | 	mov	local01, arg01
11fbc     02 A6 66 F0 | 	shl	local01, #2
11fc0     49 A7 02 F1 | 	add	local01, arg01
11fc4     02 A6 66 F0 | 	shl	local01, #2
11fc8     06 00 00 FF 
11fcc     98 64 86 F1 | 	sub	objptr, ##3224
11fd0     32 A7 02 F1 | 	add	local01, objptr
11fd4     E7 92 02 FB | 	rdlong	arg01, fp
11fd8     08 A6 06 F1 | 	add	local01, #8
11fdc     53 93 62 FC | 	wrlong	arg01, local01
11fe0     4B 00 00 FF 
11fe4     B8 64 86 F1 | 	sub	objptr, ##38584
11fe8     BC B6 BF FD | 	call	#_pop
11fec     E7 7A 62 FC | 	wrlong	result1, fp
11ff0     04 CE 05 F1 | 	add	fp, #4
11ff4     E7 7C 62 FC | 	wrlong	result2, fp
11ff8     04 CE 05 F1 | 	add	fp, #4
11ffc     E7 7E 62 FC | 	wrlong	result3, fp
12000     08 CE 85 F1 | 	sub	fp, #8
12004     51 00 00 FF 
12008     50 65 06 F1 | 	add	objptr, ##41808
1200c     32 93 02 FB | 	rdlong	arg01, objptr
12010     49 A7 02 F6 | 	mov	local01, arg01
12014     02 A6 66 F0 | 	shl	local01, #2
12018     49 A7 02 F1 | 	add	local01, arg01
1201c     02 A6 66 F0 | 	shl	local01, #2
12020     06 00 00 FF 
12024     98 64 86 F1 | 	sub	objptr, ##3224
12028     32 A7 02 F1 | 	add	local01, objptr
1202c     E7 92 02 F6 | 	mov	arg01, fp
12030     4B 00 00 FF 
12034     B8 64 86 F1 | 	sub	objptr, ##38584
12038     48 B8 BF FD | 	call	#_converttoint
1203c     3D 93 02 F6 | 	mov	arg01, result1
12040     0C A6 06 F1 | 	add	local01, #12
12044     53 93 62 FC | 	wrlong	arg01, local01
12048     5C B6 BF FD | 	call	#_pop
1204c     E7 7A 62 FC | 	wrlong	result1, fp
12050     04 CE 05 F1 | 	add	fp, #4
12054     E7 7C 62 FC | 	wrlong	result2, fp
12058     04 CE 05 F1 | 	add	fp, #4
1205c     E7 7E 62 FC | 	wrlong	result3, fp
12060     08 CE 85 F1 | 	sub	fp, #8
12064     51 00 00 FF 
12068     50 65 06 F1 | 	add	objptr, ##41808
1206c     32 93 02 FB | 	rdlong	arg01, objptr
12070     49 A7 02 F6 | 	mov	local01, arg01
12074     02 A6 66 F0 | 	shl	local01, #2
12078     49 A7 02 F1 | 	add	local01, arg01
1207c     02 A6 66 F0 | 	shl	local01, #2
12080     06 00 00 FF 
12084     98 64 86 F1 | 	sub	objptr, ##3224
12088     32 A7 02 F1 | 	add	local01, objptr
1208c     E7 92 02 F6 | 	mov	arg01, fp
12090     4B 00 00 FF 
12094     B8 64 86 F1 | 	sub	objptr, ##38584
12098     E8 B7 BF FD | 	call	#_converttoint
1209c     10 A6 06 F1 | 	add	local01, #16
120a0     53 7B 62 FC | 	wrlong	result1, local01
120a4                 | ' fortop+=1
120a4                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
120a4                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
120a4                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
120a4                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
120a4     4B 00 00 FF 
120a8     A0 64 06 F1 | 	add	objptr, ##38560
120ac     32 93 02 FB | 	rdlong	arg01, objptr
120b0     49 A7 02 F6 | 	mov	local01, arg01
120b4     01 A6 66 F0 | 	shl	local01, #1
120b8     49 A7 02 F1 | 	add	local01, arg01
120bc     02 A6 66 F0 | 	shl	local01, #2
120c0     03 00 00 FF 
120c4     04 64 86 F1 | 	sub	objptr, ##1540
120c8     32 A7 02 F1 | 	add	local01, objptr
120cc     08 A6 06 F1 | 	add	local01, #8
120d0     53 A7 02 FB | 	rdlong	local01, local01
120d4     FE A7 0E F2 | 	cmp	local01, #510 wz
120d8     48 00 00 FF 
120dc     9C 64 86 F1 | 	sub	objptr, ##37020
120e0     70 00 90 5D |  if_ne	jmp	#LR__1520
120e4     51 00 00 FF 
120e8     50 65 06 F1 | 	add	objptr, ##41808
120ec     32 93 02 FB | 	rdlong	arg01, objptr
120f0     49 A7 02 F6 | 	mov	local01, arg01
120f4     02 A6 66 F0 | 	shl	local01, #2
120f8     49 A7 02 F1 | 	add	local01, arg01
120fc     02 A6 66 F0 | 	shl	local01, #2
12100     06 00 00 FF 
12104     98 64 86 F1 | 	sub	objptr, ##3224
12108     32 A7 02 F1 | 	add	local01, objptr
1210c     06 00 00 FF 
12110     20 64 06 F1 | 	add	objptr, ##3104
12114     32 93 02 FB | 	rdlong	arg01, objptr
12118     53 93 62 FC | 	wrlong	arg01, local01
1211c     78 64 06 F1 | 	add	objptr, #120
12120     32 93 02 FB | 	rdlong	arg01, objptr
12124     49 A7 02 F6 | 	mov	local01, arg01
12128     02 A6 66 F0 | 	shl	local01, #2
1212c     49 A7 02 F1 | 	add	local01, arg01
12130     02 A6 66 F0 | 	shl	local01, #2
12134     06 00 00 FF 
12138     98 64 86 F1 | 	sub	objptr, ##3224
1213c     32 A7 02 F1 | 	add	local01, objptr
12140     04 A6 06 F1 | 	add	local01, #4
12144     53 01 68 FC | 	wrlong	#0, local01
12148     4B 00 00 FF 
1214c     B8 64 86 F1 | 	sub	objptr, ##38584
12150     78 00 90 FD | 	jmp	#LR__1521
12154                 | LR__1520
12154     51 00 00 FF 
12158     50 65 06 F1 | 	add	objptr, ##41808
1215c     32 93 02 FB | 	rdlong	arg01, objptr
12160     49 A7 02 F6 | 	mov	local01, arg01
12164     02 A6 66 F0 | 	shl	local01, #2
12168     49 A7 02 F1 | 	add	local01, arg01
1216c     02 A6 66 F0 | 	shl	local01, #2
12170     06 00 00 FF 
12174     98 64 86 F1 | 	sub	objptr, ##3224
12178     32 A7 02 F1 | 	add	local01, objptr
1217c     06 00 00 FF 
12180     28 64 06 F1 | 	add	objptr, ##3112
12184     32 93 02 FB | 	rdlong	arg01, objptr
12188     53 93 62 FC | 	wrlong	arg01, local01
1218c     70 64 06 F1 | 	add	objptr, #112
12190     32 93 02 FB | 	rdlong	arg01, objptr
12194     49 A7 02 F6 | 	mov	local01, arg01
12198     02 A6 66 F0 | 	shl	local01, #2
1219c     49 A7 02 F1 | 	add	local01, arg01
121a0     02 A6 66 F0 | 	shl	local01, #2
121a4     06 00 00 FF 
121a8     98 64 86 F1 | 	sub	objptr, ##3224
121ac     32 A7 02 F1 | 	add	local01, objptr
121b0     18 64 86 F1 | 	sub	objptr, #24
121b4     32 93 02 FB | 	rdlong	arg01, objptr
121b8     4B 00 00 FF 
121bc     A0 64 86 F1 | 	sub	objptr, ##38560
121c0     01 92 06 F1 | 	add	arg01, #1
121c4     04 A6 06 F1 | 	add	local01, #4
121c8     53 93 62 FC | 	wrlong	arg01, local01
121cc                 | LR__1521
121cc     E7 F0 03 F6 | 	mov	ptra, fp
121d0     F2 00 A0 FD | 	call	#popregs_
121d4                 | _do_for_ret
121d4     2D 00 64 FD | 	ret
121d8                 | 
121d8                 | ' 
121d8                 | ' '-------------------- frame
121d8                 | ' 
121d8                 | ' sub do_frame
121d8                 | _do_frame
121d8     03 CA 05 F6 | 	mov	COUNT_, #3
121dc     E8 00 A0 FD | 	call	#pushregs_
121e0     30 F0 07 F1 | 	add	ptra, #48
121e4     C0 B4 BF FD | 	call	#_pop
121e8     3D 97 02 F6 | 	mov	arg03, result1
121ec     3E 95 02 F6 | 	mov	arg02, result2
121f0     3F 9B 02 F6 | 	mov	arg05, result3
121f4     24 CE 05 F1 | 	add	fp, #36
121f8     E7 96 62 FC | 	wrlong	arg03, fp
121fc     04 CE 05 F1 | 	add	fp, #4
12200     E7 94 62 FC | 	wrlong	arg02, fp
12204     04 CE 05 F1 | 	add	fp, #4
12208     E7 9A 62 FC | 	wrlong	arg05, fp
1220c     2C CE 85 F1 | 	sub	fp, #44
12210     94 B4 BF FD | 	call	#_pop
12214     3D 97 02 F6 | 	mov	arg03, result1
12218     3E 95 02 F6 | 	mov	arg02, result2
1221c     3F 9B 02 F6 | 	mov	arg05, result3
12220     18 CE 05 F1 | 	add	fp, #24
12224     E7 96 62 FC | 	wrlong	arg03, fp
12228     04 CE 05 F1 | 	add	fp, #4
1222c     E7 94 62 FC | 	wrlong	arg02, fp
12230     04 CE 05 F1 | 	add	fp, #4
12234     E7 9A 62 FC | 	wrlong	arg05, fp
12238     20 CE 85 F1 | 	sub	fp, #32
1223c     68 B4 BF FD | 	call	#_pop
12240     3D 97 02 F6 | 	mov	arg03, result1
12244     3E 95 02 F6 | 	mov	arg02, result2
12248     3F 9B 02 F6 | 	mov	arg05, result3
1224c     0C CE 05 F1 | 	add	fp, #12
12250     E7 96 62 FC | 	wrlong	arg03, fp
12254     04 CE 05 F1 | 	add	fp, #4
12258     E7 94 62 FC | 	wrlong	arg02, fp
1225c     04 CE 05 F1 | 	add	fp, #4
12260     E7 9A 62 FC | 	wrlong	arg05, fp
12264     14 CE 85 F1 | 	sub	fp, #20
12268     3C B4 BF FD | 	call	#_pop
1226c     3F 97 02 F6 | 	mov	arg03, result3
12270     E7 7A 62 FC | 	wrlong	result1, fp
12274     04 CE 05 F1 | 	add	fp, #4
12278     E7 7C 62 FC | 	wrlong	result2, fp
1227c     04 CE 05 F1 | 	add	fp, #4
12280     E7 96 62 FC | 	wrlong	arg03, fp
12284     08 CE 85 F1 | 	sub	fp, #8
12288     E7 92 02 F6 | 	mov	arg01, fp
1228c     F4 B5 BF FD | 	call	#_converttoint
12290     3D A7 02 F6 | 	mov	local01, result1
12294     E7 92 02 F6 | 	mov	arg01, fp
12298     0C 92 06 F1 | 	add	arg01, #12
1229c     E4 B5 BF FD | 	call	#_converttoint
122a0     3D A9 02 F6 | 	mov	local02, result1
122a4     E7 92 02 F6 | 	mov	arg01, fp
122a8     18 92 06 F1 | 	add	arg01, #24
122ac     D4 B5 BF FD | 	call	#_converttoint
122b0     3D AB 02 F6 | 	mov	local03, result1
122b4     E7 92 02 F6 | 	mov	arg01, fp
122b8     24 92 06 F1 | 	add	arg01, #36
122bc     C4 B5 BF FD | 	call	#_converttoint
122c0     3D 99 02 F6 | 	mov	arg04, result1
122c4     38 00 00 FF 
122c8     48 64 06 F1 | 	add	objptr, ##28744
122cc     32 9B 02 FB | 	rdlong	arg05, objptr
122d0     38 00 00 FF 
122d4     48 64 86 F1 | 	sub	objptr, ##28744
122d8     53 93 02 F6 | 	mov	arg01, local01
122dc     54 95 02 F6 | 	mov	arg02, local02
122e0     55 97 02 F6 | 	mov	arg03, local03
122e4     64 07 B1 FD | 	call	#_hg010b_spin2_frame
122e8     E7 F0 03 F6 | 	mov	ptra, fp
122ec     F2 00 A0 FD | 	call	#popregs_
122f0                 | _do_frame_ret
122f0     2D 00 64 FD | 	ret
122f4                 | 
122f4                 | ' 
122f4                 | ' '-------------------- framebuf
122f4                 | ' 
122f4                 | ' sub do_framebuf
122f4                 | _do_framebuf
122f4     00 CA 05 F6 | 	mov	COUNT_, #0
122f8     E8 00 A0 FD | 	call	#pushregs_
122fc     0C F0 07 F1 | 	add	ptra, #12
12300     08 CE 05 F1 | 	add	fp, #8
12304     E7 3A 68 FC | 	wrlong	#29, fp
12308     32 93 02 FB | 	rdlong	arg01, objptr
1230c     08 CE 85 F1 | 	sub	fp, #8
12310     E7 92 62 FC | 	wrlong	arg01, fp
12314     E7 92 02 F6 | 	mov	arg01, fp
12318     1C B4 BF FD | 	call	#_push
1231c     E7 F0 03 F6 | 	mov	ptra, fp
12320     F2 00 A0 FD | 	call	#popregs_
12324                 | _do_framebuf_ret
12324     2D 00 64 FD | 	ret
12328                 | 
12328                 | ' '-------------------- fre
12328                 | ' 
12328                 | ' sub do_fre
12328                 | _do_fre
12328     01 CA 05 F6 | 	mov	COUNT_, #1
1232c     E8 00 A0 FD | 	call	#pushregs_
12330     0C F0 07 F1 | 	add	ptra, #12
12334     53 00 00 FF 
12338     F0 64 06 F1 | 	add	objptr, ##42736
1233c     32 93 02 FB | 	rdlong	arg01, objptr
12340     0F 00 00 FF 
12344     74 64 86 F1 | 	sub	objptr, ##7796
12348     32 A7 02 FB | 	rdlong	local01, objptr
1234c     53 93 82 F1 | 	sub	arg01, local01
12350     0F 00 00 FF 
12354     EC 64 06 F1 | 	add	objptr, ##7916
12358     32 93 62 FC | 	wrlong	arg01, objptr
1235c     08 CE 05 F1 | 	add	fp, #8
12360     E7 3A 68 FC | 	wrlong	#29, fp
12364     08 CE 85 F1 | 	sub	fp, #8
12368     32 A7 02 FB | 	rdlong	local01, objptr
1236c     53 00 00 FF 
12370     68 65 86 F1 | 	sub	objptr, ##42856
12374     E7 A6 62 FC | 	wrlong	local01, fp
12378     E7 92 02 F6 | 	mov	arg01, fp
1237c     B8 B3 BF FD | 	call	#_push
12380     E7 F0 03 F6 | 	mov	ptra, fp
12384     F2 00 A0 FD | 	call	#popregs_
12388                 | _do_fre_ret
12388     2D 00 64 FD | 	ret
1238c                 | 
1238c                 | ' 
1238c                 | ' '-------------------- get
1238c                 | ' 
1238c                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
1238c                 | _do_get
1238c     10 CA 05 F6 | 	mov	COUNT_, #16
12390     E8 00 A0 FD | 	call	#pushregs_
12394     40 F0 07 F1 | 	add	ptra, #64
12398     4B 00 00 FF 
1239c     A0 64 06 F1 | 	add	objptr, ##38560
123a0     32 9B 02 FB | 	rdlong	arg05, objptr
123a4     4D A7 02 F6 | 	mov	local01, arg05
123a8     01 A6 66 F0 | 	shl	local01, #1
123ac     4D A7 02 F1 | 	add	local01, arg05
123b0     02 A6 66 F0 | 	shl	local01, #2
123b4     03 00 00 FF 
123b8     04 64 86 F1 | 	sub	objptr, ##1540
123bc     32 A9 02 F6 | 	mov	local02, objptr
123c0     32 A7 02 F1 | 	add	local01, objptr
123c4     53 AB 02 FB | 	rdlong	local03, local01
123c8                 | ' 
123c8                 | ' numpar=compiledline(lineptr_e).result.uresult
123c8                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
123c8     04 AA 0E F2 | 	cmp	local03, #4 wz
123cc     48 00 00 FF 
123d0     9C 64 86 F1 | 	sub	objptr, ##37020
123d4     48 00 90 5D |  if_ne	jmp	#LR__1530
123d8     CC B2 BF FD | 	call	#_pop
123dc     3F 9B 02 F6 | 	mov	arg05, result3
123e0     1C CE 05 F1 | 	add	fp, #28
123e4     E7 7A 62 FC | 	wrlong	result1, fp
123e8     04 CE 05 F1 | 	add	fp, #4
123ec     E7 7C 62 FC | 	wrlong	result2, fp
123f0     04 CE 05 F1 | 	add	fp, #4
123f4     E7 9A 62 FC | 	wrlong	arg05, fp
123f8     08 CE 85 F1 | 	sub	fp, #8
123fc     E7 92 02 F6 | 	mov	arg01, fp
12400     1C CE 85 F1 | 	sub	fp, #28
12404     7C B4 BF FD | 	call	#_converttoint
12408     53 00 00 FF 
1240c     64 65 06 F1 | 	add	objptr, ##42852
12410     32 7B 62 FC | 	wrlong	result1, objptr
12414     53 00 00 FF 
12418     64 65 86 F1 | 	sub	objptr, ##42852
1241c     18 00 90 FD | 	jmp	#LR__1531
12420                 | LR__1530
12420     53 00 00 FF 
12424     64 65 06 F1 | 	add	objptr, ##42852
12428     FF FF FF FF 
1242c     32 FF 6B FC | 	wrlong	##-1, objptr
12430     53 00 00 FF 
12434     64 65 86 F1 | 	sub	objptr, ##42852
12438                 | LR__1531
12438                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
12438     03 AA 56 F2 | 	cmps	local03, #3 wc
1243c     38 00 90 CD |  if_b	jmp	#LR__1532
12440     64 B2 BF FD | 	call	#_pop
12444     3F A7 02 F6 | 	mov	local01, result3
12448     1C CE 05 F1 | 	add	fp, #28
1244c     E7 7A 62 FC | 	wrlong	result1, fp
12450     04 CE 05 F1 | 	add	fp, #4
12454     E7 7C 62 FC | 	wrlong	result2, fp
12458     04 CE 05 F1 | 	add	fp, #4
1245c     E7 A6 62 FC | 	wrlong	local01, fp
12460     08 CE 85 F1 | 	sub	fp, #8
12464     E7 92 02 F6 | 	mov	arg01, fp
12468     1C CE 85 F1 | 	sub	fp, #28
1246c     14 B4 BF FD | 	call	#_converttoint
12470     3D AD 02 F6 | 	mov	local04, result1
12474     04 00 90 FD | 	jmp	#LR__1533
12478                 | LR__1532
12478     01 AC 06 F6 | 	mov	local04, #1
1247c                 | LR__1533
1247c                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
1247c     02 AA 56 F2 | 	cmps	local03, #2 wc
12480     34 00 90 CD |  if_b	jmp	#LR__1534
12484     20 B2 BF FD | 	call	#_pop
12488     3F A9 02 F6 | 	mov	local02, result3
1248c     1C CE 05 F1 | 	add	fp, #28
12490     E7 7A 62 FC | 	wrlong	result1, fp
12494     04 CE 05 F1 | 	add	fp, #4
12498     E7 7C 62 FC | 	wrlong	result2, fp
1249c     04 CE 05 F1 | 	add	fp, #4
124a0     E7 A8 62 FC | 	wrlong	local02, fp
124a4     08 CE 85 F1 | 	sub	fp, #8
124a8     E7 92 02 F6 | 	mov	arg01, fp
124ac     1C CE 85 F1 | 	sub	fp, #28
124b0     D0 B3 BF FD | 	call	#_converttoint
124b4     3D AF 02 F6 | 	mov	local05, result1
124b8                 | LR__1534
124b8     EC B1 BF FD | 	call	#_pop
124bc     3F 9B 02 F6 | 	mov	arg05, result3
124c0     1C CE 05 F1 | 	add	fp, #28
124c4     E7 7A 62 FC | 	wrlong	result1, fp
124c8     04 CE 05 F1 | 	add	fp, #4
124cc     E7 7C 62 FC | 	wrlong	result2, fp
124d0     04 CE 05 F1 | 	add	fp, #4
124d4     E7 9A 62 FC | 	wrlong	arg05, fp
124d8     08 CE 85 F1 | 	sub	fp, #8
124dc     E7 92 02 F6 | 	mov	arg01, fp
124e0     1C CE 85 F1 | 	sub	fp, #28
124e4     9C B3 BF FD | 	call	#_converttoint
124e8     3D B1 02 F6 | 	mov	local06, result1
124ec     02 B2 66 F0 | 	shl	local07, #2
124f0     51 00 00 FF 
124f4     E4 64 06 F1 | 	add	objptr, ##41700
124f8     32 B3 02 F1 | 	add	local07, objptr
124fc     59 01 68 FC | 	wrlong	#0, local07
12500                 | ' t1=pop() : channel=converttoint(t1)
12500                 | ' getres(j)=0
12500                 | ' if pos>=0 then
12500     02 00 00 FF 
12504     80 64 06 F1 | 	add	objptr, ##1152
12508     32 B5 02 FB | 	rdlong	local08, objptr
1250c     53 00 00 FF 
12510     64 65 86 F1 | 	sub	objptr, ##42852
12514     00 B4 56 F2 | 	cmps	local08, #0 wc
12518     28 01 90 CD |  if_b	jmp	#LR__1541
1251c                 | '   for i=0 to  amount/1024
1251c     00 B6 06 F6 | 	mov	local09, #0
12520     56 B9 52 F6 | 	abs	local10, local04 wc
12524     0A B8 46 F0 | 	shr	local10, #10
12528     5C B9 82 F6 | 	negc	local10, local10
1252c     01 B8 06 F1 | 	add	local10, #1
12530                 | LR__1535
12530     5C B7 52 F2 | 	cmps	local09, local10 wc
12534     20 02 90 3D |  if_ae	jmp	#LR__1549
12538                 | '     get #channel,pos+1,block(0),amount,r
12538     53 00 00 FF 
1253c     64 65 06 F1 | 	add	objptr, ##42852
12540     32 95 02 FB | 	rdlong	arg02, objptr
12544     01 94 06 F1 | 	add	arg02, #1
12548     04 00 00 FF 
1254c     90 64 86 F1 | 	sub	objptr, ##2192
12550     32 97 02 F6 | 	mov	arg03, objptr
12554     4F 00 00 FF 
12558     D4 64 86 F1 | 	sub	objptr, ##40660
1255c     56 99 02 F6 | 	mov	arg04, local04
12560     58 93 02 F6 | 	mov	arg01, local06
12564     01 9A 06 F6 | 	mov	arg05, #1
12568     EC 32 B1 FD | 	call	#__system___basic_get
1256c     3D BB 02 F6 | 	mov	local11, result1
12570                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12570     00 04 00 FF 
12574     00 AE 56 F2 | 	cmps	local05, ##524288 wc
12578     48 00 90 3D |  if_ae	jmp	#LR__1537
1257c     00 B2 06 F6 | 	mov	local07, #0
12580     5D BD 02 F6 | 	mov	local12, local11
12584                 | LR__1536
12584     5E B3 52 F2 | 	cmps	local07, local12 wc
12588     80 00 90 3D |  if_ae	jmp	#LR__1540
1258c     57 93 02 F6 | 	mov	arg01, local05
12590     5B B5 02 F6 | 	mov	local08, local09
12594     0A B4 66 F0 | 	shl	local08, #10
12598     5A 93 02 F1 | 	add	arg01, local08
1259c     59 93 02 F1 | 	add	arg01, local07
125a0     59 A9 02 F6 | 	mov	local02, local07
125a4     32 B5 02 F6 | 	mov	local08, objptr
125a8     4F 00 00 FF 
125ac     D4 B4 06 F1 | 	add	local08, ##40660
125b0     5A A9 02 F1 | 	add	local02, local08
125b4     54 95 C2 FA | 	rdbyte	arg02, local02
125b8     49 95 42 FC | 	wrbyte	arg02, arg01
125bc     01 B2 06 F1 | 	add	local07, #1
125c0     C0 FF 9F FD | 	jmp	#LR__1536
125c4                 | LR__1537
125c4     00 B2 06 F6 | 	mov	local07, #0
125c8     5D BF 02 F6 | 	mov	local13, local11
125cc                 | LR__1538
125cc     5F B3 52 F2 | 	cmps	local07, local13 wc
125d0     38 00 90 3D |  if_ae	jmp	#LR__1539
125d4     57 93 02 F6 | 	mov	arg01, local05
125d8     5B BD 02 F6 | 	mov	local12, local09
125dc     0A BC 66 F0 | 	shl	local12, #10
125e0     5E 93 02 F1 | 	add	arg01, local12
125e4     59 93 02 F1 | 	add	arg01, local07
125e8     59 A9 02 F6 | 	mov	local02, local07
125ec     32 BD 02 F6 | 	mov	local12, objptr
125f0     4F 00 00 FF 
125f4     D4 BC 06 F1 | 	add	local12, ##40660
125f8     5E A9 02 F1 | 	add	local02, local12
125fc     54 95 C2 FA | 	rdbyte	arg02, local02
12600     88 EC B0 FD | 	call	#_pspoke
12604     01 B2 06 F1 | 	add	local07, #1
12608     C0 FF 9F FD | 	jmp	#LR__1538
1260c                 | LR__1539
1260c                 | LR__1540
1260c     59 BF 02 F6 | 	mov	local13, local07
12610     02 BE 66 F0 | 	shl	local13, #2
12614     51 00 00 FF 
12618     E4 64 06 F1 | 	add	objptr, ##41700
1261c     32 BF 02 F1 | 	add	local13, objptr
12620     02 B2 66 F0 | 	shl	local07, #2
12624     32 B3 02 F1 | 	add	local07, objptr
12628     59 A7 02 FB | 	rdlong	local01, local07
1262c     5D A7 02 F1 | 	add	local01, local11
12630     5F A7 62 FC | 	wrlong	local01, local13
12634     01 B6 06 F1 | 	add	local09, #1
12638     51 00 00 FF 
1263c     E4 64 86 F1 | 	sub	objptr, ##41700
12640     EC FE 9F FD | 	jmp	#LR__1535
12644                 | LR__1541
12644                 | '   for i=0 to  amount/1024
12644     00 B6 06 F6 | 	mov	local09, #0
12648     56 C1 52 F6 | 	abs	local14, local04 wc
1264c     0A C0 46 F0 | 	shr	local14, #10
12650     60 C1 82 F6 | 	negc	local14, local14
12654     01 C0 06 F1 | 	add	local14, #1
12658                 | LR__1542
12658     60 B7 52 F2 | 	cmps	local09, local14 wc
1265c     F8 00 90 3D |  if_ae	jmp	#LR__1548
12660                 | '     get #channel,,block(0),amount,r
12660     32 97 02 F6 | 	mov	arg03, objptr
12664     4F 00 00 FF 
12668     D4 96 06 F1 | 	add	arg03, ##40660
1266c     56 99 02 F6 | 	mov	arg04, local04
12670     58 93 02 F6 | 	mov	arg01, local06
12674     00 94 06 F6 | 	mov	arg02, #0
12678     01 9A 06 F6 | 	mov	arg05, #1
1267c     D8 31 B1 FD | 	call	#__system___basic_get
12680     3D BB 02 F6 | 	mov	local11, result1
12684                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12684     00 04 00 FF 
12688     00 AE 56 F2 | 	cmps	local05, ##524288 wc
1268c     48 00 90 3D |  if_ae	jmp	#LR__1544
12690     00 B2 06 F6 | 	mov	local07, #0
12694     5D C3 02 F6 | 	mov	local15, local11
12698                 | LR__1543
12698     61 B3 52 F2 | 	cmps	local07, local15 wc
1269c     80 00 90 3D |  if_ae	jmp	#LR__1547
126a0     57 93 02 F6 | 	mov	arg01, local05
126a4     5B BF 02 F6 | 	mov	local13, local09
126a8     0A BE 66 F0 | 	shl	local13, #10
126ac     5F 93 02 F1 | 	add	arg01, local13
126b0     59 93 02 F1 | 	add	arg01, local07
126b4     59 A9 02 F6 | 	mov	local02, local07
126b8     32 BF 02 F6 | 	mov	local13, objptr
126bc     4F 00 00 FF 
126c0     D4 BE 06 F1 | 	add	local13, ##40660
126c4     5F A9 02 F1 | 	add	local02, local13
126c8     54 95 C2 FA | 	rdbyte	arg02, local02
126cc     49 95 42 FC | 	wrbyte	arg02, arg01
126d0     01 B2 06 F1 | 	add	local07, #1
126d4     C0 FF 9F FD | 	jmp	#LR__1543
126d8                 | LR__1544
126d8     00 B2 06 F6 | 	mov	local07, #0
126dc     5D C5 02 F6 | 	mov	local16, local11
126e0                 | LR__1545
126e0     62 B3 52 F2 | 	cmps	local07, local16 wc
126e4     38 00 90 3D |  if_ae	jmp	#LR__1546
126e8     57 93 02 F6 | 	mov	arg01, local05
126ec     5B C3 02 F6 | 	mov	local15, local09
126f0     0A C2 66 F0 | 	shl	local15, #10
126f4     61 93 02 F1 | 	add	arg01, local15
126f8     59 93 02 F1 | 	add	arg01, local07
126fc     59 A9 02 F6 | 	mov	local02, local07
12700     32 C3 02 F6 | 	mov	local15, objptr
12704     4F 00 00 FF 
12708     D4 C2 06 F1 | 	add	local15, ##40660
1270c     61 A9 02 F1 | 	add	local02, local15
12710     54 95 C2 FA | 	rdbyte	arg02, local02
12714     74 EB B0 FD | 	call	#_pspoke
12718     01 B2 06 F1 | 	add	local07, #1
1271c     C0 FF 9F FD | 	jmp	#LR__1545
12720                 | LR__1546
12720                 | LR__1547
12720     59 C5 02 F6 | 	mov	local16, local07
12724     02 C4 66 F0 | 	shl	local16, #2
12728     51 00 00 FF 
1272c     E4 64 06 F1 | 	add	objptr, ##41700
12730     32 C5 02 F1 | 	add	local16, objptr
12734     02 B2 66 F0 | 	shl	local07, #2
12738     32 B3 02 F1 | 	add	local07, objptr
1273c     59 A7 02 FB | 	rdlong	local01, local07
12740     5D A7 02 F1 | 	add	local01, local11
12744     62 A7 62 FC | 	wrlong	local01, local16
12748     01 B6 06 F1 | 	add	local09, #1
1274c     51 00 00 FF 
12750     E4 64 86 F1 | 	sub	objptr, ##41700
12754     00 FF 9F FD | 	jmp	#LR__1542
12758                 | LR__1548
12758                 | LR__1549
12758     E7 F0 03 F6 | 	mov	ptra, fp
1275c     F2 00 A0 FD | 	call	#popregs_
12760                 | _do_get_ret
12760     2D 00 64 FD | 	ret
12764                 | 
12764                 | ' 
12764                 | ' '-------------------- getcolor
12764                 | ' 
12764                 | ' sub do_getcolor
12764                 | _do_getcolor
12764     00 CA 05 F6 | 	mov	COUNT_, #0
12768     E8 00 A0 FD | 	call	#pushregs_
1276c     10 F0 07 F1 | 	add	ptra, #16
12770     4B 00 00 FF 
12774     A0 64 06 F1 | 	add	objptr, ##38560
12778     32 97 02 FB | 	rdlong	arg03, objptr
1277c     4B 95 02 F6 | 	mov	arg02, arg03
12780     01 94 66 F0 | 	shl	arg02, #1
12784     4B 95 02 F1 | 	add	arg02, arg03
12788     02 94 66 F0 | 	shl	arg02, #2
1278c     03 00 00 FF 
12790     04 64 86 F1 | 	sub	objptr, ##1540
12794     32 95 02 F1 | 	add	arg02, objptr
12798     4A 97 02 FB | 	rdlong	arg03, arg02
1279c                 | ' 
1279c                 | ' numpar=compiledline(lineptr_e).result.uresult
1279c                 | ' if numpar>1 orelse numpar=0 then print "getcolor "; : printerror(39) : return
1279c     02 96 16 F2 | 	cmp	arg03, #2 wc
127a0     48 00 00 FF 
127a4     9C 64 86 F1 | 	sub	objptr, ##37020
127a8     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
127ac     40 00 90 4D |  if_c_and_nz	jmp	#LR__1550
127b0     00 92 06 F6 | 	mov	arg01, #0
127b4     A8 77 B1 FD | 	call	#__system___getiolock_0622
127b8     3D 93 02 F6 | 	mov	arg01, result1
127bc     1C 22 B1 FD | 	call	#__system___lockmem
127c0     97 01 00 FF 
127c4     48 95 06 F6 | 	mov	arg02, ##@LR__6016
127c8     00 92 06 F6 | 	mov	arg01, #0
127cc     00 96 06 F6 | 	mov	arg03, #0
127d0     FC 2E B1 FD | 	call	#__system___basic_print_string
127d4     00 92 06 F6 | 	mov	arg01, #0
127d8     84 77 B1 FD | 	call	#__system___getiolock_0622
127dc     3D 01 68 FC | 	wrlong	#0, result1
127e0     27 92 06 F6 | 	mov	arg01, #39
127e4     00 94 06 F6 | 	mov	arg02, #0
127e8     74 E8 B0 FD | 	call	#_printerror
127ec     60 00 90 FD | 	jmp	#LR__1551
127f0                 | LR__1550
127f0     B4 AE BF FD | 	call	#_pop
127f4     E7 7A 62 FC | 	wrlong	result1, fp
127f8     04 CE 05 F1 | 	add	fp, #4
127fc     E7 7C 62 FC | 	wrlong	result2, fp
12800     04 CE 05 F1 | 	add	fp, #4
12804     E7 7E 62 FC | 	wrlong	result3, fp
12808     08 CE 85 F1 | 	sub	fp, #8
1280c     E7 92 02 F6 | 	mov	arg01, fp
12810     70 B0 BF FD | 	call	#_converttoint
12814     3D 93 02 F6 | 	mov	arg01, result1
12818                 | ' 
12818                 | ' return long[palette_ptr+4*color]
12818     1C 64 06 F1 | 	add	objptr, #28
1281c     32 7B 02 FB | 	rdlong	result1, objptr
12820     1C 64 86 F1 | 	sub	objptr, #28
12824     02 92 66 F0 | 	shl	arg01, #2
12828     49 7B 02 F1 | 	add	result1, arg01
1282c     3D 7B 02 FB | 	rdlong	result1, result1
12830     08 7A C6 F0 | 	sar	result1, #8
12834     F8 7A 06 F4 | 	bitl	result1, #248
12838     E7 7A 62 FC | 	wrlong	result1, fp
1283c     08 CE 05 F1 | 	add	fp, #8
12840     E7 3A 68 FC | 	wrlong	#29, fp
12844     08 CE 85 F1 | 	sub	fp, #8
12848     E7 92 02 F6 | 	mov	arg01, fp
1284c     E8 AE BF FD | 	call	#_push
12850                 | LR__1551
12850     E7 F0 03 F6 | 	mov	ptra, fp
12854     F2 00 A0 FD | 	call	#popregs_
12858                 | _do_getcolor_ret
12858     2D 00 64 FD | 	ret
1285c                 | 
1285c                 | ' 
1285c                 | ' '-------------------- getenvsustain
1285c                 | ' 
1285c                 | ' sub do_getenvsustain
1285c                 | _do_getenvsustain
1285c     00 CA 05 F6 | 	mov	COUNT_, #0
12860     E8 00 A0 FD | 	call	#pushregs_
12864     10 F0 07 F1 | 	add	ptra, #16
12868     4B 00 00 FF 
1286c     A0 64 06 F1 | 	add	objptr, ##38560
12870     32 97 02 FB | 	rdlong	arg03, objptr
12874     4B 95 02 F6 | 	mov	arg02, arg03
12878     01 94 66 F0 | 	shl	arg02, #1
1287c     4B 95 02 F1 | 	add	arg02, arg03
12880     02 94 66 F0 | 	shl	arg02, #2
12884     03 00 00 FF 
12888     04 64 86 F1 | 	sub	objptr, ##1540
1288c     32 95 02 F1 | 	add	arg02, objptr
12890     4A 97 02 FB | 	rdlong	arg03, arg02
12894                 | ' 
12894                 | ' numpar=compiledline(lineptr_e).result.uresult
12894                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12894     02 96 16 F2 | 	cmp	arg03, #2 wc
12898     48 00 00 FF 
1289c     9C 64 86 F1 | 	sub	objptr, ##37020
128a0     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
128a4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1560
128a8     00 92 06 F6 | 	mov	arg01, #0
128ac     B0 76 B1 FD | 	call	#__system___getiolock_0622
128b0     3D 93 02 F6 | 	mov	arg01, result1
128b4     24 21 B1 FD | 	call	#__system___lockmem
128b8     97 01 00 FF 
128bc     52 95 06 F6 | 	mov	arg02, ##@LR__6017
128c0     00 92 06 F6 | 	mov	arg01, #0
128c4     00 96 06 F6 | 	mov	arg03, #0
128c8     04 2E B1 FD | 	call	#__system___basic_print_string
128cc     00 92 06 F6 | 	mov	arg01, #0
128d0     8C 76 B1 FD | 	call	#__system___getiolock_0622
128d4     3D 01 68 FC | 	wrlong	#0, result1
128d8     27 92 06 F6 | 	mov	arg01, #39
128dc     00 94 06 F6 | 	mov	arg02, #0
128e0     7C E7 B0 FD | 	call	#_printerror
128e4     60 00 90 FD | 	jmp	#LR__1561
128e8                 | LR__1560
128e8     BC AD BF FD | 	call	#_pop
128ec     3D 97 02 F6 | 	mov	arg03, result1
128f0     3E 95 02 F6 | 	mov	arg02, result2
128f4     E7 96 62 FC | 	wrlong	arg03, fp
128f8     04 CE 05 F1 | 	add	fp, #4
128fc     E7 94 62 FC | 	wrlong	arg02, fp
12900     04 CE 05 F1 | 	add	fp, #4
12904     E7 7E 62 FC | 	wrlong	result3, fp
12908     08 CE 85 F1 | 	sub	fp, #8
1290c     E7 92 02 F6 | 	mov	arg01, fp
12910     70 AF BF FD | 	call	#_converttoint
12914     3D 97 02 F6 | 	mov	arg03, result1
12918     01 96 66 F0 | 	shl	arg03, #1
1291c     32 95 02 F6 | 	mov	arg02, objptr
12920     53 00 00 FF 
12924     0C 95 06 F1 | 	add	arg02, ##42764
12928     4A 97 02 F1 | 	add	arg03, arg02
1292c     4B 7F E2 FA | 	rdword	result3, arg03
12930     E7 7E 62 FC | 	wrlong	result3, fp
12934     08 CE 05 F1 | 	add	fp, #8
12938     E7 38 68 FC | 	wrlong	#28, fp
1293c     08 CE 85 F1 | 	sub	fp, #8
12940     E7 92 02 F6 | 	mov	arg01, fp
12944     F0 AD BF FD | 	call	#_push
12948                 | LR__1561
12948     E7 F0 03 F6 | 	mov	ptra, fp
1294c     F2 00 A0 FD | 	call	#popregs_
12950                 | _do_getenvsustain_ret
12950     2D 00 64 FD | 	ret
12954                 | 
12954                 | ' 
12954                 | ' '-------------------- getnotevalue
12954                 | ' 
12954                 | ' sub do_getnotevalue
12954                 | _do_getnotevalue
12954     02 CA 05 F6 | 	mov	COUNT_, #2
12958     E8 00 A0 FD | 	call	#pushregs_
1295c     1C F0 07 F1 | 	add	ptra, #28
12960     44 AD BF FD | 	call	#_pop
12964     3F 95 02 F6 | 	mov	arg02, result3
12968     10 CE 05 F1 | 	add	fp, #16
1296c     E7 7A 62 FC | 	wrlong	result1, fp
12970     04 CE 05 F1 | 	add	fp, #4
12974     E7 7C 62 FC | 	wrlong	result2, fp
12978     04 CE 05 F1 | 	add	fp, #4
1297c     E7 94 62 FC | 	wrlong	arg02, fp
12980     08 CE 85 F1 | 	sub	fp, #8
12984     E7 92 02 F6 | 	mov	arg01, fp
12988     10 CE 85 F1 | 	sub	fp, #16
1298c     F4 AE BF FD | 	call	#_converttoint
12990     3D 93 52 F6 | 	abs	arg01, result1 wc
12994     0C 92 16 FD | 	qdiv	arg01, #12
12998     32 93 02 F6 | 	mov	arg01, objptr
1299c     15 00 00 FF 
129a0     D8 92 06 F1 | 	add	arg01, ##10968
129a4     19 7C 62 FD | 	getqy	result2
129a8     3E 7D 82 F6 | 	negc	result2, result2
129ac     3D 7B 52 F6 | 	abs	result1, result1 wc
129b0     0C 7A 16 FD | 	qdiv	result1, #12
129b4     02 7C 66 F0 | 	shl	result2, #2
129b8     49 7D 02 F1 | 	add	result2, arg01
129bc     3E A7 02 FB | 	rdlong	local01, result2
129c0     18 94 62 FD | 	getqx	arg02
129c4     4A 93 82 F6 | 	negc	arg01, arg02
129c8     49 93 52 F6 | 	abs	arg01, arg01 wc
129cc     1F A8 C6 C9 |  if_b	decod	local02, #31
129d0     00 A8 06 36 |  if_ae	mov	local02, #0
129d4     D0 42 B1 FD | 	call	#__system___float_fromuns
129d8     54 7B 62 F5 | 	xor	result1, local02
129dc     3D 95 02 F6 | 	mov	arg02, result1
129e0     1E 92 C6 F9 | 	decod	arg01, #30
129e4     DC 55 B1 FD | 	call	#__system____builtin_powf
129e8     3D 93 02 F6 | 	mov	arg01, result1
129ec     53 95 02 F6 | 	mov	arg02, local01
129f0     B8 46 B1 FD | 	call	#__system___float_mul
129f4     3D A7 02 F6 | 	mov	local01, result1
129f8     10 CE 05 F1 | 	add	fp, #16
129fc     E7 A6 62 FC | 	wrlong	local01, fp
12a00     08 CE 05 F1 | 	add	fp, #8
12a04     E7 3C 68 FC | 	wrlong	#30, fp
12a08     08 CE 85 F1 | 	sub	fp, #8
12a0c     E7 92 02 F6 | 	mov	arg01, fp
12a10     10 CE 85 F1 | 	sub	fp, #16
12a14     20 AD BF FD | 	call	#_push
12a18     E7 F0 03 F6 | 	mov	ptra, fp
12a1c     F2 00 A0 FD | 	call	#popregs_
12a20                 | _do_getnotevalue_ret
12a20     2D 00 64 FD | 	ret
12a24                 | 
12a24                 | ' 
12a24                 | ' '-------------------- getpixel
12a24                 | ' 
12a24                 | ' sub do_getpixel
12a24                 | _do_getpixel
12a24     01 CA 05 F6 | 	mov	COUNT_, #1
12a28     E8 00 A0 FD | 	call	#pushregs_
12a2c     24 F0 07 F1 | 	add	ptra, #36
12a30     4B 00 00 FF 
12a34     A0 64 06 F1 | 	add	objptr, ##38560
12a38     32 97 02 FB | 	rdlong	arg03, objptr
12a3c     4B 95 02 F6 | 	mov	arg02, arg03
12a40     01 94 66 F0 | 	shl	arg02, #1
12a44     4B 95 02 F1 | 	add	arg02, arg03
12a48     02 94 66 F0 | 	shl	arg02, #2
12a4c     03 00 00 FF 
12a50     04 64 86 F1 | 	sub	objptr, ##1540
12a54     32 95 02 F1 | 	add	arg02, objptr
12a58     4A 97 02 FB | 	rdlong	arg03, arg02
12a5c                 | ' 
12a5c                 | ' numpar=compiledline(lineptr_e).result.uresult
12a5c                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
12a5c     02 96 0E F2 | 	cmp	arg03, #2 wz
12a60     48 00 00 FF 
12a64     9C 64 86 F1 | 	sub	objptr, ##37020
12a68     40 00 90 AD |  if_e	jmp	#LR__1570
12a6c     00 92 06 F6 | 	mov	arg01, #0
12a70     EC 74 B1 FD | 	call	#__system___getiolock_0622
12a74     3D 93 02 F6 | 	mov	arg01, result1
12a78     60 1F B1 FD | 	call	#__system___lockmem
12a7c     97 01 00 FF 
12a80     62 95 06 F6 | 	mov	arg02, ##@LR__6018
12a84     00 92 06 F6 | 	mov	arg01, #0
12a88     00 96 06 F6 | 	mov	arg03, #0
12a8c     40 2C B1 FD | 	call	#__system___basic_print_string
12a90     00 92 06 F6 | 	mov	arg01, #0
12a94     C8 74 B1 FD | 	call	#__system___getiolock_0622
12a98     3D 01 68 FC | 	wrlong	#0, result1
12a9c     27 92 06 F6 | 	mov	arg01, #39
12aa0     00 94 06 F6 | 	mov	arg02, #0
12aa4     B8 E5 B0 FD | 	call	#_printerror
12aa8     98 00 90 FD | 	jmp	#LR__1571
12aac                 | LR__1570
12aac     F8 AB BF FD | 	call	#_pop
12ab0     3D 97 02 F6 | 	mov	arg03, result1
12ab4     3E 95 02 F6 | 	mov	arg02, result2
12ab8     3F 93 02 F6 | 	mov	arg01, result3
12abc     0C CE 05 F1 | 	add	fp, #12
12ac0     E7 96 62 FC | 	wrlong	arg03, fp
12ac4     04 CE 05 F1 | 	add	fp, #4
12ac8     E7 94 62 FC | 	wrlong	arg02, fp
12acc     04 CE 05 F1 | 	add	fp, #4
12ad0     E7 92 62 FC | 	wrlong	arg01, fp
12ad4     14 CE 85 F1 | 	sub	fp, #20
12ad8     CC AB BF FD | 	call	#_pop
12adc     3F 97 02 F6 | 	mov	arg03, result3
12ae0     E7 7A 62 FC | 	wrlong	result1, fp
12ae4     04 CE 05 F1 | 	add	fp, #4
12ae8     E7 7C 62 FC | 	wrlong	result2, fp
12aec     04 CE 05 F1 | 	add	fp, #4
12af0     E7 96 62 FC | 	wrlong	arg03, fp
12af4     08 CE 85 F1 | 	sub	fp, #8
12af8     E7 92 02 F6 | 	mov	arg01, fp
12afc     84 AD BF FD | 	call	#_converttoint
12b00     3D A7 02 F6 | 	mov	local01, result1
12b04     E7 92 02 F6 | 	mov	arg01, fp
12b08     0C 92 06 F1 | 	add	arg01, #12
12b0c     74 AD BF FD | 	call	#_converttoint
12b10     3D 97 02 F6 | 	mov	arg03, result1
12b14     32 93 02 FB | 	rdlong	arg01, objptr
12b18     53 93 02 F1 | 	add	arg01, local01
12b1c     0A 96 66 F0 | 	shl	arg03, #10
12b20     4B 93 02 F1 | 	add	arg01, arg03
12b24     AC E7 B0 FD | 	call	#_pspeek
12b28     3D 7B E2 F8 | 	getbyte	result1, result1, #0
12b2c     E7 7A 62 FC | 	wrlong	result1, fp
12b30     08 CE 05 F1 | 	add	fp, #8
12b34     E7 3A 68 FC | 	wrlong	#29, fp
12b38     08 CE 85 F1 | 	sub	fp, #8
12b3c     E7 92 02 F6 | 	mov	arg01, fp
12b40     F4 AB BF FD | 	call	#_push
12b44                 | LR__1571
12b44     E7 F0 03 F6 | 	mov	ptra, fp
12b48     F2 00 A0 FD | 	call	#popregs_
12b4c                 | _do_getpixel_ret
12b4c     2D 00 64 FD | 	ret
12b50                 | 
12b50                 | ' 
12b50                 | ' 
12b50                 | ' sub do_getrealfreq
12b50                 | _do_getrealfreq
12b50     00 CA 05 F6 | 	mov	COUNT_, #0
12b54     E8 00 A0 FD | 	call	#pushregs_
12b58     14 F0 07 F1 | 	add	ptra, #20
12b5c     4B 00 00 FF 
12b60     A0 64 06 F1 | 	add	objptr, ##38560
12b64     32 97 02 FB | 	rdlong	arg03, objptr
12b68     4B 95 02 F6 | 	mov	arg02, arg03
12b6c     01 94 66 F0 | 	shl	arg02, #1
12b70     4B 95 02 F1 | 	add	arg02, arg03
12b74     02 94 66 F0 | 	shl	arg02, #2
12b78     03 00 00 FF 
12b7c     04 64 86 F1 | 	sub	objptr, ##1540
12b80     32 95 02 F1 | 	add	arg02, objptr
12b84     4A 97 02 FB | 	rdlong	arg03, arg02
12b88                 | ' 
12b88                 | ' numpar=compiledline(lineptr_e).result.uresult
12b88                 | ' if numpar<>1 then print "getrealfreq: "; : printerror(39) : return
12b88     01 96 0E F2 | 	cmp	arg03, #1 wz
12b8c     48 00 00 FF 
12b90     9C 64 86 F1 | 	sub	objptr, ##37020
12b94     40 00 90 AD |  if_e	jmp	#LR__1580
12b98     00 92 06 F6 | 	mov	arg01, #0
12b9c     C0 73 B1 FD | 	call	#__system___getiolock_0622
12ba0     3D 93 02 F6 | 	mov	arg01, result1
12ba4     34 1E B1 FD | 	call	#__system___lockmem
12ba8     97 01 00 FF 
12bac     6D 95 06 F6 | 	mov	arg02, ##@LR__6019
12bb0     00 92 06 F6 | 	mov	arg01, #0
12bb4     00 96 06 F6 | 	mov	arg03, #0
12bb8     14 2B B1 FD | 	call	#__system___basic_print_string
12bbc     00 92 06 F6 | 	mov	arg01, #0
12bc0     9C 73 B1 FD | 	call	#__system___getiolock_0622
12bc4     3D 01 68 FC | 	wrlong	#0, result1
12bc8     27 92 06 F6 | 	mov	arg01, #39
12bcc     00 94 06 F6 | 	mov	arg02, #0
12bd0     8C E4 B0 FD | 	call	#_printerror
12bd4     78 00 90 FD | 	jmp	#LR__1581
12bd8                 | LR__1580
12bd8     CC AA BF FD | 	call	#_pop
12bdc     3D 97 02 F6 | 	mov	arg03, result1
12be0     04 CE 05 F1 | 	add	fp, #4
12be4     E7 96 62 FC | 	wrlong	arg03, fp
12be8     04 CE 05 F1 | 	add	fp, #4
12bec     E7 7C 62 FC | 	wrlong	result2, fp
12bf0     04 CE 05 F1 | 	add	fp, #4
12bf4     E7 7E 62 FC | 	wrlong	result3, fp
12bf8     08 CE 85 F1 | 	sub	fp, #8
12bfc     E7 92 02 F6 | 	mov	arg01, fp
12c00     04 CE 85 F1 | 	sub	fp, #4
12c04     7C AC BF FD | 	call	#_converttoint
12c08     3D 95 02 F6 | 	mov	arg02, result1
12c0c     03 94 66 F0 | 	shl	arg02, #3
12c10     3D 95 82 F1 | 	sub	arg02, result1
12c14     02 94 66 F0 | 	shl	arg02, #2
12c18     32 97 02 F6 | 	mov	arg03, objptr
12c1c     15 00 00 FF 
12c20     38 97 06 F1 | 	add	arg03, ##11064
12c24     4B 95 02 F1 | 	add	arg02, arg03
12c28     18 94 06 F1 | 	add	arg02, #24
12c2c     4A 97 02 FB | 	rdlong	arg03, arg02
12c30     04 CE 05 F1 | 	add	fp, #4
12c34     E7 96 62 FC | 	wrlong	arg03, fp
12c38     08 CE 05 F1 | 	add	fp, #8
12c3c     E7 3C 68 FC | 	wrlong	#30, fp
12c40     08 CE 85 F1 | 	sub	fp, #8
12c44     E7 92 02 F6 | 	mov	arg01, fp
12c48     04 CE 85 F1 | 	sub	fp, #4
12c4c     E8 AA BF FD | 	call	#_push
12c50                 | LR__1581
12c50     E7 F0 03 F6 | 	mov	ptra, fp
12c54     F2 00 A0 FD | 	call	#popregs_
12c58                 | _do_getrealfreq_ret
12c58     2D 00 64 FD | 	ret
12c5c                 | 
12c5c                 | ' 
12c5c                 | ' 
12c5c                 | ' '-------------------- gettime
12c5c                 | ' 
12c5c                 | ' sub do_gettime
12c5c                 | _do_gettime
12c5c     02 CA 05 F6 | 	mov	COUNT_, #2
12c60     E8 00 A0 FD | 	call	#pushregs_
12c64     14 F0 07 F1 | 	add	ptra, #20
12c68                 | ' 
12c68                 | ' const asm 
12c68     1A A6 72 FD | 	getct	local01 wc
12c6c     1A A8 62 FD | 	getct	local02
12c70                 | ' return hi1, lo1
12c70     54 7D 02 F6 | 	mov	result2, local02
12c74     53 7B 02 F6 | 	mov	result1, local01
12c78     10 CE 05 F1 | 	add	fp, #16
12c7c     E7 3A 68 FC | 	wrlong	#29, fp
12c80     08 CE 85 F1 | 	sub	fp, #8
12c84     E7 7C 62 FC | 	wrlong	result2, fp
12c88     04 CE 05 F1 | 	add	fp, #4
12c8c     E7 7A 62 FC | 	wrlong	result1, fp
12c90     04 CE 85 F1 | 	sub	fp, #4
12c94     E7 92 02 F6 | 	mov	arg01, fp
12c98     08 CE 85 F1 | 	sub	fp, #8
12c9c     98 AA BF FD | 	call	#_push
12ca0     E7 F0 03 F6 | 	mov	ptra, fp
12ca4     F2 00 A0 FD | 	call	#popregs_
12ca8                 | _do_gettime_ret
12ca8     2D 00 64 FD | 	ret
12cac                 | 
12cac                 | ' 
12cac                 | ' '-------------------- gosub
12cac                 | ' 
12cac                 | ' sub do_gosub()
12cac                 | _do_gosub
12cac     51 00 00 FF 
12cb0     54 65 06 F1 | 	add	objptr, ##41812
12cb4     32 81 02 FB | 	rdlong	_var01, objptr
12cb8     01 80 06 F1 | 	add	_var01, #1
12cbc     32 81 62 FC | 	wrlong	_var01, objptr
12cc0                 | ' gosubtop+=1
12cc0                 | ' if compiledline(lineptr_e+1).result_type=token_end then
12cc0     06 00 00 FF 
12cc4     B4 64 86 F1 | 	sub	objptr, ##3252
12cc8     32 81 02 FB | 	rdlong	_var01, objptr
12ccc     01 80 06 F1 | 	add	_var01, #1
12cd0     40 83 02 F6 | 	mov	_var02, _var01
12cd4     01 82 66 F0 | 	shl	_var02, #1
12cd8     40 83 02 F1 | 	add	_var02, _var01
12cdc     02 82 66 F0 | 	shl	_var02, #2
12ce0     03 00 00 FF 
12ce4     04 64 86 F1 | 	sub	objptr, ##1540
12ce8     32 83 02 F1 | 	add	_var02, objptr
12cec     08 82 06 F1 | 	add	_var02, #8
12cf0     41 83 02 FB | 	rdlong	_var02, _var02
12cf4     FE 83 0E F2 | 	cmp	_var02, #510 wz
12cf8     48 00 00 FF 
12cfc     9C 64 86 F1 | 	sub	objptr, ##37020
12d00     58 00 90 5D |  if_ne	jmp	#LR__1590
12d04     51 00 00 FF 
12d08     54 65 06 F1 | 	add	objptr, ##41812
12d0c     32 83 02 FB | 	rdlong	_var02, objptr
12d10     03 82 66 F0 | 	shl	_var02, #3
12d14     03 00 00 FF 
12d18     88 65 86 F1 | 	sub	objptr, ##1928
12d1c     32 83 02 F1 | 	add	_var02, objptr
12d20     03 00 00 FF 
12d24     0C 65 06 F1 | 	add	objptr, ##1804
12d28     32 81 02 FB | 	rdlong	_var01, objptr
12d2c     41 81 62 FC | 	wrlong	_var01, _var02
12d30     7C 64 06 F1 | 	add	objptr, #124
12d34     32 83 02 FB | 	rdlong	_var02, objptr
12d38     03 82 66 F0 | 	shl	_var02, #3
12d3c     03 00 00 FF 
12d40     88 65 86 F1 | 	sub	objptr, ##1928
12d44     32 83 02 F1 | 	add	_var02, objptr
12d48     04 82 06 F1 | 	add	_var02, #4
12d4c     41 01 68 FC | 	wrlong	#0, _var02
12d50     4D 00 00 FF 
12d54     CC 65 86 F1 | 	sub	objptr, ##39884
12d58     64 00 90 FD | 	jmp	#LR__1591
12d5c                 | LR__1590
12d5c     51 00 00 FF 
12d60     54 65 06 F1 | 	add	objptr, ##41812
12d64     32 83 02 FB | 	rdlong	_var02, objptr
12d68     03 82 66 F0 | 	shl	_var02, #3
12d6c     03 00 00 FF 
12d70     88 65 86 F1 | 	sub	objptr, ##1928
12d74     32 83 02 F1 | 	add	_var02, objptr
12d78     03 00 00 FF 
12d7c     14 65 06 F1 | 	add	objptr, ##1812
12d80     32 81 02 FB | 	rdlong	_var01, objptr
12d84     41 81 62 FC | 	wrlong	_var01, _var02
12d88     74 64 06 F1 | 	add	objptr, #116
12d8c     32 83 02 FB | 	rdlong	_var02, objptr
12d90     03 82 66 F0 | 	shl	_var02, #3
12d94     03 00 00 FF 
12d98     88 65 86 F1 | 	sub	objptr, ##1928
12d9c     32 83 02 F1 | 	add	_var02, objptr
12da0     02 00 00 FF 
12da4     2C 65 86 F1 | 	sub	objptr, ##1324
12da8     32 81 02 FB | 	rdlong	_var01, objptr
12dac     4B 00 00 FF 
12db0     A0 64 86 F1 | 	sub	objptr, ##38560
12db4     02 80 06 F1 | 	add	_var01, #2
12db8     04 82 06 F1 | 	add	_var02, #4
12dbc     41 81 62 FC | 	wrlong	_var01, _var02
12dc0                 | LR__1591
12dc0                 | _do_gosub_ret
12dc0     2D 00 64 FD | 	ret
12dc4                 | 
12dc4                 | ' 
12dc4                 | ' '--------------------- goto
12dc4                 | ' 
12dc4                 | ' '------- fast goto
12dc4                 | ' 
12dc4                 | ' sub do_fast_goto
12dc4                 | _do_fast_goto
12dc4     02 CA 05 F6 | 	mov	COUNT_, #2
12dc8     E8 00 A0 FD | 	call	#pushregs_
12dcc                 | _do_fast_goto_enter
12dcc     4B 00 00 FF 
12dd0     A0 64 06 F1 | 	add	objptr, ##38560
12dd4     32 93 02 FB | 	rdlong	arg01, objptr
12dd8     49 A7 02 F6 | 	mov	local01, arg01
12ddc     01 A6 66 F0 | 	shl	local01, #1
12de0     49 A7 02 F1 | 	add	local01, arg01
12de4     02 A6 66 F0 | 	shl	local01, #2
12de8     03 00 00 FF 
12dec     04 64 86 F1 | 	sub	objptr, ##1540
12df0     32 A7 02 F1 | 	add	local01, objptr
12df4     53 A9 02 FB | 	rdlong	local02, local01
12df8     54 93 02 F6 | 	mov	arg01, local02
12dfc     48 00 00 FF 
12e00     9C 64 86 F1 | 	sub	objptr, ##37020
12e04     14 E5 B0 FD | 	call	#_pslpeek
12e08     3D 93 02 F6 | 	mov	arg01, result1
12e0c                 | ' 
12e0c                 | ' testptr=compiledline(lineptr_e).result.uresult
12e0c                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
12e0c                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
12e0c     4B 00 00 FF 
12e10     A0 64 06 F1 | 	add	objptr, ##38560
12e14     32 7B 02 FB | 	rdlong	result1, objptr
12e18     3D A7 02 F6 | 	mov	local01, result1
12e1c     01 A6 66 F0 | 	shl	local01, #1
12e20     3D A7 02 F1 | 	add	local01, result1
12e24     02 A6 66 F0 | 	shl	local01, #2
12e28     03 00 00 FF 
12e2c     04 64 86 F1 | 	sub	objptr, ##1540
12e30     32 A7 02 F1 | 	add	local01, objptr
12e34     04 A6 06 F1 | 	add	local01, #4
12e38     53 A7 02 FB | 	rdlong	local01, local01
12e3c     53 93 0A F2 | 	cmp	arg01, local01 wz
12e40     48 00 00 FF 
12e44     9C 64 86 F1 | 	sub	objptr, ##37020
12e48     58 00 90 5D |  if_ne	jmp	#LR__1600
12e4c     51 00 00 FF 
12e50     D8 64 06 F1 | 	add	objptr, ##41688
12e54     32 A9 62 FC | 	wrlong	local02, objptr
12e58     06 00 00 FF 
12e5c     3C 64 86 F1 | 	sub	objptr, ##3132
12e60     32 A9 02 FB | 	rdlong	local02, objptr
12e64     01 A8 86 F1 | 	sub	local02, #1
12e68     04 64 06 F1 | 	add	objptr, #4
12e6c     32 A9 62 FC | 	wrlong	local02, objptr
12e70                 | '   runptr=testptr
12e70                 | '   lineptr_e=lineptr-1
12e70                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
12e70     06 00 00 FF 
12e74     84 64 06 F1 | 	add	objptr, ##3204
12e78     32 A9 02 FB | 	rdlong	local02, objptr
12e7c     51 00 00 FF 
12e80     24 65 86 F1 | 	sub	objptr, ##41764
12e84     FF FF 3F FF 
12e88     FF A9 0E F2 | 	cmp	local02, ##2147483647 wz
12e8c     51 00 00 AF 
12e90     24 65 06 A1 |  if_e	add	objptr, ##41764
12e94     32 01 68 AC |  if_e	wrlong	#0, objptr
12e98     51 00 00 AF 
12e9c     24 65 86 A1 |  if_e	sub	objptr, ##41764
12ea0     04 00 90 FD | 	jmp	#LR__1601
12ea4                 | LR__1600
12ea4     0C 00 B0 FD | 	call	#_do_find_goto
12ea8                 | LR__1601
12ea8     E7 F0 03 F6 | 	mov	ptra, fp
12eac     F2 00 A0 FD | 	call	#popregs_
12eb0                 | _do_fast_goto_ret
12eb0     2D 00 64 FD | 	ret
12eb4                 | 
12eb4                 | ' 
12eb4                 | ' '------- find goto  
12eb4                 | ' 
12eb4                 | ' sub do_find_goto
12eb4                 | _do_find_goto
12eb4     06 CA 05 F6 | 	mov	COUNT_, #6
12eb8     E8 00 A0 FD | 	call	#pushregs_
12ebc     24 F0 07 F1 | 	add	ptra, #36
12ec0                 | _do_find_goto_enter
12ec0     4B 00 00 FF 
12ec4     A0 64 06 F1 | 	add	objptr, ##38560
12ec8     32 A7 02 FB | 	rdlong	local01, objptr
12ecc     53 A9 02 F6 | 	mov	local02, local01
12ed0     01 A8 66 F0 | 	shl	local02, #1
12ed4     53 A9 02 F1 | 	add	local02, local01
12ed8     02 A8 66 F0 | 	shl	local02, #2
12edc     03 00 00 FF 
12ee0     04 64 86 F1 | 	sub	objptr, ##1540
12ee4     32 AB 02 F6 | 	mov	local03, objptr
12ee8     32 A9 02 F1 | 	add	local02, objptr
12eec     04 A8 06 F1 | 	add	local02, #4
12ef0     54 AD 02 FB | 	rdlong	local04, local02
12ef4     03 00 00 FF 
12ef8     0C 64 06 F1 | 	add	objptr, ##1548
12efc     32 AF 02 FB | 	rdlong	local05, objptr
12f00                 | ' 
12f00                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
12f00                 | ' gotoptr=programstart
12f00                 | ' do
12f00     3F 00 00 FF 
12f04     DC 65 86 F1 | 	sub	objptr, ##32732
12f08                 | LR__1610
12f08     E7 92 02 F6 | 	mov	arg01, fp
12f0c     0C 92 06 F1 | 	add	arg01, #12
12f10     57 95 02 F6 | 	mov	arg02, local05
12f14     18 96 06 F6 | 	mov	arg03, #24
12f18     A0 0E B1 FD | 	call	#_psram_spin2_read1
12f1c                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12f1c                 | '   if gotoheader(0)<>$FFFFFFFF then
12f1c     0C CE 05 F1 | 	add	fp, #12
12f20     E7 A8 02 FB | 	rdlong	local02, fp
12f24     0C CE 85 F1 | 	sub	fp, #12
12f28     FF FF 7F FF 
12f2c     FF A9 0E F2 | 	cmp	local02, ##-1 wz
12f30     57 B1 02 56 |  if_ne	mov	local06, local05
12f34     20 CE 05 51 |  if_ne	add	fp, #32
12f38     E7 AE 02 5B |  if_ne	rdlong	local05, fp
12f3c     20 CE 85 51 |  if_ne	sub	fp, #32
12f40     20 CE 05 F1 | 	add	fp, #32
12f44     E7 A8 02 FB | 	rdlong	local02, fp
12f48     20 CE 85 F1 | 	sub	fp, #32
12f4c     FF FF 3F FF 
12f50     FF A9 0E F2 | 	cmp	local02, ##2147483647 wz
12f54     0C CE 05 51 |  if_ne	add	fp, #12
12f58     E7 A6 02 5B |  if_ne	rdlong	local01, fp
12f5c     0C CE 85 51 |  if_ne	sub	fp, #12
12f60     FF FF 7F 5F 
12f64     FF A7 0E 52 |  if_ne	cmp	local01, ##-1 wz
12f68     0C CE 05 51 |  if_ne	add	fp, #12
12f6c     53 AB 02 56 |  if_ne	mov	local03, local01
12f70     0C CE 85 51 |  if_ne	sub	fp, #12
12f74     56 AB 0A 52 |  if_ne	cmp	local03, local04 wz
12f78     8C FF 9F 5D |  if_ne	jmp	#LR__1610
12f7c     0B 00 00 FF 
12f80     CC 64 86 F1 | 	sub	objptr, ##5836
12f84                 | ' 
12f84                 | ' if gotoheader(0)=gotoline then
12f84     0C CE 05 F1 | 	add	fp, #12
12f88     E7 AE 02 FB | 	rdlong	local05, fp
12f8c     0C CE 85 F1 | 	sub	fp, #12
12f90     56 AF 0A F2 | 	cmp	local05, local04 wz
12f94     CC 00 90 5D |  if_ne	jmp	#LR__1611
12f98     4B 00 00 FF 
12f9c     A0 64 06 F1 | 	add	objptr, ##38560
12fa0     32 A7 02 FB | 	rdlong	local01, objptr
12fa4     53 A9 02 F6 | 	mov	local02, local01
12fa8     01 A8 66 F0 | 	shl	local02, #1
12fac     53 A9 02 F1 | 	add	local02, local01
12fb0     02 A8 66 F0 | 	shl	local02, #2
12fb4     03 00 00 FF 
12fb8     04 64 86 F1 | 	sub	objptr, ##1540
12fbc     32 A9 02 F1 | 	add	local02, objptr
12fc0     54 B1 62 FC | 	wrlong	local06, local02
12fc4     03 00 00 FF 
12fc8     04 64 06 F1 | 	add	objptr, ##1540
12fcc     32 A7 02 FB | 	rdlong	local01, objptr
12fd0     53 A9 02 F6 | 	mov	local02, local01
12fd4     01 A8 66 F0 | 	shl	local02, #1
12fd8     53 A9 02 F1 | 	add	local02, local01
12fdc     02 A8 66 F0 | 	shl	local02, #2
12fe0     03 00 00 FF 
12fe4     04 64 86 F1 | 	sub	objptr, ##1540
12fe8     32 A9 02 F1 | 	add	local02, objptr
12fec     08 A8 06 F1 | 	add	local02, #8
12ff0     54 9D 68 FC | 	wrlong	#78, local02
12ff4     03 00 00 FF 
12ff8     04 64 06 F1 | 	add	objptr, ##1540
12ffc     32 B1 02 FB | 	rdlong	local06, objptr
13000     58 93 02 F6 | 	mov	arg01, local06
13004     01 92 66 F0 | 	shl	arg01, #1
13008     58 93 02 F1 | 	add	arg01, local06
1300c     02 92 66 F0 | 	shl	arg01, #2
13010     03 00 00 FF 
13014     04 64 86 F1 | 	sub	objptr, ##1540
13018     32 93 02 F1 | 	add	arg01, objptr
1301c     09 00 00 FF 
13020     44 64 06 F1 | 	add	objptr, ##4676
13024     32 95 02 FB | 	rdlong	arg02, objptr
13028     02 AA 06 F6 | 	mov	local03, #2
1302c     58 AB 02 F1 | 	add	local03, local06
13030     0B 00 00 FF 
13034     5C 64 86 F1 | 	sub	objptr, ##5724
13038     32 97 02 FB | 	rdlong	arg03, objptr
1303c     4B AB 02 FD | 	qmul	local03, arg03
13040     3A 00 00 FF 
13044     B8 65 86 F1 | 	sub	objptr, ##30136
13048     18 B0 62 FD | 	getqx	local06
1304c     58 95 02 F1 | 	add	arg02, local06
13050     04 0E B1 FD | 	call	#_psram_spin2_write
13054     0B 00 00 FF 
13058     CC 64 86 F1 | 	sub	objptr, ##5836
1305c     64 FD BF FD | 	call	#_do_fast_goto
13060     0C 00 90 FD | 	jmp	#LR__1612
13064                 | LR__1611
13064     26 92 06 F6 | 	mov	arg01, #38
13068     00 94 06 F6 | 	mov	arg02, #0
1306c     F0 DF B0 FD | 	call	#_printerror
13070                 | LR__1612
13070     E7 F0 03 F6 | 	mov	ptra, fp
13074     F2 00 A0 FD | 	call	#popregs_
13078                 | _do_find_goto_ret
13078     2D 00 64 FD | 	ret
1307c                 | 
1307c                 | ' 
1307c                 | ' '------- slow goto  
1307c                 | ' 
1307c                 | ' sub do_slow_goto
1307c                 | _do_slow_goto
1307c     05 CA 05 F6 | 	mov	COUNT_, #5
13080     E8 00 A0 FD | 	call	#pushregs_
13084     30 F0 07 F1 | 	add	ptra, #48
13088     1C A6 BF FD | 	call	#_pop
1308c     3F A7 02 F6 | 	mov	local01, result3
13090     24 CE 05 F1 | 	add	fp, #36
13094     E7 7A 62 FC | 	wrlong	result1, fp
13098     04 CE 05 F1 | 	add	fp, #4
1309c     E7 7C 62 FC | 	wrlong	result2, fp
130a0     04 CE 05 F1 | 	add	fp, #4
130a4     E7 A6 62 FC | 	wrlong	local01, fp
130a8     08 CE 85 F1 | 	sub	fp, #8
130ac     E7 92 02 F6 | 	mov	arg01, fp
130b0     24 CE 85 F1 | 	sub	fp, #36
130b4     CC A7 BF FD | 	call	#_converttoint
130b8     3D A9 02 F6 | 	mov	local02, result1
130bc     4B 00 00 FF 
130c0     A8 64 06 F1 | 	add	objptr, ##38568
130c4     32 AB 02 FB | 	rdlong	local03, objptr
130c8                 | ' 
130c8                 | ' t1=pop() : gotoline=converttoint(t1)
130c8                 | ' gotoptr=programstart
130c8                 | ' do
130c8     3F 00 00 FF 
130cc     DC 65 86 F1 | 	sub	objptr, ##32732
130d0                 | LR__1620
130d0     E7 92 02 F6 | 	mov	arg01, fp
130d4     0C 92 06 F1 | 	add	arg01, #12
130d8     55 95 02 F6 | 	mov	arg02, local03
130dc     18 96 06 F6 | 	mov	arg03, #24
130e0     D8 0C B1 FD | 	call	#_psram_spin2_read1
130e4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
130e4                 | '   if gotoheader(0)<>$FFFFFFFF then
130e4     0C CE 05 F1 | 	add	fp, #12
130e8     E7 96 02 FB | 	rdlong	arg03, fp
130ec     0C CE 85 F1 | 	sub	fp, #12
130f0     FF FF 7F FF 
130f4     FF 97 0E F2 | 	cmp	arg03, ##-1 wz
130f8     55 AD 02 56 |  if_ne	mov	local04, local03
130fc     20 CE 05 51 |  if_ne	add	fp, #32
13100     E7 AA 02 5B |  if_ne	rdlong	local03, fp
13104     20 CE 85 51 |  if_ne	sub	fp, #32
13108     20 CE 05 F1 | 	add	fp, #32
1310c     E7 96 02 FB | 	rdlong	arg03, fp
13110     20 CE 85 F1 | 	sub	fp, #32
13114     FF FF 3F FF 
13118     FF 97 0E F2 | 	cmp	arg03, ##2147483647 wz
1311c     0C CE 05 51 |  if_ne	add	fp, #12
13120     E7 A6 02 5B |  if_ne	rdlong	local01, fp
13124     0C CE 85 51 |  if_ne	sub	fp, #12
13128     FF FF 7F 5F 
1312c     FF A7 0E 52 |  if_ne	cmp	local01, ##-1 wz
13130     0C CE 05 51 |  if_ne	add	fp, #12
13134     53 AF 02 56 |  if_ne	mov	local05, local01
13138     0C CE 85 51 |  if_ne	sub	fp, #12
1313c     54 AF 0A 52 |  if_ne	cmp	local05, local02 wz
13140     8C FF 9F 5D |  if_ne	jmp	#LR__1620
13144     0B 00 00 FF 
13148     CC 64 86 F1 | 	sub	objptr, ##5836
1314c                 | ' if gotoheader(0)=gotoline then  
1314c     0C CE 05 F1 | 	add	fp, #12
13150     E7 AE 02 FB | 	rdlong	local05, fp
13154     0C CE 85 F1 | 	sub	fp, #12
13158     54 AF 0A F2 | 	cmp	local05, local02 wz
1315c     54 00 90 5D |  if_ne	jmp	#LR__1621
13160     51 00 00 FF 
13164     D8 64 06 F1 | 	add	objptr, ##41688
13168     32 AD 62 FC | 	wrlong	local04, objptr
1316c     06 00 00 FF 
13170     3C 64 86 F1 | 	sub	objptr, ##3132
13174     32 AF 02 FB | 	rdlong	local05, objptr
13178     01 AE 86 F1 | 	sub	local05, #1
1317c     04 64 06 F1 | 	add	objptr, #4
13180     32 AF 62 FC | 	wrlong	local05, objptr
13184                 | '    runptr=oldgotoptr
13184                 | '    lineptr_e=lineptr-1
13184                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
13184     06 00 00 FF 
13188     84 64 06 F1 | 	add	objptr, ##3204
1318c     32 AF 02 FB | 	rdlong	local05, objptr
13190     51 00 00 FF 
13194     24 65 86 F1 | 	sub	objptr, ##41764
13198     FF FF 3F FF 
1319c     FF AF 0E F2 | 	cmp	local05, ##2147483647 wz
131a0     51 00 00 AF 
131a4     24 65 06 A1 |  if_e	add	objptr, ##41764
131a8     32 01 68 AC |  if_e	wrlong	#0, objptr
131ac     51 00 00 AF 
131b0     24 65 86 A1 |  if_e	sub	objptr, ##41764
131b4                 | LR__1621
131b4     E7 F0 03 F6 | 	mov	ptra, fp
131b8     F2 00 A0 FD | 	call	#popregs_
131bc                 | _do_slow_goto_ret
131bc     2D 00 64 FD | 	ret
131c0                 | 
131c0                 | ' 
131c0                 | ' ' ----------------  hex$
131c0                 | ' 
131c0                 | ' sub do_hex
131c0                 | _do_hex
131c0     02 CA 05 F6 | 	mov	COUNT_, #2
131c4     E8 00 A0 FD | 	call	#pushregs_
131c8     18 F0 07 F1 | 	add	ptra, #24
131cc     4B 00 00 FF 
131d0     A0 64 06 F1 | 	add	objptr, ##38560
131d4     32 97 02 FB | 	rdlong	arg03, objptr
131d8     4B 95 02 F6 | 	mov	arg02, arg03
131dc     01 94 66 F0 | 	shl	arg02, #1
131e0     4B 95 02 F1 | 	add	arg02, arg03
131e4     02 94 66 F0 | 	shl	arg02, #2
131e8     03 00 00 FF 
131ec     04 64 86 F1 | 	sub	objptr, ##1540
131f0     32 95 02 F1 | 	add	arg02, objptr
131f4     4A A7 02 FB | 	rdlong	local01, arg02
131f8                 | ' 
131f8                 | ' numpar=compiledline(lineptr_e).result.uresult
131f8                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
131f8     03 A6 16 F2 | 	cmp	local01, #3 wc
131fc     48 00 00 FF 
13200     9C 64 86 F1 | 	sub	objptr, ##37020
13204     00 A6 0E C2 |  if_b	cmp	local01, #0 wz
13208     40 00 90 4D |  if_c_and_nz	jmp	#LR__1630
1320c     00 92 06 F6 | 	mov	arg01, #0
13210     4C 6D B1 FD | 	call	#__system___getiolock_0622
13214     3D 93 02 F6 | 	mov	arg01, result1
13218     C0 17 B1 FD | 	call	#__system___lockmem
1321c     97 01 00 FF 
13220     7B 95 06 F6 | 	mov	arg02, ##@LR__6020
13224     00 92 06 F6 | 	mov	arg01, #0
13228     00 96 06 F6 | 	mov	arg03, #0
1322c     A0 24 B1 FD | 	call	#__system___basic_print_string
13230     00 92 06 F6 | 	mov	arg01, #0
13234     28 6D B1 FD | 	call	#__system___getiolock_0622
13238     3D 01 68 FC | 	wrlong	#0, result1
1323c     27 92 06 F6 | 	mov	arg01, #39
13240     00 94 06 F6 | 	mov	arg02, #0
13244     18 DE B0 FD | 	call	#_printerror
13248     8C 00 90 FD | 	jmp	#LR__1633
1324c                 | LR__1630
1324c                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
1324c     02 A6 0E F2 | 	cmp	local01, #2 wz
13250     30 00 90 5D |  if_ne	jmp	#LR__1631
13254     50 A4 BF FD | 	call	#_pop
13258     3F A7 02 F6 | 	mov	local01, result3
1325c     E7 7A 62 FC | 	wrlong	result1, fp
13260     04 CE 05 F1 | 	add	fp, #4
13264     E7 7C 62 FC | 	wrlong	result2, fp
13268     04 CE 05 F1 | 	add	fp, #4
1326c     E7 A6 62 FC | 	wrlong	local01, fp
13270     08 CE 85 F1 | 	sub	fp, #8
13274     E7 92 02 F6 | 	mov	arg01, fp
13278     08 A6 BF FD | 	call	#_converttoint
1327c     3D A9 02 F6 | 	mov	local02, result1
13280     04 00 90 FD | 	jmp	#LR__1632
13284                 | LR__1631
13284     08 A8 06 F6 | 	mov	local02, #8
13288                 | LR__1632
13288     1C A4 BF FD | 	call	#_pop
1328c     3F A7 02 F6 | 	mov	local01, result3
13290     E7 7A 62 FC | 	wrlong	result1, fp
13294     04 CE 05 F1 | 	add	fp, #4
13298     E7 7C 62 FC | 	wrlong	result2, fp
1329c     04 CE 05 F1 | 	add	fp, #4
132a0     E7 A6 62 FC | 	wrlong	local01, fp
132a4     08 CE 85 F1 | 	sub	fp, #8
132a8     E7 92 02 F6 | 	mov	arg01, fp
132ac     D4 A5 BF FD | 	call	#_converttoint
132b0     3D 93 02 F6 | 	mov	arg01, result1
132b4     54 95 02 F6 | 	mov	arg02, local02
132b8     10 96 06 F6 | 	mov	arg03, #16
132bc     18 32 B1 FD | 	call	#__system__Number_S
132c0     E7 7A 62 FC | 	wrlong	result1, fp
132c4     08 CE 05 F1 | 	add	fp, #8
132c8     E7 3E 68 FC | 	wrlong	#31, fp
132cc     08 CE 85 F1 | 	sub	fp, #8
132d0     E7 92 02 F6 | 	mov	arg01, fp
132d4     60 A4 BF FD | 	call	#_push
132d8                 | LR__1633
132d8     E7 F0 03 F6 | 	mov	ptra, fp
132dc     F2 00 A0 FD | 	call	#popregs_
132e0                 | _do_hex_ret
132e0     2D 00 64 FD | 	ret
132e4                 | 
132e4                 | ' 
132e4                 | ' ' ----------------  if
132e4                 | ' 
132e4                 | ' sub do_if
132e4                 | _do_if
132e4     05 CA 05 F6 | 	mov	COUNT_, #5
132e8     E8 00 A0 FD | 	call	#pushregs_
132ec     B8 A3 BF FD | 	call	#_pop
132f0     3D A7 0A F6 | 	mov	local01, result1 wz
132f4     3E A9 02 F6 | 	mov	local02, result2
132f8     3F AB 02 F6 | 	mov	local03, result3
132fc                 | ' t1=pop()
132fc                 | ' ' if uresult=0, jump over else
132fc                 | ' if t1.result.uresult = 0 then 
132fc     BC 00 90 5D |  if_ne	jmp	#LR__1642
13300                 | '   for i=lineptr_e to lineptr-1
13300     4B 00 00 FF 
13304     A0 64 06 F1 | 	add	objptr, ##38560
13308     32 AD 02 FB | 	rdlong	local04, objptr
1330c     04 64 86 F1 | 	sub	objptr, #4
13310     32 AF 02 FB | 	rdlong	local05, objptr
13314     4B 00 00 FF 
13318     9C 64 86 F1 | 	sub	objptr, ##38556
1331c                 | LR__1640
1331c     57 AD 52 F2 | 	cmps	local04, local05 wc
13320     78 00 90 3D |  if_ae	jmp	#LR__1641
13324     56 7F 02 F6 | 	mov	result3, local04
13328     01 7E 66 F0 | 	shl	result3, #1
1332c     56 7F 02 F1 | 	add	result3, local04
13330     02 7E 66 F0 | 	shl	result3, #2
13334     48 00 00 FF 
13338     9C 64 06 F1 | 	add	objptr, ##37020
1333c     32 7F 02 F1 | 	add	result3, objptr
13340     3F A7 02 FB | 	rdlong	local01, result3
13344     04 7E 06 F1 | 	add	result3, #4
13348     3F 7D 02 FB | 	rdlong	result2, result3
1334c     56 7F 02 F6 | 	mov	result3, local04
13350     01 7E 66 F0 | 	shl	result3, #1
13354     56 7F 02 F1 | 	add	result3, local04
13358     02 7E 66 F0 | 	shl	result3, #2
1335c     32 7F 02 F1 | 	add	result3, objptr
13360     08 7E 06 F1 | 	add	result3, #8
13364     3F 7F 02 FB | 	rdlong	result3, result3
13368     3E A9 02 F6 | 	mov	local02, result2
1336c     3F AB 02 F6 | 	mov	local03, result3
13370                 | '     t1=compiledline(i)
13370                 | '     if t1.result_type=token_else then lineptr_e=i : return
13370     5A AA 0E F2 | 	cmp	local03, #90 wz
13374     48 00 00 FF 
13378     9C 64 86 F1 | 	sub	objptr, ##37020
1337c     4B 00 00 AF 
13380     A0 64 06 A1 |  if_e	add	objptr, ##38560
13384     32 AD 62 AC |  if_e	wrlong	local04, objptr
13388     4B 00 00 AF 
1338c     A0 64 86 A1 |  if_e	sub	objptr, ##38560
13390     28 00 90 AD |  if_e	jmp	#LR__1643
13394     01 AC 06 F1 | 	add	local04, #1
13398     80 FF 9F FD | 	jmp	#LR__1640
1339c                 | LR__1641
1339c     4B 00 00 FF 
133a0     9C 64 06 F1 | 	add	objptr, ##38556
133a4     32 AF 02 FB | 	rdlong	local05, objptr
133a8     01 AE 86 F1 | 	sub	local05, #1
133ac     04 64 06 F1 | 	add	objptr, #4
133b0     32 AF 62 FC | 	wrlong	local05, objptr
133b4     4B 00 00 FF 
133b8     A0 64 86 F1 | 	sub	objptr, ##38560
133bc                 | LR__1642
133bc                 | LR__1643
133bc     E7 F0 03 F6 | 	mov	ptra, fp
133c0     F2 00 A0 FD | 	call	#popregs_
133c4                 | _do_if_ret
133c4     2D 00 64 FD | 	ret
133c8                 | 
133c8                 | ' 
133c8                 | ' ' ----------------  inkey$
133c8                 | ' 
133c8                 | ' sub do_inkey
133c8                 | _do_inkey
133c8     02 CA 05 F6 | 	mov	COUNT_, #2
133cc     E8 00 A0 FD | 	call	#pushregs_
133d0     0C F0 07 F1 | 	add	ptra, #12
133d4     00 0E B1 FD | 	call	#_usbnew_spin2_get_key
133d8     46 00 00 FF 
133dc     94 64 06 F1 | 	add	objptr, ##35988
133e0     32 7B 62 FC | 	wrlong	result1, objptr
133e4                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
133e4     46 00 00 FF 
133e8     94 64 86 F1 | 	sub	objptr, ##35988
133ec     00 7A 0E F2 | 	cmp	result1, #0 wz
133f0     94 00 90 AD |  if_e	jmp	#LR__1651
133f4     46 00 00 FF 
133f8     94 64 06 F1 | 	add	objptr, ##35988
133fc     32 9D 02 FB | 	rdlong	arg06, objptr
13400     46 00 00 FF 
13404     94 64 86 F1 | 	sub	objptr, ##35988
13408     00 00 40 FF 
1340c     00 9C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13410     46 00 00 CF 
13414     94 64 06 C1 |  if_b	add	objptr, ##35988
13418     32 A7 02 CB |  if_b	rdlong	local01, objptr
1341c     46 00 00 CF 
13420     94 64 86 C1 |  if_b	sub	objptr, ##35988
13424     53 A7 E2 C8 |  if_b	getbyte	local01, local01, #0
13428     E0 A6 16 C2 |  if_b	cmp	local01, #224 wc
1342c     58 00 90 3D |  if_ae	jmp	#LR__1651
13430                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len) 
13430     51 00 00 FF 
13434     5C 65 06 F1 | 	add	objptr, ##41820
13438     32 9D 02 FB | 	rdlong	arg06, objptr
1343c     51 00 00 FF 
13440     5C 65 86 F1 | 	sub	objptr, ##41820
13444     01 9C 0E F2 | 	cmp	arg06, #1 wz
13448     3C 00 90 5D |  if_ne	jmp	#LR__1650
1344c     53 00 00 FF 
13450     FC 64 06 F1 | 	add	objptr, ##42748
13454     32 95 02 FB | 	rdlong	arg02, objptr
13458     04 64 86 F1 | 	sub	objptr, #4
1345c     32 9B 02 FB | 	rdlong	arg05, objptr
13460     07 92 06 F6 | 	mov	arg01, #7
13464     56 00 00 FF 
13468     44 96 06 F6 | 	mov	arg03, ##44100
1346c     0C 98 C6 F9 | 	decod	arg04, #12
13470     01 9C 66 F6 | 	neg	arg06, #1
13474     48 00 00 FF 
13478     2C 64 86 F1 | 	sub	objptr, ##36908
1347c     AC 10 B1 FD | 	call	#_Audio2_003_spin2_play
13480     0B 00 00 FF 
13484     CC 64 86 F1 | 	sub	objptr, ##5836
13488                 | LR__1650
13488                 | LR__1651
13488                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
13488     46 00 00 FF 
1348c     94 64 06 F1 | 	add	objptr, ##35988
13490     32 9D 0A FB | 	rdlong	arg06, objptr wz
13494     46 00 00 FF 
13498     94 64 86 F1 | 	sub	objptr, ##35988
1349c     D4 01 90 AD |  if_e	jmp	#LR__1660
134a0     46 00 00 FF 
134a4     94 64 06 F1 | 	add	objptr, ##35988
134a8     32 9D 02 FB | 	rdlong	arg06, objptr
134ac     46 00 00 FF 
134b0     94 64 86 F1 | 	sub	objptr, ##35988
134b4     00 00 40 FF 
134b8     00 9C 16 F2 | 	cmp	arg06, ##-2147483648 wc
134bc     46 00 00 CF 
134c0     94 64 06 C1 |  if_b	add	objptr, ##35988
134c4     32 A7 02 CB |  if_b	rdlong	local01, objptr
134c8     46 00 00 CF 
134cc     94 64 86 C1 |  if_b	sub	objptr, ##35988
134d0     53 A7 E2 C8 |  if_b	getbyte	local01, local01, #0
134d4     E0 A6 16 C2 |  if_b	cmp	local01, #224 wc
134d8     98 01 90 3D |  if_ae	jmp	#LR__1660
134dc                 | '   if leds and 2 = 2 then 
134dc     53 00 00 FF 
134e0     38 65 06 F1 | 	add	objptr, ##42808
134e4     32 A7 0A FB | 	rdlong	local01, objptr wz
134e8     53 00 00 FF 
134ec     38 65 86 F1 | 	sub	objptr, ##42808
134f0     58 01 90 AD |  if_e	jmp	#LR__1659
134f4                 | '     if key>96 andalso key<123 then
134f4     46 00 00 FF 
134f8     94 64 06 F1 | 	add	objptr, ##35988
134fc     32 A7 02 FB | 	rdlong	local01, objptr
13500     46 00 00 FF 
13504     94 64 86 F1 | 	sub	objptr, ##35988
13508     61 A6 16 F2 | 	cmp	local01, #97 wc
1350c     3C 00 90 CD |  if_b	jmp	#LR__1652
13510     46 00 00 FF 
13514     94 64 06 F1 | 	add	objptr, ##35988
13518     32 A7 02 FB | 	rdlong	local01, objptr
1351c     46 00 00 FF 
13520     94 64 86 F1 | 	sub	objptr, ##35988
13524     7B A6 16 F2 | 	cmp	local01, #123 wc
13528     20 00 90 3D |  if_ae	jmp	#LR__1652
1352c     46 00 00 FF 
13530     94 64 06 F1 | 	add	objptr, ##35988
13534     32 A7 02 FB | 	rdlong	local01, objptr
13538     20 A6 86 F1 | 	sub	local01, #32
1353c     32 A7 62 FC | 	wrlong	local01, objptr
13540     46 00 00 FF 
13544     94 64 86 F1 | 	sub	objptr, ##35988
13548     00 01 90 FD | 	jmp	#LR__1658
1354c                 | LR__1652
1354c     46 00 00 FF 
13550     94 64 06 F1 | 	add	objptr, ##35988
13554     32 A7 02 FB | 	rdlong	local01, objptr
13558     46 00 00 FF 
1355c     94 64 86 F1 | 	sub	objptr, ##35988
13560     41 A6 16 F2 | 	cmp	local01, #65 wc
13564     3C 00 90 CD |  if_b	jmp	#LR__1653
13568     46 00 00 FF 
1356c     94 64 06 F1 | 	add	objptr, ##35988
13570     32 A7 02 FB | 	rdlong	local01, objptr
13574     46 00 00 FF 
13578     94 64 86 F1 | 	sub	objptr, ##35988
1357c     5B A6 16 F2 | 	cmp	local01, #91 wc
13580     20 00 90 3D |  if_ae	jmp	#LR__1653
13584     46 00 00 FF 
13588     94 64 06 F1 | 	add	objptr, ##35988
1358c     32 A7 02 FB | 	rdlong	local01, objptr
13590     20 A6 06 F1 | 	add	local01, #32
13594     32 A7 62 FC | 	wrlong	local01, objptr
13598     46 00 00 FF 
1359c     94 64 86 F1 | 	sub	objptr, ##35988
135a0     A8 00 90 FD | 	jmp	#LR__1657
135a4                 | LR__1653
135a4     46 00 00 FF 
135a8     94 64 06 F1 | 	add	objptr, ##35988
135ac     32 A7 02 FB | 	rdlong	local01, objptr
135b0     46 00 00 FF 
135b4     94 64 86 F1 | 	sub	objptr, ##35988
135b8     17 A6 16 F2 | 	cmp	local01, #23 wc
135bc     3C 00 90 CD |  if_b	jmp	#LR__1654
135c0     46 00 00 FF 
135c4     94 64 06 F1 | 	add	objptr, ##35988
135c8     32 A7 02 FB | 	rdlong	local01, objptr
135cc     46 00 00 FF 
135d0     94 64 86 F1 | 	sub	objptr, ##35988
135d4     20 A6 16 F2 | 	cmp	local01, #32 wc
135d8     20 00 90 3D |  if_ae	jmp	#LR__1654
135dc     46 00 00 FF 
135e0     94 64 06 F1 | 	add	objptr, ##35988
135e4     32 A7 02 FB | 	rdlong	local01, objptr
135e8     09 A6 86 F1 | 	sub	local01, #9
135ec     32 A7 62 FC | 	wrlong	local01, objptr
135f0     46 00 00 FF 
135f4     94 64 86 F1 | 	sub	objptr, ##35988
135f8     50 00 90 FD | 	jmp	#LR__1656
135fc                 | LR__1654
135fc     46 00 00 FF 
13600     94 64 06 F1 | 	add	objptr, ##35988
13604     32 A9 02 FB | 	rdlong	local02, objptr
13608     46 00 00 FF 
1360c     94 64 86 F1 | 	sub	objptr, ##35988
13610     0E A8 16 F2 | 	cmp	local02, #14 wc
13614     34 00 90 CD |  if_b	jmp	#LR__1655
13618     46 00 00 FF 
1361c     94 64 06 F1 | 	add	objptr, ##35988
13620     32 A7 02 FB | 	rdlong	local01, objptr
13624     46 00 00 FF 
13628     94 64 86 F1 | 	sub	objptr, ##35988
1362c     17 A6 16 F2 | 	cmp	local01, #23 wc
13630     53 00 00 CF 
13634     3C 65 06 C1 |  if_b	add	objptr, ##42812
13638     32 A9 02 CB |  if_b	rdlong	local02, objptr
1363c     27 A8 06 C1 |  if_b	add	local02, #39
13640     32 A9 62 CC |  if_b	wrlong	local02, objptr
13644     53 00 00 CF 
13648     3C 65 86 C1 |  if_b	sub	objptr, ##42812
1364c                 | LR__1655
1364c                 | LR__1656
1364c                 | LR__1657
1364c                 | LR__1658
1364c                 | LR__1659
1364c     46 00 00 FF 
13650     94 64 06 F1 | 	add	objptr, ##35988
13654     32 93 02 FB | 	rdlong	arg01, objptr
13658     46 00 00 FF 
1365c     94 64 86 F1 | 	sub	objptr, ##35988
13660     48 DD B0 FD | 	call	#_scantochar
13664     3D 93 02 F6 | 	mov	arg01, result1
13668     DC 2D B1 FD | 	call	#__system__Chr_S
1366c     E7 7A 62 FC | 	wrlong	result1, fp
13670     0C 00 90 FD | 	jmp	#LR__1661
13674                 | LR__1660
13674     97 01 00 FF 
13678     82 A9 06 F6 | 	mov	local02, ##@LR__6021
1367c     E7 A8 62 FC | 	wrlong	local02, fp
13680                 | LR__1661
13680     08 CE 05 F1 | 	add	fp, #8
13684     E7 3E 68 FC | 	wrlong	#31, fp
13688     08 CE 85 F1 | 	sub	fp, #8
1368c     E7 92 02 F6 | 	mov	arg01, fp
13690     A4 A0 BF FD | 	call	#_push
13694     E7 F0 03 F6 | 	mov	ptra, fp
13698     F2 00 A0 FD | 	call	#popregs_
1369c                 | _do_inkey_ret
1369c     2D 00 64 FD | 	ret
136a0                 | 
136a0                 | ' 
136a0                 | ' ' ----------------  ink
136a0                 | ' 
136a0                 | ' sub do_ink
136a0                 | _do_ink
136a0     00 CA 05 F6 | 	mov	COUNT_, #0
136a4     E8 00 A0 FD | 	call	#pushregs_
136a8     0C F0 07 F1 | 	add	ptra, #12
136ac     F8 9F BF FD | 	call	#_pop
136b0     3F 95 02 F6 | 	mov	arg02, result3
136b4     E7 7A 62 FC | 	wrlong	result1, fp
136b8     04 CE 05 F1 | 	add	fp, #4
136bc     E7 7C 62 FC | 	wrlong	result2, fp
136c0     04 CE 05 F1 | 	add	fp, #4
136c4     E7 94 62 FC | 	wrlong	arg02, fp
136c8     08 CE 85 F1 | 	sub	fp, #8
136cc     E7 92 02 F6 | 	mov	arg01, fp
136d0     B0 A1 BF FD | 	call	#_converttoint
136d4     38 00 00 FF 
136d8     5C 64 06 F1 | 	add	objptr, ##28764
136dc     32 7B 62 FC | 	wrlong	result1, objptr
136e0     04 64 86 F1 | 	sub	objptr, #4
136e4     32 95 02 FB | 	rdlong	arg02, objptr
136e8                 | ' 
136e8                 | ' write_color:=ff
136e8     38 00 00 FF 
136ec     17 64 86 F1 | 	sub	objptr, ##28695
136f0     32 7B 62 FC | 	wrlong	result1, objptr
136f4                 | ' write_background:=bb
136f4     04 64 06 F1 | 	add	objptr, #4
136f8     32 95 62 FC | 	wrlong	arg02, objptr
136fc     38 00 00 FF 
13700     17 64 06 F1 | 	add	objptr, ##28695
13704     32 93 02 FB | 	rdlong	arg01, objptr
13708     38 00 00 FF 
1370c     5C 64 86 F1 | 	sub	objptr, ##28764
13710     0C E5 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
13714     E7 F0 03 F6 | 	mov	ptra, fp
13718     F2 00 A0 FD | 	call	#popregs_
1371c                 | _do_ink_ret
1371c     2D 00 64 FD | 	ret
13720                 | 
13720                 | ' 
13720                 | ' ' ----------------  int
13720                 | ' 
13720                 | ' sub do_int
13720                 | _do_int
13720     02 CA 05 F6 | 	mov	COUNT_, #2
13724     E8 00 A0 FD | 	call	#pushregs_
13728     10 F0 07 F1 | 	add	ptra, #16
1372c     78 9F BF FD | 	call	#_pop
13730     3E A7 02 F6 | 	mov	local01, result2
13734     3F A9 02 F6 | 	mov	local02, result3
13738     E7 7A 62 FC | 	wrlong	result1, fp
1373c     04 CE 05 F1 | 	add	fp, #4
13740     E7 A6 62 FC | 	wrlong	local01, fp
13744     04 CE 05 F1 | 	add	fp, #4
13748     E7 A8 62 FC | 	wrlong	local02, fp
1374c                 | ' 
1374c                 | ' t1=pop()
1374c                 | ' select case t1.result_type
1374c     08 CE 85 F1 | 	sub	fp, #8
13750     1E A8 0E F2 | 	cmp	local02, #30 wz
13754     14 00 90 AD |  if_e	jmp	#LR__1670
13758     1F A8 0E F2 | 	cmp	local02, #31 wz
1375c     20 00 90 AD |  if_e	jmp	#LR__1671
13760     2B A8 0E F2 | 	cmp	local02, #43 wz
13764     34 00 90 AD |  if_e	jmp	#LR__1672
13768     50 00 90 FD | 	jmp	#LR__1673
1376c                 | LR__1670
1376c     E7 92 02 FB | 	rdlong	arg01, fp
13770     00 94 06 F6 | 	mov	arg02, #0
13774     FC 3D B1 FD | 	call	#__system___float_tointeger
13778     E7 7A 62 FC | 	wrlong	result1, fp
1377c     3C 00 90 FD | 	jmp	#LR__1673
13780                 | LR__1671
13780     E7 92 02 FB | 	rdlong	arg01, fp
13784     40 41 B1 FD | 	call	#__system____builtin_atof
13788     3D 93 02 F6 | 	mov	arg01, result1
1378c     00 94 06 F6 | 	mov	arg02, #0
13790     E0 3D B1 FD | 	call	#__system___float_tointeger
13794     E7 7A 62 FC | 	wrlong	result1, fp
13798     20 00 90 FD | 	jmp	#LR__1673
1379c                 | LR__1672
1379c     E7 92 02 FB | 	rdlong	arg01, fp
137a0     74 A0 BF FD | 	call	#_convertstring
137a4     3D 93 02 F6 | 	mov	arg01, result1
137a8     1C 41 B1 FD | 	call	#__system____builtin_atof
137ac     3D 93 02 F6 | 	mov	arg01, result1
137b0     00 94 06 F6 | 	mov	arg02, #0
137b4     BC 3D B1 FD | 	call	#__system___float_tointeger
137b8     E7 7A 62 FC | 	wrlong	result1, fp
137bc                 | LR__1673
137bc     08 CE 05 F1 | 	add	fp, #8
137c0     E7 38 68 FC | 	wrlong	#28, fp
137c4     08 CE 85 F1 | 	sub	fp, #8
137c8     E7 92 02 F6 | 	mov	arg01, fp
137cc     68 9F BF FD | 	call	#_push
137d0     E7 F0 03 F6 | 	mov	ptra, fp
137d4     F2 00 A0 FD | 	call	#popregs_
137d8                 | _do_int_ret
137d8     2D 00 64 FD | 	ret
137dc                 | 
137dc                 | ' 
137dc                 | ' ' ----------------  input
137dc                 | ' 
137dc                 | ' sub do_input
137dc                 | _do_input
137dc     1A CA 05 F6 | 	mov	COUNT_, #26
137e0     E8 00 A0 FD | 	call	#pushregs_
137e4     50 F1 07 F1 | 	add	ptra, #336
137e8     4B 00 00 FF 
137ec     A0 64 06 F1 | 	add	objptr, ##38560
137f0     32 AD 02 FB | 	rdlong	local04, objptr
137f4     56 AF 02 F6 | 	mov	local05, local04
137f8     01 AE 66 F0 | 	shl	local05, #1
137fc     56 AF 02 F1 | 	add	local05, local04
13800     02 AE 66 F0 | 	shl	local05, #2
13804     03 00 00 FF 
13808     04 64 86 F1 | 	sub	objptr, ##1540
1380c     32 B1 02 F6 | 	mov	local06, objptr
13810     32 AF 02 F1 | 	add	local05, objptr
13814     57 B3 02 FB | 	rdlong	local07, local05
13818                 | ' 
13818                 | ' numpar=compiledline(lineptr_e).result.uresult
13818                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
13818     01 B2 16 F2 | 	cmp	local07, #1 wc
1381c     48 00 00 FF 
13820     9C 64 86 F1 | 	sub	objptr, ##37020
13824     08 00 90 CD |  if_b	jmp	#LR__1680
13828     41 B2 16 F2 | 	cmp	local07, #65 wc
1382c     50 00 90 CD |  if_b	jmp	#LR__1681
13830                 | LR__1680
13830     00 92 06 F6 | 	mov	arg01, #0
13834     28 67 B1 FD | 	call	#__system___getiolock_0622
13838     3D 93 02 F6 | 	mov	arg01, result1
1383c     9C 11 B1 FD | 	call	#__system___lockmem
13840     97 01 00 FF 
13844     83 95 06 F6 | 	mov	arg02, ##@LR__6022
13848     00 92 06 F6 | 	mov	arg01, #0
1384c     00 96 06 F6 | 	mov	arg03, #0
13850     7C 1E B1 FD | 	call	#__system___basic_print_string
13854     00 92 06 F6 | 	mov	arg01, #0
13858     04 67 B1 FD | 	call	#__system___getiolock_0622
1385c     3D 01 68 FC | 	wrlong	#0, result1
13860     51 00 00 FF 
13864     10 65 06 F1 | 	add	objptr, ##41744
13868     32 95 02 FB | 	rdlong	arg02, objptr
1386c     51 00 00 FF 
13870     10 65 86 F1 | 	sub	objptr, ##41744
13874     27 92 06 F6 | 	mov	arg01, #39
13878     E4 D7 B0 FD | 	call	#_printerror
1387c     5C 08 90 FD | 	jmp	#LR__1727
13880                 | LR__1681
13880     59 B5 02 F6 | 	mov	local08, local07
13884     01 B4 86 F1 | 	sub	local08, #1
13888     3C 64 06 F1 | 	add	objptr, #60
1388c     32 AD E2 FA | 	rdword	local04, objptr
13890     56 B7 52 F6 | 	abs	local09, local04 wc
13894     01 B6 46 F0 | 	shr	local09, #1
13898     5B B7 82 F6 | 	negc	local09, local09
1389c     02 64 06 F1 | 	add	objptr, #2
138a0     32 B9 C2 FA | 	rdbyte	local10, objptr
138a4     3E 64 86 F1 | 	sub	objptr, #62
138a8                 | ' i=numpar-1
138a8                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
138a8                 | ' do
138a8                 | LR__1682
138a8     58 D0 BE FD | 	call	#_edit
138ac     3D BB 02 F6 | 	mov	local11, result1
138b0                 | ' 
138b0                 | '   line$=edit()
138b0                 | ' 
138b0                 | '   if v.cursor_y=cpy+1 then
138b0     3E 64 06 F1 | 	add	objptr, #62
138b4     32 97 C2 FA | 	rdbyte	arg03, objptr
138b8     3E 64 86 F1 | 	sub	objptr, #62
138bc     5C AD 02 F6 | 	mov	local04, local10
138c0     01 AC 06 F1 | 	add	local04, #1
138c4     56 97 0A F2 | 	cmp	arg03, local04 wz
138c8     5C 00 90 5D |  if_ne	jmp	#LR__1685
138cc     5D 93 02 F6 | 	mov	arg01, local11
138d0     49 BD 02 F6 | 	mov	local12, arg01
138d4     D7 06 48 FB | 	callpa	#(@LR__1684-@LR__1683)>>2,fcache_load_ptr_
138d8                 | LR__1683
138d8     5E 7B CA FA | 	rdbyte	result1, local12 wz
138dc     01 BC 06 51 |  if_ne	add	local12, #1
138e0     F4 FF 9F 5D |  if_ne	jmp	#LR__1683
138e4                 | LR__1684
138e4     49 BD 82 F1 | 	sub	local12, arg01
138e8     5E 95 02 F6 | 	mov	arg02, local12
138ec     5B 95 82 F1 | 	sub	arg02, local09
138f0     38 00 00 FF 
138f4     54 64 06 F1 | 	add	objptr, ##28756
138f8     32 AD 02 FB | 	rdlong	local04, objptr
138fc     38 00 00 FF 
13900     54 64 86 F1 | 	sub	objptr, ##28756
13904     56 95 02 F1 | 	add	arg02, local04
13908     5D 93 02 F6 | 	mov	arg01, local11
1390c     FC 29 B1 FD | 	call	#__system__Right_S
13910     3D 93 02 F6 | 	mov	arg01, result1
13914     FC 2D B1 FD | 	call	#__system__RTrim_S
13918     3D 93 02 F6 | 	mov	arg01, result1
1391c     34 2D B1 FD | 	call	#__system__LTrim_S
13920     3D BB 02 F6 | 	mov	local11, result1
13924     14 00 90 FD | 	jmp	#LR__1686
13928                 | LR__1685
13928     5D 93 02 F6 | 	mov	arg01, local11
1392c     E4 2D B1 FD | 	call	#__system__RTrim_S
13930     3D 93 02 F6 | 	mov	arg01, result1
13934     1C 2D B1 FD | 	call	#__system__LTrim_S
13938     3D BB 02 F6 | 	mov	local11, result1
1393c                 | LR__1686
1393c                 | '   do
1393c                 | LR__1687
1393c     97 01 00 FF 
13940     8E 97 06 F6 | 	mov	arg03, ##@LR__6023
13944     01 92 06 F6 | 	mov	arg01, #1
13948     5D 95 02 F6 | 	mov	arg02, local11
1394c     7C 2E B1 FD | 	call	#__system__Instr
13950     3D BF 02 F6 | 	mov	local13, result1
13954                 | '    comma=instr(1,line$,",")  
13954                 | '    if comma>0  then 
13954     01 BE 16 F2 | 	cmp	local13, #1 wc
13958     48 00 90 CD |  if_b	jmp	#LR__1690
1395c     5F 95 02 F6 | 	mov	arg02, local13
13960     01 94 86 F1 | 	sub	arg02, #1
13964     5D 93 02 F6 | 	mov	arg01, local11
13968     18 29 B1 FD | 	call	#__system__Left_S
1396c     3D C1 02 F6 | 	mov	local14, result1
13970     5D 93 02 F6 | 	mov	arg01, local11
13974     49 BD 02 F6 | 	mov	local12, arg01
13978     D7 06 48 FB | 	callpa	#(@LR__1689-@LR__1688)>>2,fcache_load_ptr_
1397c                 | LR__1688
1397c     5E 7B CA FA | 	rdbyte	result1, local12 wz
13980     01 BC 06 51 |  if_ne	add	local12, #1
13984     F4 FF 9F 5D |  if_ne	jmp	#LR__1688
13988                 | LR__1689
13988     49 BD 82 F1 | 	sub	local12, arg01
1398c     5E 95 02 F6 | 	mov	arg02, local12
13990     5F 95 82 F1 | 	sub	arg02, local13
13994     5D 93 02 F6 | 	mov	arg01, local11
13998     70 29 B1 FD | 	call	#__system__Right_S
1399c     3D BB 02 F6 | 	mov	local11, result1
139a0     1C 00 90 FD | 	jmp	#LR__1691
139a4                 | LR__1690
139a4     5D 93 02 F6 | 	mov	arg01, local11
139a8     68 2D B1 FD | 	call	#__system__RTrim_S
139ac     3D 93 02 F6 | 	mov	arg01, result1
139b0     A0 2C B1 FD | 	call	#__system__LTrim_S
139b4     3D C1 02 F6 | 	mov	local14, result1
139b8     97 01 00 FF 
139bc     90 BB 06 F6 | 	mov	local11, ##@LR__6024
139c0                 | LR__1691
139c0     5A 95 02 F6 | 	mov	arg02, local08
139c4     02 94 66 F0 | 	shl	arg02, #2
139c8     E7 AC 02 F6 | 	mov	local04, fp
139cc     2C AC 06 F1 | 	add	local04, #44
139d0     56 95 02 F1 | 	add	arg02, local04
139d4     4A C1 62 FC | 	wrlong	local14, arg02
139d8     01 B4 86 F1 | 	sub	local08, #1
139dc     00 B4 56 F2 | 	cmps	local08, #0 wc
139e0     18 00 90 CD |  if_b	jmp	#LR__1692
139e4     97 01 00 FF 
139e8     91 95 06 F6 | 	mov	arg02, ##@LR__6025
139ec     5D 93 02 F6 | 	mov	arg01, local11
139f0     10 10 B1 FD | 	call	#__system___string_cmp
139f4     00 7A 0E F2 | 	cmp	result1, #0 wz
139f8     40 FF 9F 5D |  if_ne	jmp	#LR__1687
139fc                 | LR__1692
139fc     00 B4 56 F2 | 	cmps	local08, #0 wc
13a00     A4 FE 9F 3D |  if_ae	jmp	#LR__1682
13a04                 | ' 
13a04                 | ' for i=0 to numpar-1
13a04     00 B4 06 F6 | 	mov	local08, #0
13a08     59 C3 02 F6 | 	mov	local15, local07
13a0c                 | LR__1693
13a0c     61 B5 52 F2 | 	cmps	local08, local15 wc
13a10     C8 06 90 3D |  if_ae	jmp	#LR__1726
13a14                 | ' 
13a14                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
13a14     5A AF 02 F6 | 	mov	local05, local08
13a18     02 AE 66 F0 | 	shl	local05, #2
13a1c     E7 B0 02 F6 | 	mov	local06, fp
13a20     2C B0 06 F1 | 	add	local06, #44
13a24     58 AF 02 F1 | 	add	local05, local06
13a28     57 93 02 FB | 	rdlong	arg01, local05
13a2c     5C 30 BF FD | 	call	#_isnum
13a30     3D B1 02 F6 | 	mov	local06, result1
13a34     5A C5 02 F6 | 	mov	local16, local08
13a38     02 C4 66 F0 | 	shl	local16, #2
13a3c     E7 C6 02 F6 | 	mov	local17, fp
13a40     2C C6 06 F1 | 	add	local17, #44
13a44     63 C5 02 F1 | 	add	local16, local17
13a48     62 93 02 FB | 	rdlong	arg01, local16
13a4c     28 34 BF FD | 	call	#_isint
13a50     07 7A 66 F7 | 	signx	result1, #7
13a54     3D B1 2A F5 | 	andn	local06, result1 wz
13a58     53 00 00 5F 
13a5c     68 65 06 51 |  if_ne	add	objptr, ##42856
13a60     32 3D 68 5C |  if_ne	wrlong	#30, objptr
13a64     53 00 00 5F 
13a68     68 65 86 51 |  if_ne	sub	objptr, ##42856
13a6c                 | '   if isint(args(i)) then r=result_int 
13a6c     5A AD 02 F6 | 	mov	local04, local08
13a70     02 AC 66 F0 | 	shl	local04, #2
13a74     E7 AE 02 F6 | 	mov	local05, fp
13a78     2C AE 06 F1 | 	add	local05, #44
13a7c     57 AD 02 F1 | 	add	local04, local05
13a80     56 93 02 FB | 	rdlong	arg01, local04
13a84     F0 33 BF FD | 	call	#_isint
13a88     00 7A 0E F2 | 	cmp	result1, #0 wz
13a8c     53 00 00 5F 
13a90     68 65 06 51 |  if_ne	add	objptr, ##42856
13a94     32 39 68 5C |  if_ne	wrlong	#28, objptr
13a98     53 00 00 5F 
13a9c     68 65 86 51 |  if_ne	sub	objptr, ##42856
13aa0                 | '   if isdec(args(i)) then r=result_uint 
13aa0     5A AD 02 F6 | 	mov	local04, local08
13aa4     02 AC 66 F0 | 	shl	local04, #2
13aa8     E7 AE 02 F6 | 	mov	local05, fp
13aac     2C AE 06 F1 | 	add	local05, #44
13ab0     57 AD 02 F1 | 	add	local04, local05
13ab4     56 93 02 FB | 	rdlong	arg01, local04
13ab8     60 36 BF FD | 	call	#_isdec
13abc     00 7A 0E F2 | 	cmp	result1, #0 wz
13ac0     53 00 00 5F 
13ac4     68 65 06 51 |  if_ne	add	objptr, ##42856
13ac8     32 3B 68 5C |  if_ne	wrlong	#29, objptr
13acc     53 00 00 5F 
13ad0     68 65 86 51 |  if_ne	sub	objptr, ##42856
13ad4                 | '   if not isnum(args(i)) then 
13ad4     5A AF 02 F6 | 	mov	local05, local08
13ad8     02 AE 66 F0 | 	shl	local05, #2
13adc     E7 B0 02 F6 | 	mov	local06, fp
13ae0     2C B0 06 F1 | 	add	local06, #44
13ae4     58 AF 02 F1 | 	add	local05, local06
13ae8     57 93 02 FB | 	rdlong	arg01, local05
13aec     9C 2F BF FD | 	call	#_isnum
13af0     07 7A 66 F7 | 	signx	result1, #7
13af4     3D 7B 22 F6 | 	not	result1, result1
13af8     00 7A 0E F2 | 	cmp	result1, #0 wz
13afc     E8 00 90 AD |  if_e	jmp	#LR__1698
13b00     53 00 00 FF 
13b04     68 65 06 F1 | 	add	objptr, ##42856
13b08     32 57 68 FC | 	wrlong	#43, objptr
13b0c     53 00 00 FF 
13b10     68 65 86 F1 | 	sub	objptr, ##42856
13b14     60 93 02 F6 | 	mov	arg01, local14
13b18     49 BD 02 F6 | 	mov	local12, arg01
13b1c     D7 06 48 FB | 	callpa	#(@LR__1695-@LR__1694)>>2,fcache_load_ptr_
13b20                 | LR__1694
13b20     5E 7B CA FA | 	rdbyte	result1, local12 wz
13b24     01 BC 06 51 |  if_ne	add	local12, #1
13b28     F4 FF 9F 5D |  if_ne	jmp	#LR__1694
13b2c                 | LR__1695
13b2c     49 BD 82 F1 | 	sub	local12, arg01
13b30     5E C9 02 F6 | 	mov	local18, local12
13b34     53 00 00 FF 
13b38     F0 64 06 F1 | 	add	objptr, ##42736
13b3c     32 93 02 FB | 	rdlong	arg01, objptr
13b40     64 93 82 F1 | 	sub	arg01, local18
13b44     04 92 86 F1 | 	sub	arg01, #4
13b48     03 92 26 F5 | 	andn	arg01, #3
13b4c     32 93 62 FC | 	wrlong	arg01, objptr
13b50     53 00 00 FF 
13b54     F0 64 86 F1 | 	sub	objptr, ##42736
13b58     64 95 02 F6 | 	mov	arg02, local18
13b5c     9C D6 B0 FD | 	call	#_pslpoke
13b60                 | '     pslpoke memtop,l
13b60                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
13b60     01 CA 06 F6 | 	mov	local19, #1
13b64     64 CD 02 F6 | 	mov	local20, local18
13b68     01 CC 06 F1 | 	add	local20, #1
13b6c                 | LR__1696
13b6c     66 CB 52 F2 | 	cmps	local19, local20 wc
13b70     60 00 90 3D |  if_ae	jmp	#LR__1697
13b74     53 00 00 FF 
13b78     F0 64 06 F1 | 	add	objptr, ##42736
13b7c     32 AD 02 FB | 	rdlong	local04, objptr
13b80     53 00 00 FF 
13b84     F0 64 86 F1 | 	sub	objptr, ##42736
13b88     03 AC 06 F1 | 	add	local04, #3
13b8c     65 AD 02 F1 | 	add	local04, local19
13b90     5A C5 02 F6 | 	mov	local16, local08
13b94     02 C4 66 F0 | 	shl	local16, #2
13b98     E7 C6 02 F6 | 	mov	local17, fp
13b9c     2C C6 06 F1 | 	add	local17, #44
13ba0     63 C5 02 F1 | 	add	local16, local17
13ba4     62 93 02 FB | 	rdlong	arg01, local16
13ba8     65 B1 02 F6 | 	mov	local06, local19
13bac     01 C4 06 F6 | 	mov	local16, #1
13bb0     58 95 02 F6 | 	mov	arg02, local06
13bb4     01 96 06 F6 | 	mov	arg03, #1
13bb8     E0 27 B1 FD | 	call	#__system__Mid_S
13bbc     3D AF 02 F6 | 	mov	local05, result1
13bc0     57 95 C2 FA | 	rdbyte	arg02, local05
13bc4     56 93 02 F6 | 	mov	arg01, local04
13bc8     C0 D6 B0 FD | 	call	#_pspoke
13bcc     01 CA 06 F1 | 	add	local19, #1
13bd0     98 FF 9F FD | 	jmp	#LR__1696
13bd4                 | LR__1697
13bd4     53 00 00 FF 
13bd8     F0 64 06 F1 | 	add	objptr, ##42736
13bdc     32 CF 02 FB | 	rdlong	local21, objptr
13be0     53 00 00 FF 
13be4     F0 64 86 F1 | 	sub	objptr, ##42736
13be8                 | LR__1698
13be8     BC 9A BF FD | 	call	#_pop
13bec     3D D1 02 F6 | 	mov	local22, result1
13bf0     3E D3 02 F6 | 	mov	local23, result2
13bf4     3F AD 02 F6 | 	mov	local04, result3
13bf8     68 A7 02 F6 | 	mov	local01, local22
13bfc     69 A9 02 F6 | 	mov	local02, local23
13c00     56 AB 02 F6 | 	mov	local03, local04
13c04     54 D5 02 F6 | 	mov	local24, local02
13c08                 | '   t1=pop() : vartype=t1.result.twowords(1)
13c08                 | '   select case vartype
13c08     6A D7 0A F6 | 	mov	local25, local24 wz
13c0c     64 00 90 AD |  if_e	jmp	#LR__1699
13c10     00 D7 0E F2 | 	cmp	local25, #256 wz
13c14     64 00 90 AD |  if_e	jmp	#LR__1700
13c18     01 D7 0E F2 | 	cmp	local25, #257 wz
13c1c     64 00 90 AD |  if_e	jmp	#LR__1701
13c20     02 D7 0E F2 | 	cmp	local25, #258 wz
13c24     64 00 90 AD |  if_e	jmp	#LR__1702
13c28     03 D7 0E F2 | 	cmp	local25, #259 wz
13c2c     64 00 90 AD |  if_e	jmp	#LR__1703
13c30     04 D7 0E F2 | 	cmp	local25, #260 wz
13c34     64 00 90 AD |  if_e	jmp	#LR__1704
13c38     05 D7 0E F2 | 	cmp	local25, #261 wz
13c3c     64 00 90 AD |  if_e	jmp	#LR__1705
13c40     06 D7 0E F2 | 	cmp	local25, #262 wz
13c44     64 00 90 AD |  if_e	jmp	#LR__1706
13c48     07 D7 0E F2 | 	cmp	local25, #263 wz
13c4c     64 00 90 AD |  if_e	jmp	#LR__1707
13c50     08 D7 0E F2 | 	cmp	local25, #264 wz
13c54     64 00 90 AD |  if_e	jmp	#LR__1708
13c58     09 D7 0E F2 | 	cmp	local25, #265 wz
13c5c     64 00 90 AD |  if_e	jmp	#LR__1709
13c60     0A D7 0E F2 | 	cmp	local25, #266 wz
13c64     64 00 90 AD |  if_e	jmp	#LR__1710
13c68     0B D7 0E F2 | 	cmp	local25, #267 wz
13c6c     64 00 90 AD |  if_e	jmp	#LR__1711
13c70     68 00 90 FD | 	jmp	#LR__1712
13c74                 | LR__1699
13c74     0C D8 06 F6 | 	mov	local26, #12
13c78     64 00 90 FD | 	jmp	#LR__1713
13c7c                 | LR__1700
13c7c     0C D8 06 F6 | 	mov	local26, #12
13c80     5C 00 90 FD | 	jmp	#LR__1713
13c84                 | LR__1701
13c84     01 D8 06 F6 | 	mov	local26, #1
13c88     54 00 90 FD | 	jmp	#LR__1713
13c8c                 | LR__1702
13c8c     01 D8 06 F6 | 	mov	local26, #1
13c90     4C 00 90 FD | 	jmp	#LR__1713
13c94                 | LR__1703
13c94     02 D8 06 F6 | 	mov	local26, #2
13c98     44 00 90 FD | 	jmp	#LR__1713
13c9c                 | LR__1704
13c9c     02 D8 06 F6 | 	mov	local26, #2
13ca0     3C 00 90 FD | 	jmp	#LR__1713
13ca4                 | LR__1705
13ca4     04 D8 06 F6 | 	mov	local26, #4
13ca8     34 00 90 FD | 	jmp	#LR__1713
13cac                 | LR__1706
13cac     04 D8 06 F6 | 	mov	local26, #4
13cb0     2C 00 90 FD | 	jmp	#LR__1713
13cb4                 | LR__1707
13cb4     08 D8 06 F6 | 	mov	local26, #8
13cb8     24 00 90 FD | 	jmp	#LR__1713
13cbc                 | LR__1708
13cbc     08 D8 06 F6 | 	mov	local26, #8
13cc0     1C 00 90 FD | 	jmp	#LR__1713
13cc4                 | LR__1709
13cc4     06 D8 06 F6 | 	mov	local26, #6
13cc8     14 00 90 FD | 	jmp	#LR__1713
13ccc                 | LR__1710
13ccc     08 D8 06 F6 | 	mov	local26, #8
13cd0     0C 00 90 FD | 	jmp	#LR__1713
13cd4                 | LR__1711
13cd4     05 D8 06 F6 | 	mov	local26, #5
13cd8     04 00 90 FD | 	jmp	#LR__1713
13cdc                 | LR__1712
13cdc     0C D8 06 F6 | 	mov	local26, #12
13ce0                 | LR__1713
13ce0                 | '   if esize=12 andalso t1.result.uresult<$80000 then
13ce0     0C D8 0E F2 | 	cmp	local26, #12 wz
13ce4     34 01 90 5D |  if_ne	jmp	#LR__1717
13ce8     00 04 00 FF 
13cec     00 A6 16 F2 | 	cmp	local01, ##524288 wc
13cf0     28 01 90 3D |  if_ae	jmp	#LR__1717
13cf4                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
13cf4     53 00 00 FF 
13cf8     68 65 06 F1 | 	add	objptr, ##42856
13cfc     32 D1 02 FB | 	rdlong	local22, objptr
13d00     53 00 00 FF 
13d04     68 65 86 F1 | 	sub	objptr, ##42856
13d08     1C D0 0E F2 | 	cmp	local22, #28 wz
13d0c     2C 00 90 5D |  if_ne	jmp	#LR__1714
13d10     5A AF 02 F6 | 	mov	local05, local08
13d14     02 AE 66 F0 | 	shl	local05, #2
13d18     E7 B0 02 F6 | 	mov	local06, fp
13d1c     2C B0 06 F1 | 	add	local06, #44
13d20     58 AF 02 F1 | 	add	local05, local06
13d24     57 93 02 FB | 	rdlong	arg01, local05
13d28     00 94 06 F6 | 	mov	arg02, #0
13d2c     00 3A B1 FD | 	call	#__system____builtin_atoi
13d30     3D 95 02 F6 | 	mov	arg02, result1
13d34     53 93 02 F6 | 	mov	arg01, local01
13d38     49 95 62 FC | 	wrlong	arg02, arg01
13d3c                 | LR__1714
13d3c                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
13d3c     53 00 00 FF 
13d40     68 65 06 F1 | 	add	objptr, ##42856
13d44     32 D1 02 FB | 	rdlong	local22, objptr
13d48     53 00 00 FF 
13d4c     68 65 86 F1 | 	sub	objptr, ##42856
13d50     1D D0 0E F2 | 	cmp	local22, #29 wz
13d54     2C 00 90 5D |  if_ne	jmp	#LR__1715
13d58     5A AF 02 F6 | 	mov	local05, local08
13d5c     02 AE 66 F0 | 	shl	local05, #2
13d60     E7 B0 02 F6 | 	mov	local06, fp
13d64     2C B0 06 F1 | 	add	local06, #44
13d68     58 AF 02 F1 | 	add	local05, local06
13d6c     57 93 02 FB | 	rdlong	arg01, local05
13d70     00 94 06 F6 | 	mov	arg02, #0
13d74     B8 39 B1 FD | 	call	#__system____builtin_atoi
13d78     3D 95 02 F6 | 	mov	arg02, result1
13d7c     53 93 02 F6 | 	mov	arg01, local01
13d80     49 95 62 FC | 	wrlong	arg02, arg01
13d84                 | LR__1715
13d84                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
13d84     53 00 00 FF 
13d88     68 65 06 F1 | 	add	objptr, ##42856
13d8c     32 D1 02 FB | 	rdlong	local22, objptr
13d90     53 00 00 FF 
13d94     68 65 86 F1 | 	sub	objptr, ##42856
13d98     1E D0 0E F2 | 	cmp	local22, #30 wz
13d9c     3C 00 90 5D |  if_ne	jmp	#LR__1716
13da0     5A AD 02 F6 | 	mov	local04, local08
13da4     02 AC 66 F0 | 	shl	local04, #2
13da8     E7 AE 02 F6 | 	mov	local05, fp
13dac     2C AE 06 F1 | 	add	local05, #44
13db0     57 AD 02 F1 | 	add	local04, local05
13db4     56 93 02 FB | 	rdlong	arg01, local04
13db8     0C 3B B1 FD | 	call	#__system____builtin_atof
13dbc     28 CE 05 F1 | 	add	fp, #40
13dc0     E7 7A 62 FC | 	wrlong	result1, fp
13dc4     E7 92 02 F6 | 	mov	arg01, fp
13dc8     28 CE 85 F1 | 	sub	fp, #40
13dcc     49 7B 02 FB | 	rdlong	result1, arg01
13dd0     3D 95 02 F6 | 	mov	arg02, result1
13dd4     53 93 02 F6 | 	mov	arg01, local01
13dd8     49 95 62 FC | 	wrlong	arg02, arg01
13ddc                 | LR__1716
13ddc                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
13ddc     53 00 00 FF 
13de0     68 65 06 F1 | 	add	objptr, ##42856
13de4     32 D1 02 FB | 	rdlong	local22, objptr
13de8     2B D0 0E F2 | 	cmp	local22, #43 wz
13dec     53 93 02 A6 |  if_e	mov	arg01, local01
13df0     67 95 02 A6 |  if_e	mov	arg02, local21
13df4     49 95 62 AC |  if_e	wrlong	arg02, arg01
13df8     53 D1 02 F6 | 	mov	local22, local01
13dfc     08 D0 06 F1 | 	add	local22, #8
13e00     32 AD 02 FB | 	rdlong	local04, objptr
13e04     53 00 00 FF 
13e08     68 65 86 F1 | 	sub	objptr, ##42856
13e0c     56 D3 02 F6 | 	mov	local23, local04
13e10     68 93 02 F6 | 	mov	arg01, local22
13e14     69 95 02 F6 | 	mov	arg02, local23
13e18     49 95 62 FC | 	wrlong	arg02, arg01
13e1c                 | LR__1717
13e1c                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
13e1c     0C D8 0E F2 | 	cmp	local26, #12 wz
13e20     38 01 90 5D |  if_ne	jmp	#LR__1721
13e24     00 04 00 FF 
13e28     00 A6 16 F2 | 	cmp	local01, ##524288 wc
13e2c     2C 01 90 CD |  if_b	jmp	#LR__1721
13e30                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
13e30     53 00 00 FF 
13e34     68 65 06 F1 | 	add	objptr, ##42856
13e38     32 D1 02 FB | 	rdlong	local22, objptr
13e3c     53 00 00 FF 
13e40     68 65 86 F1 | 	sub	objptr, ##42856
13e44     1C D0 0E F2 | 	cmp	local22, #28 wz
13e48     2C 00 90 5D |  if_ne	jmp	#LR__1718
13e4c     5A AF 02 F6 | 	mov	local05, local08
13e50     02 AE 66 F0 | 	shl	local05, #2
13e54     E7 B0 02 F6 | 	mov	local06, fp
13e58     2C B0 06 F1 | 	add	local06, #44
13e5c     58 AF 02 F1 | 	add	local05, local06
13e60     57 93 02 FB | 	rdlong	arg01, local05
13e64     00 94 06 F6 | 	mov	arg02, #0
13e68     C4 38 B1 FD | 	call	#__system____builtin_atoi
13e6c     3D 95 02 F6 | 	mov	arg02, result1
13e70     53 93 02 F6 | 	mov	arg01, local01
13e74     84 D3 B0 FD | 	call	#_pslpoke
13e78                 | LR__1718
13e78                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
13e78     53 00 00 FF 
13e7c     68 65 06 F1 | 	add	objptr, ##42856
13e80     32 D1 02 FB | 	rdlong	local22, objptr
13e84     53 00 00 FF 
13e88     68 65 86 F1 | 	sub	objptr, ##42856
13e8c     1D D0 0E F2 | 	cmp	local22, #29 wz
13e90     2C 00 90 5D |  if_ne	jmp	#LR__1719
13e94     5A AF 02 F6 | 	mov	local05, local08
13e98     02 AE 66 F0 | 	shl	local05, #2
13e9c     E7 B0 02 F6 | 	mov	local06, fp
13ea0     2C B0 06 F1 | 	add	local06, #44
13ea4     58 AF 02 F1 | 	add	local05, local06
13ea8     57 93 02 FB | 	rdlong	arg01, local05
13eac     00 94 06 F6 | 	mov	arg02, #0
13eb0     7C 38 B1 FD | 	call	#__system____builtin_atoi
13eb4     3D 95 02 F6 | 	mov	arg02, result1
13eb8     53 93 02 F6 | 	mov	arg01, local01
13ebc     3C D3 B0 FD | 	call	#_pslpoke
13ec0                 | LR__1719
13ec0                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13ec0     53 00 00 FF 
13ec4     68 65 06 F1 | 	add	objptr, ##42856
13ec8     32 D1 02 FB | 	rdlong	local22, objptr
13ecc     53 00 00 FF 
13ed0     68 65 86 F1 | 	sub	objptr, ##42856
13ed4     1E D0 0E F2 | 	cmp	local22, #30 wz
13ed8     38 00 90 5D |  if_ne	jmp	#LR__1720
13edc     5A AD 02 F6 | 	mov	local04, local08
13ee0     02 AC 66 F0 | 	shl	local04, #2
13ee4     E7 AE 02 F6 | 	mov	local05, fp
13ee8     2C AE 06 F1 | 	add	local05, #44
13eec     57 AD 02 F1 | 	add	local04, local05
13ef0     56 93 02 FB | 	rdlong	arg01, local04
13ef4     D0 39 B1 FD | 	call	#__system____builtin_atof
13ef8     28 CE 05 F1 | 	add	fp, #40
13efc     E7 7A 62 FC | 	wrlong	result1, fp
13f00     E7 92 02 F6 | 	mov	arg01, fp
13f04     28 CE 85 F1 | 	sub	fp, #40
13f08     49 95 02 FB | 	rdlong	arg02, arg01
13f0c     53 93 02 F6 | 	mov	arg01, local01
13f10     E8 D2 B0 FD | 	call	#_pslpoke
13f14                 | LR__1720
13f14                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
13f14     53 00 00 FF 
13f18     68 65 06 F1 | 	add	objptr, ##42856
13f1c     32 D1 02 FB | 	rdlong	local22, objptr
13f20     53 00 00 FF 
13f24     68 65 86 F1 | 	sub	objptr, ##42856
13f28     2B D0 0E F2 | 	cmp	local22, #43 wz
13f2c     53 93 02 A6 |  if_e	mov	arg01, local01
13f30     67 95 02 A6 |  if_e	mov	arg02, local21
13f34     C4 D2 B0 AD |  if_e	call	#_pslpoke
13f38     53 93 02 F6 | 	mov	arg01, local01
13f3c     08 92 06 F1 | 	add	arg01, #8
13f40     53 00 00 FF 
13f44     68 65 06 F1 | 	add	objptr, ##42856
13f48     32 D3 02 FB | 	rdlong	local23, objptr
13f4c     53 00 00 FF 
13f50     68 65 86 F1 | 	sub	objptr, ##42856
13f54     69 95 02 F6 | 	mov	arg02, local23
13f58     A0 D2 B0 FD | 	call	#_pslpoke
13f5c                 | LR__1721
13f5c                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
13f5c     05 D8 0E F2 | 	cmp	local26, #5 wz
13f60     53 00 00 AF 
13f64     68 65 06 A1 |  if_e	add	objptr, ##42856
13f68     32 D3 02 AB |  if_e	rdlong	local23, objptr
13f6c     53 00 00 AF 
13f70     68 65 86 A1 |  if_e	sub	objptr, ##42856
13f74     2B D2 0E A2 |  if_e	cmp	local23, #43 wz
13f78     67 D3 02 A6 |  if_e	mov	local23, local21
13f7c     53 93 02 A6 |  if_e	mov	arg01, local01
13f80     69 95 02 A6 |  if_e	mov	arg02, local23
13f84     74 D2 B0 AD |  if_e	call	#_pslpoke
13f88                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
13f88     04 D8 0E F2 | 	cmp	local26, #4 wz
13f8c     48 00 90 5D |  if_ne	jmp	#LR__1722
13f90     53 00 00 FF 
13f94     68 65 06 F1 | 	add	objptr, ##42856
13f98     32 D3 02 FB | 	rdlong	local23, objptr
13f9c     53 00 00 FF 
13fa0     68 65 86 F1 | 	sub	objptr, ##42856
13fa4     2B D2 0E F2 | 	cmp	local23, #43 wz
13fa8     2C 00 90 AD |  if_e	jmp	#LR__1722
13fac     5A AF 02 F6 | 	mov	local05, local08
13fb0     02 AE 66 F0 | 	shl	local05, #2
13fb4     E7 B0 02 F6 | 	mov	local06, fp
13fb8     2C B0 06 F1 | 	add	local06, #44
13fbc     58 AF 02 F1 | 	add	local05, local06
13fc0     57 93 02 FB | 	rdlong	arg01, local05
13fc4     00 94 06 F6 | 	mov	arg02, #0
13fc8     64 37 B1 FD | 	call	#__system____builtin_atoi
13fcc     3D 95 02 F6 | 	mov	arg02, result1
13fd0     53 93 02 F6 | 	mov	arg01, local01
13fd4     24 D2 B0 FD | 	call	#_pslpoke
13fd8                 | LR__1722
13fd8                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
13fd8     02 D8 0E F2 | 	cmp	local26, #2 wz
13fdc     48 00 90 5D |  if_ne	jmp	#LR__1723
13fe0     53 00 00 FF 
13fe4     68 65 06 F1 | 	add	objptr, ##42856
13fe8     32 D3 02 FB | 	rdlong	local23, objptr
13fec     53 00 00 FF 
13ff0     68 65 86 F1 | 	sub	objptr, ##42856
13ff4     2B D2 0E F2 | 	cmp	local23, #43 wz
13ff8     2C 00 90 AD |  if_e	jmp	#LR__1723
13ffc     5A AF 02 F6 | 	mov	local05, local08
14000     02 AE 66 F0 | 	shl	local05, #2
14004     E7 B0 02 F6 | 	mov	local06, fp
14008     2C B0 06 F1 | 	add	local06, #44
1400c     58 AF 02 F1 | 	add	local05, local06
14010     57 93 02 FB | 	rdlong	arg01, local05
14014     00 94 06 F6 | 	mov	arg02, #0
14018     14 37 B1 FD | 	call	#__system____builtin_atoi
1401c     3D 95 02 F6 | 	mov	arg02, result1
14020     53 93 02 F6 | 	mov	arg01, local01
14024     1C D2 B0 FD | 	call	#_psdpoke
14028                 | LR__1723
14028                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
14028     01 D8 0E F2 | 	cmp	local26, #1 wz
1402c     48 00 90 5D |  if_ne	jmp	#LR__1724
14030     53 00 00 FF 
14034     68 65 06 F1 | 	add	objptr, ##42856
14038     32 D3 02 FB | 	rdlong	local23, objptr
1403c     53 00 00 FF 
14040     68 65 86 F1 | 	sub	objptr, ##42856
14044     2B D2 0E F2 | 	cmp	local23, #43 wz
14048     2C 00 90 AD |  if_e	jmp	#LR__1724
1404c     5A AF 02 F6 | 	mov	local05, local08
14050     02 AE 66 F0 | 	shl	local05, #2
14054     E7 B0 02 F6 | 	mov	local06, fp
14058     2C B0 06 F1 | 	add	local06, #44
1405c     58 AF 02 F1 | 	add	local05, local06
14060     57 93 02 FB | 	rdlong	arg01, local05
14064     00 94 06 F6 | 	mov	arg02, #0
14068     C4 36 B1 FD | 	call	#__system____builtin_atoi
1406c     3D 95 02 F6 | 	mov	arg02, result1
14070     53 93 02 F6 | 	mov	arg01, local01
14074     14 D2 B0 FD | 	call	#_pspoke
14078                 | LR__1724
14078                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
14078     06 D8 0E F2 | 	cmp	local26, #6 wz
1407c     54 00 90 5D |  if_ne	jmp	#LR__1725
14080     53 00 00 FF 
14084     68 65 06 F1 | 	add	objptr, ##42856
14088     32 D3 02 FB | 	rdlong	local23, objptr
1408c     53 00 00 FF 
14090     68 65 86 F1 | 	sub	objptr, ##42856
14094     2B D2 0E F2 | 	cmp	local23, #43 wz
14098     38 00 90 AD |  if_e	jmp	#LR__1725
1409c     5A AD 02 F6 | 	mov	local04, local08
140a0     02 AC 66 F0 | 	shl	local04, #2
140a4     E7 AE 02 F6 | 	mov	local05, fp
140a8     2C AE 06 F1 | 	add	local05, #44
140ac     57 AD 02 F1 | 	add	local04, local05
140b0     56 93 02 FB | 	rdlong	arg01, local04
140b4     10 38 B1 FD | 	call	#__system____builtin_atof
140b8     28 CE 05 F1 | 	add	fp, #40
140bc     E7 7A 62 FC | 	wrlong	result1, fp
140c0     E7 92 02 F6 | 	mov	arg01, fp
140c4     28 CE 85 F1 | 	sub	fp, #40
140c8     49 95 02 FB | 	rdlong	arg02, arg01
140cc     53 93 02 F6 | 	mov	arg01, local01
140d0     28 D1 B0 FD | 	call	#_pslpoke
140d4                 | LR__1725
140d4     01 B4 06 F1 | 	add	local08, #1
140d8     30 F9 9F FD | 	jmp	#LR__1693
140dc                 | LR__1726
140dc                 | LR__1727
140dc     E7 F0 03 F6 | 	mov	ptra, fp
140e0     F2 00 A0 FD | 	call	#popregs_
140e4                 | _do_input_ret
140e4     2D 00 64 FD | 	ret
140e8                 | 
140e8                 | ' 
140e8                 | ' ' ----------------  left$
140e8                 | ' 
140e8                 | ' sub do_left
140e8                 | _do_left
140e8     01 CA 05 F6 | 	mov	COUNT_, #1
140ec     E8 00 A0 FD | 	call	#pushregs_
140f0     14 F0 07 F1 | 	add	ptra, #20
140f4     4B 00 00 FF 
140f8     A0 64 06 F1 | 	add	objptr, ##38560
140fc     32 97 02 FB | 	rdlong	arg03, objptr
14100     4B 95 02 F6 | 	mov	arg02, arg03
14104     01 94 66 F0 | 	shl	arg02, #1
14108     4B 95 02 F1 | 	add	arg02, arg03
1410c     02 94 66 F0 | 	shl	arg02, #2
14110     03 00 00 FF 
14114     04 64 86 F1 | 	sub	objptr, ##1540
14118     32 95 02 F1 | 	add	arg02, objptr
1411c     4A 97 02 FB | 	rdlong	arg03, arg02
14120                 | ' 
14120                 | ' numpar=compiledline(lineptr_e).result.uresult
14120                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
14120     02 96 0E F2 | 	cmp	arg03, #2 wz
14124     48 00 00 FF 
14128     9C 64 86 F1 | 	sub	objptr, ##37020
1412c     40 00 90 AD |  if_e	jmp	#LR__1730
14130     00 92 06 F6 | 	mov	arg01, #0
14134     28 5E B1 FD | 	call	#__system___getiolock_0622
14138     3D 93 02 F6 | 	mov	arg01, result1
1413c     9C 08 B1 FD | 	call	#__system___lockmem
14140     97 01 00 FF 
14144     92 95 06 F6 | 	mov	arg02, ##@LR__6026
14148     00 92 06 F6 | 	mov	arg01, #0
1414c     00 96 06 F6 | 	mov	arg03, #0
14150     7C 15 B1 FD | 	call	#__system___basic_print_string
14154     00 92 06 F6 | 	mov	arg01, #0
14158     04 5E B1 FD | 	call	#__system___getiolock_0622
1415c     3D 01 68 FC | 	wrlong	#0, result1
14160     27 92 06 F6 | 	mov	arg01, #39
14164     00 94 06 F6 | 	mov	arg02, #0
14168     F4 CE B0 FD | 	call	#_printerror
1416c     D8 00 90 FD | 	jmp	#LR__1733
14170                 | LR__1730
14170     34 95 BF FD | 	call	#_pop
14174     3F 97 02 F6 | 	mov	arg03, result3
14178     E7 7A 62 FC | 	wrlong	result1, fp
1417c     04 CE 05 F1 | 	add	fp, #4
14180     E7 7C 62 FC | 	wrlong	result2, fp
14184     04 CE 05 F1 | 	add	fp, #4
14188     E7 96 62 FC | 	wrlong	arg03, fp
1418c     08 CE 85 F1 | 	sub	fp, #8
14190     E7 92 02 F6 | 	mov	arg01, fp
14194     EC 96 BF FD | 	call	#_converttoint
14198     3D A7 02 F6 | 	mov	local01, result1
1419c     08 95 BF FD | 	call	#_pop
141a0     3F 97 02 F6 | 	mov	arg03, result3
141a4     E7 7A 62 FC | 	wrlong	result1, fp
141a8     04 CE 05 F1 | 	add	fp, #4
141ac     E7 7C 62 FC | 	wrlong	result2, fp
141b0     04 CE 05 F1 | 	add	fp, #4
141b4     E7 96 62 FC | 	wrlong	arg03, fp
141b8                 | ' t1=pop() : arg=converttoint(t1)
141b8                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
141b8     08 CE 85 F1 | 	sub	fp, #8
141bc     2B 96 0E F2 | 	cmp	arg03, #43 wz
141c0     18 00 90 5D |  if_ne	jmp	#LR__1731
141c4     E7 92 02 FB | 	rdlong	arg01, fp
141c8     4C 96 BF FD | 	call	#_convertstring
141cc     E7 7A 62 FC | 	wrlong	result1, fp
141d0     08 CE 05 F1 | 	add	fp, #8
141d4     E7 3E 68 FC | 	wrlong	#31, fp
141d8     08 CE 85 F1 | 	sub	fp, #8
141dc                 | LR__1731
141dc                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
141dc     08 CE 05 F1 | 	add	fp, #8
141e0     E7 96 02 FB | 	rdlong	arg03, fp
141e4     08 CE 85 F1 | 	sub	fp, #8
141e8     1F 96 0E F2 | 	cmp	arg03, #31 wz
141ec     40 00 90 AD |  if_e	jmp	#LR__1732
141f0     00 92 06 F6 | 	mov	arg01, #0
141f4     68 5D B1 FD | 	call	#__system___getiolock_0622
141f8     3D 93 02 F6 | 	mov	arg01, result1
141fc     DC 07 B1 FD | 	call	#__system___lockmem
14200     97 01 00 FF 
14204     9A 95 06 F6 | 	mov	arg02, ##@LR__6027
14208     00 92 06 F6 | 	mov	arg01, #0
1420c     00 96 06 F6 | 	mov	arg03, #0
14210     BC 14 B1 FD | 	call	#__system___basic_print_string
14214     00 92 06 F6 | 	mov	arg01, #0
14218     44 5D B1 FD | 	call	#__system___getiolock_0622
1421c     3D 01 68 FC | 	wrlong	#0, result1
14220     0F 92 06 F6 | 	mov	arg01, #15
14224     00 94 06 F6 | 	mov	arg02, #0
14228     34 CE B0 FD | 	call	#_printerror
1422c     18 00 90 FD | 	jmp	#LR__1733
14230                 | LR__1732
14230     E7 92 02 FB | 	rdlong	arg01, fp
14234     53 95 02 F6 | 	mov	arg02, local01
14238     48 20 B1 FD | 	call	#__system__Left_S
1423c     E7 7A 62 FC | 	wrlong	result1, fp
14240     E7 92 02 F6 | 	mov	arg01, fp
14244     F0 94 BF FD | 	call	#_push
14248                 | LR__1733
14248     E7 F0 03 F6 | 	mov	ptra, fp
1424c     F2 00 A0 FD | 	call	#popregs_
14250                 | _do_left_ret
14250     2D 00 64 FD | 	ret
14254                 | 
14254                 | ' 
14254                 | ' ' ----------------  len
14254                 | ' 
14254                 | ' sub do_len
14254                 | _do_len
14254     01 CA 05 F6 | 	mov	COUNT_, #1
14258     E8 00 A0 FD | 	call	#pushregs_
1425c     14 F0 07 F1 | 	add	ptra, #20
14260     4B 00 00 FF 
14264     A0 64 06 F1 | 	add	objptr, ##38560
14268     32 97 02 FB | 	rdlong	arg03, objptr
1426c     4B 95 02 F6 | 	mov	arg02, arg03
14270     01 94 66 F0 | 	shl	arg02, #1
14274     4B 95 02 F1 | 	add	arg02, arg03
14278     02 94 66 F0 | 	shl	arg02, #2
1427c     03 00 00 FF 
14280     04 64 86 F1 | 	sub	objptr, ##1540
14284     32 95 02 F1 | 	add	arg02, objptr
14288     4A 97 02 FB | 	rdlong	arg03, arg02
1428c                 | ' 
1428c                 | ' numpar=compiledline(lineptr_e).result.uresult
1428c                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
1428c     02 96 16 F2 | 	cmp	arg03, #2 wc
14290     48 00 00 FF 
14294     9C 64 86 F1 | 	sub	objptr, ##37020
14298     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1429c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1740
142a0     00 92 06 F6 | 	mov	arg01, #0
142a4     B8 5C B1 FD | 	call	#__system___getiolock_0622
142a8     3D 93 02 F6 | 	mov	arg01, result1
142ac     2C 07 B1 FD | 	call	#__system___lockmem
142b0     97 01 00 FF 
142b4     A2 95 06 F6 | 	mov	arg02, ##@LR__6028
142b8     00 92 06 F6 | 	mov	arg01, #0
142bc     00 96 06 F6 | 	mov	arg03, #0
142c0     0C 14 B1 FD | 	call	#__system___basic_print_string
142c4     00 92 06 F6 | 	mov	arg01, #0
142c8     94 5C B1 FD | 	call	#__system___getiolock_0622
142cc     3D 01 68 FC | 	wrlong	#0, result1
142d0     27 92 06 F6 | 	mov	arg01, #39
142d4     00 94 06 F6 | 	mov	arg02, #0
142d8     84 CD B0 FD | 	call	#_printerror
142dc     C8 00 90 FD | 	jmp	#LR__1745
142e0                 | LR__1740
142e0     C4 93 BF FD | 	call	#_pop
142e4     3F 97 02 F6 | 	mov	arg03, result3
142e8     E7 7A 62 FC | 	wrlong	result1, fp
142ec     04 CE 05 F1 | 	add	fp, #4
142f0     E7 7C 62 FC | 	wrlong	result2, fp
142f4     04 CE 05 F1 | 	add	fp, #4
142f8     E7 96 62 FC | 	wrlong	arg03, fp
142fc                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
142fc     08 CE 85 F1 | 	sub	fp, #8
14300     2B 96 0E F2 | 	cmp	arg03, #43 wz
14304     18 00 90 5D |  if_ne	jmp	#LR__1741
14308     E7 92 02 FB | 	rdlong	arg01, fp
1430c     08 95 BF FD | 	call	#_convertstring
14310     E7 7A 62 FC | 	wrlong	result1, fp
14314     08 CE 05 F1 | 	add	fp, #8
14318     E7 3E 68 FC | 	wrlong	#31, fp
1431c     08 CE 85 F1 | 	sub	fp, #8
14320                 | LR__1741
14320                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
14320     08 CE 05 F1 | 	add	fp, #8
14324     E7 96 02 FB | 	rdlong	arg03, fp
14328     08 CE 85 F1 | 	sub	fp, #8
1432c     1F 96 0E F2 | 	cmp	arg03, #31 wz
14330     40 00 90 AD |  if_e	jmp	#LR__1742
14334     00 92 06 F6 | 	mov	arg01, #0
14338     24 5C B1 FD | 	call	#__system___getiolock_0622
1433c     3D 93 02 F6 | 	mov	arg01, result1
14340     98 06 B1 FD | 	call	#__system___lockmem
14344     97 01 00 FF 
14348     A8 95 06 F6 | 	mov	arg02, ##@LR__6029
1434c     00 92 06 F6 | 	mov	arg01, #0
14350     00 96 06 F6 | 	mov	arg03, #0
14354     78 13 B1 FD | 	call	#__system___basic_print_string
14358     00 92 06 F6 | 	mov	arg01, #0
1435c     00 5C B1 FD | 	call	#__system___getiolock_0622
14360     3D 01 68 FC | 	wrlong	#0, result1
14364     0F 92 06 F6 | 	mov	arg01, #15
14368     00 94 06 F6 | 	mov	arg02, #0
1436c     F0 CC B0 FD | 	call	#_printerror
14370     34 00 90 FD | 	jmp	#LR__1745
14374                 | LR__1742
14374     E7 92 02 FB | 	rdlong	arg01, fp
14378     49 A7 02 F6 | 	mov	local01, arg01
1437c     D7 06 48 FB | 	callpa	#(@LR__1744-@LR__1743)>>2,fcache_load_ptr_
14380                 | LR__1743
14380     53 7B CA FA | 	rdbyte	result1, local01 wz
14384     01 A6 06 51 |  if_ne	add	local01, #1
14388     F4 FF 9F 5D |  if_ne	jmp	#LR__1743
1438c                 | LR__1744
1438c     49 A7 82 F1 | 	sub	local01, arg01
14390     E7 A6 62 FC | 	wrlong	local01, fp
14394     08 CE 05 F1 | 	add	fp, #8
14398     E7 38 68 FC | 	wrlong	#28, fp
1439c     08 CE 85 F1 | 	sub	fp, #8
143a0     E7 92 02 F6 | 	mov	arg01, fp
143a4     90 93 BF FD | 	call	#_push
143a8                 | LR__1745
143a8     E7 F0 03 F6 | 	mov	ptra, fp
143ac     F2 00 A0 FD | 	call	#popregs_
143b0                 | _do_len_ret
143b0     2D 00 64 FD | 	ret
143b4                 | 
143b4                 | ' 
143b4                 | ' ' ----------------  list
143b4                 | ' 
143b4                 | ' sub do_list
143b4                 | _do_list
143b4     04 CA 05 F6 | 	mov	COUNT_, #4
143b8     E8 00 A0 FD | 	call	#pushregs_
143bc     B8 F0 07 F1 | 	add	ptra, #184
143c0     00 A6 06 F6 | 	mov	local01, #0
143c4     1E A8 CE F9 | 	bmask	local02, #30
143c8     4B 00 00 FF 
143cc     A0 64 06 F1 | 	add	objptr, ##38560
143d0     32 AB 02 FB | 	rdlong	local03, objptr
143d4     55 97 02 F6 | 	mov	arg03, local03
143d8     01 96 66 F0 | 	shl	arg03, #1
143dc     55 97 02 F1 | 	add	arg03, local03
143e0     02 96 66 F0 | 	shl	arg03, #2
143e4     03 00 00 FF 
143e8     04 64 86 F1 | 	sub	objptr, ##1540
143ec     32 97 02 F1 | 	add	arg03, objptr
143f0     4B AD 02 FB | 	rdlong	local04, arg03
143f4                 | ' 
143f4                 | ' startline=0 : endline=$7FFFFFFF
143f4                 | ' numpar=compiledline(lineptr_e).result.uresult
143f4                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
143f4     01 AC 0E F2 | 	cmp	local04, #1 wz
143f8     48 00 00 FF 
143fc     9C 64 86 F1 | 	sub	objptr, ##37020
14400     34 00 90 5D |  if_ne	jmp	#LR__1750
14404     A0 92 BF FD | 	call	#_pop
14408     3F AB 02 F6 | 	mov	local03, result3
1440c     0C CE 05 F1 | 	add	fp, #12
14410     E7 7A 62 FC | 	wrlong	result1, fp
14414     04 CE 05 F1 | 	add	fp, #4
14418     E7 7C 62 FC | 	wrlong	result2, fp
1441c     04 CE 05 F1 | 	add	fp, #4
14420     E7 AA 62 FC | 	wrlong	local03, fp
14424     08 CE 85 F1 | 	sub	fp, #8
14428     E7 92 02 F6 | 	mov	arg01, fp
1442c     0C CE 85 F1 | 	sub	fp, #12
14430     50 94 BF FD | 	call	#_converttoint
14434     3D A7 02 F6 | 	mov	local01, result1
14438                 | LR__1750
14438                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
14438     02 AC 0E F2 | 	cmp	local04, #2 wz
1443c     68 00 90 5D |  if_ne	jmp	#LR__1751
14440     64 92 BF FD | 	call	#_pop
14444     3F AB 02 F6 | 	mov	local03, result3
14448     0C CE 05 F1 | 	add	fp, #12
1444c     E7 7A 62 FC | 	wrlong	result1, fp
14450     04 CE 05 F1 | 	add	fp, #4
14454     E7 7C 62 FC | 	wrlong	result2, fp
14458     04 CE 05 F1 | 	add	fp, #4
1445c     E7 AA 62 FC | 	wrlong	local03, fp
14460     08 CE 85 F1 | 	sub	fp, #8
14464     E7 92 02 F6 | 	mov	arg01, fp
14468     0C CE 85 F1 | 	sub	fp, #12
1446c     14 94 BF FD | 	call	#_converttoint
14470     3D A9 02 F6 | 	mov	local02, result1
14474     30 92 BF FD | 	call	#_pop
14478     3F AB 02 F6 | 	mov	local03, result3
1447c     0C CE 05 F1 | 	add	fp, #12
14480     E7 7A 62 FC | 	wrlong	result1, fp
14484     04 CE 05 F1 | 	add	fp, #4
14488     E7 7C 62 FC | 	wrlong	result2, fp
1448c     04 CE 05 F1 | 	add	fp, #4
14490     E7 AA 62 FC | 	wrlong	local03, fp
14494     08 CE 85 F1 | 	sub	fp, #8
14498     E7 92 02 F6 | 	mov	arg01, fp
1449c     0C CE 85 F1 | 	sub	fp, #12
144a0     E0 93 BF FD | 	call	#_converttoint
144a4     3D A7 02 F6 | 	mov	local01, result1
144a8                 | LR__1751
144a8                 | ' 
144a8                 | ' 
144a8                 | ' print
144a8     00 92 06 F6 | 	mov	arg01, #0
144ac     B0 5A B1 FD | 	call	#__system___getiolock_0622
144b0     3D 93 02 F6 | 	mov	arg01, result1
144b4     24 05 B1 FD | 	call	#__system___lockmem
144b8     00 92 06 F6 | 	mov	arg01, #0
144bc     0A 94 06 F6 | 	mov	arg02, #10
144c0     00 96 06 F6 | 	mov	arg03, #0
144c4     B0 11 B1 FD | 	call	#__system___basic_print_char
144c8     00 92 06 F6 | 	mov	arg01, #0
144cc     90 5A B1 FD | 	call	#__system___getiolock_0622
144d0     3D 01 68 FC | 	wrlong	#0, result1
144d4     4B 00 00 FF 
144d8     A8 64 06 F1 | 	add	objptr, ##38568
144dc     32 AD 02 FB | 	rdlong	local04, objptr
144e0     08 00 00 FF 
144e4     CC 64 06 F1 | 	add	objptr, ##4300
144e8     32 AD 62 FC | 	wrlong	local04, objptr
144ec     53 00 00 FF 
144f0     74 65 86 F1 | 	sub	objptr, ##42868
144f4                 | ' do 
144f4                 | LR__1752
144f4     E7 92 02 F6 | 	mov	arg01, fp
144f8     20 92 06 F1 | 	add	arg01, #32
144fc     53 00 00 FF 
14500     74 65 06 F1 | 	add	objptr, ##42868
14504     32 95 02 FB | 	rdlong	arg02, objptr
14508     18 96 06 F6 | 	mov	arg03, #24
1450c     48 00 00 FF 
14510     A8 64 86 F1 | 	sub	objptr, ##37032
14514     A4 F8 B0 FD | 	call	#_psram_spin2_read1
14518     0B 00 00 FF 
1451c     CC 64 86 F1 | 	sub	objptr, ##5836
14520                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
14520                 | '   
14520                 | '   if header(0)<> $FFFFFFFF then
14520     20 CE 05 F1 | 	add	fp, #32
14524     E7 AC 02 FB | 	rdlong	local04, fp
14528     20 CE 85 F1 | 	sub	fp, #32
1452c     FF FF 7F FF 
14530     FF AD 0E F2 | 	cmp	local04, ##-1 wz
14534     9C 00 90 AD |  if_e	jmp	#LR__1754
14538     E7 92 02 F6 | 	mov	arg01, fp
1453c     38 92 06 F1 | 	add	arg01, #56
14540     3F 96 06 F6 | 	mov	arg03, #63
14544     28 96 62 FD | 	setq	arg03
14548     49 01 68 FC | 	wrlong	#0, arg01
1454c     E7 92 02 F6 | 	mov	arg01, fp
14550     38 92 06 F1 | 	add	arg01, #56
14554     28 CE 05 F1 | 	add	fp, #40
14558     E7 94 02 FB | 	rdlong	arg02, fp
1455c     04 CE 05 F1 | 	add	fp, #4
14560     E7 96 02 FB | 	rdlong	arg03, fp
14564     2C CE 85 F1 | 	sub	fp, #44
14568     0B 00 00 FF 
1456c     CC 64 06 F1 | 	add	objptr, ##5836
14570     48 F8 B0 FD | 	call	#_psram_spin2_read1
14574     0B 00 00 FF 
14578     CC 64 86 F1 | 	sub	objptr, ##5836
1457c                 | '     longfill(linebuf,0,64)
1457c                 | '     psram.read1(varptr(linebuf),header(2),header(3))
1457c                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
1457c     20 CE 05 F1 | 	add	fp, #32
14580     E7 AC 02 FB | 	rdlong	local04, fp
14584     20 CE 85 F1 | 	sub	fp, #32
14588     53 AD 52 F2 | 	cmps	local04, local01 wc
1458c     24 00 90 CD |  if_b	jmp	#LR__1753
14590     20 CE 05 F1 | 	add	fp, #32
14594     E7 AA 02 FB | 	rdlong	local03, fp
14598     20 CE 85 F1 | 	sub	fp, #32
1459c     54 AB 5A F2 | 	cmps	local03, local02 wcz
145a0     10 00 90 1D |  if_a	jmp	#LR__1753
145a4     E7 92 02 F6 | 	mov	arg01, fp
145a8     38 92 06 F1 | 	add	arg01, #56
145ac                 | ' 
145ac                 | ' write(text)
145ac     10 EC B0 FD | 	call	#_hg010b_spin2_write
145b0                 | ' crlf
145b0     AC F0 B0 FD | 	call	#_hg010b_spin2_crlf
145b4                 | LR__1753
145b4     34 CE 05 F1 | 	add	fp, #52
145b8     E7 AC 02 FB | 	rdlong	local04, fp
145bc     34 CE 85 F1 | 	sub	fp, #52
145c0     53 00 00 FF 
145c4     74 65 06 F1 | 	add	objptr, ##42868
145c8     32 AD 62 FC | 	wrlong	local04, objptr
145cc     53 00 00 FF 
145d0     74 65 86 F1 | 	sub	objptr, ##42868
145d4                 | LR__1754
145d4     34 CE 05 F1 | 	add	fp, #52
145d8     E7 AC 02 FB | 	rdlong	local04, fp
145dc     34 CE 85 F1 | 	sub	fp, #52
145e0     FF FF 3F FF 
145e4     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
145e8     20 CE 05 51 |  if_ne	add	fp, #32
145ec     E7 AA 02 5B |  if_ne	rdlong	local03, fp
145f0     20 CE 85 51 |  if_ne	sub	fp, #32
145f4     FF FF 7F 5F 
145f8     FF AB 0E 52 |  if_ne	cmp	local03, ##-1 wz
145fc     F4 FE 9F 5D |  if_ne	jmp	#LR__1752
14600     E7 F0 03 F6 | 	mov	ptra, fp
14604     F2 00 A0 FD | 	call	#popregs_
14608                 | _do_list_ret
14608     2D 00 64 FD | 	ret
1460c                 | 
1460c                 | ' 
1460c                 | ' '-------------------- load
1460c                 | ' 
1460c                 | ' sub do_load(amode=0 as integer)  
1460c                 | _do_load
1460c     07 CA 05 F6 | 	mov	COUNT_, #7
14610     E8 00 A0 FD | 	call	#pushregs_
14614     AC F0 07 F1 | 	add	ptra, #172
14618     49 AD 02 F6 | 	mov	local04, arg01
1461c     53 00 00 FF 
14620     2C 65 06 F1 | 	add	objptr, ##42796
14624     32 03 68 FC | 	wrlong	#1, objptr
14628     08 00 00 FF 
1462c     8C 64 86 F1 | 	sub	objptr, ##4236
14630     32 95 02 FB | 	rdlong	arg02, objptr
14634     4A 93 02 F6 | 	mov	arg01, arg02
14638     01 92 66 F0 | 	shl	arg01, #1
1463c     4A 93 02 F1 | 	add	arg01, arg02
14640     02 92 66 F0 | 	shl	arg01, #2
14644     03 00 00 FF 
14648     04 64 86 F1 | 	sub	objptr, ##1540
1464c     32 93 02 F1 | 	add	arg01, objptr
14650     49 AF 02 FB | 	rdlong	local05, arg01
14654     E7 92 02 F6 | 	mov	arg01, fp
14658     A8 92 06 F1 | 	add	arg01, #168
1465c     48 00 00 FF 
14660     9C 64 86 F1 | 	sub	objptr, ##37020
14664     E7 94 02 F6 | 	mov	arg02, fp
14668     28 94 06 F1 | 	add	arg02, #40
1466c     49 95 62 FC | 	wrlong	arg02, arg01
14670                 | ' 
14670                 | ' inload=1
14670                 | ' numpar=compiledline(lineptr_e).result.uresult
14670                 | ' lpoke varptr(line2$),varptr(line2)
14670                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
14670     01 AE 56 F2 | 	cmps	local05, #1 wc
14674     14 00 90 CD |  if_b	jmp	#LR__1760
14678     2C 90 BF FD | 	call	#_pop
1467c     3D A7 02 F6 | 	mov	local01, result1
14680     3E A9 02 F6 | 	mov	local02, result2
14684     3F AB 02 F6 | 	mov	local03, result3
14688     18 00 90 FD | 	jmp	#LR__1761
1468c                 | LR__1760
1468c     53 00 00 FF 
14690     1C 65 06 F1 | 	add	objptr, ##42780
14694     32 A7 02 FB | 	rdlong	local01, objptr
14698     53 00 00 FF 
1469c     1C 65 86 F1 | 	sub	objptr, ##42780
146a0     1F AA 06 F6 | 	mov	local03, #31
146a4                 | LR__1761
146a4                 | ' 'print "popped "; t1.result.uresult, t1.result_type
146a4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
146a4     2B AA 0E F2 | 	cmp	local03, #43 wz
146a8     10 00 90 5D |  if_ne	jmp	#LR__1762
146ac     53 93 02 F6 | 	mov	arg01, local01
146b0     64 91 BF FD | 	call	#_convertstring
146b4     3D A7 02 F6 | 	mov	local01, result1
146b8     1F AA 06 F6 | 	mov	local03, #31
146bc                 | LR__1762
146bc                 | ' if t1.result_type=result_string then
146bc     1F AA 0E F2 | 	cmp	local03, #31 wz
146c0     7C 02 90 5D |  if_ne	jmp	#LR__1766
146c4                 | '   if amode<>1234 then do_new
146c4     02 00 00 FF 
146c8     D2 AC 0E F2 | 	cmp	local04, ##1234 wz
146cc     D8 0D B0 5D |  if_ne	call	#_do_new
146d0                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
146d0     97 01 00 FF 
146d4     AE 95 06 F6 | 	mov	arg02, ##@LR__6030
146d8     53 93 02 F6 | 	mov	arg01, local01
146dc     24 03 B1 FD | 	call	#__system___string_cmp
146e0     00 7A 0E F2 | 	cmp	result1, #0 wz
146e4     53 00 00 AF 
146e8     1C 65 06 A1 |  if_e	add	objptr, ##42780
146ec     32 A7 02 AB |  if_e	rdlong	local01, objptr
146f0     53 00 00 FF 
146f4     1C 65 C6 F3 | 	sumz	objptr, ##42780
146f8     32 A7 62 5C |  if_ne	wrlong	local01, objptr
146fc     53 00 00 5F 
14700     1C 65 86 51 |  if_ne	sub	objptr, ##42780
14704                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
14704     09 92 06 F6 | 	mov	arg01, #9
14708     AC 4E B1 FD | 	call	#__system__close
1470c     09 AE 06 F6 | 	mov	local05, #9
14710     4B 00 00 FF 
14714     B4 64 06 F1 | 	add	objptr, ##38580
14718     32 93 02 FB | 	rdlong	arg01, objptr
1471c     4B 00 00 FF 
14720     B4 64 86 F1 | 	sub	objptr, ##38580
14724     97 01 00 FF 
14728     AF 95 06 F6 | 	mov	arg02, ##@LR__6031
1472c     08 03 B1 FD | 	call	#__system___string_concat
14730     3D 93 02 F6 | 	mov	arg01, result1
14734     53 95 02 F6 | 	mov	arg02, local01
14738     FC 02 B1 FD | 	call	#__system___string_concat
1473c     3D 95 02 F6 | 	mov	arg02, result1
14740     57 93 02 F6 | 	mov	arg01, local05
14744     00 96 06 F6 | 	mov	arg03, #0
14748     40 0E B1 FD | 	call	#__system___basic_open_string
1474c     20 68 06 F1 | 	add	ptr___system__dat__, #32
14750     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
14754     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
14758     20 68 86 F1 | 	sub	ptr___system__dat__, #32
1475c                 | '   r=geterr() 
1475c                 | '   if r then 
1475c     30 01 90 AD |  if_e	jmp	#LR__1764
14760                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
14760     09 92 06 F6 | 	mov	arg01, #9
14764     50 4E B1 FD | 	call	#__system__close
14768     09 B0 06 F6 | 	mov	local06, #9
1476c     4B 00 00 FF 
14770     B4 64 06 F1 | 	add	objptr, ##38580
14774     32 93 02 FB | 	rdlong	arg01, objptr
14778     4B 00 00 FF 
1477c     B4 64 86 F1 | 	sub	objptr, ##38580
14780     97 01 00 FF 
14784     B1 95 06 F6 | 	mov	arg02, ##@LR__6032
14788     AC 02 B1 FD | 	call	#__system___string_concat
1478c     3D 93 02 F6 | 	mov	arg01, result1
14790     53 95 02 F6 | 	mov	arg02, local01
14794     A0 02 B1 FD | 	call	#__system___string_concat
14798     3D 93 02 F6 | 	mov	arg01, result1
1479c     97 01 00 FF 
147a0     B3 95 06 F6 | 	mov	arg02, ##@LR__6033
147a4     90 02 B1 FD | 	call	#__system___string_concat
147a8     3D 95 02 F6 | 	mov	arg02, result1
147ac     58 93 02 F6 | 	mov	arg01, local06
147b0     00 96 06 F6 | 	mov	arg03, #0
147b4     D4 0D B1 FD | 	call	#__system___basic_open_string
147b8     20 68 06 F1 | 	add	ptr___system__dat__, #32
147bc     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
147c0     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
147c4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
147c8     3D B3 0A F6 | 	mov	local07, result1 wz
147cc                 | '     r=geterr() 
147cc                 | '     if r then 
147cc     8C 00 90 AD |  if_e	jmp	#LR__1763
147d0                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
147d0     00 92 06 F6 | 	mov	arg01, #0
147d4     88 57 B1 FD | 	call	#__system___getiolock_0622
147d8     3D 93 02 F6 | 	mov	arg01, result1
147dc     FC 01 B1 FD | 	call	#__system___lockmem
147e0     97 01 00 FF 
147e4     B8 95 06 F6 | 	mov	arg02, ##@LR__6034
147e8     00 92 06 F6 | 	mov	arg01, #0
147ec     00 96 06 F6 | 	mov	arg03, #0
147f0     DC 0E B1 FD | 	call	#__system___basic_print_string
147f4     00 92 06 F6 | 	mov	arg01, #0
147f8     59 95 02 F6 | 	mov	arg02, local07
147fc     00 96 06 F6 | 	mov	arg03, #0
14800     0A 98 06 F6 | 	mov	arg04, #10
14804     0C 0F B1 FD | 	call	#__system___basic_print_integer
14808     97 01 00 FF 
1480c     C6 95 06 F6 | 	mov	arg02, ##@LR__6035
14810     00 92 06 F6 | 	mov	arg01, #0
14814     00 96 06 F6 | 	mov	arg03, #0
14818     B4 0E B1 FD | 	call	#__system___basic_print_string
1481c     59 93 02 F6 | 	mov	arg01, local07
14820     68 23 B1 FD | 	call	#__system___strerror
14824     3D 95 02 F6 | 	mov	arg02, result1
14828     00 92 06 F6 | 	mov	arg01, #0
1482c     00 96 06 F6 | 	mov	arg03, #0
14830     9C 0E B1 FD | 	call	#__system___basic_print_string
14834     00 92 06 F6 | 	mov	arg01, #0
14838     0A 94 06 F6 | 	mov	arg02, #10
1483c     00 96 06 F6 | 	mov	arg03, #0
14840     34 0E B1 FD | 	call	#__system___basic_print_char
14844     00 92 06 F6 | 	mov	arg01, #0
14848     14 57 B1 FD | 	call	#__system___getiolock_0622
1484c     3D 01 68 FC | 	wrlong	#0, result1
14850     09 92 06 F6 | 	mov	arg01, #9
14854     60 4D B1 FD | 	call	#__system__close
14858     94 01 90 FD | 	jmp	#LR__1768
1485c                 | LR__1763
1485c     53 00 00 FF 
14860     1C 65 06 F1 | 	add	objptr, ##42780
14864     32 93 02 FB | 	rdlong	arg01, objptr
14868     53 00 00 FF 
1486c     1C 65 86 F1 | 	sub	objptr, ##42780
14870     97 01 00 FF 
14874     C9 95 06 F6 | 	mov	arg02, ##@LR__6036
14878     BC 01 B1 FD | 	call	#__system___string_concat
1487c     53 00 00 FF 
14880     1C 65 06 F1 | 	add	objptr, ##42780
14884     32 7B 62 FC | 	wrlong	result1, objptr
14888     53 00 00 FF 
1488c     1C 65 86 F1 | 	sub	objptr, ##42780
14890                 | LR__1764
14890                 | '   close #9: open currentdir$+"/"+loadname for input as #9
14890     09 92 06 F6 | 	mov	arg01, #9
14894     20 4D B1 FD | 	call	#__system__close
14898     09 B0 06 F6 | 	mov	local06, #9
1489c     4B 00 00 FF 
148a0     B4 64 06 F1 | 	add	objptr, ##38580
148a4     32 93 02 FB | 	rdlong	arg01, objptr
148a8     4B 00 00 FF 
148ac     B4 64 86 F1 | 	sub	objptr, ##38580
148b0     97 01 00 FF 
148b4     CE 95 06 F6 | 	mov	arg02, ##@LR__6037
148b8     7C 01 B1 FD | 	call	#__system___string_concat
148bc     3D 93 02 F6 | 	mov	arg01, result1
148c0     53 00 00 FF 
148c4     1C 65 06 F1 | 	add	objptr, ##42780
148c8     32 95 02 FB | 	rdlong	arg02, objptr
148cc     53 00 00 FF 
148d0     1C 65 86 F1 | 	sub	objptr, ##42780
148d4     60 01 B1 FD | 	call	#__system___string_concat
148d8     3D 95 02 F6 | 	mov	arg02, result1
148dc     58 93 02 F6 | 	mov	arg01, local06
148e0     00 96 06 F6 | 	mov	arg03, #0
148e4     A4 0C B1 FD | 	call	#__system___basic_open_string
148e8                 | '   do
148e8                 | LR__1765
148e8     09 92 06 F6 | 	mov	arg01, #9
148ec     F8 02 B1 FD | 	call	#__system___basic_read_line
148f0     3D B1 02 F6 | 	mov	local06, result1
148f4     38 00 00 FF 
148f8     3C 64 06 F1 | 	add	objptr, ##28732
148fc     32 B1 62 FC | 	wrlong	local06, objptr
14900     38 00 00 FF 
14904     3C 64 86 F1 | 	sub	objptr, ##28732
14908     74 D0 BE FD | 	call	#_interpret
1490c     38 00 00 FF 
14910     3C 64 06 F1 | 	add	objptr, ##28732
14914     32 93 02 FB | 	rdlong	arg01, objptr
14918     38 00 00 FF 
1491c     3C 64 86 F1 | 	sub	objptr, ##28732
14920     97 01 00 FF 
14924     D0 95 06 F6 | 	mov	arg02, ##@LR__6038
14928     D8 00 B1 FD | 	call	#__system___string_cmp
1492c     00 7A 0E F2 | 	cmp	result1, #0 wz
14930     B4 FF 9F 5D |  if_ne	jmp	#LR__1765
14934                 | '   close #9   
14934     09 92 06 F6 | 	mov	arg01, #9
14938     7C 4C B1 FD | 	call	#__system__close
1493c     0C 00 90 FD | 	jmp	#LR__1767
14940                 | LR__1766
14940     1E 92 06 F6 | 	mov	arg01, #30
14944     00 94 06 F6 | 	mov	arg02, #0
14948     14 C7 B0 FD | 	call	#_printerror
1494c                 | LR__1767
1494c                 | ' print "Loaded ";currentdir$+"/"+loadname
1494c     00 92 06 F6 | 	mov	arg01, #0
14950     0C 56 B1 FD | 	call	#__system___getiolock_0622
14954     3D 93 02 F6 | 	mov	arg01, result1
14958     80 00 B1 FD | 	call	#__system___lockmem
1495c     97 01 00 FF 
14960     D1 95 06 F6 | 	mov	arg02, ##@LR__6039
14964     00 92 06 F6 | 	mov	arg01, #0
14968     00 96 06 F6 | 	mov	arg03, #0
1496c     60 0D B1 FD | 	call	#__system___basic_print_string
14970     00 B2 06 F6 | 	mov	local07, #0
14974     4B 00 00 FF 
14978     B4 64 06 F1 | 	add	objptr, ##38580
1497c     32 93 02 FB | 	rdlong	arg01, objptr
14980     4B 00 00 FF 
14984     B4 64 86 F1 | 	sub	objptr, ##38580
14988     97 01 00 FF 
1498c     D9 95 06 F6 | 	mov	arg02, ##@LR__6040
14990     A4 00 B1 FD | 	call	#__system___string_concat
14994     3D 93 02 F6 | 	mov	arg01, result1
14998     53 00 00 FF 
1499c     1C 65 06 F1 | 	add	objptr, ##42780
149a0     32 95 02 FB | 	rdlong	arg02, objptr
149a4     53 00 00 FF 
149a8     1C 65 86 F1 | 	sub	objptr, ##42780
149ac     88 00 B1 FD | 	call	#__system___string_concat
149b0     3D 95 02 F6 | 	mov	arg02, result1
149b4     59 93 02 F6 | 	mov	arg01, local07
149b8     00 96 06 F6 | 	mov	arg03, #0
149bc     10 0D B1 FD | 	call	#__system___basic_print_string
149c0     00 92 06 F6 | 	mov	arg01, #0
149c4     0A 94 06 F6 | 	mov	arg02, #10
149c8     00 96 06 F6 | 	mov	arg03, #0
149cc     A8 0C B1 FD | 	call	#__system___basic_print_char
149d0     00 92 06 F6 | 	mov	arg01, #0
149d4     88 55 B1 FD | 	call	#__system___getiolock_0622
149d8     3D 01 68 FC | 	wrlong	#0, result1
149dc     53 00 00 FF 
149e0     2C 65 06 F1 | 	add	objptr, ##42796
149e4     32 01 68 FC | 	wrlong	#0, objptr
149e8     53 00 00 FF 
149ec     2C 65 86 F1 | 	sub	objptr, ##42796
149f0                 | LR__1768
149f0     E7 F0 03 F6 | 	mov	ptra, fp
149f4     F2 00 A0 FD | 	call	#popregs_
149f8                 | _do_load_ret
149f8     2D 00 64 FD | 	ret
149fc                 | 
149fc                 | ' 
149fc                 | ' '-------------------- log
149fc                 | ' 
149fc                 | ' sub do_log
149fc                 | _do_log
149fc     02 CA 05 F6 | 	mov	COUNT_, #2
14a00     E8 00 A0 FD | 	call	#pushregs_
14a04     14 F0 07 F1 | 	add	ptra, #20
14a08     4B 00 00 FF 
14a0c     A0 64 06 F1 | 	add	objptr, ##38560
14a10     32 97 02 FB | 	rdlong	arg03, objptr
14a14     4B 95 02 F6 | 	mov	arg02, arg03
14a18     01 94 66 F0 | 	shl	arg02, #1
14a1c     4B 95 02 F1 | 	add	arg02, arg03
14a20     02 94 66 F0 | 	shl	arg02, #2
14a24     03 00 00 FF 
14a28     04 64 86 F1 | 	sub	objptr, ##1540
14a2c     32 95 02 F1 | 	add	arg02, objptr
14a30     4A A7 0A FB | 	rdlong	local01, arg02 wz
14a34                 | ' 
14a34                 | ' numpar=compiledline(lineptr_e).result.uresult
14a34                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
14a34     48 00 00 FF 
14a38     9C 64 86 F1 | 	sub	objptr, ##37020
14a3c     03 A6 16 52 |  if_ne	cmp	local01, #3 wc
14a40     40 00 90 4D |  if_c_and_nz	jmp	#LR__1770
14a44     00 92 06 F6 | 	mov	arg01, #0
14a48     14 55 B1 FD | 	call	#__system___getiolock_0622
14a4c     3D 93 02 F6 | 	mov	arg01, result1
14a50     88 FF B0 FD | 	call	#__system___lockmem
14a54     97 01 00 FF 
14a58     DB 95 06 F6 | 	mov	arg02, ##@LR__6041
14a5c     00 92 06 F6 | 	mov	arg01, #0
14a60     00 96 06 F6 | 	mov	arg03, #0
14a64     68 0C B1 FD | 	call	#__system___basic_print_string
14a68     00 92 06 F6 | 	mov	arg01, #0
14a6c     F0 54 B1 FD | 	call	#__system___getiolock_0622
14a70     3D 01 68 FC | 	wrlong	#0, result1
14a74     27 92 06 F6 | 	mov	arg01, #39
14a78     00 94 06 F6 | 	mov	arg02, #0
14a7c     E0 C5 B0 FD | 	call	#_printerror
14a80     AC 00 90 FD | 	jmp	#LR__1773
14a84                 | LR__1770
14a84                 | ' if numpar=2 then 
14a84     02 A6 0E F2 | 	cmp	local01, #2 wz
14a88     40 00 90 5D |  if_ne	jmp	#LR__1771
14a8c     18 8C BF FD | 	call	#_pop
14a90     3F A7 02 F6 | 	mov	local01, result3
14a94     E7 7A 62 FC | 	wrlong	result1, fp
14a98     04 CE 05 F1 | 	add	fp, #4
14a9c     E7 7C 62 FC | 	wrlong	result2, fp
14aa0     04 CE 05 F1 | 	add	fp, #4
14aa4     E7 A6 62 FC | 	wrlong	local01, fp
14aa8     08 CE 85 F1 | 	sub	fp, #8
14aac     E7 92 02 F6 | 	mov	arg01, fp
14ab0     8C 8E BF FD | 	call	#_converttofloat
14ab4     3D 95 02 F6 | 	mov	arg02, result1
14ab8     FC 16 20 FF 
14abc     54 92 06 F6 | 	mov	arg01, ##1076754516
14ac0     C8 35 B1 FD | 	call	#__system____builtin_logbase
14ac4     3D A9 02 F6 | 	mov	local02, result1
14ac8     08 00 90 FD | 	jmp	#LR__1772
14acc                 | LR__1771
14acc     00 C0 1F FF 
14ad0     00 A8 06 F6 | 	mov	local02, ##1065353216
14ad4                 | LR__1772
14ad4     D0 8B BF FD | 	call	#_pop
14ad8     3F A7 02 F6 | 	mov	local01, result3
14adc     E7 7A 62 FC | 	wrlong	result1, fp
14ae0     04 CE 05 F1 | 	add	fp, #4
14ae4     E7 7C 62 FC | 	wrlong	result2, fp
14ae8     04 CE 05 F1 | 	add	fp, #4
14aec     E7 A6 62 FC | 	wrlong	local01, fp
14af0     08 CE 85 F1 | 	sub	fp, #8
14af4     E7 92 02 F6 | 	mov	arg01, fp
14af8     44 8E BF FD | 	call	#_converttofloat
14afc     3D 95 02 F6 | 	mov	arg02, result1
14b00     FC 16 20 FF 
14b04     54 92 06 F6 | 	mov	arg01, ##1076754516
14b08     80 35 B1 FD | 	call	#__system____builtin_logbase
14b0c     3D 93 02 F6 | 	mov	arg01, result1
14b10     54 95 02 F6 | 	mov	arg02, local02
14b14     98 27 B1 FD | 	call	#__system___float_div
14b18     E7 7A 62 FC | 	wrlong	result1, fp
14b1c     08 CE 05 F1 | 	add	fp, #8
14b20     E7 3C 68 FC | 	wrlong	#30, fp
14b24     08 CE 85 F1 | 	sub	fp, #8
14b28     E7 92 02 F6 | 	mov	arg01, fp
14b2c     08 8C BF FD | 	call	#_push
14b30                 | LR__1773
14b30     E7 F0 03 F6 | 	mov	ptra, fp
14b34     F2 00 A0 FD | 	call	#popregs_
14b38                 | _do_log_ret
14b38     2D 00 64 FD | 	ret
14b3c                 | 
14b3c                 | ' 
14b3c                 | ' '-------------------- lpeek
14b3c                 | ' 
14b3c                 | ' sub do_lpeek
14b3c                 | _do_lpeek
14b3c     01 CA 05 F6 | 	mov	COUNT_, #1
14b40     E8 00 A0 FD | 	call	#pushregs_
14b44     14 F0 07 F1 | 	add	ptra, #20
14b48     5C 8B BF FD | 	call	#_pop
14b4c     E7 7A 62 FC | 	wrlong	result1, fp
14b50     04 CE 05 F1 | 	add	fp, #4
14b54     E7 7C 62 FC | 	wrlong	result2, fp
14b58     04 CE 05 F1 | 	add	fp, #4
14b5c     E7 7E 62 FC | 	wrlong	result3, fp
14b60     08 CE 85 F1 | 	sub	fp, #8
14b64     E7 92 02 F6 | 	mov	arg01, fp
14b68     18 8D BF FD | 	call	#_converttoint
14b6c     3D 93 02 F6 | 	mov	arg01, result1
14b70                 | ' 
14b70                 | ' t1=pop()
14b70                 | ' a=converttoint(t1)
14b70                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
14b70     00 04 00 FF 
14b74     00 92 16 F2 | 	cmp	arg01, ##524288 wc
14b78     49 A7 02 CB |  if_b	rdlong	local01, arg01
14b7c     08 00 90 CD |  if_b	jmp	#LR__1780
14b80     98 C7 B0 FD | 	call	#_pslpeek
14b84     3D A7 02 F6 | 	mov	local01, result1
14b88                 | LR__1780
14b88     08 CE 05 F1 | 	add	fp, #8
14b8c     E7 3A 68 FC | 	wrlong	#29, fp
14b90     08 CE 85 F1 | 	sub	fp, #8
14b94     E7 A6 62 FC | 	wrlong	local01, fp
14b98     E7 92 02 F6 | 	mov	arg01, fp
14b9c     98 8B BF FD | 	call	#_push
14ba0     E7 F0 03 F6 | 	mov	ptra, fp
14ba4     F2 00 A0 FD | 	call	#popregs_
14ba8                 | _do_lpeek_ret
14ba8     2D 00 64 FD | 	ret
14bac                 | 
14bac                 | ' 
14bac                 | ' '-------------------- lpoke
14bac                 | ' 
14bac                 | ' sub do_lpoke
14bac                 | _do_lpoke
14bac     02 CA 05 F6 | 	mov	COUNT_, #2
14bb0     E8 00 A0 FD | 	call	#pushregs_
14bb4     20 F0 07 F1 | 	add	ptra, #32
14bb8     EC 8A BF FD | 	call	#_pop
14bbc     3D 95 02 F6 | 	mov	arg02, result1
14bc0     3E 93 02 F6 | 	mov	arg01, result2
14bc4     3F A7 02 F6 | 	mov	local01, result3
14bc8     E7 94 62 FC | 	wrlong	arg02, fp
14bcc     04 CE 05 F1 | 	add	fp, #4
14bd0     E7 92 62 FC | 	wrlong	arg01, fp
14bd4     04 CE 05 F1 | 	add	fp, #4
14bd8     E7 A6 62 FC | 	wrlong	local01, fp
14bdc     08 CE 85 F1 | 	sub	fp, #8
14be0     C4 8A BF FD | 	call	#_pop
14be4     3F A7 02 F6 | 	mov	local01, result3
14be8     0C CE 05 F1 | 	add	fp, #12
14bec     E7 7A 62 FC | 	wrlong	result1, fp
14bf0     04 CE 05 F1 | 	add	fp, #4
14bf4     E7 7C 62 FC | 	wrlong	result2, fp
14bf8     04 CE 05 F1 | 	add	fp, #4
14bfc     E7 A6 62 FC | 	wrlong	local01, fp
14c00     08 CE 85 F1 | 	sub	fp, #8
14c04     E7 92 02 F6 | 	mov	arg01, fp
14c08     0C CE 85 F1 | 	sub	fp, #12
14c0c     74 8C BF FD | 	call	#_converttoint
14c10     3D A7 02 F6 | 	mov	local01, result1
14c14     E7 92 02 F6 | 	mov	arg01, fp
14c18     68 8C BF FD | 	call	#_converttoint
14c1c     3D A9 02 F6 | 	mov	local02, result1
14c20                 | ' 
14c20                 | ' t1=pop() 'value
14c20                 | ' t2=pop() 
14c20                 | ' a=converttoint(t2) : v=converttoint(t1)
14c20                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
14c20     00 04 00 FF 
14c24     00 A6 16 F2 | 	cmp	local01, ##524288 wc
14c28     53 A9 62 CC |  if_b	wrlong	local02, local01
14c2c     53 93 02 36 |  if_ae	mov	arg01, local01
14c30     54 95 02 36 |  if_ae	mov	arg02, local02
14c34     C4 C5 B0 3D |  if_ae	call	#_pslpoke
14c38     E7 F0 03 F6 | 	mov	ptra, fp
14c3c     F2 00 A0 FD | 	call	#popregs_
14c40                 | _do_lpoke_ret
14c40     2D 00 64 FD | 	ret
14c44                 | 
14c44                 | ' 
14c44                 | ' '-------------------- memlo
14c44                 | ' 
14c44                 | ' sub do_memlo
14c44                 | _do_memlo
14c44     00 CA 05 F6 | 	mov	COUNT_, #0
14c48     E8 00 A0 FD | 	call	#pushregs_
14c4c     0C F0 07 F1 | 	add	ptra, #12
14c50     44 00 00 FF 
14c54     7C 64 06 F1 | 	add	objptr, ##34940
14c58     32 93 02 FB | 	rdlong	arg01, objptr
14c5c     44 00 00 FF 
14c60     7C 64 86 F1 | 	sub	objptr, ##34940
14c64     E7 92 62 FC | 	wrlong	arg01, fp
14c68     08 CE 05 F1 | 	add	fp, #8
14c6c     E7 3A 68 FC | 	wrlong	#29, fp
14c70     08 CE 85 F1 | 	sub	fp, #8
14c74     E7 92 02 F6 | 	mov	arg01, fp
14c78     BC 8A BF FD | 	call	#_push
14c7c     E7 F0 03 F6 | 	mov	ptra, fp
14c80     F2 00 A0 FD | 	call	#popregs_
14c84                 | _do_memlo_ret
14c84     2D 00 64 FD | 	ret
14c88                 | 
14c88                 | ' 
14c88                 | ' '-------------------- memtop
14c88                 | ' 
14c88                 | ' sub do_memtop
14c88                 | _do_memtop
14c88     00 CA 05 F6 | 	mov	COUNT_, #0
14c8c     E8 00 A0 FD | 	call	#pushregs_
14c90     0C F0 07 F1 | 	add	ptra, #12
14c94     53 00 00 FF 
14c98     F0 64 06 F1 | 	add	objptr, ##42736
14c9c     32 93 02 FB | 	rdlong	arg01, objptr
14ca0     53 00 00 FF 
14ca4     F0 64 86 F1 | 	sub	objptr, ##42736
14ca8     E7 92 62 FC | 	wrlong	arg01, fp
14cac     08 CE 05 F1 | 	add	fp, #8
14cb0     E7 3A 68 FC | 	wrlong	#29, fp
14cb4     08 CE 85 F1 | 	sub	fp, #8
14cb8     E7 92 02 F6 | 	mov	arg01, fp
14cbc     78 8A BF FD | 	call	#_push
14cc0     E7 F0 03 F6 | 	mov	ptra, fp
14cc4     F2 00 A0 FD | 	call	#popregs_
14cc8                 | _do_memtop_ret
14cc8     2D 00 64 FD | 	ret
14ccc                 | 
14ccc                 | ' 
14ccc                 | ' '-------------------- mid$
14ccc                 | ' 
14ccc                 | ' sub do_mid
14ccc                 | _do_mid
14ccc     02 CA 05 F6 | 	mov	COUNT_, #2
14cd0     E8 00 A0 FD | 	call	#pushregs_
14cd4     18 F0 07 F1 | 	add	ptra, #24
14cd8     4B 00 00 FF 
14cdc     A0 64 06 F1 | 	add	objptr, ##38560
14ce0     32 97 02 FB | 	rdlong	arg03, objptr
14ce4     4B 95 02 F6 | 	mov	arg02, arg03
14ce8     01 94 66 F0 | 	shl	arg02, #1
14cec     4B 95 02 F1 | 	add	arg02, arg03
14cf0     02 94 66 F0 | 	shl	arg02, #2
14cf4     03 00 00 FF 
14cf8     04 64 86 F1 | 	sub	objptr, ##1540
14cfc     32 95 02 F1 | 	add	arg02, objptr
14d00     4A 97 02 FB | 	rdlong	arg03, arg02
14d04                 | ' 
14d04                 | ' numpar=compiledline(lineptr_e).result.uresult
14d04                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
14d04     03 96 0E F2 | 	cmp	arg03, #3 wz
14d08     48 00 00 FF 
14d0c     9C 64 86 F1 | 	sub	objptr, ##37020
14d10     40 00 90 AD |  if_e	jmp	#LR__1790
14d14     00 92 06 F6 | 	mov	arg01, #0
14d18     44 52 B1 FD | 	call	#__system___getiolock_0622
14d1c     3D 93 02 F6 | 	mov	arg01, result1
14d20     B8 FC B0 FD | 	call	#__system___lockmem
14d24     97 01 00 FF 
14d28     E1 95 06 F6 | 	mov	arg02, ##@LR__6042
14d2c     00 92 06 F6 | 	mov	arg01, #0
14d30     00 96 06 F6 | 	mov	arg03, #0
14d34     98 09 B1 FD | 	call	#__system___basic_print_string
14d38     00 92 06 F6 | 	mov	arg01, #0
14d3c     20 52 B1 FD | 	call	#__system___getiolock_0622
14d40     3D 01 68 FC | 	wrlong	#0, result1
14d44     27 92 06 F6 | 	mov	arg01, #39
14d48     00 94 06 F6 | 	mov	arg02, #0
14d4c     10 C3 B0 FD | 	call	#_printerror
14d50     08 01 90 FD | 	jmp	#LR__1793
14d54                 | LR__1790
14d54     50 89 BF FD | 	call	#_pop
14d58     3F 97 02 F6 | 	mov	arg03, result3
14d5c     E7 7A 62 FC | 	wrlong	result1, fp
14d60     04 CE 05 F1 | 	add	fp, #4
14d64     E7 7C 62 FC | 	wrlong	result2, fp
14d68     04 CE 05 F1 | 	add	fp, #4
14d6c     E7 96 62 FC | 	wrlong	arg03, fp
14d70     08 CE 85 F1 | 	sub	fp, #8
14d74     E7 92 02 F6 | 	mov	arg01, fp
14d78     08 8B BF FD | 	call	#_converttoint
14d7c     3D A7 02 F6 | 	mov	local01, result1
14d80     24 89 BF FD | 	call	#_pop
14d84     3F 97 02 F6 | 	mov	arg03, result3
14d88     E7 7A 62 FC | 	wrlong	result1, fp
14d8c     04 CE 05 F1 | 	add	fp, #4
14d90     E7 7C 62 FC | 	wrlong	result2, fp
14d94     04 CE 05 F1 | 	add	fp, #4
14d98     E7 96 62 FC | 	wrlong	arg03, fp
14d9c     08 CE 85 F1 | 	sub	fp, #8
14da0     E7 92 02 F6 | 	mov	arg01, fp
14da4     DC 8A BF FD | 	call	#_converttoint
14da8     3D A9 02 F6 | 	mov	local02, result1
14dac     F8 88 BF FD | 	call	#_pop
14db0     3F 97 02 F6 | 	mov	arg03, result3
14db4     E7 7A 62 FC | 	wrlong	result1, fp
14db8     04 CE 05 F1 | 	add	fp, #4
14dbc     E7 7C 62 FC | 	wrlong	result2, fp
14dc0     04 CE 05 F1 | 	add	fp, #4
14dc4     E7 96 62 FC | 	wrlong	arg03, fp
14dc8                 | ' t1=pop() : arg2=converttoint(t1)
14dc8                 | ' t1=pop() : arg1=converttoint(t1)
14dc8                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14dc8     08 CE 85 F1 | 	sub	fp, #8
14dcc     2B 96 0E F2 | 	cmp	arg03, #43 wz
14dd0     18 00 90 5D |  if_ne	jmp	#LR__1791
14dd4     E7 92 02 FB | 	rdlong	arg01, fp
14dd8     3C 8A BF FD | 	call	#_convertstring
14ddc     E7 7A 62 FC | 	wrlong	result1, fp
14de0     08 CE 05 F1 | 	add	fp, #8
14de4     E7 3E 68 FC | 	wrlong	#31, fp
14de8     08 CE 85 F1 | 	sub	fp, #8
14dec                 | LR__1791
14dec                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
14dec     08 CE 05 F1 | 	add	fp, #8
14df0     E7 96 02 FB | 	rdlong	arg03, fp
14df4     08 CE 85 F1 | 	sub	fp, #8
14df8     1F 96 0E F2 | 	cmp	arg03, #31 wz
14dfc     40 00 90 AD |  if_e	jmp	#LR__1792
14e00     00 92 06 F6 | 	mov	arg01, #0
14e04     58 51 B1 FD | 	call	#__system___getiolock_0622
14e08     3D 93 02 F6 | 	mov	arg01, result1
14e0c     CC FB B0 FD | 	call	#__system___lockmem
14e10     97 01 00 FF 
14e14     E8 95 06 F6 | 	mov	arg02, ##@LR__6043
14e18     00 92 06 F6 | 	mov	arg01, #0
14e1c     00 96 06 F6 | 	mov	arg03, #0
14e20     AC 08 B1 FD | 	call	#__system___basic_print_string
14e24     00 92 06 F6 | 	mov	arg01, #0
14e28     34 51 B1 FD | 	call	#__system___getiolock_0622
14e2c     3D 01 68 FC | 	wrlong	#0, result1
14e30     0F 92 06 F6 | 	mov	arg01, #15
14e34     00 94 06 F6 | 	mov	arg02, #0
14e38     24 C2 B0 FD | 	call	#_printerror
14e3c     1C 00 90 FD | 	jmp	#LR__1793
14e40                 | LR__1792
14e40     E7 92 02 FB | 	rdlong	arg01, fp
14e44     54 95 02 F6 | 	mov	arg02, local02
14e48     53 97 02 F6 | 	mov	arg03, local01
14e4c     4C 15 B1 FD | 	call	#__system__Mid_S
14e50     E7 7A 62 FC | 	wrlong	result1, fp
14e54     E7 92 02 F6 | 	mov	arg01, fp
14e58     DC 88 BF FD | 	call	#_push
14e5c                 | LR__1793
14e5c     E7 F0 03 F6 | 	mov	ptra, fp
14e60     F2 00 A0 FD | 	call	#popregs_
14e64                 | _do_mid_ret
14e64     2D 00 64 FD | 	ret
14e68                 | 
14e68                 | ' 
14e68                 | ' '-------------------- mkdir
14e68                 | ' 
14e68                 | ' sub do_mkdir
14e68                 | _do_mkdir
14e68     04 CA 05 F6 | 	mov	COUNT_, #4
14e6c     E8 00 A0 FD | 	call	#pushregs_
14e70     34 88 BF FD | 	call	#_pop
14e74     3E 99 02 F6 | 	mov	arg04, result2
14e78     3F 97 02 F6 | 	mov	arg03, result3
14e7c     3D A7 02 F6 | 	mov	local01, result1
14e80     4C A9 02 F6 | 	mov	local02, arg04
14e84     4B AB 02 F6 | 	mov	local03, arg03
14e88                 | ' 
14e88                 | ' t1=pop()
14e88                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14e88     2B AA 0E F2 | 	cmp	local03, #43 wz
14e8c     10 00 90 5D |  if_ne	jmp	#LR__1800
14e90     53 93 02 F6 | 	mov	arg01, local01
14e94     80 89 BF FD | 	call	#_convertstring
14e98     3D A7 02 F6 | 	mov	local01, result1
14e9c     1F AA 06 F6 | 	mov	local03, #31
14ea0                 | LR__1800
14ea0                 | ' if t1.result_type<>result_string then printerror(15): return
14ea0     1F AA 0E F2 | 	cmp	local03, #31 wz
14ea4     10 00 90 AD |  if_e	jmp	#LR__1801
14ea8     0F 92 06 F6 | 	mov	arg01, #15
14eac     00 94 06 F6 | 	mov	arg02, #0
14eb0     AC C1 B0 FD | 	call	#_printerror
14eb4     64 00 90 FD | 	jmp	#LR__1803
14eb8                 | LR__1801
14eb8     53 93 02 F6 | 	mov	arg01, local01
14ebc     14 1C B1 FD | 	call	#__system___mkdir
14ec0     3D AD 0A F6 | 	mov	local04, result1 wz
14ec4                 | ' filename$=t1.result.sresult
14ec4                 | ' err=mkdir(filename$)
14ec4                 | ' 'err=geterr() : 
14ec4                 | ' if err<>0 then print "Cannot create a directory: system error "; err
14ec4     54 00 90 AD |  if_e	jmp	#LR__1802
14ec8     00 92 06 F6 | 	mov	arg01, #0
14ecc     90 50 B1 FD | 	call	#__system___getiolock_0622
14ed0     3D 93 02 F6 | 	mov	arg01, result1
14ed4     04 FB B0 FD | 	call	#__system___lockmem
14ed8     97 01 00 FF 
14edc     EF 95 06 F6 | 	mov	arg02, ##@LR__6044
14ee0     00 92 06 F6 | 	mov	arg01, #0
14ee4     00 96 06 F6 | 	mov	arg03, #0
14ee8     E4 07 B1 FD | 	call	#__system___basic_print_string
14eec     00 92 06 F6 | 	mov	arg01, #0
14ef0     56 95 02 F6 | 	mov	arg02, local04
14ef4     00 96 06 F6 | 	mov	arg03, #0
14ef8     0A 98 06 F6 | 	mov	arg04, #10
14efc     14 08 B1 FD | 	call	#__system___basic_print_integer
14f00     00 92 06 F6 | 	mov	arg01, #0
14f04     0A 94 06 F6 | 	mov	arg02, #10
14f08     00 96 06 F6 | 	mov	arg03, #0
14f0c     68 07 B1 FD | 	call	#__system___basic_print_char
14f10     00 92 06 F6 | 	mov	arg01, #0
14f14     48 50 B1 FD | 	call	#__system___getiolock_0622
14f18     3D 01 68 FC | 	wrlong	#0, result1
14f1c                 | LR__1802
14f1c                 | LR__1803
14f1c     E7 F0 03 F6 | 	mov	ptra, fp
14f20     F2 00 A0 FD | 	call	#popregs_
14f24                 | _do_mkdir_ret
14f24     2D 00 64 FD | 	ret
14f28                 | 
14f28                 | ' 
14f28                 | ' '-------------------- mode
14f28                 | ' 
14f28                 | ' sub do_mode
14f28                 | _do_mode
14f28     05 CA 05 F6 | 	mov	COUNT_, #5
14f2c     E8 00 A0 FD | 	call	#pushregs_
14f30     74 87 BF FD | 	call	#_pop
14f34     3D A7 02 F6 | 	mov	local01, result1
14f38     3E A9 02 F6 | 	mov	local02, result2
14f3c     3F AB 02 F6 | 	mov	local03, result3
14f40                 | ' t1=pop() 
14f40                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
14f40     1E AA 0E F2 | 	cmp	local03, #30 wz
14f44     10 00 90 5D |  if_ne	jmp	#LR__1810
14f48     53 93 02 F6 | 	mov	arg01, local01
14f4c     00 94 06 F6 | 	mov	arg02, #0
14f50     20 26 B1 FD | 	call	#__system___float_tointeger
14f54     3D A7 02 F6 | 	mov	local01, result1
14f58                 | LR__1810
14f58                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
14f58     1F AA 0E F2 | 	cmp	local03, #31 wz
14f5c     18 00 90 5D |  if_ne	jmp	#LR__1811
14f60     53 93 02 F6 | 	mov	arg01, local01
14f64     60 29 B1 FD | 	call	#__system____builtin_atof
14f68     3D 93 02 F6 | 	mov	arg01, result1
14f6c     00 94 06 F6 | 	mov	arg02, #0
14f70     00 26 B1 FD | 	call	#__system___float_tointeger
14f74     3D A7 02 F6 | 	mov	local01, result1
14f78                 | LR__1811
14f78                 | ' select case t1.result.iresult
14f78     53 AD 02 F6 | 	mov	local04, local01
14f7c     06 AC 26 F3 | 	fle	local04, #6
14f80     30 AC 62 FD | 	jmprel	local04
14f84                 | LR__1812
14f84     18 00 90 FD | 	jmp	#LR__1813
14f88     A8 00 90 FD | 	jmp	#LR__1814
14f8c     10 01 90 FD | 	jmp	#LR__1815
14f90     78 01 90 FD | 	jmp	#LR__1816
14f94     E0 01 90 FD | 	jmp	#LR__1817
14f98     70 02 90 FD | 	jmp	#LR__1818
14f9c     FC 02 90 FD | 	jmp	#LR__1819
14fa0                 | LR__1813
14fa0     38 00 00 FF 
14fa4     60 64 06 F1 | 	add	objptr, ##28768
14fa8     32 03 68 FC | 	wrlong	#1, objptr
14fac     04 64 86 F1 | 	sub	objptr, #4
14fb0     32 35 69 FC | 	wrlong	#154, objptr
14fb4     19 00 00 FF 
14fb8     00 65 06 F1 | 	add	objptr, ##13056
14fbc     32 03 68 FC | 	wrlong	#1, objptr
14fc0     19 00 00 FF 
14fc4     04 65 86 F1 | 	sub	objptr, ##13060
14fc8     32 27 69 FC | 	wrlong	#147, objptr
14fcc     38 00 00 FF 
14fd0     58 64 86 F1 | 	sub	objptr, ##28760
14fd4     04 92 06 F6 | 	mov	arg01, #4
14fd8     64 DC B0 FD | 	call	#_hg010b_spin2_setfontfamily
14fdc     38 00 00 FF 
14fe0     5C 64 06 F1 | 	add	objptr, ##28764
14fe4     32 93 02 FB | 	rdlong	arg01, objptr
14fe8     04 64 86 F1 | 	sub	objptr, #4
14fec     32 95 02 FB | 	rdlong	arg02, objptr
14ff0                 | ' 
14ff0                 | ' write_color:=ff
14ff0     38 00 00 FF 
14ff4     17 64 86 F1 | 	sub	objptr, ##28695
14ff8     32 93 62 FC | 	wrlong	arg01, objptr
14ffc                 | ' write_background:=bb
14ffc     04 64 06 F1 | 	add	objptr, #4
15000     32 95 62 FC | 	wrlong	arg02, objptr
15004     35 AD 02 F6 | 	mov	local04, ptr__dat__
15008     01 00 00 FF 
1500c     00 AC 06 F1 | 	add	local04, ##512
15010     53 00 00 FF 
15014     B7 64 06 F1 | 	add	objptr, ##42679
15018     32 AD 62 FC | 	wrlong	local04, objptr
1501c     04 64 86 F1 | 	sub	objptr, #4
15020     03 00 80 FF 
15024     32 31 69 FC | 	wrlong	##1688, objptr
15028     53 00 00 FF 
1502c     F8 64 86 F1 | 	sub	objptr, ##42744
15030     68 02 90 FD | 	jmp	#LR__1819
15034                 | LR__1814
15034     38 00 00 FF 
15038     60 64 06 F1 | 	add	objptr, ##28768
1503c     32 01 68 FC | 	wrlong	#0, objptr
15040     04 64 86 F1 | 	sub	objptr, #4
15044     32 2F 68 FC | 	wrlong	#23, objptr
15048     19 00 00 FF 
1504c     00 65 06 F1 | 	add	objptr, ##13056
15050     32 01 68 FC | 	wrlong	#0, objptr
15054     19 00 00 FF 
15058     04 65 86 F1 | 	sub	objptr, ##13060
1505c     32 01 68 FC | 	wrlong	#0, objptr
15060     38 00 00 FF 
15064     58 64 86 F1 | 	sub	objptr, ##28760
15068     00 92 06 F6 | 	mov	arg01, #0
1506c     D0 DB B0 FD | 	call	#_hg010b_spin2_setfontfamily
15070     38 00 00 FF 
15074     5C 64 06 F1 | 	add	objptr, ##28764
15078     32 93 02 FB | 	rdlong	arg01, objptr
1507c     04 64 86 F1 | 	sub	objptr, #4
15080     32 95 02 FB | 	rdlong	arg02, objptr
15084                 | ' 
15084                 | ' write_color:=ff
15084     38 00 00 FF 
15088     17 64 86 F1 | 	sub	objptr, ##28695
1508c     32 93 62 FC | 	wrlong	arg01, objptr
15090                 | ' write_background:=bb
15090     04 64 06 F1 | 	add	objptr, #4
15094     32 95 62 FC | 	wrlong	arg02, objptr
15098     45 64 86 F1 | 	sub	objptr, #69
1509c     FC 01 90 FD | 	jmp	#LR__1819
150a0                 | LR__1815
150a0     38 00 00 FF 
150a4     60 64 06 F1 | 	add	objptr, ##28768
150a8     32 01 68 FC | 	wrlong	#0, objptr
150ac     04 64 86 F1 | 	sub	objptr, #4
150b0     32 6B 69 FC | 	wrlong	#181, objptr
150b4     19 00 00 FF 
150b8     00 65 06 F1 | 	add	objptr, ##13056
150bc     32 01 68 FC | 	wrlong	#0, objptr
150c0     19 00 00 FF 
150c4     04 65 86 F1 | 	sub	objptr, ##13060
150c8     32 01 68 FC | 	wrlong	#0, objptr
150cc     38 00 00 FF 
150d0     58 64 86 F1 | 	sub	objptr, ##28760
150d4     00 92 06 F6 | 	mov	arg01, #0
150d8     64 DB B0 FD | 	call	#_hg010b_spin2_setfontfamily
150dc     38 00 00 FF 
150e0     5C 64 06 F1 | 	add	objptr, ##28764
150e4     32 93 02 FB | 	rdlong	arg01, objptr
150e8     04 64 86 F1 | 	sub	objptr, #4
150ec     32 95 02 FB | 	rdlong	arg02, objptr
150f0                 | ' 
150f0                 | ' write_color:=ff
150f0     38 00 00 FF 
150f4     17 64 86 F1 | 	sub	objptr, ##28695
150f8     32 93 62 FC | 	wrlong	arg01, objptr
150fc                 | ' write_background:=bb
150fc     04 64 06 F1 | 	add	objptr, #4
15100     32 95 62 FC | 	wrlong	arg02, objptr
15104     45 64 86 F1 | 	sub	objptr, #69
15108     90 01 90 FD | 	jmp	#LR__1819
1510c                 | LR__1816
1510c     38 00 00 FF 
15110     60 64 06 F1 | 	add	objptr, ##28768
15114     32 01 68 FC | 	wrlong	#0, objptr
15118     04 64 86 F1 | 	sub	objptr, #4
1511c     32 1F 68 FC | 	wrlong	#15, objptr
15120     19 00 00 FF 
15124     00 65 06 F1 | 	add	objptr, ##13056
15128     32 01 68 FC | 	wrlong	#0, objptr
1512c     19 00 00 FF 
15130     04 65 86 F1 | 	sub	objptr, ##13060
15134     32 01 68 FC | 	wrlong	#0, objptr
15138     38 00 00 FF 
1513c     58 64 86 F1 | 	sub	objptr, ##28760
15140     00 92 06 F6 | 	mov	arg01, #0
15144     F8 DA B0 FD | 	call	#_hg010b_spin2_setfontfamily
15148     38 00 00 FF 
1514c     5C 64 06 F1 | 	add	objptr, ##28764
15150     32 93 02 FB | 	rdlong	arg01, objptr
15154     04 64 86 F1 | 	sub	objptr, #4
15158     32 95 02 FB | 	rdlong	arg02, objptr
1515c                 | ' 
1515c                 | ' write_color:=ff
1515c     38 00 00 FF 
15160     17 64 86 F1 | 	sub	objptr, ##28695
15164     32 93 62 FC | 	wrlong	arg01, objptr
15168                 | ' write_background:=bb
15168     04 64 06 F1 | 	add	objptr, #4
1516c     32 95 62 FC | 	wrlong	arg02, objptr
15170     45 64 86 F1 | 	sub	objptr, #69
15174     24 01 90 FD | 	jmp	#LR__1819
15178                 | LR__1817
15178     38 00 00 FF 
1517c     60 64 06 F1 | 	add	objptr, ##28768
15180     32 03 68 FC | 	wrlong	#1, objptr
15184     04 64 86 F1 | 	sub	objptr, #4
15188     32 03 68 FC | 	wrlong	#1, objptr
1518c     19 00 00 FF 
15190     00 65 06 F1 | 	add	objptr, ##13056
15194     32 03 68 FC | 	wrlong	#1, objptr
15198     19 00 00 FF 
1519c     04 65 86 F1 | 	sub	objptr, ##13060
151a0     32 1D 68 FC | 	wrlong	#14, objptr
151a4     38 00 00 FF 
151a8     58 64 86 F1 | 	sub	objptr, ##28760
151ac     04 92 06 F6 | 	mov	arg01, #4
151b0     8C DA B0 FD | 	call	#_hg010b_spin2_setfontfamily
151b4     38 00 00 FF 
151b8     5C 64 06 F1 | 	add	objptr, ##28764
151bc     32 93 02 FB | 	rdlong	arg01, objptr
151c0     04 64 86 F1 | 	sub	objptr, #4
151c4     32 95 02 FB | 	rdlong	arg02, objptr
151c8                 | ' 
151c8                 | ' write_color:=ff
151c8     38 00 00 FF 
151cc     17 64 86 F1 | 	sub	objptr, ##28695
151d0     32 93 62 FC | 	wrlong	arg01, objptr
151d4                 | ' write_background:=bb
151d4     04 64 06 F1 | 	add	objptr, #4
151d8     32 95 62 FC | 	wrlong	arg02, objptr
151dc     35 AF 02 F6 | 	mov	local05, ptr__dat__
151e0     07 00 00 FF 
151e4     82 AF 06 F1 | 	add	local05, ##3970
151e8     53 00 00 FF 
151ec     B7 64 06 F1 | 	add	objptr, ##42679
151f0     32 AF 62 FC | 	wrlong	local05, objptr
151f4     04 64 86 F1 | 	sub	objptr, #4
151f8     03 00 80 FF 
151fc     32 31 69 FC | 	wrlong	##1688, objptr
15200     53 00 00 FF 
15204     F8 64 86 F1 | 	sub	objptr, ##42744
15208     90 00 90 FD | 	jmp	#LR__1819
1520c                 | LR__1818
1520c     38 00 00 FF 
15210     60 64 06 F1 | 	add	objptr, ##28768
15214     32 05 68 FC | 	wrlong	#2, objptr
15218     04 64 86 F1 | 	sub	objptr, #4
1521c     32 03 68 FC | 	wrlong	#1, objptr
15220     19 00 00 FF 
15224     00 65 06 F1 | 	add	objptr, ##13056
15228     32 03 68 FC | 	wrlong	#1, objptr
1522c     19 00 00 FF 
15230     04 65 86 F1 | 	sub	objptr, ##13060
15234     32 0F 68 FC | 	wrlong	#7, objptr
15238     38 00 00 FF 
1523c     58 64 86 F1 | 	sub	objptr, ##28760
15240     08 92 06 F6 | 	mov	arg01, #8
15244     F8 D9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15248     38 00 00 FF 
1524c     5C 64 06 F1 | 	add	objptr, ##28764
15250     32 93 02 FB | 	rdlong	arg01, objptr
15254     04 64 86 F1 | 	sub	objptr, #4
15258     32 95 02 FB | 	rdlong	arg02, objptr
1525c                 | ' 
1525c                 | ' write_color:=ff
1525c     38 00 00 FF 
15260     17 64 86 F1 | 	sub	objptr, ##28695
15264     32 93 62 FC | 	wrlong	arg01, objptr
15268                 | ' write_background:=bb
15268     04 64 06 F1 | 	add	objptr, #4
1526c     32 95 62 FC | 	wrlong	arg02, objptr
15270     35 AF 02 F6 | 	mov	local05, ptr__dat__
15274     07 00 00 FF 
15278     82 AF 06 F1 | 	add	local05, ##3970
1527c     53 00 00 FF 
15280     B7 64 06 F1 | 	add	objptr, ##42679
15284     32 AF 62 FC | 	wrlong	local05, objptr
15288     04 64 86 F1 | 	sub	objptr, #4
1528c     03 00 80 FF 
15290     32 31 69 FC | 	wrlong	##1688, objptr
15294     53 00 00 FF 
15298     F8 64 86 F1 | 	sub	objptr, ##42744
1529c                 | LR__1819
1529c     53 00 00 FF 
152a0     F4 64 06 F1 | 	add	objptr, ##42740
152a4     32 A7 62 FC | 	wrlong	local01, objptr
152a8     04 64 86 F1 | 	sub	objptr, #4
152ac     32 93 02 FB | 	rdlong	arg01, objptr
152b0     0F 00 00 FF 
152b4     74 64 86 F1 | 	sub	objptr, ##7796
152b8     32 AF 02 FB | 	rdlong	local05, objptr
152bc     44 00 00 FF 
152c0     7C 64 86 F1 | 	sub	objptr, ##34940
152c4     57 93 82 F1 | 	sub	arg01, local05
152c8     00 94 06 F6 | 	mov	arg02, #0
152cc     0A 96 06 F6 | 	mov	arg03, #10
152d0     04 12 B1 FD | 	call	#__system__Number_S
152d4     3D 93 02 F6 | 	mov	arg01, result1
152d8     98 01 00 FF 
152dc     18 94 06 F6 | 	mov	arg02, ##@LR__6045
152e0     54 F7 B0 FD | 	call	#__system___string_concat
152e4     51 00 00 FF 
152e8     58 65 06 F1 | 	add	objptr, ##41816
152ec     32 7B 62 FC | 	wrlong	result1, objptr
152f0     19 00 00 FF 
152f4     FC 64 86 F1 | 	sub	objptr, ##13052
152f8     32 93 02 FB | 	rdlong	arg01, objptr
152fc     04 64 86 F1 | 	sub	objptr, #4
15300     32 95 02 FB | 	rdlong	arg02, objptr
15304     38 00 00 FF 
15308     58 64 86 F1 | 	sub	objptr, ##28760
1530c     FC DA B0 FD | 	call	#_hg010b_spin2_cls
15310     98 01 00 FF 
15314     2A 92 06 F6 | 	mov	arg01, ##@LR__6046
15318                 | ' 
15318                 | ' write(text)
15318     A4 DE B0 FD | 	call	#_hg010b_spin2_write
1531c                 | ' crlf
1531c     40 E3 B0 FD | 	call	#_hg010b_spin2_crlf
15320     18 00 00 FF 
15324     40 6B 06 F1 | 	add	ptr__dat__, ##12608
15328     35 93 02 FB | 	rdlong	arg01, ptr__dat__
1532c     18 00 00 FF 
15330     40 6B 86 F1 | 	sub	ptr__dat__, ##12608
15334                 | ' 
15334                 | ' write(text)
15334     88 DE B0 FD | 	call	#_hg010b_spin2_write
15338                 | ' crlf
15338     24 E3 B0 FD | 	call	#_hg010b_spin2_crlf
1533c     51 00 00 FF 
15340     58 65 06 F1 | 	add	objptr, ##41816
15344     32 93 02 FB | 	rdlong	arg01, objptr
15348     51 00 00 FF 
1534c     58 65 86 F1 | 	sub	objptr, ##41816
15350                 | ' 
15350                 | ' write(text)
15350     6C DE B0 FD | 	call	#_hg010b_spin2_write
15354                 | ' crlf
15354     08 E3 B0 FD | 	call	#_hg010b_spin2_crlf
15358     E7 F0 03 F6 | 	mov	ptra, fp
1535c     F2 00 A0 FD | 	call	#popregs_
15360                 | _do_mode_ret
15360     2D 00 64 FD | 	ret
15364                 | 
15364                 | ' 
15364                 | ' '-------------------- mouse
15364                 | ' 
15364                 | ' sub do_mouse
15364                 | _do_mouse
15364     40 83 BF FD | 	call	#_pop
15368     00 7A 4E F2 | 	cmps	result1, #0 wz
1536c                 | ' 
1536c                 | ' t1=pop()
1536c                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
1536c     14 00 90 5D |  if_ne	jmp	#LR__1820
15370     10 92 06 F6 | 	mov	arg01, #16
15374     00 94 06 F6 | 	mov	arg02, #0
15378     00 96 06 F6 | 	mov	arg03, #0
1537c     F4 CC B0 FD | 	call	#_hg010b_spin2_setspritesize
15380     10 00 90 FD | 	jmp	#LR__1821
15384                 | LR__1820
15384     10 92 06 F6 | 	mov	arg01, #16
15388     20 94 06 F6 | 	mov	arg02, #32
1538c     20 96 06 F6 | 	mov	arg03, #32
15390     E0 CC B0 FD | 	call	#_hg010b_spin2_setspritesize
15394                 | LR__1821
15394                 | _do_mouse_ret
15394     2D 00 64 FD | 	ret
15398                 | 
15398                 | ' 
15398                 | ' '-------------------- mousek
15398                 | ' 
15398                 | ' sub do_mousek
15398                 | _do_mousek
15398     00 CA 05 F6 | 	mov	COUNT_, #0
1539c     E8 00 A0 FD | 	call	#pushregs_
153a0     0C F0 07 F1 | 	add	ptra, #12
153a4     08 CE 05 F1 | 	add	fp, #8
153a8     E7 3A 68 FC | 	wrlong	#29, fp
153ac     08 CE 85 F1 | 	sub	fp, #8
153b0     52 00 00 FF 
153b4     70 65 06 F1 | 	add	objptr, ##42352
153b8     32 93 02 FB | 	rdlong	arg01, objptr
153bc     52 00 00 FF 
153c0     70 65 86 F1 | 	sub	objptr, ##42352
153c4     E7 92 62 FC | 	wrlong	arg01, fp
153c8     E7 92 02 F6 | 	mov	arg01, fp
153cc     68 83 BF FD | 	call	#_push
153d0     E7 F0 03 F6 | 	mov	ptra, fp
153d4     F2 00 A0 FD | 	call	#popregs_
153d8                 | _do_mousek_ret
153d8     2D 00 64 FD | 	ret
153dc                 | 
153dc                 | ' 
153dc                 | ' '-------------------- mousew
153dc                 | ' 
153dc                 | ' sub do_mousew
153dc                 | _do_mousew
153dc     00 CA 05 F6 | 	mov	COUNT_, #0
153e0     E8 00 A0 FD | 	call	#pushregs_
153e4     0C F0 07 F1 | 	add	ptra, #12
153e8     08 CE 05 F1 | 	add	fp, #8
153ec     E7 38 68 FC | 	wrlong	#28, fp
153f0     08 CE 85 F1 | 	sub	fp, #8
153f4     52 00 00 FF 
153f8     74 65 06 F1 | 	add	objptr, ##42356
153fc     32 93 02 FB | 	rdlong	arg01, objptr
15400     52 00 00 FF 
15404     74 65 86 F1 | 	sub	objptr, ##42356
15408     E7 92 62 FC | 	wrlong	arg01, fp
1540c     E7 92 02 F6 | 	mov	arg01, fp
15410     24 83 BF FD | 	call	#_push
15414     E7 F0 03 F6 | 	mov	ptra, fp
15418     F2 00 A0 FD | 	call	#popregs_
1541c                 | _do_mousew_ret
1541c     2D 00 64 FD | 	ret
15420                 | 
15420                 | ' 
15420                 | ' '-------------------- mousex
15420                 | ' 
15420                 | ' sub do_mousex
15420                 | _do_mousex
15420     00 CA 05 F6 | 	mov	COUNT_, #0
15424     E8 00 A0 FD | 	call	#pushregs_
15428     0C F0 07 F1 | 	add	ptra, #12
1542c     08 CE 05 F1 | 	add	fp, #8
15430     E7 3A 68 FC | 	wrlong	#29, fp
15434     08 CE 85 F1 | 	sub	fp, #8
15438     52 00 00 FF 
1543c     68 65 06 F1 | 	add	objptr, ##42344
15440     32 93 02 FB | 	rdlong	arg01, objptr
15444     52 00 00 FF 
15448     68 65 86 F1 | 	sub	objptr, ##42344
1544c     E7 92 62 FC | 	wrlong	arg01, fp
15450     E7 92 02 F6 | 	mov	arg01, fp
15454     E0 82 BF FD | 	call	#_push
15458     E7 F0 03 F6 | 	mov	ptra, fp
1545c     F2 00 A0 FD | 	call	#popregs_
15460                 | _do_mousex_ret
15460     2D 00 64 FD | 	ret
15464                 | 
15464                 | ' 
15464                 | ' '-------------------- mousey
15464                 | ' 
15464                 | ' sub do_mousey
15464                 | _do_mousey
15464     00 CA 05 F6 | 	mov	COUNT_, #0
15468     E8 00 A0 FD | 	call	#pushregs_
1546c     0C F0 07 F1 | 	add	ptra, #12
15470     08 CE 05 F1 | 	add	fp, #8
15474     E7 3A 68 FC | 	wrlong	#29, fp
15478     08 CE 85 F1 | 	sub	fp, #8
1547c     52 00 00 FF 
15480     6C 65 06 F1 | 	add	objptr, ##42348
15484     32 93 02 FB | 	rdlong	arg01, objptr
15488     52 00 00 FF 
1548c     6C 65 86 F1 | 	sub	objptr, ##42348
15490     E7 92 62 FC | 	wrlong	arg01, fp
15494     E7 92 02 F6 | 	mov	arg01, fp
15498     9C 82 BF FD | 	call	#_push
1549c     E7 F0 03 F6 | 	mov	ptra, fp
154a0     F2 00 A0 FD | 	call	#popregs_
154a4                 | _do_mousey_ret
154a4     2D 00 64 FD | 	ret
154a8                 | 
154a8                 | ' 
154a8                 | ' '------------------ new
154a8                 | ' 
154a8                 | ' sub do_new
154a8                 | _do_new
154a8     03 CA 05 F6 | 	mov	COUNT_, #3
154ac     E8 00 A0 FD | 	call	#pushregs_
154b0                 | ' 
154b0                 | ' if inrun=1 then inrun=2
154b0     51 00 00 FF 
154b4     0C 65 06 F1 | 	add	objptr, ##41740
154b8     32 97 02 FB | 	rdlong	arg03, objptr
154bc     51 00 00 FF 
154c0     0C 65 86 F1 | 	sub	objptr, ##41740
154c4     01 96 0E F2 | 	cmp	arg03, #1 wz
154c8     51 00 00 AF 
154cc     0C 65 06 A1 |  if_e	add	objptr, ##41740
154d0     32 05 68 AC |  if_e	wrlong	#2, objptr
154d4     51 00 00 AF 
154d8     0C 65 86 A1 |  if_e	sub	objptr, ##41740
154dc     13 92 C6 F9 | 	decod	arg01, #19
154e0     01 94 66 F6 | 	neg	arg02, #1
154e4     14 BD B0 FD | 	call	#_pslpoke
154e8     36 00 00 FF 
154ec     28 64 06 F1 | 	add	objptr, ##27688
154f0     32 01 68 FC | 	wrlong	#0, objptr
154f4                 | ' pslpoke(memlo,$FFFFFFFF)
154f4                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
154f4     00 A6 06 F6 | 	mov	local01, #0
154f8     20 00 00 FF 
154fc     10 64 86 F1 | 	sub	objptr, ##16400
15500     D7 1E 48 FB | 	callpa	#(@LR__1831-@LR__1830)>>2,fcache_load_ptr_
15504                 | LR__1830
15504     53 97 02 F6 | 	mov	arg03, local01
15508     04 96 66 F0 | 	shl	arg03, #4
1550c     32 97 02 F1 | 	add	arg03, objptr
15510     98 01 00 FF 
15514     2B 94 06 F6 | 	mov	arg02, ##@LR__6047
15518     4B 95 62 FC | 	wrlong	arg02, arg03
1551c     53 A9 02 F6 | 	mov	local02, local01
15520     04 A8 66 F0 | 	shl	local02, #4
15524     32 A9 02 F1 | 	add	local02, objptr
15528     0C A8 06 F1 | 	add	local02, #12
1552c     54 01 68 FC | 	wrlong	#0, local02
15530     01 A6 06 F1 | 	add	local01, #1
15534     02 00 00 FF 
15538     01 A6 56 F2 | 	cmps	local01, ##1025 wc
1553c     C4 FF 9F CD |  if_b	jmp	#LR__1830
15540                 | LR__1831
15540     35 00 00 FF 
15544     90 64 06 F1 | 	add	objptr, ##27280
15548     00 04 80 FF 
1554c     32 01 68 FC | 	wrlong	##524288, objptr
15550     06 00 00 FF 
15554     30 64 06 F1 | 	add	objptr, ##3120
15558     00 04 80 FF 
1555c     32 01 68 FC | 	wrlong	##524288, objptr
15560     04 64 06 F1 | 	add	objptr, #4
15564     00 04 80 FF 
15568     32 01 68 FC | 	wrlong	##524288, objptr
1556c     0D 00 00 FF 
15570     64 64 86 F1 | 	sub	objptr, ##6756
15574     32 01 68 FC | 	wrlong	#0, objptr
15578     07 00 00 FF 
1557c     24 64 06 F1 | 	add	objptr, ##3620
15580     32 01 68 FC | 	wrlong	#0, objptr
15584     07 00 00 FF 
15588     20 64 86 F1 | 	sub	objptr, ##3616
1558c     00 04 80 FF 
15590     32 01 68 FC | 	wrlong	##524288, objptr
15594     0D 00 00 FF 
15598     D0 64 06 F1 | 	add	objptr, ##6864
1559c     32 01 68 FC | 	wrlong	#0, objptr
155a0     98 01 00 FF 
155a4     2C AA 06 F6 | 	mov	local03, ##@LR__6048
155a8     01 00 00 FF 
155ac     E8 65 06 F1 | 	add	objptr, ##1000
155b0     32 AB 62 FC | 	wrlong	local03, objptr
155b4     08 00 00 FF 
155b8     88 64 86 F1 | 	sub	objptr, ##4232
155bc     32 01 68 FC | 	wrlong	#0, objptr
155c0     04 64 06 F1 | 	add	objptr, #4
155c4     FF FF FF FF 
155c8     32 FF 6B FC | 	wrlong	##-1, objptr
155cc     06 00 00 FF 
155d0     A0 64 06 F1 | 	add	objptr, ##3232
155d4     32 01 68 FC | 	wrlong	#0, objptr
155d8     04 64 06 F1 | 	add	objptr, #4
155dc     32 01 68 FC | 	wrlong	#0, objptr
155e0                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
155e0                 | ' stackpointer=0
155e0                 | ' lineptr=0 
155e0                 | ' programptr=memlo ': stringptr=0
155e0                 | ' dataptr=0 : readline=""
155e0                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
155e0                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
155e0     00 A6 06 F6 | 	mov	local01, #0
155e4     06 00 00 FF 
155e8     9C 64 86 F1 | 	sub	objptr, ##3228
155ec     D7 16 48 FB | 	callpa	#(@LR__1833-@LR__1832)>>2,fcache_load_ptr_
155f0                 | LR__1832
155f0     53 A9 02 F6 | 	mov	local02, local01
155f4     02 A8 66 F0 | 	shl	local02, #2
155f8     53 A9 02 F1 | 	add	local02, local01
155fc     02 A8 66 F0 | 	shl	local02, #2
15600     32 A9 02 F1 | 	add	local02, objptr
15604     08 A8 06 F1 | 	add	local02, #8
15608     FF FF FF FF 
1560c     54 FF 6B FC | 	wrlong	##-1, local02
15610     01 A6 06 F1 | 	add	local01, #1
15614     41 A6 56 F2 | 	cmps	local01, #65 wc
15618     D4 FF 9F CD |  if_b	jmp	#LR__1832
1561c                 | LR__1833
1561c     4B 00 00 FF 
15620     B8 64 86 F1 | 	sub	objptr, ##38584
15624                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
15624     00 A6 06 F6 | 	mov	local01, #0
15628                 | LR__1834
15628     53 97 02 F6 | 	mov	arg03, local01
1562c     02 96 66 F0 | 	shl	arg03, #2
15630     32 A9 02 F6 | 	mov	local02, objptr
15634     53 00 00 FF 
15638     AC A8 06 F1 | 	add	local02, ##42668
1563c     54 97 02 F1 | 	add	arg03, local02
15640     4B AB 0A FB | 	rdlong	local03, arg03 wz
15644     30 00 90 AD |  if_e	jmp	#LR__1835
15648     53 93 02 F6 | 	mov	arg01, local01
1564c     00 94 06 F6 | 	mov	arg02, #0
15650     00 96 06 F6 | 	mov	arg03, #0
15654     1C CA B0 FD | 	call	#_hg010b_spin2_setspritesize
15658     53 A9 02 F6 | 	mov	local02, local01
1565c     02 A8 66 F0 | 	shl	local02, #2
15660     32 AB 02 F6 | 	mov	local03, objptr
15664     53 00 00 FF 
15668     AC AA 06 F1 | 	add	local03, ##42668
1566c     55 A9 02 F1 | 	add	local02, local03
15670     54 93 02 FB | 	rdlong	arg01, local02
15674     A0 2E B1 FD | 	call	#__system___gc_free
15678                 | LR__1835
15678     01 A6 06 F1 | 	add	local01, #1
1567c     10 A6 56 F2 | 	cmps	local01, #16 wc
15680     A4 FF 9F CD |  if_b	jmp	#LR__1834
15684     53 00 00 FF 
15688     00 65 06 F1 | 	add	objptr, ##42752
1568c     00 C0 9F FF 
15690     32 01 68 FC | 	wrlong	##1065353216, objptr
15694     04 64 06 F1 | 	add	objptr, #4
15698     00 C0 9F FF 
1569c     32 01 68 FC | 	wrlong	##1065353216, objptr
156a0     53 00 00 FF 
156a4     00 65 86 F1 | 	sub	objptr, ##42752
156a8     32 AB 02 FB | 	rdlong	local03, objptr
156ac     53 00 00 FF 
156b0     EC 64 06 F1 | 	add	objptr, ##42732
156b4     32 AB 62 FC | 	wrlong	local03, objptr
156b8     53 00 00 FF 
156bc     F0 64 86 F1 | 	sub	objptr, ##42736
156c0     11 92 06 F6 | 	mov	arg01, #17
156c4     08 94 06 F6 | 	mov	arg02, #8
156c8     10 96 06 F6 | 	mov	arg03, #16
156cc     A4 C9 B0 FD | 	call	#_hg010b_spin2_setspritesize
156d0     10 92 06 F6 | 	mov	arg01, #16
156d4     20 94 06 F6 | 	mov	arg02, #32
156d8     20 96 06 F6 | 	mov	arg03, #32
156dc     94 C9 B0 FD | 	call	#_hg010b_spin2_setspritesize
156e0     98 01 00 FF 
156e4     2D AA 06 F6 | 	mov	local03, ##@LR__6049
156e8     53 00 00 FF 
156ec     1C 65 06 F1 | 	add	objptr, ##42780
156f0     32 AB 62 FC | 	wrlong	local03, objptr
156f4     53 00 00 FF 
156f8     1C 65 86 F1 | 	sub	objptr, ##42780
156fc     3C AD B0 FD | 	call	#_init_audio
15700     E7 F0 03 F6 | 	mov	ptra, fp
15704     F2 00 A0 FD | 	call	#popregs_
15708                 | _do_new_ret
15708     2D 00 64 FD | 	ret
1570c                 | 
1570c                 | ' 
1570c                 | ' '-------------------- next
1570c                 | ' 
1570c                 | ' sub do_next()
1570c                 | _do_next
1570c     04 CA 05 F6 | 	mov	COUNT_, #4
15710     E8 00 A0 FD | 	call	#pushregs_
15714     90 7F BF FD | 	call	#_pop
15718     3D A7 02 F6 | 	mov	local01, result1
1571c     3E A9 02 F6 | 	mov	local02, result2
15720     3F AB 02 F6 | 	mov	local03, result3
15724                 | ' t1=pop() :varnum=t1.result.uresult
15724                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
15724     51 00 00 FF 
15728     50 65 06 F1 | 	add	objptr, ##41808
1572c     32 95 02 FB | 	rdlong	arg02, objptr
15730     4A 93 02 F6 | 	mov	arg01, arg02
15734     02 92 66 F0 | 	shl	arg01, #2
15738     4A 93 02 F1 | 	add	arg01, arg02
1573c     02 92 66 F0 | 	shl	arg01, #2
15740     06 00 00 FF 
15744     98 64 86 F1 | 	sub	objptr, ##3224
15748     32 93 02 F1 | 	add	arg01, objptr
1574c     08 92 06 F1 | 	add	arg01, #8
15750     49 95 02 FB | 	rdlong	arg02, arg01
15754     53 95 0A F2 | 	cmp	arg02, local01 wz
15758     4B 00 00 FF 
1575c     B8 64 86 F1 | 	sub	objptr, ##38584
15760     10 00 90 AD |  if_e	jmp	#LR__1840
15764     25 92 06 F6 | 	mov	arg01, #37
15768     00 94 06 F6 | 	mov	arg02, #0
1576c     F0 B8 B0 FD | 	call	#_printerror
15770     50 03 90 FD | 	jmp	#LR__1847
15774                 | LR__1840
15774                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
15774     53 95 02 F6 | 	mov	arg02, local01
15778     04 94 66 F0 | 	shl	arg02, #4
1577c     32 93 02 F6 | 	mov	arg01, objptr
15780     16 00 00 FF 
15784     18 92 06 F1 | 	add	arg01, ##11288
15788     49 95 02 F1 | 	add	arg02, arg01
1578c     0C 94 06 F1 | 	add	arg02, #12
15790     4A 95 02 FB | 	rdlong	arg02, arg02
15794     1E 94 0E F2 | 	cmp	arg02, #30 wz
15798     54 00 90 5D |  if_ne	jmp	#LR__1841
1579c     53 95 02 F6 | 	mov	arg02, local01
157a0     04 94 66 F0 | 	shl	arg02, #4
157a4     16 00 00 FF 
157a8     18 64 06 F1 | 	add	objptr, ##11288
157ac     32 95 02 F1 | 	add	arg02, objptr
157b0     0C 94 06 F1 | 	add	arg02, #12
157b4     4A 39 68 FC | 	wrlong	#28, arg02
157b8     53 AD 02 F6 | 	mov	local04, local01
157bc     04 AC 66 F0 | 	shl	local04, #4
157c0     32 AD 02 F1 | 	add	local04, objptr
157c4     53 95 02 F6 | 	mov	arg02, local01
157c8     04 94 66 F0 | 	shl	arg02, #4
157cc     32 95 02 F1 | 	add	arg02, objptr
157d0     04 94 06 F1 | 	add	arg02, #4
157d4     4A 93 02 FB | 	rdlong	arg01, arg02
157d8     16 00 00 FF 
157dc     18 64 86 F1 | 	sub	objptr, ##11288
157e0     01 94 06 F6 | 	mov	arg02, #1
157e4     8C 1D B1 FD | 	call	#__system___float_tointeger
157e8     04 AC 06 F1 | 	add	local04, #4
157ec     56 7B 62 FC | 	wrlong	result1, local04
157f0                 | LR__1841
157f0     53 AD 02 F6 | 	mov	local04, local01
157f4     04 AC 66 F0 | 	shl	local04, #4
157f8     16 00 00 FF 
157fc     18 64 06 F1 | 	add	objptr, ##11288
15800     32 AD 02 F1 | 	add	local04, objptr
15804     53 95 02 F6 | 	mov	arg02, local01
15808     04 94 66 F0 | 	shl	arg02, #4
1580c     32 95 02 F1 | 	add	arg02, objptr
15810     3B 00 00 FF 
15814     38 65 06 F1 | 	add	objptr, ##30520
15818     32 93 02 FB | 	rdlong	arg01, objptr
1581c     49 7F 02 F6 | 	mov	result3, arg01
15820     02 7E 66 F0 | 	shl	result3, #2
15824     49 7F 02 F1 | 	add	result3, arg01
15828     02 7E 66 F0 | 	shl	result3, #2
1582c     06 00 00 FF 
15830     98 64 86 F1 | 	sub	objptr, ##3224
15834     32 7F 02 F1 | 	add	result3, objptr
15838     04 94 06 F1 | 	add	arg02, #4
1583c     4A 93 02 FB | 	rdlong	arg01, arg02
15840     0C 7E 06 F1 | 	add	result3, #12
15844     3F 7F 02 FB | 	rdlong	result3, result3
15848     3F 93 02 F1 | 	add	arg01, result3
1584c     04 AC 06 F1 | 	add	local04, #4
15850     56 93 62 FC | 	wrlong	arg01, local04
15854                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
15854                 | ' if fortable(fortop).stepval>=0 then
15854     06 00 00 FF 
15858     98 64 06 F1 | 	add	objptr, ##3224
1585c     32 AD 02 FB | 	rdlong	local04, objptr
15860     56 93 02 F6 | 	mov	arg01, local04
15864     02 92 66 F0 | 	shl	arg01, #2
15868     56 93 02 F1 | 	add	arg01, local04
1586c     02 92 66 F0 | 	shl	arg01, #2
15870     06 00 00 FF 
15874     98 64 86 F1 | 	sub	objptr, ##3224
15878     32 93 02 F1 | 	add	arg01, objptr
1587c     0C 92 06 F1 | 	add	arg01, #12
15880     49 93 02 FB | 	rdlong	arg01, arg01
15884     00 92 56 F2 | 	cmps	arg01, #0 wc
15888     4B 00 00 FF 
1588c     B8 64 86 F1 | 	sub	objptr, ##38584
15890     78 00 90 CD |  if_b	jmp	#LR__1842
15894                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
15894     04 A6 66 F0 | 	shl	local01, #4
15898     16 00 00 FF 
1589c     18 64 06 F1 | 	add	objptr, ##11288
158a0     32 A7 02 F1 | 	add	local01, objptr
158a4     3B 00 00 FF 
158a8     38 65 06 F1 | 	add	objptr, ##30520
158ac     32 93 02 FB | 	rdlong	arg01, objptr
158b0     49 AD 02 F6 | 	mov	local04, arg01
158b4     02 AC 66 F0 | 	shl	local04, #2
158b8     49 AD 02 F1 | 	add	local04, arg01
158bc     02 AC 66 F0 | 	shl	local04, #2
158c0     06 00 00 FF 
158c4     98 64 86 F1 | 	sub	objptr, ##3224
158c8     32 AD 02 F1 | 	add	local04, objptr
158cc     04 A6 06 F1 | 	add	local01, #4
158d0     53 A7 02 FB | 	rdlong	local01, local01
158d4     10 AC 06 F1 | 	add	local04, #16
158d8     56 AD 02 FB | 	rdlong	local04, local04
158dc     56 A7 5A F2 | 	cmps	local01, local04 wcz
158e0     4B 00 00 FF 
158e4     B8 64 86 F1 | 	sub	objptr, ##38584
158e8     9C 00 90 ED |  if_be	jmp	#LR__1844
158ec     51 00 00 FF 
158f0     50 65 06 F1 | 	add	objptr, ##41808
158f4     32 AD 02 FB | 	rdlong	local04, objptr
158f8     01 AC 86 F1 | 	sub	local04, #1
158fc     32 AD 62 FC | 	wrlong	local04, objptr
15900     51 00 00 FF 
15904     50 65 86 F1 | 	sub	objptr, ##41808
15908     B8 01 90 FD | 	jmp	#LR__1847
1590c                 | LR__1842
1590c                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
1590c     53 AD 02 F6 | 	mov	local04, local01
15910     04 AC 66 F0 | 	shl	local04, #4
15914     16 00 00 FF 
15918     18 64 06 F1 | 	add	objptr, ##11288
1591c     32 AD 02 F1 | 	add	local04, objptr
15920     3B 00 00 FF 
15924     38 65 06 F1 | 	add	objptr, ##30520
15928     32 A7 02 FB | 	rdlong	local01, objptr
1592c     53 93 02 F6 | 	mov	arg01, local01
15930     02 92 66 F0 | 	shl	arg01, #2
15934     53 93 02 F1 | 	add	arg01, local01
15938     02 92 66 F0 | 	shl	arg01, #2
1593c     06 00 00 FF 
15940     98 64 86 F1 | 	sub	objptr, ##3224
15944     32 93 02 F1 | 	add	arg01, objptr
15948     04 AC 06 F1 | 	add	local04, #4
1594c     56 AD 02 FB | 	rdlong	local04, local04
15950     10 92 06 F1 | 	add	arg01, #16
15954     49 93 02 FB | 	rdlong	arg01, arg01
15958     49 AD 52 F2 | 	cmps	local04, arg01 wc
1595c     4B 00 00 FF 
15960     B8 64 86 F1 | 	sub	objptr, ##38584
15964     20 00 90 3D |  if_ae	jmp	#LR__1843
15968     51 00 00 FF 
1596c     50 65 06 F1 | 	add	objptr, ##41808
15970     32 AD 02 FB | 	rdlong	local04, objptr
15974     01 AC 86 F1 | 	sub	local04, #1
15978     32 AD 62 FC | 	wrlong	local04, objptr
1597c     51 00 00 FF 
15980     50 65 86 F1 | 	sub	objptr, ##41808
15984     3C 01 90 FD | 	jmp	#LR__1847
15988                 | LR__1843
15988                 | LR__1844
15988                 | ' ' if not returned, goto pointer 
15988                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
15988     51 00 00 FF 
1598c     0C 65 06 F1 | 	add	objptr, ##41740
15990     32 AD 02 FB | 	rdlong	local04, objptr
15994     51 00 00 FF 
15998     0C 65 86 F1 | 	sub	objptr, ##41740
1599c     01 AC 16 F2 | 	cmp	local04, #1 wc
159a0     DC 00 90 CD |  if_b	jmp	#LR__1845
159a4     51 00 00 FF 
159a8     50 65 06 F1 | 	add	objptr, ##41808
159ac     32 AD 02 FB | 	rdlong	local04, objptr
159b0     56 A7 02 F6 | 	mov	local01, local04
159b4     02 A6 66 F0 | 	shl	local01, #2
159b8     56 A7 02 F1 | 	add	local01, local04
159bc     02 A6 66 F0 | 	shl	local01, #2
159c0     06 00 00 FF 
159c4     98 64 86 F1 | 	sub	objptr, ##3224
159c8     32 A7 02 F1 | 	add	local01, objptr
159cc     06 00 00 FF 
159d0     20 64 06 F1 | 	add	objptr, ##3104
159d4     32 AD 02 FB | 	rdlong	local04, objptr
159d8     51 00 00 FF 
159dc     D8 64 86 F1 | 	sub	objptr, ##41688
159e0     53 A7 02 FB | 	rdlong	local01, local01
159e4     53 AD 0A F2 | 	cmp	local04, local01 wz
159e8     94 00 90 AD |  if_e	jmp	#LR__1845
159ec     51 00 00 FF 
159f0     50 65 06 F1 | 	add	objptr, ##41808
159f4     32 AD 02 FB | 	rdlong	local04, objptr
159f8     56 A7 02 F6 | 	mov	local01, local04
159fc     02 A6 66 F0 | 	shl	local01, #2
15a00     56 A7 02 F1 | 	add	local01, local04
15a04     02 A6 66 F0 | 	shl	local01, #2
15a08     06 00 00 FF 
15a0c     98 64 86 F1 | 	sub	objptr, ##3224
15a10     32 A7 02 F1 | 	add	local01, objptr
15a14     53 A7 02 FB | 	rdlong	local01, local01
15a18     06 00 00 FF 
15a1c     20 64 06 F1 | 	add	objptr, ##3104
15a20     32 A7 62 FC | 	wrlong	local01, objptr
15a24     78 64 06 F1 | 	add	objptr, #120
15a28     32 AD 02 FB | 	rdlong	local04, objptr
15a2c     56 A7 02 F6 | 	mov	local01, local04
15a30     02 A6 66 F0 | 	shl	local01, #2
15a34     56 A7 02 F1 | 	add	local01, local04
15a38     02 A6 66 F0 | 	shl	local01, #2
15a3c     06 00 00 FF 
15a40     98 64 86 F1 | 	sub	objptr, ##3224
15a44     32 A7 02 F1 | 	add	local01, objptr
15a48     04 A6 06 F1 | 	add	local01, #4
15a4c     53 A7 02 FB | 	rdlong	local01, local01
15a50     06 00 00 FF 
15a54     24 64 06 F1 | 	add	objptr, ##3108
15a58     32 A7 62 FC | 	wrlong	local01, objptr
15a5c     06 00 00 FF 
15a60     40 64 86 F1 | 	sub	objptr, ##3136
15a64     32 AD 02 FB | 	rdlong	local04, objptr
15a68     01 AC 86 F1 | 	sub	local04, #1
15a6c     04 64 06 F1 | 	add	objptr, #4
15a70     32 AD 62 FC | 	wrlong	local04, objptr
15a74     4B 00 00 FF 
15a78     A0 64 86 F1 | 	sub	objptr, ##38560
15a7c     44 00 90 FD | 	jmp	#LR__1846
15a80                 | LR__1845
15a80     51 00 00 FF 
15a84     50 65 06 F1 | 	add	objptr, ##41808
15a88     32 AD 02 FB | 	rdlong	local04, objptr
15a8c     56 A7 02 F6 | 	mov	local01, local04
15a90     02 A6 66 F0 | 	shl	local01, #2
15a94     56 A7 02 F1 | 	add	local01, local04
15a98     02 A6 66 F0 | 	shl	local01, #2
15a9c     06 00 00 FF 
15aa0     98 64 86 F1 | 	sub	objptr, ##3224
15aa4     32 A7 02 F1 | 	add	local01, objptr
15aa8     04 A6 06 F1 | 	add	local01, #4
15aac     53 A7 02 FB | 	rdlong	local01, local01
15ab0     01 A6 86 F1 | 	sub	local01, #1
15ab4     18 64 86 F1 | 	sub	objptr, #24
15ab8     32 A7 62 FC | 	wrlong	local01, objptr
15abc     4B 00 00 FF 
15ac0     A0 64 86 F1 | 	sub	objptr, ##38560
15ac4                 | LR__1846
15ac4                 | LR__1847
15ac4     E7 F0 03 F6 | 	mov	ptra, fp
15ac8     F2 00 A0 FD | 	call	#popregs_
15acc                 | _do_next_ret
15acc     2D 00 64 FD | 	ret
15ad0                 | 
15ad0                 | ' 
15ad0                 | ' '-------------------- no command (print "Unknown command")
15ad0                 | ' 
15ad0                 | ' sub do_no_command
15ad0                 | _do_no_command
15ad0     51 00 00 FF 
15ad4     10 65 06 F1 | 	add	objptr, ##41744
15ad8     32 95 02 FB | 	rdlong	arg02, objptr
15adc     51 00 00 FF 
15ae0     10 65 86 F1 | 	sub	objptr, ##41744
15ae4     17 92 06 F6 | 	mov	arg01, #23
15ae8     74 B5 B0 FD | 	call	#_printerror
15aec                 | _do_no_command_ret
15aec     2D 00 64 FD | 	ret
15af0                 | 
15af0                 | ' 
15af0                 | ' '-------------------- nothing
15af0                 | ' 
15af0                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
15af0                 | _do_nothing
15af0                 | _do_nothing_ret
15af0     2D 00 64 FD | 	ret
15af4                 | 
15af4                 | ' 
15af4                 | ' '-------------------- on
15af4                 | ' 
15af4                 | ' sub do_on
15af4                 | _do_on
15af4     02 CA 05 F6 | 	mov	COUNT_, #2
15af8     E8 00 A0 FD | 	call	#pushregs_
15afc     18 F0 07 F1 | 	add	ptra, #24
15b00     4B 00 00 FF 
15b04     A0 64 06 F1 | 	add	objptr, ##38560
15b08     32 93 02 FB | 	rdlong	arg01, objptr
15b0c     49 7D 02 F6 | 	mov	result2, arg01
15b10     01 7C 66 F0 | 	shl	result2, #1
15b14     49 7D 02 F1 | 	add	result2, arg01
15b18     02 7C 66 F0 | 	shl	result2, #2
15b1c     03 00 00 FF 
15b20     04 64 86 F1 | 	sub	objptr, ##1540
15b24     32 7D 02 F1 | 	add	result2, objptr
15b28     3E A7 02 FB | 	rdlong	local01, result2
15b2c     49 A9 02 F6 | 	mov	local02, arg01
15b30     01 A8 66 F0 | 	shl	local02, #1
15b34     49 A9 02 F1 | 	add	local02, arg01
15b38     02 A8 66 F0 | 	shl	local02, #2
15b3c     32 A9 02 F1 | 	add	local02, objptr
15b40     04 A8 06 F1 | 	add	local02, #4
15b44     54 A9 02 FB | 	rdlong	local02, local02
15b48     48 00 00 FF 
15b4c     9C 64 86 F1 | 	sub	objptr, ##37020
15b50     54 7B BF FD | 	call	#_pop
15b54     E7 7A 62 FC | 	wrlong	result1, fp
15b58     04 CE 05 F1 | 	add	fp, #4
15b5c     E7 7C 62 FC | 	wrlong	result2, fp
15b60     04 CE 05 F1 | 	add	fp, #4
15b64     E7 7E 62 FC | 	wrlong	result3, fp
15b68     08 CE 85 F1 | 	sub	fp, #8
15b6c     E7 92 02 F6 | 	mov	arg01, fp
15b70     10 7D BF FD | 	call	#_converttoint
15b74                 | ' 
15b74                 | ' numpar=compiledline(lineptr_e).result.uresult
15b74                 | ' skip=compiledline(lineptr_e).result.twowords(1)
15b74                 | ' t1=pop()
15b74                 | ' t=converttoint(t1)
15b74                 | ' if t<1 orelse t>numpar then return
15b74     01 7A 56 F2 | 	cmps	result1, #1 wc
15b78     30 00 90 CD |  if_b	jmp	#LR__1850
15b7c     53 7B 5A F2 | 	cmps	result1, local01 wcz
15b80     28 00 90 1D |  if_a	jmp	#LR__1850
15b84     01 7A 86 F1 | 	sub	result1, #1
15b88     3D A9 02 FD | 	qmul	local02, result1
15b8c     4B 00 00 FF 
15b90     A0 64 06 F1 | 	add	objptr, ##38560
15b94     32 A7 02 FB | 	rdlong	local01, objptr
15b98     18 A8 62 FD | 	getqx	local02
15b9c     54 A7 02 F1 | 	add	local01, local02
15ba0     32 A7 62 FC | 	wrlong	local01, objptr
15ba4     4B 00 00 FF 
15ba8     A0 64 86 F1 | 	sub	objptr, ##38560
15bac                 | LR__1850
15bac     E7 F0 03 F6 | 	mov	ptra, fp
15bb0     F2 00 A0 FD | 	call	#popregs_
15bb4                 | _do_on_ret
15bb4     2D 00 64 FD | 	ret
15bb8                 | 
15bb8                 | ' 
15bb8                 | ' '-------------------- open
15bb8                 | ' 
15bb8                 | ' sub do_open
15bb8                 | _do_open
15bb8     04 CA 05 F6 | 	mov	COUNT_, #4
15bbc     E8 00 A0 FD | 	call	#pushregs_
15bc0     20 F0 07 F1 | 	add	ptra, #32
15bc4     E0 7A BF FD | 	call	#_pop
15bc8     3F 97 02 F6 | 	mov	arg03, result3
15bcc     E7 7A 62 FC | 	wrlong	result1, fp
15bd0     04 CE 05 F1 | 	add	fp, #4
15bd4     E7 7C 62 FC | 	wrlong	result2, fp
15bd8     04 CE 05 F1 | 	add	fp, #4
15bdc     E7 96 62 FC | 	wrlong	arg03, fp
15be0                 | ' 
15be0                 | ' numpar=compiledline(lineptr_e).result.uresult
15be0                 | ' 
15be0                 | ' t1=pop()
15be0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15be0     08 CE 85 F1 | 	sub	fp, #8
15be4     2B 96 0E F2 | 	cmp	arg03, #43 wz
15be8     18 00 90 5D |  if_ne	jmp	#LR__1860
15bec     E7 92 02 FB | 	rdlong	arg01, fp
15bf0     24 7C BF FD | 	call	#_convertstring
15bf4     E7 7A 62 FC | 	wrlong	result1, fp
15bf8     08 CE 05 F1 | 	add	fp, #8
15bfc     E7 3E 68 FC | 	wrlong	#31, fp
15c00     08 CE 85 F1 | 	sub	fp, #8
15c04                 | LR__1860
15c04                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
15c04     08 CE 05 F1 | 	add	fp, #8
15c08     E7 96 02 FB | 	rdlong	arg03, fp
15c0c     08 CE 85 F1 | 	sub	fp, #8
15c10     1F 96 0E F2 | 	cmp	arg03, #31 wz
15c14     44 00 90 AD |  if_e	jmp	#LR__1861
15c18     00 92 06 F6 | 	mov	arg01, #0
15c1c     40 43 B1 FD | 	call	#__system___getiolock_0622
15c20     3D 93 02 F6 | 	mov	arg01, result1
15c24     B4 ED B0 FD | 	call	#__system___lockmem
15c28     98 01 00 FF 
15c2c     38 94 06 F6 | 	mov	arg02, ##@LR__6050
15c30     00 92 06 F6 | 	mov	arg01, #0
15c34     00 96 06 F6 | 	mov	arg03, #0
15c38     94 FA B0 FD | 	call	#__system___basic_print_string
15c3c     00 92 06 F6 | 	mov	arg01, #0
15c40     0A 94 06 F6 | 	mov	arg02, #10
15c44     00 96 06 F6 | 	mov	arg03, #0
15c48     2C FA B0 FD | 	call	#__system___basic_print_char
15c4c     00 92 06 F6 | 	mov	arg01, #0
15c50     0C 43 B1 FD | 	call	#__system___getiolock_0622
15c54     3D 01 68 FC | 	wrlong	#0, result1
15c58     C4 01 90 FD | 	jmp	#LR__1872
15c5c                 | LR__1861
15c5c     E7 A6 02 FB | 	rdlong	local01, fp
15c60     44 7A BF FD | 	call	#_pop
15c64     3F 97 02 F6 | 	mov	arg03, result3
15c68     E7 7A 62 FC | 	wrlong	result1, fp
15c6c     04 CE 05 F1 | 	add	fp, #4
15c70     E7 7C 62 FC | 	wrlong	result2, fp
15c74     04 CE 05 F1 | 	add	fp, #4
15c78     E7 96 62 FC | 	wrlong	arg03, fp
15c7c                 | ' filename=t1.result.sresult
15c7c                 | ' t1=pop()
15c7c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15c7c     08 CE 85 F1 | 	sub	fp, #8
15c80     2B 96 0E F2 | 	cmp	arg03, #43 wz
15c84     18 00 90 5D |  if_ne	jmp	#LR__1862
15c88     E7 92 02 FB | 	rdlong	arg01, fp
15c8c     88 7B BF FD | 	call	#_convertstring
15c90     E7 7A 62 FC | 	wrlong	result1, fp
15c94     08 CE 05 F1 | 	add	fp, #8
15c98     E7 3E 68 FC | 	wrlong	#31, fp
15c9c     08 CE 85 F1 | 	sub	fp, #8
15ca0                 | LR__1862
15ca0     00 A8 06 F6 | 	mov	local02, #0
15ca4                 | ' mode=0
15ca4                 | ' if t1.result_type=result_string then
15ca4     08 CE 05 F1 | 	add	fp, #8
15ca8     E7 94 02 FB | 	rdlong	arg02, fp
15cac     08 CE 85 F1 | 	sub	fp, #8
15cb0     1F 94 0E F2 | 	cmp	arg02, #31 wz
15cb4     4C 00 90 5D |  if_ne	jmp	#LR__1863
15cb8                 | '   if t1.result.sresult="read" then mode=1
15cb8     E7 92 02 FB | 	rdlong	arg01, fp
15cbc     98 01 00 FF 
15cc0     4A 94 06 F6 | 	mov	arg02, ##@LR__6051
15cc4     3C ED B0 FD | 	call	#__system___string_cmp
15cc8     00 7A 0E F2 | 	cmp	result1, #0 wz
15ccc     01 A8 06 A6 |  if_e	mov	local02, #1
15cd0                 | '   if t1.result.sresult="write" then mode=2
15cd0     E7 92 02 FB | 	rdlong	arg01, fp
15cd4     98 01 00 FF 
15cd8     4F 94 06 F6 | 	mov	arg02, ##@LR__6052
15cdc     24 ED B0 FD | 	call	#__system___string_cmp
15ce0     00 7A 0E F2 | 	cmp	result1, #0 wz
15ce4     02 A8 06 A6 |  if_e	mov	local02, #2
15ce8                 | '   if t1.result.sresult="append" then mode=4
15ce8     E7 92 02 FB | 	rdlong	arg01, fp
15cec     98 01 00 FF 
15cf0     55 94 06 F6 | 	mov	arg02, ##@LR__6053
15cf4     0C ED B0 FD | 	call	#__system___string_cmp
15cf8     00 7A 0E F2 | 	cmp	result1, #0 wz
15cfc     04 A8 06 A6 |  if_e	mov	local02, #4
15d00     0C 00 90 FD | 	jmp	#LR__1864
15d04                 | LR__1863
15d04     E7 92 02 F6 | 	mov	arg01, fp
15d08     78 7B BF FD | 	call	#_converttoint
15d0c     3D A9 02 F6 | 	mov	local02, result1
15d10                 | LR__1864
15d10     94 79 BF FD | 	call	#_pop
15d14     3F 97 02 F6 | 	mov	arg03, result3
15d18     E7 7A 62 FC | 	wrlong	result1, fp
15d1c     04 CE 05 F1 | 	add	fp, #4
15d20     E7 7C 62 FC | 	wrlong	result2, fp
15d24     04 CE 05 F1 | 	add	fp, #4
15d28     E7 96 62 FC | 	wrlong	arg03, fp
15d2c                 | ' t1=pop()
15d2c                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
15d2c     08 CE 85 F1 | 	sub	fp, #8
15d30     2C 96 0E F2 | 	cmp	arg03, #44 wz
15d34     44 00 90 AD |  if_e	jmp	#LR__1865
15d38     00 92 06 F6 | 	mov	arg01, #0
15d3c     20 42 B1 FD | 	call	#__system___getiolock_0622
15d40     3D 93 02 F6 | 	mov	arg01, result1
15d44     94 EC B0 FD | 	call	#__system___lockmem
15d48     98 01 00 FF 
15d4c     5C 94 06 F6 | 	mov	arg02, ##@LR__6054
15d50     00 92 06 F6 | 	mov	arg01, #0
15d54     00 96 06 F6 | 	mov	arg03, #0
15d58     74 F9 B0 FD | 	call	#__system___basic_print_string
15d5c     00 92 06 F6 | 	mov	arg01, #0
15d60     0A 94 06 F6 | 	mov	arg02, #10
15d64     00 96 06 F6 | 	mov	arg03, #0
15d68     0C F9 B0 FD | 	call	#__system___basic_print_char
15d6c     00 92 06 F6 | 	mov	arg01, #0
15d70     EC 41 B1 FD | 	call	#__system___getiolock_0622
15d74     3D 01 68 FC | 	wrlong	#0, result1
15d78     A4 00 90 FD | 	jmp	#LR__1872
15d7c                 | LR__1865
15d7c     E7 AA 02 FB | 	rdlong	local03, fp
15d80                 | ' channel  = t1.result.iresult
15d80                 | ' select case  mode
15d80     54 AD 02 F6 | 	mov	local04, local02
15d84     01 AC 86 F1 | 	sub	local04, #1
15d88     04 AC 26 F3 | 	fle	local04, #4
15d8c     30 AC 62 FD | 	jmprel	local04
15d90                 | LR__1866
15d90     10 00 90 FD | 	jmp	#LR__1867
15d94     20 00 90 FD | 	jmp	#LR__1868
15d98     44 00 90 FD | 	jmp	#LR__1870
15d9c     2C 00 90 FD | 	jmp	#LR__1869
15da0     3C 00 90 FD | 	jmp	#LR__1870
15da4                 | LR__1867
15da4     55 93 02 F6 | 	mov	arg01, local03
15da8     53 95 02 F6 | 	mov	arg02, local01
15dac     00 96 06 F6 | 	mov	arg03, #0
15db0     D8 F7 B0 FD | 	call	#__system___basic_open_string
15db4     68 00 90 FD | 	jmp	#LR__1871
15db8                 | LR__1868
15db8     55 93 02 F6 | 	mov	arg01, local03
15dbc     53 95 02 F6 | 	mov	arg02, local01
15dc0     0D 96 06 F6 | 	mov	arg03, #13
15dc4     C4 F7 B0 FD | 	call	#__system___basic_open_string
15dc8     54 00 90 FD | 	jmp	#LR__1871
15dcc                 | LR__1869
15dcc     55 93 02 F6 | 	mov	arg01, local03
15dd0     53 95 02 F6 | 	mov	arg02, local01
15dd4     25 96 06 F6 | 	mov	arg03, #37
15dd8     B0 F7 B0 FD | 	call	#__system___basic_open_string
15ddc     40 00 90 FD | 	jmp	#LR__1871
15de0                 | LR__1870
15de0     00 92 06 F6 | 	mov	arg01, #0
15de4     78 41 B1 FD | 	call	#__system___getiolock_0622
15de8     3D 93 02 F6 | 	mov	arg01, result1
15dec     EC EB B0 FD | 	call	#__system___lockmem
15df0     98 01 00 FF 
15df4     6E 94 06 F6 | 	mov	arg02, ##@LR__6055
15df8     00 92 06 F6 | 	mov	arg01, #0
15dfc     00 96 06 F6 | 	mov	arg03, #0
15e00     CC F8 B0 FD | 	call	#__system___basic_print_string
15e04     00 92 06 F6 | 	mov	arg01, #0
15e08     0A 94 06 F6 | 	mov	arg02, #10
15e0c     00 96 06 F6 | 	mov	arg03, #0
15e10     64 F8 B0 FD | 	call	#__system___basic_print_char
15e14     00 92 06 F6 | 	mov	arg01, #0
15e18     44 41 B1 FD | 	call	#__system___getiolock_0622
15e1c     3D 01 68 FC | 	wrlong	#0, result1
15e20                 | LR__1871
15e20                 | LR__1872
15e20     E7 F0 03 F6 | 	mov	ptra, fp
15e24     F2 00 A0 FD | 	call	#popregs_
15e28                 | _do_open_ret
15e28     2D 00 64 FD | 	ret
15e2c                 | 
15e2c                 | ' 
15e2c                 | ' ' ------------------ padrx
15e2c                 | ' 
15e2c                 | ' sub do_padrx
15e2c                 | _do_padrx
15e2c     04 CA 05 F6 | 	mov	COUNT_, #4
15e30     E8 00 A0 FD | 	call	#pushregs_
15e34     14 F0 07 F1 | 	add	ptra, #20
15e38     4B 00 00 FF 
15e3c     A0 64 06 F1 | 	add	objptr, ##38560
15e40     32 A7 02 FB | 	rdlong	local01, objptr
15e44     53 97 02 F6 | 	mov	arg03, local01
15e48     01 96 66 F0 | 	shl	arg03, #1
15e4c     53 97 02 F1 | 	add	arg03, local01
15e50     02 96 66 F0 | 	shl	arg03, #2
15e54     03 00 00 FF 
15e58     04 64 86 F1 | 	sub	objptr, ##1540
15e5c     32 97 02 F1 | 	add	arg03, objptr
15e60     4B A9 02 FB | 	rdlong	local02, arg03
15e64                 | ' 
15e64                 | ' numpar=compiledline(lineptr_e).result.uresult
15e64                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
15e64     02 A8 16 F2 | 	cmp	local02, #2 wc
15e68     48 00 00 FF 
15e6c     9C 64 86 F1 | 	sub	objptr, ##37020
15e70     40 00 90 CD |  if_b	jmp	#LR__1880
15e74     00 92 06 F6 | 	mov	arg01, #0
15e78     E4 40 B1 FD | 	call	#__system___getiolock_0622
15e7c     3D 93 02 F6 | 	mov	arg01, result1
15e80     58 EB B0 FD | 	call	#__system___lockmem
15e84     98 01 00 FF 
15e88     81 94 06 F6 | 	mov	arg02, ##@LR__6056
15e8c     00 92 06 F6 | 	mov	arg01, #0
15e90     00 96 06 F6 | 	mov	arg03, #0
15e94     38 F8 B0 FD | 	call	#__system___basic_print_string
15e98     00 92 06 F6 | 	mov	arg01, #0
15e9c     C0 40 B1 FD | 	call	#__system___getiolock_0622
15ea0     3D 01 68 FC | 	wrlong	#0, result1
15ea4     27 92 06 F6 | 	mov	arg01, #39
15ea8     00 94 06 F6 | 	mov	arg02, #0
15eac     B0 B1 B0 FD | 	call	#_printerror
15eb0     A0 01 90 FD | 	jmp	#LR__1884
15eb4                 | LR__1880
15eb4                 | ' if numpar=0 then 
15eb4     00 A8 0E F2 | 	cmp	local02, #0 wz
15eb8     8C 00 90 5D |  if_ne	jmp	#LR__1881
15ebc     00 C0 1B FF 
15ec0     00 A8 06 F6 | 	mov	local02, ##931135488
15ec4     52 00 00 FF 
15ec8     E8 65 06 F1 | 	add	objptr, ##42472
15ecc     32 93 02 FB | 	rdlong	arg01, objptr
15ed0     52 00 00 FF 
15ed4     E8 65 86 F1 | 	sub	objptr, ##42472
15ed8     49 93 52 F6 | 	abs	arg01, arg01 wc
15edc     1F AA C6 C9 |  if_b	decod	local03, #31
15ee0     00 AA 06 36 |  if_ae	mov	local03, #0
15ee4     C0 0D B1 FD | 	call	#__system___float_fromuns
15ee8     55 7B 62 F5 | 	xor	result1, local03
15eec     3D 93 02 F6 | 	mov	arg01, result1
15ef0     FF 7F 23 FF 
15ef4     00 94 06 F6 | 	mov	arg02, ##1191181824
15ef8     B4 13 B1 FD | 	call	#__system___float_div
15efc     3D 95 02 F6 | 	mov	arg02, result1
15f00     54 93 02 F6 | 	mov	arg01, local02
15f04     D4 0D B1 FD | 	call	#__system___float_add
15f08     3D AD 02 F6 | 	mov	local04, result1
15f0c                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
15f0c     56 93 02 F6 | 	mov	arg01, local04
15f10     1F 92 06 F4 | 	bitl	arg01, #31
15f14     89 41 1D FF 
15f18     6F 94 06 F6 | 	mov	arg02, ##981668463
15f1c     01 96 06 F6 | 	mov	arg03, #1
15f20     BC 15 B1 FD | 	call	#__system___float_cmp
15f24     00 7A 56 F2 | 	cmps	result1, #0 wc
15f28     00 AC 06 C6 |  if_b	mov	local04, #0
15f2c     E7 AC 62 FC | 	wrlong	local04, fp
15f30     08 CE 05 F1 | 	add	fp, #8
15f34     E7 3C 68 FC | 	wrlong	#30, fp
15f38     08 CE 85 F1 | 	sub	fp, #8
15f3c     E7 92 02 F6 | 	mov	arg01, fp
15f40     F4 77 BF FD | 	call	#_push
15f44                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
15f44     0C 01 90 FD | 	jmp	#LR__1884
15f48                 | LR__1881
15f48     5C 77 BF FD | 	call	#_pop
15f4c     E7 7A 62 FC | 	wrlong	result1, fp
15f50     04 CE 05 F1 | 	add	fp, #4
15f54     E7 7C 62 FC | 	wrlong	result2, fp
15f58     04 CE 05 F1 | 	add	fp, #4
15f5c     E7 7E 62 FC | 	wrlong	result3, fp
15f60                 | ' t1=pop()
15f60                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
15f60     08 CE 85 F1 | 	sub	fp, #8
15f64     1C 7E 0E F2 | 	cmp	result3, #28 wz
15f68     08 CE 05 51 |  if_ne	add	fp, #8
15f6c     E7 A6 02 5B |  if_ne	rdlong	local01, fp
15f70     08 CE 85 51 |  if_ne	sub	fp, #8
15f74     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
15f78     CC 00 90 5D |  if_ne	jmp	#LR__1883
15f7c     E7 AC 02 FB | 	rdlong	local04, fp
15f80     53 00 00 FF 
15f84     60 65 06 F1 | 	add	objptr, ##42848
15f88     32 AD 62 FC | 	wrlong	local04, objptr
15f8c                 | '   q=t1.result.uresult
15f8c                 | '   if q<7 then 
15f8c     53 00 00 FF 
15f90     60 65 86 F1 | 	sub	objptr, ##42848
15f94     07 AC 56 F2 | 	cmps	local04, #7 wc
15f98     9C 00 90 3D |  if_ae	jmp	#LR__1882
15f9c     00 C0 1B FF 
15fa0     00 AC 06 F6 | 	mov	local04, ##931135488
15fa4     53 00 00 FF 
15fa8     60 65 06 F1 | 	add	objptr, ##42848
15fac     32 A9 02 FB | 	rdlong	local02, objptr
15fb0     02 A8 66 F0 | 	shl	local02, #2
15fb4     78 65 86 F1 | 	sub	objptr, #376
15fb8     32 A9 02 F1 | 	add	local02, objptr
15fbc     54 93 02 FB | 	rdlong	arg01, local02
15fc0     52 00 00 FF 
15fc4     E8 65 86 F1 | 	sub	objptr, ##42472
15fc8     49 93 52 F6 | 	abs	arg01, arg01 wc
15fcc     1F AA C6 C9 |  if_b	decod	local03, #31
15fd0     00 AA 06 36 |  if_ae	mov	local03, #0
15fd4     D0 0C B1 FD | 	call	#__system___float_fromuns
15fd8     55 7B 62 F5 | 	xor	result1, local03
15fdc     3D 93 02 F6 | 	mov	arg01, result1
15fe0     FF 7F 23 FF 
15fe4     00 94 06 F6 | 	mov	arg02, ##1191181824
15fe8     C4 12 B1 FD | 	call	#__system___float_div
15fec     3D 95 02 F6 | 	mov	arg02, result1
15ff0     56 93 02 F6 | 	mov	arg01, local04
15ff4     E4 0C B1 FD | 	call	#__system___float_add
15ff8     3D AD 02 F6 | 	mov	local04, result1
15ffc                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
15ffc     56 93 02 F6 | 	mov	arg01, local04
16000     1F 92 06 F4 | 	bitl	arg01, #31
16004     89 41 1D FF 
16008     6F 94 06 F6 | 	mov	arg02, ##981668463
1600c     01 96 06 F6 | 	mov	arg03, #1
16010     CC 14 B1 FD | 	call	#__system___float_cmp
16014     00 7A 56 F2 | 	cmps	result1, #0 wc
16018     00 AC 06 C6 |  if_b	mov	local04, #0
1601c     E7 AC 62 FC | 	wrlong	local04, fp
16020     08 CE 05 F1 | 	add	fp, #8
16024     E7 3C 68 FC | 	wrlong	#30, fp
16028     08 CE 85 F1 | 	sub	fp, #8
1602c     E7 92 02 F6 | 	mov	arg01, fp
16030     04 77 BF FD | 	call	#_push
16034                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16034     1C 00 90 FD | 	jmp	#LR__1884
16038                 | LR__1882
16038     29 92 06 F6 | 	mov	arg01, #41
1603c     00 94 06 F6 | 	mov	arg02, #0
16040     1C B0 B0 FD | 	call	#_printerror
16044                 | '      printerror(41) : return
16044     0C 00 90 FD | 	jmp	#LR__1884
16048                 | LR__1883
16048     29 92 06 F6 | 	mov	arg01, #41
1604c     00 94 06 F6 | 	mov	arg02, #0
16050     0C B0 B0 FD | 	call	#_printerror
16054                 | LR__1884
16054     E7 F0 03 F6 | 	mov	ptra, fp
16058     F2 00 A0 FD | 	call	#popregs_
1605c                 | _do_padrx_ret
1605c     2D 00 64 FD | 	ret
16060                 | 
16060                 | ' 
16060                 | ' ' ------------------ padry
16060                 | ' 
16060                 | ' sub do_padry
16060                 | _do_padry
16060     04 CA 05 F6 | 	mov	COUNT_, #4
16064     E8 00 A0 FD | 	call	#pushregs_
16068     14 F0 07 F1 | 	add	ptra, #20
1606c     4B 00 00 FF 
16070     A0 64 06 F1 | 	add	objptr, ##38560
16074     32 A7 02 FB | 	rdlong	local01, objptr
16078     53 97 02 F6 | 	mov	arg03, local01
1607c     01 96 66 F0 | 	shl	arg03, #1
16080     53 97 02 F1 | 	add	arg03, local01
16084     02 96 66 F0 | 	shl	arg03, #2
16088     03 00 00 FF 
1608c     04 64 86 F1 | 	sub	objptr, ##1540
16090     32 97 02 F1 | 	add	arg03, objptr
16094     4B A9 02 FB | 	rdlong	local02, arg03
16098                 | ' 
16098                 | ' numpar=compiledline(lineptr_e).result.uresult
16098                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
16098     02 A8 16 F2 | 	cmp	local02, #2 wc
1609c     48 00 00 FF 
160a0     9C 64 86 F1 | 	sub	objptr, ##37020
160a4     40 00 90 CD |  if_b	jmp	#LR__1890
160a8     00 92 06 F6 | 	mov	arg01, #0
160ac     B0 3E B1 FD | 	call	#__system___getiolock_0622
160b0     3D 93 02 F6 | 	mov	arg01, result1
160b4     24 E9 B0 FD | 	call	#__system___lockmem
160b8     98 01 00 FF 
160bc     89 94 06 F6 | 	mov	arg02, ##@LR__6057
160c0     00 92 06 F6 | 	mov	arg01, #0
160c4     00 96 06 F6 | 	mov	arg03, #0
160c8     04 F6 B0 FD | 	call	#__system___basic_print_string
160cc     00 92 06 F6 | 	mov	arg01, #0
160d0     8C 3E B1 FD | 	call	#__system___getiolock_0622
160d4     3D 01 68 FC | 	wrlong	#0, result1
160d8     27 92 06 F6 | 	mov	arg01, #39
160dc     00 94 06 F6 | 	mov	arg02, #0
160e0     7C AF B0 FD | 	call	#_printerror
160e4     A0 01 90 FD | 	jmp	#LR__1894
160e8                 | LR__1890
160e8                 | ' if numpar=0 then 
160e8     00 A8 0E F2 | 	cmp	local02, #0 wz
160ec     8C 00 90 5D |  if_ne	jmp	#LR__1891
160f0     00 C0 1B FF 
160f4     00 A8 06 F6 | 	mov	local02, ##931135488
160f8     53 00 00 FF 
160fc     04 64 06 F1 | 	add	objptr, ##42500
16100     32 93 02 FB | 	rdlong	arg01, objptr
16104     53 00 00 FF 
16108     04 64 86 F1 | 	sub	objptr, ##42500
1610c     49 93 52 F6 | 	abs	arg01, arg01 wc
16110     1F AA C6 C9 |  if_b	decod	local03, #31
16114     00 AA 06 36 |  if_ae	mov	local03, #0
16118     8C 0B B1 FD | 	call	#__system___float_fromuns
1611c     55 7B 62 F5 | 	xor	result1, local03
16120     3D 93 02 F6 | 	mov	arg01, result1
16124     FF 7F 23 FF 
16128     00 94 06 F6 | 	mov	arg02, ##1191181824
1612c     80 11 B1 FD | 	call	#__system___float_div
16130     3D 95 02 F6 | 	mov	arg02, result1
16134     54 93 02 F6 | 	mov	arg01, local02
16138     A0 0B B1 FD | 	call	#__system___float_add
1613c     3D AD 02 F6 | 	mov	local04, result1
16140                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16140     56 93 02 F6 | 	mov	arg01, local04
16144     1F 92 06 F4 | 	bitl	arg01, #31
16148     89 41 1D FF 
1614c     6F 94 06 F6 | 	mov	arg02, ##981668463
16150     01 96 06 F6 | 	mov	arg03, #1
16154     88 13 B1 FD | 	call	#__system___float_cmp
16158     00 7A 56 F2 | 	cmps	result1, #0 wc
1615c     00 AC 06 C6 |  if_b	mov	local04, #0
16160     E7 AC 62 FC | 	wrlong	local04, fp
16164     08 CE 05 F1 | 	add	fp, #8
16168     E7 3C 68 FC | 	wrlong	#30, fp
1616c     08 CE 85 F1 | 	sub	fp, #8
16170     E7 92 02 F6 | 	mov	arg01, fp
16174     C0 75 BF FD | 	call	#_push
16178                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16178     0C 01 90 FD | 	jmp	#LR__1894
1617c                 | LR__1891
1617c     28 75 BF FD | 	call	#_pop
16180     E7 7A 62 FC | 	wrlong	result1, fp
16184     04 CE 05 F1 | 	add	fp, #4
16188     E7 7C 62 FC | 	wrlong	result2, fp
1618c     04 CE 05 F1 | 	add	fp, #4
16190     E7 7E 62 FC | 	wrlong	result3, fp
16194                 | ' t1=pop()
16194                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16194     08 CE 85 F1 | 	sub	fp, #8
16198     1C 7E 0E F2 | 	cmp	result3, #28 wz
1619c     08 CE 05 51 |  if_ne	add	fp, #8
161a0     E7 A6 02 5B |  if_ne	rdlong	local01, fp
161a4     08 CE 85 51 |  if_ne	sub	fp, #8
161a8     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
161ac     CC 00 90 5D |  if_ne	jmp	#LR__1893
161b0     E7 AC 02 FB | 	rdlong	local04, fp
161b4     53 00 00 FF 
161b8     60 65 06 F1 | 	add	objptr, ##42848
161bc     32 AD 62 FC | 	wrlong	local04, objptr
161c0                 | '   q=t1.result.uresult
161c0                 | '   if q<7 then 
161c0     53 00 00 FF 
161c4     60 65 86 F1 | 	sub	objptr, ##42848
161c8     07 AC 56 F2 | 	cmps	local04, #7 wc
161cc     9C 00 90 3D |  if_ae	jmp	#LR__1892
161d0     00 C0 1B FF 
161d4     00 AC 06 F6 | 	mov	local04, ##931135488
161d8     53 00 00 FF 
161dc     60 65 06 F1 | 	add	objptr, ##42848
161e0     32 A9 02 FB | 	rdlong	local02, objptr
161e4     02 A8 66 F0 | 	shl	local02, #2
161e8     5C 65 86 F1 | 	sub	objptr, #348
161ec     32 A9 02 F1 | 	add	local02, objptr
161f0     54 93 02 FB | 	rdlong	arg01, local02
161f4     53 00 00 FF 
161f8     04 64 86 F1 | 	sub	objptr, ##42500
161fc     49 93 52 F6 | 	abs	arg01, arg01 wc
16200     1F AA C6 C9 |  if_b	decod	local03, #31
16204     00 AA 06 36 |  if_ae	mov	local03, #0
16208     9C 0A B1 FD | 	call	#__system___float_fromuns
1620c     55 7B 62 F5 | 	xor	result1, local03
16210     3D 93 02 F6 | 	mov	arg01, result1
16214     FF 7F 23 FF 
16218     00 94 06 F6 | 	mov	arg02, ##1191181824
1621c     90 10 B1 FD | 	call	#__system___float_div
16220     3D 95 02 F6 | 	mov	arg02, result1
16224     56 93 02 F6 | 	mov	arg01, local04
16228     B0 0A B1 FD | 	call	#__system___float_add
1622c     3D AD 02 F6 | 	mov	local04, result1
16230                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16230     56 93 02 F6 | 	mov	arg01, local04
16234     1F 92 06 F4 | 	bitl	arg01, #31
16238     89 41 1D FF 
1623c     6F 94 06 F6 | 	mov	arg02, ##981668463
16240     01 96 06 F6 | 	mov	arg03, #1
16244     98 12 B1 FD | 	call	#__system___float_cmp
16248     00 7A 56 F2 | 	cmps	result1, #0 wc
1624c     00 AC 06 C6 |  if_b	mov	local04, #0
16250     E7 AC 62 FC | 	wrlong	local04, fp
16254     08 CE 05 F1 | 	add	fp, #8
16258     E7 3C 68 FC | 	wrlong	#30, fp
1625c     08 CE 85 F1 | 	sub	fp, #8
16260     E7 92 02 F6 | 	mov	arg01, fp
16264     D0 74 BF FD | 	call	#_push
16268                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16268     1C 00 90 FD | 	jmp	#LR__1894
1626c                 | LR__1892
1626c     29 92 06 F6 | 	mov	arg01, #41
16270     00 94 06 F6 | 	mov	arg02, #0
16274     E8 AD B0 FD | 	call	#_printerror
16278                 | '      printerror(41) : return
16278     0C 00 90 FD | 	jmp	#LR__1894
1627c                 | LR__1893
1627c     29 92 06 F6 | 	mov	arg01, #41
16280     00 94 06 F6 | 	mov	arg02, #0
16284     D8 AD B0 FD | 	call	#_printerror
16288                 | LR__1894
16288     E7 F0 03 F6 | 	mov	ptra, fp
1628c     F2 00 A0 FD | 	call	#popregs_
16290                 | _do_padry_ret
16290     2D 00 64 FD | 	ret
16294                 | 
16294                 | ' 
16294                 | ' ' ------------------ padrz
16294                 | ' 
16294                 | ' sub do_padrz
16294                 | _do_padrz
16294     04 CA 05 F6 | 	mov	COUNT_, #4
16298     E8 00 A0 FD | 	call	#pushregs_
1629c     14 F0 07 F1 | 	add	ptra, #20
162a0     4B 00 00 FF 
162a4     A0 64 06 F1 | 	add	objptr, ##38560
162a8     32 A7 02 FB | 	rdlong	local01, objptr
162ac     53 97 02 F6 | 	mov	arg03, local01
162b0     01 96 66 F0 | 	shl	arg03, #1
162b4     53 97 02 F1 | 	add	arg03, local01
162b8     02 96 66 F0 | 	shl	arg03, #2
162bc     03 00 00 FF 
162c0     04 64 86 F1 | 	sub	objptr, ##1540
162c4     32 97 02 F1 | 	add	arg03, objptr
162c8     4B A9 02 FB | 	rdlong	local02, arg03
162cc                 | ' 
162cc                 | ' numpar=compiledline(lineptr_e).result.uresult
162cc                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
162cc     02 A8 16 F2 | 	cmp	local02, #2 wc
162d0     48 00 00 FF 
162d4     9C 64 86 F1 | 	sub	objptr, ##37020
162d8     40 00 90 CD |  if_b	jmp	#LR__1900
162dc     00 92 06 F6 | 	mov	arg01, #0
162e0     7C 3C B1 FD | 	call	#__system___getiolock_0622
162e4     3D 93 02 F6 | 	mov	arg01, result1
162e8     F0 E6 B0 FD | 	call	#__system___lockmem
162ec     98 01 00 FF 
162f0     91 94 06 F6 | 	mov	arg02, ##@LR__6058
162f4     00 92 06 F6 | 	mov	arg01, #0
162f8     00 96 06 F6 | 	mov	arg03, #0
162fc     D0 F3 B0 FD | 	call	#__system___basic_print_string
16300     00 92 06 F6 | 	mov	arg01, #0
16304     58 3C B1 FD | 	call	#__system___getiolock_0622
16308     3D 01 68 FC | 	wrlong	#0, result1
1630c     27 92 06 F6 | 	mov	arg01, #39
16310     00 94 06 F6 | 	mov	arg02, #0
16314     48 AD B0 FD | 	call	#_printerror
16318     A0 01 90 FD | 	jmp	#LR__1904
1631c                 | LR__1900
1631c                 | ' if numpar=0 then 
1631c     00 A8 0E F2 | 	cmp	local02, #0 wz
16320     8C 00 90 5D |  if_ne	jmp	#LR__1901
16324     00 C0 1B FF 
16328     00 A8 06 F6 | 	mov	local02, ##931135488
1632c     53 00 00 FF 
16330     20 64 06 F1 | 	add	objptr, ##42528
16334     32 93 02 FB | 	rdlong	arg01, objptr
16338     53 00 00 FF 
1633c     20 64 86 F1 | 	sub	objptr, ##42528
16340     49 93 52 F6 | 	abs	arg01, arg01 wc
16344     1F AA C6 C9 |  if_b	decod	local03, #31
16348     00 AA 06 36 |  if_ae	mov	local03, #0
1634c     58 09 B1 FD | 	call	#__system___float_fromuns
16350     55 7B 62 F5 | 	xor	result1, local03
16354     3D 93 02 F6 | 	mov	arg01, result1
16358     FF 7F 23 FF 
1635c     00 94 06 F6 | 	mov	arg02, ##1191181824
16360     4C 0F B1 FD | 	call	#__system___float_div
16364     3D 95 02 F6 | 	mov	arg02, result1
16368     54 93 02 F6 | 	mov	arg01, local02
1636c     6C 09 B1 FD | 	call	#__system___float_add
16370     3D AD 02 F6 | 	mov	local04, result1
16374                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16374     56 93 02 F6 | 	mov	arg01, local04
16378     1F 92 06 F4 | 	bitl	arg01, #31
1637c     89 41 1D FF 
16380     6F 94 06 F6 | 	mov	arg02, ##981668463
16384     01 96 06 F6 | 	mov	arg03, #1
16388     54 11 B1 FD | 	call	#__system___float_cmp
1638c     00 7A 56 F2 | 	cmps	result1, #0 wc
16390     00 AC 06 C6 |  if_b	mov	local04, #0
16394     E7 AC 62 FC | 	wrlong	local04, fp
16398     08 CE 05 F1 | 	add	fp, #8
1639c     E7 3C 68 FC | 	wrlong	#30, fp
163a0     08 CE 85 F1 | 	sub	fp, #8
163a4     E7 92 02 F6 | 	mov	arg01, fp
163a8     8C 73 BF FD | 	call	#_push
163ac                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
163ac     0C 01 90 FD | 	jmp	#LR__1904
163b0                 | LR__1901
163b0     F4 72 BF FD | 	call	#_pop
163b4     E7 7A 62 FC | 	wrlong	result1, fp
163b8     04 CE 05 F1 | 	add	fp, #4
163bc     E7 7C 62 FC | 	wrlong	result2, fp
163c0     04 CE 05 F1 | 	add	fp, #4
163c4     E7 7E 62 FC | 	wrlong	result3, fp
163c8                 | ' t1=pop()
163c8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
163c8     08 CE 85 F1 | 	sub	fp, #8
163cc     1C 7E 0E F2 | 	cmp	result3, #28 wz
163d0     08 CE 05 51 |  if_ne	add	fp, #8
163d4     E7 A6 02 5B |  if_ne	rdlong	local01, fp
163d8     08 CE 85 51 |  if_ne	sub	fp, #8
163dc     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
163e0     CC 00 90 5D |  if_ne	jmp	#LR__1903
163e4     E7 AC 02 FB | 	rdlong	local04, fp
163e8     53 00 00 FF 
163ec     60 65 06 F1 | 	add	objptr, ##42848
163f0     32 AD 62 FC | 	wrlong	local04, objptr
163f4                 | '   q=t1.result.uresult
163f4                 | '   if q<7 then 
163f4     53 00 00 FF 
163f8     60 65 86 F1 | 	sub	objptr, ##42848
163fc     07 AC 56 F2 | 	cmps	local04, #7 wc
16400     9C 00 90 3D |  if_ae	jmp	#LR__1902
16404     00 C0 1B FF 
16408     00 AC 06 F6 | 	mov	local04, ##931135488
1640c     53 00 00 FF 
16410     60 65 06 F1 | 	add	objptr, ##42848
16414     32 A9 02 FB | 	rdlong	local02, objptr
16418     02 A8 66 F0 | 	shl	local02, #2
1641c     40 65 86 F1 | 	sub	objptr, #320
16420     32 A9 02 F1 | 	add	local02, objptr
16424     54 93 02 FB | 	rdlong	arg01, local02
16428     53 00 00 FF 
1642c     20 64 86 F1 | 	sub	objptr, ##42528
16430     49 93 52 F6 | 	abs	arg01, arg01 wc
16434     1F AA C6 C9 |  if_b	decod	local03, #31
16438     00 AA 06 36 |  if_ae	mov	local03, #0
1643c     68 08 B1 FD | 	call	#__system___float_fromuns
16440     55 7B 62 F5 | 	xor	result1, local03
16444     3D 93 02 F6 | 	mov	arg01, result1
16448     FF 7F 23 FF 
1644c     00 94 06 F6 | 	mov	arg02, ##1191181824
16450     5C 0E B1 FD | 	call	#__system___float_div
16454     3D 95 02 F6 | 	mov	arg02, result1
16458     56 93 02 F6 | 	mov	arg01, local04
1645c     7C 08 B1 FD | 	call	#__system___float_add
16460     3D AD 02 F6 | 	mov	local04, result1
16464                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16464     56 93 02 F6 | 	mov	arg01, local04
16468     1F 92 06 F4 | 	bitl	arg01, #31
1646c     89 41 1D FF 
16470     6F 94 06 F6 | 	mov	arg02, ##981668463
16474     01 96 06 F6 | 	mov	arg03, #1
16478     64 10 B1 FD | 	call	#__system___float_cmp
1647c     00 7A 56 F2 | 	cmps	result1, #0 wc
16480     00 AC 06 C6 |  if_b	mov	local04, #0
16484     E7 AC 62 FC | 	wrlong	local04, fp
16488     08 CE 05 F1 | 	add	fp, #8
1648c     E7 3C 68 FC | 	wrlong	#30, fp
16490     08 CE 85 F1 | 	sub	fp, #8
16494     E7 92 02 F6 | 	mov	arg01, fp
16498     9C 72 BF FD | 	call	#_push
1649c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
1649c     1C 00 90 FD | 	jmp	#LR__1904
164a0                 | LR__1902
164a0     29 92 06 F6 | 	mov	arg01, #41
164a4     00 94 06 F6 | 	mov	arg02, #0
164a8     B4 AB B0 FD | 	call	#_printerror
164ac                 | '      printerror(41) : return
164ac     0C 00 90 FD | 	jmp	#LR__1904
164b0                 | LR__1903
164b0     29 92 06 F6 | 	mov	arg01, #41
164b4     00 94 06 F6 | 	mov	arg02, #0
164b8     A4 AB B0 FD | 	call	#_printerror
164bc                 | LR__1904
164bc     E7 F0 03 F6 | 	mov	ptra, fp
164c0     F2 00 A0 FD | 	call	#popregs_
164c4                 | _do_padrz_ret
164c4     2D 00 64 FD | 	ret
164c8                 | 
164c8                 | ' 
164c8                 | ' ' ------------------ pads
164c8                 | ' 
164c8                 | ' sub do_pads
164c8                 | _do_pads
164c8     04 CA 05 F6 | 	mov	COUNT_, #4
164cc     E8 00 A0 FD | 	call	#pushregs_
164d0     14 F0 07 F1 | 	add	ptra, #20
164d4     4B 00 00 FF 
164d8     A0 64 06 F1 | 	add	objptr, ##38560
164dc     32 A7 02 FB | 	rdlong	local01, objptr
164e0     53 97 02 F6 | 	mov	arg03, local01
164e4     01 96 66 F0 | 	shl	arg03, #1
164e8     53 97 02 F1 | 	add	arg03, local01
164ec     02 96 66 F0 | 	shl	arg03, #2
164f0     03 00 00 FF 
164f4     04 64 86 F1 | 	sub	objptr, ##1540
164f8     32 97 02 F1 | 	add	arg03, objptr
164fc     4B A9 02 FB | 	rdlong	local02, arg03
16500                 | ' 
16500                 | ' numpar=compiledline(lineptr_e).result.uresult
16500                 | ' if numpar>1 then print "pads: "; : printerror(39) : return
16500     02 A8 16 F2 | 	cmp	local02, #2 wc
16504     48 00 00 FF 
16508     9C 64 86 F1 | 	sub	objptr, ##37020
1650c     40 00 90 CD |  if_b	jmp	#LR__1910
16510     00 92 06 F6 | 	mov	arg01, #0
16514     48 3A B1 FD | 	call	#__system___getiolock_0622
16518     3D 93 02 F6 | 	mov	arg01, result1
1651c     BC E4 B0 FD | 	call	#__system___lockmem
16520     98 01 00 FF 
16524     99 94 06 F6 | 	mov	arg02, ##@LR__6059
16528     00 92 06 F6 | 	mov	arg01, #0
1652c     00 96 06 F6 | 	mov	arg03, #0
16530     9C F1 B0 FD | 	call	#__system___basic_print_string
16534     00 92 06 F6 | 	mov	arg01, #0
16538     24 3A B1 FD | 	call	#__system___getiolock_0622
1653c     3D 01 68 FC | 	wrlong	#0, result1
16540     27 92 06 F6 | 	mov	arg01, #39
16544     00 94 06 F6 | 	mov	arg02, #0
16548     14 AB B0 FD | 	call	#_printerror
1654c     A0 01 90 FD | 	jmp	#LR__1914
16550                 | LR__1910
16550                 | ' if numpar=0 then 
16550     00 A8 0E F2 | 	cmp	local02, #0 wz
16554     8C 00 90 5D |  if_ne	jmp	#LR__1911
16558     00 C0 1B FF 
1655c     00 A8 06 F6 | 	mov	local02, ##931135488
16560     53 00 00 FF 
16564     3C 64 06 F1 | 	add	objptr, ##42556
16568     32 93 02 FB | 	rdlong	arg01, objptr
1656c     53 00 00 FF 
16570     3C 64 86 F1 | 	sub	objptr, ##42556
16574     49 93 52 F6 | 	abs	arg01, arg01 wc
16578     1F AA C6 C9 |  if_b	decod	local03, #31
1657c     00 AA 06 36 |  if_ae	mov	local03, #0
16580     24 07 B1 FD | 	call	#__system___float_fromuns
16584     55 7B 62 F5 | 	xor	result1, local03
16588     3D 93 02 F6 | 	mov	arg01, result1
1658c     FF 7F 23 FF 
16590     00 94 06 F6 | 	mov	arg02, ##1191181824
16594     18 0D B1 FD | 	call	#__system___float_div
16598     3D 95 02 F6 | 	mov	arg02, result1
1659c     54 93 02 F6 | 	mov	arg01, local02
165a0     38 07 B1 FD | 	call	#__system___float_add
165a4     3D AD 02 F6 | 	mov	local04, result1
165a8                 | '   fpad=(1.0/65536.0)+pads(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
165a8     56 93 02 F6 | 	mov	arg01, local04
165ac     1F 92 06 F4 | 	bitl	arg01, #31
165b0     89 41 1D FF 
165b4     6F 94 06 F6 | 	mov	arg02, ##981668463
165b8     01 96 06 F6 | 	mov	arg03, #1
165bc     20 0F B1 FD | 	call	#__system___float_cmp
165c0     00 7A 56 F2 | 	cmps	result1, #0 wc
165c4     00 AC 06 C6 |  if_b	mov	local04, #0
165c8     E7 AC 62 FC | 	wrlong	local04, fp
165cc     08 CE 05 F1 | 	add	fp, #8
165d0     E7 3C 68 FC | 	wrlong	#30, fp
165d4     08 CE 85 F1 | 	sub	fp, #8
165d8     E7 92 02 F6 | 	mov	arg01, fp
165dc     58 71 BF FD | 	call	#_push
165e0                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
165e0     0C 01 90 FD | 	jmp	#LR__1914
165e4                 | LR__1911
165e4     C0 70 BF FD | 	call	#_pop
165e8     E7 7A 62 FC | 	wrlong	result1, fp
165ec     04 CE 05 F1 | 	add	fp, #4
165f0     E7 7C 62 FC | 	wrlong	result2, fp
165f4     04 CE 05 F1 | 	add	fp, #4
165f8     E7 7E 62 FC | 	wrlong	result3, fp
165fc                 | ' t1=pop()
165fc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
165fc     08 CE 85 F1 | 	sub	fp, #8
16600     1C 7E 0E F2 | 	cmp	result3, #28 wz
16604     08 CE 05 51 |  if_ne	add	fp, #8
16608     E7 A6 02 5B |  if_ne	rdlong	local01, fp
1660c     08 CE 85 51 |  if_ne	sub	fp, #8
16610     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16614     CC 00 90 5D |  if_ne	jmp	#LR__1913
16618     E7 AC 02 FB | 	rdlong	local04, fp
1661c     53 00 00 FF 
16620     60 65 06 F1 | 	add	objptr, ##42848
16624     32 AD 62 FC | 	wrlong	local04, objptr
16628                 | '   q=t1.result.uresult
16628                 | '   if q<7 then 
16628     53 00 00 FF 
1662c     60 65 86 F1 | 	sub	objptr, ##42848
16630     07 AC 56 F2 | 	cmps	local04, #7 wc
16634     9C 00 90 3D |  if_ae	jmp	#LR__1912
16638     00 C0 1B FF 
1663c     00 AC 06 F6 | 	mov	local04, ##931135488
16640     53 00 00 FF 
16644     60 65 06 F1 | 	add	objptr, ##42848
16648     32 A9 02 FB | 	rdlong	local02, objptr
1664c     02 A8 66 F0 | 	shl	local02, #2
16650     24 65 86 F1 | 	sub	objptr, #292
16654     32 A9 02 F1 | 	add	local02, objptr
16658     54 93 02 FB | 	rdlong	arg01, local02
1665c     53 00 00 FF 
16660     3C 64 86 F1 | 	sub	objptr, ##42556
16664     49 93 52 F6 | 	abs	arg01, arg01 wc
16668     1F AA C6 C9 |  if_b	decod	local03, #31
1666c     00 AA 06 36 |  if_ae	mov	local03, #0
16670     34 06 B1 FD | 	call	#__system___float_fromuns
16674     55 7B 62 F5 | 	xor	result1, local03
16678     3D 93 02 F6 | 	mov	arg01, result1
1667c     FF 7F 23 FF 
16680     00 94 06 F6 | 	mov	arg02, ##1191181824
16684     28 0C B1 FD | 	call	#__system___float_div
16688     3D 95 02 F6 | 	mov	arg02, result1
1668c     56 93 02 F6 | 	mov	arg01, local04
16690     48 06 B1 FD | 	call	#__system___float_add
16694     3D AD 02 F6 | 	mov	local04, result1
16698                 | '     fpad=(1.0/65536.0)+pads(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16698     56 93 02 F6 | 	mov	arg01, local04
1669c     1F 92 06 F4 | 	bitl	arg01, #31
166a0     89 41 1D FF 
166a4     6F 94 06 F6 | 	mov	arg02, ##981668463
166a8     01 96 06 F6 | 	mov	arg03, #1
166ac     30 0E B1 FD | 	call	#__system___float_cmp
166b0     00 7A 56 F2 | 	cmps	result1, #0 wc
166b4     00 AC 06 C6 |  if_b	mov	local04, #0
166b8     E7 AC 62 FC | 	wrlong	local04, fp
166bc     08 CE 05 F1 | 	add	fp, #8
166c0     E7 3C 68 FC | 	wrlong	#30, fp
166c4     08 CE 85 F1 | 	sub	fp, #8
166c8     E7 92 02 F6 | 	mov	arg01, fp
166cc     68 70 BF FD | 	call	#_push
166d0                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
166d0     1C 00 90 FD | 	jmp	#LR__1914
166d4                 | LR__1912
166d4     29 92 06 F6 | 	mov	arg01, #41
166d8     00 94 06 F6 | 	mov	arg02, #0
166dc     80 A9 B0 FD | 	call	#_printerror
166e0                 | '      printerror(41) : return
166e0     0C 00 90 FD | 	jmp	#LR__1914
166e4                 | LR__1913
166e4     29 92 06 F6 | 	mov	arg01, #41
166e8     00 94 06 F6 | 	mov	arg02, #0
166ec     70 A9 B0 FD | 	call	#_printerror
166f0                 | LR__1914
166f0     E7 F0 03 F6 | 	mov	ptra, fp
166f4     F2 00 A0 FD | 	call	#popregs_
166f8                 | _do_pads_ret
166f8     2D 00 64 FD | 	ret
166fc                 | 
166fc                 | ' 
166fc                 | ' ' ------------------ padw
166fc                 | ' 
166fc                 | ' sub do_padw
166fc                 | _do_padw
166fc     04 CA 05 F6 | 	mov	COUNT_, #4
16700     E8 00 A0 FD | 	call	#pushregs_
16704     14 F0 07 F1 | 	add	ptra, #20
16708     4B 00 00 FF 
1670c     A0 64 06 F1 | 	add	objptr, ##38560
16710     32 A7 02 FB | 	rdlong	local01, objptr
16714     53 97 02 F6 | 	mov	arg03, local01
16718     01 96 66 F0 | 	shl	arg03, #1
1671c     53 97 02 F1 | 	add	arg03, local01
16720     02 96 66 F0 | 	shl	arg03, #2
16724     03 00 00 FF 
16728     04 64 86 F1 | 	sub	objptr, ##1540
1672c     32 97 02 F1 | 	add	arg03, objptr
16730     4B A9 02 FB | 	rdlong	local02, arg03
16734                 | ' 
16734                 | ' numpar=compiledline(lineptr_e).result.uresult
16734                 | ' if numpar>1 then print "padw: "; : printerror(39) : return
16734     02 A8 16 F2 | 	cmp	local02, #2 wc
16738     48 00 00 FF 
1673c     9C 64 86 F1 | 	sub	objptr, ##37020
16740     40 00 90 CD |  if_b	jmp	#LR__1920
16744     00 92 06 F6 | 	mov	arg01, #0
16748     14 38 B1 FD | 	call	#__system___getiolock_0622
1674c     3D 93 02 F6 | 	mov	arg01, result1
16750     88 E2 B0 FD | 	call	#__system___lockmem
16754     98 01 00 FF 
16758     A0 94 06 F6 | 	mov	arg02, ##@LR__6060
1675c     00 92 06 F6 | 	mov	arg01, #0
16760     00 96 06 F6 | 	mov	arg03, #0
16764     68 EF B0 FD | 	call	#__system___basic_print_string
16768     00 92 06 F6 | 	mov	arg01, #0
1676c     F0 37 B1 FD | 	call	#__system___getiolock_0622
16770     3D 01 68 FC | 	wrlong	#0, result1
16774     27 92 06 F6 | 	mov	arg01, #39
16778     00 94 06 F6 | 	mov	arg02, #0
1677c     E0 A8 B0 FD | 	call	#_printerror
16780     A0 01 90 FD | 	jmp	#LR__1924
16784                 | LR__1920
16784                 | ' if numpar=0 then 
16784     00 A8 0E F2 | 	cmp	local02, #0 wz
16788     8C 00 90 5D |  if_ne	jmp	#LR__1921
1678c     00 C0 1B FF 
16790     00 A8 06 F6 | 	mov	local02, ##931135488
16794     53 00 00 FF 
16798     58 64 06 F1 | 	add	objptr, ##42584
1679c     32 93 02 FB | 	rdlong	arg01, objptr
167a0     53 00 00 FF 
167a4     58 64 86 F1 | 	sub	objptr, ##42584
167a8     49 93 52 F6 | 	abs	arg01, arg01 wc
167ac     1F AA C6 C9 |  if_b	decod	local03, #31
167b0     00 AA 06 36 |  if_ae	mov	local03, #0
167b4     F0 04 B1 FD | 	call	#__system___float_fromuns
167b8     55 7B 62 F5 | 	xor	result1, local03
167bc     3D 93 02 F6 | 	mov	arg01, result1
167c0     FF 7F 23 FF 
167c4     00 94 06 F6 | 	mov	arg02, ##1191181824
167c8     E4 0A B1 FD | 	call	#__system___float_div
167cc     3D 95 02 F6 | 	mov	arg02, result1
167d0     54 93 02 F6 | 	mov	arg01, local02
167d4     04 05 B1 FD | 	call	#__system___float_add
167d8     3D AD 02 F6 | 	mov	local04, result1
167dc                 | '   fpad=(1.0/65536.0)+padw(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
167dc     56 93 02 F6 | 	mov	arg01, local04
167e0     1F 92 06 F4 | 	bitl	arg01, #31
167e4     89 41 1D FF 
167e8     6F 94 06 F6 | 	mov	arg02, ##981668463
167ec     01 96 06 F6 | 	mov	arg03, #1
167f0     EC 0C B1 FD | 	call	#__system___float_cmp
167f4     00 7A 56 F2 | 	cmps	result1, #0 wc
167f8     00 AC 06 C6 |  if_b	mov	local04, #0
167fc     E7 AC 62 FC | 	wrlong	local04, fp
16800     08 CE 05 F1 | 	add	fp, #8
16804     E7 3C 68 FC | 	wrlong	#30, fp
16808     08 CE 85 F1 | 	sub	fp, #8
1680c     E7 92 02 F6 | 	mov	arg01, fp
16810     24 6F BF FD | 	call	#_push
16814                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16814     0C 01 90 FD | 	jmp	#LR__1924
16818                 | LR__1921
16818     8C 6E BF FD | 	call	#_pop
1681c     E7 7A 62 FC | 	wrlong	result1, fp
16820     04 CE 05 F1 | 	add	fp, #4
16824     E7 7C 62 FC | 	wrlong	result2, fp
16828     04 CE 05 F1 | 	add	fp, #4
1682c     E7 7E 62 FC | 	wrlong	result3, fp
16830                 | ' t1=pop()
16830                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16830     08 CE 85 F1 | 	sub	fp, #8
16834     1C 7E 0E F2 | 	cmp	result3, #28 wz
16838     08 CE 05 51 |  if_ne	add	fp, #8
1683c     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16840     08 CE 85 51 |  if_ne	sub	fp, #8
16844     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16848     CC 00 90 5D |  if_ne	jmp	#LR__1923
1684c     E7 AC 02 FB | 	rdlong	local04, fp
16850     53 00 00 FF 
16854     60 65 06 F1 | 	add	objptr, ##42848
16858     32 AD 62 FC | 	wrlong	local04, objptr
1685c                 | '   q=t1.result.uresult
1685c                 | '   if q<7 then 
1685c     53 00 00 FF 
16860     60 65 86 F1 | 	sub	objptr, ##42848
16864     07 AC 56 F2 | 	cmps	local04, #7 wc
16868     9C 00 90 3D |  if_ae	jmp	#LR__1922
1686c     00 C0 1B FF 
16870     00 AC 06 F6 | 	mov	local04, ##931135488
16874     53 00 00 FF 
16878     60 65 06 F1 | 	add	objptr, ##42848
1687c     32 A9 02 FB | 	rdlong	local02, objptr
16880     02 A8 66 F0 | 	shl	local02, #2
16884     08 65 86 F1 | 	sub	objptr, #264
16888     32 A9 02 F1 | 	add	local02, objptr
1688c     54 93 02 FB | 	rdlong	arg01, local02
16890     53 00 00 FF 
16894     58 64 86 F1 | 	sub	objptr, ##42584
16898     49 93 52 F6 | 	abs	arg01, arg01 wc
1689c     1F AA C6 C9 |  if_b	decod	local03, #31
168a0     00 AA 06 36 |  if_ae	mov	local03, #0
168a4     00 04 B1 FD | 	call	#__system___float_fromuns
168a8     55 7B 62 F5 | 	xor	result1, local03
168ac     3D 93 02 F6 | 	mov	arg01, result1
168b0     FF 7F 23 FF 
168b4     00 94 06 F6 | 	mov	arg02, ##1191181824
168b8     F4 09 B1 FD | 	call	#__system___float_div
168bc     3D 95 02 F6 | 	mov	arg02, result1
168c0     56 93 02 F6 | 	mov	arg01, local04
168c4     14 04 B1 FD | 	call	#__system___float_add
168c8     3D AD 02 F6 | 	mov	local04, result1
168cc                 | '     fpad=(1.0/65536.0)+padw(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
168cc     56 93 02 F6 | 	mov	arg01, local04
168d0     1F 92 06 F4 | 	bitl	arg01, #31
168d4     89 41 1D FF 
168d8     6F 94 06 F6 | 	mov	arg02, ##981668463
168dc     01 96 06 F6 | 	mov	arg03, #1
168e0     FC 0B B1 FD | 	call	#__system___float_cmp
168e4     00 7A 56 F2 | 	cmps	result1, #0 wc
168e8     00 AC 06 C6 |  if_b	mov	local04, #0
168ec     E7 AC 62 FC | 	wrlong	local04, fp
168f0     08 CE 05 F1 | 	add	fp, #8
168f4     E7 3C 68 FC | 	wrlong	#30, fp
168f8     08 CE 85 F1 | 	sub	fp, #8
168fc     E7 92 02 F6 | 	mov	arg01, fp
16900     34 6E BF FD | 	call	#_push
16904                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16904     1C 00 90 FD | 	jmp	#LR__1924
16908                 | LR__1922
16908     29 92 06 F6 | 	mov	arg01, #41
1690c     00 94 06 F6 | 	mov	arg02, #0
16910     4C A7 B0 FD | 	call	#_printerror
16914                 | '      printerror(41) : return
16914     0C 00 90 FD | 	jmp	#LR__1924
16918                 | LR__1923
16918     29 92 06 F6 | 	mov	arg01, #41
1691c     00 94 06 F6 | 	mov	arg02, #0
16920     3C A7 B0 FD | 	call	#_printerror
16924                 | LR__1924
16924     E7 F0 03 F6 | 	mov	ptra, fp
16928     F2 00 A0 FD | 	call	#popregs_
1692c                 | _do_padw_ret
1692c     2D 00 64 FD | 	ret
16930                 | 
16930                 | ' 
16930                 | ' ' ------------------ padx
16930                 | ' 
16930                 | ' sub do_padx
16930                 | _do_padx
16930     04 CA 05 F6 | 	mov	COUNT_, #4
16934     E8 00 A0 FD | 	call	#pushregs_
16938     14 F0 07 F1 | 	add	ptra, #20
1693c     4B 00 00 FF 
16940     A0 64 06 F1 | 	add	objptr, ##38560
16944     32 A7 02 FB | 	rdlong	local01, objptr
16948     53 97 02 F6 | 	mov	arg03, local01
1694c     01 96 66 F0 | 	shl	arg03, #1
16950     53 97 02 F1 | 	add	arg03, local01
16954     02 96 66 F0 | 	shl	arg03, #2
16958     03 00 00 FF 
1695c     04 64 86 F1 | 	sub	objptr, ##1540
16960     32 97 02 F1 | 	add	arg03, objptr
16964     4B A9 02 FB | 	rdlong	local02, arg03
16968                 | ' 
16968                 | ' numpar=compiledline(lineptr_e).result.uresult
16968                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
16968     02 A8 16 F2 | 	cmp	local02, #2 wc
1696c     48 00 00 FF 
16970     9C 64 86 F1 | 	sub	objptr, ##37020
16974     40 00 90 CD |  if_b	jmp	#LR__1930
16978     00 92 06 F6 | 	mov	arg01, #0
1697c     E0 35 B1 FD | 	call	#__system___getiolock_0622
16980     3D 93 02 F6 | 	mov	arg01, result1
16984     54 E0 B0 FD | 	call	#__system___lockmem
16988     98 01 00 FF 
1698c     A7 94 06 F6 | 	mov	arg02, ##@LR__6061
16990     00 92 06 F6 | 	mov	arg01, #0
16994     00 96 06 F6 | 	mov	arg03, #0
16998     34 ED B0 FD | 	call	#__system___basic_print_string
1699c     00 92 06 F6 | 	mov	arg01, #0
169a0     BC 35 B1 FD | 	call	#__system___getiolock_0622
169a4     3D 01 68 FC | 	wrlong	#0, result1
169a8     27 92 06 F6 | 	mov	arg01, #39
169ac     00 94 06 F6 | 	mov	arg02, #0
169b0     AC A6 B0 FD | 	call	#_printerror
169b4     A0 01 90 FD | 	jmp	#LR__1934
169b8                 | LR__1930
169b8                 | ' if numpar=0 then 
169b8     00 A8 0E F2 | 	cmp	local02, #0 wz
169bc     8C 00 90 5D |  if_ne	jmp	#LR__1931
169c0     00 C0 1B FF 
169c4     00 A8 06 F6 | 	mov	local02, ##931135488
169c8     52 00 00 FF 
169cc     78 65 06 F1 | 	add	objptr, ##42360
169d0     32 93 02 FB | 	rdlong	arg01, objptr
169d4     52 00 00 FF 
169d8     78 65 86 F1 | 	sub	objptr, ##42360
169dc     49 93 52 F6 | 	abs	arg01, arg01 wc
169e0     1F AA C6 C9 |  if_b	decod	local03, #31
169e4     00 AA 06 36 |  if_ae	mov	local03, #0
169e8     BC 02 B1 FD | 	call	#__system___float_fromuns
169ec     55 7B 62 F5 | 	xor	result1, local03
169f0     3D 93 02 F6 | 	mov	arg01, result1
169f4     FF 7F 23 FF 
169f8     00 94 06 F6 | 	mov	arg02, ##1191181824
169fc     B0 08 B1 FD | 	call	#__system___float_div
16a00     3D 95 02 F6 | 	mov	arg02, result1
16a04     54 93 02 F6 | 	mov	arg01, local02
16a08     D0 02 B1 FD | 	call	#__system___float_add
16a0c     3D AD 02 F6 | 	mov	local04, result1
16a10                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16a10     56 93 02 F6 | 	mov	arg01, local04
16a14     1F 92 06 F4 | 	bitl	arg01, #31
16a18     89 41 1D FF 
16a1c     6F 94 06 F6 | 	mov	arg02, ##981668463
16a20     01 96 06 F6 | 	mov	arg03, #1
16a24     B8 0A B1 FD | 	call	#__system___float_cmp
16a28     00 7A 56 F2 | 	cmps	result1, #0 wc
16a2c     00 AC 06 C6 |  if_b	mov	local04, #0
16a30     E7 AC 62 FC | 	wrlong	local04, fp
16a34     08 CE 05 F1 | 	add	fp, #8
16a38     E7 3C 68 FC | 	wrlong	#30, fp
16a3c     08 CE 85 F1 | 	sub	fp, #8
16a40     E7 92 02 F6 | 	mov	arg01, fp
16a44     F0 6C BF FD | 	call	#_push
16a48                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16a48     0C 01 90 FD | 	jmp	#LR__1934
16a4c                 | LR__1931
16a4c     58 6C BF FD | 	call	#_pop
16a50     E7 7A 62 FC | 	wrlong	result1, fp
16a54     04 CE 05 F1 | 	add	fp, #4
16a58     E7 7C 62 FC | 	wrlong	result2, fp
16a5c     04 CE 05 F1 | 	add	fp, #4
16a60     E7 7E 62 FC | 	wrlong	result3, fp
16a64                 | ' t1=pop()
16a64                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16a64     08 CE 85 F1 | 	sub	fp, #8
16a68     1C 7E 0E F2 | 	cmp	result3, #28 wz
16a6c     08 CE 05 51 |  if_ne	add	fp, #8
16a70     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16a74     08 CE 85 51 |  if_ne	sub	fp, #8
16a78     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16a7c     CC 00 90 5D |  if_ne	jmp	#LR__1933
16a80     E7 AC 02 FB | 	rdlong	local04, fp
16a84     53 00 00 FF 
16a88     60 65 06 F1 | 	add	objptr, ##42848
16a8c     32 AD 62 FC | 	wrlong	local04, objptr
16a90                 | '   q=t1.result.uresult
16a90                 | '   if q<7 then 
16a90     53 00 00 FF 
16a94     60 65 86 F1 | 	sub	objptr, ##42848
16a98     07 AC 56 F2 | 	cmps	local04, #7 wc
16a9c     9C 00 90 3D |  if_ae	jmp	#LR__1932
16aa0     00 C0 1B FF 
16aa4     00 AC 06 F6 | 	mov	local04, ##931135488
16aa8     53 00 00 FF 
16aac     60 65 06 F1 | 	add	objptr, ##42848
16ab0     32 A9 02 FB | 	rdlong	local02, objptr
16ab4     02 A8 66 F0 | 	shl	local02, #2
16ab8     E8 65 86 F1 | 	sub	objptr, #488
16abc     32 A9 02 F1 | 	add	local02, objptr
16ac0     54 93 02 FB | 	rdlong	arg01, local02
16ac4     52 00 00 FF 
16ac8     78 65 86 F1 | 	sub	objptr, ##42360
16acc     49 93 52 F6 | 	abs	arg01, arg01 wc
16ad0     1F AA C6 C9 |  if_b	decod	local03, #31
16ad4     00 AA 06 36 |  if_ae	mov	local03, #0
16ad8     CC 01 B1 FD | 	call	#__system___float_fromuns
16adc     55 7B 62 F5 | 	xor	result1, local03
16ae0     3D 93 02 F6 | 	mov	arg01, result1
16ae4     FF 7F 23 FF 
16ae8     00 94 06 F6 | 	mov	arg02, ##1191181824
16aec     C0 07 B1 FD | 	call	#__system___float_div
16af0     3D 95 02 F6 | 	mov	arg02, result1
16af4     56 93 02 F6 | 	mov	arg01, local04
16af8     E0 01 B1 FD | 	call	#__system___float_add
16afc     3D AD 02 F6 | 	mov	local04, result1
16b00                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16b00     56 93 02 F6 | 	mov	arg01, local04
16b04     1F 92 06 F4 | 	bitl	arg01, #31
16b08     89 41 1D FF 
16b0c     6F 94 06 F6 | 	mov	arg02, ##981668463
16b10     01 96 06 F6 | 	mov	arg03, #1
16b14     C8 09 B1 FD | 	call	#__system___float_cmp
16b18     00 7A 56 F2 | 	cmps	result1, #0 wc
16b1c     00 AC 06 C6 |  if_b	mov	local04, #0
16b20     E7 AC 62 FC | 	wrlong	local04, fp
16b24     08 CE 05 F1 | 	add	fp, #8
16b28     E7 3C 68 FC | 	wrlong	#30, fp
16b2c     08 CE 85 F1 | 	sub	fp, #8
16b30     E7 92 02 F6 | 	mov	arg01, fp
16b34     00 6C BF FD | 	call	#_push
16b38                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16b38     1C 00 90 FD | 	jmp	#LR__1934
16b3c                 | LR__1932
16b3c     29 92 06 F6 | 	mov	arg01, #41
16b40     00 94 06 F6 | 	mov	arg02, #0
16b44     18 A5 B0 FD | 	call	#_printerror
16b48                 | '      printerror(41) : return
16b48     0C 00 90 FD | 	jmp	#LR__1934
16b4c                 | LR__1933
16b4c     29 92 06 F6 | 	mov	arg01, #41
16b50     00 94 06 F6 | 	mov	arg02, #0
16b54     08 A5 B0 FD | 	call	#_printerror
16b58                 | LR__1934
16b58     E7 F0 03 F6 | 	mov	ptra, fp
16b5c     F2 00 A0 FD | 	call	#popregs_
16b60                 | _do_padx_ret
16b60     2D 00 64 FD | 	ret
16b64                 | 
16b64                 | ' 
16b64                 | ' ' ------------------ pady
16b64                 | ' 
16b64                 | ' sub do_pady
16b64                 | _do_pady
16b64     04 CA 05 F6 | 	mov	COUNT_, #4
16b68     E8 00 A0 FD | 	call	#pushregs_
16b6c     14 F0 07 F1 | 	add	ptra, #20
16b70     4B 00 00 FF 
16b74     A0 64 06 F1 | 	add	objptr, ##38560
16b78     32 A7 02 FB | 	rdlong	local01, objptr
16b7c     53 97 02 F6 | 	mov	arg03, local01
16b80     01 96 66 F0 | 	shl	arg03, #1
16b84     53 97 02 F1 | 	add	arg03, local01
16b88     02 96 66 F0 | 	shl	arg03, #2
16b8c     03 00 00 FF 
16b90     04 64 86 F1 | 	sub	objptr, ##1540
16b94     32 97 02 F1 | 	add	arg03, objptr
16b98     4B A9 02 FB | 	rdlong	local02, arg03
16b9c                 | ' 
16b9c                 | ' numpar=compiledline(lineptr_e).result.uresult
16b9c                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
16b9c     02 A8 16 F2 | 	cmp	local02, #2 wc
16ba0     48 00 00 FF 
16ba4     9C 64 86 F1 | 	sub	objptr, ##37020
16ba8     40 00 90 CD |  if_b	jmp	#LR__1940
16bac     00 92 06 F6 | 	mov	arg01, #0
16bb0     AC 33 B1 FD | 	call	#__system___getiolock_0622
16bb4     3D 93 02 F6 | 	mov	arg01, result1
16bb8     20 DE B0 FD | 	call	#__system___lockmem
16bbc     98 01 00 FF 
16bc0     AE 94 06 F6 | 	mov	arg02, ##@LR__6062
16bc4     00 92 06 F6 | 	mov	arg01, #0
16bc8     00 96 06 F6 | 	mov	arg03, #0
16bcc     00 EB B0 FD | 	call	#__system___basic_print_string
16bd0     00 92 06 F6 | 	mov	arg01, #0
16bd4     88 33 B1 FD | 	call	#__system___getiolock_0622
16bd8     3D 01 68 FC | 	wrlong	#0, result1
16bdc     27 92 06 F6 | 	mov	arg01, #39
16be0     00 94 06 F6 | 	mov	arg02, #0
16be4     78 A4 B0 FD | 	call	#_printerror
16be8     A0 01 90 FD | 	jmp	#LR__1944
16bec                 | LR__1940
16bec                 | ' if numpar=0 then 
16bec     00 A8 0E F2 | 	cmp	local02, #0 wz
16bf0     8C 00 90 5D |  if_ne	jmp	#LR__1941
16bf4     00 C0 1B FF 
16bf8     00 A8 06 F6 | 	mov	local02, ##931135488
16bfc     52 00 00 FF 
16c00     94 65 06 F1 | 	add	objptr, ##42388
16c04     32 93 02 FB | 	rdlong	arg01, objptr
16c08     52 00 00 FF 
16c0c     94 65 86 F1 | 	sub	objptr, ##42388
16c10     49 93 52 F6 | 	abs	arg01, arg01 wc
16c14     1F AA C6 C9 |  if_b	decod	local03, #31
16c18     00 AA 06 36 |  if_ae	mov	local03, #0
16c1c     88 00 B1 FD | 	call	#__system___float_fromuns
16c20     55 7B 62 F5 | 	xor	result1, local03
16c24     3D 93 02 F6 | 	mov	arg01, result1
16c28     FF 7F 23 FF 
16c2c     00 94 06 F6 | 	mov	arg02, ##1191181824
16c30     7C 06 B1 FD | 	call	#__system___float_div
16c34     3D 95 02 F6 | 	mov	arg02, result1
16c38     54 93 02 F6 | 	mov	arg01, local02
16c3c     9C 00 B1 FD | 	call	#__system___float_add
16c40     3D AD 02 F6 | 	mov	local04, result1
16c44                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16c44     56 93 02 F6 | 	mov	arg01, local04
16c48     1F 92 06 F4 | 	bitl	arg01, #31
16c4c     89 41 1D FF 
16c50     6F 94 06 F6 | 	mov	arg02, ##981668463
16c54     01 96 06 F6 | 	mov	arg03, #1
16c58     84 08 B1 FD | 	call	#__system___float_cmp
16c5c     00 7A 56 F2 | 	cmps	result1, #0 wc
16c60     00 AC 06 C6 |  if_b	mov	local04, #0
16c64     E7 AC 62 FC | 	wrlong	local04, fp
16c68     08 CE 05 F1 | 	add	fp, #8
16c6c     E7 3C 68 FC | 	wrlong	#30, fp
16c70     08 CE 85 F1 | 	sub	fp, #8
16c74     E7 92 02 F6 | 	mov	arg01, fp
16c78     BC 6A BF FD | 	call	#_push
16c7c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16c7c     0C 01 90 FD | 	jmp	#LR__1944
16c80                 | LR__1941
16c80     24 6A BF FD | 	call	#_pop
16c84     E7 7A 62 FC | 	wrlong	result1, fp
16c88     04 CE 05 F1 | 	add	fp, #4
16c8c     E7 7C 62 FC | 	wrlong	result2, fp
16c90     04 CE 05 F1 | 	add	fp, #4
16c94     E7 7E 62 FC | 	wrlong	result3, fp
16c98                 | ' t1=pop()
16c98                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16c98     08 CE 85 F1 | 	sub	fp, #8
16c9c     1C 7E 0E F2 | 	cmp	result3, #28 wz
16ca0     08 CE 05 51 |  if_ne	add	fp, #8
16ca4     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16ca8     08 CE 85 51 |  if_ne	sub	fp, #8
16cac     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16cb0     CC 00 90 5D |  if_ne	jmp	#LR__1943
16cb4     E7 AC 02 FB | 	rdlong	local04, fp
16cb8     53 00 00 FF 
16cbc     60 65 06 F1 | 	add	objptr, ##42848
16cc0     32 AD 62 FC | 	wrlong	local04, objptr
16cc4                 | '   q=t1.result.uresult
16cc4                 | '   if q<7 then 
16cc4     53 00 00 FF 
16cc8     60 65 86 F1 | 	sub	objptr, ##42848
16ccc     07 AC 56 F2 | 	cmps	local04, #7 wc
16cd0     9C 00 90 3D |  if_ae	jmp	#LR__1942
16cd4     00 C0 1B FF 
16cd8     00 AC 06 F6 | 	mov	local04, ##931135488
16cdc     53 00 00 FF 
16ce0     60 65 06 F1 | 	add	objptr, ##42848
16ce4     32 A9 02 FB | 	rdlong	local02, objptr
16ce8     02 A8 66 F0 | 	shl	local02, #2
16cec     CC 65 86 F1 | 	sub	objptr, #460
16cf0     32 A9 02 F1 | 	add	local02, objptr
16cf4     54 93 02 FB | 	rdlong	arg01, local02
16cf8     52 00 00 FF 
16cfc     94 65 86 F1 | 	sub	objptr, ##42388
16d00     49 93 52 F6 | 	abs	arg01, arg01 wc
16d04     1F AA C6 C9 |  if_b	decod	local03, #31
16d08     00 AA 06 36 |  if_ae	mov	local03, #0
16d0c     98 FF B0 FD | 	call	#__system___float_fromuns
16d10     55 7B 62 F5 | 	xor	result1, local03
16d14     3D 93 02 F6 | 	mov	arg01, result1
16d18     FF 7F 23 FF 
16d1c     00 94 06 F6 | 	mov	arg02, ##1191181824
16d20     8C 05 B1 FD | 	call	#__system___float_div
16d24     3D 95 02 F6 | 	mov	arg02, result1
16d28     56 93 02 F6 | 	mov	arg01, local04
16d2c     AC FF B0 FD | 	call	#__system___float_add
16d30     3D AD 02 F6 | 	mov	local04, result1
16d34                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16d34     56 93 02 F6 | 	mov	arg01, local04
16d38     1F 92 06 F4 | 	bitl	arg01, #31
16d3c     89 41 1D FF 
16d40     6F 94 06 F6 | 	mov	arg02, ##981668463
16d44     01 96 06 F6 | 	mov	arg03, #1
16d48     94 07 B1 FD | 	call	#__system___float_cmp
16d4c     00 7A 56 F2 | 	cmps	result1, #0 wc
16d50     00 AC 06 C6 |  if_b	mov	local04, #0
16d54     E7 AC 62 FC | 	wrlong	local04, fp
16d58     08 CE 05 F1 | 	add	fp, #8
16d5c     E7 3C 68 FC | 	wrlong	#30, fp
16d60     08 CE 85 F1 | 	sub	fp, #8
16d64     E7 92 02 F6 | 	mov	arg01, fp
16d68     CC 69 BF FD | 	call	#_push
16d6c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16d6c     1C 00 90 FD | 	jmp	#LR__1944
16d70                 | LR__1942
16d70     29 92 06 F6 | 	mov	arg01, #41
16d74     00 94 06 F6 | 	mov	arg02, #0
16d78     E4 A2 B0 FD | 	call	#_printerror
16d7c                 | '      printerror(41) : return
16d7c     0C 00 90 FD | 	jmp	#LR__1944
16d80                 | LR__1943
16d80     29 92 06 F6 | 	mov	arg01, #41
16d84     00 94 06 F6 | 	mov	arg02, #0
16d88     D4 A2 B0 FD | 	call	#_printerror
16d8c                 | LR__1944
16d8c     E7 F0 03 F6 | 	mov	ptra, fp
16d90     F2 00 A0 FD | 	call	#popregs_
16d94                 | _do_pady_ret
16d94     2D 00 64 FD | 	ret
16d98                 | 
16d98                 | ' 
16d98                 | ' ' ------------------ padz
16d98                 | ' 
16d98                 | ' sub do_padz
16d98                 | _do_padz
16d98     04 CA 05 F6 | 	mov	COUNT_, #4
16d9c     E8 00 A0 FD | 	call	#pushregs_
16da0     14 F0 07 F1 | 	add	ptra, #20
16da4     4B 00 00 FF 
16da8     A0 64 06 F1 | 	add	objptr, ##38560
16dac     32 A7 02 FB | 	rdlong	local01, objptr
16db0     53 97 02 F6 | 	mov	arg03, local01
16db4     01 96 66 F0 | 	shl	arg03, #1
16db8     53 97 02 F1 | 	add	arg03, local01
16dbc     02 96 66 F0 | 	shl	arg03, #2
16dc0     03 00 00 FF 
16dc4     04 64 86 F1 | 	sub	objptr, ##1540
16dc8     32 97 02 F1 | 	add	arg03, objptr
16dcc     4B A9 02 FB | 	rdlong	local02, arg03
16dd0                 | ' 
16dd0                 | ' numpar=compiledline(lineptr_e).result.uresult
16dd0                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
16dd0     02 A8 16 F2 | 	cmp	local02, #2 wc
16dd4     48 00 00 FF 
16dd8     9C 64 86 F1 | 	sub	objptr, ##37020
16ddc     40 00 90 CD |  if_b	jmp	#LR__1950
16de0     00 92 06 F6 | 	mov	arg01, #0
16de4     78 31 B1 FD | 	call	#__system___getiolock_0622
16de8     3D 93 02 F6 | 	mov	arg01, result1
16dec     EC DB B0 FD | 	call	#__system___lockmem
16df0     98 01 00 FF 
16df4     B5 94 06 F6 | 	mov	arg02, ##@LR__6063
16df8     00 92 06 F6 | 	mov	arg01, #0
16dfc     00 96 06 F6 | 	mov	arg03, #0
16e00     CC E8 B0 FD | 	call	#__system___basic_print_string
16e04     00 92 06 F6 | 	mov	arg01, #0
16e08     54 31 B1 FD | 	call	#__system___getiolock_0622
16e0c     3D 01 68 FC | 	wrlong	#0, result1
16e10     27 92 06 F6 | 	mov	arg01, #39
16e14     00 94 06 F6 | 	mov	arg02, #0
16e18     44 A2 B0 FD | 	call	#_printerror
16e1c     A0 01 90 FD | 	jmp	#LR__1954
16e20                 | LR__1950
16e20                 | ' if numpar=0 then 
16e20     00 A8 0E F2 | 	cmp	local02, #0 wz
16e24     8C 00 90 5D |  if_ne	jmp	#LR__1951
16e28     00 C0 1B FF 
16e2c     00 A8 06 F6 | 	mov	local02, ##931135488
16e30     52 00 00 FF 
16e34     B0 65 06 F1 | 	add	objptr, ##42416
16e38     32 93 02 FB | 	rdlong	arg01, objptr
16e3c     52 00 00 FF 
16e40     B0 65 86 F1 | 	sub	objptr, ##42416
16e44     49 93 52 F6 | 	abs	arg01, arg01 wc
16e48     1F AA C6 C9 |  if_b	decod	local03, #31
16e4c     00 AA 06 36 |  if_ae	mov	local03, #0
16e50     54 FE B0 FD | 	call	#__system___float_fromuns
16e54     55 7B 62 F5 | 	xor	result1, local03
16e58     3D 93 02 F6 | 	mov	arg01, result1
16e5c     FF 7F 23 FF 
16e60     00 94 06 F6 | 	mov	arg02, ##1191181824
16e64     48 04 B1 FD | 	call	#__system___float_div
16e68     3D 95 02 F6 | 	mov	arg02, result1
16e6c     54 93 02 F6 | 	mov	arg01, local02
16e70     68 FE B0 FD | 	call	#__system___float_add
16e74     3D AD 02 F6 | 	mov	local04, result1
16e78                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16e78     56 93 02 F6 | 	mov	arg01, local04
16e7c     1F 92 06 F4 | 	bitl	arg01, #31
16e80     89 41 1D FF 
16e84     6F 94 06 F6 | 	mov	arg02, ##981668463
16e88     01 96 06 F6 | 	mov	arg03, #1
16e8c     50 06 B1 FD | 	call	#__system___float_cmp
16e90     00 7A 56 F2 | 	cmps	result1, #0 wc
16e94     00 AC 06 C6 |  if_b	mov	local04, #0
16e98     E7 AC 62 FC | 	wrlong	local04, fp
16e9c     08 CE 05 F1 | 	add	fp, #8
16ea0     E7 3C 68 FC | 	wrlong	#30, fp
16ea4     08 CE 85 F1 | 	sub	fp, #8
16ea8     E7 92 02 F6 | 	mov	arg01, fp
16eac     88 68 BF FD | 	call	#_push
16eb0                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16eb0     0C 01 90 FD | 	jmp	#LR__1954
16eb4                 | LR__1951
16eb4     F0 67 BF FD | 	call	#_pop
16eb8     E7 7A 62 FC | 	wrlong	result1, fp
16ebc     04 CE 05 F1 | 	add	fp, #4
16ec0     E7 7C 62 FC | 	wrlong	result2, fp
16ec4     04 CE 05 F1 | 	add	fp, #4
16ec8     E7 7E 62 FC | 	wrlong	result3, fp
16ecc                 | ' t1=pop()
16ecc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16ecc     08 CE 85 F1 | 	sub	fp, #8
16ed0     1C 7E 0E F2 | 	cmp	result3, #28 wz
16ed4     08 CE 05 51 |  if_ne	add	fp, #8
16ed8     E7 A6 02 5B |  if_ne	rdlong	local01, fp
16edc     08 CE 85 51 |  if_ne	sub	fp, #8
16ee0     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
16ee4     CC 00 90 5D |  if_ne	jmp	#LR__1953
16ee8     E7 AC 02 FB | 	rdlong	local04, fp
16eec     53 00 00 FF 
16ef0     60 65 06 F1 | 	add	objptr, ##42848
16ef4     32 AD 62 FC | 	wrlong	local04, objptr
16ef8                 | '   q=t1.result.uresult
16ef8                 | '   if q<7 then 
16ef8     53 00 00 FF 
16efc     60 65 86 F1 | 	sub	objptr, ##42848
16f00     07 AC 56 F2 | 	cmps	local04, #7 wc
16f04     9C 00 90 3D |  if_ae	jmp	#LR__1952
16f08     00 C0 1B FF 
16f0c     00 AC 06 F6 | 	mov	local04, ##931135488
16f10     53 00 00 FF 
16f14     60 65 06 F1 | 	add	objptr, ##42848
16f18     32 A9 02 FB | 	rdlong	local02, objptr
16f1c     02 A8 66 F0 | 	shl	local02, #2
16f20     B0 65 86 F1 | 	sub	objptr, #432
16f24     32 A9 02 F1 | 	add	local02, objptr
16f28     54 93 02 FB | 	rdlong	arg01, local02
16f2c     52 00 00 FF 
16f30     B0 65 86 F1 | 	sub	objptr, ##42416
16f34     49 93 52 F6 | 	abs	arg01, arg01 wc
16f38     1F AA C6 C9 |  if_b	decod	local03, #31
16f3c     00 AA 06 36 |  if_ae	mov	local03, #0
16f40     64 FD B0 FD | 	call	#__system___float_fromuns
16f44     55 7B 62 F5 | 	xor	result1, local03
16f48     3D 93 02 F6 | 	mov	arg01, result1
16f4c     FF 7F 23 FF 
16f50     00 94 06 F6 | 	mov	arg02, ##1191181824
16f54     58 03 B1 FD | 	call	#__system___float_div
16f58     3D 95 02 F6 | 	mov	arg02, result1
16f5c     56 93 02 F6 | 	mov	arg01, local04
16f60     78 FD B0 FD | 	call	#__system___float_add
16f64     3D AD 02 F6 | 	mov	local04, result1
16f68                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16f68     56 93 02 F6 | 	mov	arg01, local04
16f6c     1F 92 06 F4 | 	bitl	arg01, #31
16f70     89 41 1D FF 
16f74     6F 94 06 F6 | 	mov	arg02, ##981668463
16f78     01 96 06 F6 | 	mov	arg03, #1
16f7c     60 05 B1 FD | 	call	#__system___float_cmp
16f80     00 7A 56 F2 | 	cmps	result1, #0 wc
16f84     00 AC 06 C6 |  if_b	mov	local04, #0
16f88     E7 AC 62 FC | 	wrlong	local04, fp
16f8c     08 CE 05 F1 | 	add	fp, #8
16f90     E7 3C 68 FC | 	wrlong	#30, fp
16f94     08 CE 85 F1 | 	sub	fp, #8
16f98     E7 92 02 F6 | 	mov	arg01, fp
16f9c     98 67 BF FD | 	call	#_push
16fa0                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16fa0     1C 00 90 FD | 	jmp	#LR__1954
16fa4                 | LR__1952
16fa4     29 92 06 F6 | 	mov	arg01, #41
16fa8     00 94 06 F6 | 	mov	arg02, #0
16fac     B0 A0 B0 FD | 	call	#_printerror
16fb0                 | '      printerror(41) : return
16fb0     0C 00 90 FD | 	jmp	#LR__1954
16fb4                 | LR__1953
16fb4     29 92 06 F6 | 	mov	arg01, #41
16fb8     00 94 06 F6 | 	mov	arg02, #0
16fbc     A0 A0 B0 FD | 	call	#_printerror
16fc0                 | LR__1954
16fc0     E7 F0 03 F6 | 	mov	ptra, fp
16fc4     F2 00 A0 FD | 	call	#popregs_
16fc8                 | _do_padz_ret
16fc8     2D 00 64 FD | 	ret
16fcc                 | 
16fcc                 | ' 
16fcc                 | ' '-------------------- paper
16fcc                 | ' 
16fcc                 | ' sub do_paper
16fcc                 | _do_paper
16fcc     03 CA 05 F6 | 	mov	COUNT_, #3
16fd0     E8 00 A0 FD | 	call	#pushregs_
16fd4     D0 66 BF FD | 	call	#_pop
16fd8     3D A7 02 F6 | 	mov	local01, result1
16fdc     3E A9 02 F6 | 	mov	local02, result2
16fe0     3F AB 02 F6 | 	mov	local03, result3
16fe4                 | ' t1=pop() 
16fe4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16fe4     1E AA 0E F2 | 	cmp	local03, #30 wz
16fe8     10 00 90 5D |  if_ne	jmp	#LR__1960
16fec     53 93 02 F6 | 	mov	arg01, local01
16ff0     00 94 06 F6 | 	mov	arg02, #0
16ff4     7C 05 B1 FD | 	call	#__system___float_tointeger
16ff8     3D A7 02 F6 | 	mov	local01, result1
16ffc                 | LR__1960
16ffc                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16ffc     1F AA 0E F2 | 	cmp	local03, #31 wz
17000     18 00 90 5D |  if_ne	jmp	#LR__1961
17004     53 93 02 F6 | 	mov	arg01, local01
17008     BC 08 B1 FD | 	call	#__system____builtin_atof
1700c     3D 93 02 F6 | 	mov	arg01, result1
17010     00 94 06 F6 | 	mov	arg02, #0
17014     5C 05 B1 FD | 	call	#__system___float_tointeger
17018     3D A7 02 F6 | 	mov	local01, result1
1701c                 | LR__1961
1701c     38 00 00 FF 
17020     58 64 06 F1 | 	add	objptr, ##28760
17024     32 A7 62 FC | 	wrlong	local01, objptr
17028     04 64 06 F1 | 	add	objptr, #4
1702c     32 93 02 FB | 	rdlong	arg01, objptr
17030                 | ' 
17030                 | ' write_color:=ff
17030     38 00 00 FF 
17034     1B 64 86 F1 | 	sub	objptr, ##28699
17038     32 93 62 FC | 	wrlong	arg01, objptr
1703c                 | ' write_background:=bb
1703c     04 64 06 F1 | 	add	objptr, #4
17040     32 A7 62 FC | 	wrlong	local01, objptr
17044     45 64 86 F1 | 	sub	objptr, #69
17048     E7 F0 03 F6 | 	mov	ptra, fp
1704c     F2 00 A0 FD | 	call	#popregs_
17050                 | _do_paper_ret
17050     2D 00 64 FD | 	ret
17054                 | 
17054                 | ' 
17054                 | ' '-------------------- peek
17054                 | ' 
17054                 | ' sub do_peek
17054                 | _do_peek
17054     01 CA 05 F6 | 	mov	COUNT_, #1
17058     E8 00 A0 FD | 	call	#pushregs_
1705c     14 F0 07 F1 | 	add	ptra, #20
17060     44 66 BF FD | 	call	#_pop
17064     E7 7A 62 FC | 	wrlong	result1, fp
17068     04 CE 05 F1 | 	add	fp, #4
1706c     E7 7C 62 FC | 	wrlong	result2, fp
17070     04 CE 05 F1 | 	add	fp, #4
17074     E7 7E 62 FC | 	wrlong	result3, fp
17078     08 CE 85 F1 | 	sub	fp, #8
1707c     E7 92 02 F6 | 	mov	arg01, fp
17080     00 68 BF FD | 	call	#_converttoint
17084     3D 93 02 F6 | 	mov	arg01, result1
17088                 | ' 
17088                 | ' t1=pop()
17088                 | ' a=converttoint(t1)
17088                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
17088     00 04 00 FF 
1708c     00 92 16 F2 | 	cmp	arg01, ##524288 wc
17090     49 A7 C2 CA |  if_b	rdbyte	local01, arg01
17094     08 00 90 CD |  if_b	jmp	#LR__1970
17098     38 A2 B0 FD | 	call	#_pspeek
1709c     3D A7 E2 F8 | 	getbyte	local01, result1, #0
170a0                 | LR__1970
170a0     08 CE 05 F1 | 	add	fp, #8
170a4     E7 3A 68 FC | 	wrlong	#29, fp
170a8     08 CE 85 F1 | 	sub	fp, #8
170ac     E7 A6 62 FC | 	wrlong	local01, fp
170b0     E7 92 02 F6 | 	mov	arg01, fp
170b4     80 66 BF FD | 	call	#_push
170b8     E7 F0 03 F6 | 	mov	ptra, fp
170bc     F2 00 A0 FD | 	call	#popregs_
170c0                 | _do_peek_ret
170c0     2D 00 64 FD | 	ret
170c4                 | 
170c4                 | ' 
170c4                 | ' '-------------------- pinfloat
170c4                 | ' 
170c4                 | ' sub do_pinfloat
170c4                 | _do_pinfloat
170c4     00 CA 05 F6 | 	mov	COUNT_, #0
170c8     E8 00 A0 FD | 	call	#pushregs_
170cc     0C F0 07 F1 | 	add	ptra, #12
170d0     D4 65 BF FD | 	call	#_pop
170d4     E7 7A 62 FC | 	wrlong	result1, fp
170d8     04 CE 05 F1 | 	add	fp, #4
170dc     E7 7C 62 FC | 	wrlong	result2, fp
170e0     04 CE 05 F1 | 	add	fp, #4
170e4     E7 7E 62 FC | 	wrlong	result3, fp
170e8     08 CE 85 F1 | 	sub	fp, #8
170ec     E7 92 02 F6 | 	mov	arg01, fp
170f0     90 67 BF FD | 	call	#_converttoint
170f4     50 7A 62 FD | 	fltl	result1
170f8     E7 F0 03 F6 | 	mov	ptra, fp
170fc     F2 00 A0 FD | 	call	#popregs_
17100                 | _do_pinfloat_ret
17100     2D 00 64 FD | 	ret
17104                 | 
17104                 | ' 
17104                 | ' '-------------------- pinhi
17104                 | ' 
17104                 | ' sub do_pinhi
17104                 | _do_pinhi
17104     00 CA 05 F6 | 	mov	COUNT_, #0
17108     E8 00 A0 FD | 	call	#pushregs_
1710c     0C F0 07 F1 | 	add	ptra, #12
17110     94 65 BF FD | 	call	#_pop
17114     E7 7A 62 FC | 	wrlong	result1, fp
17118     04 CE 05 F1 | 	add	fp, #4
1711c     E7 7C 62 FC | 	wrlong	result2, fp
17120     04 CE 05 F1 | 	add	fp, #4
17124     E7 7E 62 FC | 	wrlong	result3, fp
17128     08 CE 85 F1 | 	sub	fp, #8
1712c     E7 92 02 F6 | 	mov	arg01, fp
17130     50 67 BF FD | 	call	#_converttoint
17134     59 7A 62 FD | 	drvh	result1
17138     E7 F0 03 F6 | 	mov	ptra, fp
1713c     F2 00 A0 FD | 	call	#popregs_
17140                 | _do_pinhi_ret
17140     2D 00 64 FD | 	ret
17144                 | 
17144                 | ' 
17144                 | ' '-------------------- pinlo
17144                 | ' 
17144                 | ' sub do_pinlo
17144                 | _do_pinlo
17144     00 CA 05 F6 | 	mov	COUNT_, #0
17148     E8 00 A0 FD | 	call	#pushregs_
1714c     0C F0 07 F1 | 	add	ptra, #12
17150     54 65 BF FD | 	call	#_pop
17154     E7 7A 62 FC | 	wrlong	result1, fp
17158     04 CE 05 F1 | 	add	fp, #4
1715c     E7 7C 62 FC | 	wrlong	result2, fp
17160     04 CE 05 F1 | 	add	fp, #4
17164     E7 7E 62 FC | 	wrlong	result3, fp
17168     08 CE 85 F1 | 	sub	fp, #8
1716c     E7 92 02 F6 | 	mov	arg01, fp
17170     10 67 BF FD | 	call	#_converttoint
17174     58 7A 62 FD | 	drvl	result1
17178     E7 F0 03 F6 | 	mov	ptra, fp
1717c     F2 00 A0 FD | 	call	#popregs_
17180                 | _do_pinlo_ret
17180     2D 00 64 FD | 	ret
17184                 | 
17184                 | ' 
17184                 | ' '-------------------- pinread
17184                 | ' 
17184                 | ' sub do_pinread
17184                 | _do_pinread
17184     00 CA 05 F6 | 	mov	COUNT_, #0
17188     E8 00 A0 FD | 	call	#pushregs_
1718c     0C F0 07 F1 | 	add	ptra, #12
17190     14 65 BF FD | 	call	#_pop
17194     E7 7A 62 FC | 	wrlong	result1, fp
17198     04 CE 05 F1 | 	add	fp, #4
1719c     E7 7C 62 FC | 	wrlong	result2, fp
171a0     04 CE 05 F1 | 	add	fp, #4
171a4     E7 7E 62 FC | 	wrlong	result3, fp
171a8     08 CE 85 F1 | 	sub	fp, #8
171ac     E7 92 02 F6 | 	mov	arg01, fp
171b0     D0 66 BF FD | 	call	#_converttoint
171b4     3D 93 02 F6 | 	mov	arg01, result1
171b8     20 92 CE F7 | 	test	arg01, #32 wz
171bc     FF 7B 02 56 |  if_ne	mov	result1, inb
171c0     FE 7B 02 A6 |  if_e	mov	result1, ina
171c4     49 7B 42 F0 | 	shr	result1, arg01
171c8     06 92 46 F0 | 	shr	arg01, #6
171cc     49 7B 42 F7 | 	zerox	result1, arg01
171d0     53 00 00 FF 
171d4     68 65 06 F1 | 	add	objptr, ##42856
171d8     32 7B 62 FC | 	wrlong	result1, objptr
171dc     53 00 00 FF 
171e0     68 65 86 F1 | 	sub	objptr, ##42856
171e4     08 CE 05 F1 | 	add	fp, #8
171e8     E7 3A 68 FC | 	wrlong	#29, fp
171ec     08 CE 85 F1 | 	sub	fp, #8
171f0     E7 08 68 FC | 	wrlong	#4, fp
171f4     E7 92 02 F6 | 	mov	arg01, fp
171f8     3C 65 BF FD | 	call	#_push
171fc     E7 F0 03 F6 | 	mov	ptra, fp
17200     F2 00 A0 FD | 	call	#popregs_
17204                 | _do_pinread_ret
17204     2D 00 64 FD | 	ret
17208                 | 
17208                 | ' 
17208                 | ' '-------------------- pinstart
17208                 | ' 
17208                 | ' sub do_pinstart
17208                 | _do_pinstart
17208     03 CA 05 F6 | 	mov	COUNT_, #3
1720c     E8 00 A0 FD | 	call	#pushregs_
17210     30 F0 07 F1 | 	add	ptra, #48
17214     90 64 BF FD | 	call	#_pop
17218     3D 97 02 F6 | 	mov	arg03, result1
1721c     3E 95 02 F6 | 	mov	arg02, result2
17220     3F 99 02 F6 | 	mov	arg04, result3
17224     E7 96 62 FC | 	wrlong	arg03, fp
17228     04 CE 05 F1 | 	add	fp, #4
1722c     E7 94 62 FC | 	wrlong	arg02, fp
17230     04 CE 05 F1 | 	add	fp, #4
17234     E7 98 62 FC | 	wrlong	arg04, fp
17238     08 CE 85 F1 | 	sub	fp, #8
1723c     68 64 BF FD | 	call	#_pop
17240     3D 97 02 F6 | 	mov	arg03, result1
17244     3E 95 02 F6 | 	mov	arg02, result2
17248     3F 99 02 F6 | 	mov	arg04, result3
1724c     0C CE 05 F1 | 	add	fp, #12
17250     E7 96 62 FC | 	wrlong	arg03, fp
17254     04 CE 05 F1 | 	add	fp, #4
17258     E7 94 62 FC | 	wrlong	arg02, fp
1725c     04 CE 05 F1 | 	add	fp, #4
17260     E7 98 62 FC | 	wrlong	arg04, fp
17264     14 CE 85 F1 | 	sub	fp, #20
17268     3C 64 BF FD | 	call	#_pop
1726c     3D 97 02 F6 | 	mov	arg03, result1
17270     3E 95 02 F6 | 	mov	arg02, result2
17274     3F 99 02 F6 | 	mov	arg04, result3
17278     18 CE 05 F1 | 	add	fp, #24
1727c     E7 96 62 FC | 	wrlong	arg03, fp
17280     04 CE 05 F1 | 	add	fp, #4
17284     E7 94 62 FC | 	wrlong	arg02, fp
17288     04 CE 05 F1 | 	add	fp, #4
1728c     E7 98 62 FC | 	wrlong	arg04, fp
17290     20 CE 85 F1 | 	sub	fp, #32
17294     10 64 BF FD | 	call	#_pop
17298     3F 97 02 F6 | 	mov	arg03, result3
1729c     24 CE 05 F1 | 	add	fp, #36
172a0     E7 7A 62 FC | 	wrlong	result1, fp
172a4     04 CE 05 F1 | 	add	fp, #4
172a8     E7 7C 62 FC | 	wrlong	result2, fp
172ac     04 CE 05 F1 | 	add	fp, #4
172b0     E7 96 62 FC | 	wrlong	arg03, fp
172b4     08 CE 85 F1 | 	sub	fp, #8
172b8     E7 92 02 F6 | 	mov	arg01, fp
172bc     24 CE 85 F1 | 	sub	fp, #36
172c0     C0 65 BF FD | 	call	#_converttoint
172c4     3D A7 02 F6 | 	mov	local01, result1
172c8     E7 92 02 F6 | 	mov	arg01, fp
172cc     18 92 06 F1 | 	add	arg01, #24
172d0     B0 65 BF FD | 	call	#_converttoint
172d4     3D A9 02 F6 | 	mov	local02, result1
172d8     E7 92 02 F6 | 	mov	arg01, fp
172dc     0C 92 06 F1 | 	add	arg01, #12
172e0     A0 65 BF FD | 	call	#_converttoint
172e4     3D AB 02 F6 | 	mov	local03, result1
172e8     E7 92 02 F6 | 	mov	arg01, fp
172ec     94 65 BF FD | 	call	#_converttoint
172f0     40 A6 62 FD | 	dirl	local01
172f4     53 A9 02 FC | 	wrpin	local02, local01
172f8     53 AB 12 FC | 	wxpin	local03, local01
172fc     53 7B 22 FC | 	wypin	result1, local01
17300     41 A6 62 FD | 	dirh	local01
17304     E7 F0 03 F6 | 	mov	ptra, fp
17308     F2 00 A0 FD | 	call	#popregs_
1730c                 | _do_pinstart_ret
1730c     2D 00 64 FD | 	ret
17310                 | 
17310                 | ' 
17310                 | ' '-------------------- pintoggle
17310                 | ' 
17310                 | ' sub do_pintoggle
17310                 | _do_pintoggle
17310     00 CA 05 F6 | 	mov	COUNT_, #0
17314     E8 00 A0 FD | 	call	#pushregs_
17318     0C F0 07 F1 | 	add	ptra, #12
1731c     88 63 BF FD | 	call	#_pop
17320     E7 7A 62 FC | 	wrlong	result1, fp
17324     04 CE 05 F1 | 	add	fp, #4
17328     E7 7C 62 FC | 	wrlong	result2, fp
1732c     04 CE 05 F1 | 	add	fp, #4
17330     E7 7E 62 FC | 	wrlong	result3, fp
17334     08 CE 85 F1 | 	sub	fp, #8
17338     E7 92 02 F6 | 	mov	arg01, fp
1733c     44 65 BF FD | 	call	#_converttoint
17340     5F 7A 62 FD | 	drvnot	result1
17344     E7 F0 03 F6 | 	mov	ptra, fp
17348     F2 00 A0 FD | 	call	#popregs_
1734c                 | _do_pintoggle_ret
1734c     2D 00 64 FD | 	ret
17350                 | 
17350                 | ' 
17350                 | ' '-------------------- pinwrite
17350                 | ' 
17350                 | ' sub do_pinwrite
17350                 | _do_pinwrite
17350     01 CA 05 F6 | 	mov	COUNT_, #1
17354     E8 00 A0 FD | 	call	#pushregs_
17358     18 F0 07 F1 | 	add	ptra, #24
1735c     48 63 BF FD | 	call	#_pop
17360     3D 95 02 F6 | 	mov	arg02, result1
17364     3E 93 02 F6 | 	mov	arg01, result2
17368     3F A7 02 F6 | 	mov	local01, result3
1736c     E7 94 62 FC | 	wrlong	arg02, fp
17370     04 CE 05 F1 | 	add	fp, #4
17374     E7 92 62 FC | 	wrlong	arg01, fp
17378     04 CE 05 F1 | 	add	fp, #4
1737c     E7 A6 62 FC | 	wrlong	local01, fp
17380     08 CE 85 F1 | 	sub	fp, #8
17384     20 63 BF FD | 	call	#_pop
17388     3F A7 02 F6 | 	mov	local01, result3
1738c     0C CE 05 F1 | 	add	fp, #12
17390     E7 7A 62 FC | 	wrlong	result1, fp
17394     04 CE 05 F1 | 	add	fp, #4
17398     E7 7C 62 FC | 	wrlong	result2, fp
1739c     04 CE 05 F1 | 	add	fp, #4
173a0     E7 A6 62 FC | 	wrlong	local01, fp
173a4     08 CE 85 F1 | 	sub	fp, #8
173a8     E7 92 02 F6 | 	mov	arg01, fp
173ac     0C CE 85 F1 | 	sub	fp, #12
173b0     D0 64 BF FD | 	call	#_converttoint
173b4     3D A7 02 F6 | 	mov	local01, result1
173b8     E7 92 02 F6 | 	mov	arg01, fp
173bc     C4 64 BF FD | 	call	#_converttoint
173c0     3D 95 02 F6 | 	mov	arg02, result1
173c4     53 93 02 F6 | 	mov	arg01, local01
173c8     C4 D7 B0 FD | 	call	#__system___pinwrite
173cc     E7 F0 03 F6 | 	mov	ptra, fp
173d0     F2 00 A0 FD | 	call	#popregs_
173d4                 | _do_pinwrite_ret
173d4     2D 00 64 FD | 	ret
173d8                 | 
173d8                 | ' 
173d8                 | ' '-------------------- play
173d8                 | ' 
173d8                 | ' sub do_play
173d8                 | _do_play
173d8     15 CA 05 F6 | 	mov	COUNT_, #21
173dc     E8 00 A0 FD | 	call	#pushregs_
173e0     84 F0 07 F1 | 	add	ptra, #132
173e4     77 CC 21 FF 
173e8     BE A7 06 F6 | 	mov	local01, ##1134096318
173ec                 | ' speed_coeff=305.873
173ec                 | ' 
173ec                 | ' for i=0 to 9 : params(i)=-2.0 : next i
173ec     00 A8 06 F6 | 	mov	local02, #0
173f0     3C CE 05 F1 | 	add	fp, #60
173f4     D7 10 48 FB | 	callpa	#(@LR__1981-@LR__1980)>>2,fcache_load_ptr_
173f8                 | LR__1980
173f8     54 AB 02 F6 | 	mov	local03, local02
173fc     02 AA 66 F0 | 	shl	local03, #2
17400     E7 AA 02 F1 | 	add	local03, fp
17404     00 00 E0 FF 
17408     55 01 68 FC | 	wrlong	##-1073741824, local03
1740c     01 A8 06 F1 | 	add	local02, #1
17410     0A A8 56 F2 | 	cmps	local02, #10 wc
17414     E0 FF 9F CD |  if_b	jmp	#LR__1980
17418                 | LR__1981
17418     3C CE 85 F1 | 	sub	fp, #60
1741c     4B 00 00 FF 
17420     A0 64 06 F1 | 	add	objptr, ##38560
17424     32 A9 02 FB | 	rdlong	local02, objptr
17428     54 AD 02 F6 | 	mov	local04, local02
1742c     01 AC 66 F0 | 	shl	local04, #1
17430     54 AD 02 F1 | 	add	local04, local02
17434     02 AC 66 F0 | 	shl	local04, #2
17438     03 00 00 FF 
1743c     04 64 86 F1 | 	sub	objptr, ##1540
17440     32 AD 02 F1 | 	add	local04, objptr
17444     56 AF 02 FB | 	rdlong	local05, local04
17448                 | ' numpar=compiledline(lineptr_e).result.uresult
17448                 | ' for i=numpar to 1 step -1 
17448     57 A9 02 F6 | 	mov	local02, local05
1744c     48 00 00 FF 
17450     9C 64 86 F1 | 	sub	objptr, ##37020
17454                 | LR__1982
17454     50 62 BF FD | 	call	#_pop
17458     64 CE 05 F1 | 	add	fp, #100
1745c     E7 7A 62 FC | 	wrlong	result1, fp
17460     04 CE 05 F1 | 	add	fp, #4
17464     E7 7C 62 FC | 	wrlong	result2, fp
17468     04 CE 05 F1 | 	add	fp, #4
1746c     E7 7E 62 FC | 	wrlong	result3, fp
17470     54 AB 02 F6 | 	mov	local03, local02
17474     01 AA 86 F1 | 	sub	local03, #1
17478     02 AA 66 F0 | 	shl	local03, #2
1747c     30 CE 85 F1 | 	sub	fp, #48
17480     E7 AA 02 F1 | 	add	local03, fp
17484     28 CE 05 F1 | 	add	fp, #40
17488     E7 B0 02 F6 | 	mov	local06, fp
1748c     58 93 02 F6 | 	mov	arg01, local06
17490     64 CE 85 F1 | 	sub	fp, #100
17494     A8 64 BF FD | 	call	#_converttofloat
17498     55 7B 62 FC | 	wrlong	result1, local03
1749c     01 A8 86 F1 | 	sub	local02, #1
174a0     01 A8 56 F2 | 	cmps	local02, #1 wc
174a4     AC FF 9F 3D |  if_ae	jmp	#LR__1982
174a8                 | ' 
174a8                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
174a8     3C CE 05 F1 | 	add	fp, #60
174ac     E7 92 02 FB | 	rdlong	arg01, fp
174b0     3C CE 85 F1 | 	sub	fp, #60
174b4     00 94 06 F6 | 	mov	arg02, #0
174b8     01 96 06 F6 | 	mov	arg03, #1
174bc     20 00 B1 FD | 	call	#__system___float_cmp
174c0     00 7A 56 F2 | 	cmps	result1, #0 wc
174c4     00 B2 06 C6 |  if_b	mov	local07, #0
174c8     20 00 90 CD |  if_b	jmp	#LR__1983
174cc     3C CE 05 F1 | 	add	fp, #60
174d0     E7 92 02 FB | 	rdlong	arg01, fp
174d4     3C CE 85 F1 | 	sub	fp, #60
174d8     01 94 06 F6 | 	mov	arg02, #1
174dc     94 00 B1 FD | 	call	#__system___float_tointeger
174e0     3D B3 52 F6 | 	abs	local07, result1 wc
174e4     07 B2 06 F5 | 	and	local07, #7
174e8     59 B3 82 F6 | 	negc	local07, local07
174ec                 | LR__1983
174ec                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
174ec     40 CE 05 F1 | 	add	fp, #64
174f0     E7 92 02 FB | 	rdlong	arg01, fp
174f4     40 CE 85 F1 | 	sub	fp, #64
174f8     00 94 06 F6 | 	mov	arg02, #0
174fc     01 96 06 F6 | 	mov	arg03, #1
17500     DC FF B0 FD | 	call	#__system___float_cmp
17504     00 7A 56 F2 | 	cmps	result1, #0 wc
17508     28 00 90 3D |  if_ae	jmp	#LR__1984
1750c     59 97 02 F6 | 	mov	arg03, local07
17510     03 96 66 F0 | 	shl	arg03, #3
17514     59 97 82 F1 | 	sub	arg03, local07
17518     02 96 66 F0 | 	shl	arg03, #2
1751c     32 AD 02 F6 | 	mov	local04, objptr
17520     15 00 00 FF 
17524     38 AD 06 F1 | 	add	local04, ##11064
17528     56 97 02 F1 | 	add	arg03, local04
1752c     4B B5 02 FB | 	rdlong	local08, arg03
17530     30 00 90 FD | 	jmp	#LR__1985
17534                 | LR__1984
17534     40 CE 05 F1 | 	add	fp, #64
17538     E7 B4 02 FB | 	rdlong	local08, fp
1753c     40 CE 85 F1 | 	sub	fp, #64
17540     59 97 02 F6 | 	mov	arg03, local07
17544     03 96 66 F0 | 	shl	arg03, #3
17548     59 97 82 F1 | 	sub	arg03, local07
1754c     02 96 66 F0 | 	shl	arg03, #2
17550     32 AD 02 F6 | 	mov	local04, objptr
17554     15 00 00 FF 
17558     38 AD 06 F1 | 	add	local04, ##11064
1755c     56 97 02 F1 | 	add	arg03, local04
17560     4B B5 62 FC | 	wrlong	local08, arg03
17564                 | LR__1985
17564                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
17564     44 CE 05 F1 | 	add	fp, #68
17568     E7 92 02 FB | 	rdlong	arg01, fp
1756c     44 CE 85 F1 | 	sub	fp, #68
17570     00 94 06 F6 | 	mov	arg02, #0
17574     01 96 06 F6 | 	mov	arg03, #1
17578     64 FF B0 FD | 	call	#__system___float_cmp
1757c     00 7A 56 F2 | 	cmps	result1, #0 wc
17580     24 00 90 CD |  if_b	jmp	#LR__1986
17584     44 CE 05 F1 | 	add	fp, #68
17588     E7 92 02 FB | 	rdlong	arg01, fp
1758c     44 CE 85 F1 | 	sub	fp, #68
17590     20 0E 23 FF 
17594     00 94 06 F6 | 	mov	arg02, ##1176256512
17598     01 96 66 F6 | 	neg	arg03, #1
1759c     40 FF B0 FD | 	call	#__system___float_cmp
175a0     01 7A 56 F2 | 	cmps	result1, #1 wc
175a4     30 00 90 CD |  if_b	jmp	#LR__1987
175a8                 | LR__1986
175a8     59 AD 02 F6 | 	mov	local04, local07
175ac     03 AC 66 F0 | 	shl	local04, #3
175b0     59 AD 82 F1 | 	sub	local04, local07
175b4     02 AC 66 F0 | 	shl	local04, #2
175b8     32 B1 02 F6 | 	mov	local06, objptr
175bc     15 00 00 FF 
175c0     38 B1 06 F1 | 	add	local06, ##11064
175c4     58 AD 02 F1 | 	add	local04, local06
175c8     06 AC 06 F1 | 	add	local04, #6
175cc     56 B7 E2 FA | 	rdword	local09, local04
175d0     5B B9 32 F9 | 	getword	local10, local09, #0
175d4     40 00 90 FD | 	jmp	#LR__1988
175d8                 | LR__1987
175d8     44 CE 05 F1 | 	add	fp, #68
175dc     E7 92 02 FB | 	rdlong	arg01, fp
175e0     44 CE 85 F1 | 	sub	fp, #68
175e4     01 94 06 F6 | 	mov	arg02, #1
175e8     88 FF B0 FD | 	call	#__system___float_tointeger
175ec     3D B9 02 F6 | 	mov	local10, result1
175f0     59 97 02 F6 | 	mov	arg03, local07
175f4     03 96 66 F0 | 	shl	arg03, #3
175f8     59 97 82 F1 | 	sub	arg03, local07
175fc     02 96 66 F0 | 	shl	arg03, #2
17600     32 AD 02 F6 | 	mov	local04, objptr
17604     15 00 00 FF 
17608     38 AD 06 F1 | 	add	local04, ##11064
1760c     56 97 02 F1 | 	add	arg03, local04
17610     06 96 06 F1 | 	add	arg03, #6
17614     4B B9 52 FC | 	wrword	local10, arg03
17618                 | LR__1988
17618                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
17618     48 CE 05 F1 | 	add	fp, #72
1761c     E7 92 02 FB | 	rdlong	arg01, fp
17620     48 CE 85 F1 | 	sub	fp, #72
17624     00 94 06 F6 | 	mov	arg02, #0
17628     01 96 06 F6 | 	mov	arg03, #1
1762c     B0 FE B0 FD | 	call	#__system___float_cmp
17630     00 7A 56 F2 | 	cmps	result1, #0 wc
17634     24 00 90 CD |  if_b	jmp	#LR__1989
17638     48 CE 05 F1 | 	add	fp, #72
1763c     E7 92 02 FB | 	rdlong	arg01, fp
17640     48 CE 85 F1 | 	sub	fp, #72
17644     89 C1 20 FF 
17648     6F 94 06 F6 | 	mov	arg02, ##1099108975
1764c     01 96 66 F6 | 	neg	arg03, #1
17650     8C FE B0 FD | 	call	#__system___float_cmp
17654     01 7A 56 F2 | 	cmps	result1, #1 wc
17658     2C 00 90 CD |  if_b	jmp	#LR__1990
1765c                 | LR__1989
1765c     59 B1 02 F6 | 	mov	local06, local07
17660     03 B0 66 F0 | 	shl	local06, #3
17664     59 B1 82 F1 | 	sub	local06, local07
17668     02 B0 66 F0 | 	shl	local06, #2
1766c     32 AD 02 F6 | 	mov	local04, objptr
17670     15 00 00 FF 
17674     38 AD 06 F1 | 	add	local04, ##11064
17678     56 B1 02 F1 | 	add	local06, local04
1767c     0C B0 06 F1 | 	add	local06, #12
17680     58 BB 02 FB | 	rdlong	local11, local06
17684     34 00 90 FD | 	jmp	#LR__1991
17688                 | LR__1990
17688     48 CE 05 F1 | 	add	fp, #72
1768c     E7 BA 02 FB | 	rdlong	local11, fp
17690     48 CE 85 F1 | 	sub	fp, #72
17694     59 97 02 F6 | 	mov	arg03, local07
17698     03 96 66 F0 | 	shl	arg03, #3
1769c     59 97 82 F1 | 	sub	arg03, local07
176a0     02 96 66 F0 | 	shl	arg03, #2
176a4     32 AD 02 F6 | 	mov	local04, objptr
176a8     15 00 00 FF 
176ac     38 AD 06 F1 | 	add	local04, ##11064
176b0     56 97 02 F1 | 	add	arg03, local04
176b4     0C 96 06 F1 | 	add	arg03, #12
176b8     4B BB 62 FC | 	wrlong	local11, arg03
176bc                 | LR__1991
176bc                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
176bc     4C CE 05 F1 | 	add	fp, #76
176c0     E7 92 02 FB | 	rdlong	arg01, fp
176c4     4C CE 85 F1 | 	sub	fp, #76
176c8     00 94 06 F6 | 	mov	arg02, #0
176cc     01 96 06 F6 | 	mov	arg03, #1
176d0     0C FE B0 FD | 	call	#__system___float_cmp
176d4     00 7A 56 F2 | 	cmps	result1, #0 wc
176d8     24 00 90 CD |  if_b	jmp	#LR__1992
176dc     4C CE 05 F1 | 	add	fp, #76
176e0     E7 92 02 FB | 	rdlong	arg01, fp
176e4     4C CE 85 F1 | 	sub	fp, #76
176e8     00 00 21 FF 
176ec     00 94 06 F6 | 	mov	arg02, ##1107296256
176f0     01 96 66 F6 | 	neg	arg03, #1
176f4     E8 FD B0 FD | 	call	#__system___float_cmp
176f8     01 7A 56 F2 | 	cmps	result1, #1 wc
176fc     30 00 90 CD |  if_b	jmp	#LR__1993
17700                 | LR__1992
17700     59 AD 02 F6 | 	mov	local04, local07
17704     03 AC 66 F0 | 	shl	local04, #3
17708     59 AD 82 F1 | 	sub	local04, local07
1770c     02 AC 66 F0 | 	shl	local04, #2
17710     32 B1 02 F6 | 	mov	local06, objptr
17714     15 00 00 FF 
17718     38 B1 06 F1 | 	add	local06, ##11064
1771c     58 AD 02 F1 | 	add	local04, local06
17720     04 AC 06 F1 | 	add	local04, #4
17724     56 B7 C2 FA | 	rdbyte	local09, local04
17728     5B BD E2 F8 | 	getbyte	local12, local09, #0
1772c     40 00 90 FD | 	jmp	#LR__1994
17730                 | LR__1993
17730     4C CE 05 F1 | 	add	fp, #76
17734     E7 92 02 FB | 	rdlong	arg01, fp
17738     4C CE 85 F1 | 	sub	fp, #76
1773c     01 94 06 F6 | 	mov	arg02, #1
17740     30 FE B0 FD | 	call	#__system___float_tointeger
17744     3D BD 02 F6 | 	mov	local12, result1
17748     59 97 02 F6 | 	mov	arg03, local07
1774c     03 96 66 F0 | 	shl	arg03, #3
17750     59 97 82 F1 | 	sub	arg03, local07
17754     02 96 66 F0 | 	shl	arg03, #2
17758     32 AD 02 F6 | 	mov	local04, objptr
1775c     15 00 00 FF 
17760     38 AD 06 F1 | 	add	local04, ##11064
17764     56 97 02 F1 | 	add	arg03, local04
17768     04 96 06 F1 | 	add	arg03, #4
1776c     4B BD 42 FC | 	wrbyte	local12, arg03
17770                 | LR__1994
17770                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
17770     50 CE 05 F1 | 	add	fp, #80
17774     E7 92 02 FB | 	rdlong	arg01, fp
17778     50 CE 85 F1 | 	sub	fp, #80
1777c     00 94 06 F6 | 	mov	arg02, #0
17780     01 96 06 F6 | 	mov	arg03, #1
17784     58 FD B0 FD | 	call	#__system___float_cmp
17788     00 7A 56 F2 | 	cmps	result1, #0 wc
1778c     24 00 90 CD |  if_b	jmp	#LR__1995
17790     50 CE 05 F1 | 	add	fp, #80
17794     E7 92 02 FB | 	rdlong	arg01, fp
17798     50 CE 85 F1 | 	sub	fp, #80
1779c     00 80 20 FF 
177a0     00 94 06 F6 | 	mov	arg02, ##1090519040
177a4     01 96 66 F6 | 	neg	arg03, #1
177a8     34 FD B0 FD | 	call	#__system___float_cmp
177ac     01 7A 56 F2 | 	cmps	result1, #1 wc
177b0     30 00 90 CD |  if_b	jmp	#LR__1996
177b4                 | LR__1995
177b4     59 AD 02 F6 | 	mov	local04, local07
177b8     03 AC 66 F0 | 	shl	local04, #3
177bc     59 AD 82 F1 | 	sub	local04, local07
177c0     02 AC 66 F0 | 	shl	local04, #2
177c4     32 B1 02 F6 | 	mov	local06, objptr
177c8     15 00 00 FF 
177cc     38 B1 06 F1 | 	add	local06, ##11064
177d0     58 AD 02 F1 | 	add	local04, local06
177d4     05 AC 06 F1 | 	add	local04, #5
177d8     56 B7 C2 FA | 	rdbyte	local09, local04
177dc     5B BF E2 F8 | 	getbyte	local13, local09, #0
177e0     40 00 90 FD | 	jmp	#LR__1997
177e4                 | LR__1996
177e4     50 CE 05 F1 | 	add	fp, #80
177e8     E7 92 02 FB | 	rdlong	arg01, fp
177ec     50 CE 85 F1 | 	sub	fp, #80
177f0     01 94 06 F6 | 	mov	arg02, #1
177f4     7C FD B0 FD | 	call	#__system___float_tointeger
177f8     3D BF 02 F6 | 	mov	local13, result1
177fc     59 97 02 F6 | 	mov	arg03, local07
17800     03 96 66 F0 | 	shl	arg03, #3
17804     59 97 82 F1 | 	sub	arg03, local07
17808     02 96 66 F0 | 	shl	arg03, #2
1780c     32 AD 02 F6 | 	mov	local04, objptr
17810     15 00 00 FF 
17814     38 AD 06 F1 | 	add	local04, ##11064
17818     56 97 02 F1 | 	add	arg03, local04
1781c     05 96 06 F1 | 	add	arg03, #5
17820     4B BF 42 FC | 	wrbyte	local13, arg03
17824                 | LR__1997
17824                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
17824     54 CE 05 F1 | 	add	fp, #84
17828     E7 92 02 FB | 	rdlong	arg01, fp
1782c     54 CE 85 F1 | 	sub	fp, #84
17830     00 94 06 F6 | 	mov	arg02, #0
17834     01 96 06 F6 | 	mov	arg03, #1
17838     A4 FC B0 FD | 	call	#__system___float_cmp
1783c     00 7A 56 F2 | 	cmps	result1, #0 wc
17840     24 00 90 CD |  if_b	jmp	#LR__1998
17844     54 CE 05 F1 | 	add	fp, #84
17848     E7 92 02 FB | 	rdlong	arg01, fp
1784c     54 CE 85 F1 | 	sub	fp, #84
17850     00 3D 22 FF 
17854     00 94 06 F6 | 	mov	arg02, ##1148846080
17858     01 96 66 F6 | 	neg	arg03, #1
1785c     80 FC B0 FD | 	call	#__system___float_cmp
17860     01 7A 56 F2 | 	cmps	result1, #1 wc
17864     2C 00 90 CD |  if_b	jmp	#LR__1999
17868                 | LR__1998
17868     59 B1 02 F6 | 	mov	local06, local07
1786c     03 B0 66 F0 | 	shl	local06, #3
17870     59 B1 82 F1 | 	sub	local06, local07
17874     02 B0 66 F0 | 	shl	local06, #2
17878     32 AD 02 F6 | 	mov	local04, objptr
1787c     15 00 00 FF 
17880     38 AD 06 F1 | 	add	local04, ##11064
17884     56 B1 02 F1 | 	add	local06, local04
17888     08 B0 06 F1 | 	add	local06, #8
1788c     58 C1 02 FB | 	rdlong	local14, local06
17890     34 00 90 FD | 	jmp	#LR__2000
17894                 | LR__1999
17894     54 CE 05 F1 | 	add	fp, #84
17898     E7 C0 02 FB | 	rdlong	local14, fp
1789c     54 CE 85 F1 | 	sub	fp, #84
178a0     59 B1 02 F6 | 	mov	local06, local07
178a4     03 B0 66 F0 | 	shl	local06, #3
178a8     59 B1 82 F1 | 	sub	local06, local07
178ac     02 B0 66 F0 | 	shl	local06, #2
178b0     32 AD 02 F6 | 	mov	local04, objptr
178b4     15 00 00 FF 
178b8     38 AD 06 F1 | 	add	local04, ##11064
178bc     56 B1 02 F1 | 	add	local06, local04
178c0     08 B0 06 F1 | 	add	local06, #8
178c4     58 C1 62 FC | 	wrlong	local14, local06
178c8                 | LR__2000
178c8                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
178c8     58 CE 05 F1 | 	add	fp, #88
178cc     E7 92 02 FB | 	rdlong	arg01, fp
178d0     58 CE 85 F1 | 	sub	fp, #88
178d4     00 C0 5F FF 
178d8     00 94 06 F6 | 	mov	arg02, ##-1082130432
178dc     01 96 06 F6 | 	mov	arg03, #1
178e0     FC FB B0 FD | 	call	#__system___float_cmp
178e4     00 7A 56 F2 | 	cmps	result1, #0 wc
178e8     24 00 90 CD |  if_b	jmp	#LR__2001
178ec     58 CE 05 F1 | 	add	fp, #88
178f0     E7 92 02 FB | 	rdlong	arg01, fp
178f4     58 CE 85 F1 | 	sub	fp, #88
178f8     00 C0 1F FF 
178fc     00 94 06 F6 | 	mov	arg02, ##1065353216
17900     01 96 66 F6 | 	neg	arg03, #1
17904     D8 FB B0 FD | 	call	#__system___float_cmp
17908     01 7A 56 F2 | 	cmps	result1, #1 wc
1790c     2C 00 90 CD |  if_b	jmp	#LR__2002
17910                 | LR__2001
17910     59 B1 02 F6 | 	mov	local06, local07
17914     03 B0 66 F0 | 	shl	local06, #3
17918     59 B1 82 F1 | 	sub	local06, local07
1791c     02 B0 66 F0 | 	shl	local06, #2
17920     32 AD 02 F6 | 	mov	local04, objptr
17924     15 00 00 FF 
17928     38 AD 06 F1 | 	add	local04, ##11064
1792c     56 B1 02 F1 | 	add	local06, local04
17930     10 B0 06 F1 | 	add	local06, #16
17934     58 C3 02 FB | 	rdlong	local15, local06
17938     34 00 90 FD | 	jmp	#LR__2003
1793c                 | LR__2002
1793c     58 CE 05 F1 | 	add	fp, #88
17940     E7 C2 02 FB | 	rdlong	local15, fp
17944     58 CE 85 F1 | 	sub	fp, #88
17948     59 B1 02 F6 | 	mov	local06, local07
1794c     03 B0 66 F0 | 	shl	local06, #3
17950     59 B1 82 F1 | 	sub	local06, local07
17954     02 B0 66 F0 | 	shl	local06, #2
17958     32 AD 02 F6 | 	mov	local04, objptr
1795c     15 00 00 FF 
17960     38 AD 06 F1 | 	add	local04, ##11064
17964     56 B1 02 F1 | 	add	local06, local04
17968     10 B0 06 F1 | 	add	local06, #16
1796c     58 C3 62 FC | 	wrlong	local15, local06
17970                 | LR__2003
17970                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
17970     5C CE 05 F1 | 	add	fp, #92
17974     E7 92 02 FB | 	rdlong	arg01, fp
17978     5C CE 85 F1 | 	sub	fp, #92
1797c     00 94 06 F6 | 	mov	arg02, #0
17980     01 96 06 F6 | 	mov	arg03, #1
17984     58 FB B0 FD | 	call	#__system___float_cmp
17988     00 7A 56 F2 | 	cmps	result1, #0 wc
1798c     24 00 90 CD |  if_b	jmp	#LR__2004
17990     5C CE 05 F1 | 	add	fp, #92
17994     E7 92 02 FB | 	rdlong	arg01, fp
17998     5C CE 85 F1 | 	sub	fp, #92
1799c     80 BF 21 FF 
179a0     00 94 06 F6 | 	mov	arg02, ##1132396544
179a4     01 96 66 F6 | 	neg	arg03, #1
179a8     34 FB B0 FD | 	call	#__system___float_cmp
179ac     01 7A 56 F2 | 	cmps	result1, #1 wc
179b0     2C 00 90 CD |  if_b	jmp	#LR__2005
179b4                 | LR__2004
179b4     59 AD 02 F6 | 	mov	local04, local07
179b8     03 AC 66 F0 | 	shl	local04, #3
179bc     59 AD 82 F1 | 	sub	local04, local07
179c0     02 AC 66 F0 | 	shl	local04, #2
179c4     32 B1 02 F6 | 	mov	local06, objptr
179c8     15 00 00 FF 
179cc     38 B1 06 F1 | 	add	local06, ##11064
179d0     58 AD 02 F1 | 	add	local04, local06
179d4     14 AC 06 F1 | 	add	local04, #20
179d8     56 C5 E2 FA | 	rdword	local16, local04
179dc     40 00 90 FD | 	jmp	#LR__2006
179e0                 | LR__2005
179e0     5C CE 05 F1 | 	add	fp, #92
179e4     E7 92 02 FB | 	rdlong	arg01, fp
179e8     5C CE 85 F1 | 	sub	fp, #92
179ec     01 94 06 F6 | 	mov	arg02, #1
179f0     80 FB B0 FD | 	call	#__system___float_tointeger
179f4     3D C5 02 F6 | 	mov	local16, result1
179f8     59 B1 02 F6 | 	mov	local06, local07
179fc     03 B0 66 F0 | 	shl	local06, #3
17a00     59 B1 82 F1 | 	sub	local06, local07
17a04     02 B0 66 F0 | 	shl	local06, #2
17a08     32 AD 02 F6 | 	mov	local04, objptr
17a0c     15 00 00 FF 
17a10     38 AD 06 F1 | 	add	local04, ##11064
17a14     56 B1 02 F1 | 	add	local06, local04
17a18     14 B0 06 F1 | 	add	local06, #20
17a1c     58 C5 52 FC | 	wrword	local16, local06
17a20                 | LR__2006
17a20                 | ' if params(9)<0 orelse params(8)>255 then amode=channels(channel).amode else amode= round(params(9)) : channels(channel).amode=amode
17a20     60 CE 05 F1 | 	add	fp, #96
17a24     E7 92 02 FB | 	rdlong	arg01, fp
17a28     60 CE 85 F1 | 	sub	fp, #96
17a2c     00 94 06 F6 | 	mov	arg02, #0
17a30     01 96 06 F6 | 	mov	arg03, #1
17a34     A8 FA B0 FD | 	call	#__system___float_cmp
17a38     00 7A 56 F2 | 	cmps	result1, #0 wc
17a3c     24 00 90 CD |  if_b	jmp	#LR__2007
17a40     5C CE 05 F1 | 	add	fp, #92
17a44     E7 92 02 FB | 	rdlong	arg01, fp
17a48     5C CE 85 F1 | 	sub	fp, #92
17a4c     80 BF 21 FF 
17a50     00 94 06 F6 | 	mov	arg02, ##1132396544
17a54     01 96 66 F6 | 	neg	arg03, #1
17a58     84 FA B0 FD | 	call	#__system___float_cmp
17a5c     01 7A 56 F2 | 	cmps	result1, #1 wc
17a60     2C 00 90 CD |  if_b	jmp	#LR__2008
17a64                 | LR__2007
17a64     59 AD 02 F6 | 	mov	local04, local07
17a68     03 AC 66 F0 | 	shl	local04, #3
17a6c     59 AD 82 F1 | 	sub	local04, local07
17a70     02 AC 66 F0 | 	shl	local04, #2
17a74     32 B1 02 F6 | 	mov	local06, objptr
17a78     15 00 00 FF 
17a7c     38 B1 06 F1 | 	add	local06, ##11064
17a80     58 AD 02 F1 | 	add	local04, local06
17a84     16 AC 06 F1 | 	add	local04, #22
17a88     56 C7 E2 FA | 	rdword	local17, local04
17a8c     40 00 90 FD | 	jmp	#LR__2009
17a90                 | LR__2008
17a90     60 CE 05 F1 | 	add	fp, #96
17a94     E7 92 02 FB | 	rdlong	arg01, fp
17a98     60 CE 85 F1 | 	sub	fp, #96
17a9c     01 94 06 F6 | 	mov	arg02, #1
17aa0     D0 FA B0 FD | 	call	#__system___float_tointeger
17aa4     3D C7 02 F6 | 	mov	local17, result1
17aa8     59 B7 02 F6 | 	mov	local09, local07
17aac     03 B6 66 F0 | 	shl	local09, #3
17ab0     59 B7 82 F1 | 	sub	local09, local07
17ab4     02 B6 66 F0 | 	shl	local09, #2
17ab8     32 AD 02 F6 | 	mov	local04, objptr
17abc     15 00 00 FF 
17ac0     38 AD 06 F1 | 	add	local04, ##11064
17ac4     56 B7 02 F1 | 	add	local09, local04
17ac8     16 B6 06 F1 | 	add	local09, #22
17acc     5B C7 52 FC | 	wrword	local17, local09
17ad0                 | LR__2009
17ad0                 | ' 
17ad0                 | ' 
17ad0                 | ' if amode>0 then
17ad0     01 C6 56 F2 | 	cmps	local17, #1 wc
17ad4     AC 01 90 CD |  if_b	jmp	#LR__2012
17ad8     5A 95 02 F6 | 	mov	arg02, local08
17adc     FC 16 20 FF 
17ae0     54 92 06 F6 | 	mov	arg01, ##1076754516
17ae4     A4 05 B1 FD | 	call	#__system____builtin_logbase
17ae8     3D B7 02 F6 | 	mov	local09, result1
17aec     1E 94 C6 F9 | 	decod	arg02, #30
17af0     FC 16 20 FF 
17af4     54 92 06 F6 | 	mov	arg01, ##1076754516
17af8     90 05 B1 FD | 	call	#__system____builtin_logbase
17afc     3D 95 02 F6 | 	mov	arg02, result1
17b00     5B 93 02 F6 | 	mov	arg01, local09
17b04     A8 F7 B0 FD | 	call	#__system___float_div
17b08     3D 93 02 F6 | 	mov	arg01, result1
17b0c     00 94 06 F6 | 	mov	arg02, #0
17b10     60 FA B0 FD | 	call	#__system___float_tointeger
17b14     3D C9 02 F6 | 	mov	local18, result1
17b18     1E A8 C6 F9 | 	decod	local02, #30
17b1c     64 93 02 F6 | 	mov	arg01, local18
17b20     63 93 02 F1 | 	add	arg01, local17
17b24     49 93 52 F6 | 	abs	arg01, arg01 wc
17b28     1F CA C6 C9 |  if_b	decod	local19, #31
17b2c     00 CA 06 36 |  if_ae	mov	local19, #0
17b30     74 F1 B0 FD | 	call	#__system___float_fromuns
17b34     65 7B 62 F5 | 	xor	result1, local19
17b38     3D 95 02 F6 | 	mov	arg02, result1
17b3c     54 93 02 F6 | 	mov	arg01, local02
17b40     80 04 B1 FD | 	call	#__system____builtin_powf
17b44     3D 93 02 F6 | 	mov	arg01, result1
17b48     01 94 06 F6 | 	mov	arg02, #1
17b4c     24 FA B0 FD | 	call	#__system___float_tointeger
17b50     3D CD 02 F6 | 	mov	local20, result1
17b54                 | '   skip=round(2^(lfreq+amode))                     '''' this const + const 2 lines lower=18
17b54                 | '   if skip>32768 then i=skip/32768: skip=32768 else i=1
17b54     40 00 00 FF 
17b58     01 CC 56 F2 | 	cmps	local20, ##32769 wc
17b5c     14 00 90 CD |  if_b	jmp	#LR__2010
17b60     66 A9 52 F6 | 	abs	local02, local20 wc
17b64     0F A8 46 F0 | 	shr	local02, #15
17b68     54 A9 82 F6 | 	negc	local02, local02
17b6c     0F CC C6 F9 | 	decod	local20, #15
17b70     04 00 90 FD | 	jmp	#LR__2011
17b74                 | LR__2010
17b74     01 A8 06 F6 | 	mov	local02, #1
17b78                 | LR__2011
17b78     AA 2B 25 FF 
17b7c     00 93 06 F6 | 	mov	arg01, ##1247237376
17b80     5A 95 02 F6 | 	mov	arg02, local08
17b84     28 F7 B0 FD | 	call	#__system___float_div
17b88     3D B7 02 F6 | 	mov	local09, result1
17b8c     54 93 52 F6 | 	abs	arg01, local02 wc
17b90     1F CA C6 C9 |  if_b	decod	local19, #31
17b94     00 CA 06 36 |  if_ae	mov	local19, #0
17b98     0C F1 B0 FD | 	call	#__system___float_fromuns
17b9c     65 7B 62 F5 | 	xor	result1, local19
17ba0     3D AB 02 F6 | 	mov	local03, result1
17ba4     1E B0 C6 F9 | 	decod	local06, #30
17ba8     12 92 06 F6 | 	mov	arg01, #18
17bac     63 93 82 F1 | 	sub	arg01, local17
17bb0     64 93 82 F1 | 	sub	arg01, local18
17bb4     49 93 52 F6 | 	abs	arg01, arg01 wc
17bb8     1F CA C6 C9 |  if_b	decod	local19, #31
17bbc     00 CA 06 36 |  if_ae	mov	local19, #0
17bc0     E4 F0 B0 FD | 	call	#__system___float_fromuns
17bc4     65 7B 62 F5 | 	xor	result1, local19
17bc8     3D 95 02 F6 | 	mov	arg02, result1
17bcc     58 93 02 F6 | 	mov	arg01, local06
17bd0     F0 03 B1 FD | 	call	#__system____builtin_powf
17bd4     3D 95 02 F6 | 	mov	arg02, result1
17bd8     55 93 02 F6 | 	mov	arg01, local03
17bdc     CC F4 B0 FD | 	call	#__system___float_mul
17be0     3D 95 02 F6 | 	mov	arg02, result1
17be4     5B 93 02 F6 | 	mov	arg01, local09
17be8     C4 F6 B0 FD | 	call	#__system___float_div
17bec     3D 93 02 F6 | 	mov	arg01, result1
17bf0     01 94 06 F6 | 	mov	arg02, #1
17bf4     7C F9 B0 FD | 	call	#__system___float_tointeger
17bf8     3D CF 02 F6 | 	mov	local21, result1
17bfc     59 C9 02 F6 | 	mov	local18, local07
17c00     03 C8 66 F0 | 	shl	local18, #3
17c04     59 C9 82 F1 | 	sub	local18, local07
17c08     02 C8 66 F0 | 	shl	local18, #2
17c0c     32 AD 02 F6 | 	mov	local04, objptr
17c10     15 00 00 FF 
17c14     38 AD 06 F1 | 	add	local04, ##11064
17c18     56 C9 02 F1 | 	add	local18, local04
17c1c     AA 2B 25 FF 
17c20     00 B1 06 F6 | 	mov	local06, ##1247237376
17c24     67 93 52 F6 | 	abs	arg01, local21 wc
17c28     1F CA C6 C9 |  if_b	decod	local19, #31
17c2c     00 CA 06 36 |  if_ae	mov	local19, #0
17c30     74 F0 B0 FD | 	call	#__system___float_fromuns
17c34     65 7B 62 F5 | 	xor	result1, local19
17c38     3D 95 02 F6 | 	mov	arg02, result1
17c3c     58 93 02 F6 | 	mov	arg01, local06
17c40     6C F6 B0 FD | 	call	#__system___float_div
17c44     3D B1 02 F6 | 	mov	local06, result1
17c48     66 93 52 F6 | 	abs	arg01, local20 wc
17c4c     1F CA C6 C9 |  if_b	decod	local19, #31
17c50     00 CA 06 36 |  if_ae	mov	local19, #0
17c54     50 F0 B0 FD | 	call	#__system___float_fromuns
17c58     65 7B 62 F5 | 	xor	result1, local19
17c5c     3D 93 02 F6 | 	mov	arg01, result1
17c60     00 40 24 FF 
17c64     00 94 06 F6 | 	mov	arg02, ##1216348160
17c68     44 F6 B0 FD | 	call	#__system___float_div
17c6c     3D 95 02 F6 | 	mov	arg02, result1
17c70     58 93 02 F6 | 	mov	arg01, local06
17c74     34 F4 B0 FD | 	call	#__system___float_mul
17c78     18 C8 06 F1 | 	add	local18, #24
17c7c     64 7B 62 FC | 	wrlong	result1, local18
17c80     BC 00 90 FD | 	jmp	#LR__2013
17c84                 | LR__2012
17c84     18 CE 06 F6 | 	mov	local21, #24
17c88     00 40 24 FF 
17c8c     00 CC 06 F6 | 	mov	local20, ##1216348160
17c90     5A 93 02 F6 | 	mov	arg01, local08
17c94     C7 07 24 FF 
17c98     00 94 06 F6 | 	mov	arg02, ##1208978944
17c9c     10 F6 B0 FD | 	call	#__system___float_div
17ca0     3D 95 02 F6 | 	mov	arg02, result1
17ca4     66 93 02 F6 | 	mov	arg01, local20
17ca8     00 F4 B0 FD | 	call	#__system___float_mul
17cac     3D 93 02 F6 | 	mov	arg01, result1
17cb0     01 94 06 F6 | 	mov	arg02, #1
17cb4     BC F8 B0 FD | 	call	#__system___float_tointeger
17cb8     3D CD 02 F6 | 	mov	local20, result1
17cbc     59 C9 02 F6 | 	mov	local18, local07
17cc0     03 C8 66 F0 | 	shl	local18, #3
17cc4     59 C9 82 F1 | 	sub	local18, local07
17cc8     02 C8 66 F0 | 	shl	local18, #2
17ccc     32 AD 02 F6 | 	mov	local04, objptr
17cd0     15 00 00 FF 
17cd4     38 AD 06 F1 | 	add	local04, ##11064
17cd8     56 C9 02 F1 | 	add	local18, local04
17cdc     AA 2B 25 FF 
17ce0     00 B1 06 F6 | 	mov	local06, ##1247237376
17ce4     67 93 52 F6 | 	abs	arg01, local21 wc
17ce8     1F CA C6 C9 |  if_b	decod	local19, #31
17cec     00 CA 06 36 |  if_ae	mov	local19, #0
17cf0     B4 EF B0 FD | 	call	#__system___float_fromuns
17cf4     65 7B 62 F5 | 	xor	result1, local19
17cf8     3D 95 02 F6 | 	mov	arg02, result1
17cfc     58 93 02 F6 | 	mov	arg01, local06
17d00     AC F5 B0 FD | 	call	#__system___float_div
17d04     3D B1 02 F6 | 	mov	local06, result1
17d08     66 93 52 F6 | 	abs	arg01, local20 wc
17d0c     1F CA C6 C9 |  if_b	decod	local19, #31
17d10     00 CA 06 36 |  if_ae	mov	local19, #0
17d14     90 EF B0 FD | 	call	#__system___float_fromuns
17d18     65 7B 62 F5 | 	xor	result1, local19
17d1c     3D 93 02 F6 | 	mov	arg01, result1
17d20     00 40 24 FF 
17d24     00 94 06 F6 | 	mov	arg02, ##1216348160
17d28     84 F5 B0 FD | 	call	#__system___float_div
17d2c     3D 95 02 F6 | 	mov	arg02, result1
17d30     58 93 02 F6 | 	mov	arg01, local06
17d34     74 F3 B0 FD | 	call	#__system___float_mul
17d38     18 C8 06 F1 | 	add	local18, #24
17d3c     64 7B 62 FC | 	wrlong	result1, local18
17d40                 | LR__2013
17d40     77 CC 21 FF 
17d44     BE 93 06 F6 | 	mov	arg01, ##1134096318
17d48     60 95 02 F6 | 	mov	arg02, local14
17d4c     60 F5 B0 FD | 	call	#__system___float_div
17d50     3D 93 02 F6 | 	mov	arg01, result1
17d54     01 94 06 F6 | 	mov	arg02, #1
17d58     18 F8 B0 FD | 	call	#__system___float_tointeger
17d5c     3D C9 02 F6 | 	mov	local18, result1
17d60     00 00 23 FF 
17d64     00 92 06 F6 | 	mov	arg01, ##1174405120
17d68     61 95 02 F6 | 	mov	arg02, local15
17d6c     3C F3 B0 FD | 	call	#__system___float_mul
17d70     3D 93 02 F6 | 	mov	arg01, result1
17d74     01 94 06 F6 | 	mov	arg02, #1
17d78     F8 F7 B0 FD | 	call	#__system___float_tointeger
17d7c     0D C6 C6 F9 | 	decod	local17, #13
17d80     3D C7 02 F1 | 	add	local17, result1
17d84     00 3D 22 FF 
17d88     00 92 06 F6 | 	mov	arg01, ##1148846080
17d8c     5D 95 02 F6 | 	mov	arg02, local11
17d90     18 F3 B0 FD | 	call	#__system___float_mul
17d94     3D 93 02 F6 | 	mov	arg01, result1
17d98     01 94 06 F6 | 	mov	arg02, #1
17d9c     D4 F7 B0 FD | 	call	#__system___float_tointeger
17da0     3D C3 02 F6 | 	mov	local15, result1
17da4     38 00 00 FF 
17da8     30 64 06 F1 | 	add	objptr, ##28720
17dac     32 C1 02 FB | 	rdlong	local14, objptr
17db0     38 00 00 FF 
17db4     30 64 86 F1 | 	sub	objptr, ##28720
17db8     06 B2 66 F0 | 	shl	local07, #6
17dbc     59 C1 02 F1 | 	add	local14, local07
17dc0                 | ' 
17dc0                 | ' speed=round(speed_coeff/slen)
17dc0                 | ' ipan=8192+round(8192*pan)
17dc0                 | ' ivol=round(1000.0*vol)
17dc0                 | ' base2=base+64*channel
17dc0                 | ' if wave <32 then 
17dc0     20 BC 56 F2 | 	cmps	local12, #32 wc
17dc4     20 00 90 3D |  if_ae	jmp	#LR__2014
17dc8     60 93 02 F6 | 	mov	arg01, local14
17dcc     08 92 06 F1 | 	add	arg01, #8
17dd0     5E 95 02 F6 | 	mov	arg02, local12
17dd4     0B 94 66 F0 | 	shl	arg02, #11
17dd8     00 00 60 FF 
17ddc     00 94 06 F1 | 	add	arg02, ##-1073741824
17de0     49 95 62 FC | 	wrlong	arg02, arg01
17de4     10 00 90 FD | 	jmp	#LR__2015
17de8                 | LR__2014
17de8     60 93 02 F6 | 	mov	arg01, local14
17dec     08 92 06 F1 | 	add	arg01, #8
17df0     00 00 E4 FF 
17df4     49 01 68 FC | 	wrlong	##-939524096, arg01
17df8                 | LR__2015
17df8     60 93 02 F6 | 	mov	arg01, local14
17dfc     10 92 06 F1 | 	add	arg01, #16
17e00     04 00 80 FF 
17e04     49 01 68 FC | 	wrlong	##2048, arg01
17e08     60 93 02 F6 | 	mov	arg01, local14
17e0c     0C 92 06 F1 | 	add	arg01, #12
17e10     49 01 68 FC | 	wrlong	#0, arg01
17e14     60 93 02 F6 | 	mov	arg01, local14
17e18     14 92 06 F1 | 	add	arg01, #20
17e1c     49 C3 52 FC | 	wrword	local15, arg01
17e20     60 93 02 F6 | 	mov	arg01, local14
17e24     16 92 06 F1 | 	add	arg01, #22
17e28     49 C7 52 FC | 	wrword	local17, arg01
17e2c                 | ' lpoke base2+16,2048
17e2c                 | ' lpoke base2+12,0
17e2c                 | ' dpoke base2+20,ivol 
17e2c                 | ' dpoke base2+22,ipan 
17e2c                 | ' if wave<32 then
17e2c     20 BC 56 F2 | 	cmps	local12, #32 wc
17e30     1C 00 90 3D |  if_ae	jmp	#LR__2016
17e34     60 93 02 F6 | 	mov	arg01, local14
17e38     18 92 06 F1 | 	add	arg01, #24
17e3c     49 CF 52 FC | 	wrword	local21, arg01
17e40     60 93 02 F6 | 	mov	arg01, local14
17e44     1A 92 06 F1 | 	add	arg01, #26
17e48     49 CD 52 FC | 	wrword	local20, arg01
17e4c     34 00 90 FD | 	jmp	#LR__2017
17e50                 | LR__2016
17e50     60 CF 02 F6 | 	mov	local21, local14
17e54     18 CE 06 F1 | 	add	local21, #24
17e58     3E 2C 25 FF 
17e5c     3C 92 06 F6 | 	mov	arg01, ##1247312956
17e60     5A 95 02 F6 | 	mov	arg02, local08
17e64     48 F4 B0 FD | 	call	#__system___float_div
17e68     3D 93 02 F6 | 	mov	arg01, result1
17e6c     01 94 06 F6 | 	mov	arg02, #1
17e70     00 F7 B0 FD | 	call	#__system___float_tointeger
17e74     67 7B 52 FC | 	wrword	result1, local21
17e78     60 93 02 F6 | 	mov	arg01, local14
17e7c     1A 92 06 F1 | 	add	arg01, #26
17e80     49 01 5A FC | 	wrword	#256, arg01
17e84                 | LR__2017
17e84     60 93 02 F6 | 	mov	arg01, local14
17e88     1C 92 06 F1 | 	add	arg01, #28
17e8c     49 01 68 FC | 	wrlong	#0, arg01
17e90     60 93 02 F6 | 	mov	arg01, local14
17e94     20 92 06 F1 | 	add	arg01, #32
17e98     49 01 68 FC | 	wrlong	#0, arg01
17e9c                 | ' lpoke base2+28,$0000_0000
17e9c                 | ' lpoke base2+32,0 
17e9c                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
17e9c     08 BE 0E F2 | 	cmp	local13, #8 wz
17ea0     60 93 02 A6 |  if_e	mov	arg01, local14
17ea4     24 92 06 A1 |  if_e	add	arg01, #36
17ea8     49 01 68 AC |  if_e	wrlong	#0, arg01
17eac     20 00 90 AD |  if_e	jmp	#LR__2018
17eb0     60 93 02 F6 | 	mov	arg01, local14
17eb4     24 92 06 F1 | 	add	arg01, #36
17eb8     09 BE 66 F0 | 	shl	local13, #9
17ebc     32 B7 02 F6 | 	mov	local09, objptr
17ec0     0D 00 00 FF 
17ec4     D8 B6 06 F1 | 	add	local09, ##6872
17ec8     5B BF 02 F1 | 	add	local13, local09
17ecc     49 BF 62 FC | 	wrlong	local13, arg01
17ed0                 | LR__2018
17ed0     60 93 02 F6 | 	mov	arg01, local14
17ed4     28 92 06 F1 | 	add	arg01, #40
17ed8     49 C9 62 FC | 	wrlong	local18, arg01
17edc     2C C0 06 F1 | 	add	local14, #44
17ee0     60 93 02 F6 | 	mov	arg01, local14
17ee4     49 C5 62 FC | 	wrlong	local16, arg01
17ee8                 | ' lpoke base2+40,speed 
17ee8                 | ' lpoke base2+44,sus 
17ee8                 | ' if delay>0 then waitms(delay) 
17ee8     01 B8 56 F2 | 	cmps	local10, #1 wc
17eec     5C 93 02 36 |  if_ae	mov	arg01, local10
17ef0     DC CD B0 3D |  if_ae	call	#__system___waitms
17ef4     E7 F0 03 F6 | 	mov	ptra, fp
17ef8     F2 00 A0 FD | 	call	#popregs_
17efc                 | _do_play_ret
17efc     2D 00 64 FD | 	ret
17f00                 | 
17f00                 | ' 
17f00                 | ' '-------------------- plot
17f00                 | ' 
17f00                 | ' sub do_plot
17f00                 | _do_plot
17f00     01 CA 05 F6 | 	mov	COUNT_, #1
17f04     E8 00 A0 FD | 	call	#pushregs_
17f08     20 F0 07 F1 | 	add	ptra, #32
17f0c     98 57 BF FD | 	call	#_pop
17f10     3D 97 02 F6 | 	mov	arg03, result1
17f14     3E 95 02 F6 | 	mov	arg02, result2
17f18     3F 93 02 F6 | 	mov	arg01, result3
17f1c     0C CE 05 F1 | 	add	fp, #12
17f20     E7 96 62 FC | 	wrlong	arg03, fp
17f24     04 CE 05 F1 | 	add	fp, #4
17f28     E7 94 62 FC | 	wrlong	arg02, fp
17f2c     04 CE 05 F1 | 	add	fp, #4
17f30     E7 92 62 FC | 	wrlong	arg01, fp
17f34     14 CE 85 F1 | 	sub	fp, #20
17f38     6C 57 BF FD | 	call	#_pop
17f3c     3F 97 02 F6 | 	mov	arg03, result3
17f40     E7 7A 62 FC | 	wrlong	result1, fp
17f44     04 CE 05 F1 | 	add	fp, #4
17f48     E7 7C 62 FC | 	wrlong	result2, fp
17f4c     04 CE 05 F1 | 	add	fp, #4
17f50     E7 96 62 FC | 	wrlong	arg03, fp
17f54     08 CE 85 F1 | 	sub	fp, #8
17f58     E7 92 02 F6 | 	mov	arg01, fp
17f5c     24 59 BF FD | 	call	#_converttoint
17f60     3D A7 02 F6 | 	mov	local01, result1
17f64     E7 92 02 F6 | 	mov	arg01, fp
17f68     0C 92 06 F1 | 	add	arg01, #12
17f6c     14 59 BF FD | 	call	#_converttoint
17f70     3D 95 02 F6 | 	mov	arg02, result1
17f74     38 00 00 FF 
17f78     4C 64 06 F1 | 	add	objptr, ##28748
17f7c     32 A7 62 FC | 	wrlong	local01, objptr
17f80     04 64 06 F1 | 	add	objptr, #4
17f84     32 95 62 FC | 	wrlong	arg02, objptr
17f88     04 64 86 F1 | 	sub	objptr, #4
17f8c     32 93 02 FB | 	rdlong	arg01, objptr
17f90     04 64 86 F1 | 	sub	objptr, #4
17f94     32 97 02 FB | 	rdlong	arg03, objptr
17f98     38 00 00 FF 
17f9c     48 64 86 F1 | 	sub	objptr, ##28744
17fa0     1C A1 B0 FD | 	call	#_hg010b_spin2_putpixel
17fa4     E7 F0 03 F6 | 	mov	ptra, fp
17fa8     F2 00 A0 FD | 	call	#popregs_
17fac                 | _do_plot_ret
17fac     2D 00 64 FD | 	ret
17fb0                 | 
17fb0                 | ' 
17fb0                 | ' '-------------------- poke
17fb0                 | ' 
17fb0                 | ' sub do_poke
17fb0                 | _do_poke
17fb0     02 CA 05 F6 | 	mov	COUNT_, #2
17fb4     E8 00 A0 FD | 	call	#pushregs_
17fb8     20 F0 07 F1 | 	add	ptra, #32
17fbc     E8 56 BF FD | 	call	#_pop
17fc0     3D 95 02 F6 | 	mov	arg02, result1
17fc4     3E 93 02 F6 | 	mov	arg01, result2
17fc8     3F A7 02 F6 | 	mov	local01, result3
17fcc     E7 94 62 FC | 	wrlong	arg02, fp
17fd0     04 CE 05 F1 | 	add	fp, #4
17fd4     E7 92 62 FC | 	wrlong	arg01, fp
17fd8     04 CE 05 F1 | 	add	fp, #4
17fdc     E7 A6 62 FC | 	wrlong	local01, fp
17fe0     08 CE 85 F1 | 	sub	fp, #8
17fe4     C0 56 BF FD | 	call	#_pop
17fe8     3F A7 02 F6 | 	mov	local01, result3
17fec     0C CE 05 F1 | 	add	fp, #12
17ff0     E7 7A 62 FC | 	wrlong	result1, fp
17ff4     04 CE 05 F1 | 	add	fp, #4
17ff8     E7 7C 62 FC | 	wrlong	result2, fp
17ffc     04 CE 05 F1 | 	add	fp, #4
18000     E7 A6 62 FC | 	wrlong	local01, fp
18004     08 CE 85 F1 | 	sub	fp, #8
18008     E7 92 02 F6 | 	mov	arg01, fp
1800c     0C CE 85 F1 | 	sub	fp, #12
18010     70 58 BF FD | 	call	#_converttoint
18014     3D A7 02 F6 | 	mov	local01, result1
18018     E7 92 02 F6 | 	mov	arg01, fp
1801c     64 58 BF FD | 	call	#_converttoint
18020     3D A9 02 F6 | 	mov	local02, result1
18024                 | ' t1=pop() 'value
18024                 | ' t2=pop() 
18024                 | ' a=converttoint(t2) : v=converttoint(t1)
18024                 | ' if a<$80000 then poke a,v else pspoke a,v
18024     00 04 00 FF 
18028     00 A6 16 F2 | 	cmp	local01, ##524288 wc
1802c     53 A9 42 CC |  if_b	wrbyte	local02, local01
18030     53 93 02 36 |  if_ae	mov	arg01, local01
18034     54 95 02 36 |  if_ae	mov	arg02, local02
18038     50 92 B0 3D |  if_ae	call	#_pspoke
1803c     E7 F0 03 F6 | 	mov	ptra, fp
18040     F2 00 A0 FD | 	call	#popregs_
18044                 | _do_poke_ret
18044     2D 00 64 FD | 	ret
18048                 | 
18048                 | ' 
18048                 | ' '-------------------- pop
18048                 | ' 
18048                 | ' sub do_pop()
18048                 | _do_pop
18048                 | ' if gosubtop>0 then  gosubtop -=1 
18048     51 00 00 FF 
1804c     54 65 06 F1 | 	add	objptr, ##41812
18050     32 81 02 FB | 	rdlong	_var01, objptr
18054     51 00 00 FF 
18058     54 65 86 F1 | 	sub	objptr, ##41812
1805c     01 80 56 F2 | 	cmps	_var01, #1 wc
18060     51 00 00 3F 
18064     54 65 06 31 |  if_ae	add	objptr, ##41812
18068     32 81 02 3B |  if_ae	rdlong	_var01, objptr
1806c     01 80 86 31 |  if_ae	sub	_var01, #1
18070     32 81 62 3C |  if_ae	wrlong	_var01, objptr
18074     51 00 00 3F 
18078     54 65 86 31 |  if_ae	sub	objptr, ##41812
1807c                 | _do_pop_ret
1807c     2D 00 64 FD | 	ret
18080                 | 
18080                 | ' 
18080                 | ' '-------------------- position
18080                 | ' 
18080                 | ' sub do_position
18080                 | _do_position
18080     01 CA 05 F6 | 	mov	COUNT_, #1
18084     E8 00 A0 FD | 	call	#pushregs_
18088     18 F0 07 F1 | 	add	ptra, #24
1808c     18 56 BF FD | 	call	#_pop
18090     3D 95 02 F6 | 	mov	arg02, result1
18094     3E 93 02 F6 | 	mov	arg01, result2
18098     3F A7 02 F6 | 	mov	local01, result3
1809c     E7 94 62 FC | 	wrlong	arg02, fp
180a0     04 CE 05 F1 | 	add	fp, #4
180a4     E7 92 62 FC | 	wrlong	arg01, fp
180a8     04 CE 05 F1 | 	add	fp, #4
180ac     E7 A6 62 FC | 	wrlong	local01, fp
180b0     08 CE 85 F1 | 	sub	fp, #8
180b4     F0 55 BF FD | 	call	#_pop
180b8     3F A7 02 F6 | 	mov	local01, result3
180bc     0C CE 05 F1 | 	add	fp, #12
180c0     E7 7A 62 FC | 	wrlong	result1, fp
180c4     04 CE 05 F1 | 	add	fp, #4
180c8     E7 7C 62 FC | 	wrlong	result2, fp
180cc     04 CE 05 F1 | 	add	fp, #4
180d0     E7 A6 62 FC | 	wrlong	local01, fp
180d4     08 CE 85 F1 | 	sub	fp, #8
180d8     E7 92 02 F6 | 	mov	arg01, fp
180dc     0C CE 85 F1 | 	sub	fp, #12
180e0     A0 57 BF FD | 	call	#_converttoint
180e4     3D A7 02 F6 | 	mov	local01, result1
180e8     E7 92 02 F6 | 	mov	arg01, fp
180ec     94 57 BF FD | 	call	#_converttoint
180f0     3D 95 02 F6 | 	mov	arg02, result1
180f4     53 93 02 F6 | 	mov	arg01, local01
180f8     C4 AB B0 FD | 	call	#_hg010b_spin2_setcursorpos
180fc     E7 F0 03 F6 | 	mov	ptra, fp
18100     F2 00 A0 FD | 	call	#popregs_
18104                 | _do_position_ret
18104     2D 00 64 FD | 	ret
18108                 | 
18108                 | ' 
18108                 | ' '-------------------- print
18108                 | ' 
18108                 | ' sub do_print  
18108                 | _do_print
18108     0B CA 05 F6 | 	mov	COUNT_, #11
1810c     E8 00 A0 FD | 	call	#pushregs_
18110     00 AC 06 F6 | 	mov	local04, #0
18114     90 55 BF FD | 	call	#_pop
18118     3D AF 02 F6 | 	mov	local05, result1
1811c     3E B1 02 F6 | 	mov	local06, result2
18120     3F B3 02 F6 | 	mov	local07, result3
18124     57 A7 02 F6 | 	mov	local01, local05
18128     58 A9 02 F6 | 	mov	local02, local06
1812c     59 AB 02 F6 | 	mov	local03, local07
18130                 | '  
18130                 | ' r=0
18130                 | ' t1=pop() 
18130                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
18130     21 AA 0E F2 | 	cmp	local03, #33 wz
18134     22 AA 0E 52 |  if_ne	cmp	local03, #34 wz
18138     20 00 90 5D |  if_ne	jmp	#LR__2020
1813c     55 AD 02 F6 | 	mov	local04, local03
18140     64 55 BF FD | 	call	#_pop
18144     3D AF 02 F6 | 	mov	local05, result1
18148     3E B1 02 F6 | 	mov	local06, result2
1814c     3F B3 02 F6 | 	mov	local07, result3
18150     57 A7 02 F6 | 	mov	local01, local05
18154     58 A9 02 F6 | 	mov	local02, local06
18158     59 AB 02 F6 | 	mov	local03, local07
1815c                 | LR__2020
1815c                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
1815c     20 AA 0E F2 | 	cmp	local03, #32 wz
18160     55 AD 02 A6 |  if_e	mov	local04, local03
18164                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
18164     FF AA 0E F2 | 	cmp	local03, #255 wz
18168     10 00 90 5D |  if_ne	jmp	#LR__2021
1816c     53 93 02 F6 | 	mov	arg01, local01
18170     00 94 06 F6 | 	mov	arg02, #0
18174     E8 8E B0 FD | 	call	#_printerror
18178     D4 04 90 FD | 	jmp	#LR__2040
1817c                 | LR__2021
1817c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
1817c     2B AA 0E F2 | 	cmp	local03, #43 wz
18180     14 00 90 5D |  if_ne	jmp	#LR__2022
18184     53 93 02 F6 | 	mov	arg01, local01
18188     8C 56 BF FD | 	call	#_convertstring
1818c     3D AF 02 F6 | 	mov	local05, result1
18190     57 A7 02 F6 | 	mov	local01, local05
18194     1F AA 06 F6 | 	mov	local03, #31
18198                 | LR__2022
18198                 | ' 
18198                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
18198     2C AA 0E F2 | 	cmp	local03, #44 wz
1819c     80 00 90 5D |  if_ne	jmp	#LR__2023
181a0     00 92 06 F6 | 	mov	arg01, #0
181a4     B8 1D B1 FD | 	call	#__system___getiolock_0622
181a8     3D 93 02 F6 | 	mov	arg01, result1
181ac     2C C8 B0 FD | 	call	#__system___lockmem
181b0     98 01 00 FF 
181b4     BC 94 06 F6 | 	mov	arg02, ##@LR__6064
181b8     00 92 06 F6 | 	mov	arg01, #0
181bc     00 96 06 F6 | 	mov	arg03, #0
181c0     0C D5 B0 FD | 	call	#__system___basic_print_string
181c4     0A B4 06 F6 | 	mov	local08, #10
181c8     00 92 06 F6 | 	mov	arg01, #0
181cc     53 95 02 F6 | 	mov	arg02, local01
181d0     00 96 06 F6 | 	mov	arg03, #0
181d4     0A 98 06 F6 | 	mov	arg04, #10
181d8     38 D5 B0 FD | 	call	#__system___basic_print_integer
181dc     3D B7 02 F6 | 	mov	local09, result1
181e0     00 92 06 F6 | 	mov	arg01, #0
181e4     0A 94 06 F6 | 	mov	arg02, #10
181e8     00 96 06 F6 | 	mov	arg03, #0
181ec     88 D4 B0 FD | 	call	#__system___basic_print_char
181f0     01 B8 06 F6 | 	mov	local10, #1
181f4     00 92 06 F6 | 	mov	arg01, #0
181f8     64 1D B1 FD | 	call	#__system___getiolock_0622
181fc     3D 01 68 FC | 	wrlong	#0, result1
18200     00 BA 06 F6 | 	mov	local11, #0
18204     A0 54 BF FD | 	call	#_pop
18208     3D AF 02 F6 | 	mov	local05, result1
1820c     3E B1 02 F6 | 	mov	local06, result2
18210     3F B3 02 F6 | 	mov	local07, result3
18214     57 A7 02 F6 | 	mov	local01, local05
18218     58 A9 02 F6 | 	mov	local02, local06
1821c     59 AB 02 F6 | 	mov	local03, local07
18220                 | LR__2023
18220                 | ' 
18220                 | ' if r=print_mod_comma  then
18220     21 AC 0E F2 | 	cmp	local04, #33 wz
18224     AC 01 90 5D |  if_ne	jmp	#LR__2028
18228                 | '   if t1.result_type=result_int then print t1.result.iresult,
18228     1C AA 0E F2 | 	cmp	local03, #28 wz
1822c     64 00 90 5D |  if_ne	jmp	#LR__2024
18230     00 92 06 F6 | 	mov	arg01, #0
18234     28 1D B1 FD | 	call	#__system___getiolock_0622
18238     3D 93 02 F6 | 	mov	arg01, result1
1823c     9C C7 B0 FD | 	call	#__system___lockmem
18240     00 B0 06 F6 | 	mov	local06, #0
18244     00 92 06 F6 | 	mov	arg01, #0
18248     53 95 02 F6 | 	mov	arg02, local01
1824c     00 96 06 F6 | 	mov	arg03, #0
18250     0A 98 06 F6 | 	mov	arg04, #10
18254     BC D4 B0 FD | 	call	#__system___basic_print_integer
18258     3D B3 02 F6 | 	mov	local07, result1
1825c     58 AF 02 F6 | 	mov	local05, local06
18260     59 AF 02 F1 | 	add	local05, local07
18264     00 BA 06 F6 | 	mov	local11, #0
18268     00 92 06 F6 | 	mov	arg01, #0
1826c     09 94 06 F6 | 	mov	arg02, #9
18270     00 96 06 F6 | 	mov	arg03, #0
18274     00 D4 B0 FD | 	call	#__system___basic_print_char
18278     3D B7 02 F6 | 	mov	local09, result1
1827c     3D AF 02 F1 | 	add	local05, result1
18280     00 92 06 F6 | 	mov	arg01, #0
18284     D8 1C B1 FD | 	call	#__system___getiolock_0622
18288     3D 01 68 FC | 	wrlong	#0, result1
1828c     00 7A 06 F6 | 	mov	result1, #0
18290     00 B8 06 F6 | 	mov	local10, #0
18294                 | LR__2024
18294                 | '   if t1.result_type=result_uint then print t1.result.uresult,
18294     1D AA 0E F2 | 	cmp	local03, #29 wz
18298     64 00 90 5D |  if_ne	jmp	#LR__2025
1829c     00 92 06 F6 | 	mov	arg01, #0
182a0     BC 1C B1 FD | 	call	#__system___getiolock_0622
182a4     3D 93 02 F6 | 	mov	arg01, result1
182a8     30 C7 B0 FD | 	call	#__system___lockmem
182ac     00 B0 06 F6 | 	mov	local06, #0
182b0     00 92 06 F6 | 	mov	arg01, #0
182b4     53 95 02 F6 | 	mov	arg02, local01
182b8     00 96 06 F6 | 	mov	arg03, #0
182bc     0A 98 06 F6 | 	mov	arg04, #10
182c0     90 D4 B0 FD | 	call	#__system___basic_print_unsigned
182c4     3D B3 02 F6 | 	mov	local07, result1
182c8     58 AF 02 F6 | 	mov	local05, local06
182cc     59 AF 02 F1 | 	add	local05, local07
182d0     00 BA 06 F6 | 	mov	local11, #0
182d4     00 92 06 F6 | 	mov	arg01, #0
182d8     09 94 06 F6 | 	mov	arg02, #9
182dc     00 96 06 F6 | 	mov	arg03, #0
182e0     94 D3 B0 FD | 	call	#__system___basic_print_char
182e4     3D B7 02 F6 | 	mov	local09, result1
182e8     3D AF 02 F1 | 	add	local05, result1
182ec     00 92 06 F6 | 	mov	arg01, #0
182f0     6C 1C B1 FD | 	call	#__system___getiolock_0622
182f4     3D 01 68 FC | 	wrlong	#0, result1
182f8     00 7A 06 F6 | 	mov	result1, #0
182fc     00 B8 06 F6 | 	mov	local10, #0
18300                 | LR__2025
18300                 | '   if t1.result_type=result_float then print t1.result.fresult,
18300     1E AA 0E F2 | 	cmp	local03, #30 wz
18304     64 00 90 5D |  if_ne	jmp	#LR__2026
18308     00 92 06 F6 | 	mov	arg01, #0
1830c     50 1C B1 FD | 	call	#__system___getiolock_0622
18310     3D 93 02 F6 | 	mov	arg01, result1
18314     C4 C6 B0 FD | 	call	#__system___lockmem
18318     00 B0 06 F6 | 	mov	local06, #0
1831c     00 92 06 F6 | 	mov	arg01, #0
18320     53 95 02 F6 | 	mov	arg02, local01
18324     00 96 06 F6 | 	mov	arg03, #0
18328     23 98 06 F6 | 	mov	arg04, #35
1832c     A0 F3 B0 FD | 	call	#__system___basic_print_float
18330     3D B3 02 F6 | 	mov	local07, result1
18334     58 AF 02 F6 | 	mov	local05, local06
18338     59 AF 02 F1 | 	add	local05, local07
1833c     00 BA 06 F6 | 	mov	local11, #0
18340     00 92 06 F6 | 	mov	arg01, #0
18344     09 94 06 F6 | 	mov	arg02, #9
18348     00 96 06 F6 | 	mov	arg03, #0
1834c     28 D3 B0 FD | 	call	#__system___basic_print_char
18350     3D B7 02 F6 | 	mov	local09, result1
18354     3D AF 02 F1 | 	add	local05, result1
18358     00 92 06 F6 | 	mov	arg01, #0
1835c     00 1C B1 FD | 	call	#__system___getiolock_0622
18360     3D 01 68 FC | 	wrlong	#0, result1
18364     00 7A 06 F6 | 	mov	result1, #0
18368     00 B8 06 F6 | 	mov	local10, #0
1836c                 | LR__2026
1836c                 | '   if t1.result_type=result_string then print t1.result.sresult,
1836c     1F AA 0E F2 | 	cmp	local03, #31 wz
18370     60 00 90 5D |  if_ne	jmp	#LR__2027
18374     00 92 06 F6 | 	mov	arg01, #0
18378     E4 1B B1 FD | 	call	#__system___getiolock_0622
1837c     3D 93 02 F6 | 	mov	arg01, result1
18380     58 C6 B0 FD | 	call	#__system___lockmem
18384     00 B0 06 F6 | 	mov	local06, #0
18388     00 92 06 F6 | 	mov	arg01, #0
1838c     53 95 02 F6 | 	mov	arg02, local01
18390     00 96 06 F6 | 	mov	arg03, #0
18394     38 D3 B0 FD | 	call	#__system___basic_print_string
18398     3D B3 02 F6 | 	mov	local07, result1
1839c     58 AF 02 F6 | 	mov	local05, local06
183a0     59 AF 02 F1 | 	add	local05, local07
183a4     00 BA 06 F6 | 	mov	local11, #0
183a8     00 92 06 F6 | 	mov	arg01, #0
183ac     09 94 06 F6 | 	mov	arg02, #9
183b0     00 96 06 F6 | 	mov	arg03, #0
183b4     C0 D2 B0 FD | 	call	#__system___basic_print_char
183b8     3D B7 02 F6 | 	mov	local09, result1
183bc     3D AF 02 F1 | 	add	local05, result1
183c0     00 92 06 F6 | 	mov	arg01, #0
183c4     98 1B B1 FD | 	call	#__system___getiolock_0622
183c8     3D 01 68 FC | 	wrlong	#0, result1
183cc     00 7A 06 F6 | 	mov	result1, #0
183d0     00 B8 06 F6 | 	mov	local10, #0
183d4                 | LR__2027
183d4                 | LR__2028
183d4                 | ' if r=print_mod_semicolon then 
183d4     22 AC 0E F2 | 	cmp	local04, #34 wz
183d8     1C 01 90 5D |  if_ne	jmp	#LR__2033
183dc                 | '   if t1.result_type=result_int then print t1.result.iresult;
183dc     1C AA 0E F2 | 	cmp	local03, #28 wz
183e0     50 00 90 5D |  if_ne	jmp	#LR__2029
183e4     00 92 06 F6 | 	mov	arg01, #0
183e8     74 1B B1 FD | 	call	#__system___getiolock_0622
183ec     3D 93 02 F6 | 	mov	arg01, result1
183f0     E8 C5 B0 FD | 	call	#__system___lockmem
183f4     00 B0 06 F6 | 	mov	local06, #0
183f8     00 B8 06 F6 | 	mov	local10, #0
183fc     0A BA 06 F6 | 	mov	local11, #10
18400     00 92 06 F6 | 	mov	arg01, #0
18404     53 95 02 F6 | 	mov	arg02, local01
18408     00 96 06 F6 | 	mov	arg03, #0
1840c     0A 98 06 F6 | 	mov	arg04, #10
18410     00 D3 B0 FD | 	call	#__system___basic_print_integer
18414     3D B3 02 F6 | 	mov	local07, result1
18418     58 AF 02 F6 | 	mov	local05, local06
1841c     59 AF 02 F1 | 	add	local05, local07
18420     00 92 06 F6 | 	mov	arg01, #0
18424     38 1B B1 FD | 	call	#__system___getiolock_0622
18428     3D 01 68 FC | 	wrlong	#0, result1
1842c     00 7A 06 F6 | 	mov	result1, #0
18430     00 B6 06 F6 | 	mov	local09, #0
18434                 | LR__2029
18434                 | '   if t1.result_type=result_uint then print t1.result.uresult;
18434     1D AA 0E F2 | 	cmp	local03, #29 wz
18438     50 00 90 5D |  if_ne	jmp	#LR__2030
1843c     00 92 06 F6 | 	mov	arg01, #0
18440     1C 1B B1 FD | 	call	#__system___getiolock_0622
18444     3D 93 02 F6 | 	mov	arg01, result1
18448     90 C5 B0 FD | 	call	#__system___lockmem
1844c     00 B0 06 F6 | 	mov	local06, #0
18450     00 B8 06 F6 | 	mov	local10, #0
18454     0A BA 06 F6 | 	mov	local11, #10
18458     00 92 06 F6 | 	mov	arg01, #0
1845c     53 95 02 F6 | 	mov	arg02, local01
18460     00 96 06 F6 | 	mov	arg03, #0
18464     0A 98 06 F6 | 	mov	arg04, #10
18468     E8 D2 B0 FD | 	call	#__system___basic_print_unsigned
1846c     3D B3 02 F6 | 	mov	local07, result1
18470     58 AF 02 F6 | 	mov	local05, local06
18474     59 AF 02 F1 | 	add	local05, local07
18478     00 92 06 F6 | 	mov	arg01, #0
1847c     E0 1A B1 FD | 	call	#__system___getiolock_0622
18480     3D 01 68 FC | 	wrlong	#0, result1
18484     00 7A 06 F6 | 	mov	result1, #0
18488     00 B6 06 F6 | 	mov	local09, #0
1848c                 | LR__2030
1848c                 | '   if t1.result_type=result_float then print t1.result.fresult;
1848c     1E AA 0E F2 | 	cmp	local03, #30 wz
18490     30 00 90 5D |  if_ne	jmp	#LR__2031
18494     00 92 06 F6 | 	mov	arg01, #0
18498     C4 1A B1 FD | 	call	#__system___getiolock_0622
1849c     3D 93 02 F6 | 	mov	arg01, result1
184a0     38 C5 B0 FD | 	call	#__system___lockmem
184a4     00 92 06 F6 | 	mov	arg01, #0
184a8     53 95 02 F6 | 	mov	arg02, local01
184ac     00 96 06 F6 | 	mov	arg03, #0
184b0     23 98 06 F6 | 	mov	arg04, #35
184b4     18 F2 B0 FD | 	call	#__system___basic_print_float
184b8     00 92 06 F6 | 	mov	arg01, #0
184bc     A0 1A B1 FD | 	call	#__system___getiolock_0622
184c0     3D 01 68 FC | 	wrlong	#0, result1
184c4                 | LR__2031
184c4                 | '   if t1.result_type=result_string then print t1.result.sresult;
184c4     1F AA 0E F2 | 	cmp	local03, #31 wz
184c8     2C 00 90 5D |  if_ne	jmp	#LR__2032
184cc     00 92 06 F6 | 	mov	arg01, #0
184d0     8C 1A B1 FD | 	call	#__system___getiolock_0622
184d4     3D 93 02 F6 | 	mov	arg01, result1
184d8     00 C5 B0 FD | 	call	#__system___lockmem
184dc     00 92 06 F6 | 	mov	arg01, #0
184e0     53 95 02 F6 | 	mov	arg02, local01
184e4     00 96 06 F6 | 	mov	arg03, #0
184e8     E4 D1 B0 FD | 	call	#__system___basic_print_string
184ec     00 92 06 F6 | 	mov	arg01, #0
184f0     6C 1A B1 FD | 	call	#__system___getiolock_0622
184f4     3D 01 68 FC | 	wrlong	#0, result1
184f8                 | LR__2032
184f8                 | LR__2033
184f8                 | ' if r=0 then 
184f8     00 AC 0E F2 | 	cmp	local04, #0 wz
184fc     1C 01 90 5D |  if_ne	jmp	#LR__2038
18500                 | '   if t1.result_type=result_int then print t1.result.iresult
18500     1C AA 0E F2 | 	cmp	local03, #28 wz
18504     40 00 90 5D |  if_ne	jmp	#LR__2034
18508     00 92 06 F6 | 	mov	arg01, #0
1850c     50 1A B1 FD | 	call	#__system___getiolock_0622
18510     3D 93 02 F6 | 	mov	arg01, result1
18514     C4 C4 B0 FD | 	call	#__system___lockmem
18518     00 92 06 F6 | 	mov	arg01, #0
1851c     53 95 02 F6 | 	mov	arg02, local01
18520     00 96 06 F6 | 	mov	arg03, #0
18524     0A 98 06 F6 | 	mov	arg04, #10
18528     E8 D1 B0 FD | 	call	#__system___basic_print_integer
1852c     00 92 06 F6 | 	mov	arg01, #0
18530     0A 94 06 F6 | 	mov	arg02, #10
18534     00 96 06 F6 | 	mov	arg03, #0
18538     3C D1 B0 FD | 	call	#__system___basic_print_char
1853c     00 92 06 F6 | 	mov	arg01, #0
18540     1C 1A B1 FD | 	call	#__system___getiolock_0622
18544     3D 01 68 FC | 	wrlong	#0, result1
18548                 | LR__2034
18548                 | '   if t1.result_type=result_uint then print t1.result.uresult
18548     1D AA 0E F2 | 	cmp	local03, #29 wz
1854c     40 00 90 5D |  if_ne	jmp	#LR__2035
18550     00 92 06 F6 | 	mov	arg01, #0
18554     08 1A B1 FD | 	call	#__system___getiolock_0622
18558     3D 93 02 F6 | 	mov	arg01, result1
1855c     7C C4 B0 FD | 	call	#__system___lockmem
18560     00 92 06 F6 | 	mov	arg01, #0
18564     53 95 02 F6 | 	mov	arg02, local01
18568     00 96 06 F6 | 	mov	arg03, #0
1856c     0A 98 06 F6 | 	mov	arg04, #10
18570     E0 D1 B0 FD | 	call	#__system___basic_print_unsigned
18574     00 92 06 F6 | 	mov	arg01, #0
18578     0A 94 06 F6 | 	mov	arg02, #10
1857c     00 96 06 F6 | 	mov	arg03, #0
18580     F4 D0 B0 FD | 	call	#__system___basic_print_char
18584     00 92 06 F6 | 	mov	arg01, #0
18588     D4 19 B1 FD | 	call	#__system___getiolock_0622
1858c     3D 01 68 FC | 	wrlong	#0, result1
18590                 | LR__2035
18590                 | '   if t1.result_type=result_float then print t1.result.fresult
18590     1E AA 0E F2 | 	cmp	local03, #30 wz
18594     40 00 90 5D |  if_ne	jmp	#LR__2036
18598     00 92 06 F6 | 	mov	arg01, #0
1859c     C0 19 B1 FD | 	call	#__system___getiolock_0622
185a0     3D 93 02 F6 | 	mov	arg01, result1
185a4     34 C4 B0 FD | 	call	#__system___lockmem
185a8     00 92 06 F6 | 	mov	arg01, #0
185ac     53 95 02 F6 | 	mov	arg02, local01
185b0     00 96 06 F6 | 	mov	arg03, #0
185b4     23 98 06 F6 | 	mov	arg04, #35
185b8     14 F1 B0 FD | 	call	#__system___basic_print_float
185bc     00 92 06 F6 | 	mov	arg01, #0
185c0     0A 94 06 F6 | 	mov	arg02, #10
185c4     00 96 06 F6 | 	mov	arg03, #0
185c8     AC D0 B0 FD | 	call	#__system___basic_print_char
185cc     00 92 06 F6 | 	mov	arg01, #0
185d0     8C 19 B1 FD | 	call	#__system___getiolock_0622
185d4     3D 01 68 FC | 	wrlong	#0, result1
185d8                 | LR__2036
185d8                 | '   if t1.result_type=result_string then print t1.result.sresult
185d8     1F AA 0E F2 | 	cmp	local03, #31 wz
185dc     3C 00 90 5D |  if_ne	jmp	#LR__2037
185e0     00 92 06 F6 | 	mov	arg01, #0
185e4     78 19 B1 FD | 	call	#__system___getiolock_0622
185e8     3D 93 02 F6 | 	mov	arg01, result1
185ec     EC C3 B0 FD | 	call	#__system___lockmem
185f0     00 92 06 F6 | 	mov	arg01, #0
185f4     53 95 02 F6 | 	mov	arg02, local01
185f8     00 96 06 F6 | 	mov	arg03, #0
185fc     D0 D0 B0 FD | 	call	#__system___basic_print_string
18600     00 92 06 F6 | 	mov	arg01, #0
18604     0A 94 06 F6 | 	mov	arg02, #10
18608     00 96 06 F6 | 	mov	arg03, #0
1860c     68 D0 B0 FD | 	call	#__system___basic_print_char
18610     00 92 06 F6 | 	mov	arg01, #0
18614     48 19 B1 FD | 	call	#__system___getiolock_0622
18618     3D 01 68 FC | 	wrlong	#0, result1
1861c                 | LR__2037
1861c                 | LR__2038
1861c                 | ' if r=print_mod_empty then print
1861c     20 AC 0E F2 | 	cmp	local04, #32 wz
18620     2C 00 90 5D |  if_ne	jmp	#LR__2039
18624     00 92 06 F6 | 	mov	arg01, #0
18628     34 19 B1 FD | 	call	#__system___getiolock_0622
1862c     3D 93 02 F6 | 	mov	arg01, result1
18630     A8 C3 B0 FD | 	call	#__system___lockmem
18634     00 92 06 F6 | 	mov	arg01, #0
18638     0A 94 06 F6 | 	mov	arg02, #10
1863c     00 96 06 F6 | 	mov	arg03, #0
18640     34 D0 B0 FD | 	call	#__system___basic_print_char
18644     00 92 06 F6 | 	mov	arg01, #0
18648     14 19 B1 FD | 	call	#__system___getiolock_0622
1864c     3D 01 68 FC | 	wrlong	#0, result1
18650                 | LR__2039
18650                 | LR__2040
18650     E7 F0 03 F6 | 	mov	ptra, fp
18654     F2 00 A0 FD | 	call	#popregs_
18658                 | _do_print_ret
18658     2D 00 64 FD | 	ret
1865c                 | 
1865c                 | ' 
1865c                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
1865c                 | ' 
1865c                 | ' sub do_push
1865c                 | _do_push
1865c                 | ' if stackpointer<maxstack then 
1865c     44 00 00 FF 
18660     78 64 06 F1 | 	add	objptr, ##34936
18664     32 81 02 FB | 	rdlong	_var01, objptr
18668     44 00 00 FF 
1866c     78 64 86 F1 | 	sub	objptr, ##34936
18670     01 00 00 FF 
18674     00 80 56 F2 | 	cmps	_var01, ##512 wc
18678     F8 00 90 3D |  if_ae	jmp	#LR__2050
1867c     4B 00 00 FF 
18680     A0 64 06 F1 | 	add	objptr, ##38560
18684     32 83 02 FB | 	rdlong	_var02, objptr
18688     41 85 02 F6 | 	mov	_var03, _var02
1868c     01 84 66 F0 | 	shl	_var03, #1
18690     41 85 02 F1 | 	add	_var03, _var02
18694     02 84 66 F0 | 	shl	_var03, #2
18698     03 00 00 FF 
1869c     04 64 86 F1 | 	sub	objptr, ##1540
186a0     32 85 02 F1 | 	add	_var03, objptr
186a4     42 81 02 FB | 	rdlong	_var01, _var03
186a8     04 84 06 F1 | 	add	_var03, #4
186ac     42 87 02 FB | 	rdlong	_var04, _var03
186b0     41 85 02 F6 | 	mov	_var03, _var02
186b4     01 84 66 F0 | 	shl	_var03, #1
186b8     41 85 02 F1 | 	add	_var03, _var02
186bc     02 84 66 F0 | 	shl	_var03, #2
186c0     32 85 02 F1 | 	add	_var03, objptr
186c4     08 84 06 F1 | 	add	_var03, #8
186c8     42 83 02 FB | 	rdlong	_var02, _var03
186cc     04 00 00 FF 
186d0     24 64 86 F1 | 	sub	objptr, ##2084
186d4     32 85 02 FB | 	rdlong	_var03, objptr
186d8     42 89 02 F6 | 	mov	_var05, _var03
186dc     01 88 66 F0 | 	shl	_var05, #1
186e0     42 89 02 F1 | 	add	_var05, _var03
186e4     02 88 66 F0 | 	shl	_var05, #2
186e8     0C 00 00 FF 
186ec     0C 64 86 F1 | 	sub	objptr, ##6156
186f0     32 89 02 F1 | 	add	_var05, objptr
186f4     44 81 62 FC | 	wrlong	_var01, _var05
186f8     0C 00 00 FF 
186fc     0C 64 06 F1 | 	add	objptr, ##6156
18700     32 89 02 FB | 	rdlong	_var05, objptr
18704     44 85 02 F6 | 	mov	_var03, _var05
18708     01 84 66 F0 | 	shl	_var03, #1
1870c     44 85 02 F1 | 	add	_var03, _var05
18710     02 84 66 F0 | 	shl	_var03, #2
18714     0C 00 00 FF 
18718     0C 64 86 F1 | 	sub	objptr, ##6156
1871c     32 85 02 F1 | 	add	_var03, objptr
18720     04 84 06 F1 | 	add	_var03, #4
18724     42 87 62 FC | 	wrlong	_var04, _var03
18728     0C 00 00 FF 
1872c     0C 64 06 F1 | 	add	objptr, ##6156
18730     32 89 02 FB | 	rdlong	_var05, objptr
18734     44 87 02 F6 | 	mov	_var04, _var05
18738     01 86 66 F0 | 	shl	_var04, #1
1873c     44 87 02 F1 | 	add	_var04, _var05
18740     02 86 66 F0 | 	shl	_var04, #2
18744     0C 00 00 FF 
18748     0C 64 86 F1 | 	sub	objptr, ##6156
1874c     32 87 02 F1 | 	add	_var04, objptr
18750     08 86 06 F1 | 	add	_var04, #8
18754     43 83 62 FC | 	wrlong	_var02, _var04
18758     0C 00 00 FF 
1875c     0C 64 06 F1 | 	add	objptr, ##6156
18760     32 81 02 FB | 	rdlong	_var01, objptr
18764     01 80 06 F1 | 	add	_var01, #1
18768     32 81 62 FC | 	wrlong	_var01, objptr
1876c     44 00 00 FF 
18770     78 64 86 F1 | 	sub	objptr, ##34936
18774                 | LR__2050
18774                 | _do_push_ret
18774     2D 00 64 FD | 	ret
18778                 | 
18778                 | ' 
18778                 | ' '-------------------- put
18778                 | ' 
18778                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
18778                 | _do_put
18778     07 CA 05 F6 | 	mov	COUNT_, #7
1877c     E8 00 A0 FD | 	call	#pushregs_
18780     28 F0 07 F1 | 	add	ptra, #40
18784     4B 00 00 FF 
18788     A0 64 06 F1 | 	add	objptr, ##38560
1878c     32 9B 02 FB | 	rdlong	arg05, objptr
18790     4D 99 02 F6 | 	mov	arg04, arg05
18794     01 98 66 F0 | 	shl	arg04, #1
18798     4D 99 02 F1 | 	add	arg04, arg05
1879c     02 98 66 F0 | 	shl	arg04, #2
187a0     03 00 00 FF 
187a4     04 64 86 F1 | 	sub	objptr, ##1540
187a8     32 99 02 F1 | 	add	arg04, objptr
187ac     4C A7 02 FB | 	rdlong	local01, arg04
187b0                 | ' 
187b0                 | ' numpar=compiledline(lineptr_e).result.uresult
187b0                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
187b0     04 A6 0E F2 | 	cmp	local01, #4 wz
187b4     48 00 00 FF 
187b8     9C 64 86 F1 | 	sub	objptr, ##37020
187bc     48 00 90 5D |  if_ne	jmp	#LR__2060
187c0     E4 4E BF FD | 	call	#_pop
187c4     3F 9B 02 F6 | 	mov	arg05, result3
187c8     1C CE 05 F1 | 	add	fp, #28
187cc     E7 7A 62 FC | 	wrlong	result1, fp
187d0     04 CE 05 F1 | 	add	fp, #4
187d4     E7 7C 62 FC | 	wrlong	result2, fp
187d8     04 CE 05 F1 | 	add	fp, #4
187dc     E7 9A 62 FC | 	wrlong	arg05, fp
187e0     08 CE 85 F1 | 	sub	fp, #8
187e4     E7 92 02 F6 | 	mov	arg01, fp
187e8     1C CE 85 F1 | 	sub	fp, #28
187ec     94 50 BF FD | 	call	#_converttoint
187f0     53 00 00 FF 
187f4     64 65 06 F1 | 	add	objptr, ##42852
187f8     32 7B 62 FC | 	wrlong	result1, objptr
187fc     53 00 00 FF 
18800     64 65 86 F1 | 	sub	objptr, ##42852
18804     18 00 90 FD | 	jmp	#LR__2061
18808                 | LR__2060
18808     53 00 00 FF 
1880c     64 65 06 F1 | 	add	objptr, ##42852
18810     FF FF FF FF 
18814     32 FF 6B FC | 	wrlong	##-1, objptr
18818     53 00 00 FF 
1881c     64 65 86 F1 | 	sub	objptr, ##42852
18820                 | LR__2061
18820                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
18820     03 A6 56 F2 | 	cmps	local01, #3 wc
18824     38 00 90 CD |  if_b	jmp	#LR__2062
18828     7C 4E BF FD | 	call	#_pop
1882c     3F 9B 02 F6 | 	mov	arg05, result3
18830     1C CE 05 F1 | 	add	fp, #28
18834     E7 7A 62 FC | 	wrlong	result1, fp
18838     04 CE 05 F1 | 	add	fp, #4
1883c     E7 7C 62 FC | 	wrlong	result2, fp
18840     04 CE 05 F1 | 	add	fp, #4
18844     E7 9A 62 FC | 	wrlong	arg05, fp
18848     08 CE 85 F1 | 	sub	fp, #8
1884c     E7 92 02 F6 | 	mov	arg01, fp
18850     1C CE 85 F1 | 	sub	fp, #28
18854     2C 50 BF FD | 	call	#_converttoint
18858     3D A9 02 F6 | 	mov	local02, result1
1885c     04 00 90 FD | 	jmp	#LR__2063
18860                 | LR__2062
18860     01 A8 06 F6 | 	mov	local02, #1
18864                 | LR__2063
18864                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
18864     02 A6 56 F2 | 	cmps	local01, #2 wc
18868     34 00 90 CD |  if_b	jmp	#LR__2064
1886c     38 4E BF FD | 	call	#_pop
18870     3F A7 02 F6 | 	mov	local01, result3
18874     1C CE 05 F1 | 	add	fp, #28
18878     E7 7A 62 FC | 	wrlong	result1, fp
1887c     04 CE 05 F1 | 	add	fp, #4
18880     E7 7C 62 FC | 	wrlong	result2, fp
18884     04 CE 05 F1 | 	add	fp, #4
18888     E7 A6 62 FC | 	wrlong	local01, fp
1888c     08 CE 85 F1 | 	sub	fp, #8
18890     E7 92 02 F6 | 	mov	arg01, fp
18894     1C CE 85 F1 | 	sub	fp, #28
18898     E8 4F BF FD | 	call	#_converttoint
1889c     3D AB 02 F6 | 	mov	local03, result1
188a0                 | LR__2064
188a0     04 4E BF FD | 	call	#_pop
188a4     3F A7 02 F6 | 	mov	local01, result3
188a8     1C CE 05 F1 | 	add	fp, #28
188ac     E7 7A 62 FC | 	wrlong	result1, fp
188b0     04 CE 05 F1 | 	add	fp, #4
188b4     E7 7C 62 FC | 	wrlong	result2, fp
188b8     04 CE 05 F1 | 	add	fp, #4
188bc     E7 A6 62 FC | 	wrlong	local01, fp
188c0     08 CE 85 F1 | 	sub	fp, #8
188c4     E7 92 02 F6 | 	mov	arg01, fp
188c8     1C CE 85 F1 | 	sub	fp, #28
188cc     B4 4F BF FD | 	call	#_converttoint
188d0     3D AD 02 F6 | 	mov	local04, result1
188d4     02 AE 66 F0 | 	shl	local05, #2
188d8     51 00 00 FF 
188dc     E4 64 06 F1 | 	add	objptr, ##41700
188e0     32 AF 02 F1 | 	add	local05, objptr
188e4     57 01 68 FC | 	wrlong	#0, local05
188e8                 | ' t1=pop() : channel=converttoint(t1)
188e8                 | ' getres(j)=0
188e8                 | ' if pos>=0 then
188e8     02 00 00 FF 
188ec     80 64 06 F1 | 	add	objptr, ##1152
188f0     32 B1 02 FB | 	rdlong	local06, objptr
188f4     53 00 00 FF 
188f8     64 65 86 F1 | 	sub	objptr, ##42852
188fc     00 B0 56 F2 | 	cmps	local06, #0 wc
18900     08 01 90 CD |  if_b	jmp	#LR__2070
18904     00 B2 06 F6 | 	mov	local07, #0
18908                 | '    i=0: do
18908                 | LR__2065
18908     00 AE 06 F6 | 	mov	local05, #0
1890c                 | '    j=0: do    
1890c                 | LR__2066
1890c                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
1890c     00 04 00 FF 
18910     00 AA 56 F2 | 	cmps	local03, ##524288 wc
18914     34 00 90 3D |  if_ae	jmp	#LR__2067
18918     57 B1 02 F6 | 	mov	local06, local05
1891c     32 A7 02 F6 | 	mov	local01, objptr
18920     4F 00 00 FF 
18924     D4 A6 06 F1 | 	add	local01, ##40660
18928     53 B1 02 F1 | 	add	local06, local01
1892c     55 93 02 F6 | 	mov	arg01, local03
18930     59 A7 02 F6 | 	mov	local01, local07
18934     0A A6 66 F0 | 	shl	local01, #10
18938     53 93 02 F1 | 	add	arg01, local01
1893c     57 93 02 F1 | 	add	arg01, local05
18940     49 7B C2 FA | 	rdbyte	result1, arg01
18944     58 7B 42 FC | 	wrbyte	result1, local06
18948     30 00 90 FD | 	jmp	#LR__2068
1894c                 | LR__2067
1894c     57 B1 02 F6 | 	mov	local06, local05
18950     32 A7 02 F6 | 	mov	local01, objptr
18954     4F 00 00 FF 
18958     D4 A6 06 F1 | 	add	local01, ##40660
1895c     53 B1 02 F1 | 	add	local06, local01
18960     55 93 02 F6 | 	mov	arg01, local03
18964     59 A7 02 F6 | 	mov	local01, local07
18968     0A A6 66 F0 | 	shl	local01, #10
1896c     53 93 02 F1 | 	add	arg01, local01
18970     57 93 02 F1 | 	add	arg01, local05
18974     5C 89 B0 FD | 	call	#_pspeek
18978     58 7B 42 FC | 	wrbyte	result1, local06
1897c                 | LR__2068
1897c     01 AE 06 F1 | 	add	local05, #1
18980     02 00 00 FF 
18984     00 AE 56 F2 | 	cmps	local05, ##1024 wc
18988     14 00 90 3D |  if_ae	jmp	#LR__2069
1898c     59 B1 02 F6 | 	mov	local06, local07
18990     0A B0 66 F0 | 	shl	local06, #10
18994     57 B1 02 F1 | 	add	local06, local05
18998     54 B1 5A F2 | 	cmps	local06, local02 wcz
1899c     6C FF 9F ED |  if_be	jmp	#LR__2066
189a0                 | LR__2069
189a0                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
189a0     53 00 00 FF 
189a4     64 65 06 F1 | 	add	objptr, ##42852
189a8     32 95 02 FB | 	rdlong	arg02, objptr
189ac     01 94 06 F1 | 	add	arg02, #1
189b0     04 00 00 FF 
189b4     90 64 86 F1 | 	sub	objptr, ##2192
189b8     32 97 02 F6 | 	mov	arg03, objptr
189bc     4F 00 00 FF 
189c0     D4 64 86 F1 | 	sub	objptr, ##40660
189c4     54 99 02 F6 | 	mov	arg04, local02
189c8     56 93 02 F6 | 	mov	arg01, local04
189cc     01 9A 06 F6 | 	mov	arg05, #1
189d0     0C CE B0 FD | 	call	#__system___basic_put
189d4     56 B1 02 F6 | 	mov	local06, local04
189d8     02 B0 66 F0 | 	shl	local06, #2
189dc     32 A7 02 F6 | 	mov	local01, objptr
189e0     51 00 00 FF 
189e4     E4 A6 06 F1 | 	add	local01, ##41700
189e8     53 B1 02 F1 | 	add	local06, local01
189ec     58 7B 62 FC | 	wrlong	result1, local06
189f0                 | '    if 1024*i+j>amount then exit loop
189f0     59 B1 02 F6 | 	mov	local06, local07
189f4     0A B0 66 F0 | 	shl	local06, #10
189f8     57 B1 02 F1 | 	add	local06, local05
189fc     54 B1 5A F2 | 	cmps	local06, local02 wcz
18a00     F8 00 90 1D |  if_a	jmp	#LR__2076
18a04     01 B2 06 F1 | 	add	local07, #1
18a08     FC FE 9F FD | 	jmp	#LR__2065
18a0c                 | LR__2070
18a0c     00 B2 06 F6 | 	mov	local07, #0
18a10                 | '    i=0: do
18a10                 | LR__2071
18a10     00 AE 06 F6 | 	mov	local05, #0
18a14                 | '    j=0: do  
18a14                 | LR__2072
18a14                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
18a14     00 04 00 FF 
18a18     00 AA 56 F2 | 	cmps	local03, ##524288 wc
18a1c     34 00 90 3D |  if_ae	jmp	#LR__2073
18a20     57 B1 02 F6 | 	mov	local06, local05
18a24     32 A7 02 F6 | 	mov	local01, objptr
18a28     4F 00 00 FF 
18a2c     D4 A6 06 F1 | 	add	local01, ##40660
18a30     53 B1 02 F1 | 	add	local06, local01
18a34     55 93 02 F6 | 	mov	arg01, local03
18a38     59 A7 02 F6 | 	mov	local01, local07
18a3c     0A A6 66 F0 | 	shl	local01, #10
18a40     53 93 02 F1 | 	add	arg01, local01
18a44     57 93 02 F1 | 	add	arg01, local05
18a48     49 7B C2 FA | 	rdbyte	result1, arg01
18a4c     58 7B 42 FC | 	wrbyte	result1, local06
18a50     30 00 90 FD | 	jmp	#LR__2074
18a54                 | LR__2073
18a54     57 B1 02 F6 | 	mov	local06, local05
18a58     32 A7 02 F6 | 	mov	local01, objptr
18a5c     4F 00 00 FF 
18a60     D4 A6 06 F1 | 	add	local01, ##40660
18a64     53 B1 02 F1 | 	add	local06, local01
18a68     55 93 02 F6 | 	mov	arg01, local03
18a6c     59 A7 02 F6 | 	mov	local01, local07
18a70     0A A6 66 F0 | 	shl	local01, #10
18a74     53 93 02 F1 | 	add	arg01, local01
18a78     57 93 02 F1 | 	add	arg01, local05
18a7c     54 88 B0 FD | 	call	#_pspeek
18a80     58 7B 42 FC | 	wrbyte	result1, local06
18a84                 | LR__2074
18a84     01 AE 06 F1 | 	add	local05, #1
18a88     02 00 00 FF 
18a8c     00 AE 56 F2 | 	cmps	local05, ##1024 wc
18a90     14 00 90 3D |  if_ae	jmp	#LR__2075
18a94     59 B1 02 F6 | 	mov	local06, local07
18a98     0A B0 66 F0 | 	shl	local06, #10
18a9c     57 B1 02 F1 | 	add	local06, local05
18aa0     54 B1 5A F2 | 	cmps	local06, local02 wcz
18aa4     6C FF 9F ED |  if_be	jmp	#LR__2072
18aa8                 | LR__2075
18aa8                 | '    put #channel,,block(0),amount, r : getres(channel)=r
18aa8     32 97 02 F6 | 	mov	arg03, objptr
18aac     4F 00 00 FF 
18ab0     D4 96 06 F1 | 	add	arg03, ##40660
18ab4     54 99 02 F6 | 	mov	arg04, local02
18ab8     56 93 02 F6 | 	mov	arg01, local04
18abc     00 94 06 F6 | 	mov	arg02, #0
18ac0     01 9A 06 F6 | 	mov	arg05, #1
18ac4     18 CD B0 FD | 	call	#__system___basic_put
18ac8     56 B1 02 F6 | 	mov	local06, local04
18acc     02 B0 66 F0 | 	shl	local06, #2
18ad0     32 A7 02 F6 | 	mov	local01, objptr
18ad4     51 00 00 FF 
18ad8     E4 A6 06 F1 | 	add	local01, ##41700
18adc     53 B1 02 F1 | 	add	local06, local01
18ae0     58 7B 62 FC | 	wrlong	result1, local06
18ae4                 | '    if 1024*i+j>amount then exit loop
18ae4     59 B1 02 F6 | 	mov	local06, local07
18ae8     0A B0 66 F0 | 	shl	local06, #10
18aec     57 B1 02 F1 | 	add	local06, local05
18af0     54 B1 5A F2 | 	cmps	local06, local02 wcz
18af4     01 B2 06 E1 |  if_be	add	local07, #1
18af8     14 FF 9F ED |  if_be	jmp	#LR__2071
18afc                 | LR__2076
18afc     E7 F0 03 F6 | 	mov	ptra, fp
18b00     F2 00 A0 FD | 	call	#popregs_
18b04                 | _do_put_ret
18b04     2D 00 64 FD | 	ret
18b08                 | 
18b08                 | ' 
18b08                 | ' '-------------------- rad
18b08                 | ' 
18b08                 | ' sub do_rad
18b08                 | _do_rad
18b08     53 00 00 FF 
18b0c     00 65 06 F1 | 	add	objptr, ##42752
18b10     00 C0 9F FF 
18b14     32 01 68 FC | 	wrlong	##1065353216, objptr
18b18     04 64 06 F1 | 	add	objptr, #4
18b1c     00 C0 9F FF 
18b20     32 01 68 FC | 	wrlong	##1065353216, objptr
18b24     53 00 00 FF 
18b28     04 65 86 F1 | 	sub	objptr, ##42756
18b2c                 | _do_rad_ret
18b2c     2D 00 64 FD | 	ret
18b30                 | 
18b30                 | ' 
18b30                 | ' '-------------------- rdpin
18b30                 | ' 
18b30                 | ' sub do_rdpin
18b30                 | _do_rdpin
18b30     00 CA 05 F6 | 	mov	COUNT_, #0
18b34     E8 00 A0 FD | 	call	#pushregs_
18b38     0C F0 07 F1 | 	add	ptra, #12
18b3c     68 4B BF FD | 	call	#_pop
18b40     E7 7A 62 FC | 	wrlong	result1, fp
18b44     04 CE 05 F1 | 	add	fp, #4
18b48     E7 7C 62 FC | 	wrlong	result2, fp
18b4c     04 CE 05 F1 | 	add	fp, #4
18b50     E7 7E 62 FC | 	wrlong	result3, fp
18b54     08 CE 85 F1 | 	sub	fp, #8
18b58     E7 92 02 F6 | 	mov	arg01, fp
18b5c     24 4D BF FD | 	call	#_converttoint
18b60     3D 7B 8A FA | 	rdpin	result1, result1
18b64     53 00 00 FF 
18b68     68 65 06 F1 | 	add	objptr, ##42856
18b6c     32 7B 62 FC | 	wrlong	result1, objptr
18b70     53 00 00 FF 
18b74     68 65 86 F1 | 	sub	objptr, ##42856
18b78     08 CE 05 F1 | 	add	fp, #8
18b7c     E7 3A 68 FC | 	wrlong	#29, fp
18b80     08 CE 85 F1 | 	sub	fp, #8
18b84     E7 08 68 FC | 	wrlong	#4, fp
18b88     E7 92 02 F6 | 	mov	arg01, fp
18b8c     A8 4B BF FD | 	call	#_push
18b90     E7 F0 03 F6 | 	mov	ptra, fp
18b94     F2 00 A0 FD | 	call	#popregs_
18b98                 | _do_rdpin_ret
18b98     2D 00 64 FD | 	ret
18b9c                 | 
18b9c                 | ' 
18b9c                 | ' ' ----------------  read
18b9c                 | ' 
18b9c                 | ' function read_next_line() as string
18b9c                 | _read_next_line
18b9c     07 CA 05 F6 | 	mov	COUNT_, #7
18ba0     E8 00 A0 FD | 	call	#pushregs_
18ba4                 | ' if dataptr=$7FFFFFFF then return("")
18ba4     51 00 00 FF 
18ba8     4C 65 06 F1 | 	add	objptr, ##41804
18bac     32 A7 02 FB | 	rdlong	local01, objptr
18bb0     51 00 00 FF 
18bb4     4C 65 86 F1 | 	sub	objptr, ##41804
18bb8     FF FF 3F FF 
18bbc     FF A7 0E F2 | 	cmp	local01, ##2147483647 wz
18bc0     98 01 00 AF 
18bc4     E3 7A 06 A6 |  if_e	mov	result1, ##@LR__6065
18bc8     C0 01 90 AD |  if_e	jmp	#LR__2087
18bcc                 | ' do
18bcc                 | LR__2080
18bcc     32 93 02 F6 | 	mov	arg01, objptr
18bd0     51 00 00 FF 
18bd4     28 93 06 F1 | 	add	arg01, ##41768
18bd8     51 00 00 FF 
18bdc     4C 65 06 F1 | 	add	objptr, ##41804
18be0     32 95 02 FB | 	rdlong	arg02, objptr
18be4     24 96 06 F6 | 	mov	arg03, #36
18be8     46 00 00 FF 
18bec     80 64 86 F1 | 	sub	objptr, ##35968
18bf0     C8 B1 B0 FD | 	call	#_psram_spin2_read1
18bf4                 | '  ' print dataptr
18bf4                 | '   psram.read1(varptr(dataheader),dataptr,36) 
18bf4                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
18bf4     46 00 00 FF 
18bf8     5C 64 06 F1 | 	add	objptr, ##35932
18bfc     32 A7 02 FB | 	rdlong	local01, objptr
18c00     51 00 00 FF 
18c04     28 65 86 F1 | 	sub	objptr, ##41768
18c08     FF FF 7F FF 
18c0c     FF A7 0E F2 | 	cmp	local01, ##-1 wz
18c10     51 00 00 5F 
18c14     3C 65 06 51 |  if_ne	add	objptr, ##41788
18c18     32 A7 02 5B |  if_ne	rdlong	local01, objptr
18c1c     10 64 06 51 |  if_ne	add	objptr, #16
18c20     32 A7 62 5C |  if_ne	wrlong	local01, objptr
18c24     51 00 00 5F 
18c28     4C 65 86 51 |  if_ne	sub	objptr, ##41804
18c2c     51 00 00 FF 
18c30     3C 65 06 F1 | 	add	objptr, ##41788
18c34     32 A7 02 FB | 	rdlong	local01, objptr
18c38     51 00 00 FF 
18c3c     3C 65 86 F1 | 	sub	objptr, ##41788
18c40     FF FF 3F FF 
18c44     FF A7 0E F2 | 	cmp	local01, ##2147483647 wz
18c48     51 00 00 5F 
18c4c     28 65 06 51 |  if_ne	add	objptr, ##41768
18c50     32 A9 02 5B |  if_ne	rdlong	local02, objptr
18c54     51 00 00 5F 
18c58     28 65 86 51 |  if_ne	sub	objptr, ##41768
18c5c     FF FF 7F 5F 
18c60     FF A9 0E 52 |  if_ne	cmp	local02, ##-1 wz
18c64     51 00 00 5F 
18c68     48 65 06 51 |  if_ne	add	objptr, ##41800
18c6c     32 AB 02 5B |  if_ne	rdlong	local03, objptr
18c70     51 00 00 5F 
18c74     48 65 86 51 |  if_ne	sub	objptr, ##41800
18c78     B7 AA 0E 52 |  if_ne	cmp	local03, #183 wz
18c7c     4C FF 9F 5D |  if_ne	jmp	#LR__2080
18c80                 | ' if dataheader(8)=token_data then 
18c80     51 00 00 FF 
18c84     48 65 06 F1 | 	add	objptr, ##41800
18c88     32 A7 02 FB | 	rdlong	local01, objptr
18c8c     51 00 00 FF 
18c90     48 65 86 F1 | 	sub	objptr, ##41800
18c94     B7 A6 0E F2 | 	cmp	local01, #183 wz
18c98     E0 00 90 5D |  if_ne	jmp	#LR__2085
18c9c     51 00 00 FF 
18ca0     30 65 06 F1 | 	add	objptr, ##41776
18ca4     32 A7 02 FB | 	rdlong	local01, objptr
18ca8     02 00 00 FF 
18cac     18 64 06 F1 | 	add	objptr, ##1048
18cb0     32 A7 62 FC | 	wrlong	local01, objptr
18cb4     02 00 00 FF 
18cb8     14 64 86 F1 | 	sub	objptr, ##1044
18cbc     32 AD 02 FB | 	rdlong	local04, objptr
18cc0     02 00 00 FF 
18cc4     0C 64 06 F1 | 	add	objptr, ##1036
18cc8     32 AD 62 FC | 	wrlong	local04, objptr
18ccc                 | '  'print "data found at line "; dataheader(0)
18ccc                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
18ccc     00 AE 06 F6 | 	mov	local05, #0
18cd0     53 00 00 FF 
18cd4     40 65 86 F1 | 	sub	objptr, ##42816
18cd8                 | LR__2081
18cd8     56 AF 52 F2 | 	cmps	local05, local04 wc
18cdc     3C 00 90 3D |  if_ae	jmp	#LR__2082
18ce0     53 00 00 FF 
18ce4     48 65 06 F1 | 	add	objptr, ##42824
18ce8     32 93 02 FB | 	rdlong	arg01, objptr
18cec     53 00 00 FF 
18cf0     48 65 86 F1 | 	sub	objptr, ##42824
18cf4     57 93 02 F1 | 	add	arg01, local05
18cf8     D8 85 B0 FD | 	call	#_pspeek
18cfc     3D 93 E2 F8 | 	getbyte	arg01, result1, #0
18d00     44 D7 B0 FD | 	call	#__system__Chr_S
18d04     3D 95 02 F6 | 	mov	arg02, result1
18d08     58 93 02 F6 | 	mov	arg01, local06
18d0c     28 BD B0 FD | 	call	#__system___string_concat
18d10     3D B1 02 F6 | 	mov	local06, result1
18d14     01 AE 06 F1 | 	add	local05, #1
18d18     BC FF 9F FD | 	jmp	#LR__2081
18d1c                 | LR__2082
18d1c     98 01 00 FF 
18d20     E4 96 06 F6 | 	mov	arg03, ##@LR__6066
18d24     01 92 06 F6 | 	mov	arg01, #1
18d28     58 95 02 F6 | 	mov	arg02, local06
18d2c     9C DA B0 FD | 	call	#__system__Instr
18d30     3D AF 02 F6 | 	mov	local05, result1
18d34     58 93 02 F6 | 	mov	arg01, local06
18d38     49 B3 02 F6 | 	mov	local07, arg01
18d3c     D7 06 48 FB | 	callpa	#(@LR__2084-@LR__2083)>>2,fcache_load_ptr_
18d40                 | LR__2083
18d40     59 7B CA FA | 	rdbyte	result1, local07 wz
18d44     01 B2 06 51 |  if_ne	add	local07, #1
18d48     F4 FF 9F 5D |  if_ne	jmp	#LR__2083
18d4c                 | LR__2084
18d4c     49 B3 82 F1 | 	sub	local07, arg01
18d50     59 95 02 F6 | 	mov	arg02, local07
18d54     57 95 82 F1 | 	sub	arg02, local05
18d58     04 94 86 F1 | 	sub	arg02, #4
18d5c     58 93 02 F6 | 	mov	arg01, local06
18d60     A8 D5 B0 FD | 	call	#__system__Right_S
18d64     3D 93 02 F6 | 	mov	arg01, result1
18d68     A8 D9 B0 FD | 	call	#__system__RTrim_S
18d6c     3D 93 02 F6 | 	mov	arg01, result1
18d70     E0 D8 B0 FD | 	call	#__system__LTrim_S
18d74     3D B1 02 F6 | 	mov	local06, result1
18d78     0C 00 90 FD | 	jmp	#LR__2086
18d7c                 | LR__2085
18d7c                 | '   return ("") 'todo proper err
18d7c     98 01 00 FF 
18d80     E9 7A 06 F6 | 	mov	result1, ##@LR__6067
18d84     04 00 90 FD | 	jmp	#LR__2087
18d88                 | LR__2086
18d88                 | ' return readline
18d88     58 7B 02 F6 | 	mov	result1, local06
18d8c                 | LR__2087
18d8c     E7 F0 03 F6 | 	mov	ptra, fp
18d90     F2 00 A0 FD | 	call	#popregs_
18d94                 | _read_next_line_ret
18d94     2D 00 64 FD | 	ret
18d98                 | 
18d98                 | ' 
18d98                 | ' sub do_read
18d98                 | _do_read
18d98     17 CA 05 F6 | 	mov	COUNT_, #23
18d9c     E8 00 A0 FD | 	call	#pushregs_
18da0     58 F1 07 F1 | 	add	ptra, #344
18da4     4B 00 00 FF 
18da8     A0 64 06 F1 | 	add	objptr, ##38560
18dac     32 AD 02 FB | 	rdlong	local04, objptr
18db0     56 AF 02 F6 | 	mov	local05, local04
18db4     01 AE 66 F0 | 	shl	local05, #1
18db8     56 AF 02 F1 | 	add	local05, local04
18dbc     02 AE 66 F0 | 	shl	local05, #2
18dc0     03 00 00 FF 
18dc4     04 64 86 F1 | 	sub	objptr, ##1540
18dc8     32 B1 02 F6 | 	mov	local06, objptr
18dcc     32 AF 02 F1 | 	add	local05, objptr
18dd0     57 B3 02 FB | 	rdlong	local07, local05
18dd4                 | ' 
18dd4                 | ' 
18dd4                 | ' numpar=compiledline(lineptr_e).result.uresult
18dd4                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
18dd4     01 B2 16 F2 | 	cmp	local07, #1 wc
18dd8     48 00 00 FF 
18ddc     9C 64 86 F1 | 	sub	objptr, ##37020
18de0     08 00 90 CD |  if_b	jmp	#LR__2090
18de4     41 B2 16 F2 | 	cmp	local07, #65 wc
18de8     50 00 90 CD |  if_b	jmp	#LR__2091
18dec                 | LR__2090
18dec     00 92 06 F6 | 	mov	arg01, #0
18df0     6C 11 B1 FD | 	call	#__system___getiolock_0622
18df4     3D 93 02 F6 | 	mov	arg01, result1
18df8     E0 BB B0 FD | 	call	#__system___lockmem
18dfc     98 01 00 FF 
18e00     EA 94 06 F6 | 	mov	arg02, ##@LR__6068
18e04     00 92 06 F6 | 	mov	arg01, #0
18e08     00 96 06 F6 | 	mov	arg03, #0
18e0c     C0 C8 B0 FD | 	call	#__system___basic_print_string
18e10     00 92 06 F6 | 	mov	arg01, #0
18e14     48 11 B1 FD | 	call	#__system___getiolock_0622
18e18     3D 01 68 FC | 	wrlong	#0, result1
18e1c     51 00 00 FF 
18e20     10 65 06 F1 | 	add	objptr, ##41744
18e24     32 95 02 FB | 	rdlong	arg02, objptr
18e28     51 00 00 FF 
18e2c     10 65 86 F1 | 	sub	objptr, ##41744
18e30     27 92 06 F6 | 	mov	arg01, #39
18e34     28 82 B0 FD | 	call	#_printerror
18e38     A8 09 90 FD | 	jmp	#LR__2138
18e3c                 | LR__2091
18e3c                 | ' i=numpar-1
18e3c                 | ' if readline="" then readline=read_next_line() ': print readline
18e3c     53 00 00 FF 
18e40     34 65 06 F1 | 	add	objptr, ##42804
18e44     32 93 02 FB | 	rdlong	arg01, objptr
18e48     53 00 00 FF 
18e4c     34 65 86 F1 | 	sub	objptr, ##42804
18e50     98 01 00 FF 
18e54     F4 94 06 F6 | 	mov	arg02, ##@LR__6069
18e58     A8 BB B0 FD | 	call	#__system___string_cmp
18e5c     00 7A 0E F2 | 	cmp	result1, #0 wz
18e60     18 00 90 5D |  if_ne	jmp	#LR__2092
18e64     34 FD BF FD | 	call	#_read_next_line
18e68     53 00 00 FF 
18e6c     34 65 06 F1 | 	add	objptr, ##42804
18e70     32 7B 62 FC | 	wrlong	result1, objptr
18e74     53 00 00 FF 
18e78     34 65 86 F1 | 	sub	objptr, ##42804
18e7c                 | LR__2092
18e7c                 | ' if readline="" then printerror(55,runheader(0)) :return
18e7c     53 00 00 FF 
18e80     34 65 06 F1 | 	add	objptr, ##42804
18e84     32 93 02 FB | 	rdlong	arg01, objptr
18e88     53 00 00 FF 
18e8c     34 65 86 F1 | 	sub	objptr, ##42804
18e90     98 01 00 FF 
18e94     F5 94 06 F6 | 	mov	arg02, ##@LR__6070
18e98     68 BB B0 FD | 	call	#__system___string_cmp
18e9c     00 7A 0E F2 | 	cmp	result1, #0 wz
18ea0     20 00 90 5D |  if_ne	jmp	#LR__2093
18ea4     51 00 00 FF 
18ea8     10 65 06 F1 | 	add	objptr, ##41744
18eac     32 95 02 FB | 	rdlong	arg02, objptr
18eb0     51 00 00 FF 
18eb4     10 65 86 F1 | 	sub	objptr, ##41744
18eb8     37 92 06 F6 | 	mov	arg01, #55
18ebc     A0 81 B0 FD | 	call	#_printerror
18ec0     20 09 90 FD | 	jmp	#LR__2138
18ec4                 | LR__2093
18ec4     00 B4 06 F6 | 	mov	local08, #0
18ec8     59 B7 02 F6 | 	mov	local09, local07
18ecc     01 B6 86 F1 | 	sub	local09, #1
18ed0                 | ' j=0
18ed0                 | ' i=numpar-1
18ed0                 | ' do
18ed0                 | LR__2094
18ed0                 | '   do
18ed0                 | LR__2095
18ed0     53 00 00 FF 
18ed4     34 65 06 F1 | 	add	objptr, ##42804
18ed8     32 95 02 FB | 	rdlong	arg02, objptr
18edc     53 00 00 FF 
18ee0     34 65 86 F1 | 	sub	objptr, ##42804
18ee4     98 01 00 FF 
18ee8     F6 96 06 F6 | 	mov	arg03, ##@LR__6071
18eec     01 92 06 F6 | 	mov	arg01, #1
18ef0     D8 D8 B0 FD | 	call	#__system__Instr
18ef4     3D 97 02 F6 | 	mov	arg03, result1
18ef8                 | '     comma=instr(1,readline,"'") : if comma>0 then readline=left$(readline,comma-1) ' allows comments in data
18ef8     01 96 16 F2 | 	cmp	arg03, #1 wc
18efc     34 00 90 CD |  if_b	jmp	#LR__2096
18f00     53 00 00 FF 
18f04     34 65 06 F1 | 	add	objptr, ##42804
18f08     32 93 02 FB | 	rdlong	arg01, objptr
18f0c     53 00 00 FF 
18f10     34 65 86 F1 | 	sub	objptr, ##42804
18f14     01 96 86 F1 | 	sub	arg03, #1
18f18     4B 95 02 F6 | 	mov	arg02, arg03
18f1c     64 D3 B0 FD | 	call	#__system__Left_S
18f20     53 00 00 FF 
18f24     34 65 06 F1 | 	add	objptr, ##42804
18f28     32 7B 62 FC | 	wrlong	result1, objptr
18f2c     53 00 00 FF 
18f30     34 65 86 F1 | 	sub	objptr, ##42804
18f34                 | LR__2096
18f34     53 00 00 FF 
18f38     34 65 06 F1 | 	add	objptr, ##42804
18f3c     32 95 02 FB | 	rdlong	arg02, objptr
18f40     53 00 00 FF 
18f44     34 65 86 F1 | 	sub	objptr, ##42804
18f48     98 01 00 FF 
18f4c     F8 96 06 F6 | 	mov	arg03, ##@LR__6072
18f50     01 92 06 F6 | 	mov	arg01, #1
18f54     74 D8 B0 FD | 	call	#__system__Instr
18f58     3D B9 02 F6 | 	mov	local10, result1
18f5c                 | '     comma=instr(1,readline,",")  
18f5c                 | '       if comma>0  then 
18f5c     01 B8 16 F2 | 	cmp	local10, #1 wc
18f60     7C 00 90 CD |  if_b	jmp	#LR__2099
18f64     53 00 00 FF 
18f68     34 65 06 F1 | 	add	objptr, ##42804
18f6c     32 93 02 FB | 	rdlong	arg01, objptr
18f70     53 00 00 FF 
18f74     34 65 86 F1 | 	sub	objptr, ##42804
18f78     5C 95 02 F6 | 	mov	arg02, local10
18f7c     01 94 86 F1 | 	sub	arg02, #1
18f80     00 D3 B0 FD | 	call	#__system__Left_S
18f84     3D BB 02 F6 | 	mov	local11, result1
18f88     53 00 00 FF 
18f8c     34 65 06 F1 | 	add	objptr, ##42804
18f90     32 B1 02 FB | 	rdlong	local06, objptr
18f94     53 00 00 FF 
18f98     34 65 86 F1 | 	sub	objptr, ##42804
18f9c     58 93 02 F6 | 	mov	arg01, local06
18fa0     49 BD 02 F6 | 	mov	local12, arg01
18fa4     D7 06 48 FB | 	callpa	#(@LR__2098-@LR__2097)>>2,fcache_load_ptr_
18fa8                 | LR__2097
18fa8     5E 7B CA FA | 	rdbyte	result1, local12 wz
18fac     01 BC 06 51 |  if_ne	add	local12, #1
18fb0     F4 FF 9F 5D |  if_ne	jmp	#LR__2097
18fb4                 | LR__2098
18fb4     49 BD 82 F1 | 	sub	local12, arg01
18fb8     5E 95 02 F6 | 	mov	arg02, local12
18fbc     5C 95 82 F1 | 	sub	arg02, local10
18fc0     58 93 02 F6 | 	mov	arg01, local06
18fc4     44 D3 B0 FD | 	call	#__system__Right_S
18fc8     53 00 00 FF 
18fcc     34 65 06 F1 | 	add	objptr, ##42804
18fd0     32 7B 62 FC | 	wrlong	result1, objptr
18fd4     53 00 00 FF 
18fd8     34 65 86 F1 | 	sub	objptr, ##42804
18fdc     40 00 90 FD | 	jmp	#LR__2100
18fe0                 | LR__2099
18fe0     53 00 00 FF 
18fe4     34 65 06 F1 | 	add	objptr, ##42804
18fe8     32 93 02 FB | 	rdlong	arg01, objptr
18fec     53 00 00 FF 
18ff0     34 65 86 F1 | 	sub	objptr, ##42804
18ff4     1C D7 B0 FD | 	call	#__system__RTrim_S
18ff8     3D 93 02 F6 | 	mov	arg01, result1
18ffc     54 D6 B0 FD | 	call	#__system__LTrim_S
19000     3D BB 02 F6 | 	mov	local11, result1
19004     98 01 00 FF 
19008     FA BE 06 F6 | 	mov	local13, ##@LR__6073
1900c     53 00 00 FF 
19010     34 65 06 F1 | 	add	objptr, ##42804
19014     32 BF 62 FC | 	wrlong	local13, objptr
19018     53 00 00 FF 
1901c     34 65 86 F1 | 	sub	objptr, ##42804
19020                 | LR__2100
19020                 | '      
19020                 | '      if part$<>"" then j=j+1
19020     98 01 00 FF 
19024     FB 94 06 F6 | 	mov	arg02, ##@LR__6074
19028     5D 93 02 F6 | 	mov	arg01, local11
1902c     D4 B9 B0 FD | 	call	#__system___string_cmp
19030     00 7A 0E F2 | 	cmp	result1, #0 wz
19034     01 B4 06 51 |  if_ne	add	local08, #1
19038     5B 97 02 F6 | 	mov	arg03, local09
1903c     02 96 66 F0 | 	shl	arg03, #2
19040     E7 AC 02 F6 | 	mov	local04, fp
19044     2C AC 06 F1 | 	add	local04, #44
19048     56 97 02 F1 | 	add	arg03, local04
1904c     4B BB 62 FC | 	wrlong	local11, arg03
19050     01 B6 86 F1 | 	sub	local09, #1
19054                 | '      args(i)=part$  
19054                 | '      i=i-1
19054                 | '     if readline="" then readline=read_next_line() 
19054     53 00 00 FF 
19058     34 65 06 F1 | 	add	objptr, ##42804
1905c     32 93 02 FB | 	rdlong	arg01, objptr
19060     53 00 00 FF 
19064     34 65 86 F1 | 	sub	objptr, ##42804
19068     98 01 00 FF 
1906c     FC 94 06 F6 | 	mov	arg02, ##@LR__6075
19070     90 B9 B0 FD | 	call	#__system___string_cmp
19074     00 7A 0E F2 | 	cmp	result1, #0 wz
19078     18 00 90 5D |  if_ne	jmp	#LR__2101
1907c     1C FB BF FD | 	call	#_read_next_line
19080     53 00 00 FF 
19084     34 65 06 F1 | 	add	objptr, ##42804
19088     32 7B 62 FC | 	wrlong	result1, objptr
1908c     53 00 00 FF 
19090     34 65 86 F1 | 	sub	objptr, ##42804
19094                 | LR__2101
19094     00 B6 56 F2 | 	cmps	local09, #0 wc
19098     28 00 90 CD |  if_b	jmp	#LR__2102
1909c     53 00 00 FF 
190a0     34 65 06 F1 | 	add	objptr, ##42804
190a4     32 93 02 FB | 	rdlong	arg01, objptr
190a8     53 00 00 FF 
190ac     34 65 86 F1 | 	sub	objptr, ##42804
190b0     98 01 00 FF 
190b4     FD 94 06 F6 | 	mov	arg02, ##@LR__6076
190b8     48 B9 B0 FD | 	call	#__system___string_cmp
190bc     00 7A 0E F2 | 	cmp	result1, #0 wz
190c0     0C FE 9F 5D |  if_ne	jmp	#LR__2095
190c4                 | LR__2102
190c4     00 B6 56 F2 | 	cmps	local09, #0 wc
190c8     04 FE 9F 3D |  if_ae	jmp	#LR__2094
190cc                 | ' if j<numpar then printerror(55,runheader(0))
190cc     59 B5 52 F2 | 	cmps	local08, local07 wc
190d0     51 00 00 CF 
190d4     10 65 06 C1 |  if_b	add	objptr, ##41744
190d8     32 95 02 CB |  if_b	rdlong	arg02, objptr
190dc     51 00 00 CF 
190e0     10 65 86 C1 |  if_b	sub	objptr, ##41744
190e4     37 92 06 C6 |  if_b	mov	arg01, #55
190e8     74 7F B0 CD |  if_b	call	#_printerror
190ec                 | ' 
190ec                 | ' for i=0 to numpar-1
190ec     00 B6 06 F6 | 	mov	local09, #0
190f0     59 C1 02 F6 | 	mov	local14, local07
190f4                 | LR__2103
190f4     60 B7 52 F2 | 	cmps	local09, local14 wc
190f8     E8 06 90 3D |  if_ae	jmp	#LR__2137
190fc                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
190fc     5B AF 02 F6 | 	mov	local05, local09
19100     02 AE 66 F0 | 	shl	local05, #2
19104     E7 B0 02 F6 | 	mov	local06, fp
19108     2C B0 06 F1 | 	add	local06, #44
1910c     58 AF 02 F1 | 	add	local05, local06
19110     57 93 02 FB | 	rdlong	arg01, local05
19114     74 D9 BE FD | 	call	#_isnum
19118     3D BF 02 F6 | 	mov	local13, result1
1911c     5B C3 02 F6 | 	mov	local15, local09
19120     02 C2 66 F0 | 	shl	local15, #2
19124     E7 C4 02 F6 | 	mov	local16, fp
19128     2C C4 06 F1 | 	add	local16, #44
1912c     62 C3 02 F1 | 	add	local15, local16
19130     61 93 02 FB | 	rdlong	arg01, local15
19134     40 DD BE FD | 	call	#_isint
19138     07 7A 66 F7 | 	signx	result1, #7
1913c     3D BF 2A F5 | 	andn	local13, result1 wz
19140     53 00 00 5F 
19144     68 65 06 51 |  if_ne	add	objptr, ##42856
19148     32 3D 68 5C |  if_ne	wrlong	#30, objptr
1914c     53 00 00 5F 
19150     68 65 86 51 |  if_ne	sub	objptr, ##42856
19154                 | '   if isint(args(i)) then r=result_int 
19154     5B AD 02 F6 | 	mov	local04, local09
19158     02 AC 66 F0 | 	shl	local04, #2
1915c     E7 AE 02 F6 | 	mov	local05, fp
19160     2C AE 06 F1 | 	add	local05, #44
19164     57 AD 02 F1 | 	add	local04, local05
19168     56 93 02 FB | 	rdlong	arg01, local04
1916c     08 DD BE FD | 	call	#_isint
19170     00 7A 0E F2 | 	cmp	result1, #0 wz
19174     53 00 00 5F 
19178     68 65 06 51 |  if_ne	add	objptr, ##42856
1917c     32 39 68 5C |  if_ne	wrlong	#28, objptr
19180     53 00 00 5F 
19184     68 65 86 51 |  if_ne	sub	objptr, ##42856
19188                 | '   if isdec(args(i)) then r=result_uint 
19188     5B AD 02 F6 | 	mov	local04, local09
1918c     02 AC 66 F0 | 	shl	local04, #2
19190     E7 AE 02 F6 | 	mov	local05, fp
19194     2C AE 06 F1 | 	add	local05, #44
19198     57 AD 02 F1 | 	add	local04, local05
1919c     56 93 02 FB | 	rdlong	arg01, local04
191a0     78 DF BE FD | 	call	#_isdec
191a4     00 7A 0E F2 | 	cmp	result1, #0 wz
191a8     53 00 00 5F 
191ac     68 65 06 51 |  if_ne	add	objptr, ##42856
191b0     32 3B 68 5C |  if_ne	wrlong	#29, objptr
191b4     53 00 00 5F 
191b8     68 65 86 51 |  if_ne	sub	objptr, ##42856
191bc                 | '   if not isnum(args(i)) then 
191bc     5B AF 02 F6 | 	mov	local05, local09
191c0     02 AE 66 F0 | 	shl	local05, #2
191c4     E7 B0 02 F6 | 	mov	local06, fp
191c8     2C B0 06 F1 | 	add	local06, #44
191cc     58 AF 02 F1 | 	add	local05, local06
191d0     57 93 02 FB | 	rdlong	arg01, local05
191d4     B4 D8 BE FD | 	call	#_isnum
191d8     07 7A 66 F7 | 	signx	result1, #7
191dc     3D 7B 22 F6 | 	not	result1, result1
191e0     00 7A 0E F2 | 	cmp	result1, #0 wz
191e4     FC 00 90 AD |  if_e	jmp	#LR__2108
191e8     53 00 00 FF 
191ec     68 65 06 F1 | 	add	objptr, ##42856
191f0     32 57 68 FC | 	wrlong	#43, objptr
191f4     53 00 00 FF 
191f8     68 65 86 F1 | 	sub	objptr, ##42856
191fc     5B AD 02 F6 | 	mov	local04, local09
19200     02 AC 66 F0 | 	shl	local04, #2
19204     E7 AE 02 F6 | 	mov	local05, fp
19208     2C AE 06 F1 | 	add	local05, #44
1920c     57 AD 02 F1 | 	add	local04, local05
19210     56 93 02 FB | 	rdlong	arg01, local04
19214     49 BD 02 F6 | 	mov	local12, arg01
19218     D7 06 48 FB | 	callpa	#(@LR__2105-@LR__2104)>>2,fcache_load_ptr_
1921c                 | LR__2104
1921c     5E 7B CA FA | 	rdbyte	result1, local12 wz
19220     01 BC 06 51 |  if_ne	add	local12, #1
19224     F4 FF 9F 5D |  if_ne	jmp	#LR__2104
19228                 | LR__2105
19228     49 BD 82 F1 | 	sub	local12, arg01
1922c     5E C7 02 F6 | 	mov	local17, local12
19230     53 00 00 FF 
19234     F0 64 06 F1 | 	add	objptr, ##42736
19238     32 93 02 FB | 	rdlong	arg01, objptr
1923c     63 93 82 F1 | 	sub	arg01, local17
19240     04 92 86 F1 | 	sub	arg01, #4
19244     03 92 26 F5 | 	andn	arg01, #3
19248     32 93 62 FC | 	wrlong	arg01, objptr
1924c     53 00 00 FF 
19250     F0 64 86 F1 | 	sub	objptr, ##42736
19254     63 95 02 F6 | 	mov	arg02, local17
19258     A0 7F B0 FD | 	call	#_pslpoke
1925c                 | '     pslpoke memtop,l
1925c                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
1925c     01 B4 06 F6 | 	mov	local08, #1
19260     63 C9 02 F6 | 	mov	local18, local17
19264     01 C8 06 F1 | 	add	local18, #1
19268                 | LR__2106
19268     64 B5 52 F2 | 	cmps	local08, local18 wc
1926c     60 00 90 3D |  if_ae	jmp	#LR__2107
19270     53 00 00 FF 
19274     F0 64 06 F1 | 	add	objptr, ##42736
19278     32 BF 02 FB | 	rdlong	local13, objptr
1927c     53 00 00 FF 
19280     F0 64 86 F1 | 	sub	objptr, ##42736
19284     03 BE 06 F1 | 	add	local13, #3
19288     5A BF 02 F1 | 	add	local13, local08
1928c     5B C3 02 F6 | 	mov	local15, local09
19290     02 C2 66 F0 | 	shl	local15, #2
19294     E7 C4 02 F6 | 	mov	local16, fp
19298     2C C4 06 F1 | 	add	local16, #44
1929c     62 C3 02 F1 | 	add	local15, local16
192a0     61 93 02 FB | 	rdlong	arg01, local15
192a4     5A B1 02 F6 | 	mov	local06, local08
192a8     01 C2 06 F6 | 	mov	local15, #1
192ac     58 95 02 F6 | 	mov	arg02, local06
192b0     01 96 06 F6 | 	mov	arg03, #1
192b4     E4 D0 B0 FD | 	call	#__system__Mid_S
192b8     3D AF 02 F6 | 	mov	local05, result1
192bc     57 95 C2 FA | 	rdbyte	arg02, local05
192c0     5F 93 02 F6 | 	mov	arg01, local13
192c4     C4 7F B0 FD | 	call	#_pspoke
192c8     01 B4 06 F1 | 	add	local08, #1
192cc     98 FF 9F FD | 	jmp	#LR__2106
192d0                 | LR__2107
192d0     53 00 00 FF 
192d4     F0 64 06 F1 | 	add	objptr, ##42736
192d8     32 CB 02 FB | 	rdlong	local19, objptr
192dc     53 00 00 FF 
192e0     F0 64 86 F1 | 	sub	objptr, ##42736
192e4                 | LR__2108
192e4     C0 43 BF FD | 	call	#_pop
192e8     3E CD 02 F6 | 	mov	local20, result2
192ec     3F AD 02 F6 | 	mov	local04, result3
192f0     3D A7 02 F6 | 	mov	local01, result1
192f4     66 A9 02 F6 | 	mov	local02, local20
192f8     56 AB 02 F6 | 	mov	local03, local04
192fc                 | '   t1=pop() 
192fc                 | '   if i>=numpar-j then
192fc     59 BF 02 F6 | 	mov	local13, local07
19300     5A BF 82 F1 | 	sub	local13, local08
19304     5F B7 52 F2 | 	cmps	local09, local13 wc
19308     D0 04 90 CD |  if_b	jmp	#LR__2136
1930c     54 CF 02 F6 | 	mov	local21, local02
19310                 | '     vartype=t1.result.twowords(1)
19310                 | '     select case vartype
19310     67 D1 0A F6 | 	mov	local22, local21 wz
19314     64 00 90 AD |  if_e	jmp	#LR__2109
19318     00 D1 0E F2 | 	cmp	local22, #256 wz
1931c     64 00 90 AD |  if_e	jmp	#LR__2110
19320     01 D1 0E F2 | 	cmp	local22, #257 wz
19324     64 00 90 AD |  if_e	jmp	#LR__2111
19328     02 D1 0E F2 | 	cmp	local22, #258 wz
1932c     64 00 90 AD |  if_e	jmp	#LR__2112
19330     03 D1 0E F2 | 	cmp	local22, #259 wz
19334     64 00 90 AD |  if_e	jmp	#LR__2113
19338     04 D1 0E F2 | 	cmp	local22, #260 wz
1933c     64 00 90 AD |  if_e	jmp	#LR__2114
19340     05 D1 0E F2 | 	cmp	local22, #261 wz
19344     64 00 90 AD |  if_e	jmp	#LR__2115
19348     06 D1 0E F2 | 	cmp	local22, #262 wz
1934c     64 00 90 AD |  if_e	jmp	#LR__2116
19350     07 D1 0E F2 | 	cmp	local22, #263 wz
19354     64 00 90 AD |  if_e	jmp	#LR__2117
19358     08 D1 0E F2 | 	cmp	local22, #264 wz
1935c     64 00 90 AD |  if_e	jmp	#LR__2118
19360     09 D1 0E F2 | 	cmp	local22, #265 wz
19364     64 00 90 AD |  if_e	jmp	#LR__2119
19368     0A D1 0E F2 | 	cmp	local22, #266 wz
1936c     64 00 90 AD |  if_e	jmp	#LR__2120
19370     0B D1 0E F2 | 	cmp	local22, #267 wz
19374     64 00 90 AD |  if_e	jmp	#LR__2121
19378     68 00 90 FD | 	jmp	#LR__2122
1937c                 | LR__2109
1937c     0C D2 06 F6 | 	mov	local23, #12
19380     64 00 90 FD | 	jmp	#LR__2123
19384                 | LR__2110
19384     0C D2 06 F6 | 	mov	local23, #12
19388     5C 00 90 FD | 	jmp	#LR__2123
1938c                 | LR__2111
1938c     01 D2 06 F6 | 	mov	local23, #1
19390     54 00 90 FD | 	jmp	#LR__2123
19394                 | LR__2112
19394     01 D2 06 F6 | 	mov	local23, #1
19398     4C 00 90 FD | 	jmp	#LR__2123
1939c                 | LR__2113
1939c     02 D2 06 F6 | 	mov	local23, #2
193a0     44 00 90 FD | 	jmp	#LR__2123
193a4                 | LR__2114
193a4     02 D2 06 F6 | 	mov	local23, #2
193a8     3C 00 90 FD | 	jmp	#LR__2123
193ac                 | LR__2115
193ac     04 D2 06 F6 | 	mov	local23, #4
193b0     34 00 90 FD | 	jmp	#LR__2123
193b4                 | LR__2116
193b4     04 D2 06 F6 | 	mov	local23, #4
193b8     2C 00 90 FD | 	jmp	#LR__2123
193bc                 | LR__2117
193bc     08 D2 06 F6 | 	mov	local23, #8
193c0     24 00 90 FD | 	jmp	#LR__2123
193c4                 | LR__2118
193c4     08 D2 06 F6 | 	mov	local23, #8
193c8     1C 00 90 FD | 	jmp	#LR__2123
193cc                 | LR__2119
193cc     06 D2 06 F6 | 	mov	local23, #6
193d0     14 00 90 FD | 	jmp	#LR__2123
193d4                 | LR__2120
193d4     08 D2 06 F6 | 	mov	local23, #8
193d8     0C 00 90 FD | 	jmp	#LR__2123
193dc                 | LR__2121
193dc     05 D2 06 F6 | 	mov	local23, #5
193e0     04 00 90 FD | 	jmp	#LR__2123
193e4                 | LR__2122
193e4     0C D2 06 F6 | 	mov	local23, #12
193e8                 | LR__2123
193e8                 | '     if esize=12 andalso t1.result.uresult<$80000 then
193e8     0C D2 0E F2 | 	cmp	local23, #12 wz
193ec     34 01 90 5D |  if_ne	jmp	#LR__2127
193f0     00 04 00 FF 
193f4     00 A6 16 F2 | 	cmp	local01, ##524288 wc
193f8     28 01 90 3D |  if_ae	jmp	#LR__2127
193fc                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
193fc     53 00 00 FF 
19400     68 65 06 F1 | 	add	objptr, ##42856
19404     32 BF 02 FB | 	rdlong	local13, objptr
19408     53 00 00 FF 
1940c     68 65 86 F1 | 	sub	objptr, ##42856
19410     1C BE 0E F2 | 	cmp	local13, #28 wz
19414     2C 00 90 5D |  if_ne	jmp	#LR__2124
19418     5B AF 02 F6 | 	mov	local05, local09
1941c     02 AE 66 F0 | 	shl	local05, #2
19420     E7 B0 02 F6 | 	mov	local06, fp
19424     2C B0 06 F1 | 	add	local06, #44
19428     58 AF 02 F1 | 	add	local05, local06
1942c     57 93 02 FB | 	rdlong	arg01, local05
19430     00 94 06 F6 | 	mov	arg02, #0
19434     F8 E2 B0 FD | 	call	#__system____builtin_atoi
19438     3D 95 02 F6 | 	mov	arg02, result1
1943c     53 93 02 F6 | 	mov	arg01, local01
19440     49 95 62 FC | 	wrlong	arg02, arg01
19444                 | LR__2124
19444                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
19444     53 00 00 FF 
19448     68 65 06 F1 | 	add	objptr, ##42856
1944c     32 BF 02 FB | 	rdlong	local13, objptr
19450     53 00 00 FF 
19454     68 65 86 F1 | 	sub	objptr, ##42856
19458     1D BE 0E F2 | 	cmp	local13, #29 wz
1945c     2C 00 90 5D |  if_ne	jmp	#LR__2125
19460     5B AF 02 F6 | 	mov	local05, local09
19464     02 AE 66 F0 | 	shl	local05, #2
19468     E7 B0 02 F6 | 	mov	local06, fp
1946c     2C B0 06 F1 | 	add	local06, #44
19470     58 AF 02 F1 | 	add	local05, local06
19474     57 93 02 FB | 	rdlong	arg01, local05
19478     00 94 06 F6 | 	mov	arg02, #0
1947c     B0 E2 B0 FD | 	call	#__system____builtin_atoi
19480     3D 95 02 F6 | 	mov	arg02, result1
19484     53 93 02 F6 | 	mov	arg01, local01
19488     49 95 62 FC | 	wrlong	arg02, arg01
1948c                 | LR__2125
1948c                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
1948c     53 00 00 FF 
19490     68 65 06 F1 | 	add	objptr, ##42856
19494     32 BF 02 FB | 	rdlong	local13, objptr
19498     53 00 00 FF 
1949c     68 65 86 F1 | 	sub	objptr, ##42856
194a0     1E BE 0E F2 | 	cmp	local13, #30 wz
194a4     3C 00 90 5D |  if_ne	jmp	#LR__2126
194a8     5B AD 02 F6 | 	mov	local04, local09
194ac     02 AC 66 F0 | 	shl	local04, #2
194b0     E7 AE 02 F6 | 	mov	local05, fp
194b4     2C AE 06 F1 | 	add	local05, #44
194b8     57 AD 02 F1 | 	add	local04, local05
194bc     56 93 02 FB | 	rdlong	arg01, local04
194c0     04 E4 B0 FD | 	call	#__system____builtin_atof
194c4     28 CE 05 F1 | 	add	fp, #40
194c8     E7 7A 62 FC | 	wrlong	result1, fp
194cc     E7 92 02 F6 | 	mov	arg01, fp
194d0     28 CE 85 F1 | 	sub	fp, #40
194d4     49 7B 02 FB | 	rdlong	result1, arg01
194d8     3D 95 02 F6 | 	mov	arg02, result1
194dc     53 93 02 F6 | 	mov	arg01, local01
194e0     49 95 62 FC | 	wrlong	arg02, arg01
194e4                 | LR__2126
194e4                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
194e4     53 00 00 FF 
194e8     68 65 06 F1 | 	add	objptr, ##42856
194ec     32 BF 02 FB | 	rdlong	local13, objptr
194f0     2B BE 0E F2 | 	cmp	local13, #43 wz
194f4     53 93 02 A6 |  if_e	mov	arg01, local01
194f8     65 95 02 A6 |  if_e	mov	arg02, local19
194fc     49 95 62 AC |  if_e	wrlong	arg02, arg01
19500     53 BF 02 F6 | 	mov	local13, local01
19504     08 BE 06 F1 | 	add	local13, #8
19508     32 AD 02 FB | 	rdlong	local04, objptr
1950c     53 00 00 FF 
19510     68 65 86 F1 | 	sub	objptr, ##42856
19514     56 CD 02 F6 | 	mov	local20, local04
19518     5F 93 02 F6 | 	mov	arg01, local13
1951c     66 95 02 F6 | 	mov	arg02, local20
19520     49 95 62 FC | 	wrlong	arg02, arg01
19524                 | LR__2127
19524                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
19524     0C D2 0E F2 | 	cmp	local23, #12 wz
19528     38 01 90 5D |  if_ne	jmp	#LR__2131
1952c     00 04 00 FF 
19530     00 A6 16 F2 | 	cmp	local01, ##524288 wc
19534     2C 01 90 CD |  if_b	jmp	#LR__2131
19538                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
19538     53 00 00 FF 
1953c     68 65 06 F1 | 	add	objptr, ##42856
19540     32 BF 02 FB | 	rdlong	local13, objptr
19544     53 00 00 FF 
19548     68 65 86 F1 | 	sub	objptr, ##42856
1954c     1C BE 0E F2 | 	cmp	local13, #28 wz
19550     2C 00 90 5D |  if_ne	jmp	#LR__2128
19554     5B AF 02 F6 | 	mov	local05, local09
19558     02 AE 66 F0 | 	shl	local05, #2
1955c     E7 B0 02 F6 | 	mov	local06, fp
19560     2C B0 06 F1 | 	add	local06, #44
19564     58 AF 02 F1 | 	add	local05, local06
19568     57 93 02 FB | 	rdlong	arg01, local05
1956c     00 94 06 F6 | 	mov	arg02, #0
19570     BC E1 B0 FD | 	call	#__system____builtin_atoi
19574     3D 95 02 F6 | 	mov	arg02, result1
19578     53 93 02 F6 | 	mov	arg01, local01
1957c     7C 7C B0 FD | 	call	#_pslpoke
19580                 | LR__2128
19580                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
19580     53 00 00 FF 
19584     68 65 06 F1 | 	add	objptr, ##42856
19588     32 BF 02 FB | 	rdlong	local13, objptr
1958c     53 00 00 FF 
19590     68 65 86 F1 | 	sub	objptr, ##42856
19594     1D BE 0E F2 | 	cmp	local13, #29 wz
19598     2C 00 90 5D |  if_ne	jmp	#LR__2129
1959c     5B AF 02 F6 | 	mov	local05, local09
195a0     02 AE 66 F0 | 	shl	local05, #2
195a4     E7 B0 02 F6 | 	mov	local06, fp
195a8     2C B0 06 F1 | 	add	local06, #44
195ac     58 AF 02 F1 | 	add	local05, local06
195b0     57 93 02 FB | 	rdlong	arg01, local05
195b4     00 94 06 F6 | 	mov	arg02, #0
195b8     74 E1 B0 FD | 	call	#__system____builtin_atoi
195bc     3D 95 02 F6 | 	mov	arg02, result1
195c0     53 93 02 F6 | 	mov	arg01, local01
195c4     34 7C B0 FD | 	call	#_pslpoke
195c8                 | LR__2129
195c8                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
195c8     53 00 00 FF 
195cc     68 65 06 F1 | 	add	objptr, ##42856
195d0     32 BF 02 FB | 	rdlong	local13, objptr
195d4     53 00 00 FF 
195d8     68 65 86 F1 | 	sub	objptr, ##42856
195dc     1E BE 0E F2 | 	cmp	local13, #30 wz
195e0     38 00 90 5D |  if_ne	jmp	#LR__2130
195e4     5B AD 02 F6 | 	mov	local04, local09
195e8     02 AC 66 F0 | 	shl	local04, #2
195ec     E7 AE 02 F6 | 	mov	local05, fp
195f0     2C AE 06 F1 | 	add	local05, #44
195f4     57 AD 02 F1 | 	add	local04, local05
195f8     56 93 02 FB | 	rdlong	arg01, local04
195fc     C8 E2 B0 FD | 	call	#__system____builtin_atof
19600     28 CE 05 F1 | 	add	fp, #40
19604     E7 7A 62 FC | 	wrlong	result1, fp
19608     E7 92 02 F6 | 	mov	arg01, fp
1960c     28 CE 85 F1 | 	sub	fp, #40
19610     49 95 02 FB | 	rdlong	arg02, arg01
19614     53 93 02 F6 | 	mov	arg01, local01
19618     E0 7B B0 FD | 	call	#_pslpoke
1961c                 | LR__2130
1961c                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
1961c     53 00 00 FF 
19620     68 65 06 F1 | 	add	objptr, ##42856
19624     32 BF 02 FB | 	rdlong	local13, objptr
19628     53 00 00 FF 
1962c     68 65 86 F1 | 	sub	objptr, ##42856
19630     2B BE 0E F2 | 	cmp	local13, #43 wz
19634     53 93 02 A6 |  if_e	mov	arg01, local01
19638     65 95 02 A6 |  if_e	mov	arg02, local19
1963c     BC 7B B0 AD |  if_e	call	#_pslpoke
19640     53 93 02 F6 | 	mov	arg01, local01
19644     08 92 06 F1 | 	add	arg01, #8
19648     53 00 00 FF 
1964c     68 65 06 F1 | 	add	objptr, ##42856
19650     32 CD 02 FB | 	rdlong	local20, objptr
19654     53 00 00 FF 
19658     68 65 86 F1 | 	sub	objptr, ##42856
1965c     66 95 02 F6 | 	mov	arg02, local20
19660     98 7B B0 FD | 	call	#_pslpoke
19664                 | LR__2131
19664                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
19664     05 D2 0E F2 | 	cmp	local23, #5 wz
19668     53 00 00 AF 
1966c     68 65 06 A1 |  if_e	add	objptr, ##42856
19670     32 CD 02 AB |  if_e	rdlong	local20, objptr
19674     53 00 00 AF 
19678     68 65 86 A1 |  if_e	sub	objptr, ##42856
1967c     2B CC 0E A2 |  if_e	cmp	local20, #43 wz
19680     65 CD 02 A6 |  if_e	mov	local20, local19
19684     53 93 02 A6 |  if_e	mov	arg01, local01
19688     66 95 02 A6 |  if_e	mov	arg02, local20
1968c     6C 7B B0 AD |  if_e	call	#_pslpoke
19690                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
19690     04 D2 0E F2 | 	cmp	local23, #4 wz
19694     48 00 90 5D |  if_ne	jmp	#LR__2132
19698     53 00 00 FF 
1969c     68 65 06 F1 | 	add	objptr, ##42856
196a0     32 CD 02 FB | 	rdlong	local20, objptr
196a4     53 00 00 FF 
196a8     68 65 86 F1 | 	sub	objptr, ##42856
196ac     2B CC 0E F2 | 	cmp	local20, #43 wz
196b0     2C 00 90 AD |  if_e	jmp	#LR__2132
196b4     5B AF 02 F6 | 	mov	local05, local09
196b8     02 AE 66 F0 | 	shl	local05, #2
196bc     E7 B0 02 F6 | 	mov	local06, fp
196c0     2C B0 06 F1 | 	add	local06, #44
196c4     58 AF 02 F1 | 	add	local05, local06
196c8     57 93 02 FB | 	rdlong	arg01, local05
196cc     00 94 06 F6 | 	mov	arg02, #0
196d0     5C E0 B0 FD | 	call	#__system____builtin_atoi
196d4     3D 95 02 F6 | 	mov	arg02, result1
196d8     53 93 02 F6 | 	mov	arg01, local01
196dc     1C 7B B0 FD | 	call	#_pslpoke
196e0                 | LR__2132
196e0                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
196e0     02 D2 0E F2 | 	cmp	local23, #2 wz
196e4     48 00 90 5D |  if_ne	jmp	#LR__2133
196e8     53 00 00 FF 
196ec     68 65 06 F1 | 	add	objptr, ##42856
196f0     32 CD 02 FB | 	rdlong	local20, objptr
196f4     53 00 00 FF 
196f8     68 65 86 F1 | 	sub	objptr, ##42856
196fc     2B CC 0E F2 | 	cmp	local20, #43 wz
19700     2C 00 90 AD |  if_e	jmp	#LR__2133
19704     5B AF 02 F6 | 	mov	local05, local09
19708     02 AE 66 F0 | 	shl	local05, #2
1970c     E7 B0 02 F6 | 	mov	local06, fp
19710     2C B0 06 F1 | 	add	local06, #44
19714     58 AF 02 F1 | 	add	local05, local06
19718     57 93 02 FB | 	rdlong	arg01, local05
1971c     00 94 06 F6 | 	mov	arg02, #0
19720     0C E0 B0 FD | 	call	#__system____builtin_atoi
19724     3D 95 02 F6 | 	mov	arg02, result1
19728     53 93 02 F6 | 	mov	arg01, local01
1972c     14 7B B0 FD | 	call	#_psdpoke
19730                 | LR__2133
19730                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
19730     01 D2 0E F2 | 	cmp	local23, #1 wz
19734     48 00 90 5D |  if_ne	jmp	#LR__2134
19738     53 00 00 FF 
1973c     68 65 06 F1 | 	add	objptr, ##42856
19740     32 CD 02 FB | 	rdlong	local20, objptr
19744     53 00 00 FF 
19748     68 65 86 F1 | 	sub	objptr, ##42856
1974c     2B CC 0E F2 | 	cmp	local20, #43 wz
19750     2C 00 90 AD |  if_e	jmp	#LR__2134
19754     5B AF 02 F6 | 	mov	local05, local09
19758     02 AE 66 F0 | 	shl	local05, #2
1975c     E7 B0 02 F6 | 	mov	local06, fp
19760     2C B0 06 F1 | 	add	local06, #44
19764     58 AF 02 F1 | 	add	local05, local06
19768     57 93 02 FB | 	rdlong	arg01, local05
1976c     00 94 06 F6 | 	mov	arg02, #0
19770     BC DF B0 FD | 	call	#__system____builtin_atoi
19774     3D 95 02 F6 | 	mov	arg02, result1
19778     53 93 02 F6 | 	mov	arg01, local01
1977c     0C 7B B0 FD | 	call	#_pspoke
19780                 | LR__2134
19780                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
19780     06 D2 0E F2 | 	cmp	local23, #6 wz
19784     54 00 90 5D |  if_ne	jmp	#LR__2135
19788     53 00 00 FF 
1978c     68 65 06 F1 | 	add	objptr, ##42856
19790     32 CD 02 FB | 	rdlong	local20, objptr
19794     53 00 00 FF 
19798     68 65 86 F1 | 	sub	objptr, ##42856
1979c     2B CC 0E F2 | 	cmp	local20, #43 wz
197a0     38 00 90 AD |  if_e	jmp	#LR__2135
197a4     5B AD 02 F6 | 	mov	local04, local09
197a8     02 AC 66 F0 | 	shl	local04, #2
197ac     E7 AE 02 F6 | 	mov	local05, fp
197b0     2C AE 06 F1 | 	add	local05, #44
197b4     57 AD 02 F1 | 	add	local04, local05
197b8     56 93 02 FB | 	rdlong	arg01, local04
197bc     08 E1 B0 FD | 	call	#__system____builtin_atof
197c0     28 CE 05 F1 | 	add	fp, #40
197c4     E7 7A 62 FC | 	wrlong	result1, fp
197c8     E7 92 02 F6 | 	mov	arg01, fp
197cc     28 CE 85 F1 | 	sub	fp, #40
197d0     49 95 02 FB | 	rdlong	arg02, arg01
197d4     53 93 02 F6 | 	mov	arg01, local01
197d8     20 7A B0 FD | 	call	#_pslpoke
197dc                 | LR__2135
197dc                 | LR__2136
197dc     01 B6 06 F1 | 	add	local09, #1
197e0     10 F9 9F FD | 	jmp	#LR__2103
197e4                 | LR__2137
197e4                 | LR__2138
197e4     E7 F0 03 F6 | 	mov	ptra, fp
197e8     F2 00 A0 FD | 	call	#popregs_
197ec                 | _do_read_ret
197ec     2D 00 64 FD | 	ret
197f0                 | 
197f0                 | ' 
197f0                 | ' '------------------- release
197f0                 | ' 
197f0                 | ' sub do_release
197f0                 | _do_release
197f0     00 CA 05 F6 | 	mov	COUNT_, #0
197f4     E8 00 A0 FD | 	call	#pushregs_
197f8     10 F0 07 F1 | 	add	ptra, #16
197fc     A8 3E BF FD | 	call	#_pop
19800     3F 95 02 F6 | 	mov	arg02, result3
19804     E7 7A 62 FC | 	wrlong	result1, fp
19808     04 CE 05 F1 | 	add	fp, #4
1980c     E7 7C 62 FC | 	wrlong	result2, fp
19810     04 CE 05 F1 | 	add	fp, #4
19814     E7 94 62 FC | 	wrlong	arg02, fp
19818     08 CE 85 F1 | 	sub	fp, #8
1981c     E7 92 02 F6 | 	mov	arg01, fp
19820     60 40 BF FD | 	call	#_converttoint
19824                 | ' 
19824                 | ' t1=pop()
19824                 | ' channel=converttoint(t1)
19824                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
19824     00 7A 56 F2 | 	cmps	result1, #0 wc
19828     2C 00 90 CD |  if_b	jmp	#LR__2140
1982c     08 7A 56 F2 | 	cmps	result1, #8 wc
19830     24 00 90 3D |  if_ae	jmp	#LR__2140
19834     38 00 00 FF 
19838     30 64 06 F1 | 	add	objptr, ##28720
1983c     32 93 02 FB | 	rdlong	arg01, objptr
19840     38 00 00 FF 
19844     30 64 86 F1 | 	sub	objptr, ##28720
19848     06 7A 66 F0 | 	shl	result1, #6
1984c     3D 93 02 F1 | 	add	arg01, result1
19850     2C 92 06 F1 | 	add	arg01, #44
19854     49 FF 69 FC | 	wrlong	#255, arg01
19858                 | LR__2140
19858     E7 F0 03 F6 | 	mov	ptra, fp
1985c     F2 00 A0 FD | 	call	#popregs_
19860                 | _do_release_ret
19860     2D 00 64 FD | 	ret
19864                 | 
19864                 | ' 
19864                 | ' '------------------- restore
19864                 | ' 
19864                 | ' sub do_restore()
19864                 | _do_restore
19864     4B 00 00 FF 
19868     A8 64 06 F1 | 	add	objptr, ##38568
1986c     32 81 02 FB | 	rdlong	_var01, objptr
19870     06 00 00 FF 
19874     A4 64 06 F1 | 	add	objptr, ##3236
19878     32 81 62 FC | 	wrlong	_var01, objptr
1987c     98 01 00 FF 
19880     FE 80 06 F6 | 	mov	_var01, ##@LR__6077
19884     01 00 00 FF 
19888     E8 65 06 F1 | 	add	objptr, ##1000
1988c     32 81 62 FC | 	wrlong	_var01, objptr
19890     53 00 00 FF 
19894     34 65 86 F1 | 	sub	objptr, ##42804
19898                 | _do_restore_ret
19898     2D 00 64 FD | 	ret
1989c                 | 
1989c                 | ' 
1989c                 | ' '------------------- restorepalette
1989c                 | ' 
1989c                 | ' sub do_restorepalette()
1989c                 | _do_restorepalette
1989c     D4 81 B0 FD | 	call	#_hg010b_spin2_restorepalette
198a0                 | _do_restorepalette_ret
198a0     2D 00 64 FD | 	ret
198a4                 | 
198a4                 | ' '------------------- return
198a4                 | ' 
198a4                 | ' sub do_return()
198a4                 | _do_return
198a4                 | ' if gosubtop>0 then
198a4     51 00 00 FF 
198a8     54 65 06 F1 | 	add	objptr, ##41812
198ac     32 81 02 FB | 	rdlong	_var01, objptr
198b0     51 00 00 FF 
198b4     54 65 86 F1 | 	sub	objptr, ##41812
198b8     01 80 56 F2 | 	cmps	_var01, #1 wc
198bc     8C 00 90 CD |  if_b	jmp	#LR__2150
198c0     51 00 00 FF 
198c4     54 65 06 F1 | 	add	objptr, ##41812
198c8     32 81 02 FB | 	rdlong	_var01, objptr
198cc     03 80 66 F0 | 	shl	_var01, #3
198d0     03 00 00 FF 
198d4     88 65 86 F1 | 	sub	objptr, ##1928
198d8     32 81 02 F1 | 	add	_var01, objptr
198dc     40 81 02 FB | 	rdlong	_var01, _var01
198e0     03 00 00 FF 
198e4     0C 65 06 F1 | 	add	objptr, ##1804
198e8     32 81 62 FC | 	wrlong	_var01, objptr
198ec     7C 64 06 F1 | 	add	objptr, #124
198f0     32 81 02 FB | 	rdlong	_var01, objptr
198f4     03 80 66 F0 | 	shl	_var01, #3
198f8     03 00 00 FF 
198fc     88 65 86 F1 | 	sub	objptr, ##1928
19900     32 81 02 F1 | 	add	_var01, objptr
19904     04 80 06 F1 | 	add	_var01, #4
19908     40 81 02 FB | 	rdlong	_var01, _var01
1990c     03 00 00 FF 
19910     10 65 06 F1 | 	add	objptr, ##1808
19914     32 81 62 FC | 	wrlong	_var01, objptr
19918     06 00 00 FF 
1991c     40 64 86 F1 | 	sub	objptr, ##3136
19920     32 81 02 FB | 	rdlong	_var01, objptr
19924     01 80 86 F1 | 	sub	_var01, #1
19928     04 64 06 F1 | 	add	objptr, #4
1992c     32 81 62 FC | 	wrlong	_var01, objptr
19930     06 00 00 FF 
19934     B4 64 06 F1 | 	add	objptr, ##3252
19938     32 81 02 FB | 	rdlong	_var01, objptr
1993c     01 80 86 F1 | 	sub	_var01, #1
19940     32 81 62 FC | 	wrlong	_var01, objptr
19944     51 00 00 FF 
19948     54 65 86 F1 | 	sub	objptr, ##41812
1994c                 | LR__2150
1994c                 | _do_return_ret
1994c     2D 00 64 FD | 	ret
19950                 | 
19950                 | ' 
19950                 | ' '------------------- right$
19950                 | ' 
19950                 | ' sub do_right
19950                 | _do_right
19950     01 CA 05 F6 | 	mov	COUNT_, #1
19954     E8 00 A0 FD | 	call	#pushregs_
19958     14 F0 07 F1 | 	add	ptra, #20
1995c     4B 00 00 FF 
19960     A0 64 06 F1 | 	add	objptr, ##38560
19964     32 97 02 FB | 	rdlong	arg03, objptr
19968     4B 95 02 F6 | 	mov	arg02, arg03
1996c     01 94 66 F0 | 	shl	arg02, #1
19970     4B 95 02 F1 | 	add	arg02, arg03
19974     02 94 66 F0 | 	shl	arg02, #2
19978     03 00 00 FF 
1997c     04 64 86 F1 | 	sub	objptr, ##1540
19980     32 95 02 F1 | 	add	arg02, objptr
19984     4A 97 02 FB | 	rdlong	arg03, arg02
19988                 | ' 
19988                 | ' numpar=compiledline(lineptr_e).result.uresult
19988                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
19988     02 96 0E F2 | 	cmp	arg03, #2 wz
1998c     48 00 00 FF 
19990     9C 64 86 F1 | 	sub	objptr, ##37020
19994     40 00 90 AD |  if_e	jmp	#LR__2160
19998     00 92 06 F6 | 	mov	arg01, #0
1999c     C0 05 B1 FD | 	call	#__system___getiolock_0622
199a0     3D 93 02 F6 | 	mov	arg01, result1
199a4     34 B0 B0 FD | 	call	#__system___lockmem
199a8     98 01 00 FF 
199ac     FF 94 06 F6 | 	mov	arg02, ##@LR__6078
199b0     00 92 06 F6 | 	mov	arg01, #0
199b4     00 96 06 F6 | 	mov	arg03, #0
199b8     14 BD B0 FD | 	call	#__system___basic_print_string
199bc     00 92 06 F6 | 	mov	arg01, #0
199c0     9C 05 B1 FD | 	call	#__system___getiolock_0622
199c4     3D 01 68 FC | 	wrlong	#0, result1
199c8     27 92 06 F6 | 	mov	arg01, #39
199cc     00 94 06 F6 | 	mov	arg02, #0
199d0     8C 76 B0 FD | 	call	#_printerror
199d4     D8 00 90 FD | 	jmp	#LR__2163
199d8                 | LR__2160
199d8     CC 3C BF FD | 	call	#_pop
199dc     3F 97 02 F6 | 	mov	arg03, result3
199e0     E7 7A 62 FC | 	wrlong	result1, fp
199e4     04 CE 05 F1 | 	add	fp, #4
199e8     E7 7C 62 FC | 	wrlong	result2, fp
199ec     04 CE 05 F1 | 	add	fp, #4
199f0     E7 96 62 FC | 	wrlong	arg03, fp
199f4     08 CE 85 F1 | 	sub	fp, #8
199f8     E7 92 02 F6 | 	mov	arg01, fp
199fc     84 3E BF FD | 	call	#_converttoint
19a00     3D A7 02 F6 | 	mov	local01, result1
19a04     A0 3C BF FD | 	call	#_pop
19a08     3F 97 02 F6 | 	mov	arg03, result3
19a0c     E7 7A 62 FC | 	wrlong	result1, fp
19a10     04 CE 05 F1 | 	add	fp, #4
19a14     E7 7C 62 FC | 	wrlong	result2, fp
19a18     04 CE 05 F1 | 	add	fp, #4
19a1c     E7 96 62 FC | 	wrlong	arg03, fp
19a20                 | ' t1=pop() : arg=converttoint(t1)
19a20                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
19a20     08 CE 85 F1 | 	sub	fp, #8
19a24     2B 96 0E F2 | 	cmp	arg03, #43 wz
19a28     18 00 90 5D |  if_ne	jmp	#LR__2161
19a2c     E7 92 02 FB | 	rdlong	arg01, fp
19a30     E4 3D BF FD | 	call	#_convertstring
19a34     E7 7A 62 FC | 	wrlong	result1, fp
19a38     08 CE 05 F1 | 	add	fp, #8
19a3c     E7 3E 68 FC | 	wrlong	#31, fp
19a40     08 CE 85 F1 | 	sub	fp, #8
19a44                 | LR__2161
19a44                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
19a44     08 CE 05 F1 | 	add	fp, #8
19a48     E7 96 02 FB | 	rdlong	arg03, fp
19a4c     08 CE 85 F1 | 	sub	fp, #8
19a50     1F 96 0E F2 | 	cmp	arg03, #31 wz
19a54     40 00 90 AD |  if_e	jmp	#LR__2162
19a58     00 92 06 F6 | 	mov	arg01, #0
19a5c     00 05 B1 FD | 	call	#__system___getiolock_0622
19a60     3D 93 02 F6 | 	mov	arg01, result1
19a64     74 AF B0 FD | 	call	#__system___lockmem
19a68     98 01 00 FF 
19a6c     08 95 06 F6 | 	mov	arg02, ##@LR__6079
19a70     00 92 06 F6 | 	mov	arg01, #0
19a74     00 96 06 F6 | 	mov	arg03, #0
19a78     54 BC B0 FD | 	call	#__system___basic_print_string
19a7c     00 92 06 F6 | 	mov	arg01, #0
19a80     DC 04 B1 FD | 	call	#__system___getiolock_0622
19a84     3D 01 68 FC | 	wrlong	#0, result1
19a88     0F 92 06 F6 | 	mov	arg01, #15
19a8c     00 94 06 F6 | 	mov	arg02, #0
19a90     CC 75 B0 FD | 	call	#_printerror
19a94     18 00 90 FD | 	jmp	#LR__2163
19a98                 | LR__2162
19a98     E7 92 02 FB | 	rdlong	arg01, fp
19a9c     53 95 02 F6 | 	mov	arg02, local01
19aa0     68 C8 B0 FD | 	call	#__system__Right_S
19aa4     E7 7A 62 FC | 	wrlong	result1, fp
19aa8     E7 92 02 F6 | 	mov	arg01, fp
19aac     88 3C BF FD | 	call	#_push
19ab0                 | LR__2163
19ab0     E7 F0 03 F6 | 	mov	ptra, fp
19ab4     F2 00 A0 FD | 	call	#popregs_
19ab8                 | _do_right_ret
19ab8     2D 00 64 FD | 	ret
19abc                 | 
19abc                 | ' 
19abc                 | ' '------------------- rnd
19abc                 | ' 
19abc                 | ' sub do_rnd
19abc                 | _do_rnd
19abc     02 CA 05 F6 | 	mov	COUNT_, #2
19ac0     E8 00 A0 FD | 	call	#pushregs_
19ac4     10 F0 07 F1 | 	add	ptra, #16
19ac8     4B 00 00 FF 
19acc     A0 64 06 F1 | 	add	objptr, ##38560
19ad0     32 A7 02 FB | 	rdlong	local01, objptr
19ad4     53 97 02 F6 | 	mov	arg03, local01
19ad8     01 96 66 F0 | 	shl	arg03, #1
19adc     53 97 02 F1 | 	add	arg03, local01
19ae0     02 96 66 F0 | 	shl	arg03, #2
19ae4     03 00 00 FF 
19ae8     04 64 86 F1 | 	sub	objptr, ##1540
19aec     32 97 02 F1 | 	add	arg03, objptr
19af0     4B A9 02 FB | 	rdlong	local02, arg03
19af4                 | ' 
19af4                 | ' numpar=compiledline(lineptr_e).result.uresult
19af4                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
19af4     02 A8 16 F2 | 	cmp	local02, #2 wc
19af8     48 00 00 FF 
19afc     9C 64 86 F1 | 	sub	objptr, ##37020
19b00     40 00 90 CD |  if_b	jmp	#LR__2170
19b04     00 92 06 F6 | 	mov	arg01, #0
19b08     54 04 B1 FD | 	call	#__system___getiolock_0622
19b0c     3D 93 02 F6 | 	mov	arg01, result1
19b10     C8 AE B0 FD | 	call	#__system___lockmem
19b14     98 01 00 FF 
19b18     11 95 06 F6 | 	mov	arg02, ##@LR__6080
19b1c     00 92 06 F6 | 	mov	arg01, #0
19b20     00 96 06 F6 | 	mov	arg03, #0
19b24     A8 BB B0 FD | 	call	#__system___basic_print_string
19b28     00 92 06 F6 | 	mov	arg01, #0
19b2c     30 04 B1 FD | 	call	#__system___getiolock_0622
19b30     3D 01 68 FC | 	wrlong	#0, result1
19b34     27 92 06 F6 | 	mov	arg01, #39
19b38     00 94 06 F6 | 	mov	arg02, #0
19b3c     20 75 B0 FD | 	call	#_printerror
19b40     28 01 90 FD | 	jmp	#LR__2177
19b44                 | LR__2170
19b44                 | ' if numpar=0 then
19b44     00 A8 0E F2 | 	cmp	local02, #0 wz
19b48     20 00 90 5D |  if_ne	jmp	#LR__2171
19b4c     08 CE 05 F1 | 	add	fp, #8
19b50     E7 3A 68 FC | 	wrlong	#29, fp
19b54     08 CE 85 F1 | 	sub	fp, #8
19b58     1B 7A 62 FD | 	getrnd	result1
19b5c     E7 7A 62 FC | 	wrlong	result1, fp
19b60     E7 92 02 F6 | 	mov	arg01, fp
19b64     D0 3B BF FD | 	call	#_push
19b68     00 01 90 FD | 	jmp	#LR__2176
19b6c                 | LR__2171
19b6c     38 3B BF FD | 	call	#_pop
19b70     E7 7A 62 FC | 	wrlong	result1, fp
19b74     04 CE 05 F1 | 	add	fp, #4
19b78     E7 7C 62 FC | 	wrlong	result2, fp
19b7c     04 CE 05 F1 | 	add	fp, #4
19b80     E7 7E 62 FC | 	wrlong	result3, fp
19b84                 | '   t1=pop()
19b84                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
19b84     08 CE 85 F1 | 	sub	fp, #8
19b88     1C 7E 0E F2 | 	cmp	result3, #28 wz
19b8c     08 CE 05 51 |  if_ne	add	fp, #8
19b90     E7 A6 02 5B |  if_ne	rdlong	local01, fp
19b94     08 CE 85 51 |  if_ne	sub	fp, #8
19b98     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
19b9c     2C 00 90 5D |  if_ne	jmp	#LR__2172
19ba0     1B 7A 62 FD | 	getrnd	result1
19ba4     E7 A6 02 FB | 	rdlong	local01, fp
19ba8     53 7B 12 FD | 	qdiv	result1, local01
19bac     E7 92 02 F6 | 	mov	arg01, fp
19bb0     19 A8 62 FD | 	getqy	local02
19bb4     E7 A8 62 FC | 	wrlong	local02, fp
19bb8     08 CE 05 F1 | 	add	fp, #8
19bbc     E7 3A 68 FC | 	wrlong	#29, fp
19bc0     08 CE 85 F1 | 	sub	fp, #8
19bc4     70 3B BF FD | 	call	#_push
19bc8     A0 00 90 FD | 	jmp	#LR__2175
19bcc                 | LR__2172
19bcc     08 CE 05 F1 | 	add	fp, #8
19bd0     E7 A8 02 FB | 	rdlong	local02, fp
19bd4     08 CE 85 F1 | 	sub	fp, #8
19bd8     1E A8 0E F2 | 	cmp	local02, #30 wz
19bdc     48 00 90 5D |  if_ne	jmp	#LR__2173
19be0     E7 92 02 FB | 	rdlong	arg01, fp
19be4     00 C0 24 FF 
19be8     00 94 06 F6 | 	mov	arg02, ##1233125376
19bec     C0 D6 B0 FD | 	call	#__system___float_div
19bf0     3D A9 02 F6 | 	mov	local02, result1
19bf4     1B 92 62 FD | 	getrnd	arg01
19bf8     74 93 06 F4 | 	bitl	arg01, #372
19bfc     A8 D0 B0 FD | 	call	#__system___float_fromuns
19c00     3D 95 02 F6 | 	mov	arg02, result1
19c04     54 93 02 F6 | 	mov	arg01, local02
19c08     A0 D4 B0 FD | 	call	#__system___float_mul
19c0c     E7 7A 62 FC | 	wrlong	result1, fp
19c10     08 CE 05 F1 | 	add	fp, #8
19c14     E7 3C 68 FC | 	wrlong	#30, fp
19c18     08 CE 85 F1 | 	sub	fp, #8
19c1c     E7 92 02 F6 | 	mov	arg01, fp
19c20     14 3B BF FD | 	call	#_push
19c24     44 00 90 FD | 	jmp	#LR__2174
19c28                 | LR__2173
19c28                 | '     print "rnd: "; : printerror(40) 
19c28     00 92 06 F6 | 	mov	arg01, #0
19c2c     30 03 B1 FD | 	call	#__system___getiolock_0622
19c30     3D 93 02 F6 | 	mov	arg01, result1
19c34     A4 AD B0 FD | 	call	#__system___lockmem
19c38     98 01 00 FF 
19c3c     17 95 06 F6 | 	mov	arg02, ##@LR__6081
19c40     00 92 06 F6 | 	mov	arg01, #0
19c44     00 96 06 F6 | 	mov	arg03, #0
19c48     84 BA B0 FD | 	call	#__system___basic_print_string
19c4c     00 92 06 F6 | 	mov	arg01, #0
19c50     0C 03 B1 FD | 	call	#__system___getiolock_0622
19c54     3D 01 68 FC | 	wrlong	#0, result1
19c58     28 92 06 F6 | 	mov	arg01, #40
19c5c     00 94 06 F6 | 	mov	arg02, #0
19c60     FC 73 B0 FD | 	call	#_printerror
19c64     E7 92 02 F6 | 	mov	arg01, fp
19c68     CC 3A BF FD | 	call	#_push
19c6c                 | LR__2174
19c6c                 | LR__2175
19c6c                 | LR__2176
19c6c                 | LR__2177
19c6c     E7 F0 03 F6 | 	mov	ptra, fp
19c70     F2 00 A0 FD | 	call	#popregs_
19c74                 | _do_rnd_ret
19c74     2D 00 64 FD | 	ret
19c78                 | 
19c78                 | ' 
19c78                 | ' '-------------------- round
19c78                 | ' 
19c78                 | ' sub do_round
19c78                 | _do_round
19c78     00 CA 05 F6 | 	mov	COUNT_, #0
19c7c     E8 00 A0 FD | 	call	#pushregs_
19c80     0C F0 07 F1 | 	add	ptra, #12
19c84     20 3A BF FD | 	call	#_pop
19c88     E7 7A 62 FC | 	wrlong	result1, fp
19c8c     04 CE 05 F1 | 	add	fp, #4
19c90     E7 7C 62 FC | 	wrlong	result2, fp
19c94     04 CE 05 F1 | 	add	fp, #4
19c98     E7 7E 62 FC | 	wrlong	result3, fp
19c9c     08 CE 85 F1 | 	sub	fp, #8
19ca0     E7 92 02 F6 | 	mov	arg01, fp
19ca4     DC 3B BF FD | 	call	#_converttoint
19ca8     E7 7A 62 FC | 	wrlong	result1, fp
19cac     08 CE 05 F1 | 	add	fp, #8
19cb0     E7 38 68 FC | 	wrlong	#28, fp
19cb4     08 CE 85 F1 | 	sub	fp, #8
19cb8     E7 92 02 F6 | 	mov	arg01, fp
19cbc     78 3A BF FD | 	call	#_push
19cc0     E7 F0 03 F6 | 	mov	ptra, fp
19cc4     F2 00 A0 FD | 	call	#popregs_
19cc8                 | _do_round_ret
19cc8     2D 00 64 FD | 	ret
19ccc                 | 
19ccc                 | ' 
19ccc                 | ' '-------------------- rqpin
19ccc                 | ' 
19ccc                 | ' sub do_rqpin
19ccc                 | _do_rqpin
19ccc     00 CA 05 F6 | 	mov	COUNT_, #0
19cd0     E8 00 A0 FD | 	call	#pushregs_
19cd4     0C F0 07 F1 | 	add	ptra, #12
19cd8     CC 39 BF FD | 	call	#_pop
19cdc     E7 7A 62 FC | 	wrlong	result1, fp
19ce0     04 CE 05 F1 | 	add	fp, #4
19ce4     E7 7C 62 FC | 	wrlong	result2, fp
19ce8     04 CE 05 F1 | 	add	fp, #4
19cec     E7 7E 62 FC | 	wrlong	result3, fp
19cf0     08 CE 85 F1 | 	sub	fp, #8
19cf4     E7 92 02 F6 | 	mov	arg01, fp
19cf8     88 3B BF FD | 	call	#_converttoint
19cfc     3D 93 02 F6 | 	mov	arg01, result1
19d00     00 7A 06 F6 | 	mov	result1, #0
19d04     49 7B 82 FA | 	rqpin	result1, arg01
19d08     53 00 00 FF 
19d0c     68 65 06 F1 | 	add	objptr, ##42856
19d10     32 7B 62 FC | 	wrlong	result1, objptr
19d14     53 00 00 FF 
19d18     68 65 86 F1 | 	sub	objptr, ##42856
19d1c     08 CE 05 F1 | 	add	fp, #8
19d20     E7 3A 68 FC | 	wrlong	#29, fp
19d24     08 CE 85 F1 | 	sub	fp, #8
19d28     E7 08 68 FC | 	wrlong	#4, fp
19d2c     E7 92 02 F6 | 	mov	arg01, fp
19d30     04 3A BF FD | 	call	#_push
19d34     E7 F0 03 F6 | 	mov	ptra, fp
19d38     F2 00 A0 FD | 	call	#popregs_
19d3c                 | _do_rqpin_ret
19d3c     2D 00 64 FD | 	ret
19d40                 | 
19d40                 | ' 
19d40                 | ' ' ------------------ run
19d40                 | ' 
19d40                 | ' sub do_run
19d40                 | _do_run
19d40     04 CA 05 F6 | 	mov	COUNT_, #4
19d44     E8 00 A0 FD | 	call	#pushregs_
19d48     4B 00 00 FF 
19d4c     A0 64 06 F1 | 	add	objptr, ##38560
19d50     32 A7 02 FB | 	rdlong	local01, objptr
19d54     06 00 00 FF 
19d58     38 64 06 F1 | 	add	objptr, ##3128
19d5c     32 A9 02 FB | 	rdlong	local02, objptr
19d60     04 64 06 F1 | 	add	objptr, #4
19d64     32 AB 02 FB | 	rdlong	local03, objptr
19d68     53 99 02 F6 | 	mov	arg04, local01
19d6c     4C 97 02 F6 | 	mov	arg03, arg04
19d70     01 96 66 F0 | 	shl	arg03, #1
19d74     4C 97 02 F1 | 	add	arg03, arg04
19d78     02 96 66 F0 | 	shl	arg03, #2
19d7c     09 00 00 FF 
19d80     40 64 86 F1 | 	sub	objptr, ##4672
19d84     32 97 02 F1 | 	add	arg03, objptr
19d88     4B 95 02 FB | 	rdlong	arg02, arg03
19d8c                 | ' 
19d8c                 | ' r_lineptr_e=lineptr_e
19d8c                 | ' r_runptr=runptr
19d8c                 | ' r_runptr2=runptr2
19d8c                 | ' 
19d8c                 | ' numpar=compiledline(lineptr_e).result.uresult
19d8c                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
19d8c     01 94 0E F2 | 	cmp	arg02, #1 wz
19d90     48 00 00 FF 
19d94     9C 64 86 F1 | 	sub	objptr, ##37020
19d98     00 92 06 A6 |  if_e	mov	arg01, #0
19d9c     6C A8 BF AD |  if_e	call	#_do_load
19da0     4B 00 00 FF 
19da4     A8 64 06 F1 | 	add	objptr, ##38568
19da8     32 99 02 FB | 	rdlong	arg04, objptr
19dac     06 00 00 FF 
19db0     30 64 06 F1 | 	add	objptr, ##3120
19db4     32 99 62 FC | 	wrlong	arg04, objptr
19db8     04 64 06 F1 | 	add	objptr, #4
19dbc     32 01 68 FC | 	wrlong	#0, objptr
19dc0     04 64 06 F1 | 	add	objptr, #4
19dc4     FF FF FF FF 
19dc8     32 FF 6B FC | 	wrlong	##-1, objptr
19dcc     06 00 00 FF 
19dd0     38 64 86 F1 | 	sub	objptr, ##3128
19dd4     32 99 02 FB | 	rdlong	arg04, objptr
19dd8     06 00 00 FF 
19ddc     A4 64 06 F1 | 	add	objptr, ##3236
19de0     32 99 62 FC | 	wrlong	arg04, objptr
19de4     98 01 00 FF 
19de8     1D 99 06 F6 | 	mov	arg04, ##@LR__6082
19dec     01 00 00 FF 
19df0     E8 65 06 F1 | 	add	objptr, ##1000
19df4     32 99 62 FC | 	wrlong	arg04, objptr
19df8                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
19df8                 | ' dataptr=programstart : readline="" ' reset the data pointer
19df8                 | ' if inrun>0 then 
19df8     02 00 00 FF 
19dfc     28 64 86 F1 | 	sub	objptr, ##1064
19e00     32 99 02 FB | 	rdlong	arg04, objptr
19e04     51 00 00 FF 
19e08     0C 65 86 F1 | 	sub	objptr, ##41740
19e0c     01 98 16 F2 | 	cmp	arg04, #1 wc
19e10     34 00 90 CD |  if_b	jmp	#LR__2180
19e14     32 93 02 F6 | 	mov	arg01, objptr
19e18     51 00 00 FF 
19e1c     10 93 06 F1 | 	add	arg01, ##41744
19e20     51 00 00 FF 
19e24     D8 64 06 F1 | 	add	objptr, ##41688
19e28     32 95 02 FB | 	rdlong	arg02, objptr
19e2c     18 96 06 F6 | 	mov	arg03, #24
19e30     46 00 00 FF 
19e34     0C 64 86 F1 | 	sub	objptr, ##35852
19e38     80 9F B0 FD | 	call	#_psram_spin2_read1
19e3c     0B 00 00 FF 
19e40     CC 64 86 F1 | 	sub	objptr, ##5836
19e44                 | '   psram.read1(varptr(runheader),runptr,24)  
19e44                 | '   return
19e44     10 03 90 FD | 	jmp	#LR__2187
19e48                 | LR__2180
19e48     51 00 00 FF 
19e4c     0C 65 06 F1 | 	add	objptr, ##41740
19e50     32 03 68 FC | 	wrlong	#1, objptr
19e54     04 64 06 F1 | 	add	objptr, #4
19e58     32 93 02 F6 | 	mov	arg01, objptr
19e5c     38 64 86 F1 | 	sub	objptr, #56
19e60     32 95 02 FB | 	rdlong	arg02, objptr
19e64     18 96 06 F6 | 	mov	arg03, #24
19e68     46 00 00 FF 
19e6c     0C 64 86 F1 | 	sub	objptr, ##35852
19e70     48 9F B0 FD | 	call	#_psram_spin2_read1
19e74                 | ' inrun=1
19e74                 | ' psram.read1(varptr(runheader),runptr,24) 
19e74                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
19e74     46 00 00 FF 
19e78     44 64 06 F1 | 	add	objptr, ##35908
19e7c     32 AD 02 FB | 	rdlong	local04, objptr
19e80     51 00 00 FF 
19e84     10 65 86 F1 | 	sub	objptr, ##41744
19e88     FF FF 7F FF 
19e8c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
19e90     51 00 00 AF 
19e94     0C 65 06 A1 |  if_e	add	objptr, ##41740
19e98     32 01 68 AC |  if_e	wrlong	#0, objptr
19e9c     51 00 00 AF 
19ea0     0C 65 86 A1 |  if_e	sub	objptr, ##41740
19ea4     B0 02 90 AD |  if_e	jmp	#LR__2187
19ea8                 | ' do 
19ea8                 | LR__2181
19ea8                 | '   if runptr<>oldrunptr then
19ea8     51 00 00 FF 
19eac     D8 64 06 F1 | 	add	objptr, ##41688
19eb0     32 AD 02 FB | 	rdlong	local04, objptr
19eb4     08 64 06 F1 | 	add	objptr, #8
19eb8     32 99 02 FB | 	rdlong	arg04, objptr
19ebc     51 00 00 FF 
19ec0     E0 64 86 F1 | 	sub	objptr, ##41696
19ec4     4C AD 0A F2 | 	cmp	local04, arg04 wz
19ec8     D0 00 90 AD |  if_e	jmp	#LR__2182
19ecc     32 93 02 F6 | 	mov	arg01, objptr
19ed0     51 00 00 FF 
19ed4     10 93 06 F1 | 	add	arg01, ##41744
19ed8     51 00 00 FF 
19edc     D8 64 06 F1 | 	add	objptr, ##41688
19ee0     32 95 02 FB | 	rdlong	arg02, objptr
19ee4     18 96 06 F6 | 	mov	arg03, #24
19ee8     46 00 00 FF 
19eec     0C 64 86 F1 | 	sub	objptr, ##35852
19ef0     C8 9E B0 FD | 	call	#_psram_spin2_read1
19ef4     3C 00 00 FF 
19ef8     D0 65 06 F1 | 	add	objptr, ##31184
19efc     32 93 02 F6 | 	mov	arg01, objptr
19f00     09 00 00 FF 
19f04     3C 64 06 F1 | 	add	objptr, ##4668
19f08     32 95 02 FB | 	rdlong	arg02, objptr
19f0c     0B 00 00 FF 
19f10     54 64 86 F1 | 	sub	objptr, ##5716
19f14     32 AD 02 FB | 	rdlong	local04, objptr
19f18     01 AC 66 F0 | 	shl	local04, #1
19f1c     56 95 02 F1 | 	add	arg02, local04
19f20     0B 00 00 FF 
19f24     94 64 06 F1 | 	add	objptr, ##5780
19f28     32 97 02 FB | 	rdlong	arg03, objptr
19f2c     40 64 86 F1 | 	sub	objptr, #64
19f30     32 AD 02 FB | 	rdlong	local04, objptr
19f34     56 97 82 F1 | 	sub	arg03, local04
19f38     46 00 00 FF 
19f3c     0C 64 86 F1 | 	sub	objptr, ##35852
19f40     78 9E B0 FD | 	call	#_psram_spin2_read1
19f44     46 00 00 FF 
19f48     4C 64 06 F1 | 	add	objptr, ##35916
19f4c     32 AD 02 FB | 	rdlong	local04, objptr
19f50     40 64 86 F1 | 	sub	objptr, #64
19f54     32 95 02 FB | 	rdlong	arg02, objptr
19f58     4A AD 82 F1 | 	sub	local04, arg02
19f5c     0B 00 00 FF 
19f60     54 64 86 F1 | 	sub	objptr, ##5716
19f64     32 95 02 FB | 	rdlong	arg02, objptr
19f68     4A AD 12 FD | 	qdiv	local04, arg02
19f6c     05 00 00 FF 
19f70     18 64 06 F1 | 	add	objptr, ##2584
19f74     18 AC 62 FD | 	getqx	local04
19f78     03 AC 86 F1 | 	sub	local04, #3
19f7c     32 AD 62 FC | 	wrlong	local04, objptr
19f80     06 00 00 FF 
19f84     3C 64 06 F1 | 	add	objptr, ##3132
19f88     32 AD 02 FB | 	rdlong	local04, objptr
19f8c     08 64 06 F1 | 	add	objptr, #8
19f90     32 AD 62 FC | 	wrlong	local04, objptr
19f94     51 00 00 FF 
19f98     E0 64 86 F1 | 	sub	objptr, ##41696
19f9c                 | LR__2182
19f9c     51 00 00 FF 
19fa0     24 65 06 F1 | 	add	objptr, ##41764
19fa4     32 AD 02 FB | 	rdlong	local04, objptr
19fa8     4C 64 86 F1 | 	sub	objptr, #76
19fac     32 AD 62 FC | 	wrlong	local04, objptr
19fb0     04 64 06 F1 | 	add	objptr, #4
19fb4     32 93 02 FB | 	rdlong	arg01, objptr
19fb8     51 00 00 FF 
19fbc     DC 64 86 F1 | 	sub	objptr, ##41692
19fc0     E0 35 BF FD | 	call	#_execute_line
19fc4     51 00 00 FF 
19fc8     DC 64 06 F1 | 	add	objptr, ##41692
19fcc     32 7B 62 FC | 	wrlong	result1, objptr
19fd0     04 64 86 F1 | 	sub	objptr, #4
19fd4     32 AD 02 FB | 	rdlong	local04, objptr
19fd8     51 00 00 FF 
19fdc     D8 64 86 F1 | 	sub	objptr, ##41688
19fe0     FF FF 3F FF 
19fe4     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
19fe8     4C 00 90 AD |  if_e	jmp	#LR__2185
19fec     E0 92 06 F6 | 	mov	arg01, #224
19ff0     54 A1 B0 FD | 	call	#_usbnew_spin2_keystate
19ff4     00 7A 0E F2 | 	cmp	result1, #0 wz
19ff8     10 00 90 5D |  if_ne	jmp	#LR__2183
19ffc     E4 92 06 F6 | 	mov	arg01, #228
1a000     44 A1 B0 FD | 	call	#_usbnew_spin2_keystate
1a004     00 7A 0E F2 | 	cmp	result1, #0 wz
1a008     10 00 90 AD |  if_e	jmp	#LR__2184
1a00c                 | LR__2183
1a00c     06 92 06 F6 | 	mov	arg01, #6
1a010     34 A1 B0 FD | 	call	#_usbnew_spin2_keystate
1a014     00 7A 0E F2 | 	cmp	result1, #0 wz
1a018     1C 00 90 5D |  if_ne	jmp	#LR__2185
1a01c                 | LR__2184
1a01c     51 00 00 FF 
1a020     0C 65 06 F1 | 	add	objptr, ##41740
1a024     32 AD 02 FB | 	rdlong	local04, objptr
1a028     51 00 00 FF 
1a02c     0C 65 86 F1 | 	sub	objptr, ##41740
1a030     02 AC 0E F2 | 	cmp	local04, #2 wz
1a034     70 FE 9F 5D |  if_ne	jmp	#LR__2181
1a038                 | LR__2185
1a038                 | '   ''do whatever kbm.peek_latest_key()=$106 
1a038                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1a038     51 00 00 FF 
1a03c     D8 64 06 F1 | 	add	objptr, ##41688
1a040     32 AD 02 FB | 	rdlong	local04, objptr
1a044     51 00 00 FF 
1a048     D8 64 86 F1 | 	sub	objptr, ##41688
1a04c     FF FF 3F FF 
1a050     FF AD 0E F2 | 	cmp	local04, ##2147483647 wz
1a054     AC 00 90 AD |  if_e	jmp	#LR__2186
1a058     51 00 00 FF 
1a05c     0C 65 06 F1 | 	add	objptr, ##41740
1a060     32 AD 02 FB | 	rdlong	local04, objptr
1a064     51 00 00 FF 
1a068     0C 65 86 F1 | 	sub	objptr, ##41740
1a06c     01 AC 0E F2 | 	cmp	local04, #1 wz
1a070     90 00 90 5D |  if_ne	jmp	#LR__2186
1a074                 | '   print: print "Stopped at line ";runheader(0) 
1a074     00 92 06 F6 | 	mov	arg01, #0
1a078     E4 FE B0 FD | 	call	#__system___getiolock_0622
1a07c     3D 93 02 F6 | 	mov	arg01, result1
1a080     58 A9 B0 FD | 	call	#__system___lockmem
1a084     00 92 06 F6 | 	mov	arg01, #0
1a088     0A 94 06 F6 | 	mov	arg02, #10
1a08c     00 96 06 F6 | 	mov	arg03, #0
1a090     E4 B5 B0 FD | 	call	#__system___basic_print_char
1a094     00 92 06 F6 | 	mov	arg01, #0
1a098     C4 FE B0 FD | 	call	#__system___getiolock_0622
1a09c     3D 01 68 FC | 	wrlong	#0, result1
1a0a0     00 92 06 F6 | 	mov	arg01, #0
1a0a4     B8 FE B0 FD | 	call	#__system___getiolock_0622
1a0a8     3D 93 02 F6 | 	mov	arg01, result1
1a0ac     2C A9 B0 FD | 	call	#__system___lockmem
1a0b0     98 01 00 FF 
1a0b4     1E 95 06 F6 | 	mov	arg02, ##@LR__6083
1a0b8     00 92 06 F6 | 	mov	arg01, #0
1a0bc     00 96 06 F6 | 	mov	arg03, #0
1a0c0     0C B6 B0 FD | 	call	#__system___basic_print_string
1a0c4     51 00 00 FF 
1a0c8     10 65 06 F1 | 	add	objptr, ##41744
1a0cc     32 95 02 FB | 	rdlong	arg02, objptr
1a0d0     51 00 00 FF 
1a0d4     10 65 86 F1 | 	sub	objptr, ##41744
1a0d8     00 92 06 F6 | 	mov	arg01, #0
1a0dc     00 96 06 F6 | 	mov	arg03, #0
1a0e0     0A 98 06 F6 | 	mov	arg04, #10
1a0e4     6C B6 B0 FD | 	call	#__system___basic_print_unsigned
1a0e8     00 92 06 F6 | 	mov	arg01, #0
1a0ec     0A 94 06 F6 | 	mov	arg02, #10
1a0f0     00 96 06 F6 | 	mov	arg03, #0
1a0f4     80 B5 B0 FD | 	call	#__system___basic_print_char
1a0f8     00 92 06 F6 | 	mov	arg01, #0
1a0fc     60 FE B0 FD | 	call	#__system___getiolock_0622
1a100     3D 01 68 FC | 	wrlong	#0, result1
1a104                 | LR__2186
1a104     51 00 00 FF 
1a108     0C 65 06 F1 | 	add	objptr, ##41740
1a10c     32 01 68 FC | 	wrlong	#0, objptr
1a110     06 00 00 FF 
1a114     6C 64 86 F1 | 	sub	objptr, ##3180
1a118     32 A7 62 FC | 	wrlong	local01, objptr
1a11c     06 00 00 FF 
1a120     38 64 06 F1 | 	add	objptr, ##3128
1a124     32 A9 62 FC | 	wrlong	local02, objptr
1a128     04 64 06 F1 | 	add	objptr, #4
1a12c     32 AB 62 FC | 	wrlong	local03, objptr
1a130     51 00 00 FF 
1a134     DC 64 86 F1 | 	sub	objptr, ##41692
1a138     11 92 06 F6 | 	mov	arg01, #17
1a13c     08 94 06 F6 | 	mov	arg02, #8
1a140     10 96 06 F6 | 	mov	arg03, #16
1a144     2C 7F B0 FD | 	call	#_hg010b_spin2_setspritesize
1a148     10 92 06 F6 | 	mov	arg01, #16
1a14c     20 94 06 F6 | 	mov	arg02, #32
1a150     20 96 06 F6 | 	mov	arg03, #32
1a154     1C 7F B0 FD | 	call	#_hg010b_spin2_setspritesize
1a158                 | LR__2187
1a158     E7 F0 03 F6 | 	mov	ptra, fp
1a15c     F2 00 A0 FD | 	call	#popregs_
1a160                 | _do_run_ret
1a160     2D 00 64 FD | 	ret
1a164                 | 
1a164                 | ' 
1a164                 | ' ' ------------------ save
1a164                 | ' 
1a164                 | ' sub do_save                        
1a164                 | _do_save
1a164     0A CA 05 F6 | 	mov	COUNT_, #10
1a168     E8 00 A0 FD | 	call	#pushregs_
1a16c     B8 F0 07 F1 | 	add	ptra, #184
1a170     4B 00 00 FF 
1a174     A0 64 06 F1 | 	add	objptr, ##38560
1a178     32 97 02 FB | 	rdlong	arg03, objptr
1a17c     4B AD 02 F6 | 	mov	local04, arg03
1a180     01 AC 66 F0 | 	shl	local04, #1
1a184     4B AD 02 F1 | 	add	local04, arg03
1a188     02 AC 66 F0 | 	shl	local04, #2
1a18c     03 00 00 FF 
1a190     04 64 86 F1 | 	sub	objptr, ##1540
1a194     32 AD 02 F1 | 	add	local04, objptr
1a198     56 AF 02 FB | 	rdlong	local05, local04
1a19c                 | ' 
1a19c                 | ' numpar=compiledline(lineptr_e).result.uresult
1a19c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1a19c     01 AE 56 F2 | 	cmps	local05, #1 wc
1a1a0     48 00 00 FF 
1a1a4     9C 64 86 F1 | 	sub	objptr, ##37020
1a1a8     14 00 90 CD |  if_b	jmp	#LR__2190
1a1ac     F8 34 BF FD | 	call	#_pop
1a1b0     3D A7 02 F6 | 	mov	local01, result1
1a1b4     3E A9 02 F6 | 	mov	local02, result2
1a1b8     3F AB 02 F6 | 	mov	local03, result3
1a1bc     18 00 90 FD | 	jmp	#LR__2191
1a1c0                 | LR__2190
1a1c0     53 00 00 FF 
1a1c4     1C 65 06 F1 | 	add	objptr, ##42780
1a1c8     32 A7 02 FB | 	rdlong	local01, objptr
1a1cc     53 00 00 FF 
1a1d0     1C 65 86 F1 | 	sub	objptr, ##42780
1a1d4     1F AA 06 F6 | 	mov	local03, #31
1a1d8                 | LR__2191
1a1d8                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1a1d8     4B 00 00 FF 
1a1dc     A8 64 06 F1 | 	add	objptr, ##38568
1a1e0     32 93 02 FB | 	rdlong	arg01, objptr
1a1e4     4B 00 00 FF 
1a1e8     A8 64 86 F1 | 	sub	objptr, ##38568
1a1ec     2C 71 B0 FD | 	call	#_pslpeek
1a1f0     FF FF 7F FF 
1a1f4     FF 7B 0E F2 | 	cmp	result1, ##-1 wz
1a1f8     10 00 90 5D |  if_ne	jmp	#LR__2192
1a1fc     1B 92 06 F6 | 	mov	arg01, #27
1a200     00 94 06 F6 | 	mov	arg02, #0
1a204     58 6E B0 FD | 	call	#_printerror
1a208     3C 02 90 FD | 	jmp	#LR__2198
1a20c                 | LR__2192
1a20c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1a20c     2B AA 0E F2 | 	cmp	local03, #43 wz
1a210     10 00 90 5D |  if_ne	jmp	#LR__2193
1a214     53 93 02 F6 | 	mov	arg01, local01
1a218     FC 35 BF FD | 	call	#_convertstring
1a21c     3D A7 02 F6 | 	mov	local01, result1
1a220     1F AA 06 F6 | 	mov	local03, #31
1a224                 | LR__2193
1a224                 | ' if t1.result_type=result_string then
1a224     1F AA 0E F2 | 	cmp	local03, #31 wz
1a228     1C 02 90 5D |  if_ne	jmp	#LR__2197
1a22c                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1a22c     98 01 00 FF 
1a230     2F 95 06 F6 | 	mov	arg02, ##@LR__6084
1a234     53 93 02 F6 | 	mov	arg01, local01
1a238     C8 A7 B0 FD | 	call	#__system___string_cmp
1a23c     00 7A 0E F2 | 	cmp	result1, #0 wz
1a240     53 00 00 AF 
1a244     1C 65 06 A1 |  if_e	add	objptr, ##42780
1a248     32 A7 02 AB |  if_e	rdlong	local01, objptr
1a24c     53 00 00 FF 
1a250     1C 65 C6 F3 | 	sumz	objptr, ##42780
1a254     32 A7 62 5C |  if_ne	wrlong	local01, objptr
1a258     53 00 00 5F 
1a25c     1C 65 86 51 |  if_ne	sub	objptr, ##42780
1a260                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1a260     09 92 06 F6 | 	mov	arg01, #9
1a264     50 F3 B0 FD | 	call	#__system__close
1a268     09 B0 06 F6 | 	mov	local06, #9
1a26c     4B 00 00 FF 
1a270     B4 64 06 F1 | 	add	objptr, ##38580
1a274     32 93 02 FB | 	rdlong	arg01, objptr
1a278     4B 00 00 FF 
1a27c     B4 64 86 F1 | 	sub	objptr, ##38580
1a280     98 01 00 FF 
1a284     30 95 06 F6 | 	mov	arg02, ##@LR__6085
1a288     AC A7 B0 FD | 	call	#__system___string_concat
1a28c     3D 93 02 F6 | 	mov	arg01, result1
1a290     53 95 02 F6 | 	mov	arg02, local01
1a294     A0 A7 B0 FD | 	call	#__system___string_concat
1a298     3D 95 02 F6 | 	mov	arg02, result1
1a29c     58 93 02 F6 | 	mov	arg01, local06
1a2a0     0D 96 06 F6 | 	mov	arg03, #13
1a2a4     E4 B2 B0 FD | 	call	#__system___basic_open_string
1a2a8     4B 00 00 FF 
1a2ac     A8 64 06 F1 | 	add	objptr, ##38568
1a2b0     32 B3 02 FB | 	rdlong	local07, objptr
1a2b4     4B 00 00 FF 
1a2b8     A8 64 86 F1 | 	sub	objptr, ##38568
1a2bc                 | '   saveptr=programstart
1a2bc                 | '   do
1a2bc                 | LR__2194
1a2bc     E7 92 02 F6 | 	mov	arg01, fp
1a2c0     14 92 06 F1 | 	add	arg01, #20
1a2c4     59 95 02 F6 | 	mov	arg02, local07
1a2c8     18 96 06 F6 | 	mov	arg03, #24
1a2cc     0B 00 00 FF 
1a2d0     CC 64 06 F1 | 	add	objptr, ##5836
1a2d4     E4 9A B0 FD | 	call	#_psram_spin2_read1
1a2d8     E7 92 02 F6 | 	mov	arg01, fp
1a2dc     2C 92 06 F1 | 	add	arg01, #44
1a2e0     1C CE 05 F1 | 	add	fp, #28
1a2e4     E7 94 02 FB | 	rdlong	arg02, fp
1a2e8     04 CE 05 F1 | 	add	fp, #4
1a2ec     E7 96 02 FB | 	rdlong	arg03, fp
1a2f0     20 CE 85 F1 | 	sub	fp, #32
1a2f4     C4 9A B0 FD | 	call	#_psram_spin2_read1
1a2f8     0B 00 00 FF 
1a2fc     CC 64 86 F1 | 	sub	objptr, ##5836
1a300     98 01 00 FF 
1a304     32 B5 06 F6 | 	mov	local08, ##@LR__6086
1a308                 | '     psram.read1(varptr(header(0)),saveptr,24)
1a308                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1a308                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1a308     01 B6 06 F6 | 	mov	local09, #1
1a30c     20 CE 05 F1 | 	add	fp, #32
1a310     E7 B8 02 FB | 	rdlong	local10, fp
1a314     20 CE 85 F1 | 	sub	fp, #32
1a318     01 B8 06 F1 | 	add	local10, #1
1a31c                 | LR__2195
1a31c     5C B7 52 F2 | 	cmps	local09, local10 wc
1a320     34 00 90 3D |  if_ae	jmp	#LR__2196
1a324     5B B3 02 F6 | 	mov	local07, local09
1a328     01 B2 86 F1 | 	sub	local07, #1
1a32c     E7 B0 02 F6 | 	mov	local06, fp
1a330     2C B0 06 F1 | 	add	local06, #44
1a334     58 B3 02 F1 | 	add	local07, local06
1a338     59 93 C2 FA | 	rdbyte	arg01, local07
1a33c     08 C1 B0 FD | 	call	#__system__Chr_S
1a340     3D 95 02 F6 | 	mov	arg02, result1
1a344     5A 93 02 F6 | 	mov	arg01, local08
1a348     EC A6 B0 FD | 	call	#__system___string_concat
1a34c     3D B5 02 F6 | 	mov	local08, result1
1a350     01 B6 06 F1 | 	add	local09, #1
1a354     C4 FF 9F FD | 	jmp	#LR__2195
1a358                 | LR__2196
1a358                 | '     print #9, saveline$
1a358     09 92 06 F6 | 	mov	arg01, #9
1a35c     00 FC B0 FD | 	call	#__system___getiolock_0622
1a360     3D 93 02 F6 | 	mov	arg01, result1
1a364     74 A6 B0 FD | 	call	#__system___lockmem
1a368     09 92 06 F6 | 	mov	arg01, #9
1a36c     5A 95 02 F6 | 	mov	arg02, local08
1a370     00 96 06 F6 | 	mov	arg03, #0
1a374     58 B3 B0 FD | 	call	#__system___basic_print_string
1a378     09 92 06 F6 | 	mov	arg01, #9
1a37c     0A 94 06 F6 | 	mov	arg02, #10
1a380     00 96 06 F6 | 	mov	arg03, #0
1a384     F0 B2 B0 FD | 	call	#__system___basic_print_char
1a388     09 92 06 F6 | 	mov	arg01, #9
1a38c     D0 FB B0 FD | 	call	#__system___getiolock_0622
1a390     3D 01 68 FC | 	wrlong	#0, result1
1a394     28 CE 05 F1 | 	add	fp, #40
1a398     E7 B0 02 FB | 	rdlong	local06, fp
1a39c     58 B3 02 F6 | 	mov	local07, local06
1a3a0     28 CE 85 F1 | 	sub	fp, #40
1a3a4     FF FF 3F FF 
1a3a8     FF B1 0E F2 | 	cmp	local06, ##2147483647 wz
1a3ac     0C FF 9F 5D |  if_ne	jmp	#LR__2194
1a3b0                 | '   close #9  
1a3b0     09 92 06 F6 | 	mov	arg01, #9
1a3b4     00 F2 B0 FD | 	call	#__system__close
1a3b8                 | '   print "Saved as ";currentdir$+"/"+loadname
1a3b8     00 92 06 F6 | 	mov	arg01, #0
1a3bc     A0 FB B0 FD | 	call	#__system___getiolock_0622
1a3c0     3D 93 02 F6 | 	mov	arg01, result1
1a3c4     14 A6 B0 FD | 	call	#__system___lockmem
1a3c8     98 01 00 FF 
1a3cc     33 95 06 F6 | 	mov	arg02, ##@LR__6087
1a3d0     00 92 06 F6 | 	mov	arg01, #0
1a3d4     00 96 06 F6 | 	mov	arg03, #0
1a3d8     F4 B2 B0 FD | 	call	#__system___basic_print_string
1a3dc     00 AC 06 F6 | 	mov	local04, #0
1a3e0     4B 00 00 FF 
1a3e4     B4 64 06 F1 | 	add	objptr, ##38580
1a3e8     32 93 02 FB | 	rdlong	arg01, objptr
1a3ec     4B 00 00 FF 
1a3f0     B4 64 86 F1 | 	sub	objptr, ##38580
1a3f4     98 01 00 FF 
1a3f8     3D 95 06 F6 | 	mov	arg02, ##@LR__6088
1a3fc     38 A6 B0 FD | 	call	#__system___string_concat
1a400     3D 93 02 F6 | 	mov	arg01, result1
1a404     53 00 00 FF 
1a408     1C 65 06 F1 | 	add	objptr, ##42780
1a40c     32 95 02 FB | 	rdlong	arg02, objptr
1a410     53 00 00 FF 
1a414     1C 65 86 F1 | 	sub	objptr, ##42780
1a418     1C A6 B0 FD | 	call	#__system___string_concat
1a41c     3D 95 02 F6 | 	mov	arg02, result1
1a420     56 93 02 F6 | 	mov	arg01, local04
1a424     00 96 06 F6 | 	mov	arg03, #0
1a428     A4 B2 B0 FD | 	call	#__system___basic_print_string
1a42c     00 92 06 F6 | 	mov	arg01, #0
1a430     0A 94 06 F6 | 	mov	arg02, #10
1a434     00 96 06 F6 | 	mov	arg03, #0
1a438     3C B2 B0 FD | 	call	#__system___basic_print_char
1a43c     00 92 06 F6 | 	mov	arg01, #0
1a440     1C FB B0 FD | 	call	#__system___getiolock_0622
1a444     3D 01 68 FC | 	wrlong	#0, result1
1a448                 | LR__2197
1a448                 | LR__2198
1a448     E7 F0 03 F6 | 	mov	ptra, fp
1a44c     F2 00 A0 FD | 	call	#popregs_
1a450                 | _do_save_ret
1a450     2D 00 64 FD | 	ret
1a454                 | 
1a454                 | ' 
1a454                 | ' ' ------------------ setamode
1a454                 | ' 
1a454                 | ' sub do_setamode
1a454                 | _do_setamode
1a454     02 CA 05 F6 | 	mov	COUNT_, #2
1a458     E8 00 A0 FD | 	call	#pushregs_
1a45c     18 F0 07 F1 | 	add	ptra, #24
1a460     44 32 BF FD | 	call	#_pop
1a464     3D 93 02 F6 | 	mov	arg01, result1
1a468     3E A7 02 F6 | 	mov	local01, result2
1a46c     3F A9 02 F6 | 	mov	local02, result3
1a470     E7 92 62 FC | 	wrlong	arg01, fp
1a474     04 CE 05 F1 | 	add	fp, #4
1a478     E7 A6 62 FC | 	wrlong	local01, fp
1a47c     04 CE 05 F1 | 	add	fp, #4
1a480     E7 A8 62 FC | 	wrlong	local02, fp
1a484     08 CE 85 F1 | 	sub	fp, #8
1a488     1C 32 BF FD | 	call	#_pop
1a48c     3D A9 02 F6 | 	mov	local02, result1
1a490     0C CE 05 F1 | 	add	fp, #12
1a494     E7 A8 62 FC | 	wrlong	local02, fp
1a498     04 CE 05 F1 | 	add	fp, #4
1a49c     E7 7C 62 FC | 	wrlong	result2, fp
1a4a0     04 CE 05 F1 | 	add	fp, #4
1a4a4     E7 7E 62 FC | 	wrlong	result3, fp
1a4a8     08 CE 85 F1 | 	sub	fp, #8
1a4ac     E7 92 02 F6 | 	mov	arg01, fp
1a4b0     0C CE 85 F1 | 	sub	fp, #12
1a4b4     CC 33 BF FD | 	call	#_converttoint
1a4b8     3D A7 02 F6 | 	mov	local01, result1
1a4bc     03 A6 66 F0 | 	shl	local01, #3
1a4c0     3D A7 82 F1 | 	sub	local01, result1
1a4c4     02 A6 66 F0 | 	shl	local01, #2
1a4c8     32 A9 02 F6 | 	mov	local02, objptr
1a4cc     15 00 00 FF 
1a4d0     38 A9 06 F1 | 	add	local02, ##11064
1a4d4     54 A7 02 F1 | 	add	local01, local02
1a4d8     E7 92 02 F6 | 	mov	arg01, fp
1a4dc     A4 33 BF FD | 	call	#_converttoint
1a4e0     16 A6 06 F1 | 	add	local01, #22
1a4e4     53 7B 52 FC | 	wrword	result1, local01
1a4e8     E7 F0 03 F6 | 	mov	ptra, fp
1a4ec     F2 00 A0 FD | 	call	#popregs_
1a4f0                 | _do_setamode_ret
1a4f0     2D 00 64 FD | 	ret
1a4f4                 | 
1a4f4                 | ' 
1a4f4                 | ' 
1a4f4                 | ' ' ------------------ setcolor
1a4f4                 | ' 
1a4f4                 | ' sub do_setcolor
1a4f4                 | _do_setcolor
1a4f4     05 CA 05 F6 | 	mov	COUNT_, #5
1a4f8     E8 00 A0 FD | 	call	#pushregs_
1a4fc     20 F0 07 F1 | 	add	ptra, #32
1a500     4B 00 00 FF 
1a504     A0 64 06 F1 | 	add	objptr, ##38560
1a508     32 99 02 FB | 	rdlong	arg04, objptr
1a50c     4C 97 02 F6 | 	mov	arg03, arg04
1a510     01 96 66 F0 | 	shl	arg03, #1
1a514     4C 97 02 F1 | 	add	arg03, arg04
1a518     02 96 66 F0 | 	shl	arg03, #2
1a51c     03 00 00 FF 
1a520     04 64 86 F1 | 	sub	objptr, ##1540
1a524     32 97 02 F1 | 	add	arg03, objptr
1a528     4B A7 02 FB | 	rdlong	local01, arg03
1a52c                 | ' 
1a52c                 | ' numpar=compiledline(lineptr_e).result.uresult
1a52c                 | ' 
1a52c                 | ' if numpar=4 then
1a52c     04 A6 0E F2 | 	cmp	local01, #4 wz
1a530     48 00 00 FF 
1a534     9C 64 86 F1 | 	sub	objptr, ##37020
1a538     B4 00 90 5D |  if_ne	jmp	#LR__2200
1a53c     68 31 BF FD | 	call	#_pop
1a540     3F A7 02 F6 | 	mov	local01, result3
1a544     E7 7A 62 FC | 	wrlong	result1, fp
1a548     04 CE 05 F1 | 	add	fp, #4
1a54c     E7 7C 62 FC | 	wrlong	result2, fp
1a550     04 CE 05 F1 | 	add	fp, #4
1a554     E7 A6 62 FC | 	wrlong	local01, fp
1a558     08 CE 85 F1 | 	sub	fp, #8
1a55c     E7 92 02 F6 | 	mov	arg01, fp
1a560     20 33 BF FD | 	call	#_converttoint
1a564     3D A9 02 F6 | 	mov	local02, result1
1a568     3C 31 BF FD | 	call	#_pop
1a56c     3F A7 02 F6 | 	mov	local01, result3
1a570     E7 7A 62 FC | 	wrlong	result1, fp
1a574     04 CE 05 F1 | 	add	fp, #4
1a578     E7 7C 62 FC | 	wrlong	result2, fp
1a57c     04 CE 05 F1 | 	add	fp, #4
1a580     E7 A6 62 FC | 	wrlong	local01, fp
1a584     08 CE 85 F1 | 	sub	fp, #8
1a588     E7 92 02 F6 | 	mov	arg01, fp
1a58c     F4 32 BF FD | 	call	#_converttoint
1a590     3D AB 02 F6 | 	mov	local03, result1
1a594     10 31 BF FD | 	call	#_pop
1a598     3F A7 02 F6 | 	mov	local01, result3
1a59c     E7 7A 62 FC | 	wrlong	result1, fp
1a5a0     04 CE 05 F1 | 	add	fp, #4
1a5a4     E7 7C 62 FC | 	wrlong	result2, fp
1a5a8     04 CE 05 F1 | 	add	fp, #4
1a5ac     E7 A6 62 FC | 	wrlong	local01, fp
1a5b0     08 CE 85 F1 | 	sub	fp, #8
1a5b4     E7 92 02 F6 | 	mov	arg01, fp
1a5b8     C8 32 BF FD | 	call	#_converttoint
1a5bc     3D AD 02 F6 | 	mov	local04, result1
1a5c0     E4 30 BF FD | 	call	#_pop
1a5c4     3F A7 02 F6 | 	mov	local01, result3
1a5c8     E7 7A 62 FC | 	wrlong	result1, fp
1a5cc     04 CE 05 F1 | 	add	fp, #4
1a5d0     E7 7C 62 FC | 	wrlong	result2, fp
1a5d4     04 CE 05 F1 | 	add	fp, #4
1a5d8     E7 A6 62 FC | 	wrlong	local01, fp
1a5dc     08 CE 85 F1 | 	sub	fp, #8
1a5e0     E7 92 02 F6 | 	mov	arg01, fp
1a5e4     9C 32 BF FD | 	call	#_converttoint
1a5e8     3D AF 02 F6 | 	mov	local05, result1
1a5ec     C0 00 90 FD | 	jmp	#LR__2203
1a5f0                 | LR__2200
1a5f0     02 A6 0E F2 | 	cmp	local01, #2 wz
1a5f4     68 00 90 5D |  if_ne	jmp	#LR__2201
1a5f8     AC 30 BF FD | 	call	#_pop
1a5fc     3F AF 02 F6 | 	mov	local05, result3
1a600     E7 7A 62 FC | 	wrlong	result1, fp
1a604     04 CE 05 F1 | 	add	fp, #4
1a608     E7 7C 62 FC | 	wrlong	result2, fp
1a60c     04 CE 05 F1 | 	add	fp, #4
1a610     E7 AE 62 FC | 	wrlong	local05, fp
1a614     08 CE 85 F1 | 	sub	fp, #8
1a618     E7 92 02 F6 | 	mov	arg01, fp
1a61c     64 32 BF FD | 	call	#_converttoint
1a620     3D AD 02 F6 | 	mov	local04, result1
1a624     56 A9 E2 F8 | 	getbyte	local02, local04, #0
1a628     56 AB EA F8 | 	getbyte	local03, local04, #1
1a62c     56 AD F2 F8 | 	getbyte	local04, local04, #2
1a630     74 30 BF FD | 	call	#_pop
1a634     3F AF 02 F6 | 	mov	local05, result3
1a638     E7 7A 62 FC | 	wrlong	result1, fp
1a63c     04 CE 05 F1 | 	add	fp, #4
1a640     E7 7C 62 FC | 	wrlong	result2, fp
1a644     04 CE 05 F1 | 	add	fp, #4
1a648     E7 AE 62 FC | 	wrlong	local05, fp
1a64c     08 CE 85 F1 | 	sub	fp, #8
1a650     E7 92 02 F6 | 	mov	arg01, fp
1a654     2C 32 BF FD | 	call	#_converttoint
1a658     3D AF 02 F6 | 	mov	local05, result1
1a65c     50 00 90 FD | 	jmp	#LR__2202
1a660                 | LR__2201
1a660                 | '   print "setcolor: "; : printerror(39,runheader(0)) : return  
1a660     00 92 06 F6 | 	mov	arg01, #0
1a664     F8 F8 B0 FD | 	call	#__system___getiolock_0622
1a668     3D 93 02 F6 | 	mov	arg01, result1
1a66c     6C A3 B0 FD | 	call	#__system___lockmem
1a670     98 01 00 FF 
1a674     3F 95 06 F6 | 	mov	arg02, ##@LR__6089
1a678     00 92 06 F6 | 	mov	arg01, #0
1a67c     00 96 06 F6 | 	mov	arg03, #0
1a680     4C B0 B0 FD | 	call	#__system___basic_print_string
1a684     00 92 06 F6 | 	mov	arg01, #0
1a688     D4 F8 B0 FD | 	call	#__system___getiolock_0622
1a68c     3D 01 68 FC | 	wrlong	#0, result1
1a690     51 00 00 FF 
1a694     10 65 06 F1 | 	add	objptr, ##41744
1a698     32 95 02 FB | 	rdlong	arg02, objptr
1a69c     51 00 00 FF 
1a6a0     10 65 86 F1 | 	sub	objptr, ##41744
1a6a4     27 92 06 F6 | 	mov	arg01, #39
1a6a8     B4 69 B0 FD | 	call	#_printerror
1a6ac     14 00 90 FD | 	jmp	#LR__2204
1a6b0                 | LR__2202
1a6b0                 | LR__2203
1a6b0     57 93 02 F6 | 	mov	arg01, local05
1a6b4     56 95 02 F6 | 	mov	arg02, local04
1a6b8     55 97 02 F6 | 	mov	arg03, local03
1a6bc     54 99 02 F6 | 	mov	arg04, local02
1a6c0     18 87 B0 FD | 	call	#_hg010b_spin2_setcolor
1a6c4                 | LR__2204
1a6c4     E7 F0 03 F6 | 	mov	ptra, fp
1a6c8     F2 00 A0 FD | 	call	#popregs_
1a6cc                 | _do_setcolor_ret
1a6cc     2D 00 64 FD | 	ret
1a6d0                 | 
1a6d0                 | ' 
1a6d0                 | ' ' ------------------ setdelay
1a6d0                 | ' 
1a6d0                 | ' sub do_setdelay
1a6d0                 | _do_setdelay
1a6d0     02 CA 05 F6 | 	mov	COUNT_, #2
1a6d4     E8 00 A0 FD | 	call	#pushregs_
1a6d8     18 F0 07 F1 | 	add	ptra, #24
1a6dc     C8 2F BF FD | 	call	#_pop
1a6e0     3D 93 02 F6 | 	mov	arg01, result1
1a6e4     3E A7 02 F6 | 	mov	local01, result2
1a6e8     3F A9 02 F6 | 	mov	local02, result3
1a6ec     E7 92 62 FC | 	wrlong	arg01, fp
1a6f0     04 CE 05 F1 | 	add	fp, #4
1a6f4     E7 A6 62 FC | 	wrlong	local01, fp
1a6f8     04 CE 05 F1 | 	add	fp, #4
1a6fc     E7 A8 62 FC | 	wrlong	local02, fp
1a700     08 CE 85 F1 | 	sub	fp, #8
1a704     A0 2F BF FD | 	call	#_pop
1a708     3D A9 02 F6 | 	mov	local02, result1
1a70c     0C CE 05 F1 | 	add	fp, #12
1a710     E7 A8 62 FC | 	wrlong	local02, fp
1a714     04 CE 05 F1 | 	add	fp, #4
1a718     E7 7C 62 FC | 	wrlong	result2, fp
1a71c     04 CE 05 F1 | 	add	fp, #4
1a720     E7 7E 62 FC | 	wrlong	result3, fp
1a724     08 CE 85 F1 | 	sub	fp, #8
1a728     E7 92 02 F6 | 	mov	arg01, fp
1a72c     0C CE 85 F1 | 	sub	fp, #12
1a730     50 31 BF FD | 	call	#_converttoint
1a734     3D A7 02 F6 | 	mov	local01, result1
1a738     03 A6 66 F0 | 	shl	local01, #3
1a73c     3D A7 82 F1 | 	sub	local01, result1
1a740     02 A6 66 F0 | 	shl	local01, #2
1a744     32 A9 02 F6 | 	mov	local02, objptr
1a748     15 00 00 FF 
1a74c     38 A9 06 F1 | 	add	local02, ##11064
1a750     54 A7 02 F1 | 	add	local01, local02
1a754     E7 92 02 F6 | 	mov	arg01, fp
1a758     28 31 BF FD | 	call	#_converttoint
1a75c     06 A6 06 F1 | 	add	local01, #6
1a760     53 7B 52 FC | 	wrword	result1, local01
1a764     E7 F0 03 F6 | 	mov	ptra, fp
1a768     F2 00 A0 FD | 	call	#popregs_
1a76c                 | _do_setdelay_ret
1a76c     2D 00 64 FD | 	ret
1a770                 | 
1a770                 | ' 
1a770                 | ' ' ------------------ setenv
1a770                 | ' 
1a770                 | ' sub do_setenv
1a770                 | _do_setenv
1a770     02 CA 05 F6 | 	mov	COUNT_, #2
1a774     E8 00 A0 FD | 	call	#pushregs_
1a778     18 F0 07 F1 | 	add	ptra, #24
1a77c     28 2F BF FD | 	call	#_pop
1a780     3D 93 02 F6 | 	mov	arg01, result1
1a784     3E A7 02 F6 | 	mov	local01, result2
1a788     3F A9 02 F6 | 	mov	local02, result3
1a78c     E7 92 62 FC | 	wrlong	arg01, fp
1a790     04 CE 05 F1 | 	add	fp, #4
1a794     E7 A6 62 FC | 	wrlong	local01, fp
1a798     04 CE 05 F1 | 	add	fp, #4
1a79c     E7 A8 62 FC | 	wrlong	local02, fp
1a7a0     08 CE 85 F1 | 	sub	fp, #8
1a7a4     00 2F BF FD | 	call	#_pop
1a7a8     3D A9 02 F6 | 	mov	local02, result1
1a7ac     0C CE 05 F1 | 	add	fp, #12
1a7b0     E7 A8 62 FC | 	wrlong	local02, fp
1a7b4     04 CE 05 F1 | 	add	fp, #4
1a7b8     E7 7C 62 FC | 	wrlong	result2, fp
1a7bc     04 CE 05 F1 | 	add	fp, #4
1a7c0     E7 7E 62 FC | 	wrlong	result3, fp
1a7c4     08 CE 85 F1 | 	sub	fp, #8
1a7c8     E7 92 02 F6 | 	mov	arg01, fp
1a7cc     0C CE 85 F1 | 	sub	fp, #12
1a7d0     B0 30 BF FD | 	call	#_converttoint
1a7d4     3D A7 02 F6 | 	mov	local01, result1
1a7d8     03 A6 66 F0 | 	shl	local01, #3
1a7dc     3D A7 82 F1 | 	sub	local01, result1
1a7e0     02 A6 66 F0 | 	shl	local01, #2
1a7e4     32 A9 02 F6 | 	mov	local02, objptr
1a7e8     15 00 00 FF 
1a7ec     38 A9 06 F1 | 	add	local02, ##11064
1a7f0     54 A7 02 F1 | 	add	local01, local02
1a7f4     E7 92 02 F6 | 	mov	arg01, fp
1a7f8     88 30 BF FD | 	call	#_converttoint
1a7fc     05 A6 06 F1 | 	add	local01, #5
1a800     53 7B 42 FC | 	wrbyte	result1, local01
1a804     E7 F0 03 F6 | 	mov	ptra, fp
1a808     F2 00 A0 FD | 	call	#popregs_
1a80c                 | _do_setenv_ret
1a80c     2D 00 64 FD | 	ret
1a810                 | 
1a810                 | ' 
1a810                 | ' ' ------------------ setlen
1a810                 | ' 
1a810                 | ' sub do_setlen
1a810                 | _do_setlen
1a810     02 CA 05 F6 | 	mov	COUNT_, #2
1a814     E8 00 A0 FD | 	call	#pushregs_
1a818     18 F0 07 F1 | 	add	ptra, #24
1a81c     88 2E BF FD | 	call	#_pop
1a820     3D 93 02 F6 | 	mov	arg01, result1
1a824     3E A7 02 F6 | 	mov	local01, result2
1a828     3F A9 02 F6 | 	mov	local02, result3
1a82c     E7 92 62 FC | 	wrlong	arg01, fp
1a830     04 CE 05 F1 | 	add	fp, #4
1a834     E7 A6 62 FC | 	wrlong	local01, fp
1a838     04 CE 05 F1 | 	add	fp, #4
1a83c     E7 A8 62 FC | 	wrlong	local02, fp
1a840     08 CE 85 F1 | 	sub	fp, #8
1a844     60 2E BF FD | 	call	#_pop
1a848     3D A9 02 F6 | 	mov	local02, result1
1a84c     0C CE 05 F1 | 	add	fp, #12
1a850     E7 A8 62 FC | 	wrlong	local02, fp
1a854     04 CE 05 F1 | 	add	fp, #4
1a858     E7 7C 62 FC | 	wrlong	result2, fp
1a85c     04 CE 05 F1 | 	add	fp, #4
1a860     E7 7E 62 FC | 	wrlong	result3, fp
1a864     08 CE 85 F1 | 	sub	fp, #8
1a868     E7 92 02 F6 | 	mov	arg01, fp
1a86c     0C CE 85 F1 | 	sub	fp, #12
1a870     10 30 BF FD | 	call	#_converttoint
1a874     3D A7 02 F6 | 	mov	local01, result1
1a878     03 A6 66 F0 | 	shl	local01, #3
1a87c     3D A7 82 F1 | 	sub	local01, result1
1a880     02 A6 66 F0 | 	shl	local01, #2
1a884     32 A9 02 F6 | 	mov	local02, objptr
1a888     15 00 00 FF 
1a88c     38 A9 06 F1 | 	add	local02, ##11064
1a890     54 A7 02 F1 | 	add	local01, local02
1a894     E7 92 02 F6 | 	mov	arg01, fp
1a898     A4 30 BF FD | 	call	#_converttofloat
1a89c     08 A6 06 F1 | 	add	local01, #8
1a8a0     53 7B 62 FC | 	wrlong	result1, local01
1a8a4     E7 F0 03 F6 | 	mov	ptra, fp
1a8a8     F2 00 A0 FD | 	call	#popregs_
1a8ac                 | _do_setlen_ret
1a8ac     2D 00 64 FD | 	ret
1a8b0                 | 
1a8b0                 | ' 
1a8b0                 | ' ' ------------------ setpan
1a8b0                 | ' 
1a8b0                 | ' sub do_setpan
1a8b0                 | _do_setpan
1a8b0     02 CA 05 F6 | 	mov	COUNT_, #2
1a8b4     E8 00 A0 FD | 	call	#pushregs_
1a8b8     18 F0 07 F1 | 	add	ptra, #24
1a8bc     E8 2D BF FD | 	call	#_pop
1a8c0     3D 93 02 F6 | 	mov	arg01, result1
1a8c4     3E A7 02 F6 | 	mov	local01, result2
1a8c8     3F A9 02 F6 | 	mov	local02, result3
1a8cc     E7 92 62 FC | 	wrlong	arg01, fp
1a8d0     04 CE 05 F1 | 	add	fp, #4
1a8d4     E7 A6 62 FC | 	wrlong	local01, fp
1a8d8     04 CE 05 F1 | 	add	fp, #4
1a8dc     E7 A8 62 FC | 	wrlong	local02, fp
1a8e0     08 CE 85 F1 | 	sub	fp, #8
1a8e4     C0 2D BF FD | 	call	#_pop
1a8e8     3D A9 02 F6 | 	mov	local02, result1
1a8ec     0C CE 05 F1 | 	add	fp, #12
1a8f0     E7 A8 62 FC | 	wrlong	local02, fp
1a8f4     04 CE 05 F1 | 	add	fp, #4
1a8f8     E7 7C 62 FC | 	wrlong	result2, fp
1a8fc     04 CE 05 F1 | 	add	fp, #4
1a900     E7 7E 62 FC | 	wrlong	result3, fp
1a904     08 CE 85 F1 | 	sub	fp, #8
1a908     E7 92 02 F6 | 	mov	arg01, fp
1a90c     0C CE 85 F1 | 	sub	fp, #12
1a910     70 2F BF FD | 	call	#_converttoint
1a914     3D A7 02 F6 | 	mov	local01, result1
1a918     03 A6 66 F0 | 	shl	local01, #3
1a91c     3D A7 82 F1 | 	sub	local01, result1
1a920     02 A6 66 F0 | 	shl	local01, #2
1a924     32 A9 02 F6 | 	mov	local02, objptr
1a928     15 00 00 FF 
1a92c     38 A9 06 F1 | 	add	local02, ##11064
1a930     54 A7 02 F1 | 	add	local01, local02
1a934     E7 92 02 F6 | 	mov	arg01, fp
1a938     04 30 BF FD | 	call	#_converttofloat
1a93c     10 A6 06 F1 | 	add	local01, #16
1a940     53 7B 62 FC | 	wrlong	result1, local01
1a944     E7 F0 03 F6 | 	mov	ptra, fp
1a948     F2 00 A0 FD | 	call	#popregs_
1a94c                 | _do_setpan_ret
1a94c     2D 00 64 FD | 	ret
1a950                 | 
1a950                 | ' 
1a950                 | ' ' ------------------ setsustain
1a950                 | ' 
1a950                 | ' sub do_setsustain
1a950                 | _do_setsustain
1a950     02 CA 05 F6 | 	mov	COUNT_, #2
1a954     E8 00 A0 FD | 	call	#pushregs_
1a958     18 F0 07 F1 | 	add	ptra, #24
1a95c     48 2D BF FD | 	call	#_pop
1a960     3D 93 02 F6 | 	mov	arg01, result1
1a964     3E A7 02 F6 | 	mov	local01, result2
1a968     3F A9 02 F6 | 	mov	local02, result3
1a96c     E7 92 62 FC | 	wrlong	arg01, fp
1a970     04 CE 05 F1 | 	add	fp, #4
1a974     E7 A6 62 FC | 	wrlong	local01, fp
1a978     04 CE 05 F1 | 	add	fp, #4
1a97c     E7 A8 62 FC | 	wrlong	local02, fp
1a980     08 CE 85 F1 | 	sub	fp, #8
1a984     20 2D BF FD | 	call	#_pop
1a988     3D A9 02 F6 | 	mov	local02, result1
1a98c     0C CE 05 F1 | 	add	fp, #12
1a990     E7 A8 62 FC | 	wrlong	local02, fp
1a994     04 CE 05 F1 | 	add	fp, #4
1a998     E7 7C 62 FC | 	wrlong	result2, fp
1a99c     04 CE 05 F1 | 	add	fp, #4
1a9a0     E7 7E 62 FC | 	wrlong	result3, fp
1a9a4     08 CE 85 F1 | 	sub	fp, #8
1a9a8     E7 92 02 F6 | 	mov	arg01, fp
1a9ac     0C CE 85 F1 | 	sub	fp, #12
1a9b0     D0 2E BF FD | 	call	#_converttoint
1a9b4     3D A7 02 F6 | 	mov	local01, result1
1a9b8     03 A6 66 F0 | 	shl	local01, #3
1a9bc     3D A7 82 F1 | 	sub	local01, result1
1a9c0     02 A6 66 F0 | 	shl	local01, #2
1a9c4     32 A9 02 F6 | 	mov	local02, objptr
1a9c8     15 00 00 FF 
1a9cc     38 A9 06 F1 | 	add	local02, ##11064
1a9d0     54 A7 02 F1 | 	add	local01, local02
1a9d4     E7 92 02 F6 | 	mov	arg01, fp
1a9d8     A8 2E BF FD | 	call	#_converttoint
1a9dc     14 A6 06 F1 | 	add	local01, #20
1a9e0     53 7B 52 FC | 	wrword	result1, local01
1a9e4     E7 F0 03 F6 | 	mov	ptra, fp
1a9e8     F2 00 A0 FD | 	call	#popregs_
1a9ec                 | _do_setsustain_ret
1a9ec     2D 00 64 FD | 	ret
1a9f0                 | 
1a9f0                 | ' 
1a9f0                 | ' ' ------------------ setvol
1a9f0                 | ' 
1a9f0                 | ' sub do_setvol
1a9f0                 | _do_setvol
1a9f0     02 CA 05 F6 | 	mov	COUNT_, #2
1a9f4     E8 00 A0 FD | 	call	#pushregs_
1a9f8     18 F0 07 F1 | 	add	ptra, #24
1a9fc     A8 2C BF FD | 	call	#_pop
1aa00     3D 93 02 F6 | 	mov	arg01, result1
1aa04     3E A7 02 F6 | 	mov	local01, result2
1aa08     3F A9 02 F6 | 	mov	local02, result3
1aa0c     E7 92 62 FC | 	wrlong	arg01, fp
1aa10     04 CE 05 F1 | 	add	fp, #4
1aa14     E7 A6 62 FC | 	wrlong	local01, fp
1aa18     04 CE 05 F1 | 	add	fp, #4
1aa1c     E7 A8 62 FC | 	wrlong	local02, fp
1aa20     08 CE 85 F1 | 	sub	fp, #8
1aa24     80 2C BF FD | 	call	#_pop
1aa28     3D A9 02 F6 | 	mov	local02, result1
1aa2c     0C CE 05 F1 | 	add	fp, #12
1aa30     E7 A8 62 FC | 	wrlong	local02, fp
1aa34     04 CE 05 F1 | 	add	fp, #4
1aa38     E7 7C 62 FC | 	wrlong	result2, fp
1aa3c     04 CE 05 F1 | 	add	fp, #4
1aa40     E7 7E 62 FC | 	wrlong	result3, fp
1aa44     08 CE 85 F1 | 	sub	fp, #8
1aa48     E7 92 02 F6 | 	mov	arg01, fp
1aa4c     0C CE 85 F1 | 	sub	fp, #12
1aa50     30 2E BF FD | 	call	#_converttoint
1aa54     3D A7 02 F6 | 	mov	local01, result1
1aa58     03 A6 66 F0 | 	shl	local01, #3
1aa5c     3D A7 82 F1 | 	sub	local01, result1
1aa60     02 A6 66 F0 | 	shl	local01, #2
1aa64     32 A9 02 F6 | 	mov	local02, objptr
1aa68     15 00 00 FF 
1aa6c     38 A9 06 F1 | 	add	local02, ##11064
1aa70     54 A7 02 F1 | 	add	local01, local02
1aa74     E7 92 02 F6 | 	mov	arg01, fp
1aa78     C4 2E BF FD | 	call	#_converttofloat
1aa7c     0C A6 06 F1 | 	add	local01, #12
1aa80     53 7B 62 FC | 	wrlong	result1, local01
1aa84     E7 F0 03 F6 | 	mov	ptra, fp
1aa88     F2 00 A0 FD | 	call	#popregs_
1aa8c                 | _do_setvol_ret
1aa8c     2D 00 64 FD | 	ret
1aa90                 | 
1aa90                 | ' 
1aa90                 | ' ' ------------------ setwave
1aa90                 | ' 
1aa90                 | ' sub do_setwave
1aa90                 | _do_setwave
1aa90     02 CA 05 F6 | 	mov	COUNT_, #2
1aa94     E8 00 A0 FD | 	call	#pushregs_
1aa98     18 F0 07 F1 | 	add	ptra, #24
1aa9c     08 2C BF FD | 	call	#_pop
1aaa0     3D 93 02 F6 | 	mov	arg01, result1
1aaa4     3E A7 02 F6 | 	mov	local01, result2
1aaa8     3F A9 02 F6 | 	mov	local02, result3
1aaac     E7 92 62 FC | 	wrlong	arg01, fp
1aab0     04 CE 05 F1 | 	add	fp, #4
1aab4     E7 A6 62 FC | 	wrlong	local01, fp
1aab8     04 CE 05 F1 | 	add	fp, #4
1aabc     E7 A8 62 FC | 	wrlong	local02, fp
1aac0     08 CE 85 F1 | 	sub	fp, #8
1aac4     E0 2B BF FD | 	call	#_pop
1aac8     3D A9 02 F6 | 	mov	local02, result1
1aacc     0C CE 05 F1 | 	add	fp, #12
1aad0     E7 A8 62 FC | 	wrlong	local02, fp
1aad4     04 CE 05 F1 | 	add	fp, #4
1aad8     E7 7C 62 FC | 	wrlong	result2, fp
1aadc     04 CE 05 F1 | 	add	fp, #4
1aae0     E7 7E 62 FC | 	wrlong	result3, fp
1aae4     08 CE 85 F1 | 	sub	fp, #8
1aae8     E7 92 02 F6 | 	mov	arg01, fp
1aaec     0C CE 85 F1 | 	sub	fp, #12
1aaf0     90 2D BF FD | 	call	#_converttoint
1aaf4     3D A7 02 F6 | 	mov	local01, result1
1aaf8     03 A6 66 F0 | 	shl	local01, #3
1aafc     3D A7 82 F1 | 	sub	local01, result1
1ab00     02 A6 66 F0 | 	shl	local01, #2
1ab04     32 A9 02 F6 | 	mov	local02, objptr
1ab08     15 00 00 FF 
1ab0c     38 A9 06 F1 | 	add	local02, ##11064
1ab10     54 A7 02 F1 | 	add	local01, local02
1ab14     E7 92 02 F6 | 	mov	arg01, fp
1ab18     68 2D BF FD | 	call	#_converttoint
1ab1c     04 A6 06 F1 | 	add	local01, #4
1ab20     53 7B 42 FC | 	wrbyte	result1, local01
1ab24     E7 F0 03 F6 | 	mov	ptra, fp
1ab28     F2 00 A0 FD | 	call	#popregs_
1ab2c                 | _do_setwave_ret
1ab2c     2D 00 64 FD | 	ret
1ab30                 | 
1ab30                 | ' 
1ab30                 | ' ' ------------------ shutup
1ab30                 | ' 
1ab30                 | ' sub do_shutup
1ab30                 | _do_shutup
1ab30     03 CA 05 F6 | 	mov	COUNT_, #3
1ab34     E8 00 A0 FD | 	call	#pushregs_
1ab38     18 F0 07 F1 | 	add	ptra, #24
1ab3c     4B 00 00 FF 
1ab40     A0 64 06 F1 | 	add	objptr, ##38560
1ab44     32 A7 02 FB | 	rdlong	local01, objptr
1ab48     53 A9 02 F6 | 	mov	local02, local01
1ab4c     01 A8 66 F0 | 	shl	local02, #1
1ab50     53 A9 02 F1 | 	add	local02, local01
1ab54     02 A8 66 F0 | 	shl	local02, #2
1ab58     03 00 00 FF 
1ab5c     04 64 86 F1 | 	sub	objptr, ##1540
1ab60     32 A9 02 F1 | 	add	local02, objptr
1ab64     54 A9 0A FB | 	rdlong	local02, local02 wz
1ab68                 | ' 
1ab68                 | ' numpar=compiledline(lineptr_e).result.uresult
1ab68                 | ' if numpar=0 then
1ab68     48 00 00 FF 
1ab6c     9C 64 86 F1 | 	sub	objptr, ##37020
1ab70     40 00 90 5D |  if_ne	jmp	#LR__2212
1ab74                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1ab74     00 AA 06 F6 | 	mov	local03, #0
1ab78     38 00 00 FF 
1ab7c     30 64 06 F1 | 	add	objptr, ##28720
1ab80     D7 12 48 FB | 	callpa	#(@LR__2211-@LR__2210)>>2,fcache_load_ptr_
1ab84                 | LR__2210
1ab84     32 93 02 FB | 	rdlong	arg01, objptr
1ab88     55 A9 02 F6 | 	mov	local02, local03
1ab8c     06 A8 66 F0 | 	shl	local02, #6
1ab90     54 93 02 F1 | 	add	arg01, local02
1ab94     14 92 06 F1 | 	add	arg01, #20
1ab98     49 01 58 FC | 	wrword	#0, arg01
1ab9c     01 AA 06 F1 | 	add	local03, #1
1aba0     08 AA 56 F2 | 	cmps	local03, #8 wc
1aba4     DC FF 9F CD |  if_b	jmp	#LR__2210
1aba8                 | LR__2211
1aba8     38 00 00 FF 
1abac     30 64 86 F1 | 	sub	objptr, ##28720
1abb0     58 00 90 FD | 	jmp	#LR__2213
1abb4                 | LR__2212
1abb4     F0 2A BF FD | 	call	#_pop
1abb8     3F A7 02 F6 | 	mov	local01, result3
1abbc     E7 7A 62 FC | 	wrlong	result1, fp
1abc0     04 CE 05 F1 | 	add	fp, #4
1abc4     E7 7C 62 FC | 	wrlong	result2, fp
1abc8     04 CE 05 F1 | 	add	fp, #4
1abcc     E7 A6 62 FC | 	wrlong	local01, fp
1abd0     08 CE 85 F1 | 	sub	fp, #8
1abd4     E7 92 02 F6 | 	mov	arg01, fp
1abd8     A8 2C BF FD | 	call	#_converttoint
1abdc     3D AB 52 F6 | 	abs	local03, result1 wc
1abe0     07 AA 06 F5 | 	and	local03, #7
1abe4     55 A9 82 F6 | 	negc	local02, local03
1abe8     38 00 00 FF 
1abec     30 64 06 F1 | 	add	objptr, ##28720
1abf0     32 93 02 FB | 	rdlong	arg01, objptr
1abf4     38 00 00 FF 
1abf8     30 64 86 F1 | 	sub	objptr, ##28720
1abfc     06 A8 66 F0 | 	shl	local02, #6
1ac00     54 93 02 F1 | 	add	arg01, local02
1ac04     14 92 06 F1 | 	add	arg01, #20
1ac08     49 01 58 FC | 	wrword	#0, arg01
1ac0c                 | LR__2213
1ac0c     E7 F0 03 F6 | 	mov	ptra, fp
1ac10     F2 00 A0 FD | 	call	#popregs_
1ac14                 | _do_shutup_ret
1ac14     2D 00 64 FD | 	ret
1ac18                 | 
1ac18                 | ' 
1ac18                 | ' ' ------------------ sin
1ac18                 | ' 
1ac18                 | ' sub do_sin
1ac18                 | _do_sin
1ac18     01 CA 05 F6 | 	mov	COUNT_, #1
1ac1c     E8 00 A0 FD | 	call	#pushregs_
1ac20     10 F0 07 F1 | 	add	ptra, #16
1ac24     4B 00 00 FF 
1ac28     A0 64 06 F1 | 	add	objptr, ##38560
1ac2c     32 97 02 FB | 	rdlong	arg03, objptr
1ac30     4B 95 02 F6 | 	mov	arg02, arg03
1ac34     01 94 66 F0 | 	shl	arg02, #1
1ac38     4B 95 02 F1 | 	add	arg02, arg03
1ac3c     02 94 66 F0 | 	shl	arg02, #2
1ac40     03 00 00 FF 
1ac44     04 64 86 F1 | 	sub	objptr, ##1540
1ac48     32 95 02 F1 | 	add	arg02, objptr
1ac4c     4A 97 02 FB | 	rdlong	arg03, arg02
1ac50                 | ' 
1ac50                 | ' numpar=compiledline(lineptr_e).result.uresult
1ac50                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1ac50     02 96 16 F2 | 	cmp	arg03, #2 wc
1ac54     48 00 00 FF 
1ac58     9C 64 86 F1 | 	sub	objptr, ##37020
1ac5c     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1ac60     40 00 90 4D |  if_c_and_nz	jmp	#LR__2220
1ac64     00 92 06 F6 | 	mov	arg01, #0
1ac68     F4 F2 B0 FD | 	call	#__system___getiolock_0622
1ac6c     3D 93 02 F6 | 	mov	arg01, result1
1ac70     68 9D B0 FD | 	call	#__system___lockmem
1ac74     98 01 00 FF 
1ac78     4A 95 06 F6 | 	mov	arg02, ##@LR__6090
1ac7c     00 92 06 F6 | 	mov	arg01, #0
1ac80     00 96 06 F6 | 	mov	arg03, #0
1ac84     48 AA B0 FD | 	call	#__system___basic_print_string
1ac88     00 92 06 F6 | 	mov	arg01, #0
1ac8c     D0 F2 B0 FD | 	call	#__system___getiolock_0622
1ac90     3D 01 68 FC | 	wrlong	#0, result1
1ac94     27 92 06 F6 | 	mov	arg01, #39
1ac98     00 94 06 F6 | 	mov	arg02, #0
1ac9c     C0 63 B0 FD | 	call	#_printerror
1aca0     64 00 90 FD | 	jmp	#LR__2221
1aca4                 | LR__2220
1aca4     00 2A BF FD | 	call	#_pop
1aca8     E7 7A 62 FC | 	wrlong	result1, fp
1acac     04 CE 05 F1 | 	add	fp, #4
1acb0     E7 7C 62 FC | 	wrlong	result2, fp
1acb4     04 CE 05 F1 | 	add	fp, #4
1acb8     E7 7E 62 FC | 	wrlong	result3, fp
1acbc     08 CE 85 F1 | 	sub	fp, #8
1acc0     53 00 00 FF 
1acc4     00 65 06 F1 | 	add	objptr, ##42752
1acc8     32 A7 02 FB | 	rdlong	local01, objptr
1accc     53 00 00 FF 
1acd0     00 65 86 F1 | 	sub	objptr, ##42752
1acd4     E7 92 02 F6 | 	mov	arg01, fp
1acd8     64 2C BF FD | 	call	#_converttofloat
1acdc     3D 95 02 F6 | 	mov	arg02, result1
1ace0     53 93 02 F6 | 	mov	arg01, local01
1ace4     C4 C3 B0 FD | 	call	#__system___float_mul
1ace8     3D 93 02 F6 | 	mov	arg01, result1
1acec     2C CD B0 FD | 	call	#__system____builtin_sinf
1acf0     E7 7A 62 FC | 	wrlong	result1, fp
1acf4     08 CE 05 F1 | 	add	fp, #8
1acf8     E7 3C 68 FC | 	wrlong	#30, fp
1acfc     08 CE 85 F1 | 	sub	fp, #8
1ad00     E7 92 02 F6 | 	mov	arg01, fp
1ad04     30 2A BF FD | 	call	#_push
1ad08                 | LR__2221
1ad08     E7 F0 03 F6 | 	mov	ptra, fp
1ad0c     F2 00 A0 FD | 	call	#popregs_
1ad10                 | _do_sin_ret
1ad10     2D 00 64 FD | 	ret
1ad14                 | 
1ad14                 | ' 
1ad14                 | ' ' ------------------ skip
1ad14                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1ad14                 | ' 
1ad14                 | ' sub do_skip
1ad14                 | _do_skip
1ad14     4B 00 00 FF 
1ad18     A0 64 06 F1 | 	add	objptr, ##38560
1ad1c     32 81 02 FB | 	rdlong	_var01, objptr
1ad20     40 83 02 F6 | 	mov	_var02, _var01
1ad24     01 82 66 F0 | 	shl	_var02, #1
1ad28     40 83 02 F1 | 	add	_var02, _var01
1ad2c     02 82 66 F0 | 	shl	_var02, #2
1ad30     03 00 00 FF 
1ad34     04 64 86 F1 | 	sub	objptr, ##1540
1ad38     32 83 02 F1 | 	add	_var02, objptr
1ad3c     41 83 02 FB | 	rdlong	_var02, _var02
1ad40     01 82 86 F1 | 	sub	_var02, #1
1ad44     03 00 00 FF 
1ad48     04 64 06 F1 | 	add	objptr, ##1540
1ad4c     32 83 62 FC | 	wrlong	_var02, objptr
1ad50     4B 00 00 FF 
1ad54     A0 64 86 F1 | 	sub	objptr, ##38560
1ad58                 | _do_skip_ret
1ad58     2D 00 64 FD | 	ret
1ad5c                 | 
1ad5c                 | ' 
1ad5c                 | ' ' ------------------ sprite
1ad5c                 | ' 
1ad5c                 | ' sub do_sprite
1ad5c                 | _do_sprite
1ad5c     02 CA 05 F6 | 	mov	COUNT_, #2
1ad60     E8 00 A0 FD | 	call	#pushregs_
1ad64     30 F0 07 F1 | 	add	ptra, #48
1ad68     3C 29 BF FD | 	call	#_pop
1ad6c     3D 95 02 F6 | 	mov	arg02, result1
1ad70     3E 97 02 F6 | 	mov	arg03, result2
1ad74     3F 93 02 F6 | 	mov	arg01, result3
1ad78     18 CE 05 F1 | 	add	fp, #24
1ad7c     E7 94 62 FC | 	wrlong	arg02, fp
1ad80     04 CE 05 F1 | 	add	fp, #4
1ad84     E7 96 62 FC | 	wrlong	arg03, fp
1ad88     04 CE 05 F1 | 	add	fp, #4
1ad8c     E7 92 62 FC | 	wrlong	arg01, fp
1ad90     20 CE 85 F1 | 	sub	fp, #32
1ad94     10 29 BF FD | 	call	#_pop
1ad98     3D 95 02 F6 | 	mov	arg02, result1
1ad9c     3E 97 02 F6 | 	mov	arg03, result2
1ada0     3F 93 02 F6 | 	mov	arg01, result3
1ada4     0C CE 05 F1 | 	add	fp, #12
1ada8     E7 94 62 FC | 	wrlong	arg02, fp
1adac     04 CE 05 F1 | 	add	fp, #4
1adb0     E7 96 62 FC | 	wrlong	arg03, fp
1adb4     04 CE 05 F1 | 	add	fp, #4
1adb8     E7 92 62 FC | 	wrlong	arg01, fp
1adbc     14 CE 85 F1 | 	sub	fp, #20
1adc0     E4 28 BF FD | 	call	#_pop
1adc4     3F 95 02 F6 | 	mov	arg02, result3
1adc8     E7 7A 62 FC | 	wrlong	result1, fp
1adcc     04 CE 05 F1 | 	add	fp, #4
1add0     E7 7C 62 FC | 	wrlong	result2, fp
1add4     04 CE 05 F1 | 	add	fp, #4
1add8     E7 94 62 FC | 	wrlong	arg02, fp
1addc     08 CE 85 F1 | 	sub	fp, #8
1ade0     E7 92 02 F6 | 	mov	arg01, fp
1ade4     9C 2A BF FD | 	call	#_converttoint
1ade8     3D A7 02 F6 | 	mov	local01, result1
1adec     E7 92 02 F6 | 	mov	arg01, fp
1adf0     0C 92 06 F1 | 	add	arg01, #12
1adf4     8C 2A BF FD | 	call	#_converttoint
1adf8     3D A9 02 F6 | 	mov	local02, result1
1adfc     E7 92 02 F6 | 	mov	arg01, fp
1ae00     18 92 06 F1 | 	add	arg01, #24
1ae04     7C 2A BF FD | 	call	#_converttoint
1ae08     3D 97 02 F6 | 	mov	arg03, result1
1ae0c     53 93 02 F6 | 	mov	arg01, local01
1ae10     54 95 02 F6 | 	mov	arg02, local02
1ae14     F4 71 B0 FD | 	call	#_hg010b_spin2_setspritepos
1ae18     E7 F0 03 F6 | 	mov	ptra, fp
1ae1c     F2 00 A0 FD | 	call	#popregs_
1ae20                 | _do_sprite_ret
1ae20     2D 00 64 FD | 	ret
1ae24                 | 
1ae24                 | ' 
1ae24                 | ' ' ------------------ sqr
1ae24                 | ' 
1ae24                 | ' sub do_sqr
1ae24                 | _do_sqr
1ae24     00 CA 05 F6 | 	mov	COUNT_, #0
1ae28     E8 00 A0 FD | 	call	#pushregs_
1ae2c     10 F0 07 F1 | 	add	ptra, #16
1ae30     4B 00 00 FF 
1ae34     A0 64 06 F1 | 	add	objptr, ##38560
1ae38     32 97 02 FB | 	rdlong	arg03, objptr
1ae3c     4B 95 02 F6 | 	mov	arg02, arg03
1ae40     01 94 66 F0 | 	shl	arg02, #1
1ae44     4B 95 02 F1 | 	add	arg02, arg03
1ae48     02 94 66 F0 | 	shl	arg02, #2
1ae4c     03 00 00 FF 
1ae50     04 64 86 F1 | 	sub	objptr, ##1540
1ae54     32 95 02 F1 | 	add	arg02, objptr
1ae58     4A 97 02 FB | 	rdlong	arg03, arg02
1ae5c                 | ' 
1ae5c                 | ' numpar=compiledline(lineptr_e).result.uresult
1ae5c                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1ae5c     02 96 16 F2 | 	cmp	arg03, #2 wc
1ae60     48 00 00 FF 
1ae64     9C 64 86 F1 | 	sub	objptr, ##37020
1ae68     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1ae6c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2230
1ae70     00 92 06 F6 | 	mov	arg01, #0
1ae74     E8 F0 B0 FD | 	call	#__system___getiolock_0622
1ae78     3D 93 02 F6 | 	mov	arg01, result1
1ae7c     5C 9B B0 FD | 	call	#__system___lockmem
1ae80     98 01 00 FF 
1ae84     50 95 06 F6 | 	mov	arg02, ##@LR__6091
1ae88     00 92 06 F6 | 	mov	arg01, #0
1ae8c     00 96 06 F6 | 	mov	arg03, #0
1ae90     3C A8 B0 FD | 	call	#__system___basic_print_string
1ae94     00 92 06 F6 | 	mov	arg01, #0
1ae98     C4 F0 B0 FD | 	call	#__system___getiolock_0622
1ae9c     3D 01 68 FC | 	wrlong	#0, result1
1aea0     27 92 06 F6 | 	mov	arg01, #39
1aea4     00 94 06 F6 | 	mov	arg02, #0
1aea8     B4 61 B0 FD | 	call	#_printerror
1aeac     48 00 90 FD | 	jmp	#LR__2231
1aeb0                 | LR__2230
1aeb0     F4 27 BF FD | 	call	#_pop
1aeb4     3F 97 02 F6 | 	mov	arg03, result3
1aeb8     E7 7A 62 FC | 	wrlong	result1, fp
1aebc     04 CE 05 F1 | 	add	fp, #4
1aec0     E7 7C 62 FC | 	wrlong	result2, fp
1aec4     04 CE 05 F1 | 	add	fp, #4
1aec8     E7 96 62 FC | 	wrlong	arg03, fp
1aecc     08 CE 85 F1 | 	sub	fp, #8
1aed0     E7 92 02 F6 | 	mov	arg01, fp
1aed4     68 2A BF FD | 	call	#_converttofloat
1aed8     3D 93 02 F6 | 	mov	arg01, result1
1aedc     F4 C0 B0 FD | 	call	#__system___float_sqrt
1aee0     E7 7A 62 FC | 	wrlong	result1, fp
1aee4     08 CE 05 F1 | 	add	fp, #8
1aee8     E7 3C 68 FC | 	wrlong	#30, fp
1aeec     08 CE 85 F1 | 	sub	fp, #8
1aef0     E7 92 02 F6 | 	mov	arg01, fp
1aef4     40 28 BF FD | 	call	#_push
1aef8                 | LR__2231
1aef8     E7 F0 03 F6 | 	mov	ptra, fp
1aefc     F2 00 A0 FD | 	call	#popregs_
1af00                 | _do_sqr_ret
1af00     2D 00 64 FD | 	ret
1af04                 | 
1af04                 | ' 
1af04                 | ' ' ------------------ stick
1af04                 | ' 
1af04                 | ' sub do_stick
1af04                 | _do_stick
1af04     02 CA 05 F6 | 	mov	COUNT_, #2
1af08     E8 00 A0 FD | 	call	#pushregs_
1af0c     10 F0 07 F1 | 	add	ptra, #16
1af10     4B 00 00 FF 
1af14     A0 64 06 F1 | 	add	objptr, ##38560
1af18     32 A7 02 FB | 	rdlong	local01, objptr
1af1c     53 97 02 F6 | 	mov	arg03, local01
1af20     01 96 66 F0 | 	shl	arg03, #1
1af24     53 97 02 F1 | 	add	arg03, local01
1af28     02 96 66 F0 | 	shl	arg03, #2
1af2c     03 00 00 FF 
1af30     04 64 86 F1 | 	sub	objptr, ##1540
1af34     32 97 02 F1 | 	add	arg03, objptr
1af38     4B A9 02 FB | 	rdlong	local02, arg03
1af3c                 | ' 
1af3c                 | ' numpar=compiledline(lineptr_e).result.uresult
1af3c                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1af3c     02 A8 16 F2 | 	cmp	local02, #2 wc
1af40     48 00 00 FF 
1af44     9C 64 86 F1 | 	sub	objptr, ##37020
1af48     40 00 90 CD |  if_b	jmp	#LR__2240
1af4c     00 92 06 F6 | 	mov	arg01, #0
1af50     0C F0 B0 FD | 	call	#__system___getiolock_0622
1af54     3D 93 02 F6 | 	mov	arg01, result1
1af58     80 9A B0 FD | 	call	#__system___lockmem
1af5c     98 01 00 FF 
1af60     56 95 06 F6 | 	mov	arg02, ##@LR__6092
1af64     00 92 06 F6 | 	mov	arg01, #0
1af68     00 96 06 F6 | 	mov	arg03, #0
1af6c     60 A7 B0 FD | 	call	#__system___basic_print_string
1af70     00 92 06 F6 | 	mov	arg01, #0
1af74     E8 EF B0 FD | 	call	#__system___getiolock_0622
1af78     3D 01 68 FC | 	wrlong	#0, result1
1af7c     27 92 06 F6 | 	mov	arg01, #39
1af80     00 94 06 F6 | 	mov	arg02, #0
1af84     D8 60 B0 FD | 	call	#_printerror
1af88     E8 00 90 FD | 	jmp	#LR__2244
1af8c                 | LR__2240
1af8c                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1af8c     00 A8 0E F2 | 	cmp	local02, #0 wz
1af90     30 00 90 5D |  if_ne	jmp	#LR__2241
1af94     53 00 00 FF 
1af98     74 64 06 F1 | 	add	objptr, ##42612
1af9c     32 A9 02 FB | 	rdlong	local02, objptr
1afa0     53 00 00 FF 
1afa4     74 64 86 F1 | 	sub	objptr, ##42612
1afa8     E7 A8 62 FC | 	wrlong	local02, fp
1afac     08 CE 05 F1 | 	add	fp, #8
1afb0     E7 3A 68 FC | 	wrlong	#29, fp
1afb4     08 CE 85 F1 | 	sub	fp, #8
1afb8     E7 92 02 F6 | 	mov	arg01, fp
1afbc     78 27 BF FD | 	call	#_push
1afc0     B0 00 90 FD | 	jmp	#LR__2244
1afc4                 | LR__2241
1afc4     E0 26 BF FD | 	call	#_pop
1afc8     E7 7A 62 FC | 	wrlong	result1, fp
1afcc     04 CE 05 F1 | 	add	fp, #4
1afd0     E7 7C 62 FC | 	wrlong	result2, fp
1afd4     04 CE 05 F1 | 	add	fp, #4
1afd8     E7 7E 62 FC | 	wrlong	result3, fp
1afdc                 | ' t1=pop()
1afdc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1afdc     08 CE 85 F1 | 	sub	fp, #8
1afe0     1C 7E 0E F2 | 	cmp	result3, #28 wz
1afe4     08 CE 05 51 |  if_ne	add	fp, #8
1afe8     E7 A6 02 5B |  if_ne	rdlong	local01, fp
1afec     08 CE 85 51 |  if_ne	sub	fp, #8
1aff0     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
1aff4     70 00 90 5D |  if_ne	jmp	#LR__2243
1aff8     E7 A6 02 FB | 	rdlong	local01, fp
1affc     53 00 00 FF 
1b000     60 65 06 F1 | 	add	objptr, ##42848
1b004     32 A7 62 FC | 	wrlong	local01, objptr
1b008                 | '   q=t1.result.uresult
1b008                 | '   if q<7 then 
1b008     53 00 00 FF 
1b00c     60 65 86 F1 | 	sub	objptr, ##42848
1b010     07 A6 56 F2 | 	cmps	local01, #7 wc
1b014     40 00 90 3D |  if_ae	jmp	#LR__2242
1b018     53 00 00 FF 
1b01c     60 65 06 F1 | 	add	objptr, ##42848
1b020     32 A7 02 FB | 	rdlong	local01, objptr
1b024     02 A6 66 F0 | 	shl	local01, #2
1b028     EC 64 86 F1 | 	sub	objptr, #236
1b02c     32 A7 02 F1 | 	add	local01, objptr
1b030     53 A9 02 FB | 	rdlong	local02, local01
1b034     E7 A8 62 FC | 	wrlong	local02, fp
1b038     08 CE 05 F1 | 	add	fp, #8
1b03c     E7 3A 68 FC | 	wrlong	#29, fp
1b040     08 CE 85 F1 | 	sub	fp, #8
1b044     E7 92 02 F6 | 	mov	arg01, fp
1b048     53 00 00 FF 
1b04c     74 64 86 F1 | 	sub	objptr, ##42612
1b050     E4 26 BF FD | 	call	#_push
1b054                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1b054     1C 00 90 FD | 	jmp	#LR__2244
1b058                 | LR__2242
1b058     29 92 06 F6 | 	mov	arg01, #41
1b05c     00 94 06 F6 | 	mov	arg02, #0
1b060     FC 5F B0 FD | 	call	#_printerror
1b064                 | '      printerror(41) : return
1b064     0C 00 90 FD | 	jmp	#LR__2244
1b068                 | LR__2243
1b068     29 92 06 F6 | 	mov	arg01, #41
1b06c     00 94 06 F6 | 	mov	arg02, #0
1b070     EC 5F B0 FD | 	call	#_printerror
1b074                 | LR__2244
1b074     E7 F0 03 F6 | 	mov	ptra, fp
1b078     F2 00 A0 FD | 	call	#popregs_
1b07c                 | _do_stick_ret
1b07c     2D 00 64 FD | 	ret
1b080                 | 
1b080                 | ' 
1b080                 | ' 
1b080                 | ' sub do_str
1b080                 | _do_str
1b080     02 CA 05 F6 | 	mov	COUNT_, #2
1b084     E8 00 A0 FD | 	call	#pushregs_
1b088     14 F0 07 F1 | 	add	ptra, #20
1b08c     4B 00 00 FF 
1b090     A0 64 06 F1 | 	add	objptr, ##38560
1b094     32 97 02 FB | 	rdlong	arg03, objptr
1b098     4B 95 02 F6 | 	mov	arg02, arg03
1b09c     01 94 66 F0 | 	shl	arg02, #1
1b0a0     4B 95 02 F1 | 	add	arg02, arg03
1b0a4     02 94 66 F0 | 	shl	arg02, #2
1b0a8     03 00 00 FF 
1b0ac     04 64 86 F1 | 	sub	objptr, ##1540
1b0b0     32 95 02 F1 | 	add	arg02, objptr
1b0b4     4A 97 02 FB | 	rdlong	arg03, arg02
1b0b8                 | ' 
1b0b8                 | ' numpar=compiledline(lineptr_e).result.uresult
1b0b8                 | ' if numpar<>1 then print "str$: "; : printerror(39) : return
1b0b8     01 96 0E F2 | 	cmp	arg03, #1 wz
1b0bc     48 00 00 FF 
1b0c0     9C 64 86 F1 | 	sub	objptr, ##37020
1b0c4     40 00 90 AD |  if_e	jmp	#LR__2250
1b0c8     00 92 06 F6 | 	mov	arg01, #0
1b0cc     90 EE B0 FD | 	call	#__system___getiolock_0622
1b0d0     3D 93 02 F6 | 	mov	arg01, result1
1b0d4     04 99 B0 FD | 	call	#__system___lockmem
1b0d8     98 01 00 FF 
1b0dc     5E 95 06 F6 | 	mov	arg02, ##@LR__6093
1b0e0     00 92 06 F6 | 	mov	arg01, #0
1b0e4     00 96 06 F6 | 	mov	arg03, #0
1b0e8     E4 A5 B0 FD | 	call	#__system___basic_print_string
1b0ec     00 92 06 F6 | 	mov	arg01, #0
1b0f0     6C EE B0 FD | 	call	#__system___getiolock_0622
1b0f4     3D 01 68 FC | 	wrlong	#0, result1
1b0f8     27 92 06 F6 | 	mov	arg01, #39
1b0fc     00 94 06 F6 | 	mov	arg02, #0
1b100     5C 5F B0 FD | 	call	#_printerror
1b104     F0 00 90 FD | 	jmp	#LR__2259
1b108                 | LR__2250
1b108     9C 25 BF FD | 	call	#_pop
1b10c     3F 97 02 F6 | 	mov	arg03, result3
1b110     E7 7A 62 FC | 	wrlong	result1, fp
1b114     04 CE 05 F1 | 	add	fp, #4
1b118     E7 7C 62 FC | 	wrlong	result2, fp
1b11c     04 CE 05 F1 | 	add	fp, #4
1b120     E7 96 62 FC | 	wrlong	arg03, fp
1b124                 | ' 
1b124                 | ' t1=pop()
1b124                 | ' if t1.result_type=result_int then 
1b124     08 CE 85 F1 | 	sub	fp, #8
1b128     1C 96 0E F2 | 	cmp	arg03, #28 wz
1b12c     28 00 90 5D |  if_ne	jmp	#LR__2251
1b130     E7 92 02 FB | 	rdlong	arg01, fp
1b134     49 93 52 F6 | 	abs	arg01, arg01 wc
1b138     1F A6 C6 C9 |  if_b	decod	local01, #31
1b13c     00 A6 06 36 |  if_ae	mov	local01, #0
1b140     64 BB B0 FD | 	call	#__system___float_fromuns
1b144     53 7B 62 F5 | 	xor	result1, local01
1b148     3D 93 02 F6 | 	mov	arg01, result1
1b14c     2C B3 B0 FD | 	call	#__system__str_S
1b150     3D A9 02 F6 | 	mov	local02, result1
1b154     88 00 90 FD | 	jmp	#LR__2258
1b158                 | LR__2251
1b158     08 CE 05 F1 | 	add	fp, #8
1b15c     E7 96 02 FB | 	rdlong	arg03, fp
1b160     08 CE 85 F1 | 	sub	fp, #8
1b164     1D 96 0E F2 | 	cmp	arg03, #29 wz
1b168     18 00 90 5D |  if_ne	jmp	#LR__2252
1b16c     E7 92 02 FB | 	rdlong	arg01, fp
1b170     34 BB B0 FD | 	call	#__system___float_fromuns
1b174     3D 93 02 F6 | 	mov	arg01, result1
1b178     00 B3 B0 FD | 	call	#__system__str_S
1b17c     3D A9 02 F6 | 	mov	local02, result1
1b180     5C 00 90 FD | 	jmp	#LR__2257
1b184                 | LR__2252
1b184     08 CE 05 F1 | 	add	fp, #8
1b188     E7 96 02 FB | 	rdlong	arg03, fp
1b18c     08 CE 85 F1 | 	sub	fp, #8
1b190     1E 96 0E F2 | 	cmp	arg03, #30 wz
1b194     10 00 90 5D |  if_ne	jmp	#LR__2253
1b198     E7 92 02 FB | 	rdlong	arg01, fp
1b19c     DC B2 B0 FD | 	call	#__system__str_S
1b1a0     3D A9 02 F6 | 	mov	local02, result1
1b1a4     38 00 90 FD | 	jmp	#LR__2256
1b1a8                 | LR__2253
1b1a8     08 CE 05 F1 | 	add	fp, #8
1b1ac     E7 96 02 FB | 	rdlong	arg03, fp
1b1b0     08 CE 85 F1 | 	sub	fp, #8
1b1b4     2B 96 0E F2 | 	cmp	arg03, #43 wz
1b1b8     10 00 90 5D |  if_ne	jmp	#LR__2254
1b1bc     E7 92 02 FB | 	rdlong	arg01, fp
1b1c0     54 26 BF FD | 	call	#_convertstring
1b1c4     3D A9 02 F6 | 	mov	local02, result1
1b1c8     14 00 90 FD | 	jmp	#LR__2255
1b1cc                 | LR__2254
1b1cc     08 CE 05 F1 | 	add	fp, #8
1b1d0     E7 7C 02 FB | 	rdlong	result2, fp
1b1d4     08 CE 85 F1 | 	sub	fp, #8
1b1d8     1F 7C 0E F2 | 	cmp	result2, #31 wz
1b1dc     E7 A8 02 AB |  if_e	rdlong	local02, fp
1b1e0                 | LR__2255
1b1e0                 | LR__2256
1b1e0                 | LR__2257
1b1e0                 | LR__2258
1b1e0     E7 A8 62 FC | 	wrlong	local02, fp
1b1e4     08 CE 05 F1 | 	add	fp, #8
1b1e8     E7 3E 68 FC | 	wrlong	#31, fp
1b1ec     08 CE 85 F1 | 	sub	fp, #8
1b1f0     E7 92 02 F6 | 	mov	arg01, fp
1b1f4     40 25 BF FD | 	call	#_push
1b1f8                 | '     t1.result.sresult=s : t1.result_type=result_string : push t1 : return 
1b1f8                 | LR__2259
1b1f8     E7 F0 03 F6 | 	mov	ptra, fp
1b1fc     F2 00 A0 FD | 	call	#popregs_
1b200                 | _do_str_ret
1b200     2D 00 64 FD | 	ret
1b204                 | 
1b204                 | ' ' ------------------ strig
1b204                 | ' 
1b204                 | ' sub do_strig
1b204                 | _do_strig
1b204     02 CA 05 F6 | 	mov	COUNT_, #2
1b208     E8 00 A0 FD | 	call	#pushregs_
1b20c     10 F0 07 F1 | 	add	ptra, #16
1b210     4B 00 00 FF 
1b214     A0 64 06 F1 | 	add	objptr, ##38560
1b218     32 A7 02 FB | 	rdlong	local01, objptr
1b21c     53 97 02 F6 | 	mov	arg03, local01
1b220     01 96 66 F0 | 	shl	arg03, #1
1b224     53 97 02 F1 | 	add	arg03, local01
1b228     02 96 66 F0 | 	shl	arg03, #2
1b22c     03 00 00 FF 
1b230     04 64 86 F1 | 	sub	objptr, ##1540
1b234     32 97 02 F1 | 	add	arg03, objptr
1b238     4B A9 02 FB | 	rdlong	local02, arg03
1b23c                 | ' 
1b23c                 | ' numpar=compiledline(lineptr_e).result.uresult
1b23c                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1b23c     02 A8 16 F2 | 	cmp	local02, #2 wc
1b240     48 00 00 FF 
1b244     9C 64 86 F1 | 	sub	objptr, ##37020
1b248     40 00 90 CD |  if_b	jmp	#LR__2260
1b24c     00 92 06 F6 | 	mov	arg01, #0
1b250     0C ED B0 FD | 	call	#__system___getiolock_0622
1b254     3D 93 02 F6 | 	mov	arg01, result1
1b258     80 97 B0 FD | 	call	#__system___lockmem
1b25c     98 01 00 FF 
1b260     65 95 06 F6 | 	mov	arg02, ##@LR__6094
1b264     00 92 06 F6 | 	mov	arg01, #0
1b268     00 96 06 F6 | 	mov	arg03, #0
1b26c     60 A4 B0 FD | 	call	#__system___basic_print_string
1b270     00 92 06 F6 | 	mov	arg01, #0
1b274     E8 EC B0 FD | 	call	#__system___getiolock_0622
1b278     3D 01 68 FC | 	wrlong	#0, result1
1b27c     27 92 06 F6 | 	mov	arg01, #39
1b280     00 94 06 F6 | 	mov	arg02, #0
1b284     D8 5D B0 FD | 	call	#_printerror
1b288     E8 00 90 FD | 	jmp	#LR__2264
1b28c                 | LR__2260
1b28c                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1b28c     00 A8 0E F2 | 	cmp	local02, #0 wz
1b290     30 00 90 5D |  if_ne	jmp	#LR__2261
1b294     53 00 00 FF 
1b298     90 64 06 F1 | 	add	objptr, ##42640
1b29c     32 A9 02 FB | 	rdlong	local02, objptr
1b2a0     53 00 00 FF 
1b2a4     90 64 86 F1 | 	sub	objptr, ##42640
1b2a8     E7 A8 62 FC | 	wrlong	local02, fp
1b2ac     08 CE 05 F1 | 	add	fp, #8
1b2b0     E7 3A 68 FC | 	wrlong	#29, fp
1b2b4     08 CE 85 F1 | 	sub	fp, #8
1b2b8     E7 92 02 F6 | 	mov	arg01, fp
1b2bc     78 24 BF FD | 	call	#_push
1b2c0     B0 00 90 FD | 	jmp	#LR__2264
1b2c4                 | LR__2261
1b2c4     E0 23 BF FD | 	call	#_pop
1b2c8     E7 7A 62 FC | 	wrlong	result1, fp
1b2cc     04 CE 05 F1 | 	add	fp, #4
1b2d0     E7 7C 62 FC | 	wrlong	result2, fp
1b2d4     04 CE 05 F1 | 	add	fp, #4
1b2d8     E7 7E 62 FC | 	wrlong	result3, fp
1b2dc                 | ' t1=pop()
1b2dc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1b2dc     08 CE 85 F1 | 	sub	fp, #8
1b2e0     1C 7E 0E F2 | 	cmp	result3, #28 wz
1b2e4     08 CE 05 51 |  if_ne	add	fp, #8
1b2e8     E7 A6 02 5B |  if_ne	rdlong	local01, fp
1b2ec     08 CE 85 51 |  if_ne	sub	fp, #8
1b2f0     1D A6 0E 52 |  if_ne	cmp	local01, #29 wz
1b2f4     70 00 90 5D |  if_ne	jmp	#LR__2263
1b2f8     E7 A6 02 FB | 	rdlong	local01, fp
1b2fc     53 00 00 FF 
1b300     60 65 06 F1 | 	add	objptr, ##42848
1b304     32 A7 62 FC | 	wrlong	local01, objptr
1b308                 | '   q=t1.result.uresult
1b308                 | '   if q<7 then 
1b308     53 00 00 FF 
1b30c     60 65 86 F1 | 	sub	objptr, ##42848
1b310     07 A6 56 F2 | 	cmps	local01, #7 wc
1b314     40 00 90 3D |  if_ae	jmp	#LR__2262
1b318     53 00 00 FF 
1b31c     60 65 06 F1 | 	add	objptr, ##42848
1b320     32 A7 02 FB | 	rdlong	local01, objptr
1b324     02 A6 66 F0 | 	shl	local01, #2
1b328     D0 64 86 F1 | 	sub	objptr, #208
1b32c     32 A7 02 F1 | 	add	local01, objptr
1b330     53 A9 02 FB | 	rdlong	local02, local01
1b334     E7 A8 62 FC | 	wrlong	local02, fp
1b338     08 CE 05 F1 | 	add	fp, #8
1b33c     E7 3A 68 FC | 	wrlong	#29, fp
1b340     08 CE 85 F1 | 	sub	fp, #8
1b344     E7 92 02 F6 | 	mov	arg01, fp
1b348     53 00 00 FF 
1b34c     90 64 86 F1 | 	sub	objptr, ##42640
1b350     E4 23 BF FD | 	call	#_push
1b354                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1b354     1C 00 90 FD | 	jmp	#LR__2264
1b358                 | LR__2262
1b358     29 92 06 F6 | 	mov	arg01, #41
1b35c     00 94 06 F6 | 	mov	arg02, #0
1b360     FC 5C B0 FD | 	call	#_printerror
1b364                 | '      printerror(41) : return
1b364     0C 00 90 FD | 	jmp	#LR__2264
1b368                 | LR__2263
1b368     29 92 06 F6 | 	mov	arg01, #41
1b36c     00 94 06 F6 | 	mov	arg02, #0
1b370     EC 5C B0 FD | 	call	#_printerror
1b374                 | LR__2264
1b374     E7 F0 03 F6 | 	mov	ptra, fp
1b378     F2 00 A0 FD | 	call	#popregs_
1b37c                 | _do_strig_ret
1b37c     2D 00 64 FD | 	ret
1b380                 | 
1b380                 | ' 
1b380                 | ' ' ------------------ tan
1b380                 | ' 
1b380                 | ' sub do_tan
1b380                 | _do_tan
1b380     01 CA 05 F6 | 	mov	COUNT_, #1
1b384     E8 00 A0 FD | 	call	#pushregs_
1b388     10 F0 07 F1 | 	add	ptra, #16
1b38c     4B 00 00 FF 
1b390     A0 64 06 F1 | 	add	objptr, ##38560
1b394     32 97 02 FB | 	rdlong	arg03, objptr
1b398     4B 95 02 F6 | 	mov	arg02, arg03
1b39c     01 94 66 F0 | 	shl	arg02, #1
1b3a0     4B 95 02 F1 | 	add	arg02, arg03
1b3a4     02 94 66 F0 | 	shl	arg02, #2
1b3a8     03 00 00 FF 
1b3ac     04 64 86 F1 | 	sub	objptr, ##1540
1b3b0     32 95 02 F1 | 	add	arg02, objptr
1b3b4     4A 97 02 FB | 	rdlong	arg03, arg02
1b3b8                 | ' 
1b3b8                 | ' numpar=compiledline(lineptr_e).result.uresult
1b3b8                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1b3b8     02 96 16 F2 | 	cmp	arg03, #2 wc
1b3bc     48 00 00 FF 
1b3c0     9C 64 86 F1 | 	sub	objptr, ##37020
1b3c4     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1b3c8     40 00 90 4D |  if_c_and_nz	jmp	#LR__2270
1b3cc     00 92 06 F6 | 	mov	arg01, #0
1b3d0     8C EB B0 FD | 	call	#__system___getiolock_0622
1b3d4     3D 93 02 F6 | 	mov	arg01, result1
1b3d8     00 96 B0 FD | 	call	#__system___lockmem
1b3dc     98 01 00 FF 
1b3e0     6D 95 06 F6 | 	mov	arg02, ##@LR__6095
1b3e4     00 92 06 F6 | 	mov	arg01, #0
1b3e8     00 96 06 F6 | 	mov	arg03, #0
1b3ec     E0 A2 B0 FD | 	call	#__system___basic_print_string
1b3f0     00 92 06 F6 | 	mov	arg01, #0
1b3f4     68 EB B0 FD | 	call	#__system___getiolock_0622
1b3f8     3D 01 68 FC | 	wrlong	#0, result1
1b3fc     27 92 06 F6 | 	mov	arg01, #39
1b400     00 94 06 F6 | 	mov	arg02, #0
1b404     58 5C B0 FD | 	call	#_printerror
1b408     64 00 90 FD | 	jmp	#LR__2271
1b40c                 | LR__2270
1b40c     98 22 BF FD | 	call	#_pop
1b410     E7 7A 62 FC | 	wrlong	result1, fp
1b414     04 CE 05 F1 | 	add	fp, #4
1b418     E7 7C 62 FC | 	wrlong	result2, fp
1b41c     04 CE 05 F1 | 	add	fp, #4
1b420     E7 7E 62 FC | 	wrlong	result3, fp
1b424     08 CE 85 F1 | 	sub	fp, #8
1b428     53 00 00 FF 
1b42c     00 65 06 F1 | 	add	objptr, ##42752
1b430     32 A7 02 FB | 	rdlong	local01, objptr
1b434     53 00 00 FF 
1b438     00 65 86 F1 | 	sub	objptr, ##42752
1b43c     E7 92 02 F6 | 	mov	arg01, fp
1b440     FC 24 BF FD | 	call	#_converttofloat
1b444     3D 95 02 F6 | 	mov	arg02, result1
1b448     53 93 02 F6 | 	mov	arg01, local01
1b44c     5C BC B0 FD | 	call	#__system___float_mul
1b450     3D 93 02 F6 | 	mov	arg01, result1
1b454     10 C7 B0 FD | 	call	#__system____builtin_tanf
1b458     E7 7A 62 FC | 	wrlong	result1, fp
1b45c     08 CE 05 F1 | 	add	fp, #8
1b460     E7 3C 68 FC | 	wrlong	#30, fp
1b464     08 CE 85 F1 | 	sub	fp, #8
1b468     E7 92 02 F6 | 	mov	arg01, fp
1b46c     C8 22 BF FD | 	call	#_push
1b470                 | LR__2271
1b470     E7 F0 03 F6 | 	mov	ptra, fp
1b474     F2 00 A0 FD | 	call	#popregs_
1b478                 | _do_tan_ret
1b478     2D 00 64 FD | 	ret
1b47c                 | 
1b47c                 | ' 
1b47c                 | ' ' ------------------ val
1b47c                 | ' 
1b47c                 | ' sub do_val
1b47c                 | _do_val
1b47c     05 CA 05 F6 | 	mov	COUNT_, #5
1b480     E8 00 A0 FD | 	call	#pushregs_
1b484     20 F0 07 F1 | 	add	ptra, #32
1b488     4B 00 00 FF 
1b48c     A0 64 06 F1 | 	add	objptr, ##38560
1b490     32 97 02 FB | 	rdlong	arg03, objptr
1b494     4B 95 02 F6 | 	mov	arg02, arg03
1b498     01 94 66 F0 | 	shl	arg02, #1
1b49c     4B 95 02 F1 | 	add	arg02, arg03
1b4a0     02 94 66 F0 | 	shl	arg02, #2
1b4a4     03 00 00 FF 
1b4a8     04 64 86 F1 | 	sub	objptr, ##1540
1b4ac     32 95 02 F1 | 	add	arg02, objptr
1b4b0     4A 97 02 FB | 	rdlong	arg03, arg02
1b4b4                 | ' 
1b4b4                 | ' numpar=compiledline(lineptr_e).result.uresult
1b4b4                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1b4b4     02 96 16 F2 | 	cmp	arg03, #2 wc
1b4b8     48 00 00 FF 
1b4bc     9C 64 86 F1 | 	sub	objptr, ##37020
1b4c0     00 96 0E C2 |  if_b	cmp	arg03, #0 wz
1b4c4     40 00 90 4D |  if_c_and_nz	jmp	#LR__2280
1b4c8     00 92 06 F6 | 	mov	arg01, #0
1b4cc     90 EA B0 FD | 	call	#__system___getiolock_0622
1b4d0     3D 93 02 F6 | 	mov	arg01, result1
1b4d4     04 95 B0 FD | 	call	#__system___lockmem
1b4d8     98 01 00 FF 
1b4dc     73 95 06 F6 | 	mov	arg02, ##@LR__6096
1b4e0     00 92 06 F6 | 	mov	arg01, #0
1b4e4     00 96 06 F6 | 	mov	arg03, #0
1b4e8     E4 A1 B0 FD | 	call	#__system___basic_print_string
1b4ec     00 92 06 F6 | 	mov	arg01, #0
1b4f0     6C EA B0 FD | 	call	#__system___getiolock_0622
1b4f4     3D 01 68 FC | 	wrlong	#0, result1
1b4f8     27 92 06 F6 | 	mov	arg01, #39
1b4fc     00 94 06 F6 | 	mov	arg02, #0
1b500     5C 5B B0 FD | 	call	#_printerror
1b504     0C 02 90 FD | 	jmp	#LR__2292
1b508                 | LR__2280
1b508     9C 21 BF FD | 	call	#_pop
1b50c     3F 97 02 F6 | 	mov	arg03, result3
1b510     E7 7A 62 FC | 	wrlong	result1, fp
1b514     04 CE 05 F1 | 	add	fp, #4
1b518     E7 7C 62 FC | 	wrlong	result2, fp
1b51c     04 CE 05 F1 | 	add	fp, #4
1b520     E7 96 62 FC | 	wrlong	arg03, fp
1b524                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1b524     08 CE 85 F1 | 	sub	fp, #8
1b528     2B 96 0E F2 | 	cmp	arg03, #43 wz
1b52c     18 00 90 5D |  if_ne	jmp	#LR__2281
1b530     E7 92 02 FB | 	rdlong	arg01, fp
1b534     E0 22 BF FD | 	call	#_convertstring
1b538     E7 7A 62 FC | 	wrlong	result1, fp
1b53c     08 CE 05 F1 | 	add	fp, #8
1b540     E7 3E 68 FC | 	wrlong	#31, fp
1b544     08 CE 85 F1 | 	sub	fp, #8
1b548                 | LR__2281
1b548                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1b548     08 CE 05 F1 | 	add	fp, #8
1b54c     E7 96 02 FB | 	rdlong	arg03, fp
1b550     08 CE 85 F1 | 	sub	fp, #8
1b554     1F 96 0E F2 | 	cmp	arg03, #31 wz
1b558     40 00 90 AD |  if_e	jmp	#LR__2282
1b55c     00 92 06 F6 | 	mov	arg01, #0
1b560     FC E9 B0 FD | 	call	#__system___getiolock_0622
1b564     3D 93 02 F6 | 	mov	arg01, result1
1b568     70 94 B0 FD | 	call	#__system___lockmem
1b56c     98 01 00 FF 
1b570     79 95 06 F6 | 	mov	arg02, ##@LR__6097
1b574     00 92 06 F6 | 	mov	arg01, #0
1b578     00 96 06 F6 | 	mov	arg03, #0
1b57c     50 A1 B0 FD | 	call	#__system___basic_print_string
1b580     00 92 06 F6 | 	mov	arg01, #0
1b584     D8 E9 B0 FD | 	call	#__system___getiolock_0622
1b588     3D 01 68 FC | 	wrlong	#0, result1
1b58c     0F 92 06 F6 | 	mov	arg01, #15
1b590     00 94 06 F6 | 	mov	arg02, #0
1b594     C8 5A B0 FD | 	call	#_printerror
1b598     78 01 90 FD | 	jmp	#LR__2292
1b59c                 | LR__2282
1b59c                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1b59c     E7 92 02 FB | 	rdlong	arg01, fp
1b5a0     01 94 06 F6 | 	mov	arg02, #1
1b5a4     DC AC B0 FD | 	call	#__system__Left_S
1b5a8     3D 93 02 F6 | 	mov	arg01, result1
1b5ac     98 01 00 FF 
1b5b0     7F 95 06 F6 | 	mov	arg02, ##@LR__6098
1b5b4     4C 94 B0 FD | 	call	#__system___string_cmp
1b5b8     00 7A 0E F2 | 	cmp	result1, #0 wz
1b5bc     48 00 90 5D |  if_ne	jmp	#LR__2285
1b5c0     98 01 00 FF 
1b5c4     81 A7 06 F6 | 	mov	local01, ##@LR__6099
1b5c8     E7 96 02 FB | 	rdlong	arg03, fp
1b5cc     4B 93 02 F6 | 	mov	arg01, arg03
1b5d0     49 A9 02 F6 | 	mov	local02, arg01
1b5d4     D7 06 48 FB | 	callpa	#(@LR__2284-@LR__2283)>>2,fcache_load_ptr_
1b5d8                 | LR__2283
1b5d8     54 7B CA FA | 	rdbyte	result1, local02 wz
1b5dc     01 A8 06 51 |  if_ne	add	local02, #1
1b5e0     F4 FF 9F 5D |  if_ne	jmp	#LR__2283
1b5e4                 | LR__2284
1b5e4     49 A9 82 F1 | 	sub	local02, arg01
1b5e8     54 95 02 F6 | 	mov	arg02, local02
1b5ec     01 94 86 F1 | 	sub	arg02, #1
1b5f0     4B 93 02 F6 | 	mov	arg01, arg03
1b5f4     14 AD B0 FD | 	call	#__system__Right_S
1b5f8     3D 95 02 F6 | 	mov	arg02, result1
1b5fc     53 93 02 F6 | 	mov	arg01, local01
1b600     34 94 B0 FD | 	call	#__system___string_concat
1b604     E7 7A 62 FC | 	wrlong	result1, fp
1b608                 | LR__2285
1b608                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1b608     E7 92 02 FB | 	rdlong	arg01, fp
1b60c     01 94 06 F6 | 	mov	arg02, #1
1b610     70 AC B0 FD | 	call	#__system__Left_S
1b614     3D 93 02 F6 | 	mov	arg01, result1
1b618     98 01 00 FF 
1b61c     84 95 06 F6 | 	mov	arg02, ##@LR__6100
1b620     E0 93 B0 FD | 	call	#__system___string_cmp
1b624     00 7A 0E F2 | 	cmp	result1, #0 wz
1b628     48 00 90 5D |  if_ne	jmp	#LR__2288
1b62c     98 01 00 FF 
1b630     86 A7 06 F6 | 	mov	local01, ##@LR__6101
1b634     E7 96 02 FB | 	rdlong	arg03, fp
1b638     4B 93 02 F6 | 	mov	arg01, arg03
1b63c     49 A9 02 F6 | 	mov	local02, arg01
1b640     D7 06 48 FB | 	callpa	#(@LR__2287-@LR__2286)>>2,fcache_load_ptr_
1b644                 | LR__2286
1b644     54 7B CA FA | 	rdbyte	result1, local02 wz
1b648     01 A8 06 51 |  if_ne	add	local02, #1
1b64c     F4 FF 9F 5D |  if_ne	jmp	#LR__2286
1b650                 | LR__2287
1b650     49 A9 82 F1 | 	sub	local02, arg01
1b654     54 95 02 F6 | 	mov	arg02, local02
1b658     01 94 86 F1 | 	sub	arg02, #1
1b65c     4B 93 02 F6 | 	mov	arg01, arg03
1b660     A8 AC B0 FD | 	call	#__system__Right_S
1b664     3D 95 02 F6 | 	mov	arg02, result1
1b668     53 93 02 F6 | 	mov	arg01, local01
1b66c     C8 93 B0 FD | 	call	#__system___string_concat
1b670     E7 7A 62 FC | 	wrlong	result1, fp
1b674                 | LR__2288
1b674     E7 92 02 FB | 	rdlong	arg01, fp
1b678     4C C2 B0 FD | 	call	#__system____builtin_atof
1b67c     3D AB 02 F6 | 	mov	local03, result1
1b680     E7 92 02 FB | 	rdlong	arg01, fp
1b684     00 94 06 F6 | 	mov	arg02, #0
1b688     A4 C0 B0 FD | 	call	#__system____builtin_atoi
1b68c     3D AD 02 F6 | 	mov	local04, result1
1b690                 | ' fval=val(t1.result.sresult)
1b690                 | ' ival=val%(t1.result.sresult)
1b690                 | ' if fval=ival then
1b690     56 93 52 F6 | 	abs	arg01, local04 wc
1b694     1F AE C6 C9 |  if_b	decod	local05, #31
1b698     00 AE 06 36 |  if_ae	mov	local05, #0
1b69c     08 B6 B0 FD | 	call	#__system___float_fromuns
1b6a0     57 7B 62 F5 | 	xor	result1, local05
1b6a4     3D 95 02 F6 | 	mov	arg02, result1
1b6a8     55 93 02 F6 | 	mov	arg01, local03
1b6ac     01 96 06 F6 | 	mov	arg03, #1
1b6b0     2C BE B0 FD | 	call	#__system___float_cmp
1b6b4     00 7A 0E F2 | 	cmp	result1, #0 wz
1b6b8     E7 AC 62 AC |  if_e	wrlong	local04, fp
1b6bc     08 CE 05 A1 |  if_e	add	fp, #8
1b6c0     E7 38 68 AC |  if_e	wrlong	#28, fp
1b6c4     08 CE 85 A1 |  if_e	sub	fp, #8
1b6c8     40 00 90 AD |  if_e	jmp	#LR__2291
1b6cc                 | '   if fval=0 andalso ival<>0 then
1b6cc     55 93 02 F6 | 	mov	arg01, local03
1b6d0     00 94 06 F6 | 	mov	arg02, #0
1b6d4     01 96 06 F6 | 	mov	arg03, #1
1b6d8     04 BE B0 FD | 	call	#__system___float_cmp
1b6dc     00 7A 0E F2 | 	cmp	result1, #0 wz
1b6e0     18 00 90 5D |  if_ne	jmp	#LR__2289
1b6e4     00 AC 0E F2 | 	cmp	local04, #0 wz
1b6e8     E7 AC 62 5C |  if_ne	wrlong	local04, fp
1b6ec     08 CE 05 51 |  if_ne	add	fp, #8
1b6f0     E7 38 68 5C |  if_ne	wrlong	#28, fp
1b6f4     08 CE 85 51 |  if_ne	sub	fp, #8
1b6f8     10 00 90 5D |  if_ne	jmp	#LR__2290
1b6fc                 | LR__2289
1b6fc     E7 AA 62 FC | 	wrlong	local03, fp
1b700     08 CE 05 F1 | 	add	fp, #8
1b704     E7 3C 68 FC | 	wrlong	#30, fp
1b708     08 CE 85 F1 | 	sub	fp, #8
1b70c                 | LR__2290
1b70c                 | LR__2291
1b70c     E7 92 02 F6 | 	mov	arg01, fp
1b710     24 20 BF FD | 	call	#_push
1b714                 | LR__2292
1b714     E7 F0 03 F6 | 	mov	ptra, fp
1b718     F2 00 A0 FD | 	call	#popregs_
1b71c                 | _do_val_ret
1b71c     2D 00 64 FD | 	ret
1b720                 | 
1b720                 | ' 
1b720                 | ' ' ------------------ waitclock
1b720                 | ' 
1b720                 | ' sub do_waitclock
1b720                 | _do_waitclock
1b720     53 00 00 FF 
1b724     EC 64 06 F1 | 	add	objptr, ##42732
1b728     32 81 02 FB | 	rdlong	_var01, objptr
1b72c                 | ' c=hkcnt
1b72c                 | ' do: loop until hkcnt<>c
1b72c                 | LR__2300
1b72c     32 83 02 FB | 	rdlong	_var02, objptr
1b730     40 83 0A F2 | 	cmp	_var02, _var01 wz
1b734     F4 FF 9F AD |  if_e	jmp	#LR__2300
1b738     53 00 00 FF 
1b73c     EC 64 86 F1 | 	sub	objptr, ##42732
1b740                 | _do_waitclock_ret
1b740     2D 00 64 FD | 	ret
1b744                 | 
1b744                 | ' 
1b744                 | ' ' ------------------ waitms
1b744                 | ' 
1b744                 | ' sub do_waitms
1b744                 | _do_waitms
1b744     03 CA 05 F6 | 	mov	COUNT_, #3
1b748     E8 00 A0 FD | 	call	#pushregs_
1b74c     18 F0 07 F1 | 	add	ptra, #24
1b750     54 1F BF FD | 	call	#_pop
1b754     E7 7A 62 FC | 	wrlong	result1, fp
1b758     04 CE 05 F1 | 	add	fp, #4
1b75c     E7 7C 62 FC | 	wrlong	result2, fp
1b760     04 CE 05 F1 | 	add	fp, #4
1b764     E7 7E 62 FC | 	wrlong	result3, fp
1b768     08 CE 85 F1 | 	sub	fp, #8
1b76c     E7 92 02 F6 | 	mov	arg01, fp
1b770     10 21 BF FD | 	call	#_converttoint
1b774     3D A7 02 F6 | 	mov	local01, result1
1b778                 | ' 
1b778                 | ' t1=pop()  
1b778                 | ' t=converttoint(t1)
1b778                 | ' if t<0 then return
1b778     00 A6 56 F2 | 	cmps	local01, #0 wc
1b77c     98 00 90 CD |  if_b	jmp	#LR__2316
1b780                 | ' if t < 1000 then 
1b780     01 00 00 FF 
1b784     E8 A7 56 F2 | 	cmps	local01, ##1000 wc
1b788     0C 00 90 3D |  if_ae	jmp	#LR__2310
1b78c     53 93 02 F6 | 	mov	arg01, local01
1b790     3C 95 B0 FD | 	call	#__system___waitms
1b794     80 00 90 FD | 	jmp	#LR__2315
1b798                 | LR__2310
1b798     53 93 52 F6 | 	abs	arg01, local01 wc
1b79c     01 00 00 FF 
1b7a0     E8 93 16 FD | 	qdiv	arg01, ##1000
1b7a4                 | '   for i=1 to t/1000
1b7a4     01 A8 06 F6 | 	mov	local02, #1
1b7a8     18 AA 62 FD | 	getqx	local03
1b7ac     55 AB 82 F6 | 	negc	local03, local03
1b7b0     01 AA 06 F1 | 	add	local03, #1
1b7b4                 | LR__2311
1b7b4     55 A9 52 F2 | 	cmps	local02, local03 wc
1b7b8     44 00 90 3D |  if_ae	jmp	#LR__2314
1b7bc     01 00 00 FF 
1b7c0     E8 93 06 F6 | 	mov	arg01, ##1000
1b7c4     08 95 B0 FD | 	call	#__system___waitms
1b7c8                 | '     waitms(1000)
1b7c8                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1b7c8     E0 92 06 F6 | 	mov	arg01, #224
1b7cc     78 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b7d0     00 7A 0E F2 | 	cmp	result1, #0 wz
1b7d4     10 00 90 5D |  if_ne	jmp	#LR__2312
1b7d8     E4 92 06 F6 | 	mov	arg01, #228
1b7dc     68 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b7e0     00 7A 0E F2 | 	cmp	result1, #0 wz
1b7e4     10 00 90 AD |  if_e	jmp	#LR__2313
1b7e8                 | LR__2312
1b7e8     06 92 06 F6 | 	mov	arg01, #6
1b7ec     58 89 B0 FD | 	call	#_usbnew_spin2_keystate
1b7f0     00 7A 0E F2 | 	cmp	result1, #0 wz
1b7f4     20 00 90 5D |  if_ne	jmp	#LR__2316
1b7f8                 | LR__2313
1b7f8     01 A8 06 F1 | 	add	local02, #1
1b7fc     B4 FF 9F FD | 	jmp	#LR__2311
1b800                 | LR__2314
1b800     53 AB 52 F6 | 	abs	local03, local01 wc
1b804     01 00 00 FF 
1b808     E8 AB 16 FD | 	qdiv	local03, ##1000
1b80c     19 AA 62 FD | 	getqy	local03
1b810     55 93 82 F6 | 	negc	arg01, local03
1b814     B8 94 B0 FD | 	call	#__system___waitms
1b818                 | LR__2315
1b818                 | LR__2316
1b818     E7 F0 03 F6 | 	mov	ptra, fp
1b81c     F2 00 A0 FD | 	call	#popregs_
1b820                 | _do_waitms_ret
1b820     2D 00 64 FD | 	ret
1b824                 | 
1b824                 | ' 
1b824                 | ' ' ------------------ waitvbl
1b824                 | ' 
1b824                 | ' sub do_waitvbl
1b824                 | _do_waitvbl
1b824     01 92 06 F6 | 	mov	arg01, #1
1b828     40 75 B0 FD | 	call	#_hg010b_spin2_waitvbl
1b82c                 | _do_waitvbl_ret
1b82c     2D 00 64 FD | 	ret
1b830                 | 
1b830                 | ' 
1b830                 | ' ' ------------------ wrpin
1b830                 | ' 
1b830                 | ' sub do_wrpin
1b830                 | _do_wrpin
1b830     01 CA 05 F6 | 	mov	COUNT_, #1
1b834     E8 00 A0 FD | 	call	#pushregs_
1b838     18 F0 07 F1 | 	add	ptra, #24
1b83c     68 1E BF FD | 	call	#_pop
1b840     3D 95 02 F6 | 	mov	arg02, result1
1b844     3E 93 02 F6 | 	mov	arg01, result2
1b848     3F A7 02 F6 | 	mov	local01, result3
1b84c     E7 94 62 FC | 	wrlong	arg02, fp
1b850     04 CE 05 F1 | 	add	fp, #4
1b854     E7 92 62 FC | 	wrlong	arg01, fp
1b858     04 CE 05 F1 | 	add	fp, #4
1b85c     E7 A6 62 FC | 	wrlong	local01, fp
1b860     08 CE 85 F1 | 	sub	fp, #8
1b864     40 1E BF FD | 	call	#_pop
1b868     3F A7 02 F6 | 	mov	local01, result3
1b86c     0C CE 05 F1 | 	add	fp, #12
1b870     E7 7A 62 FC | 	wrlong	result1, fp
1b874     04 CE 05 F1 | 	add	fp, #4
1b878     E7 7C 62 FC | 	wrlong	result2, fp
1b87c     04 CE 05 F1 | 	add	fp, #4
1b880     E7 A6 62 FC | 	wrlong	local01, fp
1b884     08 CE 85 F1 | 	sub	fp, #8
1b888     E7 92 02 F6 | 	mov	arg01, fp
1b88c     0C CE 85 F1 | 	sub	fp, #12
1b890     F0 1F BF FD | 	call	#_converttoint
1b894     3D A7 02 F6 | 	mov	local01, result1
1b898     E7 92 02 F6 | 	mov	arg01, fp
1b89c     E4 1F BF FD | 	call	#_converttoint
1b8a0     53 7B 02 FC | 	wrpin	result1, local01
1b8a4     E7 F0 03 F6 | 	mov	ptra, fp
1b8a8     F2 00 A0 FD | 	call	#popregs_
1b8ac                 | _do_wrpin_ret
1b8ac     2D 00 64 FD | 	ret
1b8b0                 | 
1b8b0                 | ' 
1b8b0                 | ' ' ------------------ wxpin
1b8b0                 | ' 
1b8b0                 | ' sub do_wxpin
1b8b0                 | _do_wxpin
1b8b0     01 CA 05 F6 | 	mov	COUNT_, #1
1b8b4     E8 00 A0 FD | 	call	#pushregs_
1b8b8     18 F0 07 F1 | 	add	ptra, #24
1b8bc     E8 1D BF FD | 	call	#_pop
1b8c0     3D 95 02 F6 | 	mov	arg02, result1
1b8c4     3E 93 02 F6 | 	mov	arg01, result2
1b8c8     3F A7 02 F6 | 	mov	local01, result3
1b8cc     E7 94 62 FC | 	wrlong	arg02, fp
1b8d0     04 CE 05 F1 | 	add	fp, #4
1b8d4     E7 92 62 FC | 	wrlong	arg01, fp
1b8d8     04 CE 05 F1 | 	add	fp, #4
1b8dc     E7 A6 62 FC | 	wrlong	local01, fp
1b8e0     08 CE 85 F1 | 	sub	fp, #8
1b8e4     C0 1D BF FD | 	call	#_pop
1b8e8     3F A7 02 F6 | 	mov	local01, result3
1b8ec     0C CE 05 F1 | 	add	fp, #12
1b8f0     E7 7A 62 FC | 	wrlong	result1, fp
1b8f4     04 CE 05 F1 | 	add	fp, #4
1b8f8     E7 7C 62 FC | 	wrlong	result2, fp
1b8fc     04 CE 05 F1 | 	add	fp, #4
1b900     E7 A6 62 FC | 	wrlong	local01, fp
1b904     08 CE 85 F1 | 	sub	fp, #8
1b908     E7 92 02 F6 | 	mov	arg01, fp
1b90c     0C CE 85 F1 | 	sub	fp, #12
1b910     70 1F BF FD | 	call	#_converttoint
1b914     3D A7 02 F6 | 	mov	local01, result1
1b918     E7 92 02 F6 | 	mov	arg01, fp
1b91c     64 1F BF FD | 	call	#_converttoint
1b920     53 7B 12 FC | 	wxpin	result1, local01
1b924     E7 F0 03 F6 | 	mov	ptra, fp
1b928     F2 00 A0 FD | 	call	#popregs_
1b92c                 | _do_wxpin_ret
1b92c     2D 00 64 FD | 	ret
1b930                 | 
1b930                 | ' 
1b930                 | ' ' ------------------ wypin
1b930                 | ' 
1b930                 | ' sub do_wypin
1b930                 | _do_wypin
1b930     01 CA 05 F6 | 	mov	COUNT_, #1
1b934     E8 00 A0 FD | 	call	#pushregs_
1b938     18 F0 07 F1 | 	add	ptra, #24
1b93c     68 1D BF FD | 	call	#_pop
1b940     3D 95 02 F6 | 	mov	arg02, result1
1b944     3E 93 02 F6 | 	mov	arg01, result2
1b948     3F A7 02 F6 | 	mov	local01, result3
1b94c     E7 94 62 FC | 	wrlong	arg02, fp
1b950     04 CE 05 F1 | 	add	fp, #4
1b954     E7 92 62 FC | 	wrlong	arg01, fp
1b958     04 CE 05 F1 | 	add	fp, #4
1b95c     E7 A6 62 FC | 	wrlong	local01, fp
1b960     08 CE 85 F1 | 	sub	fp, #8
1b964     40 1D BF FD | 	call	#_pop
1b968     3F A7 02 F6 | 	mov	local01, result3
1b96c     0C CE 05 F1 | 	add	fp, #12
1b970     E7 7A 62 FC | 	wrlong	result1, fp
1b974     04 CE 05 F1 | 	add	fp, #4
1b978     E7 7C 62 FC | 	wrlong	result2, fp
1b97c     04 CE 05 F1 | 	add	fp, #4
1b980     E7 A6 62 FC | 	wrlong	local01, fp
1b984     08 CE 85 F1 | 	sub	fp, #8
1b988     E7 92 02 F6 | 	mov	arg01, fp
1b98c     0C CE 85 F1 | 	sub	fp, #12
1b990     F0 1E BF FD | 	call	#_converttoint
1b994     3D A7 02 F6 | 	mov	local01, result1
1b998     E7 92 02 F6 | 	mov	arg01, fp
1b99c     E4 1E BF FD | 	call	#_converttoint
1b9a0     53 7B 22 FC | 	wypin	result1, local01
1b9a4     E7 F0 03 F6 | 	mov	ptra, fp
1b9a8     F2 00 A0 FD | 	call	#popregs_
1b9ac                 | _do_wypin_ret
1b9ac     2D 00 64 FD | 	ret
1b9b0                 | 
1b9b0                 | ' 
1b9b0                 | ' 
1b9b0                 | ' 
1b9b0                 | ' 
1b9b0                 | ' 
1b9b0                 | ' 
1b9b0                 | ' 
1b9b0                 | ' 
1b9b0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1b9b0                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1b9b0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1b9b0                 | ' 
1b9b0                 | ' 
1b9b0                 | ' '------------------ Assign
1b9b0                 | ' 
1b9b0                 | ' sub do_assign
1b9b0                 | _do_assign
1b9b0     0E CA 05 F6 | 	mov	COUNT_, #14
1b9b4     E8 00 A0 FD | 	call	#pushregs_
1b9b8     44 F0 07 F1 | 	add	ptra, #68
1b9bc     4B 00 00 FF 
1b9c0     A0 64 06 F1 | 	add	objptr, ##38560
1b9c4     32 97 02 FB | 	rdlong	arg03, objptr
1b9c8     4B 95 02 F6 | 	mov	arg02, arg03
1b9cc     01 94 66 F0 | 	shl	arg02, #1
1b9d0     4B 95 02 F1 | 	add	arg02, arg03
1b9d4     02 94 66 F0 | 	shl	arg02, #2
1b9d8     03 00 00 FF 
1b9dc     04 64 86 F1 | 	sub	objptr, ##1540
1b9e0     32 95 02 F1 | 	add	arg02, objptr
1b9e4     4A AD 02 FB | 	rdlong	local04, arg02
1b9e8                 | ' 
1b9e8                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1b9e8                 | ' if variables(varnum).vartype<array_no_type then 
1b9e8     56 97 02 F6 | 	mov	arg03, local04
1b9ec     04 96 66 F0 | 	shl	arg03, #4
1b9f0     32 00 00 FF 
1b9f4     84 64 86 F1 | 	sub	objptr, ##25732
1b9f8     32 97 02 F1 | 	add	arg03, objptr
1b9fc     0C 96 06 F1 | 	add	arg03, #12
1ba00     4B 97 02 FB | 	rdlong	arg03, arg03
1ba04     00 97 16 F2 | 	cmp	arg03, #256 wc
1ba08     16 00 00 FF 
1ba0c     18 64 86 F1 | 	sub	objptr, ##11288
1ba10     F8 00 90 3D |  if_ae	jmp	#LR__2320
1ba14     90 1C BF FD | 	call	#_pop
1ba18     E7 7A 62 FC | 	wrlong	result1, fp
1ba1c     04 CE 05 F1 | 	add	fp, #4
1ba20     E7 7C 62 FC | 	wrlong	result2, fp
1ba24     04 CE 05 F1 | 	add	fp, #4
1ba28     E7 7E 62 FC | 	wrlong	result3, fp
1ba2c     08 CE 85 F1 | 	sub	fp, #8
1ba30     E7 96 02 FB | 	rdlong	arg03, fp
1ba34     04 CE 05 F1 | 	add	fp, #4
1ba38     E7 94 02 FB | 	rdlong	arg02, fp
1ba3c     56 93 02 F6 | 	mov	arg01, local04
1ba40     04 92 66 F0 | 	shl	arg01, #4
1ba44     16 00 00 FF 
1ba48     18 64 06 F1 | 	add	objptr, ##11288
1ba4c     32 93 02 F1 | 	add	arg01, objptr
1ba50     04 92 06 F1 | 	add	arg01, #4
1ba54     49 97 62 FC | 	wrlong	arg03, arg01
1ba58     56 97 02 F6 | 	mov	arg03, local04
1ba5c     04 96 66 F0 | 	shl	arg03, #4
1ba60     32 97 02 F1 | 	add	arg03, objptr
1ba64     08 96 06 F1 | 	add	arg03, #8
1ba68     4B 95 62 FC | 	wrlong	arg02, arg03
1ba6c     56 97 02 F6 | 	mov	arg03, local04
1ba70     04 96 66 F0 | 	shl	arg03, #4
1ba74     32 97 02 F1 | 	add	arg03, objptr
1ba78     04 CE 05 F1 | 	add	fp, #4
1ba7c     E7 94 02 FB | 	rdlong	arg02, fp
1ba80     08 CE 85 F1 | 	sub	fp, #8
1ba84     0C 96 06 F1 | 	add	arg03, #12
1ba88     4B 95 62 FC | 	wrlong	arg02, arg03
1ba8c                 | '   t1=pop() 
1ba8c                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1ba8c                 | '   if variables(varnum).vartype<>result_string2 then return
1ba8c     56 97 02 F6 | 	mov	arg03, local04
1ba90     04 96 66 F0 | 	shl	arg03, #4
1ba94     32 97 02 F1 | 	add	arg03, objptr
1ba98     0C 96 06 F1 | 	add	arg03, #12
1ba9c     4B 97 02 FB | 	rdlong	arg03, arg03
1baa0     2B 96 0E F2 | 	cmp	arg03, #43 wz
1baa4     16 00 00 FF 
1baa8     18 64 86 F1 | 	sub	objptr, ##11288
1baac     68 03 90 5D |  if_ne	jmp	#LR__2342
1bab0     56 AF 02 F6 | 	mov	local05, local04
1bab4     04 AE 66 F0 | 	shl	local05, #4
1bab8     16 00 00 FF 
1babc     18 64 06 F1 | 	add	objptr, ##11288
1bac0     32 AF 02 F1 | 	add	local05, objptr
1bac4     56 97 02 F6 | 	mov	arg03, local04
1bac8     04 96 66 F0 | 	shl	arg03, #4
1bacc     32 97 02 F1 | 	add	arg03, objptr
1bad0     04 96 06 F1 | 	add	arg03, #4
1bad4     4B 93 02 FB | 	rdlong	arg01, arg03
1bad8     16 00 00 FF 
1badc     18 64 86 F1 | 	sub	objptr, ##11288
1bae0     34 1D BF FD | 	call	#_convertstring
1bae4     04 AE 06 F1 | 	add	local05, #4
1bae8     57 7B 62 FC | 	wrlong	result1, local05
1baec     04 AC 66 F0 | 	shl	local04, #4
1baf0     32 AF 02 F6 | 	mov	local05, objptr
1baf4     16 00 00 FF 
1baf8     18 AE 06 F1 | 	add	local05, ##11288
1bafc     57 AD 02 F1 | 	add	local04, local05
1bb00     0C AC 06 F1 | 	add	local04, #12
1bb04     56 3F 68 FC | 	wrlong	#31, local04
1bb08                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1bb08                 | '   variables(varnum).vartype=result_string
1bb08                 | '   return
1bb08     0C 03 90 FD | 	jmp	#LR__2342
1bb0c                 | LR__2320
1bb0c                 | ' for i=0 to 2 : arrid(i)=0 : next i
1bb0c     00 B0 06 F6 | 	mov	local06, #0
1bb10                 | LR__2321
1bb10     58 AF 02 F6 | 	mov	local05, local06
1bb14     53 AF 06 F1 | 	add	local05, #local01
1bb18     00 B2 06 F6 | 	mov	local07, #0
1bb1c                 | 	'.live	local07
1bb1c                 | 	'.live	local05
1bb1c     00 AE 8E F9 | 	altd	local05, #0
1bb20     59 AF 02 F6 | 	mov	local05, local07
1bb24     01 B0 06 F1 | 	add	local06, #1
1bb28     03 B0 16 F2 | 	cmp	local06, #3 wc
1bb2c     E0 FF 9F CD |  if_b	jmp	#LR__2321
1bb30     4B 00 00 FF 
1bb34     A0 64 06 F1 | 	add	objptr, ##38560
1bb38     32 AF 02 FB | 	rdlong	local05, objptr
1bb3c     57 B1 02 F6 | 	mov	local06, local05
1bb40     01 B0 66 F0 | 	shl	local06, #1
1bb44     57 B1 02 F1 | 	add	local06, local05
1bb48     02 B0 66 F0 | 	shl	local06, #2
1bb4c     03 00 00 FF 
1bb50     04 64 86 F1 | 	sub	objptr, ##1540
1bb54     32 B1 02 F1 | 	add	local06, objptr
1bb58     04 B0 06 F1 | 	add	local06, #4
1bb5c     58 B1 02 FB | 	rdlong	local06, local06
1bb60     48 00 00 FF 
1bb64     9C 64 86 F1 | 	sub	objptr, ##37020
1bb68     3C 1B BF FD | 	call	#_pop
1bb6c     3D B5 02 F6 | 	mov	local08, result1
1bb70     3E B7 02 F6 | 	mov	local09, result2
1bb74     3F AF 02 F6 | 	mov	local05, result3
1bb78     E7 B4 62 FC | 	wrlong	local08, fp
1bb7c     04 CE 05 F1 | 	add	fp, #4
1bb80     E7 B6 62 FC | 	wrlong	local09, fp
1bb84     04 CE 05 F1 | 	add	fp, #4
1bb88     E7 AE 62 FC | 	wrlong	local05, fp
1bb8c     08 CE 85 F1 | 	sub	fp, #8
1bb90                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1bb90                 | ' t1=pop() ' var value
1bb90                 | ' if numpar>0 then
1bb90     01 B0 16 F2 | 	cmp	local06, #1 wc
1bb94     50 00 90 CD |  if_b	jmp	#LR__2324
1bb98                 | '   for i=numpar to 1 step -1
1bb98     00 B0 4E F2 | 	cmps	local06, #0 wz
1bb9c     48 00 90 AD |  if_e	jmp	#LR__2323
1bba0                 | LR__2322
1bba0     04 1B BF FD | 	call	#_pop
1bba4     0C CE 05 F1 | 	add	fp, #12
1bba8     E7 7A 62 FC | 	wrlong	result1, fp
1bbac     04 CE 05 F1 | 	add	fp, #4
1bbb0     E7 7C 62 FC | 	wrlong	result2, fp
1bbb4     04 CE 05 F1 | 	add	fp, #4
1bbb8     E7 7E 62 FC | 	wrlong	result3, fp
1bbbc     58 AF 02 F6 | 	mov	local05, local06
1bbc0     01 AE 86 F1 | 	sub	local05, #1
1bbc4     53 AF 06 F1 | 	add	local05, #local01
1bbc8     08 CE 85 F1 | 	sub	fp, #8
1bbcc     E7 92 02 F6 | 	mov	arg01, fp
1bbd0     0C CE 85 F1 | 	sub	fp, #12
1bbd4     AC 1C BF FD | 	call	#_converttoint
1bbd8     3D B3 02 F6 | 	mov	local07, result1
1bbdc                 | 	'.live	local07
1bbdc                 | 	'.live	local05
1bbdc     00 AE 8E F9 | 	altd	local05, #0
1bbe0     59 AF 02 F6 | 	mov	local05, local07
1bbe4     EE B1 6E FB | 	djnz	local06, #LR__2322
1bbe8                 | LR__2323
1bbe8                 | LR__2324
1bbe8     04 AC 66 F0 | 	shl	local04, #4
1bbec     32 97 02 F6 | 	mov	arg03, objptr
1bbf0     16 00 00 FF 
1bbf4     18 96 06 F1 | 	add	arg03, ##11288
1bbf8     4B AD 02 F1 | 	add	local04, arg03
1bbfc     04 AC 06 F1 | 	add	local04, #4
1bc00     56 B9 02 FB | 	rdlong	local10, local04
1bc04     5C 93 02 F6 | 	mov	arg01, local10
1bc08     10 57 B0 FD | 	call	#_pslpeek
1bc0c     3D BB 32 F9 | 	getword	local11, result1, #0
1bc10     5C 93 02 F6 | 	mov	arg01, local10
1bc14     02 92 06 F1 | 	add	arg01, #2
1bc18     B8 56 B0 FD | 	call	#_pspeek
1bc1c     3D BD E2 F8 | 	getbyte	local12, result1, #0
1bc20                 | ' esize=pspeek(arrptr+2)
1bc20                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1bc20     5C 93 02 F6 | 	mov	arg01, local10
1bc24     04 92 06 F1 | 	add	arg01, #4
1bc28     F0 56 B0 FD | 	call	#_pslpeek
1bc2c     3D A7 12 F2 | 	cmp	local01, result1 wc
1bc30     28 00 90 3D |  if_ae	jmp	#LR__2325
1bc34     5C 93 02 F6 | 	mov	arg01, local10
1bc38     08 92 06 F1 | 	add	arg01, #8
1bc3c     DC 56 B0 FD | 	call	#_pslpeek
1bc40     3D A9 12 F2 | 	cmp	local02, result1 wc
1bc44     14 00 90 3D |  if_ae	jmp	#LR__2325
1bc48     5C 93 02 F6 | 	mov	arg01, local10
1bc4c     0C 92 06 F1 | 	add	arg01, #12
1bc50     C8 56 B0 FD | 	call	#_pslpeek
1bc54     3D AB 12 F2 | 	cmp	local03, result1 wc
1bc58     10 00 90 CD |  if_b	jmp	#LR__2326
1bc5c                 | LR__2325
1bc5c     31 92 06 F6 | 	mov	arg01, #49
1bc60     00 94 06 F6 | 	mov	arg02, #0
1bc64     F8 53 B0 FD | 	call	#_printerror
1bc68     AC 01 90 FD | 	jmp	#LR__2342
1bc6c                 | LR__2326
1bc6c     5C BF 02 F6 | 	mov	local13, local10
1bc70     10 BE 06 F1 | 	add	local13, #16
1bc74     5C 93 02 F6 | 	mov	arg01, local10
1bc78     04 92 06 F1 | 	add	arg01, #4
1bc7c     9C 56 B0 FD | 	call	#_pslpeek
1bc80     54 7B 02 FD | 	qmul	result1, local02
1bc84     53 B7 02 F6 | 	mov	local09, local01
1bc88     5C 93 02 F6 | 	mov	arg01, local10
1bc8c     08 92 06 F1 | 	add	arg01, #8
1bc90     18 B4 62 FD | 	getqx	local08
1bc94     5A B7 02 F1 | 	add	local09, local08
1bc98     80 56 B0 FD | 	call	#_pslpeek
1bc9c     3D B3 02 F6 | 	mov	local07, result1
1bca0     04 B8 06 F1 | 	add	local10, #4
1bca4     5C 93 02 F6 | 	mov	arg01, local10
1bca8     70 56 B0 FD | 	call	#_pslpeek
1bcac     3D B3 02 FD | 	qmul	local07, result1
1bcb0     18 B8 62 FD | 	getqx	local10
1bcb4     55 B9 02 FD | 	qmul	local10, local03
1bcb8     18 A6 62 FD | 	getqx	local01
1bcbc     53 B7 02 F1 | 	add	local09, local01
1bcc0     5B BD 02 FD | 	qmul	local12, local09
1bcc4                 | ' 
1bcc4                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1bcc4                 | ' select case arrtype
1bcc4     5D C1 02 F6 | 	mov	local14, local11
1bcc8     00 C1 86 F1 | 	sub	local14, #256
1bccc     0C C0 26 F3 | 	fle	local14, #12
1bcd0     18 A6 62 FD | 	getqx	local01
1bcd4     53 BF 02 F1 | 	add	local13, local01
1bcd8     30 C0 62 FD | 	jmprel	local14
1bcdc                 | LR__2327
1bcdc     30 00 90 FD | 	jmp	#LR__2328
1bce0     50 00 90 FD | 	jmp	#LR__2329
1bce4     5C 00 90 FD | 	jmp	#LR__2330
1bce8     68 00 90 FD | 	jmp	#LR__2331
1bcec     88 00 90 FD | 	jmp	#LR__2332
1bcf0     A8 00 90 FD | 	jmp	#LR__2333
1bcf4     B4 00 90 FD | 	jmp	#LR__2334
1bcf8     C0 00 90 FD | 	jmp	#LR__2335
1bcfc     CC 00 90 FD | 	jmp	#LR__2336
1bd00     D8 00 90 FD | 	jmp	#LR__2337
1bd04     E4 00 90 FD | 	jmp	#LR__2338
1bd08     F0 00 90 FD | 	jmp	#LR__2339
1bd0c     FC 00 90 FD | 	jmp	#LR__2340
1bd10                 | LR__2328
1bd10     E7 92 02 F6 | 	mov	arg01, fp
1bd14     5F 95 02 F6 | 	mov	arg02, local13
1bd18     0C 96 06 F6 | 	mov	arg03, #12
1bd1c     0B 00 00 FF 
1bd20     CC 64 06 F1 | 	add	objptr, ##5836
1bd24     30 81 B0 FD | 	call	#_psram_spin2_write
1bd28     0B 00 00 FF 
1bd2c     CC 64 86 F1 | 	sub	objptr, ##5836
1bd30     E4 00 90 FD | 	jmp	#LR__2341
1bd34                 | LR__2329
1bd34     E7 94 02 FB | 	rdlong	arg02, fp
1bd38     5F 93 02 F6 | 	mov	arg01, local13
1bd3c     4C 55 B0 FD | 	call	#_pspoke
1bd40     D4 00 90 FD | 	jmp	#LR__2341
1bd44                 | LR__2330
1bd44     E7 94 02 FB | 	rdlong	arg02, fp
1bd48     5F 93 02 F6 | 	mov	arg01, local13
1bd4c     3C 55 B0 FD | 	call	#_pspoke
1bd50     C4 00 90 FD | 	jmp	#LR__2341
1bd54                 | LR__2331
1bd54     E7 94 02 FB | 	rdlong	arg02, fp
1bd58     5F 93 02 F6 | 	mov	arg01, local13
1bd5c     2C 55 B0 FD | 	call	#_pspoke
1bd60     01 BE 06 F1 | 	add	local13, #1
1bd64     E7 94 02 FB | 	rdlong	arg02, fp
1bd68     08 94 46 F0 | 	shr	arg02, #8
1bd6c     5F 93 02 F6 | 	mov	arg01, local13
1bd70     18 55 B0 FD | 	call	#_pspoke
1bd74     A0 00 90 FD | 	jmp	#LR__2341
1bd78                 | LR__2332
1bd78     E7 94 02 FB | 	rdlong	arg02, fp
1bd7c     5F 93 02 F6 | 	mov	arg01, local13
1bd80     08 55 B0 FD | 	call	#_pspoke
1bd84     01 BE 06 F1 | 	add	local13, #1
1bd88     E7 94 02 FB | 	rdlong	arg02, fp
1bd8c     08 94 46 F0 | 	shr	arg02, #8
1bd90     5F 93 02 F6 | 	mov	arg01, local13
1bd94     F4 54 B0 FD | 	call	#_pspoke
1bd98     7C 00 90 FD | 	jmp	#LR__2341
1bd9c                 | LR__2333
1bd9c     E7 94 02 FB | 	rdlong	arg02, fp
1bda0     5F 93 02 F6 | 	mov	arg01, local13
1bda4     54 54 B0 FD | 	call	#_pslpoke
1bda8     6C 00 90 FD | 	jmp	#LR__2341
1bdac                 | LR__2334
1bdac     E7 94 02 FB | 	rdlong	arg02, fp
1bdb0     5F 93 02 F6 | 	mov	arg01, local13
1bdb4     44 54 B0 FD | 	call	#_pslpoke
1bdb8     5C 00 90 FD | 	jmp	#LR__2341
1bdbc                 | LR__2335
1bdbc     E7 94 02 FB | 	rdlong	arg02, fp
1bdc0     5F 93 02 F6 | 	mov	arg01, local13
1bdc4     34 54 B0 FD | 	call	#_pslpoke
1bdc8     4C 00 90 FD | 	jmp	#LR__2341
1bdcc                 | LR__2336
1bdcc     E7 94 02 FB | 	rdlong	arg02, fp
1bdd0     5F 93 02 F6 | 	mov	arg01, local13
1bdd4     24 54 B0 FD | 	call	#_pslpoke
1bdd8     3C 00 90 FD | 	jmp	#LR__2341
1bddc                 | LR__2337
1bddc     E7 94 02 FB | 	rdlong	arg02, fp
1bde0     5F 93 02 F6 | 	mov	arg01, local13
1bde4     14 54 B0 FD | 	call	#_pslpoke
1bde8     2C 00 90 FD | 	jmp	#LR__2341
1bdec                 | LR__2338
1bdec     E7 94 02 FB | 	rdlong	arg02, fp
1bdf0     5F 93 02 F6 | 	mov	arg01, local13
1bdf4     04 54 B0 FD | 	call	#_pslpoke
1bdf8     1C 00 90 FD | 	jmp	#LR__2341
1bdfc                 | LR__2339
1bdfc     E7 94 02 FB | 	rdlong	arg02, fp
1be00     5F 93 02 F6 | 	mov	arg01, local13
1be04     F4 53 B0 FD | 	call	#_pslpoke
1be08     0C 00 90 FD | 	jmp	#LR__2341
1be0c                 | LR__2340
1be0c     32 92 06 F6 | 	mov	arg01, #50
1be10     00 94 06 F6 | 	mov	arg02, #0
1be14     48 52 B0 FD | 	call	#_printerror
1be18                 | LR__2341
1be18                 | LR__2342
1be18     E7 F0 03 F6 | 	mov	ptra, fp
1be1c     F2 00 A0 FD | 	call	#popregs_
1be20                 | _do_assign_ret
1be20     2D 00 64 FD | 	ret
1be24                 | 
1be24                 | ' 
1be24                 | ' 
1be24                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1be24                 | ' 
1be24                 | ' sub do_getvar
1be24                 | _do_getvar
1be24     0D CA 05 F6 | 	mov	COUNT_, #13
1be28     E8 00 A0 FD | 	call	#pushregs_
1be2c     3C F0 07 F1 | 	add	ptra, #60
1be30                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1be30     4B 00 00 FF 
1be34     A0 64 06 F1 | 	add	objptr, ##38560
1be38     32 A7 02 FB | 	rdlong	local01, objptr
1be3c     53 97 02 F6 | 	mov	arg03, local01
1be40     01 96 66 F0 | 	shl	arg03, #1
1be44     53 97 02 F1 | 	add	arg03, local01
1be48     02 96 66 F0 | 	shl	arg03, #2
1be4c     03 00 00 FF 
1be50     04 64 86 F1 | 	sub	objptr, ##1540
1be54     32 97 02 F1 | 	add	arg03, objptr
1be58     04 96 06 F1 | 	add	arg03, #4
1be5c     4B 97 0A FB | 	rdlong	arg03, arg03 wz
1be60     48 00 00 FF 
1be64     9C 64 86 F1 | 	sub	objptr, ##37020
1be68     C4 00 90 5D |  if_ne	jmp	#LR__2351
1be6c     4B 00 00 FF 
1be70     A0 64 06 F1 | 	add	objptr, ##38560
1be74     32 A7 02 FB | 	rdlong	local01, objptr
1be78     53 93 02 F6 | 	mov	arg01, local01
1be7c     01 92 66 F0 | 	shl	arg01, #1
1be80     53 93 02 F1 | 	add	arg01, local01
1be84     02 92 66 F0 | 	shl	arg01, #2
1be88     03 00 00 FF 
1be8c     04 64 86 F1 | 	sub	objptr, ##1540
1be90     32 93 02 F1 | 	add	arg01, objptr
1be94     49 A7 02 FB | 	rdlong	local01, arg01
1be98     04 A6 66 F0 | 	shl	local01, #4
1be9c     32 00 00 FF 
1bea0     84 64 86 F1 | 	sub	objptr, ##25732
1bea4     32 A7 02 F1 | 	add	local01, objptr
1bea8     04 A6 06 F1 | 	add	local01, #4
1beac     53 93 02 FB | 	rdlong	arg01, local01
1beb0     04 A6 06 F1 | 	add	local01, #4
1beb4     53 A7 02 FB | 	rdlong	local01, local01
1beb8     E7 92 62 FC | 	wrlong	arg01, fp
1bebc     04 CE 05 F1 | 	add	fp, #4
1bec0     E7 A6 62 FC | 	wrlong	local01, fp
1bec4     35 00 00 FF 
1bec8     88 64 06 F1 | 	add	objptr, ##27272
1becc     32 A7 02 FB | 	rdlong	local01, objptr
1bed0     53 93 02 F6 | 	mov	arg01, local01
1bed4     01 92 66 F0 | 	shl	arg01, #1
1bed8     53 93 02 F1 | 	add	arg01, local01
1bedc     02 92 66 F0 | 	shl	arg01, #2
1bee0     03 00 00 FF 
1bee4     04 64 86 F1 | 	sub	objptr, ##1540
1bee8     32 93 02 F1 | 	add	arg01, objptr
1beec     49 A7 02 FB | 	rdlong	local01, arg01
1bef0     04 A6 66 F0 | 	shl	local01, #4
1bef4     32 00 00 FF 
1bef8     84 64 86 F1 | 	sub	objptr, ##25732
1befc     32 A7 02 F1 | 	add	local01, objptr
1bf00     0C A6 06 F1 | 	add	local01, #12
1bf04     53 A7 02 FB | 	rdlong	local01, local01
1bf08     04 CE 05 F1 | 	add	fp, #4
1bf0c     E7 A6 62 FC | 	wrlong	local01, fp
1bf10                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1bf10                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1bf10                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1bf10     08 CE 85 F1 | 	sub	fp, #8
1bf14     00 A7 16 F2 | 	cmp	local01, #256 wc
1bf18     16 00 00 FF 
1bf1c     18 64 86 F1 | 	sub	objptr, ##11288
1bf20     0C 00 90 3D |  if_ae	jmp	#LR__2350
1bf24     E7 92 02 F6 | 	mov	arg01, fp
1bf28     0C 18 BF FD | 	call	#_push
1bf2c     94 03 90 FD | 	jmp	#LR__2372
1bf30                 | LR__2350
1bf30                 | LR__2351
1bf30     4B 00 00 FF 
1bf34     A0 64 06 F1 | 	add	objptr, ##38560
1bf38     32 97 02 FB | 	rdlong	arg03, objptr
1bf3c     4B 95 02 F6 | 	mov	arg02, arg03
1bf40     01 94 66 F0 | 	shl	arg02, #1
1bf44     4B 95 02 F1 | 	add	arg02, arg03
1bf48     02 94 66 F0 | 	shl	arg02, #2
1bf4c     03 00 00 FF 
1bf50     04 64 86 F1 | 	sub	objptr, ##1540
1bf54     32 95 02 F1 | 	add	arg02, objptr
1bf58     4A 97 02 FB | 	rdlong	arg03, arg02
1bf5c     04 96 66 F0 | 	shl	arg03, #4
1bf60     32 00 00 FF 
1bf64     84 64 86 F1 | 	sub	objptr, ##25732
1bf68     32 97 02 F1 | 	add	arg03, objptr
1bf6c     04 96 06 F1 | 	add	arg03, #4
1bf70     4B A9 02 FB | 	rdlong	local02, arg03
1bf74     54 93 02 F6 | 	mov	arg01, local02
1bf78     16 00 00 FF 
1bf7c     18 64 86 F1 | 	sub	objptr, ##11288
1bf80     98 53 B0 FD | 	call	#_pslpeek
1bf84     3D AB 32 F9 | 	getword	local03, result1, #0
1bf88     4B 00 00 FF 
1bf8c     A0 64 06 F1 | 	add	objptr, ##38560
1bf90     32 97 02 FB | 	rdlong	arg03, objptr
1bf94     4B 95 02 F6 | 	mov	arg02, arg03
1bf98     01 94 66 F0 | 	shl	arg02, #1
1bf9c     4B 95 02 F1 | 	add	arg02, arg03
1bfa0     02 94 66 F0 | 	shl	arg02, #2
1bfa4     03 00 00 FF 
1bfa8     04 64 86 F1 | 	sub	objptr, ##1540
1bfac     32 95 02 F1 | 	add	arg02, objptr
1bfb0     04 94 06 F1 | 	add	arg02, #4
1bfb4     4A AD 02 FB | 	rdlong	local04, arg02
1bfb8     54 93 02 F6 | 	mov	arg01, local02
1bfbc     02 92 06 F1 | 	add	arg01, #2
1bfc0     48 00 00 FF 
1bfc4     9C 64 86 F1 | 	sub	objptr, ##37020
1bfc8     08 53 B0 FD | 	call	#_pspeek
1bfcc     3D AF E2 F8 | 	getbyte	local05, result1, #0
1bfd0     54 93 02 F6 | 	mov	arg01, local02
1bfd4     04 92 06 F1 | 	add	arg01, #4
1bfd8     40 53 B0 FD | 	call	#_pslpeek
1bfdc     3D B1 02 F6 | 	mov	local06, result1
1bfe0     54 93 02 F6 | 	mov	arg01, local02
1bfe4     08 92 06 F1 | 	add	arg01, #8
1bfe8     30 53 B0 FD | 	call	#_pslpeek
1bfec     3D B3 02 F6 | 	mov	local07, result1
1bff0     54 93 02 F6 | 	mov	arg01, local02
1bff4     0C 92 06 F1 | 	add	arg01, #12
1bff8     20 53 B0 FD | 	call	#_pslpeek
1bffc                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1bffc                 | ' esize=pspeek(arrptr+2)
1bffc                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1bffc                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1bffc                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1bffc                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1bffc     03 AC 16 F2 | 	cmp	local04, #3 wc
1c000     30 00 90 CD |  if_b	jmp	#LR__2352
1c004     A0 16 BF FD | 	call	#_pop
1c008     3F 97 02 F6 | 	mov	arg03, result3
1c00c     E7 7A 62 FC | 	wrlong	result1, fp
1c010     04 CE 05 F1 | 	add	fp, #4
1c014     E7 7C 62 FC | 	wrlong	result2, fp
1c018     04 CE 05 F1 | 	add	fp, #4
1c01c     E7 96 62 FC | 	wrlong	arg03, fp
1c020     08 CE 85 F1 | 	sub	fp, #8
1c024     E7 92 02 F6 | 	mov	arg01, fp
1c028     58 18 BF FD | 	call	#_converttoint
1c02c     3D B5 02 F6 | 	mov	local08, result1
1c030     04 00 90 FD | 	jmp	#LR__2353
1c034                 | LR__2352
1c034     00 B4 06 F6 | 	mov	local08, #0
1c038                 | LR__2353
1c038                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1c038     02 AC 16 F2 | 	cmp	local04, #2 wc
1c03c     30 00 90 CD |  if_b	jmp	#LR__2354
1c040     64 16 BF FD | 	call	#_pop
1c044     3F 97 02 F6 | 	mov	arg03, result3
1c048     E7 7A 62 FC | 	wrlong	result1, fp
1c04c     04 CE 05 F1 | 	add	fp, #4
1c050     E7 7C 62 FC | 	wrlong	result2, fp
1c054     04 CE 05 F1 | 	add	fp, #4
1c058     E7 96 62 FC | 	wrlong	arg03, fp
1c05c     08 CE 85 F1 | 	sub	fp, #8
1c060     E7 92 02 F6 | 	mov	arg01, fp
1c064     1C 18 BF FD | 	call	#_converttoint
1c068     3D B7 02 F6 | 	mov	local09, result1
1c06c     04 00 90 FD | 	jmp	#LR__2355
1c070                 | LR__2354
1c070     00 B6 06 F6 | 	mov	local09, #0
1c074                 | LR__2355
1c074                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1c074     01 AC 16 F2 | 	cmp	local04, #1 wc
1c078     30 00 90 CD |  if_b	jmp	#LR__2356
1c07c     28 16 BF FD | 	call	#_pop
1c080     3F AD 02 F6 | 	mov	local04, result3
1c084     E7 7A 62 FC | 	wrlong	result1, fp
1c088     04 CE 05 F1 | 	add	fp, #4
1c08c     E7 7C 62 FC | 	wrlong	result2, fp
1c090     04 CE 05 F1 | 	add	fp, #4
1c094     E7 AC 62 FC | 	wrlong	local04, fp
1c098     08 CE 85 F1 | 	sub	fp, #8
1c09c     E7 92 02 F6 | 	mov	arg01, fp
1c0a0     E0 17 BF FD | 	call	#_converttoint
1c0a4     3D B9 02 F6 | 	mov	local10, result1
1c0a8     04 00 90 FD | 	jmp	#LR__2357
1c0ac                 | LR__2356
1c0ac     00 B8 06 F6 | 	mov	local10, #0
1c0b0                 | LR__2357
1c0b0     58 B7 02 FD | 	qmul	local09, local06
1c0b4     54 BB 02 F6 | 	mov	local11, local02
1c0b8     10 BA 06 F1 | 	add	local11, #16
1c0bc     5C BD 02 F6 | 	mov	local12, local10
1c0c0     18 B8 62 FD | 	getqx	local10
1c0c4     58 B5 02 FD | 	qmul	local08, local06
1c0c8     5C BD 02 F1 | 	add	local12, local10
1c0cc     18 B8 62 FD | 	getqx	local10
1c0d0     59 B9 02 FD | 	qmul	local10, local07
1c0d4     18 B8 62 FD | 	getqx	local10
1c0d8     5C BD 02 F1 | 	add	local12, local10
1c0dc     57 BD 02 FD | 	qmul	local12, local05
1c0e0                 | ' 
1c0e0                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1c0e0                 | ' 
1c0e0                 | ' select case vartype
1c0e0     55 BF 02 F6 | 	mov	local13, local03
1c0e4     00 BF 86 F1 | 	sub	local13, #256
1c0e8     0C BE 26 F3 | 	fle	local13, #12
1c0ec     18 B8 62 FD | 	getqx	local10
1c0f0     5C BB 02 F1 | 	add	local11, local10
1c0f4     30 BE 62 FD | 	jmprel	local13
1c0f8                 | LR__2358
1c0f8     30 00 90 FD | 	jmp	#LR__2359
1c0fc     50 00 90 FD | 	jmp	#LR__2360
1c100     80 00 90 FD | 	jmp	#LR__2361
1c104     9C 00 90 FD | 	jmp	#LR__2362
1c108     D4 00 90 FD | 	jmp	#LR__2363
1c10c     F0 00 90 FD | 	jmp	#LR__2364
1c110     08 01 90 FD | 	jmp	#LR__2365
1c114     20 01 90 FD | 	jmp	#LR__2366
1c118     30 01 90 FD | 	jmp	#LR__2367
1c11c     40 01 90 FD | 	jmp	#LR__2368
1c120     58 01 90 FD | 	jmp	#LR__2369
1c124     68 01 90 FD | 	jmp	#LR__2370
1c128     90 01 90 FD | 	jmp	#LR__2371
1c12c                 | LR__2359
1c12c     E7 92 02 F6 | 	mov	arg01, fp
1c130     5D 95 02 F6 | 	mov	arg02, local11
1c134     0C 96 06 F6 | 	mov	arg03, #12
1c138     0B 00 00 FF 
1c13c     CC 64 06 F1 | 	add	objptr, ##5836
1c140     78 7C B0 FD | 	call	#_psram_spin2_read1
1c144     0B 00 00 FF 
1c148     CC 64 86 F1 | 	sub	objptr, ##5836
1c14c     6C 01 90 FD | 	jmp	#LR__2371
1c150                 | LR__2360
1c150     08 CE 05 F1 | 	add	fp, #8
1c154     E7 38 68 FC | 	wrlong	#28, fp
1c158     08 CE 85 F1 | 	sub	fp, #8
1c15c     5D 93 02 F6 | 	mov	arg01, local11
1c160     70 51 B0 FD | 	call	#_pspeek
1c164     3D 7B E2 F8 | 	getbyte	result1, result1, #0
1c168     E7 7A 62 FC | 	wrlong	result1, fp
1c16c     80 7A 16 F2 | 	cmp	result1, #128 wc
1c170     00 A7 66 36 |  if_ae	neg	local01, #256
1c174     3D BD 02 36 |  if_ae	mov	local12, result1
1c178     5E A7 42 35 |  if_ae	or	local01, local12
1c17c     E7 A6 62 3C |  if_ae	wrlong	local01, fp
1c180     38 01 90 FD | 	jmp	#LR__2371
1c184                 | LR__2361
1c184     08 CE 05 F1 | 	add	fp, #8
1c188     E7 3A 68 FC | 	wrlong	#29, fp
1c18c     08 CE 85 F1 | 	sub	fp, #8
1c190     5D 93 02 F6 | 	mov	arg01, local11
1c194     3C 51 B0 FD | 	call	#_pspeek
1c198     3D 7B E2 F8 | 	getbyte	result1, result1, #0
1c19c     E7 7A 62 FC | 	wrlong	result1, fp
1c1a0     18 01 90 FD | 	jmp	#LR__2371
1c1a4                 | LR__2362
1c1a4     08 CE 05 F1 | 	add	fp, #8
1c1a8     E7 38 68 FC | 	wrlong	#28, fp
1c1ac     08 CE 85 F1 | 	sub	fp, #8
1c1b0     5D 93 02 F6 | 	mov	arg01, local11
1c1b4     64 51 B0 FD | 	call	#_pslpeek
1c1b8     3D 7B 32 F9 | 	getword	result1, result1, #0
1c1bc     E7 7A 62 FC | 	wrlong	result1, fp
1c1c0     40 00 00 FF 
1c1c4     00 7A 16 F2 | 	cmp	result1, ##32768 wc
1c1c8     FF 7F 00 3F 
1c1cc     00 A7 06 36 |  if_ae	mov	local01, ##16776960
1c1d0     3D BD 02 36 |  if_ae	mov	local12, result1
1c1d4     5E A7 42 35 |  if_ae	or	local01, local12
1c1d8     E7 A6 62 3C |  if_ae	wrlong	local01, fp
1c1dc     DC 00 90 FD | 	jmp	#LR__2371
1c1e0                 | LR__2363
1c1e0     08 CE 05 F1 | 	add	fp, #8
1c1e4     E7 3A 68 FC | 	wrlong	#29, fp
1c1e8     08 CE 85 F1 | 	sub	fp, #8
1c1ec     5D 93 02 F6 | 	mov	arg01, local11
1c1f0     28 51 B0 FD | 	call	#_pslpeek
1c1f4     3D 7B 32 F9 | 	getword	result1, result1, #0
1c1f8     E7 7A 62 FC | 	wrlong	result1, fp
1c1fc     BC 00 90 FD | 	jmp	#LR__2371
1c200                 | LR__2364
1c200     08 CE 05 F1 | 	add	fp, #8
1c204     E7 38 68 FC | 	wrlong	#28, fp
1c208     08 CE 85 F1 | 	sub	fp, #8
1c20c     5D 93 02 F6 | 	mov	arg01, local11
1c210     08 51 B0 FD | 	call	#_pslpeek
1c214     E7 7A 62 FC | 	wrlong	result1, fp
1c218     A0 00 90 FD | 	jmp	#LR__2371
1c21c                 | LR__2365
1c21c     08 CE 05 F1 | 	add	fp, #8
1c220     E7 3A 68 FC | 	wrlong	#29, fp
1c224     08 CE 85 F1 | 	sub	fp, #8
1c228     5D 93 02 F6 | 	mov	arg01, local11
1c22c     EC 50 B0 FD | 	call	#_pslpeek
1c230     E7 7A 62 FC | 	wrlong	result1, fp
1c234     84 00 90 FD | 	jmp	#LR__2371
1c238                 | LR__2366
1c238     08 CE 05 F1 | 	add	fp, #8
1c23c     E7 FE 69 FC | 	wrlong	#255, fp
1c240     08 CE 85 F1 | 	sub	fp, #8
1c244     E7 60 68 FC | 	wrlong	#48, fp
1c248     70 00 90 FD | 	jmp	#LR__2371
1c24c                 | LR__2367
1c24c     08 CE 05 F1 | 	add	fp, #8
1c250     E7 FE 69 FC | 	wrlong	#255, fp
1c254     08 CE 85 F1 | 	sub	fp, #8
1c258     E7 60 68 FC | 	wrlong	#48, fp
1c25c     5C 00 90 FD | 	jmp	#LR__2371
1c260                 | LR__2368
1c260     08 CE 05 F1 | 	add	fp, #8
1c264     E7 3C 68 FC | 	wrlong	#30, fp
1c268     08 CE 85 F1 | 	sub	fp, #8
1c26c     5D 93 02 F6 | 	mov	arg01, local11
1c270     A8 50 B0 FD | 	call	#_pslpeek
1c274     E7 7A 62 FC | 	wrlong	result1, fp
1c278     40 00 90 FD | 	jmp	#LR__2371
1c27c                 | LR__2369
1c27c     08 CE 05 F1 | 	add	fp, #8
1c280     E7 FE 69 FC | 	wrlong	#255, fp
1c284     08 CE 85 F1 | 	sub	fp, #8
1c288     E7 60 68 FC | 	wrlong	#48, fp
1c28c     2C 00 90 FD | 	jmp	#LR__2371
1c290                 | LR__2370
1c290     08 CE 05 F1 | 	add	fp, #8
1c294     E7 3E 68 FC | 	wrlong	#31, fp
1c298     08 CE 85 F1 | 	sub	fp, #8
1c29c     5D 93 02 F6 | 	mov	arg01, local11
1c2a0     78 50 B0 FD | 	call	#_pslpeek
1c2a4     E7 7A 62 FC | 	wrlong	result1, fp
1c2a8     00 04 00 FF 
1c2ac     00 7A 16 F2 | 	cmp	result1, ##524288 wc
1c2b0     08 CE 05 31 |  if_ae	add	fp, #8
1c2b4     E7 56 68 3C |  if_ae	wrlong	#43, fp
1c2b8     08 CE 85 31 |  if_ae	sub	fp, #8
1c2bc                 | LR__2371
1c2bc     E7 92 02 F6 | 	mov	arg01, fp
1c2c0     74 14 BF FD | 	call	#_push
1c2c4                 | LR__2372
1c2c4     E7 F0 03 F6 | 	mov	ptra, fp
1c2c8     F2 00 A0 FD | 	call	#popregs_
1c2cc                 | _do_getvar_ret
1c2cc     2D 00 64 FD | 	ret
1c2d0                 | 
1c2d0                 | ' 
1c2d0                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1c2d0                 | ' 
1c2d0                 | ' sub do_getaddr
1c2d0                 | _do_getaddr
1c2d0     09 CA 05 F6 | 	mov	COUNT_, #9
1c2d4     E8 00 A0 FD | 	call	#pushregs_
1c2d8     38 F0 07 F1 | 	add	ptra, #56
1c2dc                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1c2dc                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1c2dc     4B 00 00 FF 
1c2e0     A0 64 06 F1 | 	add	objptr, ##38560
1c2e4     32 93 02 FB | 	rdlong	arg01, objptr
1c2e8     49 7D 02 F6 | 	mov	result2, arg01
1c2ec     01 7C 66 F0 | 	shl	result2, #1
1c2f0     49 7D 02 F1 | 	add	result2, arg01
1c2f4     02 7C 66 F0 | 	shl	result2, #2
1c2f8     03 00 00 FF 
1c2fc     04 64 86 F1 | 	sub	objptr, ##1540
1c300     32 7D 02 F1 | 	add	result2, objptr
1c304     04 7C 06 F1 | 	add	result2, #4
1c308     3E 7D 0A FB | 	rdlong	result2, result2 wz
1c30c     48 00 00 FF 
1c310     9C 64 86 F1 | 	sub	objptr, ##37020
1c314     10 01 90 5D |  if_ne	jmp	#LR__2380
1c318     4B 00 00 FF 
1c31c     A0 64 06 F1 | 	add	objptr, ##38560
1c320     32 93 02 FB | 	rdlong	arg01, objptr
1c324     49 7D 02 F6 | 	mov	result2, arg01
1c328     01 7C 66 F0 | 	shl	result2, #1
1c32c     49 7D 02 F1 | 	add	result2, arg01
1c330     02 7C 66 F0 | 	shl	result2, #2
1c334     03 00 00 FF 
1c338     04 64 86 F1 | 	sub	objptr, ##1540
1c33c     32 7D 02 F1 | 	add	result2, objptr
1c340     3E 93 02 FB | 	rdlong	arg01, result2
1c344     04 92 66 F0 | 	shl	arg01, #4
1c348     32 00 00 FF 
1c34c     84 64 86 F1 | 	sub	objptr, ##25732
1c350     32 93 02 F1 | 	add	arg01, objptr
1c354     0C 92 06 F1 | 	add	arg01, #12
1c358     49 93 02 FB | 	rdlong	arg01, arg01
1c35c     08 CE 05 F1 | 	add	fp, #8
1c360     E7 92 62 FC | 	wrlong	arg01, fp
1c364                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1c364                 | '    if t1.result_type>=array_no_type then goto 2200
1c364     08 CE 85 F1 | 	sub	fp, #8
1c368     00 93 16 F2 | 	cmp	arg01, #256 wc
1c36c     16 00 00 FF 
1c370     18 64 86 F1 | 	sub	objptr, ##11288
1c374     B0 00 90 3D |  if_ae	jmp	#LR__2381
1c378     4B 00 00 FF 
1c37c     A0 64 06 F1 | 	add	objptr, ##38560
1c380     32 93 02 FB | 	rdlong	arg01, objptr
1c384     49 7F 02 F6 | 	mov	result3, arg01
1c388     01 7E 66 F0 | 	shl	result3, #1
1c38c     49 7F 02 F1 | 	add	result3, arg01
1c390     02 7E 66 F0 | 	shl	result3, #2
1c394     03 00 00 FF 
1c398     04 64 86 F1 | 	sub	objptr, ##1540
1c39c     32 7F 02 F1 | 	add	result3, objptr
1c3a0     3F 7B 02 FB | 	rdlong	result1, result3
1c3a4     04 7A 66 F0 | 	shl	result1, #4
1c3a8     32 00 00 FF 
1c3ac     84 64 86 F1 | 	sub	objptr, ##25732
1c3b0     32 7B 02 F1 | 	add	result1, objptr
1c3b4     04 7A 06 F1 | 	add	result1, #4
1c3b8     E7 7A 62 FC | 	wrlong	result1, fp
1c3bc     35 00 00 FF 
1c3c0     88 64 06 F1 | 	add	objptr, ##27272
1c3c4     32 7F 02 FB | 	rdlong	result3, objptr
1c3c8     3F 93 02 F6 | 	mov	arg01, result3
1c3cc     01 92 66 F0 | 	shl	arg01, #1
1c3d0     3F 93 02 F1 | 	add	arg01, result3
1c3d4     02 92 66 F0 | 	shl	arg01, #2
1c3d8     03 00 00 FF 
1c3dc     04 64 86 F1 | 	sub	objptr, ##1540
1c3e0     32 93 02 F1 | 	add	arg01, objptr
1c3e4     49 93 02 FB | 	rdlong	arg01, arg01
1c3e8     04 92 66 F0 | 	shl	arg01, #4
1c3ec     32 00 00 FF 
1c3f0     84 64 86 F1 | 	sub	objptr, ##25732
1c3f4     32 93 02 F1 | 	add	arg01, objptr
1c3f8     0C 92 06 F1 | 	add	arg01, #12
1c3fc     49 93 02 FB | 	rdlong	arg01, arg01
1c400     04 CE 05 F1 | 	add	fp, #4
1c404     E7 92 62 FC | 	wrlong	arg01, fp
1c408     04 CE 05 F1 | 	add	fp, #4
1c40c     E7 3A 68 FC | 	wrlong	#29, fp
1c410     08 CE 85 F1 | 	sub	fp, #8
1c414     E7 92 02 F6 | 	mov	arg01, fp
1c418     16 00 00 FF 
1c41c     18 64 86 F1 | 	sub	objptr, ##11288
1c420     14 13 BF FD | 	call	#_push
1c424                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1c424                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1c424                 | '   t1.result_type=result_uint
1c424                 | '   push t1 : return
1c424     24 02 90 FD | 	jmp	#LR__2390
1c428                 | LR__2380
1c428                 | LR__2381
1c428     4B 00 00 FF 
1c42c     A0 64 06 F1 | 	add	objptr, ##38560
1c430     32 A7 02 FB | 	rdlong	local01, objptr
1c434     53 7D 02 F6 | 	mov	result2, local01
1c438     01 7C 66 F0 | 	shl	result2, #1
1c43c     53 7D 02 F1 | 	add	result2, local01
1c440     02 7C 66 F0 | 	shl	result2, #2
1c444     03 00 00 FF 
1c448     04 64 86 F1 | 	sub	objptr, ##1540
1c44c     32 7D 02 F1 | 	add	result2, objptr
1c450     3E 7D 02 FB | 	rdlong	result2, result2
1c454     04 7C 66 F0 | 	shl	result2, #4
1c458     32 00 00 FF 
1c45c     84 64 86 F1 | 	sub	objptr, ##25732
1c460     32 7D 02 F1 | 	add	result2, objptr
1c464     04 7C 06 F1 | 	add	result2, #4
1c468     3E A9 02 FB | 	rdlong	local02, result2
1c46c     53 93 02 F6 | 	mov	arg01, local01
1c470     01 92 66 F0 | 	shl	arg01, #1
1c474     53 93 02 F1 | 	add	arg01, local01
1c478     02 92 66 F0 | 	shl	arg01, #2
1c47c     32 00 00 FF 
1c480     84 64 06 F1 | 	add	objptr, ##25732
1c484     32 93 02 F1 | 	add	arg01, objptr
1c488     49 93 02 FB | 	rdlong	arg01, arg01
1c48c     04 92 66 F0 | 	shl	arg01, #4
1c490     32 00 00 FF 
1c494     84 64 86 F1 | 	sub	objptr, ##25732
1c498     32 93 02 F1 | 	add	arg01, objptr
1c49c     0C 92 06 F1 | 	add	arg01, #12
1c4a0     49 93 02 FB | 	rdlong	arg01, arg01
1c4a4     04 CE 05 F1 | 	add	fp, #4
1c4a8     E7 92 62 FC | 	wrlong	arg01, fp
1c4ac     04 CE 85 F1 | 	sub	fp, #4
1c4b0     54 93 02 F6 | 	mov	arg01, local02
1c4b4     16 00 00 FF 
1c4b8     18 64 86 F1 | 	sub	objptr, ##11288
1c4bc     5C 4E B0 FD | 	call	#_pslpeek
1c4c0     4B 00 00 FF 
1c4c4     A0 64 06 F1 | 	add	objptr, ##38560
1c4c8     32 A7 02 FB | 	rdlong	local01, objptr
1c4cc     53 93 02 F6 | 	mov	arg01, local01
1c4d0     01 92 66 F0 | 	shl	arg01, #1
1c4d4     53 93 02 F1 | 	add	arg01, local01
1c4d8     02 92 66 F0 | 	shl	arg01, #2
1c4dc     03 00 00 FF 
1c4e0     04 64 86 F1 | 	sub	objptr, ##1540
1c4e4     32 93 02 F1 | 	add	arg01, objptr
1c4e8     04 92 06 F1 | 	add	arg01, #4
1c4ec     49 AB 02 FB | 	rdlong	local03, arg01
1c4f0     54 93 02 F6 | 	mov	arg01, local02
1c4f4     02 92 06 F1 | 	add	arg01, #2
1c4f8     48 00 00 FF 
1c4fc     9C 64 86 F1 | 	sub	objptr, ##37020
1c500     D0 4D B0 FD | 	call	#_pspeek
1c504     3D AD E2 F8 | 	getbyte	local04, result1, #0
1c508     54 93 02 F6 | 	mov	arg01, local02
1c50c     04 92 06 F1 | 	add	arg01, #4
1c510     08 4E B0 FD | 	call	#_pslpeek
1c514     3D AF 02 F6 | 	mov	local05, result1
1c518     54 93 02 F6 | 	mov	arg01, local02
1c51c     08 92 06 F1 | 	add	arg01, #8
1c520     F8 4D B0 FD | 	call	#_pslpeek
1c524     3D B1 02 F6 | 	mov	local06, result1
1c528     54 93 02 F6 | 	mov	arg01, local02
1c52c     0C 92 06 F1 | 	add	arg01, #12
1c530     E8 4D B0 FD | 	call	#_pslpeek
1c534                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1c534                 | ' esize=pspeek(arrptr+2)
1c534                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1c534                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1c534                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1c534                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1c534     03 AA 16 F2 | 	cmp	local03, #3 wc
1c538     30 00 90 CD |  if_b	jmp	#LR__2382
1c53c     68 11 BF FD | 	call	#_pop
1c540     3F A7 02 F6 | 	mov	local01, result3
1c544     E7 7A 62 FC | 	wrlong	result1, fp
1c548     04 CE 05 F1 | 	add	fp, #4
1c54c     E7 7C 62 FC | 	wrlong	result2, fp
1c550     04 CE 05 F1 | 	add	fp, #4
1c554     E7 A6 62 FC | 	wrlong	local01, fp
1c558     08 CE 85 F1 | 	sub	fp, #8
1c55c     E7 92 02 F6 | 	mov	arg01, fp
1c560     20 13 BF FD | 	call	#_converttoint
1c564     3D B3 02 F6 | 	mov	local07, result1
1c568     04 00 90 FD | 	jmp	#LR__2383
1c56c                 | LR__2382
1c56c     00 B2 06 F6 | 	mov	local07, #0
1c570                 | LR__2383
1c570                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1c570     02 AA 16 F2 | 	cmp	local03, #2 wc
1c574     30 00 90 CD |  if_b	jmp	#LR__2384
1c578     2C 11 BF FD | 	call	#_pop
1c57c     3F A7 02 F6 | 	mov	local01, result3
1c580     E7 7A 62 FC | 	wrlong	result1, fp
1c584     04 CE 05 F1 | 	add	fp, #4
1c588     E7 7C 62 FC | 	wrlong	result2, fp
1c58c     04 CE 05 F1 | 	add	fp, #4
1c590     E7 A6 62 FC | 	wrlong	local01, fp
1c594     08 CE 85 F1 | 	sub	fp, #8
1c598     E7 92 02 F6 | 	mov	arg01, fp
1c59c     E4 12 BF FD | 	call	#_converttoint
1c5a0     3D B5 02 F6 | 	mov	local08, result1
1c5a4     04 00 90 FD | 	jmp	#LR__2385
1c5a8                 | LR__2384
1c5a8     00 B4 06 F6 | 	mov	local08, #0
1c5ac                 | LR__2385
1c5ac                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1c5ac     01 AA 16 F2 | 	cmp	local03, #1 wc
1c5b0     30 00 90 CD |  if_b	jmp	#LR__2386
1c5b4     F0 10 BF FD | 	call	#_pop
1c5b8     3F A7 02 F6 | 	mov	local01, result3
1c5bc     E7 7A 62 FC | 	wrlong	result1, fp
1c5c0     04 CE 05 F1 | 	add	fp, #4
1c5c4     E7 7C 62 FC | 	wrlong	result2, fp
1c5c8     04 CE 05 F1 | 	add	fp, #4
1c5cc     E7 A6 62 FC | 	wrlong	local01, fp
1c5d0     08 CE 85 F1 | 	sub	fp, #8
1c5d4     E7 92 02 F6 | 	mov	arg01, fp
1c5d8     A8 12 BF FD | 	call	#_converttoint
1c5dc     3D B7 02 F6 | 	mov	local09, result1
1c5e0     04 00 90 FD | 	jmp	#LR__2387
1c5e4                 | LR__2386
1c5e4     00 B6 06 F6 | 	mov	local09, #0
1c5e8                 | LR__2387
1c5e8                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1c5e8                 | ' if numpar>0 then
1c5e8     01 AA 16 F2 | 	cmp	local03, #1 wc
1c5ec     44 00 90 CD |  if_b	jmp	#LR__2388
1c5f0     57 B5 02 FD | 	qmul	local08, local05
1c5f4     10 A8 06 F1 | 	add	local02, #16
1c5f8     18 B4 62 FD | 	getqx	local08
1c5fc     57 B3 02 FD | 	qmul	local07, local05
1c600     5A B7 02 F1 | 	add	local09, local08
1c604     18 B4 62 FD | 	getqx	local08
1c608     58 B5 02 FD | 	qmul	local08, local06
1c60c     18 B4 62 FD | 	getqx	local08
1c610     5A B7 02 F1 | 	add	local09, local08
1c614     56 B7 02 FD | 	qmul	local09, local04
1c618     08 CE 05 F1 | 	add	fp, #8
1c61c     E7 3A 68 FC | 	wrlong	#29, fp
1c620     08 CE 85 F1 | 	sub	fp, #8
1c624     18 A6 62 FD | 	getqx	local01
1c628     53 A9 02 F1 | 	add	local02, local01
1c62c     E7 A8 62 FC | 	wrlong	local02, fp
1c630     10 00 90 FD | 	jmp	#LR__2389
1c634                 | LR__2388
1c634     08 CE 05 F1 | 	add	fp, #8
1c638     E7 3A 68 FC | 	wrlong	#29, fp
1c63c     08 CE 85 F1 | 	sub	fp, #8
1c640     E7 A8 62 FC | 	wrlong	local02, fp
1c644                 | LR__2389
1c644     E7 92 02 F6 | 	mov	arg01, fp
1c648     EC 10 BF FD | 	call	#_push
1c64c                 | LR__2390
1c64c     E7 F0 03 F6 | 	mov	ptra, fp
1c650     F2 00 A0 FD | 	call	#popregs_
1c654                 | _do_getaddr_ret
1c654     2D 00 64 FD | 	ret
1c658                 | 
1c658                 | ' 
1c658                 | ' 
1c658                 | ' 
1c658                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c658                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1c658                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c658                 | ' 
1c658                 | ' '--------------------------------- AND 
1c658                 | ' 
1c658                 | ' sub do_and 
1c658                 | _do_and
1c658     05 CA 05 F6 | 	mov	COUNT_, #5
1c65c     E8 00 A0 FD | 	call	#pushregs_
1c660     18 F0 07 F1 | 	add	ptra, #24
1c664     40 10 BF FD | 	call	#_pop
1c668     3D A7 02 F6 | 	mov	local01, result1
1c66c     3E 93 02 F6 | 	mov	arg01, result2
1c670     3F AD 02 F6 | 	mov	local04, result3
1c674     49 A9 02 F6 | 	mov	local02, arg01
1c678     56 AB 02 F6 | 	mov	local03, local04
1c67c     28 10 BF FD | 	call	#_pop
1c680     3F AF 02 F6 | 	mov	local05, result3
1c684     E7 7A 62 FC | 	wrlong	result1, fp
1c688     04 CE 05 F1 | 	add	fp, #4
1c68c     E7 7C 62 FC | 	wrlong	result2, fp
1c690     04 CE 05 F1 | 	add	fp, #4
1c694     E7 AE 62 FC | 	wrlong	local05, fp
1c698                 | ' 
1c698                 | ' t2=pop()
1c698                 | ' t1=pop()
1c698                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1c698     08 CE 85 F1 | 	sub	fp, #8
1c69c     1C AE 0E F2 | 	cmp	local05, #28 wz
1c6a0     E7 AE 02 AB |  if_e	rdlong	local05, fp
1c6a4     E7 AE 62 AC |  if_e	wrlong	local05, fp
1c6a8     08 CE 05 A1 |  if_e	add	fp, #8
1c6ac     E7 3A 68 AC |  if_e	wrlong	#29, fp
1c6b0     08 CE 85 A1 |  if_e	sub	fp, #8
1c6b4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1c6b4     1C AA 0E F2 | 	cmp	local03, #28 wz
1c6b8     1D AA 06 A6 |  if_e	mov	local03, #29
1c6bc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1c6bc     08 CE 05 F1 | 	add	fp, #8
1c6c0     E7 AE 02 FB | 	rdlong	local05, fp
1c6c4     08 CE 85 F1 | 	sub	fp, #8
1c6c8     1F AE 0E F2 | 	cmp	local05, #31 wz
1c6cc     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1c6d0     08 CE 05 51 |  if_ne	add	fp, #8
1c6d4     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1c6d8     08 CE 85 51 |  if_ne	sub	fp, #8
1c6dc     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1c6e0     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1c6e4     E7 0C 68 AC |  if_e	wrlong	#6, fp
1c6e8     08 CE 05 A1 |  if_e	add	fp, #8
1c6ec     E7 FE 69 AC |  if_e	wrlong	#255, fp
1c6f0     08 CE 85 A1 |  if_e	sub	fp, #8
1c6f4     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1c6f8     53 AF 02 55 |  if_ne	and	local05, local01
1c6fc     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1c700     E7 92 02 F6 | 	mov	arg01, fp
1c704     30 10 BF FD | 	call	#_push
1c708     E7 F0 03 F6 | 	mov	ptra, fp
1c70c     F2 00 A0 FD | 	call	#popregs_
1c710                 | _do_and_ret
1c710     2D 00 64 FD | 	ret
1c714                 | 
1c714                 | ' 
1c714                 | ' '--------------------------------- DIV (integer divide)
1c714                 | ' 
1c714                 | ' sub do_div 
1c714                 | _do_div
1c714     04 CA 05 F6 | 	mov	COUNT_, #4
1c718     E8 00 A0 FD | 	call	#pushregs_
1c71c     18 F0 07 F1 | 	add	ptra, #24
1c720     84 0F BF FD | 	call	#_pop
1c724     3D A7 02 F6 | 	mov	local01, result1
1c728     3E 11 03 F6 | 	mov	muldivb_, result2
1c72c     3F 0F 03 F6 | 	mov	muldiva_, result3
1c730     88 A9 02 F6 | 	mov	local02, muldivb_
1c734     87 AB 02 F6 | 	mov	local03, muldiva_
1c738     6C 0F BF FD | 	call	#_pop
1c73c     E7 7A 62 FC | 	wrlong	result1, fp
1c740     04 CE 05 F1 | 	add	fp, #4
1c744     E7 7C 62 FC | 	wrlong	result2, fp
1c748     04 CE 05 F1 | 	add	fp, #4
1c74c     E7 7E 62 FC | 	wrlong	result3, fp
1c750                 | ' 
1c750                 | ' t2=pop()
1c750                 | ' t1=pop()
1c750                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1c750     08 CE 85 F1 | 	sub	fp, #8
1c754     1F 7E 0E F2 | 	cmp	result3, #31 wz
1c758     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1c75c     E7 14 68 AC |  if_e	wrlong	#10, fp
1c760     08 CE 05 A1 |  if_e	add	fp, #8
1c764     E7 FE 69 AC |  if_e	wrlong	#255, fp
1c768     08 CE 85 A1 |  if_e	sub	fp, #8
1c76c     14 01 90 AD |  if_e	jmp	#LR__2405
1c770                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1c770     08 CE 05 F1 | 	add	fp, #8
1c774     E7 10 03 FB | 	rdlong	muldivb_, fp
1c778     08 CE 85 F1 | 	sub	fp, #8
1c77c     1E 10 0F F2 | 	cmp	muldivb_, #30 wz
1c780     1C 00 90 5D |  if_ne	jmp	#LR__2400
1c784     08 CE 05 F1 | 	add	fp, #8
1c788     E7 38 68 FC | 	wrlong	#28, fp
1c78c     08 CE 85 F1 | 	sub	fp, #8
1c790     E7 92 02 FB | 	rdlong	arg01, fp
1c794     00 94 06 F6 | 	mov	arg02, #0
1c798     D8 AD B0 FD | 	call	#__system___float_tointeger
1c79c     E7 7A 62 FC | 	wrlong	result1, fp
1c7a0                 | LR__2400
1c7a0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1c7a0     1E AA 0E F2 | 	cmp	local03, #30 wz
1c7a4     14 00 90 5D |  if_ne	jmp	#LR__2401
1c7a8     1C AA 06 F6 | 	mov	local03, #28
1c7ac     53 93 02 F6 | 	mov	arg01, local01
1c7b0     00 94 06 F6 | 	mov	arg02, #0
1c7b4     BC AD B0 FD | 	call	#__system___float_tointeger
1c7b8     3D A7 02 F6 | 	mov	local01, result1
1c7bc                 | LR__2401
1c7bc     08 CE 05 F1 | 	add	fp, #8
1c7c0     E7 AC 02 FB | 	rdlong	local04, fp
1c7c4     08 CE 85 F1 | 	sub	fp, #8
1c7c8     1D AC 0E F2 | 	cmp	local04, #29 wz
1c7cc     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c7d0     E7 AC 02 AB |  if_e	rdlong	local04, fp
1c7d4     53 AD 12 AD |  if_e	qdiv	local04, local01
1c7d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1c7d8     18 AC 62 AD |  if_e	getqx	local04
1c7dc     E7 AC 62 AC |  if_e	wrlong	local04, fp
1c7e0     A0 00 90 AD |  if_e	jmp	#LR__2405
1c7e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1c7e4     08 CE 05 F1 | 	add	fp, #8
1c7e8     E7 AC 02 FB | 	rdlong	local04, fp
1c7ec     08 CE 85 F1 | 	sub	fp, #8
1c7f0     1D AC 0E F2 | 	cmp	local04, #29 wz
1c7f4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c7f8     20 00 90 5D |  if_ne	jmp	#LR__2402
1c7fc     E7 AC 02 FB | 	rdlong	local04, fp
1c800     53 AD 12 FD | 	qdiv	local04, local01
1c804     18 AC 62 FD | 	getqx	local04
1c808     E7 AC 62 FC | 	wrlong	local04, fp
1c80c     08 CE 05 F1 | 	add	fp, #8
1c810     E7 38 68 FC | 	wrlong	#28, fp
1c814     08 CE 85 F1 | 	sub	fp, #8
1c818     68 00 90 FD | 	jmp	#LR__2405
1c81c                 | LR__2402
1c81c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1c81c     08 CE 05 F1 | 	add	fp, #8
1c820     E7 AC 02 FB | 	rdlong	local04, fp
1c824     08 CE 85 F1 | 	sub	fp, #8
1c828     1C AC 0E F2 | 	cmp	local04, #28 wz
1c82c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c830     14 00 90 5D |  if_ne	jmp	#LR__2403
1c834     E7 0E 03 FB | 	rdlong	muldiva_, fp
1c838     53 11 03 F6 | 	mov	muldivb_, local01
1c83c     FA 00 A0 FD | 	call	#divide_
1c840     E7 10 63 FC | 	wrlong	muldivb_, fp
1c844     3C 00 90 FD | 	jmp	#LR__2405
1c848                 | LR__2403
1c848                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1c848     08 CE 05 F1 | 	add	fp, #8
1c84c     E7 AC 02 FB | 	rdlong	local04, fp
1c850     08 CE 85 F1 | 	sub	fp, #8
1c854     1C AC 0E F2 | 	cmp	local04, #28 wz
1c858     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c85c     14 00 90 5D |  if_ne	jmp	#LR__2404
1c860     E7 0E 03 FB | 	rdlong	muldiva_, fp
1c864     53 11 03 F6 | 	mov	muldivb_, local01
1c868     FA 00 A0 FD | 	call	#divide_
1c86c     E7 10 63 FC | 	wrlong	muldivb_, fp
1c870     10 00 90 FD | 	jmp	#LR__2405
1c874                 | LR__2404
1c874     E7 16 68 FC | 	wrlong	#11, fp
1c878     08 CE 05 F1 | 	add	fp, #8
1c87c     E7 FE 69 FC | 	wrlong	#255, fp
1c880     08 CE 85 F1 | 	sub	fp, #8
1c884                 | LR__2405
1c884     E7 92 02 F6 | 	mov	arg01, fp
1c888     AC 0E BF FD | 	call	#_push
1c88c     E7 F0 03 F6 | 	mov	ptra, fp
1c890     F2 00 A0 FD | 	call	#popregs_
1c894                 | _do_div_ret
1c894     2D 00 64 FD | 	ret
1c898                 | 
1c898                 | ' 
1c898                 | ' '--------------------------------- equal (=)
1c898                 | ' 
1c898                 | ' sub do_eq
1c898                 | _do_eq
1c898     07 CA 05 F6 | 	mov	COUNT_, #7
1c89c     E8 00 A0 FD | 	call	#pushregs_
1c8a0     18 F0 07 F1 | 	add	ptra, #24
1c8a4     00 0E BF FD | 	call	#_pop
1c8a8     3D A7 02 F6 | 	mov	local01, result1
1c8ac     3E AD 02 F6 | 	mov	local04, result2
1c8b0     3F AF 02 F6 | 	mov	local05, result3
1c8b4     56 A9 02 F6 | 	mov	local02, local04
1c8b8     57 AB 02 F6 | 	mov	local03, local05
1c8bc     E8 0D BF FD | 	call	#_pop
1c8c0     3F AF 02 F6 | 	mov	local05, result3
1c8c4     E7 7A 62 FC | 	wrlong	result1, fp
1c8c8     04 CE 05 F1 | 	add	fp, #4
1c8cc     E7 7C 62 FC | 	wrlong	result2, fp
1c8d0     04 CE 05 F1 | 	add	fp, #4
1c8d4     E7 AE 62 FC | 	wrlong	local05, fp
1c8d8                 | ' 
1c8d8                 | ' t2=pop()
1c8d8                 | ' t1=pop()
1c8d8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1c8d8     08 CE 85 F1 | 	sub	fp, #8
1c8dc     1F AE 0E F2 | 	cmp	local05, #31 wz
1c8e0     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1c8e4     20 00 90 5D |  if_ne	jmp	#LR__2410
1c8e8     00 B0 06 F6 | 	mov	local06, #0
1c8ec     E7 92 02 FB | 	rdlong	arg01, fp
1c8f0     53 95 02 F6 | 	mov	arg02, local01
1c8f4     0C 81 B0 FD | 	call	#__system___string_cmp
1c8f8     00 7A 0E F2 | 	cmp	result1, #0 wz
1c8fc     00 B0 26 A6 |  if_e	not	local06, #0
1c900     E7 B0 62 FC | 	wrlong	local06, fp
1c904     04 03 90 FD | 	jmp	#LR__2423
1c908                 | LR__2410
1c908                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1c908     08 CE 05 F1 | 	add	fp, #8
1c90c     E7 B0 02 FB | 	rdlong	local06, fp
1c910     08 CE 85 F1 | 	sub	fp, #8
1c914     1E B0 0E F2 | 	cmp	local06, #30 wz
1c918     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c91c     24 00 90 5D |  if_ne	jmp	#LR__2411
1c920     00 B0 06 F6 | 	mov	local06, #0
1c924     E7 92 02 FB | 	rdlong	arg01, fp
1c928     53 95 02 F6 | 	mov	arg02, local01
1c92c     01 96 06 F6 | 	mov	arg03, #1
1c930     AC AB B0 FD | 	call	#__system___float_cmp
1c934     00 7A 0E F2 | 	cmp	result1, #0 wz
1c938     00 B0 26 A6 |  if_e	not	local06, #0
1c93c     E7 B0 62 FC | 	wrlong	local06, fp
1c940     C8 02 90 FD | 	jmp	#LR__2423
1c944                 | LR__2411
1c944                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1c944     08 CE 05 F1 | 	add	fp, #8
1c948     E7 B0 02 FB | 	rdlong	local06, fp
1c94c     08 CE 85 F1 | 	sub	fp, #8
1c950     1E B0 0E F2 | 	cmp	local06, #30 wz
1c954     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1c958     3C 00 90 5D |  if_ne	jmp	#LR__2412
1c95c     00 B0 06 F6 | 	mov	local06, #0
1c960     E7 AC 02 FB | 	rdlong	local04, fp
1c964     53 93 52 F6 | 	abs	arg01, local01 wc
1c968     1F B2 C6 C9 |  if_b	decod	local07, #31
1c96c     00 B2 06 36 |  if_ae	mov	local07, #0
1c970     34 A3 B0 FD | 	call	#__system___float_fromuns
1c974     59 7B 62 F5 | 	xor	result1, local07
1c978     3D 95 02 F6 | 	mov	arg02, result1
1c97c     56 93 02 F6 | 	mov	arg01, local04
1c980     01 96 06 F6 | 	mov	arg03, #1
1c984     58 AB B0 FD | 	call	#__system___float_cmp
1c988     00 7A 0E F2 | 	cmp	result1, #0 wz
1c98c     00 B0 26 A6 |  if_e	not	local06, #0
1c990     E7 B0 62 FC | 	wrlong	local06, fp
1c994     74 02 90 FD | 	jmp	#LR__2423
1c998                 | LR__2412
1c998                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1c998     08 CE 05 F1 | 	add	fp, #8
1c99c     E7 B0 02 FB | 	rdlong	local06, fp
1c9a0     08 CE 85 F1 | 	sub	fp, #8
1c9a4     1E B0 0E F2 | 	cmp	local06, #30 wz
1c9a8     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1c9ac     30 00 90 5D |  if_ne	jmp	#LR__2413
1c9b0     00 B0 06 F6 | 	mov	local06, #0
1c9b4     E7 AC 02 FB | 	rdlong	local04, fp
1c9b8     53 93 02 F6 | 	mov	arg01, local01
1c9bc     E8 A2 B0 FD | 	call	#__system___float_fromuns
1c9c0     3D 95 02 F6 | 	mov	arg02, result1
1c9c4     56 93 02 F6 | 	mov	arg01, local04
1c9c8     01 96 06 F6 | 	mov	arg03, #1
1c9cc     10 AB B0 FD | 	call	#__system___float_cmp
1c9d0     00 7A 0E F2 | 	cmp	result1, #0 wz
1c9d4     00 B0 26 A6 |  if_e	not	local06, #0
1c9d8     E7 B0 62 FC | 	wrlong	local06, fp
1c9dc     2C 02 90 FD | 	jmp	#LR__2423
1c9e0                 | LR__2413
1c9e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1c9e0     08 CE 05 F1 | 	add	fp, #8
1c9e4     E7 B0 02 FB | 	rdlong	local06, fp
1c9e8     08 CE 85 F1 | 	sub	fp, #8
1c9ec     1C B0 0E F2 | 	cmp	local06, #28 wz
1c9f0     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1c9f4     3C 00 90 5D |  if_ne	jmp	#LR__2414
1c9f8     00 B0 06 F6 | 	mov	local06, #0
1c9fc     E7 92 02 FB | 	rdlong	arg01, fp
1ca00     49 93 52 F6 | 	abs	arg01, arg01 wc
1ca04     1F B2 C6 C9 |  if_b	decod	local07, #31
1ca08     00 B2 06 36 |  if_ae	mov	local07, #0
1ca0c     98 A2 B0 FD | 	call	#__system___float_fromuns
1ca10     59 7B 62 F5 | 	xor	result1, local07
1ca14     3D 93 02 F6 | 	mov	arg01, result1
1ca18     53 95 02 F6 | 	mov	arg02, local01
1ca1c     01 96 06 F6 | 	mov	arg03, #1
1ca20     BC AA B0 FD | 	call	#__system___float_cmp
1ca24     00 7A 0E F2 | 	cmp	result1, #0 wz
1ca28     00 B0 26 A6 |  if_e	not	local06, #0
1ca2c     E7 B0 62 FC | 	wrlong	local06, fp
1ca30     D8 01 90 FD | 	jmp	#LR__2423
1ca34                 | LR__2414
1ca34                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1ca34     08 CE 05 F1 | 	add	fp, #8
1ca38     E7 B0 02 FB | 	rdlong	local06, fp
1ca3c     08 CE 85 F1 | 	sub	fp, #8
1ca40     1C B0 0E F2 | 	cmp	local06, #28 wz
1ca44     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1ca48     18 00 90 5D |  if_ne	jmp	#LR__2415
1ca4c     00 B0 06 F6 | 	mov	local06, #0
1ca50     E7 AC 02 FB | 	rdlong	local04, fp
1ca54     53 AD 0A F2 | 	cmp	local04, local01 wz
1ca58     01 B0 66 A6 |  if_e	neg	local06, #1
1ca5c     E7 B0 62 FC | 	wrlong	local06, fp
1ca60     A8 01 90 FD | 	jmp	#LR__2423
1ca64                 | LR__2415
1ca64                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1ca64     08 CE 05 F1 | 	add	fp, #8
1ca68     E7 B0 02 FB | 	rdlong	local06, fp
1ca6c     08 CE 85 F1 | 	sub	fp, #8
1ca70     1C B0 0E F2 | 	cmp	local06, #28 wz
1ca74     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1ca78     18 00 90 5D |  if_ne	jmp	#LR__2416
1ca7c     00 B0 06 F6 | 	mov	local06, #0
1ca80     E7 AC 02 FB | 	rdlong	local04, fp
1ca84     53 AD 0A F2 | 	cmp	local04, local01 wz
1ca88     01 B0 66 A6 |  if_e	neg	local06, #1
1ca8c     E7 B0 62 FC | 	wrlong	local06, fp
1ca90     78 01 90 FD | 	jmp	#LR__2423
1ca94                 | LR__2416
1ca94                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1ca94     08 CE 05 F1 | 	add	fp, #8
1ca98     E7 B0 02 FB | 	rdlong	local06, fp
1ca9c     08 CE 85 F1 | 	sub	fp, #8
1caa0     1D B0 0E F2 | 	cmp	local06, #29 wz
1caa4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1caa8     2C 00 90 5D |  if_ne	jmp	#LR__2417
1caac     00 B0 06 F6 | 	mov	local06, #0
1cab0     E7 92 02 FB | 	rdlong	arg01, fp
1cab4     F0 A1 B0 FD | 	call	#__system___float_fromuns
1cab8     3D 93 02 F6 | 	mov	arg01, result1
1cabc     53 95 02 F6 | 	mov	arg02, local01
1cac0     01 96 06 F6 | 	mov	arg03, #1
1cac4     18 AA B0 FD | 	call	#__system___float_cmp
1cac8     00 7A 0E F2 | 	cmp	result1, #0 wz
1cacc     00 B0 26 A6 |  if_e	not	local06, #0
1cad0     E7 B0 62 FC | 	wrlong	local06, fp
1cad4     34 01 90 FD | 	jmp	#LR__2423
1cad8                 | LR__2417
1cad8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1cad8     08 CE 05 F1 | 	add	fp, #8
1cadc     E7 B0 02 FB | 	rdlong	local06, fp
1cae0     08 CE 85 F1 | 	sub	fp, #8
1cae4     1D B0 0E F2 | 	cmp	local06, #29 wz
1cae8     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1caec     18 00 90 5D |  if_ne	jmp	#LR__2418
1caf0     00 B0 06 F6 | 	mov	local06, #0
1caf4     E7 AC 02 FB | 	rdlong	local04, fp
1caf8     53 AD 0A F2 | 	cmp	local04, local01 wz
1cafc     01 B0 66 A6 |  if_e	neg	local06, #1
1cb00     E7 B0 62 FC | 	wrlong	local06, fp
1cb04     04 01 90 FD | 	jmp	#LR__2423
1cb08                 | LR__2418
1cb08                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1cb08     08 CE 05 F1 | 	add	fp, #8
1cb0c     E7 B0 02 FB | 	rdlong	local06, fp
1cb10     08 CE 85 F1 | 	sub	fp, #8
1cb14     1D B0 0E F2 | 	cmp	local06, #29 wz
1cb18     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cb1c     18 00 90 5D |  if_ne	jmp	#LR__2419
1cb20     00 B0 06 F6 | 	mov	local06, #0
1cb24     E7 AC 02 FB | 	rdlong	local04, fp
1cb28     53 AD 0A F2 | 	cmp	local04, local01 wz
1cb2c     01 B0 66 A6 |  if_e	neg	local06, #1
1cb30     E7 B0 62 FC | 	wrlong	local06, fp
1cb34     D4 00 90 FD | 	jmp	#LR__2423
1cb38                 | LR__2419
1cb38                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1cb38     08 CE 05 F1 | 	add	fp, #8
1cb3c     E7 B0 02 FB | 	rdlong	local06, fp
1cb40     08 CE 85 F1 | 	sub	fp, #8
1cb44     2B B0 0E F2 | 	cmp	local06, #43 wz
1cb48     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1cb4c     28 00 90 5D |  if_ne	jmp	#LR__2420
1cb50     00 B0 06 F6 | 	mov	local06, #0
1cb54     E7 92 02 FB | 	rdlong	arg01, fp
1cb58     BC 0C BF FD | 	call	#_convertstring
1cb5c     3D 93 02 F6 | 	mov	arg01, result1
1cb60     53 95 02 F6 | 	mov	arg02, local01
1cb64     9C 7E B0 FD | 	call	#__system___string_cmp
1cb68     00 7A 0E F2 | 	cmp	result1, #0 wz
1cb6c     00 B0 26 A6 |  if_e	not	local06, #0
1cb70     E7 B0 62 FC | 	wrlong	local06, fp
1cb74     94 00 90 FD | 	jmp	#LR__2423
1cb78                 | LR__2420
1cb78                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1cb78     08 CE 05 F1 | 	add	fp, #8
1cb7c     E7 B0 02 FB | 	rdlong	local06, fp
1cb80     08 CE 85 F1 | 	sub	fp, #8
1cb84     1F B0 0E F2 | 	cmp	local06, #31 wz
1cb88     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1cb8c     2C 00 90 5D |  if_ne	jmp	#LR__2421
1cb90     00 B0 06 F6 | 	mov	local06, #0
1cb94     E7 AC 02 FB | 	rdlong	local04, fp
1cb98     53 93 02 F6 | 	mov	arg01, local01
1cb9c     78 0C BF FD | 	call	#_convertstring
1cba0     3D 95 02 F6 | 	mov	arg02, result1
1cba4     56 93 02 F6 | 	mov	arg01, local04
1cba8     58 7E B0 FD | 	call	#__system___string_cmp
1cbac     00 7A 0E F2 | 	cmp	result1, #0 wz
1cbb0     00 B0 26 A6 |  if_e	not	local06, #0
1cbb4     E7 B0 62 FC | 	wrlong	local06, fp
1cbb8     50 00 90 FD | 	jmp	#LR__2423
1cbbc                 | LR__2421
1cbbc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1cbbc     08 CE 05 F1 | 	add	fp, #8
1cbc0     E7 B0 02 FB | 	rdlong	local06, fp
1cbc4     08 CE 85 F1 | 	sub	fp, #8
1cbc8     2B B0 0E F2 | 	cmp	local06, #43 wz
1cbcc     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1cbd0     34 00 90 5D |  if_ne	jmp	#LR__2422
1cbd4     00 B0 06 F6 | 	mov	local06, #0
1cbd8     E7 92 02 FB | 	rdlong	arg01, fp
1cbdc     38 0C BF FD | 	call	#_convertstring
1cbe0     3D AD 02 F6 | 	mov	local04, result1
1cbe4     53 93 02 F6 | 	mov	arg01, local01
1cbe8     2C 0C BF FD | 	call	#_convertstring
1cbec     3D 95 02 F6 | 	mov	arg02, result1
1cbf0     56 93 02 F6 | 	mov	arg01, local04
1cbf4     0C 7E B0 FD | 	call	#__system___string_cmp
1cbf8     00 7A 0E F2 | 	cmp	result1, #0 wz
1cbfc     00 B0 26 A6 |  if_e	not	local06, #0
1cc00     E7 B0 62 FC | 	wrlong	local06, fp
1cc04     04 00 90 FD | 	jmp	#LR__2423
1cc08                 | LR__2422
1cc08     E7 00 68 FC | 	wrlong	#0, fp
1cc0c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1cc0c                 | LR__2423
1cc0c     08 CE 05 F1 | 	add	fp, #8
1cc10     E7 38 68 FC | 	wrlong	#28, fp
1cc14     08 CE 85 F1 | 	sub	fp, #8
1cc18     E7 92 02 F6 | 	mov	arg01, fp
1cc1c     18 0B BF FD | 	call	#_push
1cc20     E7 F0 03 F6 | 	mov	ptra, fp
1cc24     F2 00 A0 FD | 	call	#popregs_
1cc28                 | _do_eq_ret
1cc28     2D 00 64 FD | 	ret
1cc2c                 | 
1cc2c                 | ' 
1cc2c                 | ' '--------------------------------- fdiv (/) - float divide
1cc2c                 | ' 
1cc2c                 | ' sub do_fdiv 
1cc2c                 | _do_fdiv
1cc2c     04 CA 05 F6 | 	mov	COUNT_, #4
1cc30     E8 00 A0 FD | 	call	#pushregs_
1cc34     18 F0 07 F1 | 	add	ptra, #24
1cc38     6C 0A BF FD | 	call	#_pop
1cc3c     3D A7 02 F6 | 	mov	local01, result1
1cc40     3E 95 02 F6 | 	mov	arg02, result2
1cc44     3F 93 02 F6 | 	mov	arg01, result3
1cc48     4A A9 02 F6 | 	mov	local02, arg02
1cc4c     49 AB 02 F6 | 	mov	local03, arg01
1cc50     54 0A BF FD | 	call	#_pop
1cc54     E7 7A 62 FC | 	wrlong	result1, fp
1cc58     04 CE 05 F1 | 	add	fp, #4
1cc5c     E7 7C 62 FC | 	wrlong	result2, fp
1cc60     04 CE 05 F1 | 	add	fp, #4
1cc64     E7 7E 62 FC | 	wrlong	result3, fp
1cc68                 | ' 
1cc68                 | ' t2=pop()
1cc68                 | ' t1=pop()
1cc68                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1cc68     08 CE 85 F1 | 	sub	fp, #8
1cc6c     1F 7E 0E F2 | 	cmp	result3, #31 wz
1cc70     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1cc74     E7 14 68 AC |  if_e	wrlong	#10, fp
1cc78     08 CE 05 A1 |  if_e	add	fp, #8
1cc7c     E7 FE 69 AC |  if_e	wrlong	#255, fp
1cc80     08 CE 85 A1 |  if_e	sub	fp, #8
1cc84     E0 00 90 AD |  if_e	jmp	#LR__2435
1cc88                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1cc88     08 CE 05 F1 | 	add	fp, #8
1cc8c     E7 94 02 FB | 	rdlong	arg02, fp
1cc90     08 CE 85 F1 | 	sub	fp, #8
1cc94     1C 94 0E F2 | 	cmp	arg02, #28 wz
1cc98     28 00 90 5D |  if_ne	jmp	#LR__2430
1cc9c     08 CE 05 F1 | 	add	fp, #8
1cca0     E7 3C 68 FC | 	wrlong	#30, fp
1cca4     08 CE 85 F1 | 	sub	fp, #8
1cca8     E7 92 02 FB | 	rdlong	arg01, fp
1ccac     49 93 52 F6 | 	abs	arg01, arg01 wc
1ccb0     1F AC C6 C9 |  if_b	decod	local04, #31
1ccb4     00 AC 06 36 |  if_ae	mov	local04, #0
1ccb8     EC 9F B0 FD | 	call	#__system___float_fromuns
1ccbc     56 7B 62 F5 | 	xor	result1, local04
1ccc0     E7 7A 62 FC | 	wrlong	result1, fp
1ccc4                 | LR__2430
1ccc4                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1ccc4     08 CE 05 F1 | 	add	fp, #8
1ccc8     E7 94 02 FB | 	rdlong	arg02, fp
1cccc     08 CE 85 F1 | 	sub	fp, #8
1ccd0     1D 94 0E F2 | 	cmp	arg02, #29 wz
1ccd4     18 00 90 5D |  if_ne	jmp	#LR__2431
1ccd8     08 CE 05 F1 | 	add	fp, #8
1ccdc     E7 3C 68 FC | 	wrlong	#30, fp
1cce0     08 CE 85 F1 | 	sub	fp, #8
1cce4     E7 92 02 FB | 	rdlong	arg01, fp
1cce8     BC 9F B0 FD | 	call	#__system___float_fromuns
1ccec     E7 7A 62 FC | 	wrlong	result1, fp
1ccf0                 | LR__2431
1ccf0                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1ccf0     1C AA 0E F2 | 	cmp	local03, #28 wz
1ccf4     1C 00 90 5D |  if_ne	jmp	#LR__2432
1ccf8     1E AA 06 F6 | 	mov	local03, #30
1ccfc     53 93 52 F6 | 	abs	arg01, local01 wc
1cd00     1F AC C6 C9 |  if_b	decod	local04, #31
1cd04     00 AC 06 36 |  if_ae	mov	local04, #0
1cd08     9C 9F B0 FD | 	call	#__system___float_fromuns
1cd0c     56 7B 62 F5 | 	xor	result1, local04
1cd10     3D A7 02 F6 | 	mov	local01, result1
1cd14                 | LR__2432
1cd14                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1cd14     1D AA 0E F2 | 	cmp	local03, #29 wz
1cd18     10 00 90 5D |  if_ne	jmp	#LR__2433
1cd1c     1E AA 06 F6 | 	mov	local03, #30
1cd20     53 93 02 F6 | 	mov	arg01, local01
1cd24     80 9F B0 FD | 	call	#__system___float_fromuns
1cd28     3D A7 02 F6 | 	mov	local01, result1
1cd2c                 | LR__2433
1cd2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1cd2c     08 CE 05 F1 | 	add	fp, #8
1cd30     E7 94 02 FB | 	rdlong	arg02, fp
1cd34     08 CE 85 F1 | 	sub	fp, #8
1cd38     1E 94 0E F2 | 	cmp	arg02, #30 wz
1cd3c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cd40     14 00 90 5D |  if_ne	jmp	#LR__2434
1cd44     E7 92 02 FB | 	rdlong	arg01, fp
1cd48     53 95 02 F6 | 	mov	arg02, local01
1cd4c     60 A5 B0 FD | 	call	#__system___float_div
1cd50     E7 7A 62 FC | 	wrlong	result1, fp
1cd54     10 00 90 FD | 	jmp	#LR__2435
1cd58                 | LR__2434
1cd58     E7 16 68 FC | 	wrlong	#11, fp
1cd5c     08 CE 05 F1 | 	add	fp, #8
1cd60     E7 FE 69 FC | 	wrlong	#255, fp
1cd64     08 CE 85 F1 | 	sub	fp, #8
1cd68                 | LR__2435
1cd68     E7 92 02 F6 | 	mov	arg01, fp
1cd6c     C8 09 BF FD | 	call	#_push
1cd70     E7 F0 03 F6 | 	mov	ptra, fp
1cd74     F2 00 A0 FD | 	call	#popregs_
1cd78                 | _do_fdiv_ret
1cd78     2D 00 64 FD | 	ret
1cd7c                 | 
1cd7c                 | ' 
1cd7c                 | ' '--------------------------------- greater or equal (>=)
1cd7c                 | ' 
1cd7c                 | ' sub do_ge
1cd7c                 | _do_ge
1cd7c     07 CA 05 F6 | 	mov	COUNT_, #7
1cd80     E8 00 A0 FD | 	call	#pushregs_
1cd84     18 F0 07 F1 | 	add	ptra, #24
1cd88     1C 09 BF FD | 	call	#_pop
1cd8c     3D A7 02 F6 | 	mov	local01, result1
1cd90     3E AD 02 F6 | 	mov	local04, result2
1cd94     3F AF 02 F6 | 	mov	local05, result3
1cd98     56 A9 02 F6 | 	mov	local02, local04
1cd9c     57 AB 02 F6 | 	mov	local03, local05
1cda0     04 09 BF FD | 	call	#_pop
1cda4     3F AF 02 F6 | 	mov	local05, result3
1cda8     E7 7A 62 FC | 	wrlong	result1, fp
1cdac     04 CE 05 F1 | 	add	fp, #4
1cdb0     E7 7C 62 FC | 	wrlong	result2, fp
1cdb4     04 CE 05 F1 | 	add	fp, #4
1cdb8     E7 AE 62 FC | 	wrlong	local05, fp
1cdbc                 | ' 
1cdbc                 | ' t2=pop()
1cdbc                 | ' t1=pop()
1cdbc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1cdbc     08 CE 85 F1 | 	sub	fp, #8
1cdc0     1F AE 0E F2 | 	cmp	local05, #31 wz
1cdc4     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1cdc8     20 00 90 5D |  if_ne	jmp	#LR__2440
1cdcc     00 B0 06 F6 | 	mov	local06, #0
1cdd0     E7 92 02 FB | 	rdlong	arg01, fp
1cdd4     53 95 02 F6 | 	mov	arg02, local01
1cdd8     28 7C B0 FD | 	call	#__system___string_cmp
1cddc     00 7A 56 F2 | 	cmps	result1, #0 wc
1cde0     00 B0 26 36 |  if_ae	not	local06, #0
1cde4     E7 B0 62 FC | 	wrlong	local06, fp
1cde8     04 03 90 FD | 	jmp	#LR__2453
1cdec                 | LR__2440
1cdec                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1cdec     08 CE 05 F1 | 	add	fp, #8
1cdf0     E7 B0 02 FB | 	rdlong	local06, fp
1cdf4     08 CE 85 F1 | 	sub	fp, #8
1cdf8     1E B0 0E F2 | 	cmp	local06, #30 wz
1cdfc     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1ce00     24 00 90 5D |  if_ne	jmp	#LR__2441
1ce04     00 B0 06 F6 | 	mov	local06, #0
1ce08     E7 92 02 FB | 	rdlong	arg01, fp
1ce0c     53 95 02 F6 | 	mov	arg02, local01
1ce10     01 96 66 F6 | 	neg	arg03, #1
1ce14     C8 A6 B0 FD | 	call	#__system___float_cmp
1ce18     00 7A 56 F2 | 	cmps	result1, #0 wc
1ce1c     00 B0 26 36 |  if_ae	not	local06, #0
1ce20     E7 B0 62 FC | 	wrlong	local06, fp
1ce24     C8 02 90 FD | 	jmp	#LR__2453
1ce28                 | LR__2441
1ce28                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1ce28     08 CE 05 F1 | 	add	fp, #8
1ce2c     E7 B0 02 FB | 	rdlong	local06, fp
1ce30     08 CE 85 F1 | 	sub	fp, #8
1ce34     1E B0 0E F2 | 	cmp	local06, #30 wz
1ce38     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1ce3c     3C 00 90 5D |  if_ne	jmp	#LR__2442
1ce40     00 B0 06 F6 | 	mov	local06, #0
1ce44     E7 AC 02 FB | 	rdlong	local04, fp
1ce48     53 93 52 F6 | 	abs	arg01, local01 wc
1ce4c     1F B2 C6 C9 |  if_b	decod	local07, #31
1ce50     00 B2 06 36 |  if_ae	mov	local07, #0
1ce54     50 9E B0 FD | 	call	#__system___float_fromuns
1ce58     59 7B 62 F5 | 	xor	result1, local07
1ce5c     3D 95 02 F6 | 	mov	arg02, result1
1ce60     56 93 02 F6 | 	mov	arg01, local04
1ce64     01 96 66 F6 | 	neg	arg03, #1
1ce68     74 A6 B0 FD | 	call	#__system___float_cmp
1ce6c     00 7A 56 F2 | 	cmps	result1, #0 wc
1ce70     00 B0 26 36 |  if_ae	not	local06, #0
1ce74     E7 B0 62 FC | 	wrlong	local06, fp
1ce78     74 02 90 FD | 	jmp	#LR__2453
1ce7c                 | LR__2442
1ce7c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1ce7c     08 CE 05 F1 | 	add	fp, #8
1ce80     E7 B0 02 FB | 	rdlong	local06, fp
1ce84     08 CE 85 F1 | 	sub	fp, #8
1ce88     1E B0 0E F2 | 	cmp	local06, #30 wz
1ce8c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1ce90     30 00 90 5D |  if_ne	jmp	#LR__2443
1ce94     00 B0 06 F6 | 	mov	local06, #0
1ce98     E7 AC 02 FB | 	rdlong	local04, fp
1ce9c     53 93 02 F6 | 	mov	arg01, local01
1cea0     04 9E B0 FD | 	call	#__system___float_fromuns
1cea4     3D 95 02 F6 | 	mov	arg02, result1
1cea8     56 93 02 F6 | 	mov	arg01, local04
1ceac     01 96 66 F6 | 	neg	arg03, #1
1ceb0     2C A6 B0 FD | 	call	#__system___float_cmp
1ceb4     00 7A 56 F2 | 	cmps	result1, #0 wc
1ceb8     00 B0 26 36 |  if_ae	not	local06, #0
1cebc     E7 B0 62 FC | 	wrlong	local06, fp
1cec0     2C 02 90 FD | 	jmp	#LR__2453
1cec4                 | LR__2443
1cec4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1cec4     08 CE 05 F1 | 	add	fp, #8
1cec8     E7 B0 02 FB | 	rdlong	local06, fp
1cecc     08 CE 85 F1 | 	sub	fp, #8
1ced0     1C B0 0E F2 | 	cmp	local06, #28 wz
1ced4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1ced8     3C 00 90 5D |  if_ne	jmp	#LR__2444
1cedc     00 B0 06 F6 | 	mov	local06, #0
1cee0     E7 92 02 FB | 	rdlong	arg01, fp
1cee4     49 93 52 F6 | 	abs	arg01, arg01 wc
1cee8     1F B2 C6 C9 |  if_b	decod	local07, #31
1ceec     00 B2 06 36 |  if_ae	mov	local07, #0
1cef0     B4 9D B0 FD | 	call	#__system___float_fromuns
1cef4     59 7B 62 F5 | 	xor	result1, local07
1cef8     3D 93 02 F6 | 	mov	arg01, result1
1cefc     53 95 02 F6 | 	mov	arg02, local01
1cf00     01 96 66 F6 | 	neg	arg03, #1
1cf04     D8 A5 B0 FD | 	call	#__system___float_cmp
1cf08     00 7A 56 F2 | 	cmps	result1, #0 wc
1cf0c     00 B0 26 36 |  if_ae	not	local06, #0
1cf10     E7 B0 62 FC | 	wrlong	local06, fp
1cf14     D8 01 90 FD | 	jmp	#LR__2453
1cf18                 | LR__2444
1cf18                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1cf18     08 CE 05 F1 | 	add	fp, #8
1cf1c     E7 B0 02 FB | 	rdlong	local06, fp
1cf20     08 CE 85 F1 | 	sub	fp, #8
1cf24     1C B0 0E F2 | 	cmp	local06, #28 wz
1cf28     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cf2c     18 00 90 5D |  if_ne	jmp	#LR__2445
1cf30     00 B0 06 F6 | 	mov	local06, #0
1cf34     E7 AC 02 FB | 	rdlong	local04, fp
1cf38     53 AD 52 F2 | 	cmps	local04, local01 wc
1cf3c     01 B0 66 36 |  if_ae	neg	local06, #1
1cf40     E7 B0 62 FC | 	wrlong	local06, fp
1cf44     A8 01 90 FD | 	jmp	#LR__2453
1cf48                 | LR__2445
1cf48                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1cf48     08 CE 05 F1 | 	add	fp, #8
1cf4c     E7 B0 02 FB | 	rdlong	local06, fp
1cf50     08 CE 85 F1 | 	sub	fp, #8
1cf54     1C B0 0E F2 | 	cmp	local06, #28 wz
1cf58     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1cf5c     18 00 90 5D |  if_ne	jmp	#LR__2446
1cf60     00 B0 06 F6 | 	mov	local06, #0
1cf64     E7 AC 02 FB | 	rdlong	local04, fp
1cf68     53 AD 52 F2 | 	cmps	local04, local01 wc
1cf6c     01 B0 66 36 |  if_ae	neg	local06, #1
1cf70     E7 B0 62 FC | 	wrlong	local06, fp
1cf74     78 01 90 FD | 	jmp	#LR__2453
1cf78                 | LR__2446
1cf78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1cf78     08 CE 05 F1 | 	add	fp, #8
1cf7c     E7 B0 02 FB | 	rdlong	local06, fp
1cf80     08 CE 85 F1 | 	sub	fp, #8
1cf84     1D B0 0E F2 | 	cmp	local06, #29 wz
1cf88     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1cf8c     2C 00 90 5D |  if_ne	jmp	#LR__2447
1cf90     00 B0 06 F6 | 	mov	local06, #0
1cf94     E7 92 02 FB | 	rdlong	arg01, fp
1cf98     0C 9D B0 FD | 	call	#__system___float_fromuns
1cf9c     3D 93 02 F6 | 	mov	arg01, result1
1cfa0     53 95 02 F6 | 	mov	arg02, local01
1cfa4     01 96 66 F6 | 	neg	arg03, #1
1cfa8     34 A5 B0 FD | 	call	#__system___float_cmp
1cfac     00 7A 56 F2 | 	cmps	result1, #0 wc
1cfb0     00 B0 26 36 |  if_ae	not	local06, #0
1cfb4     E7 B0 62 FC | 	wrlong	local06, fp
1cfb8     34 01 90 FD | 	jmp	#LR__2453
1cfbc                 | LR__2447
1cfbc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1cfbc     08 CE 05 F1 | 	add	fp, #8
1cfc0     E7 B0 02 FB | 	rdlong	local06, fp
1cfc4     08 CE 85 F1 | 	sub	fp, #8
1cfc8     1D B0 0E F2 | 	cmp	local06, #29 wz
1cfcc     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1cfd0     18 00 90 5D |  if_ne	jmp	#LR__2448
1cfd4     00 B0 06 F6 | 	mov	local06, #0
1cfd8     E7 AC 02 FB | 	rdlong	local04, fp
1cfdc     53 AD 52 F2 | 	cmps	local04, local01 wc
1cfe0     01 B0 66 36 |  if_ae	neg	local06, #1
1cfe4     E7 B0 62 FC | 	wrlong	local06, fp
1cfe8     04 01 90 FD | 	jmp	#LR__2453
1cfec                 | LR__2448
1cfec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1cfec     08 CE 05 F1 | 	add	fp, #8
1cff0     E7 B0 02 FB | 	rdlong	local06, fp
1cff4     08 CE 85 F1 | 	sub	fp, #8
1cff8     1D B0 0E F2 | 	cmp	local06, #29 wz
1cffc     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d000     18 00 90 5D |  if_ne	jmp	#LR__2449
1d004     00 B0 06 F6 | 	mov	local06, #0
1d008     E7 AC 02 FB | 	rdlong	local04, fp
1d00c     53 AD 12 F2 | 	cmp	local04, local01 wc
1d010     01 B0 66 36 |  if_ae	neg	local06, #1
1d014     E7 B0 62 FC | 	wrlong	local06, fp
1d018     D4 00 90 FD | 	jmp	#LR__2453
1d01c                 | LR__2449
1d01c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1d01c     08 CE 05 F1 | 	add	fp, #8
1d020     E7 B0 02 FB | 	rdlong	local06, fp
1d024     08 CE 85 F1 | 	sub	fp, #8
1d028     2B B0 0E F2 | 	cmp	local06, #43 wz
1d02c     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d030     28 00 90 5D |  if_ne	jmp	#LR__2450
1d034     00 B0 06 F6 | 	mov	local06, #0
1d038     E7 92 02 FB | 	rdlong	arg01, fp
1d03c     D8 07 BF FD | 	call	#_convertstring
1d040     3D 93 02 F6 | 	mov	arg01, result1
1d044     53 95 02 F6 | 	mov	arg02, local01
1d048     B8 79 B0 FD | 	call	#__system___string_cmp
1d04c     00 7A 56 F2 | 	cmps	result1, #0 wc
1d050     00 B0 26 36 |  if_ae	not	local06, #0
1d054     E7 B0 62 FC | 	wrlong	local06, fp
1d058     94 00 90 FD | 	jmp	#LR__2453
1d05c                 | LR__2450
1d05c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1d05c     08 CE 05 F1 | 	add	fp, #8
1d060     E7 B0 02 FB | 	rdlong	local06, fp
1d064     08 CE 85 F1 | 	sub	fp, #8
1d068     1F B0 0E F2 | 	cmp	local06, #31 wz
1d06c     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d070     2C 00 90 5D |  if_ne	jmp	#LR__2451
1d074     00 B0 06 F6 | 	mov	local06, #0
1d078     E7 AC 02 FB | 	rdlong	local04, fp
1d07c     53 93 02 F6 | 	mov	arg01, local01
1d080     94 07 BF FD | 	call	#_convertstring
1d084     3D 95 02 F6 | 	mov	arg02, result1
1d088     56 93 02 F6 | 	mov	arg01, local04
1d08c     74 79 B0 FD | 	call	#__system___string_cmp
1d090     00 7A 56 F2 | 	cmps	result1, #0 wc
1d094     00 B0 26 36 |  if_ae	not	local06, #0
1d098     E7 B0 62 FC | 	wrlong	local06, fp
1d09c     50 00 90 FD | 	jmp	#LR__2453
1d0a0                 | LR__2451
1d0a0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1d0a0     08 CE 05 F1 | 	add	fp, #8
1d0a4     E7 B0 02 FB | 	rdlong	local06, fp
1d0a8     08 CE 85 F1 | 	sub	fp, #8
1d0ac     2B B0 0E F2 | 	cmp	local06, #43 wz
1d0b0     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d0b4     34 00 90 5D |  if_ne	jmp	#LR__2452
1d0b8     00 B0 06 F6 | 	mov	local06, #0
1d0bc     E7 92 02 FB | 	rdlong	arg01, fp
1d0c0     54 07 BF FD | 	call	#_convertstring
1d0c4     3D AD 02 F6 | 	mov	local04, result1
1d0c8     53 93 02 F6 | 	mov	arg01, local01
1d0cc     48 07 BF FD | 	call	#_convertstring
1d0d0     3D 95 02 F6 | 	mov	arg02, result1
1d0d4     56 93 02 F6 | 	mov	arg01, local04
1d0d8     28 79 B0 FD | 	call	#__system___string_cmp
1d0dc     00 7A 56 F2 | 	cmps	result1, #0 wc
1d0e0     00 B0 26 36 |  if_ae	not	local06, #0
1d0e4     E7 B0 62 FC | 	wrlong	local06, fp
1d0e8     04 00 90 FD | 	jmp	#LR__2453
1d0ec                 | LR__2452
1d0ec     E7 00 68 FC | 	wrlong	#0, fp
1d0f0                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d0f0                 | LR__2453
1d0f0     08 CE 05 F1 | 	add	fp, #8
1d0f4     E7 38 68 FC | 	wrlong	#28, fp
1d0f8     08 CE 85 F1 | 	sub	fp, #8
1d0fc                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d0fc     E7 B0 0A FB | 	rdlong	local06, fp wz
1d100     E7 02 68 5C |  if_ne	wrlong	#1, fp
1d104     E7 92 02 F6 | 	mov	arg01, fp
1d108     2C 06 BF FD | 	call	#_push
1d10c     E7 F0 03 F6 | 	mov	ptra, fp
1d110     F2 00 A0 FD | 	call	#popregs_
1d114                 | _do_ge_ret
1d114     2D 00 64 FD | 	ret
1d118                 | 
1d118                 | ' 
1d118                 | ' '--------------------------------- greater than (>)
1d118                 | ' 
1d118                 | ' sub do_gt
1d118                 | _do_gt
1d118     07 CA 05 F6 | 	mov	COUNT_, #7
1d11c     E8 00 A0 FD | 	call	#pushregs_
1d120     18 F0 07 F1 | 	add	ptra, #24
1d124     80 05 BF FD | 	call	#_pop
1d128     3D A7 02 F6 | 	mov	local01, result1
1d12c     3E AD 02 F6 | 	mov	local04, result2
1d130     3F AF 02 F6 | 	mov	local05, result3
1d134     56 A9 02 F6 | 	mov	local02, local04
1d138     57 AB 02 F6 | 	mov	local03, local05
1d13c     68 05 BF FD | 	call	#_pop
1d140     3F AF 02 F6 | 	mov	local05, result3
1d144     E7 7A 62 FC | 	wrlong	result1, fp
1d148     04 CE 05 F1 | 	add	fp, #4
1d14c     E7 7C 62 FC | 	wrlong	result2, fp
1d150     04 CE 05 F1 | 	add	fp, #4
1d154     E7 AE 62 FC | 	wrlong	local05, fp
1d158                 | ' 
1d158                 | ' t2=pop()
1d158                 | ' t1=pop()
1d158                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1d158     08 CE 85 F1 | 	sub	fp, #8
1d15c     1F AE 0E F2 | 	cmp	local05, #31 wz
1d160     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d164     20 00 90 5D |  if_ne	jmp	#LR__2460
1d168     00 B0 06 F6 | 	mov	local06, #0
1d16c     E7 92 02 FB | 	rdlong	arg01, fp
1d170     53 95 02 F6 | 	mov	arg02, local01
1d174     8C 78 B0 FD | 	call	#__system___string_cmp
1d178     01 7A 56 F2 | 	cmps	result1, #1 wc
1d17c     00 B0 26 36 |  if_ae	not	local06, #0
1d180     E7 B0 62 FC | 	wrlong	local06, fp
1d184     04 03 90 FD | 	jmp	#LR__2473
1d188                 | LR__2460
1d188                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1d188     08 CE 05 F1 | 	add	fp, #8
1d18c     E7 B0 02 FB | 	rdlong	local06, fp
1d190     08 CE 85 F1 | 	sub	fp, #8
1d194     1E B0 0E F2 | 	cmp	local06, #30 wz
1d198     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d19c     24 00 90 5D |  if_ne	jmp	#LR__2461
1d1a0     00 B0 06 F6 | 	mov	local06, #0
1d1a4     E7 92 02 FB | 	rdlong	arg01, fp
1d1a8     53 95 02 F6 | 	mov	arg02, local01
1d1ac     01 96 66 F6 | 	neg	arg03, #1
1d1b0     2C A3 B0 FD | 	call	#__system___float_cmp
1d1b4     01 7A 56 F2 | 	cmps	result1, #1 wc
1d1b8     00 B0 26 36 |  if_ae	not	local06, #0
1d1bc     E7 B0 62 FC | 	wrlong	local06, fp
1d1c0     C8 02 90 FD | 	jmp	#LR__2473
1d1c4                 | LR__2461
1d1c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1d1c4     08 CE 05 F1 | 	add	fp, #8
1d1c8     E7 B0 02 FB | 	rdlong	local06, fp
1d1cc     08 CE 85 F1 | 	sub	fp, #8
1d1d0     1E B0 0E F2 | 	cmp	local06, #30 wz
1d1d4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d1d8     3C 00 90 5D |  if_ne	jmp	#LR__2462
1d1dc     00 B0 06 F6 | 	mov	local06, #0
1d1e0     E7 AC 02 FB | 	rdlong	local04, fp
1d1e4     53 93 52 F6 | 	abs	arg01, local01 wc
1d1e8     1F B2 C6 C9 |  if_b	decod	local07, #31
1d1ec     00 B2 06 36 |  if_ae	mov	local07, #0
1d1f0     B4 9A B0 FD | 	call	#__system___float_fromuns
1d1f4     59 7B 62 F5 | 	xor	result1, local07
1d1f8     3D 95 02 F6 | 	mov	arg02, result1
1d1fc     56 93 02 F6 | 	mov	arg01, local04
1d200     01 96 66 F6 | 	neg	arg03, #1
1d204     D8 A2 B0 FD | 	call	#__system___float_cmp
1d208     01 7A 56 F2 | 	cmps	result1, #1 wc
1d20c     00 B0 26 36 |  if_ae	not	local06, #0
1d210     E7 B0 62 FC | 	wrlong	local06, fp
1d214     74 02 90 FD | 	jmp	#LR__2473
1d218                 | LR__2462
1d218                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1d218     08 CE 05 F1 | 	add	fp, #8
1d21c     E7 B0 02 FB | 	rdlong	local06, fp
1d220     08 CE 85 F1 | 	sub	fp, #8
1d224     1E B0 0E F2 | 	cmp	local06, #30 wz
1d228     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d22c     30 00 90 5D |  if_ne	jmp	#LR__2463
1d230     00 B0 06 F6 | 	mov	local06, #0
1d234     E7 AC 02 FB | 	rdlong	local04, fp
1d238     53 93 02 F6 | 	mov	arg01, local01
1d23c     68 9A B0 FD | 	call	#__system___float_fromuns
1d240     3D 95 02 F6 | 	mov	arg02, result1
1d244     56 93 02 F6 | 	mov	arg01, local04
1d248     01 96 66 F6 | 	neg	arg03, #1
1d24c     90 A2 B0 FD | 	call	#__system___float_cmp
1d250     01 7A 56 F2 | 	cmps	result1, #1 wc
1d254     00 B0 26 36 |  if_ae	not	local06, #0
1d258     E7 B0 62 FC | 	wrlong	local06, fp
1d25c     2C 02 90 FD | 	jmp	#LR__2473
1d260                 | LR__2463
1d260                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1d260     08 CE 05 F1 | 	add	fp, #8
1d264     E7 B0 02 FB | 	rdlong	local06, fp
1d268     08 CE 85 F1 | 	sub	fp, #8
1d26c     1C B0 0E F2 | 	cmp	local06, #28 wz
1d270     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d274     3C 00 90 5D |  if_ne	jmp	#LR__2464
1d278     00 B0 06 F6 | 	mov	local06, #0
1d27c     E7 92 02 FB | 	rdlong	arg01, fp
1d280     49 93 52 F6 | 	abs	arg01, arg01 wc
1d284     1F B2 C6 C9 |  if_b	decod	local07, #31
1d288     00 B2 06 36 |  if_ae	mov	local07, #0
1d28c     18 9A B0 FD | 	call	#__system___float_fromuns
1d290     59 7B 62 F5 | 	xor	result1, local07
1d294     3D 93 02 F6 | 	mov	arg01, result1
1d298     53 95 02 F6 | 	mov	arg02, local01
1d29c     01 96 66 F6 | 	neg	arg03, #1
1d2a0     3C A2 B0 FD | 	call	#__system___float_cmp
1d2a4     01 7A 56 F2 | 	cmps	result1, #1 wc
1d2a8     00 B0 26 36 |  if_ae	not	local06, #0
1d2ac     E7 B0 62 FC | 	wrlong	local06, fp
1d2b0     D8 01 90 FD | 	jmp	#LR__2473
1d2b4                 | LR__2464
1d2b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1d2b4     08 CE 05 F1 | 	add	fp, #8
1d2b8     E7 B0 02 FB | 	rdlong	local06, fp
1d2bc     08 CE 85 F1 | 	sub	fp, #8
1d2c0     1C B0 0E F2 | 	cmp	local06, #28 wz
1d2c4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d2c8     18 00 90 5D |  if_ne	jmp	#LR__2465
1d2cc     00 B0 06 F6 | 	mov	local06, #0
1d2d0     E7 AC 02 FB | 	rdlong	local04, fp
1d2d4     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d2d8     01 B0 66 16 |  if_a	neg	local06, #1
1d2dc     E7 B0 62 FC | 	wrlong	local06, fp
1d2e0     A8 01 90 FD | 	jmp	#LR__2473
1d2e4                 | LR__2465
1d2e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1d2e4     08 CE 05 F1 | 	add	fp, #8
1d2e8     E7 B0 02 FB | 	rdlong	local06, fp
1d2ec     08 CE 85 F1 | 	sub	fp, #8
1d2f0     1C B0 0E F2 | 	cmp	local06, #28 wz
1d2f4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d2f8     18 00 90 5D |  if_ne	jmp	#LR__2466
1d2fc     00 B0 06 F6 | 	mov	local06, #0
1d300     E7 AC 02 FB | 	rdlong	local04, fp
1d304     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d308     01 B0 66 16 |  if_a	neg	local06, #1
1d30c     E7 B0 62 FC | 	wrlong	local06, fp
1d310     78 01 90 FD | 	jmp	#LR__2473
1d314                 | LR__2466
1d314                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1d314     08 CE 05 F1 | 	add	fp, #8
1d318     E7 B0 02 FB | 	rdlong	local06, fp
1d31c     08 CE 85 F1 | 	sub	fp, #8
1d320     1D B0 0E F2 | 	cmp	local06, #29 wz
1d324     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d328     2C 00 90 5D |  if_ne	jmp	#LR__2467
1d32c     00 B0 06 F6 | 	mov	local06, #0
1d330     E7 92 02 FB | 	rdlong	arg01, fp
1d334     70 99 B0 FD | 	call	#__system___float_fromuns
1d338     3D 93 02 F6 | 	mov	arg01, result1
1d33c     53 95 02 F6 | 	mov	arg02, local01
1d340     01 96 66 F6 | 	neg	arg03, #1
1d344     98 A1 B0 FD | 	call	#__system___float_cmp
1d348     01 7A 56 F2 | 	cmps	result1, #1 wc
1d34c     00 B0 26 36 |  if_ae	not	local06, #0
1d350     E7 B0 62 FC | 	wrlong	local06, fp
1d354     34 01 90 FD | 	jmp	#LR__2473
1d358                 | LR__2467
1d358                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1d358     08 CE 05 F1 | 	add	fp, #8
1d35c     E7 B0 02 FB | 	rdlong	local06, fp
1d360     08 CE 85 F1 | 	sub	fp, #8
1d364     1D B0 0E F2 | 	cmp	local06, #29 wz
1d368     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d36c     18 00 90 5D |  if_ne	jmp	#LR__2468
1d370     00 B0 06 F6 | 	mov	local06, #0
1d374     E7 AC 02 FB | 	rdlong	local04, fp
1d378     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d37c     01 B0 66 16 |  if_a	neg	local06, #1
1d380     E7 B0 62 FC | 	wrlong	local06, fp
1d384     04 01 90 FD | 	jmp	#LR__2473
1d388                 | LR__2468
1d388                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1d388     08 CE 05 F1 | 	add	fp, #8
1d38c     E7 B0 02 FB | 	rdlong	local06, fp
1d390     08 CE 85 F1 | 	sub	fp, #8
1d394     1D B0 0E F2 | 	cmp	local06, #29 wz
1d398     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d39c     18 00 90 5D |  if_ne	jmp	#LR__2469
1d3a0     00 B0 06 F6 | 	mov	local06, #0
1d3a4     E7 AC 02 FB | 	rdlong	local04, fp
1d3a8     53 AD 1A F2 | 	cmp	local04, local01 wcz
1d3ac     01 B0 66 16 |  if_a	neg	local06, #1
1d3b0     E7 B0 62 FC | 	wrlong	local06, fp
1d3b4     D4 00 90 FD | 	jmp	#LR__2473
1d3b8                 | LR__2469
1d3b8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1d3b8     08 CE 05 F1 | 	add	fp, #8
1d3bc     E7 B0 02 FB | 	rdlong	local06, fp
1d3c0     08 CE 85 F1 | 	sub	fp, #8
1d3c4     2B B0 0E F2 | 	cmp	local06, #43 wz
1d3c8     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d3cc     28 00 90 5D |  if_ne	jmp	#LR__2470
1d3d0     00 B0 06 F6 | 	mov	local06, #0
1d3d4     E7 92 02 FB | 	rdlong	arg01, fp
1d3d8     3C 04 BF FD | 	call	#_convertstring
1d3dc     3D 93 02 F6 | 	mov	arg01, result1
1d3e0     53 95 02 F6 | 	mov	arg02, local01
1d3e4     1C 76 B0 FD | 	call	#__system___string_cmp
1d3e8     01 7A 56 F2 | 	cmps	result1, #1 wc
1d3ec     00 B0 26 36 |  if_ae	not	local06, #0
1d3f0     E7 B0 62 FC | 	wrlong	local06, fp
1d3f4     94 00 90 FD | 	jmp	#LR__2473
1d3f8                 | LR__2470
1d3f8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1d3f8     08 CE 05 F1 | 	add	fp, #8
1d3fc     E7 B0 02 FB | 	rdlong	local06, fp
1d400     08 CE 85 F1 | 	sub	fp, #8
1d404     1F B0 0E F2 | 	cmp	local06, #31 wz
1d408     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d40c     2C 00 90 5D |  if_ne	jmp	#LR__2471
1d410     00 B0 06 F6 | 	mov	local06, #0
1d414     E7 AC 02 FB | 	rdlong	local04, fp
1d418     53 93 02 F6 | 	mov	arg01, local01
1d41c     F8 03 BF FD | 	call	#_convertstring
1d420     3D 95 02 F6 | 	mov	arg02, result1
1d424     56 93 02 F6 | 	mov	arg01, local04
1d428     D8 75 B0 FD | 	call	#__system___string_cmp
1d42c     01 7A 56 F2 | 	cmps	result1, #1 wc
1d430     00 B0 26 36 |  if_ae	not	local06, #0
1d434     E7 B0 62 FC | 	wrlong	local06, fp
1d438     50 00 90 FD | 	jmp	#LR__2473
1d43c                 | LR__2471
1d43c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1d43c     08 CE 05 F1 | 	add	fp, #8
1d440     E7 B0 02 FB | 	rdlong	local06, fp
1d444     08 CE 85 F1 | 	sub	fp, #8
1d448     2B B0 0E F2 | 	cmp	local06, #43 wz
1d44c     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d450     34 00 90 5D |  if_ne	jmp	#LR__2472
1d454     00 B0 06 F6 | 	mov	local06, #0
1d458     E7 92 02 FB | 	rdlong	arg01, fp
1d45c     B8 03 BF FD | 	call	#_convertstring
1d460     3D AD 02 F6 | 	mov	local04, result1
1d464     53 93 02 F6 | 	mov	arg01, local01
1d468     AC 03 BF FD | 	call	#_convertstring
1d46c     3D 95 02 F6 | 	mov	arg02, result1
1d470     56 93 02 F6 | 	mov	arg01, local04
1d474     8C 75 B0 FD | 	call	#__system___string_cmp
1d478     01 7A 56 F2 | 	cmps	result1, #1 wc
1d47c     00 B0 26 36 |  if_ae	not	local06, #0
1d480     E7 B0 62 FC | 	wrlong	local06, fp
1d484     04 00 90 FD | 	jmp	#LR__2473
1d488                 | LR__2472
1d488     E7 00 68 FC | 	wrlong	#0, fp
1d48c                 | LR__2473
1d48c     08 CE 05 F1 | 	add	fp, #8
1d490     E7 38 68 FC | 	wrlong	#28, fp
1d494     08 CE 85 F1 | 	sub	fp, #8
1d498                 | ' t1.result.uresult=0
1d498                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d498     E7 B0 0A FB | 	rdlong	local06, fp wz
1d49c     E7 02 68 5C |  if_ne	wrlong	#1, fp
1d4a0     E7 92 02 F6 | 	mov	arg01, fp
1d4a4     90 02 BF FD | 	call	#_push
1d4a8     E7 F0 03 F6 | 	mov	ptra, fp
1d4ac     F2 00 A0 FD | 	call	#popregs_
1d4b0                 | _do_gt_ret
1d4b0     2D 00 64 FD | 	ret
1d4b4                 | 
1d4b4                 | ' 
1d4b4                 | ' '--------------------------------- less or equal (<=)
1d4b4                 | ' 
1d4b4                 | ' sub do_le
1d4b4                 | _do_le
1d4b4     07 CA 05 F6 | 	mov	COUNT_, #7
1d4b8     E8 00 A0 FD | 	call	#pushregs_
1d4bc     18 F0 07 F1 | 	add	ptra, #24
1d4c0     E4 01 BF FD | 	call	#_pop
1d4c4     3D A7 02 F6 | 	mov	local01, result1
1d4c8     3E AD 02 F6 | 	mov	local04, result2
1d4cc     3F AF 02 F6 | 	mov	local05, result3
1d4d0     56 A9 02 F6 | 	mov	local02, local04
1d4d4     57 AB 02 F6 | 	mov	local03, local05
1d4d8     CC 01 BF FD | 	call	#_pop
1d4dc     3F AF 02 F6 | 	mov	local05, result3
1d4e0     E7 7A 62 FC | 	wrlong	result1, fp
1d4e4     04 CE 05 F1 | 	add	fp, #4
1d4e8     E7 7C 62 FC | 	wrlong	result2, fp
1d4ec     04 CE 05 F1 | 	add	fp, #4
1d4f0     E7 AE 62 FC | 	wrlong	local05, fp
1d4f4                 | ' 
1d4f4                 | ' t2=pop()
1d4f4                 | ' t1=pop()
1d4f4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1d4f4     08 CE 85 F1 | 	sub	fp, #8
1d4f8     1F AE 0E F2 | 	cmp	local05, #31 wz
1d4fc     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d500     20 00 90 5D |  if_ne	jmp	#LR__2480
1d504     00 B0 06 F6 | 	mov	local06, #0
1d508     E7 92 02 FB | 	rdlong	arg01, fp
1d50c     53 95 02 F6 | 	mov	arg02, local01
1d510     F0 74 B0 FD | 	call	#__system___string_cmp
1d514     01 7A 56 F2 | 	cmps	result1, #1 wc
1d518     00 B0 26 C6 |  if_b	not	local06, #0
1d51c     E7 B0 62 FC | 	wrlong	local06, fp
1d520     04 03 90 FD | 	jmp	#LR__2493
1d524                 | LR__2480
1d524                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1d524     08 CE 05 F1 | 	add	fp, #8
1d528     E7 B0 02 FB | 	rdlong	local06, fp
1d52c     08 CE 85 F1 | 	sub	fp, #8
1d530     1E B0 0E F2 | 	cmp	local06, #30 wz
1d534     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d538     24 00 90 5D |  if_ne	jmp	#LR__2481
1d53c     00 B0 06 F6 | 	mov	local06, #0
1d540     E7 92 02 FB | 	rdlong	arg01, fp
1d544     53 95 02 F6 | 	mov	arg02, local01
1d548     01 96 06 F6 | 	mov	arg03, #1
1d54c     90 9F B0 FD | 	call	#__system___float_cmp
1d550     01 7A 56 F2 | 	cmps	result1, #1 wc
1d554     00 B0 26 C6 |  if_b	not	local06, #0
1d558     E7 B0 62 FC | 	wrlong	local06, fp
1d55c     C8 02 90 FD | 	jmp	#LR__2493
1d560                 | LR__2481
1d560                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1d560     08 CE 05 F1 | 	add	fp, #8
1d564     E7 B0 02 FB | 	rdlong	local06, fp
1d568     08 CE 85 F1 | 	sub	fp, #8
1d56c     1E B0 0E F2 | 	cmp	local06, #30 wz
1d570     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d574     3C 00 90 5D |  if_ne	jmp	#LR__2482
1d578     00 B0 06 F6 | 	mov	local06, #0
1d57c     E7 AC 02 FB | 	rdlong	local04, fp
1d580     53 93 52 F6 | 	abs	arg01, local01 wc
1d584     1F B2 C6 C9 |  if_b	decod	local07, #31
1d588     00 B2 06 36 |  if_ae	mov	local07, #0
1d58c     18 97 B0 FD | 	call	#__system___float_fromuns
1d590     59 7B 62 F5 | 	xor	result1, local07
1d594     3D 95 02 F6 | 	mov	arg02, result1
1d598     56 93 02 F6 | 	mov	arg01, local04
1d59c     01 96 06 F6 | 	mov	arg03, #1
1d5a0     3C 9F B0 FD | 	call	#__system___float_cmp
1d5a4     01 7A 56 F2 | 	cmps	result1, #1 wc
1d5a8     00 B0 26 C6 |  if_b	not	local06, #0
1d5ac     E7 B0 62 FC | 	wrlong	local06, fp
1d5b0     74 02 90 FD | 	jmp	#LR__2493
1d5b4                 | LR__2482
1d5b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1d5b4     08 CE 05 F1 | 	add	fp, #8
1d5b8     E7 B0 02 FB | 	rdlong	local06, fp
1d5bc     08 CE 85 F1 | 	sub	fp, #8
1d5c0     1E B0 0E F2 | 	cmp	local06, #30 wz
1d5c4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d5c8     30 00 90 5D |  if_ne	jmp	#LR__2483
1d5cc     00 B0 06 F6 | 	mov	local06, #0
1d5d0     E7 AC 02 FB | 	rdlong	local04, fp
1d5d4     53 93 02 F6 | 	mov	arg01, local01
1d5d8     CC 96 B0 FD | 	call	#__system___float_fromuns
1d5dc     3D 95 02 F6 | 	mov	arg02, result1
1d5e0     56 93 02 F6 | 	mov	arg01, local04
1d5e4     01 96 06 F6 | 	mov	arg03, #1
1d5e8     F4 9E B0 FD | 	call	#__system___float_cmp
1d5ec     01 7A 56 F2 | 	cmps	result1, #1 wc
1d5f0     00 B0 26 C6 |  if_b	not	local06, #0
1d5f4     E7 B0 62 FC | 	wrlong	local06, fp
1d5f8     2C 02 90 FD | 	jmp	#LR__2493
1d5fc                 | LR__2483
1d5fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1d5fc     08 CE 05 F1 | 	add	fp, #8
1d600     E7 B0 02 FB | 	rdlong	local06, fp
1d604     08 CE 85 F1 | 	sub	fp, #8
1d608     1C B0 0E F2 | 	cmp	local06, #28 wz
1d60c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d610     3C 00 90 5D |  if_ne	jmp	#LR__2484
1d614     00 B0 06 F6 | 	mov	local06, #0
1d618     E7 92 02 FB | 	rdlong	arg01, fp
1d61c     49 93 52 F6 | 	abs	arg01, arg01 wc
1d620     1F B2 C6 C9 |  if_b	decod	local07, #31
1d624     00 B2 06 36 |  if_ae	mov	local07, #0
1d628     7C 96 B0 FD | 	call	#__system___float_fromuns
1d62c     59 7B 62 F5 | 	xor	result1, local07
1d630     3D 93 02 F6 | 	mov	arg01, result1
1d634     53 95 02 F6 | 	mov	arg02, local01
1d638     01 96 06 F6 | 	mov	arg03, #1
1d63c     A0 9E B0 FD | 	call	#__system___float_cmp
1d640     01 7A 56 F2 | 	cmps	result1, #1 wc
1d644     00 B0 26 C6 |  if_b	not	local06, #0
1d648     E7 B0 62 FC | 	wrlong	local06, fp
1d64c     D8 01 90 FD | 	jmp	#LR__2493
1d650                 | LR__2484
1d650                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1d650     08 CE 05 F1 | 	add	fp, #8
1d654     E7 B0 02 FB | 	rdlong	local06, fp
1d658     08 CE 85 F1 | 	sub	fp, #8
1d65c     1C B0 0E F2 | 	cmp	local06, #28 wz
1d660     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d664     18 00 90 5D |  if_ne	jmp	#LR__2485
1d668     00 B0 06 F6 | 	mov	local06, #0
1d66c     E7 AC 02 FB | 	rdlong	local04, fp
1d670     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d674     01 B0 66 E6 |  if_be	neg	local06, #1
1d678     E7 B0 62 FC | 	wrlong	local06, fp
1d67c     A8 01 90 FD | 	jmp	#LR__2493
1d680                 | LR__2485
1d680                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1d680     08 CE 05 F1 | 	add	fp, #8
1d684     E7 B0 02 FB | 	rdlong	local06, fp
1d688     08 CE 85 F1 | 	sub	fp, #8
1d68c     1C B0 0E F2 | 	cmp	local06, #28 wz
1d690     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d694     18 00 90 5D |  if_ne	jmp	#LR__2486
1d698     00 B0 06 F6 | 	mov	local06, #0
1d69c     E7 AC 02 FB | 	rdlong	local04, fp
1d6a0     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d6a4     01 B0 66 E6 |  if_be	neg	local06, #1
1d6a8     E7 B0 62 FC | 	wrlong	local06, fp
1d6ac     78 01 90 FD | 	jmp	#LR__2493
1d6b0                 | LR__2486
1d6b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1d6b0     08 CE 05 F1 | 	add	fp, #8
1d6b4     E7 B0 02 FB | 	rdlong	local06, fp
1d6b8     08 CE 85 F1 | 	sub	fp, #8
1d6bc     1D B0 0E F2 | 	cmp	local06, #29 wz
1d6c0     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d6c4     2C 00 90 5D |  if_ne	jmp	#LR__2487
1d6c8     00 B0 06 F6 | 	mov	local06, #0
1d6cc     E7 92 02 FB | 	rdlong	arg01, fp
1d6d0     D4 95 B0 FD | 	call	#__system___float_fromuns
1d6d4     3D 93 02 F6 | 	mov	arg01, result1
1d6d8     53 95 02 F6 | 	mov	arg02, local01
1d6dc     01 96 06 F6 | 	mov	arg03, #1
1d6e0     FC 9D B0 FD | 	call	#__system___float_cmp
1d6e4     01 7A 56 F2 | 	cmps	result1, #1 wc
1d6e8     00 B0 26 C6 |  if_b	not	local06, #0
1d6ec     E7 B0 62 FC | 	wrlong	local06, fp
1d6f0     34 01 90 FD | 	jmp	#LR__2493
1d6f4                 | LR__2487
1d6f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1d6f4     08 CE 05 F1 | 	add	fp, #8
1d6f8     E7 B0 02 FB | 	rdlong	local06, fp
1d6fc     08 CE 85 F1 | 	sub	fp, #8
1d700     1D B0 0E F2 | 	cmp	local06, #29 wz
1d704     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d708     18 00 90 5D |  if_ne	jmp	#LR__2488
1d70c     00 B0 06 F6 | 	mov	local06, #0
1d710     E7 AC 02 FB | 	rdlong	local04, fp
1d714     53 AD 5A F2 | 	cmps	local04, local01 wcz
1d718     01 B0 66 E6 |  if_be	neg	local06, #1
1d71c     E7 B0 62 FC | 	wrlong	local06, fp
1d720     04 01 90 FD | 	jmp	#LR__2493
1d724                 | LR__2488
1d724                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1d724     08 CE 05 F1 | 	add	fp, #8
1d728     E7 B0 02 FB | 	rdlong	local06, fp
1d72c     08 CE 85 F1 | 	sub	fp, #8
1d730     1D B0 0E F2 | 	cmp	local06, #29 wz
1d734     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d738     18 00 90 5D |  if_ne	jmp	#LR__2489
1d73c     00 B0 06 F6 | 	mov	local06, #0
1d740     E7 AC 02 FB | 	rdlong	local04, fp
1d744     53 AD 1A F2 | 	cmp	local04, local01 wcz
1d748     01 B0 66 E6 |  if_be	neg	local06, #1
1d74c     E7 B0 62 FC | 	wrlong	local06, fp
1d750     D4 00 90 FD | 	jmp	#LR__2493
1d754                 | LR__2489
1d754                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1d754     08 CE 05 F1 | 	add	fp, #8
1d758     E7 B0 02 FB | 	rdlong	local06, fp
1d75c     08 CE 85 F1 | 	sub	fp, #8
1d760     2B B0 0E F2 | 	cmp	local06, #43 wz
1d764     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d768     28 00 90 5D |  if_ne	jmp	#LR__2490
1d76c     00 B0 06 F6 | 	mov	local06, #0
1d770     E7 92 02 FB | 	rdlong	arg01, fp
1d774     A0 00 BF FD | 	call	#_convertstring
1d778     3D 93 02 F6 | 	mov	arg01, result1
1d77c     53 95 02 F6 | 	mov	arg02, local01
1d780     80 72 B0 FD | 	call	#__system___string_cmp
1d784     01 7A 56 F2 | 	cmps	result1, #1 wc
1d788     00 B0 26 C6 |  if_b	not	local06, #0
1d78c     E7 B0 62 FC | 	wrlong	local06, fp
1d790     94 00 90 FD | 	jmp	#LR__2493
1d794                 | LR__2490
1d794                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1d794     08 CE 05 F1 | 	add	fp, #8
1d798     E7 B0 02 FB | 	rdlong	local06, fp
1d79c     08 CE 85 F1 | 	sub	fp, #8
1d7a0     1F B0 0E F2 | 	cmp	local06, #31 wz
1d7a4     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d7a8     2C 00 90 5D |  if_ne	jmp	#LR__2491
1d7ac     00 B0 06 F6 | 	mov	local06, #0
1d7b0     E7 AC 02 FB | 	rdlong	local04, fp
1d7b4     53 93 02 F6 | 	mov	arg01, local01
1d7b8     5C 00 BF FD | 	call	#_convertstring
1d7bc     3D 95 02 F6 | 	mov	arg02, result1
1d7c0     56 93 02 F6 | 	mov	arg01, local04
1d7c4     3C 72 B0 FD | 	call	#__system___string_cmp
1d7c8     01 7A 56 F2 | 	cmps	result1, #1 wc
1d7cc     00 B0 26 C6 |  if_b	not	local06, #0
1d7d0     E7 B0 62 FC | 	wrlong	local06, fp
1d7d4     50 00 90 FD | 	jmp	#LR__2493
1d7d8                 | LR__2491
1d7d8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1d7d8     08 CE 05 F1 | 	add	fp, #8
1d7dc     E7 B0 02 FB | 	rdlong	local06, fp
1d7e0     08 CE 85 F1 | 	sub	fp, #8
1d7e4     2B B0 0E F2 | 	cmp	local06, #43 wz
1d7e8     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1d7ec     34 00 90 5D |  if_ne	jmp	#LR__2492
1d7f0     00 B0 06 F6 | 	mov	local06, #0
1d7f4     E7 92 02 FB | 	rdlong	arg01, fp
1d7f8     1C 00 BF FD | 	call	#_convertstring
1d7fc     3D AD 02 F6 | 	mov	local04, result1
1d800     53 93 02 F6 | 	mov	arg01, local01
1d804     10 00 BF FD | 	call	#_convertstring
1d808     3D 95 02 F6 | 	mov	arg02, result1
1d80c     56 93 02 F6 | 	mov	arg01, local04
1d810     F0 71 B0 FD | 	call	#__system___string_cmp
1d814     01 7A 56 F2 | 	cmps	result1, #1 wc
1d818     00 B0 26 C6 |  if_b	not	local06, #0
1d81c     E7 B0 62 FC | 	wrlong	local06, fp
1d820     04 00 90 FD | 	jmp	#LR__2493
1d824                 | LR__2492
1d824     E7 00 68 FC | 	wrlong	#0, fp
1d828                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d828                 | LR__2493
1d828     08 CE 05 F1 | 	add	fp, #8
1d82c     E7 38 68 FC | 	wrlong	#28, fp
1d830     08 CE 85 F1 | 	sub	fp, #8
1d834     E7 92 02 F6 | 	mov	arg01, fp
1d838     FC FE BE FD | 	call	#_push
1d83c     E7 F0 03 F6 | 	mov	ptra, fp
1d840     F2 00 A0 FD | 	call	#popregs_
1d844                 | _do_le_ret
1d844     2D 00 64 FD | 	ret
1d848                 | 
1d848                 | ' 
1d848                 | ' '--------------------------------- less than (<)
1d848                 | ' 
1d848                 | ' sub do_lt
1d848                 | _do_lt
1d848     07 CA 05 F6 | 	mov	COUNT_, #7
1d84c     E8 00 A0 FD | 	call	#pushregs_
1d850     18 F0 07 F1 | 	add	ptra, #24
1d854     50 FE BE FD | 	call	#_pop
1d858     3D A7 02 F6 | 	mov	local01, result1
1d85c     3E AD 02 F6 | 	mov	local04, result2
1d860     3F AF 02 F6 | 	mov	local05, result3
1d864     56 A9 02 F6 | 	mov	local02, local04
1d868     57 AB 02 F6 | 	mov	local03, local05
1d86c     38 FE BE FD | 	call	#_pop
1d870     3F AF 02 F6 | 	mov	local05, result3
1d874     E7 7A 62 FC | 	wrlong	result1, fp
1d878     04 CE 05 F1 | 	add	fp, #4
1d87c     E7 7C 62 FC | 	wrlong	result2, fp
1d880     04 CE 05 F1 | 	add	fp, #4
1d884     E7 AE 62 FC | 	wrlong	local05, fp
1d888                 | ' 
1d888                 | ' t2=pop()
1d888                 | ' t1=pop()
1d888                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1d888     08 CE 85 F1 | 	sub	fp, #8
1d88c     1F AE 0E F2 | 	cmp	local05, #31 wz
1d890     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1d894     20 00 90 5D |  if_ne	jmp	#LR__2500
1d898     00 B0 06 F6 | 	mov	local06, #0
1d89c     E7 92 02 FB | 	rdlong	arg01, fp
1d8a0     53 95 02 F6 | 	mov	arg02, local01
1d8a4     5C 71 B0 FD | 	call	#__system___string_cmp
1d8a8     00 7A 56 F2 | 	cmps	result1, #0 wc
1d8ac     00 B0 26 C6 |  if_b	not	local06, #0
1d8b0     E7 B0 62 FC | 	wrlong	local06, fp
1d8b4     E4 02 90 FD | 	jmp	#LR__2509
1d8b8                 | LR__2500
1d8b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1d8b8     08 CE 05 F1 | 	add	fp, #8
1d8bc     E7 B0 02 FB | 	rdlong	local06, fp
1d8c0     08 CE 85 F1 | 	sub	fp, #8
1d8c4     1E B0 0E F2 | 	cmp	local06, #30 wz
1d8c8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d8cc     24 00 90 5D |  if_ne	jmp	#LR__2501
1d8d0     00 B0 06 F6 | 	mov	local06, #0
1d8d4     E7 92 02 FB | 	rdlong	arg01, fp
1d8d8     53 95 02 F6 | 	mov	arg02, local01
1d8dc     01 96 06 F6 | 	mov	arg03, #1
1d8e0     FC 9B B0 FD | 	call	#__system___float_cmp
1d8e4     00 7A 56 F2 | 	cmps	result1, #0 wc
1d8e8     00 B0 26 C6 |  if_b	not	local06, #0
1d8ec     E7 B0 62 FC | 	wrlong	local06, fp
1d8f0     A8 02 90 FD | 	jmp	#LR__2509
1d8f4                 | LR__2501
1d8f4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1d8f4     08 CE 05 F1 | 	add	fp, #8
1d8f8     E7 B0 02 FB | 	rdlong	local06, fp
1d8fc     08 CE 85 F1 | 	sub	fp, #8
1d900     1E B0 0E F2 | 	cmp	local06, #30 wz
1d904     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d908     3C 00 90 5D |  if_ne	jmp	#LR__2502
1d90c     00 B0 06 F6 | 	mov	local06, #0
1d910     E7 AC 02 FB | 	rdlong	local04, fp
1d914     53 93 52 F6 | 	abs	arg01, local01 wc
1d918     1F B2 C6 C9 |  if_b	decod	local07, #31
1d91c     00 B2 06 36 |  if_ae	mov	local07, #0
1d920     84 93 B0 FD | 	call	#__system___float_fromuns
1d924     59 7B 62 F5 | 	xor	result1, local07
1d928     3D 95 02 F6 | 	mov	arg02, result1
1d92c     56 93 02 F6 | 	mov	arg01, local04
1d930     01 96 06 F6 | 	mov	arg03, #1
1d934     A8 9B B0 FD | 	call	#__system___float_cmp
1d938     00 7A 56 F2 | 	cmps	result1, #0 wc
1d93c     00 B0 26 C6 |  if_b	not	local06, #0
1d940     E7 B0 62 FC | 	wrlong	local06, fp
1d944     54 02 90 FD | 	jmp	#LR__2509
1d948                 | LR__2502
1d948                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1d948     08 CE 05 F1 | 	add	fp, #8
1d94c     E7 B0 02 FB | 	rdlong	local06, fp
1d950     08 CE 85 F1 | 	sub	fp, #8
1d954     1E B0 0E F2 | 	cmp	local06, #30 wz
1d958     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1d95c     30 00 90 5D |  if_ne	jmp	#LR__2503
1d960     00 B0 06 F6 | 	mov	local06, #0
1d964     E7 AC 02 FB | 	rdlong	local04, fp
1d968     53 93 02 F6 | 	mov	arg01, local01
1d96c     38 93 B0 FD | 	call	#__system___float_fromuns
1d970     3D 95 02 F6 | 	mov	arg02, result1
1d974     56 93 02 F6 | 	mov	arg01, local04
1d978     01 96 06 F6 | 	mov	arg03, #1
1d97c     60 9B B0 FD | 	call	#__system___float_cmp
1d980     00 7A 56 F2 | 	cmps	result1, #0 wc
1d984     00 B0 26 C6 |  if_b	not	local06, #0
1d988     E7 B0 62 FC | 	wrlong	local06, fp
1d98c     0C 02 90 FD | 	jmp	#LR__2509
1d990                 | LR__2503
1d990                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1d990     08 CE 05 F1 | 	add	fp, #8
1d994     E7 B0 02 FB | 	rdlong	local06, fp
1d998     08 CE 85 F1 | 	sub	fp, #8
1d99c     1C B0 0E F2 | 	cmp	local06, #28 wz
1d9a0     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1d9a4     3C 00 90 5D |  if_ne	jmp	#LR__2504
1d9a8     00 B0 06 F6 | 	mov	local06, #0
1d9ac     E7 92 02 FB | 	rdlong	arg01, fp
1d9b0     49 93 52 F6 | 	abs	arg01, arg01 wc
1d9b4     1F B2 C6 C9 |  if_b	decod	local07, #31
1d9b8     00 B2 06 36 |  if_ae	mov	local07, #0
1d9bc     E8 92 B0 FD | 	call	#__system___float_fromuns
1d9c0     59 7B 62 F5 | 	xor	result1, local07
1d9c4     3D 93 02 F6 | 	mov	arg01, result1
1d9c8     53 95 02 F6 | 	mov	arg02, local01
1d9cc     01 96 06 F6 | 	mov	arg03, #1
1d9d0     0C 9B B0 FD | 	call	#__system___float_cmp
1d9d4     00 7A 56 F2 | 	cmps	result1, #0 wc
1d9d8     00 B0 26 C6 |  if_b	not	local06, #0
1d9dc     E7 B0 62 FC | 	wrlong	local06, fp
1d9e0     B8 01 90 FD | 	jmp	#LR__2509
1d9e4                 | LR__2504
1d9e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1d9e4     08 CE 05 F1 | 	add	fp, #8
1d9e8     E7 B0 02 FB | 	rdlong	local06, fp
1d9ec     08 CE 85 F1 | 	sub	fp, #8
1d9f0     1C B0 0E F2 | 	cmp	local06, #28 wz
1d9f4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1d9f8     E7 AC 02 AB |  if_e	rdlong	local04, fp
1d9fc     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1da00     58 B1 A2 A1 |  if_e	subx	local06, local06
1da04     E7 B0 62 AC |  if_e	wrlong	local06, fp
1da08     90 01 90 AD |  if_e	jmp	#LR__2509
1da0c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1da0c     08 CE 05 F1 | 	add	fp, #8
1da10     E7 B0 02 FB | 	rdlong	local06, fp
1da14     08 CE 85 F1 | 	sub	fp, #8
1da18     1C B0 0E F2 | 	cmp	local06, #28 wz
1da1c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1da20     E7 AC 02 AB |  if_e	rdlong	local04, fp
1da24     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1da28     58 B1 A2 A1 |  if_e	subx	local06, local06
1da2c     E7 B0 62 AC |  if_e	wrlong	local06, fp
1da30     68 01 90 AD |  if_e	jmp	#LR__2509
1da34                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1da34     08 CE 05 F1 | 	add	fp, #8
1da38     E7 B0 02 FB | 	rdlong	local06, fp
1da3c     08 CE 85 F1 | 	sub	fp, #8
1da40     1D B0 0E F2 | 	cmp	local06, #29 wz
1da44     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1da48     2C 00 90 5D |  if_ne	jmp	#LR__2505
1da4c     00 B0 06 F6 | 	mov	local06, #0
1da50     E7 92 02 FB | 	rdlong	arg01, fp
1da54     50 92 B0 FD | 	call	#__system___float_fromuns
1da58     3D 93 02 F6 | 	mov	arg01, result1
1da5c     53 95 02 F6 | 	mov	arg02, local01
1da60     01 96 06 F6 | 	mov	arg03, #1
1da64     78 9A B0 FD | 	call	#__system___float_cmp
1da68     00 7A 56 F2 | 	cmps	result1, #0 wc
1da6c     00 B0 26 C6 |  if_b	not	local06, #0
1da70     E7 B0 62 FC | 	wrlong	local06, fp
1da74     24 01 90 FD | 	jmp	#LR__2509
1da78                 | LR__2505
1da78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1da78     08 CE 05 F1 | 	add	fp, #8
1da7c     E7 B0 02 FB | 	rdlong	local06, fp
1da80     08 CE 85 F1 | 	sub	fp, #8
1da84     1D B0 0E F2 | 	cmp	local06, #29 wz
1da88     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1da8c     E7 AC 02 AB |  if_e	rdlong	local04, fp
1da90     53 AD 52 A2 |  if_e	cmps	local04, local01 wc
1da94     58 B1 A2 A1 |  if_e	subx	local06, local06
1da98     E7 B0 62 AC |  if_e	wrlong	local06, fp
1da9c     FC 00 90 AD |  if_e	jmp	#LR__2509
1daa0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1daa0     08 CE 05 F1 | 	add	fp, #8
1daa4     E7 B0 02 FB | 	rdlong	local06, fp
1daa8     08 CE 85 F1 | 	sub	fp, #8
1daac     1D B0 0E F2 | 	cmp	local06, #29 wz
1dab0     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dab4     E7 AC 02 AB |  if_e	rdlong	local04, fp
1dab8     53 AD 12 A2 |  if_e	cmp	local04, local01 wc
1dabc     58 B1 A2 A1 |  if_e	subx	local06, local06
1dac0     E7 B0 62 AC |  if_e	wrlong	local06, fp
1dac4     D4 00 90 AD |  if_e	jmp	#LR__2509
1dac8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1dac8     08 CE 05 F1 | 	add	fp, #8
1dacc     E7 B0 02 FB | 	rdlong	local06, fp
1dad0     08 CE 85 F1 | 	sub	fp, #8
1dad4     2B B0 0E F2 | 	cmp	local06, #43 wz
1dad8     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1dadc     28 00 90 5D |  if_ne	jmp	#LR__2506
1dae0     00 B0 06 F6 | 	mov	local06, #0
1dae4     E7 92 02 FB | 	rdlong	arg01, fp
1dae8     2C FD BE FD | 	call	#_convertstring
1daec     3D 93 02 F6 | 	mov	arg01, result1
1daf0     53 95 02 F6 | 	mov	arg02, local01
1daf4     0C 6F B0 FD | 	call	#__system___string_cmp
1daf8     00 7A 56 F2 | 	cmps	result1, #0 wc
1dafc     00 B0 26 C6 |  if_b	not	local06, #0
1db00     E7 B0 62 FC | 	wrlong	local06, fp
1db04     94 00 90 FD | 	jmp	#LR__2509
1db08                 | LR__2506
1db08                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1db08     08 CE 05 F1 | 	add	fp, #8
1db0c     E7 B0 02 FB | 	rdlong	local06, fp
1db10     08 CE 85 F1 | 	sub	fp, #8
1db14     1F B0 0E F2 | 	cmp	local06, #31 wz
1db18     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1db1c     2C 00 90 5D |  if_ne	jmp	#LR__2507
1db20     00 B0 06 F6 | 	mov	local06, #0
1db24     E7 AC 02 FB | 	rdlong	local04, fp
1db28     53 93 02 F6 | 	mov	arg01, local01
1db2c     E8 FC BE FD | 	call	#_convertstring
1db30     3D 95 02 F6 | 	mov	arg02, result1
1db34     56 93 02 F6 | 	mov	arg01, local04
1db38     C8 6E B0 FD | 	call	#__system___string_cmp
1db3c     00 7A 56 F2 | 	cmps	result1, #0 wc
1db40     00 B0 26 C6 |  if_b	not	local06, #0
1db44     E7 B0 62 FC | 	wrlong	local06, fp
1db48     50 00 90 FD | 	jmp	#LR__2509
1db4c                 | LR__2507
1db4c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1db4c     08 CE 05 F1 | 	add	fp, #8
1db50     E7 B0 02 FB | 	rdlong	local06, fp
1db54     08 CE 85 F1 | 	sub	fp, #8
1db58     2B B0 0E F2 | 	cmp	local06, #43 wz
1db5c     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1db60     34 00 90 5D |  if_ne	jmp	#LR__2508
1db64     00 B0 06 F6 | 	mov	local06, #0
1db68     E7 92 02 FB | 	rdlong	arg01, fp
1db6c     A8 FC BE FD | 	call	#_convertstring
1db70     3D AD 02 F6 | 	mov	local04, result1
1db74     53 93 02 F6 | 	mov	arg01, local01
1db78     9C FC BE FD | 	call	#_convertstring
1db7c     3D 95 02 F6 | 	mov	arg02, result1
1db80     56 93 02 F6 | 	mov	arg01, local04
1db84     7C 6E B0 FD | 	call	#__system___string_cmp
1db88     00 7A 56 F2 | 	cmps	result1, #0 wc
1db8c     00 B0 26 C6 |  if_b	not	local06, #0
1db90     E7 B0 62 FC | 	wrlong	local06, fp
1db94     04 00 90 FD | 	jmp	#LR__2509
1db98                 | LR__2508
1db98     E7 00 68 FC | 	wrlong	#0, fp
1db9c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1db9c                 | LR__2509
1db9c     08 CE 05 F1 | 	add	fp, #8
1dba0     E7 38 68 FC | 	wrlong	#28, fp
1dba4     08 CE 85 F1 | 	sub	fp, #8
1dba8     E7 92 02 F6 | 	mov	arg01, fp
1dbac     88 FB BE FD | 	call	#_push
1dbb0     E7 F0 03 F6 | 	mov	ptra, fp
1dbb4     F2 00 A0 FD | 	call	#popregs_
1dbb8                 | _do_lt_ret
1dbb8     2D 00 64 FD | 	ret
1dbbc                 | 
1dbbc                 | ' 
1dbbc                 | ' '--------------------------------- minus (-)
1dbbc                 | ' 
1dbbc                 | ' sub do_minus
1dbbc                 | _do_minus
1dbbc     07 CA 05 F6 | 	mov	COUNT_, #7
1dbc0     E8 00 A0 FD | 	call	#pushregs_
1dbc4     18 F0 07 F1 | 	add	ptra, #24
1dbc8     DC FA BE FD | 	call	#_pop
1dbcc     3D A7 02 F6 | 	mov	local01, result1
1dbd0     3E AD 02 F6 | 	mov	local04, result2
1dbd4     3F AF 02 F6 | 	mov	local05, result3
1dbd8     56 A9 02 F6 | 	mov	local02, local04
1dbdc     57 AB 02 F6 | 	mov	local03, local05
1dbe0     C4 FA BE FD | 	call	#_pop
1dbe4     3F AF 02 F6 | 	mov	local05, result3
1dbe8     E7 7A 62 FC | 	wrlong	result1, fp
1dbec     04 CE 05 F1 | 	add	fp, #4
1dbf0     E7 7C 62 FC | 	wrlong	result2, fp
1dbf4     04 CE 05 F1 | 	add	fp, #4
1dbf8     E7 AE 62 FC | 	wrlong	local05, fp
1dbfc                 | ' 
1dbfc                 | ' t2=pop()
1dbfc                 | ' t1=pop()
1dbfc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1dbfc     08 CE 85 F1 | 	sub	fp, #8
1dc00     1D AE 0E F2 | 	cmp	local05, #29 wz
1dc04     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dc08     30 00 90 5D |  if_ne	jmp	#LR__2510
1dc0c                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1dc0c     E7 B0 02 FB | 	rdlong	local06, fp
1dc10     58 A7 12 F2 | 	cmp	local01, local06 wc
1dc14     53 B1 82 C1 |  if_b	sub	local06, local01
1dc18     E7 B0 62 CC |  if_b	wrlong	local06, fp
1dc1c     18 02 90 CD |  if_b	jmp	#LR__2517
1dc20     E7 B0 02 FB | 	rdlong	local06, fp
1dc24     53 B1 82 F1 | 	sub	local06, local01
1dc28     E7 B0 62 FC | 	wrlong	local06, fp
1dc2c     08 CE 05 F1 | 	add	fp, #8
1dc30     E7 38 68 FC | 	wrlong	#28, fp
1dc34     08 CE 85 F1 | 	sub	fp, #8
1dc38     FC 01 90 FD | 	jmp	#LR__2517
1dc3c                 | LR__2510
1dc3c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1dc3c     08 CE 05 F1 | 	add	fp, #8
1dc40     E7 B0 02 FB | 	rdlong	local06, fp
1dc44     08 CE 85 F1 | 	sub	fp, #8
1dc48     1D B0 0E F2 | 	cmp	local06, #29 wz
1dc4c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dc50     1C 00 90 5D |  if_ne	jmp	#LR__2511
1dc54     E7 B0 02 FB | 	rdlong	local06, fp
1dc58     53 B1 82 F1 | 	sub	local06, local01
1dc5c     E7 B0 62 FC | 	wrlong	local06, fp
1dc60     08 CE 05 F1 | 	add	fp, #8
1dc64     E7 38 68 FC | 	wrlong	#28, fp
1dc68     08 CE 85 F1 | 	sub	fp, #8
1dc6c     C8 01 90 FD | 	jmp	#LR__2517
1dc70                 | LR__2511
1dc70                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1dc70     08 CE 05 F1 | 	add	fp, #8
1dc74     E7 B0 02 FB | 	rdlong	local06, fp
1dc78     08 CE 85 F1 | 	sub	fp, #8
1dc7c     1D B0 0E F2 | 	cmp	local06, #29 wz
1dc80     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1dc84     2C 00 90 5D |  if_ne	jmp	#LR__2512
1dc88     E7 92 02 FB | 	rdlong	arg01, fp
1dc8c     18 90 B0 FD | 	call	#__system___float_fromuns
1dc90     3D 93 02 F6 | 	mov	arg01, result1
1dc94     53 95 02 F6 | 	mov	arg02, local01
1dc98     1F 94 E6 F4 | 	bitnot	arg02, #31
1dc9c     3C 90 B0 FD | 	call	#__system___float_add
1dca0     E7 7A 62 FC | 	wrlong	result1, fp
1dca4     08 CE 05 F1 | 	add	fp, #8
1dca8     E7 3C 68 FC | 	wrlong	#30, fp
1dcac     08 CE 85 F1 | 	sub	fp, #8
1dcb0     84 01 90 FD | 	jmp	#LR__2517
1dcb4                 | LR__2512
1dcb4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1dcb4     08 CE 05 F1 | 	add	fp, #8
1dcb8     E7 B0 02 FB | 	rdlong	local06, fp
1dcbc     08 CE 85 F1 | 	sub	fp, #8
1dcc0     1C B0 0E F2 | 	cmp	local06, #28 wz
1dcc4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dcc8     E7 B0 02 AB |  if_e	rdlong	local06, fp
1dccc     53 B1 82 A1 |  if_e	sub	local06, local01
1dcd0     E7 B0 62 AC |  if_e	wrlong	local06, fp
1dcd4     60 01 90 AD |  if_e	jmp	#LR__2517
1dcd8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1dcd8     08 CE 05 F1 | 	add	fp, #8
1dcdc     E7 B0 02 FB | 	rdlong	local06, fp
1dce0     08 CE 85 F1 | 	sub	fp, #8
1dce4     1C B0 0E F2 | 	cmp	local06, #28 wz
1dce8     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dcec     E7 B0 02 AB |  if_e	rdlong	local06, fp
1dcf0     53 B1 82 A1 |  if_e	sub	local06, local01
1dcf4     E7 B0 62 AC |  if_e	wrlong	local06, fp
1dcf8     3C 01 90 AD |  if_e	jmp	#LR__2517
1dcfc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1dcfc     08 CE 05 F1 | 	add	fp, #8
1dd00     E7 B0 02 FB | 	rdlong	local06, fp
1dd04     08 CE 85 F1 | 	sub	fp, #8
1dd08     1C B0 0E F2 | 	cmp	local06, #28 wz
1dd0c     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1dd10     3C 00 90 5D |  if_ne	jmp	#LR__2513
1dd14     E7 92 02 FB | 	rdlong	arg01, fp
1dd18     49 93 52 F6 | 	abs	arg01, arg01 wc
1dd1c     1F B2 C6 C9 |  if_b	decod	local07, #31
1dd20     00 B2 06 36 |  if_ae	mov	local07, #0
1dd24     80 8F B0 FD | 	call	#__system___float_fromuns
1dd28     59 7B 62 F5 | 	xor	result1, local07
1dd2c     3D 93 02 F6 | 	mov	arg01, result1
1dd30     53 95 02 F6 | 	mov	arg02, local01
1dd34     1F 94 E6 F4 | 	bitnot	arg02, #31
1dd38     A0 8F B0 FD | 	call	#__system___float_add
1dd3c     E7 7A 62 FC | 	wrlong	result1, fp
1dd40     08 CE 05 F1 | 	add	fp, #8
1dd44     E7 3C 68 FC | 	wrlong	#30, fp
1dd48     08 CE 85 F1 | 	sub	fp, #8
1dd4c     E8 00 90 FD | 	jmp	#LR__2517
1dd50                 | LR__2513
1dd50                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1dd50     08 CE 05 F1 | 	add	fp, #8
1dd54     E7 B0 02 FB | 	rdlong	local06, fp
1dd58     08 CE 85 F1 | 	sub	fp, #8
1dd5c     1E B0 0E F2 | 	cmp	local06, #30 wz
1dd60     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dd64     24 00 90 5D |  if_ne	jmp	#LR__2514
1dd68     E7 B0 02 FB | 	rdlong	local06, fp
1dd6c     53 93 02 F6 | 	mov	arg01, local01
1dd70     34 8F B0 FD | 	call	#__system___float_fromuns
1dd74     3D 95 02 F6 | 	mov	arg02, result1
1dd78     58 93 02 F6 | 	mov	arg01, local06
1dd7c     1F 94 E6 F4 | 	bitnot	arg02, #31
1dd80     58 8F B0 FD | 	call	#__system___float_add
1dd84     E7 7A 62 FC | 	wrlong	result1, fp
1dd88     AC 00 90 FD | 	jmp	#LR__2517
1dd8c                 | LR__2514
1dd8c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1dd8c     08 CE 05 F1 | 	add	fp, #8
1dd90     E7 B0 02 FB | 	rdlong	local06, fp
1dd94     08 CE 85 F1 | 	sub	fp, #8
1dd98     1E B0 0E F2 | 	cmp	local06, #30 wz
1dd9c     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dda0     30 00 90 5D |  if_ne	jmp	#LR__2515
1dda4     E7 B0 02 FB | 	rdlong	local06, fp
1dda8     53 93 52 F6 | 	abs	arg01, local01 wc
1ddac     1F B2 C6 C9 |  if_b	decod	local07, #31
1ddb0     00 B2 06 36 |  if_ae	mov	local07, #0
1ddb4     F0 8E B0 FD | 	call	#__system___float_fromuns
1ddb8     59 7B 62 F5 | 	xor	result1, local07
1ddbc     3D 95 02 F6 | 	mov	arg02, result1
1ddc0     58 93 02 F6 | 	mov	arg01, local06
1ddc4     1F 94 E6 F4 | 	bitnot	arg02, #31
1ddc8     10 8F B0 FD | 	call	#__system___float_add
1ddcc     E7 7A 62 FC | 	wrlong	result1, fp
1ddd0     64 00 90 FD | 	jmp	#LR__2517
1ddd4                 | LR__2515
1ddd4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1ddd4     08 CE 05 F1 | 	add	fp, #8
1ddd8     E7 B0 02 FB | 	rdlong	local06, fp
1dddc     08 CE 85 F1 | 	sub	fp, #8
1dde0     1E B0 0E F2 | 	cmp	local06, #30 wz
1dde4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1dde8     18 00 90 5D |  if_ne	jmp	#LR__2516
1ddec     E7 92 02 FB | 	rdlong	arg01, fp
1ddf0     53 95 02 F6 | 	mov	arg02, local01
1ddf4     1F 94 E6 F4 | 	bitnot	arg02, #31
1ddf8     E0 8E B0 FD | 	call	#__system___float_add
1ddfc     E7 7A 62 FC | 	wrlong	result1, fp
1de00     34 00 90 FD | 	jmp	#LR__2517
1de04                 | LR__2516
1de04                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1de04     08 CE 05 F1 | 	add	fp, #8
1de08     E7 B0 02 FB | 	rdlong	local06, fp
1de0c     08 CE 85 F1 | 	sub	fp, #8
1de10     1F B0 0E F2 | 	cmp	local06, #31 wz
1de14     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1de18     E7 06 68 AC |  if_e	wrlong	#3, fp
1de1c     08 CE 05 A1 |  if_e	add	fp, #8
1de20     E7 FE 69 AC |  if_e	wrlong	#255, fp
1de24     08 CE 85 A1 |  if_e	sub	fp, #8
1de28     E7 0A 68 5C |  if_ne	wrlong	#5, fp
1de2c     08 CE 05 51 |  if_ne	add	fp, #8
1de30     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1de34     08 CE 85 51 |  if_ne	sub	fp, #8
1de38                 | LR__2517
1de38     E7 92 02 F6 | 	mov	arg01, fp
1de3c     F8 F8 BE FD | 	call	#_push
1de40     E7 F0 03 F6 | 	mov	ptra, fp
1de44     F2 00 A0 FD | 	call	#popregs_
1de48                 | _do_minus_ret
1de48     2D 00 64 FD | 	ret
1de4c                 | 
1de4c                 | ' 
1de4c                 | ' '--------------------------------- negative (-), one argument negative
1de4c                 | ' 
1de4c                 | ' sub do_negative
1de4c                 | _do_negative
1de4c     02 CA 05 F6 | 	mov	COUNT_, #2
1de50     E8 00 A0 FD | 	call	#pushregs_
1de54     0C F0 07 F1 | 	add	ptra, #12
1de58     4C F8 BE FD | 	call	#_pop
1de5c     3F A7 02 F6 | 	mov	local01, result3
1de60     E7 7A 62 FC | 	wrlong	result1, fp
1de64     04 CE 05 F1 | 	add	fp, #4
1de68     E7 7C 62 FC | 	wrlong	result2, fp
1de6c     04 CE 05 F1 | 	add	fp, #4
1de70     E7 A6 62 FC | 	wrlong	local01, fp
1de74                 | ' 
1de74                 | ' t1=pop()
1de74                 | ' if t1.result_type=result_int then 
1de74     08 CE 85 F1 | 	sub	fp, #8
1de78     1C A6 0E F2 | 	cmp	local01, #28 wz
1de7c     E7 A8 02 AB |  if_e	rdlong	local02, fp
1de80     54 A7 62 A6 |  if_e	neg	local01, local02
1de84     E7 A6 62 AC |  if_e	wrlong	local01, fp
1de88     5C 00 90 AD |  if_e	jmp	#LR__2522
1de8c     08 CE 05 F1 | 	add	fp, #8
1de90     E7 A6 02 FB | 	rdlong	local01, fp
1de94     08 CE 85 F1 | 	sub	fp, #8
1de98     1D A6 0E F2 | 	cmp	local01, #29 wz
1de9c     1C 00 90 5D |  if_ne	jmp	#LR__2520
1dea0     E7 A8 02 FB | 	rdlong	local02, fp
1dea4     54 A7 62 F6 | 	neg	local01, local02
1dea8     E7 A6 62 FC | 	wrlong	local01, fp
1deac     08 CE 05 F1 | 	add	fp, #8
1deb0     E7 38 68 FC | 	wrlong	#28, fp
1deb4     08 CE 85 F1 | 	sub	fp, #8
1deb8     2C 00 90 FD | 	jmp	#LR__2521
1debc                 | LR__2520
1debc     08 CE 05 F1 | 	add	fp, #8
1dec0     E7 A6 02 FB | 	rdlong	local01, fp
1dec4     08 CE 85 F1 | 	sub	fp, #8
1dec8     1E A6 0E F2 | 	cmp	local01, #30 wz
1decc     E7 7A 02 AB |  if_e	rdlong	result1, fp
1ded0     1F 7A E6 A4 |  if_e	bitnot	result1, #31
1ded4     E7 7A 62 AC |  if_e	wrlong	result1, fp
1ded8     08 CE 05 51 |  if_ne	add	fp, #8
1dedc     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1dee0     08 CE 85 51 |  if_ne	sub	fp, #8
1dee4     E7 50 68 5C |  if_ne	wrlong	#40, fp
1dee8                 | LR__2521
1dee8                 | LR__2522
1dee8     E7 92 02 F6 | 	mov	arg01, fp
1deec     48 F8 BE FD | 	call	#_push
1def0     E7 F0 03 F6 | 	mov	ptra, fp
1def4     F2 00 A0 FD | 	call	#popregs_
1def8                 | _do_negative_ret
1def8     2D 00 64 FD | 	ret
1defc                 | 
1defc                 | ' 
1defc                 | ' '--------------------------------- MOD (modulo)
1defc                 | ' 
1defc                 | ' sub do_mod 
1defc                 | _do_mod
1defc     04 CA 05 F6 | 	mov	COUNT_, #4
1df00     E8 00 A0 FD | 	call	#pushregs_
1df04     18 F0 07 F1 | 	add	ptra, #24
1df08     9C F7 BE FD | 	call	#_pop
1df0c     3D A7 02 F6 | 	mov	local01, result1
1df10     3E 11 03 F6 | 	mov	muldivb_, result2
1df14     3F 0F 03 F6 | 	mov	muldiva_, result3
1df18     88 A9 02 F6 | 	mov	local02, muldivb_
1df1c     87 AB 02 F6 | 	mov	local03, muldiva_
1df20     84 F7 BE FD | 	call	#_pop
1df24     E7 7A 62 FC | 	wrlong	result1, fp
1df28     04 CE 05 F1 | 	add	fp, #4
1df2c     E7 7C 62 FC | 	wrlong	result2, fp
1df30     04 CE 05 F1 | 	add	fp, #4
1df34     E7 7E 62 FC | 	wrlong	result3, fp
1df38                 | ' 
1df38                 | ' t2=pop()
1df38                 | ' t1=pop()
1df38                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1df38     08 CE 85 F1 | 	sub	fp, #8
1df3c     1F 7E 0E F2 | 	cmp	result3, #31 wz
1df40     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1df44     E7 14 68 AC |  if_e	wrlong	#10, fp
1df48     08 CE 05 A1 |  if_e	add	fp, #8
1df4c     E7 FE 69 AC |  if_e	wrlong	#255, fp
1df50     08 CE 85 A1 |  if_e	sub	fp, #8
1df54     14 01 90 AD |  if_e	jmp	#LR__2535
1df58                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1df58     08 CE 05 F1 | 	add	fp, #8
1df5c     E7 10 03 FB | 	rdlong	muldivb_, fp
1df60     08 CE 85 F1 | 	sub	fp, #8
1df64     1E 10 0F F2 | 	cmp	muldivb_, #30 wz
1df68     1C 00 90 5D |  if_ne	jmp	#LR__2530
1df6c     08 CE 05 F1 | 	add	fp, #8
1df70     E7 38 68 FC | 	wrlong	#28, fp
1df74     08 CE 85 F1 | 	sub	fp, #8
1df78     E7 92 02 FB | 	rdlong	arg01, fp
1df7c     00 94 06 F6 | 	mov	arg02, #0
1df80     F0 95 B0 FD | 	call	#__system___float_tointeger
1df84     E7 7A 62 FC | 	wrlong	result1, fp
1df88                 | LR__2530
1df88                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1df88     1E AA 0E F2 | 	cmp	local03, #30 wz
1df8c     14 00 90 5D |  if_ne	jmp	#LR__2531
1df90     1C AA 06 F6 | 	mov	local03, #28
1df94     53 93 02 F6 | 	mov	arg01, local01
1df98     00 94 06 F6 | 	mov	arg02, #0
1df9c     D4 95 B0 FD | 	call	#__system___float_tointeger
1dfa0     3D A7 02 F6 | 	mov	local01, result1
1dfa4                 | LR__2531
1dfa4     08 CE 05 F1 | 	add	fp, #8
1dfa8     E7 AC 02 FB | 	rdlong	local04, fp
1dfac     08 CE 85 F1 | 	sub	fp, #8
1dfb0     1D AC 0E F2 | 	cmp	local04, #29 wz
1dfb4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1dfb8     E7 AC 02 AB |  if_e	rdlong	local04, fp
1dfbc     53 AD 12 AD |  if_e	qdiv	local04, local01
1dfc0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1dfc0     19 AC 62 AD |  if_e	getqy	local04
1dfc4     E7 AC 62 AC |  if_e	wrlong	local04, fp
1dfc8     A0 00 90 AD |  if_e	jmp	#LR__2535
1dfcc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1dfcc     08 CE 05 F1 | 	add	fp, #8
1dfd0     E7 AC 02 FB | 	rdlong	local04, fp
1dfd4     08 CE 85 F1 | 	sub	fp, #8
1dfd8     1D AC 0E F2 | 	cmp	local04, #29 wz
1dfdc     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1dfe0     20 00 90 5D |  if_ne	jmp	#LR__2532
1dfe4     E7 AC 02 FB | 	rdlong	local04, fp
1dfe8     53 AD 12 FD | 	qdiv	local04, local01
1dfec     19 AC 62 FD | 	getqy	local04
1dff0     E7 AC 62 FC | 	wrlong	local04, fp
1dff4     08 CE 05 F1 | 	add	fp, #8
1dff8     E7 38 68 FC | 	wrlong	#28, fp
1dffc     08 CE 85 F1 | 	sub	fp, #8
1e000     68 00 90 FD | 	jmp	#LR__2535
1e004                 | LR__2532
1e004                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1e004     08 CE 05 F1 | 	add	fp, #8
1e008     E7 AC 02 FB | 	rdlong	local04, fp
1e00c     08 CE 85 F1 | 	sub	fp, #8
1e010     1C AC 0E F2 | 	cmp	local04, #28 wz
1e014     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e018     14 00 90 5D |  if_ne	jmp	#LR__2533
1e01c     E7 0E 03 FB | 	rdlong	muldiva_, fp
1e020     53 11 03 F6 | 	mov	muldivb_, local01
1e024     FA 00 A0 FD | 	call	#divide_
1e028     E7 0E 63 FC | 	wrlong	muldiva_, fp
1e02c     3C 00 90 FD | 	jmp	#LR__2535
1e030                 | LR__2533
1e030                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1e030     08 CE 05 F1 | 	add	fp, #8
1e034     E7 AC 02 FB | 	rdlong	local04, fp
1e038     08 CE 85 F1 | 	sub	fp, #8
1e03c     1C AC 0E F2 | 	cmp	local04, #28 wz
1e040     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e044     14 00 90 5D |  if_ne	jmp	#LR__2534
1e048     E7 0E 03 FB | 	rdlong	muldiva_, fp
1e04c     53 11 03 F6 | 	mov	muldivb_, local01
1e050     FA 00 A0 FD | 	call	#divide_
1e054     E7 0E 63 FC | 	wrlong	muldiva_, fp
1e058     10 00 90 FD | 	jmp	#LR__2535
1e05c                 | LR__2534
1e05c     E7 16 68 FC | 	wrlong	#11, fp
1e060     08 CE 05 F1 | 	add	fp, #8
1e064     E7 FE 69 FC | 	wrlong	#255, fp
1e068     08 CE 85 F1 | 	sub	fp, #8
1e06c                 | LR__2535
1e06c     E7 92 02 F6 | 	mov	arg01, fp
1e070     C4 F6 BE FD | 	call	#_push
1e074     E7 F0 03 F6 | 	mov	ptra, fp
1e078     F2 00 A0 FD | 	call	#popregs_
1e07c                 | _do_mod_ret
1e07c     2D 00 64 FD | 	ret
1e080                 | 
1e080                 | ' 
1e080                 | ' '--------------------------------- mul (*)
1e080                 | ' 
1e080                 | ' sub do_mul
1e080                 | _do_mul
1e080     07 CA 05 F6 | 	mov	COUNT_, #7
1e084     E8 00 A0 FD | 	call	#pushregs_
1e088     18 F0 07 F1 | 	add	ptra, #24
1e08c     18 F6 BE FD | 	call	#_pop
1e090     3D A7 02 F6 | 	mov	local01, result1
1e094     3E AD 02 F6 | 	mov	local04, result2
1e098     3F 95 02 F6 | 	mov	arg02, result3
1e09c     56 A9 02 F6 | 	mov	local02, local04
1e0a0     4A AB 02 F6 | 	mov	local03, arg02
1e0a4     00 F6 BE FD | 	call	#_pop
1e0a8     3F AF 02 F6 | 	mov	local05, result3
1e0ac     E7 7A 62 FC | 	wrlong	result1, fp
1e0b0     04 CE 05 F1 | 	add	fp, #4
1e0b4     E7 7C 62 FC | 	wrlong	result2, fp
1e0b8     04 CE 05 F1 | 	add	fp, #4
1e0bc     E7 AE 62 FC | 	wrlong	local05, fp
1e0c0     08 CE 85 F1 | 	sub	fp, #8
1e0c4     1D AE 0E F2 | 	cmp	local05, #29 wz
1e0c8     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e0cc     E7 AC 02 AB |  if_e	rdlong	local04, fp
1e0d0     53 AD 02 AD |  if_e	qmul	local04, local01
1e0d4                 | ' 
1e0d4                 | ' t2=pop()
1e0d4                 | ' t1=pop()
1e0d4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1e0d4     18 B0 62 AD |  if_e	getqx	local06
1e0d8     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e0dc     F4 01 90 AD |  if_e	jmp	#LR__2546
1e0e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1e0e0     08 CE 05 F1 | 	add	fp, #8
1e0e4     E7 B0 02 FB | 	rdlong	local06, fp
1e0e8     08 CE 85 F1 | 	sub	fp, #8
1e0ec     1D B0 0E F2 | 	cmp	local06, #29 wz
1e0f0     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e0f4     20 00 90 5D |  if_ne	jmp	#LR__2540
1e0f8     E7 AC 02 FB | 	rdlong	local04, fp
1e0fc     53 AD 02 FD | 	qmul	local04, local01
1e100     18 B0 62 FD | 	getqx	local06
1e104     E7 B0 62 FC | 	wrlong	local06, fp
1e108     08 CE 05 F1 | 	add	fp, #8
1e10c     E7 38 68 FC | 	wrlong	#28, fp
1e110     08 CE 85 F1 | 	sub	fp, #8
1e114     BC 01 90 FD | 	jmp	#LR__2546
1e118                 | LR__2540
1e118                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1e118     08 CE 05 F1 | 	add	fp, #8
1e11c     E7 B0 02 FB | 	rdlong	local06, fp
1e120     08 CE 85 F1 | 	sub	fp, #8
1e124     1D B0 0E F2 | 	cmp	local06, #29 wz
1e128     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e12c     28 00 90 5D |  if_ne	jmp	#LR__2541
1e130     E7 92 02 FB | 	rdlong	arg01, fp
1e134     70 8B B0 FD | 	call	#__system___float_fromuns
1e138     3D 93 02 F6 | 	mov	arg01, result1
1e13c     53 95 02 F6 | 	mov	arg02, local01
1e140     68 8F B0 FD | 	call	#__system___float_mul
1e144     E7 7A 62 FC | 	wrlong	result1, fp
1e148     08 CE 05 F1 | 	add	fp, #8
1e14c     E7 3C 68 FC | 	wrlong	#30, fp
1e150     08 CE 85 F1 | 	sub	fp, #8
1e154     7C 01 90 FD | 	jmp	#LR__2546
1e158                 | LR__2541
1e158     08 CE 05 F1 | 	add	fp, #8
1e15c     E7 B0 02 FB | 	rdlong	local06, fp
1e160     08 CE 85 F1 | 	sub	fp, #8
1e164     1C B0 0E F2 | 	cmp	local06, #28 wz
1e168     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e16c     E7 AC 02 AB |  if_e	rdlong	local04, fp
1e170     53 AD 02 AD |  if_e	qmul	local04, local01
1e174                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1e174     18 B0 62 AD |  if_e	getqx	local06
1e178     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e17c     54 01 90 AD |  if_e	jmp	#LR__2546
1e180     08 CE 05 F1 | 	add	fp, #8
1e184     E7 B0 02 FB | 	rdlong	local06, fp
1e188     08 CE 85 F1 | 	sub	fp, #8
1e18c     1C B0 0E F2 | 	cmp	local06, #28 wz
1e190     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e194     E7 AC 02 AB |  if_e	rdlong	local04, fp
1e198     53 AD 02 AD |  if_e	qmul	local04, local01
1e19c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1e19c     18 B0 62 AD |  if_e	getqx	local06
1e1a0     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e1a4     2C 01 90 AD |  if_e	jmp	#LR__2546
1e1a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1e1a8     08 CE 05 F1 | 	add	fp, #8
1e1ac     E7 B0 02 FB | 	rdlong	local06, fp
1e1b0     08 CE 85 F1 | 	sub	fp, #8
1e1b4     1C B0 0E F2 | 	cmp	local06, #28 wz
1e1b8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e1bc     38 00 90 5D |  if_ne	jmp	#LR__2542
1e1c0     E7 92 02 FB | 	rdlong	arg01, fp
1e1c4     49 93 52 F6 | 	abs	arg01, arg01 wc
1e1c8     1F B2 C6 C9 |  if_b	decod	local07, #31
1e1cc     00 B2 06 36 |  if_ae	mov	local07, #0
1e1d0     D4 8A B0 FD | 	call	#__system___float_fromuns
1e1d4     59 7B 62 F5 | 	xor	result1, local07
1e1d8     3D 93 02 F6 | 	mov	arg01, result1
1e1dc     53 95 02 F6 | 	mov	arg02, local01
1e1e0     C8 8E B0 FD | 	call	#__system___float_mul
1e1e4     E7 7A 62 FC | 	wrlong	result1, fp
1e1e8     08 CE 05 F1 | 	add	fp, #8
1e1ec     E7 3C 68 FC | 	wrlong	#30, fp
1e1f0     08 CE 85 F1 | 	sub	fp, #8
1e1f4     DC 00 90 FD | 	jmp	#LR__2546
1e1f8                 | LR__2542
1e1f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1e1f8     08 CE 05 F1 | 	add	fp, #8
1e1fc     E7 B0 02 FB | 	rdlong	local06, fp
1e200     08 CE 85 F1 | 	sub	fp, #8
1e204     1E B0 0E F2 | 	cmp	local06, #30 wz
1e208     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e20c     20 00 90 5D |  if_ne	jmp	#LR__2543
1e210     E7 B0 02 FB | 	rdlong	local06, fp
1e214     53 93 02 F6 | 	mov	arg01, local01
1e218     8C 8A B0 FD | 	call	#__system___float_fromuns
1e21c     3D 95 02 F6 | 	mov	arg02, result1
1e220     58 93 02 F6 | 	mov	arg01, local06
1e224     84 8E B0 FD | 	call	#__system___float_mul
1e228     E7 7A 62 FC | 	wrlong	result1, fp
1e22c     A4 00 90 FD | 	jmp	#LR__2546
1e230                 | LR__2543
1e230                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1e230     08 CE 05 F1 | 	add	fp, #8
1e234     E7 B0 02 FB | 	rdlong	local06, fp
1e238     08 CE 85 F1 | 	sub	fp, #8
1e23c     1E B0 0E F2 | 	cmp	local06, #30 wz
1e240     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e244     2C 00 90 5D |  if_ne	jmp	#LR__2544
1e248     E7 B0 02 FB | 	rdlong	local06, fp
1e24c     53 93 52 F6 | 	abs	arg01, local01 wc
1e250     1F B2 C6 C9 |  if_b	decod	local07, #31
1e254     00 B2 06 36 |  if_ae	mov	local07, #0
1e258     4C 8A B0 FD | 	call	#__system___float_fromuns
1e25c     59 7B 62 F5 | 	xor	result1, local07
1e260     3D 95 02 F6 | 	mov	arg02, result1
1e264     58 93 02 F6 | 	mov	arg01, local06
1e268     40 8E B0 FD | 	call	#__system___float_mul
1e26c     E7 7A 62 FC | 	wrlong	result1, fp
1e270     60 00 90 FD | 	jmp	#LR__2546
1e274                 | LR__2544
1e274                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1e274     08 CE 05 F1 | 	add	fp, #8
1e278     E7 B0 02 FB | 	rdlong	local06, fp
1e27c     08 CE 85 F1 | 	sub	fp, #8
1e280     1E B0 0E F2 | 	cmp	local06, #30 wz
1e284     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e288     14 00 90 5D |  if_ne	jmp	#LR__2545
1e28c     E7 92 02 FB | 	rdlong	arg01, fp
1e290     53 95 02 F6 | 	mov	arg02, local01
1e294     14 8E B0 FD | 	call	#__system___float_mul
1e298     E7 7A 62 FC | 	wrlong	result1, fp
1e29c     34 00 90 FD | 	jmp	#LR__2546
1e2a0                 | LR__2545
1e2a0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1e2a0     08 CE 05 F1 | 	add	fp, #8
1e2a4     E7 B0 02 FB | 	rdlong	local06, fp
1e2a8     08 CE 85 F1 | 	sub	fp, #8
1e2ac     1F B0 0E F2 | 	cmp	local06, #31 wz
1e2b0     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e2b4     E7 10 68 AC |  if_e	wrlong	#8, fp
1e2b8     08 CE 05 A1 |  if_e	add	fp, #8
1e2bc     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e2c0     08 CE 85 A1 |  if_e	sub	fp, #8
1e2c4     E7 12 68 5C |  if_ne	wrlong	#9, fp
1e2c8     08 CE 05 51 |  if_ne	add	fp, #8
1e2cc     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1e2d0     08 CE 85 51 |  if_ne	sub	fp, #8
1e2d4                 | LR__2546
1e2d4     E7 92 02 F6 | 	mov	arg01, fp
1e2d8     5C F4 BE FD | 	call	#_push
1e2dc     E7 F0 03 F6 | 	mov	ptra, fp
1e2e0     F2 00 A0 FD | 	call	#popregs_
1e2e4                 | _do_mul_ret
1e2e4     2D 00 64 FD | 	ret
1e2e8                 | 
1e2e8                 | ' 
1e2e8                 | ' '--------------------------------- not equal (<>)
1e2e8                 | ' 
1e2e8                 | ' sub do_ne
1e2e8                 | _do_ne
1e2e8     07 CA 05 F6 | 	mov	COUNT_, #7
1e2ec     E8 00 A0 FD | 	call	#pushregs_
1e2f0     18 F0 07 F1 | 	add	ptra, #24
1e2f4     B0 F3 BE FD | 	call	#_pop
1e2f8     3D A7 02 F6 | 	mov	local01, result1
1e2fc     3E AD 02 F6 | 	mov	local04, result2
1e300     3F AF 02 F6 | 	mov	local05, result3
1e304     56 A9 02 F6 | 	mov	local02, local04
1e308     57 AB 02 F6 | 	mov	local03, local05
1e30c     98 F3 BE FD | 	call	#_pop
1e310     3F AF 02 F6 | 	mov	local05, result3
1e314     E7 7A 62 FC | 	wrlong	result1, fp
1e318     04 CE 05 F1 | 	add	fp, #4
1e31c     E7 7C 62 FC | 	wrlong	result2, fp
1e320     04 CE 05 F1 | 	add	fp, #4
1e324     E7 AE 62 FC | 	wrlong	local05, fp
1e328                 | ' 
1e328                 | ' t2=pop()
1e328                 | ' t1=pop()
1e328                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1e328     08 CE 85 F1 | 	sub	fp, #8
1e32c     1F AE 0E F2 | 	cmp	local05, #31 wz
1e330     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e334     20 00 90 5D |  if_ne	jmp	#LR__2550
1e338     00 B0 06 F6 | 	mov	local06, #0
1e33c     E7 92 02 FB | 	rdlong	arg01, fp
1e340     53 95 02 F6 | 	mov	arg02, local01
1e344     BC 66 B0 FD | 	call	#__system___string_cmp
1e348     00 7A 0E F2 | 	cmp	result1, #0 wz
1e34c     00 B0 26 56 |  if_ne	not	local06, #0
1e350     E7 B0 62 FC | 	wrlong	local06, fp
1e354     04 03 90 FD | 	jmp	#LR__2563
1e358                 | LR__2550
1e358                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1e358     08 CE 05 F1 | 	add	fp, #8
1e35c     E7 B0 02 FB | 	rdlong	local06, fp
1e360     08 CE 85 F1 | 	sub	fp, #8
1e364     1E B0 0E F2 | 	cmp	local06, #30 wz
1e368     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e36c     24 00 90 5D |  if_ne	jmp	#LR__2551
1e370     00 B0 06 F6 | 	mov	local06, #0
1e374     E7 92 02 FB | 	rdlong	arg01, fp
1e378     53 95 02 F6 | 	mov	arg02, local01
1e37c     01 96 06 F6 | 	mov	arg03, #1
1e380     5C 91 B0 FD | 	call	#__system___float_cmp
1e384     00 7A 0E F2 | 	cmp	result1, #0 wz
1e388     00 B0 26 56 |  if_ne	not	local06, #0
1e38c     E7 B0 62 FC | 	wrlong	local06, fp
1e390     C8 02 90 FD | 	jmp	#LR__2563
1e394                 | LR__2551
1e394                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1e394     08 CE 05 F1 | 	add	fp, #8
1e398     E7 B0 02 FB | 	rdlong	local06, fp
1e39c     08 CE 85 F1 | 	sub	fp, #8
1e3a0     1E B0 0E F2 | 	cmp	local06, #30 wz
1e3a4     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e3a8     3C 00 90 5D |  if_ne	jmp	#LR__2552
1e3ac     00 B0 06 F6 | 	mov	local06, #0
1e3b0     E7 AC 02 FB | 	rdlong	local04, fp
1e3b4     53 93 52 F6 | 	abs	arg01, local01 wc
1e3b8     1F B2 C6 C9 |  if_b	decod	local07, #31
1e3bc     00 B2 06 36 |  if_ae	mov	local07, #0
1e3c0     E4 88 B0 FD | 	call	#__system___float_fromuns
1e3c4     59 7B 62 F5 | 	xor	result1, local07
1e3c8     3D 95 02 F6 | 	mov	arg02, result1
1e3cc     56 93 02 F6 | 	mov	arg01, local04
1e3d0     01 96 06 F6 | 	mov	arg03, #1
1e3d4     08 91 B0 FD | 	call	#__system___float_cmp
1e3d8     00 7A 0E F2 | 	cmp	result1, #0 wz
1e3dc     00 B0 26 56 |  if_ne	not	local06, #0
1e3e0     E7 B0 62 FC | 	wrlong	local06, fp
1e3e4     74 02 90 FD | 	jmp	#LR__2563
1e3e8                 | LR__2552
1e3e8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1e3e8     08 CE 05 F1 | 	add	fp, #8
1e3ec     E7 B0 02 FB | 	rdlong	local06, fp
1e3f0     08 CE 85 F1 | 	sub	fp, #8
1e3f4     1E B0 0E F2 | 	cmp	local06, #30 wz
1e3f8     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e3fc     30 00 90 5D |  if_ne	jmp	#LR__2553
1e400     00 B0 06 F6 | 	mov	local06, #0
1e404     E7 AC 02 FB | 	rdlong	local04, fp
1e408     53 93 02 F6 | 	mov	arg01, local01
1e40c     98 88 B0 FD | 	call	#__system___float_fromuns
1e410     3D 95 02 F6 | 	mov	arg02, result1
1e414     56 93 02 F6 | 	mov	arg01, local04
1e418     01 96 06 F6 | 	mov	arg03, #1
1e41c     C0 90 B0 FD | 	call	#__system___float_cmp
1e420     00 7A 0E F2 | 	cmp	result1, #0 wz
1e424     00 B0 26 56 |  if_ne	not	local06, #0
1e428     E7 B0 62 FC | 	wrlong	local06, fp
1e42c     2C 02 90 FD | 	jmp	#LR__2563
1e430                 | LR__2553
1e430                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1e430     08 CE 05 F1 | 	add	fp, #8
1e434     E7 B0 02 FB | 	rdlong	local06, fp
1e438     08 CE 85 F1 | 	sub	fp, #8
1e43c     1C B0 0E F2 | 	cmp	local06, #28 wz
1e440     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e444     3C 00 90 5D |  if_ne	jmp	#LR__2554
1e448     00 B0 06 F6 | 	mov	local06, #0
1e44c     E7 92 02 FB | 	rdlong	arg01, fp
1e450     49 93 52 F6 | 	abs	arg01, arg01 wc
1e454     1F B2 C6 C9 |  if_b	decod	local07, #31
1e458     00 B2 06 36 |  if_ae	mov	local07, #0
1e45c     48 88 B0 FD | 	call	#__system___float_fromuns
1e460     59 7B 62 F5 | 	xor	result1, local07
1e464     3D 93 02 F6 | 	mov	arg01, result1
1e468     53 95 02 F6 | 	mov	arg02, local01
1e46c     01 96 06 F6 | 	mov	arg03, #1
1e470     6C 90 B0 FD | 	call	#__system___float_cmp
1e474     00 7A 0E F2 | 	cmp	result1, #0 wz
1e478     00 B0 26 56 |  if_ne	not	local06, #0
1e47c     E7 B0 62 FC | 	wrlong	local06, fp
1e480     D8 01 90 FD | 	jmp	#LR__2563
1e484                 | LR__2554
1e484                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1e484     08 CE 05 F1 | 	add	fp, #8
1e488     E7 B0 02 FB | 	rdlong	local06, fp
1e48c     08 CE 85 F1 | 	sub	fp, #8
1e490     1C B0 0E F2 | 	cmp	local06, #28 wz
1e494     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e498     18 00 90 5D |  if_ne	jmp	#LR__2555
1e49c     00 B0 06 F6 | 	mov	local06, #0
1e4a0     E7 AC 02 FB | 	rdlong	local04, fp
1e4a4     53 AD 0A F2 | 	cmp	local04, local01 wz
1e4a8     01 B0 66 56 |  if_ne	neg	local06, #1
1e4ac     E7 B0 62 FC | 	wrlong	local06, fp
1e4b0     A8 01 90 FD | 	jmp	#LR__2563
1e4b4                 | LR__2555
1e4b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1e4b4     08 CE 05 F1 | 	add	fp, #8
1e4b8     E7 B0 02 FB | 	rdlong	local06, fp
1e4bc     08 CE 85 F1 | 	sub	fp, #8
1e4c0     1C B0 0E F2 | 	cmp	local06, #28 wz
1e4c4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e4c8     18 00 90 5D |  if_ne	jmp	#LR__2556
1e4cc     00 B0 06 F6 | 	mov	local06, #0
1e4d0     E7 AC 02 FB | 	rdlong	local04, fp
1e4d4     53 AD 0A F2 | 	cmp	local04, local01 wz
1e4d8     01 B0 66 56 |  if_ne	neg	local06, #1
1e4dc     E7 B0 62 FC | 	wrlong	local06, fp
1e4e0     78 01 90 FD | 	jmp	#LR__2563
1e4e4                 | LR__2556
1e4e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1e4e4     08 CE 05 F1 | 	add	fp, #8
1e4e8     E7 B0 02 FB | 	rdlong	local06, fp
1e4ec     08 CE 85 F1 | 	sub	fp, #8
1e4f0     1D B0 0E F2 | 	cmp	local06, #29 wz
1e4f4     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e4f8     2C 00 90 5D |  if_ne	jmp	#LR__2557
1e4fc     00 B0 06 F6 | 	mov	local06, #0
1e500     E7 92 02 FB | 	rdlong	arg01, fp
1e504     A0 87 B0 FD | 	call	#__system___float_fromuns
1e508     3D 93 02 F6 | 	mov	arg01, result1
1e50c     53 95 02 F6 | 	mov	arg02, local01
1e510     01 96 06 F6 | 	mov	arg03, #1
1e514     C8 8F B0 FD | 	call	#__system___float_cmp
1e518     00 7A 0E F2 | 	cmp	result1, #0 wz
1e51c     00 B0 26 56 |  if_ne	not	local06, #0
1e520     E7 B0 62 FC | 	wrlong	local06, fp
1e524     34 01 90 FD | 	jmp	#LR__2563
1e528                 | LR__2557
1e528                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1e528     08 CE 05 F1 | 	add	fp, #8
1e52c     E7 B0 02 FB | 	rdlong	local06, fp
1e530     08 CE 85 F1 | 	sub	fp, #8
1e534     1D B0 0E F2 | 	cmp	local06, #29 wz
1e538     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e53c     18 00 90 5D |  if_ne	jmp	#LR__2558
1e540     00 B0 06 F6 | 	mov	local06, #0
1e544     E7 AC 02 FB | 	rdlong	local04, fp
1e548     53 AD 0A F2 | 	cmp	local04, local01 wz
1e54c     01 B0 66 56 |  if_ne	neg	local06, #1
1e550     E7 B0 62 FC | 	wrlong	local06, fp
1e554     04 01 90 FD | 	jmp	#LR__2563
1e558                 | LR__2558
1e558                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1e558     08 CE 05 F1 | 	add	fp, #8
1e55c     E7 B0 02 FB | 	rdlong	local06, fp
1e560     08 CE 85 F1 | 	sub	fp, #8
1e564     1D B0 0E F2 | 	cmp	local06, #29 wz
1e568     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e56c     18 00 90 5D |  if_ne	jmp	#LR__2559
1e570     00 B0 06 F6 | 	mov	local06, #0
1e574     E7 AC 02 FB | 	rdlong	local04, fp
1e578     53 AD 0A F2 | 	cmp	local04, local01 wz
1e57c     01 B0 66 56 |  if_ne	neg	local06, #1
1e580     E7 B0 62 FC | 	wrlong	local06, fp
1e584     D4 00 90 FD | 	jmp	#LR__2563
1e588                 | LR__2559
1e588                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1e588     08 CE 05 F1 | 	add	fp, #8
1e58c     E7 B0 02 FB | 	rdlong	local06, fp
1e590     08 CE 85 F1 | 	sub	fp, #8
1e594     2B B0 0E F2 | 	cmp	local06, #43 wz
1e598     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e59c     28 00 90 5D |  if_ne	jmp	#LR__2560
1e5a0     00 B0 06 F6 | 	mov	local06, #0
1e5a4     E7 92 02 FB | 	rdlong	arg01, fp
1e5a8     6C F2 BE FD | 	call	#_convertstring
1e5ac     3D 93 02 F6 | 	mov	arg01, result1
1e5b0     53 95 02 F6 | 	mov	arg02, local01
1e5b4     4C 64 B0 FD | 	call	#__system___string_cmp
1e5b8     00 7A 0E F2 | 	cmp	result1, #0 wz
1e5bc     00 B0 26 56 |  if_ne	not	local06, #0
1e5c0     E7 B0 62 FC | 	wrlong	local06, fp
1e5c4     94 00 90 FD | 	jmp	#LR__2563
1e5c8                 | LR__2560
1e5c8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1e5c8     08 CE 05 F1 | 	add	fp, #8
1e5cc     E7 B0 02 FB | 	rdlong	local06, fp
1e5d0     08 CE 85 F1 | 	sub	fp, #8
1e5d4     1F B0 0E F2 | 	cmp	local06, #31 wz
1e5d8     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e5dc     2C 00 90 5D |  if_ne	jmp	#LR__2561
1e5e0     00 B0 06 F6 | 	mov	local06, #0
1e5e4     E7 AC 02 FB | 	rdlong	local04, fp
1e5e8     53 93 02 F6 | 	mov	arg01, local01
1e5ec     28 F2 BE FD | 	call	#_convertstring
1e5f0     3D 95 02 F6 | 	mov	arg02, result1
1e5f4     56 93 02 F6 | 	mov	arg01, local04
1e5f8     08 64 B0 FD | 	call	#__system___string_cmp
1e5fc     00 7A 0E F2 | 	cmp	result1, #0 wz
1e600     00 B0 26 56 |  if_ne	not	local06, #0
1e604     E7 B0 62 FC | 	wrlong	local06, fp
1e608     50 00 90 FD | 	jmp	#LR__2563
1e60c                 | LR__2561
1e60c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1e60c     08 CE 05 F1 | 	add	fp, #8
1e610     E7 B0 02 FB | 	rdlong	local06, fp
1e614     08 CE 85 F1 | 	sub	fp, #8
1e618     2B B0 0E F2 | 	cmp	local06, #43 wz
1e61c     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1e620     34 00 90 5D |  if_ne	jmp	#LR__2562
1e624     00 B0 06 F6 | 	mov	local06, #0
1e628     E7 92 02 FB | 	rdlong	arg01, fp
1e62c     E8 F1 BE FD | 	call	#_convertstring
1e630     3D AD 02 F6 | 	mov	local04, result1
1e634     53 93 02 F6 | 	mov	arg01, local01
1e638     DC F1 BE FD | 	call	#_convertstring
1e63c     3D 95 02 F6 | 	mov	arg02, result1
1e640     56 93 02 F6 | 	mov	arg01, local04
1e644     BC 63 B0 FD | 	call	#__system___string_cmp
1e648     00 7A 0E F2 | 	cmp	result1, #0 wz
1e64c     00 B0 26 56 |  if_ne	not	local06, #0
1e650     E7 B0 62 FC | 	wrlong	local06, fp
1e654     04 00 90 FD | 	jmp	#LR__2563
1e658                 | LR__2562
1e658     E7 00 68 FC | 	wrlong	#0, fp
1e65c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e65c                 | LR__2563
1e65c     08 CE 05 F1 | 	add	fp, #8
1e660     E7 38 68 FC | 	wrlong	#28, fp
1e664     08 CE 85 F1 | 	sub	fp, #8
1e668     E7 92 02 F6 | 	mov	arg01, fp
1e66c     C8 F0 BE FD | 	call	#_push
1e670     E7 F0 03 F6 | 	mov	ptra, fp
1e674     F2 00 A0 FD | 	call	#popregs_
1e678                 | _do_ne_ret
1e678     2D 00 64 FD | 	ret
1e67c                 | 
1e67c                 | ' 
1e67c                 | ' '--------------------------------- OR
1e67c                 | ' 
1e67c                 | ' sub do_or 
1e67c                 | _do_or
1e67c     05 CA 05 F6 | 	mov	COUNT_, #5
1e680     E8 00 A0 FD | 	call	#pushregs_
1e684     18 F0 07 F1 | 	add	ptra, #24
1e688     1C F0 BE FD | 	call	#_pop
1e68c     3D A7 02 F6 | 	mov	local01, result1
1e690     3E 93 02 F6 | 	mov	arg01, result2
1e694     3F AD 02 F6 | 	mov	local04, result3
1e698     49 A9 02 F6 | 	mov	local02, arg01
1e69c     56 AB 02 F6 | 	mov	local03, local04
1e6a0     04 F0 BE FD | 	call	#_pop
1e6a4     3F AF 02 F6 | 	mov	local05, result3
1e6a8     E7 7A 62 FC | 	wrlong	result1, fp
1e6ac     04 CE 05 F1 | 	add	fp, #4
1e6b0     E7 7C 62 FC | 	wrlong	result2, fp
1e6b4     04 CE 05 F1 | 	add	fp, #4
1e6b8     E7 AE 62 FC | 	wrlong	local05, fp
1e6bc                 | ' 
1e6bc                 | ' t2=pop()
1e6bc                 | ' t1=pop()
1e6bc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1e6bc     08 CE 85 F1 | 	sub	fp, #8
1e6c0     1C AE 0E F2 | 	cmp	local05, #28 wz
1e6c4     E7 AE 02 AB |  if_e	rdlong	local05, fp
1e6c8     E7 AE 62 AC |  if_e	wrlong	local05, fp
1e6cc     08 CE 05 A1 |  if_e	add	fp, #8
1e6d0     E7 3A 68 AC |  if_e	wrlong	#29, fp
1e6d4     08 CE 85 A1 |  if_e	sub	fp, #8
1e6d8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1e6d8     1C AA 0E F2 | 	cmp	local03, #28 wz
1e6dc     1D AA 06 A6 |  if_e	mov	local03, #29
1e6e0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1e6e0     08 CE 05 F1 | 	add	fp, #8
1e6e4     E7 AE 02 FB | 	rdlong	local05, fp
1e6e8     08 CE 85 F1 | 	sub	fp, #8
1e6ec     1F AE 0E F2 | 	cmp	local05, #31 wz
1e6f0     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1e6f4     08 CE 05 51 |  if_ne	add	fp, #8
1e6f8     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1e6fc     08 CE 85 51 |  if_ne	sub	fp, #8
1e700     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1e704     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1e708     E7 0C 68 AC |  if_e	wrlong	#6, fp
1e70c     08 CE 05 A1 |  if_e	add	fp, #8
1e710     E7 FE 69 AC |  if_e	wrlong	#255, fp
1e714     08 CE 85 A1 |  if_e	sub	fp, #8
1e718     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1e71c     53 AF 42 55 |  if_ne	or	local05, local01
1e720     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1e724     E7 92 02 F6 | 	mov	arg01, fp
1e728     0C F0 BE FD | 	call	#_push
1e72c     E7 F0 03 F6 | 	mov	ptra, fp
1e730     F2 00 A0 FD | 	call	#popregs_
1e734                 | _do_or_ret
1e734     2D 00 64 FD | 	ret
1e738                 | 
1e738                 | ' 
1e738                 | ' '--------------------------------- plus (+)
1e738                 | ' 
1e738                 | ' sub do_plus 
1e738                 | _do_plus
1e738     07 CA 05 F6 | 	mov	COUNT_, #7
1e73c     E8 00 A0 FD | 	call	#pushregs_
1e740     18 F0 07 F1 | 	add	ptra, #24
1e744     60 EF BE FD | 	call	#_pop
1e748     3D A7 02 F6 | 	mov	local01, result1
1e74c     3E AD 02 F6 | 	mov	local04, result2
1e750     3F AF 02 F6 | 	mov	local05, result3
1e754     56 A9 02 F6 | 	mov	local02, local04
1e758     57 AB 02 F6 | 	mov	local03, local05
1e75c     48 EF BE FD | 	call	#_pop
1e760     3F AF 02 F6 | 	mov	local05, result3
1e764     E7 7A 62 FC | 	wrlong	result1, fp
1e768     04 CE 05 F1 | 	add	fp, #4
1e76c     E7 7C 62 FC | 	wrlong	result2, fp
1e770     04 CE 05 F1 | 	add	fp, #4
1e774     E7 AE 62 FC | 	wrlong	local05, fp
1e778                 | ' 
1e778                 | ' t2=pop()
1e778                 | ' t1=pop()
1e778                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1e778     57 B1 02 F6 | 	mov	local06, local05
1e77c     08 CE 85 F1 | 	sub	fp, #8
1e780     1D B0 0E F2 | 	cmp	local06, #29 wz
1e784     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e788     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e78c     53 B1 02 A1 |  if_e	add	local06, local01
1e790     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e794     0C 03 90 AD |  if_e	jmp	#LR__2582
1e798                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1e798     08 CE 05 F1 | 	add	fp, #8
1e79c     E7 B0 02 FB | 	rdlong	local06, fp
1e7a0     08 CE 85 F1 | 	sub	fp, #8
1e7a4     1D B0 0E F2 | 	cmp	local06, #29 wz
1e7a8     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e7ac     1C 00 90 5D |  if_ne	jmp	#LR__2570
1e7b0     E7 B0 02 FB | 	rdlong	local06, fp
1e7b4     53 B1 02 F1 | 	add	local06, local01
1e7b8     E7 B0 62 FC | 	wrlong	local06, fp
1e7bc     08 CE 05 F1 | 	add	fp, #8
1e7c0     E7 38 68 FC | 	wrlong	#28, fp
1e7c4     08 CE 85 F1 | 	sub	fp, #8
1e7c8     D8 02 90 FD | 	jmp	#LR__2582
1e7cc                 | LR__2570
1e7cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1e7cc     08 CE 05 F1 | 	add	fp, #8
1e7d0     E7 B0 02 FB | 	rdlong	local06, fp
1e7d4     08 CE 85 F1 | 	sub	fp, #8
1e7d8     1D B0 0E F2 | 	cmp	local06, #29 wz
1e7dc     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e7e0     28 00 90 5D |  if_ne	jmp	#LR__2571
1e7e4     E7 92 02 FB | 	rdlong	arg01, fp
1e7e8     BC 84 B0 FD | 	call	#__system___float_fromuns
1e7ec     3D 93 02 F6 | 	mov	arg01, result1
1e7f0     53 95 02 F6 | 	mov	arg02, local01
1e7f4     E4 84 B0 FD | 	call	#__system___float_add
1e7f8     E7 7A 62 FC | 	wrlong	result1, fp
1e7fc     08 CE 05 F1 | 	add	fp, #8
1e800     E7 3C 68 FC | 	wrlong	#30, fp
1e804     08 CE 85 F1 | 	sub	fp, #8
1e808     98 02 90 FD | 	jmp	#LR__2582
1e80c                 | LR__2571
1e80c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1e80c     08 CE 05 F1 | 	add	fp, #8
1e810     E7 B0 02 FB | 	rdlong	local06, fp
1e814     08 CE 85 F1 | 	sub	fp, #8
1e818     1C B0 0E F2 | 	cmp	local06, #28 wz
1e81c     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e820     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e824     53 B1 02 A1 |  if_e	add	local06, local01
1e828     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e82c     74 02 90 AD |  if_e	jmp	#LR__2582
1e830                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1e830     08 CE 05 F1 | 	add	fp, #8
1e834     E7 B0 02 FB | 	rdlong	local06, fp
1e838     08 CE 85 F1 | 	sub	fp, #8
1e83c     1C B0 0E F2 | 	cmp	local06, #28 wz
1e840     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e844     E7 B0 02 AB |  if_e	rdlong	local06, fp
1e848     53 B1 02 A1 |  if_e	add	local06, local01
1e84c     E7 B0 62 AC |  if_e	wrlong	local06, fp
1e850     50 02 90 AD |  if_e	jmp	#LR__2582
1e854                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1e854     08 CE 05 F1 | 	add	fp, #8
1e858     E7 B0 02 FB | 	rdlong	local06, fp
1e85c     08 CE 85 F1 | 	sub	fp, #8
1e860     1C B0 0E F2 | 	cmp	local06, #28 wz
1e864     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e868     38 00 90 5D |  if_ne	jmp	#LR__2572
1e86c     E7 92 02 FB | 	rdlong	arg01, fp
1e870     49 93 52 F6 | 	abs	arg01, arg01 wc
1e874     1F B2 C6 C9 |  if_b	decod	local07, #31
1e878     00 B2 06 36 |  if_ae	mov	local07, #0
1e87c     28 84 B0 FD | 	call	#__system___float_fromuns
1e880     59 7B 62 F5 | 	xor	result1, local07
1e884     3D 93 02 F6 | 	mov	arg01, result1
1e888     53 95 02 F6 | 	mov	arg02, local01
1e88c     4C 84 B0 FD | 	call	#__system___float_add
1e890     E7 7A 62 FC | 	wrlong	result1, fp
1e894     08 CE 05 F1 | 	add	fp, #8
1e898     E7 3C 68 FC | 	wrlong	#30, fp
1e89c     08 CE 85 F1 | 	sub	fp, #8
1e8a0     00 02 90 FD | 	jmp	#LR__2582
1e8a4                 | LR__2572
1e8a4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1e8a4     08 CE 05 F1 | 	add	fp, #8
1e8a8     E7 B0 02 FB | 	rdlong	local06, fp
1e8ac     08 CE 85 F1 | 	sub	fp, #8
1e8b0     1E B0 0E F2 | 	cmp	local06, #30 wz
1e8b4     1D AA 0E A2 |  if_e	cmp	local03, #29 wz
1e8b8     20 00 90 5D |  if_ne	jmp	#LR__2573
1e8bc     E7 B0 02 FB | 	rdlong	local06, fp
1e8c0     53 93 02 F6 | 	mov	arg01, local01
1e8c4     E0 83 B0 FD | 	call	#__system___float_fromuns
1e8c8     3D 95 02 F6 | 	mov	arg02, result1
1e8cc     58 93 02 F6 | 	mov	arg01, local06
1e8d0     08 84 B0 FD | 	call	#__system___float_add
1e8d4     E7 7A 62 FC | 	wrlong	result1, fp
1e8d8     C8 01 90 FD | 	jmp	#LR__2582
1e8dc                 | LR__2573
1e8dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1e8dc     08 CE 05 F1 | 	add	fp, #8
1e8e0     E7 B0 02 FB | 	rdlong	local06, fp
1e8e4     08 CE 85 F1 | 	sub	fp, #8
1e8e8     1E B0 0E F2 | 	cmp	local06, #30 wz
1e8ec     1C AA 0E A2 |  if_e	cmp	local03, #28 wz
1e8f0     2C 00 90 5D |  if_ne	jmp	#LR__2574
1e8f4     E7 B0 02 FB | 	rdlong	local06, fp
1e8f8     53 93 52 F6 | 	abs	arg01, local01 wc
1e8fc     1F B2 C6 C9 |  if_b	decod	local07, #31
1e900     00 B2 06 36 |  if_ae	mov	local07, #0
1e904     A0 83 B0 FD | 	call	#__system___float_fromuns
1e908     59 7B 62 F5 | 	xor	result1, local07
1e90c     3D 95 02 F6 | 	mov	arg02, result1
1e910     58 93 02 F6 | 	mov	arg01, local06
1e914     C4 83 B0 FD | 	call	#__system___float_add
1e918     E7 7A 62 FC | 	wrlong	result1, fp
1e91c     84 01 90 FD | 	jmp	#LR__2582
1e920                 | LR__2574
1e920                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1e920     08 CE 05 F1 | 	add	fp, #8
1e924     E7 B0 02 FB | 	rdlong	local06, fp
1e928     08 CE 85 F1 | 	sub	fp, #8
1e92c     1E B0 0E F2 | 	cmp	local06, #30 wz
1e930     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1e934     14 00 90 5D |  if_ne	jmp	#LR__2575
1e938     E7 92 02 FB | 	rdlong	arg01, fp
1e93c     53 95 02 F6 | 	mov	arg02, local01
1e940     98 83 B0 FD | 	call	#__system___float_add
1e944     E7 7A 62 FC | 	wrlong	result1, fp
1e948     58 01 90 FD | 	jmp	#LR__2582
1e94c                 | LR__2575
1e94c                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1e94c     08 CE 05 F1 | 	add	fp, #8
1e950     E7 B0 02 FB | 	rdlong	local06, fp
1e954     08 CE 85 F1 | 	sub	fp, #8
1e958     1F B0 0E F2 | 	cmp	local06, #31 wz
1e95c     18 00 90 5D |  if_ne	jmp	#LR__2576
1e960     1F AA 0E F2 | 	cmp	local03, #31 wz
1e964     E7 04 68 5C |  if_ne	wrlong	#2, fp
1e968     08 CE 05 51 |  if_ne	add	fp, #8
1e96c     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1e970     08 CE 85 51 |  if_ne	sub	fp, #8
1e974     2C 01 90 5D |  if_ne	jmp	#LR__2582
1e978                 | LR__2576
1e978                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1e978     1F AA 0E F2 | 	cmp	local03, #31 wz
1e97c     24 00 90 5D |  if_ne	jmp	#LR__2577
1e980     08 CE 05 F1 | 	add	fp, #8
1e984     E7 B0 02 FB | 	rdlong	local06, fp
1e988     08 CE 85 F1 | 	sub	fp, #8
1e98c     1F B0 0E F2 | 	cmp	local06, #31 wz
1e990     E7 04 68 5C |  if_ne	wrlong	#2, fp
1e994     08 CE 05 51 |  if_ne	add	fp, #8
1e998     E7 FE 69 5C |  if_ne	wrlong	#255, fp
1e99c     08 CE 85 51 |  if_ne	sub	fp, #8
1e9a0     00 01 90 5D |  if_ne	jmp	#LR__2582
1e9a4                 | LR__2577
1e9a4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1e9a4     08 CE 05 F1 | 	add	fp, #8
1e9a8     E7 B0 02 FB | 	rdlong	local06, fp
1e9ac     08 CE 85 F1 | 	sub	fp, #8
1e9b0     1F B0 0E F2 | 	cmp	local06, #31 wz
1e9b4     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e9b8     14 00 90 5D |  if_ne	jmp	#LR__2578
1e9bc     E7 92 02 FB | 	rdlong	arg01, fp
1e9c0     53 95 02 F6 | 	mov	arg02, local01
1e9c4     70 60 B0 FD | 	call	#__system___string_concat
1e9c8     E7 7A 62 FC | 	wrlong	result1, fp
1e9cc     D4 00 90 FD | 	jmp	#LR__2582
1e9d0                 | LR__2578
1e9d0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1e9d0     08 CE 05 F1 | 	add	fp, #8
1e9d4     E7 B0 02 FB | 	rdlong	local06, fp
1e9d8     08 CE 85 F1 | 	sub	fp, #8
1e9dc     2B B0 0E F2 | 	cmp	local06, #43 wz
1e9e0     1F AA 0E A2 |  if_e	cmp	local03, #31 wz
1e9e4     28 00 90 5D |  if_ne	jmp	#LR__2579
1e9e8     E7 92 02 FB | 	rdlong	arg01, fp
1e9ec     28 EE BE FD | 	call	#_convertstring
1e9f0     3D 93 02 F6 | 	mov	arg01, result1
1e9f4     53 95 02 F6 | 	mov	arg02, local01
1e9f8     3C 60 B0 FD | 	call	#__system___string_concat
1e9fc     E7 7A 62 FC | 	wrlong	result1, fp
1ea00     08 CE 05 F1 | 	add	fp, #8
1ea04     E7 3E 68 FC | 	wrlong	#31, fp
1ea08     08 CE 85 F1 | 	sub	fp, #8
1ea0c     94 00 90 FD | 	jmp	#LR__2582
1ea10                 | LR__2579
1ea10                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1ea10     08 CE 05 F1 | 	add	fp, #8
1ea14     E7 B0 02 FB | 	rdlong	local06, fp
1ea18     08 CE 85 F1 | 	sub	fp, #8
1ea1c     1F B0 0E F2 | 	cmp	local06, #31 wz
1ea20     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1ea24     20 00 90 5D |  if_ne	jmp	#LR__2580
1ea28     E7 B0 02 FB | 	rdlong	local06, fp
1ea2c     53 93 02 F6 | 	mov	arg01, local01
1ea30     E4 ED BE FD | 	call	#_convertstring
1ea34     3D 95 02 F6 | 	mov	arg02, result1
1ea38     58 93 02 F6 | 	mov	arg01, local06
1ea3c     F8 5F B0 FD | 	call	#__system___string_concat
1ea40     E7 7A 62 FC | 	wrlong	result1, fp
1ea44     5C 00 90 FD | 	jmp	#LR__2582
1ea48                 | LR__2580
1ea48                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1ea48     08 CE 05 F1 | 	add	fp, #8
1ea4c     E7 B0 02 FB | 	rdlong	local06, fp
1ea50     08 CE 85 F1 | 	sub	fp, #8
1ea54     2B B0 0E F2 | 	cmp	local06, #43 wz
1ea58     2B AA 0E A2 |  if_e	cmp	local03, #43 wz
1ea5c     34 00 90 5D |  if_ne	jmp	#LR__2581
1ea60     E7 92 02 FB | 	rdlong	arg01, fp
1ea64     B0 ED BE FD | 	call	#_convertstring
1ea68     3D B1 02 F6 | 	mov	local06, result1
1ea6c     53 93 02 F6 | 	mov	arg01, local01
1ea70     A4 ED BE FD | 	call	#_convertstring
1ea74     3D 95 02 F6 | 	mov	arg02, result1
1ea78     58 93 02 F6 | 	mov	arg01, local06
1ea7c     B8 5F B0 FD | 	call	#__system___string_concat
1ea80     E7 7A 62 FC | 	wrlong	result1, fp
1ea84     08 CE 05 F1 | 	add	fp, #8
1ea88     E7 3E 68 FC | 	wrlong	#31, fp
1ea8c     08 CE 85 F1 | 	sub	fp, #8
1ea90     10 00 90 FD | 	jmp	#LR__2582
1ea94                 | LR__2581
1ea94     E7 08 68 FC | 	wrlong	#4, fp
1ea98     08 CE 05 F1 | 	add	fp, #8
1ea9c     E7 FE 69 FC | 	wrlong	#255, fp
1eaa0     08 CE 85 F1 | 	sub	fp, #8
1eaa4                 | LR__2582
1eaa4     E7 92 02 F6 | 	mov	arg01, fp
1eaa8     8C EC BE FD | 	call	#_push
1eaac     E7 F0 03 F6 | 	mov	ptra, fp
1eab0     F2 00 A0 FD | 	call	#popregs_
1eab4                 | _do_plus_ret
1eab4     2D 00 64 FD | 	ret
1eab8                 | 
1eab8                 | ' 
1eab8                 | ' '--------------------------------- power (^)
1eab8                 | ' 
1eab8                 | ' sub do_power 
1eab8                 | _do_power
1eab8     04 CA 05 F6 | 	mov	COUNT_, #4
1eabc     E8 00 A0 FD | 	call	#pushregs_
1eac0     18 F0 07 F1 | 	add	ptra, #24
1eac4     E0 EB BE FD | 	call	#_pop
1eac8     3D A7 02 F6 | 	mov	local01, result1
1eacc     3E 95 02 F6 | 	mov	arg02, result2
1ead0     3F 93 02 F6 | 	mov	arg01, result3
1ead4     4A A9 02 F6 | 	mov	local02, arg02
1ead8     49 AB 02 F6 | 	mov	local03, arg01
1eadc     C8 EB BE FD | 	call	#_pop
1eae0     E7 7A 62 FC | 	wrlong	result1, fp
1eae4     04 CE 05 F1 | 	add	fp, #4
1eae8     E7 7C 62 FC | 	wrlong	result2, fp
1eaec     04 CE 05 F1 | 	add	fp, #4
1eaf0     E7 7E 62 FC | 	wrlong	result3, fp
1eaf4                 | ' 
1eaf4                 | ' t2=pop()
1eaf4                 | ' t1=pop()
1eaf4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1eaf4     08 CE 85 F1 | 	sub	fp, #8
1eaf8     1F 7E 0E F2 | 	cmp	result3, #31 wz
1eafc     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1eb00     E7 18 68 AC |  if_e	wrlong	#12, fp
1eb04     08 CE 05 A1 |  if_e	add	fp, #8
1eb08     E7 FE 69 AC |  if_e	wrlong	#255, fp
1eb0c     08 CE 85 A1 |  if_e	sub	fp, #8
1eb10     E0 00 90 AD |  if_e	jmp	#LR__2595
1eb14                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1eb14     08 CE 05 F1 | 	add	fp, #8
1eb18     E7 94 02 FB | 	rdlong	arg02, fp
1eb1c     08 CE 85 F1 | 	sub	fp, #8
1eb20     1C 94 0E F2 | 	cmp	arg02, #28 wz
1eb24     28 00 90 5D |  if_ne	jmp	#LR__2590
1eb28     08 CE 05 F1 | 	add	fp, #8
1eb2c     E7 3C 68 FC | 	wrlong	#30, fp
1eb30     08 CE 85 F1 | 	sub	fp, #8
1eb34     E7 92 02 FB | 	rdlong	arg01, fp
1eb38     49 93 52 F6 | 	abs	arg01, arg01 wc
1eb3c     1F AC C6 C9 |  if_b	decod	local04, #31
1eb40     00 AC 06 36 |  if_ae	mov	local04, #0
1eb44     60 81 B0 FD | 	call	#__system___float_fromuns
1eb48     56 7B 62 F5 | 	xor	result1, local04
1eb4c     E7 7A 62 FC | 	wrlong	result1, fp
1eb50                 | LR__2590
1eb50                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1eb50     08 CE 05 F1 | 	add	fp, #8
1eb54     E7 94 02 FB | 	rdlong	arg02, fp
1eb58     08 CE 85 F1 | 	sub	fp, #8
1eb5c     1D 94 0E F2 | 	cmp	arg02, #29 wz
1eb60     18 00 90 5D |  if_ne	jmp	#LR__2591
1eb64     08 CE 05 F1 | 	add	fp, #8
1eb68     E7 3C 68 FC | 	wrlong	#30, fp
1eb6c     08 CE 85 F1 | 	sub	fp, #8
1eb70     E7 92 02 FB | 	rdlong	arg01, fp
1eb74     30 81 B0 FD | 	call	#__system___float_fromuns
1eb78     E7 7A 62 FC | 	wrlong	result1, fp
1eb7c                 | LR__2591
1eb7c                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1eb7c     1C AA 0E F2 | 	cmp	local03, #28 wz
1eb80     1C 00 90 5D |  if_ne	jmp	#LR__2592
1eb84     1E AA 06 F6 | 	mov	local03, #30
1eb88     53 93 52 F6 | 	abs	arg01, local01 wc
1eb8c     1F AC C6 C9 |  if_b	decod	local04, #31
1eb90     00 AC 06 36 |  if_ae	mov	local04, #0
1eb94     10 81 B0 FD | 	call	#__system___float_fromuns
1eb98     56 7B 62 F5 | 	xor	result1, local04
1eb9c     3D A7 02 F6 | 	mov	local01, result1
1eba0                 | LR__2592
1eba0                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1eba0     1D AA 0E F2 | 	cmp	local03, #29 wz
1eba4     10 00 90 5D |  if_ne	jmp	#LR__2593
1eba8     1E AA 06 F6 | 	mov	local03, #30
1ebac     53 93 02 F6 | 	mov	arg01, local01
1ebb0     F4 80 B0 FD | 	call	#__system___float_fromuns
1ebb4     3D A7 02 F6 | 	mov	local01, result1
1ebb8                 | LR__2593
1ebb8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1ebb8     08 CE 05 F1 | 	add	fp, #8
1ebbc     E7 94 02 FB | 	rdlong	arg02, fp
1ebc0     08 CE 85 F1 | 	sub	fp, #8
1ebc4     1E 94 0E F2 | 	cmp	arg02, #30 wz
1ebc8     1E AA 0E A2 |  if_e	cmp	local03, #30 wz
1ebcc     14 00 90 5D |  if_ne	jmp	#LR__2594
1ebd0     E7 92 02 FB | 	rdlong	arg01, fp
1ebd4     53 95 02 F6 | 	mov	arg02, local01
1ebd8     E8 93 B0 FD | 	call	#__system____builtin_powf
1ebdc     E7 7A 62 FC | 	wrlong	result1, fp
1ebe0     10 00 90 FD | 	jmp	#LR__2595
1ebe4                 | LR__2594
1ebe4     E7 1A 68 FC | 	wrlong	#13, fp
1ebe8     08 CE 05 F1 | 	add	fp, #8
1ebec     E7 FE 69 FC | 	wrlong	#255, fp
1ebf0     08 CE 85 F1 | 	sub	fp, #8
1ebf4                 | LR__2595
1ebf4     E7 92 02 F6 | 	mov	arg01, fp
1ebf8     3C EB BE FD | 	call	#_push
1ebfc     E7 F0 03 F6 | 	mov	ptra, fp
1ec00     F2 00 A0 FD | 	call	#popregs_
1ec04                 | _do_power_ret
1ec04     2D 00 64 FD | 	ret
1ec08                 | 
1ec08                 | ' 
1ec08                 | ' '--------------------------------- SHL
1ec08                 | ' 
1ec08                 | ' sub do_shl 
1ec08                 | _do_shl
1ec08     05 CA 05 F6 | 	mov	COUNT_, #5
1ec0c     E8 00 A0 FD | 	call	#pushregs_
1ec10     18 F0 07 F1 | 	add	ptra, #24
1ec14     90 EA BE FD | 	call	#_pop
1ec18     3D A7 02 F6 | 	mov	local01, result1
1ec1c     3E 93 02 F6 | 	mov	arg01, result2
1ec20     3F AD 02 F6 | 	mov	local04, result3
1ec24     49 A9 02 F6 | 	mov	local02, arg01
1ec28     56 AB 02 F6 | 	mov	local03, local04
1ec2c     78 EA BE FD | 	call	#_pop
1ec30     3F AF 02 F6 | 	mov	local05, result3
1ec34     E7 7A 62 FC | 	wrlong	result1, fp
1ec38     04 CE 05 F1 | 	add	fp, #4
1ec3c     E7 7C 62 FC | 	wrlong	result2, fp
1ec40     04 CE 05 F1 | 	add	fp, #4
1ec44     E7 AE 62 FC | 	wrlong	local05, fp
1ec48                 | ' 
1ec48                 | ' t2=pop()
1ec48                 | ' t1=pop()
1ec48                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1ec48     08 CE 85 F1 | 	sub	fp, #8
1ec4c     1C AE 0E F2 | 	cmp	local05, #28 wz
1ec50     E7 AE 02 AB |  if_e	rdlong	local05, fp
1ec54     E7 AE 62 AC |  if_e	wrlong	local05, fp
1ec58     08 CE 05 A1 |  if_e	add	fp, #8
1ec5c     E7 3A 68 AC |  if_e	wrlong	#29, fp
1ec60     08 CE 85 A1 |  if_e	sub	fp, #8
1ec64                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1ec64     1C AA 0E F2 | 	cmp	local03, #28 wz
1ec68     1D AA 06 A6 |  if_e	mov	local03, #29
1ec6c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1ec6c     08 CE 05 F1 | 	add	fp, #8
1ec70     E7 AE 02 FB | 	rdlong	local05, fp
1ec74     08 CE 85 F1 | 	sub	fp, #8
1ec78     1F AE 0E F2 | 	cmp	local05, #31 wz
1ec7c     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1ec80     08 CE 05 51 |  if_ne	add	fp, #8
1ec84     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1ec88     08 CE 85 51 |  if_ne	sub	fp, #8
1ec8c     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1ec90     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1ec94     E7 0C 68 AC |  if_e	wrlong	#6, fp
1ec98     08 CE 05 A1 |  if_e	add	fp, #8
1ec9c     E7 FE 69 AC |  if_e	wrlong	#255, fp
1eca0     08 CE 85 A1 |  if_e	sub	fp, #8
1eca4     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1eca8     53 AF 62 50 |  if_ne	shl	local05, local01
1ecac     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1ecb0     E7 92 02 F6 | 	mov	arg01, fp
1ecb4     80 EA BE FD | 	call	#_push
1ecb8     E7 F0 03 F6 | 	mov	ptra, fp
1ecbc     F2 00 A0 FD | 	call	#popregs_
1ecc0                 | _do_shl_ret
1ecc0     2D 00 64 FD | 	ret
1ecc4                 | 
1ecc4                 | ' 
1ecc4                 | ' '--------------------------------- SHR
1ecc4                 | ' 
1ecc4                 | ' sub do_shr 
1ecc4                 | _do_shr
1ecc4     05 CA 05 F6 | 	mov	COUNT_, #5
1ecc8     E8 00 A0 FD | 	call	#pushregs_
1eccc     18 F0 07 F1 | 	add	ptra, #24
1ecd0     D4 E9 BE FD | 	call	#_pop
1ecd4     3D A7 02 F6 | 	mov	local01, result1
1ecd8     3E 93 02 F6 | 	mov	arg01, result2
1ecdc     3F AD 02 F6 | 	mov	local04, result3
1ece0     49 A9 02 F6 | 	mov	local02, arg01
1ece4     56 AB 02 F6 | 	mov	local03, local04
1ece8     BC E9 BE FD | 	call	#_pop
1ecec     3F AF 02 F6 | 	mov	local05, result3
1ecf0     E7 7A 62 FC | 	wrlong	result1, fp
1ecf4     04 CE 05 F1 | 	add	fp, #4
1ecf8     E7 7C 62 FC | 	wrlong	result2, fp
1ecfc     04 CE 05 F1 | 	add	fp, #4
1ed00     E7 AE 62 FC | 	wrlong	local05, fp
1ed04                 | ' 
1ed04                 | ' t2=pop()
1ed04                 | ' t1=pop()
1ed04                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1ed04     08 CE 85 F1 | 	sub	fp, #8
1ed08     1C AE 0E F2 | 	cmp	local05, #28 wz
1ed0c     E7 AE 02 AB |  if_e	rdlong	local05, fp
1ed10     E7 AE 62 AC |  if_e	wrlong	local05, fp
1ed14     08 CE 05 A1 |  if_e	add	fp, #8
1ed18     E7 3A 68 AC |  if_e	wrlong	#29, fp
1ed1c     08 CE 85 A1 |  if_e	sub	fp, #8
1ed20                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1ed20     1C AA 0E F2 | 	cmp	local03, #28 wz
1ed24     1D AA 06 A6 |  if_e	mov	local03, #29
1ed28                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1ed28     08 CE 05 F1 | 	add	fp, #8
1ed2c     E7 AE 02 FB | 	rdlong	local05, fp
1ed30     08 CE 85 F1 | 	sub	fp, #8
1ed34     1F AE 0E F2 | 	cmp	local05, #31 wz
1ed38     1F AA 0E 52 |  if_ne	cmp	local03, #31 wz
1ed3c     08 CE 05 51 |  if_ne	add	fp, #8
1ed40     E7 AC 02 5B |  if_ne	rdlong	local04, fp
1ed44     08 CE 85 51 |  if_ne	sub	fp, #8
1ed48     1E AC 0E 52 |  if_ne	cmp	local04, #30 wz
1ed4c     1E AA 0E 52 |  if_ne	cmp	local03, #30 wz
1ed50     E7 0C 68 AC |  if_e	wrlong	#6, fp
1ed54     08 CE 05 A1 |  if_e	add	fp, #8
1ed58     E7 FE 69 AC |  if_e	wrlong	#255, fp
1ed5c     08 CE 85 A1 |  if_e	sub	fp, #8
1ed60     E7 AE 02 5B |  if_ne	rdlong	local05, fp
1ed64     53 AF 42 50 |  if_ne	shr	local05, local01
1ed68     E7 AE 62 5C |  if_ne	wrlong	local05, fp
1ed6c     E7 92 02 F6 | 	mov	arg01, fp
1ed70     C4 E9 BE FD | 	call	#_push
1ed74     E7 F0 03 F6 | 	mov	ptra, fp
1ed78     F2 00 A0 FD | 	call	#popregs_
1ed7c                 | _do_shr_ret
1ed7c     2D 00 64 FD | 	ret
1ed80                 | 
1ed80                 | ' 
1ed80                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1ed80                 | ' 
1ed80                 | ' ''----------------------------------------------------------------------------------------------------
1ed80                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1ed80                 | ' ''----------------------------------------------------------------------------------------------------
1ed80                 | ' 
1ed80                 | ' ''--------------------------- Command function pointers
1ed80                 | ' 
1ed80                 | ' sub init_commands
1ed80                 | _init_commands
1ed80                 | ' 
1ed80                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1ed80     00 80 06 F6 | 	mov	_var01, #0
1ed84     D7 14 48 FB | 	callpa	#(@LR__2601-@LR__2600)>>2,fcache_load_ptr_
1ed88                 | LR__2600
1ed88     40 7B 02 F6 | 	mov	result1, _var01
1ed8c     02 7A 66 F0 | 	shl	result1, #2
1ed90     32 95 02 F6 | 	mov	arg02, objptr
1ed94     44 00 00 FF 
1ed98     80 94 06 F1 | 	add	arg02, ##34944
1ed9c     4A 7B 02 F1 | 	add	result1, arg02
1eda0     3D 65 62 FC | 	wrlong	objptr, result1
1eda4     01 80 06 F1 | 	add	_var01, #1
1eda8     00 81 56 F2 | 	cmps	_var01, #256 wc
1edac     D8 FF 9F CD |  if_b	jmp	#LR__2600
1edb0                 | LR__2601
1edb0     32 7B 02 F6 | 	mov	result1, objptr
1edb4     14 7A 26 F4 | 	bith	result1, #20
1edb8     44 00 00 FF 
1edbc     84 64 06 F1 | 	add	objptr, ##34948
1edc0     32 7B 62 FC | 	wrlong	result1, objptr
1edc4     44 00 00 FF 
1edc8     84 64 86 F1 | 	sub	objptr, ##34948
1edcc     32 7B 02 F6 | 	mov	result1, objptr
1edd0     15 7A 26 F4 | 	bith	result1, #21
1edd4     44 00 00 FF 
1edd8     88 64 06 F1 | 	add	objptr, ##34952
1eddc     32 7B 62 FC | 	wrlong	result1, objptr
1ede0     44 00 00 FF 
1ede4     88 64 86 F1 | 	sub	objptr, ##34952
1ede8     32 7B 02 F6 | 	mov	result1, objptr
1edec     34 7A 26 F4 | 	bith	result1, #52
1edf0     44 00 00 FF 
1edf4     8C 64 06 F1 | 	add	objptr, ##34956
1edf8     32 7B 62 FC | 	wrlong	result1, objptr
1edfc     44 00 00 FF 
1ee00     8C 64 86 F1 | 	sub	objptr, ##34956
1ee04     32 7B 02 F6 | 	mov	result1, objptr
1ee08     16 7A 26 F4 | 	bith	result1, #22
1ee0c     44 00 00 FF 
1ee10     94 64 06 F1 | 	add	objptr, ##34964
1ee14     32 7B 62 FC | 	wrlong	result1, objptr
1ee18     44 00 00 FF 
1ee1c     94 64 86 F1 | 	sub	objptr, ##34964
1ee20     32 7B 02 F6 | 	mov	result1, objptr
1ee24     00 28 00 FF 
1ee28     00 7A 46 F5 | 	or	result1, ##5242880
1ee2c     44 00 00 FF 
1ee30     98 64 06 F1 | 	add	objptr, ##34968
1ee34     32 7B 62 FC | 	wrlong	result1, objptr
1ee38     44 00 00 FF 
1ee3c     98 64 86 F1 | 	sub	objptr, ##34968
1ee40     32 7B 02 F6 | 	mov	result1, objptr
1ee44     35 7A 26 F4 | 	bith	result1, #53
1ee48     44 00 00 FF 
1ee4c     9C 64 06 F1 | 	add	objptr, ##34972
1ee50     32 7B 62 FC | 	wrlong	result1, objptr
1ee54     44 00 00 FF 
1ee58     9C 64 86 F1 | 	sub	objptr, ##34972
1ee5c     32 7B 02 F6 | 	mov	result1, objptr
1ee60     54 7A 26 F4 | 	bith	result1, #84
1ee64     44 00 00 FF 
1ee68     A0 64 06 F1 | 	add	objptr, ##34976
1ee6c     32 7B 62 FC | 	wrlong	result1, objptr
1ee70     44 00 00 FF 
1ee74     A0 64 86 F1 | 	sub	objptr, ##34976
1ee78     32 7B 02 F6 | 	mov	result1, objptr
1ee7c     17 7A 26 F4 | 	bith	result1, #23
1ee80     44 00 00 FF 
1ee84     A4 64 06 F1 | 	add	objptr, ##34980
1ee88     32 7B 62 FC | 	wrlong	result1, objptr
1ee8c     44 00 00 FF 
1ee90     A4 64 86 F1 | 	sub	objptr, ##34980
1ee94     32 7B 02 F6 | 	mov	result1, objptr
1ee98     00 48 00 FF 
1ee9c     00 7A 46 F5 | 	or	result1, ##9437184
1eea0     44 00 00 FF 
1eea4     A8 64 06 F1 | 	add	objptr, ##34984
1eea8     32 7B 62 FC | 	wrlong	result1, objptr
1eeac     44 00 00 FF 
1eeb0     A8 64 86 F1 | 	sub	objptr, ##34984
1eeb4     32 7B 02 F6 | 	mov	result1, objptr
1eeb8     00 50 00 FF 
1eebc     00 7A 46 F5 | 	or	result1, ##10485760
1eec0     44 00 00 FF 
1eec4     AC 64 06 F1 | 	add	objptr, ##34988
1eec8     32 7B 62 FC | 	wrlong	result1, objptr
1eecc     44 00 00 FF 
1eed0     AC 64 86 F1 | 	sub	objptr, ##34988
1eed4     32 7B 02 F6 | 	mov	result1, objptr
1eed8     00 58 00 FF 
1eedc     00 7A 46 F5 | 	or	result1, ##11534336
1eee0     44 00 00 FF 
1eee4     B0 64 06 F1 | 	add	objptr, ##34992
1eee8     32 7B 62 FC | 	wrlong	result1, objptr
1eeec     44 00 00 FF 
1eef0     B0 64 86 F1 | 	sub	objptr, ##34992
1eef4     32 7B 02 F6 | 	mov	result1, objptr
1eef8     36 7A 26 F4 | 	bith	result1, #54
1eefc     44 00 00 FF 
1ef00     C4 64 06 F1 | 	add	objptr, ##35012
1ef04     32 7B 62 FC | 	wrlong	result1, objptr
1ef08     44 00 00 FF 
1ef0c     C4 64 86 F1 | 	sub	objptr, ##35012
1ef10     32 7B 02 F6 | 	mov	result1, objptr
1ef14     00 68 00 FF 
1ef18     00 7A 46 F5 | 	or	result1, ##13631488
1ef1c     44 00 00 FF 
1ef20     F4 64 06 F1 | 	add	objptr, ##35060
1ef24     32 7B 62 FC | 	wrlong	result1, objptr
1ef28     44 00 00 FF 
1ef2c     F4 64 86 F1 | 	sub	objptr, ##35060
1ef30     32 7B 02 F6 | 	mov	result1, objptr
1ef34     00 68 00 FF 
1ef38     00 7A 46 F5 | 	or	result1, ##13631488
1ef3c     44 00 00 FF 
1ef40     F0 64 06 F1 | 	add	objptr, ##35056
1ef44     32 7B 62 FC | 	wrlong	result1, objptr
1ef48     44 00 00 FF 
1ef4c     F0 64 86 F1 | 	sub	objptr, ##35056
1ef50     32 7B 02 F6 | 	mov	result1, objptr
1ef54     00 68 00 FF 
1ef58     00 7A 46 F5 | 	or	result1, ##13631488
1ef5c     44 00 00 FF 
1ef60     F8 64 06 F1 | 	add	objptr, ##35064
1ef64     32 7B 62 FC | 	wrlong	result1, objptr
1ef68     44 00 00 FF 
1ef6c     F8 64 86 F1 | 	sub	objptr, ##35064
1ef70     32 7B 02 F6 | 	mov	result1, objptr
1ef74     00 68 00 FF 
1ef78     00 7A 46 F5 | 	or	result1, ##13631488
1ef7c     44 00 00 FF 
1ef80     FC 64 06 F1 | 	add	objptr, ##35068
1ef84     32 7B 62 FC | 	wrlong	result1, objptr
1ef88     44 00 00 FF 
1ef8c     FC 64 86 F1 | 	sub	objptr, ##35068
1ef90     32 7B 02 F6 | 	mov	result1, objptr
1ef94     00 68 00 FF 
1ef98     00 7A 46 F5 | 	or	result1, ##13631488
1ef9c     44 00 00 FF 
1efa0     2C 65 06 F1 | 	add	objptr, ##35116
1efa4     32 7B 62 FC | 	wrlong	result1, objptr
1efa8     44 00 00 FF 
1efac     2C 65 86 F1 | 	sub	objptr, ##35116
1efb0     32 7B 02 F6 | 	mov	result1, objptr
1efb4     55 7A 26 F4 | 	bith	result1, #85
1efb8     44 00 00 FF 
1efbc     DC 64 06 F1 | 	add	objptr, ##35036
1efc0     32 7B 62 FC | 	wrlong	result1, objptr
1efc4     44 00 00 FF 
1efc8     DC 64 86 F1 | 	sub	objptr, ##35036
1efcc     32 7B 02 F6 | 	mov	result1, objptr
1efd0     00 68 00 FF 
1efd4     00 7A 46 F5 | 	or	result1, ##13631488
1efd8     44 00 00 FF 
1efdc     30 65 06 F1 | 	add	objptr, ##35120
1efe0     32 7B 62 FC | 	wrlong	result1, objptr
1efe4     44 00 00 FF 
1efe8     30 65 86 F1 | 	sub	objptr, ##35120
1efec     32 7B 02 F6 | 	mov	result1, objptr
1eff0     00 68 00 FF 
1eff4     00 7A 46 F5 | 	or	result1, ##13631488
1eff8     44 00 00 FF 
1effc     00 65 06 F1 | 	add	objptr, ##35072
1f000     32 7B 62 FC | 	wrlong	result1, objptr
1f004     44 00 00 FF 
1f008     00 65 86 F1 | 	sub	objptr, ##35072
1f00c     32 7B 02 F6 | 	mov	result1, objptr
1f010     00 68 00 FF 
1f014     00 7A 46 F5 | 	or	result1, ##13631488
1f018     44 00 00 FF 
1f01c     04 65 06 F1 | 	add	objptr, ##35076
1f020     32 7B 62 FC | 	wrlong	result1, objptr
1f024     44 00 00 FF 
1f028     04 65 86 F1 | 	sub	objptr, ##35076
1f02c     32 7B 02 F6 | 	mov	result1, objptr
1f030     00 68 00 FF 
1f034     00 7A 46 F5 | 	or	result1, ##13631488
1f038     44 00 00 FF 
1f03c     08 65 06 F1 | 	add	objptr, ##35080
1f040     32 7B 62 FC | 	wrlong	result1, objptr
1f044     44 00 00 FF 
1f048     08 65 86 F1 | 	sub	objptr, ##35080
1f04c     32 7B 02 F6 | 	mov	result1, objptr
1f050     74 7A 26 F4 | 	bith	result1, #116
1f054     44 00 00 FF 
1f058     80 65 06 F1 | 	add	objptr, ##35200
1f05c     32 7B 62 FC | 	wrlong	result1, objptr
1f060     44 00 00 FF 
1f064     80 65 86 F1 | 	sub	objptr, ##35200
1f068     32 7B 02 F6 | 	mov	result1, objptr
1f06c     18 7A 26 F4 | 	bith	result1, #24
1f070     44 00 00 FF 
1f074     84 65 06 F1 | 	add	objptr, ##35204
1f078     32 7B 62 FC | 	wrlong	result1, objptr
1f07c     44 00 00 FF 
1f080     84 65 86 F1 | 	sub	objptr, ##35204
1f084     32 7B 02 F6 | 	mov	result1, objptr
1f088     00 88 00 FF 
1f08c     00 7A 46 F5 | 	or	result1, ##17825792
1f090     44 00 00 FF 
1f094     88 65 06 F1 | 	add	objptr, ##35208
1f098     32 7B 62 FC | 	wrlong	result1, objptr
1f09c     44 00 00 FF 
1f0a0     88 65 86 F1 | 	sub	objptr, ##35208
1f0a4     32 7B 02 F6 | 	mov	result1, objptr
1f0a8     00 90 00 FF 
1f0ac     00 7A 46 F5 | 	or	result1, ##18874368
1f0b0     44 00 00 FF 
1f0b4     8C 65 06 F1 | 	add	objptr, ##35212
1f0b8     32 7B 62 FC | 	wrlong	result1, objptr
1f0bc     44 00 00 FF 
1f0c0     8C 65 86 F1 | 	sub	objptr, ##35212
1f0c4     32 7B 02 F6 | 	mov	result1, objptr
1f0c8     00 98 00 FF 
1f0cc     00 7A 46 F5 | 	or	result1, ##19922944
1f0d0     44 00 00 FF 
1f0d4     90 65 06 F1 | 	add	objptr, ##35216
1f0d8     32 7B 62 FC | 	wrlong	result1, objptr
1f0dc     44 00 00 FF 
1f0e0     90 65 86 F1 | 	sub	objptr, ##35216
1f0e4     32 7B 02 F6 | 	mov	result1, objptr
1f0e8     00 A0 00 FF 
1f0ec     00 7A 46 F5 | 	or	result1, ##20971520
1f0f0     44 00 00 FF 
1f0f4     94 65 06 F1 | 	add	objptr, ##35220
1f0f8     32 7B 62 FC | 	wrlong	result1, objptr
1f0fc     44 00 00 FF 
1f100     94 65 86 F1 | 	sub	objptr, ##35220
1f104     32 7B 02 F6 | 	mov	result1, objptr
1f108     00 A8 00 FF 
1f10c     00 7A 46 F5 | 	or	result1, ##22020096
1f110     44 00 00 FF 
1f114     98 65 06 F1 | 	add	objptr, ##35224
1f118     32 7B 62 FC | 	wrlong	result1, objptr
1f11c     44 00 00 FF 
1f120     98 65 86 F1 | 	sub	objptr, ##35224
1f124     32 7B 02 F6 | 	mov	result1, objptr
1f128     00 B0 00 FF 
1f12c     00 7A 46 F5 | 	or	result1, ##23068672
1f130     44 00 00 FF 
1f134     9C 65 06 F1 | 	add	objptr, ##35228
1f138     32 7B 62 FC | 	wrlong	result1, objptr
1f13c     44 00 00 FF 
1f140     9C 65 86 F1 | 	sub	objptr, ##35228
1f144     32 7B 02 F6 | 	mov	result1, objptr
1f148     00 B8 00 FF 
1f14c     00 7A 46 F5 | 	or	result1, ##24117248
1f150     44 00 00 FF 
1f154     A0 65 06 F1 | 	add	objptr, ##35232
1f158     32 7B 62 FC | 	wrlong	result1, objptr
1f15c     44 00 00 FF 
1f160     A0 65 86 F1 | 	sub	objptr, ##35232
1f164     32 7B 02 F6 | 	mov	result1, objptr
1f168     37 7A 26 F4 | 	bith	result1, #55
1f16c     44 00 00 FF 
1f170     A4 65 06 F1 | 	add	objptr, ##35236
1f174     32 7B 62 FC | 	wrlong	result1, objptr
1f178     44 00 00 FF 
1f17c     A4 65 86 F1 | 	sub	objptr, ##35236
1f180     32 7B 02 F6 | 	mov	result1, objptr
1f184     00 C8 00 FF 
1f188     00 7A 46 F5 | 	or	result1, ##26214400
1f18c     44 00 00 FF 
1f190     A8 65 06 F1 | 	add	objptr, ##35240
1f194     32 7B 62 FC | 	wrlong	result1, objptr
1f198     44 00 00 FF 
1f19c     A8 65 86 F1 | 	sub	objptr, ##35240
1f1a0     32 7B 02 F6 | 	mov	result1, objptr
1f1a4     00 D0 00 FF 
1f1a8     00 7A 46 F5 | 	or	result1, ##27262976
1f1ac     44 00 00 FF 
1f1b0     AC 65 06 F1 | 	add	objptr, ##35244
1f1b4     32 7B 62 FC | 	wrlong	result1, objptr
1f1b8     44 00 00 FF 
1f1bc     AC 65 86 F1 | 	sub	objptr, ##35244
1f1c0     32 7B 02 F6 | 	mov	result1, objptr
1f1c4     00 D8 00 FF 
1f1c8     00 7A 46 F5 | 	or	result1, ##28311552
1f1cc     44 00 00 FF 
1f1d0     B0 65 06 F1 | 	add	objptr, ##35248
1f1d4     32 7B 62 FC | 	wrlong	result1, objptr
1f1d8     44 00 00 FF 
1f1dc     B0 65 86 F1 | 	sub	objptr, ##35248
1f1e0     32 7B 02 F6 | 	mov	result1, objptr
1f1e4     56 7A 26 F4 | 	bith	result1, #86
1f1e8     44 00 00 FF 
1f1ec     B4 65 06 F1 | 	add	objptr, ##35252
1f1f0     32 7B 62 FC | 	wrlong	result1, objptr
1f1f4     44 00 00 FF 
1f1f8     B4 65 86 F1 | 	sub	objptr, ##35252
1f1fc     32 7B 02 F6 | 	mov	result1, objptr
1f200     00 E8 00 FF 
1f204     00 7A 46 F5 | 	or	result1, ##30408704
1f208     46 00 00 FF 
1f20c     7C 64 06 F1 | 	add	objptr, ##35964
1f210     32 7B 62 FC | 	wrlong	result1, objptr
1f214     46 00 00 FF 
1f218     7C 64 86 F1 | 	sub	objptr, ##35964
1f21c     32 7B 02 F6 | 	mov	result1, objptr
1f220     75 7A 26 F4 | 	bith	result1, #117
1f224     44 00 00 FF 
1f228     B8 65 06 F1 | 	add	objptr, ##35256
1f22c     32 7B 62 FC | 	wrlong	result1, objptr
1f230     44 00 00 FF 
1f234     B8 65 86 F1 | 	sub	objptr, ##35256
1f238     32 7B 02 F6 | 	mov	result1, objptr
1f23c     94 7A 26 F4 | 	bith	result1, #148
1f240     44 00 00 FF 
1f244     CC 65 06 F1 | 	add	objptr, ##35276
1f248     32 7B 62 FC | 	wrlong	result1, objptr
1f24c     44 00 00 FF 
1f250     CC 65 86 F1 | 	sub	objptr, ##35276
1f254     32 7B 02 F6 | 	mov	result1, objptr
1f258     19 7A 26 F4 | 	bith	result1, #25
1f25c     44 00 00 FF 
1f260     BC 65 06 F1 | 	add	objptr, ##35260
1f264     32 7B 62 FC | 	wrlong	result1, objptr
1f268     44 00 00 FF 
1f26c     BC 65 86 F1 | 	sub	objptr, ##35260
1f270     32 7B 02 F6 | 	mov	result1, objptr
1f274     00 08 01 FF 
1f278     00 7A 46 F5 | 	or	result1, ##34603008
1f27c     44 00 00 FF 
1f280     D8 64 06 F1 | 	add	objptr, ##35032
1f284     32 7B 62 FC | 	wrlong	result1, objptr
1f288     44 00 00 FF 
1f28c     D8 64 86 F1 | 	sub	objptr, ##35032
1f290     32 7B 02 F6 | 	mov	result1, objptr
1f294     00 10 01 FF 
1f298     00 7A 46 F5 | 	or	result1, ##35651584
1f29c     44 00 00 FF 
1f2a0     C4 65 06 F1 | 	add	objptr, ##35268
1f2a4     32 7B 62 FC | 	wrlong	result1, objptr
1f2a8     44 00 00 FF 
1f2ac     C4 65 86 F1 | 	sub	objptr, ##35268
1f2b0     32 7B 02 F6 | 	mov	result1, objptr
1f2b4     00 18 01 FF 
1f2b8     00 7A 46 F5 | 	or	result1, ##36700160
1f2bc     44 00 00 FF 
1f2c0     C8 65 06 F1 | 	add	objptr, ##35272
1f2c4     32 7B 62 FC | 	wrlong	result1, objptr
1f2c8     44 00 00 FF 
1f2cc     C8 65 86 F1 | 	sub	objptr, ##35272
1f2d0     32 7B 02 F6 | 	mov	result1, objptr
1f2d4     00 20 01 FF 
1f2d8     00 7A 46 F5 | 	or	result1, ##37748736
1f2dc     44 00 00 FF 
1f2e0     D4 65 06 F1 | 	add	objptr, ##35284
1f2e4     32 7B 62 FC | 	wrlong	result1, objptr
1f2e8     44 00 00 FF 
1f2ec     D4 65 86 F1 | 	sub	objptr, ##35284
1f2f0     32 7B 02 F6 | 	mov	result1, objptr
1f2f4     00 28 01 FF 
1f2f8     00 7A 46 F5 | 	or	result1, ##38797312
1f2fc     44 00 00 FF 
1f300     D8 65 06 F1 | 	add	objptr, ##35288
1f304     32 7B 62 FC | 	wrlong	result1, objptr
1f308     44 00 00 FF 
1f30c     D8 65 86 F1 | 	sub	objptr, ##35288
1f310     32 7B 02 F6 | 	mov	result1, objptr
1f314     00 30 01 FF 
1f318     00 7A 46 F5 | 	or	result1, ##39845888
1f31c     44 00 00 FF 
1f320     DC 65 06 F1 | 	add	objptr, ##35292
1f324     32 7B 62 FC | 	wrlong	result1, objptr
1f328     44 00 00 FF 
1f32c     DC 65 86 F1 | 	sub	objptr, ##35292
1f330     32 7B 02 F6 | 	mov	result1, objptr
1f334     00 38 01 FF 
1f338     00 7A 46 F5 | 	or	result1, ##40894464
1f33c     44 00 00 FF 
1f340     E0 65 06 F1 | 	add	objptr, ##35296
1f344     32 7B 62 FC | 	wrlong	result1, objptr
1f348     44 00 00 FF 
1f34c     E0 65 86 F1 | 	sub	objptr, ##35296
1f350     32 7B 02 F6 | 	mov	result1, objptr
1f354     00 40 01 FF 
1f358     00 7A 46 F5 | 	or	result1, ##41943040
1f35c     44 00 00 FF 
1f360     E8 65 06 F1 | 	add	objptr, ##35304
1f364     32 7B 62 FC | 	wrlong	result1, objptr
1f368     44 00 00 FF 
1f36c     E8 65 86 F1 | 	sub	objptr, ##35304
1f370     32 7B 02 F6 | 	mov	result1, objptr
1f374     00 08 01 FF 
1f378     00 7A 46 F5 | 	or	result1, ##34603008
1f37c     44 00 00 FF 
1f380     EC 65 06 F1 | 	add	objptr, ##35308
1f384     32 7B 62 FC | 	wrlong	result1, objptr
1f388     44 00 00 FF 
1f38c     EC 65 86 F1 | 	sub	objptr, ##35308
1f390     32 7B 02 F6 | 	mov	result1, objptr
1f394     00 48 01 FF 
1f398     00 7A 46 F5 | 	or	result1, ##42991616
1f39c     44 00 00 FF 
1f3a0     EC 64 06 F1 | 	add	objptr, ##35052
1f3a4     32 7B 62 FC | 	wrlong	result1, objptr
1f3a8     44 00 00 FF 
1f3ac     EC 64 86 F1 | 	sub	objptr, ##35052
1f3b0     32 7B 02 F6 | 	mov	result1, objptr
1f3b4     00 50 01 FF 
1f3b8     00 7A 46 F5 | 	or	result1, ##44040192
1f3bc     44 00 00 FF 
1f3c0     1C 65 06 F1 | 	add	objptr, ##35100
1f3c4     32 7B 62 FC | 	wrlong	result1, objptr
1f3c8     44 00 00 FF 
1f3cc     1C 65 86 F1 | 	sub	objptr, ##35100
1f3d0     32 7B 02 F6 | 	mov	result1, objptr
1f3d4     00 58 01 FF 
1f3d8     00 7A 46 F5 | 	or	result1, ##45088768
1f3dc     44 00 00 FF 
1f3e0     18 65 06 F1 | 	add	objptr, ##35096
1f3e4     32 7B 62 FC | 	wrlong	result1, objptr
1f3e8     44 00 00 FF 
1f3ec     18 65 86 F1 | 	sub	objptr, ##35096
1f3f0     32 7B 02 F6 | 	mov	result1, objptr
1f3f4     00 60 01 FF 
1f3f8     00 7A 46 F5 | 	or	result1, ##46137344
1f3fc     44 00 00 FF 
1f400     BC 64 06 F1 | 	add	objptr, ##35004
1f404     32 7B 62 FC | 	wrlong	result1, objptr
1f408     44 00 00 FF 
1f40c     BC 64 86 F1 | 	sub	objptr, ##35004
1f410     32 7B 02 F6 | 	mov	result1, objptr
1f414     00 68 01 FF 
1f418     00 7A 46 F5 | 	or	result1, ##47185920
1f41c     44 00 00 FF 
1f420     C0 64 06 F1 | 	add	objptr, ##35008
1f424     32 7B 62 FC | 	wrlong	result1, objptr
1f428     44 00 00 FF 
1f42c     C0 64 86 F1 | 	sub	objptr, ##35008
1f430     32 7B 02 F6 | 	mov	result1, objptr
1f434     00 70 01 FF 
1f438     00 7A 46 F5 | 	or	result1, ##48234496
1f43c     44 00 00 FF 
1f440     28 65 06 F1 | 	add	objptr, ##35112
1f444     32 7B 62 FC | 	wrlong	result1, objptr
1f448     44 00 00 FF 
1f44c     28 65 86 F1 | 	sub	objptr, ##35112
1f450     32 7B 02 F6 | 	mov	result1, objptr
1f454     00 78 01 FF 
1f458     00 7A 46 F5 | 	or	result1, ##49283072
1f45c     44 00 00 FF 
1f460     D0 65 06 F1 | 	add	objptr, ##35280
1f464     32 7B 62 FC | 	wrlong	result1, objptr
1f468     44 00 00 FF 
1f46c     D0 65 86 F1 | 	sub	objptr, ##35280
1f470     32 7B 02 F6 | 	mov	result1, objptr
1f474     38 7A 26 F4 | 	bith	result1, #56
1f478     44 00 00 FF 
1f47c     E4 65 06 F1 | 	add	objptr, ##35300
1f480     32 7B 62 FC | 	wrlong	result1, objptr
1f484     44 00 00 FF 
1f488     E4 65 86 F1 | 	sub	objptr, ##35300
1f48c     32 7B 02 F6 | 	mov	result1, objptr
1f490     00 88 01 FF 
1f494     00 7A 46 F5 | 	or	result1, ##51380224
1f498     44 00 00 FF 
1f49c     F0 65 06 F1 | 	add	objptr, ##35312
1f4a0     32 7B 62 FC | 	wrlong	result1, objptr
1f4a4     44 00 00 FF 
1f4a8     F0 65 86 F1 | 	sub	objptr, ##35312
1f4ac     32 7B 02 F6 | 	mov	result1, objptr
1f4b0     00 90 01 FF 
1f4b4     00 7A 46 F5 | 	or	result1, ##52428800
1f4b8     44 00 00 FF 
1f4bc     F4 65 06 F1 | 	add	objptr, ##35316
1f4c0     32 7B 62 FC | 	wrlong	result1, objptr
1f4c4     44 00 00 FF 
1f4c8     F4 65 86 F1 | 	sub	objptr, ##35316
1f4cc     32 7B 02 F6 | 	mov	result1, objptr
1f4d0     00 98 01 FF 
1f4d4     00 7A 46 F5 | 	or	result1, ##53477376
1f4d8     44 00 00 FF 
1f4dc     F8 65 06 F1 | 	add	objptr, ##35320
1f4e0     32 7B 62 FC | 	wrlong	result1, objptr
1f4e4     44 00 00 FF 
1f4e8     F8 65 86 F1 | 	sub	objptr, ##35320
1f4ec     32 7B 02 F6 | 	mov	result1, objptr
1f4f0     00 A0 01 FF 
1f4f4     00 7A 46 F5 | 	or	result1, ##54525952
1f4f8     44 00 00 FF 
1f4fc     FC 65 06 F1 | 	add	objptr, ##35324
1f500     32 7B 62 FC | 	wrlong	result1, objptr
1f504     44 00 00 FF 
1f508     FC 65 86 F1 | 	sub	objptr, ##35324
1f50c     32 7B 02 F6 | 	mov	result1, objptr
1f510     00 A8 01 FF 
1f514     00 7A 46 F5 | 	or	result1, ##55574528
1f518     45 00 00 FF 
1f51c     00 64 06 F1 | 	add	objptr, ##35328
1f520     32 7B 62 FC | 	wrlong	result1, objptr
1f524     45 00 00 FF 
1f528     00 64 86 F1 | 	sub	objptr, ##35328
1f52c     32 7B 02 F6 | 	mov	result1, objptr
1f530     00 B0 01 FF 
1f534     00 7A 46 F5 | 	or	result1, ##56623104
1f538     45 00 00 FF 
1f53c     04 64 06 F1 | 	add	objptr, ##35332
1f540     32 7B 62 FC | 	wrlong	result1, objptr
1f544     45 00 00 FF 
1f548     04 64 86 F1 | 	sub	objptr, ##35332
1f54c     32 7B 02 F6 | 	mov	result1, objptr
1f550     94 7A 26 F4 | 	bith	result1, #148
1f554     44 00 00 FF 
1f558     CC 65 06 F1 | 	add	objptr, ##35276
1f55c     32 7B 62 FC | 	wrlong	result1, objptr
1f560     44 00 00 FF 
1f564     CC 65 86 F1 | 	sub	objptr, ##35276
1f568     32 7B 02 F6 | 	mov	result1, objptr
1f56c     00 B8 01 FF 
1f570     00 7A 46 F5 | 	or	result1, ##57671680
1f574     45 00 00 FF 
1f578     0C 64 06 F1 | 	add	objptr, ##35340
1f57c     32 7B 62 FC | 	wrlong	result1, objptr
1f580     45 00 00 FF 
1f584     0C 64 86 F1 | 	sub	objptr, ##35340
1f588     32 7B 02 F6 | 	mov	result1, objptr
1f58c     57 7A 26 F4 | 	bith	result1, #87
1f590     45 00 00 FF 
1f594     08 64 06 F1 | 	add	objptr, ##35336
1f598     32 7B 62 FC | 	wrlong	result1, objptr
1f59c     45 00 00 FF 
1f5a0     08 64 86 F1 | 	sub	objptr, ##35336
1f5a4     32 7B 02 F6 | 	mov	result1, objptr
1f5a8     00 C8 01 FF 
1f5ac     00 7A 46 F5 | 	or	result1, ##59768832
1f5b0     45 00 00 FF 
1f5b4     20 64 06 F1 | 	add	objptr, ##35360
1f5b8     32 7B 62 FC | 	wrlong	result1, objptr
1f5bc     45 00 00 FF 
1f5c0     20 64 86 F1 | 	sub	objptr, ##35360
1f5c4     32 7B 02 F6 | 	mov	result1, objptr
1f5c8     00 D0 01 FF 
1f5cc     00 7A 46 F5 | 	or	result1, ##60817408
1f5d0     45 00 00 FF 
1f5d4     24 64 06 F1 | 	add	objptr, ##35364
1f5d8     32 7B 62 FC | 	wrlong	result1, objptr
1f5dc     45 00 00 FF 
1f5e0     24 64 86 F1 | 	sub	objptr, ##35364
1f5e4     32 7B 02 F6 | 	mov	result1, objptr
1f5e8     00 D8 01 FF 
1f5ec     00 7A 46 F5 | 	or	result1, ##61865984
1f5f0     45 00 00 FF 
1f5f4     10 64 06 F1 | 	add	objptr, ##35344
1f5f8     32 7B 62 FC | 	wrlong	result1, objptr
1f5fc     45 00 00 FF 
1f600     10 64 86 F1 | 	sub	objptr, ##35344
1f604     32 7B 02 F6 | 	mov	result1, objptr
1f608     76 7A 26 F4 | 	bith	result1, #118
1f60c     45 00 00 FF 
1f610     14 64 06 F1 | 	add	objptr, ##35348
1f614     32 7B 62 FC | 	wrlong	result1, objptr
1f618     45 00 00 FF 
1f61c     14 64 86 F1 | 	sub	objptr, ##35348
1f620     32 7B 02 F6 | 	mov	result1, objptr
1f624     00 E8 01 FF 
1f628     00 7A 46 F5 | 	or	result1, ##63963136
1f62c     45 00 00 FF 
1f630     18 64 06 F1 | 	add	objptr, ##35352
1f634     32 7B 62 FC | 	wrlong	result1, objptr
1f638     45 00 00 FF 
1f63c     18 64 86 F1 | 	sub	objptr, ##35352
1f640     32 7B 02 F6 | 	mov	result1, objptr
1f644     95 7A 26 F4 | 	bith	result1, #149
1f648     45 00 00 FF 
1f64c     1C 64 06 F1 | 	add	objptr, ##35356
1f650     32 7B 62 FC | 	wrlong	result1, objptr
1f654     45 00 00 FF 
1f658     1C 64 86 F1 | 	sub	objptr, ##35356
1f65c     32 7B 02 F6 | 	mov	result1, objptr
1f660     B4 7A 26 F4 | 	bith	result1, #180
1f664     45 00 00 FF 
1f668     2C 64 06 F1 | 	add	objptr, ##35372
1f66c     32 7B 62 FC | 	wrlong	result1, objptr
1f670     45 00 00 FF 
1f674     2C 64 86 F1 | 	sub	objptr, ##35372
1f678     32 7B 02 F6 | 	mov	result1, objptr
1f67c     1A 7A 26 F4 | 	bith	result1, #26
1f680     45 00 00 FF 
1f684     28 64 06 F1 | 	add	objptr, ##35368
1f688     32 7B 62 FC | 	wrlong	result1, objptr
1f68c     45 00 00 FF 
1f690     28 64 86 F1 | 	sub	objptr, ##35368
1f694     32 7B 02 F6 | 	mov	result1, objptr
1f698     00 08 02 FF 
1f69c     00 7A 46 F5 | 	or	result1, ##68157440
1f6a0     45 00 00 FF 
1f6a4     38 64 06 F1 | 	add	objptr, ##35384
1f6a8     32 7B 62 FC | 	wrlong	result1, objptr
1f6ac     45 00 00 FF 
1f6b0     38 64 86 F1 | 	sub	objptr, ##35384
1f6b4     32 7B 02 F6 | 	mov	result1, objptr
1f6b8     00 10 02 FF 
1f6bc     00 7A 46 F5 | 	or	result1, ##69206016
1f6c0     45 00 00 FF 
1f6c4     34 64 06 F1 | 	add	objptr, ##35380
1f6c8     32 7B 62 FC | 	wrlong	result1, objptr
1f6cc     45 00 00 FF 
1f6d0     34 64 86 F1 | 	sub	objptr, ##35380
1f6d4     32 7B 02 F6 | 	mov	result1, objptr
1f6d8     00 18 02 FF 
1f6dc     00 7A 46 F5 | 	or	result1, ##70254592
1f6e0     45 00 00 FF 
1f6e4     30 64 06 F1 | 	add	objptr, ##35376
1f6e8     32 7B 62 FC | 	wrlong	result1, objptr
1f6ec     45 00 00 FF 
1f6f0     30 64 86 F1 | 	sub	objptr, ##35376
1f6f4     32 7B 02 F6 | 	mov	result1, objptr
1f6f8     00 20 02 FF 
1f6fc     00 7A 46 F5 | 	or	result1, ##71303168
1f700     45 00 00 FF 
1f704     3C 64 06 F1 | 	add	objptr, ##35388
1f708     32 7B 62 FC | 	wrlong	result1, objptr
1f70c     45 00 00 FF 
1f710     3C 64 86 F1 | 	sub	objptr, ##35388
1f714     32 7B 02 F6 | 	mov	result1, objptr
1f718     00 28 02 FF 
1f71c     00 7A 46 F5 | 	or	result1, ##72351744
1f720     45 00 00 FF 
1f724     40 64 06 F1 | 	add	objptr, ##35392
1f728     32 7B 62 FC | 	wrlong	result1, objptr
1f72c     45 00 00 FF 
1f730     40 64 86 F1 | 	sub	objptr, ##35392
1f734     32 7B 02 F6 | 	mov	result1, objptr
1f738     00 30 02 FF 
1f73c     00 7A 46 F5 | 	or	result1, ##73400320
1f740     44 00 00 FF 
1f744     D4 64 06 F1 | 	add	objptr, ##35028
1f748     32 7B 62 FC | 	wrlong	result1, objptr
1f74c     44 00 00 FF 
1f750     D4 64 86 F1 | 	sub	objptr, ##35028
1f754     32 7B 02 F6 | 	mov	result1, objptr
1f758     00 38 02 FF 
1f75c     00 7A 46 F5 | 	or	result1, ##74448896
1f760     45 00 00 FF 
1f764     58 64 06 F1 | 	add	objptr, ##35416
1f768     32 7B 62 FC | 	wrlong	result1, objptr
1f76c     45 00 00 FF 
1f770     58 64 86 F1 | 	sub	objptr, ##35416
1f774     32 7B 02 F6 | 	mov	result1, objptr
1f778     00 40 02 FF 
1f77c     00 7A 46 F5 | 	or	result1, ##75497472
1f780     45 00 00 FF 
1f784     68 64 06 F1 | 	add	objptr, ##35432
1f788     32 7B 62 FC | 	wrlong	result1, objptr
1f78c     45 00 00 FF 
1f790     68 64 86 F1 | 	sub	objptr, ##35432
1f794     32 7B 02 F6 | 	mov	result1, objptr
1f798     00 48 02 FF 
1f79c     00 7A 46 F5 | 	or	result1, ##76546048
1f7a0     45 00 00 FF 
1f7a4     6C 64 06 F1 | 	add	objptr, ##35436
1f7a8     32 7B 62 FC | 	wrlong	result1, objptr
1f7ac     45 00 00 FF 
1f7b0     6C 64 86 F1 | 	sub	objptr, ##35436
1f7b4     32 7B 02 F6 | 	mov	result1, objptr
1f7b8     00 50 02 FF 
1f7bc     00 7A 46 F5 | 	or	result1, ##77594624
1f7c0     45 00 00 FF 
1f7c4     64 64 06 F1 | 	add	objptr, ##35428
1f7c8     32 7B 62 FC | 	wrlong	result1, objptr
1f7cc     45 00 00 FF 
1f7d0     64 64 86 F1 | 	sub	objptr, ##35428
1f7d4     32 7B 02 F6 | 	mov	result1, objptr
1f7d8     00 58 02 FF 
1f7dc     00 7A 46 F5 | 	or	result1, ##78643200
1f7e0     45 00 00 FF 
1f7e4     5C 64 06 F1 | 	add	objptr, ##35420
1f7e8     32 7B 62 FC | 	wrlong	result1, objptr
1f7ec     45 00 00 FF 
1f7f0     5C 64 86 F1 | 	sub	objptr, ##35420
1f7f4     32 7B 02 F6 | 	mov	result1, objptr
1f7f8     00 60 02 FF 
1f7fc     00 7A 46 F5 | 	or	result1, ##79691776
1f800     45 00 00 FF 
1f804     60 64 06 F1 | 	add	objptr, ##35424
1f808     32 7B 62 FC | 	wrlong	result1, objptr
1f80c     45 00 00 FF 
1f810     60 64 86 F1 | 	sub	objptr, ##35424
1f814     32 7B 02 F6 | 	mov	result1, objptr
1f818     00 68 02 FF 
1f81c     00 7A 46 F5 | 	or	result1, ##80740352
1f820     45 00 00 FF 
1f824     70 64 06 F1 | 	add	objptr, ##35440
1f828     32 7B 62 FC | 	wrlong	result1, objptr
1f82c     45 00 00 FF 
1f830     70 64 86 F1 | 	sub	objptr, ##35440
1f834     32 7B 02 F6 | 	mov	result1, objptr
1f838     00 70 02 FF 
1f83c     00 7A 46 F5 | 	or	result1, ##81788928
1f840     45 00 00 FF 
1f844     74 64 06 F1 | 	add	objptr, ##35444
1f848     32 7B 62 FC | 	wrlong	result1, objptr
1f84c     45 00 00 FF 
1f850     74 64 86 F1 | 	sub	objptr, ##35444
1f854     32 7B 02 F6 | 	mov	result1, objptr
1f858     00 78 02 FF 
1f85c     00 7A 46 F5 | 	or	result1, ##82837504
1f860     45 00 00 FF 
1f864     78 64 06 F1 | 	add	objptr, ##35448
1f868     32 7B 62 FC | 	wrlong	result1, objptr
1f86c     45 00 00 FF 
1f870     78 64 86 F1 | 	sub	objptr, ##35448
1f874     32 7B 02 F6 | 	mov	result1, objptr
1f878     00 80 02 FF 
1f87c     00 7A 46 F5 | 	or	result1, ##83886080
1f880     45 00 00 FF 
1f884     7C 64 06 F1 | 	add	objptr, ##35452
1f888     32 7B 62 FC | 	wrlong	result1, objptr
1f88c     45 00 00 FF 
1f890     7C 64 86 F1 | 	sub	objptr, ##35452
1f894     32 7B 02 F6 | 	mov	result1, objptr
1f898     00 88 02 FF 
1f89c     00 7A 46 F5 | 	or	result1, ##84934656
1f8a0     45 00 00 FF 
1f8a4     80 64 06 F1 | 	add	objptr, ##35456
1f8a8     32 7B 62 FC | 	wrlong	result1, objptr
1f8ac     45 00 00 FF 
1f8b0     80 64 86 F1 | 	sub	objptr, ##35456
1f8b4     32 7B 02 F6 | 	mov	result1, objptr
1f8b8     00 90 02 FF 
1f8bc     00 7A 46 F5 | 	or	result1, ##85983232
1f8c0     45 00 00 FF 
1f8c4     84 64 06 F1 | 	add	objptr, ##35460
1f8c8     32 7B 62 FC | 	wrlong	result1, objptr
1f8cc     45 00 00 FF 
1f8d0     84 64 86 F1 | 	sub	objptr, ##35460
1f8d4     32 7B 02 F6 | 	mov	result1, objptr
1f8d8     00 98 02 FF 
1f8dc     00 7A 46 F5 | 	or	result1, ##87031808
1f8e0     45 00 00 FF 
1f8e4     88 64 06 F1 | 	add	objptr, ##35464
1f8e8     32 7B 62 FC | 	wrlong	result1, objptr
1f8ec     45 00 00 FF 
1f8f0     88 64 86 F1 | 	sub	objptr, ##35464
1f8f4     32 7B 02 F6 | 	mov	result1, objptr
1f8f8     00 A0 02 FF 
1f8fc     00 7A 46 F5 | 	or	result1, ##88080384
1f900     45 00 00 FF 
1f904     8C 64 06 F1 | 	add	objptr, ##35468
1f908     32 7B 62 FC | 	wrlong	result1, objptr
1f90c     45 00 00 FF 
1f910     8C 64 86 F1 | 	sub	objptr, ##35468
1f914     32 7B 02 F6 | 	mov	result1, objptr
1f918     00 A8 02 FF 
1f91c     00 7A 46 F5 | 	or	result1, ##89128960
1f920     45 00 00 FF 
1f924     98 64 06 F1 | 	add	objptr, ##35480
1f928     32 7B 62 FC | 	wrlong	result1, objptr
1f92c     45 00 00 FF 
1f930     98 64 86 F1 | 	sub	objptr, ##35480
1f934     32 7B 02 F6 | 	mov	result1, objptr
1f938     00 B0 02 FF 
1f93c     00 7A 46 F5 | 	or	result1, ##90177536
1f940     45 00 00 FF 
1f944     90 64 06 F1 | 	add	objptr, ##35472
1f948     32 7B 62 FC | 	wrlong	result1, objptr
1f94c     45 00 00 FF 
1f950     90 64 86 F1 | 	sub	objptr, ##35472
1f954     32 7B 02 F6 | 	mov	result1, objptr
1f958     00 B8 02 FF 
1f95c     00 7A 46 F5 | 	or	result1, ##91226112
1f960     45 00 00 FF 
1f964     94 64 06 F1 | 	add	objptr, ##35476
1f968     32 7B 62 FC | 	wrlong	result1, objptr
1f96c     45 00 00 FF 
1f970     94 64 86 F1 | 	sub	objptr, ##35476
1f974     32 7B 02 F6 | 	mov	result1, objptr
1f978     00 C0 02 FF 
1f97c     00 7A 46 F5 | 	or	result1, ##92274688
1f980     45 00 00 FF 
1f984     9C 64 06 F1 | 	add	objptr, ##35484
1f988     32 7B 62 FC | 	wrlong	result1, objptr
1f98c     45 00 00 FF 
1f990     9C 64 86 F1 | 	sub	objptr, ##35484
1f994     32 7B 02 F6 | 	mov	result1, objptr
1f998     00 C8 02 FF 
1f99c     00 7A 46 F5 | 	or	result1, ##93323264
1f9a0     45 00 00 FF 
1f9a4     44 64 06 F1 | 	add	objptr, ##35396
1f9a8     32 7B 62 FC | 	wrlong	result1, objptr
1f9ac     45 00 00 FF 
1f9b0     44 64 86 F1 | 	sub	objptr, ##35396
1f9b4     32 7B 02 F6 | 	mov	result1, objptr
1f9b8     00 D0 02 FF 
1f9bc     00 7A 46 F5 | 	or	result1, ##94371840
1f9c0     45 00 00 FF 
1f9c4     4C 64 06 F1 | 	add	objptr, ##35404
1f9c8     32 7B 62 FC | 	wrlong	result1, objptr
1f9cc     45 00 00 FF 
1f9d0     4C 64 86 F1 | 	sub	objptr, ##35404
1f9d4     32 7B 02 F6 | 	mov	result1, objptr
1f9d8     00 D8 02 FF 
1f9dc     00 7A 46 F5 | 	or	result1, ##95420416
1f9e0     45 00 00 FF 
1f9e4     50 64 06 F1 | 	add	objptr, ##35408
1f9e8     32 7B 62 FC | 	wrlong	result1, objptr
1f9ec     45 00 00 FF 
1f9f0     50 64 86 F1 | 	sub	objptr, ##35408
1f9f4     32 7B 02 F6 | 	mov	result1, objptr
1f9f8     00 E0 02 FF 
1f9fc     00 7A 46 F5 | 	or	result1, ##96468992
1fa00     45 00 00 FF 
1fa04     A0 64 06 F1 | 	add	objptr, ##35488
1fa08     32 7B 62 FC | 	wrlong	result1, objptr
1fa0c     45 00 00 FF 
1fa10     A0 64 86 F1 | 	sub	objptr, ##35488
1fa14     32 7B 02 F6 | 	mov	result1, objptr
1fa18     00 E8 02 FF 
1fa1c     00 7A 46 F5 | 	or	result1, ##97517568
1fa20     45 00 00 FF 
1fa24     A4 64 06 F1 | 	add	objptr, ##35492
1fa28     32 7B 62 FC | 	wrlong	result1, objptr
1fa2c     45 00 00 FF 
1fa30     A4 64 86 F1 | 	sub	objptr, ##35492
1fa34     32 7B 02 F6 | 	mov	result1, objptr
1fa38     00 F0 02 FF 
1fa3c     00 7A 46 F5 | 	or	result1, ##98566144
1fa40     45 00 00 FF 
1fa44     A8 64 06 F1 | 	add	objptr, ##35496
1fa48     32 7B 62 FC | 	wrlong	result1, objptr
1fa4c     45 00 00 FF 
1fa50     A8 64 86 F1 | 	sub	objptr, ##35496
1fa54     32 7B 02 F6 | 	mov	result1, objptr
1fa58     00 F8 02 FF 
1fa5c     00 7A 46 F5 | 	or	result1, ##99614720
1fa60     45 00 00 FF 
1fa64     54 64 06 F1 | 	add	objptr, ##35412
1fa68     32 7B 62 FC | 	wrlong	result1, objptr
1fa6c     45 00 00 FF 
1fa70     54 64 86 F1 | 	sub	objptr, ##35412
1fa74     32 7B 02 F6 | 	mov	result1, objptr
1fa78     39 7A 26 F4 | 	bith	result1, #57
1fa7c     45 00 00 FF 
1fa80     B8 64 06 F1 | 	add	objptr, ##35512
1fa84     32 7B 62 FC | 	wrlong	result1, objptr
1fa88     45 00 00 FF 
1fa8c     B8 64 86 F1 | 	sub	objptr, ##35512
1fa90     32 7B 02 F6 | 	mov	result1, objptr
1fa94     00 08 03 FF 
1fa98     00 7A 46 F5 | 	or	result1, ##101711872
1fa9c     45 00 00 FF 
1faa0     C0 64 06 F1 | 	add	objptr, ##35520
1faa4     32 7B 62 FC | 	wrlong	result1, objptr
1faa8     45 00 00 FF 
1faac     C0 64 86 F1 | 	sub	objptr, ##35520
1fab0     32 7B 02 F6 | 	mov	result1, objptr
1fab4     00 10 03 FF 
1fab8     00 7A 46 F5 | 	or	result1, ##102760448
1fabc     45 00 00 FF 
1fac0     B4 64 06 F1 | 	add	objptr, ##35508
1fac4     32 7B 62 FC | 	wrlong	result1, objptr
1fac8     45 00 00 FF 
1facc     B4 64 86 F1 | 	sub	objptr, ##35508
1fad0     32 7B 02 F6 | 	mov	result1, objptr
1fad4     00 18 03 FF 
1fad8     00 7A 46 F5 | 	or	result1, ##103809024
1fadc     45 00 00 FF 
1fae0     B0 64 06 F1 | 	add	objptr, ##35504
1fae4     32 7B 62 FC | 	wrlong	result1, objptr
1fae8     45 00 00 FF 
1faec     B0 64 86 F1 | 	sub	objptr, ##35504
1faf0     32 7B 02 F6 | 	mov	result1, objptr
1faf4     00 20 03 FF 
1faf8     00 7A 46 F5 | 	or	result1, ##104857600
1fafc     45 00 00 FF 
1fb00     AC 64 06 F1 | 	add	objptr, ##35500
1fb04     32 7B 62 FC | 	wrlong	result1, objptr
1fb08     45 00 00 FF 
1fb0c     AC 64 86 F1 | 	sub	objptr, ##35500
1fb10     32 7B 02 F6 | 	mov	result1, objptr
1fb14     00 28 03 FF 
1fb18     00 7A 46 F5 | 	or	result1, ##105906176
1fb1c     45 00 00 FF 
1fb20     BC 64 06 F1 | 	add	objptr, ##35516
1fb24     32 7B 62 FC | 	wrlong	result1, objptr
1fb28     45 00 00 FF 
1fb2c     BC 64 86 F1 | 	sub	objptr, ##35516
1fb30     32 7B 02 F6 | 	mov	result1, objptr
1fb34     00 30 03 FF 
1fb38     00 7A 46 F5 | 	or	result1, ##106954752
1fb3c     45 00 00 FF 
1fb40     C4 64 06 F1 | 	add	objptr, ##35524
1fb44     32 7B 62 FC | 	wrlong	result1, objptr
1fb48     45 00 00 FF 
1fb4c     C4 64 86 F1 | 	sub	objptr, ##35524
1fb50     32 7B 02 F6 | 	mov	result1, objptr
1fb54     00 38 03 FF 
1fb58     00 7A 46 F5 | 	or	result1, ##108003328
1fb5c     45 00 00 FF 
1fb60     C8 64 06 F1 | 	add	objptr, ##35528
1fb64     32 7B 62 FC | 	wrlong	result1, objptr
1fb68     45 00 00 FF 
1fb6c     C8 64 86 F1 | 	sub	objptr, ##35528
1fb70     32 7B 02 F6 | 	mov	result1, objptr
1fb74     00 40 03 FF 
1fb78     00 7A 46 F5 | 	or	result1, ##109051904
1fb7c     45 00 00 FF 
1fb80     CC 64 06 F1 | 	add	objptr, ##35532
1fb84     32 7B 62 FC | 	wrlong	result1, objptr
1fb88     45 00 00 FF 
1fb8c     CC 64 86 F1 | 	sub	objptr, ##35532
1fb90     32 7B 02 F6 | 	mov	result1, objptr
1fb94     00 48 03 FF 
1fb98     00 7A 46 F5 | 	or	result1, ##110100480
1fb9c     45 00 00 FF 
1fba0     D4 64 06 F1 | 	add	objptr, ##35540
1fba4     32 7B 62 FC | 	wrlong	result1, objptr
1fba8     45 00 00 FF 
1fbac     D4 64 86 F1 | 	sub	objptr, ##35540
1fbb0     32 7B 02 F6 | 	mov	result1, objptr
1fbb4     00 50 03 FF 
1fbb8     00 7A 46 F5 | 	or	result1, ##111149056
1fbbc     45 00 00 FF 
1fbc0     D8 64 06 F1 | 	add	objptr, ##35544
1fbc4     32 7B 62 FC | 	wrlong	result1, objptr
1fbc8     45 00 00 FF 
1fbcc     D8 64 86 F1 | 	sub	objptr, ##35544
1fbd0     32 7B 02 F6 | 	mov	result1, objptr
1fbd4     00 58 03 FF 
1fbd8     00 7A 46 F5 | 	or	result1, ##112197632
1fbdc     45 00 00 FF 
1fbe0     DC 64 06 F1 | 	add	objptr, ##35548
1fbe4     32 7B 62 FC | 	wrlong	result1, objptr
1fbe8     45 00 00 FF 
1fbec     DC 64 86 F1 | 	sub	objptr, ##35548
1fbf0     32 7B 02 F6 | 	mov	result1, objptr
1fbf4     00 60 03 FF 
1fbf8     00 7A 46 F5 | 	or	result1, ##113246208
1fbfc     45 00 00 FF 
1fc00     E0 64 06 F1 | 	add	objptr, ##35552
1fc04     32 7B 62 FC | 	wrlong	result1, objptr
1fc08     45 00 00 FF 
1fc0c     E0 64 86 F1 | 	sub	objptr, ##35552
1fc10     32 7B 02 F6 | 	mov	result1, objptr
1fc14     00 68 03 FF 
1fc18     00 7A 46 F5 | 	or	result1, ##114294784
1fc1c     45 00 00 FF 
1fc20     E4 64 06 F1 | 	add	objptr, ##35556
1fc24     32 7B 62 FC | 	wrlong	result1, objptr
1fc28     45 00 00 FF 
1fc2c     E4 64 86 F1 | 	sub	objptr, ##35556
1fc30     32 7B 02 F6 | 	mov	result1, objptr
1fc34     00 70 03 FF 
1fc38     00 7A 46 F5 | 	or	result1, ##115343360
1fc3c     45 00 00 FF 
1fc40     E8 64 06 F1 | 	add	objptr, ##35560
1fc44     32 7B 62 FC | 	wrlong	result1, objptr
1fc48     45 00 00 FF 
1fc4c     E8 64 86 F1 | 	sub	objptr, ##35560
1fc50     32 7B 02 F6 | 	mov	result1, objptr
1fc54     00 08 01 FF 
1fc58     00 7A 46 F5 | 	or	result1, ##34603008
1fc5c     45 00 00 FF 
1fc60     EC 64 06 F1 | 	add	objptr, ##35564
1fc64     32 7B 62 FC | 	wrlong	result1, objptr
1fc68     45 00 00 FF 
1fc6c     EC 64 86 F1 | 	sub	objptr, ##35564
1fc70     32 7B 02 F6 | 	mov	result1, objptr
1fc74     00 78 03 FF 
1fc78     00 7A 46 F5 | 	or	result1, ##116391936
1fc7c     45 00 00 FF 
1fc80     F0 64 06 F1 | 	add	objptr, ##35568
1fc84     32 7B 62 FC | 	wrlong	result1, objptr
1fc88     45 00 00 FF 
1fc8c     F0 64 86 F1 | 	sub	objptr, ##35568
1fc90     32 7B 02 F6 | 	mov	result1, objptr
1fc94     58 7A 26 F4 | 	bith	result1, #88
1fc98     45 00 00 FF 
1fc9c     D0 64 06 F1 | 	add	objptr, ##35536
1fca0     32 7B 62 FC | 	wrlong	result1, objptr
1fca4     45 00 00 FF 
1fca8     D0 64 86 F1 | 	sub	objptr, ##35536
1fcac     32 7B 02 F6 | 	mov	result1, objptr
1fcb0     00 88 03 FF 
1fcb4     00 7A 46 F5 | 	or	result1, ##118489088
1fcb8     44 00 00 FF 
1fcbc     C8 64 06 F1 | 	add	objptr, ##35016
1fcc0     32 7B 62 FC | 	wrlong	result1, objptr
1fcc4     44 00 00 FF 
1fcc8     C8 64 86 F1 | 	sub	objptr, ##35016
1fccc     32 7B 02 F6 | 	mov	result1, objptr
1fcd0     00 90 03 FF 
1fcd4     00 7A 46 F5 | 	or	result1, ##119537664
1fcd8     45 00 00 FF 
1fcdc     F4 64 06 F1 | 	add	objptr, ##35572
1fce0     32 7B 62 FC | 	wrlong	result1, objptr
1fce4     45 00 00 FF 
1fce8     F4 64 86 F1 | 	sub	objptr, ##35572
1fcec     32 7B 02 F6 | 	mov	result1, objptr
1fcf0     00 98 03 FF 
1fcf4     00 7A 46 F5 | 	or	result1, ##120586240
1fcf8     45 00 00 FF 
1fcfc     F8 64 06 F1 | 	add	objptr, ##35576
1fd00     32 7B 62 FC | 	wrlong	result1, objptr
1fd04     45 00 00 FF 
1fd08     F8 64 86 F1 | 	sub	objptr, ##35576
1fd0c     32 7B 02 F6 | 	mov	result1, objptr
1fd10     00 A0 03 FF 
1fd14     00 7A 46 F5 | 	or	result1, ##121634816
1fd18     45 00 00 FF 
1fd1c     0C 65 06 F1 | 	add	objptr, ##35596
1fd20     32 7B 62 FC | 	wrlong	result1, objptr
1fd24     45 00 00 FF 
1fd28     0C 65 86 F1 | 	sub	objptr, ##35596
1fd2c     32 7B 02 F6 | 	mov	result1, objptr
1fd30     00 A8 03 FF 
1fd34     00 7A 46 F5 | 	or	result1, ##122683392
1fd38     45 00 00 FF 
1fd3c     08 65 06 F1 | 	add	objptr, ##35592
1fd40     32 7B 62 FC | 	wrlong	result1, objptr
1fd44     45 00 00 FF 
1fd48     08 65 86 F1 | 	sub	objptr, ##35592
1fd4c     32 7B 02 F6 | 	mov	result1, objptr
1fd50     00 B0 03 FF 
1fd54     00 7A 46 F5 | 	or	result1, ##123731968
1fd58     45 00 00 FF 
1fd5c     00 65 06 F1 | 	add	objptr, ##35584
1fd60     32 7B 62 FC | 	wrlong	result1, objptr
1fd64     45 00 00 FF 
1fd68     00 65 86 F1 | 	sub	objptr, ##35584
1fd6c     32 7B 02 F6 | 	mov	result1, objptr
1fd70     00 B8 03 FF 
1fd74     00 7A 46 F5 | 	or	result1, ##124780544
1fd78     45 00 00 FF 
1fd7c     FC 64 06 F1 | 	add	objptr, ##35580
1fd80     32 7B 62 FC | 	wrlong	result1, objptr
1fd84     45 00 00 FF 
1fd88     FC 64 86 F1 | 	sub	objptr, ##35580
1fd8c     32 7B 02 F6 | 	mov	result1, objptr
1fd90     77 7A 26 F4 | 	bith	result1, #119
1fd94     45 00 00 FF 
1fd98     1C 65 06 F1 | 	add	objptr, ##35612
1fd9c     32 7B 62 FC | 	wrlong	result1, objptr
1fda0     45 00 00 FF 
1fda4     1C 65 86 F1 | 	sub	objptr, ##35612
1fda8     32 7B 02 F6 | 	mov	result1, objptr
1fdac     00 C8 03 FF 
1fdb0     00 7A 46 F5 | 	or	result1, ##126877696
1fdb4     45 00 00 FF 
1fdb8     10 65 06 F1 | 	add	objptr, ##35600
1fdbc     32 7B 62 FC | 	wrlong	result1, objptr
1fdc0     45 00 00 FF 
1fdc4     10 65 86 F1 | 	sub	objptr, ##35600
1fdc8     32 7B 02 F6 | 	mov	result1, objptr
1fdcc     00 D0 03 FF 
1fdd0     00 7A 46 F5 | 	or	result1, ##127926272
1fdd4     45 00 00 FF 
1fdd8     14 65 06 F1 | 	add	objptr, ##35604
1fddc     32 7B 62 FC | 	wrlong	result1, objptr
1fde0     45 00 00 FF 
1fde4     14 65 86 F1 | 	sub	objptr, ##35604
1fde8     32 7B 02 F6 | 	mov	result1, objptr
1fdec     00 D8 03 FF 
1fdf0     00 7A 46 F5 | 	or	result1, ##128974848
1fdf4     45 00 00 FF 
1fdf8     18 65 06 F1 | 	add	objptr, ##35608
1fdfc     32 7B 62 FC | 	wrlong	result1, objptr
1fe00     45 00 00 FF 
1fe04     18 65 86 F1 | 	sub	objptr, ##35608
1fe08     32 7B 02 F6 | 	mov	result1, objptr
1fe0c     96 7A 26 F4 | 	bith	result1, #150
1fe10     45 00 00 FF 
1fe14     20 65 06 F1 | 	add	objptr, ##35616
1fe18     32 7B 62 FC | 	wrlong	result1, objptr
1fe1c     45 00 00 FF 
1fe20     20 65 86 F1 | 	sub	objptr, ##35616
1fe24     32 7B 02 F6 | 	mov	result1, objptr
1fe28     00 E8 03 FF 
1fe2c     00 7A 46 F5 | 	or	result1, ##131072000
1fe30     45 00 00 FF 
1fe34     24 65 06 F1 | 	add	objptr, ##35620
1fe38     32 7B 62 FC | 	wrlong	result1, objptr
1fe3c     45 00 00 FF 
1fe40     24 65 86 F1 | 	sub	objptr, ##35620
1fe44     32 7B 02 F6 | 	mov	result1, objptr
1fe48     B5 7A 26 F4 | 	bith	result1, #181
1fe4c     45 00 00 FF 
1fe50     28 65 06 F1 | 	add	objptr, ##35624
1fe54     32 7B 62 FC | 	wrlong	result1, objptr
1fe58     45 00 00 FF 
1fe5c     28 65 86 F1 | 	sub	objptr, ##35624
1fe60     32 7B 02 F6 | 	mov	result1, objptr
1fe64     D4 7A 26 F4 | 	bith	result1, #212
1fe68     45 00 00 FF 
1fe6c     2C 65 06 F1 | 	add	objptr, ##35628
1fe70     32 7B 62 FC | 	wrlong	result1, objptr
1fe74     45 00 00 FF 
1fe78     2C 65 86 F1 | 	sub	objptr, ##35628
1fe7c     32 7B 02 F6 | 	mov	result1, objptr
1fe80     1B 7A 26 F4 | 	bith	result1, #27
1fe84     45 00 00 FF 
1fe88     30 65 06 F1 | 	add	objptr, ##35632
1fe8c     32 7B 62 FC | 	wrlong	result1, objptr
1fe90     45 00 00 FF 
1fe94     30 65 86 F1 | 	sub	objptr, ##35632
1fe98     32 7B 02 F6 | 	mov	result1, objptr
1fe9c     00 08 04 FF 
1fea0     00 7A 46 F5 | 	or	result1, ##135266304
1fea4     45 00 00 FF 
1fea8     34 65 06 F1 | 	add	objptr, ##35636
1feac     32 7B 62 FC | 	wrlong	result1, objptr
1feb0     45 00 00 FF 
1feb4     34 65 86 F1 | 	sub	objptr, ##35636
1feb8     32 7B 02 F6 | 	mov	result1, objptr
1febc     00 10 04 FF 
1fec0     00 7A 46 F5 | 	or	result1, ##136314880
1fec4     45 00 00 FF 
1fec8     3C 65 06 F1 | 	add	objptr, ##35644
1fecc     32 7B 62 FC | 	wrlong	result1, objptr
1fed0     45 00 00 FF 
1fed4     3C 65 86 F1 | 	sub	objptr, ##35644
1fed8     32 7B 02 F6 | 	mov	result1, objptr
1fedc     00 18 04 FF 
1fee0     00 7A 46 F5 | 	or	result1, ##137363456
1fee4     45 00 00 FF 
1fee8     40 65 06 F1 | 	add	objptr, ##35648
1feec     32 7B 62 FC | 	wrlong	result1, objptr
1fef0     45 00 00 FF 
1fef4     40 65 86 F1 | 	sub	objptr, ##35648
1fef8     32 7B 02 F6 | 	mov	result1, objptr
1fefc     00 20 04 FF 
1ff00     00 7A 46 F5 | 	or	result1, ##138412032
1ff04     45 00 00 FF 
1ff08     44 65 06 F1 | 	add	objptr, ##35652
1ff0c     32 7B 62 FC | 	wrlong	result1, objptr
1ff10     45 00 00 FF 
1ff14     44 65 86 F1 | 	sub	objptr, ##35652
1ff18     32 7B 02 F6 | 	mov	result1, objptr
1ff1c     00 28 04 FF 
1ff20     00 7A 46 F5 | 	or	result1, ##139460608
1ff24     45 00 00 FF 
1ff28     38 65 06 F1 | 	add	objptr, ##35640
1ff2c     32 7B 62 FC | 	wrlong	result1, objptr
1ff30     45 00 00 FF 
1ff34     38 65 86 F1 | 	sub	objptr, ##35640
1ff38     32 7B 02 F6 | 	mov	result1, objptr
1ff3c     00 30 04 FF 
1ff40     00 7A 46 F5 | 	or	result1, ##140509184
1ff44     45 00 00 FF 
1ff48     48 65 06 F1 | 	add	objptr, ##35656
1ff4c     32 7B 62 FC | 	wrlong	result1, objptr
1ff50     45 00 00 FF 
1ff54     48 65 86 F1 | 	sub	objptr, ##35656
1ff58     32 7B 02 F6 | 	mov	result1, objptr
1ff5c     00 38 04 FF 
1ff60     00 7A 46 F5 | 	or	result1, ##141557760
1ff64     45 00 00 FF 
1ff68     7C 65 06 F1 | 	add	objptr, ##35708
1ff6c     32 7B 62 FC | 	wrlong	result1, objptr
1ff70     45 00 00 FF 
1ff74     7C 65 86 F1 | 	sub	objptr, ##35708
1ff78     32 7B 02 F6 | 	mov	result1, objptr
1ff7c     00 40 04 FF 
1ff80     00 7A 46 F5 | 	or	result1, ##142606336
1ff84     45 00 00 FF 
1ff88     74 65 06 F1 | 	add	objptr, ##35700
1ff8c     32 7B 62 FC | 	wrlong	result1, objptr
1ff90     45 00 00 FF 
1ff94     74 65 86 F1 | 	sub	objptr, ##35700
1ff98     32 7B 02 F6 | 	mov	result1, objptr
1ff9c     00 48 04 FF 
1ffa0     00 7A 46 F5 | 	or	result1, ##143654912
1ffa4     45 00 00 FF 
1ffa8     4C 65 06 F1 | 	add	objptr, ##35660
1ffac     32 7B 62 FC | 	wrlong	result1, objptr
1ffb0     45 00 00 FF 
1ffb4     4C 65 86 F1 | 	sub	objptr, ##35660
1ffb8     32 7B 02 F6 | 	mov	result1, objptr
1ffbc     00 50 04 FF 
1ffc0     00 7A 46 F5 | 	or	result1, ##144703488
1ffc4     45 00 00 FF 
1ffc8     50 65 06 F1 | 	add	objptr, ##35664
1ffcc     32 7B 62 FC | 	wrlong	result1, objptr
1ffd0     45 00 00 FF 
1ffd4     50 65 86 F1 | 	sub	objptr, ##35664
1ffd8     32 7B 02 F6 | 	mov	result1, objptr
1ffdc     00 58 04 FF 
1ffe0     00 7A 46 F5 | 	or	result1, ##145752064
1ffe4     45 00 00 FF 
1ffe8     6C 65 06 F1 | 	add	objptr, ##35692
1ffec     32 7B 62 FC | 	wrlong	result1, objptr
1fff0     45 00 00 FF 
1fff4     6C 65 86 F1 | 	sub	objptr, ##35692
1fff8     32 7B 02 F6 | 	mov	result1, objptr
1fffc     00 60 04 FF 
20000     00 7A 46 F5 | 	or	result1, ##146800640
20004     45 00 00 FF 
20008     70 65 06 F1 | 	add	objptr, ##35696
2000c     32 7B 62 FC | 	wrlong	result1, objptr
20010     45 00 00 FF 
20014     70 65 86 F1 | 	sub	objptr, ##35696
20018     32 7B 02 F6 | 	mov	result1, objptr
2001c     00 68 04 FF 
20020     00 7A 46 F5 | 	or	result1, ##147849216
20024     45 00 00 FF 
20028     8C 65 06 F1 | 	add	objptr, ##35724
2002c     32 7B 62 FC | 	wrlong	result1, objptr
20030     45 00 00 FF 
20034     8C 65 86 F1 | 	sub	objptr, ##35724
20038     32 7B 02 F6 | 	mov	result1, objptr
2003c     00 70 04 FF 
20040     00 7A 46 F5 | 	or	result1, ##148897792
20044     45 00 00 FF 
20048     88 65 06 F1 | 	add	objptr, ##35720
2004c     32 7B 62 FC | 	wrlong	result1, objptr
20050     45 00 00 FF 
20054     88 65 86 F1 | 	sub	objptr, ##35720
20058     32 7B 02 F6 | 	mov	result1, objptr
2005c     00 78 04 FF 
20060     00 7A 46 F5 | 	or	result1, ##149946368
20064     45 00 00 FF 
20068     98 65 06 F1 | 	add	objptr, ##35736
2006c     32 7B 62 FC | 	wrlong	result1, objptr
20070     45 00 00 FF 
20074     98 65 86 F1 | 	sub	objptr, ##35736
20078     32 7B 02 F6 | 	mov	result1, objptr
2007c     00 80 04 FF 
20080     00 7A 46 F5 | 	or	result1, ##150994944
20084     45 00 00 FF 
20088     64 65 06 F1 | 	add	objptr, ##35684
2008c     32 7B 62 FC | 	wrlong	result1, objptr
20090     45 00 00 FF 
20094     64 65 86 F1 | 	sub	objptr, ##35684
20098     32 7B 02 F6 | 	mov	result1, objptr
2009c     00 88 04 FF 
200a0     00 7A 46 F5 | 	or	result1, ##152043520
200a4     45 00 00 FF 
200a8     94 65 06 F1 | 	add	objptr, ##35732
200ac     32 7B 62 FC | 	wrlong	result1, objptr
200b0     45 00 00 FF 
200b4     94 65 86 F1 | 	sub	objptr, ##35732
200b8     32 7B 02 F6 | 	mov	result1, objptr
200bc     00 90 04 FF 
200c0     00 7A 46 F5 | 	or	result1, ##153092096
200c4     45 00 00 FF 
200c8     84 65 06 F1 | 	add	objptr, ##35716
200cc     32 7B 62 FC | 	wrlong	result1, objptr
200d0     45 00 00 FF 
200d4     84 65 86 F1 | 	sub	objptr, ##35716
200d8     32 7B 02 F6 | 	mov	result1, objptr
200dc     00 98 04 FF 
200e0     00 7A 46 F5 | 	or	result1, ##154140672
200e4     44 00 00 FF 
200e8     34 65 06 F1 | 	add	objptr, ##35124
200ec     32 7B 62 FC | 	wrlong	result1, objptr
200f0     44 00 00 FF 
200f4     34 65 86 F1 | 	sub	objptr, ##35124
200f8     32 7B 02 F6 | 	mov	result1, objptr
200fc     00 A0 04 FF 
20100     00 7A 46 F5 | 	or	result1, ##155189248
20104     45 00 00 FF 
20108     54 65 06 F1 | 	add	objptr, ##35668
2010c     32 7B 62 FC | 	wrlong	result1, objptr
20110     45 00 00 FF 
20114     54 65 86 F1 | 	sub	objptr, ##35668
20118     32 7B 02 F6 | 	mov	result1, objptr
2011c     00 08 01 FF 
20120     00 7A 46 F5 | 	or	result1, ##34603008
20124     45 00 00 FF 
20128     5C 65 06 F1 | 	add	objptr, ##35676
2012c     32 7B 62 FC | 	wrlong	result1, objptr
20130     45 00 00 FF 
20134     5C 65 86 F1 | 	sub	objptr, ##35676
20138     32 7B 02 F6 | 	mov	result1, objptr
2013c     00 A8 04 FF 
20140     00 7A 46 F5 | 	or	result1, ##156237824
20144     45 00 00 FF 
20148     58 65 06 F1 | 	add	objptr, ##35672
2014c     32 7B 62 FC | 	wrlong	result1, objptr
20150     45 00 00 FF 
20154     58 65 86 F1 | 	sub	objptr, ##35672
20158     32 7B 02 F6 | 	mov	result1, objptr
2015c     00 B0 04 FF 
20160     00 7A 46 F5 | 	or	result1, ##157286400
20164     45 00 00 FF 
20168     9C 65 06 F1 | 	add	objptr, ##35740
2016c     32 7B 62 FC | 	wrlong	result1, objptr
20170     45 00 00 FF 
20174     9C 65 86 F1 | 	sub	objptr, ##35740
20178     32 7B 02 F6 | 	mov	result1, objptr
2017c     00 B8 04 FF 
20180     00 7A 46 F5 | 	or	result1, ##158334976
20184     45 00 00 FF 
20188     A0 65 06 F1 | 	add	objptr, ##35744
2018c     32 7B 62 FC | 	wrlong	result1, objptr
20190     45 00 00 FF 
20194     A0 65 86 F1 | 	sub	objptr, ##35744
20198     32 7B 02 F6 | 	mov	result1, objptr
2019c     00 C0 04 FF 
201a0     00 7A 46 F5 | 	or	result1, ##159383552
201a4     45 00 00 FF 
201a8     A4 65 06 F1 | 	add	objptr, ##35748
201ac     32 7B 62 FC | 	wrlong	result1, objptr
201b0     45 00 00 FF 
201b4     A4 65 86 F1 | 	sub	objptr, ##35748
201b8     32 7B 02 F6 | 	mov	result1, objptr
201bc     00 C8 04 FF 
201c0     00 7A 46 F5 | 	or	result1, ##160432128
201c4     45 00 00 FF 
201c8     A8 65 06 F1 | 	add	objptr, ##35752
201cc     32 7B 62 FC | 	wrlong	result1, objptr
201d0     45 00 00 FF 
201d4     A8 65 86 F1 | 	sub	objptr, ##35752
201d8     32 7B 02 F6 | 	mov	result1, objptr
201dc     00 D0 04 FF 
201e0     00 7A 46 F5 | 	or	result1, ##161480704
201e4     45 00 00 FF 
201e8     B0 65 06 F1 | 	add	objptr, ##35760
201ec     32 7B 62 FC | 	wrlong	result1, objptr
201f0     45 00 00 FF 
201f4     B0 65 86 F1 | 	sub	objptr, ##35760
201f8     32 7B 02 F6 | 	mov	result1, objptr
201fc     00 D8 04 FF 
20200     00 7A 46 F5 | 	or	result1, ##162529280
20204     45 00 00 FF 
20208     B4 65 06 F1 | 	add	objptr, ##35764
2020c     32 7B 62 FC | 	wrlong	result1, objptr
20210     45 00 00 FF 
20214     B4 65 86 F1 | 	sub	objptr, ##35764
20218     32 7B 02 F6 | 	mov	result1, objptr
2021c     00 E0 04 FF 
20220     00 7A 46 F5 | 	or	result1, ##163577856
20224     45 00 00 FF 
20228     B8 65 06 F1 | 	add	objptr, ##35768
2022c     32 7B 62 FC | 	wrlong	result1, objptr
20230     45 00 00 FF 
20234     B8 65 86 F1 | 	sub	objptr, ##35768
20238     32 7B 02 F6 | 	mov	result1, objptr
2023c     00 E8 04 FF 
20240     00 7A 46 F5 | 	or	result1, ##164626432
20244     45 00 00 FF 
20248     D8 65 06 F1 | 	add	objptr, ##35800
2024c     32 7B 62 FC | 	wrlong	result1, objptr
20250     45 00 00 FF 
20254     D8 65 86 F1 | 	sub	objptr, ##35800
20258     32 7B 02 F6 | 	mov	result1, objptr
2025c     00 F0 04 FF 
20260     00 7A 46 F5 | 	or	result1, ##165675008
20264     45 00 00 FF 
20268     D4 65 06 F1 | 	add	objptr, ##35796
2026c     32 7B 62 FC | 	wrlong	result1, objptr
20270     45 00 00 FF 
20274     D4 65 86 F1 | 	sub	objptr, ##35796
20278     32 7B 02 F6 | 	mov	result1, objptr
2027c     00 F8 04 FF 
20280     00 7A 46 F5 | 	or	result1, ##166723584
20284     45 00 00 FF 
20288     90 65 06 F1 | 	add	objptr, ##35728
2028c     32 7B 62 FC | 	wrlong	result1, objptr
20290     45 00 00 FF 
20294     90 65 86 F1 | 	sub	objptr, ##35728
20298     32 7B 02 F6 | 	mov	result1, objptr
2029c     00 00 05 FF 
202a0     00 7A 46 F5 | 	or	result1, ##167772160
202a4     45 00 00 FF 
202a8     80 65 06 F1 | 	add	objptr, ##35712
202ac     32 7B 62 FC | 	wrlong	result1, objptr
202b0     45 00 00 FF 
202b4     80 65 86 F1 | 	sub	objptr, ##35712
202b8     32 7B 02 F6 | 	mov	result1, objptr
202bc     00 08 05 FF 
202c0     00 7A 46 F5 | 	or	result1, ##168820736
202c4     45 00 00 FF 
202c8     BC 65 06 F1 | 	add	objptr, ##35772
202cc     32 7B 62 FC | 	wrlong	result1, objptr
202d0     45 00 00 FF 
202d4     BC 65 86 F1 | 	sub	objptr, ##35772
202d8     32 7B 02 F6 | 	mov	result1, objptr
202dc     00 10 05 FF 
202e0     00 7A 46 F5 | 	or	result1, ##169869312
202e4     45 00 00 FF 
202e8     C0 65 06 F1 | 	add	objptr, ##35776
202ec     32 7B 62 FC | 	wrlong	result1, objptr
202f0     45 00 00 FF 
202f4     C0 65 86 F1 | 	sub	objptr, ##35776
202f8     32 7B 02 F6 | 	mov	result1, objptr
202fc     00 18 05 FF 
20300     00 7A 46 F5 | 	or	result1, ##170917888
20304     45 00 00 FF 
20308     C4 65 06 F1 | 	add	objptr, ##35780
2030c     32 7B 62 FC | 	wrlong	result1, objptr
20310     45 00 00 FF 
20314     C4 65 86 F1 | 	sub	objptr, ##35780
20318     32 7B 02 F6 | 	mov	result1, objptr
2031c     00 20 05 FF 
20320     00 7A 46 F5 | 	or	result1, ##171966464
20324     45 00 00 FF 
20328     C8 65 06 F1 | 	add	objptr, ##35784
2032c     32 7B 62 FC | 	wrlong	result1, objptr
20330     45 00 00 FF 
20334     C8 65 86 F1 | 	sub	objptr, ##35784
20338     32 7B 02 F6 | 	mov	result1, objptr
2033c     00 28 05 FF 
20340     00 7A 46 F5 | 	or	result1, ##173015040
20344     45 00 00 FF 
20348     CC 65 06 F1 | 	add	objptr, ##35788
2034c     32 7B 62 FC | 	wrlong	result1, objptr
20350     45 00 00 FF 
20354     CC 65 86 F1 | 	sub	objptr, ##35788
20358     32 7B 02 F6 | 	mov	result1, objptr
2035c     00 30 05 FF 
20360     00 7A 46 F5 | 	or	result1, ##174063616
20364     45 00 00 FF 
20368     E4 65 06 F1 | 	add	objptr, ##35812
2036c     32 7B 62 FC | 	wrlong	result1, objptr
20370     45 00 00 FF 
20374     E4 65 86 F1 | 	sub	objptr, ##35812
20378     32 7B 02 F6 | 	mov	result1, objptr
2037c     00 38 05 FF 
20380     00 7A 46 F5 | 	or	result1, ##175112192
20384     45 00 00 FF 
20388     D0 65 06 F1 | 	add	objptr, ##35792
2038c     32 7B 62 FC | 	wrlong	result1, objptr
20390     45 00 00 FF 
20394     D0 65 86 F1 | 	sub	objptr, ##35792
20398     32 7B 02 F6 | 	mov	result1, objptr
2039c     00 40 05 FF 
203a0     00 7A 46 F5 | 	or	result1, ##176160768
203a4     45 00 00 FF 
203a8     DC 65 06 F1 | 	add	objptr, ##35804
203ac     32 7B 62 FC | 	wrlong	result1, objptr
203b0     45 00 00 FF 
203b4     DC 65 86 F1 | 	sub	objptr, ##35804
203b8     32 7B 02 F6 | 	mov	result1, objptr
203bc     00 48 05 FF 
203c0     00 7A 46 F5 | 	or	result1, ##177209344
203c4     45 00 00 FF 
203c8     E0 65 06 F1 | 	add	objptr, ##35808
203cc     32 7B 62 FC | 	wrlong	result1, objptr
203d0     45 00 00 FF 
203d4     E0 65 86 F1 | 	sub	objptr, ##35808
203d8     32 7B 02 F6 | 	mov	result1, objptr
203dc     00 50 05 FF 
203e0     00 7A 46 F5 | 	or	result1, ##178257920
203e4     45 00 00 FF 
203e8     E8 65 06 F1 | 	add	objptr, ##35816
203ec     32 7B 62 FC | 	wrlong	result1, objptr
203f0     45 00 00 FF 
203f4     E8 65 86 F1 | 	sub	objptr, ##35816
203f8     32 7B 02 F6 | 	mov	result1, objptr
203fc     00 58 05 FF 
20400     00 7A 46 F5 | 	or	result1, ##179306496
20404     45 00 00 FF 
20408     EC 65 06 F1 | 	add	objptr, ##35820
2040c     32 7B 62 FC | 	wrlong	result1, objptr
20410     45 00 00 FF 
20414     EC 65 86 F1 | 	sub	objptr, ##35820
20418     32 7B 02 F6 | 	mov	result1, objptr
2041c     00 60 05 FF 
20420     00 7A 46 F5 | 	or	result1, ##180355072
20424     45 00 00 FF 
20428     04 65 06 F1 | 	add	objptr, ##35588
2042c     32 7B 62 FC | 	wrlong	result1, objptr
20430     45 00 00 FF 
20434     04 65 86 F1 | 	sub	objptr, ##35588
20438                 | _init_commands_ret
20438     2D 00 64 FD | 	ret
2043c                 | 
2043c                 | ' 
2043c                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
2043c                 | ' 
2043c                 | ' sub init_audio
2043c                 | _init_audio
2043c     07 CA 05 F6 | 	mov	COUNT_, #7
20440     E8 00 A0 FD | 	call	#pushregs_
20444     00 C0 1F FF 
20448     00 A6 06 F6 | 	mov	local01, ##1065353216
2044c                 | ' 
2044c                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
2044c     00 A8 06 F6 | 	mov	local02, #0
20450                 | LR__2610
20450     54 AB 02 F6 | 	mov	local03, local02
20454     01 AA 66 F0 | 	shl	local03, #1
20458     58 7F 23 FF 
2045c     00 AC 06 F6 | 	mov	local04, ##1191096320
20460     54 93 52 F6 | 	abs	arg01, local02 wc
20464     1F AE C6 C9 |  if_b	decod	local05, #31
20468     00 AE 06 36 |  if_ae	mov	local05, #0
2046c     38 68 B0 FD | 	call	#__system___float_fromuns
20470     57 7B 62 F5 | 	xor	result1, local05
20474     3D 93 02 F6 | 	mov	arg01, result1
20478     87 24 20 FF 
2047c     DB 95 06 F6 | 	mov	arg02, ##1078530011
20480     28 6C B0 FD | 	call	#__system___float_mul
20484     3D 93 02 F6 | 	mov	arg01, result1
20488     00 00 22 FF 
2048c     00 94 06 F6 | 	mov	arg02, ##1140850688
20490     1C 6E B0 FD | 	call	#__system___float_div
20494     3D 93 02 F6 | 	mov	arg01, result1
20498     80 75 B0 FD | 	call	#__system____builtin_sinf
2049c     3D 95 02 F6 | 	mov	arg02, result1
204a0     56 93 02 F6 | 	mov	arg01, local04
204a4     04 6C B0 FD | 	call	#__system___float_mul
204a8     3D 93 02 F6 | 	mov	arg01, result1
204ac     01 94 06 F6 | 	mov	arg02, #1
204b0     C0 70 B0 FD | 	call	#__system___float_tointeger
204b4     3D 95 02 F6 | 	mov	arg02, result1
204b8     55 93 02 F6 | 	mov	arg01, local03
204bc     84 0D B0 FD | 	call	#_psdpoke
204c0     01 A8 06 F1 | 	add	local02, #1
204c4     02 00 00 FF 
204c8     00 A8 56 F2 | 	cmps	local02, ##1024 wc
204cc     80 FF 9F CD |  if_b	jmp	#LR__2610
204d0                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
204d0     00 A8 06 F6 | 	mov	local02, #0
204d4                 | LR__2611
204d4     54 95 02 F6 | 	mov	arg02, local02
204d8     01 94 66 F0 | 	shl	arg02, #1
204dc     0B 92 C6 F9 | 	decod	arg01, #11
204e0     4A 93 02 F1 | 	add	arg01, arg02
204e4     54 AD 02 F6 | 	mov	local04, local02
204e8     07 AC 66 F0 | 	shl	local04, #7
204ec     54 AD 82 F1 | 	sub	local04, local02
204f0     C0 FF 7F FF 
204f4     00 95 06 F6 | 	mov	arg02, ##-32512
204f8     56 95 02 F1 | 	add	arg02, local04
204fc     44 0D B0 FD | 	call	#_psdpoke
20500     09 AC C6 F9 | 	decod	local04, #9
20504     54 AD 02 F1 | 	add	local04, local02
20508     01 AC 66 F0 | 	shl	local04, #1
2050c     0B 92 C6 F9 | 	decod	arg01, #11
20510     56 93 02 F1 | 	add	arg01, local04
20514     54 AF 02 F6 | 	mov	local05, local02
20518     07 AE 66 F0 | 	shl	local05, #7
2051c     54 AF 82 F1 | 	sub	local05, local02
20520     3F 00 00 FF 
20524     00 95 06 F6 | 	mov	arg02, ##32512
20528     57 95 82 F1 | 	sub	arg02, local05
2052c     14 0D B0 FD | 	call	#_psdpoke
20530     01 A8 06 F1 | 	add	local02, #1
20534     01 00 00 FF 
20538     00 A8 56 F2 | 	cmps	local02, ##512 wc
2053c     94 FF 9F CD |  if_b	jmp	#LR__2611
20540                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
20540     00 A8 06 F6 | 	mov	local02, #0
20544                 | LR__2612
20544     54 AF 02 F6 | 	mov	local05, local02
20548     01 AE 66 F0 | 	shl	local05, #1
2054c     0C 92 C6 F9 | 	decod	arg01, #12
20550     57 93 02 F1 | 	add	arg01, local05
20554     54 AF 02 F6 | 	mov	local05, local02
20558     06 AE 66 F0 | 	shl	local05, #6
2055c     54 AF 82 F1 | 	sub	local05, local02
20560     C1 FF 7F FF 
20564     00 94 06 F6 | 	mov	arg02, ##-32256
20568     57 95 02 F1 | 	add	arg02, local05
2056c     D4 0C B0 FD | 	call	#_psdpoke
20570     01 A8 06 F1 | 	add	local02, #1
20574     02 00 00 FF 
20578     00 A8 56 F2 | 	cmps	local02, ##1024 wc
2057c     C4 FF 9F CD |  if_b	jmp	#LR__2612
20580                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
20580     00 A8 06 F6 | 	mov	local02, #0
20584                 | LR__2613
20584     54 95 02 F6 | 	mov	arg02, local02
20588     01 94 66 F0 | 	shl	arg02, #1
2058c     0C 00 00 FF 
20590     00 92 06 F6 | 	mov	arg01, ##6144
20594     4A 93 02 F1 | 	add	arg01, arg02
20598     C0 FF 7F FF 
2059c     A8 94 06 F6 | 	mov	arg02, ##-32600
205a0     A0 0C B0 FD | 	call	#_psdpoke
205a4     01 A8 06 F1 | 	add	local02, #1
205a8     80 A8 56 F2 | 	cmps	local02, #128 wc
205ac     D4 FF 9F CD |  if_b	jmp	#LR__2613
205b0     80 A8 06 F6 | 	mov	local02, #128
205b4                 | LR__2614
205b4     54 95 02 F6 | 	mov	arg02, local02
205b8     01 94 66 F0 | 	shl	arg02, #1
205bc     0C 00 00 FF 
205c0     00 92 06 F6 | 	mov	arg01, ##6144
205c4     4A 93 02 F1 | 	add	arg01, arg02
205c8     3F 00 00 FF 
205cc     58 95 06 F6 | 	mov	arg02, ##32600
205d0     70 0C B0 FD | 	call	#_psdpoke
205d4     01 A8 06 F1 | 	add	local02, #1
205d8     02 00 00 FF 
205dc     00 A8 16 F2 | 	cmp	local02, ##1024 wc
205e0     D0 FF 9F CD |  if_b	jmp	#LR__2614
205e4                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
205e4     00 A8 06 F6 | 	mov	local02, #0
205e8                 | LR__2615
205e8     54 95 02 F6 | 	mov	arg02, local02
205ec     01 94 66 F0 | 	shl	arg02, #1
205f0     0D 92 C6 F9 | 	decod	arg01, #13
205f4     4A 93 02 F1 | 	add	arg01, arg02
205f8     C0 FF 7F FF 
205fc     A8 94 06 F6 | 	mov	arg02, ##-32600
20600     40 0C B0 FD | 	call	#_psdpoke
20604     01 A8 06 F1 | 	add	local02, #1
20608     01 00 00 FF 
2060c     00 A8 56 F2 | 	cmps	local02, ##512 wc
20610     D4 FF 9F CD |  if_b	jmp	#LR__2615
20614     09 A8 C6 F9 | 	decod	local02, #9
20618                 | LR__2616
20618     54 95 02 F6 | 	mov	arg02, local02
2061c     01 94 66 F0 | 	shl	arg02, #1
20620     0D 92 C6 F9 | 	decod	arg01, #13
20624     4A 93 02 F1 | 	add	arg01, arg02
20628     3F 00 00 FF 
2062c     58 95 06 F6 | 	mov	arg02, ##32600
20630     10 0C B0 FD | 	call	#_psdpoke
20634     01 A8 06 F1 | 	add	local02, #1
20638     02 00 00 FF 
2063c     00 A8 16 F2 | 	cmp	local02, ##1024 wc
20640     D4 FF 9F CD |  if_b	jmp	#LR__2616
20644                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
20644     00 A8 06 F6 | 	mov	local02, #0
20648                 | LR__2617
20648     54 95 02 F6 | 	mov	arg02, local02
2064c     01 94 66 F0 | 	shl	arg02, #1
20650     14 00 00 FF 
20654     00 92 06 F6 | 	mov	arg01, ##10240
20658     4A 93 02 F1 | 	add	arg01, arg02
2065c     C0 FF 7F FF 
20660     A8 94 06 F6 | 	mov	arg02, ##-32600
20664     DC 0B B0 FD | 	call	#_psdpoke
20668     01 A8 06 F1 | 	add	local02, #1
2066c     00 A9 56 F2 | 	cmps	local02, #256 wc
20670     D4 FF 9F CD |  if_b	jmp	#LR__2617
20674     00 A9 06 F6 | 	mov	local02, #256
20678                 | LR__2618
20678     54 95 02 F6 | 	mov	arg02, local02
2067c     01 94 66 F0 | 	shl	arg02, #1
20680     14 00 00 FF 
20684     00 92 06 F6 | 	mov	arg01, ##10240
20688     4A 93 02 F1 | 	add	arg01, arg02
2068c     3F 00 00 FF 
20690     58 95 06 F6 | 	mov	arg02, ##32600
20694     AC 0B B0 FD | 	call	#_psdpoke
20698     01 A8 06 F1 | 	add	local02, #1
2069c     02 00 00 FF 
206a0     00 A8 16 F2 | 	cmp	local02, ##1024 wc
206a4     D0 FF 9F CD |  if_b	jmp	#LR__2618
206a8                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
206a8     18 00 00 FF 
206ac     00 A8 06 F6 | 	mov	local02, ##12288
206b0                 | LR__2619
206b0     54 93 02 F6 | 	mov	arg01, local02
206b4     00 94 06 F6 | 	mov	arg02, #0
206b8     40 0B B0 FD | 	call	#_pslpoke
206bc     04 A8 06 F1 | 	add	local02, #4
206c0     77 00 00 FF 
206c4     FD A9 56 F2 | 	cmps	local02, ##61437 wc
206c8     E4 FF 9F CD |  if_b	jmp	#LR__2619
206cc                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
206cc     00 A8 06 F6 | 	mov	local02, #0
206d0                 | LR__2620
206d0     54 95 02 F6 | 	mov	arg02, local02
206d4     01 94 66 F0 | 	shl	arg02, #1
206d8     78 00 00 FF 
206dc     00 AA 06 F6 | 	mov	local03, ##61440
206e0     4A AB 02 F1 | 	add	local03, arg02
206e4     35 93 02 F6 | 	mov	arg01, ptr__dat__
206e8     12 00 00 FF 
206ec     CA 92 06 F1 | 	add	arg01, ##9418
206f0     54 95 02 F6 | 	mov	arg02, local02
206f4     01 94 66 F0 | 	shl	arg02, #1
206f8     4A 93 02 F1 | 	add	arg01, arg02
206fc     49 95 E2 FA | 	rdword	arg02, arg01
20700     55 93 02 F6 | 	mov	arg01, local03
20704     3C 0B B0 FD | 	call	#_psdpoke
20708     01 A8 06 F1 | 	add	local02, #1
2070c     02 00 00 FF 
20710     00 A8 56 F2 | 	cmps	local02, ##1024 wc
20714     B8 FF 9F CD |  if_b	jmp	#LR__2620
20718                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
20718     00 A8 06 F6 | 	mov	local02, #0
2071c                 | LR__2621
2071c     54 95 02 F6 | 	mov	arg02, local02
20720     01 94 66 F0 | 	shl	arg02, #1
20724     7C 00 00 FF 
20728     00 AA 06 F6 | 	mov	local03, ##63488
2072c     4A AB 02 F1 | 	add	local03, arg02
20730     35 93 02 F6 | 	mov	arg01, ptr__dat__
20734     0E 00 00 FF 
20738     BA 92 06 F1 | 	add	arg01, ##7354
2073c     54 95 02 F6 | 	mov	arg02, local02
20740     01 94 66 F0 | 	shl	arg02, #1
20744     4A 93 02 F1 | 	add	arg01, arg02
20748     49 95 E2 FA | 	rdword	arg02, arg01
2074c     55 93 02 F6 | 	mov	arg01, local03
20750     F0 0A B0 FD | 	call	#_psdpoke
20754     01 A8 06 F1 | 	add	local02, #1
20758     02 00 00 FF 
2075c     00 A8 56 F2 | 	cmps	local02, ##1024 wc
20760     B8 FF 9F CD |  if_b	jmp	#LR__2621
20764                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
20764     00 A8 06 F6 | 	mov	local02, #0
20768     0D 00 00 FF 
2076c     D8 64 06 F1 | 	add	objptr, ##6872
20770     D7 18 48 FB | 	callpa	#(@LR__2623-@LR__2622)>>2,fcache_load_ptr_
20774                 | LR__2622
20774     54 AB 02 F6 | 	mov	local03, local02
20778     01 AA 66 F0 | 	shl	local03, #1
2077c     32 AB 02 F1 | 	add	local03, objptr
20780     54 B1 02 F6 | 	mov	local06, local02
20784     08 B0 66 F0 | 	shl	local06, #8
20788     7F 00 00 FF 
2078c     00 B3 06 F6 | 	mov	local07, ##65280
20790     58 B3 82 F1 | 	sub	local07, local06
20794     55 B3 52 FC | 	wrword	local07, local03
20798     01 A8 06 F1 | 	add	local02, #1
2079c     00 A9 56 F2 | 	cmps	local02, #256 wc
207a0     D0 FF 9F CD |  if_b	jmp	#LR__2622
207a4                 | LR__2623
207a4     0D 00 00 FF 
207a8     D8 64 86 F1 | 	sub	objptr, ##6872
207ac                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
207ac     00 A8 06 F6 | 	mov	local02, #0
207b0                 | LR__2624
207b0     54 AB 02 F6 | 	mov	local03, local02
207b4     01 AA 66 F0 | 	shl	local03, #1
207b8     32 AF 02 F6 | 	mov	local05, objptr
207bc     0E 00 00 FF 
207c0     D8 AE 06 F1 | 	add	local05, ##7384
207c4     57 AB 02 F1 | 	add	local03, local05
207c8     80 BF 23 FF 
207cc     00 92 06 F6 | 	mov	arg01, ##1199505408
207d0     53 95 02 F6 | 	mov	arg02, local01
207d4     D4 68 B0 FD | 	call	#__system___float_mul
207d8     3D 93 02 F6 | 	mov	arg01, result1
207dc     01 94 06 F6 | 	mov	arg02, #1
207e0     90 6D B0 FD | 	call	#__system___float_tointeger
207e4     55 7B 52 FC | 	wrword	result1, local03
207e8     53 93 02 F6 | 	mov	arg01, local01
207ec     CC BC 1F FF 
207f0     9A 95 06 F6 | 	mov	arg02, ##1064933786
207f4     B4 68 B0 FD | 	call	#__system___float_mul
207f8     3D A7 02 F6 | 	mov	local01, result1
207fc     01 A8 06 F1 | 	add	local02, #1
20800     00 A9 56 F2 | 	cmps	local02, #256 wc
20804     A8 FF 9F CD |  if_b	jmp	#LR__2624
20808     0F 00 00 FF 
2080c     D6 64 06 F1 | 	add	objptr, ##7894
20810     32 01 58 FC | 	wrword	#0, objptr
20814                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
20814     00 A8 06 F6 | 	mov	local02, #0
20818     02 64 06 F1 | 	add	objptr, #2
2081c     D7 10 48 FB | 	callpa	#(@LR__2626-@LR__2625)>>2,fcache_load_ptr_
20820                 | LR__2625
20820     54 AB 02 F6 | 	mov	local03, local02
20824     01 AA 66 F0 | 	shl	local03, #1
20828     32 AB 02 F1 | 	add	local03, objptr
2082c     7F 00 80 FF 
20830     55 01 5A FC | 	wrword	##65280, local03
20834     01 A8 06 F1 | 	add	local02, #1
20838     FF A8 56 F2 | 	cmps	local02, #255 wc
2083c     E0 FF 9F CD |  if_b	jmp	#LR__2625
20840                 | LR__2626
20840     FE 65 06 F1 | 	add	objptr, #510
20844     32 01 58 FC | 	wrword	#0, objptr
20848                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
20848     00 A8 06 F6 | 	mov	local02, #0
2084c     02 64 06 F1 | 	add	objptr, #2
20850     D7 12 48 FB | 	callpa	#(@LR__2628-@LR__2627)>>2,fcache_load_ptr_
20854                 | LR__2627
20854     54 AB 02 F6 | 	mov	local03, local02
20858     01 AA 66 F0 | 	shl	local03, #1
2085c     32 AB 02 F1 | 	add	local03, objptr
20860     54 B3 02 F6 | 	mov	local07, local02
20864     0C B2 66 F0 | 	shl	local07, #12
20868     55 B3 52 FC | 	wrword	local07, local03
2086c     01 A8 06 F1 | 	add	local02, #1
20870     10 A8 56 F2 | 	cmps	local02, #16 wc
20874     DC FF 9F CD |  if_b	jmp	#LR__2627
20878                 | LR__2628
20878                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
20878     10 A8 06 F6 | 	mov	local02, #16
2087c     D7 10 48 FB | 	callpa	#(@LR__2630-@LR__2629)>>2,fcache_load_ptr_
20880                 | LR__2629
20880     54 AB 02 F6 | 	mov	local03, local02
20884     01 AA 66 F0 | 	shl	local03, #1
20888     32 AB 02 F1 | 	add	local03, objptr
2088c     7F 00 80 FF 
20890     55 01 5A FC | 	wrword	##65280, local03
20894     01 A8 06 F1 | 	add	local02, #1
20898     F0 A8 16 F2 | 	cmp	local02, #240 wc
2089c     E0 FF 9F CD |  if_b	jmp	#LR__2629
208a0                 | LR__2630
208a0                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
208a0     F0 A8 06 F6 | 	mov	local02, #240
208a4     D7 14 48 FB | 	callpa	#(@LR__2632-@LR__2631)>>2,fcache_load_ptr_
208a8                 | LR__2631
208a8     54 AB 02 F6 | 	mov	local03, local02
208ac     01 AA 66 F0 | 	shl	local03, #1
208b0     32 AB 02 F1 | 	add	local03, objptr
208b4     FF B0 06 F6 | 	mov	local06, #255
208b8     54 B1 82 F1 | 	sub	local06, local02
208bc     0C B0 66 F0 | 	shl	local06, #12
208c0     55 B1 52 FC | 	wrword	local06, local03
208c4     01 A8 06 F1 | 	add	local02, #1
208c8     00 A9 16 F2 | 	cmp	local02, #256 wc
208cc     D8 FF 9F CD |  if_b	jmp	#LR__2631
208d0                 | LR__2632
208d0                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
208d0     00 A8 06 F6 | 	mov	local02, #0
208d4     01 00 00 FF 
208d8     00 64 06 F1 | 	add	objptr, ##512
208dc     D7 12 48 FB | 	callpa	#(@LR__2634-@LR__2633)>>2,fcache_load_ptr_
208e0                 | LR__2633
208e0     54 AB 02 F6 | 	mov	local03, local02
208e4     01 AA 66 F0 | 	shl	local03, #1
208e8     32 AB 02 F1 | 	add	local03, objptr
208ec     54 B3 02 F6 | 	mov	local07, local02
208f0     08 B2 66 F0 | 	shl	local07, #8
208f4     55 B3 52 FC | 	wrword	local07, local03
208f8     01 A8 06 F1 | 	add	local02, #1
208fc     00 A9 56 F2 | 	cmps	local02, #256 wc
20900     DC FF 9F CD |  if_b	jmp	#LR__2633
20904                 | LR__2634
20904     FE 65 06 F1 | 	add	objptr, #510
20908     32 01 58 FC | 	wrword	#0, objptr
2090c                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
2090c     00 A8 06 F6 | 	mov	local02, #0
20910     02 64 06 F1 | 	add	objptr, #2
20914     D7 16 48 FB | 	callpa	#(@LR__2636-@LR__2635)>>2,fcache_load_ptr_
20918                 | LR__2635
20918     54 AB 02 F6 | 	mov	local03, local02
2091c     01 AA 66 F0 | 	shl	local03, #1
20920     32 AB 02 F1 | 	add	local03, objptr
20924     54 B3 02 F6 | 	mov	local07, local02
20928     04 B2 66 F0 | 	shl	local07, #4
2092c     54 B3 02 F1 | 	add	local07, local02
20930     04 B2 66 F0 | 	shl	local07, #4
20934     55 B3 52 FC | 	wrword	local07, local03
20938     01 A8 06 F1 | 	add	local02, #1
2093c     F0 A8 56 F2 | 	cmps	local02, #240 wc
20940     D4 FF 9F CD |  if_b	jmp	#LR__2635
20944                 | LR__2636
20944     F0 A8 06 F6 | 	mov	local02, #240
20948     D7 14 48 FB | 	callpa	#(@LR__2638-@LR__2637)>>2,fcache_load_ptr_
2094c                 | LR__2637
2094c     54 AB 02 F6 | 	mov	local03, local02
20950     01 AA 66 F0 | 	shl	local03, #1
20954     32 AB 02 F1 | 	add	local03, objptr
20958     FF B0 06 F6 | 	mov	local06, #255
2095c     54 B1 82 F1 | 	sub	local06, local02
20960     0C B0 66 F0 | 	shl	local06, #12
20964     55 B1 52 FC | 	wrword	local06, local03
20968     01 A8 06 F1 | 	add	local02, #1
2096c     00 A9 16 F2 | 	cmp	local02, #256 wc
20970     D8 FF 9F CD |  if_b	jmp	#LR__2637
20974                 | LR__2638
20974                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
20974     00 A8 06 F6 | 	mov	local02, #0
20978     01 00 00 FF 
2097c     00 64 06 F1 | 	add	objptr, ##512
20980     D7 20 48 FB | 	callpa	#(@LR__2640-@LR__2639)>>2,fcache_load_ptr_
20984                 | LR__2639
20984     54 AB 02 F6 | 	mov	local03, local02
20988     01 AA 66 F0 | 	shl	local03, #1
2098c     32 AB 02 F1 | 	add	local03, objptr
20990     54 B3 02 F6 | 	mov	local07, local02
20994     09 B2 66 F0 | 	shl	local07, #9
20998     55 B3 52 FC | 	wrword	local07, local03
2099c     FF AA 06 F6 | 	mov	local03, #255
209a0     54 AB 82 F1 | 	sub	local03, local02
209a4     01 AA 66 F0 | 	shl	local03, #1
209a8     32 AB 02 F1 | 	add	local03, objptr
209ac     54 B3 02 F6 | 	mov	local07, local02
209b0     09 B2 66 F0 | 	shl	local07, #9
209b4     55 B3 52 FC | 	wrword	local07, local03
209b8     01 A8 06 F1 | 	add	local02, #1
209bc     80 A8 56 F2 | 	cmps	local02, #128 wc
209c0     C0 FF 9F CD |  if_b	jmp	#LR__2639
209c4                 | LR__2640
209c4                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
209c4     00 A8 06 F6 | 	mov	local02, #0
209c8     01 00 00 FF 
209cc     00 64 06 F1 | 	add	objptr, ##512
209d0     D7 12 48 FB | 	callpa	#(@LR__2642-@LR__2641)>>2,fcache_load_ptr_
209d4                 | LR__2641
209d4     54 AB 02 F6 | 	mov	local03, local02
209d8     01 AA 66 F0 | 	shl	local03, #1
209dc     32 AB 02 F1 | 	add	local03, objptr
209e0     54 B3 02 F6 | 	mov	local07, local02
209e4     0D B2 66 F0 | 	shl	local07, #13
209e8     55 B3 52 FC | 	wrword	local07, local03
209ec     01 A8 06 F1 | 	add	local02, #1
209f0     08 A8 56 F2 | 	cmps	local02, #8 wc
209f4     DC FF 9F CD |  if_b	jmp	#LR__2641
209f8                 | LR__2642
209f8                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
209f8     08 A8 06 F6 | 	mov	local02, #8
209fc     D7 1A 48 FB | 	callpa	#(@LR__2644-@LR__2643)>>2,fcache_load_ptr_
20a00                 | LR__2643
20a00     54 AB 02 F6 | 	mov	local03, local02
20a04     01 AA 66 F0 | 	shl	local03, #1
20a08     32 AB 02 F1 | 	add	local03, objptr
20a0c     54 AF 02 F6 | 	mov	local05, local02
20a10     08 AE 86 F1 | 	sub	local05, #8
20a14     0B AE 66 F0 | 	shl	local05, #11
20a18     7F 00 00 FF 
20a1c     00 B3 06 F6 | 	mov	local07, ##65280
20a20     57 B3 82 F1 | 	sub	local07, local05
20a24     55 B3 52 FC | 	wrword	local07, local03
20a28     01 A8 06 F1 | 	add	local02, #1
20a2c     18 A8 16 F2 | 	cmp	local02, #24 wc
20a30     CC FF 9F CD |  if_b	jmp	#LR__2643
20a34                 | LR__2644
20a34                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
20a34     18 A8 06 F6 | 	mov	local02, #24
20a38     D7 10 48 FB | 	callpa	#(@LR__2646-@LR__2645)>>2,fcache_load_ptr_
20a3c                 | LR__2645
20a3c     54 AB 02 F6 | 	mov	local03, local02
20a40     01 AA 66 F0 | 	shl	local03, #1
20a44     32 AB 02 F1 | 	add	local03, objptr
20a48     40 00 80 FF 
20a4c     55 01 58 FC | 	wrword	##32768, local03
20a50     01 A8 06 F1 | 	add	local02, #1
20a54     81 A8 16 F2 | 	cmp	local02, #129 wc
20a58     E0 FF 9F CD |  if_b	jmp	#LR__2645
20a5c                 | LR__2646
20a5c                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
20a5c     81 A8 06 F6 | 	mov	local02, #129
20a60     D7 14 48 FB | 	callpa	#(@LR__2648-@LR__2647)>>2,fcache_load_ptr_
20a64                 | LR__2647
20a64     54 AB 02 F6 | 	mov	local03, local02
20a68     01 AA 66 F0 | 	shl	local03, #1
20a6c     32 AB 02 F1 | 	add	local03, objptr
20a70     FF B0 06 F6 | 	mov	local06, #255
20a74     54 B1 82 F1 | 	sub	local06, local02
20a78     08 B0 66 F0 | 	shl	local06, #8
20a7c     55 B1 52 FC | 	wrword	local06, local03
20a80     01 A8 06 F1 | 	add	local02, #1
20a84     00 A9 16 F2 | 	cmp	local02, #256 wc
20a88     D8 FF 9F CD |  if_b	jmp	#LR__2647
20a8c                 | LR__2648
20a8c     3F 00 00 FF 
20a90     42 64 06 F1 | 	add	objptr, ##32322
20a94     32 01 59 FC | 	wrword	#128, objptr
20a98     53 00 00 FF 
20a9c     1A 65 86 F1 | 	sub	objptr, ##42778
20aa0                 | ' for i=0 to 7
20aa0     00 A8 06 F6 | 	mov	local02, #0
20aa4     D7 9C 48 FB | 	callpa	#(@LR__2650-@LR__2649)>>2,fcache_load_ptr_
20aa8                 | LR__2649
20aa8     54 AB 02 F6 | 	mov	local03, local02
20aac     03 AA 66 F0 | 	shl	local03, #3
20ab0     54 AB 82 F1 | 	sub	local03, local02
20ab4     02 AA 66 F0 | 	shl	local03, #2
20ab8     15 00 00 FF 
20abc     38 65 06 F1 | 	add	objptr, ##11064
20ac0     32 AB 02 F1 | 	add	local03, objptr
20ac4     00 EE A1 FF 
20ac8     55 01 68 FC | 	wrlong	##1138491392, local03
20acc     54 AB 02 F6 | 	mov	local03, local02
20ad0     03 AA 66 F0 | 	shl	local03, #3
20ad4     54 AB 82 F1 | 	sub	local03, local02
20ad8     02 AA 66 F0 | 	shl	local03, #2
20adc     32 AB 02 F1 | 	add	local03, objptr
20ae0     04 AA 06 F1 | 	add	local03, #4
20ae4     55 A9 42 FC | 	wrbyte	local02, local03
20ae8     54 AB 02 F6 | 	mov	local03, local02
20aec     03 AA 66 F0 | 	shl	local03, #3
20af0     54 AB 82 F1 | 	sub	local03, local02
20af4     02 AA 66 F0 | 	shl	local03, #2
20af8     32 AB 02 F1 | 	add	local03, objptr
20afc     05 AA 06 F1 | 	add	local03, #5
20b00     55 A9 42 FC | 	wrbyte	local02, local03
20b04     54 AB 02 F6 | 	mov	local03, local02
20b08     03 AA 66 F0 | 	shl	local03, #3
20b0c     54 AB 82 F1 | 	sub	local03, local02
20b10     02 AA 66 F0 | 	shl	local03, #2
20b14     32 AB 02 F1 | 	add	local03, objptr
20b18     06 AA 06 F1 | 	add	local03, #6
20b1c     55 01 58 FC | 	wrword	#0, local03
20b20     54 AB 02 F6 | 	mov	local03, local02
20b24     03 AA 66 F0 | 	shl	local03, #3
20b28     54 AB 82 F1 | 	sub	local03, local02
20b2c     02 AA 66 F0 | 	shl	local03, #2
20b30     32 AB 02 F1 | 	add	local03, objptr
20b34     08 AA 06 F1 | 	add	local03, #8
20b38     00 C0 9F FF 
20b3c     55 01 68 FC | 	wrlong	##1065353216, local03
20b40     54 AB 02 F6 | 	mov	local03, local02
20b44     03 AA 66 F0 | 	shl	local03, #3
20b48     54 AB 82 F1 | 	sub	local03, local02
20b4c     02 AA 66 F0 | 	shl	local03, #2
20b50     32 AB 02 F1 | 	add	local03, objptr
20b54     0C AA 06 F1 | 	add	local03, #12
20b58     00 40 A0 FF 
20b5c     55 01 68 FC | 	wrlong	##1082130432, local03
20b60     54 AB 02 F6 | 	mov	local03, local02
20b64     03 AA 66 F0 | 	shl	local03, #3
20b68     54 AB 82 F1 | 	sub	local03, local02
20b6c     02 AA 66 F0 | 	shl	local03, #2
20b70     32 AB 02 F1 | 	add	local03, objptr
20b74     10 AA 06 F1 | 	add	local03, #16
20b78     55 01 68 FC | 	wrlong	#0, local03
20b7c     54 AB 02 F6 | 	mov	local03, local02
20b80     03 AA 66 F0 | 	shl	local03, #3
20b84     54 AB 82 F1 | 	sub	local03, local02
20b88     02 AA 66 F0 | 	shl	local03, #2
20b8c     32 AB 02 F1 | 	add	local03, objptr
20b90     14 AA 06 F1 | 	add	local03, #20
20b94     55 FF 59 FC | 	wrword	#255, local03
20b98     54 AB 02 F6 | 	mov	local03, local02
20b9c     03 AA 66 F0 | 	shl	local03, #3
20ba0     54 AB 82 F1 | 	sub	local03, local02
20ba4     02 AA 66 F0 | 	shl	local03, #2
20ba8     32 AB 02 F1 | 	add	local03, objptr
20bac     16 AA 06 F1 | 	add	local03, #22
20bb0     55 01 58 FC | 	wrword	#0, local03
20bb4     54 AB 02 F6 | 	mov	local03, local02
20bb8     01 AA 66 F0 | 	shl	local03, #1
20bbc     3D 00 00 FF 
20bc0     D4 65 06 F1 | 	add	objptr, ##31700
20bc4     32 AB 02 F1 | 	add	local03, objptr
20bc8     55 FF 59 FC | 	wrword	#255, local03
20bcc     01 A8 06 F1 | 	add	local02, #1
20bd0     08 A8 56 F2 | 	cmps	local02, #8 wc
20bd4     53 00 00 FF 
20bd8     0C 65 86 F1 | 	sub	objptr, ##42764
20bdc     C8 FE 9F CD |  if_b	jmp	#LR__2649
20be0                 | LR__2650
20be0     00 6E 20 FF 
20be4     00 B2 06 F6 | 	mov	local07, ##1088159744
20be8                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
20be8     03 B0 06 F6 | 	mov	local06, #3
20bec                 | LR__2651
20bec     59 93 02 F6 | 	mov	arg01, local07
20bf0     CE C3 1F FF 
20bf4     7D 94 06 F6 | 	mov	arg02, ##1065852029
20bf8     B0 64 B0 FD | 	call	#__system___float_mul
20bfc     3D B3 02 F6 | 	mov	local07, result1
20c00     FA B1 6E FB | 	djnz	local06, #LR__2651
20c04     00 A8 06 F6 | 	mov	local02, #0
20c08                 | LR__2652
20c08     54 AD 02 F6 | 	mov	local04, local02
20c0c     02 AC 66 F0 | 	shl	local04, #2
20c10     32 AB 02 F6 | 	mov	local03, objptr
20c14     15 00 00 FF 
20c18     D8 AA 06 F1 | 	add	local03, ##10968
20c1c     55 AD 02 F1 | 	add	local04, local03
20c20     56 B3 62 FC | 	wrlong	local07, local04
20c24     59 93 02 F6 | 	mov	arg01, local07
20c28     CE C3 1F FF 
20c2c     7D 94 06 F6 | 	mov	arg02, ##1065852029
20c30     78 64 B0 FD | 	call	#__system___float_mul
20c34     3D B3 02 F6 | 	mov	local07, result1
20c38     01 A8 06 F1 | 	add	local02, #1
20c3c     0C A8 56 F2 | 	cmps	local02, #12 wc
20c40     C4 FF 9F CD |  if_b	jmp	#LR__2652
20c44     15 00 00 FF 
20c48     08 65 06 F1 | 	add	objptr, ##11016
20c4c     32 51 6B FC | 	wrlong	#424, objptr
20c50     04 64 06 F1 | 	add	objptr, #4
20c54     32 21 6B FC | 	wrlong	#400, objptr
20c58     04 64 06 F1 | 	add	objptr, #4
20c5c     32 F3 6A FC | 	wrlong	#377, objptr
20c60     04 64 06 F1 | 	add	objptr, #4
20c64     32 C9 6A FC | 	wrlong	#356, objptr
20c68     04 64 06 F1 | 	add	objptr, #4
20c6c     32 A1 6A FC | 	wrlong	#336, objptr
20c70     04 64 06 F1 | 	add	objptr, #4
20c74     32 7B 6A FC | 	wrlong	#317, objptr
20c78     04 64 06 F1 | 	add	objptr, #4
20c7c     32 59 6A FC | 	wrlong	#300, objptr
20c80     04 64 06 F1 | 	add	objptr, #4
20c84     32 37 6A FC | 	wrlong	#283, objptr
20c88     04 64 06 F1 | 	add	objptr, #4
20c8c     32 17 6A FC | 	wrlong	#267, objptr
20c90     04 64 06 F1 | 	add	objptr, #4
20c94     32 F9 69 FC | 	wrlong	#252, objptr
20c98     04 64 06 F1 | 	add	objptr, #4
20c9c     32 DD 69 FC | 	wrlong	#238, objptr
20ca0     04 64 06 F1 | 	add	objptr, #4
20ca4     32 C1 69 FC | 	wrlong	#224, objptr
20ca8     3D 00 00 FF 
20cac     E6 65 06 F1 | 	add	objptr, ##31718
20cb0     32 01 59 FC | 	wrword	#128, objptr
20cb4     02 64 86 F1 | 	sub	objptr, #2
20cb8     32 01 59 FC | 	wrword	#128, objptr
20cbc     53 00 00 FF 
20cc0     18 65 86 F1 | 	sub	objptr, ##42776
20cc4     E7 F0 03 F6 | 	mov	ptra, fp
20cc8     F2 00 A0 FD | 	call	#popregs_
20ccc                 | _init_audio_ret
20ccc     2D 00 64 FD | 	ret
20cd0                 | 
20cd0                 | ' 
20cd0                 | ' '------------------- Error messages
20cd0                 | ' 
20cd0                 | ' sub init_error_strings
20cd0                 | _init_error_strings
20cd0     98 01 00 FF 
20cd4     89 81 06 F6 | 	mov	_var01, ##@LR__6102
20cd8     46 00 00 FF 
20cdc     9C 64 06 F1 | 	add	objptr, ##35996
20ce0     32 81 62 FC | 	wrlong	_var01, objptr
20ce4     98 01 00 FF 
20ce8     8A 81 06 F6 | 	mov	_var01, ##@LR__6103
20cec     04 64 06 F1 | 	add	objptr, #4
20cf0     32 81 62 FC | 	wrlong	_var01, objptr
20cf4     98 01 00 FF 
20cf8     AE 81 06 F6 | 	mov	_var01, ##@LR__6104
20cfc     04 64 06 F1 | 	add	objptr, #4
20d00     32 81 62 FC | 	wrlong	_var01, objptr
20d04     98 01 00 FF 
20d08     CE 81 06 F6 | 	mov	_var01, ##@LR__6105
20d0c     04 64 06 F1 | 	add	objptr, #4
20d10     32 81 62 FC | 	wrlong	_var01, objptr
20d14     98 01 00 FF 
20d18     E7 81 06 F6 | 	mov	_var01, ##@LR__6106
20d1c     04 64 06 F1 | 	add	objptr, #4
20d20     32 81 62 FC | 	wrlong	_var01, objptr
20d24     99 01 00 FF 
20d28     02 80 06 F6 | 	mov	_var01, ##@LR__6107
20d2c     04 64 06 F1 | 	add	objptr, #4
20d30     32 81 62 FC | 	wrlong	_var01, objptr
20d34     99 01 00 FF 
20d38     23 80 06 F6 | 	mov	_var01, ##@LR__6108
20d3c     04 64 06 F1 | 	add	objptr, #4
20d40     32 81 62 FC | 	wrlong	_var01, objptr
20d44     99 01 00 FF 
20d48     50 80 06 F6 | 	mov	_var01, ##@LR__6109
20d4c     04 64 06 F1 | 	add	objptr, #4
20d50     32 81 62 FC | 	wrlong	_var01, objptr
20d54     99 01 00 FF 
20d58     7A 80 06 F6 | 	mov	_var01, ##@LR__6110
20d5c     04 64 06 F1 | 	add	objptr, #4
20d60     32 81 62 FC | 	wrlong	_var01, objptr
20d64     99 01 00 FF 
20d68     92 80 06 F6 | 	mov	_var01, ##@LR__6111
20d6c     04 64 06 F1 | 	add	objptr, #4
20d70     32 81 62 FC | 	wrlong	_var01, objptr
20d74     99 01 00 FF 
20d78     B2 80 06 F6 | 	mov	_var01, ##@LR__6112
20d7c     04 64 06 F1 | 	add	objptr, #4
20d80     32 81 62 FC | 	wrlong	_var01, objptr
20d84     99 01 00 FF 
20d88     C8 80 06 F6 | 	mov	_var01, ##@LR__6113
20d8c     04 64 06 F1 | 	add	objptr, #4
20d90     32 81 62 FC | 	wrlong	_var01, objptr
20d94     99 01 00 FF 
20d98     E5 80 06 F6 | 	mov	_var01, ##@LR__6114
20d9c     04 64 06 F1 | 	add	objptr, #4
20da0     32 81 62 FC | 	wrlong	_var01, objptr
20da4     99 01 00 FF 
20da8     08 81 06 F6 | 	mov	_var01, ##@LR__6115
20dac     04 64 06 F1 | 	add	objptr, #4
20db0     32 81 62 FC | 	wrlong	_var01, objptr
20db4     99 01 00 FF 
20db8     2E 81 06 F6 | 	mov	_var01, ##@LR__6116
20dbc     04 64 06 F1 | 	add	objptr, #4
20dc0     32 81 62 FC | 	wrlong	_var01, objptr
20dc4     99 01 00 FF 
20dc8     49 81 06 F6 | 	mov	_var01, ##@LR__6117
20dcc     04 64 06 F1 | 	add	objptr, #4
20dd0     32 81 62 FC | 	wrlong	_var01, objptr
20dd4     99 01 00 FF 
20dd8     59 81 06 F6 | 	mov	_var01, ##@LR__6118
20ddc     04 64 06 F1 | 	add	objptr, #4
20de0     32 81 62 FC | 	wrlong	_var01, objptr
20de4     99 01 00 FF 
20de8     68 81 06 F6 | 	mov	_var01, ##@LR__6119
20dec     04 64 06 F1 | 	add	objptr, #4
20df0     32 81 62 FC | 	wrlong	_var01, objptr
20df4     99 01 00 FF 
20df8     82 81 06 F6 | 	mov	_var01, ##@LR__6120
20dfc     04 64 06 F1 | 	add	objptr, #4
20e00     32 81 62 FC | 	wrlong	_var01, objptr
20e04     99 01 00 FF 
20e08     93 81 06 F6 | 	mov	_var01, ##@LR__6121
20e0c     04 64 06 F1 | 	add	objptr, #4
20e10     32 81 62 FC | 	wrlong	_var01, objptr
20e14     99 01 00 FF 
20e18     AA 81 06 F6 | 	mov	_var01, ##@LR__6122
20e1c     04 64 06 F1 | 	add	objptr, #4
20e20     32 81 62 FC | 	wrlong	_var01, objptr
20e24     99 01 00 FF 
20e28     BD 81 06 F6 | 	mov	_var01, ##@LR__6123
20e2c     04 64 06 F1 | 	add	objptr, #4
20e30     32 81 62 FC | 	wrlong	_var01, objptr
20e34     99 01 00 FF 
20e38     CC 81 06 F6 | 	mov	_var01, ##@LR__6124
20e3c     04 64 06 F1 | 	add	objptr, #4
20e40     32 81 62 FC | 	wrlong	_var01, objptr
20e44     99 01 00 FF 
20e48     E8 81 06 F6 | 	mov	_var01, ##@LR__6125
20e4c     04 64 06 F1 | 	add	objptr, #4
20e50     32 81 62 FC | 	wrlong	_var01, objptr
20e54     99 01 00 FF 
20e58     F8 81 06 F6 | 	mov	_var01, ##@LR__6126
20e5c     04 64 06 F1 | 	add	objptr, #4
20e60     32 81 62 FC | 	wrlong	_var01, objptr
20e64     9A 01 00 FF 
20e68     08 80 06 F6 | 	mov	_var01, ##@LR__6127
20e6c     04 64 06 F1 | 	add	objptr, #4
20e70     32 81 62 FC | 	wrlong	_var01, objptr
20e74     9A 01 00 FF 
20e78     3B 80 06 F6 | 	mov	_var01, ##@LR__6128
20e7c     04 64 06 F1 | 	add	objptr, #4
20e80     32 81 62 FC | 	wrlong	_var01, objptr
20e84     9A 01 00 FF 
20e88     56 80 06 F6 | 	mov	_var01, ##@LR__6129
20e8c     04 64 06 F1 | 	add	objptr, #4
20e90     32 81 62 FC | 	wrlong	_var01, objptr
20e94     9A 01 00 FF 
20e98     6B 80 06 F6 | 	mov	_var01, ##@LR__6130
20e9c     04 64 06 F1 | 	add	objptr, #4
20ea0     32 81 62 FC | 	wrlong	_var01, objptr
20ea4     9A 01 00 FF 
20ea8     77 80 06 F6 | 	mov	_var01, ##@LR__6131
20eac     04 64 06 F1 | 	add	objptr, #4
20eb0     32 81 62 FC | 	wrlong	_var01, objptr
20eb4     9A 01 00 FF 
20eb8     88 80 06 F6 | 	mov	_var01, ##@LR__6132
20ebc     04 64 06 F1 | 	add	objptr, #4
20ec0     32 81 62 FC | 	wrlong	_var01, objptr
20ec4     9A 01 00 FF 
20ec8     98 80 06 F6 | 	mov	_var01, ##@LR__6133
20ecc     04 64 06 F1 | 	add	objptr, #4
20ed0     32 81 62 FC | 	wrlong	_var01, objptr
20ed4     9A 01 00 FF 
20ed8     B3 80 06 F6 | 	mov	_var01, ##@LR__6134
20edc     04 64 06 F1 | 	add	objptr, #4
20ee0     32 81 62 FC | 	wrlong	_var01, objptr
20ee4     9A 01 00 FF 
20ee8     C3 80 06 F6 | 	mov	_var01, ##@LR__6135
20eec     04 64 06 F1 | 	add	objptr, #4
20ef0     32 81 62 FC | 	wrlong	_var01, objptr
20ef4     9A 01 00 FF 
20ef8     D1 80 06 F6 | 	mov	_var01, ##@LR__6136
20efc     04 64 06 F1 | 	add	objptr, #4
20f00     32 81 62 FC | 	wrlong	_var01, objptr
20f04     9A 01 00 FF 
20f08     EB 80 06 F6 | 	mov	_var01, ##@LR__6137
20f0c     04 64 06 F1 | 	add	objptr, #4
20f10     32 81 62 FC | 	wrlong	_var01, objptr
20f14     9A 01 00 FF 
20f18     1E 81 06 F6 | 	mov	_var01, ##@LR__6138
20f1c     04 64 06 F1 | 	add	objptr, #4
20f20     32 81 62 FC | 	wrlong	_var01, objptr
20f24     9A 01 00 FF 
20f28     36 81 06 F6 | 	mov	_var01, ##@LR__6139
20f2c     04 64 06 F1 | 	add	objptr, #4
20f30     32 81 62 FC | 	wrlong	_var01, objptr
20f34     9A 01 00 FF 
20f38     51 81 06 F6 | 	mov	_var01, ##@LR__6140
20f3c     04 64 06 F1 | 	add	objptr, #4
20f40     32 81 62 FC | 	wrlong	_var01, objptr
20f44     9A 01 00 FF 
20f48     6E 81 06 F6 | 	mov	_var01, ##@LR__6141
20f4c     04 64 06 F1 | 	add	objptr, #4
20f50     32 81 62 FC | 	wrlong	_var01, objptr
20f54     9A 01 00 FF 
20f58     87 81 06 F6 | 	mov	_var01, ##@LR__6142
20f5c     04 64 06 F1 | 	add	objptr, #4
20f60     32 81 62 FC | 	wrlong	_var01, objptr
20f64     9A 01 00 FF 
20f68     A6 81 06 F6 | 	mov	_var01, ##@LR__6143
20f6c     04 64 06 F1 | 	add	objptr, #4
20f70     32 81 62 FC | 	wrlong	_var01, objptr
20f74     9A 01 00 FF 
20f78     B4 81 06 F6 | 	mov	_var01, ##@LR__6144
20f7c     04 64 06 F1 | 	add	objptr, #4
20f80     32 81 62 FC | 	wrlong	_var01, objptr
20f84     9A 01 00 FF 
20f88     E1 81 06 F6 | 	mov	_var01, ##@LR__6145
20f8c     04 64 06 F1 | 	add	objptr, #4
20f90     32 81 62 FC | 	wrlong	_var01, objptr
20f94     9A 01 00 FF 
20f98     EE 81 06 F6 | 	mov	_var01, ##@LR__6146
20f9c     04 64 06 F1 | 	add	objptr, #4
20fa0     32 81 62 FC | 	wrlong	_var01, objptr
20fa4     9B 01 00 FF 
20fa8     02 80 06 F6 | 	mov	_var01, ##@LR__6147
20fac     04 64 06 F1 | 	add	objptr, #4
20fb0     32 81 62 FC | 	wrlong	_var01, objptr
20fb4     9B 01 00 FF 
20fb8     26 80 06 F6 | 	mov	_var01, ##@LR__6148
20fbc     04 64 06 F1 | 	add	objptr, #4
20fc0     32 81 62 FC | 	wrlong	_var01, objptr
20fc4     9B 01 00 FF 
20fc8     3D 80 06 F6 | 	mov	_var01, ##@LR__6149
20fcc     04 64 06 F1 | 	add	objptr, #4
20fd0     32 81 62 FC | 	wrlong	_var01, objptr
20fd4     9B 01 00 FF 
20fd8     50 80 06 F6 | 	mov	_var01, ##@LR__6150
20fdc     04 64 06 F1 | 	add	objptr, #4
20fe0     32 81 62 FC | 	wrlong	_var01, objptr
20fe4     9B 01 00 FF 
20fe8     67 80 06 F6 | 	mov	_var01, ##@LR__6151
20fec     04 64 06 F1 | 	add	objptr, #4
20ff0     32 81 62 FC | 	wrlong	_var01, objptr
20ff4     9B 01 00 FF 
20ff8     80 80 06 F6 | 	mov	_var01, ##@LR__6152
20ffc     04 64 06 F1 | 	add	objptr, #4
21000     32 81 62 FC | 	wrlong	_var01, objptr
21004     9B 01 00 FF 
21008     A2 80 06 F6 | 	mov	_var01, ##@LR__6153
2100c     04 64 06 F1 | 	add	objptr, #4
21010     32 81 62 FC | 	wrlong	_var01, objptr
21014     9B 01 00 FF 
21018     B5 80 06 F6 | 	mov	_var01, ##@LR__6154
2101c     04 64 06 F1 | 	add	objptr, #4
21020     32 81 62 FC | 	wrlong	_var01, objptr
21024     9B 01 00 FF 
21028     C5 80 06 F6 | 	mov	_var01, ##@LR__6155
2102c     04 64 06 F1 | 	add	objptr, #4
21030     32 81 62 FC | 	wrlong	_var01, objptr
21034     9B 01 00 FF 
21038     DD 80 06 F6 | 	mov	_var01, ##@LR__6156
2103c     04 64 06 F1 | 	add	objptr, #4
21040     32 81 62 FC | 	wrlong	_var01, objptr
21044     9B 01 00 FF 
21048     F4 80 06 F6 | 	mov	_var01, ##@LR__6157
2104c     04 64 06 F1 | 	add	objptr, #4
21050     32 81 62 FC | 	wrlong	_var01, objptr
21054     46 00 00 FF 
21058     78 65 86 F1 | 	sub	objptr, ##36216
2105c                 | _init_error_strings_ret
2105c     2D 00 64 FD | 	ret
21060                 | 
21060                 | '         
21060                 | ' sub printerror(err as integer, linenum=0 as integer)
21060                 | _printerror
21060     02 CA 05 F6 | 	mov	COUNT_, #2
21064     E8 00 A0 FD | 	call	#pushregs_
21068     49 A7 02 F6 | 	mov	local01, arg01
2106c     4A A9 02 F6 | 	mov	local02, arg02
21070     9B 01 00 FF 
21074     01 93 06 F6 | 	mov	arg01, ##@LR__6158
21078     44 21 B0 FD | 	call	#_hg010b_spin2_write
2107c     53 93 02 F6 | 	mov	arg01, local01
21080     80 26 B0 FD | 	call	#_hg010b_spin2_inttostr
21084     3D 93 02 F6 | 	mov	arg01, result1
21088     34 21 B0 FD | 	call	#_hg010b_spin2_write
2108c     9B 01 00 FF 
21090     08 93 06 F6 | 	mov	arg01, ##@LR__6159
21094     28 21 B0 FD | 	call	#_hg010b_spin2_write
21098     02 A6 66 F0 | 	shl	local01, #2
2109c     32 95 02 F6 | 	mov	arg02, objptr
210a0     46 00 00 FF 
210a4     9C 94 06 F1 | 	add	arg02, ##35996
210a8     4A A7 02 F1 | 	add	local01, arg02
210ac     53 93 02 FB | 	rdlong	arg01, local01
210b0     0C 21 B0 FD | 	call	#_hg010b_spin2_write
210b4                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
210b4                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
210b4     01 A8 56 F2 | 	cmps	local02, #1 wc
210b8     24 00 90 CD |  if_b	jmp	#LR__2660
210bc     9B 01 00 FF 
210c0     0C 93 06 F6 | 	mov	arg01, ##@LR__6160
210c4     F8 20 B0 FD | 	call	#_hg010b_spin2_write
210c8     54 93 02 F6 | 	mov	arg01, local02
210cc     34 26 B0 FD | 	call	#_hg010b_spin2_inttostr
210d0     3D 93 02 F6 | 	mov	arg01, result1
210d4                 | ' 
210d4                 | ' write(text)
210d4     E8 20 B0 FD | 	call	#_hg010b_spin2_write
210d8                 | ' crlf
210d8     84 25 B0 FD | 	call	#_hg010b_spin2_crlf
210dc     10 00 90 FD | 	jmp	#LR__2661
210e0                 | LR__2660
210e0     9B 01 00 FF 
210e4     16 93 06 F6 | 	mov	arg01, ##@LR__6161
210e8                 | ' 
210e8                 | ' write(text)
210e8     D4 20 B0 FD | 	call	#_hg010b_spin2_write
210ec                 | ' crlf
210ec     70 25 B0 FD | 	call	#_hg010b_spin2_crlf
210f0                 | LR__2661
210f0     E7 F0 03 F6 | 	mov	ptra, fp
210f4     F2 00 A0 FD | 	call	#popregs_
210f8                 | _printerror_ret
210f8     2D 00 64 FD | 	ret
210fc                 | 
210fc                 | ' 
210fc                 | ' '' ------------------------------- Hardware start/stop/initialization 
210fc                 | ' 
210fc                 | ' sub startpsram
210fc                 | _startpsram
210fc     00 92 06 F6 | 	mov	arg01, #0
21100     0A 94 C6 F9 | 	decod	arg02, #10
21104     0B 96 06 F6 | 	mov	arg03, #11
21108     07 98 06 F6 | 	mov	arg04, #7
2110c     0B 00 00 FF 
21110     CC 64 06 F1 | 	add	objptr, ##5836
21114     70 2A B0 FD | 	call	#_psram_spin2_startx
21118     2C 00 00 FF 
2111c     5C 65 06 F1 | 	add	objptr, ##22876
21120     32 7B 62 FC | 	wrlong	result1, objptr
21124                 | '     return $7FF00 + cog*12
21124     0C 64 06 F1 | 	add	objptr, #12
21128     FF 03 80 FF 
2112c     32 01 6A FC | 	wrlong	##524032, objptr
21130     38 00 00 FF 
21134     34 64 86 F1 | 	sub	objptr, ##28724
21138                 | _startpsram_ret
21138     2D 00 64 FD | 	ret
2113c                 | 
2113c                 | ' 
2113c                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
2113c                 | _startvideo
2113c     01 CA 05 F6 | 	mov	COUNT_, #1
21140     E8 00 A0 FD | 	call	#pushregs_
21144     38 00 00 FF 
21148     34 64 06 F1 | 	add	objptr, ##28724
2114c     32 99 02 FB | 	rdlong	arg04, objptr
21150     38 00 00 FF 
21154     34 64 86 F1 | 	sub	objptr, ##28724
21158     4A 93 02 F6 | 	mov	arg01, arg02
2115c     4C 95 02 F6 | 	mov	arg02, arg04
21160     DC 07 B0 FD | 	call	#_hg010b_spin2_start
21164     38 00 00 FF 
21168     20 64 06 F1 | 	add	objptr, ##28704
2116c     32 7B 62 FC | 	wrlong	result1, objptr
21170                 | ' 
21170                 | ' videocog=v.start(pin,mbox)
21170                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
21170     00 A6 06 F6 | 	mov	local01, #0
21174     2C 00 00 FF 
21178     54 65 86 F1 | 	sub	objptr, ##22868
2117c                 | LR__2670
2117c     53 93 02 F6 | 	mov	arg01, local01
21180     00 28 00 FF 
21184     00 94 06 F6 | 	mov	arg02, ##5242880
21188     5C 2E B0 FD | 	call	#_psram_spin2_setQos
2118c     01 A6 06 F1 | 	add	local01, #1
21190     08 A6 56 F2 | 	cmps	local01, #8 wc
21194     E4 FF 9F CD |  if_b	jmp	#LR__2670
21198     2C 00 00 FF 
2119c     54 65 06 F1 | 	add	objptr, ##22868
211a0     32 93 02 FB | 	rdlong	arg01, objptr
211a4     7A 00 02 FF 
211a8     00 94 06 F6 | 	mov	arg02, ##67171328
211ac     2C 00 00 FF 
211b0     54 65 86 F1 | 	sub	objptr, ##22868
211b4     30 2E B0 FD | 	call	#_psram_spin2_setQos
211b8     0B 00 00 FF 
211bc     CC 64 86 F1 | 	sub	objptr, ##5836
211c0                 | ' psram.setQoS(videocog, $0400f400) 
211c0                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
211c0     32 95 02 F6 | 	mov	arg02, objptr
211c4     00 68 05 FF 
211c8     00 94 46 F5 | 	or	arg02, ##181403648
211cc     00 96 06 F6 | 	mov	arg03, #0
211d0     00 98 06 F6 | 	mov	arg04, #0
211d4     00 92 06 F6 | 	mov	arg01, #0
211d8     50 42 B0 FD | 	call	#__system___basic_open
211dc                 | ' return videocog
211dc     38 00 00 FF 
211e0     20 64 06 F1 | 	add	objptr, ##28704
211e4     32 7B 02 FB | 	rdlong	result1, objptr
211e8     38 00 00 FF 
211ec     20 64 86 F1 | 	sub	objptr, ##28704
211f0     E7 F0 03 F6 | 	mov	ptra, fp
211f4     F2 00 A0 FD | 	call	#popregs_
211f8                 | _startvideo_ret
211f8     2D 00 64 FD | 	ret
211fc                 | 
211fc                 | ' 
211fc                 | ' 
211fc                 | ' 
211fc                 | ' '' ------------------------------- Convenient psram peek/poke
211fc                 | ' 
211fc                 | ' sub pslpoke(addr as ulong,value as ulong)
211fc                 | _pslpoke
211fc     00 CA 05 F6 | 	mov	COUNT_, #0
21200     E8 00 A0 FD | 	call	#pushregs_
21204     08 F0 07 F1 | 	add	ptra, #8
21208     49 97 02 F6 | 	mov	arg03, arg01
2120c     04 CE 05 F1 | 	add	fp, #4
21210     E7 94 62 FC | 	wrlong	arg02, fp
21214     E7 92 02 F6 | 	mov	arg01, fp
21218     04 CE 85 F1 | 	sub	fp, #4
2121c     4B 95 02 F6 | 	mov	arg02, arg03
21220     04 96 06 F6 | 	mov	arg03, #4
21224     0B 00 00 FF 
21228     CC 64 06 F1 | 	add	objptr, ##5836
2122c     28 2C B0 FD | 	call	#_psram_spin2_write
21230     0B 00 00 FF 
21234     CC 64 86 F1 | 	sub	objptr, ##5836
21238     E7 F0 03 F6 | 	mov	ptra, fp
2123c     F2 00 A0 FD | 	call	#popregs_
21240                 | _pslpoke_ret
21240     2D 00 64 FD | 	ret
21244                 | 
21244                 | ' 
21244                 | ' sub psdpoke(addr as ulong,value as ulong)
21244                 | _psdpoke
21244     00 CA 05 F6 | 	mov	COUNT_, #0
21248     E8 00 A0 FD | 	call	#pushregs_
2124c     08 F0 07 F1 | 	add	ptra, #8
21250     49 97 02 F6 | 	mov	arg03, arg01
21254     04 CE 05 F1 | 	add	fp, #4
21258     E7 94 62 FC | 	wrlong	arg02, fp
2125c     E7 92 02 F6 | 	mov	arg01, fp
21260     04 CE 85 F1 | 	sub	fp, #4
21264     4B 95 02 F6 | 	mov	arg02, arg03
21268     02 96 06 F6 | 	mov	arg03, #2
2126c     0B 00 00 FF 
21270     CC 64 06 F1 | 	add	objptr, ##5836
21274     E0 2B B0 FD | 	call	#_psram_spin2_write
21278     0B 00 00 FF 
2127c     CC 64 86 F1 | 	sub	objptr, ##5836
21280     E7 F0 03 F6 | 	mov	ptra, fp
21284     F2 00 A0 FD | 	call	#popregs_
21288                 | _psdpoke_ret
21288     2D 00 64 FD | 	ret
2128c                 | 
2128c                 | ' 
2128c                 | ' sub pspoke(addr as ulong,value as ulong)
2128c                 | _pspoke
2128c     00 CA 05 F6 | 	mov	COUNT_, #0
21290     E8 00 A0 FD | 	call	#pushregs_
21294     08 F0 07 F1 | 	add	ptra, #8
21298     49 97 02 F6 | 	mov	arg03, arg01
2129c     04 CE 05 F1 | 	add	fp, #4
212a0     E7 94 62 FC | 	wrlong	arg02, fp
212a4     E7 92 02 F6 | 	mov	arg01, fp
212a8     04 CE 85 F1 | 	sub	fp, #4
212ac     4B 95 02 F6 | 	mov	arg02, arg03
212b0     01 96 06 F6 | 	mov	arg03, #1
212b4     0B 00 00 FF 
212b8     CC 64 06 F1 | 	add	objptr, ##5836
212bc     98 2B B0 FD | 	call	#_psram_spin2_write
212c0     0B 00 00 FF 
212c4     CC 64 86 F1 | 	sub	objptr, ##5836
212c8     E7 F0 03 F6 | 	mov	ptra, fp
212cc     F2 00 A0 FD | 	call	#popregs_
212d0                 | _pspoke_ret
212d0     2D 00 64 FD | 	ret
212d4                 | 
212d4                 | ' 
212d4                 | ' function pspeek(adr as ulong) as ubyte
212d4                 | _pspeek
212d4     00 CA 05 F6 | 	mov	COUNT_, #0
212d8     E8 00 A0 FD | 	call	#pushregs_
212dc     0C F0 07 F1 | 	add	ptra, #12
212e0     49 95 02 F6 | 	mov	arg02, arg01
212e4     E7 92 02 F6 | 	mov	arg01, fp
212e8     08 92 06 F1 | 	add	arg01, #8
212ec     01 96 06 F6 | 	mov	arg03, #1
212f0     0B 00 00 FF 
212f4     CC 64 06 F1 | 	add	objptr, ##5836
212f8     C0 2A B0 FD | 	call	#_psram_spin2_read1
212fc     0B 00 00 FF 
21300     CC 64 86 F1 | 	sub	objptr, ##5836
21304                 | ' psram.read1(varptr(res),adr,1)
21304                 | ' return res
21304     08 CE 05 F1 | 	add	fp, #8
21308     E7 7A C2 FA | 	rdbyte	result1, fp
2130c     08 CE 85 F1 | 	sub	fp, #8
21310     E7 F0 03 F6 | 	mov	ptra, fp
21314     F2 00 A0 FD | 	call	#popregs_
21318                 | _pspeek_ret
21318     2D 00 64 FD | 	ret
2131c                 | 
2131c                 | ' 
2131c                 | ' function pslpeek(adr as ulong) as ulong
2131c                 | _pslpeek
2131c     00 CA 05 F6 | 	mov	COUNT_, #0
21320     E8 00 A0 FD | 	call	#pushregs_
21324     0C F0 07 F1 | 	add	ptra, #12
21328     49 95 02 F6 | 	mov	arg02, arg01
2132c     E7 92 02 F6 | 	mov	arg01, fp
21330     08 92 06 F1 | 	add	arg01, #8
21334     04 96 06 F6 | 	mov	arg03, #4
21338     0B 00 00 FF 
2133c     CC 64 06 F1 | 	add	objptr, ##5836
21340     78 2A B0 FD | 	call	#_psram_spin2_read1
21344     0B 00 00 FF 
21348     CC 64 86 F1 | 	sub	objptr, ##5836
2134c                 | ' psram.read1(varptr(res),adr,4)
2134c                 | ' return res
2134c     08 CE 05 F1 | 	add	fp, #8
21350     E7 7A 02 FB | 	rdlong	result1, fp
21354     08 CE 85 F1 | 	sub	fp, #8
21358     E7 F0 03 F6 | 	mov	ptra, fp
2135c     F2 00 A0 FD | 	call	#popregs_
21360                 | _pslpeek_ret
21360     2D 00 64 FD | 	ret
21364                 | 
21364                 | ' 
21364                 | ' function psdpeek(adr as ulong) as ulong
21364                 | _psdpeek
21364     00 CA 05 F6 | 	mov	COUNT_, #0
21368     E8 00 A0 FD | 	call	#pushregs_
2136c     0C F0 07 F1 | 	add	ptra, #12
21370     49 95 02 F6 | 	mov	arg02, arg01
21374     E7 92 02 F6 | 	mov	arg01, fp
21378     08 92 06 F1 | 	add	arg01, #8
2137c     02 96 06 F6 | 	mov	arg03, #2
21380     0B 00 00 FF 
21384     CC 64 06 F1 | 	add	objptr, ##5836
21388     30 2A B0 FD | 	call	#_psram_spin2_read1
2138c     0B 00 00 FF 
21390     CC 64 86 F1 | 	sub	objptr, ##5836
21394                 | ' psram.read1(varptr(res),adr,2)
21394                 | ' return res
21394     08 CE 05 F1 | 	add	fp, #8
21398     E7 7A E2 FA | 	rdword	result1, fp
2139c     08 CE 85 F1 | 	sub	fp, #8
213a0     E7 F0 03 F6 | 	mov	ptra, fp
213a4     F2 00 A0 FD | 	call	#popregs_
213a8                 | _psdpeek_ret
213a8     2D 00 64 FD | 	ret
213ac                 | 
213ac                 | ' 
213ac                 | ' '' ------------------------------- USB keyboard scan to char translator
213ac                 | ' 
213ac                 | ' function scantochar(key)
213ac                 | _scantochar
213ac                 | ' 
213ac                 | ' select case (key shr 8) and 255
213ac     49 81 02 F6 | 	mov	_var01, arg01
213b0     08 80 C6 F0 | 	sar	_var01, #8
213b4     FF 80 0E F5 | 	and	_var01, #255 wz
213b8     24 00 90 AD |  if_e	jmp	#LR__2680
213bc     02 80 0E F2 | 	cmp	_var01, #2 wz
213c0     20 80 0E 52 |  if_ne	cmp	_var01, #32 wz
213c4     30 00 90 AD |  if_e	jmp	#LR__2681
213c8     40 80 0E F2 | 	cmp	_var01, #64 wz
213cc     44 00 90 AD |  if_e	jmp	#LR__2682
213d0     42 80 0E F2 | 	cmp	_var01, #66 wz
213d4     60 80 0E 52 |  if_ne	cmp	_var01, #96 wz
213d8     70 00 90 5D |  if_ne	jmp	#LR__2684
213dc     50 00 90 FD | 	jmp	#LR__2683
213e0                 | LR__2680
213e0     49 7B 02 F6 | 	mov	result1, arg01
213e4     7F 7A 06 F5 | 	and	result1, #127
213e8     02 7A 66 F0 | 	shl	result1, #2
213ec     35 7B 02 F1 | 	add	result1, ptr__dat__
213f0     3D 7B C2 FA | 	rdbyte	result1, result1
213f4     54 00 90 FD | 	jmp	#_scantochar_ret
213f8                 | LR__2681
213f8     49 7B 02 F6 | 	mov	result1, arg01
213fc     7F 7A 06 F5 | 	and	result1, #127
21400     02 7A 66 F0 | 	shl	result1, #2
21404     01 7A 06 F1 | 	add	result1, #1
21408     35 7B 02 F1 | 	add	result1, ptr__dat__
2140c     3D 7B C2 FA | 	rdbyte	result1, result1
21410     38 00 90 FD | 	jmp	#_scantochar_ret
21414                 | LR__2682
21414     49 7B 02 F6 | 	mov	result1, arg01
21418     7F 7A 06 F5 | 	and	result1, #127
2141c     02 7A 66 F0 | 	shl	result1, #2
21420     02 7A 06 F1 | 	add	result1, #2
21424     35 7B 02 F1 | 	add	result1, ptr__dat__
21428     3D 7B C2 FA | 	rdbyte	result1, result1
2142c     1C 00 90 FD | 	jmp	#_scantochar_ret
21430                 | LR__2683
21430     49 7B 02 F6 | 	mov	result1, arg01
21434     7F 7A 06 F5 | 	and	result1, #127
21438     02 7A 66 F0 | 	shl	result1, #2
2143c     03 7A 06 F1 | 	add	result1, #3
21440     35 7B 02 F1 | 	add	result1, ptr__dat__
21444     3D 7B C2 FA | 	rdbyte	result1, result1
21448     00 00 90 FD | 	jmp	#_scantochar_ret
2144c                 | LR__2684
2144c                 | _scantochar_ret
2144c     2D 00 64 FD | 	ret
21450                 | 
21450                 | _program
21450     01 CA 05 F6 | 	mov	COUNT_, #1
21454     E8 00 A0 FD | 	call	#pushregs_
21458     A0 FC BF FD | 	call	#_startpsram
2145c     38 00 00 FF 
21460     34 64 06 F1 | 	add	objptr, ##28724
21464     32 93 02 FB | 	rdlong	arg01, objptr
21468     00 94 06 F6 | 	mov	arg02, #0
2146c     F0 03 00 FF 
21470     00 96 06 F6 | 	mov	arg03, ##516096
21474     2C 00 00 FF 
21478     68 65 86 F1 | 	sub	objptr, ##22888
2147c     CC 2E B0 FD | 	call	#_Audio2_003_spin2_start
21480     3E 97 02 F6 | 	mov	arg03, result2
21484     2C 00 00 FF 
21488     50 65 06 F1 | 	add	objptr, ##22864
2148c     32 7B 62 FC | 	wrlong	result1, objptr
21490     14 64 06 F1 | 	add	objptr, #20
21494     32 97 62 FC | 	wrlong	arg03, objptr
21498     38 00 00 FF 
2149c     30 64 86 F1 | 	sub	objptr, ##28720
214a0     32 92 06 F6 | 	mov	arg01, #50
214a4     28 38 B0 FD | 	call	#__system___waitms
214a8     38 00 00 FF 
214ac     30 64 06 F1 | 	add	objptr, ##28720
214b0     32 93 02 FB | 	rdlong	arg01, objptr
214b4     38 00 00 FF 
214b8     30 64 86 F1 | 	sub	objptr, ##28720
214bc     14 92 06 F1 | 	add	arg01, #20
214c0     20 00 80 FF 
214c4     49 01 58 FC | 	wrword	##16384, arg01
214c8     20 2C B0 FD | 	call	#_usbnew_spin2_start
214cc     38 00 00 FF 
214d0     24 64 06 F1 | 	add	objptr, ##28708
214d4     32 7B 62 FC | 	wrlong	result1, objptr
214d8     38 00 00 FF 
214dc     24 64 86 F1 | 	sub	objptr, ##28708
214e0     40 92 06 F6 | 	mov	arg01, #64
214e4     00 94 06 F6 | 	mov	arg02, #0
214e8     00 96 06 F6 | 	mov	arg03, #0
214ec     4C FC BF FD | 	call	#_startvideo
214f0                 | '   mouse_limits[0] := xlim
214f0     0F 00 00 FF 
214f4     C8 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7880
214f8     01 00 80 FF 
214fc     3B FF 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
21500                 | '   mouse_limits[1] := ylim
21500     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
21504     01 00 80 FF 
21508     3B AF 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
2150c     32 93 02 F6 | 	mov	arg01, objptr
21510     D5 93 06 F1 | 	add	arg01, #469
21514                 | '   mouse_outptr := ptr
21514     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
21518     3B 93 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
2151c     0F 00 00 FF 
21520     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
21524     35 95 02 F6 | 	mov	arg02, ptr__dat__
21528     16 00 00 FF 
2152c     CA 94 06 F1 | 	add	arg02, ##11466
21530     10 92 06 F6 | 	mov	arg01, #16
21534     B0 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
21538     10 92 06 F6 | 	mov	arg01, #16
2153c     20 94 06 F6 | 	mov	arg02, #32
21540     20 96 06 F6 | 	mov	arg03, #32
21544     2C 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
21548     09 92 C6 F9 | 	decod	arg01, #9
2154c     2C 95 06 F6 | 	mov	arg02, #300
21550     EC 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
21554     32 97 02 F6 | 	mov	arg03, objptr
21558     51 00 00 FF 
2155c     64 65 06 F1 | 	add	objptr, ##41828
21560     32 95 02 F6 | 	mov	arg02, objptr
21564     4A 97 62 FC | 	wrlong	arg03, arg02
21568     04 94 06 F1 | 	add	arg02, #4
2156c     4A 71 62 FC | 	wrlong	ptr__housekeeper_, arg02
21570     2F 95 02 F6 | 	mov	arg02, entryptr__
21574     1E 7A 06 F6 | 	mov	result1, #30
21578     28 64 62 FD | 	setq	objptr
2157c     4A 7B F2 FC | 	coginit	result1, arg02 wc
21580     01 7A 66 C6 |  if_b	neg	result1, #1
21584     04 64 86 F1 | 	sub	objptr, #4
21588     32 7B 62 FC | 	wrlong	result1, objptr
2158c     01 00 00 FF 
21590     8C 65 06 F1 | 	add	objptr, ##908
21594     32 01 68 FC | 	wrlong	#0, objptr
21598     1B 00 00 FF 
2159c     98 64 86 F1 | 	sub	objptr, ##13976
215a0     32 05 68 FC | 	wrlong	#2, objptr
215a4     04 64 06 F1 | 	add	objptr, #4
215a8     32 27 69 FC | 	wrlong	#147, objptr
215ac     04 64 06 F1 | 	add	objptr, #4
215b0     32 35 69 FC | 	wrlong	#154, objptr
215b4     04 64 06 F1 | 	add	objptr, #4
215b8     32 09 68 FC | 	wrlong	#4, objptr
215bc     04 64 86 F1 | 	sub	objptr, #4
215c0     32 7B 02 FB | 	rdlong	result1, objptr
215c4     14 64 86 F1 | 	sub	objptr, #20
215c8     32 7B 62 FC | 	wrlong	result1, objptr
215cc     04 64 06 F1 | 	add	objptr, #4
215d0     32 01 68 FC | 	wrlong	#0, objptr
215d4     04 64 06 F1 | 	add	objptr, #4
215d8     32 01 68 FC | 	wrlong	#0, objptr
215dc     19 00 00 FF 
215e0     0C 65 06 F1 | 	add	objptr, ##13068
215e4     32 03 68 FC | 	wrlong	#1, objptr
215e8     01 00 00 FF 
215ec     98 65 06 F1 | 	add	objptr, ##920
215f0     32 01 68 FC | 	wrlong	#0, objptr
215f4     35 97 02 F6 | 	mov	arg03, ptr__dat__
215f8     01 00 00 FF 
215fc     00 96 06 F1 | 	add	arg03, ##512
21600     08 64 06 F1 | 	add	objptr, #8
21604     32 97 62 FC | 	wrlong	arg03, objptr
21608     04 64 86 F1 | 	sub	objptr, #4
2160c     03 00 80 FF 
21610     32 3D 69 FC | 	wrlong	##1694, objptr
21614     0D 00 00 FF 
21618     74 64 86 F1 | 	sub	objptr, ##6772
2161c     32 19 68 FC | 	wrlong	#12, objptr
21620     46 00 00 FF 
21624     84 64 86 F1 | 	sub	objptr, ##35972
21628     54 D7 BF FD | 	call	#_init_commands
2162c     A0 F6 BF FD | 	call	#_init_error_strings
21630     08 EE BF FD | 	call	#_init_audio
21634     70 3E BF FD | 	call	#_do_new
21638     38 00 00 FF 
2163c     5C 64 06 F1 | 	add	objptr, ##28764
21640     32 93 02 FB | 	rdlong	arg01, objptr
21644     04 64 86 F1 | 	sub	objptr, #4
21648     32 95 02 FB | 	rdlong	arg02, objptr
2164c     38 00 00 FF 
21650     58 64 86 F1 | 	sub	objptr, ##28760
21654     B4 17 B0 FD | 	call	#_hg010b_spin2_cls
21658     38 00 00 FF 
2165c     60 64 06 F1 | 	add	objptr, ##28768
21660     32 93 02 FB | 	rdlong	arg01, objptr
21664     38 00 00 FF 
21668     60 64 86 F1 | 	sub	objptr, ##28768
2166c     D0 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
21670                 | ' 
21670                 | ' leading_spaces:=amount
21670     01 00 00 FF 
21674     B6 64 06 F1 | 	add	objptr, ##694
21678     32 05 68 FC | 	wrlong	#2, objptr
2167c     01 00 00 FF 
21680     B6 64 86 F1 | 	sub	objptr, ##694
21684     9B 01 00 FF 
21688     17 A7 06 F6 | 	mov	local01, ##@LR__6162
2168c     3D 92 06 F6 | 	mov	arg01, #61
21690     3C 94 06 F6 | 	mov	arg02, #60
21694     3B 96 06 F6 | 	mov	arg03, #59
21698     3A 98 06 F6 | 	mov	arg04, #58
2169c     44 7A B0 FD | 	call	#__system___vfs_open_sdcardx
216a0     3D 95 02 F6 | 	mov	arg02, result1
216a4     53 93 02 F6 | 	mov	arg01, local01
216a8     FC 36 B0 FD | 	call	#__system___mount
216ac     9B 01 00 FF 
216b0     1B 93 06 F6 | 	mov	arg01, ##@LR__6163
216b4     B4 39 B0 FD | 	call	#__system___chdir
216b8     9B 01 00 FF 
216bc     23 A7 06 F6 | 	mov	local01, ##@LR__6164
216c0     4B 00 00 FF 
216c4     B4 64 06 F1 | 	add	objptr, ##38580
216c8     32 A7 62 FC | 	wrlong	local01, objptr
216cc     13 00 00 FF 
216d0     60 64 86 F1 | 	sub	objptr, ##9824
216d4     32 93 02 FB | 	rdlong	arg01, objptr
216d8     38 00 00 FF 
216dc     54 64 86 F1 | 	sub	objptr, ##28756
216e0     01 92 66 F0 | 	shl	arg01, #1
216e4     01 94 06 F6 | 	mov	arg02, #1
216e8     D4 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
216ec                 | ' init_commands
216ec                 | ' init_error_strings
216ec                 | ' init_audio
216ec                 | ' do_new
216ec                 | ' cls(ink, paper)
216ec                 | ' v.setfontfamily(font) 				' use ST Mono font
216ec                 | ' v.setleadingspaces(2)
216ec                 | ' mount "/sd", _vfs_open_sdcard()
216ec                 | ' chdir "/sd/bas"
216ec                 | ' currentdir$="/sd/bas"
216ec                 | ' position 2*editor_spaces,1 : print ver$
216ec     00 92 06 F6 | 	mov	arg01, #0
216f0     6C 88 B0 FD | 	call	#__system___getiolock_0622
216f4     3D 93 02 F6 | 	mov	arg01, result1
216f8     E0 32 B0 FD | 	call	#__system___lockmem
216fc     18 00 00 FF 
21700     40 6B 06 F1 | 	add	ptr__dat__, ##12608
21704     35 95 02 FB | 	rdlong	arg02, ptr__dat__
21708     18 00 00 FF 
2170c     40 6B 86 F1 | 	sub	ptr__dat__, ##12608
21710     00 92 06 F6 | 	mov	arg01, #0
21714     00 96 06 F6 | 	mov	arg03, #0
21718     B4 3F B0 FD | 	call	#__system___basic_print_string
2171c     00 92 06 F6 | 	mov	arg01, #0
21720     0A 94 06 F6 | 	mov	arg02, #10
21724     00 96 06 F6 | 	mov	arg03, #0
21728     4C 3F B0 FD | 	call	#__system___basic_print_char
2172c     00 92 06 F6 | 	mov	arg01, #0
21730     2C 88 B0 FD | 	call	#__system___getiolock_0622
21734     3D 01 68 FC | 	wrlong	#0, result1
21738     53 00 00 FF 
2173c     F0 64 06 F1 | 	add	objptr, ##42736
21740     32 93 02 FB | 	rdlong	arg01, objptr
21744     0F 00 00 FF 
21748     74 64 86 F1 | 	sub	objptr, ##7796
2174c     32 A7 02 FB | 	rdlong	local01, objptr
21750     44 00 00 FF 
21754     7C 64 86 F1 | 	sub	objptr, ##34940
21758     53 93 82 F1 | 	sub	arg01, local01
2175c     00 94 06 F6 | 	mov	arg02, #0
21760     0A 96 06 F6 | 	mov	arg03, #10
21764     70 4D B0 FD | 	call	#__system__Number_S
21768     3D 93 02 F6 | 	mov	arg01, result1
2176c     9B 01 00 FF 
21770     2B 95 06 F6 | 	mov	arg02, ##@LR__6165
21774     C0 32 B0 FD | 	call	#__system___string_concat
21778     3D A7 02 F6 | 	mov	local01, result1
2177c     51 00 00 FF 
21780     58 65 06 F1 | 	add	objptr, ##41816
21784     32 A7 62 FC | 	wrlong	local01, objptr
21788     51 00 00 FF 
2178c     58 65 86 F1 | 	sub	objptr, ##41816
21790                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
21790     00 92 06 F6 | 	mov	arg01, #0
21794     C8 87 B0 FD | 	call	#__system___getiolock_0622
21798     3D 93 02 F6 | 	mov	arg01, result1
2179c     3C 32 B0 FD | 	call	#__system___lockmem
217a0     51 00 00 FF 
217a4     58 65 06 F1 | 	add	objptr, ##41816
217a8     32 95 02 FB | 	rdlong	arg02, objptr
217ac     51 00 00 FF 
217b0     58 65 86 F1 | 	sub	objptr, ##41816
217b4     00 92 06 F6 | 	mov	arg01, #0
217b8     00 96 06 F6 | 	mov	arg03, #0
217bc     10 3F B0 FD | 	call	#__system___basic_print_string
217c0     00 92 06 F6 | 	mov	arg01, #0
217c4     0A 94 06 F6 | 	mov	arg02, #10
217c8     00 96 06 F6 | 	mov	arg03, #0
217cc     A8 3E B0 FD | 	call	#__system___basic_print_char
217d0     00 92 06 F6 | 	mov	arg01, #0
217d4     88 87 B0 FD | 	call	#__system___getiolock_0622
217d8     3D 01 68 FC | 	wrlong	#0, result1
217dc     38 00 00 FF 
217e0     54 64 06 F1 | 	add	objptr, ##28756
217e4     32 93 02 FB | 	rdlong	arg01, objptr
217e8     38 00 00 FF 
217ec     54 64 86 F1 | 	sub	objptr, ##28756
217f0     01 92 66 F0 | 	shl	arg01, #1
217f4     04 94 06 F6 | 	mov	arg02, #4
217f8     C4 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
217fc                 | ' position 2*editor_spaces,4 : print "Ready"
217fc     00 92 06 F6 | 	mov	arg01, #0
21800     5C 87 B0 FD | 	call	#__system___getiolock_0622
21804     3D 93 02 F6 | 	mov	arg01, result1
21808     D0 31 B0 FD | 	call	#__system___lockmem
2180c     9B 01 00 FF 
21810     3D 95 06 F6 | 	mov	arg02, ##@LR__6166
21814     00 92 06 F6 | 	mov	arg01, #0
21818     00 96 06 F6 | 	mov	arg03, #0
2181c     B0 3E B0 FD | 	call	#__system___basic_print_string
21820     00 92 06 F6 | 	mov	arg01, #0
21824     0A 94 06 F6 | 	mov	arg02, #10
21828     00 96 06 F6 | 	mov	arg03, #0
2182c     48 3E B0 FD | 	call	#__system___basic_print_char
21830     00 92 06 F6 | 	mov	arg01, #0
21834     28 87 B0 FD | 	call	#__system___getiolock_0622
21838     3D 01 68 FC | 	wrlong	#0, result1
2183c     00 94 06 F6 | 	mov	arg02, #0
21840     01 94 D6 F7 | 	test	arg02, #1 wc
21844     5A 4C 64 FD | 	drvc	#38
21848     01 94 D6 F7 | 	test	arg02, #1 wc
2184c     5A 4E 64 FD | 	drvc	#39
21850     9B 01 00 FF 
21854     43 A7 06 F6 | 	mov	local01, ##@LR__6167
21858     53 00 00 FF 
2185c     1C 65 06 F1 | 	add	objptr, ##42780
21860     32 A7 62 FC | 	wrlong	local01, objptr
21864     04 64 06 F1 | 	add	objptr, #4
21868     FF FF FF FF 
2186c     32 FF 6B FC | 	wrlong	##-1, objptr
21870     0C 64 06 F1 | 	add	objptr, #12
21874     32 01 68 FC | 	wrlong	#0, objptr
21878     53 00 00 FF 
2187c     2C 65 86 F1 | 	sub	objptr, ##42796
21880                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
21880                 | ' loadname="noname.bas"
21880                 | ' do_insert=-1
21880                 | ' inload=0
21880                 | ' 
21880                 | ' open "/sd/bas/autorun.bas" for input as #9
21880     9B 01 00 FF 
21884     4E 95 06 F6 | 	mov	arg02, ##@LR__6168
21888     09 92 06 F6 | 	mov	arg01, #9
2188c     00 96 06 F6 | 	mov	arg03, #0
21890     F8 3C B0 FD | 	call	#__system___basic_open_string
21894     20 68 06 F1 | 	add	ptr___system__dat__, #32
21898     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
2189c     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
218a0     20 68 86 F1 | 	sub	ptr___system__dat__, #32
218a4     53 00 00 FF 
218a8     30 65 06 F1 | 	add	objptr, ##42800
218ac     32 7B 62 FC | 	wrlong	result1, objptr
218b0     53 00 00 FF 
218b4     30 65 86 F1 | 	sub	objptr, ##42800
218b8                 | ' err=geterr()
218b8                 | ' close #9
218b8     09 92 06 F6 | 	mov	arg01, #9
218bc     F8 7C B0 FD | 	call	#__system__close
218c0                 | ' if err=0 then line$="run autorun.bas" : interpret
218c0     53 00 00 FF 
218c4     30 65 06 F1 | 	add	objptr, ##42800
218c8     32 A7 0A FB | 	rdlong	local01, objptr wz
218cc     53 00 00 FF 
218d0     30 65 86 F1 | 	sub	objptr, ##42800
218d4     9B 01 00 AF 
218d8     62 A7 06 A6 |  if_e	mov	local01, ##@LR__6169
218dc     38 00 00 AF 
218e0     3C 64 06 A1 |  if_e	add	objptr, ##28732
218e4     32 A7 62 AC |  if_e	wrlong	local01, objptr
218e8     38 00 00 AF 
218ec     3C 64 86 A1 |  if_e	sub	objptr, ##28732
218f0     8C 00 BE AD |  if_e	call	#_interpret
218f4                 | ' 
218f4                 | ' 
218f4                 | ' '-------------------------------------------------------------------------------------------------------- 
218f4                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
218f4                 | ' '--------------------------------------------------------------------------------------------------------
218f4                 | ' 
218f4                 | ' do
218f4                 | LR__2690
218f4     0C F0 BD FD | 	call	#_edit
218f8     3D A7 02 F6 | 	mov	local01, result1
218fc     38 00 00 FF 
21900     3C 64 06 F1 | 	add	objptr, ##28732
21904     32 A7 62 FC | 	wrlong	local01, objptr
21908     38 00 00 FF 
2190c     3C 64 86 F1 | 	sub	objptr, ##28732
21910     6C 00 BE FD | 	call	#_interpret
21914     9B 01 00 FF 
21918     72 A7 06 F6 | 	mov	local01, ##@LR__6170
2191c     38 00 00 FF 
21920     3C 64 06 F1 | 	add	objptr, ##28732
21924     32 A7 62 FC | 	wrlong	local01, objptr
21928     38 00 00 FF 
2192c     3C 64 86 F1 | 	sub	objptr, ##28732
21930     C0 FF 9F FD | 	jmp	#LR__2690
21934     E7 F0 03 F6 | 	mov	ptra, fp
21938     F2 00 A0 FD | 	call	#popregs_
2193c                 | _program_ret
2193c     2D 00 64 FD | 	ret
21940                 | 
21940                 | ' '' this is not a main program.
21940                 | ' 
21940                 | ' '****************************************************************************************************************
21940                 | ' '                                                                                                             	*
21940                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
21940                 | ' '                                                                                                            	*
21940                 | ' ' base - HDMI base pin												*
21940                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
21940                 | ' '														*
21940                 | ' '														*
21940                 | ' '****************************************************************************************************************
21940                 | ' 
21940                 | ' pub start(base,mb):result |i
21940                 | _hg010b_spin2_start
21940                 | ' 
21940                 | ' '--------------------------- initialize pointers and variables
21940                 | ' 
21940                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
21940     34 64 06 F1 | 	add	objptr, #52
21944     32 7B 02 F6 | 	mov	result1, objptr
21948     28 64 86 F1 | 	sub	objptr, #40
2194c     32 7B 62 FC | 	wrlong	result1, objptr
21950                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
21950                 | ' hdmibase:=base							' HDMI base pin, 8*n
21950     18 64 06 F1 | 	add	objptr, #24
21954     32 93 62 FC | 	wrlong	arg01, objptr
21958                 | ' mailbox_ptr:=mb		
21958     04 64 06 F1 | 	add	objptr, #4
2195c     32 95 62 FC | 	wrlong	arg02, objptr
21960                 | ' mailbox0:=mb				' PSRAM mailbox pointer
21960     C1 65 06 F1 | 	add	objptr, #449
21964     32 95 62 FC | 	wrlong	arg02, objptr
21968                 | ' sprite_ptr:=@spr1ptr
21968     D8 64 86 F1 | 	sub	objptr, #216
2196c     32 7B 02 F6 | 	mov	result1, objptr
21970     E5 64 86 F1 | 	sub	objptr, #229
21974     32 7B 62 FC | 	wrlong	result1, objptr
21978                 | ' 
21978                 | ' 		'
21978                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
21978     E5 64 06 F1 | 	add	objptr, #229
2197c     32 7B 02 FB | 	rdlong	result1, objptr
21980     D0 7A 06 F1 | 	add	result1, #208
21984     3D 11 58 FC | 	wrword	#8, result1
21988                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
21988     32 97 02 FB | 	rdlong	arg03, objptr
2198c     D2 96 06 F1 | 	add	arg03, #210
21990     4B 21 58 FC | 	wrword	#16, arg03
21994                 | ' leading_spaces:=0				'
21994     A5 65 06 F1 | 	add	objptr, #421
21998     32 01 68 FC | 	wrlong	#0, objptr
2199c                 | ' 
2199c                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
2199c     99 64 86 F1 | 	sub	objptr, #153
219a0     00 00 A0 FF 
219a4     32 0F 68 FC | 	wrlong	##1073741831, objptr
219a8                 | ' emptydl[1]:=0
219a8     04 64 06 F1 | 	add	objptr, #4
219ac     32 01 68 FC | 	wrlong	#0, objptr
219b0                 | ' 
219b0                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
219b0                 | ' 
219b0                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
219b0     28 65 86 F1 | 	sub	objptr, #296
219b4     32 03 68 FC | 	wrlong	#1, objptr
219b8                 | ' if s_debug<>0
219b8                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
219b8     20 00 80 FF 
219bc     32 01 68 FC | 	wrlong	##16384, objptr
219c0     F9 64 86 F1 | 	sub	objptr, #249
219c4                 | ' setmode()							' set the mode, see below
219c4     18 03 B0 FD | 	call	#_hg010b_spin2_setmode
219c8                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
219c8     49 64 06 F1 | 	add	objptr, #73
219cc     32 7B 02 F6 | 	mov	result1, objptr
219d0     35 64 86 F1 | 	sub	objptr, #53
219d4     32 7B 62 FC | 	wrlong	result1, objptr
219d8                 | ' cursor_ptr:=@cursor_x						
219d8     28 64 06 F1 | 	add	objptr, #40
219dc     32 97 02 F6 | 	mov	arg03, objptr
219e0     2C 64 86 F1 | 	sub	objptr, #44
219e4     32 97 62 FC | 	wrlong	arg03, objptr
219e8                 | ' fontnum:=0  							' start with a PC type font 
219e8     55 64 06 F1 | 	add	objptr, #85
219ec     32 01 68 FC | 	wrlong	#0, objptr
219f0                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
219f0     1C 64 06 F1 | 	add	objptr, #28
219f4     32 93 02 F6 | 	mov	arg01, objptr
219f8     81 64 86 F1 | 	sub	objptr, #129
219fc     37 95 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
21a00     1C 00 00 FF 
21a04     80 94 06 F1 | 	add	arg02, ##14464
21a08     10 96 06 F6 | 	mov	arg03, #16
21a0c     7C 2E B0 FD | 	call	#__system____builtin_memmove
21a10                 | ' leading_spaces:=0
21a10     01 00 00 FF 
21a14     B6 64 06 F1 | 	add	objptr, ##694
21a18     32 01 68 FC | 	wrlong	#0, objptr
21a1c     01 00 00 FF 
21a20     B6 64 86 F1 | 	sub	objptr, ##694
21a24                 | ' '---------------------------- initialize a cursor (MSDOS type)
21a24                 | ' 
21a24                 | ' initcursor(154)
21a24     9A 92 06 F6 | 	mov	arg01, #154
21a28     74 00 B0 FD | 	call	#_hg010b_spin2_initcursor
21a2c                 | ' 
21a2c                 | ' '---------------------------- start the cog
21a2c                 | ' 
21a2c                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
21a2c     37 95 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
21a30     1C 00 00 FF 
21a34     90 94 06 F1 | 	add	arg02, ##14480
21a38     32 97 02 F6 | 	mov	arg03, objptr
21a3c     14 96 06 F1 | 	add	arg03, #20
21a40     10 7A 06 F6 | 	mov	result1, #16
21a44     28 96 62 FD | 	setq	arg03
21a48     4A 7B F2 FC | 	coginit	result1, arg02 wc
21a4c     01 7A 66 C6 |  if_b	neg	result1, #1
21a50     30 64 06 F1 | 	add	objptr, #48
21a54     32 7B 62 FC | 	wrlong	result1, objptr
21a58     30 64 86 F1 | 	sub	objptr, #48
21a5c                 | ' waitms(40)							' wait for stabilize
21a5c     28 92 06 F6 | 	mov	arg01, #40
21a60     6C 32 B0 FD | 	call	#__system___waitms
21a64                 | ' return cog							' return the driver's cog #
21a64     30 64 06 F1 | 	add	objptr, #48
21a68     32 7B 02 FB | 	rdlong	result1, objptr
21a6c     30 64 86 F1 | 	sub	objptr, #48
21a70                 | _hg010b_spin2_start_ret
21a70     2D 00 64 FD | 	ret
21a74                 | 
21a74                 | ' 
21a74                 | ' 
21a74                 | ' '**************************************************************************************************************** 
21a74                 | ' '                                                                                                             	*
21a74                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
21a74                 | ' '  Mode number - see start() above or bits below								*
21a74                 | ' '                                                                                                             	*
21a74                 | ' '****************************************************************************************************************
21a74                 | ' 
21a74                 | ' 
21a74                 | ' pub restorepalette()
21a74                 | _hg010b_spin2_restorepalette
21a74                 | ' 
21a74                 | ' longmove(@ataripalette,@ataripalette2,256)
21a74     18 00 00 FF 
21a78     40 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##12352
21a7c     37 93 02 F6 | 	mov	arg01, ptr__hg010b_spin2_dat__
21a80     02 00 00 FF 
21a84     00 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
21a88     37 95 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
21a8c     1A 00 00 FF 
21a90     40 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##13376
21a94     00 97 06 F6 | 	mov	arg03, #256
21a98     84 2E B0 FD | 	call	#__system__longmove
21a9c                 | _hg010b_spin2_restorepalette_ret
21a9c     2D 00 64 FD | 	ret
21aa0                 | 
21aa0                 | ' 
21aa0                 | ' '---------------------------- initialize a cursor (MSDOS type)
21aa0                 | ' pub initcursor(color) |i
21aa0                 | _hg010b_spin2_initcursor
21aa0     03 CA 05 F6 | 	mov	COUNT_, #3
21aa4     E8 00 A0 FD | 	call	#pushregs_
21aa8     49 A7 02 F6 | 	mov	local01, arg01
21aac                 | ' 
21aac                 | ' cursor_x:=0							' place the cursor at 0:0
21aac     3C 64 06 F1 | 	add	objptr, #60
21ab0     32 01 58 FC | 	wrword	#0, objptr
21ab4                 | ' cursor_y:=0
21ab4     02 64 06 F1 | 	add	objptr, #2
21ab8     32 01 48 FC | 	wrbyte	#0, objptr
21abc                 | ' repeat i from 0 to 111
21abc     00 A8 06 F6 | 	mov	local02, #0
21ac0     F8 65 06 F1 | 	add	objptr, #504
21ac4     D7 0C 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
21ac8                 | LR__2700
21ac8                 | '   cursor[i]:=0
21ac8     54 AB 02 F6 | 	mov	local03, local02
21acc     32 AB 02 F1 | 	add	local03, objptr
21ad0     55 01 48 FC | 	wrbyte	#0, local03
21ad4     01 A8 06 F1 | 	add	local02, #1
21ad8     70 A8 56 F2 | 	cmps	local02, #112 wc
21adc     E8 FF 9F CD |  if_b	jmp	#LR__2700
21ae0                 | LR__2701
21ae0                 | ' repeat i from 112 to 127
21ae0     70 A8 06 F6 | 	mov	local02, #112
21ae4     D7 0C 48 FB | 	callpa	#(@LR__2703-@LR__2702)>>2,fcache_load_ptr_
21ae8                 | LR__2702
21ae8                 | '   cursor[i]:=color  
21ae8     54 AB 02 F6 | 	mov	local03, local02
21aec     32 AB 02 F1 | 	add	local03, objptr
21af0     55 A7 42 FC | 	wrbyte	local01, local03
21af4     01 A8 06 F1 | 	add	local02, #1
21af8     80 A8 16 F2 | 	cmp	local02, #128 wc
21afc     E8 FF 9F CD |  if_b	jmp	#LR__2702
21b00                 | LR__2703
21b00     01 00 00 FF 
21b04     36 64 86 F1 | 	sub	objptr, ##566
21b08                 | ' 'repeat i from 0 to 127
21b08                 | ' '  if ((i/8)//2)
21b08                 | ' '    cursor[i]:=15
21b08                 | ' '  else
21b08                 | ' '    cursor[i]:=0
21b08                 | ' '  if i>=120    
21b08                 | ' '    cursor[i]:=40
21b08                 | ' setspriteptr(17,@cursor)
21b08     32 95 02 F6 | 	mov	arg02, objptr
21b0c     01 00 00 FF 
21b10     36 94 06 F1 | 	add	arg02, ##566
21b14     11 92 06 F6 | 	mov	arg01, #17
21b18     CC 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
21b1c                 | ' setspritesize(17,8,16)
21b1c     11 92 06 F6 | 	mov	arg01, #17
21b20     08 94 06 F6 | 	mov	arg02, #8
21b24     10 96 06 F6 | 	mov	arg03, #16
21b28     48 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
21b2c                 | ' setspritepos(17,0,0)
21b2c     11 92 06 F6 | 	mov	arg01, #17
21b30     00 94 06 F6 | 	mov	arg02, #0
21b34     00 96 06 F6 | 	mov	arg03, #0
21b38     D0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
21b3c                 | ' cursorshape:=14
21b3c     0B 00 00 FF 
21b40     C6 64 06 F1 | 	add	objptr, ##5830
21b44     32 1D 68 FC | 	wrlong	#14, objptr
21b48                 | ' cursorcolor:=color
21b48     04 64 86 F1 | 	sub	objptr, #4
21b4c     32 A7 62 FC | 	wrlong	local01, objptr
21b50     0B 00 00 FF 
21b54     C2 64 86 F1 | 	sub	objptr, ##5826
21b58     E7 F0 03 F6 | 	mov	ptra, fp
21b5c     F2 00 A0 FD | 	call	#popregs_
21b60                 | _hg010b_spin2_initcursor_ret
21b60     2D 00 64 FD | 	ret
21b64                 | 
21b64                 | ' 
21b64                 | ' pub setcursorshape(shape) | i
21b64                 | _hg010b_spin2_setcursorshape
21b64                 | ' 
21b64                 | ' cursorshape:=shape
21b64     0B 00 00 FF 
21b68     C6 64 06 F1 | 	add	objptr, ##5830
21b6c     32 93 62 FC | 	wrlong	arg01, objptr
21b70                 | ' repeat i from 0 to (8*cursorshape)-1
21b70     00 80 06 F6 | 	mov	_var01, #0
21b74     49 83 02 F6 | 	mov	_var02, arg01
21b78     03 82 66 F0 | 	shl	_var02, #3
21b7c     01 82 86 F1 | 	sub	_var02, #1
21b80     00 82 56 F2 | 	cmps	_var02, #0 wc
21b84     01 84 86 F6 | 	negc	_var03, #1
21b88     42 87 02 F6 | 	mov	_var04, _var03
21b8c     42 83 02 F1 | 	add	_var02, _var03
21b90     0A 00 00 FF 
21b94     90 64 86 F1 | 	sub	objptr, ##5264
21b98     D7 0C 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
21b9c                 | LR__2710
21b9c                 | '   cursor[i]:=0
21b9c     40 85 02 F6 | 	mov	_var03, _var01
21ba0     32 85 02 F1 | 	add	_var03, objptr
21ba4     42 01 48 FC | 	wrbyte	#0, _var03
21ba8     43 81 02 F1 | 	add	_var01, _var04
21bac     41 81 0A F2 | 	cmp	_var01, _var02 wz
21bb0     E8 FF 9F 5D |  if_ne	jmp	#LR__2710
21bb4                 | LR__2711
21bb4                 | ' repeat i from 8*cursorshape to 127
21bb4     0A 00 00 FF 
21bb8     90 64 06 F1 | 	add	objptr, ##5264
21bbc     32 87 02 FB | 	rdlong	_var04, objptr
21bc0     43 81 02 F6 | 	mov	_var01, _var04
21bc4     03 80 66 F0 | 	shl	_var01, #3
21bc8     0B 00 00 FF 
21bcc     C6 64 86 F1 | 	sub	objptr, ##5830
21bd0     03 86 66 F0 | 	shl	_var04, #3
21bd4     80 86 56 F2 | 	cmps	_var04, #128 wc
21bd8     01 84 A6 F6 | 	negnc	_var03, #1
21bdc     7F 82 06 F6 | 	mov	_var02, #127
21be0     42 83 02 F1 | 	add	_var02, _var03
21be4     D7 1A 48 FB | 	callpa	#(@LR__2713-@LR__2712)>>2,fcache_load_ptr_
21be8                 | LR__2712
21be8                 | '   cursor[i]:=cursorcolor
21be8     40 87 02 F6 | 	mov	_var04, _var01
21bec     01 00 00 FF 
21bf0     36 64 06 F1 | 	add	objptr, ##566
21bf4     32 87 02 F1 | 	add	_var04, objptr
21bf8     0A 00 00 FF 
21bfc     8C 64 06 F1 | 	add	objptr, ##5260
21c00     32 93 02 FB | 	rdlong	arg01, objptr
21c04     0B 00 00 FF 
21c08     C2 64 86 F1 | 	sub	objptr, ##5826
21c0c     43 93 42 FC | 	wrbyte	arg01, _var04
21c10     42 81 02 F1 | 	add	_var01, _var03
21c14     41 81 0A F2 | 	cmp	_var01, _var02 wz
21c18     CC FF 9F 5D |  if_ne	jmp	#LR__2712
21c1c                 | LR__2713
21c1c                 | _hg010b_spin2_setcursorshape_ret
21c1c     2D 00 64 FD | 	ret
21c20                 | 
21c20                 | ' 
21c20                 | ' pub setcursorcolor(color) | i
21c20                 | _hg010b_spin2_setcursorcolor
21c20                 | ' 
21c20                 | ' cursorcolor:=color
21c20     0B 00 00 FF 
21c24     C2 64 06 F1 | 	add	objptr, ##5826
21c28     32 93 62 FC | 	wrlong	arg01, objptr
21c2c                 | ' repeat i from 0 to (8*cursorshape)-1
21c2c     00 92 06 F6 | 	mov	arg01, #0
21c30     04 64 06 F1 | 	add	objptr, #4
21c34     32 81 02 FB | 	rdlong	_var01, objptr
21c38     03 80 66 F0 | 	shl	_var01, #3
21c3c     01 80 86 F1 | 	sub	_var01, #1
21c40     00 80 56 F2 | 	cmps	_var01, #0 wc
21c44     01 82 86 F6 | 	negc	_var02, #1
21c48     41 85 02 F6 | 	mov	_var03, _var02
21c4c     41 81 02 F1 | 	add	_var01, _var02
21c50     0A 00 00 FF 
21c54     90 64 86 F1 | 	sub	objptr, ##5264
21c58     D7 0C 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
21c5c                 | LR__2720
21c5c                 | '   cursor[i]:=0
21c5c     49 83 02 F6 | 	mov	_var02, arg01
21c60     32 83 02 F1 | 	add	_var02, objptr
21c64     41 01 48 FC | 	wrbyte	#0, _var02
21c68     42 93 02 F1 | 	add	arg01, _var03
21c6c     40 93 0A F2 | 	cmp	arg01, _var01 wz
21c70     E8 FF 9F 5D |  if_ne	jmp	#LR__2720
21c74                 | LR__2721
21c74                 | ' repeat i from 8*cursorshape to 127
21c74     0A 00 00 FF 
21c78     90 64 06 F1 | 	add	objptr, ##5264
21c7c     32 85 02 FB | 	rdlong	_var03, objptr
21c80     42 93 02 F6 | 	mov	arg01, _var03
21c84     03 92 66 F0 | 	shl	arg01, #3
21c88     0B 00 00 FF 
21c8c     C6 64 86 F1 | 	sub	objptr, ##5830
21c90     03 84 66 F0 | 	shl	_var03, #3
21c94     80 84 56 F2 | 	cmps	_var03, #128 wc
21c98     01 82 A6 F6 | 	negnc	_var02, #1
21c9c     7F 80 06 F6 | 	mov	_var01, #127
21ca0     41 81 02 F1 | 	add	_var01, _var02
21ca4     D7 1A 48 FB | 	callpa	#(@LR__2723-@LR__2722)>>2,fcache_load_ptr_
21ca8                 | LR__2722
21ca8                 | '   cursor[i]:=cursorcolor
21ca8     49 85 02 F6 | 	mov	_var03, arg01
21cac     01 00 00 FF 
21cb0     36 64 06 F1 | 	add	objptr, ##566
21cb4     32 85 02 F1 | 	add	_var03, objptr
21cb8     0A 00 00 FF 
21cbc     8C 64 06 F1 | 	add	objptr, ##5260
21cc0     32 87 02 FB | 	rdlong	_var04, objptr
21cc4     0B 00 00 FF 
21cc8     C2 64 86 F1 | 	sub	objptr, ##5826
21ccc     42 87 42 FC | 	wrbyte	_var04, _var03
21cd0     41 93 02 F1 | 	add	arg01, _var02
21cd4     40 93 0A F2 | 	cmp	arg01, _var01 wz
21cd8     CC FF 9F 5D |  if_ne	jmp	#LR__2722
21cdc                 | LR__2723
21cdc                 | _hg010b_spin2_setcursorcolor_ret
21cdc     2D 00 64 FD | 	ret
21ce0                 | 
21ce0                 | '   
21ce0                 | '   
21ce0                 | '   
21ce0                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
21ce0                 | _hg010b_spin2_setmode
21ce0     02 CA 05 F6 | 	mov	COUNT_, #2
21ce4     E8 00 A0 FD | 	call	#pushregs_
21ce8                 | ' 
21ce8                 | ' 
21ce8                 | ' dl_ptr:=@emptydl[0]
21ce8     01 00 00 FF 
21cec     1D 64 06 F1 | 	add	objptr, ##541
21cf0     32 9B 02 F6 | 	mov	arg05, objptr
21cf4     FD 65 86 F1 | 	sub	objptr, #509
21cf8     32 9B 62 FC | 	wrlong	arg05, objptr
21cfc                 | ' 
21cfc                 | ' if cog>0 
21cfc     10 64 06 F1 | 	add	objptr, #16
21d00     32 9B 02 FB | 	rdlong	arg05, objptr
21d04     30 64 86 F1 | 	sub	objptr, #48
21d08     01 9A 56 F2 | 	cmps	arg05, #1 wc
21d0c                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
21d0c     01 92 06 36 |  if_ae	mov	arg01, #1
21d10     58 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
21d14                 | ' xres:=1024
21d14     01 00 00 FF 
21d18     26 64 06 F1 | 	add	objptr, ##550
21d1c     02 00 80 FF 
21d20     32 01 68 FC | 	wrlong	##1024, objptr
21d24                 | ' yres:=600
21d24     04 64 06 F1 | 	add	objptr, #4
21d28     01 00 80 FF 
21d2c     32 B1 68 FC | 	wrlong	##600, objptr
21d30                 | ' ppl:=(timings[3])
21d30     1C 00 00 FF 
21d34     4C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14412
21d38     37 9B 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
21d3c     51 65 86 F1 | 	sub	objptr, #337
21d40     32 9B 62 FC | 	wrlong	arg05, objptr
21d44                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
21d44     10 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, #16
21d48     37 A7 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
21d4c     01 A6 66 F0 | 	shl	local01, #1
21d50     80 64 86 F1 | 	sub	objptr, #128
21d54     32 A7 62 FC | 	wrlong	local01, objptr
21d58                 | ' cpl1:=cpl '' todo remove
21d58     04 64 06 F1 | 	add	objptr, #4
21d5c     32 A7 62 FC | 	wrlong	local01, objptr
21d60                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
21d60     04 00 00 FF 
21d64     1C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##2076
21d68     41 64 86 F1 | 	sub	objptr, #65
21d6c     32 6F 62 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
21d70                 | ' repeat i from 0 to 3
21d70     00 A8 06 F6 | 	mov	local02, #0
21d74     04 00 00 FF 
21d78     00 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##2048
21d7c     08 64 06 F1 | 	add	objptr, #8
21d80     D7 20 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
21d84                 | LR__2730
21d84                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
21d84     54 A7 02 F6 | 	mov	local01, local02
21d88     02 A6 66 F0 | 	shl	local01, #2
21d8c     37 A7 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
21d90     32 9B 02 FB | 	rdlong	arg05, objptr
21d94     11 9A 66 F0 | 	shl	arg05, #17
21d98     53 A7 02 FB | 	rdlong	local01, local01
21d9c     4D A7 02 F1 | 	add	local01, arg05
21da0     80 40 38 FF 
21da4     00 A6 06 F1 | 	add	local01, ##1887502336
21da8     54 9B 02 F6 | 	mov	arg05, local02
21dac     02 9A 66 F0 | 	shl	arg05, #2
21db0     37 9B 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
21db4     4D A7 62 FC | 	wrlong	local01, arg05
21db8     01 A8 06 F1 | 	add	local02, #1
21dbc     04 A8 56 F2 | 	cmps	local02, #4 wc
21dc0     C0 FF 9F CD |  if_b	jmp	#LR__2730
21dc4                 | LR__2731
21dc4     24 64 86 F1 | 	sub	objptr, #36
21dc8     1C 00 00 FF 
21dcc     40 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
21dd0                 | ' 'clkfreq:=timings[9]					    	' set the clock frequency for the mode
21dd0                 | ' 'hubset(timings[10])
21dd0                 | ' waitms(1)                                                   	' wait for stabilization
21dd0     01 92 06 F6 | 	mov	arg01, #1
21dd4     F8 2E B0 FD | 	call	#__system___waitms
21dd8     1C 00 00 FF 
21ddc     6C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14444
21de0     37 A9 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
21de4     61 64 06 F1 | 	add	objptr, #97
21de8     32 A9 62 FC | 	wrlong	local02, objptr
21dec     54 A7 52 F6 | 	abs	local01, local02 wc
21df0     04 A6 46 F0 | 	shr	local01, #4
21df4     53 A7 82 F6 | 	negc	local01, local01
21df8     9C 64 06 F1 | 	add	objptr, #156
21dfc     32 A7 62 FC | 	wrlong	local01, objptr
21e00     A4 64 86 F1 | 	sub	objptr, #164
21e04     32 A9 02 FB | 	rdlong	local02, objptr
21e08     08 64 06 F1 | 	add	objptr, #8
21e0c     32 A7 02 FB | 	rdlong	local01, objptr
21e10     53 A9 02 FD | 	qmul	local02, local01
21e14                 | ' lines:=timings[11]
21e14                 | ' t_lines:=lines/16
21e14                 | ' buflen:=cpl*lines						' framebuffer length in longs
21e14     29 64 86 F1 | 	sub	objptr, #41
21e18     19 A6 C6 F9 | 	decod	local01, #25
21e1c     10 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
21e20     18 A8 62 FD | 	getqx	local02
21e24     32 A9 62 FC | 	wrlong	local02, objptr
21e28     38 64 86 F1 | 	sub	objptr, #56
21e2c     02 A8 66 F0 | 	shl	local02, #2
21e30     54 A7 82 F1 | 	sub	local01, local02
21e34     32 A7 62 FC | 	wrlong	local01, objptr
21e38     FD 64 06 F1 | 	add	objptr, #253
21e3c     32 A9 02 FB | 	rdlong	local02, objptr
21e40     37 9B 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
21e44     4D A9 02 FD | 	qmul	local02, arg05
21e48                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
21e48                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
21e48     F9 64 86 F1 | 	sub	objptr, #249
21e4c                 | ' mode_ptr:=@timings						' set pointers to timings
21e4c     1C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
21e50                 | ' graphmode:=1024+512+192+48							' det global variable
21e50                 | ' makedl(graphmode)							' make a DL for the mode
21e50     03 00 00 FF 
21e54     F0 92 06 F6 | 	mov	arg01, ##1776
21e58     18 A8 62 FD | 	getqx	local02
21e5c     54 A7 82 F1 | 	sub	local01, local02
21e60     32 A7 62 FC | 	wrlong	local01, objptr
21e64     14 64 06 F1 | 	add	objptr, #20
21e68     32 6F 62 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
21e6c     79 64 06 F1 | 	add	objptr, #121
21e70     03 00 80 FF 
21e74     32 E1 69 FC | 	wrlong	##1776, objptr
21e78     91 64 86 F1 | 	sub	objptr, #145
21e7c     1C 00 00 FF 
21e80     40 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
21e84     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
21e88                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
21e88     32 A7 02 FB | 	rdlong	local01, objptr
21e8c     DD 64 06 F1 | 	add	objptr, #221
21e90     32 A7 62 FC | 	wrlong	local01, objptr
21e94                 | ' s_font_ptr:=font_ptr
21e94     D5 64 86 F1 | 	sub	objptr, #213
21e98     32 A7 02 FB | 	rdlong	local01, objptr
21e9c     D9 64 06 F1 | 	add	objptr, #217
21ea0     32 A7 62 FC | 	wrlong	local01, objptr
21ea4                 | ' s_lines:=lines
21ea4     80 64 86 F1 | 	sub	objptr, #128
21ea8     32 A7 02 FB | 	rdlong	local01, objptr
21eac     84 64 06 F1 | 	add	objptr, #132
21eb0     32 A7 62 FC | 	wrlong	local01, objptr
21eb4                 | ' s_buflen:=buflen
21eb4     AD 64 86 F1 | 	sub	objptr, #173
21eb8     32 A7 02 FB | 	rdlong	local01, objptr
21ebc     B5 64 06 F1 | 	add	objptr, #181
21ec0     32 A7 62 FC | 	wrlong	local01, objptr
21ec4                 | ' s_cpl:=cpl
21ec4     94 64 86 F1 | 	sub	objptr, #148
21ec8     32 A7 02 FB | 	rdlong	local01, objptr
21ecc     90 64 06 F1 | 	add	objptr, #144
21ed0     32 A7 62 FC | 	wrlong	local01, objptr
21ed4                 | ' s_cpl1:=cpl
21ed4     90 64 86 F1 | 	sub	objptr, #144
21ed8     32 A7 02 FB | 	rdlong	local01, objptr
21edc     98 64 06 F1 | 	add	objptr, #152
21ee0     32 A7 62 FC | 	wrlong	local01, objptr
21ee4                 | ' st_lines:=t_lines
21ee4     0C 64 06 F1 | 	add	objptr, #12
21ee8     32 A7 02 FB | 	rdlong	local01, objptr
21eec     04 64 06 F1 | 	add	objptr, #4
21ef0     32 A7 62 FC | 	wrlong	local01, objptr
21ef4                 | ' ppl:=ppl/xzoom  
21ef4     28 64 86 F1 | 	sub	objptr, #40
21ef8     32 0F 03 FB | 	rdlong	muldiva_, objptr
21efc     2C 64 06 F1 | 	add	objptr, #44
21f00     32 11 03 FB | 	rdlong	muldivb_, objptr
21f04     05 65 86 F1 | 	sub	objptr, #261
21f08     FA 00 A0 FD | 	call	#divide_
21f0c     D9 64 06 F1 | 	add	objptr, #217
21f10     32 11 63 FC | 	wrlong	muldivb_, objptr
21f14                 | ' s_ppl:=ppl
21f14     1C 64 06 F1 | 	add	objptr, #28
21f18     32 11 63 FC | 	wrlong	muldivb_, objptr
21f1c     F5 64 86 F1 | 	sub	objptr, #245
21f20                 | ' waitms(20)							' wait 
21f20     14 92 06 F6 | 	mov	arg01, #20
21f24     A8 2D B0 FD | 	call	#__system___waitms
21f28                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
21f28     04 64 06 F1 | 	add	objptr, #4
21f2c     32 93 02 FB | 	rdlong	arg01, objptr
21f30     04 64 86 F1 | 	sub	objptr, #4
21f34     32 97 02 FB | 	rdlong	arg03, objptr
21f38     49 97 82 F1 | 	sub	arg03, arg01
21f3c     20 94 06 F6 | 	mov	arg02, #32
21f40     00 98 06 F6 | 	mov	arg04, #0
21f44     01 9A 06 F6 | 	mov	arg05, #1
21f48     0B 00 00 FF 
21f4c     CC 64 06 F1 | 	add	objptr, ##5836
21f50     A0 1F B0 FD | 	call	#_psram_spin2_fill
21f54     0B 00 00 FF 
21f58     CC 64 86 F1 | 	sub	objptr, ##5836
21f5c     E7 F0 03 F6 | 	mov	ptra, fp
21f60     F2 00 A0 FD | 	call	#popregs_
21f64                 | _hg010b_spin2_setmode_ret
21f64     2D 00 64 FD | 	ret
21f68                 | 
21f68                 | ' 
21f68                 | ' '****************************************************************************************************************
21f68                 | ' '                                                                                                             	*
21f68                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
21f68                 | ' '                                                                                                             	*
21f68                 | ' '****************************************************************************************************************
21f68                 | ' 
21f68                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
21f68                 | _hg010b_spin2_makedl
21f68                 | ' 
21f68                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
21f68                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
21f68                 | ' repeat i from 0 to 11                                                           ' clear DL
21f68     00 80 06 F6 | 	mov	_var01, #0
21f6c     ED 65 06 F1 | 	add	objptr, #493
21f70     D7 0E 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
21f74                 | LR__2740
21f74                 | '   displaylist[i]:=0 
21f74     40 83 02 F6 | 	mov	_var02, _var01
21f78     02 82 66 F0 | 	shl	_var02, #2
21f7c     32 83 02 F1 | 	add	_var02, objptr
21f80     41 01 68 FC | 	wrlong	#0, _var02
21f84     01 80 06 F1 | 	add	_var01, #1
21f88     0C 80 56 F2 | 	cmps	_var01, #12 wc
21f8c     E4 FF 9F CD |  if_b	jmp	#LR__2740
21f90                 | LR__2741
21f90                 | '                         ' 
21f90                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
21f90     8C 65 86 F1 | 	sub	objptr, #396
21f94     32 83 02 FB | 	rdlong	_var02, objptr
21f98     14 82 66 F0 | 	shl	_var02, #20
21f9c     01 82 06 F1 | 	add	_var02, #1
21fa0     04 64 86 F1 | 	sub	objptr, #4
21fa4     32 81 02 FB | 	rdlong	_var01, objptr
21fa8     06 80 66 F0 | 	shl	_var01, #6
21fac     40 83 02 F1 | 	add	_var02, _var01
21fb0     90 65 06 F1 | 	add	objptr, #400
21fb4     32 83 62 FC | 	wrlong	_var02, objptr
21fb8     ED 65 86 F1 | 	sub	objptr, #493
21fbc                 | ' displaylist[1]:=buf_ptr<<4+%10  
21fbc     32 83 02 FB | 	rdlong	_var02, objptr
21fc0     04 82 66 F0 | 	shl	_var02, #4
21fc4     02 82 06 F1 | 	add	_var02, #2
21fc8     F1 65 06 F1 | 	add	objptr, #497
21fcc     32 83 62 FC | 	wrlong	_var02, objptr
21fd0                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
21fd0     04 64 86 F1 | 	sub	objptr, #4
21fd4     32 83 02 F6 | 	mov	_var02, objptr
21fd8     CD 65 86 F1 | 	sub	objptr, #461
21fdc     32 83 62 FC | 	wrlong	_var02, objptr
21fe0     20 64 86 F1 | 	sub	objptr, #32
21fe4                 | _hg010b_spin2_makedl_ret
21fe4     2D 00 64 FD | 	ret
21fe8                 | 
21fe8                 | ' 
21fe8                 | ' 
21fe8                 | ' '****************************************************************************************************************
21fe8                 | ' '                                                                        					*
21fe8                 | ' '  Graphic primitives                                                    					*
21fe8                 | ' '                                                                        					*
21fe8                 | ' '****************************************************************************************************************
21fe8                 | ' 
21fe8                 | ' pub setspriteptr(num,ptr)
21fe8                 | _hg010b_spin2_setspriteptr
21fe8                 | ' long[@spr1ptr+12*num]:=ptr
21fe8     32 81 02 F6 | 	mov	_var01, objptr
21fec     11 81 06 F1 | 	add	_var01, #273
21ff0     49 83 02 F6 | 	mov	_var02, arg01
21ff4     01 82 66 F0 | 	shl	_var02, #1
21ff8     49 83 02 F1 | 	add	_var02, arg01
21ffc     02 82 66 F0 | 	shl	_var02, #2
22000     41 81 02 F1 | 	add	_var01, _var02
22004     40 95 62 FC | 	wrlong	arg02, _var01
22008                 | _hg010b_spin2_setspriteptr_ret
22008     2D 00 64 FD | 	ret
2200c                 | 
2200c                 | ' 
2200c                 | ' pub setspritepos(num,x,y)
2200c                 | _hg010b_spin2_setspritepos
2200c                 | ' if y>601
2200c     01 00 00 FF 
22010     5A 96 56 F2 | 	cmps	arg03, ##602 wc
22014                 | '   y:=601
22014     01 00 00 3F 
22018     59 96 06 36 |  if_ae	mov	arg03, ##601
2201c                 | ' if x>1024
2201c     02 00 00 FF 
22020     01 94 56 F2 | 	cmps	arg02, ##1025 wc
22024                 | '   x:=1024
22024     0A 94 C6 39 |  if_ae	decod	arg02, #10
22028                 | ' word[@spr1ptr+12*num+4]:=x
22028     11 65 06 F1 | 	add	objptr, #273
2202c     32 81 02 F6 | 	mov	_var01, objptr
22030     49 83 02 F6 | 	mov	_var02, arg01
22034     01 82 66 F0 | 	shl	_var02, #1
22038     49 83 02 F1 | 	add	_var02, arg01
2203c     02 82 66 F0 | 	shl	_var02, #2
22040     41 81 02 F1 | 	add	_var01, _var02
22044     04 80 06 F1 | 	add	_var01, #4
22048     40 95 52 FC | 	wrword	arg02, _var01
2204c                 | ' word[@spr1ptr+12*num+6]:=y
2204c     32 81 02 F6 | 	mov	_var01, objptr
22050     49 83 02 F6 | 	mov	_var02, arg01
22054     01 82 66 F0 | 	shl	_var02, #1
22058     49 83 02 F1 | 	add	_var02, arg01
2205c     02 82 66 F0 | 	shl	_var02, #2
22060     41 81 02 F1 | 	add	_var01, _var02
22064     06 80 06 F1 | 	add	_var01, #6
22068     40 97 52 FC | 	wrword	arg03, _var01
2206c     11 65 86 F1 | 	sub	objptr, #273
22070                 | _hg010b_spin2_setspritepos_ret
22070     2D 00 64 FD | 	ret
22074                 | 
22074                 | ' 
22074                 | ' pub setspritesize(num,w,h)
22074                 | _hg010b_spin2_setspritesize
22074                 | ' word[@spr1ptr+12*num+8]:=w
22074     11 65 06 F1 | 	add	objptr, #273
22078     32 81 02 F6 | 	mov	_var01, objptr
2207c     49 83 02 F6 | 	mov	_var02, arg01
22080     01 82 66 F0 | 	shl	_var02, #1
22084     49 83 02 F1 | 	add	_var02, arg01
22088     02 82 66 F0 | 	shl	_var02, #2
2208c     41 81 02 F1 | 	add	_var01, _var02
22090     08 80 06 F1 | 	add	_var01, #8
22094     40 95 52 FC | 	wrword	arg02, _var01
22098                 | ' word[@spr1ptr+12*num+10]:=h
22098     32 81 02 F6 | 	mov	_var01, objptr
2209c     49 83 02 F6 | 	mov	_var02, arg01
220a0     01 82 66 F0 | 	shl	_var02, #1
220a4     49 83 02 F1 | 	add	_var02, arg01
220a8     02 82 66 F0 | 	shl	_var02, #2
220ac     41 81 02 F1 | 	add	_var01, _var02
220b0     0A 80 06 F1 | 	add	_var01, #10
220b4     40 97 52 FC | 	wrword	arg03, _var01
220b8     11 65 86 F1 | 	sub	objptr, #273
220bc                 | _hg010b_spin2_setspritesize_ret
220bc     2D 00 64 FD | 	ret
220c0                 | 
220c0                 | ' 
220c0                 | ' 
220c0                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
220c0                 | ' 
220c0                 | ' 
220c0                 | ' pub putpixel(x,y,c)
220c0                 | _hg010b_spin2_putpixel
220c0     04 CA 05 F6 | 	mov	COUNT_, #4
220c4     E8 00 A0 FD | 	call	#pushregs_
220c8     49 A7 02 F6 | 	mov	local01, arg01
220cc                 | ' 
220cc                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
220cc     00 A8 06 F6 | 	mov	local02, #0
220d0     00 A6 56 F2 | 	cmps	local01, #0 wc
220d4     01 A8 66 36 |  if_ae	neg	local02, #1
220d8     E9 64 06 F1 | 	add	objptr, #233
220dc     32 9B 02 FB | 	rdlong	arg05, objptr
220e0     02 9A 66 F0 | 	shl	arg05, #2
220e4     4D A7 52 F2 | 	cmps	local01, arg05 wc
220e8     55 AB A2 F1 | 	subx	local03, local03
220ec     55 A9 02 F5 | 	and	local02, local03
220f0     00 AA 06 F6 | 	mov	local03, #0
220f4     00 94 56 F2 | 	cmps	arg02, #0 wc
220f8     01 AA 66 36 |  if_ae	neg	local03, #1
220fc     55 A9 02 F5 | 	and	local02, local03
22100     04 64 86 F1 | 	sub	objptr, #4
22104     32 AB 02 FB | 	rdlong	local03, objptr
22108     E5 64 86 F1 | 	sub	objptr, #229
2210c     55 95 52 F2 | 	cmps	arg02, local03 wc
22110     56 AD A2 F1 | 	subx	local04, local04
22114     56 A9 CA F7 | 	test	local02, local04 wz
22118     48 00 90 AD |  if_e	jmp	#LR__2750
2211c     DD 64 06 F1 | 	add	objptr, #221
22120     32 93 02 FB | 	rdlong	arg01, objptr
22124     14 64 06 F1 | 	add	objptr, #20
22128     32 AD 02 FB | 	rdlong	local04, objptr
2212c     02 AC 66 F0 | 	shl	local04, #2
22130     4A AD 02 FD | 	qmul	local04, arg02
22134                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
22134     4B 95 02 F6 | 	mov	arg02, arg03
22138     01 96 06 F6 | 	mov	arg03, #1
2213c     00 98 06 F6 | 	mov	arg04, #0
22140     01 9A 06 F6 | 	mov	arg05, #1
22144     0A 00 00 FF 
22148     DB 65 06 F1 | 	add	objptr, ##5595
2214c     18 AC 62 FD | 	getqx	local04
22150     53 AD 02 F1 | 	add	local04, local01
22154     56 93 02 F1 | 	add	arg01, local04
22158     98 1D B0 FD | 	call	#_psram_spin2_fill
2215c     0B 00 00 FF 
22160     CC 64 86 F1 | 	sub	objptr, ##5836
22164                 | LR__2750
22164     E7 F0 03 F6 | 	mov	ptra, fp
22168     F2 00 A0 FD | 	call	#popregs_
2216c                 | _hg010b_spin2_putpixel_ret
2216c     2D 00 64 FD | 	ret
22170                 | 
22170                 | ' 
22170                 | ' pub putpixel2(x,y,c)
22170                 | _hg010b_spin2_putpixel2
22170     02 CA 05 F6 | 	mov	COUNT_, #2
22174     E8 00 A0 FD | 	call	#pushregs_
22178     DD 64 06 F1 | 	add	objptr, #221
2217c     32 A7 02 FB | 	rdlong	local01, objptr
22180     14 64 06 F1 | 	add	objptr, #20
22184     32 9B 02 FB | 	rdlong	arg05, objptr
22188     02 9A 66 F0 | 	shl	arg05, #2
2218c     4A 9B 02 FD | 	qmul	arg05, arg02
22190                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
22190     4B 95 02 F6 | 	mov	arg02, arg03
22194     01 96 06 F6 | 	mov	arg03, #1
22198     00 98 06 F6 | 	mov	arg04, #0
2219c     01 9A 06 F6 | 	mov	arg05, #1
221a0     0A 00 00 FF 
221a4     DB 65 06 F1 | 	add	objptr, ##5595
221a8     18 A8 62 FD | 	getqx	local02
221ac     49 A9 02 F1 | 	add	local02, arg01
221b0     54 A7 02 F1 | 	add	local01, local02
221b4     53 93 02 F6 | 	mov	arg01, local01
221b8     38 1D B0 FD | 	call	#_psram_spin2_fill
221bc     0B 00 00 FF 
221c0     CC 64 86 F1 | 	sub	objptr, ##5836
221c4     E7 F0 03 F6 | 	mov	ptra, fp
221c8     F2 00 A0 FD | 	call	#popregs_
221cc                 | _hg010b_spin2_putpixel2_ret
221cc     2D 00 64 FD | 	ret
221d0                 | 
221d0                 | ' 
221d0                 | ' pub getpixel2(x,y): c 
221d0                 | _hg010b_spin2_getpixel2
221d0     02 CA 05 F6 | 	mov	COUNT_, #2
221d4     E8 00 A0 FD | 	call	#pushregs_
221d8     0C F0 07 F1 | 	add	ptra, #12
221dc     04 CE 05 F1 | 	add	fp, #4
221e0     E7 92 62 FC | 	wrlong	arg01, fp
221e4     04 CE 05 F1 | 	add	fp, #4
221e8     E7 94 62 FC | 	wrlong	arg02, fp
221ec     08 CE 85 F1 | 	sub	fp, #8
221f0     E7 00 68 FC | 	wrlong	#0, fp
221f4     E7 92 02 F6 | 	mov	arg01, fp
221f8     DD 64 06 F1 | 	add	objptr, #221
221fc     32 95 02 FB | 	rdlong	arg02, objptr
22200     14 64 06 F1 | 	add	objptr, #20
22204     32 97 02 FB | 	rdlong	arg03, objptr
22208     02 96 66 F0 | 	shl	arg03, #2
2220c     08 CE 05 F1 | 	add	fp, #8
22210     E7 7A 02 FB | 	rdlong	result1, fp
22214     3D 97 02 FD | 	qmul	arg03, result1
22218                 | ' 
22218                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
22218     04 CE 85 F1 | 	sub	fp, #4
2221c     E7 A6 02 FB | 	rdlong	local01, fp
22220     04 CE 85 F1 | 	sub	fp, #4
22224     01 96 06 F6 | 	mov	arg03, #1
22228     0A 00 00 FF 
2222c     DB 65 06 F1 | 	add	objptr, ##5595
22230     18 A8 62 FD | 	getqx	local02
22234     53 A9 02 F1 | 	add	local02, local01
22238     54 95 02 F1 | 	add	arg02, local02
2223c     7C 1B B0 FD | 	call	#_psram_spin2_read1
22240     0B 00 00 FF 
22244     CC 64 86 F1 | 	sub	objptr, ##5836
22248                 | ' return c
22248     E7 7A 02 FB | 	rdlong	result1, fp
2224c     E7 F0 03 F6 | 	mov	ptra, fp
22250     F2 00 A0 FD | 	call	#popregs_
22254                 | _hg010b_spin2_getpixel2_ret
22254     2D 00 64 FD | 	ret
22258                 | 
22258                 | '   
22258                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
22258                 | ' 
22258                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
22258                 | _hg010b_spin2_fastline
22258     02 CA 05 F6 | 	mov	COUNT_, #2
2225c     E8 00 A0 FD | 	call	#pushregs_
22260     49 A7 02 F6 | 	mov	local01, arg01
22264     4A A9 02 F6 | 	mov	local02, arg02
22268                 | ' 
22268                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
22268     00 96 56 F2 | 	cmps	arg03, #0 wc
2226c     F4 00 90 CD |  if_b	jmp	#LR__2760
22270     01 00 00 FF 
22274     2A 64 06 F1 | 	add	objptr, ##554
22278     32 9B 02 FB | 	rdlong	arg05, objptr
2227c     01 00 00 FF 
22280     2A 64 86 F1 | 	sub	objptr, ##554
22284     4D 97 52 F2 | 	cmps	arg03, arg05 wc
22288     D8 00 90 3D |  if_ae	jmp	#LR__2760
2228c     00 A6 56 F2 | 	cmps	local01, #0 wc
22290     00 A8 56 C2 |  if_b	cmps	local02, #0 wc
22294     CC 00 90 CD |  if_b	jmp	#LR__2760
22298     01 00 00 FF 
2229c     26 64 06 F1 | 	add	objptr, ##550
222a0     32 9B 02 FB | 	rdlong	arg05, objptr
222a4     01 00 00 FF 
222a8     26 64 86 F1 | 	sub	objptr, ##550
222ac     4D A7 5A F2 | 	cmps	local01, arg05 wcz
222b0     01 00 00 1F 
222b4     26 64 06 11 |  if_a	add	objptr, ##550
222b8     32 93 02 1B |  if_a	rdlong	arg01, objptr
222bc     01 00 00 1F 
222c0     26 64 86 11 |  if_a	sub	objptr, ##550
222c4     49 A9 5A 12 |  if_a	cmps	local02, arg01 wcz
222c8                 | '   return
222c8     98 00 90 1D |  if_a	jmp	#LR__2760
222cc     54 A7 5A F2 | 	cmps	local01, local02 wcz
222d0     53 9B 02 16 |  if_a	mov	arg05, local01
222d4     54 A7 02 16 |  if_a	mov	local01, local02
222d8     4D A9 02 16 |  if_a	mov	local02, arg05
222dc     00 A6 56 F2 | 	cmps	local01, #0 wc
222e0     00 A6 06 C6 |  if_b	mov	local01, #0
222e4     01 00 00 FF 
222e8     26 64 06 F1 | 	add	objptr, ##550
222ec     32 9B 02 FB | 	rdlong	arg05, objptr
222f0     01 00 00 FF 
222f4     26 64 86 F1 | 	sub	objptr, ##550
222f8     4D A9 52 F2 | 	cmps	local02, arg05 wc
222fc     01 00 00 3F 
22300     26 64 06 31 |  if_ae	add	objptr, ##550
22304     32 A9 02 3B |  if_ae	rdlong	local02, objptr
22308     01 00 00 3F 
2230c     26 64 86 31 |  if_ae	sub	objptr, ##550
22310     DD 64 06 F1 | 	add	objptr, #221
22314     32 93 02 FB | 	rdlong	arg01, objptr
22318     14 64 06 F1 | 	add	objptr, #20
2231c     32 9B 02 FB | 	rdlong	arg05, objptr
22320     02 9A 66 F0 | 	shl	arg05, #2
22324     4B 9B 02 FD | 	qmul	arg05, arg03
22328                 | ' if x1>x2
22328                 | '   x1,x2:=x2,x1
22328                 | ' if x1<0 
22328                 | '   x1:=0
22328                 | ' if x2>=xres
22328                 | '   x2:=xres-1  
22328     01 A8 86 31 |  if_ae	sub	local02, #1
2232c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
2232c     01 96 06 F6 | 	mov	arg03, #1
22330     54 97 02 F1 | 	add	arg03, local02
22334     53 97 82 F1 | 	sub	arg03, local01
22338     4C 95 02 F6 | 	mov	arg02, arg04
2233c     00 98 06 F6 | 	mov	arg04, #0
22340     01 9A 06 F6 | 	mov	arg05, #1
22344     0A 00 00 FF 
22348     DB 65 06 F1 | 	add	objptr, ##5595
2234c     18 A8 62 FD | 	getqx	local02
22350     53 A9 02 F1 | 	add	local02, local01
22354     54 93 02 F1 | 	add	arg01, local02
22358     98 1B B0 FD | 	call	#_psram_spin2_fill
2235c     0B 00 00 FF 
22360     CC 64 86 F1 | 	sub	objptr, ##5836
22364                 | LR__2760
22364     E7 F0 03 F6 | 	mov	ptra, fp
22368     F2 00 A0 FD | 	call	#popregs_
2236c                 | _hg010b_spin2_fastline_ret
2236c     2D 00 64 FD | 	ret
22370                 | 
22370                 | ' 
22370                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
22370                 | _hg010b_spin2_draw
22370     0E CA 05 F6 | 	mov	COUNT_, #14
22374     E8 00 A0 FD | 	call	#pushregs_
22378     49 A7 02 F6 | 	mov	local01, arg01
2237c     4A A9 02 F6 | 	mov	local02, arg02
22380     4B AB 02 F6 | 	mov	local03, arg03
22384     4C AD 02 F6 | 	mov	local04, arg04
22388     4D AF 02 F6 | 	mov	local05, arg05
2238c                 | ' 
2238c                 | ' if (y1==y2)
2238c     56 A9 0A F2 | 	cmp	local02, local04 wz
22390     18 00 90 5D |  if_ne	jmp	#LR__2770
22394                 | '   fastline(x1,x2,y1,c)
22394     53 93 02 F6 | 	mov	arg01, local01
22398     55 95 02 F6 | 	mov	arg02, local03
2239c     54 97 02 F6 | 	mov	arg03, local02
223a0     57 99 02 F6 | 	mov	arg04, local05
223a4     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
223a8     F8 00 90 FD | 	jmp	#LR__2776
223ac                 | LR__2770
223ac                 | ' else  
223ac                 | '   x:=x1
223ac     53 B1 02 F6 | 	mov	local06, local01
223b0                 | '   y:=y1
223b0     54 B3 02 F6 | 	mov	local07, local02
223b4                 | ' 
223b4                 | '   if (x1<x2) 
223b4     55 A7 52 F2 | 	cmps	local01, local03 wc
223b8                 | '     xi:=1
223b8     01 B4 06 C6 |  if_b	mov	local08, #1
223bc                 | '     dx:=x2-x1
223bc     55 B7 02 C6 |  if_b	mov	local09, local03
223c0     53 B7 82 C1 |  if_b	sub	local09, local01
223c4                 | '   else
223c4                 | '     xi:=-1
223c4     01 B4 66 36 |  if_ae	neg	local08, #1
223c8                 | '     dx:=x1-x2
223c8     55 A7 82 31 |  if_ae	sub	local01, local03
223cc     53 B7 02 36 |  if_ae	mov	local09, local01
223d0                 | '   
223d0                 | '   if (y1<y2) 
223d0     56 A9 52 F2 | 	cmps	local02, local04 wc
223d4                 | '     yi:=1
223d4     01 B8 06 C6 |  if_b	mov	local10, #1
223d8                 | '     dy:=y2-y1
223d8     56 BB 02 C6 |  if_b	mov	local11, local04
223dc     54 BB 82 C1 |  if_b	sub	local11, local02
223e0                 | '   else
223e0                 | '     yi:=-1
223e0     01 B8 66 36 |  if_ae	neg	local10, #1
223e4                 | '     dy:=y1-y2
223e4     56 A9 82 31 |  if_ae	sub	local02, local04
223e8     54 BB 02 36 |  if_ae	mov	local11, local02
223ec                 | ' 
223ec                 | '   putpixel(x,y,c)
223ec     57 97 02 F6 | 	mov	arg03, local05
223f0     58 93 02 F6 | 	mov	arg01, local06
223f4     59 95 02 F6 | 	mov	arg02, local07
223f8     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
223fc                 | ' 
223fc                 | '   if (dx>dy)
223fc     5D B7 5A F2 | 	cmps	local09, local11 wcz
22400     50 00 90 ED |  if_be	jmp	#LR__2772
22404                 | '     ai:=(dy-dx)*2
22404     5D BD 02 F6 | 	mov	local12, local11
22408     5B BD 82 F1 | 	sub	local12, local09
2240c     01 BC 66 F0 | 	shl	local12, #1
22410                 | '     bi:=dy*2
22410     01 BA 66 F0 | 	shl	local11, #1
22414     5D BF 02 F6 | 	mov	local13, local11
22418                 | '     d:= bi-dx
22418     5F C1 02 F6 | 	mov	local14, local13
2241c     5B C1 82 F1 | 	sub	local14, local09
22420                 | '     repeat while (x<>x2) 
22420                 | LR__2771
22420     55 B1 0A F2 | 	cmp	local06, local03 wz
22424     7C 00 90 AD |  if_e	jmp	#LR__2775
22428                 | '       if (d>=0) 
22428     00 C0 56 F2 | 	cmps	local14, #0 wc
2242c                 | '         x+=xi
2242c     5A B1 02 31 |  if_ae	add	local06, local08
22430                 | '         y+=yi
22430     5C B3 02 31 |  if_ae	add	local07, local10
22434                 | '         d+=ai
22434     5E C1 02 31 |  if_ae	add	local14, local12
22438                 | '       else
22438                 | '         d+=bi
22438     5F C1 02 C1 |  if_b	add	local14, local13
2243c                 | '         x+=xi
2243c     5A B1 02 C1 |  if_b	add	local06, local08
22440                 | '       putpixel(x,y,c)
22440     58 93 02 F6 | 	mov	arg01, local06
22444     59 95 02 F6 | 	mov	arg02, local07
22448     57 97 02 F6 | 	mov	arg03, local05
2244c     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
22450     CC FF 9F FD | 	jmp	#LR__2771
22454                 | LR__2772
22454                 | '   else
22454                 | '     ai:=(dx-dy)*2
22454     5B BD 02 F6 | 	mov	local12, local09
22458     5D BD 82 F1 | 	sub	local12, local11
2245c     01 BC 66 F0 | 	shl	local12, #1
22460                 | '     bi:=dx*2
22460     01 B6 66 F0 | 	shl	local09, #1
22464     5B BF 02 F6 | 	mov	local13, local09
22468                 | '     d:=bi-dy
22468     5F C1 02 F6 | 	mov	local14, local13
2246c     5D C1 82 F1 | 	sub	local14, local11
22470                 | '     repeat while (y<>y2)
22470                 | LR__2773
22470     56 B3 0A F2 | 	cmp	local07, local04 wz
22474     2C 00 90 AD |  if_e	jmp	#LR__2774
22478                 | '       if (d>=0)
22478     00 C0 56 F2 | 	cmps	local14, #0 wc
2247c                 | '         x+=xi
2247c     5A B1 02 31 |  if_ae	add	local06, local08
22480                 | '         y+=yi
22480     5C B3 02 31 |  if_ae	add	local07, local10
22484                 | '         d+=ai
22484     5E C1 02 31 |  if_ae	add	local14, local12
22488                 | '       else
22488                 | '         d+=bi
22488     5F C1 02 C1 |  if_b	add	local14, local13
2248c                 | '         y+=yi
2248c     5C B3 02 C1 |  if_b	add	local07, local10
22490                 | '       putpixel(x, y,c)
22490     58 93 02 F6 | 	mov	arg01, local06
22494     59 95 02 F6 | 	mov	arg02, local07
22498     57 97 02 F6 | 	mov	arg03, local05
2249c     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
224a0     CC FF 9F FD | 	jmp	#LR__2773
224a4                 | LR__2774
224a4                 | LR__2775
224a4                 | LR__2776
224a4     E7 F0 03 F6 | 	mov	ptra, fp
224a8     F2 00 A0 FD | 	call	#popregs_
224ac                 | _hg010b_spin2_draw_ret
224ac     2D 00 64 FD | 	ret
224b0                 | 
224b0                 | '  
224b0                 | ' pub fillpush(val) 
224b0                 | _hg010b_spin2_fillpush
224b0                 | ' fillstack[fillptr]:=val
224b0     0B 00 00 FF 
224b4     BA 64 06 F1 | 	add	objptr, ##5818
224b8     32 81 02 FB | 	rdlong	_var01, objptr
224bc     02 80 66 F0 | 	shl	_var01, #2
224c0     0A 00 00 FF 
224c4     00 64 86 F1 | 	sub	objptr, ##5120
224c8     32 81 02 F1 | 	add	_var01, objptr
224cc     40 93 62 FC | 	wrlong	arg01, _var01
224d0                 | ' fillptr+=1   
224d0     0A 00 00 FF 
224d4     00 64 06 F1 | 	add	objptr, ##5120
224d8     32 81 02 FB | 	rdlong	_var01, objptr
224dc     01 80 06 F1 | 	add	_var01, #1
224e0     32 81 62 FC | 	wrlong	_var01, objptr
224e4     0B 00 00 FF 
224e8     BA 64 86 F1 | 	sub	objptr, ##5818
224ec                 | _hg010b_spin2_fillpush_ret
224ec     2D 00 64 FD | 	ret
224f0                 | 
224f0                 | ' 
224f0                 | '     
224f0                 | ' pub fillpop() : val
224f0                 | _hg010b_spin2_fillpop
224f0                 | ' 
224f0                 | ' fillptr-=1
224f0     0B 00 00 FF 
224f4     BA 64 06 F1 | 	add	objptr, ##5818
224f8     32 7B 02 FB | 	rdlong	result1, objptr
224fc     01 7A 86 F1 | 	sub	result1, #1
22500     32 7B 62 FC | 	wrlong	result1, objptr
22504                 | ' if fillptr<0
22504     0B 00 00 FF 
22508     BA 64 86 F1 | 	sub	objptr, ##5818
2250c     00 7A 56 F2 | 	cmps	result1, #0 wc
22510                 | '   fillptr:=0
22510     0B 00 00 CF 
22514     BA 64 06 C1 |  if_b	add	objptr, ##5818
22518     32 01 68 CC |  if_b	wrlong	#0, objptr
2251c     0B 00 00 CF 
22520     BA 64 86 C1 |  if_b	sub	objptr, ##5818
22524                 | '   val:=-12345
22524     E7 FF 7F CF 
22528     C7 81 06 C6 |  if_b	mov	_var01, ##-12345
2252c     28 00 90 CD |  if_b	jmp	#LR__2780
22530                 | ' else 
22530                 | '   val:=fillstack[fillptr]
22530     0B 00 00 FF 
22534     BA 64 06 F1 | 	add	objptr, ##5818
22538     32 81 02 FB | 	rdlong	_var01, objptr
2253c     02 80 66 F0 | 	shl	_var01, #2
22540     0A 00 00 FF 
22544     00 64 86 F1 | 	sub	objptr, ##5120
22548     32 81 02 F1 | 	add	_var01, objptr
2254c     40 81 02 FB | 	rdlong	_var01, _var01
22550     01 00 00 FF 
22554     BA 64 86 F1 | 	sub	objptr, ##698
22558                 | LR__2780
22558                 | ' return val
22558     40 7B 02 F6 | 	mov	result1, _var01
2255c                 | _hg010b_spin2_fillpop_ret
2255c     2D 00 64 FD | 	ret
22560                 | 
22560                 | ' 
22560                 | '       
22560                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
22560                 | _hg010b_spin2_fill
22560     0B CA 05 F6 | 	mov	COUNT_, #11
22564     E8 00 A0 FD | 	call	#pushregs_
22568                 | ' 
22568                 | ' newcolor:=newcolor & 255
22568     4B A7 E2 F8 | 	getbyte	local01, arg03, #0
2256c                 | ' oldcolor:=oldcolor & 255
2256c     4C A9 E2 F8 | 	getbyte	local02, arg04, #0
22570                 | ' 
22570                 | ' if (oldcolor == newcolor) 
22570     53 A9 0A F2 | 	cmp	local02, local01 wz
22574                 | '   return
22574     70 02 90 AD |  if_e	jmp	#LR__2799
22578                 | ' 
22578                 | ' fillptr:=0
22578     0B 00 00 FF 
2257c     BA 64 06 F1 | 	add	objptr, ##5818
22580     32 01 68 FC | 	wrlong	#0, objptr
22584                 | ' fillmax:=0
22584     04 64 06 F1 | 	add	objptr, #4
22588     32 01 68 FC | 	wrlong	#0, objptr
2258c     0B 00 00 FF 
22590     BE 64 86 F1 | 	sub	objptr, ##5822
22594                 | ' fillpush(x)
22594     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
22598                 | ' fillpush(y)
22598     4A 93 02 F6 | 	mov	arg01, arg02
2259c     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
225a0                 | ' y:=fillpop()
225a0     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
225a4     3D AB 02 F6 | 	mov	local03, result1
225a8                 | ' x:=fillpop()
225a8     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
225ac     3D AD 02 F6 | 	mov	local04, result1
225b0                 | ' 'pinhigh(38)
225b0                 | ' repeat while (x>-1)       
225b0                 | LR__2790
225b0     00 AC 56 F2 | 	cmps	local04, #0 wc
225b4     30 02 90 CD |  if_b	jmp	#LR__2798
225b8                 | '  ' pintoggle(39)
225b8                 | '   x1 := x
225b8     56 AF 02 F6 | 	mov	local05, local04
225bc                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
225bc                 | LR__2791
225bc     00 B0 06 F6 | 	mov	local06, #0
225c0     00 B2 06 F6 | 	mov	local07, #0
225c4     00 AE 56 F2 | 	cmps	local05, #0 wc
225c8     01 B2 66 36 |  if_ae	neg	local07, #1
225cc     00 B2 0E F2 | 	cmp	local07, #0 wz
225d0     00 B0 26 56 |  if_ne	not	local06, #0
225d4     00 B4 06 F6 | 	mov	local08, #0
225d8     00 B6 06 F6 | 	mov	local09, #0
225dc     55 95 02 F6 | 	mov	arg02, local03
225e0     57 93 02 F6 | 	mov	arg01, local05
225e4     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
225e8     54 7B 0A F2 | 	cmp	result1, local02 wz
225ec     00 B6 26 A6 |  if_e	not	local09, #0
225f0     00 B6 0E F2 | 	cmp	local09, #0 wz
225f4     00 B4 26 56 |  if_ne	not	local08, #0
225f8     5A B1 CA F7 | 	test	local06, local08 wz
225fc                 | '     x1--
225fc     01 AE 86 51 |  if_ne	sub	local05, #1
22600     B8 FF 9F 5D |  if_ne	jmp	#LR__2791
22604                 | '   x1++
22604     01 AE 06 F1 | 	add	local05, #1
22608                 | '   spanabove := 0
22608     00 B8 06 F6 | 	mov	local10, #0
2260c                 | '   spanbelow := 0
2260c     00 BA 06 F6 | 	mov	local11, #0
22610                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
22610                 | LR__2792
22610     00 B0 06 F6 | 	mov	local06, #0
22614     02 00 00 FF 
22618     00 AE 56 F2 | 	cmps	local05, ##1024 wc
2261c     00 B0 26 C6 |  if_b	not	local06, #0
22620     00 B4 06 F6 | 	mov	local08, #0
22624     00 B6 06 F6 | 	mov	local09, #0
22628     55 95 02 F6 | 	mov	arg02, local03
2262c     57 93 02 F6 | 	mov	arg01, local05
22630     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
22634     54 7B 0A F2 | 	cmp	result1, local02 wz
22638     00 B6 26 A6 |  if_e	not	local09, #0
2263c     00 B6 0E F2 | 	cmp	local09, #0 wz
22640     00 B4 26 56 |  if_ne	not	local08, #0
22644     5A B1 CA F7 | 	test	local06, local08 wz
22648     88 01 90 AD |  if_e	jmp	#LR__2797
2264c                 | '     putpixel2 (x1,y, newcolor & 255)
2264c     53 97 E2 F8 | 	getbyte	arg03, local01, #0
22650     57 93 02 F6 | 	mov	arg01, local05
22654     55 95 02 F6 | 	mov	arg02, local03
22658     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
2265c                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
2265c     00 B0 06 F6 | 	mov	local06, #0
22660     00 B2 06 F6 | 	mov	local07, #0
22664     00 B8 0E F2 | 	cmp	local10, #0 wz
22668     01 AA 56 A2 |  if_e	cmps	local03, #1 wc
2266c     01 B2 66 26 |  if_nc_and_z	neg	local07, #1
22670     00 B2 0E F2 | 	cmp	local07, #0 wz
22674     00 B0 26 56 |  if_ne	not	local06, #0
22678     00 B4 06 F6 | 	mov	local08, #0
2267c     00 B6 06 F6 | 	mov	local09, #0
22680     55 95 02 F6 | 	mov	arg02, local03
22684     01 94 86 F1 | 	sub	arg02, #1
22688     57 93 02 F6 | 	mov	arg01, local05
2268c     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
22690     54 7B 0A F2 | 	cmp	result1, local02 wz
22694     00 B6 26 A6 |  if_e	not	local09, #0
22698     00 B6 0E F2 | 	cmp	local09, #0 wz
2269c     00 B4 26 56 |  if_ne	not	local08, #0
226a0     5A B1 CA F7 | 	test	local06, local08 wz
226a4     1C 00 90 AD |  if_e	jmp	#LR__2793
226a8                 | '       fillpush(x1)
226a8     57 93 02 F6 | 	mov	arg01, local05
226ac     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
226b0                 | '       fillpush(y-1)
226b0     55 93 02 F6 | 	mov	arg01, local03
226b4     01 92 86 F1 | 	sub	arg01, #1
226b8     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
226bc                 | '       spanabove := 1 
226bc     01 B8 06 F6 | 	mov	local10, #1
226c0     4C 00 90 FD | 	jmp	#LR__2794
226c4                 | LR__2793
226c4                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
226c4     00 B0 06 F6 | 	mov	local06, #0
226c8     00 B2 06 F6 | 	mov	local07, #0
226cc     00 B8 0E F2 | 	cmp	local10, #0 wz
226d0     01 AA 56 52 |  if_ne	cmps	local03, #1 wc
226d4     01 B2 66 16 |  if_a	neg	local07, #1
226d8     00 B2 0E F2 | 	cmp	local07, #0 wz
226dc     00 B0 26 56 |  if_ne	not	local06, #0
226e0     00 B4 06 F6 | 	mov	local08, #0
226e4     00 B6 06 F6 | 	mov	local09, #0
226e8     55 95 02 F6 | 	mov	arg02, local03
226ec     01 94 86 F1 | 	sub	arg02, #1
226f0     57 93 02 F6 | 	mov	arg01, local05
226f4     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
226f8     54 7B 0A F2 | 	cmp	result1, local02 wz
226fc     00 B6 26 56 |  if_ne	not	local09, #0
22700     00 B6 0E F2 | 	cmp	local09, #0 wz
22704     00 B4 26 56 |  if_ne	not	local08, #0
22708     5A B1 CA F7 | 	test	local06, local08 wz
2270c                 | '       spanabove := 0 
2270c     00 B8 06 56 |  if_ne	mov	local10, #0
22710                 | LR__2794
22710                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
22710     00 B0 06 F6 | 	mov	local06, #0
22714     00 B2 06 F6 | 	mov	local07, #0
22718     00 BA 0E F2 | 	cmp	local11, #0 wz
2271c     01 00 00 AF 
22720     3F AA 56 A2 |  if_e	cmps	local03, ##575 wc
22724     01 B2 66 86 |  if_c_and_z	neg	local07, #1
22728     00 B2 0E F2 | 	cmp	local07, #0 wz
2272c     00 B0 26 56 |  if_ne	not	local06, #0
22730     00 B4 06 F6 | 	mov	local08, #0
22734     00 B6 06 F6 | 	mov	local09, #0
22738     55 95 02 F6 | 	mov	arg02, local03
2273c     01 94 06 F1 | 	add	arg02, #1
22740     57 93 02 F6 | 	mov	arg01, local05
22744     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
22748     54 7B 0A F2 | 	cmp	result1, local02 wz
2274c     00 B6 26 A6 |  if_e	not	local09, #0
22750     00 B6 0E F2 | 	cmp	local09, #0 wz
22754     00 B4 26 56 |  if_ne	not	local08, #0
22758     5A B1 CA F7 | 	test	local06, local08 wz
2275c     1C 00 90 AD |  if_e	jmp	#LR__2795
22760                 | '       fillpush(x1)
22760     57 93 02 F6 | 	mov	arg01, local05
22764     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
22768                 | '       fillpush(y + 1)
22768     55 93 02 F6 | 	mov	arg01, local03
2276c     01 92 06 F1 | 	add	arg01, #1
22770     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
22774                 | '       spanBelow := 1
22774     01 BA 06 F6 | 	mov	local11, #1
22778     50 00 90 FD | 	jmp	#LR__2796
2277c                 | LR__2795
2277c                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
2277c     00 B0 06 F6 | 	mov	local06, #0
22780     00 B2 06 F6 | 	mov	local07, #0
22784     00 BA 0E F2 | 	cmp	local11, #0 wz
22788     01 00 00 5F 
2278c     3F AA 56 52 |  if_ne	cmps	local03, ##575 wc
22790     01 B2 66 46 |  if_c_and_nz	neg	local07, #1
22794     00 B2 0E F2 | 	cmp	local07, #0 wz
22798     00 B0 26 56 |  if_ne	not	local06, #0
2279c     00 B4 06 F6 | 	mov	local08, #0
227a0     00 B6 06 F6 | 	mov	local09, #0
227a4     55 95 02 F6 | 	mov	arg02, local03
227a8     01 94 06 F1 | 	add	arg02, #1
227ac     57 93 02 F6 | 	mov	arg01, local05
227b0     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
227b4     54 7B 0A F2 | 	cmp	result1, local02 wz
227b8     00 B6 26 56 |  if_ne	not	local09, #0
227bc     00 B6 0E F2 | 	cmp	local09, #0 wz
227c0     00 B4 26 56 |  if_ne	not	local08, #0
227c4     5A B1 CA F7 | 	test	local06, local08 wz
227c8                 | '       spanbelow := 0
227c8     00 BA 06 56 |  if_ne	mov	local11, #0
227cc                 | LR__2796
227cc                 | '     x1++
227cc     01 AE 06 F1 | 	add	local05, #1
227d0     3C FE 9F FD | 	jmp	#LR__2792
227d4                 | LR__2797
227d4                 | '   y:=fillpop()
227d4     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
227d8     3D AB 02 F6 | 	mov	local03, result1
227dc                 | '   x:=fillpop()
227dc     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
227e0     3D AD 02 F6 | 	mov	local04, result1
227e4     C8 FD 9F FD | 	jmp	#LR__2790
227e8                 | LR__2798
227e8                 | LR__2799
227e8     E7 F0 03 F6 | 	mov	ptra, fp
227ec     F2 00 A0 FD | 	call	#popregs_
227f0                 | _hg010b_spin2_fill_ret
227f0     2D 00 64 FD | 	ret
227f4                 | 
227f4                 | ' 'pinlow(38)    
227f4                 | ' 
227f4                 | ' '-- A filled circle -----------------------------------------------------
227f4                 | ' 
227f4                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
227f4                 | _hg010b_spin2_fcircle
227f4     08 CA 05 F6 | 	mov	COUNT_, #8
227f8     E8 00 A0 FD | 	call	#pushregs_
227fc     4B A7 02 F6 | 	mov	local01, arg03
22800     FF FF 7F FF 
22804     FE A7 06 FD | 	qmul	local01, ##-2
22808     49 A9 02 F6 | 	mov	local02, arg01
2280c     4A AB 02 F6 | 	mov	local03, arg02
22810     4C AD 02 F6 | 	mov	local04, arg04
22814                 | ' 
22814                 | ' d:=5-4*r
22814     53 99 02 F6 | 	mov	arg04, local01
22818     02 98 66 F0 | 	shl	arg04, #2
2281c     05 AE 06 F6 | 	mov	local05, #5
22820     4C AF 82 F1 | 	sub	local05, arg04
22824                 | ' x:=0
22824     00 B0 06 F6 | 	mov	local06, #0
22828                 | ' y:=r
22828                 | ' da:=(-2*r+5)*4
22828                 | ' db:=3*4
22828     0C B2 06 F6 | 	mov	local07, #12
2282c                 | ' repeat while (x<=y) 
2282c     18 B4 62 FD | 	getqx	local08
22830     05 B4 06 F1 | 	add	local08, #5
22834     02 B4 66 F0 | 	shl	local08, #2
22838                 | LR__2800
22838     53 B1 5A F2 | 	cmps	local06, local01 wcz
2283c     B4 00 90 1D |  if_a	jmp	#LR__2802
22840                 | '   fastline(x0-x,x0+x,y0-y,c)
22840     54 93 02 F6 | 	mov	arg01, local02
22844     58 93 82 F1 | 	sub	arg01, local06
22848     54 95 02 F6 | 	mov	arg02, local02
2284c     58 95 02 F1 | 	add	arg02, local06
22850     55 97 02 F6 | 	mov	arg03, local03
22854     53 97 82 F1 | 	sub	arg03, local01
22858     56 99 02 F6 | 	mov	arg04, local04
2285c     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
22860                 | '   fastline(x0-x,x0+x,y0+y,c)
22860     54 93 02 F6 | 	mov	arg01, local02
22864     58 93 82 F1 | 	sub	arg01, local06
22868     54 95 02 F6 | 	mov	arg02, local02
2286c     58 95 02 F1 | 	add	arg02, local06
22870     55 97 02 F6 | 	mov	arg03, local03
22874     53 97 02 F1 | 	add	arg03, local01
22878     56 99 02 F6 | 	mov	arg04, local04
2287c     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
22880                 | '   fastline(x0-y,x0+y,y0-x,c)
22880     54 93 02 F6 | 	mov	arg01, local02
22884     53 93 82 F1 | 	sub	arg01, local01
22888     54 95 02 F6 | 	mov	arg02, local02
2288c     53 95 02 F1 | 	add	arg02, local01
22890     55 97 02 F6 | 	mov	arg03, local03
22894     58 97 82 F1 | 	sub	arg03, local06
22898     56 99 02 F6 | 	mov	arg04, local04
2289c     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
228a0                 | '   fastline(x0-y,x0+y,y0+x,c)
228a0     54 93 02 F6 | 	mov	arg01, local02
228a4     53 93 82 F1 | 	sub	arg01, local01
228a8     54 95 02 F6 | 	mov	arg02, local02
228ac     53 95 02 F1 | 	add	arg02, local01
228b0     55 97 02 F6 | 	mov	arg03, local03
228b4     58 97 02 F1 | 	add	arg03, local06
228b8     56 99 02 F6 | 	mov	arg04, local04
228bc     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
228c0                 | '   if d>0 
228c0     01 AE 56 F2 | 	cmps	local05, #1 wc
228c4     18 00 90 CD |  if_b	jmp	#LR__2801
228c8                 | '     d+=da
228c8     5A AF 02 F1 | 	add	local05, local08
228cc                 | '     y-=1
228cc     01 A6 86 F1 | 	sub	local01, #1
228d0                 | '     x+=1
228d0     01 B0 06 F1 | 	add	local06, #1
228d4                 | '     da+=4*4
228d4     10 B4 06 F1 | 	add	local08, #16
228d8                 | '     db+=2*4
228d8     08 B2 06 F1 | 	add	local07, #8
228dc     58 FF 9F FD | 	jmp	#LR__2800
228e0                 | LR__2801
228e0                 | '   else
228e0                 | '     d+=db
228e0     59 AF 02 F1 | 	add	local05, local07
228e4                 | '     x+=1
228e4     01 B0 06 F1 | 	add	local06, #1
228e8                 | '     da+=2*4
228e8     08 B4 06 F1 | 	add	local08, #8
228ec                 | '     db+=2*4
228ec     08 B2 06 F1 | 	add	local07, #8
228f0     44 FF 9F FD | 	jmp	#LR__2800
228f4                 | LR__2802
228f4     E7 F0 03 F6 | 	mov	ptra, fp
228f8     F2 00 A0 FD | 	call	#popregs_
228fc                 | _hg010b_spin2_fcircle_ret
228fc     2D 00 64 FD | 	ret
22900                 | 
22900                 | '  
22900                 | ' '-- A circle ------------------------------------------------------------ 
22900                 | '  
22900                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
22900                 | _hg010b_spin2_circle
22900     08 CA 05 F6 | 	mov	COUNT_, #8
22904     E8 00 A0 FD | 	call	#pushregs_
22908     4B A7 02 F6 | 	mov	local01, arg03
2290c     FF FF 7F FF 
22910     FE A7 06 FD | 	qmul	local01, ##-2
22914     49 A9 02 F6 | 	mov	local02, arg01
22918     4A AB 02 F6 | 	mov	local03, arg02
2291c     4C AD 02 F6 | 	mov	local04, arg04
22920                 | ' 
22920                 | '  
22920                 | ' d:=5-4*r
22920     53 99 02 F6 | 	mov	arg04, local01
22924     02 98 66 F0 | 	shl	arg04, #2
22928     05 AE 06 F6 | 	mov	local05, #5
2292c     4C AF 82 F1 | 	sub	local05, arg04
22930                 | ' x:=0
22930     00 B0 06 F6 | 	mov	local06, #0
22934                 | ' y:=r
22934                 | ' da:=(-2*r+5)*4
22934                 | ' db:=3*4
22934     0C B2 06 F6 | 	mov	local07, #12
22938                 | ' repeat while (x<=y) 
22938     18 B4 62 FD | 	getqx	local08
2293c     05 B4 06 F1 | 	add	local08, #5
22940     02 B4 66 F0 | 	shl	local08, #2
22944                 | LR__2810
22944     53 B1 5A F2 | 	cmps	local06, local01 wcz
22948     F4 00 90 1D |  if_a	jmp	#LR__2812
2294c                 | '   putpixel(x0-x,y0-y,c)
2294c     54 93 02 F6 | 	mov	arg01, local02
22950     58 93 82 F1 | 	sub	arg01, local06
22954     55 95 02 F6 | 	mov	arg02, local03
22958     53 95 82 F1 | 	sub	arg02, local01
2295c     56 97 02 F6 | 	mov	arg03, local04
22960     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
22964                 | '   putpixel(x0-x,y0+y,c)
22964     54 93 02 F6 | 	mov	arg01, local02
22968     58 93 82 F1 | 	sub	arg01, local06
2296c     55 95 02 F6 | 	mov	arg02, local03
22970     53 95 02 F1 | 	add	arg02, local01
22974     56 97 02 F6 | 	mov	arg03, local04
22978     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
2297c                 | '   putpixel(x0+x,y0-y,c)
2297c     54 93 02 F6 | 	mov	arg01, local02
22980     58 93 02 F1 | 	add	arg01, local06
22984     55 95 02 F6 | 	mov	arg02, local03
22988     53 95 82 F1 | 	sub	arg02, local01
2298c     56 97 02 F6 | 	mov	arg03, local04
22990     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
22994                 | '   putpixel(x0+x,y0+y,c)
22994     54 93 02 F6 | 	mov	arg01, local02
22998     58 93 02 F1 | 	add	arg01, local06
2299c     55 95 02 F6 | 	mov	arg02, local03
229a0     53 95 02 F1 | 	add	arg02, local01
229a4     56 97 02 F6 | 	mov	arg03, local04
229a8     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
229ac                 | '   putpixel(x0-y,y0-x,c)
229ac     54 93 02 F6 | 	mov	arg01, local02
229b0     53 93 82 F1 | 	sub	arg01, local01
229b4     55 95 02 F6 | 	mov	arg02, local03
229b8     58 95 82 F1 | 	sub	arg02, local06
229bc     56 97 02 F6 | 	mov	arg03, local04
229c0     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
229c4                 | '   putpixel(x0-y,y0+x,c)
229c4     54 93 02 F6 | 	mov	arg01, local02
229c8     53 93 82 F1 | 	sub	arg01, local01
229cc     55 95 02 F6 | 	mov	arg02, local03
229d0     58 95 02 F1 | 	add	arg02, local06
229d4     56 97 02 F6 | 	mov	arg03, local04
229d8     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
229dc                 | '   putpixel(x0+y,y0-x,c)
229dc     54 93 02 F6 | 	mov	arg01, local02
229e0     53 93 02 F1 | 	add	arg01, local01
229e4     55 95 02 F6 | 	mov	arg02, local03
229e8     58 95 82 F1 | 	sub	arg02, local06
229ec     56 97 02 F6 | 	mov	arg03, local04
229f0     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
229f4                 | '   putpixel(x0+y,y0+x,c)
229f4     54 93 02 F6 | 	mov	arg01, local02
229f8     53 93 02 F1 | 	add	arg01, local01
229fc     55 95 02 F6 | 	mov	arg02, local03
22a00     58 95 02 F1 | 	add	arg02, local06
22a04     56 97 02 F6 | 	mov	arg03, local04
22a08     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
22a0c                 | '   if d>0 
22a0c     01 AE 56 F2 | 	cmps	local05, #1 wc
22a10     18 00 90 CD |  if_b	jmp	#LR__2811
22a14                 | '     d+=da
22a14     5A AF 02 F1 | 	add	local05, local08
22a18                 | '     y-=1
22a18     01 A6 86 F1 | 	sub	local01, #1
22a1c                 | '     x+=1
22a1c     01 B0 06 F1 | 	add	local06, #1
22a20                 | '     da+=4*4
22a20     10 B4 06 F1 | 	add	local08, #16
22a24                 | '     db+=2*4
22a24     08 B2 06 F1 | 	add	local07, #8
22a28     18 FF 9F FD | 	jmp	#LR__2810
22a2c                 | LR__2811
22a2c                 | '   else
22a2c                 | '     d+=db
22a2c     59 AF 02 F1 | 	add	local05, local07
22a30                 | '     x+=1
22a30     01 B0 06 F1 | 	add	local06, #1
22a34                 | '     da+=2*4
22a34     08 B4 06 F1 | 	add	local08, #8
22a38                 | '     db+=2*4
22a38     08 B2 06 F1 | 	add	local07, #8
22a3c     04 FF 9F FD | 	jmp	#LR__2810
22a40                 | LR__2812
22a40     E7 F0 03 F6 | 	mov	ptra, fp
22a44     F2 00 A0 FD | 	call	#popregs_
22a48                 | _hg010b_spin2_circle_ret
22a48     2D 00 64 FD | 	ret
22a4c                 | 
22a4c                 | '     
22a4c                 | ' '-- A frame (an empty rectangle) ---------------------------------------
22a4c                 | ' 
22a4c                 | ' pub frame(x1,y1,x2,y2,c)
22a4c                 | _hg010b_spin2_frame
22a4c     05 CA 05 F6 | 	mov	COUNT_, #5
22a50     E8 00 A0 FD | 	call	#pushregs_
22a54     49 A7 02 F6 | 	mov	local01, arg01
22a58     4A A9 02 F6 | 	mov	local02, arg02
22a5c     4B AB 02 F6 | 	mov	local03, arg03
22a60     4C AD 02 F6 | 	mov	local04, arg04
22a64     4D AF 02 F6 | 	mov	local05, arg05
22a68                 | ' 
22a68                 | ' fastline(x1,x2,y1,c)
22a68     53 93 02 F6 | 	mov	arg01, local01
22a6c     55 95 02 F6 | 	mov	arg02, local03
22a70     54 97 02 F6 | 	mov	arg03, local02
22a74     57 99 02 F6 | 	mov	arg04, local05
22a78     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
22a7c                 | ' fastline(x1,x2,y2,c)
22a7c     53 93 02 F6 | 	mov	arg01, local01
22a80     55 95 02 F6 | 	mov	arg02, local03
22a84     56 97 02 F6 | 	mov	arg03, local04
22a88     57 99 02 F6 | 	mov	arg04, local05
22a8c     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
22a90                 | ' line(x1,y1,x1,y2,c)
22a90     53 93 02 F6 | 	mov	arg01, local01
22a94     54 95 02 F6 | 	mov	arg02, local02
22a98     53 97 02 F6 | 	mov	arg03, local01
22a9c     56 99 02 F6 | 	mov	arg04, local04
22aa0     57 9B 02 F6 | 	mov	arg05, local05
22aa4                 | ' draw(x1,y1,x2,y2,c)
22aa4     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
22aa8                 | ' line(x2,y1,x2,y2,c)
22aa8     55 93 02 F6 | 	mov	arg01, local03
22aac     54 95 02 F6 | 	mov	arg02, local02
22ab0     55 97 02 F6 | 	mov	arg03, local03
22ab4     56 99 02 F6 | 	mov	arg04, local04
22ab8     57 9B 02 F6 | 	mov	arg05, local05
22abc                 | ' draw(x1,y1,x2,y2,c)
22abc     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
22ac0     E7 F0 03 F6 | 	mov	ptra, fp
22ac4     F2 00 A0 FD | 	call	#popregs_
22ac8                 | _hg010b_spin2_frame_ret
22ac8     2D 00 64 FD | 	ret
22acc                 | 
22acc                 | ' 
22acc                 | ' '-- A box (a filled rectangle) ----------------------------------------
22acc                 | ' 
22acc                 | ' pub box(x1,y1,x2,y2,c) |yy
22acc                 | _hg010b_spin2_box
22acc     06 CA 05 F6 | 	mov	COUNT_, #6
22ad0     E8 00 A0 FD | 	call	#pushregs_
22ad4     49 A7 02 F6 | 	mov	local01, arg01
22ad8     4A A9 02 F6 | 	mov	local02, arg02
22adc     4B AB 02 F6 | 	mov	local03, arg03
22ae0     4C AD 02 F6 | 	mov	local04, arg04
22ae4     4D AF 02 F6 | 	mov	local05, arg05
22ae8                 | ' 
22ae8                 | ' repeat yy from y1 to y2
22ae8     54 AD 52 F2 | 	cmps	local04, local02 wc
22aec     01 B0 86 F6 | 	negc	local06, #1
22af0     58 AD 02 F1 | 	add	local04, local06
22af4                 | LR__2820
22af4                 | '   fastline(x1,x2,yy,c)
22af4     53 93 02 F6 | 	mov	arg01, local01
22af8     55 95 02 F6 | 	mov	arg02, local03
22afc     57 99 02 F6 | 	mov	arg04, local05
22b00     54 97 02 F6 | 	mov	arg03, local02
22b04     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
22b08     58 A9 02 F1 | 	add	local02, local06
22b0c     56 A9 0A F2 | 	cmp	local02, local04 wz
22b10     E0 FF 9F 5D |  if_ne	jmp	#LR__2820
22b14     E7 F0 03 F6 | 	mov	ptra, fp
22b18     F2 00 A0 FD | 	call	#popregs_
22b1c                 | _hg010b_spin2_box_ret
22b1c     2D 00 64 FD | 	ret
22b20                 | 
22b20                 | '       
22b20                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
22b20                 | _hg010b_spin2_putcharxycgf
22b20                 | ' 
22b20                 | '  
22b20                 | ' repeat yy from 0 to 15
22b20     00 80 06 F6 | 	mov	_var01, #0
22b24     D7 8A 48 FB | 	callpa	#(@LR__2832-@LR__2830)>>2,fcache_load_ptr_
22b28                 | LR__2830
22b28                 | ' 
22b28                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
22b28     95 64 06 F1 | 	add	objptr, #149
22b2c     32 83 02 FB | 	rdlong	_var02, objptr
22b30     0A 82 66 F0 | 	shl	_var02, #10
22b34     37 85 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
22b38     41 85 02 F1 | 	add	_var03, _var02
22b3c     4B 83 02 F6 | 	mov	_var02, arg03
22b40     04 82 66 F0 | 	shl	_var02, #4
22b44     41 85 02 F1 | 	add	_var03, _var02
22b48     40 85 02 F1 | 	add	_var03, _var01
22b4c     42 85 C2 FA | 	rdbyte	_var03, _var03
22b50                 | '   asm
22b50     00 84 0E F4 | 	testb	_var03, #0 wz
22b54     4C 87 C2 A8 |  if_e	setbyte	_var04, arg04, #0
22b58     4D 87 C2 58 |  if_ne	setbyte	_var04, arg05, #0
22b5c     01 84 0E F4 | 	testb	_var03, #1 wz
22b60     4C 87 CA A8 |  if_e	setbyte	_var04, arg04, #1
22b64     4D 87 CA 58 |  if_ne	setbyte	_var04, arg05, #1
22b68     02 84 0E F4 | 	testb	_var03, #2 wz
22b6c     4C 87 D2 A8 |  if_e	setbyte	_var04, arg04, #2
22b70     4D 87 D2 58 |  if_ne	setbyte	_var04, arg05, #2
22b74     03 84 0E F4 | 	testb	_var03, #3 wz
22b78     4C 87 DA A8 |  if_e	setbyte	_var04, arg04, #3
22b7c     4D 87 DA 58 |  if_ne	setbyte	_var04, arg05, #3
22b80     04 84 0E F4 | 	testb	_var03, #4 wz
22b84     4C 89 C2 A8 |  if_e	setbyte	_var05, arg04, #0
22b88     4D 89 C2 58 |  if_ne	setbyte	_var05, arg05, #0
22b8c     05 84 0E F4 | 	testb	_var03, #5 wz
22b90     4C 89 CA A8 |  if_e	setbyte	_var05, arg04, #1
22b94     4D 89 CA 58 |  if_ne	setbyte	_var05, arg05, #1
22b98     06 84 0E F4 | 	testb	_var03, #6 wz
22b9c     4C 89 D2 A8 |  if_e	setbyte	_var05, arg04, #2
22ba0     4D 89 D2 58 |  if_ne	setbyte	_var05, arg05, #2
22ba4     07 84 0E F4 | 	testb	_var03, #7 wz
22ba8     4C 89 DA A8 |  if_e	setbyte	_var05, arg04, #3
22bac     4D 89 DA 58 |  if_ne	setbyte	_var05, arg05, #3
22bb0                 | '   
22bb0                 | '   ccc[0]:=c1
22bb0     99 65 06 F1 | 	add	objptr, #409
22bb4     32 87 62 FC | 	wrlong	_var04, objptr
22bb8                 | '   ccc[1]:=c2 
22bb8     04 64 06 F1 | 	add	objptr, #4
22bbc     32 89 62 FC | 	wrlong	_var05, objptr
22bc0                 | '   long[mailbox0][2]:=8
22bc0     49 64 86 F1 | 	sub	objptr, #73
22bc4     32 85 02 FB | 	rdlong	_var03, objptr
22bc8     08 84 06 F1 | 	add	_var03, #8
22bcc     42 11 68 FC | 	wrlong	#8, _var03
22bd0                 | '   long[mailbox0][1]:=@ccc
22bd0     32 85 02 F6 | 	mov	_var03, objptr
22bd4     45 84 06 F1 | 	add	_var03, #69
22bd8     32 83 02 FB | 	rdlong	_var02, objptr
22bdc     04 82 06 F1 | 	add	_var02, #4
22be0     41 85 62 FC | 	wrlong	_var03, _var02
22be4                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
22be4     0C 65 86 F1 | 	sub	objptr, #268
22be8     32 85 02 FB | 	rdlong	_var03, objptr
22bec     4A 83 02 F6 | 	mov	_var02, arg02
22bf0     40 83 02 F1 | 	add	_var02, _var01
22bf4     0A 82 66 F0 | 	shl	_var02, #10
22bf8     49 8B 02 F6 | 	mov	_var06, arg01
22bfc     02 8A 66 F0 | 	shl	_var06, #2
22c00     45 83 02 F1 | 	add	_var02, _var06
22c04     41 85 02 F1 | 	add	_var03, _var02
22c08     00 00 78 FF 
22c0c     00 84 06 F1 | 	add	_var03, ##-268435456
22c10     0C 65 06 F1 | 	add	objptr, #268
22c14     32 8B 02 FB | 	rdlong	_var06, objptr
22c18     45 85 62 FC | 	wrlong	_var03, _var06
22c1c                 | '   repeat
22c1c                 | LR__2831
22c1c     32 85 02 FB | 	rdlong	_var03, objptr
22c20     42 83 02 FB | 	rdlong	_var02, _var03
22c24     00 82 56 F2 | 	cmps	_var02, #0 wc
22c28     F0 FF 9F CD |  if_b	jmp	#LR__2831
22c2c     E9 65 86 F1 | 	sub	objptr, #489
22c30     01 80 06 F1 | 	add	_var01, #1
22c34     10 80 56 F2 | 	cmps	_var01, #16 wc
22c38     EC FE 9F CD |  if_b	jmp	#LR__2830
22c3c                 | LR__2832
22c3c                 | _hg010b_spin2_putcharxycgf_ret
22c3c     2D 00 64 FD | 	ret
22c40                 | 
22c40                 | ' 
22c40                 | ' 
22c40                 | ' '**********************************************************************r***
22c40                 | ' '                                                                        *
22c40                 | ' ' Font related functions                                                 *
22c40                 | ' '                                                                        *
22c40                 | ' '*************************************************************************
22c40                 | ' 
22c40                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
22c40                 | ' 
22c40                 | ' pub setfontfamily(afontnum)
22c40                 | _hg010b_spin2_setfontfamily
22c40                 | ' 
22c40                 | ' font_family:=afontnum
22c40     95 64 06 F1 | 	add	objptr, #149
22c44     32 93 62 FC | 	wrlong	arg01, objptr
22c48     95 64 86 F1 | 	sub	objptr, #149
22c4c                 | ' 'if afontnum==8
22c4c                 | ' '  font_ptr:=@amiga_font
22c4c                 | ' 
22c4c                 | ' if afontnum==4
22c4c     04 92 0E F2 | 	cmp	arg01, #4 wz
22c50                 | '   font_ptr:=@st_font
22c50     37 81 02 A6 |  if_e	mov	_var01, ptr__hg010b_spin2_dat__
22c54     08 00 00 AF 
22c58     00 80 06 A1 |  if_e	add	_var01, ##4096
22c5c     08 64 06 A1 |  if_e	add	objptr, #8
22c60     32 81 62 AC |  if_e	wrlong	_var01, objptr
22c64     08 64 86 A1 |  if_e	sub	objptr, #8
22c68                 | ' if afontnum==0
22c68     00 92 0E F2 | 	cmp	arg01, #0 wz
22c6c                 | '   font_ptr:=@vga_font
22c6c     08 64 06 A1 |  if_e	add	objptr, #8
22c70     32 6F 62 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
22c74     08 64 86 A1 |  if_e	sub	objptr, #8
22c78                 | _hg010b_spin2_setfontfamily_ret
22c78     2D 00 64 FD | 	ret
22c7c                 | 
22c7c                 | ' 
22c7c                 | ' ''--------- Redefine a character
22c7c                 | ' 
22c7c                 | ' pub defchar(ch,ptr) | s,i ' 
22c7c                 | _hg010b_spin2_defchar
22c7c                 | ' 
22c7c                 | ' s:=font_ptr+ch*16
22c7c     08 64 06 F1 | 	add	objptr, #8
22c80     32 81 02 FB | 	rdlong	_var01, objptr
22c84     08 64 86 F1 | 	sub	objptr, #8
22c88     04 92 66 F0 | 	shl	arg01, #4
22c8c     49 81 02 F1 | 	add	_var01, arg01
22c90                 | ' repeat i from 0 to 15
22c90     00 82 06 F6 | 	mov	_var02, #0
22c94     D7 12 48 FB | 	callpa	#(@LR__2841-@LR__2840)>>2,fcache_load_ptr_
22c98                 | LR__2840
22c98                 | '   byte[s+i]:=byte[ptr+i]
22c98     4A 93 02 F6 | 	mov	arg01, arg02
22c9c     41 93 02 F1 | 	add	arg01, _var02
22ca0     40 85 02 F6 | 	mov	_var03, _var01
22ca4     49 93 C2 FA | 	rdbyte	arg01, arg01
22ca8     41 85 02 F1 | 	add	_var03, _var02
22cac     42 93 42 FC | 	wrbyte	arg01, _var03
22cb0     01 82 06 F1 | 	add	_var02, #1
22cb4     10 82 56 F2 | 	cmps	_var02, #16 wc
22cb8     DC FF 9F CD |  if_b	jmp	#LR__2840
22cbc                 | LR__2841
22cbc                 | _hg010b_spin2_defchar_ret
22cbc     2D 00 64 FD | 	ret
22cc0                 | 
22cc0                 | ' 
22cc0                 | ' 
22cc0                 | ' '*************************************************************************
22cc0                 | ' '                                                                        *
22cc0                 | ' '  Cursor functions                                                      *
22cc0                 | ' '                                                                        *
22cc0                 | ' '*************************************************************************
22cc0                 | ' 
22cc0                 | ' 
22cc0                 | ' pub setcursorpos(x,y)
22cc0                 | _hg010b_spin2_setcursorpos
22cc0     01 CA 05 F6 | 	mov	COUNT_, #1
22cc4     E8 00 A0 FD | 	call	#pushregs_
22cc8                 | ' 
22cc8                 | ' ''---------- Set the (x,y) position of cursor
22cc8                 | ' 
22cc8                 | ' cursor_x:=x
22cc8     3C 64 06 F1 | 	add	objptr, #60
22ccc     32 93 52 FC | 	wrword	arg01, objptr
22cd0                 | ' cursor_y:=y
22cd0     02 64 06 F1 | 	add	objptr, #2
22cd4     32 95 42 FC | 	wrbyte	arg02, objptr
22cd8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22cd8     02 64 86 F1 | 	sub	objptr, #2
22cdc     32 A7 E2 FA | 	rdword	local01, objptr
22ce0     02 A6 66 F0 | 	shl	local01, #2
22ce4     4A 97 E2 F8 | 	getbyte	arg03, arg02, #0
22ce8     3C 64 86 F1 | 	sub	objptr, #60
22cec     04 96 66 F0 | 	shl	arg03, #4
22cf0     04 96 06 F1 | 	add	arg03, #4
22cf4     11 92 06 F6 | 	mov	arg01, #17
22cf8     53 95 02 F6 | 	mov	arg02, local01
22cfc     0C F3 BF FD | 	call	#_hg010b_spin2_setspritepos
22d00     E7 F0 03 F6 | 	mov	ptra, fp
22d04     F2 00 A0 FD | 	call	#popregs_
22d08                 | _hg010b_spin2_setcursorpos_ret
22d08     2D 00 64 FD | 	ret
22d0c                 | 
22d0c                 | ' 
22d0c                 | ' pub setcursorx(x)
22d0c                 | _hg010b_spin2_setcursorx
22d0c                 | ' cursor_x:=x
22d0c     3C 64 06 F1 | 	add	objptr, #60
22d10     32 93 52 FC | 	wrword	arg01, objptr
22d14                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22d14     49 95 32 F9 | 	getword	arg02, arg01, #0
22d18     02 94 66 F0 | 	shl	arg02, #2
22d1c     02 64 06 F1 | 	add	objptr, #2
22d20     32 97 C2 FA | 	rdbyte	arg03, objptr
22d24     3E 64 86 F1 | 	sub	objptr, #62
22d28     04 96 66 F0 | 	shl	arg03, #4
22d2c     04 96 06 F1 | 	add	arg03, #4
22d30     11 92 06 F6 | 	mov	arg01, #17
22d34     D4 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
22d38                 | _hg010b_spin2_setcursorx_ret
22d38     2D 00 64 FD | 	ret
22d3c                 | 
22d3c                 | ' 
22d3c                 | ' pub setcursory(y) 
22d3c                 | _hg010b_spin2_setcursory
22d3c                 | ' cursor_y:=y
22d3c     3E 64 06 F1 | 	add	objptr, #62
22d40     32 93 42 FC | 	wrbyte	arg01, objptr
22d44                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
22d44     02 64 86 F1 | 	sub	objptr, #2
22d48     32 95 E2 FA | 	rdword	arg02, objptr
22d4c     02 94 66 F0 | 	shl	arg02, #2
22d50     49 97 E2 F8 | 	getbyte	arg03, arg01, #0
22d54     3C 64 86 F1 | 	sub	objptr, #60
22d58     04 96 66 F0 | 	shl	arg03, #4
22d5c     04 96 06 F1 | 	add	arg03, #4
22d60     11 92 06 F6 | 	mov	arg01, #17
22d64     A4 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
22d68                 | _hg010b_spin2_setcursory_ret
22d68     2D 00 64 FD | 	ret
22d6c                 | 
22d6c                 | ' 
22d6c                 | ' '*************************************************************************
22d6c                 | ' '                                                                        *
22d6c                 | ' '  VBlank functions                                                      *
22d6c                 | ' '                                                                        *
22d6c                 | ' '*************************************************************************
22d6c                 | ' 
22d6c                 | ' pub waitvbl(amount) | i
22d6c                 | _hg010b_spin2_waitvbl
22d6c     03 CA 05 F6 | 	mov	COUNT_, #3
22d70     E8 00 A0 FD | 	call	#pushregs_
22d74     49 A7 02 F6 | 	mov	local01, arg01
22d78                 | ' 
22d78                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
22d78                 | ' 
22d78                 | ' repeat i from 1 to amount
22d78     01 A8 06 F6 | 	mov	local02, #1
22d7c     01 A6 56 F2 | 	cmps	local01, #1 wc
22d80     01 AA 86 F6 | 	negc	local03, #1
22d84     55 A7 02 F1 | 	add	local01, local03
22d88                 | LR__2850
22d88                 | '   repeat until vblank==0
22d88                 | LR__2851
22d88     49 64 06 F1 | 	add	objptr, #73
22d8c     32 93 0A FB | 	rdlong	arg01, objptr wz
22d90     49 64 86 F1 | 	sub	objptr, #73
22d94     0C 00 90 AD |  if_e	jmp	#LR__2852
22d98                 | '     waitus(100)
22d98     64 92 06 F6 | 	mov	arg01, #100
22d9c     9C 1F B0 FD | 	call	#__system___waitus
22da0     E4 FF 9F FD | 	jmp	#LR__2851
22da4                 | LR__2852
22da4                 | '   repeat until vblank==1
22da4                 | LR__2853
22da4     49 64 06 F1 | 	add	objptr, #73
22da8     32 93 02 FB | 	rdlong	arg01, objptr
22dac     49 64 86 F1 | 	sub	objptr, #73
22db0     01 92 0E F2 | 	cmp	arg01, #1 wz
22db4     0C 00 90 AD |  if_e	jmp	#LR__2854
22db8                 | '     waitus(100)
22db8     64 92 06 F6 | 	mov	arg01, #100
22dbc     7C 1F B0 FD | 	call	#__system___waitus
22dc0     E0 FF 9F FD | 	jmp	#LR__2853
22dc4                 | LR__2854
22dc4     55 A9 02 F1 | 	add	local02, local03
22dc8     53 A9 0A F2 | 	cmp	local02, local01 wz
22dcc     B8 FF 9F 5D |  if_ne	jmp	#LR__2850
22dd0     E7 F0 03 F6 | 	mov	ptra, fp
22dd4     F2 00 A0 FD | 	call	#popregs_
22dd8                 | _hg010b_spin2_waitvbl_ret
22dd8     2D 00 64 FD | 	ret
22ddc                 | 
22ddc                 | ' 
22ddc                 | ' ''---------- Set color #c in palette to r,g,b
22ddc                 | ' 
22ddc                 | ' pub setcolor(c,r,g,b)  |cc
22ddc                 | _hg010b_spin2_setcolor
22ddc                 | ' 
22ddc                 | ' cc:=r<<24+g<<16+b<<8
22ddc     18 94 66 F0 | 	shl	arg02, #24
22de0     10 96 66 F0 | 	shl	arg03, #16
22de4     4B 95 02 F1 | 	add	arg02, arg03
22de8     08 98 66 F0 | 	shl	arg04, #8
22dec     4C 95 02 F1 | 	add	arg02, arg04
22df0                 | ' long[palette_ptr+4*c]:=cc
22df0     1C 64 06 F1 | 	add	objptr, #28
22df4     32 99 02 FB | 	rdlong	arg04, objptr
22df8     1C 64 86 F1 | 	sub	objptr, #28
22dfc     02 92 66 F0 | 	shl	arg01, #2
22e00     49 99 02 F1 | 	add	arg04, arg01
22e04     4C 95 62 FC | 	wrlong	arg02, arg04
22e08                 | _hg010b_spin2_setcolor_ret
22e08     2D 00 64 FD | 	ret
22e0c                 | 
22e0c                 | ' 
22e0c                 | ' 
22e0c                 | ' pub cls(fc,bc)   :c,i
22e0c                 | _hg010b_spin2_cls
22e0c     02 CA 05 F6 | 	mov	COUNT_, #2
22e10     E8 00 A0 FD | 	call	#pushregs_
22e14     49 A7 02 F6 | 	mov	local01, arg01
22e18     4A A9 02 F6 | 	mov	local02, arg02
22e1c                 | ' 
22e1c                 | ' c:=bc
22e1c                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
22e1c     DD 64 06 F1 | 	add	objptr, #221
22e20     32 93 02 FB | 	rdlong	arg01, objptr
22e24     A5 64 86 F1 | 	sub	objptr, #165
22e28     32 97 02 FB | 	rdlong	arg03, objptr
22e2c     02 96 66 F0 | 	shl	arg03, #2
22e30     54 95 02 F6 | 	mov	arg02, local02
22e34     00 98 06 F6 | 	mov	arg04, #0
22e38     01 9A 06 F6 | 	mov	arg05, #1
22e3c     0B 00 00 FF 
22e40     94 64 06 F1 | 	add	objptr, ##5780
22e44     AC 10 B0 FD | 	call	#_psram_spin2_fill
22e48                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
22e48     0B 00 00 FF 
22e4c     C8 64 86 F1 | 	sub	objptr, ##5832
22e50     32 93 02 FB | 	rdlong	arg01, objptr
22e54     04 64 86 F1 | 	sub	objptr, #4
22e58     32 97 02 FB | 	rdlong	arg03, objptr
22e5c     49 97 82 F1 | 	sub	arg03, arg01
22e60     20 94 06 F6 | 	mov	arg02, #32
22e64     00 98 06 F6 | 	mov	arg04, #0
22e68     01 9A 06 F6 | 	mov	arg05, #1
22e6c     0B 00 00 FF 
22e70     CC 64 06 F1 | 	add	objptr, ##5836
22e74     7C 10 B0 FD | 	call	#_psram_spin2_fill
22e78                 | ' setwritecolors(fc,bc)
22e78                 | ' 
22e78                 | ' write_color:=ff
22e78     0B 00 00 FF 
22e7c     8B 64 86 F1 | 	sub	objptr, ##5771
22e80     32 A7 62 FC | 	wrlong	local01, objptr
22e84                 | ' write_background:=bb
22e84     04 64 06 F1 | 	add	objptr, #4
22e88     32 A9 62 FC | 	wrlong	local02, objptr
22e8c                 | ' cursor_x:=0
22e8c     09 64 86 F1 | 	sub	objptr, #9
22e90     32 01 58 FC | 	wrword	#0, objptr
22e94                 | ' cursor_y:=0
22e94     02 64 06 F1 | 	add	objptr, #2
22e98     32 01 48 FC | 	wrbyte	#0, objptr
22e9c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22e9c     02 64 86 F1 | 	sub	objptr, #2
22ea0     32 95 E2 FA | 	rdword	arg02, objptr
22ea4     02 94 66 F0 | 	shl	arg02, #2
22ea8     3C 64 86 F1 | 	sub	objptr, #60
22eac     04 96 06 F6 | 	mov	arg03, #4
22eb0     11 92 06 F6 | 	mov	arg01, #17
22eb4     54 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
22eb8                 | ' setcursorcolor(fc)
22eb8     53 93 02 F6 | 	mov	arg01, local01
22ebc     60 ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
22ec0     54 7B 02 F6 | 	mov	result1, local02
22ec4     00 7C 06 F6 | 	mov	result2, #0
22ec8     E7 F0 03 F6 | 	mov	ptra, fp
22ecc     F2 00 A0 FD | 	call	#popregs_
22ed0                 | _hg010b_spin2_cls_ret
22ed0     2D 00 64 FD | 	ret
22ed4                 | 
22ed4                 | ' 
22ed4                 | ' ''---------- Output a char at the cursor position, move the cursor 
22ed4                 | ' 
22ed4                 | ' pub putchar(achar) | c,x,y,l,newcpl
22ed4                 | _hg010b_spin2_putchar
22ed4     02 CA 05 F6 | 	mov	COUNT_, #2
22ed8     E8 00 A0 FD | 	call	#pushregs_
22edc     49 A7 02 F6 | 	mov	local01, arg01
22ee0                 | ' 
22ee0                 | ' if achar==10
22ee0     0A A6 0E F2 | 	cmp	local01, #10 wz
22ee4                 | '   crlf()
22ee4     78 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
22ee8                 | ' if achar==9
22ee8     09 A6 0E F2 | 	cmp	local01, #9 wz
22eec     18 00 90 5D |  if_ne	jmp	#LR__2860
22ef0                 | '   cursor_x:=(cursor_x& %11110000)+16
22ef0     3C 64 06 F1 | 	add	objptr, #60
22ef4     32 97 E2 FA | 	rdword	arg03, objptr
22ef8     F0 96 06 F5 | 	and	arg03, #240
22efc     10 96 06 F1 | 	add	arg03, #16
22f00     32 97 52 FC | 	wrword	arg03, objptr
22f04     3C 64 86 F1 | 	sub	objptr, #60
22f08                 | LR__2860
22f08                 | '   
22f08                 | ' if (achar<>9) && (achar<>10) 
22f08     09 A6 0E F2 | 	cmp	local01, #9 wz
22f0c     0A A6 0E 52 |  if_ne	cmp	local01, #10 wz
22f10     A8 00 90 AD |  if_e	jmp	#LR__2861
22f14                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
22f14     3C 64 06 F1 | 	add	objptr, #60
22f18     32 93 E2 FA | 	rdword	arg01, objptr
22f1c     02 64 06 F1 | 	add	objptr, #2
22f20     32 95 C2 FA | 	rdbyte	arg02, objptr
22f24     04 94 66 F0 | 	shl	arg02, #4
22f28     04 94 06 F1 | 	add	arg02, #4
22f2c     03 64 06 F1 | 	add	objptr, #3
22f30     32 99 02 FB | 	rdlong	arg04, objptr
22f34     04 64 06 F1 | 	add	objptr, #4
22f38     32 9B 02 FB | 	rdlong	arg05, objptr
22f3c     45 64 86 F1 | 	sub	objptr, #69
22f40     53 97 02 F6 | 	mov	arg03, local01
22f44     D8 FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
22f48     04 64 06 F1 | 	add	objptr, #4
22f4c     32 93 02 FB | 	rdlong	arg01, objptr
22f50     1C 00 00 FF 
22f54     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
22f58     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
22f5c     3A 64 06 F1 | 	add	objptr, #58
22f60     32 9B C2 FA | 	rdbyte	arg05, objptr
22f64     4D 97 02 FD | 	qmul	arg03, arg05
22f68                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
22f68     1C 00 00 FF 
22f6c     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
22f70     02 64 86 F1 | 	sub	objptr, #2
22f74     32 A9 E2 FA | 	rdword	local02, objptr
22f78     01 A8 46 F0 | 	shr	local02, #1
22f7c     53 95 02 F6 | 	mov	arg02, local01
22f80     01 96 06 F6 | 	mov	arg03, #1
22f84     00 98 06 F6 | 	mov	arg04, #0
22f88     01 9A 06 F6 | 	mov	arg05, #1
22f8c     0B 00 00 FF 
22f90     90 64 06 F1 | 	add	objptr, ##5776
22f94     18 A6 62 FD | 	getqx	local01
22f98     54 A7 02 F1 | 	add	local01, local02
22f9c     53 93 02 F1 | 	add	arg01, local01
22fa0     50 0F B0 FD | 	call	#_psram_spin2_fill
22fa4                 | '   cursor_x+=2
22fa4     0B 00 00 FF 
22fa8     90 64 86 F1 | 	sub	objptr, ##5776
22fac     32 A9 E2 FA | 	rdword	local02, objptr
22fb0     02 A8 06 F1 | 	add	local02, #2
22fb4     32 A9 52 FC | 	wrword	local02, objptr
22fb8     3C 64 86 F1 | 	sub	objptr, #60
22fbc                 | LR__2861
22fbc                 | ' 
22fbc                 | ' if cursor_x>=256
22fbc     3C 64 06 F1 | 	add	objptr, #60
22fc0     32 A9 E2 FA | 	rdword	local02, objptr
22fc4     3C 64 86 F1 | 	sub	objptr, #60
22fc8     00 A9 56 F2 | 	cmps	local02, #256 wc
22fcc     64 00 90 CD |  if_b	jmp	#LR__2863
22fd0                 | '   cursor_x:=0
22fd0     3C 64 06 F1 | 	add	objptr, #60
22fd4     32 01 58 FC | 	wrword	#0, objptr
22fd8                 | '   cursor_y+=1
22fd8     02 64 06 F1 | 	add	objptr, #2
22fdc     32 A9 C2 FA | 	rdbyte	local02, objptr
22fe0     01 A8 06 F1 | 	add	local02, #1
22fe4     32 A9 42 FC | 	wrbyte	local02, objptr
22fe8                 | '   if cursor_y>st_lines-1
22fe8     C3 64 06 F1 | 	add	objptr, #195
22fec     32 A9 02 FB | 	rdlong	local02, objptr
22ff0     01 A8 86 F1 | 	sub	local02, #1
22ff4     C3 64 86 F1 | 	sub	objptr, #195
22ff8     32 97 C2 FA | 	rdbyte	arg03, objptr
22ffc     3E 64 86 F1 | 	sub	objptr, #62
23000     54 97 5A F2 | 	cmps	arg03, local02 wcz
23004     2C 00 90 ED |  if_be	jmp	#LR__2862
23008                 | '     scrollup2()
23008     00 92 06 F6 | 	mov	arg01, #0
2300c     01 00 00 FF 
23010     58 94 06 F6 | 	mov	arg02, ##600
23014     10 96 06 F6 | 	mov	arg03, #16
23018     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
2301c                 | '     cursor_y:=st_lines-1
2301c     01 65 06 F1 | 	add	objptr, #257
23020     32 A9 02 FB | 	rdlong	local02, objptr
23024     01 A8 86 F1 | 	sub	local02, #1
23028     C3 64 86 F1 | 	sub	objptr, #195
2302c     32 A9 42 FC | 	wrbyte	local02, objptr
23030     3E 64 86 F1 | 	sub	objptr, #62
23034                 | LR__2862
23034                 | LR__2863
23034                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
23034     3C 64 06 F1 | 	add	objptr, #60
23038     32 95 E2 FA | 	rdword	arg02, objptr
2303c     02 94 66 F0 | 	shl	arg02, #2
23040     02 64 06 F1 | 	add	objptr, #2
23044     32 97 C2 FA | 	rdbyte	arg03, objptr
23048     3E 64 86 F1 | 	sub	objptr, #62
2304c     04 96 66 F0 | 	shl	arg03, #4
23050     04 96 06 F1 | 	add	arg03, #4
23054     11 92 06 F6 | 	mov	arg01, #17
23058     B0 EF BF FD | 	call	#_hg010b_spin2_setspritepos
2305c     E7 F0 03 F6 | 	mov	ptra, fp
23060     F2 00 A0 FD | 	call	#popregs_
23064                 | _hg010b_spin2_putchar_ret
23064     2D 00 64 FD | 	ret
23068                 | 
23068                 | '     
23068                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
23068                 | ' 
23068                 | ' pub putchar2(achar) | c,x,y,l,newcpl
23068                 | _hg010b_spin2_putchar2
23068     02 CA 05 F6 | 	mov	COUNT_, #2
2306c     E8 00 A0 FD | 	call	#pushregs_
23070     49 A7 02 F6 | 	mov	local01, arg01
23074                 | ' 
23074                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
23074     3C 64 06 F1 | 	add	objptr, #60
23078     32 93 E2 FA | 	rdword	arg01, objptr
2307c     02 64 06 F1 | 	add	objptr, #2
23080     32 95 C2 FA | 	rdbyte	arg02, objptr
23084     04 94 66 F0 | 	shl	arg02, #4
23088     04 94 06 F1 | 	add	arg02, #4
2308c     03 64 06 F1 | 	add	objptr, #3
23090     32 99 02 FB | 	rdlong	arg04, objptr
23094     04 64 06 F1 | 	add	objptr, #4
23098     32 9B 02 FB | 	rdlong	arg05, objptr
2309c     45 64 86 F1 | 	sub	objptr, #69
230a0     53 97 02 F6 | 	mov	arg03, local01
230a4     78 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
230a8     04 64 06 F1 | 	add	objptr, #4
230ac     32 93 02 FB | 	rdlong	arg01, objptr
230b0     1C 00 00 FF 
230b4     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
230b8     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
230bc     3A 64 06 F1 | 	add	objptr, #58
230c0     32 9B C2 FA | 	rdbyte	arg05, objptr
230c4     4D 97 02 FD | 	qmul	arg03, arg05
230c8                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
230c8     1C 00 00 FF 
230cc     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
230d0     02 64 86 F1 | 	sub	objptr, #2
230d4     32 A9 E2 FA | 	rdword	local02, objptr
230d8     01 A8 46 F0 | 	shr	local02, #1
230dc     53 95 02 F6 | 	mov	arg02, local01
230e0     01 96 06 F6 | 	mov	arg03, #1
230e4     00 98 06 F6 | 	mov	arg04, #0
230e8     01 9A 06 F6 | 	mov	arg05, #1
230ec     0B 00 00 FF 
230f0     90 64 06 F1 | 	add	objptr, ##5776
230f4     18 A6 62 FD | 	getqx	local01
230f8     54 A7 02 F1 | 	add	local01, local02
230fc     53 93 02 F1 | 	add	arg01, local01
23100     F0 0D B0 FD | 	call	#_psram_spin2_fill
23104                 | ' 
23104                 | ' cursor_x+=2
23104     0B 00 00 FF 
23108     90 64 86 F1 | 	sub	objptr, ##5776
2310c     32 A9 E2 FA | 	rdword	local02, objptr
23110     02 A8 06 F1 | 	add	local02, #2
23114     32 A9 52 FC | 	wrword	local02, objptr
23118                 | ' if cursor_x>=256
23118     54 A9 32 F9 | 	getword	local02, local02, #0
2311c     3C 64 86 F1 | 	sub	objptr, #60
23120     00 A9 56 F2 | 	cmps	local02, #256 wc
23124     64 00 90 CD |  if_b	jmp	#LR__2871
23128                 | '   cursor_x:=0
23128     3C 64 06 F1 | 	add	objptr, #60
2312c     32 01 58 FC | 	wrword	#0, objptr
23130                 | '   cursor_y+=1
23130     02 64 06 F1 | 	add	objptr, #2
23134     32 A9 C2 FA | 	rdbyte	local02, objptr
23138     01 A8 06 F1 | 	add	local02, #1
2313c     32 A9 42 FC | 	wrbyte	local02, objptr
23140                 | '   if cursor_y>st_lines-1
23140     C3 64 06 F1 | 	add	objptr, #195
23144     32 A9 02 FB | 	rdlong	local02, objptr
23148     01 A8 86 F1 | 	sub	local02, #1
2314c     C3 64 86 F1 | 	sub	objptr, #195
23150     32 97 C2 FA | 	rdbyte	arg03, objptr
23154     3E 64 86 F1 | 	sub	objptr, #62
23158     54 97 5A F2 | 	cmps	arg03, local02 wcz
2315c     2C 00 90 ED |  if_be	jmp	#LR__2870
23160                 | '     scrollup2()
23160     00 92 06 F6 | 	mov	arg01, #0
23164     01 00 00 FF 
23168     58 94 06 F6 | 	mov	arg02, ##600
2316c     10 96 06 F6 | 	mov	arg03, #16
23170     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
23174                 | '     cursor_y:=st_lines-1
23174     01 65 06 F1 | 	add	objptr, #257
23178     32 A9 02 FB | 	rdlong	local02, objptr
2317c     01 A8 86 F1 | 	sub	local02, #1
23180     C3 64 86 F1 | 	sub	objptr, #195
23184     32 A9 42 FC | 	wrbyte	local02, objptr
23188     3E 64 86 F1 | 	sub	objptr, #62
2318c                 | LR__2870
2318c                 | LR__2871
2318c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
2318c     3C 64 06 F1 | 	add	objptr, #60
23190     32 95 E2 FA | 	rdword	arg02, objptr
23194     02 94 66 F0 | 	shl	arg02, #2
23198     02 64 06 F1 | 	add	objptr, #2
2319c     32 97 C2 FA | 	rdbyte	arg03, objptr
231a0     3E 64 86 F1 | 	sub	objptr, #62
231a4     04 96 66 F0 | 	shl	arg03, #4
231a8     04 96 06 F1 | 	add	arg03, #4
231ac     11 92 06 F6 | 	mov	arg01, #17
231b0     58 EE BF FD | 	call	#_hg010b_spin2_setspritepos
231b4     E7 F0 03 F6 | 	mov	ptra, fp
231b8     F2 00 A0 FD | 	call	#popregs_
231bc                 | _hg010b_spin2_putchar2_ret
231bc     2D 00 64 FD | 	ret
231c0                 | 
231c0                 | ' ''--------- Output a string at the cursor position, move the cursor  
231c0                 | ' 
231c0                 | ' pub write(text) | iii,c,ncx,ncy
231c0                 | _hg010b_spin2_write
231c0     04 CA 05 F6 | 	mov	COUNT_, #4
231c4     E8 00 A0 FD | 	call	#pushregs_
231c8     49 A7 02 F6 | 	mov	local01, arg01
231cc                 | ' 
231cc                 | ' repeat iii from 0 to strsize(text)-1
231cc     00 A8 06 F6 | 	mov	local02, #0
231d0     53 93 02 F6 | 	mov	arg01, local01
231d4     49 AB 02 F6 | 	mov	local03, arg01
231d8     D7 06 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
231dc                 | LR__2880
231dc     55 7B CA FA | 	rdbyte	result1, local03 wz
231e0     01 AA 06 51 |  if_ne	add	local03, #1
231e4     F4 FF 9F 5D |  if_ne	jmp	#LR__2880
231e8                 | LR__2881
231e8     49 AB 82 F1 | 	sub	local03, arg01
231ec     01 AA 86 F1 | 	sub	local03, #1
231f0     00 AA 56 F2 | 	cmps	local03, #0 wc
231f4     01 AC 86 F6 | 	negc	local04, #1
231f8     56 AB 02 F1 | 	add	local03, local04
231fc                 | LR__2882
231fc                 | '   putchar2(byte[text+iii])
231fc     53 93 02 F6 | 	mov	arg01, local01
23200     54 93 02 F1 | 	add	arg01, local02
23204     49 93 C2 FA | 	rdbyte	arg01, arg01
23208     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
2320c     56 A9 02 F1 | 	add	local02, local04
23210     55 A9 0A F2 | 	cmp	local02, local03 wz
23214     E4 FF 9F 5D |  if_ne	jmp	#LR__2882
23218     E7 F0 03 F6 | 	mov	ptra, fp
2321c     F2 00 A0 FD | 	call	#popregs_
23220                 | _hg010b_spin2_write_ret
23220     2D 00 64 FD | 	ret
23224                 | 
23224                 | '    
23224                 | ' ' a version for text scrolling in Basic shifted 4 lines down
23224                 | ' 
23224                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
23224                 | _hg010b_spin2_scrollup2
23224     03 CA 05 F6 | 	mov	COUNT_, #3
23228     E8 00 A0 FD | 	call	#pushregs_
2322c                 | ' 	
2322c                 | ' repeat i from 4 to 579 
2322c     04 A6 06 F6 | 	mov	local01, #4
23230                 | LR__2890
23230     DD 64 06 F1 | 	add	objptr, #221
23234     32 95 02 FB | 	rdlong	arg02, objptr
23238     53 9B 02 F6 | 	mov	arg05, local01
2323c     10 9A 06 F1 | 	add	arg05, #16
23240     02 9A 66 F0 | 	shl	arg05, #2
23244     14 64 06 F1 | 	add	objptr, #20
23248     32 97 02 FB | 	rdlong	arg03, objptr
2324c     4B 9B 02 FD | 	qmul	arg05, arg03
23250                 | '   ram.read1($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
23250     02 96 66 F0 | 	shl	arg03, #2
23254     F4 03 00 FF 
23258     00 92 06 F6 | 	mov	arg01, ##518144
2325c     0A 00 00 FF 
23260     DB 65 06 F1 | 	add	objptr, ##5595
23264     18 9A 62 FD | 	getqx	arg05
23268     4D 95 02 F1 | 	add	arg02, arg05
2326c     4C 0B B0 FD | 	call	#_psram_spin2_read1
23270     0A 00 00 FF 
23274     EF 65 86 F1 | 	sub	objptr, ##5615
23278     32 95 02 FB | 	rdlong	arg02, objptr
2327c     53 9B 02 F6 | 	mov	arg05, local01
23280     02 9A 66 F0 | 	shl	arg05, #2
23284     14 64 06 F1 | 	add	objptr, #20
23288     32 97 02 FB | 	rdlong	arg03, objptr
2328c     4B 9B 02 FD | 	qmul	arg05, arg03
23290                 | '   ram.write($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
23290     02 96 66 F0 | 	shl	arg03, #2
23294     F4 03 00 FF 
23298     00 92 06 F6 | 	mov	arg01, ##518144
2329c     0A 00 00 FF 
232a0     DB 65 06 F1 | 	add	objptr, ##5595
232a4     18 9A 62 FD | 	getqx	arg05
232a8     4D 95 02 F1 | 	add	arg02, arg05
232ac     A8 0B B0 FD | 	call	#_psram_spin2_write
232b0     0B 00 00 FF 
232b4     CC 64 86 F1 | 	sub	objptr, ##5836
232b8     01 A6 06 F1 | 	add	local01, #1
232bc     01 00 00 FF 
232c0     44 A6 16 F2 | 	cmp	local01, ##580 wc
232c4     68 FF 9F CD |  if_b	jmp	#LR__2890
232c8                 | ' 
232c8                 | ' repeat i from 580 to 599
232c8     01 00 00 FF 
232cc     44 A6 06 F6 | 	mov	local01, ##580
232d0                 | LR__2891
232d0                 | '    fastline(0,1023,i,write_background)   
232d0     45 64 06 F1 | 	add	objptr, #69
232d4     32 99 02 FB | 	rdlong	arg04, objptr
232d8     45 64 86 F1 | 	sub	objptr, #69
232dc     00 92 06 F6 | 	mov	arg01, #0
232e0     09 94 CE F9 | 	bmask	arg02, #9
232e4     53 97 02 F6 | 	mov	arg03, local01
232e8     6C EF BF FD | 	call	#_hg010b_spin2_fastline
232ec     01 A6 06 F1 | 	add	local01, #1
232f0     01 00 00 FF 
232f4     58 A6 16 F2 | 	cmp	local01, ##600 wc
232f8     D4 FF 9F CD |  if_b	jmp	#LR__2891
232fc                 | ' repeat i from 0 to 3
232fc     00 A6 06 F6 | 	mov	local01, #0
23300                 | LR__2892
23300                 | '    fastline(0,1023,i,write_background)      
23300     45 64 06 F1 | 	add	objptr, #69
23304     32 99 02 FB | 	rdlong	arg04, objptr
23308     45 64 86 F1 | 	sub	objptr, #69
2330c     00 92 06 F6 | 	mov	arg01, #0
23310     09 94 CE F9 | 	bmask	arg02, #9
23314     53 97 02 F6 | 	mov	arg03, local01
23318     3C EF BF FD | 	call	#_hg010b_spin2_fastline
2331c     01 A6 06 F1 | 	add	local01, #1
23320     04 A6 56 F2 | 	cmps	local01, #4 wc
23324     D8 FF 9F CD |  if_b	jmp	#LR__2892
23328                 | ' 
23328                 | ' repeat i from 0 to 35
23328     00 A6 06 F6 | 	mov	local01, #0
2332c                 | LR__2893
2332c     53 9B 02 F6 | 	mov	arg05, local01
23330     01 9A 06 F1 | 	add	arg05, #1
23334     1C 00 00 FF 
23338     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
2333c     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
23340     4B 9B 02 FD | 	qmul	arg05, arg03
23344                 | '   ram.read1($7E800, textbuf_ptr+(i+1)*timings[7], timings[7])
23344     04 64 06 F1 | 	add	objptr, #4
23348     32 95 02 FB | 	rdlong	arg02, objptr
2334c     1C 00 00 FF 
23350     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
23354     F4 03 00 FF 
23358     00 92 06 F6 | 	mov	arg01, ##518144
2335c     0B 00 00 FF 
23360     C8 64 06 F1 | 	add	objptr, ##5832
23364     18 9A 62 FD | 	getqx	arg05
23368     4D 95 02 F1 | 	add	arg02, arg05
2336c     4C 0A B0 FD | 	call	#_psram_spin2_read1
23370     1C 00 00 FF 
23374     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
23378     37 97 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
2337c     4B A7 02 FD | 	qmul	local01, arg03
23380                 | '   ram.write($7E800, textbuf_ptr+i*timings[7], timings[7])
23380     0B 00 00 FF 
23384     C8 64 86 F1 | 	sub	objptr, ##5832
23388     32 95 02 FB | 	rdlong	arg02, objptr
2338c     1C 00 00 FF 
23390     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
23394     F4 03 00 FF 
23398     00 92 06 F6 | 	mov	arg01, ##518144
2339c     0B 00 00 FF 
233a0     C8 64 06 F1 | 	add	objptr, ##5832
233a4     18 9A 62 FD | 	getqx	arg05
233a8     4D 95 02 F1 | 	add	arg02, arg05
233ac     A8 0A B0 FD | 	call	#_psram_spin2_write
233b0     0B 00 00 FF 
233b4     CC 64 86 F1 | 	sub	objptr, ##5836
233b8     01 A6 06 F1 | 	add	local01, #1
233bc     24 A6 56 F2 | 	cmps	local01, #36 wc
233c0     68 FF 9F CD |  if_b	jmp	#LR__2893
233c4                 | ' repeat i from 0 to timings[7]-1
233c4     00 A6 06 F6 | 	mov	local01, #0
233c8     1C 00 00 FF 
233cc     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
233d0     37 A9 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
233d4     1C 00 00 FF 
233d8     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
233dc     01 A8 86 F1 | 	sub	local02, #1
233e0     00 A8 56 F2 | 	cmps	local02, #0 wc
233e4     01 AA 86 F6 | 	negc	local03, #1
233e8     55 A9 02 F1 | 	add	local02, local03
233ec                 | LR__2894
233ec                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
233ec     04 64 06 F1 | 	add	objptr, #4
233f0     32 93 02 FB | 	rdlong	arg01, objptr
233f4     1C 00 00 FF 
233f8     5C 6E 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
233fc     37 9B 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
23400     1C 00 00 FF 
23404     5C 6E 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
23408     4D 99 02 F6 | 	mov	arg04, arg05
2340c     03 98 66 F0 | 	shl	arg04, #3
23410     4D 99 02 F1 | 	add	arg04, arg05
23414     02 98 66 F0 | 	shl	arg04, #2
23418     53 99 02 F1 | 	add	arg04, local01
2341c     4C 93 02 F1 | 	add	arg01, arg04
23420     20 94 06 F6 | 	mov	arg02, #32
23424     01 96 06 F6 | 	mov	arg03, #1
23428     00 98 06 F6 | 	mov	arg04, #0
2342c     01 9A 06 F6 | 	mov	arg05, #1
23430     0B 00 00 FF 
23434     C8 64 06 F1 | 	add	objptr, ##5832
23438     B8 0A B0 FD | 	call	#_psram_spin2_fill
2343c     0B 00 00 FF 
23440     CC 64 86 F1 | 	sub	objptr, ##5836
23444     55 A7 02 F1 | 	add	local01, local03
23448     54 A7 0A F2 | 	cmp	local01, local02 wz
2344c     9C FF 9F 5D |  if_ne	jmp	#LR__2894
23450     E7 F0 03 F6 | 	mov	ptra, fp
23454     F2 00 A0 FD | 	call	#popregs_
23458                 | _hg010b_spin2_scrollup2_ret
23458     2D 00 64 FD | 	ret
2345c                 | 
2345c                 | '  
2345c                 | ' ''----------- Scroll the screen one line down 
2345c                 | ' 
2345c                 | ' pub scrolldown(start=0) | i
2345c                 | _hg010b_spin2_scrolldown
2345c     05 CA 05 F6 | 	mov	COUNT_, #5
23460     E8 00 A0 FD | 	call	#pushregs_
23464     49 A7 02 F6 | 	mov	local01, arg01
23468                 | ' 
23468                 | ' repeat i from 579 to (start*16)+4
23468     01 00 00 FF 
2346c     43 A8 06 F6 | 	mov	local02, ##579
23470     53 AB 02 F6 | 	mov	local03, local01
23474     04 AA 66 F0 | 	shl	local03, #4
23478     04 AA 06 F1 | 	add	local03, #4
2347c     01 00 00 FF 
23480     43 AA 56 F2 | 	cmps	local03, ##579 wc
23484     01 AC 86 F6 | 	negc	local04, #1
23488     56 AF 02 F6 | 	mov	local05, local04
2348c     56 AB 02 F1 | 	add	local03, local04
23490                 | LR__2900
23490     DD 64 06 F1 | 	add	objptr, #221
23494     32 95 02 FB | 	rdlong	arg02, objptr
23498     54 AD 02 F6 | 	mov	local04, local02
2349c     02 AC 66 F0 | 	shl	local04, #2
234a0     14 64 06 F1 | 	add	objptr, #20
234a4     32 97 02 FB | 	rdlong	arg03, objptr
234a8     4B AD 02 FD | 	qmul	local04, arg03
234ac                 | '   ram.read1($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
234ac     02 96 66 F0 | 	shl	arg03, #2
234b0     F4 03 00 FF 
234b4     00 92 06 F6 | 	mov	arg01, ##518144
234b8     0A 00 00 FF 
234bc     DB 65 06 F1 | 	add	objptr, ##5595
234c0     18 AC 62 FD | 	getqx	local04
234c4     56 95 02 F1 | 	add	arg02, local04
234c8     F0 08 B0 FD | 	call	#_psram_spin2_read1
234cc     0A 00 00 FF 
234d0     EF 65 86 F1 | 	sub	objptr, ##5615
234d4     32 95 02 FB | 	rdlong	arg02, objptr
234d8     54 AD 02 F6 | 	mov	local04, local02
234dc     10 AC 06 F1 | 	add	local04, #16
234e0     02 AC 66 F0 | 	shl	local04, #2
234e4     14 64 06 F1 | 	add	objptr, #20
234e8     32 97 02 FB | 	rdlong	arg03, objptr
234ec     4B AD 02 FD | 	qmul	local04, arg03
234f0                 | '   ram.write($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
234f0     02 96 66 F0 | 	shl	arg03, #2
234f4     F4 03 00 FF 
234f8     00 92 06 F6 | 	mov	arg01, ##518144
234fc     0A 00 00 FF 
23500     DB 65 06 F1 | 	add	objptr, ##5595
23504     18 AC 62 FD | 	getqx	local04
23508     56 95 02 F1 | 	add	arg02, local04
2350c     48 09 B0 FD | 	call	#_psram_spin2_write
23510     0B 00 00 FF 
23514     CC 64 86 F1 | 	sub	objptr, ##5836
23518     57 A9 02 F1 | 	add	local02, local05
2351c     55 A9 0A F2 | 	cmp	local02, local03 wz
23520     6C FF 9F 5D |  if_ne	jmp	#LR__2900
23524                 | ' 
23524                 | ' repeat i from (start*16)+4 to (start*16)+19
23524     53 A9 02 F6 | 	mov	local02, local01
23528     04 A8 66 F0 | 	shl	local02, #4
2352c     04 A8 06 F1 | 	add	local02, #4
23530     53 AF 02 F6 | 	mov	local05, local01
23534     04 AE 66 F0 | 	shl	local05, #4
23538     13 AE 06 F1 | 	add	local05, #19
2353c     53 AD 02 F6 | 	mov	local04, local01
23540     04 AC 66 F0 | 	shl	local04, #4
23544     04 AC 06 F1 | 	add	local04, #4
23548     56 AF 52 F2 | 	cmps	local05, local04 wc
2354c     01 AC 86 F6 | 	negc	local04, #1
23550     56 AB 02 F6 | 	mov	local03, local04
23554     56 AF 02 F1 | 	add	local05, local04
23558                 | LR__2901
23558                 | '    fastline(0,1023,i,write_background)    
23558     45 64 06 F1 | 	add	objptr, #69
2355c     32 99 02 FB | 	rdlong	arg04, objptr
23560     45 64 86 F1 | 	sub	objptr, #69
23564     00 92 06 F6 | 	mov	arg01, #0
23568     09 94 CE F9 | 	bmask	arg02, #9
2356c     54 97 02 F6 | 	mov	arg03, local02
23570     E4 EC BF FD | 	call	#_hg010b_spin2_fastline
23574     55 A9 02 F1 | 	add	local02, local03
23578     57 A9 0A F2 | 	cmp	local02, local05 wz
2357c     D8 FF 9F 5D |  if_ne	jmp	#LR__2901
23580                 | '    
23580                 | ' repeat i from 35 to start
23580     23 A8 06 F6 | 	mov	local02, #35
23584     23 A6 56 F2 | 	cmps	local01, #35 wc
23588     01 AC 86 F6 | 	negc	local04, #1
2358c     53 AF 02 F6 | 	mov	local05, local01
23590     56 AF 02 F1 | 	add	local05, local04
23594                 | LR__2902
23594                 | '   ram.read1($7E800, textbuf_ptr+(i*128), 128)
23594     04 64 06 F1 | 	add	objptr, #4
23598     32 95 02 FB | 	rdlong	arg02, objptr
2359c     54 AB 02 F6 | 	mov	local03, local02
235a0     07 AA 66 F0 | 	shl	local03, #7
235a4     55 95 02 F1 | 	add	arg02, local03
235a8     F4 03 00 FF 
235ac     00 92 06 F6 | 	mov	arg01, ##518144
235b0     80 96 06 F6 | 	mov	arg03, #128
235b4     0B 00 00 FF 
235b8     C8 64 06 F1 | 	add	objptr, ##5832
235bc     FC 07 B0 FD | 	call	#_psram_spin2_read1
235c0                 | '   ram.write($7E800, textbuf_ptr+(i+1)*128,128)
235c0     0B 00 00 FF 
235c4     C8 64 86 F1 | 	sub	objptr, ##5832
235c8     32 95 02 FB | 	rdlong	arg02, objptr
235cc     54 AB 02 F6 | 	mov	local03, local02
235d0     01 AA 06 F1 | 	add	local03, #1
235d4     07 AA 66 F0 | 	shl	local03, #7
235d8     55 95 02 F1 | 	add	arg02, local03
235dc     F4 03 00 FF 
235e0     00 92 06 F6 | 	mov	arg01, ##518144
235e4     80 96 06 F6 | 	mov	arg03, #128
235e8     0B 00 00 FF 
235ec     C8 64 06 F1 | 	add	objptr, ##5832
235f0     64 08 B0 FD | 	call	#_psram_spin2_write
235f4     0B 00 00 FF 
235f8     CC 64 86 F1 | 	sub	objptr, ##5836
235fc     56 A9 02 F1 | 	add	local02, local04
23600     57 A9 0A F2 | 	cmp	local02, local05 wz
23604     8C FF 9F 5D |  if_ne	jmp	#LR__2902
23608                 | ' repeat i from 0 to 127
23608     00 A8 06 F6 | 	mov	local02, #0
2360c                 | LR__2903
2360c                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
2360c     04 64 06 F1 | 	add	objptr, #4
23610     32 93 02 FB | 	rdlong	arg01, objptr
23614     53 AF 02 F6 | 	mov	local05, local01
23618     07 AE 66 F0 | 	shl	local05, #7
2361c     57 93 02 F1 | 	add	arg01, local05
23620     54 93 02 F1 | 	add	arg01, local02
23624     20 94 06 F6 | 	mov	arg02, #32
23628     01 96 06 F6 | 	mov	arg03, #1
2362c     00 98 06 F6 | 	mov	arg04, #0
23630     01 9A 06 F6 | 	mov	arg05, #1
23634     0B 00 00 FF 
23638     C8 64 06 F1 | 	add	objptr, ##5832
2363c     B4 08 B0 FD | 	call	#_psram_spin2_fill
23640     0B 00 00 FF 
23644     CC 64 86 F1 | 	sub	objptr, ##5836
23648     01 A8 06 F1 | 	add	local02, #1
2364c     80 A8 56 F2 | 	cmps	local02, #128 wc
23650     B8 FF 9F CD |  if_b	jmp	#LR__2903
23654     E7 F0 03 F6 | 	mov	ptra, fp
23658     F2 00 A0 FD | 	call	#popregs_
2365c                 | _hg010b_spin2_scrolldown_ret
2365c     2D 00 64 FD | 	ret
23660                 | 
23660                 | ' 
23660                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
23660                 | ' 
23660                 | ' pub crlf()
23660                 | _hg010b_spin2_crlf
23660                 | ' 
23660                 | ' cursor_x:=leading_spaces*2
23660     01 00 00 FF 
23664     B6 64 06 F1 | 	add	objptr, ##694
23668     32 97 02 FB | 	rdlong	arg03, objptr
2366c     01 96 66 F0 | 	shl	arg03, #1
23670     01 00 00 FF 
23674     7A 64 86 F1 | 	sub	objptr, ##634
23678     32 97 52 FC | 	wrword	arg03, objptr
2367c                 | ' cursor_y+=1
2367c     02 64 06 F1 | 	add	objptr, #2
23680     32 97 C2 FA | 	rdbyte	arg03, objptr
23684     01 96 06 F1 | 	add	arg03, #1
23688     32 97 42 FC | 	wrbyte	arg03, objptr
2368c                 | ' if cursor_y>st_lines-1
2368c     C3 64 06 F1 | 	add	objptr, #195
23690     32 97 02 FB | 	rdlong	arg03, objptr
23694     01 96 86 F1 | 	sub	arg03, #1
23698     C3 64 86 F1 | 	sub	objptr, #195
2369c     32 95 C2 FA | 	rdbyte	arg02, objptr
236a0     3E 64 86 F1 | 	sub	objptr, #62
236a4     4B 95 5A F2 | 	cmps	arg02, arg03 wcz
236a8     2C 00 90 ED |  if_be	jmp	#LR__2910
236ac                 | '   scrollup2()
236ac     00 92 06 F6 | 	mov	arg01, #0
236b0     01 00 00 FF 
236b4     58 94 06 F6 | 	mov	arg02, ##600
236b8     10 96 06 F6 | 	mov	arg03, #16
236bc     64 FB BF FD | 	call	#_hg010b_spin2_scrollup2
236c0                 | '   cursor_y:=st_lines-1
236c0     01 65 06 F1 | 	add	objptr, #257
236c4     32 97 02 FB | 	rdlong	arg03, objptr
236c8     01 96 86 F1 | 	sub	arg03, #1
236cc     C3 64 86 F1 | 	sub	objptr, #195
236d0     32 97 42 FC | 	wrbyte	arg03, objptr
236d4     3E 64 86 F1 | 	sub	objptr, #62
236d8                 | LR__2910
236d8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
236d8     3C 64 06 F1 | 	add	objptr, #60
236dc     32 95 E2 FA | 	rdword	arg02, objptr
236e0     02 94 66 F0 | 	shl	arg02, #2
236e4     02 64 06 F1 | 	add	objptr, #2
236e8     32 97 C2 FA | 	rdbyte	arg03, objptr
236ec     3E 64 86 F1 | 	sub	objptr, #62
236f0     04 96 66 F0 | 	shl	arg03, #4
236f4     04 96 06 F1 | 	add	arg03, #4
236f8     11 92 06 F6 | 	mov	arg01, #17
236fc     0C E9 BF FD | 	call	#_hg010b_spin2_setspritepos
23700                 | _hg010b_spin2_crlf_ret
23700     2D 00 64 FD | 	ret
23704                 | 
23704                 | ' 
23704                 | ' 
23704                 | ' '*************************************************************************
23704                 | ' '                                                                        *
23704                 | ' '  Conversions                                                           *
23704                 | ' '                                                                        *
23704                 | ' '*************************************************************************
23704                 | ' 
23704                 | ' ''---------- Convert a integer to dec string, return a pointer
23704                 | ' 
23704                 | ' pub inttostr(i):result |q,pos,k,j
23704                 | _hg010b_spin2_inttostr
23704     03 CA 05 F6 | 	mov	COUNT_, #3
23708     E8 00 A0 FD | 	call	#pushregs_
2370c     49 A7 0A F6 | 	mov	local01, arg01 wz
23710                 | ' 
23710                 | ' j:=i
23710                 | ' pos:=10
23710     0A A8 06 F6 | 	mov	local02, #10
23714                 | ' k:=0
23714     00 AA 06 F6 | 	mov	local03, #0
23718                 | ' 
23718                 | ' if (j==0)
23718     18 00 90 5D |  if_ne	jmp	#LR__2920
2371c                 | '   n_string[0]:=48
2371c     4D 64 06 F1 | 	add	objptr, #77
23720     32 61 48 FC | 	wrbyte	#48, objptr
23724                 | '   n_string[1]:=0
23724     01 64 06 F1 | 	add	objptr, #1
23728     32 01 48 FC | 	wrbyte	#0, objptr
2372c     4E 64 86 F1 | 	sub	objptr, #78
23730     C4 00 90 FD | 	jmp	#LR__2927
23734                 | LR__2920
23734                 | ' 
23734                 | ' else
23734                 | '   if (j<0)
23734     53 A7 52 F6 | 	abs	local01, local01 wc
23738                 | '     j:=0-j
23738                 | '     k:=45
23738     2D AA 06 C6 |  if_b	mov	local03, #45
2373c                 | ' 
2373c                 | '   n_string[11]:=0
2373c     58 64 06 F1 | 	add	objptr, #88
23740     32 01 48 FC | 	wrbyte	#0, objptr
23744     58 64 86 F1 | 	sub	objptr, #88
23748     D7 24 48 FB | 	callpa	#(@LR__2922-@LR__2921)>>2,fcache_load_ptr_
2374c                 | '   repeat while (pos>-1)
2374c                 | LR__2921
2374c     00 A8 56 F2 | 	cmps	local02, #0 wc
23750     40 00 90 CD |  if_b	jmp	#LR__2923
23754     53 7B 52 F6 | 	abs	result1, local01 wc
23758     0A 7A 16 FD | 	qdiv	result1, #10
2375c                 | '     q:=j//10
2375c     19 7A 62 FD | 	getqy	result1
23760     3D 7B 82 F6 | 	negc	result1, result1
23764     53 A7 52 F6 | 	abs	local01, local01 wc
23768     0A A6 16 FD | 	qdiv	local01, #10
2376c                 | '     q:=48+q
2376c     30 7A 06 F1 | 	add	result1, #48
23770                 | '     n_string[pos]:=q
23770     54 A7 02 F6 | 	mov	local01, local02
23774     32 97 02 F6 | 	mov	arg03, objptr
23778     4D 96 06 F1 | 	add	arg03, #77
2377c     4B A7 02 F1 | 	add	local01, arg03
23780     53 7B 42 FC | 	wrbyte	result1, local01
23784                 | '     j:=j/10
23784                 | '     pos-=1
23784     01 A8 86 F1 | 	sub	local02, #1
23788     18 A6 62 FD | 	getqx	local01
2378c     53 A7 82 F6 | 	negc	local01, local01
23790     B8 FF 9F FD | 	jmp	#LR__2921
23794                 | LR__2922
23794                 | LR__2923
23794                 | '   repeat while n_string[0]==48
23794                 | LR__2924
23794     4D 64 06 F1 | 	add	objptr, #77
23798     32 97 C2 FA | 	rdbyte	arg03, objptr
2379c     4D 64 86 F1 | 	sub	objptr, #77
237a0     30 96 0E F2 | 	cmp	arg03, #48 wz
237a4     20 00 90 5D |  if_ne	jmp	#LR__2925
237a8                 | '     bytemove(@n_string,@n_string+1,12)
237a8     4D 64 06 F1 | 	add	objptr, #77
237ac     32 93 02 F6 | 	mov	arg01, objptr
237b0     32 95 02 F6 | 	mov	arg02, objptr
237b4     4D 64 86 F1 | 	sub	objptr, #77
237b8     01 94 06 F1 | 	add	arg02, #1
237bc     0C 96 06 F6 | 	mov	arg03, #12
237c0     C8 10 B0 FD | 	call	#__system____builtin_memmove
237c4     CC FF 9F FD | 	jmp	#LR__2924
237c8                 | LR__2925
237c8                 | ' 
237c8                 | '   if k==45
237c8     2D AA 0E F2 | 	cmp	local03, #45 wz
237cc     28 00 90 5D |  if_ne	jmp	#LR__2926
237d0                 | '      bytemove(@n_string+1,@n_string,12)
237d0     4D 64 06 F1 | 	add	objptr, #77
237d4     32 93 02 F6 | 	mov	arg01, objptr
237d8     01 92 06 F1 | 	add	arg01, #1
237dc     32 95 02 F6 | 	mov	arg02, objptr
237e0     4D 64 86 F1 | 	sub	objptr, #77
237e4     0C 96 06 F6 | 	mov	arg03, #12
237e8     A0 10 B0 FD | 	call	#__system____builtin_memmove
237ec                 | '      n_string[0]:=k
237ec     4D 64 06 F1 | 	add	objptr, #77
237f0     32 AB 42 FC | 	wrbyte	local03, objptr
237f4     4D 64 86 F1 | 	sub	objptr, #77
237f8                 | LR__2926
237f8                 | LR__2927
237f8                 | ' 
237f8                 | ' q:=@n_string
237f8     32 7B 02 F6 | 	mov	result1, objptr
237fc     4D 7A 06 F1 | 	add	result1, #77
23800                 | ' return q
23800     E7 F0 03 F6 | 	mov	ptra, fp
23804     F2 00 A0 FD | 	call	#popregs_
23808                 | _hg010b_spin2_inttostr_ret
23808     2D 00 64 FD | 	ret
2380c                 | 
2380c                 | ' 
2380c                 | ' '**********************************************************************************
2380c                 | ' '
2380c                 | ' '        Blitting
2380c                 | ' '
2380c                 | ' '**********************************************************************************
2380c                 | ' 
2380c                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
2380c                 | _hg010b_spin2_blit
2380c     18 CA 05 F6 | 	mov	COUNT_, #24
23810     E8 00 A0 FD | 	call	#pushregs_
23814     49 A7 02 F6 | 	mov	local01, arg01
23818     4A A9 02 F6 | 	mov	local02, arg02
2381c     4B AB 02 F6 | 	mov	local03, arg03
23820     4C AD 02 F6 | 	mov	local04, arg04
23824     4D AF 02 F6 | 	mov	local05, arg05
23828     4E B1 02 F6 | 	mov	local06, arg06
2382c     4F B3 02 F6 | 	mov	local07, arg07
23830     50 B5 02 F6 | 	mov	local08, arg08
23834     51 B7 02 F6 | 	mov	local09, arg09
23838     52 B9 02 F6 | 	mov	local10, arg10
2383c                 | ' 
2383c                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
2383c     00 04 00 FF 
23840     00 A6 56 F2 | 	cmps	local01, ##524288 wc
23844     00 04 00 3F 
23848     00 B2 56 32 |  if_ae	cmps	local07, ##524288 wc
2384c     98 01 90 CD |  if_b	jmp	#LR__2934
23850     56 A9 5A F2 | 	cmps	local02, local04 wcz
23854     54 BB 02 16 |  if_a	mov	local11, local02
23858     56 A9 02 16 |  if_a	mov	local02, local04
2385c     5D AD 02 16 |  if_a	mov	local04, local11
23860     57 AB 5A F2 | 	cmps	local03, local05 wcz
23864     55 BB 02 16 |  if_a	mov	local11, local03
23868     57 AB 02 16 |  if_a	mov	local03, local05
2386c     58 AB 02 FD | 	qmul	local03, local06
23870                 | '   if x1a>x2a
23870                 | '     x1a,x2a:=x2a,x1a
23870                 | '   if y1a>y2a
23870                 | '     y1a,y2a:=y2a,y1a  
23870     5D AF 02 16 |  if_a	mov	local05, local11
23874                 | '   if x2a-x1a>1023 
23874     56 BB 02 F6 | 	mov	local11, local04
23878     54 BB 82 F1 | 	sub	local11, local02
2387c     02 00 00 FF 
23880     00 BA 56 F2 | 	cmps	local11, ##1024 wc
23884                 | '     x2a:=x1a+1023 ' limit the line to 1024
23884     54 AD 02 36 |  if_ae	mov	local04, local02
23888     01 00 00 3F 
2388c     FF AD 06 31 |  if_ae	add	local04, ##1023
23890                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
23890     59 BD 02 F6 | 	mov	local12, local07
23894     54 BD 02 F1 | 	add	local12, local02
23898     18 BA 62 FD | 	getqx	local11
2389c     5C B7 02 FD | 	qmul	local09, local10
238a0     5D BD 02 F1 | 	add	local12, local11
238a4     53 BF 02 F6 | 	mov	local13, local01
238a8     5A BF 02 F1 | 	add	local13, local08
238ac     18 BA 62 FD | 	getqx	local11
238b0     5D BF 02 F1 | 	add	local13, local11
238b4     5F BD 5A F2 | 	cmps	local12, local13 wcz
238b8     98 00 90 ED |  if_be	jmp	#LR__2931
238bc                 | '     repeat y from y1a to y2a
238bc     55 C1 02 F6 | 	mov	local14, local03
238c0     55 AF 52 F2 | 	cmps	local05, local03 wc
238c4     01 C2 86 F6 | 	negc	local15, #1
238c8     57 C5 02 F6 | 	mov	local16, local05
238cc     61 C5 02 F1 | 	add	local16, local15
238d0     0B 00 00 FF 
238d4     CC 64 06 F1 | 	add	objptr, ##5836
238d8                 | LR__2930
238d8     58 C1 02 FD | 	qmul	local14, local06
238dc                 | '   '    writeln(string("I am here"))
238dc                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
238dc     53 95 02 F6 | 	mov	arg02, local01
238e0     56 97 02 F6 | 	mov	arg03, local04
238e4     54 97 82 F1 | 	sub	arg03, local02
238e8     01 96 06 F1 | 	add	arg03, #1
238ec     F4 03 00 FF 
238f0     00 92 06 F6 | 	mov	arg01, ##518144
238f4     18 BE 62 FD | 	getqx	local13
238f8     5F 95 02 F1 | 	add	arg02, local13
238fc     54 95 02 F1 | 	add	arg02, local02
23900     B8 04 B0 FD | 	call	#_psram_spin2_read1
23904     5B BF 02 F6 | 	mov	local13, local09
23908     55 BF 82 F1 | 	sub	local13, local03
2390c     60 BF 02 F1 | 	add	local13, local14
23910     5C BF 02 FD | 	qmul	local13, local10
23914                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
23914     59 95 02 F6 | 	mov	arg02, local07
23918     56 97 02 F6 | 	mov	arg03, local04
2391c     54 97 82 F1 | 	sub	arg03, local02
23920     01 96 06 F1 | 	add	arg03, #1
23924     F4 03 00 FF 
23928     00 92 06 F6 | 	mov	arg01, ##518144
2392c     18 BE 62 FD | 	getqx	local13
23930     5F 95 02 F1 | 	add	arg02, local13
23934     5A 95 02 F1 | 	add	arg02, local08
23938     1C 05 B0 FD | 	call	#_psram_spin2_write
2393c     61 C1 02 F1 | 	add	local14, local15
23940     62 C1 0A F2 | 	cmp	local14, local16 wz
23944     90 FF 9F 5D |  if_ne	jmp	#LR__2930
23948     0B 00 00 FF 
2394c     CC 64 86 F1 | 	sub	objptr, ##5836
23950     94 00 90 FD | 	jmp	#LR__2933
23954                 | LR__2931
23954                 | '   else
23954                 | '     repeat y from y2a to y1a
23954     57 C1 02 F6 | 	mov	local14, local05
23958     57 AB 52 F2 | 	cmps	local03, local05 wc
2395c     01 C6 86 F6 | 	negc	local17, #1
23960     55 C9 02 F6 | 	mov	local18, local03
23964     63 C9 02 F1 | 	add	local18, local17
23968     0B 00 00 FF 
2396c     CC 64 06 F1 | 	add	objptr, ##5836
23970                 | LR__2932
23970     58 C1 02 FD | 	qmul	local14, local06
23974                 | '  '     writeln(string("I am there"))
23974                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
23974     53 95 02 F6 | 	mov	arg02, local01
23978     56 97 02 F6 | 	mov	arg03, local04
2397c     54 97 82 F1 | 	sub	arg03, local02
23980     01 96 06 F1 | 	add	arg03, #1
23984     F4 03 00 FF 
23988     00 92 06 F6 | 	mov	arg01, ##518144
2398c     18 C4 62 FD | 	getqx	local16
23990     62 95 02 F1 | 	add	arg02, local16
23994     54 95 02 F1 | 	add	arg02, local02
23998     20 04 B0 FD | 	call	#_psram_spin2_read1
2399c     5B C5 02 F6 | 	mov	local16, local09
239a0     55 C5 82 F1 | 	sub	local16, local03
239a4     60 C5 02 F1 | 	add	local16, local14
239a8     5C C5 02 FD | 	qmul	local16, local10
239ac                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
239ac     59 95 02 F6 | 	mov	arg02, local07
239b0     56 97 02 F6 | 	mov	arg03, local04
239b4     54 97 82 F1 | 	sub	arg03, local02
239b8     01 96 06 F1 | 	add	arg03, #1
239bc     F4 03 00 FF 
239c0     00 92 06 F6 | 	mov	arg01, ##518144
239c4     18 C4 62 FD | 	getqx	local16
239c8     62 95 02 F1 | 	add	arg02, local16
239cc     5A 95 02 F1 | 	add	arg02, local08
239d0     84 04 B0 FD | 	call	#_psram_spin2_write
239d4     63 C1 02 F1 | 	add	local14, local17
239d8     64 C1 0A F2 | 	cmp	local14, local18 wz
239dc     90 FF 9F 5D |  if_ne	jmp	#LR__2932
239e0     0B 00 00 FF 
239e4     CC 64 86 F1 | 	sub	objptr, ##5836
239e8                 | LR__2933
239e8                 | LR__2934
239e8                 | '     
239e8                 | ' if ((f>=$80000) && (t<$80000)) 
239e8     00 04 00 FF 
239ec     00 A6 56 F2 | 	cmps	local01, ##524288 wc
239f0     80 00 90 CD |  if_b	jmp	#LR__2936
239f4     00 04 00 FF 
239f8     00 B2 56 F2 | 	cmps	local07, ##524288 wc
239fc     74 00 90 3D |  if_ae	jmp	#LR__2936
23a00                 | '   repeat y from y1a to y2a
23a00     55 C1 02 F6 | 	mov	local14, local03
23a04     55 AF 52 F2 | 	cmps	local05, local03 wc
23a08     01 CA 86 F6 | 	negc	local19, #1
23a0c     57 CD 02 F6 | 	mov	local20, local05
23a10     65 CD 02 F1 | 	add	local20, local19
23a14     0B 00 00 FF 
23a18     CC 64 06 F1 | 	add	objptr, ##5836
23a1c                 | LR__2935
23a1c     5B C9 02 F6 | 	mov	local18, local09
23a20     55 C9 82 F1 | 	sub	local18, local03
23a24     60 C9 02 F1 | 	add	local18, local14
23a28     5C C9 02 FD | 	qmul	local18, local10
23a2c                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
23a2c     59 93 02 F6 | 	mov	arg01, local07
23a30     18 C8 62 FD | 	getqx	local18
23a34     58 C1 02 FD | 	qmul	local14, local06
23a38     64 93 02 F1 | 	add	arg01, local18
23a3c     5A 93 02 F1 | 	add	arg01, local08
23a40     53 95 02 F6 | 	mov	arg02, local01
23a44     56 97 02 F6 | 	mov	arg03, local04
23a48     54 97 82 F1 | 	sub	arg03, local02
23a4c     01 96 06 F1 | 	add	arg03, #1
23a50     18 C8 62 FD | 	getqx	local18
23a54     64 95 02 F1 | 	add	arg02, local18
23a58     54 95 02 F1 | 	add	arg02, local02
23a5c     5C 03 B0 FD | 	call	#_psram_spin2_read1
23a60     65 C1 02 F1 | 	add	local14, local19
23a64     66 C1 0A F2 | 	cmp	local14, local20 wz
23a68     B0 FF 9F 5D |  if_ne	jmp	#LR__2935
23a6c     0B 00 00 FF 
23a70     CC 64 86 F1 | 	sub	objptr, ##5836
23a74                 | LR__2936
23a74                 | '     
23a74                 | ' if ((f<$80000) && (t>=$80000)) 
23a74     00 04 00 FF 
23a78     00 A6 56 F2 | 	cmps	local01, ##524288 wc
23a7c     84 00 90 3D |  if_ae	jmp	#LR__2938
23a80     00 04 00 FF 
23a84     00 B2 56 F2 | 	cmps	local07, ##524288 wc
23a88     78 00 90 CD |  if_b	jmp	#LR__2938
23a8c                 | '   t:=t & $FFFFFFF
23a8c     7C B2 06 F4 | 	bitl	local07, #124
23a90                 | '   repeat y from y1a to y2a
23a90     55 C1 02 F6 | 	mov	local14, local03
23a94     55 AF 52 F2 | 	cmps	local05, local03 wc
23a98     01 CE 86 F6 | 	negc	local21, #1
23a9c     57 D1 02 F6 | 	mov	local22, local05
23aa0     67 D1 02 F1 | 	add	local22, local21
23aa4     0B 00 00 FF 
23aa8     CC 64 06 F1 | 	add	objptr, ##5836
23aac                 | LR__2937
23aac     58 C1 02 FD | 	qmul	local14, local06
23ab0                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
23ab0     53 93 02 F6 | 	mov	arg01, local01
23ab4     5B CD 02 F6 | 	mov	local20, local09
23ab8     55 CD 82 F1 | 	sub	local20, local03
23abc     60 CD 02 F1 | 	add	local20, local14
23ac0     18 CA 62 FD | 	getqx	local19
23ac4     5C CD 02 FD | 	qmul	local20, local10
23ac8     65 93 02 F1 | 	add	arg01, local19
23acc     54 93 02 F1 | 	add	arg01, local02
23ad0     59 95 02 F6 | 	mov	arg02, local07
23ad4     56 97 02 F6 | 	mov	arg03, local04
23ad8     54 97 82 F1 | 	sub	arg03, local02
23adc     01 96 06 F1 | 	add	arg03, #1
23ae0     18 CC 62 FD | 	getqx	local20
23ae4     66 95 02 F1 | 	add	arg02, local20
23ae8     5A 95 02 F1 | 	add	arg02, local08
23aec     68 03 B0 FD | 	call	#_psram_spin2_write
23af0     67 C1 02 F1 | 	add	local14, local21
23af4     68 C1 0A F2 | 	cmp	local14, local22 wz
23af8     B0 FF 9F 5D |  if_ne	jmp	#LR__2937
23afc     0B 00 00 FF 
23b00     CC 64 86 F1 | 	sub	objptr, ##5836
23b04                 | LR__2938
23b04                 | '     
23b04                 | ' if ((f<$80000) && (t<$80000)) 
23b04     00 04 00 FF 
23b08     00 A6 56 F2 | 	cmps	local01, ##524288 wc
23b0c     00 04 00 CF 
23b10     00 B2 56 C2 |  if_b	cmps	local07, ##524288 wc
23b14     64 00 90 3D |  if_ae	jmp	#LR__2940
23b18                 | '   repeat y from y1a to y2a
23b18     55 C1 02 F6 | 	mov	local14, local03
23b1c     55 AF 52 F2 | 	cmps	local05, local03 wc
23b20     01 D2 86 F6 | 	negc	local23, #1
23b24     57 D5 02 F6 | 	mov	local24, local05
23b28     69 D5 02 F1 | 	add	local24, local23
23b2c                 | LR__2939
23b2c     58 C1 02 FD | 	qmul	local14, local06
23b30                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
23b30     53 93 02 F6 | 	mov	arg01, local01
23b34     5B D1 02 F6 | 	mov	local22, local09
23b38     55 D1 82 F1 | 	sub	local22, local03
23b3c     60 D1 02 F1 | 	add	local22, local14
23b40     18 CE 62 FD | 	getqx	local21
23b44     5C D1 02 FD | 	qmul	local22, local10
23b48     67 93 02 F1 | 	add	arg01, local21
23b4c     54 93 02 F1 | 	add	arg01, local02
23b50     59 95 02 F6 | 	mov	arg02, local07
23b54     56 97 02 F6 | 	mov	arg03, local04
23b58     54 97 82 F1 | 	sub	arg03, local02
23b5c     01 96 06 F1 | 	add	arg03, #1
23b60     18 D0 62 FD | 	getqx	local22
23b64     68 95 02 F1 | 	add	arg02, local22
23b68     5A 95 02 F1 | 	add	arg02, local08
23b6c     1C 0D B0 FD | 	call	#__system____builtin_memmove
23b70     69 C1 02 F1 | 	add	local14, local23
23b74     6A C1 0A F2 | 	cmp	local14, local24 wz
23b78     B0 FF 9F 5D |  if_ne	jmp	#LR__2939
23b7c                 | LR__2940
23b7c     E7 F0 03 F6 | 	mov	ptra, fp
23b80     F2 00 A0 FD | 	call	#popregs_
23b84                 | _hg010b_spin2_blit_ret
23b84     2D 00 64 FD | 	ret
23b88                 | 
23b88                 | ' 
23b88                 | ' '..............................................................................
23b88                 | ' 
23b88                 | ' {{
23b88                 | ' }}
23b88                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
23b88                 | _psram_spin2_startx
23b88     04 CA 05 F6 | 	mov	COUNT_, #4
23b8c     E8 00 A0 FD | 	call	#pushregs_
23b90     49 A7 02 F6 | 	mov	local01, arg01
23b94     4B A9 02 F6 | 	mov	local02, arg03
23b98     4C AB 02 F6 | 	mov	local03, arg04
23b9c                 | '     stop() ' restart driver if required
23b9c     5C 01 B0 FD | 	call	#_psram_spin2_stop
23ba0     00 A6 0E F2 | 	cmp	local01, #0 wz
23ba4     14 A6 06 AB |  if_e	rdlong	local01, #20
23ba8     53 95 52 F6 | 	abs	arg02, local01 wc
23bac     A1 07 00 FF 
23bb0     40 94 16 FD | 	qdiv	arg02, ##1000000
23bb4                 | ' 
23bb4                 | '     ' use current frequency if none specified
23bb4                 | ' 
23bb4                 | '     if freq == 0 
23bb4                 | '         freq := clkfreq 
23bb4                 | ' 
23bb4                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
23bb4                 | ' 
23bb4                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
23bb4                 | '     if burst < 0
23bb4                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
23bb4     18 94 62 FD | 	getqx	arg02
23bb8     4A 99 82 F6 | 	negc	arg04, arg02
23bbc     03 98 66 F0 | 	shl	arg04, #3
23bc0     84 98 86 F1 | 	sub	arg04, #132
23bc4     04 98 46 F0 | 	shr	arg04, #4
23bc8     04 98 66 F0 | 	shl	arg04, #4
23bcc     00 98 56 F2 | 	cmps	arg04, #0 wc
23bd0     0E 7A 66 C6 |  if_b	neg	result1, #14
23bd4     18 01 90 CD |  if_b	jmp	#LR__2954
23bd8                 | ' 
23bd8                 | '     ' compute the input delay
23bd8                 | ' 
23bd8                 | '     if delay <= 0
23bd8     01 A8 56 F2 | 	cmps	local02, #1 wc
23bdc     10 00 90 3D |  if_ae	jmp	#LR__2950
23be0                 | '         delay := lookupDelay(freq)
23be0     53 93 02 F6 | 	mov	arg01, local01
23be4     C0 04 B0 FD | 	call	#_psram_spin2_lookupDelay
23be8     3D A9 02 F6 | 	mov	local02, result1
23bec     04 00 90 FD | 	jmp	#LR__2951
23bf0                 | LR__2950
23bf0                 | '     else
23bf0                 | '         delay <#= $f ' limit to 15
23bf0     0F A8 66 F3 | 	fles	local02, #15
23bf4                 | LR__2951
23bf4                 | ' 
23bf4                 | '     ' create our lock
23bf4                 | ' 
23bf4                 | '     driverlock := LOCKNEW()  
23bf4     00 7A 06 F6 | 	mov	result1, #0
23bf8     04 7A 62 FD | 	locknew	result1
23bfc     04 75 06 F1 | 	add	ptr__psram_spin2_dat__, #260
23c00     3A 7B 62 FC | 	wrlong	result1, ptr__psram_spin2_dat__
23c04                 | '     if driverlock == -1
23c04     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
23c08     FF FF 7F FF 
23c0c     FF 7B 0E F2 | 	cmp	result1, ##-1 wz
23c10                 | '         return ERR_NO_LOCK
23c10     1A 7A 66 A6 |  if_e	neg	result1, #26
23c14     D8 00 90 AD |  if_e	jmp	#LR__2954
23c18                 | ' 
23c18                 | '     ' patch in the proper data and HUB addresses to the startup structure
23c18                 | ' 
23c18                 | '     long[@startupData][0]:=clkfreq
23c18     14 A6 06 FB | 	rdlong	local01, #20
23c1c     28 75 06 F1 | 	add	ptr__psram_spin2_dat__, #296
23c20     3A A7 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
23c24                 | ' '    long[@startupData][1]:=$1000_0000
23c24                 | '     long[@startupData][5]:=@deviceData
23c24     3A A7 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
23c28     20 A6 06 F1 | 	add	local01, #32
23c2c     3A 95 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
23c30     14 94 06 F1 | 	add	arg02, #20
23c34     4A A7 62 FC | 	wrlong	local01, arg02
23c38                 | '     long[@startupData][6]:=@qosData
23c38     3A A7 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
23c3c     A0 A6 06 F1 | 	add	local01, #160
23c40     3A 95 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
23c44     18 94 06 F1 | 	add	arg02, #24
23c48     4A A7 62 FC | 	wrlong	local01, arg02
23c4c                 | '     long[@startupData][7]:=$7FF00
23c4c     3A A7 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
23c50     1C A6 06 F1 | 	add	local01, #28
23c54     FF 03 80 FF 
23c58     53 01 6A FC | 	wrlong	##524032, local01
23c5c                 | ' 
23c5c                 | '     ' setup some default bank and QoS parameter values
23c5c                 | ' 
23c5c                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
23c5c     20 74 06 F1 | 	add	ptr__psram_spin2_dat__, #32
23c60     3A 93 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
23c64     48 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #328
23c68     10 98 66 F0 | 	shl	arg04, #16
23c6c     0C A8 66 F0 | 	shl	local02, #12
23c70     54 99 42 F5 | 	or	arg04, local02
23c74     18 98 46 F5 | 	or	arg04, #24
23c78     4C 95 02 F6 | 	mov	arg02, arg04
23c7c     02 96 06 F6 | 	mov	arg03, #2
23c80     E0 00 A0 FD | 	call	#\builtin_longfill_
23c84                 | '     longfill(@qosData, $FFFF0000, 8)
23c84     3A 93 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
23c88     C8 93 06 F1 | 	add	arg01, #456
23c8c     07 96 06 F6 | 	mov	arg03, #7
23c90     28 96 62 FD | 	setq	arg03
23c94     80 FF FF FF 
23c98     49 01 68 FC | 	wrlong	##-65536, arg01
23c9c                 | ' 
23c9c                 | '     ' get the address of the PSRAM memory driver so we can start it
23c9c                 | ' 
23c9c                 | '     driverAddr:= driver.getDriverAddr()
23c9c                 | '     return @driver_start
23c9c     39 95 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
23ca0     20 94 06 F1 | 	add	arg02, #32
23ca4                 | ' 
23ca4                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
23ca4                 | ' 
23ca4                 | '     if desiredcog < 0
23ca4     00 AA 56 F2 | 	cmps	local03, #0 wc
23ca8                 | '         desiredcog := NEWCOG
23ca8     10 AA 06 C6 |  if_b	mov	local03, #16
23cac                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
23cac     3A 97 02 F6 | 	mov	arg03, ptr__psram_spin2_dat__
23cb0     28 97 06 F1 | 	add	arg03, #296
23cb4     55 AD 02 F6 | 	mov	local04, local03
23cb8     28 96 62 FD | 	setq	arg03
23cbc     4A AD F2 FC | 	coginit	local04, arg02 wc
23cc0     01 AC 66 C6 |  if_b	neg	local04, #1
23cc4     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23cc8     3A AD 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
23ccc     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23cd0     D7 08 48 FB | 	callpa	#(@LR__2953-@LR__2952)>>2,fcache_load_ptr_
23cd4                 | '     repeat until long[@startupData] == 0 
23cd4                 | LR__2952
23cd4     3A AD 02 F6 | 	mov	local04, ptr__psram_spin2_dat__
23cd8     28 AD 06 F1 | 	add	local04, #296
23cdc     56 AD 0A FB | 	rdlong	local04, local04 wz
23ce0     F0 FF 9F 5D |  if_ne	jmp	#LR__2952
23ce4                 | LR__2953
23ce4                 | ' 
23ce4                 | '     return drivercog
23ce4     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23ce8     3A 7B 02 FB | 	rdlong	result1, ptr__psram_spin2_dat__
23cec     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23cf0                 | LR__2954
23cf0     E7 F0 03 F6 | 	mov	ptra, fp
23cf4     F2 00 A0 FD | 	call	#popregs_
23cf8                 | _psram_spin2_startx_ret
23cf8     2D 00 64 FD | 	ret
23cfc                 | 
23cfc                 | ' 
23cfc                 | ' '..............................................................................
23cfc                 | ' 
23cfc                 | ' {{
23cfc                 | ' }}
23cfc                 | ' PUB stop() : i
23cfc                 | _psram_spin2_stop
23cfc     00 80 06 F6 | 	mov	_var01, #0
23d00                 | '     if drivercog <> -1
23d00     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23d04     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
23d08     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23d0c     FF FF 7F FF 
23d10     FF 93 0E F2 | 	cmp	arg01, ##-1 wz
23d14     70 00 90 AD |  if_e	jmp	#LR__2963
23d18                 | '         cogstop(drivercog) ' a rather brutal stop
23d18     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23d1c     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
23d20     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23d24     03 92 62 FD | 	cogstop	arg01
23d28     D7 26 48 FB | 	callpa	#(@LR__2962-@LR__2960)>>2,fcache_load_ptr_
23d2c                 | '         repeat i from 0 to 7
23d2c                 | LR__2960
23d2c                 | '             if long[$7FF00][i*3] < 0
23d2c     40 7B 02 F6 | 	mov	result1, _var01
23d30     01 7A 66 F0 | 	shl	result1, #1
23d34     40 7B 02 F1 | 	add	result1, _var01
23d38     02 7A 66 F0 | 	shl	result1, #2
23d3c     FF 03 00 FF 
23d40     00 7B 06 F1 | 	add	result1, ##524032
23d44     3D 7B 02 FB | 	rdlong	result1, result1
23d48     00 7A 56 F2 | 	cmps	result1, #0 wc
23d4c     1C 00 90 3D |  if_ae	jmp	#LR__2961
23d50                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
23d50     40 7B 02 F6 | 	mov	result1, _var01
23d54     01 7A 66 F0 | 	shl	result1, #1
23d58     40 7B 02 F1 | 	add	result1, _var01
23d5c     02 7A 66 F0 | 	shl	result1, #2
23d60     FF 03 00 FF 
23d64     00 7B 06 F1 | 	add	result1, ##524032
23d68     3D 21 68 FC | 	wrlong	#16, result1
23d6c                 | LR__2961
23d6c     01 80 06 F1 | 	add	_var01, #1
23d70     08 80 56 F2 | 	cmps	_var01, #8 wc
23d74     B4 FF 9F CD |  if_b	jmp	#LR__2960
23d78                 | LR__2962
23d78                 | '         drivercog := -1
23d78     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23d7c     FF FF FF FF 
23d80     3A FF 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
23d84     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23d88                 | LR__2963
23d88                 | '     if driverlock <> -1
23d88     04 75 06 F1 | 	add	ptr__psram_spin2_dat__, #260
23d8c     3A 83 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
23d90     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
23d94     FF FF 7F FF 
23d98     FF 83 0E F2 | 	cmp	_var02, ##-1 wz
23d9c                 | '         LOCKRET(driverlock)
23d9c     04 75 06 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
23da0     3A 93 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
23da4     05 92 62 5D |  if_ne	lockret	arg01
23da8                 | '         driverlock := -1
23da8     FF FF FF 5F 
23dac     3A FF 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
23db0     04 75 86 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
23db4     40 7B 02 F6 | 	mov	result1, _var01
23db8                 | _psram_spin2_stop_ret
23db8     2D 00 64 FD | 	ret
23dbc                 | 
23dbc                 | ' 
23dbc                 | ' '..............................................................................
23dbc                 | ' 
23dbc                 | ' {{
23dbc                 | ' }}
23dbc                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
23dbc                 | _psram_spin2_read1
23dbc                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
23dbc                 | '     if drivercog == -1 ' driver must be running
23dbc     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23dc0     3A 81 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
23dc4     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23dc8     FF FF 7F FF 
23dcc     FF 81 0E F2 | 	cmp	_var01, ##-1 wz
23dd0                 | '         return ERR_INACTIVE
23dd0     0F 7A 66 A6 |  if_e	neg	result1, #15
23dd4     7C 00 90 AD |  if_e	jmp	#LR__2971
23dd8                 | '     if count == 0 ' don't even bother reading
23dd8     00 96 0E F2 | 	cmp	arg03, #0 wz
23ddc                 | '         return 0
23ddc     00 7A 06 A6 |  if_e	mov	result1, #0
23de0     70 00 90 AD |  if_e	jmp	#LR__2971
23de4                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
23de4     00 7A 06 F6 | 	mov	result1, #0
23de8     01 7A 62 FD | 	cogid	result1
23dec     3D 81 02 F6 | 	mov	_var01, result1
23df0     01 80 66 F0 | 	shl	_var01, #1
23df4     3D 81 02 F1 | 	add	_var01, result1
23df8     02 80 66 F0 | 	shl	_var01, #2
23dfc     FF 03 00 FF 
23e00     00 83 06 F6 | 	mov	_var02, ##524032
23e04     40 83 02 F1 | 	add	_var02, _var01
23e08                 | '     if long[mailbox] < 0
23e08     41 81 02 FB | 	rdlong	_var01, _var02
23e0c     00 80 56 F2 | 	cmps	_var01, #0 wc
23e10                 | '         return ERR_MAILBOX_BUSY
23e10     1C 7A 66 C6 |  if_b	neg	result1, #28
23e14     3C 00 90 CD |  if_b	jmp	#LR__2971
23e18                 | '     long[mailbox][2] := count
23e18     08 82 06 F1 | 	add	_var02, #8
23e1c     41 97 62 FC | 	wrlong	arg03, _var02
23e20                 | '     long[mailbox][1] := dstHubAddr
23e20     04 82 86 F1 | 	sub	_var02, #4
23e24     41 93 62 FC | 	wrlong	arg01, _var02
23e28     04 82 86 F1 | 	sub	_var02, #4
23e2c                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
23e2c     4A 85 02 F6 | 	mov	_var03, arg02
23e30     D9 84 06 F4 | 	bitl	_var03, #217
23e34     00 00 58 FF 
23e38     00 80 06 F6 | 	mov	_var01, ##-1342177280
23e3c     42 81 02 F1 | 	add	_var01, _var03
23e40     41 81 62 FC | 	wrlong	_var01, _var02
23e44                 | '     repeat
23e44                 | LR__2970
23e44                 | '         result := long[mailbox]    
23e44     41 85 02 FB | 	rdlong	_var03, _var02
23e48     00 84 56 F2 | 	cmps	_var03, #0 wc
23e4c     F4 FF 9F CD |  if_b	jmp	#LR__2970
23e50                 | '     while result < 0   
23e50                 | '     return -result                       'return success or error
23e50     42 7B 62 F6 | 	neg	result1, _var03
23e54                 | LR__2971
23e54                 | _psram_spin2_read1_ret
23e54     2D 00 64 FD | 	ret
23e58                 | 
23e58                 | ' 
23e58                 | ' '..............................................................................
23e58                 | ' 
23e58                 | ' {{
23e58                 | ' }}
23e58                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
23e58                 | _psram_spin2_write
23e58                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
23e58                 | '     if drivercog == -1 ' driver must be running
23e58     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23e5c     3A 81 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
23e60     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23e64     FF FF 7F FF 
23e68     FF 81 0E F2 | 	cmp	_var01, ##-1 wz
23e6c                 | '         return ERR_INACTIVE
23e6c     0F 7A 66 A6 |  if_e	neg	result1, #15
23e70     7C 00 90 AD |  if_e	jmp	#LR__2981
23e74                 | '     if count == 0 ' don't even bother writing
23e74     00 96 0E F2 | 	cmp	arg03, #0 wz
23e78                 | '         return 0
23e78     00 7A 06 A6 |  if_e	mov	result1, #0
23e7c     70 00 90 AD |  if_e	jmp	#LR__2981
23e80                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
23e80     00 7A 06 F6 | 	mov	result1, #0
23e84     01 7A 62 FD | 	cogid	result1
23e88     3D 81 02 F6 | 	mov	_var01, result1
23e8c     01 80 66 F0 | 	shl	_var01, #1
23e90     3D 81 02 F1 | 	add	_var01, result1
23e94     02 80 66 F0 | 	shl	_var01, #2
23e98     FF 03 00 FF 
23e9c     00 83 06 F6 | 	mov	_var02, ##524032
23ea0     40 83 02 F1 | 	add	_var02, _var01
23ea4                 | '     if long[mailbox] < 0
23ea4     41 81 02 FB | 	rdlong	_var01, _var02
23ea8     00 80 56 F2 | 	cmps	_var01, #0 wc
23eac                 | '         return ERR_MAILBOX_BUSY
23eac     1C 7A 66 C6 |  if_b	neg	result1, #28
23eb0     3C 00 90 CD |  if_b	jmp	#LR__2981
23eb4                 | '     long[mailbox][2] := count
23eb4     08 82 06 F1 | 	add	_var02, #8
23eb8     41 97 62 FC | 	wrlong	arg03, _var02
23ebc                 | '     long[mailbox][1] := srcHubAddr
23ebc     04 82 86 F1 | 	sub	_var02, #4
23ec0     41 93 62 FC | 	wrlong	arg01, _var02
23ec4     04 82 86 F1 | 	sub	_var02, #4
23ec8                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
23ec8     4A 85 02 F6 | 	mov	_var03, arg02
23ecc     D9 84 06 F4 | 	bitl	_var03, #217
23ed0     00 00 78 FF 
23ed4     00 80 06 F6 | 	mov	_var01, ##-268435456
23ed8     42 81 02 F1 | 	add	_var01, _var03
23edc     41 81 62 FC | 	wrlong	_var01, _var02
23ee0                 | '     repeat
23ee0                 | LR__2980
23ee0                 | '         result := long[mailbox]    
23ee0     41 85 02 FB | 	rdlong	_var03, _var02
23ee4     00 84 56 F2 | 	cmps	_var03, #0 wc
23ee8     F4 FF 9F CD |  if_b	jmp	#LR__2980
23eec                 | '     while result < 0   
23eec                 | '     return -result                       'return success or error
23eec     42 7B 62 F6 | 	neg	result1, _var03
23ef0                 | LR__2981
23ef0                 | _psram_spin2_write_ret
23ef0     2D 00 64 FD | 	ret
23ef4                 | 
23ef4                 | ' 
23ef4                 | ' ' generalized fill
23ef4                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
23ef4                 | _psram_spin2_fill
23ef4     49 81 02 F6 | 	mov	_var01, arg01
23ef8     4A 83 02 F6 | 	mov	_var02, arg02
23efc     4B 85 02 F6 | 	mov	_var03, arg03
23f00     4D 87 02 F6 | 	mov	_var04, arg05
23f04                 | '     case datasize 
23f04     01 86 86 F1 | 	sub	_var04, #1
23f08     04 86 26 F3 | 	fle	_var04, #4
23f0c     30 86 62 FD | 	jmprel	_var04
23f10                 | LR__2990
23f10     10 00 90 FD | 	jmp	#LR__2991
23f14     18 00 90 FD | 	jmp	#LR__2992
23f18     2C 00 90 FD | 	jmp	#LR__2994
23f1c     1C 00 90 FD | 	jmp	#LR__2993
23f20     24 00 90 FD | 	jmp	#LR__2994
23f24                 | LR__2991
23f24                 | '         1: req := driver.R_WRITEBYTE
23f24     00 00 60 FF 
23f28     00 88 06 F6 | 	mov	_var05, ##-1073741824
23f2c     20 00 90 FD | 	jmp	#LR__2995
23f30                 | LR__2992
23f30                 | '         2: req := driver.R_WRITEWORD
23f30     00 00 68 FF 
23f34     00 88 06 F6 | 	mov	_var05, ##-805306368
23f38     14 00 90 FD | 	jmp	#LR__2995
23f3c                 | LR__2993
23f3c                 | '         4: req := driver.R_WRITELONG
23f3c     00 00 70 FF 
23f40     00 88 06 F6 | 	mov	_var05, ##-536870912
23f44     08 00 90 FD | 	jmp	#LR__2995
23f48                 | LR__2994
23f48                 | '         other : return ERR_INVALID
23f48     06 7A 66 F6 | 	neg	result1, #6
23f4c     94 00 90 FD | 	jmp	#LR__2997
23f50                 | LR__2995
23f50                 | '     if count == 0   ' nothing to do
23f50     00 84 0E F2 | 	cmp	_var03, #0 wz
23f54                 | '         return 0
23f54     00 7A 06 A6 |  if_e	mov	result1, #0
23f58     88 00 90 AD |  if_e	jmp	#LR__2997
23f5c                 | '     if drivercog == -1
23f5c     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23f60     3A 87 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
23f64     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23f68     FF FF 7F FF 
23f6c     FF 87 0E F2 | 	cmp	_var04, ##-1 wz
23f70                 | '         return ERR_INACTIVE
23f70     0F 7A 66 A6 |  if_e	neg	result1, #15
23f74     6C 00 90 AD |  if_e	jmp	#LR__2997
23f78                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
23f78     00 7A 06 F6 | 	mov	result1, #0
23f7c     01 7A 62 FD | 	cogid	result1
23f80     3D 87 02 F6 | 	mov	_var04, result1
23f84     01 86 66 F0 | 	shl	_var04, #1
23f88     3D 87 02 F1 | 	add	_var04, result1
23f8c     02 86 66 F0 | 	shl	_var04, #2
23f90     FF 03 00 FF 
23f94     00 8B 06 F6 | 	mov	_var06, ##524032
23f98     43 8B 02 F1 | 	add	_var06, _var04
23f9c                 | '     if long[mailbox] < 0
23f9c     45 87 02 FB | 	rdlong	_var04, _var06
23fa0     00 86 56 F2 | 	cmps	_var04, #0 wc
23fa4                 | '         return ERR_MAILBOX_BUSY
23fa4     1C 7A 66 C6 |  if_b	neg	result1, #28
23fa8     38 00 90 CD |  if_b	jmp	#LR__2997
23fac                 | '     long[mailbox][2] := count
23fac     08 8A 06 F1 | 	add	_var06, #8
23fb0     45 85 62 FC | 	wrlong	_var03, _var06
23fb4                 | '     long[mailbox][1] := pattern
23fb4     04 8A 86 F1 | 	sub	_var06, #4
23fb8     45 83 62 FC | 	wrlong	_var02, _var06
23fbc     04 8A 86 F1 | 	sub	_var06, #4
23fc0                 | '     long[mailbox] := req + (addr & $1ffffff)
23fc0     44 8D 02 F6 | 	mov	_var07, _var05
23fc4     40 8F 02 F6 | 	mov	_var08, _var01
23fc8     D9 8E 06 F4 | 	bitl	_var08, #217
23fcc     47 8D 02 F1 | 	add	_var07, _var08
23fd0     45 8D 62 FC | 	wrlong	_var07, _var06
23fd4                 | '     repeat
23fd4                 | LR__2996
23fd4                 | '         r := long[mailbox]
23fd4     45 8F 02 FB | 	rdlong	_var08, _var06
23fd8     00 8E 56 F2 | 	cmps	_var08, #0 wc
23fdc     F4 FF 9F CD |  if_b	jmp	#LR__2996
23fe0                 | '     while r < 0
23fe0                 | '     return -r                  ' return 0 for success or negated error code
23fe0     47 7B 62 F6 | 	neg	result1, _var08
23fe4                 | LR__2997
23fe4                 | _psram_spin2_fill_ret
23fe4     2D 00 64 FD | 	ret
23fe8                 | 
23fe8                 | ' 
23fe8                 | ' '..............................................................................
23fe8                 | ' 
23fe8                 | ' {{
23fe8                 | ' }}
23fe8                 | ' PUB setQos(cog, qos) : result | mailbox
23fe8                 | _psram_spin2_setQos
23fe8     49 81 02 F6 | 	mov	_var01, arg01
23fec                 | '     if drivercog == -1 ' driver must be running
23fec     00 75 06 F1 | 	add	ptr__psram_spin2_dat__, #256
23ff0     3A 83 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
23ff4     00 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
23ff8     FF FF 7F FF 
23ffc     FF 83 0E F2 | 	cmp	_var02, ##-1 wz
24000                 | '         return ERR_INACTIVE
24000     0F 7A 66 A6 |  if_e	neg	result1, #15
24004     9C 00 90 AD |  if_e	jmp	#LR__3004
24008                 | '     if cog < 0 or cog > 7 ' enforce cog id range
24008     00 80 56 F2 | 	cmps	_var01, #0 wc
2400c     08 00 90 CD |  if_b	jmp	#LR__3000
24010     08 80 56 F2 | 	cmps	_var01, #8 wc
24014     08 00 90 CD |  if_b	jmp	#LR__3001
24018                 | LR__3000
24018                 | '         return ERR_INVALID
24018     06 7A 66 F6 | 	neg	result1, #6
2401c     84 00 90 FD | 	jmp	#LR__3004
24020                 | LR__3001
24020                 | '     long[@qosData][cog] := qos & !$1ff
24020     FF 95 26 F5 | 	andn	arg02, #511
24024     C8 75 06 F1 | 	add	ptr__psram_spin2_dat__, #456
24028     02 80 66 F0 | 	shl	_var01, #2
2402c     3A 81 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
24030     40 95 62 FC | 	wrlong	arg02, _var01
24034                 | '     mailbox := $7FF00 + drivercog*12
24034     C8 74 86 F1 | 	sub	ptr__psram_spin2_dat__, #200
24038     3A 85 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
2403c     42 87 02 F6 | 	mov	_var04, _var03
24040     01 86 66 F0 | 	shl	_var04, #1
24044     42 87 02 F1 | 	add	_var04, _var03
24048     02 86 66 F0 | 	shl	_var04, #2
2404c     FF 03 00 FF 
24050     00 89 06 F6 | 	mov	_var05, ##524032
24054     43 89 02 F1 | 	add	_var05, _var04
24058                 | '     repeat until LOCKTRY(driverlock)
24058     04 74 06 F1 | 	add	ptr__psram_spin2_dat__, #4
2405c                 | LR__3002
2405c     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
24060     06 92 72 FD | 	locktry	arg01 wc
24064     F4 FF 9F 3D |  if_ae	jmp	#LR__3002
24068     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
2406c                 | '     long[mailbox] := driver.R_CONFIG + cogid()
2406c     00 86 06 F6 | 	mov	_var04, #0
24070     01 86 62 FD | 	cogid	_var04
24074     00 00 78 FF 
24078     00 82 06 F6 | 	mov	_var02, ##-268435456
2407c     43 83 02 F1 | 	add	_var02, _var04
24080     44 83 62 FC | 	wrlong	_var02, _var05
24084                 | '     repeat while long[mailbox] < 0
24084                 | LR__3003
24084     44 83 02 FB | 	rdlong	_var02, _var05
24088     00 82 56 F2 | 	cmps	_var02, #0 wc
2408c     F4 FF 9F CD |  if_b	jmp	#LR__3003
24090                 | '     LOCKREL(driverlock)
24090     04 75 06 F1 | 	add	ptr__psram_spin2_dat__, #260
24094     3A 93 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
24098     04 75 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
2409c     07 92 72 FD | 	lockrel	arg01 wc
240a0     00 7A 06 F6 | 	mov	result1, #0
240a4                 | LR__3004
240a4                 | _psram_spin2_setQos_ret
240a4     2D 00 64 FD | 	ret
240a8                 | 
240a8                 | ' 
240a8                 | ' '..............................................................................
240a8                 | ' 
240a8                 | ' {{
240a8                 | ' }}
240a8                 | ' PRI lookupDelay(freq) : delay | profile
240a8                 | _psram_spin2_lookupDelay
240a8                 | '     profile := @delayTable
240a8     3A 81 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
240ac     08 81 06 F1 | 	add	_var01, #264
240b0                 | '     delay := long[profile][0]
240b0     40 83 02 FB | 	rdlong	_var02, _var01
240b4     D7 16 48 FB | 	callpa	#(@LR__3011-@LR__3010)>>2,fcache_load_ptr_
240b8                 | '     repeat while long[profile][1] 
240b8                 | LR__3010
240b8     04 80 06 F1 | 	add	_var01, #4
240bc     40 7B 0A FB | 	rdlong	result1, _var01 wz
240c0     04 80 86 F1 | 	sub	_var01, #4
240c4     1C 00 90 AD |  if_e	jmp	#LR__3012
240c8                 | '         if freq +< long[profile][1] 
240c8     04 80 06 F1 | 	add	_var01, #4
240cc     40 7B 02 FB | 	rdlong	result1, _var01
240d0     04 80 86 F1 | 	sub	_var01, #4
240d4     3D 93 12 F2 | 	cmp	arg01, result1 wc
240d8                 | '             quit
240d8                 | '         profile += 4
240d8     04 80 06 31 |  if_ae	add	_var01, #4
240dc                 | '         delay++
240dc     01 82 06 31 |  if_ae	add	_var02, #1
240e0     D4 FF 9F 3D |  if_ae	jmp	#LR__3010
240e4                 | LR__3011
240e4                 | LR__3012
240e4     41 7B 02 F6 | 	mov	result1, _var02
240e8                 | _psram_spin2_lookupDelay_ret
240e8     2D 00 64 FD | 	ret
240ec                 | 
240ec                 | ' 
240ec                 | ' PUB start() : r
240ec                 | _usbnew_spin2_start
240ec     00 80 06 F6 | 	mov	_var01, #0
240f0                 | '   ifnot driver_cog
240f0     15 00 00 FF 
240f4     87 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10887
240f8     3B 83 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
240fc     15 00 00 FF 
24100     87 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10887
24104     38 00 90 5D |  if_ne	jmp	#LR__3020
24108                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
24108     3B 95 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
2410c     10 80 06 F6 | 	mov	_var01, #16
24110     00 96 06 F6 | 	mov	arg03, #0
24114     28 96 62 FD | 	setq	arg03
24118     4A 81 F2 FC | 	coginit	_var01, arg02 wc
2411c     01 80 66 C6 |  if_b	neg	_var01, #1
24120                 | '     if r >= 0
24120     00 80 56 F2 | 	cmps	_var01, #0 wc
24124                 | '       driver_cog := r+1
24124     40 83 02 36 |  if_ae	mov	_var02, _var01
24128     01 82 06 31 |  if_ae	add	_var02, #1
2412c     15 00 00 3F 
24130     87 76 06 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10887
24134     3B 83 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
24138     15 00 00 3F 
2413c     87 76 86 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10887
24140                 | LR__3020
24140     40 7B 02 F6 | 	mov	result1, _var01
24144                 | _usbnew_spin2_start_ret
24144     2D 00 64 FD | 	ret
24148                 | 
24148                 | '     '' (Always enabled)
24148                 | ' 
24148                 | ' '' Get current pressed state of a keyboard key
24148                 | ' PUB keystate(key) : r | buf[2],tmp
24148                 | _usbnew_spin2_keystate
24148     00 84 06 F6 | 	mov	_var03, #0
2414c                 | '   if key >= $E0 && key < $E8
2414c     E0 92 56 F2 | 	cmps	arg01, #224 wc
24150     30 00 90 CD |  if_b	jmp	#LR__3030
24154     E8 92 56 F2 | 	cmps	arg01, #232 wc
24158     28 00 90 3D |  if_ae	jmp	#LR__3030
2415c                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
2415c     00 7A 06 F6 | 	mov	result1, #0
24160     3B 87 02 F6 | 	mov	_var04, ptr__usbnew_spin2_dat__
24164     13 00 00 FF 
24168     D8 87 06 F1 | 	add	_var04, ##10200
2416c     49 89 02 F6 | 	mov	_var05, arg01
24170     E0 88 86 F1 | 	sub	_var05, #224
24174     43 8B C2 FA | 	rdbyte	_var06, _var04
24178     44 8B 4A F0 | 	shr	_var06, _var05 wz
2417c     01 7A 66 56 |  if_ne	neg	result1, #1
24180     50 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
24184                 | LR__3030
24184                 | '   else
24184                 | '     '' Do this in inline ASM to ensure atomicity
24184                 | '     tmp := @hkbd_report
24184     3B 8B 02 F6 | 	mov	_var06, ptr__usbnew_spin2_dat__
24188     13 00 00 FF 
2418c     D8 8B 06 F1 | 	add	_var06, ##10200
24190                 | '     org
24190     D7 1E 48 FB | 	callpa	#(@LR__3032-@LR__3031)>>2,fcache_load_ptr_
24194                 | LR__3031
24194 000             | 	org	0
24194 000 28 02 64 FD | 	setq	#1
24198 001 45 81 02 FB | 	rdlong	_var01, _var06
2419c 002 40 8D F2 F8 | 	getbyte	_var07, _var01, #2
241a0 003 49 8D 0A F2 | 	cmp	_var07, arg01 wz
241a4 004 40 8D FA F8 | 	getbyte	_var07, _var01, #3
241a8 005 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
241ac 006 41 8D E2 F8 | 	getbyte	_var07, _var02, #0
241b0 007 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
241b4 008 41 8D EA F8 | 	getbyte	_var07, _var02, #1
241b8 009 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
241bc 00a 41 8D F2 F8 | 	getbyte	_var07, _var02, #2
241c0 00b 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
241c4 00c 41 8D FA F8 | 	getbyte	_var07, _var02, #3
241c8 00d 49 8D 0A 52 |  if_ne	cmp	_var07, arg01 wz
241cc 00e 01 84 66 A6 |  if_e	neg	_var03, #1
241d0 00f             | 	fit	192
241d0 00f             | LR__3032
241d0                 | 	orgh
241d0     42 7B 02 F6 | 	mov	result1, _var03
241d4                 | _usbnew_spin2_keystate_ret
241d4     2D 00 64 FD | 	ret
241d8                 | 
241d8                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
241d8                 | ' 
241d8                 | ' '' Return key event from buffer if there is one
241d8                 | ' PUB get_key() : r | tail
241d8                 | _usbnew_spin2_get_key
241d8                 | '   tail := keyq_tail
241d8     0F 00 00 FF 
241dc     D5 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
241e0     3B 81 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
241e4                 | '   if keyq_head == tail
241e4     01 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
241e8     3B 83 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
241ec     0F 00 00 FF 
241f0     D4 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7892
241f4     40 83 0A F2 | 	cmp	_var02, _var01 wz
241f8                 | '     return 0 ' No event
241f8     00 7A 06 A6 |  if_e	mov	result1, #0
241fc     3C 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
24200                 | '   r := keyq_data[tail]
24200     40 83 02 F6 | 	mov	_var02, _var01
24204     02 82 66 F0 | 	shl	_var02, #2
24208     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
2420c     0F 00 00 FF 
24210     D6 7A 06 F1 | 	add	result1, ##7894
24214     3D 83 02 F1 | 	add	_var02, result1
24218     41 7B 02 FB | 	rdlong	result1, _var02
2421c                 | '   if ++tail == KEYQUEUE_SIZE
2421c     01 80 06 F1 | 	add	_var01, #1
24220     80 80 0E F2 | 	cmp	_var01, #128 wz
24224                 | '     tail := 0
24224     00 80 06 A6 |  if_e	mov	_var01, #0
24228                 | '   keyq_tail := tail
24228     0F 00 00 FF 
2422c     D5 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
24230     3B 81 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
24234     0F 00 00 FF 
24238     D5 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7893
2423c                 | _usbnew_spin2_get_key_ret
2423c     2D 00 64 FD | 	ret
24240                 | 
24240                 | ' 
24240                 | ' '' Emulate mouse movement
24240                 | ' PUB mouse_move(x,y)
24240                 | _usbnew_spin2_mouse_move
24240     02 CA 05 F6 | 	mov	COUNT_, #2
24244     E8 00 A0 FD | 	call	#pushregs_
24248     49 A7 02 F6 | 	mov	local01, arg01
2424c     4A A9 02 F6 | 	mov	local02, arg02
24250                 | '   mouse_lock := 1
24250     14 00 00 FF 
24254     F1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
24258     3B 03 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
2425c     14 00 00 FF 
24260     F1 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
24264                 | '   waitus(2) ' hope driver is now done
24264     02 92 06 F6 | 	mov	arg01, #2
24268     D0 0A B0 FD | 	call	#__system___waitus
2426c                 | '   mouse_xacc := x
2426c     14 00 00 FF 
24270     E1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
24274     3B A7 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
24278                 | '   mouse_yacc := y
24278     04 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, #4
2427c     3B A9 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
24280                 | '   if mouse_outptr
24280     05 00 00 FF 
24284     15 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2581
24288     3B 95 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
2428c     0F 00 00 FF 
24290     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
24294     24 00 90 AD |  if_e	jmp	#LR__3040
24298                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
24298     10 A8 66 F0 | 	shl	local02, #16
2429c     53 A7 32 F9 | 	getword	local01, local01, #0
242a0     53 A9 42 F5 | 	or	local02, local01
242a4     0F 00 00 FF 
242a8     D0 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7888
242ac     3B A7 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
242b0     0F 00 00 FF 
242b4     D0 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
242b8     53 A9 62 FC | 	wrlong	local02, local01
242bc                 | LR__3040
242bc                 | '   mouse_lock := 0
242bc     14 00 00 FF 
242c0     F1 76 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
242c4     3B 01 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
242c8     14 00 00 FF 
242cc     F1 76 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
242d0     E7 F0 03 F6 | 	mov	ptra, fp
242d4     F2 00 A0 FD | 	call	#popregs_
242d8                 | _usbnew_spin2_mouse_move_ret
242d8     2D 00 64 FD | 	ret
242dc                 | 
242dc                 | ' 
242dc                 | ' '' Get state of an axis (normalized between -32768 and 32767)
242dc                 | ' PUB hidpad_axis(dev,axnum) : r
242dc                 | _usbnew_spin2_hidpad_axis
242dc                 | '   if axnum +>= 8
242dc     08 94 16 F2 | 	cmp	arg02, #8 wc
242e0                 | '     return 0
242e0     00 7A 06 36 |  if_ae	mov	result1, #0
242e4     2C 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
242e8                 | '   else 
242e8                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
242e8     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
242ec     13 00 00 FF 
242f0     F8 7B 06 F1 | 	add	result1, ##10232
242f4     05 92 66 F0 | 	shl	arg01, #5
242f8     49 7B 02 F1 | 	add	result1, arg01
242fc     04 92 06 F6 | 	mov	arg01, #4
24300     4A 93 02 F1 | 	add	arg01, arg02
24304     01 92 66 F0 | 	shl	arg01, #1
24308     3D 93 02 F1 | 	add	arg01, result1
2430c     49 7B E2 FA | 	rdword	result1, arg01
24310     0F 7A 66 F7 | 	signx	result1, #15
24314                 | _usbnew_spin2_hidpad_axis_ret
24314     2D 00 64 FD | 	ret
24318                 | 
24318                 | ' 
24318                 | ' '' Get state of a hat
24318                 | ' PUB hidpad_hat(dev,hatnum) : r
24318                 | _usbnew_spin2_hidpad_hat
24318                 | '   if hatnum +>= 4
24318     04 94 16 F2 | 	cmp	arg02, #4 wc
2431c                 | '     return 0
2431c     00 7A 06 36 |  if_ae	mov	result1, #0
24320     24 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
24324                 | '   else 
24324                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][7*4+hatnum]
24324     3B 7B 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
24328     13 00 00 FF 
2432c     F8 7B 06 F1 | 	add	result1, ##10232
24330     05 92 66 F0 | 	shl	arg01, #5
24334     49 7B 02 F1 | 	add	result1, arg01
24338     1C 92 06 F6 | 	mov	arg01, #28
2433c     4A 93 02 F1 | 	add	arg01, arg02
24340     3D 93 02 F1 | 	add	arg01, result1
24344     49 7B C2 FA | 	rdbyte	result1, arg01
24348                 | _usbnew_spin2_hidpad_hat_ret
24348     2D 00 64 FD | 	ret
2434c                 | 
2434c                 | ' 
2434c                 | ' 
2434c                 | ' 
2434c                 | ' '--------------------------------------------------------------
2434c                 | ' '---------- Init the variables, start the cog. ----------------
2434c                 | ' '--------------------------------------------------------------
2434c                 | ' 
2434c                 | ' pub start(mbox,scope,cache) :cog,base | iii
2434c                 | _Audio2_003_spin2_start
2434c     04 CA 05 F6 | 	mov	COUNT_, #4
24350     E8 00 A0 FD | 	call	#pushregs_
24354     49 A7 02 F6 | 	mov	local01, arg01
24358                 | ' 
24358                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
24358                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
24358                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
24358                 | ' 
24358                 | ' mailboxaddr:=mbox 
24358     32 A7 62 FC | 	wrlong	local01, objptr
2435c                 | ' scope_ptr:=scope
2435c     04 64 06 F1 | 	add	objptr, #4
24360     32 95 62 FC | 	wrlong	arg02, objptr
24364                 | ' cache_ptr:=cache
24364     04 64 06 F1 | 	add	objptr, #4
24368     32 97 62 FC | 	wrlong	arg03, objptr
2436c                 | ' base:=@channel0[0]
2436c     04 64 06 F1 | 	add	objptr, #4
24370     32 A9 02 F6 | 	mov	local02, objptr
24374                 | ' 
24374                 | ' repeat iii from 0 to 15
24374     00 AA 06 F6 | 	mov	local03, #0
24378     0C 64 86 F1 | 	sub	objptr, #12
2437c     D7 BC 48 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
24380                 | LR__3050
24380                 | '   long[base+64*iii]:=0
24380     54 A7 02 F6 | 	mov	local01, local02
24384     55 7D 02 F6 | 	mov	result2, local03
24388     06 7C 66 F0 | 	shl	result2, #6
2438c     3E A7 02 F1 | 	add	local01, result2
24390     53 01 68 FC | 	wrlong	#0, local01
24394                 | '   long[base+64*iii+4]:=0  		
24394     54 A7 02 F6 | 	mov	local01, local02
24398     55 7D 02 F6 | 	mov	result2, local03
2439c     06 7C 66 F0 | 	shl	result2, #6
243a0     3E A7 02 F1 | 	add	local01, result2
243a4     04 A6 06 F1 | 	add	local01, #4
243a8     53 01 68 FC | 	wrlong	#0, local01
243ac                 | '   long[base+64*iii+8]:=0
243ac     54 AD 02 F6 | 	mov	local04, local02
243b0     55 A7 02 F6 | 	mov	local01, local03
243b4     06 A6 66 F0 | 	shl	local01, #6
243b8     53 AD 02 F1 | 	add	local04, local01
243bc     08 AC 06 F1 | 	add	local04, #8
243c0     56 01 68 FC | 	wrlong	#0, local04
243c4                 | '   long[base+64*iii+12]:=0
243c4     54 AD 02 F6 | 	mov	local04, local02
243c8     55 A7 02 F6 | 	mov	local01, local03
243cc     06 A6 66 F0 | 	shl	local01, #6
243d0     53 AD 02 F1 | 	add	local04, local01
243d4     0C AC 06 F1 | 	add	local04, #12
243d8     56 01 68 FC | 	wrlong	#0, local04
243dc                 | '   long[base+64*iii+16]:=0
243dc     54 AD 02 F6 | 	mov	local04, local02
243e0     55 A7 02 F6 | 	mov	local01, local03
243e4     06 A6 66 F0 | 	shl	local01, #6
243e8     53 AD 02 F1 | 	add	local04, local01
243ec     10 AC 06 F1 | 	add	local04, #16
243f0     56 01 68 FC | 	wrlong	#0, local04
243f4                 | '   long[base+64*iii+20]:=0
243f4     54 AD 02 F6 | 	mov	local04, local02
243f8     55 A7 02 F6 | 	mov	local01, local03
243fc     06 A6 66 F0 | 	shl	local01, #6
24400     53 AD 02 F1 | 	add	local04, local01
24404     14 AC 06 F1 | 	add	local04, #20
24408     56 01 68 FC | 	wrlong	#0, local04
2440c                 | '   long[base+64*iii+24]:=0
2440c     54 AD 02 F6 | 	mov	local04, local02
24410     55 A7 02 F6 | 	mov	local01, local03
24414     06 A6 66 F0 | 	shl	local01, #6
24418     53 AD 02 F1 | 	add	local04, local01
2441c     18 AC 06 F1 | 	add	local04, #24
24420     56 01 68 FC | 	wrlong	#0, local04
24424                 | '   long[base+64*iii+28]:=0
24424     54 AD 02 F6 | 	mov	local04, local02
24428     55 A7 02 F6 | 	mov	local01, local03
2442c     06 A6 66 F0 | 	shl	local01, #6
24430     53 AD 02 F1 | 	add	local04, local01
24434     1C AC 06 F1 | 	add	local04, #28
24438     56 01 68 FC | 	wrlong	#0, local04
2443c                 | '   word[base+64*iii+32]:=8192
2443c     54 AD 02 F6 | 	mov	local04, local02
24440     55 A7 02 F6 | 	mov	local01, local03
24444     06 A6 66 F0 | 	shl	local01, #6
24448     53 AD 02 F1 | 	add	local04, local01
2444c     20 AC 06 F1 | 	add	local04, #32
24450     10 00 80 FF 
24454     56 01 58 FC | 	wrword	##8192, local04
24458                 | '   word[base+64*iii+34]:=8192
24458     54 AD 02 F6 | 	mov	local04, local02
2445c     55 A7 02 F6 | 	mov	local01, local03
24460     06 A6 66 F0 | 	shl	local01, #6
24464     53 AD 02 F1 | 	add	local04, local01
24468     22 AC 06 F1 | 	add	local04, #34
2446c     10 00 80 FF 
24470     56 01 58 FC | 	wrword	##8192, local04
24474                 | '   long[base+64*iii+36]:=0
24474     54 AD 02 F6 | 	mov	local04, local02
24478     55 A7 02 F6 | 	mov	local01, local03
2447c     06 A6 66 F0 | 	shl	local01, #6
24480     53 AD 02 F1 | 	add	local04, local01
24484     24 AC 06 F1 | 	add	local04, #36
24488     56 01 68 FC | 	wrlong	#0, local04
2448c                 | '   long[base+64*iii+40]:=0
2448c     54 AD 02 F6 | 	mov	local04, local02
24490     55 A7 02 F6 | 	mov	local01, local03
24494     06 A6 66 F0 | 	shl	local01, #6
24498     53 AD 02 F1 | 	add	local04, local01
2449c     28 AC 06 F1 | 	add	local04, #40
244a0     56 01 68 FC | 	wrlong	#0, local04
244a4                 | '   long[base+64*iii+44]:=0
244a4     54 AD 02 F6 | 	mov	local04, local02
244a8     55 A7 02 F6 | 	mov	local01, local03
244ac     06 A6 66 F0 | 	shl	local01, #6
244b0     53 AD 02 F1 | 	add	local04, local01
244b4     2C AC 06 F1 | 	add	local04, #44
244b8     56 01 68 FC | 	wrlong	#0, local04
244bc                 | '   long[base+64*iii+48]:=0
244bc     54 AD 02 F6 | 	mov	local04, local02
244c0     55 A7 02 F6 | 	mov	local01, local03
244c4     06 A6 66 F0 | 	shl	local01, #6
244c8     53 AD 02 F1 | 	add	local04, local01
244cc     30 AC 06 F1 | 	add	local04, #48
244d0     56 01 68 FC | 	wrlong	#0, local04
244d4                 | '   long[base+64*iii+52]:=0
244d4     54 AD 02 F6 | 	mov	local04, local02
244d8     55 A7 02 F6 | 	mov	local01, local03
244dc     06 A6 66 F0 | 	shl	local01, #6
244e0     53 AD 02 F1 | 	add	local04, local01
244e4     34 AC 06 F1 | 	add	local04, #52
244e8     56 01 68 FC | 	wrlong	#0, local04
244ec     01 AA 06 F1 | 	add	local03, #1
244f0     10 AA 56 F2 | 	cmps	local03, #16 wc
244f4     88 FE 9F CD |  if_b	jmp	#LR__3050
244f8                 | LR__3051
244f8                 | '   
244f8                 | ' cog:=coginit(16,@audio,@mailboxaddr)
244f8     33 95 02 F6 | 	mov	arg02, ptr__Audio2_003_spin2_dat__
244fc     32 97 02 F6 | 	mov	arg03, objptr
24500     10 AC 06 F6 | 	mov	local04, #16
24504     28 96 62 FD | 	setq	arg03
24508     4A AD F2 FC | 	coginit	local04, arg02 wc
2450c     01 AC 66 C6 |  if_b	neg	local04, #1
24510                 | ' waitms(10)
24510     0A 92 06 F6 | 	mov	arg01, #10
24514     B8 07 B0 FD | 	call	#__system___waitms
24518                 | ' return cog,base
24518     54 7D 02 F6 | 	mov	result2, local02
2451c     56 7B 02 F6 | 	mov	result1, local04
24520     E7 F0 03 F6 | 	mov	ptra, fp
24524     F2 00 A0 FD | 	call	#popregs_
24528                 | _Audio2_003_spin2_start_ret
24528     2D 00 64 FD | 	ret
2452c                 | 
2452c                 | ' 
2452c                 | ' 
2452c                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
2452c                 | _Audio2_003_spin2_play
2452c     F8 02 00 FF 
24530     BE 97 06 FD | 	qmul	arg03, ##389566
24534                 | ' 
24534                 | ' base2:=@channel0[0]+64*channel
24534     32 97 02 F6 | 	mov	arg03, objptr
24538     0C 96 06 F1 | 	add	arg03, #12
2453c     06 92 66 F0 | 	shl	arg01, #6
24540     49 97 02 F1 | 	add	arg03, arg01
24544                 | ' long[base2+20]:=sample+$C0000000 
24544     00 00 60 FF 
24548     00 94 06 F1 | 	add	arg02, ##-1073741824
2454c     4B 93 02 F6 | 	mov	arg01, arg03
24550     14 92 06 F1 | 	add	arg01, #20
24554     49 95 62 FC | 	wrlong	arg02, arg01
24558                 | ' long[base2+28]:= len
24558     4B 95 02 F6 | 	mov	arg02, arg03
2455c     1C 94 06 F1 | 	add	arg02, #28
24560     4A 9B 62 FC | 	wrlong	arg05, arg02
24564                 | ' if loop >=0 
24564     00 9C 56 F2 | 	cmps	arg06, #0 wc
24568                 | '   long[base2+24]:= loop
24568     4B 95 02 36 |  if_ae	mov	arg02, arg03
2456c     18 94 06 31 |  if_ae	add	arg02, #24
24570     4A 9D 62 3C |  if_ae	wrlong	arg06, arg02
24574                 | ' else
24574                 | '   long[base2+24]:= len
24574     4B 95 02 C6 |  if_b	mov	arg02, arg03
24578     18 94 06 C1 |  if_b	add	arg02, #24
2457c     4A 9B 62 CC |  if_b	wrlong	arg05, arg02
24580                 | ' word[base2+32]:=vol
24580     4B 95 02 F6 | 	mov	arg02, arg03
24584     20 94 06 F1 | 	add	arg02, #32
24588     4A 99 52 FC | 	wrword	arg04, arg02
2458c                 | ' long[base2+36]:= splfreq*389566
2458c     24 96 06 F1 | 	add	arg03, #36
24590     18 94 62 FD | 	getqx	arg02
24594     4B 95 62 FC | 	wrlong	arg02, arg03
24598                 | _Audio2_003_spin2_play_ret
24598     2D 00 64 FD | 	ret
2459c                 | 
2459c                 | ' 
2459c                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
2459c                 | _Audio2_003_spin2_play8
2459c                 | ' 
2459c                 | ' base2:=@channel1[0]+64*channel
2459c     32 81 02 F6 | 	mov	_var01, objptr
245a0     4C 80 06 F1 | 	add	_var01, #76
245a4     06 92 66 F0 | 	shl	arg01, #6
245a8     49 81 02 F1 | 	add	_var01, arg01
245ac                 | ' long[base2]:=0
245ac     40 01 68 FC | 	wrlong	#0, _var01
245b0                 | ' long[base2+8]:=sample+$40000000 
245b0     00 00 20 FF 
245b4     00 94 06 F1 | 	add	arg02, ##1073741824
245b8     40 93 02 F6 | 	mov	arg01, _var01
245bc     08 92 06 F1 | 	add	arg01, #8
245c0     49 95 62 FC | 	wrlong	arg02, arg01
245c4                 | ' if loop>=0
245c4     00 9C 56 F2 | 	cmps	arg06, #0 wc
245c8     1C 00 90 CD |  if_b	jmp	#LR__3060
245cc                 | '   long[base2+12]:=loop
245cc     40 95 02 F6 | 	mov	arg02, _var01
245d0     0C 94 06 F1 | 	add	arg02, #12
245d4     4A 9D 62 FC | 	wrlong	arg06, arg02
245d8                 | '   long[base2+16]:= len
245d8     40 9D 02 F6 | 	mov	arg06, _var01
245dc     10 9C 06 F1 | 	add	arg06, #16
245e0     4E 9B 62 FC | 	wrlong	arg05, arg06
245e4     1C 00 90 FD | 	jmp	#LR__3061
245e8                 | LR__3060
245e8                 | ' else
245e8                 | '   long[base2+12]:= len
245e8     40 9D 02 F6 | 	mov	arg06, _var01
245ec     0C 9C 06 F1 | 	add	arg06, #12
245f0     4E 9B 62 FC | 	wrlong	arg05, arg06
245f4                 | '   long[base2+16]:= len+1
245f4     01 9A 06 F1 | 	add	arg05, #1
245f8     40 93 02 F6 | 	mov	arg01, _var01
245fc     10 92 06 F1 | 	add	arg01, #16
24600     49 9B 62 FC | 	wrlong	arg05, arg01
24604                 | LR__3061
24604     4B 97 52 F6 | 	abs	arg03, arg03 wc
24608     0F 1B 80 FF 
2460c     4B 1F 1A FD | 	qdiv	##3546895, arg03
24610                 | ' word[base2+20]:=vol
24610     40 97 02 F6 | 	mov	arg03, _var01
24614     14 96 06 F1 | 	add	arg03, #20
24618     4B 99 52 FC | 	wrword	arg04, arg03
2461c                 | ' word[base2+24]:= 3546895 /splfreq 
2461c     40 93 02 F6 | 	mov	arg01, _var01
24620     18 92 06 F1 | 	add	arg01, #24
24624                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
24624     1A 80 06 F1 | 	add	_var01, #26
24628     18 98 62 FD | 	getqx	arg04
2462c     4C 99 82 F6 | 	negc	arg04, arg04
24630     49 99 52 FC | 	wrword	arg04, arg01
24634     40 01 5A FC | 	wrword	#256, _var01
24638                 | _Audio2_003_spin2_play8_ret
24638     2D 00 64 FD | 	ret
2463c                 | 
2463c                 | ' 
2463c                 | ' 
2463c                 | ' pub play16(channel,sample,splfreq,vol,len,loop,delay) | base2
2463c                 | _Audio2_003_spin2_play16
2463c     F8 02 00 FF 
24640     BE 97 06 FD | 	qmul	arg03, ##389566
24644                 | ' 
24644                 | ' base2:=@channel0[0]+64*channel
24644     32 97 02 F6 | 	mov	arg03, objptr
24648     0C 96 06 F1 | 	add	arg03, #12
2464c     06 92 66 F0 | 	shl	arg01, #6
24650     49 97 02 F1 | 	add	arg03, arg01
24654                 | ' long[base2+20]:=sample+$C0000000 
24654     00 00 60 FF 
24658     00 94 06 F1 | 	add	arg02, ##-1073741824
2465c     4B 93 02 F6 | 	mov	arg01, arg03
24660     14 92 06 F1 | 	add	arg01, #20
24664     49 95 62 FC | 	wrlong	arg02, arg01
24668                 | ' long[base2+28]:= len
24668     4B 95 02 F6 | 	mov	arg02, arg03
2466c     1C 94 06 F1 | 	add	arg02, #28
24670     4A 9B 62 FC | 	wrlong	arg05, arg02
24674                 | ' long[base2+24]:= loop
24674     4B 9B 02 F6 | 	mov	arg05, arg03
24678     18 9A 06 F1 | 	add	arg05, #24
2467c     4D 9D 62 FC | 	wrlong	arg06, arg05
24680                 | ' word[base2+32]:=vol
24680     4B 9D 02 F6 | 	mov	arg06, arg03
24684     20 9C 06 F1 | 	add	arg06, #32
24688     4E 99 52 FC | 	wrword	arg04, arg06
2468c                 | ' long[base2+36]:= splfreq*389566
2468c     24 96 06 F1 | 	add	arg03, #36
24690                 | ' waitms(delay)
24690     4F 93 02 F6 | 	mov	arg01, arg07
24694     18 9E 62 FD | 	getqx	arg07
24698     4B 9F 62 FC | 	wrlong	arg07, arg03
2469c     30 06 B0 FD | 	call	#__system___waitms
246a0                 | _Audio2_003_spin2_play16_ret
246a0     2D 00 64 FD | 	ret
246a4                 | hubexit
246a4     C1 00 80 FD | 	jmp	#cogexit
246a8                 | 
246a8                 | __system___setbaud
246a8     14 0E 07 FB | 	rdlong	muldiva_, #20
246ac     49 11 03 F6 | 	mov	muldivb_, arg01
246b0     FA 00 A0 FD | 	call	#divide_
246b4     D7 06 48 FB | 	callpa	#(@LR__3071-@LR__3070)>>2,fcache_load_ptr_
246b8                 | LR__3070
246b8     3E 7A 9E FA | 	rdpin	result1, #62 wc
246bc     3E 7D A2 F1 | 	subx	result2, result2
246c0     F4 FF 9F CD |  if_b	jmp	#LR__3070
246c4                 | LR__3071
246c4     40 7C 64 FD | 	dirl	#62
246c8     40 7E 64 FD | 	dirl	#63
246cc     34 11 63 FC | 	wrlong	muldivb_, ptr___system__dat__
246d0     10 10 67 F0 | 	shl	muldivb_, #16
246d4     07 94 06 F6 | 	mov	arg02, #7
246d8     88 95 02 F1 | 	add	arg02, muldivb_
246dc     3E F8 0C FC | 	wrpin	#124, #62
246e0     3E 94 16 FC | 	wxpin	arg02, #62
246e4     3F 7C 0C FC | 	wrpin	#62, #63
246e8     14 94 06 F1 | 	add	arg02, #20
246ec     3F 94 16 FC | 	wxpin	arg02, #63
246f0     41 7C 64 FD | 	dirh	#62
246f4     41 7E 64 FD | 	dirh	#63
246f8                 | __system___setbaud_ret
246f8     2D 00 64 FD | 	ret
246fc                 | 
246fc                 | __system___txraw
246fc     01 CA 05 F6 | 	mov	COUNT_, #1
24700     E8 00 A0 FD | 	call	#pushregs_
24704     49 A7 02 F6 | 	mov	local01, arg01
24708     D7 06 48 FB | 	callpa	#(@LR__3081-@LR__3080)>>2,fcache_load_ptr_
2470c                 | LR__3080
2470c     3E 7A 9E FA | 	rdpin	result1, #62 wc
24710     3E 7D A2 F1 | 	subx	result2, result2
24714     F4 FF 9F CD |  if_b	jmp	#LR__3080
24718                 | LR__3081
24718     34 7B 0A FB | 	rdlong	result1, ptr___system__dat__ wz
2471c     42 0F 00 AF 
24720     80 92 06 A6 |  if_e	mov	arg01, ##2000000
24724     80 FF BF AD |  if_e	call	#__system___setbaud
24728     58 7C 64 FD | 	drvl	#62
2472c     3E A6 26 FC | 	wypin	local01, #62
24730     01 7A 06 F6 | 	mov	result1, #1
24734     E7 F0 03 F6 | 	mov	ptra, fp
24738     F2 00 A0 FD | 	call	#popregs_
2473c                 | __system___txraw_ret
2473c     2D 00 64 FD | 	ret
24740                 | 
24740                 | __system___rxraw
24740     0D CA 05 F6 | 	mov	COUNT_, #13
24744     E8 00 A0 FD | 	call	#pushregs_
24748     49 A7 02 F6 | 	mov	local01, arg01
2474c     34 A9 0A FB | 	rdlong	local02, ptr___system__dat__ wz
24750     42 0F 00 AF 
24754     80 92 06 A6 |  if_e	mov	arg01, ##2000000
24758     4C FF BF AD |  if_e	call	#__system___setbaud
2475c     00 A6 0E F2 | 	cmp	local01, #0 wz
24760     20 00 90 AD |  if_e	jmp	#LR__3090
24764     14 AA 06 FB | 	rdlong	local03, #20
24768     0A AA 46 F0 | 	shr	local03, #10
2476c     55 A7 02 FD | 	qmul	local01, local03
24770     1A 7A 62 FD | 	getct	result1
24774     18 AC 62 FD | 	getqx	local04
24778     56 7B 02 F1 | 	add	result1, local04
2477c     3D AF 02 F6 | 	mov	local05, result1
24780     04 00 90 FD | 	jmp	#LR__3091
24784                 | LR__3090
24784     00 AE 06 F6 | 	mov	local05, #0
24788                 | LR__3091
24788     01 B0 66 F6 | 	neg	local06, #1
2478c     3F B2 06 F6 | 	mov	local07, #63
24790     00 B4 06 F6 | 	mov	local08, #0
24794     04 68 06 F1 | 	add	ptr___system__dat__, #4
24798     34 B7 02 FB | 	rdlong	local09, ptr___system__dat__
2479c     04 68 86 F1 | 	sub	ptr___system__dat__, #4
247a0                 | LR__3092
247a0     08 B6 16 F4 | 	testb	local09, #8 wc
247a4     09 B6 76 F4 | 	testbn	local09, #9 andc
247a8     0A B6 46 F0 | 	shr	local09, #10
247ac     01 B4 06 C6 |  if_b	mov	local08, #1
247b0     40 7E 6C 3D |  if_ae	testp	#63 wz
247b4     01 B4 06 26 |  if_nc_and_z	mov	local08, #1
247b8     3F B6 8E 2A |  if_nc_and_z	rdpin	local09, #63
247bc     04 B6 46 20 |  if_nc_and_z	shr	local09, #4
247c0                 | LR__3093
247c0     00 A8 06 F6 | 	mov	local02, #0
247c4     00 B4 0E F2 | 	cmp	local08, #0 wz
247c8     01 A8 66 56 |  if_ne	neg	local02, #1
247cc     00 B8 06 F6 | 	mov	local10, #0
247d0     00 AA 06 F6 | 	mov	local03, #0
247d4     00 A6 0E F2 | 	cmp	local01, #0 wz
247d8     01 AA 66 56 |  if_ne	neg	local03, #1
247dc     00 AC 06 F6 | 	mov	local04, #0
247e0     00 BA 06 F6 | 	mov	local11, #0
247e4     57 BD 02 F6 | 	mov	local12, local05
247e8     1A 7A 62 FD | 	getct	result1
247ec     3D BF 02 F6 | 	mov	local13, result1
247f0     5F BD 82 F1 | 	sub	local12, local13
247f4     00 BC 56 F2 | 	cmps	local12, #0 wc
247f8     00 BA 26 C6 |  if_b	not	local11, #0
247fc     00 BA 0E F2 | 	cmp	local11, #0 wz
24800     00 AC 26 56 |  if_ne	not	local04, #0
24804     56 AB CA F7 | 	test	local03, local04 wz
24808     00 B8 26 56 |  if_ne	not	local10, #0
2480c     5C A9 4A F5 | 	or	local02, local10 wz
24810     8C FF 9F AD |  if_e	jmp	#LR__3092
24814     00 B4 0E F2 | 	cmp	local08, #0 wz
24818     5B B1 02 56 |  if_ne	mov	local06, local09
2481c     58 B1 E2 58 |  if_ne	getbyte	local06, local06, #0
24820     04 68 06 F1 | 	add	ptr___system__dat__, #4
24824     34 B7 62 FC | 	wrlong	local09, ptr___system__dat__
24828     04 68 86 F1 | 	sub	ptr___system__dat__, #4
2482c     58 7B 02 F6 | 	mov	result1, local06
24830     E7 F0 03 F6 | 	mov	ptra, fp
24834     F2 00 A0 FD | 	call	#popregs_
24838                 | __system___rxraw_ret
24838     2D 00 64 FD | 	ret
2483c                 | 
2483c                 | __system___getus
2483c     1A 7C 72 FD | 	getct	result2 wc
24840     1A 80 62 FD | 	getct	_var01
24844     10 68 06 F1 | 	add	ptr___system__dat__, #16
24848     34 83 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
2484c     10 68 86 F1 | 	sub	ptr___system__dat__, #16
24850     20 00 90 5D |  if_ne	jmp	#LR__3100
24854     14 82 06 FB | 	rdlong	_var02, #20
24858     A1 07 00 FF 
2485c     40 82 16 FD | 	qdiv	_var02, ##1000000
24860     10 68 06 F1 | 	add	ptr___system__dat__, #16
24864     18 7A 62 FD | 	getqx	result1
24868     3D 83 02 F6 | 	mov	_var02, result1
2486c     34 7B 62 FC | 	wrlong	result1, ptr___system__dat__
24870     10 68 86 F1 | 	sub	ptr___system__dat__, #16
24874                 | LR__3100
24874     41 7D 12 FD | 	qdiv	result2, _var02
24878     19 7C 62 FD | 	getqy	result2
2487c     28 7C 62 FD | 	setq	result2
24880     41 81 12 FD | 	qdiv	_var01, _var02
24884     18 7A 62 FD | 	getqx	result1
24888                 | __system___getus_ret
24888     2D 00 64 FD | 	ret
2488c                 | 
2488c                 | __system____builtin_memmove
2488c     49 81 02 F6 | 	mov	_var01, arg01
24890     4A 93 52 F2 | 	cmps	arg01, arg02 wc
24894     10 00 90 CD |  if_b	jmp	#LR__3110
24898     4A 83 02 F6 | 	mov	_var02, arg02
2489c     4B 83 02 F1 | 	add	_var02, arg03
248a0     41 93 52 F2 | 	cmps	arg01, _var02 wc
248a4     48 00 90 CD |  if_b	jmp	#LR__3116
248a8                 | LR__3110
248a8     4B 85 02 F6 | 	mov	_var03, arg03
248ac     02 84 4E F0 | 	shr	_var03, #2 wz
248b0     18 00 90 AD |  if_e	jmp	#LR__3115
248b4     D7 0A 48 FB | 	callpa	#(@LR__3113-@LR__3111)>>2,fcache_load_ptr_
248b8                 | LR__3111
248b8     42 09 D8 FC | 	rep	@LR__3114, _var03
248bc                 | LR__3112
248bc     4A 85 02 FB | 	rdlong	_var03, arg02
248c0     49 85 62 FC | 	wrlong	_var03, arg01
248c4     04 92 06 F1 | 	add	arg01, #4
248c8     04 94 06 F1 | 	add	arg02, #4
248cc                 | LR__3113
248cc                 | LR__3114
248cc                 | LR__3115
248cc     02 96 CE F7 | 	test	arg03, #2 wz
248d0     4A 83 E2 5A |  if_ne	rdword	_var02, arg02
248d4     49 83 52 5C |  if_ne	wrword	_var02, arg01
248d8     02 92 06 51 |  if_ne	add	arg01, #2
248dc     02 94 06 51 |  if_ne	add	arg02, #2
248e0     01 96 CE F7 | 	test	arg03, #1 wz
248e4     4A 83 C2 5A |  if_ne	rdbyte	_var02, arg02
248e8     49 83 42 5C |  if_ne	wrbyte	_var02, arg01
248ec     28 00 90 FD | 	jmp	#LR__3122
248f0                 | LR__3116
248f0     4B 93 02 F1 | 	add	arg01, arg03
248f4     4B 95 02 F1 | 	add	arg02, arg03
248f8     4B 87 0A F6 | 	mov	_var04, arg03 wz
248fc     18 00 90 AD |  if_e	jmp	#LR__3121
24900     D7 0A 48 FB | 	callpa	#(@LR__3119-@LR__3117)>>2,fcache_load_ptr_
24904                 | LR__3117
24904     43 09 D8 FC | 	rep	@LR__3120, _var04
24908                 | LR__3118
24908     01 92 86 F1 | 	sub	arg01, #1
2490c     01 94 86 F1 | 	sub	arg02, #1
24910     4A 83 C2 FA | 	rdbyte	_var02, arg02
24914     49 83 42 FC | 	wrbyte	_var02, arg01
24918                 | LR__3119
24918                 | LR__3120
24918                 | LR__3121
24918                 | LR__3122
24918     40 7B 02 F6 | 	mov	result1, _var01
2491c                 | __system____builtin_memmove_ret
2491c     2D 00 64 FD | 	ret
24920                 | 
24920                 | __system__longmove
24920     49 81 02 F6 | 	mov	_var01, arg01
24924     4A 93 52 F2 | 	cmps	arg01, arg02 wc
24928     24 00 90 3D |  if_ae	jmp	#LR__3134
2492c     4B 83 0A F6 | 	mov	_var02, arg03 wz
24930     54 00 90 AD |  if_e	jmp	#LR__3140
24934     D7 0A 48 FB | 	callpa	#(@LR__3132-@LR__3130)>>2,fcache_load_ptr_
24938                 | LR__3130
24938     41 09 D8 FC | 	rep	@LR__3133, _var02
2493c                 | LR__3131
2493c     4A 83 02 FB | 	rdlong	_var02, arg02
24940     49 83 62 FC | 	wrlong	_var02, arg01
24944     04 92 06 F1 | 	add	arg01, #4
24948     04 94 06 F1 | 	add	arg02, #4
2494c                 | LR__3132
2494c                 | LR__3133
2494c     38 00 90 FD | 	jmp	#LR__3140
24950                 | LR__3134
24950     4B 83 02 F6 | 	mov	_var02, arg03
24954     02 82 66 F0 | 	shl	_var02, #2
24958     41 93 02 F1 | 	add	arg01, _var02
2495c     4B 85 02 F6 | 	mov	_var03, arg03
24960     02 84 66 F0 | 	shl	_var03, #2
24964     42 95 02 F1 | 	add	arg02, _var03
24968     4B 87 0A F6 | 	mov	_var04, arg03 wz
2496c     18 00 90 AD |  if_e	jmp	#LR__3139
24970     D7 0A 48 FB | 	callpa	#(@LR__3137-@LR__3135)>>2,fcache_load_ptr_
24974                 | LR__3135
24974     43 09 D8 FC | 	rep	@LR__3138, _var04
24978                 | LR__3136
24978     04 92 86 F1 | 	sub	arg01, #4
2497c     04 94 86 F1 | 	sub	arg02, #4
24980     4A 87 02 FB | 	rdlong	_var04, arg02
24984     49 87 62 FC | 	wrlong	_var04, arg01
24988                 | LR__3137
24988                 | LR__3138
24988                 | LR__3139
24988                 | LR__3140
24988     40 7B 02 F6 | 	mov	result1, _var01
2498c                 | __system__longmove_ret
2498c     2D 00 64 FD | 	ret
24990                 | 
24990                 | __system____builtin_strcpy
24990     49 81 02 F6 | 	mov	_var01, arg01
24994     D7 0A 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
24998                 | LR__3150
24998     4A 7B CA FA | 	rdbyte	result1, arg02 wz
2499c     49 7B 42 FC | 	wrbyte	result1, arg01
249a0     01 94 06 F1 | 	add	arg02, #1
249a4     01 92 06 F1 | 	add	arg01, #1
249a8     EC FF 9F 5D |  if_ne	jmp	#LR__3150
249ac                 | LR__3151
249ac     40 7B 02 F6 | 	mov	result1, _var01
249b0                 | __system____builtin_strcpy_ret
249b0     2D 00 64 FD | 	ret
249b4                 | 
249b4                 | __system____topofstack
249b4     00 CA 05 F6 | 	mov	COUNT_, #0
249b8     E8 00 A0 FD | 	call	#pushregs_
249bc     08 F0 07 F1 | 	add	ptra, #8
249c0     04 CE 05 F1 | 	add	fp, #4
249c4     E7 92 62 FC | 	wrlong	arg01, fp
249c8     E7 7A 02 F6 | 	mov	result1, fp
249cc     04 CE 85 F1 | 	sub	fp, #4
249d0     E7 F0 03 F6 | 	mov	ptra, fp
249d4     F2 00 A0 FD | 	call	#popregs_
249d8                 | __system____topofstack_ret
249d8     2D 00 64 FD | 	ret
249dc                 | 
249dc                 | __system___lockmem
249dc     00 7A 06 F6 | 	mov	result1, #0
249e0     01 7A 62 FD | 	cogid	result1
249e4     00 7B 06 F1 | 	add	result1, #256
249e8                 | LR__3160
249e8     49 81 0A FB | 	rdlong	_var01, arg01 wz
249ec     49 7B 62 AC |  if_e	wrlong	result1, arg01
249f0     49 81 02 AB |  if_e	rdlong	_var01, arg01
249f4     49 81 02 AB |  if_e	rdlong	_var01, arg01
249f8     3D 81 0A F2 | 	cmp	_var01, result1 wz
249fc     E8 FF 9F 5D |  if_ne	jmp	#LR__3160
24a00                 | __system___lockmem_ret
24a00     2D 00 64 FD | 	ret
24a04                 | 
24a04                 | __system___string_cmp
24a04     D7 14 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
24a08                 | LR__3170
24a08     49 81 C2 FA | 	rdbyte	_var01, arg01
24a0c     4A 83 C2 FA | 	rdbyte	_var02, arg02
24a10     40 85 02 F6 | 	mov	_var03, _var01
24a14     41 85 8A F1 | 	sub	_var03, _var02 wz
24a18     01 92 06 F1 | 	add	arg01, #1
24a1c     01 94 06 F1 | 	add	arg02, #1
24a20     0C 00 90 5D |  if_ne	jmp	#LR__3172
24a24     00 80 0E F2 | 	cmp	_var01, #0 wz
24a28     00 82 0E 52 |  if_ne	cmp	_var02, #0 wz
24a2c     D8 FF 9F 5D |  if_ne	jmp	#LR__3170
24a30                 | LR__3171
24a30                 | LR__3172
24a30     42 7B 02 F6 | 	mov	result1, _var03
24a34                 | __system___string_cmp_ret
24a34     2D 00 64 FD | 	ret
24a38                 | 
24a38                 | __system___string_concat
24a38     05 CA 05 F6 | 	mov	COUNT_, #5
24a3c     E8 00 A0 FD | 	call	#pushregs_
24a40     49 A7 02 F6 | 	mov	local01, arg01
24a44     4A A9 02 F6 | 	mov	local02, arg02
24a48     53 93 02 F6 | 	mov	arg01, local01
24a4c     49 AB 02 F6 | 	mov	local03, arg01
24a50     D7 06 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
24a54                 | LR__3180
24a54     55 7B CA FA | 	rdbyte	result1, local03 wz
24a58     01 AA 06 51 |  if_ne	add	local03, #1
24a5c     F4 FF 9F 5D |  if_ne	jmp	#LR__3180
24a60                 | LR__3181
24a60     49 AB 82 F1 | 	sub	local03, arg01
24a64     55 AD 02 F6 | 	mov	local04, local03
24a68     54 93 02 F6 | 	mov	arg01, local02
24a6c     49 AB 02 F6 | 	mov	local03, arg01
24a70     D7 06 48 FB | 	callpa	#(@LR__3183-@LR__3182)>>2,fcache_load_ptr_
24a74                 | LR__3182
24a74     55 7B CA FA | 	rdbyte	result1, local03 wz
24a78     01 AA 06 51 |  if_ne	add	local03, #1
24a7c     F4 FF 9F 5D |  if_ne	jmp	#LR__3182
24a80                 | LR__3183
24a80     49 AB 82 F1 | 	sub	local03, arg01
24a84     56 93 02 F6 | 	mov	arg01, local04
24a88     55 93 02 F1 | 	add	arg01, local03
24a8c     01 92 06 F1 | 	add	arg01, #1
24a90     50 39 B0 FD | 	call	#__system___gc_alloc_managed
24a94     3D AF 0A F6 | 	mov	local05, result1 wz
24a98     28 00 90 AD |  if_e	jmp	#LR__3184
24a9c     57 93 02 F6 | 	mov	arg01, local05
24aa0     53 95 02 F6 | 	mov	arg02, local01
24aa4     56 97 02 F6 | 	mov	arg03, local04
24aa8     E0 FD BF FD | 	call	#__system____builtin_memmove
24aac     57 93 02 F6 | 	mov	arg01, local05
24ab0     56 93 02 F1 | 	add	arg01, local04
24ab4     01 AA 06 F1 | 	add	local03, #1
24ab8     54 95 02 F6 | 	mov	arg02, local02
24abc     55 97 02 F6 | 	mov	arg03, local03
24ac0     C8 FD BF FD | 	call	#__system____builtin_memmove
24ac4                 | LR__3184
24ac4     57 7B 02 F6 | 	mov	result1, local05
24ac8     E7 F0 03 F6 | 	mov	ptra, fp
24acc     F2 00 A0 FD | 	call	#popregs_
24ad0                 | __system___string_concat_ret
24ad0     2D 00 64 FD | 	ret
24ad4                 | 
24ad4                 | __system___tx
24ad4     02 CA 05 F6 | 	mov	COUNT_, #2
24ad8     E8 00 A0 FD | 	call	#pushregs_
24adc     49 A7 02 F6 | 	mov	local01, arg01
24ae0     0A A6 0E F2 | 	cmp	local01, #10 wz
24ae4     18 00 90 5D |  if_ne	jmp	#LR__3190
24ae8     08 68 06 F1 | 	add	ptr___system__dat__, #8
24aec     34 A9 02 FB | 	rdlong	local02, ptr___system__dat__
24af0     08 68 86 F1 | 	sub	ptr___system__dat__, #8
24af4     02 A8 CE F7 | 	test	local02, #2 wz
24af8     0D 92 06 56 |  if_ne	mov	arg01, #13
24afc     FC FB BF 5D |  if_ne	call	#__system___txraw
24b00                 | LR__3190
24b00     53 93 02 F6 | 	mov	arg01, local01
24b04     F4 FB BF FD | 	call	#__system___txraw
24b08     E7 F0 03 F6 | 	mov	ptra, fp
24b0c     F2 00 A0 FD | 	call	#popregs_
24b10                 | __system___tx_ret
24b10     2D 00 64 FD | 	ret
24b14                 | 
24b14                 | __system___rx
24b14     01 CA 05 F6 | 	mov	COUNT_, #1
24b18     E8 00 A0 FD | 	call	#pushregs_
24b1c                 | LR__3200
24b1c     00 92 06 F6 | 	mov	arg01, #0
24b20     1C FC BF FD | 	call	#__system___rxraw
24b24     3D A7 02 F6 | 	mov	local01, result1
24b28     FF FF 7F FF 
24b2c     FF A7 0E F2 | 	cmp	local01, ##-1 wz
24b30     E8 FF 9F AD |  if_e	jmp	#LR__3200
24b34     0D A6 0E F2 | 	cmp	local01, #13 wz
24b38     14 00 90 5D |  if_ne	jmp	#LR__3201
24b3c     08 68 06 F1 | 	add	ptr___system__dat__, #8
24b40     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
24b44     08 68 86 F1 | 	sub	ptr___system__dat__, #8
24b48     02 7A CE F7 | 	test	result1, #2 wz
24b4c     0A A6 06 56 |  if_ne	mov	local01, #10
24b50                 | LR__3201
24b50     08 68 06 F1 | 	add	ptr___system__dat__, #8
24b54     34 93 02 FB | 	rdlong	arg01, ptr___system__dat__
24b58     08 68 86 F1 | 	sub	ptr___system__dat__, #8
24b5c     01 92 CE F7 | 	test	arg01, #1 wz
24b60     1C 00 90 AD |  if_e	jmp	#LR__3204
24b64     7F A6 0E F2 | 	cmp	local01, #127 wz
24b68     0C 00 90 5D |  if_ne	jmp	#LR__3202
24b6c     08 92 06 F6 | 	mov	arg01, #8
24b70     60 FF BF FD | 	call	#__system___tx
24b74     08 00 90 FD | 	jmp	#LR__3203
24b78                 | LR__3202
24b78     53 93 02 F6 | 	mov	arg01, local01
24b7c     54 FF BF FD | 	call	#__system___tx
24b80                 | LR__3203
24b80                 | LR__3204
24b80     53 7B 02 F6 | 	mov	result1, local01
24b84     E7 F0 03 F6 | 	mov	ptra, fp
24b88     F2 00 A0 FD | 	call	#popregs_
24b8c                 | __system___rx_ret
24b8c     2D 00 64 FD | 	ret
24b90                 | 
24b90                 | __system___pinwrite
24b90     49 81 02 F6 | 	mov	_var01, arg01
24b94     1F 80 06 F5 | 	and	_var01, #31
24b98     20 92 CE F7 | 	test	arg01, #32 wz
24b9c     06 92 46 F0 | 	shr	arg01, #6
24ba0     49 93 CA F9 | 	bmask	arg01, arg01
24ba4     40 93 62 F0 | 	shl	arg01, _var01
24ba8     40 95 62 F0 | 	shl	arg02, _var01
24bac     1C 00 90 AD |  if_e	jmp	#LR__3210
24bb0     49 F7 43 F5 | 	or	dirb, arg01
24bb4     FD 81 02 F6 | 	mov	_var01, outb
24bb8     49 81 22 F5 | 	andn	_var01, arg01
24bbc     49 95 02 F5 | 	and	arg02, arg01
24bc0     4A 81 42 F5 | 	or	_var01, arg02
24bc4     40 FB 03 F6 | 	mov	outb, _var01
24bc8     18 00 90 FD | 	jmp	#LR__3211
24bcc                 | LR__3210
24bcc     49 F5 43 F5 | 	or	dira, arg01
24bd0     FC 81 02 F6 | 	mov	_var01, outa
24bd4     49 81 22 F5 | 	andn	_var01, arg01
24bd8     49 95 02 F5 | 	and	arg02, arg01
24bdc     4A 81 42 F5 | 	or	_var01, arg02
24be0     40 F9 03 F6 | 	mov	outa, _var01
24be4                 | LR__3211
24be4                 | __system___pinwrite_ret
24be4     2D 00 64 FD | 	ret
24be8                 | 
24be8                 | __system___basic_read_line
24be8     06 CA 05 F6 | 	mov	COUNT_, #6
24bec     E8 00 A0 FD | 	call	#pushregs_
24bf0     49 A7 02 F6 | 	mov	local01, arg01
24bf4     00 A8 06 F6 | 	mov	local02, #0
24bf8     18 AA 06 F6 | 	mov	local03, #24
24bfc     00 AC 06 F6 | 	mov	local04, #0
24c00     18 92 06 F6 | 	mov	arg01, #24
24c04     DC 37 B0 FD | 	call	#__system___gc_alloc_managed
24c08     3D AF 0A F6 | 	mov	local05, result1 wz
24c0c     57 7B 02 A6 |  if_e	mov	result1, local05
24c10     B0 00 90 AD |  if_e	jmp	#LR__3223
24c14                 | LR__3220
24c14     53 93 02 F6 | 	mov	arg01, local01
24c18     78 0B B0 FD | 	call	#__system___basic_get_char
24c1c     3D B1 02 F6 | 	mov	local06, result1
24c20     01 B0 56 F2 | 	cmps	local06, #1 wc
24c24     8C 00 90 CD |  if_b	jmp	#LR__3222
24c28     0A B0 0E F2 | 	cmp	local06, #10 wz
24c2c     10 00 90 5D |  if_ne	jmp	#LR__3221
24c30     00 AC 0E F2 | 	cmp	local04, #0 wz
24c34     01 A8 56 52 |  if_ne	cmps	local02, #1 wc
24c38     01 A8 86 11 |  if_a	sub	local02, #1
24c3c     74 00 90 FD | 	jmp	#LR__3222
24c40                 | LR__3221
24c40     0D B0 0E F2 | 	cmp	local06, #13 wz
24c44     01 AC 06 A6 |  if_e	mov	local04, #1
24c48     00 AC 06 56 |  if_ne	mov	local04, #0
24c4c     08 B0 0E F2 | 	cmp	local06, #8 wz
24c50     7F B0 0E 52 |  if_ne	cmp	local06, #127 wz
24c54     01 A8 56 A2 |  if_e	cmps	local02, #1 wc
24c58     01 A8 86 21 |  if_nc_and_z	sub	local02, #1
24c5c     B4 FF 9F AD |  if_e	jmp	#LR__3220
24c60     57 97 02 F6 | 	mov	arg03, local05
24c64     54 97 02 F1 | 	add	arg03, local02
24c68     4B B1 42 FC | 	wrbyte	local06, arg03
24c6c     01 A8 06 F1 | 	add	local02, #1
24c70     55 A9 0A F2 | 	cmp	local02, local03 wz
24c74     9C FF 9F 5D |  if_ne	jmp	#LR__3220
24c78     55 93 02 F6 | 	mov	arg01, local03
24c7c     20 92 06 F1 | 	add	arg01, #32
24c80     60 37 B0 FD | 	call	#__system___gc_alloc_managed
24c84     3D B1 0A F6 | 	mov	local06, result1 wz
24c88     58 7B 02 A6 |  if_e	mov	result1, local06
24c8c     34 00 90 AD |  if_e	jmp	#LR__3223
24c90     58 93 02 F6 | 	mov	arg01, local06
24c94     57 95 02 F6 | 	mov	arg02, local05
24c98     55 97 02 F6 | 	mov	arg03, local03
24c9c     EC FB BF FD | 	call	#__system____builtin_memmove
24ca0     20 AA 06 F1 | 	add	local03, #32
24ca4     57 93 02 F6 | 	mov	arg01, local05
24ca8     6C 38 B0 FD | 	call	#__system___gc_free
24cac     58 AF 02 F6 | 	mov	local05, local06
24cb0     60 FF 9F FD | 	jmp	#LR__3220
24cb4                 | LR__3222
24cb4     57 B1 02 F6 | 	mov	local06, local05
24cb8     54 B1 02 F1 | 	add	local06, local02
24cbc     58 01 48 FC | 	wrbyte	#0, local06
24cc0     57 7B 02 F6 | 	mov	result1, local05
24cc4                 | LR__3223
24cc4     E7 F0 03 F6 | 	mov	ptra, fp
24cc8     F2 00 A0 FD | 	call	#popregs_
24ccc                 | __system___basic_read_line_ret
24ccc     2D 00 64 FD | 	ret
24cd0                 | 
24cd0                 | __system___waitms
24cd0     49 81 02 F6 | 	mov	_var01, arg01
24cd4     1A 82 62 FD | 	getct	_var02
24cd8     14 84 06 FB | 	rdlong	_var03, #20
24cdc     D7 14 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
24ce0                 | LR__3230
24ce0     01 00 00 FF 
24ce4     E8 81 56 F2 | 	cmps	_var01, ##1000 wc
24ce8     1C 00 90 CD |  if_b	jmp	#LR__3232
24cec     42 83 02 F1 | 	add	_var02, _var03
24cf0     41 93 02 F6 | 	mov	arg01, _var02
24cf4     00 92 66 FA | 	addct1	arg01, #0
24cf8     24 22 60 FD | 	waitct1
24cfc     01 00 00 FF 
24d00     E8 81 86 F1 | 	sub	_var01, ##1000
24d04     D8 FF 9F FD | 	jmp	#LR__3230
24d08                 | LR__3231
24d08                 | LR__3232
24d08     01 80 56 F2 | 	cmps	_var01, #1 wc
24d0c     28 00 90 CD |  if_b	jmp	#LR__3233
24d10     42 81 02 FD | 	qmul	_var01, _var03
24d14     01 00 00 FF 
24d18     E8 97 06 F6 | 	mov	arg03, ##1000
24d1c     19 7A 62 FD | 	getqy	result1
24d20     18 92 62 FD | 	getqx	arg01
24d24     28 7A 62 FD | 	setq	result1
24d28     4B 93 12 FD | 	qdiv	arg01, arg03
24d2c     18 92 62 FD | 	getqx	arg01
24d30     41 93 62 FA | 	addct1	arg01, _var02
24d34     24 22 60 FD | 	waitct1
24d38                 | LR__3233
24d38                 | __system___waitms_ret
24d38     2D 00 64 FD | 	ret
24d3c                 | 
24d3c                 | __system___waitus
24d3c     49 81 02 F6 | 	mov	_var01, arg01
24d40     1A 82 62 FD | 	getct	_var02
24d44     14 84 06 FB | 	rdlong	_var03, #20
24d48     D7 14 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
24d4c                 | LR__3240
24d4c     A1 07 00 FF 
24d50     40 80 56 F2 | 	cmps	_var01, ##1000000 wc
24d54     1C 00 90 CD |  if_b	jmp	#LR__3242
24d58     42 83 02 F1 | 	add	_var02, _var03
24d5c     41 93 02 F6 | 	mov	arg01, _var02
24d60     00 92 66 FA | 	addct1	arg01, #0
24d64     24 22 60 FD | 	waitct1
24d68     A1 07 00 FF 
24d6c     40 80 86 F1 | 	sub	_var01, ##1000000
24d70     D8 FF 9F FD | 	jmp	#LR__3240
24d74                 | LR__3241
24d74                 | LR__3242
24d74     01 80 56 F2 | 	cmps	_var01, #1 wc
24d78     28 00 90 CD |  if_b	jmp	#LR__3243
24d7c     42 81 02 FD | 	qmul	_var01, _var03
24d80     A1 07 00 FF 
24d84     40 96 06 F6 | 	mov	arg03, ##1000000
24d88     19 7A 62 FD | 	getqy	result1
24d8c     18 92 62 FD | 	getqx	arg01
24d90     28 7A 62 FD | 	setq	result1
24d94     4B 93 12 FD | 	qdiv	arg01, arg03
24d98     18 7A 62 FD | 	getqx	result1
24d9c     3D 83 62 FA | 	addct1	_var02, result1
24da0     24 22 60 FD | 	waitct1
24da4                 | LR__3243
24da4                 | __system___waitus_ret
24da4     2D 00 64 FD | 	ret
24da8                 | 
24da8                 | __system___mount
24da8     09 CA 05 F6 | 	mov	COUNT_, #9
24dac     E8 00 A0 FD | 	call	#pushregs_
24db0     49 A7 02 F6 | 	mov	local01, arg01
24db4     4A A9 0A F6 | 	mov	local02, arg02 wz
24db8     01 AA 66 F6 | 	neg	local03, #1
24dbc     01 7A 66 A6 |  if_e	neg	result1, #1
24dc0     9C 02 90 AD |  if_e	jmp	#LR__3265
24dc4     53 7B C2 FA | 	rdbyte	result1, local01
24dc8     2F 7A 0E F2 | 	cmp	result1, #47 wz
24dcc     28 00 90 5D |  if_ne	jmp	#LR__3252
24dd0     53 93 02 F6 | 	mov	arg01, local01
24dd4     49 AD 02 F6 | 	mov	local04, arg01
24dd8     D7 06 48 FB | 	callpa	#(@LR__3251-@LR__3250)>>2,fcache_load_ptr_
24ddc                 | LR__3250
24ddc     56 7B CA FA | 	rdbyte	result1, local04 wz
24de0     01 AC 06 51 |  if_ne	add	local04, #1
24de4     F4 FF 9F 5D |  if_ne	jmp	#LR__3250
24de8                 | LR__3251
24de8     49 AD 82 F1 | 	sub	local04, arg01
24dec     56 7B 02 F6 | 	mov	result1, local04
24df0     10 7A 56 F2 | 	cmps	result1, #16 wc
24df4     14 00 90 CD |  if_b	jmp	#LR__3253
24df8                 | LR__3252
24df8     20 68 06 F1 | 	add	ptr___system__dat__, #32
24dfc     34 15 68 FC | 	wrlong	#10, ptr___system__dat__
24e00     20 68 86 F1 | 	sub	ptr___system__dat__, #32
24e04     01 7A 66 F6 | 	neg	result1, #1
24e08     54 02 90 FD | 	jmp	#LR__3265
24e0c                 | LR__3253
24e0c     00 AE 06 F6 | 	mov	local05, #0
24e10                 | LR__3254
24e10     04 AE 56 F2 | 	cmps	local05, #4 wc
24e14     B4 00 90 3D |  if_ae	jmp	#LR__3259
24e18     57 93 02 F6 | 	mov	arg01, local05
24e1c     02 92 66 F0 | 	shl	arg01, #2
24e20     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
24e24     64 7A 06 F1 | 	add	result1, #100
24e28     3D 93 02 F1 | 	add	arg01, result1
24e2c     49 7B 0A FB | 	rdlong	result1, arg01 wz
24e30     00 AA 56 A2 |  if_e	cmps	local03, #0 wc
24e34     57 AB 02 86 |  if_c_and_z	mov	local03, local05
24e38     88 00 90 8D |  if_c_and_z	jmp	#LR__3258
24e3c     57 93 02 F6 | 	mov	arg01, local05
24e40     02 92 66 F0 | 	shl	arg01, #2
24e44     34 AD 02 F6 | 	mov	local04, ptr___system__dat__
24e48     64 AC 06 F1 | 	add	local04, #100
24e4c     56 93 02 F1 | 	add	arg01, local04
24e50     49 93 02 FB | 	rdlong	arg01, arg01
24e54     49 AD 02 F6 | 	mov	local04, arg01
24e58     D7 06 48 FB | 	callpa	#(@LR__3256-@LR__3255)>>2,fcache_load_ptr_
24e5c                 | LR__3255
24e5c     56 7B CA FA | 	rdbyte	result1, local04 wz
24e60     01 AC 06 51 |  if_ne	add	local04, #1
24e64     F4 FF 9F 5D |  if_ne	jmp	#LR__3255
24e68                 | LR__3256
24e68     49 AD 82 F1 | 	sub	local04, arg01
24e6c     56 7B 02 F6 | 	mov	result1, local04
24e70     3D B1 02 F6 | 	mov	local06, result1
24e74     58 93 02 F6 | 	mov	arg01, local06
24e78     53 93 02 F1 | 	add	arg01, local01
24e7c     49 AD C2 FA | 	rdbyte	local04, arg01
24e80     2F AC 0E F2 | 	cmp	local04, #47 wz
24e84     58 B3 02 56 |  if_ne	mov	local07, local06
24e88     53 B3 02 51 |  if_ne	add	local07, local01
24e8c     59 93 CA 5A |  if_ne	rdbyte	arg01, local07 wz
24e90     30 00 90 5D |  if_ne	jmp	#LR__3257
24e94     57 AD 02 F6 | 	mov	local04, local05
24e98     02 AC 66 F0 | 	shl	local04, #2
24e9c     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
24ea0     64 96 06 F1 | 	add	arg03, #100
24ea4     4B AD 02 F1 | 	add	local04, arg03
24ea8     56 95 02 FB | 	rdlong	arg02, local04
24eac     53 93 02 F6 | 	mov	arg01, local01
24eb0     58 97 02 F6 | 	mov	arg03, local06
24eb4     24 4A B0 FD | 	call	#__system__strncmp
24eb8     00 7A 0E F2 | 	cmp	result1, #0 wz
24ebc     57 AB 02 A6 |  if_e	mov	local03, local05
24ec0     08 00 90 AD |  if_e	jmp	#LR__3259
24ec4                 | LR__3257
24ec4                 | LR__3258
24ec4     01 AE 06 F1 | 	add	local05, #1
24ec8     44 FF 9F FD | 	jmp	#LR__3254
24ecc                 | LR__3259
24ecc     FF FF 7F FF 
24ed0     FF AB 0E F2 | 	cmp	local03, ##-1 wz
24ed4     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
24ed8     34 17 68 AC |  if_e	wrlong	#11, ptr___system__dat__
24edc     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
24ee0     01 7A 66 A6 |  if_e	neg	result1, #1
24ee4     78 01 90 AD |  if_e	jmp	#LR__3265
24ee8     55 AF 02 F6 | 	mov	local05, local03
24eec     57 B3 02 F6 | 	mov	local07, local05
24ef0     02 B2 66 F0 | 	shl	local07, #2
24ef4     34 B1 02 F6 | 	mov	local06, ptr___system__dat__
24ef8     74 B0 06 F1 | 	add	local06, #116
24efc     58 B3 02 F1 | 	add	local07, local06
24f00     59 B1 0A FB | 	rdlong	local06, local07 wz
24f04     58 00 90 AD |  if_e	jmp	#LR__3260
24f08     4C B0 06 F1 | 	add	local06, #76
24f0c     58 B3 0A FB | 	rdlong	local07, local06 wz
24f10     4C B0 86 F1 | 	sub	local06, #76
24f14     48 00 90 AD |  if_e	jmp	#LR__3260
24f18     4C B0 06 F1 | 	add	local06, #76
24f1c     58 B3 02 FB | 	rdlong	local07, local06
24f20     59 AD 02 F6 | 	mov	local04, local07
24f24     13 B2 46 F7 | 	zerox	local07, #19
24f28     14 AC 46 F0 | 	shr	local04, #20
24f2c     02 AC 66 F0 | 	shl	local04, #2
24f30     2D AD 02 F1 | 	add	local04, __methods__
24f34     56 AD 02 FB | 	rdlong	local04, local04
24f38     57 B1 02 F6 | 	mov	local06, local05
24f3c     02 B0 66 F0 | 	shl	local06, #2
24f40     34 AB 02 F6 | 	mov	local03, ptr___system__dat__
24f44     64 AA 06 F1 | 	add	local03, #100
24f48     55 B1 02 F1 | 	add	local06, local03
24f4c     58 93 02 FB | 	rdlong	arg01, local06
24f50     32 B1 02 F6 | 	mov	local06, objptr
24f54     59 65 02 F6 | 	mov	objptr, local07
24f58     2D AC 62 FD | 	call	local04
24f5c     58 65 02 F6 | 	mov	objptr, local06
24f60                 | LR__3260
24f60     57 B1 02 F6 | 	mov	local06, local05
24f64     02 B0 66 F0 | 	shl	local06, #2
24f68     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
24f6c     74 B2 06 F1 | 	add	local07, #116
24f70     59 B1 02 F1 | 	add	local06, local07
24f74     58 A9 62 FC | 	wrlong	local02, local06
24f78     00 A8 0E F2 | 	cmp	local02, #0 wz
24f7c     18 00 90 5D |  if_ne	jmp	#LR__3261
24f80     02 AE 66 F0 | 	shl	local05, #2
24f84     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
24f88     64 B2 06 F1 | 	add	local07, #100
24f8c     59 AF 02 F1 | 	add	local05, local07
24f90     57 01 68 FC | 	wrlong	#0, local05
24f94     C4 00 90 FD | 	jmp	#LR__3264
24f98                 | LR__3261
24f98     57 B5 02 F6 | 	mov	local08, local05
24f9c     04 B4 66 F0 | 	shl	local08, #4
24fa0     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
24fa4     24 B2 06 F1 | 	add	local07, #36
24fa8     59 B5 02 F1 | 	add	local08, local07
24fac     5A 93 02 F6 | 	mov	arg01, local08
24fb0     53 95 02 F6 | 	mov	arg02, local01
24fb4     10 96 06 F6 | 	mov	arg03, #16
24fb8     64 48 B0 FD | 	call	#__system__strncpy
24fbc     48 A8 06 F1 | 	add	local02, #72
24fc0     54 B3 0A FB | 	rdlong	local07, local02 wz
24fc4     48 A8 86 F1 | 	sub	local02, #72
24fc8     7C 00 90 AD |  if_e	jmp	#LR__3263
24fcc     48 A8 06 F1 | 	add	local02, #72
24fd0     54 B3 02 FB | 	rdlong	local07, local02
24fd4     59 B7 02 F6 | 	mov	local09, local07
24fd8     13 B2 46 F7 | 	zerox	local07, #19
24fdc     14 B6 46 F0 | 	shr	local09, #20
24fe0     02 B6 66 F0 | 	shl	local09, #2
24fe4     2D B7 02 F1 | 	add	local09, __methods__
24fe8     5B B7 02 FB | 	rdlong	local09, local09
24fec     5A 93 02 F6 | 	mov	arg01, local08
24ff0     32 B1 02 F6 | 	mov	local06, objptr
24ff4     59 65 02 F6 | 	mov	objptr, local07
24ff8     2D B6 62 FD | 	call	local09
24ffc     58 65 02 F6 | 	mov	objptr, local06
25000     3D 93 0A F6 | 	mov	arg01, result1 wz
25004     40 00 90 AD |  if_e	jmp	#LR__3262
25008     57 B5 02 F6 | 	mov	local08, local05
2500c     02 B4 66 F0 | 	shl	local08, #2
25010     74 68 06 F1 | 	add	ptr___system__dat__, #116
25014     34 B5 02 F1 | 	add	local08, ptr___system__dat__
25018     5A 01 68 FC | 	wrlong	#0, local08
2501c     02 AE 66 F0 | 	shl	local05, #2
25020     10 68 86 F1 | 	sub	ptr___system__dat__, #16
25024     34 AF 02 F1 | 	add	local05, ptr___system__dat__
25028     57 01 68 FC | 	wrlong	#0, local05
2502c     49 93 6A F6 | 	neg	arg01, arg01 wz
25030     44 68 86 F1 | 	sub	ptr___system__dat__, #68
25034     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
25038     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2503c     01 7A 66 56 |  if_ne	neg	result1, #1
25040     00 7A 06 A6 |  if_e	mov	result1, #0
25044     18 00 90 FD | 	jmp	#LR__3265
25048                 | LR__3262
25048                 | LR__3263
25048     02 AE 66 F0 | 	shl	local05, #2
2504c     34 B3 02 F6 | 	mov	local07, ptr___system__dat__
25050     64 B2 06 F1 | 	add	local07, #100
25054     59 AF 02 F1 | 	add	local05, local07
25058     57 B5 62 FC | 	wrlong	local08, local05
2505c                 | LR__3264
2505c     00 7A 06 F6 | 	mov	result1, #0
25060                 | LR__3265
25060     E7 F0 03 F6 | 	mov	ptra, fp
25064     F2 00 A0 FD | 	call	#popregs_
25068                 | __system___mount_ret
25068     2D 00 64 FD | 	ret
2506c                 | 
2506c                 | __system___chdir
2506c     02 CA 05 F6 | 	mov	COUNT_, #2
25070     E8 00 A0 FD | 	call	#pushregs_
25074     44 F0 07 F1 | 	add	ptra, #68
25078     49 A7 02 F6 | 	mov	local01, arg01
2507c     E7 94 02 F6 | 	mov	arg02, fp
25080     08 94 06 F1 | 	add	arg02, #8
25084     53 93 02 F6 | 	mov	arg01, local01
25088     D8 43 B0 FD | 	call	#__system__stat
2508c     00 7A 0E F2 | 	cmp	result1, #0 wz
25090     88 00 90 5D |  if_ne	jmp	#LR__3272
25094     10 CE 05 F1 | 	add	fp, #16
25098     E7 92 02 FB | 	rdlong	arg01, fp
2509c     10 CE 85 F1 | 	sub	fp, #16
250a0     78 00 00 FF 
250a4     00 92 06 F5 | 	and	arg01, ##61440
250a8     08 00 00 FF 
250ac     00 92 0E F2 | 	cmp	arg01, ##4096 wz
250b0     20 68 06 51 |  if_ne	add	ptr___system__dat__, #32
250b4     34 1B 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
250b8     20 68 86 51 |  if_ne	sub	ptr___system__dat__, #32
250bc     01 7A 66 56 |  if_ne	neg	result1, #1
250c0     58 00 90 5D |  if_ne	jmp	#LR__3272
250c4     53 97 C2 FA | 	rdbyte	arg03, local01
250c8     2F 96 0E F2 | 	cmp	arg03, #47 wz
250cc     18 00 90 5D |  if_ne	jmp	#LR__3270
250d0     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
250d4     84 92 06 F1 | 	add	arg01, #132
250d8     53 95 02 F6 | 	mov	arg02, local01
250dc     00 97 06 F6 | 	mov	arg03, #256
250e0     3C 47 B0 FD | 	call	#__system__strncpy
250e4     30 00 90 FD | 	jmp	#LR__3271
250e8                 | LR__3270
250e8     34 A9 02 F6 | 	mov	local02, ptr___system__dat__
250ec     84 A9 06 F1 | 	add	local02, #388
250f0     34 95 02 F6 | 	mov	arg02, ptr___system__dat__
250f4     84 94 06 F1 | 	add	arg02, #132
250f8     54 93 02 F6 | 	mov	arg01, local02
250fc     00 97 06 F6 | 	mov	arg03, #256
25100     1C 47 B0 FD | 	call	#__system__strncpy
25104     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
25108     84 96 06 F1 | 	add	arg03, #132
2510c     54 93 02 F6 | 	mov	arg01, local02
25110     53 95 02 F6 | 	mov	arg02, local01
25114     10 00 B0 FD | 	call	#__system____getvfsforfile
25118                 | LR__3271
25118     00 7A 06 F6 | 	mov	result1, #0
2511c                 | LR__3272
2511c     E7 F0 03 F6 | 	mov	ptra, fp
25120     F2 00 A0 FD | 	call	#popregs_
25124                 | __system___chdir_ret
25124     2D 00 64 FD | 	ret
25128                 | 
25128                 | __system____getvfsforfile
25128     0E CA 05 F6 | 	mov	COUNT_, #14
2512c     E8 00 A0 FD | 	call	#pushregs_
25130     49 A7 02 F6 | 	mov	local01, arg01
25134     4A A9 02 F6 | 	mov	local02, arg02
25138     4B AB 02 F6 | 	mov	local03, arg03
2513c     D7 10 48 FB | 	callpa	#(@LR__3281-@LR__3280)>>2,fcache_load_ptr_
25140                 | LR__3280
25140     54 7B C2 FA | 	rdbyte	result1, local02
25144     2F 7A 0E F2 | 	cmp	result1, #47 wz
25148     01 A8 06 A1 |  if_e	add	local02, #1
2514c     54 AD C2 AA |  if_e	rdbyte	local04, local02
25150     01 A8 86 A1 |  if_e	sub	local02, #1
25154     2F AC 0E A2 |  if_e	cmp	local04, #47 wz
25158     01 A8 06 A1 |  if_e	add	local02, #1
2515c     E0 FF 9F AD |  if_e	jmp	#LR__3280
25160                 | LR__3281
25160     54 AD C2 FA | 	rdbyte	local04, local02
25164     2F AC 0E F2 | 	cmp	local04, #47 wz
25168     14 00 90 5D |  if_ne	jmp	#LR__3282
2516c     53 93 02 F6 | 	mov	arg01, local01
25170     54 95 02 F6 | 	mov	arg02, local02
25174     00 97 06 F6 | 	mov	arg03, #256
25178     A4 46 B0 FD | 	call	#__system__strncpy
2517c     78 00 90 FD | 	jmp	#LR__3284
25180                 | LR__3282
25180     34 95 02 F6 | 	mov	arg02, ptr___system__dat__
25184     84 94 06 F1 | 	add	arg02, #132
25188     53 93 02 F6 | 	mov	arg01, local01
2518c     00 97 06 F6 | 	mov	arg03, #256
25190     8C 46 B0 FD | 	call	#__system__strncpy
25194     54 AD CA FA | 	rdbyte	local04, local02 wz
25198     5C 00 90 AD |  if_e	jmp	#LR__3283
2519c     54 AD C2 FA | 	rdbyte	local04, local02
251a0     2E AC 0E F2 | 	cmp	local04, #46 wz
251a4     01 A8 06 A1 |  if_e	add	local02, #1
251a8     54 AF C2 AA |  if_e	rdbyte	local05, local02
251ac     01 A8 86 A1 |  if_e	sub	local02, #1
251b0     57 B1 02 A6 |  if_e	mov	local06, local05
251b4     07 B0 4E A7 |  if_e	zerox	local06, #7 wz
251b8     3C 00 90 AD |  if_e	jmp	#LR__3283
251bc     53 AF C2 FA | 	rdbyte	local05, local01
251c0     2F AE 0E F2 | 	cmp	local05, #47 wz
251c4     01 A6 06 A1 |  if_e	add	local01, #1
251c8     53 AD C2 AA |  if_e	rdbyte	local04, local01
251cc     01 A6 86 A1 |  if_e	sub	local01, #1
251d0     00 AC 4E A2 |  if_e	cmps	local04, #0 wz
251d4     92 01 00 5F 
251d8     B4 94 06 56 |  if_ne	mov	arg02, ##@LR__5460
251dc     53 93 02 56 |  if_ne	mov	arg01, local01
251e0     00 97 06 56 |  if_ne	mov	arg03, #256
251e4     90 46 B0 5D |  if_ne	call	#__system__strncat
251e8     53 93 02 F6 | 	mov	arg01, local01
251ec     54 95 02 F6 | 	mov	arg02, local02
251f0     00 97 06 F6 | 	mov	arg03, #256
251f4     80 46 B0 FD | 	call	#__system__strncat
251f8                 | LR__3283
251f8                 | LR__3284
251f8     53 93 02 F6 | 	mov	arg01, local01
251fc     3C 48 B0 FD | 	call	#__system___normalizeName
25200     53 AD CA FA | 	rdbyte	local04, local01 wz
25204     1C 00 90 AD |  if_e	jmp	#LR__3285
25208     53 AD C2 FA | 	rdbyte	local04, local01
2520c     2F AC 0E F2 | 	cmp	local04, #47 wz
25210     01 A6 06 A1 |  if_e	add	local01, #1
25214     53 B1 C2 AA |  if_e	rdbyte	local06, local01
25218     01 A6 86 A1 |  if_e	sub	local01, #1
2521c     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
25220     10 00 90 5D |  if_ne	jmp	#LR__3286
25224                 | LR__3285
25224     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
25228     01 00 00 FF 
2522c     84 7A 06 F1 | 	add	result1, ##644
25230     EC 01 90 FD | 	jmp	#LR__3300
25234                 | LR__3286
25234     00 B2 06 F6 | 	mov	local07, #0
25238                 | LR__3287
25238     04 B2 56 F2 | 	cmps	local07, #4 wc
2523c     CC 01 90 3D |  if_ae	jmp	#LR__3299
25240     59 B1 02 F6 | 	mov	local06, local07
25244     02 B0 66 F0 | 	shl	local06, #2
25248     34 AD 02 F6 | 	mov	local04, ptr___system__dat__
2524c     64 AC 06 F1 | 	add	local04, #100
25250     56 B1 02 F1 | 	add	local06, local04
25254     58 B1 0A FB | 	rdlong	local06, local06 wz
25258     A8 01 90 AD |  if_e	jmp	#LR__3298
2525c     59 AD 02 F6 | 	mov	local04, local07
25260     02 AC 66 F0 | 	shl	local04, #2
25264     34 B1 02 F6 | 	mov	local06, ptr___system__dat__
25268     64 B0 06 F1 | 	add	local06, #100
2526c     58 AD 02 F1 | 	add	local04, local06
25270     56 93 02 FB | 	rdlong	arg01, local04
25274     49 B5 02 F6 | 	mov	local08, arg01
25278     D7 06 48 FB | 	callpa	#(@LR__3289-@LR__3288)>>2,fcache_load_ptr_
2527c                 | LR__3288
2527c     5A 7B CA FA | 	rdbyte	result1, local08 wz
25280     01 B4 06 51 |  if_ne	add	local08, #1
25284     F4 FF 9F 5D |  if_ne	jmp	#LR__3288
25288                 | LR__3289
25288     49 B5 82 F1 | 	sub	local08, arg01
2528c     5A B7 02 F6 | 	mov	local09, local08
25290     5B AD 02 F6 | 	mov	local04, local09
25294     53 AD 02 F1 | 	add	local04, local01
25298     56 B1 C2 FA | 	rdbyte	local06, local04
2529c     2F B0 0E F2 | 	cmp	local06, #47 wz
252a0     5B B9 02 56 |  if_ne	mov	local10, local09
252a4     53 B9 02 51 |  if_ne	add	local10, local01
252a8     5C AF CA 5A |  if_ne	rdbyte	local05, local10 wz
252ac     54 01 90 5D |  if_ne	jmp	#LR__3297
252b0     59 AD 02 F6 | 	mov	local04, local07
252b4     02 AC 66 F0 | 	shl	local04, #2
252b8     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
252bc     64 96 06 F1 | 	add	arg03, #100
252c0     4B AD 02 F1 | 	add	local04, arg03
252c4     56 95 02 FB | 	rdlong	arg02, local04
252c8     5B 97 02 F6 | 	mov	arg03, local09
252cc     53 93 02 F6 | 	mov	arg01, local01
252d0     08 46 B0 FD | 	call	#__system__strncmp
252d4     00 7A 4E F2 | 	cmps	result1, #0 wz
252d8     28 01 90 5D |  if_ne	jmp	#LR__3297
252dc     59 BB 02 F6 | 	mov	local11, local07
252e0     02 BA 66 F0 | 	shl	local11, #2
252e4     34 AD 02 F6 | 	mov	local04, ptr___system__dat__
252e8     74 AC 06 F1 | 	add	local04, #116
252ec     56 BB 02 F1 | 	add	local11, local04
252f0     5D BD 02 FB | 	rdlong	local12, local11
252f4     D7 22 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
252f8                 | LR__3290
252f8     5B B1 02 F6 | 	mov	local06, local09
252fc     01 B0 06 F1 | 	add	local06, #1
25300     53 B1 02 F1 | 	add	local06, local01
25304     58 BB C2 FA | 	rdbyte	local11, local06
25308     2E BA 0E F2 | 	cmp	local11, #46 wz
2530c     2C 00 90 5D |  if_ne	jmp	#LR__3292
25310     5B BB 02 F6 | 	mov	local11, local09
25314     02 BA 06 F1 | 	add	local11, #2
25318     53 BB 02 F1 | 	add	local11, local01
2531c     5D B9 C2 FA | 	rdbyte	local10, local11
25320     2F B8 0E F2 | 	cmp	local10, #47 wz
25324     5B BF 02 56 |  if_ne	mov	local13, local09
25328     02 BE 06 51 |  if_ne	add	local13, #2
2532c     53 BF 02 51 |  if_ne	add	local13, local01
25330     5F C1 CA 5A |  if_ne	rdbyte	local14, local13 wz
25334     01 B6 06 A1 |  if_e	add	local09, #1
25338     BC FF 9F AD |  if_e	jmp	#LR__3290
2533c                 | LR__3291
2533c                 | LR__3292
2533c     00 AA 0E F2 | 	cmp	local03, #0 wz
25340     55 93 02 56 |  if_ne	mov	arg01, local03
25344     53 95 02 56 |  if_ne	mov	arg02, local01
25348     00 97 06 56 |  if_ne	mov	arg03, #256
2534c     D0 44 B0 5D |  if_ne	call	#__system__strncpy
25350     53 95 02 F6 | 	mov	arg02, local01
25354     5B 95 02 F1 | 	add	arg02, local09
25358     01 94 06 F1 | 	add	arg02, #1
2535c     53 93 02 F6 | 	mov	arg01, local01
25360     2C F6 BF FD | 	call	#__system____builtin_strcpy
25364     53 93 02 F6 | 	mov	arg01, local01
25368     49 B5 02 F6 | 	mov	local08, arg01
2536c     D7 06 48 FB | 	callpa	#(@LR__3294-@LR__3293)>>2,fcache_load_ptr_
25370                 | LR__3293
25370     5A 7B CA FA | 	rdbyte	result1, local08 wz
25374     01 B4 06 51 |  if_ne	add	local08, #1
25378     F4 FF 9F 5D |  if_ne	jmp	#LR__3293
2537c                 | LR__3294
2537c     49 B5 82 F1 | 	sub	local08, arg01
25380     5A B7 02 F6 | 	mov	local09, local08
25384                 | LR__3295
25384     01 B6 56 F2 | 	cmps	local09, #1 wc
25388     70 00 90 CD |  if_b	jmp	#LR__3296
2538c     5B AD 02 F6 | 	mov	local04, local09
25390     53 AD 02 F1 | 	add	local04, local01
25394     56 BB C2 FA | 	rdbyte	local11, local04
25398     2F BA 0E F2 | 	cmp	local11, #47 wz
2539c     5B BB 02 A6 |  if_e	mov	local11, local09
253a0     53 BB 02 A1 |  if_e	add	local11, local01
253a4     5D 01 48 AC |  if_e	wrbyte	#0, local11
253a8     01 B6 86 A1 |  if_e	sub	local09, #1
253ac     D4 FF 9F AD |  if_e	jmp	#LR__3295
253b0     5B AD 02 F6 | 	mov	local04, local09
253b4     53 AD 02 F1 | 	add	local04, local01
253b8     56 BB C2 FA | 	rdbyte	local11, local04
253bc     2E BA 0E F2 | 	cmp	local11, #46 wz
253c0     38 00 90 5D |  if_ne	jmp	#LR__3296
253c4     02 B6 56 F2 | 	cmps	local09, #2 wc
253c8     30 00 90 CD |  if_b	jmp	#LR__3296
253cc     5B C1 02 F6 | 	mov	local14, local09
253d0     01 C0 86 F1 | 	sub	local14, #1
253d4     53 C1 02 F1 | 	add	local14, local01
253d8     60 AF C2 FA | 	rdbyte	local05, local14
253dc     2F AE 0E F2 | 	cmp	local05, #47 wz
253e0     18 00 90 5D |  if_ne	jmp	#LR__3296
253e4     5B AD 02 F6 | 	mov	local04, local09
253e8     01 AC 86 F1 | 	sub	local04, #1
253ec     53 AD 02 F1 | 	add	local04, local01
253f0     56 01 48 FC | 	wrbyte	#0, local04
253f4     02 B6 86 F1 | 	sub	local09, #2
253f8     88 FF 9F FD | 	jmp	#LR__3295
253fc                 | LR__3296
253fc     5E 7B 02 F6 | 	mov	result1, local12
25400     1C 00 90 FD | 	jmp	#LR__3300
25404                 | LR__3297
25404                 | LR__3298
25404     01 B2 06 F1 | 	add	local07, #1
25408     2C FE 9F FD | 	jmp	#LR__3287
2540c                 | LR__3299
2540c     02 00 00 FF 
25410     28 69 06 F1 | 	add	ptr___system__dat__, ##1320
25414     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
25418     02 00 00 FF 
2541c     28 69 86 F1 | 	sub	ptr___system__dat__, ##1320
25420                 | LR__3300
25420     E7 F0 03 F6 | 	mov	ptra, fp
25424     F2 00 A0 FD | 	call	#popregs_
25428                 | __system____getvfsforfile_ret
25428     2D 00 64 FD | 	ret
2542c                 | 
2542c                 | __system___basic_open
2542c     05 CA 05 F6 | 	mov	COUNT_, #5
25430     E8 00 A0 FD | 	call	#pushregs_
25434     4A A7 02 F6 | 	mov	local01, arg02
25438     4B A9 02 F6 | 	mov	local02, arg03
2543c     4C AB 02 F6 | 	mov	local03, arg04
25440     00 AC 06 F6 | 	mov	local04, #0
25444     B4 43 B0 FD | 	call	#__system____getftab
25448     3D AF 0A F6 | 	mov	local05, result1 wz
2544c     18 00 90 5D |  if_ne	jmp	#LR__3310
25450     2E 93 02 F6 | 	mov	arg01, abortchain
25454     0C 94 06 F6 | 	mov	arg02, #12
25458     01 96 06 F6 | 	mov	arg03, #1
2545c     1A 01 A0 FD | 	call	#__longjmp
25460     01 7A 66 F6 | 	neg	result1, #1
25464     18 01 90 FD | 	jmp	#LR__3319
25468                 | LR__3310
25468     08 AE 06 F1 | 	add	local05, #8
2546c     57 7B 0A FB | 	rdlong	result1, local05 wz
25470     08 AE 86 F1 | 	sub	local05, #8
25474     57 93 02 56 |  if_ne	mov	arg01, local05
25478     D8 3A B0 5D |  if_ne	call	#__system___closeraw
2547c     00 A6 0E F2 | 	cmp	local01, #0 wz
25480     00 A8 0E A2 |  if_e	cmp	local02, #0 wz
25484     00 AA 0E A2 |  if_e	cmp	local03, #0 wz
25488     3C 00 90 AD |  if_e	jmp	#LR__3312
2548c     0C 92 06 F6 | 	mov	arg01, #12
25490     50 2F B0 FD | 	call	#__system___gc_alloc_managed
25494     3D AD 0A F6 | 	mov	local04, result1 wz
25498     18 00 90 5D |  if_ne	jmp	#LR__3311
2549c     2E 93 02 F6 | 	mov	arg01, abortchain
254a0     07 94 06 F6 | 	mov	arg02, #7
254a4     01 96 06 F6 | 	mov	arg03, #1
254a8     1A 01 A0 FD | 	call	#__longjmp
254ac     01 7A 66 F6 | 	neg	result1, #1
254b0     CC 00 90 FD | 	jmp	#LR__3319
254b4                 | LR__3311
254b4     56 01 68 FC | 	wrlong	#0, local04
254b8     04 AC 06 F1 | 	add	local04, #4
254bc     56 01 68 FC | 	wrlong	#0, local04
254c0     04 AC 86 F1 | 	sub	local04, #4
254c4     57 AD 62 FC | 	wrlong	local04, local05
254c8                 | LR__3312
254c8     00 A6 0E F2 | 	cmp	local01, #0 wz
254cc     20 00 90 AD |  if_e	jmp	#LR__3313
254d0     56 A7 62 FC | 	wrlong	local01, local04
254d4     56 7B 02 F6 | 	mov	result1, local04
254d8     00 70 05 FF 
254dc     00 7A 46 F5 | 	or	result1, ##182452224
254e0     1C AE 06 F1 | 	add	local05, #28
254e4     57 7B 62 FC | 	wrlong	result1, local05
254e8     1C AE 86 F1 | 	sub	local05, #28
254ec     0C 00 90 FD | 	jmp	#LR__3314
254f0                 | LR__3313
254f0     1C AE 06 F1 | 	add	local05, #28
254f4     57 01 68 FC | 	wrlong	#0, local05
254f8     1C AE 86 F1 | 	sub	local05, #28
254fc                 | LR__3314
254fc     00 A8 0E F2 | 	cmp	local02, #0 wz
25500     28 00 90 AD |  if_e	jmp	#LR__3315
25504     04 AC 06 F1 | 	add	local04, #4
25508     56 A9 62 FC | 	wrlong	local02, local04
2550c     04 AC 86 F1 | 	sub	local04, #4
25510     56 7B 02 F6 | 	mov	result1, local04
25514     00 78 05 FF 
25518     00 7A 46 F5 | 	or	result1, ##183500800
2551c     20 AE 06 F1 | 	add	local05, #32
25520     57 7B 62 FC | 	wrlong	result1, local05
25524     20 AE 86 F1 | 	sub	local05, #32
25528     0C 00 90 FD | 	jmp	#LR__3316
2552c                 | LR__3315
2552c     20 AE 06 F1 | 	add	local05, #32
25530     57 01 68 FC | 	wrlong	#0, local05
25534     20 AE 86 F1 | 	sub	local05, #32
25538                 | LR__3316
25538     00 AA 0E F2 | 	cmp	local03, #0 wz
2553c     24 00 90 AD |  if_e	jmp	#LR__3317
25540     08 AC 06 F1 | 	add	local04, #8
25544     56 AB 62 FC | 	wrlong	local03, local04
25548     08 AC 86 F1 | 	sub	local04, #8
2554c     00 80 05 FF 
25550     00 AC 46 F5 | 	or	local04, ##184549376
25554     24 AE 06 F1 | 	add	local05, #36
25558     57 AD 62 FC | 	wrlong	local04, local05
2555c     24 AE 86 F1 | 	sub	local05, #36
25560     0C 00 90 FD | 	jmp	#LR__3318
25564                 | LR__3317
25564     24 AE 06 F1 | 	add	local05, #36
25568     57 01 68 FC | 	wrlong	#0, local05
2556c     24 AE 86 F1 | 	sub	local05, #36
25570                 | LR__3318
25570     08 AE 06 F1 | 	add	local05, #8
25574     40 00 80 FF 
25578     57 07 68 FC | 	wrlong	##32771, local05
2557c     00 7A 06 F6 | 	mov	result1, #0
25580                 | LR__3319
25580     E7 F0 03 F6 | 	mov	ptra, fp
25584     F2 00 A0 FD | 	call	#popregs_
25588                 | __system___basic_open_ret
25588     2D 00 64 FD | 	ret
2558c                 | 
2558c                 | __system___basic_open_string
2558c     04 CA 05 F6 | 	mov	COUNT_, #4
25590     E8 00 A0 FD | 	call	#pushregs_
25594     4A A7 02 F6 | 	mov	local01, arg02
25598     4B A9 02 F6 | 	mov	local02, arg03
2559c     5C 42 B0 FD | 	call	#__system____getftab
255a0     3D AB 0A F6 | 	mov	local03, result1 wz
255a4     18 00 90 5D |  if_ne	jmp	#LR__3320
255a8     2E 93 02 F6 | 	mov	arg01, abortchain
255ac     0C 94 06 F6 | 	mov	arg02, #12
255b0     01 96 06 F6 | 	mov	arg03, #1
255b4     1A 01 A0 FD | 	call	#__longjmp
255b8     01 7A 66 F6 | 	neg	result1, #1
255bc     58 00 90 FD | 	jmp	#LR__3322
255c0                 | LR__3320
255c0     08 AA 06 F1 | 	add	local03, #8
255c4     55 99 0A FB | 	rdlong	arg04, local03 wz
255c8     08 AA 86 F1 | 	sub	local03, #8
255cc     55 93 02 56 |  if_ne	mov	arg01, local03
255d0     80 39 B0 5D |  if_ne	call	#__system___closeraw
255d4     53 95 02 F6 | 	mov	arg02, local01
255d8     54 97 02 F6 | 	mov	arg03, local02
255dc     55 93 02 F6 | 	mov	arg01, local03
255e0     B6 99 06 F6 | 	mov	arg04, #438
255e4     1C 36 B0 FD | 	call	#__system___openraw
255e8     3D AD 02 F6 | 	mov	local04, result1
255ec     00 AC 56 F2 | 	cmps	local04, #0 wc
255f0     20 00 90 3D |  if_ae	jmp	#LR__3321
255f4     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
255f8     20 7A 06 F1 | 	add	result1, #32
255fc     2E 93 02 F6 | 	mov	arg01, abortchain
25600     3D 95 02 FB | 	rdlong	arg02, result1
25604     01 96 06 F6 | 	mov	arg03, #1
25608     1A 01 A0 FD | 	call	#__longjmp
2560c     01 7A 66 F6 | 	neg	result1, #1
25610     04 00 90 FD | 	jmp	#LR__3322
25614                 | LR__3321
25614     56 7B 02 F6 | 	mov	result1, local04
25618                 | LR__3322
25618     E7 F0 03 F6 | 	mov	ptra, fp
2561c     F2 00 A0 FD | 	call	#popregs_
25620                 | __system___basic_open_string_ret
25620     2D 00 64 FD | 	ret
25624                 | 
25624                 | __system___find_free_file
25624     34 81 02 F6 | 	mov	_var01, ptr___system__dat__
25628     02 00 00 FF 
2562c     2C 81 06 F1 | 	add	_var01, ##1324
25630     00 82 06 F6 | 	mov	_var02, #0
25634     D7 12 48 FB | 	callpa	#(@LR__3331-@LR__3330)>>2,fcache_load_ptr_
25638                 | LR__3330
25638     0A 82 56 F2 | 	cmps	_var02, #10 wc
2563c     1C 00 90 3D |  if_ae	jmp	#LR__3332
25640     34 82 06 FD | 	qmul	_var02, #52
25644     18 7A 62 FD | 	getqx	result1
25648     40 7B 02 F1 | 	add	result1, _var01
2564c     08 7A 06 F1 | 	add	result1, #8
25650     3D 7B 0A FB | 	rdlong	result1, result1 wz
25654     01 82 06 51 |  if_ne	add	_var02, #1
25658     DC FF 9F 5D |  if_ne	jmp	#LR__3330
2565c                 | LR__3331
2565c                 | LR__3332
2565c     0A 82 0E F2 | 	cmp	_var02, #10 wz
25660     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
25664     34 17 68 AC |  if_e	wrlong	#11, ptr___system__dat__
25668     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2566c     01 7A 66 A6 |  if_e	neg	result1, #1
25670     41 7B 02 56 |  if_ne	mov	result1, _var02
25674                 | __system___find_free_file_ret
25674     2D 00 64 FD | 	ret
25678                 | 
25678                 | __system___basic_print_char
25678     03 CA 05 F6 | 	mov	COUNT_, #3
2567c     E8 00 A0 FD | 	call	#pushregs_
25680     4A A7 02 F6 | 	mov	local01, arg02
25684     20 49 B0 FD | 	call	#__system___gettxfunc
25688     3D A9 0A F6 | 	mov	local02, result1 wz
2568c     00 7A 06 A6 |  if_e	mov	result1, #0
25690     30 00 90 AD |  if_e	jmp	#LR__3340
25694     54 AB 02 F6 | 	mov	local03, local02
25698     13 A8 46 F7 | 	zerox	local02, #19
2569c     14 AA 46 F0 | 	shr	local03, #20
256a0     02 AA 66 F0 | 	shl	local03, #2
256a4     2D AB 02 F1 | 	add	local03, __methods__
256a8     55 AB 02 FB | 	rdlong	local03, local03
256ac     53 93 02 F6 | 	mov	arg01, local01
256b0     32 A7 02 F6 | 	mov	local01, objptr
256b4     54 65 02 F6 | 	mov	objptr, local02
256b8     2D AA 62 FD | 	call	local03
256bc     53 65 02 F6 | 	mov	objptr, local01
256c0     01 7A 06 F6 | 	mov	result1, #1
256c4                 | LR__3340
256c4     E7 F0 03 F6 | 	mov	ptra, fp
256c8     F2 00 A0 FD | 	call	#popregs_
256cc                 | __system___basic_print_char_ret
256cc     2D 00 64 FD | 	ret
256d0                 | 
256d0                 | __system___basic_print_string
256d0     03 CA 05 F6 | 	mov	COUNT_, #3
256d4     E8 00 A0 FD | 	call	#pushregs_
256d8     4A A7 02 F6 | 	mov	local01, arg02
256dc     4B A9 02 F6 | 	mov	local02, arg03
256e0     C4 48 B0 FD | 	call	#__system___gettxfunc
256e4     3D AB 0A F6 | 	mov	local03, result1 wz
256e8     00 7A 06 A6 |  if_e	mov	result1, #0
256ec     18 00 90 AD |  if_e	jmp	#LR__3350
256f0     00 A6 0E F2 | 	cmp	local01, #0 wz
256f4     00 7A 06 A6 |  if_e	mov	result1, #0
256f8     55 93 02 56 |  if_ne	mov	arg01, local03
256fc     54 95 02 56 |  if_ne	mov	arg02, local02
25700     53 97 02 56 |  if_ne	mov	arg03, local01
25704     FC 01 B0 5D |  if_ne	call	#__system___fmtstr
25708                 | LR__3350
25708     E7 F0 03 F6 | 	mov	ptra, fp
2570c     F2 00 A0 FD | 	call	#popregs_
25710                 | __system___basic_print_string_ret
25710     2D 00 64 FD | 	ret
25714                 | 
25714                 | __system___basic_print_integer
25714     04 CA 05 F6 | 	mov	COUNT_, #4
25718     E8 00 A0 FD | 	call	#pushregs_
2571c     4A A7 02 F6 | 	mov	local01, arg02
25720     4B A9 02 F6 | 	mov	local02, arg03
25724     4C AB 02 F6 | 	mov	local03, arg04
25728     7C 48 B0 FD | 	call	#__system___gettxfunc
2572c     3D AD 0A F6 | 	mov	local04, result1 wz
25730     00 7A 06 A6 |  if_e	mov	result1, #0
25734     56 93 02 56 |  if_ne	mov	arg01, local04
25738     54 95 02 56 |  if_ne	mov	arg02, local02
2573c     53 97 02 56 |  if_ne	mov	arg03, local01
25740     55 99 02 56 |  if_ne	mov	arg04, local03
25744     A8 02 B0 5D |  if_ne	call	#__system___fmtnum
25748     E7 F0 03 F6 | 	mov	ptra, fp
2574c     F2 00 A0 FD | 	call	#popregs_
25750                 | __system___basic_print_integer_ret
25750     2D 00 64 FD | 	ret
25754                 | 
25754                 | __system___basic_print_unsigned
25754     03 CA 05 F6 | 	mov	COUNT_, #3
25758     E8 00 A0 FD | 	call	#pushregs_
2575c     4A A7 02 F6 | 	mov	local01, arg02
25760     4B A9 02 F6 | 	mov	local02, arg03
25764     4C AB 02 F6 | 	mov	local03, arg04
25768     3C 48 B0 FD | 	call	#__system___gettxfunc
2576c     3D 93 0A F6 | 	mov	arg01, result1 wz
25770     00 7A 06 A6 |  if_e	mov	result1, #0
25774     3A A8 26 54 |  if_ne	bith	local02, #58
25778     54 95 02 56 |  if_ne	mov	arg02, local02
2577c     53 97 02 56 |  if_ne	mov	arg03, local01
25780     55 99 02 56 |  if_ne	mov	arg04, local03
25784     68 02 B0 5D |  if_ne	call	#__system___fmtnum
25788     E7 F0 03 F6 | 	mov	ptra, fp
2578c     F2 00 A0 FD | 	call	#popregs_
25790                 | __system___basic_print_unsigned_ret
25790     2D 00 64 FD | 	ret
25794                 | 
25794                 | __system___basic_get_char
25794     03 CA 05 F6 | 	mov	COUNT_, #3
25798     E8 00 A0 FD | 	call	#pushregs_
2579c     4C 48 B0 FD | 	call	#__system___getrxfunc
257a0     3D A7 0A F6 | 	mov	local01, result1 wz
257a4     01 7A 66 A6 |  if_e	neg	result1, #1
257a8     28 00 90 AD |  if_e	jmp	#LR__3360
257ac     53 A9 02 F6 | 	mov	local02, local01
257b0     13 A6 46 F7 | 	zerox	local01, #19
257b4     14 A8 46 F0 | 	shr	local02, #20
257b8     02 A8 66 F0 | 	shl	local02, #2
257bc     2D A9 02 F1 | 	add	local02, __methods__
257c0     54 A9 02 FB | 	rdlong	local02, local02
257c4     32 AB 02 F6 | 	mov	local03, objptr
257c8     53 65 02 F6 | 	mov	objptr, local01
257cc     2D A8 62 FD | 	call	local02
257d0     55 65 02 F6 | 	mov	objptr, local03
257d4                 | LR__3360
257d4     E7 F0 03 F6 | 	mov	ptra, fp
257d8     F2 00 A0 FD | 	call	#popregs_
257dc                 | __system___basic_get_char_ret
257dc     2D 00 64 FD | 	ret
257e0                 | 
257e0                 | __system___basic_put
257e0     04 CA 05 F6 | 	mov	COUNT_, #4
257e4     E8 00 A0 FD | 	call	#pushregs_
257e8     4D A7 02 F6 | 	mov	local01, arg05
257ec     53 99 02 FD | 	qmul	arg04, local01
257f0     49 A9 02 F6 | 	mov	local02, arg01
257f4     4B AB 02 F6 | 	mov	local03, arg03
257f8     00 94 0E F2 | 	cmp	arg02, #0 wz
257fc     18 AC 62 FD | 	getqx	local04
25800     18 00 90 AD |  if_e	jmp	#LR__3370
25804     01 94 86 F1 | 	sub	arg02, #1
25808     4A 97 02 F6 | 	mov	arg03, arg02
2580c     1F 96 C6 F0 | 	sar	arg03, #31
25810     54 93 02 F6 | 	mov	arg01, local02
25814     00 98 06 F6 | 	mov	arg04, #0
25818     E4 3D B0 FD | 	call	#__system__lseek
2581c                 | LR__3370
2581c     55 95 02 F6 | 	mov	arg02, local03
25820     56 97 02 F6 | 	mov	arg03, local04
25824     54 93 02 F6 | 	mov	arg01, local02
25828     FC 3C B0 FD | 	call	#__system__write
2582c     3D AD 02 F6 | 	mov	local04, result1
25830     01 AC 56 F2 | 	cmps	local04, #1 wc
25834     10 00 90 CD |  if_b	jmp	#LR__3371
25838     56 0F 03 F6 | 	mov	muldiva_, local04
2583c     53 11 03 F6 | 	mov	muldivb_, local01
25840     FA 00 A0 FD | 	call	#divide_
25844     88 AD 02 F6 | 	mov	local04, muldivb_
25848                 | LR__3371
25848     56 7B 02 F6 | 	mov	result1, local04
2584c     E7 F0 03 F6 | 	mov	ptra, fp
25850     F2 00 A0 FD | 	call	#popregs_
25854                 | __system___basic_put_ret
25854     2D 00 64 FD | 	ret
25858                 | 
25858                 | __system___basic_get
25858     04 CA 05 F6 | 	mov	COUNT_, #4
2585c     E8 00 A0 FD | 	call	#pushregs_
25860     4D A7 02 F6 | 	mov	local01, arg05
25864     53 99 02 FD | 	qmul	arg04, local01
25868     49 A9 02 F6 | 	mov	local02, arg01
2586c     4B AB 02 F6 | 	mov	local03, arg03
25870     00 94 0E F2 | 	cmp	arg02, #0 wz
25874     18 AC 62 FD | 	getqx	local04
25878     18 00 90 AD |  if_e	jmp	#LR__3380
2587c     01 94 86 F1 | 	sub	arg02, #1
25880     4A 97 02 F6 | 	mov	arg03, arg02
25884     1F 96 C6 F0 | 	sar	arg03, #31
25888     54 93 02 F6 | 	mov	arg01, local02
2588c     00 98 06 F6 | 	mov	arg04, #0
25890     6C 3D B0 FD | 	call	#__system__lseek
25894                 | LR__3380
25894     55 95 02 F6 | 	mov	arg02, local03
25898     56 97 02 F6 | 	mov	arg03, local04
2589c     54 93 02 F6 | 	mov	arg01, local02
258a0     CC 3C B0 FD | 	call	#__system__read
258a4     3D AD 02 F6 | 	mov	local04, result1
258a8     01 AC 56 F2 | 	cmps	local04, #1 wc
258ac     10 00 90 CD |  if_b	jmp	#LR__3381
258b0     56 0F 03 F6 | 	mov	muldiva_, local04
258b4     53 11 03 F6 | 	mov	muldivb_, local01
258b8     FA 00 A0 FD | 	call	#divide_
258bc     88 AD 02 F6 | 	mov	local04, muldivb_
258c0                 | LR__3381
258c0     56 7B 02 F6 | 	mov	result1, local04
258c4     E7 F0 03 F6 | 	mov	ptra, fp
258c8     F2 00 A0 FD | 	call	#popregs_
258cc                 | __system___basic_get_ret
258cc     2D 00 64 FD | 	ret
258d0                 | 
258d0                 | __system___fmtchar
258d0     00 CA 05 F6 | 	mov	COUNT_, #0
258d4     E8 00 A0 FD | 	call	#pushregs_
258d8     10 F0 07 F1 | 	add	ptra, #16
258dc     0C CE 05 F1 | 	add	fp, #12
258e0     E7 96 62 FC | 	wrlong	arg03, fp
258e4     4B 97 E2 F8 | 	getbyte	arg03, arg03, #0
258e8     E7 96 62 FC | 	wrlong	arg03, fp
258ec     E7 96 02 F6 | 	mov	arg03, fp
258f0     0C CE 85 F1 | 	sub	fp, #12
258f4     0C 00 B0 FD | 	call	#__system___fmtstr
258f8     E7 F0 03 F6 | 	mov	ptra, fp
258fc     F2 00 A0 FD | 	call	#popregs_
25900                 | __system___fmtchar_ret
25900     2D 00 64 FD | 	ret
25904                 | 
25904                 | __system___fmtstr
25904     09 CA 05 F6 | 	mov	COUNT_, #9
25908     E8 00 A0 FD | 	call	#pushregs_
2590c     49 A7 02 F6 | 	mov	local01, arg01
25910     4A A9 02 F6 | 	mov	local02, arg02
25914     4B AB 02 F6 | 	mov	local03, arg03
25918     54 99 E2 F8 | 	getbyte	arg04, local02, #0
2591c     55 93 02 F6 | 	mov	arg01, local03
25920     49 AD 02 F6 | 	mov	local04, arg01
25924     D7 06 48 FB | 	callpa	#(@LR__3391-@LR__3390)>>2,fcache_load_ptr_
25928                 | LR__3390
25928     56 7B CA FA | 	rdbyte	result1, local04 wz
2592c     01 AC 06 51 |  if_ne	add	local04, #1
25930     F4 FF 9F 5D |  if_ne	jmp	#LR__3390
25934                 | LR__3391
25934     49 AD 82 F1 | 	sub	local04, arg01
25938     00 98 0E F2 | 	cmp	arg04, #0 wz
2593c     4C AD 7A 53 |  if_ne	fles	local04, arg04 wcz
25940     54 95 02 F6 | 	mov	arg02, local02
25944     56 97 02 F6 | 	mov	arg03, local04
25948     53 93 02 F6 | 	mov	arg01, local01
2594c     02 98 06 F6 | 	mov	arg04, #2
25950     AC 42 B0 FD | 	call	#__system___fmtpad
25954     3D AF 02 F6 | 	mov	local05, result1
25958     00 AE 56 F2 | 	cmps	local05, #0 wc
2595c     57 7B 02 C6 |  if_b	mov	result1, local05
25960     80 00 90 CD |  if_b	jmp	#LR__3394
25964     01 AC 56 F2 | 	cmps	local04, #1 wc
25968     50 00 90 CD |  if_b	jmp	#LR__3393
2596c     56 B1 02 F6 | 	mov	local06, local04
25970                 | LR__3392
25970     53 B3 02 F6 | 	mov	local07, local01
25974     53 B5 02 F6 | 	mov	local08, local01
25978     13 B2 46 F7 | 	zerox	local07, #19
2597c     14 B4 46 F0 | 	shr	local08, #20
25980     02 B4 66 F0 | 	shl	local08, #2
25984     2D B5 02 F1 | 	add	local08, __methods__
25988     5A B5 02 FB | 	rdlong	local08, local08
2598c     55 93 C2 FA | 	rdbyte	arg01, local03
25990     32 B7 02 F6 | 	mov	local09, objptr
25994     59 65 02 F6 | 	mov	objptr, local07
25998     01 AA 06 F1 | 	add	local03, #1
2599c     2D B4 62 FD | 	call	local08
259a0     5B 65 02 F6 | 	mov	objptr, local09
259a4     3D B7 02 F6 | 	mov	local09, result1
259a8     00 B6 56 F2 | 	cmps	local09, #0 wc
259ac     5B 7B 02 C6 |  if_b	mov	result1, local09
259b0     30 00 90 CD |  if_b	jmp	#LR__3394
259b4     5B AF 02 F1 | 	add	local05, local09
259b8     ED B1 6E FB | 	djnz	local06, #LR__3392
259bc                 | LR__3393
259bc     54 95 02 F6 | 	mov	arg02, local02
259c0     56 97 02 F6 | 	mov	arg03, local04
259c4     53 93 02 F6 | 	mov	arg01, local01
259c8     01 98 06 F6 | 	mov	arg04, #1
259cc     30 42 B0 FD | 	call	#__system___fmtpad
259d0     3D B7 02 F6 | 	mov	local09, result1
259d4     00 B6 56 F2 | 	cmps	local09, #0 wc
259d8     5B 7B 02 C6 |  if_b	mov	result1, local09
259dc     5B AF 02 31 |  if_ae	add	local05, local09
259e0     57 7B 02 36 |  if_ae	mov	result1, local05
259e4                 | LR__3394
259e4     E7 F0 03 F6 | 	mov	ptra, fp
259e8     F2 00 A0 FD | 	call	#popregs_
259ec                 | __system___fmtstr_ret
259ec     2D 00 64 FD | 	ret
259f0                 | 
259f0                 | __system___fmtnum
259f0     0B CA 05 F6 | 	mov	COUNT_, #11
259f4     E8 00 A0 FD | 	call	#pushregs_
259f8     49 A7 02 F6 | 	mov	local01, arg01
259fc     4A A9 02 F6 | 	mov	local02, arg02
25a00     4B AB 02 F6 | 	mov	local03, arg03
25a04     4C AD 02 F6 | 	mov	local04, arg04
25a08     F8 AF 02 F6 | 	mov	local05, ptra
25a0c     57 B1 02 F6 | 	mov	local06, local05
25a10     00 B2 06 F6 | 	mov	local07, #0
25a14     54 B5 02 F6 | 	mov	local08, local02
25a18     10 B4 46 F0 | 	shr	local08, #16
25a1c     3F B4 06 F5 | 	and	local08, #63
25a20     54 B7 E2 F8 | 	getbyte	local09, local02, #0
25a24     54 B9 02 F6 | 	mov	local10, local02
25a28     1A B8 46 F0 | 	shr	local10, #26
25a2c     03 B8 06 F5 | 	and	local10, #3
25a30     5C BB 02 F6 | 	mov	local11, local10
25a34     01 B4 56 F2 | 	cmps	local08, #1 wc
25a38     44 F0 07 F1 | 	add	ptra, #68
25a3c     01 B4 86 31 |  if_ae	sub	local08, #1
25a40     41 B6 56 F2 | 	cmps	local09, #65 wc
25a44     00 B6 0E C2 |  if_b	cmp	local09, #0 wz
25a48     40 B6 06 B6 |  if_nc_or_z	mov	local09, #64
25a4c     03 BA 0E F2 | 	cmp	local11, #3 wz
25a50     00 BA 06 A6 |  if_e	mov	local11, #0
25a54     00 AA 56 52 |  if_ne	cmps	local03, #0 wc
25a58     04 BA 06 46 |  if_c_and_nz	mov	local11, #4
25a5c     55 AB 62 46 |  if_c_and_nz	neg	local03, local03
25a60     00 BA 0E F2 | 	cmp	local11, #0 wz
25a64     4C 00 90 AD |  if_e	jmp	#LR__3403
25a68     01 B2 06 F6 | 	mov	local07, #1
25a6c     5B B5 0A F2 | 	cmp	local08, local09 wz
25a70     18 00 90 5D |  if_ne	jmp	#LR__3401
25a74     05 B4 6E FB | 	djnz	local08, #LR__3400
25a78     53 93 02 F6 | 	mov	arg01, local01
25a7c     54 95 02 F6 | 	mov	arg02, local02
25a80     23 96 06 F6 | 	mov	arg03, #35
25a84     48 FE BF FD | 	call	#__system___fmtchar
25a88     8C 00 90 FD | 	jmp	#LR__3407
25a8c                 | LR__3400
25a8c                 | LR__3401
25a8c     02 BA 0E F2 | 	cmp	local11, #2 wz
25a90     58 B9 02 A6 |  if_e	mov	local10, local06
25a94     01 B0 06 A1 |  if_e	add	local06, #1
25a98     5C 41 48 AC |  if_e	wrbyte	#32, local10
25a9c     14 00 90 AD |  if_e	jmp	#LR__3402
25aa0     04 BA 0E F2 | 	cmp	local11, #4 wz
25aa4     58 5B 48 AC |  if_e	wrbyte	#45, local06
25aa8     01 B0 06 A1 |  if_e	add	local06, #1
25aac     58 57 48 5C |  if_ne	wrbyte	#43, local06
25ab0     01 B0 06 51 |  if_ne	add	local06, #1
25ab4                 | LR__3402
25ab4                 | LR__3403
25ab4     59 B9 02 F6 | 	mov	local10, local07
25ab8     58 93 02 F6 | 	mov	arg01, local06
25abc     55 95 02 F6 | 	mov	arg02, local03
25ac0     56 97 02 F6 | 	mov	arg03, local04
25ac4     5A 99 02 F6 | 	mov	arg04, local08
25ac8     00 9A 06 F6 | 	mov	arg05, #0
25acc     1D A8 2E F4 | 	testbn	local02, #29 wz
25ad0     01 9A 06 56 |  if_ne	mov	arg05, #1
25ad4     F0 41 B0 FD | 	call	#__system___uitoa
25ad8     3D B9 02 F1 | 	add	local10, result1
25adc     5B B9 5A F2 | 	cmps	local10, local09 wcz
25ae0     24 00 90 ED |  if_be	jmp	#LR__3406
25ae4     D7 0E 48 FB | 	callpa	#(@LR__3405-@LR__3404)>>2,fcache_load_ptr_
25ae8                 | LR__3404
25ae8     5B B9 02 F6 | 	mov	local10, local09
25aec     01 B8 56 F2 | 	cmps	local10, #1 wc
25af0     01 B6 86 F1 | 	sub	local09, #1
25af4     58 B9 02 36 |  if_ae	mov	local10, local06
25af8     01 B0 06 31 |  if_ae	add	local06, #1
25afc     5C 47 48 3C |  if_ae	wrbyte	#35, local10
25b00     E4 FF 9F 3D |  if_ae	jmp	#LR__3404
25b04                 | LR__3405
25b04     58 01 48 FC | 	wrbyte	#0, local06
25b08                 | LR__3406
25b08     53 93 02 F6 | 	mov	arg01, local01
25b0c     54 95 02 F6 | 	mov	arg02, local02
25b10     57 97 02 F6 | 	mov	arg03, local05
25b14     EC FD BF FD | 	call	#__system___fmtstr
25b18                 | LR__3407
25b18     E7 F0 03 F6 | 	mov	ptra, fp
25b1c     F2 00 A0 FD | 	call	#popregs_
25b20                 | __system___fmtnum_ret
25b20     2D 00 64 FD | 	ret
25b24                 | 
25b24                 | __system___fmtfloat
25b24     29 CA 05 F6 | 	mov	COUNT_, #41
25b28     E8 00 A0 FD | 	call	#pushregs_
25b2c     24 F1 07 F1 | 	add	ptra, #292
25b30     49 A7 02 F6 | 	mov	local01, arg01
25b34     4A A9 02 F6 | 	mov	local02, arg02
25b38     4B AB 02 F6 | 	mov	local03, arg03
25b3c     4C AD 02 F6 | 	mov	local04, arg04
25b40     0A AE 06 F6 | 	mov	local05, #10
25b44     00 B0 06 F6 | 	mov	local06, #0
25b48     00 B2 06 F6 | 	mov	local07, #0
25b4c     02 B4 06 F6 | 	mov	local08, #2
25b50     00 B6 06 F6 | 	mov	local09, #0
25b54     00 B8 06 F6 | 	mov	local10, #0
25b58     00 BA 06 F6 | 	mov	local11, #0
25b5c     E7 BC 02 F6 | 	mov	local12, fp
25b60     C8 BC 06 F1 | 	add	local12, #200
25b64     5E BF 02 F6 | 	mov	local13, local12
25b68     54 C1 02 F6 | 	mov	local14, local02
25b6c     10 C0 46 F0 | 	shr	local14, #16
25b70     3F C0 0E F5 | 	and	local14, #63 wz
25b74     54 C3 02 F6 | 	mov	local15, local02
25b78     1C C2 46 F0 | 	shr	local15, #28
25b7c     01 C2 06 F5 | 	and	local15, #1
25b80     18 00 90 5D |  if_ne	jmp	#LR__3410
25b84     61 AC 0E F2 | 	cmp	local04, #97 wz
25b88     0D C0 06 A6 |  if_e	mov	local14, #13
25b8c     01 B2 06 A6 |  if_e	mov	local07, #1
25b90     0C 00 90 AD |  if_e	jmp	#LR__3411
25b94     06 C0 06 F6 | 	mov	local14, #6
25b98     04 00 90 FD | 	jmp	#LR__3411
25b9c                 | LR__3410
25b9c     01 C0 86 F1 | 	sub	local14, #1
25ba0                 | LR__3411
25ba0     54 C5 02 F6 | 	mov	local16, local02
25ba4     16 C4 46 F0 | 	shr	local16, #22
25ba8     03 C4 06 F5 | 	and	local16, #3
25bac     54 C7 02 F6 | 	mov	local17, local02
25bb0     1D C6 46 F0 | 	shr	local17, #29
25bb4     01 C6 06 F5 | 	and	local17, #1
25bb8     54 C9 EA F8 | 	getbyte	local18, local02, #1
25bbc     54 CB E2 F8 | 	getbyte	local19, local02, #0
25bc0     65 AC 0E F2 | 	cmp	local04, #101 wz
25bc4     6E CC 62 FD | 	wrz	local20
25bc8     66 CF 02 F6 | 	mov	local21, local20
25bcc     00 C6 0E F2 | 	cmp	local17, #0 wz
25bd0     45 CC 06 56 |  if_ne	mov	local20, #69
25bd4     65 CC 06 A6 |  if_e	mov	local20, #101
25bd8     66 D1 02 F6 | 	mov	local22, local20
25bdc     61 AC 0E F2 | 	cmp	local04, #97 wz
25be0     2C 00 90 5D |  if_ne	jmp	#LR__3412
25be4     01 CE 06 F6 | 	mov	local21, #1
25be8     00 C6 0E F2 | 	cmp	local17, #0 wz
25bec     50 CC 06 56 |  if_ne	mov	local20, #80
25bf0     70 CC 06 A6 |  if_e	mov	local20, #112
25bf4     66 D1 02 F6 | 	mov	local22, local20
25bf8     02 AE 06 F6 | 	mov	local05, #2
25bfc     01 B4 06 F6 | 	mov	local08, #1
25c00     00 C6 0E F2 | 	cmp	local17, #0 wz
25c04     58 CC 06 56 |  if_ne	mov	local20, #88
25c08     78 CC 06 A6 |  if_e	mov	local20, #120
25c0c     66 B7 02 F6 | 	mov	local09, local20
25c10                 | LR__3412
25c10     23 AC 0E F2 | 	cmp	local04, #35 wz
25c14     14 00 90 5D |  if_ne	jmp	#LR__3413
25c18     01 B8 06 F6 | 	mov	local10, #1
25c1c     00 C2 0E F2 | 	cmp	local15, #0 wz
25c20     66 AC 06 56 |  if_ne	mov	local04, #102
25c24     00 C2 06 56 |  if_ne	mov	local15, #0
25c28     01 C2 06 A6 |  if_e	mov	local15, #1
25c2c                 | LR__3413
25c2c     54 D3 02 F6 | 	mov	local23, local02
25c30     1A D2 46 F0 | 	shr	local23, #26
25c34     03 D2 06 F5 | 	and	local23, #3
25c38     55 7B 02 F6 | 	mov	result1, local03
25c3c     1F 7A 4E F0 | 	shr	result1, #31 wz
25c40     2D B0 06 56 |  if_ne	mov	local06, #45
25c44     1F AA E6 54 |  if_ne	bitnot	local03, #31
25c48     14 00 90 5D |  if_ne	jmp	#LR__3415
25c4c     01 D2 0E F2 | 	cmp	local23, #1 wz
25c50     2B B0 06 A6 |  if_e	mov	local06, #43
25c54     08 00 90 AD |  if_e	jmp	#LR__3414
25c58     02 D2 0E F2 | 	cmp	local23, #2 wz
25c5c     20 B0 06 A6 |  if_e	mov	local06, #32
25c60                 | LR__3414
25c60                 | LR__3415
25c60     54 D5 02 F6 | 	mov	local24, local02
25c64     18 D4 46 F0 | 	shr	local24, #24
25c68     03 D4 06 F5 | 	and	local24, #3
25c6c     00 CC 06 F6 | 	mov	local20, #0
25c70     00 B0 0E F2 | 	cmp	local06, #0 wz
25c74     0A AE 0E A2 |  if_e	cmp	local05, #10 wz
25c78     01 CC 06 56 |  if_ne	mov	local20, #1
25c7c     66 D7 0A F6 | 	mov	local25, local20 wz
25c80     60 00 90 AD |  if_e	jmp	#LR__3417
25c84     02 D4 0E F2 | 	cmp	local24, #2 wz
25c88     58 00 90 5D |  if_ne	jmp	#LR__3417
25c8c     02 C4 0E F2 | 	cmp	local16, #2 wz
25c90     50 00 90 AD |  if_e	jmp	#LR__3417
25c94     58 95 02 F6 | 	mov	arg02, local06
25c98     5B D9 02 F6 | 	mov	local26, local09
25c9c     5E 93 02 F6 | 	mov	arg01, local12
25ca0     6C 97 02 F6 | 	mov	arg03, local26
25ca4     88 42 B0 FD | 	call	#__system__emitsign_0584
25ca8     3D DB 02 F6 | 	mov	local27, result1
25cac     00 DA 56 F2 | 	cmps	local27, #0 wc
25cb0     6D 7B 02 C6 |  if_b	mov	result1, local27
25cb4     C0 05 90 CD |  if_b	jmp	#LR__3460
25cb8     6D DD 02 F6 | 	mov	local28, local27
25cbc     6D BD 02 F1 | 	add	local12, local27
25cc0     00 C8 0E F2 | 	cmp	local18, #0 wz
25cc4     18 00 90 AD |  if_e	jmp	#LR__3416
25cc8     6D C9 82 F1 | 	sub	local18, local27
25ccc     00 C8 56 F3 | 	fges	local18, #0 wc
25cd0     E8 A8 06 F4 | 	bitl	local02, #232
25cd4     64 DD 02 F6 | 	mov	local28, local18
25cd8     08 DC 66 F0 | 	shl	local28, #8
25cdc     6E A9 42 F5 | 	or	local02, local28
25ce0                 | LR__3416
25ce0     00 D6 06 F6 | 	mov	local25, #0
25ce4                 | LR__3417
25ce4     55 93 02 F6 | 	mov	arg01, local03
25ce8     F4 1C B0 FD | 	call	#__system____builtin_ilogb
25cec     FF FF 3F FF 
25cf0     FF 7B 0E F2 | 	cmp	result1, ##2147483647 wz
25cf4     24 00 90 5D |  if_ne	jmp	#LR__3418
25cf8     00 B0 0E F2 | 	cmp	local06, #0 wz
25cfc     5E CD 02 56 |  if_ne	mov	local20, local12
25d00     01 BC 06 51 |  if_ne	add	local12, #1
25d04     66 B1 42 5C |  if_ne	wrbyte	local06, local20
25d08     92 01 00 FF 
25d0c     B6 94 06 F6 | 	mov	arg02, ##@LR__5461
25d10     5E 93 02 F6 | 	mov	arg01, local12
25d14     78 EC BF FD | 	call	#__system____builtin_strcpy
25d18     AC 04 90 FD | 	jmp	#LR__3450
25d1c                 | LR__3418
25d1c     55 93 02 F6 | 	mov	arg01, local03
25d20     BC 1C B0 FD | 	call	#__system____builtin_ilogb
25d24     3D CD 02 F6 | 	mov	local20, result1
25d28     00 00 40 FF 
25d2c     00 CC 0E F2 | 	cmp	local20, ##-2147483648 wz
25d30     24 00 90 5D |  if_ne	jmp	#LR__3419
25d34     00 B0 0E F2 | 	cmp	local06, #0 wz
25d38     5E CD 02 56 |  if_ne	mov	local20, local12
25d3c     01 BC 06 51 |  if_ne	add	local12, #1
25d40     66 B1 42 5C |  if_ne	wrbyte	local06, local20
25d44     5E 93 02 F6 | 	mov	arg01, local12
25d48     92 01 00 FF 
25d4c     BA 94 06 F6 | 	mov	arg02, ##@LR__5462
25d50     3C EC BF FD | 	call	#__system____builtin_strcpy
25d54     70 04 90 FD | 	jmp	#LR__3450
25d58                 | LR__3419
25d58     67 AC 0E F2 | 	cmp	local04, #103 wz
25d5c     23 AC 0E 52 |  if_ne	cmp	local04, #35 wz
25d60     0C 01 90 5D |  if_ne	jmp	#LR__3424
25d64     14 CE 05 F1 | 	add	fp, #20
25d68     E7 94 02 F6 | 	mov	arg02, fp
25d6c     0C CE 05 F1 | 	add	fp, #12
25d70     E7 96 02 F6 | 	mov	arg03, fp
25d74     20 CE 85 F1 | 	sub	fp, #32
25d78     60 99 02 F6 | 	mov	arg04, local14
25d7c     57 9B 02 F6 | 	mov	arg05, local05
25d80     55 93 02 F6 | 	mov	arg01, local03
25d84     B4 3F B0 FD | 	call	#__system__disassemble_0582
25d88     23 AC 0E F2 | 	cmp	local04, #35 wz
25d8c     6C 00 90 5D |  if_ne	jmp	#LR__3421
25d90     20 CE 05 F1 | 	add	fp, #32
25d94     E7 CC 02 FB | 	rdlong	local20, fp
25d98     20 CE 85 F1 | 	sub	fp, #32
25d9c     60 CD 5A F2 | 	cmps	local20, local14 wcz
25da0     01 CE 06 16 |  if_a	mov	local21, #1
25da4     24 01 90 1D |  if_a	jmp	#LR__3427
25da8     20 CE 05 F1 | 	add	fp, #32
25dac     E7 CC 02 FB | 	rdlong	local20, fp
25db0     20 CE 85 F1 | 	sub	fp, #32
25db4     00 CC 56 F2 | 	cmps	local20, #0 wc
25db8     1C 00 90 3D |  if_ae	jmp	#LR__3420
25dbc     60 CD 62 F6 | 	neg	local20, local14
25dc0     20 CE 05 F1 | 	add	fp, #32
25dc4     E7 DC 02 FB | 	rdlong	local28, fp
25dc8     20 CE 85 F1 | 	sub	fp, #32
25dcc     66 DD 5A F2 | 	cmps	local28, local20 wcz
25dd0     01 CE 06 E6 |  if_be	mov	local21, #1
25dd4     F4 00 90 FD | 	jmp	#LR__3427
25dd8                 | LR__3420
25dd8     20 CE 05 F1 | 	add	fp, #32
25ddc     E7 CC 02 FB | 	rdlong	local20, fp
25de0     20 CE 85 F1 | 	sub	fp, #32
25de4     01 CC 56 F2 | 	cmps	local20, #1 wc
25de8     20 CE 05 31 |  if_ae	add	fp, #32
25dec     E7 DC 02 3B |  if_ae	rdlong	local28, fp
25df0     20 CE 85 31 |  if_ae	sub	fp, #32
25df4     6E C1 82 31 |  if_ae	sub	local14, local28
25df8     D0 00 90 FD | 	jmp	#LR__3427
25dfc                 | LR__3421
25dfc     00 B2 06 F6 | 	mov	local07, #0
25e00     1C A8 2E F4 | 	testbn	local02, #28 wz
25e04     01 B2 06 A6 |  if_e	mov	local07, #1
25e08     20 CE 05 F1 | 	add	fp, #32
25e0c     E7 CC 02 FB | 	rdlong	local20, fp
25e10     20 CE 85 F1 | 	sub	fp, #32
25e14     60 CD 52 F2 | 	cmps	local20, local14 wc
25e18     18 00 90 3D |  if_ae	jmp	#LR__3422
25e1c     20 CE 05 F1 | 	add	fp, #32
25e20     E7 D8 02 FB | 	rdlong	local26, fp
25e24     20 CE 85 F1 | 	sub	fp, #32
25e28     FF FF 7F FF 
25e2c     FC D9 56 F2 | 	cmps	local26, ##-4 wc
25e30     08 00 90 3D |  if_ae	jmp	#LR__3423
25e34                 | LR__3422
25e34     01 CE 06 F6 | 	mov	local21, #1
25e38     90 00 90 FD | 	jmp	#LR__3427
25e3c                 | LR__3423
25e3c     20 CE 05 F1 | 	add	fp, #32
25e40     E7 DC 02 FB | 	rdlong	local28, fp
25e44     6E C1 82 F1 | 	sub	local14, local28
25e48     0C CE 85 F1 | 	sub	fp, #12
25e4c     E7 94 02 F6 | 	mov	arg02, fp
25e50     0C CE 05 F1 | 	add	fp, #12
25e54     E7 96 02 F6 | 	mov	arg03, fp
25e58     20 CE 85 F1 | 	sub	fp, #32
25e5c     60 99 62 F6 | 	neg	arg04, local14
25e60     55 93 02 F6 | 	mov	arg01, local03
25e64     57 9B 02 F6 | 	mov	arg05, local05
25e68     D0 3E B0 FD | 	call	#__system__disassemble_0582
25e6c     5C 00 90 FD | 	jmp	#LR__3427
25e70                 | LR__3424
25e70     00 CE 0E F2 | 	cmp	local21, #0 wz
25e74     28 00 90 AD |  if_e	jmp	#LR__3425
25e78     14 CE 05 F1 | 	add	fp, #20
25e7c     E7 94 02 F6 | 	mov	arg02, fp
25e80     0C CE 05 F1 | 	add	fp, #12
25e84     E7 96 02 F6 | 	mov	arg03, fp
25e88     20 CE 85 F1 | 	sub	fp, #32
25e8c     55 93 02 F6 | 	mov	arg01, local03
25e90     60 99 02 F6 | 	mov	arg04, local14
25e94     57 9B 02 F6 | 	mov	arg05, local05
25e98     A0 3E B0 FD | 	call	#__system__disassemble_0582
25e9c     2C 00 90 FD | 	jmp	#LR__3426
25ea0                 | LR__3425
25ea0     14 CE 05 F1 | 	add	fp, #20
25ea4     E7 94 02 F6 | 	mov	arg02, fp
25ea8     0C CE 05 F1 | 	add	fp, #12
25eac     E7 96 02 F6 | 	mov	arg03, fp
25eb0     20 CE 85 F1 | 	sub	fp, #32
25eb4     60 DD 02 F6 | 	mov	local28, local14
25eb8     01 DC 06 F1 | 	add	local28, #1
25ebc     6E 99 62 F6 | 	neg	arg04, local28
25ec0     55 93 02 F6 | 	mov	arg01, local03
25ec4     57 9B 02 F6 | 	mov	arg05, local05
25ec8     70 3E B0 FD | 	call	#__system__disassemble_0582
25ecc                 | LR__3426
25ecc                 | LR__3427
25ecc     02 AE 0E F2 | 	cmp	local05, #2 wz
25ed0     44 00 90 5D |  if_ne	jmp	#LR__3430
25ed4     10 AE 06 F6 | 	mov	local05, #16
25ed8                 | LR__3428
25ed8     14 CE 05 F1 | 	add	fp, #20
25edc     E7 CC 0A FB | 	rdlong	local20, fp wz
25ee0     14 CE 85 F1 | 	sub	fp, #20
25ee4     30 00 90 AD |  if_e	jmp	#LR__3429
25ee8     14 CE 05 F1 | 	add	fp, #20
25eec     E7 D8 02 FB | 	rdlong	local26, fp
25ef0     14 CE 85 F1 | 	sub	fp, #20
25ef4     00 80 00 FF 
25ef8     00 D8 16 F2 | 	cmp	local26, ##16777216 wc
25efc     18 00 90 3D |  if_ae	jmp	#LR__3429
25f00     14 CE 05 F1 | 	add	fp, #20
25f04     E7 CC 02 FB | 	rdlong	local20, fp
25f08     01 CC 66 F0 | 	shl	local20, #1
25f0c     E7 CC 62 FC | 	wrlong	local20, fp
25f10     14 CE 85 F1 | 	sub	fp, #20
25f14     C0 FF 9F FD | 	jmp	#LR__3428
25f18                 | LR__3429
25f18                 | LR__3430
25f18     70 CE 05 F1 | 	add	fp, #112
25f1c     E7 92 02 F6 | 	mov	arg01, fp
25f20     5C CE 85 F1 | 	sub	fp, #92
25f24     E7 94 02 FB | 	rdlong	arg02, fp
25f28     14 CE 85 F1 | 	sub	fp, #20
25f2c     57 97 02 F6 | 	mov	arg03, local05
25f30     01 98 06 F6 | 	mov	arg04, #1
25f34     63 9B 02 F6 | 	mov	arg05, local17
25f38     8C 3D B0 FD | 	call	#__system___uitoa
25f3c     3D DF 02 F6 | 	mov	local29, result1
25f40     20 CE 05 F1 | 	add	fp, #32
25f44     E7 CC 02 FB | 	rdlong	local20, fp
25f48     20 CE 85 F1 | 	sub	fp, #32
25f4c     00 CC 56 F2 | 	cmps	local20, #0 wc
25f50     44 00 90 3D |  if_ae	jmp	#LR__3431
25f54     2D BA 06 F6 | 	mov	local11, #45
25f58     B0 CE 05 F1 | 	add	fp, #176
25f5c     E7 92 02 F6 | 	mov	arg01, fp
25f60     90 CE 85 F1 | 	sub	fp, #144
25f64     E7 D8 02 FB | 	rdlong	local26, fp
25f68     20 CE 85 F1 | 	sub	fp, #32
25f6c     6C DD 62 F6 | 	neg	local28, local26
25f70     0A D8 06 F6 | 	mov	local26, #10
25f74     5A E1 02 F6 | 	mov	local30, local08
25f78     63 E3 02 F6 | 	mov	local31, local17
25f7c     6E 95 02 F6 | 	mov	arg02, local28
25f80     0A 96 06 F6 | 	mov	arg03, #10
25f84     70 99 02 F6 | 	mov	arg04, local30
25f88     71 9B 02 F6 | 	mov	arg05, local31
25f8c     38 3D B0 FD | 	call	#__system___uitoa
25f90     3D E5 02 F6 | 	mov	local32, result1
25f94     3C 00 90 FD | 	jmp	#LR__3432
25f98                 | LR__3431
25f98     2B BA 06 F6 | 	mov	local11, #43
25f9c     B0 CE 05 F1 | 	add	fp, #176
25fa0     E7 92 02 F6 | 	mov	arg01, fp
25fa4     90 CE 85 F1 | 	sub	fp, #144
25fa8     E7 DC 02 FB | 	rdlong	local28, fp
25fac     20 CE 85 F1 | 	sub	fp, #32
25fb0     0A D8 06 F6 | 	mov	local26, #10
25fb4     5A E1 02 F6 | 	mov	local30, local08
25fb8     63 E3 02 F6 | 	mov	local31, local17
25fbc     6E 95 02 F6 | 	mov	arg02, local28
25fc0     0A 96 06 F6 | 	mov	arg03, #10
25fc4     70 99 02 F6 | 	mov	arg04, local30
25fc8     71 9B 02 F6 | 	mov	arg05, local31
25fcc     F8 3C B0 FD | 	call	#__system___uitoa
25fd0     3D E5 02 F6 | 	mov	local32, result1
25fd4                 | LR__3432
25fd4     00 CE 0E F2 | 	cmp	local21, #0 wz
25fd8     00 E6 06 56 |  if_ne	mov	local33, #0
25fdc     00 E8 06 56 |  if_ne	mov	local34, #0
25fe0     60 EB 02 56 |  if_ne	mov	local35, local14
25fe4     01 EA 06 51 |  if_ne	add	local35, #1
25fe8     54 00 90 5D |  if_ne	jmp	#LR__3435
25fec     20 CE 05 F1 | 	add	fp, #32
25ff0     E7 DC 02 FB | 	rdlong	local28, fp
25ff4     20 CE 85 F1 | 	sub	fp, #32
25ff8     00 DC 56 F2 | 	cmps	local28, #0 wc
25ffc     24 00 90 3D |  if_ae	jmp	#LR__3433
26000     20 CE 05 F1 | 	add	fp, #32
26004     E7 DC 02 FB | 	rdlong	local28, fp
26008     6E E7 02 F6 | 	mov	local33, local28
2600c     73 E9 02 F6 | 	mov	local34, local33
26010     20 CE 85 F1 | 	sub	fp, #32
26014     6E EB 02 F6 | 	mov	local35, local28
26018     60 EB 02 F1 | 	add	local35, local14
2601c     01 EA 06 F1 | 	add	local35, #1
26020     1C 00 90 FD | 	jmp	#LR__3434
26024                 | LR__3433
26024     00 E8 06 F6 | 	mov	local34, #0
26028     20 CE 05 F1 | 	add	fp, #32
2602c     E7 E6 02 FB | 	rdlong	local33, fp
26030     20 CE 85 F1 | 	sub	fp, #32
26034     73 EB 02 F6 | 	mov	local35, local33
26038     60 EB 02 F1 | 	add	local35, local14
2603c     01 EA 06 F1 | 	add	local35, #1
26040                 | LR__3434
26040                 | LR__3435
26040     75 CD 02 F6 | 	mov	local20, local35
26044     74 CD 82 F1 | 	sub	local20, local34
26048     01 CC 06 F1 | 	add	local20, #1
2604c     66 ED 02 F6 | 	mov	local36, local20
26050     00 B0 0E F2 | 	cmp	local06, #0 wz
26054     76 CD 02 56 |  if_ne	mov	local20, local36
26058     76 DD 02 56 |  if_ne	mov	local28, local36
2605c     01 DC 06 51 |  if_ne	add	local28, #1
26060     6E ED 02 56 |  if_ne	mov	local36, local28
26064     10 AE 0E F2 | 	cmp	local05, #16 wz
26068     02 EC 06 A1 |  if_e	add	local36, #2
2606c     00 CE 0E F2 | 	cmp	local21, #0 wz
26070     02 DC 06 56 |  if_ne	mov	local28, #2
26074     72 DD 02 51 |  if_ne	add	local28, local32
26078     6E ED 02 51 |  if_ne	add	local36, local28
2607c     41 EC 56 F2 | 	cmps	local36, #65 wc
26080     01 7A 66 36 |  if_ae	neg	result1, #1
26084     F0 01 90 3D |  if_ae	jmp	#LR__3460
26088     00 D6 0E F2 | 	cmp	local25, #0 wz
2608c     28 00 90 AD |  if_e	jmp	#LR__3436
26090     58 95 02 F6 | 	mov	arg02, local06
26094     5E 93 02 F6 | 	mov	arg01, local12
26098     5B 97 02 F6 | 	mov	arg03, local09
2609c     90 3E B0 FD | 	call	#__system__emitsign_0584
260a0     3D EF 02 F6 | 	mov	local37, result1
260a4     00 EE 56 F2 | 	cmps	local37, #0 wc
260a8     77 7B 02 C6 |  if_b	mov	result1, local37
260ac     C8 01 90 CD |  if_b	jmp	#LR__3460
260b0     77 DD 02 F6 | 	mov	local28, local37
260b4     77 BD 02 F1 | 	add	local12, local37
260b8                 | LR__3436
260b8     74 F1 02 F6 | 	mov	local38, local34
260bc     D7 42 48 FB | 	callpa	#(@LR__3441-@LR__3437)>>2,fcache_load_ptr_
260c0                 | LR__3437
260c0     75 F1 52 F2 | 	cmps	local38, local35 wc
260c4     7C 00 90 3D |  if_ae	jmp	#LR__3442
260c8     00 F0 56 F2 | 	cmps	local38, #0 wc
260cc     2C 00 90 CD |  if_b	jmp	#LR__3438
260d0     6F F1 52 F2 | 	cmps	local38, local29 wc
260d4     24 00 90 3D |  if_ae	jmp	#LR__3438
260d8     5E CD 02 F6 | 	mov	local20, local12
260dc     78 D9 02 F6 | 	mov	local26, local38
260e0     E7 E0 02 F6 | 	mov	local30, fp
260e4     70 E0 06 F1 | 	add	local30, #112
260e8     70 D9 02 F1 | 	add	local26, local30
260ec     6C E3 C2 FA | 	rdbyte	local31, local26
260f0     66 E3 42 FC | 	wrbyte	local31, local20
260f4     01 BC 06 F1 | 	add	local12, #1
260f8     10 00 90 FD | 	jmp	#LR__3439
260fc                 | LR__3438
260fc     5E CD 02 F6 | 	mov	local20, local12
26100     30 D8 06 F6 | 	mov	local26, #48
26104     66 61 48 FC | 	wrbyte	#48, local20
26108     01 BC 06 F1 | 	add	local12, #1
2610c                 | LR__3439
2610c     73 F1 0A F2 | 	cmp	local38, local33 wz
26110     20 00 90 5D |  if_ne	jmp	#LR__3440
26114     00 C2 0E F2 | 	cmp	local15, #0 wz
26118     75 CD 02 A6 |  if_e	mov	local20, local35
2611c     01 CC 86 A1 |  if_e	sub	local20, #1
26120     66 F1 52 A2 |  if_e	cmps	local38, local20 wc
26124     5E CD 02 D6 |  if_c_or_nz	mov	local20, local12
26128     2E D8 06 D6 |  if_c_or_nz	mov	local26, #46
2612c     66 5D 48 DC |  if_c_or_nz	wrbyte	#46, local20
26130     01 BC 06 D1 |  if_c_or_nz	add	local12, #1
26134                 | LR__3440
26134     78 DD 02 F6 | 	mov	local28, local38
26138     01 DC 06 F1 | 	add	local28, #1
2613c     6E F1 02 F6 | 	mov	local38, local28
26140     7C FF 9F FD | 	jmp	#LR__3437
26144                 | LR__3441
26144                 | LR__3442
26144     00 B2 0E F2 | 	cmp	local07, #0 wz
26148     30 00 90 AD |  if_e	jmp	#LR__3446
2614c     01 BC 86 F1 | 	sub	local12, #1
26150     D7 0C 48 FB | 	callpa	#(@LR__3444-@LR__3443)>>2,fcache_load_ptr_
26154                 | LR__3443
26154     5F BD 5A F2 | 	cmps	local12, local13 wcz
26158     10 00 90 ED |  if_be	jmp	#LR__3445
2615c     5E CD C2 FA | 	rdbyte	local20, local12
26160     30 CC 0E F2 | 	cmp	local20, #48 wz
26164     01 BC 86 A1 |  if_e	sub	local12, #1
26168     E8 FF 9F AD |  if_e	jmp	#LR__3443
2616c                 | LR__3444
2616c                 | LR__3445
2616c     5E CD C2 FA | 	rdbyte	local20, local12
26170     2E CC 0E F2 | 	cmp	local20, #46 wz
26174     01 BC 86 A1 |  if_e	sub	local12, #1
26178     01 BC 06 F1 | 	add	local12, #1
2617c                 | LR__3446
2617c     00 CE 0E F2 | 	cmp	local21, #0 wz
26180     40 00 90 AD |  if_e	jmp	#LR__3449
26184     5E D1 42 FC | 	wrbyte	local22, local12
26188     01 BC 06 F1 | 	add	local12, #1
2618c     5E BB 42 FC | 	wrbyte	local11, local12
26190     00 F0 06 F6 | 	mov	local38, #0
26194     01 BC 06 F1 | 	add	local12, #1
26198                 | LR__3447
26198     72 F1 52 F2 | 	cmps	local38, local32 wc
2619c     24 00 90 3D |  if_ae	jmp	#LR__3448
261a0     78 D9 02 F6 | 	mov	local26, local38
261a4     E7 E0 02 F6 | 	mov	local30, fp
261a8     B0 E0 06 F1 | 	add	local30, #176
261ac     70 D9 02 F1 | 	add	local26, local30
261b0     6C E3 C2 FA | 	rdbyte	local31, local26
261b4     5E E3 42 FC | 	wrbyte	local31, local12
261b8     01 F0 06 F1 | 	add	local38, #1
261bc     01 BC 06 F1 | 	add	local12, #1
261c0     D4 FF 9F FD | 	jmp	#LR__3447
261c4                 | LR__3448
261c4                 | LR__3449
261c4     5E 01 48 FC | 	wrbyte	#0, local12
261c8                 | LR__3450
261c8     00 CA 0E F2 | 	cmp	local19, #0 wz
261cc     00 B8 0E 52 |  if_ne	cmp	local10, #0 wz
261d0     94 00 90 AD |  if_e	jmp	#LR__3459
261d4     5F 93 02 F6 | 	mov	arg01, local13
261d8     49 F3 02 F6 | 	mov	local39, arg01
261dc     D7 06 48 FB | 	callpa	#(@LR__3452-@LR__3451)>>2,fcache_load_ptr_
261e0                 | LR__3451
261e0     79 7B CA FA | 	rdbyte	result1, local39 wz
261e4     01 F2 06 51 |  if_ne	add	local39, #1
261e8     F4 FF 9F 5D |  if_ne	jmp	#LR__3451
261ec                 | LR__3452
261ec     49 F3 82 F1 | 	sub	local39, arg01
261f0     65 F3 5A F2 | 	cmps	local39, local19 wcz
261f4     70 00 90 ED |  if_be	jmp	#LR__3459
261f8     5F F5 02 F6 | 	mov	local40, local13
261fc     00 CE 0E F2 | 	cmp	local21, #0 wz
26200     00 C0 06 56 |  if_ne	mov	local14, #0
26204     65 F7 02 56 |  if_ne	mov	local41, local19
26208     01 CA 86 A1 |  if_e	sub	local19, #1
2620c     60 CB 82 A1 |  if_e	sub	local19, local14
26210     65 F7 02 A6 |  if_e	mov	local41, local19
26214     00 F6 0E F2 | 	cmp	local41, #0 wz
26218     14 00 90 AD |  if_e	jmp	#LR__3455
2621c     D7 08 48 FB | 	callpa	#(@LR__3454-@LR__3453)>>2,fcache_load_ptr_
26220                 | LR__3453
26220     7A 55 48 FC | 	wrbyte	#42, local40
26224     01 F6 8E F1 | 	sub	local41, #1 wz
26228     01 F4 06 F1 | 	add	local40, #1
2622c     F0 FF 9F 5D |  if_ne	jmp	#LR__3453
26230                 | LR__3454
26230                 | LR__3455
26230     00 C0 0E F2 | 	cmp	local14, #0 wz
26234     2C 00 90 AD |  if_e	jmp	#LR__3458
26238     7A CD 02 F6 | 	mov	local20, local40
2623c     66 5D 48 FC | 	wrbyte	#46, local20
26240     00 F6 06 F6 | 	mov	local41, #0
26244     01 F4 06 F1 | 	add	local40, #1
26248     D7 0C 48 FB | 	callpa	#(@LR__3457-@LR__3456)>>2,fcache_load_ptr_
2624c                 | LR__3456
2624c     60 F7 52 F2 | 	cmps	local41, local14 wc
26250     7A CD 02 C6 |  if_b	mov	local20, local40
26254     01 F4 06 C1 |  if_b	add	local40, #1
26258     66 55 48 CC |  if_b	wrbyte	#42, local20
2625c     01 F6 06 C1 |  if_b	add	local41, #1
26260     E8 FF 9F CD |  if_b	jmp	#LR__3456
26264                 | LR__3457
26264                 | LR__3458
26264     7A 01 48 FC | 	wrbyte	#0, local40
26268                 | LR__3459
26268     53 93 02 F6 | 	mov	arg01, local01
2626c     54 95 02 F6 | 	mov	arg02, local02
26270     5F 97 02 F6 | 	mov	arg03, local13
26274     8C F6 BF FD | 	call	#__system___fmtstr
26278                 | LR__3460
26278     E7 F0 03 F6 | 	mov	ptra, fp
2627c     F2 00 A0 FD | 	call	#popregs_
26280                 | __system___fmtfloat_ret
26280     2D 00 64 FD | 	ret
26284                 | 
26284                 | __system__Left_S
26284     04 CA 05 F6 | 	mov	COUNT_, #4
26288     E8 00 A0 FD | 	call	#pushregs_
2628c     49 A7 02 F6 | 	mov	local01, arg01
26290     4A A9 02 F6 | 	mov	local02, arg02
26294     01 A8 56 F2 | 	cmps	local02, #1 wc
26298     92 01 00 CF 
2629c     BE 7A 06 C6 |  if_b	mov	result1, ##@LR__5463
262a0     5C 00 90 CD |  if_b	jmp	#LR__3473
262a4     53 93 02 F6 | 	mov	arg01, local01
262a8     49 AB 02 F6 | 	mov	local03, arg01
262ac     D7 06 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
262b0                 | LR__3470
262b0     55 7B CA FA | 	rdbyte	result1, local03 wz
262b4     01 AA 06 51 |  if_ne	add	local03, #1
262b8     F4 FF 9F 5D |  if_ne	jmp	#LR__3470
262bc                 | LR__3471
262bc     49 AB 82 F1 | 	sub	local03, arg01
262c0     55 7B 02 F6 | 	mov	result1, local03
262c4     54 7B 5A F2 | 	cmps	result1, local02 wcz
262c8     53 7B 02 E6 |  if_be	mov	result1, local01
262cc     30 00 90 ED |  if_be	jmp	#LR__3473
262d0     54 93 02 F6 | 	mov	arg01, local02
262d4     02 92 06 F1 | 	add	arg01, #2
262d8     08 21 B0 FD | 	call	#__system___gc_alloc_managed
262dc     3D AD 0A F6 | 	mov	local04, result1 wz
262e0     18 00 90 AD |  if_e	jmp	#LR__3472
262e4     56 93 02 F6 | 	mov	arg01, local04
262e8     53 95 02 F6 | 	mov	arg02, local01
262ec     54 97 02 F6 | 	mov	arg03, local02
262f0     98 E5 BF FD | 	call	#__system____builtin_memmove
262f4     56 A9 02 F1 | 	add	local02, local04
262f8     54 01 48 FC | 	wrbyte	#0, local02
262fc                 | LR__3472
262fc     56 7B 02 F6 | 	mov	result1, local04
26300                 | LR__3473
26300     E7 F0 03 F6 | 	mov	ptra, fp
26304     F2 00 A0 FD | 	call	#popregs_
26308                 | __system__Left_S_ret
26308     2D 00 64 FD | 	ret
2630c                 | 
2630c                 | __system__Right_S
2630c     05 CA 05 F6 | 	mov	COUNT_, #5
26310     E8 00 A0 FD | 	call	#pushregs_
26314     49 A7 02 F6 | 	mov	local01, arg01
26318     4A A9 02 F6 | 	mov	local02, arg02
2631c     01 A8 56 F2 | 	cmps	local02, #1 wc
26320     92 01 00 CF 
26324     BF 7A 06 C6 |  if_b	mov	result1, ##@LR__5464
26328     64 00 90 CD |  if_b	jmp	#LR__3483
2632c     53 93 02 F6 | 	mov	arg01, local01
26330     49 AB 02 F6 | 	mov	local03, arg01
26334     D7 06 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
26338                 | LR__3480
26338     55 7B CA FA | 	rdbyte	result1, local03 wz
2633c     01 AA 06 51 |  if_ne	add	local03, #1
26340     F4 FF 9F 5D |  if_ne	jmp	#LR__3480
26344                 | LR__3481
26344     49 AB 82 F1 | 	sub	local03, arg01
26348     55 7B 02 F6 | 	mov	result1, local03
2634c     3D AD 02 F6 | 	mov	local04, result1
26350     54 AD 5A F2 | 	cmps	local04, local02 wcz
26354     53 7B 02 E6 |  if_be	mov	result1, local01
26358     34 00 90 ED |  if_be	jmp	#LR__3483
2635c     54 93 02 F6 | 	mov	arg01, local02
26360     02 92 06 F1 | 	add	arg01, #2
26364     7C 20 B0 FD | 	call	#__system___gc_alloc_managed
26368     3D AF 0A F6 | 	mov	local05, result1 wz
2636c     1C 00 90 AD |  if_e	jmp	#LR__3482
26370     54 AD 82 F1 | 	sub	local04, local02
26374     53 AD 02 F1 | 	add	local04, local01
26378     01 A8 06 F1 | 	add	local02, #1
2637c     57 93 02 F6 | 	mov	arg01, local05
26380     56 95 02 F6 | 	mov	arg02, local04
26384     54 97 02 F6 | 	mov	arg03, local02
26388     00 E5 BF FD | 	call	#__system____builtin_memmove
2638c                 | LR__3482
2638c     57 7B 02 F6 | 	mov	result1, local05
26390                 | LR__3483
26390     E7 F0 03 F6 | 	mov	ptra, fp
26394     F2 00 A0 FD | 	call	#popregs_
26398                 | __system__Right_S_ret
26398     2D 00 64 FD | 	ret
2639c                 | 
2639c                 | __system__Mid_S
2639c     05 CA 05 F6 | 	mov	COUNT_, #5
263a0     E8 00 A0 FD | 	call	#pushregs_
263a4     49 A7 02 F6 | 	mov	local01, arg01
263a8     4A A9 02 F6 | 	mov	local02, arg02
263ac     01 96 56 F2 | 	cmps	arg03, #1 wc
263b0     92 01 00 CF 
263b4     C0 7A 06 C6 |  if_b	mov	result1, ##@LR__5465
263b8     80 00 90 CD |  if_b	jmp	#LR__3493
263bc     01 A8 86 F1 | 	sub	local02, #1
263c0     00 A8 56 F3 | 	fges	local02, #0 wc
263c4     53 93 02 F6 | 	mov	arg01, local01
263c8     49 AB 02 F6 | 	mov	local03, arg01
263cc     D7 06 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
263d0                 | LR__3490
263d0     55 7B CA FA | 	rdbyte	result1, local03 wz
263d4     01 AA 06 51 |  if_ne	add	local03, #1
263d8     F4 FF 9F 5D |  if_ne	jmp	#LR__3490
263dc                 | LR__3491
263dc     49 AB 82 F1 | 	sub	local03, arg01
263e0     55 7B 02 F6 | 	mov	result1, local03
263e4     3D 95 02 F6 | 	mov	arg02, result1
263e8     54 95 52 F2 | 	cmps	arg02, local02 wc
263ec     92 01 00 CF 
263f0     C1 7A 06 C6 |  if_b	mov	result1, ##@LR__5466
263f4     44 00 90 CD |  if_b	jmp	#LR__3493
263f8     4A AD 02 F6 | 	mov	local04, arg02
263fc     54 AD 82 F1 | 	sub	local04, local02
26400     4B AD 5A F2 | 	cmps	local04, arg03 wcz
26404     4B AD 02 16 |  if_a	mov	local04, arg03
26408     56 93 02 F6 | 	mov	arg01, local04
2640c     02 92 06 F1 | 	add	arg01, #2
26410     D0 1F B0 FD | 	call	#__system___gc_alloc_managed
26414     3D AF 0A F6 | 	mov	local05, result1 wz
26418     1C 00 90 AD |  if_e	jmp	#LR__3492
2641c     53 A9 02 F1 | 	add	local02, local01
26420     57 93 02 F6 | 	mov	arg01, local05
26424     54 95 02 F6 | 	mov	arg02, local02
26428     56 97 02 F6 | 	mov	arg03, local04
2642c     5C E4 BF FD | 	call	#__system____builtin_memmove
26430     57 AD 02 F1 | 	add	local04, local05
26434     56 01 48 FC | 	wrbyte	#0, local04
26438                 | LR__3492
26438     57 7B 02 F6 | 	mov	result1, local05
2643c                 | LR__3493
2643c     E7 F0 03 F6 | 	mov	ptra, fp
26440     F2 00 A0 FD | 	call	#popregs_
26444                 | __system__Mid_S_ret
26444     2D 00 64 FD | 	ret
26448                 | 
26448                 | __system__Chr_S
26448     01 CA 05 F6 | 	mov	COUNT_, #1
2644c     E8 00 A0 FD | 	call	#pushregs_
26450     49 A7 02 F6 | 	mov	local01, arg01
26454     03 92 06 F6 | 	mov	arg01, #3
26458     88 1F B0 FD | 	call	#__system___gc_alloc_managed
2645c     00 7A 4E F2 | 	cmps	result1, #0 wz
26460     3D A7 42 5C |  if_ne	wrbyte	local01, result1
26464     01 7A 06 51 |  if_ne	add	result1, #1
26468     3D 01 48 5C |  if_ne	wrbyte	#0, result1
2646c     01 7A 86 51 |  if_ne	sub	result1, #1
26470     E7 F0 03 F6 | 	mov	ptra, fp
26474     F2 00 A0 FD | 	call	#popregs_
26478                 | __system__Chr_S_ret
26478     2D 00 64 FD | 	ret
2647c                 | 
2647c                 | __system__str_S
2647c     02 CA 05 F6 | 	mov	COUNT_, #2
26480     E8 00 A0 FD | 	call	#pushregs_
26484     49 A7 02 F6 | 	mov	local01, arg01
26488     10 92 06 F6 | 	mov	arg01, #16
2648c     54 1F B0 FD | 	call	#__system___gc_alloc_managed
26490     3D A9 0A F6 | 	mov	local02, result1 wz
26494     30 00 90 AD |  if_e	jmp	#LR__3500
26498     F8 93 02 F6 | 	mov	arg01, ptra
2649c     08 F0 07 F1 | 	add	ptra, #8
264a0     49 A9 62 FC | 	wrlong	local02, arg01
264a4     04 92 06 F1 | 	add	arg01, #4
264a8     49 01 68 FC | 	wrlong	#0, arg01
264ac     04 92 86 F1 | 	sub	arg01, #4
264b0     00 98 05 FF 
264b4     00 92 46 F5 | 	or	arg01, ##187695104
264b8     00 94 06 F6 | 	mov	arg02, #0
264bc     53 97 02 F6 | 	mov	arg03, local01
264c0     67 98 06 F6 | 	mov	arg04, #103
264c4     5C F6 BF FD | 	call	#__system___fmtfloat
264c8                 | LR__3500
264c8     54 7B 02 F6 | 	mov	result1, local02
264cc     E7 F0 03 F6 | 	mov	ptra, fp
264d0     F2 00 A0 FD | 	call	#popregs_
264d4                 | __system__str_S_ret
264d4     2D 00 64 FD | 	ret
264d8                 | 
264d8                 | __system__Number_S
264d8     08 CA 05 F6 | 	mov	COUNT_, #8
264dc     E8 00 A0 FD | 	call	#pushregs_
264e0     49 A7 02 F6 | 	mov	local01, arg01
264e4     4A A9 0A F6 | 	mov	local02, arg02 wz
264e8     4B AB 02 F6 | 	mov	local03, arg03
264ec     3C 00 90 5D |  if_ne	jmp	#LR__3512
264f0     01 A8 06 F6 | 	mov	local02, #1
264f4     55 AD 02 F6 | 	mov	local04, local03
264f8     01 AE 06 F6 | 	mov	local05, #1
264fc     D7 16 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
26500                 | LR__3510
26500     00 B0 06 F6 | 	mov	local06, #0
26504     53 AD 1A F2 | 	cmp	local04, local01 wcz
26508     01 B0 66 E6 |  if_be	neg	local06, #1
2650c     56 AF 12 F2 | 	cmp	local05, local04 wc
26510     59 B3 A2 F1 | 	subx	local07, local07
26514     59 B1 CA F7 | 	test	local06, local07 wz
26518     55 AD 02 5D |  if_ne	qmul	local04, local03
2651c     56 AF 02 56 |  if_ne	mov	local05, local04
26520     01 A8 06 51 |  if_ne	add	local02, #1
26524     18 AC 62 5D |  if_ne	getqx	local04
26528     D4 FF 9F 5D |  if_ne	jmp	#LR__3510
2652c                 | LR__3511
2652c                 | LR__3512
2652c     20 A8 36 F3 | 	fle	local02, #32 wc
26530     54 93 02 F6 | 	mov	arg01, local02
26534     02 92 06 F1 | 	add	arg01, #2
26538     A8 1E B0 FD | 	call	#__system___gc_alloc_managed
2653c     3D B1 02 F6 | 	mov	local06, result1
26540     54 B3 02 F6 | 	mov	local07, local02
26544     58 B3 02 F1 | 	add	local07, local06
26548     59 01 48 FC | 	wrbyte	#0, local07
2654c     D7 1A 48 FB | 	callpa	#(@LR__3514-@LR__3513)>>2,fcache_load_ptr_
26550                 | LR__3513
26550     01 A8 16 F2 | 	cmp	local02, #1 wc
26554     2C 00 90 CD |  if_b	jmp	#LR__3515
26558     55 A7 12 FD | 	qdiv	local01, local03
2655c     01 A8 86 F1 | 	sub	local02, #1
26560     54 B3 02 F6 | 	mov	local07, local02
26564     58 B3 02 F1 | 	add	local07, local06
26568     19 B4 62 FD | 	getqy	local08
2656c     0A B4 16 F2 | 	cmp	local08, #10 wc
26570     30 B4 06 C1 |  if_b	add	local08, #48
26574     37 B4 06 31 |  if_ae	add	local08, #55
26578     59 B5 42 FC | 	wrbyte	local08, local07
2657c     18 A6 62 FD | 	getqx	local01
26580     CC FF 9F FD | 	jmp	#LR__3513
26584                 | LR__3514
26584                 | LR__3515
26584     58 7B 02 F6 | 	mov	result1, local06
26588     E7 F0 03 F6 | 	mov	ptra, fp
2658c     F2 00 A0 FD | 	call	#popregs_
26590                 | __system__Number_S_ret
26590     2D 00 64 FD | 	ret
26594                 | 
26594                 | __system__LCase_S
26594     07 CA 05 F6 | 	mov	COUNT_, #7
26598     E8 00 A0 FD | 	call	#pushregs_
2659c     49 A7 02 F6 | 	mov	local01, arg01
265a0     49 A9 02 F6 | 	mov	local02, arg01
265a4     D7 06 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
265a8                 | LR__3520
265a8     54 7B CA FA | 	rdbyte	result1, local02 wz
265ac     01 A8 06 51 |  if_ne	add	local02, #1
265b0     F4 FF 9F 5D |  if_ne	jmp	#LR__3520
265b4                 | LR__3521
265b4     49 A9 82 F1 | 	sub	local02, arg01
265b8     54 7B 02 F6 | 	mov	result1, local02
265bc     3D A9 0A F6 | 	mov	local02, result1 wz
265c0     92 01 00 AF 
265c4     C2 7A 06 A6 |  if_e	mov	result1, ##@LR__5467
265c8     7C 00 90 AD |  if_e	jmp	#LR__3527
265cc     54 93 02 F6 | 	mov	arg01, local02
265d0     02 92 06 F1 | 	add	arg01, #2
265d4     0C 1E B0 FD | 	call	#__system___gc_alloc_managed
265d8     3D AB 0A F6 | 	mov	local03, result1 wz
265dc     64 00 90 AD |  if_e	jmp	#LR__3526
265e0     01 AC 66 F6 | 	neg	local04, #1
265e4     D7 26 48 FB | 	callpa	#(@LR__3525-@LR__3522)>>2,fcache_load_ptr_
265e8                 | LR__3522
265e8     01 AC 06 F1 | 	add	local04, #1
265ec     56 AF 02 F6 | 	mov	local05, local04
265f0     53 AF 02 F1 | 	add	local05, local01
265f4     57 B1 C2 FA | 	rdbyte	local06, local05
265f8     41 B0 56 F2 | 	cmps	local06, #65 wc
265fc     18 00 90 CD |  if_b	jmp	#LR__3523
26600     5B B0 56 F2 | 	cmps	local06, #91 wc
26604     56 B3 02 C6 |  if_b	mov	local07, local04
26608     55 B3 02 C1 |  if_b	add	local07, local03
2660c     20 B0 06 C1 |  if_b	add	local06, #32
26610     59 B1 42 CC |  if_b	wrbyte	local06, local07
26614     0C 00 90 CD |  if_b	jmp	#LR__3524
26618                 | LR__3523
26618     56 B3 02 F6 | 	mov	local07, local04
2661c     55 B3 02 F1 | 	add	local07, local03
26620     59 B1 42 FC | 	wrbyte	local06, local07
26624                 | LR__3524
26624     54 B1 02 F6 | 	mov	local06, local02
26628     01 B0 86 F1 | 	sub	local06, #1
2662c     58 AD 0A F2 | 	cmp	local04, local06 wz
26630     B4 FF 9F 5D |  if_ne	jmp	#LR__3522
26634                 | LR__3525
26634     55 A9 02 F1 | 	add	local02, local03
26638     54 01 48 FC | 	wrbyte	#0, local02
2663c     55 7B 02 F6 | 	mov	result1, local03
26640     04 00 90 FD | 	jmp	#LR__3527
26644                 | LR__3526
26644     55 7B 02 F6 | 	mov	result1, local03
26648                 | LR__3527
26648     E7 F0 03 F6 | 	mov	ptra, fp
2664c     F2 00 A0 FD | 	call	#popregs_
26650                 | __system__LCase_S_ret
26650     2D 00 64 FD | 	ret
26654                 | 
26654                 | __system__LTrim_S
26654     05 CA 05 F6 | 	mov	COUNT_, #5
26658     E8 00 A0 FD | 	call	#pushregs_
2665c     49 A7 02 F6 | 	mov	local01, arg01
26660     49 A9 02 F6 | 	mov	local02, arg01
26664     D7 06 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
26668                 | LR__3530
26668     54 7B CA FA | 	rdbyte	result1, local02 wz
2666c     01 A8 06 51 |  if_ne	add	local02, #1
26670     F4 FF 9F 5D |  if_ne	jmp	#LR__3530
26674                 | LR__3531
26674     49 A9 82 F1 | 	sub	local02, arg01
26678     54 7B 02 F6 | 	mov	result1, local02
2667c     3D A9 0A F6 | 	mov	local02, result1 wz
26680     92 01 00 AF 
26684     C3 7A 06 A6 |  if_e	mov	result1, ##@LR__5468
26688     7C 00 90 AD |  if_e	jmp	#LR__3536
2668c     00 AA 06 F6 | 	mov	local03, #0
26690     54 AD 02 F6 | 	mov	local04, local02
26694                 | LR__3532
26694     56 AB 52 F2 | 	cmps	local03, local04 wc
26698     68 00 90 3D |  if_ae	jmp	#LR__3535
2669c     55 97 02 F6 | 	mov	arg03, local03
266a0     53 97 02 F1 | 	add	arg03, local01
266a4     4B 97 C2 FA | 	rdbyte	arg03, arg03
266a8     20 96 0E F2 | 	cmp	arg03, #32 wz
266ac     4C 00 90 AD |  if_e	jmp	#LR__3534
266b0     54 93 02 F6 | 	mov	arg01, local02
266b4     55 93 82 F1 | 	sub	arg01, local03
266b8     02 92 06 F1 | 	add	arg01, #2
266bc     24 1D B0 FD | 	call	#__system___gc_alloc_managed
266c0     3D AF 0A F6 | 	mov	local05, result1 wz
266c4     2C 00 90 AD |  if_e	jmp	#LR__3533
266c8     55 95 02 F6 | 	mov	arg02, local03
266cc     53 95 02 F1 | 	add	arg02, local01
266d0     54 97 02 F6 | 	mov	arg03, local02
266d4     55 97 82 F1 | 	sub	arg03, local03
266d8     57 93 02 F6 | 	mov	arg01, local05
266dc     AC E1 BF FD | 	call	#__system____builtin_memmove
266e0     55 A9 82 F1 | 	sub	local02, local03
266e4     57 A9 02 F1 | 	add	local02, local05
266e8     54 01 48 FC | 	wrbyte	#0, local02
266ec     57 7B 02 F6 | 	mov	result1, local05
266f0     14 00 90 FD | 	jmp	#LR__3536
266f4                 | LR__3533
266f4     57 7B 02 F6 | 	mov	result1, local05
266f8     0C 00 90 FD | 	jmp	#LR__3536
266fc                 | LR__3534
266fc     01 AA 06 F1 | 	add	local03, #1
26700     90 FF 9F FD | 	jmp	#LR__3532
26704                 | LR__3535
26704     53 7B 02 F6 | 	mov	result1, local01
26708                 | LR__3536
26708     E7 F0 03 F6 | 	mov	ptra, fp
2670c     F2 00 A0 FD | 	call	#popregs_
26710                 | __system__LTrim_S_ret
26710     2D 00 64 FD | 	ret
26714                 | 
26714                 | __system__RTrim_S
26714     04 CA 05 F6 | 	mov	COUNT_, #4
26718     E8 00 A0 FD | 	call	#pushregs_
2671c     49 A7 02 F6 | 	mov	local01, arg01
26720     49 A9 02 F6 | 	mov	local02, arg01
26724     D7 06 48 FB | 	callpa	#(@LR__3541-@LR__3540)>>2,fcache_load_ptr_
26728                 | LR__3540
26728     54 7B CA FA | 	rdbyte	result1, local02 wz
2672c     01 A8 06 51 |  if_ne	add	local02, #1
26730     F4 FF 9F 5D |  if_ne	jmp	#LR__3540
26734                 | LR__3541
26734     49 A9 82 F1 | 	sub	local02, arg01
26738     54 7B 02 F6 | 	mov	result1, local02
2673c     3D A9 0A F6 | 	mov	local02, result1 wz
26740     92 01 00 AF 
26744     C4 7A 06 A6 |  if_e	mov	result1, ##@LR__5469
26748     74 00 90 AD |  if_e	jmp	#LR__3545
2674c     54 AB 02 F6 | 	mov	local03, local02
26750     01 AA 86 F1 | 	sub	local03, #1
26754                 | LR__3542
26754     55 95 02 F6 | 	mov	arg02, local03
26758     53 95 02 F1 | 	add	arg02, local01
2675c     4A A9 C2 FA | 	rdbyte	local02, arg02
26760     20 A8 0E F2 | 	cmp	local02, #32 wz
26764     44 00 90 AD |  if_e	jmp	#LR__3544
26768     55 93 02 F6 | 	mov	arg01, local03
2676c     02 92 06 F1 | 	add	arg01, #2
26770     70 1C B0 FD | 	call	#__system___gc_alloc_managed
26774     3D AD 0A F6 | 	mov	local04, result1 wz
26778     28 00 90 AD |  if_e	jmp	#LR__3543
2677c     55 97 02 F6 | 	mov	arg03, local03
26780     01 96 06 F1 | 	add	arg03, #1
26784     56 93 02 F6 | 	mov	arg01, local04
26788     53 95 02 F6 | 	mov	arg02, local01
2678c     FC E0 BF FD | 	call	#__system____builtin_memmove
26790     01 AA 06 F1 | 	add	local03, #1
26794     56 AB 02 F1 | 	add	local03, local04
26798     55 01 48 FC | 	wrbyte	#0, local03
2679c     56 7B 02 F6 | 	mov	result1, local04
267a0     1C 00 90 FD | 	jmp	#LR__3545
267a4                 | LR__3543
267a4     56 7B 02 F6 | 	mov	result1, local04
267a8     14 00 90 FD | 	jmp	#LR__3545
267ac                 | LR__3544
267ac     01 AA 86 F1 | 	sub	local03, #1
267b0     00 AA 56 F2 | 	cmps	local03, #0 wc
267b4     9C FF 9F 3D |  if_ae	jmp	#LR__3542
267b8     92 01 00 FF 
267bc     C5 7A 06 F6 | 	mov	result1, ##@LR__5470
267c0                 | LR__3545
267c0     E7 F0 03 F6 | 	mov	ptra, fp
267c4     F2 00 A0 FD | 	call	#popregs_
267c8                 | __system__RTrim_S_ret
267c8     2D 00 64 FD | 	ret
267cc                 | 
267cc                 | __system__Instr
267cc     07 CA 05 F6 | 	mov	COUNT_, #7
267d0     E8 00 A0 FD | 	call	#pushregs_
267d4     49 A7 02 F6 | 	mov	local01, arg01
267d8     4A A9 02 F6 | 	mov	local02, arg02
267dc     4B AB 02 F6 | 	mov	local03, arg03
267e0     55 93 02 F6 | 	mov	arg01, local03
267e4     49 AD 02 F6 | 	mov	local04, arg01
267e8     D7 06 48 FB | 	callpa	#(@LR__3551-@LR__3550)>>2,fcache_load_ptr_
267ec                 | LR__3550
267ec     56 7B CA FA | 	rdbyte	result1, local04 wz
267f0     01 AC 06 51 |  if_ne	add	local04, #1
267f4     F4 FF 9F 5D |  if_ne	jmp	#LR__3550
267f8                 | LR__3551
267f8     49 AD 82 F1 | 	sub	local04, arg01
267fc     56 AF 02 F6 | 	mov	local05, local04
26800     54 93 02 F6 | 	mov	arg01, local02
26804     49 AD 02 F6 | 	mov	local04, arg01
26808     D7 06 48 FB | 	callpa	#(@LR__3553-@LR__3552)>>2,fcache_load_ptr_
2680c                 | LR__3552
2680c     56 7B CA FA | 	rdbyte	result1, local04 wz
26810     01 AC 06 51 |  if_ne	add	local04, #1
26814     F4 FF 9F 5D |  if_ne	jmp	#LR__3552
26818                 | LR__3553
26818     49 AD 82 F1 | 	sub	local04, arg01
2681c     56 7B 02 F6 | 	mov	result1, local04
26820     3D 99 0A F6 | 	mov	arg04, result1 wz
26824     00 7A 06 A6 |  if_e	mov	result1, #0
26828     98 00 90 AD |  if_e	jmp	#LR__3557
2682c     00 AE 0E F2 | 	cmp	local05, #0 wz
26830     00 7A 06 A6 |  if_e	mov	result1, #0
26834     8C 00 90 AD |  if_e	jmp	#LR__3557
26838     4C A7 5A F2 | 	cmps	local01, arg04 wcz
2683c     00 7A 06 16 |  if_a	mov	result1, #0
26840     80 00 90 1D |  if_a	jmp	#LR__3557
26844     01 A6 56 F2 | 	cmps	local01, #1 wc
26848     01 A6 06 C6 |  if_b	mov	local01, #1
2684c     55 B1 C2 FA | 	rdbyte	local06, local03
26850     01 AE 0E F2 | 	cmp	local05, #1 wz
26854     18 00 90 5D |  if_ne	jmp	#LR__3554
26858     54 93 02 F6 | 	mov	arg01, local02
2685c     58 95 02 F6 | 	mov	arg02, local06
26860     53 97 02 F6 | 	mov	arg03, local01
26864     00 98 06 F6 | 	mov	arg04, #0
26868     C4 37 B0 FD | 	call	#__system____ScanForChar
2686c     54 00 90 FD | 	jmp	#LR__3557
26870                 | LR__3554
26870     53 B3 02 F6 | 	mov	local07, local01
26874                 | LR__3555
26874     54 93 02 F6 | 	mov	arg01, local02
26878     58 95 02 F6 | 	mov	arg02, local06
2687c     59 97 02 F6 | 	mov	arg03, local07
26880     00 98 06 F6 | 	mov	arg04, #0
26884     A8 37 B0 FD | 	call	#__system____ScanForChar
26888     3D B3 0A F6 | 	mov	local07, result1 wz
2688c     30 00 90 AD |  if_e	jmp	#LR__3556
26890     57 97 02 F6 | 	mov	arg03, local05
26894     54 93 02 F6 | 	mov	arg01, local02
26898     59 95 02 F6 | 	mov	arg02, local07
2689c     FC FA BF FD | 	call	#__system__Mid_S
268a0     3D 93 02 F6 | 	mov	arg01, result1
268a4     55 95 02 F6 | 	mov	arg02, local03
268a8     58 E1 BF FD | 	call	#__system___string_cmp
268ac     00 7A 0E F2 | 	cmp	result1, #0 wz
268b0     59 7B 02 A6 |  if_e	mov	result1, local07
268b4     0C 00 90 AD |  if_e	jmp	#LR__3557
268b8     57 B3 02 F1 | 	add	local07, local05
268bc     B4 FF 9F FD | 	jmp	#LR__3555
268c0                 | LR__3556
268c0     00 7A 06 F6 | 	mov	result1, #0
268c4                 | LR__3557
268c4     E7 F0 03 F6 | 	mov	ptra, fp
268c8     F2 00 A0 FD | 	call	#popregs_
268cc                 | __system__Instr_ret
268cc     2D 00 64 FD | 	ret
268d0                 | 
268d0                 | __system__InstrRev
268d0     07 CA 05 F6 | 	mov	COUNT_, #7
268d4     E8 00 A0 FD | 	call	#pushregs_
268d8     49 A7 02 F6 | 	mov	local01, arg01
268dc     4A A9 02 F6 | 	mov	local02, arg02
268e0     4B AB 02 F6 | 	mov	local03, arg03
268e4     55 93 02 F6 | 	mov	arg01, local03
268e8     49 AD 02 F6 | 	mov	local04, arg01
268ec     D7 06 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
268f0                 | LR__3560
268f0     56 7B CA FA | 	rdbyte	result1, local04 wz
268f4     01 AC 06 51 |  if_ne	add	local04, #1
268f8     F4 FF 9F 5D |  if_ne	jmp	#LR__3560
268fc                 | LR__3561
268fc     49 AD 82 F1 | 	sub	local04, arg01
26900     56 AF 02 F6 | 	mov	local05, local04
26904     54 93 02 F6 | 	mov	arg01, local02
26908     49 AD 02 F6 | 	mov	local04, arg01
2690c     D7 06 48 FB | 	callpa	#(@LR__3563-@LR__3562)>>2,fcache_load_ptr_
26910                 | LR__3562
26910     56 7B CA FA | 	rdbyte	result1, local04 wz
26914     01 AC 06 51 |  if_ne	add	local04, #1
26918     F4 FF 9F 5D |  if_ne	jmp	#LR__3562
2691c                 | LR__3563
2691c     49 AD 82 F1 | 	sub	local04, arg01
26920     56 7B 02 F6 | 	mov	result1, local04
26924     3D 99 0A F6 | 	mov	arg04, result1 wz
26928     00 7A 06 A6 |  if_e	mov	result1, #0
2692c     98 00 90 AD |  if_e	jmp	#LR__3567
26930     00 AE 0E F2 | 	cmp	local05, #0 wz
26934     00 7A 06 A6 |  if_e	mov	result1, #0
26938     8C 00 90 AD |  if_e	jmp	#LR__3567
2693c     4C A7 5A F2 | 	cmps	local01, arg04 wcz
26940     4C A7 02 16 |  if_a	mov	local01, arg04
26944     01 A6 56 F2 | 	cmps	local01, #1 wc
26948     01 A6 06 C6 |  if_b	mov	local01, #1
2694c     55 B1 C2 FA | 	rdbyte	local06, local03
26950     01 AE 0E F2 | 	cmp	local05, #1 wz
26954     18 00 90 5D |  if_ne	jmp	#LR__3564
26958     54 93 02 F6 | 	mov	arg01, local02
2695c     58 95 02 F6 | 	mov	arg02, local06
26960     53 97 02 F6 | 	mov	arg03, local01
26964     01 98 06 F6 | 	mov	arg04, #1
26968     C4 36 B0 FD | 	call	#__system____ScanForChar
2696c     58 00 90 FD | 	jmp	#LR__3567
26970                 | LR__3564
26970     57 B3 02 F6 | 	mov	local07, local05
26974     01 B2 86 F1 | 	sub	local07, #1
26978                 | LR__3565
26978     54 93 02 F6 | 	mov	arg01, local02
2697c     58 95 02 F6 | 	mov	arg02, local06
26980     59 97 02 F6 | 	mov	arg03, local07
26984     01 98 06 F6 | 	mov	arg04, #1
26988     A4 36 B0 FD | 	call	#__system____ScanForChar
2698c     3D B3 0A F6 | 	mov	local07, result1 wz
26990     30 00 90 AD |  if_e	jmp	#LR__3566
26994     57 97 02 F6 | 	mov	arg03, local05
26998     54 93 02 F6 | 	mov	arg01, local02
2699c     59 95 02 F6 | 	mov	arg02, local07
269a0     F8 F9 BF FD | 	call	#__system__Mid_S
269a4     3D 93 02 F6 | 	mov	arg01, result1
269a8     55 95 02 F6 | 	mov	arg02, local03
269ac     54 E0 BF FD | 	call	#__system___string_cmp
269b0     00 7A 0E F2 | 	cmp	result1, #0 wz
269b4     59 7B 02 A6 |  if_e	mov	result1, local07
269b8     0C 00 90 AD |  if_e	jmp	#LR__3567
269bc     57 B3 82 F1 | 	sub	local07, local05
269c0     B4 FF 9F FD | 	jmp	#LR__3565
269c4                 | LR__3566
269c4     00 7A 06 F6 | 	mov	result1, #0
269c8                 | LR__3567
269c8     E7 F0 03 F6 | 	mov	ptra, fp
269cc     F2 00 A0 FD | 	call	#popregs_
269d0                 | __system__InstrRev_ret
269d0     2D 00 64 FD | 	ret
269d4                 | 
269d4                 | __system___remove
269d4     06 CA 05 F6 | 	mov	COUNT_, #6
269d8     E8 00 A0 FD | 	call	#pushregs_
269dc     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
269e0     84 A7 06 F1 | 	add	local01, #388
269e4     49 95 02 F6 | 	mov	arg02, arg01
269e8     53 93 02 F6 | 	mov	arg01, local01
269ec     00 96 06 F6 | 	mov	arg03, #0
269f0     34 E7 BF FD | 	call	#__system____getvfsforfile
269f4     3D A9 0A F6 | 	mov	local02, result1 wz
269f8     10 00 90 AD |  if_e	jmp	#LR__3570
269fc     20 A8 06 F1 | 	add	local02, #32
26a00     54 93 0A FB | 	rdlong	arg01, local02 wz
26a04     20 A8 86 F1 | 	sub	local02, #32
26a08     14 00 90 5D |  if_ne	jmp	#LR__3571
26a0c                 | LR__3570
26a0c     20 68 06 F1 | 	add	ptr___system__dat__, #32
26a10     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
26a14     20 68 86 F1 | 	sub	ptr___system__dat__, #32
26a18     01 7A 66 F6 | 	neg	result1, #1
26a1c     A8 00 90 FD | 	jmp	#LR__3574
26a20                 | LR__3571
26a20     40 A8 06 F1 | 	add	local02, #64
26a24     54 AB 02 FB | 	rdlong	local03, local02
26a28     55 AD 02 F6 | 	mov	local04, local03
26a2c     40 A8 86 F1 | 	sub	local02, #64
26a30     13 AC 46 F7 | 	zerox	local04, #19
26a34     14 AA 46 F0 | 	shr	local03, #20
26a38     02 AA 66 F0 | 	shl	local03, #2
26a3c     2D AB 02 F1 | 	add	local03, __methods__
26a40     55 AB 02 FB | 	rdlong	local03, local03
26a44     53 93 02 F6 | 	mov	arg01, local01
26a48     32 AF 02 F6 | 	mov	local05, objptr
26a4c     56 65 02 F6 | 	mov	objptr, local04
26a50     2D AA 62 FD | 	call	local03
26a54     57 65 02 F6 | 	mov	objptr, local05
26a58     3D B1 02 F6 | 	mov	local06, result1
26a5c     FF FF 7F FF 
26a60     F2 B1 0E F2 | 	cmp	local06, ##-14 wz
26a64     38 00 90 5D |  if_ne	jmp	#LR__3572
26a68     3C A8 06 F1 | 	add	local02, #60
26a6c     54 B1 02 FB | 	rdlong	local06, local02
26a70     58 AB 02 F6 | 	mov	local03, local06
26a74     13 B0 46 F7 | 	zerox	local06, #19
26a78     14 AA 46 F0 | 	shr	local03, #20
26a7c     02 AA 66 F0 | 	shl	local03, #2
26a80     2D AB 02 F1 | 	add	local03, __methods__
26a84     55 AB 02 FB | 	rdlong	local03, local03
26a88     53 93 02 F6 | 	mov	arg01, local01
26a8c     32 AF 02 F6 | 	mov	local05, objptr
26a90     58 65 02 F6 | 	mov	objptr, local06
26a94     2D AA 62 FD | 	call	local03
26a98     57 65 02 F6 | 	mov	objptr, local05
26a9c     3D B1 02 F6 | 	mov	local06, result1
26aa0                 | LR__3572
26aa0     00 B0 0E F2 | 	cmp	local06, #0 wz
26aa4     1C 00 90 AD |  if_e	jmp	#LR__3573
26aa8     58 93 6A F6 | 	neg	arg01, local06 wz
26aac     20 68 06 F1 | 	add	ptr___system__dat__, #32
26ab0     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
26ab4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
26ab8     01 7A 66 56 |  if_ne	neg	result1, #1
26abc     00 7A 06 A6 |  if_e	mov	result1, #0
26ac0     04 00 90 FD | 	jmp	#LR__3574
26ac4                 | LR__3573
26ac4     00 7A 06 F6 | 	mov	result1, #0
26ac8                 | LR__3574
26ac8     E7 F0 03 F6 | 	mov	ptra, fp
26acc     F2 00 A0 FD | 	call	#popregs_
26ad0                 | __system___remove_ret
26ad0     2D 00 64 FD | 	ret
26ad4                 | 
26ad4                 | __system___mkdir
26ad4     05 CA 05 F6 | 	mov	COUNT_, #5
26ad8     E8 00 A0 FD | 	call	#pushregs_
26adc     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
26ae0     84 A7 06 F1 | 	add	local01, #388
26ae4     49 95 02 F6 | 	mov	arg02, arg01
26ae8     53 93 02 F6 | 	mov	arg01, local01
26aec     00 96 06 F6 | 	mov	arg03, #0
26af0     34 E6 BF FD | 	call	#__system____getvfsforfile
26af4     3D A9 0A F6 | 	mov	local02, result1 wz
26af8     10 00 90 AD |  if_e	jmp	#LR__3580
26afc     20 A8 06 F1 | 	add	local02, #32
26b00     54 95 0A FB | 	rdlong	arg02, local02 wz
26b04     20 A8 86 F1 | 	sub	local02, #32
26b08     14 00 90 5D |  if_ne	jmp	#LR__3581
26b0c                 | LR__3580
26b0c     20 68 06 F1 | 	add	ptr___system__dat__, #32
26b10     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
26b14     20 68 86 F1 | 	sub	ptr___system__dat__, #32
26b18     01 7A 66 F6 | 	neg	result1, #1
26b1c     60 00 90 FD | 	jmp	#LR__3583
26b20                 | LR__3581
26b20     38 A8 06 F1 | 	add	local02, #56
26b24     54 AB 02 FB | 	rdlong	local03, local02
26b28     55 AD 02 F6 | 	mov	local04, local03
26b2c     13 AA 46 F7 | 	zerox	local03, #19
26b30     14 AC 46 F0 | 	shr	local04, #20
26b34     02 AC 66 F0 | 	shl	local04, #2
26b38     2D AD 02 F1 | 	add	local04, __methods__
26b3c     56 AD 02 FB | 	rdlong	local04, local04
26b40     53 93 02 F6 | 	mov	arg01, local01
26b44     FF 95 06 F6 | 	mov	arg02, #511
26b48     32 AF 02 F6 | 	mov	local05, objptr
26b4c     55 65 02 F6 | 	mov	objptr, local03
26b50     2D AC 62 FD | 	call	local04
26b54     57 65 02 F6 | 	mov	objptr, local05
26b58     3D 93 0A F6 | 	mov	arg01, result1 wz
26b5c     1C 00 90 AD |  if_e	jmp	#LR__3582
26b60     49 93 6A F6 | 	neg	arg01, arg01 wz
26b64     20 68 06 F1 | 	add	ptr___system__dat__, #32
26b68     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
26b6c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
26b70     01 7A 66 56 |  if_ne	neg	result1, #1
26b74     00 7A 06 A6 |  if_e	mov	result1, #0
26b78     04 00 90 FD | 	jmp	#LR__3583
26b7c                 | LR__3582
26b7c     00 7A 06 F6 | 	mov	result1, #0
26b80                 | LR__3583
26b80     E7 F0 03 F6 | 	mov	ptra, fp
26b84     F2 00 A0 FD | 	call	#popregs_
26b88                 | __system___mkdir_ret
26b88     2D 00 64 FD | 	ret
26b8c                 | 
26b8c                 | __system___strerror
26b8c     00 92 56 F2 | 	cmps	arg01, #0 wc
26b90     08 00 90 CD |  if_b	jmp	#LR__3590
26b94     1A 92 56 F2 | 	cmps	arg01, #26 wc
26b98     04 00 90 CD |  if_b	jmp	#LR__3591
26b9c                 | LR__3590
26b9c     19 92 06 F6 | 	mov	arg01, #25
26ba0                 | LR__3591
26ba0     02 92 66 F0 | 	shl	arg01, #2
26ba4     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
26ba8     01 00 00 FF 
26bac     E0 7A 06 F1 | 	add	result1, ##736
26bb0     3D 93 02 F1 | 	add	arg01, result1
26bb4     49 7B 02 FB | 	rdlong	result1, arg01
26bb8                 | __system___strerror_ret
26bb8     2D 00 64 FD | 	ret
26bbc                 | 
26bbc                 | __system___int64_shl
26bbc     20 96 CE F7 | 	test	arg03, #32 wz
26bc0     49 95 02 56 |  if_ne	mov	arg02, arg01
26bc4     00 92 06 56 |  if_ne	mov	arg01, #0
26bc8     1F 96 CE F7 | 	test	arg03, #31 wz
26bcc     18 00 90 AD |  if_e	jmp	#LR__3600
26bd0     4B 95 62 F0 | 	shl	arg02, arg03
26bd4     49 7B 02 F6 | 	mov	result1, arg01
26bd8     4B 7D 62 F6 | 	neg	result2, arg03
26bdc     3E 7B 42 F0 | 	shr	result1, result2
26be0     3D 95 42 F5 | 	or	arg02, result1
26be4     4B 93 62 F0 | 	shl	arg01, arg03
26be8                 | LR__3600
26be8     4A 7D 02 F6 | 	mov	result2, arg02
26bec     49 7B 02 F6 | 	mov	result1, arg01
26bf0                 | __system___int64_shl_ret
26bf0     2D 00 64 FD | 	ret
26bf4                 | 
26bf4                 | __system___int64_sar
26bf4     20 96 CE F7 | 	test	arg03, #32 wz
26bf8     4A 93 02 56 |  if_ne	mov	arg01, arg02
26bfc     1F 94 C6 50 |  if_ne	sar	arg02, #31
26c00     1F 96 CE F7 | 	test	arg03, #31 wz
26c04     18 00 90 AD |  if_e	jmp	#LR__3610
26c08     4B 93 42 F0 | 	shr	arg01, arg03
26c0c     4A 7B 02 F6 | 	mov	result1, arg02
26c10     4B 7D 62 F6 | 	neg	result2, arg03
26c14     3E 7B 62 F0 | 	shl	result1, result2
26c18     3D 93 42 F5 | 	or	arg01, result1
26c1c     4B 95 C2 F0 | 	sar	arg02, arg03
26c20                 | LR__3610
26c20     4A 7D 02 F6 | 	mov	result2, arg02
26c24     49 7B 02 F6 | 	mov	result1, arg01
26c28                 | __system___int64_sar_ret
26c28     2D 00 64 FD | 	ret
26c2c                 | 
26c2c                 | __system___usepins
26c2c     14 68 06 F1 | 	add	ptr___system__dat__, #20
26c30     34 81 02 FB | 	rdlong	_var01, ptr___system__dat__
26c34     14 68 86 F1 | 	sub	ptr___system__dat__, #20
26c38     40 93 CA F7 | 	test	arg01, _var01 wz
26c3c     18 68 06 A1 |  if_e	add	ptr___system__dat__, #24
26c40     34 83 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
26c44     18 68 86 A1 |  if_e	sub	ptr___system__dat__, #24
26c48     41 95 CA A7 |  if_e	test	arg02, _var02 wz
26c4c     00 7A 06 56 |  if_ne	mov	result1, #0
26c50     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
26c54     14 68 06 F1 | 	add	ptr___system__dat__, #20
26c58     34 83 02 FB | 	rdlong	_var02, ptr___system__dat__
26c5c     49 83 42 F5 | 	or	_var02, arg01
26c60     34 83 62 FC | 	wrlong	_var02, ptr___system__dat__
26c64     04 68 06 F1 | 	add	ptr___system__dat__, #4
26c68     34 83 02 FB | 	rdlong	_var02, ptr___system__dat__
26c6c     4A 83 42 F5 | 	or	_var02, arg02
26c70     34 83 62 FC | 	wrlong	_var02, ptr___system__dat__
26c74     18 68 86 F1 | 	sub	ptr___system__dat__, #24
26c78     01 7A 66 F6 | 	neg	result1, #1
26c7c                 | __system___usepins_ret
26c7c     2D 00 64 FD | 	ret
26c80                 | 
26c80                 | __system___freepins
26c80     14 68 06 F1 | 	add	ptr___system__dat__, #20
26c84     34 81 02 FB | 	rdlong	_var01, ptr___system__dat__
26c88     49 81 22 F5 | 	andn	_var01, arg01
26c8c     34 81 62 FC | 	wrlong	_var01, ptr___system__dat__
26c90     04 68 06 F1 | 	add	ptr___system__dat__, #4
26c94     34 81 02 FB | 	rdlong	_var01, ptr___system__dat__
26c98     4A 81 22 F5 | 	andn	_var01, arg02
26c9c     34 81 62 FC | 	wrlong	_var01, ptr___system__dat__
26ca0     18 68 86 F1 | 	sub	ptr___system__dat__, #24
26ca4                 | __system___freepins_ret
26ca4     2D 00 64 FD | 	ret
26ca8                 | 
26ca8                 | __system___float_fromuns
26ca8     49 97 0A F6 | 	mov	arg03, arg01 wz
26cac     4B 7B 02 A6 |  if_e	mov	result1, arg03
26cb0     24 00 90 AD |  if_e	jmp	#LR__3620
26cb4     4B 95 92 F7 | 	encod	arg02, arg03 wc
26cb8     01 94 06 C1 |  if_b	add	arg02, #1
26cbc     01 94 86 F1 | 	sub	arg02, #1
26cc0     1F 92 06 F6 | 	mov	arg01, #31
26cc4     4A 93 82 F1 | 	sub	arg01, arg02
26cc8     49 97 62 F0 | 	shl	arg03, arg01
26ccc     02 96 46 F0 | 	shr	arg03, #2
26cd0     00 92 06 F6 | 	mov	arg01, #0
26cd4     58 09 B0 FD | 	call	#__system___float_Pack
26cd8                 | LR__3620
26cd8                 | __system___float_fromuns_ret
26cd8     2D 00 64 FD | 	ret
26cdc                 | 
26cdc                 | __system___float_add
26cdc     0F CA 05 F6 | 	mov	COUNT_, #15
26ce0     E8 00 A0 FD | 	call	#pushregs_
26ce4     49 A7 02 F6 | 	mov	local01, arg01
26ce8     4A A9 02 F6 | 	mov	local02, arg02
26cec     00 AA 06 F6 | 	mov	local03, #0
26cf0     53 AD 02 F6 | 	mov	local04, local01
26cf4     56 AF 02 F6 | 	mov	local05, local04
26cf8     16 AE 46 F7 | 	zerox	local05, #22
26cfc     56 B1 02 F6 | 	mov	local06, local04
26d00     01 B0 66 F0 | 	shl	local06, #1
26d04     18 B0 46 F0 | 	shr	local06, #24
26d08     1F AC 46 F0 | 	shr	local04, #31
26d0c     54 93 02 F6 | 	mov	arg01, local02
26d10     49 7B 02 F6 | 	mov	result1, arg01
26d14     3D B3 02 F6 | 	mov	local07, result1
26d18     59 B5 02 F6 | 	mov	local08, local07
26d1c     16 B4 46 F7 | 	zerox	local08, #22
26d20     59 B7 02 F6 | 	mov	local09, local07
26d24     01 B6 66 F0 | 	shl	local09, #1
26d28     18 B6 46 F0 | 	shr	local09, #24
26d2c     5B B9 02 F6 | 	mov	local10, local09
26d30     1F B2 46 F0 | 	shr	local07, #31
26d34     00 BA 06 F6 | 	mov	local11, #0
26d38     00 BC 06 F6 | 	mov	local12, #0
26d3c     5C B1 12 F2 | 	cmp	local06, local10 wc
26d40     5C B1 0A 32 |  if_ae	cmp	local06, local10 wz
26d44     2C 00 90 1D |  if_a	jmp	#LR__3630
26d48     5A AF 12 32 |  if_ae	cmp	local05, local08 wc
26d4c     24 00 90 3D |  if_ae	jmp	#LR__3630
26d50     57 BF 02 F6 | 	mov	local13, local05
26d54     5A AF 02 F6 | 	mov	local05, local08
26d58     5F B5 02 F6 | 	mov	local08, local13
26d5c     58 BF 02 F6 | 	mov	local13, local06
26d60     5C B1 02 F6 | 	mov	local06, local10
26d64     5F B9 02 F6 | 	mov	local10, local13
26d68     56 BF 02 F6 | 	mov	local13, local04
26d6c     59 AD 02 F6 | 	mov	local04, local07
26d70     5F B3 02 F6 | 	mov	local07, local13
26d74                 | LR__3630
26d74     FF B0 0E F2 | 	cmp	local06, #255 wz
26d78     70 01 90 AD |  if_e	jmp	#LR__3645
26d7c     00 B0 0E F2 | 	cmp	local06, #0 wz
26d80     AC 01 90 AD |  if_e	jmp	#LR__3647
26d84     17 AE 26 F4 | 	bith	local05, #23
26d88                 | LR__3631
26d88     00 B8 0E F2 | 	cmp	local10, #0 wz
26d8c     F0 01 90 AD |  if_e	jmp	#LR__3651
26d90     17 B4 26 F4 | 	bith	local08, #23
26d94                 | LR__3632
26d94     7F B0 86 F1 | 	sub	local06, #127
26d98     7F B8 86 F1 | 	sub	local10, #127
26d9c     58 C1 02 F6 | 	mov	local14, local06
26da0     5C C1 82 F1 | 	sub	local14, local10
26da4     D7 14 48 FB | 	callpa	#(@LR__3634-@LR__3633)>>2,fcache_load_ptr_
26da8                 | LR__3633
26da8     20 C0 56 F2 | 	cmps	local14, #32 wc
26dac     20 00 90 CD |  if_b	jmp	#LR__3635
26db0     5A B7 02 F6 | 	mov	local09, local08
26db4     00 BA 0E F2 | 	cmp	local11, #0 wz
26db8     6F BA 62 FD | 	wrnz	local11
26dbc     5D B7 42 F5 | 	or	local09, local11
26dc0     5B BB 02 F6 | 	mov	local11, local09
26dc4     00 B4 06 F6 | 	mov	local08, #0
26dc8     20 C0 86 F1 | 	sub	local14, #32
26dcc     D8 FF 9F FD | 	jmp	#LR__3633
26dd0                 | LR__3634
26dd0                 | LR__3635
26dd0     00 C0 0E F2 | 	cmp	local14, #0 wz
26dd4     38 00 90 AD |  if_e	jmp	#LR__3636
26dd8     5A BF 02 F6 | 	mov	local13, local08
26ddc     20 B8 06 F6 | 	mov	local10, #32
26de0     60 B9 82 F1 | 	sub	local10, local14
26de4     5C BF 62 F0 | 	shl	local13, local10
26de8     5D B9 02 F6 | 	mov	local10, local11
26dec     20 B6 06 F6 | 	mov	local09, #32
26df0     60 B7 82 F1 | 	sub	local09, local14
26df4     5B B9 6A F0 | 	shl	local10, local09 wz
26df8     60 BB 42 F0 | 	shr	local11, local14
26dfc     60 B5 42 F0 | 	shr	local08, local14
26e00     5F BB 42 F5 | 	or	local11, local13
26e04     00 C2 06 F6 | 	mov	local15, #0
26e08     01 C2 06 56 |  if_ne	mov	local15, #1
26e0c     61 BB 42 F5 | 	or	local11, local15
26e10                 | LR__3636
26e10     56 C3 02 F6 | 	mov	local15, local04
26e14     59 C3 62 F5 | 	xor	local15, local07
26e18     01 C2 CE F7 | 	test	local15, #1 wz
26e1c     18 00 90 AD |  if_e	jmp	#LR__3637
26e20     5A B5 22 F6 | 	not	local08, local08
26e24     5D BB 22 F6 | 	not	local11, local11
26e28     01 BA 0E F1 | 	add	local11, #1 wz
26e2c     00 C2 06 F6 | 	mov	local15, #0
26e30     01 C2 06 A6 |  if_e	mov	local15, #1
26e34     61 B5 02 F1 | 	add	local08, local15
26e38                 | LR__3637
26e38     5D BD 12 F1 | 	add	local12, local11 wc
26e3c     5A AF 22 F1 | 	addx	local05, local08
26e40     00 AE 56 F2 | 	cmps	local05, #0 wc
26e44     1C 00 90 3D |  if_ae	jmp	#LR__3638
26e48     01 AC 66 F5 | 	xor	local04, #1
26e4c     57 AF 22 F6 | 	not	local05, local05
26e50     5E BD 22 F6 | 	not	local12, local12
26e54     01 BC 0E F1 | 	add	local12, #1 wz
26e58     00 C2 06 F6 | 	mov	local15, #0
26e5c     01 C2 06 A6 |  if_e	mov	local15, #1
26e60     61 AF 02 F1 | 	add	local05, local15
26e64                 | LR__3638
26e64     00 80 00 FF 
26e68     00 AE 16 F2 | 	cmp	local05, ##16777216 wc
26e6c     28 00 90 CD |  if_b	jmp	#LR__3639
26e70     01 B0 06 F1 | 	add	local06, #1
26e74     5E C1 02 F6 | 	mov	local14, local12
26e78     01 C0 06 F5 | 	and	local14, #1
26e7c     01 BC 46 F0 | 	shr	local12, #1
26e80     57 C3 02 F6 | 	mov	local15, local05
26e84     1F C2 66 F0 | 	shl	local15, #31
26e88     61 BD 42 F5 | 	or	local12, local15
26e8c     60 BD 42 F5 | 	or	local12, local14
26e90     01 AE 46 F0 | 	shr	local05, #1
26e94     3C 00 90 FD | 	jmp	#LR__3644
26e98                 | LR__3639
26e98     00 40 00 FF 
26e9c     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
26ea0     30 00 90 3D |  if_ae	jmp	#LR__3643
26ea4     00 AE 0E F2 | 	cmp	local05, #0 wz
26ea8     00 BC 0E A2 |  if_e	cmp	local12, #0 wz
26eac     08 AC 46 A5 |  if_e	or	local04, #8
26eb0     01 AC 26 A5 |  if_e	andn	local04, #1
26eb4     1C 00 90 AD |  if_e	jmp	#LR__3642
26eb8                 | LR__3640
26eb8     00 40 00 FF 
26ebc     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
26ec0     10 00 90 3D |  if_ae	jmp	#LR__3641
26ec4     5E BD 12 F1 | 	add	local12, local12 wc
26ec8     57 AF 22 F1 | 	addx	local05, local05
26ecc     01 B0 86 F1 | 	sub	local06, #1
26ed0     E4 FF 9F FD | 	jmp	#LR__3640
26ed4                 | LR__3641
26ed4                 | LR__3642
26ed4                 | LR__3643
26ed4                 | LR__3644
26ed4     57 93 02 F6 | 	mov	arg01, local05
26ed8     5E 95 02 F6 | 	mov	arg02, local12
26edc     58 97 02 F6 | 	mov	arg03, local06
26ee0     56 99 02 F6 | 	mov	arg04, local04
26ee4     50 34 B0 FD | 	call	#__system__pack_0698
26ee8     DC 00 90 FD | 	jmp	#LR__3655
26eec                 | LR__3645
26eec     FF B8 0E F2 | 	cmp	local10, #255 wz
26ef0     10 00 90 5D |  if_ne	jmp	#LR__3646
26ef4     56 B3 0A F2 | 	cmp	local07, local04 wz
26ef8     00 F8 3F 5F 
26efc     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
26f00     C4 00 90 5D |  if_ne	jmp	#LR__3655
26f04                 | LR__3646
26f04     00 AE 0E F2 | 	cmp	local05, #0 wz
26f08     00 F8 3F 5F 
26f0c     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
26f10     B4 00 90 5D |  if_ne	jmp	#LR__3655
26f14     5E 95 02 F6 | 	mov	arg02, local12
26f18     58 97 02 F6 | 	mov	arg03, local06
26f1c     56 99 02 F6 | 	mov	arg04, local04
26f20     02 98 46 F5 | 	or	arg04, #2
26f24     57 93 02 F6 | 	mov	arg01, local05
26f28     0C 34 B0 FD | 	call	#__system__pack_0698
26f2c     98 00 90 FD | 	jmp	#LR__3655
26f30                 | LR__3647
26f30     00 AE 0E F2 | 	cmp	local05, #0 wz
26f34     28 00 90 AD |  if_e	jmp	#LR__3650
26f38     01 AE 66 F0 | 	shl	local05, #1
26f3c     D7 0E 48 FB | 	callpa	#(@LR__3649-@LR__3648)>>2,fcache_load_ptr_
26f40                 | LR__3648
26f40     00 40 00 FF 
26f44     00 AE 16 F2 | 	cmp	local05, ##8388608 wc
26f48     58 C3 02 C6 |  if_b	mov	local15, local06
26f4c     01 C2 86 C1 |  if_b	sub	local15, #1
26f50     61 B1 02 C6 |  if_b	mov	local06, local15
26f54     01 AE 66 C0 |  if_b	shl	local05, #1
26f58     E4 FF 9F CD |  if_b	jmp	#LR__3648
26f5c                 | LR__3649
26f5c     28 FE 9F FD | 	jmp	#LR__3631
26f60                 | LR__3650
26f60     59 AD 02 F5 | 	and	local04, local07
26f64     56 99 02 F6 | 	mov	arg04, local04
26f68     08 98 46 F5 | 	or	arg04, #8
26f6c     00 92 06 F6 | 	mov	arg01, #0
26f70     00 94 06 F6 | 	mov	arg02, #0
26f74     00 96 06 F6 | 	mov	arg03, #0
26f78     BC 33 B0 FD | 	call	#__system__pack_0698
26f7c     48 00 90 FD | 	jmp	#LR__3655
26f80                 | LR__3651
26f80     00 B4 0E F2 | 	cmp	local08, #0 wz
26f84     28 00 90 AD |  if_e	jmp	#LR__3654
26f88     01 B4 66 F0 | 	shl	local08, #1
26f8c     D7 0E 48 FB | 	callpa	#(@LR__3653-@LR__3652)>>2,fcache_load_ptr_
26f90                 | LR__3652
26f90     00 40 00 FF 
26f94     00 B4 16 F2 | 	cmp	local08, ##8388608 wc
26f98     5C C3 02 C6 |  if_b	mov	local15, local10
26f9c     01 C2 86 C1 |  if_b	sub	local15, #1
26fa0     61 B9 02 C6 |  if_b	mov	local10, local15
26fa4     01 B4 66 C0 |  if_b	shl	local08, #1
26fa8     E4 FF 9F CD |  if_b	jmp	#LR__3652
26fac                 | LR__3653
26fac     E4 FD 9F FD | 	jmp	#LR__3632
26fb0                 | LR__3654
26fb0     7F B0 86 F1 | 	sub	local06, #127
26fb4     57 93 02 F6 | 	mov	arg01, local05
26fb8     5E 95 02 F6 | 	mov	arg02, local12
26fbc     58 97 02 F6 | 	mov	arg03, local06
26fc0     56 99 02 F6 | 	mov	arg04, local04
26fc4     70 33 B0 FD | 	call	#__system__pack_0698
26fc8                 | LR__3655
26fc8     E7 F0 03 F6 | 	mov	ptra, fp
26fcc     F2 00 A0 FD | 	call	#popregs_
26fd0                 | __system___float_add_ret
26fd0     2D 00 64 FD | 	ret
26fd4                 | 
26fd4                 | __system___float_sqrt
26fd4     04 CA 05 F6 | 	mov	COUNT_, #4
26fd8     E8 00 A0 FD | 	call	#pushregs_
26fdc     49 A7 02 F6 | 	mov	local01, arg01
26fe0     49 7B 02 F6 | 	mov	result1, arg01
26fe4     3D A9 02 F6 | 	mov	local02, result1
26fe8     54 AB 02 F6 | 	mov	local03, local02
26fec     16 AA 46 F7 | 	zerox	local03, #22
26ff0     54 AD 02 F6 | 	mov	local04, local02
26ff4     01 AC 66 F0 | 	shl	local04, #1
26ff8     18 AC 4E F0 | 	shr	local04, #24 wz
26ffc     1F A8 46 F0 | 	shr	local02, #31
27000     70 00 90 AD |  if_e	jmp	#LR__3661
27004     17 AA 26 F4 | 	bith	local03, #23
27008                 | LR__3660
27008     00 A8 0E F2 | 	cmp	local02, #0 wz
2700c     00 F8 3F 5F 
27010     00 7A 06 56 |  if_ne	mov	result1, ##2146435072
27014     88 00 90 5D |  if_ne	jmp	#LR__3664
27018     FF AC 0E F2 | 	cmp	local04, #255 wz
2701c     53 7B 02 A6 |  if_e	mov	result1, local01
27020     7C 00 90 AD |  if_e	jmp	#LR__3664
27024     7F AC 86 F1 | 	sub	local04, #127
27028     01 AC CE F7 | 	test	local04, #1 wz
2702c     01 AA 66 50 |  if_ne	shl	local03, #1
27030     05 AA 66 F0 | 	shl	local03, #5
27034     55 01 38 FD | 	qsqrt	#0, local03
27038     01 AC 86 51 |  if_ne	sub	local04, #1
2703c     56 AD 52 F6 | 	abs	local04, local04 wc
27040     01 AC 46 F0 | 	shr	local04, #1
27044     56 97 82 F6 | 	negc	arg03, local04
27048     54 99 02 F6 | 	mov	arg04, local02
2704c     18 92 62 FD | 	getqx	arg01
27050     49 95 02 F6 | 	mov	arg02, arg01
27054     19 94 66 F0 | 	shl	arg02, #25
27058     07 92 46 F0 | 	shr	arg01, #7
2705c     00 80 00 FF 
27060     01 92 16 F2 | 	cmp	arg01, ##16777217 wc
27064     01 96 06 31 |  if_ae	add	arg03, #1
27068     01 92 46 30 |  if_ae	shr	arg01, #1
2706c     C8 32 B0 FD | 	call	#__system__pack_0698
27070     2C 00 90 FD | 	jmp	#LR__3664
27074                 | LR__3661
27074     00 AA 0E F2 | 	cmp	local03, #0 wz
27078     53 7B 02 A6 |  if_e	mov	result1, local01
2707c     20 00 90 AD |  if_e	jmp	#LR__3664
27080     01 AA 66 F0 | 	shl	local03, #1
27084     D7 0A 48 FB | 	callpa	#(@LR__3663-@LR__3662)>>2,fcache_load_ptr_
27088                 | LR__3662
27088     00 40 00 FF 
2708c     00 AA 16 F2 | 	cmp	local03, ##8388608 wc
27090     01 AC 86 C1 |  if_b	sub	local04, #1
27094     01 AA 66 C0 |  if_b	shl	local03, #1
27098     EC FF 9F CD |  if_b	jmp	#LR__3662
2709c                 | LR__3663
2709c     68 FF 9F FD | 	jmp	#LR__3660
270a0                 | LR__3664
270a0     E7 F0 03 F6 | 	mov	ptra, fp
270a4     F2 00 A0 FD | 	call	#popregs_
270a8                 | __system___float_sqrt_ret
270a8     2D 00 64 FD | 	ret
270ac                 | 
270ac                 | __system___float_mul
270ac     0B CA 05 F6 | 	mov	COUNT_, #11
270b0     E8 00 A0 FD | 	call	#pushregs_
270b4     49 A7 02 F6 | 	mov	local01, arg01
270b8     4A A9 02 F6 | 	mov	local02, arg02
270bc     53 AB 02 F6 | 	mov	local03, local01
270c0     55 AD 02 F6 | 	mov	local04, local03
270c4     16 AC 46 F7 | 	zerox	local04, #22
270c8     55 AF 02 F6 | 	mov	local05, local03
270cc     01 AE 66 F0 | 	shl	local05, #1
270d0     18 AE 46 F0 | 	shr	local05, #24
270d4     1F AA 46 F0 | 	shr	local03, #31
270d8     54 7B 02 F6 | 	mov	result1, local02
270dc     3D B1 02 F6 | 	mov	local06, result1
270e0     58 B3 02 F6 | 	mov	local07, local06
270e4     16 B2 46 F7 | 	zerox	local07, #22
270e8     58 B5 02 F6 | 	mov	local08, local06
270ec     01 B4 66 F0 | 	shl	local08, #1
270f0     18 B4 46 F0 | 	shr	local08, #24
270f4     1F B0 46 F0 | 	shr	local06, #31
270f8     58 AB 62 F5 | 	xor	local03, local06
270fc     FF AE 0E F2 | 	cmp	local05, #255 wz
27100     90 00 90 AD |  if_e	jmp	#LR__3673
27104     FF B4 0E F2 | 	cmp	local08, #255 wz
27108     D8 00 90 AD |  if_e	jmp	#LR__3675
2710c     00 AE 0E F2 | 	cmp	local05, #0 wz
27110     0C 01 90 AD |  if_e	jmp	#LR__3676
27114     17 AC 26 F4 | 	bith	local04, #23
27118                 | LR__3670
27118     00 B4 0E F2 | 	cmp	local08, #0 wz
2711c     44 01 90 AD |  if_e	jmp	#LR__3680
27120     17 B2 26 F4 | 	bith	local07, #23
27124                 | LR__3671
27124     56 A9 02 F6 | 	mov	local02, local04
27128     04 A8 66 F0 | 	shl	local02, #4
2712c     59 B1 02 F6 | 	mov	local06, local07
27130     05 B0 66 F0 | 	shl	local06, #5
27134     58 A9 02 FD | 	qmul	local02, local06
27138     5A AF 02 F1 | 	add	local05, local08
2713c     FE AE 86 F1 | 	sub	local05, #254
27140     57 B7 02 F6 | 	mov	local09, local05
27144     04 AC 66 F0 | 	shl	local04, #4
27148     05 B2 66 F0 | 	shl	local07, #5
2714c     18 B8 62 FD | 	getqx	local10
27150     59 AD 02 FD | 	qmul	local04, local07
27154     19 BA 62 FD | 	getqy	local11
27158     00 80 00 FF 
2715c     00 BA 16 F2 | 	cmp	local11, ##16777216 wc
27160     18 00 90 CD |  if_b	jmp	#LR__3672
27164     01 B6 06 F1 | 	add	local09, #1
27168     01 B8 46 F0 | 	shr	local10, #1
2716c     5D B5 02 F6 | 	mov	local08, local11
27170     1F B4 66 F0 | 	shl	local08, #31
27174     5A B9 42 F5 | 	or	local10, local08
27178     01 BA 46 F0 | 	shr	local11, #1
2717c                 | LR__3672
2717c     5D 93 02 F6 | 	mov	arg01, local11
27180     5C 95 02 F6 | 	mov	arg02, local10
27184     5B 97 02 F6 | 	mov	arg03, local09
27188     55 99 02 F6 | 	mov	arg04, local03
2718c     A8 31 B0 FD | 	call	#__system__pack_0698
27190     10 01 90 FD | 	jmp	#LR__3684
27194                 | LR__3673
27194     00 AC 0E F2 | 	cmp	local04, #0 wz
27198     53 7B 02 56 |  if_ne	mov	result1, local01
2719c     04 01 90 5D |  if_ne	jmp	#LR__3684
271a0     FF B4 56 F2 | 	cmps	local08, #255 wc
271a4     00 B4 0E C2 |  if_b	cmp	local08, #0 wz
271a8     00 B2 0E 82 |  if_c_and_z	cmp	local07, #0 wz
271ac     18 00 90 4D |  if_c_and_nz	jmp	#LR__3674
271b0     00 F8 3F CF 
271b4     00 7A 06 C6 |  if_b	mov	result1, ##2146435072
271b8     E8 00 90 CD |  if_b	jmp	#LR__3684
271bc     00 B2 0E F2 | 	cmp	local07, #0 wz
271c0     54 7B 02 56 |  if_ne	mov	result1, local02
271c4     DC 00 90 5D |  if_ne	jmp	#LR__3684
271c8                 | LR__3674
271c8     02 AA 46 F5 | 	or	local03, #2
271cc     00 92 06 F6 | 	mov	arg01, #0
271d0     00 94 06 F6 | 	mov	arg02, #0
271d4     57 97 02 F6 | 	mov	arg03, local05
271d8     55 99 02 F6 | 	mov	arg04, local03
271dc     58 31 B0 FD | 	call	#__system__pack_0698
271e0     C0 00 90 FD | 	jmp	#LR__3684
271e4                 | LR__3675
271e4     00 AE 0E F2 | 	cmp	local05, #0 wz
271e8     00 AC 0E A2 |  if_e	cmp	local04, #0 wz
271ec     00 F8 3F AF 
271f0     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
271f4     AC 00 90 AD |  if_e	jmp	#LR__3684
271f8     00 B2 0E F2 | 	cmp	local07, #0 wz
271fc     54 7B 02 56 |  if_ne	mov	result1, local02
27200     A0 00 90 5D |  if_ne	jmp	#LR__3684
27204     5A 97 02 F6 | 	mov	arg03, local08
27208     55 99 02 F6 | 	mov	arg04, local03
2720c     02 98 46 F5 | 	or	arg04, #2
27210     00 92 06 F6 | 	mov	arg01, #0
27214     00 94 06 F6 | 	mov	arg02, #0
27218     1C 31 B0 FD | 	call	#__system__pack_0698
2721c     84 00 90 FD | 	jmp	#LR__3684
27220                 | LR__3676
27220     00 AC 0E F2 | 	cmp	local04, #0 wz
27224     20 00 90 AD |  if_e	jmp	#LR__3679
27228     01 AC 66 F0 | 	shl	local04, #1
2722c     D7 0A 48 FB | 	callpa	#(@LR__3678-@LR__3677)>>2,fcache_load_ptr_
27230                 | LR__3677
27230     00 40 00 FF 
27234     00 AC 16 F2 | 	cmp	local04, ##8388608 wc
27238     01 AE 86 C1 |  if_b	sub	local05, #1
2723c     01 AC 66 C0 |  if_b	shl	local04, #1
27240     EC FF 9F CD |  if_b	jmp	#LR__3677
27244                 | LR__3678
27244     D0 FE 9F FD | 	jmp	#LR__3670
27248                 | LR__3679
27248     08 AA 46 F5 | 	or	local03, #8
2724c     00 92 06 F6 | 	mov	arg01, #0
27250     00 94 06 F6 | 	mov	arg02, #0
27254     00 96 06 F6 | 	mov	arg03, #0
27258     55 99 02 F6 | 	mov	arg04, local03
2725c     D8 30 B0 FD | 	call	#__system__pack_0698
27260     40 00 90 FD | 	jmp	#LR__3684
27264                 | LR__3680
27264     00 B2 0E F2 | 	cmp	local07, #0 wz
27268     20 00 90 AD |  if_e	jmp	#LR__3683
2726c     01 B2 66 F0 | 	shl	local07, #1
27270     D7 0A 48 FB | 	callpa	#(@LR__3682-@LR__3681)>>2,fcache_load_ptr_
27274                 | LR__3681
27274     00 40 00 FF 
27278     00 B2 16 F2 | 	cmp	local07, ##8388608 wc
2727c     01 B4 86 C1 |  if_b	sub	local08, #1
27280     01 B2 66 C0 |  if_b	shl	local07, #1
27284     EC FF 9F CD |  if_b	jmp	#LR__3681
27288                 | LR__3682
27288     98 FE 9F FD | 	jmp	#LR__3671
2728c                 | LR__3683
2728c     08 AA 46 F5 | 	or	local03, #8
27290     00 92 06 F6 | 	mov	arg01, #0
27294     00 94 06 F6 | 	mov	arg02, #0
27298     00 96 06 F6 | 	mov	arg03, #0
2729c     55 99 02 F6 | 	mov	arg04, local03
272a0     94 30 B0 FD | 	call	#__system__pack_0698
272a4                 | LR__3684
272a4     E7 F0 03 F6 | 	mov	ptra, fp
272a8     F2 00 A0 FD | 	call	#popregs_
272ac                 | __system___float_mul_ret
272ac     2D 00 64 FD | 	ret
272b0                 | 
272b0                 | __system___float_div
272b0     0E CA 05 F6 | 	mov	COUNT_, #14
272b4     E8 00 A0 FD | 	call	#pushregs_
272b8     49 AB 02 F6 | 	mov	local03, arg01
272bc     4A AD 02 F6 | 	mov	local04, arg02
272c0     55 AF 02 F6 | 	mov	local05, local03
272c4     57 B1 02 F6 | 	mov	local06, local05
272c8     16 B0 46 F7 | 	zerox	local06, #22
272cc     57 B3 02 F6 | 	mov	local07, local05
272d0     01 B2 66 F0 | 	shl	local07, #1
272d4     18 B2 46 F0 | 	shr	local07, #24
272d8     1F AE 46 F0 | 	shr	local05, #31
272dc     56 7B 02 F6 | 	mov	result1, local04
272e0     3D B5 02 F6 | 	mov	local08, result1
272e4     5A B7 02 F6 | 	mov	local09, local08
272e8     16 B6 46 F7 | 	zerox	local09, #22
272ec     5A B9 02 F6 | 	mov	local10, local08
272f0     01 B8 66 F0 | 	shl	local10, #1
272f4     18 B8 46 F0 | 	shr	local10, #24
272f8     1F B4 46 F0 | 	shr	local08, #31
272fc     5A AF 62 F5 | 	xor	local05, local08
27300     FF B2 0E F2 | 	cmp	local07, #255 wz
27304     D4 00 90 AD |  if_e	jmp	#LR__3695
27308     FF B8 0E F2 | 	cmp	local10, #255 wz
2730c     04 01 90 AD |  if_e	jmp	#LR__3696
27310     00 B2 0E F2 | 	cmp	local07, #0 wz
27314     24 01 90 AD |  if_e	jmp	#LR__3697
27318     17 B0 26 F4 | 	bith	local06, #23
2731c                 | LR__3690
2731c     00 B8 0E F2 | 	cmp	local10, #0 wz
27320     70 01 90 AD |  if_e	jmp	#LR__3701
27324     17 B6 26 F4 | 	bith	local09, #23
27328                 | LR__3691
27328     5C B3 82 F1 | 	sub	local07, local10
2732c     59 BB 02 F6 | 	mov	local11, local07
27330     58 93 02 F6 | 	mov	arg01, local06
27334     02 92 46 F0 | 	shr	arg01, #2
27338     1E B0 66 F0 | 	shl	local06, #30
2733c     58 95 02 F6 | 	mov	arg02, local06
27340     5B 97 02 F6 | 	mov	arg03, local09
27344     28 92 62 FD | 	setq	arg01
27348     4B 95 12 FD | 	qdiv	arg02, arg03
2734c     00 BC 06 F6 | 	mov	local12, #0
27350     18 A6 62 FD | 	getqx	local01
27354     19 7C 62 FD | 	getqy	result2
27358     3E A9 02 F6 | 	mov	local02, result2
2735c     53 BF 02 F6 | 	mov	local13, local01
27360     00 A8 4E F2 | 	cmps	local02, #0 wz
27364     5F C1 02 F6 | 	mov	local14, local13
27368     19 C0 66 F0 | 	shl	local14, #25
2736c     01 BC 06 56 |  if_ne	mov	local12, #1
27370     5E C1 42 F5 | 	or	local14, local12
27374     07 BE 46 F0 | 	shr	local13, #7
27378     00 80 00 FF 
2737c     00 BE 16 F2 | 	cmp	local13, ##16777216 wc
27380     1C 00 90 CD |  if_b	jmp	#LR__3692
27384     01 BA 06 F1 | 	add	local11, #1
27388     01 C0 46 F0 | 	shr	local14, #1
2738c     5F BD 02 F6 | 	mov	local12, local13
27390     1F BC 66 F0 | 	shl	local12, #31
27394     5E C1 42 F5 | 	or	local14, local12
27398     01 BE 46 F0 | 	shr	local13, #1
2739c     24 00 90 FD | 	jmp	#LR__3694
273a0                 | LR__3692
273a0     00 40 00 FF 
273a4     00 BE 16 F2 | 	cmp	local13, ##8388608 wc
273a8     18 00 90 3D |  if_ae	jmp	#LR__3693
273ac     01 BA 86 F1 | 	sub	local11, #1
273b0     01 BE 66 F0 | 	shl	local13, #1
273b4     60 BD 02 F6 | 	mov	local12, local14
273b8     1F BC 46 F0 | 	shr	local12, #31
273bc     5E BF 42 F5 | 	or	local13, local12
273c0     01 C0 66 F0 | 	shl	local14, #1
273c4                 | LR__3693
273c4                 | LR__3694
273c4     5F 93 02 F6 | 	mov	arg01, local13
273c8     60 95 02 F6 | 	mov	arg02, local14
273cc     5D 97 02 F6 | 	mov	arg03, local11
273d0     57 99 02 F6 | 	mov	arg04, local05
273d4     60 2F B0 FD | 	call	#__system__pack_0698
273d8     F8 00 90 FD | 	jmp	#LR__3705
273dc                 | LR__3695
273dc     00 B0 0E F2 | 	cmp	local06, #0 wz
273e0     55 7B 02 56 |  if_ne	mov	result1, local03
273e4     EC 00 90 5D |  if_ne	jmp	#LR__3705
273e8     FF B8 0E F2 | 	cmp	local10, #255 wz
273ec     00 F8 3F AF 
273f0     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
273f4     DC 00 90 AD |  if_e	jmp	#LR__3705
273f8     02 AE 46 F5 | 	or	local05, #2
273fc     00 92 06 F6 | 	mov	arg01, #0
27400     00 94 06 F6 | 	mov	arg02, #0
27404     59 97 02 F6 | 	mov	arg03, local07
27408     57 99 02 F6 | 	mov	arg04, local05
2740c     28 2F B0 FD | 	call	#__system__pack_0698
27410     C0 00 90 FD | 	jmp	#LR__3705
27414                 | LR__3696
27414     00 B6 0E F2 | 	cmp	local09, #0 wz
27418     56 7B 02 56 |  if_ne	mov	result1, local04
2741c     B4 00 90 5D |  if_ne	jmp	#LR__3705
27420     57 99 02 F6 | 	mov	arg04, local05
27424     08 98 46 F5 | 	or	arg04, #8
27428     00 92 06 F6 | 	mov	arg01, #0
2742c     00 94 06 F6 | 	mov	arg02, #0
27430     00 96 06 F6 | 	mov	arg03, #0
27434     00 2F B0 FD | 	call	#__system__pack_0698
27438     98 00 90 FD | 	jmp	#LR__3705
2743c                 | LR__3697
2743c     00 B0 0E F2 | 	cmp	local06, #0 wz
27440     20 00 90 AD |  if_e	jmp	#LR__3700
27444     01 B0 66 F0 | 	shl	local06, #1
27448     D7 0A 48 FB | 	callpa	#(@LR__3699-@LR__3698)>>2,fcache_load_ptr_
2744c                 | LR__3698
2744c     00 40 00 FF 
27450     00 B0 16 F2 | 	cmp	local06, ##8388608 wc
27454     01 B2 86 C1 |  if_b	sub	local07, #1
27458     01 B0 66 C0 |  if_b	shl	local06, #1
2745c     EC FF 9F CD |  if_b	jmp	#LR__3698
27460                 | LR__3699
27460     B8 FE 9F FD | 	jmp	#LR__3690
27464                 | LR__3700
27464     00 B8 0E F2 | 	cmp	local10, #0 wz
27468     00 B6 0E A2 |  if_e	cmp	local09, #0 wz
2746c     00 F8 3F AF 
27470     00 7A 06 A6 |  if_e	mov	result1, ##2146435072
27474     5C 00 90 AD |  if_e	jmp	#LR__3705
27478     57 99 02 F6 | 	mov	arg04, local05
2747c     08 98 46 F5 | 	or	arg04, #8
27480     00 92 06 F6 | 	mov	arg01, #0
27484     00 94 06 F6 | 	mov	arg02, #0
27488     00 96 06 F6 | 	mov	arg03, #0
2748c     A8 2E B0 FD | 	call	#__system__pack_0698
27490     40 00 90 FD | 	jmp	#LR__3705
27494                 | LR__3701
27494     00 B6 0E F2 | 	cmp	local09, #0 wz
27498     20 00 90 AD |  if_e	jmp	#LR__3704
2749c     01 B6 66 F0 | 	shl	local09, #1
274a0     D7 0A 48 FB | 	callpa	#(@LR__3703-@LR__3702)>>2,fcache_load_ptr_
274a4                 | LR__3702
274a4     00 40 00 FF 
274a8     00 B6 16 F2 | 	cmp	local09, ##8388608 wc
274ac     01 B8 86 C1 |  if_b	sub	local10, #1
274b0     01 B6 66 C0 |  if_b	shl	local09, #1
274b4     EC FF 9F CD |  if_b	jmp	#LR__3702
274b8                 | LR__3703
274b8     6C FE 9F FD | 	jmp	#LR__3691
274bc                 | LR__3704
274bc     02 AE 46 F5 | 	or	local05, #2
274c0     00 92 06 F6 | 	mov	arg01, #0
274c4     00 94 06 F6 | 	mov	arg02, #0
274c8     00 96 06 F6 | 	mov	arg03, #0
274cc     57 99 02 F6 | 	mov	arg04, local05
274d0     64 2E B0 FD | 	call	#__system__pack_0698
274d4                 | LR__3705
274d4     E7 F0 03 F6 | 	mov	ptra, fp
274d8     F2 00 A0 FD | 	call	#popregs_
274dc                 | __system___float_div_ret
274dc     2D 00 64 FD | 	ret
274e0                 | 
274e0                 | __system___float_cmp
274e0     00 C0 3F FF 
274e4     01 92 56 F2 | 	cmps	arg01, ##2139095041 wc
274e8     00 C0 3F CF 
274ec     01 94 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
274f0     4B 7B 02 36 |  if_ae	mov	result1, arg03
274f4     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
274f8     00 C0 7F FF 
274fc     01 92 16 F2 | 	cmp	arg01, ##-8388607 wc
27500     00 C0 7F CF 
27504     01 92 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
27508     4B 7B 02 36 |  if_ae	mov	result1, arg03
2750c     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
27510     00 92 56 F2 | 	cmps	arg01, #0 wc
27514     2C 00 90 3D |  if_ae	jmp	#LR__3710
27518     00 94 56 F2 | 	cmps	arg02, #0 wc
2751c     4A 7B 02 C6 |  if_b	mov	result1, arg02
27520     49 7B 82 C1 |  if_b	sub	result1, arg01
27524     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
27528     00 94 0E F2 | 	cmp	arg02, #0 wz
2752c     00 00 40 AF 
27530     00 92 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
27534     00 7A 06 A6 |  if_e	mov	result1, #0
27538     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2753c     01 7A 66 F6 | 	neg	result1, #1
27540     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
27544                 | LR__3710
27544     00 94 56 F2 | 	cmps	arg02, #0 wc
27548     1C 00 90 3D |  if_ae	jmp	#LR__3711
2754c     00 92 0E F2 | 	cmp	arg01, #0 wz
27550     00 00 40 AF 
27554     00 94 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
27558     00 7A 06 A6 |  if_e	mov	result1, #0
2755c     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
27560     01 7A 06 F6 | 	mov	result1, #1
27564     08 00 90 FD | 	jmp	#__system___float_cmp_ret
27568                 | LR__3711
27568     4A 93 82 F1 | 	sub	arg01, arg02
2756c     49 7B 02 F6 | 	mov	result1, arg01
27570                 | __system___float_cmp_ret
27570     2D 00 64 FD | 	ret
27574                 | 
27574                 | __system___float_tointeger
27574     02 CA 05 F6 | 	mov	COUNT_, #2
27578     E8 00 A0 FD | 	call	#pushregs_
2757c     5C 00 B0 FD | 	call	#__system___float_Unpack
27580     3D A7 02 F6 | 	mov	local01, result1
27584     1F 7C 56 F2 | 	cmps	result2, #31 wc
27588     00 A6 0E 32 |  if_ae	cmp	local01, #0 wz
2758c     1F A8 C6 19 |  if_a	decod	local02, #31
27590     1E A8 CE 29 |  if_nc_and_z	bmask	local02, #30
27594     54 7F 02 36 |  if_ae	mov	result3, local02
27598     30 00 90 3D |  if_ae	jmp	#LR__3721
2759c     FF FF 7F FF 
275a0     FF 7D 56 F2 | 	cmps	result2, ##-1 wc
275a4     00 7E 06 C6 |  if_b	mov	result3, #0
275a8     20 00 90 CD |  if_b	jmp	#LR__3720
275ac     02 7E 66 F0 | 	shl	result3, #2
275b0     1E A8 06 F6 | 	mov	local02, #30
275b4     3E A9 82 F1 | 	sub	local02, result2
275b8     54 7F 42 F0 | 	shr	result3, local02
275bc     4A 7F 02 F1 | 	add	result3, arg02
275c0     01 7E 46 F0 | 	shr	result3, #1
275c4     00 A6 0E F2 | 	cmp	local01, #0 wz
275c8     3F 7F 62 56 |  if_ne	neg	result3, result3
275cc                 | LR__3720
275cc                 | LR__3721
275cc     3F 7B 02 F6 | 	mov	result1, result3
275d0     E7 F0 03 F6 | 	mov	ptra, fp
275d4     F2 00 A0 FD | 	call	#popregs_
275d8                 | __system___float_tointeger_ret
275d8     2D 00 64 FD | 	ret
275dc                 | 
275dc                 | __system___float_Unpack
275dc     49 81 02 F6 | 	mov	_var01, arg01
275e0     1F 80 46 F0 | 	shr	_var01, #31
275e4     49 83 02 F6 | 	mov	_var02, arg01
275e8     01 82 66 F0 | 	shl	_var02, #1
275ec     18 82 4E F0 | 	shr	_var02, #24 wz
275f0     17 93 06 F4 | 	bitl	arg01, #279
275f4     06 92 66 50 |  if_ne	shl	arg01, #6
275f8     1D 92 26 54 |  if_ne	bith	arg01, #29
275fc     1C 00 90 5D |  if_ne	jmp	#LR__3730
27600     49 85 92 F7 | 	encod	_var03, arg01 wc
27604     01 84 06 C1 |  if_b	add	_var03, #1
27608     17 84 86 F1 | 	sub	_var03, #23
2760c     42 83 02 F6 | 	mov	_var02, _var03
27610     07 7C 06 F6 | 	mov	result2, #7
27614     42 7D 82 F1 | 	sub	result2, _var03
27618     3E 93 62 F0 | 	shl	arg01, result2
2761c                 | LR__3730
2761c     7F 82 86 F1 | 	sub	_var02, #127
27620     49 7F 02 F6 | 	mov	result3, arg01
27624     40 7B 02 F6 | 	mov	result1, _var01
27628     41 7D 02 F6 | 	mov	result2, _var02
2762c                 | __system___float_Unpack_ret
2762c     2D 00 64 FD | 	ret
27630                 | 
27630                 | __system___float_Pack
27630     00 80 06 F6 | 	mov	_var01, #0
27634     00 96 0E F2 | 	cmp	arg03, #0 wz
27638     8C 00 90 AD |  if_e	jmp	#LR__3741
2763c     4B 83 92 F7 | 	encod	_var02, arg03 wc
27640     01 82 06 C1 |  if_b	add	_var02, #1
27644     21 80 06 F6 | 	mov	_var01, #33
27648     41 81 82 F1 | 	sub	_var01, _var02
2764c     40 97 62 F0 | 	shl	arg03, _var01
27650     03 82 06 F6 | 	mov	_var02, #3
27654     40 83 82 F1 | 	sub	_var02, _var01
27658     41 95 02 F1 | 	add	arg02, _var02
2765c     4A 85 02 F6 | 	mov	_var03, arg02
27660     00 97 06 F1 | 	add	arg03, #256
27664     4B 83 02 F6 | 	mov	_var02, arg03
27668     FF 82 2E F5 | 	andn	_var02, #255 wz
2766c     01 84 06 A1 |  if_e	add	_var03, #1
27670     7F 84 06 F1 | 	add	_var03, #127
27674     FF FF 7F FF 
27678     E9 85 46 F3 | 	fges	_var03, ##-23
2767c     FF 84 66 F3 | 	fles	_var03, #255
27680     01 84 56 F2 | 	cmps	_var03, #1 wc
27684     1C 00 90 3D |  if_ae	jmp	#LR__3740
27688     01 96 46 F0 | 	shr	arg03, #1
2768c     1F 82 C6 F9 | 	decod	_var02, #31
27690     4B 83 02 F1 | 	add	_var02, arg03
27694     42 85 62 F6 | 	neg	_var03, _var03
27698     42 83 42 F0 | 	shr	_var02, _var03
2769c     41 97 02 F6 | 	mov	arg03, _var02
276a0     00 84 06 F6 | 	mov	_var03, #0
276a4                 | LR__3740
276a4     49 7B 02 F6 | 	mov	result1, arg01
276a8     1F 7A 66 F0 | 	shl	result1, #31
276ac     42 83 02 F6 | 	mov	_var02, _var03
276b0     17 82 66 F0 | 	shl	_var02, #23
276b4     41 7B 42 F5 | 	or	result1, _var02
276b8     4B 87 02 F6 | 	mov	_var04, arg03
276bc     09 86 46 F0 | 	shr	_var04, #9
276c0     43 7B 42 F5 | 	or	result1, _var04
276c4     04 00 90 FD | 	jmp	#__system___float_Pack_ret
276c8                 | LR__3741
276c8     40 7B 02 F6 | 	mov	result1, _var01
276cc                 | __system___float_Pack_ret
276cc     2D 00 64 FD | 	ret
276d0                 | 
276d0                 | __system___basic_print_float
276d0     05 CA 05 F6 | 	mov	COUNT_, #5
276d4     E8 00 A0 FD | 	call	#pushregs_
276d8     49 A7 02 F6 | 	mov	local01, arg01
276dc     4A A9 02 F6 | 	mov	local02, arg02
276e0     4B AB 0A F6 | 	mov	local03, arg03 wz
276e4     4C AD 02 F6 | 	mov	local04, arg04
276e8     14 00 90 5D |  if_ne	jmp	#LR__3750
276ec     23 AC 0E F2 | 	cmp	local04, #35 wz
276f0     80 02 10 AF 
276f4     00 AE 06 A6 |  if_e	mov	local05, ##537198592
276f8     1D AE C6 59 |  if_ne	decod	local05, #29
276fc     57 AB 02 F6 | 	mov	local03, local05
27700                 | LR__3750
27700     53 93 02 F6 | 	mov	arg01, local01
27704     A0 28 B0 FD | 	call	#__system___gettxfunc
27708     3D AF 0A F6 | 	mov	local05, result1 wz
2770c     00 7A 06 A6 |  if_e	mov	result1, #0
27710     57 93 02 56 |  if_ne	mov	arg01, local05
27714     55 95 02 56 |  if_ne	mov	arg02, local03
27718     54 97 02 56 |  if_ne	mov	arg03, local02
2771c     56 99 02 56 |  if_ne	mov	arg04, local04
27720     00 E4 BF 5D |  if_ne	call	#__system___fmtfloat
27724     E7 F0 03 F6 | 	mov	ptra, fp
27728     F2 00 A0 FD | 	call	#popregs_
2772c                 | __system___basic_print_float_ret
2772c     2D 00 64 FD | 	ret
27730                 | 
27730                 | __system____builtin_atoi
27730     07 CA 05 F6 | 	mov	COUNT_, #7
27734     E8 00 A0 FD | 	call	#pushregs_
27738                 | __system____builtin_atoi_enter
27738     49 A7 02 F6 | 	mov	local01, arg01
2773c     4A A9 02 F6 | 	mov	local02, arg02
27740     00 AA 06 F6 | 	mov	local03, #0
27744     00 AC 06 F6 | 	mov	local04, #0
27748     00 AE 06 F6 | 	mov	local05, #0
2774c     D7 08 48 FB | 	callpa	#(@LR__3761-@LR__3760)>>2,fcache_load_ptr_
27750                 | LR__3760
27750     53 B1 C2 FA | 	rdbyte	local06, local01
27754     20 B0 0E F2 | 	cmp	local06, #32 wz
27758     01 A6 06 A1 |  if_e	add	local01, #1
2775c     F0 FF 9F AD |  if_e	jmp	#LR__3760
27760                 | LR__3761
27760     53 B3 C2 FA | 	rdbyte	local07, local01
27764     D7 12 48 FB | 	callpa	#(@LR__3763-@LR__3762)>>2,fcache_load_ptr_
27768                 | LR__3762
27768     2D B2 0E F2 | 	cmp	local07, #45 wz
2776c     2B B2 0E 52 |  if_ne	cmp	local07, #43 wz
27770     18 00 90 5D |  if_ne	jmp	#LR__3764
27774     01 A6 06 F1 | 	add	local01, #1
27778     2D B2 0E F2 | 	cmp	local07, #45 wz
2777c     01 B0 06 A6 |  if_e	mov	local06, #1
27780     58 AF C2 A2 |  if_e	subr	local05, local06
27784     53 B3 C2 FA | 	rdbyte	local07, local01
27788     DC FF 9F FD | 	jmp	#LR__3762
2778c                 | LR__3763
2778c                 | LR__3764
2778c     00 A8 0E F2 | 	cmp	local02, #0 wz
27790     1C 00 90 5D |  if_ne	jmp	#LR__3766
27794     24 B2 0E F2 | 	cmp	local07, #36 wz
27798     10 A8 06 A6 |  if_e	mov	local02, #16
2779c     01 A6 06 A1 |  if_e	add	local01, #1
277a0     0C 00 90 AD |  if_e	jmp	#LR__3765
277a4     25 B2 0E F2 | 	cmp	local07, #37 wz
277a8     02 A8 06 A6 |  if_e	mov	local02, #2
277ac     01 A6 06 A1 |  if_e	add	local01, #1
277b0                 | LR__3765
277b0                 | LR__3766
277b0     D7 48 48 FB | 	callpa	#(@LR__3774-@LR__3767)>>2,fcache_load_ptr_
277b4                 | LR__3767
277b4                 | LR__3768
277b4     53 B3 C2 FA | 	rdbyte	local07, local01
277b8     5F B2 0E F2 | 	cmp	local07, #95 wz
277bc     01 A6 06 F1 | 	add	local01, #1
277c0     F0 FF 9F AD |  if_e	jmp	#LR__3768
277c4     30 B2 0E F2 | 	cmp	local07, #48 wz
277c8     26 B2 0E 52 |  if_ne	cmp	local07, #38 wz
277cc     00 AC 06 A6 |  if_e	mov	local04, #0
277d0     60 00 90 AD |  if_e	jmp	#LR__3773
277d4     31 B2 56 F2 | 	cmps	local07, #49 wc
277d8     18 00 90 CD |  if_b	jmp	#LR__3769
277dc     3A B2 56 F2 | 	cmps	local07, #58 wc
277e0     59 AD 02 C6 |  if_b	mov	local04, local07
277e4     30 AC 86 C1 |  if_b	sub	local04, #48
277e8     00 A8 0E C2 |  if_b	cmp	local02, #0 wz
277ec     0A A8 06 86 |  if_c_and_z	mov	local02, #10
277f0     40 00 90 CD |  if_b	jmp	#LR__3772
277f4                 | LR__3769
277f4     0B A8 56 F2 | 	cmps	local02, #11 wc
277f8     61 B2 56 32 |  if_ae	cmps	local07, #97 wc
277fc     14 00 90 CD |  if_b	jmp	#LR__3770
27800     67 B2 56 F2 | 	cmps	local07, #103 wc
27804     61 B2 86 C1 |  if_b	sub	local07, #97
27808     0A AC 06 C6 |  if_b	mov	local04, #10
2780c     59 AD 02 C1 |  if_b	add	local04, local07
27810     20 00 90 CD |  if_b	jmp	#LR__3771
27814                 | LR__3770
27814     0B A8 56 F2 | 	cmps	local02, #11 wc
27818     41 B2 56 32 |  if_ae	cmps	local07, #65 wc
2781c     24 00 90 CD |  if_b	jmp	#LR__3775
27820     47 B2 56 F2 | 	cmps	local07, #71 wc
27824     41 B2 86 C1 |  if_b	sub	local07, #65
27828     0A AC 06 C6 |  if_b	mov	local04, #10
2782c     59 AD 02 C1 |  if_b	add	local04, local07
27830     10 00 90 3D |  if_ae	jmp	#LR__3775
27834                 | LR__3771
27834                 | LR__3772
27834                 | LR__3773
27834     55 A9 02 FD | 	qmul	local02, local03
27838     18 AA 62 FD | 	getqx	local03
2783c     56 AB 02 F1 | 	add	local03, local04
27840     70 FF 9F FD | 	jmp	#LR__3767
27844                 | LR__3774
27844                 | LR__3775
27844     00 A8 0E F2 | 	cmp	local02, #0 wz
27848     64 00 90 5D |  if_ne	jmp	#LR__3781
2784c     78 B2 0E F2 | 	cmp	local07, #120 wz
27850     68 B2 0E 52 |  if_ne	cmp	local07, #104 wz
27854     58 B2 0E 52 |  if_ne	cmp	local07, #88 wz
27858     48 B2 0E 52 |  if_ne	cmp	local07, #72 wz
2785c     14 00 90 5D |  if_ne	jmp	#LR__3776
27860     53 93 02 F6 | 	mov	arg01, local01
27864     10 94 06 F6 | 	mov	arg02, #16
27868     C4 FE BF FD | 	call	#__system____builtin_atoi
2786c     3D AB 02 F6 | 	mov	local03, result1
27870     3C 00 90 FD | 	jmp	#LR__3780
27874                 | LR__3776
27874     62 B2 0E F2 | 	cmp	local07, #98 wz
27878     42 B2 0E 52 |  if_ne	cmp	local07, #66 wz
2787c     14 00 90 5D |  if_ne	jmp	#LR__3777
27880     53 93 02 F6 | 	mov	arg01, local01
27884     02 94 06 F6 | 	mov	arg02, #2
27888     A4 FE BF FD | 	call	#__system____builtin_atoi
2788c     3D AB 02 F6 | 	mov	local03, result1
27890     1C 00 90 FD | 	jmp	#LR__3779
27894                 | LR__3777
27894     6F B2 0E F2 | 	cmp	local07, #111 wz
27898     4F B2 0E 52 |  if_ne	cmp	local07, #79 wz
2789c     10 00 90 5D |  if_ne	jmp	#LR__3778
278a0     53 93 02 F6 | 	mov	arg01, local01
278a4     08 94 06 F6 | 	mov	arg02, #8
278a8     84 FE BF FD | 	call	#__system____builtin_atoi
278ac     3D AB 02 F6 | 	mov	local03, result1
278b0                 | LR__3778
278b0                 | LR__3779
278b0                 | LR__3780
278b0                 | LR__3781
278b0     00 AE 0E F2 | 	cmp	local05, #0 wz
278b4     55 AB 62 56 |  if_ne	neg	local03, local03
278b8     55 7B 02 F6 | 	mov	result1, local03
278bc     E7 F0 03 F6 | 	mov	ptra, fp
278c0     F2 00 A0 FD | 	call	#popregs_
278c4                 | __system____builtin_atoi_ret
278c4     2D 00 64 FD | 	ret
278c8                 | 
278c8                 | __system____builtin_atof
278c8     07 CA 05 F6 | 	mov	COUNT_, #7
278cc     E8 00 A0 FD | 	call	#pushregs_
278d0     49 A7 02 F6 | 	mov	local01, arg01
278d4     00 A8 06 F6 | 	mov	local02, #0
278d8     00 AA 06 F6 | 	mov	local03, #0
278dc     00 AC 06 F6 | 	mov	local04, #0
278e0     00 AE 06 F6 | 	mov	local05, #0
278e4     D7 08 48 FB | 	callpa	#(@LR__3791-@LR__3790)>>2,fcache_load_ptr_
278e8                 | LR__3790
278e8     53 97 C2 FA | 	rdbyte	arg03, local01
278ec     20 96 0E F2 | 	cmp	arg03, #32 wz
278f0     01 A6 06 A1 |  if_e	add	local01, #1
278f4     F0 FF 9F AD |  if_e	jmp	#LR__3790
278f8                 | LR__3791
278f8     53 B1 C2 FA | 	rdbyte	local06, local01
278fc                 | LR__3792
278fc     2B B0 0E F2 | 	cmp	local06, #43 wz
27900     2D B0 0E 52 |  if_ne	cmp	local06, #45 wz
27904     14 00 90 5D |  if_ne	jmp	#LR__3793
27908     2D B0 0E F2 | 	cmp	local06, #45 wz
2790c     1F AC E6 A4 |  if_e	bitnot	local04, #31
27910     01 A6 06 F1 | 	add	local01, #1
27914     53 B1 C2 FA | 	rdbyte	local06, local01
27918     E0 FF 9F FD | 	jmp	#LR__3792
2791c                 | LR__3793
2791c                 | LR__3794
2791c     D7 08 48 FB | 	callpa	#(@LR__3796-@LR__3795)>>2,fcache_load_ptr_
27920                 | LR__3795
27920     53 B1 C2 FA | 	rdbyte	local06, local01
27924     5F B0 0E F2 | 	cmp	local06, #95 wz
27928     01 A6 06 F1 | 	add	local01, #1
2792c     F0 FF 9F AD |  if_e	jmp	#LR__3795
27930                 | LR__3796
27930     00 B0 0E F2 | 	cmp	local06, #0 wz
27934     5C 00 90 AD |  if_e	jmp	#LR__3798
27938     30 B0 56 F2 | 	cmps	local06, #48 wc
2793c     44 00 90 CD |  if_b	jmp	#LR__3797
27940     3A B0 56 F2 | 	cmps	local06, #58 wc
27944     3C 00 90 3D |  if_ae	jmp	#LR__3797
27948     54 93 02 F6 | 	mov	arg01, local02
2794c     00 90 20 FF 
27950     00 94 06 F6 | 	mov	arg02, ##1092616192
27954     54 F7 BF FD | 	call	#__system___float_mul
27958     3D A9 02 F6 | 	mov	local02, result1
2795c     30 B0 86 F1 | 	sub	local06, #48
27960     58 93 02 F6 | 	mov	arg01, local06
27964     40 F3 BF FD | 	call	#__system___float_fromuns
27968     3D 95 02 F6 | 	mov	arg02, result1
2796c     54 93 02 F6 | 	mov	arg01, local02
27970     68 F3 BF FD | 	call	#__system___float_add
27974     3D A9 02 F6 | 	mov	local02, result1
27978     00 AE 0E F2 | 	cmp	local05, #0 wz
2797c     01 AA 86 51 |  if_ne	sub	local03, #1
27980     98 FF 9F FD | 	jmp	#LR__3794
27984                 | LR__3797
27984     2E B0 0E F2 | 	cmp	local06, #46 wz
27988     00 AE 0E A2 |  if_e	cmp	local05, #0 wz
2798c     01 AE 06 A6 |  if_e	mov	local05, #1
27990     88 FF 9F AD |  if_e	jmp	#LR__3794
27994                 | LR__3798
27994     45 B0 0E F2 | 	cmp	local06, #69 wz
27998     65 B0 0E 52 |  if_ne	cmp	local06, #101 wz
2799c     18 00 90 5D |  if_ne	jmp	#LR__3799
279a0     53 93 02 F6 | 	mov	arg01, local01
279a4     00 94 06 F6 | 	mov	arg02, #0
279a8     84 FD BF FD | 	call	#__system____builtin_atoi
279ac     55 7B 02 F1 | 	add	result1, local03
279b0     3D B3 02 F6 | 	mov	local07, result1
279b4     04 00 90 FD | 	jmp	#LR__3800
279b8                 | LR__3799
279b8     55 B3 02 F6 | 	mov	local07, local03
279bc                 | LR__3800
279bc     59 97 02 F6 | 	mov	arg03, local07
279c0     54 93 02 F6 | 	mov	arg01, local02
279c4     00 90 20 FF 
279c8     00 94 06 F6 | 	mov	arg02, ##1092616192
279cc     F4 06 B0 FD | 	call	#__system___float_pow_n
279d0     56 7B 62 F5 | 	xor	result1, local04
279d4     E7 F0 03 F6 | 	mov	ptra, fp
279d8     F2 00 A0 FD | 	call	#popregs_
279dc                 | __system____builtin_atof_ret
279dc     2D 00 64 FD | 	ret
279e0                 | 
279e0                 | __system____builtin_ilogb
279e0     F8 FB BF FD | 	call	#__system___float_Unpack
279e4     00 7E 0E F2 | 	cmp	result3, #0 wz
279e8     00 00 40 AF 
279ec     01 7A 06 A6 |  if_e	mov	result1, ##-2147483647
279f0     24 00 90 AD |  if_e	jmp	#LR__3811
279f4     80 7C 0E F2 | 	cmp	result2, #128 wz
279f8     18 00 90 5D |  if_ne	jmp	#LR__3810
279fc     00 00 10 FF 
27a00     00 7E 0E F2 | 	cmp	result3, ##536870912 wz
27a04     1E 7A CE A9 |  if_e	bmask	result1, #30
27a08     0C 00 90 AD |  if_e	jmp	#LR__3811
27a0c     1F 7A C6 F9 | 	decod	result1, #31
27a10     04 00 90 FD | 	jmp	#LR__3811
27a14                 | LR__3810
27a14     3E 7B 02 F6 | 	mov	result1, result2
27a18                 | LR__3811
27a18                 | __system____builtin_ilogb_ret
27a18     2D 00 64 FD | 	ret
27a1c                 | 
27a1c                 | __system____builtin_sinf
27a1c     03 CA 05 F6 | 	mov	COUNT_, #3
27a20     E8 00 A0 FD | 	call	#pushregs_
27a24     49 A7 02 F6 | 	mov	local01, arg01
27a28     87 64 20 FF 
27a2c     DB 95 06 F6 | 	mov	arg02, ##1086918619
27a30     7C F8 BF FD | 	call	#__system___float_div
27a34     3D 93 02 F6 | 	mov	arg01, result1
27a38     00 94 06 F6 | 	mov	arg02, #0
27a3c     34 FB BF FD | 	call	#__system___float_tointeger
27a40     3D 97 0A F6 | 	mov	arg03, result1 wz
27a44     44 00 90 AD |  if_e	jmp	#LR__3820
27a48     4B 93 52 F6 | 	abs	arg01, arg03 wc
27a4c     1F A8 C6 C9 |  if_b	decod	local02, #31
27a50     00 A8 06 36 |  if_ae	mov	local02, #0
27a54     50 F2 BF FD | 	call	#__system___float_fromuns
27a58     54 7B 62 F5 | 	xor	result1, local02
27a5c     3D 93 02 F6 | 	mov	arg01, result1
27a60     1E 94 C6 F9 | 	decod	arg02, #30
27a64     44 F6 BF FD | 	call	#__system___float_mul
27a68     3D 93 02 F6 | 	mov	arg01, result1
27a6c     87 24 20 FF 
27a70     DB 95 06 F6 | 	mov	arg02, ##1078530011
27a74     34 F6 BF FD | 	call	#__system___float_mul
27a78     3D 95 02 F6 | 	mov	arg02, result1
27a7c     53 93 02 F6 | 	mov	arg01, local01
27a80     1F 94 E6 F4 | 	bitnot	arg02, #31
27a84     54 F2 BF FD | 	call	#__system___float_add
27a88     3D A7 02 F6 | 	mov	local01, result1
27a8c                 | LR__3820
27a8c     53 93 02 F6 | 	mov	arg01, local01
27a90     66 E6 1E FF 
27a94     CD 94 06 F6 | 	mov	arg02, ##1036831949
27a98     01 96 06 F6 | 	mov	arg03, #1
27a9c     40 FA BF FD | 	call	#__system___float_cmp
27aa0     00 7A 56 F2 | 	cmps	result1, #0 wc
27aa4     5C 00 90 3D |  if_ae	jmp	#LR__3821
27aa8     53 93 02 F6 | 	mov	arg01, local01
27aac     66 E6 5E FF 
27ab0     CD 94 06 F6 | 	mov	arg02, ##-1110651699
27ab4     01 96 66 F6 | 	neg	arg03, #1
27ab8     24 FA BF FD | 	call	#__system___float_cmp
27abc     01 7A 56 F2 | 	cmps	result1, #1 wc
27ac0     40 00 90 CD |  if_b	jmp	#LR__3821
27ac4     53 93 02 F6 | 	mov	arg01, local01
27ac8     53 95 02 F6 | 	mov	arg02, local01
27acc     DC F5 BF FD | 	call	#__system___float_mul
27ad0     3D 93 02 F6 | 	mov	arg01, result1
27ad4     53 95 02 F6 | 	mov	arg02, local01
27ad8     D0 F5 BF FD | 	call	#__system___float_mul
27adc     3D 93 02 F6 | 	mov	arg01, result1
27ae0     00 60 20 FF 
27ae4     00 94 06 F6 | 	mov	arg02, ##1086324736
27ae8     C4 F7 BF FD | 	call	#__system___float_div
27aec     3D 95 02 F6 | 	mov	arg02, result1
27af0     53 93 02 F6 | 	mov	arg01, local01
27af4     1F 94 E6 F4 | 	bitnot	arg02, #31
27af8     E0 F1 BF FD | 	call	#__system___float_add
27afc     3D AB 02 F6 | 	mov	local03, result1
27b00     54 00 90 FD | 	jmp	#LR__3822
27b04                 | LR__3821
27b04     53 93 02 F6 | 	mov	arg01, local01
27b08     7C 91 26 FF 
27b0c     83 95 06 F6 | 	mov	arg02, ##1294137731
27b10     98 F5 BF FD | 	call	#__system___float_mul
27b14     3D 93 02 F6 | 	mov	arg01, result1
27b18     00 94 06 F6 | 	mov	arg02, #0
27b1c     54 FA BF FD | 	call	#__system___float_tointeger
27b20     02 7A 66 F0 | 	shl	result1, #2
27b24     00 00 A0 FF 
27b28     3D 01 48 FD | 	qrotate	##1073741824, result1
27b2c     19 92 62 FD | 	getqy	arg01
27b30     49 93 52 F6 | 	abs	arg01, arg01 wc
27b34     1F A8 C6 C9 |  if_b	decod	local02, #31
27b38     00 A8 06 36 |  if_ae	mov	local02, #0
27b3c     68 F1 BF FD | 	call	#__system___float_fromuns
27b40     54 7B 62 F5 | 	xor	result1, local02
27b44     3D 93 02 F6 | 	mov	arg01, result1
27b48     00 40 27 FF 
27b4c     00 94 06 F6 | 	mov	arg02, ##1317011456
27b50     5C F7 BF FD | 	call	#__system___float_div
27b54     3D AB 02 F6 | 	mov	local03, result1
27b58                 | LR__3822
27b58     55 7B 02 F6 | 	mov	result1, local03
27b5c     E7 F0 03 F6 | 	mov	ptra, fp
27b60     F2 00 A0 FD | 	call	#popregs_
27b64                 | __system____builtin_sinf_ret
27b64     2D 00 64 FD | 	ret
27b68                 | 
27b68                 | __system____builtin_tanf
27b68     02 CA 05 F6 | 	mov	COUNT_, #2
27b6c     E8 00 A0 FD | 	call	#pushregs_
27b70     49 A7 02 F6 | 	mov	local01, arg01
27b74     A4 FE BF FD | 	call	#__system____builtin_sinf
27b78     3D A9 02 F6 | 	mov	local02, result1
27b7c     53 95 02 F6 | 	mov	arg02, local01
27b80     87 E4 1F FF 
27b84     DB 93 06 F6 | 	mov	arg01, ##1070141403
27b88     1F 94 E6 F4 | 	bitnot	arg02, #31
27b8c     4C F1 BF FD | 	call	#__system___float_add
27b90     3D 93 02 F6 | 	mov	arg01, result1
27b94     84 FE BF FD | 	call	#__system____builtin_sinf
27b98     3D 95 02 F6 | 	mov	arg02, result1
27b9c     54 93 02 F6 | 	mov	arg01, local02
27ba0     0C F7 BF FD | 	call	#__system___float_div
27ba4     E7 F0 03 F6 | 	mov	ptra, fp
27ba8     F2 00 A0 FD | 	call	#popregs_
27bac                 | __system____builtin_tanf_ret
27bac     2D 00 64 FD | 	ret
27bb0                 | 
27bb0                 | __system____builtin_asinf
27bb0     01 CA 05 F6 | 	mov	COUNT_, #1
27bb4     E8 00 A0 FD | 	call	#pushregs_
27bb8     49 A7 02 F6 | 	mov	local01, arg01
27bbc     53 95 02 F6 | 	mov	arg02, local01
27bc0     53 93 02 F6 | 	mov	arg01, local01
27bc4     E4 F4 BF FD | 	call	#__system___float_mul
27bc8     3D 95 02 F6 | 	mov	arg02, result1
27bcc     00 C0 1F FF 
27bd0     00 92 06 F6 | 	mov	arg01, ##1065353216
27bd4     1F 94 E6 F4 | 	bitnot	arg02, #31
27bd8     00 F1 BF FD | 	call	#__system___float_add
27bdc     3D 93 02 F6 | 	mov	arg01, result1
27be0     F0 F3 BF FD | 	call	#__system___float_sqrt
27be4     3D 95 02 F6 | 	mov	arg02, result1
27be8     53 93 02 F6 | 	mov	arg01, local01
27bec     58 00 B0 FD | 	call	#__system____builtin_atan2f
27bf0     E7 F0 03 F6 | 	mov	ptra, fp
27bf4     F2 00 A0 FD | 	call	#popregs_
27bf8                 | __system____builtin_asinf_ret
27bf8     2D 00 64 FD | 	ret
27bfc                 | 
27bfc                 | __system____builtin_acosf
27bfc     01 CA 05 F6 | 	mov	COUNT_, #1
27c00     E8 00 A0 FD | 	call	#pushregs_
27c04     49 A7 02 F6 | 	mov	local01, arg01
27c08     53 95 02 F6 | 	mov	arg02, local01
27c0c     53 93 02 F6 | 	mov	arg01, local01
27c10     98 F4 BF FD | 	call	#__system___float_mul
27c14     3D 95 02 F6 | 	mov	arg02, result1
27c18     00 C0 1F FF 
27c1c     00 92 06 F6 | 	mov	arg01, ##1065353216
27c20     1F 94 E6 F4 | 	bitnot	arg02, #31
27c24     B4 F0 BF FD | 	call	#__system___float_add
27c28     3D 93 02 F6 | 	mov	arg01, result1
27c2c     A4 F3 BF FD | 	call	#__system___float_sqrt
27c30     3D 93 02 F6 | 	mov	arg01, result1
27c34     53 95 02 F6 | 	mov	arg02, local01
27c38     0C 00 B0 FD | 	call	#__system____builtin_atan2f
27c3c     E7 F0 03 F6 | 	mov	ptra, fp
27c40     F2 00 A0 FD | 	call	#popregs_
27c44                 | __system____builtin_acosf_ret
27c44     2D 00 64 FD | 	ret
27c48                 | 
27c48                 | __system____builtin_atan2f
27c48     04 CA 05 F6 | 	mov	COUNT_, #4
27c4c     E8 00 A0 FD | 	call	#pushregs_
27c50     49 A7 02 F6 | 	mov	local01, arg01
27c54     4A A9 02 F6 | 	mov	local02, arg02
27c58     53 93 02 F6 | 	mov	arg01, local01
27c5c     00 94 06 F6 | 	mov	arg02, #0
27c60     01 96 06 F6 | 	mov	arg03, #1
27c64     78 F8 BF FD | 	call	#__system___float_cmp
27c68     00 7A 0E F2 | 	cmp	result1, #0 wz
27c6c     28 00 90 5D |  if_ne	jmp	#LR__3830
27c70     54 93 02 F6 | 	mov	arg01, local02
27c74     00 94 06 F6 | 	mov	arg02, #0
27c78     01 96 06 F6 | 	mov	arg03, #1
27c7c     60 F8 BF FD | 	call	#__system___float_cmp
27c80     00 7A 56 F2 | 	cmps	result1, #0 wc
27c84     87 24 60 CF 
27c88     DB 7B 06 C6 |  if_b	mov	result1, ##-1068953637
27c8c     DC 00 90 CD |  if_b	jmp	#LR__3831
27c90     00 7A 06 F6 | 	mov	result1, #0
27c94     D4 00 90 FD | 	jmp	#LR__3831
27c98                 | LR__3830
27c98     54 93 02 F6 | 	mov	arg01, local02
27c9c     54 95 02 F6 | 	mov	arg02, local02
27ca0     08 F4 BF FD | 	call	#__system___float_mul
27ca4     3D AB 02 F6 | 	mov	local03, result1
27ca8     53 93 02 F6 | 	mov	arg01, local01
27cac     53 95 02 F6 | 	mov	arg02, local01
27cb0     F8 F3 BF FD | 	call	#__system___float_mul
27cb4     3D 95 02 F6 | 	mov	arg02, result1
27cb8     55 93 02 F6 | 	mov	arg01, local03
27cbc     1C F0 BF FD | 	call	#__system___float_add
27cc0     3D 93 02 F6 | 	mov	arg01, result1
27cc4     0C F3 BF FD | 	call	#__system___float_sqrt
27cc8     3D AB 02 F6 | 	mov	local03, result1
27ccc     54 93 02 F6 | 	mov	arg01, local02
27cd0     55 95 02 F6 | 	mov	arg02, local03
27cd4     D8 F5 BF FD | 	call	#__system___float_div
27cd8     3D A9 02 F6 | 	mov	local02, result1
27cdc     53 93 02 F6 | 	mov	arg01, local01
27ce0     55 95 02 F6 | 	mov	arg02, local03
27ce4     C8 F5 BF FD | 	call	#__system___float_div
27ce8     3D A7 02 F6 | 	mov	local01, result1
27cec     00 40 27 FF 
27cf0     00 92 06 F6 | 	mov	arg01, ##1317011456
27cf4     54 95 02 F6 | 	mov	arg02, local02
27cf8     B0 F3 BF FD | 	call	#__system___float_mul
27cfc     3D 93 02 F6 | 	mov	arg01, result1
27d00     00 94 06 F6 | 	mov	arg02, #0
27d04     6C F8 BF FD | 	call	#__system___float_tointeger
27d08     3D AB 02 F6 | 	mov	local03, result1
27d0c     00 40 27 FF 
27d10     00 92 06 F6 | 	mov	arg01, ##1317011456
27d14     53 95 02 F6 | 	mov	arg02, local01
27d18     90 F3 BF FD | 	call	#__system___float_mul
27d1c     3D 93 02 F6 | 	mov	arg01, result1
27d20     00 94 06 F6 | 	mov	arg02, #0
27d24     4C F8 BF FD | 	call	#__system___float_tointeger
27d28     3D AB 52 FD | 	qvector	local03, result1
27d2c     87 24 20 FF 
27d30     DB AB 06 F6 | 	mov	local03, ##1078530011
27d34     19 92 62 FD | 	getqy	arg01
27d38     01 92 C6 F0 | 	sar	arg01, #1
27d3c     49 93 52 F6 | 	abs	arg01, arg01 wc
27d40     1F AC C6 C9 |  if_b	decod	local04, #31
27d44     00 AC 06 36 |  if_ae	mov	local04, #0
27d48     5C EF BF FD | 	call	#__system___float_fromuns
27d4c     56 7B 62 F5 | 	xor	result1, local04
27d50     3D 93 02 F6 | 	mov	arg01, result1
27d54     00 40 27 FF 
27d58     00 94 06 F6 | 	mov	arg02, ##1317011456
27d5c     50 F5 BF FD | 	call	#__system___float_div
27d60     3D 95 02 F6 | 	mov	arg02, result1
27d64     55 93 02 F6 | 	mov	arg01, local03
27d68     40 F3 BF FD | 	call	#__system___float_mul
27d6c                 | LR__3831
27d6c     E7 F0 03 F6 | 	mov	ptra, fp
27d70     F2 00 A0 FD | 	call	#popregs_
27d74                 | __system____builtin_atan2f_ret
27d74     2D 00 64 FD | 	ret
27d78                 | 
27d78                 | __system____builtin_exp2f
27d78     04 CA 05 F6 | 	mov	COUNT_, #4
27d7c     E8 00 A0 FD | 	call	#pushregs_
27d80     49 A7 02 F6 | 	mov	local01, arg01
27d84     00 7F 21 FF 
27d88     00 94 06 F6 | 	mov	arg02, ##1123942400
27d8c     01 96 66 F6 | 	neg	arg03, #1
27d90     4C F7 BF FD | 	call	#__system___float_cmp
27d94     00 7A 56 F2 | 	cmps	result1, #0 wc
27d98     00 C0 3F 3F 
27d9c     00 7A 06 36 |  if_ae	mov	result1, ##2139095040
27da0     DC 00 90 3D |  if_ae	jmp	#LR__3841
27da4     53 93 02 F6 | 	mov	arg01, local01
27da8     00 7F 61 FF 
27dac     00 94 06 F6 | 	mov	arg02, ##-1023541248
27db0     01 96 06 F6 | 	mov	arg03, #1
27db4     28 F7 BF FD | 	call	#__system___float_cmp
27db8     00 7A 56 F2 | 	cmps	result1, #0 wc
27dbc     00 7A 06 C6 |  if_b	mov	result1, #0
27dc0     BC 00 90 CD |  if_b	jmp	#LR__3841
27dc4     53 93 02 F6 | 	mov	arg01, local01
27dc8     00 94 06 F6 | 	mov	arg02, #0
27dcc     A4 F7 BF FD | 	call	#__system___float_tointeger
27dd0     3D A9 02 F6 | 	mov	local02, result1
27dd4     54 93 52 F6 | 	abs	arg01, local02 wc
27dd8     1F AA C6 C9 |  if_b	decod	local03, #31
27ddc     00 AA 06 36 |  if_ae	mov	local03, #0
27de0     C4 EE BF FD | 	call	#__system___float_fromuns
27de4     55 7B 62 F5 | 	xor	result1, local03
27de8     3D 95 02 F6 | 	mov	arg02, result1
27dec     53 93 02 F6 | 	mov	arg01, local01
27df0     1F 94 E6 F4 | 	bitnot	arg02, #31
27df4     E4 EE BF FD | 	call	#__system___float_add
27df8     3D AD 02 F6 | 	mov	local04, result1
27dfc     56 93 02 F6 | 	mov	arg01, local04
27e00     00 94 06 F6 | 	mov	arg02, #0
27e04     01 96 06 F6 | 	mov	arg03, #1
27e08     D4 F6 BF FD | 	call	#__system___float_cmp
27e0c     00 7A 56 F2 | 	cmps	result1, #0 wc
27e10     18 00 90 3D |  if_ae	jmp	#LR__3840
27e14     56 93 02 F6 | 	mov	arg01, local04
27e18     00 C0 1F FF 
27e1c     00 94 06 F6 | 	mov	arg02, ##1065353216
27e20     B8 EE BF FD | 	call	#__system___float_add
27e24     3D AD 02 F6 | 	mov	local04, result1
27e28     01 A8 86 F1 | 	sub	local02, #1
27e2c                 | LR__3840
27e2c     7F A8 06 F1 | 	add	local02, #127
27e30     17 A8 66 F0 | 	shl	local02, #23
27e34     56 93 02 F6 | 	mov	arg01, local04
27e38     00 80 26 FF 
27e3c     00 94 06 F6 | 	mov	arg02, ##1291845632
27e40     68 F2 BF FD | 	call	#__system___float_mul
27e44     3D 93 02 F6 | 	mov	arg01, result1
27e48     00 94 06 F6 | 	mov	arg02, #0
27e4c     24 F7 BF FD | 	call	#__system___float_tointeger
27e50     3D AD 0A F6 | 	mov	local04, result1 wz
27e54     54 7B 02 A6 |  if_e	mov	result1, local02
27e58     24 00 90 AD |  if_e	jmp	#LR__3841
27e5c     3E AC 26 F4 | 	bith	local04, #62
27e60     0F AC 62 FD | 	qexp	local04
27e64     54 93 02 F6 | 	mov	arg01, local02
27e68     18 94 62 FD | 	getqx	arg02
27e6c     01 94 06 F1 | 	add	arg02, #1
27e70     01 94 46 F0 | 	shr	arg02, #1
27e74     00 80 1F FF 
27e78     00 94 06 F1 | 	add	arg02, ##1056964608
27e7c     2C F2 BF FD | 	call	#__system___float_mul
27e80                 | LR__3841
27e80     E7 F0 03 F6 | 	mov	ptra, fp
27e84     F2 00 A0 FD | 	call	#popregs_
27e88                 | __system____builtin_exp2f_ret
27e88     2D 00 64 FD | 	ret
27e8c                 | 
27e8c                 | __system____builtin_log2f
27e8c     06 CA 05 F6 | 	mov	COUNT_, #6
27e90     E8 00 A0 FD | 	call	#pushregs_
27e94     49 A7 02 F6 | 	mov	local01, arg01
27e98     49 A9 0A F6 | 	mov	local02, arg01 wz
27e9c     00 00 40 5F 
27ea0     00 A8 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
27ea4     00 40 00 AF 
27ea8     00 7A 66 A6 |  if_e	neg	result1, ##8388608
27eac     08 01 90 AD |  if_e	jmp	#LR__3854
27eb0     00 A8 56 F2 | 	cmps	local02, #0 wc
27eb4     00 E0 3F CF 
27eb8     00 7A 06 C6 |  if_b	mov	result1, ##2143289344
27ebc     F8 00 90 CD |  if_b	jmp	#LR__3854
27ec0     53 93 02 F6 | 	mov	arg01, local01
27ec4     00 90 20 FF 
27ec8     00 94 06 F6 | 	mov	arg02, ##1092616192
27ecc     01 96 06 F6 | 	mov	arg03, #1
27ed0     0C F6 BF FD | 	call	#__system___float_cmp
27ed4     00 7A 0E F2 | 	cmp	result1, #0 wz
27ed8     4D 2A 20 AF 
27edc     78 7A 06 A6 |  if_e	mov	result1, ##1079286392
27ee0     D4 00 90 AD |  if_e	jmp	#LR__3854
27ee4     53 93 02 F6 | 	mov	arg01, local01
27ee8     FC 16 20 FF 
27eec     54 94 06 F6 | 	mov	arg02, ##1076754516
27ef0     01 96 06 F6 | 	mov	arg03, #1
27ef4     E8 F5 BF FD | 	call	#__system___float_cmp
27ef8     00 7A 0E F2 | 	cmp	result1, #0 wz
27efc     55 DC 1F AF 
27f00     3B 7A 06 A6 |  if_e	mov	result1, ##1069066811
27f04     B0 00 90 AD |  if_e	jmp	#LR__3854
27f08     54 AB 02 F6 | 	mov	local03, local02
27f0c     17 AA 46 F0 | 	shr	local03, #23
27f10     55 AB E2 F8 | 	getbyte	local03, local03, #0
27f14     17 A9 06 F4 | 	bitl	local02, #279
27f18     54 AD 02 F6 | 	mov	local04, local02
27f1c     FF AA 0E F2 | 	cmp	local03, #255 wz
27f20     1C 00 90 5D |  if_ne	jmp	#LR__3850
27f24     00 AC 0E F2 | 	cmp	local04, #0 wz
27f28     00 C0 3F 5F 
27f2c     00 AE 06 56 |  if_ne	mov	local05, ##2139095040
27f30     00 E0 3F AF 
27f34     00 AE 06 A6 |  if_e	mov	local05, ##2143289344
27f38     57 7B 02 F6 | 	mov	result1, local05
27f3c     78 00 90 FD | 	jmp	#LR__3854
27f40                 | LR__3850
27f40     00 AA 0E F2 | 	cmp	local03, #0 wz
27f44     17 AC 26 54 |  if_ne	bith	local04, #23
27f48     7F AA 86 51 |  if_ne	sub	local03, #127
27f4c     28 00 90 5D |  if_ne	jmp	#LR__3853
27f50     00 AC 0E F2 | 	cmp	local04, #0 wz
27f54     00 40 00 AF 
27f58     00 7A 66 A6 |  if_e	neg	result1, ##8388608
27f5c     58 00 90 AD |  if_e	jmp	#LR__3854
27f60     7E AA 66 F6 | 	neg	local03, #126
27f64     D7 08 48 FB | 	callpa	#(@LR__3852-@LR__3851)>>2,fcache_load_ptr_
27f68                 | LR__3851
27f68     17 AC 2E F4 | 	testbn	local04, #23 wz
27f6c     01 AC 66 A0 |  if_e	shl	local04, #1
27f70     01 AA 06 A1 |  if_e	add	local03, #1
27f74     F0 FF 9F AD |  if_e	jmp	#LR__3851
27f78                 | LR__3852
27f78                 | LR__3853
27f78     0E AC 62 FD | 	qlog	local04
27f7c     01 AA 86 F1 | 	sub	local03, #1
27f80     55 93 52 F6 | 	abs	arg01, local03 wc
27f84     1F B0 C6 C9 |  if_b	decod	local06, #31
27f88     00 B0 06 36 |  if_ae	mov	local06, #0
27f8c     18 AE 62 FD | 	getqx	local05
27f90     9B AE 06 F4 | 	bitl	local05, #155
27f94     08 AE 06 F1 | 	add	local05, #8
27f98     04 AE 46 F0 | 	shr	local05, #4
27f9c     00 C0 1F FF 
27fa0     00 AE 06 F1 | 	add	local05, ##1065353216
27fa4     00 ED BF FD | 	call	#__system___float_fromuns
27fa8     58 7B 62 F5 | 	xor	result1, local06
27fac     3D 95 02 F6 | 	mov	arg02, result1
27fb0     57 93 02 F6 | 	mov	arg01, local05
27fb4     24 ED BF FD | 	call	#__system___float_add
27fb8                 | LR__3854
27fb8     E7 F0 03 F6 | 	mov	ptra, fp
27fbc     F2 00 A0 FD | 	call	#popregs_
27fc0                 | __system____builtin_log2f_ret
27fc0     2D 00 64 FD | 	ret
27fc4                 | 
27fc4                 | __system____builtin_powf
27fc4     04 CA 05 F6 | 	mov	COUNT_, #4
27fc8     E8 00 A0 FD | 	call	#pushregs_
27fcc     49 A7 02 F6 | 	mov	local01, arg01
27fd0     4A A9 02 F6 | 	mov	local02, arg02
27fd4     54 93 02 F6 | 	mov	arg01, local02
27fd8     00 94 06 F6 | 	mov	arg02, #0
27fdc     94 F5 BF FD | 	call	#__system___float_tointeger
27fe0     3D AB 02 F6 | 	mov	local03, result1
27fe4     55 93 52 F6 | 	abs	arg01, local03 wc
27fe8     1F AC C6 C9 |  if_b	decod	local04, #31
27fec     00 AC 06 36 |  if_ae	mov	local04, #0
27ff0     B4 EC BF FD | 	call	#__system___float_fromuns
27ff4     56 7B 62 F5 | 	xor	result1, local04
27ff8     3D 93 02 F6 | 	mov	arg01, result1
27ffc     54 95 02 F6 | 	mov	arg02, local02
28000     01 96 06 F6 | 	mov	arg03, #1
28004     D8 F4 BF FD | 	call	#__system___float_cmp
28008     00 7A 0E F2 | 	cmp	result1, #0 wz
2800c     18 00 90 5D |  if_ne	jmp	#LR__3860
28010     00 C0 1F FF 
28014     00 92 06 F6 | 	mov	arg01, ##1065353216
28018     53 95 02 F6 | 	mov	arg02, local01
2801c     55 97 02 F6 | 	mov	arg03, local03
28020     A0 00 B0 FD | 	call	#__system___float_pow_n
28024     58 00 90 FD | 	jmp	#LR__3861
28028                 | LR__3860
28028     53 93 02 F6 | 	mov	arg01, local01
2802c     00 94 06 F6 | 	mov	arg02, #0
28030     01 96 06 F6 | 	mov	arg03, #1
28034     A8 F4 BF FD | 	call	#__system___float_cmp
28038     00 7A 56 F2 | 	cmps	result1, #0 wc
2803c     00 E0 3F CF 
28040     00 7A 06 C6 |  if_b	mov	result1, ##2143289344
28044     38 00 90 CD |  if_b	jmp	#LR__3861
28048     53 93 02 F6 | 	mov	arg01, local01
2804c     00 94 06 F6 | 	mov	arg02, #0
28050     01 96 06 F6 | 	mov	arg03, #1
28054     88 F4 BF FD | 	call	#__system___float_cmp
28058     00 7A 0E F2 | 	cmp	result1, #0 wz
2805c     00 7A 06 A6 |  if_e	mov	result1, #0
28060     1C 00 90 AD |  if_e	jmp	#LR__3861
28064     53 93 02 F6 | 	mov	arg01, local01
28068     20 FE BF FD | 	call	#__system____builtin_log2f
2806c     3D 93 02 F6 | 	mov	arg01, result1
28070     54 95 02 F6 | 	mov	arg02, local02
28074     34 F0 BF FD | 	call	#__system___float_mul
28078     3D 93 02 F6 | 	mov	arg01, result1
2807c     F8 FC BF FD | 	call	#__system____builtin_exp2f
28080                 | LR__3861
28080     E7 F0 03 F6 | 	mov	ptra, fp
28084     F2 00 A0 FD | 	call	#popregs_
28088                 | __system____builtin_powf_ret
28088     2D 00 64 FD | 	ret
2808c                 | 
2808c                 | __system____builtin_logbase
2808c     02 CA 05 F6 | 	mov	COUNT_, #2
28090     E8 00 A0 FD | 	call	#pushregs_
28094     49 A7 02 F6 | 	mov	local01, arg01
28098     4A 93 02 F6 | 	mov	arg01, arg02
2809c     EC FD BF FD | 	call	#__system____builtin_log2f
280a0     3D A9 02 F6 | 	mov	local02, result1
280a4     53 93 02 F6 | 	mov	arg01, local01
280a8     E0 FD BF FD | 	call	#__system____builtin_log2f
280ac     3D 95 02 F6 | 	mov	arg02, result1
280b0     54 93 02 F6 | 	mov	arg01, local02
280b4     F8 F1 BF FD | 	call	#__system___float_div
280b8     E7 F0 03 F6 | 	mov	ptra, fp
280bc     F2 00 A0 FD | 	call	#popregs_
280c0                 | __system____builtin_logbase_ret
280c0     2D 00 64 FD | 	ret
280c4                 | 
280c4                 | __system___float_pow_n
280c4     05 CA 05 F6 | 	mov	COUNT_, #5
280c8     E8 00 A0 FD | 	call	#pushregs_
280cc     49 A7 02 F6 | 	mov	local01, arg01
280d0     4A A9 02 F6 | 	mov	local02, arg02
280d4     4B AB 02 F6 | 	mov	local03, arg03
280d8     00 AA 56 F2 | 	cmps	local03, #0 wc
280dc     18 00 90 3D |  if_ae	jmp	#LR__3870
280e0     01 AC 06 F6 | 	mov	local04, #1
280e4     55 AB 62 F6 | 	neg	local03, local03
280e8     00 AA 56 F2 | 	cmps	local03, #0 wc
280ec     00 7A 06 C6 |  if_b	mov	result1, #0
280f0     94 00 90 CD |  if_b	jmp	#LR__3878
280f4     04 00 90 FD | 	jmp	#LR__3871
280f8                 | LR__3870
280f8     00 AC 06 F6 | 	mov	local04, #0
280fc                 | LR__3871
280fc     00 C0 1F FF 
28100     00 AE 06 F6 | 	mov	local05, ##1065353216
28104                 | LR__3872
28104     01 AA 56 F2 | 	cmps	local03, #1 wc
28108     30 00 90 CD |  if_b	jmp	#LR__3874
2810c     01 AA CE F7 | 	test	local03, #1 wz
28110     10 00 90 AD |  if_e	jmp	#LR__3873
28114     57 93 02 F6 | 	mov	arg01, local05
28118     54 95 02 F6 | 	mov	arg02, local02
2811c     8C EF BF FD | 	call	#__system___float_mul
28120     3D AF 02 F6 | 	mov	local05, result1
28124                 | LR__3873
28124     01 AA C6 F0 | 	sar	local03, #1
28128     54 93 02 F6 | 	mov	arg01, local02
2812c     54 95 02 F6 | 	mov	arg02, local02
28130     78 EF BF FD | 	call	#__system___float_mul
28134     3D A9 02 F6 | 	mov	local02, result1
28138     C8 FF 9F FD | 	jmp	#LR__3872
2813c                 | LR__3874
2813c     00 AC 0E F2 | 	cmp	local04, #0 wz
28140     14 00 90 AD |  if_e	jmp	#LR__3875
28144     53 93 02 F6 | 	mov	arg01, local01
28148     57 95 02 F6 | 	mov	arg02, local05
2814c     60 F1 BF FD | 	call	#__system___float_div
28150     3D AF 02 F6 | 	mov	local05, result1
28154     2C 00 90 FD | 	jmp	#LR__3877
28158                 | LR__3875
28158     53 93 02 F6 | 	mov	arg01, local01
2815c     00 C0 1F FF 
28160     00 94 06 F6 | 	mov	arg02, ##1065353216
28164     01 96 06 F6 | 	mov	arg03, #1
28168     74 F3 BF FD | 	call	#__system___float_cmp
2816c     00 7A 0E F2 | 	cmp	result1, #0 wz
28170     10 00 90 AD |  if_e	jmp	#LR__3876
28174     53 93 02 F6 | 	mov	arg01, local01
28178     57 95 02 F6 | 	mov	arg02, local05
2817c     2C EF BF FD | 	call	#__system___float_mul
28180     3D AF 02 F6 | 	mov	local05, result1
28184                 | LR__3876
28184                 | LR__3877
28184     57 7B 02 F6 | 	mov	result1, local05
28188                 | LR__3878
28188     E7 F0 03 F6 | 	mov	ptra, fp
2818c     F2 00 A0 FD | 	call	#popregs_
28190                 | __system___float_pow_n_ret
28190     2D 00 64 FD | 	ret
28194                 | 
28194                 | __system___gc_ptrs
28194     2C 81 02 F6 | 	mov	_var01, __heap_ptr
28198     40 83 02 F6 | 	mov	_var02, _var01
2819c     BB 00 00 FF 
281a0     F8 82 06 F1 | 	add	_var02, ##95992
281a4     40 7D 0A FB | 	rdlong	result2, _var01 wz
281a8     74 00 90 5D |  if_ne	jmp	#LR__3880
281ac     41 7D 02 F6 | 	mov	result2, _var02
281b0     40 7D 82 F1 | 	sub	result2, _var01
281b4     40 03 58 FC | 	wrword	#1, _var01
281b8     40 7B 02 F6 | 	mov	result1, _var01
281bc     02 7A 06 F1 | 	add	result1, #2
281c0     36 00 80 FF 
281c4     3D 21 59 FC | 	wrword	##27792, result1
281c8     40 7B 02 F6 | 	mov	result1, _var01
281cc     04 7A 06 F1 | 	add	result1, #4
281d0     3D 01 58 FC | 	wrword	#0, result1
281d4     40 7B 02 F6 | 	mov	result1, _var01
281d8     06 7A 06 F1 | 	add	result1, #6
281dc     3D 03 58 FC | 	wrword	#1, result1
281e0     10 80 06 F1 | 	add	_var01, #16
281e4     3E 7D 52 F6 | 	abs	result2, result2 wc
281e8     04 7C 46 F0 | 	shr	result2, #4
281ec     3E 7D 82 F6 | 	negc	result2, result2
281f0     40 7D 52 FC | 	wrword	result2, _var01
281f4     40 7D 02 F6 | 	mov	result2, _var01
281f8     02 7C 06 F1 | 	add	result2, #2
281fc     36 00 80 FF 
28200     3E 1F 59 FC | 	wrword	##27791, result2
28204     40 7D 02 F6 | 	mov	result2, _var01
28208     04 7C 06 F1 | 	add	result2, #4
2820c     3E 01 58 FC | 	wrword	#0, result2
28210     40 7D 02 F6 | 	mov	result2, _var01
28214     06 7C 06 F1 | 	add	result2, #6
28218     3E 01 58 FC | 	wrword	#0, result2
2821c     10 80 86 F1 | 	sub	_var01, #16
28220                 | LR__3880
28220     40 7B 02 F6 | 	mov	result1, _var01
28224     41 7D 02 F6 | 	mov	result2, _var02
28228                 | __system___gc_ptrs_ret
28228     2D 00 64 FD | 	ret
2822c                 | 
2822c                 | __system___gc_tryalloc
2822c     0B CA 05 F6 | 	mov	COUNT_, #11
28230     E8 00 A0 FD | 	call	#pushregs_
28234     49 A7 02 F6 | 	mov	local01, arg01
28238     4A A9 02 F6 | 	mov	local02, arg02
2823c     54 FF BF FD | 	call	#__system___gc_ptrs
28240     3D AB 02 F6 | 	mov	local03, result1
28244     3E AD 02 F6 | 	mov	local04, result2
28248     55 AF 02 F6 | 	mov	local05, local03
2824c     00 B0 06 F6 | 	mov	local06, #0
28250     D7 1E 48 FB | 	callpa	#(@LR__3891-@LR__3890)>>2,fcache_load_ptr_
28254                 | LR__3890
28254     57 B3 02 F6 | 	mov	local07, local05
28258     06 AE 06 F1 | 	add	local05, #6
2825c     57 95 EA FA | 	rdword	arg02, local05 wz
28260     55 93 02 F6 | 	mov	arg01, local03
28264     00 7A 06 A6 |  if_e	mov	result1, #0
28268     04 94 66 50 |  if_ne	shl	arg02, #4
2826c     4A 93 02 51 |  if_ne	add	arg01, arg02
28270     49 7B 02 56 |  if_ne	mov	result1, arg01
28274     3D AF 0A F6 | 	mov	local05, result1 wz
28278     57 B1 E2 5A |  if_ne	rdword	local06, local05
2827c     00 AE 0E F2 | 	cmp	local05, #0 wz
28280     56 AF 52 52 |  if_ne	cmps	local05, local04 wc
28284     08 00 90 1D |  if_a	jmp	#LR__3892
28288     58 A7 5A 52 |  if_ne	cmps	local01, local06 wcz
2828c     C4 FF 9F 1D |  if_a	jmp	#LR__3890
28290                 | LR__3891
28290                 | LR__3892
28290     00 AE 0E F2 | 	cmp	local05, #0 wz
28294     57 7B 02 A6 |  if_e	mov	result1, local05
28298     3C 01 90 AD |  if_e	jmp	#LR__3895
2829c     57 7D 02 F6 | 	mov	result2, local05
282a0     06 7C 06 F1 | 	add	result2, #6
282a4     3E B5 E2 FA | 	rdword	local08, result2
282a8     58 A7 52 F2 | 	cmps	local01, local06 wc
282ac     C0 00 90 3D |  if_ae	jmp	#LR__3894
282b0     57 A7 52 FC | 	wrword	local01, local05
282b4     57 93 02 F6 | 	mov	arg01, local05
282b8     53 B5 02 F6 | 	mov	local08, local01
282bc     04 B4 66 F0 | 	shl	local08, #4
282c0     5A 93 02 F1 | 	add	arg01, local08
282c4     53 B1 82 F1 | 	sub	local06, local01
282c8     49 B1 52 FC | 	wrword	local06, arg01
282cc     49 B5 02 F6 | 	mov	local08, arg01
282d0     02 B4 06 F1 | 	add	local08, #2
282d4     36 00 80 FF 
282d8     5A 1F 59 FC | 	wrword	##27791, local08
282dc     57 95 0A F6 | 	mov	arg02, local05 wz
282e0     00 7A 06 A6 |  if_e	mov	result1, #0
282e4     55 95 82 51 |  if_ne	sub	arg02, local03
282e8     04 94 46 50 |  if_ne	shr	arg02, #4
282ec     4A 7B 02 56 |  if_ne	mov	result1, arg02
282f0     49 B5 02 F6 | 	mov	local08, arg01
282f4     04 B4 06 F1 | 	add	local08, #4
282f8     5A 7B 52 FC | 	wrword	result1, local08
282fc     57 B5 02 F6 | 	mov	local08, local05
28300     06 B4 06 F1 | 	add	local08, #6
28304     49 95 02 F6 | 	mov	arg02, arg01
28308     5A B5 E2 FA | 	rdword	local08, local08
2830c     06 94 06 F1 | 	add	arg02, #6
28310     4A B5 52 FC | 	wrword	local08, arg02
28314     49 B7 02 F6 | 	mov	local09, arg01
28318     5B 95 0A F6 | 	mov	arg02, local09 wz
2831c     00 7A 06 A6 |  if_e	mov	result1, #0
28320     55 95 82 51 |  if_ne	sub	arg02, local03
28324     04 94 46 50 |  if_ne	shr	arg02, #4
28328     4A 7B 02 56 |  if_ne	mov	result1, arg02
2832c     3D B5 02 F6 | 	mov	local08, result1
28330     49 B9 EA FA | 	rdword	local10, arg01 wz
28334     00 7A 06 A6 |  if_e	mov	result1, #0
28338     04 B8 66 50 |  if_ne	shl	local10, #4
2833c     5C 93 02 51 |  if_ne	add	arg01, local10
28340     49 7B 02 56 |  if_ne	mov	result1, arg01
28344     3D BB 0A F6 | 	mov	local11, result1 wz
28348     24 00 90 AD |  if_e	jmp	#LR__3893
2834c     56 BB 52 F2 | 	cmps	local11, local04 wc
28350     1C 00 90 3D |  if_ae	jmp	#LR__3893
28354     5B 95 0A F6 | 	mov	arg02, local09 wz
28358     00 7A 06 A6 |  if_e	mov	result1, #0
2835c     55 95 82 51 |  if_ne	sub	arg02, local03
28360     04 94 46 50 |  if_ne	shr	arg02, #4
28364     4A 7B 02 56 |  if_ne	mov	result1, arg02
28368     04 BA 06 F1 | 	add	local11, #4
2836c     5D 7B 52 FC | 	wrword	result1, local11
28370                 | LR__3893
28370                 | LR__3894
28370     06 B2 06 F1 | 	add	local07, #6
28374     59 B5 52 FC | 	wrword	local08, local07
28378     36 00 00 FF 
2837c     80 B6 06 F6 | 	mov	local09, ##27776
28380     54 B7 42 F5 | 	or	local09, local02
28384     00 7A 06 F6 | 	mov	result1, #0
28388     01 7A 62 FD | 	cogid	result1
2838c     3D B7 42 F5 | 	or	local09, result1
28390     57 BB 02 F6 | 	mov	local11, local05
28394     02 BA 06 F1 | 	add	local11, #2
28398     5D B7 52 FC | 	wrword	local09, local11
2839c     55 B7 02 F6 | 	mov	local09, local03
283a0     08 B6 06 F1 | 	add	local09, #8
283a4     57 BB 02 F6 | 	mov	local11, local05
283a8     5B B7 E2 FA | 	rdword	local09, local09
283ac     06 BA 06 F1 | 	add	local11, #6
283b0     5D B7 52 FC | 	wrword	local09, local11
283b4     57 95 0A F6 | 	mov	arg02, local05 wz
283b8     00 7A 06 A6 |  if_e	mov	result1, #0
283bc     55 95 82 51 |  if_ne	sub	arg02, local03
283c0     04 94 46 50 |  if_ne	shr	arg02, #4
283c4     4A 7B 02 56 |  if_ne	mov	result1, arg02
283c8     08 AA 06 F1 | 	add	local03, #8
283cc     55 7B 52 FC | 	wrword	result1, local03
283d0     08 AE 06 F1 | 	add	local05, #8
283d4     57 7B 02 F6 | 	mov	result1, local05
283d8                 | LR__3895
283d8     E7 F0 03 F6 | 	mov	ptra, fp
283dc     F2 00 A0 FD | 	call	#popregs_
283e0                 | __system___gc_tryalloc_ret
283e0     2D 00 64 FD | 	ret
283e4                 | 
283e4                 | __system___gc_alloc_managed
283e4     01 CA 05 F6 | 	mov	COUNT_, #1
283e8     E8 00 A0 FD | 	call	#pushregs_
283ec     49 A7 02 F6 | 	mov	local01, arg01
283f0     00 94 06 F6 | 	mov	arg02, #0
283f4     1C 00 B0 FD | 	call	#__system___gc_doalloc
283f8     3D 95 0A F6 | 	mov	arg02, result1 wz
283fc     01 A6 56 A2 |  if_e	cmps	local01, #1 wc
28400     00 7A 06 26 |  if_nc_and_z	mov	result1, #0
28404     4A 7B 02 D6 |  if_c_or_nz	mov	result1, arg02
28408     E7 F0 03 F6 | 	mov	ptra, fp
2840c     F2 00 A0 FD | 	call	#popregs_
28410                 | __system___gc_alloc_managed_ret
28410     2D 00 64 FD | 	ret
28414                 | 
28414                 | __system___gc_doalloc
28414     06 CA 05 F6 | 	mov	COUNT_, #6
28418     E8 00 A0 FD | 	call	#pushregs_
2841c     49 A7 0A F6 | 	mov	local01, arg01 wz
28420     4A A9 02 F6 | 	mov	local02, arg02
28424     00 7A 06 A6 |  if_e	mov	result1, #0
28428     84 00 90 AD |  if_e	jmp	#LR__3907
2842c     17 A6 06 F1 | 	add	local01, #23
28430     0F A6 26 F5 | 	andn	local01, #15
28434     04 A6 46 F0 | 	shr	local01, #4
28438     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
2843c     1C 92 06 F1 | 	add	arg01, #28
28440     98 C5 BF FD | 	call	#__system___lockmem
28444     53 93 02 F6 | 	mov	arg01, local01
28448     54 95 02 F6 | 	mov	arg02, local02
2844c     DC FD BF FD | 	call	#__system___gc_tryalloc
28450     3D AB 0A F6 | 	mov	local03, result1 wz
28454     14 00 90 5D |  if_ne	jmp	#LR__3900
28458     64 03 B0 FD | 	call	#__system___gc_docollect
2845c     53 93 02 F6 | 	mov	arg01, local01
28460     54 95 02 F6 | 	mov	arg02, local02
28464     C4 FD BF FD | 	call	#__system___gc_tryalloc
28468     3D AB 02 F6 | 	mov	local03, result1
2846c                 | LR__3900
2846c     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
28470     1C 92 06 F1 | 	add	arg01, #28
28474     49 01 68 FC | 	wrlong	#0, arg01
28478     00 AA 0E F2 | 	cmp	local03, #0 wz
2847c     2C 00 90 AD |  if_e	jmp	#LR__3906
28480     04 A6 66 F0 | 	shl	local01, #4
28484     08 A6 86 F1 | 	sub	local01, #8
28488     53 AD 52 F6 | 	abs	local04, local01 wc
2848c     02 AC 46 F0 | 	shr	local04, #2
28490     56 AF 8A F6 | 	negc	local05, local04 wz
28494     55 B1 02 F6 | 	mov	local06, local03
28498     10 00 90 AD |  if_e	jmp	#LR__3905
2849c     D7 06 48 FB | 	callpa	#(@LR__3903-@LR__3901)>>2,fcache_load_ptr_
284a0                 | LR__3901
284a0     57 05 D8 FC | 	rep	@LR__3904, local05
284a4                 | LR__3902
284a4     58 01 68 FC | 	wrlong	#0, local06
284a8     04 B0 06 F1 | 	add	local06, #4
284ac                 | LR__3903
284ac                 | LR__3904
284ac                 | LR__3905
284ac                 | LR__3906
284ac     55 7B 02 F6 | 	mov	result1, local03
284b0                 | LR__3907
284b0     E7 F0 03 F6 | 	mov	ptra, fp
284b4     F2 00 A0 FD | 	call	#popregs_
284b8                 | __system___gc_doalloc_ret
284b8     2D 00 64 FD | 	ret
284bc                 | 
284bc                 | __system___gc_isvalidptr
284bc     F8 96 06 F4 | 	bitl	arg03, #248
284c0     08 96 86 F1 | 	sub	arg03, #8
284c4     49 97 52 F2 | 	cmps	arg03, arg01 wc
284c8     08 00 90 CD |  if_b	jmp	#LR__3910
284cc     4A 97 52 F2 | 	cmps	arg03, arg02 wc
284d0     08 00 90 CD |  if_b	jmp	#LR__3911
284d4                 | LR__3910
284d4     00 7A 06 F6 | 	mov	result1, #0
284d8     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
284dc                 | LR__3911
284dc     4B 81 02 F6 | 	mov	_var01, arg03
284e0     49 81 62 F5 | 	xor	_var01, arg01
284e4     0F 80 CE F7 | 	test	_var01, #15 wz
284e8     00 7A 06 56 |  if_ne	mov	result1, #0
284ec     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
284f0     4B 81 02 F6 | 	mov	_var01, arg03
284f4     02 80 06 F1 | 	add	_var01, #2
284f8     40 81 E2 FA | 	rdword	_var01, _var01
284fc     7F 00 00 FF 
28500     C0 81 06 F5 | 	and	_var01, ##65472
28504     36 00 00 FF 
28508     80 80 0E F2 | 	cmp	_var01, ##27776 wz
2850c     00 7A 06 56 |  if_ne	mov	result1, #0
28510     4B 7B 02 A6 |  if_e	mov	result1, arg03
28514                 | __system___gc_isvalidptr_ret
28514     2D 00 64 FD | 	ret
28518                 | 
28518                 | __system___gc_free
28518     49 97 02 F6 | 	mov	arg03, arg01
2851c     74 FC BF FD | 	call	#__system___gc_ptrs
28520     3D 93 02 F6 | 	mov	arg01, result1
28524     3E 95 02 F6 | 	mov	arg02, result2
28528     90 FF BF FD | 	call	#__system___gc_isvalidptr
2852c     3D 95 0A F6 | 	mov	arg02, result1 wz
28530     20 00 90 AD |  if_e	jmp	#LR__3920
28534     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
28538     1C 92 06 F1 | 	add	arg01, #28
2853c     9C C4 BF FD | 	call	#__system___lockmem
28540     4A 93 02 F6 | 	mov	arg01, arg02
28544     10 00 B0 FD | 	call	#__system___gc_dofree
28548     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
2854c     1C 92 06 F1 | 	add	arg01, #28
28550     49 01 68 FC | 	wrlong	#0, arg01
28554                 | LR__3920
28554                 | __system___gc_free_ret
28554     2D 00 64 FD | 	ret
28558                 | 
28558                 | __system___gc_dofree
28558     06 CA 05 F6 | 	mov	COUNT_, #6
2855c     E8 00 A0 FD | 	call	#pushregs_
28560     49 A7 02 F6 | 	mov	local01, arg01
28564     2C FC BF FD | 	call	#__system___gc_ptrs
28568     3D A9 02 F6 | 	mov	local02, result1
2856c     3E AB 02 F6 | 	mov	local03, result2
28570     53 95 02 F6 | 	mov	arg02, local01
28574     02 94 06 F1 | 	add	arg02, #2
28578     36 00 80 FF 
2857c     4A 1F 59 FC | 	wrword	##27791, arg02
28580     53 AD 02 F6 | 	mov	local04, local01
28584     53 93 02 F6 | 	mov	arg01, local01
28588     49 AF EA FA | 	rdword	local05, arg01 wz
2858c     00 7A 06 A6 |  if_e	mov	result1, #0
28590     04 AE 66 50 |  if_ne	shl	local05, #4
28594     57 93 02 51 |  if_ne	add	arg01, local05
28598     49 7B 02 56 |  if_ne	mov	result1, arg01
2859c     3D B1 02 F6 | 	mov	local06, result1
285a0     D7 24 48 FB | 	callpa	#(@LR__3931-@LR__3930)>>2,fcache_load_ptr_
285a4                 | LR__3930
285a4     04 AC 06 F1 | 	add	local04, #4
285a8     56 95 EA FA | 	rdword	arg02, local04 wz
285ac     54 93 02 F6 | 	mov	arg01, local02
285b0     00 7A 06 A6 |  if_e	mov	result1, #0
285b4     04 94 66 50 |  if_ne	shl	arg02, #4
285b8     4A 93 02 51 |  if_ne	add	arg01, arg02
285bc     49 7B 02 56 |  if_ne	mov	result1, arg01
285c0     3D AD 0A F6 | 	mov	local04, result1 wz
285c4     24 00 90 AD |  if_e	jmp	#LR__3932
285c8     56 93 02 F6 | 	mov	arg01, local04
285cc     00 7A 06 F6 | 	mov	result1, #0
285d0     02 92 06 F1 | 	add	arg01, #2
285d4     49 93 E2 FA | 	rdword	arg01, arg01
285d8     36 00 00 FF 
285dc     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
285e0     01 7A 66 A6 |  if_e	neg	result1, #1
285e4     00 7A 0E F2 | 	cmp	result1, #0 wz
285e8     B8 FF 9F AD |  if_e	jmp	#LR__3930
285ec                 | LR__3931
285ec                 | LR__3932
285ec     00 AC 0E F2 | 	cmp	local04, #0 wz
285f0     54 AD 02 A6 |  if_e	mov	local04, local02
285f4     56 95 02 F6 | 	mov	arg02, local04
285f8     06 94 06 F1 | 	add	arg02, #6
285fc     53 93 02 F6 | 	mov	arg01, local01
28600     4A 95 E2 FA | 	rdword	arg02, arg02
28604     06 92 06 F1 | 	add	arg01, #6
28608     49 95 52 FC | 	wrword	arg02, arg01
2860c     53 95 0A F6 | 	mov	arg02, local01 wz
28610     00 7A 06 A6 |  if_e	mov	result1, #0
28614     54 95 82 51 |  if_ne	sub	arg02, local02
28618     04 94 46 50 |  if_ne	shr	arg02, #4
2861c     4A 7B 02 56 |  if_ne	mov	result1, arg02
28620     56 95 02 F6 | 	mov	arg02, local04
28624     06 94 06 F1 | 	add	arg02, #6
28628     4A 7B 52 FC | 	wrword	result1, arg02
2862c     54 AD 0A F2 | 	cmp	local04, local02 wz
28630     A4 00 90 AD |  if_e	jmp	#LR__3935
28634     56 93 02 F6 | 	mov	arg01, local04
28638     49 AF EA FA | 	rdword	local05, arg01 wz
2863c     00 7A 06 A6 |  if_e	mov	result1, #0
28640     04 AE 66 50 |  if_ne	shl	local05, #4
28644     57 93 02 51 |  if_ne	add	arg01, local05
28648     49 7B 02 56 |  if_ne	mov	result1, arg01
2864c     53 7B 0A F2 | 	cmp	result1, local01 wz
28650     84 00 90 5D |  if_ne	jmp	#LR__3934
28654     56 B1 E2 FA | 	rdword	local06, local04
28658     53 95 E2 FA | 	rdword	arg02, local01
2865c     4A B1 02 F1 | 	add	local06, arg02
28660     56 B1 52 FC | 	wrword	local06, local04
28664     53 B1 02 F6 | 	mov	local06, local01
28668     02 B0 06 F1 | 	add	local06, #2
2866c     58 01 58 FC | 	wrword	#0, local06
28670     53 93 02 F6 | 	mov	arg01, local01
28674     49 AF EA FA | 	rdword	local05, arg01 wz
28678     00 7A 06 A6 |  if_e	mov	result1, #0
2867c     04 AE 66 50 |  if_ne	shl	local05, #4
28680     57 93 02 51 |  if_ne	add	arg01, local05
28684     49 7B 02 56 |  if_ne	mov	result1, arg01
28688     3D B1 02 F6 | 	mov	local06, result1
2868c     55 B1 52 F2 | 	cmps	local06, local03 wc
28690     20 00 90 3D |  if_ae	jmp	#LR__3933
28694     56 95 0A F6 | 	mov	arg02, local04 wz
28698     00 7A 06 A6 |  if_e	mov	result1, #0
2869c     54 95 82 51 |  if_ne	sub	arg02, local02
286a0     04 94 46 50 |  if_ne	shr	arg02, #4
286a4     4A 7B 02 56 |  if_ne	mov	result1, arg02
286a8     58 95 02 F6 | 	mov	arg02, local06
286ac     04 94 06 F1 | 	add	arg02, #4
286b0     4A 7B 52 FC | 	wrword	result1, arg02
286b4                 | LR__3933
286b4     53 95 02 F6 | 	mov	arg02, local01
286b8     06 94 06 F1 | 	add	arg02, #6
286bc     56 7D 02 F6 | 	mov	result2, local04
286c0     4A 95 E2 FA | 	rdword	arg02, arg02
286c4     06 7C 06 F1 | 	add	result2, #6
286c8     3E 95 52 FC | 	wrword	arg02, result2
286cc     06 A6 06 F1 | 	add	local01, #6
286d0     53 01 58 FC | 	wrword	#0, local01
286d4     56 A7 02 F6 | 	mov	local01, local04
286d8                 | LR__3934
286d8                 | LR__3935
286d8     53 93 02 F6 | 	mov	arg01, local01
286dc     49 AF EA FA | 	rdword	local05, arg01 wz
286e0     00 7A 06 A6 |  if_e	mov	result1, #0
286e4     04 AE 66 50 |  if_ne	shl	local05, #4
286e8     57 93 02 51 |  if_ne	add	arg01, local05
286ec     49 7B 02 56 |  if_ne	mov	result1, arg01
286f0     3D 95 0A F6 | 	mov	arg02, result1 wz
286f4     B8 00 90 AD |  if_e	jmp	#LR__3937
286f8     55 95 52 F2 | 	cmps	arg02, local03 wc
286fc     B0 00 90 3D |  if_ae	jmp	#LR__3937
28700     4A 93 02 F6 | 	mov	arg01, arg02
28704     00 7A 06 F6 | 	mov	result1, #0
28708     02 92 06 F1 | 	add	arg01, #2
2870c     49 93 E2 FA | 	rdword	arg01, arg01
28710     36 00 00 FF 
28714     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
28718     01 7A 66 A6 |  if_e	neg	result1, #1
2871c     00 7A 0E F2 | 	cmp	result1, #0 wz
28720     8C 00 90 AD |  if_e	jmp	#LR__3937
28724     53 AD 02 F6 | 	mov	local04, local01
28728     56 B1 E2 FA | 	rdword	local06, local04
2872c     4A 93 02 F6 | 	mov	arg01, arg02
28730     49 A7 E2 FA | 	rdword	local01, arg01
28734     53 B1 02 F1 | 	add	local06, local01
28738     56 B1 52 FC | 	wrword	local06, local04
2873c     49 B1 02 F6 | 	mov	local06, arg01
28740     06 B0 06 F1 | 	add	local06, #6
28744     56 A7 02 F6 | 	mov	local01, local04
28748     58 B1 E2 FA | 	rdword	local06, local06
2874c     06 A6 06 F1 | 	add	local01, #6
28750     53 B1 52 FC | 	wrword	local06, local01
28754     49 B1 02 F6 | 	mov	local06, arg01
28758     02 B0 06 F1 | 	add	local06, #2
2875c     58 55 59 FC | 	wrword	#170, local06
28760     49 B1 02 F6 | 	mov	local06, arg01
28764     06 B0 06 F1 | 	add	local06, #6
28768     58 01 58 FC | 	wrword	#0, local06
2876c     49 AF EA FA | 	rdword	local05, arg01 wz
28770     00 7A 06 A6 |  if_e	mov	result1, #0
28774     04 AE 66 50 |  if_ne	shl	local05, #4
28778     57 93 02 51 |  if_ne	add	arg01, local05
2877c     49 7B 02 56 |  if_ne	mov	result1, arg01
28780     3D B1 0A F6 | 	mov	local06, result1 wz
28784     28 00 90 AD |  if_e	jmp	#LR__3936
28788     55 B1 52 F2 | 	cmps	local06, local03 wc
2878c     20 00 90 3D |  if_ae	jmp	#LR__3936
28790     56 95 0A F6 | 	mov	arg02, local04 wz
28794     00 7A 06 A6 |  if_e	mov	result1, #0
28798     54 95 82 51 |  if_ne	sub	arg02, local02
2879c     04 94 46 50 |  if_ne	shr	arg02, #4
287a0     4A 7B 02 56 |  if_ne	mov	result1, arg02
287a4     58 AD 02 F6 | 	mov	local04, local06
287a8     04 AC 06 F1 | 	add	local04, #4
287ac     56 7B 52 FC | 	wrword	result1, local04
287b0                 | LR__3936
287b0                 | LR__3937
287b0     58 7B 02 F6 | 	mov	result1, local06
287b4     E7 F0 03 F6 | 	mov	ptra, fp
287b8     F2 00 A0 FD | 	call	#popregs_
287bc                 | __system___gc_dofree_ret
287bc     2D 00 64 FD | 	ret
287c0                 | 
287c0                 | __system___gc_docollect
287c0     05 CA 05 F6 | 	mov	COUNT_, #5
287c4     E8 00 A0 FD | 	call	#pushregs_
287c8     C8 F9 BF FD | 	call	#__system___gc_ptrs
287cc     3E A7 02 F6 | 	mov	local01, result2
287d0     3D A9 02 F6 | 	mov	local02, result1
287d4     54 93 02 F6 | 	mov	arg01, local02
287d8     49 AB EA FA | 	rdword	local03, arg01 wz
287dc     00 7A 06 A6 |  if_e	mov	result1, #0
287e0     04 AA 66 50 |  if_ne	shl	local03, #4
287e4     55 93 02 51 |  if_ne	add	arg01, local03
287e8     49 7B 02 56 |  if_ne	mov	result1, arg01
287ec     3D AD 0A F6 | 	mov	local04, result1 wz
287f0     00 7A 06 F6 | 	mov	result1, #0
287f4     01 7A 62 FD | 	cogid	result1
287f8     3D AF 02 F6 | 	mov	local05, result1
287fc     48 00 90 AD |  if_e	jmp	#LR__3942
28800     D7 22 48 FB | 	callpa	#(@LR__3941-@LR__3940)>>2,fcache_load_ptr_
28804                 | LR__3940
28804     53 AD 52 F2 | 	cmps	local04, local01 wc
28808     3C 00 90 3D |  if_ae	jmp	#LR__3942
2880c     56 95 02 F6 | 	mov	arg02, local04
28810     02 94 06 F1 | 	add	arg02, #2
28814     4A 95 E2 FA | 	rdword	arg02, arg02
28818     20 94 26 F5 | 	andn	arg02, #32
2881c     56 93 02 F6 | 	mov	arg01, local04
28820     02 92 06 F1 | 	add	arg01, #2
28824     49 95 52 FC | 	wrword	arg02, arg01
28828     56 93 02 F6 | 	mov	arg01, local04
2882c     49 AB EA FA | 	rdword	local03, arg01 wz
28830     00 7A 06 A6 |  if_e	mov	result1, #0
28834     04 AA 66 50 |  if_ne	shl	local03, #4
28838     55 93 02 51 |  if_ne	add	arg01, local03
2883c     49 7B 02 56 |  if_ne	mov	result1, arg01
28840     3D AD 0A F6 | 	mov	local04, result1 wz
28844     BC FF 9F 5D |  if_ne	jmp	#LR__3940
28848                 | LR__3941
28848                 | LR__3942
28848     00 AA 06 F6 | 	mov	local03, #0
2884c     00 92 06 F6 | 	mov	arg01, #0
28850     60 C1 BF FD | 	call	#__system____topofstack
28854     3D 95 02 F6 | 	mov	arg02, result1
28858     55 93 02 F6 | 	mov	arg01, local03
2885c     90 00 B0 FD | 	call	#__system___gc_markhub
28860     1C 01 B0 FD | 	call	#__system___gc_markcog
28864     54 93 02 F6 | 	mov	arg01, local02
28868     49 AB EA FA | 	rdword	local03, arg01 wz
2886c     00 7A 06 A6 |  if_e	mov	result1, #0
28870     04 AA 66 50 |  if_ne	shl	local03, #4
28874     55 93 02 51 |  if_ne	add	arg01, local03
28878     49 7B 02 56 |  if_ne	mov	result1, arg01
2887c     3D A9 0A F6 | 	mov	local02, result1 wz
28880     60 00 90 AD |  if_e	jmp	#LR__3946
28884                 | LR__3943
28884     54 AD 02 F6 | 	mov	local04, local02
28888     56 93 02 F6 | 	mov	arg01, local04
2888c     49 AB EA FA | 	rdword	local03, arg01 wz
28890     00 7A 06 A6 |  if_e	mov	result1, #0
28894     04 AA 66 50 |  if_ne	shl	local03, #4
28898     55 93 02 51 |  if_ne	add	arg01, local03
2889c     49 7B 02 56 |  if_ne	mov	result1, arg01
288a0     3D A9 02 F6 | 	mov	local02, result1
288a4     56 95 02 F6 | 	mov	arg02, local04
288a8     02 94 06 F1 | 	add	arg02, #2
288ac     4A 95 E2 FA | 	rdword	arg02, arg02
288b0     20 94 CE F7 | 	test	arg02, #32 wz
288b4     10 94 CE A7 |  if_e	test	arg02, #16 wz
288b8     1C 00 90 5D |  if_ne	jmp	#LR__3945
288bc     4A 95 42 F8 | 	getnib	arg02, arg02, #0
288c0     57 95 0A F2 | 	cmp	arg02, local05 wz
288c4     0E 94 0E 52 |  if_ne	cmp	arg02, #14 wz
288c8     0C 00 90 5D |  if_ne	jmp	#LR__3944
288cc     56 93 02 F6 | 	mov	arg01, local04
288d0     84 FC BF FD | 	call	#__system___gc_dofree
288d4     3D A9 02 F6 | 	mov	local02, result1
288d8                 | LR__3944
288d8                 | LR__3945
288d8     00 A8 0E F2 | 	cmp	local02, #0 wz
288dc     53 A9 52 52 |  if_ne	cmps	local02, local01 wc
288e0     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3943
288e4                 | LR__3946
288e4     E7 F0 03 F6 | 	mov	ptra, fp
288e8     F2 00 A0 FD | 	call	#popregs_
288ec                 | __system___gc_docollect_ret
288ec     2D 00 64 FD | 	ret
288f0                 | 
288f0                 | __system___gc_markhub
288f0     04 CA 05 F6 | 	mov	COUNT_, #4
288f4     E8 00 A0 FD | 	call	#pushregs_
288f8     49 A7 02 F6 | 	mov	local01, arg01
288fc     4A A9 02 F6 | 	mov	local02, arg02
28900     90 F8 BF FD | 	call	#__system___gc_ptrs
28904     3D AB 02 F6 | 	mov	local03, result1
28908     3E AD 02 F6 | 	mov	local04, result2
2890c                 | LR__3950
2890c     54 A7 52 F2 | 	cmps	local01, local02 wc
28910     60 00 90 3D |  if_ae	jmp	#LR__3951
28914     53 97 02 FB | 	rdlong	arg03, local01
28918     04 A6 06 F1 | 	add	local01, #4
2891c     56 95 02 F6 | 	mov	arg02, local04
28920     55 93 02 F6 | 	mov	arg01, local03
28924     94 FB BF FD | 	call	#__system___gc_isvalidptr
28928     3D 97 0A F6 | 	mov	arg03, result1 wz
2892c     DC FF 9F AD |  if_e	jmp	#LR__3950
28930     4B 93 02 F6 | 	mov	arg01, arg03
28934     00 7A 06 F6 | 	mov	result1, #0
28938     02 92 06 F1 | 	add	arg01, #2
2893c     49 93 E2 FA | 	rdword	arg01, arg01
28940     36 00 00 FF 
28944     8F 92 0E F2 | 	cmp	arg01, ##27791 wz
28948     01 7A 66 A6 |  if_e	neg	result1, #1
2894c     00 7A 0E F2 | 	cmp	result1, #0 wz
28950     B8 FF 9F 5D |  if_ne	jmp	#LR__3950
28954     4B 7D 02 F6 | 	mov	result2, arg03
28958     02 7C 06 F1 | 	add	result2, #2
2895c     3E 7D E2 FA | 	rdword	result2, result2
28960     0F 7C 26 F5 | 	andn	result2, #15
28964     2E 7C 46 F5 | 	or	result2, #46
28968     02 96 06 F1 | 	add	arg03, #2
2896c     4B 7D 52 FC | 	wrword	result2, arg03
28970     98 FF 9F FD | 	jmp	#LR__3950
28974                 | LR__3951
28974     E7 F0 03 F6 | 	mov	ptra, fp
28978     F2 00 A0 FD | 	call	#popregs_
2897c                 | __system___gc_markhub_ret
2897c     2D 00 64 FD | 	ret
28980                 | 
28980                 | __system___gc_markcog
28980     04 CA 05 F6 | 	mov	COUNT_, #4
28984     E8 00 A0 FD | 	call	#pushregs_
28988     08 F8 BF FD | 	call	#__system___gc_ptrs
2898c     3D A7 02 F6 | 	mov	local01, result1
28990     3E A9 02 F6 | 	mov	local02, result2
28994     EF AB 06 F6 | 	mov	local03, #495
28998                 | LR__3960
28998                 | 	'.live	local03
28998     00 AA 96 F9 | 	alts	local03, #0
2899c     55 AD 02 F6 | 	mov	local04, local03
289a0     53 93 02 F6 | 	mov	arg01, local01
289a4     54 95 02 F6 | 	mov	arg02, local02
289a8     56 97 02 F6 | 	mov	arg03, local04
289ac     0C FB BF FD | 	call	#__system___gc_isvalidptr
289b0     00 7A 0E F2 | 	cmp	result1, #0 wz
289b4     18 00 90 AD |  if_e	jmp	#LR__3961
289b8     3D AD 02 F6 | 	mov	local04, result1
289bc     02 AC 06 F1 | 	add	local04, #2
289c0     56 AD E2 FA | 	rdword	local04, local04
289c4     20 AC 46 F5 | 	or	local04, #32
289c8     02 7A 06 F1 | 	add	result1, #2
289cc     3D AD 52 FC | 	wrword	local04, result1
289d0                 | LR__3961
289d0     01 AA 86 F1 | 	sub	local03, #1
289d4     00 AA 56 F2 | 	cmps	local03, #0 wc
289d8     BC FF 9F 3D |  if_ae	jmp	#LR__3960
289dc     E7 F0 03 F6 | 	mov	ptra, fp
289e0     F2 00 A0 FD | 	call	#popregs_
289e4                 | __system___gc_markcog_ret
289e4     2D 00 64 FD | 	ret
289e8                 | 
289e8                 | __system___get_vfs_file_handle
289e8     01 CA 05 F6 | 	mov	COUNT_, #1
289ec     E8 00 A0 FD | 	call	#pushregs_
289f0     30 CC BF FD | 	call	#__system___find_free_file
289f4     3D A7 02 F6 | 	mov	local01, result1
289f8     00 A6 56 F2 | 	cmps	local01, #0 wc
289fc     34 A6 06 3D |  if_ae	qmul	local01, #52
28a00     00 7A 06 C6 |  if_b	mov	result1, #0
28a04     34 A7 02 36 |  if_ae	mov	local01, ptr___system__dat__
28a08     02 00 00 3F 
28a0c     2C A7 06 31 |  if_ae	add	local01, ##1324
28a10     18 7A 62 3D |  if_ae	getqx	result1
28a14     53 7B 02 31 |  if_ae	add	result1, local01
28a18     E7 F0 03 F6 | 	mov	ptra, fp
28a1c     F2 00 A0 FD | 	call	#popregs_
28a20                 | __system___get_vfs_file_handle_ret
28a20     2D 00 64 FD | 	ret
28a24                 | 
28a24                 | __system__opendir
28a24     06 CA 05 F6 | 	mov	COUNT_, #6
28a28     E8 00 A0 FD | 	call	#pushregs_
28a2c     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
28a30     84 A7 06 F1 | 	add	local01, #388
28a34     49 95 02 F6 | 	mov	arg02, arg01
28a38     53 93 02 F6 | 	mov	arg01, local01
28a3c     00 96 06 F6 | 	mov	arg03, #0
28a40     E4 C6 BF FD | 	call	#__system____getvfsforfile
28a44     3D A9 0A F6 | 	mov	local02, result1 wz
28a48     10 00 90 AD |  if_e	jmp	#LR__3970
28a4c     28 A8 06 F1 | 	add	local02, #40
28a50     54 97 0A FB | 	rdlong	arg03, local02 wz
28a54     28 A8 86 F1 | 	sub	local02, #40
28a58     14 00 90 5D |  if_ne	jmp	#LR__3971
28a5c                 | LR__3970
28a5c     20 68 06 F1 | 	add	ptr___system__dat__, #32
28a60     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
28a64     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28a68     00 7A 06 F6 | 	mov	result1, #0
28a6c     90 00 90 FD | 	jmp	#LR__3973
28a70                 | LR__3971
28a70     5C 92 06 F6 | 	mov	arg01, #92
28a74     10 94 06 F6 | 	mov	arg02, #16
28a78     98 F9 BF FD | 	call	#__system___gc_doalloc
28a7c     3D AB 0A F6 | 	mov	local03, result1 wz
28a80     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
28a84     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
28a88     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
28a8c     00 7A 06 A6 |  if_e	mov	result1, #0
28a90     6C 00 90 AD |  if_e	jmp	#LR__3973
28a94     28 A8 06 F1 | 	add	local02, #40
28a98     54 AD 02 FB | 	rdlong	local04, local02
28a9c     56 AF 02 F6 | 	mov	local05, local04
28aa0     28 A8 86 F1 | 	sub	local02, #40
28aa4     13 AE 46 F7 | 	zerox	local05, #19
28aa8     14 AC 46 F0 | 	shr	local04, #20
28aac     02 AC 66 F0 | 	shl	local04, #2
28ab0     2D AD 02 F1 | 	add	local04, __methods__
28ab4     56 AD 02 FB | 	rdlong	local04, local04
28ab8     55 93 02 F6 | 	mov	arg01, local03
28abc     53 95 02 F6 | 	mov	arg02, local01
28ac0     32 B1 02 F6 | 	mov	local06, objptr
28ac4     57 65 02 F6 | 	mov	objptr, local05
28ac8     2D AC 62 FD | 	call	local04
28acc     58 65 02 F6 | 	mov	objptr, local06
28ad0     3D 97 0A F6 | 	mov	arg03, result1 wz
28ad4     20 00 90 AD |  if_e	jmp	#LR__3972
28ad8     00 96 4E F2 | 	cmps	arg03, #0 wz
28adc     20 68 06 F1 | 	add	ptr___system__dat__, #32
28ae0     34 97 62 FC | 	wrlong	arg03, ptr___system__dat__
28ae4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28ae8     55 93 02 F6 | 	mov	arg01, local03
28aec     28 FA BF FD | 	call	#__system___gc_free
28af0     00 7A 06 F6 | 	mov	result1, #0
28af4     08 00 90 FD | 	jmp	#LR__3973
28af8                 | LR__3972
28af8     55 A9 62 FC | 	wrlong	local02, local03
28afc     55 7B 02 F6 | 	mov	result1, local03
28b00                 | LR__3973
28b00     E7 F0 03 F6 | 	mov	ptra, fp
28b04     F2 00 A0 FD | 	call	#popregs_
28b08                 | __system__opendir_ret
28b08     2D 00 64 FD | 	ret
28b0c                 | 
28b0c                 | __system__closedir
28b0c     04 CA 05 F6 | 	mov	COUNT_, #4
28b10     E8 00 A0 FD | 	call	#pushregs_
28b14     49 A7 02 F6 | 	mov	local01, arg01
28b18     53 93 02 FB | 	rdlong	arg01, local01
28b1c     2C 92 06 F1 | 	add	arg01, #44
28b20     49 A9 02 FB | 	rdlong	local02, arg01
28b24     54 AB 02 F6 | 	mov	local03, local02
28b28     13 AA 46 F7 | 	zerox	local03, #19
28b2c     14 A8 46 F0 | 	shr	local02, #20
28b30     02 A8 66 F0 | 	shl	local02, #2
28b34     2D A9 02 F1 | 	add	local02, __methods__
28b38     54 A9 02 FB | 	rdlong	local02, local02
28b3c     53 93 02 F6 | 	mov	arg01, local01
28b40     32 AD 02 F6 | 	mov	local04, objptr
28b44     55 65 02 F6 | 	mov	objptr, local03
28b48     2D A8 62 FD | 	call	local02
28b4c     56 65 02 F6 | 	mov	objptr, local04
28b50     3D AD 02 F6 | 	mov	local04, result1
28b54     53 93 02 F6 | 	mov	arg01, local01
28b58     BC F9 BF FD | 	call	#__system___gc_free
28b5c     00 AC 4E F2 | 	cmps	local04, #0 wz
28b60     20 68 06 F1 | 	add	ptr___system__dat__, #32
28b64     34 AD 62 FC | 	wrlong	local04, ptr___system__dat__
28b68     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28b6c     01 7A 66 56 |  if_ne	neg	result1, #1
28b70     00 7A 06 A6 |  if_e	mov	result1, #0
28b74     E7 F0 03 F6 | 	mov	ptra, fp
28b78     F2 00 A0 FD | 	call	#popregs_
28b7c                 | __system__closedir_ret
28b7c     2D 00 64 FD | 	ret
28b80                 | 
28b80                 | __system__readdir
28b80     04 CA 05 F6 | 	mov	COUNT_, #4
28b84     E8 00 A0 FD | 	call	#pushregs_
28b88     49 95 0A FB | 	rdlong	arg02, arg01 wz
28b8c     49 A7 02 F6 | 	mov	local01, arg01
28b90     08 A6 06 F1 | 	add	local01, #8
28b94     00 7A 06 A6 |  if_e	mov	result1, #0
28b98     5C 00 90 AD |  if_e	jmp	#LR__3981
28b9c     30 94 06 F1 | 	add	arg02, #48
28ba0     4A A9 02 FB | 	rdlong	local02, arg02
28ba4     54 AB 02 F6 | 	mov	local03, local02
28ba8     13 AA 46 F7 | 	zerox	local03, #19
28bac     14 A8 46 F0 | 	shr	local02, #20
28bb0     02 A8 66 F0 | 	shl	local02, #2
28bb4     2D A9 02 F1 | 	add	local02, __methods__
28bb8     54 A9 02 FB | 	rdlong	local02, local02
28bbc     53 95 02 F6 | 	mov	arg02, local01
28bc0     32 AD 02 F6 | 	mov	local04, objptr
28bc4     55 65 02 F6 | 	mov	objptr, local03
28bc8     2D A8 62 FD | 	call	local02
28bcc     56 65 02 F6 | 	mov	objptr, local04
28bd0     00 7A 4E F2 | 	cmps	result1, #0 wz
28bd4     1C 00 90 AD |  if_e	jmp	#LR__3980
28bd8     01 7A 56 F2 | 	cmps	result1, #1 wc
28bdc     00 7A 4E 32 |  if_ae	cmps	result1, #0 wz
28be0     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
28be4     34 7B 62 3C |  if_ae	wrlong	result1, ptr___system__dat__
28be8     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
28bec     00 7A 06 F6 | 	mov	result1, #0
28bf0     04 00 90 FD | 	jmp	#LR__3981
28bf4                 | LR__3980
28bf4     53 7B 02 F6 | 	mov	result1, local01
28bf8                 | LR__3981
28bf8     E7 F0 03 F6 | 	mov	ptra, fp
28bfc     F2 00 A0 FD | 	call	#popregs_
28c00                 | __system__readdir_ret
28c00     2D 00 64 FD | 	ret
28c04                 | 
28c04                 | __system___openraw
28c04     15 CA 05 F6 | 	mov	COUNT_, #21
28c08     E8 00 A0 FD | 	call	#pushregs_
28c0c     49 A7 02 F6 | 	mov	local01, arg01
28c10     4A A9 02 F6 | 	mov	local02, arg02
28c14     4B AB 02 F6 | 	mov	local03, arg03
28c18     4C AD 02 F6 | 	mov	local04, arg04
28c1c     0F AE C6 F9 | 	decod	local05, #15
28c20     53 B1 02 F6 | 	mov	local06, local01
28c24     00 B2 06 F6 | 	mov	local07, #0
28c28     34 B5 02 F6 | 	mov	local08, ptr___system__dat__
28c2c     84 B5 06 F1 | 	add	local08, #388
28c30     5A 93 02 F6 | 	mov	arg01, local08
28c34     54 95 02 F6 | 	mov	arg02, local02
28c38     00 96 06 F6 | 	mov	arg03, #0
28c3c     E8 C4 BF FD | 	call	#__system____getvfsforfile
28c40     3D B7 0A F6 | 	mov	local09, result1 wz
28c44     10 00 90 AD |  if_e	jmp	#LR__3990
28c48     20 B6 06 F1 | 	add	local09, #32
28c4c     5B 7B 0A FB | 	rdlong	result1, local09 wz
28c50     20 B6 86 F1 | 	sub	local09, #32
28c54     14 00 90 5D |  if_ne	jmp	#LR__3991
28c58                 | LR__3990
28c58     20 68 06 F1 | 	add	ptr___system__dat__, #32
28c5c     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
28c60     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28c64     01 7A 66 F6 | 	neg	result1, #1
28c68     DC 02 90 FD | 	jmp	#LR__4006
28c6c                 | LR__3991
28c6c     58 93 02 F6 | 	mov	arg01, local06
28c70     00 94 06 F6 | 	mov	arg02, #0
28c74     34 96 06 F6 | 	mov	arg03, #52
28c78     49 B9 02 F6 | 	mov	local10, arg01
28c7c     D8 00 A0 FD | 	call	#\builtin_bytefill_
28c80     20 B6 06 F1 | 	add	local09, #32
28c84     5B BB 02 FB | 	rdlong	local11, local09
28c88     5D BD 02 F6 | 	mov	local12, local11
28c8c     5D BF 02 F6 | 	mov	local13, local11
28c90     20 B6 86 F1 | 	sub	local09, #32
28c94     5F C1 02 F6 | 	mov	local14, local13
28c98     13 BC 46 F7 | 	zerox	local12, #19
28c9c     14 C0 46 F0 | 	shr	local14, #20
28ca0     02 C0 66 F0 | 	shl	local14, #2
28ca4     2D C1 02 F1 | 	add	local14, __methods__
28ca8     60 C1 02 FB | 	rdlong	local14, local14
28cac     58 C3 02 F6 | 	mov	local15, local06
28cb0     5A C5 02 F6 | 	mov	local16, local08
28cb4     55 C7 02 F6 | 	mov	local17, local03
28cb8     61 93 02 F6 | 	mov	arg01, local15
28cbc     62 95 02 F6 | 	mov	arg02, local16
28cc0     63 97 02 F6 | 	mov	arg03, local17
28cc4     32 C9 02 F6 | 	mov	local18, objptr
28cc8     5E 65 02 F6 | 	mov	objptr, local12
28ccc     2D C0 62 FD | 	call	local14
28cd0     64 65 02 F6 | 	mov	objptr, local18
28cd4     3D CB 0A F6 | 	mov	local19, result1 wz
28cd8     04 AA CE 57 |  if_ne	test	local03, #4 wz
28cdc     58 00 90 AD |  if_e	jmp	#LR__3992
28ce0     24 B6 06 F1 | 	add	local09, #36
28ce4     5B BB 02 FB | 	rdlong	local11, local09
28ce8     5D BD 02 F6 | 	mov	local12, local11
28cec     5D BF 02 F6 | 	mov	local13, local11
28cf0     24 B6 86 F1 | 	sub	local09, #36
28cf4     5F C1 02 F6 | 	mov	local14, local13
28cf8     13 BC 46 F7 | 	zerox	local12, #19
28cfc     14 C0 46 F0 | 	shr	local14, #20
28d00     02 C0 66 F0 | 	shl	local14, #2
28d04     2D C1 02 F1 | 	add	local14, __methods__
28d08     60 C1 02 FB | 	rdlong	local14, local14
28d0c     58 C3 02 F6 | 	mov	local15, local06
28d10     5A C5 02 F6 | 	mov	local16, local08
28d14     56 C7 02 F6 | 	mov	local17, local04
28d18     61 93 02 F6 | 	mov	arg01, local15
28d1c     62 95 02 F6 | 	mov	arg02, local16
28d20     63 97 02 F6 | 	mov	arg03, local17
28d24     32 C9 02 F6 | 	mov	local18, objptr
28d28     5E 65 02 F6 | 	mov	objptr, local12
28d2c     2D C0 62 FD | 	call	local14
28d30     64 65 02 F6 | 	mov	objptr, local18
28d34     3D CB 02 F6 | 	mov	local19, result1
28d38                 | LR__3992
28d38     00 CA 0E F2 | 	cmp	local19, #0 wz
28d3c     DC 01 90 5D |  if_ne	jmp	#LR__4004
28d40     55 CD 02 F6 | 	mov	local20, local03
28d44     03 CC 0E F5 | 	and	local20, #3 wz
28d48     02 AE 46 55 |  if_ne	or	local05, #2
28d4c     01 CC 0E F2 | 	cmp	local20, #1 wz
28d50     01 AE 46 55 |  if_ne	or	local05, #1
28d54     20 AA CE F7 | 	test	local03, #32 wz
28d58     80 AF 46 55 |  if_ne	or	local05, #384
28d5c     08 B0 06 F1 | 	add	local06, #8
28d60     58 AF 62 FC | 	wrlong	local05, local06
28d64     0C B0 06 F1 | 	add	local06, #12
28d68     58 CF 0A FB | 	rdlong	local21, local06 wz
28d6c     14 B0 86 F1 | 	sub	local06, #20
28d70     18 00 90 5D |  if_ne	jmp	#LR__3993
28d74     04 B6 06 F1 | 	add	local09, #4
28d78     5B CF 02 FB | 	rdlong	local21, local09
28d7c     04 B6 86 F1 | 	sub	local09, #4
28d80     14 B0 06 F1 | 	add	local06, #20
28d84     58 CF 62 FC | 	wrlong	local21, local06
28d88     14 B0 86 F1 | 	sub	local06, #20
28d8c                 | LR__3993
28d8c     18 B0 06 F1 | 	add	local06, #24
28d90     58 CF 0A FB | 	rdlong	local21, local06 wz
28d94     18 B0 86 F1 | 	sub	local06, #24
28d98     18 00 90 5D |  if_ne	jmp	#LR__3994
28d9c     08 B6 06 F1 | 	add	local09, #8
28da0     5B CF 02 FB | 	rdlong	local21, local09
28da4     08 B6 86 F1 | 	sub	local09, #8
28da8     18 B0 06 F1 | 	add	local06, #24
28dac     58 CF 62 FC | 	wrlong	local21, local06
28db0     18 B0 86 F1 | 	sub	local06, #24
28db4                 | LR__3994
28db4     24 B0 06 F1 | 	add	local06, #36
28db8     58 CF 0A FB | 	rdlong	local21, local06 wz
28dbc     24 B0 86 F1 | 	sub	local06, #36
28dc0     5B CF 02 AB |  if_e	rdlong	local21, local09
28dc4     24 B0 06 A1 |  if_e	add	local06, #36
28dc8     58 CF 62 AC |  if_e	wrlong	local21, local06
28dcc     24 B0 86 A1 |  if_e	sub	local06, #36
28dd0     28 B0 06 F1 | 	add	local06, #40
28dd4     58 CF 0A FB | 	rdlong	local21, local06 wz
28dd8     28 B0 86 F1 | 	sub	local06, #40
28ddc     18 00 90 5D |  if_ne	jmp	#LR__3995
28de0     10 B6 06 F1 | 	add	local09, #16
28de4     5B CF 02 FB | 	rdlong	local21, local09
28de8     10 B6 86 F1 | 	sub	local09, #16
28dec     28 B0 06 F1 | 	add	local06, #40
28df0     58 CF 62 FC | 	wrlong	local21, local06
28df4     28 B0 86 F1 | 	sub	local06, #40
28df8                 | LR__3995
28df8     30 B0 06 F1 | 	add	local06, #48
28dfc     58 CF 0A FB | 	rdlong	local21, local06 wz
28e00     30 B0 86 F1 | 	sub	local06, #48
28e04     18 00 90 5D |  if_ne	jmp	#LR__3996
28e08     0C B6 06 F1 | 	add	local09, #12
28e0c     5B CF 02 FB | 	rdlong	local21, local09
28e10     0C B6 86 F1 | 	sub	local09, #12
28e14     30 B0 06 F1 | 	add	local06, #48
28e18     58 CF 62 FC | 	wrlong	local21, local06
28e1c     30 B0 86 F1 | 	sub	local06, #48
28e20                 | LR__3996
28e20     20 B0 06 F1 | 	add	local06, #32
28e24     58 CF 0A FB | 	rdlong	local21, local06 wz
28e28     20 B0 86 F1 | 	sub	local06, #32
28e2c     18 00 90 5D |  if_ne	jmp	#LR__3997
28e30     50 B6 06 F1 | 	add	local09, #80
28e34     5B CF 02 FB | 	rdlong	local21, local09
28e38     50 B6 86 F1 | 	sub	local09, #80
28e3c     20 B0 06 F1 | 	add	local06, #32
28e40     58 CF 62 FC | 	wrlong	local21, local06
28e44     20 B0 86 F1 | 	sub	local06, #32
28e48                 | LR__3997
28e48     1C B0 06 F1 | 	add	local06, #28
28e4c     58 CF 0A FB | 	rdlong	local21, local06 wz
28e50     1C B0 86 F1 | 	sub	local06, #28
28e54     18 00 90 5D |  if_ne	jmp	#LR__3998
28e58     54 B6 06 F1 | 	add	local09, #84
28e5c     5B CF 02 FB | 	rdlong	local21, local09
28e60     54 B6 86 F1 | 	sub	local09, #84
28e64     1C B0 06 F1 | 	add	local06, #28
28e68     58 CF 62 FC | 	wrlong	local21, local06
28e6c     1C B0 86 F1 | 	sub	local06, #28
28e70                 | LR__3998
28e70     1C B0 06 F1 | 	add	local06, #28
28e74     58 CF 0A FB | 	rdlong	local21, local06 wz
28e78     1C B0 86 F1 | 	sub	local06, #28
28e7c     1C 00 90 5D |  if_ne	jmp	#LR__3999
28e80     01 B2 06 F6 | 	mov	local07, #1
28e84     32 93 02 F6 | 	mov	arg01, objptr
28e88     00 C0 05 FF 
28e8c     00 92 46 F5 | 	or	arg01, ##192937984
28e90     1C B0 06 F1 | 	add	local06, #28
28e94     58 93 62 FC | 	wrlong	arg01, local06
28e98     1C B0 86 F1 | 	sub	local06, #28
28e9c                 | LR__3999
28e9c     20 B0 06 F1 | 	add	local06, #32
28ea0     58 CF 0A FB | 	rdlong	local21, local06 wz
28ea4     20 B0 86 F1 | 	sub	local06, #32
28ea8     1C 00 90 5D |  if_ne	jmp	#LR__4000
28eac     01 B2 06 F6 | 	mov	local07, #1
28eb0     32 93 02 F6 | 	mov	arg01, objptr
28eb4     00 C8 05 FF 
28eb8     00 92 46 F5 | 	or	arg01, ##193986560
28ebc     20 B0 06 F1 | 	add	local06, #32
28ec0     58 93 62 FC | 	wrlong	arg01, local06
28ec4     20 B0 86 F1 | 	sub	local06, #32
28ec8                 | LR__4000
28ec8     2C B0 06 F1 | 	add	local06, #44
28ecc     58 CF 0A FB | 	rdlong	local21, local06 wz
28ed0     2C B0 86 F1 | 	sub	local06, #44
28ed4     44 00 90 5D |  if_ne	jmp	#LR__4003
28ed8     14 B6 06 F1 | 	add	local09, #20
28edc     5B CF 0A FB | 	rdlong	local21, local09 wz
28ee0     14 B6 86 F1 | 	sub	local09, #20
28ee4     18 00 90 AD |  if_e	jmp	#LR__4001
28ee8     14 B6 06 F1 | 	add	local09, #20
28eec     5B CF 02 FB | 	rdlong	local21, local09
28ef0     2C B0 06 F1 | 	add	local06, #44
28ef4     58 CF 62 FC | 	wrlong	local21, local06
28ef8     2C B0 86 F1 | 	sub	local06, #44
28efc     1C 00 90 FD | 	jmp	#LR__4002
28f00                 | LR__4001
28f00     01 B2 06 F6 | 	mov	local07, #1
28f04     32 93 02 F6 | 	mov	arg01, objptr
28f08     00 D0 05 FF 
28f0c     00 92 46 F5 | 	or	arg01, ##195035136
28f10     2C B0 06 F1 | 	add	local06, #44
28f14     58 93 62 FC | 	wrlong	arg01, local06
28f18     2C B0 86 F1 | 	sub	local06, #44
28f1c                 | LR__4002
28f1c                 | LR__4003
28f1c                 | LR__4004
28f1c     00 B2 0E F2 | 	cmp	local07, #0 wz
28f20     58 93 02 56 |  if_ne	mov	arg01, local06
28f24     E4 04 B0 5D |  if_ne	call	#__system____default_buffer_init
28f28     00 CA 0E F2 | 	cmp	local19, #0 wz
28f2c     00 92 06 A6 |  if_e	mov	arg01, #0
28f30     10 00 90 5D |  if_ne	jmp	#LR__4005
28f34     00 92 4E F2 | 	cmps	arg01, #0 wz
28f38     20 68 06 F1 | 	add	ptr___system__dat__, #32
28f3c     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
28f40     20 68 86 F1 | 	sub	ptr___system__dat__, #32
28f44                 | LR__4005
28f44     65 7B 02 F6 | 	mov	result1, local19
28f48                 | LR__4006
28f48     E7 F0 03 F6 | 	mov	ptra, fp
28f4c     F2 00 A0 FD | 	call	#popregs_
28f50                 | __system___openraw_ret
28f50     2D 00 64 FD | 	ret
28f54                 | 
28f54                 | __system___closeraw
28f54     05 CA 05 F6 | 	mov	COUNT_, #5
28f58     E8 00 A0 FD | 	call	#pushregs_
28f5c     49 A7 02 F6 | 	mov	local01, arg01
28f60     00 A8 06 F6 | 	mov	local02, #0
28f64     08 A6 06 F1 | 	add	local01, #8
28f68     53 7B 0A FB | 	rdlong	result1, local01 wz
28f6c     08 A6 86 F1 | 	sub	local01, #8
28f70     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
28f74     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
28f78     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
28f7c     01 7A 66 A6 |  if_e	neg	result1, #1
28f80     A8 00 90 AD |  if_e	jmp	#LR__4012
28f84     2C A6 06 F1 | 	add	local01, #44
28f88     53 7B 0A FB | 	rdlong	result1, local01 wz
28f8c     2C A6 86 F1 | 	sub	local01, #44
28f90     38 00 90 AD |  if_e	jmp	#LR__4010
28f94     2C A6 06 F1 | 	add	local01, #44
28f98     53 AB 02 FB | 	rdlong	local03, local01
28f9c     55 AD 02 F6 | 	mov	local04, local03
28fa0     2C A6 86 F1 | 	sub	local01, #44
28fa4     13 AC 46 F7 | 	zerox	local04, #19
28fa8     14 AA 46 F0 | 	shr	local03, #20
28fac     02 AA 66 F0 | 	shl	local03, #2
28fb0     2D AB 02 F1 | 	add	local03, __methods__
28fb4     55 AB 02 FB | 	rdlong	local03, local03
28fb8     53 93 02 F6 | 	mov	arg01, local01
28fbc     32 AF 02 F6 | 	mov	local05, objptr
28fc0     56 65 02 F6 | 	mov	objptr, local04
28fc4     2D AA 62 FD | 	call	local03
28fc8     57 65 02 F6 | 	mov	objptr, local05
28fcc                 | LR__4010
28fcc     24 A6 06 F1 | 	add	local01, #36
28fd0     53 AF 0A FB | 	rdlong	local05, local01 wz
28fd4     24 A6 86 F1 | 	sub	local01, #36
28fd8     3C 00 90 AD |  if_e	jmp	#LR__4011
28fdc     24 A6 06 F1 | 	add	local01, #36
28fe0     53 AB 02 FB | 	rdlong	local03, local01
28fe4     55 AD 02 F6 | 	mov	local04, local03
28fe8     24 A6 86 F1 | 	sub	local01, #36
28fec     13 AC 46 F7 | 	zerox	local04, #19
28ff0     14 AA 46 F0 | 	shr	local03, #20
28ff4     02 AA 66 F0 | 	shl	local03, #2
28ff8     2D AB 02 F1 | 	add	local03, __methods__
28ffc     55 AB 02 FB | 	rdlong	local03, local03
29000     53 93 02 F6 | 	mov	arg01, local01
29004     32 AF 02 F6 | 	mov	local05, objptr
29008     56 65 02 F6 | 	mov	objptr, local04
2900c     2D AA 62 FD | 	call	local03
29010     57 65 02 F6 | 	mov	objptr, local05
29014     3D A9 02 F6 | 	mov	local02, result1
29018                 | LR__4011
29018     53 93 02 F6 | 	mov	arg01, local01
2901c     00 94 06 F6 | 	mov	arg02, #0
29020     34 96 06 F6 | 	mov	arg03, #52
29024     D8 00 A0 FD | 	call	#\builtin_bytefill_
29028     54 7B 02 F6 | 	mov	result1, local02
2902c                 | LR__4012
2902c     E7 F0 03 F6 | 	mov	ptra, fp
29030     F2 00 A0 FD | 	call	#popregs_
29034                 | __system___closeraw_ret
29034     2D 00 64 FD | 	ret
29038                 | 
29038                 | __system___vfs_open_fat_handle
29038     03 CA 05 F6 | 	mov	COUNT_, #3
2903c     E8 00 A0 FD | 	call	#pushregs_
29040     49 A7 0A F6 | 	mov	local01, arg01 wz
29044     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
29048     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2904c     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
29050     01 7A 66 A6 |  if_e	neg	result1, #1
29054     80 00 90 AD |  if_e	jmp	#LR__4021
29058     01 00 00 FF 
2905c     14 92 06 F6 | 	mov	arg01, ##532
29060     80 F3 BF FD | 	call	#__system___gc_alloc_managed
29064     3D A9 02 F6 | 	mov	local02, result1
29068     01 00 00 FF 
2906c     34 92 06 F6 | 	mov	arg01, ##564
29070     70 F3 BF FD | 	call	#__system___gc_alloc_managed
29074     32 AB 02 F6 | 	mov	local03, objptr
29078     54 65 02 F6 | 	mov	objptr, local02
2907c     01 00 00 FF 
29080     10 64 06 F1 | 	add	objptr, ##528
29084     32 A7 62 FC | 	wrlong	local01, objptr
29088                 | ' #line 4 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/diskio.cc"
29088                 | ' 
29088                 | ' 
29088                 | ' vfs_file_t *fh;
29088                 | ' 
29088                 | ' DRESULT disk_sethandle(BYTE pdrv, vfs_file_t *fhandle) {
29088                 | '     fh = fhandle;
29088                 | '     return RES_OK;
29088     92 01 00 FF 
2908c     1E 95 06 F6 | 	mov	arg02, ##@LR__5477
29090     3D 93 02 F6 | 	mov	arg01, result1
29094     00 96 06 F6 | 	mov	arg03, #0
29098     54 65 02 F6 | 	mov	objptr, local02
2909c     4C 65 B0 FD | 	call	#_fatfs_cc_f_mount
290a0     55 65 02 F6 | 	mov	objptr, local03
290a4     3D 93 0A F6 | 	mov	arg01, result1 wz
290a8     18 00 90 AD |  if_e	jmp	#LR__4020
290ac     49 93 6A F6 | 	neg	arg01, arg01 wz
290b0     20 68 06 F1 | 	add	ptr___system__dat__, #32
290b4     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
290b8     20 68 86 F1 | 	sub	ptr___system__dat__, #32
290bc     00 7A 06 F6 | 	mov	result1, #0
290c0     14 00 90 FD | 	jmp	#LR__4021
290c4                 | LR__4020
290c4     54 93 02 F6 | 	mov	arg01, local02
290c8     32 AB 02 F6 | 	mov	local03, objptr
290cc     54 65 02 F6 | 	mov	objptr, local02
290d0     88 8B B0 FD | 	call	#_fatfs_cc_get_vfs
290d4     55 65 02 F6 | 	mov	objptr, local03
290d8                 | LR__4021
290d8     E7 F0 03 F6 | 	mov	ptra, fp
290dc     F2 00 A0 FD | 	call	#popregs_
290e0                 | __system___vfs_open_fat_handle_ret
290e0     2D 00 64 FD | 	ret
290e4                 | 
290e4                 | __system___vfs_open_sdcardx
290e4     04 CA 05 F6 | 	mov	COUNT_, #4
290e8     E8 00 A0 FD | 	call	#pushregs_
290ec     4C 17 B0 FD | 	call	#__system___sdmm_open
290f0     3D A7 0A F6 | 	mov	local01, result1 wz
290f4     00 7A 06 A6 |  if_e	mov	result1, #0
290f8     4C 00 90 AD |  if_e	jmp	#LR__4031
290fc     53 93 02 F6 | 	mov	arg01, local01
29100     34 FF BF FD | 	call	#__system___vfs_open_fat_handle
29104     3D A9 0A F6 | 	mov	local02, result1 wz
29108     38 00 90 5D |  if_ne	jmp	#LR__4030
2910c     24 A6 06 F1 | 	add	local01, #36
29110     53 AB 02 FB | 	rdlong	local03, local01
29114     55 AD 02 F6 | 	mov	local04, local03
29118     24 A6 86 F1 | 	sub	local01, #36
2911c     13 AC 46 F7 | 	zerox	local04, #19
29120     14 AA 46 F0 | 	shr	local03, #20
29124     02 AA 66 F0 | 	shl	local03, #2
29128     2D AB 02 F1 | 	add	local03, __methods__
2912c     55 AB 02 FB | 	rdlong	local03, local03
29130     53 93 02 F6 | 	mov	arg01, local01
29134     32 A7 02 F6 | 	mov	local01, objptr
29138     56 65 02 F6 | 	mov	objptr, local04
2913c     2D AA 62 FD | 	call	local03
29140     53 65 02 F6 | 	mov	objptr, local01
29144                 | LR__4030
29144     54 7B 02 F6 | 	mov	result1, local02
29148                 | LR__4031
29148     E7 F0 03 F6 | 	mov	ptra, fp
2914c     F2 00 A0 FD | 	call	#popregs_
29150                 | __system___vfs_open_sdcardx_ret
29150     2D 00 64 FD | 	ret
29154                 | 
29154                 | __system____default_getc
29154     03 CA 05 F6 | 	mov	COUNT_, #3
29158     E8 00 A0 FD | 	call	#pushregs_
2915c     49 A7 02 F6 | 	mov	local01, arg01
29160     53 A9 02 FB | 	rdlong	local02, local01
29164     08 A6 06 F1 | 	add	local01, #8
29168     53 AB 02 FB | 	rdlong	local03, local01
2916c     08 A6 86 F1 | 	sub	local01, #8
29170     08 AA CE F7 | 	test	local03, #8 wz
29174     53 93 02 56 |  if_ne	mov	arg01, local01
29178     08 01 B0 5D |  if_ne	call	#__system____default_flush
2917c     08 A6 06 F1 | 	add	local01, #8
29180     53 AB 02 FB | 	rdlong	local03, local01
29184     04 AA 46 F5 | 	or	local03, #4
29188     53 AB 62 FC | 	wrlong	local03, local01
2918c     08 A6 86 F1 | 	sub	local01, #8
29190     54 AB 0A FB | 	rdlong	local03, local02 wz
29194     0C 00 90 5D |  if_ne	jmp	#LR__4040
29198     53 93 02 F6 | 	mov	arg01, local01
2919c     E0 18 B0 FD | 	call	#__system____default_filbuf
291a0     3D AB 02 F6 | 	mov	local03, result1
291a4                 | LR__4040
291a4     01 AA 56 F2 | 	cmps	local03, #1 wc
291a8     01 7A 66 C6 |  if_b	neg	result1, #1
291ac     1C 00 90 CD |  if_b	jmp	#LR__4041
291b0     01 AA 86 F1 | 	sub	local03, #1
291b4     54 AB 62 FC | 	wrlong	local03, local02
291b8     04 A8 06 F1 | 	add	local02, #4
291bc     54 AB 02 FB | 	rdlong	local03, local02
291c0     55 7B C2 FA | 	rdbyte	result1, local03
291c4     01 AA 06 F1 | 	add	local03, #1
291c8     54 AB 62 FC | 	wrlong	local03, local02
291cc                 | LR__4041
291cc     E7 F0 03 F6 | 	mov	ptra, fp
291d0     F2 00 A0 FD | 	call	#popregs_
291d4                 | __system____default_getc_ret
291d4     2D 00 64 FD | 	ret
291d8                 | 
291d8                 | __system____default_putc
291d8     06 CA 05 F6 | 	mov	COUNT_, #6
291dc     E8 00 A0 FD | 	call	#pushregs_
291e0     49 A7 02 F6 | 	mov	local01, arg01
291e4     4A A9 02 F6 | 	mov	local02, arg02
291e8     54 AB 02 FB | 	rdlong	local03, local02
291ec     08 A8 06 F1 | 	add	local02, #8
291f0     54 95 02 FB | 	rdlong	arg02, local02
291f4     08 A8 86 F1 | 	sub	local02, #8
291f8     04 94 CE F7 | 	test	arg02, #4 wz
291fc     54 93 02 56 |  if_ne	mov	arg01, local02
29200     80 00 B0 5D |  if_ne	call	#__system____default_flush
29204     08 A8 06 F1 | 	add	local02, #8
29208     54 AD 02 FB | 	rdlong	local04, local02
2920c     08 AC 46 F5 | 	or	local04, #8
29210     54 AD 62 FC | 	wrlong	local04, local02
29214     55 AF 02 FB | 	rdlong	local05, local03
29218     0C AA 06 F1 | 	add	local03, #12
2921c     55 95 02 FB | 	rdlong	arg02, local03
29220     0C AA 86 F1 | 	sub	local03, #12
29224     57 7B 02 F6 | 	mov	result1, local05
29228     4A 7B 02 F1 | 	add	result1, arg02
2922c     3D A7 42 FC | 	wrbyte	local01, result1
29230     53 A7 E2 F8 | 	getbyte	local01, local01, #0
29234     01 AE 06 F1 | 	add	local05, #1
29238     55 AF 62 FC | 	wrlong	local05, local03
2923c     02 A8 86 F1 | 	sub	local02, #2
29240     54 B1 EA FA | 	rdword	local06, local02 wz
29244     06 A8 86 F1 | 	sub	local02, #6
29248     08 AA 06 51 |  if_ne	add	local03, #8
2924c     55 AD 02 5B |  if_ne	rdlong	local04, local03
29250     56 AF 0A 52 |  if_ne	cmp	local05, local04 wz
29254     0C 00 90 AD |  if_e	jmp	#LR__4050
29258     0A A6 0E F2 | 	cmp	local01, #10 wz
2925c     01 B0 0E A2 |  if_e	cmp	local06, #1 wz
29260     10 00 90 5D |  if_ne	jmp	#LR__4051
29264                 | LR__4050
29264     54 93 02 F6 | 	mov	arg01, local02
29268     18 00 B0 FD | 	call	#__system____default_flush
2926c     00 7A 0E F2 | 	cmp	result1, #0 wz
29270     01 A6 66 56 |  if_ne	neg	local01, #1
29274                 | LR__4051
29274     53 7B 02 F6 | 	mov	result1, local01
29278     E7 F0 03 F6 | 	mov	ptra, fp
2927c     F2 00 A0 FD | 	call	#popregs_
29280                 | __system____default_putc_ret
29280     2D 00 64 FD | 	ret
29284                 | 
29284                 | __system____default_flush
29284     07 CA 05 F6 | 	mov	COUNT_, #7
29288     E8 00 A0 FD | 	call	#pushregs_
2928c     49 A7 02 F6 | 	mov	local01, arg01
29290     53 A9 02 FB | 	rdlong	local02, local01
29294     54 AB 02 FB | 	rdlong	local03, local02
29298     08 A6 06 F1 | 	add	local01, #8
2929c     53 7D 02 FB | 	rdlong	result2, local01
292a0     08 A6 86 F1 | 	sub	local01, #8
292a4     08 7C CE F7 | 	test	result2, #8 wz
292a8     D4 00 90 AD |  if_e	jmp	#LR__4062
292ac     01 AA 56 F2 | 	cmps	local03, #1 wc
292b0     2C 01 90 CD |  if_b	jmp	#LR__4064
292b4     08 A6 06 F1 | 	add	local01, #8
292b8     53 7D 02 FB | 	rdlong	result2, local01
292bc     08 A6 86 F1 | 	sub	local01, #8
292c0     80 7C CE F7 | 	test	result2, #128 wz
292c4     6C 00 90 AD |  if_e	jmp	#LR__4061
292c8     08 A6 06 F1 | 	add	local01, #8
292cc     53 97 02 FB | 	rdlong	arg03, local01
292d0     08 A6 86 F1 | 	sub	local01, #8
292d4     00 97 CE F7 | 	test	arg03, #256 wz
292d8     58 00 90 AD |  if_e	jmp	#LR__4060
292dc     30 A6 06 F1 | 	add	local01, #48
292e0     53 AD 02 FB | 	rdlong	local04, local01
292e4     56 AF 02 F6 | 	mov	local05, local04
292e8     30 A6 86 F1 | 	sub	local01, #48
292ec     13 AE 46 F7 | 	zerox	local05, #19
292f0     14 AC 46 F0 | 	shr	local04, #20
292f4     02 AC 66 F0 | 	shl	local04, #2
292f8     2D AD 02 F1 | 	add	local04, __methods__
292fc     56 AD 02 FB | 	rdlong	local04, local04
29300     53 93 02 F6 | 	mov	arg01, local01
29304     00 94 06 F6 | 	mov	arg02, #0
29308     00 96 06 F6 | 	mov	arg03, #0
2930c     02 98 06 F6 | 	mov	arg04, #2
29310     32 B1 02 F6 | 	mov	local06, objptr
29314     57 65 02 F6 | 	mov	objptr, local05
29318     2D AC 62 FD | 	call	local04
2931c     58 65 02 F6 | 	mov	objptr, local06
29320     08 A6 06 F1 | 	add	local01, #8
29324     53 B1 02 FB | 	rdlong	local06, local01
29328     00 B1 26 F5 | 	andn	local06, #256
2932c     53 B1 62 FC | 	wrlong	local06, local01
29330     08 A6 86 F1 | 	sub	local01, #8
29334                 | LR__4060
29334                 | LR__4061
29334     18 A6 06 F1 | 	add	local01, #24
29338     53 AD 02 FB | 	rdlong	local04, local01
2933c     56 AF 02 F6 | 	mov	local05, local04
29340     18 A6 86 F1 | 	sub	local01, #24
29344     13 AE 46 F7 | 	zerox	local05, #19
29348     14 AC 46 F0 | 	shr	local04, #20
2934c     02 AC 66 F0 | 	shl	local04, #2
29350     2D AD 02 F1 | 	add	local04, __methods__
29354     56 AD 02 FB | 	rdlong	local04, local04
29358     0C A8 06 F1 | 	add	local02, #12
2935c     54 95 02 FB | 	rdlong	arg02, local02
29360     0C A8 86 F1 | 	sub	local02, #12
29364     53 93 02 F6 | 	mov	arg01, local01
29368     55 97 02 F6 | 	mov	arg03, local03
2936c     32 B1 02 F6 | 	mov	local06, objptr
29370     57 65 02 F6 | 	mov	objptr, local05
29374     2D AC 62 FD | 	call	local04
29378     58 65 02 F6 | 	mov	objptr, local06
2937c     60 00 90 FD | 	jmp	#LR__4064
29380                 | LR__4062
29380     08 A6 06 F1 | 	add	local01, #8
29384     53 B1 02 FB | 	rdlong	local06, local01
29388     08 A6 86 F1 | 	sub	local01, #8
2938c     04 B0 CE F7 | 	test	local06, #4 wz
29390     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
29394     48 00 90 AD |  if_e	jmp	#LR__4063
29398     55 95 62 F6 | 	neg	arg02, local03
2939c     4A 97 02 F6 | 	mov	arg03, arg02
293a0     1F 96 C6 F0 | 	sar	arg03, #31
293a4     30 A6 06 F1 | 	add	local01, #48
293a8     53 AD 02 FB | 	rdlong	local04, local01
293ac     56 AF 02 F6 | 	mov	local05, local04
293b0     30 A6 86 F1 | 	sub	local01, #48
293b4     13 AE 46 F7 | 	zerox	local05, #19
293b8     14 AC 46 F0 | 	shr	local04, #20
293bc     02 AC 66 F0 | 	shl	local04, #2
293c0     2D AD 02 F1 | 	add	local04, __methods__
293c4     56 AD 02 FB | 	rdlong	local04, local04
293c8     53 93 02 F6 | 	mov	arg01, local01
293cc     01 98 06 F6 | 	mov	arg04, #1
293d0     32 B1 02 F6 | 	mov	local06, objptr
293d4     57 65 02 F6 | 	mov	objptr, local05
293d8     2D AC 62 FD | 	call	local04
293dc     58 65 02 F6 | 	mov	objptr, local06
293e0                 | LR__4063
293e0                 | LR__4064
293e0     54 01 68 FC | 	wrlong	#0, local02
293e4     04 A8 06 F1 | 	add	local02, #4
293e8     54 01 68 FC | 	wrlong	#0, local02
293ec     08 A6 06 F1 | 	add	local01, #8
293f0     53 B3 02 FB | 	rdlong	local07, local01
293f4     0C B2 26 F5 | 	andn	local07, #12
293f8     53 B3 62 FC | 	wrlong	local07, local01
293fc     00 7A 06 F6 | 	mov	result1, #0
29400     E7 F0 03 F6 | 	mov	ptra, fp
29404     F2 00 A0 FD | 	call	#popregs_
29408                 | __system____default_flush_ret
29408     2D 00 64 FD | 	ret
2940c                 | 
2940c                 | __system____default_buffer_init
2940c     02 CA 05 F6 | 	mov	COUNT_, #2
29410     E8 00 A0 FD | 	call	#pushregs_
29414     49 A7 02 F6 | 	mov	local01, arg01
29418     53 A9 02 FB | 	rdlong	local02, local01
2941c     53 93 02 F6 | 	mov	arg01, local01
29420     A4 03 B0 FD | 	call	#__system___isatty
29424     00 7A 0E F2 | 	cmp	result1, #0 wz
29428     06 A6 06 51 |  if_ne	add	local01, #6
2942c     53 0B 58 5C |  if_ne	wrword	#5, local01
29430     06 A6 06 A1 |  if_e	add	local01, #6
29434     53 0D 58 AC |  if_e	wrword	#6, local01
29438     10 A8 06 F1 | 	add	local02, #16
2943c     54 A7 02 F6 | 	mov	local01, local02
29440     04 A8 86 F1 | 	sub	local02, #4
29444     54 A7 62 FC | 	wrlong	local01, local02
29448     04 A8 86 F1 | 	sub	local02, #4
2944c     02 00 80 FF 
29450     54 01 68 FC | 	wrlong	##1024, local02
29454     00 7A 06 F6 | 	mov	result1, #0
29458     E7 F0 03 F6 | 	mov	ptra, fp
2945c     F2 00 A0 FD | 	call	#popregs_
29460                 | __system____default_buffer_init_ret
29460     2D 00 64 FD | 	ret
29464                 | 
29464                 | __system__stat
29464     04 CA 05 F6 | 	mov	COUNT_, #4
29468     E8 00 A0 FD | 	call	#pushregs_
2946c     4A A7 02 F6 | 	mov	local01, arg02
29470     34 A9 02 F6 | 	mov	local02, ptr___system__dat__
29474     84 A9 06 F1 | 	add	local02, #388
29478     49 95 02 F6 | 	mov	arg02, arg01
2947c     54 93 02 F6 | 	mov	arg01, local02
29480     00 96 06 F6 | 	mov	arg03, #0
29484     A0 BC BF FD | 	call	#__system____getvfsforfile
29488     3D AB 0A F6 | 	mov	local03, result1 wz
2948c     10 00 90 AD |  if_e	jmp	#LR__4070
29490     34 AA 06 F1 | 	add	local03, #52
29494     55 97 0A FB | 	rdlong	arg03, local03 wz
29498     34 AA 86 F1 | 	sub	local03, #52
2949c     14 00 90 5D |  if_ne	jmp	#LR__4071
294a0                 | LR__4070
294a0     20 68 06 F1 | 	add	ptr___system__dat__, #32
294a4     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
294a8     20 68 86 F1 | 	sub	ptr___system__dat__, #32
294ac     01 7A 66 F6 | 	neg	result1, #1
294b0     68 00 90 FD | 	jmp	#LR__4072
294b4                 | LR__4071
294b4     53 93 02 F6 | 	mov	arg01, local01
294b8     00 94 06 F6 | 	mov	arg02, #0
294bc     34 96 06 F6 | 	mov	arg03, #52
294c0     49 AD 02 F6 | 	mov	local04, arg01
294c4     D8 00 A0 FD | 	call	#\builtin_bytefill_
294c8     56 7B 02 F6 | 	mov	result1, local04
294cc     54 93 CA FA | 	rdbyte	arg01, local02 wz
294d0     08 A6 06 A1 |  if_e	add	local01, #8
294d4     08 00 80 AF 
294d8     53 FF 6B AC |  if_e	wrlong	##4607, local01
294dc     00 7A 06 A6 |  if_e	mov	result1, #0
294e0     38 00 90 AD |  if_e	jmp	#LR__4072
294e4     34 AA 06 F1 | 	add	local03, #52
294e8     55 AB 02 FB | 	rdlong	local03, local03
294ec     55 AD 02 F6 | 	mov	local04, local03
294f0     13 AA 46 F7 | 	zerox	local03, #19
294f4     14 AC 46 F0 | 	shr	local04, #20
294f8     02 AC 66 F0 | 	shl	local04, #2
294fc     2D AD 02 F1 | 	add	local04, __methods__
29500     56 AD 02 FB | 	rdlong	local04, local04
29504     54 93 02 F6 | 	mov	arg01, local02
29508     53 95 02 F6 | 	mov	arg02, local01
2950c     32 A9 02 F6 | 	mov	local02, objptr
29510     55 65 02 F6 | 	mov	objptr, local03
29514     2D AC 62 FD | 	call	local04
29518     54 65 02 F6 | 	mov	objptr, local02
2951c                 | LR__4072
2951c     E7 F0 03 F6 | 	mov	ptra, fp
29520     F2 00 A0 FD | 	call	#popregs_
29524                 | __system__stat_ret
29524     2D 00 64 FD | 	ret
29528                 | 
29528                 | __system__write
29528     01 CA 05 F6 | 	mov	COUNT_, #1
2952c     E8 00 A0 FD | 	call	#pushregs_
29530     0A 92 16 F2 | 	cmp	arg01, #10 wc
29534     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
29538     34 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2953c     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
29540     01 7A 66 36 |  if_ae	neg	result1, #1
29544     1C 00 90 3D |  if_ae	jmp	#LR__4080
29548     34 92 06 FD | 	qmul	arg01, #52
2954c     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
29550     02 00 00 FF 
29554     2C A7 06 F1 | 	add	local01, ##1324
29558     18 92 62 FD | 	getqx	arg01
2955c     53 93 02 F1 | 	add	arg01, local01
29560     3C 0F B0 FD | 	call	#__system___vfswrite
29564                 | LR__4080
29564     E7 F0 03 F6 | 	mov	ptra, fp
29568     F2 00 A0 FD | 	call	#popregs_
2956c                 | __system__write_ret
2956c     2D 00 64 FD | 	ret
29570                 | 
29570                 | __system__read
29570     01 CA 05 F6 | 	mov	COUNT_, #1
29574     E8 00 A0 FD | 	call	#pushregs_
29578     0A 92 16 F2 | 	cmp	arg01, #10 wc
2957c     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
29580     34 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
29584     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
29588     01 7A 66 36 |  if_ae	neg	result1, #1
2958c     1C 00 90 3D |  if_ae	jmp	#LR__4090
29590     34 92 06 FD | 	qmul	arg01, #52
29594     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
29598     02 00 00 FF 
2959c     2C A7 06 F1 | 	add	local01, ##1324
295a0     18 92 62 FD | 	getqx	arg01
295a4     53 93 02 F1 | 	add	arg01, local01
295a8     C0 10 B0 FD | 	call	#__system___vfsread
295ac                 | LR__4090
295ac     E7 F0 03 F6 | 	mov	ptra, fp
295b0     F2 00 A0 FD | 	call	#popregs_
295b4                 | __system__read_ret
295b4     2D 00 64 FD | 	ret
295b8                 | 
295b8                 | __system__close
295b8     01 CA 05 F6 | 	mov	COUNT_, #1
295bc     E8 00 A0 FD | 	call	#pushregs_
295c0     0A 92 16 F2 | 	cmp	arg01, #10 wc
295c4     20 68 06 31 |  if_ae	add	ptr___system__dat__, #32
295c8     34 0B 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
295cc     20 68 86 31 |  if_ae	sub	ptr___system__dat__, #32
295d0     01 7A 66 36 |  if_ae	neg	result1, #1
295d4     1C 00 90 3D |  if_ae	jmp	#LR__4100
295d8     34 92 06 FD | 	qmul	arg01, #52
295dc     34 A7 02 F6 | 	mov	local01, ptr___system__dat__
295e0     02 00 00 FF 
295e4     2C A7 06 F1 | 	add	local01, ##1324
295e8     18 92 62 FD | 	getqx	arg01
295ec     53 93 02 F1 | 	add	arg01, local01
295f0     60 F9 BF FD | 	call	#__system___closeraw
295f4                 | LR__4100
295f4     E7 F0 03 F6 | 	mov	ptra, fp
295f8     F2 00 A0 FD | 	call	#popregs_
295fc                 | __system__close_ret
295fc     2D 00 64 FD | 	ret
29600                 | 
29600                 | __system__lseek
29600     0B CA 05 F6 | 	mov	COUNT_, #11
29604     E8 00 A0 FD | 	call	#pushregs_
29608     49 AF 02 F6 | 	mov	local05, arg01
2960c     4A A7 02 F6 | 	mov	local01, arg02
29610     4B A9 02 F6 | 	mov	local02, arg03
29614     4C B1 02 F6 | 	mov	local06, arg04
29618     0A AE 16 F2 | 	cmp	local05, #10 wc
2961c     18 00 90 CD |  if_b	jmp	#LR__4110
29620     20 68 06 F1 | 	add	ptr___system__dat__, #32
29624     34 0B 68 FC | 	wrlong	#5, ptr___system__dat__
29628     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2962c     01 7C 66 F6 | 	neg	result2, #1
29630     01 7A 66 F6 | 	neg	result1, #1
29634     FC 00 90 FD | 	jmp	#LR__4113
29638                 | LR__4110
29638     34 AE 06 FD | 	qmul	local05, #52
2963c     34 93 02 F6 | 	mov	arg01, ptr___system__dat__
29640     02 00 00 FF 
29644     2C 93 06 F1 | 	add	arg01, ##1324
29648     18 B2 62 FD | 	getqx	local07
2964c     49 B3 02 F1 | 	add	local07, arg01
29650     30 B2 06 F1 | 	add	local07, #48
29654     59 AF 0A FB | 	rdlong	local05, local07 wz
29658     30 B2 86 F1 | 	sub	local07, #48
2965c     18 00 90 5D |  if_ne	jmp	#LR__4111
29660     20 68 06 F1 | 	add	ptr___system__dat__, #32
29664     34 21 68 FC | 	wrlong	#16, ptr___system__dat__
29668     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2966c     01 7C 66 F6 | 	neg	result2, #1
29670     01 7A 66 F6 | 	neg	result1, #1
29674     BC 00 90 FD | 	jmp	#LR__4113
29678                 | LR__4111
29678     08 B2 06 F1 | 	add	local07, #8
2967c     59 B5 02 FB | 	rdlong	local08, local07
29680     08 B2 86 F1 | 	sub	local07, #8
29684     80 B4 CE F7 | 	test	local08, #128 wz
29688     08 B2 06 51 |  if_ne	add	local07, #8
2968c     59 B5 02 5B |  if_ne	rdlong	local08, local07
29690     00 B5 46 55 |  if_ne	or	local08, #256
29694     59 B5 62 5C |  if_ne	wrlong	local08, local07
29698     08 B2 86 51 |  if_ne	sub	local07, #8
2969c     53 95 02 F6 | 	mov	arg02, local01
296a0     54 97 02 F6 | 	mov	arg03, local02
296a4     30 B2 06 F1 | 	add	local07, #48
296a8     59 B7 02 FB | 	rdlong	local09, local07
296ac     5B B9 02 F6 | 	mov	local10, local09
296b0     30 B2 86 F1 | 	sub	local07, #48
296b4     13 B8 46 F7 | 	zerox	local10, #19
296b8     14 B6 46 F0 | 	shr	local09, #20
296bc     02 B6 66 F0 | 	shl	local09, #2
296c0     2D B7 02 F1 | 	add	local09, __methods__
296c4     5B B7 02 FB | 	rdlong	local09, local09
296c8     59 93 02 F6 | 	mov	arg01, local07
296cc     58 99 02 F6 | 	mov	arg04, local06
296d0     32 BB 02 F6 | 	mov	local11, objptr
296d4     5C 65 02 F6 | 	mov	objptr, local10
296d8     2D B6 62 FD | 	call	local09
296dc     5D 65 02 F6 | 	mov	objptr, local11
296e0     3D AB 02 F6 | 	mov	local03, result1
296e4     3E AD 02 F6 | 	mov	local04, result2
296e8     55 93 02 F6 | 	mov	arg01, local03
296ec     56 95 02 F6 | 	mov	arg02, local04
296f0     00 7A 06 F6 | 	mov	result1, #0
296f4     00 92 1E F2 | 	cmp	arg01, #0 wcz
296f8     00 94 7E F2 | 	cmpsx	arg02, #0 wcz
296fc     01 7A 86 56 |  if_ne	negc	result1, #1
29700     00 7A 56 F2 | 	cmps	result1, #0 wc
29704     24 00 90 3D |  if_ae	jmp	#LR__4112
29708     55 93 6A F6 | 	neg	arg01, local03 wz
2970c     20 68 06 F1 | 	add	ptr___system__dat__, #32
29710     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
29714     20 68 86 F1 | 	sub	ptr___system__dat__, #32
29718     01 7A 66 56 |  if_ne	neg	result1, #1
2971c     00 7A 06 A6 |  if_e	mov	result1, #0
29720     3D 7D 02 F6 | 	mov	result2, result1
29724     1F 7C C6 F0 | 	sar	result2, #31
29728     08 00 90 FD | 	jmp	#LR__4113
2972c                 | LR__4112
2972c     55 7B 02 F6 | 	mov	result1, local03
29730     56 7D 02 F6 | 	mov	result2, local04
29734                 | LR__4113
29734     E7 F0 03 F6 | 	mov	ptra, fp
29738     F2 00 A0 FD | 	call	#popregs_
2973c                 | __system__lseek_ret
2973c     2D 00 64 FD | 	ret
29740                 | 
29740                 | __system___ioctl
29740     03 CA 05 F6 | 	mov	COUNT_, #3
29744     E8 00 A0 FD | 	call	#pushregs_
29748     00 92 4E F2 | 	cmps	arg01, #0 wz
2974c     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
29750     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
29754     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
29758     01 7A 66 A6 |  if_e	neg	result1, #1
2975c     5C 00 90 AD |  if_e	jmp	#LR__4121
29760     28 92 06 F1 | 	add	arg01, #40
29764     49 A7 02 FB | 	rdlong	local01, arg01
29768     53 A9 02 F6 | 	mov	local02, local01
2976c     28 92 86 F1 | 	sub	arg01, #40
29770     13 A8 46 F7 | 	zerox	local02, #19
29774     14 A6 46 F0 | 	shr	local01, #20
29778     02 A6 66 F0 | 	shl	local01, #2
2977c     2D A7 02 F1 | 	add	local01, __methods__
29780     53 A7 02 FB | 	rdlong	local01, local01
29784     32 AB 02 F6 | 	mov	local03, objptr
29788     54 65 02 F6 | 	mov	objptr, local02
2978c     2D A6 62 FD | 	call	local01
29790     55 65 02 F6 | 	mov	objptr, local03
29794     3D 93 0A F6 | 	mov	arg01, result1 wz
29798     1C 00 90 AD |  if_e	jmp	#LR__4120
2979c     00 92 4E F2 | 	cmps	arg01, #0 wz
297a0     20 68 06 F1 | 	add	ptr___system__dat__, #32
297a4     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
297a8     20 68 86 F1 | 	sub	ptr___system__dat__, #32
297ac     01 7A 66 56 |  if_ne	neg	result1, #1
297b0     00 7A 06 A6 |  if_e	mov	result1, #0
297b4     04 00 90 FD | 	jmp	#LR__4121
297b8                 | LR__4120
297b8     00 7A 06 F6 | 	mov	result1, #0
297bc                 | LR__4121
297bc     E7 F0 03 F6 | 	mov	ptra, fp
297c0     F2 00 A0 FD | 	call	#popregs_
297c4                 | __system___ioctl_ret
297c4     2D 00 64 FD | 	ret
297c8                 | 
297c8                 | __system___isatty
297c8     00 CA 05 F6 | 	mov	COUNT_, #0
297cc     E8 00 A0 FD | 	call	#pushregs_
297d0     0C F0 07 F1 | 	add	ptra, #12
297d4     E7 96 02 F6 | 	mov	arg03, fp
297d8     08 96 06 F1 | 	add	arg03, #8
297dc     00 95 06 F6 | 	mov	arg02, #256
297e0     5C FF BF FD | 	call	#__system___ioctl
297e4     00 7A 0E F2 | 	cmp	result1, #0 wz
297e8     01 7A 06 A6 |  if_e	mov	result1, #1
297ec     00 7A 06 56 |  if_ne	mov	result1, #0
297f0     E7 F0 03 F6 | 	mov	ptra, fp
297f4     F2 00 A0 FD | 	call	#popregs_
297f8                 | __system___isatty_ret
297f8     2D 00 64 FD | 	ret
297fc                 | 
297fc                 | __system____getftab
297fc     0A 92 16 F2 | 	cmp	arg01, #10 wc
29800     34 92 06 CD |  if_b	qmul	arg01, #52
29804     00 7A 06 36 |  if_ae	mov	result1, #0
29808     34 93 02 C6 |  if_b	mov	arg01, ptr___system__dat__
2980c     02 00 00 CF 
29810     2C 93 06 C1 |  if_b	add	arg01, ##1324
29814     18 7A 62 CD |  if_b	getqx	result1
29818     49 7B 02 C1 |  if_b	add	result1, arg01
2981c                 | __system____getftab_ret
2981c     2D 00 64 FD | 	ret
29820                 | 
29820                 | __system__strncpy
29820     49 81 02 F6 | 	mov	_var01, arg01
29824                 | LR__4130
29824     01 96 86 F1 | 	sub	arg03, #1
29828     00 96 56 F2 | 	cmps	arg03, #0 wc
2982c     24 00 90 CD |  if_b	jmp	#LR__4131
29830     4A 7B 02 F6 | 	mov	result1, arg02
29834     01 7A 06 F1 | 	add	result1, #1
29838     4A 83 C2 FA | 	rdbyte	_var02, arg02
2983c     3D 95 02 F6 | 	mov	arg02, result1
29840     40 83 42 FC | 	wrbyte	_var02, _var01
29844     41 83 E2 F8 | 	getbyte	_var02, _var02, #0
29848     07 82 4E F7 | 	zerox	_var02, #7 wz
2984c     01 80 06 F1 | 	add	_var01, #1
29850     D0 FF 9F 5D |  if_ne	jmp	#LR__4130
29854                 | LR__4131
29854     D7 0C 48 FB | 	callpa	#(@LR__4133-@LR__4132)>>2,fcache_load_ptr_
29858                 | LR__4132
29858     01 96 86 F1 | 	sub	arg03, #1
2985c     00 96 56 F2 | 	cmps	arg03, #0 wc
29860     40 85 02 36 |  if_ae	mov	_var03, _var01
29864     01 80 06 31 |  if_ae	add	_var01, #1
29868     42 01 48 3C |  if_ae	wrbyte	#0, _var03
2986c     E8 FF 9F 3D |  if_ae	jmp	#LR__4132
29870                 | LR__4133
29870     49 7B 02 F6 | 	mov	result1, arg01
29874                 | __system__strncpy_ret
29874     2D 00 64 FD | 	ret
29878                 | 
29878                 | __system__strncat
29878     00 94 4E F2 | 	cmps	arg02, #0 wz
2987c     54 00 90 AD |  if_e	jmp	#LR__4145
29880     01 96 16 F2 | 	cmp	arg03, #1 wc
29884     4C 00 90 CD |  if_b	jmp	#LR__4145
29888     49 81 02 F6 | 	mov	_var01, arg01
2988c     D7 06 48 FB | 	callpa	#(@LR__4141-@LR__4140)>>2,fcache_load_ptr_
29890                 | LR__4140
29890     40 7B CA FA | 	rdbyte	result1, _var01 wz
29894     01 80 06 51 |  if_ne	add	_var01, #1
29898     F4 FF 9F 5D |  if_ne	jmp	#LR__4140
2989c                 | LR__4141
2989c     4B 83 02 F6 | 	mov	_var02, arg03
298a0     D7 16 48 FB | 	callpa	#(@LR__4143-@LR__4142)>>2,fcache_load_ptr_
298a4                 | LR__4142
298a4     4A 85 C2 FA | 	rdbyte	_var03, arg02
298a8     42 87 02 F6 | 	mov	_var04, _var03
298ac     07 86 4E F7 | 	zerox	_var04, #7 wz
298b0     01 94 06 F1 | 	add	arg02, #1
298b4     18 00 90 AD |  if_e	jmp	#LR__4144
298b8     01 82 86 F1 | 	sub	_var02, #1
298bc     00 82 56 F2 | 	cmps	_var02, #0 wc
298c0     40 87 02 36 |  if_ae	mov	_var04, _var01
298c4     01 80 06 31 |  if_ae	add	_var01, #1
298c8     43 85 42 3C |  if_ae	wrbyte	_var03, _var04
298cc     D4 FF 9F 3D |  if_ae	jmp	#LR__4142
298d0                 | LR__4143
298d0                 | LR__4144
298d0     40 01 48 FC | 	wrbyte	#0, _var01
298d4                 | LR__4145
298d4     49 7B 02 F6 | 	mov	result1, arg01
298d8                 | __system__strncat_ret
298d8     2D 00 64 FD | 	ret
298dc                 | 
298dc                 | __system__strncmp
298dc     49 81 0A F6 | 	mov	_var01, arg01 wz
298e0     14 00 90 5D |  if_ne	jmp	#LR__4150
298e4     00 94 0E F2 | 	cmp	arg02, #0 wz
298e8     01 82 66 56 |  if_ne	neg	_var02, #1
298ec     00 82 06 A6 |  if_e	mov	_var02, #0
298f0     41 7B 02 F6 | 	mov	result1, _var02
298f4     74 00 90 FD | 	jmp	#__system__strncmp_ret
298f8                 | LR__4150
298f8     00 94 0E F2 | 	cmp	arg02, #0 wz
298fc     01 7A 06 A6 |  if_e	mov	result1, #1
29900     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
29904     4B 85 02 F6 | 	mov	_var03, arg03
29908     D7 16 48 FB | 	callpa	#(@LR__4152-@LR__4151)>>2,fcache_load_ptr_
2990c                 | LR__4151
2990c     40 87 C2 FA | 	rdbyte	_var04, _var01
29910     4A 89 02 F6 | 	mov	_var05, arg02
29914     44 8B C2 FA | 	rdbyte	_var06, _var05
29918     01 84 86 F1 | 	sub	_var03, #1
2991c     00 84 56 F2 | 	cmps	_var03, #0 wc
29920     01 80 06 F1 | 	add	_var01, #1
29924     01 94 06 F1 | 	add	arg02, #1
29928     00 86 0E 32 |  if_ae	cmp	_var04, #0 wz
2992c     08 00 90 2D |  if_nc_and_z	jmp	#LR__4153
29930     45 87 0A 32 |  if_ae	cmp	_var04, _var06 wz
29934     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4151
29938                 | LR__4152
29938                 | LR__4153
29938     00 84 56 F2 | 	cmps	_var03, #0 wc
2993c     00 7A 06 C6 |  if_b	mov	result1, #0
29940     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
29944     45 87 0A F2 | 	cmp	_var04, _var06 wz
29948     00 7A 06 A6 |  if_e	mov	result1, #0
2994c     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
29950     00 86 0E F2 | 	cmp	_var04, #0 wz
29954     01 7A 66 A6 |  if_e	neg	result1, #1
29958     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2995c     00 8A 0E F2 | 	cmp	_var06, #0 wz
29960     01 7A 06 A6 |  if_e	mov	result1, #1
29964     43 7B 02 56 |  if_ne	mov	result1, _var04
29968     45 7B 82 51 |  if_ne	sub	result1, _var06
2996c                 | __system__strncmp_ret
2996c     2D 00 64 FD | 	ret
29970                 | 
29970                 | __system____root_opendir
29970     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
29974     64 7A 06 F1 | 	add	result1, #100
29978     04 92 06 F1 | 	add	arg01, #4
2997c     49 7B 62 FC | 	wrlong	result1, arg01
29980     00 7A 06 F6 | 	mov	result1, #0
29984                 | __system____root_opendir_ret
29984     2D 00 64 FD | 	ret
29988                 | 
29988                 | __system____root_readdir
29988     03 CA 05 F6 | 	mov	COUNT_, #3
2998c     E8 00 A0 FD | 	call	#pushregs_
29990     49 A7 02 F6 | 	mov	local01, arg01
29994     4A A9 02 F6 | 	mov	local02, arg02
29998     04 A6 06 F1 | 	add	local01, #4
2999c     53 AB 02 FB | 	rdlong	local03, local01
299a0     04 A6 86 F1 | 	sub	local01, #4
299a4                 | LR__4160
299a4     34 97 02 F6 | 	mov	arg03, ptr___system__dat__
299a8     74 96 06 F1 | 	add	arg03, #116
299ac     4B AB 0A F2 | 	cmp	local03, arg03 wz
299b0     01 7A 66 A6 |  if_e	neg	result1, #1
299b4     48 00 90 AD |  if_e	jmp	#LR__4161
299b8     55 97 0A FB | 	rdlong	arg03, local03 wz
299bc     04 AA 06 A1 |  if_e	add	local03, #4
299c0     E0 FF 9F AD |  if_e	jmp	#LR__4160
299c4     55 95 02 FB | 	rdlong	arg02, local03
299c8     01 94 06 F1 | 	add	arg02, #1
299cc     54 93 02 F6 | 	mov	arg01, local02
299d0     40 96 06 F6 | 	mov	arg03, #64
299d4     48 FE BF FD | 	call	#__system__strncpy
299d8     50 A8 06 F1 | 	add	local02, #80
299dc     54 03 48 FC | 	wrbyte	#1, local02
299e0     08 A8 86 F1 | 	sub	local02, #8
299e4     54 01 68 FC | 	wrlong	#0, local02
299e8     04 A8 06 F1 | 	add	local02, #4
299ec     54 01 68 FC | 	wrlong	#0, local02
299f0     04 AA 06 F1 | 	add	local03, #4
299f4     04 A6 06 F1 | 	add	local01, #4
299f8     53 AB 62 FC | 	wrlong	local03, local01
299fc     00 7A 06 F6 | 	mov	result1, #0
29a00                 | LR__4161
29a00     E7 F0 03 F6 | 	mov	ptra, fp
29a04     F2 00 A0 FD | 	call	#popregs_
29a08                 | __system____root_readdir_ret
29a08     2D 00 64 FD | 	ret
29a0c                 | 
29a0c                 | __system____root_closedir
29a0c     00 7A 06 F6 | 	mov	result1, #0
29a10                 | __system____root_closedir_ret
29a10     2D 00 64 FD | 	ret
29a14                 | 
29a14                 | __system____root_stat
29a14     4A 81 02 F6 | 	mov	_var01, arg02
29a18     40 93 02 F6 | 	mov	arg01, _var01
29a1c     00 94 06 F6 | 	mov	arg02, #0
29a20     34 96 06 F6 | 	mov	arg03, #52
29a24     D8 00 A0 FD | 	call	#\builtin_bytefill_
29a28     08 80 06 F1 | 	add	_var01, #8
29a2c     08 00 80 FF 
29a30     40 FF 6B FC | 	wrlong	##4607, _var01
29a34     00 7A 06 F6 | 	mov	result1, #0
29a38                 | __system____root_stat_ret
29a38     2D 00 64 FD | 	ret
29a3c                 | 
29a3c                 | __system___normalizeName
29a3c     00 80 06 F6 | 	mov	_var01, #0
29a40     49 83 02 F6 | 	mov	_var02, arg01
29a44     41 85 02 F6 | 	mov	_var03, _var02
29a48                 | LR__4170
29a48     41 87 CA FA | 	rdbyte	_var04, _var02 wz
29a4c     5C 01 90 AD |  if_e	jmp	#LR__4189
29a50     00 80 0E F2 | 	cmp	_var01, #0 wz
29a54     42 87 02 56 |  if_ne	mov	_var04, _var03
29a58     01 84 06 51 |  if_ne	add	_var03, #1
29a5c     43 5F 48 5C |  if_ne	wrbyte	#47, _var04
29a60     00 80 06 56 |  if_ne	mov	_var01, #0
29a64     41 87 C2 FA | 	rdbyte	_var04, _var02
29a68     2E 86 0E F2 | 	cmp	_var04, #46 wz
29a6c     D8 00 90 5D |  if_ne	jmp	#LR__4182
29a70     01 82 06 F1 | 	add	_var02, #1
29a74     41 87 C2 FA | 	rdbyte	_var04, _var02
29a78     01 82 86 F1 | 	sub	_var02, #1
29a7c     2F 86 0E F2 | 	cmp	_var04, #47 wz
29a80     18 00 90 AD |  if_e	jmp	#LR__4171
29a84     01 82 06 F1 | 	add	_var02, #1
29a88     41 89 C2 FA | 	rdbyte	_var05, _var02
29a8c     01 82 86 F1 | 	sub	_var02, #1
29a90     44 8B 02 F6 | 	mov	_var06, _var05
29a94     07 8A 4E F7 | 	zerox	_var06, #7 wz
29a98     10 00 90 5D |  if_ne	jmp	#LR__4172
29a9c                 | LR__4171
29a9c     41 8D 02 F6 | 	mov	_var07, _var02
29aa0     01 8C 06 F1 | 	add	_var07, #1
29aa4     46 83 02 F6 | 	mov	_var02, _var07
29aa8     E0 00 90 FD | 	jmp	#LR__4186
29aac                 | LR__4172
29aac     01 82 06 F1 | 	add	_var02, #1
29ab0     41 8D C2 FA | 	rdbyte	_var07, _var02
29ab4     01 82 86 F1 | 	sub	_var02, #1
29ab8     46 87 E2 F8 | 	getbyte	_var04, _var07, #0
29abc     2E 86 0E F2 | 	cmp	_var04, #46 wz
29ac0     84 00 90 5D |  if_ne	jmp	#LR__4181
29ac4     02 82 06 F1 | 	add	_var02, #2
29ac8     41 8D C2 FA | 	rdbyte	_var07, _var02
29acc     02 82 86 F1 | 	sub	_var02, #2
29ad0     46 87 E2 F8 | 	getbyte	_var04, _var07, #0
29ad4     2F 86 0E F2 | 	cmp	_var04, #47 wz
29ad8     18 00 90 AD |  if_e	jmp	#LR__4173
29adc     02 82 06 F1 | 	add	_var02, #2
29ae0     41 89 C2 FA | 	rdbyte	_var05, _var02
29ae4     02 82 86 F1 | 	sub	_var02, #2
29ae8     44 8B 02 F6 | 	mov	_var06, _var05
29aec     07 8A 4E F7 | 	zerox	_var06, #7 wz
29af0     54 00 90 5D |  if_ne	jmp	#LR__4180
29af4                 | LR__4173
29af4     02 82 06 F1 | 	add	_var02, #2
29af8     49 85 5A F2 | 	cmps	_var03, arg01 wcz
29afc     40 00 90 ED |  if_be	jmp	#LR__4179
29b00     42 8F 02 F6 | 	mov	_var08, _var03
29b04     01 8E 86 F1 | 	sub	_var08, #1
29b08                 | LR__4174
29b08     47 87 C2 FA | 	rdbyte	_var04, _var08
29b0c     2F 86 0E F2 | 	cmp	_var04, #47 wz
29b10     0C 00 90 5D |  if_ne	jmp	#LR__4175
29b14     49 8F 5A F2 | 	cmps	_var08, arg01 wcz
29b18     01 8E 86 11 |  if_a	sub	_var08, #1
29b1c     E8 FF 9F 1D |  if_a	jmp	#LR__4174
29b20                 | LR__4175
29b20     D7 0C 48 FB | 	callpa	#(@LR__4177-@LR__4176)>>2,fcache_load_ptr_
29b24                 | LR__4176
29b24     49 8F 5A F2 | 	cmps	_var08, arg01 wcz
29b28     10 00 90 ED |  if_be	jmp	#LR__4178
29b2c     47 87 C2 FA | 	rdbyte	_var04, _var08
29b30     2F 86 0E F2 | 	cmp	_var04, #47 wz
29b34     01 8E 86 51 |  if_ne	sub	_var08, #1
29b38     E8 FF 9F 5D |  if_ne	jmp	#LR__4176
29b3c                 | LR__4177
29b3c                 | LR__4178
29b3c     47 85 02 F6 | 	mov	_var03, _var08
29b40                 | LR__4179
29b40     01 80 06 F6 | 	mov	_var01, #1
29b44     44 00 90 FD | 	jmp	#LR__4186
29b48                 | LR__4180
29b48                 | LR__4181
29b48                 | LR__4182
29b48     D7 18 48 FB | 	callpa	#(@LR__4184-@LR__4183)>>2,fcache_load_ptr_
29b4c                 | LR__4183
29b4c     41 87 CA FA | 	rdbyte	_var04, _var02 wz
29b50     43 8D 02 56 |  if_ne	mov	_var07, _var04
29b54     2F 8C 0E 52 |  if_ne	cmp	_var07, #47 wz
29b58     20 00 90 AD |  if_e	jmp	#LR__4185
29b5c     41 8B 02 F6 | 	mov	_var06, _var02
29b60     41 89 02 F6 | 	mov	_var05, _var02
29b64     01 88 06 F1 | 	add	_var05, #1
29b68     45 91 C2 FA | 	rdbyte	_var09, _var06
29b6c     44 83 02 F6 | 	mov	_var02, _var05
29b70     42 91 42 FC | 	wrbyte	_var09, _var03
29b74     01 84 06 F1 | 	add	_var03, #1
29b78     D0 FF 9F FD | 	jmp	#LR__4183
29b7c                 | LR__4184
29b7c                 | LR__4185
29b7c     41 87 C2 FA | 	rdbyte	_var04, _var02
29b80     2F 86 0E F2 | 	cmp	_var04, #47 wz
29b84     C0 FE 9F 5D |  if_ne	jmp	#LR__4170
29b88     01 80 06 F6 | 	mov	_var01, #1
29b8c                 | LR__4186
29b8c     D7 0C 48 FB | 	callpa	#(@LR__4188-@LR__4187)>>2,fcache_load_ptr_
29b90                 | LR__4187
29b90     41 87 C2 FA | 	rdbyte	_var04, _var02
29b94     2F 86 0E F2 | 	cmp	_var04, #47 wz
29b98     41 8D 02 A6 |  if_e	mov	_var07, _var02
29b9c     01 8C 06 A1 |  if_e	add	_var07, #1
29ba0     46 83 02 A6 |  if_e	mov	_var02, _var07
29ba4     E8 FF 9F AD |  if_e	jmp	#LR__4187
29ba8                 | LR__4188
29ba8     9C FE 9F FD | 	jmp	#LR__4170
29bac                 | LR__4189
29bac     42 01 48 FC | 	wrbyte	#0, _var03
29bb0                 | __system___normalizeName_ret
29bb0     2D 00 64 FD | 	ret
29bb4                 | 
29bb4                 | __system___strrev
29bb4     49 81 CA FA | 	rdbyte	_var01, arg01 wz
29bb8     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
29bbc     49 83 02 F6 | 	mov	_var02, arg01
29bc0     D7 06 48 FB | 	callpa	#(@LR__4191-@LR__4190)>>2,fcache_load_ptr_
29bc4                 | LR__4190
29bc4     41 81 CA FA | 	rdbyte	_var01, _var02 wz
29bc8     01 82 06 51 |  if_ne	add	_var02, #1
29bcc     F4 FF 9F 5D |  if_ne	jmp	#LR__4190
29bd0                 | LR__4191
29bd0     01 82 86 F1 | 	sub	_var02, #1
29bd4     D7 12 48 FB | 	callpa	#(@LR__4193-@LR__4192)>>2,fcache_load_ptr_
29bd8                 | LR__4192
29bd8     49 83 5A F2 | 	cmps	_var02, arg01 wcz
29bdc     1C 00 90 ED |  if_be	jmp	#LR__4194
29be0     49 81 C2 FA | 	rdbyte	_var01, arg01
29be4     41 85 C2 FA | 	rdbyte	_var03, _var02
29be8     49 85 42 FC | 	wrbyte	_var03, arg01
29bec     41 81 42 FC | 	wrbyte	_var01, _var02
29bf0     01 92 06 F1 | 	add	arg01, #1
29bf4     01 82 86 F1 | 	sub	_var02, #1
29bf8     DC FF 9F FD | 	jmp	#LR__4192
29bfc                 | LR__4193
29bfc                 | LR__4194
29bfc                 | __system___strrev_ret
29bfc     2D 00 64 FD | 	ret
29c00                 | 
29c00                 | __system___fmtpad
29c00     06 CA 05 F6 | 	mov	COUNT_, #6
29c04     E8 00 A0 FD | 	call	#pushregs_
29c08     49 A7 02 F6 | 	mov	local01, arg01
29c0c     4A A9 02 F6 | 	mov	local02, arg02
29c10     4B AB 02 F6 | 	mov	local03, arg03
29c14     54 93 EA F8 | 	getbyte	arg01, local02, #1
29c18     16 A8 46 F0 | 	shr	local02, #22
29c1c     03 A8 0E F5 | 	and	local02, #3 wz
29c20     00 AC 06 F6 | 	mov	local04, #0
29c24     01 A8 06 A6 |  if_e	mov	local02, #1
29c28     4C A9 CA F7 | 	test	local02, arg04 wz
29c2c     00 7A 06 A6 |  if_e	mov	result1, #0
29c30     88 00 90 AD |  if_e	jmp	#LR__4203
29c34     49 AB C2 F2 | 	subr	local03, arg01
29c38     01 AA 56 F2 | 	cmps	local03, #1 wc
29c3c     00 7A 06 C6 |  if_b	mov	result1, #0
29c40     78 00 90 CD |  if_b	jmp	#LR__4203
29c44     03 A8 0E F2 | 	cmp	local02, #3 wz
29c48     18 00 90 5D |  if_ne	jmp	#LR__4200
29c4c     01 98 0E F2 | 	cmp	arg04, #1 wz
29c50     6E A8 62 FD | 	wrz	local02
29c54     54 AB 02 F1 | 	add	local03, local02
29c58     55 AB 52 F6 | 	abs	local03, local03 wc
29c5c     01 AA 46 F0 | 	shr	local03, #1
29c60     55 AB 82 F6 | 	negc	local03, local03
29c64                 | LR__4200
29c64     01 AA 56 F2 | 	cmps	local03, #1 wc
29c68     4C 00 90 CD |  if_b	jmp	#LR__4202
29c6c     55 AF 02 F6 | 	mov	local05, local03
29c70                 | LR__4201
29c70     53 A9 02 F6 | 	mov	local02, local01
29c74     53 B1 02 F6 | 	mov	local06, local01
29c78     13 A8 46 F7 | 	zerox	local02, #19
29c7c     14 B0 46 F0 | 	shr	local06, #20
29c80     02 B0 66 F0 | 	shl	local06, #2
29c84     2D B1 02 F1 | 	add	local06, __methods__
29c88     58 B1 02 FB | 	rdlong	local06, local06
29c8c     20 92 06 F6 | 	mov	arg01, #32
29c90     32 AB 02 F6 | 	mov	local03, objptr
29c94     54 65 02 F6 | 	mov	objptr, local02
29c98     2D B0 62 FD | 	call	local06
29c9c     55 65 02 F6 | 	mov	objptr, local03
29ca0     3D B1 02 F6 | 	mov	local06, result1
29ca4     00 B0 56 F2 | 	cmps	local06, #0 wc
29ca8     58 7B 02 C6 |  if_b	mov	result1, local06
29cac     0C 00 90 CD |  if_b	jmp	#LR__4203
29cb0     58 AD 02 F1 | 	add	local04, local06
29cb4     EE AF 6E FB | 	djnz	local05, #LR__4201
29cb8                 | LR__4202
29cb8     56 7B 02 F6 | 	mov	result1, local04
29cbc                 | LR__4203
29cbc     E7 F0 03 F6 | 	mov	ptra, fp
29cc0     F2 00 A0 FD | 	call	#popregs_
29cc4                 | __system___fmtpad_ret
29cc4     2D 00 64 FD | 	ret
29cc8                 | 
29cc8                 | __system___uitoa
29cc8     04 CA 05 F6 | 	mov	COUNT_, #4
29ccc     E8 00 A0 FD | 	call	#pushregs_
29cd0     49 A7 02 F6 | 	mov	local01, arg01
29cd4     00 9A 4E F2 | 	cmps	arg05, #0 wz
29cd8     53 9B 02 F6 | 	mov	arg05, local01
29cdc     00 A8 06 F6 | 	mov	local02, #0
29ce0     37 AA 06 56 |  if_ne	mov	local03, #55
29ce4     57 AA 06 A6 |  if_e	mov	local03, #87
29ce8                 | LR__4210
29ce8     4B 95 12 FD | 	qdiv	arg02, arg03
29cec     19 AC 62 FD | 	getqy	local04
29cf0     4B 95 12 FD | 	qdiv	arg02, arg03
29cf4     0A AC 16 F2 | 	cmp	local04, #10 wc
29cf8     30 AC 06 C1 |  if_b	add	local04, #48
29cfc     55 AD 02 31 |  if_ae	add	local04, local03
29d00     4D AD 42 FC | 	wrbyte	local04, arg05
29d04     01 9A 06 F1 | 	add	arg05, #1
29d08     01 A8 06 F1 | 	add	local02, #1
29d0c     18 94 62 FD | 	getqx	arg02
29d10     00 94 0E F2 | 	cmp	arg02, #0 wz
29d14     D0 FF 9F 5D |  if_ne	jmp	#LR__4210
29d18     4C A9 12 F2 | 	cmp	local02, arg04 wc
29d1c     C8 FF 9F CD |  if_b	jmp	#LR__4210
29d20     4D 01 48 FC | 	wrbyte	#0, arg05
29d24     53 93 02 F6 | 	mov	arg01, local01
29d28     88 FE BF FD | 	call	#__system___strrev
29d2c     54 7B 02 F6 | 	mov	result1, local02
29d30     E7 F0 03 F6 | 	mov	ptra, fp
29d34     F2 00 A0 FD | 	call	#popregs_
29d38                 | __system___uitoa_ret
29d38     2D 00 64 FD | 	ret
29d3c                 | 
29d3c                 | __system__disassemble_0582
29d3c     10 CA 05 F6 | 	mov	COUNT_, #16
29d40     E8 00 A0 FD | 	call	#pushregs_
29d44     49 A7 02 F6 | 	mov	local01, arg01
29d48     4A A9 02 F6 | 	mov	local02, arg02
29d4c     4B AB 02 F6 | 	mov	local03, arg03
29d50     4C AD 02 F6 | 	mov	local04, arg04
29d54     4D AF 02 F6 | 	mov	local05, arg05
29d58     57 93 52 F6 | 	abs	arg01, local05 wc
29d5c     1F B0 C6 C9 |  if_b	decod	local06, #31
29d60     00 B0 06 36 |  if_ae	mov	local06, #0
29d64     40 CF BF FD | 	call	#__system___float_fromuns
29d68     58 7B 62 F5 | 	xor	result1, local06
29d6c     3D B3 02 F6 | 	mov	local07, result1
29d70     00 B4 06 F6 | 	mov	local08, #0
29d74     53 93 02 F6 | 	mov	arg01, local01
29d78     00 94 06 F6 | 	mov	arg02, #0
29d7c     01 96 06 F6 | 	mov	arg03, #1
29d80     5C D7 BF FD | 	call	#__system___float_cmp
29d84     00 7A 0E F2 | 	cmp	result1, #0 wz
29d88     00 B6 06 A6 |  if_e	mov	local09, #0
29d8c     54 01 68 AC |  if_e	wrlong	#0, local02
29d90     55 B7 62 AC |  if_e	wrlong	local09, local03
29d94     8C 01 90 AD |  if_e	jmp	#LR__4232
29d98     53 93 02 F6 | 	mov	arg01, local01
29d9c     40 DC BF FD | 	call	#__system____builtin_ilogb
29da0     3D B9 02 F6 | 	mov	local10, result1
29da4     0A AE 0E F2 | 	cmp	local05, #10 wz
29da8     24 00 90 5D |  if_ne	jmp	#LR__4220
29dac     5C B7 02 F6 | 	mov	local09, local10
29db0     01 B6 66 F0 | 	shl	local09, #1
29db4     5C B7 02 F1 | 	add	local09, local10
29db8     5B B9 52 F6 | 	abs	local10, local09 wc
29dbc     0A B8 16 FD | 	qdiv	local10, #10
29dc0     09 BA 06 F6 | 	mov	local11, #9
29dc4     18 B8 62 FD | 	getqx	local10
29dc8     5C B9 82 F6 | 	negc	local10, local10
29dcc     04 00 90 FD | 	jmp	#LR__4221
29dd0                 | LR__4220
29dd0     18 BA 06 F6 | 	mov	local11, #24
29dd4                 | LR__4221
29dd4                 | LR__4222
29dd4     08 B4 56 F2 | 	cmps	local08, #8 wc
29dd8     01 B4 06 F1 | 	add	local08, #1
29ddc     60 00 90 3D |  if_ae	jmp	#LR__4223
29de0     00 C0 1F FF 
29de4     00 92 06 F6 | 	mov	arg01, ##1065353216
29de8     59 95 02 F6 | 	mov	arg02, local07
29dec     5C 97 02 F6 | 	mov	arg03, local10
29df0     D0 E2 BF FD | 	call	#__system___float_pow_n
29df4     3D 95 02 F6 | 	mov	arg02, result1
29df8     53 93 02 F6 | 	mov	arg01, local01
29dfc     B0 D4 BF FD | 	call	#__system___float_div
29e00     3D BD 02 F6 | 	mov	local12, result1
29e04     5E 93 02 F6 | 	mov	arg01, local12
29e08     00 C0 1F FF 
29e0c     00 94 06 F6 | 	mov	arg02, ##1065353216
29e10     01 96 06 F6 | 	mov	arg03, #1
29e14     C8 D6 BF FD | 	call	#__system___float_cmp
29e18     00 7A 56 F2 | 	cmps	result1, #0 wc
29e1c     01 B8 86 C1 |  if_b	sub	local10, #1
29e20     B0 FF 9F CD |  if_b	jmp	#LR__4222
29e24     59 95 02 F6 | 	mov	arg02, local07
29e28     5E 93 02 F6 | 	mov	arg01, local12
29e2c     01 96 66 F6 | 	neg	arg03, #1
29e30     AC D6 BF FD | 	call	#__system___float_cmp
29e34     00 7A 56 F2 | 	cmps	result1, #0 wc
29e38     01 B8 06 31 |  if_ae	add	local10, #1
29e3c     94 FF 9F 3D |  if_ae	jmp	#LR__4222
29e40                 | LR__4223
29e40     5E 93 02 F6 | 	mov	arg01, local12
29e44     98 DB BF FD | 	call	#__system____builtin_ilogb
29e48     3D BF 02 F6 | 	mov	local13, result1
29e4c     5E C1 02 F6 | 	mov	local14, local12
29e50     17 C1 06 F4 | 	bitl	local14, #279
29e54     17 C0 26 F4 | 	bith	local14, #23
29e58     5F C1 62 F0 | 	shl	local14, local13
29e5c     02 AE 0E F2 | 	cmp	local05, #2 wz
29e60     02 AC 66 A0 |  if_e	shl	local04, #2
29e64     00 C2 06 F6 | 	mov	local15, #0
29e68     00 AC 56 F2 | 	cmps	local04, #0 wc
29e6c     10 00 90 3D |  if_ae	jmp	#LR__4224
29e70     5C AD C2 F2 | 	subr	local04, local10
29e74     00 AC 56 F2 | 	cmps	local04, #0 wc
29e78     A0 00 90 CD |  if_b	jmp	#LR__4231
29e7c     04 00 90 FD | 	jmp	#LR__4225
29e80                 | LR__4224
29e80     01 AC 06 F1 | 	add	local04, #1
29e84                 | LR__4225
29e84     5D AD 7A F3 | 	fles	local04, local11 wcz
29e88     01 C4 06 F6 | 	mov	local16, #1
29e8c     D7 22 48 FB | 	callpa	#(@LR__4227-@LR__4226)>>2,fcache_load_ptr_
29e90                 | LR__4226
29e90     00 40 00 FF 
29e94     00 C2 16 F2 | 	cmp	local15, ##8388608 wc
29e98     38 00 90 3D |  if_ae	jmp	#LR__4228
29e9c     01 AC 56 F2 | 	cmps	local04, #1 wc
29ea0     01 AC 86 F1 | 	sub	local04, #1
29ea4     2C 00 90 CD |  if_b	jmp	#LR__4228
29ea8     57 C3 02 FD | 	qmul	local15, local05
29eac     60 BF 02 F6 | 	mov	local13, local14
29eb0     17 BE 46 F0 | 	shr	local13, #23
29eb4     17 C1 06 F4 | 	bitl	local14, #279
29eb8     18 C2 62 FD | 	getqx	local15
29ebc     57 C5 02 FD | 	qmul	local16, local05
29ec0     18 C4 62 FD | 	getqx	local16
29ec4     57 C1 02 FD | 	qmul	local14, local05
29ec8     5F C3 02 F1 | 	add	local15, local13
29ecc     18 C0 62 FD | 	getqx	local14
29ed0     BC FF 9F FD | 	jmp	#LR__4226
29ed4                 | LR__4227
29ed4                 | LR__4228
29ed4     57 B7 02 F6 | 	mov	local09, local05
29ed8     17 B6 66 F0 | 	shl	local09, #23
29edc     5B BF 52 F6 | 	abs	local13, local09 wc
29ee0     01 BE 46 F0 | 	shr	local13, #1
29ee4     5F BF 82 F6 | 	negc	local13, local13
29ee8     5F C1 1A F2 | 	cmp	local14, local13 wcz
29eec     20 00 90 1D |  if_a	jmp	#LR__4229
29ef0     17 AE 66 F0 | 	shl	local05, #23
29ef4     57 BF 52 F6 | 	abs	local13, local05 wc
29ef8     01 BE 46 F0 | 	shr	local13, #1
29efc     5F BF 82 F6 | 	negc	local13, local13
29f00     5F C1 0A F2 | 	cmp	local14, local13 wz
29f04     14 00 90 5D |  if_ne	jmp	#LR__4230
29f08     01 C2 CE F7 | 	test	local15, #1 wz
29f0c     0C 00 90 AD |  if_e	jmp	#LR__4230
29f10                 | LR__4229
29f10     01 C2 06 F1 | 	add	local15, #1
29f14     62 C3 0A F2 | 	cmp	local15, local16 wz
29f18     01 B8 06 A1 |  if_e	add	local10, #1
29f1c                 | LR__4230
29f1c                 | LR__4231
29f1c     54 C3 62 FC | 	wrlong	local15, local02
29f20     55 B9 62 FC | 	wrlong	local10, local03
29f24                 | LR__4232
29f24     E7 F0 03 F6 | 	mov	ptra, fp
29f28     F2 00 A0 FD | 	call	#popregs_
29f2c                 | __system__disassemble_0582_ret
29f2c     2D 00 64 FD | 	ret
29f30                 | 
29f30                 | __system__emitsign_0584
29f30     00 7A 06 F6 | 	mov	result1, #0
29f34     00 94 0E F2 | 	cmp	arg02, #0 wz
29f38     49 81 02 56 |  if_ne	mov	_var01, arg01
29f3c     01 92 06 51 |  if_ne	add	arg01, #1
29f40     40 95 42 5C |  if_ne	wrbyte	arg02, _var01
29f44     01 7A 06 56 |  if_ne	mov	result1, #1
29f48     00 96 0E F2 | 	cmp	arg03, #0 wz
29f4c     49 61 48 5C |  if_ne	wrbyte	#48, arg01
29f50     01 92 06 51 |  if_ne	add	arg01, #1
29f54     49 97 42 5C |  if_ne	wrbyte	arg03, arg01
29f58     02 7A 06 51 |  if_ne	add	result1, #2
29f5c                 | __system__emitsign_0584_ret
29f5c     2D 00 64 FD | 	ret
29f60                 | 
29f60                 | __system___getiolock_0622
29f60     01 CA 05 F6 | 	mov	COUNT_, #1
29f64     E8 00 A0 FD | 	call	#pushregs_
29f68     90 F8 BF FD | 	call	#__system____getftab
29f6c     3D A7 0A F6 | 	mov	local01, result1 wz
29f70     10 00 90 AD |  if_e	jmp	#LR__4240
29f74     08 A6 06 F1 | 	add	local01, #8
29f78     53 7B 0A FB | 	rdlong	result1, local01 wz
29f7c     08 A6 86 F1 | 	sub	local01, #8
29f80     10 00 90 5D |  if_ne	jmp	#LR__4241
29f84                 | LR__4240
29f84     34 7B 02 F6 | 	mov	result1, ptr___system__dat__
29f88     01 00 00 FF 
29f8c     DC 7A 06 F1 | 	add	result1, ##732
29f90     08 00 90 FD | 	jmp	#LR__4242
29f94                 | LR__4241
29f94     0C A6 06 F1 | 	add	local01, #12
29f98     53 7B 02 F6 | 	mov	result1, local01
29f9c                 | LR__4242
29f9c     E7 F0 03 F6 | 	mov	ptra, fp
29fa0     F2 00 A0 FD | 	call	#popregs_
29fa4                 | __system___getiolock_0622_ret
29fa4     2D 00 64 FD | 	ret
29fa8                 | 
29fa8                 | __system___gettxfunc
29fa8     01 CA 05 F6 | 	mov	COUNT_, #1
29fac     E8 00 A0 FD | 	call	#pushregs_
29fb0     48 F8 BF FD | 	call	#__system____getftab
29fb4     3D A7 0A F6 | 	mov	local01, result1 wz
29fb8     10 00 90 AD |  if_e	jmp	#LR__4250
29fbc     08 A6 06 F1 | 	add	local01, #8
29fc0     53 95 0A FB | 	rdlong	arg02, local01 wz
29fc4     08 A6 86 F1 | 	sub	local01, #8
29fc8     08 00 90 5D |  if_ne	jmp	#LR__4251
29fcc                 | LR__4250
29fcc     00 7A 06 F6 | 	mov	result1, #0
29fd0     0C 00 90 FD | 	jmp	#LR__4252
29fd4                 | LR__4251
29fd4     00 88 05 FF 
29fd8     00 A6 46 F5 | 	or	local01, ##185597952
29fdc     53 7B 02 F6 | 	mov	result1, local01
29fe0                 | LR__4252
29fe0     E7 F0 03 F6 | 	mov	ptra, fp
29fe4     F2 00 A0 FD | 	call	#popregs_
29fe8                 | __system___gettxfunc_ret
29fe8     2D 00 64 FD | 	ret
29fec                 | 
29fec                 | __system___getrxfunc
29fec     01 CA 05 F6 | 	mov	COUNT_, #1
29ff0     E8 00 A0 FD | 	call	#pushregs_
29ff4     04 F8 BF FD | 	call	#__system____getftab
29ff8     3D A7 0A F6 | 	mov	local01, result1 wz
29ffc     10 00 90 AD |  if_e	jmp	#LR__4260
2a000     08 A6 06 F1 | 	add	local01, #8
2a004     53 95 0A FB | 	rdlong	arg02, local01 wz
2a008     08 A6 86 F1 | 	sub	local01, #8
2a00c     08 00 90 5D |  if_ne	jmp	#LR__4261
2a010                 | LR__4260
2a010     00 7A 06 F6 | 	mov	result1, #0
2a014     0C 00 90 FD | 	jmp	#LR__4262
2a018                 | LR__4261
2a018     00 90 05 FF 
2a01c     00 A6 46 F5 | 	or	local01, ##186646528
2a020     53 7B 02 F6 | 	mov	result1, local01
2a024                 | LR__4262
2a024     E7 F0 03 F6 | 	mov	ptra, fp
2a028     F2 00 A0 FD | 	call	#popregs_
2a02c                 | __system___getrxfunc_ret
2a02c     2D 00 64 FD | 	ret
2a030                 | 
2a030                 | __system____ScanForChar
2a030     49 81 02 F6 | 	mov	_var01, arg01
2a034     49 83 02 F6 | 	mov	_var02, arg01
2a038     D7 06 48 FB | 	callpa	#(@LR__4271-@LR__4270)>>2,fcache_load_ptr_
2a03c                 | LR__4270
2a03c     41 7B CA FA | 	rdbyte	result1, _var02 wz
2a040     01 82 06 51 |  if_ne	add	_var02, #1
2a044     F4 FF 9F 5D |  if_ne	jmp	#LR__4270
2a048                 | LR__4271
2a048     49 83 82 F1 | 	sub	_var02, arg01
2a04c     41 7B 02 F6 | 	mov	result1, _var02
2a050     3D 93 0A F6 | 	mov	arg01, result1 wz
2a054     00 7A 06 A6 |  if_e	mov	result1, #0
2a058     B8 00 90 AD |  if_e	jmp	#LR__4278
2a05c     4A 85 02 F6 | 	mov	_var03, arg02
2a060     07 84 4E F7 | 	zerox	_var03, #7 wz
2a064     00 7A 06 A6 |  if_e	mov	result1, #0
2a068     A8 00 90 AD |  if_e	jmp	#LR__4278
2a06c     01 96 16 F2 | 	cmp	arg03, #1 wc
2a070     00 98 0E C2 |  if_b	cmp	arg04, #0 wz
2a074     01 96 06 86 |  if_c_and_z	mov	arg03, #1
2a078     00 7A 06 46 |  if_c_and_nz	mov	result1, #0
2a07c     94 00 90 4D |  if_c_and_nz	jmp	#LR__4278
2a080     49 97 1A F2 | 	cmp	arg03, arg01 wcz
2a084     10 00 90 ED |  if_be	jmp	#LR__4272
2a088     00 98 0E F2 | 	cmp	arg04, #0 wz
2a08c     00 7A 06 A6 |  if_e	mov	result1, #0
2a090     80 00 90 AD |  if_e	jmp	#LR__4278
2a094     49 97 02 F6 | 	mov	arg03, arg01
2a098                 | LR__4272
2a098     01 96 86 F1 | 	sub	arg03, #1
2a09c     00 98 0E F2 | 	cmp	arg04, #0 wz
2a0a0     38 00 90 5D |  if_ne	jmp	#LR__4274
2a0a4     4B 87 02 F6 | 	mov	_var04, arg03
2a0a8     49 89 02 F6 | 	mov	_var05, arg01
2a0ac                 | LR__4273
2a0ac     44 87 12 F2 | 	cmp	_var04, _var05 wc
2a0b0     5C 00 90 3D |  if_ae	jmp	#LR__4277
2a0b4     43 85 02 F6 | 	mov	_var03, _var04
2a0b8     40 85 02 F1 | 	add	_var03, _var01
2a0bc     42 85 C2 FA | 	rdbyte	_var03, _var03
2a0c0     4A 99 E2 F8 | 	getbyte	arg04, arg02, #0
2a0c4     4C 85 0A F2 | 	cmp	_var03, arg04 wz
2a0c8     01 86 06 A1 |  if_e	add	_var04, #1
2a0cc     43 7B 02 A6 |  if_e	mov	result1, _var04
2a0d0     40 00 90 AD |  if_e	jmp	#LR__4278
2a0d4     01 86 06 F1 | 	add	_var04, #1
2a0d8     D0 FF 9F FD | 	jmp	#LR__4273
2a0dc                 | LR__4274
2a0dc     4B 87 02 F6 | 	mov	_var04, arg03
2a0e0                 | LR__4275
2a0e0     4B 87 1A F2 | 	cmp	_var04, arg03 wcz
2a0e4     28 00 90 1D |  if_a	jmp	#LR__4276
2a0e8     43 89 02 F6 | 	mov	_var05, _var04
2a0ec     40 89 02 F1 | 	add	_var05, _var01
2a0f0     44 85 C2 FA | 	rdbyte	_var03, _var05
2a0f4     4A 89 E2 F8 | 	getbyte	_var05, arg02, #0
2a0f8     44 85 0A F2 | 	cmp	_var03, _var05 wz
2a0fc     01 86 06 A1 |  if_e	add	_var04, #1
2a100     43 7B 02 A6 |  if_e	mov	result1, _var04
2a104     0C 00 90 AD |  if_e	jmp	#LR__4278
2a108     01 86 86 F1 | 	sub	_var04, #1
2a10c     D0 FF 9F FD | 	jmp	#LR__4275
2a110                 | LR__4276
2a110                 | LR__4277
2a110     00 7A 06 F6 | 	mov	result1, #0
2a114                 | LR__4278
2a114                 | __system____ScanForChar_ret
2a114     2D 00 64 FD | 	ret
2a118                 | 
2a118                 | __system___basic_dir
2a118     06 CA 05 F6 | 	mov	COUNT_, #6
2a11c     E8 00 A0 FD | 	call	#pushregs_
2a120     50 F0 07 F1 | 	add	ptra, #80
2a124     49 A7 0A F6 | 	mov	local01, arg01 wz
2a128     4A A9 02 F6 | 	mov	local02, arg02
2a12c     53 AB CA 5A |  if_ne	rdbyte	local03, local01 wz
2a130     5C 00 90 AD |  if_e	jmp	#LR__4280
2a134     03 00 00 FF 
2a138     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a13c     34 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
2a140     03 00 00 FF 
2a144     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a148     03 00 00 5F 
2a14c     34 69 06 51 |  if_ne	add	ptr___system__dat__, ##1844
2a150     34 93 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2a154     03 00 00 5F 
2a158     34 69 86 51 |  if_ne	sub	ptr___system__dat__, ##1844
2a15c     AC E9 BF 5D |  if_ne	call	#__system__closedir
2a160     92 01 00 FF 
2a164     20 93 06 F6 | 	mov	arg01, ##@LR__5478
2a168     B8 E8 BF FD | 	call	#__system__opendir
2a16c     03 00 00 FF 
2a170     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a174     34 7B 62 FC | 	wrlong	result1, ptr___system__dat__
2a178     04 68 06 F1 | 	add	ptr___system__dat__, #4
2a17c     34 A9 62 FC | 	wrlong	local02, ptr___system__dat__
2a180     04 68 06 F1 | 	add	ptr___system__dat__, #4
2a184     34 A7 62 FC | 	wrlong	local01, ptr___system__dat__
2a188     03 00 00 FF 
2a18c     3C 69 86 F1 | 	sub	ptr___system__dat__, ##1852
2a190                 | LR__4280
2a190     03 00 00 FF 
2a194     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a198     34 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
2a19c     03 00 00 FF 
2a1a0     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a1a4     92 01 00 AF 
2a1a8     22 7B 06 A6 |  if_e	mov	result1, ##@LR__5479
2a1ac     7C 01 90 AD |  if_e	jmp	#LR__4288
2a1b0                 | LR__4281
2a1b0     03 00 00 FF 
2a1b4     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a1b8     34 93 02 FB | 	rdlong	arg01, ptr___system__dat__
2a1bc     03 00 00 FF 
2a1c0     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a1c4     B8 E9 BF FD | 	call	#__system__readdir
2a1c8     3D AD 0A F6 | 	mov	local04, result1 wz
2a1cc     38 00 90 5D |  if_ne	jmp	#LR__4282
2a1d0     03 00 00 FF 
2a1d4     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a1d8     34 93 02 FB | 	rdlong	arg01, ptr___system__dat__
2a1dc     03 00 00 FF 
2a1e0     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a1e4     24 E9 BF FD | 	call	#__system__closedir
2a1e8     03 00 00 FF 
2a1ec     34 69 06 F1 | 	add	ptr___system__dat__, ##1844
2a1f0     34 01 68 FC | 	wrlong	#0, ptr___system__dat__
2a1f4     03 00 00 FF 
2a1f8     34 69 86 F1 | 	sub	ptr___system__dat__, ##1844
2a1fc     92 01 00 FF 
2a200     24 7B 06 F6 | 	mov	result1, ##@LR__5480
2a204     24 01 90 FD | 	jmp	#LR__4288
2a208                 | LR__4282
2a208     03 00 00 FF 
2a20c     3C 69 06 F1 | 	add	ptr___system__dat__, ##1852
2a210     34 95 02 FB | 	rdlong	arg02, ptr___system__dat__
2a214     03 00 00 FF 
2a218     3C 69 86 F1 | 	sub	ptr___system__dat__, ##1852
2a21c     56 93 02 F6 | 	mov	arg01, local04
2a220     4C 09 B0 FD | 	call	#__system___pat_match
2a224     00 7A 0E F2 | 	cmp	result1, #0 wz
2a228     84 FF 9F AD |  if_e	jmp	#LR__4281
2a22c     03 00 00 FF 
2a230     38 69 06 F1 | 	add	ptr___system__dat__, ##1848
2a234     34 AB 0A FB | 	rdlong	local03, ptr___system__dat__ wz
2a238     03 00 00 FF 
2a23c     38 69 86 F1 | 	sub	ptr___system__dat__, ##1848
2a240     B0 00 90 AD |  if_e	jmp	#LR__4285
2a244     E7 94 02 F6 | 	mov	arg02, fp
2a248     10 94 06 F1 | 	add	arg02, #16
2a24c     56 93 02 F6 | 	mov	arg01, local04
2a250     10 F2 BF FD | 	call	#__system__stat
2a254     00 7A 4E F2 | 	cmps	result1, #0 wz
2a258     92 01 00 5F 
2a25c     26 7B 06 56 |  if_ne	mov	result1, ##@LR__5481
2a260     C8 00 90 5D |  if_ne	jmp	#LR__4288
2a264     18 CE 05 F1 | 	add	fp, #24
2a268     E7 AE 02 FB | 	rdlong	local05, fp
2a26c     18 CE 85 F1 | 	sub	fp, #24
2a270     78 00 00 FF 
2a274     00 AE 06 F5 | 	and	local05, ##61440
2a278     56 AB C2 FA | 	rdbyte	local03, local04
2a27c     2E AA 0E F2 | 	cmp	local03, #46 wz
2a280     02 A8 06 A6 |  if_e	mov	local02, #2
2a284     00 A8 06 56 |  if_ne	mov	local02, #0
2a288     08 00 00 FF 
2a28c     00 AE 0E F2 | 	cmp	local05, ##4096 wz
2a290     10 A8 46 A5 |  if_e	or	local02, #16
2a294     40 00 90 AD |  if_e	jmp	#LR__4284
2a298     10 00 00 FF 
2a29c     00 AE 0E F2 | 	cmp	local05, ##8192 wz
2a2a0     18 00 00 5F 
2a2a4     00 AE 0E 52 |  if_ne	cmp	local05, ##12288 wz
2a2a8     20 00 00 5F 
2a2ac     00 AE 0E 52 |  if_ne	cmp	local05, ##16384 wz
2a2b0     04 A8 46 A5 |  if_e	or	local02, #4
2a2b4     20 00 90 AD |  if_e	jmp	#LR__4283
2a2b8     18 CE 05 F1 | 	add	fp, #24
2a2bc     E7 AA 02 FB | 	rdlong	local03, fp
2a2c0     18 CE 85 F1 | 	sub	fp, #24
2a2c4     92 AA CE F7 | 	test	local03, #146 wz
2a2c8     01 A8 46 A5 |  if_e	or	local02, #1
2a2cc     08 00 00 5F 
2a2d0     00 AE 0E 52 |  if_ne	cmp	local05, ##4096 wz
2a2d4     20 A8 46 55 |  if_ne	or	local02, #32
2a2d8                 | LR__4283
2a2d8                 | LR__4284
2a2d8     03 00 00 FF 
2a2dc     38 69 06 F1 | 	add	ptr___system__dat__, ##1848
2a2e0     34 AF 02 FB | 	rdlong	local05, ptr___system__dat__
2a2e4     03 00 00 FF 
2a2e8     38 69 86 F1 | 	sub	ptr___system__dat__, ##1848
2a2ec     57 A9 CA F7 | 	test	local02, local05 wz
2a2f0     BC FE 9F AD |  if_e	jmp	#LR__4281
2a2f4                 | LR__4285
2a2f4     56 93 02 F6 | 	mov	arg01, local04
2a2f8     49 B1 02 F6 | 	mov	local06, arg01
2a2fc     D7 06 48 FB | 	callpa	#(@LR__4287-@LR__4286)>>2,fcache_load_ptr_
2a300                 | LR__4286
2a300     58 7B CA FA | 	rdbyte	result1, local06 wz
2a304     01 B0 06 51 |  if_ne	add	local06, #1
2a308     F4 FF 9F 5D |  if_ne	jmp	#LR__4286
2a30c                 | LR__4287
2a30c     58 93 C2 F2 | 	subr	arg01, local06
2a310     01 92 06 F1 | 	add	arg01, #1
2a314     CC E0 BF FD | 	call	#__system___gc_alloc_managed
2a318     3D AF 0A F6 | 	mov	local05, result1 wz
2a31c     57 93 02 56 |  if_ne	mov	arg01, local05
2a320     56 95 02 56 |  if_ne	mov	arg02, local04
2a324     68 A6 BF 5D |  if_ne	call	#__system____builtin_strcpy
2a328     57 7B 02 F6 | 	mov	result1, local05
2a32c                 | LR__4288
2a32c     E7 F0 03 F6 | 	mov	ptra, fp
2a330     F2 00 A0 FD | 	call	#popregs_
2a334                 | __system___basic_dir_ret
2a334     2D 00 64 FD | 	ret
2a338                 | 
2a338                 | __system__pack_0698
2a338     49 81 02 F6 | 	mov	_var01, arg01
2a33c     7F 96 06 F1 | 	add	arg03, #127
2a340     04 98 CE F7 | 	test	arg04, #4 wz
2a344     10 00 90 AD |  if_e	jmp	#LR__4290
2a348     00 80 0E F2 | 	cmp	_var01, #0 wz
2a34c     16 80 C6 A9 |  if_e	decod	_var01, #22
2a350     F7 80 26 F4 | 	bith	_var01, #247
2a354     B4 00 90 FD | 	jmp	#LR__4299
2a358                 | LR__4290
2a358     02 98 CE F7 | 	test	arg04, #2 wz
2a35c     00 C0 3F 5F 
2a360     00 80 06 56 |  if_ne	mov	_var01, ##2139095040
2a364     00 94 06 56 |  if_ne	mov	arg02, #0
2a368     A0 00 90 5D |  if_ne	jmp	#LR__4298
2a36c     08 98 CE F7 | 	test	arg04, #8 wz
2a370     00 80 06 56 |  if_ne	mov	_var01, #0
2a374     94 00 90 5D |  if_ne	jmp	#LR__4297
2a378     FF 96 56 F2 | 	cmps	arg03, #255 wc
2a37c     00 C0 3F 3F 
2a380     00 80 06 36 |  if_ae	mov	_var01, ##2139095040
2a384     00 94 06 36 |  if_ae	mov	arg02, #0
2a388     80 00 90 3D |  if_ae	jmp	#LR__4296
2a38c     01 96 56 F2 | 	cmps	arg03, #1 wc
2a390     6C 00 90 3D |  if_ae	jmp	#LR__4294
2a394     01 94 46 F0 | 	shr	arg02, #1
2a398     40 83 02 F6 | 	mov	_var02, _var01
2a39c     01 82 06 F5 | 	and	_var02, #1
2a3a0     1F 82 66 F0 | 	shl	_var02, #31
2a3a4     41 95 42 F5 | 	or	arg02, _var02
2a3a8     01 80 46 F0 | 	shr	_var01, #1
2a3ac     D7 1E 48 FB | 	callpa	#(@LR__4292-@LR__4291)>>2,fcache_load_ptr_
2a3b0                 | LR__4291
2a3b0     00 96 56 F2 | 	cmps	arg03, #0 wc
2a3b4     34 00 90 3D |  if_ae	jmp	#LR__4293
2a3b8     00 80 0E F2 | 	cmp	_var01, #0 wz
2a3bc     2C 00 90 AD |  if_e	jmp	#LR__4293
2a3c0     4A 93 02 F6 | 	mov	arg01, arg02
2a3c4     01 92 06 F5 | 	and	arg01, #1
2a3c8     01 96 06 F1 | 	add	arg03, #1
2a3cc     01 94 46 F0 | 	shr	arg02, #1
2a3d0     40 83 02 F6 | 	mov	_var02, _var01
2a3d4     01 82 06 F5 | 	and	_var02, #1
2a3d8     1F 82 66 F0 | 	shl	_var02, #31
2a3dc     41 95 42 F5 | 	or	arg02, _var02
2a3e0     49 95 42 F5 | 	or	arg02, arg01
2a3e4     01 80 46 F0 | 	shr	_var01, #1
2a3e8     C4 FF 9F FD | 	jmp	#LR__4291
2a3ec                 | LR__4292
2a3ec                 | LR__4293
2a3ec     00 96 56 F2 | 	cmps	arg03, #0 wc
2a3f0     18 00 90 3D |  if_ae	jmp	#LR__4295
2a3f4     00 94 0E F2 | 	cmp	arg02, #0 wz
2a3f8     6F 94 62 FD | 	wrnz	arg02
2a3fc     0C 00 90 FD | 	jmp	#LR__4295
2a400                 | LR__4294
2a400     17 81 06 F4 | 	bitl	_var01, #279
2a404     17 96 66 F0 | 	shl	arg03, #23
2a408     4B 81 42 F5 | 	or	_var01, arg03
2a40c                 | LR__4295
2a40c                 | LR__4296
2a40c                 | LR__4297
2a40c                 | LR__4298
2a40c                 | LR__4299
2a40c     01 80 CE F7 | 	test	_var01, #1 wz
2a410     01 94 46 55 |  if_ne	or	arg02, #1
2a414     4A 97 02 F6 | 	mov	arg03, arg02
2a418     00 82 06 F6 | 	mov	_var02, #0
2a41c     FF FF 3F FF 
2a420     FF 95 06 F1 | 	add	arg02, ##2147483647
2a424     4B 95 12 F2 | 	cmp	arg02, arg03 wc
2a428     01 82 06 C6 |  if_b	mov	_var02, #1
2a42c     41 81 02 F1 | 	add	_var01, _var02
2a430     01 98 CE F7 | 	test	arg04, #1 wz
2a434     1F 80 26 54 |  if_ne	bith	_var01, #31
2a438     40 7B 02 F6 | 	mov	result1, _var01
2a43c                 | __system__pack_0698_ret
2a43c     2D 00 64 FD | 	ret
2a440                 | 
2a440                 | __system___rxtxioctl_0788
2a440     00 95 0E F2 | 	cmp	arg02, #256 wz
2a444     0C 00 90 AD |  if_e	jmp	#LR__4300
2a448     01 95 0E F2 | 	cmp	arg02, #257 wz
2a44c     1C 00 90 AD |  if_e	jmp	#LR__4301
2a450     30 00 90 FD | 	jmp	#LR__4302
2a454                 | LR__4300
2a454     08 68 06 F1 | 	add	ptr___system__dat__, #8
2a458     34 7B 02 FB | 	rdlong	result1, ptr___system__dat__
2a45c     08 68 86 F1 | 	sub	ptr___system__dat__, #8
2a460     4B 7B 62 FC | 	wrlong	result1, arg03
2a464     00 7A 06 F6 | 	mov	result1, #0
2a468     28 00 90 FD | 	jmp	#LR__4303
2a46c                 | LR__4301
2a46c     4B 93 02 FB | 	rdlong	arg01, arg03
2a470     08 68 06 F1 | 	add	ptr___system__dat__, #8
2a474     34 93 62 FC | 	wrlong	arg01, ptr___system__dat__
2a478     08 68 86 F1 | 	sub	ptr___system__dat__, #8
2a47c     00 7A 06 F6 | 	mov	result1, #0
2a480     10 00 90 FD | 	jmp	#LR__4303
2a484                 | LR__4302
2a484     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a488     34 15 68 FC | 	wrlong	#10, ptr___system__dat__
2a48c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a490     01 7A 66 F6 | 	neg	result1, #1
2a494                 | LR__4303
2a494                 | __system___rxtxioctl_0788_ret
2a494     2D 00 64 FD | 	ret
2a498                 | 
2a498                 | __system____dummy_flush_0789
2a498     00 7A 06 F6 | 	mov	result1, #0
2a49c                 | __system____dummy_flush_0789_ret
2a49c     2D 00 64 FD | 	ret
2a4a0                 | 
2a4a0                 | __system___vfswrite
2a4a0     09 CA 05 F6 | 	mov	COUNT_, #9
2a4a4     E8 00 A0 FD | 	call	#pushregs_
2a4a8     49 A7 02 F6 | 	mov	local01, arg01
2a4ac     4A A9 02 F6 | 	mov	local02, arg02
2a4b0     4B AB 02 F6 | 	mov	local03, arg03
2a4b4     54 AD 02 F6 | 	mov	local04, local02
2a4b8     08 A6 06 F1 | 	add	local01, #8
2a4bc     53 93 02 FB | 	rdlong	arg01, local01
2a4c0     08 A6 86 F1 | 	sub	local01, #8
2a4c4     02 92 CE F7 | 	test	arg01, #2 wz
2a4c8     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a4cc     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a4d0     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a4d4     01 7A 66 A6 |  if_e	neg	result1, #1
2a4d8     84 01 90 AD |  if_e	jmp	#LR__4316
2a4dc     08 A6 06 F1 | 	add	local01, #8
2a4e0     53 7B 02 FB | 	rdlong	result1, local01
2a4e4     08 A6 86 F1 | 	sub	local01, #8
2a4e8     80 7A CE F7 | 	test	result1, #128 wz
2a4ec     6C 00 90 AD |  if_e	jmp	#LR__4311
2a4f0     08 A6 06 F1 | 	add	local01, #8
2a4f4     53 95 02 FB | 	rdlong	arg02, local01
2a4f8     08 A6 86 F1 | 	sub	local01, #8
2a4fc     00 95 CE F7 | 	test	arg02, #256 wz
2a500     58 00 90 AD |  if_e	jmp	#LR__4310
2a504     30 A6 06 F1 | 	add	local01, #48
2a508     53 AF 02 FB | 	rdlong	local05, local01
2a50c     57 B1 02 F6 | 	mov	local06, local05
2a510     30 A6 86 F1 | 	sub	local01, #48
2a514     13 B0 46 F7 | 	zerox	local06, #19
2a518     14 AE 46 F0 | 	shr	local05, #20
2a51c     02 AE 66 F0 | 	shl	local05, #2
2a520     2D AF 02 F1 | 	add	local05, __methods__
2a524     57 AF 02 FB | 	rdlong	local05, local05
2a528     53 93 02 F6 | 	mov	arg01, local01
2a52c     00 94 06 F6 | 	mov	arg02, #0
2a530     00 96 06 F6 | 	mov	arg03, #0
2a534     02 98 06 F6 | 	mov	arg04, #2
2a538     32 B3 02 F6 | 	mov	local07, objptr
2a53c     58 65 02 F6 | 	mov	objptr, local06
2a540     2D AE 62 FD | 	call	local05
2a544     59 65 02 F6 | 	mov	objptr, local07
2a548     08 A6 06 F1 | 	add	local01, #8
2a54c     53 B3 02 FB | 	rdlong	local07, local01
2a550     00 B3 26 F5 | 	andn	local07, #256
2a554     53 B3 62 FC | 	wrlong	local07, local01
2a558     08 A6 86 F1 | 	sub	local01, #8
2a55c                 | LR__4310
2a55c                 | LR__4311
2a55c     18 A6 06 F1 | 	add	local01, #24
2a560     53 B3 0A FB | 	rdlong	local07, local01 wz
2a564     18 A6 86 F1 | 	sub	local01, #24
2a568     80 00 90 AD |  if_e	jmp	#LR__4313
2a56c     18 A6 06 F1 | 	add	local01, #24
2a570     53 AF 02 FB | 	rdlong	local05, local01
2a574     57 B1 02 F6 | 	mov	local06, local05
2a578     18 A6 86 F1 | 	sub	local01, #24
2a57c     13 B0 46 F7 | 	zerox	local06, #19
2a580     14 AE 46 F0 | 	shr	local05, #20
2a584     02 AE 66 F0 | 	shl	local05, #2
2a588     2D AF 02 F1 | 	add	local05, __methods__
2a58c     57 AF 02 FB | 	rdlong	local05, local05
2a590     54 95 02 F6 | 	mov	arg02, local02
2a594     55 97 02 F6 | 	mov	arg03, local03
2a598     53 93 02 F6 | 	mov	arg01, local01
2a59c     32 B3 02 F6 | 	mov	local07, objptr
2a5a0     58 65 02 F6 | 	mov	objptr, local06
2a5a4     2D AE 62 FD | 	call	local05
2a5a8     59 65 02 F6 | 	mov	objptr, local07
2a5ac     3D B5 02 F6 | 	mov	local08, result1
2a5b0     00 B4 56 F2 | 	cmps	local08, #0 wc
2a5b4     2C 00 90 3D |  if_ae	jmp	#LR__4312
2a5b8     08 A6 06 F1 | 	add	local01, #8
2a5bc     53 B3 02 FB | 	rdlong	local07, local01
2a5c0     20 B2 46 F5 | 	or	local07, #32
2a5c4     53 B3 62 FC | 	wrlong	local07, local01
2a5c8     00 B4 4E F2 | 	cmps	local08, #0 wz
2a5cc     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a5d0     34 B5 62 FC | 	wrlong	local08, ptr___system__dat__
2a5d4     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a5d8     01 7A 66 56 |  if_ne	neg	result1, #1
2a5dc     00 7A 06 A6 |  if_e	mov	result1, #0
2a5e0     7C 00 90 FD | 	jmp	#LR__4316
2a5e4                 | LR__4312
2a5e4     5A 7B 02 F6 | 	mov	result1, local08
2a5e8     74 00 90 FD | 	jmp	#LR__4316
2a5ec                 | LR__4313
2a5ec     1C A6 06 F1 | 	add	local01, #28
2a5f0     53 B7 0A FB | 	rdlong	local09, local01 wz
2a5f4     1C A6 86 F1 | 	sub	local01, #28
2a5f8     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a5fc     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a600     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a604     01 7A 66 A6 |  if_e	neg	result1, #1
2a608     54 00 90 AD |  if_e	jmp	#LR__4316
2a60c     00 B4 06 F6 | 	mov	local08, #0
2a610                 | LR__4314
2a610     01 AA 16 F2 | 	cmp	local03, #1 wc
2a614     44 00 90 CD |  if_b	jmp	#LR__4315
2a618     5B AF 02 F6 | 	mov	local05, local09
2a61c     5B B1 02 F6 | 	mov	local06, local09
2a620     13 AE 46 F7 | 	zerox	local05, #19
2a624     14 B0 46 F0 | 	shr	local06, #20
2a628     02 B0 66 F0 | 	shl	local06, #2
2a62c     2D B1 02 F1 | 	add	local06, __methods__
2a630     58 B1 02 FB | 	rdlong	local06, local06
2a634     56 93 C2 FA | 	rdbyte	arg01, local04
2a638     53 95 02 F6 | 	mov	arg02, local01
2a63c     32 B3 02 F6 | 	mov	local07, objptr
2a640     57 65 02 F6 | 	mov	objptr, local05
2a644     01 AC 06 F1 | 	add	local04, #1
2a648     2D B0 62 FD | 	call	local06
2a64c     59 65 02 F6 | 	mov	objptr, local07
2a650     3D B5 02 F1 | 	add	local08, result1
2a654     01 AA 86 F1 | 	sub	local03, #1
2a658     B4 FF 9F FD | 	jmp	#LR__4314
2a65c                 | LR__4315
2a65c     5A 7B 02 F6 | 	mov	result1, local08
2a660                 | LR__4316
2a660     E7 F0 03 F6 | 	mov	ptra, fp
2a664     F2 00 A0 FD | 	call	#popregs_
2a668                 | __system___vfswrite_ret
2a668     2D 00 64 FD | 	ret
2a66c                 | 
2a66c                 | __system___vfsread
2a66c     09 CA 05 F6 | 	mov	COUNT_, #9
2a670     E8 00 A0 FD | 	call	#pushregs_
2a674     28 F0 07 F1 | 	add	ptra, #40
2a678     49 A7 02 F6 | 	mov	local01, arg01
2a67c     4B A9 02 F6 | 	mov	local02, arg03
2a680     4A AB 02 F6 | 	mov	local03, arg02
2a684     00 AC 06 F6 | 	mov	local04, #0
2a688     08 A6 06 F1 | 	add	local01, #8
2a68c     53 93 02 FB | 	rdlong	arg01, local01
2a690     08 A6 86 F1 | 	sub	local01, #8
2a694     01 92 CE F7 | 	test	arg01, #1 wz
2a698     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a69c     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a6a0     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a6a4     01 7A 66 A6 |  if_e	neg	result1, #1
2a6a8     84 01 90 AD |  if_e	jmp	#LR__4326
2a6ac     14 A6 06 F1 | 	add	local01, #20
2a6b0     53 7B 0A FB | 	rdlong	result1, local01 wz
2a6b4     14 A6 86 F1 | 	sub	local01, #20
2a6b8     7C 00 90 AD |  if_e	jmp	#LR__4321
2a6bc     14 A6 06 F1 | 	add	local01, #20
2a6c0     53 AF 02 FB | 	rdlong	local05, local01
2a6c4     57 AB 02 F6 | 	mov	local03, local05
2a6c8     14 A6 86 F1 | 	sub	local01, #20
2a6cc     13 AA 46 F7 | 	zerox	local03, #19
2a6d0     14 AE 46 F0 | 	shr	local05, #20
2a6d4     02 AE 66 F0 | 	shl	local05, #2
2a6d8     2D AF 02 F1 | 	add	local05, __methods__
2a6dc     57 AF 02 FB | 	rdlong	local05, local05
2a6e0     54 97 02 F6 | 	mov	arg03, local02
2a6e4     53 93 02 F6 | 	mov	arg01, local01
2a6e8     32 AD 02 F6 | 	mov	local04, objptr
2a6ec     55 65 02 F6 | 	mov	objptr, local03
2a6f0     2D AE 62 FD | 	call	local05
2a6f4     56 65 02 F6 | 	mov	objptr, local04
2a6f8     3D B1 02 F6 | 	mov	local06, result1
2a6fc     00 B0 56 F2 | 	cmps	local06, #0 wc
2a700     2C 00 90 3D |  if_ae	jmp	#LR__4320
2a704     08 A6 06 F1 | 	add	local01, #8
2a708     53 AF 02 FB | 	rdlong	local05, local01
2a70c     20 AE 46 F5 | 	or	local05, #32
2a710     53 AF 62 FC | 	wrlong	local05, local01
2a714     00 B0 4E F2 | 	cmps	local06, #0 wz
2a718     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a71c     34 B1 62 FC | 	wrlong	local06, ptr___system__dat__
2a720     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a724     01 7A 66 56 |  if_ne	neg	result1, #1
2a728     00 7A 06 A6 |  if_e	mov	result1, #0
2a72c     00 01 90 FD | 	jmp	#LR__4326
2a730                 | LR__4320
2a730     58 7B 02 F6 | 	mov	result1, local06
2a734     F8 00 90 FD | 	jmp	#LR__4326
2a738                 | LR__4321
2a738     20 A6 06 F1 | 	add	local01, #32
2a73c     53 B3 0A FB | 	rdlong	local07, local01 wz
2a740     20 A6 86 F1 | 	sub	local01, #32
2a744     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
2a748     34 0D 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a74c     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
2a750     01 7A 66 A6 |  if_e	neg	result1, #1
2a754     D8 00 90 AD |  if_e	jmp	#LR__4326
2a758     28 A6 06 F1 | 	add	local01, #40
2a75c     53 B1 0A FB | 	rdlong	local06, local01 wz
2a760     28 A6 86 F1 | 	sub	local01, #40
2a764     60 00 90 AD |  if_e	jmp	#LR__4323
2a768     28 A6 06 F1 | 	add	local01, #40
2a76c     53 AF 02 FB | 	rdlong	local05, local01
2a770     57 B5 02 F6 | 	mov	local08, local05
2a774     28 A6 86 F1 | 	sub	local01, #40
2a778     13 B4 46 F7 | 	zerox	local08, #19
2a77c     14 AE 46 F0 | 	shr	local05, #20
2a780     02 AE 66 F0 | 	shl	local05, #2
2a784     2D AF 02 F1 | 	add	local05, __methods__
2a788     57 AF 02 FB | 	rdlong	local05, local05
2a78c     53 93 02 F6 | 	mov	arg01, local01
2a790     E7 96 02 F6 | 	mov	arg03, fp
2a794     24 96 06 F1 | 	add	arg03, #36
2a798     00 95 06 F6 | 	mov	arg02, #256
2a79c     32 B1 02 F6 | 	mov	local06, objptr
2a7a0     5A 65 02 F6 | 	mov	objptr, local08
2a7a4     2D AE 62 FD | 	call	local05
2a7a8     58 65 02 F6 | 	mov	objptr, local06
2a7ac     00 7A 0E F2 | 	cmp	result1, #0 wz
2a7b0     14 00 90 5D |  if_ne	jmp	#LR__4322
2a7b4     24 CE 05 F1 | 	add	fp, #36
2a7b8     E7 B0 02 FB | 	rdlong	local06, fp
2a7bc     24 CE 85 F1 | 	sub	fp, #36
2a7c0     02 B0 CE F7 | 	test	local06, #2 wz
2a7c4     01 AC 06 56 |  if_ne	mov	local04, #1
2a7c8                 | LR__4322
2a7c8                 | LR__4323
2a7c8     00 B0 06 F6 | 	mov	local06, #0
2a7cc                 | LR__4324
2a7cc     01 A8 16 F2 | 	cmp	local02, #1 wc
2a7d0     58 00 90 CD |  if_b	jmp	#LR__4325
2a7d4     59 B5 02 F6 | 	mov	local08, local07
2a7d8     59 AF 02 F6 | 	mov	local05, local07
2a7dc     13 B4 46 F7 | 	zerox	local08, #19
2a7e0     14 AE 46 F0 | 	shr	local05, #20
2a7e4     02 AE 66 F0 | 	shl	local05, #2
2a7e8     2D AF 02 F1 | 	add	local05, __methods__
2a7ec     57 AF 02 FB | 	rdlong	local05, local05
2a7f0     53 93 02 F6 | 	mov	arg01, local01
2a7f4     32 B7 02 F6 | 	mov	local09, objptr
2a7f8     5A 65 02 F6 | 	mov	objptr, local08
2a7fc     2D AE 62 FD | 	call	local05
2a800     5B 65 02 F6 | 	mov	objptr, local09
2a804     00 7A 56 F2 | 	cmps	result1, #0 wc
2a808     20 00 90 CD |  if_b	jmp	#LR__4325
2a80c     55 7B 42 FC | 	wrbyte	result1, local03
2a810     01 B0 06 F1 | 	add	local06, #1
2a814     01 A8 86 F1 | 	sub	local02, #1
2a818     00 AC 0E F2 | 	cmp	local04, #0 wz
2a81c     01 AA 06 F1 | 	add	local03, #1
2a820     A8 FF 9F AD |  if_e	jmp	#LR__4324
2a824     0A 7A 0E F2 | 	cmp	result1, #10 wz
2a828     A0 FF 9F 5D |  if_ne	jmp	#LR__4324
2a82c                 | LR__4325
2a82c     58 7B 02 F6 | 	mov	result1, local06
2a830                 | LR__4326
2a830     E7 F0 03 F6 | 	mov	ptra, fp
2a834     F2 00 A0 FD | 	call	#popregs_
2a838                 | __system___vfsread_ret
2a838     2D 00 64 FD | 	ret
2a83c                 | 
2a83c                 | __system___sdmm_open
2a83c     0B CA 05 F6 | 	mov	COUNT_, #11
2a840     E8 00 A0 FD | 	call	#pushregs_
2a844     49 AB 02 F6 | 	mov	local03, arg01
2a848     4A AD 02 F6 | 	mov	local04, arg02
2a84c     4B AF 02 F6 | 	mov	local05, arg03
2a850     4C B1 02 F6 | 	mov	local06, arg04
2a854     28 92 06 F6 | 	mov	arg01, #40
2a858     88 DB BF FD | 	call	#__system___gc_alloc_managed
2a85c     3D B3 02 F6 | 	mov	local07, result1
2a860     55 99 02 F6 | 	mov	arg04, local03
2a864     1F 98 C6 F0 | 	sar	arg04, #31
2a868     55 97 02 F6 | 	mov	arg03, local03
2a86c     01 92 06 F6 | 	mov	arg01, #1
2a870     00 94 06 F6 | 	mov	arg02, #0
2a874     44 C3 BF FD | 	call	#__system___int64_shl
2a878     3D A7 02 F6 | 	mov	local01, result1
2a87c     3E B5 02 F6 | 	mov	local08, result2
2a880     56 99 02 F6 | 	mov	arg04, local04
2a884     1F 98 C6 F0 | 	sar	arg04, #31
2a888     56 97 02 F6 | 	mov	arg03, local04
2a88c     01 92 06 F6 | 	mov	arg01, #1
2a890     00 94 06 F6 | 	mov	arg02, #0
2a894     24 C3 BF FD | 	call	#__system___int64_shl
2a898     3D A7 42 F5 | 	or	local01, result1
2a89c     3E B5 42 F5 | 	or	local08, result2
2a8a0     57 99 02 F6 | 	mov	arg04, local05
2a8a4     1F 98 C6 F0 | 	sar	arg04, #31
2a8a8     57 97 02 F6 | 	mov	arg03, local05
2a8ac     01 92 06 F6 | 	mov	arg01, #1
2a8b0     00 94 06 F6 | 	mov	arg02, #0
2a8b4     04 C3 BF FD | 	call	#__system___int64_shl
2a8b8     3D A7 42 F5 | 	or	local01, result1
2a8bc     3E B5 42 F5 | 	or	local08, result2
2a8c0     58 99 02 F6 | 	mov	arg04, local06
2a8c4     1F 98 C6 F0 | 	sar	arg04, #31
2a8c8     58 97 02 F6 | 	mov	arg03, local06
2a8cc     01 92 06 F6 | 	mov	arg01, #1
2a8d0     00 94 06 F6 | 	mov	arg02, #0
2a8d4     E4 C2 BF FD | 	call	#__system___int64_shl
2a8d8     5A 95 02 F6 | 	mov	arg02, local08
2a8dc     3D A7 42 F5 | 	or	local01, result1
2a8e0     4A 7D 42 F5 | 	or	result2, arg02
2a8e4     3E A9 02 F6 | 	mov	local02, result2
2a8e8     53 93 02 F6 | 	mov	arg01, local01
2a8ec     54 95 02 F6 | 	mov	arg02, local02
2a8f0     38 C3 BF FD | 	call	#__system___usepins
2a8f4     00 7A 0E F2 | 	cmp	result1, #0 wz
2a8f8     1C 00 90 5D |  if_ne	jmp	#LR__4330
2a8fc     59 93 02 F6 | 	mov	arg01, local07
2a900     14 DC BF FD | 	call	#__system___gc_free
2a904     20 68 06 F1 | 	add	ptr___system__dat__, #32
2a908     34 2D 68 FC | 	wrlong	#22, ptr___system__dat__
2a90c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2a910     00 7A 06 F6 | 	mov	result1, #0
2a914     5C 01 90 FD | 	jmp	#LR__4333
2a918                 | LR__4330
2a918     53 B7 02 F6 | 	mov	local09, local01
2a91c     54 9B 02 F6 | 	mov	arg05, local02
2a920     20 B2 06 F1 | 	add	local07, #32
2a924     59 B7 62 FC | 	wrlong	local09, local07
2a928     04 B2 06 F1 | 	add	local07, #4
2a92c     59 9B 62 FC | 	wrlong	arg05, local07
2a930     24 B2 86 F1 | 	sub	local07, #36
2a934     57 99 02 F6 | 	mov	arg04, local05
2a938     58 9B 02 F6 | 	mov	arg05, local06
2a93c     00 92 06 F6 | 	mov	arg01, #0
2a940     55 95 02 F6 | 	mov	arg02, local03
2a944     56 97 02 F6 | 	mov	arg03, local04
2a948     32 B9 02 F6 | 	mov	local10, objptr
2a94c     59 65 02 F6 | 	mov	objptr, local07
2a950     34 0F B0 FD | 	call	#_sdmm_cc_disk_setpins
2a954     5C 65 02 F6 | 	mov	objptr, local10
2a958     3D BB 0A F6 | 	mov	local11, result1 wz
2a95c     18 00 90 5D |  if_ne	jmp	#LR__4331
2a960     00 92 06 F6 | 	mov	arg01, #0
2a964     32 BB 02 F6 | 	mov	local11, objptr
2a968     59 65 02 F6 | 	mov	objptr, local07
2a96c     4C 03 B0 FD | 	call	#_sdmm_cc_disk_initialize
2a970     5D 65 02 F6 | 	mov	objptr, local11
2a974     3D BB E2 F8 | 	getbyte	local11, result1, #0
2a978                 | LR__4331
2a978     00 BA 0E F2 | 	cmp	local11, #0 wz
2a97c     D0 00 90 5D |  if_ne	jmp	#LR__4332
2a980     64 E0 BF FD | 	call	#__system___get_vfs_file_handle
2a984     3D BB 0A F6 | 	mov	local11, result1 wz
2a988     C4 00 90 AD |  if_e	jmp	#LR__4332
2a98c     04 BA 06 F1 | 	add	local11, #4
2a990     5D 05 58 FC | 	wrword	#2, local11
2a994     02 BA 06 F1 | 	add	local11, #2
2a998     5D 01 58 FC | 	wrword	#0, local11
2a99c     02 BA 06 F1 | 	add	local11, #2
2a9a0     40 00 80 FF 
2a9a4     5D 07 68 FC | 	wrlong	##32771, local11
2a9a8     59 7B 02 F6 | 	mov	result1, local07
2a9ac     00 68 06 FF 
2a9b0     00 7A 46 F5 | 	or	result1, ##214958080
2a9b4     0C BA 06 F1 | 	add	local11, #12
2a9b8     5D 7B 62 FC | 	wrlong	result1, local11
2a9bc     59 7B 02 F6 | 	mov	result1, local07
2a9c0     00 70 06 FF 
2a9c4     00 7A 46 F5 | 	or	result1, ##216006656
2a9c8     04 BA 06 F1 | 	add	local11, #4
2a9cc     5D 7B 62 FC | 	wrlong	result1, local11
2a9d0     59 7B 02 F6 | 	mov	result1, local07
2a9d4     00 78 06 FF 
2a9d8     00 7A 46 F5 | 	or	result1, ##217055232
2a9dc     0C BA 06 F1 | 	add	local11, #12
2a9e0     5D 7B 62 FC | 	wrlong	result1, local11
2a9e4     59 7B 02 F6 | 	mov	result1, local07
2a9e8     00 80 06 FF 
2a9ec     00 7A 46 F5 | 	or	result1, ##218103808
2a9f0     04 BA 06 F1 | 	add	local11, #4
2a9f4     5D 7B 62 FC | 	wrlong	result1, local11
2a9f8     59 7B 02 F6 | 	mov	result1, local07
2a9fc     00 88 06 FF 
2aa00     00 7A 46 F5 | 	or	result1, ##219152384
2aa04     04 BA 06 F1 | 	add	local11, #4
2aa08     5D 7B 62 FC | 	wrlong	result1, local11
2aa0c     59 7B 02 F6 | 	mov	result1, local07
2aa10     00 90 06 FF 
2aa14     00 7A 46 F5 | 	or	result1, ##220200960
2aa18     04 BA 06 F1 | 	add	local11, #4
2aa1c     5D 7B 62 FC | 	wrlong	result1, local11
2aa20     59 7B 02 F6 | 	mov	result1, local07
2aa24     00 98 06 FF 
2aa28     00 7A 46 F5 | 	or	result1, ##221249536
2aa2c     14 BA 86 F1 | 	sub	local11, #20
2aa30     5D 7B 62 FC | 	wrlong	result1, local11
2aa34     00 A0 06 FF 
2aa38     00 B2 46 F5 | 	or	local07, ##222298112
2aa3c     04 BA 06 F1 | 	add	local11, #4
2aa40     5D B3 62 FC | 	wrlong	local07, local11
2aa44     20 BA 86 F1 | 	sub	local11, #32
2aa48     5D 7B 02 F6 | 	mov	result1, local11
2aa4c     24 00 90 FD | 	jmp	#LR__4333
2aa50                 | LR__4332
2aa50     53 93 02 F6 | 	mov	arg01, local01
2aa54     54 95 02 F6 | 	mov	arg02, local02
2aa58     24 C2 BF FD | 	call	#__system___freepins
2aa5c     59 93 02 F6 | 	mov	arg01, local07
2aa60     B4 DA BF FD | 	call	#__system___gc_free
2aa64     20 68 06 F1 | 	add	ptr___system__dat__, #32
2aa68     34 19 68 FC | 	wrlong	#12, ptr___system__dat__
2aa6c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
2aa70     00 7A 06 F6 | 	mov	result1, #0
2aa74                 | LR__4333
2aa74     E7 F0 03 F6 | 	mov	ptra, fp
2aa78     F2 00 A0 FD | 	call	#popregs_
2aa7c                 | __system___sdmm_open_ret
2aa7c     2D 00 64 FD | 	ret
2aa80                 | 
2aa80                 | __system____default_filbuf
2aa80     05 CA 05 F6 | 	mov	COUNT_, #5
2aa84     E8 00 A0 FD | 	call	#pushregs_
2aa88     49 A7 02 F6 | 	mov	local01, arg01
2aa8c     53 A9 02 FB | 	rdlong	local02, local01
2aa90     08 A8 06 F1 | 	add	local02, #8
2aa94     54 7B 0A FB | 	rdlong	result1, local02 wz
2aa98     08 A8 86 F1 | 	sub	local02, #8
2aa9c     20 00 90 5D |  if_ne	jmp	#LR__4340
2aaa0     10 A8 06 F1 | 	add	local02, #16
2aaa4     54 7B 02 F6 | 	mov	result1, local02
2aaa8     04 A8 86 F1 | 	sub	local02, #4
2aaac     54 7B 62 FC | 	wrlong	result1, local02
2aab0     04 A8 86 F1 | 	sub	local02, #4
2aab4     02 00 80 FF 
2aab8     54 01 68 FC | 	wrlong	##1024, local02
2aabc     08 A8 86 F1 | 	sub	local02, #8
2aac0                 | LR__4340
2aac0     14 A6 06 F1 | 	add	local01, #20
2aac4     53 AB 02 FB | 	rdlong	local03, local01
2aac8     55 AD 02 F6 | 	mov	local04, local03
2aacc     14 A6 86 F1 | 	sub	local01, #20
2aad0     13 AC 46 F7 | 	zerox	local04, #19
2aad4     14 AA 46 F0 | 	shr	local03, #20
2aad8     02 AA 66 F0 | 	shl	local03, #2
2aadc     2D AB 02 F1 | 	add	local03, __methods__
2aae0     55 AB 02 FB | 	rdlong	local03, local03
2aae4     53 93 02 F6 | 	mov	arg01, local01
2aae8     0C A8 06 F1 | 	add	local02, #12
2aaec     54 95 02 FB | 	rdlong	arg02, local02
2aaf0     04 A8 86 F1 | 	sub	local02, #4
2aaf4     54 97 02 FB | 	rdlong	arg03, local02
2aaf8     08 A8 86 F1 | 	sub	local02, #8
2aafc     32 AF 02 F6 | 	mov	local05, objptr
2ab00     56 65 02 F6 | 	mov	objptr, local04
2ab04     2D AA 62 FD | 	call	local03
2ab08     57 65 02 F6 | 	mov	objptr, local05
2ab0c     3D AF 02 F6 | 	mov	local05, result1
2ab10     00 AE 56 F2 | 	cmps	local05, #0 wc
2ab14     01 7A 66 C6 |  if_b	neg	result1, #1
2ab18     28 00 90 CD |  if_b	jmp	#LR__4341
2ab1c     54 AF 62 FC | 	wrlong	local05, local02
2ab20     0C A8 06 F1 | 	add	local02, #12
2ab24     54 AB 02 FB | 	rdlong	local03, local02
2ab28     08 A8 86 F1 | 	sub	local02, #8
2ab2c     54 AB 62 FC | 	wrlong	local03, local02
2ab30     08 A6 06 F1 | 	add	local01, #8
2ab34     53 AD 02 FB | 	rdlong	local04, local01
2ab38     04 AC 46 F5 | 	or	local04, #4
2ab3c     53 AD 62 FC | 	wrlong	local04, local01
2ab40     57 7B 02 F6 | 	mov	result1, local05
2ab44                 | LR__4341
2ab44     E7 F0 03 F6 | 	mov	ptra, fp
2ab48     F2 00 A0 FD | 	call	#popregs_
2ab4c                 | __system____default_filbuf_ret
2ab4c     2D 00 64 FD | 	ret
2ab50                 | 
2ab50                 | __system__getlower_1283
2ab50     41 92 56 F2 | 	cmps	arg01, #65 wc
2ab54     10 00 90 CD |  if_b	jmp	#LR__4350
2ab58     5B 92 56 F2 | 	cmps	arg01, #91 wc
2ab5c     49 7B 02 C6 |  if_b	mov	result1, arg01
2ab60     20 7A 06 C1 |  if_b	add	result1, #32
2ab64     04 00 90 CD |  if_b	jmp	#__system__getlower_1283_ret
2ab68                 | LR__4350
2ab68     49 7B 02 F6 | 	mov	result1, arg01
2ab6c                 | __system__getlower_1283_ret
2ab6c     2D 00 64 FD | 	ret
2ab70                 | 
2ab70                 | __system___pat_match
2ab70     07 CA 05 F6 | 	mov	COUNT_, #7
2ab74     E8 00 A0 FD | 	call	#pushregs_
2ab78     49 A7 02 F6 | 	mov	local01, arg01
2ab7c                 | LR__4360
2ab7c     4A 93 CA FA | 	rdbyte	arg01, arg02 wz
2ab80     53 A9 CA 5A |  if_ne	rdbyte	local02, local01 wz
2ab84     49 AB 02 56 |  if_ne	mov	local03, arg01
2ab88     2A AA 0E 52 |  if_ne	cmp	local03, #42 wz
2ab8c     2C 00 90 AD |  if_e	jmp	#LR__4361
2ab90     4A 93 C2 FA | 	rdbyte	arg01, arg02
2ab94     B8 FF BF FD | 	call	#__system__getlower_1283
2ab98     3D A9 02 F6 | 	mov	local02, result1
2ab9c     53 93 C2 FA | 	rdbyte	arg01, local01
2aba0     AC FF BF FD | 	call	#__system__getlower_1283
2aba4     54 7B 0A F2 | 	cmp	result1, local02 wz
2aba8     00 7A 06 56 |  if_ne	mov	result1, #0
2abac     00 01 90 5D |  if_ne	jmp	#LR__4370
2abb0     01 A6 06 F1 | 	add	local01, #1
2abb4     01 94 06 F1 | 	add	arg02, #1
2abb8     C0 FF 9F FD | 	jmp	#LR__4360
2abbc                 | LR__4361
2abbc     4A AB C2 FA | 	rdbyte	local03, arg02
2abc0     2A AA 0E F2 | 	cmp	local03, #42 wz
2abc4     D8 00 90 5D |  if_ne	jmp	#LR__4369
2abc8     01 94 06 F1 | 	add	arg02, #1
2abcc     4A AB C2 FA | 	rdbyte	local03, arg02
2abd0     01 94 86 F1 | 	sub	arg02, #1
2abd4     2E AA 0E F2 | 	cmp	local03, #46 wz
2abd8     28 00 90 5D |  if_ne	jmp	#LR__4362
2abdc     02 94 06 F1 | 	add	arg02, #2
2abe0     4A AB C2 FA | 	rdbyte	local03, arg02
2abe4     02 94 86 F1 | 	sub	arg02, #2
2abe8     2A AA 0E F2 | 	cmp	local03, #42 wz
2abec     03 94 06 A1 |  if_e	add	arg02, #3
2abf0     4A AD C2 AA |  if_e	rdbyte	local04, arg02
2abf4     03 94 86 A1 |  if_e	sub	arg02, #3
2abf8     56 AF 0A A6 |  if_e	mov	local05, local04 wz
2abfc     01 7A 06 A6 |  if_e	mov	result1, #1
2ac00     AC 00 90 AD |  if_e	jmp	#LR__4370
2ac04                 | LR__4362
2ac04     01 94 06 F1 | 	add	arg02, #1
2ac08     00 B0 06 F6 | 	mov	local06, #0
2ac0c     D7 0E 48 FB | 	callpa	#(@LR__4364-@LR__4363)>>2,fcache_load_ptr_
2ac10                 | LR__4363
2ac10     58 A9 02 F6 | 	mov	local02, local06
2ac14     4A A9 02 F1 | 	add	local02, arg02
2ac18     54 AD CA FA | 	rdbyte	local04, local02 wz
2ac1c     58 AF 02 56 |  if_ne	mov	local05, local06
2ac20     01 AE 06 51 |  if_ne	add	local05, #1
2ac24     57 B1 02 56 |  if_ne	mov	local06, local05
2ac28     E4 FF 9F 5D |  if_ne	jmp	#LR__4363
2ac2c                 | LR__4364
2ac2c     00 B2 06 F6 | 	mov	local07, #0
2ac30     D7 0E 48 FB | 	callpa	#(@LR__4366-@LR__4365)>>2,fcache_load_ptr_
2ac34                 | LR__4365
2ac34     59 A9 02 F6 | 	mov	local02, local07
2ac38     53 A9 02 F1 | 	add	local02, local01
2ac3c     54 AD CA FA | 	rdbyte	local04, local02 wz
2ac40     59 AF 02 56 |  if_ne	mov	local05, local07
2ac44     01 AE 06 51 |  if_ne	add	local05, #1
2ac48     57 B3 02 56 |  if_ne	mov	local07, local05
2ac4c     E4 FF 9F 5D |  if_ne	jmp	#LR__4365
2ac50                 | LR__4366
2ac50     58 B3 52 F2 | 	cmps	local07, local06 wc
2ac54     00 7A 06 C6 |  if_b	mov	result1, #0
2ac58     54 00 90 CD |  if_b	jmp	#LR__4370
2ac5c     59 AB 02 F6 | 	mov	local03, local07
2ac60     58 AB 82 F1 | 	sub	local03, local06
2ac64     55 A7 02 F1 | 	add	local01, local03
2ac68                 | LR__4367
2ac68     01 B0 56 F2 | 	cmps	local06, #1 wc
2ac6c     30 00 90 CD |  if_b	jmp	#LR__4368
2ac70     53 93 C2 FA | 	rdbyte	arg01, local01
2ac74     D8 FE BF FD | 	call	#__system__getlower_1283
2ac78     3D B3 02 F6 | 	mov	local07, result1
2ac7c     4A 93 C2 FA | 	rdbyte	arg01, arg02
2ac80     CC FE BF FD | 	call	#__system__getlower_1283
2ac84     3D B3 0A F2 | 	cmp	local07, result1 wz
2ac88     00 7A 06 56 |  if_ne	mov	result1, #0
2ac8c     20 00 90 5D |  if_ne	jmp	#LR__4370
2ac90     01 A6 06 F1 | 	add	local01, #1
2ac94     01 94 06 F1 | 	add	arg02, #1
2ac98     01 B0 86 F1 | 	sub	local06, #1
2ac9c     C8 FF 9F FD | 	jmp	#LR__4367
2aca0                 | LR__4368
2aca0                 | LR__4369
2aca0     4A B3 CA FA | 	rdbyte	local07, arg02 wz
2aca4     53 A9 CA AA |  if_e	rdbyte	local02, local01 wz
2aca8     01 7A 06 A6 |  if_e	mov	result1, #1
2acac     00 7A 06 56 |  if_ne	mov	result1, #0
2acb0                 | LR__4370
2acb0     E7 F0 03 F6 | 	mov	ptra, fp
2acb4     F2 00 A0 FD | 	call	#popregs_
2acb8                 | __system___pat_match_ret
2acb8     2D 00 64 FD | 	ret
2acbc                 | 
2acbc                 | _sdmm_cc_disk_initialize
2acbc     0F CA 05 F6 | 	mov	COUNT_, #15
2acc0     E8 00 A0 FD | 	call	#pushregs_
2acc4     49 A7 0A F6 | 	mov	local01, arg01 wz
2acc8     F8 A9 02 F6 | 	mov	local02, ptra
2accc     32 AB 02 FB | 	rdlong	local03, objptr
2acd0     04 64 06 F1 | 	add	objptr, #4
2acd4     32 AD 02 FB | 	rdlong	local04, objptr
2acd8     04 64 06 F1 | 	add	objptr, #4
2acdc     32 AF 02 FB | 	rdlong	local05, objptr
2ace0     04 64 06 F1 | 	add	objptr, #4
2ace4     32 B1 02 FB | 	rdlong	local06, objptr
2ace8     08 64 06 F1 | 	add	objptr, #8
2acec     32 03 48 FC | 	wrbyte	#1, objptr
2acf0     14 64 86 F1 | 	sub	objptr, #20
2acf4                 | ' #line 539 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2acf4                 | ' 		return RES_NOTRDY;
2acf4     0C F0 07 F1 | 	add	ptra, #12
2acf8     03 7A 06 56 |  if_ne	mov	result1, #3
2acfc     68 04 90 5D |  if_ne	jmp	#LR__4400
2ad00     13 00 00 FF 
2ad04     10 93 06 F6 | 	mov	arg01, ##10000
2ad08     30 A0 BF FD | 	call	#__system___waitus
2ad0c     55 99 02 F6 | 	mov	arg04, local03
2ad10     57 99 82 F1 | 	sub	arg04, local05
2ad14     4C 99 42 F6 | 	abs	arg04, arg04
2ad18     04 98 56 F2 | 	cmps	arg04, #4 wc
2ad1c     04 7A 06 36 |  if_ae	mov	result1, #4
2ad20     44 04 90 3D |  if_ae	jmp	#LR__4400
2ad24     55 B3 02 F6 | 	mov	local07, local03
2ad28     58 B3 82 F1 | 	sub	local07, local06
2ad2c     59 B3 42 F6 | 	abs	local07, local07
2ad30     04 B2 56 F2 | 	cmps	local07, #4 wc
2ad34     34 00 90 3D |  if_ae	jmp	#LR__4380
2ad38     55 B5 02 F6 | 	mov	local08, local03
2ad3c     58 B5 82 F1 | 	sub	local08, local06
2ad40     07 B4 06 F5 | 	and	local08, #7
2ad44     18 B4 66 F0 | 	shl	local08, #24
2ad48     29 00 00 FF 
2ad4c     7A B4 46 F5 | 	or	local08, ##21114
2ad50     58 B7 02 F6 | 	mov	local09, local06
2ad54     0C 64 06 F1 | 	add	objptr, #12
2ad58     32 B7 62 FC | 	wrlong	local09, objptr
2ad5c     04 64 06 F1 | 	add	objptr, #4
2ad60     32 B7 62 FC | 	wrlong	local09, objptr
2ad64     10 64 86 F1 | 	sub	objptr, #16
2ad68     A4 00 90 FD | 	jmp	#LR__4383
2ad6c                 | LR__4380
2ad6c     58 AB 5A F2 | 	cmps	local03, local06 wcz
2ad70     28 00 90 ED |  if_be	jmp	#LR__4381
2ad74     55 B7 02 F6 | 	mov	local09, local03
2ad78     03 B6 86 F1 | 	sub	local09, #3
2ad7c     57 B7 0A F2 | 	cmp	local09, local05 wz
2ad80     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2ad84     01 B6 06 A1 |  if_e	add	local09, #1
2ad88     57 B7 0A F2 | 	cmp	local09, local05 wz
2ad8c     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2ad90     28 00 90 5D |  if_ne	jmp	#LR__4382
2ad94     01 B6 06 F1 | 	add	local09, #1
2ad98     20 00 90 FD | 	jmp	#LR__4382
2ad9c                 | LR__4381
2ad9c     55 B7 02 F6 | 	mov	local09, local03
2ada0     03 B6 06 F1 | 	add	local09, #3
2ada4     57 B7 0A F2 | 	cmp	local09, local05 wz
2ada8     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2adac     01 B6 86 A1 |  if_e	sub	local09, #1
2adb0     57 B7 0A F2 | 	cmp	local09, local05 wz
2adb4     56 B7 0A 52 |  if_ne	cmp	local09, local04 wz
2adb8     01 B6 86 A1 |  if_e	sub	local09, #1
2adbc                 | LR__4382
2adbc     58 B3 02 F6 | 	mov	local07, local06
2adc0     5B B3 82 F1 | 	sub	local07, local09
2adc4     59 B3 42 F6 | 	abs	local07, local07
2adc8     04 B2 56 F2 | 	cmps	local07, #4 wc
2adcc     04 7A 06 36 |  if_ae	mov	result1, #4
2add0     94 03 90 3D |  if_ae	jmp	#LR__4400
2add4     58 B5 02 F6 | 	mov	local08, local06
2add8     5B B5 82 F1 | 	sub	local08, local09
2addc     07 B4 06 F5 | 	and	local08, #7
2ade0     1C B4 66 F0 | 	shl	local08, #28
2ade4     55 B3 02 F6 | 	mov	local07, local03
2ade8     5B B3 82 F1 | 	sub	local07, local09
2adec     07 B2 06 F5 | 	and	local07, #7
2adf0     18 B2 66 F0 | 	shl	local07, #24
2adf4     59 B5 42 F5 | 	or	local08, local07
2adf8     3A B4 46 F5 | 	or	local08, #58
2adfc     10 64 06 F1 | 	add	objptr, #16
2ae00     32 B1 62 FC | 	wrlong	local06, objptr
2ae04     04 64 86 F1 | 	sub	objptr, #4
2ae08     32 B7 62 FC | 	wrlong	local09, objptr
2ae0c     0C 64 86 F1 | 	sub	objptr, #12
2ae10                 | LR__4383
2ae10     56 01 08 FC | 	wrpin	#0, local04
2ae14     59 AC 62 FD | 	drvh	local04
2ae18     00 08 00 FF 
2ae1c     20 B8 06 F6 | 	mov	local10, ##1048608
2ae20     40 AA 62 FD | 	dirl	local03
2ae24     A0 03 80 FF 
2ae28     55 91 08 FC | 	wrpin	##475208, local03
2ae2c     00 08 80 FF 
2ae30     55 41 18 FC | 	wxpin	##1048608, local03
2ae34     55 01 28 FC | 	wypin	#0, local03
2ae38     41 AA 62 FD | 	dirh	local03
2ae3c     55 B3 02 F6 | 	mov	local07, local03
2ae40     57 B3 82 F1 | 	sub	local07, local05
2ae44     07 B2 06 F5 | 	and	local07, #7
2ae48     18 B2 66 F0 | 	shl	local07, #24
2ae4c     78 BA 06 F6 | 	mov	local11, #120
2ae50     59 BB 42 F5 | 	or	local11, local07
2ae54     5D 95 02 F6 | 	mov	arg02, local11
2ae58     10 94 26 F4 | 	bith	arg02, #16
2ae5c     40 AE 62 FD | 	dirl	local05
2ae60     57 95 02 FC | 	wrpin	arg02, local05
2ae64     57 3F 18 FC | 	wxpin	#31, local05
2ae68     FF FF FF FF 
2ae6c     57 FF 2B FC | 	wypin	##-1, local05
2ae70     41 AE 62 FD | 	dirh	local05
2ae74     29 00 80 FF 
2ae78     58 01 08 FC | 	wrpin	##20992, local06
2ae7c     40 B6 62 FD | 	dirl	local09
2ae80     5B B5 02 FC | 	wrpin	local08, local09
2ae84     5B 4F 18 FC | 	wxpin	#39, local09
2ae88     5B 01 28 FC | 	wypin	#0, local09
2ae8c     41 B6 62 FD | 	dirh	local09
2ae90     54 93 02 F6 | 	mov	arg01, local02
2ae94     0A 94 06 F6 | 	mov	arg02, #10
2ae98     5C 06 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2ae9c     00 92 06 F6 | 	mov	arg01, #0
2aea0     00 94 06 F6 | 	mov	arg02, #0
2aea4     D4 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2aea8     20 07 B0 FD | 	call	#_sdmm_cc_deselect_0858
2aeac     64 92 06 F6 | 	mov	arg01, #100
2aeb0     88 9E BF FD | 	call	#__system___waitus
2aeb4     54 93 02 F6 | 	mov	arg01, local02
2aeb8     0A 94 06 F6 | 	mov	arg02, #10
2aebc     38 06 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2aec0     00 BC 06 F6 | 	mov	local12, #0
2aec4     00 92 06 F6 | 	mov	arg01, #0
2aec8     00 94 06 F6 | 	mov	arg02, #0
2aecc     AC 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2aed0     3D B3 E2 F8 | 	getbyte	local07, result1, #0
2aed4     01 B2 0E F2 | 	cmp	local07, #1 wz
2aed8     5C 02 90 5D |  if_ne	jmp	#LR__4399
2aedc     08 92 06 F6 | 	mov	arg01, #8
2aee0     AA 95 06 F6 | 	mov	arg02, #426
2aee4     94 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2aee8     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2aeec     01 7A 0E F2 | 	cmp	result1, #1 wz
2aef0     30 01 90 5D |  if_ne	jmp	#LR__4388
2aef4     54 93 02 F6 | 	mov	arg01, local02
2aef8     04 94 06 F6 | 	mov	arg02, #4
2aefc     F8 05 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2af00     02 A8 06 F1 | 	add	local02, #2
2af04     54 B3 C2 FA | 	rdbyte	local07, local02
2af08     02 A8 86 F1 | 	sub	local02, #2
2af0c     01 B2 0E F2 | 	cmp	local07, #1 wz
2af10     03 A8 06 A1 |  if_e	add	local02, #3
2af14     54 BF C2 AA |  if_e	rdbyte	local13, local02
2af18     03 A8 86 A1 |  if_e	sub	local02, #3
2af1c     AA BE 0E A2 |  if_e	cmp	local13, #170 wz
2af20     14 02 90 5D |  if_ne	jmp	#LR__4398
2af24                 | ' 				for (tmr = 1000; tmr; tmr--) {
2af24     01 00 00 FF 
2af28     E8 C1 06 F6 | 	mov	local14, ##1000
2af2c                 | LR__4384
2af2c     A9 92 06 F6 | 	mov	arg01, #169
2af30     1E 94 C6 F9 | 	decod	arg02, #30
2af34     44 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2af38     3D B3 02 F6 | 	mov	local07, result1
2af3c     07 B2 4E F7 | 	zerox	local07, #7 wz
2af40     18 00 90 AD |  if_e	jmp	#LR__4385
2af44     01 00 00 FF 
2af48     E8 93 06 F6 | 	mov	arg01, ##1000
2af4c     EC 9D BF FD | 	call	#__system___waitus
2af50     60 B3 02 F6 | 	mov	local07, local14
2af54     01 C0 8E F1 | 	sub	local14, #1 wz
2af58     D0 FF 9F 5D |  if_ne	jmp	#LR__4384
2af5c                 | LR__4385
2af5c     00 C0 0E F2 | 	cmp	local14, #0 wz
2af60     38 00 90 AD |  if_e	jmp	#LR__4386
2af64     3A 92 06 F6 | 	mov	arg01, #58
2af68     00 94 06 F6 | 	mov	arg02, #0
2af6c     0C 08 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2af70     3D B3 02 F6 | 	mov	local07, result1
2af74     07 B2 4E F7 | 	zerox	local07, #7 wz
2af78     20 00 90 5D |  if_ne	jmp	#LR__4386
2af7c     54 93 02 F6 | 	mov	arg01, local02
2af80     04 94 06 F6 | 	mov	arg02, #4
2af84     70 05 B0 FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2af88     54 C1 C2 FA | 	rdbyte	local14, local02
2af8c     40 C0 CE F7 | 	test	local14, #64 wz
2af90     0C B2 06 56 |  if_ne	mov	local07, #12
2af94     04 B2 06 A6 |  if_e	mov	local07, #4
2af98     59 BD 02 F6 | 	mov	local12, local07
2af9c                 | LR__4386
2af9c     14 C0 06 FB | 	rdlong	local14, #20
2afa0     F0 FA 02 FF 
2afa4     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2afa8     5D B3 02 C6 |  if_b	mov	local07, local11
2afac     1B B2 26 C4 |  if_b	bith	local07, #27
2afb0     59 BB 02 C6 |  if_b	mov	local11, local07
2afb4     10 00 90 CD |  if_b	jmp	#LR__4387
2afb8     E1 F5 05 FF 
2afbc     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2afc0     80 00 04 CF 
2afc4     00 BA 46 C5 |  if_b	or	local11, ##134283264
2afc8                 | LR__4387
2afc8     F0 FA 02 FF 
2afcc     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2afd0     00 01 00 CF 
2afd4     04 B8 06 C6 |  if_b	mov	local10, ##131076
2afd8     5C 01 90 CD |  if_b	jmp	#LR__4398
2afdc     68 78 04 FF 
2afe0     81 C1 16 F2 | 	cmp	local14, ##150000001 wc
2afe4     80 01 00 CF 
2afe8     06 B8 06 C6 |  if_b	mov	local10, ##196614
2afec     48 01 90 CD |  if_b	jmp	#LR__4398
2aff0     E1 F5 05 FF 
2aff4     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2aff8     00 02 00 CF 
2affc     08 B8 06 C6 |  if_b	mov	local10, ##262152
2b000     34 01 90 CD |  if_b	jmp	#LR__4398
2b004     59 73 07 FF 
2b008     81 C0 16 F2 | 	cmp	local14, ##250000001 wc
2b00c     80 02 00 CF 
2b010     0A B8 06 C6 |  if_b	mov	local10, ##327690
2b014     20 01 90 CD |  if_b	jmp	#LR__4398
2b018     00 03 00 FF 
2b01c     0C B8 06 F6 | 	mov	local10, ##393228
2b020     14 01 90 FD | 	jmp	#LR__4398
2b024                 | LR__4388
2b024     A9 92 06 F6 | 	mov	arg01, #169
2b028     00 94 06 F6 | 	mov	arg02, #0
2b02c     4C 07 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b030     3D B3 E2 F8 | 	getbyte	local07, result1, #0
2b034     02 B2 16 F2 | 	cmp	local07, #2 wc
2b038     02 BC 06 C6 |  if_b	mov	local12, #2
2b03c     A9 C2 06 C6 |  if_b	mov	local15, #169
2b040     01 BC 06 36 |  if_ae	mov	local12, #1
2b044     01 C2 06 36 |  if_ae	mov	local15, #1
2b048                 | ' 				ty =  0x01 ; cmd =  (1) ;
2b048                 | ' 			}
2b048                 | ' 			for (tmr = 1000; tmr; tmr--) {
2b048     01 00 00 FF 
2b04c     E8 C1 06 F6 | 	mov	local14, ##1000
2b050                 | LR__4389
2b050     61 93 02 F6 | 	mov	arg01, local15
2b054     00 94 06 F6 | 	mov	arg02, #0
2b058     20 07 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b05c     3D B3 02 F6 | 	mov	local07, result1
2b060     07 B2 4E F7 | 	zerox	local07, #7 wz
2b064     18 00 90 AD |  if_e	jmp	#LR__4390
2b068     01 00 00 FF 
2b06c     E8 93 06 F6 | 	mov	arg01, ##1000
2b070     C8 9C BF FD | 	call	#__system___waitus
2b074     60 B3 02 F6 | 	mov	local07, local14
2b078     01 C0 8E F1 | 	sub	local14, #1 wz
2b07c     D0 FF 9F 5D |  if_ne	jmp	#LR__4389
2b080                 | LR__4390
2b080     00 C0 0E F2 | 	cmp	local14, #0 wz
2b084     18 00 90 AD |  if_e	jmp	#LR__4391
2b088     10 92 06 F6 | 	mov	arg01, #16
2b08c     09 94 C6 F9 | 	decod	arg02, #9
2b090     E8 06 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b094     3D B3 02 F6 | 	mov	local07, result1
2b098     07 B2 4E F7 | 	zerox	local07, #7 wz
2b09c     04 00 90 AD |  if_e	jmp	#LR__4392
2b0a0                 | LR__4391
2b0a0     00 BC 06 F6 | 	mov	local12, #0
2b0a4                 | LR__4392
2b0a4     14 C0 06 FB | 	rdlong	local14, #20
2b0a8     F0 FA 02 FF 
2b0ac     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2b0b0     5D B3 02 C6 |  if_b	mov	local07, local11
2b0b4     1B B2 26 C4 |  if_b	bith	local07, #27
2b0b8     59 BB 02 C6 |  if_b	mov	local11, local07
2b0bc     10 00 90 CD |  if_b	jmp	#LR__4393
2b0c0     E1 F5 05 FF 
2b0c4     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2b0c8     80 00 04 CF 
2b0cc     00 BA 46 C5 |  if_b	or	local11, ##134283264
2b0d0                 | LR__4393
2b0d0     F0 FA 02 FF 
2b0d4     01 C1 16 F2 | 	cmp	local14, ##100000001 wc
2b0d8     00 01 00 CF 
2b0dc     04 B8 06 C6 |  if_b	mov	local10, ##131076
2b0e0     54 00 90 CD |  if_b	jmp	#LR__4397
2b0e4     68 78 04 FF 
2b0e8     81 C1 16 F2 | 	cmp	local14, ##150000001 wc
2b0ec     80 01 00 CF 
2b0f0     06 B8 06 C6 |  if_b	mov	local10, ##196614
2b0f4     40 00 90 CD |  if_b	jmp	#LR__4396
2b0f8     E1 F5 05 FF 
2b0fc     01 C0 16 F2 | 	cmp	local14, ##200000001 wc
2b100     00 02 00 CF 
2b104     08 B8 06 C6 |  if_b	mov	local10, ##262152
2b108     2C 00 90 CD |  if_b	jmp	#LR__4395
2b10c     59 73 07 FF 
2b110     81 C0 16 F2 | 	cmp	local14, ##250000001 wc
2b114     80 02 00 CF 
2b118     0A B8 06 C6 |  if_b	mov	local10, ##327690
2b11c     18 00 90 CD |  if_b	jmp	#LR__4394
2b120     D1 F0 08 FF 
2b124     01 C1 16 F2 | 	cmp	local14, ##300000001 wc
2b128     00 03 00 CF 
2b12c     0C B8 06 C6 |  if_b	mov	local10, ##393228
2b130     80 03 00 3F 
2b134     0E B8 06 36 |  if_ae	mov	local10, ##458766
2b138                 | LR__4394
2b138                 | LR__4395
2b138                 | LR__4396
2b138                 | LR__4397
2b138                 | LR__4398
2b138                 | LR__4399
2b138     15 64 06 F1 | 	add	objptr, #21
2b13c     32 BD 42 FC | 	wrbyte	local12, objptr
2b140     00 BC 0E F2 | 	cmp	local12, #0 wz
2b144     00 B2 06 56 |  if_ne	mov	local07, #0
2b148     01 B2 06 A6 |  if_e	mov	local07, #1
2b14c     01 64 86 F1 | 	sub	objptr, #1
2b150     32 B3 42 FC | 	wrbyte	local07, objptr
2b154     14 64 86 F1 | 	sub	objptr, #20
2b158     70 04 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b15c     55 B9 12 FC | 	wxpin	local10, local03
2b160     57 BB 02 FC | 	wrpin	local11, local05
2b164                 | ' #line 682 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b164                 | ' 		}
2b164                 | ' 	}
2b164                 | ' #line 687 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b164                 | ' 	CardType = ty;
2b164                 | ' 	s = ty ? 0 :  0x01 ;
2b164                 | ' 	Stat = s;
2b164                 | ' 
2b164                 | ' 	deselect();
2b164                 | ' 
2b164                 | ' 
2b164                 | ' 	_wxpin( PIN_CLK, ck_div );
2b164                 | ' 	_wrpin( PIN_DI, spm_tx );
2b164                 | ' #line 700 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b164                 | ' 	return s;
2b164     59 7B 02 F6 | 	mov	result1, local07
2b168                 | LR__4400
2b168     E7 F0 03 F6 | 	mov	ptra, fp
2b16c     F2 00 A0 FD | 	call	#popregs_
2b170                 | _sdmm_cc_disk_initialize_ret
2b170     2D 00 64 FD | 	ret
2b174                 | 
2b174                 | _sdmm_cc_disk_read
2b174     05 CA 05 F6 | 	mov	COUNT_, #5
2b178     E8 00 A0 FD | 	call	#pushregs_
2b17c     4A A7 02 F6 | 	mov	local01, arg02
2b180     4B A9 02 F6 | 	mov	local02, arg03
2b184     4C AB 02 F6 | 	mov	local03, arg04
2b188     00 92 0E F2 | 	cmp	arg01, #0 wz
2b18c     01 7A 06 56 |  if_ne	mov	result1, #1
2b190                 | ' 
2b190                 | ' 	return Stat;
2b190     14 64 06 A1 |  if_e	add	objptr, #20
2b194     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2b198     14 64 86 A1 |  if_e	sub	objptr, #20
2b19c     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b1a0     01 7A CE F7 | 	test	result1, #1 wz
2b1a4     03 7A 06 56 |  if_ne	mov	result1, #3
2b1a8     7C 00 90 5D |  if_ne	jmp	#LR__4412
2b1ac     15 64 06 F1 | 	add	objptr, #21
2b1b0     32 AD C2 FA | 	rdbyte	local04, objptr
2b1b4     15 64 86 F1 | 	sub	objptr, #21
2b1b8     08 AC CE F7 | 	test	local04, #8 wz
2b1bc     09 A8 66 A0 |  if_e	shl	local02, #9
2b1c0     02 AA 16 F2 | 	cmp	local03, #2 wc
2b1c4     12 AC 06 36 |  if_ae	mov	local04, #18
2b1c8     11 AC 06 C6 |  if_b	mov	local04, #17
2b1cc     54 95 02 F6 | 	mov	arg02, local02
2b1d0     56 93 02 F6 | 	mov	arg01, local04
2b1d4     A4 05 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b1d8     3D AF 02 F6 | 	mov	local05, result1
2b1dc     07 AE 4E F7 | 	zerox	local05, #7 wz
2b1e0     30 00 90 5D |  if_ne	jmp	#LR__4411
2b1e4                 | ' 		do {
2b1e4                 | LR__4410
2b1e4     53 93 02 F6 | 	mov	arg01, local01
2b1e8     09 94 C6 F9 | 	decod	arg02, #9
2b1ec     7C 04 B0 FD | 	call	#_sdmm_cc_rcvr_datablock_0866
2b1f0     00 7A 0E F2 | 	cmp	result1, #0 wz
2b1f4     01 00 00 5F 
2b1f8     00 A6 06 51 |  if_ne	add	local01, ##512
2b1fc     F9 AB 6E 5B |  if_ne	djnz	local03, #LR__4410
2b200     56 AD E2 F8 | 	getbyte	local04, local04, #0
2b204     12 AC 0E F2 | 	cmp	local04, #18 wz
2b208     0C 92 06 A6 |  if_e	mov	arg01, #12
2b20c     00 94 06 A6 |  if_e	mov	arg02, #0
2b210     68 05 B0 AD |  if_e	call	#_sdmm_cc_send_cmd_0871
2b214                 | LR__4411
2b214     B4 03 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b218                 | ' 	}
2b218                 | ' 	deselect();
2b218                 | ' 
2b218                 | ' 	return count ? RES_ERROR : RES_OK;
2b218     00 AA 0E F2 | 	cmp	local03, #0 wz
2b21c     01 AE 06 56 |  if_ne	mov	local05, #1
2b220     00 AE 06 A6 |  if_e	mov	local05, #0
2b224     57 7B 02 F6 | 	mov	result1, local05
2b228                 | LR__4412
2b228     E7 F0 03 F6 | 	mov	ptra, fp
2b22c     F2 00 A0 FD | 	call	#popregs_
2b230                 | _sdmm_cc_disk_read_ret
2b230     2D 00 64 FD | 	ret
2b234                 | 
2b234                 | _sdmm_cc_disk_write
2b234     04 CA 05 F6 | 	mov	COUNT_, #4
2b238     E8 00 A0 FD | 	call	#pushregs_
2b23c     4A A7 02 F6 | 	mov	local01, arg02
2b240     4C A9 02 F6 | 	mov	local02, arg04
2b244     4B AB 02 F6 | 	mov	local03, arg03
2b248     00 92 0E F2 | 	cmp	arg01, #0 wz
2b24c     01 7A 06 56 |  if_ne	mov	result1, #1
2b250                 | ' 
2b250                 | ' 	return Stat;
2b250     14 64 06 A1 |  if_e	add	objptr, #20
2b254     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2b258     14 64 86 A1 |  if_e	sub	objptr, #20
2b25c     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b260     01 7A CE F7 | 	test	result1, #1 wz
2b264     03 7A 06 56 |  if_ne	mov	result1, #3
2b268     C4 00 90 5D |  if_ne	jmp	#LR__4424
2b26c     15 64 06 F1 | 	add	objptr, #21
2b270     32 97 C2 FA | 	rdbyte	arg03, objptr
2b274     15 64 86 F1 | 	sub	objptr, #21
2b278     08 96 CE F7 | 	test	arg03, #8 wz
2b27c     09 AA 66 A0 |  if_e	shl	local03, #9
2b280     01 A8 0E F2 | 	cmp	local02, #1 wz
2b284     30 00 90 5D |  if_ne	jmp	#LR__4420
2b288     18 92 06 F6 | 	mov	arg01, #24
2b28c     55 95 02 F6 | 	mov	arg02, local03
2b290     E8 04 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b294     3D AD 02 F6 | 	mov	local04, result1
2b298     07 AC 4E F7 | 	zerox	local04, #7 wz
2b29c     7C 00 90 5D |  if_ne	jmp	#LR__4423
2b2a0     53 93 02 F6 | 	mov	arg01, local01
2b2a4     FE 94 06 F6 | 	mov	arg02, #254
2b2a8     44 04 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b2ac     00 7A 0E F2 | 	cmp	result1, #0 wz
2b2b0     00 A8 06 56 |  if_ne	mov	local02, #0
2b2b4     64 00 90 FD | 	jmp	#LR__4423
2b2b8                 | LR__4420
2b2b8     15 64 06 F1 | 	add	objptr, #21
2b2bc     32 AD C2 FA | 	rdbyte	local04, objptr
2b2c0     15 64 86 F1 | 	sub	objptr, #21
2b2c4     06 AC CE F7 | 	test	local04, #6 wz
2b2c8     97 92 06 56 |  if_ne	mov	arg01, #151
2b2cc     54 95 02 56 |  if_ne	mov	arg02, local02
2b2d0     A8 04 B0 5D |  if_ne	call	#_sdmm_cc_send_cmd_0871
2b2d4     55 95 02 F6 | 	mov	arg02, local03
2b2d8     19 92 06 F6 | 	mov	arg01, #25
2b2dc     9C 04 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b2e0     3D AD 02 F6 | 	mov	local04, result1
2b2e4     07 AC 4E F7 | 	zerox	local04, #7 wz
2b2e8     30 00 90 5D |  if_ne	jmp	#LR__4422
2b2ec                 | ' 			do {
2b2ec                 | LR__4421
2b2ec     53 93 02 F6 | 	mov	arg01, local01
2b2f0     FC 94 06 F6 | 	mov	arg02, #252
2b2f4     F8 03 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b2f8     00 7A 0E F2 | 	cmp	result1, #0 wz
2b2fc     01 00 00 5F 
2b300     00 A6 06 51 |  if_ne	add	local01, ##512
2b304     F9 A9 6E 5B |  if_ne	djnz	local02, #LR__4421
2b308     00 92 06 F6 | 	mov	arg01, #0
2b30c     FD 94 06 F6 | 	mov	arg02, #253
2b310     DC 03 B0 FD | 	call	#_sdmm_cc_xmit_datablock_0868
2b314     00 7A 0E F2 | 	cmp	result1, #0 wz
2b318     01 A8 06 A6 |  if_e	mov	local02, #1
2b31c                 | LR__4422
2b31c                 | LR__4423
2b31c     AC 02 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b320                 | ' 				count = 1;
2b320                 | ' 		}
2b320                 | ' 	}
2b320                 | ' 	deselect();
2b320                 | ' 
2b320                 | ' 	return count ? RES_ERROR : RES_OK;
2b320     00 A8 0E F2 | 	cmp	local02, #0 wz
2b324     01 AC 06 56 |  if_ne	mov	local04, #1
2b328     00 AC 06 A6 |  if_e	mov	local04, #0
2b32c     56 7B 02 F6 | 	mov	result1, local04
2b330                 | LR__4424
2b330     E7 F0 03 F6 | 	mov	ptra, fp
2b334     F2 00 A0 FD | 	call	#popregs_
2b338                 | _sdmm_cc_disk_write_ret
2b338     2D 00 64 FD | 	ret
2b33c                 | 
2b33c                 | _sdmm_cc_disk_ioctl
2b33c     06 CA 05 F6 | 	mov	COUNT_, #6
2b340     E8 00 A0 FD | 	call	#pushregs_
2b344     30 F0 07 F1 | 	add	ptra, #48
2b348     4A A7 02 F6 | 	mov	local01, arg02
2b34c     4B A9 02 F6 | 	mov	local02, arg03
2b350     00 92 0E F2 | 	cmp	arg01, #0 wz
2b354     01 7A 06 56 |  if_ne	mov	result1, #1
2b358                 | ' 
2b358                 | ' 	return Stat;
2b358     14 64 06 A1 |  if_e	add	objptr, #20
2b35c     32 7B C2 AA |  if_e	rdbyte	result1, objptr
2b360     14 64 86 A1 |  if_e	sub	objptr, #20
2b364     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2b368     01 7A CE F7 | 	test	result1, #1 wz
2b36c     03 7A 06 56 |  if_ne	mov	result1, #3
2b370     F4 00 90 5D |  if_ne	jmp	#LR__4437
2b374     01 AA 06 F6 | 	mov	local03, #1
2b378                 | ' 
2b378                 | ' 	res = RES_ERROR;
2b378                 | ' 	switch (ctrl) {
2b378     53 AD E2 F8 | 	getbyte	local04, local01, #0
2b37c     04 AC 26 F3 | 	fle	local04, #4
2b380     30 AC 62 FD | 	jmprel	local04
2b384                 | LR__4430
2b384     10 00 90 FD | 	jmp	#LR__4431
2b388     1C 00 90 FD | 	jmp	#LR__4432
2b38c     CC 00 90 FD | 	jmp	#LR__4435
2b390     BC 00 90 FD | 	jmp	#LR__4434
2b394     C4 00 90 FD | 	jmp	#LR__4435
2b398                 | LR__4431
2b398     6C 02 B0 FD | 	call	#_sdmm_cc_select_0862
2b39c     00 7A 0E F2 | 	cmp	result1, #0 wz
2b3a0     00 AA 06 56 |  if_ne	mov	local03, #0
2b3a4                 | ' 			break;
2b3a4     B8 00 90 FD | 	jmp	#LR__4436
2b3a8                 | LR__4432
2b3a8     09 92 06 F6 | 	mov	arg01, #9
2b3ac     00 94 06 F6 | 	mov	arg02, #0
2b3b0     C8 03 B0 FD | 	call	#_sdmm_cc_send_cmd_0871
2b3b4     3D AD 02 F6 | 	mov	local04, result1
2b3b8     07 AC 4E F7 | 	zerox	local04, #7 wz
2b3bc     A0 00 90 5D |  if_ne	jmp	#LR__4436
2b3c0     E7 92 02 F6 | 	mov	arg01, fp
2b3c4     18 92 06 F1 | 	add	arg01, #24
2b3c8     10 94 06 F6 | 	mov	arg02, #16
2b3cc     9C 02 B0 FD | 	call	#_sdmm_cc_rcvr_datablock_0866
2b3d0     00 7A 0E F2 | 	cmp	result1, #0 wz
2b3d4     88 00 90 AD |  if_e	jmp	#LR__4436
2b3d8     E7 92 02 F6 | 	mov	arg01, fp
2b3dc     18 92 06 F1 | 	add	arg01, #24
2b3e0     49 7B 02 F6 | 	mov	result1, arg01
2b3e4     06 92 06 F1 | 	add	arg01, #6
2b3e8     49 AF 02 FB | 	rdlong	local05, arg01
2b3ec     1B AE FE F9 | 	movbyts	local05, #27
2b3f0     3D 93 C2 FA | 	rdbyte	arg01, result1
2b3f4     06 92 46 F0 | 	shr	arg01, #6
2b3f8     01 92 0E F2 | 	cmp	arg01, #1 wz
2b3fc     36 AF 06 A4 |  if_e	bitl	local05, #310
2b400     01 AE 06 A1 |  if_e	add	local05, #1
2b404     0A B0 06 A6 |  if_e	mov	local06, #10
2b408     34 00 90 AD |  if_e	jmp	#LR__4433
2b40c     0E AE 46 F0 | 	shr	local05, #14
2b410     0B AE 46 F7 | 	zerox	local05, #11
2b414     01 AE 06 F1 | 	add	local05, #1
2b418     05 7A 06 F1 | 	add	result1, #5
2b41c     3D B1 C2 FA | 	rdbyte	local06, result1
2b420     58 B1 42 F8 | 	getnib	local06, local06, #0
2b424     04 7A 06 F1 | 	add	result1, #4
2b428     3D 7B E2 FA | 	rdword	result1, result1
2b42c     1B 7A FE F9 | 	movbyts	result1, #27
2b430     17 7A 46 F0 | 	shr	result1, #23
2b434     07 7A 06 F5 | 	and	result1, #7
2b438     3D B1 02 F1 | 	add	local06, result1
2b43c     07 B0 86 F1 | 	sub	local06, #7
2b440                 | LR__4433
2b440                 | '         cs = (LBA_t)(cs>>14 & 0xfff)+1;
2b440                 | '         n = (csd[5] & 15) + (__builtin_bswap32(*(uint16_t*)(&csd[9]))>>23 & 0x7)+(2-9);
2b440                 | '     }
2b440                 | '     return (LBA_t)cs << n;
2b440     58 AF 62 F0 | 	shl	local05, local06
2b444     54 AF 62 FC | 	wrlong	local05, local02
2b448     00 AA 06 F6 | 	mov	local03, #0
2b44c                 | '                			*(LBA_t*)buff = disc_size(csd);
2b44c                 | ' 				res = RES_OK;
2b44c                 | ' 			}
2b44c                 | ' 			break;
2b44c     10 00 90 FD | 	jmp	#LR__4436
2b450                 | LR__4434
2b450     54 01 69 FC | 	wrlong	#128, local02
2b454     00 AA 06 F6 | 	mov	local03, #0
2b458                 | ' 			*(DWORD*)buff = 128;
2b458                 | ' 			res = RES_OK;
2b458                 | ' 			break;
2b458     04 00 90 FD | 	jmp	#LR__4436
2b45c                 | LR__4435
2b45c     04 AA 06 F6 | 	mov	local03, #4
2b460                 | LR__4436
2b460     68 01 B0 FD | 	call	#_sdmm_cc_deselect_0858
2b464                 | ' 			res = RES_PARERR;
2b464                 | ' 	}
2b464                 | ' 
2b464                 | ' 	deselect();
2b464                 | ' 
2b464                 | ' 	return res;
2b464     55 7B 02 F6 | 	mov	result1, local03
2b468                 | LR__4437
2b468     E7 F0 03 F6 | 	mov	ptra, fp
2b46c     F2 00 A0 FD | 	call	#popregs_
2b470                 | _sdmm_cc_disk_ioctl_ret
2b470     2D 00 64 FD | 	ret
2b474                 | 
2b474                 | _sdmm_cc_xmit_mmc_0841
2b474     32 81 02 FB | 	rdlong	_var01, objptr
2b478     08 64 06 F1 | 	add	objptr, #8
2b47c     32 83 02 FB | 	rdlong	_var02, objptr
2b480     08 64 86 F1 | 	sub	objptr, #8
2b484     40 82 62 FD | 	dirl	_var02
2b488     28 02 64 FD | 	setq	#1
2b48c     49 85 02 FB | 	rdlong	_var03, arg01
2b490     69 84 62 FD | 	rev	_var03
2b494     1B 84 FE F9 | 	movbyts	_var03, #27
2b498     41 85 22 FC | 	wypin	_var03, _var02
2b49c     4A 85 02 F6 | 	mov	_var03, arg02
2b4a0     02 94 4E F0 | 	shr	arg02, #2 wz
2b4a4     03 84 66 F0 | 	shl	_var03, #3
2b4a8     40 85 22 FC | 	wypin	_var03, _var01
2b4ac     41 82 62 FD | 	dirh	_var02
2b4b0     08 92 06 F1 | 	add	arg01, #8
2b4b4     69 86 62 FD | 	rev	_var04
2b4b8     1B 86 FE F9 | 	movbyts	_var04, #27
2b4bc                 | LR__4440
2b4bc     41 87 22 5C |  if_ne	wypin	_var04, _var02
2b4c0     49 87 02 5B |  if_ne	rdlong	_var04, arg01
2b4c4     04 92 06 51 |  if_ne	add	arg01, #4
2b4c8     69 86 62 5D |  if_ne	rev	_var04
2b4cc     1B 86 FE 59 |  if_ne	movbyts	_var04, #27
2b4d0                 | LR__4441
2b4d0     40 82 72 5D |  if_ne	testp	_var02 wc
2b4d4     F8 FF 9F 1D |  if_a	jmp	#LR__4441
2b4d8     F8 95 6E 5B |  if_ne	djnz	arg02, #LR__4440
2b4dc                 | LR__4442
2b4dc     40 80 72 FD | 	testp	_var01 wc
2b4e0     F8 FF 9F 3D |  if_ae	jmp	#LR__4442
2b4e4     40 82 62 FD | 	dirl	_var02
2b4e8     FF FF FF FF 
2b4ec     41 FF 2B FC | 	wypin	##-1, _var02
2b4f0     41 82 62 FD | 	dirh	_var02
2b4f4                 | _sdmm_cc_xmit_mmc_0841_ret
2b4f4     2D 00 64 FD | 	ret
2b4f8                 | 
2b4f8                 | _sdmm_cc_rcvr_mmc_0848
2b4f8     32 81 02 FB | 	rdlong	_var01, objptr
2b4fc     0C 64 06 F1 | 	add	objptr, #12
2b500     32 83 02 FB | 	rdlong	_var02, objptr
2b504     0C 64 86 F1 | 	sub	objptr, #12
2b508     41 03 08 FC | 	akpin	_var02
2b50c     4A 85 0A F6 | 	mov	_var03, arg02 wz
2b510     02 84 4E F0 | 	shr	_var03, #2 wz
2b514     30 00 90 AD |  if_e	jmp	#LR__4452
2b518     42 87 02 F6 | 	mov	_var04, _var03
2b51c     05 86 66 F0 | 	shl	_var04, #5
2b520     40 87 22 FC | 	wypin	_var04, _var01
2b524     41 7F 18 FC | 	wxpin	#63, _var02
2b528                 | LR__4450
2b528                 | LR__4451
2b528     40 82 72 FD | 	testp	_var02 wc
2b52c     F8 FF 9F 3D |  if_ae	jmp	#LR__4451
2b530     41 87 8A FA | 	rdpin	_var04, _var02
2b534     69 86 62 FD | 	rev	_var04
2b538     1B 86 FE F9 | 	movbyts	_var04, #27
2b53c     49 87 62 FC | 	wrlong	_var04, arg01
2b540     04 92 06 F1 | 	add	arg01, #4
2b544     F8 85 6E FB | 	djnz	_var03, #LR__4450
2b548                 | LR__4452
2b548     03 94 0E F5 | 	and	arg02, #3 wz
2b54c     24 00 90 AD |  if_e	jmp	#LR__4455
2b550     41 4F 18 FC | 	wxpin	#39, _var02
2b554                 | LR__4453
2b554     40 11 28 FC | 	wypin	#8, _var01
2b558                 | LR__4454
2b558     40 82 72 FD | 	testp	_var02 wc
2b55c     F8 FF 9F 3D |  if_ae	jmp	#LR__4454
2b560     41 87 8A FA | 	rdpin	_var04, _var02
2b564     69 86 62 FD | 	rev	_var04
2b568     49 87 42 FC | 	wrbyte	_var04, arg01
2b56c     01 92 06 F1 | 	add	arg01, #1
2b570     F8 95 6E FB | 	djnz	arg02, #LR__4453
2b574                 | LR__4455
2b574                 | _sdmm_cc_rcvr_mmc_0848_ret
2b574     2D 00 64 FD | 	ret
2b578                 | 
2b578                 | _sdmm_cc_wait_ready_0852
2b578     03 CA 05 F6 | 	mov	COUNT_, #3
2b57c     E8 00 A0 FD | 	call	#pushregs_
2b580     F8 A7 02 F6 | 	mov	local01, ptra
2b584     1A A8 62 FD | 	getct	local02
2b588     14 AA 06 FB | 	rdlong	local03, #20
2b58c     01 AA 46 F0 | 	shr	local03, #1
2b590                 | ' 	UINT tmr, tmout;
2b590                 | ' 
2b590                 | ' 	tmr = _cnt();
2b590                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2b590                 | ' 	for(;;) {
2b590     04 F0 07 F1 | 	add	ptra, #4
2b594                 | LR__4460
2b594     53 93 02 F6 | 	mov	arg01, local01
2b598     01 94 06 F6 | 	mov	arg02, #1
2b59c     58 FF BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b5a0     53 95 C2 FA | 	rdbyte	arg02, local01
2b5a4     FF 94 0E F2 | 	cmp	arg02, #255 wz
2b5a8     01 7A 06 A6 |  if_e	mov	result1, #1
2b5ac     1A 7A 62 5D |  if_ne	getct	result1
2b5b0     54 7B 82 51 |  if_ne	sub	result1, local02
2b5b4     55 7B 12 52 |  if_ne	cmp	result1, local03 wc
2b5b8     00 7A 06 16 |  if_a	mov	result1, #0
2b5bc     D4 FF 9F 4D |  if_c_and_nz	jmp	#LR__4460
2b5c0     E7 F0 03 F6 | 	mov	ptra, fp
2b5c4     F2 00 A0 FD | 	call	#popregs_
2b5c8                 | _sdmm_cc_wait_ready_0852_ret
2b5c8     2D 00 64 FD | 	ret
2b5cc                 | 
2b5cc                 | _sdmm_cc_deselect_0858
2b5cc     00 CA 05 F6 | 	mov	COUNT_, #0
2b5d0     E8 00 A0 FD | 	call	#pushregs_
2b5d4     F8 95 02 F6 | 	mov	arg02, ptra
2b5d8     04 64 06 F1 | 	add	objptr, #4
2b5dc     32 93 02 FB | 	rdlong	arg01, objptr
2b5e0     04 64 86 F1 | 	sub	objptr, #4
2b5e4     04 F0 07 F1 | 	add	ptra, #4
2b5e8     59 92 62 FD | 	drvh	arg01
2b5ec     1F 20 64 FD | 	waitx	#16
2b5f0     4A 93 02 F6 | 	mov	arg01, arg02
2b5f4     01 94 06 F6 | 	mov	arg02, #1
2b5f8     FC FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b5fc     E7 F0 03 F6 | 	mov	ptra, fp
2b600     F2 00 A0 FD | 	call	#popregs_
2b604                 | _sdmm_cc_deselect_0858_ret
2b604     2D 00 64 FD | 	ret
2b608                 | 
2b608                 | _sdmm_cc_select_0862
2b608     01 CA 05 F6 | 	mov	COUNT_, #1
2b60c     E8 00 A0 FD | 	call	#pushregs_
2b610     F8 95 02 F6 | 	mov	arg02, ptra
2b614     04 64 06 F1 | 	add	objptr, #4
2b618     32 93 02 FB | 	rdlong	arg01, objptr
2b61c     08 64 06 F1 | 	add	objptr, #8
2b620     32 A7 02 FB | 	rdlong	local01, objptr
2b624     0C 64 86 F1 | 	sub	objptr, #12
2b628     04 F0 07 F1 | 	add	ptra, #4
2b62c     50 A6 62 FD | 	fltl	local01
2b630     58 92 62 FD | 	drvl	arg01
2b634     1F 20 64 FD | 	waitx	#16
2b638     41 A6 62 FD | 	dirh	local01
2b63c     4A 93 02 F6 | 	mov	arg01, arg02
2b640     01 94 06 F6 | 	mov	arg02, #1
2b644     B0 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b648     2C FF BF FD | 	call	#_sdmm_cc_wait_ready_0852
2b64c     00 7A 0E F2 | 	cmp	result1, #0 wz
2b650     01 7A 06 56 |  if_ne	mov	result1, #1
2b654     08 00 90 5D |  if_ne	jmp	#LR__4470
2b658     70 FF BF FD | 	call	#_sdmm_cc_deselect_0858
2b65c                 | ' 
2b65c                 | ' 	deselect();
2b65c                 | ' 	return 0;
2b65c     00 7A 06 F6 | 	mov	result1, #0
2b660                 | LR__4470
2b660     E7 F0 03 F6 | 	mov	ptra, fp
2b664     F2 00 A0 FD | 	call	#popregs_
2b668                 | _sdmm_cc_select_0862_ret
2b668     2D 00 64 FD | 	ret
2b66c                 | 
2b66c                 | _sdmm_cc_rcvr_datablock_0866
2b66c     05 CA 05 F6 | 	mov	COUNT_, #5
2b670     E8 00 A0 FD | 	call	#pushregs_
2b674     49 A7 02 F6 | 	mov	local01, arg01
2b678     4A A9 02 F6 | 	mov	local02, arg02
2b67c     F8 AB 02 F6 | 	mov	local03, ptra
2b680     1A AC 62 FD | 	getct	local04
2b684     14 AE 06 FB | 	rdlong	local05, #20
2b688     03 AE 46 F0 | 	shr	local05, #3
2b68c                 | ' 	UINT tmr, tmout;
2b68c                 | ' 
2b68c                 | ' 	tmr = _cnt();
2b68c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2b68c                 | ' 	for(;;) {
2b68c     04 F0 07 F1 | 	add	ptra, #4
2b690                 | LR__4480
2b690     55 93 02 F6 | 	mov	arg01, local03
2b694     01 94 06 F6 | 	mov	arg02, #1
2b698     5C FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b69c     55 95 C2 FA | 	rdbyte	arg02, local03
2b6a0     FF 94 0E F2 | 	cmp	arg02, #255 wz
2b6a4     1A 7A 62 AD |  if_e	getct	result1
2b6a8     3D 95 02 A6 |  if_e	mov	arg02, result1
2b6ac     56 95 82 A1 |  if_e	sub	arg02, local04
2b6b0     57 95 12 A2 |  if_e	cmp	arg02, local05 wc
2b6b4     D8 FF 9F 8D |  if_c_and_z	jmp	#LR__4480
2b6b8     55 AF C2 FA | 	rdbyte	local05, local03
2b6bc     FE AE 0E F2 | 	cmp	local05, #254 wz
2b6c0     00 7A 06 56 |  if_ne	mov	result1, #0
2b6c4     1C 00 90 5D |  if_ne	jmp	#LR__4481
2b6c8     53 93 02 F6 | 	mov	arg01, local01
2b6cc     54 95 02 F6 | 	mov	arg02, local02
2b6d0     24 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b6d4     55 93 02 F6 | 	mov	arg01, local03
2b6d8     02 94 06 F6 | 	mov	arg02, #2
2b6dc     18 FE BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b6e0                 | ' 
2b6e0                 | ' 	rcvr_mmc(buff, btr);
2b6e0                 | ' 	rcvr_mmc(d, 2);
2b6e0                 | ' 
2b6e0                 | ' 	return 1;
2b6e0     01 7A 06 F6 | 	mov	result1, #1
2b6e4                 | LR__4481
2b6e4     E7 F0 03 F6 | 	mov	ptra, fp
2b6e8     F2 00 A0 FD | 	call	#popregs_
2b6ec                 | _sdmm_cc_rcvr_datablock_0866_ret
2b6ec     2D 00 64 FD | 	ret
2b6f0                 | 
2b6f0                 | _sdmm_cc_xmit_datablock_0868
2b6f0     03 CA 05 F6 | 	mov	COUNT_, #3
2b6f4     E8 00 A0 FD | 	call	#pushregs_
2b6f8     49 A7 02 F6 | 	mov	local01, arg01
2b6fc     4A A9 02 F6 | 	mov	local02, arg02
2b700     F8 AB 02 F6 | 	mov	local03, ptra
2b704     04 F0 07 F1 | 	add	ptra, #4
2b708     6C FE BF FD | 	call	#_sdmm_cc_wait_ready_0852
2b70c     00 7A 0E F2 | 	cmp	result1, #0 wz
2b710     00 7A 06 A6 |  if_e	mov	result1, #0
2b714     58 00 90 AD |  if_e	jmp	#LR__4491
2b718     55 A9 42 FC | 	wrbyte	local02, local03
2b71c     55 93 02 F6 | 	mov	arg01, local03
2b720     01 94 06 F6 | 	mov	arg02, #1
2b724     4C FD BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b728     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2b72c     FD A8 0E F2 | 	cmp	local02, #253 wz
2b730     38 00 90 AD |  if_e	jmp	#LR__4490
2b734     53 93 02 F6 | 	mov	arg01, local01
2b738     09 94 C6 F9 | 	decod	arg02, #9
2b73c     34 FD BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b740     55 93 02 F6 | 	mov	arg01, local03
2b744     02 94 06 F6 | 	mov	arg02, #2
2b748     AC FD BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b74c     55 93 02 F6 | 	mov	arg01, local03
2b750     01 94 06 F6 | 	mov	arg02, #1
2b754     A0 FD BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b758     55 AB C2 FA | 	rdbyte	local03, local03
2b75c     1F AA 06 F5 | 	and	local03, #31
2b760     05 AA 0E F2 | 	cmp	local03, #5 wz
2b764                 | ' 			return 0;
2b764     00 7A 06 56 |  if_ne	mov	result1, #0
2b768     04 00 90 5D |  if_ne	jmp	#LR__4491
2b76c                 | LR__4490
2b76c                 | ' 	}
2b76c                 | ' 
2b76c                 | ' 	return 1;
2b76c     01 7A 06 F6 | 	mov	result1, #1
2b770                 | LR__4491
2b770     E7 F0 03 F6 | 	mov	ptra, fp
2b774     F2 00 A0 FD | 	call	#popregs_
2b778                 | _sdmm_cc_xmit_datablock_0868_ret
2b778     2D 00 64 FD | 	ret
2b77c                 | 
2b77c                 | _sdmm_cc_send_cmd_0871
2b77c     04 CA 05 F6 | 	mov	COUNT_, #4
2b780     E8 00 A0 FD | 	call	#pushregs_
2b784                 | _sdmm_cc_send_cmd_0871_enter
2b784     49 A7 02 F6 | 	mov	local01, arg01
2b788     4A A9 02 F6 | 	mov	local02, arg02
2b78c     F8 AB 02 F6 | 	mov	local03, ptra
2b790     53 7B E2 F8 | 	getbyte	result1, local01, #0
2b794     80 7A CE F7 | 	test	result1, #128 wz
2b798     08 F0 07 F1 | 	add	ptra, #8
2b79c     20 00 90 AD |  if_e	jmp	#LR__4500
2b7a0     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2b7a4     7F A6 06 F5 | 	and	local01, #127
2b7a8     37 92 06 F6 | 	mov	arg01, #55
2b7ac     00 94 06 F6 | 	mov	arg02, #0
2b7b0     C8 FF BF FD | 	call	#_sdmm_cc_send_cmd_0871
2b7b4     3D 95 E2 F8 | 	getbyte	arg02, result1, #0
2b7b8     02 94 16 F2 | 	cmp	arg02, #2 wc
2b7bc     BC 00 90 3D |  if_ae	jmp	#LR__4503
2b7c0                 | LR__4500
2b7c0     53 7B E2 F8 | 	getbyte	result1, local01, #0
2b7c4     0C 7A 0E F2 | 	cmp	result1, #12 wz
2b7c8     14 00 90 AD |  if_e	jmp	#LR__4501
2b7cc     FC FD BF FD | 	call	#_sdmm_cc_deselect_0858
2b7d0     34 FE BF FD | 	call	#_sdmm_cc_select_0862
2b7d4     00 7A 0E F2 | 	cmp	result1, #0 wz
2b7d8     FF 7A 06 A6 |  if_e	mov	result1, #255
2b7dc     9C 00 90 AD |  if_e	jmp	#LR__4503
2b7e0                 | LR__4501
2b7e0     53 95 E2 F8 | 	getbyte	arg02, local01, #0
2b7e4     40 7A 06 F6 | 	mov	result1, #64
2b7e8     4A 7B 42 F5 | 	or	result1, arg02
2b7ec     55 7B 42 FC | 	wrbyte	result1, local03
2b7f0     55 95 02 F6 | 	mov	arg02, local03
2b7f4     01 94 06 F1 | 	add	arg02, #1
2b7f8     1B A8 FE F9 | 	movbyts	local02, #27
2b7fc     4A A9 62 FC | 	wrlong	local02, arg02
2b800     01 AC 06 F6 | 	mov	local04, #1
2b804     53 A9 02 F6 | 	mov	local02, local01
2b808     07 A8 4E F7 | 	zerox	local02, #7 wz
2b80c     95 AC 06 A6 |  if_e	mov	local04, #149
2b810     53 A9 E2 F8 | 	getbyte	local02, local01, #0
2b814     08 A8 0E F2 | 	cmp	local02, #8 wz
2b818     87 AC 06 A6 |  if_e	mov	local04, #135
2b81c     05 AA 06 F1 | 	add	local03, #5
2b820     55 AD 42 FC | 	wrbyte	local04, local03
2b824     05 AA 86 F1 | 	sub	local03, #5
2b828     55 93 02 F6 | 	mov	arg01, local03
2b82c     06 94 06 F6 | 	mov	arg02, #6
2b830     40 FC BF FD | 	call	#_sdmm_cc_xmit_mmc_0841
2b834     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2b838     0C A6 0E F2 | 	cmp	local01, #12 wz
2b83c     55 93 02 A6 |  if_e	mov	arg01, local03
2b840     06 92 06 A1 |  if_e	add	arg01, #6
2b844     01 94 06 A6 |  if_e	mov	arg02, #1
2b848     AC FC BF AD |  if_e	call	#_sdmm_cc_rcvr_mmc_0848
2b84c     0A AC 06 F6 | 	mov	local04, #10
2b850                 | ' 	n = 10;
2b850                 | ' 	do
2b850                 | LR__4502
2b850     55 93 02 F6 | 	mov	arg01, local03
2b854     06 92 06 F1 | 	add	arg01, #6
2b858     01 94 06 F6 | 	mov	arg02, #1
2b85c     98 FC BF FD | 	call	#_sdmm_cc_rcvr_mmc_0848
2b860     06 AA 06 F1 | 	add	local03, #6
2b864     55 A9 C2 FA | 	rdbyte	local02, local03
2b868     06 AA 86 F1 | 	sub	local03, #6
2b86c     80 A8 CE F7 | 	test	local02, #128 wz
2b870     F7 AD 6E 5B |  if_ne	djnz	local04, #LR__4502
2b874                 | ' 
2b874                 | ' 	return buf[6];
2b874     06 AA 06 F1 | 	add	local03, #6
2b878     55 7B C2 FA | 	rdbyte	result1, local03
2b87c                 | LR__4503
2b87c     E7 F0 03 F6 | 	mov	ptra, fp
2b880     F2 00 A0 FD | 	call	#popregs_
2b884                 | _sdmm_cc_send_cmd_0871_ret
2b884     2D 00 64 FD | 	ret
2b888                 | 
2b888                 | _sdmm_cc_disk_setpins
2b888     00 92 0E F2 | 	cmp	arg01, #0 wz
2b88c     01 7A 66 56 |  if_ne	neg	result1, #1
2b890     24 00 90 5D |  if_ne	jmp	#_sdmm_cc_disk_setpins_ret
2b894     32 95 62 FC | 	wrlong	arg02, objptr
2b898     04 64 06 F1 | 	add	objptr, #4
2b89c     32 97 62 FC | 	wrlong	arg03, objptr
2b8a0     04 64 06 F1 | 	add	objptr, #4
2b8a4     32 99 62 FC | 	wrlong	arg04, objptr
2b8a8     04 64 06 F1 | 	add	objptr, #4
2b8ac     32 9B 62 FC | 	wrlong	arg05, objptr
2b8b0     0C 64 86 F1 | 	sub	objptr, #12
2b8b4                 | '     _pin_clk = pclk;
2b8b4                 | '     _pin_ss = pss;
2b8b4                 | '     _pin_di = pdi;
2b8b4                 | '     _pin_do = pdo;
2b8b4                 | ' #line 848 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b8b4                 | '     return 0;
2b8b4     00 7A 06 F6 | 	mov	result1, #0
2b8b8                 | _sdmm_cc_disk_setpins_ret
2b8b8     2D 00 64 FD | 	ret
2b8bc                 | 
2b8bc                 | _sdmm_cc_disk_deinitialize
2b8bc     04 CA 05 F6 | 	mov	COUNT_, #4
2b8c0     E8 00 A0 FD | 	call	#pushregs_
2b8c4     00 92 4E F2 | 	cmps	arg01, #0 wz
2b8c8     32 A7 02 FB | 	rdlong	local01, objptr
2b8cc     04 64 06 F1 | 	add	objptr, #4
2b8d0     32 A9 02 FB | 	rdlong	local02, objptr
2b8d4     04 64 06 F1 | 	add	objptr, #4
2b8d8     32 AB 02 FB | 	rdlong	local03, objptr
2b8dc     08 64 06 F1 | 	add	objptr, #8
2b8e0     32 AD 02 FB | 	rdlong	local04, objptr
2b8e4     04 64 86 F1 | 	sub	objptr, #4
2b8e8     32 93 02 FB | 	rdlong	arg01, objptr
2b8ec     0C 64 86 F1 | 	sub	objptr, #12
2b8f0                 | ' #line 865 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b8f0                 | '         return RES_NOTRDY;
2b8f0     03 7A 06 56 |  if_ne	mov	result1, #3
2b8f4     34 00 90 5D |  if_ne	jmp	#LR__4510
2b8f8     50 92 62 FD | 	fltl	arg01
2b8fc     49 01 08 FC | 	wrpin	#0, arg01
2b900     50 AC 62 FD | 	fltl	local04
2b904     56 01 08 FC | 	wrpin	#0, local04
2b908     50 AA 62 FD | 	fltl	local03
2b90c     55 01 08 FC | 	wrpin	#0, local03
2b910     50 A6 62 FD | 	fltl	local01
2b914     53 01 08 FC | 	wrpin	#0, local01
2b918     50 A8 62 FD | 	fltl	local02
2b91c     54 01 08 FC | 	wrpin	#0, local02
2b920     0A 92 06 F6 | 	mov	arg01, #10
2b924     A8 93 BF FD | 	call	#__system___waitms
2b928                 | '     }
2b928                 | ' #line 871 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/block/sdmm.cc"
2b928                 | '     _pinclear(SMPIN_DO);
2b928                 | '     _pinclear(PIN_DO);
2b928                 | '     _pinclear(PIN_DI);
2b928                 | '     _pinclear(PIN_CLK);
2b928                 | '     _pinclear(PIN_SS);
2b928                 | ' 
2b928                 | '     _waitms(10);
2b928                 | ' 
2b928                 | '     return 0;
2b928     00 7A 06 F6 | 	mov	result1, #0
2b92c                 | LR__4510
2b92c     E7 F0 03 F6 | 	mov	ptra, fp
2b930     F2 00 A0 FD | 	call	#popregs_
2b934                 | _sdmm_cc_disk_deinitialize_ret
2b934     2D 00 64 FD | 	ret
2b938                 | 
2b938                 | _sdmm_cc_v_do_io
2b938     08 CA 05 F6 | 	mov	COUNT_, #8
2b93c     E8 00 A0 FD | 	call	#pushregs_
2b940     4B A7 02 F6 | 	mov	local01, arg03
2b944     4C A9 02 F6 | 	mov	local02, arg04
2b948     4A AB 02 F6 | 	mov	local03, arg02
2b94c     18 64 06 F1 | 	add	objptr, #24
2b950     32 AD 02 FB | 	rdlong	local04, objptr
2b954     00 98 06 F6 | 	mov	arg04, #0
2b958     FF AD 06 F5 | 	and	local04, #511
2b95c     00 AE 06 F6 | 	mov	local05, #0
2b960     32 93 02 FB | 	rdlong	arg01, objptr
2b964     04 64 06 F1 | 	add	objptr, #4
2b968     32 95 02 FB | 	rdlong	arg02, objptr
2b96c     1C 64 86 F1 | 	sub	objptr, #28
2b970     09 96 06 F6 | 	mov	arg03, #9
2b974     7C B2 BF FD | 	call	#__system___int64_sar
2b978     3D B1 02 F6 | 	mov	local06, result1
2b97c     00 AC 0E F2 | 	cmp	local04, #0 wz
2b980                 | ' 
2b980                 | ' 
2b980                 | '         return -1;
2b980     01 7A 66 56 |  if_ne	neg	result1, #1
2b984     84 00 90 5D |  if_ne	jmp	#LR__4523
2b988     53 B3 02 F6 | 	mov	local07, local01
2b98c     09 B2 46 F0 | 	shr	local07, #9
2b990     00 A8 0E F2 | 	cmp	local02, #0 wz
2b994     1C 00 90 AD |  if_e	jmp	#LR__4520
2b998     00 92 06 F6 | 	mov	arg01, #0
2b99c     55 95 02 F6 | 	mov	arg02, local03
2b9a0     58 97 02 F6 | 	mov	arg03, local06
2b9a4     59 99 02 F6 | 	mov	arg04, local07
2b9a8     88 F8 BF FD | 	call	#_sdmm_cc_disk_write
2b9ac     3D B5 02 F6 | 	mov	local08, result1
2b9b0     18 00 90 FD | 	jmp	#LR__4521
2b9b4                 | LR__4520
2b9b4     00 92 06 F6 | 	mov	arg01, #0
2b9b8     55 95 02 F6 | 	mov	arg02, local03
2b9bc     58 97 02 F6 | 	mov	arg03, local06
2b9c0     59 99 02 F6 | 	mov	arg04, local07
2b9c4     AC F7 BF FD | 	call	#_sdmm_cc_disk_read
2b9c8     3D B5 02 F6 | 	mov	local08, result1
2b9cc                 | LR__4521
2b9cc     00 B4 0E F2 | 	cmp	local08, #0 wz
2b9d0     34 00 90 5D |  if_ne	jmp	#LR__4522
2b9d4     09 B2 66 F0 | 	shl	local07, #9
2b9d8     59 AF 02 F1 | 	add	local05, local07
2b9dc     18 64 06 F1 | 	add	objptr, #24
2b9e0     32 7B 02 FB | 	rdlong	result1, objptr
2b9e4     04 64 06 F1 | 	add	objptr, #4
2b9e8     32 7D 02 FB | 	rdlong	result2, objptr
2b9ec     59 7B 12 F1 | 	add	result1, local07 wc
2b9f0     00 7C 26 F1 | 	addx	result2, #0
2b9f4     04 64 86 F1 | 	sub	objptr, #4
2b9f8     32 7B 62 FC | 	wrlong	result1, objptr
2b9fc     04 64 06 F1 | 	add	objptr, #4
2ba00     32 7D 62 FC | 	wrlong	result2, objptr
2ba04     1C 64 86 F1 | 	sub	objptr, #28
2ba08                 | LR__4522
2ba08                 | ' 
2ba08                 | ' 
2ba08                 | '     }
2ba08                 | '     return bytes_io;
2ba08     57 7B 02 F6 | 	mov	result1, local05
2ba0c                 | LR__4523
2ba0c     E7 F0 03 F6 | 	mov	ptra, fp
2ba10     F2 00 A0 FD | 	call	#popregs_
2ba14                 | _sdmm_cc_v_do_io_ret
2ba14     2D 00 64 FD | 	ret
2ba18                 | 
2ba18                 | _sdmm_cc_v_read
2ba18                 | ' {
2ba18                 | '     return v_do_io(fil, buf, count,  (0) );
2ba18     00 98 06 F6 | 	mov	arg04, #0
2ba1c     18 FF BF FD | 	call	#_sdmm_cc_v_do_io
2ba20                 | _sdmm_cc_v_read_ret
2ba20     2D 00 64 FD | 	ret
2ba24                 | 
2ba24                 | _sdmm_cc_v_write
2ba24                 | ' {
2ba24                 | '     return v_do_io(fil, buf, count,  (1) );
2ba24     01 98 06 F6 | 	mov	arg04, #1
2ba28     0C FF BF FD | 	call	#_sdmm_cc_v_do_io
2ba2c                 | _sdmm_cc_v_write_ret
2ba2c     2D 00 64 FD | 	ret
2ba30                 | 
2ba30                 | _sdmm_cc_v_ioctl
2ba30     00 92 06 F6 | 	mov	arg01, #0
2ba34     04 F9 BF FD | 	call	#_sdmm_cc_disk_ioctl
2ba38     00 7A 0E F2 | 	cmp	result1, #0 wz
2ba3c                 | '         return _seterror( 10 );
2ba3c     20 68 06 51 |  if_ne	add	ptr___system__dat__, #32
2ba40     34 15 68 5C |  if_ne	wrlong	#10, ptr___system__dat__
2ba44     20 68 86 51 |  if_ne	sub	ptr___system__dat__, #32
2ba48     01 7A 66 56 |  if_ne	neg	result1, #1
2ba4c                 | '     return 0;
2ba4c     00 7A 06 A6 |  if_e	mov	result1, #0
2ba50                 | _sdmm_cc_v_ioctl_ret
2ba50     2D 00 64 FD | 	ret
2ba54                 | 
2ba54                 | _sdmm_cc_v_lseek
2ba54     4A 81 02 F6 | 	mov	_var01, arg02
2ba58     4C 85 0A F6 | 	mov	_var03, arg04 wz
2ba5c     1C 00 90 5D |  if_ne	jmp	#LR__4530
2ba60     4B 85 02 F6 | 	mov	_var03, arg03
2ba64     18 64 06 F1 | 	add	objptr, #24
2ba68     32 81 62 FC | 	wrlong	_var01, objptr
2ba6c     04 64 06 F1 | 	add	objptr, #4
2ba70     32 85 62 FC | 	wrlong	_var03, objptr
2ba74     1C 64 86 F1 | 	sub	objptr, #28
2ba78     64 00 90 FD | 	jmp	#LR__4533
2ba7c                 | LR__4530
2ba7c     01 84 0E F2 | 	cmp	_var03, #1 wz
2ba80     30 00 90 5D |  if_ne	jmp	#LR__4531
2ba84     18 64 06 F1 | 	add	objptr, #24
2ba88     32 7B 02 FB | 	rdlong	result1, objptr
2ba8c     04 64 06 F1 | 	add	objptr, #4
2ba90     32 7D 02 FB | 	rdlong	result2, objptr
2ba94     40 7B 12 F1 | 	add	result1, _var01 wc
2ba98     4B 7D 22 F1 | 	addx	result2, arg03
2ba9c     04 64 86 F1 | 	sub	objptr, #4
2baa0     32 7B 62 FC | 	wrlong	result1, objptr
2baa4     04 64 06 F1 | 	add	objptr, #4
2baa8     32 7D 62 FC | 	wrlong	result2, objptr
2baac     1C 64 86 F1 | 	sub	objptr, #28
2bab0     2C 00 90 FD | 	jmp	#LR__4532
2bab4                 | LR__4531
2bab4     40 7B 22 F6 | 	not	result1, _var01
2bab8     01 7A 0E F1 | 	add	result1, #1 wz
2babc     4B 7D 22 F6 | 	not	result2, arg03
2bac0     00 94 06 F6 | 	mov	arg02, #0
2bac4     01 94 66 A6 |  if_e	neg	arg02, #1
2bac8     4A 7D 82 F1 | 	sub	result2, arg02
2bacc     18 64 06 F1 | 	add	objptr, #24
2bad0     32 7B 62 FC | 	wrlong	result1, objptr
2bad4     04 64 06 F1 | 	add	objptr, #4
2bad8     32 7D 62 FC | 	wrlong	result2, objptr
2badc     1C 64 86 F1 | 	sub	objptr, #28
2bae0                 | LR__4532
2bae0                 | LR__4533
2bae0                 | '         curpos = -off;
2bae0                 | '     }
2bae0                 | '     return curpos;
2bae0     18 64 06 F1 | 	add	objptr, #24
2bae4     32 7B 02 FB | 	rdlong	result1, objptr
2bae8     04 64 06 F1 | 	add	objptr, #4
2baec     32 7D 02 FB | 	rdlong	result2, objptr
2baf0     1C 64 86 F1 | 	sub	objptr, #28
2baf4                 | _sdmm_cc_v_lseek_ret
2baf4     2D 00 64 FD | 	ret
2baf8                 | 
2baf8                 | _sdmm_cc_v_flush
2baf8                 | ' {
2baf8                 | '     return 0;
2baf8     00 7A 06 F6 | 	mov	result1, #0
2bafc                 | _sdmm_cc_v_flush_ret
2bafc     2D 00 64 FD | 	ret
2bb00                 | 
2bb00                 | _sdmm_cc_v_close
2bb00     00 92 06 F6 | 	mov	arg01, #0
2bb04     B4 FD BF FD | 	call	#_sdmm_cc_disk_deinitialize
2bb08     20 64 06 F1 | 	add	objptr, #32
2bb0c     32 93 02 FB | 	rdlong	arg01, objptr
2bb10     04 64 06 F1 | 	add	objptr, #4
2bb14     32 95 02 FB | 	rdlong	arg02, objptr
2bb18     24 64 86 F1 | 	sub	objptr, #36
2bb1c     60 B1 BF FD | 	call	#__system___freepins
2bb20                 | ' {
2bb20                 | '     disk_deinitialize(0);
2bb20                 | '     _freepins(f_pinmask);
2bb20                 | '     return 0;
2bb20     00 7A 06 F6 | 	mov	result1, #0
2bb24                 | _sdmm_cc_v_close_ret
2bb24     2D 00 64 FD | 	ret
2bb28                 | 
2bb28                 | _sdmm_cc_v_putc
2bb28     00 CA 05 F6 | 	mov	COUNT_, #0
2bb2c     E8 00 A0 FD | 	call	#pushregs_
2bb30     0C F0 07 F1 | 	add	ptra, #12
2bb34     04 CE 05 F1 | 	add	fp, #4
2bb38     E7 92 62 FC | 	wrlong	arg01, fp
2bb3c     4A 93 02 F6 | 	mov	arg01, arg02
2bb40     E7 94 02 F6 | 	mov	arg02, fp
2bb44     01 96 06 F6 | 	mov	arg03, #1
2bb48     04 CE 85 F1 | 	sub	fp, #4
2bb4c                 | ' {
2bb4c                 | '     return v_do_io(fil, buf, count,  (1) );
2bb4c     01 98 06 F6 | 	mov	arg04, #1
2bb50     E4 FD BF FD | 	call	#_sdmm_cc_v_do_io
2bb54     01 7A 0E F2 | 	cmp	result1, #1 wz
2bb58     04 CE 05 A1 |  if_e	add	fp, #4
2bb5c     E7 7A 02 AB |  if_e	rdlong	result1, fp
2bb60     04 CE 85 A1 |  if_e	sub	fp, #4
2bb64                 | '     return -1;
2bb64     01 7A 66 56 |  if_ne	neg	result1, #1
2bb68     E7 F0 03 F6 | 	mov	ptra, fp
2bb6c     F2 00 A0 FD | 	call	#popregs_
2bb70                 | _sdmm_cc_v_putc_ret
2bb70     2D 00 64 FD | 	ret
2bb74                 | 
2bb74                 | _sdmm_cc_v_getc
2bb74     00 CA 05 F6 | 	mov	COUNT_, #0
2bb78     E8 00 A0 FD | 	call	#pushregs_
2bb7c     0C F0 07 F1 | 	add	ptra, #12
2bb80     08 CE 05 F1 | 	add	fp, #8
2bb84     E7 00 68 FC | 	wrlong	#0, fp
2bb88     E7 94 02 F6 | 	mov	arg02, fp
2bb8c     08 CE 85 F1 | 	sub	fp, #8
2bb90     01 96 06 F6 | 	mov	arg03, #1
2bb94                 | ' {
2bb94                 | '     return v_do_io(fil, buf, count,  (0) );
2bb94     00 98 06 F6 | 	mov	arg04, #0
2bb98     9C FD BF FD | 	call	#_sdmm_cc_v_do_io
2bb9c     01 7A 0E F2 | 	cmp	result1, #1 wz
2bba0     08 CE 05 A1 |  if_e	add	fp, #8
2bba4     E7 7A 02 AB |  if_e	rdlong	result1, fp
2bba8     08 CE 85 A1 |  if_e	sub	fp, #8
2bbac                 | '     return -1;
2bbac     01 7A 66 56 |  if_ne	neg	result1, #1
2bbb0     E7 F0 03 F6 | 	mov	ptra, fp
2bbb4     F2 00 A0 FD | 	call	#popregs_
2bbb8                 | _sdmm_cc_v_getc_ret
2bbb8     2D 00 64 FD | 	ret
2bbbc                 | 
2bbbc                 | _fatfs_cc_ff_uni2oem
2bbbc     00 80 06 F6 | 	mov	_var01, #0
2bbc0     80 92 16 F2 | 	cmp	arg01, #128 wc
2bbc4     49 81 02 C6 |  if_b	mov	_var01, arg01
2bbc8     58 00 90 CD |  if_b	jmp	#LR__4544
2bbcc     80 00 00 FF 
2bbd0     00 92 16 F2 | 	cmp	arg01, ##65536 wc
2bbd4     4C 00 90 3D |  if_ae	jmp	#LR__4543
2bbd8     4A 7B 32 F9 | 	getword	result1, arg02, #0
2bbdc     01 00 00 FF 
2bbe0     52 7B 0E F2 | 	cmp	result1, ##850 wz
2bbe4     3C 00 90 5D |  if_ne	jmp	#LR__4543
2bbe8                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2bbe8     00 80 06 F6 | 	mov	_var01, #0
2bbec     D7 14 48 FB | 	callpa	#(@LR__4541-@LR__4540)>>2,fcache_load_ptr_
2bbf0                 | LR__4540
2bbf0     40 7B 32 F9 | 	getword	result1, _var01, #0
2bbf4     80 7A 16 F2 | 	cmp	result1, #128 wc
2bbf8     1C 00 90 3D |  if_ae	jmp	#LR__4542
2bbfc     40 7B 32 F9 | 	getword	result1, _var01, #0
2bc00     01 7A 66 F0 | 	shl	result1, #1
2bc04     36 7B 02 F1 | 	add	result1, ptr__fatfs_cc_dat__
2bc08     3D 7B E2 FA | 	rdword	result1, result1
2bc0c     3D 93 0A F2 | 	cmp	arg01, result1 wz
2bc10     01 80 06 51 |  if_ne	add	_var01, #1
2bc14     D8 FF 9F 5D |  if_ne	jmp	#LR__4540
2bc18                 | LR__4541
2bc18                 | LR__4542
2bc18     40 81 32 F9 | 	getword	_var01, _var01, #0
2bc1c     80 80 06 F1 | 	add	_var01, #128
2bc20     40 81 E2 F8 | 	getbyte	_var01, _var01, #0
2bc24                 | LR__4543
2bc24                 | LR__4544
2bc24                 | ' 			c = (c + 0x80) & 0xFF;
2bc24                 | ' 		}
2bc24                 | ' 	}
2bc24                 | ' 
2bc24                 | ' 	return c;
2bc24     40 7B 02 F6 | 	mov	result1, _var01
2bc28                 | _fatfs_cc_ff_uni2oem_ret
2bc28     2D 00 64 FD | 	ret
2bc2c                 | 
2bc2c                 | _fatfs_cc_ff_oem2uni
2bc2c     00 80 06 F6 | 	mov	_var01, #0
2bc30     49 7B 32 F9 | 	getword	result1, arg01, #0
2bc34     80 7A 16 F2 | 	cmp	result1, #128 wc
2bc38     49 81 02 C6 |  if_b	mov	_var01, arg01
2bc3c     2C 00 90 CD |  if_b	jmp	#LR__4551
2bc40     4A 95 32 F9 | 	getword	arg02, arg02, #0
2bc44     01 00 00 FF 
2bc48     52 95 0E F2 | 	cmp	arg02, ##850 wz
2bc4c     1C 00 90 5D |  if_ne	jmp	#LR__4550
2bc50     49 7B 32 F9 | 	getword	result1, arg01, #0
2bc54     00 7B 16 F2 | 	cmp	result1, #256 wc
2bc58     49 93 32 C9 |  if_b	getword	arg01, arg01, #0
2bc5c     80 92 86 C1 |  if_b	sub	arg01, #128
2bc60     01 92 66 C0 |  if_b	shl	arg01, #1
2bc64     36 93 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2bc68     49 81 E2 CA |  if_b	rdword	_var01, arg01
2bc6c                 | LR__4550
2bc6c                 | LR__4551
2bc6c                 | ' 		}
2bc6c                 | ' 	}
2bc6c                 | ' 
2bc6c                 | ' 	return c;
2bc6c     40 7B 02 F6 | 	mov	result1, _var01
2bc70                 | _fatfs_cc_ff_oem2uni_ret
2bc70     2D 00 64 FD | 	ret
2bc74                 | 
2bc74                 | _fatfs_cc_ff_wtoupper
2bc74     49 81 02 F6 | 	mov	_var01, arg01
2bc78     80 00 00 FF 
2bc7c     00 80 16 F2 | 	cmp	_var01, ##65536 wc
2bc80     58 01 90 3D |  if_ae	jmp	#LR__4573
2bc84     40 83 02 F6 | 	mov	_var02, _var01
2bc88     41 81 32 F9 | 	getword	_var01, _var02, #0
2bc8c     08 00 00 FF 
2bc90     00 80 16 F2 | 	cmp	_var01, ##4096 wc
2bc94     36 85 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2bc98     00 85 06 C1 |  if_b	add	_var03, #256
2bc9c     36 85 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2bca0     01 00 00 3F 
2bca4     F2 84 06 31 |  if_ae	add	_var03, ##754
2bca8     42 87 02 F6 | 	mov	_var04, _var03
2bcac                 | ' 		uc = (WORD)uni;
2bcac                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2bcac                 | ' 		for (;;) {
2bcac                 | LR__4560
2bcac     43 89 E2 FA | 	rdword	_var05, _var04
2bcb0     44 85 02 F6 | 	mov	_var03, _var05
2bcb4     0F 84 4E F7 | 	zerox	_var03, #15 wz
2bcb8     02 86 06 F1 | 	add	_var04, #2
2bcbc     18 01 90 AD |  if_e	jmp	#LR__4572
2bcc0     41 85 32 F9 | 	getword	_var03, _var02, #0
2bcc4     44 81 32 F9 | 	getword	_var01, _var05, #0
2bcc8     40 85 12 F2 | 	cmp	_var03, _var01 wc
2bccc     08 01 90 CD |  if_b	jmp	#LR__4572
2bcd0     43 8B E2 FA | 	rdword	_var06, _var04
2bcd4     45 8D 32 F9 | 	getword	_var07, _var06, #0
2bcd8     08 8C 46 F0 | 	shr	_var07, #8
2bcdc     45 8B 32 F9 | 	getword	_var06, _var06, #0
2bce0     45 8B E2 F8 | 	getbyte	_var06, _var06, #0
2bce4     41 85 32 F9 | 	getword	_var03, _var02, #0
2bce8     44 8F 32 F9 | 	getword	_var08, _var05, #0
2bcec     45 81 32 F9 | 	getword	_var01, _var06, #0
2bcf0     40 8F 02 F1 | 	add	_var08, _var01
2bcf4     47 85 52 F2 | 	cmps	_var03, _var08 wc
2bcf8     02 86 06 F1 | 	add	_var04, #2
2bcfc     C4 00 90 3D |  if_ae	jmp	#LR__4571
2bd00                 | ' 				switch (cmd) {
2bd00     46 91 32 F9 | 	getword	_var09, _var07, #0
2bd04     09 90 26 F3 | 	fle	_var09, #9
2bd08     30 90 62 FD | 	jmprel	_var09
2bd0c                 | LR__4561
2bd0c     24 00 90 FD | 	jmp	#LR__4562
2bd10     3C 00 90 FD | 	jmp	#LR__4563
2bd14     54 00 90 FD | 	jmp	#LR__4564
2bd18     5C 00 90 FD | 	jmp	#LR__4565
2bd1c     64 00 90 FD | 	jmp	#LR__4566
2bd20     6C 00 90 FD | 	jmp	#LR__4567
2bd24     74 00 90 FD | 	jmp	#LR__4568
2bd28     7C 00 90 FD | 	jmp	#LR__4569
2bd2c     84 00 90 FD | 	jmp	#LR__4570
2bd30     A4 00 90 FD | 	jmp	#LR__4572
2bd34                 | LR__4562
2bd34     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd38     44 89 32 F9 | 	getword	_var05, _var05, #0
2bd3c     44 83 82 F1 | 	sub	_var02, _var05
2bd40     01 82 66 F0 | 	shl	_var02, #1
2bd44     43 83 02 F1 | 	add	_var02, _var04
2bd48     41 83 E2 FA | 	rdword	_var02, _var02
2bd4c     88 00 90 FD | 	jmp	#LR__4572
2bd50                 | LR__4563
2bd50     41 85 32 F9 | 	getword	_var03, _var02, #0
2bd54     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd58     44 89 32 F9 | 	getword	_var05, _var05, #0
2bd5c     44 83 82 F1 | 	sub	_var02, _var05
2bd60     01 82 06 F5 | 	and	_var02, #1
2bd64     42 83 C2 F2 | 	subr	_var02, _var03
2bd68     6C 00 90 FD | 	jmp	#LR__4572
2bd6c                 | LR__4564
2bd6c     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd70     10 82 86 F1 | 	sub	_var02, #16
2bd74     60 00 90 FD | 	jmp	#LR__4572
2bd78                 | LR__4565
2bd78     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd7c     20 82 86 F1 | 	sub	_var02, #32
2bd80     54 00 90 FD | 	jmp	#LR__4572
2bd84                 | LR__4566
2bd84     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd88     30 82 86 F1 | 	sub	_var02, #48
2bd8c     48 00 90 FD | 	jmp	#LR__4572
2bd90                 | LR__4567
2bd90     41 83 32 F9 | 	getword	_var02, _var02, #0
2bd94     1A 82 86 F1 | 	sub	_var02, #26
2bd98     3C 00 90 FD | 	jmp	#LR__4572
2bd9c                 | LR__4568
2bd9c     41 83 32 F9 | 	getword	_var02, _var02, #0
2bda0     08 82 06 F1 | 	add	_var02, #8
2bda4     30 00 90 FD | 	jmp	#LR__4572
2bda8                 | LR__4569
2bda8     41 83 32 F9 | 	getword	_var02, _var02, #0
2bdac     50 82 86 F1 | 	sub	_var02, #80
2bdb0     24 00 90 FD | 	jmp	#LR__4572
2bdb4                 | LR__4570
2bdb4     41 83 32 F9 | 	getword	_var02, _var02, #0
2bdb8     0E 00 00 FF 
2bdbc     60 82 86 F1 | 	sub	_var02, ##7264
2bdc0                 | ' 				}
2bdc0                 | ' 				break;
2bdc0     14 00 90 FD | 	jmp	#LR__4572
2bdc4                 | LR__4571
2bdc4     0F 8C 4E F7 | 	zerox	_var07, #15 wz
2bdc8     45 8B 32 A9 |  if_e	getword	_var06, _var06, #0
2bdcc     01 8A 66 A0 |  if_e	shl	_var06, #1
2bdd0     45 87 02 A1 |  if_e	add	_var04, _var06
2bdd4     D4 FE 9F FD | 	jmp	#LR__4560
2bdd8                 | LR__4572
2bdd8     41 81 32 F9 | 	getword	_var01, _var02, #0
2bddc                 | LR__4573
2bddc                 | ' 		}
2bddc                 | ' 		uni = uc;
2bddc                 | ' 	}
2bddc                 | ' 
2bddc                 | ' 	return uni;
2bddc     40 7B 02 F6 | 	mov	result1, _var01
2bde0                 | _fatfs_cc_ff_wtoupper_ret
2bde0     2D 00 64 FD | 	ret
2bde4                 | 
2bde4                 | _fatfs_cc_strncpy
2bde4     49 81 02 F6 | 	mov	_var01, arg01
2bde8     D7 18 48 FB | 	callpa	#(@LR__4581-@LR__4580)>>2,fcache_load_ptr_
2bdec                 | ' 
2bdec                 | ' 	dscan = dst;
2bdec                 | ' 	sscan = src;
2bdec                 | ' 	count = n;
2bdec                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2bdec                 | LR__4580
2bdec     01 96 86 F1 | 	sub	arg03, #1
2bdf0     00 96 56 F2 | 	cmps	arg03, #0 wc
2bdf4     24 00 90 CD |  if_b	jmp	#LR__4582
2bdf8     4A 7B 02 F6 | 	mov	result1, arg02
2bdfc     01 7A 06 F1 | 	add	result1, #1
2be00     4A 83 C2 FA | 	rdbyte	_var02, arg02
2be04     3D 95 02 F6 | 	mov	arg02, result1
2be08     40 83 42 FC | 	wrbyte	_var02, _var01
2be0c     41 83 E2 F8 | 	getbyte	_var02, _var02, #0
2be10     07 82 4E F7 | 	zerox	_var02, #7 wz
2be14                 | ' 		continue;
2be14     01 80 06 F1 | 	add	_var01, #1
2be18     D0 FF 9F 5D |  if_ne	jmp	#LR__4580
2be1c                 | LR__4581
2be1c                 | LR__4582
2be1c     D7 0C 48 FB | 	callpa	#(@LR__4584-@LR__4583)>>2,fcache_load_ptr_
2be20                 | ' 	while (--count >= 0)
2be20                 | LR__4583
2be20     01 96 86 F1 | 	sub	arg03, #1
2be24     00 96 56 F2 | 	cmps	arg03, #0 wc
2be28     40 85 02 36 |  if_ae	mov	_var03, _var01
2be2c     01 80 06 31 |  if_ae	add	_var01, #1
2be30     42 01 48 3C |  if_ae	wrbyte	#0, _var03
2be34     E8 FF 9F 3D |  if_ae	jmp	#LR__4583
2be38                 | LR__4584
2be38                 | ' 		*dscan++ = '\0';
2be38                 | ' 	return(dst);
2be38     49 7B 02 F6 | 	mov	result1, arg01
2be3c                 | _fatfs_cc_strncpy_ret
2be3c     2D 00 64 FD | 	ret
2be40                 | 
2be40                 | _fatfs_cc_memcmp
2be40                 | ' 	for (n = size; n > 0; n--)
2be40     00 96 0E F2 | 	cmp	arg03, #0 wz
2be44     28 00 90 AD |  if_e	jmp	#LR__4591
2be48                 | LR__4590
2be48     49 81 C2 FA | 	rdbyte	_var01, arg01
2be4c     4A 83 C2 FA | 	rdbyte	_var02, arg02
2be50     41 81 0A F2 | 	cmp	_var01, _var02 wz
2be54     01 92 06 A1 |  if_e	add	arg01, #1
2be58     01 94 06 A1 |  if_e	add	arg02, #1
2be5c                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2be5c     49 7B C2 5A |  if_ne	rdbyte	result1, arg01
2be60     4A 83 C2 5A |  if_ne	rdbyte	_var02, arg02
2be64     41 7B 82 51 |  if_ne	sub	result1, _var02
2be68     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2be6c     F6 97 6E FB | 	djnz	arg03, #LR__4590
2be70                 | LR__4591
2be70                 | ' 
2be70                 | ' 	return(0);
2be70     00 7A 06 F6 | 	mov	result1, #0
2be74                 | _fatfs_cc_memcmp_ret
2be74     2D 00 64 FD | 	ret
2be78                 | 
2be78                 | _fatfs_cc_strncmp
2be78     49 81 0A F6 | 	mov	_var01, arg01 wz
2be7c     14 00 90 5D |  if_ne	jmp	#LR__4600
2be80                 | ' 		return scan2 ? -1 : 0;
2be80     00 94 0E F2 | 	cmp	arg02, #0 wz
2be84     01 82 66 56 |  if_ne	neg	_var02, #1
2be88     00 82 06 A6 |  if_e	mov	_var02, #0
2be8c     41 7B 02 F6 | 	mov	result1, _var02
2be90     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2be94                 | LR__4600
2be94     00 94 0E F2 | 	cmp	arg02, #0 wz
2be98     01 7A 06 A6 |  if_e	mov	result1, #1
2be9c     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2bea0     4B 85 02 F6 | 	mov	_var03, arg03
2bea4     D7 16 48 FB | 	callpa	#(@LR__4602-@LR__4601)>>2,fcache_load_ptr_
2bea8                 | ' 	count = n;
2bea8                 | ' 	do {
2bea8                 | LR__4601
2bea8     40 87 C2 FA | 	rdbyte	_var04, _var01
2beac     4A 89 02 F6 | 	mov	_var05, arg02
2beb0     44 8B C2 FA | 	rdbyte	_var06, _var05
2beb4     01 84 86 F1 | 	sub	_var03, #1
2beb8     00 84 56 F2 | 	cmps	_var03, #0 wc
2bebc     01 80 06 F1 | 	add	_var01, #1
2bec0     01 94 06 F1 | 	add	arg02, #1
2bec4     00 86 0E 32 |  if_ae	cmp	_var04, #0 wz
2bec8     08 00 90 2D |  if_nc_and_z	jmp	#LR__4603
2becc     45 87 0A 32 |  if_ae	cmp	_var04, _var06 wz
2bed0     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4601
2bed4                 | LR__4602
2bed4                 | LR__4603
2bed4     00 84 56 F2 | 	cmps	_var03, #0 wc
2bed8                 | ' 		return(0);
2bed8     00 7A 06 C6 |  if_b	mov	result1, #0
2bedc     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2bee0     45 87 0A F2 | 	cmp	_var04, _var06 wz
2bee4                 | ' 		return(0);
2bee4     00 7A 06 A6 |  if_e	mov	result1, #0
2bee8     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2beec     00 86 0E F2 | 	cmp	_var04, #0 wz
2bef0                 | ' 		return(-1);
2bef0     01 7A 66 A6 |  if_e	neg	result1, #1
2bef4     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2bef8     00 8A 0E F2 | 	cmp	_var06, #0 wz
2befc                 | ' 		return(1);
2befc     01 7A 06 A6 |  if_e	mov	result1, #1
2bf00                 | ' 		return(c1 - c2);
2bf00     43 7B 02 56 |  if_ne	mov	result1, _var04
2bf04     45 7B 82 51 |  if_ne	sub	result1, _var06
2bf08                 | _fatfs_cc_strncmp_ret
2bf08     2D 00 64 FD | 	ret
2bf0c                 | 
2bf0c                 | _fatfs_cc_strchr
2bf0c                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/libc/string/strchr.c"
2bf0c                 | ' 	while ((c = *s++) != (char) charwanted)
2bf0c                 | LR__4610
2bf0c     49 81 02 F6 | 	mov	_var01, arg01
2bf10     40 83 C2 FA | 	rdbyte	_var02, _var01
2bf14     41 85 E2 F8 | 	getbyte	_var03, _var02, #0
2bf18     4A 87 E2 F8 | 	getbyte	_var04, arg02, #0
2bf1c     43 85 0A F2 | 	cmp	_var03, _var04 wz
2bf20     01 92 06 F1 | 	add	arg01, #1
2bf24     14 00 90 AD |  if_e	jmp	#LR__4611
2bf28     41 85 02 F6 | 	mov	_var03, _var02
2bf2c     07 84 4E F7 | 	zerox	_var03, #7 wz
2bf30     00 7A 06 A6 |  if_e	mov	result1, #0
2bf34     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2bf38     D0 FF 9F FD | 	jmp	#LR__4610
2bf3c                 | LR__4611
2bf3c                 | ' 	return((char *)--s);
2bf3c     01 92 86 F1 | 	sub	arg01, #1
2bf40     49 7B 02 F6 | 	mov	result1, arg01
2bf44                 | _fatfs_cc_strchr_ret
2bf44     2D 00 64 FD | 	ret
2bf48                 | 
2bf48                 | _fatfs_cc_time
2bf48     01 CA 05 F6 | 	mov	COUNT_, #1
2bf4c     E8 00 A0 FD | 	call	#pushregs_
2bf50     14 F0 07 F1 | 	add	ptra, #20
2bf54     49 A7 02 F6 | 	mov	local01, arg01
2bf58     E7 92 02 F6 | 	mov	arg01, fp
2bf5c     08 92 06 F1 | 	add	arg01, #8
2bf60     00 94 06 F6 | 	mov	arg02, #0
2bf64     A0 5E B0 FD | 	call	#_fatfs_cc_gettimeofday
2bf68     08 CE 05 F1 | 	add	fp, #8
2bf6c     E7 7A 02 FB | 	rdlong	result1, fp
2bf70     08 CE 85 F1 | 	sub	fp, #8
2bf74     00 A6 0E F2 | 	cmp	local01, #0 wz
2bf78     53 7B 62 5C |  if_ne	wrlong	result1, local01
2bf7c                 | '         *tp = now;
2bf7c                 | '     return now;
2bf7c     E7 F0 03 F6 | 	mov	ptra, fp
2bf80     F2 00 A0 FD | 	call	#popregs_
2bf84                 | _fatfs_cc_time_ret
2bf84     2D 00 64 FD | 	ret
2bf88                 | 
2bf88                 | _fatfs_cc_mktime
2bf88     06 CA 05 F6 | 	mov	COUNT_, #6
2bf8c     E8 00 A0 FD | 	call	#pushregs_
2bf90     49 A7 02 F6 | 	mov	local01, arg01
2bf94     14 A6 06 F1 | 	add	local01, #20
2bf98     53 93 02 FB | 	rdlong	arg01, local01
2bf9c     14 A6 86 F1 | 	sub	local01, #20
2bfa0     46 92 56 F2 | 	cmps	arg01, #70 wc
2bfa4                 | '                 return (time_t) -1;
2bfa4     01 7A 66 C6 |  if_b	neg	result1, #1
2bfa8     78 01 90 CD |  if_b	jmp	#LR__4624
2bfac     03 00 00 FF 
2bfb0     6C A9 06 F6 | 	mov	local02, ##1900
2bfb4     14 A6 06 F1 | 	add	local01, #20
2bfb8     53 7B 02 FB | 	rdlong	result1, local01
2bfbc     3D A9 02 F1 | 	add	local02, result1
2bfc0     08 A6 86 F1 | 	sub	local01, #8
2bfc4     53 AB 02 FB | 	rdlong	local03, local01
2bfc8     01 AA 86 F1 | 	sub	local03, #1
2bfcc     04 A6 06 F1 | 	add	local01, #4
2bfd0     53 93 02 FB | 	rdlong	arg01, local01
2bfd4     10 A6 86 F1 | 	sub	local01, #16
2bfd8     02 92 66 F0 | 	shl	arg01, #2
2bfdc     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2bfe0     02 00 00 FF 
2bfe4     78 7A 06 F1 | 	add	result1, ##1144
2bfe8     3D 93 02 F1 | 	add	arg01, result1
2bfec     49 7B 02 FB | 	rdlong	result1, arg01
2bff0     3D AB 02 F1 | 	add	local03, result1
2bff4     54 93 02 F6 | 	mov	arg01, local02
2bff8     B4 5E B0 FD | 	call	#_fatfs_cc__is_leap_year
2bffc     00 7A 0E F2 | 	cmp	result1, #0 wz
2c000     1C 00 90 AD |  if_e	jmp	#LR__4620
2c004     00 AC 06 F6 | 	mov	local04, #0
2c008     10 A6 06 F1 | 	add	local01, #16
2c00c     53 7B 02 FB | 	rdlong	result1, local01
2c010     10 A6 86 F1 | 	sub	local01, #16
2c014     02 7A 56 F2 | 	cmps	result1, #2 wc
2c018     01 AC 06 36 |  if_ae	mov	local04, #1
2c01c     04 00 90 FD | 	jmp	#LR__4621
2c020                 | LR__4620
2c020     00 AC 06 F6 | 	mov	local04, #0
2c024                 | LR__4621
2c024     04 A6 06 F1 | 	add	local01, #4
2c028     53 93 02 FB | 	rdlong	arg01, local01
2c02c     04 A6 86 F1 | 	sub	local01, #4
2c030     53 AF 02 FB | 	rdlong	local05, local01
2c034     08 A6 06 F1 | 	add	local01, #8
2c038     53 7B 02 FB | 	rdlong	result1, local01
2c03c     07 00 00 FF 
2c040     10 7A 06 FD | 	qmul	result1, ##3600
2c044     56 AB 02 F1 | 	add	local03, local04
2c048     49 AD 02 F6 | 	mov	local04, arg01
2c04c     04 AC 66 F0 | 	shl	local04, #4
2c050     49 AD 82 F1 | 	sub	local04, arg01
2c054     02 AC 66 F0 | 	shl	local04, #2
2c058     56 AF 02 F1 | 	add	local05, local04
2c05c     08 A6 86 F1 | 	sub	local01, #8
2c060     18 AC 62 FD | 	getqx	local04
2c064     A8 00 00 FF 
2c068     80 AB 06 FD | 	qmul	local03, ##86400
2c06c     56 AF 02 F1 | 	add	local05, local04
2c070     54 AB 02 F6 | 	mov	local03, local02
2c074     03 00 00 FF 
2c078     B2 AB 86 F1 | 	sub	local03, ##1970
2c07c     18 AC 62 FD | 	getqx	local04
2c080     99 F0 00 FF 
2c084     80 AB 06 FD | 	qmul	local03, ##31536000
2c088     56 AF 02 F1 | 	add	local05, local04
2c08c     54 AB 02 F6 | 	mov	local03, local02
2c090     03 00 00 FF 
2c094     B1 AB 86 F1 | 	sub	local03, ##1969
2c098     55 B1 52 F6 | 	abs	local06, local03 wc
2c09c     02 B0 46 F0 | 	shr	local06, #2
2c0a0     58 B1 82 F6 | 	negc	local06, local06
2c0a4     03 00 00 FF 
2c0a8     D1 A9 56 F2 | 	cmps	local02, ##2001 wc
2c0ac     18 AC 62 FD | 	getqx	local04
2c0b0     56 AF 02 F1 | 	add	local05, local04
2c0b4     18 00 90 CD |  if_b	jmp	#LR__4622
2c0b8     03 00 00 FF 
2c0bc     D0 A9 86 F1 | 	sub	local02, ##2000
2c0c0     54 AD 52 F6 | 	abs	local04, local02 wc
2c0c4     64 AC 16 FD | 	qdiv	local04, #100
2c0c8     18 AC 62 FD | 	getqx	local04
2c0cc     56 B1 A2 F3 | 	sumnc	local06, local04
2c0d0                 | LR__4622
2c0d0     A8 00 00 FF 
2c0d4     80 B1 06 FD | 	qmul	local06, ##86400
2c0d8     18 B0 62 FD | 	getqx	local06
2c0dc     58 AF 02 F1 | 	add	local05, local06
2c0e0     E8 01 B0 FD | 	call	#_fatfs_cc__tzset
2c0e4     02 00 00 FF 
2c0e8     44 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1092
2c0ec     36 B1 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2c0f0     58 AF 02 F1 | 	add	local05, local06
2c0f4     68 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, #104
2c0f8     36 AB 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2c0fc     02 00 00 FF 
2c100     AC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1196
2c104     01 AA 0E F2 | 	cmp	local03, #1 wz
2c108     14 00 90 5D |  if_ne	jmp	#LR__4623
2c10c     53 93 02 F6 | 	mov	arg01, local01
2c110     88 60 B0 FD | 	call	#_fatfs_cc___indst
2c114     00 7A 0E F2 | 	cmp	result1, #0 wz
2c118     07 00 00 5F 
2c11c     10 AE 86 51 |  if_ne	sub	local05, ##3600
2c120                 | LR__4623
2c120                 | '                 s -=  (3600L) ;
2c120                 | ' 
2c120                 | '         return s;
2c120     57 7B 02 F6 | 	mov	result1, local05
2c124                 | LR__4624
2c124     E7 F0 03 F6 | 	mov	ptra, fp
2c128     F2 00 A0 FD | 	call	#popregs_
2c12c                 | _fatfs_cc_mktime_ret
2c12c     2D 00 64 FD | 	ret
2c130                 | 
2c130                 | _fatfs_cc__gmtime_r
2c130     03 CA 05 F6 | 	mov	COUNT_, #3
2c134     E8 00 A0 FD | 	call	#pushregs_
2c138     49 A7 02 FB | 	rdlong	local01, arg01
2c13c     A8 00 00 FF 
2c140     80 A7 16 FD | 	qdiv	local01, ##86400
2c144     18 7A 62 FD | 	getqx	result1
2c148     04 7A 06 F1 | 	add	result1, #4
2c14c     07 7A 16 FD | 	qdiv	result1, #7
2c150     18 94 06 F1 | 	add	arg02, #24
2c154     D1 7F 27 FF 
2c158     00 A6 16 F2 | 	cmp	local01, ##1325376000 wc
2c15c     D1 7F 27 3F 
2c160     00 A6 86 31 |  if_ae	sub	local01, ##1325376000
2c164     03 00 00 3F 
2c168     DC A9 06 36 |  if_ae	mov	local02, ##2012
2c16c     03 00 00 CF 
2c170     B2 A9 06 C6 |  if_b	mov	local02, ##1970
2c174                 | ' 	  year = 1970;
2c174                 | ' 	}
2c174                 | ' 
2c174                 | ' 	for(;;) {
2c174     19 7A 62 FD | 	getqy	result1
2c178     4A 7B 62 FC | 	wrlong	result1, arg02
2c17c     18 94 86 F1 | 	sub	arg02, #24
2c180                 | LR__4630
2c180     54 93 02 F6 | 	mov	arg01, local02
2c184     28 5D B0 FD | 	call	#_fatfs_cc__is_leap_year
2c188     00 7A 0E F2 | 	cmp	result1, #0 wz
2c18c     42 F1 00 5F 
2c190     00 AB 06 56 |  if_ne	mov	local03, ##31622400
2c194     99 F0 00 AF 
2c198     80 AB 06 A6 |  if_e	mov	local03, ##31536000
2c19c     55 A7 12 F2 | 	cmp	local01, local03 wc
2c1a0                 | ' 	    break;
2c1a0     01 A8 06 31 |  if_ae	add	local02, #1
2c1a4     55 A7 82 31 |  if_ae	sub	local01, local03
2c1a8     D4 FF 9F 3D |  if_ae	jmp	#LR__4630
2c1ac     A8 00 00 FF 
2c1b0     80 A7 16 FD | 	qdiv	local01, ##86400
2c1b4     54 AB 02 F6 | 	mov	local03, local02
2c1b8     03 00 00 FF 
2c1bc     6C AB 86 F1 | 	sub	local03, ##1900
2c1c0     14 94 06 F1 | 	add	arg02, #20
2c1c4     4A AB 62 FC | 	wrlong	local03, arg02
2c1c8     08 94 06 F1 | 	add	arg02, #8
2c1cc     54 93 02 F6 | 	mov	arg01, local02
2c1d0     18 A8 62 FD | 	getqx	local02
2c1d4     4A A9 62 FC | 	wrlong	local02, arg02
2c1d8     1C 94 86 F1 | 	sub	arg02, #28
2c1dc     D0 5C B0 FD | 	call	#_fatfs_cc__is_leap_year
2c1e0     00 7A 0E F2 | 	cmp	result1, #0 wz
2c1e4     1D AA 06 56 |  if_ne	mov	local03, #29
2c1e8     1C AA 06 A6 |  if_e	mov	local03, #28
2c1ec     02 00 00 FF 
2c1f0     4C 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1100
2c1f4     36 AB 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2c1f8     02 00 00 FF 
2c1fc     4C 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1100
2c200                 | ' 
2c200                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2c200                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2c200     00 92 06 F6 | 	mov	arg01, #0
2c204     D7 26 48 FB | 	callpa	#(@LR__4632-@LR__4631)>>2,fcache_load_ptr_
2c208                 | LR__4631
2c208     49 AB 02 F6 | 	mov	local03, arg01
2c20c     02 AA 66 F0 | 	shl	local03, #2
2c210     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2c214     02 00 00 FF 
2c218     48 7A 06 F1 | 	add	result1, ##1096
2c21c     3D AB 02 F1 | 	add	local03, result1
2c220     55 AB 02 FB | 	rdlong	local03, local03
2c224     55 A9 52 F2 | 	cmps	local02, local03 wc
2c228     28 00 90 CD |  if_b	jmp	#LR__4633
2c22c     49 7B 02 F6 | 	mov	result1, arg01
2c230     02 7A 66 F0 | 	shl	result1, #2
2c234     36 AB 02 F6 | 	mov	local03, ptr__fatfs_cc_dat__
2c238     02 00 00 FF 
2c23c     48 AA 06 F1 | 	add	local03, ##1096
2c240     55 7B 02 F1 | 	add	result1, local03
2c244     3D 7B 02 FB | 	rdlong	result1, result1
2c248     3D A9 82 F1 | 	sub	local02, result1
2c24c     01 92 06 F1 | 	add	arg01, #1
2c250     B4 FF 9F FD | 	jmp	#LR__4631
2c254                 | LR__4632
2c254                 | LR__4633
2c254     A8 00 00 FF 
2c258     80 A7 16 FD | 	qdiv	local01, ##86400
2c25c     10 94 06 F1 | 	add	arg02, #16
2c260     4A 93 62 FC | 	wrlong	arg01, arg02
2c264     01 A8 06 F1 | 	add	local02, #1
2c268     04 94 86 F1 | 	sub	arg02, #4
2c26c     4A A9 62 FC | 	wrlong	local02, arg02
2c270     19 A6 62 FD | 	getqy	local01
2c274     07 00 00 FF 
2c278     10 A6 16 FD | 	qdiv	local01, ##3600
2c27c     18 AA 62 FD | 	getqx	local03
2c280     07 00 00 FF 
2c284     10 A6 16 FD | 	qdiv	local01, ##3600
2c288     04 94 86 F1 | 	sub	arg02, #4
2c28c     4A AB 62 FC | 	wrlong	local03, arg02
2c290     19 A6 62 FD | 	getqy	local01
2c294     3C A6 16 FD | 	qdiv	local01, #60
2c298     18 AA 62 FD | 	getqx	local03
2c29c     3C A6 16 FD | 	qdiv	local01, #60
2c2a0     04 94 86 F1 | 	sub	arg02, #4
2c2a4     4A AB 62 FC | 	wrlong	local03, arg02
2c2a8     04 94 86 F1 | 	sub	arg02, #4
2c2ac                 | '         stm->tm_isdst = 0;
2c2ac                 | ' 
2c2ac                 | ' ;
2c2ac                 | '         return stm;
2c2ac     4A 7B 02 F6 | 	mov	result1, arg02
2c2b0     19 AA 62 FD | 	getqy	local03
2c2b4     4A AB 62 FC | 	wrlong	local03, arg02
2c2b8     20 94 06 F1 | 	add	arg02, #32
2c2bc     4A 01 68 FC | 	wrlong	#0, arg02
2c2c0     E7 F0 03 F6 | 	mov	ptra, fp
2c2c4     F2 00 A0 FD | 	call	#popregs_
2c2c8                 | _fatfs_cc__gmtime_r_ret
2c2c8     2D 00 64 FD | 	ret
2c2cc                 | 
2c2cc                 | _fatfs_cc__tzset
2c2cc     92 01 00 FF 
2c2d0     28 93 06 F6 | 	mov	arg01, ##@LR__5482
2c2d4     0C 50 B0 FD | 	call	#_fatfs_cc_getenv
2c2d8     3D 93 02 F6 | 	mov	arg01, result1
2c2dc     36 95 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2c2e0     02 00 00 FF 
2c2e4     AC 94 06 F1 | 	add	arg02, ##1196
2c2e8     14 5C B0 FD | 	call	#_fatfs_cc___tzoffset
2c2ec     02 00 00 FF 
2c2f0     44 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1092
2c2f4     36 7B 62 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2c2f8     02 00 00 FF 
2c2fc     44 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1092
2c300                 | _fatfs_cc__tzset_ret
2c300     2D 00 64 FD | 	ret
2c304                 | 
2c304                 | _fatfs_cc_disk_read
2c304     09 CA 05 F6 | 	mov	COUNT_, #9
2c308     E8 00 A0 FD | 	call	#pushregs_
2c30c     4A AF 02 F6 | 	mov	local05, arg02
2c310     4C B1 02 F6 | 	mov	local06, arg04
2c314     4B 93 02 F6 | 	mov	arg01, arg03
2c318     00 94 06 F6 | 	mov	arg02, #0
2c31c     09 96 06 F6 | 	mov	arg03, #9
2c320     00 98 06 F6 | 	mov	arg04, #0
2c324     94 A8 BF FD | 	call	#__system___int64_shl
2c328     3D A7 02 F6 | 	mov	local01, result1
2c32c     3E A9 02 F6 | 	mov	local02, result2
2c330     01 00 00 FF 
2c334     10 64 06 F1 | 	add	objptr, ##528
2c338     32 7D 0A FB | 	rdlong	result2, objptr wz
2c33c     01 00 00 FF 
2c340     10 64 86 F1 | 	sub	objptr, ##528
2c344                 | '         return RES_NOTRDY;
2c344     03 7A 06 A6 |  if_e	mov	result1, #3
2c348     E8 00 90 AD |  if_e	jmp	#LR__4640
2c34c     53 95 02 F6 | 	mov	arg02, local01
2c350     54 97 02 F6 | 	mov	arg03, local02
2c354     01 00 00 FF 
2c358     10 64 06 F1 | 	add	objptr, ##528
2c35c     32 93 02 FB | 	rdlong	arg01, objptr
2c360     49 99 02 F6 | 	mov	arg04, arg01
2c364     30 98 06 F1 | 	add	arg04, #48
2c368     4C B3 02 FB | 	rdlong	local07, arg04
2c36c     59 B5 02 F6 | 	mov	local08, local07
2c370     13 B2 46 F7 | 	zerox	local07, #19
2c374     14 B4 46 F0 | 	shr	local08, #20
2c378     02 B4 66 F0 | 	shl	local08, #2
2c37c     2D B5 02 F1 | 	add	local08, __methods__
2c380     5A B5 02 FB | 	rdlong	local08, local08
2c384     01 00 00 FF 
2c388     10 64 86 F1 | 	sub	objptr, ##528
2c38c     00 98 06 F6 | 	mov	arg04, #0
2c390     32 B7 02 F6 | 	mov	local09, objptr
2c394     59 65 02 F6 | 	mov	objptr, local07
2c398     2D B4 62 FD | 	call	local08
2c39c     5B 65 02 F6 | 	mov	objptr, local09
2c3a0     3D AB 02 F6 | 	mov	local03, result1
2c3a4     3E AD 02 F6 | 	mov	local04, result2
2c3a8     55 93 02 F6 | 	mov	arg01, local03
2c3ac     56 95 02 F6 | 	mov	arg02, local04
2c3b0     53 97 02 F6 | 	mov	arg03, local01
2c3b4     54 99 02 F6 | 	mov	arg04, local02
2c3b8     00 7A 06 F6 | 	mov	result1, #0
2c3bc     4B 93 1A F2 | 	cmp	arg01, arg03 wcz
2c3c0     4C 95 7A F2 | 	cmpsx	arg02, arg04 wcz
2c3c4     01 7A 86 56 |  if_ne	negc	result1, #1
2c3c8     00 7A 0E F2 | 	cmp	result1, #0 wz
2c3cc                 | '         return RES_ERROR;
2c3cc     01 7A 06 56 |  if_ne	mov	result1, #1
2c3d0     60 00 90 5D |  if_ne	jmp	#LR__4640
2c3d4     09 B0 66 F0 | 	shl	local06, #9
2c3d8     01 00 00 FF 
2c3dc     10 64 06 F1 | 	add	objptr, ##528
2c3e0     32 93 02 FB | 	rdlong	arg01, objptr
2c3e4     49 AB 02 F6 | 	mov	local03, arg01
2c3e8     14 AA 06 F1 | 	add	local03, #20
2c3ec     55 AB 02 FB | 	rdlong	local03, local03
2c3f0     55 B7 02 F6 | 	mov	local09, local03
2c3f4     13 B6 46 F7 | 	zerox	local09, #19
2c3f8     14 AA 46 F0 | 	shr	local03, #20
2c3fc     02 AA 66 F0 | 	shl	local03, #2
2c400     2D AB 02 F1 | 	add	local03, __methods__
2c404     55 AB 02 FB | 	rdlong	local03, local03
2c408     01 00 00 FF 
2c40c     10 64 86 F1 | 	sub	objptr, ##528
2c410     57 95 02 F6 | 	mov	arg02, local05
2c414     58 97 02 F6 | 	mov	arg03, local06
2c418     32 B5 02 F6 | 	mov	local08, objptr
2c41c     5B 65 02 F6 | 	mov	objptr, local09
2c420     2D AA 62 FD | 	call	local03
2c424     5A 65 02 F6 | 	mov	objptr, local08
2c428     58 7B 0A F2 | 	cmp	result1, local06 wz
2c42c                 | '         return RES_ERROR;
2c42c     01 7A 06 56 |  if_ne	mov	result1, #1
2c430                 | '     }
2c430                 | '     return RES_OK;
2c430     00 7A 06 A6 |  if_e	mov	result1, #0
2c434                 | LR__4640
2c434     E7 F0 03 F6 | 	mov	ptra, fp
2c438     F2 00 A0 FD | 	call	#popregs_
2c43c                 | _fatfs_cc_disk_read_ret
2c43c     2D 00 64 FD | 	ret
2c440                 | 
2c440                 | _fatfs_cc_disk_write
2c440     09 CA 05 F6 | 	mov	COUNT_, #9
2c444     E8 00 A0 FD | 	call	#pushregs_
2c448     4A AF 02 F6 | 	mov	local05, arg02
2c44c     4C B1 02 F6 | 	mov	local06, arg04
2c450     4B 93 02 F6 | 	mov	arg01, arg03
2c454     00 94 06 F6 | 	mov	arg02, #0
2c458     09 96 06 F6 | 	mov	arg03, #9
2c45c     00 98 06 F6 | 	mov	arg04, #0
2c460     58 A7 BF FD | 	call	#__system___int64_shl
2c464     3D A7 02 F6 | 	mov	local01, result1
2c468     3E A9 02 F6 | 	mov	local02, result2
2c46c     01 00 00 FF 
2c470     10 64 06 F1 | 	add	objptr, ##528
2c474     32 7D 0A FB | 	rdlong	result2, objptr wz
2c478     01 00 00 FF 
2c47c     10 64 86 F1 | 	sub	objptr, ##528
2c480                 | '         return RES_NOTRDY;
2c480     03 7A 06 A6 |  if_e	mov	result1, #3
2c484     E8 00 90 AD |  if_e	jmp	#LR__4650
2c488     53 95 02 F6 | 	mov	arg02, local01
2c48c     54 97 02 F6 | 	mov	arg03, local02
2c490     01 00 00 FF 
2c494     10 64 06 F1 | 	add	objptr, ##528
2c498     32 93 02 FB | 	rdlong	arg01, objptr
2c49c     49 99 02 F6 | 	mov	arg04, arg01
2c4a0     30 98 06 F1 | 	add	arg04, #48
2c4a4     4C B3 02 FB | 	rdlong	local07, arg04
2c4a8     59 B5 02 F6 | 	mov	local08, local07
2c4ac     13 B2 46 F7 | 	zerox	local07, #19
2c4b0     14 B4 46 F0 | 	shr	local08, #20
2c4b4     02 B4 66 F0 | 	shl	local08, #2
2c4b8     2D B5 02 F1 | 	add	local08, __methods__
2c4bc     5A B5 02 FB | 	rdlong	local08, local08
2c4c0     01 00 00 FF 
2c4c4     10 64 86 F1 | 	sub	objptr, ##528
2c4c8     00 98 06 F6 | 	mov	arg04, #0
2c4cc     32 B7 02 F6 | 	mov	local09, objptr
2c4d0     59 65 02 F6 | 	mov	objptr, local07
2c4d4     2D B4 62 FD | 	call	local08
2c4d8     5B 65 02 F6 | 	mov	objptr, local09
2c4dc     3D AB 02 F6 | 	mov	local03, result1
2c4e0     3E AD 02 F6 | 	mov	local04, result2
2c4e4     55 93 02 F6 | 	mov	arg01, local03
2c4e8     56 95 02 F6 | 	mov	arg02, local04
2c4ec     53 97 02 F6 | 	mov	arg03, local01
2c4f0     54 99 02 F6 | 	mov	arg04, local02
2c4f4     00 7A 06 F6 | 	mov	result1, #0
2c4f8     4B 93 1A F2 | 	cmp	arg01, arg03 wcz
2c4fc     4C 95 7A F2 | 	cmpsx	arg02, arg04 wcz
2c500     01 7A 86 56 |  if_ne	negc	result1, #1
2c504     00 7A 0E F2 | 	cmp	result1, #0 wz
2c508                 | '         return RES_ERROR;
2c508     01 7A 06 56 |  if_ne	mov	result1, #1
2c50c     60 00 90 5D |  if_ne	jmp	#LR__4650
2c510     09 B0 66 F0 | 	shl	local06, #9
2c514     01 00 00 FF 
2c518     10 64 06 F1 | 	add	objptr, ##528
2c51c     32 93 02 FB | 	rdlong	arg01, objptr
2c520     49 AB 02 F6 | 	mov	local03, arg01
2c524     18 AA 06 F1 | 	add	local03, #24
2c528     55 AB 02 FB | 	rdlong	local03, local03
2c52c     55 B7 02 F6 | 	mov	local09, local03
2c530     13 B6 46 F7 | 	zerox	local09, #19
2c534     14 AA 46 F0 | 	shr	local03, #20
2c538     02 AA 66 F0 | 	shl	local03, #2
2c53c     2D AB 02 F1 | 	add	local03, __methods__
2c540     55 AB 02 FB | 	rdlong	local03, local03
2c544     01 00 00 FF 
2c548     10 64 86 F1 | 	sub	objptr, ##528
2c54c     57 95 02 F6 | 	mov	arg02, local05
2c550     58 97 02 F6 | 	mov	arg03, local06
2c554     32 B5 02 F6 | 	mov	local08, objptr
2c558     5B 65 02 F6 | 	mov	objptr, local09
2c55c     2D AA 62 FD | 	call	local03
2c560     5A 65 02 F6 | 	mov	objptr, local08
2c564     58 7B 0A F2 | 	cmp	result1, local06 wz
2c568                 | '         return RES_ERROR;
2c568     01 7A 06 56 |  if_ne	mov	result1, #1
2c56c                 | '     }
2c56c                 | '     return RES_OK;
2c56c     00 7A 06 A6 |  if_e	mov	result1, #0
2c570                 | LR__4650
2c570     E7 F0 03 F6 | 	mov	ptra, fp
2c574     F2 00 A0 FD | 	call	#popregs_
2c578                 | _fatfs_cc_disk_write_ret
2c578     2D 00 64 FD | 	ret
2c57c                 | 
2c57c                 | _fatfs_cc_disk_ioctl
2c57c     03 CA 05 F6 | 	mov	COUNT_, #3
2c580     E8 00 A0 FD | 	call	#pushregs_
2c584     01 00 00 FF 
2c588     10 64 06 F1 | 	add	objptr, ##528
2c58c     32 93 0A FB | 	rdlong	arg01, objptr wz
2c590     01 00 00 FF 
2c594     10 64 86 F1 | 	sub	objptr, ##528
2c598                 | '         return RES_NOTRDY;
2c598     03 7A 06 A6 |  if_e	mov	result1, #3
2c59c     58 00 90 AD |  if_e	jmp	#LR__4660
2c5a0     01 00 00 FF 
2c5a4     10 64 06 F1 | 	add	objptr, ##528
2c5a8     32 93 02 FB | 	rdlong	arg01, objptr
2c5ac     49 A7 02 F6 | 	mov	local01, arg01
2c5b0     28 A6 06 F1 | 	add	local01, #40
2c5b4     53 A7 02 FB | 	rdlong	local01, local01
2c5b8     53 A9 02 F6 | 	mov	local02, local01
2c5bc     13 A8 46 F7 | 	zerox	local02, #19
2c5c0     14 A6 46 F0 | 	shr	local01, #20
2c5c4     02 A6 66 F0 | 	shl	local01, #2
2c5c8     2D A7 02 F1 | 	add	local01, __methods__
2c5cc     53 A7 02 FB | 	rdlong	local01, local01
2c5d0     01 00 00 FF 
2c5d4     10 64 86 F1 | 	sub	objptr, ##528
2c5d8     4A 95 E2 F8 | 	getbyte	arg02, arg02, #0
2c5dc     32 AB 02 F6 | 	mov	local03, objptr
2c5e0     54 65 02 F6 | 	mov	objptr, local02
2c5e4     2D A6 62 FD | 	call	local01
2c5e8     55 65 02 F6 | 	mov	objptr, local03
2c5ec     00 7A 0E F2 | 	cmp	result1, #0 wz
2c5f0                 | '         return RES_ERROR;
2c5f0     01 7A 06 56 |  if_ne	mov	result1, #1
2c5f4                 | '     return RES_OK;
2c5f4     00 7A 06 A6 |  if_e	mov	result1, #0
2c5f8                 | LR__4660
2c5f8     E7 F0 03 F6 | 	mov	ptra, fp
2c5fc     F2 00 A0 FD | 	call	#popregs_
2c600                 | _fatfs_cc_disk_ioctl_ret
2c600     2D 00 64 FD | 	ret
2c604                 | 
2c604                 | _fatfs_cc_tchar2uni
2c604     49 81 02 FB | 	rdlong	_var01, arg01
2c608     40 83 02 F6 | 	mov	_var02, _var01
2c60c     01 80 06 F1 | 	add	_var01, #1
2c610     40 85 02 F6 | 	mov	_var03, _var01
2c614     41 87 C2 FA | 	rdbyte	_var04, _var02
2c618     80 86 CE F7 | 	test	_var04, #128 wz
2c61c     E8 00 90 AD |  if_e	jmp	#LR__4677
2c620     43 89 02 F6 | 	mov	_var05, _var04
2c624     E0 88 06 F5 | 	and	_var05, #224
2c628     C0 88 0E F2 | 	cmp	_var05, #192 wz
2c62c     1F 86 06 A5 |  if_e	and	_var04, #31
2c630     01 8A 06 A6 |  if_e	mov	_var06, #1
2c634     34 00 90 AD |  if_e	jmp	#LR__4671
2c638     43 89 02 F6 | 	mov	_var05, _var04
2c63c     F0 88 06 F5 | 	and	_var05, #240
2c640     E0 88 0E F2 | 	cmp	_var05, #224 wz
2c644     43 87 42 A8 |  if_e	getnib	_var04, _var04, #0
2c648     02 8A 06 A6 |  if_e	mov	_var06, #2
2c64c     1C 00 90 AD |  if_e	jmp	#LR__4670
2c650     43 89 02 F6 | 	mov	_var05, _var04
2c654     F8 88 06 F5 | 	and	_var05, #248
2c658     F0 88 0E F2 | 	cmp	_var05, #240 wz
2c65c     07 86 06 A5 |  if_e	and	_var04, #7
2c660     03 8A 06 A6 |  if_e	mov	_var06, #3
2c664                 | ' 			return 0xFFFFFFFF;
2c664     01 7A 66 56 |  if_ne	neg	result1, #1
2c668     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2c66c                 | LR__4670
2c66c                 | LR__4671
2c66c                 | ' 		}
2c66c                 | ' 		do {
2c66c                 | LR__4672
2c66c     42 8D C2 FA | 	rdbyte	_var07, _var03
2c670     46 89 E2 F8 | 	getbyte	_var05, _var07, #0
2c674     C0 88 06 F5 | 	and	_var05, #192
2c678     80 88 0E F2 | 	cmp	_var05, #128 wz
2c67c     01 84 06 F1 | 	add	_var03, #1
2c680     01 7A 66 56 |  if_ne	neg	result1, #1
2c684     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2c688     06 86 66 F0 | 	shl	_var04, #6
2c68c     46 83 E2 F8 | 	getbyte	_var02, _var07, #0
2c690     3F 82 06 F5 | 	and	_var02, #63
2c694     41 87 42 F5 | 	or	_var04, _var02
2c698     F4 8B 6E FB | 	djnz	_var06, #LR__4672
2c69c     80 86 16 F2 | 	cmp	_var04, #128 wc
2c6a0     24 00 90 CD |  if_b	jmp	#LR__4674
2c6a4     6C 00 00 FF 
2c6a8     00 86 16 F2 | 	cmp	_var04, ##55296 wc
2c6ac     0C 00 90 CD |  if_b	jmp	#LR__4673
2c6b0     70 00 00 FF 
2c6b4     00 86 16 F2 | 	cmp	_var04, ##57344 wc
2c6b8     0C 00 90 CD |  if_b	jmp	#LR__4674
2c6bc                 | LR__4673
2c6bc     80 08 00 FF 
2c6c0     00 86 16 F2 | 	cmp	_var04, ##1114112 wc
2c6c4     08 00 90 CD |  if_b	jmp	#LR__4675
2c6c8                 | LR__4674
2c6c8     01 7A 66 F6 | 	neg	result1, #1
2c6cc     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2c6d0                 | LR__4675
2c6d0     80 00 00 FF 
2c6d4     00 86 16 F2 | 	cmp	_var04, ##65536 wc
2c6d8     2C 00 90 CD |  if_b	jmp	#LR__4676
2c6dc     43 83 02 F6 | 	mov	_var02, _var04
2c6e0     80 00 00 FF 
2c6e4     00 82 86 F1 | 	sub	_var02, ##65536
2c6e8     06 82 66 F0 | 	shl	_var02, #6
2c6ec     80 FF 01 FF 
2c6f0     00 82 06 F5 | 	and	_var02, ##67043328
2c6f4     6E 00 6C FF 
2c6f8     00 88 06 F6 | 	mov	_var05, ##-671032320
2c6fc     41 89 42 F5 | 	or	_var05, _var02
2c700     09 86 46 F7 | 	zerox	_var04, #9
2c704     44 87 42 F5 | 	or	_var04, _var05
2c708                 | LR__4676
2c708                 | LR__4677
2c708     49 85 62 FC | 	wrlong	_var03, arg01
2c70c                 | ' 	}
2c70c                 | ' #line 811 "ff.c"
2c70c                 | ' 	*str = p;
2c70c                 | ' 	return uc;
2c70c     43 7B 02 F6 | 	mov	result1, _var04
2c710                 | _fatfs_cc_tchar2uni_ret
2c710     2D 00 64 FD | 	ret
2c714                 | 
2c714                 | _fatfs_cc_put_utf
2c714     80 92 16 F2 | 	cmp	arg01, #128 wc
2c718     18 00 90 3D |  if_ae	jmp	#LR__4680
2c71c     01 96 16 F2 | 	cmp	arg03, #1 wc
2c720     00 7A 06 C6 |  if_b	mov	result1, #0
2c724     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c728     4A 93 42 FC | 	wrbyte	arg01, arg02
2c72c                 | ' 		*buf = (TCHAR)chr;
2c72c                 | ' 		return 1;
2c72c     01 7A 06 F6 | 	mov	result1, #1
2c730     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c734                 | LR__4680
2c734     04 00 00 FF 
2c738     00 92 16 F2 | 	cmp	arg01, ##2048 wc
2c73c     40 00 90 3D |  if_ae	jmp	#LR__4681
2c740     02 96 16 F2 | 	cmp	arg03, #2 wc
2c744     00 7A 06 C6 |  if_b	mov	result1, #0
2c748     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c74c     49 7B 02 F6 | 	mov	result1, arg01
2c750     06 7A 46 F0 | 	shr	result1, #6
2c754     1F 7A 06 F5 | 	and	result1, #31
2c758     C0 96 06 F6 | 	mov	arg03, #192
2c75c     3D 97 42 F5 | 	or	arg03, result1
2c760     4A 97 42 FC | 	wrbyte	arg03, arg02
2c764     01 94 06 F1 | 	add	arg02, #1
2c768     3F 92 06 F5 | 	and	arg01, #63
2c76c     80 7A 06 F6 | 	mov	result1, #128
2c770     49 7B 42 F5 | 	or	result1, arg01
2c774     4A 7B 42 FC | 	wrbyte	result1, arg02
2c778                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2c778                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c778                 | ' 		return 2;
2c778     02 7A 06 F6 | 	mov	result1, #2
2c77c     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c780                 | LR__4681
2c780     80 00 00 FF 
2c784     00 92 16 F2 | 	cmp	arg01, ##65536 wc
2c788     70 00 90 3D |  if_ae	jmp	#LR__4684
2c78c     03 96 16 F2 | 	cmp	arg03, #3 wc
2c790     18 00 90 CD |  if_b	jmp	#LR__4682
2c794     6C 00 00 FF 
2c798     00 92 16 F2 | 	cmp	arg01, ##55296 wc
2c79c     14 00 90 CD |  if_b	jmp	#LR__4683
2c7a0     70 00 00 FF 
2c7a4     00 92 16 F2 | 	cmp	arg01, ##57344 wc
2c7a8     08 00 90 3D |  if_ae	jmp	#LR__4683
2c7ac                 | LR__4682
2c7ac     00 7A 06 F6 | 	mov	result1, #0
2c7b0     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c7b4                 | LR__4683
2c7b4     49 7B 5A F8 | 	getnib	result1, arg01, #3
2c7b8     E0 96 06 F6 | 	mov	arg03, #224
2c7bc     3D 97 42 F5 | 	or	arg03, result1
2c7c0     4A 97 42 FC | 	wrbyte	arg03, arg02
2c7c4     01 94 06 F1 | 	add	arg02, #1
2c7c8     49 7B 02 F6 | 	mov	result1, arg01
2c7cc     06 7A 46 F0 | 	shr	result1, #6
2c7d0     3F 7A 06 F5 | 	and	result1, #63
2c7d4     80 96 06 F6 | 	mov	arg03, #128
2c7d8     3D 97 42 F5 | 	or	arg03, result1
2c7dc     4A 97 42 FC | 	wrbyte	arg03, arg02
2c7e0     01 94 06 F1 | 	add	arg02, #1
2c7e4     3F 92 06 F5 | 	and	arg01, #63
2c7e8     80 7A 06 F6 | 	mov	result1, #128
2c7ec     49 7B 42 F5 | 	or	result1, arg01
2c7f0     4A 7B 42 FC | 	wrbyte	result1, arg02
2c7f4                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2c7f4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2c7f4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c7f4                 | ' 		return 3;
2c7f4     03 7A 06 F6 | 	mov	result1, #3
2c7f8     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c7fc                 | LR__4684
2c7fc     04 96 16 F2 | 	cmp	arg03, #4 wc
2c800     00 7A 06 C6 |  if_b	mov	result1, #0
2c804     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c808     49 81 02 F6 | 	mov	_var01, arg01
2c80c     E0 81 06 F4 | 	bitl	_var01, #480
2c810     00 00 6C FF 
2c814     00 80 86 F1 | 	sub	_var01, ##-671088640
2c818     06 80 46 F0 | 	shr	_var01, #6
2c81c     49 93 32 F9 | 	getword	arg01, arg01, #0
2c820     6E 00 00 FF 
2c824     00 92 86 F1 | 	sub	arg01, ##56320
2c828     00 08 00 FF 
2c82c     00 80 16 F2 | 	cmp	_var01, ##1048576 wc
2c830     02 00 00 CF 
2c834     00 92 16 C2 |  if_b	cmp	arg01, ##1024 wc
2c838     00 7A 06 36 |  if_ae	mov	result1, #0
2c83c     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2c840     49 81 42 F5 | 	or	_var01, arg01
2c844     80 00 00 FF 
2c848     00 80 06 F1 | 	add	_var01, ##65536
2c84c     40 7B 02 F6 | 	mov	result1, _var01
2c850     12 7A 46 F0 | 	shr	result1, #18
2c854     07 7A 06 F5 | 	and	result1, #7
2c858     F0 96 06 F6 | 	mov	arg03, #240
2c85c     3D 97 42 F5 | 	or	arg03, result1
2c860     4A 97 42 FC | 	wrbyte	arg03, arg02
2c864     01 94 06 F1 | 	add	arg02, #1
2c868     40 7B 02 F6 | 	mov	result1, _var01
2c86c     0C 7A 46 F0 | 	shr	result1, #12
2c870     3F 7A 06 F5 | 	and	result1, #63
2c874     80 96 06 F6 | 	mov	arg03, #128
2c878     3D 97 42 F5 | 	or	arg03, result1
2c87c     4A 97 42 FC | 	wrbyte	arg03, arg02
2c880     01 94 06 F1 | 	add	arg02, #1
2c884     40 7B 02 F6 | 	mov	result1, _var01
2c888     06 7A 46 F0 | 	shr	result1, #6
2c88c     3F 7A 06 F5 | 	and	result1, #63
2c890     80 96 06 F6 | 	mov	arg03, #128
2c894     3D 97 42 F5 | 	or	arg03, result1
2c898     4A 97 42 FC | 	wrbyte	arg03, arg02
2c89c     01 94 06 F1 | 	add	arg02, #1
2c8a0     3F 80 06 F5 | 	and	_var01, #63
2c8a4     80 7A 06 F6 | 	mov	result1, #128
2c8a8     40 7B 42 F5 | 	or	result1, _var01
2c8ac     4A 7B 42 FC | 	wrbyte	result1, arg02
2c8b0                 | ' 	chr = (hc | chr) + 0x10000;
2c8b0                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2c8b0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2c8b0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2c8b0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c8b0                 | ' 	return 4;
2c8b0     04 7A 06 F6 | 	mov	result1, #4
2c8b4                 | _fatfs_cc_put_utf_ret
2c8b4     2D 00 64 FD | 	ret
2c8b8                 | 
2c8b8                 | _fatfs_cc_sync_window
2c8b8     02 CA 05 F6 | 	mov	COUNT_, #2
2c8bc     E8 00 A0 FD | 	call	#pushregs_
2c8c0     49 A7 02 F6 | 	mov	local01, arg01
2c8c4     00 A8 06 F6 | 	mov	local02, #0
2c8c8     03 A6 06 F1 | 	add	local01, #3
2c8cc     53 7B CA FA | 	rdbyte	result1, local01 wz
2c8d0     03 A6 86 F1 | 	sub	local01, #3
2c8d4     A4 00 90 AD |  if_e	jmp	#LR__4692
2c8d8     01 A6 06 F1 | 	add	local01, #1
2c8dc     53 93 C2 FA | 	rdbyte	arg01, local01
2c8e0     33 A6 06 F1 | 	add	local01, #51
2c8e4     53 95 02 F6 | 	mov	arg02, local01
2c8e8     04 A6 86 F1 | 	sub	local01, #4
2c8ec     53 97 02 FB | 	rdlong	arg03, local01
2c8f0     30 A6 86 F1 | 	sub	local01, #48
2c8f4     01 98 06 F6 | 	mov	arg04, #1
2c8f8     44 FB BF FD | 	call	#_fatfs_cc_disk_write
2c8fc     00 7A 0E F2 | 	cmp	result1, #0 wz
2c900     74 00 90 5D |  if_ne	jmp	#LR__4690
2c904     03 A6 06 F1 | 	add	local01, #3
2c908     53 01 48 FC | 	wrbyte	#0, local01
2c90c     2D A6 06 F1 | 	add	local01, #45
2c910     53 7B 02 FB | 	rdlong	result1, local01
2c914     0C A6 86 F1 | 	sub	local01, #12
2c918     53 99 02 FB | 	rdlong	arg04, local01
2c91c     4C 7B 82 F1 | 	sub	result1, arg04
2c920     08 A6 86 F1 | 	sub	local01, #8
2c924     53 99 02 FB | 	rdlong	arg04, local01
2c928     1C A6 86 F1 | 	sub	local01, #28
2c92c     4C 7B 12 F2 | 	cmp	result1, arg04 wc
2c930     48 00 90 3D |  if_ae	jmp	#LR__4691
2c934     02 A6 06 F1 | 	add	local01, #2
2c938     53 99 C2 FA | 	rdbyte	arg04, local01
2c93c     02 A6 86 F1 | 	sub	local01, #2
2c940     02 98 0E F2 | 	cmp	arg04, #2 wz
2c944     34 00 90 5D |  if_ne	jmp	#LR__4691
2c948     01 A6 06 F1 | 	add	local01, #1
2c94c     53 93 C2 FA | 	rdbyte	arg01, local01
2c950     33 A6 06 F1 | 	add	local01, #51
2c954     53 95 02 F6 | 	mov	arg02, local01
2c958     04 A6 86 F1 | 	sub	local01, #4
2c95c     53 97 02 FB | 	rdlong	arg03, local01
2c960     14 A6 86 F1 | 	sub	local01, #20
2c964     53 A7 02 FB | 	rdlong	local01, local01
2c968     53 97 02 F1 | 	add	arg03, local01
2c96c     01 98 06 F6 | 	mov	arg04, #1
2c970     CC FA BF FD | 	call	#_fatfs_cc_disk_write
2c974     04 00 90 FD | 	jmp	#LR__4691
2c978                 | LR__4690
2c978     01 A8 06 F6 | 	mov	local02, #1
2c97c                 | LR__4691
2c97c                 | LR__4692
2c97c                 | ' 			res = FR_DISK_ERR;
2c97c                 | ' 		}
2c97c                 | ' 	}
2c97c                 | ' 	return res;
2c97c     54 7B 02 F6 | 	mov	result1, local02
2c980     E7 F0 03 F6 | 	mov	ptra, fp
2c984     F2 00 A0 FD | 	call	#popregs_
2c988                 | _fatfs_cc_sync_window_ret
2c988     2D 00 64 FD | 	ret
2c98c                 | 
2c98c                 | _fatfs_cc_move_window
2c98c     03 CA 05 F6 | 	mov	COUNT_, #3
2c990     E8 00 A0 FD | 	call	#pushregs_
2c994     49 A7 02 F6 | 	mov	local01, arg01
2c998     4A A9 02 F6 | 	mov	local02, arg02
2c99c     00 AA 06 F6 | 	mov	local03, #0
2c9a0     30 A6 06 F1 | 	add	local01, #48
2c9a4     53 99 02 FB | 	rdlong	arg04, local01
2c9a8     30 A6 86 F1 | 	sub	local01, #48
2c9ac     4C A9 0A F2 | 	cmp	local02, arg04 wz
2c9b0     40 00 90 AD |  if_e	jmp	#LR__4701
2c9b4     53 93 02 F6 | 	mov	arg01, local01
2c9b8     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2c9bc     3D AB 0A F6 | 	mov	local03, result1 wz
2c9c0     30 00 90 5D |  if_ne	jmp	#LR__4700
2c9c4     01 A6 06 F1 | 	add	local01, #1
2c9c8     53 93 C2 FA | 	rdbyte	arg01, local01
2c9cc     33 A6 06 F1 | 	add	local01, #51
2c9d0     53 95 02 F6 | 	mov	arg02, local01
2c9d4     54 97 02 F6 | 	mov	arg03, local02
2c9d8     01 98 06 F6 | 	mov	arg04, #1
2c9dc     24 F9 BF FD | 	call	#_fatfs_cc_disk_read
2c9e0     00 7A 0E F2 | 	cmp	result1, #0 wz
2c9e4     01 A8 66 56 |  if_ne	neg	local02, #1
2c9e8     01 AA 06 56 |  if_ne	mov	local03, #1
2c9ec     04 A6 86 F1 | 	sub	local01, #4
2c9f0     53 A9 62 FC | 	wrlong	local02, local01
2c9f4                 | LR__4700
2c9f4                 | LR__4701
2c9f4                 | ' 				sect = (LBA_t)0 - 1;
2c9f4                 | ' 				res = FR_DISK_ERR;
2c9f4                 | ' 			}
2c9f4                 | ' 			fs->winsect = sect;
2c9f4                 | ' 		}
2c9f4                 | ' 	}
2c9f4                 | ' 	return res;
2c9f4     55 7B 02 F6 | 	mov	result1, local03
2c9f8     E7 F0 03 F6 | 	mov	ptra, fp
2c9fc     F2 00 A0 FD | 	call	#popregs_
2ca00                 | _fatfs_cc_move_window_ret
2ca00     2D 00 64 FD | 	ret
2ca04                 | 
2ca04                 | _fatfs_cc_sync_fs
2ca04     02 CA 05 F6 | 	mov	COUNT_, #2
2ca08     E8 00 A0 FD | 	call	#pushregs_
2ca0c     49 A7 02 F6 | 	mov	local01, arg01
2ca10     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2ca14     3D A9 0A F6 | 	mov	local02, result1 wz
2ca18     D8 00 90 5D |  if_ne	jmp	#LR__4711
2ca1c     53 99 C2 FA | 	rdbyte	arg04, local01
2ca20     03 98 0E F2 | 	cmp	arg04, #3 wz
2ca24     04 A6 06 A1 |  if_e	add	local01, #4
2ca28     53 99 C2 AA |  if_e	rdbyte	arg04, local01
2ca2c     04 A6 86 A1 |  if_e	sub	local01, #4
2ca30     01 98 0E A2 |  if_e	cmp	arg04, #1 wz
2ca34     A0 00 90 5D |  if_ne	jmp	#LR__4710
2ca38     34 A6 06 F1 | 	add	local01, #52
2ca3c     53 93 02 F6 | 	mov	arg01, local01
2ca40     00 94 06 F6 | 	mov	arg02, #0
2ca44     09 96 C6 F9 | 	decod	arg03, #9
2ca48     D8 00 A0 FD | 	call	#\builtin_bytefill_
2ca4c     53 93 02 F6 | 	mov	arg01, local01
2ca50     FE 93 06 F1 | 	add	arg01, #510
2ca54     55 00 80 FF 
2ca58     49 AB 58 FC | 	wrword	##43605, arg01
2ca5c     A9 B0 A0 FF 
2ca60     53 A5 68 FC | 	wrlong	##1096897106, local01
2ca64     53 93 02 F6 | 	mov	arg01, local01
2ca68     E4 93 06 F1 | 	add	arg01, #484
2ca6c     B9 A0 B0 FF 
2ca70     49 E5 68 FC | 	wrlong	##1631679090, arg01
2ca74     53 93 02 F6 | 	mov	arg01, local01
2ca78     E8 93 06 F1 | 	add	arg01, #488
2ca7c     20 A6 86 F1 | 	sub	local01, #32
2ca80     53 95 02 FB | 	rdlong	arg02, local01
2ca84     49 95 62 FC | 	wrlong	arg02, arg01
2ca88     20 A6 06 F1 | 	add	local01, #32
2ca8c     53 93 02 F6 | 	mov	arg01, local01
2ca90     EC 93 06 F1 | 	add	arg01, #492
2ca94     24 A6 86 F1 | 	sub	local01, #36
2ca98     53 95 02 FB | 	rdlong	arg02, local01
2ca9c     49 95 62 FC | 	wrlong	arg02, arg01
2caa0     10 A6 06 F1 | 	add	local01, #16
2caa4     53 97 02 FB | 	rdlong	arg03, local01
2caa8     01 96 06 F1 | 	add	arg03, #1
2caac     10 A6 06 F1 | 	add	local01, #16
2cab0     53 97 62 FC | 	wrlong	arg03, local01
2cab4     2F A6 86 F1 | 	sub	local01, #47
2cab8     53 93 C2 FA | 	rdbyte	arg01, local01
2cabc     33 A6 06 F1 | 	add	local01, #51
2cac0     53 95 02 F6 | 	mov	arg02, local01
2cac4     01 98 06 F6 | 	mov	arg04, #1
2cac8     74 F9 BF FD | 	call	#_fatfs_cc_disk_write
2cacc     30 A6 86 F1 | 	sub	local01, #48
2cad0     53 01 48 FC | 	wrbyte	#0, local01
2cad4     04 A6 86 F1 | 	sub	local01, #4
2cad8                 | LR__4710
2cad8     01 A6 06 F1 | 	add	local01, #1
2cadc     53 93 C2 FA | 	rdbyte	arg01, local01
2cae0     00 94 06 F6 | 	mov	arg02, #0
2cae4     00 96 06 F6 | 	mov	arg03, #0
2cae8     90 FA BF FD | 	call	#_fatfs_cc_disk_ioctl
2caec     00 7A 0E F2 | 	cmp	result1, #0 wz
2caf0     01 A8 06 56 |  if_ne	mov	local02, #1
2caf4                 | LR__4711
2caf4                 | ' 	}
2caf4                 | ' 
2caf4                 | ' 	return res;
2caf4     54 7B 02 F6 | 	mov	result1, local02
2caf8     E7 F0 03 F6 | 	mov	ptra, fp
2cafc     F2 00 A0 FD | 	call	#popregs_
2cb00                 | _fatfs_cc_sync_fs_ret
2cb00     2D 00 64 FD | 	ret
2cb04                 | 
2cb04                 | _fatfs_cc_clst2sect
2cb04     02 94 86 F1 | 	sub	arg02, #2
2cb08     18 92 06 F1 | 	add	arg01, #24
2cb0c     49 81 02 FB | 	rdlong	_var01, arg01
2cb10     18 92 86 F1 | 	sub	arg01, #24
2cb14     02 80 86 F1 | 	sub	_var01, #2
2cb18     40 95 12 F2 | 	cmp	arg02, _var01 wc
2cb1c     00 7A 06 36 |  if_ae	mov	result1, #0
2cb20     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2cb24     0A 92 06 F1 | 	add	arg01, #10
2cb28     49 81 E2 FA | 	rdword	_var01, arg01
2cb2c     4A 81 02 FD | 	qmul	_var01, arg02
2cb30                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2cb30     22 92 06 F1 | 	add	arg01, #34
2cb34     49 7B 02 FB | 	rdlong	result1, arg01
2cb38     18 80 62 FD | 	getqx	_var01
2cb3c     40 7B 02 F1 | 	add	result1, _var01
2cb40                 | _fatfs_cc_clst2sect_ret
2cb40     2D 00 64 FD | 	ret
2cb44                 | 
2cb44                 | _fatfs_cc_get_fat
2cb44     07 CA 05 F6 | 	mov	COUNT_, #7
2cb48     E8 00 A0 FD | 	call	#pushregs_
2cb4c     4A A7 02 F6 | 	mov	local01, arg02
2cb50     49 A9 02 FB | 	rdlong	local02, arg01
2cb54     02 A6 16 F2 | 	cmp	local01, #2 wc
2cb58     14 00 90 CD |  if_b	jmp	#LR__4720
2cb5c     18 A8 06 F1 | 	add	local02, #24
2cb60     54 AB 02 FB | 	rdlong	local03, local02
2cb64     18 A8 86 F1 | 	sub	local02, #24
2cb68     55 A7 12 F2 | 	cmp	local01, local03 wc
2cb6c     08 00 90 CD |  if_b	jmp	#LR__4721
2cb70                 | LR__4720
2cb70     01 AC 06 F6 | 	mov	local04, #1
2cb74     60 01 90 FD | 	jmp	#LR__4728
2cb78                 | LR__4721
2cb78     01 AC 66 F6 | 	neg	local04, #1
2cb7c                 | ' 		val = 0xFFFFFFFF;
2cb7c                 | ' 
2cb7c                 | ' 		switch (fs->fs_type) {
2cb7c     54 AF C2 FA | 	rdbyte	local05, local02
2cb80     01 AE 86 F1 | 	sub	local05, #1
2cb84     03 AE 26 F3 | 	fle	local05, #3
2cb88     30 AE 62 FD | 	jmprel	local05
2cb8c                 | LR__4722
2cb8c     0C 00 90 FD | 	jmp	#LR__4723
2cb90     B8 00 90 FD | 	jmp	#LR__4724
2cb94     F8 00 90 FD | 	jmp	#LR__4725
2cb98     38 01 90 FD | 	jmp	#LR__4726
2cb9c                 | LR__4723
2cb9c     53 AF 02 F6 | 	mov	local05, local01
2cba0     53 93 02 F6 | 	mov	arg01, local01
2cba4     01 92 46 F0 | 	shr	arg01, #1
2cba8     49 AF 02 F1 | 	add	local05, arg01
2cbac     54 93 02 F6 | 	mov	arg01, local02
2cbb0     57 B1 02 F6 | 	mov	local06, local05
2cbb4     09 B0 46 F0 | 	shr	local06, #9
2cbb8     24 A8 06 F1 | 	add	local02, #36
2cbbc     54 95 02 FB | 	rdlong	arg02, local02
2cbc0     24 A8 86 F1 | 	sub	local02, #36
2cbc4     58 95 02 F1 | 	add	arg02, local06
2cbc8     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2cbcc     00 7A 0E F2 | 	cmp	result1, #0 wz
2cbd0     04 01 90 5D |  if_ne	jmp	#LR__4727
2cbd4     57 B1 02 F6 | 	mov	local06, local05
2cbd8     FF B1 06 F5 | 	and	local06, #511
2cbdc     54 93 02 F6 | 	mov	arg01, local02
2cbe0     34 92 06 F1 | 	add	arg01, #52
2cbe4     49 B1 02 F1 | 	add	local06, arg01
2cbe8     58 B3 C2 FA | 	rdbyte	local07, local06
2cbec     54 93 02 F6 | 	mov	arg01, local02
2cbf0     01 AE 06 F1 | 	add	local05, #1
2cbf4     57 B1 02 F6 | 	mov	local06, local05
2cbf8     09 B0 46 F0 | 	shr	local06, #9
2cbfc     24 A8 06 F1 | 	add	local02, #36
2cc00     54 95 02 FB | 	rdlong	arg02, local02
2cc04     24 A8 86 F1 | 	sub	local02, #36
2cc08     58 95 02 F1 | 	add	arg02, local06
2cc0c     7C FD BF FD | 	call	#_fatfs_cc_move_window
2cc10     00 7A 0E F2 | 	cmp	result1, #0 wz
2cc14     C0 00 90 5D |  if_ne	jmp	#LR__4727
2cc18     FF AF 06 F5 | 	and	local05, #511
2cc1c     34 A8 06 F1 | 	add	local02, #52
2cc20     54 AF 02 F1 | 	add	local05, local02
2cc24     57 B1 C2 FA | 	rdbyte	local06, local05
2cc28     08 B0 66 F0 | 	shl	local06, #8
2cc2c     58 B3 42 F5 | 	or	local07, local06
2cc30     01 A6 CE F7 | 	test	local01, #1 wz
2cc34     04 B2 46 50 |  if_ne	shr	local07, #4
2cc38     59 AB 02 56 |  if_ne	mov	local03, local07
2cc3c     0B B2 46 A7 |  if_e	zerox	local07, #11
2cc40     59 AB 02 A6 |  if_e	mov	local03, local07
2cc44     55 AD 02 F6 | 	mov	local04, local03
2cc48                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2cc48                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2cc48                 | ' 			break;
2cc48     8C 00 90 FD | 	jmp	#LR__4727
2cc4c                 | LR__4724
2cc4c     54 93 02 F6 | 	mov	arg01, local02
2cc50     53 B1 02 F6 | 	mov	local06, local01
2cc54     08 B0 46 F0 | 	shr	local06, #8
2cc58     24 A8 06 F1 | 	add	local02, #36
2cc5c     54 95 02 FB | 	rdlong	arg02, local02
2cc60     24 A8 86 F1 | 	sub	local02, #36
2cc64     58 95 02 F1 | 	add	arg02, local06
2cc68     20 FD BF FD | 	call	#_fatfs_cc_move_window
2cc6c     00 7A 0E F2 | 	cmp	result1, #0 wz
2cc70     64 00 90 5D |  if_ne	jmp	#LR__4727
2cc74     34 A8 06 F1 | 	add	local02, #52
2cc78     01 A6 66 F0 | 	shl	local01, #1
2cc7c     FF A7 06 F5 | 	and	local01, #511
2cc80     53 A9 02 F1 | 	add	local02, local01
2cc84                 | ' {
2cc84                 | ' 
2cc84                 | ' 	return *((WORD*)ptr);
2cc84     54 7B E2 FA | 	rdword	result1, local02
2cc88     3D AD 32 F9 | 	getword	local04, result1, #0
2cc8c                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2cc8c                 | ' 			break;
2cc8c     48 00 90 FD | 	jmp	#LR__4727
2cc90                 | LR__4725
2cc90     54 93 02 F6 | 	mov	arg01, local02
2cc94     53 B1 02 F6 | 	mov	local06, local01
2cc98     07 B0 46 F0 | 	shr	local06, #7
2cc9c     24 A8 06 F1 | 	add	local02, #36
2cca0     54 95 02 FB | 	rdlong	arg02, local02
2cca4     24 A8 86 F1 | 	sub	local02, #36
2cca8     58 95 02 F1 | 	add	arg02, local06
2ccac     DC FC BF FD | 	call	#_fatfs_cc_move_window
2ccb0     00 7A 0E F2 | 	cmp	result1, #0 wz
2ccb4     20 00 90 5D |  if_ne	jmp	#LR__4727
2ccb8     34 A8 06 F1 | 	add	local02, #52
2ccbc     02 A6 66 F0 | 	shl	local01, #2
2ccc0     FF A7 06 F5 | 	and	local01, #511
2ccc4     53 A9 02 F1 | 	add	local02, local01
2ccc8                 | ' {
2ccc8                 | ' 
2ccc8                 | ' 	return *((DWORD*)ptr);
2ccc8     54 AD 02 FB | 	rdlong	local04, local02
2cccc     7C AC 06 F4 | 	bitl	local04, #124
2ccd0                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2ccd0                 | ' 			break;
2ccd0     04 00 90 FD | 	jmp	#LR__4727
2ccd4                 | LR__4726
2ccd4     01 AC 06 F6 | 	mov	local04, #1
2ccd8                 | LR__4727
2ccd8                 | LR__4728
2ccd8                 | ' 			val = 1;
2ccd8                 | ' 		}
2ccd8                 | ' 	}
2ccd8                 | ' 
2ccd8                 | ' 	return val;
2ccd8     56 7B 02 F6 | 	mov	result1, local04
2ccdc     E7 F0 03 F6 | 	mov	ptra, fp
2cce0     F2 00 A0 FD | 	call	#popregs_
2cce4                 | _fatfs_cc_get_fat_ret
2cce4     2D 00 64 FD | 	ret
2cce8                 | 
2cce8                 | _fatfs_cc_put_fat
2cce8     08 CA 05 F6 | 	mov	COUNT_, #8
2ccec     E8 00 A0 FD | 	call	#pushregs_
2ccf0     49 A7 02 F6 | 	mov	local01, arg01
2ccf4     4A A9 02 F6 | 	mov	local02, arg02
2ccf8     4B AB 02 F6 | 	mov	local03, arg03
2ccfc     02 AC 06 F6 | 	mov	local04, #2
2cd00     02 A8 16 F2 | 	cmp	local02, #2 wc
2cd04     E0 01 90 CD |  if_b	jmp	#LR__4737
2cd08     18 A6 06 F1 | 	add	local01, #24
2cd0c     53 AF 02 FB | 	rdlong	local05, local01
2cd10     18 A6 86 F1 | 	sub	local01, #24
2cd14     57 A9 12 F2 | 	cmp	local02, local05 wc
2cd18     CC 01 90 3D |  if_ae	jmp	#LR__4737
2cd1c                 | ' 		switch (fs->fs_type) {
2cd1c     53 B1 C2 FA | 	rdbyte	local06, local01
2cd20     01 B0 86 F1 | 	sub	local06, #1
2cd24     03 B0 26 F3 | 	fle	local06, #3
2cd28     30 B0 62 FD | 	jmprel	local06
2cd2c                 | LR__4730
2cd2c     0C 00 90 FD | 	jmp	#LR__4731
2cd30     F4 00 90 FD | 	jmp	#LR__4734
2cd34     3C 01 90 FD | 	jmp	#LR__4735
2cd38     AC 01 90 FD | 	jmp	#LR__4736
2cd3c                 | LR__4731
2cd3c     54 B3 02 F6 | 	mov	local07, local02
2cd40     54 AF 02 F6 | 	mov	local05, local02
2cd44     01 AE 46 F0 | 	shr	local05, #1
2cd48     57 B3 02 F1 | 	add	local07, local05
2cd4c     53 93 02 F6 | 	mov	arg01, local01
2cd50     59 B1 02 F6 | 	mov	local06, local07
2cd54     09 B0 46 F0 | 	shr	local06, #9
2cd58     24 A6 06 F1 | 	add	local01, #36
2cd5c     53 95 02 FB | 	rdlong	arg02, local01
2cd60     24 A6 86 F1 | 	sub	local01, #36
2cd64     58 95 02 F1 | 	add	arg02, local06
2cd68     20 FC BF FD | 	call	#_fatfs_cc_move_window
2cd6c     3D AD 0A F6 | 	mov	local04, result1 wz
2cd70     74 01 90 5D |  if_ne	jmp	#LR__4736
2cd74     53 B5 02 F6 | 	mov	local08, local01
2cd78     34 B4 06 F1 | 	add	local08, #52
2cd7c     59 AF 02 F6 | 	mov	local05, local07
2cd80     FF AF 06 F5 | 	and	local05, #511
2cd84     57 B5 02 F1 | 	add	local08, local05
2cd88     01 A8 CE F7 | 	test	local02, #1 wz
2cd8c     01 B2 06 F1 | 	add	local07, #1
2cd90     18 00 90 AD |  if_e	jmp	#LR__4732
2cd94     5A AF C2 FA | 	rdbyte	local05, local08
2cd98     57 AF 42 F8 | 	getnib	local05, local05, #0
2cd9c     55 B1 E2 F8 | 	getbyte	local06, local03, #0
2cda0     04 B0 66 F0 | 	shl	local06, #4
2cda4     58 AF 42 F5 | 	or	local05, local06
2cda8     04 00 90 FD | 	jmp	#LR__4733
2cdac                 | LR__4732
2cdac     55 AF 02 F6 | 	mov	local05, local03
2cdb0                 | LR__4733
2cdb0     5A AF 42 FC | 	wrbyte	local05, local08
2cdb4     03 A6 06 F1 | 	add	local01, #3
2cdb8     53 03 48 FC | 	wrbyte	#1, local01
2cdbc     03 A6 86 F1 | 	sub	local01, #3
2cdc0     53 93 02 F6 | 	mov	arg01, local01
2cdc4     59 B5 02 F6 | 	mov	local08, local07
2cdc8     09 B4 46 F0 | 	shr	local08, #9
2cdcc     24 A6 06 F1 | 	add	local01, #36
2cdd0     53 95 02 FB | 	rdlong	arg02, local01
2cdd4     24 A6 86 F1 | 	sub	local01, #36
2cdd8     5A 95 02 F1 | 	add	arg02, local08
2cddc     AC FB BF FD | 	call	#_fatfs_cc_move_window
2cde0     3D AD 0A F6 | 	mov	local04, result1 wz
2cde4     00 01 90 5D |  if_ne	jmp	#LR__4736
2cde8     53 B5 02 F6 | 	mov	local08, local01
2cdec     34 B4 06 F1 | 	add	local08, #52
2cdf0     FF B3 06 F5 | 	and	local07, #511
2cdf4     59 B5 02 F1 | 	add	local08, local07
2cdf8     01 A8 CE F7 | 	test	local02, #1 wz
2cdfc     04 AA 46 50 |  if_ne	shr	local03, #4
2ce00     55 AF 02 56 |  if_ne	mov	local05, local03
2ce04     5A AF C2 AA |  if_e	rdbyte	local05, local08
2ce08     F0 AE 06 A5 |  if_e	and	local05, #240
2ce0c     55 AB EA A8 |  if_e	getbyte	local03, local03, #1
2ce10     55 AB 42 A8 |  if_e	getnib	local03, local03, #0
2ce14     55 AF 42 A5 |  if_e	or	local05, local03
2ce18     5A AF 42 FC | 	wrbyte	local05, local08
2ce1c     03 A6 06 F1 | 	add	local01, #3
2ce20     53 03 48 FC | 	wrbyte	#1, local01
2ce24                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2ce24                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2ce24                 | ' 			fs->wflag = 1;
2ce24                 | ' 			break;
2ce24     C0 00 90 FD | 	jmp	#LR__4736
2ce28                 | LR__4734
2ce28     53 93 02 F6 | 	mov	arg01, local01
2ce2c     54 B5 02 F6 | 	mov	local08, local02
2ce30     08 B4 46 F0 | 	shr	local08, #8
2ce34     24 A6 06 F1 | 	add	local01, #36
2ce38     53 95 02 FB | 	rdlong	arg02, local01
2ce3c     24 A6 86 F1 | 	sub	local01, #36
2ce40     5A 95 02 F1 | 	add	arg02, local08
2ce44     44 FB BF FD | 	call	#_fatfs_cc_move_window
2ce48     3D AD 0A F6 | 	mov	local04, result1 wz
2ce4c     98 00 90 5D |  if_ne	jmp	#LR__4736
2ce50     34 A6 06 F1 | 	add	local01, #52
2ce54     53 93 02 F6 | 	mov	arg01, local01
2ce58     01 A8 66 F0 | 	shl	local02, #1
2ce5c     FF A9 06 F5 | 	and	local02, #511
2ce60     54 93 02 F1 | 	add	arg01, local02
2ce64     49 AB 52 FC | 	wrword	local03, arg01
2ce68     31 A6 86 F1 | 	sub	local01, #49
2ce6c     53 03 48 FC | 	wrbyte	#1, local01
2ce70                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2ce70                 | ' 			fs->wflag = 1;
2ce70                 | ' 			break;
2ce70     74 00 90 FD | 	jmp	#LR__4736
2ce74                 | LR__4735
2ce74     53 93 02 F6 | 	mov	arg01, local01
2ce78     54 B5 02 F6 | 	mov	local08, local02
2ce7c     07 B4 46 F0 | 	shr	local08, #7
2ce80     24 A6 06 F1 | 	add	local01, #36
2ce84     53 95 02 FB | 	rdlong	arg02, local01
2ce88     24 A6 86 F1 | 	sub	local01, #36
2ce8c     5A 95 02 F1 | 	add	arg02, local08
2ce90     F8 FA BF FD | 	call	#_fatfs_cc_move_window
2ce94     3D AD 0A F6 | 	mov	local04, result1 wz
2ce98     4C 00 90 5D |  if_ne	jmp	#LR__4736
2ce9c     7C AA 06 F4 | 	bitl	local03, #124
2cea0     53 93 02 F6 | 	mov	arg01, local01
2cea4     34 92 06 F1 | 	add	arg01, #52
2cea8     54 B5 02 F6 | 	mov	local08, local02
2ceac     02 B4 66 F0 | 	shl	local08, #2
2ceb0     FF B5 06 F5 | 	and	local08, #511
2ceb4     5A 93 02 F1 | 	add	arg01, local08
2ceb8                 | ' {
2ceb8                 | ' 
2ceb8                 | ' 	return *((DWORD*)ptr);
2ceb8     49 B5 02 FB | 	rdlong	local08, arg01
2cebc     00 00 78 FF 
2cec0     00 B4 06 F5 | 	and	local08, ##-268435456
2cec4     5A AB 42 F5 | 	or	local03, local08
2cec8     34 A6 06 F1 | 	add	local01, #52
2cecc     53 93 02 F6 | 	mov	arg01, local01
2ced0     02 A8 66 F0 | 	shl	local02, #2
2ced4     FF A9 06 F5 | 	and	local02, #511
2ced8     54 93 02 F1 | 	add	arg01, local02
2cedc     49 AB 62 FC | 	wrlong	local03, arg01
2cee0     31 A6 86 F1 | 	sub	local01, #49
2cee4     53 03 48 FC | 	wrbyte	#1, local01
2cee8                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2cee8                 | ' 			}
2cee8                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2cee8                 | ' 			fs->wflag = 1;
2cee8                 | ' 			break;
2cee8                 | LR__4736
2cee8                 | LR__4737
2cee8                 | ' 		}
2cee8                 | ' 	}
2cee8                 | ' 	return res;
2cee8     56 7B 02 F6 | 	mov	result1, local04
2ceec     E7 F0 03 F6 | 	mov	ptra, fp
2cef0     F2 00 A0 FD | 	call	#popregs_
2cef4                 | _fatfs_cc_put_fat_ret
2cef4     2D 00 64 FD | 	ret
2cef8                 | 
2cef8                 | _fatfs_cc_remove_chain
2cef8     05 CA 05 F6 | 	mov	COUNT_, #5
2cefc     E8 00 A0 FD | 	call	#pushregs_
2cf00     49 A7 02 F6 | 	mov	local01, arg01
2cf04     4A A9 02 F6 | 	mov	local02, arg02
2cf08     4B AB 02 F6 | 	mov	local03, arg03
2cf0c     53 AD 02 FB | 	rdlong	local04, local01
2cf10     02 A8 16 F2 | 	cmp	local02, #2 wc
2cf14     14 00 90 CD |  if_b	jmp	#LR__4740
2cf18     18 AC 06 F1 | 	add	local04, #24
2cf1c     56 7B 02 FB | 	rdlong	result1, local04
2cf20     18 AC 86 F1 | 	sub	local04, #24
2cf24     3D A9 12 F2 | 	cmp	local02, result1 wc
2cf28     08 00 90 CD |  if_b	jmp	#LR__4741
2cf2c                 | LR__4740
2cf2c     02 7A 06 F6 | 	mov	result1, #2
2cf30     CC 00 90 FD | 	jmp	#LR__4746
2cf34                 | LR__4741
2cf34     00 AA 0E F2 | 	cmp	local03, #0 wz
2cf38     18 00 90 AD |  if_e	jmp	#LR__4742
2cf3c     55 95 02 F6 | 	mov	arg02, local03
2cf40     56 93 02 F6 | 	mov	arg01, local04
2cf44     01 96 66 F6 | 	neg	arg03, #1
2cf48     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2cf4c     00 7A 0E F2 | 	cmp	result1, #0 wz
2cf50     AC 00 90 5D |  if_ne	jmp	#LR__4746
2cf54                 | LR__4742
2cf54                 | ' 	}
2cf54                 | ' 
2cf54                 | ' 
2cf54                 | ' 	do {
2cf54                 | LR__4743
2cf54     54 95 02 F6 | 	mov	arg02, local02
2cf58     53 93 02 F6 | 	mov	arg01, local01
2cf5c     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2cf60     3D AF 0A F6 | 	mov	local05, result1 wz
2cf64     94 00 90 AD |  if_e	jmp	#LR__4745
2cf68     01 AE 0E F2 | 	cmp	local05, #1 wz
2cf6c     02 7A 06 A6 |  if_e	mov	result1, #2
2cf70     8C 00 90 AD |  if_e	jmp	#LR__4746
2cf74     FF FF 7F FF 
2cf78     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2cf7c     01 7A 06 A6 |  if_e	mov	result1, #1
2cf80     7C 00 90 AD |  if_e	jmp	#LR__4746
2cf84     54 95 02 F6 | 	mov	arg02, local02
2cf88     56 93 02 F6 | 	mov	arg01, local04
2cf8c     00 96 06 F6 | 	mov	arg03, #0
2cf90     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2cf94     3D AB 0A F6 | 	mov	local03, result1 wz
2cf98     55 7B 02 56 |  if_ne	mov	result1, local03
2cf9c     60 00 90 5D |  if_ne	jmp	#LR__4746
2cfa0     18 AC 06 F1 | 	add	local04, #24
2cfa4     56 AB 02 FB | 	rdlong	local03, local04
2cfa8     02 AA 86 F1 | 	sub	local03, #2
2cfac     04 AC 86 F1 | 	sub	local04, #4
2cfb0     56 A9 02 FB | 	rdlong	local02, local04
2cfb4     14 AC 86 F1 | 	sub	local04, #20
2cfb8     55 A9 12 F2 | 	cmp	local02, local03 wc
2cfbc     24 00 90 3D |  if_ae	jmp	#LR__4744
2cfc0     14 AC 06 F1 | 	add	local04, #20
2cfc4     56 AB 02 FB | 	rdlong	local03, local04
2cfc8     01 AA 06 F1 | 	add	local03, #1
2cfcc     56 AB 62 FC | 	wrlong	local03, local04
2cfd0     10 AC 86 F1 | 	sub	local04, #16
2cfd4     56 AB C2 FA | 	rdbyte	local03, local04
2cfd8     01 AA 46 F5 | 	or	local03, #1
2cfdc     56 AB 42 FC | 	wrbyte	local03, local04
2cfe0     04 AC 86 F1 | 	sub	local04, #4
2cfe4                 | LR__4744
2cfe4     57 A9 02 F6 | 	mov	local02, local05
2cfe8     18 AC 06 F1 | 	add	local04, #24
2cfec     56 AF 02 FB | 	rdlong	local05, local04
2cff0     18 AC 86 F1 | 	sub	local04, #24
2cff4     57 A9 12 F2 | 	cmp	local02, local05 wc
2cff8     58 FF 9F CD |  if_b	jmp	#LR__4743
2cffc                 | LR__4745
2cffc                 | ' #line 1500 "ff.c"
2cffc                 | ' 	return FR_OK;
2cffc     00 7A 06 F6 | 	mov	result1, #0
2d000                 | LR__4746
2d000     E7 F0 03 F6 | 	mov	ptra, fp
2d004     F2 00 A0 FD | 	call	#popregs_
2d008                 | _fatfs_cc_remove_chain_ret
2d008     2D 00 64 FD | 	ret
2d00c                 | 
2d00c                 | _fatfs_cc_create_chain
2d00c     09 CA 05 F6 | 	mov	COUNT_, #9
2d010     E8 00 A0 FD | 	call	#pushregs_
2d014     49 A7 02 F6 | 	mov	local01, arg01
2d018     4A A9 0A F6 | 	mov	local02, arg02 wz
2d01c     53 AB 02 FB | 	rdlong	local03, local01
2d020     28 00 90 5D |  if_ne	jmp	#LR__4750
2d024     10 AA 06 F1 | 	add	local03, #16
2d028     55 AD 0A FB | 	rdlong	local04, local03 wz
2d02c     10 AA 86 F1 | 	sub	local03, #16
2d030     18 AA 06 51 |  if_ne	add	local03, #24
2d034     55 AF 02 5B |  if_ne	rdlong	local05, local03
2d038     18 AA 86 51 |  if_ne	sub	local03, #24
2d03c     57 AD 12 52 |  if_ne	cmp	local04, local05 wc
2d040     50 00 90 4D |  if_c_and_nz	jmp	#LR__4751
2d044     01 AC 06 F6 | 	mov	local04, #1
2d048     48 00 90 FD | 	jmp	#LR__4751
2d04c                 | LR__4750
2d04c     54 95 02 F6 | 	mov	arg02, local02
2d050     53 93 02 F6 | 	mov	arg01, local01
2d054     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2d058     3D AD 02 F6 | 	mov	local04, result1
2d05c     02 AC 16 F2 | 	cmp	local04, #2 wc
2d060     01 7A 06 C6 |  if_b	mov	result1, #1
2d064     BC 01 90 CD |  if_b	jmp	#LR__4761
2d068     FF FF 7F FF 
2d06c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2d070     56 7B 02 A6 |  if_e	mov	result1, local04
2d074     AC 01 90 AD |  if_e	jmp	#LR__4761
2d078     18 AA 06 F1 | 	add	local03, #24
2d07c     55 AF 02 FB | 	rdlong	local05, local03
2d080     18 AA 86 F1 | 	sub	local03, #24
2d084     57 AD 12 F2 | 	cmp	local04, local05 wc
2d088     56 7B 02 C6 |  if_b	mov	result1, local04
2d08c     94 01 90 CD |  if_b	jmp	#LR__4761
2d090     54 AD 02 F6 | 	mov	local04, local02
2d094                 | LR__4751
2d094     14 AA 06 F1 | 	add	local03, #20
2d098     55 AF 0A FB | 	rdlong	local05, local03 wz
2d09c     14 AA 86 F1 | 	sub	local03, #20
2d0a0     00 7A 06 A6 |  if_e	mov	result1, #0
2d0a4     7C 01 90 AD |  if_e	jmp	#LR__4761
2d0a8     00 B0 06 F6 | 	mov	local06, #0
2d0ac     54 AD 0A F2 | 	cmp	local04, local02 wz
2d0b0     74 00 90 5D |  if_ne	jmp	#LR__4754
2d0b4     56 B1 02 F6 | 	mov	local06, local04
2d0b8     01 B0 06 F1 | 	add	local06, #1
2d0bc     18 AA 06 F1 | 	add	local03, #24
2d0c0     55 AF 02 FB | 	rdlong	local05, local03
2d0c4     18 AA 86 F1 | 	sub	local03, #24
2d0c8     57 B1 12 F2 | 	cmp	local06, local05 wc
2d0cc     02 B0 06 36 |  if_ae	mov	local06, #2
2d0d0     58 95 02 F6 | 	mov	arg02, local06
2d0d4     53 93 02 F6 | 	mov	arg01, local01
2d0d8     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2d0dc     3D AF 02 F6 | 	mov	local05, result1
2d0e0     01 AE 0E F2 | 	cmp	local05, #1 wz
2d0e4     FF FF 7F 5F 
2d0e8     FF AF 0E 52 |  if_ne	cmp	local05, ##-1 wz
2d0ec     57 7B 02 A6 |  if_e	mov	result1, local05
2d0f0     30 01 90 AD |  if_e	jmp	#LR__4761
2d0f4     00 AE 0E F2 | 	cmp	local05, #0 wz
2d0f8     2C 00 90 AD |  if_e	jmp	#LR__4753
2d0fc     10 AA 06 F1 | 	add	local03, #16
2d100     55 B3 02 FB | 	rdlong	local07, local03
2d104     10 AA 86 F1 | 	sub	local03, #16
2d108     02 B2 16 F2 | 	cmp	local07, #2 wc
2d10c     14 00 90 CD |  if_b	jmp	#LR__4752
2d110     18 AA 06 F1 | 	add	local03, #24
2d114     55 AF 02 FB | 	rdlong	local05, local03
2d118     18 AA 86 F1 | 	sub	local03, #24
2d11c     57 B3 12 F2 | 	cmp	local07, local05 wc
2d120     59 AD 02 C6 |  if_b	mov	local04, local07
2d124                 | LR__4752
2d124     00 B0 06 F6 | 	mov	local06, #0
2d128                 | LR__4753
2d128                 | LR__4754
2d128     00 B0 0E F2 | 	cmp	local06, #0 wz
2d12c     60 00 90 5D |  if_ne	jmp	#LR__4757
2d130     56 B1 02 F6 | 	mov	local06, local04
2d134                 | ' 			ncl = scl;
2d134                 | ' 			for (;;) {
2d134                 | LR__4755
2d134     01 B0 06 F1 | 	add	local06, #1
2d138     18 AA 06 F1 | 	add	local03, #24
2d13c     55 AF 02 FB | 	rdlong	local05, local03
2d140     18 AA 86 F1 | 	sub	local03, #24
2d144     57 B1 12 F2 | 	cmp	local06, local05 wc
2d148     02 B0 06 36 |  if_ae	mov	local06, #2
2d14c     56 B1 1A 32 |  if_ae	cmp	local06, local04 wcz
2d150     00 7A 06 16 |  if_a	mov	result1, #0
2d154     CC 00 90 1D |  if_a	jmp	#LR__4761
2d158     58 95 02 F6 | 	mov	arg02, local06
2d15c     53 93 02 F6 | 	mov	arg01, local01
2d160     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2d164     3D B3 0A F6 | 	mov	local07, result1 wz
2d168     24 00 90 AD |  if_e	jmp	#LR__4756
2d16c     01 B2 0E F2 | 	cmp	local07, #1 wz
2d170     FF FF 7F 5F 
2d174     FF B3 0E 52 |  if_ne	cmp	local07, ##-1 wz
2d178     59 7B 02 A6 |  if_e	mov	result1, local07
2d17c     A4 00 90 AD |  if_e	jmp	#LR__4761
2d180     56 B1 0A F2 | 	cmp	local06, local04 wz
2d184     00 7A 06 A6 |  if_e	mov	result1, #0
2d188     98 00 90 AD |  if_e	jmp	#LR__4761
2d18c     A4 FF 9F FD | 	jmp	#LR__4755
2d190                 | LR__4756
2d190                 | LR__4757
2d190     55 93 02 F6 | 	mov	arg01, local03
2d194     58 95 02 F6 | 	mov	arg02, local06
2d198     01 96 66 F6 | 	neg	arg03, #1
2d19c     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2d1a0     3D B5 0A F6 | 	mov	local08, result1 wz
2d1a4     1C 00 90 5D |  if_ne	jmp	#LR__4758
2d1a8     00 A8 0E F2 | 	cmp	local02, #0 wz
2d1ac     14 00 90 AD |  if_e	jmp	#LR__4758
2d1b0     55 93 02 F6 | 	mov	arg01, local03
2d1b4     54 95 02 F6 | 	mov	arg02, local02
2d1b8     58 97 02 F6 | 	mov	arg03, local06
2d1bc     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2d1c0     3D B5 02 F6 | 	mov	local08, result1
2d1c4                 | LR__4758
2d1c4     00 B4 0E F2 | 	cmp	local08, #0 wz
2d1c8     4C 00 90 5D |  if_ne	jmp	#LR__4759
2d1cc     10 AA 06 F1 | 	add	local03, #16
2d1d0     55 B1 62 FC | 	wrlong	local06, local03
2d1d4     08 AA 06 F1 | 	add	local03, #8
2d1d8     55 AF 02 FB | 	rdlong	local05, local03
2d1dc     02 AE 86 F1 | 	sub	local05, #2
2d1e0     04 AA 86 F1 | 	sub	local03, #4
2d1e4     55 B7 02 FB | 	rdlong	local09, local03
2d1e8     14 AA 86 F1 | 	sub	local03, #20
2d1ec     57 B7 1A F2 | 	cmp	local09, local05 wcz
2d1f0     14 AA 06 E1 |  if_be	add	local03, #20
2d1f4     55 B7 02 EB |  if_be	rdlong	local09, local03
2d1f8     01 B6 86 E1 |  if_be	sub	local09, #1
2d1fc     55 B7 62 EC |  if_be	wrlong	local09, local03
2d200     14 AA 86 E1 |  if_be	sub	local03, #20
2d204     04 AA 06 F1 | 	add	local03, #4
2d208     55 AF C2 FA | 	rdbyte	local05, local03
2d20c     01 AE 46 F5 | 	or	local05, #1
2d210     55 AF 42 FC | 	wrbyte	local05, local03
2d214     08 00 90 FD | 	jmp	#LR__4760
2d218                 | LR__4759
2d218     01 B4 0E F2 | 	cmp	local08, #1 wz
2d21c     01 B0 C6 F6 | 	negz	local06, #1
2d220                 | LR__4760
2d220                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2d220                 | ' 	}
2d220                 | ' 
2d220                 | ' 	return ncl;
2d220     58 7B 02 F6 | 	mov	result1, local06
2d224                 | LR__4761
2d224     E7 F0 03 F6 | 	mov	ptra, fp
2d228     F2 00 A0 FD | 	call	#popregs_
2d22c                 | _fatfs_cc_create_chain_ret
2d22c     2D 00 64 FD | 	ret
2d230                 | 
2d230                 | _fatfs_cc_dir_clear
2d230     06 CA 05 F6 | 	mov	COUNT_, #6
2d234     E8 00 A0 FD | 	call	#pushregs_
2d238     49 A7 02 F6 | 	mov	local01, arg01
2d23c     4A A9 02 F6 | 	mov	local02, arg02
2d240     53 93 02 F6 | 	mov	arg01, local01
2d244     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2d248     00 7A 0E F2 | 	cmp	result1, #0 wz
2d24c     01 7A 06 56 |  if_ne	mov	result1, #1
2d250     90 00 90 5D |  if_ne	jmp	#LR__4772
2d254     53 93 02 F6 | 	mov	arg01, local01
2d258     54 95 02 F6 | 	mov	arg02, local02
2d25c     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2d260     3D AB 02 F6 | 	mov	local03, result1
2d264     30 A6 06 F1 | 	add	local01, #48
2d268     53 AB 62 FC | 	wrlong	local03, local01
2d26c     04 A6 06 F1 | 	add	local01, #4
2d270     53 93 02 F6 | 	mov	arg01, local01
2d274     00 94 06 F6 | 	mov	arg02, #0
2d278     09 96 C6 F9 | 	decod	arg03, #9
2d27c     D8 00 A0 FD | 	call	#\builtin_bytefill_
2d280     53 AD 02 F6 | 	mov	local04, local01
2d284                 | ' #line 1667 "ff.c"
2d284                 | ' 	{
2d284                 | ' 		ibuf = fs->win; szb = 1;
2d284                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2d284     00 AE 06 F6 | 	mov	local05, #0
2d288     34 A6 86 F1 | 	sub	local01, #52
2d28c                 | LR__4770
2d28c     0A A6 06 F1 | 	add	local01, #10
2d290     53 B1 E2 FA | 	rdword	local06, local01
2d294     0A A6 86 F1 | 	sub	local01, #10
2d298     58 AF 12 F2 | 	cmp	local05, local06 wc
2d29c     2C 00 90 3D |  if_ae	jmp	#LR__4771
2d2a0     01 A6 06 F1 | 	add	local01, #1
2d2a4     53 93 C2 FA | 	rdbyte	arg01, local01
2d2a8     01 A6 86 F1 | 	sub	local01, #1
2d2ac     56 95 02 F6 | 	mov	arg02, local04
2d2b0     55 97 02 F6 | 	mov	arg03, local03
2d2b4     57 97 02 F1 | 	add	arg03, local05
2d2b8     01 98 06 F6 | 	mov	arg04, #1
2d2bc     80 F1 BF FD | 	call	#_fatfs_cc_disk_write
2d2c0     00 7A 0E F2 | 	cmp	result1, #0 wz
2d2c4     01 AE 06 A1 |  if_e	add	local05, #1
2d2c8     C0 FF 9F AD |  if_e	jmp	#LR__4770
2d2cc                 | LR__4771
2d2cc                 | ' 	}
2d2cc                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2d2cc     0A A6 06 F1 | 	add	local01, #10
2d2d0     53 AD E2 FA | 	rdword	local04, local01
2d2d4     56 AF 0A F2 | 	cmp	local05, local04 wz
2d2d8     00 B0 06 A6 |  if_e	mov	local06, #0
2d2dc     01 B0 06 56 |  if_ne	mov	local06, #1
2d2e0     58 7B 02 F6 | 	mov	result1, local06
2d2e4                 | LR__4772
2d2e4     E7 F0 03 F6 | 	mov	ptra, fp
2d2e8     F2 00 A0 FD | 	call	#popregs_
2d2ec                 | _fatfs_cc_dir_clear_ret
2d2ec     2D 00 64 FD | 	ret
2d2f0                 | 
2d2f0                 | _fatfs_cc_dir_sdi
2d2f0     06 CA 05 F6 | 	mov	COUNT_, #6
2d2f4     E8 00 A0 FD | 	call	#pushregs_
2d2f8     49 A7 02 F6 | 	mov	local01, arg01
2d2fc     4A A9 02 F6 | 	mov	local02, arg02
2d300     53 AB 02 FB | 	rdlong	local03, local01
2d304     00 10 00 FF 
2d308     00 A8 16 F2 | 	cmp	local02, ##2097152 wc
2d30c     1F A8 CE C7 |  if_b	test	local02, #31 wz
2d310                 | ' 		return FR_INT_ERR;
2d310     02 7A 06 76 |  if_nc_or_nz	mov	result1, #2
2d314     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4786
2d318     10 A6 06 F1 | 	add	local01, #16
2d31c     53 A9 62 FC | 	wrlong	local02, local01
2d320     08 A6 86 F1 | 	sub	local01, #8
2d324     53 AD 0A FB | 	rdlong	local04, local01 wz
2d328     08 A6 86 F1 | 	sub	local01, #8
2d32c     55 AF C2 AA |  if_e	rdbyte	local05, local03
2d330     03 AE 16 A2 |  if_e	cmp	local05, #3 wc
2d334     28 AA 06 21 |  if_nc_and_z	add	local03, #40
2d338     55 AD 02 2B |  if_nc_and_z	rdlong	local04, local03
2d33c     28 AA 86 21 |  if_nc_and_z	sub	local03, #40
2d340     00 AC 0E F2 | 	cmp	local04, #0 wz
2d344     3C 00 90 5D |  if_ne	jmp	#LR__4780
2d348     54 AF 02 F6 | 	mov	local05, local02
2d34c     05 AE 46 F0 | 	shr	local05, #5
2d350     08 AA 06 F1 | 	add	local03, #8
2d354     55 95 E2 FA | 	rdword	arg02, local03
2d358     08 AA 86 F1 | 	sub	local03, #8
2d35c     4A AF 12 F2 | 	cmp	local05, arg02 wc
2d360     02 7A 06 36 |  if_ae	mov	result1, #2
2d364     E4 00 90 3D |  if_ae	jmp	#LR__4786
2d368     28 AA 06 F1 | 	add	local03, #40
2d36c     55 AF 02 FB | 	rdlong	local05, local03
2d370     28 AA 86 F1 | 	sub	local03, #40
2d374     18 A6 06 F1 | 	add	local01, #24
2d378     53 AF 62 FC | 	wrlong	local05, local01
2d37c     18 A6 86 F1 | 	sub	local01, #24
2d380     7C 00 90 FD | 	jmp	#LR__4785
2d384                 | LR__4780
2d384     0A AA 06 F1 | 	add	local03, #10
2d388     55 B1 E2 FA | 	rdword	local06, local03
2d38c     0A AA 86 F1 | 	sub	local03, #10
2d390     09 B0 66 F0 | 	shl	local06, #9
2d394                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2d394                 | ' 		while (ofs >= csz) {
2d394                 | LR__4781
2d394     58 A9 12 F2 | 	cmp	local02, local06 wc
2d398     4C 00 90 CD |  if_b	jmp	#LR__4784
2d39c     53 93 02 F6 | 	mov	arg01, local01
2d3a0     56 95 02 F6 | 	mov	arg02, local04
2d3a4     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2d3a8     3D AD 02 F6 | 	mov	local04, result1
2d3ac     FF FF 7F FF 
2d3b0     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2d3b4     01 7A 06 A6 |  if_e	mov	result1, #1
2d3b8     90 00 90 AD |  if_e	jmp	#LR__4786
2d3bc     02 AC 16 F2 | 	cmp	local04, #2 wc
2d3c0     14 00 90 CD |  if_b	jmp	#LR__4782
2d3c4     18 AA 06 F1 | 	add	local03, #24
2d3c8     55 AF 02 FB | 	rdlong	local05, local03
2d3cc     18 AA 86 F1 | 	sub	local03, #24
2d3d0     57 AD 12 F2 | 	cmp	local04, local05 wc
2d3d4     08 00 90 CD |  if_b	jmp	#LR__4783
2d3d8                 | LR__4782
2d3d8     02 7A 06 F6 | 	mov	result1, #2
2d3dc     6C 00 90 FD | 	jmp	#LR__4786
2d3e0                 | LR__4783
2d3e0     58 A9 82 F1 | 	sub	local02, local06
2d3e4     AC FF 9F FD | 	jmp	#LR__4781
2d3e8                 | LR__4784
2d3e8     55 93 02 F6 | 	mov	arg01, local03
2d3ec     56 95 02 F6 | 	mov	arg02, local04
2d3f0     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2d3f4     18 A6 06 F1 | 	add	local01, #24
2d3f8     53 7B 62 FC | 	wrlong	result1, local01
2d3fc     18 A6 86 F1 | 	sub	local01, #24
2d400                 | LR__4785
2d400     14 A6 06 F1 | 	add	local01, #20
2d404     53 AD 62 FC | 	wrlong	local04, local01
2d408     04 A6 06 F1 | 	add	local01, #4
2d40c     53 AF 0A FB | 	rdlong	local05, local01 wz
2d410     18 A6 86 F1 | 	sub	local01, #24
2d414     02 7A 06 A6 |  if_e	mov	result1, #2
2d418     30 00 90 AD |  if_e	jmp	#LR__4786
2d41c     54 B1 02 F6 | 	mov	local06, local02
2d420     09 B0 46 F0 | 	shr	local06, #9
2d424     18 A6 06 F1 | 	add	local01, #24
2d428     53 AF 02 FB | 	rdlong	local05, local01
2d42c     58 AF 02 F1 | 	add	local05, local06
2d430     53 AF 62 FC | 	wrlong	local05, local01
2d434     34 AA 06 F1 | 	add	local03, #52
2d438     FF A9 06 F5 | 	and	local02, #511
2d43c     54 AB 02 F1 | 	add	local03, local02
2d440     04 A6 06 F1 | 	add	local01, #4
2d444     53 AB 62 FC | 	wrlong	local03, local01
2d448                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2d448                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2d448                 | ' 
2d448                 | ' 	return FR_OK;
2d448     00 7A 06 F6 | 	mov	result1, #0
2d44c                 | LR__4786
2d44c     E7 F0 03 F6 | 	mov	ptra, fp
2d450     F2 00 A0 FD | 	call	#popregs_
2d454                 | _fatfs_cc_dir_sdi_ret
2d454     2D 00 64 FD | 	ret
2d458                 | 
2d458                 | _fatfs_cc_dir_next
2d458     05 CA 05 F6 | 	mov	COUNT_, #5
2d45c     E8 00 A0 FD | 	call	#pushregs_
2d460     49 A7 02 F6 | 	mov	local01, arg01
2d464     4A A9 02 F6 | 	mov	local02, arg02
2d468     53 AB 02 FB | 	rdlong	local03, local01
2d46c     10 A6 06 F1 | 	add	local01, #16
2d470     53 AD 02 FB | 	rdlong	local04, local01
2d474     10 A6 86 F1 | 	sub	local01, #16
2d478     20 AC 06 F1 | 	add	local04, #32
2d47c     00 10 00 FF 
2d480     00 AC 16 F2 | 	cmp	local04, ##2097152 wc
2d484     18 A6 06 31 |  if_ae	add	local01, #24
2d488     53 01 68 3C |  if_ae	wrlong	#0, local01
2d48c     18 A6 86 31 |  if_ae	sub	local01, #24
2d490     18 A6 06 F1 | 	add	local01, #24
2d494     53 95 0A FB | 	rdlong	arg02, local01 wz
2d498     18 A6 86 F1 | 	sub	local01, #24
2d49c     04 7A 06 A6 |  if_e	mov	result1, #4
2d4a0     64 01 90 AD |  if_e	jmp	#LR__4795
2d4a4     FF AD CE F7 | 	test	local04, #511 wz
2d4a8     3C 01 90 5D |  if_ne	jmp	#LR__4794
2d4ac     18 A6 06 F1 | 	add	local01, #24
2d4b0     53 95 02 FB | 	rdlong	arg02, local01
2d4b4     01 94 06 F1 | 	add	arg02, #1
2d4b8     53 95 62 FC | 	wrlong	arg02, local01
2d4bc     04 A6 86 F1 | 	sub	local01, #4
2d4c0     53 95 0A FB | 	rdlong	arg02, local01 wz
2d4c4     14 A6 86 F1 | 	sub	local01, #20
2d4c8     2C 00 90 5D |  if_ne	jmp	#LR__4790
2d4cc     56 95 02 F6 | 	mov	arg02, local04
2d4d0     05 94 46 F0 | 	shr	arg02, #5
2d4d4     08 AA 06 F1 | 	add	local03, #8
2d4d8     55 A9 E2 FA | 	rdword	local02, local03
2d4dc     08 AA 86 F1 | 	sub	local03, #8
2d4e0     54 95 12 F2 | 	cmp	arg02, local02 wc
2d4e4     18 A6 06 31 |  if_ae	add	local01, #24
2d4e8     53 01 68 3C |  if_ae	wrlong	#0, local01
2d4ec                 | ' 				dp->sect = 0; return FR_NO_FILE;
2d4ec     04 7A 06 36 |  if_ae	mov	result1, #4
2d4f0     14 01 90 3D |  if_ae	jmp	#LR__4795
2d4f4     F0 00 90 FD | 	jmp	#LR__4793
2d4f8                 | LR__4790
2d4f8     56 93 02 F6 | 	mov	arg01, local04
2d4fc     09 92 46 F0 | 	shr	arg01, #9
2d500     0A AA 06 F1 | 	add	local03, #10
2d504     55 95 E2 FA | 	rdword	arg02, local03
2d508     0A AA 86 F1 | 	sub	local03, #10
2d50c     01 94 86 F1 | 	sub	arg02, #1
2d510     4A 93 CA F7 | 	test	arg01, arg02 wz
2d514     D0 00 90 5D |  if_ne	jmp	#LR__4792
2d518     53 93 02 F6 | 	mov	arg01, local01
2d51c     14 A6 06 F1 | 	add	local01, #20
2d520     53 95 02 FB | 	rdlong	arg02, local01
2d524     14 A6 86 F1 | 	sub	local01, #20
2d528     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2d52c     3D AF 02 F6 | 	mov	local05, result1
2d530     02 AE 16 F2 | 	cmp	local05, #2 wc
2d534     02 7A 06 C6 |  if_b	mov	result1, #2
2d538     CC 00 90 CD |  if_b	jmp	#LR__4795
2d53c     FF FF 7F FF 
2d540     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2d544     01 7A 06 A6 |  if_e	mov	result1, #1
2d548     BC 00 90 AD |  if_e	jmp	#LR__4795
2d54c     18 AA 06 F1 | 	add	local03, #24
2d550     55 95 02 FB | 	rdlong	arg02, local03
2d554     18 AA 86 F1 | 	sub	local03, #24
2d558     4A AF 12 F2 | 	cmp	local05, arg02 wc
2d55c     68 00 90 CD |  if_b	jmp	#LR__4791
2d560     00 A8 0E F2 | 	cmp	local02, #0 wz
2d564     18 A6 06 A1 |  if_e	add	local01, #24
2d568     53 01 68 AC |  if_e	wrlong	#0, local01
2d56c                 | ' 						dp->sect = 0; return FR_NO_FILE;
2d56c     04 7A 06 A6 |  if_e	mov	result1, #4
2d570     94 00 90 AD |  if_e	jmp	#LR__4795
2d574     53 93 02 F6 | 	mov	arg01, local01
2d578     14 A6 06 F1 | 	add	local01, #20
2d57c     53 95 02 FB | 	rdlong	arg02, local01
2d580     14 A6 86 F1 | 	sub	local01, #20
2d584     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2d588     3D AF 0A F6 | 	mov	local05, result1 wz
2d58c     07 7A 06 A6 |  if_e	mov	result1, #7
2d590     74 00 90 AD |  if_e	jmp	#LR__4795
2d594     01 AE 0E F2 | 	cmp	local05, #1 wz
2d598     02 7A 06 A6 |  if_e	mov	result1, #2
2d59c     68 00 90 AD |  if_e	jmp	#LR__4795
2d5a0     FF FF 7F FF 
2d5a4     FF AF 0E F2 | 	cmp	local05, ##-1 wz
2d5a8     01 7A 06 A6 |  if_e	mov	result1, #1
2d5ac     58 00 90 AD |  if_e	jmp	#LR__4795
2d5b0     57 95 02 F6 | 	mov	arg02, local05
2d5b4     55 93 02 F6 | 	mov	arg01, local03
2d5b8     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2d5bc     00 7A 0E F2 | 	cmp	result1, #0 wz
2d5c0     01 7A 06 56 |  if_ne	mov	result1, #1
2d5c4     40 00 90 5D |  if_ne	jmp	#LR__4795
2d5c8                 | LR__4791
2d5c8     14 A6 06 F1 | 	add	local01, #20
2d5cc     53 AF 62 FC | 	wrlong	local05, local01
2d5d0     55 93 02 F6 | 	mov	arg01, local03
2d5d4     57 95 02 F6 | 	mov	arg02, local05
2d5d8     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2d5dc     04 A6 06 F1 | 	add	local01, #4
2d5e0     53 7B 62 FC | 	wrlong	result1, local01
2d5e4     18 A6 86 F1 | 	sub	local01, #24
2d5e8                 | LR__4792
2d5e8                 | LR__4793
2d5e8                 | LR__4794
2d5e8     10 A6 06 F1 | 	add	local01, #16
2d5ec     53 AD 62 FC | 	wrlong	local04, local01
2d5f0     34 AA 06 F1 | 	add	local03, #52
2d5f4     FF AD 06 F5 | 	and	local04, #511
2d5f8     56 AB 02 F1 | 	add	local03, local04
2d5fc     0C A6 06 F1 | 	add	local01, #12
2d600     53 AB 62 FC | 	wrlong	local03, local01
2d604                 | ' #line 1771 "ff.c"
2d604                 | ' 				}
2d604                 | ' 				dp->clust = clst;
2d604                 | ' 				dp->sect = clst2sect(fs, clst);
2d604                 | ' 			}
2d604                 | ' 		}
2d604                 | ' 	}
2d604                 | ' 	dp->dptr = ofs;
2d604                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2d604                 | ' 
2d604                 | ' 	return FR_OK;
2d604     00 7A 06 F6 | 	mov	result1, #0
2d608                 | LR__4795
2d608     E7 F0 03 F6 | 	mov	ptra, fp
2d60c     F2 00 A0 FD | 	call	#popregs_
2d610                 | _fatfs_cc_dir_next_ret
2d610     2D 00 64 FD | 	ret
2d614                 | 
2d614                 | _fatfs_cc_dir_alloc
2d614     08 CA 05 F6 | 	mov	COUNT_, #8
2d618     E8 00 A0 FD | 	call	#pushregs_
2d61c     49 A7 02 F6 | 	mov	local01, arg01
2d620     4A A9 02 F6 | 	mov	local02, arg02
2d624     53 AB 02 FB | 	rdlong	local03, local01
2d628     53 93 02 F6 | 	mov	arg01, local01
2d62c     00 94 06 F6 | 	mov	arg02, #0
2d630     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2d634     3D AD 0A F6 | 	mov	local04, result1 wz
2d638     70 00 90 5D |  if_ne	jmp	#LR__4804
2d63c     00 AE 06 F6 | 	mov	local05, #0
2d640                 | ' 		n = 0;
2d640                 | ' 		do {
2d640                 | LR__4800
2d640     18 A6 06 F1 | 	add	local01, #24
2d644     53 95 02 FB | 	rdlong	arg02, local01
2d648     18 A6 86 F1 | 	sub	local01, #24
2d64c     55 93 02 F6 | 	mov	arg01, local03
2d650     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2d654     3D AD 0A F6 | 	mov	local04, result1 wz
2d658     50 00 90 5D |  if_ne	jmp	#LR__4803
2d65c     1C A6 06 F1 | 	add	local01, #28
2d660     53 B1 02 FB | 	rdlong	local06, local01
2d664     1C A6 86 F1 | 	sub	local01, #28
2d668     58 B1 C2 FA | 	rdbyte	local06, local06
2d66c     E5 B0 0E F2 | 	cmp	local06, #229 wz
2d670     1C A6 06 51 |  if_ne	add	local01, #28
2d674     53 B3 02 5B |  if_ne	rdlong	local07, local01
2d678     1C A6 86 51 |  if_ne	sub	local01, #28
2d67c     59 B5 CA 5A |  if_ne	rdbyte	local08, local07 wz
2d680     10 00 90 5D |  if_ne	jmp	#LR__4801
2d684     01 AE 06 F1 | 	add	local05, #1
2d688     54 AF 0A F2 | 	cmp	local05, local02 wz
2d68c     1C 00 90 AD |  if_e	jmp	#LR__4803
2d690     04 00 90 FD | 	jmp	#LR__4802
2d694                 | LR__4801
2d694     00 AE 06 F6 | 	mov	local05, #0
2d698                 | LR__4802
2d698     53 93 02 F6 | 	mov	arg01, local01
2d69c     01 94 06 F6 | 	mov	arg02, #1
2d6a0     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2d6a4     3D AD 0A F6 | 	mov	local04, result1 wz
2d6a8     94 FF 9F AD |  if_e	jmp	#LR__4800
2d6ac                 | LR__4803
2d6ac                 | LR__4804
2d6ac     04 AC 0E F2 | 	cmp	local04, #4 wz
2d6b0     07 AC 06 A6 |  if_e	mov	local04, #7
2d6b4                 | ' 	return res;
2d6b4     56 7B 02 F6 | 	mov	result1, local04
2d6b8     E7 F0 03 F6 | 	mov	ptra, fp
2d6bc     F2 00 A0 FD | 	call	#popregs_
2d6c0                 | _fatfs_cc_dir_alloc_ret
2d6c0     2D 00 64 FD | 	ret
2d6c4                 | 
2d6c4                 | _fatfs_cc_ld_clust
2d6c4     49 81 02 F6 | 	mov	_var01, arg01
2d6c8     4A 93 02 F6 | 	mov	arg01, arg02
2d6cc     1A 92 06 F1 | 	add	arg01, #26
2d6d0                 | ' {
2d6d0                 | ' 
2d6d0                 | ' 	return *((WORD*)ptr);
2d6d0     49 7B E2 FA | 	rdword	result1, arg01
2d6d4     3D 93 32 F9 | 	getword	arg01, result1, #0
2d6d8     40 81 C2 FA | 	rdbyte	_var01, _var01
2d6dc     03 80 0E F2 | 	cmp	_var01, #3 wz
2d6e0     14 94 06 A1 |  if_e	add	arg02, #20
2d6e4                 | ' {
2d6e4                 | ' 
2d6e4                 | ' 	return *((WORD*)ptr);
2d6e4     4A 7B E2 AA |  if_e	rdword	result1, arg02
2d6e8     10 7A 66 A0 |  if_e	shl	result1, #16
2d6ec     3D 93 42 A5 |  if_e	or	arg01, result1
2d6f0                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2d6f0                 | ' 	}
2d6f0                 | ' 
2d6f0                 | ' 	return cl;
2d6f0     49 7B 02 F6 | 	mov	result1, arg01
2d6f4                 | _fatfs_cc_ld_clust_ret
2d6f4     2D 00 64 FD | 	ret
2d6f8                 | 
2d6f8                 | _fatfs_cc_st_clust
2d6f8     49 81 02 F6 | 	mov	_var01, arg01
2d6fc     4A 93 02 F6 | 	mov	arg01, arg02
2d700     1A 92 06 F1 | 	add	arg01, #26
2d704     49 97 52 FC | 	wrword	arg03, arg01
2d708     40 81 C2 FA | 	rdbyte	_var01, _var01
2d70c     03 80 0E F2 | 	cmp	_var01, #3 wz
2d710     14 94 06 A1 |  if_e	add	arg02, #20
2d714     10 96 46 A0 |  if_e	shr	arg03, #16
2d718     4A 97 52 AC |  if_e	wrword	arg03, arg02
2d71c                 | _fatfs_cc_st_clust_ret
2d71c     2D 00 64 FD | 	ret
2d720                 | 
2d720                 | _fatfs_cc_cmp_lfn
2d720     07 CA 05 F6 | 	mov	COUNT_, #7
2d724     E8 00 A0 FD | 	call	#pushregs_
2d728     49 A7 02 F6 | 	mov	local01, arg01
2d72c     4A 93 02 F6 | 	mov	arg01, arg02
2d730     1A 92 06 F1 | 	add	arg01, #26
2d734                 | ' {
2d734                 | ' 
2d734                 | ' 	return *((WORD*)ptr);
2d734     49 7B EA FA | 	rdword	result1, arg01 wz
2d738     00 7A 06 56 |  if_ne	mov	result1, #0
2d73c     D8 00 90 5D |  if_ne	jmp	#LR__4816
2d740     4A A9 C2 FA | 	rdbyte	local02, arg02
2d744     3F A8 06 F5 | 	and	local02, #63
2d748     01 A8 86 F1 | 	sub	local02, #1
2d74c     0D A8 06 FD | 	qmul	local02, #13
2d750                 | ' 
2d750                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2d750                 | ' 
2d750                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2d750     01 AA 06 F6 | 	mov	local03, #1
2d754     00 AC 06 F6 | 	mov	local04, #0
2d758     18 AE 62 FD | 	getqx	local05
2d75c                 | LR__4810
2d75c     0D AC 16 F2 | 	cmp	local04, #13 wc
2d760     94 00 90 3D |  if_ae	jmp	#LR__4815
2d764     4A 93 02 F6 | 	mov	arg01, arg02
2d768     56 A9 02 F6 | 	mov	local02, local04
2d76c     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2d770     01 00 00 FF 
2d774     AE 7B 06 F1 | 	add	result1, ##942
2d778     3D A9 02 F1 | 	add	local02, result1
2d77c     54 A9 C2 FA | 	rdbyte	local02, local02
2d780     54 93 02 F1 | 	add	arg01, local02
2d784                 | ' {
2d784                 | ' 
2d784                 | ' 	return *((WORD*)ptr);
2d784     49 7B E2 FA | 	rdword	result1, arg01
2d788     3D B1 02 F6 | 	mov	local06, result1
2d78c     55 A9 02 F6 | 	mov	local02, local03
2d790     0F A8 4E F7 | 	zerox	local02, #15 wz
2d794     44 00 90 AD |  if_e	jmp	#LR__4813
2d798     00 AF 16 F2 | 	cmp	local05, #256 wc
2d79c     2C 00 90 3D |  if_ae	jmp	#LR__4811
2d7a0     58 93 32 F9 | 	getword	arg01, local06, #0
2d7a4     CC E4 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2d7a8     3D A9 02 F6 | 	mov	local02, result1
2d7ac     57 AB 02 F6 | 	mov	local03, local05
2d7b0     01 AA 66 F0 | 	shl	local03, #1
2d7b4     53 AB 02 F1 | 	add	local03, local01
2d7b8     55 93 E2 FA | 	rdword	arg01, local03
2d7bc     01 AE 06 F1 | 	add	local05, #1
2d7c0     B0 E4 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2d7c4     3D A9 0A F2 | 	cmp	local02, result1 wz
2d7c8     08 00 90 AD |  if_e	jmp	#LR__4812
2d7cc                 | LR__4811
2d7cc                 | ' 				return 0;
2d7cc     00 7A 06 F6 | 	mov	result1, #0
2d7d0     44 00 90 FD | 	jmp	#LR__4816
2d7d4                 | LR__4812
2d7d4     58 AB 02 F6 | 	mov	local03, local06
2d7d8     14 00 90 FD | 	jmp	#LR__4814
2d7dc                 | LR__4813
2d7dc     58 B1 32 F9 | 	getword	local06, local06, #0
2d7e0     7F 00 00 FF 
2d7e4     FF B1 0E F2 | 	cmp	local06, ##65535 wz
2d7e8     00 7A 06 56 |  if_ne	mov	result1, #0
2d7ec     28 00 90 5D |  if_ne	jmp	#LR__4816
2d7f0                 | LR__4814
2d7f0     01 AC 06 F1 | 	add	local04, #1
2d7f4     64 FF 9F FD | 	jmp	#LR__4810
2d7f8                 | LR__4815
2d7f8     4A A9 C2 FA | 	rdbyte	local02, arg02
2d7fc     40 A8 CE F7 | 	test	local02, #64 wz
2d800     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
2d804     01 AE 66 50 |  if_ne	shl	local05, #1
2d808     53 AF 02 51 |  if_ne	add	local05, local01
2d80c     57 B3 EA 5A |  if_ne	rdword	local07, local05 wz
2d810     00 7A 06 56 |  if_ne	mov	result1, #0
2d814                 | ' 
2d814                 | ' 	return 1;
2d814     01 7A 06 A6 |  if_e	mov	result1, #1
2d818                 | LR__4816
2d818     E7 F0 03 F6 | 	mov	ptra, fp
2d81c     F2 00 A0 FD | 	call	#popregs_
2d820                 | _fatfs_cc_cmp_lfn_ret
2d820     2D 00 64 FD | 	ret
2d824                 | 
2d824                 | _fatfs_cc_pick_lfn
2d824     49 81 02 F6 | 	mov	_var01, arg01
2d828     4A 93 02 F6 | 	mov	arg01, arg02
2d82c     1A 92 06 F1 | 	add	arg01, #26
2d830                 | ' {
2d830                 | ' 
2d830                 | ' 	return *((WORD*)ptr);
2d830     49 7B EA FA | 	rdword	result1, arg01 wz
2d834     00 7A 06 56 |  if_ne	mov	result1, #0
2d838     CC 00 90 5D |  if_ne	jmp	#LR__4825
2d83c     4A 83 C2 FA | 	rdbyte	_var02, arg02
2d840     40 82 26 F5 | 	andn	_var02, #64
2d844     01 82 86 F1 | 	sub	_var02, #1
2d848     0D 82 06 FD | 	qmul	_var02, #13
2d84c                 | ' 
2d84c                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2d84c                 | ' 
2d84c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2d84c     01 84 06 F6 | 	mov	_var03, #1
2d850     00 86 06 F6 | 	mov	_var04, #0
2d854     18 88 62 FD | 	getqx	_var05
2d858                 | LR__4820
2d858     0D 86 16 F2 | 	cmp	_var04, #13 wc
2d85c     78 00 90 3D |  if_ae	jmp	#LR__4823
2d860     4A 93 02 F6 | 	mov	arg01, arg02
2d864     43 83 02 F6 | 	mov	_var02, _var04
2d868     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
2d86c     01 00 00 FF 
2d870     AE 7B 06 F1 | 	add	result1, ##942
2d874     3D 83 02 F1 | 	add	_var02, result1
2d878     41 83 C2 FA | 	rdbyte	_var02, _var02
2d87c     41 93 02 F1 | 	add	arg01, _var02
2d880                 | ' {
2d880                 | ' 
2d880                 | ' 	return *((WORD*)ptr);
2d880     49 7B E2 FA | 	rdword	result1, arg01
2d884     3D 8B 02 F6 | 	mov	_var06, result1
2d888     42 83 02 F6 | 	mov	_var02, _var03
2d88c     0F 82 4E F7 | 	zerox	_var02, #15 wz
2d890     28 00 90 AD |  if_e	jmp	#LR__4821
2d894     00 89 16 F2 | 	cmp	_var05, #256 wc
2d898     00 7A 06 36 |  if_ae	mov	result1, #0
2d89c     68 00 90 3D |  if_ae	jmp	#LR__4825
2d8a0     44 83 02 F6 | 	mov	_var02, _var05
2d8a4     01 82 66 F0 | 	shl	_var02, #1
2d8a8     40 83 02 F1 | 	add	_var02, _var01
2d8ac     45 85 02 F6 | 	mov	_var03, _var06
2d8b0     41 85 52 FC | 	wrword	_var03, _var02
2d8b4     01 88 06 F1 | 	add	_var05, #1
2d8b8     14 00 90 FD | 	jmp	#LR__4822
2d8bc                 | LR__4821
2d8bc     45 8B 32 F9 | 	getword	_var06, _var06, #0
2d8c0     7F 00 00 FF 
2d8c4     FF 8B 0E F2 | 	cmp	_var06, ##65535 wz
2d8c8     00 7A 06 56 |  if_ne	mov	result1, #0
2d8cc     38 00 90 5D |  if_ne	jmp	#LR__4825
2d8d0                 | LR__4822
2d8d0     01 86 06 F1 | 	add	_var04, #1
2d8d4     80 FF 9F FD | 	jmp	#LR__4820
2d8d8                 | LR__4823
2d8d8     4A 83 C2 FA | 	rdbyte	_var02, arg02
2d8dc     40 82 CE F7 | 	test	_var02, #64 wz
2d8e0     42 8D 02 56 |  if_ne	mov	_var07, _var03
2d8e4     0F 8C 4E 57 |  if_ne	zerox	_var07, #15 wz
2d8e8     18 00 90 AD |  if_e	jmp	#LR__4824
2d8ec     00 89 16 F2 | 	cmp	_var05, #256 wc
2d8f0     00 7A 06 36 |  if_ae	mov	result1, #0
2d8f4     10 00 90 3D |  if_ae	jmp	#LR__4825
2d8f8     01 88 66 F0 | 	shl	_var05, #1
2d8fc     40 89 02 F1 | 	add	_var05, _var01
2d900     44 01 58 FC | 	wrword	#0, _var05
2d904                 | LR__4824
2d904                 | ' 		lfnbuf[i] = 0;
2d904                 | ' 	}
2d904                 | ' 
2d904                 | ' 	return 1;
2d904     01 7A 06 F6 | 	mov	result1, #1
2d908                 | LR__4825
2d908                 | _fatfs_cc_pick_lfn_ret
2d908     2D 00 64 FD | 	ret
2d90c                 | 
2d90c                 | _fatfs_cc_put_lfn
2d90c     4A 81 02 F6 | 	mov	_var01, arg02
2d910     0D 80 06 F1 | 	add	_var01, #13
2d914     40 99 42 FC | 	wrbyte	arg04, _var01
2d918     4B 99 E2 F8 | 	getbyte	arg04, arg03, #0
2d91c     01 98 86 F1 | 	sub	arg04, #1
2d920     0D 98 06 FD | 	qmul	arg04, #13
2d924     49 83 02 F6 | 	mov	_var02, arg01
2d928     02 80 86 F1 | 	sub	_var01, #2
2d92c     40 1F 48 FC | 	wrbyte	#15, _var01
2d930     01 80 06 F1 | 	add	_var01, #1
2d934     40 01 48 FC | 	wrbyte	#0, _var01
2d938     0C 80 86 F1 | 	sub	_var01, #12
2d93c     40 93 02 F6 | 	mov	arg01, _var01
2d940     1A 92 06 F1 | 	add	arg01, #26
2d944     49 01 58 FC | 	wrword	#0, arg01
2d948     00 84 06 F6 | 	mov	_var03, #0
2d94c     00 86 06 F6 | 	mov	_var04, #0
2d950                 | ' 	BYTE* dir,
2d950                 | ' 	BYTE ord,
2d950                 | ' 	BYTE sum
2d950                 | ' )
2d950                 | ' {
2d950                 | ' 	UINT i, s;
2d950                 | ' 	WCHAR wc;
2d950                 | ' 
2d950                 | ' 
2d950                 | ' 	dir[ 13 ] = sum;
2d950                 | ' 	dir[ 11 ] =  0x0F ;
2d950                 | ' 	dir[ 12 ] = 0;
2d950                 | ' 	st_word(dir +  26 , 0);
2d950                 | ' 
2d950                 | ' 	i = (ord - 1) * 13;
2d950                 | ' 	s = wc = 0;
2d950                 | ' 	do {
2d950     18 88 62 FD | 	getqx	_var05
2d954     D7 2E 48 FB | 	callpa	#(@LR__4831-@LR__4830)>>2,fcache_load_ptr_
2d958                 | LR__4830
2d958     42 99 32 F9 | 	getword	arg04, _var03, #0
2d95c     7F 00 00 FF 
2d960     FF 99 0E F2 | 	cmp	arg04, ##65535 wz
2d964     44 93 02 56 |  if_ne	mov	arg01, _var05
2d968     01 88 06 51 |  if_ne	add	_var05, #1
2d96c     01 92 66 50 |  if_ne	shl	arg01, #1
2d970     41 93 02 51 |  if_ne	add	arg01, _var02
2d974     49 85 E2 5A |  if_ne	rdword	_var03, arg01
2d978     40 93 02 F6 | 	mov	arg01, _var01
2d97c     43 99 02 F6 | 	mov	arg04, _var04
2d980     36 95 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2d984     01 00 00 FF 
2d988     AE 95 06 F1 | 	add	arg02, ##942
2d98c     4A 99 02 F1 | 	add	arg04, arg02
2d990     4C 99 C2 FA | 	rdbyte	arg04, arg04
2d994     4C 93 02 F1 | 	add	arg01, arg04
2d998     49 85 52 FC | 	wrword	_var03, arg01
2d99c     42 99 02 F6 | 	mov	arg04, _var03
2d9a0     0F 98 4E F7 | 	zerox	arg04, #15 wz
2d9a4     0F 84 CE A9 |  if_e	bmask	_var03, #15
2d9a8     01 86 06 F1 | 	add	_var04, #1
2d9ac     0D 86 16 F2 | 	cmp	_var04, #13 wc
2d9b0     A4 FF 9F CD |  if_b	jmp	#LR__4830
2d9b4                 | LR__4831
2d9b4     42 85 32 F9 | 	getword	_var03, _var03, #0
2d9b8     7F 00 00 FF 
2d9bc     FF 85 0E F2 | 	cmp	_var03, ##65535 wz
2d9c0     01 88 66 50 |  if_ne	shl	_var05, #1
2d9c4     41 89 02 51 |  if_ne	add	_var05, _var02
2d9c8     44 89 EA 5A |  if_ne	rdword	_var05, _var05 wz
2d9cc     4B 97 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2d9d0     40 96 46 A5 |  if_e	or	arg03, #64
2d9d4     40 97 42 FC | 	wrbyte	arg03, _var01
2d9d8                 | _fatfs_cc_put_lfn_ret
2d9d8     2D 00 64 FD | 	ret
2d9dc                 | 
2d9dc                 | _fatfs_cc_gen_numname
2d9dc     08 CA 05 F6 | 	mov	COUNT_, #8
2d9e0     E8 00 A0 FD | 	call	#pushregs_
2d9e4     2C F0 07 F1 | 	add	ptra, #44
2d9e8     49 A7 02 F6 | 	mov	local01, arg01
2d9ec     4A A9 02 F6 | 	mov	local02, arg02
2d9f0     4B AB 02 F6 | 	mov	local03, arg03
2d9f4     4C AD 02 F6 | 	mov	local04, arg04
2d9f8     53 93 02 F6 | 	mov	arg01, local01
2d9fc     54 95 02 F6 | 	mov	arg02, local02
2da00     0B 96 06 F6 | 	mov	arg03, #11
2da04     84 6E BF FD | 	call	#__system____builtin_memmove
2da08     06 AC 16 F2 | 	cmp	local04, #6 wc
2da0c     48 00 90 CD |  if_b	jmp	#LR__4845
2da10     56 AF 02 F6 | 	mov	local05, local04
2da14     D7 1E 48 FB | 	callpa	#(@LR__4843-@LR__4840)>>2,fcache_load_ptr_
2da18                 | ' 		sreg = seq;
2da18                 | ' 		while (*lfn) {
2da18                 | LR__4840
2da18     55 B1 EA FA | 	rdword	local06, local03 wz
2da1c     34 00 90 AD |  if_e	jmp	#LR__4844
2da20     55 B3 E2 FA | 	rdword	local07, local03
2da24                 | ' 			wc = *lfn++;
2da24                 | ' 			for (i = 0; i < 16; i++) {
2da24     02 AA 06 F1 | 	add	local03, #2
2da28     10 12 DC FC | 	rep	@LR__4842, #16
2da2c                 | LR__4841
2da2c     01 AE 66 F0 | 	shl	local05, #1
2da30     59 B1 32 F9 | 	getword	local06, local07, #0
2da34     01 B0 06 F5 | 	and	local06, #1
2da38     58 AF 02 F1 | 	add	local05, local06
2da3c     59 B3 32 F9 | 	getword	local07, local07, #0
2da40     01 B2 46 F0 | 	shr	local07, #1
2da44     10 AE 2E F4 | 	testbn	local05, #16 wz
2da48     88 00 00 5F 
2da4c     21 AE 66 55 |  if_ne	xor	local05, ##69665
2da50                 | LR__4842
2da50     C4 FF 9F FD | 	jmp	#LR__4840
2da54                 | LR__4843
2da54                 | LR__4844
2da54     57 AD 02 F6 | 	mov	local04, local05
2da58                 | LR__4845
2da58     07 B2 06 F6 | 	mov	local07, #7
2da5c     D7 1E 48 FB | 	callpa	#(@LR__4847-@LR__4846)>>2,fcache_load_ptr_
2da60                 | ' 			}
2da60                 | ' 		}
2da60                 | ' 		seq = (UINT)sreg;
2da60                 | ' 	}
2da60                 | ' 
2da60                 | ' 
2da60                 | ' 	i = 7;
2da60                 | ' 	do {
2da60                 | LR__4846
2da60     56 AF 42 F8 | 	getnib	local05, local04, #0
2da64     30 AE 06 F1 | 	add	local05, #48
2da68     04 AC 46 F0 | 	shr	local04, #4
2da6c     57 B1 E2 F8 | 	getbyte	local06, local05, #0
2da70     3A B0 16 F2 | 	cmp	local06, #58 wc
2da74     57 AF E2 38 |  if_ae	getbyte	local05, local05, #0
2da78     07 AE 06 31 |  if_ae	add	local05, #7
2da7c     59 B1 02 F6 | 	mov	local06, local07
2da80     01 B2 8E F1 | 	sub	local07, #1 wz
2da84     E7 AA 02 F6 | 	mov	local03, fp
2da88     10 AA 06 F1 | 	add	local03, #16
2da8c     55 B1 02 F1 | 	add	local06, local03
2da90     58 AF 42 FC | 	wrbyte	local05, local06
2da94     00 AC 0E 52 |  if_ne	cmp	local04, #0 wz
2da98     C4 FF 9F 5D |  if_ne	jmp	#LR__4846
2da9c                 | LR__4847
2da9c     59 B1 02 F6 | 	mov	local06, local07
2daa0     E7 AE 02 F6 | 	mov	local05, fp
2daa4     10 AE 06 F1 | 	add	local05, #16
2daa8     57 B1 02 F1 | 	add	local06, local05
2daac     58 FD 48 FC | 	wrbyte	#126, local06
2dab0                 | ' 	ns[i] = '~';
2dab0                 | ' 
2dab0                 | ' 
2dab0                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2dab0     00 AC 06 F6 | 	mov	local04, #0
2dab4     D7 2A 48 FB | 	callpa	#(@LR__4850-@LR__4848)>>2,fcache_load_ptr_
2dab8                 | LR__4848
2dab8     59 AD 12 F2 | 	cmp	local04, local07 wc
2dabc     4C 00 90 3D |  if_ae	jmp	#LR__4851
2dac0     56 AF 02 F6 | 	mov	local05, local04
2dac4     53 AF 02 F1 | 	add	local05, local01
2dac8     57 B1 C2 FA | 	rdbyte	local06, local05
2dacc     20 B0 0E F2 | 	cmp	local06, #32 wz
2dad0     38 00 90 AD |  if_e	jmp	#LR__4851
2dad4     56 AB 02 F6 | 	mov	local03, local04
2dad8     53 AB 02 F1 | 	add	local03, local01
2dadc     55 93 CA FA | 	rdbyte	arg01, local03 wz
2dae0     00 7A 06 56 |  if_ne	mov	result1, #0
2dae4                 | ' 
2dae4                 | ' 	return 0;
2dae4     00 7A 06 A6 |  if_e	mov	result1, #0
2dae8     00 7A 0E F2 | 	cmp	result1, #0 wz
2daec     14 00 90 AD |  if_e	jmp	#LR__4849
2daf0     59 AB 02 F6 | 	mov	local03, local07
2daf4     01 AA 86 F1 | 	sub	local03, #1
2daf8     55 AD 0A F2 | 	cmp	local04, local03 wz
2dafc     0C 00 90 AD |  if_e	jmp	#LR__4851
2db00     01 AC 06 F1 | 	add	local04, #1
2db04                 | LR__4849
2db04     01 AC 06 F1 | 	add	local04, #1
2db08     AC FF 9F FD | 	jmp	#LR__4848
2db0c                 | LR__4850
2db0c                 | LR__4851
2db0c     D7 20 48 FB | 	callpa	#(@LR__4855-@LR__4852)>>2,fcache_load_ptr_
2db10                 | ' 			j++;
2db10                 | ' 		}
2db10                 | ' 	}
2db10                 | ' 	do {
2db10                 | LR__4852
2db10     56 B1 02 F6 | 	mov	local06, local04
2db14     53 B1 02 F1 | 	add	local06, local01
2db18     08 B2 16 F2 | 	cmp	local07, #8 wc
2db1c     01 AC 06 F1 | 	add	local04, #1
2db20     1C 00 90 3D |  if_ae	jmp	#LR__4853
2db24     59 AF 02 F6 | 	mov	local05, local07
2db28     E7 AA 02 F6 | 	mov	local03, fp
2db2c     10 AA 06 F1 | 	add	local03, #16
2db30     55 AF 02 F1 | 	add	local05, local03
2db34     57 B5 C2 FA | 	rdbyte	local08, local05
2db38     01 B2 06 F1 | 	add	local07, #1
2db3c     04 00 90 FD | 	jmp	#LR__4854
2db40                 | LR__4853
2db40     20 B4 06 F6 | 	mov	local08, #32
2db44                 | LR__4854
2db44     58 B5 42 FC | 	wrbyte	local08, local06
2db48     08 AC 16 F2 | 	cmp	local04, #8 wc
2db4c     C0 FF 9F CD |  if_b	jmp	#LR__4852
2db50                 | LR__4855
2db50     E7 F0 03 F6 | 	mov	ptra, fp
2db54     F2 00 A0 FD | 	call	#popregs_
2db58                 | _fatfs_cc_gen_numname_ret
2db58     2D 00 64 FD | 	ret
2db5c                 | 
2db5c                 | _fatfs_cc_sum_sfn
2db5c     00 80 06 F6 | 	mov	_var01, #0
2db60                 | ' )
2db60                 | ' {
2db60                 | ' 	BYTE sum = 0;
2db60                 | ' 	UINT n = 11;
2db60                 | ' 
2db60                 | ' 	do {
2db60     D7 12 48 FB | 	callpa	#(@LR__4862-@LR__4860)>>2,fcache_load_ptr_
2db64                 | LR__4860
2db64     0B 10 DC FC | 	rep	@LR__4863, #11
2db68                 | LR__4861
2db68     40 7B E2 F8 | 	getbyte	result1, _var01, #0
2db6c     01 7A 46 F0 | 	shr	result1, #1
2db70     40 81 E2 F8 | 	getbyte	_var01, _var01, #0
2db74     07 80 66 F0 | 	shl	_var01, #7
2db78     40 7B 02 F1 | 	add	result1, _var01
2db7c     49 81 C2 FA | 	rdbyte	_var01, arg01
2db80     3D 81 02 F1 | 	add	_var01, result1
2db84     01 92 06 F1 | 	add	arg01, #1
2db88                 | LR__4862
2db88                 | LR__4863
2db88                 | ' 	return sum;
2db88     40 7B 02 F6 | 	mov	result1, _var01
2db8c                 | _fatfs_cc_sum_sfn_ret
2db8c     2D 00 64 FD | 	ret
2db90                 | 
2db90                 | _fatfs_cc_dir_read
2db90     0C CA 05 F6 | 	mov	COUNT_, #12
2db94     E8 00 A0 FD | 	call	#pushregs_
2db98     49 A7 02 F6 | 	mov	local01, arg01
2db9c     4A A9 02 F6 | 	mov	local02, arg02
2dba0     04 AA 06 F6 | 	mov	local03, #4
2dba4     53 AD 02 FB | 	rdlong	local04, local01
2dba8     FF AE 06 F6 | 	mov	local05, #255
2dbac     FF B0 06 F6 | 	mov	local06, #255
2dbb0                 | ' )
2dbb0                 | ' {
2dbb0                 | ' 	FRESULT res = FR_NO_FILE;
2dbb0                 | ' 	FATFS *fs = dp->obj.fs;
2dbb0                 | ' 	BYTE attr, b;
2dbb0                 | ' 
2dbb0                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2dbb0                 | ' 
2dbb0                 | ' 
2dbb0                 | ' 	while (dp->sect) {
2dbb0                 | LR__4870
2dbb0     18 A6 06 F1 | 	add	local01, #24
2dbb4     53 7B 0A FB | 	rdlong	result1, local01 wz
2dbb8     18 A6 86 F1 | 	sub	local01, #24
2dbbc     AC 01 90 AD |  if_e	jmp	#LR__4880
2dbc0     18 A6 06 F1 | 	add	local01, #24
2dbc4     53 95 02 FB | 	rdlong	arg02, local01
2dbc8     18 A6 86 F1 | 	sub	local01, #24
2dbcc     56 93 02 F6 | 	mov	arg01, local04
2dbd0     B8 ED BF FD | 	call	#_fatfs_cc_move_window
2dbd4     3D AB 0A F6 | 	mov	local03, result1 wz
2dbd8     90 01 90 5D |  if_ne	jmp	#LR__4880
2dbdc     1C A6 06 F1 | 	add	local01, #28
2dbe0     53 7B 02 FB | 	rdlong	result1, local01
2dbe4     1C A6 86 F1 | 	sub	local01, #28
2dbe8     3D B3 C2 FA | 	rdbyte	local07, result1
2dbec     59 7B 02 F6 | 	mov	result1, local07
2dbf0     07 7A 4E F7 | 	zerox	result1, #7 wz
2dbf4     04 AA 06 A6 |  if_e	mov	local03, #4
2dbf8                 | ' 			res = FR_NO_FILE; break;
2dbf8     70 01 90 AD |  if_e	jmp	#LR__4880
2dbfc     1C A6 06 F1 | 	add	local01, #28
2dc00     53 B5 02 FB | 	rdlong	local08, local01
2dc04     0B B4 06 F1 | 	add	local08, #11
2dc08     5A B7 C2 FA | 	rdbyte	local09, local08
2dc0c     3F B6 06 F5 | 	and	local09, #63
2dc10     16 A6 86 F1 | 	sub	local01, #22
2dc14     53 B7 42 FC | 	wrbyte	local09, local01
2dc18     06 A6 86 F1 | 	sub	local01, #6
2dc1c     59 7B E2 F8 | 	getbyte	result1, local07, #0
2dc20     E5 7A 0E F2 | 	cmp	result1, #229 wz
2dc24     59 B5 02 56 |  if_ne	mov	local08, local07
2dc28     5A B5 E2 58 |  if_ne	getbyte	local08, local08, #0
2dc2c     2E B4 0E 52 |  if_ne	cmp	local08, #46 wz
2dc30     1C 00 90 AD |  if_e	jmp	#LR__4871
2dc34     00 B8 06 F6 | 	mov	local10, #0
2dc38     5B B5 E2 F8 | 	getbyte	local08, local09, #0
2dc3c     20 B4 26 F5 | 	andn	local08, #32
2dc40     08 B4 0E F2 | 	cmp	local08, #8 wz
2dc44     01 B8 06 A6 |  if_e	mov	local10, #1
2dc48     54 B9 0A F2 | 	cmp	local10, local02 wz
2dc4c     08 00 90 AD |  if_e	jmp	#LR__4872
2dc50                 | LR__4871
2dc50     FF AE 06 F6 | 	mov	local05, #255
2dc54     00 01 90 FD | 	jmp	#LR__4879
2dc58                 | LR__4872
2dc58     5B B7 E2 F8 | 	getbyte	local09, local09, #0
2dc5c     0F B6 0E F2 | 	cmp	local09, #15 wz
2dc60     B4 00 90 5D |  if_ne	jmp	#LR__4876
2dc64     59 BB E2 F8 | 	getbyte	local11, local07, #0
2dc68     40 BA CE F7 | 	test	local11, #64 wz
2dc6c     30 00 90 AD |  if_e	jmp	#LR__4873
2dc70     1C A6 06 F1 | 	add	local01, #28
2dc74     53 BB 02 FB | 	rdlong	local11, local01
2dc78     0D BA 06 F1 | 	add	local11, #13
2dc7c     5D B1 C2 FA | 	rdbyte	local06, local11
2dc80     59 B3 E2 F8 | 	getbyte	local07, local07, #0
2dc84     BF B2 06 F5 | 	and	local07, #191
2dc88     59 AF 02 F6 | 	mov	local05, local07
2dc8c     0C A6 86 F1 | 	sub	local01, #12
2dc90     53 BB 02 FB | 	rdlong	local11, local01
2dc94     1C A6 06 F1 | 	add	local01, #28
2dc98     53 BB 62 FC | 	wrlong	local11, local01
2dc9c     2C A6 86 F1 | 	sub	local01, #44
2dca0                 | LR__4873
2dca0     59 B5 E2 F8 | 	getbyte	local08, local07, #0
2dca4     57 B9 E2 F8 | 	getbyte	local10, local05, #0
2dca8     5C B5 0A F2 | 	cmp	local08, local10 wz
2dcac     5C 00 90 5D |  if_ne	jmp	#LR__4874
2dcb0     58 B9 E2 F8 | 	getbyte	local10, local06, #0
2dcb4     1C A6 06 F1 | 	add	local01, #28
2dcb8     53 B7 02 FB | 	rdlong	local09, local01
2dcbc     1C A6 86 F1 | 	sub	local01, #28
2dcc0     0D B6 06 F1 | 	add	local09, #13
2dcc4     5B B5 C2 FA | 	rdbyte	local08, local09
2dcc8     5A B7 E2 F8 | 	getbyte	local09, local08, #0
2dccc     5B B9 0A F2 | 	cmp	local10, local09 wz
2dcd0     38 00 90 5D |  if_ne	jmp	#LR__4874
2dcd4     0C AC 06 F1 | 	add	local04, #12
2dcd8     56 93 02 FB | 	rdlong	arg01, local04
2dcdc     0C AC 86 F1 | 	sub	local04, #12
2dce0     1C A6 06 F1 | 	add	local01, #28
2dce4     53 BD 02 FB | 	rdlong	local12, local01
2dce8     1C A6 86 F1 | 	sub	local01, #28
2dcec     5E 95 02 F6 | 	mov	arg02, local12
2dcf0     30 FB BF FD | 	call	#_fatfs_cc_pick_lfn
2dcf4     00 7A 4E F2 | 	cmps	result1, #0 wz
2dcf8     57 BD 02 56 |  if_ne	mov	local12, local05
2dcfc     5E BD E2 58 |  if_ne	getbyte	local12, local12, #0
2dd00     01 BC 86 51 |  if_ne	sub	local12, #1
2dd04     5E BB 02 56 |  if_ne	mov	local11, local12
2dd08     04 00 90 5D |  if_ne	jmp	#LR__4875
2dd0c                 | LR__4874
2dd0c     FF BA 06 F6 | 	mov	local11, #255
2dd10                 | LR__4875
2dd10     5D AF 02 F6 | 	mov	local05, local11
2dd14     40 00 90 FD | 	jmp	#LR__4878
2dd18                 | LR__4876
2dd18     57 BB 02 F6 | 	mov	local11, local05
2dd1c     07 BA 4E F7 | 	zerox	local11, #7 wz
2dd20     20 00 90 5D |  if_ne	jmp	#LR__4877
2dd24     58 B1 E2 F8 | 	getbyte	local06, local06, #0
2dd28     1C A6 06 F1 | 	add	local01, #28
2dd2c     53 93 02 FB | 	rdlong	arg01, local01
2dd30     1C A6 86 F1 | 	sub	local01, #28
2dd34     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2dd38     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2dd3c     3D B1 0A F2 | 	cmp	local06, result1 wz
2dd40     28 00 90 AD |  if_e	jmp	#LR__4880
2dd44                 | LR__4877
2dd44     2C A6 06 F1 | 	add	local01, #44
2dd48     FF FF FF FF 
2dd4c     53 FF 6B FC | 	wrlong	##-1, local01
2dd50     2C A6 86 F1 | 	sub	local01, #44
2dd54                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2dd54                 | ' 					}
2dd54                 | ' 					break;
2dd54     14 00 90 FD | 	jmp	#LR__4880
2dd58                 | LR__4878
2dd58                 | LR__4879
2dd58     53 93 02 F6 | 	mov	arg01, local01
2dd5c     00 94 06 F6 | 	mov	arg02, #0
2dd60     F4 F6 BF FD | 	call	#_fatfs_cc_dir_next
2dd64     3D AB 0A F6 | 	mov	local03, result1 wz
2dd68     44 FE 9F AD |  if_e	jmp	#LR__4870
2dd6c                 | LR__4880
2dd6c     00 AA 0E F2 | 	cmp	local03, #0 wz
2dd70     18 A6 06 51 |  if_ne	add	local01, #24
2dd74     53 01 68 5C |  if_ne	wrlong	#0, local01
2dd78                 | ' 	return res;
2dd78     55 7B 02 F6 | 	mov	result1, local03
2dd7c     E7 F0 03 F6 | 	mov	ptra, fp
2dd80     F2 00 A0 FD | 	call	#popregs_
2dd84                 | _fatfs_cc_dir_read_ret
2dd84     2D 00 64 FD | 	ret
2dd88                 | 
2dd88                 | _fatfs_cc_dir_find
2dd88     0B CA 05 F6 | 	mov	COUNT_, #11
2dd8c     E8 00 A0 FD | 	call	#pushregs_
2dd90     49 A7 02 F6 | 	mov	local01, arg01
2dd94     53 A9 02 FB | 	rdlong	local02, local01
2dd98     53 93 02 F6 | 	mov	arg01, local01
2dd9c     00 94 06 F6 | 	mov	arg02, #0
2dda0     4C F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2dda4     00 7A 0E F2 | 	cmp	result1, #0 wz
2dda8     18 02 90 5D |  if_ne	jmp	#LR__4902
2ddac     FF AA 06 F6 | 	mov	local03, #255
2ddb0     FF AC 06 F6 | 	mov	local04, #255
2ddb4     2C A6 06 F1 | 	add	local01, #44
2ddb8     FF FF FF FF 
2ddbc     53 FF 6B FC | 	wrlong	##-1, local01
2ddc0     2C A6 86 F1 | 	sub	local01, #44
2ddc4                 | ' #line 2404 "ff.c"
2ddc4                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2ddc4                 | ' 
2ddc4                 | ' 	do {
2ddc4                 | LR__4890
2ddc4     18 A6 06 F1 | 	add	local01, #24
2ddc8     53 95 02 FB | 	rdlong	arg02, local01
2ddcc     18 A6 86 F1 | 	sub	local01, #24
2ddd0     54 93 02 F6 | 	mov	arg01, local02
2ddd4     B4 EB BF FD | 	call	#_fatfs_cc_move_window
2ddd8     3D AF 0A F6 | 	mov	local05, result1 wz
2dddc     E0 01 90 5D |  if_ne	jmp	#LR__4901
2dde0     1C A6 06 F1 | 	add	local01, #28
2dde4     53 97 02 FB | 	rdlong	arg03, local01
2dde8     1C A6 86 F1 | 	sub	local01, #28
2ddec     4B B1 C2 FA | 	rdbyte	local06, arg03
2ddf0     58 97 02 F6 | 	mov	arg03, local06
2ddf4     07 96 4E F7 | 	zerox	arg03, #7 wz
2ddf8     04 AE 06 A6 |  if_e	mov	local05, #4
2ddfc     C0 01 90 AD |  if_e	jmp	#LR__4901
2de00     1C A6 06 F1 | 	add	local01, #28
2de04     53 B3 02 FB | 	rdlong	local07, local01
2de08     59 97 02 F6 | 	mov	arg03, local07
2de0c     0B 96 06 F1 | 	add	arg03, #11
2de10     4B B5 C2 FA | 	rdbyte	local08, arg03
2de14     3F B4 06 F5 | 	and	local08, #63
2de18     16 A6 86 F1 | 	sub	local01, #22
2de1c     53 B5 42 FC | 	wrbyte	local08, local01
2de20     06 A6 86 F1 | 	sub	local01, #6
2de24     58 97 E2 F8 | 	getbyte	arg03, local06, #0
2de28     E5 96 0E F2 | 	cmp	arg03, #229 wz
2de2c     18 00 90 AD |  if_e	jmp	#LR__4891
2de30     5A 97 E2 F8 | 	getbyte	arg03, local08, #0
2de34     08 96 CE F7 | 	test	arg03, #8 wz
2de38     5A B3 02 56 |  if_ne	mov	local07, local08
2de3c     59 B3 E2 58 |  if_ne	getbyte	local07, local07, #0
2de40     0F B2 0E 52 |  if_ne	cmp	local07, #15 wz
2de44     18 00 90 AD |  if_e	jmp	#LR__4892
2de48                 | LR__4891
2de48     FF AC 06 F6 | 	mov	local04, #255
2de4c     2C A6 06 F1 | 	add	local01, #44
2de50     FF FF FF FF 
2de54     53 FF 6B FC | 	wrlong	##-1, local01
2de58     2C A6 86 F1 | 	sub	local01, #44
2de5c     4C 01 90 FD | 	jmp	#LR__4900
2de60                 | LR__4892
2de60     5A B5 E2 F8 | 	getbyte	local08, local08, #0
2de64     0F B4 0E F2 | 	cmp	local08, #15 wz
2de68     C8 00 90 5D |  if_ne	jmp	#LR__4896
2de6c     2B A6 06 F1 | 	add	local01, #43
2de70     53 B5 C2 FA | 	rdbyte	local08, local01
2de74     2B A6 86 F1 | 	sub	local01, #43
2de78     40 B4 CE F7 | 	test	local08, #64 wz
2de7c     2C 01 90 5D |  if_ne	jmp	#LR__4899
2de80     58 B7 E2 F8 | 	getbyte	local09, local06, #0
2de84     40 B6 CE F7 | 	test	local09, #64 wz
2de88     30 00 90 AD |  if_e	jmp	#LR__4893
2de8c     1C A6 06 F1 | 	add	local01, #28
2de90     53 B7 02 FB | 	rdlong	local09, local01
2de94     0D B6 06 F1 | 	add	local09, #13
2de98     5B AB C2 FA | 	rdbyte	local03, local09
2de9c     58 B1 E2 F8 | 	getbyte	local06, local06, #0
2dea0     BF B0 06 F5 | 	and	local06, #191
2dea4     58 AD 02 F6 | 	mov	local04, local06
2dea8     0C A6 86 F1 | 	sub	local01, #12
2deac     53 B7 02 FB | 	rdlong	local09, local01
2deb0     1C A6 06 F1 | 	add	local01, #28
2deb4     53 B7 62 FC | 	wrlong	local09, local01
2deb8     2C A6 86 F1 | 	sub	local01, #44
2debc                 | LR__4893
2debc     58 B9 E2 F8 | 	getbyte	local10, local06, #0
2dec0     56 B3 E2 F8 | 	getbyte	local07, local04, #0
2dec4     59 B9 0A F2 | 	cmp	local10, local07 wz
2dec8     5C 00 90 5D |  if_ne	jmp	#LR__4894
2decc     55 B5 E2 F8 | 	getbyte	local08, local03, #0
2ded0     1C A6 06 F1 | 	add	local01, #28
2ded4     53 B3 02 FB | 	rdlong	local07, local01
2ded8     1C A6 86 F1 | 	sub	local01, #28
2dedc     0D B2 06 F1 | 	add	local07, #13
2dee0     59 B1 C2 FA | 	rdbyte	local06, local07
2dee4     58 B3 E2 F8 | 	getbyte	local07, local06, #0
2dee8     59 B5 0A F2 | 	cmp	local08, local07 wz
2deec     38 00 90 5D |  if_ne	jmp	#LR__4894
2def0     0C A8 06 F1 | 	add	local02, #12
2def4     54 93 02 FB | 	rdlong	arg01, local02
2def8     0C A8 86 F1 | 	sub	local02, #12
2defc     1C A6 06 F1 | 	add	local01, #28
2df00     53 BB 02 FB | 	rdlong	local11, local01
2df04     1C A6 86 F1 | 	sub	local01, #28
2df08     5D 95 02 F6 | 	mov	arg02, local11
2df0c     10 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2df10     00 7A 4E F2 | 	cmps	result1, #0 wz
2df14     56 BB 02 56 |  if_ne	mov	local11, local04
2df18     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2df1c     01 BA 86 51 |  if_ne	sub	local11, #1
2df20     5D B7 02 56 |  if_ne	mov	local09, local11
2df24     04 00 90 5D |  if_ne	jmp	#LR__4895
2df28                 | LR__4894
2df28     FF B6 06 F6 | 	mov	local09, #255
2df2c                 | LR__4895
2df2c     5B AD 02 F6 | 	mov	local04, local09
2df30     78 00 90 FD | 	jmp	#LR__4899
2df34                 | LR__4896
2df34     56 B7 02 F6 | 	mov	local09, local04
2df38     07 B6 4E F7 | 	zerox	local09, #7 wz
2df3c     20 00 90 5D |  if_ne	jmp	#LR__4897
2df40     55 B9 E2 F8 | 	getbyte	local10, local03, #0
2df44     1C A6 06 F1 | 	add	local01, #28
2df48     53 93 02 FB | 	rdlong	arg01, local01
2df4c     1C A6 86 F1 | 	sub	local01, #28
2df50     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2df54     3D 7B E2 F8 | 	getbyte	result1, result1, #0
2df58     3D B9 0A F2 | 	cmp	local10, result1 wz
2df5c     60 00 90 AD |  if_e	jmp	#LR__4901
2df60                 | LR__4897
2df60     2B A6 06 F1 | 	add	local01, #43
2df64     53 B7 C2 FA | 	rdbyte	local09, local01
2df68     2B A6 86 F1 | 	sub	local01, #43
2df6c     01 B6 CE F7 | 	test	local09, #1 wz
2df70     24 00 90 5D |  if_ne	jmp	#LR__4898
2df74     1C A6 06 F1 | 	add	local01, #28
2df78     53 93 02 FB | 	rdlong	arg01, local01
2df7c     04 A6 06 F1 | 	add	local01, #4
2df80     53 95 02 F6 | 	mov	arg02, local01
2df84     20 A6 86 F1 | 	sub	local01, #32
2df88     0B 96 06 F6 | 	mov	arg03, #11
2df8c     B0 DE BF FD | 	call	#_fatfs_cc_memcmp
2df90     00 7A 0E F2 | 	cmp	result1, #0 wz
2df94     28 00 90 AD |  if_e	jmp	#LR__4901
2df98                 | LR__4898
2df98     FF AC 06 F6 | 	mov	local04, #255
2df9c     2C A6 06 F1 | 	add	local01, #44
2dfa0     FF FF FF FF 
2dfa4     53 FF 6B FC | 	wrlong	##-1, local01
2dfa8     2C A6 86 F1 | 	sub	local01, #44
2dfac                 | LR__4899
2dfac                 | LR__4900
2dfac     53 93 02 F6 | 	mov	arg01, local01
2dfb0     00 94 06 F6 | 	mov	arg02, #0
2dfb4     A0 F4 BF FD | 	call	#_fatfs_cc_dir_next
2dfb8     3D AF 0A F6 | 	mov	local05, result1 wz
2dfbc     04 FE 9F AD |  if_e	jmp	#LR__4890
2dfc0                 | LR__4901
2dfc0                 | ' 
2dfc0                 | ' 	return res;
2dfc0     57 7B 02 F6 | 	mov	result1, local05
2dfc4                 | LR__4902
2dfc4     E7 F0 03 F6 | 	mov	ptra, fp
2dfc8     F2 00 A0 FD | 	call	#popregs_
2dfcc                 | _fatfs_cc_dir_find_ret
2dfcc     2D 00 64 FD | 	ret
2dfd0                 | 
2dfd0                 | _fatfs_cc_dir_register
2dfd0     09 CA 05 F6 | 	mov	COUNT_, #9
2dfd4     E8 00 A0 FD | 	call	#pushregs_
2dfd8     2C F0 07 F1 | 	add	ptra, #44
2dfdc     49 A7 02 F6 | 	mov	local01, arg01
2dfe0     53 A9 02 FB | 	rdlong	local02, local01
2dfe4     2B A6 06 F1 | 	add	local01, #43
2dfe8     53 AB C2 FA | 	rdbyte	local03, local01
2dfec     2B A6 86 F1 | 	sub	local01, #43
2dff0     A0 AA CE F7 | 	test	local03, #160 wz
2dff4     06 7A 06 56 |  if_ne	mov	result1, #6
2dff8     2C 02 90 5D |  if_ne	jmp	#LR__4921
2dffc                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2dffc     00 AC 06 F6 | 	mov	local04, #0
2e000     0C A8 06 F1 | 	add	local02, #12
2e004     D7 12 48 FB | 	callpa	#(@LR__4911-@LR__4910)>>2,fcache_load_ptr_
2e008                 | LR__4910
2e008     54 AB 02 FB | 	rdlong	local03, local02
2e00c     56 99 02 F6 | 	mov	arg04, local04
2e010     01 98 66 F0 | 	shl	arg04, #1
2e014     55 99 02 F1 | 	add	arg04, local03
2e018     4C AB EA FA | 	rdword	local03, arg04 wz
2e01c     56 AF 02 56 |  if_ne	mov	local05, local04
2e020     01 AE 06 51 |  if_ne	add	local05, #1
2e024     57 AD 02 56 |  if_ne	mov	local04, local05
2e028     DC FF 9F 5D |  if_ne	jmp	#LR__4910
2e02c                 | LR__4911
2e02c     0C A8 86 F1 | 	sub	local02, #12
2e030     E7 92 02 F6 | 	mov	arg01, fp
2e034     1C 92 06 F1 | 	add	arg01, #28
2e038     53 95 02 F6 | 	mov	arg02, local01
2e03c     20 94 06 F1 | 	add	arg02, #32
2e040     0C 96 06 F6 | 	mov	arg03, #12
2e044     44 68 BF FD | 	call	#__system____builtin_memmove
2e048     27 CE 05 F1 | 	add	fp, #39
2e04c     E7 AA C2 FA | 	rdbyte	local03, fp
2e050     27 CE 85 F1 | 	sub	fp, #39
2e054     01 AA CE F7 | 	test	local03, #1 wz
2e058     80 00 90 AD |  if_e	jmp	#LR__4914
2e05c     2B A6 06 F1 | 	add	local01, #43
2e060     53 81 48 FC | 	wrbyte	#64, local01
2e064     2B A6 86 F1 | 	sub	local01, #43
2e068                 | ' 		dp->fn[ 11 ] =  0x40 ;
2e068                 | ' 		for (n = 1; n < 100; n++) {
2e068     01 B0 06 F6 | 	mov	local06, #1
2e06c                 | LR__4912
2e06c     64 B0 16 F2 | 	cmp	local06, #100 wc
2e070     38 00 90 3D |  if_ae	jmp	#LR__4913
2e074     53 93 02 F6 | 	mov	arg01, local01
2e078     20 92 06 F1 | 	add	arg01, #32
2e07c     E7 94 02 F6 | 	mov	arg02, fp
2e080     1C 94 06 F1 | 	add	arg02, #28
2e084     0C A8 06 F1 | 	add	local02, #12
2e088     54 97 02 FB | 	rdlong	arg03, local02
2e08c     0C A8 86 F1 | 	sub	local02, #12
2e090     58 99 02 F6 | 	mov	arg04, local06
2e094     44 F9 BF FD | 	call	#_fatfs_cc_gen_numname
2e098     53 93 02 F6 | 	mov	arg01, local01
2e09c     E8 FC BF FD | 	call	#_fatfs_cc_dir_find
2e0a0     3D B3 0A F6 | 	mov	local07, result1 wz
2e0a4     01 B0 06 A1 |  if_e	add	local06, #1
2e0a8     C0 FF 9F AD |  if_e	jmp	#LR__4912
2e0ac                 | LR__4913
2e0ac     64 B0 0E F2 | 	cmp	local06, #100 wz
2e0b0     07 7A 06 A6 |  if_e	mov	result1, #7
2e0b4     70 01 90 AD |  if_e	jmp	#LR__4921
2e0b8     04 B2 0E F2 | 	cmp	local07, #4 wz
2e0bc     59 7B 02 56 |  if_ne	mov	result1, local07
2e0c0     64 01 90 5D |  if_ne	jmp	#LR__4921
2e0c4     27 CE 05 F1 | 	add	fp, #39
2e0c8     E7 AA C2 FA | 	rdbyte	local03, fp
2e0cc     27 CE 85 F1 | 	sub	fp, #39
2e0d0     2B A6 06 F1 | 	add	local01, #43
2e0d4     53 AB 42 FC | 	wrbyte	local03, local01
2e0d8     2B A6 86 F1 | 	sub	local01, #43
2e0dc                 | LR__4914
2e0dc     27 CE 05 F1 | 	add	fp, #39
2e0e0     E7 B2 C2 FA | 	rdbyte	local07, fp
2e0e4     02 B2 CE F7 | 	test	local07, #2 wz
2e0e8     0C AC 06 51 |  if_ne	add	local04, #12
2e0ec     0D AC 16 5D |  if_ne	qdiv	local04, #13
2e0f0     27 CE 85 F1 | 	sub	fp, #39
2e0f4     53 93 02 F6 | 	mov	arg01, local01
2e0f8     18 AA 62 5D |  if_ne	getqx	local03
2e0fc     01 AA 06 51 |  if_ne	add	local03, #1
2e100     01 AA 06 A6 |  if_e	mov	local03, #1
2e104     55 B5 02 F6 | 	mov	local08, local03
2e108     5A 95 02 F6 | 	mov	arg02, local08
2e10c     04 F5 BF FD | 	call	#_fatfs_cc_dir_alloc
2e110     3D B3 0A F6 | 	mov	local07, result1 wz
2e114     9C 00 90 5D |  if_ne	jmp	#LR__4918
2e118     01 B4 8E F1 | 	sub	local08, #1 wz
2e11c     94 00 90 AD |  if_e	jmp	#LR__4918
2e120     53 93 02 F6 | 	mov	arg01, local01
2e124     5A B3 02 F6 | 	mov	local07, local08
2e128     05 B2 66 F0 | 	shl	local07, #5
2e12c     10 A6 06 F1 | 	add	local01, #16
2e130     53 95 02 FB | 	rdlong	arg02, local01
2e134     10 A6 86 F1 | 	sub	local01, #16
2e138     59 95 82 F1 | 	sub	arg02, local07
2e13c     B0 F1 BF FD | 	call	#_fatfs_cc_dir_sdi
2e140     3D B3 0A F6 | 	mov	local07, result1 wz
2e144     6C 00 90 5D |  if_ne	jmp	#LR__4917
2e148     53 93 02 F6 | 	mov	arg01, local01
2e14c     20 92 06 F1 | 	add	arg01, #32
2e150     08 FA BF FD | 	call	#_fatfs_cc_sum_sfn
2e154     3D B7 02 F6 | 	mov	local09, result1
2e158                 | ' 			sum = sum_sfn(dp->fn);
2e158                 | ' 			do {
2e158                 | LR__4915
2e158     18 A6 06 F1 | 	add	local01, #24
2e15c     53 95 02 FB | 	rdlong	arg02, local01
2e160     18 A6 86 F1 | 	sub	local01, #24
2e164     54 93 02 F6 | 	mov	arg01, local02
2e168     20 E8 BF FD | 	call	#_fatfs_cc_move_window
2e16c     3D B3 0A F6 | 	mov	local07, result1 wz
2e170     40 00 90 5D |  if_ne	jmp	#LR__4916
2e174     0C A8 06 F1 | 	add	local02, #12
2e178     54 93 02 FB | 	rdlong	arg01, local02
2e17c     1C A6 06 F1 | 	add	local01, #28
2e180     53 95 02 FB | 	rdlong	arg02, local01
2e184     1C A6 86 F1 | 	sub	local01, #28
2e188     5B 99 02 F6 | 	mov	arg04, local09
2e18c     5A 97 02 F6 | 	mov	arg03, local08
2e190     78 F7 BF FD | 	call	#_fatfs_cc_put_lfn
2e194     09 A8 86 F1 | 	sub	local02, #9
2e198     54 03 48 FC | 	wrbyte	#1, local02
2e19c     03 A8 86 F1 | 	sub	local02, #3
2e1a0     53 93 02 F6 | 	mov	arg01, local01
2e1a4     00 94 06 F6 | 	mov	arg02, #0
2e1a8     AC F2 BF FD | 	call	#_fatfs_cc_dir_next
2e1ac     3D B3 0A F6 | 	mov	local07, result1 wz
2e1b0     E9 B5 6E AB |  if_e	djnz	local08, #LR__4915
2e1b4                 | LR__4916
2e1b4                 | LR__4917
2e1b4                 | LR__4918
2e1b4     00 B2 0E F2 | 	cmp	local07, #0 wz
2e1b8     68 00 90 5D |  if_ne	jmp	#LR__4920
2e1bc     18 A6 06 F1 | 	add	local01, #24
2e1c0     53 95 02 FB | 	rdlong	arg02, local01
2e1c4     18 A6 86 F1 | 	sub	local01, #24
2e1c8     54 93 02 F6 | 	mov	arg01, local02
2e1cc     BC E7 BF FD | 	call	#_fatfs_cc_move_window
2e1d0     3D B3 0A F6 | 	mov	local07, result1 wz
2e1d4     4C 00 90 5D |  if_ne	jmp	#LR__4919
2e1d8     1C A6 06 F1 | 	add	local01, #28
2e1dc     53 93 02 FB | 	rdlong	arg01, local01
2e1e0     00 94 06 F6 | 	mov	arg02, #0
2e1e4     20 96 06 F6 | 	mov	arg03, #32
2e1e8     D8 00 A0 FD | 	call	#\builtin_bytefill_
2e1ec     53 93 02 FB | 	rdlong	arg01, local01
2e1f0     04 A6 06 F1 | 	add	local01, #4
2e1f4     53 95 02 F6 | 	mov	arg02, local01
2e1f8     0B 96 06 F6 | 	mov	arg03, #11
2e1fc     8C 66 BF FD | 	call	#__system____builtin_memmove
2e200     04 A6 86 F1 | 	sub	local01, #4
2e204     53 AB 02 FB | 	rdlong	local03, local01
2e208     0F A6 06 F1 | 	add	local01, #15
2e20c     53 B7 C2 FA | 	rdbyte	local09, local01
2e210     18 B6 06 F5 | 	and	local09, #24
2e214     0C AA 06 F1 | 	add	local03, #12
2e218     55 B7 42 FC | 	wrbyte	local09, local03
2e21c     03 A8 06 F1 | 	add	local02, #3
2e220     54 03 48 FC | 	wrbyte	#1, local02
2e224                 | LR__4919
2e224                 | LR__4920
2e224                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2e224                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2e224                 | ' 
2e224                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2e224                 | ' 
2e224                 | ' 			fs->wflag = 1;
2e224                 | ' 		}
2e224                 | ' 	}
2e224                 | ' 
2e224                 | ' 	return res;
2e224     59 7B 02 F6 | 	mov	result1, local07
2e228                 | LR__4921
2e228     E7 F0 03 F6 | 	mov	ptra, fp
2e22c     F2 00 A0 FD | 	call	#popregs_
2e230                 | _fatfs_cc_dir_register_ret
2e230     2D 00 64 FD | 	ret
2e234                 | 
2e234                 | _fatfs_cc_dir_remove
2e234     05 CA 05 F6 | 	mov	COUNT_, #5
2e238     E8 00 A0 FD | 	call	#pushregs_
2e23c     49 A7 02 F6 | 	mov	local01, arg01
2e240     53 A9 02 FB | 	rdlong	local02, local01
2e244     10 A6 06 F1 | 	add	local01, #16
2e248     53 AB 02 FB | 	rdlong	local03, local01
2e24c     1C A6 06 F1 | 	add	local01, #28
2e250     53 95 02 FB | 	rdlong	arg02, local01
2e254     2C A6 86 F1 | 	sub	local01, #44
2e258     FF FF 7F FF 
2e25c     FF 95 0E F2 | 	cmp	arg02, ##-1 wz
2e260     00 AC 06 A6 |  if_e	mov	local04, #0
2e264     18 00 90 AD |  if_e	jmp	#LR__4930
2e268     53 93 02 F6 | 	mov	arg01, local01
2e26c     2C A6 06 F1 | 	add	local01, #44
2e270     53 95 02 FB | 	rdlong	arg02, local01
2e274     2C A6 86 F1 | 	sub	local01, #44
2e278     74 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2e27c     3D AD 02 F6 | 	mov	local04, result1
2e280                 | LR__4930
2e280     56 AF 0A F6 | 	mov	local05, local04 wz
2e284     64 00 90 5D |  if_ne	jmp	#LR__4933
2e288                 | ' 		do {
2e288                 | LR__4931
2e288     18 A6 06 F1 | 	add	local01, #24
2e28c     53 95 02 FB | 	rdlong	arg02, local01
2e290     18 A6 86 F1 | 	sub	local01, #24
2e294     54 93 02 F6 | 	mov	arg01, local02
2e298     F0 E6 BF FD | 	call	#_fatfs_cc_move_window
2e29c     3D AF 0A F6 | 	mov	local05, result1 wz
2e2a0     40 00 90 5D |  if_ne	jmp	#LR__4932
2e2a4     1C A6 06 F1 | 	add	local01, #28
2e2a8     53 AD 02 FB | 	rdlong	local04, local01
2e2ac     56 CB 49 FC | 	wrbyte	#229, local04
2e2b0     03 A8 06 F1 | 	add	local02, #3
2e2b4     54 03 48 FC | 	wrbyte	#1, local02
2e2b8     03 A8 86 F1 | 	sub	local02, #3
2e2bc     0C A6 86 F1 | 	sub	local01, #12
2e2c0     53 AD 02 FB | 	rdlong	local04, local01
2e2c4     10 A6 86 F1 | 	sub	local01, #16
2e2c8     55 AD 12 F2 | 	cmp	local04, local03 wc
2e2cc     14 00 90 3D |  if_ae	jmp	#LR__4932
2e2d0     53 93 02 F6 | 	mov	arg01, local01
2e2d4     00 94 06 F6 | 	mov	arg02, #0
2e2d8     7C F1 BF FD | 	call	#_fatfs_cc_dir_next
2e2dc     3D AF 0A F6 | 	mov	local05, result1 wz
2e2e0     A4 FF 9F AD |  if_e	jmp	#LR__4931
2e2e4                 | LR__4932
2e2e4     04 AE 0E F2 | 	cmp	local05, #4 wz
2e2e8     02 AE 06 A6 |  if_e	mov	local05, #2
2e2ec                 | LR__4933
2e2ec                 | ' 	}
2e2ec                 | ' #line 2590 "ff.c"
2e2ec                 | ' 	return res;
2e2ec     57 7B 02 F6 | 	mov	result1, local05
2e2f0     E7 F0 03 F6 | 	mov	ptra, fp
2e2f4     F2 00 A0 FD | 	call	#popregs_
2e2f8                 | _fatfs_cc_dir_remove_ret
2e2f8     2D 00 64 FD | 	ret
2e2fc                 | 
2e2fc                 | _fatfs_cc_get_fileinfo
2e2fc     0C CA 05 F6 | 	mov	COUNT_, #12
2e300     E8 00 A0 FD | 	call	#pushregs_
2e304     49 A7 02 F6 | 	mov	local01, arg01
2e308     4A A9 02 F6 | 	mov	local02, arg02
2e30c     53 AB 02 FB | 	rdlong	local03, local01
2e310     1C A8 06 F1 | 	add	local02, #28
2e314     54 01 48 FC | 	wrbyte	#0, local02
2e318     1C A8 86 F1 | 	sub	local02, #28
2e31c     18 A6 06 F1 | 	add	local01, #24
2e320     53 AD 0A FB | 	rdlong	local04, local01 wz
2e324     18 A6 86 F1 | 	sub	local01, #24
2e328     90 03 90 AD |  if_e	jmp	#LR__4954
2e32c     2C A6 06 F1 | 	add	local01, #44
2e330     53 AD 02 FB | 	rdlong	local04, local01
2e334     2C A6 86 F1 | 	sub	local01, #44
2e338     FF FF 7F FF 
2e33c     FF AD 0E F2 | 	cmp	local04, ##-1 wz
2e340     D8 00 90 AD |  if_e	jmp	#LR__4943
2e344     00 AE 06 F6 | 	mov	local05, #0
2e348     00 B0 06 F6 | 	mov	local06, #0
2e34c     00 B2 06 F6 | 	mov	local07, #0
2e350                 | ' 			si = di = 0;
2e350                 | ' 			hs = 0;
2e350                 | ' 			while (fs->lfnbuf[si] != 0) {
2e350                 | LR__4940
2e350     0C AA 06 F1 | 	add	local03, #12
2e354     55 AD 02 FB | 	rdlong	local04, local03
2e358     0C AA 86 F1 | 	sub	local03, #12
2e35c     58 B5 02 F6 | 	mov	local08, local06
2e360     01 B4 66 F0 | 	shl	local08, #1
2e364     56 B5 02 F1 | 	add	local08, local04
2e368     5A AD EA FA | 	rdword	local04, local08 wz
2e36c     90 00 90 AD |  if_e	jmp	#LR__4942
2e370     0C AA 06 F1 | 	add	local03, #12
2e374     55 B7 02 FB | 	rdlong	local09, local03
2e378     0C AA 86 F1 | 	sub	local03, #12
2e37c     58 AD 02 F6 | 	mov	local04, local06
2e380     01 AC 66 F0 | 	shl	local04, #1
2e384     5B AD 02 F1 | 	add	local04, local09
2e388     56 B9 E2 FA | 	rdword	local10, local04
2e38c     59 AD 02 F6 | 	mov	local04, local07
2e390     0F AC 4E F7 | 	zerox	local04, #15 wz
2e394     01 B0 06 F1 | 	add	local06, #1
2e398     24 00 90 5D |  if_ne	jmp	#LR__4941
2e39c     5C AD 32 F9 | 	getword	local04, local10, #0
2e3a0     6C 00 00 FF 
2e3a4     00 AC 16 F2 | 	cmp	local04, ##55296 wc
2e3a8     14 00 90 CD |  if_b	jmp	#LR__4941
2e3ac     5C BB 32 F9 | 	getword	local11, local10, #0
2e3b0     70 00 00 FF 
2e3b4     00 BA 16 F2 | 	cmp	local11, ##57344 wc
2e3b8     5C B3 02 C6 |  if_b	mov	local07, local10
2e3bc                 | ' 					hs = wc; continue;
2e3bc     90 FF 9F CD |  if_b	jmp	#LR__4940
2e3c0                 | LR__4941
2e3c0     59 93 32 F9 | 	getword	arg01, local07, #0
2e3c4     10 92 66 F0 | 	shl	arg01, #16
2e3c8     5C B9 32 F9 | 	getword	local10, local10, #0
2e3cc     5C 93 42 F5 | 	or	arg01, local10
2e3d0     57 95 02 F6 | 	mov	arg02, local05
2e3d4     54 B9 02 F6 | 	mov	local10, local02
2e3d8     1C B8 06 F1 | 	add	local10, #28
2e3dc     5C 95 02 F1 | 	add	arg02, local10
2e3e0     FF 96 06 F6 | 	mov	arg03, #255
2e3e4     57 97 82 F1 | 	sub	arg03, local05
2e3e8     28 E3 BF FD | 	call	#_fatfs_cc_put_utf
2e3ec     3D B9 0A F6 | 	mov	local10, result1 wz
2e3f0     00 AE 06 A6 |  if_e	mov	local05, #0
2e3f4     5C AF 02 51 |  if_ne	add	local05, local10
2e3f8     00 B2 06 56 |  if_ne	mov	local07, #0
2e3fc     50 FF 9F 5D |  if_ne	jmp	#LR__4940
2e400                 | LR__4942
2e400     59 AD 02 F6 | 	mov	local04, local07
2e404     0F AC 4E F7 | 	zerox	local04, #15 wz
2e408     00 AE 06 56 |  if_ne	mov	local05, #0
2e40c     54 B9 02 F6 | 	mov	local10, local02
2e410     1C B8 06 F1 | 	add	local10, #28
2e414     5C AF 02 F1 | 	add	local05, local10
2e418     57 01 48 FC | 	wrbyte	#0, local05
2e41c                 | LR__4943
2e41c     00 AE 06 F6 | 	mov	local05, #0
2e420     00 B0 06 F6 | 	mov	local06, #0
2e424                 | ' 			fno->fname[di] = 0;
2e424                 | ' 		}
2e424                 | ' 	}
2e424                 | ' 
2e424                 | ' 	si = di = 0;
2e424                 | ' 	while (si < 11) {
2e424                 | LR__4944
2e424     0B B0 16 F2 | 	cmp	local06, #11 wc
2e428     20 01 90 3D |  if_ae	jmp	#LR__4947
2e42c     1C A6 06 F1 | 	add	local01, #28
2e430     53 B7 02 FB | 	rdlong	local09, local01
2e434     1C A6 86 F1 | 	sub	local01, #28
2e438     58 B9 02 F6 | 	mov	local10, local06
2e43c     5B B9 02 F1 | 	add	local10, local09
2e440     5C B9 C2 FA | 	rdbyte	local10, local10
2e444     5C AD 32 F9 | 	getword	local04, local10, #0
2e448     20 AC 0E F2 | 	cmp	local04, #32 wz
2e44c     01 B0 06 F1 | 	add	local06, #1
2e450     D0 FF 9F AD |  if_e	jmp	#LR__4944
2e454     5C AD 32 F9 | 	getword	local04, local10, #0
2e458     05 AC 0E F2 | 	cmp	local04, #5 wz
2e45c     E5 B8 06 A6 |  if_e	mov	local10, #229
2e460     09 B0 0E F2 | 	cmp	local06, #9 wz
2e464     20 00 90 5D |  if_ne	jmp	#LR__4945
2e468     0C AE 16 F2 | 	cmp	local05, #12 wc
2e46c     18 00 90 3D |  if_ae	jmp	#LR__4945
2e470     57 BB 02 F6 | 	mov	local11, local05
2e474     54 B5 02 F6 | 	mov	local08, local02
2e478     0C B4 06 F1 | 	add	local08, #12
2e47c     5A BB 02 F1 | 	add	local11, local08
2e480     5D 5D 48 FC | 	wrbyte	#46, local11
2e484     01 AE 06 F1 | 	add	local05, #1
2e488                 | LR__4945
2e488     5C 93 32 F9 | 	getword	arg01, local10, #0
2e48c     07 92 4E F7 | 	zerox	arg01, #7 wz
2e490     00 7A 06 56 |  if_ne	mov	result1, #0
2e494                 | ' 
2e494                 | ' 	return 0;
2e494     00 7A 06 A6 |  if_e	mov	result1, #0
2e498     00 7A 0E F2 | 	cmp	result1, #0 wz
2e49c     08 B0 0E 52 |  if_ne	cmp	local06, #8 wz
2e4a0     0B B0 0E 52 |  if_ne	cmp	local06, #11 wz
2e4a4     50 00 90 AD |  if_e	jmp	#LR__4946
2e4a8     1C A6 06 F1 | 	add	local01, #28
2e4ac     53 BB 02 FB | 	rdlong	local11, local01
2e4b0     1C A6 86 F1 | 	sub	local01, #28
2e4b4     58 B5 02 F6 | 	mov	local08, local06
2e4b8     5D B5 02 F1 | 	add	local08, local11
2e4bc     5A 93 CA FA | 	rdbyte	arg01, local08 wz
2e4c0     00 7A 06 56 |  if_ne	mov	result1, #0
2e4c4                 | ' 
2e4c4                 | ' 	return 0;
2e4c4     00 7A 06 A6 |  if_e	mov	result1, #0
2e4c8     00 7A 0E F2 | 	cmp	result1, #0 wz
2e4cc     28 00 90 AD |  if_e	jmp	#LR__4946
2e4d0     5C B9 32 F9 | 	getword	local10, local10, #0
2e4d4     08 B8 66 F0 | 	shl	local10, #8
2e4d8     1C A6 06 F1 | 	add	local01, #28
2e4dc     53 BB 02 FB | 	rdlong	local11, local01
2e4e0     1C A6 86 F1 | 	sub	local01, #28
2e4e4     58 B7 02 F6 | 	mov	local09, local06
2e4e8     5D B7 02 F1 | 	add	local09, local11
2e4ec     5B BB C2 FA | 	rdbyte	local11, local09
2e4f0     5D B9 42 F5 | 	or	local10, local11
2e4f4     01 B0 06 F1 | 	add	local06, #1
2e4f8                 | LR__4946
2e4f8     5C 93 02 F6 | 	mov	arg01, local10
2e4fc     01 00 00 FF 
2e500     52 95 06 F6 | 	mov	arg02, ##850
2e504     24 D7 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2e508     3D B9 02 F6 | 	mov	local10, result1
2e50c     5C AD 02 F6 | 	mov	local04, local10
2e510     0F AC 4E F7 | 	zerox	local04, #15 wz
2e514     00 AE 06 A6 |  if_e	mov	local05, #0
2e518     30 00 90 AD |  if_e	jmp	#LR__4947
2e51c     5C 93 32 F9 | 	getword	arg01, local10, #0
2e520     57 95 02 F6 | 	mov	arg02, local05
2e524     54 BB 02 F6 | 	mov	local11, local02
2e528     0C BA 06 F1 | 	add	local11, #12
2e52c     5D 95 02 F1 | 	add	arg02, local11
2e530     0C 96 06 F6 | 	mov	arg03, #12
2e534     57 97 82 F1 | 	sub	arg03, local05
2e538     D8 E1 BF FD | 	call	#_fatfs_cc_put_utf
2e53c     3D BB 0A F6 | 	mov	local11, result1 wz
2e540     00 AE 06 A6 |  if_e	mov	local05, #0
2e544     5D AF 02 51 |  if_ne	add	local05, local11
2e548     D8 FE 9F 5D |  if_ne	jmp	#LR__4944
2e54c                 | LR__4947
2e54c     57 AD 02 F6 | 	mov	local04, local05
2e550     0C A8 06 F1 | 	add	local02, #12
2e554     54 AD 02 F1 | 	add	local04, local02
2e558     56 01 48 FC | 	wrbyte	#0, local04
2e55c     10 A8 06 F1 | 	add	local02, #16
2e560     54 AD CA FA | 	rdbyte	local04, local02 wz
2e564     1C A8 86 F1 | 	sub	local02, #28
2e568     F8 00 90 5D |  if_ne	jmp	#LR__4953
2e56c     00 AE 0E F2 | 	cmp	local05, #0 wz
2e570     1C 00 90 5D |  if_ne	jmp	#LR__4948
2e574     57 BB 02 F6 | 	mov	local11, local05
2e578     54 B9 02 F6 | 	mov	local10, local02
2e57c     1C B8 06 F1 | 	add	local10, #28
2e580     5C BB 02 F1 | 	add	local11, local10
2e584     5D 7F 48 FC | 	wrbyte	#63, local11
2e588     01 AE 06 F1 | 	add	local05, #1
2e58c     A4 00 90 FD | 	jmp	#LR__4952
2e590                 | LR__4948
2e590                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2e590     00 AE 06 F6 | 	mov	local05, #0
2e594     00 B0 06 F6 | 	mov	local06, #0
2e598     08 BC 06 F6 | 	mov	local12, #8
2e59c                 | LR__4949
2e59c     58 AD 02 F6 | 	mov	local04, local06
2e5a0     54 BB 02 F6 | 	mov	local11, local02
2e5a4     0C BA 06 F1 | 	add	local11, #12
2e5a8     5D AD 02 F1 | 	add	local04, local11
2e5ac     56 BB CA FA | 	rdbyte	local11, local04 wz
2e5b0     80 00 90 AD |  if_e	jmp	#LR__4951
2e5b4     58 B5 02 F6 | 	mov	local08, local06
2e5b8     54 BB 02 F6 | 	mov	local11, local02
2e5bc     0C BA 06 F1 | 	add	local11, #12
2e5c0     5D B5 02 F1 | 	add	local08, local11
2e5c4     5A B9 C2 FA | 	rdbyte	local10, local08
2e5c8     5C BB 32 F9 | 	getword	local11, local10, #0
2e5cc     2E BA 0E F2 | 	cmp	local11, #46 wz
2e5d0     10 BC 06 A6 |  if_e	mov	local12, #16
2e5d4     5C BB 32 F9 | 	getword	local11, local10, #0
2e5d8     41 BA 16 F2 | 	cmp	local11, #65 wc
2e5dc     30 00 90 CD |  if_b	jmp	#LR__4950
2e5e0     5C B5 32 F9 | 	getword	local08, local10, #0
2e5e4     5B B4 16 F2 | 	cmp	local08, #91 wc
2e5e8     24 00 90 3D |  if_ae	jmp	#LR__4950
2e5ec     1C A6 06 F1 | 	add	local01, #28
2e5f0     53 B7 02 FB | 	rdlong	local09, local01
2e5f4     1C A6 86 F1 | 	sub	local01, #28
2e5f8     0C B6 06 F1 | 	add	local09, #12
2e5fc     5B B7 C2 FA | 	rdbyte	local09, local09
2e600     5E BB E2 F8 | 	getbyte	local11, local12, #0
2e604     5D B7 CA F7 | 	test	local09, local11 wz
2e608     5C B9 32 59 |  if_ne	getword	local10, local10, #0
2e60c     20 B8 06 51 |  if_ne	add	local10, #32
2e610                 | LR__4950
2e610     57 BB 02 F6 | 	mov	local11, local05
2e614     54 B5 02 F6 | 	mov	local08, local02
2e618     1C B4 06 F1 | 	add	local08, #28
2e61c     5A BB 02 F1 | 	add	local11, local08
2e620     5C B9 32 F9 | 	getword	local10, local10, #0
2e624     5D B9 42 FC | 	wrbyte	local10, local11
2e628     01 B0 06 F1 | 	add	local06, #1
2e62c     01 AE 06 F1 | 	add	local05, #1
2e630     68 FF 9F FD | 	jmp	#LR__4949
2e634                 | LR__4951
2e634                 | LR__4952
2e634     54 BD 02 F6 | 	mov	local12, local02
2e638     1C BC 06 F1 | 	add	local12, #28
2e63c     5E AF 02 F1 | 	add	local05, local12
2e640     57 01 48 FC | 	wrbyte	#0, local05
2e644     1C A6 06 F1 | 	add	local01, #28
2e648     53 AD 02 FB | 	rdlong	local04, local01
2e64c     1C A6 86 F1 | 	sub	local01, #28
2e650     0C AC 06 F1 | 	add	local04, #12
2e654     56 BB CA FA | 	rdbyte	local11, local04 wz
2e658     0C A8 06 A1 |  if_e	add	local02, #12
2e65c     54 01 48 AC |  if_e	wrbyte	#0, local02
2e660     0C A8 86 A1 |  if_e	sub	local02, #12
2e664                 | LR__4953
2e664     1C A6 06 F1 | 	add	local01, #28
2e668     53 BD 02 FB | 	rdlong	local12, local01
2e66c     0B BC 06 F1 | 	add	local12, #11
2e670     5E AD C2 FA | 	rdbyte	local04, local12
2e674     3F AC 06 F5 | 	and	local04, #63
2e678     08 A8 06 F1 | 	add	local02, #8
2e67c     54 AD 42 FC | 	wrbyte	local04, local02
2e680     08 A8 86 F1 | 	sub	local02, #8
2e684     53 93 02 FB | 	rdlong	arg01, local01
2e688     1C 92 06 F1 | 	add	arg01, #28
2e68c                 | ' {
2e68c                 | ' 
2e68c                 | ' 	return *((DWORD*)ptr);
2e68c     49 7B 02 FB | 	rdlong	result1, arg01
2e690     54 7B 62 FC | 	wrlong	result1, local02
2e694     53 93 02 FB | 	rdlong	arg01, local01
2e698     16 92 06 F1 | 	add	arg01, #22
2e69c                 | ' {
2e69c                 | ' 
2e69c                 | ' 	return *((WORD*)ptr);
2e69c     49 7B E2 FA | 	rdword	result1, arg01
2e6a0     06 A8 06 F1 | 	add	local02, #6
2e6a4     54 7B 52 FC | 	wrword	result1, local02
2e6a8     53 93 02 FB | 	rdlong	arg01, local01
2e6ac     18 92 06 F1 | 	add	arg01, #24
2e6b0                 | ' {
2e6b0                 | ' 
2e6b0                 | ' 	return *((WORD*)ptr);
2e6b0     49 7B E2 FA | 	rdword	result1, arg01
2e6b4     02 A8 86 F1 | 	sub	local02, #2
2e6b8     54 7B 52 FC | 	wrword	result1, local02
2e6bc                 | LR__4954
2e6bc     E7 F0 03 F6 | 	mov	ptra, fp
2e6c0     F2 00 A0 FD | 	call	#popregs_
2e6c4                 | _fatfs_cc_get_fileinfo_ret
2e6c4     2D 00 64 FD | 	ret
2e6c8                 | 
2e6c8                 | _fatfs_cc_create_name
2e6c8     12 CA 05 F6 | 	mov	COUNT_, #18
2e6cc     E8 00 A0 FD | 	call	#pushregs_
2e6d0     34 F0 07 F1 | 	add	ptra, #52
2e6d4     49 A7 02 F6 | 	mov	local01, arg01
2e6d8     4A A9 02 F6 | 	mov	local02, arg02
2e6dc     54 7B 02 FB | 	rdlong	result1, local02
2e6e0     30 CE 05 F1 | 	add	fp, #48
2e6e4     E7 7A 62 FC | 	wrlong	result1, fp
2e6e8     30 CE 85 F1 | 	sub	fp, #48
2e6ec     53 AB 02 FB | 	rdlong	local03, local01
2e6f0     0C AA 06 F1 | 	add	local03, #12
2e6f4     55 AD 02 FB | 	rdlong	local04, local03
2e6f8     00 AE 06 F6 | 	mov	local05, #0
2e6fc                 | ' 
2e6fc                 | ' 
2e6fc                 | ' 
2e6fc                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2e6fc                 | ' 	for (;;) {
2e6fc                 | LR__4960
2e6fc     E7 92 02 F6 | 	mov	arg01, fp
2e700     30 92 06 F1 | 	add	arg01, #48
2e704     FC DE BF FD | 	call	#_fatfs_cc_tchar2uni
2e708     3D B1 02 F6 | 	mov	local06, result1
2e70c     FF FF 7F FF 
2e710     FF B1 0E F2 | 	cmp	local06, ##-1 wz
2e714     06 7A 06 A6 |  if_e	mov	result1, #6
2e718     84 04 90 AD |  if_e	jmp	#LR__4994
2e71c     80 00 00 FF 
2e720     00 B0 16 F2 | 	cmp	local06, ##65536 wc
2e724     20 00 90 CD |  if_b	jmp	#LR__4961
2e728     57 AB 02 F6 | 	mov	local03, local05
2e72c     01 AA 66 F0 | 	shl	local03, #1
2e730     56 B3 02 F6 | 	mov	local07, local04
2e734     56 AB 02 F1 | 	add	local03, local04
2e738     58 B5 02 F6 | 	mov	local08, local06
2e73c     10 B4 46 F0 | 	shr	local08, #16
2e740     55 B5 52 FC | 	wrword	local08, local03
2e744     01 AE 06 F1 | 	add	local05, #1
2e748                 | LR__4961
2e748     58 B7 02 F6 | 	mov	local09, local06
2e74c     5B AB 32 F9 | 	getword	local03, local09, #0
2e750     20 AA 16 F2 | 	cmp	local03, #32 wc
2e754     68 00 90 CD |  if_b	jmp	#LR__4963
2e758     5B B9 32 F9 | 	getword	local10, local09, #0
2e75c     2F B8 0E F2 | 	cmp	local10, #47 wz
2e760     5B AB 02 56 |  if_ne	mov	local03, local09
2e764     55 AB 32 59 |  if_ne	getword	local03, local03, #0
2e768     5C AA 0E 52 |  if_ne	cmp	local03, #92 wz
2e76c     50 00 90 AD |  if_e	jmp	#LR__4963
2e770     5B AB 32 F9 | 	getword	local03, local09, #0
2e774     80 AA 16 F2 | 	cmp	local03, #128 wc
2e778     1C 00 90 3D |  if_ae	jmp	#LR__4962
2e77c     92 01 00 FF 
2e780     2B 93 06 F6 | 	mov	arg01, ##@LR__5483
2e784     5B 95 32 F9 | 	getword	arg02, local09, #0
2e788     80 D7 BF FD | 	call	#_fatfs_cc_strchr
2e78c     3D B9 0A F6 | 	mov	local10, result1 wz
2e790     06 7A 06 56 |  if_ne	mov	result1, #6
2e794     08 04 90 5D |  if_ne	jmp	#LR__4994
2e798                 | LR__4962
2e798     FF AE 16 F2 | 	cmp	local05, #255 wc
2e79c     06 7A 06 36 |  if_ae	mov	result1, #6
2e7a0     FC 03 90 3D |  if_ae	jmp	#LR__4994
2e7a4     57 B1 02 F6 | 	mov	local06, local05
2e7a8     01 B0 66 F0 | 	shl	local06, #1
2e7ac     56 B3 02 F6 | 	mov	local07, local04
2e7b0     56 B1 02 F1 | 	add	local06, local04
2e7b4     58 B7 52 FC | 	wrword	local09, local06
2e7b8     01 AE 06 F1 | 	add	local05, #1
2e7bc     3C FF 9F FD | 	jmp	#LR__4960
2e7c0                 | LR__4963
2e7c0     5B AB 32 F9 | 	getword	local03, local09, #0
2e7c4     20 AA 16 F2 | 	cmp	local03, #32 wc
2e7c8     04 BA 06 C6 |  if_b	mov	local11, #4
2e7cc     68 00 90 CD |  if_b	jmp	#LR__4968
2e7d0     D7 24 48 FB | 	callpa	#(@LR__4966-@LR__4964)>>2,fcache_load_ptr_
2e7d4                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2e7d4                 | LR__4964
2e7d4     30 CE 05 F1 | 	add	fp, #48
2e7d8     E7 B8 02 FB | 	rdlong	local10, fp
2e7dc     30 CE 85 F1 | 	sub	fp, #48
2e7e0     5C AB C2 FA | 	rdbyte	local03, local10
2e7e4     2F AA 0E F2 | 	cmp	local03, #47 wz
2e7e8     18 00 90 AD |  if_e	jmp	#LR__4965
2e7ec     30 CE 05 F1 | 	add	fp, #48
2e7f0     E7 B4 02 FB | 	rdlong	local08, fp
2e7f4     30 CE 85 F1 | 	sub	fp, #48
2e7f8     5A BB C2 FA | 	rdbyte	local11, local08
2e7fc     5C BA 0E F2 | 	cmp	local11, #92 wz
2e800     18 00 90 5D |  if_ne	jmp	#LR__4967
2e804                 | LR__4965
2e804     30 CE 05 F1 | 	add	fp, #48
2e808     E7 BA 02 FB | 	rdlong	local11, fp
2e80c     01 BA 06 F1 | 	add	local11, #1
2e810     E7 BA 62 FC | 	wrlong	local11, fp
2e814     30 CE 85 F1 | 	sub	fp, #48
2e818     B8 FF 9F FD | 	jmp	#LR__4964
2e81c                 | LR__4966
2e81c                 | LR__4967
2e81c     00 BA 06 F6 | 	mov	local11, #0
2e820     30 CE 05 F1 | 	add	fp, #48
2e824     E7 B8 02 FB | 	rdlong	local10, fp
2e828     30 CE 85 F1 | 	sub	fp, #48
2e82c     5C AB C2 FA | 	rdbyte	local03, local10
2e830     20 AA 16 F2 | 	cmp	local03, #32 wc
2e834     04 BA 06 C6 |  if_b	mov	local11, #4
2e838                 | LR__4968
2e838     30 CE 05 F1 | 	add	fp, #48
2e83c     E7 AA 02 FB | 	rdlong	local03, fp
2e840     30 CE 85 F1 | 	sub	fp, #48
2e844     54 AB 62 FC | 	wrlong	local03, local02
2e848                 | ' 	}
2e848                 | ' 	*path = p;
2e848                 | ' #line 2862 "ff.c"
2e848                 | ' 	while (di) {
2e848     00 AE 0E F2 | 	cmp	local05, #0 wz
2e84c     30 00 90 AD |  if_e	jmp	#LR__4971
2e850     D7 16 48 FB | 	callpa	#(@LR__4970-@LR__4969)>>2,fcache_load_ptr_
2e854                 | LR__4969
2e854     57 B7 02 F6 | 	mov	local09, local05
2e858     01 B6 86 F1 | 	sub	local09, #1
2e85c     01 B6 66 F0 | 	shl	local09, #1
2e860     56 B7 02 F1 | 	add	local09, local04
2e864     5B B7 E2 FA | 	rdword	local09, local09
2e868     5B AB 32 F9 | 	getword	local03, local09, #0
2e86c     20 AA 0E F2 | 	cmp	local03, #32 wz
2e870     5B B9 02 56 |  if_ne	mov	local10, local09
2e874     5C B9 32 59 |  if_ne	getword	local10, local10, #0
2e878     2E B8 0E 52 |  if_ne	cmp	local10, #46 wz
2e87c     F5 AF 6E AB |  if_e	djnz	local05, #LR__4969
2e880                 | LR__4970
2e880                 | LR__4971
2e880     57 B9 02 F6 | 	mov	local10, local05
2e884     01 B8 66 F0 | 	shl	local10, #1
2e888     56 B9 02 F1 | 	add	local10, local04
2e88c     5C 01 58 FC | 	wrword	#0, local10
2e890     00 AE 0E F2 | 	cmp	local05, #0 wz
2e894     06 7A 06 A6 |  if_e	mov	result1, #6
2e898     04 03 90 AD |  if_e	jmp	#LR__4994
2e89c                 | ' 
2e89c                 | ' 
2e89c                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2e89c     00 BC 06 F6 | 	mov	local12, #0
2e8a0     D7 12 48 FB | 	callpa	#(@LR__4973-@LR__4972)>>2,fcache_load_ptr_
2e8a4                 | LR__4972
2e8a4     5E B7 02 F6 | 	mov	local09, local12
2e8a8     01 B6 66 F0 | 	shl	local09, #1
2e8ac     56 B7 02 F1 | 	add	local09, local04
2e8b0     5B AB E2 FA | 	rdword	local03, local09
2e8b4     20 AA 0E F2 | 	cmp	local03, #32 wz
2e8b8     5E B5 02 A6 |  if_e	mov	local08, local12
2e8bc     01 B4 06 A1 |  if_e	add	local08, #1
2e8c0     5A BD 02 A6 |  if_e	mov	local12, local08
2e8c4     DC FF 9F AD |  if_e	jmp	#LR__4972
2e8c8                 | LR__4973
2e8c8     01 BC 16 F2 | 	cmp	local12, #1 wc
2e8cc     18 00 90 3D |  if_ae	jmp	#LR__4974
2e8d0     5E B7 02 F6 | 	mov	local09, local12
2e8d4     01 B6 66 F0 | 	shl	local09, #1
2e8d8     56 B7 02 F1 | 	add	local09, local04
2e8dc     5B AB E2 FA | 	rdword	local03, local09
2e8e0     2E AA 0E F2 | 	cmp	local03, #46 wz
2e8e4     08 00 90 5D |  if_ne	jmp	#LR__4975
2e8e8                 | LR__4974
2e8e8     5D BB E2 F8 | 	getbyte	local11, local11, #0
2e8ec     03 BA 46 F5 | 	or	local11, #3
2e8f0                 | LR__4975
2e8f0     D7 14 48 FB | 	callpa	#(@LR__4977-@LR__4976)>>2,fcache_load_ptr_
2e8f4                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2e8f4                 | LR__4976
2e8f4     01 AE 16 F2 | 	cmp	local05, #1 wc
2e8f8     20 00 90 CD |  if_b	jmp	#LR__4978
2e8fc     57 B7 02 F6 | 	mov	local09, local05
2e900     01 B6 86 F1 | 	sub	local09, #1
2e904     01 B6 66 F0 | 	shl	local09, #1
2e908     56 B7 02 F1 | 	add	local09, local04
2e90c     5B AB E2 FA | 	rdword	local03, local09
2e910     2E AA 0E F2 | 	cmp	local03, #46 wz
2e914     01 AE 86 51 |  if_ne	sub	local05, #1
2e918     D8 FF 9F 5D |  if_ne	jmp	#LR__4976
2e91c                 | LR__4977
2e91c                 | LR__4978
2e91c     53 93 02 F6 | 	mov	arg01, local01
2e920     20 92 06 F1 | 	add	arg01, #32
2e924     20 94 06 F6 | 	mov	arg02, #32
2e928     0B 96 06 F6 | 	mov	arg03, #11
2e92c     49 BF 02 F6 | 	mov	local13, arg01
2e930     D8 00 A0 FD | 	call	#\builtin_bytefill_
2e934     5F 7B 02 F6 | 	mov	result1, local13
2e938     00 C0 06 F6 | 	mov	local14, #0
2e93c     00 C2 06 F6 | 	mov	local15, #0
2e940     08 C4 06 F6 | 	mov	local16, #8
2e944                 | ' 
2e944                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2e944                 | ' 	i = b = 0; ni = 8;
2e944                 | ' 	for (;;) {
2e944                 | LR__4979
2e944     5E C7 02 F6 | 	mov	local17, local12
2e948     63 C9 02 F6 | 	mov	local18, local17
2e94c     01 C8 66 F0 | 	shl	local18, #1
2e950     56 B3 02 F6 | 	mov	local07, local04
2e954     56 C9 02 F1 | 	add	local18, local04
2e958     64 B7 E2 FA | 	rdword	local09, local18
2e95c     5B AB 02 F6 | 	mov	local03, local09
2e960     0F AA 4E F7 | 	zerox	local03, #15 wz
2e964     01 BC 06 F1 | 	add	local12, #1
2e968     B0 01 90 AD |  if_e	jmp	#LR__4992
2e96c     5B AB 32 F9 | 	getword	local03, local09, #0
2e970     20 AA 0E F2 | 	cmp	local03, #32 wz
2e974     14 00 90 AD |  if_e	jmp	#LR__4980
2e978     5B B9 32 F9 | 	getword	local10, local09, #0
2e97c     2E B8 0E F2 | 	cmp	local10, #46 wz
2e980     14 00 90 5D |  if_ne	jmp	#LR__4981
2e984     57 BD 0A F2 | 	cmp	local12, local05 wz
2e988     0C 00 90 AD |  if_e	jmp	#LR__4981
2e98c                 | LR__4980
2e98c     5D BB E2 F8 | 	getbyte	local11, local11, #0
2e990     03 BA 46 F5 | 	or	local11, #3
2e994                 | ' 			cf |=  0x01  |  0x02 ;
2e994                 | ' 			continue;
2e994     AC FF 9F FD | 	jmp	#LR__4979
2e998                 | LR__4981
2e998     62 C3 12 F2 | 	cmp	local15, local16 wc
2e99c     57 BD 0A C2 |  if_b	cmp	local12, local05 wz
2e9a0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__4982
2e9a4     0B C4 0E F2 | 	cmp	local16, #11 wz
2e9a8     5D BB E2 A8 |  if_e	getbyte	local11, local11, #0
2e9ac     03 BA 46 A5 |  if_e	or	local11, #3
2e9b0                 | ' 				cf |=  0x01  |  0x02 ;
2e9b0                 | ' 				break;
2e9b0     68 01 90 AD |  if_e	jmp	#LR__4992
2e9b4     57 BD 0A F2 | 	cmp	local12, local05 wz
2e9b8     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2e9bc     03 BA 46 55 |  if_ne	or	local11, #3
2e9c0     57 BD 1A F2 | 	cmp	local12, local05 wcz
2e9c4     54 01 90 1D |  if_a	jmp	#LR__4992
2e9c8     57 BD 02 F6 | 	mov	local12, local05
2e9cc     08 C2 06 F6 | 	mov	local15, #8
2e9d0     0B C4 06 F6 | 	mov	local16, #11
2e9d4     60 C1 E2 F8 | 	getbyte	local14, local14, #0
2e9d8     02 C0 66 F0 | 	shl	local14, #2
2e9dc                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2e9dc                 | ' 			continue;
2e9dc     64 FF 9F FD | 	jmp	#LR__4979
2e9e0                 | LR__4982
2e9e0     5B AB 32 F9 | 	getword	local03, local09, #0
2e9e4     80 AA 16 F2 | 	cmp	local03, #128 wc
2e9e8     50 00 90 CD |  if_b	jmp	#LR__4984
2e9ec     5D BB E2 F8 | 	getbyte	local11, local11, #0
2e9f0     02 BA 46 F5 | 	or	local11, #2
2e9f4     5B 93 32 F9 | 	getword	arg01, local09, #0
2e9f8     01 00 00 FF 
2e9fc     52 B9 06 F6 | 	mov	local10, ##850
2ea00     01 00 00 FF 
2ea04     52 95 06 F6 | 	mov	arg02, ##850
2ea08     B0 D1 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2ea0c     3D B7 02 F6 | 	mov	local09, result1
2ea10     5B AB 32 F9 | 	getword	local03, local09, #0
2ea14     80 AA CE F7 | 	test	local03, #128 wz
2ea18     20 00 90 AD |  if_e	jmp	#LR__4983
2ea1c     5B B9 32 F9 | 	getword	local10, local09, #0
2ea20     7F B8 06 F5 | 	and	local10, #127
2ea24     5C C7 02 F6 | 	mov	local17, local10
2ea28     36 C9 02 F6 | 	mov	local18, ptr__fatfs_cc_dat__
2ea2c     01 00 00 FF 
2ea30     BB C9 06 F1 | 	add	local18, ##955
2ea34     64 C7 02 F1 | 	add	local17, local18
2ea38     63 B7 C2 FA | 	rdbyte	local09, local17
2ea3c                 | LR__4983
2ea3c                 | LR__4984
2ea3c     5B AB 32 F9 | 	getword	local03, local09, #0
2ea40     00 AB 16 F2 | 	cmp	local03, #256 wc
2ea44     40 00 90 CD |  if_b	jmp	#LR__4985
2ea48     62 AB 02 F6 | 	mov	local03, local16
2ea4c     01 AA 86 F1 | 	sub	local03, #1
2ea50     55 C3 12 F2 | 	cmp	local15, local03 wc
2ea54     5D BB E2 38 |  if_ae	getbyte	local11, local11, #0
2ea58     03 BA 46 35 |  if_ae	or	local11, #3
2ea5c     62 C3 02 36 |  if_ae	mov	local15, local16
2ea60                 | ' 				cf |=  0x01  |  0x02 ;
2ea60                 | ' 				i = ni; continue;
2ea60     E0 FE 9F 3D |  if_ae	jmp	#LR__4979
2ea64     61 C7 02 F6 | 	mov	local17, local15
2ea68     53 C9 02 F6 | 	mov	local18, local01
2ea6c     20 C8 06 F1 | 	add	local18, #32
2ea70     64 C7 02 F1 | 	add	local17, local18
2ea74     5B B3 32 F9 | 	getword	local07, local09, #0
2ea78     08 B2 46 F0 | 	shr	local07, #8
2ea7c     63 B3 42 FC | 	wrbyte	local07, local17
2ea80     01 C2 06 F1 | 	add	local15, #1
2ea84     74 00 90 FD | 	jmp	#LR__4991
2ea88                 | LR__4985
2ea88     5B AB 02 F6 | 	mov	local03, local09
2ea8c     0F AA 4E F7 | 	zerox	local03, #15 wz
2ea90     18 00 90 AD |  if_e	jmp	#LR__4986
2ea94     92 01 00 FF 
2ea98     34 93 06 F6 | 	mov	arg01, ##@LR__5484
2ea9c     5B 95 32 F9 | 	getword	arg02, local09, #0
2eaa0     68 D4 BF FD | 	call	#_fatfs_cc_strchr
2eaa4     00 7A 0E F2 | 	cmp	result1, #0 wz
2eaa8     10 00 90 AD |  if_e	jmp	#LR__4987
2eaac                 | LR__4986
2eaac     5F B6 06 F6 | 	mov	local09, #95
2eab0     5D BB E2 F8 | 	getbyte	local11, local11, #0
2eab4     03 BA 46 F5 | 	or	local11, #3
2eab8     40 00 90 FD | 	jmp	#LR__4990
2eabc                 | LR__4987
2eabc     5B AB 32 F9 | 	getword	local03, local09, #0
2eac0     41 AA 16 F2 | 	cmp	local03, #65 wc
2eac4     10 00 90 CD |  if_b	jmp	#LR__4988
2eac8     5B B9 32 F9 | 	getword	local10, local09, #0
2eacc     5B B8 16 F2 | 	cmp	local10, #91 wc
2ead0     60 C1 E2 C8 |  if_b	getbyte	local14, local14, #0
2ead4     02 C0 46 C5 |  if_b	or	local14, #2
2ead8                 | LR__4988
2ead8     5B AB 32 F9 | 	getword	local03, local09, #0
2eadc     61 AA 16 F2 | 	cmp	local03, #97 wc
2eae0     18 00 90 CD |  if_b	jmp	#LR__4989
2eae4     5B B9 32 F9 | 	getword	local10, local09, #0
2eae8     7B B8 16 F2 | 	cmp	local10, #123 wc
2eaec     60 C1 E2 C8 |  if_b	getbyte	local14, local14, #0
2eaf0     01 C0 46 C5 |  if_b	or	local14, #1
2eaf4     5B B7 32 C9 |  if_b	getword	local09, local09, #0
2eaf8     20 B6 86 C1 |  if_b	sub	local09, #32
2eafc                 | LR__4989
2eafc                 | LR__4990
2eafc                 | LR__4991
2eafc     61 C7 02 F6 | 	mov	local17, local15
2eb00     53 C9 02 F6 | 	mov	local18, local01
2eb04     20 C8 06 F1 | 	add	local18, #32
2eb08     64 C7 02 F1 | 	add	local17, local18
2eb0c     5B B7 32 F9 | 	getword	local09, local09, #0
2eb10     63 B7 42 FC | 	wrbyte	local09, local17
2eb14     01 C2 06 F1 | 	add	local15, #1
2eb18     28 FE 9F FD | 	jmp	#LR__4979
2eb1c                 | LR__4992
2eb1c     20 A6 06 F1 | 	add	local01, #32
2eb20     53 AB C2 FA | 	rdbyte	local03, local01
2eb24     20 A6 86 F1 | 	sub	local01, #32
2eb28     E5 AA 0E F2 | 	cmp	local03, #229 wz
2eb2c     20 A6 06 A1 |  if_e	add	local01, #32
2eb30     53 0B 48 AC |  if_e	wrbyte	#5, local01
2eb34     20 A6 86 A1 |  if_e	sub	local01, #32
2eb38     08 C4 0E F2 | 	cmp	local16, #8 wz
2eb3c     60 C1 E2 A8 |  if_e	getbyte	local14, local14, #0
2eb40     02 C0 66 A0 |  if_e	shl	local14, #2
2eb44     60 AB E2 F8 | 	getbyte	local03, local14, #0
2eb48     0C AA 06 F5 | 	and	local03, #12
2eb4c     0C AA 0E F2 | 	cmp	local03, #12 wz
2eb50     60 B9 02 56 |  if_ne	mov	local10, local14
2eb54     5C B9 E2 58 |  if_ne	getbyte	local10, local10, #0
2eb58     03 B8 06 55 |  if_ne	and	local10, #3
2eb5c     03 B8 0E 52 |  if_ne	cmp	local10, #3 wz
2eb60     5D BB E2 A8 |  if_e	getbyte	local11, local11, #0
2eb64     02 BA 46 A5 |  if_e	or	local11, #2
2eb68     5D AB E2 F8 | 	getbyte	local03, local11, #0
2eb6c     02 AA CE F7 | 	test	local03, #2 wz
2eb70     20 00 90 5D |  if_ne	jmp	#LR__4993
2eb74     60 AB E2 F8 | 	getbyte	local03, local14, #0
2eb78     01 AA CE F7 | 	test	local03, #1 wz
2eb7c     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2eb80     10 BA 46 55 |  if_ne	or	local11, #16
2eb84     60 C1 E2 F8 | 	getbyte	local14, local14, #0
2eb88     04 C0 CE F7 | 	test	local14, #4 wz
2eb8c     5D BB E2 58 |  if_ne	getbyte	local11, local11, #0
2eb90     08 BA 46 55 |  if_ne	or	local11, #8
2eb94                 | LR__4993
2eb94     2B A6 06 F1 | 	add	local01, #43
2eb98     53 BB 42 FC | 	wrbyte	local11, local01
2eb9c                 | ' 	}
2eb9c                 | ' 
2eb9c                 | ' 	dp->fn[ 11 ] = cf;
2eb9c                 | ' 
2eb9c                 | ' 	return FR_OK;
2eb9c     00 7A 06 F6 | 	mov	result1, #0
2eba0                 | LR__4994
2eba0     E7 F0 03 F6 | 	mov	ptra, fp
2eba4     F2 00 A0 FD | 	call	#popregs_
2eba8                 | _fatfs_cc_create_name_ret
2eba8     2D 00 64 FD | 	ret
2ebac                 | 
2ebac                 | _fatfs_cc_follow_path
2ebac     04 CA 05 F6 | 	mov	COUNT_, #4
2ebb0     E8 00 A0 FD | 	call	#pushregs_
2ebb4     18 F0 07 F1 | 	add	ptra, #24
2ebb8     49 A7 02 F6 | 	mov	local01, arg01
2ebbc     08 CE 05 F1 | 	add	fp, #8
2ebc0     E7 94 62 FC | 	wrlong	arg02, fp
2ebc4     08 CE 85 F1 | 	sub	fp, #8
2ebc8     53 A9 02 FB | 	rdlong	local02, local01
2ebcc     D7 24 48 FB | 	callpa	#(@LR__5002-@LR__5000)>>2,fcache_load_ptr_
2ebd0                 | ' )
2ebd0                 | ' {
2ebd0                 | ' 	FRESULT res;
2ebd0                 | ' 	BYTE ns;
2ebd0                 | ' 	FATFS *fs = dp->obj.fs;
2ebd0                 | ' #line 3034 "ff.c"
2ebd0                 | ' 	{
2ebd0                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2ebd0                 | LR__5000
2ebd0     08 CE 05 F1 | 	add	fp, #8
2ebd4     E7 7A 02 FB | 	rdlong	result1, fp
2ebd8     08 CE 85 F1 | 	sub	fp, #8
2ebdc     3D 7B C2 FA | 	rdbyte	result1, result1
2ebe0     2F 7A 0E F2 | 	cmp	result1, #47 wz
2ebe4     18 00 90 AD |  if_e	jmp	#LR__5001
2ebe8     08 CE 05 F1 | 	add	fp, #8
2ebec     E7 7A 02 FB | 	rdlong	result1, fp
2ebf0     08 CE 85 F1 | 	sub	fp, #8
2ebf4     3D 7B C2 FA | 	rdbyte	result1, result1
2ebf8     5C 7A 0E F2 | 	cmp	result1, #92 wz
2ebfc     18 00 90 5D |  if_ne	jmp	#LR__5003
2ec00                 | LR__5001
2ec00     08 CE 05 F1 | 	add	fp, #8
2ec04     E7 7A 02 FB | 	rdlong	result1, fp
2ec08     01 7A 06 F1 | 	add	result1, #1
2ec0c     E7 7A 62 FC | 	wrlong	result1, fp
2ec10     08 CE 85 F1 | 	sub	fp, #8
2ec14     B8 FF 9F FD | 	jmp	#LR__5000
2ec18                 | LR__5002
2ec18                 | LR__5003
2ec18     08 A6 06 F1 | 	add	local01, #8
2ec1c     53 01 68 FC | 	wrlong	#0, local01
2ec20     08 A6 86 F1 | 	sub	local01, #8
2ec24     08 CE 05 F1 | 	add	fp, #8
2ec28     E7 94 02 FB | 	rdlong	arg02, fp
2ec2c     08 CE 85 F1 | 	sub	fp, #8
2ec30     4A 95 C2 FA | 	rdbyte	arg02, arg02
2ec34     20 94 16 F2 | 	cmp	arg02, #32 wc
2ec38     20 00 90 3D |  if_ae	jmp	#LR__5004
2ec3c     2B A6 06 F1 | 	add	local01, #43
2ec40     53 01 49 FC | 	wrbyte	#128, local01
2ec44     2B A6 86 F1 | 	sub	local01, #43
2ec48     53 93 02 F6 | 	mov	arg01, local01
2ec4c     00 94 06 F6 | 	mov	arg02, #0
2ec50     9C E6 BF FD | 	call	#_fatfs_cc_dir_sdi
2ec54     3D AB 02 F6 | 	mov	local03, result1
2ec58     A0 00 90 FD | 	jmp	#LR__5008
2ec5c                 | LR__5004
2ec5c                 | ' 		for (;;) {
2ec5c                 | LR__5005
2ec5c     E7 94 02 F6 | 	mov	arg02, fp
2ec60     08 94 06 F1 | 	add	arg02, #8
2ec64     53 93 02 F6 | 	mov	arg01, local01
2ec68     5C FA BF FD | 	call	#_fatfs_cc_create_name
2ec6c     3D AB 0A F6 | 	mov	local03, result1 wz
2ec70     88 00 90 5D |  if_ne	jmp	#LR__5007
2ec74     53 93 02 F6 | 	mov	arg01, local01
2ec78     0C F1 BF FD | 	call	#_fatfs_cc_dir_find
2ec7c     3D AB 0A F6 | 	mov	local03, result1 wz
2ec80     2B A6 06 F1 | 	add	local01, #43
2ec84     53 AD C2 FA | 	rdbyte	local04, local01
2ec88     2B A6 86 F1 | 	sub	local01, #43
2ec8c     18 00 90 AD |  if_e	jmp	#LR__5006
2ec90     04 AA 0E F2 | 	cmp	local03, #4 wz
2ec94     64 00 90 5D |  if_ne	jmp	#LR__5007
2ec98     56 AD E2 F8 | 	getbyte	local04, local04, #0
2ec9c     04 AC CE F7 | 	test	local04, #4 wz
2eca0     05 AA 06 A6 |  if_e	mov	local03, #5
2eca4                 | ' 					}
2eca4                 | ' 				}
2eca4                 | ' 				break;
2eca4     54 00 90 FD | 	jmp	#LR__5007
2eca8                 | LR__5006
2eca8     56 AD E2 F8 | 	getbyte	local04, local04, #0
2ecac     04 AC CE F7 | 	test	local04, #4 wz
2ecb0     48 00 90 5D |  if_ne	jmp	#LR__5007
2ecb4     06 A6 06 F1 | 	add	local01, #6
2ecb8     53 AD C2 FA | 	rdbyte	local04, local01
2ecbc     06 A6 86 F1 | 	sub	local01, #6
2ecc0     10 AC CE F7 | 	test	local04, #16 wz
2ecc4     05 AA 06 A6 |  if_e	mov	local03, #5
2ecc8                 | ' 				res = FR_NO_PATH; break;
2ecc8     30 00 90 AD |  if_e	jmp	#LR__5007
2eccc     54 93 02 F6 | 	mov	arg01, local02
2ecd0     54 95 02 F6 | 	mov	arg02, local02
2ecd4     34 94 06 F1 | 	add	arg02, #52
2ecd8     10 A6 06 F1 | 	add	local01, #16
2ecdc     53 AD 02 FB | 	rdlong	local04, local01
2ece0     FF AD 06 F5 | 	and	local04, #511
2ece4     56 95 02 F1 | 	add	arg02, local04
2ece8     D8 E9 BF FD | 	call	#_fatfs_cc_ld_clust
2ecec     08 A6 86 F1 | 	sub	local01, #8
2ecf0     53 7B 62 FC | 	wrlong	result1, local01
2ecf4     08 A6 86 F1 | 	sub	local01, #8
2ecf8     60 FF 9F FD | 	jmp	#LR__5005
2ecfc                 | LR__5007
2ecfc                 | LR__5008
2ecfc                 | ' 			}
2ecfc                 | ' #line 3090 "ff.c"
2ecfc                 | ' 			{
2ecfc                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2ecfc                 | ' 			}
2ecfc                 | ' 		}
2ecfc                 | ' 	}
2ecfc                 | ' 
2ecfc                 | ' 	return res;
2ecfc     55 7B 02 F6 | 	mov	result1, local03
2ed00     E7 F0 03 F6 | 	mov	ptra, fp
2ed04     F2 00 A0 FD | 	call	#popregs_
2ed08                 | _fatfs_cc_follow_path_ret
2ed08     2D 00 64 FD | 	ret
2ed0c                 | 
2ed0c                 | _fatfs_cc_get_ldnumber
2ed0c     01 80 66 F6 | 	neg	_var01, #1
2ed10     49 83 0A FB | 	rdlong	_var02, arg01 wz
2ed14     41 85 02 F6 | 	mov	_var03, _var02
2ed18     01 7A 66 A6 |  if_e	neg	result1, #1
2ed1c     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2ed20     D7 10 48 FB | 	callpa	#(@LR__5011-@LR__5010)>>2,fcache_load_ptr_
2ed24                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2ed24                 | LR__5010
2ed24     42 87 C2 FA | 	rdbyte	_var04, _var03
2ed28     43 7B E2 F8 | 	getbyte	result1, _var04, #0
2ed2c     20 7A 16 F2 | 	cmp	result1, #32 wc
2ed30     01 84 06 F1 | 	add	_var03, #1
2ed34     43 89 02 36 |  if_ae	mov	_var05, _var04
2ed38     44 89 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2ed3c     3A 88 0E 32 |  if_ae	cmp	_var05, #58 wz
2ed40     E0 FF 9F 1D |  if_a	jmp	#LR__5010
2ed44                 | LR__5011
2ed44     43 87 E2 F8 | 	getbyte	_var04, _var04, #0
2ed48     3A 86 0E F2 | 	cmp	_var04, #58 wz
2ed4c     40 00 90 5D |  if_ne	jmp	#LR__5013
2ed50     01 8A 06 F6 | 	mov	_var06, #1
2ed54     41 89 C2 FA | 	rdbyte	_var05, _var02
2ed58     30 88 16 F2 | 	cmp	_var05, #48 wc
2ed5c     1C 00 90 CD |  if_b	jmp	#LR__5012
2ed60     41 89 C2 FA | 	rdbyte	_var05, _var02
2ed64     3A 88 16 F2 | 	cmp	_var05, #58 wc
2ed68     41 8D 02 C6 |  if_b	mov	_var07, _var02
2ed6c     02 8C 06 C1 |  if_b	add	_var07, #2
2ed70     42 8D 0A C2 |  if_b	cmp	_var07, _var03 wz
2ed74     44 8B 02 86 |  if_c_and_z	mov	_var06, _var05
2ed78     30 8A 86 81 |  if_c_and_z	sub	_var06, #48
2ed7c                 | LR__5012
2ed7c     01 8A 56 F2 | 	cmps	_var06, #1 wc
2ed80     45 81 02 C6 |  if_b	mov	_var01, _var06
2ed84     49 85 62 CC |  if_b	wrlong	_var03, arg01
2ed88                 | ' 			vol = i;
2ed88                 | ' 			*path = tt;
2ed88                 | ' 		}
2ed88                 | ' 		return vol;
2ed88     40 7B 02 F6 | 	mov	result1, _var01
2ed8c     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2ed90                 | LR__5013
2ed90                 | ' 	}
2ed90                 | ' #line 3170 "ff.c"
2ed90                 | ' 	vol = 0;
2ed90                 | ' 
2ed90                 | ' 	return vol;
2ed90     00 7A 06 F6 | 	mov	result1, #0
2ed94                 | _fatfs_cc_get_ldnumber_ret
2ed94     2D 00 64 FD | 	ret
2ed98                 | 
2ed98                 | _fatfs_cc_check_fs
2ed98     04 CA 05 F6 | 	mov	COUNT_, #4
2ed9c     E8 00 A0 FD | 	call	#pushregs_
2eda0     49 A7 02 F6 | 	mov	local01, arg01
2eda4     03 A6 06 F1 | 	add	local01, #3
2eda8     53 01 48 FC | 	wrbyte	#0, local01
2edac     2D A6 06 F1 | 	add	local01, #45
2edb0     FF FF FF FF 
2edb4     53 FF 6B FC | 	wrlong	##-1, local01
2edb8     30 A6 86 F1 | 	sub	local01, #48
2edbc     53 93 02 F6 | 	mov	arg01, local01
2edc0     C8 DB BF FD | 	call	#_fatfs_cc_move_window
2edc4     00 7A 0E F2 | 	cmp	result1, #0 wz
2edc8     04 7A 06 56 |  if_ne	mov	result1, #4
2edcc     64 01 90 5D |  if_ne	jmp	#LR__5023
2edd0     34 A6 06 F1 | 	add	local01, #52
2edd4     53 93 02 F6 | 	mov	arg01, local01
2edd8     FE 93 06 F1 | 	add	arg01, #510
2eddc                 | ' {
2eddc                 | ' 
2eddc                 | ' 	return *((WORD*)ptr);
2eddc     49 A9 E2 FA | 	rdword	local02, arg01
2ede0     53 AB C2 FA | 	rdbyte	local03, local01
2ede4     34 A6 86 F1 | 	sub	local01, #52
2ede8     55 AD E2 F8 | 	getbyte	local04, local03, #0
2edec     EB AC 0E F2 | 	cmp	local04, #235 wz
2edf0     55 97 02 56 |  if_ne	mov	arg03, local03
2edf4     4B 97 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2edf8     E9 96 0E 52 |  if_ne	cmp	arg03, #233 wz
2edfc     55 AB E2 58 |  if_ne	getbyte	local03, local03, #0
2ee00     E8 AA 0E 52 |  if_ne	cmp	local03, #232 wz
2ee04     14 01 90 5D |  if_ne	jmp	#LR__5022
2ee08     54 AD 32 F9 | 	getword	local04, local02, #0
2ee0c     55 00 00 FF 
2ee10     55 AC 0E F2 | 	cmp	local04, ##43605 wz
2ee14     24 00 90 5D |  if_ne	jmp	#LR__5020
2ee18     53 93 02 F6 | 	mov	arg01, local01
2ee1c     86 92 06 F1 | 	add	arg01, #134
2ee20     92 01 00 FF 
2ee24     3B 95 06 F6 | 	mov	arg02, ##@LR__5485
2ee28     08 96 06 F6 | 	mov	arg03, #8
2ee2c     10 D0 BF FD | 	call	#_fatfs_cc_memcmp
2ee30     00 7A 0E F2 | 	cmp	result1, #0 wz
2ee34                 | ' 			return 0;
2ee34     00 7A 06 A6 |  if_e	mov	result1, #0
2ee38     F8 00 90 AD |  if_e	jmp	#LR__5023
2ee3c                 | LR__5020
2ee3c     34 A6 06 F1 | 	add	local01, #52
2ee40     53 93 02 F6 | 	mov	arg01, local01
2ee44     0B 92 06 F1 | 	add	arg01, #11
2ee48                 | ' {
2ee48                 | ' 
2ee48                 | ' 	return *((WORD*)ptr);
2ee48     49 7B E2 FA | 	rdword	result1, arg01
2ee4c     0D A6 06 F1 | 	add	local01, #13
2ee50     53 AB C2 FA | 	rdbyte	local03, local01
2ee54     41 A6 86 F1 | 	sub	local01, #65
2ee58     3D AD 32 F9 | 	getword	local04, result1, #0
2ee5c     3D 95 32 F9 | 	getword	arg02, result1, #0
2ee60     01 94 86 F1 | 	sub	arg02, #1
2ee64     4A AD CA F7 | 	test	local04, arg02 wz
2ee68     B0 00 90 5D |  if_ne	jmp	#LR__5021
2ee6c     3D 95 32 F9 | 	getword	arg02, result1, #0
2ee70     01 00 00 FF 
2ee74     00 94 16 F2 | 	cmp	arg02, ##512 wc
2ee78     A0 00 90 CD |  if_b	jmp	#LR__5021
2ee7c     3D 95 32 F9 | 	getword	arg02, result1, #0
2ee80     01 00 00 FF 
2ee84     01 94 16 F2 | 	cmp	arg02, ##513 wc
2ee88     90 00 90 3D |  if_ae	jmp	#LR__5021
2ee8c     55 93 02 F6 | 	mov	arg01, local03
2ee90     07 92 4E F7 | 	zerox	arg01, #7 wz
2ee94     84 00 90 AD |  if_e	jmp	#LR__5021
2ee98     55 93 E2 F8 | 	getbyte	arg01, local03, #0
2ee9c     55 AB E2 F8 | 	getbyte	local03, local03, #0
2eea0     01 AA 86 F1 | 	sub	local03, #1
2eea4     55 93 CA F7 | 	test	arg01, local03 wz
2eea8     70 00 90 5D |  if_ne	jmp	#LR__5021
2eeac     53 93 02 F6 | 	mov	arg01, local01
2eeb0     42 92 06 F1 | 	add	arg01, #66
2eeb4                 | ' {
2eeb4                 | ' 
2eeb4                 | ' 	return *((WORD*)ptr);
2eeb4     49 7B EA FA | 	rdword	result1, arg01 wz
2eeb8     60 00 90 AD |  if_e	jmp	#LR__5021
2eebc     44 A6 06 F1 | 	add	local01, #68
2eec0     53 93 C2 FA | 	rdbyte	arg01, local01
2eec4     44 A6 86 F1 | 	sub	local01, #68
2eec8     01 92 86 F1 | 	sub	arg01, #1
2eecc     02 92 16 F2 | 	cmp	arg01, #2 wc
2eed0     48 00 90 3D |  if_ae	jmp	#LR__5021
2eed4     53 93 02 F6 | 	mov	arg01, local01
2eed8     45 92 06 F1 | 	add	arg01, #69
2eedc                 | ' {
2eedc                 | ' 
2eedc                 | ' 	return *((WORD*)ptr);
2eedc     49 7B EA FA | 	rdword	result1, arg01 wz
2eee0     38 00 90 AD |  if_e	jmp	#LR__5021
2eee4     53 93 02 F6 | 	mov	arg01, local01
2eee8     47 92 06 F1 | 	add	arg01, #71
2eeec                 | ' {
2eeec                 | ' 
2eeec                 | ' 	return *((WORD*)ptr);
2eeec     49 7B E2 FA | 	rdword	result1, arg01
2eef0     3D AB 32 F9 | 	getword	local03, result1, #0
2eef4     80 AA 16 F2 | 	cmp	local03, #128 wc
2eef8     53 93 02 C6 |  if_b	mov	arg01, local01
2eefc     54 92 06 C1 |  if_b	add	arg01, #84
2ef00                 | ' {
2ef00                 | ' 
2ef00                 | ' 	return *((DWORD*)ptr);
2ef00     49 7B 02 CB |  if_b	rdlong	result1, arg01
2ef04     80 00 00 CF 
2ef08     00 7A 16 C2 |  if_b	cmp	result1, ##65536 wc
2ef0c     4A A6 06 31 |  if_ae	add	local01, #74
2ef10                 | ' {
2ef10                 | ' 
2ef10                 | ' 	return *((WORD*)ptr);
2ef10     53 7B EA 3A |  if_ae	rdword	result1, local01 wz
2ef14                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2ef14                 | ' 			&& ld_word(fs->win +  14 ) != 0
2ef14                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2ef14                 | ' 			&& ld_word(fs->win +  17 ) != 0
2ef14                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2ef14                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2ef14                 | ' 				return 0;
2ef14     00 7A 06 16 |  if_a	mov	result1, #0
2ef18     18 00 90 1D |  if_a	jmp	#LR__5023
2ef1c                 | LR__5021
2ef1c                 | LR__5022
2ef1c                 | ' 		}
2ef1c                 | ' 	}
2ef1c                 | ' 	return sign == 0xAA55 ? 2 : 3;
2ef1c     54 AB 32 F9 | 	getword	local03, local02, #0
2ef20     55 00 00 FF 
2ef24     55 AA 0E F2 | 	cmp	local03, ##43605 wz
2ef28     02 AC 06 A6 |  if_e	mov	local04, #2
2ef2c     03 AC 06 56 |  if_ne	mov	local04, #3
2ef30     56 7B 02 F6 | 	mov	result1, local04
2ef34                 | LR__5023
2ef34     E7 F0 03 F6 | 	mov	ptra, fp
2ef38     F2 00 A0 FD | 	call	#popregs_
2ef3c                 | _fatfs_cc_check_fs_ret
2ef3c     2D 00 64 FD | 	ret
2ef40                 | 
2ef40                 | _fatfs_cc_find_volume
2ef40     05 CA 05 F6 | 	mov	COUNT_, #5
2ef44     E8 00 A0 FD | 	call	#pushregs_
2ef48     24 F0 07 F1 | 	add	ptra, #36
2ef4c     49 A7 02 F6 | 	mov	local01, arg01
2ef50     4A A9 02 F6 | 	mov	local02, arg02
2ef54     53 93 02 F6 | 	mov	arg01, local01
2ef58     00 94 06 F6 | 	mov	arg02, #0
2ef5c     38 FE BF FD | 	call	#_fatfs_cc_check_fs
2ef60     02 7A 0E F2 | 	cmp	result1, #2 wz
2ef64     0C 00 90 AD |  if_e	jmp	#LR__5030
2ef68     03 7A 16 F2 | 	cmp	result1, #3 wc
2ef6c     00 A8 0E C2 |  if_b	cmp	local02, #0 wz
2ef70     C8 00 90 BD |  if_nc_or_z	jmp	#LR__5038
2ef74                 | LR__5030
2ef74                 | ' 	for (i = 0; i < 4; i++) {
2ef74     00 AA 06 F6 | 	mov	local03, #0
2ef78     D7 22 48 FB | 	callpa	#(@LR__5032-@LR__5031)>>2,fcache_load_ptr_
2ef7c                 | LR__5031
2ef7c     04 AA 16 F2 | 	cmp	local03, #4 wc
2ef80     3C 00 90 3D |  if_ae	jmp	#LR__5033
2ef84     55 AD 02 F6 | 	mov	local04, local03
2ef88     02 AC 66 F0 | 	shl	local04, #2
2ef8c     E7 94 02 F6 | 	mov	arg02, fp
2ef90     14 94 06 F1 | 	add	arg02, #20
2ef94     4A AD 02 F1 | 	add	local04, arg02
2ef98     53 93 02 F6 | 	mov	arg01, local01
2ef9c     F2 93 06 F1 | 	add	arg01, #498
2efa0     55 95 02 F6 | 	mov	arg02, local03
2efa4     04 94 66 F0 | 	shl	arg02, #4
2efa8     4A 93 02 F1 | 	add	arg01, arg02
2efac     08 92 06 F1 | 	add	arg01, #8
2efb0                 | ' {
2efb0                 | ' 
2efb0                 | ' 	return *((DWORD*)ptr);
2efb0     49 7B 02 FB | 	rdlong	result1, arg01
2efb4     56 7B 62 FC | 	wrlong	result1, local04
2efb8     01 AA 06 F1 | 	add	local03, #1
2efbc     BC FF 9F FD | 	jmp	#LR__5031
2efc0                 | LR__5032
2efc0                 | LR__5033
2efc0     00 A8 0E F2 | 	cmp	local02, #0 wz
2efc4     54 AD 02 56 |  if_ne	mov	local04, local02
2efc8     01 AC 86 51 |  if_ne	sub	local04, #1
2efcc     00 AC 06 A6 |  if_e	mov	local04, #0
2efd0     56 AB 02 F6 | 	mov	local03, local04
2efd4                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2efd4                 | ' 	}
2efd4                 | ' 	i = part ? part - 1 : 0;
2efd4                 | ' 	do {
2efd4                 | LR__5034
2efd4     55 AD 02 F6 | 	mov	local04, local03
2efd8     02 AC 66 F0 | 	shl	local04, #2
2efdc     E7 94 02 F6 | 	mov	arg02, fp
2efe0     14 94 06 F1 | 	add	arg02, #20
2efe4     4A AD 02 F1 | 	add	local04, arg02
2efe8     56 AD 0A FB | 	rdlong	local04, local04 wz
2efec     28 00 90 AD |  if_e	jmp	#LR__5035
2eff0     55 AD 02 F6 | 	mov	local04, local03
2eff4     02 AC 66 F0 | 	shl	local04, #2
2eff8     E7 94 02 F6 | 	mov	arg02, fp
2effc     14 94 06 F1 | 	add	arg02, #20
2f000     4A AD 02 F1 | 	add	local04, arg02
2f004     56 95 02 FB | 	rdlong	arg02, local04
2f008     53 93 02 F6 | 	mov	arg01, local01
2f00c     88 FD BF FD | 	call	#_fatfs_cc_check_fs
2f010     3D AD 02 F6 | 	mov	local04, result1
2f014     04 00 90 FD | 	jmp	#LR__5036
2f018                 | LR__5035
2f018     03 AC 06 F6 | 	mov	local04, #3
2f01c                 | LR__5036
2f01c     56 AF 02 F6 | 	mov	local05, local04
2f020     00 A8 0E F2 | 	cmp	local02, #0 wz
2f024     02 AE 16 A2 |  if_e	cmp	local05, #2 wc
2f028     0C 00 90 8D |  if_c_and_z	jmp	#LR__5037
2f02c     01 AA 06 A1 |  if_e	add	local03, #1
2f030     04 AA 16 A2 |  if_e	cmp	local03, #4 wc
2f034     9C FF 9F 8D |  if_c_and_z	jmp	#LR__5034
2f038                 | LR__5037
2f038                 | ' 	return fmt;
2f038     57 7B 02 F6 | 	mov	result1, local05
2f03c                 | LR__5038
2f03c     E7 F0 03 F6 | 	mov	ptra, fp
2f040     F2 00 A0 FD | 	call	#popregs_
2f044                 | _fatfs_cc_find_volume_ret
2f044     2D 00 64 FD | 	ret
2f048                 | 
2f048                 | _fatfs_cc_mount_volume
2f048     0A CA 05 F6 | 	mov	COUNT_, #10
2f04c     E8 00 A0 FD | 	call	#pushregs_
2f050     4B A7 02 F6 | 	mov	local01, arg03
2f054     4A 01 68 FC | 	wrlong	#0, arg02
2f058     B0 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2f05c     3D A9 02 F6 | 	mov	local02, result1
2f060     00 A8 56 F2 | 	cmps	local02, #0 wc
2f064     0B 7A 06 C6 |  if_b	mov	result1, #11
2f068     00 05 90 CD |  if_b	jmp	#LR__5049
2f06c     54 97 02 F6 | 	mov	arg03, local02
2f070     02 96 66 F0 | 	shl	arg03, #2
2f074     32 97 02 F1 | 	add	arg03, objptr
2f078     4B AB 0A FB | 	rdlong	local03, arg03 wz
2f07c     0C 7A 06 A6 |  if_e	mov	result1, #12
2f080     E8 04 90 AD |  if_e	jmp	#LR__5049
2f084     4A AB 62 FC | 	wrlong	local03, arg02
2f088     53 A7 E2 F8 | 	getbyte	local01, local01, #0
2f08c     FE A6 06 F5 | 	and	local01, #254
2f090     55 97 CA FA | 	rdbyte	arg03, local03 wz
2f094     44 00 90 AD |  if_e	jmp	#LR__5041
2f098     01 00 00 FF 
2f09c     10 64 06 F1 | 	add	objptr, ##528
2f0a0     32 93 0A FB | 	rdlong	arg01, objptr wz
2f0a4     01 00 00 FF 
2f0a8     10 64 86 F1 | 	sub	objptr, ##528
2f0ac                 | '         return RES_NOTRDY;
2f0ac     03 7A 06 A6 |  if_e	mov	result1, #3
2f0b0                 | '     }
2f0b0                 | '     return RES_OK;
2f0b0     00 7A 06 56 |  if_ne	mov	result1, #0
2f0b4     3D 97 E2 F8 | 	getbyte	arg03, result1, #0
2f0b8     01 96 CE F7 | 	test	arg03, #1 wz
2f0bc     1C 00 90 5D |  if_ne	jmp	#LR__5040
2f0c0     00 A6 0E F2 | 	cmp	local01, #0 wz
2f0c4     3D 7B E2 58 |  if_ne	getbyte	result1, result1, #0
2f0c8     04 7A CE 57 |  if_ne	test	result1, #4 wz
2f0cc                 | ' 				return FR_WRITE_PROTECTED;
2f0cc     0A 7A 06 56 |  if_ne	mov	result1, #10
2f0d0     98 04 90 5D |  if_ne	jmp	#LR__5049
2f0d4                 | ' 			}
2f0d4                 | ' 			return FR_OK;
2f0d4     00 7A 06 F6 | 	mov	result1, #0
2f0d8     90 04 90 FD | 	jmp	#LR__5049
2f0dc                 | LR__5040
2f0dc                 | LR__5041
2f0dc     55 01 48 FC | 	wrbyte	#0, local03
2f0e0     01 AA 06 F1 | 	add	local03, #1
2f0e4     55 A9 42 FC | 	wrbyte	local02, local03
2f0e8     01 AA 86 F1 | 	sub	local03, #1
2f0ec     01 00 00 FF 
2f0f0     10 64 06 F1 | 	add	objptr, ##528
2f0f4     32 A9 0A FB | 	rdlong	local02, objptr wz
2f0f8     01 00 00 FF 
2f0fc     10 64 86 F1 | 	sub	objptr, ##528
2f100                 | ' 
2f100                 | '         return RES_NOTRDY;
2f100     03 7A 06 A6 |  if_e	mov	result1, #3
2f104                 | '     }
2f104                 | '     return RES_OK;
2f104     00 7A 06 56 |  if_ne	mov	result1, #0
2f108     3D 97 02 F6 | 	mov	arg03, result1
2f10c     4B AD E2 F8 | 	getbyte	local04, arg03, #0
2f110     01 AC CE F7 | 	test	local04, #1 wz
2f114                 | ' 		return FR_NOT_READY;
2f114     03 7A 06 56 |  if_ne	mov	result1, #3
2f118     50 04 90 5D |  if_ne	jmp	#LR__5049
2f11c     00 A6 0E F2 | 	cmp	local01, #0 wz
2f120     4B AD 02 56 |  if_ne	mov	local04, arg03
2f124     56 AD E2 58 |  if_ne	getbyte	local04, local04, #0
2f128     04 AC CE 57 |  if_ne	test	local04, #4 wz
2f12c                 | ' 		return FR_WRITE_PROTECTED;
2f12c     0A 7A 06 56 |  if_ne	mov	result1, #10
2f130     38 04 90 5D |  if_ne	jmp	#LR__5049
2f134     55 93 02 F6 | 	mov	arg01, local03
2f138     00 94 06 F6 | 	mov	arg02, #0
2f13c     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2f140     3D 93 02 F6 | 	mov	arg01, result1
2f144     04 92 0E F2 | 	cmp	arg01, #4 wz
2f148     01 7A 06 A6 |  if_e	mov	result1, #1
2f14c     1C 04 90 AD |  if_e	jmp	#LR__5049
2f150     02 92 16 F2 | 	cmp	arg01, #2 wc
2f154     0D 7A 06 36 |  if_ae	mov	result1, #13
2f158     10 04 90 3D |  if_ae	jmp	#LR__5049
2f15c     30 AA 06 F1 | 	add	local03, #48
2f160     55 AF 02 FB | 	rdlong	local05, local03
2f164     04 AA 06 F1 | 	add	local03, #4
2f168     55 93 02 F6 | 	mov	arg01, local03
2f16c     34 AA 86 F1 | 	sub	local03, #52
2f170     0B 92 06 F1 | 	add	arg01, #11
2f174                 | ' {
2f174                 | ' 
2f174                 | ' 	return *((WORD*)ptr);
2f174     49 7B E2 FA | 	rdword	result1, arg01
2f178     01 00 00 FF 
2f17c     00 7A 0E F2 | 	cmp	result1, ##512 wz
2f180     0D 7A 06 56 |  if_ne	mov	result1, #13
2f184     E4 03 90 5D |  if_ne	jmp	#LR__5049
2f188     55 93 02 F6 | 	mov	arg01, local03
2f18c     4A 92 06 F1 | 	add	arg01, #74
2f190                 | ' {
2f190                 | ' 
2f190                 | ' 	return *((WORD*)ptr);
2f190     49 7B E2 FA | 	rdword	result1, arg01
2f194     3D B1 0A F6 | 	mov	local06, result1 wz
2f198     55 93 02 A6 |  if_e	mov	arg01, local03
2f19c     58 92 06 A1 |  if_e	add	arg01, #88
2f1a0                 | ' {
2f1a0                 | ' 
2f1a0                 | ' 	return *((DWORD*)ptr);
2f1a0     49 7B 02 AB |  if_e	rdlong	result1, arg01
2f1a4     3D B1 02 A6 |  if_e	mov	local06, result1
2f1a8     1C AA 06 F1 | 	add	local03, #28
2f1ac     55 B1 62 FC | 	wrlong	local06, local03
2f1b0     28 AA 06 F1 | 	add	local03, #40
2f1b4     55 AD C2 FA | 	rdbyte	local04, local03
2f1b8     42 AA 86 F1 | 	sub	local03, #66
2f1bc     55 AD 42 FC | 	wrbyte	local04, local03
2f1c0     56 AD E2 F8 | 	getbyte	local04, local04, #0
2f1c4     02 AA 86 F1 | 	sub	local03, #2
2f1c8     01 AC 0E F2 | 	cmp	local04, #1 wz
2f1cc     02 AA 06 51 |  if_ne	add	local03, #2
2f1d0     55 AD C2 5A |  if_ne	rdbyte	local04, local03
2f1d4     02 AA 86 51 |  if_ne	sub	local03, #2
2f1d8     02 AC 0E 52 |  if_ne	cmp	local04, #2 wz
2f1dc     0D 7A 06 56 |  if_ne	mov	result1, #13
2f1e0     88 03 90 5D |  if_ne	jmp	#LR__5049
2f1e4     02 AA 06 F1 | 	add	local03, #2
2f1e8     55 AD C2 FA | 	rdbyte	local04, local03
2f1ec     56 B1 02 FD | 	qmul	local06, local04
2f1f0     3F AA 06 F1 | 	add	local03, #63
2f1f4     55 AD C2 FA | 	rdbyte	local04, local03
2f1f8     37 AA 86 F1 | 	sub	local03, #55
2f1fc     55 AD 52 FC | 	wrword	local04, local03
2f200     56 AD 32 F9 | 	getword	local04, local04, #0
2f204     0A AA 86 F1 | 	sub	local03, #10
2f208     0F AC 4E F7 | 	zerox	local04, #15 wz
2f20c     18 B0 62 FD | 	getqx	local06
2f210     20 00 90 AD |  if_e	jmp	#LR__5042
2f214     0A AA 06 F1 | 	add	local03, #10
2f218     55 AD E2 FA | 	rdword	local04, local03
2f21c     56 A9 32 F9 | 	getword	local02, local04, #0
2f220     0A AA 86 F1 | 	sub	local03, #10
2f224     56 AD 32 F9 | 	getword	local04, local04, #0
2f228     01 AC 86 F1 | 	sub	local04, #1
2f22c     56 A9 CA F7 | 	test	local02, local04 wz
2f230     08 00 90 AD |  if_e	jmp	#LR__5043
2f234                 | LR__5042
2f234     0D 7A 06 F6 | 	mov	result1, #13
2f238     30 03 90 FD | 	jmp	#LR__5049
2f23c                 | LR__5043
2f23c     34 AA 06 F1 | 	add	local03, #52
2f240     55 93 02 F6 | 	mov	arg01, local03
2f244     11 92 06 F1 | 	add	arg01, #17
2f248                 | ' {
2f248                 | ' 
2f248                 | ' 	return *((WORD*)ptr);
2f248     49 7B E2 FA | 	rdword	result1, arg01
2f24c     2C AA 86 F1 | 	sub	local03, #44
2f250     55 7B 52 FC | 	wrword	result1, local03
2f254     3D AD 32 F9 | 	getword	local04, result1, #0
2f258     08 AA 86 F1 | 	sub	local03, #8
2f25c     56 93 52 F6 | 	abs	arg01, local04 wc
2f260     49 93 42 F8 | 	getnib	arg01, arg01, #0
2f264     49 93 8A F6 | 	negc	arg01, arg01 wz
2f268     0D 7A 06 56 |  if_ne	mov	result1, #13
2f26c     FC 02 90 5D |  if_ne	jmp	#LR__5049
2f270     55 93 02 F6 | 	mov	arg01, local03
2f274     47 92 06 F1 | 	add	arg01, #71
2f278                 | ' {
2f278                 | ' 
2f278                 | ' 	return *((WORD*)ptr);
2f278     49 7B E2 FA | 	rdword	result1, arg01
2f27c     3D B3 0A F6 | 	mov	local07, result1 wz
2f280     55 93 02 A6 |  if_e	mov	arg01, local03
2f284     54 92 06 A1 |  if_e	add	arg01, #84
2f288                 | ' {
2f288                 | ' 
2f288                 | ' 	return *((DWORD*)ptr);
2f288     49 B3 02 AB |  if_e	rdlong	local07, arg01
2f28c     55 93 02 F6 | 	mov	arg01, local03
2f290     42 92 06 F1 | 	add	arg01, #66
2f294                 | ' {
2f294                 | ' 
2f294                 | ' 	return *((WORD*)ptr);
2f294     49 7B E2 FA | 	rdword	result1, arg01
2f298     3D 93 02 F6 | 	mov	arg01, result1
2f29c     49 AD 02 F6 | 	mov	local04, arg01
2f2a0     0F AC 4E F7 | 	zerox	local04, #15 wz
2f2a4     0D 7A 06 A6 |  if_e	mov	result1, #13
2f2a8     C0 02 90 AD |  if_e	jmp	#LR__5049
2f2ac     49 B5 32 F9 | 	getword	local08, arg01, #0
2f2b0     58 B5 02 F1 | 	add	local08, local06
2f2b4     08 AA 06 F1 | 	add	local03, #8
2f2b8     55 AD E2 FA | 	rdword	local04, local03
2f2bc     08 AA 86 F1 | 	sub	local03, #8
2f2c0     56 AD 52 F6 | 	abs	local04, local04 wc
2f2c4     04 AC 46 F0 | 	shr	local04, #4
2f2c8     56 B5 82 F3 | 	sumc	local08, local04
2f2cc     5A B3 12 F2 | 	cmp	local07, local08 wc
2f2d0     0D 7A 06 C6 |  if_b	mov	result1, #13
2f2d4     94 02 90 CD |  if_b	jmp	#LR__5049
2f2d8     5A B3 82 F1 | 	sub	local07, local08
2f2dc     0A AA 06 F1 | 	add	local03, #10
2f2e0     55 AD E2 FA | 	rdword	local04, local03
2f2e4     56 B3 12 FD | 	qdiv	local07, local04
2f2e8     0A AA 86 F1 | 	sub	local03, #10
2f2ec     18 AC 62 FD | 	getqx	local04
2f2f0     00 AC 0E F2 | 	cmp	local04, #0 wz
2f2f4     0D 7A 06 A6 |  if_e	mov	result1, #13
2f2f8     70 02 90 AD |  if_e	jmp	#LR__5049
2f2fc     00 B6 06 F6 | 	mov	local09, #0
2f300     FF FF 07 FF 
2f304     F6 AD 16 F2 | 	cmp	local04, ##268435446 wc
2f308     03 B6 06 C6 |  if_b	mov	local09, #3
2f30c     7F 00 00 FF 
2f310     F6 AD 16 F2 | 	cmp	local04, ##65526 wc
2f314     02 B6 06 C6 |  if_b	mov	local09, #2
2f318     07 00 00 FF 
2f31c     F6 AD 16 F2 | 	cmp	local04, ##4086 wc
2f320     01 B6 06 C6 |  if_b	mov	local09, #1
2f324     00 B6 0E F2 | 	cmp	local09, #0 wz
2f328     0D 7A 06 A6 |  if_e	mov	result1, #13
2f32c     3C 02 90 AD |  if_e	jmp	#LR__5049
2f330     02 AC 06 F1 | 	add	local04, #2
2f334     18 AA 06 F1 | 	add	local03, #24
2f338     55 AD 62 FC | 	wrlong	local04, local03
2f33c     08 AA 06 F1 | 	add	local03, #8
2f340     55 AF 62 FC | 	wrlong	local05, local03
2f344     57 AD 02 F6 | 	mov	local04, local05
2f348     49 93 32 F9 | 	getword	arg01, arg01, #0
2f34c     49 AD 02 F1 | 	add	local04, arg01
2f350     04 AA 06 F1 | 	add	local03, #4
2f354     55 AD 62 FC | 	wrlong	local04, local03
2f358     57 AD 02 F6 | 	mov	local04, local05
2f35c     5A AD 02 F1 | 	add	local04, local08
2f360     08 AA 06 F1 | 	add	local03, #8
2f364     55 AD 62 FC | 	wrlong	local04, local03
2f368     2C AA 86 F1 | 	sub	local03, #44
2f36c     03 B6 0E F2 | 	cmp	local09, #3 wz
2f370     54 00 90 5D |  if_ne	jmp	#LR__5044
2f374     55 93 02 F6 | 	mov	arg01, local03
2f378     5E 92 06 F1 | 	add	arg01, #94
2f37c                 | ' {
2f37c                 | ' 
2f37c                 | ' 	return *((WORD*)ptr);
2f37c     49 7B EA FA | 	rdword	result1, arg01 wz
2f380     0D 7A 06 56 |  if_ne	mov	result1, #13
2f384     E4 01 90 5D |  if_ne	jmp	#LR__5049
2f388     08 AA 06 F1 | 	add	local03, #8
2f38c     55 AD EA FA | 	rdword	local04, local03 wz
2f390     08 AA 86 F1 | 	sub	local03, #8
2f394     0D 7A 06 56 |  if_ne	mov	result1, #13
2f398     D0 01 90 5D |  if_ne	jmp	#LR__5049
2f39c     34 AA 06 F1 | 	add	local03, #52
2f3a0     55 93 02 F6 | 	mov	arg01, local03
2f3a4     2C 92 06 F1 | 	add	arg01, #44
2f3a8                 | ' {
2f3a8                 | ' 
2f3a8                 | ' 	return *((DWORD*)ptr);
2f3a8     49 7B 02 FB | 	rdlong	result1, arg01
2f3ac     0C AA 86 F1 | 	sub	local03, #12
2f3b0     55 7B 62 FC | 	wrlong	result1, local03
2f3b4     10 AA 86 F1 | 	sub	local03, #16
2f3b8     55 B9 02 FB | 	rdlong	local10, local03
2f3bc     18 AA 86 F1 | 	sub	local03, #24
2f3c0     02 B8 66 F0 | 	shl	local10, #2
2f3c4     6C 00 90 FD | 	jmp	#LR__5046
2f3c8                 | LR__5044
2f3c8     08 AA 06 F1 | 	add	local03, #8
2f3cc     55 AD EA FA | 	rdword	local04, local03 wz
2f3d0     08 AA 86 F1 | 	sub	local03, #8
2f3d4     0D 7A 06 A6 |  if_e	mov	result1, #13
2f3d8     90 01 90 AD |  if_e	jmp	#LR__5049
2f3dc     24 AA 06 F1 | 	add	local03, #36
2f3e0     55 AD 02 FB | 	rdlong	local04, local03
2f3e4     58 AD 02 F1 | 	add	local04, local06
2f3e8     04 AA 06 F1 | 	add	local03, #4
2f3ec     55 AD 62 FC | 	wrlong	local04, local03
2f3f0     28 AA 86 F1 | 	sub	local03, #40
2f3f4     02 B6 0E F2 | 	cmp	local09, #2 wz
2f3f8     18 AA 06 A1 |  if_e	add	local03, #24
2f3fc     55 AD 02 AB |  if_e	rdlong	local04, local03
2f400     18 AA 86 A1 |  if_e	sub	local03, #24
2f404     01 AC 66 A0 |  if_e	shl	local04, #1
2f408     24 00 90 AD |  if_e	jmp	#LR__5045
2f40c     18 AA 06 F1 | 	add	local03, #24
2f410     55 B9 02 FB | 	rdlong	local10, local03
2f414     5C AD 02 F6 | 	mov	local04, local10
2f418     01 AC 66 F0 | 	shl	local04, #1
2f41c     5C AD 02 F1 | 	add	local04, local10
2f420     01 AC 46 F0 | 	shr	local04, #1
2f424     18 AA 86 F1 | 	sub	local03, #24
2f428     01 B8 06 F5 | 	and	local10, #1
2f42c     5C AD 02 F1 | 	add	local04, local10
2f430                 | LR__5045
2f430     56 B9 02 F6 | 	mov	local10, local04
2f434                 | LR__5046
2f434     FF B9 06 F1 | 	add	local10, #511
2f438     09 B8 46 F0 | 	shr	local10, #9
2f43c     1C AA 06 F1 | 	add	local03, #28
2f440     55 97 02 FB | 	rdlong	arg03, local03
2f444     1C AA 86 F1 | 	sub	local03, #28
2f448     5C 97 12 F2 | 	cmp	arg03, local10 wc
2f44c     0D 7A 06 C6 |  if_b	mov	result1, #13
2f450     18 01 90 CD |  if_b	jmp	#LR__5049
2f454     14 AA 06 F1 | 	add	local03, #20
2f458     FF FF FF FF 
2f45c     55 FF 6B FC | 	wrlong	##-1, local03
2f460     04 AA 86 F1 | 	sub	local03, #4
2f464     FF FF FF FF 
2f468     55 FF 6B FC | 	wrlong	##-1, local03
2f46c     0C AA 86 F1 | 	sub	local03, #12
2f470     55 01 49 FC | 	wrbyte	#128, local03
2f474     04 AA 86 F1 | 	sub	local03, #4
2f478     03 B6 0E F2 | 	cmp	local09, #3 wz
2f47c     55 93 02 A6 |  if_e	mov	arg01, local03
2f480     64 92 06 A1 |  if_e	add	arg01, #100
2f484                 | ' {
2f484                 | ' 
2f484                 | ' 	return *((WORD*)ptr);
2f484     49 7B E2 AA |  if_e	rdword	result1, arg01
2f488     3D AD 32 A9 |  if_e	getword	local04, result1, #0
2f48c     01 AC 0E A2 |  if_e	cmp	local04, #1 wz
2f490     A4 00 90 5D |  if_ne	jmp	#LR__5048
2f494     01 AE 06 F1 | 	add	local05, #1
2f498     55 93 02 F6 | 	mov	arg01, local03
2f49c     57 95 02 F6 | 	mov	arg02, local05
2f4a0     E8 D4 BF FD | 	call	#_fatfs_cc_move_window
2f4a4     00 7A 0E F2 | 	cmp	result1, #0 wz
2f4a8     8C 00 90 5D |  if_ne	jmp	#LR__5048
2f4ac     04 AA 06 F1 | 	add	local03, #4
2f4b0     55 01 48 FC | 	wrbyte	#0, local03
2f4b4     30 AA 06 F1 | 	add	local03, #48
2f4b8     55 93 02 F6 | 	mov	arg01, local03
2f4bc     34 AA 86 F1 | 	sub	local03, #52
2f4c0     FE 93 06 F1 | 	add	arg01, #510
2f4c4                 | ' {
2f4c4                 | ' 
2f4c4                 | ' 	return *((WORD*)ptr);
2f4c4     49 7B E2 FA | 	rdword	result1, arg01
2f4c8     3D AD 32 F9 | 	getword	local04, result1, #0
2f4cc     55 00 00 FF 
2f4d0     55 AC 0E F2 | 	cmp	local04, ##43605 wz
2f4d4     55 93 02 A6 |  if_e	mov	arg01, local03
2f4d8     34 92 06 A1 |  if_e	add	arg01, #52
2f4dc                 | ' {
2f4dc                 | ' 
2f4dc                 | ' 	return *((DWORD*)ptr);
2f4dc     49 7B 02 AB |  if_e	rdlong	result1, arg01
2f4e0     A9 B0 20 AF 
2f4e4     52 7A 0E A2 |  if_e	cmp	result1, ##1096897106 wz
2f4e8     55 93 02 A6 |  if_e	mov	arg01, local03
2f4ec     01 00 00 AF 
2f4f0     18 92 06 A1 |  if_e	add	arg01, ##536
2f4f4                 | ' {
2f4f4                 | ' 
2f4f4                 | ' 	return *((DWORD*)ptr);
2f4f4     49 7B 02 AB |  if_e	rdlong	result1, arg01
2f4f8     B9 A0 30 AF 
2f4fc     72 7A 0E A2 |  if_e	cmp	result1, ##1631679090 wz
2f500     34 00 90 5D |  if_ne	jmp	#LR__5047
2f504     34 AA 06 F1 | 	add	local03, #52
2f508     55 93 02 F6 | 	mov	arg01, local03
2f50c     E8 93 06 F1 | 	add	arg01, #488
2f510                 | ' {
2f510                 | ' 
2f510                 | ' 	return *((DWORD*)ptr);
2f510     49 7B 02 FB | 	rdlong	result1, arg01
2f514     20 AA 86 F1 | 	sub	local03, #32
2f518     55 7B 62 FC | 	wrlong	result1, local03
2f51c     20 AA 06 F1 | 	add	local03, #32
2f520     55 93 02 F6 | 	mov	arg01, local03
2f524     EC 93 06 F1 | 	add	arg01, #492
2f528                 | ' {
2f528                 | ' 
2f528                 | ' 	return *((DWORD*)ptr);
2f528     49 7B 02 FB | 	rdlong	result1, arg01
2f52c     24 AA 86 F1 | 	sub	local03, #36
2f530     55 7B 62 FC | 	wrlong	result1, local03
2f534     10 AA 86 F1 | 	sub	local03, #16
2f538                 | LR__5047
2f538                 | LR__5048
2f538     55 B7 42 FC | 	wrbyte	local09, local03
2f53c     04 64 06 F1 | 	add	objptr, #4
2f540     32 AD E2 FA | 	rdword	local04, objptr
2f544     01 AC 06 F1 | 	add	local04, #1
2f548     32 AD 52 FC | 	wrword	local04, objptr
2f54c     56 B9 32 F9 | 	getword	local10, local04, #0
2f550     06 AA 06 F1 | 	add	local03, #6
2f554     55 B9 52 FC | 	wrword	local10, local03
2f558     04 64 06 F1 | 	add	objptr, #4
2f55c     06 AA 06 F1 | 	add	local03, #6
2f560     55 65 62 FC | 	wrlong	objptr, local03
2f564                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2f564                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2f564                 | ' 			{
2f564                 | ' 
2f564                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2f564                 | ' 
2f564                 | ' 
2f564                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2f564                 | ' 
2f564                 | ' 			}
2f564                 | ' 		}
2f564                 | ' 
2f564                 | ' 
2f564                 | ' 	}
2f564                 | ' 
2f564                 | ' 	fs->fs_type = (BYTE)fmt;
2f564                 | ' 	fs->id = ++Fsid;
2f564                 | ' 
2f564                 | ' 	fs->lfnbuf = LfnBuf;
2f564                 | ' #line 3567 "ff.c"
2f564                 | ' 	return FR_OK;
2f564     00 7A 06 F6 | 	mov	result1, #0
2f568     08 64 86 F1 | 	sub	objptr, #8
2f56c                 | LR__5049
2f56c     E7 F0 03 F6 | 	mov	ptra, fp
2f570     F2 00 A0 FD | 	call	#popregs_
2f574                 | _fatfs_cc_mount_volume_ret
2f574     2D 00 64 FD | 	ret
2f578                 | 
2f578                 | _fatfs_cc_validate
2f578     49 81 0A F6 | 	mov	_var01, arg01 wz
2f57c     09 82 06 F6 | 	mov	_var02, #9
2f580     40 85 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2f584     42 87 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2f588     48 00 90 AD |  if_e	jmp	#LR__5050
2f58c     04 80 06 F1 | 	add	_var01, #4
2f590     40 87 E2 FA | 	rdword	_var04, _var01
2f594     04 80 86 F1 | 	sub	_var01, #4
2f598     40 93 02 FB | 	rdlong	arg01, _var01
2f59c     06 92 06 F1 | 	add	arg01, #6
2f5a0     49 7B E2 FA | 	rdword	result1, arg01
2f5a4     3D 87 0A F2 | 	cmp	_var04, result1 wz
2f5a8     28 00 90 5D |  if_ne	jmp	#LR__5050
2f5ac     01 00 00 FF 
2f5b0     10 64 06 F1 | 	add	objptr, ##528
2f5b4     32 87 0A FB | 	rdlong	_var04, objptr wz
2f5b8     01 00 00 FF 
2f5bc     10 64 86 F1 | 	sub	objptr, ##528
2f5c0                 | '         return RES_NOTRDY;
2f5c0     03 7A 06 A6 |  if_e	mov	result1, #3
2f5c4                 | '     }
2f5c4                 | '     return RES_OK;
2f5c4     00 7A 06 56 |  if_ne	mov	result1, #0
2f5c8     3D 85 E2 F8 | 	getbyte	_var03, result1, #0
2f5cc     01 84 CE F7 | 	test	_var03, #1 wz
2f5d0     00 82 06 A6 |  if_e	mov	_var02, #0
2f5d4                 | LR__5050
2f5d4     00 82 0E F2 | 	cmp	_var02, #0 wz
2f5d8     40 85 02 AB |  if_e	rdlong	_var03, _var01
2f5dc     00 84 06 56 |  if_ne	mov	_var03, #0
2f5e0     4A 85 62 FC | 	wrlong	_var03, arg02
2f5e4                 | ' 			res = FR_OK;
2f5e4                 | ' 		}
2f5e4                 | ' 
2f5e4                 | ' 	}
2f5e4                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2f5e4                 | ' 	return res;
2f5e4     41 7B 02 F6 | 	mov	result1, _var02
2f5e8                 | _fatfs_cc_validate_ret
2f5e8     2D 00 64 FD | 	ret
2f5ec                 | 
2f5ec                 | _fatfs_cc_f_mount
2f5ec     04 CA 05 F6 | 	mov	COUNT_, #4
2f5f0     E8 00 A0 FD | 	call	#pushregs_
2f5f4     20 F0 07 F1 | 	add	ptra, #32
2f5f8     04 CE 05 F1 | 	add	fp, #4
2f5fc     E7 92 62 FC | 	wrlong	arg01, fp
2f600     04 CE 05 F1 | 	add	fp, #4
2f604     E7 94 62 FC | 	wrlong	arg02, fp
2f608     4B A7 02 F6 | 	mov	local01, arg03
2f60c     14 CE 05 F1 | 	add	fp, #20
2f610     E7 94 62 FC | 	wrlong	arg02, fp
2f614     E7 92 02 F6 | 	mov	arg01, fp
2f618     1C CE 85 F1 | 	sub	fp, #28
2f61c     EC F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2f620     3D A9 02 F6 | 	mov	local02, result1
2f624     00 A8 56 F2 | 	cmps	local02, #0 wc
2f628     0B 7A 06 C6 |  if_b	mov	result1, #11
2f62c     84 00 90 CD |  if_b	jmp	#LR__5061
2f630     54 97 02 F6 | 	mov	arg03, local02
2f634     02 96 66 F0 | 	shl	arg03, #2
2f638     32 97 02 F1 | 	add	arg03, objptr
2f63c     4B AB 0A FB | 	rdlong	local03, arg03 wz
2f640     14 00 90 AD |  if_e	jmp	#LR__5060
2f644     01 AA 06 F1 | 	add	local03, #1
2f648     55 93 C2 FA | 	rdbyte	arg01, local03
2f64c     01 AA 86 F1 | 	sub	local03, #1
2f650     F8 2B B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2f654     55 01 48 FC | 	wrbyte	#0, local03
2f658                 | LR__5060
2f658     04 CE 05 F1 | 	add	fp, #4
2f65c     E7 AC 0A FB | 	rdlong	local04, fp wz
2f660     04 CE 85 F1 | 	sub	fp, #4
2f664     04 CE 05 51 |  if_ne	add	fp, #4
2f668     E7 AC 02 5B |  if_ne	rdlong	local04, fp
2f66c     04 CE 85 51 |  if_ne	sub	fp, #4
2f670     56 01 48 5C |  if_ne	wrbyte	#0, local04
2f674     02 A8 66 F0 | 	shl	local02, #2
2f678     32 A9 02 F1 | 	add	local02, objptr
2f67c     04 CE 05 F1 | 	add	fp, #4
2f680     E7 AC 02 FB | 	rdlong	local04, fp
2f684     04 CE 85 F1 | 	sub	fp, #4
2f688     54 AD 62 FC | 	wrlong	local04, local02
2f68c     07 A6 4E F7 | 	zerox	local01, #7 wz
2f690     00 7A 06 A6 |  if_e	mov	result1, #0
2f694     1C 00 90 AD |  if_e	jmp	#LR__5061
2f698     08 CE 05 F1 | 	add	fp, #8
2f69c     E7 92 02 F6 | 	mov	arg01, fp
2f6a0     04 CE 85 F1 | 	sub	fp, #4
2f6a4     E7 94 02 F6 | 	mov	arg02, fp
2f6a8     04 CE 85 F1 | 	sub	fp, #4
2f6ac     00 96 06 F6 | 	mov	arg03, #0
2f6b0     94 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2f6b4                 | ' 
2f6b4                 | ' 	res = mount_volume(&path, &fs, 0);
2f6b4                 | ' 	return res ;
2f6b4                 | LR__5061
2f6b4     E7 F0 03 F6 | 	mov	ptra, fp
2f6b8     F2 00 A0 FD | 	call	#popregs_
2f6bc                 | _fatfs_cc_f_mount_ret
2f6bc     2D 00 64 FD | 	ret
2f6c0                 | 
2f6c0                 | _fatfs_cc_f_open
2f6c0     08 CA 05 F6 | 	mov	COUNT_, #8
2f6c4     E8 00 A0 FD | 	call	#pushregs_
2f6c8     60 F0 07 F1 | 	add	ptra, #96
2f6cc     49 A7 0A F6 | 	mov	local01, arg01 wz
2f6d0     08 CE 05 F1 | 	add	fp, #8
2f6d4     E7 94 62 FC | 	wrlong	arg02, fp
2f6d8     08 CE 85 F1 | 	sub	fp, #8
2f6dc     4B A9 02 F6 | 	mov	local02, arg03
2f6e0     09 7A 06 A6 |  if_e	mov	result1, #9
2f6e4     24 04 90 AD |  if_e	jmp	#LR__5087
2f6e8     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2f6ec     3F A8 06 F5 | 	and	local02, #63
2f6f0     08 CE 05 F1 | 	add	fp, #8
2f6f4     E7 92 02 F6 | 	mov	arg01, fp
2f6f8     3C CE 05 F1 | 	add	fp, #60
2f6fc     E7 94 02 F6 | 	mov	arg02, fp
2f700     44 CE 85 F1 | 	sub	fp, #68
2f704     54 97 02 F6 | 	mov	arg03, local02
2f708     3C F9 BF FD | 	call	#_fatfs_cc_mount_volume
2f70c     3D AB 0A F6 | 	mov	local03, result1 wz
2f710     EC 03 90 5D |  if_ne	jmp	#LR__5086
2f714     44 CE 05 F1 | 	add	fp, #68
2f718     E7 AA 02 FB | 	rdlong	local03, fp
2f71c     30 CE 85 F1 | 	sub	fp, #48
2f720     E7 AA 62 FC | 	wrlong	local03, fp
2f724     E7 92 02 F6 | 	mov	arg01, fp
2f728     0C CE 85 F1 | 	sub	fp, #12
2f72c     E7 AC 02 FB | 	rdlong	local04, fp
2f730     08 CE 85 F1 | 	sub	fp, #8
2f734     56 95 02 F6 | 	mov	arg02, local04
2f738     70 F4 BF FD | 	call	#_fatfs_cc_follow_path
2f73c     3D AB 0A F6 | 	mov	local03, result1 wz
2f740     18 00 90 5D |  if_ne	jmp	#LR__5070
2f744     3F CE 05 F1 | 	add	fp, #63
2f748     E7 AC C2 FA | 	rdbyte	local04, fp
2f74c     3F CE 85 F1 | 	sub	fp, #63
2f750     56 99 E2 F8 | 	getbyte	arg04, local04, #0
2f754     80 98 CE F7 | 	test	arg04, #128 wz
2f758     06 AA 06 56 |  if_ne	mov	local03, #6
2f75c                 | LR__5070
2f75c     54 99 E2 F8 | 	getbyte	arg04, local02, #0
2f760     1C 98 CE F7 | 	test	arg04, #28 wz
2f764     5C 01 90 AD |  if_e	jmp	#LR__5075
2f768     00 AA 0E F2 | 	cmp	local03, #0 wz
2f76c     24 00 90 AD |  if_e	jmp	#LR__5072
2f770     04 AA 0E F2 | 	cmp	local03, #4 wz
2f774     10 00 90 5D |  if_ne	jmp	#LR__5071
2f778     E7 92 02 F6 | 	mov	arg01, fp
2f77c     14 92 06 F1 | 	add	arg01, #20
2f780     4C E8 BF FD | 	call	#_fatfs_cc_dir_register
2f784     3D AB 02 F6 | 	mov	local03, result1
2f788                 | LR__5071
2f788     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2f78c     08 A8 46 F5 | 	or	local02, #8
2f790     24 00 90 FD | 	jmp	#LR__5074
2f794                 | LR__5072
2f794     1A CE 05 F1 | 	add	fp, #26
2f798     E7 AC C2 FA | 	rdbyte	local04, fp
2f79c     1A CE 85 F1 | 	sub	fp, #26
2f7a0     11 AC CE F7 | 	test	local04, #17 wz
2f7a4     07 AA 06 56 |  if_ne	mov	local03, #7
2f7a8     0C 00 90 5D |  if_ne	jmp	#LR__5073
2f7ac     54 AD E2 F8 | 	getbyte	local04, local02, #0
2f7b0     04 AC CE F7 | 	test	local04, #4 wz
2f7b4     08 AA 06 56 |  if_ne	mov	local03, #8
2f7b8                 | LR__5073
2f7b8                 | LR__5074
2f7b8     00 AA 0E F2 | 	cmp	local03, #0 wz
2f7bc     40 01 90 5D |  if_ne	jmp	#LR__5078
2f7c0     54 AD E2 F8 | 	getbyte	local04, local02, #0
2f7c4     08 AC CE F7 | 	test	local04, #8 wz
2f7c8     34 01 90 AD |  if_e	jmp	#LR__5078
2f7cc     C0 1B B0 FD | 	call	#_fatfs_cc__get_fattime
2f7d0     30 CE 05 F1 | 	add	fp, #48
2f7d4     E7 92 02 FB | 	rdlong	arg01, fp
2f7d8     0E 92 06 F1 | 	add	arg01, #14
2f7dc     49 7B 62 FC | 	wrlong	result1, arg01
2f7e0     E7 92 02 FB | 	rdlong	arg01, fp
2f7e4     16 92 06 F1 | 	add	arg01, #22
2f7e8     49 7B 62 FC | 	wrlong	result1, arg01
2f7ec     14 CE 05 F1 | 	add	fp, #20
2f7f0     E7 92 02 FB | 	rdlong	arg01, fp
2f7f4     14 CE 85 F1 | 	sub	fp, #20
2f7f8     E7 94 02 FB | 	rdlong	arg02, fp
2f7fc     30 CE 85 F1 | 	sub	fp, #48
2f800     C0 DE BF FD | 	call	#_fatfs_cc_ld_clust
2f804     3D AD 02 F6 | 	mov	local04, result1
2f808     30 CE 05 F1 | 	add	fp, #48
2f80c     E7 98 02 FB | 	rdlong	arg04, fp
2f810     0B 98 06 F1 | 	add	arg04, #11
2f814     4C 41 48 FC | 	wrbyte	#32, arg04
2f818     14 CE 05 F1 | 	add	fp, #20
2f81c     E7 92 02 FB | 	rdlong	arg01, fp
2f820     14 CE 85 F1 | 	sub	fp, #20
2f824     E7 94 02 FB | 	rdlong	arg02, fp
2f828     30 CE 85 F1 | 	sub	fp, #48
2f82c     00 96 06 F6 | 	mov	arg03, #0
2f830     C4 DE BF FD | 	call	#_fatfs_cc_st_clust
2f834     30 CE 05 F1 | 	add	fp, #48
2f838     E7 92 02 FB | 	rdlong	arg01, fp
2f83c     1C 92 06 F1 | 	add	arg01, #28
2f840     49 01 68 FC | 	wrlong	#0, arg01
2f844     14 CE 05 F1 | 	add	fp, #20
2f848     E7 98 02 FB | 	rdlong	arg04, fp
2f84c     44 CE 85 F1 | 	sub	fp, #68
2f850     03 98 06 F1 | 	add	arg04, #3
2f854     4C 03 48 FC | 	wrbyte	#1, arg04
2f858     00 AC 0E F2 | 	cmp	local04, #0 wz
2f85c     A0 00 90 AD |  if_e	jmp	#LR__5078
2f860     44 CE 05 F1 | 	add	fp, #68
2f864     E7 AA 02 FB | 	rdlong	local03, fp
2f868     30 AA 06 F1 | 	add	local03, #48
2f86c     55 AF 02 FB | 	rdlong	local05, local03
2f870     30 CE 85 F1 | 	sub	fp, #48
2f874     E7 92 02 F6 | 	mov	arg01, fp
2f878     14 CE 85 F1 | 	sub	fp, #20
2f87c     56 95 02 F6 | 	mov	arg02, local04
2f880     00 96 06 F6 | 	mov	arg03, #0
2f884     70 D6 BF FD | 	call	#_fatfs_cc_remove_chain
2f888     3D AB 0A F6 | 	mov	local03, result1 wz
2f88c     70 00 90 5D |  if_ne	jmp	#LR__5078
2f890     44 CE 05 F1 | 	add	fp, #68
2f894     E7 92 02 FB | 	rdlong	arg01, fp
2f898     44 CE 85 F1 | 	sub	fp, #68
2f89c     57 95 02 F6 | 	mov	arg02, local05
2f8a0     E8 D0 BF FD | 	call	#_fatfs_cc_move_window
2f8a4     3D AB 02 F6 | 	mov	local03, result1
2f8a8     44 CE 05 F1 | 	add	fp, #68
2f8ac     E7 AE 02 FB | 	rdlong	local05, fp
2f8b0     44 CE 85 F1 | 	sub	fp, #68
2f8b4     01 AC 86 F1 | 	sub	local04, #1
2f8b8     10 AE 06 F1 | 	add	local05, #16
2f8bc     57 AD 62 FC | 	wrlong	local04, local05
2f8c0     3C 00 90 FD | 	jmp	#LR__5078
2f8c4                 | LR__5075
2f8c4     00 AA 0E F2 | 	cmp	local03, #0 wz
2f8c8     34 00 90 5D |  if_ne	jmp	#LR__5077
2f8cc     1A CE 05 F1 | 	add	fp, #26
2f8d0     E7 AE C2 FA | 	rdbyte	local05, fp
2f8d4     1A CE 85 F1 | 	sub	fp, #26
2f8d8     10 AE CE F7 | 	test	local05, #16 wz
2f8dc     04 AA 06 56 |  if_ne	mov	local03, #4
2f8e0     1C 00 90 5D |  if_ne	jmp	#LR__5076
2f8e4     54 AF E2 F8 | 	getbyte	local05, local02, #0
2f8e8     02 AE CE F7 | 	test	local05, #2 wz
2f8ec     1A CE 05 51 |  if_ne	add	fp, #26
2f8f0     E7 AC C2 5A |  if_ne	rdbyte	local04, fp
2f8f4     1A CE 85 51 |  if_ne	sub	fp, #26
2f8f8     01 AC CE 57 |  if_ne	test	local04, #1 wz
2f8fc     07 AA 06 56 |  if_ne	mov	local03, #7
2f900                 | LR__5076
2f900                 | LR__5077
2f900                 | LR__5078
2f900     00 AA 0E F2 | 	cmp	local03, #0 wz
2f904     40 00 90 5D |  if_ne	jmp	#LR__5079
2f908     54 AF E2 F8 | 	getbyte	local05, local02, #0
2f90c     08 AE CE F7 | 	test	local05, #8 wz
2f910     54 A9 E2 58 |  if_ne	getbyte	local02, local02, #0
2f914     40 A8 46 55 |  if_ne	or	local02, #64
2f918     44 CE 05 F1 | 	add	fp, #68
2f91c     E7 AE 02 FB | 	rdlong	local05, fp
2f920     30 AE 06 F1 | 	add	local05, #48
2f924     57 AF 02 FB | 	rdlong	local05, local05
2f928     20 A6 06 F1 | 	add	local01, #32
2f92c     53 AF 62 FC | 	wrlong	local05, local01
2f930     14 CE 85 F1 | 	sub	fp, #20
2f934     E7 AE 02 FB | 	rdlong	local05, fp
2f938     30 CE 85 F1 | 	sub	fp, #48
2f93c     04 A6 06 F1 | 	add	local01, #4
2f940     53 AF 62 FC | 	wrlong	local05, local01
2f944     24 A6 86 F1 | 	sub	local01, #36
2f948                 | LR__5079
2f948     00 AA 0E F2 | 	cmp	local03, #0 wz
2f94c     B0 01 90 5D |  if_ne	jmp	#LR__5085
2f950     44 CE 05 F1 | 	add	fp, #68
2f954     E7 92 02 FB | 	rdlong	arg01, fp
2f958     14 CE 85 F1 | 	sub	fp, #20
2f95c     E7 94 02 FB | 	rdlong	arg02, fp
2f960     30 CE 85 F1 | 	sub	fp, #48
2f964     5C DD BF FD | 	call	#_fatfs_cc_ld_clust
2f968     08 A6 06 F1 | 	add	local01, #8
2f96c     53 7B 62 FC | 	wrlong	result1, local01
2f970     30 CE 05 F1 | 	add	fp, #48
2f974     E7 92 02 FB | 	rdlong	arg01, fp
2f978     1C 92 06 F1 | 	add	arg01, #28
2f97c                 | ' {
2f97c                 | ' 
2f97c                 | ' 	return *((DWORD*)ptr);
2f97c     49 7B 02 FB | 	rdlong	result1, arg01
2f980     04 A6 06 F1 | 	add	local01, #4
2f984     53 7B 62 FC | 	wrlong	result1, local01
2f988     0C A6 86 F1 | 	sub	local01, #12
2f98c     14 CE 05 F1 | 	add	fp, #20
2f990     E7 AE 02 FB | 	rdlong	local05, fp
2f994     53 AF 62 FC | 	wrlong	local05, local01
2f998     E7 AE 02 FB | 	rdlong	local05, fp
2f99c     44 CE 85 F1 | 	sub	fp, #68
2f9a0     06 AE 06 F1 | 	add	local05, #6
2f9a4     57 AD E2 FA | 	rdword	local04, local05
2f9a8     04 A6 06 F1 | 	add	local01, #4
2f9ac     53 AD 52 FC | 	wrword	local04, local01
2f9b0     0C A6 06 F1 | 	add	local01, #12
2f9b4     53 A9 42 FC | 	wrbyte	local02, local01
2f9b8     01 A6 06 F1 | 	add	local01, #1
2f9bc     53 01 48 FC | 	wrbyte	#0, local01
2f9c0     0B A6 06 F1 | 	add	local01, #11
2f9c4     53 01 68 FC | 	wrlong	#0, local01
2f9c8     08 A6 86 F1 | 	sub	local01, #8
2f9cc     53 01 68 FC | 	wrlong	#0, local01
2f9d0     14 A6 06 F1 | 	add	local01, #20
2f9d4     53 93 02 F6 | 	mov	arg01, local01
2f9d8     28 A6 86 F1 | 	sub	local01, #40
2f9dc     00 94 06 F6 | 	mov	arg02, #0
2f9e0     09 96 C6 F9 | 	decod	arg03, #9
2f9e4     D8 00 A0 FD | 	call	#\builtin_bytefill_
2f9e8     54 A9 E2 F8 | 	getbyte	local02, local02, #0
2f9ec     20 A8 CE F7 | 	test	local02, #32 wz
2f9f0     0C 01 90 AD |  if_e	jmp	#LR__5084
2f9f4     0C A6 06 F1 | 	add	local01, #12
2f9f8     53 AD 02 FB | 	rdlong	local04, local01
2f9fc     0C A6 86 F1 | 	sub	local01, #12
2fa00     01 AC 16 F2 | 	cmp	local04, #1 wc
2fa04     F8 00 90 CD |  if_b	jmp	#LR__5084
2fa08     0C A6 06 F1 | 	add	local01, #12
2fa0c     53 AD 02 FB | 	rdlong	local04, local01
2fa10     08 A6 06 F1 | 	add	local01, #8
2fa14     53 AD 62 FC | 	wrlong	local04, local01
2fa18     44 CE 05 F1 | 	add	fp, #68
2fa1c     E7 AC 02 FB | 	rdlong	local04, fp
2fa20     44 CE 85 F1 | 	sub	fp, #68
2fa24     0A AC 06 F1 | 	add	local04, #10
2fa28     56 B1 E2 FA | 	rdword	local06, local04
2fa2c     09 B0 66 F0 | 	shl	local06, #9
2fa30     0C A6 86 F1 | 	sub	local01, #12
2fa34     53 B3 02 FB | 	rdlong	local07, local01
2fa38                 | ' 				fp->fptr = fp->obj.objsize;
2fa38                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2fa38                 | ' 				clst = fp->obj.sclust;
2fa38                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2fa38     04 A6 06 F1 | 	add	local01, #4
2fa3c     53 B5 02 FB | 	rdlong	local08, local01
2fa40     0C A6 86 F1 | 	sub	local01, #12
2fa44                 | LR__5080
2fa44     00 AA 0E F2 | 	cmp	local03, #0 wz
2fa48     34 00 90 5D |  if_ne	jmp	#LR__5081
2fa4c     58 B5 1A F2 | 	cmp	local08, local06 wcz
2fa50     2C 00 90 ED |  if_be	jmp	#LR__5081
2fa54     53 93 02 F6 | 	mov	arg01, local01
2fa58     59 95 02 F6 | 	mov	arg02, local07
2fa5c     E4 D0 BF FD | 	call	#_fatfs_cc_get_fat
2fa60     3D B3 02 F6 | 	mov	local07, result1
2fa64     02 B2 16 F2 | 	cmp	local07, #2 wc
2fa68     02 AA 06 C6 |  if_b	mov	local03, #2
2fa6c     FF FF 7F FF 
2fa70     FF B3 0E F2 | 	cmp	local07, ##-1 wz
2fa74     01 AA 06 A6 |  if_e	mov	local03, #1
2fa78     58 B5 82 F1 | 	sub	local08, local06
2fa7c     C4 FF 9F FD | 	jmp	#LR__5080
2fa80                 | LR__5081
2fa80     18 A6 06 F1 | 	add	local01, #24
2fa84     53 B3 62 FC | 	wrlong	local07, local01
2fa88     18 A6 86 F1 | 	sub	local01, #24
2fa8c     00 AA 0E F2 | 	cmp	local03, #0 wz
2fa90     6C 00 90 5D |  if_ne	jmp	#LR__5083
2fa94     FF B5 CE F7 | 	test	local08, #511 wz
2fa98     64 00 90 AD |  if_e	jmp	#LR__5083
2fa9c     44 CE 05 F1 | 	add	fp, #68
2faa0     E7 92 02 FB | 	rdlong	arg01, fp
2faa4     44 CE 85 F1 | 	sub	fp, #68
2faa8     59 95 02 F6 | 	mov	arg02, local07
2faac     54 D0 BF FD | 	call	#_fatfs_cc_clst2sect
2fab0     3D AF 0A F6 | 	mov	local05, result1 wz
2fab4     02 AA 06 A6 |  if_e	mov	local03, #2
2fab8     44 00 90 AD |  if_e	jmp	#LR__5082
2fabc     09 B4 46 F0 | 	shr	local08, #9
2fac0     5A AF 02 F1 | 	add	local05, local08
2fac4     1C A6 06 F1 | 	add	local01, #28
2fac8     53 AF 62 FC | 	wrlong	local05, local01
2facc     44 CE 05 F1 | 	add	fp, #68
2fad0     E7 AC 02 FB | 	rdlong	local04, fp
2fad4     44 CE 85 F1 | 	sub	fp, #68
2fad8     01 AC 06 F1 | 	add	local04, #1
2fadc     56 93 C2 FA | 	rdbyte	arg01, local04
2fae0     53 95 02 F6 | 	mov	arg02, local01
2fae4     0C 94 06 F1 | 	add	arg02, #12
2fae8     57 97 02 F6 | 	mov	arg03, local05
2faec     1C A6 86 F1 | 	sub	local01, #28
2faf0     01 98 06 F6 | 	mov	arg04, #1
2faf4     0C C8 BF FD | 	call	#_fatfs_cc_disk_read
2faf8     00 7A 0E F2 | 	cmp	result1, #0 wz
2fafc     01 AA 06 56 |  if_ne	mov	local03, #1
2fb00                 | LR__5082
2fb00                 | LR__5083
2fb00                 | LR__5084
2fb00                 | LR__5085
2fb00                 | LR__5086
2fb00     00 AA 0E F2 | 	cmp	local03, #0 wz
2fb04     53 01 68 5C |  if_ne	wrlong	#0, local01
2fb08                 | ' 
2fb08                 | ' 	return res ;
2fb08     55 7B 02 F6 | 	mov	result1, local03
2fb0c                 | LR__5087
2fb0c     E7 F0 03 F6 | 	mov	ptra, fp
2fb10     F2 00 A0 FD | 	call	#popregs_
2fb14                 | _fatfs_cc_f_open_ret
2fb14     2D 00 64 FD | 	ret
2fb18                 | 
2fb18                 | _fatfs_cc_f_read
2fb18     0E CA 05 F6 | 	mov	COUNT_, #14
2fb1c     E8 00 A0 FD | 	call	#pushregs_
2fb20     38 F0 07 F1 | 	add	ptra, #56
2fb24     49 A7 02 F6 | 	mov	local01, arg01
2fb28     4A A9 02 F6 | 	mov	local02, arg02
2fb2c     4B AB 02 F6 | 	mov	local03, arg03
2fb30     4C AD 02 F6 | 	mov	local04, arg04
2fb34     54 AF 02 F6 | 	mov	local05, local02
2fb38     56 01 68 FC | 	wrlong	#0, local04
2fb3c     E7 94 02 F6 | 	mov	arg02, fp
2fb40     18 94 06 F1 | 	add	arg02, #24
2fb44     53 93 02 F6 | 	mov	arg01, local01
2fb48     2C FA BF FD | 	call	#_fatfs_cc_validate
2fb4c     3D B1 0A F6 | 	mov	local06, result1 wz
2fb50     11 A6 06 A1 |  if_e	add	local01, #17
2fb54     53 B1 C2 AA |  if_e	rdbyte	local06, local01
2fb58     11 A6 86 A1 |  if_e	sub	local01, #17
2fb5c     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
2fb60     58 7B 02 56 |  if_ne	mov	result1, local06
2fb64     3C 03 90 5D |  if_ne	jmp	#LR__5101
2fb68     10 A6 06 F1 | 	add	local01, #16
2fb6c     53 B3 C2 FA | 	rdbyte	local07, local01
2fb70     10 A6 86 F1 | 	sub	local01, #16
2fb74     01 B2 CE F7 | 	test	local07, #1 wz
2fb78     07 7A 06 A6 |  if_e	mov	result1, #7
2fb7c     24 03 90 AD |  if_e	jmp	#LR__5101
2fb80     0C A6 06 F1 | 	add	local01, #12
2fb84     53 B5 02 FB | 	rdlong	local08, local01
2fb88     08 A6 06 F1 | 	add	local01, #8
2fb8c     53 B7 02 FB | 	rdlong	local09, local01
2fb90     14 A6 86 F1 | 	sub	local01, #20
2fb94     5B B5 82 F1 | 	sub	local08, local09
2fb98     5A AB 3A F3 | 	fle	local03, local08 wcz
2fb9c                 | ' 
2fb9c                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2fb9c                 | LR__5090
2fb9c     01 AA 16 F2 | 	cmp	local03, #1 wc
2fba0     FC 02 90 CD |  if_b	jmp	#LR__5100
2fba4     14 A6 06 F1 | 	add	local01, #20
2fba8     53 B3 02 FB | 	rdlong	local07, local01
2fbac     14 A6 86 F1 | 	sub	local01, #20
2fbb0     FF B3 CE F7 | 	test	local07, #511 wz
2fbb4     80 02 90 5D |  if_ne	jmp	#LR__5098
2fbb8     14 A6 06 F1 | 	add	local01, #20
2fbbc     53 B9 02 FB | 	rdlong	local10, local01
2fbc0     14 A6 86 F1 | 	sub	local01, #20
2fbc4     09 B8 46 F0 | 	shr	local10, #9
2fbc8     18 CE 05 F1 | 	add	fp, #24
2fbcc     E7 B2 02 FB | 	rdlong	local07, fp
2fbd0     18 CE 85 F1 | 	sub	fp, #24
2fbd4     0A B2 06 F1 | 	add	local07, #10
2fbd8     59 B3 E2 FA | 	rdword	local07, local07
2fbdc     01 B2 86 F1 | 	sub	local07, #1
2fbe0     59 B9 0A F5 | 	and	local10, local07 wz
2fbe4     6C 00 90 5D |  if_ne	jmp	#LR__5092
2fbe8     14 A6 06 F1 | 	add	local01, #20
2fbec     53 B3 0A FB | 	rdlong	local07, local01 wz
2fbf0     14 A6 86 F1 | 	sub	local01, #20
2fbf4     08 A6 06 A1 |  if_e	add	local01, #8
2fbf8     53 BB 02 AB |  if_e	rdlong	local11, local01
2fbfc     08 A6 86 A1 |  if_e	sub	local01, #8
2fc00     18 00 90 AD |  if_e	jmp	#LR__5091
2fc04     53 93 02 F6 | 	mov	arg01, local01
2fc08     18 A6 06 F1 | 	add	local01, #24
2fc0c     53 95 02 FB | 	rdlong	arg02, local01
2fc10     18 A6 86 F1 | 	sub	local01, #24
2fc14     2C CF BF FD | 	call	#_fatfs_cc_get_fat
2fc18     3D BB 02 F6 | 	mov	local11, result1
2fc1c                 | LR__5091
2fc1c     02 BA 16 F2 | 	cmp	local11, #2 wc
2fc20     11 A6 06 C1 |  if_b	add	local01, #17
2fc24     53 05 48 CC |  if_b	wrbyte	#2, local01
2fc28     02 7A 06 C6 |  if_b	mov	result1, #2
2fc2c     74 02 90 CD |  if_b	jmp	#LR__5101
2fc30     FF FF 7F FF 
2fc34     FF BB 0E F2 | 	cmp	local11, ##-1 wz
2fc38     11 A6 06 A1 |  if_e	add	local01, #17
2fc3c     53 03 48 AC |  if_e	wrbyte	#1, local01
2fc40     01 7A 06 A6 |  if_e	mov	result1, #1
2fc44     5C 02 90 AD |  if_e	jmp	#LR__5101
2fc48     18 A6 06 F1 | 	add	local01, #24
2fc4c     53 BB 62 FC | 	wrlong	local11, local01
2fc50     18 A6 86 F1 | 	sub	local01, #24
2fc54                 | LR__5092
2fc54     18 CE 05 F1 | 	add	fp, #24
2fc58     E7 92 02 FB | 	rdlong	arg01, fp
2fc5c     18 CE 85 F1 | 	sub	fp, #24
2fc60     18 A6 06 F1 | 	add	local01, #24
2fc64     53 95 02 FB | 	rdlong	arg02, local01
2fc68     18 A6 86 F1 | 	sub	local01, #24
2fc6c     94 CE BF FD | 	call	#_fatfs_cc_clst2sect
2fc70     3D BD 0A F6 | 	mov	local12, result1 wz
2fc74     11 A6 06 A1 |  if_e	add	local01, #17
2fc78     53 05 48 AC |  if_e	wrbyte	#2, local01
2fc7c     02 7A 06 A6 |  if_e	mov	result1, #2
2fc80     20 02 90 AD |  if_e	jmp	#LR__5101
2fc84     5C BD 02 F1 | 	add	local12, local10
2fc88     55 BF 02 F6 | 	mov	local13, local03
2fc8c     09 BE 46 F0 | 	shr	local13, #9
2fc90     01 BE 16 F2 | 	cmp	local13, #1 wc
2fc94     D8 00 90 CD |  if_b	jmp	#LR__5095
2fc98     5C B3 02 F6 | 	mov	local07, local10
2fc9c     5F B3 02 F1 | 	add	local07, local13
2fca0     18 CE 05 F1 | 	add	fp, #24
2fca4     E7 B6 02 FB | 	rdlong	local09, fp
2fca8     18 CE 85 F1 | 	sub	fp, #24
2fcac     0A B6 06 F1 | 	add	local09, #10
2fcb0     5B 7B E2 FA | 	rdword	result1, local09
2fcb4     3D B3 1A F2 | 	cmp	local07, result1 wcz
2fcb8     18 00 90 ED |  if_be	jmp	#LR__5093
2fcbc     18 CE 05 F1 | 	add	fp, #24
2fcc0     E7 BE 02 FB | 	rdlong	local13, fp
2fcc4     18 CE 85 F1 | 	sub	fp, #24
2fcc8     0A BE 06 F1 | 	add	local13, #10
2fccc     5F BF E2 FA | 	rdword	local13, local13
2fcd0     5C BF 82 F1 | 	sub	local13, local10
2fcd4                 | LR__5093
2fcd4     18 CE 05 F1 | 	add	fp, #24
2fcd8     E7 B2 02 FB | 	rdlong	local07, fp
2fcdc     18 CE 85 F1 | 	sub	fp, #24
2fce0     01 B2 06 F1 | 	add	local07, #1
2fce4     59 93 C2 FA | 	rdbyte	arg01, local07
2fce8     57 95 02 F6 | 	mov	arg02, local05
2fcec     5F 99 02 F6 | 	mov	arg04, local13
2fcf0     5E 97 02 F6 | 	mov	arg03, local12
2fcf4     0C C6 BF FD | 	call	#_fatfs_cc_disk_read
2fcf8     00 7A 0E F2 | 	cmp	result1, #0 wz
2fcfc     11 A6 06 51 |  if_ne	add	local01, #17
2fd00     53 03 48 5C |  if_ne	wrbyte	#1, local01
2fd04     01 7A 06 56 |  if_ne	mov	result1, #1
2fd08     98 01 90 5D |  if_ne	jmp	#LR__5101
2fd0c     10 A6 06 F1 | 	add	local01, #16
2fd10     53 B3 C2 FA | 	rdbyte	local07, local01
2fd14     10 A6 86 F1 | 	sub	local01, #16
2fd18     80 B2 CE F7 | 	test	local07, #128 wz
2fd1c     44 00 90 AD |  if_e	jmp	#LR__5094
2fd20     1C A6 06 F1 | 	add	local01, #28
2fd24     53 B7 02 FB | 	rdlong	local09, local01
2fd28     1C A6 86 F1 | 	sub	local01, #28
2fd2c     5E B7 82 F1 | 	sub	local09, local12
2fd30     5F B7 12 F2 | 	cmp	local09, local13 wc
2fd34     2C 00 90 3D |  if_ae	jmp	#LR__5094
2fd38     57 93 02 F6 | 	mov	arg01, local05
2fd3c     1C A6 06 F1 | 	add	local01, #28
2fd40     53 B9 02 FB | 	rdlong	local10, local01
2fd44     5E B9 82 F1 | 	sub	local10, local12
2fd48     09 B8 66 F0 | 	shl	local10, #9
2fd4c     5C 93 02 F1 | 	add	arg01, local10
2fd50     0C A6 06 F1 | 	add	local01, #12
2fd54     53 95 02 F6 | 	mov	arg02, local01
2fd58     28 A6 86 F1 | 	sub	local01, #40
2fd5c     09 96 C6 F9 | 	decod	arg03, #9
2fd60     28 4B BF FD | 	call	#__system____builtin_memmove
2fd64                 | LR__5094
2fd64     09 BE 66 F0 | 	shl	local13, #9
2fd68     5F C1 02 F6 | 	mov	local14, local13
2fd6c                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2fd6c                 | ' 				}
2fd6c                 | ' 
2fd6c                 | ' 
2fd6c                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2fd6c                 | ' 				continue;
2fd6c     04 01 90 FD | 	jmp	#LR__5099
2fd70                 | LR__5095
2fd70     1C A6 06 F1 | 	add	local01, #28
2fd74     53 B3 02 FB | 	rdlong	local07, local01
2fd78     1C A6 86 F1 | 	sub	local01, #28
2fd7c     5E B3 0A F2 | 	cmp	local07, local12 wz
2fd80     A8 00 90 AD |  if_e	jmp	#LR__5097
2fd84     10 A6 06 F1 | 	add	local01, #16
2fd88     53 B3 C2 FA | 	rdbyte	local07, local01
2fd8c     10 A6 86 F1 | 	sub	local01, #16
2fd90     80 B2 CE F7 | 	test	local07, #128 wz
2fd94     58 00 90 AD |  if_e	jmp	#LR__5096
2fd98     18 CE 05 F1 | 	add	fp, #24
2fd9c     E7 C0 02 FB | 	rdlong	local14, fp
2fda0     18 CE 85 F1 | 	sub	fp, #24
2fda4     01 C0 06 F1 | 	add	local14, #1
2fda8     60 93 C2 FA | 	rdbyte	arg01, local14
2fdac     28 A6 06 F1 | 	add	local01, #40
2fdb0     53 95 02 F6 | 	mov	arg02, local01
2fdb4     0C A6 86 F1 | 	sub	local01, #12
2fdb8     53 97 02 FB | 	rdlong	arg03, local01
2fdbc     1C A6 86 F1 | 	sub	local01, #28
2fdc0     01 98 06 F6 | 	mov	arg04, #1
2fdc4     78 C6 BF FD | 	call	#_fatfs_cc_disk_write
2fdc8     00 7A 0E F2 | 	cmp	result1, #0 wz
2fdcc     11 A6 06 51 |  if_ne	add	local01, #17
2fdd0     53 03 48 5C |  if_ne	wrbyte	#1, local01
2fdd4     01 7A 06 56 |  if_ne	mov	result1, #1
2fdd8     C8 00 90 5D |  if_ne	jmp	#LR__5101
2fddc     10 A6 06 F1 | 	add	local01, #16
2fde0     53 B3 C2 FA | 	rdbyte	local07, local01
2fde4     7F B2 06 F5 | 	and	local07, #127
2fde8     53 B3 42 FC | 	wrbyte	local07, local01
2fdec     10 A6 86 F1 | 	sub	local01, #16
2fdf0                 | LR__5096
2fdf0     18 CE 05 F1 | 	add	fp, #24
2fdf4     E7 C0 02 FB | 	rdlong	local14, fp
2fdf8     18 CE 85 F1 | 	sub	fp, #24
2fdfc     01 C0 06 F1 | 	add	local14, #1
2fe00     60 93 C2 FA | 	rdbyte	arg01, local14
2fe04     53 95 02 F6 | 	mov	arg02, local01
2fe08     28 94 06 F1 | 	add	arg02, #40
2fe0c     5E 97 02 F6 | 	mov	arg03, local12
2fe10     01 98 06 F6 | 	mov	arg04, #1
2fe14     EC C4 BF FD | 	call	#_fatfs_cc_disk_read
2fe18     00 7A 0E F2 | 	cmp	result1, #0 wz
2fe1c     11 A6 06 51 |  if_ne	add	local01, #17
2fe20     53 03 48 5C |  if_ne	wrbyte	#1, local01
2fe24     01 7A 06 56 |  if_ne	mov	result1, #1
2fe28     78 00 90 5D |  if_ne	jmp	#LR__5101
2fe2c                 | LR__5097
2fe2c     1C A6 06 F1 | 	add	local01, #28
2fe30     53 BD 62 FC | 	wrlong	local12, local01
2fe34     1C A6 86 F1 | 	sub	local01, #28
2fe38                 | LR__5098
2fe38     14 A6 06 F1 | 	add	local01, #20
2fe3c     53 BF 02 FB | 	rdlong	local13, local01
2fe40     FF BF 06 F5 | 	and	local13, #511
2fe44     09 C0 C6 F9 | 	decod	local14, #9
2fe48     5F C1 82 F1 | 	sub	local14, local13
2fe4c     55 C1 3A F3 | 	fle	local14, local03 wcz
2fe50     53 95 02 F6 | 	mov	arg02, local01
2fe54     14 94 06 F1 | 	add	arg02, #20
2fe58     53 BF 02 FB | 	rdlong	local13, local01
2fe5c     14 A6 86 F1 | 	sub	local01, #20
2fe60     FF BF 06 F5 | 	and	local13, #511
2fe64     5F 95 02 F1 | 	add	arg02, local13
2fe68     57 93 02 F6 | 	mov	arg01, local05
2fe6c     60 97 02 F6 | 	mov	arg03, local14
2fe70     18 4A BF FD | 	call	#__system____builtin_memmove
2fe74                 | LR__5099
2fe74     60 AB 82 F1 | 	sub	local03, local14
2fe78     56 B3 02 FB | 	rdlong	local07, local04
2fe7c     60 B3 02 F1 | 	add	local07, local14
2fe80     56 B3 62 FC | 	wrlong	local07, local04
2fe84     60 AF 02 F1 | 	add	local05, local14
2fe88     14 A6 06 F1 | 	add	local01, #20
2fe8c     53 B3 02 FB | 	rdlong	local07, local01
2fe90     60 B3 02 F1 | 	add	local07, local14
2fe94     53 B3 62 FC | 	wrlong	local07, local01
2fe98     14 A6 86 F1 | 	sub	local01, #20
2fe9c     FC FC 9F FD | 	jmp	#LR__5090
2fea0                 | LR__5100
2fea0                 | ' 
2fea0                 | ' 
2fea0                 | ' 
2fea0                 | ' 
2fea0                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2fea0                 | ' 
2fea0                 | ' 	}
2fea0                 | ' 
2fea0                 | ' 	return FR_OK ;
2fea0     00 7A 06 F6 | 	mov	result1, #0
2fea4                 | LR__5101
2fea4     E7 F0 03 F6 | 	mov	ptra, fp
2fea8     F2 00 A0 FD | 	call	#popregs_
2feac                 | _fatfs_cc_f_read_ret
2feac     2D 00 64 FD | 	ret
2feb0                 | 
2feb0                 | _fatfs_cc_f_write
2feb0     12 CA 05 F6 | 	mov	COUNT_, #18
2feb4     E8 00 A0 FD | 	call	#pushregs_
2feb8     34 F0 07 F1 | 	add	ptra, #52
2febc     49 A7 02 F6 | 	mov	local01, arg01
2fec0     4A A9 02 F6 | 	mov	local02, arg02
2fec4     4B AB 02 F6 | 	mov	local03, arg03
2fec8     4C AD 02 F6 | 	mov	local04, arg04
2fecc     54 AF 02 F6 | 	mov	local05, local02
2fed0     56 01 68 FC | 	wrlong	#0, local04
2fed4     E7 94 02 F6 | 	mov	arg02, fp
2fed8     18 94 06 F1 | 	add	arg02, #24
2fedc     53 93 02 F6 | 	mov	arg01, local01
2fee0     94 F6 BF FD | 	call	#_fatfs_cc_validate
2fee4     3D B1 0A F6 | 	mov	local06, result1 wz
2fee8     11 A6 06 A1 |  if_e	add	local01, #17
2feec     53 B1 C2 AA |  if_e	rdbyte	local06, local01
2fef0     11 A6 86 A1 |  if_e	sub	local01, #17
2fef4     00 B0 4E A2 |  if_e	cmps	local06, #0 wz
2fef8     58 7B 02 56 |  if_ne	mov	result1, local06
2fefc     F4 03 90 5D |  if_ne	jmp	#LR__5122
2ff00     10 A6 06 F1 | 	add	local01, #16
2ff04     53 B3 C2 FA | 	rdbyte	local07, local01
2ff08     10 A6 86 F1 | 	sub	local01, #16
2ff0c     02 B2 CE F7 | 	test	local07, #2 wz
2ff10     07 7A 06 A6 |  if_e	mov	result1, #7
2ff14     DC 03 90 AD |  if_e	jmp	#LR__5122
2ff18     14 A6 06 F1 | 	add	local01, #20
2ff1c     53 B5 02 FB | 	rdlong	local08, local01
2ff20     5A B7 02 F6 | 	mov	local09, local08
2ff24     55 B7 02 F1 | 	add	local09, local03
2ff28     14 A6 86 F1 | 	sub	local01, #20
2ff2c     5A B7 12 F2 | 	cmp	local09, local08 wc
2ff30     01 AA 66 C6 |  if_b	neg	local03, #1
2ff34     14 A6 06 C1 |  if_b	add	local01, #20
2ff38     53 B9 02 CB |  if_b	rdlong	local10, local01
2ff3c     14 A6 86 C1 |  if_b	sub	local01, #20
2ff40     5C AB 82 C1 |  if_b	sub	local03, local10
2ff44                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2ff44                 | ' 	}
2ff44                 | ' 
2ff44                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2ff44                 | LR__5110
2ff44     01 AA 16 F2 | 	cmp	local03, #1 wc
2ff48     94 03 90 CD |  if_b	jmp	#LR__5121
2ff4c     14 A6 06 F1 | 	add	local01, #20
2ff50     53 B3 02 FB | 	rdlong	local07, local01
2ff54     14 A6 86 F1 | 	sub	local01, #20
2ff58     FF B3 CE F7 | 	test	local07, #511 wz
2ff5c     D8 02 90 5D |  if_ne	jmp	#LR__5119
2ff60     14 A6 06 F1 | 	add	local01, #20
2ff64     53 BB 02 FB | 	rdlong	local11, local01
2ff68     14 A6 86 F1 | 	sub	local01, #20
2ff6c     09 BA 46 F0 | 	shr	local11, #9
2ff70     18 CE 05 F1 | 	add	fp, #24
2ff74     E7 B4 02 FB | 	rdlong	local08, fp
2ff78     18 CE 85 F1 | 	sub	fp, #24
2ff7c     5A BD 02 F6 | 	mov	local12, local08
2ff80     0A BC 06 F1 | 	add	local12, #10
2ff84     5E BF E2 FA | 	rdword	local13, local12
2ff88     0A BC 86 F1 | 	sub	local12, #10
2ff8c     5F B7 32 F9 | 	getword	local09, local13, #0
2ff90     01 B6 86 F1 | 	sub	local09, #1
2ff94     5B BB 0A F5 | 	and	local11, local09 wz
2ff98     A0 00 90 5D |  if_ne	jmp	#LR__5113
2ff9c     14 A6 06 F1 | 	add	local01, #20
2ffa0     53 B3 0A FB | 	rdlong	local07, local01 wz
2ffa4     14 A6 86 F1 | 	sub	local01, #20
2ffa8     24 00 90 5D |  if_ne	jmp	#LR__5111
2ffac     08 A6 06 F1 | 	add	local01, #8
2ffb0     53 C1 0A FB | 	rdlong	local14, local01 wz
2ffb4     08 A6 86 F1 | 	sub	local01, #8
2ffb8     2C 00 90 5D |  if_ne	jmp	#LR__5112
2ffbc     53 93 02 F6 | 	mov	arg01, local01
2ffc0     00 94 06 F6 | 	mov	arg02, #0
2ffc4     44 D0 BF FD | 	call	#_fatfs_cc_create_chain
2ffc8     3D C1 02 F6 | 	mov	local14, result1
2ffcc     18 00 90 FD | 	jmp	#LR__5112
2ffd0                 | LR__5111
2ffd0     53 93 02 F6 | 	mov	arg01, local01
2ffd4     18 A6 06 F1 | 	add	local01, #24
2ffd8     53 95 02 FB | 	rdlong	arg02, local01
2ffdc     18 A6 86 F1 | 	sub	local01, #24
2ffe0     28 D0 BF FD | 	call	#_fatfs_cc_create_chain
2ffe4     3D C1 02 F6 | 	mov	local14, result1
2ffe8                 | LR__5112
2ffe8     00 C0 0E F2 | 	cmp	local14, #0 wz
2ffec     F0 02 90 AD |  if_e	jmp	#LR__5121
2fff0     01 C0 0E F2 | 	cmp	local14, #1 wz
2fff4     11 A6 06 A1 |  if_e	add	local01, #17
2fff8     53 05 48 AC |  if_e	wrbyte	#2, local01
2fffc     02 7A 06 A6 |  if_e	mov	result1, #2
30000     F0 02 90 AD |  if_e	jmp	#LR__5122
30004     FF FF 7F FF 
30008     FF C1 0E F2 | 	cmp	local14, ##-1 wz
3000c     11 A6 06 A1 |  if_e	add	local01, #17
30010     53 03 48 AC |  if_e	wrbyte	#1, local01
30014     01 7A 06 A6 |  if_e	mov	result1, #1
30018     D8 02 90 AD |  if_e	jmp	#LR__5122
3001c     18 A6 06 F1 | 	add	local01, #24
30020     53 C1 62 FC | 	wrlong	local14, local01
30024     10 A6 86 F1 | 	sub	local01, #16
30028     53 B3 0A FB | 	rdlong	local07, local01 wz
3002c     08 A6 86 F1 | 	sub	local01, #8
30030     08 A6 06 A1 |  if_e	add	local01, #8
30034     53 C1 62 AC |  if_e	wrlong	local14, local01
30038     08 A6 86 A1 |  if_e	sub	local01, #8
3003c                 | LR__5113
3003c     10 A6 06 F1 | 	add	local01, #16
30040     53 B3 C2 FA | 	rdbyte	local07, local01
30044     10 A6 86 F1 | 	sub	local01, #16
30048     80 B2 CE F7 | 	test	local07, #128 wz
3004c     58 00 90 AD |  if_e	jmp	#LR__5114
30050     18 CE 05 F1 | 	add	fp, #24
30054     E7 B8 02 FB | 	rdlong	local10, fp
30058     18 CE 85 F1 | 	sub	fp, #24
3005c     01 B8 06 F1 | 	add	local10, #1
30060     5C 93 C2 FA | 	rdbyte	arg01, local10
30064     28 A6 06 F1 | 	add	local01, #40
30068     53 95 02 F6 | 	mov	arg02, local01
3006c     0C A6 86 F1 | 	sub	local01, #12
30070     53 97 02 FB | 	rdlong	arg03, local01
30074     1C A6 86 F1 | 	sub	local01, #28
30078     01 98 06 F6 | 	mov	arg04, #1
3007c     C0 C3 BF FD | 	call	#_fatfs_cc_disk_write
30080     00 7A 0E F2 | 	cmp	result1, #0 wz
30084     11 A6 06 51 |  if_ne	add	local01, #17
30088     53 03 48 5C |  if_ne	wrbyte	#1, local01
3008c     01 7A 06 56 |  if_ne	mov	result1, #1
30090     60 02 90 5D |  if_ne	jmp	#LR__5122
30094     10 A6 06 F1 | 	add	local01, #16
30098     53 B3 C2 FA | 	rdbyte	local07, local01
3009c     7F B2 06 F5 | 	and	local07, #127
300a0     53 B3 42 FC | 	wrbyte	local07, local01
300a4     10 A6 86 F1 | 	sub	local01, #16
300a8                 | LR__5114
300a8     18 CE 05 F1 | 	add	fp, #24
300ac     E7 92 02 FB | 	rdlong	arg01, fp
300b0     18 CE 85 F1 | 	sub	fp, #24
300b4     18 A6 06 F1 | 	add	local01, #24
300b8     53 95 02 FB | 	rdlong	arg02, local01
300bc     18 A6 86 F1 | 	sub	local01, #24
300c0     40 CA BF FD | 	call	#_fatfs_cc_clst2sect
300c4     3D C3 0A F6 | 	mov	local15, result1 wz
300c8     11 A6 06 A1 |  if_e	add	local01, #17
300cc     53 05 48 AC |  if_e	wrbyte	#2, local01
300d0     02 7A 06 A6 |  if_e	mov	result1, #2
300d4     1C 02 90 AD |  if_e	jmp	#LR__5122
300d8     5D C3 02 F1 | 	add	local15, local11
300dc     55 C5 02 F6 | 	mov	local16, local03
300e0     09 C4 46 F0 | 	shr	local16, #9
300e4     01 C4 16 F2 | 	cmp	local16, #1 wc
300e8     D4 00 90 CD |  if_b	jmp	#LR__5117
300ec     5D B3 02 F6 | 	mov	local07, local11
300f0     62 B3 02 F1 | 	add	local07, local16
300f4     18 CE 05 F1 | 	add	fp, #24
300f8     E7 C6 02 FB | 	rdlong	local17, fp
300fc     18 CE 85 F1 | 	sub	fp, #24
30100     0A C6 06 F1 | 	add	local17, #10
30104     63 B9 E2 FA | 	rdword	local10, local17
30108     5C B3 1A F2 | 	cmp	local07, local10 wcz
3010c     18 00 90 ED |  if_be	jmp	#LR__5115
30110     18 CE 05 F1 | 	add	fp, #24
30114     E7 B8 02 FB | 	rdlong	local10, fp
30118     18 CE 85 F1 | 	sub	fp, #24
3011c     0A B8 06 F1 | 	add	local10, #10
30120     5C C5 E2 FA | 	rdword	local16, local10
30124     5D C5 82 F1 | 	sub	local16, local11
30128                 | LR__5115
30128     18 CE 05 F1 | 	add	fp, #24
3012c     E7 B8 02 FB | 	rdlong	local10, fp
30130     18 CE 85 F1 | 	sub	fp, #24
30134     01 B8 06 F1 | 	add	local10, #1
30138     5C 93 C2 FA | 	rdbyte	arg01, local10
3013c     57 95 02 F6 | 	mov	arg02, local05
30140     61 97 02 F6 | 	mov	arg03, local15
30144     62 99 02 F6 | 	mov	arg04, local16
30148     F4 C2 BF FD | 	call	#_fatfs_cc_disk_write
3014c     00 7A 0E F2 | 	cmp	result1, #0 wz
30150     11 A6 06 51 |  if_ne	add	local01, #17
30154     53 03 48 5C |  if_ne	wrbyte	#1, local01
30158     01 7A 06 56 |  if_ne	mov	result1, #1
3015c     94 01 90 5D |  if_ne	jmp	#LR__5122
30160     1C A6 06 F1 | 	add	local01, #28
30164     53 B3 02 FB | 	rdlong	local07, local01
30168     1C A6 86 F1 | 	sub	local01, #28
3016c     61 B3 82 F1 | 	sub	local07, local15
30170     62 B3 12 F2 | 	cmp	local07, local16 wc
30174     3C 00 90 3D |  if_ae	jmp	#LR__5116
30178     28 A6 06 F1 | 	add	local01, #40
3017c     53 93 02 F6 | 	mov	arg01, local01
30180     57 95 02 F6 | 	mov	arg02, local05
30184     0C A6 86 F1 | 	sub	local01, #12
30188     53 BF 02 FB | 	rdlong	local13, local01
3018c     61 BF 82 F1 | 	sub	local13, local15
30190     09 BE 66 F0 | 	shl	local13, #9
30194     5F 95 02 F1 | 	add	arg02, local13
30198     09 96 C6 F9 | 	decod	arg03, #9
3019c     EC 46 BF FD | 	call	#__system____builtin_memmove
301a0     0C A6 86 F1 | 	sub	local01, #12
301a4     53 B3 C2 FA | 	rdbyte	local07, local01
301a8     7F B2 06 F5 | 	and	local07, #127
301ac     53 B3 42 FC | 	wrbyte	local07, local01
301b0     10 A6 86 F1 | 	sub	local01, #16
301b4                 | LR__5116
301b4     62 C9 02 F6 | 	mov	local18, local16
301b8     09 C8 66 F0 | 	shl	local18, #9
301bc                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
301bc                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
301bc                 | ' 				}
301bc                 | ' 
301bc                 | ' 
301bc                 | ' 				wcnt =  ((UINT) 512 )  * cc;
301bc                 | ' 				continue;
301bc     C4 00 90 FD | 	jmp	#LR__5120
301c0                 | LR__5117
301c0     1C A6 06 F1 | 	add	local01, #28
301c4     53 B3 02 FB | 	rdlong	local07, local01
301c8     1C A6 86 F1 | 	sub	local01, #28
301cc     61 B3 0A F2 | 	cmp	local07, local15 wz
301d0     58 00 90 AD |  if_e	jmp	#LR__5118
301d4     14 A6 06 F1 | 	add	local01, #20
301d8     53 C7 02 FB | 	rdlong	local17, local01
301dc     08 A6 86 F1 | 	sub	local01, #8
301e0     53 BD 02 FB | 	rdlong	local12, local01
301e4     0C A6 86 F1 | 	sub	local01, #12
301e8     5E C7 12 F2 | 	cmp	local17, local12 wc
301ec     3C 00 90 3D |  if_ae	jmp	#LR__5118
301f0     18 CE 05 F1 | 	add	fp, #24
301f4     E7 C8 02 FB | 	rdlong	local18, fp
301f8     18 CE 85 F1 | 	sub	fp, #24
301fc     01 C8 06 F1 | 	add	local18, #1
30200     64 93 C2 FA | 	rdbyte	arg01, local18
30204     53 95 02 F6 | 	mov	arg02, local01
30208     28 94 06 F1 | 	add	arg02, #40
3020c     61 97 02 F6 | 	mov	arg03, local15
30210     01 98 06 F6 | 	mov	arg04, #1
30214     EC C0 BF FD | 	call	#_fatfs_cc_disk_read
30218     00 7A 0E F2 | 	cmp	result1, #0 wz
3021c     11 A6 06 51 |  if_ne	add	local01, #17
30220     53 03 48 5C |  if_ne	wrbyte	#1, local01
30224                 | ' 				fp->fptr < fp->obj.objsize &&
30224                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
30224                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
30224     01 7A 06 56 |  if_ne	mov	result1, #1
30228     C8 00 90 5D |  if_ne	jmp	#LR__5122
3022c                 | LR__5118
3022c     1C A6 06 F1 | 	add	local01, #28
30230     53 C3 62 FC | 	wrlong	local15, local01
30234     1C A6 86 F1 | 	sub	local01, #28
30238                 | LR__5119
30238     14 A6 06 F1 | 	add	local01, #20
3023c     53 B9 02 FB | 	rdlong	local10, local01
30240     FF B9 06 F5 | 	and	local10, #511
30244     09 C8 C6 F9 | 	decod	local18, #9
30248     5C C9 82 F1 | 	sub	local18, local10
3024c     55 C9 3A F3 | 	fle	local18, local03 wcz
30250     53 93 02 F6 | 	mov	arg01, local01
30254     14 92 06 F1 | 	add	arg01, #20
30258     53 BF 02 FB | 	rdlong	local13, local01
3025c     FF BF 06 F5 | 	and	local13, #511
30260     5F 93 02 F1 | 	add	arg01, local13
30264     57 95 02 F6 | 	mov	arg02, local05
30268     64 97 02 F6 | 	mov	arg03, local18
3026c     1C 46 BF FD | 	call	#__system____builtin_memmove
30270     04 A6 86 F1 | 	sub	local01, #4
30274     53 B3 C2 FA | 	rdbyte	local07, local01
30278     80 B2 46 F5 | 	or	local07, #128
3027c     53 B3 42 FC | 	wrbyte	local07, local01
30280     10 A6 86 F1 | 	sub	local01, #16
30284                 | LR__5120
30284     64 AB 82 F1 | 	sub	local03, local18
30288     56 B3 02 FB | 	rdlong	local07, local04
3028c     64 B3 02 F1 | 	add	local07, local18
30290     56 B3 62 FC | 	wrlong	local07, local04
30294     64 AF 02 F1 | 	add	local05, local18
30298     14 A6 06 F1 | 	add	local01, #20
3029c     53 B9 02 FB | 	rdlong	local10, local01
302a0     64 B9 02 F1 | 	add	local10, local18
302a4     53 B9 62 FC | 	wrlong	local10, local01
302a8     08 A6 86 F1 | 	sub	local01, #8
302ac     53 B7 02 FB | 	rdlong	local09, local01
302b0     0C A6 86 F1 | 	sub	local01, #12
302b4     5B B9 1A F2 | 	cmp	local10, local09 wcz
302b8     14 A6 06 11 |  if_a	add	local01, #20
302bc     53 B3 02 1B |  if_a	rdlong	local07, local01
302c0     14 A6 86 11 |  if_a	sub	local01, #20
302c4     0C A6 06 E1 |  if_be	add	local01, #12
302c8     53 B3 02 EB |  if_be	rdlong	local07, local01
302cc     0C A6 86 E1 |  if_be	sub	local01, #12
302d0     0C A6 06 F1 | 	add	local01, #12
302d4     53 B3 62 FC | 	wrlong	local07, local01
302d8     0C A6 86 F1 | 	sub	local01, #12
302dc     64 FC 9F FD | 	jmp	#LR__5110
302e0                 | LR__5121
302e0     10 A6 06 F1 | 	add	local01, #16
302e4     53 B3 C2 FA | 	rdbyte	local07, local01
302e8     40 B2 46 F5 | 	or	local07, #64
302ec     53 B3 42 FC | 	wrbyte	local07, local01
302f0                 | ' 
302f0                 | ' 
302f0                 | ' 
302f0                 | ' 
302f0                 | ' 
302f0                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
302f0                 | ' 		fp->flag |=  0x80 ;
302f0                 | ' 
302f0                 | ' 	}
302f0                 | ' 
302f0                 | ' 	fp->flag |=  0x40 ;
302f0                 | ' 
302f0                 | ' 	return FR_OK ;
302f0     00 7A 06 F6 | 	mov	result1, #0
302f4                 | LR__5122
302f4     E7 F0 03 F6 | 	mov	ptra, fp
302f8     F2 00 A0 FD | 	call	#popregs_
302fc                 | _fatfs_cc_f_write_ret
302fc     2D 00 64 FD | 	ret
30300                 | 
30300                 | _fatfs_cc_f_sync
30300     03 CA 05 F6 | 	mov	COUNT_, #3
30304     E8 00 A0 FD | 	call	#pushregs_
30308     18 F0 07 F1 | 	add	ptra, #24
3030c     49 A7 02 F6 | 	mov	local01, arg01
30310     E7 94 02 F6 | 	mov	arg02, fp
30314     0C 94 06 F1 | 	add	arg02, #12
30318     53 93 02 F6 | 	mov	arg01, local01
3031c     58 F2 BF FD | 	call	#_fatfs_cc_validate
30320     3D A9 0A F6 | 	mov	local02, result1 wz
30324     30 01 90 5D |  if_ne	jmp	#LR__5133
30328     10 A6 06 F1 | 	add	local01, #16
3032c     53 99 C2 FA | 	rdbyte	arg04, local01
30330     10 A6 86 F1 | 	sub	local01, #16
30334     40 98 CE F7 | 	test	arg04, #64 wz
30338     1C 01 90 AD |  if_e	jmp	#LR__5132
3033c     10 A6 06 F1 | 	add	local01, #16
30340     53 A9 C2 FA | 	rdbyte	local02, local01
30344     10 A6 86 F1 | 	sub	local01, #16
30348     80 A8 CE F7 | 	test	local02, #128 wz
3034c     50 00 90 AD |  if_e	jmp	#LR__5130
30350     0C CE 05 F1 | 	add	fp, #12
30354     E7 A8 02 FB | 	rdlong	local02, fp
30358     0C CE 85 F1 | 	sub	fp, #12
3035c     01 A8 06 F1 | 	add	local02, #1
30360     54 93 C2 FA | 	rdbyte	arg01, local02
30364     28 A6 06 F1 | 	add	local01, #40
30368     53 95 02 F6 | 	mov	arg02, local01
3036c     0C A6 86 F1 | 	sub	local01, #12
30370     53 97 02 FB | 	rdlong	arg03, local01
30374     1C A6 86 F1 | 	sub	local01, #28
30378     01 98 06 F6 | 	mov	arg04, #1
3037c     C0 C0 BF FD | 	call	#_fatfs_cc_disk_write
30380     00 7A 0E F2 | 	cmp	result1, #0 wz
30384     01 7A 06 56 |  if_ne	mov	result1, #1
30388     D0 00 90 5D |  if_ne	jmp	#LR__5134
3038c     10 A6 06 F1 | 	add	local01, #16
30390     53 A9 C2 FA | 	rdbyte	local02, local01
30394     7F A8 06 F5 | 	and	local02, #127
30398     53 A9 42 FC | 	wrbyte	local02, local01
3039c     10 A6 86 F1 | 	sub	local01, #16
303a0                 | LR__5130
303a0     EC 0F B0 FD | 	call	#_fatfs_cc__get_fattime
303a4     3D AB 02 F6 | 	mov	local03, result1
303a8     0C CE 05 F1 | 	add	fp, #12
303ac     E7 92 02 FB | 	rdlong	arg01, fp
303b0     0C CE 85 F1 | 	sub	fp, #12
303b4     20 A6 06 F1 | 	add	local01, #32
303b8     53 95 02 FB | 	rdlong	arg02, local01
303bc     20 A6 86 F1 | 	sub	local01, #32
303c0     C8 C5 BF FD | 	call	#_fatfs_cc_move_window
303c4     3D A9 0A F6 | 	mov	local02, result1 wz
303c8     8C 00 90 5D |  if_ne	jmp	#LR__5131
303cc     24 A6 06 F1 | 	add	local01, #36
303d0     53 A9 02 FB | 	rdlong	local02, local01
303d4     24 A6 86 F1 | 	sub	local01, #36
303d8     0B A8 06 F1 | 	add	local02, #11
303dc     54 99 C2 FA | 	rdbyte	arg04, local02
303e0     20 98 46 F5 | 	or	arg04, #32
303e4     54 99 42 FC | 	wrbyte	arg04, local02
303e8     0B A8 86 F1 | 	sub	local02, #11
303ec     53 93 02 FB | 	rdlong	arg01, local01
303f0     08 A6 06 F1 | 	add	local01, #8
303f4     53 97 02 FB | 	rdlong	arg03, local01
303f8     54 95 02 F6 | 	mov	arg02, local02
303fc     F8 D2 BF FD | 	call	#_fatfs_cc_st_clust
30400     54 93 02 F6 | 	mov	arg01, local02
30404     1C 92 06 F1 | 	add	arg01, #28
30408     04 A6 06 F1 | 	add	local01, #4
3040c     53 95 02 FB | 	rdlong	arg02, local01
30410     49 95 62 FC | 	wrlong	arg02, arg01
30414     54 93 02 F6 | 	mov	arg01, local02
30418     16 92 06 F1 | 	add	arg01, #22
3041c     49 AB 62 FC | 	wrlong	local03, arg01
30420     12 A8 06 F1 | 	add	local02, #18
30424     54 01 58 FC | 	wrword	#0, local02
30428     0C CE 05 F1 | 	add	fp, #12
3042c     E7 AA 02 FB | 	rdlong	local03, fp
30430     03 AA 06 F1 | 	add	local03, #3
30434     55 03 48 FC | 	wrbyte	#1, local03
30438     E7 92 02 FB | 	rdlong	arg01, fp
3043c     0C CE 85 F1 | 	sub	fp, #12
30440     C0 C5 BF FD | 	call	#_fatfs_cc_sync_fs
30444     3D A9 02 F6 | 	mov	local02, result1
30448     04 A6 06 F1 | 	add	local01, #4
3044c     53 AB C2 FA | 	rdbyte	local03, local01
30450     BF AA 06 F5 | 	and	local03, #191
30454     53 AB 42 FC | 	wrbyte	local03, local01
30458                 | LR__5131
30458                 | LR__5132
30458                 | LR__5133
30458                 | ' 					dir = fp->dir_ptr;
30458                 | ' 					dir[ 11 ] |=  0x20 ;
30458                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
30458                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
30458                 | ' 					st_dword(dir +  22 , tm);
30458                 | ' 					st_word(dir +  18 , 0);
30458                 | ' 					fs->wflag = 1;
30458                 | ' 					res = sync_fs(fs);
30458                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
30458                 | ' 				}
30458                 | ' 			}
30458                 | ' 		}
30458                 | ' 	}
30458                 | ' 
30458                 | ' 	return res ;
30458     54 7B 02 F6 | 	mov	result1, local02
3045c                 | LR__5134
3045c     E7 F0 03 F6 | 	mov	ptra, fp
30460     F2 00 A0 FD | 	call	#popregs_
30464                 | _fatfs_cc_f_sync_ret
30464     2D 00 64 FD | 	ret
30468                 | 
30468                 | _fatfs_cc_f_close
30468     02 CA 05 F6 | 	mov	COUNT_, #2
3046c     E8 00 A0 FD | 	call	#pushregs_
30470     10 F0 07 F1 | 	add	ptra, #16
30474     49 A7 02 F6 | 	mov	local01, arg01
30478     84 FE BF FD | 	call	#_fatfs_cc_f_sync
3047c     3D A9 0A F6 | 	mov	local02, result1 wz
30480     18 00 90 5D |  if_ne	jmp	#LR__5140
30484     E7 94 02 F6 | 	mov	arg02, fp
30488     0C 94 06 F1 | 	add	arg02, #12
3048c     53 93 02 F6 | 	mov	arg01, local01
30490     E4 F0 BF FD | 	call	#_fatfs_cc_validate
30494     3D A9 0A F6 | 	mov	local02, result1 wz
30498     53 01 68 AC |  if_e	wrlong	#0, local01
3049c                 | LR__5140
3049c                 | ' 
3049c                 | ' 
3049c                 | ' 
3049c                 | ' 
3049c                 | ' 			fp->obj.fs = 0;
3049c                 | ' #line 4192 "ff.c"
3049c                 | ' 		}
3049c                 | ' 	}
3049c                 | ' 	return res;
3049c     54 7B 02 F6 | 	mov	result1, local02
304a0     E7 F0 03 F6 | 	mov	ptra, fp
304a4     F2 00 A0 FD | 	call	#popregs_
304a8                 | _fatfs_cc_f_close_ret
304a8     2D 00 64 FD | 	ret
304ac                 | 
304ac                 | _fatfs_cc_f_lseek
304ac     0D CA 05 F6 | 	mov	COUNT_, #13
304b0     E8 00 A0 FD | 	call	#pushregs_
304b4     24 F0 07 F1 | 	add	ptra, #36
304b8     49 A7 02 F6 | 	mov	local01, arg01
304bc     4A A9 02 F6 | 	mov	local02, arg02
304c0     E7 94 02 F6 | 	mov	arg02, fp
304c4     10 94 06 F1 | 	add	arg02, #16
304c8     53 93 02 F6 | 	mov	arg01, local01
304cc     A8 F0 BF FD | 	call	#_fatfs_cc_validate
304d0     3D AB 0A F6 | 	mov	local03, result1 wz
304d4     11 A6 06 A1 |  if_e	add	local01, #17
304d8     53 AB C2 AA |  if_e	rdbyte	local03, local01
304dc     11 A6 86 A1 |  if_e	sub	local01, #17
304e0     00 AA 0E F2 | 	cmp	local03, #0 wz
304e4     55 7B 02 56 |  if_ne	mov	result1, local03
304e8     5C 03 90 5D |  if_ne	jmp	#LR__5166
304ec     0C A6 06 F1 | 	add	local01, #12
304f0     53 AD 02 FB | 	rdlong	local04, local01
304f4     0C A6 86 F1 | 	sub	local01, #12
304f8     56 A9 1A F2 | 	cmp	local02, local04 wcz
304fc     20 00 90 ED |  if_be	jmp	#LR__5150
30500     10 A6 06 F1 | 	add	local01, #16
30504     53 AF C2 FA | 	rdbyte	local05, local01
30508     10 A6 86 F1 | 	sub	local01, #16
3050c     57 B1 E2 F8 | 	getbyte	local06, local05, #0
30510     02 B0 CE F7 | 	test	local06, #2 wz
30514     0C A6 06 A1 |  if_e	add	local01, #12
30518     53 A9 02 AB |  if_e	rdlong	local02, local01
3051c     0C A6 86 A1 |  if_e	sub	local01, #12
30520                 | LR__5150
30520     14 A6 06 F1 | 	add	local01, #20
30524     53 B3 02 FB | 	rdlong	local07, local01
30528     00 B4 06 F6 | 	mov	local08, #0
3052c     53 01 68 FC | 	wrlong	#0, local01
30530     14 A6 86 F1 | 	sub	local01, #20
30534     01 A8 16 F2 | 	cmp	local02, #1 wc
30538     F4 01 90 CD |  if_b	jmp	#LR__5162
3053c     10 CE 05 F1 | 	add	fp, #16
30540     E7 B6 02 FB | 	rdlong	local09, fp
30544     10 CE 85 F1 | 	sub	fp, #16
30548     0A B6 06 F1 | 	add	local09, #10
3054c     5B AF E2 FA | 	rdword	local05, local09
30550     57 B9 32 F9 | 	getword	local10, local05, #0
30554     09 B8 66 F0 | 	shl	local10, #9
30558     5C BB 02 F6 | 	mov	local11, local10
3055c     01 B2 16 F2 | 	cmp	local07, #1 wc
30560     5C 00 90 CD |  if_b	jmp	#LR__5151
30564     54 B7 02 F6 | 	mov	local09, local02
30568     01 B6 86 F1 | 	sub	local09, #1
3056c     5D B7 12 FD | 	qdiv	local09, local11
30570     59 AF 02 F6 | 	mov	local05, local07
30574     01 AE 86 F1 | 	sub	local05, #1
30578     5D BD 02 F6 | 	mov	local12, local11
3057c     18 B6 62 FD | 	getqx	local09
30580     5E AF 12 FD | 	qdiv	local05, local12
30584     18 B8 62 FD | 	getqx	local10
30588     5C B7 12 F2 | 	cmp	local09, local10 wc
3058c     30 00 90 CD |  if_b	jmp	#LR__5151
30590     59 B1 02 F6 | 	mov	local06, local07
30594     01 B0 86 F1 | 	sub	local06, #1
30598     5D B7 02 F6 | 	mov	local09, local11
3059c     01 B6 86 F1 | 	sub	local09, #1
305a0     5B B1 22 F5 | 	andn	local06, local09
305a4     14 A6 06 F1 | 	add	local01, #20
305a8     53 B1 62 FC | 	wrlong	local06, local01
305ac     58 A9 82 F1 | 	sub	local02, local06
305b0     04 A6 06 F1 | 	add	local01, #4
305b4     53 BF 02 FB | 	rdlong	local13, local01
305b8     18 A6 86 F1 | 	sub	local01, #24
305bc     64 00 90 FD | 	jmp	#LR__5153
305c0                 | LR__5151
305c0     08 A6 06 F1 | 	add	local01, #8
305c4     53 BF 0A FB | 	rdlong	local13, local01 wz
305c8     08 A6 86 F1 | 	sub	local01, #8
305cc     48 00 90 5D |  if_ne	jmp	#LR__5152
305d0     53 93 02 F6 | 	mov	arg01, local01
305d4     00 94 06 F6 | 	mov	arg02, #0
305d8     30 CA BF FD | 	call	#_fatfs_cc_create_chain
305dc     3D BF 02 F6 | 	mov	local13, result1
305e0     01 BE 0E F2 | 	cmp	local13, #1 wz
305e4     11 A6 06 A1 |  if_e	add	local01, #17
305e8     53 05 48 AC |  if_e	wrbyte	#2, local01
305ec     02 7A 06 A6 |  if_e	mov	result1, #2
305f0     54 02 90 AD |  if_e	jmp	#LR__5166
305f4     FF FF 7F FF 
305f8     FF BF 0E F2 | 	cmp	local13, ##-1 wz
305fc     11 A6 06 A1 |  if_e	add	local01, #17
30600     53 03 48 AC |  if_e	wrbyte	#1, local01
30604     01 7A 06 A6 |  if_e	mov	result1, #1
30608     3C 02 90 AD |  if_e	jmp	#LR__5166
3060c     08 A6 06 F1 | 	add	local01, #8
30610     53 BF 62 FC | 	wrlong	local13, local01
30614     08 A6 86 F1 | 	sub	local01, #8
30618                 | LR__5152
30618     18 A6 06 F1 | 	add	local01, #24
3061c     53 BF 62 FC | 	wrlong	local13, local01
30620     18 A6 86 F1 | 	sub	local01, #24
30624                 | LR__5153
30624     00 BE 0E F2 | 	cmp	local13, #0 wz
30628     04 01 90 AD |  if_e	jmp	#LR__5161
3062c                 | ' 				while (ofs > bcs) {
3062c                 | LR__5154
3062c     5D A9 1A F2 | 	cmp	local02, local11 wcz
30630     B0 00 90 ED |  if_be	jmp	#LR__5159
30634     5D A9 82 F1 | 	sub	local02, local11
30638     14 A6 06 F1 | 	add	local01, #20
3063c     53 AD 02 FB | 	rdlong	local04, local01
30640     5D AD 02 F1 | 	add	local04, local11
30644     53 AD 62 FC | 	wrlong	local04, local01
30648     04 A6 86 F1 | 	sub	local01, #4
3064c     53 AD C2 FA | 	rdbyte	local04, local01
30650     10 A6 86 F1 | 	sub	local01, #16
30654     02 AC CE F7 | 	test	local04, #2 wz
30658     1C 00 90 AD |  if_e	jmp	#LR__5155
3065c     53 93 02 F6 | 	mov	arg01, local01
30660     5F 95 02 F6 | 	mov	arg02, local13
30664     A4 C9 BF FD | 	call	#_fatfs_cc_create_chain
30668     3D BF 0A F6 | 	mov	local13, result1 wz
3066c     00 A8 06 A6 |  if_e	mov	local02, #0
30670                 | ' 							ofs = 0; break;
30670     70 00 90 AD |  if_e	jmp	#LR__5159
30674     10 00 90 FD | 	jmp	#LR__5156
30678                 | LR__5155
30678     53 93 02 F6 | 	mov	arg01, local01
3067c     5F 95 02 F6 | 	mov	arg02, local13
30680     C0 C4 BF FD | 	call	#_fatfs_cc_get_fat
30684     3D BF 02 F6 | 	mov	local13, result1
30688                 | LR__5156
30688     FF FF 7F FF 
3068c     FF BF 0E F2 | 	cmp	local13, ##-1 wz
30690     11 A6 06 A1 |  if_e	add	local01, #17
30694     53 03 48 AC |  if_e	wrbyte	#1, local01
30698     01 7A 06 A6 |  if_e	mov	result1, #1
3069c     A8 01 90 AD |  if_e	jmp	#LR__5166
306a0     02 BE 16 F2 | 	cmp	local13, #2 wc
306a4     1C 00 90 CD |  if_b	jmp	#LR__5157
306a8     10 CE 05 F1 | 	add	fp, #16
306ac     E7 AC 02 FB | 	rdlong	local04, fp
306b0     10 CE 85 F1 | 	sub	fp, #16
306b4     18 AC 06 F1 | 	add	local04, #24
306b8     56 AF 02 FB | 	rdlong	local05, local04
306bc     57 BF 12 F2 | 	cmp	local13, local05 wc
306c0     10 00 90 CD |  if_b	jmp	#LR__5158
306c4                 | LR__5157
306c4     11 A6 06 F1 | 	add	local01, #17
306c8     53 05 48 FC | 	wrbyte	#2, local01
306cc     02 7A 06 F6 | 	mov	result1, #2
306d0     74 01 90 FD | 	jmp	#LR__5166
306d4                 | LR__5158
306d4     18 A6 06 F1 | 	add	local01, #24
306d8     53 BF 62 FC | 	wrlong	local13, local01
306dc     18 A6 86 F1 | 	sub	local01, #24
306e0     48 FF 9F FD | 	jmp	#LR__5154
306e4                 | LR__5159
306e4     14 A6 06 F1 | 	add	local01, #20
306e8     53 AD 02 FB | 	rdlong	local04, local01
306ec     54 AD 02 F1 | 	add	local04, local02
306f0     53 AD 62 FC | 	wrlong	local04, local01
306f4     14 A6 86 F1 | 	sub	local01, #20
306f8     FF A9 CE F7 | 	test	local02, #511 wz
306fc     30 00 90 AD |  if_e	jmp	#LR__5160
30700     10 CE 05 F1 | 	add	fp, #16
30704     E7 92 02 FB | 	rdlong	arg01, fp
30708     10 CE 85 F1 | 	sub	fp, #16
3070c     5F 95 02 F6 | 	mov	arg02, local13
30710     F0 C3 BF FD | 	call	#_fatfs_cc_clst2sect
30714     3D B5 0A F6 | 	mov	local08, result1 wz
30718     11 A6 06 A1 |  if_e	add	local01, #17
3071c     53 05 48 AC |  if_e	wrbyte	#2, local01
30720     02 7A 06 A6 |  if_e	mov	result1, #2
30724     20 01 90 AD |  if_e	jmp	#LR__5166
30728     09 A8 46 F0 | 	shr	local02, #9
3072c     54 B5 02 F1 | 	add	local08, local02
30730                 | LR__5160
30730                 | LR__5161
30730                 | LR__5162
30730     14 A6 06 F1 | 	add	local01, #20
30734     53 AD 02 FB | 	rdlong	local04, local01
30738     08 A6 86 F1 | 	sub	local01, #8
3073c     53 B1 02 FB | 	rdlong	local06, local01
30740     0C A6 86 F1 | 	sub	local01, #12
30744     58 AD 1A F2 | 	cmp	local04, local06 wcz
30748     24 00 90 ED |  if_be	jmp	#LR__5163
3074c     14 A6 06 F1 | 	add	local01, #20
30750     53 AD 02 FB | 	rdlong	local04, local01
30754     08 A6 86 F1 | 	sub	local01, #8
30758     53 AD 62 FC | 	wrlong	local04, local01
3075c     04 A6 06 F1 | 	add	local01, #4
30760     53 AD C2 FA | 	rdbyte	local04, local01
30764     40 AC 46 F5 | 	or	local04, #64
30768     53 AD 42 FC | 	wrbyte	local04, local01
3076c     10 A6 86 F1 | 	sub	local01, #16
30770                 | LR__5163
30770     14 A6 06 F1 | 	add	local01, #20
30774     53 AD 02 FB | 	rdlong	local04, local01
30778     14 A6 86 F1 | 	sub	local01, #20
3077c     FF AD CE F7 | 	test	local04, #511 wz
30780     1C A6 06 51 |  if_ne	add	local01, #28
30784     53 AF 02 5B |  if_ne	rdlong	local05, local01
30788     1C A6 86 51 |  if_ne	sub	local01, #28
3078c     57 B5 0A 52 |  if_ne	cmp	local08, local05 wz
30790     B0 00 90 AD |  if_e	jmp	#LR__5165
30794     10 A6 06 F1 | 	add	local01, #16
30798     53 AD C2 FA | 	rdbyte	local04, local01
3079c     10 A6 86 F1 | 	sub	local01, #16
307a0     80 AC CE F7 | 	test	local04, #128 wz
307a4     58 00 90 AD |  if_e	jmp	#LR__5164
307a8     10 CE 05 F1 | 	add	fp, #16
307ac     E7 B6 02 FB | 	rdlong	local09, fp
307b0     10 CE 85 F1 | 	sub	fp, #16
307b4     01 B6 06 F1 | 	add	local09, #1
307b8     5B 93 C2 FA | 	rdbyte	arg01, local09
307bc     28 A6 06 F1 | 	add	local01, #40
307c0     53 95 02 F6 | 	mov	arg02, local01
307c4     0C A6 86 F1 | 	sub	local01, #12
307c8     53 97 02 FB | 	rdlong	arg03, local01
307cc     1C A6 86 F1 | 	sub	local01, #28
307d0     01 98 06 F6 | 	mov	arg04, #1
307d4     68 BC BF FD | 	call	#_fatfs_cc_disk_write
307d8     00 7A 0E F2 | 	cmp	result1, #0 wz
307dc     11 A6 06 51 |  if_ne	add	local01, #17
307e0     53 03 48 5C |  if_ne	wrbyte	#1, local01
307e4     01 7A 06 56 |  if_ne	mov	result1, #1
307e8     5C 00 90 5D |  if_ne	jmp	#LR__5166
307ec     10 A6 06 F1 | 	add	local01, #16
307f0     53 AD C2 FA | 	rdbyte	local04, local01
307f4     7F AC 06 F5 | 	and	local04, #127
307f8     53 AD 42 FC | 	wrbyte	local04, local01
307fc     10 A6 86 F1 | 	sub	local01, #16
30800                 | LR__5164
30800     10 CE 05 F1 | 	add	fp, #16
30804     E7 B6 02 FB | 	rdlong	local09, fp
30808     10 CE 85 F1 | 	sub	fp, #16
3080c     01 B6 06 F1 | 	add	local09, #1
30810     5B 93 C2 FA | 	rdbyte	arg01, local09
30814     53 95 02 F6 | 	mov	arg02, local01
30818     28 94 06 F1 | 	add	arg02, #40
3081c     5A 97 02 F6 | 	mov	arg03, local08
30820     01 98 06 F6 | 	mov	arg04, #1
30824     DC BA BF FD | 	call	#_fatfs_cc_disk_read
30828     00 7A 0E F2 | 	cmp	result1, #0 wz
3082c     11 A6 06 51 |  if_ne	add	local01, #17
30830     53 03 48 5C |  if_ne	wrbyte	#1, local01
30834     01 7A 06 56 |  if_ne	mov	result1, #1
30838     0C 00 90 5D |  if_ne	jmp	#LR__5166
3083c     1C A6 06 F1 | 	add	local01, #28
30840     53 B5 62 FC | 	wrlong	local08, local01
30844                 | LR__5165
30844                 | ' 
30844                 | ' 			fp->sect = nsect;
30844                 | ' 		}
30844                 | ' 	}
30844                 | ' 
30844                 | ' 	return res ;
30844     55 7B 02 F6 | 	mov	result1, local03
30848                 | LR__5166
30848     E7 F0 03 F6 | 	mov	ptra, fp
3084c     F2 00 A0 FD | 	call	#popregs_
30850                 | _fatfs_cc_f_lseek_ret
30850     2D 00 64 FD | 	ret
30854                 | 
30854                 | _fatfs_cc_f_opendir
30854     02 CA 05 F6 | 	mov	COUNT_, #2
30858     E8 00 A0 FD | 	call	#pushregs_
3085c     14 F0 07 F1 | 	add	ptra, #20
30860     49 A7 0A F6 | 	mov	local01, arg01 wz
30864     08 CE 05 F1 | 	add	fp, #8
30868     E7 94 62 FC | 	wrlong	arg02, fp
3086c     08 CE 85 F1 | 	sub	fp, #8
30870     09 7A 06 A6 |  if_e	mov	result1, #9
30874     EC 00 90 AD |  if_e	jmp	#LR__5176
30878     08 CE 05 F1 | 	add	fp, #8
3087c     E7 92 02 F6 | 	mov	arg01, fp
30880     08 CE 05 F1 | 	add	fp, #8
30884     E7 94 02 F6 | 	mov	arg02, fp
30888     10 CE 85 F1 | 	sub	fp, #16
3088c     00 96 06 F6 | 	mov	arg03, #0
30890     B4 E7 BF FD | 	call	#_fatfs_cc_mount_volume
30894     3D A9 0A F6 | 	mov	local02, result1 wz
30898     BC 00 90 5D |  if_ne	jmp	#LR__5175
3089c     10 CE 05 F1 | 	add	fp, #16
308a0     E7 A8 02 FB | 	rdlong	local02, fp
308a4     53 A9 62 FC | 	wrlong	local02, local01
308a8     08 CE 85 F1 | 	sub	fp, #8
308ac     E7 94 02 FB | 	rdlong	arg02, fp
308b0     08 CE 85 F1 | 	sub	fp, #8
308b4     53 93 02 F6 | 	mov	arg01, local01
308b8     F0 E2 BF FD | 	call	#_fatfs_cc_follow_path
308bc     3D A9 0A F6 | 	mov	local02, result1 wz
308c0     8C 00 90 5D |  if_ne	jmp	#LR__5174
308c4     2B A6 06 F1 | 	add	local01, #43
308c8     53 97 C2 FA | 	rdbyte	arg03, local01
308cc     2B A6 86 F1 | 	sub	local01, #43
308d0     80 96 CE F7 | 	test	arg03, #128 wz
308d4     40 00 90 5D |  if_ne	jmp	#LR__5172
308d8     06 A6 06 F1 | 	add	local01, #6
308dc     53 97 C2 FA | 	rdbyte	arg03, local01
308e0     06 A6 86 F1 | 	sub	local01, #6
308e4     10 96 CE F7 | 	test	arg03, #16 wz
308e8     28 00 90 AD |  if_e	jmp	#LR__5170
308ec     10 CE 05 F1 | 	add	fp, #16
308f0     E7 92 02 FB | 	rdlong	arg01, fp
308f4     10 CE 85 F1 | 	sub	fp, #16
308f8     1C A6 06 F1 | 	add	local01, #28
308fc     53 95 02 FB | 	rdlong	arg02, local01
30900     C0 CD BF FD | 	call	#_fatfs_cc_ld_clust
30904     14 A6 86 F1 | 	sub	local01, #20
30908     53 7B 62 FC | 	wrlong	result1, local01
3090c     08 A6 86 F1 | 	sub	local01, #8
30910     04 00 90 FD | 	jmp	#LR__5171
30914                 | LR__5170
30914     05 A8 06 F6 | 	mov	local02, #5
30918                 | LR__5171
30918                 | LR__5172
30918     00 A8 0E F2 | 	cmp	local02, #0 wz
3091c     30 00 90 5D |  if_ne	jmp	#LR__5173
30920     10 CE 05 F1 | 	add	fp, #16
30924     E7 A8 02 FB | 	rdlong	local02, fp
30928     10 CE 85 F1 | 	sub	fp, #16
3092c     06 A8 06 F1 | 	add	local02, #6
30930     54 A9 E2 FA | 	rdword	local02, local02
30934     04 A6 06 F1 | 	add	local01, #4
30938     53 A9 52 FC | 	wrword	local02, local01
3093c     04 A6 86 F1 | 	sub	local01, #4
30940     53 93 02 F6 | 	mov	arg01, local01
30944     00 94 06 F6 | 	mov	arg02, #0
30948     A4 C9 BF FD | 	call	#_fatfs_cc_dir_sdi
3094c     3D A9 02 F6 | 	mov	local02, result1
30950                 | LR__5173
30950                 | LR__5174
30950     04 A8 0E F2 | 	cmp	local02, #4 wz
30954     05 A8 06 A6 |  if_e	mov	local02, #5
30958                 | LR__5175
30958     00 A8 0E F2 | 	cmp	local02, #0 wz
3095c     53 01 68 5C |  if_ne	wrlong	#0, local01
30960                 | ' 
30960                 | ' 	return res ;
30960     54 7B 02 F6 | 	mov	result1, local02
30964                 | LR__5176
30964     E7 F0 03 F6 | 	mov	ptra, fp
30968     F2 00 A0 FD | 	call	#popregs_
3096c                 | _fatfs_cc_f_opendir_ret
3096c     2D 00 64 FD | 	ret
30970                 | 
30970                 | _fatfs_cc_f_closedir
30970     01 CA 05 F6 | 	mov	COUNT_, #1
30974     E8 00 A0 FD | 	call	#pushregs_
30978     10 F0 07 F1 | 	add	ptra, #16
3097c     49 A7 02 F6 | 	mov	local01, arg01
30980     E7 94 02 F6 | 	mov	arg02, fp
30984     0C 94 06 F1 | 	add	arg02, #12
30988     53 93 02 F6 | 	mov	arg01, local01
3098c     E8 EB BF FD | 	call	#_fatfs_cc_validate
30990     00 7A 4E F2 | 	cmps	result1, #0 wz
30994     53 01 68 AC |  if_e	wrlong	#0, local01
30998                 | ' 
30998                 | ' 
30998                 | ' 
30998                 | ' 
30998                 | ' 		dp->obj.fs = 0;
30998                 | ' #line 4633 "ff.c"
30998                 | ' 	}
30998                 | ' 	return res;
30998     E7 F0 03 F6 | 	mov	ptra, fp
3099c     F2 00 A0 FD | 	call	#popregs_
309a0                 | _fatfs_cc_f_closedir_ret
309a0     2D 00 64 FD | 	ret
309a4                 | 
309a4                 | _fatfs_cc_f_readdir
309a4     03 CA 05 F6 | 	mov	COUNT_, #3
309a8     E8 00 A0 FD | 	call	#pushregs_
309ac     14 F0 07 F1 | 	add	ptra, #20
309b0     49 A7 02 F6 | 	mov	local01, arg01
309b4     4A A9 02 F6 | 	mov	local02, arg02
309b8     E7 94 02 F6 | 	mov	arg02, fp
309bc     10 94 06 F1 | 	add	arg02, #16
309c0     53 93 02 F6 | 	mov	arg01, local01
309c4     B0 EB BF FD | 	call	#_fatfs_cc_validate
309c8     3D AB 0A F6 | 	mov	local03, result1 wz
309cc     60 00 90 5D |  if_ne	jmp	#LR__5183
309d0     00 A8 0E F2 | 	cmp	local02, #0 wz
309d4     14 00 90 5D |  if_ne	jmp	#LR__5180
309d8     53 93 02 F6 | 	mov	arg01, local01
309dc     00 94 06 F6 | 	mov	arg02, #0
309e0     0C C9 BF FD | 	call	#_fatfs_cc_dir_sdi
309e4     3D AB 02 F6 | 	mov	local03, result1
309e8     44 00 90 FD | 	jmp	#LR__5182
309ec                 | LR__5180
309ec     53 93 02 F6 | 	mov	arg01, local01
309f0     00 94 06 F6 | 	mov	arg02, #0
309f4     98 D1 BF FD | 	call	#_fatfs_cc_dir_read
309f8     3D AB 02 F6 | 	mov	local03, result1
309fc     04 AA 0E F2 | 	cmp	local03, #4 wz
30a00     00 AA 06 A6 |  if_e	mov	local03, #0
30a04     00 AA 0E F2 | 	cmp	local03, #0 wz
30a08     24 00 90 5D |  if_ne	jmp	#LR__5181
30a0c     53 93 02 F6 | 	mov	arg01, local01
30a10     54 95 02 F6 | 	mov	arg02, local02
30a14     E4 D8 BF FD | 	call	#_fatfs_cc_get_fileinfo
30a18     53 93 02 F6 | 	mov	arg01, local01
30a1c     00 94 06 F6 | 	mov	arg02, #0
30a20     34 CA BF FD | 	call	#_fatfs_cc_dir_next
30a24     3D AB 02 F6 | 	mov	local03, result1
30a28     04 AA 0E F2 | 	cmp	local03, #4 wz
30a2c     00 AA 06 A6 |  if_e	mov	local03, #0
30a30                 | LR__5181
30a30                 | LR__5182
30a30                 | LR__5183
30a30                 | ' 			}
30a30                 | ' 			;
30a30                 | ' 		}
30a30                 | ' 	}
30a30                 | ' 	return res ;
30a30     55 7B 02 F6 | 	mov	result1, local03
30a34     E7 F0 03 F6 | 	mov	ptra, fp
30a38     F2 00 A0 FD | 	call	#popregs_
30a3c                 | _fatfs_cc_f_readdir_ret
30a3c     2D 00 64 FD | 	ret
30a40                 | 
30a40                 | _fatfs_cc_f_stat
30a40     02 CA 05 F6 | 	mov	COUNT_, #2
30a44     E8 00 A0 FD | 	call	#pushregs_
30a48     40 F0 07 F1 | 	add	ptra, #64
30a4c     04 CE 05 F1 | 	add	fp, #4
30a50     E7 92 62 FC | 	wrlong	arg01, fp
30a54     4A A7 02 F6 | 	mov	local01, arg02
30a58     E7 92 02 F6 | 	mov	arg01, fp
30a5c     0C CE 05 F1 | 	add	fp, #12
30a60     E7 94 02 F6 | 	mov	arg02, fp
30a64     10 CE 85 F1 | 	sub	fp, #16
30a68     00 96 06 F6 | 	mov	arg03, #0
30a6c     D8 E5 BF FD | 	call	#_fatfs_cc_mount_volume
30a70     3D A9 0A F6 | 	mov	local02, result1 wz
30a74     4C 00 90 5D |  if_ne	jmp	#LR__5192
30a78     10 CE 05 F1 | 	add	fp, #16
30a7c     E7 92 02 F6 | 	mov	arg01, fp
30a80     0C CE 85 F1 | 	sub	fp, #12
30a84     E7 94 02 FB | 	rdlong	arg02, fp
30a88     04 CE 85 F1 | 	sub	fp, #4
30a8c     1C E1 BF FD | 	call	#_fatfs_cc_follow_path
30a90     3D A9 0A F6 | 	mov	local02, result1 wz
30a94     2C 00 90 5D |  if_ne	jmp	#LR__5191
30a98     3B CE 05 F1 | 	add	fp, #59
30a9c     E7 96 C2 FA | 	rdbyte	arg03, fp
30aa0     3B CE 85 F1 | 	sub	fp, #59
30aa4     80 96 CE F7 | 	test	arg03, #128 wz
30aa8     06 A8 06 56 |  if_ne	mov	local02, #6
30aac     14 00 90 5D |  if_ne	jmp	#LR__5190
30ab0     00 A6 0E F2 | 	cmp	local01, #0 wz
30ab4     E7 92 02 56 |  if_ne	mov	arg01, fp
30ab8     10 92 06 51 |  if_ne	add	arg01, #16
30abc     53 95 02 56 |  if_ne	mov	arg02, local01
30ac0     38 D8 BF 5D |  if_ne	call	#_fatfs_cc_get_fileinfo
30ac4                 | LR__5190
30ac4                 | LR__5191
30ac4                 | LR__5192
30ac4                 | ' 			}
30ac4                 | ' 		}
30ac4                 | ' 		;
30ac4                 | ' 	}
30ac4                 | ' 
30ac4                 | ' 	return res ;
30ac4     54 7B 02 F6 | 	mov	result1, local02
30ac8     E7 F0 03 F6 | 	mov	ptra, fp
30acc     F2 00 A0 FD | 	call	#popregs_
30ad0                 | _fatfs_cc_f_stat_ret
30ad0     2D 00 64 FD | 	ret
30ad4                 | 
30ad4                 | _fatfs_cc_f_unlink
30ad4     02 CA 05 F6 | 	mov	COUNT_, #2
30ad8     E8 00 A0 FD | 	call	#pushregs_
30adc     74 F0 07 F1 | 	add	ptra, #116
30ae0     04 CE 05 F1 | 	add	fp, #4
30ae4     E7 92 62 FC | 	wrlong	arg01, fp
30ae8     00 A6 06 F6 | 	mov	local01, #0
30aec     E7 92 02 F6 | 	mov	arg01, fp
30af0     6C CE 05 F1 | 	add	fp, #108
30af4     E7 94 02 F6 | 	mov	arg02, fp
30af8     70 CE 85 F1 | 	sub	fp, #112
30afc     02 96 06 F6 | 	mov	arg03, #2
30b00     44 E5 BF FD | 	call	#_fatfs_cc_mount_volume
30b04     3D A9 0A F6 | 	mov	local02, result1 wz
30b08     3C 01 90 5D |  if_ne	jmp	#LR__5208
30b0c     70 CE 05 F1 | 	add	fp, #112
30b10     E7 A8 02 FB | 	rdlong	local02, fp
30b14     64 CE 85 F1 | 	sub	fp, #100
30b18     E7 A8 62 FC | 	wrlong	local02, fp
30b1c     E7 92 02 F6 | 	mov	arg01, fp
30b20     08 CE 85 F1 | 	sub	fp, #8
30b24     E7 94 02 FB | 	rdlong	arg02, fp
30b28     04 CE 85 F1 | 	sub	fp, #4
30b2c     7C E0 BF FD | 	call	#_fatfs_cc_follow_path
30b30     3D A9 0A F6 | 	mov	local02, result1 wz
30b34     10 01 90 5D |  if_ne	jmp	#LR__5207
30b38     37 CE 05 F1 | 	add	fp, #55
30b3c     E7 7A C2 FA | 	rdbyte	result1, fp
30b40     37 CE 85 F1 | 	sub	fp, #55
30b44     80 7A CE F7 | 	test	result1, #128 wz
30b48     06 A8 06 56 |  if_ne	mov	local02, #6
30b4c     14 00 90 5D |  if_ne	jmp	#LR__5200
30b50     12 CE 05 F1 | 	add	fp, #18
30b54     E7 7A C2 FA | 	rdbyte	result1, fp
30b58     12 CE 85 F1 | 	sub	fp, #18
30b5c     01 7A CE F7 | 	test	result1, #1 wz
30b60     07 A8 06 56 |  if_ne	mov	local02, #7
30b64                 | LR__5200
30b64     00 A8 0E F2 | 	cmp	local02, #0 wz
30b68     84 00 90 5D |  if_ne	jmp	#LR__5203
30b6c     70 CE 05 F1 | 	add	fp, #112
30b70     E7 92 02 FB | 	rdlong	arg01, fp
30b74     48 CE 85 F1 | 	sub	fp, #72
30b78     E7 94 02 FB | 	rdlong	arg02, fp
30b7c     28 CE 85 F1 | 	sub	fp, #40
30b80     40 CB BF FD | 	call	#_fatfs_cc_ld_clust
30b84     3D A7 02 F6 | 	mov	local01, result1
30b88     12 CE 05 F1 | 	add	fp, #18
30b8c     E7 7A C2 FA | 	rdbyte	result1, fp
30b90     12 CE 85 F1 | 	sub	fp, #18
30b94     10 7A CE F7 | 	test	result1, #16 wz
30b98     54 00 90 AD |  if_e	jmp	#LR__5202
30b9c     70 CE 05 F1 | 	add	fp, #112
30ba0     E7 A8 02 FB | 	rdlong	local02, fp
30ba4     34 CE 85 F1 | 	sub	fp, #52
30ba8     E7 A8 62 FC | 	wrlong	local02, fp
30bac     08 CE 05 F1 | 	add	fp, #8
30bb0     E7 A6 62 FC | 	wrlong	local01, fp
30bb4     08 CE 85 F1 | 	sub	fp, #8
30bb8     E7 92 02 F6 | 	mov	arg01, fp
30bbc     3C CE 85 F1 | 	sub	fp, #60
30bc0     00 94 06 F6 | 	mov	arg02, #0
30bc4     28 C7 BF FD | 	call	#_fatfs_cc_dir_sdi
30bc8     3D A9 0A F6 | 	mov	local02, result1 wz
30bcc     20 00 90 5D |  if_ne	jmp	#LR__5201
30bd0     E7 92 02 F6 | 	mov	arg01, fp
30bd4     3C 92 06 F1 | 	add	arg01, #60
30bd8     00 94 06 F6 | 	mov	arg02, #0
30bdc     B0 CF BF FD | 	call	#_fatfs_cc_dir_read
30be0     3D A9 0A F6 | 	mov	local02, result1 wz
30be4     07 A8 06 A6 |  if_e	mov	local02, #7
30be8     04 A8 0E F2 | 	cmp	local02, #4 wz
30bec     00 A8 06 A6 |  if_e	mov	local02, #0
30bf0                 | LR__5201
30bf0                 | LR__5202
30bf0                 | LR__5203
30bf0     00 A8 0E F2 | 	cmp	local02, #0 wz
30bf4     50 00 90 5D |  if_ne	jmp	#LR__5206
30bf8     E7 92 02 F6 | 	mov	arg01, fp
30bfc     0C 92 06 F1 | 	add	arg01, #12
30c00     30 D6 BF FD | 	call	#_fatfs_cc_dir_remove
30c04     3D A9 0A F6 | 	mov	local02, result1 wz
30c08     20 00 90 5D |  if_ne	jmp	#LR__5204
30c0c     00 A6 0E F2 | 	cmp	local01, #0 wz
30c10     18 00 90 AD |  if_e	jmp	#LR__5204
30c14     E7 92 02 F6 | 	mov	arg01, fp
30c18     0C 92 06 F1 | 	add	arg01, #12
30c1c     53 95 02 F6 | 	mov	arg02, local01
30c20     00 96 06 F6 | 	mov	arg03, #0
30c24     D0 C2 BF FD | 	call	#_fatfs_cc_remove_chain
30c28     3D A9 02 F6 | 	mov	local02, result1
30c2c                 | LR__5204
30c2c     00 A8 0E F2 | 	cmp	local02, #0 wz
30c30     14 00 90 5D |  if_ne	jmp	#LR__5205
30c34     70 CE 05 F1 | 	add	fp, #112
30c38     E7 92 02 FB | 	rdlong	arg01, fp
30c3c     70 CE 85 F1 | 	sub	fp, #112
30c40     C0 BD BF FD | 	call	#_fatfs_cc_sync_fs
30c44     3D A9 02 F6 | 	mov	local02, result1
30c48                 | LR__5205
30c48                 | LR__5206
30c48                 | LR__5207
30c48                 | LR__5208
30c48                 | ' 			}
30c48                 | ' 		}
30c48                 | ' 		;
30c48                 | ' 	}
30c48                 | ' 
30c48                 | ' 	return res ;
30c48     54 7B 02 F6 | 	mov	result1, local02
30c4c     E7 F0 03 F6 | 	mov	ptra, fp
30c50     F2 00 A0 FD | 	call	#popregs_
30c54                 | _fatfs_cc_f_unlink_ret
30c54     2D 00 64 FD | 	ret
30c58                 | 
30c58                 | _fatfs_cc_f_mkdir
30c58     03 CA 05 F6 | 	mov	COUNT_, #3
30c5c     E8 00 A0 FD | 	call	#pushregs_
30c60     5C F0 07 F1 | 	add	ptra, #92
30c64     04 CE 05 F1 | 	add	fp, #4
30c68     E7 92 62 FC | 	wrlong	arg01, fp
30c6c     E7 92 02 F6 | 	mov	arg01, fp
30c70     48 CE 05 F1 | 	add	fp, #72
30c74     E7 94 02 F6 | 	mov	arg02, fp
30c78     4C CE 85 F1 | 	sub	fp, #76
30c7c     02 96 06 F6 | 	mov	arg03, #2
30c80     C4 E3 BF FD | 	call	#_fatfs_cc_mount_volume
30c84     3D A7 0A F6 | 	mov	local01, result1 wz
30c88     FC 01 90 5D |  if_ne	jmp	#LR__5215
30c8c     4C CE 05 F1 | 	add	fp, #76
30c90     E7 A6 02 FB | 	rdlong	local01, fp
30c94     40 CE 85 F1 | 	sub	fp, #64
30c98     E7 A6 62 FC | 	wrlong	local01, fp
30c9c     E7 92 02 F6 | 	mov	arg01, fp
30ca0     08 CE 85 F1 | 	sub	fp, #8
30ca4     E7 94 02 FB | 	rdlong	arg02, fp
30ca8     04 CE 85 F1 | 	sub	fp, #4
30cac     FC DE BF FD | 	call	#_fatfs_cc_follow_path
30cb0     3D A7 0A F6 | 	mov	local01, result1 wz
30cb4     08 A6 06 A6 |  if_e	mov	local01, #8
30cb8     04 A6 0E F2 | 	cmp	local01, #4 wz
30cbc     C8 01 90 5D |  if_ne	jmp	#LR__5214
30cc0     4C CE 05 F1 | 	add	fp, #76
30cc4     E7 A6 02 FB | 	rdlong	local01, fp
30cc8     10 CE 85 F1 | 	sub	fp, #16
30ccc     E7 A6 62 FC | 	wrlong	local01, fp
30cd0     E7 92 02 F6 | 	mov	arg01, fp
30cd4     3C CE 85 F1 | 	sub	fp, #60
30cd8     00 94 06 F6 | 	mov	arg02, #0
30cdc     2C C3 BF FD | 	call	#_fatfs_cc_create_chain
30ce0     3D A9 0A F6 | 	mov	local02, result1 wz
30ce4     00 A6 06 F6 | 	mov	local01, #0
30ce8     07 A6 06 A6 |  if_e	mov	local01, #7
30cec     01 A8 0E F2 | 	cmp	local02, #1 wz
30cf0     02 A6 06 A6 |  if_e	mov	local01, #2
30cf4     FF FF 7F FF 
30cf8     FF A9 0E F2 | 	cmp	local02, ##-1 wz
30cfc     01 A6 06 A6 |  if_e	mov	local01, #1
30d00     8C 06 B0 FD | 	call	#_fatfs_cc__get_fattime
30d04     3D AB 02 F6 | 	mov	local03, result1
30d08     00 A6 0E F2 | 	cmp	local01, #0 wz
30d0c     EC 00 90 5D |  if_ne	jmp	#LR__5211
30d10     4C CE 05 F1 | 	add	fp, #76
30d14     E7 92 02 FB | 	rdlong	arg01, fp
30d18     4C CE 85 F1 | 	sub	fp, #76
30d1c     54 95 02 F6 | 	mov	arg02, local02
30d20     0C C5 BF FD | 	call	#_fatfs_cc_dir_clear
30d24     3D A7 0A F6 | 	mov	local01, result1 wz
30d28     D0 00 90 5D |  if_ne	jmp	#LR__5210
30d2c     4C CE 05 F1 | 	add	fp, #76
30d30     E7 92 02 FB | 	rdlong	arg01, fp
30d34     4C CE 85 F1 | 	sub	fp, #76
30d38     34 92 06 F1 | 	add	arg01, #52
30d3c     20 94 06 F6 | 	mov	arg02, #32
30d40     0B 96 06 F6 | 	mov	arg03, #11
30d44     D8 00 A0 FD | 	call	#\builtin_bytefill_
30d48     4C CE 05 F1 | 	add	fp, #76
30d4c     E7 A6 02 FB | 	rdlong	local01, fp
30d50     34 A6 06 F1 | 	add	local01, #52
30d54     53 5D 48 FC | 	wrbyte	#46, local01
30d58     E7 A6 02 FB | 	rdlong	local01, fp
30d5c     3F A6 06 F1 | 	add	local01, #63
30d60     53 21 48 FC | 	wrbyte	#16, local01
30d64     E7 92 02 FB | 	rdlong	arg01, fp
30d68     4A 92 06 F1 | 	add	arg01, #74
30d6c     49 AB 62 FC | 	wrlong	local03, arg01
30d70     E7 94 02 FB | 	rdlong	arg02, fp
30d74     4A 93 02 F6 | 	mov	arg01, arg02
30d78     4C CE 85 F1 | 	sub	fp, #76
30d7c     34 94 06 F1 | 	add	arg02, #52
30d80     54 97 02 F6 | 	mov	arg03, local02
30d84     70 C9 BF FD | 	call	#_fatfs_cc_st_clust
30d88     4C CE 05 F1 | 	add	fp, #76
30d8c     E7 94 02 FB | 	rdlong	arg02, fp
30d90     4A 93 02 F6 | 	mov	arg01, arg02
30d94     54 92 06 F1 | 	add	arg01, #84
30d98     4C CE 85 F1 | 	sub	fp, #76
30d9c     34 94 06 F1 | 	add	arg02, #52
30da0     20 96 06 F6 | 	mov	arg03, #32
30da4     E4 3A BF FD | 	call	#__system____builtin_memmove
30da8     4C CE 05 F1 | 	add	fp, #76
30dac     E7 A6 02 FB | 	rdlong	local01, fp
30db0     55 A6 06 F1 | 	add	local01, #85
30db4     53 5D 48 FC | 	wrbyte	#46, local01
30db8     38 CE 85 F1 | 	sub	fp, #56
30dbc     E7 96 02 FB | 	rdlong	arg03, fp
30dc0     38 CE 05 F1 | 	add	fp, #56
30dc4     E7 94 02 FB | 	rdlong	arg02, fp
30dc8     4A 93 02 F6 | 	mov	arg01, arg02
30dcc     4C CE 85 F1 | 	sub	fp, #76
30dd0     54 94 06 F1 | 	add	arg02, #84
30dd4     20 C9 BF FD | 	call	#_fatfs_cc_st_clust
30dd8     4C CE 05 F1 | 	add	fp, #76
30ddc     E7 A6 02 FB | 	rdlong	local01, fp
30de0     4C CE 85 F1 | 	sub	fp, #76
30de4     03 A6 06 F1 | 	add	local01, #3
30de8     53 03 48 FC | 	wrbyte	#1, local01
30dec     E7 92 02 F6 | 	mov	arg01, fp
30df0     0C 92 06 F1 | 	add	arg01, #12
30df4     D8 D1 BF FD | 	call	#_fatfs_cc_dir_register
30df8     3D A7 02 F6 | 	mov	local01, result1
30dfc                 | LR__5210
30dfc                 | LR__5211
30dfc     00 A6 0E F2 | 	cmp	local01, #0 wz
30e00     70 00 90 5D |  if_ne	jmp	#LR__5212
30e04     28 CE 05 F1 | 	add	fp, #40
30e08     E7 92 02 FB | 	rdlong	arg01, fp
30e0c     16 92 06 F1 | 	add	arg01, #22
30e10     49 AB 62 FC | 	wrlong	local03, arg01
30e14     24 CE 05 F1 | 	add	fp, #36
30e18     E7 92 02 FB | 	rdlong	arg01, fp
30e1c     24 CE 85 F1 | 	sub	fp, #36
30e20     E7 94 02 FB | 	rdlong	arg02, fp
30e24     28 CE 85 F1 | 	sub	fp, #40
30e28     54 97 02 F6 | 	mov	arg03, local02
30e2c     C8 C8 BF FD | 	call	#_fatfs_cc_st_clust
30e30     28 CE 05 F1 | 	add	fp, #40
30e34     E7 AA 02 FB | 	rdlong	local03, fp
30e38     0B AA 06 F1 | 	add	local03, #11
30e3c     55 21 48 FC | 	wrbyte	#16, local03
30e40     24 CE 05 F1 | 	add	fp, #36
30e44     E7 AA 02 FB | 	rdlong	local03, fp
30e48     4C CE 85 F1 | 	sub	fp, #76
30e4c     03 AA 06 F1 | 	add	local03, #3
30e50     55 03 48 FC | 	wrbyte	#1, local03
30e54     00 A6 0E F2 | 	cmp	local01, #0 wz
30e58     2C 00 90 5D |  if_ne	jmp	#LR__5213
30e5c     4C CE 05 F1 | 	add	fp, #76
30e60     E7 92 02 FB | 	rdlong	arg01, fp
30e64     4C CE 85 F1 | 	sub	fp, #76
30e68     98 BB BF FD | 	call	#_fatfs_cc_sync_fs
30e6c     3D A7 02 F6 | 	mov	local01, result1
30e70     14 00 90 FD | 	jmp	#LR__5213
30e74                 | LR__5212
30e74     E7 92 02 F6 | 	mov	arg01, fp
30e78     3C 92 06 F1 | 	add	arg01, #60
30e7c     54 95 02 F6 | 	mov	arg02, local02
30e80     00 96 06 F6 | 	mov	arg03, #0
30e84     70 C0 BF FD | 	call	#_fatfs_cc_remove_chain
30e88                 | LR__5213
30e88                 | LR__5214
30e88                 | LR__5215
30e88                 | ' 				remove_chain(&sobj, dcl, 0);
30e88                 | ' 			}
30e88                 | ' 		}
30e88                 | ' 		;
30e88                 | ' 	}
30e88                 | ' 
30e88                 | ' 	return res ;
30e88     53 7B 02 F6 | 	mov	result1, local01
30e8c     E7 F0 03 F6 | 	mov	ptra, fp
30e90     F2 00 A0 FD | 	call	#popregs_
30e94                 | _fatfs_cc_f_mkdir_ret
30e94     2D 00 64 FD | 	ret
30e98                 | 
30e98                 | _fatfs_cc_f_rename
30e98     03 CA 05 F6 | 	mov	COUNT_, #3
30e9c     E8 00 A0 FD | 	call	#pushregs_
30ea0     9C F0 07 F1 | 	add	ptra, #156
30ea4     04 CE 05 F1 | 	add	fp, #4
30ea8     E7 92 62 FC | 	wrlong	arg01, fp
30eac     04 CE 05 F1 | 	add	fp, #4
30eb0     E7 94 62 FC | 	wrlong	arg02, fp
30eb4     E7 92 02 F6 | 	mov	arg01, fp
30eb8     08 CE 85 F1 | 	sub	fp, #8
30ebc     4C DE BF FD | 	call	#_fatfs_cc_get_ldnumber
30ec0     04 CE 05 F1 | 	add	fp, #4
30ec4     E7 92 02 F6 | 	mov	arg01, fp
30ec8     6C CE 05 F1 | 	add	fp, #108
30ecc     E7 94 02 F6 | 	mov	arg02, fp
30ed0     70 CE 85 F1 | 	sub	fp, #112
30ed4     02 96 06 F6 | 	mov	arg03, #2
30ed8     6C E1 BF FD | 	call	#_fatfs_cc_mount_volume
30edc     3D A7 0A F6 | 	mov	local01, result1 wz
30ee0     68 02 90 5D |  if_ne	jmp	#LR__5232
30ee4     70 CE 05 F1 | 	add	fp, #112
30ee8     E7 A8 02 FB | 	rdlong	local02, fp
30eec     60 CE 85 F1 | 	sub	fp, #96
30ef0     E7 A8 62 FC | 	wrlong	local02, fp
30ef4     E7 92 02 F6 | 	mov	arg01, fp
30ef8     0C CE 85 F1 | 	sub	fp, #12
30efc     E7 94 02 FB | 	rdlong	arg02, fp
30f00     04 CE 85 F1 | 	sub	fp, #4
30f04     A4 DC BF FD | 	call	#_fatfs_cc_follow_path
30f08     3D A7 0A F6 | 	mov	local01, result1 wz
30f0c     14 00 90 5D |  if_ne	jmp	#LR__5220
30f10     3B CE 05 F1 | 	add	fp, #59
30f14     E7 A8 C2 FA | 	rdbyte	local02, fp
30f18     3B CE 85 F1 | 	sub	fp, #59
30f1c     A0 A8 CE F7 | 	test	local02, #160 wz
30f20     06 A6 06 56 |  if_ne	mov	local01, #6
30f24                 | LR__5220
30f24     00 A6 0E F2 | 	cmp	local01, #0 wz
30f28     20 02 90 5D |  if_ne	jmp	#LR__5231
30f2c     74 CE 05 F1 | 	add	fp, #116
30f30     E7 92 02 F6 | 	mov	arg01, fp
30f34     48 CE 85 F1 | 	sub	fp, #72
30f38     E7 94 02 FB | 	rdlong	arg02, fp
30f3c     2C CE 85 F1 | 	sub	fp, #44
30f40     20 96 06 F6 | 	mov	arg03, #32
30f44     44 39 BF FD | 	call	#__system____builtin_memmove
30f48     40 CE 05 F1 | 	add	fp, #64
30f4c     E7 92 02 F6 | 	mov	arg01, fp
30f50     30 CE 85 F1 | 	sub	fp, #48
30f54     E7 94 02 F6 | 	mov	arg02, fp
30f58     10 CE 85 F1 | 	sub	fp, #16
30f5c     30 96 06 F6 | 	mov	arg03, #48
30f60     28 39 BF FD | 	call	#__system____builtin_memmove
30f64     40 CE 05 F1 | 	add	fp, #64
30f68     E7 92 02 F6 | 	mov	arg01, fp
30f6c     38 CE 85 F1 | 	sub	fp, #56
30f70     E7 94 02 FB | 	rdlong	arg02, fp
30f74     08 CE 85 F1 | 	sub	fp, #8
30f78     30 DC BF FD | 	call	#_fatfs_cc_follow_path
30f7c     3D A7 0A F6 | 	mov	local01, result1 wz
30f80     44 00 90 5D |  if_ne	jmp	#LR__5223
30f84     48 CE 05 F1 | 	add	fp, #72
30f88     E7 A6 02 FB | 	rdlong	local01, fp
30f8c     30 CE 85 F1 | 	sub	fp, #48
30f90     E7 7A 02 FB | 	rdlong	result1, fp
30f94     18 CE 85 F1 | 	sub	fp, #24
30f98     3D A7 0A F2 | 	cmp	local01, result1 wz
30f9c     20 00 90 5D |  if_ne	jmp	#LR__5221
30fa0     50 CE 05 F1 | 	add	fp, #80
30fa4     E7 A6 02 FB | 	rdlong	local01, fp
30fa8     30 CE 85 F1 | 	sub	fp, #48
30fac     E7 7A 02 FB | 	rdlong	result1, fp
30fb0     20 CE 85 F1 | 	sub	fp, #32
30fb4     3D A7 0A F2 | 	cmp	local01, result1 wz
30fb8     04 A8 06 A6 |  if_e	mov	local02, #4
30fbc     04 00 90 AD |  if_e	jmp	#LR__5222
30fc0                 | LR__5221
30fc0     08 A8 06 F6 | 	mov	local02, #8
30fc4                 | LR__5222
30fc4     54 A7 02 F6 | 	mov	local01, local02
30fc8                 | LR__5223
30fc8     04 A6 0E F2 | 	cmp	local01, #4 wz
30fcc     4C 01 90 5D |  if_ne	jmp	#LR__5228
30fd0     E7 92 02 F6 | 	mov	arg01, fp
30fd4     40 92 06 F1 | 	add	arg01, #64
30fd8     F4 CF BF FD | 	call	#_fatfs_cc_dir_register
30fdc     3D A7 0A F6 | 	mov	local01, result1 wz
30fe0     38 01 90 5D |  if_ne	jmp	#LR__5227
30fe4     5C CE 05 F1 | 	add	fp, #92
30fe8     E7 AA 02 FB | 	rdlong	local03, fp
30fec     55 93 02 F6 | 	mov	arg01, local03
30ff0     0D 92 06 F1 | 	add	arg01, #13
30ff4     18 CE 05 F1 | 	add	fp, #24
30ff8     E7 94 02 F6 | 	mov	arg02, fp
30ffc     74 CE 85 F1 | 	sub	fp, #116
31000     0D 94 06 F1 | 	add	arg02, #13
31004     13 96 06 F6 | 	mov	arg03, #19
31008     80 38 BF FD | 	call	#__system____builtin_memmove
3100c     7F CE 05 F1 | 	add	fp, #127
31010     E7 A8 C2 FA | 	rdbyte	local02, fp
31014     0B AA 06 F1 | 	add	local03, #11
31018     55 A9 42 FC | 	wrbyte	local02, local03
3101c     54 A9 E2 F8 | 	getbyte	local02, local02, #0
31020     0B AA 86 F1 | 	sub	local03, #11
31024     10 A8 CE F7 | 	test	local02, #16 wz
31028     0B AA 06 A1 |  if_e	add	local03, #11
3102c     55 A9 C2 AA |  if_e	rdbyte	local02, local03
31030     20 A8 46 A5 |  if_e	or	local02, #32
31034     55 A9 42 AC |  if_e	wrbyte	local02, local03
31038     0B AA 86 A1 |  if_e	sub	local03, #11
3103c     0F CE 85 F1 | 	sub	fp, #15
31040     E7 A8 02 FB | 	rdlong	local02, fp
31044     70 CE 85 F1 | 	sub	fp, #112
31048     03 A8 06 F1 | 	add	local02, #3
3104c     54 03 48 FC | 	wrbyte	#1, local02
31050     0B AA 06 F1 | 	add	local03, #11
31054     55 A9 C2 FA | 	rdbyte	local02, local03
31058     0B AA 86 F1 | 	sub	local03, #11
3105c     10 A8 CE F7 | 	test	local02, #16 wz
31060     B8 00 90 AD |  if_e	jmp	#LR__5226
31064     18 CE 05 F1 | 	add	fp, #24
31068     E7 A8 02 FB | 	rdlong	local02, fp
3106c     30 CE 05 F1 | 	add	fp, #48
31070     E7 96 02 FB | 	rdlong	arg03, fp
31074     48 CE 85 F1 | 	sub	fp, #72
31078     4B A9 0A F2 | 	cmp	local02, arg03 wz
3107c     9C 00 90 AD |  if_e	jmp	#LR__5226
31080     70 CE 05 F1 | 	add	fp, #112
31084     E7 92 02 FB | 	rdlong	arg01, fp
31088     49 A9 02 F6 | 	mov	local02, arg01
3108c     70 CE 85 F1 | 	sub	fp, #112
31090     55 95 02 F6 | 	mov	arg02, local03
31094     2C C6 BF FD | 	call	#_fatfs_cc_ld_clust
31098     3D 95 02 F6 | 	mov	arg02, result1
3109c     54 93 02 F6 | 	mov	arg01, local02
310a0     60 BA BF FD | 	call	#_fatfs_cc_clst2sect
310a4     3D AB 0A F6 | 	mov	local03, result1 wz
310a8     02 A6 06 A6 |  if_e	mov	local01, #2
310ac     6C 00 90 AD |  if_e	jmp	#LR__5225
310b0     70 CE 05 F1 | 	add	fp, #112
310b4     E7 92 02 FB | 	rdlong	arg01, fp
310b8     70 CE 85 F1 | 	sub	fp, #112
310bc     55 95 02 F6 | 	mov	arg02, local03
310c0     C8 B8 BF FD | 	call	#_fatfs_cc_move_window
310c4     3D A7 0A F6 | 	mov	local01, result1 wz
310c8     70 CE 05 F1 | 	add	fp, #112
310cc     E7 AA 02 FB | 	rdlong	local03, fp
310d0     70 CE 85 F1 | 	sub	fp, #112
310d4     54 AA 06 F1 | 	add	local03, #84
310d8     01 AA 06 A1 |  if_e	add	local03, #1
310dc     55 A9 C2 AA |  if_e	rdbyte	local02, local03
310e0     01 AA 86 A1 |  if_e	sub	local03, #1
310e4     2E A8 0E A2 |  if_e	cmp	local02, #46 wz
310e8     30 00 90 5D |  if_ne	jmp	#LR__5224
310ec     70 CE 05 F1 | 	add	fp, #112
310f0     E7 92 02 FB | 	rdlong	arg01, fp
310f4     28 CE 85 F1 | 	sub	fp, #40
310f8     E7 96 02 FB | 	rdlong	arg03, fp
310fc     48 CE 85 F1 | 	sub	fp, #72
31100     55 95 02 F6 | 	mov	arg02, local03
31104     F0 C5 BF FD | 	call	#_fatfs_cc_st_clust
31108     70 CE 05 F1 | 	add	fp, #112
3110c     E7 A8 02 FB | 	rdlong	local02, fp
31110     70 CE 85 F1 | 	sub	fp, #112
31114     03 A8 06 F1 | 	add	local02, #3
31118     54 03 48 FC | 	wrbyte	#1, local02
3111c                 | LR__5224
3111c                 | LR__5225
3111c                 | LR__5226
3111c                 | LR__5227
3111c                 | LR__5228
3111c     00 A6 0E F2 | 	cmp	local01, #0 wz
31120     28 00 90 5D |  if_ne	jmp	#LR__5230
31124     E7 92 02 F6 | 	mov	arg01, fp
31128     10 92 06 F1 | 	add	arg01, #16
3112c     04 D1 BF FD | 	call	#_fatfs_cc_dir_remove
31130     3D A7 0A F6 | 	mov	local01, result1 wz
31134     14 00 90 5D |  if_ne	jmp	#LR__5229
31138     70 CE 05 F1 | 	add	fp, #112
3113c     E7 92 02 FB | 	rdlong	arg01, fp
31140     70 CE 85 F1 | 	sub	fp, #112
31144     BC B8 BF FD | 	call	#_fatfs_cc_sync_fs
31148     3D A7 02 F6 | 	mov	local01, result1
3114c                 | LR__5229
3114c                 | LR__5230
3114c                 | LR__5231
3114c                 | LR__5232
3114c                 | ' 					res = sync_fs(fs);
3114c                 | ' 				}
3114c                 | ' 			}
3114c                 | ' 
3114c                 | ' 		}
3114c                 | ' 		;
3114c                 | ' 	}
3114c                 | ' 
3114c                 | ' 	return res ;
3114c     53 7B 02 F6 | 	mov	result1, local01
31150     E7 F0 03 F6 | 	mov	ptra, fp
31154     F2 00 A0 FD | 	call	#popregs_
31158                 | _fatfs_cc_f_rename_ret
31158     2D 00 64 FD | 	ret
3115c                 | 
3115c                 | _fatfs_cc___default_flush
3115c     07 CA 05 F6 | 	mov	COUNT_, #7
31160     E8 00 A0 FD | 	call	#pushregs_
31164     49 A7 02 F6 | 	mov	local01, arg01
31168     53 A9 02 FB | 	rdlong	local02, local01
3116c     54 AB 02 FB | 	rdlong	local03, local02
31170     08 A6 06 F1 | 	add	local01, #8
31174     53 7D 02 FB | 	rdlong	result2, local01
31178     08 A6 86 F1 | 	sub	local01, #8
3117c     08 7C CE F7 | 	test	result2, #8 wz
31180     D4 00 90 AD |  if_e	jmp	#LR__5242
31184     01 AA 56 F2 | 	cmps	local03, #1 wc
31188     2C 01 90 CD |  if_b	jmp	#LR__5244
3118c     08 A6 06 F1 | 	add	local01, #8
31190     53 7D 02 FB | 	rdlong	result2, local01
31194     08 A6 86 F1 | 	sub	local01, #8
31198     80 7C CE F7 | 	test	result2, #128 wz
3119c     6C 00 90 AD |  if_e	jmp	#LR__5241
311a0     08 A6 06 F1 | 	add	local01, #8
311a4     53 97 02 FB | 	rdlong	arg03, local01
311a8     08 A6 86 F1 | 	sub	local01, #8
311ac     00 97 CE F7 | 	test	arg03, #256 wz
311b0     58 00 90 AD |  if_e	jmp	#LR__5240
311b4     30 A6 06 F1 | 	add	local01, #48
311b8     53 AD 02 FB | 	rdlong	local04, local01
311bc     56 AF 02 F6 | 	mov	local05, local04
311c0     30 A6 86 F1 | 	sub	local01, #48
311c4     13 AE 46 F7 | 	zerox	local05, #19
311c8     14 AC 46 F0 | 	shr	local04, #20
311cc     02 AC 66 F0 | 	shl	local04, #2
311d0     2D AD 02 F1 | 	add	local04, __methods__
311d4     56 AD 02 FB | 	rdlong	local04, local04
311d8     53 93 02 F6 | 	mov	arg01, local01
311dc     00 94 06 F6 | 	mov	arg02, #0
311e0     00 96 06 F6 | 	mov	arg03, #0
311e4     02 98 06 F6 | 	mov	arg04, #2
311e8     32 B1 02 F6 | 	mov	local06, objptr
311ec     57 65 02 F6 | 	mov	objptr, local05
311f0     2D AC 62 FD | 	call	local04
311f4     58 65 02 F6 | 	mov	objptr, local06
311f8     08 A6 06 F1 | 	add	local01, #8
311fc     53 B1 02 FB | 	rdlong	local06, local01
31200     00 B1 26 F5 | 	andn	local06, #256
31204     53 B1 62 FC | 	wrlong	local06, local01
31208     08 A6 86 F1 | 	sub	local01, #8
3120c                 | LR__5240
3120c                 | LR__5241
3120c     18 A6 06 F1 | 	add	local01, #24
31210     53 AD 02 FB | 	rdlong	local04, local01
31214     56 AF 02 F6 | 	mov	local05, local04
31218     18 A6 86 F1 | 	sub	local01, #24
3121c     13 AE 46 F7 | 	zerox	local05, #19
31220     14 AC 46 F0 | 	shr	local04, #20
31224     02 AC 66 F0 | 	shl	local04, #2
31228     2D AD 02 F1 | 	add	local04, __methods__
3122c     56 AD 02 FB | 	rdlong	local04, local04
31230     0C A8 06 F1 | 	add	local02, #12
31234     54 95 02 FB | 	rdlong	arg02, local02
31238     0C A8 86 F1 | 	sub	local02, #12
3123c     53 93 02 F6 | 	mov	arg01, local01
31240     55 97 02 F6 | 	mov	arg03, local03
31244     32 B1 02 F6 | 	mov	local06, objptr
31248     57 65 02 F6 | 	mov	objptr, local05
3124c     2D AC 62 FD | 	call	local04
31250     58 65 02 F6 | 	mov	objptr, local06
31254     60 00 90 FD | 	jmp	#LR__5244
31258                 | LR__5242
31258     08 A6 06 F1 | 	add	local01, #8
3125c     53 B1 02 FB | 	rdlong	local06, local01
31260     08 A6 86 F1 | 	sub	local01, #8
31264     04 B0 CE F7 | 	test	local06, #4 wz
31268     00 AA 0E 52 |  if_ne	cmp	local03, #0 wz
3126c     48 00 90 AD |  if_e	jmp	#LR__5243
31270     55 95 62 F6 | 	neg	arg02, local03
31274     4A 97 02 F6 | 	mov	arg03, arg02
31278     1F 96 C6 F0 | 	sar	arg03, #31
3127c     30 A6 06 F1 | 	add	local01, #48
31280     53 AD 02 FB | 	rdlong	local04, local01
31284     56 AF 02 F6 | 	mov	local05, local04
31288     30 A6 86 F1 | 	sub	local01, #48
3128c     13 AE 46 F7 | 	zerox	local05, #19
31290     14 AC 46 F0 | 	shr	local04, #20
31294     02 AC 66 F0 | 	shl	local04, #2
31298     2D AD 02 F1 | 	add	local04, __methods__
3129c     56 AD 02 FB | 	rdlong	local04, local04
312a0     53 93 02 F6 | 	mov	arg01, local01
312a4     01 98 06 F6 | 	mov	arg04, #1
312a8     32 B1 02 F6 | 	mov	local06, objptr
312ac     57 65 02 F6 | 	mov	objptr, local05
312b0     2D AC 62 FD | 	call	local04
312b4     58 65 02 F6 | 	mov	objptr, local06
312b8                 | LR__5243
312b8                 | LR__5244
312b8     54 01 68 FC | 	wrlong	#0, local02
312bc     04 A8 06 F1 | 	add	local02, #4
312c0     54 01 68 FC | 	wrlong	#0, local02
312c4     08 A6 06 F1 | 	add	local01, #8
312c8     53 B3 02 FB | 	rdlong	local07, local01
312cc     0C B2 26 F5 | 	andn	local07, #12
312d0     53 B3 62 FC | 	wrlong	local07, local01
312d4                 | '     }
312d4                 | '     b->cnt = 0;
312d4                 | '     b->ptr = 0;
312d4                 | '     f->state &= ~( (0x08) | (0x04) );
312d4                 | '     return 0;
312d4     00 7A 06 F6 | 	mov	result1, #0
312d8     E7 F0 03 F6 | 	mov	ptra, fp
312dc     F2 00 A0 FD | 	call	#popregs_
312e0                 | _fatfs_cc___default_flush_ret
312e0     2D 00 64 FD | 	ret
312e4                 | 
312e4                 | _fatfs_cc_getenv
312e4     06 CA 05 F6 | 	mov	COUNT_, #6
312e8     E8 00 A0 FD | 	call	#pushregs_
312ec     49 A7 02 F6 | 	mov	local01, arg01
312f0     49 A9 02 F6 | 	mov	local02, arg01
312f4     D7 06 48 FB | 	callpa	#(@LR__5251-@LR__5250)>>2,fcache_load_ptr_
312f8                 | LR__5250
312f8     54 7B CA FA | 	rdbyte	result1, local02 wz
312fc     01 A8 06 51 |  if_ne	add	local02, #1
31300     F4 FF 9F 5D |  if_ne	jmp	#LR__5250
31304                 | LR__5251
31304     49 A9 82 F1 | 	sub	local02, arg01
31308     54 7B 02 F6 | 	mov	result1, local02
3130c     02 00 00 FF 
31310     FC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
31314     36 97 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
31318     02 00 00 FF 
3131c     FC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
31320                 | '             return 0;
31320     00 7A 06 A6 |  if_e	mov	result1, #0
31324     5C 00 90 AD |  if_e	jmp	#LR__5254
31328                 | ' 
31328                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
31328     02 00 00 FF 
3132c     FC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
31330     36 AB 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
31334     02 00 00 FF 
31338     FC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
3133c                 | LR__5252
3133c     55 AD 0A FB | 	rdlong	local04, local03 wz
31340     3C 00 90 AD |  if_e	jmp	#LR__5253
31344     56 93 02 F6 | 	mov	arg01, local04
31348     53 95 02 F6 | 	mov	arg02, local01
3134c     54 97 02 F6 | 	mov	arg03, local02
31350     24 AB BF FD | 	call	#_fatfs_cc_strncmp
31354     00 7A 0E F2 | 	cmp	result1, #0 wz
31358     54 AF 02 A6 |  if_e	mov	local05, local02
3135c     56 AF 02 A1 |  if_e	add	local05, local04
31360     57 B1 C2 AA |  if_e	rdbyte	local06, local05
31364     3D B0 0E A2 |  if_e	cmp	local06, #61 wz
31368                 | ' 			return name+len+1;
31368     54 AD 02 A1 |  if_e	add	local04, local02
3136c     01 AC 06 A1 |  if_e	add	local04, #1
31370     56 7B 02 A6 |  if_e	mov	result1, local04
31374     0C 00 90 AD |  if_e	jmp	#LR__5254
31378     04 AA 06 F1 | 	add	local03, #4
3137c     BC FF 9F FD | 	jmp	#LR__5252
31380                 | LR__5253
31380                 | ' 	}
31380                 | ' 	return 0;
31380     00 7A 06 F6 | 	mov	result1, #0
31384                 | LR__5254
31384     E7 F0 03 F6 | 	mov	ptra, fp
31388     F2 00 A0 FD | 	call	#popregs_
3138c                 | _fatfs_cc_getenv_ret
3138c     2D 00 64 FD | 	ret
31390                 | 
31390                 | _fatfs_cc__get_fattime
31390     00 CA 05 F6 | 	mov	COUNT_, #0
31394     E8 00 A0 FD | 	call	#pushregs_
31398     34 F0 07 F1 | 	add	ptra, #52
3139c     00 92 06 F6 | 	mov	arg01, #0
313a0     A4 AB BF FD | 	call	#_fatfs_cc_time
313a4     04 CE 05 F1 | 	add	fp, #4
313a8     E7 7A 62 FC | 	wrlong	result1, fp
313ac     E7 92 02 F6 | 	mov	arg01, fp
313b0     0C CE 05 F1 | 	add	fp, #12
313b4     E7 94 02 F6 | 	mov	arg02, fp
313b8     10 CE 85 F1 | 	sub	fp, #16
313bc     70 AD BF FD | 	call	#_fatfs_cc__gmtime_r
313c0     24 CE 05 F1 | 	add	fp, #36
313c4     E7 7A 02 FB | 	rdlong	result1, fp
313c8     50 7A 86 F1 | 	sub	result1, #80
313cc     09 7A 66 F0 | 	shl	result1, #9
313d0     04 CE 85 F1 | 	sub	fp, #4
313d4     E7 94 02 FB | 	rdlong	arg02, fp
313d8     01 94 06 F1 | 	add	arg02, #1
313dc     05 94 66 F0 | 	shl	arg02, #5
313e0     4A 7B 42 F5 | 	or	result1, arg02
313e4     04 CE 85 F1 | 	sub	fp, #4
313e8     E7 94 02 FB | 	rdlong	arg02, fp
313ec     4A 7B 42 F5 | 	or	result1, arg02
313f0     04 CE 85 F1 | 	sub	fp, #4
313f4     E7 94 02 FB | 	rdlong	arg02, fp
313f8     0B 94 66 F0 | 	shl	arg02, #11
313fc     04 CE 85 F1 | 	sub	fp, #4
31400     E7 92 02 FB | 	rdlong	arg01, fp
31404     05 92 66 F0 | 	shl	arg01, #5
31408     49 95 42 F5 | 	or	arg02, arg01
3140c     04 CE 85 F1 | 	sub	fp, #4
31410     E7 92 02 FB | 	rdlong	arg01, fp
31414     10 CE 85 F1 | 	sub	fp, #16
31418     49 95 42 F5 | 	or	arg02, arg01
3141c                 | ' 
3141c                 | '     now = time(0);
3141c                 | '     _gmtime_r (&now, &date);
3141c                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
3141c                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
3141c                 | '     return (ffdate << 16) | fftime;
3141c     10 7A 66 F0 | 	shl	result1, #16
31420     4A 7B 42 F5 | 	or	result1, arg02
31424     E7 F0 03 F6 | 	mov	ptra, fp
31428     F2 00 A0 FD | 	call	#popregs_
3142c                 | _fatfs_cc__get_fattime_ret
3142c     2D 00 64 FD | 	ret
31430                 | 
31430                 | _fatfs_cc_unixtime_1154
31430     02 CA 05 F6 | 	mov	COUNT_, #2
31434     E8 00 A0 FD | 	call	#pushregs_
31438     34 F0 07 F1 | 	add	ptra, #52
3143c     49 A7 02 F6 | 	mov	local01, arg01
31440     09 A6 46 F0 | 	shr	local01, #9
31444     7F A6 06 F5 | 	and	local01, #127
31448     50 A8 06 F6 | 	mov	local02, #80
3144c     53 A9 02 F1 | 	add	local02, local01
31450     24 CE 05 F1 | 	add	fp, #36
31454     E7 A8 62 FC | 	wrlong	local02, fp
31458     49 A9 02 F6 | 	mov	local02, arg01
3145c     05 A8 46 F0 | 	shr	local02, #5
31460     54 A9 42 F8 | 	getnib	local02, local02, #0
31464     01 A8 86 F1 | 	sub	local02, #1
31468     04 CE 85 F1 | 	sub	fp, #4
3146c     E7 A8 62 FC | 	wrlong	local02, fp
31470     1F 92 06 F5 | 	and	arg01, #31
31474     04 CE 85 F1 | 	sub	fp, #4
31478     E7 92 62 FC | 	wrlong	arg01, fp
3147c     4A A9 02 F6 | 	mov	local02, arg02
31480     0B A8 46 F0 | 	shr	local02, #11
31484     1F A8 06 F5 | 	and	local02, #31
31488     04 CE 85 F1 | 	sub	fp, #4
3148c     E7 A8 62 FC | 	wrlong	local02, fp
31490     4A A9 02 F6 | 	mov	local02, arg02
31494     05 A8 46 F0 | 	shr	local02, #5
31498     3F A8 06 F5 | 	and	local02, #63
3149c     04 CE 85 F1 | 	sub	fp, #4
314a0     E7 A8 62 FC | 	wrlong	local02, fp
314a4     1F 94 06 F5 | 	and	arg02, #31
314a8     01 94 66 F0 | 	shl	arg02, #1
314ac     04 CE 85 F1 | 	sub	fp, #4
314b0     E7 94 62 FC | 	wrlong	arg02, fp
314b4     E7 92 02 F6 | 	mov	arg01, fp
314b8     10 CE 85 F1 | 	sub	fp, #16
314bc     C8 AA BF FD | 	call	#_fatfs_cc_mktime
314c0                 | ' 
314c0                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
314c0                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
314c0                 | '     date.tm_mday = (dosdate & 0x1f);
314c0                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
314c0                 | '     date.tm_min = (dostime >> 5) & 0x3f;
314c0                 | '     date.tm_sec = (dostime & 0x1f) << 1;
314c0                 | ' 
314c0                 | '     t = mktime(&date);
314c0                 | ' #line 66 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
314c0                 | '     return t;
314c0     E7 F0 03 F6 | 	mov	ptra, fp
314c4     F2 00 A0 FD | 	call	#popregs_
314c8                 | _fatfs_cc_unixtime_1154_ret
314c8     2D 00 64 FD | 	ret
314cc                 | 
314cc                 | _fatfs_cc__set_dos_error_1156
314cc     49 81 02 F6 | 	mov	_var01, arg01
314d0                 | ' #line 82 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
314d0                 | '     switch (derr) {
314d0     14 80 26 F3 | 	fle	_var01, #20
314d4     30 80 62 FD | 	jmprel	_var01
314d8                 | LR__5260
314d8     50 00 90 FD | 	jmp	#LR__5261
314dc     84 00 90 FD | 	jmp	#LR__5275
314e0     80 00 90 FD | 	jmp	#LR__5276
314e4     7C 00 90 FD | 	jmp	#LR__5277
314e8     48 00 90 FD | 	jmp	#LR__5262
314ec     44 00 90 FD | 	jmp	#LR__5263
314f0     40 00 90 FD | 	jmp	#LR__5264
314f4     44 00 90 FD | 	jmp	#LR__5265
314f8     48 00 90 FD | 	jmp	#LR__5267
314fc     54 00 90 FD | 	jmp	#LR__5270
31500     38 00 90 FD | 	jmp	#LR__5266
31504     4C 00 90 FD | 	jmp	#LR__5271
31508     48 00 90 FD | 	jmp	#LR__5272
3150c     44 00 90 FD | 	jmp	#LR__5273
31510     50 00 90 FD | 	jmp	#LR__5278
31514     4C 00 90 FD | 	jmp	#LR__5278
31518     48 00 90 FD | 	jmp	#LR__5278
3151c     2C 00 90 FD | 	jmp	#LR__5268
31520     38 00 90 FD | 	jmp	#LR__5274
31524     2C 00 90 FD | 	jmp	#LR__5269
31528     38 00 90 FD | 	jmp	#LR__5278
3152c                 | LR__5261
3152c     00 82 06 F6 | 	mov	_var02, #0
31530                 | '         r = 0;
31530                 | '         break;
31530     34 00 90 FD | 	jmp	#LR__5279
31534                 | LR__5262
31534                 | LR__5263
31534                 | LR__5264
31534     04 82 06 F6 | 	mov	_var02, #4
31538                 | '         r =  4 ;
31538                 | '         break;
31538     2C 00 90 FD | 	jmp	#LR__5279
3153c                 | LR__5265
3153c                 | LR__5266
3153c     06 82 06 F6 | 	mov	_var02, #6
31540                 | '         r =  6 ;
31540                 | '         break;
31540     24 00 90 FD | 	jmp	#LR__5279
31544                 | LR__5267
31544     09 82 06 F6 | 	mov	_var02, #9
31548                 | '         r =  9 ;
31548                 | '         break;
31548     1C 00 90 FD | 	jmp	#LR__5279
3154c                 | LR__5268
3154c     07 82 06 F6 | 	mov	_var02, #7
31550                 | '         r =  7 ;
31550                 | '         break;
31550     14 00 90 FD | 	jmp	#LR__5279
31554                 | LR__5269
31554                 | LR__5270
31554                 | LR__5271
31554                 | LR__5272
31554                 | LR__5273
31554     0A 82 06 F6 | 	mov	_var02, #10
31558                 | '         r =  10 ;
31558                 | '         break;
31558     0C 00 90 FD | 	jmp	#LR__5279
3155c                 | LR__5274
3155c     0B 82 06 F6 | 	mov	_var02, #11
31560                 | '         r =  11 ;
31560                 | '         break;
31560     04 00 90 FD | 	jmp	#LR__5279
31564                 | LR__5275
31564                 | LR__5276
31564                 | LR__5277
31564                 | LR__5278
31564     0C 82 06 F6 | 	mov	_var02, #12
31568                 | '         r =  12 ;
31568                 | '         break;
31568                 | LR__5279
31568                 | '     }
31568                 | '     return _seterror(r);
31568     00 82 4E F2 | 	cmps	_var02, #0 wz
3156c     20 68 06 F1 | 	add	ptr___system__dat__, #32
31570     34 83 62 FC | 	wrlong	_var02, ptr___system__dat__
31574     20 68 86 F1 | 	sub	ptr___system__dat__, #32
31578     01 7A 66 56 |  if_ne	neg	result1, #1
3157c     00 7A 06 A6 |  if_e	mov	result1, #0
31580                 | _fatfs_cc__set_dos_error_1156_ret
31580     2D 00 64 FD | 	ret
31584                 | 
31584                 | _fatfs_cc_v_creat
31584     04 CA 05 F6 | 	mov	COUNT_, #4
31588     E8 00 A0 FD | 	call	#pushregs_
3158c     49 A7 02 F6 | 	mov	local01, arg01
31590     4A A9 02 F6 | 	mov	local02, arg02
31594     03 00 00 FF 
31598     38 92 06 F6 | 	mov	arg01, ##1592
3159c                 | '     return _gc_alloc(size);
3159c     10 94 06 F6 | 	mov	arg02, #16
315a0     70 6E BF FD | 	call	#__system___gc_doalloc
315a4     3D AB 0A F6 | 	mov	local03, result1 wz
315a8                 | '       return _seterror( 7 );
315a8     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
315ac     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
315b0     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
315b4     01 7A 66 A6 |  if_e	neg	result1, #1
315b8     50 00 90 AD |  if_e	jmp	#LR__5281
315bc     55 93 02 F6 | 	mov	arg01, local03
315c0     00 94 06 F6 | 	mov	arg02, #0
315c4     03 00 00 FF 
315c8     38 96 06 F6 | 	mov	arg03, ##1592
315cc     D8 00 A0 FD | 	call	#\builtin_bytefill_
315d0     55 93 02 F6 | 	mov	arg01, local03
315d4     02 00 00 FF 
315d8     10 92 06 F1 | 	add	arg01, ##1040
315dc     54 95 02 F6 | 	mov	arg02, local02
315e0     07 96 06 F6 | 	mov	arg03, #7
315e4     D8 E0 BF FD | 	call	#_fatfs_cc_f_open
315e8     3D AD 0A F6 | 	mov	local04, result1 wz
315ec     14 00 90 AD |  if_e	jmp	#LR__5280
315f0     55 93 02 F6 | 	mov	arg01, local03
315f4                 | '     return _gc_free(ptr);
315f4     20 6F BF FD | 	call	#__system___gc_free
315f8                 | '     free(f);
315f8                 | '     return _set_dos_error(r);
315f8     56 93 02 F6 | 	mov	arg01, local04
315fc     CC FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31600     08 00 90 FD | 	jmp	#LR__5281
31604                 | LR__5280
31604     53 AB 62 FC | 	wrlong	local03, local01
31608                 | '   }
31608                 | '   fil->vfsdata = f;
31608                 | '   return 0;
31608     00 7A 06 F6 | 	mov	result1, #0
3160c                 | LR__5281
3160c     E7 F0 03 F6 | 	mov	ptra, fp
31610     F2 00 A0 FD | 	call	#popregs_
31614                 | _fatfs_cc_v_creat_ret
31614     2D 00 64 FD | 	ret
31618                 | 
31618                 | _fatfs_cc_v_close
31618     02 CA 05 F6 | 	mov	COUNT_, #2
3161c     E8 00 A0 FD | 	call	#pushregs_
31620     49 A7 02 FB | 	rdlong	local01, arg01
31624     53 93 02 F6 | 	mov	arg01, local01
31628     02 00 00 FF 
3162c     10 92 06 F1 | 	add	arg01, ##1040
31630     34 EE BF FD | 	call	#_fatfs_cc_f_close
31634     3D A9 02 F6 | 	mov	local02, result1
31638     53 93 02 F6 | 	mov	arg01, local01
3163c                 | '     return _gc_free(ptr);
3163c     D8 6E BF FD | 	call	#__system___gc_free
31640                 | '     FAT_FIL *f = fil->vfsdata;
31640                 | '     r=f_close(&f->fil);
31640                 | '     free(f);
31640                 | '     return _set_dos_error(r);
31640     54 93 02 F6 | 	mov	arg01, local02
31644     84 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31648     E7 F0 03 F6 | 	mov	ptra, fp
3164c     F2 00 A0 FD | 	call	#popregs_
31650                 | _fatfs_cc_v_close_ret
31650     2D 00 64 FD | 	ret
31654                 | 
31654                 | _fatfs_cc_v_opendir
31654     04 CA 05 F6 | 	mov	COUNT_, #4
31658     E8 00 A0 FD | 	call	#pushregs_
3165c     49 A7 02 F6 | 	mov	local01, arg01
31660     4A A9 02 F6 | 	mov	local02, arg02
31664     30 92 06 F6 | 	mov	arg01, #48
31668                 | '     return _gc_alloc(size);
31668     10 94 06 F6 | 	mov	arg02, #16
3166c     A4 6D BF FD | 	call	#__system___gc_doalloc
31670     3D AB 0A F6 | 	mov	local03, result1 wz
31674                 | ' #line 166 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31674                 | '       return _seterror( 7 );
31674     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31678     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
3167c     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31680     01 7A 66 A6 |  if_e	neg	result1, #1
31684     34 00 90 AD |  if_e	jmp	#LR__5291
31688     54 95 02 F6 | 	mov	arg02, local02
3168c     55 93 02 F6 | 	mov	arg01, local03
31690     C0 F1 BF FD | 	call	#_fatfs_cc_f_opendir
31694     3D AD 0A F6 | 	mov	local04, result1 wz
31698     14 00 90 AD |  if_e	jmp	#LR__5290
3169c     55 93 02 F6 | 	mov	arg01, local03
316a0                 | '     return _gc_free(ptr);
316a0     74 6E BF FD | 	call	#__system___gc_free
316a4                 | '         free(f);
316a4                 | '         return _set_dos_error(r);
316a4     56 93 02 F6 | 	mov	arg01, local04
316a8     20 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1156
316ac     0C 00 90 FD | 	jmp	#LR__5291
316b0                 | LR__5290
316b0     04 A6 06 F1 | 	add	local01, #4
316b4     53 AB 62 FC | 	wrlong	local03, local01
316b8                 | '     }
316b8                 | '     dir->vfsdata = f;
316b8                 | '     return 0;
316b8     00 7A 06 F6 | 	mov	result1, #0
316bc                 | LR__5291
316bc     E7 F0 03 F6 | 	mov	ptra, fp
316c0     F2 00 A0 FD | 	call	#popregs_
316c4                 | _fatfs_cc_v_opendir_ret
316c4     2D 00 64 FD | 	ret
316c8                 | 
316c8                 | _fatfs_cc_v_closedir
316c8     02 CA 05 F6 | 	mov	COUNT_, #2
316cc     E8 00 A0 FD | 	call	#pushregs_
316d0     04 92 06 F1 | 	add	arg01, #4
316d4     49 A7 02 FB | 	rdlong	local01, arg01
316d8     53 93 02 F6 | 	mov	arg01, local01
316dc     90 F2 BF FD | 	call	#_fatfs_cc_f_closedir
316e0     3D A9 02 F6 | 	mov	local02, result1
316e4     53 93 02 F6 | 	mov	arg01, local01
316e8                 | '     return _gc_free(ptr);
316e8     2C 6E BF FD | 	call	#__system___gc_free
316ec     00 A8 0E F2 | 	cmp	local02, #0 wz
316f0     54 93 02 56 |  if_ne	mov	arg01, local02
316f4     D4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1156
316f8                 | '     return r;
316f8     54 7B 02 F6 | 	mov	result1, local02
316fc     E7 F0 03 F6 | 	mov	ptra, fp
31700     F2 00 A0 FD | 	call	#popregs_
31704                 | _fatfs_cc_v_closedir_ret
31704     2D 00 64 FD | 	ret
31708                 | 
31708                 | _fatfs_cc_v_readdir
31708     01 CA 05 F6 | 	mov	COUNT_, #1
3170c     E8 00 A0 FD | 	call	#pushregs_
31710     2C F1 07 F1 | 	add	ptra, #300
31714     4A A7 02 F6 | 	mov	local01, arg02
31718     04 92 06 F1 | 	add	arg01, #4
3171c     49 93 02 FB | 	rdlong	arg01, arg01
31720     E7 94 02 F6 | 	mov	arg02, fp
31724     0C 94 06 F1 | 	add	arg02, #12
31728     78 F2 BF FD | 	call	#_fatfs_cc_f_readdir
3172c     3D 97 0A F6 | 	mov	arg03, result1 wz
31730     0C 00 90 AD |  if_e	jmp	#LR__5300
31734                 | '         return _set_dos_error(r);
31734     4B 93 02 F6 | 	mov	arg01, arg03
31738     90 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1156
3173c     88 00 90 FD | 	jmp	#LR__5301
31740                 | LR__5300
31740     28 CE 05 F1 | 	add	fp, #40
31744     E7 96 CA FA | 	rdbyte	arg03, fp wz
31748     28 CE 85 F1 | 	sub	fp, #40
3174c                 | '         return -1;
3174c     01 7A 66 A6 |  if_e	neg	result1, #1
31750     74 00 90 AD |  if_e	jmp	#LR__5301
31754     E7 94 02 F6 | 	mov	arg02, fp
31758     28 94 06 F1 | 	add	arg02, #40
3175c     53 93 02 F6 | 	mov	arg01, local01
31760     3F 96 06 F6 | 	mov	arg03, #63
31764     7C A6 BF FD | 	call	#_fatfs_cc_strncpy
31768     3F A6 06 F1 | 	add	local01, #63
3176c     53 01 48 FC | 	wrbyte	#0, local01
31770     3F A6 86 F1 | 	sub	local01, #63
31774     14 CE 05 F1 | 	add	fp, #20
31778     E7 96 C2 FA | 	rdbyte	arg03, fp
3177c     10 96 CE F7 | 	test	arg03, #16 wz
31780     50 A6 06 51 |  if_ne	add	local01, #80
31784     53 03 48 5C |  if_ne	wrbyte	#1, local01
31788     50 A6 E6 F3 | 	sumnz	local01, #80
3178c     53 01 48 AC |  if_e	wrbyte	#0, local01
31790     50 A6 86 A1 |  if_e	sub	local01, #80
31794     08 CE 85 F1 | 	sub	fp, #8
31798     E7 96 02 FB | 	rdlong	arg03, fp
3179c     48 A6 06 F1 | 	add	local01, #72
317a0     53 97 62 FC | 	wrlong	arg03, local01
317a4     04 CE 05 F1 | 	add	fp, #4
317a8     E7 92 E2 FA | 	rdword	arg01, fp
317ac     02 CE 05 F1 | 	add	fp, #2
317b0     E7 94 E2 FA | 	rdword	arg02, fp
317b4     12 CE 85 F1 | 	sub	fp, #18
317b8     74 FC BF FD | 	call	#_fatfs_cc_unixtime_1154
317bc     04 A6 06 F1 | 	add	local01, #4
317c0     53 7B 62 FC | 	wrlong	result1, local01
317c4                 | '         ent->d_type =  (0) ;
317c4                 | '     }
317c4                 | '     ent->d_size = finfo.fsize;
317c4                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
317c4                 | '     return 0;
317c4     00 7A 06 F6 | 	mov	result1, #0
317c8                 | LR__5301
317c8     E7 F0 03 F6 | 	mov	ptra, fp
317cc     F2 00 A0 FD | 	call	#popregs_
317d0                 | _fatfs_cc_v_readdir_ret
317d0     2D 00 64 FD | 	ret
317d4                 | 
317d4                 | _fatfs_cc_v_stat
317d4     05 CA 05 F6 | 	mov	COUNT_, #5
317d8     E8 00 A0 FD | 	call	#pushregs_
317dc     30 F1 07 F1 | 	add	ptra, #304
317e0     49 A7 02 F6 | 	mov	local01, arg01
317e4     4A A9 02 F6 | 	mov	local02, arg02
317e8     54 93 02 F6 | 	mov	arg01, local02
317ec     00 94 06 F6 | 	mov	arg02, #0
317f0     34 96 06 F6 | 	mov	arg03, #52
317f4     D8 00 A0 FD | 	call	#\builtin_bytefill_
317f8     53 7D CA FA | 	rdbyte	result2, local01 wz
317fc     1C 00 90 AD |  if_e	jmp	#LR__5310
31800     53 7D C2 FA | 	rdbyte	result2, local01
31804     2E 7C 0E F2 | 	cmp	result2, #46 wz
31808     01 A6 06 A1 |  if_e	add	local01, #1
3180c     53 AB C2 AA |  if_e	rdbyte	local03, local01
31810     01 A6 86 A1 |  if_e	sub	local01, #1
31814     00 AA 4E A2 |  if_e	cmps	local03, #0 wz
31818     14 00 90 5D |  if_ne	jmp	#LR__5311
3181c                 | LR__5310
3181c     18 CE 05 F1 | 	add	fp, #24
31820     E7 20 48 FC | 	wrbyte	#16, fp
31824     18 CE 85 F1 | 	sub	fp, #24
31828     00 AC 06 F6 | 	mov	local04, #0
3182c     14 00 90 FD | 	jmp	#LR__5312
31830                 | LR__5311
31830     E7 94 02 F6 | 	mov	arg02, fp
31834     10 94 06 F1 | 	add	arg02, #16
31838     53 93 02 F6 | 	mov	arg01, local01
3183c     00 F2 BF FD | 	call	#_fatfs_cc_f_stat
31840     3D AD 02 F6 | 	mov	local04, result1
31844                 | LR__5312
31844     00 AC 0E F2 | 	cmp	local04, #0 wz
31848     0C 00 90 AD |  if_e	jmp	#LR__5313
3184c                 | '         return _set_dos_error(r);
3184c     56 93 02 F6 | 	mov	arg01, local04
31850     78 FC BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31854     9C 00 90 FD | 	jmp	#LR__5314
31858                 | LR__5313
31858     24 AF 06 F6 | 	mov	local05, #292
3185c     18 CE 05 F1 | 	add	fp, #24
31860     E7 AA C2 FA | 	rdbyte	local03, fp
31864     01 AA CE F7 | 	test	local03, #1 wz
31868     B6 AF 06 A6 |  if_e	mov	local05, #438
3186c     10 AA CE F7 | 	test	local03, #16 wz
31870     08 00 00 5F 
31874     49 AE 46 55 |  if_ne	or	local05, ##4169
31878     08 A8 06 F1 | 	add	local02, #8
3187c     54 AF 62 FC | 	wrlong	local05, local02
31880     04 A8 06 F1 | 	add	local02, #4
31884     54 03 68 FC | 	wrlong	#1, local02
31888     08 CE 85 F1 | 	sub	fp, #8
3188c     E7 7A 02 FB | 	rdlong	result1, fp
31890     0C A8 06 F1 | 	add	local02, #12
31894     54 7B 62 FC | 	wrlong	result1, local02
31898     04 A8 06 F1 | 	add	local02, #4
3189c     54 01 68 FC | 	wrlong	#0, local02
318a0     04 A8 06 F1 | 	add	local02, #4
318a4     01 00 80 FF 
318a8     54 01 68 FC | 	wrlong	##512, local02
318ac     E7 AA 02 FB | 	rdlong	local03, fp
318b0     FF AB 06 F1 | 	add	local03, #511
318b4     09 AA 46 F0 | 	shr	local03, #9
318b8     04 A8 06 F1 | 	add	local02, #4
318bc     54 AB 62 FC | 	wrlong	local03, local02
318c0     04 CE 05 F1 | 	add	fp, #4
318c4     E7 92 E2 FA | 	rdword	arg01, fp
318c8     02 CE 05 F1 | 	add	fp, #2
318cc     E7 94 E2 FA | 	rdword	arg02, fp
318d0     16 CE 85 F1 | 	sub	fp, #22
318d4     58 FB BF FD | 	call	#_fatfs_cc_unixtime_1154
318d8     0C A8 06 F1 | 	add	local02, #12
318dc     54 7B 62 FC | 	wrlong	result1, local02
318e0     04 A8 86 F1 | 	sub	local02, #4
318e4     54 7B 62 FC | 	wrlong	result1, local02
318e8     04 A8 86 F1 | 	sub	local02, #4
318ec     54 7B 62 FC | 	wrlong	result1, local02
318f0                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
318f0                 | '     }
318f0                 | '     buf->st_mode = mode;
318f0                 | '     buf->st_nlink = 1;
318f0                 | '     buf->st_size = finfo.fsize;
318f0                 | '     buf->st_blksize = 512;
318f0                 | '     buf->st_blocks = (finfo.fsize + 511) / 512;
318f0                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
318f0                 | ' #line 257 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
318f0                 | '     return r;
318f0     56 7B 02 F6 | 	mov	result1, local04
318f4                 | LR__5314
318f4     E7 F0 03 F6 | 	mov	ptra, fp
318f8     F2 00 A0 FD | 	call	#popregs_
318fc                 | _fatfs_cc_v_stat_ret
318fc     2D 00 64 FD | 	ret
31900                 | 
31900                 | _fatfs_cc_v_read
31900     02 CA 05 F6 | 	mov	COUNT_, #2
31904     E8 00 A0 FD | 	call	#pushregs_
31908     1C F0 07 F1 | 	add	ptra, #28
3190c     49 A7 02 F6 | 	mov	local01, arg01
31910     53 93 0A FB | 	rdlong	arg01, local01 wz
31914                 | '         return _seterror( 5 );
31914     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31918     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
3191c     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31920     01 7A 66 A6 |  if_e	neg	result1, #1
31924     58 00 90 AD |  if_e	jmp	#LR__5321
31928     02 00 00 FF 
3192c     10 92 06 F1 | 	add	arg01, ##1040
31930     E7 98 02 F6 | 	mov	arg04, fp
31934     18 98 06 F1 | 	add	arg04, #24
31938     DC E1 BF FD | 	call	#_fatfs_cc_f_read
3193c     3D 99 0A F6 | 	mov	arg04, result1 wz
31940     1C 00 90 AD |  if_e	jmp	#LR__5320
31944     08 A6 06 F1 | 	add	local01, #8
31948     53 93 02 FB | 	rdlong	arg01, local01
3194c     20 92 46 F5 | 	or	arg01, #32
31950     53 93 62 FC | 	wrlong	arg01, local01
31954                 | '         fil->state |=  (0x20) ;
31954                 | '         return _set_dos_error(r);
31954     4C 93 02 F6 | 	mov	arg01, arg04
31958     70 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1156
3195c     20 00 90 FD | 	jmp	#LR__5321
31960                 | LR__5320
31960     18 CE 05 F1 | 	add	fp, #24
31964     E7 A8 0A FB | 	rdlong	local02, fp wz
31968     08 A6 06 A1 |  if_e	add	local01, #8
3196c     53 A9 02 AB |  if_e	rdlong	local02, local01
31970     10 A8 46 A5 |  if_e	or	local02, #16
31974     53 A9 62 AC |  if_e	wrlong	local02, local01
31978                 | '         fil->state |=  (0x10) ;
31978                 | '     }
31978                 | '     return x;
31978     E7 7A 02 FB | 	rdlong	result1, fp
3197c     18 CE 85 F1 | 	sub	fp, #24
31980                 | LR__5321
31980     E7 F0 03 F6 | 	mov	ptra, fp
31984     F2 00 A0 FD | 	call	#popregs_
31988                 | _fatfs_cc_v_read_ret
31988     2D 00 64 FD | 	ret
3198c                 | 
3198c                 | _fatfs_cc_v_write
3198c     01 CA 05 F6 | 	mov	COUNT_, #1
31990     E8 00 A0 FD | 	call	#pushregs_
31994     1C F0 07 F1 | 	add	ptra, #28
31998     49 A7 02 F6 | 	mov	local01, arg01
3199c     53 93 0A FB | 	rdlong	arg01, local01 wz
319a0                 | '         return _seterror( 5 );
319a0     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
319a4     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
319a8     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
319ac     01 7A 66 A6 |  if_e	neg	result1, #1
319b0     44 00 90 AD |  if_e	jmp	#LR__5331
319b4     02 00 00 FF 
319b8     10 92 06 F1 | 	add	arg01, ##1040
319bc     E7 98 02 F6 | 	mov	arg04, fp
319c0     18 98 06 F1 | 	add	arg04, #24
319c4     E8 E4 BF FD | 	call	#_fatfs_cc_f_write
319c8     3D 99 0A F6 | 	mov	arg04, result1 wz
319cc     1C 00 90 AD |  if_e	jmp	#LR__5330
319d0     08 A6 06 F1 | 	add	local01, #8
319d4     53 93 02 FB | 	rdlong	arg01, local01
319d8     20 92 46 F5 | 	or	arg01, #32
319dc     53 93 62 FC | 	wrlong	arg01, local01
319e0                 | '         fil->state |=  (0x20) ;
319e0                 | '         return _set_dos_error(r);
319e0     4C 93 02 F6 | 	mov	arg01, arg04
319e4     E4 FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
319e8     0C 00 90 FD | 	jmp	#LR__5331
319ec                 | LR__5330
319ec                 | '     }
319ec                 | '     return x;
319ec     18 CE 05 F1 | 	add	fp, #24
319f0     E7 7A 02 FB | 	rdlong	result1, fp
319f4     18 CE 85 F1 | 	sub	fp, #24
319f8                 | LR__5331
319f8     E7 F0 03 F6 | 	mov	ptra, fp
319fc     F2 00 A0 FD | 	call	#popregs_
31a00                 | _fatfs_cc_v_write_ret
31a00     2D 00 64 FD | 	ret
31a04                 | 
31a04                 | _fatfs_cc_v_lseek
31a04     06 CA 05 F6 | 	mov	COUNT_, #6
31a08     E8 00 A0 FD | 	call	#pushregs_
31a0c     4A AB 02 F6 | 	mov	local03, arg02
31a10     4C AD 02 F6 | 	mov	local04, arg04
31a14     49 AF 02 FB | 	rdlong	local05, arg01
31a18     02 00 00 FF 
31a1c     10 AE 0E F1 | 	add	local05, ##1040 wz
31a20     18 00 90 5D |  if_ne	jmp	#LR__5340
31a24                 | '         return _seterror( 5 );
31a24     20 68 06 F1 | 	add	ptr___system__dat__, #32
31a28     34 0B 68 FC | 	wrlong	#5, ptr___system__dat__
31a2c     20 68 86 F1 | 	sub	ptr___system__dat__, #32
31a30     01 7C 66 F6 | 	neg	result2, #1
31a34     01 7A 66 F6 | 	neg	result1, #1
31a38     58 00 90 FD | 	jmp	#LR__5343
31a3c                 | LR__5340
31a3c     00 AC 0E F2 | 	cmp	local04, #0 wz
31a40     24 00 90 AD |  if_e	jmp	#LR__5341
31a44     01 AC 0E F2 | 	cmp	local04, #1 wz
31a48     14 AE 06 A1 |  if_e	add	local05, #20
31a4c     57 B1 02 AB |  if_e	rdlong	local06, local05
31a50     14 AE 86 A1 |  if_e	sub	local05, #20
31a54     58 AB 02 A1 |  if_e	add	local03, local06
31a58     0C AE 06 51 |  if_ne	add	local05, #12
31a5c     57 B1 02 5B |  if_ne	rdlong	local06, local05
31a60     0C AE 86 51 |  if_ne	sub	local05, #12
31a64     58 AB 02 51 |  if_ne	add	local03, local06
31a68                 | LR__5341
31a68     57 93 02 F6 | 	mov	arg01, local05
31a6c     55 95 02 F6 | 	mov	arg02, local03
31a70     38 EA BF FD | 	call	#_fatfs_cc_f_lseek
31a74     3D 93 0A F6 | 	mov	arg01, result1 wz
31a78     10 00 90 AD |  if_e	jmp	#LR__5342
31a7c                 | '         return _set_dos_error(result);
31a7c     4C FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31a80     3D 7D 02 F6 | 	mov	result2, result1
31a84     1F 7C C6 F0 | 	sar	result2, #31
31a88     08 00 90 FD | 	jmp	#LR__5343
31a8c                 | LR__5342
31a8c                 | '     }
31a8c                 | '     return (off_t)offset;
31a8c     55 7B 02 F6 | 	mov	result1, local03
31a90     54 7D 02 F6 | 	mov	result2, local02
31a94                 | LR__5343
31a94     E7 F0 03 F6 | 	mov	ptra, fp
31a98     F2 00 A0 FD | 	call	#popregs_
31a9c                 | _fatfs_cc_v_lseek_ret
31a9c     2D 00 64 FD | 	ret
31aa0                 | 
31aa0                 | _fatfs_cc_v_ioctl
31aa0                 | ' {
31aa0                 | '     return _seterror( 10 );
31aa0     20 68 06 F1 | 	add	ptr___system__dat__, #32
31aa4     34 15 68 FC | 	wrlong	#10, ptr___system__dat__
31aa8     20 68 86 F1 | 	sub	ptr___system__dat__, #32
31aac     01 7A 66 F6 | 	neg	result1, #1
31ab0                 | _fatfs_cc_v_ioctl_ret
31ab0     2D 00 64 FD | 	ret
31ab4                 | 
31ab4                 | _fatfs_cc_v_mkdir
31ab4     A0 F1 BF FD | 	call	#_fatfs_cc_f_mkdir
31ab8     3D 93 02 F6 | 	mov	arg01, result1
31abc                 | ' 
31abc                 | '     r = f_mkdir(name);
31abc                 | '     return _set_dos_error(r);
31abc     0C FA BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31ac0                 | _fatfs_cc_v_mkdir_ret
31ac0     2D 00 64 FD | 	ret
31ac4                 | 
31ac4                 | _fatfs_cc_v_remove
31ac4     0C F0 BF FD | 	call	#_fatfs_cc_f_unlink
31ac8     3D 93 02 F6 | 	mov	arg01, result1
31acc                 | ' 
31acc                 | '     r = f_unlink(name);
31acc                 | '     return _set_dos_error(r);
31acc     FC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31ad0                 | _fatfs_cc_v_remove_ret
31ad0     2D 00 64 FD | 	ret
31ad4                 | 
31ad4                 | _fatfs_cc_v_rmdir
31ad4     FC EF BF FD | 	call	#_fatfs_cc_f_unlink
31ad8     3D 93 02 F6 | 	mov	arg01, result1
31adc                 | ' 
31adc                 | '     r = f_unlink(name);
31adc                 | '     return _set_dos_error(r);
31adc     EC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31ae0                 | _fatfs_cc_v_rmdir_ret
31ae0     2D 00 64 FD | 	ret
31ae4                 | 
31ae4                 | _fatfs_cc_v_rename
31ae4     B0 F3 BF FD | 	call	#_fatfs_cc_f_rename
31ae8     3D 93 02 F6 | 	mov	arg01, result1
31aec                 | '     return _set_dos_error(r);
31aec     DC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31af0                 | _fatfs_cc_v_rename_ret
31af0     2D 00 64 FD | 	ret
31af4                 | 
31af4                 | _fatfs_cc_v_open
31af4     07 CA 05 F6 | 	mov	COUNT_, #7
31af8     E8 00 A0 FD | 	call	#pushregs_
31afc     49 A7 02 F6 | 	mov	local01, arg01
31b00     4A A9 02 F6 | 	mov	local02, arg02
31b04     4B AB 02 F6 | 	mov	local03, arg03
31b08     03 00 00 FF 
31b0c     38 92 06 F6 | 	mov	arg01, ##1592
31b10                 | '     return _gc_alloc(size);
31b10     10 94 06 F6 | 	mov	arg02, #16
31b14     FC 68 BF FD | 	call	#__system___gc_doalloc
31b18     3D AD 0A F6 | 	mov	local04, result1 wz
31b1c                 | '       return _seterror( 7 );
31b1c     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31b20     34 0F 68 AC |  if_e	wrlong	#7, ptr___system__dat__
31b24     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31b28     01 7A 66 A6 |  if_e	neg	result1, #1
31b2c     90 00 90 AD |  if_e	jmp	#LR__5356
31b30     56 93 02 F6 | 	mov	arg01, local04
31b34     00 94 06 F6 | 	mov	arg02, #0
31b38     03 00 00 FF 
31b3c     38 96 06 F6 | 	mov	arg03, ##1592
31b40     D8 00 A0 FD | 	call	#\builtin_bytefill_
31b44                 | '   switch (flags & 3) {
31b44     55 AF 02 F6 | 	mov	local05, local03
31b48     03 AE 0E F5 | 	and	local05, #3 wz
31b4c     0C 00 90 AD |  if_e	jmp	#LR__5350
31b50     01 AE 0E F2 | 	cmp	local05, #1 wz
31b54     0C 00 90 AD |  if_e	jmp	#LR__5351
31b58     10 00 90 FD | 	jmp	#LR__5352
31b5c                 | LR__5350
31b5c     01 B0 06 F6 | 	mov	local06, #1
31b60                 | '       fs_flags =  0x01 ;
31b60                 | '       break;
31b60     0C 00 90 FD | 	jmp	#LR__5353
31b64                 | LR__5351
31b64     02 B0 06 F6 | 	mov	local06, #2
31b68                 | '       fs_flags =  0x02 ;
31b68                 | '       break;
31b68     04 00 90 FD | 	jmp	#LR__5353
31b6c                 | LR__5352
31b6c     03 B0 06 F6 | 	mov	local06, #3
31b70                 | '       fs_flags =  0x01  |  0x02 ;
31b70                 | '       break;
31b70                 | LR__5353
31b70     08 AA CE F7 | 	test	local03, #8 wz
31b74     18 B0 46 55 |  if_ne	or	local06, #24
31b78     08 00 90 5D |  if_ne	jmp	#LR__5354
31b7c     20 AA CE F7 | 	test	local03, #32 wz
31b80     30 B0 46 55 |  if_ne	or	local06, #48
31b84                 | LR__5354
31b84     56 93 02 F6 | 	mov	arg01, local04
31b88     02 00 00 FF 
31b8c     10 92 06 F1 | 	add	arg01, ##1040
31b90     54 95 02 F6 | 	mov	arg02, local02
31b94     58 97 02 F6 | 	mov	arg03, local06
31b98     24 DB BF FD | 	call	#_fatfs_cc_f_open
31b9c     3D B3 0A F6 | 	mov	local07, result1 wz
31ba0     14 00 90 AD |  if_e	jmp	#LR__5355
31ba4     56 93 02 F6 | 	mov	arg01, local04
31ba8                 | '     return _gc_free(ptr);
31ba8     6C 69 BF FD | 	call	#__system___gc_free
31bac                 | '     free(f);
31bac                 | ' #line 426 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31bac                 | '     return _set_dos_error(r);
31bac     59 93 02 F6 | 	mov	arg01, local07
31bb0     18 F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31bb4     08 00 90 FD | 	jmp	#LR__5356
31bb8                 | LR__5355
31bb8     53 AD 62 FC | 	wrlong	local04, local01
31bbc                 | '   }
31bbc                 | '   fil->vfsdata = f;
31bbc                 | '   return 0;
31bbc     00 7A 06 F6 | 	mov	result1, #0
31bc0                 | LR__5356
31bc0     E7 F0 03 F6 | 	mov	ptra, fp
31bc4     F2 00 A0 FD | 	call	#popregs_
31bc8                 | _fatfs_cc_v_open_ret
31bc8     2D 00 64 FD | 	ret
31bcc                 | 
31bcc                 | _fatfs_cc_v_flush
31bcc     01 CA 05 F6 | 	mov	COUNT_, #1
31bd0     E8 00 A0 FD | 	call	#pushregs_
31bd4     49 A7 02 F6 | 	mov	local01, arg01
31bd8     80 F5 BF FD | 	call	#_fatfs_cc___default_flush
31bdc     53 A7 02 FB | 	rdlong	local01, local01
31be0     02 00 00 FF 
31be4     10 A6 0E F1 | 	add	local01, ##1040 wz
31be8                 | '         return _seterror( 5 );
31be8     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
31bec     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
31bf0     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
31bf4     01 7A 66 A6 |  if_e	neg	result1, #1
31bf8     10 00 90 AD |  if_e	jmp	#LR__5360
31bfc     53 93 02 F6 | 	mov	arg01, local01
31c00     FC E6 BF FD | 	call	#_fatfs_cc_f_sync
31c04     3D 93 02 F6 | 	mov	arg01, result1
31c08                 | '     }
31c08                 | ' #line 449 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31c08                 | '     result = f_sync(f);
31c08                 | ' #line 453 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31c08                 | '     return _set_dos_error(result);
31c08     C0 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1156
31c0c                 | LR__5360
31c0c     E7 F0 03 F6 | 	mov	ptra, fp
31c10     F2 00 A0 FD | 	call	#popregs_
31c14                 | _fatfs_cc_v_flush_ret
31c14     2D 00 64 FD | 	ret
31c18                 | 
31c18                 | _fatfs_cc_v_init
31c18                 | ' {
31c18                 | '     return 0;
31c18     00 7A 06 F6 | 	mov	result1, #0
31c1c                 | _fatfs_cc_v_init_ret
31c1c     2D 00 64 FD | 	ret
31c20                 | 
31c20                 | _fatfs_cc_v_deinit
31c20     92 01 00 FF 
31c24     44 95 06 F6 | 	mov	arg02, ##@LR__5486
31c28     00 92 06 F6 | 	mov	arg01, #0
31c2c     00 96 06 F6 | 	mov	arg03, #0
31c30     B8 D9 BF FD | 	call	#_fatfs_cc_f_mount
31c34     01 00 00 FF 
31c38     08 64 06 F1 | 	add	objptr, ##520
31c3c     32 93 02 FB | 	rdlong	arg01, objptr
31c40     04 64 06 F1 | 	add	objptr, #4
31c44     32 95 02 FB | 	rdlong	arg02, objptr
31c48     01 00 00 FF 
31c4c     0C 64 86 F1 | 	sub	objptr, ##524
31c50     2C 50 BF FD | 	call	#__system___freepins
31c54                 | ' #line 474 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31c54                 | '     _freepins(f_pinmask);
31c54                 | '     return 0;
31c54     00 7A 06 F6 | 	mov	result1, #0
31c58                 | _fatfs_cc_v_deinit_ret
31c58     2D 00 64 FD | 	ret
31c5c                 | 
31c5c                 | _fatfs_cc_get_vfs
31c5c     01 CA 05 F6 | 	mov	COUNT_, #1
31c60     E8 00 A0 FD | 	call	#pushregs_
31c64     49 A7 02 F6 | 	mov	local01, arg01
31c68     58 92 06 F6 | 	mov	arg01, #88
31c6c     74 67 BF FD | 	call	#__system___gc_alloc_managed
31c70     3D 93 02 F6 | 	mov	arg01, result1
31c74     32 7B 02 F6 | 	mov	result1, objptr
31c78     00 D8 05 FF 
31c7c     00 7A 46 F5 | 	or	result1, ##196083712
31c80     49 7B 62 FC | 	wrlong	result1, arg01
31c84     32 7B 02 F6 | 	mov	result1, objptr
31c88     00 E0 05 FF 
31c8c     00 7A 46 F5 | 	or	result1, ##197132288
31c90     04 92 06 F1 | 	add	arg01, #4
31c94     49 7B 62 FC | 	wrlong	result1, arg01
31c98     32 7B 02 F6 | 	mov	result1, objptr
31c9c     00 E8 05 FF 
31ca0     00 7A 46 F5 | 	or	result1, ##198180864
31ca4     04 92 06 F1 | 	add	arg01, #4
31ca8     49 7B 62 FC | 	wrlong	result1, arg01
31cac     32 7B 02 F6 | 	mov	result1, objptr
31cb0     00 F0 05 FF 
31cb4     00 7A 46 F5 | 	or	result1, ##199229440
31cb8     04 92 06 F1 | 	add	arg01, #4
31cbc     49 7B 62 FC | 	wrlong	result1, arg01
31cc0     32 7B 02 F6 | 	mov	result1, objptr
31cc4     00 F8 05 FF 
31cc8     00 7A 46 F5 | 	or	result1, ##200278016
31ccc     04 92 06 F1 | 	add	arg01, #4
31cd0     49 7B 62 FC | 	wrlong	result1, arg01
31cd4     32 7B 02 F6 | 	mov	result1, objptr
31cd8     3A 7A 26 F4 | 	bith	result1, #58
31cdc     04 92 06 F1 | 	add	arg01, #4
31ce0     49 7B 62 FC | 	wrlong	result1, arg01
31ce4     04 92 06 F1 | 	add	arg01, #4
31ce8     49 A7 62 FC | 	wrlong	local01, arg01
31cec     04 92 06 F1 | 	add	arg01, #4
31cf0     49 01 68 FC | 	wrlong	#0, arg01
31cf4     32 7B 02 F6 | 	mov	result1, objptr
31cf8     00 08 06 FF 
31cfc     00 7A 46 F5 | 	or	result1, ##202375168
31d00     04 92 06 F1 | 	add	arg01, #4
31d04     49 7B 62 FC | 	wrlong	result1, arg01
31d08     32 7B 02 F6 | 	mov	result1, objptr
31d0c     00 10 06 FF 
31d10     00 7A 46 F5 | 	or	result1, ##203423744
31d14     04 92 06 F1 | 	add	arg01, #4
31d18     49 7B 62 FC | 	wrlong	result1, arg01
31d1c     32 7B 02 F6 | 	mov	result1, objptr
31d20     00 18 06 FF 
31d24     00 7A 46 F5 | 	or	result1, ##204472320
31d28     04 92 06 F1 | 	add	arg01, #4
31d2c     49 7B 62 FC | 	wrlong	result1, arg01
31d30     32 7B 02 F6 | 	mov	result1, objptr
31d34     00 20 06 FF 
31d38     00 7A 46 F5 | 	or	result1, ##205520896
31d3c     04 92 06 F1 | 	add	arg01, #4
31d40     49 7B 62 FC | 	wrlong	result1, arg01
31d44     32 7B 02 F6 | 	mov	result1, objptr
31d48     00 28 06 FF 
31d4c     00 7A 46 F5 | 	or	result1, ##206569472
31d50     04 92 06 F1 | 	add	arg01, #4
31d54     49 7B 62 FC | 	wrlong	result1, arg01
31d58     32 7B 02 F6 | 	mov	result1, objptr
31d5c     00 30 06 FF 
31d60     00 7A 46 F5 | 	or	result1, ##207618048
31d64     04 92 06 F1 | 	add	arg01, #4
31d68     49 7B 62 FC | 	wrlong	result1, arg01
31d6c     32 7B 02 F6 | 	mov	result1, objptr
31d70     00 38 06 FF 
31d74     00 7A 46 F5 | 	or	result1, ##208666624
31d78     04 92 06 F1 | 	add	arg01, #4
31d7c     49 7B 62 FC | 	wrlong	result1, arg01
31d80     32 7B 02 F6 | 	mov	result1, objptr
31d84     00 40 06 FF 
31d88     00 7A 46 F5 | 	or	result1, ##209715200
31d8c     04 92 06 F1 | 	add	arg01, #4
31d90     49 7B 62 FC | 	wrlong	result1, arg01
31d94     32 7B 02 F6 | 	mov	result1, objptr
31d98     00 48 06 FF 
31d9c     00 7A 46 F5 | 	or	result1, ##210763776
31da0     04 92 06 F1 | 	add	arg01, #4
31da4     49 7B 62 FC | 	wrlong	result1, arg01
31da8     32 7B 02 F6 | 	mov	result1, objptr
31dac     00 50 06 FF 
31db0     00 7A 46 F5 | 	or	result1, ##211812352
31db4     04 92 06 F1 | 	add	arg01, #4
31db8     49 7B 62 FC | 	wrlong	result1, arg01
31dbc     32 7B 02 F6 | 	mov	result1, objptr
31dc0     00 58 06 FF 
31dc4     00 7A 46 F5 | 	or	result1, ##212860928
31dc8     04 92 06 F1 | 	add	arg01, #4
31dcc     49 7B 62 FC | 	wrlong	result1, arg01
31dd0     32 7B 02 F6 | 	mov	result1, objptr
31dd4     00 60 06 FF 
31dd8     00 7A 46 F5 | 	or	result1, ##213909504
31ddc     04 92 06 F1 | 	add	arg01, #4
31de0     49 7B 62 FC | 	wrlong	result1, arg01
31de4     04 92 06 F1 | 	add	arg01, #4
31de8     49 01 68 FC | 	wrlong	#0, arg01
31dec     04 92 06 F1 | 	add	arg01, #4
31df0     49 01 68 FC | 	wrlong	#0, arg01
31df4     54 92 86 F1 | 	sub	arg01, #84
31df8                 | ' 
31df8                 | '     v->close = &v_close;
31df8                 | '     v->read = &v_read;
31df8                 | '     v->write = &v_write;
31df8                 | '     v->lseek = &v_lseek;
31df8                 | '     v->ioctl = &v_ioctl;
31df8                 | '     v->flush = &v_flush;
31df8                 | '     v->vfs_data = ptr;
31df8                 | '     v->reserved = 0;
31df8                 | ' 
31df8                 | '     v->open = &v_open;
31df8                 | '     v->creat = &v_creat;
31df8                 | '     v->opendir = &v_opendir;
31df8                 | '     v->closedir = &v_closedir;
31df8                 | '     v->readdir = &v_readdir;
31df8                 | '     v->stat = &v_stat;
31df8                 | ' 
31df8                 | '     v->mkdir = &v_mkdir;
31df8                 | '     v->rmdir = &v_rmdir;
31df8                 | ' 
31df8                 | '     v->remove = &v_remove;
31df8                 | '     v->rename = &v_rename;
31df8                 | ' 
31df8                 | '     v->init = &v_init;
31df8                 | '     v->deinit = &v_deinit;
31df8                 | ' 
31df8                 | ' 
31df8                 | '     v->getcf = 0;
31df8                 | '     v->putcf = 0;
31df8                 | ' #line 532 "C:/Users/Piotr/Downloads/flexprop-6.9.10/flexprop/include/filesys/fatfs/fatfs.cc"
31df8                 | '     return v;
31df8     49 7B 02 F6 | 	mov	result1, arg01
31dfc     E7 F0 03 F6 | 	mov	ptra, fp
31e00     F2 00 A0 FD | 	call	#popregs_
31e04                 | _fatfs_cc_get_vfs_ret
31e04     2D 00 64 FD | 	ret
31e08                 | 
31e08                 | _fatfs_cc_gettimeofday
31e08     04 CA 05 F6 | 	mov	COUNT_, #4
31e0c     E8 00 A0 FD | 	call	#pushregs_
31e10     49 A7 02 F6 | 	mov	local01, arg01
31e14     24 2A BF FD | 	call	#__system___getus
31e18     3D 93 02 F6 | 	mov	arg01, result1
31e1c     02 00 00 FF 
31e20     08 6D 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1288
31e24     36 A9 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
31e28     49 7B 02 F6 | 	mov	result1, arg01
31e2c     54 7B 82 F1 | 	sub	result1, local02
31e30     A1 07 00 FF 
31e34     40 7A 16 FD | 	qdiv	result1, ##1000000
31e38     02 00 00 FF 
31e3c     08 6D 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1288
31e40     18 A8 62 FD | 	getqx	local02
31e44     A1 07 00 FF 
31e48     40 7A 16 FD | 	qdiv	result1, ##1000000
31e4c     00 A8 0E F2 | 	cmp	local02, #0 wz
31e50     19 AA 62 FD | 	getqy	local03
31e54     28 00 90 AD |  if_e	jmp	#LR__5370
31e58     02 00 00 FF 
31e5c     04 6D 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1284
31e60     36 AD 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
31e64     54 AD 02 F1 | 	add	local04, local02
31e68     36 AD 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
31e6c     55 93 82 F1 | 	sub	arg01, local03
31e70     04 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, #4
31e74     36 93 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
31e78     02 00 00 FF 
31e7c     08 6D 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1288
31e80                 | LR__5370
31e80     02 00 00 FF 
31e84     04 6D 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1284
31e88     36 AD 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
31e8c     02 00 00 FF 
31e90     04 6D 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1284
31e94     53 AD 62 FC | 	wrlong	local04, local01
31e98     04 A6 06 F1 | 	add	local01, #4
31e9c     53 AB 62 FC | 	wrlong	local03, local01
31ea0                 | '         lastsec += secs;
31ea0                 | '         lastus = now - leftover;
31ea0                 | '     }
31ea0                 | '     tv->tv_sec = lastsec;
31ea0                 | '     tv->tv_usec = leftover;
31ea0                 | '     return 0;
31ea0     00 7A 06 F6 | 	mov	result1, #0
31ea4     E7 F0 03 F6 | 	mov	ptra, fp
31ea8     F2 00 A0 FD | 	call	#popregs_
31eac                 | _fatfs_cc_gettimeofday_ret
31eac     2D 00 64 FD | 	ret
31eb0                 | 
31eb0                 | _fatfs_cc__is_leap_year
31eb0     49 7B 52 F6 | 	abs	result1, arg01 wc
31eb4     03 7A 06 F5 | 	and	result1, #3
31eb8     3D 7B 8A F6 | 	negc	result1, result1 wz
31ebc     38 00 90 5D |  if_ne	jmp	#LR__5381
31ec0     49 7B 52 F6 | 	abs	result1, arg01 wc
31ec4     64 7A 16 FD | 	qdiv	result1, #100
31ec8     19 7A 62 FD | 	getqy	result1
31ecc     3D 7B 8A F6 | 	negc	result1, result1 wz
31ed0     1C 00 90 5D |  if_ne	jmp	#LR__5380
31ed4     49 7B 52 F6 | 	abs	result1, arg01 wc
31ed8     90 7B 16 FD | 	qdiv	result1, #400
31edc                 | '       return (0 == y % 400);
31edc     00 7A 06 F6 | 	mov	result1, #0
31ee0     19 80 62 FD | 	getqy	_var01
31ee4     40 81 8A F6 | 	negc	_var01, _var01 wz
31ee8     01 7A 06 A6 |  if_e	mov	result1, #1
31eec     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
31ef0                 | LR__5380
31ef0                 | '     return 1;
31ef0     01 7A 06 F6 | 	mov	result1, #1
31ef4     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
31ef8                 | LR__5381
31ef8                 | '   }
31ef8                 | '   return 0;
31ef8     00 7A 06 F6 | 	mov	result1, #0
31efc                 | _fatfs_cc__is_leap_year_ret
31efc     2D 00 64 FD | 	ret
31f00                 | 
31f00                 | _fatfs_cc___tzoffset
31f00     49 81 0A F6 | 	mov	_var01, arg01 wz
31f04     FF FF FF FF 
31f08     4A FF 6B FC | 	wrlong	##-1, arg02
31f0c     01 82 06 F6 | 	mov	_var02, #1
31f10     40 85 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
31f14                 | '                 return 0;
31f14     00 7A 06 A6 |  if_e	mov	result1, #0
31f18     7C 02 90 AD |  if_e	jmp	#LR__5407
31f1c     4A 01 68 FC | 	wrlong	#0, arg02
31f20     36 87 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
31f24     02 00 00 FF 
31f28     DC 86 06 F1 | 	add	_var04, ##1244
31f2c     D7 26 48 FB | 	callpa	#(@LR__5391-@LR__5390)>>2,fcache_load_ptr_
31f30                 | ' 
31f30                 | '        *hasdst = 0;
31f30                 | ' 
31f30                 | ' 	n = stdname;
31f30                 | '         while (*s && isalpha(*s)) {
31f30                 | LR__5390
31f30     40 85 CA FA | 	rdbyte	_var03, _var01 wz
31f34     44 00 90 AD |  if_e	jmp	#LR__5392
31f38     40 93 C2 FA | 	rdbyte	arg01, _var01
31f3c                 | ' {
31f3c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
31f3c     80 92 36 F3 | 	fle	arg01, #128 wc
31f40                 | '     return __ctype[c];
31f40     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
31f44     02 00 00 FF 
31f48     0C 7B 06 F1 | 	add	result1, ##1292
31f4c     3D 93 02 F1 | 	add	arg01, result1
31f50     49 7B C2 FA | 	rdbyte	result1, arg01
31f54     0C 7A CE F7 | 	test	result1, #12 wz
31f58     20 00 90 AD |  if_e	jmp	#LR__5392
31f5c     40 89 02 F6 | 	mov	_var05, _var01
31f60     40 8B 02 F6 | 	mov	_var06, _var01
31f64     01 8A 06 F1 | 	add	_var06, #1
31f68     44 8D C2 FA | 	rdbyte	_var07, _var05
31f6c     45 81 02 F6 | 	mov	_var01, _var06
31f70     43 8D 42 FC | 	wrbyte	_var07, _var04
31f74     01 86 06 F1 | 	add	_var04, #1
31f78     B4 FF 9F FD | 	jmp	#LR__5390
31f7c                 | LR__5391
31f7c                 | LR__5392
31f7c     43 01 48 FC | 	wrbyte	#0, _var04
31f80     00 8E 06 F6 | 	mov	_var08, #0
31f84     40 85 C2 FA | 	rdbyte	_var03, _var01
31f88     2D 84 0E F2 | 	cmp	_var03, #45 wz
31f8c     01 82 66 A6 |  if_e	neg	_var02, #1
31f90     01 80 06 A1 |  if_e	add	_var01, #1
31f94     D7 26 48 FB | 	callpa	#(@LR__5394-@LR__5393)>>2,fcache_load_ptr_
31f98                 | '                 sgn = -1;
31f98                 | '                 s++;
31f98                 | '         }
31f98                 | '         while (isdigit(*s)) {
31f98                 | LR__5393
31f98     40 93 C2 FA | 	rdbyte	arg01, _var01
31f9c                 | ' {
31f9c                 | '   return  (__ctype_get(c) & 0x02 ) ;
31f9c     80 92 36 F3 | 	fle	arg01, #128 wc
31fa0                 | '     return __ctype[c];
31fa0     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
31fa4     02 00 00 FF 
31fa8     0C 7B 06 F1 | 	add	result1, ##1292
31fac     3D 93 02 F1 | 	add	arg01, result1
31fb0     49 7B C2 FA | 	rdbyte	result1, arg01
31fb4     02 7A CE F7 | 	test	result1, #2 wz
31fb8     28 00 90 AD |  if_e	jmp	#LR__5395
31fbc     47 85 02 F6 | 	mov	_var03, _var08
31fc0     02 84 66 F0 | 	shl	_var03, #2
31fc4     47 85 02 F1 | 	add	_var03, _var08
31fc8     01 84 66 F0 | 	shl	_var03, #1
31fcc     40 89 C2 FA | 	rdbyte	_var05, _var01
31fd0     30 88 86 F1 | 	sub	_var05, #48
31fd4     44 85 02 F1 | 	add	_var03, _var05
31fd8     42 8F 02 F6 | 	mov	_var08, _var03
31fdc     01 80 06 F1 | 	add	_var01, #1
31fe0     B4 FF 9F FD | 	jmp	#LR__5393
31fe4                 | LR__5394
31fe4                 | LR__5395
31fe4     07 00 00 FF 
31fe8     10 8E 06 FD | 	qmul	_var08, ##3600
31fec     40 85 C2 FA | 	rdbyte	_var03, _var01
31ff0     3A 84 0E F2 | 	cmp	_var03, #58 wz
31ff4     18 90 62 FD | 	getqx	_var09
31ff8     6C 00 90 5D |  if_ne	jmp	#LR__5399
31ffc     00 8E 06 F6 | 	mov	_var08, #0
32000     01 80 06 F1 | 	add	_var01, #1
32004     D7 26 48 FB | 	callpa	#(@LR__5397-@LR__5396)>>2,fcache_load_ptr_
32008                 | '                 x = 0;
32008                 | '                 s++;
32008                 | '                 while (isdigit(*s)) {
32008                 | LR__5396
32008     40 93 C2 FA | 	rdbyte	arg01, _var01
3200c                 | ' {
3200c                 | '   return  (__ctype_get(c) & 0x02 ) ;
3200c     80 92 36 F3 | 	fle	arg01, #128 wc
32010                 | '     return __ctype[c];
32010     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
32014     02 00 00 FF 
32018     0C 7B 06 F1 | 	add	result1, ##1292
3201c     3D 93 02 F1 | 	add	arg01, result1
32020     49 7B C2 FA | 	rdbyte	result1, arg01
32024     02 7A CE F7 | 	test	result1, #2 wz
32028     28 00 90 AD |  if_e	jmp	#LR__5398
3202c     47 85 02 F6 | 	mov	_var03, _var08
32030     02 84 66 F0 | 	shl	_var03, #2
32034     47 85 02 F1 | 	add	_var03, _var08
32038     01 84 66 F0 | 	shl	_var03, #1
3203c     40 89 C2 FA | 	rdbyte	_var05, _var01
32040     30 88 86 F1 | 	sub	_var05, #48
32044     44 85 02 F1 | 	add	_var03, _var05
32048     42 8F 02 F6 | 	mov	_var08, _var03
3204c     01 80 06 F1 | 	add	_var01, #1
32050     B4 FF 9F FD | 	jmp	#LR__5396
32054                 | LR__5397
32054                 | LR__5398
32054     47 8D 02 F6 | 	mov	_var07, _var08
32058     04 8C 66 F0 | 	shl	_var07, #4
3205c     47 8D 82 F1 | 	sub	_var07, _var08
32060     02 8C 66 F0 | 	shl	_var07, #2
32064     46 91 02 F1 | 	add	_var09, _var07
32068                 | LR__5399
32068     36 87 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
3206c     02 00 00 FF 
32070     E5 86 06 F1 | 	add	_var04, ##1253
32074     40 93 C2 FA | 	rdbyte	arg01, _var01
32078                 | ' {
32078                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
32078     80 92 36 F3 | 	fle	arg01, #128 wc
3207c                 | '     return __ctype[c];
3207c     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
32080     02 00 00 FF 
32084     0C 7B 06 F1 | 	add	result1, ##1292
32088     3D 93 02 F1 | 	add	arg01, result1
3208c     49 7B C2 FA | 	rdbyte	result1, arg01
32090     0C 7A CE F7 | 	test	result1, #12 wz
32094     4C 00 90 AD |  if_e	jmp	#LR__5402
32098     4A 03 68 FC | 	wrlong	#1, arg02
3209c                 | '                 *hasdst = 1;
3209c                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
3209c                 | LR__5400
3209c     40 85 CA FA | 	rdbyte	_var03, _var01 wz
320a0     40 00 90 AD |  if_e	jmp	#LR__5401
320a4     40 93 C2 FA | 	rdbyte	arg01, _var01
320a8                 | ' {
320a8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
320a8     80 92 36 F3 | 	fle	arg01, #128 wc
320ac                 | '     return __ctype[c];
320ac     36 7B 02 F6 | 	mov	result1, ptr__fatfs_cc_dat__
320b0     02 00 00 FF 
320b4     0C 7B 06 F1 | 	add	result1, ##1292
320b8     3D 93 02 F1 | 	add	arg01, result1
320bc     49 7B C2 FA | 	rdbyte	result1, arg01
320c0     0C 7A CE F7 | 	test	result1, #12 wz
320c4     1C 00 90 AD |  if_e	jmp	#LR__5401
320c8     40 8B 02 F6 | 	mov	_var06, _var01
320cc     01 8A 06 F1 | 	add	_var06, #1
320d0     40 8D C2 FA | 	rdbyte	_var07, _var01
320d4     45 81 02 F6 | 	mov	_var01, _var06
320d8     43 8D 42 FC | 	wrbyte	_var07, _var04
320dc     01 86 06 F1 | 	add	_var04, #1
320e0     B8 FF 9F FD | 	jmp	#LR__5400
320e4                 | LR__5401
320e4                 | LR__5402
320e4     43 01 48 FC | 	wrbyte	#0, _var04
320e8     02 00 00 FF 
320ec     DC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
320f0     36 85 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
320f4     02 00 00 FF 
320f8     DC 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1244
320fc     20 00 90 AD |  if_e	jmp	#LR__5403
32100     02 00 00 FF 
32104     DC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
32108     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3210c     08 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #8
32110     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
32114     02 00 00 FF 
32118     D4 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1236
3211c     1C 00 90 FD | 	jmp	#LR__5404
32120                 | LR__5403
32120     02 00 00 FF 
32124     EE 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1262
32128     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3212c     1A 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #26
32130     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
32134     02 00 00 FF 
32138     D4 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1236
3213c                 | LR__5404
3213c     02 00 00 FF 
32140     E5 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1253
32144     36 85 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
32148     02 00 00 FF 
3214c     E5 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1253
32150     20 00 90 AD |  if_e	jmp	#LR__5405
32154     02 00 00 FF 
32158     E5 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1253
3215c     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
32160     0D 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #13
32164     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
32168     02 00 00 FF 
3216c     D8 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1240
32170     1C 00 90 FD | 	jmp	#LR__5406
32174                 | LR__5405
32174     02 00 00 FF 
32178     DC 6C 06 F1 | 	add	ptr__fatfs_cc_dat__, ##1244
3217c     36 85 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
32180     04 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, #4
32184     36 85 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
32188     02 00 00 FF 
3218c     D8 6C 86 F1 | 	sub	ptr__fatfs_cc_dat__, ##1240
32190                 | LR__5406
32190     48 83 02 FD | 	qmul	_var02, _var09
32194                 | ' 		_tzname[1] = stdname;
32194                 | ' 
32194                 | '         return sgn * off;
32194     18 7A 62 FD | 	getqx	result1
32198                 | LR__5407
32198                 | _fatfs_cc___tzoffset_ret
32198     2D 00 64 FD | 	ret
3219c                 | 
3219c                 | _fatfs_cc___indst
3219c     10 92 06 F1 | 	add	arg01, #16
321a0     49 81 02 FB | 	rdlong	_var01, arg01
321a4     10 92 86 F1 | 	sub	arg01, #16
321a8     02 80 0E F2 | 	cmp	_var01, #2 wz
321ac     30 00 90 5D |  if_ne	jmp	#LR__5410
321b0     07 80 06 F6 | 	mov	_var01, #7
321b4     18 92 06 F1 | 	add	arg01, #24
321b8     49 83 02 FB | 	rdlong	_var02, arg01
321bc     41 81 02 F1 | 	add	_var01, _var02
321c0     0C 92 86 F1 | 	sub	arg01, #12
321c4     49 85 02 FB | 	rdlong	_var03, arg01
321c8     42 81 82 F1 | 	sub	_var01, _var03
321cc     00 80 56 F2 | 	cmps	_var01, #0 wc
321d0                 | '                         return 1;
321d0     01 7A 06 C6 |  if_b	mov	result1, #1
321d4     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
321d8                 | '                 return 0;
321d8     00 7A 06 F6 | 	mov	result1, #0
321dc     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
321e0                 | LR__5410
321e0     10 92 06 F1 | 	add	arg01, #16
321e4     49 81 02 FB | 	rdlong	_var01, arg01
321e8     10 92 86 F1 | 	sub	arg01, #16
321ec     0A 80 0E F2 | 	cmp	_var01, #10 wz
321f0     28 00 90 5D |  if_ne	jmp	#LR__5411
321f4     18 92 06 F1 | 	add	arg01, #24
321f8     49 81 02 FB | 	rdlong	_var01, arg01
321fc     0C 92 86 F1 | 	sub	arg01, #12
32200     49 87 02 FB | 	rdlong	_var04, arg01
32204     43 81 82 F1 | 	sub	_var01, _var04
32208     00 80 56 F2 | 	cmps	_var01, #0 wc
3220c                 | '                         return 0;
3220c     00 7A 06 C6 |  if_b	mov	result1, #0
32210     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
32214                 | '                 return 1;
32214     01 7A 06 F6 | 	mov	result1, #1
32218     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
3221c                 | LR__5411
3221c                 | '         }
3221c                 | ' 
3221c                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
3221c     00 80 06 F6 | 	mov	_var01, #0
32220     10 92 06 F1 | 	add	arg01, #16
32224     49 83 02 FB | 	rdlong	_var02, arg01
32228     10 92 86 F1 | 	sub	arg01, #16
3222c     03 82 56 F2 | 	cmps	_var02, #3 wc
32230     10 00 90 CD |  if_b	jmp	#LR__5412
32234     10 92 06 F1 | 	add	arg01, #16
32238     49 85 02 FB | 	rdlong	_var03, arg01
3223c     0A 84 56 F2 | 	cmps	_var03, #10 wc
32240     01 80 06 C6 |  if_b	mov	_var01, #1
32244                 | LR__5412
32244     40 7B 02 F6 | 	mov	result1, _var01
32248                 | _fatfs_cc___indst_ret
32248     2D 00 64 FD | 	ret
3224c                 | 
3224c                 | _fatfs_cc_disk_deinitialize
3224c     03 CA 05 F6 | 	mov	COUNT_, #3
32250     E8 00 A0 FD | 	call	#pushregs_
32254     01 00 00 FF 
32258     10 64 06 F1 | 	add	objptr, ##528
3225c     32 93 0A FB | 	rdlong	arg01, objptr wz
32260     01 00 00 FF 
32264     10 64 86 F1 | 	sub	objptr, ##528
32268                 | ' 
32268                 | '         return RES_NOTRDY;
32268     03 7A 06 A6 |  if_e	mov	result1, #3
3226c     4C 00 90 AD |  if_e	jmp	#LR__5420
32270     01 00 00 FF 
32274     10 64 06 F1 | 	add	objptr, ##528
32278     32 93 02 FB | 	rdlong	arg01, objptr
3227c     49 A7 02 F6 | 	mov	local01, arg01
32280     24 A6 06 F1 | 	add	local01, #36
32284     53 A7 02 FB | 	rdlong	local01, local01
32288     53 A9 02 F6 | 	mov	local02, local01
3228c     13 A6 46 F7 | 	zerox	local01, #19
32290     14 A8 46 F0 | 	shr	local02, #20
32294     02 A8 66 F0 | 	shl	local02, #2
32298     2D A9 02 F1 | 	add	local02, __methods__
3229c     54 A9 02 FB | 	rdlong	local02, local02
322a0     01 00 00 FF 
322a4     10 64 86 F1 | 	sub	objptr, ##528
322a8     32 AB 02 F6 | 	mov	local03, objptr
322ac     53 65 02 F6 | 	mov	objptr, local01
322b0     2D A8 62 FD | 	call	local02
322b4     55 65 02 F6 | 	mov	objptr, local03
322b8                 | '     }
322b8                 | '     fh->close(fh);
322b8                 | '     return RES_OK;
322b8     00 7A 06 F6 | 	mov	result1, #0
322bc                 | LR__5420
322bc     E7 F0 03 F6 | 	mov	ptra, fp
322c0     F2 00 A0 FD | 	call	#popregs_
322c4                 | _fatfs_cc_disk_deinitialize_ret
322c4     2D 00 64 FD | 	ret
322c8                 | 
322c8                 | ' 	
322c8                 | ' 	FUNCTION pfunc(c as integer) as integer
322c8                 | __system____strs_cl_pfunc_
322c8                 | ' 		if (i < 16) then
322c8     04 64 06 F1 | 	add	objptr, #4
322cc     32 7B 02 FB | 	rdlong	result1, objptr
322d0     04 64 86 F1 | 	sub	objptr, #4
322d4     10 7A 56 F2 | 	cmps	result1, #16 wc
322d8     2C 00 90 3D |  if_ae	jmp	#LR__5430
322dc     32 7B 02 FB | 	rdlong	result1, objptr
322e0     04 64 06 F1 | 	add	objptr, #4
322e4     32 81 02 FB | 	rdlong	_var01, objptr
322e8     3D 81 02 F1 | 	add	_var01, result1
322ec     40 93 42 FC | 	wrbyte	arg01, _var01
322f0     32 7B 02 FB | 	rdlong	result1, objptr
322f4     01 7A 06 F1 | 	add	result1, #1
322f8     32 7B 62 FC | 	wrlong	result1, objptr
322fc     04 64 86 F1 | 	sub	objptr, #4
32300                 | ' 			p(i) = c
32300                 | ' 			i = i+1
32300                 | ' 			return 1
32300     01 7A 06 F6 | 	mov	result1, #1
32304     04 00 90 FD | 	jmp	#__system____strs_cl_pfunc__ret
32308                 | LR__5430
32308                 | ' 			return -1
32308     01 7A 66 F6 | 	neg	result1, #1
3230c                 | __system____strs_cl_pfunc__ret
3230c     2D 00 64 FD | 	ret
32310                 | 
32310                 | __system___struct__s_vfs_file_t_putchar_
32310     04 CA 05 F6 | 	mov	COUNT_, #4
32314     E8 00 A0 FD | 	call	#pushregs_
32318     1C 64 06 F1 | 	add	objptr, #28
3231c     32 A7 0A FB | 	rdlong	local01, objptr wz
32320     1C 64 86 F1 | 	sub	objptr, #28
32324     00 7A 06 A6 |  if_e	mov	result1, #0
32328     48 00 90 AD |  if_e	jmp	#LR__5440
3232c     1C 64 06 F1 | 	add	objptr, #28
32330     32 A9 02 FB | 	rdlong	local02, objptr
32334     54 AB 02 F6 | 	mov	local03, local02
32338     1C 64 86 F1 | 	sub	objptr, #28
3233c     13 AA 46 F7 | 	zerox	local03, #19
32340     14 A8 46 F0 | 	shr	local02, #20
32344     02 A8 66 F0 | 	shl	local02, #2
32348     2D A9 02 F1 | 	add	local02, __methods__
3234c     54 A9 02 FB | 	rdlong	local02, local02
32350     32 95 02 F6 | 	mov	arg02, objptr
32354     32 AD 02 F6 | 	mov	local04, objptr
32358     55 65 02 F6 | 	mov	objptr, local03
3235c     2D A8 62 FD | 	call	local02
32360     56 65 02 F6 | 	mov	objptr, local04
32364                 | '     return (i < 0) ? 0 : 1;
32364     00 7A 56 F2 | 	cmps	result1, #0 wc
32368     00 A6 06 C6 |  if_b	mov	local01, #0
3236c     01 A6 06 36 |  if_ae	mov	local01, #1
32370     53 7B 02 F6 | 	mov	result1, local01
32374                 | LR__5440
32374     E7 F0 03 F6 | 	mov	ptra, fp
32378     F2 00 A0 FD | 	call	#popregs_
3237c                 | __system___struct__s_vfs_file_t_putchar__ret
3237c     2D 00 64 FD | 	ret
32380                 | 
32380                 | __system___struct__s_vfs_file_t_getchar_
32380     03 CA 05 F6 | 	mov	COUNT_, #3
32384     E8 00 A0 FD | 	call	#pushregs_
32388     20 64 06 F1 | 	add	objptr, #32
3238c     32 93 0A FB | 	rdlong	arg01, objptr wz
32390     20 64 86 F1 | 	sub	objptr, #32
32394     01 7A 66 A6 |  if_e	neg	result1, #1
32398     38 00 90 AD |  if_e	jmp	#LR__5450
3239c                 | '     return getcf(__this);
3239c     20 64 06 F1 | 	add	objptr, #32
323a0     32 A7 02 FB | 	rdlong	local01, objptr
323a4     53 A9 02 F6 | 	mov	local02, local01
323a8     20 64 86 F1 | 	sub	objptr, #32
323ac     13 A8 46 F7 | 	zerox	local02, #19
323b0     14 A6 46 F0 | 	shr	local01, #20
323b4     02 A6 66 F0 | 	shl	local01, #2
323b8     2D A7 02 F1 | 	add	local01, __methods__
323bc     53 A7 02 FB | 	rdlong	local01, local01
323c0     32 93 02 F6 | 	mov	arg01, objptr
323c4     32 AB 02 F6 | 	mov	local03, objptr
323c8     54 65 02 F6 | 	mov	objptr, local02
323cc     2D A6 62 FD | 	call	local01
323d0     55 65 02 F6 | 	mov	objptr, local03
323d4                 | LR__5450
323d4     E7 F0 03 F6 | 	mov	ptra, fp
323d8     F2 00 A0 FD | 	call	#popregs_
323dc                 | __system___struct__s_vfs_file_t_getchar__ret
323dc     2D 00 64 FD | 	ret
323e0                 | 
323e0                 | __system___struct___bas_wrap_sender_tx_
323e0     03 CA 05 F6 | 	mov	COUNT_, #3
323e4     E8 00 A0 FD | 	call	#pushregs_
323e8     32 A7 02 FB | 	rdlong	local01, objptr
323ec     53 A9 02 F6 | 	mov	local02, local01
323f0     13 A6 46 F7 | 	zerox	local01, #19
323f4     14 A8 46 F0 | 	shr	local02, #20
323f8     02 A8 66 F0 | 	shl	local02, #2
323fc     2D A9 02 F1 | 	add	local02, __methods__
32400     54 A9 02 FB | 	rdlong	local02, local02
32404     32 AB 02 F6 | 	mov	local03, objptr
32408     53 65 02 F6 | 	mov	objptr, local01
3240c     2D A8 62 FD | 	call	local02
32410     55 65 02 F6 | 	mov	objptr, local03
32414     01 7A 06 F6 | 	mov	result1, #1
32418     E7 F0 03 F6 | 	mov	ptra, fp
3241c     F2 00 A0 FD | 	call	#popregs_
32420                 | __system___struct___bas_wrap_sender_tx__ret
32420     2D 00 64 FD | 	ret
32424                 | 
32424                 | __system___struct___bas_wrap_sender_rx_
32424     03 CA 05 F6 | 	mov	COUNT_, #3
32428     E8 00 A0 FD | 	call	#pushregs_
3242c     04 64 06 F1 | 	add	objptr, #4
32430     32 A7 02 FB | 	rdlong	local01, objptr
32434     53 A9 02 F6 | 	mov	local02, local01
32438     04 64 86 F1 | 	sub	objptr, #4
3243c     13 A8 46 F7 | 	zerox	local02, #19
32440     14 A6 46 F0 | 	shr	local01, #20
32444     02 A6 66 F0 | 	shl	local01, #2
32448     2D A7 02 F1 | 	add	local01, __methods__
3244c     53 A7 02 FB | 	rdlong	local01, local01
32450     32 AB 02 F6 | 	mov	local03, objptr
32454     54 65 02 F6 | 	mov	objptr, local02
32458     2D A6 62 FD | 	call	local01
3245c     55 65 02 F6 | 	mov	objptr, local03
32460     E7 F0 03 F6 | 	mov	ptra, fp
32464     F2 00 A0 FD | 	call	#popregs_
32468                 | __system___struct___bas_wrap_sender_rx__ret
32468     2D 00 64 FD | 	ret
3246c                 | 
3246c                 | __system___struct___bas_wrap_sender_close_
3246c     03 CA 05 F6 | 	mov	COUNT_, #3
32470     E8 00 A0 FD | 	call	#pushregs_
32474     08 64 06 F1 | 	add	objptr, #8
32478     32 A7 02 FB | 	rdlong	local01, objptr
3247c     53 A9 02 F6 | 	mov	local02, local01
32480     08 64 86 F1 | 	sub	objptr, #8
32484     13 A8 46 F7 | 	zerox	local02, #19
32488     14 A6 46 F0 | 	shr	local01, #20
3248c     02 A6 66 F0 | 	shl	local01, #2
32490     2D A7 02 F1 | 	add	local01, __methods__
32494     53 A7 02 FB | 	rdlong	local01, local01
32498     32 AB 02 F6 | 	mov	local03, objptr
3249c     54 65 02 F6 | 	mov	objptr, local02
324a0     2D A6 62 FD | 	call	local01
324a4     55 65 02 F6 | 	mov	objptr, local03
324a8     E7 F0 03 F6 | 	mov	ptra, fp
324ac     F2 00 A0 FD | 	call	#popregs_
324b0                 | __system___struct___bas_wrap_sender_close__ret
324b0     2D 00 64 FD | 	ret
324b4                 | 
324b4                 | LR__5460
324b4     2F          | 	byte	"/"
324b5     00          | 	byte	0
324b6                 | LR__5461
324b6     69 6E 66    | 	byte	"inf"
324b9     00          | 	byte	0
324ba                 | LR__5462
324ba     6E 61 6E    | 	byte	"nan"
324bd     00          | 	byte	0
324be                 | LR__5463
324be                 | 	byte	
324be     00          | 	byte	0
324bf                 | LR__5464
324bf                 | 	byte	
324bf     00          | 	byte	0
324c0                 | LR__5465
324c0                 | 	byte	
324c0     00          | 	byte	0
324c1                 | LR__5466
324c1                 | 	byte	
324c1     00          | 	byte	0
324c2                 | LR__5467
324c2                 | 	byte	
324c2     00          | 	byte	0
324c3                 | LR__5468
324c3                 | 	byte	
324c3     00          | 	byte	0
324c4                 | LR__5469
324c4                 | 	byte	
324c4     00          | 	byte	0
324c5                 | LR__5470
324c5                 | 	byte	
324c5     00          | 	byte	0
324c6                 | LR__5471
324c6     00          | 	byte	0
324c7     00          | 	byte	0
324c8                 | LR__5472
324c8     00          | 	byte	0
324c9     00          | 	byte	0
324ca                 | LR__5473
324ca     00          | 	byte	0
324cb     00          | 	byte	0
324cc                 | LR__5474
324cc     20 21 21 21 
324d0     20 63 6F 72 
324d4     72 75 70 74 
324d8     65 64 20 68 
324dc     65 61 70 3F 
324e0     3F 3F 20 21 
324e4     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
324e7     00          | 	byte	0
324e8                 | LR__5475
324e8     20 21 21 21 
324ec     20 6F 75 74 
324f0     20 6F 66 20 
324f4     68 65 61 70 
324f8     20 6D 65 6D 
324fc     6F 72 79 20 
32500     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
32504     00          | 	byte	0
32505                 | LR__5476
32505     20 21 21 21 
32509     20 63 6F 72 
3250d     72 75 70 74 
32511     65 64 20 68 
32515     65 61 70 20 
32519     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
3251d     00          | 	byte	0
3251e                 | LR__5477
3251e     00          | 	byte	0
3251f     00          | 	byte	0
32520                 | LR__5478
32520     2E          | 	byte	"."
32521     00          | 	byte	0
32522                 | LR__5479
32522     00          | 	byte	0
32523     00          | 	byte	0
32524                 | LR__5480
32524     00          | 	byte	0
32525     00          | 	byte	0
32526                 | LR__5481
32526     00          | 	byte	0
32527     00          | 	byte	0
32528                 | LR__5482
32528     54 5A       | 	byte	"TZ"
3252a     00          | 	byte	0
3252b                 | LR__5483
3252b     2A 3A 3C 3E 
3252f     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
32533     00          | 	byte	0
32534                 | LR__5484
32534     2B 2C 3B 3D 
32538     5B 5D       | 	byte	"+,;=[]"
3253a     00          | 	byte	0
3253b                 | LR__5485
3253b     46 41 54 33 
3253f     32 20 20 20 | 	byte	"FAT32   "
32543     00          | 	byte	0
32544                 | LR__5486
32544     00          | 	byte	0
32545     00          | 	byte	0
32546                 | LR__5487
32546                 | 	byte	
32546     00          | 	byte	0
32547                 | LR__5488
32547                 | 	byte	
32547     00          | 	byte	0
32548                 | LR__5489
32548                 | 	byte	
32548     00          | 	byte	0
32549                 | LR__5490
32549                 | 	byte	
32549     00          | 	byte	0
3254a                 | LR__5491
3254a     22          | 	byte	34
3254b     00          | 	byte	0
3254c                 | LR__5492
3254c     22          | 	byte	34
3254d     00          | 	byte	0
3254e                 | LR__5493
3254e     3A          | 	byte	":"
3254f     00          | 	byte	0
32550                 | LR__5494
32550                 | 	byte	
32550     00          | 	byte	0
32551                 | LR__5495
32551                 | 	byte	
32551     00          | 	byte	0
32552                 | LR__5496
32552                 | 	byte	
32552     00          | 	byte	0
32553                 | LR__5497
32553                 | 	byte	
32553     00          | 	byte	0
32554                 | LR__5498
32554                 | 	byte	
32554     00          | 	byte	0
32555                 | LR__5499
32555                 | 	byte	
32555     00          | 	byte	0
32556                 | LR__5500
32556                 | 	byte	
32556     00          | 	byte	0
32557                 | LR__5501
32557     30          | 	byte	"0"
32558     00          | 	byte	0
32559                 | LR__5502
32559     22          | 	byte	34
3255a     00          | 	byte	0
3255b                 | LR__5503
3255b     22          | 	byte	34
3255c     00          | 	byte	0
3255d                 | LR__5504
3255d     22          | 	byte	34
3255e     00          | 	byte	0
3255f                 | LR__5505
3255f     22          | 	byte	34
32560     00          | 	byte	0
32561                 | LR__5506
32561     22          | 	byte	34
32562     00          | 	byte	0
32563                 | LR__5507
32563     3E          | 	byte	">"
32564     00          | 	byte	0
32565                 | LR__5508
32565     3C          | 	byte	"<"
32566     00          | 	byte	0
32567                 | LR__5509
32567     2B          | 	byte	"+"
32568     00          | 	byte	0
32569                 | LR__5510
32569     2D          | 	byte	"-"
3256a     00          | 	byte	0
3256b                 | LR__5511
3256b     2A          | 	byte	"*"
3256c     00          | 	byte	0
3256d                 | LR__5512
3256d     2F          | 	byte	"/"
3256e     00          | 	byte	0
3256f                 | LR__5513
3256f     5E          | 	byte	"^"
32570     00          | 	byte	0
32571                 | LR__5514
32571     3D          | 	byte	"="
32572     00          | 	byte	0
32573                 | LR__5515
32573     2B          | 	byte	"+"
32574     00          | 	byte	0
32575                 | LR__5516
32575     2B          | 	byte	"+"
32576     00          | 	byte	0
32577                 | LR__5517
32577     2D          | 	byte	"-"
32578     00          | 	byte	0
32579                 | LR__5518
32579     2D          | 	byte	"-"
3257a     00          | 	byte	0
3257b                 | LR__5519
3257b     3C          | 	byte	"<"
3257c     00          | 	byte	0
3257d                 | LR__5520
3257d     3E          | 	byte	">"
3257e     00          | 	byte	0
3257f                 | LR__5521
3257f     22          | 	byte	34
32580     00          | 	byte	0
32581                 | LR__5522
32581     22          | 	byte	34
32582     00          | 	byte	0
32583                 | LR__5523
32583     65 6C 73 65 | 	byte	"else"
32587     00          | 	byte	0
32588                 | LR__5524
32588     74 68 65 6E | 	byte	"then"
3258c     00          | 	byte	0
3258d                 | LR__5525
3258d     3F          | 	byte	"?"
3258e     00          | 	byte	0
3258f                 | LR__5526
3258f     3F          | 	byte	"?"
32590     00          | 	byte	0
32591                 | LR__5527
32591     2E          | 	byte	"."
32592     00          | 	byte	0
32593                 | LR__5528
32593     6D 6F 75 73 
32597     65          | 	byte	"mouse"
32598     00          | 	byte	0
32599                 | LR__5529
32599     63 75 72 73 
3259d     6F 72       | 	byte	"cursor"
3259f     00          | 	byte	0
325a0                 | LR__5530
325a0     63 6C 69 63 
325a4     6B          | 	byte	"click"
325a5     00          | 	byte	0
325a6                 | LR__5531
325a6     6F 6E       | 	byte	"on"
325a8     00          | 	byte	0
325a9                 | LR__5532
325a9     31          | 	byte	"1"
325aa     00          | 	byte	0
325ab                 | LR__5533
325ab     6F 66 66    | 	byte	"off"
325ae     00          | 	byte	0
325af                 | LR__5534
325af     30          | 	byte	"0"
325b0     00          | 	byte	0
325b1                 | LR__5535
325b1     6D 6F 64 65 | 	byte	"mode"
325b5     00          | 	byte	0
325b6                 | LR__5536
325b6     6D 2E       | 	byte	"m."
325b8     00          | 	byte	0
325b9                 | LR__5537
325b9     61 74 61 72 
325bd     69          | 	byte	"atari"
325be     00          | 	byte	0
325bf                 | LR__5538
325bf     30          | 	byte	"0"
325c0     00          | 	byte	0
325c1                 | LR__5539
325c1     70 63 5F 61 
325c5     6D 62 65 72 | 	byte	"pc_amber"
325c9     00          | 	byte	0
325ca                 | LR__5540
325ca     31          | 	byte	"1"
325cb     00          | 	byte	0
325cc                 | LR__5541
325cc     70 63 5F 67 
325d0     72 65 65 6E | 	byte	"pc_green"
325d4     00          | 	byte	0
325d5                 | LR__5542
325d5     32          | 	byte	"2"
325d6     00          | 	byte	0
325d7                 | LR__5543
325d7     70 63 5F 77 
325db     68 69 74 65 | 	byte	"pc_white"
325df     00          | 	byte	0
325e0                 | LR__5544
325e0     33          | 	byte	"3"
325e1     00          | 	byte	0
325e2                 | LR__5545
325e2     73 74       | 	byte	"st"
325e4     00          | 	byte	0
325e5                 | LR__5546
325e5     34          | 	byte	"4"
325e6     00          | 	byte	0
325e7                 | LR__5547
325e7     61 6D 69 67 
325eb     61          | 	byte	"amiga"
325ec     00          | 	byte	0
325ed                 | LR__5548
325ed     35          | 	byte	"5"
325ee     00          | 	byte	0
325ef                 | LR__5549
325ef                 | 	byte	
325ef     00          | 	byte	0
325f0                 | LR__5550
325f0     6C 6F 61 64 | 	byte	"load"
325f4     00          | 	byte	0
325f5                 | LR__5551
325f5     73 61 76 65 | 	byte	"save"
325f9     00          | 	byte	0
325fa                 | LR__5552
325fa     62 72 75 6E | 	byte	"brun"
325fe     00          | 	byte	0
325ff                 | LR__5553
325ff     72 75 6E    | 	byte	"run"
32602     00          | 	byte	0
32603                 | LR__5554
32603     6C 6F 2E    | 	byte	"lo."
32606     00          | 	byte	0
32607                 | LR__5555
32607     73 2E       | 	byte	"s."
32609     00          | 	byte	0
3260a                 | LR__5556
3260a     62 72 2E    | 	byte	"br."
3260d     00          | 	byte	0
3260e                 | LR__5557
3260e     65 6E 74 65 
32612     72          | 	byte	"enter"
32613     00          | 	byte	0
32614                 | LR__5558
32614     65 2E       | 	byte	"e."
32616     00          | 	byte	0
32617                 | LR__5559
32617     24          | 	byte	"$"
32618     00          | 	byte	0
32619                 | LR__5560
32619     64 65 6C 65 
3261d     74 65       | 	byte	"delete"
3261f     00          | 	byte	0
32620                 | LR__5561
32620     6D 6B 64 69 
32624     72          | 	byte	"mkdir"
32625     00          | 	byte	0
32626                 | LR__5562
32626     24          | 	byte	"$"
32627     00          | 	byte	0
32628                 | LR__5563
32628     63 6F 70 79 | 	byte	"copy"
3262c     00          | 	byte	0
3262d                 | LR__5564
3262d     24          | 	byte	"$"
3262e     00          | 	byte	0
3262f                 | LR__5565
3262f     63 6F 70 79 | 	byte	"copy"
32633     00          | 	byte	0
32634                 | LR__5566
32634     24          | 	byte	"$"
32635     00          | 	byte	0
32636                 | LR__5567
32636     63 64       | 	byte	"cd"
32638     00          | 	byte	0
32639                 | LR__5568
32639     63 64 2E    | 	byte	"cd."
3263c     00          | 	byte	0
3263d                 | LR__5569
3263d     2E          | 	byte	"."
3263e     00          | 	byte	0
3263f                 | LR__5570
3263f     2E 2E       | 	byte	".."
32641     00          | 	byte	0
32642                 | LR__5571
32642     63 64       | 	byte	"cd"
32644     00          | 	byte	0
32645                 | LR__5572
32645     2F          | 	byte	"/"
32646     00          | 	byte	0
32647                 | LR__5573
32647                 | 	byte	
32647     00          | 	byte	0
32648                 | LR__5574
32648                 | 	byte	
32648     00          | 	byte	0
32649                 | LR__5575
32649                 | 	byte	
32649     00          | 	byte	0
3264a                 | LR__5576
3264a                 | 	byte	
3264a     00          | 	byte	0
3264b                 | LR__5577
3264b                 | 	byte	
3264b     00          | 	byte	0
3264c                 | LR__5578
3264c     52 65 61 64 
32650     79          | 	byte	"Ready"
32651     00          | 	byte	0
32652                 | LR__5579
32652     2B          | 	byte	"+"
32653     00          | 	byte	0
32654                 | LR__5580
32654     2D          | 	byte	"-"
32655     00          | 	byte	0
32656                 | LR__5581
32656     6F 72       | 	byte	"or"
32658     00          | 	byte	0
32659                 | LR__5582
32659     78 6F 72    | 	byte	"xor"
3265c     00          | 	byte	0
3265d                 | LR__5583
3265d     2A          | 	byte	"*"
3265e     00          | 	byte	0
3265f                 | LR__5584
3265f     2F          | 	byte	"/"
32660     00          | 	byte	0
32661                 | LR__5585
32661     61 6E 64    | 	byte	"and"
32664     00          | 	byte	0
32665                 | LR__5586
32665     64 69 76    | 	byte	"div"
32668     00          | 	byte	0
32669                 | LR__5587
32669     6D 6F 64    | 	byte	"mod"
3266c     00          | 	byte	0
3266d                 | LR__5588
3266d     73 68 6C    | 	byte	"shl"
32670     00          | 	byte	0
32671                 | LR__5589
32671     73 68 72    | 	byte	"shr"
32674     00          | 	byte	0
32675                 | LR__5590
32675     5E          | 	byte	"^"
32676     00          | 	byte	0
32677                 | LR__5591
32677     6E 6F 74    | 	byte	"not"
3267a     00          | 	byte	0
3267b                 | LR__5592
3267b     40          | 	byte	"@"
3267c     00          | 	byte	0
3267d                 | LR__5593
3267d     3D          | 	byte	"="
3267e     00          | 	byte	0
3267f                 | LR__5594
3267f     3E 3D       | 	byte	">="
32681     00          | 	byte	0
32682                 | LR__5595
32682     3C 3D       | 	byte	"<="
32684     00          | 	byte	0
32685                 | LR__5596
32685     3C          | 	byte	"<"
32686     00          | 	byte	0
32687                 | LR__5597
32687     3E          | 	byte	">"
32688     00          | 	byte	0
32689                 | LR__5598
32689     3C 3E       | 	byte	"<>"
3268b     00          | 	byte	0
3268c                 | LR__5599
3268c     2B 2B       | 	byte	"++"
3268e     00          | 	byte	0
3268f                 | LR__5600
3268f     2D 2D       | 	byte	"--"
32691     00          | 	byte	0
32692                 | LR__5601
32692     23          | 	byte	"#"
32693     00          | 	byte	0
32694                 | LR__5602
32694     30          | 	byte	"0"
32695     00          | 	byte	0
32696                 | LR__5603
32696     39          | 	byte	"9"
32697     00          | 	byte	0
32698                 | LR__5604
32698     23 72 65 61 
3269c     64          | 	byte	"#read"
3269d     00          | 	byte	0
3269e                 | LR__5605
3269e     23 77 72 69 
326a2     74 65       | 	byte	"#write"
326a4     00          | 	byte	0
326a5                 | LR__5606
326a5     23 61 70 70 
326a9     65 6E 64    | 	byte	"#append"
326ac     00          | 	byte	0
326ad                 | LR__5607
326ad     23          | 	byte	"#"
326ae     00          | 	byte	0
326af                 | LR__5608
326af     23          | 	byte	"#"
326b0     00          | 	byte	0
326b1                 | LR__5609
326b1     2D          | 	byte	"-"
326b2     00          | 	byte	0
326b3                 | LR__5610
326b3     30          | 	byte	"0"
326b4     00          | 	byte	0
326b5                 | LR__5611
326b5     63          | 	byte	"c"
326b6     00          | 	byte	0
326b7                 | LR__5612
326b7     63 23       | 	byte	"c#"
326b9     00          | 	byte	0
326ba                 | LR__5613
326ba     64          | 	byte	"d"
326bb     00          | 	byte	0
326bc                 | LR__5614
326bc     64 23       | 	byte	"d#"
326be     00          | 	byte	0
326bf                 | LR__5615
326bf     65          | 	byte	"e"
326c0     00          | 	byte	0
326c1                 | LR__5616
326c1     66          | 	byte	"f"
326c2     00          | 	byte	0
326c3                 | LR__5617
326c3     66 23       | 	byte	"f#"
326c5     00          | 	byte	0
326c6                 | LR__5618
326c6     67          | 	byte	"g"
326c7     00          | 	byte	0
326c8                 | LR__5619
326c8     67 23       | 	byte	"g#"
326ca     00          | 	byte	0
326cb                 | LR__5620
326cb     61          | 	byte	"a"
326cc     00          | 	byte	0
326cd                 | LR__5621
326cd     61 23       | 	byte	"a#"
326cf     00          | 	byte	0
326d0                 | LR__5622
326d0     68          | 	byte	"h"
326d1     00          | 	byte	0
326d2                 | LR__5623
326d2     62          | 	byte	"b"
326d3     00          | 	byte	0
326d4                 | LR__5624
326d4     2B          | 	byte	"+"
326d5     00          | 	byte	0
326d6                 | LR__5625
326d6     2D          | 	byte	"-"
326d7     00          | 	byte	0
326d8                 | LR__5626
326d8     3D          | 	byte	"="
326d9     00          | 	byte	0
326da                 | LR__5627
326da     2C          | 	byte	","
326db     00          | 	byte	0
326dc                 | LR__5628
326dc     2A          | 	byte	"*"
326dd     00          | 	byte	0
326de                 | LR__5629
326de     2F          | 	byte	"/"
326df     00          | 	byte	0
326e0                 | LR__5630
326e0     3B          | 	byte	";"
326e1     00          | 	byte	0
326e2                 | LR__5631
326e2     22          | 	byte	34
326e3     00          | 	byte	0
326e4                 | LR__5632
326e4     5E          | 	byte	"^"
326e5     00          | 	byte	0
326e6                 | LR__5633
326e6     29          | 	byte	")"
326e7     00          | 	byte	0
326e8                 | LR__5634
326e8     28          | 	byte	"("
326e9     00          | 	byte	0
326ea                 | LR__5635
326ea     3A          | 	byte	":"
326eb     00          | 	byte	0
326ec                 | LR__5636
326ec     20          | 	byte	" "
326ed     00          | 	byte	0
326ee                 | LR__5637
326ee     3E          | 	byte	">"
326ef     00          | 	byte	0
326f0                 | LR__5638
326f0     3C          | 	byte	"<"
326f1     00          | 	byte	0
326f2                 | LR__5639
326f2     3D          | 	byte	"="
326f3     00          | 	byte	0
326f4                 | LR__5640
326f4     62 65 65 70 | 	byte	"beep"
326f8     00          | 	byte	0
326f9                 | LR__5641
326f9     62 2E       | 	byte	"b."
326fb     00          | 	byte	0
326fc                 | LR__5642
326fc     62 6C 69 74 | 	byte	"blit"
32700     00          | 	byte	0
32701                 | LR__5643
32701     62 6F 78    | 	byte	"box"
32704     00          | 	byte	0
32705                 | LR__5644
32705     62 72 75 6E | 	byte	"brun"
32709     00          | 	byte	0
3270a                 | LR__5645
3270a     62 72 2E    | 	byte	"br."
3270d     00          | 	byte	0
3270e                 | LR__5646
3270e     63 64       | 	byte	"cd"
32710     00          | 	byte	0
32711                 | LR__5647
32711     63 68 61 6E 
32715     67 65 66 72 
32719     65 71       | 	byte	"changefreq"
3271b     00          | 	byte	0
3271c                 | LR__5648
3271c     63 66 2E    | 	byte	"cf."
3271f     00          | 	byte	0
32720                 | LR__5649
32720     63 68 61 6E 
32724     67 65 70 61 
32728     6E          | 	byte	"changepan"
32729     00          | 	byte	0
3272a                 | LR__5650
3272a     63 70 2E    | 	byte	"cp."
3272d     00          | 	byte	0
3272e                 | LR__5651
3272e     63 68 61 6E 
32732     67 65 76 6F 
32736     6C          | 	byte	"changevol"
32737     00          | 	byte	0
32738                 | LR__5652
32738     63 76 2E    | 	byte	"cv."
3273b     00          | 	byte	0
3273c                 | LR__5653
3273c     63 68 61 6E 
32740     67 65 77 61 
32744     76 65       | 	byte	"changewave"
32746     00          | 	byte	0
32747                 | LR__5654
32747     63 77 2E    | 	byte	"cw."
3274a     00          | 	byte	0
3274b                 | LR__5655
3274b     63 69 72 63 
3274f     6C 65       | 	byte	"circle"
32751     00          | 	byte	0
32752                 | LR__5656
32752     63 69 2E    | 	byte	"ci."
32755     00          | 	byte	0
32756                 | LR__5657
32756     63 6C 69 63 
3275a     6B          | 	byte	"click"
3275b     00          | 	byte	0
3275c                 | LR__5658
3275c     63 6C 6F 73 
32760     65          | 	byte	"close"
32761     00          | 	byte	0
32762                 | LR__5659
32762     63 6C 73    | 	byte	"cls"
32765     00          | 	byte	0
32766                 | LR__5660
32766     63 6F 67 73 
3276a     74 6F 70    | 	byte	"cogstop"
3276d     00          | 	byte	0
3276e                 | LR__5661
3276e     63 6F 6C 6F 
32772     72          | 	byte	"color"
32773     00          | 	byte	0
32774                 | LR__5662
32774     63 2E       | 	byte	"c."
32776     00          | 	byte	0
32777                 | LR__5663
32777     63 6F 70 79 | 	byte	"copy"
3277b     00          | 	byte	0
3277c                 | LR__5664
3277c     63 75 72 73 
32780     6F 72       | 	byte	"cursor"
32782     00          | 	byte	0
32783                 | LR__5665
32783     64 61 74 61 | 	byte	"data"
32787     00          | 	byte	0
32788                 | LR__5666
32788     64 65 66 63 
3278c     68 61 72    | 	byte	"defchar"
3278f     00          | 	byte	0
32790                 | LR__5667
32790     64 65 66 73 
32794     6E 64       | 	byte	"defsnd"
32796     00          | 	byte	0
32797                 | LR__5668
32797     64 65 66 65 
3279b     6E 76       | 	byte	"defenv"
3279d     00          | 	byte	0
3279e                 | LR__5669
3279e     64 65 66 73 
327a2     70 72 69 74 
327a6     65          | 	byte	"defsprite"
327a7     00          | 	byte	0
327a8                 | LR__5670
327a8     64 73 2E    | 	byte	"ds."
327ab     00          | 	byte	0
327ac                 | LR__5671
327ac     64 65 67    | 	byte	"deg"
327af     00          | 	byte	0
327b0                 | LR__5672
327b0     64 65 6C 65 
327b4     74 65       | 	byte	"delete"
327b6     00          | 	byte	0
327b7                 | LR__5673
327b7     64 69 6D    | 	byte	"dim"
327ba     00          | 	byte	0
327bb                 | LR__5674
327bb     64 69 72    | 	byte	"dir"
327be     00          | 	byte	0
327bf                 | LR__5675
327bf     64 70 6F 6B 
327c3     65          | 	byte	"dpoke"
327c4     00          | 	byte	0
327c5                 | LR__5676
327c5     64 72 61 77 | 	byte	"draw"
327c9     00          | 	byte	0
327ca                 | LR__5677
327ca     64 72 61 77 
327ce     74 6F       | 	byte	"drawto"
327d0     00          | 	byte	0
327d1                 | LR__5678
327d1     64 72 2E    | 	byte	"dr."
327d4     00          | 	byte	0
327d5                 | LR__5679
327d5     65 6C 73 65 | 	byte	"else"
327d9     00          | 	byte	0
327da                 | LR__5680
327da     65 6E 64    | 	byte	"end"
327dd     00          | 	byte	0
327de                 | LR__5681
327de     65 6E 74 65 
327e2     72          | 	byte	"enter"
327e3     00          | 	byte	0
327e4                 | LR__5682
327e4     65 2E       | 	byte	"e."
327e6     00          | 	byte	0
327e7                 | LR__5683
327e7     66 63 69 72 
327eb     63 6C 65    | 	byte	"fcircle"
327ee     00          | 	byte	0
327ef                 | LR__5684
327ef     66 63 2E    | 	byte	"fc."
327f2     00          | 	byte	0
327f3                 | LR__5685
327f3     66 69 6C 6C | 	byte	"fill"
327f7     00          | 	byte	0
327f8                 | LR__5686
327f8     66 69 2E    | 	byte	"fi."
327fb     00          | 	byte	0
327fc                 | LR__5687
327fc     66 6F 6E 74 | 	byte	"font"
32800     00          | 	byte	0
32801                 | LR__5688
32801     66 6F 72    | 	byte	"for"
32804     00          | 	byte	0
32805                 | LR__5689
32805     66 2E       | 	byte	"f."
32807     00          | 	byte	0
32808                 | LR__5690
32808     66 72 61 6D 
3280c     65          | 	byte	"frame"
3280d     00          | 	byte	0
3280e                 | LR__5691
3280e     66 72 2E    | 	byte	"fr."
32811     00          | 	byte	0
32812                 | LR__5692
32812     67 65 74    | 	byte	"get"
32815     00          | 	byte	0
32816                 | LR__5693
32816     67 6F 73 75 
3281a     62          | 	byte	"gosub"
3281b     00          | 	byte	0
3281c                 | LR__5694
3281c     67 6F 74 6F | 	byte	"goto"
32820     00          | 	byte	0
32821                 | LR__5695
32821     67 2E       | 	byte	"g."
32823     00          | 	byte	0
32824                 | LR__5696
32824     69 66       | 	byte	"if"
32826     00          | 	byte	0
32827                 | LR__5697
32827     69 6E 6B    | 	byte	"ink"
3282a     00          | 	byte	0
3282b                 | LR__5698
3282b     69 2E       | 	byte	"i."
3282d     00          | 	byte	0
3282e                 | LR__5699
3282e     69 6E 70 75 
32832     74          | 	byte	"input"
32833     00          | 	byte	0
32834                 | LR__5700
32834     6C 69 73 74 | 	byte	"list"
32838     00          | 	byte	0
32839                 | LR__5701
32839     6C 2E       | 	byte	"l."
3283b     00          | 	byte	0
3283c                 | LR__5702
3283c     6C 6F 61 64 | 	byte	"load"
32840     00          | 	byte	0
32841                 | LR__5703
32841     6C 6F 2E    | 	byte	"lo."
32844     00          | 	byte	0
32845                 | LR__5704
32845     6C 70 6F 6B 
32849     65          | 	byte	"lpoke"
3284a     00          | 	byte	0
3284b                 | LR__5705
3284b     6D 6B 64 69 
3284f     72          | 	byte	"mkdir"
32850     00          | 	byte	0
32851                 | LR__5706
32851     6D 6F 64 65 | 	byte	"mode"
32855     00          | 	byte	0
32856                 | LR__5707
32856     6D 2E       | 	byte	"m."
32858     00          | 	byte	0
32859                 | LR__5708
32859     6D 6F 75 73 
3285d     65          | 	byte	"mouse"
3285e     00          | 	byte	0
3285f                 | LR__5709
3285f     6E 65 77    | 	byte	"new"
32862     00          | 	byte	0
32863                 | LR__5710
32863     6E 65 78 74 | 	byte	"next"
32867     00          | 	byte	0
32868                 | LR__5711
32868     6E 2E       | 	byte	"n."
3286a     00          | 	byte	0
3286b                 | LR__5712
3286b     6F 6E       | 	byte	"on"
3286d     00          | 	byte	0
3286e                 | LR__5713
3286e     6F 70 65 6E | 	byte	"open"
32872     00          | 	byte	0
32873                 | LR__5714
32873     70 61 70 65 
32877     72          | 	byte	"paper"
32878     00          | 	byte	0
32879                 | LR__5715
32879     70 61 2E    | 	byte	"pa."
3287c     00          | 	byte	0
3287d                 | LR__5716
3287d     70 69 6E 66 
32881     6C 6F 61 74 | 	byte	"pinfloat"
32885     00          | 	byte	0
32886                 | LR__5717
32886     70 69 6E 68 
3288a     69          | 	byte	"pinhi"
3288b     00          | 	byte	0
3288c                 | LR__5718
3288c     70 69 6E 6C 
32890     6F          | 	byte	"pinlo"
32891     00          | 	byte	0
32892                 | LR__5719
32892     70 69 6E 73 
32896     74 61 72 74 | 	byte	"pinstart"
3289a     00          | 	byte	0
3289b                 | LR__5720
3289b     70 69 6E 74 
3289f     6F 67 67 6C 
328a3     65          | 	byte	"pintoggle"
328a4     00          | 	byte	0
328a5                 | LR__5721
328a5     70 69 6E 77 
328a9     72 69 74 65 | 	byte	"pinwrite"
328ad     00          | 	byte	0
328ae                 | LR__5722
328ae     70 6C 61 79 | 	byte	"play"
328b2     00          | 	byte	0
328b3                 | LR__5723
328b3     70 2E       | 	byte	"p."
328b5     00          | 	byte	0
328b6                 | LR__5724
328b6     70 6C 6F 74 | 	byte	"plot"
328ba     00          | 	byte	0
328bb                 | LR__5725
328bb     70 6C 2E    | 	byte	"pl."
328be     00          | 	byte	0
328bf                 | LR__5726
328bf     70 6F 6B 65 | 	byte	"poke"
328c3     00          | 	byte	0
328c4                 | LR__5727
328c4     70 6F 70    | 	byte	"pop"
328c7     00          | 	byte	0
328c8                 | LR__5728
328c8     70 6F 73 69 
328cc     74 69 6F 6E | 	byte	"position"
328d0     00          | 	byte	0
328d1                 | LR__5729
328d1     70 6F 73 2E | 	byte	"pos."
328d5     00          | 	byte	0
328d6                 | LR__5730
328d6     70 72 69 6E 
328da     74          | 	byte	"print"
328db     00          | 	byte	0
328dc                 | LR__5731
328dc     3F          | 	byte	"?"
328dd     00          | 	byte	0
328de                 | LR__5732
328de     70 75 74    | 	byte	"put"
328e1     00          | 	byte	0
328e2                 | LR__5733
328e2     72 61 64    | 	byte	"rad"
328e5     00          | 	byte	0
328e6                 | LR__5734
328e6     72 65 61 64 | 	byte	"read"
328ea     00          | 	byte	0
328eb                 | LR__5735
328eb     72 65 6C 65 
328ef     61 73 65    | 	byte	"release"
328f2     00          | 	byte	0
328f3                 | LR__5736
328f3     72 65 6D    | 	byte	"rem"
328f6     00          | 	byte	0
328f7                 | LR__5737
328f7     27          | 	byte	"'"
328f8     00          | 	byte	0
328f9                 | LR__5738
328f9     72 65 73 74 
328fd     6F 72 65    | 	byte	"restore"
32900     00          | 	byte	0
32901                 | LR__5739
32901     72 65 73 74 
32905     6F 72 65 70 
32909     61 6C 65 74 
3290d     74 65       | 	byte	"restorepalette"
3290f     00          | 	byte	0
32910                 | LR__5740
32910     72 70 2E    | 	byte	"rp."
32913     00          | 	byte	0
32914                 | LR__5741
32914     72 65 74 75 
32918     72 6E       | 	byte	"return"
3291a     00          | 	byte	0
3291b                 | LR__5742
3291b     72 75 6E    | 	byte	"run"
3291e     00          | 	byte	0
3291f                 | LR__5743
3291f     72 2E       | 	byte	"r."
32921     00          | 	byte	0
32922                 | LR__5744
32922     73 61 76 65 | 	byte	"save"
32926     00          | 	byte	0
32927                 | LR__5745
32927     73 2E       | 	byte	"s."
32929     00          | 	byte	0
3292a                 | LR__5746
3292a     73 65 74 63 
3292e     6F 6C 6F 72 | 	byte	"setcolor"
32932     00          | 	byte	0
32933                 | LR__5747
32933     73 63 2E    | 	byte	"sc."
32936     00          | 	byte	0
32937                 | LR__5748
32937     73 65 74 61 
3293b     6D 6F 64 65 | 	byte	"setamode"
3293f     00          | 	byte	0
32940                 | LR__5749
32940     73 61 2E    | 	byte	"sa."
32943     00          | 	byte	0
32944                 | LR__5750
32944     73 65 74 64 
32948     65 6C 61 79 | 	byte	"setdelay"
3294c     00          | 	byte	0
3294d                 | LR__5751
3294d     73 64 2E    | 	byte	"sd."
32950     00          | 	byte	0
32951                 | LR__5752
32951     73 65 74 65 
32955     6E 76       | 	byte	"setenv"
32957     00          | 	byte	0
32958                 | LR__5753
32958     73 65 2E    | 	byte	"se."
3295b     00          | 	byte	0
3295c                 | LR__5754
3295c     73 65 74 6C 
32960     65 6E       | 	byte	"setlen"
32962     00          | 	byte	0
32963                 | LR__5755
32963     73 6C 2E    | 	byte	"sl."
32966     00          | 	byte	0
32967                 | LR__5756
32967     73 65 74 70 
3296b     61 6E       | 	byte	"setpan"
3296d     00          | 	byte	0
3296e                 | LR__5757
3296e     73 70 2E    | 	byte	"sp."
32971     00          | 	byte	0
32972                 | LR__5758
32972     73 65 74 73 
32976     75 73 74 61 
3297a     69 6E       | 	byte	"setsustain"
3297c     00          | 	byte	0
3297d                 | LR__5759
3297d     73 73 2E    | 	byte	"ss."
32980     00          | 	byte	0
32981                 | LR__5760
32981     73 65 74 76 
32985     6F 6C       | 	byte	"setvol"
32987     00          | 	byte	0
32988                 | LR__5761
32988     73 76 2E    | 	byte	"sv."
3298b     00          | 	byte	0
3298c                 | LR__5762
3298c     73 65 74 77 
32990     61 76 65    | 	byte	"setwave"
32993     00          | 	byte	0
32994                 | LR__5763
32994     73 77 2E    | 	byte	"sw."
32997     00          | 	byte	0
32998                 | LR__5764
32998     73 65 74 77 
3299c     61 76       | 	byte	"setwav"
3299e     00          | 	byte	0
3299f                 | LR__5765
3299f     73 68 75 74 
329a3     75 70       | 	byte	"shutup"
329a5     00          | 	byte	0
329a6                 | LR__5766
329a6     73 68 2E    | 	byte	"sh."
329a9     00          | 	byte	0
329aa                 | LR__5767
329aa     73 6F 75 6E 
329ae     64          | 	byte	"sound"
329af     00          | 	byte	0
329b0                 | LR__5768
329b0     73 6F 2E    | 	byte	"so."
329b3     00          | 	byte	0
329b4                 | LR__5769
329b4     73 70 72 69 
329b8     74 65       | 	byte	"sprite"
329ba     00          | 	byte	0
329bb                 | LR__5770
329bb     73 70 72 2E | 	byte	"spr."
329bf     00          | 	byte	0
329c0                 | LR__5771
329c0     74 68 65 6E | 	byte	"then"
329c4     00          | 	byte	0
329c5                 | LR__5772
329c5     77 61 69 74 
329c9     6D 73       | 	byte	"waitms"
329cb     00          | 	byte	0
329cc                 | LR__5773
329cc     77 2E       | 	byte	"w."
329ce     00          | 	byte	0
329cf                 | LR__5774
329cf     77 61 69 74 
329d3     63 6C 6F 63 
329d7     6B          | 	byte	"waitclock"
329d8     00          | 	byte	0
329d9                 | LR__5775
329d9     77 63 2E    | 	byte	"wc."
329dc     00          | 	byte	0
329dd                 | LR__5776
329dd     77 61 69 74 
329e1     76 62 6C    | 	byte	"waitvbl"
329e4     00          | 	byte	0
329e5                 | LR__5777
329e5     77 76 2E    | 	byte	"wv."
329e8     00          | 	byte	0
329e9                 | LR__5778
329e9     77 72 70 69 
329ed     6E          | 	byte	"wrpin"
329ee     00          | 	byte	0
329ef                 | LR__5779
329ef     77 78 70 69 
329f3     6E          | 	byte	"wxpin"
329f4     00          | 	byte	0
329f5                 | LR__5780
329f5     77 79 70 69 
329f9     6E          | 	byte	"wypin"
329fa     00          | 	byte	0
329fb                 | LR__5781
329fb     61 62 73    | 	byte	"abs"
329fe     00          | 	byte	0
329ff                 | LR__5782
329ff     61 63 6F 73 | 	byte	"acos"
32a03     00          | 	byte	0
32a04                 | LR__5783
32a04     61 64 72    | 	byte	"adr"
32a07     00          | 	byte	0
32a08                 | LR__5784
32a08     61 64 64 72 | 	byte	"addr"
32a0c     00          | 	byte	0
32a0d                 | LR__5785
32a0d     61 73 63    | 	byte	"asc"
32a10     00          | 	byte	0
32a11                 | LR__5786
32a11     61 73 69 6E | 	byte	"asin"
32a15     00          | 	byte	0
32a16                 | LR__5787
32a16     61 74 6E    | 	byte	"atn"
32a19     00          | 	byte	0
32a1a                 | LR__5788
32a1a     62 69 6E 24 | 	byte	"bin$"
32a1e     00          | 	byte	0
32a1f                 | LR__5789
32a1f     63 68 72 24 | 	byte	"chr$"
32a23     00          | 	byte	0
32a24                 | LR__5790
32a24     63 6F 67 69 
32a28     6E 69 74    | 	byte	"coginit"
32a2b     00          | 	byte	0
32a2c                 | LR__5791
32a2c     63 6F 73    | 	byte	"cos"
32a2f     00          | 	byte	0
32a30                 | LR__5792
32a30     64 70 65 65 
32a34     6B          | 	byte	"dpeek"
32a35     00          | 	byte	0
32a36                 | LR__5793
32a36     66 69 6E 64 
32a3a     66 69 72 73 
32a3e     74          | 	byte	"findfirst"
32a3f     00          | 	byte	0
32a40                 | LR__5794
32a40     66 69 6E 64 
32a44     6E 65 78 74 | 	byte	"findnext"
32a48     00          | 	byte	0
32a49                 | LR__5795
32a49     66 72 61 6D 
32a4d     65 62 75 66 | 	byte	"framebuf"
32a51     00          | 	byte	0
32a52                 | LR__5796
32a52     66 62 2E    | 	byte	"fb."
32a55     00          | 	byte	0
32a56                 | LR__5797
32a56     66 72 65    | 	byte	"fre"
32a59     00          | 	byte	0
32a5a                 | LR__5798
32a5a     67 63 2E    | 	byte	"gc."
32a5d     00          | 	byte	0
32a5e                 | LR__5799
32a5e     67 65 74 63 
32a62     6F 6C 6F 72 | 	byte	"getcolor"
32a66     00          | 	byte	0
32a67                 | LR__5800
32a67     67 65 74 70 
32a6b     69 78 65 6C | 	byte	"getpixel"
32a6f     00          | 	byte	0
32a70                 | LR__5801
32a70     67 65 2E    | 	byte	"ge."
32a73     00          | 	byte	0
32a74                 | LR__5802
32a74     67 65 74 65 
32a78     6E 76 73 75 
32a7c     73 74 61 69 
32a80     6E          | 	byte	"getenvsustain"
32a81     00          | 	byte	0
32a82                 | LR__5803
32a82     67 65 74 6E 
32a86     6F 74 65 76 
32a8a     61 6C 75 65 | 	byte	"getnotevalue"
32a8e     00          | 	byte	0
32a8f                 | LR__5804
32a8f     67 65 74 72 
32a93     65 61 6C 66 
32a97     72 65 71    | 	byte	"getrealfreq"
32a9a     00          | 	byte	0
32a9b                 | LR__5805
32a9b     67 65 74 74 
32a9f     69 6D 65    | 	byte	"gettime"
32aa2     00          | 	byte	0
32aa3                 | LR__5806
32aa3     67 74 2E    | 	byte	"gt."
32aa6     00          | 	byte	0
32aa7                 | LR__5807
32aa7     68 65 78 24 | 	byte	"hex$"
32aab     00          | 	byte	0
32aac                 | LR__5808
32aac     69 6E 6B 65 
32ab0     79 24       | 	byte	"inkey$"
32ab2     00          | 	byte	0
32ab3                 | LR__5809
32ab3     69 6E 74    | 	byte	"int"
32ab6     00          | 	byte	0
32ab7                 | LR__5810
32ab7     6C 65 66 74 
32abb     24          | 	byte	"left$"
32abc     00          | 	byte	0
32abd                 | LR__5811
32abd     6C 65 6E    | 	byte	"len"
32ac0     00          | 	byte	0
32ac1                 | LR__5812
32ac1     6C 6F 67    | 	byte	"log"
32ac4     00          | 	byte	0
32ac5                 | LR__5813
32ac5     6C 70 65 65 
32ac9     6B          | 	byte	"lpeek"
32aca     00          | 	byte	0
32acb                 | LR__5814
32acb     6D 65 6D 74 
32acf     6F 70       | 	byte	"memtop"
32ad1     00          | 	byte	0
32ad2                 | LR__5815
32ad2     6D 65 6D 6C 
32ad6     6F          | 	byte	"memlo"
32ad7     00          | 	byte	0
32ad8                 | LR__5816
32ad8     6D 69 64 24 | 	byte	"mid$"
32adc     00          | 	byte	0
32add                 | LR__5817
32add     6D 6F 75 73 
32ae1     65 6B       | 	byte	"mousek"
32ae3     00          | 	byte	0
32ae4                 | LR__5818
32ae4     6D 6F 75 73 
32ae8     65 77       | 	byte	"mousew"
32aea     00          | 	byte	0
32aeb                 | LR__5819
32aeb     6D 6F 75 73 
32aef     65 78       | 	byte	"mousex"
32af1     00          | 	byte	0
32af2                 | LR__5820
32af2     6D 6F 75 73 
32af6     65 79       | 	byte	"mousey"
32af8     00          | 	byte	0
32af9                 | LR__5821
32af9     70 61 64 73 | 	byte	"pads"
32afd     00          | 	byte	0
32afe                 | LR__5822
32afe     70 61 64 77 | 	byte	"padw"
32b02     00          | 	byte	0
32b03                 | LR__5823
32b03     70 61 64 78 | 	byte	"padx"
32b07     00          | 	byte	0
32b08                 | LR__5824
32b08     70 61 64 79 | 	byte	"pady"
32b0c     00          | 	byte	0
32b0d                 | LR__5825
32b0d     70 61 64 7A | 	byte	"padz"
32b11     00          | 	byte	0
32b12                 | LR__5826
32b12     70 61 64 72 
32b16     78          | 	byte	"padrx"
32b17     00          | 	byte	0
32b18                 | LR__5827
32b18     70 61 64 72 
32b1c     79          | 	byte	"padry"
32b1d     00          | 	byte	0
32b1e                 | LR__5828
32b1e     70 61 64 72 
32b22     7A          | 	byte	"padrz"
32b23     00          | 	byte	0
32b24                 | LR__5829
32b24     70 61 64 68 | 	byte	"padh"
32b28     00          | 	byte	0
32b29                 | LR__5830
32b29     70 65 65 6B | 	byte	"peek"
32b2d     00          | 	byte	0
32b2e                 | LR__5831
32b2e     70 69 6E 72 
32b32     65 61 64    | 	byte	"pinread"
32b35     00          | 	byte	0
32b36                 | LR__5832
32b36     72 64 70 69 
32b3a     6E          | 	byte	"rdpin"
32b3b     00          | 	byte	0
32b3c                 | LR__5833
32b3c     72 69 67 68 
32b40     74 24       | 	byte	"right$"
32b42     00          | 	byte	0
32b43                 | LR__5834
32b43     72 71 70 69 
32b47     6E          | 	byte	"rqpin"
32b48     00          | 	byte	0
32b49                 | LR__5835
32b49     72 6F 75 6E 
32b4d     64          | 	byte	"round"
32b4e     00          | 	byte	0
32b4f                 | LR__5836
32b4f     72 6E 64    | 	byte	"rnd"
32b52     00          | 	byte	0
32b53                 | LR__5837
32b53     73 69 6E    | 	byte	"sin"
32b56     00          | 	byte	0
32b57                 | LR__5838
32b57     73 71 72    | 	byte	"sqr"
32b5a     00          | 	byte	0
32b5b                 | LR__5839
32b5b     73 74 69 63 
32b5f     6B          | 	byte	"stick"
32b60     00          | 	byte	0
32b61                 | LR__5840
32b61     73 74 72 69 
32b65     67          | 	byte	"strig"
32b66     00          | 	byte	0
32b67                 | LR__5841
32b67     73 74 72 24 | 	byte	"str$"
32b6b     00          | 	byte	0
32b6c                 | LR__5842
32b6c     74 61 6E    | 	byte	"tan"
32b6f     00          | 	byte	0
32b70                 | LR__5843
32b70     76 61 6C    | 	byte	"val"
32b73     00          | 	byte	0
32b74                 | LR__5844
32b74     76 61 72 70 
32b78     74 72       | 	byte	"varptr"
32b7a     00          | 	byte	0
32b7b                 | LR__5845
32b7b     61          | 	byte	"a"
32b7c     00          | 	byte	0
32b7d                 | LR__5846
32b7d     7A          | 	byte	"z"
32b7e     00          | 	byte	0
32b7f                 | LR__5847
32b7f     5F          | 	byte	"_"
32b80     00          | 	byte	0
32b81                 | LR__5848
32b81     61          | 	byte	"a"
32b82     00          | 	byte	0
32b83                 | LR__5849
32b83     7A          | 	byte	"z"
32b84     00          | 	byte	0
32b85                 | LR__5850
32b85     30          | 	byte	"0"
32b86     00          | 	byte	0
32b87                 | LR__5851
32b87     39          | 	byte	"9"
32b88     00          | 	byte	0
32b89                 | LR__5852
32b89     5F          | 	byte	"_"
32b8a     00          | 	byte	0
32b8b                 | LR__5853
32b8b     2E          | 	byte	"."
32b8c     00          | 	byte	0
32b8d                 | LR__5854
32b8d     61          | 	byte	"a"
32b8e     00          | 	byte	0
32b8f                 | LR__5855
32b8f     7A          | 	byte	"z"
32b90     00          | 	byte	0
32b91                 | LR__5856
32b91     30          | 	byte	"0"
32b92     00          | 	byte	0
32b93                 | LR__5857
32b93     39          | 	byte	"9"
32b94     00          | 	byte	0
32b95                 | LR__5858
32b95     5F          | 	byte	"_"
32b96     00          | 	byte	0
32b97                 | LR__5859
32b97     24          | 	byte	"$"
32b98     00          | 	byte	0
32b99                 | LR__5860
32b99     25          | 	byte	"%"
32b9a     00          | 	byte	0
32b9b                 | LR__5861
32b9b     21          | 	byte	"!"
32b9c     00          | 	byte	0
32b9d                 | LR__5862
32b9d     30          | 	byte	"0"
32b9e     00          | 	byte	0
32b9f                 | LR__5863
32b9f     39          | 	byte	"9"
32ba0     00          | 	byte	0
32ba1                 | LR__5864
32ba1     2E          | 	byte	"."
32ba2     00          | 	byte	0
32ba3                 | LR__5865
32ba3     24          | 	byte	"$"
32ba4     00          | 	byte	0
32ba5                 | LR__5866
32ba5     25          | 	byte	"%"
32ba6     00          | 	byte	0
32ba7                 | LR__5867
32ba7     2D          | 	byte	"-"
32ba8     00          | 	byte	0
32ba9                 | LR__5868
32ba9     2E          | 	byte	"."
32baa     00          | 	byte	0
32bab                 | LR__5869
32bab     24          | 	byte	"$"
32bac     00          | 	byte	0
32bad                 | LR__5870
32bad     25          | 	byte	"%"
32bae     00          | 	byte	0
32baf                 | LR__5871
32baf     30          | 	byte	"0"
32bb0     00          | 	byte	0
32bb1                 | LR__5872
32bb1     39          | 	byte	"9"
32bb2     00          | 	byte	0
32bb3                 | LR__5873
32bb3     5F          | 	byte	"_"
32bb4     00          | 	byte	0
32bb5                 | LR__5874
32bb5     2E          | 	byte	"."
32bb6     00          | 	byte	0
32bb7                 | LR__5875
32bb7     45          | 	byte	"E"
32bb8     00          | 	byte	0
32bb9                 | LR__5876
32bb9     65          | 	byte	"e"
32bba     00          | 	byte	0
32bbb                 | LR__5877
32bbb     2D          | 	byte	"-"
32bbc     00          | 	byte	0
32bbd                 | LR__5878
32bbd     61          | 	byte	"a"
32bbe     00          | 	byte	0
32bbf                 | LR__5879
32bbf     66          | 	byte	"f"
32bc0     00          | 	byte	0
32bc1                 | LR__5880
32bc1     30          | 	byte	"0"
32bc2     00          | 	byte	0
32bc3                 | LR__5881
32bc3     31          | 	byte	"1"
32bc4     00          | 	byte	0
32bc5                 | LR__5882
32bc5     5F          | 	byte	"_"
32bc6     00          | 	byte	0
32bc7                 | LR__5883
32bc7     2D          | 	byte	"-"
32bc8     00          | 	byte	0
32bc9                 | LR__5884
32bc9     65          | 	byte	"e"
32bca     00          | 	byte	0
32bcb                 | LR__5885
32bcb     2E          | 	byte	"."
32bcc     00          | 	byte	0
32bcd                 | LR__5886
32bcd     45          | 	byte	"E"
32bce     00          | 	byte	0
32bcf                 | LR__5887
32bcf     65          | 	byte	"e"
32bd0     00          | 	byte	0
32bd1                 | LR__5888
32bd1     30          | 	byte	"0"
32bd2     00          | 	byte	0
32bd3                 | LR__5889
32bd3     39          | 	byte	"9"
32bd4     00          | 	byte	0
32bd5                 | LR__5890
32bd5     24          | 	byte	"$"
32bd6     00          | 	byte	0
32bd7                 | LR__5891
32bd7     25          | 	byte	"%"
32bd8     00          | 	byte	0
32bd9                 | LR__5892
32bd9     2D          | 	byte	"-"
32bda     00          | 	byte	0
32bdb                 | LR__5893
32bdb     24          | 	byte	"$"
32bdc     00          | 	byte	0
32bdd                 | LR__5894
32bdd     25          | 	byte	"%"
32bde     00          | 	byte	0
32bdf                 | LR__5895
32bdf     30          | 	byte	"0"
32be0     00          | 	byte	0
32be1                 | LR__5896
32be1     39          | 	byte	"9"
32be2     00          | 	byte	0
32be3                 | LR__5897
32be3     5F          | 	byte	"_"
32be4     00          | 	byte	0
32be5                 | LR__5898
32be5     30          | 	byte	"0"
32be6     00          | 	byte	0
32be7                 | LR__5899
32be7     39          | 	byte	"9"
32be8     00          | 	byte	0
32be9                 | LR__5900
32be9     61          | 	byte	"a"
32bea     00          | 	byte	0
32beb                 | LR__5901
32beb     66          | 	byte	"f"
32bec     00          | 	byte	0
32bed                 | LR__5902
32bed     5F          | 	byte	"_"
32bee     00          | 	byte	0
32bef                 | LR__5903
32bef     30          | 	byte	"0"
32bf0     00          | 	byte	0
32bf1                 | LR__5904
32bf1     31          | 	byte	"1"
32bf2     00          | 	byte	0
32bf3                 | LR__5905
32bf3     5F          | 	byte	"_"
32bf4     00          | 	byte	0
32bf5                 | LR__5906
32bf5     30          | 	byte	"0"
32bf6     00          | 	byte	0
32bf7                 | LR__5907
32bf7     39          | 	byte	"9"
32bf8     00          | 	byte	0
32bf9                 | LR__5908
32bf9     5F          | 	byte	"_"
32bfa     00          | 	byte	0
32bfb                 | LR__5909
32bfb     22          | 	byte	34
32bfc     00          | 	byte	0
32bfd                 | LR__5910
32bfd     22          | 	byte	34
32bfe     00          | 	byte	0
32bff                 | LR__5911
32bff     44 69 6D 3A 
32c03     20 61 74 20 
32c07     6C 69 6E 65 
32c0b     20          | 	byte	"Dim: at line "
32c0c     00          | 	byte	0
32c0d                 | LR__5912
32c0d     3A 20 77 61 
32c11     72 6E 69 6E 
32c15     67 3A 20 74 
32c19     68 65 20 76 
32c1d     61 72 69 61 
32c21     62 6C 65 20 
32c25     65 78 69 73 
32c29     74 65 64 2E | 	byte	": warning: the variable existed."
32c2d     00          | 	byte	0
32c2e                 | LR__5913
32c2e     28          | 	byte	"("
32c2f     00          | 	byte	0
32c30                 | LR__5914
32c30     61 73       | 	byte	"as"
32c32     00          | 	byte	0
32c33                 | LR__5915
32c33     61 73       | 	byte	"as"
32c35     00          | 	byte	0
32c36                 | LR__5916
32c36     2C          | 	byte	","
32c37     00          | 	byte	0
32c38                 | LR__5917
32c38     29          | 	byte	")"
32c39     00          | 	byte	0
32c3a                 | LR__5918
32c3a     29          | 	byte	")"
32c3b     00          | 	byte	0
32c3c                 | LR__5919
32c3c     61 73       | 	byte	"as"
32c3e     00          | 	byte	0
32c3f                 | LR__5920
32c3f     62 79 74 65 | 	byte	"byte"
32c43     00          | 	byte	0
32c44                 | LR__5921
32c44     75 62 79 74 
32c48     65          | 	byte	"ubyte"
32c49     00          | 	byte	0
32c4a                 | LR__5922
32c4a     73 68 6F 72 
32c4e     74          | 	byte	"short"
32c4f     00          | 	byte	0
32c50                 | LR__5923
32c50     75 73 68 6F 
32c54     72 74       | 	byte	"ushort"
32c56     00          | 	byte	0
32c57                 | LR__5924
32c57     6C 6F 6E 67 | 	byte	"long"
32c5b     00          | 	byte	0
32c5c                 | LR__5925
32c5c     69 6E 74 65 
32c60     67 65 72    | 	byte	"integer"
32c63     00          | 	byte	0
32c64                 | LR__5926
32c64     75 6C 6F 6E 
32c68     67          | 	byte	"ulong"
32c69     00          | 	byte	0
32c6a                 | LR__5927
32c6a     69 6E 74 36 
32c6e     34          | 	byte	"int64"
32c6f     00          | 	byte	0
32c70                 | LR__5928
32c70     75 69 6E 74 
32c74     36 34       | 	byte	"uint64"
32c76     00          | 	byte	0
32c77                 | LR__5929
32c77     73 69 6E 67 
32c7b     6C 65       | 	byte	"single"
32c7d     00          | 	byte	0
32c7e                 | LR__5930
32c7e     64 6F 75 62 
32c82     6C 65       | 	byte	"double"
32c84     00          | 	byte	0
32c85                 | LR__5931
32c85     73 74 72 69 
32c89     6E 67       | 	byte	"string"
32c8b     00          | 	byte	0
32c8c                 | LR__5932
32c8c     74 6F       | 	byte	"to"
32c8e     00          | 	byte	0
32c8f                 | LR__5933
32c8f     73 74 65 70 | 	byte	"step"
32c93     00          | 	byte	0
32c94                 | LR__5934
32c94     73 2E       | 	byte	"s."
32c96     00          | 	byte	0
32c97                 | LR__5935
32c97     73 2E       | 	byte	"s."
32c99     00          | 	byte	0
32c9a                 | LR__5936
32c9a     67 6F 74 6F | 	byte	"goto"
32c9e     00          | 	byte	0
32c9f                 | LR__5937
32c9f     67 6F 73 75 
32ca3     62          | 	byte	"gosub"
32ca4     00          | 	byte	0
32ca5                 | LR__5938
32ca5     24          | 	byte	"$"
32ca6     00          | 	byte	0
32ca7                 | LR__5939
32ca7     26 68       | 	byte	"&h"
32ca9     00          | 	byte	0
32caa                 | LR__5940
32caa     25          | 	byte	"%"
32cab     00          | 	byte	0
32cac                 | LR__5941
32cac     26 62       | 	byte	"&b"
32cae     00          | 	byte	0
32caf                 | LR__5942
32caf                 | 	byte	
32caf     00          | 	byte	0
32cb0                 | LR__5943
32cb0     61 63 6F 73 
32cb4     3A 20       | 	byte	"acos: "
32cb6     00          | 	byte	0
32cb7                 | LR__5944
32cb7     61 73 63 3A 
32cbb     20          | 	byte	"asc: "
32cbc     00          | 	byte	0
32cbd                 | LR__5945
32cbd     61 73 63 3A 
32cc1     20          | 	byte	"asc: "
32cc2     00          | 	byte	0
32cc3                 | LR__5946
32cc3     61 73 69 6E 
32cc7     3A 20       | 	byte	"asin: "
32cc9     00          | 	byte	0
32cca                 | LR__5947
32cca     61 74 6E 3A 
32cce     20          | 	byte	"atn: "
32ccf     00          | 	byte	0
32cd0                 | LR__5948
32cd0     62 6C 69 74 
32cd4     3A 20       | 	byte	"blit: "
32cd6     00          | 	byte	0
32cd7                 | LR__5949
32cd7     62 69 6E 24 
32cdb     3A 20       | 	byte	"bin$: "
32cdd     00          | 	byte	0
32cde                 | LR__5950
32cde     2F          | 	byte	"/"
32cdf     00          | 	byte	0
32ce0                 | LR__5951
32ce0     2F 73 64 2F 
32ce4     62 69 6E 2F | 	byte	"/sd/bin/"
32ce8     00          | 	byte	0
32ce9                 | LR__5952
32ce9     53 79 73 74 
32ced     65 6D 20 65 
32cf1     72 72 6F 72 
32cf5     20          | 	byte	"System error "
32cf6     00          | 	byte	0
32cf7                 | LR__5953
32cf7     3A 20       | 	byte	": "
32cf9     00          | 	byte	0
32cfa                 | LR__5954
32cfa     2A          | 	byte	"*"
32cfb     00          | 	byte	0
32cfc                 | LR__5955
32cfc     2E 2E       | 	byte	".."
32cfe     00          | 	byte	0
32cff                 | LR__5956
32cff     2F          | 	byte	"/"
32d00     00          | 	byte	0
32d01                 | LR__5957
32d01     2F          | 	byte	"/"
32d02     00          | 	byte	0
32d03                 | LR__5958
32d03     53 79 73 74 
32d07     65 6D 20 65 
32d0b     72 72 6F 72 
32d0f     20          | 	byte	"System error "
32d10     00          | 	byte	0
32d11                 | LR__5959
32d11     3A 20       | 	byte	": "
32d13     00          | 	byte	0
32d14                 | LR__5960
32d14     43 75 72 72 
32d18     65 6E 74 20 
32d1c     64 69 72 65 
32d20     63 74 6F 72 
32d24     79 3A 20    | 	byte	"Current directory: "
32d27     00          | 	byte	0
32d28                 | LR__5961
32d28     2F          | 	byte	"/"
32d29     00          | 	byte	0
32d2a                 | LR__5962
32d2a     53 79 73 74 
32d2e     65 6D 20 65 
32d32     72 72 6F 72 
32d36     20          | 	byte	"System error "
32d37     00          | 	byte	0
32d38                 | LR__5963
32d38     3A 20       | 	byte	": "
32d3a     00          | 	byte	0
32d3b                 | LR__5964
32d3b     43 75 72 72 
32d3f     65 6E 74 20 
32d43     64 69 72 65 
32d47     63 74 6F 72 
32d4b     79 3A 20    | 	byte	"Current directory: "
32d4e     00          | 	byte	0
32d4f                 | LR__5965
32d4f     2F          | 	byte	"/"
32d50     00          | 	byte	0
32d51                 | LR__5966
32d51     2F          | 	byte	"/"
32d52     00          | 	byte	0
32d53                 | LR__5967
32d53     2F          | 	byte	"/"
32d54     00          | 	byte	0
32d55                 | LR__5968
32d55     53 79 73 74 
32d59     65 6D 20 65 
32d5d     72 72 6F 72 
32d61     20          | 	byte	"System error "
32d62     00          | 	byte	0
32d63                 | LR__5969
32d63     3A 20       | 	byte	": "
32d65     00          | 	byte	0
32d66                 | LR__5970
32d66     43 75 72 72 
32d6a     65 6E 74 20 
32d6e     64 69 72 65 
32d72     63 74 6F 72 
32d76     79 3A 20    | 	byte	"Current directory: "
32d79     00          | 	byte	0
32d7a                 | LR__5971
32d7a     63 68 72 24 
32d7e     3A 20       | 	byte	"chr$: "
32d80     00          | 	byte	0
32d81                 | LR__5972
32d81     63 68 61 6E 
32d85     6E 65 6C 23 
32d89     20 65 78 70 
32d8d     65 63 74 65 
32d91     64          | 	byte	"channel# expected"
32d92     00          | 	byte	0
32d93                 | LR__5973
32d93     63 6F 67 69 
32d97     6E 69 74 3A 
32d9b     20          | 	byte	"coginit: "
32d9c     00          | 	byte	0
32d9d                 | LR__5974
32d9d     53 79 73 74 
32da1     65 6D 20 65 
32da5     72 72 6F 72 
32da9     20 2D 20    | 	byte	"System error - "
32dac     00          | 	byte	0
32dad                 | LR__5975
32dad     20 69 6E 20 
32db1     6C 69 6E 65 
32db5     20          | 	byte	" in line "
32db6     00          | 	byte	0
32db7                 | LR__5976
32db7     3A 20       | 	byte	": "
32db9     00          | 	byte	0
32dba                 | LR__5977
32dba     2C 20 66 69 
32dbe     6C 65 20 6E 
32dc2     61 6D 65 3A 
32dc6     20          | 	byte	", file name: "
32dc7     00          | 	byte	0
32dc8                 | LR__5978
32dc8     53 79 73 74 
32dcc     65 6D 20 65 
32dd0     72 72 6F 72 
32dd4     20 2D 20    | 	byte	"System error - "
32dd7     00          | 	byte	0
32dd8                 | LR__5979
32dd8     20 69 6E 20 
32ddc     6C 69 6E 65 
32de0     20          | 	byte	" in line "
32de1     00          | 	byte	0
32de2                 | LR__5980
32de2     3A 20       | 	byte	": "
32de4     00          | 	byte	0
32de5                 | LR__5981
32de5     2C 20 66 69 
32de9     6C 65 20 6E 
32ded     61 6D 65 3A 
32df1     20          | 	byte	", file name: "
32df2     00          | 	byte	0
32df3                 | LR__5982
32df3     63 6F 73 3A 
32df7     20          | 	byte	"cos: "
32df8     00          | 	byte	0
32df9                 | LR__5983
32df9                 | 	byte	
32df9     00          | 	byte	0
32dfa                 | LR__5984
32dfa                 | 	byte	
32dfa     00          | 	byte	0
32dfb                 | LR__5985
32dfb     2F 73 64 2F 
32dff     6D 65 64 69 
32e03     61 2F 68 2F | 	byte	"/sd/media/h/"
32e07     00          | 	byte	0
32e08                 | LR__5986
32e08     53 79 73 74 
32e0c     65 6D 20 65 
32e10     72 72 6F 72 
32e14     20          | 	byte	"System error "
32e15     00          | 	byte	0
32e16                 | LR__5987
32e16     3A 20       | 	byte	": "
32e18     00          | 	byte	0
32e19                 | LR__5988
32e19                 | 	byte	
32e19     00          | 	byte	0
32e1a                 | LR__5989
32e1a                 | 	byte	
32e1a     00          | 	byte	0
32e1b                 | LR__5990
32e1b     2F 73 64 2F 
32e1f     6D 65 64 69 
32e23     61 2F 73 2F | 	byte	"/sd/media/s/"
32e27     00          | 	byte	0
32e28                 | LR__5991
32e28     53 79 73 74 
32e2c     65 6D 20 65 
32e30     72 72 6F 72 
32e34     20          | 	byte	"System error "
32e35     00          | 	byte	0
32e36                 | LR__5992
32e36     3A 20       | 	byte	": "
32e38     00          | 	byte	0
32e39                 | LR__5993
32e39     2F          | 	byte	"/"
32e3a     00          | 	byte	0
32e3b                 | LR__5994
32e3b     2F          | 	byte	"/"
32e3c     00          | 	byte	0
32e3d                 | LR__5995
32e3d     2F          | 	byte	"/"
32e3e     00          | 	byte	0
32e3f                 | LR__5996
32e3f     43 61 6E 6E 
32e43     6F 74 20 64 
32e47     65 6C 65 74 
32e4b     65 20 66 69 
32e4f     6C 65 20 6F 
32e53     72 20 66 69 
32e57     6C 65 20 64 
32e5b     6F 65 73 6E 
32e5f     27 74 20 65 
32e63     78 69 73 74 
32e67     3A 20 73 79 
32e6b     73 74 65 6D 
32e6f     20 65 72 72 
32e73     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
32e76     00          | 	byte	0
32e77                 | LR__5997
32e77     43 75 72 72 
32e7b     65 6E 74 20 
32e7f     64 69 72 65 
32e83     63 74 6F 72 
32e87     79 3A 20    | 	byte	"Current directory: "
32e8a     00          | 	byte	0
32e8b                 | LR__5998
32e8b                 | 	byte	
32e8b     00          | 	byte	0
32e8c                 | LR__5999
32e8c     2A          | 	byte	"*"
32e8d     00          | 	byte	0
32e8e                 | LR__6000
32e8e                 | 	byte	
32e8e     00          | 	byte	0
32e8f                 | LR__6001
32e8f     5B 64 69 72 
32e93     5D 20       | 	byte	"[dir] "
32e95     00          | 	byte	0
32e96                 | LR__6002
32e96     4D 6F 72 65 
32e9a     20 74 68 61 
32e9e     6E 20 31 32 
32ea2     38 20 65 6E 
32ea6     74 72 69 65 
32eaa     73 20 66 6F 
32eae     75 6E 64 3A 
32eb2     20 63 6C 65 
32eb6     61 6E 20 79 
32eba     6F 75 72 20 
32ebe     64 69 72 65 
32ec2     63 74 6F 72 
32ec6     79          | 	byte	"More than 128 entries found: clean your directory"
32ec7     00          | 	byte	0
32ec8                 | LR__6003
32ec8     2A          | 	byte	"*"
32ec9     00          | 	byte	0
32eca                 | LR__6004
32eca                 | 	byte	
32eca     00          | 	byte	0
32ecb                 | LR__6005
32ecb     4D 6F 72 65 
32ecf     20 74 68 61 
32ed3     6E 20 31 32 
32ed7     38 20 65 6E 
32edb     74 72 69 65 
32edf     73 20 66 6F 
32ee3     75 6E 64 3A 
32ee7     20 63 6C 65 
32eeb     61 6E 20 79 
32eef     6F 75 72 20 
32ef3     64 69 72 65 
32ef7     63 74 6F 72 
32efb     79          | 	byte	"More than 128 entries found: clean your directory"
32efc     00          | 	byte	0
32efd                 | LR__6006
32efd     45 72 72 6F 
32f01     72 20       | 	byte	"Error "
32f03     00          | 	byte	0
32f04                 | LR__6007
32f04     3A 20       | 	byte	": "
32f06     00          | 	byte	0
32f07                 | LR__6008
32f07     66 69 6E 64 
32f0b     66 69 72 73 
32f0f     74 3A 20    | 	byte	"findfirst: "
32f12     00          | 	byte	0
32f13                 | LR__6009
32f13     66 69 6E 64 
32f17     66 69 72 73 
32f1b     74 3A 20    | 	byte	"findfirst: "
32f1e     00          | 	byte	0
32f1f                 | LR__6010
32f1f     66 69 6E 64 
32f23     66 69 72 73 
32f27     74 3A 20    | 	byte	"findfirst: "
32f2a     00          | 	byte	0
32f2b                 | LR__6011
32f2b                 | 	byte	
32f2b     00          | 	byte	0
32f2c                 | LR__6012
32f2c     66 69 6E 64 
32f30     66 69 72 73 
32f34     74 3A 20    | 	byte	"findfirst: "
32f37     00          | 	byte	0
32f38                 | LR__6013
32f38                 | 	byte	
32f38     00          | 	byte	0
32f39                 | LR__6014
32f39     64 69 72    | 	byte	"dir"
32f3c     00          | 	byte	0
32f3d                 | LR__6015
32f3d     66 69 6E 64 
32f41     6E 65 78 74 
32f45     3A 20       | 	byte	"findnext: "
32f47     00          | 	byte	0
32f48                 | LR__6016
32f48     67 65 74 63 
32f4c     6F 6C 6F 72 
32f50     20          | 	byte	"getcolor "
32f51     00          | 	byte	0
32f52                 | LR__6017
32f52     67 65 74 65 
32f56     6E 76 73 75 
32f5a     73 74 61 69 
32f5e     6E 3A 20    | 	byte	"getenvsustain: "
32f61     00          | 	byte	0
32f62                 | LR__6018
32f62     67 65 74 70 
32f66     69 78 65 6C 
32f6a     3A 20       | 	byte	"getpixel: "
32f6c     00          | 	byte	0
32f6d                 | LR__6019
32f6d     67 65 74 72 
32f71     65 61 6C 66 
32f75     72 65 71 3A 
32f79     20          | 	byte	"getrealfreq: "
32f7a     00          | 	byte	0
32f7b                 | LR__6020
32f7b     68 65 78 24 
32f7f     3A 20       | 	byte	"hex$: "
32f81     00          | 	byte	0
32f82                 | LR__6021
32f82                 | 	byte	
32f82     00          | 	byte	0
32f83                 | LR__6022
32f83     49 6E 20 69 
32f87     6E 70 75 74 
32f8b     3A 20       | 	byte	"In input: "
32f8d     00          | 	byte	0
32f8e                 | LR__6023
32f8e     2C          | 	byte	","
32f8f     00          | 	byte	0
32f90                 | LR__6024
32f90                 | 	byte	
32f90     00          | 	byte	0
32f91                 | LR__6025
32f91                 | 	byte	
32f91     00          | 	byte	0
32f92                 | LR__6026
32f92     6C 65 66 74 
32f96     24 3A 20    | 	byte	"left$: "
32f99     00          | 	byte	0
32f9a                 | LR__6027
32f9a     6C 65 66 74 
32f9e     24 3A 20    | 	byte	"left$: "
32fa1     00          | 	byte	0
32fa2                 | LR__6028
32fa2     6C 65 6E 3A 
32fa6     20          | 	byte	"len: "
32fa7     00          | 	byte	0
32fa8                 | LR__6029
32fa8     6C 65 6E 3A 
32fac     20          | 	byte	"len: "
32fad     00          | 	byte	0
32fae                 | LR__6030
32fae                 | 	byte	
32fae     00          | 	byte	0
32faf                 | LR__6031
32faf     2F          | 	byte	"/"
32fb0     00          | 	byte	0
32fb1                 | LR__6032
32fb1     2F          | 	byte	"/"
32fb2     00          | 	byte	0
32fb3                 | LR__6033
32fb3     2E 62 61 73 | 	byte	".bas"
32fb7     00          | 	byte	0
32fb8                 | LR__6034
32fb8     53 79 73 74 
32fbc     65 6D 20 65 
32fc0     72 72 6F 72 
32fc4     20          | 	byte	"System error "
32fc5     00          | 	byte	0
32fc6                 | LR__6035
32fc6     3A 20       | 	byte	": "
32fc8     00          | 	byte	0
32fc9                 | LR__6036
32fc9     2E 62 61 73 | 	byte	".bas"
32fcd     00          | 	byte	0
32fce                 | LR__6037
32fce     2F          | 	byte	"/"
32fcf     00          | 	byte	0
32fd0                 | LR__6038
32fd0                 | 	byte	
32fd0     00          | 	byte	0
32fd1                 | LR__6039
32fd1     4C 6F 61 64 
32fd5     65 64 20    | 	byte	"Loaded "
32fd8     00          | 	byte	0
32fd9                 | LR__6040
32fd9     2F          | 	byte	"/"
32fda     00          | 	byte	0
32fdb                 | LR__6041
32fdb     6C 6F 67 3A 
32fdf     20          | 	byte	"log: "
32fe0     00          | 	byte	0
32fe1                 | LR__6042
32fe1     6D 69 64 24 
32fe5     3A 20       | 	byte	"mid$: "
32fe7     00          | 	byte	0
32fe8                 | LR__6043
32fe8     6D 69 64 24 
32fec     3A 20       | 	byte	"mid$: "
32fee     00          | 	byte	0
32fef                 | LR__6044
32fef     43 61 6E 6E 
32ff3     6F 74 20 63 
32ff7     72 65 61 74 
32ffb     65 20 61 20 
32fff     64 69 72 65 
33003     63 74 6F 72 
33007     79 3A 20 73 
3300b     79 73 74 65 
3300f     6D 20 65 72 
33013     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
33017     00          | 	byte	0
33018                 | LR__6045
33018     20 42 41 53 
3301c     49 43 20 62 
33020     79 74 65 73 
33024     20 66 72 65 
33028     65          | 	byte	" BASIC bytes free"
33029     00          | 	byte	0
3302a                 | LR__6046
3302a                 | 	byte	
3302a     00          | 	byte	0
3302b                 | LR__6047
3302b                 | 	byte	
3302b     00          | 	byte	0
3302c                 | LR__6048
3302c                 | 	byte	
3302c     00          | 	byte	0
3302d                 | LR__6049
3302d     6E 6F 6E 61 
33031     6D 65 2E 62 
33035     61 73       | 	byte	"noname.bas"
33037     00          | 	byte	0
33038                 | LR__6050
33038     66 69 6C 65 
3303c     6E 61 6D 65 
33040     20 65 78 70 
33044     65 63 74 65 
33048     64          | 	byte	"filename expected"
33049     00          | 	byte	0
3304a                 | LR__6051
3304a     72 65 61 64 | 	byte	"read"
3304e     00          | 	byte	0
3304f                 | LR__6052
3304f     77 72 69 74 
33053     65          | 	byte	"write"
33054     00          | 	byte	0
33055                 | LR__6053
33055     61 70 70 65 
33059     6E 64       | 	byte	"append"
3305b     00          | 	byte	0
3305c                 | LR__6054
3305c     63 68 61 6E 
33060     6E 65 6C 23 
33064     20 65 78 70 
33068     65 63 74 65 
3306c     64          | 	byte	"channel# expected"
3306d     00          | 	byte	0
3306e                 | LR__6055
3306e     4F 70 65 6E 
33072     3A 20 69 6E 
33076     76 61 6C 69 
3307a     64 20 6D 6F 
3307e     64 65       | 	byte	"Open: invalid mode"
33080     00          | 	byte	0
33081                 | LR__6056
33081     70 61 64 72 
33085     78 3A 20    | 	byte	"padrx: "
33088     00          | 	byte	0
33089                 | LR__6057
33089     70 61 64 72 
3308d     79 3A 20    | 	byte	"padry: "
33090     00          | 	byte	0
33091                 | LR__6058
33091     70 61 64 72 
33095     7A 3A 20    | 	byte	"padrz: "
33098     00          | 	byte	0
33099                 | LR__6059
33099     70 61 64 73 
3309d     3A 20       | 	byte	"pads: "
3309f     00          | 	byte	0
330a0                 | LR__6060
330a0     70 61 64 77 
330a4     3A 20       | 	byte	"padw: "
330a6     00          | 	byte	0
330a7                 | LR__6061
330a7     70 61 64 78 
330ab     3A 20       | 	byte	"padx: "
330ad     00          | 	byte	0
330ae                 | LR__6062
330ae     70 61 64 79 
330b2     3A 20       | 	byte	"pady: "
330b4     00          | 	byte	0
330b5                 | LR__6063
330b5     70 61 64 7A 
330b9     3A 20       | 	byte	"padz: "
330bb     00          | 	byte	0
330bc                 | LR__6064
330bc     50 72 69 6E 
330c0     74 20 74 6F 
330c4     20 63 68 61 
330c8     6E 6E 65 6C 
330cc     20 28 6E 6F 
330d0     74 20 79 65 
330d4     74 20 69 6D 
330d8     70 6C 65 6D 
330dc     65 6E 74 65 
330e0     64 29       | 	byte	"Print to channel (not yet implemented)"
330e2     00          | 	byte	0
330e3                 | LR__6065
330e3                 | 	byte	
330e3     00          | 	byte	0
330e4                 | LR__6066
330e4     64 61 74 61 | 	byte	"data"
330e8     00          | 	byte	0
330e9                 | LR__6067
330e9                 | 	byte	
330e9     00          | 	byte	0
330ea                 | LR__6068
330ea     49 6E 20 72 
330ee     65 61 64 3A 
330f2     20          | 	byte	"In read: "
330f3     00          | 	byte	0
330f4                 | LR__6069
330f4                 | 	byte	
330f4     00          | 	byte	0
330f5                 | LR__6070
330f5                 | 	byte	
330f5     00          | 	byte	0
330f6                 | LR__6071
330f6     27          | 	byte	"'"
330f7     00          | 	byte	0
330f8                 | LR__6072
330f8     2C          | 	byte	","
330f9     00          | 	byte	0
330fa                 | LR__6073
330fa                 | 	byte	
330fa     00          | 	byte	0
330fb                 | LR__6074
330fb                 | 	byte	
330fb     00          | 	byte	0
330fc                 | LR__6075
330fc                 | 	byte	
330fc     00          | 	byte	0
330fd                 | LR__6076
330fd                 | 	byte	
330fd     00          | 	byte	0
330fe                 | LR__6077
330fe                 | 	byte	
330fe     00          | 	byte	0
330ff                 | LR__6078
330ff     72 69 67 68 
33103     74 24 3A 20 | 	byte	"right$: "
33107     00          | 	byte	0
33108                 | LR__6079
33108     72 69 67 68 
3310c     74 24 3A 20 | 	byte	"right$: "
33110     00          | 	byte	0
33111                 | LR__6080
33111     72 6E 64 3A 
33115     20          | 	byte	"rnd: "
33116     00          | 	byte	0
33117                 | LR__6081
33117     72 6E 64 3A 
3311b     20          | 	byte	"rnd: "
3311c     00          | 	byte	0
3311d                 | LR__6082
3311d                 | 	byte	
3311d     00          | 	byte	0
3311e                 | LR__6083
3311e     53 74 6F 70 
33122     70 65 64 20 
33126     61 74 20 6C 
3312a     69 6E 65 20 | 	byte	"Stopped at line "
3312e     00          | 	byte	0
3312f                 | LR__6084
3312f                 | 	byte	
3312f     00          | 	byte	0
33130                 | LR__6085
33130     2F          | 	byte	"/"
33131     00          | 	byte	0
33132                 | LR__6086
33132                 | 	byte	
33132     00          | 	byte	0
33133                 | LR__6087
33133     53 61 76 65 
33137     64 20 61 73 
3313b     20          | 	byte	"Saved as "
3313c     00          | 	byte	0
3313d                 | LR__6088
3313d     2F          | 	byte	"/"
3313e     00          | 	byte	0
3313f                 | LR__6089
3313f     73 65 74 63 
33143     6F 6C 6F 72 
33147     3A 20       | 	byte	"setcolor: "
33149     00          | 	byte	0
3314a                 | LR__6090
3314a     73 69 6E 3A 
3314e     20          | 	byte	"sin: "
3314f     00          | 	byte	0
33150                 | LR__6091
33150     73 71 72 3A 
33154     20          | 	byte	"sqr: "
33155     00          | 	byte	0
33156                 | LR__6092
33156     73 74 69 63 
3315a     6B 3A 20    | 	byte	"stick: "
3315d     00          | 	byte	0
3315e                 | LR__6093
3315e     73 74 72 24 
33162     3A 20       | 	byte	"str$: "
33164     00          | 	byte	0
33165                 | LR__6094
33165     73 74 72 69 
33169     67 3A 20    | 	byte	"strig: "
3316c     00          | 	byte	0
3316d                 | LR__6095
3316d     74 61 6E 3A 
33171     20          | 	byte	"tan: "
33172     00          | 	byte	0
33173                 | LR__6096
33173     76 61 6C 3A 
33177     20          | 	byte	"val: "
33178     00          | 	byte	0
33179                 | LR__6097
33179     76 61 6C 3A 
3317d     20          | 	byte	"val: "
3317e     00          | 	byte	0
3317f                 | LR__6098
3317f     24          | 	byte	"$"
33180     00          | 	byte	0
33181                 | LR__6099
33181     26 68       | 	byte	"&h"
33183     00          | 	byte	0
33184                 | LR__6100
33184     25          | 	byte	"%"
33185     00          | 	byte	0
33186                 | LR__6101
33186     26 62       | 	byte	"&b"
33188     00          | 	byte	0
33189                 | LR__6102
33189                 | 	byte	
33189     00          | 	byte	0
3318a                 | LR__6103
3318a     45 78 70 65 
3318e     63 74 65 64 
33192     20 6E 75 6D 
33196     62 65 72 2C 
3319a     20 67 6F 74 
3319e     20 73 6F 6D 
331a2     65 74 68 69 
331a6     6E 67 20 65 
331aa     6C 73 65    | 	byte	"Expected number, got something else"
331ad     00          | 	byte	0
331ae                 | LR__6104
331ae     43 61 6E 6E 
331b2     6F 74 20 61 
331b6     64 64 20 61 
331ba     20 6E 75 6D 
331be     62 65 72 20 
331c2     74 6F 20 61 
331c6     20 73 74 72 
331ca     69 6E 67    | 	byte	"Cannot add a number to a string"
331cd     00          | 	byte	0
331ce                 | LR__6105
331ce     43 61 6E 6E 
331d2     6F 74 20 73 
331d6     75 62 73 74 
331da     72 61 63 74 
331de     20 73 74 72 
331e2     69 6E 67 73 | 	byte	"Cannot substract strings"
331e6     00          | 	byte	0
331e7                 | LR__6106
331e7     55 6E 6B 6E 
331eb     6F 77 6E 20 
331ef     65 72 72 6F 
331f3     72 20 77 68 
331f7     69 6C 65 20 
331fb     61 64 64 69 
331ff     6E 67       | 	byte	"Unknown error while adding"
33201     00          | 	byte	0
33202                 | LR__6107
33202     55 6E 6B 6E 
33206     6F 77 6E 20 
3320a     65 72 72 6F 
3320e     72 20 77 68 
33212     69 6C 65 20 
33216     73 75 62 73 
3321a     74 72 61 63 
3321e     74 69 6E 67 | 	byte	"Unknown error while substracting"
33222     00          | 	byte	0
33223                 | LR__6108
33223     43 61 6E 6E 
33227     6F 74 20 64 
3322b     6F 20 6C 6F 
3322f     67 69 63 20 
33233     6F 70 65 72 
33237     61 74 69 6F 
3323b     6E 20 6F 6E 
3323f     20 73 74 72 
33243     69 6E 67 20 
33247     6F 72 20 66 
3324b     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
3324f     00          | 	byte	0
33250                 | LR__6109
33250     55 6E 6B 6E 
33254     6F 77 6E 20 
33258     65 72 72 6F 
3325c     72 20 77 68 
33260     69 6C 65 20 
33264     64 6F 69 6E 
33268     67 20 6C 6F 
3326c     67 69 63 20 
33270     6F 70 65 72 
33274     61 74 69 6F 
33278     6E          | 	byte	"Unknown error while doing logic operation"
33279     00          | 	byte	0
3327a                 | LR__6110
3327a     43 61 6E 6E 
3327e     6F 74 20 6D 
33282     75 6C 74 69 
33286     70 6C 79 20 
3328a     73 74 72 69 
3328e     6E 67 73    | 	byte	"Cannot multiply strings"
33291     00          | 	byte	0
33292                 | LR__6111
33292     55 6E 6B 6E 
33296     6F 77 6E 20 
3329a     65 72 72 6F 
3329e     72 20 77 68 
332a2     69 6C 65 20 
332a6     6D 75 6C 74 
332aa     69 70 6C 79 
332ae     69 6E 67    | 	byte	"Unknown error while multiplying"
332b1     00          | 	byte	0
332b2                 | LR__6112
332b2     43 61 6E 6E 
332b6     6F 74 20 64 
332ba     69 76 69 64 
332be     65 20 73 74 
332c2     72 69 6E 67 
332c6     73          | 	byte	"Cannot divide strings"
332c7     00          | 	byte	0
332c8                 | LR__6113
332c8     55 6E 6B 6E 
332cc     6F 77 6E 20 
332d0     65 72 72 6F 
332d4     72 20 77 68 
332d8     69 6C 65 20 
332dc     64 69 76 69 
332e0     64 69 6E 67 | 	byte	"Unknown error while dividing"
332e4     00          | 	byte	0
332e5                 | LR__6114
332e5     43 61 6E 6E 
332e9     6F 74 20 63 
332ed     6F 6D 70 75 
332f1     74 65 20 61 
332f5     20 70 6F 77 
332f9     65 72 20 6F 
332fd     66 20 61 20 
33301     73 74 72 69 
33305     6E 67       | 	byte	"Cannot compute a power of a string"
33307     00          | 	byte	0
33308                 | LR__6115
33308     55 6E 6B 6E 
3330c     6F 77 6E 20 
33310     65 72 72 6F 
33314     72 20 77 68 
33318     69 6C 65 20 
3331c     63 6F 6D 70 
33320     75 74 69 6E 
33324     67 20 61 20 
33328     70 6F 77 65 
3332c     72          | 	byte	"Unknown error while computing a power"
3332d     00          | 	byte	0
3332e                 | LR__6116
3332e     52 69 67 68 
33332     74 20 70 61 
33336     72 65 6E 74 
3333a     68 65 73 69 
3333e     73 20 65 78 
33342     70 65 63 74 
33346     65 64       | 	byte	"Right parenthesis expected"
33348     00          | 	byte	0
33349                 | LR__6117
33349     45 78 70 65 
3334d     63 74 65 64 
33351     20 73 74 72 
33355     69 6E 67    | 	byte	"Expected string"
33358     00          | 	byte	0
33359                 | LR__6118
33359     45 78 70 65 
3335d     63 74 65 64 
33361     20 66 6C 6F 
33365     61 74       | 	byte	"Expected float"
33367     00          | 	byte	0
33368                 | LR__6119
33368     45 78 70 65 
3336c     63 74 65 64 
33370     20 75 6E 73 
33374     69 67 6E 65 
33378     64 20 69 6E 
3337c     74 65 67 65 
33380     72          | 	byte	"Expected unsigned integer"
33381     00          | 	byte	0
33382                 | LR__6120
33382     45 78 70 65 
33386     63 74 65 64 
3338a     20 69 6E 74 
3338e     65 67 65 72 | 	byte	"Expected integer"
33392     00          | 	byte	0
33393                 | LR__6121
33393     4E 6F 20 6D 
33397     6F 72 65 20 
3339b     76 61 72 69 
3339f     61 62 6C 65 
333a3     20 73 6C 6F 
333a7     74 73       | 	byte	"No more variable slots"
333a9     00          | 	byte	0
333aa                 | LR__6122
333aa     56 61 72 69 
333ae     61 62 6C 65 
333b2     20 6E 6F 74 
333b6     20 66 6F 75 
333ba     6E 64       | 	byte	"Variable not found"
333bc     00          | 	byte	0
333bd                 | LR__6123
333bd     43 6F 6D 6D 
333c1     61 20 65 78 
333c5     70 65 63 74 
333c9     65 64       | 	byte	"Comma expected"
333cb     00          | 	byte	0
333cc                 | LR__6124
333cc     43 6F 6D 6D 
333d0     61 20 6F 72 
333d4     20 73 65 6D 
333d8     69 63 6F 6C 
333dc     6F 6E 20 65 
333e0     78 70 65 63 
333e4     74 65 64    | 	byte	"Comma or semicolon expected"
333e7     00          | 	byte	0
333e8                 | LR__6125
333e8     55 6E 6B 6E 
333ec     6F 77 6E 20 
333f0     63 6F 6D 6D 
333f4     61 6E 64    | 	byte	"Unknown command"
333f7     00          | 	byte	0
333f8                 | LR__6126
333f8     53 74 61 63 
333fc     6B 20 75 6E 
33400     64 65 72 66 
33404     6C 6F 77    | 	byte	"Stack underflow"
33407     00          | 	byte	0
33408                 | LR__6127
33408     43 61 6E 6E 
3340c     6F 74 20 65 
33410     78 65 63 75 
33414     74 65 20 67 
33418     6F 74 6F 20 
3341c     6F 72 20 67 
33420     6F 73 75 62 
33424     20 69 6E 20 
33428     74 68 65 20 
3342c     69 6D 6D 65 
33430     64 69 61 74 
33434     65 20 6D 6F 
33438     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
3343a     00          | 	byte	0
3343b                 | LR__6128
3343b     43 61 6E 6E 
3343f     6F 74 20 6C 
33443     6F 61 64 20 
33447     66 72 6F 6D 
3344b     20 74 68 69 
3344f     73 20 66 69 
33453     6C 65       | 	byte	"Cannot load from this file"
33455     00          | 	byte	0
33456                 | LR__6129
33456     54 68 65 20 
3345a     70 72 6F 67 
3345e     72 61 6D 20 
33462     69 73 20 65 
33466     6D 70 74 79 | 	byte	"The program is empty"
3346a     00          | 	byte	0
3346b                 | LR__6130
3346b     49 66 20 61 
3346f     66 74 65 72 
33473     20 69 66    | 	byte	"If after if"
33476     00          | 	byte	0
33477                 | LR__6131
33477     45 6D 70 74 
3347b     79 20 65 78 
3347f     70 72 65 73 
33483     73 69 6F 6E | 	byte	"Empty expression"
33487     00          | 	byte	0
33488                 | LR__6132
33488     53 74 72 69 
3348c     6E 67 20 65 
33490     78 70 65 63 
33494     74 65 64    | 	byte	"String expected"
33497     00          | 	byte	0
33498                 | LR__6133
33498     49 6E 74 65 
3349c     72 70 72 65 
334a0     74 65 72 20 
334a4     69 6E 74 65 
334a8     72 6E 61 6C 
334ac     20 65 72 72 
334b0     6F 72       | 	byte	"Interpreter internal error"
334b2     00          | 	byte	0
334b3                 | LR__6134
334b3     45 78 70 65 
334b7     63 74 65 64 
334bb     20 61 73 73 
334bf     69 67 6E    | 	byte	"Expected assign"
334c2     00          | 	byte	0
334c3                 | LR__6135
334c3     45 78 70 65 
334c7     63 74 65 64 
334cb     20 27 74 6F 
334cf     27          | 	byte	"Expected 'to'"
334d0     00          | 	byte	0
334d1                 | LR__6136
334d1     45 78 70 65 
334d5     63 74 65 64 
334d9     20 69 6E 74 
334dd     65 67 65 72 
334e1     20 76 61 72 
334e5     69 61 62 6C 
334e9     65          | 	byte	"Expected integer variable"
334ea     00          | 	byte	0
334eb                 | LR__6137
334eb     55 6E 69 6E 
334ef     69 74 69 61 
334f3     6C 69 7A 65 
334f7     64 20 76 61 
334fb     72 69 61 62 
334ff     6C 65 20 69 
33503     6E 20 27 6E 
33507     65 78 74 27 
3350b     2C 20 75 73 
3350f     65 20 27 66 
33513     6F 72 27 20 
33517     62 65 66 6F 
3351b     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
3351d     00          | 	byte	0
3351e                 | LR__6138
3351e     4E 6F 20 6D 
33522     6F 72 65 20 
33526     73 6C 6F 74 
3352a     73 20 66 6F 
3352e     72 20 27 66 
33532     6F 72 27    | 	byte	"No more slots for 'for'"
33535     00          | 	byte	0
33536                 | LR__6139
33536     27 4E 65 78 
3353a     74 27 20 64 
3353e     6F 65 73 6E 
33542     27 74 20 6D 
33546     61 74 63 68 
3354a     20 27 66 6F 
3354e     72 27       | 	byte	"'Next' doesn't match 'for'"
33550     00          | 	byte	0
33551                 | LR__6140
33551     27 47 6F 74 
33555     6F 27 20 74 
33559     61 72 67 65 
3355d     74 20 6C 69 
33561     6E 65 20 6E 
33565     6F 74 20 66 
33569     6F 75 6E 64 | 	byte	"'Goto' target line not found"
3356d     00          | 	byte	0
3356e                 | LR__6141
3356e     42 61 64 20 
33572     6E 75 6D 62 
33576     65 72 20 6F 
3357a     66 20 70 61 
3357e     72 61 6D 65 
33582     74 65 72 73 | 	byte	"Bad number of parameters"
33586     00          | 	byte	0
33587                 | LR__6142
33587     46 75 6E 63 
3358b     74 69 6F 6E 
3358f     20 75 6E 64 
33593     65 66 69 6E 
33597     65 64 20 66 
3359b     6F 72 20 73 
3359f     74 72 69 6E 
335a3     67 73       | 	byte	"Function undefined for strings"
335a5     00          | 	byte	0
335a6                 | LR__6143
335a6     42 61 64 20 
335aa     70 61 72 61 
335ae     6D 65 74 65 
335b2     72          | 	byte	"Bad parameter"
335b3     00          | 	byte	0
335b4                 | LR__6144
335b4     43 61 6E 6E 
335b8     6F 74 20 64 
335bc     65 63 6C 61 
335c0     72 65 20 61 
335c4     6E 20 61 72 
335c8     72 61 79 3A 
335cc     20 74 68 65 
335d0     20 76 61 72 
335d4     69 61 62 6C 
335d8     65 20 65 78 
335dc     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
335e0     00          | 	byte	0
335e1                 | LR__6145
335e1     45 78 70 65 
335e5     63 74 65 64 
335e9     20 27 28 27 | 	byte	"Expected '('"
335ed     00          | 	byte	0
335ee                 | LR__6146
335ee     45 78 70 65 
335f2     63 74 65 64 
335f6     20 27 29 27 
335fa     20 6F 72 20 
335fe     27 2C 27    | 	byte	"Expected ')' or ','"
33601     00          | 	byte	0
33602                 | LR__6147
33602     4E 6F 20 6D 
33606     6F 72 65 20 
3360a     74 68 61 6E 
3360e     20 33 20 64 
33612     69 6D 65 6E 
33616     73 69 6F 6E 
3361a     73 20 73 75 
3361e     70 70 6F 72 
33622     74 65 64    | 	byte	"No more than 3 dimensions supported"
33625     00          | 	byte	0
33626                 | LR__6148
33626     56 61 72 69 
3362a     61 62 6C 65 
3362e     20 6E 61 6D 
33632     65 20 65 78 
33636     70 65 63 74 
3363a     65 64       | 	byte	"Variable name expected"
3363c     00          | 	byte	0
3363d                 | LR__6149
3363d     54 79 70 65 
33641     20 6E 61 6D 
33645     65 20 65 78 
33649     70 65 63 74 
3364d     65 64       | 	byte	"Type name expected"
3364f     00          | 	byte	0
33650                 | LR__6150
33650     54 79 70 65 
33654     20 6E 6F 74 
33658     20 73 75 70 
3365c     70 6F 72 74 
33660     65 64 20 79 
33664     65 74       | 	byte	"Type not supported yet"
33666     00          | 	byte	0
33667                 | LR__6151
33667     41 72 72 61 
3366b     79 20 69 6E 
3366f     64 65 78 20 
33673     6F 75 74 20 
33677     6F 66 20 72 
3367b     61 6E 67 65 | 	byte	"Array index out of range"
3367f     00          | 	byte	0
33680                 | LR__6152
33680     42 61 64 20 
33684     74 79 70 65 
33688     20 77 68 69 
3368c     6C 65 20 61 
33690     73 73 69 67 
33694     6E 69 6E 67 
33698     20 74 6F 20 
3369c     61 72 72 61 
336a0     79          | 	byte	"Bad type while assigning to array"
336a1     00          | 	byte	0
336a2                 | LR__6153
336a2     54 6F 6F 20 
336a6     6D 61 6E 79 
336aa     20 76 61 72 
336ae     69 61 62 6C 
336b2     65 73       | 	byte	"Too many variables"
336b4     00          | 	byte	0
336b5                 | LR__6154
336b5     27 54 68 65 
336b9     6E 27 20 65 
336bd     78 70 65 63 
336c1     74 65 64    | 	byte	"'Then' expected"
336c4     00          | 	byte	0
336c5                 | LR__6155
336c5     44 69 72 65 
336c9     63 74 6F 72 
336cd     79 20 64 6F 
336d1     65 73 6E 27 
336d5     74 20 65 78 
336d9     69 73 74    | 	byte	"Directory doesn't exist"
336dc     00          | 	byte	0
336dd                 | LR__6156
336dd     55 6E 65 78 
336e1     70 65 63 74 
336e5     65 64 20 65 
336e9     6E 64 20 6F 
336ed     66 20 6C 69 
336f1     6E 65       | 	byte	"Unexpected end of line"
336f3     00          | 	byte	0
336f4                 | LR__6157
336f4     4E 6F 20 6D 
336f8     6F 72 65 20 
336fc     64 61 74 61 | 	byte	"No more data"
33700     00          | 	byte	0
33701                 | LR__6158
33701     45 72 72 6F 
33705     72 20       | 	byte	"Error "
33707     00          | 	byte	0
33708                 | LR__6159
33708     20 2D 20    | 	byte	" - "
3370b     00          | 	byte	0
3370c                 | LR__6160
3370c     20 69 6E 20 
33710     6C 69 6E 65 
33714     20          | 	byte	" in line "
33715     00          | 	byte	0
33716                 | LR__6161
33716                 | 	byte	
33716     00          | 	byte	0
33717                 | LR__6162
33717     2F 73 64    | 	byte	"/sd"
3371a     00          | 	byte	0
3371b                 | LR__6163
3371b     2F 73 64 2F 
3371f     62 61 73    | 	byte	"/sd/bas"
33722     00          | 	byte	0
33723                 | LR__6164
33723     2F 73 64 2F 
33727     62 61 73    | 	byte	"/sd/bas"
3372a     00          | 	byte	0
3372b                 | LR__6165
3372b     20 42 41 53 
3372f     49 43 20 62 
33733     79 74 65 73 
33737     20 66 72 65 
3373b     65          | 	byte	" BASIC bytes free"
3373c     00          | 	byte	0
3373d                 | LR__6166
3373d     52 65 61 64 
33741     79          | 	byte	"Ready"
33742     00          | 	byte	0
33743                 | LR__6167
33743     6E 6F 6E 61 
33747     6D 65 2E 62 
3374b     61 73       | 	byte	"noname.bas"
3374d     00          | 	byte	0
3374e                 | LR__6168
3374e     2F 73 64 2F 
33752     62 61 73 2F 
33756     61 75 74 6F 
3375a     72 75 6E 2E 
3375e     62 61 73    | 	byte	"/sd/bas/autorun.bas"
33761     00          | 	byte	0
33762                 | LR__6169
33762     72 75 6E 20 
33766     61 75 74 6F 
3376a     72 75 6E 2E 
3376e     62 61 73    | 	byte	"run autorun.bas"
33771     00          | 	byte	0
33772                 | LR__6170
33772                 | 	byte	
33772     00          | 	byte	0
33773     00          | 	alignl
33774                 | _dat_
33774     00 00 00 00 
33778     00 00 00 00 
3377c     00 00 00 00 
33780     00 00 00 00 | 	byte	$00[16]
33784     61 41 17 0E 
33788     62 42 00 00 
3378c     63 43 19 10 
33790     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
33794     65 45 18 0F 
33798     66 46 00 00 
3379c     67 47 00 00 
337a0     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
337a4     69 49 00 00 
337a8     6A 4A 00 00 
337ac     6B 4B 00 00 
337b0     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
337b4     6D 4D 00 00 
337b8     6E 4E 1A 11 
337bc     6F 4F 1E 15 
337c0     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
337c4     71 51 00 00 
337c8     72 52 00 00 
337cc     73 53 1B 12 
337d0     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
337d4     75 55 00 00 
337d8     76 56 00 00 
337dc     77 57 00 00 
337e0     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
337e4     79 59 00 00 
337e8     7A 5A 1D 14 
337ec     31 21 04 00 
337f0     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
337f4     33 23 06 00 
337f8     34 24 07 00 
337fc     35 25 08 00 
33800     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
33804     37 26 0A 00 
33808     38 2A 0B 00 
3380c     39 28 0C 00 
33810     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
33814     8D 8D 00 00 
33818     9B 9B 00 00 
3381c     88 88 00 00 
33820     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
33824     20 20 00 00 
33828     2D 5F 00 00 
3382c     3D 2B 00 00 
33830     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
33834     5D 7D 00 00 
33838     5C 7C 00 00 
3383c     23 7E 00 00 
33840     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
33844     27 22 00 00 
33848     60 7E 03 00 
3384c     2C 3C 00 00 
33850     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
33854     2F 3F 00 00 
33858     B9 B9 00 00 
3385c     BA 00 00 00 
33860     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
33864     BC 00 00 00 
33868     BD 00 00 00 
3386c     BE 00 00 00 
33870     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
33874     C0 00 00 00 
33878     C1 00 00 00 
3387c     C2 00 00 00 
33880     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
33884     C4 00 00 00 
33888     C5 00 00 00 
3388c     C6 00 00 00 
33890     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
33894     C8 00 00 00 
33898     C9 00 00 00 
3389c     CA 00 00 00 
338a0     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
338a4     7F 7F 00 00 
338a8     CC 00 00 00 
338ac     CD 00 00 00 
338b0     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
338b4     CF 00 00 00 
338b8     D0 00 00 00 
338bc     D1 00 00 00 
338c0     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
338c4     2F 2F 00 00 
338c8     2A 2A 00 00 
338cc     2D 2D 00 00 
338d0     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
338d4     8D 8D 00 00 
338d8     31 31 00 00 
338dc     32 32 00 00 
338e0     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
338e4     34 34 00 00 
338e8     35 35 00 00 
338ec     36 36 00 00 
338f0     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
338f4     38 38 00 00 
338f8     39 39 00 00 
338fc     30 30 00 00 
33900     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
33904     5C 7C 00 00 
33908     00 00 00 00 
3390c     00 00 00 00 
33910     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
33914     00 00 00 00 
      ...             
3396c     00 00 00 00 
33970     00 00 00 00 | 	byte	$00[96]
33974     2B 00 A6 F2 
33978     24 A7 09 80 
3397c     5B 88 4D 89 
33980     80 88 A5 88 | atari_spl file "atari.spl"
33984     6D 88 B8 88 
33988     80 88 CB 88 
3398c     92 88 A5 88 
33990     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
33994     A5 88 CA 88 
33998     A6 88 DD 88 
3399c     B8 88 AB 89 
339a0     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
339a4     C8 AD C6 F1 
339a8     91 06 B6 FF 
339ac     13 00 4A 00 
339b0     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
339b4     5D 00 5E 00 
339b8     5D 00 5E 00 
339bc     5E 00 5D 00 
339c0     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
339c4     38 00 83 00 
339c8     25 00 83 00 
339cc     C3 FE D1 04 
339d0     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
339d4     48 88 38 85 
339d8     41 8A CB 88 
339dc     28 89 B8 88 
339e0     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
339e4     15 89 03 89 
339e8     02 89 15 89 
339ec     16 89 15 89 
339f0     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
339f4     15 89 3A 89 
339f8     72 89 E3 89 
339fc     52 83 AD 97 
33a00     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
33a04     0C 02 B6 FF 
33a08     E1 00 A8 00 
33a0c     F3 00 A8 00 
33a10     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
33a14     CE 00 CD 00 
33a18     CD 00 BA 00 
33a1c     E1 00 BB 00 
33a20     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
33a24     DF 00 C9 FF 
33a28     E6 01 B6 06 
33a2c     EE DD 8D 98 
33a30     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
33a34     97 89 73 89 
33a38     3B 89 60 89 
33a3c     60 89 60 89 
33a40     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
33a44     73 89 72 89 
33a48     85 89 73 89 
33a4c     AA 89 60 89 
33a50     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
33a54     E8 8A 18 86 
33a58     92 88 A5 C2 
33a5c     E0 00 C3 05 
33a60     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
33a64     F2 00 64 01 
33a68     06 01 3E 01 
33a6c     2B 01 2B 01 
33a70     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
33a74     2B 01 2A 01 
33a78     2B 01 2B 01 
33a7c     2B 01 18 01 
33a80     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
33a84     39 07 61 F3 
33a88     C0 AF 37 85 
33a8c     0F 88 8B 8A 
33a90     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
33a94     AB 89 D0 89 
33a98     AB 89 D0 89 
33a9c     D0 89 CF 89 
33aa0     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
33aa4     D0 89 F5 89 
33aa8     BD 89 08 8A 
33aac     CF 89 E8 8A 
33ab0     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
33ab4     53 B3 0D F8 
33ab8     F4 07 38 00 
33abc     63 01 63 01 
33ac0     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
33ac4     88 01 88 01 
33ac8     76 01 88 01 
33acc     88 01 89 01 
33ad0     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
33ad4     75 01 AE 01 
33ad8     76 01 88 01 
33adc     4A 00 46 06 
33ae0     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
33ae4     08 8A 9A 86 
33ae8     33 8B 08 8A 
33aec     2D 8A F5 89 
33af0     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
33af4     2D 8A 2D 8A 
33af8     2E 8A 1B 8A 
33afc     40 8A 2D 8A 
33b00     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
33b04     2E 8A 79 8A 
33b08     66 8A C8 8B 
33b0c     72 82 2B 97 
33b10     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
33b14     1D 02 05 01 
33b18     F8 01 C0 01 
33b1c     0B 02 C0 01 
33b20     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
33b24     F9 01 D3 01 
33b28     F8 01 D3 01 
33b2c     F8 01 D2 01 
33b30     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
33b34     E6 01 2B 01 
33b38     8E 02 5F 07 
33b3c     F7 E2 ED 9C 
33b40     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
33b44     E8 8A 78 8A 
33b48     78 8A 65 8A 
33b4c     8B 8A 78 8A 
33b50     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
33b54     8B 8A 9D 8A 
33b58     9D 8A 8B 8A 
33b5c     C2 8A 78 8A 
33b60     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
33b64     70 8C 18 86 
33b68     8B 8A 23 C9 
33b6c     CB 03 C4 05 
33b70     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
33b74     0B 02 7B 02 
33b78     1E 02 55 02 
33b7c     30 02 43 02 
33b80     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
33b84     43 02 44 02 
33b88     43 02 30 02 
33b8c     68 02 31 02 
33b90     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
33b94     07 08 3F F7 
33b98     73 B2 13 85 
33b9c     15 89 ED 8B 
33ba0     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
33ba4     B0 8A FB 8A 
33ba8     D5 8A FA 8A 
33bac     E8 8A FB 8A 
33bb0     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
33bb4     E8 8A 21 8B 
33bb8     E7 8A 33 8B 
33bbc     E8 8A 26 8C 
33bc0     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
33bc4     8D B0 27 F6 
33bc8     9C 08 AD 01 
33bcc     7B 02 8D 02 
33bd0     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
33bd4     A1 02 A0 02 
33bd8     A1 02 A0 02 
33bdc     A0 02 A0 02 
33be0     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
33be4     7B 02 D8 02 
33be8     7B 02 C6 02 
33bec     3E 01 C3 05 
33bf0     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
33bf4     00 8C 2A 86 
33bf8     E0 8C FA 8A 
33bfc     6A 8B FB 8A 
33c00     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
33c04     45 8B 45 8B 
33c08     45 8B 6B 8B 
33c0c     46 8B 59 8B 
33c10     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
33c14     6B 8B 6B 8B 
33c18     6B 8B 6B 8B 
33c1c     7D 8B 7D 8B 
33c20     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
33c24     90 8B 91 8B 
33c28     90 8B 90 8B 
33c2c     A3 8B A3 8B 
33c30     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
33c34     B5 8B B6 8B 
33c38     B5 8B B5 8B 
33c3c     B6 8B C8 8B 
33c40     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
33c44     C8 8B DA 8B 
33c48     DB 8B DB 8B 
33c4c     DB 8B DC 8B 
33c50     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
33c54     EE 8B EE 8B 
33c58     00 8C 01 8C 
33c5c     00 8C 01 8C 
33c60     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
33c64     12 8C 13 8C 
33c68     13 8C 26 8C 
33c6c     26 8C 26 8C 
33c70     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
33c74     38 8C 38 8C 
33c78     38 8C 38 8C 
33c7c     4B 8C 4B 8C 
33c80     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
33c84     5E 8C 5E 8C 
33c88     5E 8C 5E 8C 
33c8c     70 8C 70 8C 
33c90     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
33c94     70 8C 83 8C 
33c98     83 8C 83 8C 
33c9c     83 8C 96 8C 
33ca0     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
33ca4     95 8C A9 8C 
33ca8     A9 8C A8 8C 
33cac     A8 8C A8 8C 
33cb0     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
33cb4     BB 8C BB 8C 
33cb8     BB 8C CE 8C 
33cbc     CE 8C CE 8C 
33cc0     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
33cc4     E0 8C E1 8C 
33cc8     E1 8C E0 8C 
33ccc     F4 8C F2 8C 
33cd0     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
33cd4     05 8D 05 8D 
33cd8     06 8D 06 8D 
33cdc     19 8D 19 8D 
33ce0     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
33ce4     18 8D 2B 8D 
33ce8     2B 8D 2B 8D 
33cec     2A 8D 3E 8D 
33cf0     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
33cf4     3E 8D 51 8D 
33cf8     50 8D 50 8D 
33cfc     50 8D 51 8D 
33d00     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
33d04     63 8D 64 8D 
33d08     76 8D 75 8D 
33d0c     75 8D 76 8D 
33d10     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
33d14     88 8D 88 8D 
33d18     89 8D 9B 8D 
33d1c     9A 8D 9B 8D 
33d20     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
33d24     AD 8D AE 8D 
33d28     AD 8D AE 8D 
33d2c     C1 8D C1 8D 
33d30     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
33d34     D3 8D D3 8D 
33d38     D3 8D D3 8D 
33d3c     D3 8D E6 8D 
33d40     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
33d44     E6 8D E6 8D 
33d48     F9 8D F9 8D 
33d4c     F9 8D F8 8D 
33d50     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
33d54     0B 8E 0B 8E 
33d58     1D 8E 1D 8E 
33d5c     1E 8E 1E 8E 
33d60     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
33d64     31 8E 31 8E 
33d68     31 8E 42 8E 
33d6c     43 8E 43 8E 
33d70     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
33d74     56 8E 56 8E 
33d78     55 8E 56 8E 
33d7c     68 8E 69 8E 
33d80     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
33d84     69 8E 7B 8E 
33d88     7C 8E 7B 8E 
33d8c     7B 8E 8D 8E 
33d90     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
33d94     8D 8E A1 8E 
33d98     A0 8E A1 8E 
33d9c     A1 8E A0 8E 
33da0     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
33da4     B3 8E B3 8E 
33da8     C6 8E C5 8E 
33dac     C6 8E C6 8E 
33db0     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
33db4     D8 8E D9 8E 
33db8     D8 8E EC 8E 
33dbc     EB 8E EC 8E 
33dc0     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
33dc4     FE 8E FE 8E 
33dc8     FE 8E FE 8E 
33dcc     10 8F 10 8F 
33dd0     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
33dd4     11 8F 23 8F 
33dd8     24 8F 23 8F 
33ddc     24 8F 37 8F 
33de0     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
33de4     36 8F 36 8F 
33de8     48 8F 49 8F 
33dec     49 8F 49 8F 
33df0     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
33df4     5B 8F 5C 8F 
33df8     5B 8F 6E 8F 
33dfc     6E 8F 6E 8F 
33e00     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
33e04     81 8F 81 8F 
33e08     81 8F 81 8F 
33e0c     93 8F 93 8F 
33e10     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
33e14     93 8F A6 8F 
33e18     A6 8F A6 8F 
33e1c     A6 8F B9 8F 
33e20     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
33e24     B9 8F B9 8F 
33e28     CC 8F CB 8F 
33e2c     CB 8F CC 8F 
33e30     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
33e34     DF 8F DE 8F 
33e38     DE 8F F1 8F 
33e3c     F1 8F F1 8F 
33e40     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
33e44     03 90 04 90 
33e48     04 90 04 90 
33e4c     16 90 17 90 
33e50     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
33e54     29 90 28 90 
33e58     29 90 28 90 
33e5c     29 90 3C 90 
33e60     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
33e64     3C 90 4F 90 
33e68     4E 90 4E 90 
33e6c     4E 90 4E 90 
33e70     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
33e74     61 90 61 90 
33e78     73 90 74 90 
33e7c     74 90 74 90 
33e80     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
33e84     87 90 86 90 
33e88     87 90 86 90 
33e8c     99 90 99 90 
33e90     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
33e94     AB 90 AB 90 
33e98     AC 90 AB 90 
33e9c     AB 90 BF 90 
33ea0     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
33ea4     BE 90 D1 90 
33ea8     D0 90 D1 90 
33eac     D1 90 D1 90 
33eb0     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
33eb4     E3 90 E4 90 
33eb8     F6 90 F6 90 
33ebc     F6 90 F6 90 
33ec0     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
33ec4     09 91 0A 91 
33ec8     0A 91 1C 91 
33ecc     1C 91 1C 91 
33ed0     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
33ed4     2F 91 2E 91 
33ed8     2F 91 2F 91 
33edc     2E 91 41 91 
33ee0     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
33ee4     41 91 53 91 
33ee8     54 91 54 91 
33eec     53 91 54 91 
33ef0     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
33ef4     67 91 67 91 
33ef8     79 91 7A 91 
33efc     79 91 78 91 
33f00     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
33f04     8C 91 8B 91 
33f08     8C 91 8C 91 
33f0c     9E 91 9E 91 
33f10     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
33f14     B1 91 B1 91 
33f18     B2 91 B1 91 
33f1c     B1 91 C4 91 
33f20     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
33f24     C4 91 D6 91 
33f28     D7 91 D7 91 
33f2c     D7 91 D6 91 
33f30     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
33f34     EA 91 EA 91 
33f38     EA 91 FC 91 
33f3c     FC 91 FB 91 
33f40     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
33f44     0E 92 0F 92 
33f48     0F 92 0E 92 
33f4c     21 92 21 92 
33f50     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
33f54     21 92 34 92 
33f58     33 92 34 92 
33f5c     34 92 47 92 
33f60     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
33f64     46 92 47 92 
33f68     59 92 59 92 
33f6c     59 92 59 92 
33f70     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
33f74     6C 92 6C 92 
33f78     6B 92 7E 92 
33f7c     7E 92 7E 92 
33f80     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
33f84     92 92 91 92 
33f88     91 92 90 92 
33f8c     91 92 A4 92 
33f90     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
33f94     A3 92 B6 92 
33f98     B6 92 B7 92 
33f9c     B7 92 B6 92 
33fa0     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
33fa4     CA 92 C9 92 
33fa8     CA 92 DC 92 
33fac     DC 92 DC 92 
33fb0     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
33fb4     EF 92 EF 92 
33fb8     EF 92 EF 92 
33fbc     01 93 01 93 
33fc0     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
33fc4     15 93 14 93 
33fc8     14 93 14 93 
33fcc     14 93 27 93 
33fd0     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
33fd4     27 93 39 93 
33fd8     3A 93 39 93 
33fdc     39 93 39 93 
33fe0     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
33fe4     4B 93 4C 93 
33fe8     5F 93 5F 93 
33fec     5F 93 5E 93 
33ff0     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
33ff4     5F 93 84 93 
33ff8     4C 93 96 93 
33ffc     5F 93 AE 94 
34000     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
34004     7B C1 00 00 
34008     00 00 00 00 
3400c     00 00 00 00 
34010     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34014     00 00 00 00 | 	byte	$00, $00, $00, $00
34018     7A D7 00 80 
3401c     87 8A 48 8F 
34020     EC 8C 76 8D 
34024     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
34028     3C 8D 82 8D 
3402c     42 8D 88 8D 
34030     8C 8D 8E 8D 
34034     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
34038     97 8D DE 8D 
3403c     E1 8D F1 8E 
34040     D8 8C A3 83 
34044     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
34048     65 71 C9 65 
3404c     FC 64 C4 65 
34050     C1 65 BF 65 
34054     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
34058     B6 65 B4 65 
3405c     B2 65 AE 65 
34060     AC 65 ED 65 
34064     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
34068     5E 65 25 66 
3406c     FA 62 23 6B 
34070     B5 6C 61 0A 
34074     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
34078     5D 90 BE 8D 
3407c     47 8E C3 8D 
34080     09 8E C9 8D 
34084     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
34088     15 8E 19 8E 
3408c     1B 8E 62 8E 
34090     64 8E 68 8E 
34094     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
34098     B5 8E 4C 90 
3409c     FA 84 3C 9D 
340a0     98 13 79 6D 
340a4     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
340a8     D9 66 50 66 
340ac     D4 66 4B 66 
340b0     8C 66 46 66 
340b4     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
340b8     81 66 3A 66 
340bc     7C 66 36 66 
340c0     76 66 30 66 
340c4     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
340c8     6B 66 88 72 
340cc     BF 37 E7 B7 
340d0     75 83 8B 8E 
340d4     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
340d8     94 8E 96 8E 
340dc     DD 8E 9C 8E 
340e0     E2 8E A2 8E 
340e4     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
340e8     EE 8E AE 8E 
340ec     38 8F B5 8E 
340f0     3F 8F FD 8E 
340f4     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
340f8     A5 87 1E E3 
340fc     6D 5D FA 71 
34100     41 64 25 67 
34104     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
34108     D9 66 1A 67 
3410c     18 67 15 67 
34110     12 67 0F 67 
34114     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
34118     07 67 C0 66 
3411c     01 67 BC 66 
34120     B8 66 DE 64 
34124     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
34128     43 E5 1F 8B 
3412c     14 8A F1 90 
34130     1C 8F 63 8F 
34134     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
34138     29 8F 6E 8F 
3413c     72 8F 75 8F 
34140     34 8F BE 8F 
34144     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
34148     84 8F 87 8F 
3414c     CC 8F 56 90 
34150     67 91 49 80 
34154     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
34158     46 77 A6 66 
3415c     E8 66 B0 67 
34160     AD 67 ED 67 
34164     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
34168     A2 67 E3 67 
3416c     9D 67 9A 67 
34170     98 67 94 67 
34174     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
34178     49 67 CD 67 
3417c     28 65 5F 6E 
34180     82 67 3A 01 
34184     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
34188     C2 91 A9 8F 
3418c     EF 8F AE 8F 
34190     F4 8F B5 8F 
34194     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
34198     01 90 03 90 
3419c     07 90 09 90 
341a0     0C 90 53 90 
341a4     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
341a8     18 90 44 93 
341ac     85 84 D6 9D 
341b0     87 1F 2F 75 
341b4     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
341b8     C4 68 F6 67 
341bc     BE 68 F1 67 
341c0     76 68 2E 68 
341c4     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
341c8     27 68 24 68 
341cc     64 68 1E 68 
341d0     5F 68 19 68 
341d4     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
341d8     DC 68 56 72 
341dc     7E 36 C2 B8 
341e0     D7 84 73 90 
341e4     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
341e8     7B 90 7F 90 
341ec     82 90 84 90 
341f0     CB 90 8B 90 
341f4     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
341f8     D7 90 96 90 
341fc     20 91 59 90 
34200     25 91 A2 90 
34204     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
34208     D0 89 40 EE 
3420c     12 64 C4 71 
34210     29 66 0C 69 
34214     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
34218     C0 68 02 69 
3421c     FE 68 FB 68 
34220     F9 68 F6 68 
34224     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
34228     EE 68 A8 68 
3422c     2C 69 5F 68 
34230     E2 68 81 66 
34234     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
34238     1E EB A6 8A 
3423c     73 8B 5E 93 
34240     7B 90 48 91 
34244     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
34248     0D 91 11 91 
3424c     14 91 16 91 
34250     5C 91 1C 91 
34254     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
34258     68 91 AF 91 
3425c     2A 91 B5 91 
34260     75 91 1A 94 
34264     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
34268     70 0E CB 6C 
3426c     5D 6E C4 67 
34270     99 69 54 69 
34274     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
34278     D2 69 49 69 
3427c     89 69 86 69 
34280     40 69 C4 69 
34284     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
34288     35 69 76 69 
3428c     58 67 EB 6D 
34290     E9 6D 89 0F 
34294     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
34298     33 94 94 91 
3429c     D9 91 56 91 
342a0     E0 91 9F 91 
342a4     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
342a8     EC 91 EE 91 
342ac     F1 91 F4 91 
342b0     F7 91 3D 92 
342b4     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
342b8     46 92 21 94 
342bc     11 89 A4 9D 
342c0     FD 0E 8F 6C 
342c4     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
342c8     28 6A E1 69 
342cc     65 6A 1F 6A 
342d0     5F 6A 1A 6A 
342d4     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
342d8     54 6A 0F 6A 
342dc     4F 6A 09 6A 
342e0     06 6A 03 6A 
342e4     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
342e8     23 68 69 77 
342ec     3A 4D 38 CA 
342f0     38 86 4E 91 
342f4     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
342f8     64 92 24 92 
342fc     6A 92 2A 92 
34300     70 92 30 92 
34304     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
34308     7B 92 7E 92 
3430c     C5 92 84 92 
34310     CB 92 8A 92 
34314     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
34318     4D 8D F9 E2 
3431c     97 59 FE 74 
34320     DB 68 6D 6A 
34324     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
34328     A8 6A A5 6A 
3432c     A3 6A 9F 6A 
34330     9D 6A 9B 6A 
34334     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
34338     D6 6A 8F 6A 
3433c     CF 6A 46 6A 
34340     CA 6A E1 67 
34344     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
34348     D3 F7 15 92 
3434c     90 8C BF 94 
34350     A6 92 EB 92 
34354     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
34358     B1 92 F7 92 
3435c     FA 92 FD 92 
34360     00 93 02 93 
34364     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
34368     4F 93 52 93 
3436c     54 93 22 94 
34370     5A 93 8F 88 
34374     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
34378     1C 77 07 6C 
3437c     E8 69 7A 6B 
34380     34 6B 75 6B 
34384     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
34388     29 6B 26 6B 
3438c     24 6B 21 6B 
34390     1D 6B 5E 6B 
34394     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
34398     12 6B 52 6B 
3439c     34 69 34 6E 
343a0     BA 73 A4 24 
343a4     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
343a8     7A 94 B3 93 
343ac     72 93 31 93 
343b0     78 93 7A 93 
343b4     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
343b8     83 93 86 93 
343bc     89 93 D0 93 
343c0     D2 93 D5 93 
343c4     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
343c8     DD 93 40 96 
343cc     30 8B 99 9C 
343d0     52 10 94 71 
343d4     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
343d8     46 6C 79 6B 
343dc     40 6C B7 6B 
343e0     F7 6B B1 6B 
343e4     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
343e8     EC 6B A5 6B 
343ec     A2 6B 9F 6B 
343f0     9D 6B 9A 6B 
343f4     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
343f8     C8 6A E4 76 
343fc     20 4B F9 CE 
34400     2E 8A 1A 92 
34404     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
34408     FB 93 BA 93 
3440c     01 94 03 94 
34410     4A 94 09 94 
34414     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
34418     55 94 14 94 
3441c     9E 94 1A 94 
34420     61 94 20 94 
34424     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
34428     3E 87 E5 CD 
3442c     5F 50 6C 78 
34430     B5 6A 04 6C 
34434     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
34438     83 6C 7F 6C 
3443c     7C 6C 36 6C 
34440     76 6C 74 6C 
34444     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
34448     6B 6C 25 6C 
3444c     66 6C 1F 6C 
34450     1D 6C 41 6A 
34454     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
34458     BA FA FC 94 
3445c     5B 8D 97 96 
34460     3B 94 C5 94 
34464     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
34468     89 94 8C 94 
3446c     8F 94 92 94 
34470     94 94 DB 94 
34474     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
34478     E4 94 E7 94 
3447c     2D 95 74 95 
34480     C8 96 15 89 
34484     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
34488     CB 75 31 6F 
3448c     7E 6B 10 6D 
34490     C9 6C 0A 6D 
34494     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
34498     BD 6C FF 6C 
3449c     FB 6C F9 6C 
344a0     B2 6C F3 6C 
344a4     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
344a8     A7 6C E8 6C 
344ac     0D 6B 85 6F 
344b0     C7 74 10 28 
344b4     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
344b8     96 96 47 95 
344bc     06 95 0A 95 
344c0     0C 95 0F 95 
344c4     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
344c8     17 95 5E 95 
344cc     61 95 63 95 
344d0     22 95 AC 95 
344d4     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
344d8     72 95 17 98 
344dc     59 8E 01 96 
344e0     CF FC 5A 68 
344e4     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
344e8     96 6D 50 6D 
344ec     D5 6D 4A 6D 
344f0     8C 6D 89 6D 
344f4     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
344f8     80 6D 3A 6D 
344fc     7A 6D 77 6D 
34500     75 6D 71 6D 
34504     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
34508     18 6C BC 78 
3450c     9A 4F 7E CF 
34510     1F 89 F1 93 
34514     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
34518     D2 95 4E 95 
3451c     D7 95 53 95 
34520     DD 95 E0 95 
34524     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
34528     A5 95 EB 95 
3452c     EE 95 F0 95 
34530     37 96 B3 95 
34534     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
34538     1A 98 D5 8D 
3453c     C5 9F CD 0F 
34540     0F 71 F3 73 
34544     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
34548     D9 6D 5E 6E 
3454c     D3 6D 58 6E 
34550     12 6E 0F 6E 
34554     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
34558     49 6E BF 6D 
3455c     87 6E 76 6D 
34560     81 6E 11 6B 
34564     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
34568     3F 09 44 95 
3456c     E5 8D 3F 99 
34570     D4 95 A2 96 
34574     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
34578     23 96 69 96 
3457c     6B 96 6E 96 
34580     71 96 74 96 
34584     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
34588     BF 96 3C 96 
3458c     C6 96 C8 96 
34590     A3 98 51 8D 
34594     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
34598     CF 75 29 73 
3459c     90 6C EC 6E 
345a0     62 6E E7 6E 
345a4     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
345a8     9A 6E 98 6E 
345ac     95 6E 91 6E 
345b0     8E 6E CF 6E 
345b4     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
345b8     40 6E C3 6E 
345bc     E8 6C 45 6F 
345c0     A5 7B C9 35 
345c4     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
345c8     2D 98 23 97 
345cc     E1 96 A0 96 
345d0     A4 96 EA 96 
345d4     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
345d8     AF 96 F4 96 
345dc     F8 96 3E 97 
345e0     FD 96 43 97 
345e4     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
345e8     08 97 6B 99 
345ec     D6 92 88 91 
345f0     D8 EE 84 66 
345f4     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
345f8     2E 6F E7 6E 
345fc     6C 6F 24 6F 
34600     21 6F 1F 6F 
34604     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
34608     17 6F 13 6F 
3460c     54 6F 0E 6F 
34610     0B 6F 4B 6F 
34614     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
34618     27 6D 1C 7B 
3461c     19 59 9F DB 
34620     66 8E BC 94 
34624     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
34628     67 97 26 97 
3462c     6D 97 2B 97 
34630     72 97 32 97 
34634     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
34638     C1 97 7F 97 
3463c     C6 97 85 97 
34640     CB 97 CE 97 
34644     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
34648     EC 8A C4 C6 
3464c     68 4C F4 7D 
34650     63 6E E8 6E 
34654     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
34658     ED 6F A7 6F 
3465c     E7 6F A0 6F 
34660     E1 6F 9B 6F 
34664     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
34668     D5 6F 8F 6F 
3466c     CE 6F 45 6F 
34670     86 6F 68 6D 
34674     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
34678     C0 13 AD A2 
3467c     A7 8E 79 99 
34680     E6 97 E8 97 
34684     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
34688     F1 97 F3 97 
3468c     F6 97 F9 97 
34690     FB 97 FE 97 
34694     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
34698     4A 98 0A 98 
3469c     93 98 0F 98 
346a0     7F 9B BF 8C 
346a4     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
346a8     91 7B 62 73 
346ac     1A 6E B9 70 
346b0     EB 6F B3 70 
346b4     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
346b8     25 70 20 70 
346bc     1E 70 1B 70 
346c0     18 70 15 70 
346c4     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
346c8     0D 70 09 70 
346cc     07 70 03 70 
346d0     01 70 FD 6F 
346d4     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
346d8     F6 6F F2 6F 
346dc     EF 6F EC 6F 
346e0     2C 70 E6 6F 
346e4     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
346e8     DD 6F 97 6F 
346ec     D7 6F 84 6E 
346f0     8F 6F 3F 7D 
346f4     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
346f6     FF FF FF FF 
346fa     FF FF       | atarist_spl file "atarist.spl" '512
346fc     00 00 00 00 
34700     00 00 00 00 
34704     00 00       | 	byte	$00[10]
34706     17 7F F2 7F 
3470a     B2 7F 72 7F 
3470e     33 7F F4 7E 
34712     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
34716     36 7E F5 7D 
3471a     E9 51 F2 0D 
3471e     8E 00 F3 FD 
34722     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
34726     57 FD 58 FD 
3472a     5B FD 5C FD 
3472e     5C FD 60 7D 
34732     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
34736     D6 7C 98 7C 
3473a     59 7C 1A 7C 
3473e     DC 7B 9E 7B 
34742     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
34746     F3 05 00 FD 
3474a     41 FB EA FA 
3474e     D9 FA DB FA 
34752     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
34756     E4 FA 9B 36 
3475a     F8 7A C0 7A 
3475e     84 7A 45 7A 
34762     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
34766     8E 79 51 79 
3476a     15 79 D7 78 
3476e     3C 1F EB FF 
34772     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
34776     6D F8 65 F8 
3477a     68 F8 6D F8 
3477e     70 F8 74 F8 
34782     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
34786     AB 60 79 60 
3478a     4B 60 1A 60 
3478e     E9 5F B9 5F 
34792     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
34796     FB 59 B2 0B 
3479a     92 FA 3A F7 
3479e     96 F6 79 F6 
347a2     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
347a6     82 F6 86 F6 
347aa     8C F6 DB 5D 
347ae     F1 5E C1 5E 
347b2     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
347b6     34 5E 04 5E 
347ba     D6 5D A6 5D 
347be     78 5D D4 3E 
347c2     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
347c6     27 F5 BA F4 
347ca     AB F4 AD F4 
347ce     B2 F4 B8 F4 
347d2     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
347d6     26 5D 2B 5D 
347da     FC 5C CD 5C 
347de     9F 5C 70 5C 
347e2     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
347e6     E5 5B B8 5B 
347ea     DB 24 A7 FC 
347ee     D1 F4 4D F3 
347f2     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
347f6     04 F3 0B F3 
347fa     11 F3 16 F3 
347fe     DE 18 98 5B 
34802     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
34806     4E 4A 29 48 
3480a     A0 47 6A 47 
3480e     43 47 20 47 
34812     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
34816     E2 F6 98 F2 
3481a     C5 F1 A3 F1 
3481e     A3 F1 A8 F1 
34822     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
34826     BF F1 00 3D 
3482a     EF 46 CD 46 
3482e     AA 46 86 46 
34832     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
34836     1C 46 F9 45 
3483a     D7 45 EE 43 
3483e     DE 02 E8 F3 
34842     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
34846     61 F0 65 F0 
3484a     6D F0 74 F0 
3484e     7C F0 84 F0 
34852     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
34856     8E 45 6D 45 
3485a     49 45 27 45 
3485e     05 45 E1 44 
34862     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
34866     F1 2F A9 FB 
3486a     8B F1 9B EF 
3486e     40 EF 36 EF 
34872     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
34876     4D EF 56 EF 
3487a     5E EF 7B 44 
3487e     8C 44 69 44 
34882     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
34886     03 44 E1 43 
3488a     C0 43 F5 37 
3488e     69 33 0F 11 
34892     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
34896     66 EE 37 EE 
3489a     38 EE 40 EE 
3489e     48 EE 51 EE 
348a2     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
348a6     7D 32 6A 32 
348aa     51 32 37 32 
348ae     1F 32 05 32 
348b2     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
348b6     B9 31 A1 31 
348ba     F1 04 F4 F1 
348be     50 EE A0 ED 
348c2     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
348c6     93 ED 9A ED 
348ca     A4 ED AD ED 
348ce     F4 27 C1 31 
348d2     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
348d6     78 31 5F 31 
348da     46 31 2E 31 
348de     15 31 FC 30 
348e2     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
348e6     C4 EF 4A ED 
348ea     DC EC CB EC 
348ee     D2 EC DA EC 
348f2     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
348f6     F9 EC 64 2F 
348fa     0A 31 F1 30 
348fe     D9 30 C0 30 
34902     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
34906     78 30 5F 30 
3490a     46 30 38 23 
3490e     A6 F6 19 EE 
34912     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
34916     20 EC 28 EC 
3491a     32 EC 3C EC 
3491e     47 EC 51 EC 
34922     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
34926     A3 22 93 22 
3492a     7F 22 6E 22 
3492e     5D 22 4C 22 
34932     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
34936     77 09 76 F1 
3493a     CC EC F0 EB 
3493e     CD EB CE EB 
34942     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
34946     ED EB F5 EB 
3494a     3E F6 6B 22 
3494e     5F 22 4E 22 
34952     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
34956     1B 22 0B 22 
3495a     FA 21 E9 21 
3495e     D8 21 4D FF 
34962     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
34966     92 EB 7B EB 
3496a     82 EB 8C EB 
3496e     97 EB A1 EB 
34972     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
34976     15 22 04 22 
3497a     F3 21 E3 21 
3497e     D2 21 C0 21 
34982     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
34986     8E 21 7D 21 
3498a     9A F8 A4 ED 
3498e     8E EB 2F EB 
34992     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
34996     37 EB 42 EB 
3499a     4C EB 57 EB 
3499e     B2 17 22 19 
349a2     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
349a6     FD 18 EF 18 
349aa     E3 18 D6 18 
349ae     CA 18 BD 18 
349b2     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
349b6     60 EC 35 EB 
349ba     01 EB 01 EB 
349be     0C EB 16 EB 
349c2     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
349c6     34 EB D0 18 
349ca     00 19 F4 18 
349ce     E8 18 DA 18 
349d2     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
349d6     B6 18 A9 18 
349da     9D 18 91 05 
349de     F0 EF CA EB 
349e2     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
349e6     E8 EA F2 EA 
349ea     FE EA 07 EB 
349ee     12 EB C2 EF 
349f2     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
349f6     D9 18 CD 18 
349fa     C0 18 B3 18 
349fe     A7 18 9B 18 
34a02     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
34a06     B8 FC 30 EE 
34a0a     61 EB DC EA 
34a0e     CD EA D2 EA 
34a12     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
34a16     F3 EA FE EA 
34a1a     D2 09 D1 18 
34a1e     C3 18 17 18 
34a22     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
34a26     66 11 52 11 
34a2a     49 11 41 11 
34a2e     38 11 E0 F4 
34a32     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
34a36     C9 EA C5 EA 
34a3a     CF EA DB EA 
34a3e     E6 EA EF EA 
34a42     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
34a46     89 11 80 11 
34a4a     78 11 6E 11 
34a4e     67 11 5D 11 
34a52     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
34a56     43 11 32 0D 
34a5a     9C F1 07 EC 
34a5e     F8 EA CD EA 
34a62     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
34a66     E4 EA ED EA 
34a6a     F8 EA 02 EB 
34a6e     55 11 91 11 
34a72     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
34a76     75 11 6E 11 
34a7a     64 11 5E 11 
34a7e     54 11 4A 11 
34a82     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
34a86     A8 EB F1 EA 
34a8a     D9 EA DC EA 
34a8e     E8 EA F1 EA 
34a92     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
34a96     A6 EB 9E 11 
34a9a     A0 11 96 11 
34a9e     8D 11 85 11 
34aa2     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
34aa6     6A 11 CA 0D 
34aaa     36 0B 57 F8 
34aae     6C ED 57 EB 
34ab2     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
34ab6     F4 EA FF EA 
34aba     09 EB 15 EB 
34abe     1E EB 1A FD 
34ac2     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
34ac6     ED 0A E8 0A 
34aca     E2 0A DC 0A 
34ace     D6 0A D1 0A 
34ad2     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
34ad6     F8 F3 BC EC 
34ada     57 EB 1E EB 
34ade     18 EB 24 EB 
34ae2     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
34ae6     42 EB 4D EB 
34aea     08 09 20 0B 
34aee     1A 0B 14 0B 
34af2     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
34af6     04 0B FE 0A 
34afa     F9 0A F2 0A 
34afe     84 08 3A F1 
34b02     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
34b06     42 EB 42 EB 
34b0a     4E EB 57 EB 
34b0e     62 EB 6B EB 
34b12     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
34b16     48 0B 43 0B 
34b1a     3C 0B 36 0B 
34b1e     31 0B 2C 0B 
34b22     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
34b26     1B 0B 5C 00 
34b2a     6A EF 1B EC 
34b2e     81 EB 6A EB 
34b32     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
34b36     85 EB 8E EB 
34b3a     99 EB A3 EB 
34b3e     DD 05 E5 05 
34b42     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
34b46     DB 05 D8 05 
34b4a     D5 05 D1 05 
34b4e     D0 05 CB 05 
34b52     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
34b56     0C EC BB EB 
34b5a     B3 EB BB EB 
34b5e     C5 EB D0 EB 
34b62     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
34b66     E4 F7 2C 06 
34b6a     28 06 24 06 
34b6e     22 06 1F 06 
34b72     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
34b76     16 06 14 06 
34b7a     0F 06 D0 F3 
34b7e     65 ED 2D EC 
34b82     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
34b86     01 EC 0A EC 
34b8a     14 EC 1E EC 
34b8e     29 EC FB 03 
34b92     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
34b96     63 06 60 06 
34b9a     5E 06 59 06 
34b9e     58 06 54 06 
34ba2     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
34ba6     69 F1 21 ED 
34baa     55 EC 33 EC 
34bae     36 EC 40 EC 
34bb2     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
34bb6     5C EC 68 EC 
34bba     92 02 D9 02 
34bbe     D7 02 D7 02 
34bc2     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
34bc6     D1 02 D1 02 
34bca     CE 02 CD 02 
34bce     5D FC 80 EF 
34bd2     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
34bd6     83 EC 8A EC 
34bda     93 EC 9C EC 
34bde     A5 EC B1 EC 
34be2     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
34be6     2B 03 2A 03 
34bea     29 03 26 03 
34bee     25 03 24 03 
34bf2     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
34bf6     1F 03 70 F7 
34bfa     D0 EE 27 ED 
34bfe     DB EC D4 EC 
34c02     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
34c06     F0 EC FA EC 
34c0a     02 ED F9 F4 
34c0e     7B 03 7C 03 
34c12     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
34c16     75 03 73 03 
34c1a     72 03 70 03 
34c1e     6D 03 6C 03 
34c22     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
34c26     54 ED 22 ED 
34c2a     22 ED 2C ED 
34c2e     35 ED 3F ED 
34c32     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
34c36     14 01 C3 03 
34c3a     C1 03 C0 03 
34c3e     5F 01 A5 00 
34c42     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
34c46     7B 00 7C 00 
34c4a     20 00 85 F1 
34c4e     2A EE 89 ED 
34c52     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
34c56     80 ED 87 ED 
34c5a     90 ED 9A ED 
34c5e     A3 ED 73 00 
34c62     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
34c66     D0 00 D0 00 
34c6a     D0 00 D0 00 
34c6e     D0 00 CF 00 
34c72     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
34c76     80 F0 3D EE 
34c7a     D5 ED C7 ED 
34c7e     CD ED D6 ED 
34c82     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
34c86     F2 ED FA ED 
34c8a     1D 01 29 01 
34c8e     27 01 27 01 
34c92     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
34c96     25 01 26 01 
34c9a     26 01 23 01 
34c9e     D0 F7 EC EF 
34ca2     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
34ca6     1C EE 24 EE 
34caa     2D EE 37 EE 
34cae     40 EE 47 EE 
34cb2     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
34cb6     7D 01 7B 01 
34cba     7A 01 7A 01 
34cbe     79 01 78 01 
34cc2     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
34cc6     84 FE DE F3 
34cca     6C EF 93 EE 
34cce     72 EE 72 EE 
34cd2     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
34cd6     8B EE 95 EE 
34cda     9E EE 15 FC 
34cde     67 FE 67 FE 
34ce2     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
34ce6     6B FE 6B FE 
34cea     6D FE 6D FE 
34cee     6D FE 6F FE 
34cf2     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
34cf6     DF EE CC EE 
34cfa     CF EE D9 EE 
34cfe     E1 EE EA EE 
34d02     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
34d06     5A FE C4 FE 
34d0a     C3 FE C5 FE 
34d0e     C6 FE C6 FE 
34d12     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
34d16     C8 FE C7 FE 
34d1a     DA FB 85 F1 
34d1e     8D EF 31 EF 
34d22     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
34d26     34 EF 3E EF 
34d2a     46 EF 4F EF 
34d2e     57 EF 0D FF 
34d32     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
34d36     1F FF 1F FF 
34d3a     21 FF 21 FF 
34d3e     21 FF 21 FF 
34d42     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
34d46     15 F1 BE EF 
34d4a     84 EF 7E EF 
34d4e     88 EF 8F EF 
34d52     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
34d56     A9 EF 06 F2 
34d5a     A6 FC AB FC 
34d5e     AD FC AE FC 
34d62     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
34d66     B2 FC B4 FC 
34d6a     B6 FC B7 FC 
34d6e     8B F4 BD F0 
34d72     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
34d76     E4 EF EE EF 
34d7a     F6 EF FD EF 
34d7e     04 F0 0E F0 
34d82     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
34d86     0B FD 0D FD 
34d8a     0F FD 11 FD 
34d8e     11 FD 13 FD 
34d92     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
34d96     17 FD 64 F3 
34d9a     CD F0 52 F0 
34d9e     41 F0 45 F0 
34da2     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
34da6     5B F0 64 F0 
34daa     6D F0 FB FC 
34dae     65 FD 68 FD 
34db2     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
34db6     6C FD 6D FD 
34dba     6F FD 70 FD 
34dbe     72 FD B3 FB 
34dc2     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
34dc6     A4 F0 99 F0 
34dca     A0 F0 A8 F0 
34dce     AE F0 B9 F0 
34dd2     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
34dd6     CB FB DD FB 
34dda     DE FB E0 FB 
34dde     E3 FB E3 FB 
34de2     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
34de6     E9 FB EC FB 
34dea     62 F7 27 F2 
34dee     2A F1 FF F0 
34df2     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
34df6     0C F1 13 F1 
34dfa     1B F1 23 F1 
34dfe     33 F2 3C FC 
34e02     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
34e06     42 FC 45 FC 
34e0a     47 FC 48 FC 
34e0e     4A FC 4C FC 
34e12     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
34e16     20 F2 77 F1 
34e1a     5C F1 5F F1 
34e1e     64 F1 6C F1 
34e22     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
34e26     83 F1 DC F8 
34e2a     9A FC 9A FC 
34e2e     9B FC 9E FC 
34e32     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
34e36     A3 FC A4 FC 
34e3a     A6 FC A9 FC 
34e3e     90 F4 33 F2 
34e42     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
34e46     BA F1 BF F1 
34e4a     C7 F1 CE F1 
34e4e     D6 F1 DC F1 
34e52     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
34e56     F3 FC F5 FC 
34e5a     FE FB 79 FB 
34e5e     62 FB 5F FB 
34e62     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
34e66     6F FA AF F3 
34e6a     53 F2 12 F2 
34e6e     0F F2 15 F2 
34e72     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
34e76     2A F2 32 F2 
34e7a     38 F2 9A FB 
34e7e     AF FB B1 FB 
34e82     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
34e86     B7 FB B8 FB 
34e8a     BA FB BC FB 
34e8e     C1 FB 3B F8 
34e92     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
34e96     6E F2 6C F2 
34e9a     74 F2 7A F2 
34e9e     81 F2 87 F2 
34ea2     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
34ea6     06 FC 09 FC 
34eaa     0C FC 0E FC 
34eae     0F FC 12 FC 
34eb2     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
34eb6     17 FC 1A FC 
34eba     B2 F6 7B F3 
34ebe     DD F2 C5 F2 
34ec2     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
34ec6     D4 F2 DB F2 
34eca     E0 F2 E8 F2 
34ece     28 F8 60 FC 
34ed2     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
34ed6     64 FC 66 FC 
34eda     68 FC 6A FC 
34ede     6D FC 52 FC 
34ee2     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
34ee6     78 F3 24 F3 
34eea     1A F3 1E F3 
34eee     24 F3 2A F3 
34ef2     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
34ef6     3D F3 80 FA 
34efa     0C FB 0F FB 
34efe     10 FB 14 FB 
34f02     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
34f06     1B FB 1D FB 
34f0a     1F FB 92 FA 
34f0e     DE F4 AE F3 
34f12     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
34f16     79 F3 7E F3 
34f1a     84 F3 8C F3 
34f1e     92 F3 97 F3 
34f22     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
34f26     67 FB 69 FB 
34f2a     6B FB 6F FB 
34f2e     71 FB 72 FB 
34f32     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
34f36     E3 F8 BA F4 
34f3a     EE F3 CC F3 
34f3e     CA F3 CF F3 
34f42     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
34f46     E2 F3 E8 F3 
34f4a     ED F3 B7 FB 
34f4e     BC FB BE FB 
34f52     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
34f56     C4 FB C6 FB 
34f5a     C8 FB C9 FB 
34f5e     CC FB 8F F7 
34f62     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
34f66     1E F4 1E F4 
34f6a     24 F4 2A F4 
34f6e     30 F4 38 F4 
34f72     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
34f76     AD FA B1 FA 
34f7a     B4 FA B6 FA 
34f7e     BA FA BB FA 
34f82     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
34f86     C2 FA C6 FA 
34f8a     55 F6 C6 F4 
34f8e     7D F4 72 F4 
34f92     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
34f96     83 F4 89 F4 
34f9a     8F F4 94 F4 
34f9e     66 FA 03 FB 
34fa2     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
34fa6     0A FB 0E FB 
34faa     10 FB 11 FB 
34fae     16 FB 18 FB 
34fb2     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
34fb6     F9 F4 CA F4 
34fba     C5 F4 CB F4 
34fbe     D1 F4 D7 F4 
34fc2     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
34fc6     E8 F4 3F FB 
34fca     56 FB 58 FB 
34fce     5A FB 5E FB 
34fd2     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
34fd6     64 FB 64 FB 
34fda     69 FB 99 F9 
34fde     E9 F5 33 F5 
34fe2     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
34fe6     1D F5 22 F5 
34fea     27 F5 2E F5 
34fee     32 F5 37 F5 
34ff2     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
34ff6     BC FA BC FA 
34ffa     C1 FA C2 FA 
34ffe     C4 FA C8 FA 
35002     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
35006     F9 F7 DB F5 
3500a     78 F5 69 F5 
3500e     6A F5 70 F5 
35012     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
35016     7F F5 85 F5 
3501a     6E F7 06 FB 
3501e     0A FB 0B FB 
35022     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
35026     14 FB 15 FB 
3502a     18 FB 1B FB 
3502e     1D FB 70 F7 
35032     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
35036     B6 F5 BB F5 
3503a     C0 F5 C6 F5 
3503e     CA F5 CF F5 
35042     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
35046     54 FB 56 FB 
3504a     5A FB 5B FB 
3504e     5E FB 5F FB 
35052     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
35056     67 FB 52 FB 
3505a     29 F7 33 F6 
3505e     06 F6 02 F6 
35062     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
35066     10 F6 16 F6 
3506a     1A F6 1F F6 
3506e     81 FB 9F FB 
35072     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
35076     51 FB F2 FA 
3507a     E3 FA E3 FA 
3507e     E5 FA E9 FA 
35082     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
35086     64 F6 4D F6 
3508a     4D F6 53 F6 
3508e     57 F6 5C F6 
35092     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
35096     6A F6 19 FB 
3509a     1E FB 22 FB 
3509e     23 FB 24 FB 
350a2     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
350a6     2C FB 2E FB 
350aa     32 FB F0 F8 
350ae     01 F7 A5 F6 
350b2     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
350b6     9F F6 A3 F6 
350ba     A6 F6 AC F6 
350be     B0 F6 EB F7 
350c2     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
350c6     68 FB 6C FB 
350ca     6E FB 71 FB 
350ce     72 FB 74 FB 
350d2     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
350d6     71 F8 21 F7 
350da     E5 F6 DD F6 
350de     E1 F6 E6 F6 
350e2     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
350e6     F5 F6 F7 F6 
350ea     F7 FA AB FB 
350ee     AD FB AF FB 
350f2     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
350f6     B6 FB B9 FB 
350fa     BB FB BC FB 
350fe     21 FB 07 F8 
35102     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
35106     22 F7 26 F7 
3510a     2B F7 2E F7 
3510e     34 F7 38 F7 
35112     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
35116     13 FB 16 FB 
3511a     17 FB 1B FB 
3511e     1E FB 20 FB 
35122     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
35126     26 FB 77 FA 
3512a     F3 F7 7C F7 
3512e     67 F7 6A F7 
35132     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
35136     74 F7 7A F7 
3513a     7E F7 82 F7 
3513e     53 FB 5A FB 
35142     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
35146     5F FB 63 FB 
3514a     65 FB 67 FB 
3514e     69 FB 6A FB 
35152     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
35156     B5 F7 A9 F7 
3515a     AD F7 B0 F7 
3515e     B5 F7 B8 F7 
35162     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
35166     6E F8 99 FB 
3516a     9C FB 9D FB 
3516e     9F FB A4 FB 
35172     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
35176     A9 FB AB FB 
3517a     AD FB 46 F9 
3517e     26 F8 F0 F7 
35182     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
35186     F4 F7 F8 F7 
3518a     FB F7 FF F7 
3518e     03 F8 65 FA 
35192     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
35196     2B FB 2F FB 
3519a     30 FB 32 FB 
3519e     34 FB 38 FB 
351a2     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
351a6     E9 F8 4A F8 
351aa     2E F8 2C F8 
351ae     2F F8 36 F8 
351b2     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
351b6     41 F8 44 F8 
351ba     4A FB 67 FB 
351be     68 FB 6B FB 
351c2     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
351c6     73 FB 74 FB 
351ca     78 FB 7A FB 
351ce     14 FB E7 F8 
351d2     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
351d6     6D F8 70 F8 
351da     73 F8 78 F8 
351de     7C F8 80 F8 
351e2     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
351e6     A6 FB A7 FB 
351ea     A9 FB AC FB 
351ee     AF FB B1 FB 
351f2     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
351f6     B7 FB 73 FA 
351fa     F8 F8 B4 F8 
351fe     A9 F8 AB F8 
35202     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
35206     B4 F8 B8 F8 
3520a     BB F8 FA F8 
3520e     64 FB 65 FB 
35212     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
35216     6D FB 6F FB 
3521a     70 FB 74 FB 
3521e     77 FB 77 FB 
35222     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
35226     E9 F8 E4 F8 
3522a     E8 F8 EB F8 
3522e     EE F8 F2 F8 
35232     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
35236     B5 FA 9F FB 
3523a     A1 FB A4 FB 
3523e     A5 FB A9 FB 
35242     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
35246     AE FB B1 FB 
3524a     B2 FB C7 F9 
3524e     39 F9 22 F9 
35252     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
35256     26 F9 2A F9 
3525a     2E F9 32 F9 
3525e     33 F9 BA FB 
35262     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
35266     DE FB E1 FB 
3526a     E2 FB E4 FB 
3526e     E5 FB E7 FB 
35272     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
35276     C5 F9 67 F9 
3527a     57 F9 56 F9 
3527e     5B F9 5F F9 
35282     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
35286     68 F9 6C F9 
3528a     0B FC 11 FC 
3528e     14 FC 15 FC 
35292     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
35296     B5 FB B5 FB 
3529a     B6 FB B8 FB 
3529e     E9 FA C8 F9 
352a2     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
352a6     90 F9 94 F9 
352aa     95 F9 99 F9 
352ae     9D F9 9F F9 
352b2     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
352b6     DE FB DF FB 
352ba     E2 FB E4 FB 
352be     E6 FB E8 FB 
352c2     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
352c6     EF FB AC FA 
352ca     E9 F9 C7 F9 
352ce     C3 F9 C8 F9 
352d2     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
352d6     D0 F9 D4 F9 
352da     D6 F9 0E FB 
352de     11 FC 13 FC 
352e2     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
352e6     19 FC 1B FC 
352ea     1D FC 1E FC 
352ee     21 FC 22 FC 
352f2     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
352f6     F7 F9 F7 F9 
352fa     FB F9 FE F9 
352fe     00 FA 03 FA 
35302     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
35306     1B FC 45 FC 
3530a     46 FC 48 FC 
3530e     4A FC 4B FC 
35312     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
35316     52 FC 54 FC 
3531a     F3 FB 82 FA 
3531e     35 FA 28 FA 
35322     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
35326     31 FA 32 FA 
3532a     37 FA 37 FA 
3532e     3C FA 00 FC 
35332     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
35336     09 FC 0B FC 
3533a     0F FC 12 FC 
3533e     12 FC 15 FC 
35342     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
35346     8D FA 60 FA 
3534a     5B FA 5C FA 
3534e     60 FA 61 FA 
35352     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
35356     6C FA 6D FA 
3535a     37 FC 3A FC 
3535e     3B FC 3D FC 
35362     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
35366     43 FC 44 FC 
3536a     45 FC 47 FC 
3536e     51 FB AB FA 
35372     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
35376     8E FA 91 FA 
3537a     93 FA 95 FA 
3537e     98 FA 9B FA 
35382     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
35386     68 FC 6A FC 
3538a     6C FC 6E FC 
3538e     70 FC 72 FC 
35392     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
35396     76 FC 3B FB 
3539a     D0 FA BB FA 
3539e     B9 FA BD FA 
353a2     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
353a6     C4 FA C6 FA 
353aa     CA FA 13 FC 
353ae     3A FC 3A FC 
353b2     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
353b6     41 FC 43 FC 
353ba     44 FC 47 FC 
353be     48 FC 3C FC 
353c2     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
353c6     E6 FA E8 FA 
353ca     EB FA EE FA 
353ce     F0 FA F2 FA 
353d2     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
353d6     61 FC 66 FC 
353da     68 FC 6B FC 
353de     6C FC 6E FC 
353e2     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
353e6     73 FC 75 FC 
353ea     13 FC 3F FB 
353ee     17 FB 12 FB 
353f2     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
353f6     1A FB 1D FB 
353fa     1F FB 20 FB 
353fe     23 FB 92 FC 
35402     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
35406     96 FC 97 FC 
3540a     9A FC 9C FC 
3540e     9E FC 9F FC 
35412     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
35416     5A FB 41 FB 
3541a     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
3541e     73 32 00 04 
35422     00 00 10 00 
35426     00 00 00 00 
3542a     00 00 00 00 | atari2 file "atari2.s2"
3542e     43 87 43 87 
35432     43 87 44 87 
35436     43 87 44 87 
3543a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3543e     43 87 43 87 
35442     43 87 44 87 
35446     43 87 43 87 
3544a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3544e     44 87 43 87 
35452     44 87 43 87 
35456     43 87 43 87 
3545a     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3545e     43 87 43 87 
35462     44 87 43 87 
35466     44 87 44 87 
3546a     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
3546e     43 87 43 87 
35472     44 87 43 87 
35476     43 87 42 87 
3547a     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3547e     43 87 43 87 
35482     43 87 43 87 
35486     44 87 43 87 
3548a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3548e     44 87 44 87 
35492     43 87 44 87 
35496     43 87 44 87 
3549a     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
3549e     44 87 43 87 
354a2     44 87 44 87 
354a6     43 87 43 87 
354aa     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
354ae     43 87 44 87 
354b2     44 87 43 87 
354b6     43 87 44 87 
354ba     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
354be     43 87 43 87 
354c2     43 87 43 87 
354c6     43 87 43 87 
354ca     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
354ce     42 87 43 87 
354d2     44 87 42 87 
354d6     43 87 43 87 
354da     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
354de     43 87 44 87 
354e2     44 87 43 87 
354e6     43 87 43 87 
354ea     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
354ee     43 87 5C 87 
354f2     EE 86 AC 87 
354f6     4C 7C A3 78 
354fa     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
354fe     BC 78 BB 78 
35502     BD 78 BC 78 
35506     BB 78 BD 78 
3550a     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
3550e     BB 78 BB 78 
35512     BC 78 BC 78 
35516     BC 78 BB 78 
3551a     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3551e     BC 78 BC 78 
35522     BC 78 BC 78 
35526     BC 78 BC 78 
3552a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3552e     BB 78 BC 78 
35532     A0 78 4C 7C 
35536     11 7A 29 89 
3553a     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
3553e     44 87 43 87 
35542     44 87 43 87 
35546     43 87 42 87 
3554a     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3554e     43 87 43 87 
35552     44 87 ED 85 
35556     71 85 52 79 
3555a     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
3555e     BC 78 BC 78 
35562     BC 78 BC 78 
35566     BC 78 BC 78 
3556a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3556e     BC 78 BC 78 
35572     BC 78 A0 78 
35576     CF 7A B9 81 
3557a     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
3557e     44 87 43 87 
35582     43 87 44 87 
35586     43 87 44 87 
3558a     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3558e     43 87 43 87 
35592     43 87 43 87 
35596     44 87 43 87 
3559a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3559e     43 87 43 87 
355a2     44 87 43 87 
355a6     44 87 43 87 
355aa     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
355ae     44 87 43 87 
355b2     43 87 43 87 
355b6     5A 87 39 81 
355ba     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
355be     A5 78 BC 78 
355c2     BB 78 BC 78 
355c6     BB 78 BC 78 
355ca     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
355ce     BC 78 BC 78 
355d2     BC 78 BC 78 
355d6     BC 78 8F 79 
355da     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
355de     09 85 47 87 
355e2     43 87 43 87 
355e6     42 87 42 87 
355ea     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
355ee     43 87 43 87 
355f2     43 87 43 87 
355f6     43 87 44 87 
355fa     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
355fe     43 87 43 87 
35602     44 87 43 87 
35606     42 87 43 87 
3560a     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
3560e     44 87 43 87 
35612     43 87 43 87 
35616     44 87 44 87 
3561a     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
3561e     94 78 55 7A 
35622     B9 78 BC 78 
35626     BC 78 BC 78 
3562a     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3562e     BC 78 BB 78 
35632     BC 78 BC 78 
35636     BC 78 BC 78 
3563a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3563e     BB 78 BC 78 
35642     BC 78 BC 78 
35646     BB 78 BC 78 
3564a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3564e     BC 78 BC 78 
35652     BD 78 BC 78 
35656     BC 78 BB 78 
3565a     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
3565e     94 78 B3 84 
35662     36 84 4A 87 
35666     43 87 43 87 
3566a     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
3566e     43 87 44 87 
35672     43 87 43 87 
35676     43 87 43 87 
3567a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3567e     43 87 44 87 
35682     43 87 44 87 
35686     43 87 43 87 
3568a     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3568e     43 87 43 87 
35692     43 87 45 87 
35696     43 87 43 87 
3569a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
3569e     43 87 44 87 
356a2     44 87 44 87 
356a6     43 87 43 87 
356aa     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
356ae     43 87 42 87 
356b2     43 87 43 87 
356b6     44 87 43 87 
356ba     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
356be     54 87 3C 82 
356c2     36 83 52 79 
356c6     C6 78 BC 78 
356ca     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
356ce     BB 78 BB 78 
356d2     BC 78 BC 78 
356d6     BC 78 BC 78 
356da     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
356de     BD 78 ED 78 
356e2     1B 79 F4 83 
356e6     4D 83 4E 87 
356ea     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
356ee     44 87 43 87 
356f2     42 87 44 87 
356f6     43 87 42 87 
356fa     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
356fe     43 87 54 87 
35702     26 82 B3 84 
35706     D6 77 BB 78 
3570a     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
3570e     BC 78 BB 78 
35712     BB 78 BB 78 
35716     BB 78 BB 78 
3571a     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
3571e     BC 78 BC 78 
35722     26 79 18 75 
35726     36 83 1F 84 
3572a     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
3572e     43 87 43 87 
35732     43 87 43 87 
35736     43 87 44 87 
3573a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3573e     43 87 44 87 
35742     44 87 43 87 
35746     43 87 43 87 
3574a     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
3574e     43 87 43 87 
35752     43 87 43 87 
35756     44 87 44 87 
3575a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
3575e     44 87 43 87 
35762     43 87 43 87 
35766     43 87 44 87 
3576a     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3576e     44 87 44 87 
35772     44 87 43 87 
35776     44 87 43 87 
3577a     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3577e     43 87 43 87 
35782     43 87 44 87 
35786     44 87 43 87 
3578a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3578e     43 87 43 87 
35792     43 87 43 87 
35796     43 87 44 87 
3579a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3579e     43 87 44 87 
357a2     43 87 44 87 
357a6     19 87 7D 86 
357aa     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
357ae     B1 78 BC 78 
357b2     BC 78 BC 78 
357b6     BC 78 BC 78 
357ba     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
357be     BC 78 BC 78 
357c2     BD 78 BC 78 
357c6     B7 78 3B 7B 
357ca     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
357ce     96 86 44 87 
357d2     43 87 43 87 
357d6     43 87 43 87 
357da     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
357de     44 87 44 87 
357e2     43 87 44 87 
357e6     43 87 44 87 
357ea     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
357ee     43 87 44 87 
357f2     43 87 44 87 
357f6     43 87 44 87 
357fa     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
357fe     43 87 44 87 
35802     43 87 43 87 
35806     44 87 43 87 
3580a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3580e     44 87 44 87 
35812     43 87 43 87 
35816     43 87 44 87 
3581a     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3581e     43 87 43 87 
35822     43 87 43 87 
35826     44 87 44 87 
3582a     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
3582e     36 83 CF 7A 
35832     AB 78 BB 78 
35836     BC 78 BC 78 
3583a     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
3583e     BB 78 BC 78 
35842     BC 78 BC 78 
35846     BC 78 BC 78 
3584a     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3584e     BC 78 BC 78 
35852     BC 78 BB 78 
35856     BC 78 BC 78 
3585a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3585e     BB 78 BC 78 
35862     BB 78 BC 78 
35866     BC 78 BD 78 
3586a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
3586e     BC 78 BC 78 
35872     BC 78 BC 78 
35876     BC 78 BD 78 
3587a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
3587e     BC 78 BB 78 
35882     BC 78 BB 78 
35886     BB 78 BC 78 
3588a     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
3588e     BC 78 BC 78 
35892     BC 78 BC 78 
35896     BC 78 BB 78 
3589a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
3589e     BC 78 BC 78 
358a2     BC 78 BD 78 
358a6     BB 78 BC 78 
358aa     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
358ae     BC 78 BC 78 
358b2     BC 78 BB 78 
358b6     BC 78 BB 78 
358ba     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
358be     BB 78 BC 78 
358c2     BC 78 BC 78 
358c6     BC 78 BB 78 
358ca     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
358ce     BC 78 BC 78 
358d2     BC 78 BB 78 
358d6     BC 78 BB 78 
358da     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
358de     BC 78 BC 78 
358e2     BC 78 BC 78 
358e6     BB 78 BC 78 
358ea     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
358ee     BC 78 9F 78 
358f2     52 79 B3 84 
358f6     2F 86 60 87 
358fa     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
358fe     44 87 43 87 
35902     43 87 43 87 
35906     43 87 43 87 
3590a     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3590e     43 87 43 87 
35912     43 87 44 87 
35916     43 87 43 87 
3591a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3591e     43 87 43 87 
35922     43 87 43 87 
35926     43 87 44 87 
3592a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3592e     44 87 44 87 
35932     5E 87 BC 80 
35936     FB 80 94 78 
3593a     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
3593e     BD 78 BC 78 
35942     BB 78 BC 78 
35946     BB 78 BB 78 
3594a     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
3594e     BC 78 BB 78 
35952     BB 78 6B 79 
35956     D6 77 AC 87 
3595a     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
3595e     43 87 44 87 
35962     43 87 43 87 
35966     44 87 43 87 
3596a     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3596e     43 87 44 87 
35972     43 87 5C 87 
35976     E7 80 00 80 
3597a     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
3597e     BC 78 BD 78 
35982     BC 78 BC 78 
35986     BC 78 BB 78 
3598a     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3598e     BC 78 BC 78 
35992     BB 78 BC 78 
35996     BB 78 BC 78 
3599a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3599e     BB 78 BC 78 
359a2     BC 78 BC 78 
359a6     BC 78 BC 78 
359aa     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
359ae     BC 78 BC 78 
359b2     BC 78 BC 78 
359b6     A0 78 8D 7B 
359ba     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
359be     60 87 43 87 
359c2     44 87 44 87 
359c6     43 87 43 87 
359ca     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
359ce     44 87 43 87 
359d2     43 87 43 87 
359d6     44 87 73 86 
359da     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
359de     51 7B B6 78 
359e2     BC 78 BD 78 
359e6     BC 78 BC 78 
359ea     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
359ee     BB 78 BC 78 
359f2     BD 78 BB 78 
359f6     BC 78 BB 78 
359fa     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
359fe     BC 78 BC 78 
35a02     BC 78 BC 78 
35a06     BB 78 BC 78 
35a0a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35a0e     BC 78 BB 78 
35a12     BB 78 BC 78 
35a16     BC 78 BB 78 
35a1a     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
35a1e     22 8C AF 84 
35a22     48 87 43 87 
35a26     44 87 43 87 
35a2a     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
35a2e     43 87 42 87 
35a32     43 87 43 87 
35a36     44 87 43 87 
35a3a     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
35a3e     43 87 43 87 
35a42     44 87 44 87 
35a46     43 87 43 87 
35a4a     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
35a4e     43 87 43 87 
35a52     43 87 43 87 
35a56     44 87 43 87 
35a5a     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
35a5e     9F 8B D6 77 
35a62     16 7C B3 78 
35a66     BC 78 BB 78 
35a6a     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
35a6e     BB 78 BC 78 
35a72     BB 78 BC 78 
35a76     BC 78 BC 78 
35a7a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35a7e     BC 78 BB 78 
35a82     BB 78 BC 78 
35a86     BB 78 BC 78 
35a8a     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
35a8e     BB 78 BB 78 
35a92     BC 78 BC 78 
35a96     BC 78 BB 78 
35a9a     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
35a9e     BC 78 BC 78 
35aa2     BC 78 BD 78 
35aa6     BB 78 BC 78 
35aaa     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
35aae     BC 78 BC 78 
35ab2     BC 78 BB 78 
35ab6     BC 78 BC 78 
35aba     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35abe     A8 78 54 7E 
35ac2     F4 83 17 82 
35ac6     50 87 43 87 
35aca     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
35ace     44 87 43 87 
35ad2     44 87 43 87 
35ad6     43 87 44 87 
35ada     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
35ade     43 87 28 87 
35ae2     20 85 CF 7A 
35ae6     70 7D AD 78 
35aea     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
35aee     BB 78 BC 78 
35af2     BC 78 BC 78 
35af6     BB 78 BB 78 
35afa     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
35afe     BB 78 B2 78 
35b02     9A 7C CF 7A 
35b06     4A 87 0D 87 
35b0a     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
35b0e     43 87 44 87 
35b12     43 87 44 87 
35b16     43 87 43 87 
35b1a     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
35b1e     44 87 43 87 
35b22     28 87 51 85 
35b26     11 7A 1E 7D 
35b2a     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
35b2e     BC 78 BB 78 
35b32     BC 78 BC 78 
35b36     BC 78 BC 78 
35b3a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35b3e     BB 78 BC 78 
35b42     BB 78 BC 78 
35b46     BC 78 BC 78 
35b4a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35b4e     BB 78 BC 78 
35b52     BC 78 BC 78 
35b56     BD 78 BB 78 
35b5a     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
35b5e     BC 78 BB 78 
35b62     BC 78 BC 78 
35b66     BC 78 BB 78 
35b6a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35b6e     BC 78 BC 78 
35b72     BC 78 BC 78 
35b76     BB 78 BC 78 
35b7a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35b7e     BC 78 BD 78 
35b82     BC 78 BC 78 
35b86     BC 78 BB 78 
35b8a     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35b8e     BC 78 BB 78 
35b92     BB 78 BC 78 
35b96     BC 78 BB 78 
35b9a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35b9e     BB 78 BB 78 
35ba2     BB 78 BC 78 
35ba6     B6 78 48 7D 
35baa     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
35bae     56 87 43 87 
35bb2     42 87 44 87 
35bb6     44 87 43 87 
35bba     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
35bbe     43 87 44 87 
35bc2     43 87 44 87 
35bc6     4C 87 7E 83 
35bca     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
35bce     F7 78 BC 78 
35bd2     BC 78 BB 78 
35bd6     BB 78 BC 78 
35bda     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35bde     BC 78 BB 78 
35be2     BC 78 BC 78 
35be6     BB 78 BC 78 
35bea     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
35bee     BB 78 BC 78 
35bf2     BC 78 BC 78 
35bf6     BC 78 BB 78 
35bfa     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35bfe     BC 78 BC 78 
35c02     BC 78 BC 78 
35c06     BC 78 BB 78 
35c0a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35c0e     BC 78 BB 78 
35c12     BB 78 BC 78 
35c16     BC 78 BB 78 
35c1a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35c1e     BC 78 BC 78 
35c22     BB 78 BC 78 
35c26     BC 78 BC 78 
35c2a     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
35c2e     73 32 00 04 
35c32     00 00 10 00 
35c36     00 00 00 00 
35c3a     00 00 00 00 | atari12 file "atari12.s2"
35c3e     00 6D 00 6D 
35c42     00 6D 00 6D 
35c46     00 6D 00 6D 
35c4a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c4e     00 6D 00 6D 
35c52     00 6D 00 6D 
35c56     00 6D 00 6D 
35c5a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c5e     00 6D 00 6D 
35c62     00 6D 00 6D 
35c66     00 6D 00 6D 
35c6a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c6e     00 6D 00 6D 
35c72     00 6D 00 6D 
35c76     00 6D 00 6D 
35c7a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c7e     00 6D 00 6D 
35c82     00 6D 00 6D 
35c86     00 6D 00 6D 
35c8a     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
35c8e     00 6C 00 6C 
35c92     00 6C 00 6C 
35c96     00 6C 00 6C 
35c9a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35c9e     00 6C 00 6C 
35ca2     00 6C 00 6C 
35ca6     00 6C 00 6C 
35caa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cae     00 6C 00 6C 
35cb2     00 6C 00 6C 
35cb6     00 6C 00 6C 
35cba     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cbe     00 6C 00 6C 
35cc2     00 6C 00 6C 
35cc6     00 6C 00 6C 
35cca     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cce     00 6C 00 6C 
35cd2     00 6C 00 6C 
35cd6     00 6C 00 6C 
35cda     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cde     00 6C 00 6C 
35ce2     00 6C 00 6C 
35ce6     00 6C 00 6C 
35cea     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cee     00 6C 00 6C 
35cf2     00 6C 00 6C 
35cf6     00 6C 00 6C 
35cfa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cfe     00 6C 00 6C 
35d02     00 6C 00 6C 
35d06     00 6C 00 6C 
35d0a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35d0e     00 6C 00 6C 
35d12     00 6C 00 6C 
35d16     00 6C 00 6C 
35d1a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35d1e     00 6C 00 6C 
35d22     00 6C 00 6C 
35d26     00 6C 00 6C 
35d2a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35d2e     00 6C 00 6C 
35d32     00 6C 00 6C 
35d36     00 6C 00 6C 
35d3a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35d3e     00 6C 00 6B 
35d42     00 6B 00 6B 
35d46     00 6B 00 6B 
35d4a     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d4e     00 6B 00 6B 
35d52     00 6B 00 6B 
35d56     00 6B 00 6B 
35d5a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d5e     00 6B 00 6B 
35d62     00 6B 00 6B 
35d66     00 6B 00 6B 
35d6a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d6e     00 6B 00 6B 
35d72     00 6B 00 6B 
35d76     00 6B 00 6B 
35d7a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d7e     00 6B 00 6B 
35d82     00 6B 00 6B 
35d86     00 6B 00 6B 
35d8a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d8e     00 6B 00 6B 
35d92     00 6B 00 6B 
35d96     00 6B 00 6B 
35d9a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35d9e     00 6B 00 6B 
35da2     00 6B 00 6B 
35da6     00 6B 00 6B 
35daa     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35dae     00 6B 00 6B 
35db2     00 6B 00 6B 
35db6     00 6B 00 6B 
35dba     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35dbe     00 6B 00 6B 
35dc2     00 6B 00 6B 
35dc6     00 6B 00 6B 
35dca     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
35dce     00 6B 00 6B 
35dd2     00 6B 00 6B 
35dd6     00 6A 00 9D 
35dda     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
35dde     00 9E 00 9E 
35de2     00 9E 00 9E 
35de6     00 9E 00 9E 
35dea     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35dee     00 9E 00 9E 
35df2     00 9E 00 9E 
35df6     00 9E 00 9E 
35dfa     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35dfe     00 9E 00 9E 
35e02     00 9E 00 9E 
35e06     00 9E 00 9E 
35e0a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e0e     00 9E 00 9E 
35e12     00 9E 00 9E 
35e16     00 9E 00 9E 
35e1a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e1e     00 9E 00 9E 
35e22     00 9E 00 9E 
35e26     00 9E 00 9E 
35e2a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e2e     00 9E 00 9E 
35e32     00 9E 00 9E 
35e36     00 9E 00 9E 
35e3a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e3e     00 9E 00 9E 
35e42     00 9E 00 9E 
35e46     00 9E 00 9E 
35e4a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e4e     00 9E 00 9E 
35e52     00 9E 00 9E 
35e56     00 9E 00 9E 
35e5a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
35e5e     00 9E 00 9E 
35e62     00 9E 00 9E 
35e66     00 9E 00 9E 
35e6a     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
35e6e     00 9F 00 9F 
35e72     00 9F 00 9F 
35e76     00 9F 00 9F 
35e7a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35e7e     00 9F 00 9F 
35e82     00 9F 00 9F 
35e86     00 9F 00 9F 
35e8a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35e8e     00 9F 00 9F 
35e92     00 9F 00 9F 
35e96     00 9F 00 9F 
35e9a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35e9e     00 9F 00 9F 
35ea2     00 9F 00 9F 
35ea6     00 9F 00 9F 
35eaa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35eae     00 9F 00 9F 
35eb2     00 9F 00 9F 
35eb6     00 9F 00 9F 
35eba     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35ebe     00 9F 00 9F 
35ec2     00 9F 00 9F 
35ec6     00 9F 00 9F 
35eca     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35ece     00 9F 00 9F 
35ed2     00 9F 00 9F 
35ed6     00 9F 00 9F 
35eda     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35ede     00 9F 00 9F 
35ee2     00 9F 00 9F 
35ee6     00 9F 00 9F 
35eea     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35eee     00 9F 00 9F 
35ef2     00 9F 00 9F 
35ef6     00 9F 00 9F 
35efa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35efe     00 9F 00 9F 
35f02     00 9F 00 9F 
35f06     00 9F 00 9F 
35f0a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35f0e     00 9F 00 9F 
35f12     00 9F 00 9F 
35f16     00 9F 00 9F 
35f1a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35f1e     00 9F 00 9F 
35f22     00 9F 00 9F 
35f26     00 9F 00 9F 
35f2a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35f2e     00 9F 00 9F 
35f32     00 9F 00 A0 
35f36     00 A0 00 A0 
35f3a     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f3e     00 A0 00 A0 
35f42     00 A0 00 A0 
35f46     00 A0 00 A0 
35f4a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f4e     00 A0 00 A0 
35f52     00 A0 00 A0 
35f56     00 A0 00 A0 
35f5a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f5e     00 A0 00 A0 
35f62     00 A0 00 A0 
35f66     00 A0 00 A0 
35f6a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f6e     00 A0 00 A0 
35f72     00 A0 00 A0 
35f76     00 A0 00 A0 
35f7a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f7e     00 A0 00 A0 
35f82     00 A0 00 A0 
35f86     00 A0 00 A0 
35f8a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f8e     00 A0 00 A0 
35f92     00 A0 00 A0 
35f96     00 A0 00 A0 
35f9a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35f9e     00 A0 00 A0 
35fa2     00 A0 00 A0 
35fa6     00 A0 00 A0 
35faa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fae     00 A0 00 A0 
35fb2     00 A0 00 A0 
35fb6     00 A0 00 A0 
35fba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fbe     00 A0 00 A0 
35fc2     00 A0 00 A0 
35fc6     00 A0 00 A0 
35fca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fce     00 A0 00 A0 
35fd2     00 A0 00 A0 
35fd6     00 A0 00 A0 
35fda     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fde     00 A0 00 A0 
35fe2     00 A0 00 A0 
35fe6     00 A0 00 A0 
35fea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35fee     00 A0 00 A0 
35ff2     00 A0 00 A0 
35ff6     00 A0 00 A0 
35ffa     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
35ffe     00 6D 00 6D 
36002     00 6D 00 6D 
36006     00 6D 00 6D 
3600a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3600e     00 6D 00 6D 
36012     00 6D 00 6D 
36016     00 6D 00 6D 
3601a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3601e     00 6D 00 6D 
36022     00 6D 00 6D 
36026     00 6D 00 6D 
3602a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3602e     00 6D 00 6D 
36032     00 6D 00 6D 
36036     00 6D 00 6D 
3603a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3603e     00 6D 00 6D 
36042     00 6D 00 6D 
36046     00 6D 00 6D 
3604a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3604e     00 6D 00 6D 
36052     00 6D 00 6D 
36056     00 6D 00 6D 
3605a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3605e     00 6D 00 6D 
36062     00 6D 00 6D 
36066     00 6D 00 6D 
3606a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3606e     00 6D 00 6D 
36072     00 6D 00 6D 
36076     00 6D 00 6D 
3607a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3607e     00 6D 00 6D 
36082     00 A0 00 A0 
36086     00 A0 00 A0 
3608a     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3608e     00 A0 00 A0 
36092     00 A0 00 A0 
36096     00 A0 00 A0 
3609a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3609e     00 A0 00 A0 
360a2     00 A0 00 A0 
360a6     00 A0 00 A0 
360aa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360ae     00 A0 00 A0 
360b2     00 A0 00 A0 
360b6     00 A0 00 A0 
360ba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360be     00 A0 00 A0 
360c2     00 A0 00 A0 
360c6     00 A0 00 A0 
360ca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360ce     00 A0 00 A0 
360d2     00 A0 00 A0 
360d6     00 A0 00 A0 
360da     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360de     00 A0 00 A0 
360e2     00 A0 00 A0 
360e6     00 A0 00 A0 
360ea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360ee     00 A0 00 A0 
360f2     00 A0 00 A0 
360f6     00 A0 00 A0 
360fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
360fe     00 A0 00 A0 
36102     00 A0 00 A0 
36106     00 A0 00 A0 
3610a     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
3610e     00 6D 00 6D 
36112     00 6D 00 6D 
36116     00 6D 00 6D 
3611a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3611e     00 6D 00 6D 
36122     00 6D 00 6D 
36126     00 6D 00 6D 
3612a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3612e     00 6D 00 6D 
36132     00 6D 00 6D 
36136     00 6D 00 6D 
3613a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3613e     00 6D 00 6D 
36142     00 6D 00 6D 
36146     00 6D 00 6D 
3614a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3614e     00 6D 00 6D 
36152     00 6D 00 6D 
36156     00 6D 00 6D 
3615a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3615e     00 6D 00 6D 
36162     00 6D 00 6D 
36166     00 6D 00 6D 
3616a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3616e     00 6D 00 6D 
36172     00 6D 00 6D 
36176     00 6D 00 6D 
3617a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3617e     00 6D 00 6D 
36182     00 6D 00 6D 
36186     00 6D 00 6D 
3618a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3618e     00 6D 00 6D 
36192     00 6C 00 A0 
36196     00 9F 00 A0 
3619a     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
3619e     00 A0 00 A0 
361a2     00 A0 00 A0 
361a6     00 A0 00 A0 
361aa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361ae     00 A0 00 A0 
361b2     00 A0 00 A0 
361b6     00 A0 00 A0 
361ba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361be     00 A0 00 A0 
361c2     00 A0 00 A0 
361c6     00 A0 00 A0 
361ca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361ce     00 A0 00 A0 
361d2     00 A0 00 A0 
361d6     00 A0 00 A0 
361da     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361de     00 A0 00 A0 
361e2     00 A0 00 A0 
361e6     00 A0 00 A0 
361ea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361ee     00 A0 00 A0 
361f2     00 A0 00 A0 
361f6     00 A0 00 A0 
361fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
361fe     00 A0 00 A0 
36202     00 A0 00 A0 
36206     00 A0 00 A0 
3620a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3620e     00 A0 00 A0 
36212     00 A0 00 A0 
36216     00 A0 00 A0 
3621a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3621e     00 A0 00 A0 
36222     00 A0 00 A0 
36226     00 A0 00 A0 
3622a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3622e     00 A0 00 A0 
36232     00 A0 00 A0 
36236     00 A0 00 A0 
3623a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3623e     00 A0 00 A0 
36242     00 A0 00 A0 
36246     00 A0 00 A0 
3624a     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3624e     00 A1 00 A1 
36252     00 A1 00 A1 
36256     00 A1 00 A1 
3625a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3625e     00 A1 00 A1 
36262     00 A1 00 A1 
36266     00 A1 00 A1 
3626a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3626e     00 A1 00 A1 
36272     00 A1 00 A1 
36276     00 A1 00 A1 
3627a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3627e     00 A1 00 A1 
36282     00 A1 00 A1 
36286     00 A1 00 A1 
3628a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3628e     00 A1 00 A1 
36292     00 A1 00 A1 
36296     00 A1 00 A1 
3629a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3629e     00 A1 00 A1 
362a2     00 A1 00 A1 
362a6     00 6E 00 6E 
362aa     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
362ae     00 6E 00 6E 
362b2     00 6E 00 6E 
362b6     00 6E 00 6E 
362ba     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
362be     00 6E 00 6E 
362c2     00 6E 00 6E 
362c6     00 6E 00 6E 
362ca     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
362ce     00 6E 00 6E 
362d2     00 6E 00 6E 
362d6     00 6E 00 6E 
362da     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
362de     00 6E 00 6D 
362e2     00 6D 00 6D 
362e6     00 6D 00 6D 
362ea     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
362ee     00 6D 00 6D 
362f2     00 6D 00 6D 
362f6     00 6D 00 6D 
362fa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
362fe     00 6D 00 6D 
36302     00 6D 00 6D 
36306     00 6D 00 6D 
3630a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3630e     00 6D 00 6D 
36312     00 6D 00 6D 
36316     00 6D 00 6D 
3631a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3631e     00 6D 00 6D 
36322     00 6D 00 6D 
36326     00 6D 00 6D 
3632a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3632e     00 6D 00 6D 
36332     00 6D 00 6D 
36336     00 6D 00 6D 
3633a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3633e     00 6D 00 6D 
36342     00 6D 00 6D 
36346     00 6D 00 6D 
3634a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3634e     00 6D 00 6D 
36352     00 6D 00 6D 
36356     00 6D 00 6D 
3635a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3635e     00 6D 00 6D 
36362     00 6D 00 6D 
36366     00 6D 00 6D 
3636a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3636e     00 6D 00 6D 
36372     00 6D 00 6D 
36376     00 6D 00 6D 
3637a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3637e     00 6D 00 6D 
36382     00 6D 00 6D 
36386     00 6D 00 6D 
3638a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3638e     00 6D 00 6D 
36392     00 6C 00 6C 
36396     00 6C 00 6C 
3639a     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3639e     00 6C 00 6C 
363a2     00 6C 00 6C 
363a6     00 6C 00 6C 
363aa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
363ae     00 6C 00 6C 
363b2     00 6C 00 6C 
363b6     00 9D 00 9F 
363ba     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
363be     00 9F 00 9F 
363c2     00 9F 00 9F 
363c6     00 A0 00 A0 
363ca     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363ce     00 A0 00 A0 
363d2     00 A0 00 A0 
363d6     00 A0 00 A0 
363da     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363de     00 A0 00 A0 
363e2     00 A0 00 A0 
363e6     00 A0 00 A0 
363ea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363ee     00 A0 00 A0 
363f2     00 A0 00 A0 
363f6     00 A0 00 A0 
363fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363fe     00 A0 00 A0 
36402     00 A0 00 A0 
36406     00 A0 00 A0 
3640a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3640e     00 A0 00 A0 
36412     00 A0 00 A0 
36416     00 A0 00 A0 
3641a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3641e     00 A0 00 A0 
36422     00 A0 00 A0 
36426     00 A0 00 A0 
3642a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3642e     00 A0 00 A0 
36432     00 A0 00 A0 
36436     00 A0 00 A0 
3643a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3643e     01 00 00 00 
36442     00 00 00 00 
36446     00 00 00 00 
3644a     00 00 00 00 | mouse  file "mouse2.def"
3644e     00 00 00 00 
36452     00 00 00 00 
36456     00 00 00 00 
3645a     00 00 00 00 | 	byte	$00[16]
3645e     01 01 00 00 
36462     00 00 00 00 
36466     00 00 00 00 
3646a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3646e     00 00 00 00 
36472     00 00 00 00 
36476     00 00 00 00 
3647a     00 00 00 00 | 	byte	$00[16]
3647e     01 0D 01 00 
36482     00 00 00 00 
36486     00 00 00 00 
3648a     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3648e     00 00 00 00 
36492     00 00 00 00 
36496     00 00 00 00 
3649a     00 00 00 00 | 	byte	$00[16]
3649e     01 0D 0D 01 
364a2     00 00 00 00 
364a6     00 00 00 00 
364aa     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
364ae     00 00 00 00 
364b2     00 00 00 00 
364b6     00 00 00 00 
364ba     00 00 00 00 | 	byte	$00[16]
364be     01 0D 0D 0D 
364c2     01 00 00 00 
364c6     00 00 00 00 
364ca     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
364ce     00 00 00 00 
364d2     00 00 00 00 
364d6     00 00 00 00 
364da     00 00 00 00 | 	byte	$00[16]
364de     01 0D 0D 0D 
364e2     0D 01 00 00 
364e6     00 00 00 00 
364ea     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
364ee     00 00 00 00 
364f2     00 00 00 00 
364f6     00 00 00 00 
364fa     00 00 00 00 | 	byte	$00[16]
364fe     01 0D 0D 0D 
36502     0D 0D 01 00 
36506     00 00 00 00 
3650a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3650e     00 00 00 00 
36512     00 00 00 00 
36516     00 00 00 00 
3651a     00 00 00 00 | 	byte	$00[16]
3651e     01 0D 0D 0D 
36522     0D 0D 0D 01 
36526     00 00 00 00 
3652a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3652e     00 00 00 00 
36532     00 00 00 00 
36536     00 00 00 00 
3653a     00 00 00 00 | 	byte	$00[16]
3653e     01 0D 0D 0D 
36542     0D 0D 0D 0C 
36546     01 00 00 00 
3654a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3654e     00 00 00 00 
36552     00 00 00 00 
36556     00 00 00 00 
3655a     00 00 00 00 | 	byte	$00[16]
3655e     01 0D 0D 0D 
36562     0D 0D 0D 0D 
36566     0C 01 00 00 
3656a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3656e     00 00 00 00 
36572     00 00 00 00 
36576     00 00 00 00 
3657a     00 00 00 00 | 	byte	$00[16]
3657e     01 0D 0D 0D 
36582     0D 0D 0D 0D 
36586     0D 0C 01 00 
3658a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
3658e     00 00 00 00 
36592     00 00 00 00 
36596     00 00 00 00 
3659a     00 00 00 00 | 	byte	$00[16]
3659e     01 0D 0D 0D 
365a2     0D 0D 0D 0D 
365a6     0D 0D 0B 01 
365aa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
365ae     00 00 00 00 
365b2     00 00 00 00 
365b6     00 00 00 00 
365ba     00 00 00 00 | 	byte	$00[16]
365be     01 0D 0D 0D 
365c2     0C 0D 0D 03 
365c6     01 01 01 01 
365ca     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
365ce     00 00 00 00 
365d2     00 00 00 00 
365d6     00 00 00 00 
365da     00 00 00 00 | 	byte	$00[16]
365de     01 0D 0D 0C 
365e2     01 09 0D 03 
365e6     00 00 00 00 
365ea     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
365ee     00 00 00 00 
365f2     00 00 00 00 
365f6     00 00 00 00 
365fa     00 00 00 00 | 	byte	$00[16]
365fe     01 0D 0C 01 
36602     00 01 0D 0B 
36606     01 00 00 00 
3660a     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3660e     00 00 00 00 
36612     00 00 00 00 
36616     00 00 00 00 
3661a     00 00 00 00 | 	byte	$00[16]
3661e     01 0C 01 00 
36622     00 01 0A 0D 
36626     01 00 00 00 
3662a     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3662e     00 00 00 00 
36632     00 00 00 00 
36636     00 00 00 00 
3663a     00 00 00 00 | 	byte	$00[16]
3663e     01 01 00 00 
36642     00 00 01 0D 
36646     0B 01 00 00 
3664a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3664e     00 00 00 00 
36652     00 00 00 00 
36656     00 00 00 00 
3665a     00 00 00 00 
3665e     00 00 00 00 
36662     00 00       | 	byte	$00[22]
36664     01 0B 0D 01 
36668     00 00 00 00 
3666c     00 00 00 00 
36670     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36674     00 00 00 00 
36678     00 00 00 00 
3667c     00 00 00 00 
36680     00 00 00 00 
36684     00          | 	byte	$00[17]
36685     01 01 00 00 
36689     00 00 00 00 
3668d     00 00 00 00 
36691     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36695     00 00 00 00 
      ...             
36839     00 00 00 00 
3683d     00          | 	byte	$00[425]
3683e                 | 
3683e     00 00       |              	org
36840 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
36844 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
36848 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
3684c 003             | 
3684c 003 00 30 04 F6 |                 mov     psramaddr,#0
36850 004             | 
36850 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
36854 005 20 00 00 FF 
36858 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
3685c 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
36860 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
36864 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
36868 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
3686c 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
36870 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
36874 00d             | 
36874 00d 20 00 00 FF 
36878 00e 00 30 04 F1 |                 add 	psramaddr,##16384
3687c 00f E0 03 00 FF 
36880 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
36884 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
36888 012             | 
36888 012             |                 
36888 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
3688c 013             |     
3688c 013 01 2C 60 FD |                 cogid 	t11				' get id
36890 014 00 00 EC FC |                 coginit #0,#0				' start the new program
36894 015 03 2C 60 FD |                 cogstop t11				' stop the loader
36898 016             | 
36898 016 00 00 00 00 | t11 		long 	0
3689c 017 00 FF 07 00 | mailbox 	long 	$7FF00
368a0 018 00 00 00 00 | psramaddr 	long 	0
368a4 019 00 00 00 00 | pslockval	long 	0
368a8 01a 00 00 00 00 | cmd             long    0
368ac 01b 00 00 00 00 | buf1            long    0
368b0 01c 00 40 00 00 | buf2            long    16384
368b4 01d B8 68 03 00 | 	long	@@@_dat_ + 12612
368b8 01e 50 32 20 52 
368bc 01f 65 74 72 6F 
368c0 020 6D 61 63 68 
368c4 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
368c8 022 42 41 53 49 
368cc 023 43 20 76 65 
368d0 024 72 73 69 6F 
368d4 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
368d8 026 35 31 00 00 | 	byte	$35, $31, $00, $00
368dc 027             | 	alignl
368dc 027             | _hg010b_spin2_dat_
368dc 027             | 
368dc 027 00 00 00 00 
368e0 028 00 00 00 00 
368e4 029 00 00 00 00 
368e8 02a 00 00 00 00 
368ec 02b 00 00 00    | vga_font       file "vgafont.def"
368ef 02b 7E 81 A5 81 
368f3 02c 81 BD 99 81 
368f7 02d 81 7E 00 00 
368fb 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
368ff 02f 7E FF DB FF 
36903 030 FF C3 E7 FF 
36907 031 FF 7E 00 00 
3690b 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3690f 033 00 36 7F 7F 
36913 034 7F 7F 3E 1C 
36917 035 08 00 00 00 
3691b 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3691f 037 00 08 1C 3E 
36923 038 7F 3E 1C 08 
36927 039 00 00 00 00 
3692b 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3692f 03b 18 3C 3C E7 
36933 03c E7 E7 18 18 
36937 03d 3C 00 00 00 
3693b 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3693f 03f 18 3C 7E FF 
36943 040 FF 7E 18 18 
36947 041 3C 00 00 00 
3694b 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3694f 043 00 00 00 18 
36953 044 3C 3C 18 00 
36957 045 00 00 00 00 
3695b 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3695f 047 FF FF FF E7 
36963 048 C3 C3 E7 FF 
36967 049 FF FF FF FF 
3696b 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3696f 04b 00 00 3C 66 
36973 04c 42 42 66 3C 
36977 04d 00 00 00 00 
3697b 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3697f 04f FF FF C3 99 
36983 050 BD BD 99 C3 
36987 051 FF FF FF FF 
3698b 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3698f 053 78 70 58 4C 
36993 054 1E 33 33 33 
36997 055 33 1E 00 00 
3699b 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3699f 057 3C 66 66 66 
369a3 058 66 3C 18 7E 
369a7 059 18 18 00 00 
369ab 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
369af 05b FC CC FC 0C 
369b3 05c 0C 0C 0C 0E 
369b7 05d 0F 07 00 00 
369bb 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
369bf 05f FE C6 FE C6 
369c3 060 C6 C6 C6 E6 
369c7 061 E7 67 03 00 
369cb 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
369cf 063 18 18 DB 3C 
369d3 064 E7 3C DB 18 
369d7 065 18 00 00 00 
369db 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
369df 067 03 07 0F 1F 
369e3 068 7F 1F 0F 07 
369e7 069 03 01 00 00 
369eb 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
369ef 06b 60 70 78 7C 
369f3 06c 7F 7C 78 70 
369f7 06d 60 40 00 00 
369fb 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
369ff 06f 18 3C 7E 18 
36a03 070 18 18 7E 3C 
36a07 071 18 00 00 00 
36a0b 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
36a0f 073 66 66 66 66 
36a13 074 66 66 66    | 	byte	$66[7]
36a16 075 00 66 66 00 
36a1a 076 00 00 00 00 
36a1e 077 00 FE DB DB 
36a22 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
36a26 079 D8 D8 D8 00 
36a2a 07a 00 00 00 3E 
36a2e 07b 63 06 1C 36 
36a32 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
36a36 07d 30 63 3E 00 
36a3a 07e 00 00 00 00 
36a3e 07f 00 00 00 00 
36a42 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
36a46 081 7F 7F 7F 00 
36a4a 082 00 00 00 00 
36a4e 083 00 18 3C 7E 
36a52 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
36a56 085 3C 18 7E 00 
36a5a 086 00 00 00 00 
36a5e 087 00 18 3C 7E 
36a62 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
36a66 089 18 18 18 00 
36a6a 08a 00 00 00 00 
36a6e 08b 00 18 18 18 
36a72 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
36a76 08d 7E 3C 18 00 
36a7a 08e 00 00 00 00 
36a7e 08f 00 00 00 18 
36a82 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
36a86 091 00 00 00 00 
36a8a 092 00 00 00 00 
36a8e 093 00 00 00    | 	byte	$00[11]
36a91 094 0C 06 7F 06 
36a95 095 0C 00 00 00 
36a99 096 00 00 00 00 
36a9d 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36aa1 098 00 03 03 03 
36aa5 099 7F 00 00 00 
36aa9 09a 00 00 00 00 
36aad 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ab1 09c 14 36 7F 36 
36ab5 09d 14 00 00 00 
36ab9 09e 00 00 00 00 
36abd 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
36ac1 0a0 1C 1C 3E 3E 
36ac5 0a1 7F 7F 00 00 
36ac9 0a2 00 00 00 00 
36acd 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
36ad1 0a4 7F 3E 3E 1C 
36ad5 0a5 1C 08 00 00 
36ad9 0a6 00 00 00 00 
36add 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ae1 0a8 00 00 00 00 
36ae5 0a9 00 00 00 00 
36ae9 0aa 00 00 00 00 
36aed 0ab 00 00       | 	byte	$00[14]
36aef 0ab 18 3C 3C 3C 
36af3 0ac 18 18 18 00 
36af7 0ad 18 18 00 00 
36afb 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
36aff 0af 66 24 00 00 
36b03 0b0 00 00 00 00 
36b07 0b1 00 00 00 00 
36b0b 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36b0f 0b3 00 36 36 7F 
36b13 0b4 36 36 36 7F 
36b17 0b5 36 36 00 00 
36b1b 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
36b1f 0b7 3E 63 43 03 
36b23 0b8 3E 60 60 61 
36b27 0b9 63 3E 18 18 
36b2b 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
36b2f 0bb 00 00 43 63 
36b33 0bc 30 18 0C 06 
36b37 0bd 63 61 00 00 
36b3b 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
36b3f 0bf 1C 36 36 1C 
36b43 0c0 6E 3B 33 33 
36b47 0c1 33 6E 00 00 
36b4b 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
36b4f 0c3 0C 0C 0C 06 
36b53 0c4 00 00 00 00 
36b57 0c5 00 00 00 00 
36b5b 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36b5f 0c7 30 18 0C 0C 
36b63 0c8 0C 0C 0C 0C 
36b67 0c9 18 30 00 00 
36b6b 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
36b6f 0cb 0C 18 30 30 
36b73 0cc 30 30 30 30 
36b77 0cd 18 0C 00 00 
36b7b 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
36b7f 0cf 00 00 00 66 
36b83 0d0 3C FF 3C 66 
36b87 0d1 00 00 00 00 
36b8b 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
36b8f 0d3 00 00 00 18 
36b93 0d4 18 7E 18 18 
36b97 0d5 00 00 00 00 
36b9b 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
36b9f 0d7 00 00 00 00 
36ba3 0d8 00 00 00 00 | 	byte	$00[8]
36ba7 0d9 18 18 18 0C 
36bab 0da 00 00 00 00 
36baf 0db 00 00 00 00 
36bb3 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
36bb7 0dd 00 00 00 00 
36bbb 0de 00 00 00 00 
36bbf 0df 00 00 00 00 
36bc3 0e0 00 00 00 00 | 	byte	$00[16]
36bc7 0e1 18 18 00 00 
36bcb 0e2 00 00 00 00 
36bcf 0e3 00 00 40 60 
36bd3 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
36bd7 0e5 03 01 00 00 
36bdb 0e6 00 00 00 00 
36bdf 0e7 1C 36 63 63 
36be3 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
36be7 0e9 36 1C 00 00 
36beb 0ea 00 00 00 00 
36bef 0eb 18 1C 1E 18 
36bf3 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
36bf7 0ed 18 7E 00 00 
36bfb 0ee 00 00 00 00 
36bff 0ef 3E 63 60 30 
36c03 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
36c07 0f1 63 7F 00 00 
36c0b 0f2 00 00 00 00 
36c0f 0f3 3E 63 60 60 
36c13 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
36c17 0f5 63 3E 00 00 
36c1b 0f6 00 00 00 00 
36c1f 0f7 30 38 3C 36 
36c23 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
36c27 0f9 30 78 00 00 
36c2b 0fa 00 00 00 00 
36c2f 0fb 7F 03 03 03 
36c33 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
36c37 0fd 63 3E 00 00 
36c3b 0fe 00 00 00 00 
36c3f 0ff 1C 06 03 03 
36c43 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
36c47 101 63 3E 00 00 
36c4b 102 00 00 00 00 
36c4f 103 7F 63 60 60 
36c53 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
36c57 105 0C 0C 00 00 
36c5b 106 00 00 00 00 
36c5f 107 3E 63 63 63 
36c63 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
36c67 109 63 3E 00 00 
36c6b 10a 00 00 00 00 
36c6f 10b 3E 63 63 63 
36c73 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
36c77 10d 30 1E 00 00 
36c7b 10e 00 00 00 00 
36c7f 10f 00 00 00 18 
36c83 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
36c87 111 18 18 00 00 
36c8b 112 00 00 00 00 
36c8f 113 00 00 00 18 
36c93 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
36c97 115 18 18 0C 00 
36c9b 116 00 00 00 00 
36c9f 117 00 60 30 18 
36ca3 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
36ca7 119 30 60 00 00 
36cab 11a 00 00 00 00 
36caf 11b 00 00 00 7E 
36cb3 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
36cb7 11d 00 00 00 00 
36cbb 11e 00 00 00 00 
36cbf 11f 00          | 	byte	$00[9]
36cc0 120 06 0C 18 30 
36cc4 121 60 30 18 0C 
36cc8 122 06 00 00 00 
36ccc 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
36cd0 124 63 63 30 18 
36cd4 125 18 18 00 18 
36cd8 126 18 00 00 00 
36cdc 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
36ce0 128 3E 63 63 7B 
36ce4 129 7B 7B 3B 03 
36ce8 12a 3E 00 00 00 
36cec 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
36cf0 12c 1C 36 63 63 
36cf4 12d 7F 63 63 63 
36cf8 12e 63 00 00 00 
36cfc 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
36d00 130 66 66 66 3E 
36d04 131 66 66 66 66 
36d08 132 3F 00 00 00 
36d0c 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
36d10 134 66 43 03 03 
36d14 135 03 03 43 66 
36d18 136 3C 00 00 00 
36d1c 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
36d20 138 36 66 66 66 
36d24 139 66 66 66 36 
36d28 13a 1F 00 00 00 
36d2c 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
36d30 13c 66 46 16 1E 
36d34 13d 16 06 46 66 
36d38 13e 7F 00 00 00 
36d3c 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
36d40 140 66 46 16 1E 
36d44 141 16 06 06 06 
36d48 142 0F 00 00 00 
36d4c 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
36d50 144 66 43 03 03 
36d54 145 7B 63 63 66 
36d58 146 5C 00 00 00 
36d5c 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
36d60 148 63 63 63 7F 
36d64 149 63 63 63 63 
36d68 14a 63 00 00 00 
36d6c 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
36d70 14c 18 18 18 18 
36d74 14d 18 18 18 18 | 	byte	$18[8]
36d78 14e 3C 00 00 00 
36d7c 14f 00 00 00 78 
36d80 150 30 30 30 30 
36d84 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
36d88 152 1E 00 00 00 
36d8c 153 00 00 00 67 
36d90 154 66 66 36 1E 
36d94 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
36d98 156 67 00 00 00 
36d9c 157 00 00 00 0F 
36da0 158 06 06 06 06 
36da4 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
36da8 15a 7F 00 00 00 
36dac 15b 00 00 00 63 
36db0 15c 77 7F 7F 6B 
36db4 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
36db8 15e 63 00 00 00 
36dbc 15f 00 00 00 63 
36dc0 160 67 6F 7F 7B 
36dc4 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
36dc8 162 63 00 00 00 
36dcc 163 00 00 00 3E 
36dd0 164 63 63 63 63 
36dd4 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
36dd8 166 3E 00 00 00 
36ddc 167 00 00 00 3F 
36de0 168 66 66 66 3E 
36de4 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
36de8 16a 0F 00 00 00 
36dec 16b 00 00 00 3E 
36df0 16c 63 63 63 63 
36df4 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
36df8 16e 3E 30 70 00 
36dfc 16f 00 00 00 3F 
36e00 170 66 66 66 3E 
36e04 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
36e08 172 67 00 00 00 
36e0c 173 00 00 00 3E 
36e10 174 63 63 06 1C 
36e14 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
36e18 176 3E 00 00 00 
36e1c 177 00 00 00 7E 
36e20 178 7E 5A 18 18 
36e24 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
36e28 17a 3C 00 00 00 
36e2c 17b 00 00 00 63 
36e30 17c 63 63 63 63 
36e34 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
36e38 17e 3E 00 00 00 
36e3c 17f 00 00 00 63 
36e40 180 63 63 63 63 
36e44 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
36e48 182 08 00 00 00 
36e4c 183 00 00 00 63 
36e50 184 63 63 63 6B 
36e54 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
36e58 186 36 00 00 00 
36e5c 187 00 00 00 63 
36e60 188 63 36 3E 1C 
36e64 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
36e68 18a 63 00 00 00 
36e6c 18b 00 00 00 66 
36e70 18c 66 66 66 3C 
36e74 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
36e78 18e 3C 00 00 00 
36e7c 18f 00 00 00 7F 
36e80 190 63 61 30 18 
36e84 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
36e88 192 7F 00 00 00 
36e8c 193 00 00 00 3C 
36e90 194 0C 0C 0C 0C 
36e94 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
36e98 196 3C 00 00 00 
36e9c 197 00 00 00 00 
36ea0 198 01 03 07 0E 
36ea4 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
36ea8 19a 40 00 00 00 
36eac 19b 00 00 00 3C 
36eb0 19c 30 30 30 30 
36eb4 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
36eb8 19e 3C 00 00 00 
36ebc 19f 1C 36 00 00 
36ec0 1a0 00 00 00 00 
36ec4 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ec8 1a2 00 00 00 00 
36ecc 1a3 00 00 00 00 
36ed0 1a4 00 00 00 00 
36ed4 1a5 00 00 00 00 
36ed8 1a6 00          | 	byte	$00[17]
36ed9 1a6 FF 00 00 0C 
36edd 1a7 18 00 00 00 
36ee1 1a8 00 00 00 00 
36ee5 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ee9 1aa 00 00 00 00 
36eed 1ab 00 00 00 00 
36ef1 1ac 00          | 	byte	$00[9]
36ef2 1ac 1E 30 3E 33 
36ef6 1ad 33 33 6E 00 
36efa 1ae 00 00 00 00 
36efe 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
36f02 1b0 1E 36 66 66 
36f06 1b1 66 66 3E 00 
36f0a 1b2 00 00 00 00 
36f0e 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
36f12 1b4 3E 63 03 03 
36f16 1b5 03 63 3E 00 
36f1a 1b6 00 00 00 00 
36f1e 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
36f22 1b8 3C 36 33 33 
36f26 1b9 33 33 6E 00 
36f2a 1ba 00 00 00 00 
36f2e 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
36f32 1bc 3E 63 7F 03 
36f36 1bd 03 63 3E 00 
36f3a 1be 00 00 00 00 
36f3e 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
36f42 1c0 0C 1E 0C 0C 
36f46 1c1 0C 0C 1E 00 
36f4a 1c2 00 00 00 00 
36f4e 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
36f52 1c4 6E 33 33 33 
36f56 1c5 33 33 3E 30 
36f5a 1c6 33 1E 00 00 
36f5e 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
36f62 1c8 36 6E 66 66 
36f66 1c9 66 66 67 00 
36f6a 1ca 00 00 00 00 
36f6e 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
36f72 1cc 1C 18 18 18 
36f76 1cd 18 18 3C 00 
36f7a 1ce 00 00 00 00 
36f7e 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
36f82 1d0 70 60 60 60 
36f86 1d1 60 60 60 66 
36f8a 1d2 66 3C 00 00 
36f8e 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
36f92 1d4 66 36 1E 1E 
36f96 1d5 36 66 67 00 
36f9a 1d6 00 00 00 00 
36f9e 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
36fa2 1d8 18 18 18 18 
36fa6 1d9 18 18       | 	byte	$18[6]
36fa8 1da 3C 00 00 00 
36fac 1db 00 00 00 00 
36fb0 1dc 00 00 37 7F 
36fb4 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
36fb8 1de 63 00 00 00 
36fbc 1df 00 00 00 00 
36fc0 1e0 00 00 3B 66 
36fc4 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
36fc8 1e2 66 00 00 00 
36fcc 1e3 00 00 00 00 
36fd0 1e4 00 00 3E 63 
36fd4 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
36fd8 1e6 3E 00 00 00 
36fdc 1e7 00 00 00 00 
36fe0 1e8 00 00 3B 66 
36fe4 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
36fe8 1ea 3E 06 06 0F 
36fec 1eb 00 00 00 00 
36ff0 1ec 00 00 6E 33 
36ff4 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
36ff8 1ee 3E 30 30 78 
36ffc 1ef 00 00 00 00 
37000 1f0 00 00 3B 6E 
37004 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
37008 1f2 0F 00 00 00 
3700c 1f3 00 00 00 00 
37010 1f4 00 00 3E 63 
37014 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
37018 1f6 3E 00 00 00 
3701c 1f7 00 00 00 08 
37020 1f8 0C 0C 3F 0C 
37024 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
37028 1fa 38 00 00 00 
3702c 1fb 00 00 00 00 
37030 1fc 00 00 33 33 
37034 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
37038 1fe 6E 00 00 00 
3703c 1ff 00 00 00 00 
37040 200 00 00 63 63 
37044 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
37048 202 1C 00 00 00 
3704c 203 00 00 00 00 
37050 204 00 00 63 63 
37054 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
37058 206 36 00 00 00 
3705c 207 00 00 00 00 
37060 208 00 00 63 36 
37064 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
37068 20a 63 00 00 00 
3706c 20b 00 00 00 00 
37070 20c 00 00 63 63 
37074 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
37078 20e 7E 60 30 1F 
3707c 20f 00 00 00 00 
37080 210 00 00 7F 33 
37084 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
37088 212 7F 00 00 00 
3708c 213 00 00 00 70 
37090 214 18 18 18 0E 
37094 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
37098 216 70 00 00 00 
3709c 217 00 00 00 18 
370a0 218 18 18 18 18 
370a4 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
370a8 21a 18 00 00 00 
370ac 21b 00 00 00 0E 
370b0 21c 18 18 18 70 
370b4 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
370b8 21e 0E 00 00 00 
370bc 21f 6E 3B 00 00 
370c0 220 00 00 00 00 
370c4 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
370c8 222 00 00 00 00 
370cc 223 00 00 00 00 
370d0 224 00 00       | 	byte	$00[10]
370d2 224 08 1C 36 63 
370d6 225 63 63 7F 00 
370da 226 00 00 00 00 
370de 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
370e2 228 03 03 03 03 
370e6 229 43 66 3C 18 
370ea 22a 30 1E 00 00 
370ee 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
370f2 22c 33 33 33 33 
370f6 22d 33 33       | 	byte	$33[6]
370f8 22e 6E 00 00 00 
370fc 22f 00 00 60 30 
37100 230 18 00 3E 63 
37104 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
37108 232 3E 00 00 00 
3710c 233 00 00 08 1C 
37110 234 36 00 1E 30 
37114 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
37118 236 6E 00 00 00 
3711c 237 00 00 00 00 
37120 238 33 00 1E 30 
37124 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
37128 23a 6E 00 00 00 
3712c 23b 00 00 1C 36 
37130 23c 1C 00 33 33 
37134 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
37138 23e 6E 00 00 00 
3713c 23f 00 00 60 30 
37140 240 18 00 3E 63 
37144 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
37148 242 3E 00 00 00 
3714c 243 00 00 00 00 
37150 244 00 00 3E 63 
37154 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
37158 246 3E 18 30 1E 
3715c 247 00 00 00 1C 
37160 248 58 78 38 18 
37164 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
37168 24a 3C 00 00 00 
3716c 24b 00 00 00 00 
37170 24c 63 00 3E 63 
37174 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
37178 24e 3E 00 00 00 
3717c 24f 66 33 00 3E 
37180 250 63 63 63 63 
37184 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
37188 252 3E 00 00 00 
3718c 253 00 00 CC 66 
37190 254 33 00 3E 63 
37194 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
37198 256 3E 00 00 00 
3719c 257 00 00 18 3C 
371a0 258 66 00 1C 18 
371a4 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
371a8 25a 3C 00 00 00 
371ac 25b 30 18 00 7F 
371b0 25c 63 61 30 18 
371b4 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
371b8 25e 7F 00 00 00 
371bc 25f 00 63 00 08 
371c0 260 1C 36 63 63 
371c4 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
371c8 262 63 00 00 00 
371cc 263 30 18 00 3C 
371d0 264 66 43 03 03 
371d4 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
371d8 266 3C 00 00 00 
371dc 267 30 18 00 7F 
371e0 268 66 46 16 1E 
371e4 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
371e8 26a 7F 00 00 00 
371ec 26b 0C 06 00 0F 
371f0 26c 06 06 06 06 
371f4 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
371f8 26e 7F 00 00 00 
371fc 26f 30 18 00 1C 
37200 270 18 18 18 18 
37204 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
37208 272 3C 00 00 00 
3720c 273 00 00 08 1C 
37210 274 36 00 3E 63 
37214 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
37218 276 3E 00 00 00 
3721c 277 00 00 00 00 
37220 278 63 00 3E 63 
37224 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
37228 27a 3E 00 00 00 
3722c 27b 00 00 00 6F 
37230 27c 46 26 06 06 
37234 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
37238 27e 7F 00 00 00 
3723c 27f 00 00 00 6E 
37240 280 4C 2C 0C 0C 
37244 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
37248 282 1E 00 00 00 
3724c 283 30 18 00 3E 
37250 284 63 63 06 1C 
37254 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
37258 286 3E 00 00 00 
3725c 287 00 00 60 30 
37260 288 18 00 3E 63 
37264 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
37268 28a 3E 00 00 00 
3726c 28b 00 63 00 3E 
37270 28c 63 63 63 63 
37274 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
37278 28e 3E 00 00 00 
3727c 28f 00 63 00 63 
37280 290 63 63 63 63 
37284 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
37288 292 3E 00 00 00 
3728c 293 6C 38 00 7E 
37290 294 7E 5A 18 18 
37294 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
37298 296 3C 00 00 00 
3729c 297 00 00 60 48 
372a0 298 2C 0C 3F 0C 
372a4 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
372a8 29a 38 00 00 00 
372ac 29b 00 00 00 0F 
372b0 29c 26 36 1E 0E 
372b4 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
372b8 29e 7F 00 00 00 
372bc 29f 00 00 00 00 
372c0 2a0 00 63 36 1C 
372c4 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
372c8 2a2 00 00 00 00 
372cc 2a3 00 00       | 	byte	$00[6]
372ce 2a3 36 1C 08 00 
372d2 2a4 3E 63 03 03 
372d6 2a5 03 63 3E 00 
372da 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
372de 2a7 30 18 0C 00 
372e2 2a8 1E 30 3E 33 
372e6 2a9 33 33 6E 00 
372ea 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
372ee 2ab 60 30 18 00 
372f2 2ac 1C 18 18 18 
372f6 2ad 18 18 3C 00 
372fa 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
372fe 2af 60 30 18 00 
37302 2b0 3E 63 63 63 
37306 2b1 63 63 3E 00 
3730a 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3730e 2b3 30 18 0C 00 
37312 2b4 33 33 33 33 
37316 2b5 33 33 6E 00 
3731a 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3731e 2b7 00 08 1C 36 
37322 2b8 63 63 7F 63 
37326 2b9 63 63 63 18 
3732a 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3732e 2bb 00 00 00 00 
37332 2bc 1E 30 3E 33 
37336 2bd 33 33 6E 18 
3733a 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3733e 2bf 00 7F 63 61 
37342 2c0 30 18 0C 06 
37346 2c1 43 63 7F 00 
3734a 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3734e 2c3 36 1C 08 00 
37352 2c4 7F 33 18 0C 
37356 2c5 06 63 7F 00 
3735a 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3735e 2c7 00 7F 66 46 
37362 2c8 16 1E 16 06 
37366 2c9 46 66 7F 18 
3736a 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3736e 2cb 00 00 00 00 
37372 2cc 3E 63 7F 03 
37376 2cd 03 63 3E 18 
3737a 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3737e 2cf 00 3C 66 03 
37382 2d0 1F 03 0F 03 
37386 2d1 03 66 3C 00 
3738a 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3738e 2d3 60 30 18 00 
37392 2d4 7F 33 18 0C 
37396 2d5 06 63 7F 00 
3739a 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3739e 2d7 00 3C 66 43 
373a2 2d8 03 03 03 03 
373a6 2d9 43 66 3C 00 
373aa 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
373ae 2db 00 00 00 00 
373b2 2dc 3E 63 06 1C 
373b6 2dd 30 63 3E 18 
373ba 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
373be 2df 00 00 00 00 
373c2 2e0 00 00       | 	byte	$00[6]
373c4 2e1 6C 36 1B 36 
373c8 2e2 6C 00 00 00 
373cc 2e3 00 00 00 00 
373d0 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
373d4 2e5 1B 36 6C 36 
373d8 2e6 1B 00 00 00 
373dc 2e7 88 22 88 22 
373e0 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
373e4 2e9 88 22 88 22 
373e8 2ea 88 22 88 22 
373ec 2eb AA 55 AA 55 
373f0 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
373f4 2ed AA 55 AA 55 
373f8 2ee AA 55 AA 55 
373fc 2ef BB EE BB EE 
37400 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
37404 2f1 BB EE BB EE 
37408 2f2 BB EE BB EE 
3740c 2f3 18 18 18 18 
37410 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
37414 2f5 18 18 18 18 
37418 2f6 18 18 18 18 
3741c 2f7 18 18 18 18 
37420 2f8 18 18 18    | 	byte	$18[15]
37423 2f8 1F 18 18 18 
37427 2f9 18 18 18 18 
3742b 2fa 18 30 18 00 
3742f 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
37433 2fc 63 7F 63 63 
37437 2fd 63 63 00 00 
3743b 2fe 00 1C 36 00 
3743f 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
37443 300 63 7F 63 63 
37447 301 63 63 00 00 
3744b 302 00 36 1C 00 
3744f 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
37453 304 1E 16 06 46 
37457 305 66 7F 00 00 
3745b 306 00 00 00 00 
3745f 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
37463 308 1C 30 60 63 
37467 309 63 3E 18 30 
3746b 30a 1E 6C 6C 6C 
3746f 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
37473 30c 6F 6C 6C 6C 
37477 30d 6C 6C 6C 6C 
3747b 30e 6C 6C 6C 6C 
3747f 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
37483 310 6C 6C 6C 6C 
37487 311 6C 6C 6C 6C 
3748b 312 6C          | 	byte	$6c[9]
3748c 313 00 00 00 00 
37490 314 00          | 	byte	$00[5]
37491 314 7F 60 6F 6C 
37495 315 6C 6C 6C 6C 
37499 316 6C 6C 6C 6C 
3749d 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
374a1 318 6F 60 7F 00 
374a5 319 00 00 00 00 
374a9 31a 00 00 00 18 
374ad 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
374b1 31c 61 30 18 0C 
374b5 31d 06 43 63 7F 
374b9 31e 00 00 00 00 
374bd 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
374c1 320 00 7F 33 18 
374c5 321 0C 06 63 7F 
374c9 322 00 00 00 00 
374cd 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
374d1 324 00 00 1F 18 
374d5 325 18 18 18 18 
374d9 326 18 18 18 18 
374dd 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
374e1 328 18 18 F8 00 
374e5 329 00 00 00 00 
374e9 32a 00 00 00 18 
374ed 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
374f1 32c 18 18 FF 00 
374f5 32d 00 00 00 00 
374f9 32e 00 00 00 00 
374fd 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37501 330 00 00 FF 18 
37505 331 18 18 18 18 
37509 332 18 18 18 18 
3750d 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37511 334 18 18 F8 18 
37515 335 18 18 18 18 
37519 336 18 18 18 00 
3751d 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
37521 338 00 00 FF 00 
37525 339 00 00 00 00 
37529 33a 00 00 00 18 
3752d 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
37531 33c 18 18 FF 18 
37535 33d 18 18 18 18 
37539 33e 18 18 18 63 
3753d 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
37541 340 36 63 63 7F 
37545 341 63 63 63 63 
37549 342 00 00 00 00 
3754d 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
37551 344 00 1E 30 3E 
37555 345 33 33 33 6E 
37559 346 00 00 00 6C 
3755d 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
37561 348 EC 0C FC 00 
37565 349 00 00 00 00 
37569 34a 00 00 00 00 
3756d 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37571 34c FC 0C EC 6C 
37575 34d 6C 6C 6C 6C 
37579 34e 6C 6C 6C 6C 
3757d 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
37581 350 EF 00 FF 00 
37585 351 00 00 00 00 
37589 352 00 00 00 00 
3758d 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37591 354 FF 00 EF 6C 
37595 355 6C 6C 6C 6C 
37599 356 6C 6C 6C 6C 
3759d 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
375a1 358 EC 0C EC 6C 
375a5 359 6C 6C 6C 6C 
375a9 35a 6C 6C 6C 00 
375ad 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
375b1 35c FF 00 FF 00 
375b5 35d 00 00 00 00 
375b9 35e 00 00 00 6C 
375bd 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
375c1 360 EF 00 EF 6C 
375c5 361 6C 6C 6C 6C 
375c9 362 6C 6C 6C 00 
375cd 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
375d1 364 63 3E 63 63 
375d5 365 63 63 3E 63 
375d9 366 00 00 00 00 
375dd 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
375e1 368 30 3C 36 33 
375e5 369 33 33 33 6E 
375e9 36a 00 00 00 00 
375ed 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
375f1 36c 66 66 6F 66 
375f5 36d 66 66 36 1F 
375f9 36e 00 00 00 36 
375fd 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
37601 370 66 66 66 66 
37605 371 66 66       | 	byte	$66[6]
37607 371 36 1F 00 00 
3760b 372 00 00 63 00 
3760f 373 7F 66 46 16 
37613 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
37617 375 66 7F 00 00 
3761b 376 00 6C 38 00 
3761f 377 38 30 30 3C 
37623 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
37627 379 33 6E 00 00 
3762b 37a 00 36 1C 00 
3762f 37b 63 67 6F 7F 
37633 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
37637 37d 63 63 00 00 
3763b 37e 00 30 18 00 
3763f 37f 3C 18 18 18 
37643 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
37647 381 18 3C 00 00 
3764b 382 00 3C 66 00 
3764f 383 3C 18 18 18 
37653 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
37657 385 18 3C 00 00 
3765b 386 00 00 00 36 
3765f 387 1C 08 00 3E 
37663 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
37667 389 63 3E 00 00 
3766b 38a 00 18 18 18 
3766f 38b 18 18 18 18 
37673 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
37677 38d 00 00 00 00 
3767b 38e 00 00 00 00 
3767f 38f 00 00 00 00 | 	byte	$00[12]
37683 390 F8 18 18 18 
37687 391 18 18 18 18 
3768b 392 18 FF FF FF 
3768f 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
37693 394 FF FF FF FF 
37697 395 FF FF FF FF 
3769b 396 FF          | 	byte	$ff[9]
3769c 397 00 00 00 00 
376a0 398 00 00 00    | 	byte	$00[7]
376a3 398 FF FF FF FF 
376a7 399 FF FF FF FF 
376ab 39a FF          | 	byte	$ff[9]
376ac 39b 00 00 00 7E 
376b0 39c 7E 5A 18 18 
376b4 39d 18 18 18 18 
376b8 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
376bc 39f 1C 36 1C 63 
376c0 3a0 63 63 63 63 
376c4 3a1 63 63 63 63 
376c8 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
376cc 3a3 FF FF FF FF 
376d0 3a4 FF FF FF    | 	byte	$ff[7]
376d3 3a4 00 00 00 00 
376d7 3a5 00 00 00 00 
376db 3a6 00          | 	byte	$00[9]
376dc 3a7 30 18 00 3E 
376e0 3a8 63 63 63 63 
376e4 3a9 63 63 63 63 
376e8 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
376ec 3ab 00 00 00 1E 
376f0 3ac 33 33 33 1B 
376f4 3ad 33 63 63 63 
376f8 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
376fc 3af 1C 36 00 3E 
37700 3b0 63 63 63 63 
37704 3b1 63 63 63 63 
37708 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3770c 3b3 30 18 00 63 
37710 3b4 67 6F 7F 7B 
37714 3b5 73 63 63 63 
37718 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3771c 3b7 00 00 60 30 
37720 3b8 18 00 3B 66 
37724 3b9 66 66 66 66 
37728 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3772c 3bb 00 00 36 1C 
37730 3bc 08 00 3B 66 
37734 3bd 66 66 66 66 
37738 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3773c 3bf 36 1C 00 3E 
37740 3c0 63 63 06 1C 
37744 3c1 30 60 63 63 
37748 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3774c 3c3 00 00 36 1C 
37750 3c4 08 00 3E 63 
37754 3c5 06 1C 30 63 
37758 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3775c 3c7 30 18 00 3F 
37760 3c8 66 66 66 3E 
37764 3c9 36 66 66 66 
37768 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3776c 3cb 30 18 00 63 
37770 3cc 63 63 63 63 
37774 3cd 63 63 63 63 
37778 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3777c 3cf 00 00 60 30 
37780 3d0 18 00 3B 6E 
37784 3d1 66 06 06 06 
37788 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3778c 3d3 66 33 00 63 
37790 3d4 63 63 63 63 
37794 3d5 63 63 63 63 
37798 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3779c 3d7 00 00 60 30 
377a0 3d8 18 00 63 63 
377a4 3d9 63 63 63 63 
377a8 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
377ac 3db 30 18 00 66 
377b0 3dc 66 66 66 3C 
377b4 3dd 18 18 18 18 
377b8 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
377bc 3df 00 00 00 08 
377c0 3e0 0C 0C 3F 0C 
377c4 3e1 0C 0C 0C 6C 
377c8 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
377cc 3e3 30 18 00 00 
377d0 3e4 00 00 00 00 
377d4 3e5 00 00 00 00 
377d8 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
377dc 3e7 00 00 00 00 
377e0 3e8 00 00 00 00 | 	byte	$00[8]
377e4 3e9 7F 00 00 00 
377e8 3ea 00 00 00 00 
377ec 3eb 66 33 00 00 
377f0 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
377f4 3ed 00 00 00 00 
377f8 3ee 00 00 00 00 
377fc 3ef 00 00 00 00 
37800 3f0 00 00 00 00 
37804 3f1 00 00 00 00 
37808 3f2 00          | 	byte	$00[21]
37809 3f2 0C 06 3C 36 
3780d 3f3 1C 00 00 00 
37811 3f4 00 00 00 00 
37815 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37819 3f6 00 00 00 63 
3781d 3f7 3E 00 00 00 
37821 3f8 00 00 00 00 
37825 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37829 3fa 00 00 00 00 
3782d 3fb 3E 63 06 1C 
37831 3fc 36 63 63 36 
37835 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
37839 3fe 00 00 00 00 
3783d 3ff 00 00 00 00 | 	byte	$00[8]
37841 400 18 00 7E 00 
37845 401 18 00 00 00 
37849 402 00 00 00 00 
3784d 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37851 404 00 00 00 00 
37855 405 00 00 00 00 | 	byte	$00[8]
37859 406 18 30 1E 00 
3785d 407 00 00 1C 36 
37861 408 36 1C 00 00 
37865 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
37869 40a 00 00 00 00 
3786d 40b 63 00 00 00 
37871 40c 00 00 00 00 
37875 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37879 40e 00 00 00 18 
3787d 40f 18 00 00 00 
37881 410 00 00 00 00 
37885 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37889 412 00 00 00 00 
3788d 413 00          | 	byte	$00[5]
3788e 413 CC 66 33 00 
37892 414 33 33 33 33 
37896 415 33 33 6E 00 
3789a 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3789e 417 00 3F 66 66 
378a2 418 66 3E 36 66 
378a6 419 66 66 6F 00 
378aa 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
378ae 41b 36 1C 08 00 
378b2 41c 3B 6E 66 06 
378b6 41d 06 06 0F 00 
378ba 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
378be 41f 00 00 00 7E 
378c2 420 7E 7E 7E 7E 
378c6 421 7E 7E 00 00 
378ca 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
378ce 423 00 00 00 00 
378d2 424 00 00 00 00 
378d6 425 00 00 00 00 
378da 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
378dc 427 00 00 00 00 
      ...             
3790c 433 00 00 00 00 
37910 434 00 00 00    | st_font        file "st4font.def"
37913 434 FF FF 00 00 
37917 435 00 00 00 00 
3791b 436 00 18 18 18 
3791f 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37923 438 18 18 18 18 
37927 439 18 18 18 18 
3792b 43a 18          | 	byte	$18[9]
3792c 43b 00 00 00 00 
37930 43c 00 00 00    | 	byte	$00[7]
37933 43c FF FF 18 18 
37937 43d 18 18 18 18 
3793b 43e 18 18 18 18 
3793f 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37943 440 FF FF 00 00 
37947 441 00 00 00 00 
3794b 442 00 18 18 18 
3794f 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37953 444 1F 1F 18 18 
37957 445 18 18 18 18 
3795b 446 18 18 18 18 
3795f 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37963 448 F8 F8 18 18 
37967 449 18 18 18 18 
3796b 44a 18 00 00 00 
3796f 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37973 44c 1F 1F 18 18 
37977 44d 18 18 18 18 
3797b 44e 18 00 00 00 
3797f 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37983 450 F8 F8 18 18 
37987 451 18 18 18 18 
3798b 452 18 18 18 18 
3798f 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37993 454 1F 1F 00 00 
37997 455 00 00 00 00 
3799b 456 00 18 18 18 
3799f 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
379a3 458 F8 F8 00 00 
379a7 459 00 00 00 00 
379ab 45a 00 18 18 18 
379af 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
379b3 45c FF FF 18 18 
379b7 45d 18 18 18 18 
379bb 45e 18 00 00 18 
379bf 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
379c3 460 66 7E 7E 66 
379c7 461 66 66 66 30 
379cb 462 18 00 00 7E 
379cf 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
379d3 464 3E 06 06 06 
379d7 465 06 7E 7E 18 
379db 466 0C 30 18 3C 
379df 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
379e3 468 06 06 06 66 
379e7 469 66 7E 3C 00 
379eb 46a 00 30 18 66 
379ef 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
379f3 46c 7E 7E 76 76 
379f7 46d 66 66 66 00 
379fb 46e 00 30 18 7C 
379ff 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
37a03 470 1C 38 70 60 
37a07 471 60 7E 3E 00 
37a0b 472 00 30 18 7E 
37a0f 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
37a13 474 18 0C 0C 06 
37a17 475 06 7E 7E 00 
37a1b 476 00 18 18 00 
37a1f 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
37a23 478 18 18 0C 0C 
37a27 479 06 7E 7E 00 
37a2b 47a 00 30 18 3C 
37a2f 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
37a33 47c 66 66 66 66 
37a37 47d 66          | 	byte	$66[5]
37a38 47e 7E 3C 00 00 
37a3c 47f 00 00 06 06 
37a40 480 06 06 16 1E 
37a44 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
37a48 482 7E 7E 00 00 
37a4c 483 00 00 00 00 
37a50 484 00 3C 7C 60 
37a54 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
37a58 486 7E 7C 30 18 
37a5c 487 00 00 00 00 
37a60 488 00 3C 7E 66 
37a64 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
37a68 48a 7E 7C 18 0C 
37a6c 48b 00 00 30 18 
37a70 48c 00 3C 3E 06 
37a74 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
37a78 48e 7E 7C 00 00 
37a7c 48f 00 00 30 18 
37a80 490 00 3E 7E 66 
37a84 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
37a88 492 66 66 00 00 
37a8c 493 00 00 30 18 
37a90 494 00 7C 7E 06 
37a94 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
37a98 496 7E 3E 00 00 
37a9c 497 00 00 30 18 
37aa0 498 00 7E 7E 30 
37aa4 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
37aa8 49a 7E 7E 00 00 
37aac 49b 00 00 18 18 
37ab0 49c 00 7E 7E 30 
37ab4 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
37ab8 49e 7E 7E 00 00 
37abc 49f 00 00 30 18 
37ac0 4a0 00 3C 7E 66 
37ac4 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
37ac8 4a2 7E 3C 00 00 
37acc 4a3 00 00 1C 1C 
37ad0 4a4 18 18 38 3C 
37ad4 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
37ad8 4a6 3C 3C 00 00 
37adc 4a7 00 00 00 00 
37ae0 4a8 00 00 00 00 
37ae4 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37ae8 4aa 00 00 00 00 
37aec 4ab 00 00       | 	byte	$00[6]
37aee 4ab 18 18 18 18 
37af2 4ac 18 18 18 18 | 	byte	$18[8]
37af6 4ad 00 00 18 18 
37afa 4ae 00 00 00 00 
37afe 4af 66 66 66 66 
37b02 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
37b06 4b1 00 00 00 00 
37b0a 4b2 00 00 00 00 
37b0e 4b3 00          | 	byte	$00[9]
37b0f 4b3 66 66 FF FF 
37b13 4b4 66 66 FF FF 
37b17 4b5 66 66 00 00 
37b1b 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
37b1f 4b7 7C 7E 06 06 
37b23 4b8 3E 7C 60 60 
37b27 4b9 7E 3E 18 18 
37b2b 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
37b2f 4bb 66 30 30 18 
37b33 4bc 18 0C 0C 66 
37b37 4bd 66 00 00 00 
37b3b 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
37b3f 4bf 66 66 3C 1C 
37b43 4c0 1C FC FE 66 
37b47 4c1 66 FE FC 00 
37b4b 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
37b4f 4c3 18 18 18 18 
37b53 4c4 00 00 00 00 
37b57 4c5 00 00 00 00 
37b5b 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
37b5f 4c7 18 1C 0C 0C 
37b63 4c8 0C 0C 0C 0C 
37b67 4c9 1C 18 30 00 
37b6b 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
37b6f 4cb 18 38 30 30 
37b73 4cc 30 30 30 30 
37b77 4cd 38 18 0C 00 
37b7b 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
37b7f 4cf 66 66 3C 3C 
37b83 4d0 FF FF 3C 3C 
37b87 4d1 66 66 00 00 
37b8b 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
37b8f 4d3 00 18 18 18 
37b93 4d4 7E 7E 18 18 
37b97 4d5 18 00 00 00 
37b9b 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37b9f 4d7 00 00 00 00 
37ba3 4d8 00 00       | 	byte	$00[6]
37ba5 4d9 18 18 18 18 
37ba9 4da 18          | 	byte	$18[5]
37baa 4da 0C 04 00 00 
37bae 4db 00 00 00 00 
37bb2 4dc 7E 7E 00 00 
37bb6 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
37bba 4de 00 00 00 00 
37bbe 4df 00 00 00 00 
37bc2 4e0 00 00 00 00 
37bc6 4e1 00          | 	byte	$00[13]
37bc7 4e1 18 18 18 00 
37bcb 4e2 00 00 00 60 
37bcf 4e3 60 60 30 30 
37bd3 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
37bd7 4e5 06 06 06 00 
37bdb 4e6 00 00 00 3C 
37bdf 4e7 7E 66 66 66 
37be3 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
37be7 4e9 66 7E 3C 00 
37beb 4ea 00 00 00 18 
37bef 4eb 18 1C 1C 18 
37bf3 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
37bf7 4ed 18 7E 7E 00 
37bfb 4ee 00 00 00 3C 
37bff 4ef 7E 66 66 30 
37c03 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
37c07 4f1 0C 7E 7E 00 
37c0b 4f2 00 00 00 7E 
37c0f 4f3 7E 30 30 18 
37c13 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
37c17 4f5 66 7E 3C 00 
37c1b 4f6 00 00 00 30 
37c1f 4f7 30 38 38 3C 
37c23 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
37c27 4f9 7E 30 30 00 
37c2b 4fa 00 00 00 7E 
37c2f 4fb 7E 06 06 3E 
37c33 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
37c37 4fd 66 7E 3C 00 
37c3b 4fe 00 00 00 38 
37c3f 4ff 3C 0E 06 06 
37c43 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
37c47 501 66 7E 3C 00 
37c4b 502 00 00 00 7E 
37c4f 503 7E 60 60 30 
37c53 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
37c57 505 0C 0C 0C 00 
37c5b 506 00 00 00 3C 
37c5f 507 7E 66 66 3C 
37c63 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
37c67 509 66 7E 3C 00 
37c6b 50a 00 00 00 3C 
37c6f 50b 7E 66 66 7E 
37c73 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
37c77 50d 70 3C 1C 00 
37c7b 50e 00 00 00 00 
37c7f 50f 00 00 18 18 
37c83 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
37c87 511 18 18 18 00 
37c8b 512 00 00 00 00 
37c8f 513 00 00 18 18 
37c93 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
37c97 515 18 18 18 0C 
37c9b 516 04 00 00 00 
37c9f 517 70 38 1C 0E 
37ca3 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
37ca7 519 70 00 00 00 
37cab 51a 00 00 00 00 
37caf 51b 00 00 7E 7E 
37cb3 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
37cb7 51d 00 00 00 00 
37cbb 51e 00 00 00 00 | 	byte	$00[8]
37cbf 51f 0E 1C 38 70 
37cc3 520 E0 70 38 1C 
37cc7 521 0E 00 00 00 
37ccb 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
37ccf 523 7E 66 66 30 
37cd3 524 30 18 18 18 
37cd7 525 00 18 18 00 
37cdb 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
37cdf 527 7E 66 66 66 
37ce3 528 66 36 06 66 
37ce7 529 66 7E 3C 00 
37ceb 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
37cef 52b 3C 7E 66 66 
37cf3 52c 66 7E 7E 66 
37cf7 52d 66 66 66 00 
37cfb 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
37cff 52f 7E 66 66 7E 
37d03 530 3E 66 66 66 
37d07 531 66 7E 3E 00 
37d0b 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
37d0f 533 7E 66 66 06 
37d13 534 06 06 06 66 
37d17 535 66 7E 3C 00 
37d1b 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
37d1f 537 7E 66 66 66 
37d23 538 66 66 66 66 
37d27 539 66 7E 3E 00 
37d2b 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
37d2f 53b 7E 06 06 3E 
37d33 53c 3E 06 06 06 
37d37 53d 06 7E 7E 00 
37d3b 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
37d3f 53f 7E 06 06 3E 
37d43 540 3E 06 06 06 
37d47 541 06 06 06 00 
37d4b 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
37d4f 543 7E 06 06 76 
37d53 544 76 66 66 66 
37d57 545 66 7E 3C 00 
37d5b 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
37d5f 547 66 66 66 7E 
37d63 548 7E 66 66 66 
37d67 549 66 66 66 00 
37d6b 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
37d6f 54b 7E 18 18 18 
37d73 54c 18 18 18 18 
37d77 54d 18 7E 7E 00 
37d7b 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
37d7f 54f 60 60 60 60 
37d83 550 60 60 60    | 	byte	$60[7]
37d86 551 66 66 7E 3C 
37d8a 552 00 00 00 00 
37d8e 553 66 66 36 36 
37d92 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
37d96 555 66 66 C6 C6 
37d9a 556 00 00 00 00 
37d9e 557 06 06 06 06 
37da2 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
37da6 559 06 06 7E 7E 
37daa 55a 00 00 00 00 
37dae 55b C6 C6 EE EE 
37db2 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
37db6 55d C6 C6 C6 C6 
37dba 55e 00 00 00 00 
37dbe 55f 66 66 66 6E 
37dc2 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
37dc6 561 76 66 66 66 
37dca 562 00 00 00 00 
37dce 563 3C 7E 66 66 
37dd2 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
37dd6 565 66 66 7E 3C 
37dda 566 00 00 00 00 
37dde 567 3E 7E 66 66 
37de2 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
37de6 569 06 06 06 06 
37dea 56a 00 00 00 00 
37dee 56b 3C 7E 66 66 
37df2 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
37df6 56d 66 56 3E 6C 
37dfa 56e 00 00 00 00 
37dfe 56f 3E 7E 66 66 
37e02 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
37e06 571 66 66 C6 C6 
37e0a 572 00 00 00 00 
37e0e 573 7C 7E 06 06 
37e12 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
37e16 575 60 60 7E 3E 
37e1a 576 00 00 00 00 
37e1e 577 7E 7E 18 18 
37e22 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
37e26 579 18 18 18 18 
37e2a 57a 00 00 00 00 
37e2e 57b 66 66 66 66 
37e32 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
37e36 57d 66 66 7E 3C 
37e3a 57e 00 00 00 00 
37e3e 57f 66 66 66 66 
37e42 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
37e46 581 3C 3C 18 18 
37e4a 582 00 00 00 00 
37e4e 583 C6 C6 C6 C6 
37e52 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
37e56 585 FE EE C6 82 
37e5a 586 00 00 00 00 
37e5e 587 66 66 66 3C 
37e62 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
37e66 589 3C 66 66 66 
37e6a 58a 00 00 00 00 
37e6e 58b 66 66 66 66 
37e72 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
37e76 58d 18 18 18 18 
37e7a 58e 00 00 00 00 
37e7e 58f 7E 7E 30 30 
37e82 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
37e86 591 06 06 7E 7E 
37e8a 592 00 00 00 00 
37e8e 593 3C 3C 0C 0C 
37e92 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
37e96 595 0C 0C 3C 3C 
37e9a 596 00 00 00 00 
37e9e 597 06 06 0C 0C 
37ea2 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
37ea6 599 60 60 C0 C0 
37eaa 59a 00 00 00 00 
37eae 59b 3C 3C 30 30 
37eb2 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
37eb6 59d 30 30 3C 3C 
37eba 59e 00 00 00 00 
37ebe 59f 18 18 3C 3C 
37ec2 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
37ec6 5a1 00 00 00 00 
37eca 5a2 00 00 00 00 
37ece 5a3 00 00 00 00 
37ed2 5a4 00 00 00 00 
37ed6 5a5 00 00       | 	byte	$00[18]
37ed8 5a6 FE FE 00 00 
37edc 5a7 00 00 0C 0C 
37ee0 5a8 18 18 00 00 
37ee4 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
37ee8 5aa 00 00 00 00 
37eec 5ab 00 00 00 00 
37ef0 5ac 00          | 	byte	$00[9]
37ef1 5ac 3C 7C 60 7C 
37ef5 5ad 7E 66 66 7E 
37ef9 5ae 7C 00 00 00 
37efd 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
37f01 5b0 3E 7E 66 66 
37f05 5b1 66 66 66 7E 
37f09 5b2 3E 00 00 00 
37f0d 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
37f11 5b4 3C 3E 06 06 
37f15 5b5 06 06 06 7E 
37f19 5b6 7C 00 00 00 
37f1d 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
37f21 5b8 7C 7E 66 66 
37f25 5b9 66 66 66 7E 
37f29 5ba 7C 00 00 00 
37f2d 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
37f31 5bc 3C 7E 66 66 
37f35 5bd 7E 06 06 7E 
37f39 5be 7C 00 00 00 
37f3d 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
37f41 5c0 18 7E 7E 18 
37f45 5c1 18 18 18 18 
37f49 5c2 18 00 00 00 
37f4d 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37f51 5c4 7C 7E 66 66 
37f55 5c5 66 66 7E 7C 
37f59 5c6 60 7E 3E 00 
37f5d 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
37f61 5c8 3E 7E 66 66 
37f65 5c9 66 66 66 66 
37f69 5ca 66 00 00 00 
37f6d 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
37f71 5cc 1C 1C 18 18 
37f75 5cd 18 18 18 3C 
37f79 5ce 3C 00 00 00 
37f7d 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
37f81 5d0 30 30 30 30 
37f85 5d1 30 30 30 30 
37f89 5d2 30          | 	byte	$30[9]
37f8a 5d2 3E 1E 00 00 
37f8e 5d3 06 06 06 36 
37f92 5d4 36 1E 1E 1E 
37f96 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
37f9a 5d6 00 00 00 00 
37f9e 5d7 1C 1C 18 18 
37fa2 5d8 18 18 18 18 
37fa6 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
37faa 5da 00 00 00 00 
37fae 5db 00 00 00    | 	byte	$00[7]
37fb1 5dc 6C FE FE D6 
37fb5 5dd D6 C6 C6 C6 
37fb9 5de C6 00 00 00 
37fbd 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
37fc1 5e0 3E 7E 66 66 
37fc5 5e1 66 66 66 66 
37fc9 5e2 66 00 00 00 
37fcd 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
37fd1 5e4 3C 7E 66 66 
37fd5 5e5 66 66 66 7E 
37fd9 5e6 3C 00 00 00 
37fdd 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
37fe1 5e8 3E 7E 66 66 
37fe5 5e9 66 66 66 7E 
37fe9 5ea 3E 06 06 00 
37fed 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
37ff1 5ec 7C 7E 66 66 
37ff5 5ed 66 66 66 7E 
37ff9 5ee 7C 60 60 00 
37ffd 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
38001 5f0 3E 7E 66 06 
38005 5f1 06 06 06 06 
38009 5f2 06 00 00 00 
3800d 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
38011 5f4 7C 7E 06 0E 
38015 5f5 3C 70 60 7E 
38019 5f6 3E 00 00 00 
3801d 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
38021 5f8 7E 7E 18 18 
38025 5f9 18 18 18 78 
38029 5fa 70 00 00 00 
3802d 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
38031 5fc 66 66 66 66 
38035 5fd 66 66 66    | 	byte	$66[7]
38038 5fe 7E 7C 00 00 
3803c 5ff 00 00 00 00 
38040 600 00 66 66 66 
38044 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
38048 602 18 18 00 00 
3804c 603 00 00 00 00 
38050 604 00 C6 C6 D6 
38054 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
38058 606 C6 82 00 00 
3805c 607 00 00 00 00 
38060 608 00 66 66 3C 
38064 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
38068 60a 66 66 00 00 
3806c 60b 00 00 00 00 
38070 60c 00 66 66 66 
38074 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
38078 60e 7C 60 7E 3E 
3807c 60f 00 00 00 00 
38080 610 00 7E 7E 30 
38084 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
38088 612 7E 7E 00 00 
3808c 613 00 00 30 18 
38090 614 18 18 18 0C 
38094 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
38098 616 18 30 00 00 
3809c 617 00 00 18 18 
380a0 618 18 18 18 18 
380a4 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
380a8 61a 18 18 00 00 
380ac 61b 00 00 0C 18 
380b0 61c 18 18 18 30 
380b4 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
380b8 61e 18 0C 00 00 
380bc 61f 00 00 6C 7E 
380c0 620 36 00 00 00 
380c4 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
380c8 622 00 00 00 00 
380cc 623 00 00 00 00 
380d0 624 00          | 	byte	$00[9]
380d1 624 18 18 18 18 
380d5 625 18 18 00 00 
380d9 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
380dc 627 00 6C FE FE 
380e0 628 7C 38 10 00 
380e4 629 18 18 18 F8 
380e8 62a F8 18 18 18 | a8_font        file "atari8.fnt"
380ec 62b C0 C0 C0 C0 
380f0 62c C0 C0 C0 C0 | 	byte	$c0[8]
380f4 62d 18 18 18 1F 
380f8 62e 1F 00 00 00 
380fc 62f 18 18 18 1F 
38100 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
38104 631 00 00 00 1F 
38108 632 1F 18 18 18 
3810c 633 C0 E0 70 38 
38110 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
38114 635 03 07 0E 1C 
38118 636 38 70 E0 C0 
3811c 637 80 C0 E0 F0 
38120 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
38124 639 00 00 00 00 
38128 63a F0 F0 F0 F0 
3812c 63b 01 03 07 0F 
38130 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
38134 63d F0 F0 F0 F0 
38138 63e 00 00 00 00 
3813c 63f 0F 0F 0F 0F 
38140 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
38144 641 FF FF 00 00 
38148 642 00 00 00 00 
3814c 643 00 00 00 00 
38150 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
38154 645 00 00 00 00 
38158 646 0F 0F 0F 0F 
3815c 647 00 38 38 EE 
38160 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
38164 649 00 00 00 F8 
38168 64a F8 18 18 18 
3816c 64b 00 00 00 FF 
38170 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
38174 64d 18 18 18 FF 
38178 64e FF 18 18 18 
3817c 64f 00 00 3C 7E 
38180 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
38184 651 00 00 00 00 
38188 652 FF FF FF FF 
3818c 653 03 03 03 03 
38190 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
38194 655 00 00 00 FF 
38198 656 FF 18 18 18 
3819c 657 18 18 18 FF 
381a0 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
381a4 659 0F 0F 0F 0F 
381a8 65a 0F 0F 0F 0F | 	byte	$0f[8]
381ac 65b 18 18 18 F8 
381b0 65c F8 00 00 00 
381b4 65d 1E 06 1E 06 
381b8 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
381bc 65f 00 18 3C 7E 
381c0 660 18 18 18 00 
381c4 661 00 18 18 18 
381c8 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
381cc 663 00 18 0C 7E 
381d0 664 0C 18 00 00 
381d4 665 00 18 30 7E 
381d8 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
381dc 667 00 00 00 00 
381e0 668 00 00 00 00 
381e4 669 00          | 	byte	$00[9]
381e5 669 18 18 18 18 
381e9 66a 00 18 00 00 
381ed 66b 66 66 66 00 
381f1 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
381f5 66d 66 FF 66 66 
381f9 66e FF 66 00 18 
381fd 66f 7C 06 3C 60 
38201 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
38205 671 66 36 18 0C 
38209 672 66 62 00 38 
3820d 673 6C 38 1C F6 
38211 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
38215 675 18 18 18 00 
38219 676 00 00 00 00 
3821d 677 70 38 18 18 
38221 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
38225 679 0E 1C 18 18 
38229 67a 1C 0E 00 00 
3822d 67b 66 3C FF 3C 
38231 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
38235 67d 18 18 7E 18 
38239 67e 18 00 00 00 
3823d 67f 00 00 00 00 
38241 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
38245 681 00 00 7E 00 
38249 682 00 00 00 00 
3824d 683 00 00 00 00 
38251 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
38255 685 60 30 18 0C 
38259 686 06 02 00 00 
3825d 687 3C 66 76 6E 
38261 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
38265 689 18 1C 18 18 
38269 68a 18 7E 00 00 
3826d 68b 3C 66 30 18 
38271 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
38275 68d 7E 30 18 30 
38279 68e 66 3C 00 00 
3827d 68f 30 38 3C 36 
38281 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
38285 691 7E 06 3E 60 
38289 692 66 3C 00 00 
3828d 693 3C 06 3E 66 
38291 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
38295 695 7E 60 30 18 
38299 696 0C 0C 00 00 
3829d 697 3C 66 3C 66 
382a1 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
382a5 699 3C 66 7C 60 
382a9 69a 30 1C 00 00 
382ad 69b 00 18 18 00 
382b1 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
382b5 69d 00 18 18 00 
382b9 69e 18 18 0C 60 
382bd 69f 30 18 0C 18 
382c1 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
382c5 6a1 00 7E 00 00 
382c9 6a2 7E 00 00 06 
382cd 6a3 0C 18 30 18 
382d1 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
382d5 6a5 3C 66 30 18 
382d9 6a6 00 18 00 00 
382dd 6a7 3C 66 76 76 
382e1 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
382e5 6a9 18 3C 66 66 
382e9 6aa 7E 66 00 00 
382ed 6ab 3E 66 3E 66 
382f1 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
382f5 6ad 3C 66 06 06 
382f9 6ae 66 3C 00 00 
382fd 6af 1E 36 66 66 
38301 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
38305 6b1 7E 06 3E 06 
38309 6b2 06 7E 00 00 
3830d 6b3 7E 06 3E 06 
38311 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
38315 6b5 7C 06 06 76 
38319 6b6 66 7C 00 00 
3831d 6b7 66 66 7E 66 
38321 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
38325 6b9 7E 18 18 18 
38329 6ba 18 7E 00 00 
3832d 6bb 60 60 60 60 
38331 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
38335 6bd 66 36 1E 1E 
38339 6be 36 66 00 00 
3833d 6bf 06 06 06 06 
38341 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
38345 6c1 C6 EE FE D6 
38349 6c2 C6 C6 00 00 
3834d 6c3 66 6E 7E 7E 
38351 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
38355 6c5 3C 66 66 66 
38359 6c6 66 3C 00 00 
3835d 6c7 3E 66 66 3E 
38361 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
38365 6c9 3C 66 66 66 
38369 6ca 36 6C 00 00 
3836d 6cb 3E 66 66 3E 
38371 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
38375 6cd 3C 06 3C 60 
38379 6ce 60 3C 00 00 
3837d 6cf 7E 18 18 18 
38381 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
38385 6d1 66 66 66 66 
38389 6d2 66          | 	byte	$66[5]
3838a 6d2 7E 00 00 66 
3838e 6d3 66 66 66 3C 
38392 6d4 18 00 00 C6 
38396 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3839a 6d6 C6 00 00 66 
3839e 6d7 66 3C 3C 66 
383a2 6d8 66 00 00 66 
383a6 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
383aa 6da 18 00 00 7E 
383ae 6db 30 18 0C 06 
383b2 6dc 7E 00 00 78 
383b6 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
383ba 6de 78 00 00 02 
383be 6df 06 0C 18 30 
383c2 6e0 60 00 00 1E 
383c6 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
383ca 6e2 1E 00 00 10 
383ce 6e3 38 6C C6 00 
383d2 6e4 00 00 00 00 
383d6 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
383da 6e6 FF 00 00 18 
383de 6e7 3C 7E 7E 3C 
383e2 6e8 18 00 00 00 
383e6 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
383ea 6ea 7C 00 00 06 
383ee 6eb 06 3E 66 66 
383f2 6ec 3E 00 00 00 
383f6 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
383fa 6ee 3C 00 00 60 
383fe 6ef 60 7C 66 66 
38402 6f0 7C 00 00 00 
38406 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3840a 6f2 3C 00 00 70 
3840e 6f3 18 7C 18 18 
38412 6f4 18 00 00 00 
38416 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3841a 6f6 60 3E 00 06 
3841e 6f7 06 3E 66 66 
38422 6f8 66 00 00 18 
38426 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3842a 6fa 3C 00 00 60 
3842e 6fb 00 60 60 60 
38432 6fc 60 3C 00 06 
38436 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3843a 6fe 66 00 00 1C 
3843e 6ff 18 18 18 18 
38442 700 3C 00 00 00 
38446 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3844a 702 C6 00 00 00 
3844e 703 3E 66 66 66 
38452 704 66 00 00 00 
38456 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3845a 706 3C 00 00 00 
3845e 707 3E 66 66 3E 
38462 708 06 06 00 00 
38466 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3846a 70a 60 60 00 00 
3846e 70b 3E 66 06 06 
38472 70c 06 00 00 00 
38476 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3847a 70e 3E 00 00 18 
3847e 70f 7E 18 18 18 
38482 710 70 00 00 00 
38486 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3848a 712 7C 00 00 00 
3848e 713 66 66 66 3C 
38492 714 18 00 00 00 
38496 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3849a 716 6C 00 00 00 
3849e 717 66 3C 18 3C 
384a2 718 66 00 00 00 
384a6 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
384aa 71a 30 1E 00 00 
384ae 71b 7E 30 18 0C 
384b2 71c 7E 00 00 18 
384b6 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
384ba 71e 3C 00 18 18 
384be 71f 18 18 18 18 
384c2 720 18 18 00 7E 
384c6 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
384ca 722 60 00 10 18 
384ce 723 1C 1E 1C 18 
384d2 724 10 00 08 18 
384d6 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
384da 726 08 00       | 	byte	$08, $00
384dc 727 00 6C FE FE 
384e0 728 7C 38 10 00 
384e4 729 18 18 18 F8 
384e8 72a F8 18 18 18 | a8_font2       file "atari8.fnt"
384ec 72b C0 C0 C0 C0 
384f0 72c C0 C0 C0 C0 | 	byte	$c0[8]
384f4 72d 18 18 18 1F 
384f8 72e 1F 00 00 00 
384fc 72f 18 18 18 1F 
38500 730 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
38504 731 00 00 00 1F 
38508 732 1F 18 18 18 
3850c 733 C0 E0 70 38 
38510 734 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
38514 735 03 07 0E 1C 
38518 736 38 70 E0 C0 
3851c 737 80 C0 E0 F0 
38520 738 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
38524 739 00 00 00 00 
38528 73a F0 F0 F0 F0 
3852c 73b 01 03 07 0F 
38530 73c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
38534 73d F0 F0 F0 F0 
38538 73e 00 00 00 00 
3853c 73f 0F 0F 0F 0F 
38540 740 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
38544 741 FF FF 00 00 
38548 742 00 00 00 00 
3854c 743 00 00 00 00 
38550 744 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
38554 745 00 00 00 00 
38558 746 0F 0F 0F 0F 
3855c 747 00 38 38 EE 
38560 748 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
38564 749 00 00 00 F8 
38568 74a F8 18 18 18 
3856c 74b 00 00 00 FF 
38570 74c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
38574 74d 18 18 18 FF 
38578 74e FF 18 18 18 
3857c 74f 00 00 3C 7E 
38580 750 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
38584 751 00 00 00 00 
38588 752 FF FF FF FF 
3858c 753 03 03 03 03 
38590 754 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
38594 755 00 00 00 FF 
38598 756 FF 18 18 18 
3859c 757 18 18 18 FF 
385a0 758 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
385a4 759 0F 0F 0F 0F 
385a8 75a 0F 0F 0F 0F | 	byte	$0f[8]
385ac 75b 18 18 18 F8 
385b0 75c F8 00 00 00 
385b4 75d 1E 06 1E 06 
385b8 75e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
385bc 75f 00 18 3C 7E 
385c0 760 18 18 18 00 
385c4 761 00 18 18 18 
385c8 762 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
385cc 763 00 18 0C 7E 
385d0 764 0C 18 00 00 
385d4 765 00 18 30 7E 
385d8 766 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
385dc 767 00 00 00 00 
385e0 768 00 00 00 00 
385e4 769 00          | 	byte	$00[9]
385e5 769 18 18 18 18 
385e9 76a 00 18 00 00 
385ed 76b 66 66 66 00 
385f1 76c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
385f5 76d 66 FF 66 66 
385f9 76e FF 66 00 18 
385fd 76f 7C 06 3C 60 
38601 770 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
38605 771 66 36 18 0C 
38609 772 66 62 00 38 
3860d 773 6C 38 1C F6 
38611 774 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
38615 775 18 18 18 00 
38619 776 00 00 00 00 
3861d 777 70 38 18 18 
38621 778 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
38625 779 0E 1C 18 18 
38629 77a 1C 0E 00 00 
3862d 77b 66 3C FF 3C 
38631 77c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
38635 77d 18 18 7E 18 
38639 77e 18 00 00 00 
3863d 77f 00 00 00 00 
38641 780 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
38645 781 00 00 7E 00 
38649 782 00 00 00 00 
3864d 783 00 00 00 00 
38651 784 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
38655 785 60 30 18 0C 
38659 786 06 02 00 00 
3865d 787 3C 66 76 6E 
38661 788 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
38665 789 18 1C 18 18 
38669 78a 18 7E 00 00 
3866d 78b 3C 66 30 18 
38671 78c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
38675 78d 7E 30 18 30 
38679 78e 66 3C 00 00 
3867d 78f 30 38 3C 36 
38681 790 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
38685 791 7E 06 3E 60 
38689 792 66 3C 00 00 
3868d 793 3C 06 3E 66 
38691 794 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
38695 795 7E 60 30 18 
38699 796 0C 0C 00 00 
3869d 797 3C 66 3C 66 
386a1 798 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
386a5 799 3C 66 7C 60 
386a9 79a 30 1C 00 00 
386ad 79b 00 18 18 00 
386b1 79c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
386b5 79d 00 18 18 00 
386b9 79e 18 18 0C 60 
386bd 79f 30 18 0C 18 
386c1 7a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
386c5 7a1 00 7E 00 00 
386c9 7a2 7E 00 00 06 
386cd 7a3 0C 18 30 18 
386d1 7a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
386d5 7a5 3C 66 30 18 
386d9 7a6 00 18 00 00 
386dd 7a7 3C 66 76 76 
386e1 7a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
386e5 7a9 18 3C 66 66 
386e9 7aa 7E 66 00 00 
386ed 7ab 3E 66 3E 66 
386f1 7ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
386f5 7ad 3C 66 06 06 
386f9 7ae 66 3C 00 00 
386fd 7af 1E 36 66 66 
38701 7b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
38705 7b1 7E 06 3E 06 
38709 7b2 06 7E 00 00 
3870d 7b3 7E 06 3E 06 
38711 7b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
38715 7b5 7C 06 06 76 
38719 7b6 66 7C 00 00 
3871d 7b7 66 66 7E 66 
38721 7b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
38725 7b9 7E 18 18 18 
38729 7ba 18 7E 00 00 
3872d 7bb 60 60 60 60 
38731 7bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
38735 7bd 66 36 1E 1E 
38739 7be 36 66 00 00 
3873d 7bf 06 06 06 06 
38741 7c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
38745 7c1 C6 EE FE D6 
38749 7c2 C6 C6 00 00 
3874d 7c3 66 6E 7E 7E 
38751 7c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
38755 7c5 3C 66 66 66 
38759 7c6 66 3C 00 00 
3875d 7c7 3E 66 66 3E 
38761 7c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
38765 7c9 3C 66 66 66 
38769 7ca 36 6C 00 00 
3876d 7cb 3E 66 66 3E 
38771 7cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
38775 7cd 3C 06 3C 60 
38779 7ce 60 3C 00 00 
3877d 7cf 7E 18 18 18 
38781 7d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
38785 7d1 66 66 66 66 
38789 7d2 66          | 	byte	$66[5]
3878a 7d2 7E 00 00 66 
3878e 7d3 66 66 66 3C 
38792 7d4 18 00 00 C6 
38796 7d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3879a 7d6 C6 00 00 66 
3879e 7d7 66 3C 3C 66 
387a2 7d8 66 00 00 66 
387a6 7d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
387aa 7da 18 00 00 7E 
387ae 7db 30 18 0C 06 
387b2 7dc 7E 00 00 78 
387b6 7dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
387ba 7de 78 00 00 02 
387be 7df 06 0C 18 30 
387c2 7e0 60 00 00 1E 
387c6 7e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
387ca 7e2 1E 00 00 10 
387ce 7e3 38 6C C6 00 
387d2 7e4 00 00 00 00 
387d6 7e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
387da 7e6 FF 00 00 18 
387de 7e7 3C 7E 7E 3C 
387e2 7e8 18 00 00 00 
387e6 7e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
387ea 7ea 7C 00 00 06 
387ee 7eb 06 3E 66 66 
387f2 7ec 3E 00 00 00 
387f6 7ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
387fa 7ee 3C 00 00 60 
387fe 7ef 60 7C 66 66 
38802 7f0 7C 00 00 00 
38806 7f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3880a 7f2 3C 00 00 70 
3880e 7f3 18 7C 18 18 
38812 7f4 18 00 00 00 
38816 7f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3881a 7f6 60 3E 00 06 
3881e 7f7 06 3E 66 66 
38822 7f8 66 00 00 18 
38826 7f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3882a 7fa 3C 00 00 60 
3882e 7fb 00 60 60 60 
38832 7fc 60 3C 00 06 
38836 7fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3883a 7fe 66 00 00 1C 
3883e 7ff 18 18 18 18 
38842 800 3C 00 00 00 
38846 801 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3884a 802 C6 00 00 00 
3884e 803 3E 66 66 66 
38852 804 66 00 00 00 
38856 805 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3885a 806 3C 00 00 00 
3885e 807 3E 66 66 3E 
38862 808 06 06 00 00 
38866 809 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3886a 80a 60 60 00 00 
3886e 80b 3E 66 06 06 
38872 80c 06 00 00 00 
38876 80d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3887a 80e 3E 00 00 18 
3887e 80f 7E 18 18 18 
38882 810 70 00 00 00 
38886 811 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3888a 812 7C 00 00 00 
3888e 813 66 66 66 3C 
38892 814 18 00 00 00 
38896 815 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3889a 816 6C 00 00 00 
3889e 817 66 3C 18 3C 
388a2 818 66 00 00 00 
388a6 819 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
388aa 81a 30 1E 00 00 
388ae 81b 7E 30 18 0C 
388b2 81c 7E 00 00 18 
388b6 81d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
388ba 81e 3C 00 18 18 
388be 81f 18 18 18 18 
388c2 820 18 18 00 7E 
388c6 821 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
388ca 822 60 00 10 18 
388ce 823 1C 1E 1C 18 
388d2 824 10 00 08 18 
388d6 825 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
388da 826 08 00       | 	byte	$08, $00
388dc 827 00 00 00 00 
      ...             
38ae8 8aa 00 00 00 00 
38aec 8ab 00 00       | amiga_font     file "amigafont.def"
38aee 8ab 18 18 18 18 
38af2 8ac 18 18       | 	byte	$18[6]
38af4 8ad 00 18 18 00 
38af8 8ae 00 00 00 00 
38afc 8af 00 00 66 66 
38b00 8b0 66 00 00 00 | 	byte	$00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $00, $00, $00
38b04 8b1 00 00 00 00 
38b08 8b2 00 00 00 00 
38b0c 8b3 00 00       | 	byte	$00[10]
38b0e 8b3 36 36 7F 36 
38b12 8b4 36 36 7F 36 
38b16 8b5 36 00 00 00 
38b1a 8b6 00 00 00 00 | 	byte	$36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $00, $00, $00
38b1e 8b7 18 7C 06 06 
38b22 8b8 3C 60 60 3E 
38b26 8b9 18 00 00 00 
38b2a 8ba 00 00 00 00 | 	byte	$18, $7c, $06, $06, $3c, $60, $60, $3e, $18, $00, $00, $00, $00, $00, $00, $00
38b2e 8bb 00 00 C6 69 
38b32 8bc 36 18 6C 96 
38b36 8bd 63 00 00 00 
38b3a 8be 00 00 00 00 | 	byte	$00, $00, $c6, $69, $36, $18, $6c, $96, $63, $00, $00, $00, $00, $00, $00, $00
38b3e 8bf 1C 36 36 1E 
38b42 8c0 6E 3B 33 73 
38b46 8c1 DE 00 00 00 
38b4a 8c2 00 00 00 00 | 	byte	$1c, $36, $36, $1e, $6e, $3b, $33, $73, $de, $00, $00, $00, $00, $00, $00, $00
38b4e 8c3 18 18 0C 00 
38b52 8c4 00 00 00 00 
38b56 8c5 00 00 00 00 
38b5a 8c6 00 00 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38b5e 8c7 30 18 0C 0C 
38b62 8c8 0C 0C 0C 18 
38b66 8c9 30 00 00 00 
38b6a 8ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00, $00
38b6e 8cb 0C 18 30 30 
38b72 8cc 30 30 30 18 
38b76 8cd 0C 00 00 00 
38b7a 8ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00, $00
38b7e 8cf 00 66 66 3C 
38b82 8d0 FF 3C 66 66 
38b86 8d1 00 00 00 00 
38b8a 8d2 00 00 00 00 | 	byte	$00, $66, $66, $3c, $ff, $3c, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00
38b8e 8d3 00 18 18 18 
38b92 8d4 7E 18 18 18 
38b96 8d5 00 00 00 00 
38b9a 8d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
38b9e 8d7 00 00 00 00 
38ba2 8d8 00 00 00    | 	byte	$00[7]
38ba5 8d9 18 18 0C 00 
38ba9 8da 00 00 00 00 
38bad 8db 00 00 00 00 
38bb1 8dc 00 7E 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00
38bb5 8dd 00 00 00 00 
38bb9 8de 00 00 00 00 
38bbd 8df 00 00 00 00 
38bc1 8e0 00 00 00 00 | 	byte	$00[16]
38bc5 8e1 18 18 00 00 
38bc9 8e2 00 00 00 00 
38bcd 8e3 00 00 C0 60 
38bd1 8e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $60, $30, $18, $0c, $06
38bd5 8e5 03 00 00 00 
38bd9 8e6 00 00 00 00 
38bdd 8e7 00 3C 66 66 
38be1 8e8 76 7E 6E 66 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $76, $7e, $6e, $66
38be5 8e9 66 3C 00 00 
38be9 8ea 00 00 00 00 
38bed 8eb 00 18 1C 1E 
38bf1 8ec 18 18 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18
38bf5 8ed 18 18 00 00 
38bf9 8ee 00 00 00 00 
38bfd 8ef 00 3C 66 60 
38c01 8f0 60 30 18 0C | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $30, $18, $0c
38c05 8f1 06 7E 00 00 
38c09 8f2 00 00 00 00 
38c0d 8f3 00 3C 66 60 
38c11 8f4 60 38 60 60 | 	byte	$06, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $38, $60, $60
38c15 8f5 66 3C 00 00 
38c19 8f6 00 00 00 00 
38c1d 8f7 00 30 38 3C 
38c21 8f8 36 33 7F 30 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30
38c25 8f9 30 30 00 00 
38c29 8fa 00 00 00 00 
38c2d 8fb 00 7E 06 06 
38c31 8fc 3E 60 60 60 | 	byte	$30, $30, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06, $3e, $60, $60, $60
38c35 8fd 66 3C 00 00 
38c39 8fe 00 00 00 00 
38c3d 8ff 00 38 0C 06 
38c41 900 06 3E 66 66 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $06, $06, $3e, $66, $66
38c45 901 66 3C 00 00 
38c49 902 00 00 00 00 
38c4d 903 00 7E 60 60 
38c51 904 60 30 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $7e, $60, $60, $60, $30, $18, $18
38c55 905 18 18 00 00 
38c59 906 00 00 00 00 
38c5d 907 00 3C 66 66 
38c61 908 66 3C 66 66 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $3c, $66, $66
38c65 909 66 3C 00 00 
38c69 90a 00 00 00 00 
38c6d 90b 00 3C 66 66 
38c71 90c 66 7C 60 60 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $7c, $60, $60
38c75 90d 30 1C 00 00 
38c79 90e 00 00 00 00 
38c7d 90f 00 00 00 18 
38c81 910 18 00 00 18 | 	byte	$30, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $18
38c85 911 18 00 00 00 
38c89 912 00 00 00 00 
38c8d 913 00 00 00 18 
38c91 914 18 00 00 00 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
38c95 915 18 18 0C 00 
38c99 916 00 00 00 00 
38c9d 917 00 00 00 60 
38ca1 918 18 06 18 60 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $60, $18, $06, $18, $60
38ca5 919 00 00 00 00 
38ca9 91a 00 00 00 00 
38cad 91b 00 00 00 00 | 	byte	$00[12]
38cb1 91c 7E 00 7E 00 
38cb5 91d 00 00 00 00 
38cb9 91e 00 00 00 00 
38cbd 91f 00 00 00 06 | 	byte	$7e, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
38cc1 920 18 60 18 06 
38cc5 921 00 00 00 00 
38cc9 922 00 00 00 00 
38ccd 923 00 3C 66 60 | 	byte	$18, $60, $18, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60
38cd1 924 60 30 18 00 
38cd5 925 18 18 00 00 
38cd9 926 00 00 00 00 
38cdd 927 00 3E 63 63 | 	byte	$60, $30, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
38ce1 928 7B 6B 7B 03 
38ce5 929 03 1E 00 00 
38ce9 92a 00 00 00 00 
38ced 92b 00 3E 63 63 | 	byte	$7b, $6b, $7b, $03, $03, $1e, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
38cf1 92c 63 7F 63 63 
38cf5 92d 63 63 00 00 
38cf9 92e 00 00 00 00 
38cfd 92f 00 3E 66 66 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66
38d01 930 66 3E 66 66 
38d05 931 66 3E 00 00 
38d09 932 00 00 00 00 
38d0d 933 00 78 0C 06 | 	byte	$66, $3e, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $78, $0c, $06
38d11 934 06 06 06 06 
38d15 935 0C 78 00 00 
38d19 936 00 00 00 00 
38d1d 937 00 1F 33 63 | 	byte	$06, $06, $06, $06, $0c, $78, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $63
38d21 938 63 63 63 63 
38d25 939 33 1F 00 00 
38d29 93a 00 00 00 00 
38d2d 93b 00 7E 06 06 | 	byte	$63, $63, $63, $63, $33, $1f, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
38d31 93c 06 1E 06 06 
38d35 93d 06 7E 00 00 
38d39 93e 00 00 00 00 
38d3d 93f 00 7E 06 06 | 	byte	$06, $1e, $06, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
38d41 940 06 1E 06 06 
38d45 941 06 06 00 00 
38d49 942 00 00 00 00 
38d4d 943 00 3C 66 06 | 	byte	$06, $1e, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06
38d51 944 06 76 66 66 
38d55 945 66 7C 00 00 
38d59 946 00 00 00 00 
38d5d 947 00 63 63 63 | 	byte	$06, $76, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63
38d61 948 63 7F 63 63 
38d65 949 63 63 00 00 
38d69 94a 00 00 00 00 
38d6d 94b 00 3C 18 18 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3c, $18, $18
38d71 94c 18 18 18 18 
38d75 94d 18          | 	byte	$18[5]
38d76 94d 3C 00 00 00 
38d7a 94e 00 00 00 00 
38d7e 94f 60 60 60 60 
38d82 950 60 60 60 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60, $60, $60, $60, $60, $63
38d86 951 3E 00 00 00 
38d8a 952 00 00 00 00 
38d8e 953 C3 63 33 1B 
38d92 954 0F 1B 33 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $c3, $63, $33, $1b, $0f, $1b, $33, $63
38d96 955 C3 00 00 00 
38d9a 956 00 00 00 00 
38d9e 957 03 03 03 03 
38da2 958 03 03 03 03 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $03, $03, $03
38da6 959 7F 00 00 00 
38daa 95a 00 00 00 00 
38dae 95b 63 77 7F 6B 
38db2 95c 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $6b, $63, $63, $63, $63
38db6 95d 63 00 00 00 
38dba 95e 00 00 00 00 
38dbe 95f 63 67 6F 7B 
38dc2 960 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7b, $73, $63, $63, $63
38dc6 961 63 00 00 00 
38dca 962 00 00 00 00 
38dce 963 3E 63 63 63 
38dd2 964 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63
38dd6 965 3E 00 00 00 
38dda 966 00 00 00 00 
38dde 967 3E 66 66 66 
38de2 968 3E 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e, $06, $06, $06
38de6 969 06 00 00 00 
38dea 96a 00 00 00 00 
38dee 96b 3E 63 63 63 
38df2 96c 63 63 63 7B | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $7b
38df6 96d FE 00 00 00 
38dfa 96e 00 00 00 00 
38dfe 96f 1F 33 33 33 
38e02 970 1F 1B 33 63 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $33, $33, $1f, $1b, $33, $63
38e06 971 63 00 00 00 
38e0a 972 00 00 00 00 
38e0e 973 3C 66 06 0C 
38e12 974 18 30 60 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06, $0c, $18, $30, $60, $66
38e16 975 3C 00 00 00 
38e1a 976 00 00 00 00 
38e1e 977 7E 18 18 18 
38e22 978 18 18 18 18 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $7e, $18, $18, $18, $18, $18, $18, $18
38e26 979 18 00 00 00 
38e2a 97a 00 00 00 00 
38e2e 97b 63 63 63 63 
38e32 97c 63 63 63 63 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63
38e36 97d 3E 00 00 00 
38e3a 97e 00 00 00 00 
38e3e 97f 63 63 63 63 
38e42 980 63 36 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36, $36, $1c
38e46 981 08 00 00 00 
38e4a 982 00 00 00 00 
38e4e 983 C3 C3 C3 C3 
38e52 984 C3 DB FF E7 | 	byte	$08, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $c3, $c3, $c3, $db, $ff, $e7
38e56 985 C3 00 00 00 
38e5a 986 00 00 00 00 
38e5e 987 C3 C3 66 3C 
38e62 988 18 3C 66 C3 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $3c, $66, $c3
38e66 989 C3 00 00 00 
38e6a 98a 00 00 00 00 
38e6e 98b C3 C3 66 3C 
38e72 98c 18 18 18 18 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $18, $18, $18
38e76 98d 18 00 00 00 
38e7a 98e 00 00 00 00 
38e7e 98f 7F 60 60 30 
38e82 990 18 0C 06 03 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $7f, $60, $60, $30, $18, $0c, $06, $03
38e86 991 7F 00 00 00 
38e8a 992 00 00 00 00 
38e8e 993 3C 0C 0C 0C 
38e92 994 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
38e96 995 3C 00 00 00 
38e9a 996 00 00 00 00 
38e9e 997 00 03 06 0C 
38ea2 998 18 30 60 C0 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $03, $06, $0c, $18, $30, $60, $c0
38ea6 999 00 00 00 00 
38eaa 99a 00 00 00 00 | 	byte	$00[8]
38eae 99b 3C 30 30 30 
38eb2 99c 30 30 30 30 
38eb6 99d 3C 00 00 00 
38eba 99e 00 00 00 00 | 	byte	$3c, $30, $30, $30, $30, $30, $30, $30, $3c, $00, $00, $00, $00, $00, $00, $00
38ebe 99f 08 1C 36 63 
38ec2 9a0 00 00 00 00 
38ec6 9a1 00 00 00 00 
38eca 9a2 00 00 00 00 | 	byte	$08, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38ece 9a3 00 00 00 00 
38ed2 9a4 00 00 00 00 
38ed6 9a5 00          | 	byte	$00[9]
38ed7 9a5 7F 00 00 00 
38edb 9a6 00 00 00 18 
38edf 9a7 18 30 00 00 
38ee3 9a8 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $18, $18, $30, $00, $00, $00, $00, $00, $00
38ee7 9a9 00 00 00 00 
38eeb 9aa 00 00 00 00 
38eef 9ab 00 00       | 	byte	$00[10]
38ef1 9ac 3C 60 7C 66 
38ef5 9ad 66 7C 00 00 
38ef9 9ae 00 00 00 00 
38efd 9af 00 06 06 06 | 	byte	$3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $06, $06, $06
38f01 9b0 3E 66 66 66 
38f05 9b1 66 3E 00 00 
38f09 9b2 00 00 00 00 
38f0d 9b3 00 00 00 00 | 	byte	$3e, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38f11 9b4 3C 06 06 06 
38f15 9b5 06 3C 00 00 
38f19 9b6 00 00 00 00 
38f1d 9b7 00 60 60 60 | 	byte	$3c, $06, $06, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60
38f21 9b8 7C 66 66 66 
38f25 9b9 66 7C 00 00 
38f29 9ba 00 00 00 00 
38f2d 9bb 00 00 00 00 | 	byte	$7c, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38f31 9bc 3C 66 7E 06 
38f35 9bd 06 3C 00 00 
38f39 9be 00 00 00 00 
38f3d 9bf 00 38 0C 0C | 	byte	$3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $0c
38f41 9c0 3E 0C 0C 0C 
38f45 9c1 0C 0C 00 00 
38f49 9c2 00 00 00 00 
38f4d 9c3 00 00 00 00 | 	byte	$3e, $0c, $0c, $0c, $0c, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38f51 9c4 7C 66 66 66 
38f55 9c5 7C 60 60 3C 
38f59 9c6 00 00 00 00 
38f5d 9c7 00 06 06 06 | 	byte	$7c, $66, $66, $66, $7c, $60, $60, $3c, $00, $00, $00, $00, $00, $06, $06, $06
38f61 9c8 3E 66 66 66 
38f65 9c9 66 66 00 00 
38f69 9ca 00 00 00 00 
38f6d 9cb 00 00 18 00 | 	byte	$3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00
38f71 9cc 18 18 18 18 
38f75 9cd 18          | 	byte	$18[5]
38f76 9cd 30 00 00 00 
38f7a 9ce 00 00 00 00 
38f7e 9cf 00 30 00 30 
38f82 9d0 30 30 30 30 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $30, $30, $30, $30, $30
38f86 9d1 30 30 1E 00 
38f8a 9d2 00 00 00 00 
38f8e 9d3 03 03 03 33 
38f92 9d4 1B 0F 1B 33 | 	byte	$30, $30, $1e, $00, $00, $00, $00, $00, $03, $03, $03, $33, $1b, $0f, $1b, $33
38f96 9d5 63 00 00 00 
38f9a 9d6 00 00 00 00 
38f9e 9d7 18 18 18 18 
38fa2 9d8 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
38fa6 9d9 30 00 00 00 
38faa 9da 00 00 00 00 
38fae 9db 00 00 00 37 
38fb2 9dc 7F 6B 63 63 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $63, $63
38fb6 9dd 63 00 00 00 
38fba 9de 00 00 00 00 
38fbe 9df 00 00 00 3E 
38fc2 9e0 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $66
38fc6 9e1 66 00 00 00 
38fca 9e2 00 00 00 00 
38fce 9e3 00 00 00 3C 
38fd2 9e4 66 66 66 66 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $66
38fd6 9e5 3C 00 00 00 
38fda 9e6 00 00 00 00 
38fde 9e7 00 00 00 3E 
38fe2 9e8 66 66 66 3E | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e
38fe6 9e9 06 06 06 00 
38fea 9ea 00 00 00 00 
38fee 9eb 00 00 00 7C 
38ff2 9ec 66 66 66 7C | 	byte	$06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7c, $66, $66, $66, $7c
38ff6 9ed 60 60 60 00 
38ffa 9ee 00 00 00 00 
38ffe 9ef 00 00 00 3E 
39002 9f0 66 06 06 06 | 	byte	$60, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $06, $06, $06
39006 9f1 06 00 00 00 
3900a 9f2 00 00 00 00 
3900e 9f3 00 00 00 3C 
39012 9f4 06 0C 30 60 | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $06, $0c, $30, $60
39016 9f5 3E 00 00 00 
3901a 9f6 00 00 00 00 
3901e 9f7 00 0C 0C 3E 
39022 9f8 0C 0C 0C 0C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $0c, $3e, $0c, $0c, $0c, $0c
39026 9f9 38 00 00 00 
3902a 9fa 00 00 00 00 
3902e 9fb 00 00 00 66 
39032 9fc 66 66 66 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66
39036 9fd 7C 00 00 00 
3903a 9fe 00 00 00 00 
3903e 9ff 00 00 00 66 
39042 a00 66 66 66 3C | 	byte	$7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
39046 a01 18 00 00 00 
3904a a02 00 00 00 00 
3904e a03 00 00 00 63 
39052 a04 63 63 6B 3E | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $6b, $3e
39056 a05 36 00 00 00 
3905a a06 00 00 00 00 
3905e a07 00 00 00 63 
39062 a08 36 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36
39066 a09 63 00 00 00 
3906a a0a 00 00 00 00 
3906e a0b 00 00 00 66 
39072 a0c 66 66 66 3C | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
39076 a0d 18 0C 06 00 
3907a a0e 00 00 00 00 
3907e a0f 00 00 00 7E 
39082 a10 30 18 0C 06 | 	byte	$18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $30, $18, $0c, $06
39086 a11 7E 00 00 00 
3908a a12 00 00 00 00 
3908e a13 70 18 18 18 
39092 a14 0E 18 18 18 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18
39096 a15 70 00 00 00 
3909a a16 00 00 00 00 
3909e a17 18 18 18 18 
390a2 a18 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
390a6 a19 18 00 00 00 
390aa a1a 00 00 00 00 
390ae a1b 0E 18 18 18 
390b2 a1c 70 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18
390b6 a1d 0E 00 00 00 
390ba a1e 00 00 00 00 
390be a1f 46 5D 31 00 
390c2 a20 00 00 00 00 | 	byte	$0e, $00, $00, $00, $00, $00, $00, $00, $46, $5d, $31, $00, $00, $00, $00, $00
390c6 a21 00 00 00 00 
390ca a22 00 00 00 00 | 	byte	$00[8]
390ce a23 C0 F0 3C 0F 
390d2 a24 C3 F0 3C 0F 
390d6 a25 03 00 00 00 
390da a26 00 00 00 00 | 	byte	$c0, $f0, $3c, $0f, $c3, $f0, $3c, $0f, $03, $00, $00, $00, $00, $00, $00, $00
390de a27 18 18 00 18 
390e2 a28 18 18 18 18 
390e6 a29 18 00 00 00 
390ea a2a 00 00 00 00 | 	byte	$18, $18, $00, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
390ee a2b 18 18 7E 1B 
390f2 a2c 1B 7E 18 18 
390f6 a2d 00 00 00 00 
390fa a2e 00 00 00 00 | 	byte	$18, $18, $7e, $1b, $1b, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
390fe a2f 78 CC 0C 0C 
39102 a30 1E 0C 0C 06 
39106 a31 7F 00 00 00 
3910a a32 00 00 00 00 | 	byte	$78, $cc, $0c, $0c, $1e, $0c, $0c, $06, $7f, $00, $00, $00, $00, $00, $00, $00
3910e a33 66 3C 66 66 
39112 a34 3C 66 00 00 
39116 a35 00 00 00 00 
3911a a36 00 00 00 00 | 	byte	$66, $3c, $66, $66, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3911e a37 C3 C3 66 3C 
39122 a38 18 7E 18 18 
39126 a39 18 00 00 00 
3912a a3a 00 00 00 00 | 	byte	$c3, $c3, $66, $3c, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3912e a3b 18 18 18 18 
39132 a3c 00 18 18 18 
39136 a3d 18 00 00 00 
3913a a3e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3913e a3f 3C 06 06 3C 
39142 a40 66 66 66 3C 
39146 a41 60 60 3C 00 
3914a a42 00 00 00 00 | 	byte	$3c, $06, $06, $3c, $66, $66, $66, $3c, $60, $60, $3c, $00, $00, $00, $00, $00
3914e a43 66 66 00 00 
39152 a44 00 00 00 00 
39156 a45 00 00 00 00 
3915a a46 00 00 00 00 | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3915e a47 7E 81 B9 85 
39162 a48 85 B9 81 7E 
39166 a49 00 00 00 00 
3916a a4a 00 00 00 00 | 	byte	$7e, $81, $b9, $85, $85, $b9, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3916e a4b 3C 33 33 7E 
39172 a4c 00 7F 00 00 
39176 a4d 00 00 00 00 
3917a a4e 00 00 00 00 | 	byte	$3c, $33, $33, $7e, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3917e a4f 00 00 CC 66 
39182 a50 33 66 CC 00 
39186 a51 00 00 00 00 
3918a a52 00 00 00 00 | 	byte	$00, $00, $cc, $66, $33, $66, $cc, $00, $00, $00, $00, $00, $00, $00, $00, $00
3918e a53 7E 60 60 00 
39192 a54 00 00 00 00 
39196 a55 00 00 00 00 
3919a a56 00 00 00 00 | 	byte	$7e, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3919e a57 7E 81 9D A5 
391a2 a58 9D A5 81 7E 
391a6 a59 00 00 00 00 
391aa a5a 00 00 00 00 | 	byte	$7e, $81, $9d, $a5, $9d, $a5, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
391ae a5b 7E 00 00 00 
391b2 a5c 00 00 00 00 
391b6 a5d 00 00 00 00 
391ba a5e 00 00 00 00 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
391be a5f 3C 66 66 3C 
391c2 a60 00 00 00 00 
391c6 a61 00 00 00 00 
391ca a62 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
391ce a63 18 18 18 7E 
391d2 a64 18 18 18 00 
391d6 a65 7E 00 00 00 
391da a66 00 00 00 00 | 	byte	$18, $18, $18, $7e, $18, $18, $18, $00, $7e, $00, $00, $00, $00, $00, $00, $00
391de a67 1E 30 30 18 
391e2 a68 0C 06 3E 00 
391e6 a69 00 00 00 00 
391ea a6a 00 00 00 00 | 	byte	$1e, $30, $30, $18, $0c, $06, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
391ee a6b 1E 30 30 1C 
391f2 a6c 30 30 1E 00 
391f6 a6d 00 00 00 00 
391fa a6e 00 00 00 00 | 	byte	$1e, $30, $30, $1c, $30, $30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
391fe a6f 30 18 0C 06 
39202 a70 00 00 00 00 
39206 a71 00 00 00 00 
3920a a72 00 00 00 00 | 	byte	$30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3920e a73 00 00 00 66 
39212 a74 66 66 66 66 
39216 a75 FE 06 06 00 
3921a a76 00 00 00 00 | 	byte	$00, $00, $00, $66, $66, $66, $66, $66, $fe, $06, $06, $00, $00, $00, $00, $00
3921e a77 7C 5E 5E 5E 
39222 a78 5C 50 50 50 
39226 a79 50 50 00 00 
3922a a7a 00 00 00 00 | 	byte	$7c, $5e, $5e, $5e, $5c, $50, $50, $50, $50, $50, $00, $00, $00, $00, $00, $00
3922e a7b 00 00 00 18 
39232 a7c 18 00 00 00 
39236 a7d 00 00 00 00 
3923a a7e 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3923e a7f 00 00 00 00 
39242 a80 00 00 00 00 
39246 a81 00          | 	byte	$00[9]
39247 a81 30 18 00 00 
3924b a82 00 00 00 18 
3924f a83 1C 18 18 18 
39253 a84 18 18 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $18, $1c, $18, $18, $18, $18, $18, $00, $00
39257 a85 00 00 00 00 
3925b a86 00 00 00    | 	byte	$00[7]
3925e a87 3C 66 66 3C 
39262 a88 00 7E 00 00 
39266 a89 00 00 00 00 
3926a a8a 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3926e a8b 00 00 33 66 
39272 a8c CC 66 33 00 
39276 a8d 00 00 00 00 
3927a a8e 00 00 00 00 | 	byte	$00, $00, $33, $66, $cc, $66, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00
3927e a8f 02 63 32 1A 
39282 a90 4E 66 F3 40 
39286 a91 40 00 00 00 
3928a a92 00 00 00 00 | 	byte	$02, $63, $32, $1a, $4e, $66, $f3, $40, $40, $00, $00, $00, $00, $00, $00, $00
3928e a93 04 C6 64 34 
39292 a94 7C 8C 46 23 
39296 a95 F0 00 00 00 
3929a a96 00 00 00 00 | 	byte	$04, $c6, $64, $34, $7c, $8c, $46, $23, $f0, $00, $00, $00, $00, $00, $00, $00
3929e a97 03 C4 66 34 
392a2 a98 5B 6C F6 43 
392a6 a99 40 00 00 00 
392aa a9a 00 00 00 00 | 	byte	$03, $c4, $66, $34, $5b, $6c, $f6, $43, $40, $00, $00, $00, $00, $00, $00, $00
392ae a9b 18 18 00 18 
392b2 a9c 0C 06 06 66 
392b6 a9d 3C 00 00 00 
392ba a9e 00 00 00 00 | 	byte	$18, $18, $00, $18, $0c, $06, $06, $66, $3c, $00, $00, $00, $00, $00, $00, $00
392be a9f 06 0C 3E 63 
392c2 aa0 63 7F 63 63 
392c6 aa1 63 00 00 00 
392ca aa2 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
392ce aa3 30 18 3E 63 
392d2 aa4 63 7F 63 63 
392d6 aa5 63 00 00 00 
392da aa6 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
392de aa7 0C 33 3E 63 
392e2 aa8 63 63 7F 63 
392e6 aa9 63 00 00 00 
392ea aaa 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
392ee aab 4E 39 3E 63 
392f2 aac 63 7F 63 63 
392f6 aad 63 00 00 00 
392fa aae 00 00 00 00 | 	byte	$4e, $39, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
392fe aaf 63 00 3E 63 
39302 ab0 63 7F 63 63 
39306 ab1 63 00 00 00 
3930a ab2 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3930e ab3 1C 22 1C 36 
39312 ab4 63 63 7F 63 
39316 ab5 63 00 00 00 
3931a ab6 00 00 00 00 | 	byte	$1c, $22, $1c, $36, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3931e ab7 F8 3C 3C 36 
39322 ab8 F6 3F 33 33 
39326 ab9 F3 00 00 00 
3932a aba 00 00 00 00 | 	byte	$f8, $3c, $3c, $36, $f6, $3f, $33, $33, $f3, $00, $00, $00, $00, $00, $00, $00
3932e abb 78 0C 06 06 
39332 abc 06 06 06 0C 
39336 abd 78 30 18 00 
3933a abe 00 00 00 00 | 	byte	$78, $0c, $06, $06, $06, $06, $06, $0c, $78, $30, $18, $00, $00, $00, $00, $00
3933e abf 0C 18 7E 06 
39342 ac0 06 3E 06 06 
39346 ac1 7E 00 00 00 
3934a ac2 00 00 00 00 | 	byte	$0c, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3934e ac3 30 18 7E 06 
39352 ac4 06 3E 06 06 
39356 ac5 7E 00 00 00 
3935a ac6 00 00 00 00 | 	byte	$30, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3935e ac7 18 66 7E 06 
39362 ac8 06 3E 06 06 
39366 ac9 7E 00 00 00 
3936a aca 00 00 00 00 | 	byte	$18, $66, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3936e acb 66 00 7E 06 
39372 acc 06 3E 06 06 
39376 acd 7E 00 00 00 
3937a ace 00 00 00 00 | 	byte	$66, $00, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3937e acf 0C 18 3C 18 
39382 ad0 18 18 18 18 
39386 ad1 3C 00 00 00 
3938a ad2 00 00 00 00 | 	byte	$0c, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3938e ad3 30 18 3C 18 
39392 ad4 18 18 18 18 
39396 ad5 3C 00 00 00 
3939a ad6 00 00 00 00 | 	byte	$30, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3939e ad7 18 66 3C 18 
393a2 ad8 18 18 18 18 
393a6 ad9 3C 00 00 00 
393aa ada 00 00 00 00 | 	byte	$18, $66, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
393ae adb 66 00 3C 18 
393b2 adc 18 18 18 18 
393b6 add 3C 00 00 00 
393ba ade 00 00 00 00 | 	byte	$66, $00, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
393be adf 1E 36 66 66 
393c2 ae0 6F 66 66 36 
393c6 ae1 1E 00 00 00 
393ca ae2 00 00 00 00 | 	byte	$1e, $36, $66, $66, $6f, $66, $66, $36, $1e, $00, $00, $00, $00, $00, $00, $00
393ce ae3 8E 73 67 6F 
393d2 ae4 7B 73 63 63 
393d6 ae5 63 00 00 00 
393da ae6 00 00 00 00 | 	byte	$8e, $73, $67, $6f, $7b, $73, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
393de ae7 06 0C 3E 63 
393e2 ae8 63 63 63 63 
393e6 ae9 3E 00 00 00 
393ea aea 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
393ee aeb 30 18 3E 63 
393f2 aec 63 63 63 63 
393f6 aed 3E 00 00 00 
393fa aee 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
393fe aef 0C 33 3E 63 
39402 af0 63 63 63 63 
39406 af1 3E 00 00 00 
3940a af2 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3940e af3 8E 71 3E 63 
39412 af4 63 63 63 63 
39416 af5 3E 00 00 00 
3941a af6 00 00 00 00 | 	byte	$8e, $71, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3941e af7 63 00 3E 63 
39422 af8 63 63 63 63 
39426 af9 3E 00 00 00 
3942a afa 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3942e afb 00 00 63 36 
39432 afc 1C 1C 36 63 
39436 afd 00 00 00 00 
3943a afe 00 00 00 00 | 	byte	$00, $00, $63, $36, $1c, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00
3943e aff BE 63 73 7B 
39442 b00 6B 6F 67 63 
39446 b01 3F 00 00 00 
3944a b02 00 00 00 00 | 	byte	$be, $63, $73, $7b, $6b, $6f, $67, $63, $3f, $00, $00, $00, $00, $00, $00, $00
3944e b03 0C 18 63 63 
39452 b04 63 63 63 63 
39456 b05 3E 00 00 00 
3945a b06 00 00 00 00 | 	byte	$0c, $18, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3945e b07 18 0C 63 63 
39462 b08 63 63 63 63 
39466 b09 3E 00 00 00 
3946a b0a 00 00 00 00 | 	byte	$18, $0c, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3946e b0b 08 36 63 63 
39472 b0c 63 63 63 63 
39476 b0d 3E 00 00 00 
3947a b0e 00 00 00 00 | 	byte	$08, $36, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3947e b0f 63 00 63 63 
39482 b10 63 63 63 63 
39486 b11 3E 00 00 00 
3948a b12 00 00 00 00 | 	byte	$63, $00, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3948e b13 30 18 C3 66 
39492 b14 3C 18 18 18 
39496 b15 18 00 00 00 
3949a b16 00 00 00 00 | 	byte	$30, $18, $c3, $66, $3c, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3949e b17 03 03 3F 63 
394a2 b18 63 3F 03 03 
394a6 b19 03 00 00 00 
394aa b1a 00 00 00 00 | 	byte	$03, $03, $3f, $63, $63, $3f, $03, $03, $03, $00, $00, $00, $00, $00, $00, $00
394ae b1b 3C 66 66 66 
394b2 b1c 36 66 66 66 
394b6 b1d 36 06 06 00 
394ba b1e 00 00 00 00 | 	byte	$3c, $66, $66, $66, $36, $66, $66, $66, $36, $06, $06, $00, $00, $00, $00, $00
394be b1f 06 0C 00 3C 
394c2 b20 60 7C 66 66 
394c6 b21 7C 00 00 00 
394ca b22 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
394ce b23 60 30 00 3C 
394d2 b24 60 7C 66 66 
394d6 b25 7C 00 00 00 
394da b26 00 00 00 00 | 	byte	$60, $30, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
394de b27 18 66 00 3C 
394e2 b28 60 7C 66 66 
394e6 b29 7C 00 00 00 
394ea b2a 00 00 00 00 | 	byte	$18, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
394ee b2b 8E 71 00 3C 
394f2 b2c 60 7C 66 66 
394f6 b2d 7C 00 00 00 
394fa b2e 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
394fe b2f 00 66 00 3C 
39502 b30 60 7C 66 66 
39506 b31 7C 00 00 00 
3950a b32 00 00 00 00 | 	byte	$00, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3950e b33 18 24 18 3C 
39512 b34 60 7C 66 66 
39516 b35 7C 00 00 00 
3951a b36 00 00 00 00 | 	byte	$18, $24, $18, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3951e b37 00 00 00 7E 
39522 b38 D8 FE 1B 1B 
39526 b39 EE 00 00 00 
3952a b3a 00 00 00 00 | 	byte	$00, $00, $00, $7e, $d8, $fe, $1b, $1b, $ee, $00, $00, $00, $00, $00, $00, $00
3952e b3b 00 00 00 3C 
39532 b3c 06 06 06 06 
39536 b3d 3C 18 0C 00 
3953a b3e 00 00 00 00 | 	byte	$00, $00, $00, $3c, $06, $06, $06, $06, $3c, $18, $0c, $00, $00, $00, $00, $00
3953e b3f 06 0C 00 3C 
39542 b40 66 7E 06 06 
39546 b41 3C 00 00 00 
3954a b42 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3954e b43 60 30 00 3C 
39552 b44 66 7E 06 06 
39556 b45 3C 00 00 00 
3955a b46 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3955e b47 18 66 00 3C 
39562 b48 66 7E 06 06 
39566 b49 3C 00 00 00 
3956a b4a 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3956e b4b 00 66 00 3C 
39572 b4c 66 7E 06 06 
39576 b4d 3C 00 00 00 
3957a b4e 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3957e b4f 0C 18 00 18 
39582 b50 18 18 18 18 
39586 b51 30 00 00 00 
3958a b52 00 00 00 00 | 	byte	$0c, $18, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3958e b53 18 0C 00 0C 
39592 b54 0C 0C 0C 0C 
39596 b55 18 00 00 00 
3959a b56 00 00 00 00 | 	byte	$18, $0c, $00, $0c, $0c, $0c, $0c, $0c, $18, $00, $00, $00, $00, $00, $00, $00
3959e b57 18 66 00 18 
395a2 b58 18 18 18 18 
395a6 b59 30 00 00 00 
395aa b5a 00 00 00 00 | 	byte	$18, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
395ae b5b 00 66 00 18 
395b2 b5c 18 18 18 18 
395b6 b5d 30 00 00 00 
395ba b5e 00 00 00 00 | 	byte	$00, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
395be b5f 03 06 3F 18 
395c2 b60 3C 66 66 66 
395c6 b61 3C 00 00 00 
395ca b62 00 00 00 00 | 	byte	$03, $06, $3f, $18, $3c, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
395ce b63 8E 71 00 3E 
395d2 b64 66 66 66 66 
395d6 b65 66 00 00 00 
395da b66 00 00 00 00 | 	byte	$8e, $71, $00, $3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
395de b67 06 0C 00 3C 
395e2 b68 66 66 66 66 
395e6 b69 3C 00 00 00 
395ea b6a 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
395ee b6b 60 30 00 3C 
395f2 b6c 66 66 66 66 
395f6 b6d 3C 00 00 00 
395fa b6e 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
395fe b6f 18 66 00 3C 
39602 b70 66 66 66 66 
39606 b71 3C 00 00 00 
3960a b72 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3960e b73 8E 71 00 3C 
39612 b74 66 66 66 66 
39616 b75 3C 00 00 00 
3961a b76 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3961e b77 00 66 00 3C 
39622 b78 66 66 66 66 
39626 b79 3C 00 00 00 
3962a b7a 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3962e b7b 00 18 18 00 
39632 b7c 7E 00 18 18 
39636 b7d 00 00 00 00 
3963a b7e 00 00 00 00 | 	byte	$00, $18, $18, $00, $7e, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3963e b7f 00 00 00 7E 
39642 b80 73 7B 6F 67 
39646 b81 3F 00 00 00 
3964a b82 00 00 00 00 | 	byte	$00, $00, $00, $7e, $73, $7b, $6f, $67, $3f, $00, $00, $00, $00, $00, $00, $00
3964e b83 0C 18 00 66 
39652 b84 66 66 66 66 
39656 b85 7C 00 00 00 
3965a b86 00 00 00 00 | 	byte	$0c, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3965e b87 30 18 00 66 
39662 b88 66 66 66 66 
39666 b89 7C 00 00 00 
3966a b8a 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3966e b8b 18 66 00 66 
39672 b8c 66 66 66 66 
39676 b8d 7C 00 00 00 
3967a b8e 00 00 00 00 | 	byte	$18, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3967e b8f 00 66 00 66 
39682 b90 66 66 66 66 
39686 b91 7C 00 00 00 
3968a b92 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3968e b93 30 18 00 66 
39692 b94 66 66 66 3C 
39696 b95 18 0C 06 00 
3969a b96 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
3969e b97 06 06 06 3E 
396a2 b98 66 66 66 3E 
396a6 b99 06 06 06 00 
396aa b9a 00 00 00 00 | 	byte	$06, $06, $06, $3e, $66, $66, $66, $3e, $06, $06, $06, $00, $00, $00, $00, $00
396ae b9b 00 66 00 66 
396b2 b9c 66 66 66 3C 
396b6 b9d 18 0C 06 00 
396ba b9e 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
396be b9f 00 7E 66 66 
396c2 ba0 66 66 66 66 
396c6 ba1 66 7E 00 00 
396ca ba2 00 00 00 00 | 	byte	$00, $7e, $66, $66, $66, $66, $66, $66, $66, $7e, $00, $00, $00, $00, $00, $00
396ce ba3 00 00 00 00 
      ...             
398d6 c25 00 00 00 00 
398da c26 00 00       | 	byte	$00[526]
398dc c27 00 00 00 00 
398e0 c28 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
398e1 c28 80 00 00 00 
398e5 c29 00 80 00 00 
398e9 c2a 80 80 00 00 
398ed c2b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
398f1 c2c 80 00 80 00 
398f5 c2d 00 40 80 00 
398f9 c2e AA AA AA 00 
398fd c2f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
39901 c30 FF 00 00 00 
39905 c31 00 FF 00 00 
39909 c32 FF FF 00 00 
3990d c33 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
39911 c34 FF 00 FF 00 
39915 c35 00 FF FF 00 
39919 c36 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3991c c37 00 00 00 00 
39920 c38 00          | ataripalette   file "ataripalettep2.def"
39921 c38 11 11 11 00 
39925 c39 22 22 22 00 
39929 c3a 33 33 33 00 
3992d c3b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
39931 c3c 55 55 55 00 
39935 c3d 66 66 66 00 
39939 c3e 77 77 77 00 
3993d c3f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
39941 c40 99 99 99 00 
39945 c41 AA AA AA 00 
39949 c42 BB BB BB 00 
3994d c43 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
39951 c44 DD DD DD 00 
39955 c45 EE EE EE 00 
39959 c46 FF FF FF 00 
3995d c47 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
39961 c48 00 14 40 00 
39965 c49 00 1E 60 00 
39969 c4a 00 28 80 00 
3996d c4b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
39971 c4c 00 3C BF 00 
39975 c4d 00 46 DF 00 
39979 c4e 00 50 FF 00 
3997d c4f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
39981 c50 39 77 FF 00 
39985 c51 55 8A FF 00 
39989 c52 71 9E FF 00 
3998d c53 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
39991 c54 AA C5 FF 00 
39995 c55 C6 D8 FF 00 
39999 c56 E3 EC FF 00 
3999d c57 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
399a1 c58 00 00 40 00 
399a5 c59 00 00 60 00 
399a9 c5a 00 00 80 00 
399ad c5b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
399b1 c5c 00 00 BF 00 
399b5 c5d 00 00 DF 00 
399b9 c5e 00 00 FF 00 
399bd c5f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
399c1 c60 39 39 FF 00 
399c5 c61 55 55 FF 00 
399c9 c62 71 71 FF 00 
399cd c63 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
399d1 c64 AA AA FF 00 
399d5 c65 C6 C6 FF 00 
399d9 c66 E3 E3 FF 00 
399dd c67 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
399e1 c68 20 00 40 00 
399e5 c69 30 00 60 00 
399e9 c6a 40 00 80 00 
399ed c6b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
399f1 c6c 60 00 BF 00 
399f5 c6d 70 00 DF 00 
399f9 c6e 80 00 FF 00 
399fd c6f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
39a01 c70 9C 39 FF 00 
39a05 c71 AA 55 FF 00 
39a09 c72 B8 71 FF 00 
39a0d c73 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
39a11 c74 D5 AA FF 00 
39a15 c75 E3 C6 FF 00 
39a19 c76 F1 E3 FF 00 
39a1d c77 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
39a21 c78 40 00 40 00 
39a25 c79 60 00 60 00 
39a29 c7a 80 00 80 00 
39a2d c7b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
39a31 c7c BF 00 BF 00 
39a35 c7d DF 00 DF 00 
39a39 c7e FF 00 FF 00 
39a3d c7f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
39a41 c80 FF 39 FF 00 
39a45 c81 FF 55 FF 00 
39a49 c82 FF 71 FF 00 
39a4d c83 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
39a51 c84 FF AA FF 00 
39a55 c85 FF C6 FF 00 
39a59 c86 FF E3 FF 00 
39a5d c87 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
39a61 c88 40 00 20 00 
39a65 c89 60 00 30 00 
39a69 c8a 80 00 40 00 
39a6d c8b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
39a71 c8c BF 00 60 00 
39a75 c8d DF 00 70 00 
39a79 c8e FF 00 80 00 
39a7d c8f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
39a81 c90 FF 39 9C 00 
39a85 c91 FF 55 AA 00 
39a89 c92 FF 71 B8 00 
39a8d c93 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
39a91 c94 FF AA D5 00 
39a95 c95 FF C6 E3 00 
39a99 c96 FF E3 F1 00 
39a9d c97 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
39aa1 c98 40 00 00 00 
39aa5 c99 60 00 00 00 
39aa9 c9a 80 00 00 00 
39aad c9b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
39ab1 c9c BF 00 00 00 
39ab5 c9d DF 00 00 00 
39ab9 c9e FF 00 00 00 
39abd c9f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
39ac1 ca0 FF 39 39 00 
39ac5 ca1 FF 55 55 00 
39ac9 ca2 FF 71 71 00 
39acd ca3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
39ad1 ca4 FF AA AA 00 
39ad5 ca5 FF C6 C6 00 
39ad9 ca6 FF E3 E3 00 
39add ca7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
39ae1 ca8 40 10 00 00 
39ae5 ca9 60 18 00 00 
39ae9 caa 80 20 00 00 
39aed cab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
39af1 cac BF 30 00 00 
39af5 cad DF 38 00 00 
39af9 cae FF 40 00 00 
39afd caf FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
39b01 cb0 FF 6A 39 00 
39b05 cb1 FF 80 55 00 
39b09 cb2 FF 95 71 00 
39b0d cb3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
39b11 cb4 FF BF AA 00 
39b15 cb5 FF D5 C6 00 
39b19 cb6 FF EA E3 00 
39b1d cb7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
39b21 cb8 40 20 00 00 
39b25 cb9 60 30 00 00 
39b29 cba 80 40 00 00 
39b2d cbb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
39b31 cbc BF 60 00 00 
39b35 cbd DF 70 00 00 
39b39 cbe FF 80 00 00 
39b3d cbf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
39b41 cc0 FF 9C 39 00 
39b45 cc1 FF AA 55 00 
39b49 cc2 FF B8 71 00 
39b4d cc3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
39b51 cc4 FF D5 AA 00 
39b55 cc5 FF E3 C6 00 
39b59 cc6 FF F1 E3 00 
39b5d cc7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
39b61 cc8 40 30 00 00 
39b65 cc9 60 48 00 00 
39b69 cca 80 60 00 00 
39b6d ccb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
39b71 ccc BF 90 00 00 
39b75 ccd DF A8 00 00 
39b79 cce FF C0 00 00 
39b7d ccf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
39b81 cd0 FF CE 39 00 
39b85 cd1 FF D5 55 00 
39b89 cd2 FF DC 71 00 
39b8d cd3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
39b91 cd4 FF EA AA 00 
39b95 cd5 FF F1 C6 00 
39b99 cd6 FF F8 E3 00 
39b9d cd7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
39ba1 cd8 30 40 00 00 
39ba5 cd9 48 60 00 00 
39ba9 cda 60 80 00 00 
39bad cdb 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
39bb1 cdc 90 BF 00 00 
39bb5 cdd A8 DF 00 00 
39bb9 cde C0 FF 00 00 
39bbd cdf C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
39bc1 ce0 CE FF 39 00 
39bc5 ce1 D5 FF 55 00 
39bc9 ce2 DC FF 71 00 
39bcd ce3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
39bd1 ce4 EA FF AA 00 
39bd5 ce5 F1 FF C6 00 
39bd9 ce6 F8 FF E3 00 
39bdd ce7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
39be1 ce8 00 40 00 00 
39be5 ce9 00 60 00 00 
39be9 cea 00 80 00 00 
39bed ceb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
39bf1 cec 00 BF 00 00 
39bf5 ced 00 DF 00 00 
39bf9 cee 00 FF 00 00 
39bfd cef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
39c01 cf0 39 FF 39 00 
39c05 cf1 55 FF 55 00 
39c09 cf2 71 FF 71 00 
39c0d cf3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
39c11 cf4 AA FF AA 00 
39c15 cf5 C6 FF C6 00 
39c19 cf6 E3 FF E3 00 
39c1d cf7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
39c21 cf8 00 40 14 00 
39c25 cf9 00 60 1E 00 
39c29 cfa 00 80 28 00 
39c2d cfb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
39c31 cfc 00 BF 3C 00 
39c35 cfd 00 DF 46 00 
39c39 cfe 00 FF 50 00 
39c3d cff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
39c41 d00 39 FF 77 00 
39c45 d01 55 FF 8A 00 
39c49 d02 71 FF 9E 00 
39c4d d03 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
39c51 d04 AA FF C5 00 
39c55 d05 C6 FF D8 00 
39c59 d06 E3 FF EC 00 
39c5d d07 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
39c61 d08 00 40 28 00 
39c65 d09 00 60 3C 00 
39c69 d0a 00 80 50 00 
39c6d d0b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
39c71 d0c 00 BF 78 00 
39c75 d0d 00 DF 8C 00 
39c79 d0e 00 FF A0 00 
39c7d d0f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
39c81 d10 39 FF B5 00 
39c85 d11 55 FF C0 00 
39c89 d12 71 FF CA 00 
39c8d d13 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
39c91 d14 AA FF DF 00 
39c95 d15 C6 FF EA 00 
39c99 d16 E3 FF F4 00 
39c9d d17 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
39ca1 d18 00 40 40 00 
39ca5 d19 00 60 60 00 
39ca9 d1a 00 80 80 00 
39cad d1b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
39cb1 d1c 00 BF BF 00 
39cb5 d1d 00 DF DF 00 
39cb9 d1e 00 FF FF 00 
39cbd d1f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
39cc1 d20 39 FF FF 00 
39cc5 d21 55 FF FF 00 
39cc9 d22 71 FF FF 00 
39ccd d23 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
39cd1 d24 AA FF FF 00 
39cd5 d25 C6 FF FF 00 
39cd9 d26 E3 FF FF 00 
39cdd d27 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
39ce1 d28 00 28 40 00 
39ce5 d29 00 3C 60 00 
39ce9 d2a 00 50 80 00 
39ced d2b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
39cf1 d2c 00 78 BF 00 
39cf5 d2d 00 8C DF 00 
39cf9 d2e 00 A0 FF 00 
39cfd d2f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
39d01 d30 39 B5 FF 00 
39d05 d31 55 C0 FF 00 
39d09 d32 71 CA FF 00 
39d0d d33 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
39d11 d34 AA DF FF 00 
39d15 d35 C6 EA FF 00 
39d19 d36 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
39d1c d37 00 00 00 00 
39d20 d38 00          | ataripalette2  file "ataripalettep2.def"
39d21 d38 11 11 11 00 
39d25 d39 22 22 22 00 
39d29 d3a 33 33 33 00 
39d2d d3b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
39d31 d3c 55 55 55 00 
39d35 d3d 66 66 66 00 
39d39 d3e 77 77 77 00 
39d3d d3f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
39d41 d40 99 99 99 00 
39d45 d41 AA AA AA 00 
39d49 d42 BB BB BB 00 
39d4d d43 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
39d51 d44 DD DD DD 00 
39d55 d45 EE EE EE 00 
39d59 d46 FF FF FF 00 
39d5d d47 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
39d61 d48 00 14 40 00 
39d65 d49 00 1E 60 00 
39d69 d4a 00 28 80 00 
39d6d d4b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
39d71 d4c 00 3C BF 00 
39d75 d4d 00 46 DF 00 
39d79 d4e 00 50 FF 00 
39d7d d4f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
39d81 d50 39 77 FF 00 
39d85 d51 55 8A FF 00 
39d89 d52 71 9E FF 00 
39d8d d53 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
39d91 d54 AA C5 FF 00 
39d95 d55 C6 D8 FF 00 
39d99 d56 E3 EC FF 00 
39d9d d57 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
39da1 d58 00 00 40 00 
39da5 d59 00 00 60 00 
39da9 d5a 00 00 80 00 
39dad d5b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
39db1 d5c 00 00 BF 00 
39db5 d5d 00 00 DF 00 
39db9 d5e 00 00 FF 00 
39dbd d5f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
39dc1 d60 39 39 FF 00 
39dc5 d61 55 55 FF 00 
39dc9 d62 71 71 FF 00 
39dcd d63 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
39dd1 d64 AA AA FF 00 
39dd5 d65 C6 C6 FF 00 
39dd9 d66 E3 E3 FF 00 
39ddd d67 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
39de1 d68 20 00 40 00 
39de5 d69 30 00 60 00 
39de9 d6a 40 00 80 00 
39ded d6b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
39df1 d6c 60 00 BF 00 
39df5 d6d 70 00 DF 00 
39df9 d6e 80 00 FF 00 
39dfd d6f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
39e01 d70 9C 39 FF 00 
39e05 d71 AA 55 FF 00 
39e09 d72 B8 71 FF 00 
39e0d d73 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
39e11 d74 D5 AA FF 00 
39e15 d75 E3 C6 FF 00 
39e19 d76 F1 E3 FF 00 
39e1d d77 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
39e21 d78 40 00 40 00 
39e25 d79 60 00 60 00 
39e29 d7a 80 00 80 00 
39e2d d7b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
39e31 d7c BF 00 BF 00 
39e35 d7d DF 00 DF 00 
39e39 d7e FF 00 FF 00 
39e3d d7f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
39e41 d80 FF 39 FF 00 
39e45 d81 FF 55 FF 00 
39e49 d82 FF 71 FF 00 
39e4d d83 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
39e51 d84 FF AA FF 00 
39e55 d85 FF C6 FF 00 
39e59 d86 FF E3 FF 00 
39e5d d87 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
39e61 d88 40 00 20 00 
39e65 d89 60 00 30 00 
39e69 d8a 80 00 40 00 
39e6d d8b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
39e71 d8c BF 00 60 00 
39e75 d8d DF 00 70 00 
39e79 d8e FF 00 80 00 
39e7d d8f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
39e81 d90 FF 39 9C 00 
39e85 d91 FF 55 AA 00 
39e89 d92 FF 71 B8 00 
39e8d d93 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
39e91 d94 FF AA D5 00 
39e95 d95 FF C6 E3 00 
39e99 d96 FF E3 F1 00 
39e9d d97 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
39ea1 d98 40 00 00 00 
39ea5 d99 60 00 00 00 
39ea9 d9a 80 00 00 00 
39ead d9b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
39eb1 d9c BF 00 00 00 
39eb5 d9d DF 00 00 00 
39eb9 d9e FF 00 00 00 
39ebd d9f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
39ec1 da0 FF 39 39 00 
39ec5 da1 FF 55 55 00 
39ec9 da2 FF 71 71 00 
39ecd da3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
39ed1 da4 FF AA AA 00 
39ed5 da5 FF C6 C6 00 
39ed9 da6 FF E3 E3 00 
39edd da7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
39ee1 da8 40 10 00 00 
39ee5 da9 60 18 00 00 
39ee9 daa 80 20 00 00 
39eed dab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
39ef1 dac BF 30 00 00 
39ef5 dad DF 38 00 00 
39ef9 dae FF 40 00 00 
39efd daf FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
39f01 db0 FF 6A 39 00 
39f05 db1 FF 80 55 00 
39f09 db2 FF 95 71 00 
39f0d db3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
39f11 db4 FF BF AA 00 
39f15 db5 FF D5 C6 00 
39f19 db6 FF EA E3 00 
39f1d db7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
39f21 db8 40 20 00 00 
39f25 db9 60 30 00 00 
39f29 dba 80 40 00 00 
39f2d dbb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
39f31 dbc BF 60 00 00 
39f35 dbd DF 70 00 00 
39f39 dbe FF 80 00 00 
39f3d dbf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
39f41 dc0 FF 9C 39 00 
39f45 dc1 FF AA 55 00 
39f49 dc2 FF B8 71 00 
39f4d dc3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
39f51 dc4 FF D5 AA 00 
39f55 dc5 FF E3 C6 00 
39f59 dc6 FF F1 E3 00 
39f5d dc7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
39f61 dc8 40 30 00 00 
39f65 dc9 60 48 00 00 
39f69 dca 80 60 00 00 
39f6d dcb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
39f71 dcc BF 90 00 00 
39f75 dcd DF A8 00 00 
39f79 dce FF C0 00 00 
39f7d dcf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
39f81 dd0 FF CE 39 00 
39f85 dd1 FF D5 55 00 
39f89 dd2 FF DC 71 00 
39f8d dd3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
39f91 dd4 FF EA AA 00 
39f95 dd5 FF F1 C6 00 
39f99 dd6 FF F8 E3 00 
39f9d dd7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
39fa1 dd8 30 40 00 00 
39fa5 dd9 48 60 00 00 
39fa9 dda 60 80 00 00 
39fad ddb 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
39fb1 ddc 90 BF 00 00 
39fb5 ddd A8 DF 00 00 
39fb9 dde C0 FF 00 00 
39fbd ddf C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
39fc1 de0 CE FF 39 00 
39fc5 de1 D5 FF 55 00 
39fc9 de2 DC FF 71 00 
39fcd de3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
39fd1 de4 EA FF AA 00 
39fd5 de5 F1 FF C6 00 
39fd9 de6 F8 FF E3 00 
39fdd de7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
39fe1 de8 00 40 00 00 
39fe5 de9 00 60 00 00 
39fe9 dea 00 80 00 00 
39fed deb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
39ff1 dec 00 BF 00 00 
39ff5 ded 00 DF 00 00 
39ff9 dee 00 FF 00 00 
39ffd def 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3a001 df0 39 FF 39 00 
3a005 df1 55 FF 55 00 
3a009 df2 71 FF 71 00 
3a00d df3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3a011 df4 AA FF AA 00 
3a015 df5 C6 FF C6 00 
3a019 df6 E3 FF E3 00 
3a01d df7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3a021 df8 00 40 14 00 
3a025 df9 00 60 1E 00 
3a029 dfa 00 80 28 00 
3a02d dfb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3a031 dfc 00 BF 3C 00 
3a035 dfd 00 DF 46 00 
3a039 dfe 00 FF 50 00 
3a03d dff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3a041 e00 39 FF 77 00 
3a045 e01 55 FF 8A 00 
3a049 e02 71 FF 9E 00 
3a04d e03 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3a051 e04 AA FF C5 00 
3a055 e05 C6 FF D8 00 
3a059 e06 E3 FF EC 00 
3a05d e07 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3a061 e08 00 40 28 00 
3a065 e09 00 60 3C 00 
3a069 e0a 00 80 50 00 
3a06d e0b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3a071 e0c 00 BF 78 00 
3a075 e0d 00 DF 8C 00 
3a079 e0e 00 FF A0 00 
3a07d e0f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3a081 e10 39 FF B5 00 
3a085 e11 55 FF C0 00 
3a089 e12 71 FF CA 00 
3a08d e13 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3a091 e14 AA FF DF 00 
3a095 e15 C6 FF EA 00 
3a099 e16 E3 FF F4 00 
3a09d e17 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3a0a1 e18 00 40 40 00 
3a0a5 e19 00 60 60 00 
3a0a9 e1a 00 80 80 00 
3a0ad e1b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3a0b1 e1c 00 BF BF 00 
3a0b5 e1d 00 DF DF 00 
3a0b9 e1e 00 FF FF 00 
3a0bd e1f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3a0c1 e20 39 FF FF 00 
3a0c5 e21 55 FF FF 00 
3a0c9 e22 71 FF FF 00 
3a0cd e23 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3a0d1 e24 AA FF FF 00 
3a0d5 e25 C6 FF FF 00 
3a0d9 e26 E3 FF FF 00 
3a0dd e27 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3a0e1 e28 00 28 40 00 
3a0e5 e29 00 3C 60 00 
3a0e9 e2a 00 50 80 00 
3a0ed e2b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3a0f1 e2c 00 78 BF 00 
3a0f5 e2d 00 8C DF 00 
3a0f9 e2e 00 A0 FF 00 
3a0fd e2f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3a101 e30 39 B5 FF 00 
3a105 e31 55 C0 FF 00 
3a109 e32 71 CA FF 00 
3a10d e33 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3a111 e34 AA DF FF 00 
3a115 e35 C6 EA FF 00 
3a119 e36 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3a11c e37             | 
3a11c e37             | '**********************************************************************************
3a11c e37             | '
3a11c e37             | '        Timings and colors definitions
3a11c e37             | '
3a11c e37             | '**********************************************************************************
3a11c e37             | 
3a11c e37             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3a11c e37 08 00 00 00 
3a120 e38 3C 00 00 00 
3a124 e39 08 00 00 00 
3a128 e3a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3a12c e3b 07 00 00 00 
3a130 e3c 04 00 00 00 
3a134 e3d 01 00 00 00 
3a138 e3e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3a13c e3f 58 02 00 00 
3a140 e40 20 9E 4B 14 
3a144 e41 FB A8 9E 01 
3a148 e42 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3a14c e43 00 00 00 00 
3a150 e44 C0 00 00 00 
3a154 e45 00 00 00 00 
3a158 e46 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a15c e47             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3a15c e47 00 75 C7 97 
3a160 e48 27 47 F6 0A 
3a164 e49 05 79 CB 9B 
3a168 e4a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3a16c e4b             | 
3a16c e4b             | ''--------  Initialization  ----------------------------------------------------------------
3a16c e4b             | 
3a16c e4b 28 0C 64 FD | hdmi            setq    #6
3a170 e4c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3a174 e4d 28 10 64 FD |                 setq    #8
3a178 e4e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3a17c e4f             | 
3a17c e4f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3a180 e50 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3a184 e51 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3a188 e52 D6 C6 01 F1 |                 add     t1,hbase
3a18c e53 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3a190 e54 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3a194 e55 7B 0B 80 5F 
3a198 e56 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3a19c e57 66 66 86 FF 
3a1a0 e58 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3a1a4 e59             | '
3a1a4 e59 D6 C6 01 F6 |                 mov 	t1,hbase			   '
3a1a8 e5a 11 C6 65 F0 |                 shl 	t1,#17                             '
3a1ac e5b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3a1b0 e5c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3a1b4 e5d             | 
3a1b4 e5d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3a1b8 e5e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3a1bc e5f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3a1c0 e60             | 
3a1c0 e60             | ''--------  frame rendering main loop  ---------------------------------------------------
3a1c0 e60             | 
3a1c0 e60 28 06 64 FD | p101            setq 	#3
3a1c4 e61 00 A5 05 FB | 		rdlong  vblankptr,ptra
3a1c8 e62 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3a1cc e63 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3a1d0 e64 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3a1d4 e65 00 A0 05 F6 |                 mov     dlinum, #0
3a1d8 e66 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3a1dc e67 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3a1e0 e68             | 
3a1e0 e68             | 
3a1e0 e68 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3a1e4 e69 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3a1e8 e6a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3a1ec e6b             |                 
3a1ec e6b             | 
3a1ec e6b             | 
3a1ec e6b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3a1ec e6b             |   
3a1ec e6b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3a1f0 e6c 29 FE 65 3D |          if_nc  setq2   #255
3a1f4 e6d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3a1f8 e6e             | 
3a1f8 e6e             | '' -----   up porch (before the picture)
3a1f8 e6e             | 
3a1f8 e6e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3a1fc e6f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3a200 e70 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3a204 e71 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3a208 e72             |  
3a208 e72             |    
3a208 e72             |  
3a208 e72 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3a20c e73 E2 8C B1 FC |                 xzero   m_sn,hsync1
3a210 e74 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3a214 e75 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3a218 e76 E1 90 C1 FC |                 xcont   m_vi,hsync0
3a21c e77 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3a220 e78             | 
3a220 e78 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3a224 e79 E2 8C B1 FC |                 xzero   m_sn,hsync1
3a228 e7a 48 00 B0 FD | 		call    #dli
3a22c e7b E1 8E C1 FC |                 xcont   m_bv,hsync0     
3a230 e7c E1 90 C1 FC |                 xcont   m_vi,hsync0
3a234 e7d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3a238 e7e             |                 	
3a238 e7e             |                 
3a238 e7e             | 
3a238 e7e             |  
3a238 e7e             | '' ------- the main screen drawing starts here
3a238 e7e             | 
3a238 e7e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3a23c e7f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3a240 e80 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3a244 e81 E1 8E C1 FC |                 xcont   m_bv,hsync0
3a248 e82 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3a24c e83 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3a250 e84 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3a254 e85             |               
3a254 e85             | 
3a254 e85 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3a258 e86 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3a25c e87             | 
3a25c e87             | ' ---------------- All visible lines displayed now, start vblank  
3a25c e87             | 
3a25c e87 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3a260 e88 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3a264 e89 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3a268 e8a C3 C4 01 F6 |                 mov     hsync1,sync_223
3a26c e8b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3a270 e8c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3a274 e8d             | 
3a274 e8d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3a274 e8d             | 
3a274 e8d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3a274 e8d             | 
3a274 e8d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3a278 e8e             | 
3a278 e8e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3a27c e8f 04 B8 05 A1 |     if_z        add     dlptr2,#4
3a280 e90 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3a284 e91             | 
3a284 e91 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3a288 e92 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3a28c e93 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3a290 e94 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3a294 e95 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3a298 e96             | 
3a298 e96 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3a29c e97 DD C6 41 F8 |                 getnib  t1,dl,#0
3a2a0 e98 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3a2a4 e99 70 00 90 AD |     if_z        jmp     #preload
3a2a8 e9a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3a2ac e9b 94 00 90 AD |     if_z        jmp     #preload2
3a2b0 e9c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3a2b4 e9d 0C 00 90 AD |     if_z        jmp     #p390
3a2b8 e9e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3a2bc e9f 28 00 90 AD |     if_z        jmp     #p391  
3a2c0 ea0             | 
3a2c0 ea0 2D 00 64 FD | p308            ret
3a2c4 ea1             |    
3a2c4 ea1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3a2c8 ea2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3a2cc ea3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3a2d0 ea4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3a2d4 ea5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3a2d8 ea6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3a2dc ea7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3a2e0 ea8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3a2e4 ea9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3a2e8 eaa             |  
3a2e8 eaa             | '' --------  Reload palette. To do 
3a2e8 eaa             | 
3a2e8 eaa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3a2ec eab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3a2f0 eac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3a2f4 ead 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3a2f8 eae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3a2fc eaf E0 00 00 FB |         	rdlong  $000, framebuf2         	
3a300 eb0 70 FF 9F FD |         	jmp     #dli                
3a304 eb1             |       
3a304 eb1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3a304 eb1             | 
3a304 eb1             | 
3a304 eb1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3a304 eb1             | 
3a304 eb1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3a308 eb2 E2 8C B1 FC |                 xzero   m_sn,hsync1
3a30c eb3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3a310 eb4 E1 90 C1 FC |                 xcont   m_vi,hsync0
3a314 eb5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3a318 eb6             |         
3a318 eb6             | '' -------------- Preload a line from PSRAM        
3a318 eb6             |         
3a318 eb6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3a31c eb7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3a320 eb8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3a324 eb9 DE B4 01 F6 |                 mov     buf1,buf1c
3a328 eba 03 A0 05 F7 |                 incmod  dlinum,#3
3a32c ebb             | 
3a32c ebb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3a330 ebc 32 B7 01 F6 |                 mov     buf2,a1024
3a334 ebd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3a338 ebe 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3a33c ebf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3a340 ec0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3a344 ec1             |  
3a344 ec1             |  
3a344 ec1             | preload2      '  incmod  dlinum,#3
3a344 ec1 04 C0 45 F0 |                 shr 	framebuf2,#4
3a348 ec2 ED B2 01 F6 |                 mov 	cmd,affffffff
3a34c ec3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3a350 ec4 28 02 64 FD |                 setq	#1
3a354 ec5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3a358 ec6             |                 
3a358 ec6             | 
3a358 ec6             | '' -------------- Draw sprites
3a358 ec6             | 
3a358 ec6 CF 5C 02 F6 | sprite          mov t8,frames
3a35c ec7 10 5C 0E F5 | 		and t8,#16 wz
3a360 ec8 11 48 06 F6 |                 mov spritenum, #17			' 16 +2 sprites. Todo: this should be a parameter
3a364 ec9 10 48 06 A6 | 	if_z    mov spritenum, #16	
3a368 eca             | 		
3a368 eca             | 
3a368 eca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3a36c ecb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3a370 ecc EF 56 96 F9 |                 alts    t5,#sprite1xy
3a374 ecd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3a378 ece 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3a37c ecf EF 56 96 F9 |                 alts    t5,#sprite1xy
3a380 ed0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3a384 ed1 0F 4C 66 F7 |                 signx	sprite_x,#15
3a388 ed2 F0 56 96 F9 |                 alts    t5,#sprite1wh
3a38c ed3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3a390 ed4 01 52 86 F1 |                 sub     sprite_h,#1
3a394 ed5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3a398 ed6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3a39c ed7             | 
3a39c ed7             | 
3a39c ed7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3a3a0 ed8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3a3a4 ed9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3a3a8 eda B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3a3ac edb 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3a3b0 edc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3a3b4 edd 00 5E 06 F6 |                 mov 	t9,#0
3a3b8 ede 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3a3bc edf 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3a3c0 ee0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3a3c4 ee1             |      
3a3c4 ee1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3a3c8 ee2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3a3cc ee3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3a3d0 ee4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3a3d4 ee5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3a3d8 ee6             |                 
3a3d8 ee6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3a3dc ee7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3a3e0 ee8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3a3e4 ee9             |   		
3a3e4 ee9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3a3e8 eea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3a3ec eeb             | 
3a3ec eeb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3a3f0 eec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3a3f4 eed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3a3f8 eee             |  
3a3f8 eee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3a3fc eef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3a400 ef0 10 00 90 CD |      if_c 	jmp     #p899		
3a404 ef1             | 	
3a404 ef1             | 	
3a404 ef1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3a408 ef2 28 CD 01 F1 | 		add	t4,sprite_w
3a40c ef3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3a410 ef4             | 
3a410 ef4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3a414 ef5             | 
3a414 ef5 28 59 02 F6 | p899		mov 	t6,sprite_w
3a418 ef6 01 58 86 F1 | 	 	sub     t6,#1
3a41c ef7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3a420 ef8             | 
3a420 ef8 28 58 62 FD |                 setq   	t6
3a424 ef9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3a428 efa 28 5D 02 F6 |                 mov t8,sprite_w
3a42c efb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3a430 efc 24 00 90 AD |         if_z    jmp #p898
3a434 efd             |          
3a434 efd             |         
3a434 efd 70 5F 06 F6 |                 mov  t9,#368
3a438 efe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3a43c eff             | 
3a43c eff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3a440 f00 08 5C 06 FA |                 mul t8,#8				' bits to shr
3a444 f01 FF FF 7F FF 
3a448 f02 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3a44c f03 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3a450 f04 00 5E 8E F9 |                 altd t9,#0				' and mask 
3a454 f05 2D 01 00 F5 |                 and 0-0, t7
3a458 f06             |                
3a458 f06             | 
3a458 f06 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3a45c f07 E5 E0 7A FA |                 wmlong 368,t3				
3a460 f08             |                 
3a460 f08 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3a464 f09 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3a468 f0a 2D 00 64 FD |                 ret
3a46c f0b             | 	
3a46c f0b             | 	
3a46c f0b             |                
3a46c f0b             |  
3a46c f0b             | '' -------------- Graphics line ------------------------------------------------------------
3a46c f0b             |  
3a46c f0b             | 
3a46c f0b             | '' consts and vars
3a46c f0b             | 
3a46c f0b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3a470 f0c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3a474 f0d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3a478 f0e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3a47c f0f             | 
3a47c f0f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3a480 f10             | 
3a480 f10             | '------ these longs will be set by setmode function
3a480 f10             | 
3a480 f10 00 00 00 00 | m_bs            long    0        'blanks before sync
3a484 f11 00 00 00 00 | m_sn            long    0        'sync
3a488 f12 00 00 00 00 | m_bv            long    0        'blanks before visible
3a48c f13 00 00 00 00 | m_vi            long    0        'visible pixels #
3a490 f14             | 'm_border        long    0        'left/right borders
3a490 f14 00 00 00 00 | i_upporch       long    0        'up porch lines
3a494 f15 00 00 00 00 | i_vsync         long    0        'vsync lines
3a498 f16 00 00 00 00 | i_downporch     long    0        'down porch lines
3a49c f17 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3a4a0 f18 00 00 00 00 | i_totalvis      long    0
3a4a4 f19             | 
3a4a4 f19             | '-------------------------------------
3a4a4 f19             |  
3a4a4 f19 00 00 00 00 | linenum         long    0
3a4a8 f1a 00 00 00 00 | frames          long    0
3a4ac f1b 00 00 00 00 | dlinum long 0
3a4b0 f1c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3a4b4 f1d             | 
3a4b4 f1d 00 00 00 00 | vblankptr       long    0
3a4b8 f1e 00 00 00 00 | modeptr         long    0
3a4bc f1f 00 00 00 00 | paletteptr      long    0
3a4c0 f20 00 00 00 00 | dlptr           long    0
3a4c4 f21 01 00 00 00 | hbase           long    1
3a4c8 f22 00 00 00 00 | mailbox         long    0
3a4cc f23 00 00 00 00 | spriteptr          long 0
3a4d0 f24             | 
3a4d0 f24 00 00 00 00 | cmd             long    0
3a4d4 f25 00 EC 07 00 | buf1            long    $80000-1024-4096
3a4d8 f26 00 04 00 00 | buf2            long    1024
3a4dc f27 01 00 00 00 | dlptr2          long    1
3a4e0 f28 01 00 00 00 | dl              long    1
3a4e4 f29             | 
3a4e4 f29 00 00 00 00 | buf1c long 0
3a4e8 f2a 00 EC 07 00 | buf1d            long    $80000-1024-4096
3a4ec f2b 01 00 00 00 | framebuf2       long    1
3a4f0 f2c 01 00 00 00 | hsync0          long    1
3a4f4 f2d 01 00 00 00 | hsync1          long    1
3a4f8 f2e             | 
3a4f8 f2e 01 00 00 00 | t1              long    1
3a4fc f2f 00 00 00 00 | t2 long 0
3a500 f30 00 00 00 00 | t3 long 0
3a504 f31 00 00 00 00 | t4 long 0
3a508 f32             | 
3a508 f32 00 00 00 00 | rcnt            long    0  'dl repeat count
3a50c f33 00 00 00 00 | rcnt2           long    0
3a510 f34 00 00 00 00 | rcnt2a          long    0
3a514 f35 00 00 00 00 | roffset         long    0
3a518 f36 00 00 00 00 | rdl             long    0  'dl repeat line
3a51c f37 00 00 00 00 | dlc             long    0  'dl command
3a520 f38             | 
3a520 f38 FF FF FF FF | affffffff       long    $ffffffff
3a524 f39 00 00 00 00 | sprite1pointer long 0
3a528 f3a 00 00 00 00 | sprite1xy      long 0
3a52c f3b 00 00 00 00 | sprite1wh      long 0
3a530 f3c 00 00 00 00 | sprite2pointer long 0
3a534 f3d 00 00 00 00 | sprite2xy      long 0
3a538 f3e 00 00 00 00 | sprite2wh      long 0
3a53c f3f 00 00 00 00 | sprite3pointer long 0
3a540 f40 00 00 00 00 | sprite3xy      long 0
3a544 f41 00 00 00 00 | sprite3wh      long 0
3a548 f42 00 00 00 00 | sprite4pointer long 0
3a54c f43 00 00 00 00 | sprite4xy      long 0
3a550 f44 00 00 00 00 | sprite4wh      long 0
3a554 f45 00 00 00 00 | sprite5pointer long 0
3a558 f46 00 00 00 00 | sprite5xy      long 0
3a55c f47 00 00 00 00 | sprite5wh      long 0
3a560 f48 00 00 00 00 | sprite6pointer long 0
3a564 f49 00 00 00 00 | sprite6xy      long 0
3a568 f4a 00 00 00 00 | sprite6wh      long 0
3a56c f4b 00 00 00 00 | sprite7pointer long 0
3a570 f4c 00 00 00 00 | sprite7xy      long 0
3a574 f4d 00 00 00 00 | sprite7wh      long 0
3a578 f4e 00 00 00 00 | sprite8pointer long 0
3a57c f4f 00 00 00 00 | sprite8xy      long 0
3a580 f50 00 00 00 00 | sprite8wh      long 0
3a584 f51 00 00 00 00 | sprite9pointer long 0
3a588 f52 00 00 00 00 | sprite9xy      long 0
3a58c f53 00 00 00 00 | sprite9wh      long 0
3a590 f54 00 00 00 00 | sprite10pointer long 0
3a594 f55 00 00 00 00 | sprite10xy      long 0
3a598 f56 00 00 00 00 | sprite10wh      long 0
3a59c f57 00 00 00 00 | sprite11pointer long 0
3a5a0 f58 00 00 00 00 | sprite11xy      long 0
3a5a4 f59 00 00 00 00 | sprite11wh      long 0
3a5a8 f5a 00 00 00 00 | sprite12pointer long 0
3a5ac f5b 00 00 00 00 | sprite12xy      long 0
3a5b0 f5c 00 00 00 00 | sprite12wh      long 0
3a5b4 f5d 00 00 00 00 | sprite13pointer long 0
3a5b8 f5e 00 00 00 00 | sprite13xy      long 0
3a5bc f5f 00 00 00 00 | sprite13wh      long 0
3a5c0 f60 00 00 00 00 | sprite14pointer long 0
3a5c4 f61 00 00 00 00 | sprite14xy      long 0
3a5c8 f62 00 00 00 00 | sprite14wh      long 0
3a5cc f63 00 00 00 00 | sprite15pointer long 0
3a5d0 f64 00 00 00 00 | sprite15xy      long 0
3a5d4 f65 00 00 00 00 | sprite15wh      long 0
3a5d8 f66 00 00 00 00 | sprite16pointer long 0
3a5dc f67 00 00 00 00 | sprite16xy      long 0
3a5e0 f68 00 00 00 00 | sprite16wh      long 0
3a5e4 f69 00 00 00 00 | sprite17pointer long 0
3a5e8 f6a 00 00 00 00 | sprite17xy      long 0
3a5ec f6b 00 00 00 00 | sprite17wh      long 0
3a5f0 f6c 00 00 00 00 | sprite18pointer long 0
3a5f4 f6d 00 00 00 00 | sprite18xy      long 0
3a5f8 f6e 00 00 00 00 | sprite18wh      long 0
3a5fc f6f 00 00 00 00 | spritenum long 0
3a600 f70             | 
3a600 f70 00 00 00 00 | spriteline long 0
3a604 f71 84 03 00 00 | sprite_x long 900
3a608 f72 00 00 00 00 | sprite_y long 0
3a60c f73 10 00 00 00 | sprite_w long 16
3a610 f74 40 00 00 00 | sprite_h long 64
3a614 f75 00 00 00 00 | l2 long 0
3a618 f76 00 00 00 00 | t5 long 0
3a61c f77 00 00 00 00 | t6 long 0
3a620 f78 00 00 00 00 | t7 long 0
3a624 f79 00 00 00 00 | t8 long 0
3a628 f7a 00 00 00 00 | t9 long 0
3a62c f7b 00 00 00 00 | preloadaddr long 0
3a630 f7c 00 00 00 00 | preloadlineaddr long 0
3a634 f7d 00 04 00 00 | a1024 long 1024
3a638 f7e             | 
3a638 f7e E0 03 00 00 | aa long 992
3a63c f7f FF 03 00 00 | a1023 long 1023
3a640 f80 00 10 00 00 | a4096 long 4096
3a644 f81             |  fit 368
3a644 f81             |  fit 368
3a644 f81             | _psram_spin2_dat_
3a644 f81 00 00 00 00 
      ...             
3a73c fbf 00 00 00 00 
3a740 fc0 00 00 00 00 |     listdata long 0[8*8]
3a744 fc1             |             orgh
3a744                 | 
3a744                 | ' driver state
3a744     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3a748     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3a74c                 | 
3a74c                 | ' delay profile
3a74c     07 00 00 00 
3a750     00 CF 7B 05 
3a754     80 D1 F0 08 
3a758     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3a75c     80 C4 60 0F 
3a760     80 39 7A 12 
3a764     40 2D D9 13 
3a768     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3a76c                 | 
3a76c                 | ' data to be passed to driver when starting it
3a76c                 | startupData
3a76c     00 00 00 00 |     long    0           ' current frequency
3a770     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3a774     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3a778     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3a77c     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3a780     8C A7 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3a784     0C A8 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3a788     2C A8 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3a78c                 | 
3a78c                 | ' data for memory
3a78c                 | deviceData
3a78c                 |     ' 16 bank parameters follow (16MB per bank)
3a78c     00 00 00 00 
      ...             
3a7c4     00 00 00 00 
3a7c8     00 00 00 00 |     long    0[16]                               ' banks 0-15
3a7cc                 |     ' 16 banks of pin parameters follow
3a7cc     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3a7d0     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3a7d4     FF FF FF FF 
      ...             
3a804     FF FF FF FF 
3a808     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3a80c                 | 
3a80c                 | ' data for COG polling
3a80c                 | qosData 
3a80c     00 00 FF FF 
3a810     00 00 FF FF 
3a814     00 00 FF FF 
3a818     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3a81c     00 00 FF FF 
3a820     00 00 FF FF 
3a824     00 00 FF FF 
3a828     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3a82c                 |     
3a82c                 | ' mailbox storage
3a82c                 | 
3a82c                 | mailboxes
3a82c     00 00 00 00 
      ...             
3a884     00 00 00 00 
3a888     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3a88c                 | 	alignl
3a88c                 | _psram16drv_spin2_dat_
3a88c                 |                             orgh
3a88c     00 00 00 00 
      ...             
3a8a4     00 00 00 00 
3a8a8     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3a8ac                 | 
3a8ac                 | driver_start
3a8ac                 |                             org
3a8ac 000             | '..................................................................................................
3a8ac 000             | ' Memory layout for COG RAM once operational:
3a8ac 000             | '
3a8ac 000             | '  COG RAM address      Usage
3a8ac 000             | '  ---------------      ----
3a8ac 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3a8ac 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3a8ac 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3a8ac 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3a8ac 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3a8ac 000             | '  ~$198-$1F3           State and register variables
3a8ac 000             | '
3a8ac 000             | ' Also during driver COG startup:
3a8ac 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3a8ac 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3a8ac 000             | '..................................................................................................
3a8ac 000             |                             
3a8ac 000             | ' Mailbox storage after vector initialization
3a8ac 000             | 
3a8ac 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3a8b0 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3a8b4 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3a8b8 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3a8bc 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3a8c0 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3a8c4 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3a8c8 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3a8cc 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3a8d0 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3a8d4 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3a8d8 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3a8dc 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3a8e0 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3a8e4 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3a8e8 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3a8ec 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3a8f0 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3a8f4 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3a8f8 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3a8fc 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3a900 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3a904 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3a908 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3a90c 018             | 
3a90c 018             | ' Mailbox parameter addresses per COG once patched
3a90c 018             |                             
3a90c 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3a910 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3a914 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3a918 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3a91c 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3a920 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3a924 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3a928 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3a92c 020             | 
3a92c 020             | '..................................................................................................
3a92c 020             | ' Per COG request and state setup and service branching
3a92c 020             |         
3a92c 020             | cog0                 
3a92c 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3a930 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3a934 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3a938 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3a93c 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a940 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a944 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3a948 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3a94c 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3a950 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a954 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a958 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3a95c 02c             | cog1                        
3a95c 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3a960 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3a964 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3a968 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3a96c 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a970 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a974 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3a978 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3a97c 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3a980 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a984 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a988 037 33 CA 63 FD |                             execf   request-0               'jump to service
3a98c 038             | cog2                         
3a98c 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3a990 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3a994 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3a998 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3a99c 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a9a0 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a9a4 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3a9a8 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3a9ac 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3a9b0 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a9b4 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a9b8 043 33 CA 63 FD |                             execf   request-0               'jump to service
3a9bc 044             | cog3                        
3a9bc 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3a9c0 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3a9c4 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3a9c8 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3a9cc 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a9d0 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a9d4 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3a9d8 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3a9dc 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3a9e0 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a9e4 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a9e8 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3a9ec 050             | cog4                        
3a9ec 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3a9f0 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3a9f4 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3a9f8 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3a9fc 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3aa00 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3aa04 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3aa08 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3aa0c 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3aa10 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3aa14 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3aa18 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3aa1c 05c             | cog5                        
3aa1c 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3aa20 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3aa24 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3aa28 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3aa2c 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3aa30 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3aa34 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3aa38 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3aa3c 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3aa40 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3aa44 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3aa48 067 33 CA 63 FD |                             execf   request-0               'jump to service
3aa4c 068             | cog6                        
3aa4c 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3aa50 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3aa54 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3aa58 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3aa5c 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3aa60 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3aa64 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3aa68 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3aa6c 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3aa70 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3aa74 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3aa78 073 33 CA 63 FD |                             execf   request-0               'jump to service
3aa7c 074             | cog7                        
3aa7c 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3aa80 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3aa84 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3aa88 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3aa8c 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3aa90 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3aa94 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3aa98 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3aa9c 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3aaa0 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3aaa4 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3aaa8 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3aaac 080             | 
3aaac 080             |                             fit     128
3aaac 080             |                             fit     128
3aaac 080             | pad                         long    0[128-$]                'align init code to $80
3aaac 080             | 
3aaac 080             | '..................................................................................................
3aaac 080             | 
3aaac 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3aaac 080             | 
3aaac 080             | init                        
3aaac 080             |                             ' get driver scratch long address in hub
3aaac 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3aab0 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3aab4 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3aab8 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3aabc 084             |                     
3aabc 084             |                             ' read in the additional LUT RAM code
3aabc 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3aac0 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3aac4 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3aac8 087             | 
3aac8 087             |                             ' read the startup parameters
3aac8 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3aacc 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3aad0 089             | 
3aad0 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3aad0 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3aad4 08a             | 
3aad4 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3aad8 08b 01 00 00 5F 
3aadc 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3aae0 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3aae4 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3aae8 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3aaec 090             | 
3aaec 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3aaec 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3aaf0 091 01 00 00 FF 
3aaf4 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3aaf8 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3aafc 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3ab00 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3ab04 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3ab08 097 08 DE 47 F5 |                             or      a, #8
3ab0c 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3ab10 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3ab14 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3ab18 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3ab1c 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3ab20 09d 01 DE 07 F1 |                             add     a, #1
3ab24 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3ab28 09f             |  
3ab28 09f             |                             ' setup device control pin states
3ab28 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3ab2c 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3ab30 0a1 01 00 00 FF 
3ab34 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3ab38 0a3             | 
3ab38 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3ab3c 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3ab40 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3ab44 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3ab48 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3ab4c 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3ab50 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3ab54 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3ab58 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3ab5c 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3ab60 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3ab64 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3ab68 0af             | pinloop
3ab68 0af             |                             ' generate minimum CE high time before access
3ab68 0af A1 07 00 FF 
3ab6c 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3ab70 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3ab74 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3ab78 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3ab7c 0b4 1F DE 63 FD |                             waitx   a                       'delay
3ab80 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3ab84 0b6             | 
3ab84 0b6             |                             ' setup the COG mailboxes and addresses 
3ab84 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3ab88 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3ab8c 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3ab90 0b9             | 
3ab90 0b9 28 2E 64 FD |                             setq    #24-1
3ab94 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3ab98 0bb             | 
3ab98 0bb             |                             ' setup the polling loop for active COGs 
3ab98 0bb 01 C2 63 FD |                             cogid   id
3ab9c 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3aba0 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3aba4 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3aba8 0bf 0A F0 07 F6 |                             mov     ptra, #10
3abac 0c0 E1 F1 03 FA |                             mul     ptra, id
3abb0 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3abb4 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3abb8 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3abbc 0c4 03 C2 07 FA |                             mul     id, #3
3abc0 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3abc4 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3abc8 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3abcc 0c8 D8 01 B0 FD |                             call    #reloadcogs
3abd0 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3abd4 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3abd8 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3abd8 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3abdc 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3abe0 0cd 08 04 DC FC |                             rep     #2, #8
3abe4 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3abe8 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3abec 0d0             | 
3abec 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3abec 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3abec 0d0 01 C2 63 FD |                             cogid   id
3abf0 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3abf4 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3abf8 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3abfc 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3ac00 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3ac04 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3ac08 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3ac0c 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3ac10 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3ac14 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3ac18 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3ac1c 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3ac20 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3ac24 0de A5 E5 03 F1 |                             add     d, const512
3ac28 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3ac2c 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3ac30 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3ac34 0e2             |                             
3ac34 0e2             |                             ' setup register values for control vector loop setup after we return
3ac34 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3ac38 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3ac3c 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3ac40 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3ac44 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3ac48 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3ac4c 0e8 D0 C3 8F F9 |                             altd    id, #id0
3ac50 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3ac54 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3ac58 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3ac5c 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3ac60 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3ac64 0ee             |  
3ac64 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3ac68 0ef 07 CA 07 F5 |                             and     request, #7
3ac6c 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3ac70 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3ac74 0f2             | 
3ac74 0f2             |                             fit     $100                    'ensure all init code fits this space
3ac74 0f2             |                             fit     $100                    'ensure all init code fits this space
3ac74 0f2             | 
3ac74 0f2 00 00 00 00 
      ...             
3aca4 0fe 00 00 00 00 
3aca8 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3acac 100             | 
3acac 100             | '..................................................................................................
3acac 100             | ' Error result handling and COG notification of request completion
3acac 100             | 
3acac 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3acb0 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3acb4 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3acb8 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3acbc 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3acc0 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3acc4 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3acc8 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3accc 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3acd0 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3acd4 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3acd8 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3acdc 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3ace0 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3ace4 10e             | ' Poller re-starts here after a COG is serviced
3ace4 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3ace8 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3acec 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3acf0 111             | ' Main dynamic polling loop repeats until a request arrives
3acf0 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3acf4 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3acf8 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3acfc 114             | 
3acfc 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3ad00 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3ad04 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3ad08 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3ad0c 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3ad10 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3ad14 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3ad18 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3ad1c 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3ad20 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3ad24 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3ad28 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3ad2c 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3ad30 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3ad34 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3ad38 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3ad3c 124             | 
3ad3c 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3ad40 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3ad44 126             |  
3ad44 126             | '..................................................................................................
3ad44 126             | ' List handler                               
3ad44 126             | 
3ad44 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3ad48 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3ad4c 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3ad50 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3ad54 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3ad58 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3ad5c 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3ad60 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3ad64 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3ad68 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3ad6c 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3ad70 131 33 00 60 FD |                             execf   0-0                     'process the request 
3ad74 132             | 
3ad74 132             | '..................................................................................................
3ad74 132             | ' Restoring per COG state and resuming where we left off
3ad74 132             | 
3ad74 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3ad78 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3ad7c 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3ad80 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3ad84 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3ad88 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3ad8c 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3ad90 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3ad94 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3ad98 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3ad9c 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3ada0 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3ada4 13e             |                    
3ada4 13e             | '..................................................................................................
3ada4 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3ada4 13e             | 
3ada4 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3ada8 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3adac 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3adb0 141 D0 DF B7 F9 |                             setd    a, #id0
3adb4 142 D8 DF BF F9 |                             sets    a, #addr1
3adb8 143 FE FF FF FF 
3adbc 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3adc0 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3adc4 146 3F DE A7 F9 |                             alti    a, #%111_111 
3adc8 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3adcc 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3add0 149 01 E2 63 FD |                             cogid   c
3add4 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3add8 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3addc 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3ade0 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3ade4 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3ade8 14f 00 E0 03 F6 |                             mov     b, 0-0
3adec 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3adf0 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3adf4 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3adf8 153 0C 00 90 AD |             if_z            jmp     #excluded               
3adfc 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3ae00 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3ae04 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3ae08 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3ae0c 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3ae10 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3ae14 15a             | 
3ae14 15a             | 'determine priority cogs and build instructions for the polling sequence
3ae14 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3ae18 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3ae1c 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3ae20 15d             | 
3ae20 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3ae24 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3ae28 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3ae2c 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3ae30 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3ae34 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3ae38 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3ae3c 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3ae40 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3ae44 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3ae48 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3ae4c 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3ae50 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3ae54 16a             | endprioloop
3ae54 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3ae58 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3ae5c 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3ae60 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3ae64 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3ae68 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3ae6c 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3ae70 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3ae74 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3ae78 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3ae7c 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3ae80 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3ae84 176             | 
3ae84 176             | ' populate the round robin COG polling instructions
3ae84 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3ae88 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3ae8c 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3ae90 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3ae94 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3ae98 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3ae9c 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3aea0 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3aea4 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3aea8 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3aeac 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3aeb0 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3aeb4 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3aeb8 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3aebc 184             | '..................................................................................................
3aebc 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3aebc 184             | 
3aebc 184             | set_latency                                                 '            (a) set latency
3aebc 184             | get_latency                                                 '            (b) get latency
3aebc 184             | set_burst                                                   '            (c) set burst size of bank
3aebc 184             | get_burst                                                   '            (d) get burst size of bank
3aebc 184             |                                                             '            (e) dump state
3aebc 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3aec0 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3aec4 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3aec8 187             |                                                             ' | | | | e  account for following AUGS
3aec8 187 04 00 00 FF 
3aecc 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3aed0 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3aed4 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3aed8 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3aedc 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3aee0 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3aee4 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3aee8 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3aeec 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3aef0 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3aef4 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3aef8 193             | 
3aef8 193             | '..................................................................................................
3aef8 193             | ' Misc EXECF code
3aef8 193             | 
3aef8 193 33 72 63 FD | start_read_exec             execf   newburstr
3aefc 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3af00 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3af04 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3af08 197             | 
3af08 197             | '..................................................................................................
3af08 197             | ' Variables
3af08 197             | 
3af08 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3af0c 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3af10 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3af14 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3af18 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3af1c 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3af20 19d             | 
3af20 19d 00 00 00 80 | xfreq1          long    $80000000
3af24 19e 00 00 00 40 | xfreq2          long    $40000000
3af28 19f 03 00 00 00 | delay           long    3
3af2c 1a0             | 
3af2c 1a0             | lutcodeaddr                 
3af2c 1a0             | startupparams
3af2c 1a0             | excludedcogs                                    'careful: shared register use!
3af2c 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3af30 1a1 00 00 00 00 | flags           long    0
3af34 1a2             | mask                                            'careful: shared register use!
3af34 1a2 00 00 00 00 | resetmaskA      long    0
3af38 1a3             | limit                                           'careful: shared register use!
3af38 1a3 00 00 00 00 | resetmaskB      long    0
3af3c 1a4 00 00 00 00 | datapins        long    0
3af40 1a5             | const512                                        'careful: shared register use!
3af40 1a5 00 00 00 00 | devicelist      long    0
3af44 1a6 00 00 00 00 | coglist         long    0
3af48 1a7 00 00 00 00 | mbox            long    0 
3af4c 1a8             | 
3af4c 1a8             | clkpin                                          'shared with code patched during init
3af4c 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3af50 1a9             | cspin                                           'shared with code patched during init
3af50 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3af54 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3af58 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3af5c 1ac 01 00 00 00 | clkdelay        long    1
3af60 1ad 00 00 00 00 | regdatabus      long    0
3af64 1ae             | 
3af64 1ae 10 00 00 00 | deviceaddr      long    $10
3af68 1af             | rrcounter
3af68 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3af6c 1b0             | 
3af6c 1b0             | ' jump addresses for the per COG handlers
3af6c 1b0 20 00 00 00 | cog0_handler    long    cog0
3af70 1b1 2C 00 00 00 | cog1_handler    long    cog1
3af74 1b2 38 00 00 00 | cog2_handler    long    cog2
3af78 1b3 44 00 00 00 | cog3_handler    long    cog3
3af7c 1b4 50 00 00 00 | cog4_handler    long    cog4
3af80 1b5 5C 00 00 00 | cog5_handler    long    cog5
3af84 1b6 68 00 00 00 | cog6_handler    long    cog6
3af88 1b7 74 00 00 00 | cog7_handler    long    cog7
3af8c 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3af90 1b9             | 
3af90 1b9             | ' EXECF sequences
3af90 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3af94 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3af98 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3af9c 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3afa0 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3afa4 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3afa8 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3afac 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3afac 1c0             | 
3afac 1c0             | 
3afac 1c0             | ' SKIPF sequences
3afac 1c0             | skiptable
3afac 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3afb0 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3afb4 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3afb8 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3afbc 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3afc0 1c5 00 00 00 00 | pattern2        long    0
3afc4 1c6 00 00 00 00 | pattern3        long    0
3afc8 1c7 77 02 00 00 | singlelong      long    %1001110111  
3afcc 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3afd0 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3afd4 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3afd8 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3afdc 1cc             | 
3afdc 1cc             | ' LUT RAM address values
3afdc 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3afe0 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3afe4 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3afe8 1cf F6 02 00 00 | noread          long    noread_lut
3afec 1d0             | 
3afec 1d0 00 00 00 00 | id0             long    0
3aff0 1d1 01 00 00 00 | id1             long    1
3aff4 1d2 02 00 00 00 | id2             long    2
3aff8 1d3 03 00 00 00 | id3             long    3
3affc 1d4 04 00 00 00 | id4             long    4
3b000 1d5 05 00 00 00 | id5             long    5
3b004 1d6 06 00 00 00 | id6             long    6
3b008 1d7 07 00 00 00 | id7             long    7
3b00c 1d8             | 
3b00c 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3b00c 1d8             | 'and COG updates and need to follow immediately after id0-id7
3b00c 1d8 00 00 00 00 | addr1           long    0
3b010 1d9 00 00 00 00 | hubdata         long    0
3b014 1da 00 00 00 00 | count           long    0
3b018 1db 00 00 00 00 | addr2           long    0
3b01c 1dc 00 00 00 00 | total           long    0
3b020 1dd 00 00 00 00 | offset1         long    0
3b024 1de 00 00 00 00 | offset2         long    0
3b028 1df 00 00 00 00 | link            long    0
3b02c 1e0             | 
3b02c 1e0             | burstwrite                                      'note shared register use during init
3b02c 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3b030 1e1 00 00 00 00 | id              long    0
3b034 1e2             | 
3b034 1e2 00 00 00 00 | header          long    0
3b038 1e3 00 00 00 00 | trailer         long    0
3b03c 1e4 00 00 00 00 | cmdaddr         long    0
3b040 1e5 00 00 00 00 | request         long    0
3b044 1e6 00 00 00 00 | rrlimit         long    0
3b048 1e7 00 00 00 00 | pinconfig       long    0
3b04c 1e8 00 00 00 00 | clks            long    0
3b050 1e9 00 00 00 00 | resume          long    0
3b054 1ea 00 00 00 00 | orighubsize     long    0
3b058 1eb 00 00 00 00 | wrclks          long    0
3b05c 1ec             | 
3b05c 1ec 00 00 00 00 | pattern         long    0
3b060 1ed 00 00 00 00 | hubscratch      long    0
3b064 1ee 00 10 00 00 | val4k           long    4096
3b068 1ef             | 
3b068 1ef             | ' temporary general purpose regs
3b068 1ef 00 00 00 00 | a               long    0
3b06c 1f0 00 00 00 00 | b               long    0
3b070 1f1 00 00 00 00 | c               long    0
3b074 1f2 00 00 00 00 | d               long    0
3b078 1f3             | 
3b078 1f3             |                 fit     502
3b078 1f3             |                 fit     502
3b078 1f3             | 
3b078 1f3             | '..................................................................................................
3b078 1f3             | 
3b078 1f3             |             orgh
3b078                 | 
3b078                 | lut_code
3b078                 | 'HW init code up to 80 longs
3b078                 | 
3b078                 | '..................................................................................................
3b078                 | ' Memory layout for LUT RAM once operational:
3b078                 | '
3b078                 | '  LUT RAM address      Usage
3b078                 | '  ---------------      ----
3b078                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3b078                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3b078                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3b078                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3b078                 | '
3b078                 | ' Also during driver COG startup:
3b078                 | ' $230-$24F is used for HW init setup
3b078                 | ' $250-$26F is used as temporary vector storage 
3b078                 | '..................................................................................................
3b078                 | 
3b078                 |                 org $230    
3b078 230             | 
3b078 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3b078 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3b07c 231 24 16 60 FD |                             pollxfi
3b080 232 FF AA 2A FF 
3b084 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3b088 234 28 00 B0 FD |                             call    #sendqspi
3b08c 235 07 F8 07 FF 
3b090 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3b094 237 28 00 B0 FD |                             call    #sendspi
3b098 238 F8 07 78 FF 
3b09c 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3b0a0 23a 1C 00 B0 FD |                             call    #sendspi
3b0a4 23b 7F 78 78 FF 
3b0a8 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3b0ac 23d 10 00 B0 FD |                             call    #sendspi 
3b0b0 23e 2D 00 64 FD |                             ret
3b0b4 23f             | 
3b0b4 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3b0b8 240 32 0C 64 FD |                             skipf   #%110
3b0bc 241 9C EF 03 F6 |                             mov     pb, xsendimm
3b0c0 242             | 
3b0c0 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3b0c4 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3b0c8 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3b0cc 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3b0d0 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3b0d4 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3b0d8 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3b0dc 249 50 48 63 FD |                             fltl    datapins                'float data bus
3b0e0 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3b0e4 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3b0e8 24c             | 
3b0e8 24c 00 00 00 00 
3b0ec 24d 00 00 00 00 
3b0f0 24e 00 00 00 00 
3b0f4 24f 00 00 00 00 |                 long    0[$270-32-$]
3b0f8 250             |     
3b0f8 250             |                 fit     $270-32  ' keep room for 32 vector longs
3b0f8 250             |                 fit     $270-32  ' keep room for 32 vector longs
3b0f8 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3b0f8 250             | rw_vect ' PSRAM jump vectors
3b0f8 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3b0fc 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3b100 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3b104 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3b108 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3b10c 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3b110 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3b114 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3b118 258             | ro_vect ' R/O PSRAM jump vectors
3b118 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3b11c 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3b120 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3b124 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3b128 25c 00 01 00 00 |                 long    unsupported
3b12c 25d 00 01 00 00 |                 long    unsupported
3b130 25e 00 01 00 00 |                 long    unsupported
3b134 25f 00 01 00 00 |                 long    unsupported
3b138 260             | ctrl_vect ' Control jump vectors
3b138 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3b13c 261 00 01 00 00 |                 long    unsupported
3b140 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3b144 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3b148 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3b14c 265 00 01 00 00 |                 long    unsupported
3b150 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3b154 267 3E 01 00 00 |                 long    reconfig 
3b158 268             | no_vect ' Invalid bank jump vectors
3b158 268 01 01 00 00 |                 long    invalidbank
3b15c 269 01 01 00 00 |                 long    invalidbank
3b160 26a 01 01 00 00 |                 long    invalidbank
3b164 26b 01 01 00 00 |                 long    invalidbank
3b168 26c 01 01 00 00 |                 long    invalidbank
3b16c 26d 01 01 00 00 |                 long    invalidbank
3b170 26e 01 01 00 00 |                 long    invalidbank
3b174 26f 01 01 00 00 |                 long    invalidbank
3b178 270             | 
3b178 270             |                 fit     $270
3b178 270             |                 fit     $270
3b178 270             | '..................................................................................................
3b178 270             | ' PSRAM READS
3b178 270             |                                                             ' a b c d e f
3b178 270             |                                                             ' B W L B R L  (a) byte read
3b178 270             |                                                             ' Y O O U E O  (b) word read
3b178 270             |                                                             ' T R N R S C  (c) long read
3b178 270             |                                                             ' E D G S U K  (d) new burst read
3b178 270             |                                                             '       T M E  (e) resumed sub-burst
3b178 270             |                                                             '         E D  (f) locked sub-burst
3b178 270             | 
3b178 270             | 
3b178 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3b17c 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3b180 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3b184 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3b188 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3b18c 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3b190 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3b194 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3b198 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3b19c 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3b1a0 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3b1a4 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3b1a8 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3b1ac 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3b1b0 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3b1b4 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3b1b8 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3b1bc 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3b1c0 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3b1c4 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3b1c8 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3b1cc 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3b1d0 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3b1d4 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3b1d8 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3b1dc 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3b1e0 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3b1e4 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3b1e8 28c             | 
3b1e8 28c             |                             ' fall through to read bursts
3b1e8 28c             |                         
3b1e8 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3b1e8 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3b1ec 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3b1f0 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3b1f4 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3b1f8 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3b1fc 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3b200 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3b204 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3b208 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3b20c 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3b210 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3b214 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3b218 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3b21c 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3b220 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3b224 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3b228 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3b22c 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3b230 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3b234 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3b238 2a0 E8 D1 03 F1 |                             add     clks, clks
3b23c 2a1             | readcommon
3b23c 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3b240 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3b244 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3b248 2a4             | 
3b248 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3b24c 2a5 69 C8 63 FD |                             rev     cmdaddr
3b250 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3b254 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3b258 2a8             | 
3b258 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3b25c 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3b260 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3b260 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3b264 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3b268 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3b26c 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3b270 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3b270 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3b274 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3b278 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3b27c 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3b280 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3b284 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3b288 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3b288 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3b28c 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3b290 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3b294 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3b298 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3b29c 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3b2a0 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3b2a4 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3b2a8 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3b2ac 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3b2b0 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3b2b4 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3b2b8 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3b2bc 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3b2c0 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3b2c0 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3b2c4 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3b2c8 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3b2cc 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3b2d0 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3b2d4 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3b2d8 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3b2dc 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3b2e0 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3b2e4 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3b2e8 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3b2ec 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3b2f0 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3b2f4 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3b2f8 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3b2fc 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3b300 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3b304 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3b308 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3b30c 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3b310 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3b314 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3b318 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3b31c 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3b320 2da 10 03 90 FD |                             jmp     #writecommon
3b324 2db             | 
3b324 2db             | '..................................................................................................
3b324 2db             | ' Burst continuation testing
3b324 2db             | 
3b324 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3b328 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3b32c 2dd             | continue_read_lut          
3b32c 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3b330 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3b334 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3b338 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3b33c 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3b340 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3b344 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3b348 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3b34c 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3b350 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3b354 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3b358 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3b35c 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3b360 2ea             | 
3b360 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3b364 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3b368 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3b36c 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3b370 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3b374 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3b378 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3b37c 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3b380 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3b384 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3b388 2f4 2A 1C 66 0D |             _ret_           push    #poller
3b38c 2f5             | 
3b38c 2f5             | 
3b38c 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3b390 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3b390 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3b394 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3b398 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3b39c 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3b3a0 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3b3a4 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3b3a8 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3b3ac 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3b3b0 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3b3b4 2ff             | '..................................................................................................
3b3b4 2ff             | ' Completion of requests
3b3b4 2ff             | 
3b3b4 2ff             | complete_rw_lut             
3b3b4 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3b3b8 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3b3bc 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3b3c0 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3b3c4 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3b3c8 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3b3cc 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3b3d0 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3b3d4 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3b3d8 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3b3dc 309 32 62 64 AD |             if_z            skipf   #%110001
3b3e0 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3b3e4 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3b3e8 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3b3ec 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3b3f0 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3b3f4 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3b3f8 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3b3fc 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3b400 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3b404 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3b408 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3b40c 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3b410 316             |                                                             ' skipcase (a) gfx copy to/from hub
3b410 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3b410 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3b410 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3b414 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3b418 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3b41c 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3b420 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3b424 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3b428 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3b42c 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3b430 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3b434 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3b438 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3b43c 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3b440 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3b444 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3b448 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3b44c 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3b450 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3b454 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3b458 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3b45c 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3b460 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3b464 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3b468 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3b46c 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3b470 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3b474 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3b478 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3b47c 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3b480 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3b484 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3b488 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3b48c 335 DF B7 03 A6 |             if_z            mov     addr2, link
3b490 336 34 FF 9F AD |             if_z            jmp     #checknext
3b494 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3b498 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3b49c 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3b4a0 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3b4a4 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3b4a8 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3b4ac 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3b4b0 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3b4b4 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3b4b8 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3b4bc 341             | 
3b4bc 341             | '..................................................................................................
3b4bc 341             | ' PSRAM WRITES
3b4bc 341             |                                                             '  a b c d e f g h
3b4bc 341             | 
3b4bc 341             |                                                             '  B W L F B R L L (a) byte write(s)
3b4bc 341             |                                                             '  Y O O I U E O O (b) word write(s)
3b4bc 341             |                                                             '  T R N L R S C C (c) long write(s)
3b4bc 341             |                                                             '  E D G L S U K K (d) resumed fill
3b4bc 341             |                                                             '          T M E E (e) new burst write
3b4bc 341             |                                                             '            E D D (f) resumed burst
3b4bc 341             |                                                             '              F B (g) locked fill
3b4bc 341             |                                                             '              I U (h) locked burst write
3b4bc 341             |                                                             '              L R 
3b4bc 341             |                                                             '              L S 
3b4bc 341             |                                                             '                T 
3b4bc 341             | 
3b4bc 341             | w_single                   
3b4bc 341             | w_fill_cont           
3b4bc 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3b4c0 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3b4c4 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3b4c8 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3b4cc 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3b4d0 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3b4d4 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3b4d8 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3b4dc 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3b4e0 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3b4e4 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3b4e8 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3b4ec 34d             |                ' disable call to r_resume_burst for single longs when z=0
3b4ec 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3b4f0 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3b4f4 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3b4f8 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3b4fc 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3b500 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3b504 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3b508 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3b50c 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3b510 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3b514 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3b518 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3b51c 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3b520 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3b524 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3b528 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3b52c 35d             |         
3b52c 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3b52c 35d             |             '
3b52c 35d             |             '  At least one of these 3 optional components will be sent
3b52c 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3b52c 35d             |             '     body - N x full longs of data
3b52c 35d             |             '     trailer - last partial long of data
3b52c 35d             |             '
3b52c 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3b52c 35d             |             '
3b52c 35d             |             'Case    Type                           Sends
3b52c 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3b52c 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3b52c 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3b52c 35d             |             ' 4)     Multiple long fill             body only
3b52c 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3b52c 35d             | 
3b52c 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3b52c 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3b530 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3b534 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3b538 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3b53c 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3b540 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3b544 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3b548 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3b54c 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3b550 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3b554 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3b558 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3b55c 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3b560 36a             |                             
3b560 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3b564 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3b568 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3b56c 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3b570 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3b574 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3b578 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3b57c 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3b580 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3b584 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3b588 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3b58c 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3b590 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3b594 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3b598 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3b59c 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3b5a0 37a             | 
3b5a0 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3b5a4 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3b5a8 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3b5ac 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3b5b0 37e             |                  
3b5b0 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3b5b4 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3b5b8 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3b5bc 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3b5c0 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3b5c4 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3b5c8 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3b5cc 385             | 
3b5cc 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3b5d0 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3b5d4 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3b5d8 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3b5dc 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3b5e0 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3b5e4 38b             | 
3b5e4 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3b5e4 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3b5e8 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3b5ec 38d 2A B0 63 FD |                             push    addr1                   'save address
3b5f0 38e             | 
3b5f0 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3b5f0 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3b5f4 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3b5f8 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3b5fc 391             |             
3b5fc 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3b600 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3b604 393 2B B0 63 FD |                             pop     addr1                   'restore address
3b608 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3b60c 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3b610 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3b614 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3b618 398             | 
3b618 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3b61c 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3b620 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3b624 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3b628 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3b62c 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3b630 39e             | 
3b630 39e             |                             'trailer is done
3b630 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3b634 39f             | 
3b634 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3b638 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3b63c 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3b640 3a2             | 
3b640 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3b644 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3b648 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3b64c 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3b650 3a6             |                             
3b650 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3b654 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3b658 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3b65c 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3b660 3aa             |                                                          
3b660 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3b664 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3b668 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3b66c 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3b670 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3b674 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3b678 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3b67c 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3b680 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3b684 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3b688 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3b68c 3b5             |  
3b68c 3b5 59 52 63 FD |                             drvh    cspin
3b690 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3b694 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3b698 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3b69c 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3b6a0 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3b6a4 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3b6a8 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3b6ac 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3b6b0 3be EA E5 03 F6 |                             mov     d, orighubsize
3b6b4 3bf EF E5 63 F0 |                             shl     d, a
3b6b8 3c0 F2 E3 83 F1 |                             sub     c, d
3b6bc 3c1 DD E3 03 F1 |                             add     c, offset1
3b6c0 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3b6c4 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3b6c8 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3b6cc 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3b6d0 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3b6d4 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3b6d8 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3b6dc 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3b6e0 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3b6e4 3cb BB D3 03 F6 |                             mov     resume, restorefill
3b6e8 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3b6ec 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3b6f0 3ce 6C FC BF CD |             if_c            call    #yield
3b6f4 3cf 2D 00 64 FD |                             ret
3b6f8 3d0             |                            
3b6f8 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3b6f8 3d0             |                       '     rczl    pa                      'rotate left into address offset
3b6f8 3d0             |                       '     rczl    c wcz                   'restore count and flags
3b6f8 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3b6fc 3d1 02 EC 67 F0 |                             shl     pa, #2
3b700 3d2 28 06 64 AD |             if_z            setq    #3
3b704 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3b708 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3b70c 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3b710 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3b714 3d7             | 
3b714 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3b718 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3b71c 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3b720 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3b724 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3b728 3dc             |         
3b728 3dc             | 
3b728 3dc             | '..................................................................................................
3b728 3dc             | 
3b728 3dc             |                 fit 1024-32
3b728 3dc             |                 fit 1024-32
3b728 3dc 00 00 00 00 
3b72c 3dd 00 00 00 00 
3b730 3de 00 00 00 00 
3b734 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3b738 3e0             |                 org 1024-32
3b738 000             | 
3b738 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3b738 000 00 00 00 00 |                 long $0000
3b73c 001 11 11 00 00 |                 long $1111
3b740 002 22 22 00 00 |                 long $2222
3b744 003 33 33 00 00 |                 long $3333
3b748 004 44 44 00 00 |                 long $4444
3b74c 005 55 55 00 00 |                 long $5555
3b750 006 66 66 00 00 |                 long $6666
3b754 007 77 77 00 00 |                 long $7777
3b758 008 88 88 00 00 |                 long $8888
3b75c 009 99 99 00 00 |                 long $9999
3b760 00a AA AA 00 00 |                 long $aaaa
3b764 00b BB BB 00 00 |                 long $bbbb
3b768 00c CC CC 00 00 |                 long $cccc
3b76c 00d DD DD 00 00 |                 long $dddd
3b770 00e EE EE 00 00 |                 long $eeee
3b774 00f FF FF 00 00 |                 long $ffff
3b778 010             | 
3b778 010             | 'masks
3b778 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3b77c 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3b780 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3b784 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3b788 014             | 
3b788 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3b78c 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3b790 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3b794 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3b798 018             | 
3b798 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3b79c 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3b7a0 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3b7a4 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3b7a8 01c             | 
3b7a8 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3b7ac 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3b7b0 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3b7b4 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3b7b8 020             | 
3b7b8 020             |         fit 1024
3b7b8 020             |         fit 1024
3b7b8 020             | 
3b7b8 020             | '--------------------------------------------------------------------------------------------------
3b7b8 020             |         orgh
3b7b8                 | 
3b7b8                 | gfxexpansion
3b7b8                 |                             'simple line drawing graphics expansion of memory driver
3b7b8                 |                             'jmp     #donerepeats                'just return for now
3b7b8                 | 
3b7b8     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3b7bc     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3b7c0     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3b7c4     DD E1 03 F6 |                             mov     b, offset1              'get error term
3b7c8     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3b7cc     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3b7d0     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3b7d4     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3b7d8     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3b7dc     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3b7e0     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3b7e4     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3b7e8     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3b7ec     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3b7f0     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3b7f4     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3b7f8     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3b7fc     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3b800     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3b804     DC E5 33 F9 |                             getword d, total, #0            'get line width
3b808     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3b80c     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3b810     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3b814     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3b818     C3 03 80 FD |                             jmp     #readmask               'continue filling
3b81c                 | 	alignl
3b81c                 | _usbnew_spin2_dat_
3b81c                 |                 org     $000
3b81c 000             | 
3b81c 000             | usb_host_start
3b81c 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3b820 001             | 
3b820 001 03 00 00 FF 
3b824 002 D0 72 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3b828 003 02 72 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3b82c 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3b830 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3b834 006 29 72 63 FD |                 setq2   htmp
3b838 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3b83c 008             | 
3b83c 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3b840 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3b844 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3b848 00b             | 
3b848 00b             | '------------------------------------------------------------------------------
3b848 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3b848 00b             | ' special because the receiving function must not respond with either STALL or
3b848 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3b848 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3b848 00b             | ' corrupt packet, it must ignore the transaction
3b848 00b             | '------------------------------------------------------------------------------
3b848 00b             | ' On entry:
3b848 00b             | '   PTRA - start address of the SETUP data struct.
3b848 00b             | ' On exit:
3b848 00b             | '   retval - PID_ACK on success, otherwise error code.
3b848 00b             | '------------------------------------------------------------------------------
3b848 00b             | txn_setup
3b848 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3b84c 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3b850 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3b854 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3b858 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3b85c 010             | .setup
3b85c 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3b860 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b864 012 2D 00 64 AD |         if_z    ret
3b868 013 7C 0B B0 FD |                 call    #retry_wait
3b86c 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3b870 015 2D 00 64 AD |         if_z    ret
3b874 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3b878 017 E0 FF 9F FD |                 jmp     #.setup
3b87c 018             | 
3b87c 018             | '------------------------------------------------------------------------------
3b87c 018             | ' IN/INTERRUPT transaction.
3b87c 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3b87c 018             | '------------------------------------------------------------------------------
3b87c 018             | ' On entry:
3b87c 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3b87c 018             | '     CRC(b19..23).
3b87c 018             | ' On exit:
3b87c 018             | '------------------------------------------------------------------------------
3b87c 018             | txn_in
3b87c 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3b880 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3b884 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3b888 01b             | 
3b888 01b             |                 ' Fall through to urx_packet
3b888 01b             | 
3b888 01b             | '------------------------------------------------------------------------------
3b888 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3b888 01b             | ' received are handshakes and IN DATAx.
3b888 01b             | '------------------------------------------------------------------------------
3b888 01b             | ' On entry:
3b888 01b             | ' On exit:
3b888 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3b888 01b             | '     returned.
3b888 01b             | '------------------------------------------------------------------------------
3b888 01b             | urx_packet
3b888 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3b88c 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b890 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3b894 01e 1A 94 63 FD |                 getct   hct2
3b898 01f 4E 95 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3b89c 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3b8a0 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3b8a4 022             | .wait_sop
3b8a4 022 22 A7 8A FA |                 rdpin   urx, dm
3b8a8 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b8ac 024 08 00 90 CD |         if_c    jmp     #.get_pid
3b8b0 025 FC 25 CC FB |                 jnct2   #.wait_sop
3b8b4 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3b8b8 027             | .get_pid
3b8b8 027 28 02 B0 FD |                 call    #urx_next
3b8bc 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3b8c0 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3b8c4 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3b8c8 02b             | .chk_pid
3b8c8 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b8cc 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3b8d0 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3b8d4 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3b8d8 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3b8dc 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3b8e0 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3b8e4 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3b8e8 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3b8ec 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3b8f0 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3b8f4 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3b8f8 037             | .ack_resend
3b8f8 037 22 A7 82 FA |                 rqpin   urx, dm
3b8fc 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3b900 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3b904 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3b908 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3b90c 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3b910 03d             | .chk_eop
3b910 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3b914 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3b918 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3b91c 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3b920 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3b924 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3b928 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3b92c 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3b930 045 2D 00 64 FD |                 ret
3b934 046             | .idle
3b934 046 22 A7 82 FA |                 rqpin   urx, dm
3b938 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3b93c 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3b940 049 2D 00 64 FD |                 ret
3b944 04a             | 
3b944 04a             | '------------------------------------------------------------------------------
3b944 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3b944 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3b944 04a             | ' if one is required.
3b944 04a             | '------------------------------------------------------------------------------
3b944 04a             | ' On entry:
3b944 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3b944 04a             | ' On exit:
3b944 04a             | '------------------------------------------------------------------------------
3b944 04a             | utx_token
3b944 04a 22 A7 82 FA |                 rqpin   urx, dm
3b948 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3b94c 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3b950 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3b954 04e 34 0D B0 CD |         if_c    call    #utx_pre
3b958 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3b95c 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3b960 051 5E 73 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3b964 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3b968 053             | .next_byte
3b968 053 B9 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3b96c 054 08 72 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3b970 055             | .wait
3b970 055 40 46 72 FD |                 testp   dp                      wc
3b974 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3b978 057 23 03 08 FC |                 akpin   dp
3b97c 058 22 A5 22 FC |                 wypin   utx, dm
3b980 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3b984 05a             | 
3b984 05a             | '------------------------------------------------------------------------------
3b984 05a             | ' SETUP/OUT/INTERRUPT transaction.
3b984 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3b984 05a             | '------------------------------------------------------------------------------
3b984 05a             | ' On entry:
3b984 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3b984 05a             | '     CRC(b19..23).
3b984 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3b984 05a             | '   pkt_data - count of DATAx payload bytes to send.
3b984 05a             | ' On exit:
3b984 05a             | '------------------------------------------------------------------------------
3b984 05a             | txn_out
3b984 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3b988 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3b98c 05c 00 00 C0 FF 
3b990 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3b994 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3b998 05f             | 
3b998 05f             |                 ' Fall through to utx_data
3b998 05f             | 
3b998 05f             | '------------------------------------------------------------------------------
3b998 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3b998 05f             | ' calculated while the data byte is being shifted out. Since data stage
3b998 05f             | ' success/fail is not determined until the status stage of the transaction,
3b998 05f             | ' this routine is only concerned about the current DATAx packet.
3b998 05f             | '------------------------------------------------------------------------------
3b998 05f             | ' On entry:
3b998 05f             | '   PTRA - hub start address of the data to read.
3b998 05f             | '   pkt_cnt - data payload size.
3b998 05f             | ' On exit:
3b998 05f             | '------------------------------------------------------------------------------
3b998 05f             | utx_data
3b998 05f 22 A7 82 FA |                 rqpin   urx, dm
3b99c 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b9a0 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3b9a4 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3b9a8 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3b9ac 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3b9b0 065 D8 0C B0 CD |         if_c    call    #utx_pre
3b9b4 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3b9b8 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3b9bc 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3b9c0 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3b9c4 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3b9c8 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3b9cc 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3b9d0 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3b9d4 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3b9d8 06f             | .read_byte
3b9d8 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3b9dc 070 F0 00 B0 FD |                 call    #utx_byte
3b9e0 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3b9e4 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3b9e8 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3b9ec 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3b9f0 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3b9f4 076             | .send_crc
3b9f4 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3b9f8 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3b9fc 078 D0 00 B0 FD |                 call    #utx_byte
3ba00 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3ba04 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3ba08 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3ba0c 07c             | 
3ba0c 07c             | '------------------------------------------------------------------------------
3ba0c 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3ba0c 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3ba0c 07c             | ' expects that the packet includes at least the CRC word.
3ba0c 07c             | '
3ba0c 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3ba0c 07c             | ' was requested, which makes it difficult to determine where the data stops
3ba0c 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3ba0c 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3ba0c 07c             | ' USB-16 expected residual value of 0xB001.
3ba0c 07c             | '
3ba0c 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3ba0c 07c             | ' so the caller can verify IN success before writing the data to its final
3ba0c 07c             | ' destination.
3ba0c 07c             | '------------------------------------------------------------------------------
3ba0c 07c             | ' On entry:
3ba0c 07c             | '   pkt_data - max byte count expected to be in the packet.
3ba0c 07c             | '   newb_flg - signals new byte ready when toggled.
3ba0c 07c             | ' On exit:
3ba0c 07c             | '   pkt_cnt - actual number of bytes read.
3ba0c 07c             | '------------------------------------------------------------------------------
3ba0c 07c             | urx_data
3ba0c 07c F7 77 03 F6 |                 mov     htmp2, pb
3ba10 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3ba14 07e 00 00 C0 FF 
3ba18 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3ba1c 080 BB EF 03 F6 |                 mov     pb, htmp2
3ba20 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3ba24 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3ba28 083 58 85 03 F6 |                 mov     pkt_tmp, pkt_data
3ba2c 084 02 84 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3ba30 085             | .wait_byte
3ba30 085             | ' In-line rx for max speed
3ba30 085 22 A7 82 FA |                 rqpin   urx, dm
3ba34 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3ba38 087 53 A5 02 F5 |                 and     utx, urx
3ba3c 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3ba40 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3ba44 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3ba48 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3ba4c 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3ba50 08d DC FF 9F FD |                 jmp     #.wait_byte
3ba54 08e             | .get_byte
3ba54 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3ba58 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3ba5c 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3ba60 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3ba64 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3ba68 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3ba6c 094             | .end_crc
3ba6c 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3ba70 095 C2 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3ba74 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3ba78 097 2D 00 64 1D |         if_a    ret
3ba7c 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3ba7c 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3ba7c 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3ba7c 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3ba7c 098 22 A7 82 FA |                 rqpin   urx, dm
3ba80 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3ba84 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3ba88 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3ba88 09b             | .chk_crc
3ba88 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3ba8c 09c 58 00 00 FF 
3ba90 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3ba94 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3ba98 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3ba9c 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3baa0 0a1 34 09 B0 FD |                 call    #poll_waitx
3baa4 0a2             | 
3baa4 0a2             |                 ' Fall through to utx_handshake
3baa4 0a2             | 
3baa4 0a2             | '------------------------------------------------------------------------------
3baa4 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3baa4 0a2             | ' the appropriate IP delay has been inserted.
3baa4 0a2             | '------------------------------------------------------------------------------
3baa4 0a2             | ' On entry:
3baa4 0a2             | '   retval - handshake PID to send.
3baa4 0a2             | ' On exit:
3baa4 0a2             | '   retval unchanged.
3baa4 0a2             | '------------------------------------------------------------------------------
3baa4 0a2             | utx_handshake
3baa4 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3baa8 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3baac 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3bab0 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3bab4 0a6 5F A5 02 F6 |                 mov     utx, retval
3bab8 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3babc 0a8             | .idle
3babc 0a8 22 A7 82 FA |                 rqpin   urx, dm
3bac0 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3bac4 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3bac8 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3bacc 0ac 08 09 90 FD |                 jmp     #poll_waitx
3bad0 0ad             | 
3bad0 0ad             | '------------------------------------------------------------------------------
3bad0 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3bad0 0ad             | '------------------------------------------------------------------------------
3bad0 0ad             | ' On entry:
3bad0 0ad             | '   utx - byte to transmit.
3bad0 0ad             | ' On exit:
3bad0 0ad             | '------------------------------------------------------------------------------
3bad0 0ad             | utx_byte
3bad0 0ad 40 46 72 FD |                 testp   dp                      wc
3bad4 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3bad8 0af 23 03 08 FC |                 akpin   dp
3badc 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3bae0 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3bae4 0b2             | 
3bae4 0b2             | '------------------------------------------------------------------------------
3bae4 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3bae4 0b2             | '------------------------------------------------------------------------------
3bae4 0b2             | ' On entry:
3bae4 0b2             | ' On exit:
3bae4 0b2             | '   retval - the byte read.
3bae4 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3bae4 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3bae4 0b2             | '     received.
3bae4 0b2             | '------------------------------------------------------------------------------
3bae4 0b2             | urx_next
3bae4 0b2 22 A7 8A FA |                 rdpin   urx, dm
3bae8 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3baec 0b4 53 A5 02 F5 |                 and     utx, urx
3baf0 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3baf4 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3baf8 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3bafc 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3bb00 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3bb04 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3bb08 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3bb0c 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3bb10 0bd 2D 00 64 FD |                 ret
3bb14 0be             | 
3bb14 0be             | '------------------------------------------------------------------------------
3bb14 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3bb14 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3bb14 0be             | ' length, and the PID is not included in the CRC calculation:
3bb14 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3bb14 0be             | '  CRC5  ENDP ADDRESS PID
3bb14 0be             | ' %00000_1111_1111111_xxxxxxxx
3bb14 0be             | '------------------------------------------------------------------------------
3bb14 0be             | ' On entry:
3bb14 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3bb14 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3bb14 0be             | ' On exit:
3bb14 0be             | '   ep_addr_pid - CRC value appended to the packet.
3bb14 0be             | '------------------------------------------------------------------------------
3bb14 0be             | calc_crc5
3bb14 0be FF 03 00 FF 
3bb18 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3bb1c 0c0 5E 73 03 F6 |                 mov     htmp, ep_addr_pid
3bb20 0c1 08 72 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3bb24 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3bb28 0c3 69 72 63 FD |                 rev     htmp                            ' Input data reflected
3bb2c 0c4 28 72 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3bb30 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3bb34 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3bb38 0c7 09 72 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3bb3c 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3bb40 0c9 01 72 77 F0 |                 shl     htmp, #1                wc
3bb44 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3bb48 0cb 01 72 77 F0 |                 shl     htmp, #1                wc
3bb4c 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3bb50 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3bb54 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3bb58 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3bb5c 0d0             | 
3bb5c 0d0             | '------------------------------------------------------------------------------
3bb5c 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3bb5c 0d0             | '------------------------------------------------------------------------------
3bb5c 0d0             | isr1_fsframe
3bb5c 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3bb60 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3bb64 0d2 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3bb68 0d3 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3bb6c 0d4             | .wait
3bb6c 0d4 40 46 72 FD |                 testp   dp                      wc
3bb70 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3bb74 0d6 23 03 08 FC |                 akpin   dp
3bb78 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3bb7c 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3bb80 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3bb84 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3bb88 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3bb8c 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3bb90 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3bb94 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3bb98 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3bb9c 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3bba0 0e1 2C FF BF FD |                 call    #utx_byte
3bba4 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3bba8 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3bbac 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3bbb0 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3bbb4 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3bbb8 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3bbbc 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3bbc0 0e9 5B A5 42 F5 |                 or      utx, icrc
3bbc4 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3bbc8 0eb A4 83 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3bbcc 0ec 20 00 90 FD |                 jmp     #isr1_wait
3bbd0 0ed             | isr1_lsframe
3bbd0 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3bbd4 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3bbd8 0ef B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3bbdc 0f0             | .wait
3bbdc 0f0 40 46 72 FD |                 testp   dp                      wc
3bbe0 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3bbe4 0f2 23 03 08 FC |                 akpin   dp
3bbe8 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3bbec 0f4 A3 83 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3bbf0 0f5             | isr1_wait
3bbf0 0f5 22 A5 82 FA |                 rqpin   utx, dm
3bbf4 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3bbf8 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3bbfc 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3bc00 0f9 03 00 00 FF 
3bc04 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3bc08 0fb 1F 82 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3bc0c 0fc F5 FF 3B FB |                 reti1
3bc10 0fd             | 
3bc10 0fd             | '------------------------------------------------------------------------------
3bc10 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3bc10 0fd             | ' transaction will complete before the next frame is triggered.
3bc10 0fd             | '------------------------------------------------------------------------------
3bc10 0fd             | ' On entry:
3bc10 0fd             | ' On exit:
3bc10 0fd             | '------------------------------------------------------------------------------
3bc10 0fd             | wait_txn_ok
3bc10 0fd 1A 76 63 FD |                 getct   htmp2
3bc14 0fe 49 77 83 F1 |                 sub     htmp2, iframe_ct_base
3bc18 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3bc1c 100 A1 77 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3bc20 101 A2 77 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3bc24 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3bc28 103 2D 00 64 FD |                 ret
3bc2c 104             | 
3bc2c 104             | '------------------------------------------------------------------------------
3bc2c 104             | ' A device connection was detected, or a bus reset was requested by the USB
3bc2c 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3bc2c 104             | ' and perform a reset sequence prior to device enumeration.
3bc2c 104             | '------------------------------------------------------------------------------
3bc2c 104             | dev_reset
3bc2c 104 22 A7 82 FA |                 rqpin   urx, dm
3bc30 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3bc34 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3bc38 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3bc3c 108             | reset
3bc3c 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3bc40 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3bc44 10a 1F 5C 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3bc48 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3bc4c 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3bc50 10d 1A 92 62 FD |                 getct   iframe_ct_base
3bc54 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3bc58 10f B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3bc5c 110 59 73 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3bc60 111 24 72 07 F1 |                 add     htmp, #36
3bc64 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3bc68 113             | .framewait
3bc68 113 B9 B3 1A F2 |                 cmp     frame, htmp             wcz
3bc6c 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3bc70 115 2D 00 64 FD |                 ret
3bc74 116             | 
3bc74 116             | '------------------------------------------------------------------------------
3bc74 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3bc74 116             | '------------------------------------------------------------------------------
3bc74 116             | ' On entry:
3bc74 116             | '   PTRA - source address.
3bc74 116             | '   PB - destination address.
3bc74 116             | '   hr0 - length of copy, in bytes.
3bc74 116             | ' On exit:
3bc74 116             | '------------------------------------------------------------------------------
3bc74 116             | hmemcpy
3bc74 116 61 73 C7 FA |                 rdbyte  htmp, ptra++
3bc78 117 F7 73 43 FC |                 wrbyte  htmp, pb
3bc7c 118 01 EE 07 F1 |                 add     pb, #1
3bc80 119 FC 87 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3bc84 11a             | 
3bc84 11a             | '------------------------------------------------------------------------------
3bc84 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3bc84 11a             | ' loop until the errant device is disconnected.
3bc84 11a             | '------------------------------------------------------------------------------
3bc84 11a             | ' On entry:
3bc84 11a             | ' On exit:
3bc84 11a             | '------------------------------------------------------------------------------
3bc84 11a             | host_error
3bc84 11a             |           if ERROR_LED >= 0
3bc84 11a             |           end
3bc84 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3bc88 11b             | 
3bc88 11b             | '------------------------------------------------------------------------------
3bc88 11b             | ' Get HID descriptor buffer for current port
3bc88 11b             | '------------------------------------------------------------------------------
3bc88 11b             | ' On entry:
3bc88 11b             | ' On exit:
3bc88 11b             | '   PB - HID descriptor buffer pointer
3bc88 11b             | '------------------------------------------------------------------------------
3bc88 11b             | get_hid_descr_buffer
3bc88 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3bc8c 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3bc90 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3bc94 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3bc98 11f             | 
3bc98 11f             | 
3bc98 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3bc9c 120             | 
3bc9c 120             | ' USB commands and error codes
3bc9c 120 00 00 00 00 | cmd_data        long    0
3bca0 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3bca4 122             | 
3bca4 122             | ' Parameters block assigned at cog startup
3bca4 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3bca8 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3bcac 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3bcb0 125             | if ACTIVITY_LED >= 0
3bcb0 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3bcb0 125             | end
3bcb0 125             | if ERROR_LED >= 0
3bcb0 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3bcb0 125             | end
3bcb0 125 00 00 00 00 | hid_descr_p     long    0
3bcb4 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3bcb4 126             | 'hkbd_report_p   long    0
3bcb4 126 00 00 00 00 | hub_descr_p     long    0
3bcb8 127 00 00 00 00 | urx_buff_p      long    0
3bcbc 128 00 00 00 00 | dev_desc_buff_p long    0
3bcc0 129 00 00 00 00 | con_desc_buff_p long    0
3bcc4 12a 00 00 00 00 | cache_start_p   long    0
3bcc8 12b 00 00 00 00 | cache_end_p     long    0
3bccc 12c             | if EMUPAD_MAX_PLAYER > 0
3bccc 12c             | emupad_out_ptr  long    0
3bccc 12c             | end
3bccc 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3bcd0 12d             | 
3bcd0 12d             | hdev_init_start
3bcd0 12d             | hdev_port       res     1
3bcd0 12d             | hdev_port       res     1
3bcd0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3bcd0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3bcd0 12d             | kbm_next_datax  res     1
3bcd0 12d             | kbm_next_datax  res     1
3bcd0 12d             | hub_intf_num    res     1
3bcd0 12d             | hub_intf_num    res     1
3bcd0 12d             | hub_next_datax  res     1
3bcd0 12d             | hub_next_datax  res     1
3bcd0 12d             | hub_status_chg  res     1
3bcd0 12d             | hub_status_chg  res     1
3bcd0 12d             | hub_port_status res     1
3bcd0 12d             | hub_port_status res     1
3bcd0 12d             | if HAVE_MOUSE
3bcd0 12d             | ms_intf_num     res     1
3bcd0 12d             | ms_intf_num     res     1
3bcd0 12d             | ms_in_max_pkt   res     1
3bcd0 12d             | ms_in_max_pkt   res     1
3bcd0 12d             | end
3bcd0 12d             | kb_intf_num     res     1
3bcd0 12d             | kb_intf_num     res     1
3bcd0 12d             | kb_interval     res     1
3bcd0 12d             | kb_interval     res     1
3bcd0 12d             | kb_in_max_pkt   res     1
3bcd0 12d             | kb_in_max_pkt   res     1
3bcd0 12d             | kb_max_index    res     1
3bcd0 12d             | kb_max_index    res     1
3bcd0 12d             | kb_led_states   res     1
3bcd0 12d             | kb_led_states   res     1
3bcd0 12d             | gp_intf_num     res     1
3bcd0 12d             | gp_intf_num     res     1
3bcd0 12d             | gp_interval     res     1
3bcd0 12d             | gp_interval     res     1
3bcd0 12d             | gp_max_index    res     1
3bcd0 12d             | gp_max_index    res     1
3bcd0 12d             | gp_descr_len    res     1+MAX_DEVICES
3bcd0 12d             | gp_descr_len    res     1+MAX_DEVICES
3bcd0 12d             | hdev_init_end
3bcd0 12d             | 
3bcd0 12d             | ' Initialized at cog startup:
3bcd0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3bcd0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3bcd0 12d             | iframe_ct_new   res     1
3bcd0 12d             | iframe_ct_new   res     1
3bcd0 12d             | iframe_ct_base  res     1
3bcd0 12d             | iframe_ct_base  res     1
3bcd0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3bcd0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3bcd0 12d             | 
3bcd0 12d             | ' This register block is reset to zero when a USB device connects
3bcd0 12d             | hreg_init_start
3bcd0 12d             | hstatus         res     1         ' Host status flags
3bcd0 12d             | hstatus         res     1         ' Host status flags
3bcd0 12d             | hctwait         res     1         ' Poll-based wait clocks
3bcd0 12d             | hctwait         res     1         ' Poll-based wait clocks
3bcd0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3bcd0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3bcd0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3bcd0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3bcd0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3bcd0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3bcd0 12d             | xfer_retry      res     1         ' Control transfer retry count
3bcd0 12d             | xfer_retry      res     1         ' Control transfer retry count
3bcd0 12d             | retry           res     1         ' Transaction retry count
3bcd0 12d             | retry           res     1         ' Transaction retry count
3bcd0 12d             | utx             res     1         ' Byte to transmit on USB
3bcd0 12d             | utx             res     1         ' Byte to transmit on USB
3bcd0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3bcd0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3bcd0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3bcd0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3bcd0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3bcd0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3bcd0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3bcd0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3bcd0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3bcd0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3bcd0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3bcd0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3bcd0 12d             | frame           res     1         ' USB 1ms frame counter value
3bcd0 12d             | frame           res     1         ' USB 1ms frame counter value
3bcd0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3bcd0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3bcd0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3bcd0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3bcd0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3bcd0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3bcd0 12d             | crc             res     1         ' Used for CRC16 calculation
3bcd0 12d             | crc             res     1         ' Used for CRC16 calculation
3bcd0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3bcd0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3bcd0 12d             | retval          res     1         ' Global success/fail return parameter
3bcd0 12d             | retval          res     1         ' Global success/fail return parameter
3bcd0 12d             | context_retval  res     1         ' Operation contextual return parameter
3bcd0 12d             | context_retval  res     1         ' Operation contextual return parameter
3bcd0 12d             | ' Device stuff
3bcd0 12d             | hdev_id         res     1+MAX_DEVICES
3bcd0 12d             | hdev_id         res     1+MAX_DEVICES
3bcd0 12d             | hdev_bcd        res     1
3bcd0 12d             | hdev_bcd        res     1
3bcd0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3bcd0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3bcd0 12d             | ' Keyboard/mouse stuff
3bcd0 12d             | hctrl_ep_addr   res     1
3bcd0 12d             | hctrl_ep_addr   res     1
3bcd0 12d             | hctrl_max_pkt   res     1
3bcd0 12d             | hctrl_max_pkt   res     1
3bcd0 12d             | hconfig_base    res     1
3bcd0 12d             | hconfig_base    res     1
3bcd0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3bcd0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3bcd0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3bcd0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3bcd0 12d             | hdev_class      res     1
3bcd0 12d             | hdev_class      res     1
3bcd0 12d             | hdev_subclass   res     1
3bcd0 12d             | hdev_subclass   res     1
3bcd0 12d             | hdev_protocol   res     1
3bcd0 12d             | hdev_protocol   res     1
3bcd0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3bcd0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3bcd0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3bcd0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3bcd0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3bcd0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3bcd0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3bcd0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3bcd0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3bcd0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3bcd0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3bcd0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3bcd0 12d             | if HAVE_MOUSE
3bcd0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3bcd0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3bcd0 12d             | end
3bcd0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3bcd0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3bcd0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3bcd0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3bcd0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3bcd0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3bcd0 12d             | hdev_out_addr   res     1
3bcd0 12d             | hdev_out_addr   res     1
3bcd0 12d             | 
3bcd0 12d             | if EMUPAD_MAX_PLAYER > 0
3bcd0 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3bcd0 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3bcd0 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3bcd0 12d             | end
3bcd0 12d             | 
3bcd0 12d             | hreg_init_end
3bcd0 12d             | 
3bcd0 12d             | hidr_start
3bcd0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3bcd0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3bcd0 12d             | hidr_flags      res     1
3bcd0 12d             | hidr_flags      res     1
3bcd0 12d             | hidr_axis       res     4
3bcd0 12d             | hidr_axis       res     4
3bcd0 12d             | hidr_buttons    res     1
3bcd0 12d             | hidr_buttons    res     1
3bcd0 12d             | hidr_hats       res     1
3bcd0 12d             | hidr_hats       res     1
3bcd0 12d             | '' Above are actually useful values, 6 longs
3bcd0 12d             | hidr_type       res     1
3bcd0 12d             | hidr_type       res     1
3bcd0 12d             | hidr_id         res     1
3bcd0 12d             | hidr_id         res     1
3bcd0 12d             | hidr_offset     res     1
3bcd0 12d             | hidr_offset     res     1
3bcd0 12d             | hidr_usage_idx  res     1
3bcd0 12d             | hidr_usage_idx  res     1
3bcd0 12d             | ' below need to be push/pop'd
3bcd0 12d             | hidr_state      res     1
3bcd0 12d             | hidr_state      res     1
3bcd0 12d             | hidr_size       res     1
3bcd0 12d             | hidr_size       res     1
3bcd0 12d             | hidr_count      res     1
3bcd0 12d             | hidr_count      res     1
3bcd0 12d             | hidr_lminmax    res     1
3bcd0 12d             | hidr_lminmax    res     1
3bcd0 12d             | hidr_pminmax    res     1
3bcd0 12d             | hidr_pminmax    res     1
3bcd0 12d             | hidr_end
3bcd0 12d             | 
3bcd0 12d             | ' Variables dependent on the system freqency
3bcd0 12d             | _var_64_lower_  res     1
3bcd0 12d             | _var_64_lower_  res     1
3bcd0 12d             | _var_64_upper_  res     1
3bcd0 12d             | _var_64_upper_  res     1
3bcd0 12d             | _12Mbps_        res     1
3bcd0 12d             | _12Mbps_        res     1
3bcd0 12d             | _1_5Mbps_       res     1
3bcd0 12d             | _1_5Mbps_       res     1
3bcd0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3bcd0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3bcd0 12d             | _1us_           res     1         ' 1us
3bcd0 12d             | _1us_           res     1         ' 1us
3bcd0 12d             | _10us_          res     1         ' 10us
3bcd0 12d             | _10us_          res     1         ' 10us
3bcd0 12d             | _33us_          res     1         ' 33us
3bcd0 12d             | _33us_          res     1         ' 33us
3bcd0 12d             | _txn_err_       res     1         ' 250us
3bcd0 12d             | _txn_err_       res     1         ' 250us
3bcd0 12d             | _500us_         res     1         ' 500us
3bcd0 12d             | _500us_         res     1         ' 500us
3bcd0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3bcd0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3bcd0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3bcd0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3bcd0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3bcd0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3bcd0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3bcd0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3bcd0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3bcd0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3bcd0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3bcd0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3bcd0 12d             | _preamble_wait_ res     1
3bcd0 12d             | _preamble_wait_ res     1
3bcd0 12d             | _1ms_           res     1         ' 1ms
3bcd0 12d             | _1ms_           res     1         ' 1ms
3bcd0 12d             | _2ms_           res     1         ' 2ms
3bcd0 12d             | _2ms_           res     1         ' 2ms
3bcd0 12d             | _suspend_wait_  res     1         ' 3ms
3bcd0 12d             | _suspend_wait_  res     1         ' 3ms
3bcd0 12d             | _4ms_           res     1         ' 4ms
3bcd0 12d             | _4ms_           res     1         ' 4ms
3bcd0 12d             | _xfer_wait_     res     1         ' 5ms
3bcd0 12d             | _xfer_wait_     res     1         ' 5ms
3bcd0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3bcd0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3bcd0 12d             | _reset_hold_    res     1         ' 15ms
3bcd0 12d             | _reset_hold_    res     1         ' 15ms
3bcd0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3bcd0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3bcd0 12d             | _21ms_          res     1         ' 21ms
3bcd0 12d             | _21ms_          res     1         ' 21ms
3bcd0 12d             | _100ms_         res     1         ' 100ms
3bcd0 12d             | _100ms_         res     1         ' 100ms
3bcd0 12d             | _500ms_         res     1         ' 500ms
3bcd0 12d             | _500ms_         res     1         ' 500ms
3bcd0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3bcd0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3bcd0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3bcd0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3bcd0 12d             | '------------------------------------------------------------------------------
3bcd0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3bcd0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3bcd0 12d             | _usb_d_ls_nco_  res     1
3bcd0 12d             | _usb_d_ls_nco_  res     1
3bcd0 12d             | _usb_h_fs_nco_  res     1
3bcd0 12d             | _usb_h_fs_nco_  res     1
3bcd0 12d             | _usb_d_fs_nco_  res     1
3bcd0 12d             | _usb_d_fs_nco_  res     1
3bcd0 12d             | '------------------------------------------------------------------------------
3bcd0 12d             | ' Scratch registers
3bcd0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3bcd0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3bcd0 12d             | htmp1           res     1
3bcd0 12d             | htmp1           res     1
3bcd0 12d             | htmp2           res     1
3bcd0 12d             | htmp2           res     1
3bcd0 12d             | htmp3           res     1
3bcd0 12d             | htmp3           res     1
3bcd0 12d             | hrep            res     1         ' Repeat count
3bcd0 12d             | hrep            res     1         ' Repeat count
3bcd0 12d             | hsave0          res     1         ' Subroutine parameter saves
3bcd0 12d             | hsave0          res     1         ' Subroutine parameter saves
3bcd0 12d             | hsave1          res     1
3bcd0 12d             | hsave1          res     1
3bcd0 12d             | hsave2          res     1
3bcd0 12d             | hsave2          res     1
3bcd0 12d             | isrtmp1         res     1
3bcd0 12d             | isrtmp1         res     1
3bcd0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3bcd0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3bcd0 12d             | hr0             res     1         ' Multi-purpose registers
3bcd0 12d             | hr0             res     1         ' Multi-purpose registers
3bcd0 12d             | hr1             res     1
3bcd0 12d             | hr1             res     1
3bcd0 12d             | hr2             res     1
3bcd0 12d             | hr2             res     1
3bcd0 12d             | hr3             res     1
3bcd0 12d             | hr3             res     1
3bcd0 12d             | hpar1           res     1         ' Routine entry/exit parameters
3bcd0 12d             | hpar1           res     1         ' Routine entry/exit parameters
3bcd0 12d             | hpar2           res     1
3bcd0 12d             | hpar2           res     1
3bcd0 12d             | hpar3           res     1
3bcd0 12d             | hpar3           res     1
3bcd0 12d             | hct2            res     1         ' Function response bus turn-around timer
3bcd0 12d             | hct2            res     1         ' Function response bus turn-around timer
3bcd0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3bcd0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3bcd0 12d             | mod_cnt         res     1         ' Used in idle loops
3bcd0 12d             | mod_cnt         res     1         ' Used in idle loops
3bcd0 12d             | 
3bcd0 12d             |                 fit     $1F0
3bcd0 12d             |                 fit     $1F0
3bcd0 12d             |                 org     $200
3bcd0 200             | hlut_start
3bcd0 200             | 
3bcd0 200             | '------------------------------------------------------------------------------
3bcd0 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3bcd0 200             | ' settings to startup defaults.
3bcd0 200             | '------------------------------------------------------------------------------
3bcd0 200             | ' On entry:
3bcd0 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3bcd0 200             | '------------------------------------------------------------------------------
3bcd0 200             | set_speed_full
3bcd0 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3bcd4 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3bcd8 202 A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3bcdc 203 A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3bce0 204             | '                ret                             wcz     ' Restore caller flags on exit
3bce0 204             | 
3bce0 204             | '------------------------------------------------------------------------------
3bce0 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3bce0 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3bce0 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3bce0 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3bce0 204             | ' putting the smart pins into reset.
3bce0 204             | '------------------------------------------------------------------------------
3bce0 204             | ' On entry:
3bce0 204             | ' On exit: CZ flags restored to caller states
3bce0 204             | '------------------------------------------------------------------------------
3bce0 204             | set_speed_low
3bce0 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3bce4 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3bce8 206 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3bcec 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3bcf0 208 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3bcf4 209 A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3bcf8 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3bcfc 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3bd00 20c             | 
3bd00 20c             | '------------------------------------------------------------------------------
3bd00 20c             | ' Perform configuration stuff required when a device intitially connects.
3bd00 20c             | '------------------------------------------------------------------------------
3bd00 20c             | ' On entry:
3bd00 20c             | ' On exit:
3bd00 20c             | '------------------------------------------------------------------------------
3bd00 20c             | on_connect
3bd00 20c 02 86 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3bd04 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3bd08 20e             | .retry
3bd08 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3bd0c 20f 01 8E 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3bd10 210 02 8E 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3bd14 211 00 08 00 FF 
3bd18 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3bd1c 213 20 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3bd20 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bd24 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3bd28 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3bd2c 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3bd30 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bd34 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3bd38 21a B2 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3bd3c 21b 4C 03 B0 FD |                 call    #poll_waitx
3bd40 21c 01 86 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3bd44 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3bd48 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3bd4c 21f B8 FF 9F FD |                 jmp     #.retry
3bd50 220             | .get_dev_desc
3bd50 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3bd54 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3bd58 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3bd5c 223 A8 99 02 F6 |                 mov     hctwait, _1ms_
3bd60 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3bd64 225 88 FB BF FD |                 call    #reset
3bd68 226 38 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3bd6c 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bd70 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3bd74 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3bd78 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bd7c 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3bd80 22c AD 99 02 F6 |                 mov     hctwait, _8ms_
3bd84 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3bd88 22e 04 00 00 FF 
3bd8c 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3bd90 230 34 FA BF FD |                 call    #calc_crc5
3bd94 231 20 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3bd98 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bd9c 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3bda0 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3bda4 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3bda8 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3bdac 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bdb0 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3bdb4 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3bdb8 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3bdbc 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3bdc0 23c A0 99 02 F6 |                 mov     hctwait, _500us_
3bdc4 23d C4 02 B0 FD |                 call    #poll_waitx
3bdc8 23e 28 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3bdcc 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3bdd0 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3bdd4 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3bdd8 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3bddc 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bde0 244 2D 00 64 5D |         if_nz   ret
3bde4 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3bde8 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3bdec 247 61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3bdf0 248 61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3bdf4 249 00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3bdf8 24a 09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3bdfc 24b 02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3be00 24c 56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
3be04 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3be08 24e 2C FB 9F CD |         if_b    jmp     #host_error
3be0c 24f 24 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3be10 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3be14 251 2D EC 63 FD |                 call    pa
3be18 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3be1c 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3be20 254 2C EC 63 FD |                 jmp     pa
3be24 255             | 
3be24 255             | '------------------------------------------------------------------------------
3be24 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3be24 255             | ' Status reporting is always in the function-to-host direction.
3be24 255             | '------------------------------------------------------------------------------
3be24 255             | ' On entry:
3be24 255             | '   PTRA - start address of the SETUP data in hub.
3be24 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3be24 255             | '     stage.
3be24 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3be24 255             | ' On exit:
3be24 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3be24 255             | '     contains the count of data stage bytes actually received, which must
3be24 255             | '     always be <= the count requested.
3be24 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3be24 255             | '     more specific USB operation error code.
3be24 255             | '------------------------------------------------------------------------------
3be24 255             | control_read
3be24 255 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
3be28 256 F8 91 03 F6 |                 mov     hpar2, ptra
3be2c 257 F7 93 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3be30 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3be34 259             | .xfer_start
3be34 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3be38 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3be3c 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3be40 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3be44 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3be48 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3be4c 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3be50 260 61 00 00 FF 
3be54 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3be58 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3be5c 263             | .data
3be5c 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3be60 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3be64 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3be68 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3be6c 267             | .nak_retry
3be6c 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3be70 268             | .in_retry
3be70 268 BC F6 BF FD |                 call    #txn_in
3be74 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3be78 26a 28 00 90 AD |         if_z    jmp     #.commit
3be7c 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3be80 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3be84 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3be88 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3be8c 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3be90 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3be94 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3be98 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3be9c 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3bea0 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3bea4 275             | .commit
3bea4 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3bea8 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3beac 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3beb0 278 5C 87 03 F6 |                 mov     hr0, pkt_cnt
3beb4 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3beb8 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3bebc 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3bec0 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3bec4 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3bec8 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3becc 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3bed0 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3bed4 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3bed8 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3bedc 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3bee0 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3bee4 285             | .pre_status
3bee4 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3bee8 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3beec 287 00 B0 06 F6 |                 mov     pkt_data, #0
3bef0 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3bef4 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3bef8 28a 61 00 00 FF 
3befc 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3bf00 28c             | .out_retry
3bf00 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3bf04 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bf08 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3bf0c 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3bf10 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3bf14 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3bf18 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3bf1c 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3bf20 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3bf24 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3bf28 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3bf2c 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3bf2c 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3bf2c 297             | ' ControlRead() transfer gets things unstuck most of the time...
3bf2c 297             | .xfer_retry
3bf2c 297 AC 99 02 F6 |                 mov     hctwait, _xfer_wait_
3bf30 298 58 01 B0 FD |                 call    #poll_waitx
3bf34 299 8C F9 BF FD |                 call    #wait_txn_ok
3bf38 29a C7 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3bf3c 29b C8 F1 03 F6 |                 mov     ptra, hpar2
3bf40 29c C9 EF 03 F6 |                 mov     pb, hpar3
3bf44 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3bf48 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3bf4c 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3bf50 2a0             | 
3bf50 2a0             | '------------------------------------------------------------------------------
3bf50 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3bf50 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3bf50 2a0             | ' the SETUP data struct is filled with the required values.
3bf50 2a0             | '------------------------------------------------------------------------------
3bf50 2a0             | ' On entry:
3bf50 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3bf50 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3bf50 2a0             | '     stage.
3bf50 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3bf50 2a0             | ' On exit:
3bf50 2a0             | '   retval - used to convey the success/failure of each stage.
3bf50 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3bf50 2a0             | '     more specific USB operation error code.
3bf50 2a0             | '------------------------------------------------------------------------------
3bf50 2a0             | control_write
3bf50 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3bf54 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3bf58 2a2 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3bf5c 2a3             | 
3bf5c 2a3 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
3bf60 2a4 F8 91 03 F6 |                 mov     hpar2, ptra
3bf64 2a5 F7 93 03 F6 |                 mov     hpar3, pb
3bf68 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3bf6c 2a7             | .xfer_start
3bf6c 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3bf70 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3bf74 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3bf78 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bf7c 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3bf80 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3bf84 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3bf88 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3bf8c 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3bf90 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3bf94 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3bf98 2b2             | .data
3bf98 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3bf9c 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3bfa0 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3bfa4 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3bfa8 2b6             | .out_retry
3bfa8 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3bfac 2b7 88 F6 BF FD |                 call    #txn_out
3bfb0 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bfb4 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3bfb8 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3bfbc 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3bfc0 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3bfc4 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3bfc8 2be             | .commit
3bfc8 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3bfcc 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3bfd0 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3bfd4 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3bfd8 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3bfdc 2c3             | pre_status_in
3bfdc 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3bfe0 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3bfe4 2c5             | .status_retry
3bfe4 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3bfe8 2c6 44 F5 BF FD |                 call    #txn_in
3bfec 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3bff0 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3bff4 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3bff8 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3bffc 2cb 2D 00 64 AD |         if_z    ret
3c000 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3c004 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3c008 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3c00c 2cf             | '               ret                                     ' Caller must handle transfer retirement
3c00c 2cf             | 
3c00c 2cf             | '------------------------------------------------------------------------------
3c00c 2cf             | ' Execute an IN interrupt transaction.
3c00c 2cf             | '------------------------------------------------------------------------------
3c00c 2cf             | ' On entry:
3c00c 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3c00c 2cf             | '   hpar2 - Address of the IN data buffer
3c00c 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3c00c 2cf             | ' On exit:
3c00c 2cf             | '   retval - the result of the operation.
3c00c 2cf             | '   hpar3 - the count of IN data bytes actually received.
3c00c 2cf             | '------------------------------------------------------------------------------
3c00c 2cf             | do_int_in
3c00c 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3c010 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3c014 2d1 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3c018 2d2             | 
3c018 2d2 C9 73 33 F9 |                 getword htmp, hpar3, #0
3c01c 2d3 C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3c020 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3c024 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3c028 2d6             | .retry
3c028 2d6 C9 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3c02c 2d7 00 F5 BF FD |                 call    #txn_in
3c030 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3c034 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3c038 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3c03c 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3c040 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3c044 2dd 54 00 B0 FD |                 call    #retry_wait
3c048 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3c04c 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3c050 2e0 D4 FF 9F FD |                 jmp     #.retry
3c054 2e1             | .commit
3c054 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3c058 2e2 C8 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3c05c 2e3 5C 87 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3c060 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3c064 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3c068 2e6             | .post_ret
3c068 2e6 5C 93 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3c06c 2e7             | 
3c06c 2e7             | 
3c06c 2e7             | '------------------------------------------------------------------------------
3c06c 2e7             | ' Resets the downstream hub port to FS
3c06c 2e7             | '------------------------------------------------------------------------------
3c06c 2e7             | dwnstream_reset
3c06c 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3c070 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3c074 2e9             | 
3c074 2e9 0E 6A 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3c078 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3c07c 2eb 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3c080 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3c084 2ed A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3c088 2ee A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3c08c 2ef             | 
3c08c 2ef             | '------------------------------------------------------------------------------
3c08c 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3c08c 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3c08c 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3c08c 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3c08c 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3c08c 2ef             | '------------------------------------------------------------------------------
3c08c 2ef             | ' On entry:
3c08c 2ef             | '   hctwait - wait interval in sysclocks.
3c08c 2ef             | ' On exit:
3c08c 2ef             | '------------------------------------------------------------------------------
3c08c 2ef             | poll_waitx
3c08c 2ef 1A 94 63 FD |                 getct   hct2
3c090 2f0 4C 95 6B FA |                 addct2  hct2, hctwait
3c094 2f1             | .wait
3c094 2f1 FF 25 CC FB |                 jnct2   #.wait
3c098 2f2 2D 00 64 FD |                 ret
3c09c 2f3             | 
3c09c 2f3             | '------------------------------------------------------------------------------
3c09c 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3c09c 2f3             | '------------------------------------------------------------------------------
3c09c 2f3             | ' On entry:
3c09c 2f3             | '   retval - transaction response PID or error code.
3c09c 2f3             | ' On exit:
3c09c 2f3             | '------------------------------------------------------------------------------
3c09c 2f3             | retry_wait
3c09c 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3c0a0 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3c0a4 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3c0a8 2f6 14 00 90 AD |         if_z    jmp     #.nak
3c0ac 2f7 9F 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3c0b0 2f8 D8 FF BF FD |                 call    #poll_waitx
3c0b4 2f9             | .dec
3c0b4 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3c0b8 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3c0bc 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3c0c0 2fc             | .nak
3c0c0 2fc 9E 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3c0c4 2fd C4 FF BF FD |                 call    #poll_waitx
3c0c8 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3c0cc 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3c0d0 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3c0d4 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3c0d8 302 2D 00 64 FD |                 ret
3c0dc 303             | 
3c0dc 303             | host_reset
3c0dc 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3c0e0 304 14 72 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3c0e4 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3c0e4 305 BD 01 05 FF 
3c0e8 306 00 72 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3c0ec 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3c0f0 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3c0f4 309             | ' Check to see if the system clock has been changed.
3c0f4 309 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
3c0f8 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3c0fc 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3c100 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3c104 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3c108 30e 40 46 62 FD |                 dirl    dp
3c10c 30f             | 
3c10c 30f 28 02 64 FD |                 setq    #1
3c110 310 80 00 80 FF 
3c114 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3c118 312 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3c11c 313             | .enable
3c11c 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3c120 314 41 46 62 FD |                 dirh    dp
3c124 315 1F 38 63 FD |                 waitx   _1us_
3c128 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c12c 317             | 
3c12c 317             |                 ' Handle Port protection enable and startup delay
3c12c 317 00 48 56 F2 |                 cmps    usb_enable_pin, #0      wc
3c130 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3c134 319 1F 60 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3c138 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3c13c 31b 1F 60 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3c140 31c             | 
3c140 31c             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3c140 31c             | 
3c140 31c             | discon_entry
3c140 31c 03 98 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3c144 31d             | 
3c144 31d 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3c148 31e 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3c14c 31f 38 EC A7 F9 |                 alti    pa, #%000_111_000
3c150 320 00 00 04 F6 |                 mov     0-0, #0
3c154 321             | .regloop
3c154 321             |               
3c154 321             |         if HAVE_HIDPAD
3c154 321 F8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3c158 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3c15c 323 28 6E 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3c160 324 F7 01 68 FC |                 wrlong  #0,pb
3c164 325             |         end
3c164 325             |         if EMUPAD_MAX_PLAYER > 0
3c164 325             |         end
3c164 325             | 
3c164 325             |                 ' Fall through to disconnected loop
3c164 325             | 
3c164 325             | '-----------------------------------------------------------------------------------------------------------------
3c164 325             | ' Device connect handling (Section 7.1.7.3).
3c164 325             | '-----------------------------------------------------------------------------------------------------------------
3c164 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3c164 325             | ' device to connect (Section 7.1.7.3).
3c164 325             | '-----------------------------------------------------------------------------------------------------------------
3c164 325             | disconnected
3c164 325 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3c168 326 2C 89 0B F2 |                 cmp     hr1, save_sysclk        wz
3c16c 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3c170 328 03 88 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3c174 329 1F 88 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3c178 32a             |         if ACTIVITY_LED >= 0
3c178 32a             |         end
3c178 32a 22 A7 82 FA |                 rqpin   urx, dm
3c17c 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3c180 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3c184 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3c188 32e             | .se1_test
3c188 32e B1 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3c18c 32f FC FE BF FD |                 call    #poll_waitx
3c190 330 22 A7 82 FA |                 rqpin   urx, dm
3c194 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3c198 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3c19c 333 A0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3c1a0 334             | .se1            'SE1 is a fatal error condition
3c1a0 334 B1 99 02 F6 |                 mov     hctwait, _100ms_
3c1a4 335 E4 FE BF FD |                 call    #poll_waitx
3c1a8 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3c1ac 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3c1b0 338             | .connect_test                                           ' Test lines until stable J/K state seen
3c1b0 338 1F 62 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3c1b4 339 22 A7 82 FA |                 rqpin   urx, dm
3c1b8 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3c1bc 33b 80 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3c1c0 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3c1c4 33d             | connected
3c1c4 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3c1c8 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3c1cc 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3c1d0 340 6C FF 9F 5D |         if_nz   jmp     #discon_entry
3c1d4 341             | .set_pulse
3c1d4 341 1A 66 63 FD |                 getct   _pulse_time_
3c1d8 342 B2 67 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3c1dc 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3c1dc 343             | ' of 1ms and make a correction, if necessary.
3c1dc 343             | '                mov     htmp, _1ms_
3c1dc 343             | '                subs    htmp, iframe_delta
3c1dc 343             | '                adds    _frame1ms_clks_, htmp
3c1dc 343             | '                debug(udec(_frame1ms_clks_))
3c1dc 343             | 
3c1dc 343             |                 ' Fall through to idle/processing loop
3c1dc 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3c1e0 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3c1e4 345             | 
3c1e4 345             | hidle
3c1e4 345 22 A7 82 FA |                 rqpin   urx, dm
3c1e8 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3c1ec 347 98 00 90 CD |         if_c    jmp     #.se0_test
3c1f0 348 24 06 70 FD |                 pollct3                         wc
3c1f4 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3c1f8 34a 1A 96 63 FD |                 getct   hct3
3c1fc 34b A8 97 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3c200 34c             | 
3c200 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3c204 34d 00 72 E3 F8 |                 getbyte htmp
3c208 34e             | 
3c208 34e 09 72 0F F2 |                 cmp     htmp, #HUB_READY        wz
3c20c 34f 8C 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3c210 350 40 00 90 AD |         if_z    jmp     #.poll
3c214 351             | 
3c214 351             |         if _HAVE_GAMEPAD
3c214 351 06 72 0F F2 |                 cmp     htmp, #HID_READY        wz
3c218 352 08 72 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3c21c 353 07 72 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3c220 354 F4 15 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3c224 355 2C 00 90 AD |         if_z    jmp     #.poll
3c228 356             |         end
3c228 356             | 
3c228 356             |         if HAVE_MOUSE
3c228 356 04 72 0F F2 |                 cmp     htmp, #M_READY          wz
3c22c 357 44 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3c230 358 20 00 90 AD |         if_z    jmp     #.poll
3c234 359             |         end
3c234 359             | 
3c234 359 03 72 0F F2 |                 cmp     htmp, #KB_READY         wz
3c238 35a AC 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3c23c 35b 14 00 90 AD |         if_z    jmp     #.poll
3c240 35c             | 
3c240 35c 05 72 0F F2 |                 cmp     htmp, #KBM_READY        wz
3c244 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3c248 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3c24c 35f AC 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3c250 360             |         if HAVE_MOUSE
3c250 360 44 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3c254 361             |         else
3c254 361             |         end
3c254 361             | 
3c254 361             | .poll
3c254 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3c258 362 2D EC 63 FD |                 call    pa
3c25c 363             | .skip_poll
3c25c 363             | 
3c25c 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3c260 364             | 
3c260 364             | .nopoll
3c260 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3c264 365 44 00 90 AD |         if_z    jmp     #hsuspend
3c268 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3c26c 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3c270 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3c274 369 1A 86 63 FD |                 getct   hr0
3c278 36a B3 87 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3c27c 36b             |         if ACTIVITY_LED >= 0
3c27c 36b             |         end
3c27c 36b 1A 66 63 3D |         if_ae   getct   _pulse_time_
3c280 36c B2 67 03 31 |         if_ae   add     _pulse_time_, _500ms_
3c284 36d 5C FF 9F FD |                 jmp     #hidle
3c288 36e             | ' Check for extended SE0 state on the bus
3c288 36e             | .se0_test
3c288 36e A8 99 02 F6 |                 mov     hctwait, _1ms_
3c28c 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3c290 370 22 A7 82 FA |                 rqpin   urx, dm
3c294 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3c298 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3c29c 373 24 F6 BF FD |                 call    #wait_txn_ok
3c2a0 374 00 00 80 FF 
3c2a4 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3c2a8 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3c2a8 376 94 FE 9F FD |                 jmp     #discon_entry                   ' Device disconnected
3c2ac 377             | 
3c2ac 377             | hsuspend
3c2ac 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3c2b0 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3c2b4 379 1F 54 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3c2b8 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3c2bc 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3c2c0 37c 00 98 07 F6 |                 mov     mod_cnt, #0
3c2c4 37d             | 
3c2c4 37d             |                 ' Fall through to resume wait loop
3c2c4 37d             | 
3c2c4 37d             | hwait_resume
3c2c4 37d 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3c2c8 37e 02 88 47 F0 |                 shr     hr1, #2
3c2cc 37f 1F 88 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3c2d0 380             |         if ACTIVITY_LED >= 0
3c2d0 380             |         end
3c2d0 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3c2d4 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3c2d8 382 14 72 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3c2dc 383 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
3c2e0 384 18 00 90 AD |         if_z    jmp     #.resume
3c2e4 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3c2e8 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3c2ec 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3c2f0 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3c2f4 389 22 6F 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3c2f8 38a 22 6B 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3c2fc 38b             | .resume
3c2fc 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3c300 38c 1F 5E 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3c304 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3c308 38e A3 73 03 F6 |                 mov     htmp, _ip_delay_ls_
3c30c 38f 01 72 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3c310 390 1F 72 63 FD |                 waitx   htmp
3c314 391 22 07 28 FC |                 wypin   #OUT_J, dm
3c318 392 01 72 47 F0 |                 shr     htmp, #1
3c31c 393 1F 72 63 FD |                 waitx   htmp
3c320 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c324 395 1A 92 62 FD |                 getct   iframe_ct_base
3c328 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3c32c 397 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3c330 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3c334 399 AB 99 02 F6 |                 mov     hctwait, _4ms_
3c338 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3c33c 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3c340 39c             | 
3c340 39c             | '------------------------------------------------------------------------------
3c340 39c             | ' Send preamble to enable low-speed HUB ports
3c340 39c             | '------------------------------------------------------------------------------
3c340 39c             | ' On entry:
3c340 39c             | ' On exit:
3c340 39c             | '   USB baud rate set to low-speed
3c340 39c             | '------------------------------------------------------------------------------
3c340 39c             | utx_pre
3c340 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3c344 39d 40 46 62 FD |                 dirl    dp
3c348 39e 28 02 64 FD |                 setq    #1
3c34c 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3c350 3a0 58 44 62 FD |                 drvl    dm
3c354 3a1 59 46 62 FD |                 drvh    dp
3c358 3a2             | 
3c358 3a2 1E 00 00 FF 
3c35c 3a3 80 72 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3c360 3a4             | 
3c360 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3c364 3a5 01 72 57 F0 |                 shr     htmp, #1        wc
3c368 3a6 28 02 64 3D |         if_nc   setq    #1
3c36c 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3c370 3a8 1F 4E 63 FD |                 waitx   _preamble_wait_
3c374 3a9             | .l1
3c374 3a9             | 
3c374 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3c378 3aa 40 46 62 FD |                 dirl    dp
3c37c 3ab 28 02 64 FD |                 setq    #1
3c380 3ac 80 00 80 FF 
3c384 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3c388 3ae 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3c38c 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3c390 3b0 41 46 62 FD |                 dirh    dp
3c394 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c398 3b2             | 
3c398 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3c39c 3b3 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3c3a0 3b4 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3c3a4 3b5             | 
3c3a4 3b5             | hlut_end
3c3a4 3b5             |                 fit     $400
3c3a4 3b5             |                 fit     $400
3c3a4 3b5             |                 orgh
3c3a4                 | if OVERLAP_MEMORY
3c3a4                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3c3a4                 | end
3c3a4                 | '------------------------------------------------------------------------------
3c3a4                 | ' Routines called from cog space.
3c3a4                 | '------------------------------------------------------------------------------
3c3a4                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3c3a4                 | '------------------------------------------------------------------------------
3c3a4                 | 
3c3a4                 | '------------------------------------------------------------------------------
3c3a4                 | ' USB host cog initialization.
3c3a4                 | '------------------------------------------------------------------------------
3c3a4                 | usb_host_init
3c3a4                 |                 ' Initialize buffer pointers
3c3a4                 |         if OVERLAP_MEMORY
3c3a4                 |         else
3c3a4     4C 15 B0 FE |                 loc     pb, #hid_descr
3c3a8                 |         end
3c3a8     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3c3ac                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3c3ac                 |                 {
3c3ac                 |                 }
3c3ac                 |         
3c3ac                 |                 {
3c3ac                 |                 }
3c3ac                 |                 'loc     pb,#hkbd_report
3c3ac                 |                 'mov     hkbd_report_p,pb
3c3ac                 | 
3c3ac     44 1D B0 FE |                 loc     pb, #hub_descr
3c3b0     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3c3b4     59 1D B0 FE |                 loc     pb, #urx_buff
3c3b8     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3c3bc     D1 1D B0 FE |                 loc     pb, #dev_desc_buff
3c3c0     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3c3c4     DB 1D B0 FE |                 loc     pb, #con_desc_buff
3c3c8     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3c3cc     24 15 B0 FE |                 loc     pb, #usb_cache_start
3c3d0     F7 55 02 F6 |                 mov     cache_start_p, pb
3c3d4     25 1D B0 FE |                 loc     pb, #usb_cache_end
3c3d8     F7 57 02 F6 |                 mov     cache_end_p, pb
3c3dc                 | 
3c3dc                 |         if ERROR_LED >= 0
3c3dc                 |         end
3c3dc                 | 
3c3dc                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3c3dc                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3c3dc                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3c3dc                 | ' Configure and enable the Serial Host USB port.
3c3dc     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3c3e0                 | 
3c3e0                 | '------------------------------------------------------------------------------
3c3e0                 | ' Timing calculations happen before any interrupt(s) are enabled.
3c3e0                 | '------------------------------------------------------------------------------
3c3e0                 | ' On entry:
3c3e0                 | '   htmp - current CLKFREQ value.
3c3e0                 | '------------------------------------------------------------------------------
3c3e0                 | hinit_usb_timings
3c3e0                 | '                getct   htmp2
3c3e0     B9 59 02 F6 |                 mov     save_sysclk, htmp
3c3e4     8D 5B 80 FF 
3c3e8     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3c3ec     18 32 63 FD |                 getqx   _12Mbps_
3c3f0     10 32 57 F0 |                 shr     _12Mbps_, #16           wc
3c3f4     00 32 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3c3f8     03 6E 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3c3fc     0E 6E 67 F0 |                 shl     _usb_h_fs_nco_, #14
3c400     99 6F 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3c404     01 70 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3c408     0E 70 67 F0 |                 shl     _usb_d_fs_nco_, #14
3c40c     99 71 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3c410     99 35 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3c414     03 34 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3c418     02 6A 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3c41c     0E 6A 67 F0 |                 shl     _usb_h_ls_nco_, #14
3c420     9A 6B 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3c424     9A 6D 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3c428     80 00 00 FF 
3c42c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3c430     18 2E 63 FD |                 getqx   _var_64_lower_
3c434     19 30 63 FD |                 getqy   _var_64_upper_
3c438     28 2E 63 FD |                 setq    _var_64_lower_
3c43c     65 CD 1D FF 
3c440     00 30 27 FD |                 qfrac   _var_64_upper_, ##_1b
3c444     18 36 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3c448     01 00 00 FF 
3c44c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3c450     18 2E 63 FD |                 getqx   _var_64_lower_
3c454     19 30 63 FD |                 getqy   _var_64_upper_
3c458     28 2E 63 FD |                 setq    _var_64_lower_
3c45c     A1 07 00 FF 
3c460     40 30 27 FD |                 qfrac   _var_64_upper_, ##_1m
3c464     18 38 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3c468     9C 7D 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3c46c     09 38 57 F0 |                 shr     _1us_, #9               wc
3c470     00 38 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3c474     0A 7C 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3c478     18 3A 63 FD |                 getqx   _10us_
3c47c     09 3A 57 F0 |                 shr     _10us_, #9              wc
3c480     00 3A 27 F1 |                 addx    _10us_, #0                      ' 10us
3c484     21 7C 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3c488     18 3C 63 FD |                 getqx   _33us_
3c48c     09 3C 57 F0 |                 shr     _33us_, #9              wc
3c490     00 3C 27 F1 |                 addx    _33us_, #0                      ' 33us
3c494     FA 7C 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3c498     18 3E 63 FD |                 getqx   _txn_err_
3c49c     09 3E 57 F0 |                 shr     _txn_err_, #9           wc
3c4a0     00 3E 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3c4a4     F4 7D 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3c4a8     18 40 63 FD |                 getqx   _500us_
3c4ac     09 40 57 F0 |                 shr     _500us_, #9             wc
3c4b0     00 40 27 F1 |                 addx    _500us_, #0                     ' 500us
3c4b4     01 00 00 FF 
3c4b8     9A 7C 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3c4bc     18 42 63 FD |                 getqx   _txn_ok_ls_
3c4c0     09 42 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3c4c4     00 42 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3c4c8     01 00 00 FF 
3c4cc     52 7D 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3c4d0     18 44 63 FD |                 getqx   _txn_ok_fs_
3c4d4     09 44 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3c4d8     00 44 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3c4dc     9B 47 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3c4e0     05 00 00 FF 
3c4e4     80 46 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3c4e8     10 46 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3c4ec     00 46 27 F1 |                 addx    _ip_delay_ls_, #0
3c4f0     9B 4B 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3c4f4     1C 00 00 FF 
3c4f8     C0 4B 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3c4fc     10 4A 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3c500     00 4A 27 F1 |                 addx    _tat_wait_ls_, #0
3c504     9B 49 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3c508     00 00 00 FF 
3c50c     4E 49 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3c510     10 48 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3c514     00 48 27 F1 |                 addx    _ip_delay_fs_, #0
3c518     9B 4D 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3c51c     04 00 00 FF 
3c520     23 4D 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3c524     10 4C 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3c528     00 4C 27 F1 |                 addx    _tat_wait_fs_, #0
3c52c     8D 5B 00 FF 
3c530     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3c534     18 4E 63 FD |                 getqx   _preamble_wait_
3c538     08 4E 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3c53c     01 00 00 FF 
3c540     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3c544     18 2E 63 FD |                 getqx   _var_64_lower_
3c548     19 30 63 FD |                 getqy   _var_64_upper_
3c54c     28 2E 63 FD |                 setq    _var_64_lower_
3c550     01 00 00 FF 
3c554     E8 31 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3c558     18 50 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3c55c     09 50 57 F0 |                 shr     _1ms_, #9               wc
3c560     00 50 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3c564     FF FF 7F FF 
3c568     F2 69 07 F6 |                 mov     _frame1ms_clks_, ##-14
3c56c     A8 69 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3c570     A8 53 03 F6 |                 mov     _2ms_, _1ms_
3c574     01 52 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3c578     A8 55 03 F6 |                 mov     _suspend_wait_, _1ms_
3c57c     A8 55 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3c580     A8 57 03 F6 |                 mov     _4ms_, _1ms_
3c584     02 56 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3c588     AB 59 03 F6 |                 mov     _xfer_wait_, _4ms_
3c58c     A8 59 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3c590     AC 5D 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3c594     AE 5F 03 F6 |                 mov     _resume_hold_, _reset_hold_
3c598     02 5E 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3c59c     AF 63 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3c5a0     01 62 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3c5a4     A8 5B 03 F6 |                 mov     _8ms_, _1ms_
3c5a8     03 5A 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3c5ac     01 5C 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3c5b0     AE 63 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3c5b4     AC 5D 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3c5b8     AC 61 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3c5bc     02 60 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3c5c0     A8 61 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3c5c4     B1 65 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3c5c8     01 62 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3c5cc     03 64 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3c5d0     B1 65 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3c5d4                 | '        _ret_   mov     _1sec_, save_sysclk
3c5d4                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3c5d4                 | '                ret
3c5d4                 | {
3c5d4                 | }
3c5d4                 | 
3c5d4                 | '------------------------------------------------------------------------------
3c5d4                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3c5d4                 | ' one. If it is, start the task progression that will configure the device for
3c5d4                 | ' use.
3c5d4                 | '------------------------------------------------------------------------------
3c5d4                 | ' On entry:
3c5d4                 | '   hconfig_base - start address of the cached config descriptor chain.
3c5d4                 | ' On exit:
3c5d4                 | '------------------------------------------------------------------------------
3c5d4                 | hparse_con_desc
3c5d4     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3c5d8     82 73 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3c5dc     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3c5e0     4E 72 FF F9 |                 movbyts htmp,#%%1032
3c5e4     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3c5e8                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3c5e8                 | 
3c5e8     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3c5ec     6E ED 03 F1 |                 add     pa, hconfig_base
3c5f0     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3c5f4                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3c5f4                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3c5f4                 | ' that defines a keyboard and/or mouse.
3c5f4     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3c5f8                 | .next_intf
3c5f8     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3c5fc     B8 01 90 3D |         if_ae   jmp     #hset_config
3c600     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3c604     75 F3 03 F1 |                 add     ptrb, hnext_desc
3c608     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3c60c     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3c610     0C 00 90 AD |         if_z    jmp     #.intf
3c614     80 73 C7 FA |                 rdbyte  htmp, ptrb
3c618     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3c61c     D8 FF 9F FD |                 jmp     #.next_intf
3c620                 | .intf
3c620     00 90 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3c624     00 92 07 F6 |                 mov     hpar3, #0
3c628     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3c62c     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3c630     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3c634     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3c638                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3c638                 | 
3c638                 | .endp
3c638     80 73 C7 FA |                 rdbyte  htmp, ptrb
3c63c     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3c640     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3c644     78 00 90 3D |         if_ae   jmp     #.get_device
3c648     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3c64c     75 F3 03 F1 |                 add     ptrb, hnext_desc
3c650     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3c654     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3c658     64 00 90 AD |         if_z    jmp     #.get_device
3c65c     05 72 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3c660     04 00 90 AD |         if_z    jmp     #.get_ep
3c664     D0 FF 9F FD |                 jmp     #.endp
3c668                 | .get_ep
3c668     82 89 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3c66c     07 88 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3c670     0F 88 67 F0 |                 shl     hr1, #8 + 7
3c674     6C 73 03 F6 |                 mov     htmp, hctrl_ep_addr
3c678     3F 00 00 FF 
3c67c     00 73 07 F5 |                 and     htmp, ##ADDR_MASK
3c680     C4 73 43 F5 |                 or      htmp, hr1                       ' endpoint address
3c684     00 90 0F F2 |                 cmp     hpar2, #0               wz
3c688     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3c68c     00 92 0F F2 |                 cmp     hpar3, #0               wz
3c690     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3c694     A0 FF 9F FD |                 jmp     #.endp
3c698                 | .in_ep
3c698     B9 91 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3c69c     84 8B C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3c6a0                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3c6a0     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3c6a4     C3 8B DB F8 |                 setbyte hr2, hr0, #3
3c6a8     8C FF 9F FD |                 jmp     #.endp
3c6ac                 | .out_ep
3c6ac     B9 93 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3c6b0     84 8D C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3c6b4                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3c6b4     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3c6b8     C3 8D DB F8 |                 setbyte hr3, hr0, #3
3c6bc     78 FF 9F FD |                 jmp     #.endp
3c6c0                 | 
3c6c0                 | .get_device
3c6c0     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3c6c4     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3c6c8     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3c6cc     64 00 90 AD |         if_z    jmp     #.gamepad
3c6d0     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3c6d4     A8 00 90 AD |         if_z    jmp     #.hub
3c6d8     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3c6dc     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3c6e0     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3c6e4     4C 00 90 AD |         if_z    jmp     #.gamepad
3c6e8     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3c6ec     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3c6f0                 | .keyboard
3c6f0     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3c6f4                 |         if HAVE_MOUSE
3c6f4     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3c6f8                 |         else
3c6f8                 |         end
3c6f8     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3c6fc     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
3c700     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c704     C5 71 FA F8 |                 getbyte kb_interval, hr2, #3
3c708     C5 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3c70c     C8 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3c710                 |                 'debug(udec(kb_intf_num))
3c710                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3c710     E4 FE 9F FD |                 jmp     #.next_intf
3c714                 | if HAVE_MOUSE
3c714                 | .mouse
3c714     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3c718     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3c71c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3c720     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
3c724     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c728                 |                 'getbyte ms_interval, hr2, #3
3c728     C5 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3c72c     C8 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3c730                 |                 'debug(udec(kb_intf_num))
3c730                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3c730     C4 FE 9F FD |                 jmp     #.next_intf
3c734                 | end
3c734                 | .gamepad
3c734     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
3c738     C8 73 63 F5 |                 xor     htmp, hpar2
3c73c     3F 00 00 FF 
3c740     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c744     B0 FE 9F AD |         if_z    jmp     #.next_intf
3c748                 |         if HAVE_MOUSE
3c748     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
3c74c     C8 73 63 F5 |                 xor     htmp, hpar2
3c750     3F 00 00 FF 
3c754     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c758     9C FE 9F AD |         if_z    jmp     #.next_intf
3c75c                 |         end
3c75c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3c760     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3c764     90 FE 9F 5D |         if_nz   jmp     #.next_intf
3c768                 | 
3c768     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c76c     C5 7B FA F8 |                 getbyte gp_interval, hr2, #3
3c770     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c774     C8 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3c778     C9 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3c77c                 |                 'debug(udec(gp_intf_num))
3c77c                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3c77c     78 FE 9F FD |                 jmp     #.next_intf
3c780                 | .hub
3c780     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3c784     70 FE 9F 5D |         if_nz   jmp     #.next_intf
3c788     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3c78c     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3c790     64 FE 9F 5D |         if_nz   jmp     #.next_intf
3c794     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3c798     5C FE 9F 5D |         if_nz   jmp     #.next_intf
3c79c     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3c7a0     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3c7a4     C8 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3c7a8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c7ac     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3c7b0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3c7b4                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3c7b4     40 FE 9F FD |                 jmp     #.next_intf
3c7b8                 | 
3c7b8                 | '------------------------------------------------------------------------------
3c7b8                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3c7b8                 | ' it according to its function, or functions. In the case of this boot protocol
3c7b8                 | ' keyboard/mouse class driver:
3c7b8                 | ' - SetConfiguration(config_num)
3c7b8                 | ' - SetProtocol(boot)
3c7b8                 | ' - SetIdle(indefinite)
3c7b8                 | ' - Enter the device interrupt IN polling task stage.
3c7b8                 | '------------------------------------------------------------------------------
3c7b8                 | ' On entry:
3c7b8                 | ' On exit:
3c7b8                 | '------------------------------------------------------------------------------
3c7b8                 | hset_config
3c7b8                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3c7b8                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3c7b8     02 76 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3c7bc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c7c0     00 00 0C F2 |                 cmp     0-0, #0                 wz
3c7c4     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3c7c8                 |         if HAVE_MOUSE
3c7c8     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3c7cc                 |         end
3c7cc     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3c7d0     60 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3c7d4                 | .set_config
3c7d4     74 0E D0 FE |                 loc     ptra, #set_config
3c7d8     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3c7dc     6E ED 03 F1 |                 add     pa, hconfig_base
3c7e0     F6 8F C3 FA |                 rdbyte  hpar1, pa
3c7e4                 |                 debug("SetConfiguration: ",udec_(hpar1))
3c7e4     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3c7e8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3c7ec     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3c7f0     A0 02 A0 FD |                 call    #control_write
3c7f4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c7f8     2D 00 64 5D |         if_nz   ret
3c7fc                 | .kbd_config
3c7fc     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3c800     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3c804                 | 
3c804     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
3c808     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3c80c     3F 00 00 FF 
3c810     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c814     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3c818                 | 
3c818     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3c81c     3C 0E D0 FE |                 loc     ptra, #set_protocol
3c820     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3c824     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3c828     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3c82c     A0 02 A0 FD |                 call    #control_write
3c830     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c834     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3c838     F8 02 90 5D |         if_nz   jmp     #.notify_client
3c83c     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3c840     37 91 E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3c844     44 03 B0 FD |                 call    #hset_idle
3c848                 |                 'cmp     retval, #PID_ACK        wz
3c848                 |         'if_nz   mov     hkbd_ep_addr, #0
3c848                 |         'if_nz   jmp     #.notify_client
3c848     A9 99 02 F6 |                 mov     hctwait, _2ms_
3c84c     EF 02 A0 FD |                 call    #poll_waitx
3c850     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3c854                 |         if NUMLOCK_DEFAULT_STATE && RPI_KEYBOARD_NUMLOCK_HACK
3c854                 |         end
3c854     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3c858     A0 17 90 FE |                 loc     pa, #hkbd_led_rep
3c85c     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3c860     40 03 B0 FD |                 call    #hset_kbdled_report
3c864     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c868     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3c86c     C4 02 90 5D |         if_nz   jmp     #.notify_client
3c870     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3c874     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c878     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c87c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c880     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3c884     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3c888     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3c88c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c890     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3c894     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3c898     03 76 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3c89c                 |         if !!HAVE_MOUSE
3c89c                 |         end
3c89c                 | 
3c89c                 | .mouse_config
3c89c                 | if HAVE_MOUSE
3c89c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3c8a0     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3c8a4     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
3c8a8     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3c8ac     3F 00 00 FF 
3c8b0     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c8b4     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3c8b8                 | 
3c8b8                 |                 debug("mouse passed addr check")
3c8b8                 | 
3c8b8     B8 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3c8bc     00 00 80 FF 
3c8c0     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3c8c4     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3c8c8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c8cc     55 02 A0 FD |                 call    #control_read
3c8d0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c8d4     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3c8d8     58 02 90 5D |         if_nz   jmp     #.notify_client
3c8dc     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3c8e0     56 01 00 F6 |                 mov     0-0, total_data
3c8e4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c8e8                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3c8e8                 | 
3c8e8     35 73 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3c8ec     6C 0D D0 FE |                 loc     ptra, #set_protocol
3c8f0     01 03 5C FC |                 wrword  #MOUSE_FULL_PROTOCOL ? REPORT_PROTOCOL : BOOT_PROTOCOL, ptra[wValue]
3c8f4     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3c8f8     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3c8fc     A0 02 A0 FD |                 call    #control_write
3c900     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c904     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3c908     28 02 90 5D |         if_nz   jmp     #.notify_client
3c90c                 |                 debug("mouse passed SetProtocol")
3c90c     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3c910     35 91 E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3c914     74 02 B0 FD |                 call    #hset_idle
3c918                 |                 'cmp     retval, #PID_ACK        wz
3c918                 |         'if_nz   mov     hmouse_ep_addr, #0
3c918                 |         'if_nz   jmp     #.notify_client
3c918                 |                 debug("mouse passed SetIdle")
3c918     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3c91c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c920     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c924     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c928     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3c92c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c930     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3c934     79 77 03 F6 |                 mov     htmp2, hkbd_ep_addr
3c938     7A 77 63 F5 |                 xor     htmp2, hmouse_ep_addr
3c93c     3F 00 00 FF 
3c940     00 77 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3c944     05 76 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3c948     04 76 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3c94c     E4 01 90 FD |                 jmp     #.notify_client
3c950                 | end
3c950                 | .gamepad_config
3c950                 | if _HAVE_GAMEPAD
3c950     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c954     00 00 0C F2 |                 cmp     0-0, #0                 wz
3c958     6C 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3c95c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3c960     00 72 03 F6 |                 mov     htmp, 0-0
3c964     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3c968     3F 00 00 FF 
3c96c     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c970     54 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3c974                 | 
3c974     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3c978     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3c97c     69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3c980     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c984     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c988     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c98c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c990     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3c994     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3c998     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3c99c     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c9a0     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c9a4     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3c9a8     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3c9ac     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c9b0                 | 
3c9b0                 |                 if EMUPAD_MAX_PLAYER > 0
3c9b0                 |                 
3c9b0                 | .rule_loop           
3c9b0                 |                 end
3c9b0                 | 
3c9b0     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3c9b4     5C 00 90 AD |         if_e    jmp     #.xinput
3c9b8     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3c9bc     00 72 03 F6 |                 mov     htmp,0-0
3c9c0     01 A6 02 FF 
3c9c4     68 72 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3c9c8     8C 00 90 AD |         if_e    jmp     #.ps3
3c9cc                 | 
3c9cc     A4 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3c9d0     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3c9d4     00 00 80 5F 
3c9d8     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3c9dc     03 00 80 AF 
3c9e0     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3c9e4     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3c9e8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c9ec     55 02 A0 FD |                 call    #control_read
3c9f0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c9f4     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3c9f8     00 00 04 56 |         if_nz   mov     0-0, #0
3c9fc     34 01 90 5D |         if_nz   jmp     #.notify_client
3ca00     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3ca04     56 01 00 F6 |                 mov     0-0, total_data
3ca08     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3ca0c                 |                 debug(uhex(pb),udec(total_data),uhex_byte_array(pb,total_data))
3ca0c                 | 
3ca0c     06 76 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3ca10     20 01 90 FD |                 jmp     #.notify_client
3ca14                 | .xinput
3ca14     B8 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3ca18     2D EF 03 F6 |                 mov     pb,hdev_port
3ca1c     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3ca20     03 EE 27 F3 |                 fle     pb,#3
3ca24     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3ca28     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3ca2c                 | 
3ca2c     03 B0 06 F6 |                 mov     pkt_data, #3
3ca30     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3ca34     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3ca38                 |                 debug("XInput LED set ",uhex_long(ep_addr_pid),uhex_byte(pb))
3ca38     5A 00 A0 FD |                 call    #txn_out
3ca3c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3ca40                 | 
3ca40     97 0C D0 FE |                 loc     ptra, #xinp_fix_8bitdo
3ca44     27 EF 03 F6 |                 mov     pb, urx_buff_p          ' We don't actually care where it goes
3ca48     55 02 A0 FD |                 call    #control_read           ' Execute GetDeviceDescriptor()
3ca4c                 |                 debug("8bitdo weird fix... ",uhex(retval))
3ca4c     D2 BE 06 F6 |                 mov retval,#PID_ACK             ' If we don't do this something else becomes sad (TODO fix?)
3ca50                 | 
3ca50                 | 
3ca50     07 76 07 F6 |                 mov     htmp2, #XINPUT_READY
3ca54     DC 00 90 FD |                 jmp     #.notify_client
3ca58                 | .ps3
3ca58     44 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3ca5c     2D EF 03 F6 |                 mov     pb,hdev_port
3ca60     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3ca64     04 EE 27 F3 |                 fle     pb,#4
3ca68     F7 EF C3 F9 |                 decod   pb
3ca6c     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3ca70                 | 
3ca70     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3ca74     F4 0B D0 FE |                 loc     ptra, #set_report
3ca78     01 00 80 FF 
3ca7c     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3ca80     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3ca84     03 61 5C FC |                 wrword  #48, ptra[wLength]
3ca88     14 0C B0 FE |                 loc     pb, #ps3_command_buff
3ca8c     A0 02 A0 FD |                 call    #control_write
3ca90                 | 
3ca90     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3ca94     D4 0B D0 FE |                 loc     ptra, #set_report
3ca98     01 00 80 FF 
3ca9c     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3caa0     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3caa4     03 09 5C FC |                 wrword  #4, ptra[wLength]
3caa8     F0 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3caac     A0 02 A0 FD |                 call    #control_write
3cab0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3cab4     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3cab8     00 00 04 56 |         if_nz   mov     0-0, #0
3cabc     74 00 90 5D |         if_nz   jmp     #.notify_client
3cac0                 | 
3cac0     08 76 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3cac4     6C 00 90 FD |                 jmp     #.notify_client
3cac8                 | end
3cac8                 | 
3cac8                 | .hub_config
3cac8     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3cacc     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3cad0     77 73 03 F6 |                 mov     htmp, hhub_ep_addr
3cad4     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
3cad8     3F 00 00 FF 
3cadc     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3cae0     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3cae4                 | 
3cae4     94 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3cae8     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3caec     26 EF 03 F6 |                 mov     pb, hub_descr_p
3caf0     55 02 A0 FD |                 call    #control_read
3caf4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3caf8     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3cafc     34 00 90 5D |         if_nz   jmp     #.notify_client
3cb00                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3cb00                 | 
3cb00     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3cb04     02 79 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3cb08     07 78 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3cb0c                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3cb0c                 | .pwr_loop
3cb0c     74 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3cb10     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3cb14     02 79 57 FC |                 wrword  htmp3, ptra[wIndex]
3cb18     A0 02 A0 FD |                 call    #control_write
3cb1c     FB 79 6F FB |                 djnz    htmp3, #.pwr_loop
3cb20                 | 
3cb20     B2 99 02 F6 |                 mov     hctwait, _500ms_
3cb24     B1 99 02 F1 |                 add     hctwait, _100ms_
3cb28     EF 02 A0 FD |                 call    #poll_waitx
3cb2c                 | 
3cb2c     09 76 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3cb30     00 00 90 FD |                 jmp     #.notify_client
3cb34                 | 
3cb34                 | .notify_client
3cb34     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3cb38     BB 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3cb3c                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3cb3c                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3cb3c     2D 00 64 FD |                 ret
3cb40                 | 
3cb40                 | '------------------------------------------------------------------------------
3cb40                 | ' Initialize the keyboard/mouse data area to start-up values.
3cb40                 | '------------------------------------------------------------------------------
3cb40                 | ' On entry:
3cb40                 | ' On exit:
3cb40                 | '------------------------------------------------------------------------------
3cb40                 | init_kbdm_data
3cb40     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3cb44     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3cb48                 | 
3cb48     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3cb4c     2B ED 03 F6 |                 mov     pa, cache_end_p
3cb50                 | .loop
3cb50     61 01 4C FC |                 wrbyte  #0, ptra++
3cb54     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3cb58     F4 FF 9F CD |         if_b    jmp     #.loop
3cb5c                 |         
3cb5c                 |         if EMUPAD_MAX_PLAYER > 0
3cb5c                 |         end
3cb5c                 | 
3cb5c                 | 
3cb5c     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3cb60                 | .regloop
3cb60     00 EC 8F F9 |                 altd    pa
3cb64     00 00 04 F6 |                 mov     0-0, #0
3cb68     01 EC 07 F1 |                 add     pa, #1
3cb6c     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3cb70     EC FF 9F 5D |         if_nz   jmp     #.regloop
3cb74                 | 
3cb74     E1 E1 61 FF 
3cb78     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3cb7c     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3cb80     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3cb84     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3cb88                 | 
3cb88     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3cb8c                 | 
3cb8c                 | '------------------------------------------------------------------------------
3cb8c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3cb8c                 | ' function.
3cb8c                 | '------------------------------------------------------------------------------
3cb8c                 | ' On entry:
3cb8c                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3cb8c                 | '   hpar2 - index number of the target interface.
3cb8c                 | ' On exit:
3cb8c                 | '------------------------------------------------------------------------------
3cb8c                 | hset_idle
3cb8c     A9 99 02 F6 |                 mov     hctwait, _2ms_
3cb90     EF 02 A0 FD |                 call    #poll_waitx
3cb94     CC 0A D0 FE |                 loc     ptra, #set_idle
3cb98     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]
3cb9c     02 91 57 FC |                 wrword  hpar2, ptra[wIndex]
3cba0     A0 02 80 FD |                 jmp     #control_write
3cba4                 | 
3cba4                 | '------------------------------------------------------------------------------
3cba4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3cba4                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3cba4                 | '------------------------------------------------------------------------------
3cba4                 | ' On entry:
3cba4                 | '   ep_addr_pid - device address and enpoint for the request.
3cba4                 | ' On exit:
3cba4                 | '   retval - transaction result.
3cba4                 | '------------------------------------------------------------------------------
3cba4                 | hset_kbdled_report
3cba4     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3cba8     C0 0A D0 FE |                 loc     ptra, #set_report
3cbac     01 00 80 FF 
3cbb0     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3cbb4     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
3cbb8     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3cbbc     27 EF 03 F6 |                 mov     pb, urx_buff_p
3cbc0     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3cbc4     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3cbc8                 | 
3cbc8                 | '------------------------------------------------------------------------------
3cbc8                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3cbc8                 | '------------------------------------------------------------------------------
3cbc8                 | ' On entry:
3cbc8                 | ' On exit:
3cbc8                 | '------------------------------------------------------------------------------
3cbc8                 | hget_kbd_in_report
3cbc8     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3cbcc     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3cbd0     30 93 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3cbd4     39 93 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3cbd8     CF 02 A0 FD |                 call    #do_int_in
3cbdc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cbe0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3cbe4                 | 
3cbe4     00 92 0F F2 |                 cmp     hpar3, #0               wz
3cbe8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3cbec                 | 
3cbec     30 73 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3cbf0     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3cbf4     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3cbf8     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3cbfc                 | 
3cbfc     C9 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3cc00     18 00 B0 FD |                 call    #hkbd_compare
3cc04                 |         if EMUPAD_MAX_PLAYER > 0
3cc04                 |         end
3cc04                 | 
3cc04                 | .led_check
3cc04     3B 73 03 F6 |                 mov     htmp, kb_led_states
3cc08     B9 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3cc0c     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3cc10     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3cc14     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3cc18     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3cc1c                 | 
3cc1c                 | '------------------------------------------------------------------------------
3cc1c                 | ' Compare current and previous keyboard data buffers for keypress changes.
3cc1c                 | '------------------------------------------------------------------------------
3cc1c                 | hkbd_compare
3cc1c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3cc20     D0 13 F0 FE |                 loc     ptrb, #hkbd_report
3cc24     61 75 07 FB |                 rdlong  htmp1, ptra++
3cc28     E1 77 07 FB |                 rdlong  htmp2, ptrb++
3cc2c     BB 75 0B F2 |                 cmp     htmp1, htmp2    wz
3cc30     61 75 07 FB |                 rdlong  htmp1, ptra++
3cc34     E1 77 07 FB |                 rdlong  htmp2, ptrb++
3cc38     BB 75 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3cc3c     2D 00 64 AD |         if_z    ret
3cc40                 | 
3cc40     B0 13 D0 FE |                 loc     ptra, #hkbd_report
3cc44                 | 
3cc44                 |                 ' Handle modifiers
3cc44     27 91 C3 FA |                 rdbyte  hpar2, urx_buff_p
3cc48     00 89 C7 FA |                 rdbyte  hr1, ptra
3cc4c     C8 89 43 F9 |                 rolword hr1,hpar2,#0
3cc50     63 88 63 FD |                 mergew  hr1
3cc54     08 EC 07 F6 |                 mov     pa,#8
3cc58                 | .modloop
3cc58     6A 88 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3cc5c     E8 8E 07 F6 |                 mov     hpar1,#$E8
3cc60     F6 8F 83 F1 |                 sub     hpar1,pa
3cc64     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3cc68     FB ED 6F FB |                 djnz    pa,#.modloop
3cc6c                 | 
3cc6c     6F E0 75 FD | .release        modc    _set    wc
3cc70                 |                 'alts    hdev_port, #hid_report_p
3cc70                 |                 'mov     ptra, hid_report_p
3cc70     02 F0 07 F1 |                 add     ptra, #2
3cc74     06 EC 07 F6 |                 mov     pa, #6
3cc78     61 8F CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3cc7c     20 00 90 AD |         if_z    jmp     #.rl3
3cc80     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3cc84     02 F2 07 F1 |                 add     ptrb, #2
3cc88     06 EE 07 F6 |                 mov     pb, #6
3cc8c     E1 73 C7 FA | .rl2            rdbyte  htmp, ptrb++
3cc90     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
3cc94     08 00 90 AD |         if_z    jmp     #.rl3
3cc98     FC EF 6F FB |                 djnz    pb, #.rl2
3cc9c     68 00 B0 FD |                 call    #hkbd_translate
3cca0     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3cca4                 | 
3cca4     00 92 07 F6 |                 mov     hpar3, #0
3cca8     1F 92 27 F4 |                 bith    hpar3, #31
3ccac                 | 
3ccac     6F 00 74 FD | .press          modc    _clr    wc
3ccb0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3ccb4     02 F0 07 F1 |                 add     ptra, #2
3ccb8     06 EC 07 F6 |                 mov     pa, #6
3ccbc     61 8F CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3ccc0     20 00 90 AD |         if_z    jmp     #.pl3
3ccc4     2C 13 F0 FE |                 loc     ptrb, #hkbd_report
3ccc8     02 F2 07 F1 |                 add     ptrb, #2
3cccc     06 EE 07 F6 |                 mov     pb, #6
3ccd0     E1 73 C7 FA | .pl2            rdbyte  htmp, ptrb++
3ccd4     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
3ccd8     08 00 90 AD |         if_z    jmp     #.pl3
3ccdc     FC EF 6F FB |                 djnz    pb, #.pl2
3cce0     24 00 B0 FD |                 call    #hkbd_translate
3cce4     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3cce8                 | 
3cce8     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3ccec     04 13 F0 FE |                 loc     ptrb, #hkbd_report
3ccf0     28 02 64 FD |                 setq #1
3ccf4     61 75 07 FB |                 rdlong  htmp1, ptra++
3ccf8     28 02 64 FD |                 setq #1
3ccfc     E1 75 67 FC |                 wrlong  htmp1, ptrb++
3cd00     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3cd04                 | 
3cd04     2D 00 64 FD |                 ret
3cd08                 | 
3cd08                 | '------------------------------------------------------------------------------
3cd08                 | ' Translate keyboard scancode to ASCII
3cd08                 | '------------------------------------------------------------------------------
3cd08                 | ' On entry:
3cd08                 | '   hpar1 - scancode
3cd08                 | '   hpar2 - key modifiers state
3cd08                 | '       c - pressed (0) or released (1) flag
3cd08                 | ' On exit:
3cd08                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3cd08                 | '               30..17 = unused
3cd08                 | '                   18 = scroll-lock state 
3cd08                 | '                   17 = caps-lock state
3cd08                 | '                   16 = num-lock state 
3cd08                 | '                15..8 = key modifiers state
3cd08                 | '                 7..0 = scancode
3cd08                 | '------------------------------------------------------------------------------
3cd08                 | hkbd_translate
3cd08     39 8E 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3cd0c     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3cd10     53 8E 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3cd14     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3cd18     47 8E 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3cd1c     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3cd20                 | 
3cd20                 |         if EMUPAD_MAX_PLAYER > 0
3cd20                 | 
3cd20                 |         if EMUPAD_BT0_BIT >= 0
3cd20                 |         end
3cd20                 |         if EMUPAD_BT1_BIT >= 0
3cd20                 |         end
3cd20                 |         if EMUPAD_BT2_BIT >= 0
3cd20                 |         end
3cd20                 |         if EMUPAD_BT3_BIT >= 0
3cd20                 |         end
3cd20                 |         if EMUPAD_BT4_BIT >= 0
3cd20                 |         end
3cd20                 |         if EMUPAD_BT5_BIT >= 0
3cd20                 |         end
3cd20                 |         if EMUPAD_BT6_BIT >= 0
3cd20                 |         end
3cd20                 |         if EMUPAD_BT7_BIT >= 0
3cd20                 |         end
3cd20                 |         if EMUPAD_BT8_BIT >= 0
3cd20                 |         end
3cd20                 |         if EMUPAD_BT9_BIT >= 0
3cd20                 |         end
3cd20                 | 
3cd20                 |         end
3cd20     C8 8F CB F8 |                 setbyte hpar1, hpar2, #1
3cd24     7C 8F D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3cd28     1F 8E 47 F4 |                 bitc    hpar1, #31
3cd2c                 |         if KEYQUEUE_SIZE > 0
3cd2c     C0 09 B0 FE |                 loc pb,#keyq_head
3cd30     F7 73 E3 FA |                 rdword htmp,pb
3cd34     B9 75 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3cd38     B9 73 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3cd3c     B9 77 03 F6 |                 mov htmp2,htmp
3cd40     04 76 07 FA |                 mul htmp2,#4
3cd44     F7 77 03 F1 |                 add htmp2,pb
3cd48     02 76 07 F1 |                 add htmp2,#2
3cd4c     7F 72 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3cd50     B9 75 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3cd54     BB 8F 63 5C |         if_nz   wrlong hpar1,htmp2
3cd58     F7 73 43 5C |         if_nz   wrbyte htmp,pb
3cd5c                 |         end
3cd5c     2D 00 7C FD |                 ret wcz
3cd60                 | 
3cd60                 | if HAVE_MOUSE
3cd60                 | '------------------------------------------------------------------------------
3cd60                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3cd60                 | '------------------------------------------------------------------------------
3cd60                 | ' On entry:
3cd60                 | ' On exit:
3cd60                 | '------------------------------------------------------------------------------
3cd60                 | hget_mouse_in_report
3cd60     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3cd64     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3cd68     30 93 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3cd6c     36 93 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3cd70     CF 02 A0 FD |                 call    #do_int_in
3cd74     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cd78     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3cd7c                 | 
3cd7c     00 92 0F F2 |                 cmp     hpar3, #0               wz
3cd80     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3cd84                 | 
3cd84     30 73 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3cd88     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3cd8c     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3cd90     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3cd94                 | 
3cd94                 |         'debug(uhex_byte_array(urx_buff_p,hpar3))
3cd94                 | 
3cd94                 |         if MOUSE_FULL_PROTOCOL
3cd94     C8 00 B0 FD |                 call #hid_decode
3cd98                 |         else
3cd98                 |         end
3cd98                 | 
3cd98     48 09 90 FE |                 loc     pa, #mouse_limits
3cd9c     5D 13 F0 FE |                 loc     ptrb, #mouse_xacc
3cda0                 | 
3cda0                 |                 ' load xacc,yacc,zacc
3cda0     28 04 64 FD |                 setq    #3-1
3cda4     80 89 07 FB |                 rdlong  hr1,ptrb
3cda8                 |                 ' load limits and outptr
3cda8     28 04 64 FD |                 setq    #3-1
3cdac     F6 75 03 FB |                 rdlong  htmp1,pa
3cdb0                 | 
3cdb0                 |         if MOUSE_FULL_PROTOCOL
3cdb0     8C 19 47 FC |                 wrbyte  hidr_buttons, ptrb[12]
3cdb4                 |         else
3cdb4                 |                 { ' Currently not used
3cdb4                 |                 '}
3cdb4                 |         end
3cdb4                 | 
3cdb4                 |         if MOUSE_FULL_PROTOCOL
3cdb4     88 73 33 F9 |                 getword htmp, hidr_axis+0, #0
3cdb8     0F 72 67 F7 |                 signx   htmp, #15
3cdbc                 |         else
3cdbc                 |         end
3cdbc     B9 89 03 F1 |                 add     hr1,htmp
3cdc0     00 74 0F F2 |                 cmp     htmp1,#0 wz
3cdc4     BA 89 63 53 |         if_ne   fles    hr1,htmp1
3cdc8     00 88 47 53 |         if_ne   fges    hr1,#0
3cdcc                 | 
3cdcc                 |         if MOUSE_FULL_PROTOCOL
3cdcc     88 73 3B F9 |                 getword htmp, hidr_axis+0, #1
3cdd0     0F 72 67 F7 |                 signx   htmp, #15
3cdd4                 |         else
3cdd4                 |         end
3cdd4     B9 8B 03 F1 |                 add     hr2,htmp
3cdd8     00 76 0F F2 |                 cmp     htmp2,#0 wz
3cddc     BB 8B 63 53 |         if_ne   fles    hr2,htmp2
3cde0     00 8A 47 53 |         if_ne   fges    hr2,#0
3cde4                 |                 
3cde4                 |         if MOUSE_FULL_PROTOCOL
3cde4     8B 73 3B F9 |                 getword htmp, hidr_axis+3, #1           ' Mouse wheel is actually on the "wheel axis"
3cde8     0F 72 67 F7 |                 signx   htmp, #15
3cdec     B9 8D 03 F1 |                 add     hr3, htmp
3cdf0                 |         else    
3cdf0                 |         end
3cdf0                 | 
3cdf0     90 73 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3cdf4     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3cdf8                 | 
3cdf8                 |                 ' write back accumulators
3cdf8     28 04 64 FD |                 setq    #3-1
3cdfc     80 89 67 FC |                 wrlong  hr1,ptrb
3ce00                 |                 ' if outptr set, write X/Y words
3ce00     00 78 0F F2 |                 cmp htmp3,#0                    wz
3ce04     C5 89 2B 59 |         if_nz   setword hr1,hr2,#1
3ce08     BC 89 63 5C |         if_nz   wrlong hr1,htmp3
3ce0c     2D 00 64 FD |                 ret
3ce10                 | end
3ce10                 | 
3ce10                 | '------------------------------------------------------------------------------
3ce10                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3ce10                 | '------------------------------------------------------------------------------
3ce10                 | ' On entry:
3ce10                 | ' On exit:
3ce10                 | '------------------------------------------------------------------------------
3ce10                 | if _HAVE_GAMEPAD
3ce10                 | hget_gp_in_report
3ce10     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3ce14     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3ce18                 | 
3ce18     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3ce1c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3ce20     00 92 E3 F8 |                 getbyte hpar3
3ce24     FF 92 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3ce28     CF 02 A0 FD |                 call    #do_int_in
3ce2c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ce30     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3ce34                 | 
3ce34     00 92 0F F2 |                 cmp     hpar3, #0               wz
3ce38     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3ce3c                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3ce3c                 | 
3ce3c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3ce40     00 72 E3 F8 |                 getbyte htmp                            ' |
3ce44     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3ce48     4B 72 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3ce4c     C3 72 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3ce50     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3ce54     B9 01 C0 F8 |                 setbyte htmp                            ' |
3ce58                 | 
3ce58                 | ' Note: the following code compares the current and previous reports
3ce58                 | ' and process the data if there are changes to ease the debug output.
3ce58                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3ce58                 | ' gpPreReport buffer.
3ce58                 | 
3ce58                 |                 ' ----- start of block to remove
3ce58                 |                 {
3ce58                 |                 }
3ce58                 |                 ' ----- end of block to remove
3ce58     14 05 90 FE |                 loc pa,#hpad_translate
3ce5c     2A EC 63 FD |                 push pa
3ce60                 | 
3ce60                 |                 ' FALL THROUGH !!!!
3ce60                 | end
3ce60                 | if _HAVE_GAMEPAD || MOUSE_FULL_PROTOCOL
3ce60                 | '------------------------------------------------------------------------------
3ce60                 | ' Decode controller report
3ce60                 | '------------------------------------------------------------------------------
3ce60                 | hid_decode
3ce60                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3ce60     28 20 64 FD |                 setq #(hidr_end-hidr_start)-1
3ce64     00 04 00 FF 
3ce68     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3ce6c                 | 
3ce6c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3ce70                 | 
3ce70     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3ce74     00 1C E3 F8 |                 getbyte hidr_type
3ce78                 |         if _HAVE_GAMEPAD
3ce78     07 1C 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3ce7c     08 03 90 AD |         if_z    jmp     #hpad_xinput
3ce80     08 1C 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3ce84     EC 03 90 AD |         if_z    jmp     #hpad_ps3
3ce88                 |         end
3ce88     05 1C 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3ce8c     04 1C 07 A6 |         if_z    mov     hidr_type,#M_READY
3ce90     04 1C 0F F2 |                 cmp     hidr_type, #M_READY             wz
3ce94                 |                 
3ce94                 | 
3ce94                 | '------------------------------------------------------------------------------
3ce94                 | ' Handle HID controller (or mouse now
3ce94                 | ' On entry:
3ce94                 | '   ptrb - controller report
3ce94                 | '------------------------------------------------------------------------------
3ce94                 | hpad_hid
3ce94     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3ce98     F7 F1 03 F6 |                 mov     ptra, pb
3ce9c     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3cea0     00 EC 03 F6 |                 mov     pa, 0-0
3cea4                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3cea4     19 2A 3B FF 
3cea8     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3ceac                 | 
3ceac                 | .next
3ceac     00 EC 5F F2 |                 cmps    pa, #0      wcz
3ceb0     2D 00 7C ED |         if_be   ret     wcz
3ceb4                 | 
3ceb4     61 8F C7 FA |                 rdbyte  hpar1, ptra++
3ceb8     01 EC 87 F1 |                 sub     pa, #1
3cebc     00 90 07 F6 |                 mov     hpar2, #0
3cec0                 | 
3cec0     C7 73 03 F6 |                 mov     htmp, hpar1
3cec4     03 72 07 F5 |                 and     htmp, #$03
3cec8     01 72 0F F2 |                 cmp     htmp, #1    wz
3cecc     61 91 C7 AA |         if_z    rdbyte  hpar2, ptra++
3ced0     07 90 67 A7 |         if_z    signx   hpar2,#7
3ced4     01 EC 87 A1 |         if_z    sub     pa, #1
3ced8     02 72 0F F2 |                 cmp     htmp, #2    wz
3cedc     61 91 E7 AA |         if_z    rdword  hpar2, ptra++
3cee0     0F 90 67 A7 |         if_z    signx   hpar2,#15
3cee4     02 EC 87 A1 |         if_z    sub     pa, #2
3cee8     03 72 0F F2 |                 cmp     htmp, #3    wz
3ceec     61 91 07 AB |         if_z    rdlong  hpar2, ptra++
3cef0     04 EC 87 A1 |         if_z    sub     pa, #4
3cef4                 | 
3cef4     FC 8E 07 F5 |                 and     hpar1, #$FC
3cef8                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3cef8                 | 
3cef8     84 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3cefc     18 01 90 AD |         if_z    jmp     #.report_id
3cf00     04 8E 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3cf04     30 01 90 AD |         if_z    jmp     #.usage_page
3cf08     08 8E 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3cf0c     38 01 90 AD |         if_z    jmp     #.usage
3cf10     14 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3cf14     C8 2B 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3cf18     24 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3cf1c     C8 2B 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3cf20     34 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3cf24     C8 2D 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3cf28     44 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3cf2c     C8 2D 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3cf30     74 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3cf34     C8 27 03 A6 |         if_z    mov     hidr_size, hpar2
3cf38     94 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3cf3c     C8 29 03 A6 |         if_z    mov     hidr_count, hpar2
3cf40     B4 8E 1F F2 |                 cmp     hpar1, #HID_POP wcz
3cf44     A4 8E 0F 52 |         if_nz   cmp     hpar1, #HID_PUSH wz
3cf48     64 01 90 AD |         if_z    jmp     #.pushpop ' Entering with C set if PUSH  
3cf4c     80 8E 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3cf50     58 FF 9F 5D |         if_nz   jmp     #.next
3cf54                 | 
3cf54     D5 25 A7 FB |                 tjf     hidr_state,#.next
3cf58                 | 
3cf58     03 90 07 F5 |                 and     hpar2, #$03
3cf5c     02 90 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3cf60     18 00 90 5D |         if_nz   jmp     #.skip
3cf64                 | 
3cf64     02 24 0F F2 |                 cmp     hidr_state, #2  wz
3cf68     20 00 90 AD |         if_z    jmp     #.axes
3cf6c     03 24 0F F2 |                 cmp     hidr_state, #3  wz
3cf70     5C 00 90 AD |         if_z    jmp     #.hats
3cf74     04 24 0F F2 |                 cmp     hidr_state, #4  wz
3cf78     70 00 90 AD |         if_z    jmp     #.buttons
3cf7c                 | .skip
3cf7c     93 73 03 F6 |                 mov     htmp, hidr_size
3cf80     94 73 03 FA |                 mul     htmp, hidr_count
3cf84     B9 21 03 F1 |                 add     hidr_offset, htmp
3cf88     20 FF 9F FD |                 jmp     #.next
3cf8c                 | .axes
3cf8c                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count),uhex_long(hidr_flags))
3cf8c     87 87 53 F8 |                 getnib  hr0, hidr_flags, #2
3cf90     94 89 03 F6 |                 mov     hr1, hidr_count
3cf94                 | .l1
3cf94     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3cf98     93 91 03 F6 |                 mov     hpar2, hidr_size
3cf9c     28 01 B0 FD |                 call    #hpad_getbits
3cfa0     88 01 B0 FD |                 call    #hpad_normalize
3cfa4     08 86 1F F2 |                 cmp     hr0, #8         wcz
3cfa8     86 87 5F C9 |         if_b    altgn   hr0, #hidr_usage
3cfac     00 8A 43 C8 |         if_b    getnib  hr2
3cfb0     88 8B 77 C9 |         if_b    altsw   hr2, #hidr_axis
3cfb4     5F 01 20 C9 |         if_b    setword retval
3cfb8     01 86 07 C1 |         if_b    add     hr0, #1
3cfbc     93 21 03 F1 |                 add     hidr_offset, hidr_size
3cfc0     F4 89 6F FB |                 djnz    hr1, #.l1
3cfc4                 | 
3cfc4     C3 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3cfc8     01 24 07 F6 |                 mov     hidr_state, #1
3cfcc     DC FE 9F FD |                 jmp     #.next
3cfd0                 | .hats
3cfd0                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3cfd0     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3cfd4     93 91 03 F6 |                 mov     hpar2, hidr_size
3cfd8     EC 00 B0 FD |                 call    #hpad_getbits
3cfdc     5F 1B C3 F8 |                 setbyte hidr_hats, retval, #0
3cfe0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3cfe4     01 24 07 F6 |                 mov     hidr_state, #1
3cfe8     90 FF 9F FD |                 jmp     #.skip
3cfec                 | .buttons
3cfec                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3cfec     90 8F 03 F6 |                 mov     hpar1, hidr_offset
3cff0     93 91 03 F6 |                 mov     hpar2, hidr_size
3cff4     94 91 03 FA |                 mul     hpar2, hidr_count
3cff8     CC 00 B0 FD |                 call    #hpad_getbits
3cffc     87 73 E3 F8 |                 getbyte htmp, hidr_flags, #0
3d000     B9 BF 62 F0 |                 shl     retval, htmp
3d004     5F 19 43 F5 |                 or      hidr_buttons, retval
3d008     94 73 03 F1 |                 add     htmp, hidr_count
3d00c     B9 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3d010     01 24 07 F6 |                 mov     hidr_state, #1
3d014     64 FF 9F FD |                 jmp     #.skip
3d018                 | .report_id
3d018     00 1E 0F F2 |                 cmp     hidr_id, #0     wz
3d01c     2D 00 7C 5D |         if_nz   ret     wcz
3d020     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
3d024                 |                 'debug(".report_id",udec(htmp,hpar2))
3d024     C8 73 0B F2 |                 cmp     htmp, hpar2     wz
3d028     B9 1F 03 A6 |         if_z    mov     hidr_id, htmp
3d02c     01 24 67 56 |         if_nz   neg     hidr_state,#1
3d030     01 F2 87 51 |         if_nz   sub     ptrb,#1
3d034     74 FE 9F FD |                 jmp     #.next
3d038                 | .usage_page
3d038     09 90 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3d03c     01 24 0F A2 |         if_z    cmp     hidr_state, #1  wz
3d040     04 24 07 A6 |         if_z    mov     hidr_state, #4
3d044     64 FE 9F FD |                 jmp     #.next
3d048                 | .usage
3d048     04 90 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3d04c     05 90 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3d050     06 1C 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3d054     01 24 07 A6 |         if_z    mov     hidr_state, #1
3d058     50 FE 9F AD |         if_z    jmp     #.next
3d05c     02 90 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3d060     04 1C 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3d064     01 24 07 A6 |         if_z    mov     hidr_state, #1
3d068     40 FE 9F AD |         if_z    jmp     #.next
3d06c     30 90 17 F2 |                 cmp     hpar2, #HID_USAGE_X     wc
3d070     38 90 97 32 |         if_nc   cmpr    hpar2, #HID_USAGE_WHEEL wc   
3d074     10 00 90 3D |         if_nc   jmp     #.usage_axis
3d078     39 90 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3d07c     01 24 0F A2 |         if_z    cmp     hidr_state, #1      wz
3d080     03 24 07 A6 |         if_z    mov     hidr_state, #3
3d084     24 FE 9F FD |                 jmp     #.next
3d088                 | .usage_axis
3d088     01 24 57 F2 |                 cmps    hidr_state, #1          wc
3d08c     1C FE 9F CD |         if_b    jmp     #.next
3d090     37 90 27 F3 |                 fle     hpar2, #HID_USAGE_DIAL   ' Let's just say wheel and dial are the same to keep sane
3d094     86 23 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3d098     C8 01 00 F8 |                 setnib  hpar2
3d09c                 | 
3d09c     20 90 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3d0a0     C8 0F 23 F4 |                 bith    hidr_flags, hpar2
3d0a4                 | 
3d0a4     01 22 07 F1 |                 add     hidr_usage_idx, #1
3d0a8     02 24 07 F6 |                 mov     hidr_state, #2
3d0ac     FC FD 9F FD |                 jmp     #.next
3d0b0                 | .pushpop
3d0b0                 |                 ' Entering with C set if PUSH  
3d0b0     4C 0F B0 FE |                 loc     pb, #hid_stack
3d0b4     28 08 64 CD |         if_c    setq    #(hidr_end-hidr_state)-1
3d0b8     F7 25 63 CC |         if_c    wrlong  hidr_state, pb
3d0bc     28 08 64 3D |         if_nc   setq    #(hidr_end-hidr_state)-1
3d0c0     F7 25 03 3B |         if_nc   rdlong  hidr_state, pb
3d0c4     E4 FD 9F FD |                 jmp     #.next
3d0c8                 | 
3d0c8                 | '------------------------------------------------------------------------------
3d0c8                 | ' Read bits from report data buffer
3d0c8                 | '------------------------------------------------------------------------------
3d0c8                 | ' On entry:
3d0c8                 | '   PTRB - report buffer
3d0c8                 | '   hpar1 - start bit
3d0c8                 | '   hpar2 - number of bits
3d0c8                 | ' On exit:
3d0c8                 | '   retval - bits
3d0c8                 | '------------------------------------------------------------------------------
3d0c8                 | hpad_getbits
3d0c8     C7 73 03 F6 |                 mov     htmp, hpar1
3d0cc     03 72 47 F0 |                 shr     htmp, #3        ' byte offset
3d0d0     F9 73 03 F1 |                 add     htmp, ptrb
3d0d4     B9 BF 02 FB |                 rdlong  retval, htmp
3d0d8                 | 
3d0d8     C7 75 03 F6 |                 mov     htmp1, hpar1
3d0dc     07 74 07 F5 |                 and     htmp1, #$07     ' shift
3d0e0     BA BF 42 F0 |                 shr     retval, htmp1
3d0e4                 | 
3d0e4     18 90 1F F2 |                 cmp     hpar2, #24      wcz
3d0e8     10 00 90 1D |         if_a    jmp     #.l1
3d0ec                 | 
3d0ec     C8 91 C3 F9 |                 decod   hpar2
3d0f0     01 90 87 F1 |                 sub     hpar2, #1
3d0f4     C8 BF 02 F5 |                 and     retval, hpar2
3d0f8     2D 00 64 FD |                 ret
3d0fc                 | .l1
3d0fc     FF 7F 00 FF 
3d100     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3d104     03 72 07 F1 |                 add     htmp, #3
3d108     B9 77 03 FB |                 rdlong  htmp2, htmp
3d10c     18 90 87 F1 |                 sub     hpar2, #24
3d110     C8 91 C3 F9 |                 decod   hpar2
3d114     01 90 87 F1 |                 sub     hpar2, #1
3d118     BA 77 43 F0 |                 shr     htmp2, htmp1
3d11c     C8 77 03 F5 |                 and     htmp2, hpar2
3d120     18 76 67 F0 |                 shl     htmp2, #24
3d124     BB BF 42 F5 |                 or      retval, htmp2
3d128     2D 00 64 FD |                 ret
3d12c                 | 
3d12c                 | '------------------------------------------------------------------------------
3d12c                 | ' Normalize value to signed word (-32768 / 32767)
3d12c                 | '------------------------------------------------------------------------------
3d12c                 | ' On entry:
3d12c                 | '   retval - value to normalize
3d12c                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3d12c                 | '   - or -
3d12c                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3d12c                 | '   hidr_size - value bits length
3d12c                 | ' On exit:
3d12c                 | '   retval - normalized value
3d12c                 | '------------------------------------------------------------------------------
3d12c                 | hpad_normalize
3d12c     95 73 0B F6 |                 mov     htmp, hidr_lminmax  wz
3d130     96 73 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3d134     2D 00 64 AD |         if_z    ret
3d138     B9 75 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3d13c     B9 73 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3d140     0F 74 77 F7 |                 signx   htmp1, #15      wc
3d144     FF 27 97 C9 |         if_c    alts    hidr_size, #511
3d148     00 BE 66 C7 |         if_c    signx   retval, #0-0
3d14c                 |                 ' slightly crappy hack: if in mouse mode, don't normalize
3d14c     04 1C 0F F2 |                 cmp     hidr_type, #M_READY wz
3d150     2D 00 64 AD |         if_z    ret
3d154     BA 73 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3d158     BA BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3d15c     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3d160     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3d164     B9 73 53 F6 |                 abs     htmp            wc
3d168     1F BE 0E F4 |                 testb   retval, #31     wz
3d16c     5F BF 42 F6 |                 abs     retval
3d170     B9 BF 12 FD |                 qdiv    retval, htmp
3d174     18 BE 62 FD |                 getqx   retval
3d178     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3d17c     C0 FF 7F FF 
3d180     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3d184     2D 00 64 FD |                 ret
3d188                 | end
3d188                 | 
3d188                 | if _HAVE_GAMEPAD
3d188                 | '------------------------------------------------------------------------------
3d188                 | ' Handle XInput controller
3d188                 | ' On entry:
3d188                 | '   ptrb - controller report
3d188                 | '------------------------------------------------------------------------------
3d188                 | '   Default implementation translates the report to a pseudo-defacto hid
3d188                 | '   standard and jumps to hpad_translate for actions.
3d188                 | '   Implementors may take specific actions for this kind of controller.
3d188                 | '------------------------------------------------------------------------------
3d188                 | hpad_xinput
3d188     80 73 CF FA |                 rdbyte  htmp, ptrb      wz
3d18c     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3d190     81 73 C7 FA |                 rdbyte  htmp, ptrb[1]
3d194     14 72 0F F2 |                 cmp     htmp, #$14      wz
3d198     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3d19c                 | 
3d19c                 |                 'debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3d19c                 | 
3d19c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3d1a0     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3d1a4                 | 
3d1a4     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3d1a8     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3d1ac     5F BF 22 F6 |                 not     retval
3d1b0     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3d1b4     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3d1b8     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3d1bc     5F BF 22 F6 |                 not     retval
3d1c0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3d1c4                 | 
3d1c4     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3d1c8     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3d1cc     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3d1d0     06 18 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3d1d4     54 FF BF FD |                 call    #hpad_normalize
3d1d8     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3d1dc     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3d1e0     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3d1e4     07 18 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3d1e8     40 FF BF FD |                 call    #hpad_normalize
3d1ec     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3d1f0                 | 
3d1f0     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3d1f4     81 BF E6 FA |                 rdword  retval, ptrb[1]
3d1f8     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3d1fc     00 18 47 F4 |                 bitc    hidr_buttons, #0
3d200     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3d204     01 18 47 F4 |                 bitc    hidr_buttons, #1
3d208     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3d20c     02 18 47 F4 |                 bitc    hidr_buttons, #2
3d210     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3d214     03 18 47 F4 |                 bitc    hidr_buttons, #3
3d218     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3d21c     04 18 47 F4 |                 bitc    hidr_buttons, #4
3d220     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3d224     05 18 47 F4 |                 bitc    hidr_buttons, #5
3d228     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3d22c     08 18 47 F4 |                 bitc    hidr_buttons, #8
3d230     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3d234     09 18 47 F4 |                 bitc    hidr_buttons, #9
3d238     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3d23c     0A 18 47 F4 |                 bitc    hidr_buttons, #10
3d240     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3d244     0B 18 47 F4 |                 bitc    hidr_buttons, #11
3d248     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3d24c     0C 18 47 F4 |                 bitc    hidr_buttons, #12
3d250                 | 
3d250     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3d254     5F 73 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3d258     7A BB 7A FF 
3d25c     0F 74 07 F6 |                 mov     htmp1, ##$F576_F40F
3d260     F9 FF 7F FF 
3d264     12 77 07 F6 |                 mov     htmp2, ##$FFFF_F312
3d268     BA 73 5F F9 |                 altgn   htmp, #htmp1
3d26c     00 72 43 F8 |                 getnib  htmp
3d270     B9 1B C3 08 |         _ret_   setbyte hidr_hats, htmp, #0
3d274                 | 
3d274                 | '------------------------------------------------------------------------------
3d274                 | ' Handle PS3 controller
3d274                 | ' On entry:
3d274                 | '   ptrb - controller report
3d274                 | '------------------------------------------------------------------------------
3d274                 | '   Default implementation translates the report to a pseudo-defacto hid
3d274                 | '   standard and jumps to hpad_translate for actions.
3d274                 | '   Implementors may take specific actions for this kind of controller.
3d274                 | '------------------------------------------------------------------------------
3d274                 | hpad_ps3
3d274     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
3d278     01 72 0F F2 |                 cmp     htmp, #$01      wz
3d27c     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3d280                 | 
3d280                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3d280                 | 
3d280     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3d284     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3d288                 | 
3d288     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3d28c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3d290     98 FE BF FD |                 call    #hpad_normalize
3d294     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3d298     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3d29c     8C FE BF FD |                 call    #hpad_normalize
3d2a0     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3d2a4     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3d2a8     80 FE BF FD |                 call    #hpad_normalize
3d2ac     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3d2b0     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3d2b4     74 FE BF FD |                 call    #hpad_normalize
3d2b8     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3d2bc     91 BF C6 FA |                 rdbyte  retval, ptrb[17]        ' RX = L2 analog
3d2c0     68 FE BF FD |                 call    #hpad_normalize
3d2c4     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3d2c8     92 BF C6 FA |                 rdbyte  retval, ptrb[18]        ' RY = R2 analog
3d2cc     5C FE BF FD |                 call    #hpad_normalize
3d2d0     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3d2d4                 | 
3d2d4     08 8E 07 F6 |                 mov     hpar1, #8
3d2d8     13 90 07 F6 |                 mov     hpar2, #19
3d2dc     E8 FD BF FD |                 call    #hpad_getbits
3d2e0                 | 
3d2e0     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3d2e4     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3d2e8     00 18 47 F4 |                 bitc    hidr_buttons, #0
3d2ec     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3d2f0     01 18 47 F4 |                 bitc    hidr_buttons, #1
3d2f4     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3d2f8     02 18 47 F4 |                 bitc    hidr_buttons, #2
3d2fc     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3d300     03 18 47 F4 |                 bitc    hidr_buttons, #3
3d304     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3d308     04 18 47 F4 |                 bitc    hidr_buttons, #4
3d30c     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3d310     05 18 47 F4 |                 bitc    hidr_buttons, #5
3d314     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3d318     06 18 47 F4 |                 bitc    hidr_buttons, #6
3d31c     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3d320     07 18 47 F4 |                 bitc    hidr_buttons, #7
3d324     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3d328     08 18 47 F4 |                 bitc    hidr_buttons, #8
3d32c     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3d330     09 18 47 F4 |                 bitc    hidr_buttons, #9
3d334     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3d338     0A 18 47 F4 |                 bitc    hidr_buttons, #10
3d33c     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3d340     0B 18 47 F4 |                 bitc    hidr_buttons, #11
3d344     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3d348     0C 18 47 F4 |                 bitc    hidr_buttons, #12
3d34c                 | 
3d34c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3d350     5F 73 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3d354     09 FA 79 FF 
3d358     0F 74 07 F6 |                 mov     htmp1, ##$F3F4_120F
3d35c     FF FA 7F FF 
3d360     76 77 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3d364     BA 73 5F F9 |                 altgn   htmp, #htmp1
3d368     00 72 43 F8 |                 getnib  htmp
3d36c     B9 1B C3 08 |         _ret_   setbyte hidr_hats, htmp, #0
3d370                 | 
3d370                 | 
3d370                 | '------------------------------------------------------------------------------
3d370                 | ' Perform controller actions
3d370                 | ' On entry:
3d370                 | '    hidr_id        report id
3d370                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3d370                 | '                      X = hidr_axis+0, #0
3d370                 | '                      Y = hidr_axis+0, #1
3d370                 | '                      Z = hidr_axis+1, #0
3d370                 | '                     RX = hidr_axis+1, #1
3d370                 | '                     RY = hidr_axis+2, #0
3d370                 | '                     RZ = hidr_axis+2, #1
3d370                 | '                     Sl = hidr_axis+3, #0
3d370                 | '                     Wh = hidr_axis+3, #1
3d370                 | '    hidr_buttons   buttons state (bits 0 to 31)
3d370                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3d370                 | '
3d370                 | '                     -------3 -------2 -------1 -------0 byte
3d370                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3d370                 | '    hidr_flags       xxxxxxxx_wsrrrzyx_hhhhaaaa_bbbbbbbb
3d370                 | '                              hlzyx||| |||||||| ++++++++ n. buttons
3d370                 | '                              |||||||| ||||++++--------- n. axes
3d370                 | '                              |||||||| ++++------------- n. hats
3d370                 | '                              ++++++++------------------ valid axes
3d370                 | '------------------------------------------------------------------------------
3d370                 | hpad_translate
3d370                 | 
3d370                 | 
3d370                 |         if HAVE_HIDPAD
3d370     A0 0C F0 FE |                 loc     ptrb,#hidpad_report
3d374     2D 73 0B F6 |                 mov     htmp,hdev_port          wz
3d378     8F 73 03 A6 |         if_z    mov     htmp,hidr_id
3d37c     01 72 E7 F2 |                 cmpsub  htmp,#1
3d380     07 1E 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3d384     02 1E 17 52 |         if_nz   cmp     hidr_id, #2             wc
3d388     2D 00 7C 3D |         if_ae   ret     wcz
3d38c     20 72 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3d390     B9 F3 03 F1 |                 add     ptrb,htmp
3d394     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3d398     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3d39c     28 0E 64 FD |                 setq    #8-1
3d3a0     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3d3a4                 |         end
3d3a4                 | 
3d3a4                 | 
3d3a4                 |         if EMUPAD_MAX_PLAYER > 0
3d3a4                 | .emupad_no_hat
3d3a4                 |         if EMUPAD_BT0_BIT >= 0
3d3a4                 |         end
3d3a4                 |         if EMUPAD_BT1_BIT >= 0
3d3a4                 |         end
3d3a4                 |         if EMUPAD_BT2_BIT >= 0
3d3a4                 |         end
3d3a4                 |         if EMUPAD_BT3_BIT >= 0
3d3a4                 |         end
3d3a4                 |         if EMUPAD_BT4_BIT >= 0
3d3a4                 |         end
3d3a4                 |         if EMUPAD_BT5_BIT >= 0
3d3a4                 |         end
3d3a4                 |         if EMUPAD_BT6_BIT >= 0
3d3a4                 |         end
3d3a4                 |         if EMUPAD_BT7_BIT >= 0
3d3a4                 |         end
3d3a4                 |         if EMUPAD_BT8_BIT >= 0
3d3a4                 |         end
3d3a4                 |         if EMUPAD_BT9_BIT >= 0
3d3a4                 |         end
3d3a4                 | .emupad_slot_over
3d3a4                 |         end
3d3a4                 | 
3d3a4                 |         if 0
3d3a4                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3d3a4                 | 
3d3a4                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3d3a4                 | 
3d3a4                 |         end
3d3a4     2D 00 64 FD |                 ret
3d3a8                 | end
3d3a8                 | 
3d3a8                 | if EMUPAD_MAX_PLAYER > 0
3d3a8                 | '------------------------------------------------------------------------------
3d3a8                 | ' Clear EmuPad state
3d3a8                 | '------------------------------------------------------------------------------
3d3a8                 | emupad_reset
3d3a8                 | 
3d3a8                 | '------------------------------------------------------------------------------
3d3a8                 | ' Get EmuPad Player number for current device (into retval)
3d3a8                 | ' Z flag is also set if current device is valid
3d3a8                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3d3a8                 | '------------------------------------------------------------------------------
3d3a8                 | emupad_getnum
3d3a8                 | .loop
3d3a8                 | '------------------------------------------------------------------------------
3d3a8                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3d3a8                 | '------------------------------------------------------------------------------
3d3a8                 | emupad_discon
3d3a8                 | .loop         
3d3a8                 |         
3d3a8                 |         ' FALL THROUGH!!!
3d3a8                 | 
3d3a8                 | '------------------------------------------------------------------------------
3d3a8                 | ' Update EmuPad reports (all of them...)
3d3a8                 | '------------------------------------------------------------------------------
3d3a8                 | emupad_write_reports
3d3a8                 | .devloop
3d3a8                 | 
3d3a8                 | end
3d3a8                 | 
3d3a8                 | 
3d3a8                 | '------------------------------------------------------------------------------
3d3a8                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3d3a8                 | '------------------------------------------------------------------------------
3d3a8                 | ' On entry:
3d3a8                 | ' On exit:
3d3a8                 | '------------------------------------------------------------------------------
3d3a8                 | hget_hub_status
3d3a8     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3d3ac     27 91 03 F6 |                 mov     hpar2, urx_buff_p
3d3b0     32 93 23 F9 |                 setword hpar3, hub_next_datax, #0
3d3b4     01 92 2F F9 |                 setword hpar3, #1, #1
3d3b8     CF 02 A0 FD |                 call    #do_int_in
3d3bc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d3c0     0C 00 90 AD |         if_z    jmp     #.data
3d3c4     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3d3c8     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3d3cc     2D 00 64 FD |                 ret
3d3d0                 | .data
3d3d0     00 92 0F F2 |                 cmp     hpar3, #0               wz
3d3d4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3d3d8                 | 
3d3d8     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3d3dc     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3d3e0     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3d3e4     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3d3e8                 |                 debug(ubin_long(hub_status_chg))
3d3e8                 | 
3d3e8     01 5A 06 F6 |                 mov     hdev_port, #1
3d3ec                 | .loop
3d3ec     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3d3f0     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3d3f4     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3d3f8     F0 FF 9F 3D |         if_nc   jmp     #.loop
3d3fc     2D 00 64 FD |                 ret
3d400                 | 
3d400                 | hub_port_handler
3d400     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3d404     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d408     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d40c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d410     55 02 A0 FD |                 call    #control_read
3d414     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3d418                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3d418                 | 
3d418     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3d41c     50 01 90 5D |         if_x0   jmp     #.other
3d420     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3d424     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3d428     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d42c     A0 02 A0 FD |                 call    #control_write
3d430     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3d434     7C 01 90 5D |         if_x0   jmp     #.disconnect
3d438     B1 99 02 F6 |                 mov     hctwait, _100ms_
3d43c     EF 02 A0 FD |                 call    #poll_waitx
3d440                 | 
3d440     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3d444     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3d448     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d44c     A0 02 A0 FD |                 call    #control_write
3d450                 | 
3d450     02 78 07 F6 |                 mov     htmp3, #2
3d454                 | .wait_reset
3d454     AD 99 02 F6 |                 mov     hctwait, _8ms_
3d458     EF 02 A0 FD |                 call    #poll_waitx
3d45c     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d460     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d464     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d468     55 02 A0 FD |                 call    #control_read
3d46c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3d470     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3d474     F7 79 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3d478                 | 
3d478     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3d47c     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3d480     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d484     A0 02 A0 FD |                 call    #control_write
3d488                 | 
3d488     24 72 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3d48c                 | .wait_recover
3d48c     A8 99 02 F6 |                 mov     hctwait, _1ms_
3d490     EF 02 A0 FD |                 call    #poll_waitx
3d494     FD 73 6F FB |                 djnz    htmp,#.wait_recover
3d498                 | 
3d498     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3d49c     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3d4a0     0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3d4a4                 | 
3d4a4     00 08 00 FF 
3d4a8     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3d4ac     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3d4b0     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3d4b4     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3d4b8     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3d4bc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d4c0     48 01 90 5D |         if_nz   jmp     #.done
3d4c4                 | .get_dev_desc
3d4c4     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3d4c8     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3d4cc     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3d4d0     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3d4d4     2D 73 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3d4d8     01 73 57 FC |                 wrword  htmp, ptra[wValue]
3d4dc     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3d4e0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d4e4     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3d4e8     AD 99 02 F6 |                 mov     hctwait, _8ms_
3d4ec     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3d4f0     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3d4f4     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3d4f8     BE 00 A0 FD |                 call    #calc_crc5
3d4fc     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3d500     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3d504     F7 AD C2 FA |                 rdbyte  total_data, pb
3d508     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3d50c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3d510     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d514     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3d518     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3d51c     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3d520                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3d520     A0 99 02 F6 |                 mov     hctwait, _500us_
3d524     EF 02 A0 FD |                 call    #poll_waitx
3d528     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3d52c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3d530     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3d534     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3d538     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d53c     CC 00 90 5D |         if_nz   jmp     #.done
3d540     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3d544     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3d548     61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3d54c     61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3d550     00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3d554     09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3d558     02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3d55c     56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
3d560     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3d564     A4 00 90 CD |         if_b    jmp     #.done
3d568     68 F0 BF FD |                 call    #hparse_con_desc
3d56c     9C 00 90 FD |                 jmp     #.done
3d570                 | 
3d570                 | .other
3d570     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3d574     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3d578     28 00 90 AD |         if_x1   jmp     #.reset_feature
3d57c     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3d580     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3d584     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3d588     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3d58c     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3d590     10 00 90 AD |         if_x1   jmp     #.reset_feature
3d594     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3d598     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3d59c     04 00 90 AD |         if_x1   jmp     #.reset_feature
3d5a0     68 00 90 FD |                 jmp     #.done
3d5a4                 | .reset_feature
3d5a4     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3d5a8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d5ac     A0 02 A0 FD |                 call    #control_write
3d5b0     58 00 90 FD |                 jmp     #.done
3d5b4                 | .disconnect
3d5b4                 | 
3d5b4     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3d5b8     00 72 E3 F8 |                 getbyte htmp
3d5bc     03 72 0F F2 |                 cmp     htmp,#KB_READY wz
3d5c0     05 72 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3d5c4     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3d5c8     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3d5cc     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3d5d0     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3d5d4                 |         if EMUPAD_MAX_PLAYER > 0
3d5d4                 |         end
3d5d4                 |         if HAVE_MOUSE
3d5d4     04 72 0F F2 |                 cmp     htmp, #M_READY          wz
3d5d8     05 72 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3d5dc     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3d5e0                 |         end
3d5e0                 |         if HAVE_HIDPAD
3d5e0     30 0A F0 FE |                 loc ptrb,#hidpad_report
3d5e4     2D 73 03 F6 |                 mov htmp,hdev_port
3d5e8     01 72 E7 F2 |                 cmpsub htmp,#1
3d5ec     20 72 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3d5f0     B9 F3 03 F1 |                 add ptrb,htmp
3d5f4     28 0E 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3d5f8     80 01 6C FC |                 wrlong #0,ptrb
3d5fc                 |         end
3d5fc                 | 
3d5fc     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3d600     00 00 C4 F8 |                 setbyte #0
3d604     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3d608     00 00 04 F6 |                 mov     0-0, #0
3d60c                 | 
3d60c                 | .done
3d60c     0E 6A 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3d610     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3d614     22 6F 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3d618     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3d61c     A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3d620     A4 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3d624                 | 
3d624     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d628     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d62c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d630     55 02 A0 FD |                 call    #control_read
3d634     00 69 06 FB |                 rdlong  hub_port_status, ptra
3d638                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3d638     2D 00 64 FD |                 ret
3d63c                 | 
3d63c                 | '------------------------------------------------------------------------------
3d63c                 | ' Partially populated SETUP packets
3d63c                 | '------------------------------------------------------------------------------
3d63c     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d63d     06          |                 byte    REQ_GET_DESC
3d63e     00 01       |                 word    TYPE_DEVICE << 8
3d640     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d642     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d644     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d645     06          |                 byte    REQ_GET_DESC
3d646     00 02       |                 word    TYPE_CONFIG << 8
3d648     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d64a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d64c     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3d64d     09          |                 byte    REQ_SET_CONFIG
3d64e     00 00       |                 word    0       ' Configuration value
3d650     00 00       |                 word    0       ' Zero
3d652     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3d654     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3d655     05          |                 byte    REQ_SET_ADDR
3d656     00 00       |                 word    0       ' Zero
3d658     00 00       |                 word    0       ' Zero
3d65a     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3d65c                 | '------------------------------------------------------------------------------
3d65c                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3d65c                 | ' wValue field dictates which protocol should be used.
3d65c                 | '
3d65c                 | ' When initialized, all devices default to report protocol. However the host
3d65c                 | ' should not make any assumptions about the device state and should set the
3d65c                 | ' desired protocol whenever initializing a device.
3d65c                 | '------------------------------------------------------------------------------
3d65c     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d65d     0B          |                 byte    HID_SET_PROTO
3d65e     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3d660                 |                                                 ' (HID 1.11 Section 7.2.6).
3d660     00 00       |                 word    0               ' Interface index number.
3d662     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3d664                 | '------------------------------------------------------------------------------
3d664     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d665     0A          |                 byte    HID_SET_IDLE
3d666     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3d668                 |                                         ' reporting until a change is detected in the report data
3d668                 | 
3d668                 |                                         ' (HID 1.11 Section 7.2.4).
3d668     00 00       |                 word    0       ' Interface index number.
3d66a     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3d66c     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d66d     09          |                 byte    HID_SET_REPORT
3d66e     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3d670                 |                                         ' (HID 1.11 Section 7.2.2).
3d670     00 00       |                 word    0       ' Interface index number.
3d672     00 00       |                 word    0       ' Size of the report, in bytes.
3d674     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3d675     06          |                 byte    REQ_GET_DESC
3d676     00 22       |                 word    TYPE_REPORT << 8
3d678     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d67a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d67c                 | '------------------------------------------------------------------------------
3d67c     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3d67d     06          |                 byte    REQ_GET_DESC
3d67e     00 29       |                 word    TYPE_HUB << 8
3d680     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d682     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d684     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3d685     03          |                 byte    REQ_SET_FEATURE
3d686     00 00       |                 word    0       ' port power
3d688     01 00       |                 word    1       ' Port index number (1+)
3d68a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d68c     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3d68d     01          |                 byte    REQ_CLEAR_FEATURE
3d68e     00 00       |                 word    0       ' port power
3d690     01 00       |                 word    1       ' Port index number (1+)
3d692     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d694     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3d695     00          |                 byte    REQ_GET_STATUS
3d696     00 00       |                 word    0
3d698     01 00       |                 word    1       ' Port index number (1+)
3d69a     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3d69c                 | '------------------------------------------------------------------------------
3d69c                 | if _HAVE_GAMEPAD
3d69c     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3d6a0                 | ps3_command_buff
3d6a0     00 00 00 00 
3d6a4     00          |                 byte    $00, $00, $00, $00, $00
3d6a5     00 00 00 00 
3d6a9     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3d6aa     FF 27 10 00 
3d6ae     32          |                 byte    $FF, $27, $10, $00, $32
3d6af     FF 27 10 00 
3d6b3     32          |                 byte    $FF, $27, $10, $00, $32
3d6b4     FF 27 10 00 
3d6b8     32          |                 byte    $FF, $27, $10, $00, $32
3d6b9     FF 27 10 00 
3d6bd     32          |                 byte    $FF, $27, $10, $00, $32
3d6be     00 00 00 00 
3d6c2     00          |                 byte    $00, $00, $00, $00, $00
3d6c3     00 00 00 00 
3d6c7     00          |                 byte    $00, $00, $00, $00, $00
3d6c8     00 00 00 00 
3d6cc     00          |                 byte    $00, $00, $00, $00, $00
3d6cd     00 00 00    |                 byte    $00, $00, $00
3d6d0                 | '------------------------------------------------------------------------------
3d6d0     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3d6d3                 |                                         ' 0x01 All blinking
3d6d3                 |                                         ' 0x02 1 flashes, then on
3d6d3                 |                                         ' 0x03 2 flashes, then on
3d6d3                 |                                         ' 0x04 3 flashes, then on
3d6d3                 |                                         ' 0x05 4 flashes, then on
3d6d3                 |                                         ' 0x06 1 on
3d6d3                 |                                         ' 0x07 2 on
3d6d3                 |                                         ' 0x08 3 on
3d6d3                 |                                         ' 0x09 4 on
3d6d3                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3d6d3                 |                                         ' 0x0B Blinking*
3d6d3                 |                                         ' 0x0C Slow blinking*
3d6d3                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3d6d3     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3d6d6     00          |                 byte    $00             ' Left rumble
3d6d7     00          |                 byte    $00             ' Right rumble
3d6d8     00 00 00    |                 byte    $00, $00, $00
3d6db                 | 
3d6db                 | xinp_fix_8bitdo '' This inexplicable String request (that WILL fail) somehow un-bugs the terrible firmware
3d6db                 |                 '' of certain wired 8bitdo gamepads.
3d6db     80          |                 byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d6dc     06          |                 byte    REQ_GET_DESC
3d6dd     04 03       |                 word    TYPE_STRING << 8 + 4
3d6df     09 04       |                 word    $0409   ' Zero or Language ID (Section 9.6.7)
3d6e1     02 00       |                 word    2       ' Number of bytes to transfer if there is a data stage
3d6e3     00          | end
3d6e4                 | alignl
3d6e4                 | 
3d6e4                 | if HAVE_MOUSE
3d6e4     00 00 00 00 
3d6e8     00 00 00 00 | mouse_limits long 0[2]
3d6ec     00 00 00 00 | mouse_outptr long 0
3d6f0                 | end
3d6f0                 | 
3d6f0                 | if KEYQUEUE_SIZE > 0
3d6f0     00          | keyq_head byte 0
3d6f1     00          | keyq_tail byte 0
3d6f2     00 00 00 00 
      ...             
3d8ee     00 00 00 00 
3d8f2     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3d8f4                 | alignl
3d8f4                 | end
3d8f4                 | 
3d8f4                 | if EMUPAD_MAX_PLAYER > 0
3d8f4                 | emupad_rule_buffer
3d8f4                 | if EMUPAD_BUILTIN_RULES
3d8f4                 | file "padmap_builtin.dat"
3d8f4                 | end
3d8f4                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3d8f4                 | '' Default rule directly follows!
3d8f4                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3d8f4                 | end
3d8f4                 | 
3d8f4                 | '------------------------------------------------------------------------------
3d8f4                 | ' The USB data cache area gets zero-filled at every device disconnect
3d8f4                 | '------------------------------------------------------------------------------
3d8f4                 | usb_cache_start
3d8f4                 | 
3d8f4                 | ' HID descriptor and report buffers
3d8f4                 | if !!OVERLAP_MEMORY
3d8f4     00 00 00 00 
      ...             
3dfec     00 00 00 00 
3dff0     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3dff4                 | end
3dff4     00 00 00 00 
3dff8     00 00 00 00 | hkbd_report     byte    0[8]
3dffc     00 00 00 00 | hkbd_led_rep    byte    0
3e000                 | alignl
3e000                 | 
3e000     00 00 00 00 
3e004     00 00 00 00 
3e008     00 00 00 00 
3e00c     00 00 00 00 
3e010     00 00 00 00 | hid_stack       long 0[(hidr_end - hidr_state) * 1]
3e014                 | 
3e014                 | if HAVE_HIDPAD
3e014     00 00 00 00 
      ...             
3e0ec     00 00 00 00 
3e0f0     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3e0f4                 | end
3e0f4                 | 
3e0f4                 | ' HUB descriptor
3e0f4     00          | hub_descr       byte    0   ' bDescLength
3e0f5     00          |                 byte    0   ' bDescriptorType
3e0f6     00          |                 byte    0   ' bNbrPorts
3e0f7     00 00       |                 word    0   ' wHubCharacteristics
3e0f9     00          |                 byte    0   ' bPwrOn2PwrGood
3e0fa     00          |                 byte    0   ' bHubContrCurrent
3e0fb     00          |                 byte    0   ' DeviceRemoveable
3e0fc     00          |                 byte    0   ' PortPwrCtrlMask
3e0fd                 | 
3e0fd                 | usb_cache_end
3e0fd                 | 
3e0fd                 | if HAVE_MOUSE
3e0fd     00 00 00 00 | mouse_xacc      long 0
3e101     00 00 00 00 | mouse_yacc      long 0
3e105     00 00 00 00 | mouse_zacc      long 0
3e109     00          | mouse_bstate    byte 0
3e10a     00          | mouse_lpending  byte 0
3e10b     00          | mouse_rpending  byte 0
3e10c     00          | mouse_mpending  byte 0
3e10d     00          | mouse_lock      byte 0
3e10e     00 00 00    |                 byte 0[3] ' padding
3e111                 | end
3e111                 | 
3e111     00 00 00 00 
      ...             
3e189     00 00 00 00 
3e18d     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3e191     00 00 00 00 
3e195     00 00 00 00 
3e199     00 00 00 00 
3e19d     00 00 00 00 
3e1a1     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3e1a3     00 00 00 00 
      ...             
3e29b     00 00 00 00 
3e29f     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3e2a3                 | 
3e2a3     00          | driver_cog      byte    0                       ' Current driver cog + 1
3e2a4                 | 	alignl
3e2a4                 | _Audio2_003_spin2_dat_
3e2a4                 | 
3e2a4                 | audio       	org     0
3e2a4                 | 
3e2a4     61 6F 05 FB |             	rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3e2a8     61 C5 05 FB |             	rdlong  scbase, ptra++       ' get start address of scope buffer
3e2ac     61 D1 05 FB |             	rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3e2b0                 | 
3e2b0     01 EC 63 FD |             	cogid   pa                   ' compute cogid
3e2b4     0C EC 07 FA |             	mul     pa, #12              ' and mailbox spacing
3e2b8     F6 6F 01 F1 |             	add     mailbox2, pa         ' add offset to find this COG's mailbox
3e2bc     B7 6C 01 F6 |             	mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3e2c0                 | 
3e2c0     00 F2 07 F6 |             	mov     ptrb,#0              ' A tail pointer for the buffer
3e2c4     0E CE 05 FC |             	wrpin   dac2,#left           ' PWM DACs at 44100@339 MHz
3e2c8     0E D2 15 FC |             	wxpin   sr44100,#left     	 ' 30*256
3e2cc     0F CE 05 FC |             	wrpin   dac2,#right
3e2d0     0F D2 15 FC |             	wxpin   sr44100,#right    
3e2d4     41 9C 64 FD |             	dirh    #left addpins 1
3e2d8     20 9C 64 FD |             	setse1  #%001<<6 + left      ' Set the event - DAC empty
3e2dc                 |  
3e2dc                 |             
3e2dc                 | '---------------------------------------------------------------------------------        
3e2dc                 | '----------------- The main loop -------------------------------------------------
3e2dc                 | '---------------------------------------------------------------------------------
3e2dc                 | 
3e2dc     0F AA 05 F6 | loop       	mov 	    cn,#15 '7
3e2e0                 |               '  waitx ##33000000
3e2e0                 | '----------------------------------------------------------------------------------
3e2e0                 | '------------- Get parameters and execute commands if any -------------------------
3e2e0                 | '----------------------------------------------------------------------------------
3e2e0                 | 
3e2e0                 | 
3e2e0     D5 62 01 F6 | p401        	mov     channeladd,cn             	' compute the pointer to channel parameters block
3e2e4     06 62 65 F0 |             	shl     channeladd,#6
3e2e8     B1 F0 03 F1 |             	add     ptra,channeladd
3e2ec                 | 
3e2ec     28 1A 64 FD |             	setq    #13                       	' read parameters
3e2f0     00 79 05 FB |             	rdlong  pointer0,ptra
3e2f4     1F 8C 1D F4 | p408        	bitl    command0,#31 wcz	      	' bit #31 command - set the DAC sample rate
3e2f8     2C 00 90 3D |     	if_nc   jmp     #p404                     	' if not set, proceed
3e2fc     C6 66 01 F6 |             	mov     qq,command0             	' get the new rate
3e300     4E 66 15 FC |             	wxpin   qq,#left addpins 1        	' and program the pins
3e304     B3 66 E1 F8 |             	getbyte qq,qq,#0 		      	' check if the rate is n*256
3e308     00 66 0D F2 |             	cmp     qq,#0 wz                         
3e30c     4E CE 05 AC |     	if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3e310     4E CC 05 5C |     	if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3e314                 |                 
3e314     1E 82 1D F4 |                	bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3e318     00 78 05 A6 |     	if_z    mov     pointer0, #0  
3e31c     00 7A 05 A6 |     	if_z    mov     pointer0h, #0  
3e320     00 80 05 A6 |     	if_z    mov     envph0, #0  
3e324     05 83 65 AC |     	if_z    wrlong  sstart0, ptra[5]          	' reset bit #30 in hub
3e328                 |     	
3e328     C1 66 01 F6 | p404        	mov     qq,sstart0		     	' check if start>$80000
3e32c     FF FF 03 FF 
3e330     FF 67 05 F5 | 		and 	qq,##$7FFFFFF 
3e334     00 04 00 FF 
3e338     00 66 1D F2 |                 cmp 	qq,##$80000 wcz
3e33c     B7 6C 01 36 |     	if_ge   mov     mailbox,mailbox2          	' if yes, use PSRAM
3e340     00 6C 05 C6 |     	if_lt   mov     mailbox,#0                	' if not, use HUB 
3e344                 | 
3e344     C4 A4 39 F9 | p405           	getword apan0,volpan0,#1          	' extract vol,pan from longs 
3e348     C4 A2 31 F9 |     	    	getword avol0,volpan0,#0
3e34c                 |     	    	
3e34c                 | '----------------------------------------------------------------------------------
3e34c                 | '------------- Compute the envelope, if exists ------------------------------------
3e34c                 | '----------------------------------------------------------------------------------
3e34c                 |             
3e34c     00 8E 1D F2 |             	cmp     envptr0,#0 wcz     		' read the pointer
3e350     20 00 00 AF 
3e354     00 F4 05 A6 |     	if_z    mov     envs1,##$4000			' if 0, no envelope, load $4000=1 for scas
3e358     54 00 90 AD |     	if_z    jmp     #p410				' and run away	
3e35c                 | 
3e35c     C8 80 01 F1 |            	add     envph0,envspd0			' envelope PA update
3e360                 |            	           
3e360     C0 F0 01 F6 |       	    	mov     envhi, envph0			' move phase acc to high part of env pointer
3e364     06 F0 45 F0 | 		shr     envhi,#6			' leave 10 bits in hi
3e368     F8 F2 31 F9 | 	   	getword envlo,envhi,#0              	' and 16 bit in lo
3e36c     10 F0 45 F0 | 	    	shr     envhi,#16			' move 10 bits of hi to the lower word
3e370     C9 F0 19 F2 | 	    	cmp     envhi,envlen0 wcz		' compare this to envelope length
3e374                 | 	    	'debug(udec(envhi,envlen0))
3e374     C9 F0 01 36 |     	if_ge  	mov     envhi,envlen0			' if greater than, set it at envlen
3e378     00 F2 05 36 |     	if_ge   mov     envlo,#0
3e37c     C9 80 01 36 |     	if_ge   mov     envph0,envlen0             	' and set envph0 at the end of the envelope
3e380     16 80 65 30 |     	if_ge   shl     envph0,#22
3e384                 | 
3e384     F8 F4 01 F6 |             	mov 	envs1,envhi			' 10 high bits of PA is the offset to the envelope entry
3e388     01 F4 65 F0 |             	shl 	envs1,#1                        ' these entries are 16 bit so multiply the offset by 2
3e38c     C7 F4 01 F1 |             	add 	envs1,envptr0                   ' and add it to the pointer
3e390     FA F4 01 FB |             	rdlong 	envs1,envs1			' and then read 2 entries in one rdlong
3e394     FA F6 39 F9 |             	getword envs2,envs1,#1			' then separate them		
3e398     FA F4 31 F9 |            	getword envs1,envs1,#0
3e39c     F9 F6 01 FA |             	mul     envs2,envlo                     ' and do linear interpolation based on lower bits of the offset
3e3a0     F9 F2 21 F6 |             	not     envlo
3e3a4     F9 F4 01 FA |             	mul     envs1,envlo
3e3a8     FB F4 01 F1 |             	add     envs1,envs2
3e3ac     12 F4 45 F0 |             	shr     envs1,#18			' we need only 14 bits for scas
3e3b0                 |               
3e3b0                 | '----------------------------------------------------------------------------------
3e3b0                 | '------------- Generate the noise if bit 27 of the pointer is set -----------------
3e3b0                 | '----------------------------------------------------------------------------------
3e3b0                 | 
3e3b0     1B 82 0D F4 | p410        	testb   sstart0, #27 wz
3e3b4     1B 68 61 AD |     	if_z    getrnd  spl
3e3b8     9C 00 90 AD |     	if_z    jmp     #p406
3e3bc                 |     	
3e3bc                 | '----------------------------------------------------------------------------------
3e3bc                 | '------------- Get the sample -----------------------------------------------------
3e3bc                 | '----------------------------------------------------------------------------------    	
3e3bc                 |  
3e3bc     BD A6 01 F6 | 		mov	oldptrh,pointer0h
3e3c0     C5 9E F9 F8 |            	getbyte	afreq0,freqskip0,#3         	' the frequency is in 8:24 format, so get integer in afreq0
3e3c4     08 8A 65 F0 |            	shl	freqskip0,#8                	' and keep the fractional in freqskip0
3e3c8     C5 78 19 F1 |            	add     pointer0,freqskip0 wcz      	' compute the pointer to the next sample   
3e3cc                 |            	                                                                                                     'debug(udec(afreq0))  
3e3cc     CF 7A 21 F1 |            	addx	pointer0h,afreq0  
3e3d0                 |                                                                                                           '       	debug(udec(pointer0h, pointer0))
3e3d0     D3 7A 19 F2 | 		cmp	pointer0h,oldptrh wcz
3e3d4                 | 
3e3d4     50 00 90 AD | 	if_e 	jmp 	#p411				' if the pointer didn't change, no sample has to be read
3e3d8                 |      	
3e3d8     1F 82 0D F4 |             	testb   sstart0,#31 wz       	   	' bit 31 : 16 bit sample  
3e3dc     01 7A 65 A0 |      	if_z    shl     pointer0h,#1        
3e3e0     1C 82 0D F4 |             	testb   sstart0,#28 wz  		' bit 28 : interleaved sample         
3e3e4     01 7A 65 A0 |      	if_z    shl     pointer0h,#1        
3e3e8                 | 												'debug(udec(pointer0h))
3e3e8     C3 7A 19 F2 |             	cmp     pointer0h,lend0 wcz		' check if end of the loop reached
3e3ec     C3 7A 81 31 |    	if_ge   sub     pointer0h,lend0       
3e3f0     C2 7A 01 31 |         if_ge   add     pointer0h,lstart0
3e3f4     C3 7A 19 F2 |             	cmp     pointer0h,lend0 wcz		' check if end of the loop reached
3e3f8     C3 7A 01 36 |         if_ge   mov	pointer0h,lend0	
3e3fc                 |         	   debug(udec(lstart0,lend0,pointer0h))	
3e3fc                 |                        	
3e3fc     BD 66 01 F6 |             	mov     qq,pointer0h              	' compute place in the memory from where the sample will be loaded
3e400     C1 66 01 F1 |            	add     qq,sstart0            
3e404     FF 6D 5D F2 |            	cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3e408     B3 68 E1 EA |     	if_le   rdword  spl,qq                      	' if not, use HUB RAM for samples
3e40c     F0 00 B0 1D |     	if_gt   call    #cache_read
3e410     1F 82 0D F4 |                 testb   sstart0,#31 wz 
3e414     08 68 65 50 |     	if_nz   shl     spl,#8				' convert 8 to 16 bit if needed
3e418     01 7A 45 A0 |         if_z    shr     pointer0h,#1
3e41c     1C 82 0D F4 |                testb   sstart0,#28 wz            
3e420     01 7A 45 A0 |     	if_z    shr     pointer0h,#1    
3e424     B4 7E 41 F9 |                 rolword rawspl0,spl,#0			' now rawspl0 has oldsample:newsample in it
3e428                 |                 
3e428                 |            
3e428                 |                 
3e428                 |                 
3e428     BF 68 39 F9 | p411	      	getword spl,rawspl0,#1
3e42c     BF 9C 39 F9 | 		getword oldspl,rawspl0,#1		' then separate them		
3e430     BC F2 01 F6 | 		mov	envlo,pointer0
3e434     12 F2 45 F0 | 		shr 	envlo,#18
3e438                 | '		     debug(udec(spl))
3e438                 | 
3e438                 | 		
3e438     F9 9C 31 FA |             	scas    oldspl,envlo                     	' and do linear interpolation
3e43c     00 9C 01 F6 |             	mov 	oldspl,0-0
3e440     F9 F2 21 F6 |             	not     envlo
3e444     1F 00 00 FF 
3e448     FF F3 05 F5 |           	and     envlo,##$3FFF
3e44c     F9 68 31 FA |            	scas    spl,envlo
3e450     00 68 01 F6 |             	mov     spl,0-0
3e454     CE 68 01 F1 |                 add     spl, oldspl
3e458                 | 
3e458                 |          		
3e458                 | 		 
3e458     FA 68 31 FA | p406        	scas    spl, envs1
3e45c     00 68 01 F6 |             	mov     spl,0-0
3e460     D1 68 31 FA |             	scas    spl,avol0                 	' apply volume
3e464     00 68 01 F6 |             	mov     spl,0-0
3e468                 |  
3e468     D2 68 31 FA |             	scas    spl,apan0                 	' apply pan
3e46c     00 B4 01 F6 |             	mov     ls0,0-0
3e470     20 00 00 FF 
3e474     00 66 05 F6 |             	mov     qq,##16384
3e478     D2 66 81 F1 |             	sub     qq,apan0
3e47c     B3 68 31 FA |             	scas    spl,qq
3e480     00 B6 01 F6 |             	mov     rs0, 0-0
3e484                 |             	
3e484                 |             	
3e484                 |      
3e484     DB 7C 29 F9 |                 setword sample0,rs0,#1           ' pack samples into long
3e488     DA 7C 21 F9 |                 setword sample0,ls0,#0
3e48c                 |                 
3e48c     DA 70 01 F1 |                 add  lsample,ls0
3e490     DB 72 01 F1 |                 add  rsample,rs0
3e494                 |                 
3e494                 |             
3e494     1E 82 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointers needs resetting  
3e498     00 78 05 A6 |     if_z    mov     pointer0, #0  
3e49c     00 7A 05 A6 |     if_z    mov     pointer0h, #0  
3e4a0     00 80 05 A6 |     if_z    mov     envph0, #0  
3e4a4     05 83 65 AC |     if_z    wrlong  sstart0, ptra[5]          ' reset bit #30 in hub
3e4a8                 | 
3e4a8                 | 
3e4a8                 |             
3e4a8     28 08 64 FD | p403        setq #4                          ' write new pointer, sample values and env pointer to the hub
3e4ac                 | 
3e4ac     00 79 65 FC |             wrlong  pointer0,ptra
3e4b0     B1 F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
3e4b4                 |                       
3e4b4                 | 
3e4b4     8A AB 7D FB |             djnf    cn, #p401
3e4b8     0F 72 E5 F4 |             bitnot rsample,#15
3e4bc     0F 70 E5 F4 |             bitnot lsample, #15
3e4c0                 |             
3e4c0     24 28 60 FD |             waitse1
3e4c4                 |    '         waitx ##33800000
3e4c4                 |      
3e4c4                 |             
3e4c4     0E 70 25 FC |             wypin   lsample,#left        '2      
3e4c8                 |             
3e4c8     0F 72 25 FC |             wypin   rsample,#right       '4
3e4cc     00 72 05 F6 |             mov rsample,#0
3e4d0     00 70 05 F6 |             mov lsample, #0
3e4d4                 | 
3e4d4                 |  
3e4d4                 | 		
3e4d4     00 C4 0D F2 | 	    cmp     scbase,#0 wz
3e4d8     20 00 90 AD |     if_z    jmp #p302	   
3e4dc                 |  
3e4dc                 |  
3e4dc     01 CA 15 F7 |             incmod  scope,#1 wc            '  todo: scope speed instead of const  
3e4e0     E3 C8 01 C6 |    if_c    mov scptr2,scptr
3e4e4     02 C8 65 C0 |     if_c    shl scptr2,#2
3e4e8     E2 C8 01 C1 |     if_c    add scptr2,scbase     
3e4ec     60 C8 65 FC |             wrlong scptr2,#$60
3e4f0     E4 BC 61 CC |     if_c    wrlong oldsample,scptr2
3e4f4     01 00 00 CF 
3e4f8     7F C6 05 C7 |     if_c    incmod scptr,##639
3e4fc                 | 			    
3e4fc                 | 
3e4fc                 |             
3e4fc                 |             
3e4fc                 |             
3e4fc                 |             
3e4fc                 |             
3e4fc     DC FD 9F FD |  p302           jmp     #loop            'loop
3e500                 | 
3e500                 | '----------------------------------------------------------------------------------
3e500                 | '------------- This is the end of the main loop -----------------------------------
3e500                 | '----------------------------------------------------------------------------------
3e500                 | 
3e500                 | '----------------------------------------------------------------------------------
3e500                 | '------------- PSRAM cache ----------- --------------------------------------------
3e500                 | '----------------------------------------------------------------------------------
3e500                 | 
3e500                 | ' There are 8 cache pointers for 8 channels
3e500                 | ' if 24 higher bits of address=cache, then get a word from the cache
3e500                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3e500                 | 
3e500                 | 
3e500     B3 EA E1 F8 | cache_read  	getbyte addrlo,qq,#0 			' when this is called, qq is the addres of the sample			
3e504                 |             
3e504     B3 EC 01 F6 | 	   	mov     addrhi,qq		
3e508     08 EC 45 F0 | 	    	shr     addrhi,#8		        ' get 24 upper bits
3e50c     EA AA 95 F9 | 	    	alts    cn,#cache1            
3e510     00 EC 09 F2 | 	    	cmp	addrhi,0-0 wz               	' and compare with the cache pointer for the channel
3e514     34 00 90 AD |     	if_z    jmp     #p701	    			' if equal, cache hit, read the sample from it
3e518                 | 	
3e518     EA AA 8D F9 | p702	    	altd    cn,#cache1			' cache miss. 
3e51c     F6 00 00 F6 | 	    	mov     0-0,addrhi                  	' update the pointer
3e520     F6 E4 01 F6 | 	    	mov     cmd,addrhi			' prepare the mailbox
3e524     08 E4 65 F0 | 	    	shl     cmd,#8
3e528     0B E4 3D F8 |             	setnib  cmd, #%1011, #7             	' read burst from the external memory
3e52c     D5 E6 01 F6 |             	mov     hubaddr,cn                  	' to the channel cache
3e530     08 E6 65 F0 |             	shl     hubaddr,#8                  	'
3e534     E8 E6 01 F1 |             	add     hubaddr,hubptr 
3e538     00 E9 05 F6 |             	mov     count,#256                  	' 256 bytes
3e53c     28 04 64 FD |             	setq    #2                          	' write 3 longs
3e540     B6 E4 61 FC |             	wrlong  cmd, mailbox                	' run it
3e544     B6 E4 01 FB | poll1       	rdlong  cmd, mailbox                	' poll mailbox for result
3e548     FE E5 B5 FB |             	tjs     cmd, #poll1                 	' retry until valid 
3e54c                 |             
3e54c                 | 	
3e54c     D5 66 01 F6 | p701	    	mov     qq,cn				' cache hit
3e550     08 66 65 F0 | 	    	shl     qq,#8				' compute the cache start
3e554     E8 66 01 F1 | 	    	add     qq,hubptr
3e558     F5 66 01 F1 | 	    	add	qq,addrlo			' add 8 lower bits to the cache addredd
3e55c     B3 68 E1 0A |     	_ret_   rdword  spl,qq                      	' read a long from the cache
3e560                 |           
3e560                 |   
3e560                 | 
3e560                 | 
3e560                 | '---------------------------------------------------------------------------
3e560                 | '------- Variables ---------------------------------------------------------
3e560                 | '---------------------------------------------------------------------------
3e560                 | 
3e560                 | ' constants
3e560                 | 
3e560     00 00 00 40 | a40000000   long $40000000
3e564     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3e568                 | 
3e568                 | 
3e568                 | 
3e568                 | 
3e568                 | 
3e568     00 00 00 00 | channeladd long 0
3e56c                 | 
3e56c     00 00 00 00 | front       long 0
3e570                 | 
3e570                 | ' temporary variables 
3e570     00 00 00 00 | qq          long 0
3e574     00 00 00 00 | spl         long 0
3e578     00 00 00 00 | zero        long 0
3e57c     00 00 00 00 | mailbox     long 0
3e580     00 00 00 00 | mailbox2 long 0
3e584                 | 
3e584                 | ' Interrupt ISR variables
3e584                 | 
3e584     00 00 00 00 | lsample     long 0
3e588     00 00 00 00 | rsample     long 0
3e58c     00 00 00 00 | lsnext      long 0
3e590     00 00 00 00 | rsnext      long 0 
3e594                 | 
3e594                 | ' channel parameter block
3e594                 | 
3e594     00 00 00 00 | pointer0    long 0   
3e598     00 00 00 00 | pointer0h   long 0  
3e59c     00 00 00 00 | sample0     long 0
3e5a0     00 00 00 00 | rawspl0	    long 0
3e5a4     00 00 00 00 | envph0	    long 0
3e5a8     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3e5ac     00 00 00 00 | lstart0     long 0
3e5b0     00 00 00 00 | lend0       long 0
3e5b4     00 00 00 00 | volpan0     long 0
3e5b8     00 00 00 00 | freqskip0   long 0
3e5bc     00 00 00 00 | command0    long 0
3e5c0     00 00 00 00 | envptr0	    long 0
3e5c4     00 00 00 00 | envspd0	    long 0
3e5c8     00 00 00 00 | envlen0	    long 0
3e5cc     00 00 00 00 | res5	    long 0
3e5d0     00 00 00 00 | res6	    long 0
3e5d4     00 00 00 00 | res7	    long 0
3e5d8     00 00 00 00 | res8	    long 0
3e5dc     00 00 00 00 | oldspl		long 0
3e5e0     00 00 00 00 | afreq0      long 0
3e5e4     00 00 00 00 | askip0      long 0
3e5e8     00 00 00 00 | avol0       long 0
3e5ec     00 00 00 00 | apan0       long 0
3e5f0     00 00 00 00 | oldptrh	    long 0
3e5f4     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3e5f8     00 00 00 00 | cn          long 0
3e5fc     00 00 00 00 | ct          long 0
3e600     00 00 00 00 | dt0         long 0
3e604                 | 
3e604                 | ' Samples
3e604     00 00 00 00 | oldls       long 0
3e608     00 00 00 00 | oldrs       long 0
3e60c                 | 
3e60c     00 00 00 00 | ls0         long 0
3e610     00 00 00 00 | rs0         long 0
3e614                 | 
3e614     00 00 00 00 | ls          long 0    
3e618     00 00 00 00 | rs          long 0
3e61c                 | 
3e61c     00 00 00 00 | oldsample   long 0
3e620     00 00 00 00 | newsample   long 0
3e624                 | 
3e624     00 00 00 00 | nrsample    long 0
3e628     00 00 00 00 | nlsample    long 0
3e62c                 | 
3e62c     00 00 00 00 | scbase long 0
3e630     00 00 00 00 | scptr long 0
3e634     00 00 00 00 | scptr2 long 0
3e638     00 00 00 00 | scope long 0
3e63c                 | 
3e63c     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3e640     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3e644                 | 
3e644     00 18 07 00 | hubptr      long $71800
3e648     00 1E 00 00 | sr44100     long 30*256
3e64c     00 00 00 00 | cache1      long 0
3e650     00 00 00 00 | cache2      long 0
3e654     00 00 00 00 | cache3      long 0
3e658     00 00 00 00 | cache4      long 0
3e65c     00 00 00 00 | cache5      long 0
3e660     00 00 00 00 | cache6      long 0
3e664     00 00 00 00 | cache7      long 0
3e668     00 00 00 00 | cache8      long 0
3e66c                 | 
3e66c                 | 
3e66c     00 00 00 00 | cmd         long 0
3e670     00 00 00 00 | hubaddr     long 0
3e674     00 01 00 00 | count       long 256
3e678     00 00 00 00 | addrlo long 0
3e67c     00 00 00 00 | addrhi long 0
3e680     00 00 00 00 | pointer00 long 0
3e684     00 00 00 00 | envhi long 0
3e688     00 00 00 00 | envlo long 0
3e68c     00 00 00 00 | envs1 long 0
3e690     00 00 00 00 | envs2 long 0
3e694     00 00 00 00 | noise0 long 0
3e698                 | 
3e698     00 00 00 00 | ct1 long 0
3e69c     00 00 00 00 | ct2 long 0
3e6a0     00 00 00 00 
3e6a4     00 00 00 00 | null  			long 	0,0           ' for channel reset
3e6a8                 | 	alignl
3e6a8                 | __system__dat_
3e6a8     00 00 00 00 
3e6ac     00 00 00 00 | 	byte	$00[8]
3e6b0     03 00 00 00 
3e6b4     00 00 00 00 
3e6b8     00 00 00 00 
3e6bc     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e6c0     00 00 00 00 
      ...             
3e94c     00 00 00 00 
3e950     00 00 00 00 | 	byte	$00[660]
3e954     00 00 40 0B | 	long	(180 {__system____root_opendir})<<20
3e958     00 00 50 0B | 	long	(181 {__system____root_closedir})<<20
3e95c     00 00 60 0B | 	long	(182 {__system____root_readdir})<<20
3e960     00 00 70 0B | 	long	(183 {__system____root_stat})<<20
3e964     00 00 00 00 
      ...             
3e980     00 00 00 00 
3e984     00 00 00 00 | 	byte	$00[36]
3e988     F0 E9 03 00 | 	long	@@@__system__dat_ + 840
3e98c     F3 E9 03 00 | 	long	@@@__system__dat_ + 843
3e990     14 EA 03 00 | 	long	@@@__system__dat_ + 876
3e994     2D EA 03 00 | 	long	@@@__system__dat_ + 901
3e998     48 EA 03 00 | 	long	@@@__system__dat_ + 928
3e99c     62 EA 03 00 | 	long	@@@__system__dat_ + 954
3e9a0     72 EA 03 00 | 	long	@@@__system__dat_ + 970
3e9a4     84 EA 03 00 | 	long	@@@__system__dat_ + 988
3e9a8     96 EA 03 00 | 	long	@@@__system__dat_ + 1006
3e9ac     A8 EA 03 00 | 	long	@@@__system__dat_ + 1024
3e9b0     B4 EA 03 00 | 	long	@@@__system__dat_ + 1036
3e9b4     C5 EA 03 00 | 	long	@@@__system__dat_ + 1053
3e9b8     D9 EA 03 00 | 	long	@@@__system__dat_ + 1073
3e9bc     E3 EA 03 00 | 	long	@@@__system__dat_ + 1083
3e9c0     F3 EA 03 00 | 	long	@@@__system__dat_ + 1099
3e9c4     02 EB 03 00 | 	long	@@@__system__dat_ + 1114
3e9c8     18 EB 03 00 | 	long	@@@__system__dat_ + 1136
3e9cc     31 EB 03 00 | 	long	@@@__system__dat_ + 1161
3e9d0     45 EB 03 00 | 	long	@@@__system__dat_ + 1181
3e9d4     53 EB 03 00 | 	long	@@@__system__dat_ + 1195
3e9d8     67 EB 03 00 | 	long	@@@__system__dat_ + 1215
3e9dc     73 EB 03 00 | 	long	@@@__system__dat_ + 1227
3e9e0     85 EB 03 00 | 	long	@@@__system__dat_ + 1245
3e9e4     9D EB 03 00 | 	long	@@@__system__dat_ + 1269
3e9e8     AF EB 03 00 | 	long	@@@__system__dat_ + 1287
3e9ec     C2 EB 03 00 | 	long	@@@__system__dat_ + 1306
3e9f0     4F 4B 00 4E 
3e9f4     75 6D 65 72 
3e9f8     69 63 61 6C 
3e9fc     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3ea00     75 6D 65 6E 
3ea04     74 20 6F 75 
3ea08     74 20 6F 66 
3ea0c     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3ea10     61 69 6E 00 
3ea14     52 65 73 75 
3ea18     6C 74 20 6E 
3ea1c     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3ea20     65 70 72 65 
3ea24     73 65 6E 74 
3ea28     61 62 6C 65 
3ea2c     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3ea30     65 67 61 6C 
3ea34     20 6D 75 6C 
3ea38     74 69 62 79 
3ea3c     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3ea40     65 71 75 65 
3ea44     6E 63 65 00 
3ea48     4E 6F 20 73 
3ea4c     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3ea50     66 69 6C 65 
3ea54     20 6F 72 20 
3ea58     64 69 72 65 
3ea5c     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3ea60     79 00 42 61 
3ea64     64 20 66 69 
3ea68     6C 65 20 6E 
3ea6c     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3ea70     72 00 50 65 
3ea74     72 6D 69 73 
3ea78     73 69 6F 6E 
3ea7c     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3ea80     69 65 64 00 
3ea84     4E 6F 74 20 
3ea88     65 6E 6F 75 
3ea8c     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3ea90     65 6D 6F 72 
3ea94     79 00 54 65 
3ea98     6D 70 6F 72 
3ea9c     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3eaa0     66 61 69 6C 
3eaa4     75 72 65 00 
3eaa8     46 69 6C 65 
3eaac     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3eab0     73 74 73 00 
3eab4     49 6E 76 61 
3eab8     6C 69 64 20 
3eabc     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3eac0     6D 65 6E 74 
3eac4     00 54 6F 6F 
3eac8     20 6D 61 6E 
3eacc     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3ead0     65 6E 20 66 
3ead4     69 6C 65 73 
3ead8     00 49 2F 4F 
3eadc     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3eae0     6F 72 00 4E 
3eae4     6F 74 20 61 
3eae8     20 64 69 72 
3eaec     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3eaf0     72 79 00 49 
3eaf4     73 20 61 20 
3eaf8     64 69 72 65 
3eafc     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3eb00     79 00 52 65 
3eb04     61 64 20 6F 
3eb08     6E 6C 79 20 
3eb0c     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3eb10     20 73 79 73 
3eb14     74 65 6D 00 
3eb18     46 75 6E 63 
3eb1c     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3eb20     20 6E 6F 74 
3eb24     20 69 6D 70 
3eb28     6C 65 6D 65 
3eb2c     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3eb30     00 44 69 72 
3eb34     65 63 74 6F 
3eb38     72 79 20 6E 
3eb3c     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3eb40     6D 70 74 79 
3eb44     00 4E 61 6D 
3eb48     65 20 74 6F 
3eb4c     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3eb50     6E 67 00 44 
3eb54     65 76 69 63 
3eb58     65 20 6E 6F 
3eb5c     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3eb60     65 6B 61 62 
3eb64     6C 65 00 42 
3eb68     61 64 20 61 
3eb6c     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3eb70     73 73 00 42 
3eb74     72 6F 6B 65 
3eb78     6E 20 63 6F 
3eb7c     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3eb80     74 69 6F 6E 
3eb84     00 44 65 76 
3eb88     69 63 65 20 
3eb8c     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3eb90     65 73 6F 75 
3eb94     72 63 65 20 
3eb98     62 75 73 79 
3eb9c     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3eba0     73 73 20 64 
3eba4     65 76 69 63 
3eba8     65 20 6C 69 
3ebac     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3ebb0     6F 20 73 70 
3ebb4     61 63 65 20 
3ebb8     6F 6E 20 64 
3ebbc     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3ebc0     65 00 55 6E 
3ebc4     6B 6E 6F 77 
3ebc8     6E 20 65 72 
3ebcc     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3ebd0     00 00 00 00 
3ebd4     00 00 00 00 
3ebd8     00 00 00 00 | 	byte	$00[12]
3ebdc     01 80 00 00 
3ebe0     00 00 00 00 
3ebe4     00 00 00 00 
3ebe8     00 00 00 00 | 	byte	$01, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ebec     00 00 00 00 | 	byte	$00, $00, $00, $00
3ebf0     00 00 50 0D | 	long	(213 {__system___tx})<<20
3ebf4     00 00 60 0D | 	long	(214 {__system___rx})<<20
3ebf8     00 00 00 00 | 	byte	$00, $00, $00, $00
3ebfc     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3ec00     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3ec04     00 00 00 00 
3ec08     00 00 00 00 | 	byte	$00[8]
3ec0c     01 00 00 00 
3ec10     02 80 00 00 
3ec14     00 00 00 00 
3ec18     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ec1c     00 00 00 00 
3ec20     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ec24     00 00 50 0D | 	long	(213 {__system___tx})<<20
3ec28     00 00 60 0D | 	long	(214 {__system___rx})<<20
3ec2c     00 00 00 00 | 	byte	$00, $00, $00, $00
3ec30     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3ec34     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3ec38     00 00 00 00 
3ec3c     00 00 00 00 | 	byte	$00[8]
3ec40     01 00 00 00 
3ec44     02 80 00 00 
3ec48     00 00 00 00 
3ec4c     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ec50     00 00 00 00 
3ec54     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ec58     00 00 50 0D | 	long	(213 {__system___tx})<<20
3ec5c     00 00 60 0D | 	long	(214 {__system___rx})<<20
3ec60     00 00 00 00 | 	byte	$00, $00, $00, $00
3ec64     00 00 70 0D | 	long	(215 {__system___rxtxioctl_0788})<<20
3ec68     00 00 80 0D | 	long	(216 {__system____dummy_flush_0789})<<20
3ec6c     00 00 00 00 
      ...             
3eddc     00 00 00 00 
3ede0     00 00 00 00 | 	byte	$00[376]
3ede4     E8 ED 03 00 | 	long	@@@__system__dat_ + 1856
3ede8     00 00 00 00 
3edec     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3edf0                 | 	alignl
3edf0                 | _fatfs_cc_dat_
3edf0     C7 00 FC 00 
3edf4     E9 00 E2 00 
3edf8     E4 00 E0 00 
3edfc     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3ee00     EA 00 EB 00 
3ee04     E8 00 EF 00 
3ee08     EE 00 EC 00 
3ee0c     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3ee10     C9 00 E6 00 
3ee14     C6 00 F4 00 
3ee18     F6 00 F2 00 
3ee1c     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3ee20     FF 00 D6 00 
3ee24     DC 00 F8 00 
3ee28     A3 00 D8 00 
3ee2c     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3ee30     E1 00 ED 00 
3ee34     F3 00 FA 00 
3ee38     F1 00 D1 00 
3ee3c     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3ee40     BF 00 AE 00 
3ee44     AC 00 BD 00 
3ee48     BC 00 A1 00 
3ee4c     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3ee50     91 25 92 25 
3ee54     93 25 02 25 
3ee58     24 25 C1 00 
3ee5c     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3ee60     A9 00 63 25 
3ee64     51 25 57 25 
3ee68     5D 25 A2 00 
3ee6c     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3ee70     14 25 34 25 
3ee74     2C 25 1C 25 
3ee78     00 25 3C 25 
3ee7c     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3ee80     5A 25 54 25 
3ee84     69 25 66 25 
3ee88     60 25 50 25 
3ee8c     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3ee90     F0 00 D0 00 
3ee94     CA 00 CB 00 
3ee98     C8 00 31 01 
3ee9c     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3eea0     CF 00 18 25 
3eea4     0C 25 88 25 
3eea8     84 25 A6 00 
3eeac     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3eeb0     D3 00 DF 00 
3eeb4     D4 00 D2 00 
3eeb8     F5 00 D5 00 
3eebc     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3eec0     DE 00 DA 00 
3eec4     DB 00 D9 00 
3eec8     FD 00 DD 00 
3eecc     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3eed0     AD 00 B1 00 
3eed4     17 20 BE 00 
3eed8     B6 00 A7 00 
3eedc     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3eee0     B0 00 A8 00 
3eee4     B7 00 B9 00 
3eee8     B3 00 B2 00 
3eeec     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3eef0     61 00 1A 03 
3eef4     E0 00 17 03 
3eef8     F8 00 07 03 
3eefc     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3ef00     78 01 00 01 
3ef04     30 01 32 01 
3ef08     06 01 39 01 
3ef0c     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3ef10     2E 01 79 01 
3ef14     06 01 80 01 
3ef18     4D 00 43 02 
3ef1c     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3ef20     82 01 84 01 
3ef24     84 01 86 01 
3ef28     87 01 87 01 
3ef2c     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3ef30     8B 01 8B 01 
3ef34     8D 01 8E 01 
3ef38     8F 01 90 01 
3ef3c     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3ef40     93 01 94 01 
3ef44     F6 01 96 01 
3ef48     97 01 98 01 
3ef4c     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3ef50     9B 01 9C 01 
3ef54     9D 01 20 02 
3ef58     9F 01 A0 01 
3ef5c     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3ef60     A2 01 A4 01 
3ef64     A4 01 A6 01 
3ef68     A7 01 A7 01 
3ef6c     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3ef70     AB 01 AC 01 
3ef74     AC 01 AE 01 
3ef78     AF 01 AF 01 
3ef7c     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3ef80     B3 01 B3 01 
3ef84     B5 01 B5 01 
3ef88     B7 01 B8 01 
3ef8c     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3ef90     BB 01 BC 01 
3ef94     BC 01 BE 01 
3ef98     F7 01 C0 01 
3ef9c     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3efa0     C3 01 C4 01 
3efa4     C5 01 C4 01 
3efa8     C7 01 C8 01 
3efac     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3efb0     CB 01 CA 01 
3efb4     CD 01 10 01 
3efb8     DD 01 01 00 
3efbc     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3efc0     12 01 F3 01 
3efc4     03 00 F1 01 
3efc8     F4 01 F4 01 
3efcc     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3efd0     22 02 12 01 
3efd4     3A 02 09 00 
3efd8     65 2C 3B 02 
3efdc     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3efe0     66 2C 3F 02 
3efe4     40 02 41 02 
3efe8     41 02 46 02 
3efec     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3eff0     40 00 81 01 
3eff4     86 01 55 02 
3eff8     89 01 8A 01 
3effc     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3f000     5A 02 90 01 
3f004     5C 02 5D 02 
3f008     5E 02 5F 02 
3f00c     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3f010     62 02 94 01 
3f014     64 02 65 02 
3f018     66 02 67 02 
3f01c     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3f020     6A 02 62 2C 
3f024     6C 02 6D 02 
3f028     6E 02 9C 01 
3f02c     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3f030     9D 01 73 02 
3f034     74 02 9F 01 
3f038     76 02 77 02 
3f03c     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3f040     7A 02 7B 02 
3f044     7C 02 64 2C 
3f048     7E 02 7F 02 
3f04c     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3f050     82 02 A9 01 
3f054     84 02 85 02 
3f058     86 02 87 02 
3f05c     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3f060     B1 01 B2 01 
3f064     45 02 8D 02 
3f068     8E 02 8F 02 
3f06c     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3f070     B7 01 7B 03 
3f074     03 00 FD 03 
3f078     FE 03 FF 03 
3f07c     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3f080     86 03 88 03 
3f084     89 03 8A 03 
3f088     B1 03 11 03 
3f08c     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3f090     A3 03 A3 03 
3f094     C4 03 08 03 
3f098     CC 03 03 00 
3f09c     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3f0a0     8F 03 D8 03 
3f0a4     18 01 F2 03 
3f0a8     0A 00 F9 03 
3f0ac     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3f0b0     F5 03 F6 03 
3f0b4     F7 03 F7 03 
3f0b8     F9 03 FA 03 
3f0bc     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3f0c0     20 03 50 04 
3f0c4     10 07 60 04 
3f0c8     22 01 8A 04 
3f0cc     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3f0d0     0E 01 CF 04 
3f0d4     01 00 C0 04 
3f0d8     D0 04 44 01 
3f0dc     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3f0e0     00 00 7D 1D 
3f0e4     01 00 63 2C 
3f0e8     00 1E 96 01 
3f0ec     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3f0f0     00 1F 08 06 
3f0f4     10 1F 06 06 
3f0f8     20 1F 08 06 
3f0fc     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3f100     40 1F 06 06 
3f104     51 1F 07 00 
3f108     59 1F 52 1F 
3f10c     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3f110     5D 1F 56 1F 
3f114     5F 1F 60 1F 
3f118     08 06 70 1F 
3f11c     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3f120     BB 1F C8 1F 
3f124     C9 1F CA 1F 
3f128     CB 1F DA 1F 
3f12c     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3f130     F9 1F EA 1F 
3f134     EB 1F FA 1F 
3f138     FB 1F 80 1F 
3f13c     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3f140     08 06 A0 1F 
3f144     08 06 B0 1F 
3f148     04 00 B8 1F 
3f14c     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3f150     BC 1F CC 1F 
3f154     01 00 C3 1F 
3f158     D0 1F 02 06 
3f15c     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3f160     E5 1F 01 00 
3f164     EC 1F F3 1F 
3f168     01 00 FC 1F 
3f16c     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3f170     32 21 70 21 
3f174     10 02 84 21 
3f178     01 00 83 21 
3f17c     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3f180     30 2C 2F 04 
3f184     60 2C 02 01 
3f188     67 2C 06 01 
3f18c     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3f190     80 2C 64 01 
3f194     00 2D 26 08 
3f198     41 FF 1A 03 
3f19c     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3f1a0     05 07 09 0E 
3f1a4     10 12 14 16 
3f1a8     18 1C 1E 43 
3f1ac     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3f1b0     41 41 43 45 
3f1b4     45 45 49 49 
3f1b8     49 41 41 45 
3f1bc     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3f1c0     4F 55 55 59 
3f1c4     4F 55 4F 9C 
3f1c8     4F 9E 9F 41 
3f1cc     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3f1d0     A5 A6 A7 A8 
3f1d4     A9 AA AB AC 
3f1d8     AD AE AF B0 
3f1dc     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3f1e0     41 41 41 B8 
3f1e4     B9 BA BB BC 
3f1e8     BD BE BF C0 
3f1ec     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3f1f0     C5 41 41 C8 
3f1f4     C9 CA CB CC 
3f1f8     CD CE CF D1 
3f1fc     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3f200     49 49 49 49 
3f204     D9 DA DB DC 
3f208     DD 49 DF 4F 
3f20c     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3f210     4F E6 E8 E8 
3f214     55 55 55 59 
3f218     59 EE EF F0 
3f21c     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3f220     F5 F6 F7 F8 
3f224     F9 FA FB FC 
3f228     FD FE FF 00 
3f22c     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3f230     00 00 00 00 
3f234     FF FF FF FF 
3f238     1F 00 00 00 
3f23c     1C 00 00 00 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00
3f240     1F 00 00 00 
3f244     1E 00 00 00 
3f248     1F 00 00 00 
3f24c     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3f250     1F 00 00 00 
3f254     1F 00 00 00 
3f258     1E 00 00 00 
3f25c     1F 00 00 00 | 	byte	$1f, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3f260     1E 00 00 00 
3f264     1F 00 00 00 
3f268     00 00 00 00 
3f26c     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00
3f270     3B 00 00 00 
3f274     5A 00 00 00 
3f278     78 00 00 00 
3f27c     97 00 00 00 | 	byte	$3b, $00, $00, $00, $5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00
3f280     B5 00 00 00 
3f284     D4 00 00 00 
3f288     F3 00 00 00 
3f28c     11 01 00 00 | 	byte	$b5, $00, $00, $00, $d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00
3f290     30 01 00 00 
3f294     4E 01 00 00 
3f298     6D 01 00 00 
3f29c     FF FF FF FF | 	byte	$30, $01, $00, $00, $4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff
3f2a0     00 00 00 00 
      ...             
3f2bc     00 00 00 00 
3f2c0     00 00 00 00 | 	byte	$00[36]
3f2c4     E2 F2 03 00 | 	long	@@@_fatfs_cc_dat_ + 1266
3f2c8     E6 F2 03 00 | 	long	@@@_fatfs_cc_dat_ + 1270
3f2cc     00 00 00 00 
3f2d0     00 00 00 00 
3f2d4     00 00 00 00 
3f2d8     00 00 00 00 
3f2dc     00 00       | 	byte	$00[18]
3f2de     3F 3F 3F 00 
3f2e2     55 43 54 00 
3f2e6     55 43 54 00 
3f2ea     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3f2ee     00 00 00 00 
3f2f2     00 00 00    | 	byte	$00[7]
3f2f5     CA 9A 3B 00 
3f2f9     00 00 00 01 
3f2fd     01 01 01 01 
3f301     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3f305     91 11 11 11 
3f309     11 01 01 01 
3f30d     01 01 01 01 
3f311     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3f315     01 01 01 01 
3f319     01 01 01    | 	byte	$01[7]
3f31c     90 20 20 20 
3f320     20 20 20 20 
3f324     20 20 20 20 
3f328     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3f32c     42 42 42 42 
3f330     42 42 42 42 
3f334     42 42       | 	byte	$42[10]
3f336     20 20 20 20 
3f33a     20 20 20    | 	byte	$20[7]
3f33d     44 44 44 44 
3f341     44 44       | 	byte	$44[6]
3f343     04 04 04 04 
3f347     04 04 04 04 
3f34b     04 04 04 04 
3f34f     04 04 04 04 
3f353     04 04 04 04 | 	byte	$04[20]
3f357     20 20 20 20 
3f35b     20 20       | 	byte	$20[6]
3f35d     48 48 48 48 
3f361     48 48       | 	byte	$48[6]
3f363     08 08 08 08 
3f367     08 08 08 08 
3f36b     08 08 08 08 
3f36f     08 08 08 08 
3f373     08 08 08 08 | 	byte	$08[20]
3f377     20 20 20 20 
3f37b     01 00 00 00 
3f37f     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3f380                 | __methodtable__
3f380     D0 5A 01 00 | 	long	@_do_no_command
3f384     38 E7 01 00 | 	long	@_do_plus
3f388     BC DB 01 00 | 	long	@_do_minus
3f38c     7C E6 01 00 | 	long	@_do_or
3f390     80 E0 01 00 | 	long	@_do_mul
3f394     2C CC 01 00 | 	long	@_do_fdiv
3f398     58 C6 01 00 | 	long	@_do_and
3f39c     14 C7 01 00 | 	long	@_do_div
3f3a0     FC DE 01 00 | 	long	@_do_mod
3f3a4     08 EC 01 00 | 	long	@_do_shl
3f3a8     C4 EC 01 00 | 	long	@_do_shr
3f3ac     B8 EA 01 00 | 	long	@_do_power
3f3b0     24 BE 01 00 | 	long	@_do_getvar
3f3b4     5C 86 01 00 | 	long	@_do_push
3f3b8     B0 B9 01 00 | 	long	@_do_assign
3f3bc     9C F5 00 00 | 	long	@_do_cls
3f3c0     A8 54 01 00 | 	long	@_do_new
3f3c4     00 7F 01 00 | 	long	@_do_plot
3f3c8     44 17 01 00 | 	long	@_do_draw
3f3cc     08 81 01 00 | 	long	@_do_print
3f3d0     84 F3 00 00 | 	long	@_do_circle
3f3d4     4C 19 01 00 | 	long	@_do_fcircle
3f3d8     80 E2 00 00 | 	long	@_do_box
3f3dc     D8 21 01 00 | 	long	@_do_frame
3f3e0     E8 F7 00 00 | 	long	@_do_color
3f3e4     68 1F 01 00 | 	long	@_do_for
3f3e8     0C 57 01 00 | 	long	@_do_next
3f3ec     B4 43 01 00 | 	long	@_do_list
3f3f0     40 9D 01 00 | 	long	@_do_run
3f3f4     78 18 01 00 | 	long	@_do_error
3f3f8     C4 2D 01 00 | 	long	@_do_fast_goto
3f3fc     B4 2E 01 00 | 	long	@_do_find_goto
3f400     7C 30 01 00 | 	long	@_do_slow_goto
3f404     F0 5A 01 00 | 	long	@_do_nothing
3f408     64 A1 01 00 | 	long	@_do_save
3f40c     0C 46 01 00 | 	long	@_do_load
3f410     50 73 01 00 | 	long	@_do_pinwrite
3f414     44 B7 01 00 | 	long	@_do_waitms
3f418     24 B8 01 00 | 	long	@_do_waitvbl
3f41c     E4 32 01 00 | 	long	@_do_if
3f420     10 18 01 00 | 	long	@_do_else
3f424     98 C8 01 00 | 	long	@_do_eq
3f428     7C CD 01 00 | 	long	@_do_ge
3f42c     B4 D4 01 00 | 	long	@_do_le
3f430     18 D1 01 00 | 	long	@_do_gt
3f434     48 D8 01 00 | 	long	@_do_lt
3f438     E8 E2 01 00 | 	long	@_do_ne
3f43c     BC 9A 01 00 | 	long	@_do_rnd
3f440     5C E4 00 00 | 	long	@_do_brun
3f444     AC DE 00 00 | 	long	@_do_beep
3f448     54 10 01 00 | 	long	@_do_dir
3f44c     CC 6F 01 00 | 	long	@_do_paper
3f450     A0 36 01 00 | 	long	@_do_ink
3f454     EC 1E 01 00 | 	long	@_do_font
3f458     28 4F 01 00 | 	long	@_do_mode
3f45c     64 53 01 00 | 	long	@_do_mouse
3f460     5C 2C 01 00 | 	long	@_do_gettime
3f464     08 FD 00 00 | 	long	@_do_cursor
3f468     F4 F4 00 00 | 	long	@_do_click
3f46c     20 54 01 00 | 	long	@_do_mousex
3f470     64 54 01 00 | 	long	@_do_mousey
3f474     98 53 01 00 | 	long	@_do_mousek
3f478     DC 53 01 00 | 	long	@_do_mousew
3f47c     18 AC 01 00 | 	long	@_do_sin
3f480     04 AF 01 00 | 	long	@_do_stick
3f484     04 B2 01 00 | 	long	@_do_strig
3f488     5C AD 01 00 | 	long	@_do_sprite
3f48c     8C 0C 01 00 | 	long	@_do_defsprite
3f490     24 2A 01 00 | 	long	@_do_getpixel
3f494     20 B7 01 00 | 	long	@_do_waitclock
3f498     4C DE 01 00 | 	long	@_do_negative
3f49c     30 8B 01 00 | 	long	@_do_rdpin
3f4a0     CC 9C 01 00 | 	long	@_do_rqpin
3f4a4     84 71 01 00 | 	long	@_do_pinread
3f4a8     30 B8 01 00 | 	long	@_do_wrpin
3f4ac     B0 B8 01 00 | 	long	@_do_wxpin
3f4b0     30 B9 01 00 | 	long	@_do_wypin
3f4b4     C4 70 01 00 | 	long	@_do_pinfloat
3f4b8     44 71 01 00 | 	long	@_do_pinlo
3f4bc     04 71 01 00 | 	long	@_do_pinhi
3f4c0     08 72 01 00 | 	long	@_do_pinstart
3f4c4     10 73 01 00 | 	long	@_do_pintoggle
3f4c8     80 80 01 00 | 	long	@_do_position
3f4cc     F8 FB 00 00 | 	long	@_do_cos
3f4d0     80 B3 01 00 | 	long	@_do_tan
3f4d4     A8 DD 00 00 | 	long	@_do_atn
3f4d8     AC DC 00 00 | 	long	@_do_asin
3f4dc     64 DA 00 00 | 	long	@_do_acos
3f4e0     24 AE 01 00 | 	long	@_do_sqr
3f4e4     28 1A 01 00 | 	long	@_do_fill
3f4e8     B0 05 01 00 | 	long	@_do_defsnd
3f4ec     08 FE 00 00 | 	long	@_do_defenv
3f4f0     08 8B 01 00 | 	long	@_do_rad
3f4f4     EC 0E 01 00 | 	long	@_do_deg
3f4f8     20 37 01 00 | 	long	@_do_int
3f4fc     D8 73 01 00 | 	long	@_do_play
3f500     D0 A6 01 00 | 	long	@_do_setdelay
3f504     70 A7 01 00 | 	long	@_do_setenv
3f508     10 A8 01 00 | 	long	@_do_setlen
3f50c     B0 A8 01 00 | 	long	@_do_setpan
3f510     F0 A9 01 00 | 	long	@_do_setvol
3f514     90 AA 01 00 | 	long	@_do_setwave
3f518     50 A9 01 00 | 	long	@_do_setsustain
3f51c     F0 97 01 00 | 	long	@_do_release
3f520     5C 28 01 00 | 	long	@_do_getenvsustain
3f524     B0 7F 01 00 | 	long	@_do_poke
3f528     AC 16 01 00 | 	long	@_do_dpoke
3f52c     AC 4B 01 00 | 	long	@_do_lpoke
3f530     54 70 01 00 | 	long	@_do_peek
3f534     3C 16 01 00 | 	long	@_do_dpeek
3f538     3C 4B 01 00 | 	long	@_do_lpeek
3f53c     28 23 01 00 | 	long	@_do_fre
3f540     54 29 01 00 | 	long	@_do_getnotevalue
3f544     D0 C2 01 00 | 	long	@_do_getaddr
3f548     C8 33 01 00 | 	long	@_do_inkey
3f54c     E4 D9 00 00 | 	long	@_do_abs
3f550     C0 31 01 00 | 	long	@_do_hex
3f554     5C E1 00 00 | 	long	@_do_bin
3f558     7C B4 01 00 | 	long	@_do_val
3f55c     A4 F2 00 00 | 	long	@_do_chr
3f560     60 DB 00 00 | 	long	@_do_asc
3f564     E8 40 01 00 | 	long	@_do_left
3f568     50 99 01 00 | 	long	@_do_right
3f56c     CC 4C 01 00 | 	long	@_do_mid
3f570     54 42 01 00 | 	long	@_do_len
3f574     AC 2C 01 00 | 	long	@_do_gosub
3f578     A4 98 01 00 | 	long	@_do_return
3f57c     34 18 01 00 | 	long	@_do_end
3f580     48 80 01 00 | 	long	@_do_pop
3f584     FC 49 01 00 | 	long	@_do_log
3f588     00 F1 00 00 | 	long	@_do_changevol
3f58c     C0 F1 00 00 | 	long	@_do_changewav
3f590     2C F0 00 00 | 	long	@_do_changepan
3f594     54 EC 00 00 | 	long	@_do_changefreq
3f598     30 AB 01 00 | 	long	@_do_shutup
3f59c     78 9C 01 00 | 	long	@_do_round
3f5a0     68 18 01 00 | 	long	@_do_enter
3f5a4     B8 5B 01 00 | 	long	@_do_open
3f5a8     20 F5 00 00 | 	long	@_do_close
3f5ac     8C 23 01 00 | 	long	@_do_get
3f5b0     78 87 01 00 | 	long	@_do_put
3f5b4     94 E6 00 00 | 	long	@_do_cd
3f5b8     14 0F 01 00 | 	long	@_do_delete
3f5bc     68 4E 01 00 | 	long	@_do_mkdir
3f5c0     B0 DF 00 00 | 	long	@_do_blit
3f5c4     F4 22 01 00 | 	long	@_do_framebuf
3f5c8     F4 5A 01 00 | 	long	@_do_on
3f5cc     14 AD 01 00 | 	long	@_do_skip
3f5d0     DC 37 01 00 | 	long	@_do_input
3f5d4     98 8D 01 00 | 	long	@_do_read
3f5d8     64 98 01 00 | 	long	@_do_restore
3f5dc     30 69 01 00 | 	long	@_do_padx
3f5e0     64 6B 01 00 | 	long	@_do_pady
3f5e4     98 6D 01 00 | 	long	@_do_padz
3f5e8     2C 5E 01 00 | 	long	@_do_padrx
3f5ec     60 60 01 00 | 	long	@_do_padry
3f5f0     94 62 01 00 | 	long	@_do_padrz
3f5f4     FC 66 01 00 | 	long	@_do_padw
3f5f8     C8 64 01 00 | 	long	@_do_pads
3f5fc     20 F8 00 00 | 	long	@_do_copy
3f600     DC F5 00 00 | 	long	@_do_coginit
3f604     A8 F7 00 00 | 	long	@_do_cogstop
3f608     44 4C 01 00 | 	long	@_do_memlo
3f60c     88 4C 01 00 | 	long	@_do_memtop
3f610     F4 A4 01 00 | 	long	@_do_setcolor
3f614     64 27 01 00 | 	long	@_do_getcolor
3f618     3C FD 00 00 | 	long	@_do_defchar
3f61c     9C 98 01 00 | 	long	@_do_restorepalette
3f620     30 1B 01 00 | 	long	@_do_findfirst
3f624     30 1E 01 00 | 	long	@_do_findnext
3f628     54 A4 01 00 | 	long	@_do_setamode
3f62c     50 2B 01 00 | 	long	@_do_getrealfreq
3f630     80 B0 01 00 | 	long	@_do_str
3f634     D4 2E 02 00 | 	long	@_hg010b_spin2_putchar
3f638     E0 23 03 00 | 	long	@__system___struct___bas_wrap_sender_tx_
3f63c     24 24 03 00 | 	long	@__system___struct___bas_wrap_sender_rx_
3f640     6C 24 03 00 | 	long	@__system___struct___bas_wrap_sender_close_
3f644     10 23 03 00 | 	long	@__system___struct__s_vfs_file_t_putchar_
3f648     80 23 03 00 | 	long	@__system___struct__s_vfs_file_t_getchar_
3f64c     C8 22 03 00 | 	long	@__system____strs_cl_pfunc_
3f650     70 99 02 00 | 	long	@__system____root_opendir
3f654     0C 9A 02 00 | 	long	@__system____root_closedir
3f658     88 99 02 00 | 	long	@__system____root_readdir
3f65c     14 9A 02 00 | 	long	@__system____root_stat
3f660     D8 91 02 00 | 	long	@__system____default_putc
3f664     54 91 02 00 | 	long	@__system____default_getc
3f668     84 92 02 00 | 	long	@__system____default_flush
3f66c     18 16 03 00 | 	long	@_fatfs_cc_v_close
3f670     00 19 03 00 | 	long	@_fatfs_cc_v_read
3f674     8C 19 03 00 | 	long	@_fatfs_cc_v_write
3f678     04 1A 03 00 | 	long	@_fatfs_cc_v_lseek
3f67c     A0 1A 03 00 | 	long	@_fatfs_cc_v_ioctl
3f680     CC 1B 03 00 | 	long	@_fatfs_cc_v_flush
3f684     F4 1A 03 00 | 	long	@_fatfs_cc_v_open
3f688     84 15 03 00 | 	long	@_fatfs_cc_v_creat
3f68c     54 16 03 00 | 	long	@_fatfs_cc_v_opendir
3f690     C8 16 03 00 | 	long	@_fatfs_cc_v_closedir
3f694     08 17 03 00 | 	long	@_fatfs_cc_v_readdir
3f698     D4 17 03 00 | 	long	@_fatfs_cc_v_stat
3f69c     B4 1A 03 00 | 	long	@_fatfs_cc_v_mkdir
3f6a0     D4 1A 03 00 | 	long	@_fatfs_cc_v_rmdir
3f6a4     C4 1A 03 00 | 	long	@_fatfs_cc_v_remove
3f6a8     E4 1A 03 00 | 	long	@_fatfs_cc_v_rename
3f6ac     18 1C 03 00 | 	long	@_fatfs_cc_v_init
3f6b0     20 1C 03 00 | 	long	@_fatfs_cc_v_deinit
3f6b4     18 BA 02 00 | 	long	@_sdmm_cc_v_read
3f6b8     24 BA 02 00 | 	long	@_sdmm_cc_v_write
3f6bc     00 BB 02 00 | 	long	@_sdmm_cc_v_close
3f6c0     30 BA 02 00 | 	long	@_sdmm_cc_v_ioctl
3f6c4     F8 BA 02 00 | 	long	@_sdmm_cc_v_flush
3f6c8     54 BA 02 00 | 	long	@_sdmm_cc_v_lseek
3f6cc     28 BB 02 00 | 	long	@_sdmm_cc_v_putc
3f6d0     74 BB 02 00 | 	long	@_sdmm_cc_v_getc
3f6d4     D4 4A 02 00 | 	long	@__system___tx
3f6d8     14 4B 02 00 | 	long	@__system___rx
3f6dc     40 A4 02 00 | 	long	@__system___rxtxioctl_0788
3f6e0     98 A4 02 00 | 	long	@__system____dummy_flush_0789
3f6e4                 | __heap_base
3f6e4     00 00 00 00 
      ...             
56de4     00 00 00 00 
56de8     00 00 00 00 | 	long	0[24002]
56dec                 | objmem
56dec     00 00 00 00 
      ...             
6155c     00 00 00 00 
61560     00 00 00 00 | 	long	0[10718]
61564                 | stackspace
61564     00 00 00 00 | 	long	0[1]
61568 140             | 	org	COG_BSS_START
61568 140             | _var01
61568 140             | 	res	1
61568 141             | _var02
61568 141             | 	res	1
61568 142             | _var03
61568 142             | 	res	1
61568 143             | _var04
61568 143             | 	res	1
61568 144             | _var05
61568 144             | 	res	1
61568 145             | _var06
61568 145             | 	res	1
61568 146             | _var07
61568 146             | 	res	1
61568 147             | _var08
61568 147             | 	res	1
61568 148             | _var09
61568 148             | 	res	1
61568 149             | arg01
61568 149             | 	res	1
61568 14a             | arg02
61568 14a             | 	res	1
61568 14b             | arg03
61568 14b             | 	res	1
61568 14c             | arg04
61568 14c             | 	res	1
61568 14d             | arg05
61568 14d             | 	res	1
61568 14e             | arg06
61568 14e             | 	res	1
61568 14f             | arg07
61568 14f             | 	res	1
61568 150             | arg08
61568 150             | 	res	1
61568 151             | arg09
61568 151             | 	res	1
61568 152             | arg10
61568 152             | 	res	1
61568 153             | local01
61568 153             | 	res	1
61568 154             | local02
61568 154             | 	res	1
61568 155             | local03
61568 155             | 	res	1
61568 156             | local04
61568 156             | 	res	1
61568 157             | local05
61568 157             | 	res	1
61568 158             | local06
61568 158             | 	res	1
61568 159             | local07
61568 159             | 	res	1
61568 15a             | local08
61568 15a             | 	res	1
61568 15b             | local09
61568 15b             | 	res	1
61568 15c             | local10
61568 15c             | 	res	1
61568 15d             | local11
61568 15d             | 	res	1
61568 15e             | local12
61568 15e             | 	res	1
61568 15f             | local13
61568 15f             | 	res	1
61568 160             | local14
61568 160             | 	res	1
61568 161             | local15
61568 161             | 	res	1
61568 162             | local16
61568 162             | 	res	1
61568 163             | local17
61568 163             | 	res	1
61568 164             | local18
61568 164             | 	res	1
61568 165             | local19
61568 165             | 	res	1
61568 166             | local20
61568 166             | 	res	1
61568 167             | local21
61568 167             | 	res	1
61568 168             | local22
61568 168             | 	res	1
61568 169             | local23
61568 169             | 	res	1
61568 16a             | local24
61568 16a             | 	res	1
61568 16b             | local25
61568 16b             | 	res	1
61568 16c             | local26
61568 16c             | 	res	1
61568 16d             | local27
61568 16d             | 	res	1
61568 16e             | local28
61568 16e             | 	res	1
61568 16f             | local29
61568 16f             | 	res	1
61568 170             | local30
61568 170             | 	res	1
61568 171             | local31
61568 171             | 	res	1
61568 172             | local32
61568 172             | 	res	1
61568 173             | local33
61568 173             | 	res	1
61568 174             | local34
61568 174             | 	res	1
61568 175             | local35
61568 175             | 	res	1
61568 176             | local36
61568 176             | 	res	1
61568 177             | local37
61568 177             | 	res	1
61568 178             | local38
61568 178             | 	res	1
61568 179             | local39
61568 179             | 	res	1
61568 17a             | local40
61568 17a             | 	res	1
61568 17b             | local41
61568 17b             | 	res	1
61568 17c             | local42
61568 17c             | 	res	1
61568 17d             | local43
61568 17d             | 	res	1
61568 17e             | local44
61568 17e             | 	res	1
61568 17f             | local45
61568 17f             | 	res	1
61568 180             | local46
61568 180             | 	res	1
61568 181             | local47
61568 181             | 	res	1
61568 182             | local48
61568 182             | 	res	1
61568 183             | local49
61568 183             | 	res	1
61568 184             | local50
61568 184             | 	res	1
61568 185             | local51
61568 185             | 	res	1
61568 186             | local52
61568 186             | 	res	1
61568 187             | muldiva_
61568 187             | 	res	1
61568 188             | muldivb_
61568 188             | 	res	1
61568 189             | 	fit	480
61568 189             | 
